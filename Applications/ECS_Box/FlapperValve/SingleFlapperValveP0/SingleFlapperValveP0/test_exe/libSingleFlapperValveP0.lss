
libSingleFlapperValveP0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011480  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011480  00011480  00021480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000064c  20000000  00011488  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003064c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003064c  2**0
                  CONTENTS
  5 .bss          0000a6a8  20000650  00011ad8  0003064c  2**3
                  ALLOC
  6 .stack        00010000  2000acf8  0001c180  0003064c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003067a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000872da  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000baef  00000000  00000000  000b79ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001efe8  00000000  00000000  000c349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003668  00000000  00000000  000e2484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000032a8  00000000  00000000  000e5aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00053324  00000000  00000000  000e8d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00042f06  00000000  00000000  0013c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00140db1  00000000  00000000  0017efbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e194  00000000  00000000  002bfd70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 ac 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	c1 69 00 00 59 57 00 00 69 57 00 00 55 03 00 00     .i..YW..iW..U...
      7c:	79 57 00 00 89 57 00 00 99 57 00 00 a9 57 00 00     yW...W...W...W..
      8c:	b9 57 00 00 c9 57 00 00 d9 57 00 00 55 03 00 00     .W...W...W..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 a1 4b 00 00 3d b9 00 00     U...U....K..=...
     184:	4d b9 00 00 5d b9 00 00 6d b9 00 00 55 03 00 00     M...]...m...U...
     194:	3d 83 00 00 55 03 00 00 55 03 00 00 55 03 00 00     =...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 59 83 00 00     U...U...U...Y...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	75 83 00 00 55 03 00 00 55 03 00 00 55 03 00 00     u...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 39 90 00 00 55 03 00 00     U...U...9...U...
     1f4:	55 90 00 00 55 03 00 00 71 90 00 00 8d 90 00 00     U...U...q.......
     204:	a9 90 00 00 c5 90 00 00 55 03 00 00 55 03 00 00     ........U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000650 	.word	0x20000650
     280:	00000000 	.word	0x00000000
     284:	00011488 	.word	0x00011488

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011488 	.word	0x00011488
     2c4:	20000654 	.word	0x20000654
     2c8:	00011488 	.word	0x00011488
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	00011488 	.word	0x00011488
     334:	20000000 	.word	0x20000000
     338:	2000064c 	.word	0x2000064c
     33c:	20000650 	.word	0x20000650
     340:	2000acf8 	.word	0x2000acf8
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	00010a41 	.word	0x00010a41
     350:	00001195 	.word	0x00001195

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>
	...

0000035c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
     35c:	b480      	push	{r7}
     35e:	b083      	sub	sp, #12
     360:	af00      	add	r7, sp, #0
     362:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
     364:	4b07      	ldr	r3, [pc, #28]	; (384 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
     366:	681b      	ldr	r3, [r3, #0]
     368:	2201      	movs	r2, #1
     36a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
     36e:	4b05      	ldr	r3, [pc, #20]	; (384 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
     370:	681b      	ldr	r3, [r3, #0]
     372:	2201      	movs	r2, #1
     374:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
     378:	bf00      	nop
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	200007a4 	.word	0x200007a4

00000388 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
     390:	4b07      	ldr	r3, [pc, #28]	; (3b0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
     392:	685b      	ldr	r3, [r3, #4]
     394:	2201      	movs	r2, #1
     396:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
     39c:	685b      	ldr	r3, [r3, #4]
     39e:	2201      	movs	r2, #1
     3a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
     3a4:	bf00      	nop
     3a6:	370c      	adds	r7, #12
     3a8:	46bd      	mov	sp, r7
     3aa:	bc80      	pop	{r7}
     3ac:	4770      	bx	lr
     3ae:	bf00      	nop
     3b0:	200007a4 	.word	0x200007a4

000003b4 <_ZN22FlapperValveControllerC1Ev>:
	ptrFlapperValveController[1]->resetTimeout=true;
}


// default constructor
FlapperValveController::FlapperValveController()
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	4618      	mov	r0, r3
     3c0:	4b1d      	ldr	r3, [pc, #116]	; (438 <_ZN22FlapperValveControllerC1Ev+0x84>)
     3c2:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	4a1d      	ldr	r2, [pc, #116]	; (43c <_ZN22FlapperValveControllerC1Ev+0x88>)
     3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	2200      	movs	r2, #0
     3d0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	2200      	movs	r2, #0
     3e8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	2200      	movs	r2, #0
     3f0:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	22da      	movs	r2, #218	; 0xda
     3f8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	2200      	movs	r2, #0
     400:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2200      	movs	r2, #0
     408:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	2200      	movs	r2, #0
     410:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
     414:	687b      	ldr	r3, [r7, #4]
     416:	2200      	movs	r2, #0
     418:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	2200      	movs	r2, #0
     420:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
     424:	687b      	ldr	r3, [r7, #4]
     426:	2200      	movs	r2, #0
     428:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	
} //FlapperValveController
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	3708      	adds	r7, #8
     432:	46bd      	mov	sp, r7
     434:	bd80      	pop	{r7, pc}
     436:	bf00      	nop
     438:	000009f1 	.word	0x000009f1
     43c:	200007ac 	.word	0x200007ac

00000440 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
     440:	b580      	push	{r7, lr}
     442:	b082      	sub	sp, #8
     444:	af00      	add	r7, sp, #0
     446:	6078      	str	r0, [r7, #4]
     448:	687b      	ldr	r3, [r7, #4]
     44a:	4618      	mov	r0, r3
     44c:	4b03      	ldr	r3, [pc, #12]	; (45c <_ZN22FlapperValveControllerD1Ev+0x1c>)
     44e:	4798      	blx	r3
{
} //~FlapperValveController
     450:	687b      	ldr	r3, [r7, #4]
     452:	4618      	mov	r0, r3
     454:	3708      	adds	r7, #8
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	bf00      	nop
     45c:	00000a3d 	.word	0x00000a3d

00000460 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	460b      	mov	r3, r1
     46a:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
     46c:	78fb      	ldrb	r3, [r7, #3]
     46e:	491b      	ldr	r1, [pc, #108]	; (4dc <_ZN22FlapperValveController14InitControllerEh+0x7c>)
     470:	687a      	ldr	r2, [r7, #4]
     472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
     476:	687b      	ldr	r3, [r7, #4]
     478:	78fa      	ldrb	r2, [r7, #3]
     47a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
     47e:	78fa      	ldrb	r2, [r7, #3]
     480:	4613      	mov	r3, r2
     482:	011b      	lsls	r3, r3, #4
     484:	1a9b      	subs	r3, r3, r2
     486:	00db      	lsls	r3, r3, #3
     488:	4a15      	ldr	r2, [pc, #84]	; (4e0 <_ZN22FlapperValveController14InitControllerEh+0x80>)
     48a:	441a      	add	r2, r3
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
     492:	78fb      	ldrb	r3, [r7, #3]
     494:	78fa      	ldrb	r2, [r7, #3]
     496:	0112      	lsls	r2, r2, #4
     498:	4912      	ldr	r1, [pc, #72]	; (4e4 <_ZN22FlapperValveController14InitControllerEh+0x84>)
     49a:	440a      	add	r2, r1
     49c:	6879      	ldr	r1, [r7, #4]
     49e:	3332      	adds	r3, #50	; 0x32
     4a0:	009b      	lsls	r3, r3, #2
     4a2:	440b      	add	r3, r1
     4a4:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     4ac:	78fa      	ldrb	r2, [r7, #3]
     4ae:	4611      	mov	r1, r2
     4b0:	4618      	mov	r0, r3
     4b2:	4b0d      	ldr	r3, [pc, #52]	; (4e8 <_ZN22FlapperValveController14InitControllerEh+0x88>)
     4b4:	4798      	blx	r3
     4b6:	4603      	mov	r3, r0
     4b8:	2b00      	cmp	r3, #0
     4ba:	d007      	beq.n	4cc <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
     4bc:	6878      	ldr	r0, [r7, #4]
     4be:	4b0b      	ldr	r3, [pc, #44]	; (4ec <_ZN22FlapperValveController14InitControllerEh+0x8c>)
     4c0:	4798      	blx	r3
     4c2:	4603      	mov	r3, r0
     4c4:	461a      	mov	r2, r3
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
     4d2:	b2db      	uxtb	r3, r3
}
     4d4:	4618      	mov	r0, r3
     4d6:	3708      	adds	r7, #8
     4d8:	46bd      	mov	sp, r7
     4da:	bd80      	pop	{r7, pc}
     4dc:	200007a4 	.word	0x200007a4
     4e0:	200007ac 	.word	0x200007ac
     4e4:	20000784 	.word	0x20000784
     4e8:	00000af1 	.word	0x00000af1
     4ec:	0000065d 	.word	0x0000065d

000004f0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

	return 0;
	
}

void	FlapperValveController::UpdateFlapperValveData(void){
     4f0:	b590      	push	{r4, r7, lr}
     4f2:	b085      	sub	sp, #20
     4f4:	af00      	add	r7, sp, #0
     4f6:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
     4f8:	68fb      	ldr	r3, [r7, #12]
     4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     4fe:	4618      	mov	r0, r3
     500:	4b36      	ldr	r3, [pc, #216]	; (5dc <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
     502:	4798      	blx	r3
     504:	4603      	mov	r3, r0
     506:	461a      	mov	r2, r3
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
     50e:	68fb      	ldr	r3, [r7, #12]
     510:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
     514:	68fb      	ldr	r3, [r7, #12]
     516:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
     51a:	68fb      	ldr	r3, [r7, #12]
     51c:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
     520:	68fb      	ldr	r3, [r7, #12]
     522:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
     526:	68fb      	ldr	r3, [r7, #12]
     528:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     52c:	68fc      	ldr	r4, [r7, #12]
     52e:	463b      	mov	r3, r7
     530:	4611      	mov	r1, r2
     532:	4618      	mov	r0, r3
     534:	4b2a      	ldr	r3, [pc, #168]	; (5e0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
     536:	4798      	blx	r3
     538:	f104 0384 	add.w	r3, r4, #132	; 0x84
     53c:	463a      	mov	r2, r7
     53e:	6810      	ldr	r0, [r2, #0]
     540:	6018      	str	r0, [r3, #0]
     542:	8892      	ldrh	r2, [r2, #4]
     544:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
     546:	68fb      	ldr	r3, [r7, #12]
     548:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     54c:	68fc      	ldr	r4, [r7, #12]
     54e:	463b      	mov	r3, r7
     550:	4611      	mov	r1, r2
     552:	4618      	mov	r0, r3
     554:	4b23      	ldr	r3, [pc, #140]	; (5e4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
     556:	4798      	blx	r3
     558:	f104 038a 	add.w	r3, r4, #138	; 0x8a
     55c:	463a      	mov	r2, r7
     55e:	6811      	ldr	r1, [r2, #0]
     560:	6852      	ldr	r2, [r2, #4]
     562:	6019      	str	r1, [r3, #0]
     564:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
     566:	68fb      	ldr	r3, [r7, #12]
     568:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
     56c:	b2da      	uxtb	r2, r3
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
     574:	68fb      	ldr	r3, [r7, #12]
     576:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
     57a:	68fb      	ldr	r3, [r7, #12]
     57c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
     580:	68fb      	ldr	r3, [r7, #12]
     582:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     586:	68fb      	ldr	r3, [r7, #12]
     588:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
     58c:	68fb      	ldr	r3, [r7, #12]
     58e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
     592:	b2da      	uxtb	r2, r3
     594:	68fb      	ldr	r3, [r7, #12]
     596:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
     59a:	68fb      	ldr	r3, [r7, #12]
     59c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
     5a0:	2b00      	cmp	r3, #0
     5a2:	d008      	beq.n	5b6 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
     5a4:	68fb      	ldr	r3, [r7, #12]
     5a6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
     5aa:	43db      	mvns	r3, r3
     5ac:	b2da      	uxtb	r2, r3
     5ae:	68fb      	ldr	r3, [r7, #12]
     5b0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     5b4:	e007      	b.n	5c6 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
     5bc:	43db      	mvns	r3, r3
     5be:	b2da      	uxtb	r2, r3
     5c0:	68fb      	ldr	r3, [r7, #12]
     5c2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
     5c6:	68fb      	ldr	r3, [r7, #12]
     5c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     5cc:	4619      	mov	r1, r3
     5ce:	68f8      	ldr	r0, [r7, #12]
     5d0:	4b05      	ldr	r3, [pc, #20]	; (5e8 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
     5d2:	4798      	blx	r3
}
     5d4:	bf00      	nop
     5d6:	3714      	adds	r7, #20
     5d8:	46bd      	mov	sp, r7
     5da:	bd90      	pop	{r4, r7, pc}
     5dc:	00000e71 	.word	0x00000e71
     5e0:	00000bf5 	.word	0x00000bf5
     5e4:	00000b9d 	.word	0x00000b9d
     5e8:	000005ed 	.word	0x000005ed

000005ec <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
     5ec:	b480      	push	{r7}
     5ee:	b085      	sub	sp, #20
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
     5f4:	460b      	mov	r3, r1
     5f6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
     5f8:	2300      	movs	r3, #0
     5fa:	73fb      	strb	r3, [r7, #15]
     5fc:	7bfb      	ldrb	r3, [r7, #15]
     5fe:	2b0e      	cmp	r3, #14
     600:	dc1d      	bgt.n	63e <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
     602:	687b      	ldr	r3, [r7, #4]
     604:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     608:	687a      	ldr	r2, [r7, #4]
     60a:	3332      	adds	r3, #50	; 0x32
     60c:	009b      	lsls	r3, r3, #2
     60e:	4413      	add	r3, r2
     610:	685b      	ldr	r3, [r3, #4]
     612:	7bfa      	ldrb	r2, [r7, #15]
     614:	f1c2 020f 	rsb	r2, r2, #15
     618:	441a      	add	r2, r3
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     620:	6879      	ldr	r1, [r7, #4]
     622:	3332      	adds	r3, #50	; 0x32
     624:	009b      	lsls	r3, r3, #2
     626:	440b      	add	r3, r1
     628:	685b      	ldr	r3, [r3, #4]
     62a:	7bf9      	ldrb	r1, [r7, #15]
     62c:	f1c1 010e 	rsb	r1, r1, #14
     630:	440b      	add	r3, r1
     632:	781b      	ldrb	r3, [r3, #0]
     634:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
     636:	7bfb      	ldrb	r3, [r7, #15]
     638:	3301      	adds	r3, #1
     63a:	73fb      	strb	r3, [r7, #15]
     63c:	e7de      	b.n	5fc <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
     63e:	687b      	ldr	r3, [r7, #4]
     640:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     644:	687a      	ldr	r2, [r7, #4]
     646:	3332      	adds	r3, #50	; 0x32
     648:	009b      	lsls	r3, r3, #2
     64a:	4413      	add	r3, r2
     64c:	685b      	ldr	r3, [r3, #4]
     64e:	78fa      	ldrb	r2, [r7, #3]
     650:	701a      	strb	r2, [r3, #0]
}
     652:	bf00      	nop
     654:	3714      	adds	r7, #20
     656:	46bd      	mov	sp, r7
     658:	bc80      	pop	{r7}
     65a:	4770      	bx	lr

0000065c <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
     65c:	b580      	push	{r7, lr}
     65e:	b084      	sub	sp, #16
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
     664:	23b4      	movs	r3, #180	; 0xb4
     666:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
     668:	687b      	ldr	r3, [r7, #4]
     66a:	4a59      	ldr	r2, [pc, #356]	; (7d0 <_ZN22FlapperValveController8SelftestEv+0x174>)
     66c:	33c7      	adds	r3, #199	; 0xc7
     66e:	8812      	ldrh	r2, [r2, #0]
     670:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
     672:	6878      	ldr	r0, [r7, #4]
     674:	4b57      	ldr	r3, [pc, #348]	; (7d4 <_ZN22FlapperValveController8SelftestEv+0x178>)
     676:	4798      	blx	r3
	singlefv->SetEnable(false);
     678:	687b      	ldr	r3, [r7, #4]
     67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     67e:	2100      	movs	r1, #0
     680:	4618      	mov	r0, r3
     682:	4b55      	ldr	r3, [pc, #340]	; (7d8 <_ZN22FlapperValveController8SelftestEv+0x17c>)
     684:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
     686:	687b      	ldr	r3, [r7, #4]
     688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     68c:	2100      	movs	r1, #0
     68e:	4618      	mov	r0, r3
     690:	4b52      	ldr	r3, [pc, #328]	; (7dc <_ZN22FlapperValveController8SelftestEv+0x180>)
     692:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
     694:	687b      	ldr	r3, [r7, #4]
     696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     69a:	2100      	movs	r1, #0
     69c:	4618      	mov	r0, r3
     69e:	4b50      	ldr	r3, [pc, #320]	; (7e0 <_ZN22FlapperValveController8SelftestEv+0x184>)
     6a0:	4798      	blx	r3
	delay_ms(10);
     6a2:	200a      	movs	r0, #10
     6a4:	4b4f      	ldr	r3, [pc, #316]	; (7e4 <_ZN22FlapperValveController8SelftestEv+0x188>)
     6a6:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6ae:	2101      	movs	r1, #1
     6b0:	4618      	mov	r0, r3
     6b2:	4b4b      	ldr	r3, [pc, #300]	; (7e0 <_ZN22FlapperValveController8SelftestEv+0x184>)
     6b4:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6bc:	7bba      	ldrb	r2, [r7, #14]
     6be:	4611      	mov	r1, r2
     6c0:	4618      	mov	r0, r3
     6c2:	4b49      	ldr	r3, [pc, #292]	; (7e8 <_ZN22FlapperValveController8SelftestEv+0x18c>)
     6c4:	4798      	blx	r3
	singlefv->SetDirection(false);
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6cc:	2100      	movs	r1, #0
     6ce:	4618      	mov	r0, r3
     6d0:	4b46      	ldr	r3, [pc, #280]	; (7ec <_ZN22FlapperValveController8SelftestEv+0x190>)
     6d2:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6da:	4618      	mov	r0, r3
     6dc:	4b44      	ldr	r3, [pc, #272]	; (7f0 <_ZN22FlapperValveController8SelftestEv+0x194>)
     6de:	4798      	blx	r3
     6e0:	4603      	mov	r3, r0
     6e2:	461a      	mov	r2, r3
     6e4:	7bbb      	ldrb	r3, [r7, #14]
     6e6:	429a      	cmp	r2, r3
     6e8:	bfcc      	ite	gt
     6ea:	2301      	movgt	r3, #1
     6ec:	2300      	movle	r3, #0
     6ee:	b2db      	uxtb	r3, r3
     6f0:	2b00      	cmp	r3, #0
     6f2:	d007      	beq.n	704 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     6fa:	2101      	movs	r1, #1
     6fc:	4618      	mov	r0, r3
     6fe:	4b3b      	ldr	r3, [pc, #236]	; (7ec <_ZN22FlapperValveController8SelftestEv+0x190>)
     700:	4798      	blx	r3
     702:	e006      	b.n	712 <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
     704:	687b      	ldr	r3, [r7, #4]
     706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     70a:	2100      	movs	r1, #0
     70c:	4618      	mov	r0, r3
     70e:	4b37      	ldr	r3, [pc, #220]	; (7ec <_ZN22FlapperValveController8SelftestEv+0x190>)
     710:	4798      	blx	r3
	}
	
		if (valve_ID==0)
     712:	687b      	ldr	r3, [r7, #4]
     714:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     718:	2b00      	cmp	r3, #0
     71a:	d106      	bne.n	72a <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
     71c:	f242 7210 	movw	r2, #10000	; 0x2710
     720:	4934      	ldr	r1, [pc, #208]	; (7f4 <_ZN22FlapperValveController8SelftestEv+0x198>)
     722:	4835      	ldr	r0, [pc, #212]	; (7f8 <_ZN22FlapperValveController8SelftestEv+0x19c>)
     724:	4b35      	ldr	r3, [pc, #212]	; (7fc <_ZN22FlapperValveController8SelftestEv+0x1a0>)
     726:	4798      	blx	r3
     728:	e005      	b.n	736 <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
     72a:	f242 7210 	movw	r2, #10000	; 0x2710
     72e:	4934      	ldr	r1, [pc, #208]	; (800 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
     730:	4831      	ldr	r0, [pc, #196]	; (7f8 <_ZN22FlapperValveController8SelftestEv+0x19c>)
     732:	4b32      	ldr	r3, [pc, #200]	; (7fc <_ZN22FlapperValveController8SelftestEv+0x1a0>)
     734:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
     736:	687b      	ldr	r3, [r7, #4]
     738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     73c:	2101      	movs	r1, #1
     73e:	4618      	mov	r0, r3
     740:	4b25      	ldr	r3, [pc, #148]	; (7d8 <_ZN22FlapperValveController8SelftestEv+0x17c>)
     742:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
     744:	687b      	ldr	r3, [r7, #4]
     746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     74a:	4618      	mov	r0, r3
     74c:	4b28      	ldr	r3, [pc, #160]	; (7f0 <_ZN22FlapperValveController8SelftestEv+0x194>)
     74e:	4798      	blx	r3
     750:	4603      	mov	r3, r0
     752:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
     754:	687b      	ldr	r3, [r7, #4]
     756:	2200      	movs	r2, #0
     758:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
     75c:	7bfa      	ldrb	r2, [r7, #15]
     75e:	7bbb      	ldrb	r3, [r7, #14]
     760:	1ad3      	subs	r3, r2, r3
     762:	2b00      	cmp	r3, #0
     764:	bfb8      	it	lt
     766:	425b      	neglt	r3, r3
     768:	2b0c      	cmp	r3, #12
     76a:	bfcc      	ite	gt
     76c:	2301      	movgt	r3, #1
     76e:	2300      	movle	r3, #0
     770:	b2db      	uxtb	r3, r3
     772:	461a      	mov	r2, r3
     774:	687b      	ldr	r3, [r7, #4]
     776:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     77a:	b2db      	uxtb	r3, r3
     77c:	f083 0301 	eor.w	r3, r3, #1
     780:	b2db      	uxtb	r3, r3
     782:	4013      	ands	r3, r2
     784:	2b00      	cmp	r3, #0
     786:	bf14      	ite	ne
     788:	2301      	movne	r3, #1
     78a:	2300      	moveq	r3, #0
     78c:	b2db      	uxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	d008      	beq.n	7a4 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
     792:	687b      	ldr	r3, [r7, #4]
     794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     798:	4618      	mov	r0, r3
     79a:	4b15      	ldr	r3, [pc, #84]	; (7f0 <_ZN22FlapperValveController8SelftestEv+0x194>)
     79c:	4798      	blx	r3
     79e:	4603      	mov	r3, r0
     7a0:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
     7a2:	e7db      	b.n	75c <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
     7a4:	6878      	ldr	r0, [r7, #4]
     7a6:	4b17      	ldr	r3, [pc, #92]	; (804 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
     7a8:	4798      	blx	r3

	singlefv->SetEnable(false);
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     7b0:	2100      	movs	r1, #0
     7b2:	4618      	mov	r0, r3
     7b4:	4b08      	ldr	r3, [pc, #32]	; (7d8 <_ZN22FlapperValveController8SelftestEv+0x17c>)
     7b6:	4798      	blx	r3
	return !timeoutFlapperValveController;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     7be:	b2db      	uxtb	r3, r3
     7c0:	f083 0301 	eor.w	r3, r3, #1
     7c4:	b2db      	uxtb	r3, r3
}
     7c6:	4618      	mov	r0, r3
     7c8:	3710      	adds	r7, #16
     7ca:	46bd      	mov	sp, r7
     7cc:	bd80      	pop	{r7, pc}
     7ce:	bf00      	nop
     7d0:	000112b8 	.word	0x000112b8
     7d4:	000004f1 	.word	0x000004f1
     7d8:	00000c51 	.word	0x00000c51
     7dc:	00000dc1 	.word	0x00000dc1
     7e0:	00000d49 	.word	0x00000d49
     7e4:	00002e6d 	.word	0x00002e6d
     7e8:	00000e39 	.word	0x00000e39
     7ec:	00000cd1 	.word	0x00000cd1
     7f0:	00000e71 	.word	0x00000e71
     7f4:	0000035d 	.word	0x0000035d
     7f8:	200006c4 	.word	0x200006c4
     7fc:	0000e8e1 	.word	0x0000e8e1
     800:	00000389 	.word	0x00000389
     804:	00000809 	.word	0x00000809

00000808 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
     808:	b580      	push	{r7, lr}
     80a:	b082      	sub	sp, #8
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
     810:	687b      	ldr	r3, [r7, #4]
     812:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     816:	2b00      	cmp	r3, #0
     818:	d104      	bne.n	824 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
     81a:	4906      	ldr	r1, [pc, #24]	; (834 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
     81c:	4806      	ldr	r0, [pc, #24]	; (838 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
     81e:	4b07      	ldr	r3, [pc, #28]	; (83c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
     820:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
     822:	e003      	b.n	82c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
     824:	4906      	ldr	r1, [pc, #24]	; (840 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
     826:	4804      	ldr	r0, [pc, #16]	; (838 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
     828:	4b04      	ldr	r3, [pc, #16]	; (83c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
     82a:	4798      	blx	r3
}
     82c:	bf00      	nop
     82e:	3708      	adds	r7, #8
     830:	46bd      	mov	sp, r7
     832:	bd80      	pop	{r7, pc}
     834:	0000035d 	.word	0x0000035d
     838:	200006c4 	.word	0x200006c4
     83c:	0000e889 	.word	0x0000e889
     840:	00000389 	.word	0x00000389

00000844 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
     844:	b590      	push	{r4, r7, lr}
     846:	b083      	sub	sp, #12
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
     84c:	4c05      	ldr	r4, [pc, #20]	; (864 <__tcf_0+0x20>)
     84e:	4b06      	ldr	r3, [pc, #24]	; (868 <__tcf_0+0x24>)
     850:	429c      	cmp	r4, r3
     852:	d004      	beq.n	85e <__tcf_0+0x1a>
     854:	3c78      	subs	r4, #120	; 0x78
     856:	4620      	mov	r0, r4
     858:	4b04      	ldr	r3, [pc, #16]	; (86c <__tcf_0+0x28>)
     85a:	4798      	blx	r3
     85c:	e7f7      	b.n	84e <__tcf_0+0xa>
     85e:	370c      	adds	r7, #12
     860:	46bd      	mov	sp, r7
     862:	bd90      	pop	{r4, r7, pc}
     864:	2000089c 	.word	0x2000089c
     868:	200007ac 	.word	0x200007ac
     86c:	00000a3d 	.word	0x00000a3d

00000870 <_Z41__static_initialization_and_destruction_0ii>:

     870:	b5b0      	push	{r4, r5, r7, lr}
     872:	b082      	sub	sp, #8
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	6039      	str	r1, [r7, #0]
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	2b01      	cmp	r3, #1
     87e:	d16d      	bne.n	95c <_Z41__static_initialization_and_destruction_0ii+0xec>
     880:	683b      	ldr	r3, [r7, #0]
     882:	f64f 72ff 	movw	r2, #65535	; 0xffff
     886:	4293      	cmp	r3, r2
     888:	d168      	bne.n	95c <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     88a:	4936      	ldr	r1, [pc, #216]	; (964 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     88c:	4836      	ldr	r0, [pc, #216]	; (968 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     88e:	4b37      	ldr	r3, [pc, #220]	; (96c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     890:	4798      	blx	r3
     892:	4a37      	ldr	r2, [pc, #220]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     894:	4937      	ldr	r1, [pc, #220]	; (974 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     896:	4834      	ldr	r0, [pc, #208]	; (968 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     898:	4b37      	ldr	r3, [pc, #220]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     89a:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     89c:	4937      	ldr	r1, [pc, #220]	; (97c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     89e:	4838      	ldr	r0, [pc, #224]	; (980 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     8a0:	4b38      	ldr	r3, [pc, #224]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8a2:	4798      	blx	r3
     8a4:	4a32      	ldr	r2, [pc, #200]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8a6:	4938      	ldr	r1, [pc, #224]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8a8:	4835      	ldr	r0, [pc, #212]	; (980 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     8aa:	4b33      	ldr	r3, [pc, #204]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8ac:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     8ae:	4937      	ldr	r1, [pc, #220]	; (98c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     8b0:	4837      	ldr	r0, [pc, #220]	; (990 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     8b2:	4b34      	ldr	r3, [pc, #208]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8b4:	4798      	blx	r3
     8b6:	4a2e      	ldr	r2, [pc, #184]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8b8:	4933      	ldr	r1, [pc, #204]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8ba:	4835      	ldr	r0, [pc, #212]	; (990 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     8bc:	4b2e      	ldr	r3, [pc, #184]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8be:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     8c0:	4934      	ldr	r1, [pc, #208]	; (994 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     8c2:	4835      	ldr	r0, [pc, #212]	; (998 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     8c4:	4b2f      	ldr	r3, [pc, #188]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8c6:	4798      	blx	r3
     8c8:	4a29      	ldr	r2, [pc, #164]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8ca:	492f      	ldr	r1, [pc, #188]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8cc:	4832      	ldr	r0, [pc, #200]	; (998 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     8ce:	4b2a      	ldr	r3, [pc, #168]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8d0:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     8d2:	4932      	ldr	r1, [pc, #200]	; (99c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     8d4:	4832      	ldr	r0, [pc, #200]	; (9a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     8d6:	4b2b      	ldr	r3, [pc, #172]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8d8:	4798      	blx	r3
     8da:	4a25      	ldr	r2, [pc, #148]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8dc:	492a      	ldr	r1, [pc, #168]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8de:	4830      	ldr	r0, [pc, #192]	; (9a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
     8e0:	4b25      	ldr	r3, [pc, #148]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8e2:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     8e4:	492f      	ldr	r1, [pc, #188]	; (9a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     8e6:	4830      	ldr	r0, [pc, #192]	; (9a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     8e8:	4b26      	ldr	r3, [pc, #152]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8ea:	4798      	blx	r3
     8ec:	4a20      	ldr	r2, [pc, #128]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     8ee:	4926      	ldr	r1, [pc, #152]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     8f0:	482d      	ldr	r0, [pc, #180]	; (9a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     8f2:	4b21      	ldr	r3, [pc, #132]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     8f4:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     8f6:	492d      	ldr	r1, [pc, #180]	; (9ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     8f8:	482d      	ldr	r0, [pc, #180]	; (9b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
     8fa:	4b22      	ldr	r3, [pc, #136]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     8fc:	4798      	blx	r3
     8fe:	4a1c      	ldr	r2, [pc, #112]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     900:	4921      	ldr	r1, [pc, #132]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     902:	482b      	ldr	r0, [pc, #172]	; (9b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
     904:	4b1c      	ldr	r3, [pc, #112]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     906:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     908:	492a      	ldr	r1, [pc, #168]	; (9b4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
     90a:	482b      	ldr	r0, [pc, #172]	; (9b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
     90c:	4b1d      	ldr	r3, [pc, #116]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     90e:	4798      	blx	r3
     910:	4a17      	ldr	r2, [pc, #92]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     912:	491d      	ldr	r1, [pc, #116]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     914:	4828      	ldr	r0, [pc, #160]	; (9b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
     916:	4b18      	ldr	r3, [pc, #96]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     918:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     91a:	4928      	ldr	r1, [pc, #160]	; (9bc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
     91c:	4828      	ldr	r0, [pc, #160]	; (9c0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
     91e:	4b19      	ldr	r3, [pc, #100]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     920:	4798      	blx	r3
     922:	4a13      	ldr	r2, [pc, #76]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     924:	4918      	ldr	r1, [pc, #96]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     926:	4826      	ldr	r0, [pc, #152]	; (9c0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
     928:	4b13      	ldr	r3, [pc, #76]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     92a:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
     92c:	4b25      	ldr	r3, [pc, #148]	; (9c4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
     92e:	2401      	movs	r4, #1
     930:	461d      	mov	r5, r3
     932:	2c00      	cmp	r4, #0
     934:	db05      	blt.n	942 <_Z41__static_initialization_and_destruction_0ii+0xd2>
     936:	4628      	mov	r0, r5
     938:	4b23      	ldr	r3, [pc, #140]	; (9c8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
     93a:	4798      	blx	r3
     93c:	3578      	adds	r5, #120	; 0x78
     93e:	3c01      	subs	r4, #1
     940:	e7f7      	b.n	932 <_Z41__static_initialization_and_destruction_0ii+0xc2>
     942:	4a0b      	ldr	r2, [pc, #44]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     944:	4921      	ldr	r1, [pc, #132]	; (9cc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
     946:	2000      	movs	r0, #0
     948:	4b0b      	ldr	r3, [pc, #44]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     94a:	4798      	blx	r3
     94c:	4820      	ldr	r0, [pc, #128]	; (9d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
     94e:	4b21      	ldr	r3, [pc, #132]	; (9d4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
     950:	4798      	blx	r3
     952:	4a07      	ldr	r2, [pc, #28]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     954:	4920      	ldr	r1, [pc, #128]	; (9d8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
     956:	481e      	ldr	r0, [pc, #120]	; (9d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     95a:	4798      	blx	r3
     95c:	bf00      	nop
     95e:	3708      	adds	r7, #8
     960:	46bd      	mov	sp, r7
     962:	bdb0      	pop	{r4, r5, r7, pc}
     964:	2000ab70 	.word	0x2000ab70
     968:	2000066c 	.word	0x2000066c
     96c:	0000dec9 	.word	0x0000dec9
     970:	20000000 	.word	0x20000000
     974:	0000dee5 	.word	0x0000dee5
     978:	00010a0d 	.word	0x00010a0d
     97c:	2000aa40 	.word	0x2000aa40
     980:	20000684 	.word	0x20000684
     984:	0000e639 	.word	0x0000e639
     988:	0000e671 	.word	0x0000e671
     98c:	2000aad4 	.word	0x2000aad4
     990:	200006a4 	.word	0x200006a4
     994:	2000abf8 	.word	0x2000abf8
     998:	200006c4 	.word	0x200006c4
     99c:	2000aaf4 	.word	0x2000aaf4
     9a0:	200006e4 	.word	0x200006e4
     9a4:	2000abb8 	.word	0x2000abb8
     9a8:	20000704 	.word	0x20000704
     9ac:	2000abd8 	.word	0x2000abd8
     9b0:	20000724 	.word	0x20000724
     9b4:	2000aab0 	.word	0x2000aab0
     9b8:	20000744 	.word	0x20000744
     9bc:	2000ab50 	.word	0x2000ab50
     9c0:	20000764 	.word	0x20000764
     9c4:	200007ac 	.word	0x200007ac
     9c8:	000009f1 	.word	0x000009f1
     9cc:	00000845 	.word	0x00000845
     9d0:	2000089c 	.word	0x2000089c
     9d4:	000003b5 	.word	0x000003b5
     9d8:	00000441 	.word	0x00000441

000009dc <_GLOBAL__sub_I_ptrFlapperValveController>:
     9dc:	b580      	push	{r7, lr}
     9de:	af00      	add	r7, sp, #0
     9e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9e4:	2001      	movs	r0, #1
     9e6:	4b01      	ldr	r3, [pc, #4]	; (9ec <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
     9e8:	4798      	blx	r3
     9ea:	bd80      	pop	{r7, pc}
     9ec:	00000871 	.word	0x00000871

000009f0 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
     9f0:	b580      	push	{r7, lr}
     9f2:	b082      	sub	sp, #8
     9f4:	af00      	add	r7, sp, #0
     9f6:	6078      	str	r0, [r7, #4]
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	4618      	mov	r0, r3
     9fc:	4b0c      	ldr	r3, [pc, #48]	; (a30 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
     9fe:	4798      	blx	r3
{
	valveID=0;
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	2200      	movs	r2, #0
     a04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
     a08:	687b      	ldr	r3, [r7, #4]
     a0a:	4a0a      	ldr	r2, [pc, #40]	; (a34 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
     a0c:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	2200      	movs	r2, #0
     a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
     a16:	4a08      	ldr	r2, [pc, #32]	; (a38 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	6013      	str	r3, [r2, #0]
	isOK=false;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	2200      	movs	r2, #0
     a20:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	4618      	mov	r0, r3
     a28:	3708      	adds	r7, #8
     a2a:	46bd      	mov	sp, r7
     a2c:	bd80      	pop	{r7, pc}
     a2e:	bf00      	nop
     a30:	0000e085 	.word	0x0000e085
     a34:	20000a94 	.word	0x20000a94
     a38:	20000a90 	.word	0x20000a90

00000a3c <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
     a3c:	b580      	push	{r7, lr}
     a3e:	b082      	sub	sp, #8
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	4618      	mov	r0, r3
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
     a4a:	4798      	blx	r3
{
} //~FlapperValve_Class
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	4618      	mov	r0, r3
     a50:	3708      	adds	r7, #8
     a52:	46bd      	mov	sp, r7
     a54:	bd80      	pop	{r7, pc}
     a56:	bf00      	nop
     a58:	0000e099 	.word	0x0000e099

00000a5c <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
     a5c:	b580      	push	{r7, lr}
     a5e:	b082      	sub	sp, #8
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
     a64:	687b      	ldr	r3, [r7, #4]
     a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a68:	7a1b      	ldrb	r3, [r3, #8]
     a6a:	b2db      	uxtb	r3, r3
     a6c:	2b00      	cmp	r3, #0
     a6e:	d104      	bne.n	a7a <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a74:	4618      	mov	r0, r3
     a76:	4b19      	ldr	r3, [pc, #100]	; (adc <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
     a78:	4798      	blx	r3
	}
		

		if (i2c->isOK)
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a7e:	7a5b      	ldrb	r3, [r3, #9]
     a80:	b2db      	uxtb	r3, r3
     a82:	2b00      	cmp	r3, #0
     a84:	d01b      	beq.n	abe <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
     a8c:	4619      	mov	r1, r3
     a8e:	6878      	ldr	r0, [r7, #4]
     a90:	4b13      	ldr	r3, [pc, #76]	; (ae0 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
     a92:	4798      	blx	r3
			expanders[0]->SetPortInput();
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     a98:	4618      	mov	r0, r3
     a9a:	4b12      	ldr	r3, [pc, #72]	; (ae4 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
     a9c:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     aa2:	2182      	movs	r1, #130	; 0x82
     aa4:	4618      	mov	r0, r3
     aa6:	4b10      	ldr	r3, [pc, #64]	; (ae8 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
     aa8:	4798      	blx	r3
			expanders[2]->SetPortOutput();
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     aae:	4618      	mov	r0, r3
     ab0:	4b0e      	ldr	r3, [pc, #56]	; (aec <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
     ab2:	4798      	blx	r3
			expanders[3]->SetPortInput();
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     ab8:	4618      	mov	r0, r3
     aba:	4b0a      	ldr	r3, [pc, #40]	; (ae4 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
     abc:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     ac2:	7a5b      	ldrb	r3, [r3, #9]
     ac4:	b2da      	uxtb	r2, r3
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
     ad2:	b2db      	uxtb	r3, r3


}
     ad4:	4618      	mov	r0, r3
     ad6:	3708      	adds	r7, #8
     ad8:	46bd      	mov	sp, r7
     ada:	bd80      	pop	{r7, pc}
     adc:	0000def9 	.word	0x0000def9
     ae0:	00000b19 	.word	0x00000b19
     ae4:	0000e3fd 	.word	0x0000e3fd
     ae8:	0000e441 	.word	0x0000e441
     aec:	0000e4b5 	.word	0x0000e4b5

00000af0 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	460b      	mov	r3, r1
     afa:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
     afc:	687b      	ldr	r3, [r7, #4]
     afe:	78fa      	ldrb	r2, [r7, #3]
     b00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
     b04:	6878      	ldr	r0, [r7, #4]
     b06:	4b03      	ldr	r3, [pc, #12]	; (b14 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
     b08:	4798      	blx	r3
     b0a:	4603      	mov	r3, r0
}
     b0c:	4618      	mov	r0, r3
     b0e:	3708      	adds	r7, #8
     b10:	46bd      	mov	sp, r7
     b12:	bd80      	pop	{r7, pc}
     b14:	00000a5d 	.word	0x00000a5d

00000b18 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
     b18:	b580      	push	{r7, lr}
     b1a:	b084      	sub	sp, #16
     b1c:	af00      	add	r7, sp, #0
     b1e:	6078      	str	r0, [r7, #4]
     b20:	460b      	mov	r3, r1
     b22:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
     b24:	2300      	movs	r3, #0
     b26:	60fb      	str	r3, [r7, #12]
     b28:	68fb      	ldr	r3, [r7, #12]
     b2a:	2b03      	cmp	r3, #3
     b2c:	dc2d      	bgt.n	b8a <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
     b34:	4619      	mov	r1, r3
     b36:	68fb      	ldr	r3, [r7, #12]
     b38:	461a      	mov	r2, r3
     b3a:	00d2      	lsls	r2, r2, #3
     b3c:	1ad2      	subs	r2, r2, r3
     b3e:	0093      	lsls	r3, r2, #2
     b40:	461a      	mov	r2, r3
     b42:	460b      	mov	r3, r1
     b44:	00db      	lsls	r3, r3, #3
     b46:	1a5b      	subs	r3, r3, r1
     b48:	011b      	lsls	r3, r3, #4
     b4a:	4413      	add	r3, r2
     b4c:	4a11      	ldr	r2, [pc, #68]	; (b94 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
     b4e:	441a      	add	r2, r3
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	6e98      	ldr	r0, [r3, #104]	; 0x68
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	b2da      	uxtb	r2, r3
     b5c:	78fb      	ldrb	r3, [r7, #3]
     b5e:	009b      	lsls	r3, r3, #2
     b60:	b2db      	uxtb	r3, r3
     b62:	4413      	add	r3, r2
     b64:	b2db      	uxtb	r3, r3
     b66:	3320      	adds	r3, #32
     b68:	b2d9      	uxtb	r1, r3
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     b6e:	461a      	mov	r2, r3
     b70:	4b09      	ldr	r3, [pc, #36]	; (b98 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
     b72:	4798      	blx	r3
		expanders[i]=currentExpander;
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	6e99      	ldr	r1, [r3, #104]	; 0x68
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	68fa      	ldr	r2, [r7, #12]
     b7c:	3216      	adds	r2, #22
     b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	3301      	adds	r3, #1
     b86:	60fb      	str	r3, [r7, #12]
     b88:	e7ce      	b.n	b28 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
     b8a:	2300      	movs	r3, #0
}
     b8c:	4618      	mov	r0, r3
     b8e:	3710      	adds	r7, #16
     b90:	46bd      	mov	sp, r7
     b92:	bd80      	pop	{r7, pc}
     b94:	20000aac 	.word	0x20000aac
     b98:	0000e289 	.word	0x0000e289

00000b9c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
     b9c:	b590      	push	{r4, r7, lr}
     b9e:	b085      	sub	sp, #20
     ba0:	af00      	add	r7, sp, #0
     ba2:	60f8      	str	r0, [r7, #12]
     ba4:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
     ba6:	68bb      	ldr	r3, [r7, #8]
     ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     baa:	4618      	mov	r0, r3
     bac:	4b0f      	ldr	r3, [pc, #60]	; (bec <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
     bae:	4798      	blx	r3
     bb0:	4603      	mov	r3, r0
     bb2:	461a      	mov	r2, r3
     bb4:	68bb      	ldr	r3, [r7, #8]
     bb6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
     bba:	68b9      	ldr	r1, [r7, #8]
     bbc:	68bb      	ldr	r3, [r7, #8]
     bbe:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
     bc2:	68bc      	ldr	r4, [r7, #8]
     bc4:	463b      	mov	r3, r7
     bc6:	4618      	mov	r0, r3
     bc8:	4b09      	ldr	r3, [pc, #36]	; (bf0 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
     bca:	4798      	blx	r3
     bcc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
     bd0:	463a      	mov	r2, r7
     bd2:	6810      	ldr	r0, [r2, #0]
     bd4:	6851      	ldr	r1, [r2, #4]
     bd6:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
     bd8:	68fa      	ldr	r2, [r7, #12]
     bda:	68bb      	ldr	r3, [r7, #8]
     bdc:	333c      	adds	r3, #60	; 0x3c
     bde:	cb03      	ldmia	r3!, {r0, r1}
     be0:	6010      	str	r0, [r2, #0]
     be2:	6051      	str	r1, [r2, #4]
}
     be4:	68f8      	ldr	r0, [r7, #12]
     be6:	3714      	adds	r7, #20
     be8:	46bd      	mov	sp, r7
     bea:	bd90      	pop	{r4, r7, pc}
     bec:	0000e33d 	.word	0x0000e33d
     bf0:	0000e195 	.word	0x0000e195

00000bf4 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
     bf4:	b590      	push	{r4, r7, lr}
     bf6:	b085      	sub	sp, #20
     bf8:	af00      	add	r7, sp, #0
     bfa:	60f8      	str	r0, [r7, #12]
     bfc:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
     bfe:	68bb      	ldr	r3, [r7, #8]
     c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     c02:	4618      	mov	r0, r3
     c04:	4b10      	ldr	r3, [pc, #64]	; (c48 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
     c06:	4798      	blx	r3
     c08:	4603      	mov	r3, r0
     c0a:	461a      	mov	r2, r3
     c0c:	68bb      	ldr	r3, [r7, #8]
     c0e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
     c12:	68b9      	ldr	r1, [r7, #8]
     c14:	68bb      	ldr	r3, [r7, #8]
     c16:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
     c1a:	68bc      	ldr	r4, [r7, #8]
     c1c:	463b      	mov	r3, r7
     c1e:	4618      	mov	r0, r3
     c20:	4b0a      	ldr	r3, [pc, #40]	; (c4c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
     c22:	4798      	blx	r3
     c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
     c28:	463a      	mov	r2, r7
     c2a:	6810      	ldr	r0, [r2, #0]
     c2c:	6018      	str	r0, [r3, #0]
     c2e:	8892      	ldrh	r2, [r2, #4]
     c30:	809a      	strh	r2, [r3, #4]
	return statusInputs;
     c32:	68fa      	ldr	r2, [r7, #12]
     c34:	68bb      	ldr	r3, [r7, #8]
     c36:	3344      	adds	r3, #68	; 0x44
     c38:	6818      	ldr	r0, [r3, #0]
     c3a:	6010      	str	r0, [r2, #0]
     c3c:	889b      	ldrh	r3, [r3, #4]
     c3e:	8093      	strh	r3, [r2, #4]
}
     c40:	68f8      	ldr	r0, [r7, #12]
     c42:	3714      	adds	r7, #20
     c44:	46bd      	mov	sp, r7
     c46:	bd90      	pop	{r4, r7, pc}
     c48:	0000e33d 	.word	0x0000e33d
     c4c:	0000e141 	.word	0x0000e141

00000c50 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
     c50:	b580      	push	{r7, lr}
     c52:	b082      	sub	sp, #8
     c54:	af00      	add	r7, sp, #0
     c56:	6078      	str	r0, [r7, #4]
     c58:	460b      	mov	r3, r1
     c5a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     c60:	4618      	mov	r0, r3
     c62:	4b19      	ldr	r3, [pc, #100]	; (cc8 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
     c64:	4798      	blx	r3
     c66:	4603      	mov	r3, r0
     c68:	461a      	mov	r2, r3
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
     c70:	78fb      	ldrb	r3, [r7, #3]
     c72:	2b00      	cmp	r3, #0
     c74:	d006      	beq.n	c84 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     c7c:	f043 0301 	orr.w	r3, r3, #1
     c80:	b2db      	uxtb	r3, r3
     c82:	e005      	b.n	c90 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     c8a:	f023 0301 	bic.w	r3, r3, #1
     c8e:	b2db      	uxtb	r3, r3
     c90:	687a      	ldr	r2, [r7, #4]
     c92:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	78fa      	ldrb	r2, [r7, #3]
     c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     ca8:	4619      	mov	r1, r3
     caa:	4610      	mov	r0, r2
     cac:	4b07      	ldr	r3, [pc, #28]	; (ccc <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
     cae:	4798      	blx	r3
     cb0:	4603      	mov	r3, r0
     cb2:	461a      	mov	r2, r3
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     cc0:	4618      	mov	r0, r3
     cc2:	3708      	adds	r7, #8
     cc4:	46bd      	mov	sp, r7
     cc6:	bd80      	pop	{r7, pc}
     cc8:	0000e33d 	.word	0x0000e33d
     ccc:	0000e3c1 	.word	0x0000e3c1

00000cd0 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
     cd0:	b580      	push	{r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
     cd8:	460b      	mov	r3, r1
     cda:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     ce0:	4618      	mov	r0, r3
     ce2:	4b17      	ldr	r3, [pc, #92]	; (d40 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
     ce4:	4798      	blx	r3
     ce6:	4603      	mov	r3, r0
     ce8:	461a      	mov	r2, r3
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
     cf0:	78fb      	ldrb	r3, [r7, #3]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d006      	beq.n	d04 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     cfc:	f043 0320 	orr.w	r3, r3, #32
     d00:	b2db      	uxtb	r3, r3
     d02:	e005      	b.n	d10 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d0a:	f023 0320 	bic.w	r3, r3, #32
     d0e:	b2db      	uxtb	r3, r3
     d10:	687a      	ldr	r2, [r7, #4]
     d12:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d20:	4619      	mov	r1, r3
     d22:	4610      	mov	r0, r2
     d24:	4b07      	ldr	r3, [pc, #28]	; (d44 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
     d26:	4798      	blx	r3
     d28:	4603      	mov	r3, r0
     d2a:	461a      	mov	r2, r3
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     d38:	4618      	mov	r0, r3
     d3a:	3708      	adds	r7, #8
     d3c:	46bd      	mov	sp, r7
     d3e:	bd80      	pop	{r7, pc}
     d40:	0000e33d 	.word	0x0000e33d
     d44:	0000e3c1 	.word	0x0000e3c1

00000d48 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
     d50:	460b      	mov	r3, r1
     d52:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     d58:	4618      	mov	r0, r3
     d5a:	4b17      	ldr	r3, [pc, #92]	; (db8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
     d5c:	4798      	blx	r3
     d5e:	4603      	mov	r3, r0
     d60:	461a      	mov	r2, r3
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
     d68:	78fb      	ldrb	r3, [r7, #3]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d006      	beq.n	d7c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     d78:	b2db      	uxtb	r3, r3
     d7a:	e005      	b.n	d88 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
     d86:	b2db      	uxtb	r3, r3
     d88:	687a      	ldr	r2, [r7, #4]
     d8a:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     d98:	4619      	mov	r1, r3
     d9a:	4610      	mov	r0, r2
     d9c:	4b07      	ldr	r3, [pc, #28]	; (dbc <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
     d9e:	4798      	blx	r3
     da0:	4603      	mov	r3, r0
     da2:	461a      	mov	r2, r3
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     daa:	687b      	ldr	r3, [r7, #4]
     dac:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     db0:	4618      	mov	r0, r3
     db2:	3708      	adds	r7, #8
     db4:	46bd      	mov	sp, r7
     db6:	bd80      	pop	{r7, pc}
     db8:	0000e33d 	.word	0x0000e33d
     dbc:	0000e3c1 	.word	0x0000e3c1

00000dc0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
     dc0:	b580      	push	{r7, lr}
     dc2:	b082      	sub	sp, #8
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     dd0:	4618      	mov	r0, r3
     dd2:	4b17      	ldr	r3, [pc, #92]	; (e30 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
     dd4:	4798      	blx	r3
     dd6:	4603      	mov	r3, r0
     dd8:	461a      	mov	r2, r3
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
     de0:	78fb      	ldrb	r3, [r7, #3]
     de2:	2b00      	cmp	r3, #0
     de4:	d006      	beq.n	df4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     dec:	f043 0304 	orr.w	r3, r3, #4
     df0:	b2db      	uxtb	r3, r3
     df2:	e005      	b.n	e00 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     dfa:	f023 0304 	bic.w	r3, r3, #4
     dfe:	b2db      	uxtb	r3, r3
     e00:	687a      	ldr	r2, [r7, #4]
     e02:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
     e10:	4619      	mov	r1, r3
     e12:	4610      	mov	r0, r2
     e14:	4b07      	ldr	r3, [pc, #28]	; (e34 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
     e16:	4798      	blx	r3
     e18:	4603      	mov	r3, r0
     e1a:	461a      	mov	r2, r3
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
     e28:	4618      	mov	r0, r3
     e2a:	3708      	adds	r7, #8
     e2c:	46bd      	mov	sp, r7
     e2e:	bd80      	pop	{r7, pc}
     e30:	0000e33d 	.word	0x0000e33d
     e34:	0000e3c1 	.word	0x0000e3c1

00000e38 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
     e38:	b580      	push	{r7, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	af00      	add	r7, sp, #0
     e3e:	6078      	str	r0, [r7, #4]
     e40:	460b      	mov	r3, r1
     e42:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     e48:	78fa      	ldrb	r2, [r7, #3]
     e4a:	4611      	mov	r1, r2
     e4c:	4618      	mov	r0, r3
     e4e:	4b07      	ldr	r3, [pc, #28]	; (e6c <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
     e50:	4798      	blx	r3
     e52:	4603      	mov	r3, r0
     e54:	461a      	mov	r2, r3
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
     e62:	4618      	mov	r0, r3
     e64:	3708      	adds	r7, #8
     e66:	46bd      	mov	sp, r7
     e68:	bd80      	pop	{r7, pc}
     e6a:	bf00      	nop
     e6c:	0000e3c1 	.word	0x0000e3c1

00000e70 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
     e70:	b580      	push	{r7, lr}
     e72:	b082      	sub	sp, #8
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     e88:	4618      	mov	r0, r3
     e8a:	4b18      	ldr	r3, [pc, #96]	; (eec <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
     e8c:	4798      	blx	r3
     e8e:	4603      	mov	r3, r0
     e90:	461a      	mov	r2, r3
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
     e9e:	2bda      	cmp	r3, #218	; 0xda
     ea0:	dd04      	ble.n	eac <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	2203      	movs	r2, #3
     ea6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     eaa:	e017      	b.n	edc <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
     eb2:	2b6d      	cmp	r3, #109	; 0x6d
     eb4:	dd04      	ble.n	ec0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	2202      	movs	r2, #2
     eba:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     ebe:	e00d      	b.n	edc <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
     ec6:	2b36      	cmp	r3, #54	; 0x36
     ec8:	dd04      	ble.n	ed4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	2201      	movs	r2, #1
     ece:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     ed2:	e003      	b.n	edc <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	2200      	movs	r2, #0
     ed8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
     ee2:	4618      	mov	r0, r3
     ee4:	3708      	adds	r7, #8
     ee6:	46bd      	mov	sp, r7
     ee8:	bd80      	pop	{r7, pc}
     eea:	bf00      	nop
     eec:	0000e33d 	.word	0x0000e33d

00000ef0 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
     ef0:	b590      	push	{r4, r7, lr}
     ef2:	b083      	sub	sp, #12
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
     ef8:	4c05      	ldr	r4, [pc, #20]	; (f10 <__tcf_0+0x20>)
     efa:	4b06      	ldr	r3, [pc, #24]	; (f14 <__tcf_0+0x24>)
     efc:	429c      	cmp	r4, r3
     efe:	d004      	beq.n	f0a <__tcf_0+0x1a>
     f00:	3c1c      	subs	r4, #28
     f02:	4620      	mov	r0, r4
     f04:	4b04      	ldr	r3, [pc, #16]	; (f18 <__tcf_0+0x28>)
     f06:	4798      	blx	r3
     f08:	e7f7      	b.n	efa <__tcf_0+0xa>
     f0a:	370c      	adds	r7, #12
     f0c:	46bd      	mov	sp, r7
     f0e:	bd90      	pop	{r4, r7, pc}
     f10:	20000b8c 	.word	0x20000b8c
     f14:	20000aac 	.word	0x20000aac
     f18:	0000e275 	.word	0x0000e275

00000f1c <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
     f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f20:	b082      	sub	sp, #8
     f22:	af00      	add	r7, sp, #0
     f24:	6078      	str	r0, [r7, #4]
     f26:	6039      	str	r1, [r7, #0]
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	2b01      	cmp	r3, #1
     f2c:	d177      	bne.n	101e <_Z41__static_initialization_and_destruction_0ii+0x102>
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f34:	4293      	cmp	r3, r2
     f36:	d172      	bne.n	101e <_Z41__static_initialization_and_destruction_0ii+0x102>
     f38:	493b      	ldr	r1, [pc, #236]	; (1028 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     f3a:	483c      	ldr	r0, [pc, #240]	; (102c <_Z41__static_initialization_and_destruction_0ii+0x110>)
     f3c:	4b3c      	ldr	r3, [pc, #240]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     f3e:	4798      	blx	r3
     f40:	4a3c      	ldr	r2, [pc, #240]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f42:	493d      	ldr	r1, [pc, #244]	; (1038 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     f44:	4839      	ldr	r0, [pc, #228]	; (102c <_Z41__static_initialization_and_destruction_0ii+0x110>)
     f46:	4b3d      	ldr	r3, [pc, #244]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f48:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     f4a:	493d      	ldr	r1, [pc, #244]	; (1040 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     f4c:	483d      	ldr	r0, [pc, #244]	; (1044 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     f4e:	4b3e      	ldr	r3, [pc, #248]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f50:	4798      	blx	r3
     f52:	4a38      	ldr	r2, [pc, #224]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f54:	493d      	ldr	r1, [pc, #244]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f56:	483b      	ldr	r0, [pc, #236]	; (1044 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     f58:	4b38      	ldr	r3, [pc, #224]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f5a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     f5c:	493c      	ldr	r1, [pc, #240]	; (1050 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     f5e:	483d      	ldr	r0, [pc, #244]	; (1054 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     f60:	4b39      	ldr	r3, [pc, #228]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f62:	4798      	blx	r3
     f64:	4a33      	ldr	r2, [pc, #204]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f66:	4939      	ldr	r1, [pc, #228]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f68:	483a      	ldr	r0, [pc, #232]	; (1054 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     f6a:	4b34      	ldr	r3, [pc, #208]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f6c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     f6e:	493a      	ldr	r1, [pc, #232]	; (1058 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     f70:	483a      	ldr	r0, [pc, #232]	; (105c <_Z41__static_initialization_and_destruction_0ii+0x140>)
     f72:	4b35      	ldr	r3, [pc, #212]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f74:	4798      	blx	r3
     f76:	4a2f      	ldr	r2, [pc, #188]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f78:	4934      	ldr	r1, [pc, #208]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f7a:	4838      	ldr	r0, [pc, #224]	; (105c <_Z41__static_initialization_and_destruction_0ii+0x140>)
     f7c:	4b2f      	ldr	r3, [pc, #188]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f7e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     f80:	4937      	ldr	r1, [pc, #220]	; (1060 <_Z41__static_initialization_and_destruction_0ii+0x144>)
     f82:	4838      	ldr	r0, [pc, #224]	; (1064 <_Z41__static_initialization_and_destruction_0ii+0x148>)
     f84:	4b30      	ldr	r3, [pc, #192]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f86:	4798      	blx	r3
     f88:	4a2a      	ldr	r2, [pc, #168]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f8a:	4930      	ldr	r1, [pc, #192]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f8c:	4835      	ldr	r0, [pc, #212]	; (1064 <_Z41__static_initialization_and_destruction_0ii+0x148>)
     f8e:	4b2b      	ldr	r3, [pc, #172]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     f90:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     f92:	4935      	ldr	r1, [pc, #212]	; (1068 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
     f94:	4835      	ldr	r0, [pc, #212]	; (106c <_Z41__static_initialization_and_destruction_0ii+0x150>)
     f96:	4b2c      	ldr	r3, [pc, #176]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     f98:	4798      	blx	r3
     f9a:	4a26      	ldr	r2, [pc, #152]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     f9c:	492b      	ldr	r1, [pc, #172]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     f9e:	4833      	ldr	r0, [pc, #204]	; (106c <_Z41__static_initialization_and_destruction_0ii+0x150>)
     fa0:	4b26      	ldr	r3, [pc, #152]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     fa2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     fa4:	4932      	ldr	r1, [pc, #200]	; (1070 <_Z41__static_initialization_and_destruction_0ii+0x154>)
     fa6:	4833      	ldr	r0, [pc, #204]	; (1074 <_Z41__static_initialization_and_destruction_0ii+0x158>)
     fa8:	4b27      	ldr	r3, [pc, #156]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     faa:	4798      	blx	r3
     fac:	4a21      	ldr	r2, [pc, #132]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     fae:	4927      	ldr	r1, [pc, #156]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     fb0:	4830      	ldr	r0, [pc, #192]	; (1074 <_Z41__static_initialization_and_destruction_0ii+0x158>)
     fb2:	4b22      	ldr	r3, [pc, #136]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     fb4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     fb6:	4930      	ldr	r1, [pc, #192]	; (1078 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
     fb8:	4830      	ldr	r0, [pc, #192]	; (107c <_Z41__static_initialization_and_destruction_0ii+0x160>)
     fba:	4b23      	ldr	r3, [pc, #140]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     fbc:	4798      	blx	r3
     fbe:	4a1d      	ldr	r2, [pc, #116]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     fc0:	4922      	ldr	r1, [pc, #136]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     fc2:	482e      	ldr	r0, [pc, #184]	; (107c <_Z41__static_initialization_and_destruction_0ii+0x160>)
     fc4:	4b1d      	ldr	r3, [pc, #116]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     fc6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     fc8:	492d      	ldr	r1, [pc, #180]	; (1080 <_Z41__static_initialization_and_destruction_0ii+0x164>)
     fca:	482e      	ldr	r0, [pc, #184]	; (1084 <_Z41__static_initialization_and_destruction_0ii+0x168>)
     fcc:	4b1e      	ldr	r3, [pc, #120]	; (1048 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     fce:	4798      	blx	r3
     fd0:	4a18      	ldr	r2, [pc, #96]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     fd2:	491e      	ldr	r1, [pc, #120]	; (104c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     fd4:	482b      	ldr	r0, [pc, #172]	; (1084 <_Z41__static_initialization_and_destruction_0ii+0x168>)
     fd6:	4b19      	ldr	r3, [pc, #100]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     fd8:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
     fda:	492b      	ldr	r1, [pc, #172]	; (1088 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
     fdc:	482b      	ldr	r0, [pc, #172]	; (108c <_Z41__static_initialization_and_destruction_0ii+0x170>)
     fde:	4b14      	ldr	r3, [pc, #80]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     fe0:	4798      	blx	r3
     fe2:	4a14      	ldr	r2, [pc, #80]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     fe4:	4914      	ldr	r1, [pc, #80]	; (1038 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     fe6:	4829      	ldr	r0, [pc, #164]	; (108c <_Z41__static_initialization_and_destruction_0ii+0x170>)
     fe8:	4b14      	ldr	r3, [pc, #80]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     fea:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
     fec:	4b28      	ldr	r3, [pc, #160]	; (1090 <_Z41__static_initialization_and_destruction_0ii+0x174>)
     fee:	2401      	movs	r4, #1
     ff0:	461e      	mov	r6, r3
     ff2:	2c00      	cmp	r4, #0
     ff4:	db0e      	blt.n	1014 <_Z41__static_initialization_and_destruction_0ii+0xf8>
     ff6:	4633      	mov	r3, r6
     ff8:	2503      	movs	r5, #3
     ffa:	4698      	mov	r8, r3
     ffc:	2d00      	cmp	r5, #0
     ffe:	db06      	blt.n	100e <_Z41__static_initialization_and_destruction_0ii+0xf2>
    1000:	4640      	mov	r0, r8
    1002:	4b24      	ldr	r3, [pc, #144]	; (1094 <_Z41__static_initialization_and_destruction_0ii+0x178>)
    1004:	4798      	blx	r3
    1006:	f108 081c 	add.w	r8, r8, #28
    100a:	3d01      	subs	r5, #1
    100c:	e7f6      	b.n	ffc <_Z41__static_initialization_and_destruction_0ii+0xe0>
    100e:	3670      	adds	r6, #112	; 0x70
    1010:	3c01      	subs	r4, #1
    1012:	e7ee      	b.n	ff2 <_Z41__static_initialization_and_destruction_0ii+0xd6>
    1014:	4a07      	ldr	r2, [pc, #28]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1016:	4920      	ldr	r1, [pc, #128]	; (1098 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
    1018:	2000      	movs	r0, #0
    101a:	4b08      	ldr	r3, [pc, #32]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x120>)
    101c:	4798      	blx	r3
}
    101e:	bf00      	nop
    1020:	3708      	adds	r7, #8
    1022:	46bd      	mov	sp, r7
    1024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1028:	2000ab70 	.word	0x2000ab70
    102c:	20000978 	.word	0x20000978
    1030:	0000dec9 	.word	0x0000dec9
    1034:	20000000 	.word	0x20000000
    1038:	0000dee5 	.word	0x0000dee5
    103c:	00010a0d 	.word	0x00010a0d
    1040:	2000aa40 	.word	0x2000aa40
    1044:	20000990 	.word	0x20000990
    1048:	0000e639 	.word	0x0000e639
    104c:	0000e671 	.word	0x0000e671
    1050:	2000aad4 	.word	0x2000aad4
    1054:	200009b0 	.word	0x200009b0
    1058:	2000abf8 	.word	0x2000abf8
    105c:	200009d0 	.word	0x200009d0
    1060:	2000aaf4 	.word	0x2000aaf4
    1064:	200009f0 	.word	0x200009f0
    1068:	2000abb8 	.word	0x2000abb8
    106c:	20000a10 	.word	0x20000a10
    1070:	2000abd8 	.word	0x2000abd8
    1074:	20000a30 	.word	0x20000a30
    1078:	2000aab0 	.word	0x2000aab0
    107c:	20000a50 	.word	0x20000a50
    1080:	2000ab50 	.word	0x2000ab50
    1084:	20000a70 	.word	0x20000a70
    1088:	2000ab14 	.word	0x2000ab14
    108c:	20000a94 	.word	0x20000a94
    1090:	20000aac 	.word	0x20000aac
    1094:	0000e261 	.word	0x0000e261
    1098:	00000ef1 	.word	0x00000ef1

0000109c <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
    109c:	b580      	push	{r7, lr}
    109e:	af00      	add	r7, sp, #0
    10a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    10a4:	2001      	movs	r0, #1
    10a6:	4b01      	ldr	r3, [pc, #4]	; (10ac <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
    10a8:	4798      	blx	r3
    10aa:	bd80      	pop	{r7, pc}
    10ac:	00000f1d 	.word	0x00000f1d

000010b0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    10b0:	b480      	push	{r7}
    10b2:	b085      	sub	sp, #20
    10b4:	af00      	add	r7, sp, #0
    10b6:	60f8      	str	r0, [r7, #12]
    10b8:	460b      	mov	r3, r1
    10ba:	607a      	str	r2, [r7, #4]
    10bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    10be:	7afb      	ldrb	r3, [r7, #11]
    10c0:	68fa      	ldr	r2, [r7, #12]
    10c2:	01db      	lsls	r3, r3, #7
    10c4:	4413      	add	r3, r2
    10c6:	3318      	adds	r3, #24
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	601a      	str	r2, [r3, #0]
}
    10cc:	bf00      	nop
    10ce:	3714      	adds	r7, #20
    10d0:	46bd      	mov	sp, r7
    10d2:	bc80      	pop	{r7}
    10d4:	4770      	bx	lr

000010d6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    10d6:	b480      	push	{r7}
    10d8:	b085      	sub	sp, #20
    10da:	af00      	add	r7, sp, #0
    10dc:	60f8      	str	r0, [r7, #12]
    10de:	460b      	mov	r3, r1
    10e0:	607a      	str	r2, [r7, #4]
    10e2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10e4:	7afb      	ldrb	r3, [r7, #11]
    10e6:	68fa      	ldr	r2, [r7, #12]
    10e8:	01db      	lsls	r3, r3, #7
    10ea:	4413      	add	r3, r2
    10ec:	3314      	adds	r3, #20
    10ee:	687a      	ldr	r2, [r7, #4]
    10f0:	601a      	str	r2, [r3, #0]
}
    10f2:	bf00      	nop
    10f4:	3714      	adds	r7, #20
    10f6:	46bd      	mov	sp, r7
    10f8:	bc80      	pop	{r7}
    10fa:	4770      	bx	lr

000010fc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    10fc:	b580      	push	{r7, lr}
    10fe:	b082      	sub	sp, #8
    1100:	af00      	add	r7, sp, #0
    1102:	4603      	mov	r3, r0
    1104:	6039      	str	r1, [r7, #0]
    1106:	71fb      	strb	r3, [r7, #7]
    1108:	4613      	mov	r3, r2
    110a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    110c:	79bb      	ldrb	r3, [r7, #6]
    110e:	2b00      	cmp	r3, #0
    1110:	d006      	beq.n	1120 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1112:	79fb      	ldrb	r3, [r7, #7]
    1114:	683a      	ldr	r2, [r7, #0]
    1116:	4619      	mov	r1, r3
    1118:	4806      	ldr	r0, [pc, #24]	; (1134 <_gpio_set_level+0x38>)
    111a:	4b07      	ldr	r3, [pc, #28]	; (1138 <_gpio_set_level+0x3c>)
    111c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    111e:	e005      	b.n	112c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1120:	79fb      	ldrb	r3, [r7, #7]
    1122:	683a      	ldr	r2, [r7, #0]
    1124:	4619      	mov	r1, r3
    1126:	4803      	ldr	r0, [pc, #12]	; (1134 <_gpio_set_level+0x38>)
    1128:	4b04      	ldr	r3, [pc, #16]	; (113c <_gpio_set_level+0x40>)
    112a:	4798      	blx	r3
}
    112c:	bf00      	nop
    112e:	3708      	adds	r7, #8
    1130:	46bd      	mov	sp, r7
    1132:	bd80      	pop	{r7, pc}
    1134:	41008000 	.word	0x41008000
    1138:	000010b1 	.word	0x000010b1
    113c:	000010d7 	.word	0x000010d7

00001140 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1140:	b580      	push	{r7, lr}
    1142:	b082      	sub	sp, #8
    1144:	af00      	add	r7, sp, #0
    1146:	4603      	mov	r3, r0
    1148:	460a      	mov	r2, r1
    114a:	71fb      	strb	r3, [r7, #7]
    114c:	4613      	mov	r3, r2
    114e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1150:	79fb      	ldrb	r3, [r7, #7]
    1152:	115b      	asrs	r3, r3, #5
    1154:	b2d8      	uxtb	r0, r3
    1156:	79fb      	ldrb	r3, [r7, #7]
    1158:	f003 031f 	and.w	r3, r3, #31
    115c:	2201      	movs	r2, #1
    115e:	fa02 f303 	lsl.w	r3, r2, r3
    1162:	79ba      	ldrb	r2, [r7, #6]
    1164:	4619      	mov	r1, r3
    1166:	4b03      	ldr	r3, [pc, #12]	; (1174 <gpio_set_pin_level+0x34>)
    1168:	4798      	blx	r3
}
    116a:	bf00      	nop
    116c:	3708      	adds	r7, #8
    116e:	46bd      	mov	sp, r7
    1170:	bd80      	pop	{r7, pc}
    1172:	bf00      	nop
    1174:	000010fd 	.word	0x000010fd

00001178 <_ZL13FirmwareAlivePK10timer_task>:
//static EvaporatorAndCondesatorFans_Class fans;
//static SingleFlapperValve_Class fv(0);


static void FirmwareAlive(const struct timer_task *const timer_task)
{
    1178:	b580      	push	{r7, lr}
    117a:	b082      	sub	sp, #8
    117c:	af00      	add	r7, sp, #0
    117e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(iAlcFwIsAlive,true);
    1180:	2101      	movs	r1, #1
    1182:	2007      	movs	r0, #7
    1184:	4b02      	ldr	r3, [pc, #8]	; (1190 <_ZL13FirmwareAlivePK10timer_task+0x18>)
    1186:	4798      	blx	r3
}
    1188:	bf00      	nop
    118a:	3708      	adds	r7, #8
    118c:	46bd      	mov	sp, r7
    118e:	bd80      	pop	{r7, pc}
    1190:	00001141 	.word	0x00001141

00001194 <main>:


int main(void)
{
    1194:	b580      	push	{r7, lr}
    1196:	af00      	add	r7, sp, #0
	atmel_start_init();
    1198:	4b33      	ldr	r3, [pc, #204]	; (1268 <main+0xd4>)
    119a:	4798      	blx	r3
	uint8_t position;

	usb.Init();
    119c:	4833      	ldr	r0, [pc, #204]	; (126c <main+0xd8>)
    119e:	4b34      	ldr	r3, [pc, #208]	; (1270 <main+0xdc>)
    11a0:	4798      	blx	r3
	delay_ms(100);
    11a2:	2064      	movs	r0, #100	; 0x64
    11a4:	4b33      	ldr	r3, [pc, #204]	; (1274 <main+0xe0>)
    11a6:	4798      	blx	r3
	//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	pwm_enable(&LIVE_PULSE);
    11a8:	4833      	ldr	r0, [pc, #204]	; (1278 <main+0xe4>)
    11aa:	4b34      	ldr	r3, [pc, #208]	; (127c <main+0xe8>)
    11ac:	4798      	blx	r3
	delay_ms(200);
    11ae:	20c8      	movs	r0, #200	; 0xc8
    11b0:	4b30      	ldr	r3, [pc, #192]	; (1274 <main+0xe0>)
    11b2:	4798      	blx	r3
	memory.Init();
    11b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    11b8:	4831      	ldr	r0, [pc, #196]	; (1280 <main+0xec>)
    11ba:	4b32      	ldr	r3, [pc, #200]	; (1284 <main+0xf0>)
    11bc:	4798      	blx	r3
	memory.WriteDefaultParameters();
    11be:	4830      	ldr	r0, [pc, #192]	; (1280 <main+0xec>)
    11c0:	4b31      	ldr	r3, [pc, #196]	; (1288 <main+0xf4>)
    11c2:	4798      	blx	r3
	fvc.InitController(0);
    11c4:	2100      	movs	r1, #0
    11c6:	4831      	ldr	r0, [pc, #196]	; (128c <main+0xf8>)
    11c8:	4b31      	ldr	r3, [pc, #196]	; (1290 <main+0xfc>)
    11ca:	4798      	blx	r3

	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
    11cc:	22fa      	movs	r2, #250	; 0xfa
    11ce:	4931      	ldr	r1, [pc, #196]	; (1294 <main+0x100>)
    11d0:	4831      	ldr	r0, [pc, #196]	; (1298 <main+0x104>)
    11d2:	4b32      	ldr	r3, [pc, #200]	; (129c <main+0x108>)
    11d4:	4798      	blx	r3
// 				fvc.Control_NBC_StandAlone_Reset();
// 				}
// 				delay_ms(100);
// 				fvc.StopControlling();
// 			}
fvc.singlefv->SetDirection(dir);
    11d6:	4b2d      	ldr	r3, [pc, #180]	; (128c <main+0xf8>)
    11d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    11dc:	4b30      	ldr	r3, [pc, #192]	; (12a0 <main+0x10c>)
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	4619      	mov	r1, r3
    11e2:	4610      	mov	r0, r2
    11e4:	4b2f      	ldr	r3, [pc, #188]	; (12a4 <main+0x110>)
    11e6:	4798      	blx	r3
fvc.singlefv->SetEnable(true);
    11e8:	4b28      	ldr	r3, [pc, #160]	; (128c <main+0xf8>)
    11ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    11ee:	2101      	movs	r1, #1
    11f0:	4618      	mov	r0, r3
    11f2:	4b2d      	ldr	r3, [pc, #180]	; (12a8 <main+0x114>)
    11f4:	4798      	blx	r3
while(counter<0x8fff){
    11f6:	4b2d      	ldr	r3, [pc, #180]	; (12ac <main+0x118>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	f648 72fe 	movw	r2, #36862	; 0x8ffe
    11fe:	4293      	cmp	r3, r2
    1200:	d80b      	bhi.n	121a <main+0x86>
	fvc.singlefv->ReadActualPosition();
    1202:	4b22      	ldr	r3, [pc, #136]	; (128c <main+0xf8>)
    1204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1208:	4618      	mov	r0, r3
    120a:	4b29      	ldr	r3, [pc, #164]	; (12b0 <main+0x11c>)
    120c:	4798      	blx	r3
	counter++;
    120e:	4b27      	ldr	r3, [pc, #156]	; (12ac <main+0x118>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	3301      	adds	r3, #1
    1214:	4a25      	ldr	r2, [pc, #148]	; (12ac <main+0x118>)
    1216:	6013      	str	r3, [r2, #0]
while(counter<0x8fff){
    1218:	e7ed      	b.n	11f6 <main+0x62>
}
counter=0;
    121a:	4b24      	ldr	r3, [pc, #144]	; (12ac <main+0x118>)
    121c:	2200      	movs	r2, #0
    121e:	601a      	str	r2, [r3, #0]
fvc.singlefv->SetEnable(false);
    1220:	4b1a      	ldr	r3, [pc, #104]	; (128c <main+0xf8>)
    1222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1226:	2100      	movs	r1, #0
    1228:	4618      	mov	r0, r3
    122a:	4b1f      	ldr	r3, [pc, #124]	; (12a8 <main+0x114>)
    122c:	4798      	blx	r3
while(counter<0x4ff){
    122e:	4b1f      	ldr	r3, [pc, #124]	; (12ac <main+0x118>)
    1230:	681b      	ldr	r3, [r3, #0]
    1232:	f240 42fe 	movw	r2, #1278	; 0x4fe
    1236:	4293      	cmp	r3, r2
    1238:	d80b      	bhi.n	1252 <main+0xbe>
	fvc.singlefv->ReadActualPosition();
    123a:	4b14      	ldr	r3, [pc, #80]	; (128c <main+0xf8>)
    123c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1240:	4618      	mov	r0, r3
    1242:	4b1b      	ldr	r3, [pc, #108]	; (12b0 <main+0x11c>)
    1244:	4798      	blx	r3
	counter++;
    1246:	4b19      	ldr	r3, [pc, #100]	; (12ac <main+0x118>)
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	3301      	adds	r3, #1
    124c:	4a17      	ldr	r2, [pc, #92]	; (12ac <main+0x118>)
    124e:	6013      	str	r3, [r2, #0]
while(counter<0x4ff){
    1250:	e7ed      	b.n	122e <main+0x9a>
}
counter=0;
    1252:	4b16      	ldr	r3, [pc, #88]	; (12ac <main+0x118>)
    1254:	2200      	movs	r2, #0
    1256:	601a      	str	r2, [r3, #0]
dir=!dir;
    1258:	4b11      	ldr	r3, [pc, #68]	; (12a0 <main+0x10c>)
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	f083 0301 	eor.w	r3, r3, #1
    1260:	b2da      	uxtb	r2, r3
    1262:	4b0f      	ldr	r3, [pc, #60]	; (12a0 <main+0x10c>)
    1264:	701a      	strb	r2, [r3, #0]
fvc.singlefv->SetDirection(dir);
    1266:	e7b6      	b.n	11d6 <main+0x42>
    1268:	000013ed 	.word	0x000013ed
    126c:	20001880 	.word	0x20001880
    1270:	0000ed6d 	.word	0x0000ed6d
    1274:	00002e6d 	.word	0x00002e6d
    1278:	2000ab34 	.word	0x2000ab34
    127c:	000032dd 	.word	0x000032dd
    1280:	20002ae8 	.word	0x20002ae8
    1284:	0000f6cd 	.word	0x0000f6cd
    1288:	0000f615 	.word	0x0000f615
    128c:	2000089c 	.word	0x2000089c
    1290:	00000461 	.word	0x00000461
    1294:	00001179 	.word	0x00001179
    1298:	20000bcc 	.word	0x20000bcc
    129c:	0000e815 	.word	0x0000e815
    12a0:	20000ca4 	.word	0x20000ca4
    12a4:	00000cd1 	.word	0x00000cd1
    12a8:	00000c51 	.word	0x00000c51
    12ac:	20000ca8 	.word	0x20000ca8
    12b0:	00000e71 	.word	0x00000e71

000012b4 <_Z41__static_initialization_and_destruction_0ii>:
// 		delay_ms(500);

		

	}
}
    12b4:	b580      	push	{r7, lr}
    12b6:	b082      	sub	sp, #8
    12b8:	af00      	add	r7, sp, #0
    12ba:	6078      	str	r0, [r7, #4]
    12bc:	6039      	str	r1, [r7, #0]
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	2b01      	cmp	r3, #1
    12c2:	d155      	bne.n	1370 <_Z41__static_initialization_and_destruction_0ii+0xbc>
    12c4:	683b      	ldr	r3, [r7, #0]
    12c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ca:	4293      	cmp	r3, r2
    12cc:	d150      	bne.n	1370 <_Z41__static_initialization_and_destruction_0ii+0xbc>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    12ce:	492a      	ldr	r1, [pc, #168]	; (1378 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    12d0:	482a      	ldr	r0, [pc, #168]	; (137c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    12d2:	4b2b      	ldr	r3, [pc, #172]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12d4:	4798      	blx	r3
    12d6:	4a2b      	ldr	r2, [pc, #172]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12d8:	492b      	ldr	r1, [pc, #172]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12da:	4828      	ldr	r0, [pc, #160]	; (137c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    12dc:	4b2b      	ldr	r3, [pc, #172]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12de:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    12e0:	492b      	ldr	r1, [pc, #172]	; (1390 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    12e2:	482c      	ldr	r0, [pc, #176]	; (1394 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    12e4:	4b26      	ldr	r3, [pc, #152]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12e6:	4798      	blx	r3
    12e8:	4a26      	ldr	r2, [pc, #152]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12ea:	4927      	ldr	r1, [pc, #156]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12ec:	4829      	ldr	r0, [pc, #164]	; (1394 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    12ee:	4b27      	ldr	r3, [pc, #156]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    12f0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    12f2:	4929      	ldr	r1, [pc, #164]	; (1398 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    12f4:	4829      	ldr	r0, [pc, #164]	; (139c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    12f6:	4b22      	ldr	r3, [pc, #136]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    12f8:	4798      	blx	r3
    12fa:	4a22      	ldr	r2, [pc, #136]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    12fc:	4922      	ldr	r1, [pc, #136]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    12fe:	4827      	ldr	r0, [pc, #156]	; (139c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    1300:	4b22      	ldr	r3, [pc, #136]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1302:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1304:	4926      	ldr	r1, [pc, #152]	; (13a0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    1306:	4827      	ldr	r0, [pc, #156]	; (13a4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    1308:	4b1d      	ldr	r3, [pc, #116]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    130a:	4798      	blx	r3
    130c:	4a1d      	ldr	r2, [pc, #116]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    130e:	491e      	ldr	r1, [pc, #120]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1310:	4824      	ldr	r0, [pc, #144]	; (13a4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    1312:	4b1e      	ldr	r3, [pc, #120]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1314:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    1316:	4924      	ldr	r1, [pc, #144]	; (13a8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    1318:	4824      	ldr	r0, [pc, #144]	; (13ac <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    131a:	4b19      	ldr	r3, [pc, #100]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    131c:	4798      	blx	r3
    131e:	4a19      	ldr	r2, [pc, #100]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1320:	4919      	ldr	r1, [pc, #100]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1322:	4822      	ldr	r0, [pc, #136]	; (13ac <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    1324:	4b19      	ldr	r3, [pc, #100]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1326:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    1328:	4921      	ldr	r1, [pc, #132]	; (13b0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    132a:	4822      	ldr	r0, [pc, #136]	; (13b4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    132c:	4b14      	ldr	r3, [pc, #80]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    132e:	4798      	blx	r3
    1330:	4a14      	ldr	r2, [pc, #80]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1332:	4915      	ldr	r1, [pc, #84]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1334:	481f      	ldr	r0, [pc, #124]	; (13b4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1336:	4b15      	ldr	r3, [pc, #84]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1338:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    133a:	491f      	ldr	r1, [pc, #124]	; (13b8 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    133c:	481f      	ldr	r0, [pc, #124]	; (13bc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    133e:	4b10      	ldr	r3, [pc, #64]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1340:	4798      	blx	r3
    1342:	4a10      	ldr	r2, [pc, #64]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1344:	4910      	ldr	r1, [pc, #64]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1346:	481d      	ldr	r0, [pc, #116]	; (13bc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    1348:	4b10      	ldr	r3, [pc, #64]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    134a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    134c:	491c      	ldr	r1, [pc, #112]	; (13c0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    134e:	481d      	ldr	r0, [pc, #116]	; (13c4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    1350:	4b0b      	ldr	r3, [pc, #44]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1352:	4798      	blx	r3
    1354:	4a0b      	ldr	r2, [pc, #44]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1356:	490c      	ldr	r1, [pc, #48]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1358:	481a      	ldr	r0, [pc, #104]	; (13c4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    135a:	4b0c      	ldr	r3, [pc, #48]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    135c:	4798      	blx	r3
    135e:	491a      	ldr	r1, [pc, #104]	; (13c8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1360:	481a      	ldr	r0, [pc, #104]	; (13cc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1362:	4b1b      	ldr	r3, [pc, #108]	; (13d0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    1364:	4798      	blx	r3
    1366:	4a07      	ldr	r2, [pc, #28]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1368:	491a      	ldr	r1, [pc, #104]	; (13d4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    136a:	4818      	ldr	r0, [pc, #96]	; (13cc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    136c:	4b07      	ldr	r3, [pc, #28]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    136e:	4798      	blx	r3
    1370:	bf00      	nop
    1372:	3708      	adds	r7, #8
    1374:	46bd      	mov	sp, r7
    1376:	bd80      	pop	{r7, pc}
    1378:	2000aa40 	.word	0x2000aa40
    137c:	20000b8c 	.word	0x20000b8c
    1380:	0000e639 	.word	0x0000e639
    1384:	20000000 	.word	0x20000000
    1388:	0000e671 	.word	0x0000e671
    138c:	00010a0d 	.word	0x00010a0d
    1390:	2000aad4 	.word	0x2000aad4
    1394:	20000bac 	.word	0x20000bac
    1398:	2000abf8 	.word	0x2000abf8
    139c:	20000bcc 	.word	0x20000bcc
    13a0:	2000aaf4 	.word	0x2000aaf4
    13a4:	20000bec 	.word	0x20000bec
    13a8:	2000abb8 	.word	0x2000abb8
    13ac:	20000c0c 	.word	0x20000c0c
    13b0:	2000abd8 	.word	0x2000abd8
    13b4:	20000c2c 	.word	0x20000c2c
    13b8:	2000aab0 	.word	0x2000aab0
    13bc:	20000c4c 	.word	0x20000c4c
    13c0:	2000ab50 	.word	0x2000ab50
    13c4:	20000c6c 	.word	0x20000c6c
    13c8:	2000ab70 	.word	0x2000ab70
    13cc:	20000c8c 	.word	0x20000c8c
    13d0:	0000dec9 	.word	0x0000dec9
    13d4:	0000dee5 	.word	0x0000dee5

000013d8 <_GLOBAL__sub_I_dir>:
    13d8:	b580      	push	{r7, lr}
    13da:	af00      	add	r7, sp, #0
    13dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    13e0:	2001      	movs	r0, #1
    13e2:	4b01      	ldr	r3, [pc, #4]	; (13e8 <_GLOBAL__sub_I_dir+0x10>)
    13e4:	4798      	blx	r3
    13e6:	bd80      	pop	{r7, pc}
    13e8:	000012b5 	.word	0x000012b5

000013ec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	af00      	add	r7, sp, #0
	system_init();
    13f0:	4b03      	ldr	r3, [pc, #12]	; (1400 <atmel_start_init+0x14>)
    13f2:	4798      	blx	r3
	usb_init();
    13f4:	4b03      	ldr	r3, [pc, #12]	; (1404 <atmel_start_init+0x18>)
    13f6:	4798      	blx	r3
	spi_nor_flash_init();
    13f8:	4b03      	ldr	r3, [pc, #12]	; (1408 <atmel_start_init+0x1c>)
    13fa:	4798      	blx	r3
}
    13fc:	bf00      	nop
    13fe:	bd80      	pop	{r7, pc}
    1400:	000027ed 	.word	0x000027ed
    1404:	0000c041 	.word	0x0000c041
    1408:	0000bfd5 	.word	0x0000bfd5

0000140c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    140c:	b480      	push	{r7}
    140e:	b085      	sub	sp, #20
    1410:	af00      	add	r7, sp, #0
    1412:	60f8      	str	r0, [r7, #12]
    1414:	460b      	mov	r3, r1
    1416:	607a      	str	r2, [r7, #4]
    1418:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    141a:	7afa      	ldrb	r2, [r7, #11]
    141c:	68fb      	ldr	r3, [r7, #12]
    141e:	3220      	adds	r2, #32
    1420:	6879      	ldr	r1, [r7, #4]
    1422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1426:	bf00      	nop
    1428:	3714      	adds	r7, #20
    142a:	46bd      	mov	sp, r7
    142c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1430:	4770      	bx	lr

00001432 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    1432:	b480      	push	{r7}
    1434:	b083      	sub	sp, #12
    1436:	af00      	add	r7, sp, #0
    1438:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	691b      	ldr	r3, [r3, #16]
    143e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1446:	bf00      	nop
    1448:	370c      	adds	r7, #12
    144a:	46bd      	mov	sp, r7
    144c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1450:	4770      	bx	lr

00001452 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    1452:	b480      	push	{r7}
    1454:	b083      	sub	sp, #12
    1456:	af00      	add	r7, sp, #0
    1458:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	691b      	ldr	r3, [r3, #16]
    145e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1466:	bf00      	nop
    1468:	370c      	adds	r7, #12
    146a:	46bd      	mov	sp, r7
    146c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1470:	4770      	bx	lr

00001472 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    1472:	b480      	push	{r7}
    1474:	b083      	sub	sp, #12
    1476:	af00      	add	r7, sp, #0
    1478:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	691b      	ldr	r3, [r3, #16]
    147e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1486:	bf00      	nop
    1488:	370c      	adds	r7, #12
    148a:	46bd      	mov	sp, r7
    148c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1490:	4770      	bx	lr

00001492 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    1492:	b480      	push	{r7}
    1494:	b083      	sub	sp, #12
    1496:	af00      	add	r7, sp, #0
    1498:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	691b      	ldr	r3, [r3, #16]
    149e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14a6:	bf00      	nop
    14a8:	370c      	adds	r7, #12
    14aa:	46bd      	mov	sp, r7
    14ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b0:	4770      	bx	lr

000014b2 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    14b2:	b480      	push	{r7}
    14b4:	b083      	sub	sp, #12
    14b6:	af00      	add	r7, sp, #0
    14b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	695b      	ldr	r3, [r3, #20]
    14be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14c6:	bf00      	nop
    14c8:	370c      	adds	r7, #12
    14ca:	46bd      	mov	sp, r7
    14cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d0:	4770      	bx	lr

000014d2 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    14d2:	b480      	push	{r7}
    14d4:	b083      	sub	sp, #12
    14d6:	af00      	add	r7, sp, #0
    14d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	695b      	ldr	r3, [r3, #20]
    14de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14e6:	bf00      	nop
    14e8:	370c      	adds	r7, #12
    14ea:	46bd      	mov	sp, r7
    14ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f0:	4770      	bx	lr

000014f2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    14f2:	b480      	push	{r7}
    14f4:	b083      	sub	sp, #12
    14f6:	af00      	add	r7, sp, #0
    14f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	695b      	ldr	r3, [r3, #20]
    14fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1506:	bf00      	nop
    1508:	370c      	adds	r7, #12
    150a:	46bd      	mov	sp, r7
    150c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1510:	4770      	bx	lr

00001512 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    1512:	b480      	push	{r7}
    1514:	b083      	sub	sp, #12
    1516:	af00      	add	r7, sp, #0
    1518:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	695b      	ldr	r3, [r3, #20]
    151e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1526:	bf00      	nop
    1528:	370c      	adds	r7, #12
    152a:	46bd      	mov	sp, r7
    152c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1530:	4770      	bx	lr

00001532 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    1532:	b480      	push	{r7}
    1534:	b083      	sub	sp, #12
    1536:	af00      	add	r7, sp, #0
    1538:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	699b      	ldr	r3, [r3, #24]
    153e:	f043 0201 	orr.w	r2, r3, #1
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1546:	bf00      	nop
    1548:	370c      	adds	r7, #12
    154a:	46bd      	mov	sp, r7
    154c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1550:	4770      	bx	lr

00001552 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    1552:	b480      	push	{r7}
    1554:	b083      	sub	sp, #12
    1556:	af00      	add	r7, sp, #0
    1558:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	699b      	ldr	r3, [r3, #24]
    155e:	f043 0202 	orr.w	r2, r3, #2
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1566:	bf00      	nop
    1568:	370c      	adds	r7, #12
    156a:	46bd      	mov	sp, r7
    156c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1570:	4770      	bx	lr

00001572 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    1572:	b480      	push	{r7}
    1574:	b083      	sub	sp, #12
    1576:	af00      	add	r7, sp, #0
    1578:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	699b      	ldr	r3, [r3, #24]
    157e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1586:	bf00      	nop
    1588:	370c      	adds	r7, #12
    158a:	46bd      	mov	sp, r7
    158c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1590:	4770      	bx	lr

00001592 <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
    1592:	b480      	push	{r7}
    1594:	b083      	sub	sp, #12
    1596:	af00      	add	r7, sp, #0
    1598:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	699b      	ldr	r3, [r3, #24]
    159e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15a6:	bf00      	nop
    15a8:	370c      	adds	r7, #12
    15aa:	46bd      	mov	sp, r7
    15ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    15b0:	4770      	bx	lr

000015b2 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    15b2:	b480      	push	{r7}
    15b4:	b083      	sub	sp, #12
    15b6:	af00      	add	r7, sp, #0
    15b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	699b      	ldr	r3, [r3, #24]
    15be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15c6:	bf00      	nop
    15c8:	370c      	adds	r7, #12
    15ca:	46bd      	mov	sp, r7
    15cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    15d0:	4770      	bx	lr

000015d2 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    15d2:	b480      	push	{r7}
    15d4:	b083      	sub	sp, #12
    15d6:	af00      	add	r7, sp, #0
    15d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	699b      	ldr	r3, [r3, #24]
    15de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15e6:	bf00      	nop
    15e8:	370c      	adds	r7, #12
    15ea:	46bd      	mov	sp, r7
    15ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f0:	4770      	bx	lr

000015f2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    15f2:	b480      	push	{r7}
    15f4:	b083      	sub	sp, #12
    15f6:	af00      	add	r7, sp, #0
    15f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	699b      	ldr	r3, [r3, #24]
    15fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1606:	bf00      	nop
    1608:	370c      	adds	r7, #12
    160a:	46bd      	mov	sp, r7
    160c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1610:	4770      	bx	lr

00001612 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    1612:	b480      	push	{r7}
    1614:	b083      	sub	sp, #12
    1616:	af00      	add	r7, sp, #0
    1618:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	69db      	ldr	r3, [r3, #28]
    161e:	f043 0208 	orr.w	r2, r3, #8
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1626:	bf00      	nop
    1628:	370c      	adds	r7, #12
    162a:	46bd      	mov	sp, r7
    162c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1630:	4770      	bx	lr

00001632 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1632:	b480      	push	{r7}
    1634:	b083      	sub	sp, #12
    1636:	af00      	add	r7, sp, #0
    1638:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	69db      	ldr	r3, [r3, #28]
    163e:	f043 0220 	orr.w	r2, r3, #32
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1646:	bf00      	nop
    1648:	370c      	adds	r7, #12
    164a:	46bd      	mov	sp, r7
    164c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1650:	4770      	bx	lr

00001652 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1652:	b480      	push	{r7}
    1654:	b083      	sub	sp, #12
    1656:	af00      	add	r7, sp, #0
    1658:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	69db      	ldr	r3, [r3, #28]
    165e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1666:	bf00      	nop
    1668:	370c      	adds	r7, #12
    166a:	46bd      	mov	sp, r7
    166c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1670:	4770      	bx	lr

00001672 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1672:	b480      	push	{r7}
    1674:	b083      	sub	sp, #12
    1676:	af00      	add	r7, sp, #0
    1678:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	69db      	ldr	r3, [r3, #28]
    167e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1686:	bf00      	nop
    1688:	370c      	adds	r7, #12
    168a:	46bd      	mov	sp, r7
    168c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1690:	4770      	bx	lr

00001692 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1692:	b480      	push	{r7}
    1694:	b083      	sub	sp, #12
    1696:	af00      	add	r7, sp, #0
    1698:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	6a1b      	ldr	r3, [r3, #32]
    169e:	f043 0201 	orr.w	r2, r3, #1
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16a6:	bf00      	nop
    16a8:	370c      	adds	r7, #12
    16aa:	46bd      	mov	sp, r7
    16ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b0:	4770      	bx	lr

000016b2 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    16b2:	b480      	push	{r7}
    16b4:	b083      	sub	sp, #12
    16b6:	af00      	add	r7, sp, #0
    16b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	6a1b      	ldr	r3, [r3, #32]
    16be:	f043 0202 	orr.w	r2, r3, #2
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16c6:	bf00      	nop
    16c8:	370c      	adds	r7, #12
    16ca:	46bd      	mov	sp, r7
    16cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    16d0:	4770      	bx	lr

000016d2 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    16d2:	b480      	push	{r7}
    16d4:	b083      	sub	sp, #12
    16d6:	af00      	add	r7, sp, #0
    16d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	6a1b      	ldr	r3, [r3, #32]
    16de:	f043 0204 	orr.w	r2, r3, #4
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    16e6:	bf00      	nop
    16e8:	370c      	adds	r7, #12
    16ea:	46bd      	mov	sp, r7
    16ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    16f0:	4770      	bx	lr

000016f2 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    16f2:	b480      	push	{r7}
    16f4:	b083      	sub	sp, #12
    16f6:	af00      	add	r7, sp, #0
    16f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	6a1b      	ldr	r3, [r3, #32]
    16fe:	f043 0208 	orr.w	r2, r3, #8
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1706:	bf00      	nop
    1708:	370c      	adds	r7, #12
    170a:	46bd      	mov	sp, r7
    170c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1710:	4770      	bx	lr

00001712 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1712:	b480      	push	{r7}
    1714:	b083      	sub	sp, #12
    1716:	af00      	add	r7, sp, #0
    1718:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	6a1b      	ldr	r3, [r3, #32]
    171e:	f043 0220 	orr.w	r2, r3, #32
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1726:	bf00      	nop
    1728:	370c      	adds	r7, #12
    172a:	46bd      	mov	sp, r7
    172c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1730:	4770      	bx	lr

00001732 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1732:	b480      	push	{r7}
    1734:	b083      	sub	sp, #12
    1736:	af00      	add	r7, sp, #0
    1738:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	6a1b      	ldr	r3, [r3, #32]
    173e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1746:	bf00      	nop
    1748:	370c      	adds	r7, #12
    174a:	46bd      	mov	sp, r7
    174c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1750:	4770      	bx	lr

00001752 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1752:	b480      	push	{r7}
    1754:	b085      	sub	sp, #20
    1756:	af00      	add	r7, sp, #0
    1758:	60f8      	str	r0, [r7, #12]
    175a:	460b      	mov	r3, r1
    175c:	607a      	str	r2, [r7, #4]
    175e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1760:	7afb      	ldrb	r3, [r7, #11]
    1762:	68fa      	ldr	r2, [r7, #12]
    1764:	01db      	lsls	r3, r3, #7
    1766:	4413      	add	r3, r2
    1768:	3308      	adds	r3, #8
    176a:	687a      	ldr	r2, [r7, #4]
    176c:	601a      	str	r2, [r3, #0]
}
    176e:	bf00      	nop
    1770:	3714      	adds	r7, #20
    1772:	46bd      	mov	sp, r7
    1774:	f85d 7b04 	ldr.w	r7, [sp], #4
    1778:	4770      	bx	lr

0000177a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    177a:	b480      	push	{r7}
    177c:	b085      	sub	sp, #20
    177e:	af00      	add	r7, sp, #0
    1780:	60f8      	str	r0, [r7, #12]
    1782:	460b      	mov	r3, r1
    1784:	607a      	str	r2, [r7, #4]
    1786:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1788:	7afb      	ldrb	r3, [r7, #11]
    178a:	68fa      	ldr	r2, [r7, #12]
    178c:	01db      	lsls	r3, r3, #7
    178e:	4413      	add	r3, r2
    1790:	3304      	adds	r3, #4
    1792:	687a      	ldr	r2, [r7, #4]
    1794:	601a      	str	r2, [r3, #0]
}
    1796:	bf00      	nop
    1798:	3714      	adds	r7, #20
    179a:	46bd      	mov	sp, r7
    179c:	f85d 7b04 	ldr.w	r7, [sp], #4
    17a0:	4770      	bx	lr

000017a2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    17a2:	b480      	push	{r7}
    17a4:	b085      	sub	sp, #20
    17a6:	af00      	add	r7, sp, #0
    17a8:	60f8      	str	r0, [r7, #12]
    17aa:	460b      	mov	r3, r1
    17ac:	607a      	str	r2, [r7, #4]
    17ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    17b0:	7afb      	ldrb	r3, [r7, #11]
    17b2:	68fa      	ldr	r2, [r7, #12]
    17b4:	01db      	lsls	r3, r3, #7
    17b6:	4413      	add	r3, r2
    17b8:	3318      	adds	r3, #24
    17ba:	687a      	ldr	r2, [r7, #4]
    17bc:	601a      	str	r2, [r3, #0]
}
    17be:	bf00      	nop
    17c0:	3714      	adds	r7, #20
    17c2:	46bd      	mov	sp, r7
    17c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    17c8:	4770      	bx	lr

000017ca <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    17ca:	b480      	push	{r7}
    17cc:	b085      	sub	sp, #20
    17ce:	af00      	add	r7, sp, #0
    17d0:	60f8      	str	r0, [r7, #12]
    17d2:	460b      	mov	r3, r1
    17d4:	607a      	str	r2, [r7, #4]
    17d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    17d8:	7afb      	ldrb	r3, [r7, #11]
    17da:	68fa      	ldr	r2, [r7, #12]
    17dc:	01db      	lsls	r3, r3, #7
    17de:	4413      	add	r3, r2
    17e0:	3314      	adds	r3, #20
    17e2:	687a      	ldr	r2, [r7, #4]
    17e4:	601a      	str	r2, [r3, #0]
}
    17e6:	bf00      	nop
    17e8:	3714      	adds	r7, #20
    17ea:	46bd      	mov	sp, r7
    17ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    17f0:	4770      	bx	lr

000017f2 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    17f2:	b480      	push	{r7}
    17f4:	b085      	sub	sp, #20
    17f6:	af00      	add	r7, sp, #0
    17f8:	6078      	str	r0, [r7, #4]
    17fa:	4608      	mov	r0, r1
    17fc:	4611      	mov	r1, r2
    17fe:	461a      	mov	r2, r3
    1800:	4603      	mov	r3, r0
    1802:	70fb      	strb	r3, [r7, #3]
    1804:	460b      	mov	r3, r1
    1806:	70bb      	strb	r3, [r7, #2]
    1808:	4613      	mov	r3, r2
    180a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    180c:	78fa      	ldrb	r2, [r7, #3]
    180e:	78bb      	ldrb	r3, [r7, #2]
    1810:	6879      	ldr	r1, [r7, #4]
    1812:	01d2      	lsls	r2, r2, #7
    1814:	440a      	add	r2, r1
    1816:	4413      	add	r3, r2
    1818:	3330      	adds	r3, #48	; 0x30
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    181e:	7bfb      	ldrb	r3, [r7, #15]
    1820:	f023 030f 	bic.w	r3, r3, #15
    1824:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1826:	787b      	ldrb	r3, [r7, #1]
    1828:	f003 030f 	and.w	r3, r3, #15
    182c:	b2da      	uxtb	r2, r3
    182e:	7bfb      	ldrb	r3, [r7, #15]
    1830:	4313      	orrs	r3, r2
    1832:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1834:	78fa      	ldrb	r2, [r7, #3]
    1836:	78bb      	ldrb	r3, [r7, #2]
    1838:	6879      	ldr	r1, [r7, #4]
    183a:	01d2      	lsls	r2, r2, #7
    183c:	440a      	add	r2, r1
    183e:	4413      	add	r3, r2
    1840:	3330      	adds	r3, #48	; 0x30
    1842:	7bfa      	ldrb	r2, [r7, #15]
    1844:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1846:	bf00      	nop
    1848:	3714      	adds	r7, #20
    184a:	46bd      	mov	sp, r7
    184c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1850:	4770      	bx	lr

00001852 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1852:	b480      	push	{r7}
    1854:	b085      	sub	sp, #20
    1856:	af00      	add	r7, sp, #0
    1858:	6078      	str	r0, [r7, #4]
    185a:	4608      	mov	r0, r1
    185c:	4611      	mov	r1, r2
    185e:	461a      	mov	r2, r3
    1860:	4603      	mov	r3, r0
    1862:	70fb      	strb	r3, [r7, #3]
    1864:	460b      	mov	r3, r1
    1866:	70bb      	strb	r3, [r7, #2]
    1868:	4613      	mov	r3, r2
    186a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    186c:	78fa      	ldrb	r2, [r7, #3]
    186e:	78bb      	ldrb	r3, [r7, #2]
    1870:	6879      	ldr	r1, [r7, #4]
    1872:	01d2      	lsls	r2, r2, #7
    1874:	440a      	add	r2, r1
    1876:	4413      	add	r3, r2
    1878:	3330      	adds	r3, #48	; 0x30
    187a:	781b      	ldrb	r3, [r3, #0]
    187c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    187e:	7bfb      	ldrb	r3, [r7, #15]
    1880:	f003 030f 	and.w	r3, r3, #15
    1884:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1886:	787b      	ldrb	r3, [r7, #1]
    1888:	011b      	lsls	r3, r3, #4
    188a:	b2da      	uxtb	r2, r3
    188c:	7bfb      	ldrb	r3, [r7, #15]
    188e:	4313      	orrs	r3, r2
    1890:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1892:	78fa      	ldrb	r2, [r7, #3]
    1894:	78bb      	ldrb	r3, [r7, #2]
    1896:	6879      	ldr	r1, [r7, #4]
    1898:	01d2      	lsls	r2, r2, #7
    189a:	440a      	add	r2, r1
    189c:	4413      	add	r3, r2
    189e:	3330      	adds	r3, #48	; 0x30
    18a0:	7bfa      	ldrb	r2, [r7, #15]
    18a2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    18a4:	bf00      	nop
    18a6:	3714      	adds	r7, #20
    18a8:	46bd      	mov	sp, r7
    18aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    18ae:	4770      	bx	lr

000018b0 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    18b0:	b480      	push	{r7}
    18b2:	b085      	sub	sp, #20
    18b4:	af00      	add	r7, sp, #0
    18b6:	6078      	str	r0, [r7, #4]
    18b8:	4608      	mov	r0, r1
    18ba:	4611      	mov	r1, r2
    18bc:	461a      	mov	r2, r3
    18be:	4603      	mov	r3, r0
    18c0:	70fb      	strb	r3, [r7, #3]
    18c2:	460b      	mov	r3, r1
    18c4:	70bb      	strb	r3, [r7, #2]
    18c6:	4613      	mov	r3, r2
    18c8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18ca:	78fa      	ldrb	r2, [r7, #3]
    18cc:	78bb      	ldrb	r3, [r7, #2]
    18ce:	6879      	ldr	r1, [r7, #4]
    18d0:	01d2      	lsls	r2, r2, #7
    18d2:	440a      	add	r2, r1
    18d4:	4413      	add	r3, r2
    18d6:	3340      	adds	r3, #64	; 0x40
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18dc:	7bfb      	ldrb	r3, [r7, #15]
    18de:	f023 0301 	bic.w	r3, r3, #1
    18e2:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18e4:	787a      	ldrb	r2, [r7, #1]
    18e6:	7bfb      	ldrb	r3, [r7, #15]
    18e8:	4313      	orrs	r3, r2
    18ea:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18ec:	78fa      	ldrb	r2, [r7, #3]
    18ee:	78bb      	ldrb	r3, [r7, #2]
    18f0:	6879      	ldr	r1, [r7, #4]
    18f2:	01d2      	lsls	r2, r2, #7
    18f4:	440a      	add	r2, r1
    18f6:	4413      	add	r3, r2
    18f8:	3340      	adds	r3, #64	; 0x40
    18fa:	7bfa      	ldrb	r2, [r7, #15]
    18fc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    18fe:	bf00      	nop
    1900:	3714      	adds	r7, #20
    1902:	46bd      	mov	sp, r7
    1904:	f85d 7b04 	ldr.w	r7, [sp], #4
    1908:	4770      	bx	lr

0000190a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    190a:	b490      	push	{r4, r7}
    190c:	b082      	sub	sp, #8
    190e:	af00      	add	r7, sp, #0
    1910:	6078      	str	r0, [r7, #4]
    1912:	460b      	mov	r3, r1
    1914:	70fb      	strb	r3, [r7, #3]
    1916:	4613      	mov	r3, r2
    1918:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    191a:	78fa      	ldrb	r2, [r7, #3]
    191c:	78bb      	ldrb	r3, [r7, #2]
    191e:	78f8      	ldrb	r0, [r7, #3]
    1920:	78b9      	ldrb	r1, [r7, #2]
    1922:	687c      	ldr	r4, [r7, #4]
    1924:	01c0      	lsls	r0, r0, #7
    1926:	4420      	add	r0, r4
    1928:	4401      	add	r1, r0
    192a:	3140      	adds	r1, #64	; 0x40
    192c:	7809      	ldrb	r1, [r1, #0]
    192e:	b2c9      	uxtb	r1, r1
    1930:	f041 0104 	orr.w	r1, r1, #4
    1934:	b2c8      	uxtb	r0, r1
    1936:	6879      	ldr	r1, [r7, #4]
    1938:	01d2      	lsls	r2, r2, #7
    193a:	440a      	add	r2, r1
    193c:	4413      	add	r3, r2
    193e:	3340      	adds	r3, #64	; 0x40
    1940:	4602      	mov	r2, r0
    1942:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1944:	bf00      	nop
    1946:	3708      	adds	r7, #8
    1948:	46bd      	mov	sp, r7
    194a:	bc90      	pop	{r4, r7}
    194c:	4770      	bx	lr

0000194e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    194e:	b490      	push	{r4, r7}
    1950:	b082      	sub	sp, #8
    1952:	af00      	add	r7, sp, #0
    1954:	6078      	str	r0, [r7, #4]
    1956:	460b      	mov	r3, r1
    1958:	70fb      	strb	r3, [r7, #3]
    195a:	4613      	mov	r3, r2
    195c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    195e:	78fa      	ldrb	r2, [r7, #3]
    1960:	78bb      	ldrb	r3, [r7, #2]
    1962:	78f8      	ldrb	r0, [r7, #3]
    1964:	78b9      	ldrb	r1, [r7, #2]
    1966:	687c      	ldr	r4, [r7, #4]
    1968:	01c0      	lsls	r0, r0, #7
    196a:	4420      	add	r0, r4
    196c:	4401      	add	r1, r0
    196e:	3140      	adds	r1, #64	; 0x40
    1970:	7809      	ldrb	r1, [r1, #0]
    1972:	b2c9      	uxtb	r1, r1
    1974:	f021 0104 	bic.w	r1, r1, #4
    1978:	b2c8      	uxtb	r0, r1
    197a:	6879      	ldr	r1, [r7, #4]
    197c:	01d2      	lsls	r2, r2, #7
    197e:	440a      	add	r2, r1
    1980:	4413      	add	r3, r2
    1982:	3340      	adds	r3, #64	; 0x40
    1984:	4602      	mov	r2, r0
    1986:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1988:	bf00      	nop
    198a:	3708      	adds	r7, #8
    198c:	46bd      	mov	sp, r7
    198e:	bc90      	pop	{r4, r7}
    1990:	4770      	bx	lr

00001992 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1992:	b480      	push	{r7}
    1994:	b085      	sub	sp, #20
    1996:	af00      	add	r7, sp, #0
    1998:	60f8      	str	r0, [r7, #12]
    199a:	460b      	mov	r3, r1
    199c:	607a      	str	r2, [r7, #4]
    199e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19a0:	7afb      	ldrb	r3, [r7, #11]
    19a2:	68fa      	ldr	r2, [r7, #12]
    19a4:	01db      	lsls	r3, r3, #7
    19a6:	4413      	add	r3, r2
    19a8:	3328      	adds	r3, #40	; 0x28
    19aa:	687a      	ldr	r2, [r7, #4]
    19ac:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    19ae:	bf00      	nop
    19b0:	3714      	adds	r7, #20
    19b2:	46bd      	mov	sp, r7
    19b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b8:	4770      	bx	lr
	...

000019bc <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    19bc:	b580      	push	{r7, lr}
    19be:	b082      	sub	sp, #8
    19c0:	af00      	add	r7, sp, #0
    19c2:	4603      	mov	r3, r0
    19c4:	6039      	str	r1, [r7, #0]
    19c6:	71fb      	strb	r3, [r7, #7]
    19c8:	4613      	mov	r3, r2
    19ca:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    19cc:	79bb      	ldrb	r3, [r7, #6]
    19ce:	2b01      	cmp	r3, #1
    19d0:	d01c      	beq.n	1a0c <_gpio_set_direction+0x50>
    19d2:	2b02      	cmp	r3, #2
    19d4:	d037      	beq.n	1a46 <_gpio_set_direction+0x8a>
    19d6:	2b00      	cmp	r3, #0
    19d8:	d14e      	bne.n	1a78 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    19da:	79fb      	ldrb	r3, [r7, #7]
    19dc:	683a      	ldr	r2, [r7, #0]
    19de:	4619      	mov	r1, r3
    19e0:	482a      	ldr	r0, [pc, #168]	; (1a8c <_gpio_set_direction+0xd0>)
    19e2:	4b2b      	ldr	r3, [pc, #172]	; (1a90 <_gpio_set_direction+0xd4>)
    19e4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    19e6:	683b      	ldr	r3, [r7, #0]
    19e8:	b29b      	uxth	r3, r3
    19ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    19ee:	79fb      	ldrb	r3, [r7, #7]
    19f0:	4619      	mov	r1, r3
    19f2:	4826      	ldr	r0, [pc, #152]	; (1a8c <_gpio_set_direction+0xd0>)
    19f4:	4b27      	ldr	r3, [pc, #156]	; (1a94 <_gpio_set_direction+0xd8>)
    19f6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    19f8:	683b      	ldr	r3, [r7, #0]
    19fa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    19fc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1a00:	79fb      	ldrb	r3, [r7, #7]
    1a02:	4619      	mov	r1, r3
    1a04:	4821      	ldr	r0, [pc, #132]	; (1a8c <_gpio_set_direction+0xd0>)
    1a06:	4b23      	ldr	r3, [pc, #140]	; (1a94 <_gpio_set_direction+0xd8>)
    1a08:	4798      	blx	r3
		break;
    1a0a:	e03a      	b.n	1a82 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1a0c:	79fb      	ldrb	r3, [r7, #7]
    1a0e:	683a      	ldr	r2, [r7, #0]
    1a10:	4619      	mov	r1, r3
    1a12:	481e      	ldr	r0, [pc, #120]	; (1a8c <_gpio_set_direction+0xd0>)
    1a14:	4b1e      	ldr	r3, [pc, #120]	; (1a90 <_gpio_set_direction+0xd4>)
    1a16:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1a18:	683b      	ldr	r3, [r7, #0]
    1a1a:	b29b      	uxth	r3, r3
    1a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1a24:	79f9      	ldrb	r1, [r7, #7]
    1a26:	461a      	mov	r2, r3
    1a28:	4818      	ldr	r0, [pc, #96]	; (1a8c <_gpio_set_direction+0xd0>)
    1a2a:	4b1a      	ldr	r3, [pc, #104]	; (1a94 <_gpio_set_direction+0xd8>)
    1a2c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1a2e:	683b      	ldr	r3, [r7, #0]
    1a30:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1a3a:	79f9      	ldrb	r1, [r7, #7]
    1a3c:	461a      	mov	r2, r3
    1a3e:	4813      	ldr	r0, [pc, #76]	; (1a8c <_gpio_set_direction+0xd0>)
    1a40:	4b14      	ldr	r3, [pc, #80]	; (1a94 <_gpio_set_direction+0xd8>)
    1a42:	4798      	blx	r3
		break;
    1a44:	e01d      	b.n	1a82 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1a46:	79fb      	ldrb	r3, [r7, #7]
    1a48:	683a      	ldr	r2, [r7, #0]
    1a4a:	4619      	mov	r1, r3
    1a4c:	480f      	ldr	r0, [pc, #60]	; (1a8c <_gpio_set_direction+0xd0>)
    1a4e:	4b12      	ldr	r3, [pc, #72]	; (1a98 <_gpio_set_direction+0xdc>)
    1a50:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1a52:	683b      	ldr	r3, [r7, #0]
    1a54:	b29b      	uxth	r3, r3
    1a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1a5a:	79fb      	ldrb	r3, [r7, #7]
    1a5c:	4619      	mov	r1, r3
    1a5e:	480b      	ldr	r0, [pc, #44]	; (1a8c <_gpio_set_direction+0xd0>)
    1a60:	4b0c      	ldr	r3, [pc, #48]	; (1a94 <_gpio_set_direction+0xd8>)
    1a62:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1a64:	683b      	ldr	r3, [r7, #0]
    1a66:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1a68:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1a6c:	79fb      	ldrb	r3, [r7, #7]
    1a6e:	4619      	mov	r1, r3
    1a70:	4806      	ldr	r0, [pc, #24]	; (1a8c <_gpio_set_direction+0xd0>)
    1a72:	4b08      	ldr	r3, [pc, #32]	; (1a94 <_gpio_set_direction+0xd8>)
    1a74:	4798      	blx	r3
		break;
    1a76:	e004      	b.n	1a82 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1a78:	2246      	movs	r2, #70	; 0x46
    1a7a:	4908      	ldr	r1, [pc, #32]	; (1a9c <_gpio_set_direction+0xe0>)
    1a7c:	2000      	movs	r0, #0
    1a7e:	4b08      	ldr	r3, [pc, #32]	; (1aa0 <_gpio_set_direction+0xe4>)
    1a80:	4798      	blx	r3
	}
}
    1a82:	bf00      	nop
    1a84:	3708      	adds	r7, #8
    1a86:	46bd      	mov	sp, r7
    1a88:	bd80      	pop	{r7, pc}
    1a8a:	bf00      	nop
    1a8c:	41008000 	.word	0x41008000
    1a90:	0000177b 	.word	0x0000177b
    1a94:	00001993 	.word	0x00001993
    1a98:	00001753 	.word	0x00001753
    1a9c:	00010ebc 	.word	0x00010ebc
    1aa0:	0000445d 	.word	0x0000445d

00001aa4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1aa4:	b580      	push	{r7, lr}
    1aa6:	b082      	sub	sp, #8
    1aa8:	af00      	add	r7, sp, #0
    1aaa:	4603      	mov	r3, r0
    1aac:	6039      	str	r1, [r7, #0]
    1aae:	71fb      	strb	r3, [r7, #7]
    1ab0:	4613      	mov	r3, r2
    1ab2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1ab4:	79bb      	ldrb	r3, [r7, #6]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d006      	beq.n	1ac8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1aba:	79fb      	ldrb	r3, [r7, #7]
    1abc:	683a      	ldr	r2, [r7, #0]
    1abe:	4619      	mov	r1, r3
    1ac0:	4806      	ldr	r0, [pc, #24]	; (1adc <_gpio_set_level+0x38>)
    1ac2:	4b07      	ldr	r3, [pc, #28]	; (1ae0 <_gpio_set_level+0x3c>)
    1ac4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1ac6:	e005      	b.n	1ad4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1ac8:	79fb      	ldrb	r3, [r7, #7]
    1aca:	683a      	ldr	r2, [r7, #0]
    1acc:	4619      	mov	r1, r3
    1ace:	4803      	ldr	r0, [pc, #12]	; (1adc <_gpio_set_level+0x38>)
    1ad0:	4b04      	ldr	r3, [pc, #16]	; (1ae4 <_gpio_set_level+0x40>)
    1ad2:	4798      	blx	r3
}
    1ad4:	bf00      	nop
    1ad6:	3708      	adds	r7, #8
    1ad8:	46bd      	mov	sp, r7
    1ada:	bd80      	pop	{r7, pc}
    1adc:	41008000 	.word	0x41008000
    1ae0:	000017a3 	.word	0x000017a3
    1ae4:	000017cb 	.word	0x000017cb

00001ae8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b082      	sub	sp, #8
    1aec:	af00      	add	r7, sp, #0
    1aee:	4603      	mov	r3, r0
    1af0:	71fb      	strb	r3, [r7, #7]
    1af2:	460b      	mov	r3, r1
    1af4:	71bb      	strb	r3, [r7, #6]
    1af6:	4613      	mov	r3, r2
    1af8:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1afa:	797b      	ldrb	r3, [r7, #5]
    1afc:	2b01      	cmp	r3, #1
    1afe:	d00a      	beq.n	1b16 <_gpio_set_pin_pull_mode+0x2e>
    1b00:	2b02      	cmp	r3, #2
    1b02:	d01f      	beq.n	1b44 <_gpio_set_pin_pull_mode+0x5c>
    1b04:	2b00      	cmp	r3, #0
    1b06:	d134      	bne.n	1b72 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1b08:	79ba      	ldrb	r2, [r7, #6]
    1b0a:	79fb      	ldrb	r3, [r7, #7]
    1b0c:	4619      	mov	r1, r3
    1b0e:	481e      	ldr	r0, [pc, #120]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b10:	4b1e      	ldr	r3, [pc, #120]	; (1b8c <_gpio_set_pin_pull_mode+0xa4>)
    1b12:	4798      	blx	r3
		break;
    1b14:	e033      	b.n	1b7e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1b16:	79bb      	ldrb	r3, [r7, #6]
    1b18:	2201      	movs	r2, #1
    1b1a:	409a      	lsls	r2, r3
    1b1c:	79fb      	ldrb	r3, [r7, #7]
    1b1e:	4619      	mov	r1, r3
    1b20:	4819      	ldr	r0, [pc, #100]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b22:	4b1b      	ldr	r3, [pc, #108]	; (1b90 <_gpio_set_pin_pull_mode+0xa8>)
    1b24:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1b26:	79ba      	ldrb	r2, [r7, #6]
    1b28:	79fb      	ldrb	r3, [r7, #7]
    1b2a:	4619      	mov	r1, r3
    1b2c:	4816      	ldr	r0, [pc, #88]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b2e:	4b19      	ldr	r3, [pc, #100]	; (1b94 <_gpio_set_pin_pull_mode+0xac>)
    1b30:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1b32:	79bb      	ldrb	r3, [r7, #6]
    1b34:	2201      	movs	r2, #1
    1b36:	409a      	lsls	r2, r3
    1b38:	79fb      	ldrb	r3, [r7, #7]
    1b3a:	4619      	mov	r1, r3
    1b3c:	4812      	ldr	r0, [pc, #72]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b3e:	4b16      	ldr	r3, [pc, #88]	; (1b98 <_gpio_set_pin_pull_mode+0xb0>)
    1b40:	4798      	blx	r3
		break;
    1b42:	e01c      	b.n	1b7e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1b44:	79bb      	ldrb	r3, [r7, #6]
    1b46:	2201      	movs	r2, #1
    1b48:	409a      	lsls	r2, r3
    1b4a:	79fb      	ldrb	r3, [r7, #7]
    1b4c:	4619      	mov	r1, r3
    1b4e:	480e      	ldr	r0, [pc, #56]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b50:	4b0f      	ldr	r3, [pc, #60]	; (1b90 <_gpio_set_pin_pull_mode+0xa8>)
    1b52:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1b54:	79ba      	ldrb	r2, [r7, #6]
    1b56:	79fb      	ldrb	r3, [r7, #7]
    1b58:	4619      	mov	r1, r3
    1b5a:	480b      	ldr	r0, [pc, #44]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b5c:	4b0d      	ldr	r3, [pc, #52]	; (1b94 <_gpio_set_pin_pull_mode+0xac>)
    1b5e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1b60:	79bb      	ldrb	r3, [r7, #6]
    1b62:	2201      	movs	r2, #1
    1b64:	409a      	lsls	r2, r3
    1b66:	79fb      	ldrb	r3, [r7, #7]
    1b68:	4619      	mov	r1, r3
    1b6a:	4807      	ldr	r0, [pc, #28]	; (1b88 <_gpio_set_pin_pull_mode+0xa0>)
    1b6c:	4b0b      	ldr	r3, [pc, #44]	; (1b9c <_gpio_set_pin_pull_mode+0xb4>)
    1b6e:	4798      	blx	r3
		break;
    1b70:	e005      	b.n	1b7e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1b72:	2289      	movs	r2, #137	; 0x89
    1b74:	490a      	ldr	r1, [pc, #40]	; (1ba0 <_gpio_set_pin_pull_mode+0xb8>)
    1b76:	2000      	movs	r0, #0
    1b78:	4b0a      	ldr	r3, [pc, #40]	; (1ba4 <_gpio_set_pin_pull_mode+0xbc>)
    1b7a:	4798      	blx	r3
		break;
    1b7c:	bf00      	nop
	}
}
    1b7e:	bf00      	nop
    1b80:	3708      	adds	r7, #8
    1b82:	46bd      	mov	sp, r7
    1b84:	bd80      	pop	{r7, pc}
    1b86:	bf00      	nop
    1b88:	41008000 	.word	0x41008000
    1b8c:	0000194f 	.word	0x0000194f
    1b90:	0000177b 	.word	0x0000177b
    1b94:	0000190b 	.word	0x0000190b
    1b98:	000017a3 	.word	0x000017a3
    1b9c:	000017cb 	.word	0x000017cb
    1ba0:	00010ebc 	.word	0x00010ebc
    1ba4:	0000445d 	.word	0x0000445d

00001ba8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1ba8:	b590      	push	{r4, r7, lr}
    1baa:	b085      	sub	sp, #20
    1bac:	af00      	add	r7, sp, #0
    1bae:	6078      	str	r0, [r7, #4]
    1bb0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	095b      	lsrs	r3, r3, #5
    1bb6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	f003 031f 	and.w	r3, r3, #31
    1bc0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1bc2:	683b      	ldr	r3, [r7, #0]
    1bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
    1bc8:	d106      	bne.n	1bd8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1bca:	7bba      	ldrb	r2, [r7, #14]
    1bcc:	7bf9      	ldrb	r1, [r7, #15]
    1bce:	2300      	movs	r3, #0
    1bd0:	4812      	ldr	r0, [pc, #72]	; (1c1c <_gpio_set_pin_function+0x74>)
    1bd2:	4c13      	ldr	r4, [pc, #76]	; (1c20 <_gpio_set_pin_function+0x78>)
    1bd4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1bd6:	e01d      	b.n	1c14 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1bd8:	7bba      	ldrb	r2, [r7, #14]
    1bda:	7bf9      	ldrb	r1, [r7, #15]
    1bdc:	2301      	movs	r3, #1
    1bde:	480f      	ldr	r0, [pc, #60]	; (1c1c <_gpio_set_pin_function+0x74>)
    1be0:	4c0f      	ldr	r4, [pc, #60]	; (1c20 <_gpio_set_pin_function+0x78>)
    1be2:	47a0      	blx	r4
		if (pin & 1) {
    1be4:	7bbb      	ldrb	r3, [r7, #14]
    1be6:	f003 0301 	and.w	r3, r3, #1
    1bea:	2b00      	cmp	r3, #0
    1bec:	d009      	beq.n	1c02 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1bee:	7bbb      	ldrb	r3, [r7, #14]
    1bf0:	085b      	lsrs	r3, r3, #1
    1bf2:	b2da      	uxtb	r2, r3
    1bf4:	683b      	ldr	r3, [r7, #0]
    1bf6:	b2db      	uxtb	r3, r3
    1bf8:	7bf9      	ldrb	r1, [r7, #15]
    1bfa:	4808      	ldr	r0, [pc, #32]	; (1c1c <_gpio_set_pin_function+0x74>)
    1bfc:	4c09      	ldr	r4, [pc, #36]	; (1c24 <_gpio_set_pin_function+0x7c>)
    1bfe:	47a0      	blx	r4
}
    1c00:	e008      	b.n	1c14 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1c02:	7bbb      	ldrb	r3, [r7, #14]
    1c04:	085b      	lsrs	r3, r3, #1
    1c06:	b2da      	uxtb	r2, r3
    1c08:	683b      	ldr	r3, [r7, #0]
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	7bf9      	ldrb	r1, [r7, #15]
    1c0e:	4803      	ldr	r0, [pc, #12]	; (1c1c <_gpio_set_pin_function+0x74>)
    1c10:	4c05      	ldr	r4, [pc, #20]	; (1c28 <_gpio_set_pin_function+0x80>)
    1c12:	47a0      	blx	r4
}
    1c14:	bf00      	nop
    1c16:	3714      	adds	r7, #20
    1c18:	46bd      	mov	sp, r7
    1c1a:	bd90      	pop	{r4, r7, pc}
    1c1c:	41008000 	.word	0x41008000
    1c20:	000018b1 	.word	0x000018b1
    1c24:	00001853 	.word	0x00001853
    1c28:	000017f3 	.word	0x000017f3

00001c2c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
    1c32:	4603      	mov	r3, r0
    1c34:	460a      	mov	r2, r1
    1c36:	71fb      	strb	r3, [r7, #7]
    1c38:	4613      	mov	r3, r2
    1c3a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1c3c:	79fb      	ldrb	r3, [r7, #7]
    1c3e:	095b      	lsrs	r3, r3, #5
    1c40:	b2d8      	uxtb	r0, r3
    1c42:	79fb      	ldrb	r3, [r7, #7]
    1c44:	f003 031f 	and.w	r3, r3, #31
    1c48:	b2db      	uxtb	r3, r3
    1c4a:	79ba      	ldrb	r2, [r7, #6]
    1c4c:	4619      	mov	r1, r3
    1c4e:	4b03      	ldr	r3, [pc, #12]	; (1c5c <gpio_set_pin_pull_mode+0x30>)
    1c50:	4798      	blx	r3
}
    1c52:	bf00      	nop
    1c54:	3708      	adds	r7, #8
    1c56:	46bd      	mov	sp, r7
    1c58:	bd80      	pop	{r7, pc}
    1c5a:	bf00      	nop
    1c5c:	00001ae9 	.word	0x00001ae9

00001c60 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	b082      	sub	sp, #8
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
    1c68:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1c6a:	6839      	ldr	r1, [r7, #0]
    1c6c:	6878      	ldr	r0, [r7, #4]
    1c6e:	4b03      	ldr	r3, [pc, #12]	; (1c7c <gpio_set_pin_function+0x1c>)
    1c70:	4798      	blx	r3
}
    1c72:	bf00      	nop
    1c74:	3708      	adds	r7, #8
    1c76:	46bd      	mov	sp, r7
    1c78:	bd80      	pop	{r7, pc}
    1c7a:	bf00      	nop
    1c7c:	00001ba9 	.word	0x00001ba9

00001c80 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1c80:	b580      	push	{r7, lr}
    1c82:	b082      	sub	sp, #8
    1c84:	af00      	add	r7, sp, #0
    1c86:	4603      	mov	r3, r0
    1c88:	460a      	mov	r2, r1
    1c8a:	71fb      	strb	r3, [r7, #7]
    1c8c:	4613      	mov	r3, r2
    1c8e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1c90:	79fb      	ldrb	r3, [r7, #7]
    1c92:	095b      	lsrs	r3, r3, #5
    1c94:	b2d8      	uxtb	r0, r3
    1c96:	79fb      	ldrb	r3, [r7, #7]
    1c98:	f003 031f 	and.w	r3, r3, #31
    1c9c:	2201      	movs	r2, #1
    1c9e:	fa02 f303 	lsl.w	r3, r2, r3
    1ca2:	79ba      	ldrb	r2, [r7, #6]
    1ca4:	4619      	mov	r1, r3
    1ca6:	4b03      	ldr	r3, [pc, #12]	; (1cb4 <gpio_set_pin_direction+0x34>)
    1ca8:	4798      	blx	r3
}
    1caa:	bf00      	nop
    1cac:	3708      	adds	r7, #8
    1cae:	46bd      	mov	sp, r7
    1cb0:	bd80      	pop	{r7, pc}
    1cb2:	bf00      	nop
    1cb4:	000019bd 	.word	0x000019bd

00001cb8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b082      	sub	sp, #8
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	4603      	mov	r3, r0
    1cc0:	460a      	mov	r2, r1
    1cc2:	71fb      	strb	r3, [r7, #7]
    1cc4:	4613      	mov	r3, r2
    1cc6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1cc8:	79fb      	ldrb	r3, [r7, #7]
    1cca:	095b      	lsrs	r3, r3, #5
    1ccc:	b2d8      	uxtb	r0, r3
    1cce:	79fb      	ldrb	r3, [r7, #7]
    1cd0:	f003 031f 	and.w	r3, r3, #31
    1cd4:	2201      	movs	r2, #1
    1cd6:	fa02 f303 	lsl.w	r3, r2, r3
    1cda:	79ba      	ldrb	r2, [r7, #6]
    1cdc:	4619      	mov	r1, r3
    1cde:	4b03      	ldr	r3, [pc, #12]	; (1cec <gpio_set_pin_level+0x34>)
    1ce0:	4798      	blx	r3
}
    1ce2:	bf00      	nop
    1ce4:	3708      	adds	r7, #8
    1ce6:	46bd      	mov	sp, r7
    1ce8:	bd80      	pop	{r7, pc}
    1cea:	bf00      	nop
    1cec:	00001aa5 	.word	0x00001aa5

00001cf0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	af00      	add	r7, sp, #0
	_init_chip();
    1cf4:	4b01      	ldr	r3, [pc, #4]	; (1cfc <init_mcu+0xc>)
    1cf6:	4798      	blx	r3
}
    1cf8:	bf00      	nop
    1cfa:	bd80      	pop	{r7, pc}
    1cfc:	00005065 	.word	0x00005065

00001d00 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b082      	sub	sp, #8
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
    1d08:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1d0a:	687b      	ldr	r3, [r7, #4]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d004      	beq.n	1d1a <wdt_init+0x1a>
    1d10:	683b      	ldr	r3, [r7, #0]
    1d12:	2b00      	cmp	r3, #0
    1d14:	d001      	beq.n	1d1a <wdt_init+0x1a>
    1d16:	2301      	movs	r3, #1
    1d18:	e000      	b.n	1d1c <wdt_init+0x1c>
    1d1a:	2300      	movs	r3, #0
    1d1c:	f003 0301 	and.w	r3, r3, #1
    1d20:	b2db      	uxtb	r3, r3
    1d22:	2248      	movs	r2, #72	; 0x48
    1d24:	4907      	ldr	r1, [pc, #28]	; (1d44 <wdt_init+0x44>)
    1d26:	4618      	mov	r0, r3
    1d28:	4b07      	ldr	r3, [pc, #28]	; (1d48 <wdt_init+0x48>)
    1d2a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	683a      	ldr	r2, [r7, #0]
    1d30:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	4618      	mov	r0, r3
    1d36:	4b05      	ldr	r3, [pc, #20]	; (1d4c <wdt_init+0x4c>)
    1d38:	4798      	blx	r3
    1d3a:	4603      	mov	r3, r0
}
    1d3c:	4618      	mov	r0, r3
    1d3e:	3708      	adds	r7, #8
    1d40:	46bd      	mov	sp, r7
    1d42:	bd80      	pop	{r7, pc}
    1d44:	00010ed8 	.word	0x00010ed8
    1d48:	0000445d 	.word	0x0000445d
    1d4c:	0000ba79 	.word	0x0000ba79

00001d50 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1d54:	4804      	ldr	r0, [pc, #16]	; (1d68 <CRC_CALC_init+0x18>)
    1d56:	4b05      	ldr	r3, [pc, #20]	; (1d6c <CRC_CALC_init+0x1c>)
    1d58:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1d5a:	4905      	ldr	r1, [pc, #20]	; (1d70 <CRC_CALC_init+0x20>)
    1d5c:	4805      	ldr	r0, [pc, #20]	; (1d74 <CRC_CALC_init+0x24>)
    1d5e:	4b06      	ldr	r3, [pc, #24]	; (1d78 <CRC_CALC_init+0x28>)
    1d60:	4798      	blx	r3
}
    1d62:	bf00      	nop
    1d64:	bd80      	pop	{r7, pc}
    1d66:	bf00      	nop
    1d68:	40000800 	.word	0x40000800
    1d6c:	00001553 	.word	0x00001553
    1d70:	41002000 	.word	0x41002000
    1d74:	2000ac3c 	.word	0x2000ac3c
    1d78:	00002ded 	.word	0x00002ded

00001d7c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1d7c:	b580      	push	{r7, lr}
    1d7e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d80:	2244      	movs	r2, #68	; 0x44
    1d82:	2104      	movs	r1, #4
    1d84:	483f      	ldr	r0, [pc, #252]	; (1e84 <EXTERNAL_IRQ_0_init+0x108>)
    1d86:	4b40      	ldr	r3, [pc, #256]	; (1e88 <EXTERNAL_IRQ_0_init+0x10c>)
    1d88:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1d8a:	4840      	ldr	r0, [pc, #256]	; (1e8c <EXTERNAL_IRQ_0_init+0x110>)
    1d8c:	4b40      	ldr	r3, [pc, #256]	; (1e90 <EXTERNAL_IRQ_0_init+0x114>)
    1d8e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1d90:	2101      	movs	r1, #1
    1d92:	2040      	movs	r0, #64	; 0x40
    1d94:	4b3f      	ldr	r3, [pc, #252]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1d96:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1d98:	2100      	movs	r1, #0
    1d9a:	2040      	movs	r0, #64	; 0x40
    1d9c:	4b3e      	ldr	r3, [pc, #248]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1d9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1da0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1da4:	2040      	movs	r0, #64	; 0x40
    1da6:	4b3d      	ldr	r3, [pc, #244]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1da8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1daa:	2101      	movs	r1, #1
    1dac:	2021      	movs	r0, #33	; 0x21
    1dae:	4b39      	ldr	r3, [pc, #228]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1db0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1db2:	2100      	movs	r1, #0
    1db4:	2021      	movs	r0, #33	; 0x21
    1db6:	4b38      	ldr	r3, [pc, #224]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1db8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1dba:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1dbe:	2021      	movs	r0, #33	; 0x21
    1dc0:	4b36      	ldr	r3, [pc, #216]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1dc2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1dc4:	2101      	movs	r1, #1
    1dc6:	2003      	movs	r0, #3
    1dc8:	4b32      	ldr	r3, [pc, #200]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1dca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1dcc:	2102      	movs	r1, #2
    1dce:	2003      	movs	r0, #3
    1dd0:	4b31      	ldr	r3, [pc, #196]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1dd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1dd4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1dd8:	2003      	movs	r0, #3
    1dda:	4b30      	ldr	r3, [pc, #192]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1ddc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1dde:	2101      	movs	r1, #1
    1de0:	2004      	movs	r0, #4
    1de2:	4b2c      	ldr	r3, [pc, #176]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1de4:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1de6:	2102      	movs	r1, #2
    1de8:	2004      	movs	r0, #4
    1dea:	4b2b      	ldr	r3, [pc, #172]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1dec:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1dee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1df2:	2004      	movs	r0, #4
    1df4:	4b29      	ldr	r3, [pc, #164]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1df6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1df8:	2101      	movs	r1, #1
    1dfa:	2005      	movs	r0, #5
    1dfc:	4b25      	ldr	r3, [pc, #148]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1dfe:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1e00:	2102      	movs	r1, #2
    1e02:	2005      	movs	r0, #5
    1e04:	4b24      	ldr	r3, [pc, #144]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1e06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1e08:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1e0c:	2005      	movs	r0, #5
    1e0e:	4b23      	ldr	r3, [pc, #140]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1e10:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1e12:	2101      	movs	r1, #1
    1e14:	2056      	movs	r0, #86	; 0x56
    1e16:	4b1f      	ldr	r3, [pc, #124]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1e18:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1e1a:	2102      	movs	r1, #2
    1e1c:	2056      	movs	r0, #86	; 0x56
    1e1e:	4b1e      	ldr	r3, [pc, #120]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1e20:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1e22:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1e26:	2056      	movs	r0, #86	; 0x56
    1e28:	4b1c      	ldr	r3, [pc, #112]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1e2a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1e2c:	2101      	movs	r1, #1
    1e2e:	2057      	movs	r0, #87	; 0x57
    1e30:	4b18      	ldr	r3, [pc, #96]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1e32:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1e34:	2102      	movs	r1, #2
    1e36:	2057      	movs	r0, #87	; 0x57
    1e38:	4b17      	ldr	r3, [pc, #92]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1e3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1e3c:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1e40:	2057      	movs	r0, #87	; 0x57
    1e42:	4b16      	ldr	r3, [pc, #88]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1e44:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1e46:	2101      	movs	r1, #1
    1e48:	2028      	movs	r0, #40	; 0x28
    1e4a:	4b12      	ldr	r3, [pc, #72]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1e4c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1e4e:	2100      	movs	r1, #0
    1e50:	2028      	movs	r0, #40	; 0x28
    1e52:	4b11      	ldr	r3, [pc, #68]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1e54:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1e56:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1e5a:	2028      	movs	r0, #40	; 0x28
    1e5c:	4b0f      	ldr	r3, [pc, #60]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1e5e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1e60:	2101      	movs	r1, #1
    1e62:	2029      	movs	r0, #41	; 0x29
    1e64:	4b0b      	ldr	r3, [pc, #44]	; (1e94 <EXTERNAL_IRQ_0_init+0x118>)
    1e66:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1e68:	2100      	movs	r1, #0
    1e6a:	2029      	movs	r0, #41	; 0x29
    1e6c:	4b0a      	ldr	r3, [pc, #40]	; (1e98 <EXTERNAL_IRQ_0_init+0x11c>)
    1e6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1e70:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1e74:	2029      	movs	r0, #41	; 0x29
    1e76:	4b09      	ldr	r3, [pc, #36]	; (1e9c <EXTERNAL_IRQ_0_init+0x120>)
    1e78:	4798      	blx	r3

	ext_irq_init();
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <EXTERNAL_IRQ_0_init+0x124>)
    1e7c:	4798      	blx	r3
}
    1e7e:	bf00      	nop
    1e80:	bd80      	pop	{r7, pc}
    1e82:	bf00      	nop
    1e84:	40001c00 	.word	0x40001c00
    1e88:	0000140d 	.word	0x0000140d
    1e8c:	40000800 	.word	0x40000800
    1e90:	000014f3 	.word	0x000014f3
    1e94:	00001c81 	.word	0x00001c81
    1e98:	00001c2d 	.word	0x00001c2d
    1e9c:	00001c61 	.word	0x00001c61
    1ea0:	00002eb5 	.word	0x00002eb5

00001ea4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1ea4:	b580      	push	{r7, lr}
    1ea6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ea8:	2244      	movs	r2, #68	; 0x44
    1eaa:	210b      	movs	r1, #11
    1eac:	4807      	ldr	r0, [pc, #28]	; (1ecc <EVENT_SYSTEM_0_init+0x28>)
    1eae:	4b08      	ldr	r3, [pc, #32]	; (1ed0 <EVENT_SYSTEM_0_init+0x2c>)
    1eb0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1eb2:	2244      	movs	r2, #68	; 0x44
    1eb4:	210c      	movs	r1, #12
    1eb6:	4805      	ldr	r0, [pc, #20]	; (1ecc <EVENT_SYSTEM_0_init+0x28>)
    1eb8:	4b05      	ldr	r3, [pc, #20]	; (1ed0 <EVENT_SYSTEM_0_init+0x2c>)
    1eba:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1ebc:	4805      	ldr	r0, [pc, #20]	; (1ed4 <EVENT_SYSTEM_0_init+0x30>)
    1ebe:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <EVENT_SYSTEM_0_init+0x34>)
    1ec0:	4798      	blx	r3

	event_system_init();
    1ec2:	4b06      	ldr	r3, [pc, #24]	; (1edc <EVENT_SYSTEM_0_init+0x38>)
    1ec4:	4798      	blx	r3
}
    1ec6:	bf00      	nop
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	bf00      	nop
    1ecc:	40001c00 	.word	0x40001c00
    1ed0:	0000140d 	.word	0x0000140d
    1ed4:	40000800 	.word	0x40000800
    1ed8:	00001573 	.word	0x00001573
    1edc:	00002ea1 	.word	0x00002ea1

00001ee0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1ee4:	2101      	movs	r1, #1
    1ee6:	202b      	movs	r0, #43	; 0x2b
    1ee8:	4b2b      	ldr	r3, [pc, #172]	; (1f98 <QSPI_N25Q256_PORT_init+0xb8>)
    1eea:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1eec:	2100      	movs	r1, #0
    1eee:	202b      	movs	r0, #43	; 0x2b
    1ef0:	4b2a      	ldr	r3, [pc, #168]	; (1f9c <QSPI_N25Q256_PORT_init+0xbc>)
    1ef2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1ef4:	492a      	ldr	r1, [pc, #168]	; (1fa0 <QSPI_N25Q256_PORT_init+0xc0>)
    1ef6:	202b      	movs	r0, #43	; 0x2b
    1ef8:	4b2a      	ldr	r3, [pc, #168]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc4>)
    1efa:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1efc:	2102      	movs	r1, #2
    1efe:	2008      	movs	r0, #8
    1f00:	4b25      	ldr	r3, [pc, #148]	; (1f98 <QSPI_N25Q256_PORT_init+0xb8>)
    1f02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1f04:	2100      	movs	r1, #0
    1f06:	2008      	movs	r0, #8
    1f08:	4b27      	ldr	r3, [pc, #156]	; (1fa8 <QSPI_N25Q256_PORT_init+0xc8>)
    1f0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1f0c:	2100      	movs	r1, #0
    1f0e:	2008      	movs	r0, #8
    1f10:	4b22      	ldr	r3, [pc, #136]	; (1f9c <QSPI_N25Q256_PORT_init+0xbc>)
    1f12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1f14:	4925      	ldr	r1, [pc, #148]	; (1fac <QSPI_N25Q256_PORT_init+0xcc>)
    1f16:	2008      	movs	r0, #8
    1f18:	4b22      	ldr	r3, [pc, #136]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc4>)
    1f1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1f1c:	2102      	movs	r1, #2
    1f1e:	2009      	movs	r0, #9
    1f20:	4b1d      	ldr	r3, [pc, #116]	; (1f98 <QSPI_N25Q256_PORT_init+0xb8>)
    1f22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1f24:	2100      	movs	r1, #0
    1f26:	2009      	movs	r0, #9
    1f28:	4b1f      	ldr	r3, [pc, #124]	; (1fa8 <QSPI_N25Q256_PORT_init+0xc8>)
    1f2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1f2c:	2100      	movs	r1, #0
    1f2e:	2009      	movs	r0, #9
    1f30:	4b1a      	ldr	r3, [pc, #104]	; (1f9c <QSPI_N25Q256_PORT_init+0xbc>)
    1f32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1f34:	491e      	ldr	r1, [pc, #120]	; (1fb0 <QSPI_N25Q256_PORT_init+0xd0>)
    1f36:	2009      	movs	r0, #9
    1f38:	4b1a      	ldr	r3, [pc, #104]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc4>)
    1f3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1f3c:	2102      	movs	r1, #2
    1f3e:	200a      	movs	r0, #10
    1f40:	4b15      	ldr	r3, [pc, #84]	; (1f98 <QSPI_N25Q256_PORT_init+0xb8>)
    1f42:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1f44:	2100      	movs	r1, #0
    1f46:	200a      	movs	r0, #10
    1f48:	4b17      	ldr	r3, [pc, #92]	; (1fa8 <QSPI_N25Q256_PORT_init+0xc8>)
    1f4a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1f4c:	2100      	movs	r1, #0
    1f4e:	200a      	movs	r0, #10
    1f50:	4b12      	ldr	r3, [pc, #72]	; (1f9c <QSPI_N25Q256_PORT_init+0xbc>)
    1f52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1f54:	4917      	ldr	r1, [pc, #92]	; (1fb4 <QSPI_N25Q256_PORT_init+0xd4>)
    1f56:	200a      	movs	r0, #10
    1f58:	4b12      	ldr	r3, [pc, #72]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc4>)
    1f5a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1f5c:	2102      	movs	r1, #2
    1f5e:	200b      	movs	r0, #11
    1f60:	4b0d      	ldr	r3, [pc, #52]	; (1f98 <QSPI_N25Q256_PORT_init+0xb8>)
    1f62:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1f64:	2100      	movs	r1, #0
    1f66:	200b      	movs	r0, #11
    1f68:	4b0f      	ldr	r3, [pc, #60]	; (1fa8 <QSPI_N25Q256_PORT_init+0xc8>)
    1f6a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1f6c:	2100      	movs	r1, #0
    1f6e:	200b      	movs	r0, #11
    1f70:	4b0a      	ldr	r3, [pc, #40]	; (1f9c <QSPI_N25Q256_PORT_init+0xbc>)
    1f72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1f74:	4910      	ldr	r1, [pc, #64]	; (1fb8 <QSPI_N25Q256_PORT_init+0xd8>)
    1f76:	200b      	movs	r0, #11
    1f78:	4b0a      	ldr	r3, [pc, #40]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc4>)
    1f7a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1f7c:	2101      	movs	r1, #1
    1f7e:	202a      	movs	r0, #42	; 0x2a
    1f80:	4b05      	ldr	r3, [pc, #20]	; (1f98 <QSPI_N25Q256_PORT_init+0xb8>)
    1f82:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1f84:	2100      	movs	r1, #0
    1f86:	202a      	movs	r0, #42	; 0x2a
    1f88:	4b04      	ldr	r3, [pc, #16]	; (1f9c <QSPI_N25Q256_PORT_init+0xbc>)
    1f8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1f8c:	490b      	ldr	r1, [pc, #44]	; (1fbc <QSPI_N25Q256_PORT_init+0xdc>)
    1f8e:	202a      	movs	r0, #42	; 0x2a
    1f90:	4b04      	ldr	r3, [pc, #16]	; (1fa4 <QSPI_N25Q256_PORT_init+0xc4>)
    1f92:	4798      	blx	r3
}
    1f94:	bf00      	nop
    1f96:	bd80      	pop	{r7, pc}
    1f98:	00001c81 	.word	0x00001c81
    1f9c:	00001c2d 	.word	0x00001c2d
    1fa0:	002b0007 	.word	0x002b0007
    1fa4:	00001c61 	.word	0x00001c61
    1fa8:	00001cb9 	.word	0x00001cb9
    1fac:	00080007 	.word	0x00080007
    1fb0:	00090007 	.word	0x00090007
    1fb4:	000a0007 	.word	0x000a0007
    1fb8:	000b0007 	.word	0x000b0007
    1fbc:	002a0007 	.word	0x002a0007

00001fc0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1fc4:	4805      	ldr	r0, [pc, #20]	; (1fdc <QSPI_N25Q256_CLOCK_init+0x1c>)
    1fc6:	4b06      	ldr	r3, [pc, #24]	; (1fe0 <QSPI_N25Q256_CLOCK_init+0x20>)
    1fc8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1fca:	4804      	ldr	r0, [pc, #16]	; (1fdc <QSPI_N25Q256_CLOCK_init+0x1c>)
    1fcc:	4b05      	ldr	r3, [pc, #20]	; (1fe4 <QSPI_N25Q256_CLOCK_init+0x24>)
    1fce:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1fd0:	4802      	ldr	r0, [pc, #8]	; (1fdc <QSPI_N25Q256_CLOCK_init+0x1c>)
    1fd2:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <QSPI_N25Q256_CLOCK_init+0x28>)
    1fd4:	4798      	blx	r3
}
    1fd6:	bf00      	nop
    1fd8:	bd80      	pop	{r7, pc}
    1fda:	bf00      	nop
    1fdc:	40000800 	.word	0x40000800
    1fe0:	00001453 	.word	0x00001453
    1fe4:	00001493 	.word	0x00001493
    1fe8:	00001673 	.word	0x00001673

00001fec <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1ff0:	4b04      	ldr	r3, [pc, #16]	; (2004 <QSPI_N25Q256_init+0x18>)
    1ff2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1ff4:	4904      	ldr	r1, [pc, #16]	; (2008 <QSPI_N25Q256_init+0x1c>)
    1ff6:	4805      	ldr	r0, [pc, #20]	; (200c <QSPI_N25Q256_init+0x20>)
    1ff8:	4b05      	ldr	r3, [pc, #20]	; (2010 <QSPI_N25Q256_init+0x24>)
    1ffa:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1ffc:	4b05      	ldr	r3, [pc, #20]	; (2014 <QSPI_N25Q256_init+0x28>)
    1ffe:	4798      	blx	r3
}
    2000:	bf00      	nop
    2002:	bd80      	pop	{r7, pc}
    2004:	00001fc1 	.word	0x00001fc1
    2008:	42003400 	.word	0x42003400
    200c:	2000aad0 	.word	0x2000aad0
    2010:	00003379 	.word	0x00003379
    2014:	00001ee1 	.word	0x00001ee1

00002018 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2018:	b580      	push	{r7, lr}
    201a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    201c:	4802      	ldr	r0, [pc, #8]	; (2028 <DATETIME_CLOCK_CLOCK_init+0x10>)
    201e:	4b03      	ldr	r3, [pc, #12]	; (202c <DATETIME_CLOCK_CLOCK_init+0x14>)
    2020:	4798      	blx	r3
}
    2022:	bf00      	nop
    2024:	bd80      	pop	{r7, pc}
    2026:	bf00      	nop
    2028:	40000800 	.word	0x40000800
    202c:	000014d3 	.word	0x000014d3

00002030 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2030:	b580      	push	{r7, lr}
    2032:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2034:	4b03      	ldr	r3, [pc, #12]	; (2044 <DATETIME_CLOCK_init+0x14>)
    2036:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2038:	4903      	ldr	r1, [pc, #12]	; (2048 <DATETIME_CLOCK_init+0x18>)
    203a:	4804      	ldr	r0, [pc, #16]	; (204c <DATETIME_CLOCK_init+0x1c>)
    203c:	4b04      	ldr	r3, [pc, #16]	; (2050 <DATETIME_CLOCK_init+0x20>)
    203e:	4798      	blx	r3
}
    2040:	bf00      	nop
    2042:	bd80      	pop	{r7, pc}
    2044:	00002019 	.word	0x00002019
    2048:	40002400 	.word	0x40002400
    204c:	2000ac18 	.word	0x2000ac18
    2050:	00002c41 	.word	0x00002c41

00002054 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    2054:	b580      	push	{r7, lr}
    2056:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    2058:	2100      	movs	r1, #0
    205a:	2011      	movs	r0, #17
    205c:	4b07      	ldr	r3, [pc, #28]	; (207c <I2C_HEATERS_PORT_init+0x28>)
    205e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    2060:	4907      	ldr	r1, [pc, #28]	; (2080 <I2C_HEATERS_PORT_init+0x2c>)
    2062:	2011      	movs	r0, #17
    2064:	4b07      	ldr	r3, [pc, #28]	; (2084 <I2C_HEATERS_PORT_init+0x30>)
    2066:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    2068:	2100      	movs	r1, #0
    206a:	2010      	movs	r0, #16
    206c:	4b03      	ldr	r3, [pc, #12]	; (207c <I2C_HEATERS_PORT_init+0x28>)
    206e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    2070:	4905      	ldr	r1, [pc, #20]	; (2088 <I2C_HEATERS_PORT_init+0x34>)
    2072:	2010      	movs	r0, #16
    2074:	4b03      	ldr	r3, [pc, #12]	; (2084 <I2C_HEATERS_PORT_init+0x30>)
    2076:	4798      	blx	r3
}
    2078:	bf00      	nop
    207a:	bd80      	pop	{r7, pc}
    207c:	00001c2d 	.word	0x00001c2d
    2080:	00110003 	.word	0x00110003
    2084:	00001c61 	.word	0x00001c61
    2088:	00100003 	.word	0x00100003

0000208c <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    208c:	b580      	push	{r7, lr}
    208e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2090:	2240      	movs	r2, #64	; 0x40
    2092:	2118      	movs	r1, #24
    2094:	4806      	ldr	r0, [pc, #24]	; (20b0 <I2C_HEATERS_CLOCK_init+0x24>)
    2096:	4b07      	ldr	r3, [pc, #28]	; (20b4 <I2C_HEATERS_CLOCK_init+0x28>)
    2098:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    209a:	2243      	movs	r2, #67	; 0x43
    209c:	2103      	movs	r1, #3
    209e:	4804      	ldr	r0, [pc, #16]	; (20b0 <I2C_HEATERS_CLOCK_init+0x24>)
    20a0:	4b04      	ldr	r3, [pc, #16]	; (20b4 <I2C_HEATERS_CLOCK_init+0x28>)
    20a2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    20a4:	4804      	ldr	r0, [pc, #16]	; (20b8 <I2C_HEATERS_CLOCK_init+0x2c>)
    20a6:	4b05      	ldr	r3, [pc, #20]	; (20bc <I2C_HEATERS_CLOCK_init+0x30>)
    20a8:	4798      	blx	r3
}
    20aa:	bf00      	nop
    20ac:	bd80      	pop	{r7, pc}
    20ae:	bf00      	nop
    20b0:	40001c00 	.word	0x40001c00
    20b4:	0000140d 	.word	0x0000140d
    20b8:	40000800 	.word	0x40000800
    20bc:	00001593 	.word	0x00001593

000020c0 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    20c4:	4b04      	ldr	r3, [pc, #16]	; (20d8 <I2C_HEATERS_init+0x18>)
    20c6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    20c8:	4904      	ldr	r1, [pc, #16]	; (20dc <I2C_HEATERS_init+0x1c>)
    20ca:	4805      	ldr	r0, [pc, #20]	; (20e0 <I2C_HEATERS_init+0x20>)
    20cc:	4b05      	ldr	r3, [pc, #20]	; (20e4 <I2C_HEATERS_init+0x24>)
    20ce:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <I2C_HEATERS_init+0x28>)
    20d2:	4798      	blx	r3
}
    20d4:	bf00      	nop
    20d6:	bd80      	pop	{r7, pc}
    20d8:	0000208d 	.word	0x0000208d
    20dc:	41014000 	.word	0x41014000
    20e0:	2000ab70 	.word	0x2000ab70
    20e4:	0000317d 	.word	0x0000317d
    20e8:	00002055 	.word	0x00002055

000020ec <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    20f0:	2100      	movs	r1, #0
    20f2:	203b      	movs	r0, #59	; 0x3b
    20f4:	4b11      	ldr	r3, [pc, #68]	; (213c <SPI_TEMP_PORT_init+0x50>)
    20f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    20f8:	2102      	movs	r1, #2
    20fa:	203b      	movs	r0, #59	; 0x3b
    20fc:	4b10      	ldr	r3, [pc, #64]	; (2140 <SPI_TEMP_PORT_init+0x54>)
    20fe:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2100:	4910      	ldr	r1, [pc, #64]	; (2144 <SPI_TEMP_PORT_init+0x58>)
    2102:	203b      	movs	r0, #59	; 0x3b
    2104:	4b10      	ldr	r3, [pc, #64]	; (2148 <SPI_TEMP_PORT_init+0x5c>)
    2106:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2108:	2100      	movs	r1, #0
    210a:	203a      	movs	r0, #58	; 0x3a
    210c:	4b0b      	ldr	r3, [pc, #44]	; (213c <SPI_TEMP_PORT_init+0x50>)
    210e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2110:	2102      	movs	r1, #2
    2112:	203a      	movs	r0, #58	; 0x3a
    2114:	4b0a      	ldr	r3, [pc, #40]	; (2140 <SPI_TEMP_PORT_init+0x54>)
    2116:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2118:	490c      	ldr	r1, [pc, #48]	; (214c <SPI_TEMP_PORT_init+0x60>)
    211a:	203a      	movs	r0, #58	; 0x3a
    211c:	4b0a      	ldr	r3, [pc, #40]	; (2148 <SPI_TEMP_PORT_init+0x5c>)
    211e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2120:	2101      	movs	r1, #1
    2122:	203c      	movs	r0, #60	; 0x3c
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <SPI_TEMP_PORT_init+0x54>)
    2126:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2128:	2100      	movs	r1, #0
    212a:	203c      	movs	r0, #60	; 0x3c
    212c:	4b08      	ldr	r3, [pc, #32]	; (2150 <SPI_TEMP_PORT_init+0x64>)
    212e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2130:	4908      	ldr	r1, [pc, #32]	; (2154 <SPI_TEMP_PORT_init+0x68>)
    2132:	203c      	movs	r0, #60	; 0x3c
    2134:	4b04      	ldr	r3, [pc, #16]	; (2148 <SPI_TEMP_PORT_init+0x5c>)
    2136:	4798      	blx	r3
}
    2138:	bf00      	nop
    213a:	bd80      	pop	{r7, pc}
    213c:	00001cb9 	.word	0x00001cb9
    2140:	00001c81 	.word	0x00001c81
    2144:	003b0003 	.word	0x003b0003
    2148:	00001c61 	.word	0x00001c61
    214c:	003a0003 	.word	0x003a0003
    2150:	00001c2d 	.word	0x00001c2d
    2154:	003c0003 	.word	0x003c0003

00002158 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2158:	b580      	push	{r7, lr}
    215a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    215c:	2245      	movs	r2, #69	; 0x45
    215e:	2122      	movs	r1, #34	; 0x22
    2160:	4806      	ldr	r0, [pc, #24]	; (217c <SPI_TEMP_CLOCK_init+0x24>)
    2162:	4b07      	ldr	r3, [pc, #28]	; (2180 <SPI_TEMP_CLOCK_init+0x28>)
    2164:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2166:	224a      	movs	r2, #74	; 0x4a
    2168:	2103      	movs	r1, #3
    216a:	4804      	ldr	r0, [pc, #16]	; (217c <SPI_TEMP_CLOCK_init+0x24>)
    216c:	4b04      	ldr	r3, [pc, #16]	; (2180 <SPI_TEMP_CLOCK_init+0x28>)
    216e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    2170:	4804      	ldr	r0, [pc, #16]	; (2184 <SPI_TEMP_CLOCK_init+0x2c>)
    2172:	4b05      	ldr	r3, [pc, #20]	; (2188 <SPI_TEMP_CLOCK_init+0x30>)
    2174:	4798      	blx	r3
}
    2176:	bf00      	nop
    2178:	bd80      	pop	{r7, pc}
    217a:	bf00      	nop
    217c:	40001c00 	.word	0x40001c00
    2180:	0000140d 	.word	0x0000140d
    2184:	40000800 	.word	0x40000800
    2188:	00001693 	.word	0x00001693

0000218c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    218c:	b580      	push	{r7, lr}
    218e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2190:	4b05      	ldr	r3, [pc, #20]	; (21a8 <SPI_TEMP_init+0x1c>)
    2192:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    2194:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2198:	4804      	ldr	r0, [pc, #16]	; (21ac <SPI_TEMP_init+0x20>)
    219a:	4b05      	ldr	r3, [pc, #20]	; (21b0 <SPI_TEMP_init+0x24>)
    219c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    219e:	4b05      	ldr	r3, [pc, #20]	; (21b4 <SPI_TEMP_init+0x28>)
    21a0:	4798      	blx	r3
}
    21a2:	bf00      	nop
    21a4:	bd80      	pop	{r7, pc}
    21a6:	bf00      	nop
    21a8:	00002159 	.word	0x00002159
    21ac:	2000aa78 	.word	0x2000aa78
    21b0:	00003489 	.word	0x00003489
    21b4:	000020ed 	.word	0x000020ed

000021b8 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    21bc:	2100      	movs	r1, #0
    21be:	2017      	movs	r0, #23
    21c0:	4b07      	ldr	r3, [pc, #28]	; (21e0 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    21c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    21c4:	4907      	ldr	r1, [pc, #28]	; (21e4 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    21c6:	2017      	movs	r0, #23
    21c8:	4b07      	ldr	r3, [pc, #28]	; (21e8 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    21ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    21cc:	2100      	movs	r1, #0
    21ce:	2016      	movs	r0, #22
    21d0:	4b03      	ldr	r3, [pc, #12]	; (21e0 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    21d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    21d4:	4905      	ldr	r1, [pc, #20]	; (21ec <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    21d6:	2016      	movs	r0, #22
    21d8:	4b03      	ldr	r3, [pc, #12]	; (21e8 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    21da:	4798      	blx	r3
}
    21dc:	bf00      	nop
    21de:	bd80      	pop	{r7, pc}
    21e0:	00001c2d 	.word	0x00001c2d
    21e4:	00170003 	.word	0x00170003
    21e8:	00001c61 	.word	0x00001c61
    21ec:	00160003 	.word	0x00160003

000021f0 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21f4:	2244      	movs	r2, #68	; 0x44
    21f6:	2123      	movs	r1, #35	; 0x23
    21f8:	4806      	ldr	r0, [pc, #24]	; (2214 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    21fa:	4b07      	ldr	r3, [pc, #28]	; (2218 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    21fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21fe:	224a      	movs	r2, #74	; 0x4a
    2200:	2103      	movs	r1, #3
    2202:	4804      	ldr	r0, [pc, #16]	; (2214 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2204:	4b04      	ldr	r3, [pc, #16]	; (2218 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2206:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2208:	4804      	ldr	r0, [pc, #16]	; (221c <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    220a:	4b05      	ldr	r3, [pc, #20]	; (2220 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    220c:	4798      	blx	r3
}
    220e:	bf00      	nop
    2210:	bd80      	pop	{r7, pc}
    2212:	bf00      	nop
    2214:	40001c00 	.word	0x40001c00
    2218:	0000140d 	.word	0x0000140d
    221c:	40000800 	.word	0x40000800
    2220:	000016b3 	.word	0x000016b3

00002224 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    2224:	b580      	push	{r7, lr}
    2226:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2228:	4b04      	ldr	r3, [pc, #16]	; (223c <I2C_FLAPPER_VALVE_init+0x18>)
    222a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    222c:	4904      	ldr	r1, [pc, #16]	; (2240 <I2C_FLAPPER_VALVE_init+0x1c>)
    222e:	4805      	ldr	r0, [pc, #20]	; (2244 <I2C_FLAPPER_VALVE_init+0x20>)
    2230:	4b05      	ldr	r3, [pc, #20]	; (2248 <I2C_FLAPPER_VALVE_init+0x24>)
    2232:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    2234:	4b05      	ldr	r3, [pc, #20]	; (224c <I2C_FLAPPER_VALVE_init+0x28>)
    2236:	4798      	blx	r3
}
    2238:	bf00      	nop
    223a:	bd80      	pop	{r7, pc}
    223c:	000021f1 	.word	0x000021f1
    2240:	43000400 	.word	0x43000400
    2244:	2000ab14 	.word	0x2000ab14
    2248:	0000317d 	.word	0x0000317d
    224c:	000021b9 	.word	0x000021b9

00002250 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2250:	b580      	push	{r7, lr}
    2252:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2254:	2100      	movs	r1, #0
    2256:	2044      	movs	r0, #68	; 0x44
    2258:	4b11      	ldr	r3, [pc, #68]	; (22a0 <SPI_HI3593_PORT_init+0x50>)
    225a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    225c:	2102      	movs	r1, #2
    225e:	2044      	movs	r0, #68	; 0x44
    2260:	4b10      	ldr	r3, [pc, #64]	; (22a4 <SPI_HI3593_PORT_init+0x54>)
    2262:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2264:	4910      	ldr	r1, [pc, #64]	; (22a8 <SPI_HI3593_PORT_init+0x58>)
    2266:	2044      	movs	r0, #68	; 0x44
    2268:	4b10      	ldr	r3, [pc, #64]	; (22ac <SPI_HI3593_PORT_init+0x5c>)
    226a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    226c:	2100      	movs	r1, #0
    226e:	2045      	movs	r0, #69	; 0x45
    2270:	4b0b      	ldr	r3, [pc, #44]	; (22a0 <SPI_HI3593_PORT_init+0x50>)
    2272:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    2274:	2102      	movs	r1, #2
    2276:	2045      	movs	r0, #69	; 0x45
    2278:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <SPI_HI3593_PORT_init+0x54>)
    227a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    227c:	490c      	ldr	r1, [pc, #48]	; (22b0 <SPI_HI3593_PORT_init+0x60>)
    227e:	2045      	movs	r0, #69	; 0x45
    2280:	4b0a      	ldr	r3, [pc, #40]	; (22ac <SPI_HI3593_PORT_init+0x5c>)
    2282:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    2284:	2101      	movs	r1, #1
    2286:	2047      	movs	r0, #71	; 0x47
    2288:	4b06      	ldr	r3, [pc, #24]	; (22a4 <SPI_HI3593_PORT_init+0x54>)
    228a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    228c:	2100      	movs	r1, #0
    228e:	2047      	movs	r0, #71	; 0x47
    2290:	4b08      	ldr	r3, [pc, #32]	; (22b4 <SPI_HI3593_PORT_init+0x64>)
    2292:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    2294:	4908      	ldr	r1, [pc, #32]	; (22b8 <SPI_HI3593_PORT_init+0x68>)
    2296:	2047      	movs	r0, #71	; 0x47
    2298:	4b04      	ldr	r3, [pc, #16]	; (22ac <SPI_HI3593_PORT_init+0x5c>)
    229a:	4798      	blx	r3
}
    229c:	bf00      	nop
    229e:	bd80      	pop	{r7, pc}
    22a0:	00001cb9 	.word	0x00001cb9
    22a4:	00001c81 	.word	0x00001c81
    22a8:	00440002 	.word	0x00440002
    22ac:	00001c61 	.word	0x00001c61
    22b0:	00450002 	.word	0x00450002
    22b4:	00001c2d 	.word	0x00001c2d
    22b8:	00470002 	.word	0x00470002

000022bc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    22bc:	b580      	push	{r7, lr}
    22be:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22c0:	2242      	movs	r2, #66	; 0x42
    22c2:	2124      	movs	r1, #36	; 0x24
    22c4:	4806      	ldr	r0, [pc, #24]	; (22e0 <SPI_HI3593_CLOCK_init+0x24>)
    22c6:	4b07      	ldr	r3, [pc, #28]	; (22e4 <SPI_HI3593_CLOCK_init+0x28>)
    22c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22ca:	224a      	movs	r2, #74	; 0x4a
    22cc:	2103      	movs	r1, #3
    22ce:	4804      	ldr	r0, [pc, #16]	; (22e0 <SPI_HI3593_CLOCK_init+0x24>)
    22d0:	4b04      	ldr	r3, [pc, #16]	; (22e4 <SPI_HI3593_CLOCK_init+0x28>)
    22d2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    22d4:	4804      	ldr	r0, [pc, #16]	; (22e8 <SPI_HI3593_CLOCK_init+0x2c>)
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <SPI_HI3593_CLOCK_init+0x30>)
    22d8:	4798      	blx	r3
}
    22da:	bf00      	nop
    22dc:	bd80      	pop	{r7, pc}
    22de:	bf00      	nop
    22e0:	40001c00 	.word	0x40001c00
    22e4:	0000140d 	.word	0x0000140d
    22e8:	40000800 	.word	0x40000800
    22ec:	000016d3 	.word	0x000016d3

000022f0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    22f4:	4b04      	ldr	r3, [pc, #16]	; (2308 <SPI_HI3593_init+0x18>)
    22f6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    22f8:	4904      	ldr	r1, [pc, #16]	; (230c <SPI_HI3593_init+0x1c>)
    22fa:	4805      	ldr	r0, [pc, #20]	; (2310 <SPI_HI3593_init+0x20>)
    22fc:	4b05      	ldr	r3, [pc, #20]	; (2314 <SPI_HI3593_init+0x24>)
    22fe:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2300:	4b05      	ldr	r3, [pc, #20]	; (2318 <SPI_HI3593_init+0x28>)
    2302:	4798      	blx	r3
}
    2304:	bf00      	nop
    2306:	bd80      	pop	{r7, pc}
    2308:	000022bd 	.word	0x000022bd
    230c:	43000800 	.word	0x43000800
    2310:	2000aa60 	.word	0x2000aa60
    2314:	00003489 	.word	0x00003489
    2318:	00002251 	.word	0x00002251

0000231c <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    231c:	b580      	push	{r7, lr}
    231e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2320:	2100      	movs	r1, #0
    2322:	2068      	movs	r0, #104	; 0x68
    2324:	4b07      	ldr	r3, [pc, #28]	; (2344 <I2C_FANS_PORT_init+0x28>)
    2326:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2328:	4907      	ldr	r1, [pc, #28]	; (2348 <I2C_FANS_PORT_init+0x2c>)
    232a:	2068      	movs	r0, #104	; 0x68
    232c:	4b07      	ldr	r3, [pc, #28]	; (234c <I2C_FANS_PORT_init+0x30>)
    232e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2330:	2100      	movs	r1, #0
    2332:	2069      	movs	r0, #105	; 0x69
    2334:	4b03      	ldr	r3, [pc, #12]	; (2344 <I2C_FANS_PORT_init+0x28>)
    2336:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2338:	4905      	ldr	r1, [pc, #20]	; (2350 <I2C_FANS_PORT_init+0x34>)
    233a:	2069      	movs	r0, #105	; 0x69
    233c:	4b03      	ldr	r3, [pc, #12]	; (234c <I2C_FANS_PORT_init+0x30>)
    233e:	4798      	blx	r3
}
    2340:	bf00      	nop
    2342:	bd80      	pop	{r7, pc}
    2344:	00001c2d 	.word	0x00001c2d
    2348:	00680002 	.word	0x00680002
    234c:	00001c61 	.word	0x00001c61
    2350:	00690002 	.word	0x00690002

00002354 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2358:	2244      	movs	r2, #68	; 0x44
    235a:	2125      	movs	r1, #37	; 0x25
    235c:	4806      	ldr	r0, [pc, #24]	; (2378 <I2C_FANS_CLOCK_init+0x24>)
    235e:	4b07      	ldr	r3, [pc, #28]	; (237c <I2C_FANS_CLOCK_init+0x28>)
    2360:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2362:	224a      	movs	r2, #74	; 0x4a
    2364:	2103      	movs	r1, #3
    2366:	4804      	ldr	r0, [pc, #16]	; (2378 <I2C_FANS_CLOCK_init+0x24>)
    2368:	4b04      	ldr	r3, [pc, #16]	; (237c <I2C_FANS_CLOCK_init+0x28>)
    236a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    236c:	4804      	ldr	r0, [pc, #16]	; (2380 <I2C_FANS_CLOCK_init+0x2c>)
    236e:	4b05      	ldr	r3, [pc, #20]	; (2384 <I2C_FANS_CLOCK_init+0x30>)
    2370:	4798      	blx	r3
}
    2372:	bf00      	nop
    2374:	bd80      	pop	{r7, pc}
    2376:	bf00      	nop
    2378:	40001c00 	.word	0x40001c00
    237c:	0000140d 	.word	0x0000140d
    2380:	40000800 	.word	0x40000800
    2384:	000016f3 	.word	0x000016f3

00002388 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2388:	b580      	push	{r7, lr}
    238a:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    238c:	4b04      	ldr	r3, [pc, #16]	; (23a0 <I2C_FANS_init+0x18>)
    238e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2390:	4904      	ldr	r1, [pc, #16]	; (23a4 <I2C_FANS_init+0x1c>)
    2392:	4805      	ldr	r0, [pc, #20]	; (23a8 <I2C_FANS_init+0x20>)
    2394:	4b05      	ldr	r3, [pc, #20]	; (23ac <I2C_FANS_init+0x24>)
    2396:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2398:	4b05      	ldr	r3, [pc, #20]	; (23b0 <I2C_FANS_init+0x28>)
    239a:	4798      	blx	r3
}
    239c:	bf00      	nop
    239e:	bd80      	pop	{r7, pc}
    23a0:	00002355 	.word	0x00002355
    23a4:	43000c00 	.word	0x43000c00
    23a8:	2000aa90 	.word	0x2000aa90
    23ac:	0000317d 	.word	0x0000317d
    23b0:	0000231d 	.word	0x0000231d

000023b4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    23b8:	4808      	ldr	r0, [pc, #32]	; (23dc <TIMER_USB_init+0x28>)
    23ba:	4b09      	ldr	r3, [pc, #36]	; (23e0 <TIMER_USB_init+0x2c>)
    23bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23be:	2243      	movs	r2, #67	; 0x43
    23c0:	2109      	movs	r1, #9
    23c2:	4808      	ldr	r0, [pc, #32]	; (23e4 <TIMER_USB_init+0x30>)
    23c4:	4b08      	ldr	r3, [pc, #32]	; (23e8 <TIMER_USB_init+0x34>)
    23c6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    23c8:	4b08      	ldr	r3, [pc, #32]	; (23ec <TIMER_USB_init+0x38>)
    23ca:	4798      	blx	r3
    23cc:	4603      	mov	r3, r0
    23ce:	461a      	mov	r2, r3
    23d0:	4907      	ldr	r1, [pc, #28]	; (23f0 <TIMER_USB_init+0x3c>)
    23d2:	4808      	ldr	r0, [pc, #32]	; (23f4 <TIMER_USB_init+0x40>)
    23d4:	4b08      	ldr	r3, [pc, #32]	; (23f8 <TIMER_USB_init+0x44>)
    23d6:	4798      	blx	r3
}
    23d8:	bf00      	nop
    23da:	bd80      	pop	{r7, pc}
    23dc:	40000800 	.word	0x40000800
    23e0:	00001513 	.word	0x00001513
    23e4:	40001c00 	.word	0x40001c00
    23e8:	0000140d 	.word	0x0000140d
    23ec:	00008f11 	.word	0x00008f11
    23f0:	40003800 	.word	0x40003800
    23f4:	2000abd8 	.word	0x2000abd8
    23f8:	00003659 	.word	0x00003659

000023fc <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2400:	4808      	ldr	r0, [pc, #32]	; (2424 <TIMER_ARINC_init+0x28>)
    2402:	4b09      	ldr	r3, [pc, #36]	; (2428 <TIMER_ARINC_init+0x2c>)
    2404:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2406:	2244      	movs	r2, #68	; 0x44
    2408:	211a      	movs	r1, #26
    240a:	4808      	ldr	r0, [pc, #32]	; (242c <TIMER_ARINC_init+0x30>)
    240c:	4b08      	ldr	r3, [pc, #32]	; (2430 <TIMER_ARINC_init+0x34>)
    240e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2410:	4b08      	ldr	r3, [pc, #32]	; (2434 <TIMER_ARINC_init+0x38>)
    2412:	4798      	blx	r3
    2414:	4603      	mov	r3, r0
    2416:	461a      	mov	r2, r3
    2418:	4907      	ldr	r1, [pc, #28]	; (2438 <TIMER_ARINC_init+0x3c>)
    241a:	4808      	ldr	r0, [pc, #32]	; (243c <TIMER_ARINC_init+0x40>)
    241c:	4b08      	ldr	r3, [pc, #32]	; (2440 <TIMER_ARINC_init+0x44>)
    241e:	4798      	blx	r3
}
    2420:	bf00      	nop
    2422:	bd80      	pop	{r7, pc}
    2424:	40000800 	.word	0x40000800
    2428:	000015f3 	.word	0x000015f3
    242c:	40001c00 	.word	0x40001c00
    2430:	0000140d 	.word	0x0000140d
    2434:	00008f11 	.word	0x00008f11
    2438:	4101a000 	.word	0x4101a000
    243c:	2000abb8 	.word	0x2000abb8
    2440:	00003659 	.word	0x00003659

00002444 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2444:	b580      	push	{r7, lr}
    2446:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2448:	4808      	ldr	r0, [pc, #32]	; (246c <TIMER_MAINTENANCE_init+0x28>)
    244a:	4b09      	ldr	r3, [pc, #36]	; (2470 <TIMER_MAINTENANCE_init+0x2c>)
    244c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    244e:	2246      	movs	r2, #70	; 0x46
    2450:	211e      	movs	r1, #30
    2452:	4808      	ldr	r0, [pc, #32]	; (2474 <TIMER_MAINTENANCE_init+0x30>)
    2454:	4b08      	ldr	r3, [pc, #32]	; (2478 <TIMER_MAINTENANCE_init+0x34>)
    2456:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2458:	4b08      	ldr	r3, [pc, #32]	; (247c <TIMER_MAINTENANCE_init+0x38>)
    245a:	4798      	blx	r3
    245c:	4603      	mov	r3, r0
    245e:	461a      	mov	r2, r3
    2460:	4907      	ldr	r1, [pc, #28]	; (2480 <TIMER_MAINTENANCE_init+0x3c>)
    2462:	4808      	ldr	r0, [pc, #32]	; (2484 <TIMER_MAINTENANCE_init+0x40>)
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <TIMER_MAINTENANCE_init+0x44>)
    2466:	4798      	blx	r3
}
    2468:	bf00      	nop
    246a:	bd80      	pop	{r7, pc}
    246c:	40000800 	.word	0x40000800
    2470:	00001633 	.word	0x00001633
    2474:	40001c00 	.word	0x40001c00
    2478:	0000140d 	.word	0x0000140d
    247c:	00008f11 	.word	0x00008f11
    2480:	42001400 	.word	0x42001400
    2484:	2000aab0 	.word	0x2000aab0
    2488:	00003659 	.word	0x00003659

0000248c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    248c:	b580      	push	{r7, lr}
    248e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2490:	4808      	ldr	r0, [pc, #32]	; (24b4 <TIMER_INTERFACE_init+0x28>)
    2492:	4b09      	ldr	r3, [pc, #36]	; (24b8 <TIMER_INTERFACE_init+0x2c>)
    2494:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2496:	2246      	movs	r2, #70	; 0x46
    2498:	211e      	movs	r1, #30
    249a:	4808      	ldr	r0, [pc, #32]	; (24bc <TIMER_INTERFACE_init+0x30>)
    249c:	4b08      	ldr	r3, [pc, #32]	; (24c0 <TIMER_INTERFACE_init+0x34>)
    249e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    24a0:	4b08      	ldr	r3, [pc, #32]	; (24c4 <TIMER_INTERFACE_init+0x38>)
    24a2:	4798      	blx	r3
    24a4:	4603      	mov	r3, r0
    24a6:	461a      	mov	r2, r3
    24a8:	4907      	ldr	r1, [pc, #28]	; (24c8 <TIMER_INTERFACE_init+0x3c>)
    24aa:	4808      	ldr	r0, [pc, #32]	; (24cc <TIMER_INTERFACE_init+0x40>)
    24ac:	4b08      	ldr	r3, [pc, #32]	; (24d0 <TIMER_INTERFACE_init+0x44>)
    24ae:	4798      	blx	r3
}
    24b0:	bf00      	nop
    24b2:	bd80      	pop	{r7, pc}
    24b4:	40000800 	.word	0x40000800
    24b8:	00001653 	.word	0x00001653
    24bc:	40001c00 	.word	0x40001c00
    24c0:	0000140d 	.word	0x0000140d
    24c4:	00008f11 	.word	0x00008f11
    24c8:	42001800 	.word	0x42001800
    24cc:	2000aaf4 	.word	0x2000aaf4
    24d0:	00003659 	.word	0x00003659

000024d4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    24d4:	b580      	push	{r7, lr}
    24d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    24d8:	4808      	ldr	r0, [pc, #32]	; (24fc <TIMER_EVENT_init+0x28>)
    24da:	4b09      	ldr	r3, [pc, #36]	; (2500 <TIMER_EVENT_init+0x2c>)
    24dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24de:	2246      	movs	r2, #70	; 0x46
    24e0:	2127      	movs	r1, #39	; 0x27
    24e2:	4808      	ldr	r0, [pc, #32]	; (2504 <TIMER_EVENT_init+0x30>)
    24e4:	4b08      	ldr	r3, [pc, #32]	; (2508 <TIMER_EVENT_init+0x34>)
    24e6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    24e8:	4b08      	ldr	r3, [pc, #32]	; (250c <TIMER_EVENT_init+0x38>)
    24ea:	4798      	blx	r3
    24ec:	4603      	mov	r3, r0
    24ee:	461a      	mov	r2, r3
    24f0:	4907      	ldr	r1, [pc, #28]	; (2510 <TIMER_EVENT_init+0x3c>)
    24f2:	4808      	ldr	r0, [pc, #32]	; (2514 <TIMER_EVENT_init+0x40>)
    24f4:	4b08      	ldr	r3, [pc, #32]	; (2518 <TIMER_EVENT_init+0x44>)
    24f6:	4798      	blx	r3
}
    24f8:	bf00      	nop
    24fa:	bd80      	pop	{r7, pc}
    24fc:	40000800 	.word	0x40000800
    2500:	00001713 	.word	0x00001713
    2504:	40001c00 	.word	0x40001c00
    2508:	0000140d 	.word	0x0000140d
    250c:	00008f11 	.word	0x00008f11
    2510:	43001400 	.word	0x43001400
    2514:	2000aad4 	.word	0x2000aad4
    2518:	00003659 	.word	0x00003659

0000251c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    251c:	b480      	push	{r7}
    251e:	af00      	add	r7, sp, #0
}
    2520:	bf00      	nop
    2522:	46bd      	mov	sp, r7
    2524:	f85d 7b04 	ldr.w	r7, [sp], #4
    2528:	4770      	bx	lr
	...

0000252c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    252c:	b580      	push	{r7, lr}
    252e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2530:	4804      	ldr	r0, [pc, #16]	; (2544 <LIVE_PULSE_CLOCK_init+0x18>)
    2532:	4b05      	ldr	r3, [pc, #20]	; (2548 <LIVE_PULSE_CLOCK_init+0x1c>)
    2534:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2536:	2240      	movs	r2, #64	; 0x40
    2538:	2127      	movs	r1, #39	; 0x27
    253a:	4804      	ldr	r0, [pc, #16]	; (254c <LIVE_PULSE_CLOCK_init+0x20>)
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <LIVE_PULSE_CLOCK_init+0x24>)
    253e:	4798      	blx	r3
}
    2540:	bf00      	nop
    2542:	bd80      	pop	{r7, pc}
    2544:	40000800 	.word	0x40000800
    2548:	00001733 	.word	0x00001733
    254c:	40001c00 	.word	0x40001c00
    2550:	0000140d 	.word	0x0000140d

00002554 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2554:	b580      	push	{r7, lr}
    2556:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2558:	4b06      	ldr	r3, [pc, #24]	; (2574 <LIVE_PULSE_init+0x20>)
    255a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    255c:	4b06      	ldr	r3, [pc, #24]	; (2578 <LIVE_PULSE_init+0x24>)
    255e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2560:	4b06      	ldr	r3, [pc, #24]	; (257c <LIVE_PULSE_init+0x28>)
    2562:	4798      	blx	r3
    2564:	4603      	mov	r3, r0
    2566:	461a      	mov	r2, r3
    2568:	4905      	ldr	r1, [pc, #20]	; (2580 <LIVE_PULSE_init+0x2c>)
    256a:	4806      	ldr	r0, [pc, #24]	; (2584 <LIVE_PULSE_init+0x30>)
    256c:	4b06      	ldr	r3, [pc, #24]	; (2588 <LIVE_PULSE_init+0x34>)
    256e:	4798      	blx	r3
}
    2570:	bf00      	nop
    2572:	bd80      	pop	{r7, pc}
    2574:	0000252d 	.word	0x0000252d
    2578:	0000251d 	.word	0x0000251d
    257c:	00008f25 	.word	0x00008f25
    2580:	43001800 	.word	0x43001800
    2584:	2000ab34 	.word	0x2000ab34
    2588:	00003279 	.word	0x00003279

0000258c <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    258c:	b580      	push	{r7, lr}
    258e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2590:	4804      	ldr	r0, [pc, #16]	; (25a4 <TIMER_HVAC_CLOCK_init+0x18>)
    2592:	4b05      	ldr	r3, [pc, #20]	; (25a8 <TIMER_HVAC_CLOCK_init+0x1c>)
    2594:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2596:	2244      	movs	r2, #68	; 0x44
    2598:	2119      	movs	r1, #25
    259a:	4804      	ldr	r0, [pc, #16]	; (25ac <TIMER_HVAC_CLOCK_init+0x20>)
    259c:	4b04      	ldr	r3, [pc, #16]	; (25b0 <TIMER_HVAC_CLOCK_init+0x24>)
    259e:	4798      	blx	r3
}
    25a0:	bf00      	nop
    25a2:	bd80      	pop	{r7, pc}
    25a4:	40000800 	.word	0x40000800
    25a8:	000015b3 	.word	0x000015b3
    25ac:	40001c00 	.word	0x40001c00
    25b0:	0000140d 	.word	0x0000140d

000025b4 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    25b4:	b580      	push	{r7, lr}
    25b6:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    25b8:	4b05      	ldr	r3, [pc, #20]	; (25d0 <TIMER_HVAC_init+0x1c>)
    25ba:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    25bc:	4b05      	ldr	r3, [pc, #20]	; (25d4 <TIMER_HVAC_init+0x20>)
    25be:	4798      	blx	r3
    25c0:	4603      	mov	r3, r0
    25c2:	461a      	mov	r2, r3
    25c4:	4904      	ldr	r1, [pc, #16]	; (25d8 <TIMER_HVAC_init+0x24>)
    25c6:	4805      	ldr	r0, [pc, #20]	; (25dc <TIMER_HVAC_init+0x28>)
    25c8:	4b05      	ldr	r3, [pc, #20]	; (25e0 <TIMER_HVAC_init+0x2c>)
    25ca:	4798      	blx	r3
}
    25cc:	bf00      	nop
    25ce:	bd80      	pop	{r7, pc}
    25d0:	0000258d 	.word	0x0000258d
    25d4:	000082b5 	.word	0x000082b5
    25d8:	41016000 	.word	0x41016000
    25dc:	2000abf8 	.word	0x2000abf8
    25e0:	00003659 	.word	0x00003659

000025e4 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    25e8:	4804      	ldr	r0, [pc, #16]	; (25fc <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    25ea:	4b05      	ldr	r3, [pc, #20]	; (2600 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    25ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    25ee:	2244      	movs	r2, #68	; 0x44
    25f0:	2119      	movs	r1, #25
    25f2:	4804      	ldr	r0, [pc, #16]	; (2604 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    25f6:	4798      	blx	r3
}
    25f8:	bf00      	nop
    25fa:	bd80      	pop	{r7, pc}
    25fc:	40000800 	.word	0x40000800
    2600:	000015d3 	.word	0x000015d3
    2604:	40001c00 	.word	0x40001c00
    2608:	0000140d 	.word	0x0000140d

0000260c <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    260c:	b580      	push	{r7, lr}
    260e:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2610:	4b05      	ldr	r3, [pc, #20]	; (2628 <TIMER_TEMPERATURES_init+0x1c>)
    2612:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2614:	4b05      	ldr	r3, [pc, #20]	; (262c <TIMER_TEMPERATURES_init+0x20>)
    2616:	4798      	blx	r3
    2618:	4603      	mov	r3, r0
    261a:	461a      	mov	r2, r3
    261c:	4904      	ldr	r1, [pc, #16]	; (2630 <TIMER_TEMPERATURES_init+0x24>)
    261e:	4805      	ldr	r0, [pc, #20]	; (2634 <TIMER_TEMPERATURES_init+0x28>)
    2620:	4b05      	ldr	r3, [pc, #20]	; (2638 <TIMER_TEMPERATURES_init+0x2c>)
    2622:	4798      	blx	r3
}
    2624:	bf00      	nop
    2626:	bd80      	pop	{r7, pc}
    2628:	000025e5 	.word	0x000025e5
    262c:	000082b5 	.word	0x000082b5
    2630:	41018000 	.word	0x41018000
    2634:	2000aa40 	.word	0x2000aa40
    2638:	00003659 	.word	0x00003659

0000263c <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    263c:	b580      	push	{r7, lr}
    263e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2640:	4804      	ldr	r0, [pc, #16]	; (2654 <TIMER_CCU_CLOCK_init+0x18>)
    2642:	4b05      	ldr	r3, [pc, #20]	; (2658 <TIMER_CCU_CLOCK_init+0x1c>)
    2644:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2646:	2240      	movs	r2, #64	; 0x40
    2648:	211d      	movs	r1, #29
    264a:	4804      	ldr	r0, [pc, #16]	; (265c <TIMER_CCU_CLOCK_init+0x20>)
    264c:	4b04      	ldr	r3, [pc, #16]	; (2660 <TIMER_CCU_CLOCK_init+0x24>)
    264e:	4798      	blx	r3
}
    2650:	bf00      	nop
    2652:	bd80      	pop	{r7, pc}
    2654:	40000800 	.word	0x40000800
    2658:	00001613 	.word	0x00001613
    265c:	40001c00 	.word	0x40001c00
    2660:	0000140d 	.word	0x0000140d

00002664 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2664:	b580      	push	{r7, lr}
    2666:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2668:	4b05      	ldr	r3, [pc, #20]	; (2680 <TIMER_CCU_init+0x1c>)
    266a:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    266c:	4b05      	ldr	r3, [pc, #20]	; (2684 <TIMER_CCU_init+0x20>)
    266e:	4798      	blx	r3
    2670:	4603      	mov	r3, r0
    2672:	461a      	mov	r2, r3
    2674:	4904      	ldr	r1, [pc, #16]	; (2688 <TIMER_CCU_init+0x24>)
    2676:	4805      	ldr	r0, [pc, #20]	; (268c <TIMER_CCU_init+0x28>)
    2678:	4b05      	ldr	r3, [pc, #20]	; (2690 <TIMER_CCU_init+0x2c>)
    267a:	4798      	blx	r3
}
    267c:	bf00      	nop
    267e:	bd80      	pop	{r7, pc}
    2680:	0000263d 	.word	0x0000263d
    2684:	000082b5 	.word	0x000082b5
    2688:	42000c00 	.word	0x42000c00
    268c:	2000ab50 	.word	0x2000ab50
    2690:	00003659 	.word	0x00003659

00002694 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2694:	b580      	push	{r7, lr}
    2696:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2698:	2102      	movs	r1, #2
    269a:	2018      	movs	r0, #24
    269c:	4b0f      	ldr	r3, [pc, #60]	; (26dc <CDCUSB_PORT_init+0x48>)
    269e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    26a0:	2100      	movs	r1, #0
    26a2:	2018      	movs	r0, #24
    26a4:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <CDCUSB_PORT_init+0x4c>)
    26a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    26a8:	2100      	movs	r1, #0
    26aa:	2018      	movs	r0, #24
    26ac:	4b0d      	ldr	r3, [pc, #52]	; (26e4 <CDCUSB_PORT_init+0x50>)
    26ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    26b0:	490d      	ldr	r1, [pc, #52]	; (26e8 <CDCUSB_PORT_init+0x54>)
    26b2:	2018      	movs	r0, #24
    26b4:	4b0d      	ldr	r3, [pc, #52]	; (26ec <CDCUSB_PORT_init+0x58>)
    26b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    26b8:	2102      	movs	r1, #2
    26ba:	2019      	movs	r0, #25
    26bc:	4b07      	ldr	r3, [pc, #28]	; (26dc <CDCUSB_PORT_init+0x48>)
    26be:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    26c0:	2100      	movs	r1, #0
    26c2:	2019      	movs	r0, #25
    26c4:	4b06      	ldr	r3, [pc, #24]	; (26e0 <CDCUSB_PORT_init+0x4c>)
    26c6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    26c8:	2100      	movs	r1, #0
    26ca:	2019      	movs	r0, #25
    26cc:	4b05      	ldr	r3, [pc, #20]	; (26e4 <CDCUSB_PORT_init+0x50>)
    26ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    26d0:	4907      	ldr	r1, [pc, #28]	; (26f0 <CDCUSB_PORT_init+0x5c>)
    26d2:	2019      	movs	r0, #25
    26d4:	4b05      	ldr	r3, [pc, #20]	; (26ec <CDCUSB_PORT_init+0x58>)
    26d6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    26d8:	bf00      	nop
    26da:	bd80      	pop	{r7, pc}
    26dc:	00001c81 	.word	0x00001c81
    26e0:	00001cb9 	.word	0x00001cb9
    26e4:	00001c2d 	.word	0x00001c2d
    26e8:	00180007 	.word	0x00180007
    26ec:	00001c61 	.word	0x00001c61
    26f0:	00190007 	.word	0x00190007

000026f4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    26f8:	2242      	movs	r2, #66	; 0x42
    26fa:	210a      	movs	r1, #10
    26fc:	4805      	ldr	r0, [pc, #20]	; (2714 <CDCUSB_CLOCK_init+0x20>)
    26fe:	4b06      	ldr	r3, [pc, #24]	; (2718 <CDCUSB_CLOCK_init+0x24>)
    2700:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2702:	4806      	ldr	r0, [pc, #24]	; (271c <CDCUSB_CLOCK_init+0x28>)
    2704:	4b06      	ldr	r3, [pc, #24]	; (2720 <CDCUSB_CLOCK_init+0x2c>)
    2706:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2708:	4804      	ldr	r0, [pc, #16]	; (271c <CDCUSB_CLOCK_init+0x28>)
    270a:	4b06      	ldr	r3, [pc, #24]	; (2724 <CDCUSB_CLOCK_init+0x30>)
    270c:	4798      	blx	r3
}
    270e:	bf00      	nop
    2710:	bd80      	pop	{r7, pc}
    2712:	bf00      	nop
    2714:	40001c00 	.word	0x40001c00
    2718:	0000140d 	.word	0x0000140d
    271c:	40000800 	.word	0x40000800
    2720:	00001433 	.word	0x00001433
    2724:	00001533 	.word	0x00001533

00002728 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2728:	b580      	push	{r7, lr}
    272a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    272c:	4b03      	ldr	r3, [pc, #12]	; (273c <CDCUSB_init+0x14>)
    272e:	4798      	blx	r3
	usb_d_init();
    2730:	4b03      	ldr	r3, [pc, #12]	; (2740 <CDCUSB_init+0x18>)
    2732:	4798      	blx	r3
	CDCUSB_PORT_init();
    2734:	4b03      	ldr	r3, [pc, #12]	; (2744 <CDCUSB_init+0x1c>)
    2736:	4798      	blx	r3
}
    2738:	bf00      	nop
    273a:	bd80      	pop	{r7, pc}
    273c:	000026f5 	.word	0x000026f5
    2740:	00003eb5 	.word	0x00003eb5
    2744:	00002695 	.word	0x00002695

00002748 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2748:	b580      	push	{r7, lr}
    274a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    274c:	4802      	ldr	r0, [pc, #8]	; (2758 <WATCHDOG_CLOCK_init+0x10>)
    274e:	4b03      	ldr	r3, [pc, #12]	; (275c <WATCHDOG_CLOCK_init+0x14>)
    2750:	4798      	blx	r3
}
    2752:	bf00      	nop
    2754:	bd80      	pop	{r7, pc}
    2756:	bf00      	nop
    2758:	40000800 	.word	0x40000800
    275c:	000014b3 	.word	0x000014b3

00002760 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2760:	b580      	push	{r7, lr}
    2762:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2764:	4b03      	ldr	r3, [pc, #12]	; (2774 <WATCHDOG_init+0x14>)
    2766:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2768:	4903      	ldr	r1, [pc, #12]	; (2778 <WATCHDOG_init+0x18>)
    276a:	4804      	ldr	r0, [pc, #16]	; (277c <WATCHDOG_init+0x1c>)
    276c:	4b04      	ldr	r3, [pc, #16]	; (2780 <WATCHDOG_init+0x20>)
    276e:	4798      	blx	r3
}
    2770:	bf00      	nop
    2772:	bd80      	pop	{r7, pc}
    2774:	00002749 	.word	0x00002749
    2778:	40002000 	.word	0x40002000
    277c:	2000ac38 	.word	0x2000ac38
    2780:	00001d01 	.word	0x00001d01

00002784 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2784:	b580      	push	{r7, lr}
    2786:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2788:	4904      	ldr	r1, [pc, #16]	; (279c <CAN_CCU_PORT_init+0x18>)
    278a:	202d      	movs	r0, #45	; 0x2d
    278c:	4b04      	ldr	r3, [pc, #16]	; (27a0 <CAN_CCU_PORT_init+0x1c>)
    278e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2790:	4904      	ldr	r1, [pc, #16]	; (27a4 <CAN_CCU_PORT_init+0x20>)
    2792:	202c      	movs	r0, #44	; 0x2c
    2794:	4b02      	ldr	r3, [pc, #8]	; (27a0 <CAN_CCU_PORT_init+0x1c>)
    2796:	4798      	blx	r3
}
    2798:	bf00      	nop
    279a:	bd80      	pop	{r7, pc}
    279c:	002d0007 	.word	0x002d0007
    27a0:	00001c61 	.word	0x00001c61
    27a4:	002c0007 	.word	0x002c0007

000027a8 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    27a8:	b580      	push	{r7, lr}
    27aa:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    27ac:	4807      	ldr	r0, [pc, #28]	; (27cc <CAN_CCU_init+0x24>)
    27ae:	4b08      	ldr	r3, [pc, #32]	; (27d0 <CAN_CCU_init+0x28>)
    27b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27b2:	2249      	movs	r2, #73	; 0x49
    27b4:	211c      	movs	r1, #28
    27b6:	4807      	ldr	r0, [pc, #28]	; (27d4 <CAN_CCU_init+0x2c>)
    27b8:	4b07      	ldr	r3, [pc, #28]	; (27d8 <CAN_CCU_init+0x30>)
    27ba:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    27bc:	4907      	ldr	r1, [pc, #28]	; (27dc <CAN_CCU_init+0x34>)
    27be:	4808      	ldr	r0, [pc, #32]	; (27e0 <CAN_CCU_init+0x38>)
    27c0:	4b08      	ldr	r3, [pc, #32]	; (27e4 <CAN_CCU_init+0x3c>)
    27c2:	4798      	blx	r3
	CAN_CCU_PORT_init();
    27c4:	4b08      	ldr	r3, [pc, #32]	; (27e8 <CAN_CCU_init+0x40>)
    27c6:	4798      	blx	r3
}
    27c8:	bf00      	nop
    27ca:	bd80      	pop	{r7, pc}
    27cc:	40000800 	.word	0x40000800
    27d0:	00001473 	.word	0x00001473
    27d4:	40001c00 	.word	0x40001c00
    27d8:	0000140d 	.word	0x0000140d
    27dc:	42000400 	.word	0x42000400
    27e0:	2000ab90 	.word	0x2000ab90
    27e4:	00002d01 	.word	0x00002d01
    27e8:	00002785 	.word	0x00002785

000027ec <system_init>:

void system_init(void)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	af00      	add	r7, sp, #0
	init_mcu();
    27f0:	4b5f      	ldr	r3, [pc, #380]	; (2970 <system_init+0x184>)
    27f2:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    27f4:	2100      	movs	r1, #0
    27f6:	2007      	movs	r0, #7
    27f8:	4b5e      	ldr	r3, [pc, #376]	; (2974 <system_init+0x188>)
    27fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    27fc:	2102      	movs	r1, #2
    27fe:	2007      	movs	r0, #7
    2800:	4b5d      	ldr	r3, [pc, #372]	; (2978 <system_init+0x18c>)
    2802:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2804:	f04f 31ff 	mov.w	r1, #4294967295
    2808:	2007      	movs	r0, #7
    280a:	4b5c      	ldr	r3, [pc, #368]	; (297c <system_init+0x190>)
    280c:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    280e:	2101      	movs	r1, #1
    2810:	200f      	movs	r0, #15
    2812:	4b58      	ldr	r3, [pc, #352]	; (2974 <system_init+0x188>)
    2814:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2816:	2102      	movs	r1, #2
    2818:	200f      	movs	r0, #15
    281a:	4b57      	ldr	r3, [pc, #348]	; (2978 <system_init+0x18c>)
    281c:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    281e:	f04f 31ff 	mov.w	r1, #4294967295
    2822:	200f      	movs	r0, #15
    2824:	4b55      	ldr	r3, [pc, #340]	; (297c <system_init+0x190>)
    2826:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2828:	2101      	movs	r1, #1
    282a:	2013      	movs	r0, #19
    282c:	4b51      	ldr	r3, [pc, #324]	; (2974 <system_init+0x188>)
    282e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2830:	2102      	movs	r1, #2
    2832:	2013      	movs	r0, #19
    2834:	4b50      	ldr	r3, [pc, #320]	; (2978 <system_init+0x18c>)
    2836:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2838:	f04f 31ff 	mov.w	r1, #4294967295
    283c:	2013      	movs	r0, #19
    283e:	4b4f      	ldr	r3, [pc, #316]	; (297c <system_init+0x190>)
    2840:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2842:	2101      	movs	r1, #1
    2844:	201b      	movs	r0, #27
    2846:	4b4b      	ldr	r3, [pc, #300]	; (2974 <system_init+0x188>)
    2848:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    284a:	2102      	movs	r1, #2
    284c:	201b      	movs	r0, #27
    284e:	4b4a      	ldr	r3, [pc, #296]	; (2978 <system_init+0x18c>)
    2850:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2852:	f04f 31ff 	mov.w	r1, #4294967295
    2856:	201b      	movs	r0, #27
    2858:	4b48      	ldr	r3, [pc, #288]	; (297c <system_init+0x190>)
    285a:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    285c:	2101      	movs	r1, #1
    285e:	2027      	movs	r0, #39	; 0x27
    2860:	4b44      	ldr	r3, [pc, #272]	; (2974 <system_init+0x188>)
    2862:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2864:	2102      	movs	r1, #2
    2866:	2027      	movs	r0, #39	; 0x27
    2868:	4b43      	ldr	r3, [pc, #268]	; (2978 <system_init+0x18c>)
    286a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    286c:	f04f 31ff 	mov.w	r1, #4294967295
    2870:	2027      	movs	r0, #39	; 0x27
    2872:	4b42      	ldr	r3, [pc, #264]	; (297c <system_init+0x190>)
    2874:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2876:	2101      	movs	r1, #1
    2878:	203d      	movs	r0, #61	; 0x3d
    287a:	4b3e      	ldr	r3, [pc, #248]	; (2974 <system_init+0x188>)
    287c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    287e:	2102      	movs	r1, #2
    2880:	203d      	movs	r0, #61	; 0x3d
    2882:	4b3d      	ldr	r3, [pc, #244]	; (2978 <system_init+0x18c>)
    2884:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2886:	f04f 31ff 	mov.w	r1, #4294967295
    288a:	203d      	movs	r0, #61	; 0x3d
    288c:	4b3b      	ldr	r3, [pc, #236]	; (297c <system_init+0x190>)
    288e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2890:	2101      	movs	r1, #1
    2892:	203f      	movs	r0, #63	; 0x3f
    2894:	4b38      	ldr	r3, [pc, #224]	; (2978 <system_init+0x18c>)
    2896:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2898:	2101      	movs	r1, #1
    289a:	203f      	movs	r0, #63	; 0x3f
    289c:	4b38      	ldr	r3, [pc, #224]	; (2980 <system_init+0x194>)
    289e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    28a0:	f04f 31ff 	mov.w	r1, #4294967295
    28a4:	203f      	movs	r0, #63	; 0x3f
    28a6:	4b35      	ldr	r3, [pc, #212]	; (297c <system_init+0x190>)
    28a8:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    28aa:	2100      	movs	r1, #0
    28ac:	204d      	movs	r0, #77	; 0x4d
    28ae:	4b31      	ldr	r3, [pc, #196]	; (2974 <system_init+0x188>)
    28b0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    28b2:	2102      	movs	r1, #2
    28b4:	204d      	movs	r0, #77	; 0x4d
    28b6:	4b30      	ldr	r3, [pc, #192]	; (2978 <system_init+0x18c>)
    28b8:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    28ba:	f04f 31ff 	mov.w	r1, #4294967295
    28be:	204d      	movs	r0, #77	; 0x4d
    28c0:	4b2e      	ldr	r3, [pc, #184]	; (297c <system_init+0x190>)
    28c2:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    28c4:	2101      	movs	r1, #1
    28c6:	204e      	movs	r0, #78	; 0x4e
    28c8:	4b2a      	ldr	r3, [pc, #168]	; (2974 <system_init+0x188>)
    28ca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    28cc:	2102      	movs	r1, #2
    28ce:	204e      	movs	r0, #78	; 0x4e
    28d0:	4b29      	ldr	r3, [pc, #164]	; (2978 <system_init+0x18c>)
    28d2:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    28d4:	f04f 31ff 	mov.w	r1, #4294967295
    28d8:	204e      	movs	r0, #78	; 0x4e
    28da:	4b28      	ldr	r3, [pc, #160]	; (297c <system_init+0x190>)
    28dc:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    28de:	2100      	movs	r1, #0
    28e0:	204f      	movs	r0, #79	; 0x4f
    28e2:	4b24      	ldr	r3, [pc, #144]	; (2974 <system_init+0x188>)
    28e4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    28e6:	2102      	movs	r1, #2
    28e8:	204f      	movs	r0, #79	; 0x4f
    28ea:	4b23      	ldr	r3, [pc, #140]	; (2978 <system_init+0x18c>)
    28ec:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    28ee:	f04f 31ff 	mov.w	r1, #4294967295
    28f2:	204f      	movs	r0, #79	; 0x4f
    28f4:	4b21      	ldr	r3, [pc, #132]	; (297c <system_init+0x190>)
    28f6:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    28f8:	2100      	movs	r1, #0
    28fa:	2052      	movs	r0, #82	; 0x52
    28fc:	4b1d      	ldr	r3, [pc, #116]	; (2974 <system_init+0x188>)
    28fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2900:	2102      	movs	r1, #2
    2902:	2052      	movs	r0, #82	; 0x52
    2904:	4b1c      	ldr	r3, [pc, #112]	; (2978 <system_init+0x18c>)
    2906:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2908:	f04f 31ff 	mov.w	r1, #4294967295
    290c:	2052      	movs	r0, #82	; 0x52
    290e:	4b1b      	ldr	r3, [pc, #108]	; (297c <system_init+0x190>)
    2910:	4798      	blx	r3

	CRC_CALC_init();
    2912:	4b1c      	ldr	r3, [pc, #112]	; (2984 <system_init+0x198>)
    2914:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2916:	4b1c      	ldr	r3, [pc, #112]	; (2988 <system_init+0x19c>)
    2918:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    291a:	4b1c      	ldr	r3, [pc, #112]	; (298c <system_init+0x1a0>)
    291c:	4798      	blx	r3

	QSPI_N25Q256_init();
    291e:	4b1c      	ldr	r3, [pc, #112]	; (2990 <system_init+0x1a4>)
    2920:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2922:	4b1c      	ldr	r3, [pc, #112]	; (2994 <system_init+0x1a8>)
    2924:	4798      	blx	r3

	I2C_HEATERS_init();
    2926:	4b1c      	ldr	r3, [pc, #112]	; (2998 <system_init+0x1ac>)
    2928:	4798      	blx	r3

	SPI_TEMP_init();
    292a:	4b1c      	ldr	r3, [pc, #112]	; (299c <system_init+0x1b0>)
    292c:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    292e:	4b1c      	ldr	r3, [pc, #112]	; (29a0 <system_init+0x1b4>)
    2930:	4798      	blx	r3

	SPI_HI3593_init();
    2932:	4b1c      	ldr	r3, [pc, #112]	; (29a4 <system_init+0x1b8>)
    2934:	4798      	blx	r3

	I2C_FANS_init();
    2936:	4b1c      	ldr	r3, [pc, #112]	; (29a8 <system_init+0x1bc>)
    2938:	4798      	blx	r3

	TIMER_USB_init();
    293a:	4b1c      	ldr	r3, [pc, #112]	; (29ac <system_init+0x1c0>)
    293c:	4798      	blx	r3
	TIMER_ARINC_init();
    293e:	4b1c      	ldr	r3, [pc, #112]	; (29b0 <system_init+0x1c4>)
    2940:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2942:	4b1c      	ldr	r3, [pc, #112]	; (29b4 <system_init+0x1c8>)
    2944:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2946:	4b1c      	ldr	r3, [pc, #112]	; (29b8 <system_init+0x1cc>)
    2948:	4798      	blx	r3
	TIMER_EVENT_init();
    294a:	4b1c      	ldr	r3, [pc, #112]	; (29bc <system_init+0x1d0>)
    294c:	4798      	blx	r3
	LIVE_PULSE_init();
    294e:	4b1c      	ldr	r3, [pc, #112]	; (29c0 <system_init+0x1d4>)
    2950:	4798      	blx	r3

	TIMER_HVAC_init();
    2952:	4b1c      	ldr	r3, [pc, #112]	; (29c4 <system_init+0x1d8>)
    2954:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2956:	4b1c      	ldr	r3, [pc, #112]	; (29c8 <system_init+0x1dc>)
    2958:	4798      	blx	r3

	TIMER_CCU_init();
    295a:	4b1c      	ldr	r3, [pc, #112]	; (29cc <system_init+0x1e0>)
    295c:	4798      	blx	r3

	CDCUSB_init();
    295e:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <system_init+0x1e4>)
    2960:	4798      	blx	r3

	WATCHDOG_init();
    2962:	4b1c      	ldr	r3, [pc, #112]	; (29d4 <system_init+0x1e8>)
    2964:	4798      	blx	r3
	CAN_CCU_init();
    2966:	4b1c      	ldr	r3, [pc, #112]	; (29d8 <system_init+0x1ec>)
    2968:	4798      	blx	r3
}
    296a:	bf00      	nop
    296c:	bd80      	pop	{r7, pc}
    296e:	bf00      	nop
    2970:	00001cf1 	.word	0x00001cf1
    2974:	00001cb9 	.word	0x00001cb9
    2978:	00001c81 	.word	0x00001c81
    297c:	00001c61 	.word	0x00001c61
    2980:	00001c2d 	.word	0x00001c2d
    2984:	00001d51 	.word	0x00001d51
    2988:	00001d7d 	.word	0x00001d7d
    298c:	00001ea5 	.word	0x00001ea5
    2990:	00001fed 	.word	0x00001fed
    2994:	00002031 	.word	0x00002031
    2998:	000020c1 	.word	0x000020c1
    299c:	0000218d 	.word	0x0000218d
    29a0:	00002225 	.word	0x00002225
    29a4:	000022f1 	.word	0x000022f1
    29a8:	00002389 	.word	0x00002389
    29ac:	000023b5 	.word	0x000023b5
    29b0:	000023fd 	.word	0x000023fd
    29b4:	00002445 	.word	0x00002445
    29b8:	0000248d 	.word	0x0000248d
    29bc:	000024d5 	.word	0x000024d5
    29c0:	00002555 	.word	0x00002555
    29c4:	000025b5 	.word	0x000025b5
    29c8:	0000260d 	.word	0x0000260d
    29cc:	00002665 	.word	0x00002665
    29d0:	00002729 	.word	0x00002729
    29d4:	00002761 	.word	0x00002761
    29d8:	000027a9 	.word	0x000027a9

000029dc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    29dc:	b480      	push	{r7}
    29de:	b085      	sub	sp, #20
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    29e4:	f3ef 8310 	mrs	r3, PRIMASK
    29e8:	60fb      	str	r3, [r7, #12]
  return(result);
    29ea:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    29f0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    29f2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    29f6:	bf00      	nop
    29f8:	3714      	adds	r7, #20
    29fa:	46bd      	mov	sp, r7
    29fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a00:	4770      	bx	lr

00002a02 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    2a02:	b480      	push	{r7}
    2a04:	b085      	sub	sp, #20
    2a06:	af00      	add	r7, sp, #0
    2a08:	6078      	str	r0, [r7, #4]
    2a0a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    2a0e:	687b      	ldr	r3, [r7, #4]
    2a10:	681b      	ldr	r3, [r3, #0]
    2a12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2a14:	68fb      	ldr	r3, [r7, #12]
    2a16:	f383 8810 	msr	PRIMASK, r3
}
    2a1a:	bf00      	nop
    2a1c:	3714      	adds	r7, #20
    2a1e:	46bd      	mov	sp, r7
    2a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a24:	4770      	bx	lr

00002a26 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    2a26:	b480      	push	{r7}
    2a28:	b083      	sub	sp, #12
    2a2a:	af00      	add	r7, sp, #0
    2a2c:	4603      	mov	r3, r0
    2a2e:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    2a30:	88fb      	ldrh	r3, [r7, #6]
    2a32:	f003 0303 	and.w	r3, r3, #3
    2a36:	2b00      	cmp	r3, #0
    2a38:	d001      	beq.n	2a3e <leap_year+0x18>
		return false;
    2a3a:	2300      	movs	r3, #0
    2a3c:	e000      	b.n	2a40 <leap_year+0x1a>
	} else {
		return true;
    2a3e:	2301      	movs	r3, #1
	}
}
    2a40:	4618      	mov	r0, r3
    2a42:	370c      	adds	r7, #12
    2a44:	46bd      	mov	sp, r7
    2a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a4a:	4770      	bx	lr

00002a4c <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b084      	sub	sp, #16
    2a50:	af00      	add	r7, sp, #0
    2a52:	6078      	str	r0, [r7, #4]
    2a54:	460b      	mov	r3, r1
    2a56:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2a58:	2300      	movs	r3, #0
    2a5a:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	b29b      	uxth	r3, r3
    2a60:	4618      	mov	r0, r3
    2a62:	4b2f      	ldr	r3, [pc, #188]	; (2b20 <get_secs_in_month+0xd4>)
    2a64:	4798      	blx	r3
    2a66:	4603      	mov	r3, r0
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d028      	beq.n	2abe <get_secs_in_month+0x72>
		switch (month) {
    2a6c:	78fb      	ldrb	r3, [r7, #3]
    2a6e:	3b01      	subs	r3, #1
    2a70:	2b0b      	cmp	r3, #11
    2a72:	d84c      	bhi.n	2b0e <get_secs_in_month+0xc2>
    2a74:	a201      	add	r2, pc, #4	; (adr r2, 2a7c <get_secs_in_month+0x30>)
    2a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2a7a:	bf00      	nop
    2a7c:	00002aad 	.word	0x00002aad
    2a80:	00002ab3 	.word	0x00002ab3
    2a84:	00002aad 	.word	0x00002aad
    2a88:	00002ab9 	.word	0x00002ab9
    2a8c:	00002aad 	.word	0x00002aad
    2a90:	00002ab9 	.word	0x00002ab9
    2a94:	00002aad 	.word	0x00002aad
    2a98:	00002aad 	.word	0x00002aad
    2a9c:	00002ab9 	.word	0x00002ab9
    2aa0:	00002aad 	.word	0x00002aad
    2aa4:	00002ab9 	.word	0x00002ab9
    2aa8:	00002aad 	.word	0x00002aad
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2aac:	4b1d      	ldr	r3, [pc, #116]	; (2b24 <get_secs_in_month+0xd8>)
    2aae:	60fb      	str	r3, [r7, #12]
			break;
    2ab0:	e030      	b.n	2b14 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2ab2:	4b1d      	ldr	r3, [pc, #116]	; (2b28 <get_secs_in_month+0xdc>)
    2ab4:	60fb      	str	r3, [r7, #12]
			break;
    2ab6:	e02d      	b.n	2b14 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2ab8:	4b1c      	ldr	r3, [pc, #112]	; (2b2c <get_secs_in_month+0xe0>)
    2aba:	60fb      	str	r3, [r7, #12]
			break;
    2abc:	e02a      	b.n	2b14 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    2abe:	78fb      	ldrb	r3, [r7, #3]
    2ac0:	3b01      	subs	r3, #1
    2ac2:	2b0b      	cmp	r3, #11
    2ac4:	d825      	bhi.n	2b12 <get_secs_in_month+0xc6>
    2ac6:	a201      	add	r2, pc, #4	; (adr r2, 2acc <get_secs_in_month+0x80>)
    2ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2acc:	00002afd 	.word	0x00002afd
    2ad0:	00002b03 	.word	0x00002b03
    2ad4:	00002afd 	.word	0x00002afd
    2ad8:	00002b09 	.word	0x00002b09
    2adc:	00002afd 	.word	0x00002afd
    2ae0:	00002b09 	.word	0x00002b09
    2ae4:	00002afd 	.word	0x00002afd
    2ae8:	00002afd 	.word	0x00002afd
    2aec:	00002b09 	.word	0x00002b09
    2af0:	00002afd 	.word	0x00002afd
    2af4:	00002b09 	.word	0x00002b09
    2af8:	00002afd 	.word	0x00002afd
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2afc:	4b09      	ldr	r3, [pc, #36]	; (2b24 <get_secs_in_month+0xd8>)
    2afe:	60fb      	str	r3, [r7, #12]
			break;
    2b00:	e008      	b.n	2b14 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2b02:	4b0b      	ldr	r3, [pc, #44]	; (2b30 <get_secs_in_month+0xe4>)
    2b04:	60fb      	str	r3, [r7, #12]
			break;
    2b06:	e005      	b.n	2b14 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2b08:	4b08      	ldr	r3, [pc, #32]	; (2b2c <get_secs_in_month+0xe0>)
    2b0a:	60fb      	str	r3, [r7, #12]
			break;
    2b0c:	e002      	b.n	2b14 <get_secs_in_month+0xc8>
			break;
    2b0e:	bf00      	nop
    2b10:	e000      	b.n	2b14 <get_secs_in_month+0xc8>
		default:
			break;
    2b12:	bf00      	nop
		}
	}

	return sec_in_month;
    2b14:	68fb      	ldr	r3, [r7, #12]
}
    2b16:	4618      	mov	r0, r3
    2b18:	3710      	adds	r7, #16
    2b1a:	46bd      	mov	sp, r7
    2b1c:	bd80      	pop	{r7, pc}
    2b1e:	bf00      	nop
    2b20:	00002a27 	.word	0x00002a27
    2b24:	0028de80 	.word	0x0028de80
    2b28:	00263b80 	.word	0x00263b80
    2b2c:	00278d00 	.word	0x00278d00
    2b30:	0024ea00 	.word	0x0024ea00

00002b34 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2b34:	b580      	push	{r7, lr}
    2b36:	b08a      	sub	sp, #40	; 0x28
    2b38:	af00      	add	r7, sp, #0
    2b3a:	60f8      	str	r0, [r7, #12]
    2b3c:	60b9      	str	r1, [r7, #8]
    2b3e:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2b40:	68fb      	ldr	r3, [r7, #12]
    2b42:	699b      	ldr	r3, [r3, #24]
    2b44:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2b46:	2301      	movs	r3, #1
    2b48:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2b4a:	2301      	movs	r3, #1
    2b4c:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    2b4e:	2300      	movs	r3, #0
    2b50:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    2b52:	2300      	movs	r3, #0
    2b54:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2b56:	68bb      	ldr	r3, [r7, #8]
    2b58:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2b5a:	6a3b      	ldr	r3, [r7, #32]
    2b5c:	b29b      	uxth	r3, r3
    2b5e:	4618      	mov	r0, r3
    2b60:	4b32      	ldr	r3, [pc, #200]	; (2c2c <convert_timestamp_to_datetime+0xf8>)
    2b62:	4798      	blx	r3
    2b64:	4603      	mov	r3, r0
    2b66:	2b00      	cmp	r3, #0
    2b68:	d001      	beq.n	2b6e <convert_timestamp_to_datetime+0x3a>
    2b6a:	4b31      	ldr	r3, [pc, #196]	; (2c30 <convert_timestamp_to_datetime+0xfc>)
    2b6c:	e000      	b.n	2b70 <convert_timestamp_to_datetime+0x3c>
    2b6e:	4b31      	ldr	r3, [pc, #196]	; (2c34 <convert_timestamp_to_datetime+0x100>)
    2b70:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    2b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b74:	69bb      	ldr	r3, [r7, #24]
    2b76:	429a      	cmp	r2, r3
    2b78:	d307      	bcc.n	2b8a <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b7c:	69bb      	ldr	r3, [r7, #24]
    2b7e:	1ad3      	subs	r3, r2, r3
    2b80:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    2b82:	6a3b      	ldr	r3, [r7, #32]
    2b84:	3301      	adds	r3, #1
    2b86:	623b      	str	r3, [r7, #32]
    2b88:	e7e7      	b.n	2b5a <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2b8a:	7ffb      	ldrb	r3, [r7, #31]
    2b8c:	4619      	mov	r1, r3
    2b8e:	6a38      	ldr	r0, [r7, #32]
    2b90:	4b29      	ldr	r3, [pc, #164]	; (2c38 <convert_timestamp_to_datetime+0x104>)
    2b92:	4798      	blx	r3
    2b94:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b98:	697b      	ldr	r3, [r7, #20]
    2b9a:	429a      	cmp	r2, r3
    2b9c:	d307      	bcc.n	2bae <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    2b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2ba0:	697b      	ldr	r3, [r7, #20]
    2ba2:	1ad3      	subs	r3, r2, r3
    2ba4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2ba6:	7ffb      	ldrb	r3, [r7, #31]
    2ba8:	3301      	adds	r3, #1
    2baa:	77fb      	strb	r3, [r7, #31]
    2bac:	e7ed      	b.n	2b8a <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bb0:	4a22      	ldr	r2, [pc, #136]	; (2c3c <convert_timestamp_to_datetime+0x108>)
    2bb2:	4293      	cmp	r3, r2
    2bb4:	d909      	bls.n	2bca <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bb8:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2bbc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    2bc0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    2bc2:	7fbb      	ldrb	r3, [r7, #30]
    2bc4:	3301      	adds	r3, #1
    2bc6:	77bb      	strb	r3, [r7, #30]
    2bc8:	e7f1      	b.n	2bae <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bcc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    2bd0:	d307      	bcc.n	2be2 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    2bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bd4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2bd8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2bda:	7f7b      	ldrb	r3, [r7, #29]
    2bdc:	3301      	adds	r3, #1
    2bde:	777b      	strb	r3, [r7, #29]
    2be0:	e7f3      	b.n	2bca <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2be4:	2b3b      	cmp	r3, #59	; 0x3b
    2be6:	d906      	bls.n	2bf6 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bea:	3b3c      	subs	r3, #60	; 0x3c
    2bec:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    2bee:	7f3b      	ldrb	r3, [r7, #28]
    2bf0:	3301      	adds	r3, #1
    2bf2:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2bf4:	e7f5      	b.n	2be2 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2bf6:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2bf8:	6a3b      	ldr	r3, [r7, #32]
    2bfa:	b29a      	uxth	r2, r3
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	7ffa      	ldrb	r2, [r7, #31]
    2c04:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	7fba      	ldrb	r2, [r7, #30]
    2c0a:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	7f7a      	ldrb	r2, [r7, #29]
    2c10:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	7f3a      	ldrb	r2, [r7, #28]
    2c16:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    2c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c1a:	b2da      	uxtb	r2, r3
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    2c20:	2300      	movs	r3, #0
}
    2c22:	4618      	mov	r0, r3
    2c24:	3728      	adds	r7, #40	; 0x28
    2c26:	46bd      	mov	sp, r7
    2c28:	bd80      	pop	{r7, pc}
    2c2a:	bf00      	nop
    2c2c:	00002a27 	.word	0x00002a27
    2c30:	01e28500 	.word	0x01e28500
    2c34:	01e13380 	.word	0x01e13380
    2c38:	00002a4d 	.word	0x00002a4d
    2c3c:	0001517f 	.word	0x0001517f

00002c40 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b084      	sub	sp, #16
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    2c48:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    2c4a:	2300      	movs	r3, #0
    2c4c:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	2b00      	cmp	r3, #0
    2c52:	bf14      	ite	ne
    2c54:	2301      	movne	r3, #1
    2c56:	2300      	moveq	r3, #0
    2c58:	b2db      	uxtb	r3, r3
    2c5a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2c5e:	4911      	ldr	r1, [pc, #68]	; (2ca4 <calendar_init+0x64>)
    2c60:	4618      	mov	r0, r3
    2c62:	4b11      	ldr	r3, [pc, #68]	; (2ca8 <calendar_init+0x68>)
    2c64:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	681a      	ldr	r2, [r3, #0]
    2c6a:	683b      	ldr	r3, [r7, #0]
    2c6c:	429a      	cmp	r2, r3
    2c6e:	d101      	bne.n	2c74 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2c70:	2300      	movs	r3, #0
    2c72:	e013      	b.n	2c9c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d002      	beq.n	2c82 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2c7c:	f06f 0311 	mvn.w	r3, #17
    2c80:	e00c      	b.n	2c9c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	683a      	ldr	r2, [r7, #0]
    2c86:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	4618      	mov	r0, r3
    2c8c:	4b07      	ldr	r3, [pc, #28]	; (2cac <calendar_init+0x6c>)
    2c8e:	4798      	blx	r3
    2c90:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2c98:	619a      	str	r2, [r3, #24]

	return ret;
    2c9a:	68fb      	ldr	r3, [r7, #12]
}
    2c9c:	4618      	mov	r0, r3
    2c9e:	3710      	adds	r7, #16
    2ca0:	46bd      	mov	sp, r7
    2ca2:	bd80      	pop	{r7, pc}
    2ca4:	00010ef4 	.word	0x00010ef4
    2ca8:	0000445d 	.word	0x0000445d
    2cac:	00006839 	.word	0x00006839

00002cb0 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2cb0:	b580      	push	{r7, lr}
    2cb2:	b084      	sub	sp, #16
    2cb4:	af00      	add	r7, sp, #0
    2cb6:	6078      	str	r0, [r7, #4]
    2cb8:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	bf14      	ite	ne
    2cc0:	2301      	movne	r3, #1
    2cc2:	2300      	moveq	r3, #0
    2cc4:	b2db      	uxtb	r3, r3
    2cc6:	f240 223b 	movw	r2, #571	; 0x23b
    2cca:	4909      	ldr	r1, [pc, #36]	; (2cf0 <calendar_get_date_time+0x40>)
    2ccc:	4618      	mov	r0, r3
    2cce:	4b09      	ldr	r3, [pc, #36]	; (2cf4 <calendar_get_date_time+0x44>)
    2cd0:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	4618      	mov	r0, r3
    2cd6:	4b08      	ldr	r3, [pc, #32]	; (2cf8 <calendar_get_date_time+0x48>)
    2cd8:	4798      	blx	r3
    2cda:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2cdc:	683a      	ldr	r2, [r7, #0]
    2cde:	68f9      	ldr	r1, [r7, #12]
    2ce0:	6878      	ldr	r0, [r7, #4]
    2ce2:	4b06      	ldr	r3, [pc, #24]	; (2cfc <calendar_get_date_time+0x4c>)
    2ce4:	4798      	blx	r3

	return ERR_NONE;
    2ce6:	2300      	movs	r3, #0
}
    2ce8:	4618      	mov	r0, r3
    2cea:	3710      	adds	r7, #16
    2cec:	46bd      	mov	sp, r7
    2cee:	bd80      	pop	{r7, pc}
    2cf0:	00010ef4 	.word	0x00010ef4
    2cf4:	0000445d 	.word	0x0000445d
    2cf8:	000068f1 	.word	0x000068f1
    2cfc:	00002b35 	.word	0x00002b35

00002d00 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b084      	sub	sp, #16
    2d04:	af00      	add	r7, sp, #0
    2d06:	6078      	str	r0, [r7, #4]
    2d08:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d004      	beq.n	2d1a <can_async_init+0x1a>
    2d10:	683b      	ldr	r3, [r7, #0]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d001      	beq.n	2d1a <can_async_init+0x1a>
    2d16:	2301      	movs	r3, #1
    2d18:	e000      	b.n	2d1c <can_async_init+0x1c>
    2d1a:	2300      	movs	r3, #0
    2d1c:	f003 0301 	and.w	r3, r3, #1
    2d20:	b2db      	uxtb	r3, r3
    2d22:	2241      	movs	r2, #65	; 0x41
    2d24:	490e      	ldr	r1, [pc, #56]	; (2d60 <can_async_init+0x60>)
    2d26:	4618      	mov	r0, r3
    2d28:	4b0e      	ldr	r3, [pc, #56]	; (2d64 <can_async_init+0x64>)
    2d2a:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	6839      	ldr	r1, [r7, #0]
    2d30:	4618      	mov	r0, r3
    2d32:	4b0d      	ldr	r3, [pc, #52]	; (2d68 <can_async_init+0x68>)
    2d34:	4798      	blx	r3
    2d36:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d001      	beq.n	2d42 <can_async_init+0x42>
		return rc;
    2d3e:	68fb      	ldr	r3, [r7, #12]
    2d40:	e009      	b.n	2d56 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2d42:	687b      	ldr	r3, [r7, #4]
    2d44:	4a09      	ldr	r2, [pc, #36]	; (2d6c <can_async_init+0x6c>)
    2d46:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	4a09      	ldr	r2, [pc, #36]	; (2d70 <can_async_init+0x70>)
    2d4c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	4a08      	ldr	r2, [pc, #32]	; (2d74 <can_async_init+0x74>)
    2d52:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2d54:	2300      	movs	r3, #0
}
    2d56:	4618      	mov	r0, r3
    2d58:	3710      	adds	r7, #16
    2d5a:	46bd      	mov	sp, r7
    2d5c:	bd80      	pop	{r7, pc}
    2d5e:	bf00      	nop
    2d60:	00010f10 	.word	0x00010f10
    2d64:	0000445d 	.word	0x0000445d
    2d68:	000049b9 	.word	0x000049b9
    2d6c:	00002d79 	.word	0x00002d79
    2d70:	00002d9d 	.word	0x00002d9d
    2d74:	00002dc1 	.word	0x00002dc1

00002d78 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2d78:	b580      	push	{r7, lr}
    2d7a:	b084      	sub	sp, #16
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2d84:	68fb      	ldr	r3, [r7, #12]
    2d86:	69db      	ldr	r3, [r3, #28]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d003      	beq.n	2d94 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2d8c:	68fb      	ldr	r3, [r7, #12]
    2d8e:	69db      	ldr	r3, [r3, #28]
    2d90:	68f8      	ldr	r0, [r7, #12]
    2d92:	4798      	blx	r3
	}
}
    2d94:	bf00      	nop
    2d96:	3710      	adds	r7, #16
    2d98:	46bd      	mov	sp, r7
    2d9a:	bd80      	pop	{r7, pc}

00002d9c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b084      	sub	sp, #16
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2da8:	68fb      	ldr	r3, [r7, #12]
    2daa:	6a1b      	ldr	r3, [r3, #32]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d003      	beq.n	2db8 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	6a1b      	ldr	r3, [r3, #32]
    2db4:	68f8      	ldr	r0, [r7, #12]
    2db6:	4798      	blx	r3
	}
}
    2db8:	bf00      	nop
    2dba:	3710      	adds	r7, #16
    2dbc:	46bd      	mov	sp, r7
    2dbe:	bd80      	pop	{r7, pc}

00002dc0 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b084      	sub	sp, #16
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	460b      	mov	r3, r1
    2dca:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2dd0:	68fb      	ldr	r3, [r7, #12]
    2dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d005      	beq.n	2de4 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2dd8:	68fb      	ldr	r3, [r7, #12]
    2dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ddc:	78fa      	ldrb	r2, [r7, #3]
    2dde:	4611      	mov	r1, r2
    2de0:	68f8      	ldr	r0, [r7, #12]
    2de2:	4798      	blx	r3
	}
}
    2de4:	bf00      	nop
    2de6:	3710      	adds	r7, #16
    2de8:	46bd      	mov	sp, r7
    2dea:	bd80      	pop	{r7, pc}

00002dec <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2dec:	b580      	push	{r7, lr}
    2dee:	b082      	sub	sp, #8
    2df0:	af00      	add	r7, sp, #0
    2df2:	6078      	str	r0, [r7, #4]
    2df4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d004      	beq.n	2e06 <crc_sync_init+0x1a>
    2dfc:	683b      	ldr	r3, [r7, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d001      	beq.n	2e06 <crc_sync_init+0x1a>
    2e02:	2301      	movs	r3, #1
    2e04:	e000      	b.n	2e08 <crc_sync_init+0x1c>
    2e06:	2300      	movs	r3, #0
    2e08:	f003 0301 	and.w	r3, r3, #1
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	222b      	movs	r2, #43	; 0x2b
    2e10:	4906      	ldr	r1, [pc, #24]	; (2e2c <crc_sync_init+0x40>)
    2e12:	4618      	mov	r0, r3
    2e14:	4b06      	ldr	r3, [pc, #24]	; (2e30 <crc_sync_init+0x44>)
    2e16:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	6839      	ldr	r1, [r7, #0]
    2e1c:	4618      	mov	r0, r3
    2e1e:	4b05      	ldr	r3, [pc, #20]	; (2e34 <crc_sync_init+0x48>)
    2e20:	4798      	blx	r3
    2e22:	4603      	mov	r3, r0
}
    2e24:	4618      	mov	r0, r3
    2e26:	3708      	adds	r7, #8
    2e28:	46bd      	mov	sp, r7
    2e2a:	bd80      	pop	{r7, pc}
    2e2c:	00010f2c 	.word	0x00010f2c
    2e30:	0000445d 	.word	0x0000445d
    2e34:	000050b9 	.word	0x000050b9

00002e38 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2e38:	b590      	push	{r4, r7, lr}
    2e3a:	b083      	sub	sp, #12
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	4603      	mov	r3, r0
    2e40:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2e42:	4b07      	ldr	r3, [pc, #28]	; (2e60 <delay_us+0x28>)
    2e44:	681c      	ldr	r4, [r3, #0]
    2e46:	88fb      	ldrh	r3, [r7, #6]
    2e48:	4618      	mov	r0, r3
    2e4a:	4b06      	ldr	r3, [pc, #24]	; (2e64 <delay_us+0x2c>)
    2e4c:	4798      	blx	r3
    2e4e:	4603      	mov	r3, r0
    2e50:	4619      	mov	r1, r3
    2e52:	4620      	mov	r0, r4
    2e54:	4b04      	ldr	r3, [pc, #16]	; (2e68 <delay_us+0x30>)
    2e56:	4798      	blx	r3
}
    2e58:	bf00      	nop
    2e5a:	370c      	adds	r7, #12
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd90      	pop	{r4, r7, pc}
    2e60:	20000cac 	.word	0x20000cac
    2e64:	00004e0d 	.word	0x00004e0d
    2e68:	00004fa1 	.word	0x00004fa1

00002e6c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2e6c:	b590      	push	{r4, r7, lr}
    2e6e:	b083      	sub	sp, #12
    2e70:	af00      	add	r7, sp, #0
    2e72:	4603      	mov	r3, r0
    2e74:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2e76:	4b07      	ldr	r3, [pc, #28]	; (2e94 <delay_ms+0x28>)
    2e78:	681c      	ldr	r4, [r3, #0]
    2e7a:	88fb      	ldrh	r3, [r7, #6]
    2e7c:	4618      	mov	r0, r3
    2e7e:	4b06      	ldr	r3, [pc, #24]	; (2e98 <delay_ms+0x2c>)
    2e80:	4798      	blx	r3
    2e82:	4603      	mov	r3, r0
    2e84:	4619      	mov	r1, r3
    2e86:	4620      	mov	r0, r4
    2e88:	4b04      	ldr	r3, [pc, #16]	; (2e9c <delay_ms+0x30>)
    2e8a:	4798      	blx	r3
}
    2e8c:	bf00      	nop
    2e8e:	370c      	adds	r7, #12
    2e90:	46bd      	mov	sp, r7
    2e92:	bd90      	pop	{r4, r7, pc}
    2e94:	20000cac 	.word	0x20000cac
    2e98:	00004f79 	.word	0x00004f79
    2e9c:	00004fa1 	.word	0x00004fa1

00002ea0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2ea0:	b580      	push	{r7, lr}
    2ea2:	af00      	add	r7, sp, #0
	return _event_system_init();
    2ea4:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <event_system_init+0x10>)
    2ea6:	4798      	blx	r3
    2ea8:	4603      	mov	r3, r0
}
    2eaa:	4618      	mov	r0, r3
    2eac:	bd80      	pop	{r7, pc}
    2eae:	bf00      	nop
    2eb0:	00005875 	.word	0x00005875

00002eb4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	b082      	sub	sp, #8
    2eb8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2eba:	2300      	movs	r3, #0
    2ebc:	80fb      	strh	r3, [r7, #6]
    2ebe:	e00e      	b.n	2ede <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2ec0:	88fb      	ldrh	r3, [r7, #6]
    2ec2:	4a0c      	ldr	r2, [pc, #48]	; (2ef4 <ext_irq_init+0x40>)
    2ec4:	00db      	lsls	r3, r3, #3
    2ec6:	4413      	add	r3, r2
    2ec8:	f04f 32ff 	mov.w	r2, #4294967295
    2ecc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2ece:	88fb      	ldrh	r3, [r7, #6]
    2ed0:	4a08      	ldr	r2, [pc, #32]	; (2ef4 <ext_irq_init+0x40>)
    2ed2:	2100      	movs	r1, #0
    2ed4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2ed8:	88fb      	ldrh	r3, [r7, #6]
    2eda:	3301      	adds	r3, #1
    2edc:	80fb      	strh	r3, [r7, #6]
    2ede:	88fb      	ldrh	r3, [r7, #6]
    2ee0:	2b08      	cmp	r3, #8
    2ee2:	d9ed      	bls.n	2ec0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2ee4:	4804      	ldr	r0, [pc, #16]	; (2ef8 <ext_irq_init+0x44>)
    2ee6:	4b05      	ldr	r3, [pc, #20]	; (2efc <ext_irq_init+0x48>)
    2ee8:	4798      	blx	r3
    2eea:	4603      	mov	r3, r0
}
    2eec:	4618      	mov	r0, r3
    2eee:	3708      	adds	r7, #8
    2ef0:	46bd      	mov	sp, r7
    2ef2:	bd80      	pop	{r7, pc}
    2ef4:	20000cb0 	.word	0x20000cb0
    2ef8:	00003059 	.word	0x00003059
    2efc:	000053f9 	.word	0x000053f9

00002f00 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b086      	sub	sp, #24
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
    2f08:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2f0a:	2300      	movs	r3, #0
    2f0c:	75fb      	strb	r3, [r7, #23]
    2f0e:	2300      	movs	r3, #0
    2f10:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2f12:	2300      	movs	r3, #0
    2f14:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2f16:	e012      	b.n	2f3e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2f18:	7dfb      	ldrb	r3, [r7, #23]
    2f1a:	4a4d      	ldr	r2, [pc, #308]	; (3050 <ext_irq_register+0x150>)
    2f1c:	00db      	lsls	r3, r3, #3
    2f1e:	4413      	add	r3, r2
    2f20:	685a      	ldr	r2, [r3, #4]
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	429a      	cmp	r2, r3
    2f26:	d107      	bne.n	2f38 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2f28:	7dfb      	ldrb	r3, [r7, #23]
    2f2a:	4949      	ldr	r1, [pc, #292]	; (3050 <ext_irq_register+0x150>)
    2f2c:	683a      	ldr	r2, [r7, #0]
    2f2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2f32:	2301      	movs	r3, #1
    2f34:	757b      	strb	r3, [r7, #21]
			break;
    2f36:	e005      	b.n	2f44 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2f38:	7dfb      	ldrb	r3, [r7, #23]
    2f3a:	3301      	adds	r3, #1
    2f3c:	75fb      	strb	r3, [r7, #23]
    2f3e:	7dfb      	ldrb	r3, [r7, #23]
    2f40:	2b08      	cmp	r3, #8
    2f42:	d9e9      	bls.n	2f18 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2f44:	683b      	ldr	r3, [r7, #0]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d10e      	bne.n	2f68 <ext_irq_register+0x68>
		if (!found) {
    2f4a:	7d7b      	ldrb	r3, [r7, #21]
    2f4c:	f083 0301 	eor.w	r3, r3, #1
    2f50:	b2db      	uxtb	r3, r3
    2f52:	2b00      	cmp	r3, #0
    2f54:	d002      	beq.n	2f5c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2f56:	f06f 030c 	mvn.w	r3, #12
    2f5a:	e074      	b.n	3046 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2f5c:	2100      	movs	r1, #0
    2f5e:	6878      	ldr	r0, [r7, #4]
    2f60:	4b3c      	ldr	r3, [pc, #240]	; (3054 <ext_irq_register+0x154>)
    2f62:	4798      	blx	r3
    2f64:	4603      	mov	r3, r0
    2f66:	e06e      	b.n	3046 <ext_irq_register+0x146>
	}

	if (!found) {
    2f68:	7d7b      	ldrb	r3, [r7, #21]
    2f6a:	f083 0301 	eor.w	r3, r3, #1
    2f6e:	b2db      	uxtb	r3, r3
    2f70:	2b00      	cmp	r3, #0
    2f72:	d05a      	beq.n	302a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2f74:	2300      	movs	r3, #0
    2f76:	75fb      	strb	r3, [r7, #23]
    2f78:	e016      	b.n	2fa8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2f7a:	7dfb      	ldrb	r3, [r7, #23]
    2f7c:	4a34      	ldr	r2, [pc, #208]	; (3050 <ext_irq_register+0x150>)
    2f7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d10d      	bne.n	2fa2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2f86:	7dfb      	ldrb	r3, [r7, #23]
    2f88:	4931      	ldr	r1, [pc, #196]	; (3050 <ext_irq_register+0x150>)
    2f8a:	683a      	ldr	r2, [r7, #0]
    2f8c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2f90:	7dfb      	ldrb	r3, [r7, #23]
    2f92:	4a2f      	ldr	r2, [pc, #188]	; (3050 <ext_irq_register+0x150>)
    2f94:	00db      	lsls	r3, r3, #3
    2f96:	4413      	add	r3, r2
    2f98:	687a      	ldr	r2, [r7, #4]
    2f9a:	605a      	str	r2, [r3, #4]
				found           = true;
    2f9c:	2301      	movs	r3, #1
    2f9e:	757b      	strb	r3, [r7, #21]
				break;
    2fa0:	e005      	b.n	2fae <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2fa2:	7dfb      	ldrb	r3, [r7, #23]
    2fa4:	3301      	adds	r3, #1
    2fa6:	75fb      	strb	r3, [r7, #23]
    2fa8:	7dfb      	ldrb	r3, [r7, #23]
    2faa:	2b08      	cmp	r3, #8
    2fac:	d9e5      	bls.n	2f7a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2fae:	e036      	b.n	301e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2fb0:	7dfb      	ldrb	r3, [r7, #23]
    2fb2:	4a27      	ldr	r2, [pc, #156]	; (3050 <ext_irq_register+0x150>)
    2fb4:	00db      	lsls	r3, r3, #3
    2fb6:	4413      	add	r3, r2
    2fb8:	685a      	ldr	r2, [r3, #4]
    2fba:	7dbb      	ldrb	r3, [r7, #22]
    2fbc:	4924      	ldr	r1, [pc, #144]	; (3050 <ext_irq_register+0x150>)
    2fbe:	00db      	lsls	r3, r3, #3
    2fc0:	440b      	add	r3, r1
    2fc2:	685b      	ldr	r3, [r3, #4]
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d227      	bcs.n	3018 <ext_irq_register+0x118>
    2fc8:	7dbb      	ldrb	r3, [r7, #22]
    2fca:	4a21      	ldr	r2, [pc, #132]	; (3050 <ext_irq_register+0x150>)
    2fcc:	00db      	lsls	r3, r3, #3
    2fce:	4413      	add	r3, r2
    2fd0:	685b      	ldr	r3, [r3, #4]
    2fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
    2fd6:	d01f      	beq.n	3018 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2fd8:	7dbb      	ldrb	r3, [r7, #22]
    2fda:	491d      	ldr	r1, [pc, #116]	; (3050 <ext_irq_register+0x150>)
    2fdc:	f107 020c 	add.w	r2, r7, #12
    2fe0:	00db      	lsls	r3, r3, #3
    2fe2:	440b      	add	r3, r1
    2fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
    2fe8:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2fec:	7dbb      	ldrb	r3, [r7, #22]
    2fee:	7dfa      	ldrb	r2, [r7, #23]
    2ff0:	4817      	ldr	r0, [pc, #92]	; (3050 <ext_irq_register+0x150>)
    2ff2:	4917      	ldr	r1, [pc, #92]	; (3050 <ext_irq_register+0x150>)
    2ff4:	00db      	lsls	r3, r3, #3
    2ff6:	4403      	add	r3, r0
    2ff8:	00d2      	lsls	r2, r2, #3
    2ffa:	440a      	add	r2, r1
    2ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
    3000:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    3004:	7dfb      	ldrb	r3, [r7, #23]
    3006:	4a12      	ldr	r2, [pc, #72]	; (3050 <ext_irq_register+0x150>)
    3008:	00db      	lsls	r3, r3, #3
    300a:	4413      	add	r3, r2
    300c:	f107 020c 	add.w	r2, r7, #12
    3010:	e892 0003 	ldmia.w	r2, {r0, r1}
    3014:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    3018:	7dbb      	ldrb	r3, [r7, #22]
    301a:	3301      	adds	r3, #1
    301c:	75bb      	strb	r3, [r7, #22]
    301e:	7dbb      	ldrb	r3, [r7, #22]
    3020:	2b08      	cmp	r3, #8
    3022:	d802      	bhi.n	302a <ext_irq_register+0x12a>
    3024:	7dfb      	ldrb	r3, [r7, #23]
    3026:	2b08      	cmp	r3, #8
    3028:	d9c2      	bls.n	2fb0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    302a:	7d7b      	ldrb	r3, [r7, #21]
    302c:	f083 0301 	eor.w	r3, r3, #1
    3030:	b2db      	uxtb	r3, r3
    3032:	2b00      	cmp	r3, #0
    3034:	d002      	beq.n	303c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    3036:	f06f 030c 	mvn.w	r3, #12
    303a:	e004      	b.n	3046 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    303c:	2101      	movs	r1, #1
    303e:	6878      	ldr	r0, [r7, #4]
    3040:	4b04      	ldr	r3, [pc, #16]	; (3054 <ext_irq_register+0x154>)
    3042:	4798      	blx	r3
    3044:	4603      	mov	r3, r0
}
    3046:	4618      	mov	r0, r3
    3048:	3718      	adds	r7, #24
    304a:	46bd      	mov	sp, r7
    304c:	bd80      	pop	{r7, pc}
    304e:	bf00      	nop
    3050:	20000cb0 	.word	0x20000cb0
    3054:	0000558d 	.word	0x0000558d

00003058 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    3058:	b580      	push	{r7, lr}
    305a:	b084      	sub	sp, #16
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3060:	2300      	movs	r3, #0
    3062:	73fb      	strb	r3, [r7, #15]
    3064:	2309      	movs	r3, #9
    3066:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    3068:	e02a      	b.n	30c0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    306a:	7bba      	ldrb	r2, [r7, #14]
    306c:	7bfb      	ldrb	r3, [r7, #15]
    306e:	4413      	add	r3, r2
    3070:	105b      	asrs	r3, r3, #1
    3072:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    3074:	7b7b      	ldrb	r3, [r7, #13]
    3076:	2b08      	cmp	r3, #8
    3078:	d827      	bhi.n	30ca <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    307a:	7b7b      	ldrb	r3, [r7, #13]
    307c:	4a16      	ldr	r2, [pc, #88]	; (30d8 <process_ext_irq+0x80>)
    307e:	00db      	lsls	r3, r3, #3
    3080:	4413      	add	r3, r2
    3082:	685a      	ldr	r2, [r3, #4]
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	429a      	cmp	r2, r3
    3088:	d10b      	bne.n	30a2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    308a:	7b7b      	ldrb	r3, [r7, #13]
    308c:	4a12      	ldr	r2, [pc, #72]	; (30d8 <process_ext_irq+0x80>)
    308e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3092:	2b00      	cmp	r3, #0
    3094:	d01b      	beq.n	30ce <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    3096:	7b7b      	ldrb	r3, [r7, #13]
    3098:	4a0f      	ldr	r2, [pc, #60]	; (30d8 <process_ext_irq+0x80>)
    309a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    309e:	4798      	blx	r3
			}
			return;
    30a0:	e015      	b.n	30ce <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    30a2:	7b7b      	ldrb	r3, [r7, #13]
    30a4:	4a0c      	ldr	r2, [pc, #48]	; (30d8 <process_ext_irq+0x80>)
    30a6:	00db      	lsls	r3, r3, #3
    30a8:	4413      	add	r3, r2
    30aa:	685a      	ldr	r2, [r3, #4]
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	429a      	cmp	r2, r3
    30b0:	d203      	bcs.n	30ba <process_ext_irq+0x62>
			lower = middle + 1;
    30b2:	7b7b      	ldrb	r3, [r7, #13]
    30b4:	3301      	adds	r3, #1
    30b6:	73fb      	strb	r3, [r7, #15]
    30b8:	e002      	b.n	30c0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    30ba:	7b7b      	ldrb	r3, [r7, #13]
    30bc:	3b01      	subs	r3, #1
    30be:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    30c0:	7bba      	ldrb	r2, [r7, #14]
    30c2:	7bfb      	ldrb	r3, [r7, #15]
    30c4:	429a      	cmp	r2, r3
    30c6:	d2d0      	bcs.n	306a <process_ext_irq+0x12>
    30c8:	e002      	b.n	30d0 <process_ext_irq+0x78>
			return;
    30ca:	bf00      	nop
    30cc:	e000      	b.n	30d0 <process_ext_irq+0x78>
			return;
    30ce:	bf00      	nop
		}
	}
}
    30d0:	3710      	adds	r7, #16
    30d2:	46bd      	mov	sp, r7
    30d4:	bd80      	pop	{r7, pc}
    30d6:	bf00      	nop
    30d8:	20000cb0 	.word	0x20000cb0

000030dc <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b08a      	sub	sp, #40	; 0x28
    30e0:	af00      	add	r7, sp, #0
    30e2:	60f8      	str	r0, [r7, #12]
    30e4:	60b9      	str	r1, [r7, #8]
    30e6:	4613      	mov	r3, r2
    30e8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    30ea:	68fb      	ldr	r3, [r7, #12]
    30ec:	3b14      	subs	r3, #20
    30ee:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    30f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30f2:	8b9b      	ldrh	r3, [r3, #28]
    30f4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    30f6:	88fb      	ldrh	r3, [r7, #6]
    30f8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    30fa:	f248 0301 	movw	r3, #32769	; 0x8001
    30fe:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    3100:	68bb      	ldr	r3, [r7, #8]
    3102:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3106:	f107 0214 	add.w	r2, r7, #20
    310a:	4611      	mov	r1, r2
    310c:	4618      	mov	r0, r3
    310e:	4b06      	ldr	r3, [pc, #24]	; (3128 <i2c_m_sync_read+0x4c>)
    3110:	4798      	blx	r3
    3112:	6238      	str	r0, [r7, #32]

	if (ret) {
    3114:	6a3b      	ldr	r3, [r7, #32]
    3116:	2b00      	cmp	r3, #0
    3118:	d001      	beq.n	311e <i2c_m_sync_read+0x42>
		return ret;
    311a:	6a3b      	ldr	r3, [r7, #32]
    311c:	e000      	b.n	3120 <i2c_m_sync_read+0x44>
	}

	return n;
    311e:	88fb      	ldrh	r3, [r7, #6]
}
    3120:	4618      	mov	r0, r3
    3122:	3728      	adds	r7, #40	; 0x28
    3124:	46bd      	mov	sp, r7
    3126:	bd80      	pop	{r7, pc}
    3128:	00007541 	.word	0x00007541

0000312c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    312c:	b580      	push	{r7, lr}
    312e:	b08a      	sub	sp, #40	; 0x28
    3130:	af00      	add	r7, sp, #0
    3132:	60f8      	str	r0, [r7, #12]
    3134:	60b9      	str	r1, [r7, #8]
    3136:	4613      	mov	r3, r2
    3138:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    313a:	68fb      	ldr	r3, [r7, #12]
    313c:	3b14      	subs	r3, #20
    313e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3142:	8b9b      	ldrh	r3, [r3, #28]
    3144:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3146:	88fb      	ldrh	r3, [r7, #6]
    3148:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    314a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    314e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    3150:	68bb      	ldr	r3, [r7, #8]
    3152:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3156:	f107 0214 	add.w	r2, r7, #20
    315a:	4611      	mov	r1, r2
    315c:	4618      	mov	r0, r3
    315e:	4b06      	ldr	r3, [pc, #24]	; (3178 <i2c_m_sync_write+0x4c>)
    3160:	4798      	blx	r3
    3162:	6238      	str	r0, [r7, #32]

	if (ret) {
    3164:	6a3b      	ldr	r3, [r7, #32]
    3166:	2b00      	cmp	r3, #0
    3168:	d001      	beq.n	316e <i2c_m_sync_write+0x42>
		return ret;
    316a:	6a3b      	ldr	r3, [r7, #32]
    316c:	e000      	b.n	3170 <i2c_m_sync_write+0x44>
	}

	return n;
    316e:	88fb      	ldrh	r3, [r7, #6]
}
    3170:	4618      	mov	r0, r3
    3172:	3728      	adds	r7, #40	; 0x28
    3174:	46bd      	mov	sp, r7
    3176:	bd80      	pop	{r7, pc}
    3178:	00007541 	.word	0x00007541

0000317c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    317c:	b580      	push	{r7, lr}
    317e:	b084      	sub	sp, #16
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
    3184:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	2b00      	cmp	r3, #0
    318a:	bf14      	ite	ne
    318c:	2301      	movne	r3, #1
    318e:	2300      	moveq	r3, #0
    3190:	b2db      	uxtb	r3, r3
    3192:	225e      	movs	r2, #94	; 0x5e
    3194:	490c      	ldr	r1, [pc, #48]	; (31c8 <i2c_m_sync_init+0x4c>)
    3196:	4618      	mov	r0, r3
    3198:	4b0c      	ldr	r3, [pc, #48]	; (31cc <i2c_m_sync_init+0x50>)
    319a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	6839      	ldr	r1, [r7, #0]
    31a0:	4618      	mov	r0, r3
    31a2:	4b0b      	ldr	r3, [pc, #44]	; (31d0 <i2c_m_sync_init+0x54>)
    31a4:	4798      	blx	r3
    31a6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    31a8:	68fb      	ldr	r3, [r7, #12]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d001      	beq.n	31b2 <i2c_m_sync_init+0x36>
		return init_status;
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	e006      	b.n	31c0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	4a07      	ldr	r2, [pc, #28]	; (31d4 <i2c_m_sync_init+0x58>)
    31b6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	4a07      	ldr	r2, [pc, #28]	; (31d8 <i2c_m_sync_init+0x5c>)
    31bc:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    31be:	2300      	movs	r3, #0
}
    31c0:	4618      	mov	r0, r3
    31c2:	3710      	adds	r7, #16
    31c4:	46bd      	mov	sp, r7
    31c6:	bd80      	pop	{r7, pc}
    31c8:	00010f48 	.word	0x00010f48
    31cc:	0000445d 	.word	0x0000445d
    31d0:	000072e1 	.word	0x000072e1
    31d4:	000030dd 	.word	0x000030dd
    31d8:	0000312d 	.word	0x0000312d

000031dc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	4618      	mov	r0, r3
    31e8:	4b03      	ldr	r3, [pc, #12]	; (31f8 <i2c_m_sync_enable+0x1c>)
    31ea:	4798      	blx	r3
    31ec:	4603      	mov	r3, r0
}
    31ee:	4618      	mov	r0, r3
    31f0:	3708      	adds	r7, #8
    31f2:	46bd      	mov	sp, r7
    31f4:	bd80      	pop	{r7, pc}
    31f6:	bf00      	nop
    31f8:	00007329 	.word	0x00007329

000031fc <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b082      	sub	sp, #8
    3200:	af00      	add	r7, sp, #0
    3202:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	4618      	mov	r0, r3
    3208:	4b03      	ldr	r3, [pc, #12]	; (3218 <i2c_m_sync_disable+0x1c>)
    320a:	4798      	blx	r3
    320c:	4603      	mov	r3, r0
}
    320e:	4618      	mov	r0, r3
    3210:	3708      	adds	r7, #8
    3212:	46bd      	mov	sp, r7
    3214:	bd80      	pop	{r7, pc}
    3216:	bf00      	nop
    3218:	00007369 	.word	0x00007369

0000321c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    321c:	b480      	push	{r7}
    321e:	b085      	sub	sp, #20
    3220:	af00      	add	r7, sp, #0
    3222:	60f8      	str	r0, [r7, #12]
    3224:	460b      	mov	r3, r1
    3226:	607a      	str	r2, [r7, #4]
    3228:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    322a:	897b      	ldrh	r3, [r7, #10]
    322c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3230:	b21a      	sxth	r2, r3
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	b21b      	sxth	r3, r3
    3236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    323a:	b21b      	sxth	r3, r3
    323c:	4313      	orrs	r3, r2
    323e:	b21b      	sxth	r3, r3
    3240:	b29a      	uxth	r2, r3
    3242:	68fb      	ldr	r3, [r7, #12]
    3244:	839a      	strh	r2, [r3, #28]
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	8b9b      	ldrh	r3, [r3, #28]
}
    324a:	4618      	mov	r0, r3
    324c:	3714      	adds	r7, #20
    324e:	46bd      	mov	sp, r7
    3250:	f85d 7b04 	ldr.w	r7, [sp], #4
    3254:	4770      	bx	lr

00003256 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    3256:	b480      	push	{r7}
    3258:	b083      	sub	sp, #12
    325a:	af00      	add	r7, sp, #0
    325c:	6078      	str	r0, [r7, #4]
    325e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	f103 0214 	add.w	r2, r3, #20
    3266:	683b      	ldr	r3, [r7, #0]
    3268:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    326a:	2300      	movs	r3, #0
}
    326c:	4618      	mov	r0, r3
    326e:	370c      	adds	r7, #12
    3270:	46bd      	mov	sp, r7
    3272:	f85d 7b04 	ldr.w	r7, [sp], #4
    3276:	4770      	bx	lr

00003278 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3278:	b580      	push	{r7, lr}
    327a:	b084      	sub	sp, #16
    327c:	af00      	add	r7, sp, #0
    327e:	60f8      	str	r0, [r7, #12]
    3280:	60b9      	str	r1, [r7, #8]
    3282:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3284:	68fb      	ldr	r3, [r7, #12]
    3286:	2b00      	cmp	r3, #0
    3288:	d004      	beq.n	3294 <pwm_init+0x1c>
    328a:	68bb      	ldr	r3, [r7, #8]
    328c:	2b00      	cmp	r3, #0
    328e:	d001      	beq.n	3294 <pwm_init+0x1c>
    3290:	2301      	movs	r3, #1
    3292:	e000      	b.n	3296 <pwm_init+0x1e>
    3294:	2300      	movs	r3, #0
    3296:	f003 0301 	and.w	r3, r3, #1
    329a:	b2db      	uxtb	r3, r3
    329c:	2233      	movs	r2, #51	; 0x33
    329e:	490a      	ldr	r1, [pc, #40]	; (32c8 <pwm_init+0x50>)
    32a0:	4618      	mov	r0, r3
    32a2:	4b0a      	ldr	r3, [pc, #40]	; (32cc <pwm_init+0x54>)
    32a4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    32a6:	68fb      	ldr	r3, [r7, #12]
    32a8:	68b9      	ldr	r1, [r7, #8]
    32aa:	4618      	mov	r0, r3
    32ac:	4b08      	ldr	r3, [pc, #32]	; (32d0 <pwm_init+0x58>)
    32ae:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    32b0:	68fb      	ldr	r3, [r7, #12]
    32b2:	4a08      	ldr	r2, [pc, #32]	; (32d4 <pwm_init+0x5c>)
    32b4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    32b6:	68fb      	ldr	r3, [r7, #12]
    32b8:	4a07      	ldr	r2, [pc, #28]	; (32d8 <pwm_init+0x60>)
    32ba:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    32bc:	2300      	movs	r3, #0
}
    32be:	4618      	mov	r0, r3
    32c0:	3710      	adds	r7, #16
    32c2:	46bd      	mov	sp, r7
    32c4:	bd80      	pop	{r7, pc}
    32c6:	bf00      	nop
    32c8:	00010f64 	.word	0x00010f64
    32cc:	0000445d 	.word	0x0000445d
    32d0:	00008b01 	.word	0x00008b01
    32d4:	00003331 	.word	0x00003331
    32d8:	00003355 	.word	0x00003355

000032dc <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b082      	sub	sp, #8
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	2b00      	cmp	r3, #0
    32e8:	bf14      	ite	ne
    32ea:	2301      	movne	r3, #1
    32ec:	2300      	moveq	r3, #0
    32ee:	b2db      	uxtb	r3, r3
    32f0:	224a      	movs	r2, #74	; 0x4a
    32f2:	490b      	ldr	r1, [pc, #44]	; (3320 <pwm_enable+0x44>)
    32f4:	4618      	mov	r0, r3
    32f6:	4b0b      	ldr	r3, [pc, #44]	; (3324 <pwm_enable+0x48>)
    32f8:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	4618      	mov	r0, r3
    32fe:	4b0a      	ldr	r3, [pc, #40]	; (3328 <pwm_enable+0x4c>)
    3300:	4798      	blx	r3
    3302:	4603      	mov	r3, r0
    3304:	2b00      	cmp	r3, #0
    3306:	d002      	beq.n	330e <pwm_enable+0x32>
		return ERR_DENIED;
    3308:	f06f 0310 	mvn.w	r3, #16
    330c:	e004      	b.n	3318 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	4618      	mov	r0, r3
    3312:	4b06      	ldr	r3, [pc, #24]	; (332c <pwm_enable+0x50>)
    3314:	4798      	blx	r3

	return ERR_NONE;
    3316:	2300      	movs	r3, #0
}
    3318:	4618      	mov	r0, r3
    331a:	3708      	adds	r7, #8
    331c:	46bd      	mov	sp, r7
    331e:	bd80      	pop	{r7, pc}
    3320:	00010f64 	.word	0x00010f64
    3324:	0000445d 	.word	0x0000445d
    3328:	00008ef1 	.word	0x00008ef1
    332c:	00008dad 	.word	0x00008dad

00003330 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3330:	b580      	push	{r7, lr}
    3332:	b084      	sub	sp, #16
    3334:	af00      	add	r7, sp, #0
    3336:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    333c:	68fb      	ldr	r3, [r7, #12]
    333e:	695b      	ldr	r3, [r3, #20]
    3340:	2b00      	cmp	r3, #0
    3342:	d003      	beq.n	334c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    3344:	68fb      	ldr	r3, [r7, #12]
    3346:	695b      	ldr	r3, [r3, #20]
    3348:	68f8      	ldr	r0, [r7, #12]
    334a:	4798      	blx	r3
	}
}
    334c:	bf00      	nop
    334e:	3710      	adds	r7, #16
    3350:	46bd      	mov	sp, r7
    3352:	bd80      	pop	{r7, pc}

00003354 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3360:	68fb      	ldr	r3, [r7, #12]
    3362:	699b      	ldr	r3, [r3, #24]
    3364:	2b00      	cmp	r3, #0
    3366:	d003      	beq.n	3370 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3368:	68fb      	ldr	r3, [r7, #12]
    336a:	699b      	ldr	r3, [r3, #24]
    336c:	68f8      	ldr	r0, [r7, #12]
    336e:	4798      	blx	r3
	}
}
    3370:	bf00      	nop
    3372:	3710      	adds	r7, #16
    3374:	46bd      	mov	sp, r7
    3376:	bd80      	pop	{r7, pc}

00003378 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3378:	b580      	push	{r7, lr}
    337a:	b082      	sub	sp, #8
    337c:	af00      	add	r7, sp, #0
    337e:	6078      	str	r0, [r7, #4]
    3380:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	2b00      	cmp	r3, #0
    3386:	d004      	beq.n	3392 <qspi_sync_init+0x1a>
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	2b00      	cmp	r3, #0
    338c:	d001      	beq.n	3392 <qspi_sync_init+0x1a>
    338e:	2301      	movs	r3, #1
    3390:	e000      	b.n	3394 <qspi_sync_init+0x1c>
    3392:	2300      	movs	r3, #0
    3394:	f003 0301 	and.w	r3, r3, #1
    3398:	b2db      	uxtb	r3, r3
    339a:	2231      	movs	r2, #49	; 0x31
    339c:	4906      	ldr	r1, [pc, #24]	; (33b8 <qspi_sync_init+0x40>)
    339e:	4618      	mov	r0, r3
    33a0:	4b06      	ldr	r3, [pc, #24]	; (33bc <qspi_sync_init+0x44>)
    33a2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	6839      	ldr	r1, [r7, #0]
    33a8:	4618      	mov	r0, r3
    33aa:	4b05      	ldr	r3, [pc, #20]	; (33c0 <qspi_sync_init+0x48>)
    33ac:	4798      	blx	r3
    33ae:	4603      	mov	r3, r0
}
    33b0:	4618      	mov	r0, r3
    33b2:	3708      	adds	r7, #8
    33b4:	46bd      	mov	sp, r7
    33b6:	bd80      	pop	{r7, pc}
    33b8:	00010f7c 	.word	0x00010f7c
    33bc:	0000445d 	.word	0x0000445d
    33c0:	00006455 	.word	0x00006455

000033c4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	2b00      	cmp	r3, #0
    33d0:	bf14      	ite	ne
    33d2:	2301      	movne	r3, #1
    33d4:	2300      	moveq	r3, #0
    33d6:	b2db      	uxtb	r3, r3
    33d8:	223f      	movs	r2, #63	; 0x3f
    33da:	4906      	ldr	r1, [pc, #24]	; (33f4 <qspi_sync_enable+0x30>)
    33dc:	4618      	mov	r0, r3
    33de:	4b06      	ldr	r3, [pc, #24]	; (33f8 <qspi_sync_enable+0x34>)
    33e0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	4618      	mov	r0, r3
    33e6:	4b05      	ldr	r3, [pc, #20]	; (33fc <qspi_sync_enable+0x38>)
    33e8:	4798      	blx	r3
    33ea:	4603      	mov	r3, r0
}
    33ec:	4618      	mov	r0, r3
    33ee:	3708      	adds	r7, #8
    33f0:	46bd      	mov	sp, r7
    33f2:	bd80      	pop	{r7, pc}
    33f4:	00010f7c 	.word	0x00010f7c
    33f8:	0000445d 	.word	0x0000445d
    33fc:	000064c9 	.word	0x000064c9

00003400 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	2b00      	cmp	r3, #0
    340c:	bf14      	ite	ne
    340e:	2301      	movne	r3, #1
    3410:	2300      	moveq	r3, #0
    3412:	b2db      	uxtb	r3, r3
    3414:	2246      	movs	r2, #70	; 0x46
    3416:	4906      	ldr	r1, [pc, #24]	; (3430 <qspi_sync_disable+0x30>)
    3418:	4618      	mov	r0, r3
    341a:	4b06      	ldr	r3, [pc, #24]	; (3434 <qspi_sync_disable+0x34>)
    341c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	4618      	mov	r0, r3
    3422:	4b05      	ldr	r3, [pc, #20]	; (3438 <qspi_sync_disable+0x38>)
    3424:	4798      	blx	r3
    3426:	4603      	mov	r3, r0
}
    3428:	4618      	mov	r0, r3
    342a:	3708      	adds	r7, #8
    342c:	46bd      	mov	sp, r7
    342e:	bd80      	pop	{r7, pc}
    3430:	00010f7c 	.word	0x00010f7c
    3434:	0000445d 	.word	0x0000445d
    3438:	000064ed 	.word	0x000064ed

0000343c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    343c:	b580      	push	{r7, lr}
    343e:	b082      	sub	sp, #8
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
    3444:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	2b00      	cmp	r3, #0
    344a:	d004      	beq.n	3456 <qspi_sync_serial_run_command+0x1a>
    344c:	683b      	ldr	r3, [r7, #0]
    344e:	2b00      	cmp	r3, #0
    3450:	d001      	beq.n	3456 <qspi_sync_serial_run_command+0x1a>
    3452:	2301      	movs	r3, #1
    3454:	e000      	b.n	3458 <qspi_sync_serial_run_command+0x1c>
    3456:	2300      	movs	r3, #0
    3458:	f003 0301 	and.w	r3, r3, #1
    345c:	b2db      	uxtb	r3, r3
    345e:	224d      	movs	r2, #77	; 0x4d
    3460:	4906      	ldr	r1, [pc, #24]	; (347c <qspi_sync_serial_run_command+0x40>)
    3462:	4618      	mov	r0, r3
    3464:	4b06      	ldr	r3, [pc, #24]	; (3480 <qspi_sync_serial_run_command+0x44>)
    3466:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	6839      	ldr	r1, [r7, #0]
    346c:	4618      	mov	r0, r3
    346e:	4b05      	ldr	r3, [pc, #20]	; (3484 <qspi_sync_serial_run_command+0x48>)
    3470:	4798      	blx	r3
    3472:	4603      	mov	r3, r0
}
    3474:	4618      	mov	r0, r3
    3476:	3708      	adds	r7, #8
    3478:	46bd      	mov	sp, r7
    347a:	bd80      	pop	{r7, pc}
    347c:	00010f7c 	.word	0x00010f7c
    3480:	0000445d 	.word	0x0000445d
    3484:	00006639 	.word	0x00006639

00003488 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3488:	b580      	push	{r7, lr}
    348a:	b084      	sub	sp, #16
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
    3490:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3492:	2300      	movs	r3, #0
    3494:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	2b00      	cmp	r3, #0
    349a:	d004      	beq.n	34a6 <spi_m_sync_init+0x1e>
    349c:	683b      	ldr	r3, [r7, #0]
    349e:	2b00      	cmp	r3, #0
    34a0:	d001      	beq.n	34a6 <spi_m_sync_init+0x1e>
    34a2:	2301      	movs	r3, #1
    34a4:	e000      	b.n	34a8 <spi_m_sync_init+0x20>
    34a6:	2300      	movs	r3, #0
    34a8:	f003 0301 	and.w	r3, r3, #1
    34ac:	b2db      	uxtb	r3, r3
    34ae:	2240      	movs	r2, #64	; 0x40
    34b0:	4910      	ldr	r1, [pc, #64]	; (34f4 <spi_m_sync_init+0x6c>)
    34b2:	4618      	mov	r0, r3
    34b4:	4b10      	ldr	r3, [pc, #64]	; (34f8 <spi_m_sync_init+0x70>)
    34b6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	683a      	ldr	r2, [r7, #0]
    34bc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	3304      	adds	r3, #4
    34c2:	6839      	ldr	r1, [r7, #0]
    34c4:	4618      	mov	r0, r3
    34c6:	4b0d      	ldr	r3, [pc, #52]	; (34fc <spi_m_sync_init+0x74>)
    34c8:	4798      	blx	r3
    34ca:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	2b00      	cmp	r3, #0
    34d0:	da01      	bge.n	34d6 <spi_m_sync_init+0x4e>
		return rc;
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	e00a      	b.n	34ec <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    34d6:	687b      	ldr	r3, [r7, #4]
    34d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    34dc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	4a07      	ldr	r2, [pc, #28]	; (3500 <spi_m_sync_init+0x78>)
    34e2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	4a07      	ldr	r2, [pc, #28]	; (3504 <spi_m_sync_init+0x7c>)
    34e8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    34ea:	2300      	movs	r3, #0
}
    34ec:	4618      	mov	r0, r3
    34ee:	3710      	adds	r7, #16
    34f0:	46bd      	mov	sp, r7
    34f2:	bd80      	pop	{r7, pc}
    34f4:	00010f98 	.word	0x00010f98
    34f8:	0000445d 	.word	0x0000445d
    34fc:	000079d5 	.word	0x000079d5
    3500:	00003509 	.word	0x00003509
    3504:	00003561 	.word	0x00003561

00003508 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3508:	b580      	push	{r7, lr}
    350a:	b088      	sub	sp, #32
    350c:	af00      	add	r7, sp, #0
    350e:	60f8      	str	r0, [r7, #12]
    3510:	60b9      	str	r1, [r7, #8]
    3512:	4613      	mov	r3, r2
    3514:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3516:	68fb      	ldr	r3, [r7, #12]
    3518:	2b00      	cmp	r3, #0
    351a:	bf14      	ite	ne
    351c:	2301      	movne	r3, #1
    351e:	2300      	moveq	r3, #0
    3520:	b2db      	uxtb	r3, r3
    3522:	2287      	movs	r2, #135	; 0x87
    3524:	490b      	ldr	r1, [pc, #44]	; (3554 <_spi_m_sync_io_read+0x4c>)
    3526:	4618      	mov	r0, r3
    3528:	4b0b      	ldr	r3, [pc, #44]	; (3558 <_spi_m_sync_io_read+0x50>)
    352a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    352c:	68fb      	ldr	r3, [r7, #12]
    352e:	3b0c      	subs	r3, #12
    3530:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3532:	68bb      	ldr	r3, [r7, #8]
    3534:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3536:	2300      	movs	r3, #0
    3538:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    353a:	88fb      	ldrh	r3, [r7, #6]
    353c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    353e:	f107 0310 	add.w	r3, r7, #16
    3542:	4619      	mov	r1, r3
    3544:	69f8      	ldr	r0, [r7, #28]
    3546:	4b05      	ldr	r3, [pc, #20]	; (355c <_spi_m_sync_io_read+0x54>)
    3548:	4798      	blx	r3
    354a:	4603      	mov	r3, r0
}
    354c:	4618      	mov	r0, r3
    354e:	3720      	adds	r7, #32
    3550:	46bd      	mov	sp, r7
    3552:	bd80      	pop	{r7, pc}
    3554:	00010f98 	.word	0x00010f98
    3558:	0000445d 	.word	0x0000445d
    355c:	000035b9 	.word	0x000035b9

00003560 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3560:	b580      	push	{r7, lr}
    3562:	b088      	sub	sp, #32
    3564:	af00      	add	r7, sp, #0
    3566:	60f8      	str	r0, [r7, #12]
    3568:	60b9      	str	r1, [r7, #8]
    356a:	4613      	mov	r3, r2
    356c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    356e:	68fb      	ldr	r3, [r7, #12]
    3570:	2b00      	cmp	r3, #0
    3572:	bf14      	ite	ne
    3574:	2301      	movne	r3, #1
    3576:	2300      	moveq	r3, #0
    3578:	b2db      	uxtb	r3, r3
    357a:	22a3      	movs	r2, #163	; 0xa3
    357c:	490b      	ldr	r1, [pc, #44]	; (35ac <_spi_m_sync_io_write+0x4c>)
    357e:	4618      	mov	r0, r3
    3580:	4b0b      	ldr	r3, [pc, #44]	; (35b0 <_spi_m_sync_io_write+0x50>)
    3582:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3584:	68fb      	ldr	r3, [r7, #12]
    3586:	3b0c      	subs	r3, #12
    3588:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    358a:	2300      	movs	r3, #0
    358c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    358e:	68bb      	ldr	r3, [r7, #8]
    3590:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3592:	88fb      	ldrh	r3, [r7, #6]
    3594:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3596:	f107 0310 	add.w	r3, r7, #16
    359a:	4619      	mov	r1, r3
    359c:	69f8      	ldr	r0, [r7, #28]
    359e:	4b05      	ldr	r3, [pc, #20]	; (35b4 <_spi_m_sync_io_write+0x54>)
    35a0:	4798      	blx	r3
    35a2:	4603      	mov	r3, r0
}
    35a4:	4618      	mov	r0, r3
    35a6:	3720      	adds	r7, #32
    35a8:	46bd      	mov	sp, r7
    35aa:	bd80      	pop	{r7, pc}
    35ac:	00010f98 	.word	0x00010f98
    35b0:	0000445d 	.word	0x0000445d
    35b4:	000035b9 	.word	0x000035b9

000035b8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    35b8:	b580      	push	{r7, lr}
    35ba:	b086      	sub	sp, #24
    35bc:	af00      	add	r7, sp, #0
    35be:	6078      	str	r0, [r7, #4]
    35c0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d004      	beq.n	35d2 <spi_m_sync_transfer+0x1a>
    35c8:	683b      	ldr	r3, [r7, #0]
    35ca:	2b00      	cmp	r3, #0
    35cc:	d001      	beq.n	35d2 <spi_m_sync_transfer+0x1a>
    35ce:	2301      	movs	r3, #1
    35d0:	e000      	b.n	35d4 <spi_m_sync_transfer+0x1c>
    35d2:	2300      	movs	r3, #0
    35d4:	f003 0301 	and.w	r3, r3, #1
    35d8:	b2db      	uxtb	r3, r3
    35da:	22b3      	movs	r2, #179	; 0xb3
    35dc:	490c      	ldr	r1, [pc, #48]	; (3610 <spi_m_sync_transfer+0x58>)
    35de:	4618      	mov	r0, r3
    35e0:	4b0c      	ldr	r3, [pc, #48]	; (3614 <spi_m_sync_transfer+0x5c>)
    35e2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    35e4:	683b      	ldr	r3, [r7, #0]
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    35ea:	683b      	ldr	r3, [r7, #0]
    35ec:	685b      	ldr	r3, [r3, #4]
    35ee:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    35f0:	683b      	ldr	r3, [r7, #0]
    35f2:	689b      	ldr	r3, [r3, #8]
    35f4:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	3304      	adds	r3, #4
    35fa:	f107 020c 	add.w	r2, r7, #12
    35fe:	4611      	mov	r1, r2
    3600:	4618      	mov	r0, r3
    3602:	4b05      	ldr	r3, [pc, #20]	; (3618 <spi_m_sync_transfer+0x60>)
    3604:	4798      	blx	r3
    3606:	4603      	mov	r3, r0
}
    3608:	4618      	mov	r0, r3
    360a:	3718      	adds	r7, #24
    360c:	46bd      	mov	sp, r7
    360e:	bd80      	pop	{r7, pc}
    3610:	00010f98 	.word	0x00010f98
    3614:	0000445d 	.word	0x0000445d
    3618:	00007c35 	.word	0x00007c35

0000361c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    361c:	b480      	push	{r7}
    361e:	b083      	sub	sp, #12
    3620:	af00      	add	r7, sp, #0
    3622:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	681b      	ldr	r3, [r3, #0]
}
    3628:	4618      	mov	r0, r3
    362a:	370c      	adds	r7, #12
    362c:	46bd      	mov	sp, r7
    362e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3632:	4770      	bx	lr

00003634 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3634:	b480      	push	{r7}
    3636:	b083      	sub	sp, #12
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	2b00      	cmp	r3, #0
    3640:	d002      	beq.n	3648 <list_get_next_element+0x14>
    3642:	687b      	ldr	r3, [r7, #4]
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	e000      	b.n	364a <list_get_next_element+0x16>
    3648:	2300      	movs	r3, #0
}
    364a:	4618      	mov	r0, r3
    364c:	370c      	adds	r7, #12
    364e:	46bd      	mov	sp, r7
    3650:	f85d 7b04 	ldr.w	r7, [sp], #4
    3654:	4770      	bx	lr
	...

00003658 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3658:	b580      	push	{r7, lr}
    365a:	b084      	sub	sp, #16
    365c:	af00      	add	r7, sp, #0
    365e:	60f8      	str	r0, [r7, #12]
    3660:	60b9      	str	r1, [r7, #8]
    3662:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3664:	68fb      	ldr	r3, [r7, #12]
    3666:	2b00      	cmp	r3, #0
    3668:	d007      	beq.n	367a <timer_init+0x22>
    366a:	68bb      	ldr	r3, [r7, #8]
    366c:	2b00      	cmp	r3, #0
    366e:	d004      	beq.n	367a <timer_init+0x22>
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	2b00      	cmp	r3, #0
    3674:	d001      	beq.n	367a <timer_init+0x22>
    3676:	2301      	movs	r3, #1
    3678:	e000      	b.n	367c <timer_init+0x24>
    367a:	2300      	movs	r3, #0
    367c:	f003 0301 	and.w	r3, r3, #1
    3680:	b2db      	uxtb	r3, r3
    3682:	223b      	movs	r2, #59	; 0x3b
    3684:	490c      	ldr	r1, [pc, #48]	; (36b8 <timer_init+0x60>)
    3686:	4618      	mov	r0, r3
    3688:	4b0c      	ldr	r3, [pc, #48]	; (36bc <timer_init+0x64>)
    368a:	4798      	blx	r3
	descr->func = func;
    368c:	68fb      	ldr	r3, [r7, #12]
    368e:	687a      	ldr	r2, [r7, #4]
    3690:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3692:	68fb      	ldr	r3, [r7, #12]
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	68fa      	ldr	r2, [r7, #12]
    369a:	3204      	adds	r2, #4
    369c:	68b9      	ldr	r1, [r7, #8]
    369e:	4610      	mov	r0, r2
    36a0:	4798      	blx	r3
	descr->time                           = 0;
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	2200      	movs	r2, #0
    36a6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    36a8:	68fb      	ldr	r3, [r7, #12]
    36aa:	4a05      	ldr	r2, [pc, #20]	; (36c0 <timer_init+0x68>)
    36ac:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    36ae:	2300      	movs	r3, #0
}
    36b0:	4618      	mov	r0, r3
    36b2:	3710      	adds	r7, #16
    36b4:	46bd      	mov	sp, r7
    36b6:	bd80      	pop	{r7, pc}
    36b8:	00010fb4 	.word	0x00010fb4
    36bc:	0000445d 	.word	0x0000445d
    36c0:	00003a49 	.word	0x00003a49

000036c4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    36c4:	b580      	push	{r7, lr}
    36c6:	b082      	sub	sp, #8
    36c8:	af00      	add	r7, sp, #0
    36ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d005      	beq.n	36de <timer_start+0x1a>
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	681b      	ldr	r3, [r3, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d001      	beq.n	36de <timer_start+0x1a>
    36da:	2301      	movs	r3, #1
    36dc:	e000      	b.n	36e0 <timer_start+0x1c>
    36de:	2300      	movs	r3, #0
    36e0:	f003 0301 	and.w	r3, r3, #1
    36e4:	b2db      	uxtb	r3, r3
    36e6:	2254      	movs	r2, #84	; 0x54
    36e8:	490e      	ldr	r1, [pc, #56]	; (3724 <timer_start+0x60>)
    36ea:	4618      	mov	r0, r3
    36ec:	4b0e      	ldr	r3, [pc, #56]	; (3728 <timer_start+0x64>)
    36ee:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	681b      	ldr	r3, [r3, #0]
    36f4:	699b      	ldr	r3, [r3, #24]
    36f6:	687a      	ldr	r2, [r7, #4]
    36f8:	3204      	adds	r2, #4
    36fa:	4610      	mov	r0, r2
    36fc:	4798      	blx	r3
    36fe:	4603      	mov	r3, r0
    3700:	2b00      	cmp	r3, #0
    3702:	d002      	beq.n	370a <timer_start+0x46>
		return ERR_DENIED;
    3704:	f06f 0310 	mvn.w	r3, #16
    3708:	e007      	b.n	371a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	689b      	ldr	r3, [r3, #8]
    3710:	687a      	ldr	r2, [r7, #4]
    3712:	3204      	adds	r2, #4
    3714:	4610      	mov	r0, r2
    3716:	4798      	blx	r3

	return ERR_NONE;
    3718:	2300      	movs	r3, #0
}
    371a:	4618      	mov	r0, r3
    371c:	3708      	adds	r7, #8
    371e:	46bd      	mov	sp, r7
    3720:	bd80      	pop	{r7, pc}
    3722:	bf00      	nop
    3724:	00010fb4 	.word	0x00010fb4
    3728:	0000445d 	.word	0x0000445d

0000372c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    372c:	b580      	push	{r7, lr}
    372e:	b082      	sub	sp, #8
    3730:	af00      	add	r7, sp, #0
    3732:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	2b00      	cmp	r3, #0
    3738:	d005      	beq.n	3746 <timer_stop+0x1a>
    373a:	687b      	ldr	r3, [r7, #4]
    373c:	681b      	ldr	r3, [r3, #0]
    373e:	2b00      	cmp	r3, #0
    3740:	d001      	beq.n	3746 <timer_stop+0x1a>
    3742:	2301      	movs	r3, #1
    3744:	e000      	b.n	3748 <timer_stop+0x1c>
    3746:	2300      	movs	r3, #0
    3748:	f003 0301 	and.w	r3, r3, #1
    374c:	b2db      	uxtb	r3, r3
    374e:	2262      	movs	r2, #98	; 0x62
    3750:	490f      	ldr	r1, [pc, #60]	; (3790 <timer_stop+0x64>)
    3752:	4618      	mov	r0, r3
    3754:	4b0f      	ldr	r3, [pc, #60]	; (3794 <timer_stop+0x68>)
    3756:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	699b      	ldr	r3, [r3, #24]
    375e:	687a      	ldr	r2, [r7, #4]
    3760:	3204      	adds	r2, #4
    3762:	4610      	mov	r0, r2
    3764:	4798      	blx	r3
    3766:	4603      	mov	r3, r0
    3768:	f083 0301 	eor.w	r3, r3, #1
    376c:	b2db      	uxtb	r3, r3
    376e:	2b00      	cmp	r3, #0
    3770:	d002      	beq.n	3778 <timer_stop+0x4c>
		return ERR_DENIED;
    3772:	f06f 0310 	mvn.w	r3, #16
    3776:	e007      	b.n	3788 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	681b      	ldr	r3, [r3, #0]
    377c:	68db      	ldr	r3, [r3, #12]
    377e:	687a      	ldr	r2, [r7, #4]
    3780:	3204      	adds	r2, #4
    3782:	4610      	mov	r0, r2
    3784:	4798      	blx	r3

	return ERR_NONE;
    3786:	2300      	movs	r3, #0
}
    3788:	4618      	mov	r0, r3
    378a:	3708      	adds	r7, #8
    378c:	46bd      	mov	sp, r7
    378e:	bd80      	pop	{r7, pc}
    3790:	00010fb4 	.word	0x00010fb4
    3794:	0000445d 	.word	0x0000445d

00003798 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3798:	b580      	push	{r7, lr}
    379a:	b084      	sub	sp, #16
    379c:	af00      	add	r7, sp, #0
    379e:	6078      	str	r0, [r7, #4]
    37a0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d008      	beq.n	37ba <timer_add_task+0x22>
    37a8:	683b      	ldr	r3, [r7, #0]
    37aa:	2b00      	cmp	r3, #0
    37ac:	d005      	beq.n	37ba <timer_add_task+0x22>
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d001      	beq.n	37ba <timer_add_task+0x22>
    37b6:	2301      	movs	r3, #1
    37b8:	e000      	b.n	37bc <timer_add_task+0x24>
    37ba:	2300      	movs	r3, #0
    37bc:	f003 0301 	and.w	r3, r3, #1
    37c0:	b2db      	uxtb	r3, r3
    37c2:	227b      	movs	r2, #123	; 0x7b
    37c4:	492f      	ldr	r1, [pc, #188]	; (3884 <timer_add_task+0xec>)
    37c6:	4618      	mov	r0, r3
    37c8:	4b2f      	ldr	r3, [pc, #188]	; (3888 <timer_add_task+0xf0>)
    37ca:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	7f1b      	ldrb	r3, [r3, #28]
    37d0:	b2db      	uxtb	r3, r3
    37d2:	f043 0301 	orr.w	r3, r3, #1
    37d6:	b2da      	uxtb	r2, r3
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    37dc:	687b      	ldr	r3, [r7, #4]
    37de:	3318      	adds	r3, #24
    37e0:	6839      	ldr	r1, [r7, #0]
    37e2:	4618      	mov	r0, r3
    37e4:	4b29      	ldr	r3, [pc, #164]	; (388c <timer_add_task+0xf4>)
    37e6:	4798      	blx	r3
    37e8:	4603      	mov	r3, r0
    37ea:	2b00      	cmp	r3, #0
    37ec:	d00f      	beq.n	380e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	7f1b      	ldrb	r3, [r3, #28]
    37f2:	b2db      	uxtb	r3, r3
    37f4:	f023 0301 	bic.w	r3, r3, #1
    37f8:	b2da      	uxtb	r2, r3
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    37fe:	2280      	movs	r2, #128	; 0x80
    3800:	4920      	ldr	r1, [pc, #128]	; (3884 <timer_add_task+0xec>)
    3802:	2000      	movs	r0, #0
    3804:	4b20      	ldr	r3, [pc, #128]	; (3888 <timer_add_task+0xf0>)
    3806:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3808:	f06f 0311 	mvn.w	r3, #17
    380c:	e035      	b.n	387a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	695a      	ldr	r2, [r3, #20]
    3812:	683b      	ldr	r3, [r7, #0]
    3814:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	f103 0018 	add.w	r0, r3, #24
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	695b      	ldr	r3, [r3, #20]
    3820:	461a      	mov	r2, r3
    3822:	6839      	ldr	r1, [r7, #0]
    3824:	4b1a      	ldr	r3, [pc, #104]	; (3890 <timer_add_task+0xf8>)
    3826:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	7f1b      	ldrb	r3, [r3, #28]
    382c:	b2db      	uxtb	r3, r3
    382e:	f023 0301 	bic.w	r3, r3, #1
    3832:	b2da      	uxtb	r2, r3
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	7f1b      	ldrb	r3, [r3, #28]
    383c:	b2db      	uxtb	r3, r3
    383e:	f003 0302 	and.w	r3, r3, #2
    3842:	2b00      	cmp	r3, #0
    3844:	d018      	beq.n	3878 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    3846:	f107 030c 	add.w	r3, r7, #12
    384a:	4618      	mov	r0, r3
    384c:	4b11      	ldr	r3, [pc, #68]	; (3894 <timer_add_task+0xfc>)
    384e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3850:	687b      	ldr	r3, [r7, #4]
    3852:	7f1b      	ldrb	r3, [r3, #28]
    3854:	b2db      	uxtb	r3, r3
    3856:	f023 0302 	bic.w	r3, r3, #2
    385a:	b2da      	uxtb	r2, r3
    385c:	687b      	ldr	r3, [r7, #4]
    385e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3860:	687b      	ldr	r3, [r7, #4]
    3862:	681b      	ldr	r3, [r3, #0]
    3864:	69db      	ldr	r3, [r3, #28]
    3866:	687a      	ldr	r2, [r7, #4]
    3868:	3204      	adds	r2, #4
    386a:	4610      	mov	r0, r2
    386c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    386e:	f107 030c 	add.w	r3, r7, #12
    3872:	4618      	mov	r0, r3
    3874:	4b08      	ldr	r3, [pc, #32]	; (3898 <timer_add_task+0x100>)
    3876:	4798      	blx	r3
	}

	return ERR_NONE;
    3878:	2300      	movs	r3, #0
}
    387a:	4618      	mov	r0, r3
    387c:	3710      	adds	r7, #16
    387e:	46bd      	mov	sp, r7
    3880:	bd80      	pop	{r7, pc}
    3882:	bf00      	nop
    3884:	00010fb4 	.word	0x00010fb4
    3888:	0000445d 	.word	0x0000445d
    388c:	00004485 	.word	0x00004485
    3890:	00003999 	.word	0x00003999
    3894:	000029dd 	.word	0x000029dd
    3898:	00002a03 	.word	0x00002a03

0000389c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    389c:	b580      	push	{r7, lr}
    389e:	b084      	sub	sp, #16
    38a0:	af00      	add	r7, sp, #0
    38a2:	6078      	str	r0, [r7, #4]
    38a4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d008      	beq.n	38be <timer_remove_task+0x22>
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d005      	beq.n	38be <timer_remove_task+0x22>
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	2b00      	cmp	r3, #0
    38b8:	d001      	beq.n	38be <timer_remove_task+0x22>
    38ba:	2301      	movs	r3, #1
    38bc:	e000      	b.n	38c0 <timer_remove_task+0x24>
    38be:	2300      	movs	r3, #0
    38c0:	f003 0301 	and.w	r3, r3, #1
    38c4:	b2db      	uxtb	r3, r3
    38c6:	2296      	movs	r2, #150	; 0x96
    38c8:	492d      	ldr	r1, [pc, #180]	; (3980 <timer_remove_task+0xe4>)
    38ca:	4618      	mov	r0, r3
    38cc:	4b2d      	ldr	r3, [pc, #180]	; (3984 <timer_remove_task+0xe8>)
    38ce:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	7f1b      	ldrb	r3, [r3, #28]
    38d4:	b2db      	uxtb	r3, r3
    38d6:	f043 0301 	orr.w	r3, r3, #1
    38da:	b2da      	uxtb	r2, r3
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	3318      	adds	r3, #24
    38e4:	6839      	ldr	r1, [r7, #0]
    38e6:	4618      	mov	r0, r3
    38e8:	4b27      	ldr	r3, [pc, #156]	; (3988 <timer_remove_task+0xec>)
    38ea:	4798      	blx	r3
    38ec:	4603      	mov	r3, r0
    38ee:	f083 0301 	eor.w	r3, r3, #1
    38f2:	b2db      	uxtb	r3, r3
    38f4:	2b00      	cmp	r3, #0
    38f6:	d00f      	beq.n	3918 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	7f1b      	ldrb	r3, [r3, #28]
    38fc:	b2db      	uxtb	r3, r3
    38fe:	f023 0301 	bic.w	r3, r3, #1
    3902:	b2da      	uxtb	r2, r3
    3904:	687b      	ldr	r3, [r7, #4]
    3906:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3908:	229b      	movs	r2, #155	; 0x9b
    390a:	491d      	ldr	r1, [pc, #116]	; (3980 <timer_remove_task+0xe4>)
    390c:	2000      	movs	r0, #0
    390e:	4b1d      	ldr	r3, [pc, #116]	; (3984 <timer_remove_task+0xe8>)
    3910:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3912:	f06f 0309 	mvn.w	r3, #9
    3916:	e02e      	b.n	3976 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	3318      	adds	r3, #24
    391c:	6839      	ldr	r1, [r7, #0]
    391e:	4618      	mov	r0, r3
    3920:	4b1a      	ldr	r3, [pc, #104]	; (398c <timer_remove_task+0xf0>)
    3922:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	7f1b      	ldrb	r3, [r3, #28]
    3928:	b2db      	uxtb	r3, r3
    392a:	f023 0301 	bic.w	r3, r3, #1
    392e:	b2da      	uxtb	r2, r3
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	7f1b      	ldrb	r3, [r3, #28]
    3938:	b2db      	uxtb	r3, r3
    393a:	f003 0302 	and.w	r3, r3, #2
    393e:	2b00      	cmp	r3, #0
    3940:	d018      	beq.n	3974 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3942:	f107 030c 	add.w	r3, r7, #12
    3946:	4618      	mov	r0, r3
    3948:	4b11      	ldr	r3, [pc, #68]	; (3990 <timer_remove_task+0xf4>)
    394a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	7f1b      	ldrb	r3, [r3, #28]
    3950:	b2db      	uxtb	r3, r3
    3952:	f023 0302 	bic.w	r3, r3, #2
    3956:	b2da      	uxtb	r2, r3
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	681b      	ldr	r3, [r3, #0]
    3960:	69db      	ldr	r3, [r3, #28]
    3962:	687a      	ldr	r2, [r7, #4]
    3964:	3204      	adds	r2, #4
    3966:	4610      	mov	r0, r2
    3968:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    396a:	f107 030c 	add.w	r3, r7, #12
    396e:	4618      	mov	r0, r3
    3970:	4b08      	ldr	r3, [pc, #32]	; (3994 <timer_remove_task+0xf8>)
    3972:	4798      	blx	r3
	}

	return ERR_NONE;
    3974:	2300      	movs	r3, #0
}
    3976:	4618      	mov	r0, r3
    3978:	3710      	adds	r7, #16
    397a:	46bd      	mov	sp, r7
    397c:	bd80      	pop	{r7, pc}
    397e:	bf00      	nop
    3980:	00010fb4 	.word	0x00010fb4
    3984:	0000445d 	.word	0x0000445d
    3988:	00004485 	.word	0x00004485
    398c:	000045e7 	.word	0x000045e7
    3990:	000029dd 	.word	0x000029dd
    3994:	00002a03 	.word	0x00002a03

00003998 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3998:	b580      	push	{r7, lr}
    399a:	b088      	sub	sp, #32
    399c:	af00      	add	r7, sp, #0
    399e:	60f8      	str	r0, [r7, #12]
    39a0:	60b9      	str	r1, [r7, #8]
    39a2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    39a4:	2300      	movs	r3, #0
    39a6:	61bb      	str	r3, [r7, #24]
    39a8:	68f8      	ldr	r0, [r7, #12]
    39aa:	4b23      	ldr	r3, [pc, #140]	; (3a38 <timer_add_timer_task+0xa0>)
    39ac:	4798      	blx	r3
    39ae:	6138      	str	r0, [r7, #16]

	if (!head) {
    39b0:	693b      	ldr	r3, [r7, #16]
    39b2:	2b00      	cmp	r3, #0
    39b4:	d104      	bne.n	39c0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    39b6:	68b9      	ldr	r1, [r7, #8]
    39b8:	68f8      	ldr	r0, [r7, #12]
    39ba:	4b20      	ldr	r3, [pc, #128]	; (3a3c <timer_add_timer_task+0xa4>)
    39bc:	4798      	blx	r3
		return;
    39be:	e037      	b.n	3a30 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    39c0:	693b      	ldr	r3, [r7, #16]
    39c2:	61fb      	str	r3, [r7, #28]
    39c4:	e022      	b.n	3a0c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    39c6:	69fb      	ldr	r3, [r7, #28]
    39c8:	685a      	ldr	r2, [r3, #4]
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	429a      	cmp	r2, r3
    39ce:	d808      	bhi.n	39e2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    39d0:	69fb      	ldr	r3, [r7, #28]
    39d2:	689a      	ldr	r2, [r3, #8]
    39d4:	69fb      	ldr	r3, [r7, #28]
    39d6:	6859      	ldr	r1, [r3, #4]
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	1acb      	subs	r3, r1, r3
    39dc:	4413      	add	r3, r2
    39de:	617b      	str	r3, [r7, #20]
    39e0:	e009      	b.n	39f6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    39e2:	69fb      	ldr	r3, [r7, #28]
    39e4:	689a      	ldr	r2, [r3, #8]
    39e6:	69fb      	ldr	r3, [r7, #28]
    39e8:	685b      	ldr	r3, [r3, #4]
    39ea:	441a      	add	r2, r3
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	425b      	negs	r3, r3
    39f0:	4413      	add	r3, r2
    39f2:	3301      	adds	r3, #1
    39f4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    39f6:	68bb      	ldr	r3, [r7, #8]
    39f8:	689a      	ldr	r2, [r3, #8]
    39fa:	697b      	ldr	r3, [r7, #20]
    39fc:	429a      	cmp	r2, r3
    39fe:	d909      	bls.n	3a14 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3a00:	69fb      	ldr	r3, [r7, #28]
    3a02:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3a04:	69f8      	ldr	r0, [r7, #28]
    3a06:	4b0e      	ldr	r3, [pc, #56]	; (3a40 <timer_add_timer_task+0xa8>)
    3a08:	4798      	blx	r3
    3a0a:	61f8      	str	r0, [r7, #28]
    3a0c:	69fb      	ldr	r3, [r7, #28]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d1d9      	bne.n	39c6 <timer_add_timer_task+0x2e>
    3a12:	e000      	b.n	3a16 <timer_add_timer_task+0x7e>
			break;
    3a14:	bf00      	nop
	}

	if (it == head) {
    3a16:	69fa      	ldr	r2, [r7, #28]
    3a18:	693b      	ldr	r3, [r7, #16]
    3a1a:	429a      	cmp	r2, r3
    3a1c:	d104      	bne.n	3a28 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3a1e:	68b9      	ldr	r1, [r7, #8]
    3a20:	68f8      	ldr	r0, [r7, #12]
    3a22:	4b06      	ldr	r3, [pc, #24]	; (3a3c <timer_add_timer_task+0xa4>)
    3a24:	4798      	blx	r3
    3a26:	e003      	b.n	3a30 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    3a28:	68b9      	ldr	r1, [r7, #8]
    3a2a:	69b8      	ldr	r0, [r7, #24]
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <timer_add_timer_task+0xac>)
    3a2e:	4798      	blx	r3
	}
}
    3a30:	3720      	adds	r7, #32
    3a32:	46bd      	mov	sp, r7
    3a34:	bd80      	pop	{r7, pc}
    3a36:	bf00      	nop
    3a38:	0000361d 	.word	0x0000361d
    3a3c:	000044bd 	.word	0x000044bd
    3a40:	00003635 	.word	0x00003635
    3a44:	00004515 	.word	0x00004515

00003a48 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	b086      	sub	sp, #24
    3a4c:	af00      	add	r7, sp, #0
    3a4e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	3b04      	subs	r3, #4
    3a54:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    3a56:	693b      	ldr	r3, [r7, #16]
    3a58:	3318      	adds	r3, #24
    3a5a:	4618      	mov	r0, r3
    3a5c:	4b27      	ldr	r3, [pc, #156]	; (3afc <timer_process_counted+0xb4>)
    3a5e:	4798      	blx	r3
    3a60:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3a62:	693b      	ldr	r3, [r7, #16]
    3a64:	695b      	ldr	r3, [r3, #20]
    3a66:	1c5a      	adds	r2, r3, #1
    3a68:	693b      	ldr	r3, [r7, #16]
    3a6a:	615a      	str	r2, [r3, #20]
    3a6c:	693b      	ldr	r3, [r7, #16]
    3a6e:	695b      	ldr	r3, [r3, #20]
    3a70:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3a72:	693b      	ldr	r3, [r7, #16]
    3a74:	7f1b      	ldrb	r3, [r3, #28]
    3a76:	b2db      	uxtb	r3, r3
    3a78:	f003 0301 	and.w	r3, r3, #1
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d106      	bne.n	3a8e <timer_process_counted+0x46>
    3a80:	693b      	ldr	r3, [r7, #16]
    3a82:	7f1b      	ldrb	r3, [r3, #28]
    3a84:	b2db      	uxtb	r3, r3
    3a86:	f003 0302 	and.w	r3, r3, #2
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d027      	beq.n	3ade <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3a8e:	693b      	ldr	r3, [r7, #16]
    3a90:	7f1b      	ldrb	r3, [r3, #28]
    3a92:	b2db      	uxtb	r3, r3
    3a94:	f043 0302 	orr.w	r3, r3, #2
    3a98:	b2da      	uxtb	r2, r3
    3a9a:	693b      	ldr	r3, [r7, #16]
    3a9c:	771a      	strb	r2, [r3, #28]
		return;
    3a9e:	e029      	b.n	3af4 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3aa0:	697b      	ldr	r3, [r7, #20]
    3aa2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    3aa4:	693b      	ldr	r3, [r7, #16]
    3aa6:	3318      	adds	r3, #24
    3aa8:	4618      	mov	r0, r3
    3aaa:	4b15      	ldr	r3, [pc, #84]	; (3b00 <timer_process_counted+0xb8>)
    3aac:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3aae:	68bb      	ldr	r3, [r7, #8]
    3ab0:	7c1b      	ldrb	r3, [r3, #16]
    3ab2:	2b01      	cmp	r3, #1
    3ab4:	d109      	bne.n	3aca <timer_process_counted+0x82>
			tmp->time_label = time;
    3ab6:	68bb      	ldr	r3, [r7, #8]
    3ab8:	68fa      	ldr	r2, [r7, #12]
    3aba:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3abc:	693b      	ldr	r3, [r7, #16]
    3abe:	3318      	adds	r3, #24
    3ac0:	68fa      	ldr	r2, [r7, #12]
    3ac2:	68b9      	ldr	r1, [r7, #8]
    3ac4:	4618      	mov	r0, r3
    3ac6:	4b0f      	ldr	r3, [pc, #60]	; (3b04 <timer_process_counted+0xbc>)
    3ac8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3aca:	693b      	ldr	r3, [r7, #16]
    3acc:	3318      	adds	r3, #24
    3ace:	4618      	mov	r0, r3
    3ad0:	4b0a      	ldr	r3, [pc, #40]	; (3afc <timer_process_counted+0xb4>)
    3ad2:	4798      	blx	r3
    3ad4:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    3ad6:	68bb      	ldr	r3, [r7, #8]
    3ad8:	68db      	ldr	r3, [r3, #12]
    3ada:	68b8      	ldr	r0, [r7, #8]
    3adc:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3ade:	697b      	ldr	r3, [r7, #20]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d007      	beq.n	3af4 <timer_process_counted+0xac>
    3ae4:	697b      	ldr	r3, [r7, #20]
    3ae6:	685b      	ldr	r3, [r3, #4]
    3ae8:	68fa      	ldr	r2, [r7, #12]
    3aea:	1ad2      	subs	r2, r2, r3
    3aec:	697b      	ldr	r3, [r7, #20]
    3aee:	689b      	ldr	r3, [r3, #8]
    3af0:	429a      	cmp	r2, r3
    3af2:	d2d5      	bcs.n	3aa0 <timer_process_counted+0x58>
	}
}
    3af4:	3718      	adds	r7, #24
    3af6:	46bd      	mov	sp, r7
    3af8:	bd80      	pop	{r7, pc}
    3afa:	bf00      	nop
    3afc:	0000361d 	.word	0x0000361d
    3b00:	000045b5 	.word	0x000045b5
    3b04:	00003999 	.word	0x00003999

00003b08 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3b08:	b480      	push	{r7}
    3b0a:	b085      	sub	sp, #20
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	4603      	mov	r3, r0
    3b10:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b12:	2300      	movs	r3, #0
    3b14:	73fb      	strb	r3, [r7, #15]
    3b16:	e029      	b.n	3b6c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b1c:	4a19      	ldr	r2, [pc, #100]	; (3b84 <_usb_d_find_ep+0x7c>)
    3b1e:	015b      	lsls	r3, r3, #5
    3b20:	4413      	add	r3, r2
    3b22:	3301      	adds	r3, #1
    3b24:	781b      	ldrb	r3, [r3, #0]
    3b26:	79fa      	ldrb	r2, [r7, #7]
    3b28:	429a      	cmp	r2, r3
    3b2a:	d102      	bne.n	3b32 <_usb_d_find_ep+0x2a>
			return i;
    3b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b30:	e022      	b.n	3b78 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b36:	4a13      	ldr	r2, [pc, #76]	; (3b84 <_usb_d_find_ep+0x7c>)
    3b38:	015b      	lsls	r3, r3, #5
    3b3a:	4413      	add	r3, r2
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d10e      	bne.n	3b60 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3b42:	79fb      	ldrb	r3, [r7, #7]
    3b44:	f003 030f 	and.w	r3, r3, #15
    3b48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3b4c:	490d      	ldr	r1, [pc, #52]	; (3b84 <_usb_d_find_ep+0x7c>)
    3b4e:	0152      	lsls	r2, r2, #5
    3b50:	440a      	add	r2, r1
    3b52:	3201      	adds	r2, #1
    3b54:	7812      	ldrb	r2, [r2, #0]
    3b56:	4293      	cmp	r3, r2
    3b58:	d102      	bne.n	3b60 <_usb_d_find_ep+0x58>
			return i;
    3b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b5e:	e00b      	b.n	3b78 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b64:	b2db      	uxtb	r3, r3
    3b66:	3301      	adds	r3, #1
    3b68:	b2db      	uxtb	r3, r3
    3b6a:	73fb      	strb	r3, [r7, #15]
    3b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3b70:	2b03      	cmp	r3, #3
    3b72:	ddd1      	ble.n	3b18 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3b74:	f04f 33ff 	mov.w	r3, #4294967295
}
    3b78:	4618      	mov	r0, r3
    3b7a:	3714      	adds	r7, #20
    3b7c:	46bd      	mov	sp, r7
    3b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b82:	4770      	bx	lr
    3b84:	20000cf8 	.word	0x20000cf8

00003b88 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b088      	sub	sp, #32
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	60ba      	str	r2, [r7, #8]
    3b90:	607b      	str	r3, [r7, #4]
    3b92:	4603      	mov	r3, r0
    3b94:	73fb      	strb	r3, [r7, #15]
    3b96:	460b      	mov	r3, r1
    3b98:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3b9a:	68bb      	ldr	r3, [r7, #8]
    3b9c:	617b      	str	r3, [r7, #20]
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	61bb      	str	r3, [r7, #24]
    3ba2:	7bbb      	ldrb	r3, [r7, #14]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d004      	beq.n	3bb2 <_usb_d_trans+0x2a>
    3ba8:	7bfb      	ldrb	r3, [r7, #15]
    3baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bae:	b2db      	uxtb	r3, r3
    3bb0:	e003      	b.n	3bba <_usb_d_trans+0x32>
    3bb2:	7bfb      	ldrb	r3, [r7, #15]
    3bb4:	f003 030f 	and.w	r3, r3, #15
    3bb8:	b2db      	uxtb	r3, r3
    3bba:	773b      	strb	r3, [r7, #28]
    3bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3bc0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3bc2:	f107 0314 	add.w	r3, r7, #20
    3bc6:	4618      	mov	r0, r3
    3bc8:	4b03      	ldr	r3, [pc, #12]	; (3bd8 <_usb_d_trans+0x50>)
    3bca:	4798      	blx	r3
    3bcc:	4603      	mov	r3, r0
}
    3bce:	4618      	mov	r0, r3
    3bd0:	3720      	adds	r7, #32
    3bd2:	46bd      	mov	sp, r7
    3bd4:	bd80      	pop	{r7, pc}
    3bd6:	bf00      	nop
    3bd8:	0000b685 	.word	0x0000b685

00003bdc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3bdc:	b480      	push	{r7}
    3bde:	b085      	sub	sp, #20
    3be0:	af00      	add	r7, sp, #0
    3be2:	60f8      	str	r0, [r7, #12]
    3be4:	60b9      	str	r1, [r7, #8]
    3be6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3be8:	2300      	movs	r3, #0
}
    3bea:	4618      	mov	r0, r3
    3bec:	3714      	adds	r7, #20
    3bee:	46bd      	mov	sp, r7
    3bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf4:	4770      	bx	lr
	...

00003bf8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b086      	sub	sp, #24
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	4603      	mov	r3, r0
    3c00:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c02:	79fb      	ldrb	r3, [r7, #7]
    3c04:	4618      	mov	r0, r3
    3c06:	4b2a      	ldr	r3, [pc, #168]	; (3cb0 <usb_d_cb_trans_setup+0xb8>)
    3c08:	4798      	blx	r3
    3c0a:	4603      	mov	r3, r0
    3c0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c12:	015b      	lsls	r3, r3, #5
    3c14:	4a27      	ldr	r2, [pc, #156]	; (3cb4 <usb_d_cb_trans_setup+0xbc>)
    3c16:	4413      	add	r3, r2
    3c18:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3c1a:	693b      	ldr	r3, [r7, #16]
    3c1c:	330c      	adds	r3, #12
    3c1e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3c20:	79fb      	ldrb	r3, [r7, #7]
    3c22:	68f9      	ldr	r1, [r7, #12]
    3c24:	4618      	mov	r0, r3
    3c26:	4b24      	ldr	r3, [pc, #144]	; (3cb8 <usb_d_cb_trans_setup+0xc0>)
    3c28:	4798      	blx	r3
    3c2a:	4603      	mov	r3, r0
    3c2c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3c2e:	7afb      	ldrb	r3, [r7, #11]
    3c30:	2b08      	cmp	r3, #8
    3c32:	d00d      	beq.n	3c50 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3c34:	79fb      	ldrb	r3, [r7, #7]
    3c36:	2101      	movs	r1, #1
    3c38:	4618      	mov	r0, r3
    3c3a:	4b20      	ldr	r3, [pc, #128]	; (3cbc <usb_d_cb_trans_setup+0xc4>)
    3c3c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3c3e:	79fb      	ldrb	r3, [r7, #7]
    3c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c44:	b2db      	uxtb	r3, r3
    3c46:	2101      	movs	r1, #1
    3c48:	4618      	mov	r0, r3
    3c4a:	4b1c      	ldr	r3, [pc, #112]	; (3cbc <usb_d_cb_trans_setup+0xc4>)
    3c4c:	4798      	blx	r3
		return;
    3c4e:	e02b      	b.n	3ca8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3c50:	79fb      	ldrb	r3, [r7, #7]
    3c52:	2100      	movs	r1, #0
    3c54:	4618      	mov	r0, r3
    3c56:	4b19      	ldr	r3, [pc, #100]	; (3cbc <usb_d_cb_trans_setup+0xc4>)
    3c58:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3c5a:	79fb      	ldrb	r3, [r7, #7]
    3c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c60:	b2db      	uxtb	r3, r3
    3c62:	2100      	movs	r1, #0
    3c64:	4618      	mov	r0, r3
    3c66:	4b15      	ldr	r3, [pc, #84]	; (3cbc <usb_d_cb_trans_setup+0xc4>)
    3c68:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3c6a:	693b      	ldr	r3, [r7, #16]
    3c6c:	2201      	movs	r2, #1
    3c6e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3c70:	693b      	ldr	r3, [r7, #16]
    3c72:	695b      	ldr	r3, [r3, #20]
    3c74:	79fa      	ldrb	r2, [r7, #7]
    3c76:	68f9      	ldr	r1, [r7, #12]
    3c78:	4610      	mov	r0, r2
    3c7a:	4798      	blx	r3
    3c7c:	4603      	mov	r3, r0
    3c7e:	f083 0301 	eor.w	r3, r3, #1
    3c82:	b2db      	uxtb	r3, r3
    3c84:	2b00      	cmp	r3, #0
    3c86:	d00f      	beq.n	3ca8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3c88:	693b      	ldr	r3, [r7, #16]
    3c8a:	2205      	movs	r2, #5
    3c8c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3c8e:	79fb      	ldrb	r3, [r7, #7]
    3c90:	2101      	movs	r1, #1
    3c92:	4618      	mov	r0, r3
    3c94:	4b09      	ldr	r3, [pc, #36]	; (3cbc <usb_d_cb_trans_setup+0xc4>)
    3c96:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3c98:	79fb      	ldrb	r3, [r7, #7]
    3c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	2101      	movs	r1, #1
    3ca2:	4618      	mov	r0, r3
    3ca4:	4b05      	ldr	r3, [pc, #20]	; (3cbc <usb_d_cb_trans_setup+0xc4>)
    3ca6:	4798      	blx	r3
	}
}
    3ca8:	3718      	adds	r7, #24
    3caa:	46bd      	mov	sp, r7
    3cac:	bd80      	pop	{r7, pc}
    3cae:	bf00      	nop
    3cb0:	00003b09 	.word	0x00003b09
    3cb4:	20000cf8 	.word	0x20000cf8
    3cb8:	0000b5dd 	.word	0x0000b5dd
    3cbc:	0000b455 	.word	0x0000b455

00003cc0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b084      	sub	sp, #16
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	4603      	mov	r3, r0
    3cc8:	6039      	str	r1, [r7, #0]
    3cca:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3ccc:	79fb      	ldrb	r3, [r7, #7]
    3cce:	4618      	mov	r0, r3
    3cd0:	4b0d      	ldr	r3, [pc, #52]	; (3d08 <usb_d_cb_trans_more+0x48>)
    3cd2:	4798      	blx	r3
    3cd4:	4603      	mov	r3, r0
    3cd6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3cdc:	015b      	lsls	r3, r3, #5
    3cde:	4a0b      	ldr	r2, [pc, #44]	; (3d0c <usb_d_cb_trans_more+0x4c>)
    3ce0:	4413      	add	r3, r2
    3ce2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	789b      	ldrb	r3, [r3, #2]
    3ce8:	2b03      	cmp	r3, #3
    3cea:	d107      	bne.n	3cfc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3cec:	68bb      	ldr	r3, [r7, #8]
    3cee:	699b      	ldr	r3, [r3, #24]
    3cf0:	79fa      	ldrb	r2, [r7, #7]
    3cf2:	6839      	ldr	r1, [r7, #0]
    3cf4:	4610      	mov	r0, r2
    3cf6:	4798      	blx	r3
    3cf8:	4603      	mov	r3, r0
    3cfa:	e000      	b.n	3cfe <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3cfc:	2300      	movs	r3, #0
}
    3cfe:	4618      	mov	r0, r3
    3d00:	3710      	adds	r7, #16
    3d02:	46bd      	mov	sp, r7
    3d04:	bd80      	pop	{r7, pc}
    3d06:	bf00      	nop
    3d08:	00003b09 	.word	0x00003b09
    3d0c:	20000cf8 	.word	0x20000cf8

00003d10 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3d10:	b590      	push	{r4, r7, lr}
    3d12:	b087      	sub	sp, #28
    3d14:	af02      	add	r7, sp, #8
    3d16:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	789b      	ldrb	r3, [r3, #2]
    3d1c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	7b1b      	ldrb	r3, [r3, #12]
    3d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3d26:	2b00      	cmp	r3, #0
    3d28:	bf14      	ite	ne
    3d2a:	2301      	movne	r3, #1
    3d2c:	2300      	moveq	r3, #0
    3d2e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3d30:	7bfb      	ldrb	r3, [r7, #15]
    3d32:	2b03      	cmp	r3, #3
    3d34:	d13a      	bne.n	3dac <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	69db      	ldr	r3, [r3, #28]
    3d3a:	687a      	ldr	r2, [r7, #4]
    3d3c:	7850      	ldrb	r0, [r2, #1]
    3d3e:	687a      	ldr	r2, [r7, #4]
    3d40:	320c      	adds	r2, #12
    3d42:	2101      	movs	r1, #1
    3d44:	4798      	blx	r3
    3d46:	4603      	mov	r3, r0
    3d48:	737b      	strb	r3, [r7, #13]
		if (err) {
    3d4a:	7b7b      	ldrb	r3, [r7, #13]
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d015      	beq.n	3d7c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	2205      	movs	r2, #5
    3d54:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	2202      	movs	r2, #2
    3d5a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3d5c:	7bbb      	ldrb	r3, [r7, #14]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d002      	beq.n	3d68 <usb_d_ctrl_trans_done+0x58>
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	785b      	ldrb	r3, [r3, #1]
    3d66:	e004      	b.n	3d72 <usb_d_ctrl_trans_done+0x62>
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	785b      	ldrb	r3, [r3, #1]
    3d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d70:	b2db      	uxtb	r3, r3
    3d72:	2101      	movs	r1, #1
    3d74:	4618      	mov	r0, r3
    3d76:	4b15      	ldr	r3, [pc, #84]	; (3dcc <usb_d_ctrl_trans_done+0xbc>)
    3d78:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3d7a:	e022      	b.n	3dc2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	2204      	movs	r2, #4
    3d80:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	7858      	ldrb	r0, [r3, #1]
    3d86:	7bbb      	ldrb	r3, [r7, #14]
    3d88:	2b00      	cmp	r3, #0
    3d8a:	bf14      	ite	ne
    3d8c:	2301      	movne	r3, #1
    3d8e:	2300      	moveq	r3, #0
    3d90:	b2db      	uxtb	r3, r3
    3d92:	f083 0301 	eor.w	r3, r3, #1
    3d96:	b2db      	uxtb	r3, r3
    3d98:	f003 0301 	and.w	r3, r3, #1
    3d9c:	b2d9      	uxtb	r1, r3
    3d9e:	2301      	movs	r3, #1
    3da0:	9300      	str	r3, [sp, #0]
    3da2:	2300      	movs	r3, #0
    3da4:	2200      	movs	r2, #0
    3da6:	4c0a      	ldr	r4, [pc, #40]	; (3dd0 <usb_d_ctrl_trans_done+0xc0>)
    3da8:	47a0      	blx	r4
}
    3daa:	e00a      	b.n	3dc2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3dac:	687b      	ldr	r3, [r7, #4]
    3dae:	69db      	ldr	r3, [r3, #28]
    3db0:	687a      	ldr	r2, [r7, #4]
    3db2:	7850      	ldrb	r0, [r2, #1]
    3db4:	687a      	ldr	r2, [r7, #4]
    3db6:	320c      	adds	r2, #12
    3db8:	2100      	movs	r1, #0
    3dba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	2202      	movs	r2, #2
    3dc0:	709a      	strb	r2, [r3, #2]
}
    3dc2:	bf00      	nop
    3dc4:	3714      	adds	r7, #20
    3dc6:	46bd      	mov	sp, r7
    3dc8:	bd90      	pop	{r4, r7, pc}
    3dca:	bf00      	nop
    3dcc:	0000b455 	.word	0x0000b455
    3dd0:	00003b89 	.word	0x00003b89

00003dd4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b086      	sub	sp, #24
    3dd8:	af00      	add	r7, sp, #0
    3dda:	4603      	mov	r3, r0
    3ddc:	60b9      	str	r1, [r7, #8]
    3dde:	607a      	str	r2, [r7, #4]
    3de0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3de2:	7bfb      	ldrb	r3, [r7, #15]
    3de4:	4618      	mov	r0, r3
    3de6:	4b2f      	ldr	r3, [pc, #188]	; (3ea4 <_usb_d_cb_trans_done+0xd0>)
    3de8:	4798      	blx	r3
    3dea:	4603      	mov	r3, r0
    3dec:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3df2:	015b      	lsls	r3, r3, #5
    3df4:	4a2c      	ldr	r2, [pc, #176]	; (3ea8 <_usb_d_cb_trans_done+0xd4>)
    3df6:	4413      	add	r3, r2
    3df8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3dfa:	68bb      	ldr	r3, [r7, #8]
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d10e      	bne.n	3e1e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3e00:	693b      	ldr	r3, [r7, #16]
    3e02:	2200      	movs	r2, #0
    3e04:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3e06:	693b      	ldr	r3, [r7, #16]
    3e08:	781b      	ldrb	r3, [r3, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d103      	bne.n	3e16 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3e0e:	6938      	ldr	r0, [r7, #16]
    3e10:	4b26      	ldr	r3, [pc, #152]	; (3eac <_usb_d_cb_trans_done+0xd8>)
    3e12:	4798      	blx	r3
			return;
    3e14:	e043      	b.n	3e9e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3e16:	693b      	ldr	r3, [r7, #16]
    3e18:	2201      	movs	r2, #1
    3e1a:	709a      	strb	r2, [r3, #2]
    3e1c:	e038      	b.n	3e90 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3e1e:	68bb      	ldr	r3, [r7, #8]
    3e20:	2b01      	cmp	r3, #1
    3e22:	d113      	bne.n	3e4c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3e24:	693b      	ldr	r3, [r7, #16]
    3e26:	2202      	movs	r2, #2
    3e28:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3e2a:	693b      	ldr	r3, [r7, #16]
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d108      	bne.n	3e44 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3e32:	693b      	ldr	r3, [r7, #16]
    3e34:	2202      	movs	r2, #2
    3e36:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3e38:	7bfb      	ldrb	r3, [r7, #15]
    3e3a:	2100      	movs	r1, #0
    3e3c:	4618      	mov	r0, r3
    3e3e:	4b1c      	ldr	r3, [pc, #112]	; (3eb0 <_usb_d_cb_trans_done+0xdc>)
    3e40:	4798      	blx	r3
    3e42:	e025      	b.n	3e90 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3e44:	693b      	ldr	r3, [r7, #16]
    3e46:	2205      	movs	r2, #5
    3e48:	709a      	strb	r2, [r3, #2]
    3e4a:	e021      	b.n	3e90 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3e4c:	68bb      	ldr	r3, [r7, #8]
    3e4e:	2b02      	cmp	r3, #2
    3e50:	d10e      	bne.n	3e70 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3e52:	693b      	ldr	r3, [r7, #16]
    3e54:	2204      	movs	r2, #4
    3e56:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3e58:	693b      	ldr	r3, [r7, #16]
    3e5a:	781b      	ldrb	r3, [r3, #0]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d103      	bne.n	3e68 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3e60:	693b      	ldr	r3, [r7, #16]
    3e62:	2202      	movs	r2, #2
    3e64:	709a      	strb	r2, [r3, #2]
			return;
    3e66:	e01a      	b.n	3e9e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3e68:	693b      	ldr	r3, [r7, #16]
    3e6a:	2201      	movs	r2, #1
    3e6c:	709a      	strb	r2, [r3, #2]
    3e6e:	e00f      	b.n	3e90 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3e70:	68bb      	ldr	r3, [r7, #8]
    3e72:	2b03      	cmp	r3, #3
    3e74:	d106      	bne.n	3e84 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3e76:	693b      	ldr	r3, [r7, #16]
    3e78:	2200      	movs	r2, #0
    3e7a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3e7c:	693b      	ldr	r3, [r7, #16]
    3e7e:	2205      	movs	r2, #5
    3e80:	70da      	strb	r2, [r3, #3]
    3e82:	e005      	b.n	3e90 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3e84:	693b      	ldr	r3, [r7, #16]
    3e86:	2206      	movs	r2, #6
    3e88:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3e8a:	693b      	ldr	r3, [r7, #16]
    3e8c:	2206      	movs	r2, #6
    3e8e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3e90:	693b      	ldr	r3, [r7, #16]
    3e92:	69db      	ldr	r3, [r3, #28]
    3e94:	693a      	ldr	r2, [r7, #16]
    3e96:	78d1      	ldrb	r1, [r2, #3]
    3e98:	687a      	ldr	r2, [r7, #4]
    3e9a:	7bf8      	ldrb	r0, [r7, #15]
    3e9c:	4798      	blx	r3
}
    3e9e:	3718      	adds	r7, #24
    3ea0:	46bd      	mov	sp, r7
    3ea2:	bd80      	pop	{r7, pc}
    3ea4:	00003b09 	.word	0x00003b09
    3ea8:	20000cf8 	.word	0x20000cf8
    3eac:	00003d11 	.word	0x00003d11
    3eb0:	0000b455 	.word	0x0000b455

00003eb4 <usb_d_init>:

int32_t usb_d_init(void)
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b082      	sub	sp, #8
    3eb8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3eba:	4b21      	ldr	r3, [pc, #132]	; (3f40 <usb_d_init+0x8c>)
    3ebc:	4798      	blx	r3
    3ebe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3ec0:	683b      	ldr	r3, [r7, #0]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	da01      	bge.n	3eca <usb_d_init+0x16>
		return rc;
    3ec6:	683b      	ldr	r3, [r7, #0]
    3ec8:	e036      	b.n	3f38 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3eca:	2280      	movs	r2, #128	; 0x80
    3ecc:	2100      	movs	r1, #0
    3ece:	481d      	ldr	r0, [pc, #116]	; (3f44 <usb_d_init+0x90>)
    3ed0:	4b1d      	ldr	r3, [pc, #116]	; (3f48 <usb_d_init+0x94>)
    3ed2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3ed4:	2300      	movs	r3, #0
    3ed6:	71fb      	strb	r3, [r7, #7]
    3ed8:	e01e      	b.n	3f18 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3eda:	79fb      	ldrb	r3, [r7, #7]
    3edc:	4a19      	ldr	r2, [pc, #100]	; (3f44 <usb_d_init+0x90>)
    3ede:	015b      	lsls	r3, r3, #5
    3ee0:	4413      	add	r3, r2
    3ee2:	3301      	adds	r3, #1
    3ee4:	22ff      	movs	r2, #255	; 0xff
    3ee6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3ee8:	79fb      	ldrb	r3, [r7, #7]
    3eea:	4a16      	ldr	r2, [pc, #88]	; (3f44 <usb_d_init+0x90>)
    3eec:	015b      	lsls	r3, r3, #5
    3eee:	4413      	add	r3, r2
    3ef0:	3314      	adds	r3, #20
    3ef2:	4a16      	ldr	r2, [pc, #88]	; (3f4c <usb_d_init+0x98>)
    3ef4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3ef6:	79fb      	ldrb	r3, [r7, #7]
    3ef8:	4a12      	ldr	r2, [pc, #72]	; (3f44 <usb_d_init+0x90>)
    3efa:	015b      	lsls	r3, r3, #5
    3efc:	4413      	add	r3, r2
    3efe:	3318      	adds	r3, #24
    3f00:	4a12      	ldr	r2, [pc, #72]	; (3f4c <usb_d_init+0x98>)
    3f02:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3f04:	79fb      	ldrb	r3, [r7, #7]
    3f06:	4a0f      	ldr	r2, [pc, #60]	; (3f44 <usb_d_init+0x90>)
    3f08:	015b      	lsls	r3, r3, #5
    3f0a:	4413      	add	r3, r2
    3f0c:	331c      	adds	r3, #28
    3f0e:	4a0f      	ldr	r2, [pc, #60]	; (3f4c <usb_d_init+0x98>)
    3f10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3f12:	79fb      	ldrb	r3, [r7, #7]
    3f14:	3301      	adds	r3, #1
    3f16:	71fb      	strb	r3, [r7, #7]
    3f18:	79fb      	ldrb	r3, [r7, #7]
    3f1a:	2b03      	cmp	r3, #3
    3f1c:	d9dd      	bls.n	3eda <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3f1e:	490c      	ldr	r1, [pc, #48]	; (3f50 <usb_d_init+0x9c>)
    3f20:	2000      	movs	r0, #0
    3f22:	4b0c      	ldr	r3, [pc, #48]	; (3f54 <usb_d_init+0xa0>)
    3f24:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3f26:	490c      	ldr	r1, [pc, #48]	; (3f58 <usb_d_init+0xa4>)
    3f28:	2001      	movs	r0, #1
    3f2a:	4b0a      	ldr	r3, [pc, #40]	; (3f54 <usb_d_init+0xa0>)
    3f2c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3f2e:	490b      	ldr	r1, [pc, #44]	; (3f5c <usb_d_init+0xa8>)
    3f30:	2002      	movs	r0, #2
    3f32:	4b08      	ldr	r3, [pc, #32]	; (3f54 <usb_d_init+0xa0>)
    3f34:	4798      	blx	r3
	return ERR_NONE;
    3f36:	2300      	movs	r3, #0
}
    3f38:	4618      	mov	r0, r3
    3f3a:	3708      	adds	r7, #8
    3f3c:	46bd      	mov	sp, r7
    3f3e:	bd80      	pop	{r7, pc}
    3f40:	0000ac9d 	.word	0x0000ac9d
    3f44:	20000cf8 	.word	0x20000cf8
    3f48:	00010bc5 	.word	0x00010bc5
    3f4c:	00003bdd 	.word	0x00003bdd
    3f50:	00003bf9 	.word	0x00003bf9
    3f54:	0000b8e5 	.word	0x0000b8e5
    3f58:	00003cc1 	.word	0x00003cc1
    3f5c:	00003dd5 	.word	0x00003dd5

00003f60 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3f60:	b580      	push	{r7, lr}
    3f62:	b082      	sub	sp, #8
    3f64:	af00      	add	r7, sp, #0
    3f66:	4603      	mov	r3, r0
    3f68:	6039      	str	r1, [r7, #0]
    3f6a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3f6c:	79fb      	ldrb	r3, [r7, #7]
    3f6e:	6839      	ldr	r1, [r7, #0]
    3f70:	4618      	mov	r0, r3
    3f72:	4b03      	ldr	r3, [pc, #12]	; (3f80 <usb_d_register_callback+0x20>)
    3f74:	4798      	blx	r3
}
    3f76:	bf00      	nop
    3f78:	3708      	adds	r7, #8
    3f7a:	46bd      	mov	sp, r7
    3f7c:	bd80      	pop	{r7, pc}
    3f7e:	bf00      	nop
    3f80:	0000b89d 	.word	0x0000b89d

00003f84 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3f84:	b580      	push	{r7, lr}
    3f86:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3f88:	4b02      	ldr	r3, [pc, #8]	; (3f94 <usb_d_enable+0x10>)
    3f8a:	4798      	blx	r3
    3f8c:	4603      	mov	r3, r0
}
    3f8e:	4618      	mov	r0, r3
    3f90:	bd80      	pop	{r7, pc}
    3f92:	bf00      	nop
    3f94:	0000ad8d 	.word	0x0000ad8d

00003f98 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3f9c:	4b01      	ldr	r3, [pc, #4]	; (3fa4 <usb_d_attach+0xc>)
    3f9e:	4798      	blx	r3
}
    3fa0:	bf00      	nop
    3fa2:	bd80      	pop	{r7, pc}
    3fa4:	0000ae11 	.word	0x0000ae11

00003fa8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3fa8:	b580      	push	{r7, lr}
    3faa:	b082      	sub	sp, #8
    3fac:	af00      	add	r7, sp, #0
    3fae:	4603      	mov	r3, r0
    3fb0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3fb2:	79fb      	ldrb	r3, [r7, #7]
    3fb4:	4618      	mov	r0, r3
    3fb6:	4b03      	ldr	r3, [pc, #12]	; (3fc4 <usb_d_set_address+0x1c>)
    3fb8:	4798      	blx	r3
}
    3fba:	bf00      	nop
    3fbc:	3708      	adds	r7, #8
    3fbe:	46bd      	mov	sp, r7
    3fc0:	bd80      	pop	{r7, pc}
    3fc2:	bf00      	nop
    3fc4:	0000ae25 	.word	0x0000ae25

00003fc8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b082      	sub	sp, #8
    3fcc:	af00      	add	r7, sp, #0
    3fce:	4603      	mov	r3, r0
    3fd0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3fd2:	79fb      	ldrb	r3, [r7, #7]
    3fd4:	b29b      	uxth	r3, r3
    3fd6:	461a      	mov	r2, r3
    3fd8:	2100      	movs	r1, #0
    3fda:	2000      	movs	r0, #0
    3fdc:	4b03      	ldr	r3, [pc, #12]	; (3fec <usb_d_ep0_init+0x24>)
    3fde:	4798      	blx	r3
    3fe0:	4603      	mov	r3, r0
}
    3fe2:	4618      	mov	r0, r3
    3fe4:	3708      	adds	r7, #8
    3fe6:	46bd      	mov	sp, r7
    3fe8:	bd80      	pop	{r7, pc}
    3fea:	bf00      	nop
    3fec:	00003ff1 	.word	0x00003ff1

00003ff0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b086      	sub	sp, #24
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	4603      	mov	r3, r0
    3ff8:	71fb      	strb	r3, [r7, #7]
    3ffa:	460b      	mov	r3, r1
    3ffc:	71bb      	strb	r3, [r7, #6]
    3ffe:	4613      	mov	r3, r2
    4000:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4002:	79fb      	ldrb	r3, [r7, #7]
    4004:	4618      	mov	r0, r3
    4006:	4b1e      	ldr	r3, [pc, #120]	; (4080 <usb_d_ep_init+0x90>)
    4008:	4798      	blx	r3
    400a:	4603      	mov	r3, r0
    400c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    400e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4012:	015b      	lsls	r3, r3, #5
    4014:	4a1b      	ldr	r2, [pc, #108]	; (4084 <usb_d_ep_init+0x94>)
    4016:	4413      	add	r3, r2
    4018:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    401a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    401e:	2b00      	cmp	r3, #0
    4020:	db02      	blt.n	4028 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    4022:	f06f 0313 	mvn.w	r3, #19
    4026:	e027      	b.n	4078 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4028:	20ff      	movs	r0, #255	; 0xff
    402a:	4b15      	ldr	r3, [pc, #84]	; (4080 <usb_d_ep_init+0x90>)
    402c:	4798      	blx	r3
    402e:	4603      	mov	r3, r0
    4030:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    4032:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4036:	2b00      	cmp	r3, #0
    4038:	da02      	bge.n	4040 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    403a:	f06f 0314 	mvn.w	r3, #20
    403e:	e01b      	b.n	4078 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    4040:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4044:	015b      	lsls	r3, r3, #5
    4046:	4a0f      	ldr	r2, [pc, #60]	; (4084 <usb_d_ep_init+0x94>)
    4048:	4413      	add	r3, r2
    404a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    404c:	88ba      	ldrh	r2, [r7, #4]
    404e:	79b9      	ldrb	r1, [r7, #6]
    4050:	79fb      	ldrb	r3, [r7, #7]
    4052:	4618      	mov	r0, r3
    4054:	4b0c      	ldr	r3, [pc, #48]	; (4088 <usb_d_ep_init+0x98>)
    4056:	4798      	blx	r3
    4058:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    405a:	68fb      	ldr	r3, [r7, #12]
    405c:	2b00      	cmp	r3, #0
    405e:	da01      	bge.n	4064 <usb_d_ep_init+0x74>
		return rc;
    4060:	68fb      	ldr	r3, [r7, #12]
    4062:	e009      	b.n	4078 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    4064:	693b      	ldr	r3, [r7, #16]
    4066:	79fa      	ldrb	r2, [r7, #7]
    4068:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    406a:	79bb      	ldrb	r3, [r7, #6]
    406c:	f003 0303 	and.w	r3, r3, #3
    4070:	b2da      	uxtb	r2, r3
    4072:	693b      	ldr	r3, [r7, #16]
    4074:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    4076:	2300      	movs	r3, #0
}
    4078:	4618      	mov	r0, r3
    407a:	3718      	adds	r7, #24
    407c:	46bd      	mov	sp, r7
    407e:	bd80      	pop	{r7, pc}
    4080:	00003b09 	.word	0x00003b09
    4084:	20000cf8 	.word	0x20000cf8
    4088:	0000aec5 	.word	0x0000aec5

0000408c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    408c:	b580      	push	{r7, lr}
    408e:	b084      	sub	sp, #16
    4090:	af00      	add	r7, sp, #0
    4092:	4603      	mov	r3, r0
    4094:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4096:	79fb      	ldrb	r3, [r7, #7]
    4098:	4618      	mov	r0, r3
    409a:	4b0d      	ldr	r3, [pc, #52]	; (40d0 <usb_d_ep_deinit+0x44>)
    409c:	4798      	blx	r3
    409e:	4603      	mov	r3, r0
    40a0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    40a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    40a6:	015b      	lsls	r3, r3, #5
    40a8:	4a0a      	ldr	r2, [pc, #40]	; (40d4 <usb_d_ep_deinit+0x48>)
    40aa:	4413      	add	r3, r2
    40ac:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    40ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    40b2:	2b00      	cmp	r3, #0
    40b4:	db07      	blt.n	40c6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    40b6:	79fb      	ldrb	r3, [r7, #7]
    40b8:	4618      	mov	r0, r3
    40ba:	4b07      	ldr	r3, [pc, #28]	; (40d8 <usb_d_ep_deinit+0x4c>)
    40bc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    40be:	68bb      	ldr	r3, [r7, #8]
    40c0:	22ff      	movs	r2, #255	; 0xff
    40c2:	705a      	strb	r2, [r3, #1]
    40c4:	e000      	b.n	40c8 <usb_d_ep_deinit+0x3c>
		return;
    40c6:	bf00      	nop
}
    40c8:	3710      	adds	r7, #16
    40ca:	46bd      	mov	sp, r7
    40cc:	bd80      	pop	{r7, pc}
    40ce:	bf00      	nop
    40d0:	00003b09 	.word	0x00003b09
    40d4:	20000cf8 	.word	0x20000cf8
    40d8:	0000aff9 	.word	0x0000aff9

000040dc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    40dc:	b580      	push	{r7, lr}
    40de:	b086      	sub	sp, #24
    40e0:	af00      	add	r7, sp, #0
    40e2:	4603      	mov	r3, r0
    40e4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    40e6:	79fb      	ldrb	r3, [r7, #7]
    40e8:	4618      	mov	r0, r3
    40ea:	4b15      	ldr	r3, [pc, #84]	; (4140 <usb_d_ep_enable+0x64>)
    40ec:	4798      	blx	r3
    40ee:	4603      	mov	r3, r0
    40f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    40f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    40f6:	015b      	lsls	r3, r3, #5
    40f8:	4a12      	ldr	r2, [pc, #72]	; (4144 <usb_d_ep_enable+0x68>)
    40fa:	4413      	add	r3, r2
    40fc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    40fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4102:	2b00      	cmp	r3, #0
    4104:	da02      	bge.n	410c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    4106:	f06f 0311 	mvn.w	r3, #17
    410a:	e014      	b.n	4136 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    410c:	693b      	ldr	r3, [r7, #16]
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	2b00      	cmp	r3, #0
    4112:	d101      	bne.n	4118 <usb_d_ep_enable+0x3c>
    4114:	2202      	movs	r2, #2
    4116:	e000      	b.n	411a <usb_d_ep_enable+0x3e>
    4118:	2201      	movs	r2, #1
    411a:	693b      	ldr	r3, [r7, #16]
    411c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    411e:	79fb      	ldrb	r3, [r7, #7]
    4120:	4618      	mov	r0, r3
    4122:	4b09      	ldr	r3, [pc, #36]	; (4148 <usb_d_ep_enable+0x6c>)
    4124:	4798      	blx	r3
    4126:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	2b00      	cmp	r3, #0
    412c:	da02      	bge.n	4134 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    412e:	693b      	ldr	r3, [r7, #16]
    4130:	2200      	movs	r2, #0
    4132:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    4134:	68fb      	ldr	r3, [r7, #12]
}
    4136:	4618      	mov	r0, r3
    4138:	3718      	adds	r7, #24
    413a:	46bd      	mov	sp, r7
    413c:	bd80      	pop	{r7, pc}
    413e:	bf00      	nop
    4140:	00003b09 	.word	0x00003b09
    4144:	20000cf8 	.word	0x20000cf8
    4148:	0000b0dd 	.word	0x0000b0dd

0000414c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    414c:	b590      	push	{r4, r7, lr}
    414e:	b08d      	sub	sp, #52	; 0x34
    4150:	af02      	add	r7, sp, #8
    4152:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	7a1b      	ldrb	r3, [r3, #8]
    4158:	4618      	mov	r0, r3
    415a:	4b51      	ldr	r3, [pc, #324]	; (42a0 <usb_d_ep_transfer+0x154>)
    415c:	4798      	blx	r3
    415e:	4603      	mov	r3, r0
    4160:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    4162:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4166:	015b      	lsls	r3, r3, #5
    4168:	4a4e      	ldr	r2, [pc, #312]	; (42a4 <usb_d_ep_transfer+0x158>)
    416a:	4413      	add	r3, r2
    416c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	7a1b      	ldrb	r3, [r3, #8]
    4172:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4176:	2b00      	cmp	r3, #0
    4178:	bf14      	ite	ne
    417a:	2301      	movne	r3, #1
    417c:	2300      	moveq	r3, #0
    417e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	7a5b      	ldrb	r3, [r3, #9]
    4186:	2b00      	cmp	r3, #0
    4188:	bf14      	ite	ne
    418a:	2301      	movne	r3, #1
    418c:	2300      	moveq	r3, #0
    418e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    4192:	687b      	ldr	r3, [r7, #4]
    4194:	685b      	ldr	r3, [r3, #4]
    4196:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    4198:	f997 301f 	ldrsb.w	r3, [r7, #31]
    419c:	2b00      	cmp	r3, #0
    419e:	da02      	bge.n	41a6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    41a0:	f06f 0311 	mvn.w	r3, #17
    41a4:	e077      	b.n	4296 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    41a6:	f107 0308 	add.w	r3, r7, #8
    41aa:	4618      	mov	r0, r3
    41ac:	4b3e      	ldr	r3, [pc, #248]	; (42a8 <usb_d_ep_transfer+0x15c>)
    41ae:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    41b0:	69bb      	ldr	r3, [r7, #24]
    41b2:	789b      	ldrb	r3, [r3, #2]
    41b4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    41b6:	7bfb      	ldrb	r3, [r7, #15]
    41b8:	b2db      	uxtb	r3, r3
    41ba:	2b01      	cmp	r3, #1
    41bc:	d10c      	bne.n	41d8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    41be:	69bb      	ldr	r3, [r7, #24]
    41c0:	2203      	movs	r2, #3
    41c2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    41c4:	f107 0308 	add.w	r3, r7, #8
    41c8:	4618      	mov	r0, r3
    41ca:	4b38      	ldr	r3, [pc, #224]	; (42ac <usb_d_ep_transfer+0x160>)
    41cc:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    41ce:	69bb      	ldr	r3, [r7, #24]
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d151      	bne.n	427a <usb_d_ep_transfer+0x12e>
    41d6:	e017      	b.n	4208 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    41d8:	f107 0308 	add.w	r3, r7, #8
    41dc:	4618      	mov	r0, r3
    41de:	4b33      	ldr	r3, [pc, #204]	; (42ac <usb_d_ep_transfer+0x160>)
    41e0:	4798      	blx	r3
		switch (state) {
    41e2:	7bfb      	ldrb	r3, [r7, #15]
    41e4:	b2db      	uxtb	r3, r3
    41e6:	2b05      	cmp	r3, #5
    41e8:	d004      	beq.n	41f4 <usb_d_ep_transfer+0xa8>
    41ea:	2b06      	cmp	r3, #6
    41ec:	d004      	beq.n	41f8 <usb_d_ep_transfer+0xac>
    41ee:	2b00      	cmp	r3, #0
    41f0:	d005      	beq.n	41fe <usb_d_ep_transfer+0xb2>
    41f2:	e007      	b.n	4204 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    41f4:	2302      	movs	r3, #2
    41f6:	e04e      	b.n	4296 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    41f8:	f06f 030f 	mvn.w	r3, #15
    41fc:	e04b      	b.n	4296 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    41fe:	f06f 0312 	mvn.w	r3, #18
    4202:	e048      	b.n	4296 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    4204:	2301      	movs	r3, #1
    4206:	e046      	b.n	4296 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4208:	69bb      	ldr	r3, [r7, #24]
    420a:	7c9b      	ldrb	r3, [r3, #18]
    420c:	b29a      	uxth	r2, r3
    420e:	69bb      	ldr	r3, [r7, #24]
    4210:	7cdb      	ldrb	r3, [r3, #19]
    4212:	b29b      	uxth	r3, r3
    4214:	021b      	lsls	r3, r3, #8
    4216:	b29b      	uxth	r3, r3
    4218:	4413      	add	r3, r2
    421a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    421c:	8afb      	ldrh	r3, [r7, #22]
    421e:	2b00      	cmp	r3, #0
    4220:	d10b      	bne.n	423a <usb_d_ep_transfer+0xee>
			dir                 = true;
    4222:	2301      	movs	r3, #1
    4224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4228:	2300      	movs	r3, #0
    422a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    422c:	2301      	movs	r3, #1
    422e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4232:	69bb      	ldr	r3, [r7, #24]
    4234:	2204      	movs	r2, #4
    4236:	709a      	strb	r2, [r3, #2]
    4238:	e01f      	b.n	427a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    423a:	69bb      	ldr	r3, [r7, #24]
    423c:	7b1b      	ldrb	r3, [r3, #12]
    423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4242:	2b00      	cmp	r3, #0
    4244:	bf14      	ite	ne
    4246:	2301      	movne	r3, #1
    4248:	2300      	moveq	r3, #0
    424a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    424e:	8afa      	ldrh	r2, [r7, #22]
    4250:	6a3b      	ldr	r3, [r7, #32]
    4252:	429a      	cmp	r2, r3
    4254:	d201      	bcs.n	425a <usb_d_ep_transfer+0x10e>
				len = req_len;
    4256:	8afb      	ldrh	r3, [r7, #22]
    4258:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    425a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    425e:	2b00      	cmp	r3, #0
    4260:	d008      	beq.n	4274 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    4262:	8afa      	ldrh	r2, [r7, #22]
    4264:	6a3b      	ldr	r3, [r7, #32]
    4266:	429a      	cmp	r2, r3
    4268:	bf8c      	ite	hi
    426a:	2301      	movhi	r3, #1
    426c:	2300      	movls	r3, #0
    426e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    4272:	e002      	b.n	427a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4274:	2300      	movs	r3, #0
    4276:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	7a18      	ldrb	r0, [r3, #8]
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    4286:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    428a:	9300      	str	r3, [sp, #0]
    428c:	6a3b      	ldr	r3, [r7, #32]
    428e:	4c08      	ldr	r4, [pc, #32]	; (42b0 <usb_d_ep_transfer+0x164>)
    4290:	47a0      	blx	r4
    4292:	6138      	str	r0, [r7, #16]
	return rc;
    4294:	693b      	ldr	r3, [r7, #16]
}
    4296:	4618      	mov	r0, r3
    4298:	372c      	adds	r7, #44	; 0x2c
    429a:	46bd      	mov	sp, r7
    429c:	bd90      	pop	{r4, r7, pc}
    429e:	bf00      	nop
    42a0:	00003b09 	.word	0x00003b09
    42a4:	20000cf8 	.word	0x20000cf8
    42a8:	000029dd 	.word	0x000029dd
    42ac:	00002a03 	.word	0x00002a03
    42b0:	00003b89 	.word	0x00003b89

000042b4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b084      	sub	sp, #16
    42b8:	af00      	add	r7, sp, #0
    42ba:	4603      	mov	r3, r0
    42bc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    42be:	79fb      	ldrb	r3, [r7, #7]
    42c0:	4618      	mov	r0, r3
    42c2:	4b0e      	ldr	r3, [pc, #56]	; (42fc <usb_d_ep_abort+0x48>)
    42c4:	4798      	blx	r3
    42c6:	4603      	mov	r3, r0
    42c8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    42ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    42ce:	015b      	lsls	r3, r3, #5
    42d0:	4a0b      	ldr	r2, [pc, #44]	; (4300 <usb_d_ep_abort+0x4c>)
    42d2:	4413      	add	r3, r2
    42d4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    42d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    42da:	2b00      	cmp	r3, #0
    42dc:	db0a      	blt.n	42f4 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    42de:	79fb      	ldrb	r3, [r7, #7]
    42e0:	4618      	mov	r0, r3
    42e2:	4b08      	ldr	r3, [pc, #32]	; (4304 <usb_d_ep_abort+0x50>)
    42e4:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    42e6:	68bb      	ldr	r3, [r7, #8]
    42e8:	2201      	movs	r2, #1
    42ea:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    42ec:	68bb      	ldr	r3, [r7, #8]
    42ee:	2204      	movs	r2, #4
    42f0:	70da      	strb	r2, [r3, #3]
    42f2:	e000      	b.n	42f6 <usb_d_ep_abort+0x42>
		return;
    42f4:	bf00      	nop
}
    42f6:	3710      	adds	r7, #16
    42f8:	46bd      	mov	sp, r7
    42fa:	bd80      	pop	{r7, pc}
    42fc:	00003b09 	.word	0x00003b09
    4300:	20000cf8 	.word	0x20000cf8
    4304:	0000b849 	.word	0x0000b849

00004308 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4308:	b580      	push	{r7, lr}
    430a:	b086      	sub	sp, #24
    430c:	af00      	add	r7, sp, #0
    430e:	4603      	mov	r3, r0
    4310:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4312:	79fb      	ldrb	r3, [r7, #7]
    4314:	4618      	mov	r0, r3
    4316:	4b1a      	ldr	r3, [pc, #104]	; (4380 <_usb_d_ep_halt_clr+0x78>)
    4318:	4798      	blx	r3
    431a:	4603      	mov	r3, r0
    431c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    431e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4322:	015b      	lsls	r3, r3, #5
    4324:	4a17      	ldr	r2, [pc, #92]	; (4384 <_usb_d_ep_halt_clr+0x7c>)
    4326:	4413      	add	r3, r2
    4328:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    432a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    432e:	2b00      	cmp	r3, #0
    4330:	da02      	bge.n	4338 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    4332:	f06f 0311 	mvn.w	r3, #17
    4336:	e01f      	b.n	4378 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4338:	79fb      	ldrb	r3, [r7, #7]
    433a:	2102      	movs	r1, #2
    433c:	4618      	mov	r0, r3
    433e:	4b12      	ldr	r3, [pc, #72]	; (4388 <_usb_d_ep_halt_clr+0x80>)
    4340:	4798      	blx	r3
    4342:	4603      	mov	r3, r0
    4344:	2b00      	cmp	r3, #0
    4346:	d016      	beq.n	4376 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4348:	79fb      	ldrb	r3, [r7, #7]
    434a:	2100      	movs	r1, #0
    434c:	4618      	mov	r0, r3
    434e:	4b0e      	ldr	r3, [pc, #56]	; (4388 <_usb_d_ep_halt_clr+0x80>)
    4350:	4798      	blx	r3
    4352:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	2b00      	cmp	r3, #0
    4358:	da01      	bge.n	435e <_usb_d_ep_halt_clr+0x56>
			return rc;
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	e00c      	b.n	4378 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    435e:	693b      	ldr	r3, [r7, #16]
    4360:	2201      	movs	r2, #1
    4362:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4364:	693b      	ldr	r3, [r7, #16]
    4366:	2203      	movs	r2, #3
    4368:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    436a:	693b      	ldr	r3, [r7, #16]
    436c:	69db      	ldr	r3, [r3, #28]
    436e:	79f8      	ldrb	r0, [r7, #7]
    4370:	2200      	movs	r2, #0
    4372:	2103      	movs	r1, #3
    4374:	4798      	blx	r3
	}
	return ERR_NONE;
    4376:	2300      	movs	r3, #0
}
    4378:	4618      	mov	r0, r3
    437a:	3718      	adds	r7, #24
    437c:	46bd      	mov	sp, r7
    437e:	bd80      	pop	{r7, pc}
    4380:	00003b09 	.word	0x00003b09
    4384:	20000cf8 	.word	0x20000cf8
    4388:	0000b455 	.word	0x0000b455

0000438c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	4603      	mov	r3, r0
    4394:	460a      	mov	r2, r1
    4396:	71fb      	strb	r3, [r7, #7]
    4398:	4613      	mov	r3, r2
    439a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    439c:	79bb      	ldrb	r3, [r7, #6]
    439e:	2b00      	cmp	r3, #0
    43a0:	d105      	bne.n	43ae <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    43a2:	79fb      	ldrb	r3, [r7, #7]
    43a4:	4618      	mov	r0, r3
    43a6:	4b0c      	ldr	r3, [pc, #48]	; (43d8 <usb_d_ep_halt+0x4c>)
    43a8:	4798      	blx	r3
    43aa:	4603      	mov	r3, r0
    43ac:	e00f      	b.n	43ce <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    43ae:	79bb      	ldrb	r3, [r7, #6]
    43b0:	2b01      	cmp	r3, #1
    43b2:	d106      	bne.n	43c2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    43b4:	79fb      	ldrb	r3, [r7, #7]
    43b6:	2101      	movs	r1, #1
    43b8:	4618      	mov	r0, r3
    43ba:	4b08      	ldr	r3, [pc, #32]	; (43dc <usb_d_ep_halt+0x50>)
    43bc:	4798      	blx	r3
    43be:	4603      	mov	r3, r0
    43c0:	e005      	b.n	43ce <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    43c2:	79fb      	ldrb	r3, [r7, #7]
    43c4:	2102      	movs	r1, #2
    43c6:	4618      	mov	r0, r3
    43c8:	4b04      	ldr	r3, [pc, #16]	; (43dc <usb_d_ep_halt+0x50>)
    43ca:	4798      	blx	r3
    43cc:	4603      	mov	r3, r0
	}
}
    43ce:	4618      	mov	r0, r3
    43d0:	3708      	adds	r7, #8
    43d2:	46bd      	mov	sp, r7
    43d4:	bd80      	pop	{r7, pc}
    43d6:	bf00      	nop
    43d8:	00004309 	.word	0x00004309
    43dc:	0000b455 	.word	0x0000b455

000043e0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b086      	sub	sp, #24
    43e4:	af00      	add	r7, sp, #0
    43e6:	4603      	mov	r3, r0
    43e8:	603a      	str	r2, [r7, #0]
    43ea:	71fb      	strb	r3, [r7, #7]
    43ec:	460b      	mov	r3, r1
    43ee:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    43f0:	79fb      	ldrb	r3, [r7, #7]
    43f2:	4618      	mov	r0, r3
    43f4:	4b16      	ldr	r3, [pc, #88]	; (4450 <usb_d_ep_register_callback+0x70>)
    43f6:	4798      	blx	r3
    43f8:	4603      	mov	r3, r0
    43fa:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    43fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4400:	015b      	lsls	r3, r3, #5
    4402:	4a14      	ldr	r2, [pc, #80]	; (4454 <usb_d_ep_register_callback+0x74>)
    4404:	4413      	add	r3, r2
    4406:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4408:	683b      	ldr	r3, [r7, #0]
    440a:	2b00      	cmp	r3, #0
    440c:	d001      	beq.n	4412 <usb_d_ep_register_callback+0x32>
    440e:	683b      	ldr	r3, [r7, #0]
    4410:	e000      	b.n	4414 <usb_d_ep_register_callback+0x34>
    4412:	4b11      	ldr	r3, [pc, #68]	; (4458 <usb_d_ep_register_callback+0x78>)
    4414:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4416:	f997 3017 	ldrsb.w	r3, [r7, #23]
    441a:	2b00      	cmp	r3, #0
    441c:	db13      	blt.n	4446 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    441e:	79bb      	ldrb	r3, [r7, #6]
    4420:	2b01      	cmp	r3, #1
    4422:	d008      	beq.n	4436 <usb_d_ep_register_callback+0x56>
    4424:	2b02      	cmp	r3, #2
    4426:	d00a      	beq.n	443e <usb_d_ep_register_callback+0x5e>
    4428:	2b00      	cmp	r3, #0
    442a:	d000      	beq.n	442e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    442c:	e00c      	b.n	4448 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    442e:	693b      	ldr	r3, [r7, #16]
    4430:	68fa      	ldr	r2, [r7, #12]
    4432:	615a      	str	r2, [r3, #20]
		break;
    4434:	e008      	b.n	4448 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4436:	693b      	ldr	r3, [r7, #16]
    4438:	68fa      	ldr	r2, [r7, #12]
    443a:	619a      	str	r2, [r3, #24]
		break;
    443c:	e004      	b.n	4448 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    443e:	693b      	ldr	r3, [r7, #16]
    4440:	68fa      	ldr	r2, [r7, #12]
    4442:	61da      	str	r2, [r3, #28]
		break;
    4444:	e000      	b.n	4448 <usb_d_ep_register_callback+0x68>
		return;
    4446:	bf00      	nop
	}
}
    4448:	3718      	adds	r7, #24
    444a:	46bd      	mov	sp, r7
    444c:	bd80      	pop	{r7, pc}
    444e:	bf00      	nop
    4450:	00003b09 	.word	0x00003b09
    4454:	20000cf8 	.word	0x20000cf8
    4458:	00003bdd 	.word	0x00003bdd

0000445c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    445c:	b480      	push	{r7}
    445e:	b085      	sub	sp, #20
    4460:	af00      	add	r7, sp, #0
    4462:	4603      	mov	r3, r0
    4464:	60b9      	str	r1, [r7, #8]
    4466:	607a      	str	r2, [r7, #4]
    4468:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    446a:	7bfb      	ldrb	r3, [r7, #15]
    446c:	f083 0301 	eor.w	r3, r3, #1
    4470:	b2db      	uxtb	r3, r3
    4472:	2b00      	cmp	r3, #0
    4474:	d000      	beq.n	4478 <assert+0x1c>
		__asm("BKPT #0");
    4476:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4478:	bf00      	nop
    447a:	3714      	adds	r7, #20
    447c:	46bd      	mov	sp, r7
    447e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4482:	4770      	bx	lr

00004484 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4484:	b480      	push	{r7}
    4486:	b085      	sub	sp, #20
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
    448c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    448e:	687b      	ldr	r3, [r7, #4]
    4490:	681b      	ldr	r3, [r3, #0]
    4492:	60fb      	str	r3, [r7, #12]
    4494:	e008      	b.n	44a8 <is_list_element+0x24>
		if (it == element) {
    4496:	68fa      	ldr	r2, [r7, #12]
    4498:	683b      	ldr	r3, [r7, #0]
    449a:	429a      	cmp	r2, r3
    449c:	d101      	bne.n	44a2 <is_list_element+0x1e>
			return true;
    449e:	2301      	movs	r3, #1
    44a0:	e006      	b.n	44b0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	60fb      	str	r3, [r7, #12]
    44a8:	68fb      	ldr	r3, [r7, #12]
    44aa:	2b00      	cmp	r3, #0
    44ac:	d1f3      	bne.n	4496 <is_list_element+0x12>
		}
	}

	return false;
    44ae:	2300      	movs	r3, #0
}
    44b0:	4618      	mov	r0, r3
    44b2:	3714      	adds	r7, #20
    44b4:	46bd      	mov	sp, r7
    44b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ba:	4770      	bx	lr

000044bc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    44bc:	b580      	push	{r7, lr}
    44be:	b082      	sub	sp, #8
    44c0:	af00      	add	r7, sp, #0
    44c2:	6078      	str	r0, [r7, #4]
    44c4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    44c6:	6839      	ldr	r1, [r7, #0]
    44c8:	6878      	ldr	r0, [r7, #4]
    44ca:	4b0f      	ldr	r3, [pc, #60]	; (4508 <list_insert_as_head+0x4c>)
    44cc:	4798      	blx	r3
    44ce:	4603      	mov	r3, r0
    44d0:	2b00      	cmp	r3, #0
    44d2:	bf14      	ite	ne
    44d4:	2301      	movne	r3, #1
    44d6:	2300      	moveq	r3, #0
    44d8:	b2db      	uxtb	r3, r3
    44da:	f083 0301 	eor.w	r3, r3, #1
    44de:	b2db      	uxtb	r3, r3
    44e0:	f003 0301 	and.w	r3, r3, #1
    44e4:	b2db      	uxtb	r3, r3
    44e6:	2239      	movs	r2, #57	; 0x39
    44e8:	4908      	ldr	r1, [pc, #32]	; (450c <list_insert_as_head+0x50>)
    44ea:	4618      	mov	r0, r3
    44ec:	4b08      	ldr	r3, [pc, #32]	; (4510 <list_insert_as_head+0x54>)
    44ee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	681a      	ldr	r2, [r3, #0]
    44f4:	683b      	ldr	r3, [r7, #0]
    44f6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    44f8:	687b      	ldr	r3, [r7, #4]
    44fa:	683a      	ldr	r2, [r7, #0]
    44fc:	601a      	str	r2, [r3, #0]
}
    44fe:	bf00      	nop
    4500:	3708      	adds	r7, #8
    4502:	46bd      	mov	sp, r7
    4504:	bd80      	pop	{r7, pc}
    4506:	bf00      	nop
    4508:	00004485 	.word	0x00004485
    450c:	00010fcc 	.word	0x00010fcc
    4510:	0000445d 	.word	0x0000445d

00004514 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4514:	b480      	push	{r7}
    4516:	b083      	sub	sp, #12
    4518:	af00      	add	r7, sp, #0
    451a:	6078      	str	r0, [r7, #4]
    451c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    451e:	687b      	ldr	r3, [r7, #4]
    4520:	681a      	ldr	r2, [r3, #0]
    4522:	683b      	ldr	r3, [r7, #0]
    4524:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4526:	687b      	ldr	r3, [r7, #4]
    4528:	683a      	ldr	r2, [r7, #0]
    452a:	601a      	str	r2, [r3, #0]
}
    452c:	bf00      	nop
    452e:	370c      	adds	r7, #12
    4530:	46bd      	mov	sp, r7
    4532:	f85d 7b04 	ldr.w	r7, [sp], #4
    4536:	4770      	bx	lr

00004538 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4538:	b580      	push	{r7, lr}
    453a:	b084      	sub	sp, #16
    453c:	af00      	add	r7, sp, #0
    453e:	6078      	str	r0, [r7, #4]
    4540:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4542:	687b      	ldr	r3, [r7, #4]
    4544:	681b      	ldr	r3, [r3, #0]
    4546:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4548:	6839      	ldr	r1, [r7, #0]
    454a:	6878      	ldr	r0, [r7, #4]
    454c:	4b16      	ldr	r3, [pc, #88]	; (45a8 <list_insert_at_end+0x70>)
    454e:	4798      	blx	r3
    4550:	4603      	mov	r3, r0
    4552:	2b00      	cmp	r3, #0
    4554:	bf14      	ite	ne
    4556:	2301      	movne	r3, #1
    4558:	2300      	moveq	r3, #0
    455a:	b2db      	uxtb	r3, r3
    455c:	f083 0301 	eor.w	r3, r3, #1
    4560:	b2db      	uxtb	r3, r3
    4562:	f003 0301 	and.w	r3, r3, #1
    4566:	b2db      	uxtb	r3, r3
    4568:	224f      	movs	r2, #79	; 0x4f
    456a:	4910      	ldr	r1, [pc, #64]	; (45ac <list_insert_at_end+0x74>)
    456c:	4618      	mov	r0, r3
    456e:	4b10      	ldr	r3, [pc, #64]	; (45b0 <list_insert_at_end+0x78>)
    4570:	4798      	blx	r3

	if (!list->head) {
    4572:	687b      	ldr	r3, [r7, #4]
    4574:	681b      	ldr	r3, [r3, #0]
    4576:	2b00      	cmp	r3, #0
    4578:	d109      	bne.n	458e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	683a      	ldr	r2, [r7, #0]
    457e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4580:	683b      	ldr	r3, [r7, #0]
    4582:	2200      	movs	r2, #0
    4584:	601a      	str	r2, [r3, #0]
		return;
    4586:	e00c      	b.n	45a2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4588:	68fb      	ldr	r3, [r7, #12]
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	2b00      	cmp	r3, #0
    4594:	d1f8      	bne.n	4588 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	683a      	ldr	r2, [r7, #0]
    459a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    459c:	683b      	ldr	r3, [r7, #0]
    459e:	2200      	movs	r2, #0
    45a0:	601a      	str	r2, [r3, #0]
}
    45a2:	3710      	adds	r7, #16
    45a4:	46bd      	mov	sp, r7
    45a6:	bd80      	pop	{r7, pc}
    45a8:	00004485 	.word	0x00004485
    45ac:	00010fcc 	.word	0x00010fcc
    45b0:	0000445d 	.word	0x0000445d

000045b4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    45b4:	b480      	push	{r7}
    45b6:	b085      	sub	sp, #20
    45b8:	af00      	add	r7, sp, #0
    45ba:	6078      	str	r0, [r7, #4]
	if (list->head) {
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	2b00      	cmp	r3, #0
    45c2:	d009      	beq.n	45d8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	681b      	ldr	r3, [r3, #0]
    45c8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	681a      	ldr	r2, [r3, #0]
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	e000      	b.n	45da <list_remove_head+0x26>
	}

	return NULL;
    45d8:	2300      	movs	r3, #0
}
    45da:	4618      	mov	r0, r3
    45dc:	3714      	adds	r7, #20
    45de:	46bd      	mov	sp, r7
    45e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e4:	4770      	bx	lr

000045e6 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    45e6:	b480      	push	{r7}
    45e8:	b085      	sub	sp, #20
    45ea:	af00      	add	r7, sp, #0
    45ec:	6078      	str	r0, [r7, #4]
    45ee:	6039      	str	r1, [r7, #0]
	if (!element) {
    45f0:	683b      	ldr	r3, [r7, #0]
    45f2:	2b00      	cmp	r3, #0
    45f4:	d101      	bne.n	45fa <list_delete_element+0x14>
		return false;
    45f6:	2300      	movs	r3, #0
    45f8:	e024      	b.n	4644 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    45fa:	687b      	ldr	r3, [r7, #4]
    45fc:	681a      	ldr	r2, [r3, #0]
    45fe:	683b      	ldr	r3, [r7, #0]
    4600:	429a      	cmp	r2, r3
    4602:	d106      	bne.n	4612 <list_delete_element+0x2c>
		list->head = list->head->next;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	681a      	ldr	r2, [r3, #0]
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	601a      	str	r2, [r3, #0]
		return true;
    460e:	2301      	movs	r3, #1
    4610:	e018      	b.n	4644 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4618:	e002      	b.n	4620 <list_delete_element+0x3a>
			it = it->next;
    461a:	68fb      	ldr	r3, [r7, #12]
    461c:	681b      	ldr	r3, [r3, #0]
    461e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	2b00      	cmp	r3, #0
    4624:	d004      	beq.n	4630 <list_delete_element+0x4a>
    4626:	68fb      	ldr	r3, [r7, #12]
    4628:	681a      	ldr	r2, [r3, #0]
    462a:	683b      	ldr	r3, [r7, #0]
    462c:	429a      	cmp	r2, r3
    462e:	d1f4      	bne.n	461a <list_delete_element+0x34>
		}
		if (it) {
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	2b00      	cmp	r3, #0
    4634:	d005      	beq.n	4642 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4636:	683b      	ldr	r3, [r7, #0]
    4638:	681a      	ldr	r2, [r3, #0]
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	601a      	str	r2, [r3, #0]
			return true;
    463e:	2301      	movs	r3, #1
    4640:	e000      	b.n	4644 <list_delete_element+0x5e>
		}
	}

	return false;
    4642:	2300      	movs	r3, #0
}
    4644:	4618      	mov	r0, r3
    4646:	3714      	adds	r7, #20
    4648:	46bd      	mov	sp, r7
    464a:	f85d 7b04 	ldr.w	r7, [sp], #4
    464e:	4770      	bx	lr

00004650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4650:	b480      	push	{r7}
    4652:	b083      	sub	sp, #12
    4654:	af00      	add	r7, sp, #0
    4656:	4603      	mov	r3, r0
    4658:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    465a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    465e:	2b00      	cmp	r3, #0
    4660:	db0b      	blt.n	467a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4662:	4909      	ldr	r1, [pc, #36]	; (4688 <__NVIC_EnableIRQ+0x38>)
    4664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4668:	095b      	lsrs	r3, r3, #5
    466a:	88fa      	ldrh	r2, [r7, #6]
    466c:	f002 021f 	and.w	r2, r2, #31
    4670:	2001      	movs	r0, #1
    4672:	fa00 f202 	lsl.w	r2, r0, r2
    4676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    467a:	bf00      	nop
    467c:	370c      	adds	r7, #12
    467e:	46bd      	mov	sp, r7
    4680:	f85d 7b04 	ldr.w	r7, [sp], #4
    4684:	4770      	bx	lr
    4686:	bf00      	nop
    4688:	e000e100 	.word	0xe000e100

0000468c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    468c:	b480      	push	{r7}
    468e:	b083      	sub	sp, #12
    4690:	af00      	add	r7, sp, #0
    4692:	4603      	mov	r3, r0
    4694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    469a:	2b00      	cmp	r3, #0
    469c:	db10      	blt.n	46c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    469e:	490b      	ldr	r1, [pc, #44]	; (46cc <__NVIC_DisableIRQ+0x40>)
    46a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    46a4:	095b      	lsrs	r3, r3, #5
    46a6:	88fa      	ldrh	r2, [r7, #6]
    46a8:	f002 021f 	and.w	r2, r2, #31
    46ac:	2001      	movs	r0, #1
    46ae:	fa00 f202 	lsl.w	r2, r0, r2
    46b2:	3320      	adds	r3, #32
    46b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    46b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    46bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    46c0:	bf00      	nop
    46c2:	370c      	adds	r7, #12
    46c4:	46bd      	mov	sp, r7
    46c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ca:	4770      	bx	lr
    46cc:	e000e100 	.word	0xe000e100

000046d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    46d0:	b480      	push	{r7}
    46d2:	b083      	sub	sp, #12
    46d4:	af00      	add	r7, sp, #0
    46d6:	4603      	mov	r3, r0
    46d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    46da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    46de:	2b00      	cmp	r3, #0
    46e0:	db0c      	blt.n	46fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    46e2:	4909      	ldr	r1, [pc, #36]	; (4708 <__NVIC_ClearPendingIRQ+0x38>)
    46e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    46e8:	095b      	lsrs	r3, r3, #5
    46ea:	88fa      	ldrh	r2, [r7, #6]
    46ec:	f002 021f 	and.w	r2, r2, #31
    46f0:	2001      	movs	r0, #1
    46f2:	fa00 f202 	lsl.w	r2, r0, r2
    46f6:	3360      	adds	r3, #96	; 0x60
    46f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    46fc:	bf00      	nop
    46fe:	370c      	adds	r7, #12
    4700:	46bd      	mov	sp, r7
    4702:	f85d 7b04 	ldr.w	r7, [sp], #4
    4706:	4770      	bx	lr
    4708:	e000e100 	.word	0xe000e100

0000470c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    470c:	b480      	push	{r7}
    470e:	b083      	sub	sp, #12
    4710:	af00      	add	r7, sp, #0
    4712:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4718:	095b      	lsrs	r3, r3, #5
    471a:	f003 0301 	and.w	r3, r3, #1
    471e:	2b00      	cmp	r3, #0
    4720:	bf14      	ite	ne
    4722:	2301      	movne	r3, #1
    4724:	2300      	moveq	r3, #0
    4726:	b2db      	uxtb	r3, r3
}
    4728:	4618      	mov	r0, r3
    472a:	370c      	adds	r7, #12
    472c:	46bd      	mov	sp, r7
    472e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4732:	4770      	bx	lr

00004734 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4734:	b480      	push	{r7}
    4736:	b083      	sub	sp, #12
    4738:	af00      	add	r7, sp, #0
    473a:	6078      	str	r0, [r7, #4]
    473c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	683a      	ldr	r2, [r7, #0]
    4742:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4744:	bf00      	nop
    4746:	370c      	adds	r7, #12
    4748:	46bd      	mov	sp, r7
    474a:	f85d 7b04 	ldr.w	r7, [sp], #4
    474e:	4770      	bx	lr

00004750 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4750:	b480      	push	{r7}
    4752:	b083      	sub	sp, #12
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
    4758:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	683a      	ldr	r2, [r7, #0]
    475e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4760:	bf00      	nop
    4762:	370c      	adds	r7, #12
    4764:	46bd      	mov	sp, r7
    4766:	f85d 7b04 	ldr.w	r7, [sp], #4
    476a:	4770      	bx	lr

0000476c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    476c:	b480      	push	{r7}
    476e:	b083      	sub	sp, #12
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	699b      	ldr	r3, [r3, #24]
    4778:	f043 0201 	orr.w	r2, r3, #1
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4780:	bf00      	nop
    4782:	370c      	adds	r7, #12
    4784:	46bd      	mov	sp, r7
    4786:	f85d 7b04 	ldr.w	r7, [sp], #4
    478a:	4770      	bx	lr

0000478c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    478c:	b480      	push	{r7}
    478e:	b085      	sub	sp, #20
    4790:	af00      	add	r7, sp, #0
    4792:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	699b      	ldr	r3, [r3, #24]
    4798:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	f003 0301 	and.w	r3, r3, #1
    47a0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    47a2:	68fb      	ldr	r3, [r7, #12]
    47a4:	2b00      	cmp	r3, #0
    47a6:	bf14      	ite	ne
    47a8:	2301      	movne	r3, #1
    47aa:	2300      	moveq	r3, #0
    47ac:	b2db      	uxtb	r3, r3
}
    47ae:	4618      	mov	r0, r3
    47b0:	3714      	adds	r7, #20
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr

000047ba <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    47ba:	b480      	push	{r7}
    47bc:	b083      	sub	sp, #12
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	699b      	ldr	r3, [r3, #24]
    47c6:	f023 0201 	bic.w	r2, r3, #1
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    47ce:	bf00      	nop
    47d0:	370c      	adds	r7, #12
    47d2:	46bd      	mov	sp, r7
    47d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47d8:	4770      	bx	lr

000047da <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    47da:	b480      	push	{r7}
    47dc:	b083      	sub	sp, #12
    47de:	af00      	add	r7, sp, #0
    47e0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	699b      	ldr	r3, [r3, #24]
    47e6:	f043 0202 	orr.w	r2, r3, #2
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    47ee:	bf00      	nop
    47f0:	370c      	adds	r7, #12
    47f2:	46bd      	mov	sp, r7
    47f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f8:	4770      	bx	lr

000047fa <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    47fa:	b480      	push	{r7}
    47fc:	b083      	sub	sp, #12
    47fe:	af00      	add	r7, sp, #0
    4800:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	699b      	ldr	r3, [r3, #24]
    4806:	f023 0202 	bic.w	r2, r3, #2
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    480e:	bf00      	nop
    4810:	370c      	adds	r7, #12
    4812:	46bd      	mov	sp, r7
    4814:	f85d 7b04 	ldr.w	r7, [sp], #4
    4818:	4770      	bx	lr

0000481a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    481a:	b480      	push	{r7}
    481c:	b083      	sub	sp, #12
    481e:	af00      	add	r7, sp, #0
    4820:	6078      	str	r0, [r7, #4]
    4822:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	699a      	ldr	r2, [r3, #24]
    4828:	683b      	ldr	r3, [r7, #0]
    482a:	431a      	orrs	r2, r3
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4830:	bf00      	nop
    4832:	370c      	adds	r7, #12
    4834:	46bd      	mov	sp, r7
    4836:	f85d 7b04 	ldr.w	r7, [sp], #4
    483a:	4770      	bx	lr

0000483c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    483c:	b480      	push	{r7}
    483e:	b083      	sub	sp, #12
    4840:	af00      	add	r7, sp, #0
    4842:	6078      	str	r0, [r7, #4]
    4844:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    4846:	687b      	ldr	r3, [r7, #4]
    4848:	683a      	ldr	r2, [r7, #0]
    484a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    484c:	bf00      	nop
    484e:	370c      	adds	r7, #12
    4850:	46bd      	mov	sp, r7
    4852:	f85d 7b04 	ldr.w	r7, [sp], #4
    4856:	4770      	bx	lr

00004858 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4858:	b480      	push	{r7}
    485a:	b083      	sub	sp, #12
    485c:	af00      	add	r7, sp, #0
    485e:	6078      	str	r0, [r7, #4]
    4860:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	683a      	ldr	r2, [r7, #0]
    4866:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4868:	bf00      	nop
    486a:	370c      	adds	r7, #12
    486c:	46bd      	mov	sp, r7
    486e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4872:	4770      	bx	lr

00004874 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4874:	b480      	push	{r7}
    4876:	b083      	sub	sp, #12
    4878:	af00      	add	r7, sp, #0
    487a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4880:	4618      	mov	r0, r3
    4882:	370c      	adds	r7, #12
    4884:	46bd      	mov	sp, r7
    4886:	f85d 7b04 	ldr.w	r7, [sp], #4
    488a:	4770      	bx	lr

0000488c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    488c:	b480      	push	{r7}
    488e:	b083      	sub	sp, #12
    4890:	af00      	add	r7, sp, #0
    4892:	6078      	str	r0, [r7, #4]
    4894:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    4896:	687b      	ldr	r3, [r7, #4]
    4898:	683a      	ldr	r2, [r7, #0]
    489a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    489c:	bf00      	nop
    489e:	370c      	adds	r7, #12
    48a0:	46bd      	mov	sp, r7
    48a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a6:	4770      	bx	lr

000048a8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    48a8:	b480      	push	{r7}
    48aa:	b083      	sub	sp, #12
    48ac:	af00      	add	r7, sp, #0
    48ae:	6078      	str	r0, [r7, #4]
    48b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	683a      	ldr	r2, [r7, #0]
    48b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    48ba:	bf00      	nop
    48bc:	370c      	adds	r7, #12
    48be:	46bd      	mov	sp, r7
    48c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c4:	4770      	bx	lr

000048c6 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    48c6:	b480      	push	{r7}
    48c8:	b083      	sub	sp, #12
    48ca:	af00      	add	r7, sp, #0
    48cc:	6078      	str	r0, [r7, #4]
    48ce:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	683a      	ldr	r2, [r7, #0]
    48d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    48d8:	bf00      	nop
    48da:	370c      	adds	r7, #12
    48dc:	46bd      	mov	sp, r7
    48de:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e2:	4770      	bx	lr

000048e4 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    48e4:	b480      	push	{r7}
    48e6:	b083      	sub	sp, #12
    48e8:	af00      	add	r7, sp, #0
    48ea:	6078      	str	r0, [r7, #4]
    48ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	683a      	ldr	r2, [r7, #0]
    48f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    48f6:	bf00      	nop
    48f8:	370c      	adds	r7, #12
    48fa:	46bd      	mov	sp, r7
    48fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4900:	4770      	bx	lr

00004902 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4902:	b480      	push	{r7}
    4904:	b083      	sub	sp, #12
    4906:	af00      	add	r7, sp, #0
    4908:	6078      	str	r0, [r7, #4]
    490a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	683a      	ldr	r2, [r7, #0]
    4910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4914:	bf00      	nop
    4916:	370c      	adds	r7, #12
    4918:	46bd      	mov	sp, r7
    491a:	f85d 7b04 	ldr.w	r7, [sp], #4
    491e:	4770      	bx	lr

00004920 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4920:	b480      	push	{r7}
    4922:	b083      	sub	sp, #12
    4924:	af00      	add	r7, sp, #0
    4926:	6078      	str	r0, [r7, #4]
    4928:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	683a      	ldr	r2, [r7, #0]
    492e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4932:	bf00      	nop
    4934:	370c      	adds	r7, #12
    4936:	46bd      	mov	sp, r7
    4938:	f85d 7b04 	ldr.w	r7, [sp], #4
    493c:	4770      	bx	lr

0000493e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    493e:	b480      	push	{r7}
    4940:	b083      	sub	sp, #12
    4942:	af00      	add	r7, sp, #0
    4944:	6078      	str	r0, [r7, #4]
    4946:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	683a      	ldr	r2, [r7, #0]
    494c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4950:	bf00      	nop
    4952:	370c      	adds	r7, #12
    4954:	46bd      	mov	sp, r7
    4956:	f85d 7b04 	ldr.w	r7, [sp], #4
    495a:	4770      	bx	lr

0000495c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    495c:	b480      	push	{r7}
    495e:	b083      	sub	sp, #12
    4960:	af00      	add	r7, sp, #0
    4962:	6078      	str	r0, [r7, #4]
    4964:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	683a      	ldr	r2, [r7, #0]
    496a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    496e:	bf00      	nop
    4970:	370c      	adds	r7, #12
    4972:	46bd      	mov	sp, r7
    4974:	f85d 7b04 	ldr.w	r7, [sp], #4
    4978:	4770      	bx	lr

0000497a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    497a:	b480      	push	{r7}
    497c:	b083      	sub	sp, #12
    497e:	af00      	add	r7, sp, #0
    4980:	6078      	str	r0, [r7, #4]
    4982:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	683a      	ldr	r2, [r7, #0]
    4988:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    498c:	bf00      	nop
    498e:	370c      	adds	r7, #12
    4990:	46bd      	mov	sp, r7
    4992:	f85d 7b04 	ldr.w	r7, [sp], #4
    4996:	4770      	bx	lr

00004998 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4998:	b480      	push	{r7}
    499a:	b083      	sub	sp, #12
    499c:	af00      	add	r7, sp, #0
    499e:	6078      	str	r0, [r7, #4]
    49a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	683a      	ldr	r2, [r7, #0]
    49a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    49aa:	bf00      	nop
    49ac:	370c      	adds	r7, #12
    49ae:	46bd      	mov	sp, r7
    49b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b4:	4770      	bx	lr
	...

000049b8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	b082      	sub	sp, #8
    49bc:	af00      	add	r7, sp, #0
    49be:	6078      	str	r0, [r7, #4]
    49c0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	683a      	ldr	r2, [r7, #0]
    49c6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	4618      	mov	r0, r3
    49ce:	4b56      	ldr	r3, [pc, #344]	; (4b28 <_can_async_init+0x170>)
    49d0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    49d2:	bf00      	nop
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	681b      	ldr	r3, [r3, #0]
    49d8:	4618      	mov	r0, r3
    49da:	4b54      	ldr	r3, [pc, #336]	; (4b2c <_can_async_init+0x174>)
    49dc:	4798      	blx	r3
    49de:	4603      	mov	r3, r0
    49e0:	f083 0301 	eor.w	r3, r3, #1
    49e4:	b2db      	uxtb	r3, r3
    49e6:	2b00      	cmp	r3, #0
    49e8:	d1f4      	bne.n	49d4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	681b      	ldr	r3, [r3, #0]
    49ee:	4618      	mov	r0, r3
    49f0:	4b4f      	ldr	r3, [pc, #316]	; (4b30 <_can_async_init+0x178>)
    49f2:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    49f4:	683b      	ldr	r3, [r7, #0]
    49f6:	4a4f      	ldr	r2, [pc, #316]	; (4b34 <_can_async_init+0x17c>)
    49f8:	4293      	cmp	r3, r2
    49fa:	d17c      	bne.n	4af6 <_can_async_init+0x13e>
		_can1_dev    = dev;
    49fc:	4a4e      	ldr	r2, [pc, #312]	; (4b38 <_can_async_init+0x180>)
    49fe:	687b      	ldr	r3, [r7, #4]
    4a00:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	4a4d      	ldr	r2, [pc, #308]	; (4b3c <_can_async_init+0x184>)
    4a06:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
    4a10:	4618      	mov	r0, r3
    4a12:	4b4b      	ldr	r3, [pc, #300]	; (4b40 <_can_async_init+0x188>)
    4a14:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	2102      	movs	r1, #2
    4a1c:	4618      	mov	r0, r3
    4a1e:	4b49      	ldr	r3, [pc, #292]	; (4b44 <_can_async_init+0x18c>)
    4a20:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4a22:	687b      	ldr	r3, [r7, #4]
    4a24:	681b      	ldr	r3, [r3, #0]
    4a26:	f640 2103 	movw	r1, #2563	; 0xa03
    4a2a:	4618      	mov	r0, r3
    4a2c:	4b46      	ldr	r3, [pc, #280]	; (4b48 <_can_async_init+0x190>)
    4a2e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    4a38:	4618      	mov	r0, r3
    4a3a:	4b44      	ldr	r3, [pc, #272]	; (4b4c <_can_async_init+0x194>)
    4a3c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    4a3e:	687b      	ldr	r3, [r7, #4]
    4a40:	681a      	ldr	r2, [r3, #0]
    4a42:	4b43      	ldr	r3, [pc, #268]	; (4b50 <_can_async_init+0x198>)
    4a44:	b29b      	uxth	r3, r3
    4a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4a4e:	4619      	mov	r1, r3
    4a50:	4610      	mov	r0, r2
    4a52:	4b40      	ldr	r3, [pc, #256]	; (4b54 <_can_async_init+0x19c>)
    4a54:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	2107      	movs	r1, #7
    4a5c:	4618      	mov	r0, r3
    4a5e:	4b3e      	ldr	r3, [pc, #248]	; (4b58 <_can_async_init+0x1a0>)
    4a60:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	2107      	movs	r1, #7
    4a68:	4618      	mov	r0, r3
    4a6a:	4b3c      	ldr	r3, [pc, #240]	; (4b5c <_can_async_init+0x1a4>)
    4a6c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4a6e:	687b      	ldr	r3, [r7, #4]
    4a70:	681a      	ldr	r2, [r3, #0]
    4a72:	4b3b      	ldr	r3, [pc, #236]	; (4b60 <_can_async_init+0x1a8>)
    4a74:	b29b      	uxth	r3, r3
    4a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4a7a:	4619      	mov	r1, r3
    4a7c:	4610      	mov	r0, r2
    4a7e:	4b39      	ldr	r3, [pc, #228]	; (4b64 <_can_async_init+0x1ac>)
    4a80:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4a82:	687b      	ldr	r3, [r7, #4]
    4a84:	681a      	ldr	r2, [r3, #0]
    4a86:	4b38      	ldr	r3, [pc, #224]	; (4b68 <_can_async_init+0x1b0>)
    4a88:	b29b      	uxth	r3, r3
    4a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a8e:	4619      	mov	r1, r3
    4a90:	4610      	mov	r0, r2
    4a92:	4b36      	ldr	r3, [pc, #216]	; (4b6c <_can_async_init+0x1b4>)
    4a94:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	681b      	ldr	r3, [r3, #0]
    4a9a:	2108      	movs	r1, #8
    4a9c:	4618      	mov	r0, r3
    4a9e:	4b34      	ldr	r3, [pc, #208]	; (4b70 <_can_async_init+0x1b8>)
    4aa0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	681a      	ldr	r2, [r3, #0]
    4aa6:	4b33      	ldr	r3, [pc, #204]	; (4b74 <_can_async_init+0x1bc>)
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4aae:	4619      	mov	r1, r3
    4ab0:	4610      	mov	r0, r2
    4ab2:	4b31      	ldr	r3, [pc, #196]	; (4b78 <_can_async_init+0x1c0>)
    4ab4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	681a      	ldr	r2, [r3, #0]
    4aba:	4b30      	ldr	r3, [pc, #192]	; (4b7c <_can_async_init+0x1c4>)
    4abc:	b29b      	uxth	r3, r3
    4abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4ac2:	4619      	mov	r1, r3
    4ac4:	4610      	mov	r0, r2
    4ac6:	4b2e      	ldr	r3, [pc, #184]	; (4b80 <_can_async_init+0x1c8>)
    4ac8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    4aca:	687b      	ldr	r3, [r7, #4]
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4ad2:	4618      	mov	r0, r3
    4ad4:	4b2b      	ldr	r3, [pc, #172]	; (4b84 <_can_async_init+0x1cc>)
    4ad6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4ad8:	204f      	movs	r0, #79	; 0x4f
    4ada:	4b2b      	ldr	r3, [pc, #172]	; (4b88 <_can_async_init+0x1d0>)
    4adc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4ade:	204f      	movs	r0, #79	; 0x4f
    4ae0:	4b2a      	ldr	r3, [pc, #168]	; (4b8c <_can_async_init+0x1d4>)
    4ae2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4ae4:	204f      	movs	r0, #79	; 0x4f
    4ae6:	4b2a      	ldr	r3, [pc, #168]	; (4b90 <_can_async_init+0x1d8>)
    4ae8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	2101      	movs	r1, #1
    4af0:	4618      	mov	r0, r3
    4af2:	4b28      	ldr	r3, [pc, #160]	; (4b94 <_can_async_init+0x1dc>)
    4af4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	4618      	mov	r0, r3
    4afc:	4b26      	ldr	r3, [pc, #152]	; (4b98 <_can_async_init+0x1e0>)
    4afe:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	4618      	mov	r0, r3
    4b06:	4b25      	ldr	r3, [pc, #148]	; (4b9c <_can_async_init+0x1e4>)
    4b08:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    4b0a:	bf00      	nop
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	4618      	mov	r0, r3
    4b12:	4b06      	ldr	r3, [pc, #24]	; (4b2c <_can_async_init+0x174>)
    4b14:	4798      	blx	r3
    4b16:	4603      	mov	r3, r0
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d1f7      	bne.n	4b0c <_can_async_init+0x154>
	};

	return ERR_NONE;
    4b1c:	2300      	movs	r3, #0
}
    4b1e:	4618      	mov	r0, r3
    4b20:	3708      	adds	r7, #8
    4b22:	46bd      	mov	sp, r7
    4b24:	bd80      	pop	{r7, pc}
    4b26:	bf00      	nop
    4b28:	0000476d 	.word	0x0000476d
    4b2c:	0000478d 	.word	0x0000478d
    4b30:	000047db 	.word	0x000047db
    4b34:	42000400 	.word	0x42000400
    4b38:	20000e18 	.word	0x20000e18
    4b3c:	20000004 	.word	0x20000004
    4b40:	0000481b 	.word	0x0000481b
    4b44:	00004735 	.word	0x00004735
    4b48:	0000483d 	.word	0x0000483d
    4b4c:	00004751 	.word	0x00004751
    4b50:	2000ac88 	.word	0x2000ac88
    4b54:	00004921 	.word	0x00004921
    4b58:	0000493f 	.word	0x0000493f
    4b5c:	0000497b 	.word	0x0000497b
    4b60:	2000ac40 	.word	0x2000ac40
    4b64:	0000495d 	.word	0x0000495d
    4b68:	20000d78 	.word	0x20000d78
    4b6c:	00004999 	.word	0x00004999
    4b70:	000048a9 	.word	0x000048a9
    4b74:	20000d88 	.word	0x20000d88
    4b78:	000048c7 	.word	0x000048c7
    4b7c:	20000e08 	.word	0x20000e08
    4b80:	000048e5 	.word	0x000048e5
    4b84:	00004903 	.word	0x00004903
    4b88:	0000468d 	.word	0x0000468d
    4b8c:	000046d1 	.word	0x000046d1
    4b90:	00004651 	.word	0x00004651
    4b94:	0000488d 	.word	0x0000488d
    4b98:	000047fb 	.word	0x000047fb
    4b9c:	000047bb 	.word	0x000047bb

00004ba0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4ba0:	b590      	push	{r4, r7, lr}
    4ba2:	b083      	sub	sp, #12
    4ba4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4ba6:	4b2c      	ldr	r3, [pc, #176]	; (4c58 <CAN1_Handler+0xb8>)
    4ba8:	681b      	ldr	r3, [r3, #0]
    4baa:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	681b      	ldr	r3, [r3, #0]
    4bb0:	4618      	mov	r0, r3
    4bb2:	4b2a      	ldr	r3, [pc, #168]	; (4c5c <CAN1_Handler+0xbc>)
    4bb4:	4798      	blx	r3
    4bb6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4bb8:	683b      	ldr	r3, [r7, #0]
    4bba:	f003 0301 	and.w	r3, r3, #1
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d003      	beq.n	4bca <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	689b      	ldr	r3, [r3, #8]
    4bc6:	6878      	ldr	r0, [r7, #4]
    4bc8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4bca:	683b      	ldr	r3, [r7, #0]
    4bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d003      	beq.n	4bdc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	685b      	ldr	r3, [r3, #4]
    4bd8:	6878      	ldr	r0, [r7, #4]
    4bda:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4bdc:	683b      	ldr	r3, [r7, #0]
    4bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4be2:	2b00      	cmp	r3, #0
    4be4:	d004      	beq.n	4bf0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	68db      	ldr	r3, [r3, #12]
    4bea:	2103      	movs	r1, #3
    4bec:	6878      	ldr	r0, [r7, #4]
    4bee:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4bf0:	683b      	ldr	r3, [r7, #0]
    4bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d004      	beq.n	4c04 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	68db      	ldr	r3, [r3, #12]
    4bfe:	2100      	movs	r1, #0
    4c00:	6878      	ldr	r0, [r7, #4]
    4c02:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4c04:	683b      	ldr	r3, [r7, #0]
    4c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d00f      	beq.n	4c2e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	68dc      	ldr	r4, [r3, #12]
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	681b      	ldr	r3, [r3, #0]
    4c16:	4618      	mov	r0, r3
    4c18:	4b11      	ldr	r3, [pc, #68]	; (4c60 <CAN1_Handler+0xc0>)
    4c1a:	4798      	blx	r3
    4c1c:	4603      	mov	r3, r0
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d001      	beq.n	4c26 <CAN1_Handler+0x86>
    4c22:	2302      	movs	r3, #2
    4c24:	e000      	b.n	4c28 <CAN1_Handler+0x88>
    4c26:	2301      	movs	r3, #1
    4c28:	4619      	mov	r1, r3
    4c2a:	6878      	ldr	r0, [r7, #4]
    4c2c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4c2e:	683b      	ldr	r3, [r7, #0]
    4c30:	f003 0308 	and.w	r3, r3, #8
    4c34:	2b00      	cmp	r3, #0
    4c36:	d004      	beq.n	4c42 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	68db      	ldr	r3, [r3, #12]
    4c3c:	2104      	movs	r1, #4
    4c3e:	6878      	ldr	r0, [r7, #4]
    4c40:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	6839      	ldr	r1, [r7, #0]
    4c48:	4618      	mov	r0, r3
    4c4a:	4b06      	ldr	r3, [pc, #24]	; (4c64 <CAN1_Handler+0xc4>)
    4c4c:	4798      	blx	r3
}
    4c4e:	bf00      	nop
    4c50:	370c      	adds	r7, #12
    4c52:	46bd      	mov	sp, r7
    4c54:	bd90      	pop	{r4, r7, pc}
    4c56:	bf00      	nop
    4c58:	20000e18 	.word	0x20000e18
    4c5c:	00004875 	.word	0x00004875
    4c60:	0000470d 	.word	0x0000470d
    4c64:	00004859 	.word	0x00004859

00004c68 <__NVIC_SetPendingIRQ>:
{
    4c68:	b480      	push	{r7}
    4c6a:	b083      	sub	sp, #12
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	4603      	mov	r3, r0
    4c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c76:	2b00      	cmp	r3, #0
    4c78:	db0c      	blt.n	4c94 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c7a:	4909      	ldr	r1, [pc, #36]	; (4ca0 <__NVIC_SetPendingIRQ+0x38>)
    4c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c80:	095b      	lsrs	r3, r3, #5
    4c82:	88fa      	ldrh	r2, [r7, #6]
    4c84:	f002 021f 	and.w	r2, r2, #31
    4c88:	2001      	movs	r0, #1
    4c8a:	fa00 f202 	lsl.w	r2, r0, r2
    4c8e:	3340      	adds	r3, #64	; 0x40
    4c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c94:	bf00      	nop
    4c96:	370c      	adds	r7, #12
    4c98:	46bd      	mov	sp, r7
    4c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9e:	4770      	bx	lr
    4ca0:	e000e100 	.word	0xe000e100

00004ca4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4ca4:	b580      	push	{r7, lr}
    4ca6:	b082      	sub	sp, #8
    4ca8:	af00      	add	r7, sp, #0
    4caa:	4603      	mov	r3, r0
    4cac:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4cae:	79fb      	ldrb	r3, [r7, #7]
    4cb0:	b21b      	sxth	r3, r3
    4cb2:	4618      	mov	r0, r3
    4cb4:	4b02      	ldr	r3, [pc, #8]	; (4cc0 <_irq_set+0x1c>)
    4cb6:	4798      	blx	r3
}
    4cb8:	bf00      	nop
    4cba:	3708      	adds	r7, #8
    4cbc:	46bd      	mov	sp, r7
    4cbe:	bd80      	pop	{r7, pc}
    4cc0:	00004c69 	.word	0x00004c69

00004cc4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4cc4:	b480      	push	{r7}
    4cc6:	b083      	sub	sp, #12
    4cc8:	af00      	add	r7, sp, #0
    4cca:	4603      	mov	r3, r0
    4ccc:	6039      	str	r1, [r7, #0]
    4cce:	80fb      	strh	r3, [r7, #6]
    4cd0:	4613      	mov	r3, r2
    4cd2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4cd4:	797b      	ldrb	r3, [r7, #5]
    4cd6:	3b04      	subs	r3, #4
    4cd8:	2b05      	cmp	r3, #5
    4cda:	d86b      	bhi.n	4db4 <_get_cycles_for_us_internal+0xf0>
    4cdc:	a201      	add	r2, pc, #4	; (adr r2, 4ce4 <_get_cycles_for_us_internal+0x20>)
    4cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4ce2:	bf00      	nop
    4ce4:	00004d93 	.word	0x00004d93
    4ce8:	00004d73 	.word	0x00004d73
    4cec:	00004d55 	.word	0x00004d55
    4cf0:	00004d37 	.word	0x00004d37
    4cf4:	00004d19 	.word	0x00004d19
    4cf8:	00004cfd 	.word	0x00004cfd
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4cfc:	88fb      	ldrh	r3, [r7, #6]
    4cfe:	683a      	ldr	r2, [r7, #0]
    4d00:	4935      	ldr	r1, [pc, #212]	; (4dd8 <_get_cycles_for_us_internal+0x114>)
    4d02:	fba1 1202 	umull	r1, r2, r1, r2
    4d06:	0c92      	lsrs	r2, r2, #18
    4d08:	fb02 f303 	mul.w	r3, r2, r3
    4d0c:	3302      	adds	r3, #2
    4d0e:	4a33      	ldr	r2, [pc, #204]	; (4ddc <_get_cycles_for_us_internal+0x118>)
    4d10:	fba2 2303 	umull	r2, r3, r2, r3
    4d14:	085b      	lsrs	r3, r3, #1
    4d16:	e059      	b.n	4dcc <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4d18:	88fb      	ldrh	r3, [r7, #6]
    4d1a:	683a      	ldr	r2, [r7, #0]
    4d1c:	0952      	lsrs	r2, r2, #5
    4d1e:	4930      	ldr	r1, [pc, #192]	; (4de0 <_get_cycles_for_us_internal+0x11c>)
    4d20:	fba1 1202 	umull	r1, r2, r1, r2
    4d24:	09d2      	lsrs	r2, r2, #7
    4d26:	fb02 f303 	mul.w	r3, r2, r3
    4d2a:	331d      	adds	r3, #29
    4d2c:	4a2d      	ldr	r2, [pc, #180]	; (4de4 <_get_cycles_for_us_internal+0x120>)
    4d2e:	fba2 2303 	umull	r2, r3, r2, r3
    4d32:	091b      	lsrs	r3, r3, #4
    4d34:	e04a      	b.n	4dcc <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4d36:	88fb      	ldrh	r3, [r7, #6]
    4d38:	683a      	ldr	r2, [r7, #0]
    4d3a:	492b      	ldr	r1, [pc, #172]	; (4de8 <_get_cycles_for_us_internal+0x124>)
    4d3c:	fba1 1202 	umull	r1, r2, r1, r2
    4d40:	0b52      	lsrs	r2, r2, #13
    4d42:	fb02 f303 	mul.w	r3, r2, r3
    4d46:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4d4a:	4a28      	ldr	r2, [pc, #160]	; (4dec <_get_cycles_for_us_internal+0x128>)
    4d4c:	fba2 2303 	umull	r2, r3, r2, r3
    4d50:	095b      	lsrs	r3, r3, #5
    4d52:	e03b      	b.n	4dcc <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4d54:	88fb      	ldrh	r3, [r7, #6]
    4d56:	683a      	ldr	r2, [r7, #0]
    4d58:	4925      	ldr	r1, [pc, #148]	; (4df0 <_get_cycles_for_us_internal+0x12c>)
    4d5a:	fba1 1202 	umull	r1, r2, r1, r2
    4d5e:	0992      	lsrs	r2, r2, #6
    4d60:	fb02 f303 	mul.w	r3, r2, r3
    4d64:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4d68:	4a22      	ldr	r2, [pc, #136]	; (4df4 <_get_cycles_for_us_internal+0x130>)
    4d6a:	fba2 2303 	umull	r2, r3, r2, r3
    4d6e:	099b      	lsrs	r3, r3, #6
    4d70:	e02c      	b.n	4dcc <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4d72:	88fb      	ldrh	r3, [r7, #6]
    4d74:	683a      	ldr	r2, [r7, #0]
    4d76:	4920      	ldr	r1, [pc, #128]	; (4df8 <_get_cycles_for_us_internal+0x134>)
    4d78:	fba1 1202 	umull	r1, r2, r1, r2
    4d7c:	0952      	lsrs	r2, r2, #5
    4d7e:	fb02 f303 	mul.w	r3, r2, r3
    4d82:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4d86:	332f      	adds	r3, #47	; 0x2f
    4d88:	4a1c      	ldr	r2, [pc, #112]	; (4dfc <_get_cycles_for_us_internal+0x138>)
    4d8a:	fba2 2303 	umull	r2, r3, r2, r3
    4d8e:	0b5b      	lsrs	r3, r3, #13
    4d90:	e01c      	b.n	4dcc <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4d92:	88fb      	ldrh	r3, [r7, #6]
    4d94:	683a      	ldr	r2, [r7, #0]
    4d96:	491a      	ldr	r1, [pc, #104]	; (4e00 <_get_cycles_for_us_internal+0x13c>)
    4d98:	fba1 1202 	umull	r1, r2, r1, r2
    4d9c:	08d2      	lsrs	r2, r2, #3
    4d9e:	fb02 f303 	mul.w	r3, r2, r3
    4da2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4da6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4daa:	4a16      	ldr	r2, [pc, #88]	; (4e04 <_get_cycles_for_us_internal+0x140>)
    4dac:	fba2 2303 	umull	r2, r3, r2, r3
    4db0:	0c5b      	lsrs	r3, r3, #17
    4db2:	e00b      	b.n	4dcc <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4db4:	88fb      	ldrh	r3, [r7, #6]
    4db6:	683a      	ldr	r2, [r7, #0]
    4db8:	fb02 f303 	mul.w	r3, r2, r3
    4dbc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4dc0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4dc4:	4a10      	ldr	r2, [pc, #64]	; (4e08 <_get_cycles_for_us_internal+0x144>)
    4dc6:	fba2 2303 	umull	r2, r3, r2, r3
    4dca:	0c9b      	lsrs	r3, r3, #18
	}
}
    4dcc:	4618      	mov	r0, r3
    4dce:	370c      	adds	r7, #12
    4dd0:	46bd      	mov	sp, r7
    4dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd6:	4770      	bx	lr
    4dd8:	431bde83 	.word	0x431bde83
    4ddc:	aaaaaaab 	.word	0xaaaaaaab
    4de0:	0a7c5ac5 	.word	0x0a7c5ac5
    4de4:	88888889 	.word	0x88888889
    4de8:	d1b71759 	.word	0xd1b71759
    4dec:	1b4e81b5 	.word	0x1b4e81b5
    4df0:	10624dd3 	.word	0x10624dd3
    4df4:	057619f1 	.word	0x057619f1
    4df8:	51eb851f 	.word	0x51eb851f
    4dfc:	45e7b273 	.word	0x45e7b273
    4e00:	cccccccd 	.word	0xcccccccd
    4e04:	6fd91d85 	.word	0x6fd91d85
    4e08:	165e9f81 	.word	0x165e9f81

00004e0c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b082      	sub	sp, #8
    4e10:	af00      	add	r7, sp, #0
    4e12:	4603      	mov	r3, r0
    4e14:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4e16:	88fb      	ldrh	r3, [r7, #6]
    4e18:	2209      	movs	r2, #9
    4e1a:	4904      	ldr	r1, [pc, #16]	; (4e2c <_get_cycles_for_us+0x20>)
    4e1c:	4618      	mov	r0, r3
    4e1e:	4b04      	ldr	r3, [pc, #16]	; (4e30 <_get_cycles_for_us+0x24>)
    4e20:	4798      	blx	r3
    4e22:	4603      	mov	r3, r0
}
    4e24:	4618      	mov	r0, r3
    4e26:	3708      	adds	r7, #8
    4e28:	46bd      	mov	sp, r7
    4e2a:	bd80      	pop	{r7, pc}
    4e2c:	07270e00 	.word	0x07270e00
    4e30:	00004cc5 	.word	0x00004cc5

00004e34 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4e34:	b480      	push	{r7}
    4e36:	b083      	sub	sp, #12
    4e38:	af00      	add	r7, sp, #0
    4e3a:	4603      	mov	r3, r0
    4e3c:	6039      	str	r1, [r7, #0]
    4e3e:	80fb      	strh	r3, [r7, #6]
    4e40:	4613      	mov	r3, r2
    4e42:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4e44:	797b      	ldrb	r3, [r7, #5]
    4e46:	3b04      	subs	r3, #4
    4e48:	2b05      	cmp	r3, #5
    4e4a:	d870      	bhi.n	4f2e <_get_cycles_for_ms_internal+0xfa>
    4e4c:	a201      	add	r2, pc, #4	; (adr r2, 4e54 <_get_cycles_for_ms_internal+0x20>)
    4e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e52:	bf00      	nop
    4e54:	00004f11 	.word	0x00004f11
    4e58:	00004ef5 	.word	0x00004ef5
    4e5c:	00004ed9 	.word	0x00004ed9
    4e60:	00004eb5 	.word	0x00004eb5
    4e64:	00004e91 	.word	0x00004e91
    4e68:	00004e6d 	.word	0x00004e6d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4e6c:	88fb      	ldrh	r3, [r7, #6]
    4e6e:	683a      	ldr	r2, [r7, #0]
    4e70:	4937      	ldr	r1, [pc, #220]	; (4f50 <_get_cycles_for_ms_internal+0x11c>)
    4e72:	fba1 1202 	umull	r1, r2, r1, r2
    4e76:	0c92      	lsrs	r2, r2, #18
    4e78:	fb02 f303 	mul.w	r3, r2, r3
    4e7c:	3302      	adds	r3, #2
    4e7e:	4a35      	ldr	r2, [pc, #212]	; (4f54 <_get_cycles_for_ms_internal+0x120>)
    4e80:	fba2 2303 	umull	r2, r3, r2, r3
    4e84:	085b      	lsrs	r3, r3, #1
    4e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e8a:	fb02 f303 	mul.w	r3, r2, r3
    4e8e:	e058      	b.n	4f42 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4e90:	88fb      	ldrh	r3, [r7, #6]
    4e92:	683a      	ldr	r2, [r7, #0]
    4e94:	0952      	lsrs	r2, r2, #5
    4e96:	4930      	ldr	r1, [pc, #192]	; (4f58 <_get_cycles_for_ms_internal+0x124>)
    4e98:	fba1 1202 	umull	r1, r2, r1, r2
    4e9c:	09d2      	lsrs	r2, r2, #7
    4e9e:	fb02 f303 	mul.w	r3, r2, r3
    4ea2:	3302      	adds	r3, #2
    4ea4:	4a2b      	ldr	r2, [pc, #172]	; (4f54 <_get_cycles_for_ms_internal+0x120>)
    4ea6:	fba2 2303 	umull	r2, r3, r2, r3
    4eaa:	085b      	lsrs	r3, r3, #1
    4eac:	2264      	movs	r2, #100	; 0x64
    4eae:	fb02 f303 	mul.w	r3, r2, r3
    4eb2:	e046      	b.n	4f42 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4eb4:	88fb      	ldrh	r3, [r7, #6]
    4eb6:	683a      	ldr	r2, [r7, #0]
    4eb8:	4928      	ldr	r1, [pc, #160]	; (4f5c <_get_cycles_for_ms_internal+0x128>)
    4eba:	fba1 1202 	umull	r1, r2, r1, r2
    4ebe:	0b52      	lsrs	r2, r2, #13
    4ec0:	fb02 f303 	mul.w	r3, r2, r3
    4ec4:	3302      	adds	r3, #2
    4ec6:	4a23      	ldr	r2, [pc, #140]	; (4f54 <_get_cycles_for_ms_internal+0x120>)
    4ec8:	fba2 2303 	umull	r2, r3, r2, r3
    4ecc:	085a      	lsrs	r2, r3, #1
    4ece:	4613      	mov	r3, r2
    4ed0:	009b      	lsls	r3, r3, #2
    4ed2:	4413      	add	r3, r2
    4ed4:	005b      	lsls	r3, r3, #1
    4ed6:	e034      	b.n	4f42 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4ed8:	88fb      	ldrh	r3, [r7, #6]
    4eda:	683a      	ldr	r2, [r7, #0]
    4edc:	4920      	ldr	r1, [pc, #128]	; (4f60 <_get_cycles_for_ms_internal+0x12c>)
    4ede:	fba1 1202 	umull	r1, r2, r1, r2
    4ee2:	0992      	lsrs	r2, r2, #6
    4ee4:	fb02 f303 	mul.w	r3, r2, r3
    4ee8:	3302      	adds	r3, #2
    4eea:	4a1a      	ldr	r2, [pc, #104]	; (4f54 <_get_cycles_for_ms_internal+0x120>)
    4eec:	fba2 2303 	umull	r2, r3, r2, r3
    4ef0:	085b      	lsrs	r3, r3, #1
    4ef2:	e026      	b.n	4f42 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4ef4:	88fb      	ldrh	r3, [r7, #6]
    4ef6:	683a      	ldr	r2, [r7, #0]
    4ef8:	491a      	ldr	r1, [pc, #104]	; (4f64 <_get_cycles_for_ms_internal+0x130>)
    4efa:	fba1 1202 	umull	r1, r2, r1, r2
    4efe:	0952      	lsrs	r2, r2, #5
    4f00:	fb02 f303 	mul.w	r3, r2, r3
    4f04:	331d      	adds	r3, #29
    4f06:	4a18      	ldr	r2, [pc, #96]	; (4f68 <_get_cycles_for_ms_internal+0x134>)
    4f08:	fba2 2303 	umull	r2, r3, r2, r3
    4f0c:	091b      	lsrs	r3, r3, #4
    4f0e:	e018      	b.n	4f42 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4f10:	88fb      	ldrh	r3, [r7, #6]
    4f12:	683a      	ldr	r2, [r7, #0]
    4f14:	4915      	ldr	r1, [pc, #84]	; (4f6c <_get_cycles_for_ms_internal+0x138>)
    4f16:	fba1 1202 	umull	r1, r2, r1, r2
    4f1a:	08d2      	lsrs	r2, r2, #3
    4f1c:	fb02 f303 	mul.w	r3, r2, r3
    4f20:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4f24:	4a12      	ldr	r2, [pc, #72]	; (4f70 <_get_cycles_for_ms_internal+0x13c>)
    4f26:	fba2 2303 	umull	r2, r3, r2, r3
    4f2a:	095b      	lsrs	r3, r3, #5
    4f2c:	e009      	b.n	4f42 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4f2e:	88fb      	ldrh	r3, [r7, #6]
    4f30:	683a      	ldr	r2, [r7, #0]
    4f32:	fb02 f303 	mul.w	r3, r2, r3
    4f36:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4f3a:	4a0e      	ldr	r2, [pc, #56]	; (4f74 <_get_cycles_for_ms_internal+0x140>)
    4f3c:	fba2 2303 	umull	r2, r3, r2, r3
    4f40:	099b      	lsrs	r3, r3, #6
	}
}
    4f42:	4618      	mov	r0, r3
    4f44:	370c      	adds	r7, #12
    4f46:	46bd      	mov	sp, r7
    4f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f4c:	4770      	bx	lr
    4f4e:	bf00      	nop
    4f50:	431bde83 	.word	0x431bde83
    4f54:	aaaaaaab 	.word	0xaaaaaaab
    4f58:	0a7c5ac5 	.word	0x0a7c5ac5
    4f5c:	d1b71759 	.word	0xd1b71759
    4f60:	10624dd3 	.word	0x10624dd3
    4f64:	51eb851f 	.word	0x51eb851f
    4f68:	88888889 	.word	0x88888889
    4f6c:	cccccccd 	.word	0xcccccccd
    4f70:	1b4e81b5 	.word	0x1b4e81b5
    4f74:	057619f1 	.word	0x057619f1

00004f78 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b082      	sub	sp, #8
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	4603      	mov	r3, r0
    4f80:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4f82:	88fb      	ldrh	r3, [r7, #6]
    4f84:	2209      	movs	r2, #9
    4f86:	4904      	ldr	r1, [pc, #16]	; (4f98 <_get_cycles_for_ms+0x20>)
    4f88:	4618      	mov	r0, r3
    4f8a:	4b04      	ldr	r3, [pc, #16]	; (4f9c <_get_cycles_for_ms+0x24>)
    4f8c:	4798      	blx	r3
    4f8e:	4603      	mov	r3, r0
}
    4f90:	4618      	mov	r0, r3
    4f92:	3708      	adds	r7, #8
    4f94:	46bd      	mov	sp, r7
    4f96:	bd80      	pop	{r7, pc}
    4f98:	07270e00 	.word	0x07270e00
    4f9c:	00004e35 	.word	0x00004e35

00004fa0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4fa0:	b480      	push	{r7}
    4fa2:	b083      	sub	sp, #12
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
    4fa8:	6039      	str	r1, [r7, #0]
    4faa:	bf00      	nop
    4fac:	f3af 8000 	nop.w

00004fb0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4fb0:	3901      	subs	r1, #1
    4fb2:	d8fd      	bhi.n	4fb0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4fb4:	bf00      	nop
    4fb6:	370c      	adds	r7, #12
    4fb8:	46bd      	mov	sp, r7
    4fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbe:	4770      	bx	lr

00004fc0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4fc0:	b480      	push	{r7}
    4fc2:	b083      	sub	sp, #12
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
    4fc8:	460b      	mov	r3, r1
    4fca:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	881b      	ldrh	r3, [r3, #0]
    4fd0:	b29a      	uxth	r2, r3
    4fd2:	887b      	ldrh	r3, [r7, #2]
    4fd4:	021b      	lsls	r3, r3, #8
    4fd6:	b29b      	uxth	r3, r3
    4fd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4fdc:	b29b      	uxth	r3, r3
    4fde:	4313      	orrs	r3, r2
    4fe0:	b29a      	uxth	r2, r3
    4fe2:	687b      	ldr	r3, [r7, #4]
    4fe4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4fe6:	bf00      	nop
    4fe8:	370c      	adds	r7, #12
    4fea:	46bd      	mov	sp, r7
    4fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff0:	4770      	bx	lr

00004ff2 <hri_port_set_EVCTRL_reg>:
{
    4ff2:	b480      	push	{r7}
    4ff4:	b085      	sub	sp, #20
    4ff6:	af00      	add	r7, sp, #0
    4ff8:	60f8      	str	r0, [r7, #12]
    4ffa:	460b      	mov	r3, r1
    4ffc:	607a      	str	r2, [r7, #4]
    4ffe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5000:	7afb      	ldrb	r3, [r7, #11]
    5002:	7afa      	ldrb	r2, [r7, #11]
    5004:	68f9      	ldr	r1, [r7, #12]
    5006:	01d2      	lsls	r2, r2, #7
    5008:	440a      	add	r2, r1
    500a:	322c      	adds	r2, #44	; 0x2c
    500c:	6811      	ldr	r1, [r2, #0]
    500e:	687a      	ldr	r2, [r7, #4]
    5010:	430a      	orrs	r2, r1
    5012:	68f9      	ldr	r1, [r7, #12]
    5014:	01db      	lsls	r3, r3, #7
    5016:	440b      	add	r3, r1
    5018:	332c      	adds	r3, #44	; 0x2c
    501a:	601a      	str	r2, [r3, #0]
}
    501c:	bf00      	nop
    501e:	3714      	adds	r7, #20
    5020:	46bd      	mov	sp, r7
    5022:	f85d 7b04 	ldr.w	r7, [sp], #4
    5026:	4770      	bx	lr

00005028 <_port_event_init>:

static inline void _port_event_init()
{
    5028:	b580      	push	{r7, lr}
    502a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    502c:	2200      	movs	r2, #0
    502e:	2100      	movs	r1, #0
    5030:	480a      	ldr	r0, [pc, #40]	; (505c <_port_event_init+0x34>)
    5032:	4b0b      	ldr	r3, [pc, #44]	; (5060 <_port_event_init+0x38>)
    5034:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5036:	2200      	movs	r2, #0
    5038:	2101      	movs	r1, #1
    503a:	4808      	ldr	r0, [pc, #32]	; (505c <_port_event_init+0x34>)
    503c:	4b08      	ldr	r3, [pc, #32]	; (5060 <_port_event_init+0x38>)
    503e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5040:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5044:	2102      	movs	r1, #2
    5046:	4805      	ldr	r0, [pc, #20]	; (505c <_port_event_init+0x34>)
    5048:	4b05      	ldr	r3, [pc, #20]	; (5060 <_port_event_init+0x38>)
    504a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    504c:	2200      	movs	r2, #0
    504e:	2103      	movs	r1, #3
    5050:	4802      	ldr	r0, [pc, #8]	; (505c <_port_event_init+0x34>)
    5052:	4b03      	ldr	r3, [pc, #12]	; (5060 <_port_event_init+0x38>)
    5054:	4798      	blx	r3
}
    5056:	bf00      	nop
    5058:	bd80      	pop	{r7, pc}
    505a:	bf00      	nop
    505c:	41008000 	.word	0x41008000
    5060:	00004ff3 	.word	0x00004ff3

00005064 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5064:	b580      	push	{r7, lr}
    5066:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5068:	2104      	movs	r1, #4
    506a:	480b      	ldr	r0, [pc, #44]	; (5098 <_init_chip+0x34>)
    506c:	4b0b      	ldr	r3, [pc, #44]	; (509c <_init_chip+0x38>)
    506e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5070:	4b0b      	ldr	r3, [pc, #44]	; (50a0 <_init_chip+0x3c>)
    5072:	4798      	blx	r3
	_oscctrl_init_sources();
    5074:	4b0b      	ldr	r3, [pc, #44]	; (50a4 <_init_chip+0x40>)
    5076:	4798      	blx	r3
	_mclk_init();
    5078:	4b0b      	ldr	r3, [pc, #44]	; (50a8 <_init_chip+0x44>)
    507a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    507c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5080:	4b0a      	ldr	r3, [pc, #40]	; (50ac <_init_chip+0x48>)
    5082:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5084:	4b0a      	ldr	r3, [pc, #40]	; (50b0 <_init_chip+0x4c>)
    5086:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5088:	f640 30df 	movw	r0, #3039	; 0xbdf
    508c:	4b07      	ldr	r3, [pc, #28]	; (50ac <_init_chip+0x48>)
    508e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5090:	4b08      	ldr	r3, [pc, #32]	; (50b4 <_init_chip+0x50>)
    5092:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5094:	bf00      	nop
    5096:	bd80      	pop	{r7, pc}
    5098:	41004000 	.word	0x41004000
    509c:	00004fc1 	.word	0x00004fc1
    50a0:	00005b8d 	.word	0x00005b8d
    50a4:	00006055 	.word	0x00006055
    50a8:	00005aad 	.word	0x00005aad
    50ac:	00005955 	.word	0x00005955
    50b0:	00006095 	.word	0x00006095
    50b4:	00005029 	.word	0x00005029

000050b8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    50b8:	b480      	push	{r7}
    50ba:	b083      	sub	sp, #12
    50bc:	af00      	add	r7, sp, #0
    50be:	6078      	str	r0, [r7, #4]
    50c0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	683a      	ldr	r2, [r7, #0]
    50c6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    50c8:	2300      	movs	r3, #0
}
    50ca:	4618      	mov	r0, r3
    50cc:	370c      	adds	r7, #12
    50ce:	46bd      	mov	sp, r7
    50d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50d4:	4770      	bx	lr
	...

000050d8 <__NVIC_EnableIRQ>:
{
    50d8:	b480      	push	{r7}
    50da:	b083      	sub	sp, #12
    50dc:	af00      	add	r7, sp, #0
    50de:	4603      	mov	r3, r0
    50e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    50e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50e6:	2b00      	cmp	r3, #0
    50e8:	db0b      	blt.n	5102 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50ea:	4909      	ldr	r1, [pc, #36]	; (5110 <__NVIC_EnableIRQ+0x38>)
    50ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50f0:	095b      	lsrs	r3, r3, #5
    50f2:	88fa      	ldrh	r2, [r7, #6]
    50f4:	f002 021f 	and.w	r2, r2, #31
    50f8:	2001      	movs	r0, #1
    50fa:	fa00 f202 	lsl.w	r2, r0, r2
    50fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5102:	bf00      	nop
    5104:	370c      	adds	r7, #12
    5106:	46bd      	mov	sp, r7
    5108:	f85d 7b04 	ldr.w	r7, [sp], #4
    510c:	4770      	bx	lr
    510e:	bf00      	nop
    5110:	e000e100 	.word	0xe000e100

00005114 <__NVIC_DisableIRQ>:
{
    5114:	b480      	push	{r7}
    5116:	b083      	sub	sp, #12
    5118:	af00      	add	r7, sp, #0
    511a:	4603      	mov	r3, r0
    511c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    511e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5122:	2b00      	cmp	r3, #0
    5124:	db10      	blt.n	5148 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5126:	490b      	ldr	r1, [pc, #44]	; (5154 <__NVIC_DisableIRQ+0x40>)
    5128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    512c:	095b      	lsrs	r3, r3, #5
    512e:	88fa      	ldrh	r2, [r7, #6]
    5130:	f002 021f 	and.w	r2, r2, #31
    5134:	2001      	movs	r0, #1
    5136:	fa00 f202 	lsl.w	r2, r0, r2
    513a:	3320      	adds	r3, #32
    513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5140:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5144:	f3bf 8f6f 	isb	sy
}
    5148:	bf00      	nop
    514a:	370c      	adds	r7, #12
    514c:	46bd      	mov	sp, r7
    514e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5152:	4770      	bx	lr
    5154:	e000e100 	.word	0xe000e100

00005158 <__NVIC_ClearPendingIRQ>:
{
    5158:	b480      	push	{r7}
    515a:	b083      	sub	sp, #12
    515c:	af00      	add	r7, sp, #0
    515e:	4603      	mov	r3, r0
    5160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5166:	2b00      	cmp	r3, #0
    5168:	db0c      	blt.n	5184 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    516a:	4909      	ldr	r1, [pc, #36]	; (5190 <__NVIC_ClearPendingIRQ+0x38>)
    516c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5170:	095b      	lsrs	r3, r3, #5
    5172:	88fa      	ldrh	r2, [r7, #6]
    5174:	f002 021f 	and.w	r2, r2, #31
    5178:	2001      	movs	r0, #1
    517a:	fa00 f202 	lsl.w	r2, r0, r2
    517e:	3360      	adds	r3, #96	; 0x60
    5180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5184:	bf00      	nop
    5186:	370c      	adds	r7, #12
    5188:	46bd      	mov	sp, r7
    518a:	f85d 7b04 	ldr.w	r7, [sp], #4
    518e:	4770      	bx	lr
    5190:	e000e100 	.word	0xe000e100

00005194 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5194:	b480      	push	{r7}
    5196:	b083      	sub	sp, #12
    5198:	af00      	add	r7, sp, #0
    519a:	6078      	str	r0, [r7, #4]
    519c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    519e:	bf00      	nop
    51a0:	687b      	ldr	r3, [r7, #4]
    51a2:	685a      	ldr	r2, [r3, #4]
    51a4:	683b      	ldr	r3, [r7, #0]
    51a6:	4013      	ands	r3, r2
    51a8:	2b00      	cmp	r3, #0
    51aa:	d1f9      	bne.n	51a0 <hri_eic_wait_for_sync+0xc>
	};
}
    51ac:	bf00      	nop
    51ae:	370c      	adds	r7, #12
    51b0:	46bd      	mov	sp, r7
    51b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b6:	4770      	bx	lr

000051b8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    51b8:	b480      	push	{r7}
    51ba:	b083      	sub	sp, #12
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
    51c0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	685a      	ldr	r2, [r3, #4]
    51c6:	683b      	ldr	r3, [r7, #0]
    51c8:	4013      	ands	r3, r2
    51ca:	2b00      	cmp	r3, #0
    51cc:	bf14      	ite	ne
    51ce:	2301      	movne	r3, #1
    51d0:	2300      	moveq	r3, #0
    51d2:	b2db      	uxtb	r3, r3
}
    51d4:	4618      	mov	r0, r3
    51d6:	370c      	adds	r7, #12
    51d8:	46bd      	mov	sp, r7
    51da:	f85d 7b04 	ldr.w	r7, [sp], #4
    51de:	4770      	bx	lr

000051e0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    51e0:	b480      	push	{r7}
    51e2:	b083      	sub	sp, #12
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	695b      	ldr	r3, [r3, #20]
}
    51ec:	4618      	mov	r0, r3
    51ee:	370c      	adds	r7, #12
    51f0:	46bd      	mov	sp, r7
    51f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f6:	4770      	bx	lr

000051f8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    51f8:	b480      	push	{r7}
    51fa:	b083      	sub	sp, #12
    51fc:	af00      	add	r7, sp, #0
    51fe:	6078      	str	r0, [r7, #4]
    5200:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    5202:	687b      	ldr	r3, [r7, #4]
    5204:	683a      	ldr	r2, [r7, #0]
    5206:	615a      	str	r2, [r3, #20]
}
    5208:	bf00      	nop
    520a:	370c      	adds	r7, #12
    520c:	46bd      	mov	sp, r7
    520e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5212:	4770      	bx	lr

00005214 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    5214:	b480      	push	{r7}
    5216:	b083      	sub	sp, #12
    5218:	af00      	add	r7, sp, #0
    521a:	6078      	str	r0, [r7, #4]
    521c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    521e:	687b      	ldr	r3, [r7, #4]
    5220:	683a      	ldr	r2, [r7, #0]
    5222:	611a      	str	r2, [r3, #16]
}
    5224:	bf00      	nop
    5226:	370c      	adds	r7, #12
    5228:	46bd      	mov	sp, r7
    522a:	f85d 7b04 	ldr.w	r7, [sp], #4
    522e:	4770      	bx	lr

00005230 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    5230:	b480      	push	{r7}
    5232:	b083      	sub	sp, #12
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
    5238:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	683a      	ldr	r2, [r7, #0]
    523e:	60da      	str	r2, [r3, #12]
}
    5240:	bf00      	nop
    5242:	370c      	adds	r7, #12
    5244:	46bd      	mov	sp, r7
    5246:	f85d 7b04 	ldr.w	r7, [sp], #4
    524a:	4770      	bx	lr

0000524c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    524c:	b580      	push	{r7, lr}
    524e:	b082      	sub	sp, #8
    5250:	af00      	add	r7, sp, #0
    5252:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    5254:	687b      	ldr	r3, [r7, #4]
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	b2db      	uxtb	r3, r3
    525a:	f043 0302 	orr.w	r3, r3, #2
    525e:	b2da      	uxtb	r2, r3
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5264:	2103      	movs	r1, #3
    5266:	6878      	ldr	r0, [r7, #4]
    5268:	4b02      	ldr	r3, [pc, #8]	; (5274 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    526a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    526c:	bf00      	nop
    526e:	3708      	adds	r7, #8
    5270:	46bd      	mov	sp, r7
    5272:	bd80      	pop	{r7, pc}
    5274:	00005195 	.word	0x00005195

00005278 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5278:	b580      	push	{r7, lr}
    527a:	b082      	sub	sp, #8
    527c:	af00      	add	r7, sp, #0
    527e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    5280:	687b      	ldr	r3, [r7, #4]
    5282:	781b      	ldrb	r3, [r3, #0]
    5284:	b2db      	uxtb	r3, r3
    5286:	f023 0302 	bic.w	r3, r3, #2
    528a:	b2da      	uxtb	r2, r3
    528c:	687b      	ldr	r3, [r7, #4]
    528e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5290:	2103      	movs	r1, #3
    5292:	6878      	ldr	r0, [r7, #4]
    5294:	4b02      	ldr	r3, [pc, #8]	; (52a0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    5296:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5298:	bf00      	nop
    529a:	3708      	adds	r7, #8
    529c:	46bd      	mov	sp, r7
    529e:	bd80      	pop	{r7, pc}
    52a0:	00005195 	.word	0x00005195

000052a4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    52a4:	b580      	push	{r7, lr}
    52a6:	b084      	sub	sp, #16
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
    52ac:	460b      	mov	r3, r1
    52ae:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	781b      	ldrb	r3, [r3, #0]
    52b4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    52b6:	7bfb      	ldrb	r3, [r7, #15]
    52b8:	f023 0310 	bic.w	r3, r3, #16
    52bc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    52be:	78fb      	ldrb	r3, [r7, #3]
    52c0:	011b      	lsls	r3, r3, #4
    52c2:	b25a      	sxtb	r2, r3
    52c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    52c8:	4313      	orrs	r3, r2
    52ca:	b25b      	sxtb	r3, r3
    52cc:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    52ce:	687b      	ldr	r3, [r7, #4]
    52d0:	7bfa      	ldrb	r2, [r7, #15]
    52d2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    52d4:	2103      	movs	r1, #3
    52d6:	6878      	ldr	r0, [r7, #4]
    52d8:	4b02      	ldr	r3, [pc, #8]	; (52e4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    52da:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    52dc:	bf00      	nop
    52de:	3710      	adds	r7, #16
    52e0:	46bd      	mov	sp, r7
    52e2:	bd80      	pop	{r7, pc}
    52e4:	00005195 	.word	0x00005195

000052e8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    52e8:	b580      	push	{r7, lr}
    52ea:	b084      	sub	sp, #16
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
    52f0:	460b      	mov	r3, r1
    52f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    52f4:	2103      	movs	r1, #3
    52f6:	6878      	ldr	r0, [r7, #4]
    52f8:	4b06      	ldr	r3, [pc, #24]	; (5314 <hri_eic_get_CTRLA_reg+0x2c>)
    52fa:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	781b      	ldrb	r3, [r3, #0]
    5300:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5302:	7bfa      	ldrb	r2, [r7, #15]
    5304:	78fb      	ldrb	r3, [r7, #3]
    5306:	4013      	ands	r3, r2
    5308:	73fb      	strb	r3, [r7, #15]
	return tmp;
    530a:	7bfb      	ldrb	r3, [r7, #15]
}
    530c:	4618      	mov	r0, r3
    530e:	3710      	adds	r7, #16
    5310:	46bd      	mov	sp, r7
    5312:	bd80      	pop	{r7, pc}
    5314:	00005195 	.word	0x00005195

00005318 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    5318:	b580      	push	{r7, lr}
    531a:	b082      	sub	sp, #8
    531c:	af00      	add	r7, sp, #0
    531e:	6078      	str	r0, [r7, #4]
    5320:	460b      	mov	r3, r1
    5322:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	78fa      	ldrb	r2, [r7, #3]
    5328:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    532a:	2103      	movs	r1, #3
    532c:	6878      	ldr	r0, [r7, #4]
    532e:	4b03      	ldr	r3, [pc, #12]	; (533c <hri_eic_write_CTRLA_reg+0x24>)
    5330:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5332:	bf00      	nop
    5334:	3708      	adds	r7, #8
    5336:	46bd      	mov	sp, r7
    5338:	bd80      	pop	{r7, pc}
    533a:	bf00      	nop
    533c:	00005195 	.word	0x00005195

00005340 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    5340:	b480      	push	{r7}
    5342:	b083      	sub	sp, #12
    5344:	af00      	add	r7, sp, #0
    5346:	6078      	str	r0, [r7, #4]
    5348:	460b      	mov	r3, r1
    534a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	78fa      	ldrb	r2, [r7, #3]
    5350:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5352:	bf00      	nop
    5354:	370c      	adds	r7, #12
    5356:	46bd      	mov	sp, r7
    5358:	f85d 7b04 	ldr.w	r7, [sp], #4
    535c:	4770      	bx	lr

0000535e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    535e:	b480      	push	{r7}
    5360:	b083      	sub	sp, #12
    5362:	af00      	add	r7, sp, #0
    5364:	6078      	str	r0, [r7, #4]
    5366:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	683a      	ldr	r2, [r7, #0]
    536c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    536e:	bf00      	nop
    5370:	370c      	adds	r7, #12
    5372:	46bd      	mov	sp, r7
    5374:	f85d 7b04 	ldr.w	r7, [sp], #4
    5378:	4770      	bx	lr

0000537a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    537a:	b480      	push	{r7}
    537c:	b083      	sub	sp, #12
    537e:	af00      	add	r7, sp, #0
    5380:	6078      	str	r0, [r7, #4]
    5382:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	683a      	ldr	r2, [r7, #0]
    5388:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    538a:	bf00      	nop
    538c:	370c      	adds	r7, #12
    538e:	46bd      	mov	sp, r7
    5390:	f85d 7b04 	ldr.w	r7, [sp], #4
    5394:	4770      	bx	lr

00005396 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    5396:	b480      	push	{r7}
    5398:	b085      	sub	sp, #20
    539a:	af00      	add	r7, sp, #0
    539c:	60f8      	str	r0, [r7, #12]
    539e:	460b      	mov	r3, r1
    53a0:	607a      	str	r2, [r7, #4]
    53a2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    53a4:	7afb      	ldrb	r3, [r7, #11]
    53a6:	68fa      	ldr	r2, [r7, #12]
    53a8:	3306      	adds	r3, #6
    53aa:	009b      	lsls	r3, r3, #2
    53ac:	4413      	add	r3, r2
    53ae:	687a      	ldr	r2, [r7, #4]
    53b0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    53b2:	bf00      	nop
    53b4:	3714      	adds	r7, #20
    53b6:	46bd      	mov	sp, r7
    53b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    53bc:	4770      	bx	lr

000053be <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    53be:	b480      	push	{r7}
    53c0:	b083      	sub	sp, #12
    53c2:	af00      	add	r7, sp, #0
    53c4:	6078      	str	r0, [r7, #4]
    53c6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    53c8:	687b      	ldr	r3, [r7, #4]
    53ca:	683a      	ldr	r2, [r7, #0]
    53cc:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    53ce:	bf00      	nop
    53d0:	370c      	adds	r7, #12
    53d2:	46bd      	mov	sp, r7
    53d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d8:	4770      	bx	lr

000053da <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    53da:	b480      	push	{r7}
    53dc:	b083      	sub	sp, #12
    53de:	af00      	add	r7, sp, #0
    53e0:	6078      	str	r0, [r7, #4]
    53e2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    53e4:	687b      	ldr	r3, [r7, #4]
    53e6:	683a      	ldr	r2, [r7, #0]
    53e8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    53ea:	bf00      	nop
    53ec:	370c      	adds	r7, #12
    53ee:	46bd      	mov	sp, r7
    53f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f4:	4770      	bx	lr
	...

000053f8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b082      	sub	sp, #8
    53fc:	af00      	add	r7, sp, #0
    53fe:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    5400:	2101      	movs	r1, #1
    5402:	484f      	ldr	r0, [pc, #316]	; (5540 <_ext_irq_init+0x148>)
    5404:	4b4f      	ldr	r3, [pc, #316]	; (5544 <_ext_irq_init+0x14c>)
    5406:	4798      	blx	r3
    5408:	4603      	mov	r3, r0
    540a:	f083 0301 	eor.w	r3, r3, #1
    540e:	b2db      	uxtb	r3, r3
    5410:	2b00      	cmp	r3, #0
    5412:	d011      	beq.n	5438 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    5414:	2102      	movs	r1, #2
    5416:	484a      	ldr	r0, [pc, #296]	; (5540 <_ext_irq_init+0x148>)
    5418:	4b4b      	ldr	r3, [pc, #300]	; (5548 <_ext_irq_init+0x150>)
    541a:	4798      	blx	r3
    541c:	4603      	mov	r3, r0
    541e:	2b00      	cmp	r3, #0
    5420:	d006      	beq.n	5430 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    5422:	4847      	ldr	r0, [pc, #284]	; (5540 <_ext_irq_init+0x148>)
    5424:	4b49      	ldr	r3, [pc, #292]	; (554c <_ext_irq_init+0x154>)
    5426:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    5428:	2102      	movs	r1, #2
    542a:	4845      	ldr	r0, [pc, #276]	; (5540 <_ext_irq_init+0x148>)
    542c:	4b48      	ldr	r3, [pc, #288]	; (5550 <_ext_irq_init+0x158>)
    542e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    5430:	2101      	movs	r1, #1
    5432:	4843      	ldr	r0, [pc, #268]	; (5540 <_ext_irq_init+0x148>)
    5434:	4b47      	ldr	r3, [pc, #284]	; (5554 <_ext_irq_init+0x15c>)
    5436:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    5438:	2101      	movs	r1, #1
    543a:	4841      	ldr	r0, [pc, #260]	; (5540 <_ext_irq_init+0x148>)
    543c:	4b44      	ldr	r3, [pc, #272]	; (5550 <_ext_irq_init+0x158>)
    543e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    5440:	2100      	movs	r1, #0
    5442:	483f      	ldr	r0, [pc, #252]	; (5540 <_ext_irq_init+0x148>)
    5444:	4b44      	ldr	r3, [pc, #272]	; (5558 <_ext_irq_init+0x160>)
    5446:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    5448:	2100      	movs	r1, #0
    544a:	483d      	ldr	r0, [pc, #244]	; (5540 <_ext_irq_init+0x148>)
    544c:	4b43      	ldr	r3, [pc, #268]	; (555c <_ext_irq_init+0x164>)
    544e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    5450:	2100      	movs	r1, #0
    5452:	483b      	ldr	r0, [pc, #236]	; (5540 <_ext_irq_init+0x148>)
    5454:	4b42      	ldr	r3, [pc, #264]	; (5560 <_ext_irq_init+0x168>)
    5456:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    5458:	f240 31bb 	movw	r1, #955	; 0x3bb
    545c:	4838      	ldr	r0, [pc, #224]	; (5540 <_ext_irq_init+0x148>)
    545e:	4b41      	ldr	r3, [pc, #260]	; (5564 <_ext_irq_init+0x16c>)
    5460:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    5462:	f240 313b 	movw	r1, #827	; 0x33b
    5466:	4836      	ldr	r0, [pc, #216]	; (5540 <_ext_irq_init+0x148>)
    5468:	4b3f      	ldr	r3, [pc, #252]	; (5568 <_ext_irq_init+0x170>)
    546a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    546c:	2100      	movs	r1, #0
    546e:	4834      	ldr	r0, [pc, #208]	; (5540 <_ext_irq_init+0x148>)
    5470:	4b3e      	ldr	r3, [pc, #248]	; (556c <_ext_irq_init+0x174>)
    5472:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5474:	4a3e      	ldr	r2, [pc, #248]	; (5570 <_ext_irq_init+0x178>)
    5476:	2100      	movs	r1, #0
    5478:	4831      	ldr	r0, [pc, #196]	; (5540 <_ext_irq_init+0x148>)
    547a:	4b3e      	ldr	r3, [pc, #248]	; (5574 <_ext_irq_init+0x17c>)
    547c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    547e:	2211      	movs	r2, #17
    5480:	2101      	movs	r1, #1
    5482:	482f      	ldr	r0, [pc, #188]	; (5540 <_ext_irq_init+0x148>)
    5484:	4b3b      	ldr	r3, [pc, #236]	; (5574 <_ext_irq_init+0x17c>)
    5486:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5488:	482d      	ldr	r0, [pc, #180]	; (5540 <_ext_irq_init+0x148>)
    548a:	4b3b      	ldr	r3, [pc, #236]	; (5578 <_ext_irq_init+0x180>)
    548c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    548e:	200c      	movs	r0, #12
    5490:	4b3a      	ldr	r3, [pc, #232]	; (557c <_ext_irq_init+0x184>)
    5492:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    5494:	200c      	movs	r0, #12
    5496:	4b3a      	ldr	r3, [pc, #232]	; (5580 <_ext_irq_init+0x188>)
    5498:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    549a:	200c      	movs	r0, #12
    549c:	4b39      	ldr	r3, [pc, #228]	; (5584 <_ext_irq_init+0x18c>)
    549e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    54a0:	200d      	movs	r0, #13
    54a2:	4b36      	ldr	r3, [pc, #216]	; (557c <_ext_irq_init+0x184>)
    54a4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    54a6:	200d      	movs	r0, #13
    54a8:	4b35      	ldr	r3, [pc, #212]	; (5580 <_ext_irq_init+0x188>)
    54aa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    54ac:	200d      	movs	r0, #13
    54ae:	4b35      	ldr	r3, [pc, #212]	; (5584 <_ext_irq_init+0x18c>)
    54b0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    54b2:	200f      	movs	r0, #15
    54b4:	4b31      	ldr	r3, [pc, #196]	; (557c <_ext_irq_init+0x184>)
    54b6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    54b8:	200f      	movs	r0, #15
    54ba:	4b31      	ldr	r3, [pc, #196]	; (5580 <_ext_irq_init+0x188>)
    54bc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    54be:	200f      	movs	r0, #15
    54c0:	4b30      	ldr	r3, [pc, #192]	; (5584 <_ext_irq_init+0x18c>)
    54c2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    54c4:	2010      	movs	r0, #16
    54c6:	4b2d      	ldr	r3, [pc, #180]	; (557c <_ext_irq_init+0x184>)
    54c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    54ca:	2010      	movs	r0, #16
    54cc:	4b2c      	ldr	r3, [pc, #176]	; (5580 <_ext_irq_init+0x188>)
    54ce:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    54d0:	2010      	movs	r0, #16
    54d2:	4b2c      	ldr	r3, [pc, #176]	; (5584 <_ext_irq_init+0x18c>)
    54d4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    54d6:	2011      	movs	r0, #17
    54d8:	4b28      	ldr	r3, [pc, #160]	; (557c <_ext_irq_init+0x184>)
    54da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    54dc:	2011      	movs	r0, #17
    54de:	4b28      	ldr	r3, [pc, #160]	; (5580 <_ext_irq_init+0x188>)
    54e0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    54e2:	2011      	movs	r0, #17
    54e4:	4b27      	ldr	r3, [pc, #156]	; (5584 <_ext_irq_init+0x18c>)
    54e6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    54e8:	2012      	movs	r0, #18
    54ea:	4b24      	ldr	r3, [pc, #144]	; (557c <_ext_irq_init+0x184>)
    54ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    54ee:	2012      	movs	r0, #18
    54f0:	4b23      	ldr	r3, [pc, #140]	; (5580 <_ext_irq_init+0x188>)
    54f2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    54f4:	2012      	movs	r0, #18
    54f6:	4b23      	ldr	r3, [pc, #140]	; (5584 <_ext_irq_init+0x18c>)
    54f8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    54fa:	2013      	movs	r0, #19
    54fc:	4b1f      	ldr	r3, [pc, #124]	; (557c <_ext_irq_init+0x184>)
    54fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5500:	2013      	movs	r0, #19
    5502:	4b1f      	ldr	r3, [pc, #124]	; (5580 <_ext_irq_init+0x188>)
    5504:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    5506:	2013      	movs	r0, #19
    5508:	4b1e      	ldr	r3, [pc, #120]	; (5584 <_ext_irq_init+0x18c>)
    550a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    550c:	2014      	movs	r0, #20
    550e:	4b1b      	ldr	r3, [pc, #108]	; (557c <_ext_irq_init+0x184>)
    5510:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    5512:	2014      	movs	r0, #20
    5514:	4b1a      	ldr	r3, [pc, #104]	; (5580 <_ext_irq_init+0x188>)
    5516:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    5518:	2014      	movs	r0, #20
    551a:	4b1a      	ldr	r3, [pc, #104]	; (5584 <_ext_irq_init+0x18c>)
    551c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    551e:	2015      	movs	r0, #21
    5520:	4b16      	ldr	r3, [pc, #88]	; (557c <_ext_irq_init+0x184>)
    5522:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    5524:	2015      	movs	r0, #21
    5526:	4b16      	ldr	r3, [pc, #88]	; (5580 <_ext_irq_init+0x188>)
    5528:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    552a:	2015      	movs	r0, #21
    552c:	4b15      	ldr	r3, [pc, #84]	; (5584 <_ext_irq_init+0x18c>)
    552e:	4798      	blx	r3

	callback = cb;
    5530:	4a15      	ldr	r2, [pc, #84]	; (5588 <_ext_irq_init+0x190>)
    5532:	687b      	ldr	r3, [r7, #4]
    5534:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    5536:	2300      	movs	r3, #0
}
    5538:	4618      	mov	r0, r3
    553a:	3708      	adds	r7, #8
    553c:	46bd      	mov	sp, r7
    553e:	bd80      	pop	{r7, pc}
    5540:	40002800 	.word	0x40002800
    5544:	000051b9 	.word	0x000051b9
    5548:	000052e9 	.word	0x000052e9
    554c:	00005279 	.word	0x00005279
    5550:	00005195 	.word	0x00005195
    5554:	00005319 	.word	0x00005319
    5558:	000052a5 	.word	0x000052a5
    555c:	00005341 	.word	0x00005341
    5560:	0000535f 	.word	0x0000535f
    5564:	0000537b 	.word	0x0000537b
    5568:	000053bf 	.word	0x000053bf
    556c:	000053db 	.word	0x000053db
    5570:	90999013 	.word	0x90999013
    5574:	00005397 	.word	0x00005397
    5578:	0000524d 	.word	0x0000524d
    557c:	00005115 	.word	0x00005115
    5580:	00005159 	.word	0x00005159
    5584:	000050d9 	.word	0x000050d9
    5588:	20000e1c 	.word	0x20000e1c

0000558c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    558c:	b580      	push	{r7, lr}
    558e:	b084      	sub	sp, #16
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
    5594:	460b      	mov	r3, r1
    5596:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5598:	23ff      	movs	r3, #255	; 0xff
    559a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    559c:	2300      	movs	r3, #0
    559e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    55a0:	e010      	b.n	55c4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    55a2:	7bbb      	ldrb	r3, [r7, #14]
    55a4:	4a1c      	ldr	r2, [pc, #112]	; (5618 <_ext_irq_enable+0x8c>)
    55a6:	00db      	lsls	r3, r3, #3
    55a8:	4413      	add	r3, r2
    55aa:	685a      	ldr	r2, [r3, #4]
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	429a      	cmp	r2, r3
    55b0:	d105      	bne.n	55be <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    55b2:	7bbb      	ldrb	r3, [r7, #14]
    55b4:	4a18      	ldr	r2, [pc, #96]	; (5618 <_ext_irq_enable+0x8c>)
    55b6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    55ba:	73fb      	strb	r3, [r7, #15]
			break;
    55bc:	e005      	b.n	55ca <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    55be:	7bbb      	ldrb	r3, [r7, #14]
    55c0:	3301      	adds	r3, #1
    55c2:	73bb      	strb	r3, [r7, #14]
    55c4:	7bbb      	ldrb	r3, [r7, #14]
    55c6:	2b08      	cmp	r3, #8
    55c8:	d9eb      	bls.n	55a2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    55ca:	7bfb      	ldrb	r3, [r7, #15]
    55cc:	2bff      	cmp	r3, #255	; 0xff
    55ce:	d102      	bne.n	55d6 <_ext_irq_enable+0x4a>
		return -1;
    55d0:	f04f 33ff 	mov.w	r3, #4294967295
    55d4:	e01c      	b.n	5610 <_ext_irq_enable+0x84>
	}

	if (enable) {
    55d6:	78fb      	ldrb	r3, [r7, #3]
    55d8:	2b00      	cmp	r3, #0
    55da:	d008      	beq.n	55ee <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    55dc:	7bfb      	ldrb	r3, [r7, #15]
    55de:	2201      	movs	r2, #1
    55e0:	fa02 f303 	lsl.w	r3, r2, r3
    55e4:	4619      	mov	r1, r3
    55e6:	480d      	ldr	r0, [pc, #52]	; (561c <_ext_irq_enable+0x90>)
    55e8:	4b0d      	ldr	r3, [pc, #52]	; (5620 <_ext_irq_enable+0x94>)
    55ea:	4798      	blx	r3
    55ec:	e00f      	b.n	560e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    55ee:	7bfb      	ldrb	r3, [r7, #15]
    55f0:	2201      	movs	r2, #1
    55f2:	fa02 f303 	lsl.w	r3, r2, r3
    55f6:	4619      	mov	r1, r3
    55f8:	4808      	ldr	r0, [pc, #32]	; (561c <_ext_irq_enable+0x90>)
    55fa:	4b0a      	ldr	r3, [pc, #40]	; (5624 <_ext_irq_enable+0x98>)
    55fc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    55fe:	7bfb      	ldrb	r3, [r7, #15]
    5600:	2201      	movs	r2, #1
    5602:	fa02 f303 	lsl.w	r3, r2, r3
    5606:	4619      	mov	r1, r3
    5608:	4804      	ldr	r0, [pc, #16]	; (561c <_ext_irq_enable+0x90>)
    560a:	4b07      	ldr	r3, [pc, #28]	; (5628 <_ext_irq_enable+0x9c>)
    560c:	4798      	blx	r3
	}

	return ERR_NONE;
    560e:	2300      	movs	r3, #0
}
    5610:	4618      	mov	r0, r3
    5612:	3710      	adds	r7, #16
    5614:	46bd      	mov	sp, r7
    5616:	bd80      	pop	{r7, pc}
    5618:	00010fec 	.word	0x00010fec
    561c:	40002800 	.word	0x40002800
    5620:	00005215 	.word	0x00005215
    5624:	00005231 	.word	0x00005231
    5628:	000051f9 	.word	0x000051f9

0000562c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    562c:	b580      	push	{r7, lr}
    562e:	b084      	sub	sp, #16
    5630:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    5632:	4841      	ldr	r0, [pc, #260]	; (5738 <_ext_irq_handler+0x10c>)
    5634:	4b41      	ldr	r3, [pc, #260]	; (573c <_ext_irq_handler+0x110>)
    5636:	4798      	blx	r3
    5638:	4603      	mov	r3, r0
    563a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    563c:	f04f 33ff 	mov.w	r3, #4294967295
    5640:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    5642:	683b      	ldr	r3, [r7, #0]
    5644:	4619      	mov	r1, r3
    5646:	483c      	ldr	r0, [pc, #240]	; (5738 <_ext_irq_handler+0x10c>)
    5648:	4b3d      	ldr	r3, [pc, #244]	; (5740 <_ext_irq_handler+0x114>)
    564a:	4798      	blx	r3

	ASSERT(callback);
    564c:	4b3d      	ldr	r3, [pc, #244]	; (5744 <_ext_irq_handler+0x118>)
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	2b00      	cmp	r3, #0
    5652:	bf14      	ite	ne
    5654:	2301      	movne	r3, #1
    5656:	2300      	moveq	r3, #0
    5658:	b2db      	uxtb	r3, r3
    565a:	f44f 7284 	mov.w	r2, #264	; 0x108
    565e:	493a      	ldr	r1, [pc, #232]	; (5748 <_ext_irq_handler+0x11c>)
    5660:	4618      	mov	r0, r3
    5662:	4b3a      	ldr	r3, [pc, #232]	; (574c <_ext_irq_handler+0x120>)
    5664:	4798      	blx	r3

	while (flags) {
    5666:	e060      	b.n	572a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5668:	683b      	ldr	r3, [r7, #0]
    566a:	4618      	mov	r0, r3
    566c:	4b38      	ldr	r3, [pc, #224]	; (5750 <_ext_irq_handler+0x124>)
    566e:	4798      	blx	r3
    5670:	4603      	mov	r3, r0
    5672:	b2db      	uxtb	r3, r3
    5674:	3b01      	subs	r3, #1
    5676:	b2db      	uxtb	r3, r3
    5678:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    567a:	e047      	b.n	570c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    567c:	2300      	movs	r3, #0
    567e:	71fb      	strb	r3, [r7, #7]
    5680:	2309      	movs	r3, #9
    5682:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5684:	e024      	b.n	56d0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5686:	79ba      	ldrb	r2, [r7, #6]
    5688:	79fb      	ldrb	r3, [r7, #7]
    568a:	4413      	add	r3, r2
    568c:	105b      	asrs	r3, r3, #1
    568e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5690:	797b      	ldrb	r3, [r7, #5]
    5692:	4a30      	ldr	r2, [pc, #192]	; (5754 <_ext_irq_handler+0x128>)
    5694:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5698:	461a      	mov	r2, r3
    569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    569e:	429a      	cmp	r2, r3
    56a0:	d106      	bne.n	56b0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    56a2:	797b      	ldrb	r3, [r7, #5]
    56a4:	4a2b      	ldr	r2, [pc, #172]	; (5754 <_ext_irq_handler+0x128>)
    56a6:	00db      	lsls	r3, r3, #3
    56a8:	4413      	add	r3, r2
    56aa:	685b      	ldr	r3, [r3, #4]
    56ac:	60bb      	str	r3, [r7, #8]
					break;
    56ae:	e013      	b.n	56d8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    56b0:	797b      	ldrb	r3, [r7, #5]
    56b2:	4a28      	ldr	r2, [pc, #160]	; (5754 <_ext_irq_handler+0x128>)
    56b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    56b8:	461a      	mov	r2, r3
    56ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    56be:	429a      	cmp	r2, r3
    56c0:	da03      	bge.n	56ca <_ext_irq_handler+0x9e>
					lower = middle + 1;
    56c2:	797b      	ldrb	r3, [r7, #5]
    56c4:	3301      	adds	r3, #1
    56c6:	71fb      	strb	r3, [r7, #7]
    56c8:	e002      	b.n	56d0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    56ca:	797b      	ldrb	r3, [r7, #5]
    56cc:	3b01      	subs	r3, #1
    56ce:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    56d0:	79ba      	ldrb	r2, [r7, #6]
    56d2:	79fb      	ldrb	r3, [r7, #7]
    56d4:	429a      	cmp	r2, r3
    56d6:	d2d6      	bcs.n	5686 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    56d8:	68bb      	ldr	r3, [r7, #8]
    56da:	f1b3 3fff 	cmp.w	r3, #4294967295
    56de:	d003      	beq.n	56e8 <_ext_irq_handler+0xbc>
				callback(pin);
    56e0:	4b18      	ldr	r3, [pc, #96]	; (5744 <_ext_irq_handler+0x118>)
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	68b8      	ldr	r0, [r7, #8]
    56e6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    56e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    56ec:	2201      	movs	r2, #1
    56ee:	fa02 f303 	lsl.w	r3, r2, r3
    56f2:	43da      	mvns	r2, r3
    56f4:	683b      	ldr	r3, [r7, #0]
    56f6:	4013      	ands	r3, r2
    56f8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    56fa:	683b      	ldr	r3, [r7, #0]
    56fc:	4618      	mov	r0, r3
    56fe:	4b14      	ldr	r3, [pc, #80]	; (5750 <_ext_irq_handler+0x124>)
    5700:	4798      	blx	r3
    5702:	4603      	mov	r3, r0
    5704:	b2db      	uxtb	r3, r3
    5706:	3b01      	subs	r3, #1
    5708:	b2db      	uxtb	r3, r3
    570a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    570c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5710:	f1b3 3fff 	cmp.w	r3, #4294967295
    5714:	d1b2      	bne.n	567c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    5716:	4808      	ldr	r0, [pc, #32]	; (5738 <_ext_irq_handler+0x10c>)
    5718:	4b08      	ldr	r3, [pc, #32]	; (573c <_ext_irq_handler+0x110>)
    571a:	4798      	blx	r3
    571c:	4603      	mov	r3, r0
    571e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    5720:	683b      	ldr	r3, [r7, #0]
    5722:	4619      	mov	r1, r3
    5724:	4804      	ldr	r0, [pc, #16]	; (5738 <_ext_irq_handler+0x10c>)
    5726:	4b06      	ldr	r3, [pc, #24]	; (5740 <_ext_irq_handler+0x114>)
    5728:	4798      	blx	r3
	while (flags) {
    572a:	683b      	ldr	r3, [r7, #0]
    572c:	2b00      	cmp	r3, #0
    572e:	d19b      	bne.n	5668 <_ext_irq_handler+0x3c>
	}
}
    5730:	bf00      	nop
    5732:	3710      	adds	r7, #16
    5734:	46bd      	mov	sp, r7
    5736:	bd80      	pop	{r7, pc}
    5738:	40002800 	.word	0x40002800
    573c:	000051e1 	.word	0x000051e1
    5740:	000051f9 	.word	0x000051f9
    5744:	20000e1c 	.word	0x20000e1c
    5748:	00011034 	.word	0x00011034
    574c:	0000445d 	.word	0x0000445d
    5750:	00010a25 	.word	0x00010a25
    5754:	00010fec 	.word	0x00010fec

00005758 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5758:	b580      	push	{r7, lr}
    575a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    575c:	4b01      	ldr	r3, [pc, #4]	; (5764 <EIC_0_Handler+0xc>)
    575e:	4798      	blx	r3
} /**
    5760:	bf00      	nop
    5762:	bd80      	pop	{r7, pc}
    5764:	0000562d 	.word	0x0000562d

00005768 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5768:	b580      	push	{r7, lr}
    576a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    576c:	4b01      	ldr	r3, [pc, #4]	; (5774 <EIC_1_Handler+0xc>)
    576e:	4798      	blx	r3
} /**
    5770:	bf00      	nop
    5772:	bd80      	pop	{r7, pc}
    5774:	0000562d 	.word	0x0000562d

00005778 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5778:	b580      	push	{r7, lr}
    577a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    577c:	4b01      	ldr	r3, [pc, #4]	; (5784 <EIC_3_Handler+0xc>)
    577e:	4798      	blx	r3
} /**
    5780:	bf00      	nop
    5782:	bd80      	pop	{r7, pc}
    5784:	0000562d 	.word	0x0000562d

00005788 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5788:	b580      	push	{r7, lr}
    578a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    578c:	4b01      	ldr	r3, [pc, #4]	; (5794 <EIC_4_Handler+0xc>)
    578e:	4798      	blx	r3
} /**
    5790:	bf00      	nop
    5792:	bd80      	pop	{r7, pc}
    5794:	0000562d 	.word	0x0000562d

00005798 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5798:	b580      	push	{r7, lr}
    579a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    579c:	4b01      	ldr	r3, [pc, #4]	; (57a4 <EIC_5_Handler+0xc>)
    579e:	4798      	blx	r3
} /**
    57a0:	bf00      	nop
    57a2:	bd80      	pop	{r7, pc}
    57a4:	0000562d 	.word	0x0000562d

000057a8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    57a8:	b580      	push	{r7, lr}
    57aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    57ac:	4b01      	ldr	r3, [pc, #4]	; (57b4 <EIC_6_Handler+0xc>)
    57ae:	4798      	blx	r3
} /**
    57b0:	bf00      	nop
    57b2:	bd80      	pop	{r7, pc}
    57b4:	0000562d 	.word	0x0000562d

000057b8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    57b8:	b580      	push	{r7, lr}
    57ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    57bc:	4b01      	ldr	r3, [pc, #4]	; (57c4 <EIC_7_Handler+0xc>)
    57be:	4798      	blx	r3
} /**
    57c0:	bf00      	nop
    57c2:	bd80      	pop	{r7, pc}
    57c4:	0000562d 	.word	0x0000562d

000057c8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    57c8:	b580      	push	{r7, lr}
    57ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    57cc:	4b01      	ldr	r3, [pc, #4]	; (57d4 <EIC_8_Handler+0xc>)
    57ce:	4798      	blx	r3
} /**
    57d0:	bf00      	nop
    57d2:	bd80      	pop	{r7, pc}
    57d4:	0000562d 	.word	0x0000562d

000057d8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    57d8:	b580      	push	{r7, lr}
    57da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    57dc:	4b01      	ldr	r3, [pc, #4]	; (57e4 <EIC_9_Handler+0xc>)
    57de:	4798      	blx	r3
}
    57e0:	bf00      	nop
    57e2:	bd80      	pop	{r7, pc}
    57e4:	0000562d 	.word	0x0000562d

000057e8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    57e8:	b480      	push	{r7}
    57ea:	b085      	sub	sp, #20
    57ec:	af00      	add	r7, sp, #0
    57ee:	60f8      	str	r0, [r7, #12]
    57f0:	460b      	mov	r3, r1
    57f2:	607a      	str	r2, [r7, #4]
    57f4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    57f6:	7afa      	ldrb	r2, [r7, #11]
    57f8:	68fb      	ldr	r3, [r7, #12]
    57fa:	3248      	adds	r2, #72	; 0x48
    57fc:	6879      	ldr	r1, [r7, #4]
    57fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5802:	bf00      	nop
    5804:	3714      	adds	r7, #20
    5806:	46bd      	mov	sp, r7
    5808:	f85d 7b04 	ldr.w	r7, [sp], #4
    580c:	4770      	bx	lr

0000580e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    580e:	b480      	push	{r7}
    5810:	b083      	sub	sp, #12
    5812:	af00      	add	r7, sp, #0
    5814:	6078      	str	r0, [r7, #4]
    5816:	460b      	mov	r3, r1
    5818:	70fb      	strb	r3, [r7, #3]
    581a:	4613      	mov	r3, r2
    581c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    581e:	78fb      	ldrb	r3, [r7, #3]
    5820:	687a      	ldr	r2, [r7, #4]
    5822:	3304      	adds	r3, #4
    5824:	00db      	lsls	r3, r3, #3
    5826:	4413      	add	r3, r2
    5828:	78ba      	ldrb	r2, [r7, #2]
    582a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    582c:	78fb      	ldrb	r3, [r7, #3]
    582e:	78ba      	ldrb	r2, [r7, #2]
    5830:	43d2      	mvns	r2, r2
    5832:	b2d1      	uxtb	r1, r2
    5834:	687a      	ldr	r2, [r7, #4]
    5836:	3304      	adds	r3, #4
    5838:	00db      	lsls	r3, r3, #3
    583a:	4413      	add	r3, r2
    583c:	460a      	mov	r2, r1
    583e:	711a      	strb	r2, [r3, #4]
}
    5840:	bf00      	nop
    5842:	370c      	adds	r7, #12
    5844:	46bd      	mov	sp, r7
    5846:	f85d 7b04 	ldr.w	r7, [sp], #4
    584a:	4770      	bx	lr

0000584c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    584c:	b480      	push	{r7}
    584e:	b085      	sub	sp, #20
    5850:	af00      	add	r7, sp, #0
    5852:	60f8      	str	r0, [r7, #12]
    5854:	460b      	mov	r3, r1
    5856:	607a      	str	r2, [r7, #4]
    5858:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    585a:	7afa      	ldrb	r2, [r7, #11]
    585c:	68fb      	ldr	r3, [r7, #12]
    585e:	3204      	adds	r2, #4
    5860:	6879      	ldr	r1, [r7, #4]
    5862:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5866:	bf00      	nop
    5868:	3714      	adds	r7, #20
    586a:	46bd      	mov	sp, r7
    586c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5870:	4770      	bx	lr
	...

00005874 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5874:	b580      	push	{r7, lr}
    5876:	b082      	sub	sp, #8
    5878:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    587a:	2300      	movs	r3, #0
    587c:	71fb      	strb	r3, [r7, #7]
    587e:	e00b      	b.n	5898 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5880:	79fb      	ldrb	r3, [r7, #7]
    5882:	4a18      	ldr	r2, [pc, #96]	; (58e4 <_event_system_init+0x70>)
    5884:	5cd3      	ldrb	r3, [r2, r3]
    5886:	461a      	mov	r2, r3
    5888:	79fb      	ldrb	r3, [r7, #7]
    588a:	4619      	mov	r1, r3
    588c:	4816      	ldr	r0, [pc, #88]	; (58e8 <_event_system_init+0x74>)
    588e:	4b17      	ldr	r3, [pc, #92]	; (58ec <_event_system_init+0x78>)
    5890:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5892:	79fb      	ldrb	r3, [r7, #7]
    5894:	3301      	adds	r3, #1
    5896:	71fb      	strb	r3, [r7, #7]
    5898:	79fb      	ldrb	r3, [r7, #7]
    589a:	2b42      	cmp	r3, #66	; 0x42
    589c:	d9f0      	bls.n	5880 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    589e:	2300      	movs	r3, #0
    58a0:	71fb      	strb	r3, [r7, #7]
    58a2:	e016      	b.n	58d2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    58a4:	79fb      	ldrb	r3, [r7, #7]
    58a6:	4a12      	ldr	r2, [pc, #72]	; (58f0 <_event_system_init+0x7c>)
    58a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    58ac:	461a      	mov	r2, r3
    58ae:	79fb      	ldrb	r3, [r7, #7]
    58b0:	4619      	mov	r1, r3
    58b2:	480d      	ldr	r0, [pc, #52]	; (58e8 <_event_system_init+0x74>)
    58b4:	4b0f      	ldr	r3, [pc, #60]	; (58f4 <_event_system_init+0x80>)
    58b6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    58b8:	79fb      	ldrb	r3, [r7, #7]
    58ba:	4a0f      	ldr	r2, [pc, #60]	; (58f8 <_event_system_init+0x84>)
    58bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58c0:	b2da      	uxtb	r2, r3
    58c2:	79fb      	ldrb	r3, [r7, #7]
    58c4:	4619      	mov	r1, r3
    58c6:	4808      	ldr	r0, [pc, #32]	; (58e8 <_event_system_init+0x74>)
    58c8:	4b0c      	ldr	r3, [pc, #48]	; (58fc <_event_system_init+0x88>)
    58ca:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    58cc:	79fb      	ldrb	r3, [r7, #7]
    58ce:	3301      	adds	r3, #1
    58d0:	71fb      	strb	r3, [r7, #7]
    58d2:	79fb      	ldrb	r3, [r7, #7]
    58d4:	2b1f      	cmp	r3, #31
    58d6:	d9e5      	bls.n	58a4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    58d8:	2300      	movs	r3, #0
}
    58da:	4618      	mov	r0, r3
    58dc:	3708      	adds	r7, #8
    58de:	46bd      	mov	sp, r7
    58e0:	bd80      	pop	{r7, pc}
    58e2:	bf00      	nop
    58e4:	0001104c 	.word	0x0001104c
    58e8:	4100e000 	.word	0x4100e000
    58ec:	000057e9 	.word	0x000057e9
    58f0:	00011090 	.word	0x00011090
    58f4:	0000584d 	.word	0x0000584d
    58f8:	000110d0 	.word	0x000110d0
    58fc:	0000580f 	.word	0x0000580f

00005900 <hri_gclk_wait_for_sync>:
{
    5900:	b480      	push	{r7}
    5902:	b083      	sub	sp, #12
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
    5908:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    590a:	bf00      	nop
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	685a      	ldr	r2, [r3, #4]
    5910:	683b      	ldr	r3, [r7, #0]
    5912:	4013      	ands	r3, r2
    5914:	2b00      	cmp	r3, #0
    5916:	d1f9      	bne.n	590c <hri_gclk_wait_for_sync+0xc>
}
    5918:	bf00      	nop
    591a:	370c      	adds	r7, #12
    591c:	46bd      	mov	sp, r7
    591e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5922:	4770      	bx	lr

00005924 <hri_gclk_write_GENCTRL_reg>:
{
    5924:	b580      	push	{r7, lr}
    5926:	b084      	sub	sp, #16
    5928:	af00      	add	r7, sp, #0
    592a:	60f8      	str	r0, [r7, #12]
    592c:	460b      	mov	r3, r1
    592e:	607a      	str	r2, [r7, #4]
    5930:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5932:	7afa      	ldrb	r2, [r7, #11]
    5934:	68fb      	ldr	r3, [r7, #12]
    5936:	3208      	adds	r2, #8
    5938:	6879      	ldr	r1, [r7, #4]
    593a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    593e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5942:	68f8      	ldr	r0, [r7, #12]
    5944:	4b02      	ldr	r3, [pc, #8]	; (5950 <hri_gclk_write_GENCTRL_reg+0x2c>)
    5946:	4798      	blx	r3
}
    5948:	bf00      	nop
    594a:	3710      	adds	r7, #16
    594c:	46bd      	mov	sp, r7
    594e:	bd80      	pop	{r7, pc}
    5950:	00005901 	.word	0x00005901

00005954 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    5954:	b580      	push	{r7, lr}
    5956:	b082      	sub	sp, #8
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	f003 0301 	and.w	r3, r3, #1
    5962:	2b00      	cmp	r3, #0
    5964:	d004      	beq.n	5970 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5966:	4a3b      	ldr	r2, [pc, #236]	; (5a54 <_gclk_init_generators_by_fref+0x100>)
    5968:	2100      	movs	r1, #0
    596a:	483b      	ldr	r0, [pc, #236]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    596c:	4b3b      	ldr	r3, [pc, #236]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    596e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	f003 0302 	and.w	r3, r3, #2
    5976:	2b00      	cmp	r3, #0
    5978:	d004      	beq.n	5984 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    597a:	4a39      	ldr	r2, [pc, #228]	; (5a60 <_gclk_init_generators_by_fref+0x10c>)
    597c:	2101      	movs	r1, #1
    597e:	4836      	ldr	r0, [pc, #216]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    5980:	4b36      	ldr	r3, [pc, #216]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    5982:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	f003 0304 	and.w	r3, r3, #4
    598a:	2b00      	cmp	r3, #0
    598c:	d004      	beq.n	5998 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    598e:	4a35      	ldr	r2, [pc, #212]	; (5a64 <_gclk_init_generators_by_fref+0x110>)
    5990:	2102      	movs	r1, #2
    5992:	4831      	ldr	r0, [pc, #196]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    5994:	4b31      	ldr	r3, [pc, #196]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    5996:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	f003 0308 	and.w	r3, r3, #8
    599e:	2b00      	cmp	r3, #0
    59a0:	d004      	beq.n	59ac <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    59a2:	4a31      	ldr	r2, [pc, #196]	; (5a68 <_gclk_init_generators_by_fref+0x114>)
    59a4:	2103      	movs	r1, #3
    59a6:	482c      	ldr	r0, [pc, #176]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    59a8:	4b2c      	ldr	r3, [pc, #176]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    59aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	f003 0310 	and.w	r3, r3, #16
    59b2:	2b00      	cmp	r3, #0
    59b4:	d004      	beq.n	59c0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    59b6:	4a2d      	ldr	r2, [pc, #180]	; (5a6c <_gclk_init_generators_by_fref+0x118>)
    59b8:	2104      	movs	r1, #4
    59ba:	4827      	ldr	r0, [pc, #156]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    59bc:	4b27      	ldr	r3, [pc, #156]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    59be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	f003 0320 	and.w	r3, r3, #32
    59c6:	2b00      	cmp	r3, #0
    59c8:	d004      	beq.n	59d4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    59ca:	4a29      	ldr	r2, [pc, #164]	; (5a70 <_gclk_init_generators_by_fref+0x11c>)
    59cc:	2105      	movs	r1, #5
    59ce:	4822      	ldr	r0, [pc, #136]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    59d0:	4b22      	ldr	r3, [pc, #136]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    59d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    59da:	2b00      	cmp	r3, #0
    59dc:	d004      	beq.n	59e8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    59de:	4a25      	ldr	r2, [pc, #148]	; (5a74 <_gclk_init_generators_by_fref+0x120>)
    59e0:	2106      	movs	r1, #6
    59e2:	481d      	ldr	r0, [pc, #116]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    59e4:	4b1d      	ldr	r3, [pc, #116]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    59e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    59ee:	2b00      	cmp	r3, #0
    59f0:	d004      	beq.n	59fc <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    59f2:	4a21      	ldr	r2, [pc, #132]	; (5a78 <_gclk_init_generators_by_fref+0x124>)
    59f4:	2107      	movs	r1, #7
    59f6:	4818      	ldr	r0, [pc, #96]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    59f8:	4b18      	ldr	r3, [pc, #96]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    59fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5a02:	2b00      	cmp	r3, #0
    5a04:	d004      	beq.n	5a10 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    5a06:	4a1d      	ldr	r2, [pc, #116]	; (5a7c <_gclk_init_generators_by_fref+0x128>)
    5a08:	2108      	movs	r1, #8
    5a0a:	4813      	ldr	r0, [pc, #76]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    5a0c:	4b13      	ldr	r3, [pc, #76]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    5a0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5a16:	2b00      	cmp	r3, #0
    5a18:	d004      	beq.n	5a24 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    5a1a:	4a19      	ldr	r2, [pc, #100]	; (5a80 <_gclk_init_generators_by_fref+0x12c>)
    5a1c:	2109      	movs	r1, #9
    5a1e:	480e      	ldr	r0, [pc, #56]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    5a20:	4b0e      	ldr	r3, [pc, #56]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    5a22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d004      	beq.n	5a38 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    5a2e:	4a15      	ldr	r2, [pc, #84]	; (5a84 <_gclk_init_generators_by_fref+0x130>)
    5a30:	210a      	movs	r1, #10
    5a32:	4809      	ldr	r0, [pc, #36]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    5a34:	4b09      	ldr	r3, [pc, #36]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    5a36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d004      	beq.n	5a4c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    5a42:	4a11      	ldr	r2, [pc, #68]	; (5a88 <_gclk_init_generators_by_fref+0x134>)
    5a44:	210b      	movs	r1, #11
    5a46:	4804      	ldr	r0, [pc, #16]	; (5a58 <_gclk_init_generators_by_fref+0x104>)
    5a48:	4b04      	ldr	r3, [pc, #16]	; (5a5c <_gclk_init_generators_by_fref+0x108>)
    5a4a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5a4c:	bf00      	nop
    5a4e:	3708      	adds	r7, #8
    5a50:	46bd      	mov	sp, r7
    5a52:	bd80      	pop	{r7, pc}
    5a54:	00010107 	.word	0x00010107
    5a58:	40001c00 	.word	0x40001c00
    5a5c:	00005925 	.word	0x00005925
    5a60:	00010907 	.word	0x00010907
    5a64:	00010906 	.word	0x00010906
    5a68:	00020908 	.word	0x00020908
    5a6c:	00010901 	.word	0x00010901
    5a70:	00062901 	.word	0x00062901
    5a74:	000c2901 	.word	0x000c2901
    5a78:	00082908 	.word	0x00082908
    5a7c:	00032901 	.word	0x00032901
    5a80:	00011908 	.word	0x00011908
    5a84:	00010905 	.word	0x00010905
    5a88:	00041905 	.word	0x00041905

00005a8c <hri_mclk_write_CPUDIV_reg>:
{
    5a8c:	b480      	push	{r7}
    5a8e:	b083      	sub	sp, #12
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
    5a94:	460b      	mov	r3, r1
    5a96:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	78fa      	ldrb	r2, [r7, #3]
    5a9c:	715a      	strb	r2, [r3, #5]
}
    5a9e:	bf00      	nop
    5aa0:	370c      	adds	r7, #12
    5aa2:	46bd      	mov	sp, r7
    5aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa8:	4770      	bx	lr
	...

00005aac <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5aac:	b580      	push	{r7, lr}
    5aae:	b082      	sub	sp, #8
    5ab0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    5ab2:	4b05      	ldr	r3, [pc, #20]	; (5ac8 <_mclk_init+0x1c>)
    5ab4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    5ab6:	2101      	movs	r1, #1
    5ab8:	6878      	ldr	r0, [r7, #4]
    5aba:	4b04      	ldr	r3, [pc, #16]	; (5acc <_mclk_init+0x20>)
    5abc:	4798      	blx	r3
}
    5abe:	bf00      	nop
    5ac0:	3708      	adds	r7, #8
    5ac2:	46bd      	mov	sp, r7
    5ac4:	bd80      	pop	{r7, pc}
    5ac6:	bf00      	nop
    5ac8:	40000800 	.word	0x40000800
    5acc:	00005a8d 	.word	0x00005a8d

00005ad0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5ad0:	b480      	push	{r7}
    5ad2:	b083      	sub	sp, #12
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
    5ad8:	460b      	mov	r3, r1
    5ada:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	78fa      	ldrb	r2, [r7, #3]
    5ae0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5ae2:	bf00      	nop
    5ae4:	370c      	adds	r7, #12
    5ae6:	46bd      	mov	sp, r7
    5ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aec:	4770      	bx	lr

00005aee <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5aee:	b480      	push	{r7}
    5af0:	b083      	sub	sp, #12
    5af2:	af00      	add	r7, sp, #0
    5af4:	6078      	str	r0, [r7, #4]
    5af6:	460b      	mov	r3, r1
    5af8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5afa:	687b      	ldr	r3, [r7, #4]
    5afc:	887a      	ldrh	r2, [r7, #2]
    5afe:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5b00:	bf00      	nop
    5b02:	370c      	adds	r7, #12
    5b04:	46bd      	mov	sp, r7
    5b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b0a:	4770      	bx	lr

00005b0c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5b0c:	b480      	push	{r7}
    5b0e:	b083      	sub	sp, #12
    5b10:	af00      	add	r7, sp, #0
    5b12:	6078      	str	r0, [r7, #4]
    5b14:	460b      	mov	r3, r1
    5b16:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5b18:	687b      	ldr	r3, [r7, #4]
    5b1a:	78fa      	ldrb	r2, [r7, #3]
    5b1c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5b1e:	bf00      	nop
    5b20:	370c      	adds	r7, #12
    5b22:	46bd      	mov	sp, r7
    5b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b28:	4770      	bx	lr

00005b2a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    5b2a:	b480      	push	{r7}
    5b2c:	b083      	sub	sp, #12
    5b2e:	af00      	add	r7, sp, #0
    5b30:	6078      	str	r0, [r7, #4]
    5b32:	460b      	mov	r3, r1
    5b34:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	78fa      	ldrb	r2, [r7, #3]
    5b3a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5b3c:	bf00      	nop
    5b3e:	370c      	adds	r7, #12
    5b40:	46bd      	mov	sp, r7
    5b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b46:	4770      	bx	lr

00005b48 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5b48:	b480      	push	{r7}
    5b4a:	b085      	sub	sp, #20
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	69db      	ldr	r3, [r3, #28]
    5b54:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5b56:	68fb      	ldr	r3, [r7, #12]
    5b58:	0a1b      	lsrs	r3, r3, #8
    5b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b5e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b60:	68fb      	ldr	r3, [r7, #12]
}
    5b62:	4618      	mov	r0, r3
    5b64:	3714      	adds	r7, #20
    5b66:	46bd      	mov	sp, r7
    5b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b6c:	4770      	bx	lr

00005b6e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5b6e:	b480      	push	{r7}
    5b70:	b083      	sub	sp, #12
    5b72:	af00      	add	r7, sp, #0
    5b74:	6078      	str	r0, [r7, #4]
    5b76:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	683a      	ldr	r2, [r7, #0]
    5b7c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5b7e:	bf00      	nop
    5b80:	370c      	adds	r7, #12
    5b82:	46bd      	mov	sp, r7
    5b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b88:	4770      	bx	lr
	...

00005b8c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5b8c:	b580      	push	{r7, lr}
    5b8e:	b082      	sub	sp, #8
    5b90:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5b92:	4b13      	ldr	r3, [pc, #76]	; (5be0 <_osc32kctrl_init_sources+0x54>)
    5b94:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    5b96:	2300      	movs	r3, #0
    5b98:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5b9a:	f242 018e 	movw	r1, #8334	; 0x208e
    5b9e:	6878      	ldr	r0, [r7, #4]
    5ba0:	4b10      	ldr	r3, [pc, #64]	; (5be4 <_osc32kctrl_init_sources+0x58>)
    5ba2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    5ba4:	2100      	movs	r1, #0
    5ba6:	6878      	ldr	r0, [r7, #4]
    5ba8:	4b0f      	ldr	r3, [pc, #60]	; (5be8 <_osc32kctrl_init_sources+0x5c>)
    5baa:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5bac:	2100      	movs	r1, #0
    5bae:	6878      	ldr	r0, [r7, #4]
    5bb0:	4b0e      	ldr	r3, [pc, #56]	; (5bec <_osc32kctrl_init_sources+0x60>)
    5bb2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    5bb4:	6878      	ldr	r0, [r7, #4]
    5bb6:	4b0e      	ldr	r3, [pc, #56]	; (5bf0 <_osc32kctrl_init_sources+0x64>)
    5bb8:	4798      	blx	r3
    5bba:	4603      	mov	r3, r0
    5bbc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5bbe:	887b      	ldrh	r3, [r7, #2]
    5bc0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    5bc2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    5bc6:	4619      	mov	r1, r3
    5bc8:	6878      	ldr	r0, [r7, #4]
    5bca:	4b0a      	ldr	r3, [pc, #40]	; (5bf4 <_osc32kctrl_init_sources+0x68>)
    5bcc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5bce:	2100      	movs	r1, #0
    5bd0:	6878      	ldr	r0, [r7, #4]
    5bd2:	4b09      	ldr	r3, [pc, #36]	; (5bf8 <_osc32kctrl_init_sources+0x6c>)
    5bd4:	4798      	blx	r3
	(void)calib;
}
    5bd6:	bf00      	nop
    5bd8:	3708      	adds	r7, #8
    5bda:	46bd      	mov	sp, r7
    5bdc:	bd80      	pop	{r7, pc}
    5bde:	bf00      	nop
    5be0:	40001400 	.word	0x40001400
    5be4:	00005aef 	.word	0x00005aef
    5be8:	00005b0d 	.word	0x00005b0d
    5bec:	00005b2b 	.word	0x00005b2b
    5bf0:	00005b49 	.word	0x00005b49
    5bf4:	00005b6f 	.word	0x00005b6f
    5bf8:	00005ad1 	.word	0x00005ad1

00005bfc <hri_gclk_wait_for_sync>:
{
    5bfc:	b480      	push	{r7}
    5bfe:	b083      	sub	sp, #12
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
    5c04:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5c06:	bf00      	nop
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	685a      	ldr	r2, [r3, #4]
    5c0c:	683b      	ldr	r3, [r7, #0]
    5c0e:	4013      	ands	r3, r2
    5c10:	2b00      	cmp	r3, #0
    5c12:	d1f9      	bne.n	5c08 <hri_gclk_wait_for_sync+0xc>
}
    5c14:	bf00      	nop
    5c16:	370c      	adds	r7, #12
    5c18:	46bd      	mov	sp, r7
    5c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c1e:	4770      	bx	lr

00005c20 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5c20:	b480      	push	{r7}
    5c22:	b083      	sub	sp, #12
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	685b      	ldr	r3, [r3, #4]
    5c2c:	089b      	lsrs	r3, r3, #2
    5c2e:	f003 0301 	and.w	r3, r3, #1
    5c32:	2b00      	cmp	r3, #0
    5c34:	bf14      	ite	ne
    5c36:	2301      	movne	r3, #1
    5c38:	2300      	moveq	r3, #0
    5c3a:	b2db      	uxtb	r3, r3
}
    5c3c:	4618      	mov	r0, r3
    5c3e:	370c      	adds	r7, #12
    5c40:	46bd      	mov	sp, r7
    5c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c46:	4770      	bx	lr

00005c48 <hri_gclk_read_SYNCBUSY_reg>:
{
    5c48:	b480      	push	{r7}
    5c4a:	b083      	sub	sp, #12
    5c4c:	af00      	add	r7, sp, #0
    5c4e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	685b      	ldr	r3, [r3, #4]
}
    5c54:	4618      	mov	r0, r3
    5c56:	370c      	adds	r7, #12
    5c58:	46bd      	mov	sp, r7
    5c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c5e:	4770      	bx	lr

00005c60 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5c60:	b580      	push	{r7, lr}
    5c62:	b086      	sub	sp, #24
    5c64:	af00      	add	r7, sp, #0
    5c66:	60f8      	str	r0, [r7, #12]
    5c68:	460b      	mov	r3, r1
    5c6a:	607a      	str	r2, [r7, #4]
    5c6c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5c6e:	7afa      	ldrb	r2, [r7, #11]
    5c70:	68fb      	ldr	r3, [r7, #12]
    5c72:	3208      	adds	r2, #8
    5c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c78:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5c7a:	697b      	ldr	r3, [r7, #20]
    5c7c:	f023 030f 	bic.w	r3, r3, #15
    5c80:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5c82:	687b      	ldr	r3, [r7, #4]
    5c84:	f003 030f 	and.w	r3, r3, #15
    5c88:	697a      	ldr	r2, [r7, #20]
    5c8a:	4313      	orrs	r3, r2
    5c8c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5c8e:	7afa      	ldrb	r2, [r7, #11]
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	3208      	adds	r2, #8
    5c94:	6979      	ldr	r1, [r7, #20]
    5c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5c9a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5c9e:	68f8      	ldr	r0, [r7, #12]
    5ca0:	4b02      	ldr	r3, [pc, #8]	; (5cac <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    5ca2:	4798      	blx	r3
}
    5ca4:	bf00      	nop
    5ca6:	3718      	adds	r7, #24
    5ca8:	46bd      	mov	sp, r7
    5caa:	bd80      	pop	{r7, pc}
    5cac:	00005bfd 	.word	0x00005bfd

00005cb0 <hri_gclk_write_PCHCTRL_reg>:
{
    5cb0:	b480      	push	{r7}
    5cb2:	b085      	sub	sp, #20
    5cb4:	af00      	add	r7, sp, #0
    5cb6:	60f8      	str	r0, [r7, #12]
    5cb8:	460b      	mov	r3, r1
    5cba:	607a      	str	r2, [r7, #4]
    5cbc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5cbe:	7afa      	ldrb	r2, [r7, #11]
    5cc0:	68fb      	ldr	r3, [r7, #12]
    5cc2:	3220      	adds	r2, #32
    5cc4:	6879      	ldr	r1, [r7, #4]
    5cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5cca:	bf00      	nop
    5ccc:	3714      	adds	r7, #20
    5cce:	46bd      	mov	sp, r7
    5cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cd4:	4770      	bx	lr

00005cd6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    5cd6:	b480      	push	{r7}
    5cd8:	b085      	sub	sp, #20
    5cda:	af00      	add	r7, sp, #0
    5cdc:	60f8      	str	r0, [r7, #12]
    5cde:	460b      	mov	r3, r1
    5ce0:	607a      	str	r2, [r7, #4]
    5ce2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5ce4:	bf00      	nop
    5ce6:	7afa      	ldrb	r2, [r7, #11]
    5ce8:	68f9      	ldr	r1, [r7, #12]
    5cea:	4613      	mov	r3, r2
    5cec:	009b      	lsls	r3, r3, #2
    5cee:	4413      	add	r3, r2
    5cf0:	009b      	lsls	r3, r3, #2
    5cf2:	440b      	add	r3, r1
    5cf4:	333c      	adds	r3, #60	; 0x3c
    5cf6:	681a      	ldr	r2, [r3, #0]
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	4013      	ands	r3, r2
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d1f2      	bne.n	5ce6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5d00:	bf00      	nop
    5d02:	3714      	adds	r7, #20
    5d04:	46bd      	mov	sp, r7
    5d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d0a:	4770      	bx	lr

00005d0c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5d0c:	b480      	push	{r7}
    5d0e:	b083      	sub	sp, #12
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
    5d14:	460b      	mov	r3, r1
    5d16:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5d18:	78fa      	ldrb	r2, [r7, #3]
    5d1a:	6879      	ldr	r1, [r7, #4]
    5d1c:	4613      	mov	r3, r2
    5d1e:	009b      	lsls	r3, r3, #2
    5d20:	4413      	add	r3, r2
    5d22:	009b      	lsls	r3, r3, #2
    5d24:	440b      	add	r3, r1
    5d26:	3340      	adds	r3, #64	; 0x40
    5d28:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5d2a:	f003 0301 	and.w	r3, r3, #1
    5d2e:	2b00      	cmp	r3, #0
    5d30:	bf14      	ite	ne
    5d32:	2301      	movne	r3, #1
    5d34:	2300      	moveq	r3, #0
    5d36:	b2db      	uxtb	r3, r3
}
    5d38:	4618      	mov	r0, r3
    5d3a:	370c      	adds	r7, #12
    5d3c:	46bd      	mov	sp, r7
    5d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d42:	4770      	bx	lr

00005d44 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5d44:	b480      	push	{r7}
    5d46:	b083      	sub	sp, #12
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
    5d4c:	460b      	mov	r3, r1
    5d4e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5d50:	78fa      	ldrb	r2, [r7, #3]
    5d52:	6879      	ldr	r1, [r7, #4]
    5d54:	4613      	mov	r3, r2
    5d56:	009b      	lsls	r3, r3, #2
    5d58:	4413      	add	r3, r2
    5d5a:	009b      	lsls	r3, r3, #2
    5d5c:	440b      	add	r3, r1
    5d5e:	3340      	adds	r3, #64	; 0x40
    5d60:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5d62:	085b      	lsrs	r3, r3, #1
    5d64:	f003 0301 	and.w	r3, r3, #1
    5d68:	2b00      	cmp	r3, #0
    5d6a:	bf14      	ite	ne
    5d6c:	2301      	movne	r3, #1
    5d6e:	2300      	moveq	r3, #0
    5d70:	b2db      	uxtb	r3, r3
}
    5d72:	4618      	mov	r0, r3
    5d74:	370c      	adds	r7, #12
    5d76:	46bd      	mov	sp, r7
    5d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d7c:	4770      	bx	lr
	...

00005d80 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5d80:	b580      	push	{r7, lr}
    5d82:	b082      	sub	sp, #8
    5d84:	af00      	add	r7, sp, #0
    5d86:	6078      	str	r0, [r7, #4]
    5d88:	460b      	mov	r3, r1
    5d8a:	70fb      	strb	r3, [r7, #3]
    5d8c:	4613      	mov	r3, r2
    5d8e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5d90:	78fa      	ldrb	r2, [r7, #3]
    5d92:	6879      	ldr	r1, [r7, #4]
    5d94:	4613      	mov	r3, r2
    5d96:	009b      	lsls	r3, r3, #2
    5d98:	4413      	add	r3, r2
    5d9a:	009b      	lsls	r3, r3, #2
    5d9c:	440b      	add	r3, r1
    5d9e:	3330      	adds	r3, #48	; 0x30
    5da0:	78ba      	ldrb	r2, [r7, #2]
    5da2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    5da4:	78fb      	ldrb	r3, [r7, #3]
    5da6:	2202      	movs	r2, #2
    5da8:	4619      	mov	r1, r3
    5daa:	6878      	ldr	r0, [r7, #4]
    5dac:	4b02      	ldr	r3, [pc, #8]	; (5db8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5dae:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5db0:	bf00      	nop
    5db2:	3708      	adds	r7, #8
    5db4:	46bd      	mov	sp, r7
    5db6:	bd80      	pop	{r7, pc}
    5db8:	00005cd7 	.word	0x00005cd7

00005dbc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b084      	sub	sp, #16
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	60f8      	str	r0, [r7, #12]
    5dc4:	460b      	mov	r3, r1
    5dc6:	607a      	str	r2, [r7, #4]
    5dc8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5dca:	7afa      	ldrb	r2, [r7, #11]
    5dcc:	68f9      	ldr	r1, [r7, #12]
    5dce:	4613      	mov	r3, r2
    5dd0:	009b      	lsls	r3, r3, #2
    5dd2:	4413      	add	r3, r2
    5dd4:	009b      	lsls	r3, r3, #2
    5dd6:	440b      	add	r3, r1
    5dd8:	3334      	adds	r3, #52	; 0x34
    5dda:	687a      	ldr	r2, [r7, #4]
    5ddc:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5dde:	7afb      	ldrb	r3, [r7, #11]
    5de0:	2206      	movs	r2, #6
    5de2:	4619      	mov	r1, r3
    5de4:	68f8      	ldr	r0, [r7, #12]
    5de6:	4b03      	ldr	r3, [pc, #12]	; (5df4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5de8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5dea:	bf00      	nop
    5dec:	3710      	adds	r7, #16
    5dee:	46bd      	mov	sp, r7
    5df0:	bd80      	pop	{r7, pc}
    5df2:	bf00      	nop
    5df4:	00005cd7 	.word	0x00005cd7

00005df8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5df8:	b480      	push	{r7}
    5dfa:	b085      	sub	sp, #20
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	60f8      	str	r0, [r7, #12]
    5e00:	460b      	mov	r3, r1
    5e02:	607a      	str	r2, [r7, #4]
    5e04:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5e06:	7afa      	ldrb	r2, [r7, #11]
    5e08:	68f9      	ldr	r1, [r7, #12]
    5e0a:	4613      	mov	r3, r2
    5e0c:	009b      	lsls	r3, r3, #2
    5e0e:	4413      	add	r3, r2
    5e10:	009b      	lsls	r3, r3, #2
    5e12:	440b      	add	r3, r1
    5e14:	3338      	adds	r3, #56	; 0x38
    5e16:	687a      	ldr	r2, [r7, #4]
    5e18:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5e1a:	bf00      	nop
    5e1c:	3714      	adds	r7, #20
    5e1e:	46bd      	mov	sp, r7
    5e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e24:	4770      	bx	lr

00005e26 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5e26:	b480      	push	{r7}
    5e28:	b083      	sub	sp, #12
    5e2a:	af00      	add	r7, sp, #0
    5e2c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	691b      	ldr	r3, [r3, #16]
    5e32:	085b      	lsrs	r3, r3, #1
    5e34:	f003 0301 	and.w	r3, r3, #1
    5e38:	2b00      	cmp	r3, #0
    5e3a:	bf14      	ite	ne
    5e3c:	2301      	movne	r3, #1
    5e3e:	2300      	moveq	r3, #0
    5e40:	b2db      	uxtb	r3, r3
}
    5e42:	4618      	mov	r0, r3
    5e44:	370c      	adds	r7, #12
    5e46:	46bd      	mov	sp, r7
    5e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4c:	4770      	bx	lr

00005e4e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5e4e:	b480      	push	{r7}
    5e50:	b083      	sub	sp, #12
    5e52:	af00      	add	r7, sp, #0
    5e54:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	691b      	ldr	r3, [r3, #16]
    5e5a:	0a1b      	lsrs	r3, r3, #8
    5e5c:	f003 0301 	and.w	r3, r3, #1
    5e60:	2b00      	cmp	r3, #0
    5e62:	bf14      	ite	ne
    5e64:	2301      	movne	r3, #1
    5e66:	2300      	moveq	r3, #0
    5e68:	b2db      	uxtb	r3, r3
}
    5e6a:	4618      	mov	r0, r3
    5e6c:	370c      	adds	r7, #12
    5e6e:	46bd      	mov	sp, r7
    5e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e74:	4770      	bx	lr

00005e76 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5e76:	b480      	push	{r7}
    5e78:	b085      	sub	sp, #20
    5e7a:	af00      	add	r7, sp, #0
    5e7c:	6078      	str	r0, [r7, #4]
    5e7e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5e80:	687b      	ldr	r3, [r7, #4]
    5e82:	691b      	ldr	r3, [r3, #16]
    5e84:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5e86:	68fa      	ldr	r2, [r7, #12]
    5e88:	683b      	ldr	r3, [r7, #0]
    5e8a:	4013      	ands	r3, r2
    5e8c:	60fb      	str	r3, [r7, #12]
	return tmp;
    5e8e:	68fb      	ldr	r3, [r7, #12]
}
    5e90:	4618      	mov	r0, r3
    5e92:	3714      	adds	r7, #20
    5e94:	46bd      	mov	sp, r7
    5e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e9a:	4770      	bx	lr

00005e9c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5e9c:	b480      	push	{r7}
    5e9e:	b085      	sub	sp, #20
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	60f8      	str	r0, [r7, #12]
    5ea4:	460b      	mov	r3, r1
    5ea6:	607a      	str	r2, [r7, #4]
    5ea8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5eaa:	7afb      	ldrb	r3, [r7, #11]
    5eac:	68fa      	ldr	r2, [r7, #12]
    5eae:	3304      	adds	r3, #4
    5eb0:	009b      	lsls	r3, r3, #2
    5eb2:	4413      	add	r3, r2
    5eb4:	687a      	ldr	r2, [r7, #4]
    5eb6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5eb8:	bf00      	nop
    5eba:	3714      	adds	r7, #20
    5ebc:	46bd      	mov	sp, r7
    5ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ec2:	4770      	bx	lr

00005ec4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5ec4:	b480      	push	{r7}
    5ec6:	b083      	sub	sp, #12
    5ec8:	af00      	add	r7, sp, #0
    5eca:	6078      	str	r0, [r7, #4]
    5ecc:	460b      	mov	r3, r1
    5ece:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	78fa      	ldrb	r2, [r7, #3]
    5ed4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ed6:	bf00      	nop
    5ed8:	370c      	adds	r7, #12
    5eda:	46bd      	mov	sp, r7
    5edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee0:	4770      	bx	lr

00005ee2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5ee2:	b480      	push	{r7}
    5ee4:	b085      	sub	sp, #20
    5ee6:	af00      	add	r7, sp, #0
    5ee8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5eea:	687b      	ldr	r3, [r7, #4]
    5eec:	f893 3020 	ldrb.w	r3, [r3, #32]
    5ef0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5ef2:	7bfb      	ldrb	r3, [r7, #15]
    5ef4:	f003 0301 	and.w	r3, r3, #1
    5ef8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5efa:	7bfb      	ldrb	r3, [r7, #15]
    5efc:	2b00      	cmp	r3, #0
    5efe:	bf14      	ite	ne
    5f00:	2301      	movne	r3, #1
    5f02:	2300      	moveq	r3, #0
    5f04:	b2db      	uxtb	r3, r3
}
    5f06:	4618      	mov	r0, r3
    5f08:	3714      	adds	r7, #20
    5f0a:	46bd      	mov	sp, r7
    5f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f10:	4770      	bx	lr

00005f12 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5f12:	b480      	push	{r7}
    5f14:	b083      	sub	sp, #12
    5f16:	af00      	add	r7, sp, #0
    5f18:	6078      	str	r0, [r7, #4]
    5f1a:	460b      	mov	r3, r1
    5f1c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5f1e:	687b      	ldr	r3, [r7, #4]
    5f20:	78fa      	ldrb	r2, [r7, #3]
    5f22:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5f26:	bf00      	nop
    5f28:	370c      	adds	r7, #12
    5f2a:	46bd      	mov	sp, r7
    5f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f30:	4770      	bx	lr

00005f32 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5f32:	b480      	push	{r7}
    5f34:	b083      	sub	sp, #12
    5f36:	af00      	add	r7, sp, #0
    5f38:	6078      	str	r0, [r7, #4]
    5f3a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	683a      	ldr	r2, [r7, #0]
    5f40:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5f42:	bf00      	nop
    5f44:	370c      	adds	r7, #12
    5f46:	46bd      	mov	sp, r7
    5f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f4c:	4770      	bx	lr

00005f4e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5f4e:	b480      	push	{r7}
    5f50:	b083      	sub	sp, #12
    5f52:	af00      	add	r7, sp, #0
    5f54:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5f5a:	4618      	mov	r0, r3
    5f5c:	370c      	adds	r7, #12
    5f5e:	46bd      	mov	sp, r7
    5f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f64:	4770      	bx	lr

00005f66 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5f66:	b480      	push	{r7}
    5f68:	b083      	sub	sp, #12
    5f6a:	af00      	add	r7, sp, #0
    5f6c:	6078      	str	r0, [r7, #4]
    5f6e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	683a      	ldr	r2, [r7, #0]
    5f74:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5f76:	bf00      	nop
    5f78:	370c      	adds	r7, #12
    5f7a:	46bd      	mov	sp, r7
    5f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f80:	4770      	bx	lr

00005f82 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5f82:	b480      	push	{r7}
    5f84:	b085      	sub	sp, #20
    5f86:	af00      	add	r7, sp, #0
    5f88:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5f8a:	687b      	ldr	r3, [r7, #4]
    5f8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5f90:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5f92:	7bfb      	ldrb	r3, [r7, #15]
    5f94:	085b      	lsrs	r3, r3, #1
    5f96:	b2db      	uxtb	r3, r3
    5f98:	f003 0301 	and.w	r3, r3, #1
    5f9c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5f9e:	7bfb      	ldrb	r3, [r7, #15]
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	bf14      	ite	ne
    5fa4:	2301      	movne	r3, #1
    5fa6:	2300      	moveq	r3, #0
    5fa8:	b2db      	uxtb	r3, r3
}
    5faa:	4618      	mov	r0, r3
    5fac:	3714      	adds	r7, #20
    5fae:	46bd      	mov	sp, r7
    5fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fb4:	4770      	bx	lr

00005fb6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5fb6:	b480      	push	{r7}
    5fb8:	b085      	sub	sp, #20
    5fba:	af00      	add	r7, sp, #0
    5fbc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5fc4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5fc6:	7bfb      	ldrb	r3, [r7, #15]
    5fc8:	089b      	lsrs	r3, r3, #2
    5fca:	b2db      	uxtb	r3, r3
    5fcc:	f003 0301 	and.w	r3, r3, #1
    5fd0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5fd2:	7bfb      	ldrb	r3, [r7, #15]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	bf14      	ite	ne
    5fd8:	2301      	movne	r3, #1
    5fda:	2300      	moveq	r3, #0
    5fdc:	b2db      	uxtb	r3, r3
}
    5fde:	4618      	mov	r0, r3
    5fe0:	3714      	adds	r7, #20
    5fe2:	46bd      	mov	sp, r7
    5fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fe8:	4770      	bx	lr

00005fea <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5fea:	b480      	push	{r7}
    5fec:	b085      	sub	sp, #20
    5fee:	af00      	add	r7, sp, #0
    5ff0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5ff8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5ffa:	7bfb      	ldrb	r3, [r7, #15]
    5ffc:	08db      	lsrs	r3, r3, #3
    5ffe:	b2db      	uxtb	r3, r3
    6000:	f003 0301 	and.w	r3, r3, #1
    6004:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6006:	7bfb      	ldrb	r3, [r7, #15]
    6008:	2b00      	cmp	r3, #0
    600a:	bf14      	ite	ne
    600c:	2301      	movne	r3, #1
    600e:	2300      	moveq	r3, #0
    6010:	b2db      	uxtb	r3, r3
}
    6012:	4618      	mov	r0, r3
    6014:	3714      	adds	r7, #20
    6016:	46bd      	mov	sp, r7
    6018:	f85d 7b04 	ldr.w	r7, [sp], #4
    601c:	4770      	bx	lr

0000601e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    601e:	b480      	push	{r7}
    6020:	b085      	sub	sp, #20
    6022:	af00      	add	r7, sp, #0
    6024:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    602c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    602e:	7bfb      	ldrb	r3, [r7, #15]
    6030:	091b      	lsrs	r3, r3, #4
    6032:	b2db      	uxtb	r3, r3
    6034:	f003 0301 	and.w	r3, r3, #1
    6038:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    603a:	7bfb      	ldrb	r3, [r7, #15]
    603c:	2b00      	cmp	r3, #0
    603e:	bf14      	ite	ne
    6040:	2301      	movne	r3, #1
    6042:	2300      	moveq	r3, #0
    6044:	b2db      	uxtb	r3, r3
}
    6046:	4618      	mov	r0, r3
    6048:	3714      	adds	r7, #20
    604a:	46bd      	mov	sp, r7
    604c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6050:	4770      	bx	lr
	...

00006054 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    605a:	4b0a      	ldr	r3, [pc, #40]	; (6084 <_oscctrl_init_sources+0x30>)
    605c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    605e:	4a0a      	ldr	r2, [pc, #40]	; (6088 <_oscctrl_init_sources+0x34>)
    6060:	2101      	movs	r1, #1
    6062:	6878      	ldr	r0, [r7, #4]
    6064:	4b09      	ldr	r3, [pc, #36]	; (608c <_oscctrl_init_sources+0x38>)
    6066:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6068:	bf00      	nop
    606a:	6878      	ldr	r0, [r7, #4]
    606c:	4b08      	ldr	r3, [pc, #32]	; (6090 <_oscctrl_init_sources+0x3c>)
    606e:	4798      	blx	r3
    6070:	4603      	mov	r3, r0
    6072:	f083 0301 	eor.w	r3, r3, #1
    6076:	b2db      	uxtb	r3, r3
    6078:	2b00      	cmp	r3, #0
    607a:	d1f6      	bne.n	606a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    607c:	bf00      	nop
    607e:	3708      	adds	r7, #8
    6080:	46bd      	mov	sp, r7
    6082:	bd80      	pop	{r7, pc}
    6084:	40001000 	.word	0x40001000
    6088:	03002646 	.word	0x03002646
    608c:	00005e9d 	.word	0x00005e9d
    6090:	00005e27 	.word	0x00005e27

00006094 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6094:	b580      	push	{r7, lr}
    6096:	b084      	sub	sp, #16
    6098:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    609a:	4b6b      	ldr	r3, [pc, #428]	; (6248 <_oscctrl_init_referenced_generators+0x1b4>)
    609c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    609e:	2204      	movs	r2, #4
    60a0:	2100      	movs	r1, #0
    60a2:	486a      	ldr	r0, [pc, #424]	; (624c <_oscctrl_init_referenced_generators+0x1b8>)
    60a4:	4b6a      	ldr	r3, [pc, #424]	; (6250 <_oscctrl_init_referenced_generators+0x1bc>)
    60a6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    60a8:	bf00      	nop
    60aa:	4868      	ldr	r0, [pc, #416]	; (624c <_oscctrl_init_referenced_generators+0x1b8>)
    60ac:	4b69      	ldr	r3, [pc, #420]	; (6254 <_oscctrl_init_referenced_generators+0x1c0>)
    60ae:	4798      	blx	r3
    60b0:	4603      	mov	r3, r0
    60b2:	2b00      	cmp	r3, #0
    60b4:	d1f9      	bne.n	60aa <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    60b6:	2100      	movs	r1, #0
    60b8:	68f8      	ldr	r0, [r7, #12]
    60ba:	4b67      	ldr	r3, [pc, #412]	; (6258 <_oscctrl_init_referenced_generators+0x1c4>)
    60bc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    60be:	4967      	ldr	r1, [pc, #412]	; (625c <_oscctrl_init_referenced_generators+0x1c8>)
    60c0:	68f8      	ldr	r0, [r7, #12]
    60c2:	4b67      	ldr	r3, [pc, #412]	; (6260 <_oscctrl_init_referenced_generators+0x1cc>)
    60c4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    60c6:	bf00      	nop
    60c8:	68f8      	ldr	r0, [r7, #12]
    60ca:	4b66      	ldr	r3, [pc, #408]	; (6264 <_oscctrl_init_referenced_generators+0x1d0>)
    60cc:	4798      	blx	r3
    60ce:	4603      	mov	r3, r0
    60d0:	2b00      	cmp	r3, #0
    60d2:	d1f9      	bne.n	60c8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    60d4:	2100      	movs	r1, #0
    60d6:	68f8      	ldr	r0, [r7, #12]
    60d8:	4b63      	ldr	r3, [pc, #396]	; (6268 <_oscctrl_init_referenced_generators+0x1d4>)
    60da:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    60dc:	bf00      	nop
    60de:	68f8      	ldr	r0, [r7, #12]
    60e0:	4b62      	ldr	r3, [pc, #392]	; (626c <_oscctrl_init_referenced_generators+0x1d8>)
    60e2:	4798      	blx	r3
    60e4:	4603      	mov	r3, r0
    60e6:	2b00      	cmp	r3, #0
    60e8:	d1f9      	bne.n	60de <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    60ea:	2302      	movs	r3, #2
    60ec:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    60ee:	7afb      	ldrb	r3, [r7, #11]
    60f0:	4619      	mov	r1, r3
    60f2:	68f8      	ldr	r0, [r7, #12]
    60f4:	4b58      	ldr	r3, [pc, #352]	; (6258 <_oscctrl_init_referenced_generators+0x1c4>)
    60f6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    60f8:	bf00      	nop
    60fa:	68f8      	ldr	r0, [r7, #12]
    60fc:	4b5c      	ldr	r3, [pc, #368]	; (6270 <_oscctrl_init_referenced_generators+0x1dc>)
    60fe:	4798      	blx	r3
    6100:	4603      	mov	r3, r0
    6102:	2b00      	cmp	r3, #0
    6104:	d1f9      	bne.n	60fa <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    6106:	68f8      	ldr	r0, [r7, #12]
    6108:	4b5a      	ldr	r3, [pc, #360]	; (6274 <_oscctrl_init_referenced_generators+0x1e0>)
    610a:	4798      	blx	r3
    610c:	4603      	mov	r3, r0
    610e:	4619      	mov	r1, r3
    6110:	68f8      	ldr	r0, [r7, #12]
    6112:	4b59      	ldr	r3, [pc, #356]	; (6278 <_oscctrl_init_referenced_generators+0x1e4>)
    6114:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6116:	bf00      	nop
    6118:	68f8      	ldr	r0, [r7, #12]
    611a:	4b58      	ldr	r3, [pc, #352]	; (627c <_oscctrl_init_referenced_generators+0x1e8>)
    611c:	4798      	blx	r3
    611e:	4603      	mov	r3, r0
    6120:	2b00      	cmp	r3, #0
    6122:	d1f9      	bne.n	6118 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    6124:	2319      	movs	r3, #25
    6126:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    6128:	7afb      	ldrb	r3, [r7, #11]
    612a:	4619      	mov	r1, r3
    612c:	68f8      	ldr	r0, [r7, #12]
    612e:	4b4e      	ldr	r3, [pc, #312]	; (6268 <_oscctrl_init_referenced_generators+0x1d4>)
    6130:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6132:	bf00      	nop
    6134:	68f8      	ldr	r0, [r7, #12]
    6136:	4b4d      	ldr	r3, [pc, #308]	; (626c <_oscctrl_init_referenced_generators+0x1d8>)
    6138:	4798      	blx	r3
    613a:	4603      	mov	r3, r0
    613c:	2b00      	cmp	r3, #0
    613e:	d1f9      	bne.n	6134 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    6140:	2245      	movs	r2, #69	; 0x45
    6142:	2101      	movs	r1, #1
    6144:	4841      	ldr	r0, [pc, #260]	; (624c <_oscctrl_init_referenced_generators+0x1b8>)
    6146:	4b4e      	ldr	r3, [pc, #312]	; (6280 <_oscctrl_init_referenced_generators+0x1ec>)
    6148:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    614a:	223b      	movs	r2, #59	; 0x3b
    614c:	2100      	movs	r1, #0
    614e:	68f8      	ldr	r0, [r7, #12]
    6150:	4b4c      	ldr	r3, [pc, #304]	; (6284 <_oscctrl_init_referenced_generators+0x1f0>)
    6152:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6154:	f44f 6201 	mov.w	r2, #2064	; 0x810
    6158:	2100      	movs	r1, #0
    615a:	68f8      	ldr	r0, [r7, #12]
    615c:	4b4a      	ldr	r3, [pc, #296]	; (6288 <_oscctrl_init_referenced_generators+0x1f4>)
    615e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6160:	2242      	movs	r2, #66	; 0x42
    6162:	2100      	movs	r1, #0
    6164:	68f8      	ldr	r0, [r7, #12]
    6166:	4b49      	ldr	r3, [pc, #292]	; (628c <_oscctrl_init_referenced_generators+0x1f8>)
    6168:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    616a:	4a49      	ldr	r2, [pc, #292]	; (6290 <_oscctrl_init_referenced_generators+0x1fc>)
    616c:	2101      	movs	r1, #1
    616e:	68f8      	ldr	r0, [r7, #12]
    6170:	4b44      	ldr	r3, [pc, #272]	; (6284 <_oscctrl_init_referenced_generators+0x1f0>)
    6172:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6174:	f44f 6203 	mov.w	r2, #2096	; 0x830
    6178:	2101      	movs	r1, #1
    617a:	68f8      	ldr	r0, [r7, #12]
    617c:	4b42      	ldr	r3, [pc, #264]	; (6288 <_oscctrl_init_referenced_generators+0x1f4>)
    617e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6180:	2202      	movs	r2, #2
    6182:	2101      	movs	r1, #1
    6184:	68f8      	ldr	r0, [r7, #12]
    6186:	4b41      	ldr	r3, [pc, #260]	; (628c <_oscctrl_init_referenced_generators+0x1f8>)
    6188:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    618a:	68f8      	ldr	r0, [r7, #12]
    618c:	4b41      	ldr	r3, [pc, #260]	; (6294 <_oscctrl_init_referenced_generators+0x200>)
    618e:	4798      	blx	r3
    6190:	4603      	mov	r3, r0
    6192:	2b00      	cmp	r3, #0
    6194:	d00c      	beq.n	61b0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    6196:	f44f 6310 	mov.w	r3, #2304	; 0x900
    619a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    619c:	bf00      	nop
    619e:	6879      	ldr	r1, [r7, #4]
    61a0:	68f8      	ldr	r0, [r7, #12]
    61a2:	4b3d      	ldr	r3, [pc, #244]	; (6298 <_oscctrl_init_referenced_generators+0x204>)
    61a4:	4798      	blx	r3
    61a6:	4602      	mov	r2, r0
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	429a      	cmp	r2, r3
    61ac:	d1f7      	bne.n	619e <_oscctrl_init_referenced_generators+0x10a>
    61ae:	e009      	b.n	61c4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    61b0:	bf00      	nop
    61b2:	68f8      	ldr	r0, [r7, #12]
    61b4:	4b39      	ldr	r3, [pc, #228]	; (629c <_oscctrl_init_referenced_generators+0x208>)
    61b6:	4798      	blx	r3
    61b8:	4603      	mov	r3, r0
    61ba:	f083 0301 	eor.w	r3, r3, #1
    61be:	b2db      	uxtb	r3, r3
    61c0:	2b00      	cmp	r3, #0
    61c2:	d1f6      	bne.n	61b2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    61c4:	bf00      	nop
    61c6:	2100      	movs	r1, #0
    61c8:	68f8      	ldr	r0, [r7, #12]
    61ca:	4b35      	ldr	r3, [pc, #212]	; (62a0 <_oscctrl_init_referenced_generators+0x20c>)
    61cc:	4798      	blx	r3
    61ce:	4603      	mov	r3, r0
    61d0:	f083 0301 	eor.w	r3, r3, #1
    61d4:	b2db      	uxtb	r3, r3
    61d6:	2b00      	cmp	r3, #0
    61d8:	d009      	beq.n	61ee <_oscctrl_init_referenced_generators+0x15a>
    61da:	2100      	movs	r1, #0
    61dc:	68f8      	ldr	r0, [r7, #12]
    61de:	4b31      	ldr	r3, [pc, #196]	; (62a4 <_oscctrl_init_referenced_generators+0x210>)
    61e0:	4798      	blx	r3
    61e2:	4603      	mov	r3, r0
    61e4:	f083 0301 	eor.w	r3, r3, #1
    61e8:	b2db      	uxtb	r3, r3
    61ea:	2b00      	cmp	r3, #0
    61ec:	d1eb      	bne.n	61c6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    61ee:	bf00      	nop
    61f0:	2101      	movs	r1, #1
    61f2:	68f8      	ldr	r0, [r7, #12]
    61f4:	4b2a      	ldr	r3, [pc, #168]	; (62a0 <_oscctrl_init_referenced_generators+0x20c>)
    61f6:	4798      	blx	r3
    61f8:	4603      	mov	r3, r0
    61fa:	f083 0301 	eor.w	r3, r3, #1
    61fe:	b2db      	uxtb	r3, r3
    6200:	2b00      	cmp	r3, #0
    6202:	d009      	beq.n	6218 <_oscctrl_init_referenced_generators+0x184>
    6204:	2101      	movs	r1, #1
    6206:	68f8      	ldr	r0, [r7, #12]
    6208:	4b26      	ldr	r3, [pc, #152]	; (62a4 <_oscctrl_init_referenced_generators+0x210>)
    620a:	4798      	blx	r3
    620c:	4603      	mov	r3, r0
    620e:	f083 0301 	eor.w	r3, r3, #1
    6212:	b2db      	uxtb	r3, r3
    6214:	2b00      	cmp	r3, #0
    6216:	d1eb      	bne.n	61f0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6218:	bf00      	nop
    621a:	480c      	ldr	r0, [pc, #48]	; (624c <_oscctrl_init_referenced_generators+0x1b8>)
    621c:	4b22      	ldr	r3, [pc, #136]	; (62a8 <_oscctrl_init_referenced_generators+0x214>)
    621e:	4798      	blx	r3
    6220:	4603      	mov	r3, r0
    6222:	2b00      	cmp	r3, #0
    6224:	d1f9      	bne.n	621a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    6226:	2207      	movs	r2, #7
    6228:	2100      	movs	r1, #0
    622a:	4808      	ldr	r0, [pc, #32]	; (624c <_oscctrl_init_referenced_generators+0x1b8>)
    622c:	4b08      	ldr	r3, [pc, #32]	; (6250 <_oscctrl_init_referenced_generators+0x1bc>)
    622e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6230:	bf00      	nop
    6232:	4806      	ldr	r0, [pc, #24]	; (624c <_oscctrl_init_referenced_generators+0x1b8>)
    6234:	4b07      	ldr	r3, [pc, #28]	; (6254 <_oscctrl_init_referenced_generators+0x1c0>)
    6236:	4798      	blx	r3
    6238:	4603      	mov	r3, r0
    623a:	2b00      	cmp	r3, #0
    623c:	d1f9      	bne.n	6232 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    623e:	bf00      	nop
    6240:	3710      	adds	r7, #16
    6242:	46bd      	mov	sp, r7
    6244:	bd80      	pop	{r7, pc}
    6246:	bf00      	nop
    6248:	40001000 	.word	0x40001000
    624c:	40001c00 	.word	0x40001c00
    6250:	00005c61 	.word	0x00005c61
    6254:	00005c21 	.word	0x00005c21
    6258:	00005ec5 	.word	0x00005ec5
    625c:	0401bb80 	.word	0x0401bb80
    6260:	00005f67 	.word	0x00005f67
    6264:	0000601f 	.word	0x0000601f
    6268:	00005f13 	.word	0x00005f13
    626c:	00005fb7 	.word	0x00005fb7
    6270:	00005f83 	.word	0x00005f83
    6274:	00005f4f 	.word	0x00005f4f
    6278:	00005f33 	.word	0x00005f33
    627c:	00005feb 	.word	0x00005feb
    6280:	00005cb1 	.word	0x00005cb1
    6284:	00005dbd 	.word	0x00005dbd
    6288:	00005df9 	.word	0x00005df9
    628c:	00005d81 	.word	0x00005d81
    6290:	000407a0 	.word	0x000407a0
    6294:	00005ee3 	.word	0x00005ee3
    6298:	00005e77 	.word	0x00005e77
    629c:	00005e4f 	.word	0x00005e4f
    62a0:	00005d0d 	.word	0x00005d0d
    62a4:	00005d45 	.word	0x00005d45
    62a8:	00005c49 	.word	0x00005c49

000062ac <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    62ac:	b480      	push	{r7}
    62ae:	b083      	sub	sp, #12
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	69db      	ldr	r3, [r3, #28]
    62b8:	0a9b      	lsrs	r3, r3, #10
    62ba:	f003 0301 	and.w	r3, r3, #1
    62be:	2b00      	cmp	r3, #0
    62c0:	bf14      	ite	ne
    62c2:	2301      	movne	r3, #1
    62c4:	2300      	moveq	r3, #0
    62c6:	b2db      	uxtb	r3, r3
}
    62c8:	4618      	mov	r0, r3
    62ca:	370c      	adds	r7, #12
    62cc:	46bd      	mov	sp, r7
    62ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    62d2:	4770      	bx	lr

000062d4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    62d4:	b480      	push	{r7}
    62d6:	b083      	sub	sp, #12
    62d8:	af00      	add	r7, sp, #0
    62da:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    62e2:	61da      	str	r2, [r3, #28]
}
    62e4:	bf00      	nop
    62e6:	370c      	adds	r7, #12
    62e8:	46bd      	mov	sp, r7
    62ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ee:	4770      	bx	lr

000062f0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    62f0:	b480      	push	{r7}
    62f2:	b083      	sub	sp, #12
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
    62f8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	683a      	ldr	r2, [r7, #0]
    62fe:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6300:	bf00      	nop
    6302:	370c      	adds	r7, #12
    6304:	46bd      	mov	sp, r7
    6306:	f85d 7b04 	ldr.w	r7, [sp], #4
    630a:	4770      	bx	lr

0000630c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    630c:	b480      	push	{r7}
    630e:	b083      	sub	sp, #12
    6310:	af00      	add	r7, sp, #0
    6312:	6078      	str	r0, [r7, #4]
    6314:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	683a      	ldr	r2, [r7, #0]
    631a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    631c:	bf00      	nop
    631e:	370c      	adds	r7, #12
    6320:	46bd      	mov	sp, r7
    6322:	f85d 7b04 	ldr.w	r7, [sp], #4
    6326:	4770      	bx	lr

00006328 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    6328:	b480      	push	{r7}
    632a:	b083      	sub	sp, #12
    632c:	af00      	add	r7, sp, #0
    632e:	6078      	str	r0, [r7, #4]
    6330:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	683a      	ldr	r2, [r7, #0]
    6336:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6338:	bf00      	nop
    633a:	370c      	adds	r7, #12
    633c:	46bd      	mov	sp, r7
    633e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6342:	4770      	bx	lr

00006344 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    6344:	b480      	push	{r7}
    6346:	b083      	sub	sp, #12
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
    634c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	683a      	ldr	r2, [r7, #0]
    6352:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6354:	bf00      	nop
    6356:	370c      	adds	r7, #12
    6358:	46bd      	mov	sp, r7
    635a:	f85d 7b04 	ldr.w	r7, [sp], #4
    635e:	4770      	bx	lr

00006360 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6360:	b480      	push	{r7}
    6362:	b085      	sub	sp, #20
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
    6368:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    636e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    6370:	68fb      	ldr	r3, [r7, #12]
    6372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6376:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    6378:	683b      	ldr	r3, [r7, #0]
    637a:	b2db      	uxtb	r3, r3
    637c:	68fa      	ldr	r2, [r7, #12]
    637e:	4313      	orrs	r3, r2
    6380:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	68fa      	ldr	r2, [r7, #12]
    6386:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6388:	bf00      	nop
    638a:	3714      	adds	r7, #20
    638c:	46bd      	mov	sp, r7
    638e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6392:	4770      	bx	lr

00006394 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6394:	b480      	push	{r7}
    6396:	b085      	sub	sp, #20
    6398:	af00      	add	r7, sp, #0
    639a:	6078      	str	r0, [r7, #4]
    639c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    63a2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    63a4:	68fb      	ldr	r3, [r7, #12]
    63a6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    63aa:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    63ac:	683b      	ldr	r3, [r7, #0]
    63ae:	041b      	lsls	r3, r3, #16
    63b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    63b4:	68fa      	ldr	r2, [r7, #12]
    63b6:	4313      	orrs	r3, r2
    63b8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    63ba:	687b      	ldr	r3, [r7, #4]
    63bc:	68fa      	ldr	r2, [r7, #12]
    63be:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    63c0:	bf00      	nop
    63c2:	3714      	adds	r7, #20
    63c4:	46bd      	mov	sp, r7
    63c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ca:	4770      	bx	lr

000063cc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    63cc:	b480      	push	{r7}
    63ce:	b083      	sub	sp, #12
    63d0:	af00      	add	r7, sp, #0
    63d2:	6078      	str	r0, [r7, #4]
    63d4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	683a      	ldr	r2, [r7, #0]
    63da:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    63dc:	bf00      	nop
    63de:	370c      	adds	r7, #12
    63e0:	46bd      	mov	sp, r7
    63e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    63e6:	4770      	bx	lr

000063e8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    63e8:	b480      	push	{r7}
    63ea:	b083      	sub	sp, #12
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    63f4:	4618      	mov	r0, r3
    63f6:	370c      	adds	r7, #12
    63f8:	46bd      	mov	sp, r7
    63fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    63fe:	4770      	bx	lr

00006400 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    6400:	b480      	push	{r7}
    6402:	b085      	sub	sp, #20
    6404:	af00      	add	r7, sp, #0
    6406:	60f8      	str	r0, [r7, #12]
    6408:	60b9      	str	r1, [r7, #8]
    640a:	607a      	str	r2, [r7, #4]
	while (count--) {
    640c:	e007      	b.n	641e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    640e:	68fb      	ldr	r3, [r7, #12]
    6410:	1c5a      	adds	r2, r3, #1
    6412:	60fa      	str	r2, [r7, #12]
    6414:	68ba      	ldr	r2, [r7, #8]
    6416:	1c51      	adds	r1, r2, #1
    6418:	60b9      	str	r1, [r7, #8]
    641a:	7812      	ldrb	r2, [r2, #0]
    641c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	1e5a      	subs	r2, r3, #1
    6422:	607a      	str	r2, [r7, #4]
    6424:	2b00      	cmp	r3, #0
    6426:	d1f2      	bne.n	640e <_qspi_memcpy+0xe>
	}
}
    6428:	bf00      	nop
    642a:	3714      	adds	r7, #20
    642c:	46bd      	mov	sp, r7
    642e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6432:	4770      	bx	lr

00006434 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    6434:	b580      	push	{r7, lr}
    6436:	b082      	sub	sp, #8
    6438:	af00      	add	r7, sp, #0
    643a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    643c:	4903      	ldr	r1, [pc, #12]	; (644c <_qspi_end_transfer+0x18>)
    643e:	6878      	ldr	r0, [r7, #4]
    6440:	4b03      	ldr	r3, [pc, #12]	; (6450 <_qspi_end_transfer+0x1c>)
    6442:	4798      	blx	r3
}
    6444:	bf00      	nop
    6446:	3708      	adds	r7, #8
    6448:	46bd      	mov	sp, r7
    644a:	bd80      	pop	{r7, pc}
    644c:	01000002 	.word	0x01000002
    6450:	000062f1 	.word	0x000062f1

00006454 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    6454:	b580      	push	{r7, lr}
    6456:	b082      	sub	sp, #8
    6458:	af00      	add	r7, sp, #0
    645a:	6078      	str	r0, [r7, #4]
    645c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	2b00      	cmp	r3, #0
    6462:	d004      	beq.n	646e <_qspi_sync_init+0x1a>
    6464:	683b      	ldr	r3, [r7, #0]
    6466:	2b00      	cmp	r3, #0
    6468:	d001      	beq.n	646e <_qspi_sync_init+0x1a>
    646a:	2301      	movs	r3, #1
    646c:	e000      	b.n	6470 <_qspi_sync_init+0x1c>
    646e:	2300      	movs	r3, #0
    6470:	f003 0301 	and.w	r3, r3, #1
    6474:	b2db      	uxtb	r3, r3
    6476:	2240      	movs	r2, #64	; 0x40
    6478:	490c      	ldr	r1, [pc, #48]	; (64ac <_qspi_sync_init+0x58>)
    647a:	4618      	mov	r0, r3
    647c:	4b0c      	ldr	r3, [pc, #48]	; (64b0 <_qspi_sync_init+0x5c>)
    647e:	4798      	blx	r3
	dev->prvt = hw;
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	683a      	ldr	r2, [r7, #0]
    6484:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	681b      	ldr	r3, [r3, #0]
    648a:	2101      	movs	r1, #1
    648c:	4618      	mov	r0, r3
    648e:	4b09      	ldr	r3, [pc, #36]	; (64b4 <_qspi_sync_init+0x60>)
    6490:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    6492:	4909      	ldr	r1, [pc, #36]	; (64b8 <_qspi_sync_init+0x64>)
    6494:	6838      	ldr	r0, [r7, #0]
    6496:	4b09      	ldr	r3, [pc, #36]	; (64bc <_qspi_sync_init+0x68>)
    6498:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    649a:	4909      	ldr	r1, [pc, #36]	; (64c0 <_qspi_sync_init+0x6c>)
    649c:	6838      	ldr	r0, [r7, #0]
    649e:	4b09      	ldr	r3, [pc, #36]	; (64c4 <_qspi_sync_init+0x70>)
    64a0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    64a2:	2300      	movs	r3, #0
}
    64a4:	4618      	mov	r0, r3
    64a6:	3708      	adds	r7, #8
    64a8:	46bd      	mov	sp, r7
    64aa:	bd80      	pop	{r7, pc}
    64ac:	00011150 	.word	0x00011150
    64b0:	0000445d 	.word	0x0000445d
    64b4:	000062f1 	.word	0x000062f1
    64b8:	06000011 	.word	0x06000011
    64bc:	0000630d 	.word	0x0000630d
    64c0:	00241300 	.word	0x00241300
    64c4:	00006329 	.word	0x00006329

000064c8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    64c8:	b580      	push	{r7, lr}
    64ca:	b082      	sub	sp, #8
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	681b      	ldr	r3, [r3, #0]
    64d4:	2102      	movs	r1, #2
    64d6:	4618      	mov	r0, r3
    64d8:	4b03      	ldr	r3, [pc, #12]	; (64e8 <_qspi_sync_enable+0x20>)
    64da:	4798      	blx	r3
	return ERR_NONE;
    64dc:	2300      	movs	r3, #0
}
    64de:	4618      	mov	r0, r3
    64e0:	3708      	adds	r7, #8
    64e2:	46bd      	mov	sp, r7
    64e4:	bd80      	pop	{r7, pc}
    64e6:	bf00      	nop
    64e8:	000062f1 	.word	0x000062f1

000064ec <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    64ec:	b580      	push	{r7, lr}
    64ee:	b082      	sub	sp, #8
    64f0:	af00      	add	r7, sp, #0
    64f2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	681b      	ldr	r3, [r3, #0]
    64f8:	2100      	movs	r1, #0
    64fa:	4618      	mov	r0, r3
    64fc:	4b03      	ldr	r3, [pc, #12]	; (650c <_qspi_sync_disable+0x20>)
    64fe:	4798      	blx	r3
	return ERR_NONE;
    6500:	2300      	movs	r3, #0
}
    6502:	4618      	mov	r0, r3
    6504:	3708      	adds	r7, #8
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	bf00      	nop
    650c:	000062f1 	.word	0x000062f1

00006510 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
    6518:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	681b      	ldr	r3, [r3, #0]
    651e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    6520:	683b      	ldr	r3, [r7, #0]
    6522:	781b      	ldrb	r3, [r3, #0]
    6524:	f003 0320 	and.w	r3, r3, #32
    6528:	b2db      	uxtb	r3, r3
    652a:	2b00      	cmp	r3, #0
    652c:	d005      	beq.n	653a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    652e:	683b      	ldr	r3, [r7, #0]
    6530:	689b      	ldr	r3, [r3, #8]
    6532:	4619      	mov	r1, r3
    6534:	68f8      	ldr	r0, [r7, #12]
    6536:	4b13      	ldr	r3, [pc, #76]	; (6584 <_qspi_sync_command_set_ifr+0x74>)
    6538:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    653a:	683b      	ldr	r3, [r7, #0]
    653c:	781b      	ldrb	r3, [r3, #0]
    653e:	f003 0310 	and.w	r3, r3, #16
    6542:	b2db      	uxtb	r3, r3
    6544:	2b00      	cmp	r3, #0
    6546:	d005      	beq.n	6554 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    6548:	683b      	ldr	r3, [r7, #0]
    654a:	791b      	ldrb	r3, [r3, #4]
    654c:	4619      	mov	r1, r3
    654e:	68f8      	ldr	r0, [r7, #12]
    6550:	4b0d      	ldr	r3, [pc, #52]	; (6588 <_qspi_sync_command_set_ifr+0x78>)
    6552:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    6554:	683b      	ldr	r3, [r7, #0]
    6556:	781b      	ldrb	r3, [r3, #0]
    6558:	f003 0340 	and.w	r3, r3, #64	; 0x40
    655c:	b2db      	uxtb	r3, r3
    655e:	2b00      	cmp	r3, #0
    6560:	d005      	beq.n	656e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    6562:	683b      	ldr	r3, [r7, #0]
    6564:	795b      	ldrb	r3, [r3, #5]
    6566:	4619      	mov	r1, r3
    6568:	68f8      	ldr	r0, [r7, #12]
    656a:	4b08      	ldr	r3, [pc, #32]	; (658c <_qspi_sync_command_set_ifr+0x7c>)
    656c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    656e:	683b      	ldr	r3, [r7, #0]
    6570:	681b      	ldr	r3, [r3, #0]
    6572:	4619      	mov	r1, r3
    6574:	68f8      	ldr	r0, [r7, #12]
    6576:	4b06      	ldr	r3, [pc, #24]	; (6590 <_qspi_sync_command_set_ifr+0x80>)
    6578:	4798      	blx	r3
}
    657a:	bf00      	nop
    657c:	3710      	adds	r7, #16
    657e:	46bd      	mov	sp, r7
    6580:	bd80      	pop	{r7, pc}
    6582:	bf00      	nop
    6584:	00006345 	.word	0x00006345
    6588:	00006361 	.word	0x00006361
    658c:	00006395 	.word	0x00006395
    6590:	000063cd 	.word	0x000063cd

00006594 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6594:	b580      	push	{r7, lr}
    6596:	b084      	sub	sp, #16
    6598:	af00      	add	r7, sp, #0
    659a:	6078      	str	r0, [r7, #4]
    659c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	681b      	ldr	r3, [r3, #0]
    65a2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    65a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    65a8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    65aa:	683b      	ldr	r3, [r7, #0]
    65ac:	781b      	ldrb	r3, [r3, #0]
    65ae:	f003 0320 	and.w	r3, r3, #32
    65b2:	b2db      	uxtb	r3, r3
    65b4:	2b00      	cmp	r3, #0
    65b6:	d004      	beq.n	65c2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    65b8:	683b      	ldr	r3, [r7, #0]
    65ba:	689b      	ldr	r3, [r3, #8]
    65bc:	68fa      	ldr	r2, [r7, #12]
    65be:	4413      	add	r3, r2
    65c0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    65c2:	68b8      	ldr	r0, [r7, #8]
    65c4:	4b18      	ldr	r3, [pc, #96]	; (6628 <_qspi_sync_run_transfer+0x94>)
    65c6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    65c8:	683b      	ldr	r3, [r7, #0]
    65ca:	691b      	ldr	r3, [r3, #16]
    65cc:	2b00      	cmp	r3, #0
    65ce:	d103      	bne.n	65d8 <_qspi_sync_run_transfer+0x44>
    65d0:	683b      	ldr	r3, [r7, #0]
    65d2:	695b      	ldr	r3, [r3, #20]
    65d4:	2b00      	cmp	r3, #0
    65d6:	d001      	beq.n	65dc <_qspi_sync_run_transfer+0x48>
    65d8:	2301      	movs	r3, #1
    65da:	e000      	b.n	65de <_qspi_sync_run_transfer+0x4a>
    65dc:	2300      	movs	r3, #0
    65de:	f003 0301 	and.w	r3, r3, #1
    65e2:	b2db      	uxtb	r3, r3
    65e4:	2282      	movs	r2, #130	; 0x82
    65e6:	4911      	ldr	r1, [pc, #68]	; (662c <_qspi_sync_run_transfer+0x98>)
    65e8:	4618      	mov	r0, r3
    65ea:	4b11      	ldr	r3, [pc, #68]	; (6630 <_qspi_sync_run_transfer+0x9c>)
    65ec:	4798      	blx	r3

	if (cmd->tx_buf) {
    65ee:	683b      	ldr	r3, [r7, #0]
    65f0:	691b      	ldr	r3, [r3, #16]
    65f2:	2b00      	cmp	r3, #0
    65f4:	d008      	beq.n	6608 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    65f6:	683b      	ldr	r3, [r7, #0]
    65f8:	6919      	ldr	r1, [r3, #16]
    65fa:	683b      	ldr	r3, [r7, #0]
    65fc:	68db      	ldr	r3, [r3, #12]
    65fe:	461a      	mov	r2, r3
    6600:	68f8      	ldr	r0, [r7, #12]
    6602:	4b0c      	ldr	r3, [pc, #48]	; (6634 <_qspi_sync_run_transfer+0xa0>)
    6604:	4798      	blx	r3
    6606:	e007      	b.n	6618 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6608:	683b      	ldr	r3, [r7, #0]
    660a:	6958      	ldr	r0, [r3, #20]
    660c:	683b      	ldr	r3, [r7, #0]
    660e:	68db      	ldr	r3, [r3, #12]
    6610:	461a      	mov	r2, r3
    6612:	68f9      	ldr	r1, [r7, #12]
    6614:	4b07      	ldr	r3, [pc, #28]	; (6634 <_qspi_sync_run_transfer+0xa0>)
    6616:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    661c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    6620:	bf00      	nop
    6622:	3710      	adds	r7, #16
    6624:	46bd      	mov	sp, r7
    6626:	bd80      	pop	{r7, pc}
    6628:	000063e9 	.word	0x000063e9
    662c:	00011150 	.word	0x00011150
    6630:	0000445d 	.word	0x0000445d
    6634:	00006401 	.word	0x00006401

00006638 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6638:	b580      	push	{r7, lr}
    663a:	b082      	sub	sp, #8
    663c:	af00      	add	r7, sp, #0
    663e:	6078      	str	r0, [r7, #4]
    6640:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    6642:	6839      	ldr	r1, [r7, #0]
    6644:	6878      	ldr	r0, [r7, #4]
    6646:	4b14      	ldr	r3, [pc, #80]	; (6698 <_qspi_sync_serial_run_command+0x60>)
    6648:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    664a:	683b      	ldr	r3, [r7, #0]
    664c:	781b      	ldrb	r3, [r3, #0]
    664e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6652:	b2db      	uxtb	r3, r3
    6654:	2b00      	cmp	r3, #0
    6656:	d003      	beq.n	6660 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6658:	6839      	ldr	r1, [r7, #0]
    665a:	6878      	ldr	r0, [r7, #4]
    665c:	4b0f      	ldr	r3, [pc, #60]	; (669c <_qspi_sync_serial_run_command+0x64>)
    665e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	681b      	ldr	r3, [r3, #0]
    6664:	4618      	mov	r0, r3
    6666:	4b0e      	ldr	r3, [pc, #56]	; (66a0 <_qspi_sync_serial_run_command+0x68>)
    6668:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    666a:	bf00      	nop
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	681b      	ldr	r3, [r3, #0]
    6670:	4618      	mov	r0, r3
    6672:	4b0c      	ldr	r3, [pc, #48]	; (66a4 <_qspi_sync_serial_run_command+0x6c>)
    6674:	4798      	blx	r3
    6676:	4603      	mov	r3, r0
    6678:	f083 0301 	eor.w	r3, r3, #1
    667c:	b2db      	uxtb	r3, r3
    667e:	2b00      	cmp	r3, #0
    6680:	d1f4      	bne.n	666c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	4618      	mov	r0, r3
    6688:	4b07      	ldr	r3, [pc, #28]	; (66a8 <_qspi_sync_serial_run_command+0x70>)
    668a:	4798      	blx	r3
	return ERR_NONE;
    668c:	2300      	movs	r3, #0
}
    668e:	4618      	mov	r0, r3
    6690:	3708      	adds	r7, #8
    6692:	46bd      	mov	sp, r7
    6694:	bd80      	pop	{r7, pc}
    6696:	bf00      	nop
    6698:	00006511 	.word	0x00006511
    669c:	00006595 	.word	0x00006595
    66a0:	00006435 	.word	0x00006435
    66a4:	000062ad 	.word	0x000062ad
    66a8:	000062d5 	.word	0x000062d5

000066ac <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    66ac:	b480      	push	{r7}
    66ae:	b083      	sub	sp, #12
    66b0:	af00      	add	r7, sp, #0
    66b2:	6078      	str	r0, [r7, #4]
    66b4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    66b6:	bf00      	nop
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	691a      	ldr	r2, [r3, #16]
    66bc:	683b      	ldr	r3, [r7, #0]
    66be:	4013      	ands	r3, r2
    66c0:	2b00      	cmp	r3, #0
    66c2:	d1f9      	bne.n	66b8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    66c4:	bf00      	nop
    66c6:	370c      	adds	r7, #12
    66c8:	46bd      	mov	sp, r7
    66ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ce:	4770      	bx	lr

000066d0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    66d0:	b480      	push	{r7}
    66d2:	b083      	sub	sp, #12
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	f44f 7280 	mov.w	r2, #256	; 0x100
    66de:	819a      	strh	r2, [r3, #12]
}
    66e0:	bf00      	nop
    66e2:	370c      	adds	r7, #12
    66e4:	46bd      	mov	sp, r7
    66e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ea:	4770      	bx	lr

000066ec <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    66ec:	b480      	push	{r7}
    66ee:	b083      	sub	sp, #12
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    66fa:	819a      	strh	r2, [r3, #12]
}
    66fc:	bf00      	nop
    66fe:	370c      	adds	r7, #12
    6700:	46bd      	mov	sp, r7
    6702:	f85d 7b04 	ldr.w	r7, [sp], #4
    6706:	4770      	bx	lr

00006708 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6708:	b480      	push	{r7}
    670a:	b083      	sub	sp, #12
    670c:	af00      	add	r7, sp, #0
    670e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	899b      	ldrh	r3, [r3, #12]
    6714:	b29b      	uxth	r3, r3
}
    6716:	4618      	mov	r0, r3
    6718:	370c      	adds	r7, #12
    671a:	46bd      	mov	sp, r7
    671c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6720:	4770      	bx	lr

00006722 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    6722:	b480      	push	{r7}
    6724:	b083      	sub	sp, #12
    6726:	af00      	add	r7, sp, #0
    6728:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	895b      	ldrh	r3, [r3, #10]
    672e:	b29b      	uxth	r3, r3
}
    6730:	4618      	mov	r0, r3
    6732:	370c      	adds	r7, #12
    6734:	46bd      	mov	sp, r7
    6736:	f85d 7b04 	ldr.w	r7, [sp], #4
    673a:	4770      	bx	lr

0000673c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    673c:	b580      	push	{r7, lr}
    673e:	b082      	sub	sp, #8
    6740:	af00      	add	r7, sp, #0
    6742:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	881b      	ldrh	r3, [r3, #0]
    6748:	b29b      	uxth	r3, r3
    674a:	f043 0301 	orr.w	r3, r3, #1
    674e:	b29a      	uxth	r2, r3
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    6754:	2101      	movs	r1, #1
    6756:	6878      	ldr	r0, [r7, #4]
    6758:	4b02      	ldr	r3, [pc, #8]	; (6764 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    675a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    675c:	bf00      	nop
    675e:	3708      	adds	r7, #8
    6760:	46bd      	mov	sp, r7
    6762:	bd80      	pop	{r7, pc}
    6764:	000066ad 	.word	0x000066ad

00006768 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6768:	b580      	push	{r7, lr}
    676a:	b084      	sub	sp, #16
    676c:	af00      	add	r7, sp, #0
    676e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6770:	f248 0103 	movw	r1, #32771	; 0x8003
    6774:	6878      	ldr	r0, [r7, #4]
    6776:	4b0a      	ldr	r3, [pc, #40]	; (67a0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6778:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	881b      	ldrh	r3, [r3, #0]
    677e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6780:	89fb      	ldrh	r3, [r7, #14]
    6782:	085b      	lsrs	r3, r3, #1
    6784:	b29b      	uxth	r3, r3
    6786:	f003 0301 	and.w	r3, r3, #1
    678a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    678c:	89fb      	ldrh	r3, [r7, #14]
    678e:	2b00      	cmp	r3, #0
    6790:	bf14      	ite	ne
    6792:	2301      	movne	r3, #1
    6794:	2300      	moveq	r3, #0
    6796:	b2db      	uxtb	r3, r3
}
    6798:	4618      	mov	r0, r3
    679a:	3710      	adds	r7, #16
    679c:	46bd      	mov	sp, r7
    679e:	bd80      	pop	{r7, pc}
    67a0:	000066ad 	.word	0x000066ad

000067a4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    67a4:	b580      	push	{r7, lr}
    67a6:	b082      	sub	sp, #8
    67a8:	af00      	add	r7, sp, #0
    67aa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	881b      	ldrh	r3, [r3, #0]
    67b0:	b29b      	uxth	r3, r3
    67b2:	f023 0302 	bic.w	r3, r3, #2
    67b6:	b29a      	uxth	r2, r3
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    67bc:	f248 0103 	movw	r1, #32771	; 0x8003
    67c0:	6878      	ldr	r0, [r7, #4]
    67c2:	4b03      	ldr	r3, [pc, #12]	; (67d0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    67c4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    67c6:	bf00      	nop
    67c8:	3708      	adds	r7, #8
    67ca:	46bd      	mov	sp, r7
    67cc:	bd80      	pop	{r7, pc}
    67ce:	bf00      	nop
    67d0:	000066ad 	.word	0x000066ad

000067d4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b082      	sub	sp, #8
    67d8:	af00      	add	r7, sp, #0
    67da:	6078      	str	r0, [r7, #4]
    67dc:	460b      	mov	r3, r1
    67de:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    67e0:	687b      	ldr	r3, [r7, #4]
    67e2:	887a      	ldrh	r2, [r7, #2]
    67e4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    67e6:	f248 0103 	movw	r1, #32771	; 0x8003
    67ea:	6878      	ldr	r0, [r7, #4]
    67ec:	4b02      	ldr	r3, [pc, #8]	; (67f8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    67ee:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    67f0:	bf00      	nop
    67f2:	3708      	adds	r7, #8
    67f4:	46bd      	mov	sp, r7
    67f6:	bd80      	pop	{r7, pc}
    67f8:	000066ad 	.word	0x000066ad

000067fc <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    67fc:	b580      	push	{r7, lr}
    67fe:	b082      	sub	sp, #8
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    6804:	2108      	movs	r1, #8
    6806:	6878      	ldr	r0, [r7, #4]
    6808:	4b03      	ldr	r3, [pc, #12]	; (6818 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    680a:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	699b      	ldr	r3, [r3, #24]
}
    6810:	4618      	mov	r0, r3
    6812:	3708      	adds	r7, #8
    6814:	46bd      	mov	sp, r7
    6816:	bd80      	pop	{r7, pc}
    6818:	000066ad 	.word	0x000066ad

0000681c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    681c:	b480      	push	{r7}
    681e:	b083      	sub	sp, #12
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
    6824:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	683a      	ldr	r2, [r7, #0]
    682a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    682c:	bf00      	nop
    682e:	370c      	adds	r7, #12
    6830:	46bd      	mov	sp, r7
    6832:	f85d 7b04 	ldr.w	r7, [sp], #4
    6836:	4770      	bx	lr

00006838 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6838:	b580      	push	{r7, lr}
    683a:	b082      	sub	sp, #8
    683c:	af00      	add	r7, sp, #0
    683e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	2b00      	cmp	r3, #0
    6844:	d005      	beq.n	6852 <_calendar_init+0x1a>
    6846:	687b      	ldr	r3, [r7, #4]
    6848:	681b      	ldr	r3, [r3, #0]
    684a:	2b00      	cmp	r3, #0
    684c:	d001      	beq.n	6852 <_calendar_init+0x1a>
    684e:	2301      	movs	r3, #1
    6850:	e000      	b.n	6854 <_calendar_init+0x1c>
    6852:	2300      	movs	r3, #0
    6854:	f003 0301 	and.w	r3, r3, #1
    6858:	b2db      	uxtb	r3, r3
    685a:	222f      	movs	r2, #47	; 0x2f
    685c:	491b      	ldr	r1, [pc, #108]	; (68cc <_calendar_init+0x94>)
    685e:	4618      	mov	r0, r3
    6860:	4b1b      	ldr	r3, [pc, #108]	; (68d0 <_calendar_init+0x98>)
    6862:	4798      	blx	r3

	_rtc_dev = dev;
    6864:	4a1b      	ldr	r2, [pc, #108]	; (68d4 <_calendar_init+0x9c>)
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    686a:	687b      	ldr	r3, [r7, #4]
    686c:	681b      	ldr	r3, [r3, #0]
    686e:	4618      	mov	r0, r3
    6870:	4b19      	ldr	r3, [pc, #100]	; (68d8 <_calendar_init+0xa0>)
    6872:	4798      	blx	r3
    6874:	4603      	mov	r3, r0
    6876:	2b00      	cmp	r3, #0
    6878:	d00a      	beq.n	6890 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    687a:	687b      	ldr	r3, [r7, #4]
    687c:	681b      	ldr	r3, [r3, #0]
    687e:	4618      	mov	r0, r3
    6880:	4b16      	ldr	r3, [pc, #88]	; (68dc <_calendar_init+0xa4>)
    6882:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    6884:	687b      	ldr	r3, [r7, #4]
    6886:	681b      	ldr	r3, [r3, #0]
    6888:	2102      	movs	r1, #2
    688a:	4618      	mov	r0, r3
    688c:	4b14      	ldr	r3, [pc, #80]	; (68e0 <_calendar_init+0xa8>)
    688e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	681b      	ldr	r3, [r3, #0]
    6894:	4618      	mov	r0, r3
    6896:	4b13      	ldr	r3, [pc, #76]	; (68e4 <_calendar_init+0xac>)
    6898:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    689a:	687b      	ldr	r3, [r7, #4]
    689c:	681b      	ldr	r3, [r3, #0]
    689e:	2101      	movs	r1, #1
    68a0:	4618      	mov	r0, r3
    68a2:	4b0f      	ldr	r3, [pc, #60]	; (68e0 <_calendar_init+0xa8>)
    68a4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	681b      	ldr	r3, [r3, #0]
    68aa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    68ae:	4618      	mov	r0, r3
    68b0:	4b0d      	ldr	r3, [pc, #52]	; (68e8 <_calendar_init+0xb0>)
    68b2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    68b8:	2100      	movs	r1, #0
    68ba:	4618      	mov	r0, r3
    68bc:	4b0b      	ldr	r3, [pc, #44]	; (68ec <_calendar_init+0xb4>)
    68be:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    68c0:	2300      	movs	r3, #0
}
    68c2:	4618      	mov	r0, r3
    68c4:	3708      	adds	r7, #8
    68c6:	46bd      	mov	sp, r7
    68c8:	bd80      	pop	{r7, pc}
    68ca:	bf00      	nop
    68cc:	00011168 	.word	0x00011168
    68d0:	0000445d 	.word	0x0000445d
    68d4:	20000e20 	.word	0x20000e20
    68d8:	00006769 	.word	0x00006769
    68dc:	000067a5 	.word	0x000067a5
    68e0:	000066ad 	.word	0x000066ad
    68e4:	0000673d 	.word	0x0000673d
    68e8:	000067d5 	.word	0x000067d5
    68ec:	0000681d 	.word	0x0000681d

000068f0 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b082      	sub	sp, #8
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	2b00      	cmp	r3, #0
    68fc:	d005      	beq.n	690a <_calendar_get_counter+0x1a>
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	681b      	ldr	r3, [r3, #0]
    6902:	2b00      	cmp	r3, #0
    6904:	d001      	beq.n	690a <_calendar_get_counter+0x1a>
    6906:	2301      	movs	r3, #1
    6908:	e000      	b.n	690c <_calendar_get_counter+0x1c>
    690a:	2300      	movs	r3, #0
    690c:	f003 0301 	and.w	r3, r3, #1
    6910:	b2db      	uxtb	r3, r3
    6912:	2299      	movs	r2, #153	; 0x99
    6914:	4906      	ldr	r1, [pc, #24]	; (6930 <_calendar_get_counter+0x40>)
    6916:	4618      	mov	r0, r3
    6918:	4b06      	ldr	r3, [pc, #24]	; (6934 <_calendar_get_counter+0x44>)
    691a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    691c:	687b      	ldr	r3, [r7, #4]
    691e:	681b      	ldr	r3, [r3, #0]
    6920:	4618      	mov	r0, r3
    6922:	4b05      	ldr	r3, [pc, #20]	; (6938 <_calendar_get_counter+0x48>)
    6924:	4798      	blx	r3
    6926:	4603      	mov	r3, r0
}
    6928:	4618      	mov	r0, r3
    692a:	3708      	adds	r7, #8
    692c:	46bd      	mov	sp, r7
    692e:	bd80      	pop	{r7, pc}
    6930:	00011168 	.word	0x00011168
    6934:	0000445d 	.word	0x0000445d
    6938:	000067fd 	.word	0x000067fd

0000693c <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    693c:	b580      	push	{r7, lr}
    693e:	b084      	sub	sp, #16
    6940:	af00      	add	r7, sp, #0
    6942:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	681b      	ldr	r3, [r3, #0]
    6948:	4618      	mov	r0, r3
    694a:	4b19      	ldr	r3, [pc, #100]	; (69b0 <_rtc_interrupt_handler+0x74>)
    694c:	4798      	blx	r3
    694e:	4603      	mov	r3, r0
    6950:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	681b      	ldr	r3, [r3, #0]
    6956:	4618      	mov	r0, r3
    6958:	4b16      	ldr	r3, [pc, #88]	; (69b4 <_rtc_interrupt_handler+0x78>)
    695a:	4798      	blx	r3
    695c:	4603      	mov	r3, r0
    695e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    6960:	89fa      	ldrh	r2, [r7, #14]
    6962:	89bb      	ldrh	r3, [r7, #12]
    6964:	4013      	ands	r3, r2
    6966:	b29b      	uxth	r3, r3
    6968:	f403 7380 	and.w	r3, r3, #256	; 0x100
    696c:	2b00      	cmp	r3, #0
    696e:	d009      	beq.n	6984 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	685b      	ldr	r3, [r3, #4]
    6974:	6878      	ldr	r0, [r7, #4]
    6976:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	4618      	mov	r0, r3
    697e:	4b0e      	ldr	r3, [pc, #56]	; (69b8 <_rtc_interrupt_handler+0x7c>)
    6980:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6982:	e010      	b.n	69a6 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6984:	89fa      	ldrh	r2, [r7, #14]
    6986:	89bb      	ldrh	r3, [r7, #12]
    6988:	4013      	ands	r3, r2
    698a:	b29b      	uxth	r3, r3
    698c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6990:	2b00      	cmp	r3, #0
    6992:	d008      	beq.n	69a6 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	689b      	ldr	r3, [r3, #8]
    6998:	6878      	ldr	r0, [r7, #4]
    699a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    699c:	687b      	ldr	r3, [r7, #4]
    699e:	681b      	ldr	r3, [r3, #0]
    69a0:	4618      	mov	r0, r3
    69a2:	4b06      	ldr	r3, [pc, #24]	; (69bc <_rtc_interrupt_handler+0x80>)
    69a4:	4798      	blx	r3
}
    69a6:	bf00      	nop
    69a8:	3710      	adds	r7, #16
    69aa:	46bd      	mov	sp, r7
    69ac:	bd80      	pop	{r7, pc}
    69ae:	bf00      	nop
    69b0:	00006709 	.word	0x00006709
    69b4:	00006723 	.word	0x00006723
    69b8:	000066d1 	.word	0x000066d1
    69bc:	000066ed 	.word	0x000066ed

000069c0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    69c0:	b580      	push	{r7, lr}
    69c2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    69c4:	4b03      	ldr	r3, [pc, #12]	; (69d4 <RTC_Handler+0x14>)
    69c6:	681b      	ldr	r3, [r3, #0]
    69c8:	4618      	mov	r0, r3
    69ca:	4b03      	ldr	r3, [pc, #12]	; (69d8 <RTC_Handler+0x18>)
    69cc:	4798      	blx	r3
}
    69ce:	bf00      	nop
    69d0:	bd80      	pop	{r7, pc}
    69d2:	bf00      	nop
    69d4:	20000e20 	.word	0x20000e20
    69d8:	0000693d 	.word	0x0000693d

000069dc <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    69dc:	b480      	push	{r7}
    69de:	b083      	sub	sp, #12
    69e0:	af00      	add	r7, sp, #0
    69e2:	6078      	str	r0, [r7, #4]
    69e4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69e6:	bf00      	nop
    69e8:	687b      	ldr	r3, [r7, #4]
    69ea:	69da      	ldr	r2, [r3, #28]
    69ec:	683b      	ldr	r3, [r7, #0]
    69ee:	4013      	ands	r3, r2
    69f0:	2b00      	cmp	r3, #0
    69f2:	d1f9      	bne.n	69e8 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    69f4:	bf00      	nop
    69f6:	370c      	adds	r7, #12
    69f8:	46bd      	mov	sp, r7
    69fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fe:	4770      	bx	lr

00006a00 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6a00:	b480      	push	{r7}
    6a02:	b083      	sub	sp, #12
    6a04:	af00      	add	r7, sp, #0
    6a06:	6078      	str	r0, [r7, #4]
    6a08:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6a0a:	687b      	ldr	r3, [r7, #4]
    6a0c:	69da      	ldr	r2, [r3, #28]
    6a0e:	683b      	ldr	r3, [r7, #0]
    6a10:	4013      	ands	r3, r2
    6a12:	2b00      	cmp	r3, #0
    6a14:	bf14      	ite	ne
    6a16:	2301      	movne	r3, #1
    6a18:	2300      	moveq	r3, #0
    6a1a:	b2db      	uxtb	r3, r3
}
    6a1c:	4618      	mov	r0, r3
    6a1e:	370c      	adds	r7, #12
    6a20:	46bd      	mov	sp, r7
    6a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a26:	4770      	bx	lr

00006a28 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6a28:	b480      	push	{r7}
    6a2a:	b083      	sub	sp, #12
    6a2c:	af00      	add	r7, sp, #0
    6a2e:	6078      	str	r0, [r7, #4]
    6a30:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6a32:	bf00      	nop
    6a34:	687b      	ldr	r3, [r7, #4]
    6a36:	69da      	ldr	r2, [r3, #28]
    6a38:	683b      	ldr	r3, [r7, #0]
    6a3a:	4013      	ands	r3, r2
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d1f9      	bne.n	6a34 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    6a40:	bf00      	nop
    6a42:	370c      	adds	r7, #12
    6a44:	46bd      	mov	sp, r7
    6a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a4a:	4770      	bx	lr

00006a4c <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6a4c:	b480      	push	{r7}
    6a4e:	b083      	sub	sp, #12
    6a50:	af00      	add	r7, sp, #0
    6a52:	6078      	str	r0, [r7, #4]
    6a54:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	69da      	ldr	r2, [r3, #28]
    6a5a:	683b      	ldr	r3, [r7, #0]
    6a5c:	4013      	ands	r3, r2
    6a5e:	2b00      	cmp	r3, #0
    6a60:	bf14      	ite	ne
    6a62:	2301      	movne	r3, #1
    6a64:	2300      	moveq	r3, #0
    6a66:	b2db      	uxtb	r3, r3
}
    6a68:	4618      	mov	r0, r3
    6a6a:	370c      	adds	r7, #12
    6a6c:	46bd      	mov	sp, r7
    6a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a72:	4770      	bx	lr

00006a74 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6a74:	b480      	push	{r7}
    6a76:	b083      	sub	sp, #12
    6a78:	af00      	add	r7, sp, #0
    6a7a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6a7c:	687b      	ldr	r3, [r7, #4]
    6a7e:	2201      	movs	r2, #1
    6a80:	761a      	strb	r2, [r3, #24]
}
    6a82:	bf00      	nop
    6a84:	370c      	adds	r7, #12
    6a86:	46bd      	mov	sp, r7
    6a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a8c:	4770      	bx	lr

00006a8e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6a8e:	b480      	push	{r7}
    6a90:	b083      	sub	sp, #12
    6a92:	af00      	add	r7, sp, #0
    6a94:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	2202      	movs	r2, #2
    6a9a:	761a      	strb	r2, [r3, #24]
}
    6a9c:	bf00      	nop
    6a9e:	370c      	adds	r7, #12
    6aa0:	46bd      	mov	sp, r7
    6aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aa6:	4770      	bx	lr

00006aa8 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6aa8:	b480      	push	{r7}
    6aaa:	b083      	sub	sp, #12
    6aac:	af00      	add	r7, sp, #0
    6aae:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	7e1b      	ldrb	r3, [r3, #24]
    6ab4:	b2db      	uxtb	r3, r3
}
    6ab6:	4618      	mov	r0, r3
    6ab8:	370c      	adds	r7, #12
    6aba:	46bd      	mov	sp, r7
    6abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ac0:	4770      	bx	lr

00006ac2 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6ac2:	b480      	push	{r7}
    6ac4:	b085      	sub	sp, #20
    6ac6:	af00      	add	r7, sp, #0
    6ac8:	6078      	str	r0, [r7, #4]
    6aca:	460b      	mov	r3, r1
    6acc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	7e1b      	ldrb	r3, [r3, #24]
    6ad2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6ad4:	7bfa      	ldrb	r2, [r7, #15]
    6ad6:	78fb      	ldrb	r3, [r7, #3]
    6ad8:	4013      	ands	r3, r2
    6ada:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6adc:	7bfb      	ldrb	r3, [r7, #15]
}
    6ade:	4618      	mov	r0, r3
    6ae0:	3714      	adds	r7, #20
    6ae2:	46bd      	mov	sp, r7
    6ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ae8:	4770      	bx	lr

00006aea <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6aea:	b480      	push	{r7}
    6aec:	b083      	sub	sp, #12
    6aee:	af00      	add	r7, sp, #0
    6af0:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6af2:	687b      	ldr	r3, [r7, #4]
    6af4:	7e1b      	ldrb	r3, [r3, #24]
    6af6:	b2db      	uxtb	r3, r3
}
    6af8:	4618      	mov	r0, r3
    6afa:	370c      	adds	r7, #12
    6afc:	46bd      	mov	sp, r7
    6afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b02:	4770      	bx	lr

00006b04 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6b04:	b480      	push	{r7}
    6b06:	b083      	sub	sp, #12
    6b08:	af00      	add	r7, sp, #0
    6b0a:	6078      	str	r0, [r7, #4]
    6b0c:	460b      	mov	r3, r1
    6b0e:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6b10:	687b      	ldr	r3, [r7, #4]
    6b12:	78fa      	ldrb	r2, [r7, #3]
    6b14:	761a      	strb	r2, [r3, #24]
}
    6b16:	bf00      	nop
    6b18:	370c      	adds	r7, #12
    6b1a:	46bd      	mov	sp, r7
    6b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b20:	4770      	bx	lr
	...

00006b24 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6b24:	b580      	push	{r7, lr}
    6b26:	b082      	sub	sp, #8
    6b28:	af00      	add	r7, sp, #0
    6b2a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	681b      	ldr	r3, [r3, #0]
    6b30:	f043 0202 	orr.w	r2, r3, #2
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b38:	2103      	movs	r1, #3
    6b3a:	6878      	ldr	r0, [r7, #4]
    6b3c:	4b02      	ldr	r3, [pc, #8]	; (6b48 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    6b3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b40:	bf00      	nop
    6b42:	3708      	adds	r7, #8
    6b44:	46bd      	mov	sp, r7
    6b46:	bd80      	pop	{r7, pc}
    6b48:	000069dd 	.word	0x000069dd

00006b4c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6b4c:	b580      	push	{r7, lr}
    6b4e:	b082      	sub	sp, #8
    6b50:	af00      	add	r7, sp, #0
    6b52:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6b54:	687b      	ldr	r3, [r7, #4]
    6b56:	681b      	ldr	r3, [r3, #0]
    6b58:	f023 0202 	bic.w	r2, r3, #2
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b60:	2103      	movs	r1, #3
    6b62:	6878      	ldr	r0, [r7, #4]
    6b64:	4b02      	ldr	r3, [pc, #8]	; (6b70 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6b66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b68:	bf00      	nop
    6b6a:	3708      	adds	r7, #8
    6b6c:	46bd      	mov	sp, r7
    6b6e:	bd80      	pop	{r7, pc}
    6b70:	000069dd 	.word	0x000069dd

00006b74 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6b74:	b480      	push	{r7}
    6b76:	b085      	sub	sp, #20
    6b78:	af00      	add	r7, sp, #0
    6b7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	681b      	ldr	r3, [r3, #0]
    6b80:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6b82:	68fb      	ldr	r3, [r7, #12]
    6b84:	0edb      	lsrs	r3, r3, #27
    6b86:	f003 0301 	and.w	r3, r3, #1
    6b8a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6b8c:	68fb      	ldr	r3, [r7, #12]
    6b8e:	2b00      	cmp	r3, #0
    6b90:	bf14      	ite	ne
    6b92:	2301      	movne	r3, #1
    6b94:	2300      	moveq	r3, #0
    6b96:	b2db      	uxtb	r3, r3
}
    6b98:	4618      	mov	r0, r3
    6b9a:	3714      	adds	r7, #20
    6b9c:	46bd      	mov	sp, r7
    6b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ba2:	4770      	bx	lr

00006ba4 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b084      	sub	sp, #16
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
    6bac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6bae:	2103      	movs	r1, #3
    6bb0:	6878      	ldr	r0, [r7, #4]
    6bb2:	4b07      	ldr	r3, [pc, #28]	; (6bd0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6bb4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6bb6:	687b      	ldr	r3, [r7, #4]
    6bb8:	681b      	ldr	r3, [r3, #0]
    6bba:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6bbc:	68fa      	ldr	r2, [r7, #12]
    6bbe:	683b      	ldr	r3, [r7, #0]
    6bc0:	4013      	ands	r3, r2
    6bc2:	60fb      	str	r3, [r7, #12]
	return tmp;
    6bc4:	68fb      	ldr	r3, [r7, #12]
}
    6bc6:	4618      	mov	r0, r3
    6bc8:	3710      	adds	r7, #16
    6bca:	46bd      	mov	sp, r7
    6bcc:	bd80      	pop	{r7, pc}
    6bce:	bf00      	nop
    6bd0:	000069dd 	.word	0x000069dd

00006bd4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6bd4:	b580      	push	{r7, lr}
    6bd6:	b082      	sub	sp, #8
    6bd8:	af00      	add	r7, sp, #0
    6bda:	6078      	str	r0, [r7, #4]
    6bdc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	683a      	ldr	r2, [r7, #0]
    6be2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6be4:	2103      	movs	r1, #3
    6be6:	6878      	ldr	r0, [r7, #4]
    6be8:	4b02      	ldr	r3, [pc, #8]	; (6bf4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6bea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6bec:	bf00      	nop
    6bee:	3708      	adds	r7, #8
    6bf0:	46bd      	mov	sp, r7
    6bf2:	bd80      	pop	{r7, pc}
    6bf4:	000069dd 	.word	0x000069dd

00006bf8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6bf8:	b580      	push	{r7, lr}
    6bfa:	b084      	sub	sp, #16
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6c00:	2103      	movs	r1, #3
    6c02:	6878      	ldr	r0, [r7, #4]
    6c04:	4b09      	ldr	r3, [pc, #36]	; (6c2c <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6c06:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	681b      	ldr	r3, [r3, #0]
    6c0c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6c0e:	68fb      	ldr	r3, [r7, #12]
    6c10:	085b      	lsrs	r3, r3, #1
    6c12:	f003 0301 	and.w	r3, r3, #1
    6c16:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6c18:	68fb      	ldr	r3, [r7, #12]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	bf14      	ite	ne
    6c1e:	2301      	movne	r3, #1
    6c20:	2300      	moveq	r3, #0
    6c22:	b2db      	uxtb	r3, r3
}
    6c24:	4618      	mov	r0, r3
    6c26:	3710      	adds	r7, #16
    6c28:	46bd      	mov	sp, r7
    6c2a:	bd80      	pop	{r7, pc}
    6c2c:	00006a29 	.word	0x00006a29

00006c30 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6c30:	b580      	push	{r7, lr}
    6c32:	b082      	sub	sp, #8
    6c34:	af00      	add	r7, sp, #0
    6c36:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	681b      	ldr	r3, [r3, #0]
    6c3c:	f023 0202 	bic.w	r2, r3, #2
    6c40:	687b      	ldr	r3, [r7, #4]
    6c42:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6c44:	2103      	movs	r1, #3
    6c46:	6878      	ldr	r0, [r7, #4]
    6c48:	4b02      	ldr	r3, [pc, #8]	; (6c54 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6c4a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6c4c:	bf00      	nop
    6c4e:	3708      	adds	r7, #8
    6c50:	46bd      	mov	sp, r7
    6c52:	bd80      	pop	{r7, pc}
    6c54:	00006a29 	.word	0x00006a29

00006c58 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6c58:	b580      	push	{r7, lr}
    6c5a:	b084      	sub	sp, #16
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	6078      	str	r0, [r7, #4]
    6c60:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6c62:	2103      	movs	r1, #3
    6c64:	6878      	ldr	r0, [r7, #4]
    6c66:	4b07      	ldr	r3, [pc, #28]	; (6c84 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6c68:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6c70:	68fa      	ldr	r2, [r7, #12]
    6c72:	683b      	ldr	r3, [r7, #0]
    6c74:	4013      	ands	r3, r2
    6c76:	60fb      	str	r3, [r7, #12]
	return tmp;
    6c78:	68fb      	ldr	r3, [r7, #12]
}
    6c7a:	4618      	mov	r0, r3
    6c7c:	3710      	adds	r7, #16
    6c7e:	46bd      	mov	sp, r7
    6c80:	bd80      	pop	{r7, pc}
    6c82:	bf00      	nop
    6c84:	00006a29 	.word	0x00006a29

00006c88 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6c88:	b580      	push	{r7, lr}
    6c8a:	b082      	sub	sp, #8
    6c8c:	af00      	add	r7, sp, #0
    6c8e:	6078      	str	r0, [r7, #4]
    6c90:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	683a      	ldr	r2, [r7, #0]
    6c96:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6c98:	2103      	movs	r1, #3
    6c9a:	6878      	ldr	r0, [r7, #4]
    6c9c:	4b02      	ldr	r3, [pc, #8]	; (6ca8 <hri_sercomspi_write_CTRLA_reg+0x20>)
    6c9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ca0:	bf00      	nop
    6ca2:	3708      	adds	r7, #8
    6ca4:	46bd      	mov	sp, r7
    6ca6:	bd80      	pop	{r7, pc}
    6ca8:	00006a29 	.word	0x00006a29

00006cac <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6cac:	b580      	push	{r7, lr}
    6cae:	b082      	sub	sp, #8
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	685b      	ldr	r3, [r3, #4]
    6cb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6cc0:	2104      	movs	r1, #4
    6cc2:	6878      	ldr	r0, [r7, #4]
    6cc4:	4b02      	ldr	r3, [pc, #8]	; (6cd0 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6cc6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6cc8:	bf00      	nop
    6cca:	3708      	adds	r7, #8
    6ccc:	46bd      	mov	sp, r7
    6cce:	bd80      	pop	{r7, pc}
    6cd0:	000069dd 	.word	0x000069dd

00006cd4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6cd4:	b580      	push	{r7, lr}
    6cd6:	b082      	sub	sp, #8
    6cd8:	af00      	add	r7, sp, #0
    6cda:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	685b      	ldr	r3, [r3, #4]
    6ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ce8:	2104      	movs	r1, #4
    6cea:	6878      	ldr	r0, [r7, #4]
    6cec:	4b02      	ldr	r3, [pc, #8]	; (6cf8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6cee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6cf0:	bf00      	nop
    6cf2:	3708      	adds	r7, #8
    6cf4:	46bd      	mov	sp, r7
    6cf6:	bd80      	pop	{r7, pc}
    6cf8:	000069dd 	.word	0x000069dd

00006cfc <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b082      	sub	sp, #8
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	685b      	ldr	r3, [r3, #4]
    6d08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d10:	2104      	movs	r1, #4
    6d12:	6878      	ldr	r0, [r7, #4]
    6d14:	4b02      	ldr	r3, [pc, #8]	; (6d20 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6d16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d18:	bf00      	nop
    6d1a:	3708      	adds	r7, #8
    6d1c:	46bd      	mov	sp, r7
    6d1e:	bd80      	pop	{r7, pc}
    6d20:	000069dd 	.word	0x000069dd

00006d24 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6d24:	b580      	push	{r7, lr}
    6d26:	b082      	sub	sp, #8
    6d28:	af00      	add	r7, sp, #0
    6d2a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	685b      	ldr	r3, [r3, #4]
    6d30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d38:	2104      	movs	r1, #4
    6d3a:	6878      	ldr	r0, [r7, #4]
    6d3c:	4b02      	ldr	r3, [pc, #8]	; (6d48 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6d3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d40:	bf00      	nop
    6d42:	3708      	adds	r7, #8
    6d44:	46bd      	mov	sp, r7
    6d46:	bd80      	pop	{r7, pc}
    6d48:	000069dd 	.word	0x000069dd

00006d4c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6d4c:	b580      	push	{r7, lr}
    6d4e:	b082      	sub	sp, #8
    6d50:	af00      	add	r7, sp, #0
    6d52:	6078      	str	r0, [r7, #4]
    6d54:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	685a      	ldr	r2, [r3, #4]
    6d5a:	683b      	ldr	r3, [r7, #0]
    6d5c:	041b      	lsls	r3, r3, #16
    6d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6d62:	431a      	orrs	r2, r3
    6d64:	687b      	ldr	r3, [r7, #4]
    6d66:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d68:	2104      	movs	r1, #4
    6d6a:	6878      	ldr	r0, [r7, #4]
    6d6c:	4b02      	ldr	r3, [pc, #8]	; (6d78 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6d6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d70:	bf00      	nop
    6d72:	3708      	adds	r7, #8
    6d74:	46bd      	mov	sp, r7
    6d76:	bd80      	pop	{r7, pc}
    6d78:	000069dd 	.word	0x000069dd

00006d7c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6d7c:	b580      	push	{r7, lr}
    6d7e:	b082      	sub	sp, #8
    6d80:	af00      	add	r7, sp, #0
    6d82:	6078      	str	r0, [r7, #4]
    6d84:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	683a      	ldr	r2, [r7, #0]
    6d8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6d8c:	2104      	movs	r1, #4
    6d8e:	6878      	ldr	r0, [r7, #4]
    6d90:	4b02      	ldr	r3, [pc, #8]	; (6d9c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6d92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6d94:	bf00      	nop
    6d96:	3708      	adds	r7, #8
    6d98:	46bd      	mov	sp, r7
    6d9a:	bd80      	pop	{r7, pc}
    6d9c:	000069dd 	.word	0x000069dd

00006da0 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	b082      	sub	sp, #8
    6da4:	af00      	add	r7, sp, #0
    6da6:	6078      	str	r0, [r7, #4]
    6da8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	683a      	ldr	r2, [r7, #0]
    6dae:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6db0:	2117      	movs	r1, #23
    6db2:	6878      	ldr	r0, [r7, #4]
    6db4:	4b02      	ldr	r3, [pc, #8]	; (6dc0 <hri_sercomspi_write_CTRLB_reg+0x20>)
    6db6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6db8:	bf00      	nop
    6dba:	3708      	adds	r7, #8
    6dbc:	46bd      	mov	sp, r7
    6dbe:	bd80      	pop	{r7, pc}
    6dc0:	00006a29 	.word	0x00006a29

00006dc4 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6dc4:	b480      	push	{r7}
    6dc6:	b083      	sub	sp, #12
    6dc8:	af00      	add	r7, sp, #0
    6dca:	6078      	str	r0, [r7, #4]
    6dcc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	683a      	ldr	r2, [r7, #0]
    6dd2:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6dd4:	bf00      	nop
    6dd6:	370c      	adds	r7, #12
    6dd8:	46bd      	mov	sp, r7
    6dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dde:	4770      	bx	lr

00006de0 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6de0:	b480      	push	{r7}
    6de2:	b083      	sub	sp, #12
    6de4:	af00      	add	r7, sp, #0
    6de6:	6078      	str	r0, [r7, #4]
    6de8:	460b      	mov	r3, r1
    6dea:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6dec:	687b      	ldr	r3, [r7, #4]
    6dee:	78fa      	ldrb	r2, [r7, #3]
    6df0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6df2:	bf00      	nop
    6df4:	370c      	adds	r7, #12
    6df6:	46bd      	mov	sp, r7
    6df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dfc:	4770      	bx	lr
	...

00006e00 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b084      	sub	sp, #16
    6e04:	af00      	add	r7, sp, #0
    6e06:	6078      	str	r0, [r7, #4]
    6e08:	460b      	mov	r3, r1
    6e0a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e10:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6e12:	68fb      	ldr	r3, [r7, #12]
    6e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6e18:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6e1a:	78fb      	ldrb	r3, [r7, #3]
    6e1c:	039b      	lsls	r3, r3, #14
    6e1e:	461a      	mov	r2, r3
    6e20:	68fb      	ldr	r3, [r7, #12]
    6e22:	4313      	orrs	r3, r2
    6e24:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	68fa      	ldr	r2, [r7, #12]
    6e2a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e2c:	2104      	movs	r1, #4
    6e2e:	6878      	ldr	r0, [r7, #4]
    6e30:	4b02      	ldr	r3, [pc, #8]	; (6e3c <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6e32:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6e34:	bf00      	nop
    6e36:	3710      	adds	r7, #16
    6e38:	46bd      	mov	sp, r7
    6e3a:	bd80      	pop	{r7, pc}
    6e3c:	000069dd 	.word	0x000069dd

00006e40 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	b082      	sub	sp, #8
    6e44:	af00      	add	r7, sp, #0
    6e46:	6078      	str	r0, [r7, #4]
    6e48:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	683a      	ldr	r2, [r7, #0]
    6e4e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e50:	2104      	movs	r1, #4
    6e52:	6878      	ldr	r0, [r7, #4]
    6e54:	4b02      	ldr	r3, [pc, #8]	; (6e60 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6e56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6e58:	bf00      	nop
    6e5a:	3708      	adds	r7, #8
    6e5c:	46bd      	mov	sp, r7
    6e5e:	bd80      	pop	{r7, pc}
    6e60:	000069dd 	.word	0x000069dd

00006e64 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6e64:	b580      	push	{r7, lr}
    6e66:	b082      	sub	sp, #8
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6e6c:	2104      	movs	r1, #4
    6e6e:	6878      	ldr	r0, [r7, #4]
    6e70:	4b03      	ldr	r3, [pc, #12]	; (6e80 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6e72:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6e78:	4618      	mov	r0, r3
    6e7a:	3708      	adds	r7, #8
    6e7c:	46bd      	mov	sp, r7
    6e7e:	bd80      	pop	{r7, pc}
    6e80:	000069dd 	.word	0x000069dd

00006e84 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6e84:	b480      	push	{r7}
    6e86:	b083      	sub	sp, #12
    6e88:	af00      	add	r7, sp, #0
    6e8a:	6078      	str	r0, [r7, #4]
    6e8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6e8e:	687b      	ldr	r3, [r7, #4]
    6e90:	683a      	ldr	r2, [r7, #0]
    6e92:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6e94:	bf00      	nop
    6e96:	370c      	adds	r7, #12
    6e98:	46bd      	mov	sp, r7
    6e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e9e:	4770      	bx	lr

00006ea0 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6ea0:	b580      	push	{r7, lr}
    6ea2:	b082      	sub	sp, #8
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	6078      	str	r0, [r7, #4]
    6ea8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	683a      	ldr	r2, [r7, #0]
    6eae:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6eb0:	2104      	movs	r1, #4
    6eb2:	6878      	ldr	r0, [r7, #4]
    6eb4:	4b02      	ldr	r3, [pc, #8]	; (6ec0 <hri_sercomi2cm_write_DATA_reg+0x20>)
    6eb6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6eb8:	bf00      	nop
    6eba:	3708      	adds	r7, #8
    6ebc:	46bd      	mov	sp, r7
    6ebe:	bd80      	pop	{r7, pc}
    6ec0:	000069dd 	.word	0x000069dd

00006ec4 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6ec4:	b580      	push	{r7, lr}
    6ec6:	b082      	sub	sp, #8
    6ec8:	af00      	add	r7, sp, #0
    6eca:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6ecc:	2104      	movs	r1, #4
    6ece:	6878      	ldr	r0, [r7, #4]
    6ed0:	4b03      	ldr	r3, [pc, #12]	; (6ee0 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6ed2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6ed8:	4618      	mov	r0, r3
    6eda:	3708      	adds	r7, #8
    6edc:	46bd      	mov	sp, r7
    6ede:	bd80      	pop	{r7, pc}
    6ee0:	000069dd 	.word	0x000069dd

00006ee4 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6ee4:	b480      	push	{r7}
    6ee6:	b083      	sub	sp, #12
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
    6eec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	683a      	ldr	r2, [r7, #0]
    6ef2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ef4:	bf00      	nop
    6ef6:	370c      	adds	r7, #12
    6ef8:	46bd      	mov	sp, r7
    6efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6efe:	4770      	bx	lr

00006f00 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6f00:	b480      	push	{r7}
    6f02:	b083      	sub	sp, #12
    6f04:	af00      	add	r7, sp, #0
    6f06:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6f0c:	4618      	mov	r0, r3
    6f0e:	370c      	adds	r7, #12
    6f10:	46bd      	mov	sp, r7
    6f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f16:	4770      	bx	lr

00006f18 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6f18:	b480      	push	{r7}
    6f1a:	b083      	sub	sp, #12
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	6078      	str	r0, [r7, #4]
    6f20:	460b      	mov	r3, r1
    6f22:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6f24:	687b      	ldr	r3, [r7, #4]
    6f26:	78fa      	ldrb	r2, [r7, #3]
    6f28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6f2c:	bf00      	nop
    6f2e:	370c      	adds	r7, #12
    6f30:	46bd      	mov	sp, r7
    6f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f36:	4770      	bx	lr

00006f38 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6f38:	b480      	push	{r7}
    6f3a:	b083      	sub	sp, #12
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	6078      	str	r0, [r7, #4]
    6f40:	460b      	mov	r3, r1
    6f42:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	887a      	ldrh	r2, [r7, #2]
    6f48:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6f4a:	bf00      	nop
    6f4c:	370c      	adds	r7, #12
    6f4e:	46bd      	mov	sp, r7
    6f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f54:	4770      	bx	lr
	...

00006f58 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6f58:	b580      	push	{r7, lr}
    6f5a:	b082      	sub	sp, #8
    6f5c:	af00      	add	r7, sp, #0
    6f5e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6f60:	2104      	movs	r1, #4
    6f62:	6878      	ldr	r0, [r7, #4]
    6f64:	4b06      	ldr	r3, [pc, #24]	; (6f80 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6f66:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	8b5b      	ldrh	r3, [r3, #26]
    6f6c:	b29b      	uxth	r3, r3
    6f6e:	091b      	lsrs	r3, r3, #4
    6f70:	b29b      	uxth	r3, r3
    6f72:	f003 0303 	and.w	r3, r3, #3
    6f76:	b29b      	uxth	r3, r3
}
    6f78:	4618      	mov	r0, r3
    6f7a:	3708      	adds	r7, #8
    6f7c:	46bd      	mov	sp, r7
    6f7e:	bd80      	pop	{r7, pc}
    6f80:	000069dd 	.word	0x000069dd

00006f84 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6f84:	b580      	push	{r7, lr}
    6f86:	b082      	sub	sp, #8
    6f88:	af00      	add	r7, sp, #0
    6f8a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6f8c:	2104      	movs	r1, #4
    6f8e:	6878      	ldr	r0, [r7, #4]
    6f90:	4b04      	ldr	r3, [pc, #16]	; (6fa4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6f92:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6f94:	687b      	ldr	r3, [r7, #4]
    6f96:	8b5b      	ldrh	r3, [r3, #26]
    6f98:	b29b      	uxth	r3, r3
}
    6f9a:	4618      	mov	r0, r3
    6f9c:	3708      	adds	r7, #8
    6f9e:	46bd      	mov	sp, r7
    6fa0:	bd80      	pop	{r7, pc}
    6fa2:	bf00      	nop
    6fa4:	000069dd 	.word	0x000069dd

00006fa8 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b082      	sub	sp, #8
    6fac:	af00      	add	r7, sp, #0
    6fae:	6078      	str	r0, [r7, #4]
    6fb0:	460b      	mov	r3, r1
    6fb2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6fb4:	687b      	ldr	r3, [r7, #4]
    6fb6:	887a      	ldrh	r2, [r7, #2]
    6fb8:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6fba:	2104      	movs	r1, #4
    6fbc:	6878      	ldr	r0, [r7, #4]
    6fbe:	4b03      	ldr	r3, [pc, #12]	; (6fcc <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6fc0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6fc2:	bf00      	nop
    6fc4:	3708      	adds	r7, #8
    6fc6:	46bd      	mov	sp, r7
    6fc8:	bd80      	pop	{r7, pc}
    6fca:	bf00      	nop
    6fcc:	000069dd 	.word	0x000069dd

00006fd0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6fd0:	b4b0      	push	{r4, r5, r7}
    6fd2:	b08d      	sub	sp, #52	; 0x34
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6fd8:	4b13      	ldr	r3, [pc, #76]	; (7028 <_sercom_get_hardware_index+0x58>)
    6fda:	f107 040c 	add.w	r4, r7, #12
    6fde:	461d      	mov	r5, r3
    6fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6fe4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fec:	2300      	movs	r3, #0
    6fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ff0:	e010      	b.n	7014 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ff4:	009b      	lsls	r3, r3, #2
    6ff6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6ffa:	4413      	add	r3, r2
    6ffc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7000:	461a      	mov	r2, r3
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	429a      	cmp	r2, r3
    7006:	d102      	bne.n	700e <_sercom_get_hardware_index+0x3e>
			return i;
    7008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    700a:	b2db      	uxtb	r3, r3
    700c:	e006      	b.n	701c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7010:	3301      	adds	r3, #1
    7012:	62fb      	str	r3, [r7, #44]	; 0x2c
    7014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7016:	2b07      	cmp	r3, #7
    7018:	d9eb      	bls.n	6ff2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    701a:	2300      	movs	r3, #0
}
    701c:	4618      	mov	r0, r3
    701e:	3734      	adds	r7, #52	; 0x34
    7020:	46bd      	mov	sp, r7
    7022:	bcb0      	pop	{r4, r5, r7}
    7024:	4770      	bx	lr
    7026:	bf00      	nop
    7028:	0001119c 	.word	0x0001119c

0000702c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    702c:	b580      	push	{r7, lr}
    702e:	b084      	sub	sp, #16
    7030:	af00      	add	r7, sp, #0
    7032:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7034:	6878      	ldr	r0, [r7, #4]
    7036:	4b13      	ldr	r3, [pc, #76]	; (7084 <_get_i2cm_index+0x58>)
    7038:	4798      	blx	r3
    703a:	4603      	mov	r3, r0
    703c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    703e:	2300      	movs	r3, #0
    7040:	73fb      	strb	r3, [r7, #15]
    7042:	e010      	b.n	7066 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    7044:	7bfa      	ldrb	r2, [r7, #15]
    7046:	4910      	ldr	r1, [pc, #64]	; (7088 <_get_i2cm_index+0x5c>)
    7048:	4613      	mov	r3, r2
    704a:	005b      	lsls	r3, r3, #1
    704c:	4413      	add	r3, r2
    704e:	00db      	lsls	r3, r3, #3
    7050:	440b      	add	r3, r1
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	7bba      	ldrb	r2, [r7, #14]
    7056:	429a      	cmp	r2, r3
    7058:	d102      	bne.n	7060 <_get_i2cm_index+0x34>
			return i;
    705a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    705e:	e00d      	b.n	707c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7060:	7bfb      	ldrb	r3, [r7, #15]
    7062:	3301      	adds	r3, #1
    7064:	73fb      	strb	r3, [r7, #15]
    7066:	7bfb      	ldrb	r3, [r7, #15]
    7068:	2b02      	cmp	r3, #2
    706a:	d9eb      	bls.n	7044 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    706c:	f240 32a6 	movw	r2, #934	; 0x3a6
    7070:	4906      	ldr	r1, [pc, #24]	; (708c <_get_i2cm_index+0x60>)
    7072:	2000      	movs	r0, #0
    7074:	4b06      	ldr	r3, [pc, #24]	; (7090 <_get_i2cm_index+0x64>)
    7076:	4798      	blx	r3
	return -1;
    7078:	f04f 33ff 	mov.w	r3, #4294967295
}
    707c:	4618      	mov	r0, r3
    707e:	3710      	adds	r7, #16
    7080:	46bd      	mov	sp, r7
    7082:	bd80      	pop	{r7, pc}
    7084:	00006fd1 	.word	0x00006fd1
    7088:	20000018 	.word	0x20000018
    708c:	00011180 	.word	0x00011180
    7090:	0000445d 	.word	0x0000445d

00007094 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    7094:	b580      	push	{r7, lr}
    7096:	b082      	sub	sp, #8
    7098:	af00      	add	r7, sp, #0
    709a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    709c:	2103      	movs	r1, #3
    709e:	6878      	ldr	r0, [r7, #4]
    70a0:	4b02      	ldr	r3, [pc, #8]	; (70ac <_sercom_i2c_send_stop+0x18>)
    70a2:	4798      	blx	r3
}
    70a4:	bf00      	nop
    70a6:	3708      	adds	r7, #8
    70a8:	46bd      	mov	sp, r7
    70aa:	bd80      	pop	{r7, pc}
    70ac:	00006d4d 	.word	0x00006d4d

000070b0 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    70b0:	b590      	push	{r4, r7, lr}
    70b2:	b087      	sub	sp, #28
    70b4:	af00      	add	r7, sp, #0
    70b6:	60f8      	str	r0, [r7, #12]
    70b8:	60b9      	str	r1, [r7, #8]
    70ba:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    70bc:	68f8      	ldr	r0, [r7, #12]
    70be:	4b7d      	ldr	r3, [pc, #500]	; (72b4 <_sercom_i2c_sync_analyse_flags+0x204>)
    70c0:	4798      	blx	r3
    70c2:	4603      	mov	r3, r0
    70c4:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    70c6:	68f8      	ldr	r0, [r7, #12]
    70c8:	4b7b      	ldr	r3, [pc, #492]	; (72b8 <_sercom_i2c_sync_analyse_flags+0x208>)
    70ca:	4798      	blx	r3
    70cc:	4603      	mov	r3, r0
    70ce:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    70d0:	68bb      	ldr	r3, [r7, #8]
    70d2:	f003 0301 	and.w	r3, r3, #1
    70d6:	2b00      	cmp	r3, #0
    70d8:	f000 8095 	beq.w	7206 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    70dc:	8a7b      	ldrh	r3, [r7, #18]
    70de:	f003 0302 	and.w	r3, r3, #2
    70e2:	2b00      	cmp	r3, #0
    70e4:	d01d      	beq.n	7122 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    70e6:	68f8      	ldr	r0, [r7, #12]
    70e8:	4b74      	ldr	r3, [pc, #464]	; (72bc <_sercom_i2c_sync_analyse_flags+0x20c>)
    70ea:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	885b      	ldrh	r3, [r3, #2]
    70f0:	b29b      	uxth	r3, r3
    70f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    70f6:	b29a      	uxth	r2, r3
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	885b      	ldrh	r3, [r3, #2]
    7100:	b29b      	uxth	r3, r3
    7102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7106:	b29a      	uxth	r2, r3
    7108:	687b      	ldr	r3, [r7, #4]
    710a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    710c:	8a7b      	ldrh	r3, [r7, #18]
    710e:	f003 0301 	and.w	r3, r3, #1
    7112:	2b00      	cmp	r3, #0
    7114:	d002      	beq.n	711c <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    7116:	f06f 0304 	mvn.w	r3, #4
    711a:	e0c6      	b.n	72aa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    711c:	f06f 0303 	mvn.w	r3, #3
    7120:	e0c3      	b.n	72aa <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    7122:	8a7b      	ldrh	r3, [r7, #18]
    7124:	f003 0304 	and.w	r3, r3, #4
    7128:	2b00      	cmp	r3, #0
    712a:	d01f      	beq.n	716c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    712c:	687b      	ldr	r3, [r7, #4]
    712e:	685b      	ldr	r3, [r3, #4]
    7130:	2b00      	cmp	r3, #0
    7132:	dd07      	ble.n	7144 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	885b      	ldrh	r3, [r3, #2]
    7138:	b29b      	uxth	r3, r3
    713a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    713e:	b29a      	uxth	r2, r3
    7140:	687b      	ldr	r3, [r7, #4]
    7142:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    7144:	687b      	ldr	r3, [r7, #4]
    7146:	885b      	ldrh	r3, [r3, #2]
    7148:	b29b      	uxth	r3, r3
    714a:	b21b      	sxth	r3, r3
    714c:	2b00      	cmp	r3, #0
    714e:	da02      	bge.n	7156 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    7150:	68f8      	ldr	r0, [r7, #12]
    7152:	4b5b      	ldr	r3, [pc, #364]	; (72c0 <_sercom_i2c_sync_analyse_flags+0x210>)
    7154:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	885b      	ldrh	r3, [r3, #2]
    715a:	b29b      	uxth	r3, r3
    715c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7160:	b29a      	uxth	r2, r3
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    7166:	f06f 0301 	mvn.w	r3, #1
    716a:	e09e      	b.n	72aa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	885b      	ldrh	r3, [r3, #2]
    7170:	b29b      	uxth	r3, r3
    7172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7176:	2b00      	cmp	r3, #0
    7178:	d01c      	beq.n	71b4 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    717a:	687b      	ldr	r3, [r7, #4]
    717c:	881b      	ldrh	r3, [r3, #0]
    717e:	121b      	asrs	r3, r3, #8
    7180:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7182:	f003 0406 	and.w	r4, r3, #6
    7186:	68f8      	ldr	r0, [r7, #12]
    7188:	4b4e      	ldr	r3, [pc, #312]	; (72c4 <_sercom_i2c_sync_analyse_flags+0x214>)
    718a:	4798      	blx	r3
    718c:	4603      	mov	r3, r0
    718e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7192:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    7194:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    7198:	4619      	mov	r1, r3
    719a:	68f8      	ldr	r0, [r7, #12]
    719c:	4b4a      	ldr	r3, [pc, #296]	; (72c8 <_sercom_i2c_sync_analyse_flags+0x218>)
    719e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	885b      	ldrh	r3, [r3, #2]
    71a4:	b29b      	uxth	r3, r3
    71a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    71aa:	b29a      	uxth	r2, r3
    71ac:	687b      	ldr	r3, [r7, #4]
    71ae:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    71b0:	2300      	movs	r3, #0
    71b2:	e07a      	b.n	72aa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    71b4:	687b      	ldr	r3, [r7, #4]
    71b6:	685b      	ldr	r3, [r3, #4]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d111      	bne.n	71e0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	885b      	ldrh	r3, [r3, #2]
    71c0:	b29b      	uxth	r3, r3
    71c2:	b21b      	sxth	r3, r3
    71c4:	2b00      	cmp	r3, #0
    71c6:	da02      	bge.n	71ce <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    71c8:	68f8      	ldr	r0, [r7, #12]
    71ca:	4b3d      	ldr	r3, [pc, #244]	; (72c0 <_sercom_i2c_sync_analyse_flags+0x210>)
    71cc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	885b      	ldrh	r3, [r3, #2]
    71d2:	b29b      	uxth	r3, r3
    71d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    71d8:	b29a      	uxth	r2, r3
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	805a      	strh	r2, [r3, #2]
    71de:	e010      	b.n	7202 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	689b      	ldr	r3, [r3, #8]
    71e4:	781b      	ldrb	r3, [r3, #0]
    71e6:	4619      	mov	r1, r3
    71e8:	68f8      	ldr	r0, [r7, #12]
    71ea:	4b38      	ldr	r3, [pc, #224]	; (72cc <_sercom_i2c_sync_analyse_flags+0x21c>)
    71ec:	4798      	blx	r3
				msg->buffer++;
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	689b      	ldr	r3, [r3, #8]
    71f2:	1c5a      	adds	r2, r3, #1
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	609a      	str	r2, [r3, #8]
				msg->len--;
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	685b      	ldr	r3, [r3, #4]
    71fc:	1e5a      	subs	r2, r3, #1
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    7202:	2300      	movs	r3, #0
    7204:	e051      	b.n	72aa <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    7206:	68bb      	ldr	r3, [r7, #8]
    7208:	f003 0302 	and.w	r3, r3, #2
    720c:	2b00      	cmp	r3, #0
    720e:	d04b      	beq.n	72a8 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7210:	687b      	ldr	r3, [r7, #4]
    7212:	685b      	ldr	r3, [r3, #4]
    7214:	2b00      	cmp	r3, #0
    7216:	d041      	beq.n	729c <_sercom_i2c_sync_analyse_flags+0x1ec>
    7218:	8a7b      	ldrh	r3, [r7, #18]
    721a:	f003 0304 	and.w	r3, r3, #4
    721e:	2b00      	cmp	r3, #0
    7220:	d13c      	bne.n	729c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	685b      	ldr	r3, [r3, #4]
    7226:	1e5a      	subs	r2, r3, #1
    7228:	687b      	ldr	r3, [r7, #4]
    722a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	685b      	ldr	r3, [r3, #4]
    7230:	2b00      	cmp	r3, #0
    7232:	d102      	bne.n	723a <_sercom_i2c_sync_analyse_flags+0x18a>
    7234:	697b      	ldr	r3, [r7, #20]
    7236:	2b00      	cmp	r3, #0
    7238:	d006      	beq.n	7248 <_sercom_i2c_sync_analyse_flags+0x198>
    723a:	687b      	ldr	r3, [r7, #4]
    723c:	685b      	ldr	r3, [r3, #4]
    723e:	2b01      	cmp	r3, #1
    7240:	d105      	bne.n	724e <_sercom_i2c_sync_analyse_flags+0x19e>
    7242:	697b      	ldr	r3, [r7, #20]
    7244:	2b00      	cmp	r3, #0
    7246:	d002      	beq.n	724e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7248:	68f8      	ldr	r0, [r7, #12]
    724a:	4b21      	ldr	r3, [pc, #132]	; (72d0 <_sercom_i2c_sync_analyse_flags+0x220>)
    724c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	685b      	ldr	r3, [r3, #4]
    7252:	2b00      	cmp	r3, #0
    7254:	d113      	bne.n	727e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    7256:	687b      	ldr	r3, [r7, #4]
    7258:	885b      	ldrh	r3, [r3, #2]
    725a:	b29b      	uxth	r3, r3
    725c:	b21b      	sxth	r3, r3
    725e:	2b00      	cmp	r3, #0
    7260:	da05      	bge.n	726e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    7262:	68f8      	ldr	r0, [r7, #12]
    7264:	4b1b      	ldr	r3, [pc, #108]	; (72d4 <_sercom_i2c_sync_analyse_flags+0x224>)
    7266:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    7268:	68f8      	ldr	r0, [r7, #12]
    726a:	4b15      	ldr	r3, [pc, #84]	; (72c0 <_sercom_i2c_sync_analyse_flags+0x210>)
    726c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	885b      	ldrh	r3, [r3, #2]
    7272:	b29b      	uxth	r3, r3
    7274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7278:	b29a      	uxth	r2, r3
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    727e:	687b      	ldr	r3, [r7, #4]
    7280:	689c      	ldr	r4, [r3, #8]
    7282:	1c62      	adds	r2, r4, #1
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	609a      	str	r2, [r3, #8]
    7288:	68f8      	ldr	r0, [r7, #12]
    728a:	4b13      	ldr	r3, [pc, #76]	; (72d8 <_sercom_i2c_sync_analyse_flags+0x228>)
    728c:	4798      	blx	r3
    728e:	4603      	mov	r3, r0
    7290:	b2db      	uxtb	r3, r3
    7292:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7294:	68f8      	ldr	r0, [r7, #12]
    7296:	4b11      	ldr	r3, [pc, #68]	; (72dc <_sercom_i2c_sync_analyse_flags+0x22c>)
    7298:	4798      	blx	r3
    729a:	e005      	b.n	72a8 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    729c:	68f8      	ldr	r0, [r7, #12]
    729e:	4b0f      	ldr	r3, [pc, #60]	; (72dc <_sercom_i2c_sync_analyse_flags+0x22c>)
    72a0:	4798      	blx	r3
			return I2C_NACK;
    72a2:	f06f 0301 	mvn.w	r3, #1
    72a6:	e000      	b.n	72aa <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    72a8:	2300      	movs	r3, #0
}
    72aa:	4618      	mov	r0, r3
    72ac:	371c      	adds	r7, #28
    72ae:	46bd      	mov	sp, r7
    72b0:	bd90      	pop	{r4, r7, pc}
    72b2:	bf00      	nop
    72b4:	00006b75 	.word	0x00006b75
    72b8:	00006f85 	.word	0x00006f85
    72bc:	00006a75 	.word	0x00006a75
    72c0:	00007095 	.word	0x00007095
    72c4:	00006e65 	.word	0x00006e65
    72c8:	00006e41 	.word	0x00006e41
    72cc:	00006ea1 	.word	0x00006ea1
    72d0:	00006cfd 	.word	0x00006cfd
    72d4:	00006cd5 	.word	0x00006cd5
    72d8:	00006ec5 	.word	0x00006ec5
    72dc:	00006a8f 	.word	0x00006a8f

000072e0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    72e0:	b580      	push	{r7, lr}
    72e2:	b082      	sub	sp, #8
    72e4:	af00      	add	r7, sp, #0
    72e6:	6078      	str	r0, [r7, #4]
    72e8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	2b00      	cmp	r3, #0
    72ee:	bf14      	ite	ne
    72f0:	2301      	movne	r3, #1
    72f2:	2300      	moveq	r3, #0
    72f4:	b2db      	uxtb	r3, r3
    72f6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    72fa:	4908      	ldr	r1, [pc, #32]	; (731c <_i2c_m_sync_init+0x3c>)
    72fc:	4618      	mov	r0, r3
    72fe:	4b08      	ldr	r3, [pc, #32]	; (7320 <_i2c_m_sync_init+0x40>)
    7300:	4798      	blx	r3

	i2c_dev->hw = hw;
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	683a      	ldr	r2, [r7, #0]
    7306:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	6839      	ldr	r1, [r7, #0]
    730c:	4618      	mov	r0, r3
    730e:	4b05      	ldr	r3, [pc, #20]	; (7324 <_i2c_m_sync_init+0x44>)
    7310:	4798      	blx	r3
    7312:	4603      	mov	r3, r0
}
    7314:	4618      	mov	r0, r3
    7316:	3708      	adds	r7, #8
    7318:	46bd      	mov	sp, r7
    731a:	bd80      	pop	{r7, pc}
    731c:	00011180 	.word	0x00011180
    7320:	0000445d 	.word	0x0000445d
    7324:	000076f9 	.word	0x000076f9

00007328 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    7328:	b580      	push	{r7, lr}
    732a:	b082      	sub	sp, #8
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	2b00      	cmp	r3, #0
    7334:	bf14      	ite	ne
    7336:	2301      	movne	r3, #1
    7338:	2300      	moveq	r3, #0
    733a:	b2db      	uxtb	r3, r3
    733c:	f240 5235 	movw	r2, #1333	; 0x535
    7340:	4906      	ldr	r1, [pc, #24]	; (735c <_i2c_m_sync_enable+0x34>)
    7342:	4618      	mov	r0, r3
    7344:	4b06      	ldr	r3, [pc, #24]	; (7360 <_i2c_m_sync_enable+0x38>)
    7346:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	691b      	ldr	r3, [r3, #16]
    734c:	4618      	mov	r0, r3
    734e:	4b05      	ldr	r3, [pc, #20]	; (7364 <_i2c_m_sync_enable+0x3c>)
    7350:	4798      	blx	r3
    7352:	4603      	mov	r3, r0
}
    7354:	4618      	mov	r0, r3
    7356:	3708      	adds	r7, #8
    7358:	46bd      	mov	sp, r7
    735a:	bd80      	pop	{r7, pc}
    735c:	00011180 	.word	0x00011180
    7360:	0000445d 	.word	0x0000445d
    7364:	0000766d 	.word	0x0000766d

00007368 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    7368:	b580      	push	{r7, lr}
    736a:	b084      	sub	sp, #16
    736c:	af00      	add	r7, sp, #0
    736e:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	691b      	ldr	r3, [r3, #16]
    7374:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	2b00      	cmp	r3, #0
    737a:	bf14      	ite	ne
    737c:	2301      	movne	r3, #1
    737e:	2300      	moveq	r3, #0
    7380:	b2db      	uxtb	r3, r3
    7382:	f240 5243 	movw	r2, #1347	; 0x543
    7386:	490c      	ldr	r1, [pc, #48]	; (73b8 <_i2c_m_sync_disable+0x50>)
    7388:	4618      	mov	r0, r3
    738a:	4b0c      	ldr	r3, [pc, #48]	; (73bc <_i2c_m_sync_disable+0x54>)
    738c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    738e:	687b      	ldr	r3, [r7, #4]
    7390:	691b      	ldr	r3, [r3, #16]
    7392:	2b00      	cmp	r3, #0
    7394:	bf14      	ite	ne
    7396:	2301      	movne	r3, #1
    7398:	2300      	moveq	r3, #0
    739a:	b2db      	uxtb	r3, r3
    739c:	f240 5244 	movw	r2, #1348	; 0x544
    73a0:	4905      	ldr	r1, [pc, #20]	; (73b8 <_i2c_m_sync_disable+0x50>)
    73a2:	4618      	mov	r0, r3
    73a4:	4b05      	ldr	r3, [pc, #20]	; (73bc <_i2c_m_sync_disable+0x54>)
    73a6:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    73a8:	68f8      	ldr	r0, [r7, #12]
    73aa:	4b05      	ldr	r3, [pc, #20]	; (73c0 <_i2c_m_sync_disable+0x58>)
    73ac:	4798      	blx	r3

	return ERR_NONE;
    73ae:	2300      	movs	r3, #0
}
    73b0:	4618      	mov	r0, r3
    73b2:	3710      	adds	r7, #16
    73b4:	46bd      	mov	sp, r7
    73b6:	bd80      	pop	{r7, pc}
    73b8:	00011180 	.word	0x00011180
    73bc:	0000445d 	.word	0x0000445d
    73c0:	00006b4d 	.word	0x00006b4d

000073c4 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    73c4:	b580      	push	{r7, lr}
    73c6:	b084      	sub	sp, #16
    73c8:	af00      	add	r7, sp, #0
    73ca:	6078      	str	r0, [r7, #4]
    73cc:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    73ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    73d2:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    73d4:	687b      	ldr	r3, [r7, #4]
    73d6:	691b      	ldr	r3, [r3, #16]
    73d8:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    73da:	68b8      	ldr	r0, [r7, #8]
    73dc:	4b0f      	ldr	r3, [pc, #60]	; (741c <_sercom_i2c_sync_wait_bus+0x58>)
    73de:	4798      	blx	r3
    73e0:	4603      	mov	r3, r0
    73e2:	461a      	mov	r2, r3
    73e4:	683b      	ldr	r3, [r7, #0]
    73e6:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    73e8:	68fb      	ldr	r3, [r7, #12]
    73ea:	1e5a      	subs	r2, r3, #1
    73ec:	60fa      	str	r2, [r7, #12]
    73ee:	2b00      	cmp	r3, #0
    73f0:	d102      	bne.n	73f8 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    73f2:	f06f 0304 	mvn.w	r3, #4
    73f6:	e00c      	b.n	7412 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    73f8:	683b      	ldr	r3, [r7, #0]
    73fa:	681b      	ldr	r3, [r3, #0]
    73fc:	f003 0301 	and.w	r3, r3, #1
    7400:	2b00      	cmp	r3, #0
    7402:	d105      	bne.n	7410 <_sercom_i2c_sync_wait_bus+0x4c>
    7404:	683b      	ldr	r3, [r7, #0]
    7406:	681b      	ldr	r3, [r3, #0]
    7408:	f003 0302 	and.w	r3, r3, #2
    740c:	2b00      	cmp	r3, #0
    740e:	d0e4      	beq.n	73da <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    7410:	2300      	movs	r3, #0
}
    7412:	4618      	mov	r0, r3
    7414:	3710      	adds	r7, #16
    7416:	46bd      	mov	sp, r7
    7418:	bd80      	pop	{r7, pc}
    741a:	bf00      	nop
    741c:	00006aa9 	.word	0x00006aa9

00007420 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    7420:	b590      	push	{r4, r7, lr}
    7422:	b087      	sub	sp, #28
    7424:	af00      	add	r7, sp, #0
    7426:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    7428:	687b      	ldr	r3, [r7, #4]
    742a:	691b      	ldr	r3, [r3, #16]
    742c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    742e:	687b      	ldr	r3, [r7, #4]
    7430:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7432:	6978      	ldr	r0, [r7, #20]
    7434:	4b39      	ldr	r3, [pc, #228]	; (751c <_sercom_i2c_sync_send_address+0xfc>)
    7436:	4798      	blx	r3
    7438:	4603      	mov	r3, r0
    743a:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    743c:	687b      	ldr	r3, [r7, #4]
    743e:	2b00      	cmp	r3, #0
    7440:	bf14      	ite	ne
    7442:	2301      	movne	r3, #1
    7444:	2300      	moveq	r3, #0
    7446:	b2db      	uxtb	r3, r3
    7448:	f240 52a5 	movw	r2, #1445	; 0x5a5
    744c:	4934      	ldr	r1, [pc, #208]	; (7520 <_sercom_i2c_sync_send_address+0x100>)
    744e:	4618      	mov	r0, r3
    7450:	4b34      	ldr	r3, [pc, #208]	; (7524 <_sercom_i2c_sync_send_address+0x104>)
    7452:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7454:	693b      	ldr	r3, [r7, #16]
    7456:	685b      	ldr	r3, [r3, #4]
    7458:	2b01      	cmp	r3, #1
    745a:	d106      	bne.n	746a <_sercom_i2c_sync_send_address+0x4a>
    745c:	68fb      	ldr	r3, [r7, #12]
    745e:	2b00      	cmp	r3, #0
    7460:	d003      	beq.n	746a <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7462:	6978      	ldr	r0, [r7, #20]
    7464:	4b30      	ldr	r3, [pc, #192]	; (7528 <_sercom_i2c_sync_send_address+0x108>)
    7466:	4798      	blx	r3
    7468:	e002      	b.n	7470 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    746a:	6978      	ldr	r0, [r7, #20]
    746c:	4b2f      	ldr	r3, [pc, #188]	; (752c <_sercom_i2c_sync_send_address+0x10c>)
    746e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    7470:	693b      	ldr	r3, [r7, #16]
    7472:	881b      	ldrh	r3, [r3, #0]
    7474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7478:	2b00      	cmp	r3, #0
    747a:	d022      	beq.n	74c2 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    747c:	693b      	ldr	r3, [r7, #16]
    747e:	885b      	ldrh	r3, [r3, #2]
    7480:	b29b      	uxth	r3, r3
    7482:	f003 0301 	and.w	r3, r3, #1
    7486:	2b00      	cmp	r3, #0
    7488:	d007      	beq.n	749a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    748a:	693b      	ldr	r3, [r7, #16]
    748c:	885b      	ldrh	r3, [r3, #2]
    748e:	b29b      	uxth	r3, r3
    7490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7494:	b29a      	uxth	r2, r3
    7496:	693b      	ldr	r3, [r7, #16]
    7498:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    749a:	693b      	ldr	r3, [r7, #16]
    749c:	881b      	ldrh	r3, [r3, #0]
    749e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    74a0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    74a4:	401c      	ands	r4, r3
    74a6:	6978      	ldr	r0, [r7, #20]
    74a8:	4b21      	ldr	r3, [pc, #132]	; (7530 <_sercom_i2c_sync_send_address+0x110>)
    74aa:	4798      	blx	r3
    74ac:	4603      	mov	r3, r0
    74ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    74b2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    74b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    74b8:	4619      	mov	r1, r3
    74ba:	6978      	ldr	r0, [r7, #20]
    74bc:	4b1d      	ldr	r3, [pc, #116]	; (7534 <_sercom_i2c_sync_send_address+0x114>)
    74be:	4798      	blx	r3
    74c0:	e01a      	b.n	74f8 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    74c2:	693b      	ldr	r3, [r7, #16]
    74c4:	881b      	ldrh	r3, [r3, #0]
    74c6:	005b      	lsls	r3, r3, #1
    74c8:	b2db      	uxtb	r3, r3
    74ca:	693a      	ldr	r2, [r7, #16]
    74cc:	8852      	ldrh	r2, [r2, #2]
    74ce:	b292      	uxth	r2, r2
    74d0:	f002 0201 	and.w	r2, r2, #1
    74d4:	2a00      	cmp	r2, #0
    74d6:	bf14      	ite	ne
    74d8:	2201      	movne	r2, #1
    74da:	2200      	moveq	r2, #0
    74dc:	b2d2      	uxtb	r2, r2
    74de:	4313      	orrs	r3, r2
    74e0:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    74e2:	6978      	ldr	r0, [r7, #20]
    74e4:	4b12      	ldr	r3, [pc, #72]	; (7530 <_sercom_i2c_sync_send_address+0x110>)
    74e6:	4798      	blx	r3
    74e8:	4603      	mov	r3, r0
    74ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    74ee:	4323      	orrs	r3, r4
    74f0:	4619      	mov	r1, r3
    74f2:	6978      	ldr	r0, [r7, #20]
    74f4:	4b0f      	ldr	r3, [pc, #60]	; (7534 <_sercom_i2c_sync_send_address+0x114>)
    74f6:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    74f8:	f107 0308 	add.w	r3, r7, #8
    74fc:	4619      	mov	r1, r3
    74fe:	6878      	ldr	r0, [r7, #4]
    7500:	4b0d      	ldr	r3, [pc, #52]	; (7538 <_sercom_i2c_sync_send_address+0x118>)
    7502:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7504:	68bb      	ldr	r3, [r7, #8]
    7506:	693a      	ldr	r2, [r7, #16]
    7508:	4619      	mov	r1, r3
    750a:	6978      	ldr	r0, [r7, #20]
    750c:	4b0b      	ldr	r3, [pc, #44]	; (753c <_sercom_i2c_sync_send_address+0x11c>)
    750e:	4798      	blx	r3
    7510:	4603      	mov	r3, r0
}
    7512:	4618      	mov	r0, r3
    7514:	371c      	adds	r7, #28
    7516:	46bd      	mov	sp, r7
    7518:	bd90      	pop	{r4, r7, pc}
    751a:	bf00      	nop
    751c:	00006b75 	.word	0x00006b75
    7520:	00011180 	.word	0x00011180
    7524:	0000445d 	.word	0x0000445d
    7528:	00006cfd 	.word	0x00006cfd
    752c:	00006d25 	.word	0x00006d25
    7530:	00006e65 	.word	0x00006e65
    7534:	00006e41 	.word	0x00006e41
    7538:	000073c5 	.word	0x000073c5
    753c:	000070b1 	.word	0x000070b1

00007540 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    7540:	b580      	push	{r7, lr}
    7542:	b086      	sub	sp, #24
    7544:	af00      	add	r7, sp, #0
    7546:	6078      	str	r0, [r7, #4]
    7548:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	691b      	ldr	r3, [r3, #16]
    754e:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	2b00      	cmp	r3, #0
    7554:	bf14      	ite	ne
    7556:	2301      	movne	r3, #1
    7558:	2300      	moveq	r3, #0
    755a:	b2db      	uxtb	r3, r3
    755c:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    7560:	493b      	ldr	r1, [pc, #236]	; (7650 <_i2c_m_sync_transfer+0x110>)
    7562:	4618      	mov	r0, r3
    7564:	4b3b      	ldr	r3, [pc, #236]	; (7654 <_i2c_m_sync_transfer+0x114>)
    7566:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7568:	687b      	ldr	r3, [r7, #4]
    756a:	691b      	ldr	r3, [r3, #16]
    756c:	2b00      	cmp	r3, #0
    756e:	bf14      	ite	ne
    7570:	2301      	movne	r3, #1
    7572:	2300      	moveq	r3, #0
    7574:	b2db      	uxtb	r3, r3
    7576:	f240 52d1 	movw	r2, #1489	; 0x5d1
    757a:	4935      	ldr	r1, [pc, #212]	; (7650 <_i2c_m_sync_transfer+0x110>)
    757c:	4618      	mov	r0, r3
    757e:	4b35      	ldr	r3, [pc, #212]	; (7654 <_i2c_m_sync_transfer+0x114>)
    7580:	4798      	blx	r3
	ASSERT(msg);
    7582:	683b      	ldr	r3, [r7, #0]
    7584:	2b00      	cmp	r3, #0
    7586:	bf14      	ite	ne
    7588:	2301      	movne	r3, #1
    758a:	2300      	moveq	r3, #0
    758c:	b2db      	uxtb	r3, r3
    758e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    7592:	492f      	ldr	r1, [pc, #188]	; (7650 <_i2c_m_sync_transfer+0x110>)
    7594:	4618      	mov	r0, r3
    7596:	4b2f      	ldr	r3, [pc, #188]	; (7654 <_i2c_m_sync_transfer+0x114>)
    7598:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    759a:	687b      	ldr	r3, [r7, #4]
    759c:	885b      	ldrh	r3, [r3, #2]
    759e:	b29b      	uxth	r3, r3
    75a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    75a4:	2b00      	cmp	r3, #0
    75a6:	d002      	beq.n	75ae <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    75a8:	f06f 0305 	mvn.w	r3, #5
    75ac:	e04c      	b.n	7648 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    75ae:	683b      	ldr	r3, [r7, #0]
    75b0:	885b      	ldrh	r3, [r3, #2]
    75b2:	b29b      	uxth	r3, r3
    75b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    75b8:	b29a      	uxth	r2, r3
    75ba:	683b      	ldr	r3, [r7, #0]
    75bc:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	683a      	ldr	r2, [r7, #0]
    75c2:	ca07      	ldmia	r2, {r0, r1, r2}
    75c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    75c8:	6938      	ldr	r0, [r7, #16]
    75ca:	4b23      	ldr	r3, [pc, #140]	; (7658 <_i2c_m_sync_transfer+0x118>)
    75cc:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    75ce:	6878      	ldr	r0, [r7, #4]
    75d0:	4b22      	ldr	r3, [pc, #136]	; (765c <_i2c_m_sync_transfer+0x11c>)
    75d2:	4798      	blx	r3
    75d4:	6178      	str	r0, [r7, #20]

	if (ret) {
    75d6:	697b      	ldr	r3, [r7, #20]
    75d8:	2b00      	cmp	r3, #0
    75da:	d02d      	beq.n	7638 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	885b      	ldrh	r3, [r3, #2]
    75e0:	b29b      	uxth	r3, r3
    75e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    75e6:	b29a      	uxth	r2, r3
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	805a      	strh	r2, [r3, #2]

		return ret;
    75ec:	697b      	ldr	r3, [r7, #20]
    75ee:	e02b      	b.n	7648 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    75f0:	f107 030c 	add.w	r3, r7, #12
    75f4:	4619      	mov	r1, r3
    75f6:	6878      	ldr	r0, [r7, #4]
    75f8:	4b19      	ldr	r3, [pc, #100]	; (7660 <_i2c_m_sync_transfer+0x120>)
    75fa:	4798      	blx	r3
    75fc:	6178      	str	r0, [r7, #20]

		if (ret) {
    75fe:	697b      	ldr	r3, [r7, #20]
    7600:	2b00      	cmp	r3, #0
    7602:	d012      	beq.n	762a <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7604:	683b      	ldr	r3, [r7, #0]
    7606:	885b      	ldrh	r3, [r3, #2]
    7608:	b29b      	uxth	r3, r3
    760a:	b21b      	sxth	r3, r3
    760c:	2b00      	cmp	r3, #0
    760e:	da02      	bge.n	7616 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7610:	6938      	ldr	r0, [r7, #16]
    7612:	4b14      	ldr	r3, [pc, #80]	; (7664 <_i2c_m_sync_transfer+0x124>)
    7614:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7616:	687b      	ldr	r3, [r7, #4]
    7618:	885b      	ldrh	r3, [r3, #2]
    761a:	b29b      	uxth	r3, r3
    761c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7620:	b29a      	uxth	r2, r3
    7622:	687b      	ldr	r3, [r7, #4]
    7624:	805a      	strh	r2, [r3, #2]

			return ret;
    7626:	697b      	ldr	r3, [r7, #20]
    7628:	e00e      	b.n	7648 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    762a:	68fb      	ldr	r3, [r7, #12]
    762c:	687a      	ldr	r2, [r7, #4]
    762e:	4619      	mov	r1, r3
    7630:	6938      	ldr	r0, [r7, #16]
    7632:	4b0d      	ldr	r3, [pc, #52]	; (7668 <_i2c_m_sync_transfer+0x128>)
    7634:	4798      	blx	r3
    7636:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7638:	687b      	ldr	r3, [r7, #4]
    763a:	885b      	ldrh	r3, [r3, #2]
    763c:	b29b      	uxth	r3, r3
    763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7642:	2b00      	cmp	r3, #0
    7644:	d1d4      	bne.n	75f0 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    7646:	697b      	ldr	r3, [r7, #20]
}
    7648:	4618      	mov	r0, r3
    764a:	3718      	adds	r7, #24
    764c:	46bd      	mov	sp, r7
    764e:	bd80      	pop	{r7, pc}
    7650:	00011180 	.word	0x00011180
    7654:	0000445d 	.word	0x0000445d
    7658:	00006cad 	.word	0x00006cad
    765c:	00007421 	.word	0x00007421
    7660:	000073c5 	.word	0x000073c5
    7664:	00007095 	.word	0x00007095
    7668:	000070b1 	.word	0x000070b1

0000766c <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    766c:	b580      	push	{r7, lr}
    766e:	b084      	sub	sp, #16
    7670:	af00      	add	r7, sp, #0
    7672:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    7674:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7678:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    767a:	2304      	movs	r3, #4
    767c:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	2b00      	cmp	r3, #0
    7682:	bf14      	ite	ne
    7684:	2301      	movne	r3, #1
    7686:	2300      	moveq	r3, #0
    7688:	b2db      	uxtb	r3, r3
    768a:	f240 6205 	movw	r2, #1541	; 0x605
    768e:	4915      	ldr	r1, [pc, #84]	; (76e4 <_i2c_m_enable_implementation+0x78>)
    7690:	4618      	mov	r0, r3
    7692:	4b15      	ldr	r3, [pc, #84]	; (76e8 <_i2c_m_enable_implementation+0x7c>)
    7694:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    7696:	6878      	ldr	r0, [r7, #4]
    7698:	4b14      	ldr	r3, [pc, #80]	; (76ec <_i2c_m_enable_implementation+0x80>)
    769a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    769c:	e016      	b.n	76cc <_i2c_m_enable_implementation+0x60>
		timeout--;
    769e:	68fb      	ldr	r3, [r7, #12]
    76a0:	3b01      	subs	r3, #1
    76a2:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    76a4:	68fb      	ldr	r3, [r7, #12]
    76a6:	2b00      	cmp	r3, #0
    76a8:	dc10      	bgt.n	76cc <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    76aa:	68bb      	ldr	r3, [r7, #8]
    76ac:	3b01      	subs	r3, #1
    76ae:	60bb      	str	r3, [r7, #8]
    76b0:	68bb      	ldr	r3, [r7, #8]
    76b2:	2b00      	cmp	r3, #0
    76b4:	d007      	beq.n	76c6 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    76b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    76ba:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    76bc:	2110      	movs	r1, #16
    76be:	6878      	ldr	r0, [r7, #4]
    76c0:	4b0b      	ldr	r3, [pc, #44]	; (76f0 <_i2c_m_enable_implementation+0x84>)
    76c2:	4798      	blx	r3
    76c4:	e002      	b.n	76cc <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    76c6:	f06f 0305 	mvn.w	r3, #5
    76ca:	e006      	b.n	76da <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    76cc:	6878      	ldr	r0, [r7, #4]
    76ce:	4b09      	ldr	r3, [pc, #36]	; (76f4 <_i2c_m_enable_implementation+0x88>)
    76d0:	4798      	blx	r3
    76d2:	4603      	mov	r3, r0
    76d4:	2b01      	cmp	r3, #1
    76d6:	d1e2      	bne.n	769e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    76d8:	2300      	movs	r3, #0
}
    76da:	4618      	mov	r0, r3
    76dc:	3710      	adds	r7, #16
    76de:	46bd      	mov	sp, r7
    76e0:	bd80      	pop	{r7, pc}
    76e2:	bf00      	nop
    76e4:	00011180 	.word	0x00011180
    76e8:	0000445d 	.word	0x0000445d
    76ec:	00006b25 	.word	0x00006b25
    76f0:	00006fa9 	.word	0x00006fa9
    76f4:	00006f59 	.word	0x00006f59

000076f8 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    76f8:	b580      	push	{r7, lr}
    76fa:	b084      	sub	sp, #16
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
    7700:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7702:	6838      	ldr	r0, [r7, #0]
    7704:	4b42      	ldr	r3, [pc, #264]	; (7810 <_i2c_m_sync_init_impl+0x118>)
    7706:	4798      	blx	r3
    7708:	4603      	mov	r3, r0
    770a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    770c:	2101      	movs	r1, #1
    770e:	6838      	ldr	r0, [r7, #0]
    7710:	4b40      	ldr	r3, [pc, #256]	; (7814 <_i2c_m_sync_init_impl+0x11c>)
    7712:	4798      	blx	r3
    7714:	4603      	mov	r3, r0
    7716:	f083 0301 	eor.w	r3, r3, #1
    771a:	b2db      	uxtb	r3, r3
    771c:	2b00      	cmp	r3, #0
    771e:	d020      	beq.n	7762 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7720:	7bfa      	ldrb	r2, [r7, #15]
    7722:	493d      	ldr	r1, [pc, #244]	; (7818 <_i2c_m_sync_init_impl+0x120>)
    7724:	4613      	mov	r3, r2
    7726:	005b      	lsls	r3, r3, #1
    7728:	4413      	add	r3, r2
    772a:	00db      	lsls	r3, r3, #3
    772c:	440b      	add	r3, r1
    772e:	3304      	adds	r3, #4
    7730:	681b      	ldr	r3, [r3, #0]
    7732:	f003 031c 	and.w	r3, r3, #28
    7736:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7738:	2102      	movs	r1, #2
    773a:	6838      	ldr	r0, [r7, #0]
    773c:	4b37      	ldr	r3, [pc, #220]	; (781c <_i2c_m_sync_init_impl+0x124>)
    773e:	4798      	blx	r3
    7740:	4603      	mov	r3, r0
    7742:	2b00      	cmp	r3, #0
    7744:	d006      	beq.n	7754 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    7746:	6838      	ldr	r0, [r7, #0]
    7748:	4b35      	ldr	r3, [pc, #212]	; (7820 <_i2c_m_sync_init_impl+0x128>)
    774a:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    774c:	2102      	movs	r1, #2
    774e:	6838      	ldr	r0, [r7, #0]
    7750:	4b34      	ldr	r3, [pc, #208]	; (7824 <_i2c_m_sync_init_impl+0x12c>)
    7752:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7754:	68bb      	ldr	r3, [r7, #8]
    7756:	f043 0301 	orr.w	r3, r3, #1
    775a:	4619      	mov	r1, r3
    775c:	6838      	ldr	r0, [r7, #0]
    775e:	4b32      	ldr	r3, [pc, #200]	; (7828 <_i2c_m_sync_init_impl+0x130>)
    7760:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    7762:	2101      	movs	r1, #1
    7764:	6838      	ldr	r0, [r7, #0]
    7766:	4b2f      	ldr	r3, [pc, #188]	; (7824 <_i2c_m_sync_init_impl+0x12c>)
    7768:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    776a:	7bfa      	ldrb	r2, [r7, #15]
    776c:	492a      	ldr	r1, [pc, #168]	; (7818 <_i2c_m_sync_init_impl+0x120>)
    776e:	4613      	mov	r3, r2
    7770:	005b      	lsls	r3, r3, #1
    7772:	4413      	add	r3, r2
    7774:	00db      	lsls	r3, r3, #3
    7776:	440b      	add	r3, r1
    7778:	3304      	adds	r3, #4
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	4619      	mov	r1, r3
    777e:	6838      	ldr	r0, [r7, #0]
    7780:	4b29      	ldr	r3, [pc, #164]	; (7828 <_i2c_m_sync_init_impl+0x130>)
    7782:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7784:	7bfa      	ldrb	r2, [r7, #15]
    7786:	4924      	ldr	r1, [pc, #144]	; (7818 <_i2c_m_sync_init_impl+0x120>)
    7788:	4613      	mov	r3, r2
    778a:	005b      	lsls	r3, r3, #1
    778c:	4413      	add	r3, r2
    778e:	00db      	lsls	r3, r3, #3
    7790:	440b      	add	r3, r1
    7792:	3308      	adds	r3, #8
    7794:	681b      	ldr	r3, [r3, #0]
    7796:	4619      	mov	r1, r3
    7798:	6838      	ldr	r0, [r7, #0]
    779a:	4b24      	ldr	r3, [pc, #144]	; (782c <_i2c_m_sync_init_impl+0x134>)
    779c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    779e:	7bfa      	ldrb	r2, [r7, #15]
    77a0:	491d      	ldr	r1, [pc, #116]	; (7818 <_i2c_m_sync_init_impl+0x120>)
    77a2:	4613      	mov	r3, r2
    77a4:	005b      	lsls	r3, r3, #1
    77a6:	4413      	add	r3, r2
    77a8:	00db      	lsls	r3, r3, #3
    77aa:	440b      	add	r3, r1
    77ac:	330c      	adds	r3, #12
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	4619      	mov	r1, r3
    77b2:	6838      	ldr	r0, [r7, #0]
    77b4:	4b1e      	ldr	r3, [pc, #120]	; (7830 <_i2c_m_sync_init_impl+0x138>)
    77b6:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    77b8:	7bfa      	ldrb	r2, [r7, #15]
    77ba:	4917      	ldr	r1, [pc, #92]	; (7818 <_i2c_m_sync_init_impl+0x120>)
    77bc:	4613      	mov	r3, r2
    77be:	005b      	lsls	r3, r3, #1
    77c0:	4413      	add	r3, r2
    77c2:	00db      	lsls	r3, r3, #3
    77c4:	440b      	add	r3, r1
    77c6:	3304      	adds	r3, #4
    77c8:	681b      	ldr	r3, [r3, #0]
    77ca:	0e1b      	lsrs	r3, r3, #24
    77cc:	b29b      	uxth	r3, r3
    77ce:	f003 0303 	and.w	r3, r3, #3
    77d2:	b29a      	uxth	r2, r3
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	899b      	ldrh	r3, [r3, #12]
    77dc:	2b01      	cmp	r3, #1
    77de:	bf8c      	ite	hi
    77e0:	2301      	movhi	r3, #1
    77e2:	2300      	movls	r3, #0
    77e4:	b2db      	uxtb	r3, r3
    77e6:	4619      	mov	r1, r3
    77e8:	6838      	ldr	r0, [r7, #0]
    77ea:	4b12      	ldr	r3, [pc, #72]	; (7834 <_i2c_m_sync_init_impl+0x13c>)
    77ec:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    77ee:	7bfa      	ldrb	r2, [r7, #15]
    77f0:	4909      	ldr	r1, [pc, #36]	; (7818 <_i2c_m_sync_init_impl+0x120>)
    77f2:	4613      	mov	r3, r2
    77f4:	005b      	lsls	r3, r3, #1
    77f6:	4413      	add	r3, r2
    77f8:	00db      	lsls	r3, r3, #3
    77fa:	440b      	add	r3, r1
    77fc:	3312      	adds	r3, #18
    77fe:	881a      	ldrh	r2, [r3, #0]
    7800:	687b      	ldr	r3, [r7, #4]
    7802:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7804:	2300      	movs	r3, #0
}
    7806:	4618      	mov	r0, r3
    7808:	3710      	adds	r7, #16
    780a:	46bd      	mov	sp, r7
    780c:	bd80      	pop	{r7, pc}
    780e:	bf00      	nop
    7810:	0000702d 	.word	0x0000702d
    7814:	00006a01 	.word	0x00006a01
    7818:	20000018 	.word	0x20000018
    781c:	00006ba5 	.word	0x00006ba5
    7820:	00006b4d 	.word	0x00006b4d
    7824:	000069dd 	.word	0x000069dd
    7828:	00006bd5 	.word	0x00006bd5
    782c:	00006d7d 	.word	0x00006d7d
    7830:	00006dc5 	.word	0x00006dc5
    7834:	00006e01 	.word	0x00006e01

00007838 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7838:	b580      	push	{r7, lr}
    783a:	b082      	sub	sp, #8
    783c:	af00      	add	r7, sp, #0
    783e:	6078      	str	r0, [r7, #4]
    7840:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	2b00      	cmp	r3, #0
    7846:	d004      	beq.n	7852 <_spi_load_regs_master+0x1a>
    7848:	683b      	ldr	r3, [r7, #0]
    784a:	2b00      	cmp	r3, #0
    784c:	d001      	beq.n	7852 <_spi_load_regs_master+0x1a>
    784e:	2301      	movs	r3, #1
    7850:	e000      	b.n	7854 <_spi_load_regs_master+0x1c>
    7852:	2300      	movs	r3, #0
    7854:	f003 0301 	and.w	r3, r3, #1
    7858:	b2db      	uxtb	r3, r3
    785a:	f640 1209 	movw	r2, #2313	; 0x909
    785e:	4915      	ldr	r1, [pc, #84]	; (78b4 <_spi_load_regs_master+0x7c>)
    7860:	4618      	mov	r0, r3
    7862:	4b15      	ldr	r3, [pc, #84]	; (78b8 <_spi_load_regs_master+0x80>)
    7864:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7866:	683b      	ldr	r3, [r7, #0]
    7868:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    786a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    786e:	f023 0301 	bic.w	r3, r3, #1
    7872:	4619      	mov	r1, r3
    7874:	6878      	ldr	r0, [r7, #4]
    7876:	4b11      	ldr	r3, [pc, #68]	; (78bc <_spi_load_regs_master+0x84>)
    7878:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    787a:	683b      	ldr	r3, [r7, #0]
    787c:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    787e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7882:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    788a:	4619      	mov	r1, r3
    788c:	6878      	ldr	r0, [r7, #4]
    788e:	4b0c      	ldr	r3, [pc, #48]	; (78c0 <_spi_load_regs_master+0x88>)
    7890:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7892:	683b      	ldr	r3, [r7, #0]
    7894:	7b1b      	ldrb	r3, [r3, #12]
    7896:	4619      	mov	r1, r3
    7898:	6878      	ldr	r0, [r7, #4]
    789a:	4b0a      	ldr	r3, [pc, #40]	; (78c4 <_spi_load_regs_master+0x8c>)
    789c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    789e:	683b      	ldr	r3, [r7, #0]
    78a0:	7b5b      	ldrb	r3, [r3, #13]
    78a2:	4619      	mov	r1, r3
    78a4:	6878      	ldr	r0, [r7, #4]
    78a6:	4b08      	ldr	r3, [pc, #32]	; (78c8 <_spi_load_regs_master+0x90>)
    78a8:	4798      	blx	r3
}
    78aa:	bf00      	nop
    78ac:	3708      	adds	r7, #8
    78ae:	46bd      	mov	sp, r7
    78b0:	bd80      	pop	{r7, pc}
    78b2:	bf00      	nop
    78b4:	00011180 	.word	0x00011180
    78b8:	0000445d 	.word	0x0000445d
    78bc:	00006c89 	.word	0x00006c89
    78c0:	00006da1 	.word	0x00006da1
    78c4:	00006de1 	.word	0x00006de1
    78c8:	00006f19 	.word	0x00006f19

000078cc <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b082      	sub	sp, #8
    78d0:	af00      	add	r7, sp, #0
    78d2:	6078      	str	r0, [r7, #4]
    78d4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    78d6:	687b      	ldr	r3, [r7, #4]
    78d8:	2b00      	cmp	r3, #0
    78da:	d004      	beq.n	78e6 <_spi_load_regs_slave+0x1a>
    78dc:	683b      	ldr	r3, [r7, #0]
    78de:	2b00      	cmp	r3, #0
    78e0:	d001      	beq.n	78e6 <_spi_load_regs_slave+0x1a>
    78e2:	2301      	movs	r3, #1
    78e4:	e000      	b.n	78e8 <_spi_load_regs_slave+0x1c>
    78e6:	2300      	movs	r3, #0
    78e8:	f003 0301 	and.w	r3, r3, #1
    78ec:	b2db      	uxtb	r3, r3
    78ee:	f640 121d 	movw	r2, #2333	; 0x91d
    78f2:	491a      	ldr	r1, [pc, #104]	; (795c <_spi_load_regs_slave+0x90>)
    78f4:	4618      	mov	r0, r3
    78f6:	4b1a      	ldr	r3, [pc, #104]	; (7960 <_spi_load_regs_slave+0x94>)
    78f8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    78fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7902:	f023 0301 	bic.w	r3, r3, #1
    7906:	4619      	mov	r1, r3
    7908:	6878      	ldr	r0, [r7, #4]
    790a:	4b16      	ldr	r3, [pc, #88]	; (7964 <_spi_load_regs_slave+0x98>)
    790c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    790e:	683b      	ldr	r3, [r7, #0]
    7910:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7912:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7916:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    791a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    791e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    7922:	4619      	mov	r1, r3
    7924:	6878      	ldr	r0, [r7, #4]
    7926:	4b10      	ldr	r3, [pc, #64]	; (7968 <_spi_load_regs_slave+0x9c>)
    7928:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    792a:	683b      	ldr	r3, [r7, #0]
    792c:	689b      	ldr	r3, [r3, #8]
    792e:	4619      	mov	r1, r3
    7930:	6878      	ldr	r0, [r7, #4]
    7932:	4b0e      	ldr	r3, [pc, #56]	; (796c <_spi_load_regs_slave+0xa0>)
    7934:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7936:	683b      	ldr	r3, [r7, #0]
    7938:	7b5b      	ldrb	r3, [r3, #13]
    793a:	4619      	mov	r1, r3
    793c:	6878      	ldr	r0, [r7, #4]
    793e:	4b0c      	ldr	r3, [pc, #48]	; (7970 <_spi_load_regs_slave+0xa4>)
    7940:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7942:	bf00      	nop
    7944:	f04f 31ff 	mov.w	r1, #4294967295
    7948:	6878      	ldr	r0, [r7, #4]
    794a:	4b0a      	ldr	r3, [pc, #40]	; (7974 <_spi_load_regs_slave+0xa8>)
    794c:	4798      	blx	r3
    794e:	4603      	mov	r3, r0
    7950:	2b00      	cmp	r3, #0
    7952:	d1f7      	bne.n	7944 <_spi_load_regs_slave+0x78>
		;
}
    7954:	bf00      	nop
    7956:	3708      	adds	r7, #8
    7958:	46bd      	mov	sp, r7
    795a:	bd80      	pop	{r7, pc}
    795c:	00011180 	.word	0x00011180
    7960:	0000445d 	.word	0x0000445d
    7964:	00006c89 	.word	0x00006c89
    7968:	00006da1 	.word	0x00006da1
    796c:	00006e85 	.word	0x00006e85
    7970:	00006f19 	.word	0x00006f19
    7974:	00006a4d 	.word	0x00006a4d

00007978 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7978:	b580      	push	{r7, lr}
    797a:	b084      	sub	sp, #16
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	4618      	mov	r0, r3
    7984:	4b11      	ldr	r3, [pc, #68]	; (79cc <_spi_get_regs+0x54>)
    7986:	4798      	blx	r3
    7988:	4603      	mov	r3, r0
    798a:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    798c:	2300      	movs	r3, #0
    798e:	73fb      	strb	r3, [r7, #15]
    7990:	e014      	b.n	79bc <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    7992:	7bfa      	ldrb	r2, [r7, #15]
    7994:	490e      	ldr	r1, [pc, #56]	; (79d0 <_spi_get_regs+0x58>)
    7996:	4613      	mov	r3, r2
    7998:	011b      	lsls	r3, r3, #4
    799a:	4413      	add	r3, r2
    799c:	440b      	add	r3, r1
    799e:	3310      	adds	r3, #16
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	7bba      	ldrb	r2, [r7, #14]
    79a4:	429a      	cmp	r2, r3
    79a6:	d106      	bne.n	79b6 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    79a8:	7bfa      	ldrb	r2, [r7, #15]
    79aa:	4613      	mov	r3, r2
    79ac:	011b      	lsls	r3, r3, #4
    79ae:	4413      	add	r3, r2
    79b0:	4a07      	ldr	r2, [pc, #28]	; (79d0 <_spi_get_regs+0x58>)
    79b2:	4413      	add	r3, r2
    79b4:	e006      	b.n	79c4 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    79b6:	7bfb      	ldrb	r3, [r7, #15]
    79b8:	3301      	adds	r3, #1
    79ba:	73fb      	strb	r3, [r7, #15]
    79bc:	7bfb      	ldrb	r3, [r7, #15]
    79be:	2b01      	cmp	r3, #1
    79c0:	d9e7      	bls.n	7992 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    79c2:	2300      	movs	r3, #0
}
    79c4:	4618      	mov	r0, r3
    79c6:	3710      	adds	r7, #16
    79c8:	46bd      	mov	sp, r7
    79ca:	bd80      	pop	{r7, pc}
    79cc:	00006fd1 	.word	0x00006fd1
    79d0:	000111bc 	.word	0x000111bc

000079d4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    79d4:	b580      	push	{r7, lr}
    79d6:	b084      	sub	sp, #16
    79d8:	af00      	add	r7, sp, #0
    79da:	6078      	str	r0, [r7, #4]
    79dc:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    79de:	683b      	ldr	r3, [r7, #0]
    79e0:	4618      	mov	r0, r3
    79e2:	4b35      	ldr	r3, [pc, #212]	; (7ab8 <_spi_m_sync_init+0xe4>)
    79e4:	4798      	blx	r3
    79e6:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    79e8:	687b      	ldr	r3, [r7, #4]
    79ea:	2b00      	cmp	r3, #0
    79ec:	d004      	beq.n	79f8 <_spi_m_sync_init+0x24>
    79ee:	683b      	ldr	r3, [r7, #0]
    79f0:	2b00      	cmp	r3, #0
    79f2:	d001      	beq.n	79f8 <_spi_m_sync_init+0x24>
    79f4:	2301      	movs	r3, #1
    79f6:	e000      	b.n	79fa <_spi_m_sync_init+0x26>
    79f8:	2300      	movs	r3, #0
    79fa:	f003 0301 	and.w	r3, r3, #1
    79fe:	b2db      	uxtb	r3, r3
    7a00:	f640 123f 	movw	r2, #2367	; 0x93f
    7a04:	492d      	ldr	r1, [pc, #180]	; (7abc <_spi_m_sync_init+0xe8>)
    7a06:	4618      	mov	r0, r3
    7a08:	4b2d      	ldr	r3, [pc, #180]	; (7ac0 <_spi_m_sync_init+0xec>)
    7a0a:	4798      	blx	r3

	if (regs == NULL) {
    7a0c:	68fb      	ldr	r3, [r7, #12]
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d102      	bne.n	7a18 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7a12:	f06f 030c 	mvn.w	r3, #12
    7a16:	e04a      	b.n	7aae <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7a18:	2101      	movs	r1, #1
    7a1a:	6838      	ldr	r0, [r7, #0]
    7a1c:	4b29      	ldr	r3, [pc, #164]	; (7ac4 <_spi_m_sync_init+0xf0>)
    7a1e:	4798      	blx	r3
    7a20:	4603      	mov	r3, r0
    7a22:	f083 0301 	eor.w	r3, r3, #1
    7a26:	b2db      	uxtb	r3, r3
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d019      	beq.n	7a60 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7a2c:	68fb      	ldr	r3, [r7, #12]
    7a2e:	681b      	ldr	r3, [r3, #0]
    7a30:	f003 031c 	and.w	r3, r3, #28
    7a34:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7a36:	2102      	movs	r1, #2
    7a38:	6838      	ldr	r0, [r7, #0]
    7a3a:	4b23      	ldr	r3, [pc, #140]	; (7ac8 <_spi_m_sync_init+0xf4>)
    7a3c:	4798      	blx	r3
    7a3e:	4603      	mov	r3, r0
    7a40:	2b00      	cmp	r3, #0
    7a42:	d006      	beq.n	7a52 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7a44:	6838      	ldr	r0, [r7, #0]
    7a46:	4b21      	ldr	r3, [pc, #132]	; (7acc <_spi_m_sync_init+0xf8>)
    7a48:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7a4a:	2102      	movs	r1, #2
    7a4c:	6838      	ldr	r0, [r7, #0]
    7a4e:	4b20      	ldr	r3, [pc, #128]	; (7ad0 <_spi_m_sync_init+0xfc>)
    7a50:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7a52:	68bb      	ldr	r3, [r7, #8]
    7a54:	f043 0301 	orr.w	r3, r3, #1
    7a58:	4619      	mov	r1, r3
    7a5a:	6838      	ldr	r0, [r7, #0]
    7a5c:	4b1d      	ldr	r3, [pc, #116]	; (7ad4 <_spi_m_sync_init+0x100>)
    7a5e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7a60:	2101      	movs	r1, #1
    7a62:	6838      	ldr	r0, [r7, #0]
    7a64:	4b1a      	ldr	r3, [pc, #104]	; (7ad0 <_spi_m_sync_init+0xfc>)
    7a66:	4798      	blx	r3

	dev->prvt = hw;
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	683a      	ldr	r2, [r7, #0]
    7a6c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7a6e:	68fb      	ldr	r3, [r7, #12]
    7a70:	681b      	ldr	r3, [r3, #0]
    7a72:	f003 031c 	and.w	r3, r3, #28
    7a76:	2b08      	cmp	r3, #8
    7a78:	d104      	bne.n	7a84 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7a7a:	68f9      	ldr	r1, [r7, #12]
    7a7c:	6838      	ldr	r0, [r7, #0]
    7a7e:	4b16      	ldr	r3, [pc, #88]	; (7ad8 <_spi_m_sync_init+0x104>)
    7a80:	4798      	blx	r3
    7a82:	e003      	b.n	7a8c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7a84:	68f9      	ldr	r1, [r7, #12]
    7a86:	6838      	ldr	r0, [r7, #0]
    7a88:	4b14      	ldr	r3, [pc, #80]	; (7adc <_spi_m_sync_init+0x108>)
    7a8a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7a8c:	68fb      	ldr	r3, [r7, #12]
    7a8e:	685b      	ldr	r3, [r3, #4]
    7a90:	f003 0307 	and.w	r3, r3, #7
    7a94:	2b00      	cmp	r3, #0
    7a96:	d101      	bne.n	7a9c <_spi_m_sync_init+0xc8>
    7a98:	2201      	movs	r2, #1
    7a9a:	e000      	b.n	7a9e <_spi_m_sync_init+0xca>
    7a9c:	2202      	movs	r2, #2
    7a9e:	687b      	ldr	r3, [r7, #4]
    7aa0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7aa2:	68fb      	ldr	r3, [r7, #12]
    7aa4:	89db      	ldrh	r3, [r3, #14]
    7aa6:	b29a      	uxth	r2, r3
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7aac:	2300      	movs	r3, #0
}
    7aae:	4618      	mov	r0, r3
    7ab0:	3710      	adds	r7, #16
    7ab2:	46bd      	mov	sp, r7
    7ab4:	bd80      	pop	{r7, pc}
    7ab6:	bf00      	nop
    7ab8:	00007979 	.word	0x00007979
    7abc:	00011180 	.word	0x00011180
    7ac0:	0000445d 	.word	0x0000445d
    7ac4:	00006a4d 	.word	0x00006a4d
    7ac8:	00006c59 	.word	0x00006c59
    7acc:	00006c31 	.word	0x00006c31
    7ad0:	00006a29 	.word	0x00006a29
    7ad4:	00006c89 	.word	0x00006c89
    7ad8:	000078cd 	.word	0x000078cd
    7adc:	00007839 	.word	0x00007839

00007ae0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7ae0:	b580      	push	{r7, lr}
    7ae2:	b082      	sub	sp, #8
    7ae4:	af00      	add	r7, sp, #0
    7ae6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7ae8:	bf00      	nop
    7aea:	2103      	movs	r1, #3
    7aec:	6878      	ldr	r0, [r7, #4]
    7aee:	4b06      	ldr	r3, [pc, #24]	; (7b08 <_spi_wait_bus_idle+0x28>)
    7af0:	4798      	blx	r3
    7af2:	4603      	mov	r3, r0
    7af4:	2b00      	cmp	r3, #0
    7af6:	d0f8      	beq.n	7aea <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7af8:	2103      	movs	r1, #3
    7afa:	6878      	ldr	r0, [r7, #4]
    7afc:	4b03      	ldr	r3, [pc, #12]	; (7b0c <_spi_wait_bus_idle+0x2c>)
    7afe:	4798      	blx	r3
}
    7b00:	bf00      	nop
    7b02:	3708      	adds	r7, #8
    7b04:	46bd      	mov	sp, r7
    7b06:	bd80      	pop	{r7, pc}
    7b08:	00006ac3 	.word	0x00006ac3
    7b0c:	00006b05 	.word	0x00006b05

00007b10 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7b10:	b580      	push	{r7, lr}
    7b12:	b086      	sub	sp, #24
    7b14:	af00      	add	r7, sp, #0
    7b16:	60f8      	str	r0, [r7, #12]
    7b18:	60b9      	str	r1, [r7, #8]
    7b1a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7b1c:	68bb      	ldr	r3, [r7, #8]
    7b1e:	f003 0304 	and.w	r3, r3, #4
    7b22:	2b00      	cmp	r3, #0
    7b24:	d101      	bne.n	7b2a <_spi_rx_check_and_receive+0x1a>
		return false;
    7b26:	2300      	movs	r3, #0
    7b28:	e022      	b.n	7b70 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7b2a:	68f8      	ldr	r0, [r7, #12]
    7b2c:	4b12      	ldr	r3, [pc, #72]	; (7b78 <_spi_rx_check_and_receive+0x68>)
    7b2e:	4798      	blx	r3
    7b30:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	685b      	ldr	r3, [r3, #4]
    7b36:	2b00      	cmp	r3, #0
    7b38:	d014      	beq.n	7b64 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7b3a:	687b      	ldr	r3, [r7, #4]
    7b3c:	685b      	ldr	r3, [r3, #4]
    7b3e:	1c59      	adds	r1, r3, #1
    7b40:	687a      	ldr	r2, [r7, #4]
    7b42:	6051      	str	r1, [r2, #4]
    7b44:	697a      	ldr	r2, [r7, #20]
    7b46:	b2d2      	uxtb	r2, r2
    7b48:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7b4a:	687b      	ldr	r3, [r7, #4]
    7b4c:	7c1b      	ldrb	r3, [r3, #16]
    7b4e:	2b01      	cmp	r3, #1
    7b50:	d908      	bls.n	7b64 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	685b      	ldr	r3, [r3, #4]
    7b56:	1c59      	adds	r1, r3, #1
    7b58:	687a      	ldr	r2, [r7, #4]
    7b5a:	6051      	str	r1, [r2, #4]
    7b5c:	697a      	ldr	r2, [r7, #20]
    7b5e:	0a12      	lsrs	r2, r2, #8
    7b60:	b2d2      	uxtb	r2, r2
    7b62:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7b64:	687b      	ldr	r3, [r7, #4]
    7b66:	68db      	ldr	r3, [r3, #12]
    7b68:	1c5a      	adds	r2, r3, #1
    7b6a:	687b      	ldr	r3, [r7, #4]
    7b6c:	60da      	str	r2, [r3, #12]

	return true;
    7b6e:	2301      	movs	r3, #1
}
    7b70:	4618      	mov	r0, r3
    7b72:	3718      	adds	r7, #24
    7b74:	46bd      	mov	sp, r7
    7b76:	bd80      	pop	{r7, pc}
    7b78:	00006f01 	.word	0x00006f01

00007b7c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7b7c:	b580      	push	{r7, lr}
    7b7e:	b086      	sub	sp, #24
    7b80:	af00      	add	r7, sp, #0
    7b82:	60f8      	str	r0, [r7, #12]
    7b84:	60b9      	str	r1, [r7, #8]
    7b86:	607a      	str	r2, [r7, #4]
    7b88:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7b8a:	68bb      	ldr	r3, [r7, #8]
    7b8c:	f003 0301 	and.w	r3, r3, #1
    7b90:	2b00      	cmp	r3, #0
    7b92:	d028      	beq.n	7be6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7b94:	687b      	ldr	r3, [r7, #4]
    7b96:	681b      	ldr	r3, [r3, #0]
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d018      	beq.n	7bce <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7b9c:	687b      	ldr	r3, [r7, #4]
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	1c59      	adds	r1, r3, #1
    7ba2:	687a      	ldr	r2, [r7, #4]
    7ba4:	6011      	str	r1, [r2, #0]
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	7c1b      	ldrb	r3, [r3, #16]
    7bae:	2b01      	cmp	r3, #1
    7bb0:	d90f      	bls.n	7bd2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	681b      	ldr	r3, [r3, #0]
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	021b      	lsls	r3, r3, #8
    7bba:	461a      	mov	r2, r3
    7bbc:	697b      	ldr	r3, [r7, #20]
    7bbe:	4313      	orrs	r3, r2
    7bc0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	681b      	ldr	r3, [r3, #0]
    7bc6:	1c5a      	adds	r2, r3, #1
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	601a      	str	r2, [r3, #0]
    7bcc:	e001      	b.n	7bd2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7bce:	887b      	ldrh	r3, [r7, #2]
    7bd0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7bd2:	687b      	ldr	r3, [r7, #4]
    7bd4:	689b      	ldr	r3, [r3, #8]
    7bd6:	1c5a      	adds	r2, r3, #1
    7bd8:	687b      	ldr	r3, [r7, #4]
    7bda:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7bdc:	6979      	ldr	r1, [r7, #20]
    7bde:	68f8      	ldr	r0, [r7, #12]
    7be0:	4b03      	ldr	r3, [pc, #12]	; (7bf0 <_spi_tx_check_and_send+0x74>)
    7be2:	4798      	blx	r3
    7be4:	e000      	b.n	7be8 <_spi_tx_check_and_send+0x6c>
		return;
    7be6:	bf00      	nop
}
    7be8:	3718      	adds	r7, #24
    7bea:	46bd      	mov	sp, r7
    7bec:	bd80      	pop	{r7, pc}
    7bee:	bf00      	nop
    7bf0:	00006ee5 	.word	0x00006ee5

00007bf4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7bf4:	b580      	push	{r7, lr}
    7bf6:	b082      	sub	sp, #8
    7bf8:	af00      	add	r7, sp, #0
    7bfa:	6078      	str	r0, [r7, #4]
    7bfc:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7bfe:	687b      	ldr	r3, [r7, #4]
    7c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7c04:	2b00      	cmp	r3, #0
    7c06:	d00b      	beq.n	7c20 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7c0c:	6838      	ldr	r0, [r7, #0]
    7c0e:	4b07      	ldr	r3, [pc, #28]	; (7c2c <_spi_err_check+0x38>)
    7c10:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7c12:	2180      	movs	r1, #128	; 0x80
    7c14:	6838      	ldr	r0, [r7, #0]
    7c16:	4b06      	ldr	r3, [pc, #24]	; (7c30 <_spi_err_check+0x3c>)
    7c18:	4798      	blx	r3
		return ERR_OVERFLOW;
    7c1a:	f06f 0312 	mvn.w	r3, #18
    7c1e:	e000      	b.n	7c22 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7c20:	2300      	movs	r3, #0
}
    7c22:	4618      	mov	r0, r3
    7c24:	3708      	adds	r7, #8
    7c26:	46bd      	mov	sp, r7
    7c28:	bd80      	pop	{r7, pc}
    7c2a:	bf00      	nop
    7c2c:	00006f39 	.word	0x00006f39
    7c30:	00006b05 	.word	0x00006b05

00007c34 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7c34:	b590      	push	{r4, r7, lr}
    7c36:	b08b      	sub	sp, #44	; 0x2c
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
    7c3c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7c44:	2300      	movs	r3, #0
    7c46:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7c48:	683b      	ldr	r3, [r7, #0]
    7c4a:	681b      	ldr	r3, [r3, #0]
    7c4c:	60bb      	str	r3, [r7, #8]
    7c4e:	683b      	ldr	r3, [r7, #0]
    7c50:	685b      	ldr	r3, [r3, #4]
    7c52:	60fb      	str	r3, [r7, #12]
    7c54:	2300      	movs	r3, #0
    7c56:	613b      	str	r3, [r7, #16]
    7c58:	2300      	movs	r3, #0
    7c5a:	617b      	str	r3, [r7, #20]
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	791b      	ldrb	r3, [r3, #4]
    7c60:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7c62:	687b      	ldr	r3, [r7, #4]
    7c64:	2b00      	cmp	r3, #0
    7c66:	d004      	beq.n	7c72 <_spi_m_sync_trans+0x3e>
    7c68:	6a3b      	ldr	r3, [r7, #32]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d001      	beq.n	7c72 <_spi_m_sync_trans+0x3e>
    7c6e:	2301      	movs	r3, #1
    7c70:	e000      	b.n	7c74 <_spi_m_sync_trans+0x40>
    7c72:	2300      	movs	r3, #0
    7c74:	f003 0301 	and.w	r3, r3, #1
    7c78:	b2db      	uxtb	r3, r3
    7c7a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    7c7e:	492b      	ldr	r1, [pc, #172]	; (7d2c <_spi_m_sync_trans+0xf8>)
    7c80:	4618      	mov	r0, r3
    7c82:	4b2b      	ldr	r3, [pc, #172]	; (7d30 <_spi_m_sync_trans+0xfc>)
    7c84:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7c86:	2107      	movs	r1, #7
    7c88:	6a38      	ldr	r0, [r7, #32]
    7c8a:	4b2a      	ldr	r3, [pc, #168]	; (7d34 <_spi_m_sync_trans+0x100>)
    7c8c:	4798      	blx	r3
    7c8e:	4603      	mov	r3, r0
    7c90:	2b00      	cmp	r3, #0
    7c92:	d002      	beq.n	7c9a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7c94:	f06f 0303 	mvn.w	r3, #3
    7c98:	e043      	b.n	7d22 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7c9a:	6a38      	ldr	r0, [r7, #32]
    7c9c:	4b26      	ldr	r3, [pc, #152]	; (7d38 <_spi_m_sync_trans+0x104>)
    7c9e:	4798      	blx	r3
    7ca0:	4603      	mov	r3, r0
    7ca2:	f083 0301 	eor.w	r3, r3, #1
    7ca6:	b2db      	uxtb	r3, r3
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d002      	beq.n	7cb2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7cac:	f06f 0313 	mvn.w	r3, #19
    7cb0:	e037      	b.n	7d22 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7cb2:	6a38      	ldr	r0, [r7, #32]
    7cb4:	4b21      	ldr	r3, [pc, #132]	; (7d3c <_spi_m_sync_trans+0x108>)
    7cb6:	4798      	blx	r3
    7cb8:	4603      	mov	r3, r0
    7cba:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7cbc:	f107 0308 	add.w	r3, r7, #8
    7cc0:	461a      	mov	r2, r3
    7cc2:	69f9      	ldr	r1, [r7, #28]
    7cc4:	6a38      	ldr	r0, [r7, #32]
    7cc6:	4b1e      	ldr	r3, [pc, #120]	; (7d40 <_spi_m_sync_trans+0x10c>)
    7cc8:	4798      	blx	r3
    7cca:	4603      	mov	r3, r0
    7ccc:	f083 0301 	eor.w	r3, r3, #1
    7cd0:	b2db      	uxtb	r3, r3
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d00b      	beq.n	7cee <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7cd6:	697a      	ldr	r2, [r7, #20]
    7cd8:	693b      	ldr	r3, [r7, #16]
    7cda:	429a      	cmp	r2, r3
    7cdc:	d307      	bcc.n	7cee <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	88db      	ldrh	r3, [r3, #6]
    7ce2:	f107 0208 	add.w	r2, r7, #8
    7ce6:	69f9      	ldr	r1, [r7, #28]
    7ce8:	6a38      	ldr	r0, [r7, #32]
    7cea:	4c16      	ldr	r4, [pc, #88]	; (7d44 <_spi_m_sync_trans+0x110>)
    7cec:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7cee:	6a39      	ldr	r1, [r7, #32]
    7cf0:	69f8      	ldr	r0, [r7, #28]
    7cf2:	4b15      	ldr	r3, [pc, #84]	; (7d48 <_spi_m_sync_trans+0x114>)
    7cf4:	4798      	blx	r3
    7cf6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	db0c      	blt.n	7d18 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7cfe:	693a      	ldr	r2, [r7, #16]
    7d00:	683b      	ldr	r3, [r7, #0]
    7d02:	689b      	ldr	r3, [r3, #8]
    7d04:	429a      	cmp	r2, r3
    7d06:	d3d4      	bcc.n	7cb2 <_spi_m_sync_trans+0x7e>
    7d08:	697a      	ldr	r2, [r7, #20]
    7d0a:	683b      	ldr	r3, [r7, #0]
    7d0c:	689b      	ldr	r3, [r3, #8]
    7d0e:	429a      	cmp	r2, r3
    7d10:	d3cf      	bcc.n	7cb2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7d12:	693b      	ldr	r3, [r7, #16]
    7d14:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7d16:	e000      	b.n	7d1a <_spi_m_sync_trans+0xe6>
			break;
    7d18:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7d1a:	6a38      	ldr	r0, [r7, #32]
    7d1c:	4b0b      	ldr	r3, [pc, #44]	; (7d4c <_spi_m_sync_trans+0x118>)
    7d1e:	4798      	blx	r3

	return rc;
    7d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7d22:	4618      	mov	r0, r3
    7d24:	372c      	adds	r7, #44	; 0x2c
    7d26:	46bd      	mov	sp, r7
    7d28:	bd90      	pop	{r4, r7, pc}
    7d2a:	bf00      	nop
    7d2c:	00011180 	.word	0x00011180
    7d30:	0000445d 	.word	0x0000445d
    7d34:	00006a4d 	.word	0x00006a4d
    7d38:	00006bf9 	.word	0x00006bf9
    7d3c:	00006aeb 	.word	0x00006aeb
    7d40:	00007b11 	.word	0x00007b11
    7d44:	00007b7d 	.word	0x00007b7d
    7d48:	00007bf5 	.word	0x00007bf5
    7d4c:	00007ae1 	.word	0x00007ae1

00007d50 <__NVIC_EnableIRQ>:
{
    7d50:	b480      	push	{r7}
    7d52:	b083      	sub	sp, #12
    7d54:	af00      	add	r7, sp, #0
    7d56:	4603      	mov	r3, r0
    7d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d5e:	2b00      	cmp	r3, #0
    7d60:	db0b      	blt.n	7d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d62:	4909      	ldr	r1, [pc, #36]	; (7d88 <__NVIC_EnableIRQ+0x38>)
    7d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d68:	095b      	lsrs	r3, r3, #5
    7d6a:	88fa      	ldrh	r2, [r7, #6]
    7d6c:	f002 021f 	and.w	r2, r2, #31
    7d70:	2001      	movs	r0, #1
    7d72:	fa00 f202 	lsl.w	r2, r0, r2
    7d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d7a:	bf00      	nop
    7d7c:	370c      	adds	r7, #12
    7d7e:	46bd      	mov	sp, r7
    7d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d84:	4770      	bx	lr
    7d86:	bf00      	nop
    7d88:	e000e100 	.word	0xe000e100

00007d8c <__NVIC_DisableIRQ>:
{
    7d8c:	b480      	push	{r7}
    7d8e:	b083      	sub	sp, #12
    7d90:	af00      	add	r7, sp, #0
    7d92:	4603      	mov	r3, r0
    7d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	db10      	blt.n	7dc0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d9e:	490b      	ldr	r1, [pc, #44]	; (7dcc <__NVIC_DisableIRQ+0x40>)
    7da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7da4:	095b      	lsrs	r3, r3, #5
    7da6:	88fa      	ldrh	r2, [r7, #6]
    7da8:	f002 021f 	and.w	r2, r2, #31
    7dac:	2001      	movs	r0, #1
    7dae:	fa00 f202 	lsl.w	r2, r0, r2
    7db2:	3320      	adds	r3, #32
    7db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7dbc:	f3bf 8f6f 	isb	sy
}
    7dc0:	bf00      	nop
    7dc2:	370c      	adds	r7, #12
    7dc4:	46bd      	mov	sp, r7
    7dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dca:	4770      	bx	lr
    7dcc:	e000e100 	.word	0xe000e100

00007dd0 <__NVIC_ClearPendingIRQ>:
{
    7dd0:	b480      	push	{r7}
    7dd2:	b083      	sub	sp, #12
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	4603      	mov	r3, r0
    7dd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dde:	2b00      	cmp	r3, #0
    7de0:	db0c      	blt.n	7dfc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7de2:	4909      	ldr	r1, [pc, #36]	; (7e08 <__NVIC_ClearPendingIRQ+0x38>)
    7de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7de8:	095b      	lsrs	r3, r3, #5
    7dea:	88fa      	ldrh	r2, [r7, #6]
    7dec:	f002 021f 	and.w	r2, r2, #31
    7df0:	2001      	movs	r0, #1
    7df2:	fa00 f202 	lsl.w	r2, r0, r2
    7df6:	3360      	adds	r3, #96	; 0x60
    7df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dfc:	bf00      	nop
    7dfe:	370c      	adds	r7, #12
    7e00:	46bd      	mov	sp, r7
    7e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e06:	4770      	bx	lr
    7e08:	e000e100 	.word	0xe000e100

00007e0c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7e0c:	b480      	push	{r7}
    7e0e:	b083      	sub	sp, #12
    7e10:	af00      	add	r7, sp, #0
    7e12:	6078      	str	r0, [r7, #4]
    7e14:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7e16:	bf00      	nop
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	689a      	ldr	r2, [r3, #8]
    7e1c:	683b      	ldr	r3, [r7, #0]
    7e1e:	4013      	ands	r3, r2
    7e20:	2b00      	cmp	r3, #0
    7e22:	d1f9      	bne.n	7e18 <hri_tcc_wait_for_sync+0xc>
	};
}
    7e24:	bf00      	nop
    7e26:	370c      	adds	r7, #12
    7e28:	46bd      	mov	sp, r7
    7e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2e:	4770      	bx	lr

00007e30 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7e30:	b480      	push	{r7}
    7e32:	b083      	sub	sp, #12
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7e3a:	687b      	ldr	r3, [r7, #4]
    7e3c:	689a      	ldr	r2, [r3, #8]
    7e3e:	683b      	ldr	r3, [r7, #0]
    7e40:	4013      	ands	r3, r2
    7e42:	2b00      	cmp	r3, #0
    7e44:	bf14      	ite	ne
    7e46:	2301      	movne	r3, #1
    7e48:	2300      	moveq	r3, #0
    7e4a:	b2db      	uxtb	r3, r3
}
    7e4c:	4618      	mov	r0, r3
    7e4e:	370c      	adds	r7, #12
    7e50:	46bd      	mov	sp, r7
    7e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e56:	4770      	bx	lr

00007e58 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7e58:	b480      	push	{r7}
    7e5a:	b083      	sub	sp, #12
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7e60:	687b      	ldr	r3, [r7, #4]
    7e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e64:	f003 0301 	and.w	r3, r3, #1
    7e68:	2b00      	cmp	r3, #0
    7e6a:	bf14      	ite	ne
    7e6c:	2301      	movne	r3, #1
    7e6e:	2300      	moveq	r3, #0
    7e70:	b2db      	uxtb	r3, r3
}
    7e72:	4618      	mov	r0, r3
    7e74:	370c      	adds	r7, #12
    7e76:	46bd      	mov	sp, r7
    7e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e7c:	4770      	bx	lr

00007e7e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7e7e:	b480      	push	{r7}
    7e80:	b083      	sub	sp, #12
    7e82:	af00      	add	r7, sp, #0
    7e84:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7e86:	687b      	ldr	r3, [r7, #4]
    7e88:	2201      	movs	r2, #1
    7e8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7e8c:	bf00      	nop
    7e8e:	370c      	adds	r7, #12
    7e90:	46bd      	mov	sp, r7
    7e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e96:	4770      	bx	lr

00007e98 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7e98:	b480      	push	{r7}
    7e9a:	b083      	sub	sp, #12
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
    7ea0:	460b      	mov	r3, r1
    7ea2:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	78fa      	ldrb	r2, [r7, #3]
    7ea8:	715a      	strb	r2, [r3, #5]
}
    7eaa:	bf00      	nop
    7eac:	370c      	adds	r7, #12
    7eae:	46bd      	mov	sp, r7
    7eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eb4:	4770      	bx	lr

00007eb6 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7eb6:	b480      	push	{r7}
    7eb8:	b083      	sub	sp, #12
    7eba:	af00      	add	r7, sp, #0
    7ebc:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7ebe:	687b      	ldr	r3, [r7, #4]
    7ec0:	2201      	movs	r2, #1
    7ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
    7ec4:	bf00      	nop
    7ec6:	370c      	adds	r7, #12
    7ec8:	46bd      	mov	sp, r7
    7eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ece:	4770      	bx	lr

00007ed0 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7ed0:	b580      	push	{r7, lr}
    7ed2:	b082      	sub	sp, #8
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7ed8:	687b      	ldr	r3, [r7, #4]
    7eda:	681b      	ldr	r3, [r3, #0]
    7edc:	f043 0201 	orr.w	r2, r3, #1
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7ee4:	2101      	movs	r1, #1
    7ee6:	6878      	ldr	r0, [r7, #4]
    7ee8:	4b02      	ldr	r3, [pc, #8]	; (7ef4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7eea:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7eec:	bf00      	nop
    7eee:	3708      	adds	r7, #8
    7ef0:	46bd      	mov	sp, r7
    7ef2:	bd80      	pop	{r7, pc}
    7ef4:	00007e0d 	.word	0x00007e0d

00007ef8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	f043 0202 	orr.w	r2, r3, #2
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f0c:	2103      	movs	r1, #3
    7f0e:	6878      	ldr	r0, [r7, #4]
    7f10:	4b02      	ldr	r3, [pc, #8]	; (7f1c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7f12:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f14:	bf00      	nop
    7f16:	3708      	adds	r7, #8
    7f18:	46bd      	mov	sp, r7
    7f1a:	bd80      	pop	{r7, pc}
    7f1c:	00007e0d 	.word	0x00007e0d

00007f20 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7f20:	b580      	push	{r7, lr}
    7f22:	b084      	sub	sp, #16
    7f24:	af00      	add	r7, sp, #0
    7f26:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f28:	2103      	movs	r1, #3
    7f2a:	6878      	ldr	r0, [r7, #4]
    7f2c:	4b09      	ldr	r3, [pc, #36]	; (7f54 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7f2e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	681b      	ldr	r3, [r3, #0]
    7f34:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	085b      	lsrs	r3, r3, #1
    7f3a:	f003 0301 	and.w	r3, r3, #1
    7f3e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	2b00      	cmp	r3, #0
    7f44:	bf14      	ite	ne
    7f46:	2301      	movne	r3, #1
    7f48:	2300      	moveq	r3, #0
    7f4a:	b2db      	uxtb	r3, r3
}
    7f4c:	4618      	mov	r0, r3
    7f4e:	3710      	adds	r7, #16
    7f50:	46bd      	mov	sp, r7
    7f52:	bd80      	pop	{r7, pc}
    7f54:	00007e0d 	.word	0x00007e0d

00007f58 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7f58:	b580      	push	{r7, lr}
    7f5a:	b082      	sub	sp, #8
    7f5c:	af00      	add	r7, sp, #0
    7f5e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	681b      	ldr	r3, [r3, #0]
    7f64:	f023 0202 	bic.w	r2, r3, #2
    7f68:	687b      	ldr	r3, [r7, #4]
    7f6a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f6c:	2103      	movs	r1, #3
    7f6e:	6878      	ldr	r0, [r7, #4]
    7f70:	4b02      	ldr	r3, [pc, #8]	; (7f7c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7f72:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f74:	bf00      	nop
    7f76:	3708      	adds	r7, #8
    7f78:	46bd      	mov	sp, r7
    7f7a:	bd80      	pop	{r7, pc}
    7f7c:	00007e0d 	.word	0x00007e0d

00007f80 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7f80:	b580      	push	{r7, lr}
    7f82:	b084      	sub	sp, #16
    7f84:	af00      	add	r7, sp, #0
    7f86:	6078      	str	r0, [r7, #4]
    7f88:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f8a:	2103      	movs	r1, #3
    7f8c:	6878      	ldr	r0, [r7, #4]
    7f8e:	4b07      	ldr	r3, [pc, #28]	; (7fac <hri_tcc_get_CTRLA_reg+0x2c>)
    7f90:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7f98:	68fa      	ldr	r2, [r7, #12]
    7f9a:	683b      	ldr	r3, [r7, #0]
    7f9c:	4013      	ands	r3, r2
    7f9e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7fa0:	68fb      	ldr	r3, [r7, #12]
}
    7fa2:	4618      	mov	r0, r3
    7fa4:	3710      	adds	r7, #16
    7fa6:	46bd      	mov	sp, r7
    7fa8:	bd80      	pop	{r7, pc}
    7faa:	bf00      	nop
    7fac:	00007e0d 	.word	0x00007e0d

00007fb0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7fb0:	b580      	push	{r7, lr}
    7fb2:	b082      	sub	sp, #8
    7fb4:	af00      	add	r7, sp, #0
    7fb6:	6078      	str	r0, [r7, #4]
    7fb8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	683a      	ldr	r2, [r7, #0]
    7fbe:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7fc0:	2103      	movs	r1, #3
    7fc2:	6878      	ldr	r0, [r7, #4]
    7fc4:	4b02      	ldr	r3, [pc, #8]	; (7fd0 <hri_tcc_write_CTRLA_reg+0x20>)
    7fc6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7fc8:	bf00      	nop
    7fca:	3708      	adds	r7, #8
    7fcc:	46bd      	mov	sp, r7
    7fce:	bd80      	pop	{r7, pc}
    7fd0:	00007e0d 	.word	0x00007e0d

00007fd4 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7fd4:	b480      	push	{r7}
    7fd6:	b083      	sub	sp, #12
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
    7fdc:	460b      	mov	r3, r1
    7fde:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	78fa      	ldrb	r2, [r7, #3]
    7fe4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7fe6:	bf00      	nop
    7fe8:	370c      	adds	r7, #12
    7fea:	46bd      	mov	sp, r7
    7fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff0:	4770      	bx	lr

00007ff2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7ff2:	b480      	push	{r7}
    7ff4:	b083      	sub	sp, #12
    7ff6:	af00      	add	r7, sp, #0
    7ff8:	6078      	str	r0, [r7, #4]
    7ffa:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	683a      	ldr	r2, [r7, #0]
    8000:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8002:	bf00      	nop
    8004:	370c      	adds	r7, #12
    8006:	46bd      	mov	sp, r7
    8008:	f85d 7b04 	ldr.w	r7, [sp], #4
    800c:	4770      	bx	lr
	...

00008010 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    8010:	b580      	push	{r7, lr}
    8012:	b082      	sub	sp, #8
    8014:	af00      	add	r7, sp, #0
    8016:	6078      	str	r0, [r7, #4]
    8018:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	683a      	ldr	r2, [r7, #0]
    801e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8020:	2180      	movs	r1, #128	; 0x80
    8022:	6878      	ldr	r0, [r7, #4]
    8024:	4b02      	ldr	r3, [pc, #8]	; (8030 <hri_tcc_write_PER_reg+0x20>)
    8026:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8028:	bf00      	nop
    802a:	3708      	adds	r7, #8
    802c:	46bd      	mov	sp, r7
    802e:	bd80      	pop	{r7, pc}
    8030:	00007e0d 	.word	0x00007e0d

00008034 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    8034:	b580      	push	{r7, lr}
    8036:	b082      	sub	sp, #8
    8038:	af00      	add	r7, sp, #0
    803a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    803c:	2180      	movs	r1, #128	; 0x80
    803e:	6878      	ldr	r0, [r7, #4]
    8040:	4b03      	ldr	r3, [pc, #12]	; (8050 <hri_tcc_read_PER_reg+0x1c>)
    8042:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    8044:	687b      	ldr	r3, [r7, #4]
    8046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    8048:	4618      	mov	r0, r3
    804a:	3708      	adds	r7, #8
    804c:	46bd      	mov	sp, r7
    804e:	bd80      	pop	{r7, pc}
    8050:	00007e0d 	.word	0x00007e0d

00008054 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    8054:	b480      	push	{r7}
    8056:	b083      	sub	sp, #12
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    805c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	4a0c      	ldr	r2, [pc, #48]	; (8094 <_tcc_init_irq_param+0x40>)
    8062:	4293      	cmp	r3, r2
    8064:	d102      	bne.n	806c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    8066:	4a0c      	ldr	r2, [pc, #48]	; (8098 <_tcc_init_irq_param+0x44>)
    8068:	683b      	ldr	r3, [r7, #0]
    806a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	4a0b      	ldr	r2, [pc, #44]	; (809c <_tcc_init_irq_param+0x48>)
    8070:	4293      	cmp	r3, r2
    8072:	d102      	bne.n	807a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    8074:	4a0a      	ldr	r2, [pc, #40]	; (80a0 <_tcc_init_irq_param+0x4c>)
    8076:	683b      	ldr	r3, [r7, #0]
    8078:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    807a:	687b      	ldr	r3, [r7, #4]
    807c:	4a09      	ldr	r2, [pc, #36]	; (80a4 <_tcc_init_irq_param+0x50>)
    807e:	4293      	cmp	r3, r2
    8080:	d102      	bne.n	8088 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    8082:	4a09      	ldr	r2, [pc, #36]	; (80a8 <_tcc_init_irq_param+0x54>)
    8084:	683b      	ldr	r3, [r7, #0]
    8086:	6013      	str	r3, [r2, #0]
	}
}
    8088:	bf00      	nop
    808a:	370c      	adds	r7, #12
    808c:	46bd      	mov	sp, r7
    808e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8092:	4770      	bx	lr
    8094:	41016000 	.word	0x41016000
    8098:	20000e24 	.word	0x20000e24
    809c:	41018000 	.word	0x41018000
    80a0:	20000e28 	.word	0x20000e28
    80a4:	42000c00 	.word	0x42000c00
    80a8:	20000e2c 	.word	0x20000e2c

000080ac <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    80ac:	b580      	push	{r7, lr}
    80ae:	b084      	sub	sp, #16
    80b0:	af00      	add	r7, sp, #0
    80b2:	6078      	str	r0, [r7, #4]
    80b4:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    80b6:	6838      	ldr	r0, [r7, #0]
    80b8:	4b33      	ldr	r3, [pc, #204]	; (8188 <_tcc_timer_init+0xdc>)
    80ba:	4798      	blx	r3
    80bc:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    80be:	68fb      	ldr	r3, [r7, #12]
    80c0:	2b00      	cmp	r3, #0
    80c2:	d102      	bne.n	80ca <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    80c4:	f06f 0309 	mvn.w	r3, #9
    80c8:	e05a      	b.n	8180 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    80ca:	687b      	ldr	r3, [r7, #4]
    80cc:	683a      	ldr	r2, [r7, #0]
    80ce:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    80d0:	2101      	movs	r1, #1
    80d2:	6838      	ldr	r0, [r7, #0]
    80d4:	4b2d      	ldr	r3, [pc, #180]	; (818c <_tcc_timer_init+0xe0>)
    80d6:	4798      	blx	r3
    80d8:	4603      	mov	r3, r0
    80da:	f083 0301 	eor.w	r3, r3, #1
    80de:	b2db      	uxtb	r3, r3
    80e0:	2b00      	cmp	r3, #0
    80e2:	d011      	beq.n	8108 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    80e4:	2102      	movs	r1, #2
    80e6:	6838      	ldr	r0, [r7, #0]
    80e8:	4b29      	ldr	r3, [pc, #164]	; (8190 <_tcc_timer_init+0xe4>)
    80ea:	4798      	blx	r3
    80ec:	4603      	mov	r3, r0
    80ee:	2b00      	cmp	r3, #0
    80f0:	d006      	beq.n	8100 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    80f2:	6838      	ldr	r0, [r7, #0]
    80f4:	4b27      	ldr	r3, [pc, #156]	; (8194 <_tcc_timer_init+0xe8>)
    80f6:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    80f8:	2102      	movs	r1, #2
    80fa:	6838      	ldr	r0, [r7, #0]
    80fc:	4b26      	ldr	r3, [pc, #152]	; (8198 <_tcc_timer_init+0xec>)
    80fe:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    8100:	2101      	movs	r1, #1
    8102:	6838      	ldr	r0, [r7, #0]
    8104:	4b25      	ldr	r3, [pc, #148]	; (819c <_tcc_timer_init+0xf0>)
    8106:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8108:	2101      	movs	r1, #1
    810a:	6838      	ldr	r0, [r7, #0]
    810c:	4b22      	ldr	r3, [pc, #136]	; (8198 <_tcc_timer_init+0xec>)
    810e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    8110:	68fb      	ldr	r3, [r7, #12]
    8112:	689b      	ldr	r3, [r3, #8]
    8114:	4619      	mov	r1, r3
    8116:	6838      	ldr	r0, [r7, #0]
    8118:	4b20      	ldr	r3, [pc, #128]	; (819c <_tcc_timer_init+0xf0>)
    811a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    811c:	68fb      	ldr	r3, [r7, #12]
    811e:	7b1b      	ldrb	r3, [r3, #12]
    8120:	4619      	mov	r1, r3
    8122:	6838      	ldr	r0, [r7, #0]
    8124:	4b1e      	ldr	r3, [pc, #120]	; (81a0 <_tcc_timer_init+0xf4>)
    8126:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    8128:	68fb      	ldr	r3, [r7, #12]
    812a:	7b5b      	ldrb	r3, [r3, #13]
    812c:	4619      	mov	r1, r3
    812e:	6838      	ldr	r0, [r7, #0]
    8130:	4b1c      	ldr	r3, [pc, #112]	; (81a4 <_tcc_timer_init+0xf8>)
    8132:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    8134:	68fb      	ldr	r3, [r7, #12]
    8136:	691b      	ldr	r3, [r3, #16]
    8138:	4619      	mov	r1, r3
    813a:	6838      	ldr	r0, [r7, #0]
    813c:	4b1a      	ldr	r3, [pc, #104]	; (81a8 <_tcc_timer_init+0xfc>)
    813e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    8140:	68fb      	ldr	r3, [r7, #12]
    8142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8144:	4619      	mov	r1, r3
    8146:	6838      	ldr	r0, [r7, #0]
    8148:	4b18      	ldr	r3, [pc, #96]	; (81ac <_tcc_timer_init+0x100>)
    814a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    814c:	6838      	ldr	r0, [r7, #0]
    814e:	4b18      	ldr	r3, [pc, #96]	; (81b0 <_tcc_timer_init+0x104>)
    8150:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    8152:	6879      	ldr	r1, [r7, #4]
    8154:	6838      	ldr	r0, [r7, #0]
    8156:	4b17      	ldr	r3, [pc, #92]	; (81b4 <_tcc_timer_init+0x108>)
    8158:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    815a:	68fb      	ldr	r3, [r7, #12]
    815c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8160:	4618      	mov	r0, r3
    8162:	4b15      	ldr	r3, [pc, #84]	; (81b8 <_tcc_timer_init+0x10c>)
    8164:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    8166:	68fb      	ldr	r3, [r7, #12]
    8168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    816c:	4618      	mov	r0, r3
    816e:	4b13      	ldr	r3, [pc, #76]	; (81bc <_tcc_timer_init+0x110>)
    8170:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    8172:	68fb      	ldr	r3, [r7, #12]
    8174:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8178:	4618      	mov	r0, r3
    817a:	4b11      	ldr	r3, [pc, #68]	; (81c0 <_tcc_timer_init+0x114>)
    817c:	4798      	blx	r3

	return ERR_NONE;
    817e:	2300      	movs	r3, #0
}
    8180:	4618      	mov	r0, r3
    8182:	3710      	adds	r7, #16
    8184:	46bd      	mov	sp, r7
    8186:	bd80      	pop	{r7, pc}
    8188:	00008391 	.word	0x00008391
    818c:	00007e31 	.word	0x00007e31
    8190:	00007f81 	.word	0x00007f81
    8194:	00007f59 	.word	0x00007f59
    8198:	00007e0d 	.word	0x00007e0d
    819c:	00007fb1 	.word	0x00007fb1
    81a0:	00007e99 	.word	0x00007e99
    81a4:	00007fd5 	.word	0x00007fd5
    81a8:	00007ff3 	.word	0x00007ff3
    81ac:	00008011 	.word	0x00008011
    81b0:	00007eb7 	.word	0x00007eb7
    81b4:	00008055 	.word	0x00008055
    81b8:	00007d8d 	.word	0x00007d8d
    81bc:	00007dd1 	.word	0x00007dd1
    81c0:	00007d51 	.word	0x00007d51

000081c4 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    81c4:	b580      	push	{r7, lr}
    81c6:	b084      	sub	sp, #16
    81c8:	af00      	add	r7, sp, #0
    81ca:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    81cc:	687b      	ldr	r3, [r7, #4]
    81ce:	68db      	ldr	r3, [r3, #12]
    81d0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    81d2:	68f8      	ldr	r0, [r7, #12]
    81d4:	4b0a      	ldr	r3, [pc, #40]	; (8200 <_tcc_timer_deinit+0x3c>)
    81d6:	4798      	blx	r3
    81d8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    81da:	68bb      	ldr	r3, [r7, #8]
    81dc:	2b00      	cmp	r3, #0
    81de:	d00b      	beq.n	81f8 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    81e0:	68bb      	ldr	r3, [r7, #8]
    81e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    81e6:	4618      	mov	r0, r3
    81e8:	4b06      	ldr	r3, [pc, #24]	; (8204 <_tcc_timer_deinit+0x40>)
    81ea:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    81ec:	68f8      	ldr	r0, [r7, #12]
    81ee:	4b06      	ldr	r3, [pc, #24]	; (8208 <_tcc_timer_deinit+0x44>)
    81f0:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    81f2:	68f8      	ldr	r0, [r7, #12]
    81f4:	4b05      	ldr	r3, [pc, #20]	; (820c <_tcc_timer_deinit+0x48>)
    81f6:	4798      	blx	r3
	}
}
    81f8:	bf00      	nop
    81fa:	3710      	adds	r7, #16
    81fc:	46bd      	mov	sp, r7
    81fe:	bd80      	pop	{r7, pc}
    8200:	00008391 	.word	0x00008391
    8204:	00007d8d 	.word	0x00007d8d
    8208:	00007f59 	.word	0x00007f59
    820c:	00007ed1 	.word	0x00007ed1

00008210 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    8210:	b580      	push	{r7, lr}
    8212:	b082      	sub	sp, #8
    8214:	af00      	add	r7, sp, #0
    8216:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    8218:	687b      	ldr	r3, [r7, #4]
    821a:	68db      	ldr	r3, [r3, #12]
    821c:	4618      	mov	r0, r3
    821e:	4b03      	ldr	r3, [pc, #12]	; (822c <_tcc_timer_start+0x1c>)
    8220:	4798      	blx	r3
}
    8222:	bf00      	nop
    8224:	3708      	adds	r7, #8
    8226:	46bd      	mov	sp, r7
    8228:	bd80      	pop	{r7, pc}
    822a:	bf00      	nop
    822c:	00007ef9 	.word	0x00007ef9

00008230 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	68db      	ldr	r3, [r3, #12]
    823c:	4618      	mov	r0, r3
    823e:	4b03      	ldr	r3, [pc, #12]	; (824c <_tcc_timer_stop+0x1c>)
    8240:	4798      	blx	r3
}
    8242:	bf00      	nop
    8244:	3708      	adds	r7, #8
    8246:	46bd      	mov	sp, r7
    8248:	bd80      	pop	{r7, pc}
    824a:	bf00      	nop
    824c:	00007f59 	.word	0x00007f59

00008250 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8250:	b580      	push	{r7, lr}
    8252:	b082      	sub	sp, #8
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]
    8258:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	68db      	ldr	r3, [r3, #12]
    825e:	6839      	ldr	r1, [r7, #0]
    8260:	4618      	mov	r0, r3
    8262:	4b03      	ldr	r3, [pc, #12]	; (8270 <_tcc_timer_set_period+0x20>)
    8264:	4798      	blx	r3
}
    8266:	bf00      	nop
    8268:	3708      	adds	r7, #8
    826a:	46bd      	mov	sp, r7
    826c:	bd80      	pop	{r7, pc}
    826e:	bf00      	nop
    8270:	00008011 	.word	0x00008011

00008274 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    8274:	b580      	push	{r7, lr}
    8276:	b082      	sub	sp, #8
    8278:	af00      	add	r7, sp, #0
    827a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	68db      	ldr	r3, [r3, #12]
    8280:	4618      	mov	r0, r3
    8282:	4b03      	ldr	r3, [pc, #12]	; (8290 <_tcc_timer_get_period+0x1c>)
    8284:	4798      	blx	r3
    8286:	4603      	mov	r3, r0
}
    8288:	4618      	mov	r0, r3
    828a:	3708      	adds	r7, #8
    828c:	46bd      	mov	sp, r7
    828e:	bd80      	pop	{r7, pc}
    8290:	00008035 	.word	0x00008035

00008294 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    8294:	b580      	push	{r7, lr}
    8296:	b082      	sub	sp, #8
    8298:	af00      	add	r7, sp, #0
    829a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	68db      	ldr	r3, [r3, #12]
    82a0:	4618      	mov	r0, r3
    82a2:	4b03      	ldr	r3, [pc, #12]	; (82b0 <_tcc_timer_is_started+0x1c>)
    82a4:	4798      	blx	r3
    82a6:	4603      	mov	r3, r0
}
    82a8:	4618      	mov	r0, r3
    82aa:	3708      	adds	r7, #8
    82ac:	46bd      	mov	sp, r7
    82ae:	bd80      	pop	{r7, pc}
    82b0:	00007f21 	.word	0x00007f21

000082b4 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    82b4:	b480      	push	{r7}
    82b6:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    82b8:	4b02      	ldr	r3, [pc, #8]	; (82c4 <_tcc_get_timer+0x10>)
}
    82ba:	4618      	mov	r0, r3
    82bc:	46bd      	mov	sp, r7
    82be:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c2:	4770      	bx	lr
    82c4:	200000f0 	.word	0x200000f0

000082c8 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    82c8:	b580      	push	{r7, lr}
    82ca:	b084      	sub	sp, #16
    82cc:	af00      	add	r7, sp, #0
    82ce:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	68db      	ldr	r3, [r3, #12]
    82d4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    82d6:	68f8      	ldr	r0, [r7, #12]
    82d8:	4b08      	ldr	r3, [pc, #32]	; (82fc <_tcc_timer_set_irq+0x34>)
    82da:	4798      	blx	r3
    82dc:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    82de:	68bb      	ldr	r3, [r7, #8]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d006      	beq.n	82f2 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    82e4:	68bb      	ldr	r3, [r7, #8]
    82e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    82ea:	b2db      	uxtb	r3, r3
    82ec:	4618      	mov	r0, r3
    82ee:	4b04      	ldr	r3, [pc, #16]	; (8300 <_tcc_timer_set_irq+0x38>)
    82f0:	4798      	blx	r3
	}
}
    82f2:	bf00      	nop
    82f4:	3710      	adds	r7, #16
    82f6:	46bd      	mov	sp, r7
    82f8:	bd80      	pop	{r7, pc}
    82fa:	bf00      	nop
    82fc:	00008391 	.word	0x00008391
    8300:	00004ca5 	.word	0x00004ca5

00008304 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8304:	b580      	push	{r7, lr}
    8306:	b084      	sub	sp, #16
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    830c:	687b      	ldr	r3, [r7, #4]
    830e:	68db      	ldr	r3, [r3, #12]
    8310:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    8312:	68f8      	ldr	r0, [r7, #12]
    8314:	4b07      	ldr	r3, [pc, #28]	; (8334 <tcc_interrupt_handler+0x30>)
    8316:	4798      	blx	r3
    8318:	4603      	mov	r3, r0
    831a:	2b00      	cmp	r3, #0
    831c:	d006      	beq.n	832c <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    831e:	68f8      	ldr	r0, [r7, #12]
    8320:	4b05      	ldr	r3, [pc, #20]	; (8338 <tcc_interrupt_handler+0x34>)
    8322:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8324:	687b      	ldr	r3, [r7, #4]
    8326:	681b      	ldr	r3, [r3, #0]
    8328:	6878      	ldr	r0, [r7, #4]
    832a:	4798      	blx	r3
	}
}
    832c:	bf00      	nop
    832e:	3710      	adds	r7, #16
    8330:	46bd      	mov	sp, r7
    8332:	bd80      	pop	{r7, pc}
    8334:	00007e59 	.word	0x00007e59
    8338:	00007e7f 	.word	0x00007e7f

0000833c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    833c:	b580      	push	{r7, lr}
    833e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    8340:	4b03      	ldr	r3, [pc, #12]	; (8350 <TCC0_0_Handler+0x14>)
    8342:	681b      	ldr	r3, [r3, #0]
    8344:	4618      	mov	r0, r3
    8346:	4b03      	ldr	r3, [pc, #12]	; (8354 <TCC0_0_Handler+0x18>)
    8348:	4798      	blx	r3
}
    834a:	bf00      	nop
    834c:	bd80      	pop	{r7, pc}
    834e:	bf00      	nop
    8350:	20000e24 	.word	0x20000e24
    8354:	00008305 	.word	0x00008305

00008358 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    8358:	b580      	push	{r7, lr}
    835a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    835c:	4b03      	ldr	r3, [pc, #12]	; (836c <TCC1_0_Handler+0x14>)
    835e:	681b      	ldr	r3, [r3, #0]
    8360:	4618      	mov	r0, r3
    8362:	4b03      	ldr	r3, [pc, #12]	; (8370 <TCC1_0_Handler+0x18>)
    8364:	4798      	blx	r3
}
    8366:	bf00      	nop
    8368:	bd80      	pop	{r7, pc}
    836a:	bf00      	nop
    836c:	20000e28 	.word	0x20000e28
    8370:	00008305 	.word	0x00008305

00008374 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    8374:	b580      	push	{r7, lr}
    8376:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    8378:	4b03      	ldr	r3, [pc, #12]	; (8388 <TCC2_0_Handler+0x14>)
    837a:	681b      	ldr	r3, [r3, #0]
    837c:	4618      	mov	r0, r3
    837e:	4b03      	ldr	r3, [pc, #12]	; (838c <TCC2_0_Handler+0x18>)
    8380:	4798      	blx	r3
}
    8382:	bf00      	nop
    8384:	bd80      	pop	{r7, pc}
    8386:	bf00      	nop
    8388:	20000e2c 	.word	0x20000e2c
    838c:	00008305 	.word	0x00008305

00008390 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    8390:	b480      	push	{r7}
    8392:	b085      	sub	sp, #20
    8394:	af00      	add	r7, sp, #0
    8396:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8398:	2300      	movs	r3, #0
    839a:	73fb      	strb	r3, [r7, #15]
    839c:	e015      	b.n	83ca <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    839e:	7bfa      	ldrb	r2, [r7, #15]
    83a0:	490f      	ldr	r1, [pc, #60]	; (83e0 <_get_tcc_cfg+0x50>)
    83a2:	4613      	mov	r3, r2
    83a4:	005b      	lsls	r3, r3, #1
    83a6:	4413      	add	r3, r2
    83a8:	011b      	lsls	r3, r3, #4
    83aa:	440b      	add	r3, r1
    83ac:	681a      	ldr	r2, [r3, #0]
    83ae:	687b      	ldr	r3, [r7, #4]
    83b0:	429a      	cmp	r2, r3
    83b2:	d107      	bne.n	83c4 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    83b4:	7bfa      	ldrb	r2, [r7, #15]
    83b6:	4613      	mov	r3, r2
    83b8:	005b      	lsls	r3, r3, #1
    83ba:	4413      	add	r3, r2
    83bc:	011b      	lsls	r3, r3, #4
    83be:	4a08      	ldr	r2, [pc, #32]	; (83e0 <_get_tcc_cfg+0x50>)
    83c0:	4413      	add	r3, r2
    83c2:	e006      	b.n	83d2 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    83c4:	7bfb      	ldrb	r3, [r7, #15]
    83c6:	3301      	adds	r3, #1
    83c8:	73fb      	strb	r3, [r7, #15]
    83ca:	7bfb      	ldrb	r3, [r7, #15]
    83cc:	2b02      	cmp	r3, #2
    83ce:	d9e6      	bls.n	839e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    83d0:	2300      	movs	r3, #0
}
    83d2:	4618      	mov	r0, r3
    83d4:	3714      	adds	r7, #20
    83d6:	46bd      	mov	sp, r7
    83d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83dc:	4770      	bx	lr
    83de:	bf00      	nop
    83e0:	20000060 	.word	0x20000060

000083e4 <__NVIC_EnableIRQ>:
{
    83e4:	b480      	push	{r7}
    83e6:	b083      	sub	sp, #12
    83e8:	af00      	add	r7, sp, #0
    83ea:	4603      	mov	r3, r0
    83ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83f2:	2b00      	cmp	r3, #0
    83f4:	db0b      	blt.n	840e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83f6:	4909      	ldr	r1, [pc, #36]	; (841c <__NVIC_EnableIRQ+0x38>)
    83f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83fc:	095b      	lsrs	r3, r3, #5
    83fe:	88fa      	ldrh	r2, [r7, #6]
    8400:	f002 021f 	and.w	r2, r2, #31
    8404:	2001      	movs	r0, #1
    8406:	fa00 f202 	lsl.w	r2, r0, r2
    840a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    840e:	bf00      	nop
    8410:	370c      	adds	r7, #12
    8412:	46bd      	mov	sp, r7
    8414:	f85d 7b04 	ldr.w	r7, [sp], #4
    8418:	4770      	bx	lr
    841a:	bf00      	nop
    841c:	e000e100 	.word	0xe000e100

00008420 <__NVIC_DisableIRQ>:
{
    8420:	b480      	push	{r7}
    8422:	b083      	sub	sp, #12
    8424:	af00      	add	r7, sp, #0
    8426:	4603      	mov	r3, r0
    8428:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    842a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    842e:	2b00      	cmp	r3, #0
    8430:	db10      	blt.n	8454 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8432:	490b      	ldr	r1, [pc, #44]	; (8460 <__NVIC_DisableIRQ+0x40>)
    8434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8438:	095b      	lsrs	r3, r3, #5
    843a:	88fa      	ldrh	r2, [r7, #6]
    843c:	f002 021f 	and.w	r2, r2, #31
    8440:	2001      	movs	r0, #1
    8442:	fa00 f202 	lsl.w	r2, r0, r2
    8446:	3320      	adds	r3, #32
    8448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    844c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8450:	f3bf 8f6f 	isb	sy
}
    8454:	bf00      	nop
    8456:	370c      	adds	r7, #12
    8458:	46bd      	mov	sp, r7
    845a:	f85d 7b04 	ldr.w	r7, [sp], #4
    845e:	4770      	bx	lr
    8460:	e000e100 	.word	0xe000e100

00008464 <__NVIC_ClearPendingIRQ>:
{
    8464:	b480      	push	{r7}
    8466:	b083      	sub	sp, #12
    8468:	af00      	add	r7, sp, #0
    846a:	4603      	mov	r3, r0
    846c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    846e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8472:	2b00      	cmp	r3, #0
    8474:	db0c      	blt.n	8490 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8476:	4909      	ldr	r1, [pc, #36]	; (849c <__NVIC_ClearPendingIRQ+0x38>)
    8478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    847c:	095b      	lsrs	r3, r3, #5
    847e:	88fa      	ldrh	r2, [r7, #6]
    8480:	f002 021f 	and.w	r2, r2, #31
    8484:	2001      	movs	r0, #1
    8486:	fa00 f202 	lsl.w	r2, r0, r2
    848a:	3360      	adds	r3, #96	; 0x60
    848c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8490:	bf00      	nop
    8492:	370c      	adds	r7, #12
    8494:	46bd      	mov	sp, r7
    8496:	f85d 7b04 	ldr.w	r7, [sp], #4
    849a:	4770      	bx	lr
    849c:	e000e100 	.word	0xe000e100

000084a0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    84a0:	b480      	push	{r7}
    84a2:	b083      	sub	sp, #12
    84a4:	af00      	add	r7, sp, #0
    84a6:	6078      	str	r0, [r7, #4]
    84a8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84aa:	bf00      	nop
    84ac:	687b      	ldr	r3, [r7, #4]
    84ae:	691a      	ldr	r2, [r3, #16]
    84b0:	683b      	ldr	r3, [r7, #0]
    84b2:	4013      	ands	r3, r2
    84b4:	2b00      	cmp	r3, #0
    84b6:	d1f9      	bne.n	84ac <hri_tc_wait_for_sync+0xc>
	};
}
    84b8:	bf00      	nop
    84ba:	370c      	adds	r7, #12
    84bc:	46bd      	mov	sp, r7
    84be:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c2:	4770      	bx	lr

000084c4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    84c4:	b480      	push	{r7}
    84c6:	b083      	sub	sp, #12
    84c8:	af00      	add	r7, sp, #0
    84ca:	6078      	str	r0, [r7, #4]
    84cc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    84ce:	687b      	ldr	r3, [r7, #4]
    84d0:	691a      	ldr	r2, [r3, #16]
    84d2:	683b      	ldr	r3, [r7, #0]
    84d4:	4013      	ands	r3, r2
    84d6:	2b00      	cmp	r3, #0
    84d8:	bf14      	ite	ne
    84da:	2301      	movne	r3, #1
    84dc:	2300      	moveq	r3, #0
    84de:	b2db      	uxtb	r3, r3
}
    84e0:	4618      	mov	r0, r3
    84e2:	370c      	adds	r7, #12
    84e4:	46bd      	mov	sp, r7
    84e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ea:	4770      	bx	lr

000084ec <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    84ec:	b480      	push	{r7}
    84ee:	b083      	sub	sp, #12
    84f0:	af00      	add	r7, sp, #0
    84f2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    84f4:	687b      	ldr	r3, [r7, #4]
    84f6:	7a9b      	ldrb	r3, [r3, #10]
    84f8:	b2db      	uxtb	r3, r3
    84fa:	f003 0301 	and.w	r3, r3, #1
    84fe:	2b00      	cmp	r3, #0
    8500:	bf14      	ite	ne
    8502:	2301      	movne	r3, #1
    8504:	2300      	moveq	r3, #0
    8506:	b2db      	uxtb	r3, r3
}
    8508:	4618      	mov	r0, r3
    850a:	370c      	adds	r7, #12
    850c:	46bd      	mov	sp, r7
    850e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8512:	4770      	bx	lr

00008514 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8514:	b480      	push	{r7}
    8516:	b083      	sub	sp, #12
    8518:	af00      	add	r7, sp, #0
    851a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    851c:	687b      	ldr	r3, [r7, #4]
    851e:	2201      	movs	r2, #1
    8520:	729a      	strb	r2, [r3, #10]
}
    8522:	bf00      	nop
    8524:	370c      	adds	r7, #12
    8526:	46bd      	mov	sp, r7
    8528:	f85d 7b04 	ldr.w	r7, [sp], #4
    852c:	4770      	bx	lr

0000852e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    852e:	b480      	push	{r7}
    8530:	b083      	sub	sp, #12
    8532:	af00      	add	r7, sp, #0
    8534:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    8536:	687b      	ldr	r3, [r7, #4]
    8538:	2202      	movs	r2, #2
    853a:	729a      	strb	r2, [r3, #10]
}
    853c:	bf00      	nop
    853e:	370c      	adds	r7, #12
    8540:	46bd      	mov	sp, r7
    8542:	f85d 7b04 	ldr.w	r7, [sp], #4
    8546:	4770      	bx	lr

00008548 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    8548:	b480      	push	{r7}
    854a:	b083      	sub	sp, #12
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8550:	687b      	ldr	r3, [r7, #4]
    8552:	2201      	movs	r2, #1
    8554:	725a      	strb	r2, [r3, #9]
}
    8556:	bf00      	nop
    8558:	370c      	adds	r7, #12
    855a:	46bd      	mov	sp, r7
    855c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8560:	4770      	bx	lr

00008562 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    8562:	b480      	push	{r7}
    8564:	b083      	sub	sp, #12
    8566:	af00      	add	r7, sp, #0
    8568:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    856a:	687b      	ldr	r3, [r7, #4]
    856c:	7a5b      	ldrb	r3, [r3, #9]
    856e:	b2db      	uxtb	r3, r3
    8570:	085b      	lsrs	r3, r3, #1
    8572:	f003 0301 	and.w	r3, r3, #1
    8576:	2b00      	cmp	r3, #0
    8578:	bf14      	ite	ne
    857a:	2301      	movne	r3, #1
    857c:	2300      	moveq	r3, #0
    857e:	b2db      	uxtb	r3, r3
}
    8580:	4618      	mov	r0, r3
    8582:	370c      	adds	r7, #12
    8584:	46bd      	mov	sp, r7
    8586:	f85d 7b04 	ldr.w	r7, [sp], #4
    858a:	4770      	bx	lr

0000858c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    858c:	b580      	push	{r7, lr}
    858e:	b082      	sub	sp, #8
    8590:	af00      	add	r7, sp, #0
    8592:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8594:	687b      	ldr	r3, [r7, #4]
    8596:	681b      	ldr	r3, [r3, #0]
    8598:	f043 0201 	orr.w	r2, r3, #1
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    85a0:	2101      	movs	r1, #1
    85a2:	6878      	ldr	r0, [r7, #4]
    85a4:	4b02      	ldr	r3, [pc, #8]	; (85b0 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    85a6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85a8:	bf00      	nop
    85aa:	3708      	adds	r7, #8
    85ac:	46bd      	mov	sp, r7
    85ae:	bd80      	pop	{r7, pc}
    85b0:	000084a1 	.word	0x000084a1

000085b4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    85b4:	b580      	push	{r7, lr}
    85b6:	b082      	sub	sp, #8
    85b8:	af00      	add	r7, sp, #0
    85ba:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	681b      	ldr	r3, [r3, #0]
    85c0:	f043 0202 	orr.w	r2, r3, #2
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    85c8:	2103      	movs	r1, #3
    85ca:	6878      	ldr	r0, [r7, #4]
    85cc:	4b02      	ldr	r3, [pc, #8]	; (85d8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    85ce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85d0:	bf00      	nop
    85d2:	3708      	adds	r7, #8
    85d4:	46bd      	mov	sp, r7
    85d6:	bd80      	pop	{r7, pc}
    85d8:	000084a1 	.word	0x000084a1

000085dc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    85dc:	b580      	push	{r7, lr}
    85de:	b084      	sub	sp, #16
    85e0:	af00      	add	r7, sp, #0
    85e2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    85e4:	2103      	movs	r1, #3
    85e6:	6878      	ldr	r0, [r7, #4]
    85e8:	4b09      	ldr	r3, [pc, #36]	; (8610 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    85ea:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	681b      	ldr	r3, [r3, #0]
    85f0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    85f2:	68fb      	ldr	r3, [r7, #12]
    85f4:	085b      	lsrs	r3, r3, #1
    85f6:	f003 0301 	and.w	r3, r3, #1
    85fa:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    85fc:	68fb      	ldr	r3, [r7, #12]
    85fe:	2b00      	cmp	r3, #0
    8600:	bf14      	ite	ne
    8602:	2301      	movne	r3, #1
    8604:	2300      	moveq	r3, #0
    8606:	b2db      	uxtb	r3, r3
}
    8608:	4618      	mov	r0, r3
    860a:	3710      	adds	r7, #16
    860c:	46bd      	mov	sp, r7
    860e:	bd80      	pop	{r7, pc}
    8610:	000084a1 	.word	0x000084a1

00008614 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8614:	b580      	push	{r7, lr}
    8616:	b082      	sub	sp, #8
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	681b      	ldr	r3, [r3, #0]
    8620:	f023 0202 	bic.w	r2, r3, #2
    8624:	687b      	ldr	r3, [r7, #4]
    8626:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8628:	2103      	movs	r1, #3
    862a:	6878      	ldr	r0, [r7, #4]
    862c:	4b02      	ldr	r3, [pc, #8]	; (8638 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    862e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8630:	bf00      	nop
    8632:	3708      	adds	r7, #8
    8634:	46bd      	mov	sp, r7
    8636:	bd80      	pop	{r7, pc}
    8638:	000084a1 	.word	0x000084a1

0000863c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    863c:	b480      	push	{r7}
    863e:	b085      	sub	sp, #20
    8640:	af00      	add	r7, sp, #0
    8642:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8644:	687b      	ldr	r3, [r7, #4]
    8646:	681b      	ldr	r3, [r3, #0]
    8648:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    864a:	68fb      	ldr	r3, [r7, #12]
    864c:	089b      	lsrs	r3, r3, #2
    864e:	f003 0303 	and.w	r3, r3, #3
    8652:	60fb      	str	r3, [r7, #12]
	return tmp;
    8654:	68fb      	ldr	r3, [r7, #12]
}
    8656:	4618      	mov	r0, r3
    8658:	3714      	adds	r7, #20
    865a:	46bd      	mov	sp, r7
    865c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8660:	4770      	bx	lr
	...

00008664 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8664:	b580      	push	{r7, lr}
    8666:	b084      	sub	sp, #16
    8668:	af00      	add	r7, sp, #0
    866a:	6078      	str	r0, [r7, #4]
    866c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    866e:	2103      	movs	r1, #3
    8670:	6878      	ldr	r0, [r7, #4]
    8672:	4b07      	ldr	r3, [pc, #28]	; (8690 <hri_tc_get_CTRLA_reg+0x2c>)
    8674:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	681b      	ldr	r3, [r3, #0]
    867a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    867c:	68fa      	ldr	r2, [r7, #12]
    867e:	683b      	ldr	r3, [r7, #0]
    8680:	4013      	ands	r3, r2
    8682:	60fb      	str	r3, [r7, #12]
	return tmp;
    8684:	68fb      	ldr	r3, [r7, #12]
}
    8686:	4618      	mov	r0, r3
    8688:	3710      	adds	r7, #16
    868a:	46bd      	mov	sp, r7
    868c:	bd80      	pop	{r7, pc}
    868e:	bf00      	nop
    8690:	000084a1 	.word	0x000084a1

00008694 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8694:	b580      	push	{r7, lr}
    8696:	b082      	sub	sp, #8
    8698:	af00      	add	r7, sp, #0
    869a:	6078      	str	r0, [r7, #4]
    869c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    869e:	687b      	ldr	r3, [r7, #4]
    86a0:	683a      	ldr	r2, [r7, #0]
    86a2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    86a4:	2103      	movs	r1, #3
    86a6:	6878      	ldr	r0, [r7, #4]
    86a8:	4b02      	ldr	r3, [pc, #8]	; (86b4 <hri_tc_write_CTRLA_reg+0x20>)
    86aa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    86ac:	bf00      	nop
    86ae:	3708      	adds	r7, #8
    86b0:	46bd      	mov	sp, r7
    86b2:	bd80      	pop	{r7, pc}
    86b4:	000084a1 	.word	0x000084a1

000086b8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    86b8:	b480      	push	{r7}
    86ba:	b083      	sub	sp, #12
    86bc:	af00      	add	r7, sp, #0
    86be:	6078      	str	r0, [r7, #4]
    86c0:	460b      	mov	r3, r1
    86c2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    86c4:	687b      	ldr	r3, [r7, #4]
    86c6:	887a      	ldrh	r2, [r7, #2]
    86c8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    86ca:	bf00      	nop
    86cc:	370c      	adds	r7, #12
    86ce:	46bd      	mov	sp, r7
    86d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d4:	4770      	bx	lr

000086d6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    86d6:	b480      	push	{r7}
    86d8:	b083      	sub	sp, #12
    86da:	af00      	add	r7, sp, #0
    86dc:	6078      	str	r0, [r7, #4]
    86de:	460b      	mov	r3, r1
    86e0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    86e2:	687b      	ldr	r3, [r7, #4]
    86e4:	78fa      	ldrb	r2, [r7, #3]
    86e6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    86e8:	bf00      	nop
    86ea:	370c      	adds	r7, #12
    86ec:	46bd      	mov	sp, r7
    86ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    86f2:	4770      	bx	lr

000086f4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    86f4:	b480      	push	{r7}
    86f6:	b083      	sub	sp, #12
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
    86fc:	460b      	mov	r3, r1
    86fe:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	78fa      	ldrb	r2, [r7, #3]
    8704:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    8706:	bf00      	nop
    8708:	370c      	adds	r7, #12
    870a:	46bd      	mov	sp, r7
    870c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8710:	4770      	bx	lr
	...

00008714 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8714:	b580      	push	{r7, lr}
    8716:	b082      	sub	sp, #8
    8718:	af00      	add	r7, sp, #0
    871a:	6078      	str	r0, [r7, #4]
    871c:	460b      	mov	r3, r1
    871e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	78fa      	ldrb	r2, [r7, #3]
    8724:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8726:	2120      	movs	r1, #32
    8728:	6878      	ldr	r0, [r7, #4]
    872a:	4b03      	ldr	r3, [pc, #12]	; (8738 <hri_tccount8_write_PER_reg+0x24>)
    872c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    872e:	bf00      	nop
    8730:	3708      	adds	r7, #8
    8732:	46bd      	mov	sp, r7
    8734:	bd80      	pop	{r7, pc}
    8736:	bf00      	nop
    8738:	000084a1 	.word	0x000084a1

0000873c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    873c:	b580      	push	{r7, lr}
    873e:	b082      	sub	sp, #8
    8740:	af00      	add	r7, sp, #0
    8742:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8744:	2120      	movs	r1, #32
    8746:	6878      	ldr	r0, [r7, #4]
    8748:	4b04      	ldr	r3, [pc, #16]	; (875c <hri_tccount8_read_PER_reg+0x20>)
    874a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	7edb      	ldrb	r3, [r3, #27]
    8750:	b2db      	uxtb	r3, r3
}
    8752:	4618      	mov	r0, r3
    8754:	3708      	adds	r7, #8
    8756:	46bd      	mov	sp, r7
    8758:	bd80      	pop	{r7, pc}
    875a:	bf00      	nop
    875c:	000084a1 	.word	0x000084a1

00008760 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    8760:	b580      	push	{r7, lr}
    8762:	b082      	sub	sp, #8
    8764:	af00      	add	r7, sp, #0
    8766:	6078      	str	r0, [r7, #4]
    8768:	460b      	mov	r3, r1
    876a:	70fb      	strb	r3, [r7, #3]
    876c:	4613      	mov	r3, r2
    876e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8770:	78fb      	ldrb	r3, [r7, #3]
    8772:	687a      	ldr	r2, [r7, #4]
    8774:	4413      	add	r3, r2
    8776:	78ba      	ldrb	r2, [r7, #2]
    8778:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    877a:	21c0      	movs	r1, #192	; 0xc0
    877c:	6878      	ldr	r0, [r7, #4]
    877e:	4b03      	ldr	r3, [pc, #12]	; (878c <hri_tccount8_write_CC_reg+0x2c>)
    8780:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8782:	bf00      	nop
    8784:	3708      	adds	r7, #8
    8786:	46bd      	mov	sp, r7
    8788:	bd80      	pop	{r7, pc}
    878a:	bf00      	nop
    878c:	000084a1 	.word	0x000084a1

00008790 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8790:	b580      	push	{r7, lr}
    8792:	b082      	sub	sp, #8
    8794:	af00      	add	r7, sp, #0
    8796:	6078      	str	r0, [r7, #4]
    8798:	460b      	mov	r3, r1
    879a:	70fb      	strb	r3, [r7, #3]
    879c:	4613      	mov	r3, r2
    879e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    87a0:	78fb      	ldrb	r3, [r7, #3]
    87a2:	687a      	ldr	r2, [r7, #4]
    87a4:	330c      	adds	r3, #12
    87a6:	005b      	lsls	r3, r3, #1
    87a8:	4413      	add	r3, r2
    87aa:	883a      	ldrh	r2, [r7, #0]
    87ac:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    87ae:	21c0      	movs	r1, #192	; 0xc0
    87b0:	6878      	ldr	r0, [r7, #4]
    87b2:	4b03      	ldr	r3, [pc, #12]	; (87c0 <hri_tccount16_write_CC_reg+0x30>)
    87b4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    87b6:	bf00      	nop
    87b8:	3708      	adds	r7, #8
    87ba:	46bd      	mov	sp, r7
    87bc:	bd80      	pop	{r7, pc}
    87be:	bf00      	nop
    87c0:	000084a1 	.word	0x000084a1

000087c4 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    87c4:	b580      	push	{r7, lr}
    87c6:	b082      	sub	sp, #8
    87c8:	af00      	add	r7, sp, #0
    87ca:	6078      	str	r0, [r7, #4]
    87cc:	460b      	mov	r3, r1
    87ce:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    87d0:	21c0      	movs	r1, #192	; 0xc0
    87d2:	6878      	ldr	r0, [r7, #4]
    87d4:	4b06      	ldr	r3, [pc, #24]	; (87f0 <hri_tccount16_read_CC_reg+0x2c>)
    87d6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    87d8:	78fb      	ldrb	r3, [r7, #3]
    87da:	687a      	ldr	r2, [r7, #4]
    87dc:	330c      	adds	r3, #12
    87de:	005b      	lsls	r3, r3, #1
    87e0:	4413      	add	r3, r2
    87e2:	889b      	ldrh	r3, [r3, #4]
    87e4:	b29b      	uxth	r3, r3
}
    87e6:	4618      	mov	r0, r3
    87e8:	3708      	adds	r7, #8
    87ea:	46bd      	mov	sp, r7
    87ec:	bd80      	pop	{r7, pc}
    87ee:	bf00      	nop
    87f0:	000084a1 	.word	0x000084a1

000087f4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    87f4:	b580      	push	{r7, lr}
    87f6:	b084      	sub	sp, #16
    87f8:	af00      	add	r7, sp, #0
    87fa:	60f8      	str	r0, [r7, #12]
    87fc:	460b      	mov	r3, r1
    87fe:	607a      	str	r2, [r7, #4]
    8800:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8802:	7afb      	ldrb	r3, [r7, #11]
    8804:	68fa      	ldr	r2, [r7, #12]
    8806:	3306      	adds	r3, #6
    8808:	009b      	lsls	r3, r3, #2
    880a:	4413      	add	r3, r2
    880c:	687a      	ldr	r2, [r7, #4]
    880e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8810:	21c0      	movs	r1, #192	; 0xc0
    8812:	68f8      	ldr	r0, [r7, #12]
    8814:	4b02      	ldr	r3, [pc, #8]	; (8820 <hri_tccount32_write_CC_reg+0x2c>)
    8816:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8818:	bf00      	nop
    881a:	3710      	adds	r7, #16
    881c:	46bd      	mov	sp, r7
    881e:	bd80      	pop	{r7, pc}
    8820:	000084a1 	.word	0x000084a1

00008824 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8824:	b580      	push	{r7, lr}
    8826:	b082      	sub	sp, #8
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
    882c:	460b      	mov	r3, r1
    882e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8830:	21c0      	movs	r1, #192	; 0xc0
    8832:	6878      	ldr	r0, [r7, #4]
    8834:	4b05      	ldr	r3, [pc, #20]	; (884c <hri_tccount32_read_CC_reg+0x28>)
    8836:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8838:	78fb      	ldrb	r3, [r7, #3]
    883a:	687a      	ldr	r2, [r7, #4]
    883c:	3306      	adds	r3, #6
    883e:	009b      	lsls	r3, r3, #2
    8840:	4413      	add	r3, r2
    8842:	685b      	ldr	r3, [r3, #4]
}
    8844:	4618      	mov	r0, r3
    8846:	3708      	adds	r7, #8
    8848:	46bd      	mov	sp, r7
    884a:	bd80      	pop	{r7, pc}
    884c:	000084a1 	.word	0x000084a1

00008850 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8850:	b580      	push	{r7, lr}
    8852:	b084      	sub	sp, #16
    8854:	af00      	add	r7, sp, #0
    8856:	6078      	str	r0, [r7, #4]
    8858:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    885a:	6838      	ldr	r0, [r7, #0]
    885c:	4b93      	ldr	r3, [pc, #588]	; (8aac <_tc_timer_init+0x25c>)
    885e:	4798      	blx	r3
    8860:	4603      	mov	r3, r0
    8862:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8864:	687b      	ldr	r3, [r7, #4]
    8866:	683a      	ldr	r2, [r7, #0]
    8868:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    886a:	22a4      	movs	r2, #164	; 0xa4
    886c:	4990      	ldr	r1, [pc, #576]	; (8ab0 <_tc_timer_init+0x260>)
    886e:	2001      	movs	r0, #1
    8870:	4b90      	ldr	r3, [pc, #576]	; (8ab4 <_tc_timer_init+0x264>)
    8872:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8874:	2101      	movs	r1, #1
    8876:	6838      	ldr	r0, [r7, #0]
    8878:	4b8f      	ldr	r3, [pc, #572]	; (8ab8 <_tc_timer_init+0x268>)
    887a:	4798      	blx	r3
    887c:	4603      	mov	r3, r0
    887e:	f083 0301 	eor.w	r3, r3, #1
    8882:	b2db      	uxtb	r3, r3
    8884:	2b00      	cmp	r3, #0
    8886:	d011      	beq.n	88ac <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8888:	2102      	movs	r1, #2
    888a:	6838      	ldr	r0, [r7, #0]
    888c:	4b8b      	ldr	r3, [pc, #556]	; (8abc <_tc_timer_init+0x26c>)
    888e:	4798      	blx	r3
    8890:	4603      	mov	r3, r0
    8892:	2b00      	cmp	r3, #0
    8894:	d006      	beq.n	88a4 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8896:	6838      	ldr	r0, [r7, #0]
    8898:	4b89      	ldr	r3, [pc, #548]	; (8ac0 <_tc_timer_init+0x270>)
    889a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    889c:	2102      	movs	r1, #2
    889e:	6838      	ldr	r0, [r7, #0]
    88a0:	4b88      	ldr	r3, [pc, #544]	; (8ac4 <_tc_timer_init+0x274>)
    88a2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    88a4:	2101      	movs	r1, #1
    88a6:	6838      	ldr	r0, [r7, #0]
    88a8:	4b87      	ldr	r3, [pc, #540]	; (8ac8 <_tc_timer_init+0x278>)
    88aa:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    88ac:	2101      	movs	r1, #1
    88ae:	6838      	ldr	r0, [r7, #0]
    88b0:	4b84      	ldr	r3, [pc, #528]	; (8ac4 <_tc_timer_init+0x274>)
    88b2:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    88b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88b8:	4984      	ldr	r1, [pc, #528]	; (8acc <_tc_timer_init+0x27c>)
    88ba:	4613      	mov	r3, r2
    88bc:	009b      	lsls	r3, r3, #2
    88be:	4413      	add	r3, r2
    88c0:	009b      	lsls	r3, r3, #2
    88c2:	440b      	add	r3, r1
    88c4:	3304      	adds	r3, #4
    88c6:	681b      	ldr	r3, [r3, #0]
    88c8:	4619      	mov	r1, r3
    88ca:	6838      	ldr	r0, [r7, #0]
    88cc:	4b7e      	ldr	r3, [pc, #504]	; (8ac8 <_tc_timer_init+0x278>)
    88ce:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    88d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88d4:	497d      	ldr	r1, [pc, #500]	; (8acc <_tc_timer_init+0x27c>)
    88d6:	4613      	mov	r3, r2
    88d8:	009b      	lsls	r3, r3, #2
    88da:	4413      	add	r3, r2
    88dc:	009b      	lsls	r3, r3, #2
    88de:	440b      	add	r3, r1
    88e0:	330a      	adds	r3, #10
    88e2:	781b      	ldrb	r3, [r3, #0]
    88e4:	4619      	mov	r1, r3
    88e6:	6838      	ldr	r0, [r7, #0]
    88e8:	4b79      	ldr	r3, [pc, #484]	; (8ad0 <_tc_timer_init+0x280>)
    88ea:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    88ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88f0:	4976      	ldr	r1, [pc, #472]	; (8acc <_tc_timer_init+0x27c>)
    88f2:	4613      	mov	r3, r2
    88f4:	009b      	lsls	r3, r3, #2
    88f6:	4413      	add	r3, r2
    88f8:	009b      	lsls	r3, r3, #2
    88fa:	440b      	add	r3, r1
    88fc:	3308      	adds	r3, #8
    88fe:	881b      	ldrh	r3, [r3, #0]
    8900:	4619      	mov	r1, r3
    8902:	6838      	ldr	r0, [r7, #0]
    8904:	4b73      	ldr	r3, [pc, #460]	; (8ad4 <_tc_timer_init+0x284>)
    8906:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8908:	2101      	movs	r1, #1
    890a:	6838      	ldr	r0, [r7, #0]
    890c:	4b72      	ldr	r3, [pc, #456]	; (8ad8 <_tc_timer_init+0x288>)
    890e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8910:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8914:	496d      	ldr	r1, [pc, #436]	; (8acc <_tc_timer_init+0x27c>)
    8916:	4613      	mov	r3, r2
    8918:	009b      	lsls	r3, r3, #2
    891a:	4413      	add	r3, r2
    891c:	009b      	lsls	r3, r3, #2
    891e:	440b      	add	r3, r1
    8920:	3304      	adds	r3, #4
    8922:	681b      	ldr	r3, [r3, #0]
    8924:	f003 030c 	and.w	r3, r3, #12
    8928:	2b08      	cmp	r3, #8
    892a:	d11e      	bne.n	896a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    892c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8930:	4966      	ldr	r1, [pc, #408]	; (8acc <_tc_timer_init+0x27c>)
    8932:	4613      	mov	r3, r2
    8934:	009b      	lsls	r3, r3, #2
    8936:	4413      	add	r3, r2
    8938:	009b      	lsls	r3, r3, #2
    893a:	440b      	add	r3, r1
    893c:	330c      	adds	r3, #12
    893e:	681b      	ldr	r3, [r3, #0]
    8940:	461a      	mov	r2, r3
    8942:	2100      	movs	r1, #0
    8944:	6838      	ldr	r0, [r7, #0]
    8946:	4b65      	ldr	r3, [pc, #404]	; (8adc <_tc_timer_init+0x28c>)
    8948:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    894a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    894e:	495f      	ldr	r1, [pc, #380]	; (8acc <_tc_timer_init+0x27c>)
    8950:	4613      	mov	r3, r2
    8952:	009b      	lsls	r3, r3, #2
    8954:	4413      	add	r3, r2
    8956:	009b      	lsls	r3, r3, #2
    8958:	440b      	add	r3, r1
    895a:	3310      	adds	r3, #16
    895c:	681b      	ldr	r3, [r3, #0]
    895e:	461a      	mov	r2, r3
    8960:	2101      	movs	r1, #1
    8962:	6838      	ldr	r0, [r7, #0]
    8964:	4b5d      	ldr	r3, [pc, #372]	; (8adc <_tc_timer_init+0x28c>)
    8966:	4798      	blx	r3
    8968:	e06a      	b.n	8a40 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    896a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    896e:	4957      	ldr	r1, [pc, #348]	; (8acc <_tc_timer_init+0x27c>)
    8970:	4613      	mov	r3, r2
    8972:	009b      	lsls	r3, r3, #2
    8974:	4413      	add	r3, r2
    8976:	009b      	lsls	r3, r3, #2
    8978:	440b      	add	r3, r1
    897a:	3304      	adds	r3, #4
    897c:	681b      	ldr	r3, [r3, #0]
    897e:	f003 030c 	and.w	r3, r3, #12
    8982:	2b00      	cmp	r3, #0
    8984:	d120      	bne.n	89c8 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8986:	f997 200f 	ldrsb.w	r2, [r7, #15]
    898a:	4950      	ldr	r1, [pc, #320]	; (8acc <_tc_timer_init+0x27c>)
    898c:	4613      	mov	r3, r2
    898e:	009b      	lsls	r3, r3, #2
    8990:	4413      	add	r3, r2
    8992:	009b      	lsls	r3, r3, #2
    8994:	440b      	add	r3, r1
    8996:	330c      	adds	r3, #12
    8998:	681b      	ldr	r3, [r3, #0]
    899a:	b29b      	uxth	r3, r3
    899c:	461a      	mov	r2, r3
    899e:	2100      	movs	r1, #0
    89a0:	6838      	ldr	r0, [r7, #0]
    89a2:	4b4f      	ldr	r3, [pc, #316]	; (8ae0 <_tc_timer_init+0x290>)
    89a4:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    89a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89aa:	4948      	ldr	r1, [pc, #288]	; (8acc <_tc_timer_init+0x27c>)
    89ac:	4613      	mov	r3, r2
    89ae:	009b      	lsls	r3, r3, #2
    89b0:	4413      	add	r3, r2
    89b2:	009b      	lsls	r3, r3, #2
    89b4:	440b      	add	r3, r1
    89b6:	3310      	adds	r3, #16
    89b8:	681b      	ldr	r3, [r3, #0]
    89ba:	b29b      	uxth	r3, r3
    89bc:	461a      	mov	r2, r3
    89be:	2101      	movs	r1, #1
    89c0:	6838      	ldr	r0, [r7, #0]
    89c2:	4b47      	ldr	r3, [pc, #284]	; (8ae0 <_tc_timer_init+0x290>)
    89c4:	4798      	blx	r3
    89c6:	e03b      	b.n	8a40 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    89c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89cc:	493f      	ldr	r1, [pc, #252]	; (8acc <_tc_timer_init+0x27c>)
    89ce:	4613      	mov	r3, r2
    89d0:	009b      	lsls	r3, r3, #2
    89d2:	4413      	add	r3, r2
    89d4:	009b      	lsls	r3, r3, #2
    89d6:	440b      	add	r3, r1
    89d8:	3304      	adds	r3, #4
    89da:	681b      	ldr	r3, [r3, #0]
    89dc:	f003 030c 	and.w	r3, r3, #12
    89e0:	2b04      	cmp	r3, #4
    89e2:	d12d      	bne.n	8a40 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    89e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89e8:	4938      	ldr	r1, [pc, #224]	; (8acc <_tc_timer_init+0x27c>)
    89ea:	4613      	mov	r3, r2
    89ec:	009b      	lsls	r3, r3, #2
    89ee:	4413      	add	r3, r2
    89f0:	009b      	lsls	r3, r3, #2
    89f2:	440b      	add	r3, r1
    89f4:	330c      	adds	r3, #12
    89f6:	681b      	ldr	r3, [r3, #0]
    89f8:	b2db      	uxtb	r3, r3
    89fa:	461a      	mov	r2, r3
    89fc:	2100      	movs	r1, #0
    89fe:	6838      	ldr	r0, [r7, #0]
    8a00:	4b38      	ldr	r3, [pc, #224]	; (8ae4 <_tc_timer_init+0x294>)
    8a02:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8a04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a08:	4930      	ldr	r1, [pc, #192]	; (8acc <_tc_timer_init+0x27c>)
    8a0a:	4613      	mov	r3, r2
    8a0c:	009b      	lsls	r3, r3, #2
    8a0e:	4413      	add	r3, r2
    8a10:	009b      	lsls	r3, r3, #2
    8a12:	440b      	add	r3, r1
    8a14:	3310      	adds	r3, #16
    8a16:	681b      	ldr	r3, [r3, #0]
    8a18:	b2db      	uxtb	r3, r3
    8a1a:	461a      	mov	r2, r3
    8a1c:	2101      	movs	r1, #1
    8a1e:	6838      	ldr	r0, [r7, #0]
    8a20:	4b30      	ldr	r3, [pc, #192]	; (8ae4 <_tc_timer_init+0x294>)
    8a22:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8a24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a28:	4928      	ldr	r1, [pc, #160]	; (8acc <_tc_timer_init+0x27c>)
    8a2a:	4613      	mov	r3, r2
    8a2c:	009b      	lsls	r3, r3, #2
    8a2e:	4413      	add	r3, r2
    8a30:	009b      	lsls	r3, r3, #2
    8a32:	440b      	add	r3, r1
    8a34:	330b      	adds	r3, #11
    8a36:	781b      	ldrb	r3, [r3, #0]
    8a38:	4619      	mov	r1, r3
    8a3a:	6838      	ldr	r0, [r7, #0]
    8a3c:	4b2a      	ldr	r3, [pc, #168]	; (8ae8 <_tc_timer_init+0x298>)
    8a3e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8a40:	6838      	ldr	r0, [r7, #0]
    8a42:	4b2a      	ldr	r3, [pc, #168]	; (8aec <_tc_timer_init+0x29c>)
    8a44:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8a46:	6879      	ldr	r1, [r7, #4]
    8a48:	6838      	ldr	r0, [r7, #0]
    8a4a:	4b29      	ldr	r3, [pc, #164]	; (8af0 <_tc_timer_init+0x2a0>)
    8a4c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8a4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a52:	491e      	ldr	r1, [pc, #120]	; (8acc <_tc_timer_init+0x27c>)
    8a54:	4613      	mov	r3, r2
    8a56:	009b      	lsls	r3, r3, #2
    8a58:	4413      	add	r3, r2
    8a5a:	009b      	lsls	r3, r3, #2
    8a5c:	440b      	add	r3, r1
    8a5e:	3302      	adds	r3, #2
    8a60:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a64:	4618      	mov	r0, r3
    8a66:	4b23      	ldr	r3, [pc, #140]	; (8af4 <_tc_timer_init+0x2a4>)
    8a68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8a6a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a6e:	4917      	ldr	r1, [pc, #92]	; (8acc <_tc_timer_init+0x27c>)
    8a70:	4613      	mov	r3, r2
    8a72:	009b      	lsls	r3, r3, #2
    8a74:	4413      	add	r3, r2
    8a76:	009b      	lsls	r3, r3, #2
    8a78:	440b      	add	r3, r1
    8a7a:	3302      	adds	r3, #2
    8a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a80:	4618      	mov	r0, r3
    8a82:	4b1d      	ldr	r3, [pc, #116]	; (8af8 <_tc_timer_init+0x2a8>)
    8a84:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8a86:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8a8a:	4910      	ldr	r1, [pc, #64]	; (8acc <_tc_timer_init+0x27c>)
    8a8c:	4613      	mov	r3, r2
    8a8e:	009b      	lsls	r3, r3, #2
    8a90:	4413      	add	r3, r2
    8a92:	009b      	lsls	r3, r3, #2
    8a94:	440b      	add	r3, r1
    8a96:	3302      	adds	r3, #2
    8a98:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a9c:	4618      	mov	r0, r3
    8a9e:	4b17      	ldr	r3, [pc, #92]	; (8afc <_tc_timer_init+0x2ac>)
    8aa0:	4798      	blx	r3

	return ERR_NONE;
    8aa2:	2300      	movs	r3, #0
}
    8aa4:	4618      	mov	r0, r3
    8aa6:	3710      	adds	r7, #16
    8aa8:	46bd      	mov	sp, r7
    8aaa:	bd80      	pop	{r7, pc}
    8aac:	000090e1 	.word	0x000090e1
    8ab0:	000111e0 	.word	0x000111e0
    8ab4:	0000445d 	.word	0x0000445d
    8ab8:	000084c5 	.word	0x000084c5
    8abc:	00008665 	.word	0x00008665
    8ac0:	00008615 	.word	0x00008615
    8ac4:	000084a1 	.word	0x000084a1
    8ac8:	00008695 	.word	0x00008695
    8acc:	20000110 	.word	0x20000110
    8ad0:	000086f5 	.word	0x000086f5
    8ad4:	000086b9 	.word	0x000086b9
    8ad8:	000086d7 	.word	0x000086d7
    8adc:	000087f5 	.word	0x000087f5
    8ae0:	00008791 	.word	0x00008791
    8ae4:	00008761 	.word	0x00008761
    8ae8:	00008715 	.word	0x00008715
    8aec:	00008549 	.word	0x00008549
    8af0:	00009149 	.word	0x00009149
    8af4:	00008421 	.word	0x00008421
    8af8:	00008465 	.word	0x00008465
    8afc:	000083e5 	.word	0x000083e5

00008b00 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b084      	sub	sp, #16
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
    8b08:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8b0a:	6838      	ldr	r0, [r7, #0]
    8b0c:	4b73      	ldr	r3, [pc, #460]	; (8cdc <_pwm_init+0x1dc>)
    8b0e:	4798      	blx	r3
    8b10:	4603      	mov	r3, r0
    8b12:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	683a      	ldr	r2, [r7, #0]
    8b18:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8b1a:	2101      	movs	r1, #1
    8b1c:	6838      	ldr	r0, [r7, #0]
    8b1e:	4b70      	ldr	r3, [pc, #448]	; (8ce0 <_pwm_init+0x1e0>)
    8b20:	4798      	blx	r3
    8b22:	4603      	mov	r3, r0
    8b24:	f083 0301 	eor.w	r3, r3, #1
    8b28:	b2db      	uxtb	r3, r3
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d011      	beq.n	8b52 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8b2e:	2102      	movs	r1, #2
    8b30:	6838      	ldr	r0, [r7, #0]
    8b32:	4b6c      	ldr	r3, [pc, #432]	; (8ce4 <_pwm_init+0x1e4>)
    8b34:	4798      	blx	r3
    8b36:	4603      	mov	r3, r0
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d006      	beq.n	8b4a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8b3c:	6838      	ldr	r0, [r7, #0]
    8b3e:	4b6a      	ldr	r3, [pc, #424]	; (8ce8 <_pwm_init+0x1e8>)
    8b40:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8b42:	2102      	movs	r1, #2
    8b44:	6838      	ldr	r0, [r7, #0]
    8b46:	4b69      	ldr	r3, [pc, #420]	; (8cec <_pwm_init+0x1ec>)
    8b48:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8b4a:	2101      	movs	r1, #1
    8b4c:	6838      	ldr	r0, [r7, #0]
    8b4e:	4b68      	ldr	r3, [pc, #416]	; (8cf0 <_pwm_init+0x1f0>)
    8b50:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8b52:	2101      	movs	r1, #1
    8b54:	6838      	ldr	r0, [r7, #0]
    8b56:	4b65      	ldr	r3, [pc, #404]	; (8cec <_pwm_init+0x1ec>)
    8b58:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8b5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b5e:	4965      	ldr	r1, [pc, #404]	; (8cf4 <_pwm_init+0x1f4>)
    8b60:	4613      	mov	r3, r2
    8b62:	009b      	lsls	r3, r3, #2
    8b64:	4413      	add	r3, r2
    8b66:	009b      	lsls	r3, r3, #2
    8b68:	440b      	add	r3, r1
    8b6a:	3304      	adds	r3, #4
    8b6c:	681b      	ldr	r3, [r3, #0]
    8b6e:	4619      	mov	r1, r3
    8b70:	6838      	ldr	r0, [r7, #0]
    8b72:	4b5f      	ldr	r3, [pc, #380]	; (8cf0 <_pwm_init+0x1f0>)
    8b74:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8b76:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b7a:	495e      	ldr	r1, [pc, #376]	; (8cf4 <_pwm_init+0x1f4>)
    8b7c:	4613      	mov	r3, r2
    8b7e:	009b      	lsls	r3, r3, #2
    8b80:	4413      	add	r3, r2
    8b82:	009b      	lsls	r3, r3, #2
    8b84:	440b      	add	r3, r1
    8b86:	330a      	adds	r3, #10
    8b88:	781b      	ldrb	r3, [r3, #0]
    8b8a:	4619      	mov	r1, r3
    8b8c:	6838      	ldr	r0, [r7, #0]
    8b8e:	4b5a      	ldr	r3, [pc, #360]	; (8cf8 <_pwm_init+0x1f8>)
    8b90:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8b92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b96:	4957      	ldr	r1, [pc, #348]	; (8cf4 <_pwm_init+0x1f4>)
    8b98:	4613      	mov	r3, r2
    8b9a:	009b      	lsls	r3, r3, #2
    8b9c:	4413      	add	r3, r2
    8b9e:	009b      	lsls	r3, r3, #2
    8ba0:	440b      	add	r3, r1
    8ba2:	3308      	adds	r3, #8
    8ba4:	881b      	ldrh	r3, [r3, #0]
    8ba6:	4619      	mov	r1, r3
    8ba8:	6838      	ldr	r0, [r7, #0]
    8baa:	4b54      	ldr	r3, [pc, #336]	; (8cfc <_pwm_init+0x1fc>)
    8bac:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8bae:	2103      	movs	r1, #3
    8bb0:	6838      	ldr	r0, [r7, #0]
    8bb2:	4b53      	ldr	r3, [pc, #332]	; (8d00 <_pwm_init+0x200>)
    8bb4:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8bb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8bba:	494e      	ldr	r1, [pc, #312]	; (8cf4 <_pwm_init+0x1f4>)
    8bbc:	4613      	mov	r3, r2
    8bbe:	009b      	lsls	r3, r3, #2
    8bc0:	4413      	add	r3, r2
    8bc2:	009b      	lsls	r3, r3, #2
    8bc4:	440b      	add	r3, r1
    8bc6:	3304      	adds	r3, #4
    8bc8:	681b      	ldr	r3, [r3, #0]
    8bca:	f003 030c 	and.w	r3, r3, #12
    8bce:	2b08      	cmp	r3, #8
    8bd0:	d11e      	bne.n	8c10 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8bd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8bd6:	4947      	ldr	r1, [pc, #284]	; (8cf4 <_pwm_init+0x1f4>)
    8bd8:	4613      	mov	r3, r2
    8bda:	009b      	lsls	r3, r3, #2
    8bdc:	4413      	add	r3, r2
    8bde:	009b      	lsls	r3, r3, #2
    8be0:	440b      	add	r3, r1
    8be2:	330c      	adds	r3, #12
    8be4:	681b      	ldr	r3, [r3, #0]
    8be6:	461a      	mov	r2, r3
    8be8:	2100      	movs	r1, #0
    8bea:	6838      	ldr	r0, [r7, #0]
    8bec:	4b45      	ldr	r3, [pc, #276]	; (8d04 <_pwm_init+0x204>)
    8bee:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8bf0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8bf4:	493f      	ldr	r1, [pc, #252]	; (8cf4 <_pwm_init+0x1f4>)
    8bf6:	4613      	mov	r3, r2
    8bf8:	009b      	lsls	r3, r3, #2
    8bfa:	4413      	add	r3, r2
    8bfc:	009b      	lsls	r3, r3, #2
    8bfe:	440b      	add	r3, r1
    8c00:	3310      	adds	r3, #16
    8c02:	681b      	ldr	r3, [r3, #0]
    8c04:	461a      	mov	r2, r3
    8c06:	2101      	movs	r1, #1
    8c08:	6838      	ldr	r0, [r7, #0]
    8c0a:	4b3e      	ldr	r3, [pc, #248]	; (8d04 <_pwm_init+0x204>)
    8c0c:	4798      	blx	r3
    8c0e:	e031      	b.n	8c74 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8c10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c14:	4937      	ldr	r1, [pc, #220]	; (8cf4 <_pwm_init+0x1f4>)
    8c16:	4613      	mov	r3, r2
    8c18:	009b      	lsls	r3, r3, #2
    8c1a:	4413      	add	r3, r2
    8c1c:	009b      	lsls	r3, r3, #2
    8c1e:	440b      	add	r3, r1
    8c20:	3304      	adds	r3, #4
    8c22:	681b      	ldr	r3, [r3, #0]
    8c24:	f003 030c 	and.w	r3, r3, #12
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d120      	bne.n	8c6e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8c2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c30:	4930      	ldr	r1, [pc, #192]	; (8cf4 <_pwm_init+0x1f4>)
    8c32:	4613      	mov	r3, r2
    8c34:	009b      	lsls	r3, r3, #2
    8c36:	4413      	add	r3, r2
    8c38:	009b      	lsls	r3, r3, #2
    8c3a:	440b      	add	r3, r1
    8c3c:	330c      	adds	r3, #12
    8c3e:	681b      	ldr	r3, [r3, #0]
    8c40:	b29b      	uxth	r3, r3
    8c42:	461a      	mov	r2, r3
    8c44:	2100      	movs	r1, #0
    8c46:	6838      	ldr	r0, [r7, #0]
    8c48:	4b2f      	ldr	r3, [pc, #188]	; (8d08 <_pwm_init+0x208>)
    8c4a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8c4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c50:	4928      	ldr	r1, [pc, #160]	; (8cf4 <_pwm_init+0x1f4>)
    8c52:	4613      	mov	r3, r2
    8c54:	009b      	lsls	r3, r3, #2
    8c56:	4413      	add	r3, r2
    8c58:	009b      	lsls	r3, r3, #2
    8c5a:	440b      	add	r3, r1
    8c5c:	3310      	adds	r3, #16
    8c5e:	681b      	ldr	r3, [r3, #0]
    8c60:	b29b      	uxth	r3, r3
    8c62:	461a      	mov	r2, r3
    8c64:	2101      	movs	r1, #1
    8c66:	6838      	ldr	r0, [r7, #0]
    8c68:	4b27      	ldr	r3, [pc, #156]	; (8d08 <_pwm_init+0x208>)
    8c6a:	4798      	blx	r3
    8c6c:	e002      	b.n	8c74 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8c6e:	f04f 33ff 	mov.w	r3, #4294967295
    8c72:	e02e      	b.n	8cd2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8c74:	6879      	ldr	r1, [r7, #4]
    8c76:	6838      	ldr	r0, [r7, #0]
    8c78:	4b24      	ldr	r3, [pc, #144]	; (8d0c <_pwm_init+0x20c>)
    8c7a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8c7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c80:	491c      	ldr	r1, [pc, #112]	; (8cf4 <_pwm_init+0x1f4>)
    8c82:	4613      	mov	r3, r2
    8c84:	009b      	lsls	r3, r3, #2
    8c86:	4413      	add	r3, r2
    8c88:	009b      	lsls	r3, r3, #2
    8c8a:	440b      	add	r3, r1
    8c8c:	3302      	adds	r3, #2
    8c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c92:	4618      	mov	r0, r3
    8c94:	4b1e      	ldr	r3, [pc, #120]	; (8d10 <_pwm_init+0x210>)
    8c96:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8c98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c9c:	4915      	ldr	r1, [pc, #84]	; (8cf4 <_pwm_init+0x1f4>)
    8c9e:	4613      	mov	r3, r2
    8ca0:	009b      	lsls	r3, r3, #2
    8ca2:	4413      	add	r3, r2
    8ca4:	009b      	lsls	r3, r3, #2
    8ca6:	440b      	add	r3, r1
    8ca8:	3302      	adds	r3, #2
    8caa:	f9b3 3000 	ldrsh.w	r3, [r3]
    8cae:	4618      	mov	r0, r3
    8cb0:	4b18      	ldr	r3, [pc, #96]	; (8d14 <_pwm_init+0x214>)
    8cb2:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8cb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8cb8:	490e      	ldr	r1, [pc, #56]	; (8cf4 <_pwm_init+0x1f4>)
    8cba:	4613      	mov	r3, r2
    8cbc:	009b      	lsls	r3, r3, #2
    8cbe:	4413      	add	r3, r2
    8cc0:	009b      	lsls	r3, r3, #2
    8cc2:	440b      	add	r3, r1
    8cc4:	3302      	adds	r3, #2
    8cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
    8cca:	4618      	mov	r0, r3
    8ccc:	4b12      	ldr	r3, [pc, #72]	; (8d18 <_pwm_init+0x218>)
    8cce:	4798      	blx	r3

	return 0;
    8cd0:	2300      	movs	r3, #0
}
    8cd2:	4618      	mov	r0, r3
    8cd4:	3710      	adds	r7, #16
    8cd6:	46bd      	mov	sp, r7
    8cd8:	bd80      	pop	{r7, pc}
    8cda:	bf00      	nop
    8cdc:	000090e1 	.word	0x000090e1
    8ce0:	000084c5 	.word	0x000084c5
    8ce4:	00008665 	.word	0x00008665
    8ce8:	00008615 	.word	0x00008615
    8cec:	000084a1 	.word	0x000084a1
    8cf0:	00008695 	.word	0x00008695
    8cf4:	20000110 	.word	0x20000110
    8cf8:	000086f5 	.word	0x000086f5
    8cfc:	000086b9 	.word	0x000086b9
    8d00:	000086d7 	.word	0x000086d7
    8d04:	000087f5 	.word	0x000087f5
    8d08:	00008791 	.word	0x00008791
    8d0c:	00009149 	.word	0x00009149
    8d10:	00008421 	.word	0x00008421
    8d14:	00008465 	.word	0x00008465
    8d18:	000083e5 	.word	0x000083e5

00008d1c <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b084      	sub	sp, #16
    8d20:	af00      	add	r7, sp, #0
    8d22:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	68db      	ldr	r3, [r3, #12]
    8d28:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8d2a:	68f8      	ldr	r0, [r7, #12]
    8d2c:	4b10      	ldr	r3, [pc, #64]	; (8d70 <_tc_timer_deinit+0x54>)
    8d2e:	4798      	blx	r3
    8d30:	4603      	mov	r3, r0
    8d32:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8d34:	22f9      	movs	r2, #249	; 0xf9
    8d36:	490f      	ldr	r1, [pc, #60]	; (8d74 <_tc_timer_deinit+0x58>)
    8d38:	2001      	movs	r0, #1
    8d3a:	4b0f      	ldr	r3, [pc, #60]	; (8d78 <_tc_timer_deinit+0x5c>)
    8d3c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8d3e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8d42:	490e      	ldr	r1, [pc, #56]	; (8d7c <_tc_timer_deinit+0x60>)
    8d44:	4613      	mov	r3, r2
    8d46:	009b      	lsls	r3, r3, #2
    8d48:	4413      	add	r3, r2
    8d4a:	009b      	lsls	r3, r3, #2
    8d4c:	440b      	add	r3, r1
    8d4e:	3302      	adds	r3, #2
    8d50:	f9b3 3000 	ldrsh.w	r3, [r3]
    8d54:	4618      	mov	r0, r3
    8d56:	4b0a      	ldr	r3, [pc, #40]	; (8d80 <_tc_timer_deinit+0x64>)
    8d58:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8d5a:	68f8      	ldr	r0, [r7, #12]
    8d5c:	4b09      	ldr	r3, [pc, #36]	; (8d84 <_tc_timer_deinit+0x68>)
    8d5e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8d60:	68f8      	ldr	r0, [r7, #12]
    8d62:	4b09      	ldr	r3, [pc, #36]	; (8d88 <_tc_timer_deinit+0x6c>)
    8d64:	4798      	blx	r3
}
    8d66:	bf00      	nop
    8d68:	3710      	adds	r7, #16
    8d6a:	46bd      	mov	sp, r7
    8d6c:	bd80      	pop	{r7, pc}
    8d6e:	bf00      	nop
    8d70:	000090e1 	.word	0x000090e1
    8d74:	000111e0 	.word	0x000111e0
    8d78:	0000445d 	.word	0x0000445d
    8d7c:	20000110 	.word	0x20000110
    8d80:	00008421 	.word	0x00008421
    8d84:	00008615 	.word	0x00008615
    8d88:	0000858d 	.word	0x0000858d

00008d8c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b082      	sub	sp, #8
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	68db      	ldr	r3, [r3, #12]
    8d98:	4618      	mov	r0, r3
    8d9a:	4b03      	ldr	r3, [pc, #12]	; (8da8 <_tc_timer_start+0x1c>)
    8d9c:	4798      	blx	r3
}
    8d9e:	bf00      	nop
    8da0:	3708      	adds	r7, #8
    8da2:	46bd      	mov	sp, r7
    8da4:	bd80      	pop	{r7, pc}
    8da6:	bf00      	nop
    8da8:	000085b5 	.word	0x000085b5

00008dac <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8dac:	b580      	push	{r7, lr}
    8dae:	b082      	sub	sp, #8
    8db0:	af00      	add	r7, sp, #0
    8db2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	691b      	ldr	r3, [r3, #16]
    8db8:	4618      	mov	r0, r3
    8dba:	4b03      	ldr	r3, [pc, #12]	; (8dc8 <_pwm_enable+0x1c>)
    8dbc:	4798      	blx	r3
}
    8dbe:	bf00      	nop
    8dc0:	3708      	adds	r7, #8
    8dc2:	46bd      	mov	sp, r7
    8dc4:	bd80      	pop	{r7, pc}
    8dc6:	bf00      	nop
    8dc8:	000085b5 	.word	0x000085b5

00008dcc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8dcc:	b580      	push	{r7, lr}
    8dce:	b082      	sub	sp, #8
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8dd4:	687b      	ldr	r3, [r7, #4]
    8dd6:	68db      	ldr	r3, [r3, #12]
    8dd8:	4618      	mov	r0, r3
    8dda:	4b03      	ldr	r3, [pc, #12]	; (8de8 <_tc_timer_stop+0x1c>)
    8ddc:	4798      	blx	r3
}
    8dde:	bf00      	nop
    8de0:	3708      	adds	r7, #8
    8de2:	46bd      	mov	sp, r7
    8de4:	bd80      	pop	{r7, pc}
    8de6:	bf00      	nop
    8de8:	00008615 	.word	0x00008615

00008dec <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8dec:	b580      	push	{r7, lr}
    8dee:	b084      	sub	sp, #16
    8df0:	af00      	add	r7, sp, #0
    8df2:	6078      	str	r0, [r7, #4]
    8df4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	68db      	ldr	r3, [r3, #12]
    8dfa:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8dfc:	68f8      	ldr	r0, [r7, #12]
    8dfe:	4b14      	ldr	r3, [pc, #80]	; (8e50 <_tc_timer_set_period+0x64>)
    8e00:	4798      	blx	r3
    8e02:	4603      	mov	r3, r0
    8e04:	2b02      	cmp	r3, #2
    8e06:	d105      	bne.n	8e14 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8e08:	683a      	ldr	r2, [r7, #0]
    8e0a:	2100      	movs	r1, #0
    8e0c:	68f8      	ldr	r0, [r7, #12]
    8e0e:	4b11      	ldr	r3, [pc, #68]	; (8e54 <_tc_timer_set_period+0x68>)
    8e10:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8e12:	e019      	b.n	8e48 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e14:	68f8      	ldr	r0, [r7, #12]
    8e16:	4b0e      	ldr	r3, [pc, #56]	; (8e50 <_tc_timer_set_period+0x64>)
    8e18:	4798      	blx	r3
    8e1a:	4603      	mov	r3, r0
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d107      	bne.n	8e30 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8e20:	683b      	ldr	r3, [r7, #0]
    8e22:	b29b      	uxth	r3, r3
    8e24:	461a      	mov	r2, r3
    8e26:	2100      	movs	r1, #0
    8e28:	68f8      	ldr	r0, [r7, #12]
    8e2a:	4b0b      	ldr	r3, [pc, #44]	; (8e58 <_tc_timer_set_period+0x6c>)
    8e2c:	4798      	blx	r3
}
    8e2e:	e00b      	b.n	8e48 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e30:	68f8      	ldr	r0, [r7, #12]
    8e32:	4b07      	ldr	r3, [pc, #28]	; (8e50 <_tc_timer_set_period+0x64>)
    8e34:	4798      	blx	r3
    8e36:	4603      	mov	r3, r0
    8e38:	2b01      	cmp	r3, #1
    8e3a:	d105      	bne.n	8e48 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8e3c:	683b      	ldr	r3, [r7, #0]
    8e3e:	b2db      	uxtb	r3, r3
    8e40:	4619      	mov	r1, r3
    8e42:	68f8      	ldr	r0, [r7, #12]
    8e44:	4b05      	ldr	r3, [pc, #20]	; (8e5c <_tc_timer_set_period+0x70>)
    8e46:	4798      	blx	r3
}
    8e48:	bf00      	nop
    8e4a:	3710      	adds	r7, #16
    8e4c:	46bd      	mov	sp, r7
    8e4e:	bd80      	pop	{r7, pc}
    8e50:	0000863d 	.word	0x0000863d
    8e54:	000087f5 	.word	0x000087f5
    8e58:	00008791 	.word	0x00008791
    8e5c:	00008715 	.word	0x00008715

00008e60 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8e60:	b580      	push	{r7, lr}
    8e62:	b084      	sub	sp, #16
    8e64:	af00      	add	r7, sp, #0
    8e66:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	68db      	ldr	r3, [r3, #12]
    8e6c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e6e:	68f8      	ldr	r0, [r7, #12]
    8e70:	4b13      	ldr	r3, [pc, #76]	; (8ec0 <_tc_timer_get_period+0x60>)
    8e72:	4798      	blx	r3
    8e74:	4603      	mov	r3, r0
    8e76:	2b02      	cmp	r3, #2
    8e78:	d105      	bne.n	8e86 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8e7a:	2100      	movs	r1, #0
    8e7c:	68f8      	ldr	r0, [r7, #12]
    8e7e:	4b11      	ldr	r3, [pc, #68]	; (8ec4 <_tc_timer_get_period+0x64>)
    8e80:	4798      	blx	r3
    8e82:	4603      	mov	r3, r0
    8e84:	e017      	b.n	8eb6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e86:	68f8      	ldr	r0, [r7, #12]
    8e88:	4b0d      	ldr	r3, [pc, #52]	; (8ec0 <_tc_timer_get_period+0x60>)
    8e8a:	4798      	blx	r3
    8e8c:	4603      	mov	r3, r0
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d105      	bne.n	8e9e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8e92:	2100      	movs	r1, #0
    8e94:	68f8      	ldr	r0, [r7, #12]
    8e96:	4b0c      	ldr	r3, [pc, #48]	; (8ec8 <_tc_timer_get_period+0x68>)
    8e98:	4798      	blx	r3
    8e9a:	4603      	mov	r3, r0
    8e9c:	e00b      	b.n	8eb6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e9e:	68f8      	ldr	r0, [r7, #12]
    8ea0:	4b07      	ldr	r3, [pc, #28]	; (8ec0 <_tc_timer_get_period+0x60>)
    8ea2:	4798      	blx	r3
    8ea4:	4603      	mov	r3, r0
    8ea6:	2b01      	cmp	r3, #1
    8ea8:	d104      	bne.n	8eb4 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8eaa:	68f8      	ldr	r0, [r7, #12]
    8eac:	4b07      	ldr	r3, [pc, #28]	; (8ecc <_tc_timer_get_period+0x6c>)
    8eae:	4798      	blx	r3
    8eb0:	4603      	mov	r3, r0
    8eb2:	e000      	b.n	8eb6 <_tc_timer_get_period+0x56>
	}

	return 0;
    8eb4:	2300      	movs	r3, #0
}
    8eb6:	4618      	mov	r0, r3
    8eb8:	3710      	adds	r7, #16
    8eba:	46bd      	mov	sp, r7
    8ebc:	bd80      	pop	{r7, pc}
    8ebe:	bf00      	nop
    8ec0:	0000863d 	.word	0x0000863d
    8ec4:	00008825 	.word	0x00008825
    8ec8:	000087c5 	.word	0x000087c5
    8ecc:	0000873d 	.word	0x0000873d

00008ed0 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8ed0:	b580      	push	{r7, lr}
    8ed2:	b082      	sub	sp, #8
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	68db      	ldr	r3, [r3, #12]
    8edc:	4618      	mov	r0, r3
    8ede:	4b03      	ldr	r3, [pc, #12]	; (8eec <_tc_timer_is_started+0x1c>)
    8ee0:	4798      	blx	r3
    8ee2:	4603      	mov	r3, r0
}
    8ee4:	4618      	mov	r0, r3
    8ee6:	3708      	adds	r7, #8
    8ee8:	46bd      	mov	sp, r7
    8eea:	bd80      	pop	{r7, pc}
    8eec:	000085dd 	.word	0x000085dd

00008ef0 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8ef0:	b580      	push	{r7, lr}
    8ef2:	b082      	sub	sp, #8
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	691b      	ldr	r3, [r3, #16]
    8efc:	4618      	mov	r0, r3
    8efe:	4b03      	ldr	r3, [pc, #12]	; (8f0c <_pwm_is_enabled+0x1c>)
    8f00:	4798      	blx	r3
    8f02:	4603      	mov	r3, r0
}
    8f04:	4618      	mov	r0, r3
    8f06:	3708      	adds	r7, #8
    8f08:	46bd      	mov	sp, r7
    8f0a:	bd80      	pop	{r7, pc}
    8f0c:	000085dd 	.word	0x000085dd

00008f10 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8f10:	b480      	push	{r7}
    8f12:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8f14:	4b02      	ldr	r3, [pc, #8]	; (8f20 <_tc_get_timer+0x10>)
}
    8f16:	4618      	mov	r0, r3
    8f18:	46bd      	mov	sp, r7
    8f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1e:	4770      	bx	lr
    8f20:	20000188 	.word	0x20000188

00008f24 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8f24:	b480      	push	{r7}
    8f26:	af00      	add	r7, sp, #0
	return NULL;
    8f28:	2300      	movs	r3, #0
}
    8f2a:	4618      	mov	r0, r3
    8f2c:	46bd      	mov	sp, r7
    8f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f32:	4770      	bx	lr

00008f34 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8f34:	b580      	push	{r7, lr}
    8f36:	b084      	sub	sp, #16
    8f38:	af00      	add	r7, sp, #0
    8f3a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	68db      	ldr	r3, [r3, #12]
    8f40:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8f42:	68f8      	ldr	r0, [r7, #12]
    8f44:	4b0e      	ldr	r3, [pc, #56]	; (8f80 <_tc_timer_set_irq+0x4c>)
    8f46:	4798      	blx	r3
    8f48:	4603      	mov	r3, r0
    8f4a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8f4c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8f50:	490c      	ldr	r1, [pc, #48]	; (8f84 <_tc_timer_set_irq+0x50>)
    8f52:	2001      	movs	r0, #1
    8f54:	4b0c      	ldr	r3, [pc, #48]	; (8f88 <_tc_timer_set_irq+0x54>)
    8f56:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8f58:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8f5c:	490b      	ldr	r1, [pc, #44]	; (8f8c <_tc_timer_set_irq+0x58>)
    8f5e:	4613      	mov	r3, r2
    8f60:	009b      	lsls	r3, r3, #2
    8f62:	4413      	add	r3, r2
    8f64:	009b      	lsls	r3, r3, #2
    8f66:	440b      	add	r3, r1
    8f68:	3302      	adds	r3, #2
    8f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
    8f6e:	b2db      	uxtb	r3, r3
    8f70:	4618      	mov	r0, r3
    8f72:	4b07      	ldr	r3, [pc, #28]	; (8f90 <_tc_timer_set_irq+0x5c>)
    8f74:	4798      	blx	r3
}
    8f76:	bf00      	nop
    8f78:	3710      	adds	r7, #16
    8f7a:	46bd      	mov	sp, r7
    8f7c:	bd80      	pop	{r7, pc}
    8f7e:	bf00      	nop
    8f80:	000090e1 	.word	0x000090e1
    8f84:	000111e0 	.word	0x000111e0
    8f88:	0000445d 	.word	0x0000445d
    8f8c:	20000110 	.word	0x20000110
    8f90:	00004ca5 	.word	0x00004ca5

00008f94 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8f94:	b580      	push	{r7, lr}
    8f96:	b084      	sub	sp, #16
    8f98:	af00      	add	r7, sp, #0
    8f9a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	68db      	ldr	r3, [r3, #12]
    8fa0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8fa2:	68f8      	ldr	r0, [r7, #12]
    8fa4:	4b07      	ldr	r3, [pc, #28]	; (8fc4 <tc_interrupt_handler+0x30>)
    8fa6:	4798      	blx	r3
    8fa8:	4603      	mov	r3, r0
    8faa:	2b00      	cmp	r3, #0
    8fac:	d006      	beq.n	8fbc <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8fae:	68f8      	ldr	r0, [r7, #12]
    8fb0:	4b05      	ldr	r3, [pc, #20]	; (8fc8 <tc_interrupt_handler+0x34>)
    8fb2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	681b      	ldr	r3, [r3, #0]
    8fb8:	6878      	ldr	r0, [r7, #4]
    8fba:	4798      	blx	r3
	}
}
    8fbc:	bf00      	nop
    8fbe:	3710      	adds	r7, #16
    8fc0:	46bd      	mov	sp, r7
    8fc2:	bd80      	pop	{r7, pc}
    8fc4:	000084ed 	.word	0x000084ed
    8fc8:	00008515 	.word	0x00008515

00008fcc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8fcc:	b580      	push	{r7, lr}
    8fce:	b084      	sub	sp, #16
    8fd0:	af00      	add	r7, sp, #0
    8fd2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	691b      	ldr	r3, [r3, #16]
    8fd8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8fda:	68f8      	ldr	r0, [r7, #12]
    8fdc:	4b12      	ldr	r3, [pc, #72]	; (9028 <tc_pwm_interrupt_handler+0x5c>)
    8fde:	4798      	blx	r3
    8fe0:	4603      	mov	r3, r0
    8fe2:	2b00      	cmp	r3, #0
    8fe4:	d00a      	beq.n	8ffc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8fe6:	68f8      	ldr	r0, [r7, #12]
    8fe8:	4b10      	ldr	r3, [pc, #64]	; (902c <tc_pwm_interrupt_handler+0x60>)
    8fea:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	681b      	ldr	r3, [r3, #0]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d003      	beq.n	8ffc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	681b      	ldr	r3, [r3, #0]
    8ff8:	6878      	ldr	r0, [r7, #4]
    8ffa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8ffc:	68f8      	ldr	r0, [r7, #12]
    8ffe:	4b0c      	ldr	r3, [pc, #48]	; (9030 <tc_pwm_interrupt_handler+0x64>)
    9000:	4798      	blx	r3
    9002:	4603      	mov	r3, r0
    9004:	2b00      	cmp	r3, #0
    9006:	d00a      	beq.n	901e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    9008:	68f8      	ldr	r0, [r7, #12]
    900a:	4b0a      	ldr	r3, [pc, #40]	; (9034 <tc_pwm_interrupt_handler+0x68>)
    900c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	685b      	ldr	r3, [r3, #4]
    9012:	2b00      	cmp	r3, #0
    9014:	d003      	beq.n	901e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    9016:	687b      	ldr	r3, [r7, #4]
    9018:	685b      	ldr	r3, [r3, #4]
    901a:	6878      	ldr	r0, [r7, #4]
    901c:	4798      	blx	r3
		}
	}
}
    901e:	bf00      	nop
    9020:	3710      	adds	r7, #16
    9022:	46bd      	mov	sp, r7
    9024:	bd80      	pop	{r7, pc}
    9026:	bf00      	nop
    9028:	000084ed 	.word	0x000084ed
    902c:	00008515 	.word	0x00008515
    9030:	00008563 	.word	0x00008563
    9034:	0000852f 	.word	0x0000852f

00009038 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    9038:	b580      	push	{r7, lr}
    903a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    903c:	4b03      	ldr	r3, [pc, #12]	; (904c <TC0_Handler+0x14>)
    903e:	681b      	ldr	r3, [r3, #0]
    9040:	4618      	mov	r0, r3
    9042:	4b03      	ldr	r3, [pc, #12]	; (9050 <TC0_Handler+0x18>)
    9044:	4798      	blx	r3
}
    9046:	bf00      	nop
    9048:	bd80      	pop	{r7, pc}
    904a:	bf00      	nop
    904c:	20000e30 	.word	0x20000e30
    9050:	00008f95 	.word	0x00008f95

00009054 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9054:	b580      	push	{r7, lr}
    9056:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9058:	4b03      	ldr	r3, [pc, #12]	; (9068 <TC2_Handler+0x14>)
    905a:	681b      	ldr	r3, [r3, #0]
    905c:	4618      	mov	r0, r3
    905e:	4b03      	ldr	r3, [pc, #12]	; (906c <TC2_Handler+0x18>)
    9060:	4798      	blx	r3
}
    9062:	bf00      	nop
    9064:	bd80      	pop	{r7, pc}
    9066:	bf00      	nop
    9068:	20000e34 	.word	0x20000e34
    906c:	00008f95 	.word	0x00008f95

00009070 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    9070:	b580      	push	{r7, lr}
    9072:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    9074:	4b03      	ldr	r3, [pc, #12]	; (9084 <TC4_Handler+0x14>)
    9076:	681b      	ldr	r3, [r3, #0]
    9078:	4618      	mov	r0, r3
    907a:	4b03      	ldr	r3, [pc, #12]	; (9088 <TC4_Handler+0x18>)
    907c:	4798      	blx	r3
}
    907e:	bf00      	nop
    9080:	bd80      	pop	{r7, pc}
    9082:	bf00      	nop
    9084:	20000e38 	.word	0x20000e38
    9088:	00008f95 	.word	0x00008f95

0000908c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    908c:	b580      	push	{r7, lr}
    908e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    9090:	4b03      	ldr	r3, [pc, #12]	; (90a0 <TC5_Handler+0x14>)
    9092:	681b      	ldr	r3, [r3, #0]
    9094:	4618      	mov	r0, r3
    9096:	4b03      	ldr	r3, [pc, #12]	; (90a4 <TC5_Handler+0x18>)
    9098:	4798      	blx	r3
}
    909a:	bf00      	nop
    909c:	bd80      	pop	{r7, pc}
    909e:	bf00      	nop
    90a0:	20000e3c 	.word	0x20000e3c
    90a4:	00008f95 	.word	0x00008f95

000090a8 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    90a8:	b580      	push	{r7, lr}
    90aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    90ac:	4b03      	ldr	r3, [pc, #12]	; (90bc <TC6_Handler+0x14>)
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	4618      	mov	r0, r3
    90b2:	4b03      	ldr	r3, [pc, #12]	; (90c0 <TC6_Handler+0x18>)
    90b4:	4798      	blx	r3
}
    90b6:	bf00      	nop
    90b8:	bd80      	pop	{r7, pc}
    90ba:	bf00      	nop
    90bc:	20000e40 	.word	0x20000e40
    90c0:	00008f95 	.word	0x00008f95

000090c4 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    90c4:	b580      	push	{r7, lr}
    90c6:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    90c8:	4b03      	ldr	r3, [pc, #12]	; (90d8 <TC7_Handler+0x14>)
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	4618      	mov	r0, r3
    90ce:	4b03      	ldr	r3, [pc, #12]	; (90dc <TC7_Handler+0x18>)
    90d0:	4798      	blx	r3
}
    90d2:	bf00      	nop
    90d4:	bd80      	pop	{r7, pc}
    90d6:	bf00      	nop
    90d8:	20000e44 	.word	0x20000e44
    90dc:	00008fcd 	.word	0x00008fcd

000090e0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    90e0:	b580      	push	{r7, lr}
    90e2:	b084      	sub	sp, #16
    90e4:	af00      	add	r7, sp, #0
    90e6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    90e8:	6878      	ldr	r0, [r7, #4]
    90ea:	4b13      	ldr	r3, [pc, #76]	; (9138 <get_tc_index+0x58>)
    90ec:	4798      	blx	r3
    90ee:	4603      	mov	r3, r0
    90f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    90f2:	2300      	movs	r3, #0
    90f4:	73fb      	strb	r3, [r7, #15]
    90f6:	e010      	b.n	911a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    90f8:	7bfa      	ldrb	r2, [r7, #15]
    90fa:	4910      	ldr	r1, [pc, #64]	; (913c <get_tc_index+0x5c>)
    90fc:	4613      	mov	r3, r2
    90fe:	009b      	lsls	r3, r3, #2
    9100:	4413      	add	r3, r2
    9102:	009b      	lsls	r3, r3, #2
    9104:	440b      	add	r3, r1
    9106:	781b      	ldrb	r3, [r3, #0]
    9108:	7bba      	ldrb	r2, [r7, #14]
    910a:	429a      	cmp	r2, r3
    910c:	d102      	bne.n	9114 <get_tc_index+0x34>
			return i;
    910e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9112:	e00d      	b.n	9130 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9114:	7bfb      	ldrb	r3, [r7, #15]
    9116:	3301      	adds	r3, #1
    9118:	73fb      	strb	r3, [r7, #15]
    911a:	7bfb      	ldrb	r3, [r7, #15]
    911c:	2b05      	cmp	r3, #5
    911e:	d9eb      	bls.n	90f8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9120:	f240 221d 	movw	r2, #541	; 0x21d
    9124:	4906      	ldr	r1, [pc, #24]	; (9140 <get_tc_index+0x60>)
    9126:	2000      	movs	r0, #0
    9128:	4b06      	ldr	r3, [pc, #24]	; (9144 <get_tc_index+0x64>)
    912a:	4798      	blx	r3
	return -1;
    912c:	f04f 33ff 	mov.w	r3, #4294967295
}
    9130:	4618      	mov	r0, r3
    9132:	3710      	adds	r7, #16
    9134:	46bd      	mov	sp, r7
    9136:	bd80      	pop	{r7, pc}
    9138:	000091e5 	.word	0x000091e5
    913c:	20000110 	.word	0x20000110
    9140:	000111e0 	.word	0x000111e0
    9144:	0000445d 	.word	0x0000445d

00009148 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    9148:	b480      	push	{r7}
    914a:	b083      	sub	sp, #12
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
    9150:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9152:	687b      	ldr	r3, [r7, #4]
    9154:	4a17      	ldr	r2, [pc, #92]	; (91b4 <_tc_init_irq_param+0x6c>)
    9156:	4293      	cmp	r3, r2
    9158:	d102      	bne.n	9160 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    915a:	4a17      	ldr	r2, [pc, #92]	; (91b8 <_tc_init_irq_param+0x70>)
    915c:	683b      	ldr	r3, [r7, #0]
    915e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	4a16      	ldr	r2, [pc, #88]	; (91bc <_tc_init_irq_param+0x74>)
    9164:	4293      	cmp	r3, r2
    9166:	d102      	bne.n	916e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    9168:	4a15      	ldr	r2, [pc, #84]	; (91c0 <_tc_init_irq_param+0x78>)
    916a:	683b      	ldr	r3, [r7, #0]
    916c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    916e:	687b      	ldr	r3, [r7, #4]
    9170:	4a14      	ldr	r2, [pc, #80]	; (91c4 <_tc_init_irq_param+0x7c>)
    9172:	4293      	cmp	r3, r2
    9174:	d102      	bne.n	917c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    9176:	4a14      	ldr	r2, [pc, #80]	; (91c8 <_tc_init_irq_param+0x80>)
    9178:	683b      	ldr	r3, [r7, #0]
    917a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	4a13      	ldr	r2, [pc, #76]	; (91cc <_tc_init_irq_param+0x84>)
    9180:	4293      	cmp	r3, r2
    9182:	d102      	bne.n	918a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    9184:	4a12      	ldr	r2, [pc, #72]	; (91d0 <_tc_init_irq_param+0x88>)
    9186:	683b      	ldr	r3, [r7, #0]
    9188:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    918a:	687b      	ldr	r3, [r7, #4]
    918c:	4a11      	ldr	r2, [pc, #68]	; (91d4 <_tc_init_irq_param+0x8c>)
    918e:	4293      	cmp	r3, r2
    9190:	d102      	bne.n	9198 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    9192:	4a11      	ldr	r2, [pc, #68]	; (91d8 <_tc_init_irq_param+0x90>)
    9194:	683b      	ldr	r3, [r7, #0]
    9196:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    9198:	687b      	ldr	r3, [r7, #4]
    919a:	4a10      	ldr	r2, [pc, #64]	; (91dc <_tc_init_irq_param+0x94>)
    919c:	4293      	cmp	r3, r2
    919e:	d102      	bne.n	91a6 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    91a0:	4a0f      	ldr	r2, [pc, #60]	; (91e0 <_tc_init_irq_param+0x98>)
    91a2:	683b      	ldr	r3, [r7, #0]
    91a4:	6013      	str	r3, [r2, #0]
	}
}
    91a6:	bf00      	nop
    91a8:	370c      	adds	r7, #12
    91aa:	46bd      	mov	sp, r7
    91ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    91b0:	4770      	bx	lr
    91b2:	bf00      	nop
    91b4:	40003800 	.word	0x40003800
    91b8:	20000e30 	.word	0x20000e30
    91bc:	4101a000 	.word	0x4101a000
    91c0:	20000e34 	.word	0x20000e34
    91c4:	42001400 	.word	0x42001400
    91c8:	20000e38 	.word	0x20000e38
    91cc:	42001800 	.word	0x42001800
    91d0:	20000e3c 	.word	0x20000e3c
    91d4:	43001400 	.word	0x43001400
    91d8:	20000e40 	.word	0x20000e40
    91dc:	43001800 	.word	0x43001800
    91e0:	20000e44 	.word	0x20000e44

000091e4 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    91e4:	b4b0      	push	{r4, r5, r7}
    91e6:	b08d      	sub	sp, #52	; 0x34
    91e8:	af00      	add	r7, sp, #0
    91ea:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    91ec:	4b13      	ldr	r3, [pc, #76]	; (923c <_get_hardware_offset+0x58>)
    91ee:	f107 040c 	add.w	r4, r7, #12
    91f2:	461d      	mov	r5, r3
    91f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    91f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    91f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    91fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9200:	2300      	movs	r3, #0
    9202:	62fb      	str	r3, [r7, #44]	; 0x2c
    9204:	e010      	b.n	9228 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9208:	009b      	lsls	r3, r3, #2
    920a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    920e:	4413      	add	r3, r2
    9210:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9214:	461a      	mov	r2, r3
    9216:	687b      	ldr	r3, [r7, #4]
    9218:	429a      	cmp	r2, r3
    921a:	d102      	bne.n	9222 <_get_hardware_offset+0x3e>
			return i;
    921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    921e:	b2db      	uxtb	r3, r3
    9220:	e006      	b.n	9230 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9224:	3301      	adds	r3, #1
    9226:	62fb      	str	r3, [r7, #44]	; 0x2c
    9228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    922a:	2b07      	cmp	r3, #7
    922c:	d9eb      	bls.n	9206 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    922e:	2300      	movs	r3, #0
}
    9230:	4618      	mov	r0, r3
    9232:	3734      	adds	r7, #52	; 0x34
    9234:	46bd      	mov	sp, r7
    9236:	bcb0      	pop	{r4, r5, r7}
    9238:	4770      	bx	lr
    923a:	bf00      	nop
    923c:	000111f4 	.word	0x000111f4

00009240 <__NVIC_EnableIRQ>:
{
    9240:	b480      	push	{r7}
    9242:	b083      	sub	sp, #12
    9244:	af00      	add	r7, sp, #0
    9246:	4603      	mov	r3, r0
    9248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    924a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    924e:	2b00      	cmp	r3, #0
    9250:	db0b      	blt.n	926a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9252:	4909      	ldr	r1, [pc, #36]	; (9278 <__NVIC_EnableIRQ+0x38>)
    9254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9258:	095b      	lsrs	r3, r3, #5
    925a:	88fa      	ldrh	r2, [r7, #6]
    925c:	f002 021f 	and.w	r2, r2, #31
    9260:	2001      	movs	r0, #1
    9262:	fa00 f202 	lsl.w	r2, r0, r2
    9266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    926a:	bf00      	nop
    926c:	370c      	adds	r7, #12
    926e:	46bd      	mov	sp, r7
    9270:	f85d 7b04 	ldr.w	r7, [sp], #4
    9274:	4770      	bx	lr
    9276:	bf00      	nop
    9278:	e000e100 	.word	0xe000e100

0000927c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    927c:	b480      	push	{r7}
    927e:	b087      	sub	sp, #28
    9280:	af00      	add	r7, sp, #0
    9282:	60f8      	str	r0, [r7, #12]
    9284:	460b      	mov	r3, r1
    9286:	607a      	str	r2, [r7, #4]
    9288:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    928a:	7afa      	ldrb	r2, [r7, #11]
    928c:	68f9      	ldr	r1, [r7, #12]
    928e:	4613      	mov	r3, r2
    9290:	009b      	lsls	r3, r3, #2
    9292:	4413      	add	r3, r2
    9294:	009b      	lsls	r3, r3, #2
    9296:	440b      	add	r3, r1
    9298:	3340      	adds	r3, #64	; 0x40
    929a:	681b      	ldr	r3, [r3, #0]
    929c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    929e:	697a      	ldr	r2, [r7, #20]
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	4013      	ands	r3, r2
    92a4:	617b      	str	r3, [r7, #20]
	return tmp;
    92a6:	697b      	ldr	r3, [r7, #20]
}
    92a8:	4618      	mov	r0, r3
    92aa:	371c      	adds	r7, #28
    92ac:	46bd      	mov	sp, r7
    92ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b2:	4770      	bx	lr

000092b4 <hri_oscctrl_get_STATUS_reg>:
{
    92b4:	b480      	push	{r7}
    92b6:	b085      	sub	sp, #20
    92b8:	af00      	add	r7, sp, #0
    92ba:	6078      	str	r0, [r7, #4]
    92bc:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	691b      	ldr	r3, [r3, #16]
    92c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    92c4:	68fa      	ldr	r2, [r7, #12]
    92c6:	683b      	ldr	r3, [r7, #0]
    92c8:	4013      	ands	r3, r2
    92ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    92cc:	68fb      	ldr	r3, [r7, #12]
}
    92ce:	4618      	mov	r0, r3
    92d0:	3714      	adds	r7, #20
    92d2:	46bd      	mov	sp, r7
    92d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92d8:	4770      	bx	lr

000092da <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    92da:	b480      	push	{r7}
    92dc:	b085      	sub	sp, #20
    92de:	af00      	add	r7, sp, #0
    92e0:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	f893 3020 	ldrb.w	r3, [r3, #32]
    92e8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    92ea:	7bfb      	ldrb	r3, [r7, #15]
    92ec:	f003 0301 	and.w	r3, r3, #1
    92f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    92f2:	7bfb      	ldrb	r3, [r7, #15]
    92f4:	2b00      	cmp	r3, #0
    92f6:	bf14      	ite	ne
    92f8:	2301      	movne	r3, #1
    92fa:	2300      	moveq	r3, #0
    92fc:	b2db      	uxtb	r3, r3
}
    92fe:	4618      	mov	r0, r3
    9300:	3714      	adds	r7, #20
    9302:	46bd      	mov	sp, r7
    9304:	f85d 7b04 	ldr.w	r7, [sp], #4
    9308:	4770      	bx	lr

0000930a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    930a:	b480      	push	{r7}
    930c:	b083      	sub	sp, #12
    930e:	af00      	add	r7, sp, #0
    9310:	6078      	str	r0, [r7, #4]
    9312:	460b      	mov	r3, r1
    9314:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9316:	bf00      	nop
    9318:	687b      	ldr	r3, [r7, #4]
    931a:	789b      	ldrb	r3, [r3, #2]
    931c:	b2da      	uxtb	r2, r3
    931e:	78fb      	ldrb	r3, [r7, #3]
    9320:	4013      	ands	r3, r2
    9322:	b2db      	uxtb	r3, r3
    9324:	2b00      	cmp	r3, #0
    9326:	d1f7      	bne.n	9318 <hri_usb_wait_for_sync+0xe>
	};
}
    9328:	bf00      	nop
    932a:	370c      	adds	r7, #12
    932c:	46bd      	mov	sp, r7
    932e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9332:	4770      	bx	lr

00009334 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9334:	b480      	push	{r7}
    9336:	b083      	sub	sp, #12
    9338:	af00      	add	r7, sp, #0
    933a:	6078      	str	r0, [r7, #4]
    933c:	460b      	mov	r3, r1
    933e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9340:	687b      	ldr	r3, [r7, #4]
    9342:	789b      	ldrb	r3, [r3, #2]
    9344:	b2da      	uxtb	r2, r3
    9346:	78fb      	ldrb	r3, [r7, #3]
    9348:	4013      	ands	r3, r2
    934a:	b2db      	uxtb	r3, r3
    934c:	2b00      	cmp	r3, #0
    934e:	bf14      	ite	ne
    9350:	2301      	movne	r3, #1
    9352:	2300      	moveq	r3, #0
    9354:	b2db      	uxtb	r3, r3
}
    9356:	4618      	mov	r0, r3
    9358:	370c      	adds	r7, #12
    935a:	46bd      	mov	sp, r7
    935c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9360:	4770      	bx	lr

00009362 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    9362:	b480      	push	{r7}
    9364:	b085      	sub	sp, #20
    9366:	af00      	add	r7, sp, #0
    9368:	6078      	str	r0, [r7, #4]
    936a:	460b      	mov	r3, r1
    936c:	70fb      	strb	r3, [r7, #3]
    936e:	4613      	mov	r3, r2
    9370:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9372:	78fb      	ldrb	r3, [r7, #3]
    9374:	687a      	ldr	r2, [r7, #4]
    9376:	3308      	adds	r3, #8
    9378:	015b      	lsls	r3, r3, #5
    937a:	4413      	add	r3, r2
    937c:	3307      	adds	r3, #7
    937e:	781b      	ldrb	r3, [r3, #0]
    9380:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9382:	7bfa      	ldrb	r2, [r7, #15]
    9384:	78bb      	ldrb	r3, [r7, #2]
    9386:	4013      	ands	r3, r2
    9388:	73fb      	strb	r3, [r7, #15]
	return tmp;
    938a:	7bfb      	ldrb	r3, [r7, #15]
}
    938c:	4618      	mov	r0, r3
    938e:	3714      	adds	r7, #20
    9390:	46bd      	mov	sp, r7
    9392:	f85d 7b04 	ldr.w	r7, [sp], #4
    9396:	4770      	bx	lr

00009398 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9398:	b480      	push	{r7}
    939a:	b083      	sub	sp, #12
    939c:	af00      	add	r7, sp, #0
    939e:	6078      	str	r0, [r7, #4]
    93a0:	460b      	mov	r3, r1
    93a2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    93a4:	78fb      	ldrb	r3, [r7, #3]
    93a6:	687a      	ldr	r2, [r7, #4]
    93a8:	3308      	adds	r3, #8
    93aa:	015b      	lsls	r3, r3, #5
    93ac:	4413      	add	r3, r2
    93ae:	3307      	adds	r3, #7
    93b0:	781b      	ldrb	r3, [r3, #0]
    93b2:	b2db      	uxtb	r3, r3
}
    93b4:	4618      	mov	r0, r3
    93b6:	370c      	adds	r7, #12
    93b8:	46bd      	mov	sp, r7
    93ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    93be:	4770      	bx	lr

000093c0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    93c0:	b480      	push	{r7}
    93c2:	b083      	sub	sp, #12
    93c4:	af00      	add	r7, sp, #0
    93c6:	6078      	str	r0, [r7, #4]
    93c8:	460b      	mov	r3, r1
    93ca:	70fb      	strb	r3, [r7, #3]
    93cc:	4613      	mov	r3, r2
    93ce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    93d0:	78fb      	ldrb	r3, [r7, #3]
    93d2:	687a      	ldr	r2, [r7, #4]
    93d4:	3308      	adds	r3, #8
    93d6:	015b      	lsls	r3, r3, #5
    93d8:	4413      	add	r3, r2
    93da:	3307      	adds	r3, #7
    93dc:	78ba      	ldrb	r2, [r7, #2]
    93de:	701a      	strb	r2, [r3, #0]
}
    93e0:	bf00      	nop
    93e2:	370c      	adds	r7, #12
    93e4:	46bd      	mov	sp, r7
    93e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ea:	4770      	bx	lr

000093ec <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    93ec:	b480      	push	{r7}
    93ee:	b083      	sub	sp, #12
    93f0:	af00      	add	r7, sp, #0
    93f2:	6078      	str	r0, [r7, #4]
    93f4:	460b      	mov	r3, r1
    93f6:	70fb      	strb	r3, [r7, #3]
    93f8:	4613      	mov	r3, r2
    93fa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    93fc:	78fb      	ldrb	r3, [r7, #3]
    93fe:	687a      	ldr	r2, [r7, #4]
    9400:	3308      	adds	r3, #8
    9402:	015b      	lsls	r3, r3, #5
    9404:	4413      	add	r3, r2
    9406:	3305      	adds	r3, #5
    9408:	78ba      	ldrb	r2, [r7, #2]
    940a:	701a      	strb	r2, [r3, #0]
}
    940c:	bf00      	nop
    940e:	370c      	adds	r7, #12
    9410:	46bd      	mov	sp, r7
    9412:	f85d 7b04 	ldr.w	r7, [sp], #4
    9416:	4770      	bx	lr

00009418 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9418:	b480      	push	{r7}
    941a:	b083      	sub	sp, #12
    941c:	af00      	add	r7, sp, #0
    941e:	6078      	str	r0, [r7, #4]
    9420:	460b      	mov	r3, r1
    9422:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9424:	78fb      	ldrb	r3, [r7, #3]
    9426:	687a      	ldr	r2, [r7, #4]
    9428:	3308      	adds	r3, #8
    942a:	015b      	lsls	r3, r3, #5
    942c:	4413      	add	r3, r2
    942e:	3306      	adds	r3, #6
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	b2db      	uxtb	r3, r3
}
    9434:	4618      	mov	r0, r3
    9436:	370c      	adds	r7, #12
    9438:	46bd      	mov	sp, r7
    943a:	f85d 7b04 	ldr.w	r7, [sp], #4
    943e:	4770      	bx	lr

00009440 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    9440:	b480      	push	{r7}
    9442:	b083      	sub	sp, #12
    9444:	af00      	add	r7, sp, #0
    9446:	6078      	str	r0, [r7, #4]
    9448:	460b      	mov	r3, r1
    944a:	70fb      	strb	r3, [r7, #3]
    944c:	4613      	mov	r3, r2
    944e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9450:	78fb      	ldrb	r3, [r7, #3]
    9452:	687a      	ldr	r2, [r7, #4]
    9454:	3308      	adds	r3, #8
    9456:	015b      	lsls	r3, r3, #5
    9458:	4413      	add	r3, r2
    945a:	3304      	adds	r3, #4
    945c:	78ba      	ldrb	r2, [r7, #2]
    945e:	701a      	strb	r2, [r3, #0]
}
    9460:	bf00      	nop
    9462:	370c      	adds	r7, #12
    9464:	46bd      	mov	sp, r7
    9466:	f85d 7b04 	ldr.w	r7, [sp], #4
    946a:	4770      	bx	lr

0000946c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    946c:	b480      	push	{r7}
    946e:	b083      	sub	sp, #12
    9470:	af00      	add	r7, sp, #0
    9472:	6078      	str	r0, [r7, #4]
    9474:	460b      	mov	r3, r1
    9476:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9478:	78fb      	ldrb	r3, [r7, #3]
    947a:	687a      	ldr	r2, [r7, #4]
    947c:	015b      	lsls	r3, r3, #5
    947e:	4413      	add	r3, r2
    9480:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9484:	2210      	movs	r2, #16
    9486:	701a      	strb	r2, [r3, #0]
}
    9488:	bf00      	nop
    948a:	370c      	adds	r7, #12
    948c:	46bd      	mov	sp, r7
    948e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9492:	4770      	bx	lr

00009494 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9494:	b480      	push	{r7}
    9496:	b083      	sub	sp, #12
    9498:	af00      	add	r7, sp, #0
    949a:	6078      	str	r0, [r7, #4]
    949c:	460b      	mov	r3, r1
    949e:	70fb      	strb	r3, [r7, #3]
    94a0:	4613      	mov	r3, r2
    94a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    94a4:	78fb      	ldrb	r3, [r7, #3]
    94a6:	687a      	ldr	r2, [r7, #4]
    94a8:	015b      	lsls	r3, r3, #5
    94aa:	4413      	add	r3, r2
    94ac:	f203 1309 	addw	r3, r3, #265	; 0x109
    94b0:	78ba      	ldrb	r2, [r7, #2]
    94b2:	701a      	strb	r2, [r3, #0]
}
    94b4:	bf00      	nop
    94b6:	370c      	adds	r7, #12
    94b8:	46bd      	mov	sp, r7
    94ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    94be:	4770      	bx	lr

000094c0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    94c0:	b480      	push	{r7}
    94c2:	b083      	sub	sp, #12
    94c4:	af00      	add	r7, sp, #0
    94c6:	6078      	str	r0, [r7, #4]
    94c8:	460b      	mov	r3, r1
    94ca:	70fb      	strb	r3, [r7, #3]
    94cc:	4613      	mov	r3, r2
    94ce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    94d0:	78fb      	ldrb	r3, [r7, #3]
    94d2:	687a      	ldr	r2, [r7, #4]
    94d4:	015b      	lsls	r3, r3, #5
    94d6:	4413      	add	r3, r2
    94d8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    94dc:	78ba      	ldrb	r2, [r7, #2]
    94de:	701a      	strb	r2, [r3, #0]
}
    94e0:	bf00      	nop
    94e2:	370c      	adds	r7, #12
    94e4:	46bd      	mov	sp, r7
    94e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ea:	4770      	bx	lr

000094ec <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    94ec:	b480      	push	{r7}
    94ee:	b085      	sub	sp, #20
    94f0:	af00      	add	r7, sp, #0
    94f2:	6078      	str	r0, [r7, #4]
    94f4:	460b      	mov	r3, r1
    94f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    94f8:	78fb      	ldrb	r3, [r7, #3]
    94fa:	687a      	ldr	r2, [r7, #4]
    94fc:	3308      	adds	r3, #8
    94fe:	015b      	lsls	r3, r3, #5
    9500:	4413      	add	r3, r2
    9502:	781b      	ldrb	r3, [r3, #0]
    9504:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9506:	7bfb      	ldrb	r3, [r7, #15]
    9508:	f003 0307 	and.w	r3, r3, #7
    950c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    950e:	7bfb      	ldrb	r3, [r7, #15]
}
    9510:	4618      	mov	r0, r3
    9512:	3714      	adds	r7, #20
    9514:	46bd      	mov	sp, r7
    9516:	f85d 7b04 	ldr.w	r7, [sp], #4
    951a:	4770      	bx	lr

0000951c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    951c:	b480      	push	{r7}
    951e:	b085      	sub	sp, #20
    9520:	af00      	add	r7, sp, #0
    9522:	6078      	str	r0, [r7, #4]
    9524:	460b      	mov	r3, r1
    9526:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9528:	78fb      	ldrb	r3, [r7, #3]
    952a:	687a      	ldr	r2, [r7, #4]
    952c:	3308      	adds	r3, #8
    952e:	015b      	lsls	r3, r3, #5
    9530:	4413      	add	r3, r2
    9532:	781b      	ldrb	r3, [r3, #0]
    9534:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9536:	7bfb      	ldrb	r3, [r7, #15]
    9538:	091b      	lsrs	r3, r3, #4
    953a:	b2db      	uxtb	r3, r3
    953c:	f003 0307 	and.w	r3, r3, #7
    9540:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9542:	7bfb      	ldrb	r3, [r7, #15]
}
    9544:	4618      	mov	r0, r3
    9546:	3714      	adds	r7, #20
    9548:	46bd      	mov	sp, r7
    954a:	f85d 7b04 	ldr.w	r7, [sp], #4
    954e:	4770      	bx	lr

00009550 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9550:	b480      	push	{r7}
    9552:	b083      	sub	sp, #12
    9554:	af00      	add	r7, sp, #0
    9556:	6078      	str	r0, [r7, #4]
    9558:	460b      	mov	r3, r1
    955a:	70fb      	strb	r3, [r7, #3]
    955c:	4613      	mov	r3, r2
    955e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9560:	78fb      	ldrb	r3, [r7, #3]
    9562:	687a      	ldr	r2, [r7, #4]
    9564:	3308      	adds	r3, #8
    9566:	015b      	lsls	r3, r3, #5
    9568:	4413      	add	r3, r2
    956a:	78ba      	ldrb	r2, [r7, #2]
    956c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    956e:	bf00      	nop
    9570:	370c      	adds	r7, #12
    9572:	46bd      	mov	sp, r7
    9574:	f85d 7b04 	ldr.w	r7, [sp], #4
    9578:	4770      	bx	lr

0000957a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    957a:	b480      	push	{r7}
    957c:	b083      	sub	sp, #12
    957e:	af00      	add	r7, sp, #0
    9580:	6078      	str	r0, [r7, #4]
    9582:	460b      	mov	r3, r1
    9584:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9586:	78fb      	ldrb	r3, [r7, #3]
    9588:	687a      	ldr	r2, [r7, #4]
    958a:	3308      	adds	r3, #8
    958c:	015b      	lsls	r3, r3, #5
    958e:	4413      	add	r3, r2
    9590:	781b      	ldrb	r3, [r3, #0]
    9592:	b2db      	uxtb	r3, r3
}
    9594:	4618      	mov	r0, r3
    9596:	370c      	adds	r7, #12
    9598:	46bd      	mov	sp, r7
    959a:	f85d 7b04 	ldr.w	r7, [sp], #4
    959e:	4770      	bx	lr

000095a0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    95a0:	b480      	push	{r7}
    95a2:	b083      	sub	sp, #12
    95a4:	af00      	add	r7, sp, #0
    95a6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    95a8:	687b      	ldr	r3, [r7, #4]
    95aa:	8b9b      	ldrh	r3, [r3, #28]
    95ac:	b29b      	uxth	r3, r3
}
    95ae:	4618      	mov	r0, r3
    95b0:	370c      	adds	r7, #12
    95b2:	46bd      	mov	sp, r7
    95b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    95b8:	4770      	bx	lr

000095ba <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    95ba:	b480      	push	{r7}
    95bc:	b083      	sub	sp, #12
    95be:	af00      	add	r7, sp, #0
    95c0:	6078      	str	r0, [r7, #4]
    95c2:	460b      	mov	r3, r1
    95c4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	887a      	ldrh	r2, [r7, #2]
    95ca:	839a      	strh	r2, [r3, #28]
}
    95cc:	bf00      	nop
    95ce:	370c      	adds	r7, #12
    95d0:	46bd      	mov	sp, r7
    95d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95d6:	4770      	bx	lr

000095d8 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    95d8:	b480      	push	{r7}
    95da:	b083      	sub	sp, #12
    95dc:	af00      	add	r7, sp, #0
    95de:	6078      	str	r0, [r7, #4]
    95e0:	460b      	mov	r3, r1
    95e2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    95e4:	687b      	ldr	r3, [r7, #4]
    95e6:	887a      	ldrh	r2, [r7, #2]
    95e8:	831a      	strh	r2, [r3, #24]
}
    95ea:	bf00      	nop
    95ec:	370c      	adds	r7, #12
    95ee:	46bd      	mov	sp, r7
    95f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    95f4:	4770      	bx	lr

000095f6 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    95f6:	b480      	push	{r7}
    95f8:	b083      	sub	sp, #12
    95fa:	af00      	add	r7, sp, #0
    95fc:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    95fe:	687b      	ldr	r3, [r7, #4]
    9600:	8b1b      	ldrh	r3, [r3, #24]
    9602:	b29b      	uxth	r3, r3
}
    9604:	4618      	mov	r0, r3
    9606:	370c      	adds	r7, #12
    9608:	46bd      	mov	sp, r7
    960a:	f85d 7b04 	ldr.w	r7, [sp], #4
    960e:	4770      	bx	lr

00009610 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9610:	b480      	push	{r7}
    9612:	b083      	sub	sp, #12
    9614:	af00      	add	r7, sp, #0
    9616:	6078      	str	r0, [r7, #4]
    9618:	460b      	mov	r3, r1
    961a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	887a      	ldrh	r2, [r7, #2]
    9620:	829a      	strh	r2, [r3, #20]
}
    9622:	bf00      	nop
    9624:	370c      	adds	r7, #12
    9626:	46bd      	mov	sp, r7
    9628:	f85d 7b04 	ldr.w	r7, [sp], #4
    962c:	4770      	bx	lr

0000962e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    962e:	b480      	push	{r7}
    9630:	b085      	sub	sp, #20
    9632:	af00      	add	r7, sp, #0
    9634:	6078      	str	r0, [r7, #4]
    9636:	460b      	mov	r3, r1
    9638:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    963a:	687b      	ldr	r3, [r7, #4]
    963c:	789b      	ldrb	r3, [r3, #2]
    963e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9640:	7bfa      	ldrb	r2, [r7, #15]
    9642:	78fb      	ldrb	r3, [r7, #3]
    9644:	4013      	ands	r3, r2
    9646:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9648:	7bfb      	ldrb	r3, [r7, #15]
}
    964a:	4618      	mov	r0, r3
    964c:	3714      	adds	r7, #20
    964e:	46bd      	mov	sp, r7
    9650:	f85d 7b04 	ldr.w	r7, [sp], #4
    9654:	4770      	bx	lr
	...

00009658 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9658:	b580      	push	{r7, lr}
    965a:	b082      	sub	sp, #8
    965c:	af00      	add	r7, sp, #0
    965e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	781b      	ldrb	r3, [r3, #0]
    9664:	b2db      	uxtb	r3, r3
    9666:	f023 0302 	bic.w	r3, r3, #2
    966a:	b2da      	uxtb	r2, r3
    966c:	687b      	ldr	r3, [r7, #4]
    966e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9670:	2103      	movs	r1, #3
    9672:	6878      	ldr	r0, [r7, #4]
    9674:	4b02      	ldr	r3, [pc, #8]	; (9680 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9676:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9678:	bf00      	nop
    967a:	3708      	adds	r7, #8
    967c:	46bd      	mov	sp, r7
    967e:	bd80      	pop	{r7, pc}
    9680:	0000930b 	.word	0x0000930b

00009684 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9684:	b580      	push	{r7, lr}
    9686:	b084      	sub	sp, #16
    9688:	af00      	add	r7, sp, #0
    968a:	6078      	str	r0, [r7, #4]
    968c:	460b      	mov	r3, r1
    968e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9690:	2103      	movs	r1, #3
    9692:	6878      	ldr	r0, [r7, #4]
    9694:	4b06      	ldr	r3, [pc, #24]	; (96b0 <hri_usb_get_CTRLA_reg+0x2c>)
    9696:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    969e:	7bfa      	ldrb	r2, [r7, #15]
    96a0:	78fb      	ldrb	r3, [r7, #3]
    96a2:	4013      	ands	r3, r2
    96a4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    96a6:	7bfb      	ldrb	r3, [r7, #15]
}
    96a8:	4618      	mov	r0, r3
    96aa:	3710      	adds	r7, #16
    96ac:	46bd      	mov	sp, r7
    96ae:	bd80      	pop	{r7, pc}
    96b0:	0000930b 	.word	0x0000930b

000096b4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    96b4:	b580      	push	{r7, lr}
    96b6:	b082      	sub	sp, #8
    96b8:	af00      	add	r7, sp, #0
    96ba:	6078      	str	r0, [r7, #4]
    96bc:	460b      	mov	r3, r1
    96be:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    96c0:	687b      	ldr	r3, [r7, #4]
    96c2:	78fa      	ldrb	r2, [r7, #3]
    96c4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    96c6:	2103      	movs	r1, #3
    96c8:	6878      	ldr	r0, [r7, #4]
    96ca:	4b03      	ldr	r3, [pc, #12]	; (96d8 <hri_usb_write_CTRLA_reg+0x24>)
    96cc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    96ce:	bf00      	nop
    96d0:	3708      	adds	r7, #8
    96d2:	46bd      	mov	sp, r7
    96d4:	bd80      	pop	{r7, pc}
    96d6:	bf00      	nop
    96d8:	0000930b 	.word	0x0000930b

000096dc <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    96dc:	b580      	push	{r7, lr}
    96de:	b082      	sub	sp, #8
    96e0:	af00      	add	r7, sp, #0
    96e2:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    96e4:	2103      	movs	r1, #3
    96e6:	6878      	ldr	r0, [r7, #4]
    96e8:	4b04      	ldr	r3, [pc, #16]	; (96fc <hri_usb_read_CTRLA_reg+0x20>)
    96ea:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    96ec:	687b      	ldr	r3, [r7, #4]
    96ee:	781b      	ldrb	r3, [r3, #0]
    96f0:	b2db      	uxtb	r3, r3
}
    96f2:	4618      	mov	r0, r3
    96f4:	3708      	adds	r7, #8
    96f6:	46bd      	mov	sp, r7
    96f8:	bd80      	pop	{r7, pc}
    96fa:	bf00      	nop
    96fc:	0000930b 	.word	0x0000930b

00009700 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9700:	b480      	push	{r7}
    9702:	b083      	sub	sp, #12
    9704:	af00      	add	r7, sp, #0
    9706:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	891b      	ldrh	r3, [r3, #8]
    970c:	b29b      	uxth	r3, r3
    970e:	f023 0301 	bic.w	r3, r3, #1
    9712:	b29a      	uxth	r2, r3
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9718:	bf00      	nop
    971a:	370c      	adds	r7, #12
    971c:	46bd      	mov	sp, r7
    971e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9722:	4770      	bx	lr

00009724 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9724:	b480      	push	{r7}
    9726:	b083      	sub	sp, #12
    9728:	af00      	add	r7, sp, #0
    972a:	6078      	str	r0, [r7, #4]
    972c:	460b      	mov	r3, r1
    972e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	887a      	ldrh	r2, [r7, #2]
    9734:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9736:	bf00      	nop
    9738:	370c      	adds	r7, #12
    973a:	46bd      	mov	sp, r7
    973c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9740:	4770      	bx	lr

00009742 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    9742:	b480      	push	{r7}
    9744:	b083      	sub	sp, #12
    9746:	af00      	add	r7, sp, #0
    9748:	6078      	str	r0, [r7, #4]
    974a:	460b      	mov	r3, r1
    974c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    974e:	687b      	ldr	r3, [r7, #4]
    9750:	78fa      	ldrb	r2, [r7, #3]
    9752:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9754:	bf00      	nop
    9756:	370c      	adds	r7, #12
    9758:	46bd      	mov	sp, r7
    975a:	f85d 7b04 	ldr.w	r7, [sp], #4
    975e:	4770      	bx	lr

00009760 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9760:	b480      	push	{r7}
    9762:	b083      	sub	sp, #12
    9764:	af00      	add	r7, sp, #0
    9766:	6078      	str	r0, [r7, #4]
    9768:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    976a:	687b      	ldr	r3, [r7, #4]
    976c:	683a      	ldr	r2, [r7, #0]
    976e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9770:	bf00      	nop
    9772:	370c      	adds	r7, #12
    9774:	46bd      	mov	sp, r7
    9776:	f85d 7b04 	ldr.w	r7, [sp], #4
    977a:	4770      	bx	lr

0000977c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    977c:	b480      	push	{r7}
    977e:	b083      	sub	sp, #12
    9780:	af00      	add	r7, sp, #0
    9782:	6078      	str	r0, [r7, #4]
    9784:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9786:	2300      	movs	r3, #0
}
    9788:	4618      	mov	r0, r3
    978a:	370c      	adds	r7, #12
    978c:	46bd      	mov	sp, r7
    978e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9792:	4770      	bx	lr

00009794 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9794:	b480      	push	{r7}
    9796:	b085      	sub	sp, #20
    9798:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    979a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    979e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    97a0:	4b28      	ldr	r3, [pc, #160]	; (9844 <_usb_load_calib+0xb0>)
    97a2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    97a4:	f003 031f 	and.w	r3, r3, #31
    97a8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    97aa:	4b26      	ldr	r3, [pc, #152]	; (9844 <_usb_load_calib+0xb0>)
    97ac:	681b      	ldr	r3, [r3, #0]
    97ae:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    97b0:	f003 031f 	and.w	r3, r3, #31
    97b4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    97b6:	4b23      	ldr	r3, [pc, #140]	; (9844 <_usb_load_calib+0xb0>)
    97b8:	681b      	ldr	r3, [r3, #0]
    97ba:	0a9b      	lsrs	r3, r3, #10
    97bc:	f003 0307 	and.w	r3, r3, #7
    97c0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    97c2:	68fb      	ldr	r3, [r7, #12]
    97c4:	2b00      	cmp	r3, #0
    97c6:	d002      	beq.n	97ce <_usb_load_calib+0x3a>
    97c8:	68fb      	ldr	r3, [r7, #12]
    97ca:	2b1f      	cmp	r3, #31
    97cc:	d101      	bne.n	97d2 <_usb_load_calib+0x3e>
		pad_transn = 9;
    97ce:	2309      	movs	r3, #9
    97d0:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    97d2:	68bb      	ldr	r3, [r7, #8]
    97d4:	2b00      	cmp	r3, #0
    97d6:	d002      	beq.n	97de <_usb_load_calib+0x4a>
    97d8:	68bb      	ldr	r3, [r7, #8]
    97da:	2b1f      	cmp	r3, #31
    97dc:	d101      	bne.n	97e2 <_usb_load_calib+0x4e>
		pad_transp = 25;
    97de:	2319      	movs	r3, #25
    97e0:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    97e2:	687b      	ldr	r3, [r7, #4]
    97e4:	2b00      	cmp	r3, #0
    97e6:	d002      	beq.n	97ee <_usb_load_calib+0x5a>
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	2b07      	cmp	r3, #7
    97ec:	d101      	bne.n	97f2 <_usb_load_calib+0x5e>
		pad_trim = 6;
    97ee:	2306      	movs	r3, #6
    97f0:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    97f2:	68fb      	ldr	r3, [r7, #12]
    97f4:	b29b      	uxth	r3, r3
    97f6:	019b      	lsls	r3, r3, #6
    97f8:	b29b      	uxth	r3, r3
    97fa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    97fe:	b29a      	uxth	r2, r3
    9800:	68bb      	ldr	r3, [r7, #8]
    9802:	b29b      	uxth	r3, r3
    9804:	f003 031f 	and.w	r3, r3, #31
    9808:	b29b      	uxth	r3, r3
    980a:	4313      	orrs	r3, r2
    980c:	b29a      	uxth	r2, r3
    980e:	687b      	ldr	r3, [r7, #4]
    9810:	b29b      	uxth	r3, r3
    9812:	031b      	lsls	r3, r3, #12
    9814:	b29b      	uxth	r3, r3
    9816:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    981a:	b29b      	uxth	r3, r3
    981c:	4313      	orrs	r3, r2
    981e:	b29a      	uxth	r2, r3
    9820:	683b      	ldr	r3, [r7, #0]
    9822:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9824:	683a      	ldr	r2, [r7, #0]
    9826:	78d3      	ldrb	r3, [r2, #3]
    9828:	f043 0303 	orr.w	r3, r3, #3
    982c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    982e:	683a      	ldr	r2, [r7, #0]
    9830:	78d3      	ldrb	r3, [r2, #3]
    9832:	f043 030c 	orr.w	r3, r3, #12
    9836:	70d3      	strb	r3, [r2, #3]
}
    9838:	bf00      	nop
    983a:	3714      	adds	r7, #20
    983c:	46bd      	mov	sp, r7
    983e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9842:	4770      	bx	lr
    9844:	00800084 	.word	0x00800084

00009848 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    9848:	b580      	push	{r7, lr}
    984a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    984c:	bf00      	nop
    984e:	2203      	movs	r2, #3
    9850:	2100      	movs	r1, #0
    9852:	4804      	ldr	r0, [pc, #16]	; (9864 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9854:	4b04      	ldr	r3, [pc, #16]	; (9868 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9856:	4798      	blx	r3
    9858:	4603      	mov	r3, r0
    985a:	2b03      	cmp	r3, #3
    985c:	d1f7      	bne.n	984e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    985e:	bf00      	nop
    9860:	bd80      	pop	{r7, pc}
    9862:	bf00      	nop
    9864:	40001000 	.word	0x40001000
    9868:	0000927d 	.word	0x0000927d

0000986c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    986c:	b580      	push	{r7, lr}
    986e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9870:	480e      	ldr	r0, [pc, #56]	; (98ac <_usb_d_dev_wait_dfll_rdy+0x40>)
    9872:	4b0f      	ldr	r3, [pc, #60]	; (98b0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9874:	4798      	blx	r3
    9876:	4603      	mov	r3, r0
    9878:	2b00      	cmp	r3, #0
    987a:	d00a      	beq.n	9892 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    987c:	bf00      	nop
    987e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9882:	480a      	ldr	r0, [pc, #40]	; (98ac <_usb_d_dev_wait_dfll_rdy+0x40>)
    9884:	4b0b      	ldr	r3, [pc, #44]	; (98b4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9886:	4798      	blx	r3
    9888:	4603      	mov	r3, r0
    988a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    988e:	d1f6      	bne.n	987e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9890:	e009      	b.n	98a6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9892:	bf00      	nop
    9894:	f44f 7180 	mov.w	r1, #256	; 0x100
    9898:	4804      	ldr	r0, [pc, #16]	; (98ac <_usb_d_dev_wait_dfll_rdy+0x40>)
    989a:	4b06      	ldr	r3, [pc, #24]	; (98b4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    989c:	4798      	blx	r3
    989e:	4603      	mov	r3, r0
    98a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    98a4:	d1f6      	bne.n	9894 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    98a6:	bf00      	nop
    98a8:	bd80      	pop	{r7, pc}
    98aa:	bf00      	nop
    98ac:	40001000 	.word	0x40001000
    98b0:	000092db 	.word	0x000092db
    98b4:	000092b5 	.word	0x000092b5

000098b8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    98b8:	b580      	push	{r7, lr}
    98ba:	b082      	sub	sp, #8
    98bc:	af00      	add	r7, sp, #0
    98be:	4603      	mov	r3, r0
    98c0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    98c2:	79fb      	ldrb	r3, [r7, #7]
    98c4:	2b00      	cmp	r3, #0
    98c6:	d102      	bne.n	98ce <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    98c8:	4b05      	ldr	r3, [pc, #20]	; (98e0 <_usb_d_dev_wait_clk_rdy+0x28>)
    98ca:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    98cc:	e004      	b.n	98d8 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    98ce:	79fb      	ldrb	r3, [r7, #7]
    98d0:	2b01      	cmp	r3, #1
    98d2:	d101      	bne.n	98d8 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    98d4:	4b03      	ldr	r3, [pc, #12]	; (98e4 <_usb_d_dev_wait_clk_rdy+0x2c>)
    98d6:	4798      	blx	r3
}
    98d8:	bf00      	nop
    98da:	3708      	adds	r7, #8
    98dc:	46bd      	mov	sp, r7
    98de:	bd80      	pop	{r7, pc}
    98e0:	0000986d 	.word	0x0000986d
    98e4:	00009849 	.word	0x00009849

000098e8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    98e8:	b580      	push	{r7, lr}
    98ea:	b082      	sub	sp, #8
    98ec:	af00      	add	r7, sp, #0
    98ee:	4603      	mov	r3, r0
    98f0:	6039      	str	r1, [r7, #0]
    98f2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    98f4:	683b      	ldr	r3, [r7, #0]
    98f6:	b2da      	uxtb	r2, r3
    98f8:	79fb      	ldrb	r3, [r7, #7]
    98fa:	4619      	mov	r1, r3
    98fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9900:	4b02      	ldr	r3, [pc, #8]	; (990c <_usbd_ep_int_ack+0x24>)
    9902:	4798      	blx	r3
}
    9904:	bf00      	nop
    9906:	3708      	adds	r7, #8
    9908:	46bd      	mov	sp, r7
    990a:	bd80      	pop	{r7, pc}
    990c:	000093c1 	.word	0x000093c1

00009910 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9910:	b580      	push	{r7, lr}
    9912:	b082      	sub	sp, #8
    9914:	af00      	add	r7, sp, #0
    9916:	4603      	mov	r3, r0
    9918:	6039      	str	r1, [r7, #0]
    991a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    991c:	683b      	ldr	r3, [r7, #0]
    991e:	b2da      	uxtb	r2, r3
    9920:	79fb      	ldrb	r3, [r7, #7]
    9922:	4619      	mov	r1, r3
    9924:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9928:	4b02      	ldr	r3, [pc, #8]	; (9934 <_usbd_ep_int_en+0x24>)
    992a:	4798      	blx	r3
}
    992c:	bf00      	nop
    992e:	3708      	adds	r7, #8
    9930:	46bd      	mov	sp, r7
    9932:	bd80      	pop	{r7, pc}
    9934:	00009495 	.word	0x00009495

00009938 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9938:	b580      	push	{r7, lr}
    993a:	b082      	sub	sp, #8
    993c:	af00      	add	r7, sp, #0
    993e:	4603      	mov	r3, r0
    9940:	6039      	str	r1, [r7, #0]
    9942:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9944:	683b      	ldr	r3, [r7, #0]
    9946:	b2da      	uxtb	r2, r3
    9948:	79fb      	ldrb	r3, [r7, #7]
    994a:	4619      	mov	r1, r3
    994c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9950:	4b02      	ldr	r3, [pc, #8]	; (995c <_usbd_ep_int_dis+0x24>)
    9952:	4798      	blx	r3
}
    9954:	bf00      	nop
    9956:	3708      	adds	r7, #8
    9958:	46bd      	mov	sp, r7
    995a:	bd80      	pop	{r7, pc}
    995c:	000094c1 	.word	0x000094c1

00009960 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9960:	b580      	push	{r7, lr}
    9962:	b082      	sub	sp, #8
    9964:	af00      	add	r7, sp, #0
    9966:	4603      	mov	r3, r0
    9968:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    996a:	79fb      	ldrb	r3, [r7, #7]
    996c:	4619      	mov	r1, r3
    996e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9972:	4b06      	ldr	r3, [pc, #24]	; (998c <_usbd_ep_is_ctrl+0x2c>)
    9974:	4798      	blx	r3
    9976:	4603      	mov	r3, r0
    9978:	2b11      	cmp	r3, #17
    997a:	bf0c      	ite	eq
    997c:	2301      	moveq	r3, #1
    997e:	2300      	movne	r3, #0
    9980:	b2db      	uxtb	r3, r3
}
    9982:	4618      	mov	r0, r3
    9984:	3708      	adds	r7, #8
    9986:	46bd      	mov	sp, r7
    9988:	bd80      	pop	{r7, pc}
    998a:	bf00      	nop
    998c:	0000957b 	.word	0x0000957b

00009990 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9990:	b580      	push	{r7, lr}
    9992:	b082      	sub	sp, #8
    9994:	af00      	add	r7, sp, #0
    9996:	4603      	mov	r3, r0
    9998:	71fb      	strb	r3, [r7, #7]
    999a:	460b      	mov	r3, r1
    999c:	71bb      	strb	r3, [r7, #6]
    999e:	4613      	mov	r3, r2
    99a0:	717b      	strb	r3, [r7, #5]
	if (st) {
    99a2:	797b      	ldrb	r3, [r7, #5]
    99a4:	2b00      	cmp	r3, #0
    99a6:	d00b      	beq.n	99c0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99a8:	79bb      	ldrb	r3, [r7, #6]
    99aa:	2210      	movs	r2, #16
    99ac:	fa02 f303 	lsl.w	r3, r2, r3
    99b0:	b2da      	uxtb	r2, r3
    99b2:	79fb      	ldrb	r3, [r7, #7]
    99b4:	4619      	mov	r1, r3
    99b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99ba:	4b09      	ldr	r3, [pc, #36]	; (99e0 <_usbd_ep_set_stall+0x50>)
    99bc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    99be:	e00a      	b.n	99d6 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99c0:	79bb      	ldrb	r3, [r7, #6]
    99c2:	2210      	movs	r2, #16
    99c4:	fa02 f303 	lsl.w	r3, r2, r3
    99c8:	b2da      	uxtb	r2, r3
    99ca:	79fb      	ldrb	r3, [r7, #7]
    99cc:	4619      	mov	r1, r3
    99ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99d2:	4b04      	ldr	r3, [pc, #16]	; (99e4 <_usbd_ep_set_stall+0x54>)
    99d4:	4798      	blx	r3
}
    99d6:	bf00      	nop
    99d8:	3708      	adds	r7, #8
    99da:	46bd      	mov	sp, r7
    99dc:	bd80      	pop	{r7, pc}
    99de:	bf00      	nop
    99e0:	000093ed 	.word	0x000093ed
    99e4:	00009441 	.word	0x00009441

000099e8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    99e8:	b580      	push	{r7, lr}
    99ea:	b084      	sub	sp, #16
    99ec:	af00      	add	r7, sp, #0
    99ee:	4603      	mov	r3, r0
    99f0:	460a      	mov	r2, r1
    99f2:	71fb      	strb	r3, [r7, #7]
    99f4:	4613      	mov	r3, r2
    99f6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    99f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99fc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99fe:	79fb      	ldrb	r3, [r7, #7]
    9a00:	4619      	mov	r1, r3
    9a02:	68f8      	ldr	r0, [r7, #12]
    9a04:	4b08      	ldr	r3, [pc, #32]	; (9a28 <_usbd_ep_is_stalled+0x40>)
    9a06:	4798      	blx	r3
    9a08:	4603      	mov	r3, r0
    9a0a:	4619      	mov	r1, r3
    9a0c:	79bb      	ldrb	r3, [r7, #6]
    9a0e:	2210      	movs	r2, #16
    9a10:	fa02 f303 	lsl.w	r3, r2, r3
    9a14:	400b      	ands	r3, r1
    9a16:	2b00      	cmp	r3, #0
    9a18:	bf14      	ite	ne
    9a1a:	2301      	movne	r3, #1
    9a1c:	2300      	moveq	r3, #0
    9a1e:	b2db      	uxtb	r3, r3
}
    9a20:	4618      	mov	r0, r3
    9a22:	3710      	adds	r7, #16
    9a24:	46bd      	mov	sp, r7
    9a26:	bd80      	pop	{r7, pc}
    9a28:	00009419 	.word	0x00009419

00009a2c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9a2c:	b580      	push	{r7, lr}
    9a2e:	b084      	sub	sp, #16
    9a30:	af00      	add	r7, sp, #0
    9a32:	4603      	mov	r3, r0
    9a34:	460a      	mov	r2, r1
    9a36:	71fb      	strb	r3, [r7, #7]
    9a38:	4613      	mov	r3, r2
    9a3a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9a3c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a40:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9a42:	79fb      	ldrb	r3, [r7, #7]
    9a44:	4619      	mov	r1, r3
    9a46:	68f8      	ldr	r0, [r7, #12]
    9a48:	4b08      	ldr	r3, [pc, #32]	; (9a6c <_usbd_ep_is_stall_sent+0x40>)
    9a4a:	4798      	blx	r3
    9a4c:	4603      	mov	r3, r0
    9a4e:	4619      	mov	r1, r3
    9a50:	79bb      	ldrb	r3, [r7, #6]
    9a52:	2220      	movs	r2, #32
    9a54:	fa02 f303 	lsl.w	r3, r2, r3
    9a58:	400b      	ands	r3, r1
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	bf14      	ite	ne
    9a5e:	2301      	movne	r3, #1
    9a60:	2300      	moveq	r3, #0
    9a62:	b2db      	uxtb	r3, r3
}
    9a64:	4618      	mov	r0, r3
    9a66:	3710      	adds	r7, #16
    9a68:	46bd      	mov	sp, r7
    9a6a:	bd80      	pop	{r7, pc}
    9a6c:	00009399 	.word	0x00009399

00009a70 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9a70:	b580      	push	{r7, lr}
    9a72:	b082      	sub	sp, #8
    9a74:	af00      	add	r7, sp, #0
    9a76:	4603      	mov	r3, r0
    9a78:	460a      	mov	r2, r1
    9a7a:	71fb      	strb	r3, [r7, #7]
    9a7c:	4613      	mov	r3, r2
    9a7e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9a80:	79bb      	ldrb	r3, [r7, #6]
    9a82:	2220      	movs	r2, #32
    9a84:	409a      	lsls	r2, r3
    9a86:	79fb      	ldrb	r3, [r7, #7]
    9a88:	4611      	mov	r1, r2
    9a8a:	4618      	mov	r0, r3
    9a8c:	4b02      	ldr	r3, [pc, #8]	; (9a98 <_usbd_ep_ack_stall+0x28>)
    9a8e:	4798      	blx	r3
}
    9a90:	bf00      	nop
    9a92:	3708      	adds	r7, #8
    9a94:	46bd      	mov	sp, r7
    9a96:	bd80      	pop	{r7, pc}
    9a98:	000098e9 	.word	0x000098e9

00009a9c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9a9c:	b580      	push	{r7, lr}
    9a9e:	b082      	sub	sp, #8
    9aa0:	af00      	add	r7, sp, #0
    9aa2:	4603      	mov	r3, r0
    9aa4:	71fb      	strb	r3, [r7, #7]
    9aa6:	460b      	mov	r3, r1
    9aa8:	71bb      	strb	r3, [r7, #6]
    9aaa:	4613      	mov	r3, r2
    9aac:	717b      	strb	r3, [r7, #5]
	if (en) {
    9aae:	797b      	ldrb	r3, [r7, #5]
    9ab0:	2b00      	cmp	r3, #0
    9ab2:	d008      	beq.n	9ac6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9ab4:	79bb      	ldrb	r3, [r7, #6]
    9ab6:	2220      	movs	r2, #32
    9ab8:	409a      	lsls	r2, r3
    9aba:	79fb      	ldrb	r3, [r7, #7]
    9abc:	4611      	mov	r1, r2
    9abe:	4618      	mov	r0, r3
    9ac0:	4b07      	ldr	r3, [pc, #28]	; (9ae0 <_usbd_ep_int_stall_en+0x44>)
    9ac2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9ac4:	e007      	b.n	9ad6 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9ac6:	79bb      	ldrb	r3, [r7, #6]
    9ac8:	2220      	movs	r2, #32
    9aca:	409a      	lsls	r2, r3
    9acc:	79fb      	ldrb	r3, [r7, #7]
    9ace:	4611      	mov	r1, r2
    9ad0:	4618      	mov	r0, r3
    9ad2:	4b04      	ldr	r3, [pc, #16]	; (9ae4 <_usbd_ep_int_stall_en+0x48>)
    9ad4:	4798      	blx	r3
}
    9ad6:	bf00      	nop
    9ad8:	3708      	adds	r7, #8
    9ada:	46bd      	mov	sp, r7
    9adc:	bd80      	pop	{r7, pc}
    9ade:	bf00      	nop
    9ae0:	00009911 	.word	0x00009911
    9ae4:	00009939 	.word	0x00009939

00009ae8 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9ae8:	b580      	push	{r7, lr}
    9aea:	b082      	sub	sp, #8
    9aec:	af00      	add	r7, sp, #0
    9aee:	4603      	mov	r3, r0
    9af0:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9af2:	79fb      	ldrb	r3, [r7, #7]
    9af4:	4619      	mov	r1, r3
    9af6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9afa:	4b03      	ldr	r3, [pc, #12]	; (9b08 <_usbd_ep_stop_setup+0x20>)
    9afc:	4798      	blx	r3
}
    9afe:	bf00      	nop
    9b00:	3708      	adds	r7, #8
    9b02:	46bd      	mov	sp, r7
    9b04:	bd80      	pop	{r7, pc}
    9b06:	bf00      	nop
    9b08:	0000946d 	.word	0x0000946d

00009b0c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b082      	sub	sp, #8
    9b10:	af00      	add	r7, sp, #0
    9b12:	4603      	mov	r3, r0
    9b14:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9b16:	79fb      	ldrb	r3, [r7, #7]
    9b18:	2210      	movs	r2, #16
    9b1a:	4619      	mov	r1, r3
    9b1c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b20:	4b05      	ldr	r3, [pc, #20]	; (9b38 <_usbd_ep_is_setup+0x2c>)
    9b22:	4798      	blx	r3
    9b24:	4603      	mov	r3, r0
    9b26:	2b00      	cmp	r3, #0
    9b28:	bf14      	ite	ne
    9b2a:	2301      	movne	r3, #1
    9b2c:	2300      	moveq	r3, #0
    9b2e:	b2db      	uxtb	r3, r3
}
    9b30:	4618      	mov	r0, r3
    9b32:	3708      	adds	r7, #8
    9b34:	46bd      	mov	sp, r7
    9b36:	bd80      	pop	{r7, pc}
    9b38:	00009363 	.word	0x00009363

00009b3c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9b3c:	b580      	push	{r7, lr}
    9b3e:	b082      	sub	sp, #8
    9b40:	af00      	add	r7, sp, #0
    9b42:	4603      	mov	r3, r0
    9b44:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9b46:	79fb      	ldrb	r3, [r7, #7]
    9b48:	2110      	movs	r1, #16
    9b4a:	4618      	mov	r0, r3
    9b4c:	4b02      	ldr	r3, [pc, #8]	; (9b58 <_usbd_ep_ack_setup+0x1c>)
    9b4e:	4798      	blx	r3
}
    9b50:	bf00      	nop
    9b52:	3708      	adds	r7, #8
    9b54:	46bd      	mov	sp, r7
    9b56:	bd80      	pop	{r7, pc}
    9b58:	000098e9 	.word	0x000098e9

00009b5c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9b5c:	b580      	push	{r7, lr}
    9b5e:	b082      	sub	sp, #8
    9b60:	af00      	add	r7, sp, #0
    9b62:	4603      	mov	r3, r0
    9b64:	71fb      	strb	r3, [r7, #7]
    9b66:	460b      	mov	r3, r1
    9b68:	71bb      	strb	r3, [r7, #6]
    9b6a:	4613      	mov	r3, r2
    9b6c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9b6e:	797b      	ldrb	r3, [r7, #5]
    9b70:	2b00      	cmp	r3, #0
    9b72:	d00b      	beq.n	9b8c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9b74:	79bb      	ldrb	r3, [r7, #6]
    9b76:	2201      	movs	r2, #1
    9b78:	fa02 f303 	lsl.w	r3, r2, r3
    9b7c:	b2da      	uxtb	r2, r3
    9b7e:	79fb      	ldrb	r3, [r7, #7]
    9b80:	4619      	mov	r1, r3
    9b82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b86:	4b09      	ldr	r3, [pc, #36]	; (9bac <_usbd_ep_set_toggle+0x50>)
    9b88:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9b8a:	e00a      	b.n	9ba2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9b8c:	79bb      	ldrb	r3, [r7, #6]
    9b8e:	2201      	movs	r2, #1
    9b90:	fa02 f303 	lsl.w	r3, r2, r3
    9b94:	b2da      	uxtb	r2, r3
    9b96:	79fb      	ldrb	r3, [r7, #7]
    9b98:	4619      	mov	r1, r3
    9b9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b9e:	4b04      	ldr	r3, [pc, #16]	; (9bb0 <_usbd_ep_set_toggle+0x54>)
    9ba0:	4798      	blx	r3
}
    9ba2:	bf00      	nop
    9ba4:	3708      	adds	r7, #8
    9ba6:	46bd      	mov	sp, r7
    9ba8:	bd80      	pop	{r7, pc}
    9baa:	bf00      	nop
    9bac:	000093ed 	.word	0x000093ed
    9bb0:	00009441 	.word	0x00009441

00009bb4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b082      	sub	sp, #8
    9bb8:	af00      	add	r7, sp, #0
    9bba:	4603      	mov	r3, r0
    9bbc:	460a      	mov	r2, r1
    9bbe:	71fb      	strb	r3, [r7, #7]
    9bc0:	4613      	mov	r3, r2
    9bc2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9bc4:	79bb      	ldrb	r3, [r7, #6]
    9bc6:	2201      	movs	r2, #1
    9bc8:	409a      	lsls	r2, r3
    9bca:	79fb      	ldrb	r3, [r7, #7]
    9bcc:	4611      	mov	r1, r2
    9bce:	4618      	mov	r0, r3
    9bd0:	4b02      	ldr	r3, [pc, #8]	; (9bdc <_usbd_ep_ack_io_cpt+0x28>)
    9bd2:	4798      	blx	r3
}
    9bd4:	bf00      	nop
    9bd6:	3708      	adds	r7, #8
    9bd8:	46bd      	mov	sp, r7
    9bda:	bd80      	pop	{r7, pc}
    9bdc:	000098e9 	.word	0x000098e9

00009be0 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9be0:	b480      	push	{r7}
    9be2:	b085      	sub	sp, #20
    9be4:	af00      	add	r7, sp, #0
    9be6:	4603      	mov	r3, r0
    9be8:	603a      	str	r2, [r7, #0]
    9bea:	71fb      	strb	r3, [r7, #7]
    9bec:	460b      	mov	r3, r1
    9bee:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9bf0:	79fa      	ldrb	r2, [r7, #7]
    9bf2:	79bb      	ldrb	r3, [r7, #6]
    9bf4:	0052      	lsls	r2, r2, #1
    9bf6:	4413      	add	r3, r2
    9bf8:	011b      	lsls	r3, r3, #4
    9bfa:	4a06      	ldr	r2, [pc, #24]	; (9c14 <_usbd_ep_set_buf+0x34>)
    9bfc:	4413      	add	r3, r2
    9bfe:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9c00:	68fb      	ldr	r3, [r7, #12]
    9c02:	683a      	ldr	r2, [r7, #0]
    9c04:	601a      	str	r2, [r3, #0]
}
    9c06:	bf00      	nop
    9c08:	3714      	adds	r7, #20
    9c0a:	46bd      	mov	sp, r7
    9c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c10:	4770      	bx	lr
    9c12:	bf00      	nop
    9c14:	20001150 	.word	0x20001150

00009c18 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9c18:	b480      	push	{r7}
    9c1a:	b085      	sub	sp, #20
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	4603      	mov	r3, r0
    9c20:	71fb      	strb	r3, [r7, #7]
    9c22:	460b      	mov	r3, r1
    9c24:	71bb      	strb	r3, [r7, #6]
    9c26:	4613      	mov	r3, r2
    9c28:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c2a:	79fa      	ldrb	r2, [r7, #7]
    9c2c:	79bb      	ldrb	r3, [r7, #6]
    9c2e:	0052      	lsls	r2, r2, #1
    9c30:	4413      	add	r3, r2
    9c32:	011b      	lsls	r3, r3, #4
    9c34:	4a08      	ldr	r2, [pc, #32]	; (9c58 <_usbd_ep_set_in_count+0x40>)
    9c36:	4413      	add	r3, r2
    9c38:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9c3a:	88bb      	ldrh	r3, [r7, #4]
    9c3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c40:	b299      	uxth	r1, r3
    9c42:	68fa      	ldr	r2, [r7, #12]
    9c44:	6853      	ldr	r3, [r2, #4]
    9c46:	f361 339b 	bfi	r3, r1, #14, #14
    9c4a:	6053      	str	r3, [r2, #4]
}
    9c4c:	bf00      	nop
    9c4e:	3714      	adds	r7, #20
    9c50:	46bd      	mov	sp, r7
    9c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c56:	4770      	bx	lr
    9c58:	20001150 	.word	0x20001150

00009c5c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9c5c:	b480      	push	{r7}
    9c5e:	b085      	sub	sp, #20
    9c60:	af00      	add	r7, sp, #0
    9c62:	4603      	mov	r3, r0
    9c64:	71fb      	strb	r3, [r7, #7]
    9c66:	460b      	mov	r3, r1
    9c68:	71bb      	strb	r3, [r7, #6]
    9c6a:	4613      	mov	r3, r2
    9c6c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c6e:	79fa      	ldrb	r2, [r7, #7]
    9c70:	79bb      	ldrb	r3, [r7, #6]
    9c72:	0052      	lsls	r2, r2, #1
    9c74:	4413      	add	r3, r2
    9c76:	011b      	lsls	r3, r3, #4
    9c78:	4a08      	ldr	r2, [pc, #32]	; (9c9c <_usbd_ep_set_in_size+0x40>)
    9c7a:	4413      	add	r3, r2
    9c7c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9c7e:	88bb      	ldrh	r3, [r7, #4]
    9c80:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c84:	b299      	uxth	r1, r3
    9c86:	68fa      	ldr	r2, [r7, #12]
    9c88:	6853      	ldr	r3, [r2, #4]
    9c8a:	f361 030d 	bfi	r3, r1, #0, #14
    9c8e:	6053      	str	r3, [r2, #4]
}
    9c90:	bf00      	nop
    9c92:	3714      	adds	r7, #20
    9c94:	46bd      	mov	sp, r7
    9c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c9a:	4770      	bx	lr
    9c9c:	20001150 	.word	0x20001150

00009ca0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9ca0:	b480      	push	{r7}
    9ca2:	b085      	sub	sp, #20
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	4603      	mov	r3, r0
    9ca8:	71fb      	strb	r3, [r7, #7]
    9caa:	460b      	mov	r3, r1
    9cac:	71bb      	strb	r3, [r7, #6]
    9cae:	4613      	mov	r3, r2
    9cb0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9cb2:	79fa      	ldrb	r2, [r7, #7]
    9cb4:	79bb      	ldrb	r3, [r7, #6]
    9cb6:	0052      	lsls	r2, r2, #1
    9cb8:	4413      	add	r3, r2
    9cba:	011b      	lsls	r3, r3, #4
    9cbc:	4a08      	ldr	r2, [pc, #32]	; (9ce0 <_usbd_ep_set_out_count+0x40>)
    9cbe:	4413      	add	r3, r2
    9cc0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9cc2:	88bb      	ldrh	r3, [r7, #4]
    9cc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9cc8:	b299      	uxth	r1, r3
    9cca:	68fa      	ldr	r2, [r7, #12]
    9ccc:	6853      	ldr	r3, [r2, #4]
    9cce:	f361 030d 	bfi	r3, r1, #0, #14
    9cd2:	6053      	str	r3, [r2, #4]
}
    9cd4:	bf00      	nop
    9cd6:	3714      	adds	r7, #20
    9cd8:	46bd      	mov	sp, r7
    9cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cde:	4770      	bx	lr
    9ce0:	20001150 	.word	0x20001150

00009ce4 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9ce4:	b480      	push	{r7}
    9ce6:	b085      	sub	sp, #20
    9ce8:	af00      	add	r7, sp, #0
    9cea:	4603      	mov	r3, r0
    9cec:	71fb      	strb	r3, [r7, #7]
    9cee:	460b      	mov	r3, r1
    9cf0:	71bb      	strb	r3, [r7, #6]
    9cf2:	4613      	mov	r3, r2
    9cf4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9cf6:	79fa      	ldrb	r2, [r7, #7]
    9cf8:	79bb      	ldrb	r3, [r7, #6]
    9cfa:	0052      	lsls	r2, r2, #1
    9cfc:	4413      	add	r3, r2
    9cfe:	011b      	lsls	r3, r3, #4
    9d00:	4a08      	ldr	r2, [pc, #32]	; (9d24 <_usbd_ep_set_out_size+0x40>)
    9d02:	4413      	add	r3, r2
    9d04:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9d06:	88bb      	ldrh	r3, [r7, #4]
    9d08:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9d0c:	b299      	uxth	r1, r3
    9d0e:	68fa      	ldr	r2, [r7, #12]
    9d10:	6853      	ldr	r3, [r2, #4]
    9d12:	f361 339b 	bfi	r3, r1, #14, #14
    9d16:	6053      	str	r3, [r2, #4]
}
    9d18:	bf00      	nop
    9d1a:	3714      	adds	r7, #20
    9d1c:	46bd      	mov	sp, r7
    9d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d22:	4770      	bx	lr
    9d24:	20001150 	.word	0x20001150

00009d28 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9d28:	b580      	push	{r7, lr}
    9d2a:	b084      	sub	sp, #16
    9d2c:	af00      	add	r7, sp, #0
    9d2e:	60ba      	str	r2, [r7, #8]
    9d30:	607b      	str	r3, [r7, #4]
    9d32:	4603      	mov	r3, r0
    9d34:	73fb      	strb	r3, [r7, #15]
    9d36:	460b      	mov	r3, r1
    9d38:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9d3a:	68bb      	ldr	r3, [r7, #8]
    9d3c:	b29a      	uxth	r2, r3
    9d3e:	7bb9      	ldrb	r1, [r7, #14]
    9d40:	7bfb      	ldrb	r3, [r7, #15]
    9d42:	4618      	mov	r0, r3
    9d44:	4b06      	ldr	r3, [pc, #24]	; (9d60 <_usbd_ep_set_in_trans+0x38>)
    9d46:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	b29a      	uxth	r2, r3
    9d4c:	7bb9      	ldrb	r1, [r7, #14]
    9d4e:	7bfb      	ldrb	r3, [r7, #15]
    9d50:	4618      	mov	r0, r3
    9d52:	4b04      	ldr	r3, [pc, #16]	; (9d64 <_usbd_ep_set_in_trans+0x3c>)
    9d54:	4798      	blx	r3
}
    9d56:	bf00      	nop
    9d58:	3710      	adds	r7, #16
    9d5a:	46bd      	mov	sp, r7
    9d5c:	bd80      	pop	{r7, pc}
    9d5e:	bf00      	nop
    9d60:	00009c5d 	.word	0x00009c5d
    9d64:	00009c19 	.word	0x00009c19

00009d68 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9d68:	b580      	push	{r7, lr}
    9d6a:	b084      	sub	sp, #16
    9d6c:	af00      	add	r7, sp, #0
    9d6e:	60ba      	str	r2, [r7, #8]
    9d70:	607b      	str	r3, [r7, #4]
    9d72:	4603      	mov	r3, r0
    9d74:	73fb      	strb	r3, [r7, #15]
    9d76:	460b      	mov	r3, r1
    9d78:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9d7a:	68bb      	ldr	r3, [r7, #8]
    9d7c:	b29a      	uxth	r2, r3
    9d7e:	7bb9      	ldrb	r1, [r7, #14]
    9d80:	7bfb      	ldrb	r3, [r7, #15]
    9d82:	4618      	mov	r0, r3
    9d84:	4b06      	ldr	r3, [pc, #24]	; (9da0 <_usbd_ep_set_out_trans+0x38>)
    9d86:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	b29a      	uxth	r2, r3
    9d8c:	7bb9      	ldrb	r1, [r7, #14]
    9d8e:	7bfb      	ldrb	r3, [r7, #15]
    9d90:	4618      	mov	r0, r3
    9d92:	4b04      	ldr	r3, [pc, #16]	; (9da4 <_usbd_ep_set_out_trans+0x3c>)
    9d94:	4798      	blx	r3
}
    9d96:	bf00      	nop
    9d98:	3710      	adds	r7, #16
    9d9a:	46bd      	mov	sp, r7
    9d9c:	bd80      	pop	{r7, pc}
    9d9e:	bf00      	nop
    9da0:	00009ce5 	.word	0x00009ce5
    9da4:	00009ca1 	.word	0x00009ca1

00009da8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9da8:	b480      	push	{r7}
    9daa:	b085      	sub	sp, #20
    9dac:	af00      	add	r7, sp, #0
    9dae:	4603      	mov	r3, r0
    9db0:	460a      	mov	r2, r1
    9db2:	71fb      	strb	r3, [r7, #7]
    9db4:	4613      	mov	r3, r2
    9db6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9db8:	79fa      	ldrb	r2, [r7, #7]
    9dba:	79bb      	ldrb	r3, [r7, #6]
    9dbc:	0052      	lsls	r2, r2, #1
    9dbe:	4413      	add	r3, r2
    9dc0:	011b      	lsls	r3, r3, #4
    9dc2:	4a06      	ldr	r2, [pc, #24]	; (9ddc <_usbd_ep_clear_bank_status+0x34>)
    9dc4:	4413      	add	r3, r2
    9dc6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9dc8:	68fb      	ldr	r3, [r7, #12]
    9dca:	2200      	movs	r2, #0
    9dcc:	729a      	strb	r2, [r3, #10]
}
    9dce:	bf00      	nop
    9dd0:	3714      	adds	r7, #20
    9dd2:	46bd      	mov	sp, r7
    9dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd8:	4770      	bx	lr
    9dda:	bf00      	nop
    9ddc:	20001150 	.word	0x20001150

00009de0 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9de0:	b580      	push	{r7, lr}
    9de2:	b082      	sub	sp, #8
    9de4:	af00      	add	r7, sp, #0
    9de6:	4603      	mov	r3, r0
    9de8:	71fb      	strb	r3, [r7, #7]
    9dea:	460b      	mov	r3, r1
    9dec:	71bb      	strb	r3, [r7, #6]
    9dee:	4613      	mov	r3, r2
    9df0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9df2:	797b      	ldrb	r3, [r7, #5]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d00b      	beq.n	9e10 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9df8:	79bb      	ldrb	r3, [r7, #6]
    9dfa:	2240      	movs	r2, #64	; 0x40
    9dfc:	fa02 f303 	lsl.w	r3, r2, r3
    9e00:	b2da      	uxtb	r2, r3
    9e02:	79fb      	ldrb	r3, [r7, #7]
    9e04:	4619      	mov	r1, r3
    9e06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e0a:	4b09      	ldr	r3, [pc, #36]	; (9e30 <_usbd_ep_set_in_rdy+0x50>)
    9e0c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9e0e:	e00a      	b.n	9e26 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9e10:	79bb      	ldrb	r3, [r7, #6]
    9e12:	2240      	movs	r2, #64	; 0x40
    9e14:	fa02 f303 	lsl.w	r3, r2, r3
    9e18:	b2da      	uxtb	r2, r3
    9e1a:	79fb      	ldrb	r3, [r7, #7]
    9e1c:	4619      	mov	r1, r3
    9e1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e22:	4b04      	ldr	r3, [pc, #16]	; (9e34 <_usbd_ep_set_in_rdy+0x54>)
    9e24:	4798      	blx	r3
}
    9e26:	bf00      	nop
    9e28:	3708      	adds	r7, #8
    9e2a:	46bd      	mov	sp, r7
    9e2c:	bd80      	pop	{r7, pc}
    9e2e:	bf00      	nop
    9e30:	000093ed 	.word	0x000093ed
    9e34:	00009441 	.word	0x00009441

00009e38 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b082      	sub	sp, #8
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	4603      	mov	r3, r0
    9e40:	71fb      	strb	r3, [r7, #7]
    9e42:	460b      	mov	r3, r1
    9e44:	71bb      	strb	r3, [r7, #6]
    9e46:	4613      	mov	r3, r2
    9e48:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9e4a:	797b      	ldrb	r3, [r7, #5]
    9e4c:	2b00      	cmp	r3, #0
    9e4e:	d00b      	beq.n	9e68 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9e50:	79bb      	ldrb	r3, [r7, #6]
    9e52:	2240      	movs	r2, #64	; 0x40
    9e54:	fa02 f303 	lsl.w	r3, r2, r3
    9e58:	b2da      	uxtb	r2, r3
    9e5a:	79fb      	ldrb	r3, [r7, #7]
    9e5c:	4619      	mov	r1, r3
    9e5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e62:	4b09      	ldr	r3, [pc, #36]	; (9e88 <_usbd_ep_set_out_rdy+0x50>)
    9e64:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9e66:	e00a      	b.n	9e7e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9e68:	79bb      	ldrb	r3, [r7, #6]
    9e6a:	2240      	movs	r2, #64	; 0x40
    9e6c:	fa02 f303 	lsl.w	r3, r2, r3
    9e70:	b2da      	uxtb	r2, r3
    9e72:	79fb      	ldrb	r3, [r7, #7]
    9e74:	4619      	mov	r1, r3
    9e76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e7a:	4b04      	ldr	r3, [pc, #16]	; (9e8c <_usbd_ep_set_out_rdy+0x54>)
    9e7c:	4798      	blx	r3
}
    9e7e:	bf00      	nop
    9e80:	3708      	adds	r7, #8
    9e82:	46bd      	mov	sp, r7
    9e84:	bd80      	pop	{r7, pc}
    9e86:	bf00      	nop
    9e88:	00009441 	.word	0x00009441
    9e8c:	000093ed 	.word	0x000093ed

00009e90 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9e90:	b480      	push	{r7}
    9e92:	b083      	sub	sp, #12
    9e94:	af00      	add	r7, sp, #0
    9e96:	4603      	mov	r3, r0
    9e98:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9e9a:	88fb      	ldrh	r3, [r7, #6]
    9e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9ea0:	d820      	bhi.n	9ee4 <_usbd_ep_pcksize_size+0x54>
    9ea2:	88fb      	ldrh	r3, [r7, #6]
    9ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9ea8:	d81a      	bhi.n	9ee0 <_usbd_ep_pcksize_size+0x50>
    9eaa:	88fb      	ldrh	r3, [r7, #6]
    9eac:	2b80      	cmp	r3, #128	; 0x80
    9eae:	d815      	bhi.n	9edc <_usbd_ep_pcksize_size+0x4c>
    9eb0:	88fb      	ldrh	r3, [r7, #6]
    9eb2:	2b40      	cmp	r3, #64	; 0x40
    9eb4:	d810      	bhi.n	9ed8 <_usbd_ep_pcksize_size+0x48>
    9eb6:	88fb      	ldrh	r3, [r7, #6]
    9eb8:	2b20      	cmp	r3, #32
    9eba:	d80b      	bhi.n	9ed4 <_usbd_ep_pcksize_size+0x44>
    9ebc:	88fb      	ldrh	r3, [r7, #6]
    9ebe:	2b10      	cmp	r3, #16
    9ec0:	d806      	bhi.n	9ed0 <_usbd_ep_pcksize_size+0x40>
    9ec2:	88fb      	ldrh	r3, [r7, #6]
    9ec4:	2b08      	cmp	r3, #8
    9ec6:	bf8c      	ite	hi
    9ec8:	2301      	movhi	r3, #1
    9eca:	2300      	movls	r3, #0
    9ecc:	b2db      	uxtb	r3, r3
    9ece:	e00a      	b.n	9ee6 <_usbd_ep_pcksize_size+0x56>
    9ed0:	2302      	movs	r3, #2
    9ed2:	e008      	b.n	9ee6 <_usbd_ep_pcksize_size+0x56>
    9ed4:	2303      	movs	r3, #3
    9ed6:	e006      	b.n	9ee6 <_usbd_ep_pcksize_size+0x56>
    9ed8:	2304      	movs	r3, #4
    9eda:	e004      	b.n	9ee6 <_usbd_ep_pcksize_size+0x56>
    9edc:	2305      	movs	r3, #5
    9ede:	e002      	b.n	9ee6 <_usbd_ep_pcksize_size+0x56>
    9ee0:	2306      	movs	r3, #6
    9ee2:	e000      	b.n	9ee6 <_usbd_ep_pcksize_size+0x56>
    9ee4:	2307      	movs	r3, #7
}
    9ee6:	4618      	mov	r0, r3
    9ee8:	370c      	adds	r7, #12
    9eea:	46bd      	mov	sp, r7
    9eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ef0:	4770      	bx	lr
	...

00009ef4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9ef4:	b480      	push	{r7}
    9ef6:	b085      	sub	sp, #20
    9ef8:	af00      	add	r7, sp, #0
    9efa:	4603      	mov	r3, r0
    9efc:	460a      	mov	r2, r1
    9efe:	71fb      	strb	r3, [r7, #7]
    9f00:	4613      	mov	r3, r2
    9f02:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9f04:	79fb      	ldrb	r3, [r7, #7]
    9f06:	2b00      	cmp	r3, #0
    9f08:	d008      	beq.n	9f1c <_usb_d_dev_ept+0x28>
    9f0a:	79bb      	ldrb	r3, [r7, #6]
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d003      	beq.n	9f18 <_usb_d_dev_ept+0x24>
    9f10:	79fb      	ldrb	r3, [r7, #7]
    9f12:	3304      	adds	r3, #4
    9f14:	b2db      	uxtb	r3, r3
    9f16:	e002      	b.n	9f1e <_usb_d_dev_ept+0x2a>
    9f18:	79fb      	ldrb	r3, [r7, #7]
    9f1a:	e000      	b.n	9f1e <_usb_d_dev_ept+0x2a>
    9f1c:	2300      	movs	r3, #0
    9f1e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9f20:	7bfa      	ldrb	r2, [r7, #15]
    9f22:	4613      	mov	r3, r2
    9f24:	009b      	lsls	r3, r3, #2
    9f26:	4413      	add	r3, r2
    9f28:	009b      	lsls	r3, r3, #2
    9f2a:	3310      	adds	r3, #16
    9f2c:	4a04      	ldr	r2, [pc, #16]	; (9f40 <_usb_d_dev_ept+0x4c>)
    9f2e:	4413      	add	r3, r2
    9f30:	3304      	adds	r3, #4
}
    9f32:	4618      	mov	r0, r3
    9f34:	3714      	adds	r7, #20
    9f36:	46bd      	mov	sp, r7
    9f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f3c:	4770      	bx	lr
    9f3e:	bf00      	nop
    9f40:	20001088 	.word	0x20001088

00009f44 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9f44:	b580      	push	{r7, lr}
    9f46:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9f48:	2104      	movs	r1, #4
    9f4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f4e:	4b03      	ldr	r3, [pc, #12]	; (9f5c <_usb_d_dev_sof+0x18>)
    9f50:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9f52:	4b03      	ldr	r3, [pc, #12]	; (9f60 <_usb_d_dev_sof+0x1c>)
    9f54:	681b      	ldr	r3, [r3, #0]
    9f56:	4798      	blx	r3
}
    9f58:	bf00      	nop
    9f5a:	bd80      	pop	{r7, pc}
    9f5c:	000095bb 	.word	0x000095bb
    9f60:	20001088 	.word	0x20001088

00009f64 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	b084      	sub	sp, #16
    9f68:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9f6a:	2300      	movs	r3, #0
    9f6c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f6e:	f240 2101 	movw	r1, #513	; 0x201
    9f72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f76:	4b1a      	ldr	r3, [pc, #104]	; (9fe0 <_usb_d_dev_lpmsusp+0x7c>)
    9f78:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9f7a:	f240 2101 	movw	r1, #513	; 0x201
    9f7e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f82:	4b18      	ldr	r3, [pc, #96]	; (9fe4 <_usb_d_dev_lpmsusp+0x80>)
    9f84:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9f86:	2170      	movs	r1, #112	; 0x70
    9f88:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f8c:	4b16      	ldr	r3, [pc, #88]	; (9fe8 <_usb_d_dev_lpmsusp+0x84>)
    9f8e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9f90:	2300      	movs	r3, #0
    9f92:	73fb      	strb	r3, [r7, #15]
    9f94:	e018      	b.n	9fc8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9f96:	7bfb      	ldrb	r3, [r7, #15]
    9f98:	015b      	lsls	r3, r3, #5
    9f9a:	4a14      	ldr	r2, [pc, #80]	; (9fec <_usb_d_dev_lpmsusp+0x88>)
    9f9c:	4413      	add	r3, r2
    9f9e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9fa0:	687b      	ldr	r3, [r7, #4]
    9fa2:	891b      	ldrh	r3, [r3, #8]
    9fa4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	2b03      	cmp	r3, #3
    9fac:	d109      	bne.n	9fc2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9fae:	687b      	ldr	r3, [r7, #4]
    9fb0:	891b      	ldrh	r3, [r3, #8]
    9fb2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9fb6:	b29b      	uxth	r3, r3
    9fb8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9fba:	687b      	ldr	r3, [r7, #4]
    9fbc:	2200      	movs	r2, #0
    9fbe:	811a      	strh	r2, [r3, #8]
			break;
    9fc0:	e005      	b.n	9fce <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9fc2:	7bfb      	ldrb	r3, [r7, #15]
    9fc4:	3301      	adds	r3, #1
    9fc6:	73fb      	strb	r3, [r7, #15]
    9fc8:	7bfb      	ldrb	r3, [r7, #15]
    9fca:	2b03      	cmp	r3, #3
    9fcc:	d9e3      	bls.n	9f96 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9fce:	4b08      	ldr	r3, [pc, #32]	; (9ff0 <_usb_d_dev_lpmsusp+0x8c>)
    9fd0:	685b      	ldr	r3, [r3, #4]
    9fd2:	68b9      	ldr	r1, [r7, #8]
    9fd4:	2003      	movs	r0, #3
    9fd6:	4798      	blx	r3
}
    9fd8:	bf00      	nop
    9fda:	3710      	adds	r7, #16
    9fdc:	46bd      	mov	sp, r7
    9fde:	bd80      	pop	{r7, pc}
    9fe0:	000095bb 	.word	0x000095bb
    9fe4:	00009611 	.word	0x00009611
    9fe8:	000095d9 	.word	0x000095d9
    9fec:	20001150 	.word	0x20001150
    9ff0:	20001088 	.word	0x20001088

00009ff4 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9ff4:	b580      	push	{r7, lr}
    9ff6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9ff8:	2180      	movs	r1, #128	; 0x80
    9ffa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ffe:	4b04      	ldr	r3, [pc, #16]	; (a010 <_usb_d_dev_ramerr+0x1c>)
    a000:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    a002:	4b04      	ldr	r3, [pc, #16]	; (a014 <_usb_d_dev_ramerr+0x20>)
    a004:	685b      	ldr	r3, [r3, #4]
    a006:	2100      	movs	r1, #0
    a008:	2005      	movs	r0, #5
    a00a:	4798      	blx	r3
}
    a00c:	bf00      	nop
    a00e:	bd80      	pop	{r7, pc}
    a010:	000095bb 	.word	0x000095bb
    a014:	20001088 	.word	0x20001088

0000a018 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    a018:	b580      	push	{r7, lr}
    a01a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a01c:	2170      	movs	r1, #112	; 0x70
    a01e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a022:	4b0b      	ldr	r3, [pc, #44]	; (a050 <_usb_d_dev_wakeup+0x38>)
    a024:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a026:	2170      	movs	r1, #112	; 0x70
    a028:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a02c:	4b09      	ldr	r3, [pc, #36]	; (a054 <_usb_d_dev_wakeup+0x3c>)
    a02e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a030:	f240 2101 	movw	r1, #513	; 0x201
    a034:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a038:	4b07      	ldr	r3, [pc, #28]	; (a058 <_usb_d_dev_wakeup+0x40>)
    a03a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    a03c:	2000      	movs	r0, #0
    a03e:	4b07      	ldr	r3, [pc, #28]	; (a05c <_usb_d_dev_wakeup+0x44>)
    a040:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    a042:	4b07      	ldr	r3, [pc, #28]	; (a060 <_usb_d_dev_wakeup+0x48>)
    a044:	685b      	ldr	r3, [r3, #4]
    a046:	2100      	movs	r1, #0
    a048:	2002      	movs	r0, #2
    a04a:	4798      	blx	r3
}
    a04c:	bf00      	nop
    a04e:	bd80      	pop	{r7, pc}
    a050:	000095bb 	.word	0x000095bb
    a054:	00009611 	.word	0x00009611
    a058:	000095d9 	.word	0x000095d9
    a05c:	000098b9 	.word	0x000098b9
    a060:	20001088 	.word	0x20001088

0000a064 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    a064:	b580      	push	{r7, lr}
    a066:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    a068:	2200      	movs	r2, #0
    a06a:	2100      	movs	r1, #0
    a06c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a070:	4b0d      	ldr	r3, [pc, #52]	; (a0a8 <_usb_d_dev_reset+0x44>)
    a072:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    a074:	2108      	movs	r1, #8
    a076:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a07a:	4b0c      	ldr	r3, [pc, #48]	; (a0ac <_usb_d_dev_reset+0x48>)
    a07c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a07e:	2170      	movs	r1, #112	; 0x70
    a080:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a084:	4b0a      	ldr	r3, [pc, #40]	; (a0b0 <_usb_d_dev_reset+0x4c>)
    a086:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a088:	f240 2101 	movw	r1, #513	; 0x201
    a08c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a090:	4b08      	ldr	r3, [pc, #32]	; (a0b4 <_usb_d_dev_reset+0x50>)
    a092:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    a094:	4b08      	ldr	r3, [pc, #32]	; (a0b8 <_usb_d_dev_reset+0x54>)
    a096:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a098:	4b08      	ldr	r3, [pc, #32]	; (a0bc <_usb_d_dev_reset+0x58>)
    a09a:	685b      	ldr	r3, [r3, #4]
    a09c:	2100      	movs	r1, #0
    a09e:	2001      	movs	r0, #1
    a0a0:	4798      	blx	r3
}
    a0a2:	bf00      	nop
    a0a4:	bd80      	pop	{r7, pc}
    a0a6:	bf00      	nop
    a0a8:	00009551 	.word	0x00009551
    a0ac:	000095bb 	.word	0x000095bb
    a0b0:	00009611 	.word	0x00009611
    a0b4:	000095d9 	.word	0x000095d9
    a0b8:	0000ac21 	.word	0x0000ac21
    a0bc:	20001088 	.word	0x20001088

0000a0c0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    a0c0:	b580      	push	{r7, lr}
    a0c2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a0c4:	f240 2101 	movw	r1, #513	; 0x201
    a0c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0cc:	4b09      	ldr	r3, [pc, #36]	; (a0f4 <_usb_d_dev_suspend+0x34>)
    a0ce:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a0d0:	f240 2101 	movw	r1, #513	; 0x201
    a0d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0d8:	4b07      	ldr	r3, [pc, #28]	; (a0f8 <_usb_d_dev_suspend+0x38>)
    a0da:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a0dc:	2170      	movs	r1, #112	; 0x70
    a0de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a0e2:	4b06      	ldr	r3, [pc, #24]	; (a0fc <_usb_d_dev_suspend+0x3c>)
    a0e4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a0e6:	4b06      	ldr	r3, [pc, #24]	; (a100 <_usb_d_dev_suspend+0x40>)
    a0e8:	685b      	ldr	r3, [r3, #4]
    a0ea:	2100      	movs	r1, #0
    a0ec:	2004      	movs	r0, #4
    a0ee:	4798      	blx	r3
}
    a0f0:	bf00      	nop
    a0f2:	bd80      	pop	{r7, pc}
    a0f4:	000095bb 	.word	0x000095bb
    a0f8:	00009611 	.word	0x00009611
    a0fc:	000095d9 	.word	0x000095d9
    a100:	20001088 	.word	0x20001088

0000a104 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    a104:	b580      	push	{r7, lr}
    a106:	b082      	sub	sp, #8
    a108:	af00      	add	r7, sp, #0
	bool     rc    = true;
    a10a:	2301      	movs	r3, #1
    a10c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    a10e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a112:	4b22      	ldr	r3, [pc, #136]	; (a19c <_usb_d_dev_handle_nep+0x98>)
    a114:	4798      	blx	r3
    a116:	4603      	mov	r3, r0
    a118:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a11a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a11e:	4b20      	ldr	r3, [pc, #128]	; (a1a0 <_usb_d_dev_handle_nep+0x9c>)
    a120:	4798      	blx	r3
    a122:	4603      	mov	r3, r0
    a124:	461a      	mov	r2, r3
    a126:	88bb      	ldrh	r3, [r7, #4]
    a128:	4013      	ands	r3, r2
    a12a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a12c:	88bb      	ldrh	r3, [r7, #4]
    a12e:	f003 0304 	and.w	r3, r3, #4
    a132:	2b00      	cmp	r3, #0
    a134:	d003      	beq.n	a13e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    a136:	4b1b      	ldr	r3, [pc, #108]	; (a1a4 <_usb_d_dev_handle_nep+0xa0>)
    a138:	4798      	blx	r3
		return true;
    a13a:	2301      	movs	r3, #1
    a13c:	e02a      	b.n	a194 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a13e:	88bb      	ldrh	r3, [r7, #4]
    a140:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a144:	2b00      	cmp	r3, #0
    a146:	d002      	beq.n	a14e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    a148:	4b17      	ldr	r3, [pc, #92]	; (a1a8 <_usb_d_dev_handle_nep+0xa4>)
    a14a:	4798      	blx	r3
    a14c:	e021      	b.n	a192 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a14e:	88bb      	ldrh	r3, [r7, #4]
    a150:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a154:	2b00      	cmp	r3, #0
    a156:	d002      	beq.n	a15e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    a158:	4b14      	ldr	r3, [pc, #80]	; (a1ac <_usb_d_dev_handle_nep+0xa8>)
    a15a:	4798      	blx	r3
    a15c:	e019      	b.n	a192 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a15e:	88bb      	ldrh	r3, [r7, #4]
    a160:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a164:	2b00      	cmp	r3, #0
    a166:	d002      	beq.n	a16e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    a168:	4b11      	ldr	r3, [pc, #68]	; (a1b0 <_usb_d_dev_handle_nep+0xac>)
    a16a:	4798      	blx	r3
    a16c:	e011      	b.n	a192 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a16e:	88bb      	ldrh	r3, [r7, #4]
    a170:	f003 0308 	and.w	r3, r3, #8
    a174:	2b00      	cmp	r3, #0
    a176:	d002      	beq.n	a17e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    a178:	4b0e      	ldr	r3, [pc, #56]	; (a1b4 <_usb_d_dev_handle_nep+0xb0>)
    a17a:	4798      	blx	r3
    a17c:	e009      	b.n	a192 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a17e:	88bb      	ldrh	r3, [r7, #4]
    a180:	f003 0301 	and.w	r3, r3, #1
    a184:	2b00      	cmp	r3, #0
    a186:	d002      	beq.n	a18e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    a188:	4b0b      	ldr	r3, [pc, #44]	; (a1b8 <_usb_d_dev_handle_nep+0xb4>)
    a18a:	4798      	blx	r3
    a18c:	e001      	b.n	a192 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    a18e:	2300      	movs	r3, #0
    a190:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    a192:	79fb      	ldrb	r3, [r7, #7]
}
    a194:	4618      	mov	r0, r3
    a196:	3708      	adds	r7, #8
    a198:	46bd      	mov	sp, r7
    a19a:	bd80      	pop	{r7, pc}
    a19c:	000095a1 	.word	0x000095a1
    a1a0:	000095f7 	.word	0x000095f7
    a1a4:	00009f45 	.word	0x00009f45
    a1a8:	00009f65 	.word	0x00009f65
    a1ac:	00009ff5 	.word	0x00009ff5
    a1b0:	0000a019 	.word	0x0000a019
    a1b4:	0000a065 	.word	0x0000a065
    a1b8:	0000a0c1 	.word	0x0000a0c1

0000a1bc <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a1bc:	b590      	push	{r4, r7, lr}
    a1be:	b089      	sub	sp, #36	; 0x24
    a1c0:	af00      	add	r7, sp, #0
    a1c2:	6078      	str	r0, [r7, #4]
    a1c4:	460b      	mov	r3, r1
    a1c6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a1c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a1cc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	7c9b      	ldrb	r3, [r3, #18]
    a1d2:	f003 030f 	and.w	r3, r3, #15
    a1d6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a1d8:	7dfb      	ldrb	r3, [r7, #23]
    a1da:	015b      	lsls	r3, r3, #5
    a1dc:	4a73      	ldr	r2, [pc, #460]	; (a3ac <_usb_d_dev_in_next+0x1f0>)
    a1de:	4413      	add	r3, r2
    a1e0:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a1e2:	78fb      	ldrb	r3, [r7, #3]
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d006      	beq.n	a1f6 <_usb_d_dev_in_next+0x3a>
    a1e8:	693b      	ldr	r3, [r7, #16]
    a1ea:	3310      	adds	r3, #16
    a1ec:	685b      	ldr	r3, [r3, #4]
    a1ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a1f2:	b29b      	uxth	r3, r3
    a1f4:	e000      	b.n	a1f8 <_usb_d_dev_in_next+0x3c>
    a1f6:	2300      	movs	r3, #0
    a1f8:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	8a1b      	ldrh	r3, [r3, #16]
    a1fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a202:	4293      	cmp	r3, r2
    a204:	d103      	bne.n	a20e <_usb_d_dev_in_next+0x52>
    a206:	687b      	ldr	r3, [r7, #4]
    a208:	8a1b      	ldrh	r3, [r3, #16]
    a20a:	b21b      	sxth	r3, r3
    a20c:	e004      	b.n	a218 <_usb_d_dev_in_next+0x5c>
    a20e:	687b      	ldr	r3, [r7, #4]
    a210:	8a1b      	ldrh	r3, [r3, #16]
    a212:	3b01      	subs	r3, #1
    a214:	b29b      	uxth	r3, r3
    a216:	b21b      	sxth	r3, r3
    a218:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a21c:	4013      	ands	r3, r2
    a21e:	b21b      	sxth	r3, r3
    a220:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a222:	2300      	movs	r3, #0
    a224:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a226:	687b      	ldr	r3, [r7, #4]
    a228:	7cdb      	ldrb	r3, [r3, #19]
    a22a:	f003 0307 	and.w	r3, r3, #7
    a22e:	b2db      	uxtb	r3, r3
    a230:	2b01      	cmp	r3, #1
    a232:	bf0c      	ite	eq
    a234:	2301      	moveq	r3, #1
    a236:	2300      	movne	r3, #0
    a238:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a23a:	78fb      	ldrb	r3, [r7, #3]
    a23c:	2b00      	cmp	r3, #0
    a23e:	d004      	beq.n	a24a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a240:	7dfb      	ldrb	r3, [r7, #23]
    a242:	2101      	movs	r1, #1
    a244:	4618      	mov	r0, r3
    a246:	4b5a      	ldr	r3, [pc, #360]	; (a3b0 <_usb_d_dev_in_next+0x1f4>)
    a248:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a24a:	687b      	ldr	r3, [r7, #4]
    a24c:	689a      	ldr	r2, [r3, #8]
    a24e:	89fb      	ldrh	r3, [r7, #14]
    a250:	441a      	add	r2, r3
    a252:	687b      	ldr	r3, [r7, #4]
    a254:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	689a      	ldr	r2, [r3, #8]
    a25a:	687b      	ldr	r3, [r7, #4]
    a25c:	685b      	ldr	r3, [r3, #4]
    a25e:	429a      	cmp	r2, r3
    a260:	d243      	bcs.n	a2ea <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a262:	687b      	ldr	r3, [r7, #4]
    a264:	685b      	ldr	r3, [r3, #4]
    a266:	b29a      	uxth	r2, r3
    a268:	687b      	ldr	r3, [r7, #4]
    a26a:	689b      	ldr	r3, [r3, #8]
    a26c:	b29b      	uxth	r3, r3
    a26e:	1ad3      	subs	r3, r2, r3
    a270:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a272:	687b      	ldr	r3, [r7, #4]
    a274:	7cdb      	ldrb	r3, [r3, #19]
    a276:	f003 0320 	and.w	r3, r3, #32
    a27a:	b2db      	uxtb	r3, r3
    a27c:	2b00      	cmp	r3, #0
    a27e:	d01b      	beq.n	a2b8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a280:	687b      	ldr	r3, [r7, #4]
    a282:	8a1b      	ldrh	r3, [r3, #16]
    a284:	8bfa      	ldrh	r2, [r7, #30]
    a286:	429a      	cmp	r2, r3
    a288:	d902      	bls.n	a290 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	8a1b      	ldrh	r3, [r3, #16]
    a28e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a290:	687b      	ldr	r3, [r7, #4]
    a292:	68d8      	ldr	r0, [r3, #12]
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	681a      	ldr	r2, [r3, #0]
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	689b      	ldr	r3, [r3, #8]
    a29c:	4413      	add	r3, r2
    a29e:	8bfa      	ldrh	r2, [r7, #30]
    a2a0:	4619      	mov	r1, r3
    a2a2:	4b44      	ldr	r3, [pc, #272]	; (a3b4 <_usb_d_dev_in_next+0x1f8>)
    a2a4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a2a6:	687b      	ldr	r3, [r7, #4]
    a2a8:	68db      	ldr	r3, [r3, #12]
    a2aa:	461a      	mov	r2, r3
    a2ac:	7dfb      	ldrb	r3, [r7, #23]
    a2ae:	2101      	movs	r1, #1
    a2b0:	4618      	mov	r0, r3
    a2b2:	4b41      	ldr	r3, [pc, #260]	; (a3b8 <_usb_d_dev_in_next+0x1fc>)
    a2b4:	4798      	blx	r3
    a2b6:	e011      	b.n	a2dc <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a2b8:	8bfb      	ldrh	r3, [r7, #30]
    a2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a2be:	d902      	bls.n	a2c6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a2c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a2c4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	681a      	ldr	r2, [r3, #0]
    a2ca:	687b      	ldr	r3, [r7, #4]
    a2cc:	689b      	ldr	r3, [r3, #8]
    a2ce:	4413      	add	r3, r2
    a2d0:	461a      	mov	r2, r3
    a2d2:	7dfb      	ldrb	r3, [r7, #23]
    a2d4:	2101      	movs	r1, #1
    a2d6:	4618      	mov	r0, r3
    a2d8:	4b37      	ldr	r3, [pc, #220]	; (a3b8 <_usb_d_dev_in_next+0x1fc>)
    a2da:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a2dc:	8bfa      	ldrh	r2, [r7, #30]
    a2de:	7df8      	ldrb	r0, [r7, #23]
    a2e0:	2300      	movs	r3, #0
    a2e2:	2101      	movs	r1, #1
    a2e4:	4c35      	ldr	r4, [pc, #212]	; (a3bc <_usb_d_dev_in_next+0x200>)
    a2e6:	47a0      	blx	r4
		goto _in_tx_exec;
    a2e8:	e041      	b.n	a36e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a2ea:	687b      	ldr	r3, [r7, #4]
    a2ec:	7cdb      	ldrb	r3, [r3, #19]
    a2ee:	f003 0310 	and.w	r3, r3, #16
    a2f2:	b2db      	uxtb	r3, r3
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d00b      	beq.n	a310 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a2f8:	687a      	ldr	r2, [r7, #4]
    a2fa:	7cd3      	ldrb	r3, [r2, #19]
    a2fc:	f36f 1304 	bfc	r3, #4, #1
    a300:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a302:	7df8      	ldrb	r0, [r7, #23]
    a304:	2300      	movs	r3, #0
    a306:	2200      	movs	r2, #0
    a308:	2101      	movs	r1, #1
    a30a:	4c2c      	ldr	r4, [pc, #176]	; (a3bc <_usb_d_dev_in_next+0x200>)
    a30c:	47a0      	blx	r4
		goto _in_tx_exec;
    a30e:	e02e      	b.n	a36e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a310:	7afb      	ldrb	r3, [r7, #11]
    a312:	2b00      	cmp	r3, #0
    a314:	d006      	beq.n	a324 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a316:	7dfb      	ldrb	r3, [r7, #23]
    a318:	224b      	movs	r2, #75	; 0x4b
    a31a:	4619      	mov	r1, r3
    a31c:	69b8      	ldr	r0, [r7, #24]
    a31e:	4b28      	ldr	r3, [pc, #160]	; (a3c0 <_usb_d_dev_in_next+0x204>)
    a320:	4798      	blx	r3
    a322:	e005      	b.n	a330 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a324:	7dfb      	ldrb	r3, [r7, #23]
    a326:	224a      	movs	r2, #74	; 0x4a
    a328:	4619      	mov	r1, r3
    a32a:	69b8      	ldr	r0, [r7, #24]
    a32c:	4b24      	ldr	r3, [pc, #144]	; (a3c0 <_usb_d_dev_in_next+0x204>)
    a32e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a330:	687b      	ldr	r3, [r7, #4]
    a332:	8a1b      	ldrh	r3, [r3, #16]
    a334:	89ba      	ldrh	r2, [r7, #12]
    a336:	429a      	cmp	r2, r3
    a338:	d114      	bne.n	a364 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a33a:	687a      	ldr	r2, [r7, #4]
    a33c:	7cd3      	ldrb	r3, [r2, #19]
    a33e:	f36f 1386 	bfc	r3, #6, #1
    a342:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a344:	4b1f      	ldr	r3, [pc, #124]	; (a3c4 <_usb_d_dev_in_next+0x208>)
    a346:	68db      	ldr	r3, [r3, #12]
    a348:	687a      	ldr	r2, [r7, #4]
    a34a:	7c90      	ldrb	r0, [r2, #18]
    a34c:	687a      	ldr	r2, [r7, #4]
    a34e:	6892      	ldr	r2, [r2, #8]
    a350:	4611      	mov	r1, r2
    a352:	4798      	blx	r3
    a354:	4603      	mov	r3, r0
    a356:	2b00      	cmp	r3, #0
    a358:	d124      	bne.n	a3a4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a35a:	687a      	ldr	r2, [r7, #4]
    a35c:	7cd3      	ldrb	r3, [r2, #19]
    a35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a362:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a364:	2100      	movs	r1, #0
    a366:	6878      	ldr	r0, [r7, #4]
    a368:	4b17      	ldr	r3, [pc, #92]	; (a3c8 <_usb_d_dev_in_next+0x20c>)
    a36a:	4798      	blx	r3
	return;
    a36c:	e01b      	b.n	a3a6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a36e:	78fb      	ldrb	r3, [r7, #3]
    a370:	f083 0301 	eor.w	r3, r3, #1
    a374:	b2db      	uxtb	r3, r3
    a376:	2b00      	cmp	r3, #0
    a378:	d00d      	beq.n	a396 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a37a:	7afb      	ldrb	r3, [r7, #11]
    a37c:	2b00      	cmp	r3, #0
    a37e:	d002      	beq.n	a386 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a380:	234e      	movs	r3, #78	; 0x4e
    a382:	777b      	strb	r3, [r7, #29]
    a384:	e001      	b.n	a38a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a386:	234a      	movs	r3, #74	; 0x4a
    a388:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a38a:	7f7a      	ldrb	r2, [r7, #29]
    a38c:	7dfb      	ldrb	r3, [r7, #23]
    a38e:	4619      	mov	r1, r3
    a390:	69b8      	ldr	r0, [r7, #24]
    a392:	4b0e      	ldr	r3, [pc, #56]	; (a3cc <_usb_d_dev_in_next+0x210>)
    a394:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a396:	7dfb      	ldrb	r3, [r7, #23]
    a398:	2201      	movs	r2, #1
    a39a:	2101      	movs	r1, #1
    a39c:	4618      	mov	r0, r3
    a39e:	4b0c      	ldr	r3, [pc, #48]	; (a3d0 <_usb_d_dev_in_next+0x214>)
    a3a0:	4798      	blx	r3
    a3a2:	e000      	b.n	a3a6 <_usb_d_dev_in_next+0x1ea>
			return;
    a3a4:	bf00      	nop
}
    a3a6:	3724      	adds	r7, #36	; 0x24
    a3a8:	46bd      	mov	sp, r7
    a3aa:	bd90      	pop	{r4, r7, pc}
    a3ac:	20001150 	.word	0x20001150
    a3b0:	00009bb5 	.word	0x00009bb5
    a3b4:	00010a91 	.word	0x00010a91
    a3b8:	00009be1 	.word	0x00009be1
    a3bc:	00009d29 	.word	0x00009d29
    a3c0:	000094c1 	.word	0x000094c1
    a3c4:	20001088 	.word	0x20001088
    a3c8:	0000b4e5 	.word	0x0000b4e5
    a3cc:	00009495 	.word	0x00009495
    a3d0:	00009de1 	.word	0x00009de1

0000a3d4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a3d4:	b590      	push	{r4, r7, lr}
    a3d6:	b08b      	sub	sp, #44	; 0x2c
    a3d8:	af00      	add	r7, sp, #0
    a3da:	6078      	str	r0, [r7, #4]
    a3dc:	460b      	mov	r3, r1
    a3de:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a3e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3e4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a3e6:	687b      	ldr	r3, [r7, #4]
    a3e8:	7c9b      	ldrb	r3, [r3, #18]
    a3ea:	f003 030f 	and.w	r3, r3, #15
    a3ee:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a3f0:	7ffb      	ldrb	r3, [r7, #31]
    a3f2:	015b      	lsls	r3, r3, #5
    a3f4:	4a94      	ldr	r2, [pc, #592]	; (a648 <_usb_d_dev_out_next+0x274>)
    a3f6:	4413      	add	r3, r2
    a3f8:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a3fa:	78fb      	ldrb	r3, [r7, #3]
    a3fc:	2b00      	cmp	r3, #0
    a3fe:	d005      	beq.n	a40c <_usb_d_dev_out_next+0x38>
    a400:	69bb      	ldr	r3, [r7, #24]
    a402:	685b      	ldr	r3, [r3, #4]
    a404:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a408:	b29b      	uxth	r3, r3
    a40a:	e000      	b.n	a40e <_usb_d_dev_out_next+0x3a>
    a40c:	2300      	movs	r3, #0
    a40e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a410:	78fb      	ldrb	r3, [r7, #3]
    a412:	2b00      	cmp	r3, #0
    a414:	d005      	beq.n	a422 <_usb_d_dev_out_next+0x4e>
    a416:	69bb      	ldr	r3, [r7, #24]
    a418:	685b      	ldr	r3, [r3, #4]
    a41a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a41e:	b29b      	uxth	r3, r3
    a420:	e000      	b.n	a424 <_usb_d_dev_out_next+0x50>
    a422:	2300      	movs	r3, #0
    a424:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a426:	687b      	ldr	r3, [r7, #4]
    a428:	8a1b      	ldrh	r3, [r3, #16]
    a42a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a42e:	4293      	cmp	r3, r2
    a430:	d004      	beq.n	a43c <_usb_d_dev_out_next+0x68>
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	8a1b      	ldrh	r3, [r3, #16]
    a436:	3b01      	subs	r3, #1
    a438:	b29b      	uxth	r3, r3
    a43a:	e001      	b.n	a440 <_usb_d_dev_out_next+0x6c>
    a43c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a440:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a442:	8aba      	ldrh	r2, [r7, #20]
    a444:	8a7b      	ldrh	r3, [r7, #18]
    a446:	4013      	ands	r3, r2
    a448:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a44a:	687b      	ldr	r3, [r7, #4]
    a44c:	7cdb      	ldrb	r3, [r3, #19]
    a44e:	f003 0307 	and.w	r3, r3, #7
    a452:	b2db      	uxtb	r3, r3
    a454:	2b01      	cmp	r3, #1
    a456:	bf0c      	ite	eq
    a458:	2301      	moveq	r3, #1
    a45a:	2300      	movne	r3, #0
    a45c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a45e:	78fb      	ldrb	r3, [r7, #3]
    a460:	2b00      	cmp	r3, #0
    a462:	d004      	beq.n	a46e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a464:	7ffb      	ldrb	r3, [r7, #31]
    a466:	2100      	movs	r1, #0
    a468:	4618      	mov	r0, r3
    a46a:	4b78      	ldr	r3, [pc, #480]	; (a64c <_usb_d_dev_out_next+0x278>)
    a46c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	7cdb      	ldrb	r3, [r3, #19]
    a472:	f003 0320 	and.w	r3, r3, #32
    a476:	b2db      	uxtb	r3, r3
    a478:	2b00      	cmp	r3, #0
    a47a:	d01c      	beq.n	a4b6 <_usb_d_dev_out_next+0xe2>
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	685b      	ldr	r3, [r3, #4]
    a480:	2b00      	cmp	r3, #0
    a482:	d018      	beq.n	a4b6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	685b      	ldr	r3, [r3, #4]
    a488:	b29a      	uxth	r2, r3
    a48a:	687b      	ldr	r3, [r7, #4]
    a48c:	689b      	ldr	r3, [r3, #8]
    a48e:	b29b      	uxth	r3, r3
    a490:	1ad3      	subs	r3, r2, r3
    a492:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	681a      	ldr	r2, [r3, #0]
    a498:	687b      	ldr	r3, [r7, #4]
    a49a:	689b      	ldr	r3, [r3, #8]
    a49c:	18d0      	adds	r0, r2, r3
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	68d9      	ldr	r1, [r3, #12]
    a4a2:	89ba      	ldrh	r2, [r7, #12]
    a4a4:	8a3b      	ldrh	r3, [r7, #16]
    a4a6:	429a      	cmp	r2, r3
    a4a8:	d901      	bls.n	a4ae <_usb_d_dev_out_next+0xda>
    a4aa:	8a3b      	ldrh	r3, [r7, #16]
    a4ac:	e000      	b.n	a4b0 <_usb_d_dev_out_next+0xdc>
    a4ae:	89bb      	ldrh	r3, [r7, #12]
    a4b0:	461a      	mov	r2, r3
    a4b2:	4b67      	ldr	r3, [pc, #412]	; (a650 <_usb_d_dev_out_next+0x27c>)
    a4b4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a4b6:	687b      	ldr	r3, [r7, #4]
    a4b8:	685b      	ldr	r3, [r3, #4]
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d121      	bne.n	a502 <_usb_d_dev_out_next+0x12e>
    a4be:	687b      	ldr	r3, [r7, #4]
    a4c0:	7cdb      	ldrb	r3, [r3, #19]
    a4c2:	f003 0310 	and.w	r3, r3, #16
    a4c6:	b2db      	uxtb	r3, r3
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d01a      	beq.n	a502 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a4cc:	687a      	ldr	r2, [r7, #4]
    a4ce:	7cd3      	ldrb	r3, [r2, #19]
    a4d0:	f36f 1304 	bfc	r3, #4, #1
    a4d4:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a4d6:	687a      	ldr	r2, [r7, #4]
    a4d8:	7cd3      	ldrb	r3, [r2, #19]
    a4da:	f043 0320 	orr.w	r3, r3, #32
    a4de:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	68db      	ldr	r3, [r3, #12]
    a4e4:	461a      	mov	r2, r3
    a4e6:	7ffb      	ldrb	r3, [r7, #31]
    a4e8:	2100      	movs	r1, #0
    a4ea:	4618      	mov	r0, r3
    a4ec:	4b59      	ldr	r3, [pc, #356]	; (a654 <_usb_d_dev_out_next+0x280>)
    a4ee:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a4f0:	687b      	ldr	r3, [r7, #4]
    a4f2:	8a1b      	ldrh	r3, [r3, #16]
    a4f4:	461a      	mov	r2, r3
    a4f6:	7ff8      	ldrb	r0, [r7, #31]
    a4f8:	2300      	movs	r3, #0
    a4fa:	2100      	movs	r1, #0
    a4fc:	4c56      	ldr	r4, [pc, #344]	; (a658 <_usb_d_dev_out_next+0x284>)
    a4fe:	47a0      	blx	r4
		goto _out_rx_exec;
    a500:	e090      	b.n	a624 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a502:	78fb      	ldrb	r3, [r7, #3]
    a504:	2b00      	cmp	r3, #0
    a506:	d010      	beq.n	a52a <_usb_d_dev_out_next+0x156>
    a508:	687b      	ldr	r3, [r7, #4]
    a50a:	8a1b      	ldrh	r3, [r3, #16]
    a50c:	8a3a      	ldrh	r2, [r7, #16]
    a50e:	429a      	cmp	r2, r3
    a510:	d20b      	bcs.n	a52a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a512:	687a      	ldr	r2, [r7, #4]
    a514:	7cd3      	ldrb	r3, [r2, #19]
    a516:	f36f 1304 	bfc	r3, #4, #1
    a51a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a51c:	687b      	ldr	r3, [r7, #4]
    a51e:	689a      	ldr	r2, [r3, #8]
    a520:	8abb      	ldrh	r3, [r7, #20]
    a522:	441a      	add	r2, r3
    a524:	687b      	ldr	r3, [r7, #4]
    a526:	609a      	str	r2, [r3, #8]
    a528:	e05c      	b.n	a5e4 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a52a:	687b      	ldr	r3, [r7, #4]
    a52c:	689a      	ldr	r2, [r3, #8]
    a52e:	8afb      	ldrh	r3, [r7, #22]
    a530:	441a      	add	r2, r3
    a532:	687b      	ldr	r3, [r7, #4]
    a534:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	689a      	ldr	r2, [r3, #8]
    a53a:	687b      	ldr	r3, [r7, #4]
    a53c:	685b      	ldr	r3, [r3, #4]
    a53e:	429a      	cmp	r2, r3
    a540:	d250      	bcs.n	a5e4 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a542:	687b      	ldr	r3, [r7, #4]
    a544:	685b      	ldr	r3, [r3, #4]
    a546:	b29a      	uxth	r2, r3
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	689b      	ldr	r3, [r3, #8]
    a54c:	b29b      	uxth	r3, r3
    a54e:	1ad3      	subs	r3, r2, r3
    a550:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	7cdb      	ldrb	r3, [r3, #19]
    a556:	f003 0320 	and.w	r3, r3, #32
    a55a:	b2db      	uxtb	r3, r3
    a55c:	2b00      	cmp	r3, #0
    a55e:	d010      	beq.n	a582 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	8a1b      	ldrh	r3, [r3, #16]
    a564:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a566:	429a      	cmp	r2, r3
    a568:	d902      	bls.n	a570 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	8a1b      	ldrh	r3, [r3, #16]
    a56e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a570:	687b      	ldr	r3, [r7, #4]
    a572:	68db      	ldr	r3, [r3, #12]
    a574:	461a      	mov	r2, r3
    a576:	7ffb      	ldrb	r3, [r7, #31]
    a578:	2100      	movs	r1, #0
    a57a:	4618      	mov	r0, r3
    a57c:	4b35      	ldr	r3, [pc, #212]	; (a654 <_usb_d_dev_out_next+0x280>)
    a57e:	4798      	blx	r3
    a580:	e029      	b.n	a5d6 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a582:	687b      	ldr	r3, [r7, #4]
    a584:	8a1b      	ldrh	r3, [r3, #16]
    a586:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a588:	429a      	cmp	r2, r3
    a58a:	d90f      	bls.n	a5ac <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a58c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a592:	d903      	bls.n	a59c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a598:	84fb      	strh	r3, [r7, #38]	; 0x26
    a59a:	e011      	b.n	a5c0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a59c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a59e:	8a7b      	ldrh	r3, [r7, #18]
    a5a0:	4013      	ands	r3, r2
    a5a2:	b29b      	uxth	r3, r3
    a5a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a5a6:	1ad3      	subs	r3, r2, r3
    a5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    a5aa:	e009      	b.n	a5c0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a5ac:	687b      	ldr	r3, [r7, #4]
    a5ae:	8a1b      	ldrh	r3, [r3, #16]
    a5b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a5b2:	429a      	cmp	r2, r3
    a5b4:	d204      	bcs.n	a5c0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a5b6:	687a      	ldr	r2, [r7, #4]
    a5b8:	7cd3      	ldrb	r3, [r2, #19]
    a5ba:	f043 0320 	orr.w	r3, r3, #32
    a5be:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a5c0:	687b      	ldr	r3, [r7, #4]
    a5c2:	681a      	ldr	r2, [r3, #0]
    a5c4:	687b      	ldr	r3, [r7, #4]
    a5c6:	689b      	ldr	r3, [r3, #8]
    a5c8:	4413      	add	r3, r2
    a5ca:	461a      	mov	r2, r3
    a5cc:	7ffb      	ldrb	r3, [r7, #31]
    a5ce:	2100      	movs	r1, #0
    a5d0:	4618      	mov	r0, r3
    a5d2:	4b20      	ldr	r3, [pc, #128]	; (a654 <_usb_d_dev_out_next+0x280>)
    a5d4:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a5d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a5d8:	7ff8      	ldrb	r0, [r7, #31]
    a5da:	2300      	movs	r3, #0
    a5dc:	2100      	movs	r1, #0
    a5de:	4c1e      	ldr	r4, [pc, #120]	; (a658 <_usb_d_dev_out_next+0x284>)
    a5e0:	47a0      	blx	r4
			goto _out_rx_exec;
    a5e2:	e01f      	b.n	a624 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a5e4:	7bfb      	ldrb	r3, [r7, #15]
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d006      	beq.n	a5f8 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a5ea:	7ffb      	ldrb	r3, [r7, #31]
    a5ec:	222d      	movs	r2, #45	; 0x2d
    a5ee:	4619      	mov	r1, r3
    a5f0:	6a38      	ldr	r0, [r7, #32]
    a5f2:	4b1a      	ldr	r3, [pc, #104]	; (a65c <_usb_d_dev_out_next+0x288>)
    a5f4:	4798      	blx	r3
    a5f6:	e005      	b.n	a604 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a5f8:	7ffb      	ldrb	r3, [r7, #31]
    a5fa:	2225      	movs	r2, #37	; 0x25
    a5fc:	4619      	mov	r1, r3
    a5fe:	6a38      	ldr	r0, [r7, #32]
    a600:	4b16      	ldr	r3, [pc, #88]	; (a65c <_usb_d_dev_out_next+0x288>)
    a602:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a604:	7ffb      	ldrb	r3, [r7, #31]
    a606:	2b00      	cmp	r3, #0
    a608:	d107      	bne.n	a61a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a60a:	687b      	ldr	r3, [r7, #4]
    a60c:	68db      	ldr	r3, [r3, #12]
    a60e:	461a      	mov	r2, r3
    a610:	7ffb      	ldrb	r3, [r7, #31]
    a612:	2100      	movs	r1, #0
    a614:	4618      	mov	r0, r3
    a616:	4b0f      	ldr	r3, [pc, #60]	; (a654 <_usb_d_dev_out_next+0x280>)
    a618:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a61a:	2100      	movs	r1, #0
    a61c:	6878      	ldr	r0, [r7, #4]
    a61e:	4b10      	ldr	r3, [pc, #64]	; (a660 <_usb_d_dev_out_next+0x28c>)
    a620:	4798      	blx	r3
	return;
    a622:	e031      	b.n	a688 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a624:	78fb      	ldrb	r3, [r7, #3]
    a626:	f083 0301 	eor.w	r3, r3, #1
    a62a:	b2db      	uxtb	r3, r3
    a62c:	2b00      	cmp	r3, #0
    a62e:	d025      	beq.n	a67c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a630:	7bfb      	ldrb	r3, [r7, #15]
    a632:	2b00      	cmp	r3, #0
    a634:	d018      	beq.n	a668 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a636:	7ffb      	ldrb	r3, [r7, #31]
    a638:	2101      	movs	r1, #1
    a63a:	4618      	mov	r0, r3
    a63c:	4b09      	ldr	r3, [pc, #36]	; (a664 <_usb_d_dev_out_next+0x290>)
    a63e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a640:	232d      	movs	r3, #45	; 0x2d
    a642:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a646:	e012      	b.n	a66e <_usb_d_dev_out_next+0x29a>
    a648:	20001150 	.word	0x20001150
    a64c:	00009bb5 	.word	0x00009bb5
    a650:	00010a91 	.word	0x00010a91
    a654:	00009be1 	.word	0x00009be1
    a658:	00009d69 	.word	0x00009d69
    a65c:	000094c1 	.word	0x000094c1
    a660:	0000b4e5 	.word	0x0000b4e5
    a664:	00009da9 	.word	0x00009da9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a668:	2325      	movs	r3, #37	; 0x25
    a66a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a66e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a672:	7ffb      	ldrb	r3, [r7, #31]
    a674:	4619      	mov	r1, r3
    a676:	6a38      	ldr	r0, [r7, #32]
    a678:	4b05      	ldr	r3, [pc, #20]	; (a690 <_usb_d_dev_out_next+0x2bc>)
    a67a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a67c:	7ffb      	ldrb	r3, [r7, #31]
    a67e:	2201      	movs	r2, #1
    a680:	2100      	movs	r1, #0
    a682:	4618      	mov	r0, r3
    a684:	4b03      	ldr	r3, [pc, #12]	; (a694 <_usb_d_dev_out_next+0x2c0>)
    a686:	4798      	blx	r3
}
    a688:	372c      	adds	r7, #44	; 0x2c
    a68a:	46bd      	mov	sp, r7
    a68c:	bd90      	pop	{r4, r7, pc}
    a68e:	bf00      	nop
    a690:	00009495 	.word	0x00009495
    a694:	00009e39 	.word	0x00009e39

0000a698 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a698:	b580      	push	{r7, lr}
    a69a:	b084      	sub	sp, #16
    a69c:	af00      	add	r7, sp, #0
    a69e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a6a0:	687b      	ldr	r3, [r7, #4]
    a6a2:	7c9b      	ldrb	r3, [r3, #18]
    a6a4:	f003 030f 	and.w	r3, r3, #15
    a6a8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a6aa:	687b      	ldr	r3, [r7, #4]
    a6ac:	7cdb      	ldrb	r3, [r3, #19]
    a6ae:	f003 0307 	and.w	r3, r3, #7
    a6b2:	b2db      	uxtb	r3, r3
    a6b4:	2b01      	cmp	r3, #1
    a6b6:	bf0c      	ite	eq
    a6b8:	2301      	moveq	r3, #1
    a6ba:	2300      	movne	r3, #0
    a6bc:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a6be:	7bbb      	ldrb	r3, [r7, #14]
    a6c0:	f083 0301 	eor.w	r3, r3, #1
    a6c4:	b2db      	uxtb	r3, r3
    a6c6:	2b00      	cmp	r3, #0
    a6c8:	d008      	beq.n	a6dc <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a6ca:	7bfb      	ldrb	r3, [r7, #15]
    a6cc:	4618      	mov	r0, r3
    a6ce:	4b20      	ldr	r3, [pc, #128]	; (a750 <_usb_d_dev_handle_setup+0xb8>)
    a6d0:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a6d2:	7bfb      	ldrb	r3, [r7, #15]
    a6d4:	4618      	mov	r0, r3
    a6d6:	4b1f      	ldr	r3, [pc, #124]	; (a754 <_usb_d_dev_handle_setup+0xbc>)
    a6d8:	4798      	blx	r3
		return;
    a6da:	e036      	b.n	a74a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	7cdb      	ldrb	r3, [r3, #19]
    a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6e4:	b2db      	uxtb	r3, r3
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d010      	beq.n	a70c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a6ea:	687a      	ldr	r2, [r7, #4]
    a6ec:	7cd3      	ldrb	r3, [r2, #19]
    a6ee:	f36f 1386 	bfc	r3, #6, #1
    a6f2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6f4:	7bfb      	ldrb	r3, [r7, #15]
    a6f6:	2200      	movs	r2, #0
    a6f8:	2101      	movs	r1, #1
    a6fa:	4618      	mov	r0, r3
    a6fc:	4b16      	ldr	r3, [pc, #88]	; (a758 <_usb_d_dev_handle_setup+0xc0>)
    a6fe:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a700:	7bfb      	ldrb	r3, [r7, #15]
    a702:	2200      	movs	r2, #0
    a704:	2100      	movs	r1, #0
    a706:	4618      	mov	r0, r3
    a708:	4b14      	ldr	r3, [pc, #80]	; (a75c <_usb_d_dev_handle_setup+0xc4>)
    a70a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a70c:	687a      	ldr	r2, [r7, #4]
    a70e:	7cd3      	ldrb	r3, [r2, #19]
    a710:	f36f 03c3 	bfc	r3, #3, #1
    a714:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a716:	7bfb      	ldrb	r3, [r7, #15]
    a718:	2100      	movs	r1, #0
    a71a:	4618      	mov	r0, r3
    a71c:	4b10      	ldr	r3, [pc, #64]	; (a760 <_usb_d_dev_handle_setup+0xc8>)
    a71e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a720:	7bfb      	ldrb	r3, [r7, #15]
    a722:	2101      	movs	r1, #1
    a724:	4618      	mov	r0, r3
    a726:	4b0e      	ldr	r3, [pc, #56]	; (a760 <_usb_d_dev_handle_setup+0xc8>)
    a728:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a72a:	7bfb      	ldrb	r3, [r7, #15]
    a72c:	216f      	movs	r1, #111	; 0x6f
    a72e:	4618      	mov	r0, r3
    a730:	4b0c      	ldr	r3, [pc, #48]	; (a764 <_usb_d_dev_handle_setup+0xcc>)
    a732:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a734:	7bfb      	ldrb	r3, [r7, #15]
    a736:	216f      	movs	r1, #111	; 0x6f
    a738:	4618      	mov	r0, r3
    a73a:	4b0b      	ldr	r3, [pc, #44]	; (a768 <_usb_d_dev_handle_setup+0xd0>)
    a73c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a73e:	4b0b      	ldr	r3, [pc, #44]	; (a76c <_usb_d_dev_handle_setup+0xd4>)
    a740:	689b      	ldr	r3, [r3, #8]
    a742:	687a      	ldr	r2, [r7, #4]
    a744:	7c92      	ldrb	r2, [r2, #18]
    a746:	4610      	mov	r0, r2
    a748:	4798      	blx	r3
}
    a74a:	3710      	adds	r7, #16
    a74c:	46bd      	mov	sp, r7
    a74e:	bd80      	pop	{r7, pc}
    a750:	00009b3d 	.word	0x00009b3d
    a754:	00009ae9 	.word	0x00009ae9
    a758:	00009de1 	.word	0x00009de1
    a75c:	00009e39 	.word	0x00009e39
    a760:	00009da9 	.word	0x00009da9
    a764:	000098e9 	.word	0x000098e9
    a768:	00009939 	.word	0x00009939
    a76c:	20001088 	.word	0x20001088

0000a770 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a770:	b580      	push	{r7, lr}
    a772:	b084      	sub	sp, #16
    a774:	af00      	add	r7, sp, #0
    a776:	6078      	str	r0, [r7, #4]
    a778:	460b      	mov	r3, r1
    a77a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	7c9b      	ldrb	r3, [r3, #18]
    a780:	f003 030f 	and.w	r3, r3, #15
    a784:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a786:	78f9      	ldrb	r1, [r7, #3]
    a788:	7bfb      	ldrb	r3, [r7, #15]
    a78a:	2200      	movs	r2, #0
    a78c:	4618      	mov	r0, r3
    a78e:	4b07      	ldr	r3, [pc, #28]	; (a7ac <_usb_d_dev_handle_stall+0x3c>)
    a790:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a792:	4b07      	ldr	r3, [pc, #28]	; (a7b0 <_usb_d_dev_handle_stall+0x40>)
    a794:	691b      	ldr	r3, [r3, #16]
    a796:	687a      	ldr	r2, [r7, #4]
    a798:	7c90      	ldrb	r0, [r2, #18]
    a79a:	687a      	ldr	r2, [r7, #4]
    a79c:	6892      	ldr	r2, [r2, #8]
    a79e:	2101      	movs	r1, #1
    a7a0:	4798      	blx	r3
}
    a7a2:	bf00      	nop
    a7a4:	3710      	adds	r7, #16
    a7a6:	46bd      	mov	sp, r7
    a7a8:	bd80      	pop	{r7, pc}
    a7aa:	bf00      	nop
    a7ac:	00009a9d 	.word	0x00009a9d
    a7b0:	20001088 	.word	0x20001088

0000a7b4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b088      	sub	sp, #32
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	460b      	mov	r3, r1
    a7be:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a7c0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7c4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a7c6:	687b      	ldr	r3, [r7, #4]
    a7c8:	7c9b      	ldrb	r3, [r3, #18]
    a7ca:	f003 030f 	and.w	r3, r3, #15
    a7ce:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a7d0:	4b61      	ldr	r3, [pc, #388]	; (a958 <_usb_d_dev_handle_trfail+0x1a4>)
    a7d2:	881b      	ldrh	r3, [r3, #0]
    a7d4:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a7d6:	7efb      	ldrb	r3, [r7, #27]
    a7d8:	015b      	lsls	r3, r3, #5
    a7da:	4a60      	ldr	r2, [pc, #384]	; (a95c <_usb_d_dev_handle_trfail+0x1a8>)
    a7dc:	4413      	add	r3, r2
    a7de:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a7e0:	78fb      	ldrb	r3, [r7, #3]
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d006      	beq.n	a7f4 <_usb_d_dev_handle_trfail+0x40>
    a7e6:	7efb      	ldrb	r3, [r7, #27]
    a7e8:	4619      	mov	r1, r3
    a7ea:	69f8      	ldr	r0, [r7, #28]
    a7ec:	4b5c      	ldr	r3, [pc, #368]	; (a960 <_usb_d_dev_handle_trfail+0x1ac>)
    a7ee:	4798      	blx	r3
    a7f0:	4603      	mov	r3, r0
    a7f2:	e005      	b.n	a800 <_usb_d_dev_handle_trfail+0x4c>
    a7f4:	7efb      	ldrb	r3, [r7, #27]
    a7f6:	4619      	mov	r1, r3
    a7f8:	69f8      	ldr	r0, [r7, #28]
    a7fa:	4b5a      	ldr	r3, [pc, #360]	; (a964 <_usb_d_dev_handle_trfail+0x1b0>)
    a7fc:	4798      	blx	r3
    a7fe:	4603      	mov	r3, r0
    a800:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a802:	687b      	ldr	r3, [r7, #4]
    a804:	7cdb      	ldrb	r3, [r3, #19]
    a806:	f003 0307 	and.w	r3, r3, #7
    a80a:	b2db      	uxtb	r3, r3
    a80c:	2b01      	cmp	r3, #1
    a80e:	bf0c      	ite	eq
    a810:	2301      	moveq	r3, #1
    a812:	2300      	movne	r3, #0
    a814:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a816:	78fb      	ldrb	r3, [r7, #3]
    a818:	011b      	lsls	r3, r3, #4
    a81a:	697a      	ldr	r2, [r7, #20]
    a81c:	4413      	add	r3, r2
    a81e:	7a9b      	ldrb	r3, [r3, #10]
    a820:	b2db      	uxtb	r3, r3
    a822:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a824:	7cfb      	ldrb	r3, [r7, #19]
    a826:	2b02      	cmp	r3, #2
    a828:	d12f      	bne.n	a88a <_usb_d_dev_handle_trfail+0xd6>
    a82a:	7b3b      	ldrb	r3, [r7, #12]
    a82c:	f003 0301 	and.w	r3, r3, #1
    a830:	b2db      	uxtb	r3, r3
    a832:	2b00      	cmp	r3, #0
    a834:	d029      	beq.n	a88a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a836:	78fb      	ldrb	r3, [r7, #3]
    a838:	011b      	lsls	r3, r3, #4
    a83a:	697a      	ldr	r2, [r7, #20]
    a83c:	441a      	add	r2, r3
    a83e:	7a93      	ldrb	r3, [r2, #10]
    a840:	f36f 0300 	bfc	r3, #0, #1
    a844:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a846:	78fb      	ldrb	r3, [r7, #3]
    a848:	f107 0220 	add.w	r2, r7, #32
    a84c:	4413      	add	r3, r2
    a84e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a852:	7efb      	ldrb	r3, [r7, #27]
    a854:	4619      	mov	r1, r3
    a856:	69f8      	ldr	r0, [r7, #28]
    a858:	4b43      	ldr	r3, [pc, #268]	; (a968 <_usb_d_dev_handle_trfail+0x1b4>)
    a85a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a85c:	78fb      	ldrb	r3, [r7, #3]
    a85e:	f107 0220 	add.w	r2, r7, #32
    a862:	4413      	add	r3, r2
    a864:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a868:	7efb      	ldrb	r3, [r7, #27]
    a86a:	4619      	mov	r1, r3
    a86c:	69f8      	ldr	r0, [r7, #28]
    a86e:	4b3f      	ldr	r3, [pc, #252]	; (a96c <_usb_d_dev_handle_trfail+0x1b8>)
    a870:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a872:	78fb      	ldrb	r3, [r7, #3]
    a874:	2b00      	cmp	r3, #0
    a876:	bf14      	ite	ne
    a878:	2301      	movne	r3, #1
    a87a:	2300      	moveq	r3, #0
    a87c:	b2db      	uxtb	r3, r3
    a87e:	2204      	movs	r2, #4
    a880:	4619      	mov	r1, r3
    a882:	6878      	ldr	r0, [r7, #4]
    a884:	4b3a      	ldr	r3, [pc, #232]	; (a970 <_usb_d_dev_handle_trfail+0x1bc>)
    a886:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a888:	e062      	b.n	a950 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a88a:	7b3b      	ldrb	r3, [r7, #12]
    a88c:	f003 0302 	and.w	r3, r3, #2
    a890:	b2db      	uxtb	r3, r3
    a892:	2b00      	cmp	r3, #0
    a894:	d040      	beq.n	a918 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a896:	78fb      	ldrb	r3, [r7, #3]
    a898:	011b      	lsls	r3, r3, #4
    a89a:	697a      	ldr	r2, [r7, #20]
    a89c:	441a      	add	r2, r3
    a89e:	7a93      	ldrb	r3, [r2, #10]
    a8a0:	f36f 0341 	bfc	r3, #1, #1
    a8a4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a8a6:	78fb      	ldrb	r3, [r7, #3]
    a8a8:	f107 0220 	add.w	r2, r7, #32
    a8ac:	4413      	add	r3, r2
    a8ae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a8b2:	7efb      	ldrb	r3, [r7, #27]
    a8b4:	4619      	mov	r1, r3
    a8b6:	69f8      	ldr	r0, [r7, #28]
    a8b8:	4b2b      	ldr	r3, [pc, #172]	; (a968 <_usb_d_dev_handle_trfail+0x1b4>)
    a8ba:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a8bc:	78fb      	ldrb	r3, [r7, #3]
    a8be:	f107 0220 	add.w	r2, r7, #32
    a8c2:	4413      	add	r3, r2
    a8c4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a8c8:	7efb      	ldrb	r3, [r7, #27]
    a8ca:	4619      	mov	r1, r3
    a8cc:	69f8      	ldr	r0, [r7, #28]
    a8ce:	4b27      	ldr	r3, [pc, #156]	; (a96c <_usb_d_dev_handle_trfail+0x1b8>)
    a8d0:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a8d2:	7cbb      	ldrb	r3, [r7, #18]
    a8d4:	2b00      	cmp	r3, #0
    a8d6:	d03b      	beq.n	a950 <_usb_d_dev_handle_trfail+0x19c>
    a8d8:	687b      	ldr	r3, [r7, #4]
    a8da:	7cdb      	ldrb	r3, [r3, #19]
    a8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a8e0:	b2db      	uxtb	r3, r3
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d034      	beq.n	a950 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a8e6:	687b      	ldr	r3, [r7, #4]
    a8e8:	7cdb      	ldrb	r3, [r3, #19]
    a8ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a8ee:	b2db      	uxtb	r3, r3
    a8f0:	461a      	mov	r2, r3
    a8f2:	78fb      	ldrb	r3, [r7, #3]
    a8f4:	4293      	cmp	r3, r2
    a8f6:	d02b      	beq.n	a950 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a8f8:	687b      	ldr	r3, [r7, #4]
    a8fa:	7cdb      	ldrb	r3, [r3, #19]
    a8fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a900:	b2db      	uxtb	r3, r3
    a902:	2b00      	cmp	r3, #0
    a904:	bf14      	ite	ne
    a906:	2301      	movne	r3, #1
    a908:	2300      	moveq	r3, #0
    a90a:	b2db      	uxtb	r3, r3
    a90c:	2200      	movs	r2, #0
    a90e:	4619      	mov	r1, r3
    a910:	6878      	ldr	r0, [r7, #4]
    a912:	4b17      	ldr	r3, [pc, #92]	; (a970 <_usb_d_dev_handle_trfail+0x1bc>)
    a914:	4798      	blx	r3
}
    a916:	e01b      	b.n	a950 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a918:	78fa      	ldrb	r2, [r7, #3]
    a91a:	7efb      	ldrb	r3, [r7, #27]
    a91c:	4611      	mov	r1, r2
    a91e:	4618      	mov	r0, r3
    a920:	4b14      	ldr	r3, [pc, #80]	; (a974 <_usb_d_dev_handle_trfail+0x1c0>)
    a922:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a924:	78fb      	ldrb	r3, [r7, #3]
    a926:	f107 0220 	add.w	r2, r7, #32
    a92a:	4413      	add	r3, r2
    a92c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a930:	7efb      	ldrb	r3, [r7, #27]
    a932:	4619      	mov	r1, r3
    a934:	69f8      	ldr	r0, [r7, #28]
    a936:	4b0c      	ldr	r3, [pc, #48]	; (a968 <_usb_d_dev_handle_trfail+0x1b4>)
    a938:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a93a:	78fb      	ldrb	r3, [r7, #3]
    a93c:	f107 0220 	add.w	r2, r7, #32
    a940:	4413      	add	r3, r2
    a942:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a946:	7efb      	ldrb	r3, [r7, #27]
    a948:	4619      	mov	r1, r3
    a94a:	69f8      	ldr	r0, [r7, #28]
    a94c:	4b07      	ldr	r3, [pc, #28]	; (a96c <_usb_d_dev_handle_trfail+0x1b8>)
    a94e:	4798      	blx	r3
}
    a950:	bf00      	nop
    a952:	3720      	adds	r7, #32
    a954:	46bd      	mov	sp, r7
    a956:	bd80      	pop	{r7, pc}
    a958:	00011250 	.word	0x00011250
    a95c:	20001150 	.word	0x20001150
    a960:	0000951d 	.word	0x0000951d
    a964:	000094ed 	.word	0x000094ed
    a968:	000093c1 	.word	0x000093c1
    a96c:	000094c1 	.word	0x000094c1
    a970:	0000b52d 	.word	0x0000b52d
    a974:	00009da9 	.word	0x00009da9

0000a978 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b082      	sub	sp, #8
    a97c:	af00      	add	r7, sp, #0
    a97e:	6078      	str	r0, [r7, #4]
    a980:	460b      	mov	r3, r1
    a982:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a984:	78fb      	ldrb	r3, [r7, #3]
    a986:	f003 0310 	and.w	r3, r3, #16
    a98a:	2b00      	cmp	r3, #0
    a98c:	d003      	beq.n	a996 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a98e:	6878      	ldr	r0, [r7, #4]
    a990:	4b0c      	ldr	r3, [pc, #48]	; (a9c4 <_usb_d_dev_trans_setup_isr+0x4c>)
    a992:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a994:	e012      	b.n	a9bc <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a996:	78fb      	ldrb	r3, [r7, #3]
    a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a99c:	2b00      	cmp	r3, #0
    a99e:	d004      	beq.n	a9aa <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a9a0:	2101      	movs	r1, #1
    a9a2:	6878      	ldr	r0, [r7, #4]
    a9a4:	4b08      	ldr	r3, [pc, #32]	; (a9c8 <_usb_d_dev_trans_setup_isr+0x50>)
    a9a6:	4798      	blx	r3
}
    a9a8:	e008      	b.n	a9bc <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a9aa:	78fb      	ldrb	r3, [r7, #3]
    a9ac:	f003 0320 	and.w	r3, r3, #32
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d003      	beq.n	a9bc <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a9b4:	2100      	movs	r1, #0
    a9b6:	6878      	ldr	r0, [r7, #4]
    a9b8:	4b03      	ldr	r3, [pc, #12]	; (a9c8 <_usb_d_dev_trans_setup_isr+0x50>)
    a9ba:	4798      	blx	r3
}
    a9bc:	bf00      	nop
    a9be:	3708      	adds	r7, #8
    a9c0:	46bd      	mov	sp, r7
    a9c2:	bd80      	pop	{r7, pc}
    a9c4:	0000a699 	.word	0x0000a699
    a9c8:	0000a771 	.word	0x0000a771

0000a9cc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
    a9d2:	6078      	str	r0, [r7, #4]
    a9d4:	460b      	mov	r3, r1
    a9d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a9d8:	78fb      	ldrb	r3, [r7, #3]
    a9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d004      	beq.n	a9ec <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a9e2:	2101      	movs	r1, #1
    a9e4:	6878      	ldr	r0, [r7, #4]
    a9e6:	4b1a      	ldr	r3, [pc, #104]	; (aa50 <_usb_d_dev_trans_in_isr+0x84>)
    a9e8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a9ea:	e02c      	b.n	aa46 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a9ec:	78fb      	ldrb	r3, [r7, #3]
    a9ee:	f003 0308 	and.w	r3, r3, #8
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	d004      	beq.n	aa00 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a9f6:	2101      	movs	r1, #1
    a9f8:	6878      	ldr	r0, [r7, #4]
    a9fa:	4b16      	ldr	r3, [pc, #88]	; (aa54 <_usb_d_dev_trans_in_isr+0x88>)
    a9fc:	4798      	blx	r3
}
    a9fe:	e022      	b.n	aa46 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    aa00:	78fb      	ldrb	r3, [r7, #3]
    aa02:	f003 0302 	and.w	r3, r3, #2
    aa06:	2b00      	cmp	r3, #0
    aa08:	d004      	beq.n	aa14 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    aa0a:	2101      	movs	r1, #1
    aa0c:	6878      	ldr	r0, [r7, #4]
    aa0e:	4b12      	ldr	r3, [pc, #72]	; (aa58 <_usb_d_dev_trans_in_isr+0x8c>)
    aa10:	4798      	blx	r3
}
    aa12:	e018      	b.n	aa46 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    aa14:	687b      	ldr	r3, [r7, #4]
    aa16:	7cdb      	ldrb	r3, [r3, #19]
    aa18:	f003 0307 	and.w	r3, r3, #7
    aa1c:	b2db      	uxtb	r3, r3
    aa1e:	2b01      	cmp	r3, #1
    aa20:	d111      	bne.n	aa46 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    aa22:	78fb      	ldrb	r3, [r7, #3]
    aa24:	f003 0304 	and.w	r3, r3, #4
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d004      	beq.n	aa36 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    aa2c:	2100      	movs	r1, #0
    aa2e:	6878      	ldr	r0, [r7, #4]
    aa30:	4b08      	ldr	r3, [pc, #32]	; (aa54 <_usb_d_dev_trans_in_isr+0x88>)
    aa32:	4798      	blx	r3
}
    aa34:	e007      	b.n	aa46 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    aa36:	78fb      	ldrb	r3, [r7, #3]
    aa38:	f003 0310 	and.w	r3, r3, #16
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d002      	beq.n	aa46 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    aa40:	6878      	ldr	r0, [r7, #4]
    aa42:	4b06      	ldr	r3, [pc, #24]	; (aa5c <_usb_d_dev_trans_in_isr+0x90>)
    aa44:	4798      	blx	r3
}
    aa46:	bf00      	nop
    aa48:	3708      	adds	r7, #8
    aa4a:	46bd      	mov	sp, r7
    aa4c:	bd80      	pop	{r7, pc}
    aa4e:	bf00      	nop
    aa50:	0000a771 	.word	0x0000a771
    aa54:	0000a7b5 	.word	0x0000a7b5
    aa58:	0000a1bd 	.word	0x0000a1bd
    aa5c:	0000a699 	.word	0x0000a699

0000aa60 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    aa60:	b580      	push	{r7, lr}
    aa62:	b082      	sub	sp, #8
    aa64:	af00      	add	r7, sp, #0
    aa66:	6078      	str	r0, [r7, #4]
    aa68:	460b      	mov	r3, r1
    aa6a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    aa6c:	78fb      	ldrb	r3, [r7, #3]
    aa6e:	f003 0320 	and.w	r3, r3, #32
    aa72:	2b00      	cmp	r3, #0
    aa74:	d004      	beq.n	aa80 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    aa76:	2100      	movs	r1, #0
    aa78:	6878      	ldr	r0, [r7, #4]
    aa7a:	4b1a      	ldr	r3, [pc, #104]	; (aae4 <_usb_d_dev_trans_out_isr+0x84>)
    aa7c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    aa7e:	e02c      	b.n	aada <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    aa80:	78fb      	ldrb	r3, [r7, #3]
    aa82:	f003 0304 	and.w	r3, r3, #4
    aa86:	2b00      	cmp	r3, #0
    aa88:	d004      	beq.n	aa94 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    aa8a:	2100      	movs	r1, #0
    aa8c:	6878      	ldr	r0, [r7, #4]
    aa8e:	4b16      	ldr	r3, [pc, #88]	; (aae8 <_usb_d_dev_trans_out_isr+0x88>)
    aa90:	4798      	blx	r3
}
    aa92:	e022      	b.n	aada <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    aa94:	78fb      	ldrb	r3, [r7, #3]
    aa96:	f003 0301 	and.w	r3, r3, #1
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d004      	beq.n	aaa8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    aa9e:	2101      	movs	r1, #1
    aaa0:	6878      	ldr	r0, [r7, #4]
    aaa2:	4b12      	ldr	r3, [pc, #72]	; (aaec <_usb_d_dev_trans_out_isr+0x8c>)
    aaa4:	4798      	blx	r3
}
    aaa6:	e018      	b.n	aada <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    aaa8:	687b      	ldr	r3, [r7, #4]
    aaaa:	7cdb      	ldrb	r3, [r3, #19]
    aaac:	f003 0307 	and.w	r3, r3, #7
    aab0:	b2db      	uxtb	r3, r3
    aab2:	2b01      	cmp	r3, #1
    aab4:	d111      	bne.n	aada <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    aab6:	78fb      	ldrb	r3, [r7, #3]
    aab8:	f003 0308 	and.w	r3, r3, #8
    aabc:	2b00      	cmp	r3, #0
    aabe:	d004      	beq.n	aaca <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    aac0:	2101      	movs	r1, #1
    aac2:	6878      	ldr	r0, [r7, #4]
    aac4:	4b08      	ldr	r3, [pc, #32]	; (aae8 <_usb_d_dev_trans_out_isr+0x88>)
    aac6:	4798      	blx	r3
}
    aac8:	e007      	b.n	aada <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    aaca:	78fb      	ldrb	r3, [r7, #3]
    aacc:	f003 0310 	and.w	r3, r3, #16
    aad0:	2b00      	cmp	r3, #0
    aad2:	d002      	beq.n	aada <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    aad4:	6878      	ldr	r0, [r7, #4]
    aad6:	4b06      	ldr	r3, [pc, #24]	; (aaf0 <_usb_d_dev_trans_out_isr+0x90>)
    aad8:	4798      	blx	r3
}
    aada:	bf00      	nop
    aadc:	3708      	adds	r7, #8
    aade:	46bd      	mov	sp, r7
    aae0:	bd80      	pop	{r7, pc}
    aae2:	bf00      	nop
    aae4:	0000a771 	.word	0x0000a771
    aae8:	0000a7b5 	.word	0x0000a7b5
    aaec:	0000a3d5 	.word	0x0000a3d5
    aaf0:	0000a699 	.word	0x0000a699

0000aaf4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    aaf4:	b580      	push	{r7, lr}
    aaf6:	b084      	sub	sp, #16
    aaf8:	af00      	add	r7, sp, #0
    aafa:	6078      	str	r0, [r7, #4]
    aafc:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    aafe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab02:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ab04:	683b      	ldr	r3, [r7, #0]
    ab06:	7c9b      	ldrb	r3, [r3, #18]
    ab08:	f003 030f 	and.w	r3, r3, #15
    ab0c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    ab0e:	7afb      	ldrb	r3, [r7, #11]
    ab10:	2201      	movs	r2, #1
    ab12:	409a      	lsls	r2, r3
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	4013      	ands	r3, r2
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d03d      	beq.n	ab98 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    ab1c:	7afb      	ldrb	r3, [r7, #11]
    ab1e:	68fa      	ldr	r2, [r7, #12]
    ab20:	3308      	adds	r3, #8
    ab22:	015b      	lsls	r3, r3, #5
    ab24:	4413      	add	r3, r2
    ab26:	3307      	adds	r3, #7
    ab28:	781b      	ldrb	r3, [r3, #0]
    ab2a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    ab2c:	7afb      	ldrb	r3, [r7, #11]
    ab2e:	68fa      	ldr	r2, [r7, #12]
    ab30:	015b      	lsls	r3, r3, #5
    ab32:	4413      	add	r3, r2
    ab34:	f203 1309 	addw	r3, r3, #265	; 0x109
    ab38:	781b      	ldrb	r3, [r3, #0]
    ab3a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    ab3c:	7aba      	ldrb	r2, [r7, #10]
    ab3e:	7a7b      	ldrb	r3, [r7, #9]
    ab40:	4013      	ands	r3, r2
    ab42:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    ab44:	7abb      	ldrb	r3, [r7, #10]
    ab46:	2b00      	cmp	r3, #0
    ab48:	d027      	beq.n	ab9a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    ab4a:	683b      	ldr	r3, [r7, #0]
    ab4c:	7cdb      	ldrb	r3, [r3, #19]
    ab4e:	f003 0307 	and.w	r3, r3, #7
    ab52:	b2db      	uxtb	r3, r3
    ab54:	2b01      	cmp	r3, #1
    ab56:	d10c      	bne.n	ab72 <_usb_d_dev_handle_eps+0x7e>
    ab58:	683b      	ldr	r3, [r7, #0]
    ab5a:	7cdb      	ldrb	r3, [r3, #19]
    ab5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ab60:	b2db      	uxtb	r3, r3
    ab62:	2b00      	cmp	r3, #0
    ab64:	d105      	bne.n	ab72 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    ab66:	7abb      	ldrb	r3, [r7, #10]
    ab68:	4619      	mov	r1, r3
    ab6a:	6838      	ldr	r0, [r7, #0]
    ab6c:	4b0c      	ldr	r3, [pc, #48]	; (aba0 <_usb_d_dev_handle_eps+0xac>)
    ab6e:	4798      	blx	r3
    ab70:	e013      	b.n	ab9a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    ab72:	683b      	ldr	r3, [r7, #0]
    ab74:	7cdb      	ldrb	r3, [r3, #19]
    ab76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ab7a:	b2db      	uxtb	r3, r3
    ab7c:	2b00      	cmp	r3, #0
    ab7e:	d005      	beq.n	ab8c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    ab80:	7abb      	ldrb	r3, [r7, #10]
    ab82:	4619      	mov	r1, r3
    ab84:	6838      	ldr	r0, [r7, #0]
    ab86:	4b07      	ldr	r3, [pc, #28]	; (aba4 <_usb_d_dev_handle_eps+0xb0>)
    ab88:	4798      	blx	r3
    ab8a:	e006      	b.n	ab9a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    ab8c:	7abb      	ldrb	r3, [r7, #10]
    ab8e:	4619      	mov	r1, r3
    ab90:	6838      	ldr	r0, [r7, #0]
    ab92:	4b05      	ldr	r3, [pc, #20]	; (aba8 <_usb_d_dev_handle_eps+0xb4>)
    ab94:	4798      	blx	r3
    ab96:	e000      	b.n	ab9a <_usb_d_dev_handle_eps+0xa6>
		return;
    ab98:	bf00      	nop
		}
	}
}
    ab9a:	3710      	adds	r7, #16
    ab9c:	46bd      	mov	sp, r7
    ab9e:	bd80      	pop	{r7, pc}
    aba0:	0000a979 	.word	0x0000a979
    aba4:	0000a9cd 	.word	0x0000a9cd
    aba8:	0000aa61 	.word	0x0000aa61

0000abac <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    abac:	b580      	push	{r7, lr}
    abae:	b084      	sub	sp, #16
    abb0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    abb2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    abb6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    abb8:	68bb      	ldr	r3, [r7, #8]
    abba:	8c1b      	ldrh	r3, [r3, #32]
    abbc:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    abbe:	88fb      	ldrh	r3, [r7, #6]
    abc0:	2b00      	cmp	r3, #0
    abc2:	d104      	bne.n	abce <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    abc4:	4b13      	ldr	r3, [pc, #76]	; (ac14 <_usb_d_dev_handler+0x68>)
    abc6:	4798      	blx	r3
    abc8:	4603      	mov	r3, r0
    abca:	2b00      	cmp	r3, #0
    abcc:	d11e      	bne.n	ac0c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    abce:	2300      	movs	r3, #0
    abd0:	73fb      	strb	r3, [r7, #15]
    abd2:	e017      	b.n	ac04 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    abd4:	7bfa      	ldrb	r2, [r7, #15]
    abd6:	4613      	mov	r3, r2
    abd8:	009b      	lsls	r3, r3, #2
    abda:	4413      	add	r3, r2
    abdc:	009b      	lsls	r3, r3, #2
    abde:	3310      	adds	r3, #16
    abe0:	4a0d      	ldr	r2, [pc, #52]	; (ac18 <_usb_d_dev_handler+0x6c>)
    abe2:	4413      	add	r3, r2
    abe4:	3304      	adds	r3, #4
    abe6:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    abe8:	683b      	ldr	r3, [r7, #0]
    abea:	7c9b      	ldrb	r3, [r3, #18]
    abec:	2bff      	cmp	r3, #255	; 0xff
    abee:	d005      	beq.n	abfc <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    abf0:	88fb      	ldrh	r3, [r7, #6]
    abf2:	6839      	ldr	r1, [r7, #0]
    abf4:	4618      	mov	r0, r3
    abf6:	4b09      	ldr	r3, [pc, #36]	; (ac1c <_usb_d_dev_handler+0x70>)
    abf8:	4798      	blx	r3
    abfa:	e000      	b.n	abfe <_usb_d_dev_handler+0x52>
			continue;
    abfc:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    abfe:	7bfb      	ldrb	r3, [r7, #15]
    ac00:	3301      	adds	r3, #1
    ac02:	73fb      	strb	r3, [r7, #15]
    ac04:	7bfb      	ldrb	r3, [r7, #15]
    ac06:	2b08      	cmp	r3, #8
    ac08:	d9e4      	bls.n	abd4 <_usb_d_dev_handler+0x28>
    ac0a:	e000      	b.n	ac0e <_usb_d_dev_handler+0x62>
			return;
    ac0c:	bf00      	nop
	}
}
    ac0e:	3710      	adds	r7, #16
    ac10:	46bd      	mov	sp, r7
    ac12:	bd80      	pop	{r7, pc}
    ac14:	0000a105 	.word	0x0000a105
    ac18:	20001088 	.word	0x20001088
    ac1c:	0000aaf5 	.word	0x0000aaf5

0000ac20 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    ac20:	b580      	push	{r7, lr}
    ac22:	b082      	sub	sp, #8
    ac24:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    ac26:	2300      	movs	r3, #0
    ac28:	71fb      	strb	r3, [r7, #7]
    ac2a:	e023      	b.n	ac74 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    ac2c:	79fa      	ldrb	r2, [r7, #7]
    ac2e:	4613      	mov	r3, r2
    ac30:	009b      	lsls	r3, r3, #2
    ac32:	4413      	add	r3, r2
    ac34:	009b      	lsls	r3, r3, #2
    ac36:	3310      	adds	r3, #16
    ac38:	4a14      	ldr	r2, [pc, #80]	; (ac8c <_usb_d_dev_reset_epts+0x6c>)
    ac3a:	4413      	add	r3, r2
    ac3c:	3304      	adds	r3, #4
    ac3e:	2103      	movs	r1, #3
    ac40:	4618      	mov	r0, r3
    ac42:	4b13      	ldr	r3, [pc, #76]	; (ac90 <_usb_d_dev_reset_epts+0x70>)
    ac44:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    ac46:	79fa      	ldrb	r2, [r7, #7]
    ac48:	4910      	ldr	r1, [pc, #64]	; (ac8c <_usb_d_dev_reset_epts+0x6c>)
    ac4a:	4613      	mov	r3, r2
    ac4c:	009b      	lsls	r3, r3, #2
    ac4e:	4413      	add	r3, r2
    ac50:	009b      	lsls	r3, r3, #2
    ac52:	440b      	add	r3, r1
    ac54:	3326      	adds	r3, #38	; 0x26
    ac56:	22ff      	movs	r2, #255	; 0xff
    ac58:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    ac5a:	79fa      	ldrb	r2, [r7, #7]
    ac5c:	490b      	ldr	r1, [pc, #44]	; (ac8c <_usb_d_dev_reset_epts+0x6c>)
    ac5e:	4613      	mov	r3, r2
    ac60:	009b      	lsls	r3, r3, #2
    ac62:	4413      	add	r3, r2
    ac64:	009b      	lsls	r3, r3, #2
    ac66:	440b      	add	r3, r1
    ac68:	3327      	adds	r3, #39	; 0x27
    ac6a:	2200      	movs	r2, #0
    ac6c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    ac6e:	79fb      	ldrb	r3, [r7, #7]
    ac70:	3301      	adds	r3, #1
    ac72:	71fb      	strb	r3, [r7, #7]
    ac74:	79fb      	ldrb	r3, [r7, #7]
    ac76:	2b08      	cmp	r3, #8
    ac78:	d9d8      	bls.n	ac2c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    ac7a:	22a0      	movs	r2, #160	; 0xa0
    ac7c:	2100      	movs	r1, #0
    ac7e:	4805      	ldr	r0, [pc, #20]	; (ac94 <_usb_d_dev_reset_epts+0x74>)
    ac80:	4b05      	ldr	r3, [pc, #20]	; (ac98 <_usb_d_dev_reset_epts+0x78>)
    ac82:	4798      	blx	r3
}
    ac84:	bf00      	nop
    ac86:	3708      	adds	r7, #8
    ac88:	46bd      	mov	sp, r7
    ac8a:	bd80      	pop	{r7, pc}
    ac8c:	20001088 	.word	0x20001088
    ac90:	0000b4e5 	.word	0x0000b4e5
    ac94:	20001150 	.word	0x20001150
    ac98:	00010bc5 	.word	0x00010bc5

0000ac9c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    ac9c:	b580      	push	{r7, lr}
    ac9e:	b084      	sub	sp, #16
    aca0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    aca2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aca6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    aca8:	2301      	movs	r3, #1
    acaa:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    acac:	2304      	movs	r3, #4
    acae:	713b      	strb	r3, [r7, #4]
    acb0:	2300      	movs	r3, #0
    acb2:	717b      	strb	r3, [r7, #5]
    acb4:	2300      	movs	r3, #0
    acb6:	71bb      	strb	r3, [r7, #6]
    acb8:	2300      	movs	r3, #0
    acba:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    acbc:	2101      	movs	r1, #1
    acbe:	68f8      	ldr	r0, [r7, #12]
    acc0:	4b26      	ldr	r3, [pc, #152]	; (ad5c <_usb_d_dev_init+0xc0>)
    acc2:	4798      	blx	r3
    acc4:	4603      	mov	r3, r0
    acc6:	f083 0301 	eor.w	r3, r3, #1
    acca:	b2db      	uxtb	r3, r3
    accc:	2b00      	cmp	r3, #0
    acce:	d011      	beq.n	acf4 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    acd0:	2102      	movs	r1, #2
    acd2:	68f8      	ldr	r0, [r7, #12]
    acd4:	4b22      	ldr	r3, [pc, #136]	; (ad60 <_usb_d_dev_init+0xc4>)
    acd6:	4798      	blx	r3
    acd8:	4603      	mov	r3, r0
    acda:	2b00      	cmp	r3, #0
    acdc:	d006      	beq.n	acec <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    acde:	68f8      	ldr	r0, [r7, #12]
    ace0:	4b20      	ldr	r3, [pc, #128]	; (ad64 <_usb_d_dev_init+0xc8>)
    ace2:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    ace4:	2102      	movs	r1, #2
    ace6:	68f8      	ldr	r0, [r7, #12]
    ace8:	4b1f      	ldr	r3, [pc, #124]	; (ad68 <_usb_d_dev_init+0xcc>)
    acea:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    acec:	2101      	movs	r1, #1
    acee:	68f8      	ldr	r0, [r7, #12]
    acf0:	4b1e      	ldr	r3, [pc, #120]	; (ad6c <_usb_d_dev_init+0xd0>)
    acf2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    acf4:	2101      	movs	r1, #1
    acf6:	68f8      	ldr	r0, [r7, #12]
    acf8:	4b1b      	ldr	r3, [pc, #108]	; (ad68 <_usb_d_dev_init+0xcc>)
    acfa:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    acfc:	4b1c      	ldr	r3, [pc, #112]	; (ad70 <_usb_d_dev_init+0xd4>)
    acfe:	4a1d      	ldr	r2, [pc, #116]	; (ad74 <_usb_d_dev_init+0xd8>)
    ad00:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ad02:	4b1b      	ldr	r3, [pc, #108]	; (ad70 <_usb_d_dev_init+0xd4>)
    ad04:	4a1b      	ldr	r2, [pc, #108]	; (ad74 <_usb_d_dev_init+0xd8>)
    ad06:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    ad08:	4b19      	ldr	r3, [pc, #100]	; (ad70 <_usb_d_dev_init+0xd4>)
    ad0a:	4a1a      	ldr	r2, [pc, #104]	; (ad74 <_usb_d_dev_init+0xd8>)
    ad0c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ad0e:	4b18      	ldr	r3, [pc, #96]	; (ad70 <_usb_d_dev_init+0xd4>)
    ad10:	4a18      	ldr	r2, [pc, #96]	; (ad74 <_usb_d_dev_init+0xd8>)
    ad12:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ad14:	4b16      	ldr	r3, [pc, #88]	; (ad70 <_usb_d_dev_init+0xd4>)
    ad16:	4a17      	ldr	r2, [pc, #92]	; (ad74 <_usb_d_dev_init+0xd8>)
    ad18:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    ad1a:	4b17      	ldr	r3, [pc, #92]	; (ad78 <_usb_d_dev_init+0xdc>)
    ad1c:	4798      	blx	r3

	_usb_load_calib();
    ad1e:	4b17      	ldr	r3, [pc, #92]	; (ad7c <_usb_d_dev_init+0xe0>)
    ad20:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    ad22:	2104      	movs	r1, #4
    ad24:	68f8      	ldr	r0, [r7, #12]
    ad26:	4b11      	ldr	r3, [pc, #68]	; (ad6c <_usb_d_dev_init+0xd0>)
    ad28:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    ad2a:	4b15      	ldr	r3, [pc, #84]	; (ad80 <_usb_d_dev_init+0xe4>)
    ad2c:	4619      	mov	r1, r3
    ad2e:	68f8      	ldr	r0, [r7, #12]
    ad30:	4b14      	ldr	r3, [pc, #80]	; (ad84 <_usb_d_dev_init+0xe8>)
    ad32:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    ad34:	7afb      	ldrb	r3, [r7, #11]
    ad36:	f107 0210 	add.w	r2, r7, #16
    ad3a:	4413      	add	r3, r2
    ad3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    ad40:	f043 0301 	orr.w	r3, r3, #1
    ad44:	b2db      	uxtb	r3, r3
    ad46:	b29b      	uxth	r3, r3
    ad48:	4619      	mov	r1, r3
    ad4a:	68f8      	ldr	r0, [r7, #12]
    ad4c:	4b0e      	ldr	r3, [pc, #56]	; (ad88 <_usb_d_dev_init+0xec>)
    ad4e:	4798      	blx	r3

	return ERR_NONE;
    ad50:	2300      	movs	r3, #0
}
    ad52:	4618      	mov	r0, r3
    ad54:	3710      	adds	r7, #16
    ad56:	46bd      	mov	sp, r7
    ad58:	bd80      	pop	{r7, pc}
    ad5a:	bf00      	nop
    ad5c:	00009335 	.word	0x00009335
    ad60:	00009685 	.word	0x00009685
    ad64:	00009659 	.word	0x00009659
    ad68:	0000930b 	.word	0x0000930b
    ad6c:	000096b5 	.word	0x000096b5
    ad70:	20001088 	.word	0x20001088
    ad74:	0000977d 	.word	0x0000977d
    ad78:	0000ac21 	.word	0x0000ac21
    ad7c:	00009795 	.word	0x00009795
    ad80:	20001150 	.word	0x20001150
    ad84:	00009761 	.word	0x00009761
    ad88:	00009725 	.word	0x00009725

0000ad8c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b082      	sub	sp, #8
    ad90:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ad92:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad96:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ad98:	2103      	movs	r1, #3
    ad9a:	6878      	ldr	r0, [r7, #4]
    ad9c:	4b17      	ldr	r3, [pc, #92]	; (adfc <_usb_d_dev_enable+0x70>)
    ad9e:	4798      	blx	r3
    ada0:	4603      	mov	r3, r0
    ada2:	2b00      	cmp	r3, #0
    ada4:	d002      	beq.n	adac <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ada6:	f06f 0310 	mvn.w	r3, #16
    adaa:	e023      	b.n	adf4 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    adac:	6878      	ldr	r0, [r7, #4]
    adae:	4b14      	ldr	r3, [pc, #80]	; (ae00 <_usb_d_dev_enable+0x74>)
    adb0:	4798      	blx	r3
    adb2:	4603      	mov	r3, r0
    adb4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    adb6:	78fb      	ldrb	r3, [r7, #3]
    adb8:	f003 0302 	and.w	r3, r3, #2
    adbc:	2b00      	cmp	r3, #0
    adbe:	d107      	bne.n	add0 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    adc0:	78fb      	ldrb	r3, [r7, #3]
    adc2:	f043 0302 	orr.w	r3, r3, #2
    adc6:	b2db      	uxtb	r3, r3
    adc8:	4619      	mov	r1, r3
    adca:	6878      	ldr	r0, [r7, #4]
    adcc:	4b0d      	ldr	r3, [pc, #52]	; (ae04 <_usb_d_dev_enable+0x78>)
    adce:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    add0:	2050      	movs	r0, #80	; 0x50
    add2:	4b0d      	ldr	r3, [pc, #52]	; (ae08 <_usb_d_dev_enable+0x7c>)
    add4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    add6:	2051      	movs	r0, #81	; 0x51
    add8:	4b0b      	ldr	r3, [pc, #44]	; (ae08 <_usb_d_dev_enable+0x7c>)
    adda:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    addc:	2052      	movs	r0, #82	; 0x52
    adde:	4b0a      	ldr	r3, [pc, #40]	; (ae08 <_usb_d_dev_enable+0x7c>)
    ade0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ade2:	2053      	movs	r0, #83	; 0x53
    ade4:	4b08      	ldr	r3, [pc, #32]	; (ae08 <_usb_d_dev_enable+0x7c>)
    ade6:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ade8:	f240 218d 	movw	r1, #653	; 0x28d
    adec:	6878      	ldr	r0, [r7, #4]
    adee:	4b07      	ldr	r3, [pc, #28]	; (ae0c <_usb_d_dev_enable+0x80>)
    adf0:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    adf2:	2300      	movs	r3, #0
}
    adf4:	4618      	mov	r0, r3
    adf6:	3708      	adds	r7, #8
    adf8:	46bd      	mov	sp, r7
    adfa:	bd80      	pop	{r7, pc}
    adfc:	0000962f 	.word	0x0000962f
    ae00:	000096dd 	.word	0x000096dd
    ae04:	000096b5 	.word	0x000096b5
    ae08:	00009241 	.word	0x00009241
    ae0c:	000095d9 	.word	0x000095d9

0000ae10 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ae10:	b580      	push	{r7, lr}
    ae12:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ae14:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae18:	4b01      	ldr	r3, [pc, #4]	; (ae20 <_usb_d_dev_attach+0x10>)
    ae1a:	4798      	blx	r3
}
    ae1c:	bf00      	nop
    ae1e:	bd80      	pop	{r7, pc}
    ae20:	00009701 	.word	0x00009701

0000ae24 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    ae24:	b580      	push	{r7, lr}
    ae26:	b082      	sub	sp, #8
    ae28:	af00      	add	r7, sp, #0
    ae2a:	4603      	mov	r3, r0
    ae2c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ae2e:	79fb      	ldrb	r3, [r7, #7]
    ae30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ae34:	b2db      	uxtb	r3, r3
    ae36:	4619      	mov	r1, r3
    ae38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae3c:	4b02      	ldr	r3, [pc, #8]	; (ae48 <_usb_d_dev_set_address+0x24>)
    ae3e:	4798      	blx	r3
}
    ae40:	bf00      	nop
    ae42:	3708      	adds	r7, #8
    ae44:	46bd      	mov	sp, r7
    ae46:	bd80      	pop	{r7, pc}
    ae48:	00009743 	.word	0x00009743

0000ae4c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    ae4c:	b590      	push	{r4, r7, lr}
    ae4e:	b085      	sub	sp, #20
    ae50:	af00      	add	r7, sp, #0
    ae52:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    ae54:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae58:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ae5a:	687b      	ldr	r3, [r7, #4]
    ae5c:	7c9b      	ldrb	r3, [r3, #18]
    ae5e:	f003 030f 	and.w	r3, r3, #15
    ae62:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	68db      	ldr	r3, [r3, #12]
    ae68:	461a      	mov	r2, r3
    ae6a:	7afb      	ldrb	r3, [r7, #11]
    ae6c:	2100      	movs	r1, #0
    ae6e:	4618      	mov	r0, r3
    ae70:	4b0f      	ldr	r3, [pc, #60]	; (aeb0 <_usb_d_dev_trans_setup+0x64>)
    ae72:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ae74:	687b      	ldr	r3, [r7, #4]
    ae76:	8a1b      	ldrh	r3, [r3, #16]
    ae78:	461a      	mov	r2, r3
    ae7a:	7af8      	ldrb	r0, [r7, #11]
    ae7c:	2300      	movs	r3, #0
    ae7e:	2100      	movs	r1, #0
    ae80:	4c0c      	ldr	r4, [pc, #48]	; (aeb4 <_usb_d_dev_trans_setup+0x68>)
    ae82:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    ae84:	7afb      	ldrb	r3, [r7, #11]
    ae86:	22b0      	movs	r2, #176	; 0xb0
    ae88:	4619      	mov	r1, r3
    ae8a:	68f8      	ldr	r0, [r7, #12]
    ae8c:	4b0a      	ldr	r3, [pc, #40]	; (aeb8 <_usb_d_dev_trans_setup+0x6c>)
    ae8e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    ae90:	7afb      	ldrb	r3, [r7, #11]
    ae92:	2200      	movs	r2, #0
    ae94:	2100      	movs	r1, #0
    ae96:	4618      	mov	r0, r3
    ae98:	4b08      	ldr	r3, [pc, #32]	; (aebc <_usb_d_dev_trans_setup+0x70>)
    ae9a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ae9c:	7afb      	ldrb	r3, [r7, #11]
    ae9e:	2210      	movs	r2, #16
    aea0:	4619      	mov	r1, r3
    aea2:	68f8      	ldr	r0, [r7, #12]
    aea4:	4b06      	ldr	r3, [pc, #24]	; (aec0 <_usb_d_dev_trans_setup+0x74>)
    aea6:	4798      	blx	r3
}
    aea8:	bf00      	nop
    aeaa:	3714      	adds	r7, #20
    aeac:	46bd      	mov	sp, r7
    aeae:	bd90      	pop	{r4, r7, pc}
    aeb0:	00009be1 	.word	0x00009be1
    aeb4:	00009d69 	.word	0x00009d69
    aeb8:	00009441 	.word	0x00009441
    aebc:	00009e39 	.word	0x00009e39
    aec0:	00009495 	.word	0x00009495

0000aec4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    aec4:	b580      	push	{r7, lr}
    aec6:	b088      	sub	sp, #32
    aec8:	af00      	add	r7, sp, #0
    aeca:	4603      	mov	r3, r0
    aecc:	71fb      	strb	r3, [r7, #7]
    aece:	460b      	mov	r3, r1
    aed0:	71bb      	strb	r3, [r7, #6]
    aed2:	4613      	mov	r3, r2
    aed4:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    aed6:	79fb      	ldrb	r3, [r7, #7]
    aed8:	f003 030f 	and.w	r3, r3, #15
    aedc:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    aede:	79fb      	ldrb	r3, [r7, #7]
    aee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aee4:	2b00      	cmp	r3, #0
    aee6:	bf14      	ite	ne
    aee8:	2301      	movne	r3, #1
    aeea:	2300      	moveq	r3, #0
    aeec:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aeee:	7fba      	ldrb	r2, [r7, #30]
    aef0:	7ffb      	ldrb	r3, [r7, #31]
    aef2:	4611      	mov	r1, r2
    aef4:	4618      	mov	r0, r3
    aef6:	4b3e      	ldr	r3, [pc, #248]	; (aff0 <_usb_d_dev_ep_init+0x12c>)
    aef8:	4798      	blx	r3
    aefa:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    aefc:	79bb      	ldrb	r3, [r7, #6]
    aefe:	f003 0303 	and.w	r3, r3, #3
    af02:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    af04:	7ffa      	ldrb	r2, [r7, #31]
    af06:	4613      	mov	r3, r2
    af08:	005b      	lsls	r3, r3, #1
    af0a:	4413      	add	r3, r2
    af0c:	009b      	lsls	r3, r3, #2
    af0e:	4a39      	ldr	r2, [pc, #228]	; (aff4 <_usb_d_dev_ep_init+0x130>)
    af10:	4413      	add	r3, r2
    af12:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    af14:	7ffb      	ldrb	r3, [r7, #31]
    af16:	2b04      	cmp	r3, #4
    af18:	d902      	bls.n	af20 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    af1a:	f06f 0311 	mvn.w	r3, #17
    af1e:	e063      	b.n	afe8 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    af20:	69bb      	ldr	r3, [r7, #24]
    af22:	7c9b      	ldrb	r3, [r3, #18]
    af24:	2bff      	cmp	r3, #255	; 0xff
    af26:	d002      	beq.n	af2e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    af28:	f06f 0313 	mvn.w	r3, #19
    af2c:	e05c      	b.n	afe8 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    af2e:	7dfb      	ldrb	r3, [r7, #23]
    af30:	2b00      	cmp	r3, #0
    af32:	d11f      	bne.n	af74 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    af34:	7fbb      	ldrb	r3, [r7, #30]
    af36:	2b00      	cmp	r3, #0
    af38:	bf14      	ite	ne
    af3a:	2301      	movne	r3, #1
    af3c:	2300      	moveq	r3, #0
    af3e:	b2db      	uxtb	r3, r3
    af40:	f083 0301 	eor.w	r3, r3, #1
    af44:	b2db      	uxtb	r3, r3
    af46:	f003 0301 	and.w	r3, r3, #1
    af4a:	b2da      	uxtb	r2, r3
    af4c:	7ffb      	ldrb	r3, [r7, #31]
    af4e:	4611      	mov	r1, r2
    af50:	4618      	mov	r0, r3
    af52:	4b27      	ldr	r3, [pc, #156]	; (aff0 <_usb_d_dev_ep_init+0x12c>)
    af54:	4798      	blx	r3
    af56:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    af58:	68fb      	ldr	r3, [r7, #12]
    af5a:	7c9b      	ldrb	r3, [r3, #18]
    af5c:	2bff      	cmp	r3, #255	; 0xff
    af5e:	d002      	beq.n	af66 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    af60:	f06f 0313 	mvn.w	r3, #19
    af64:	e040      	b.n	afe8 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    af66:	693b      	ldr	r3, [r7, #16]
    af68:	681b      	ldr	r3, [r3, #0]
    af6a:	2b00      	cmp	r3, #0
    af6c:	d102      	bne.n	af74 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    af6e:	f06f 0312 	mvn.w	r3, #18
    af72:	e039      	b.n	afe8 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    af74:	7fbb      	ldrb	r3, [r7, #30]
    af76:	2b00      	cmp	r3, #0
    af78:	d007      	beq.n	af8a <_usb_d_dev_ep_init+0xc6>
    af7a:	693b      	ldr	r3, [r7, #16]
    af7c:	685b      	ldr	r3, [r3, #4]
    af7e:	2b00      	cmp	r3, #0
    af80:	bf14      	ite	ne
    af82:	2301      	movne	r3, #1
    af84:	2300      	moveq	r3, #0
    af86:	b2db      	uxtb	r3, r3
    af88:	e006      	b.n	af98 <_usb_d_dev_ep_init+0xd4>
    af8a:	693b      	ldr	r3, [r7, #16]
    af8c:	681b      	ldr	r3, [r3, #0]
    af8e:	2b00      	cmp	r3, #0
    af90:	bf14      	ite	ne
    af92:	2301      	movne	r3, #1
    af94:	2300      	moveq	r3, #0
    af96:	b2db      	uxtb	r3, r3
    af98:	2b00      	cmp	r3, #0
    af9a:	d00f      	beq.n	afbc <_usb_d_dev_ep_init+0xf8>
    af9c:	7fbb      	ldrb	r3, [r7, #30]
    af9e:	2b00      	cmp	r3, #0
    afa0:	d003      	beq.n	afaa <_usb_d_dev_ep_init+0xe6>
    afa2:	693b      	ldr	r3, [r7, #16]
    afa4:	895b      	ldrh	r3, [r3, #10]
    afa6:	461a      	mov	r2, r3
    afa8:	e002      	b.n	afb0 <_usb_d_dev_ep_init+0xec>
    afaa:	693b      	ldr	r3, [r7, #16]
    afac:	891b      	ldrh	r3, [r3, #8]
    afae:	461a      	mov	r2, r3
    afb0:	88bb      	ldrh	r3, [r7, #4]
    afb2:	429a      	cmp	r2, r3
    afb4:	da02      	bge.n	afbc <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    afb6:	f06f 0312 	mvn.w	r3, #18
    afba:	e015      	b.n	afe8 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    afbc:	7fbb      	ldrb	r3, [r7, #30]
    afbe:	2b00      	cmp	r3, #0
    afc0:	d002      	beq.n	afc8 <_usb_d_dev_ep_init+0x104>
    afc2:	693b      	ldr	r3, [r7, #16]
    afc4:	685b      	ldr	r3, [r3, #4]
    afc6:	e001      	b.n	afcc <_usb_d_dev_ep_init+0x108>
    afc8:	693b      	ldr	r3, [r7, #16]
    afca:	681b      	ldr	r3, [r3, #0]
    afcc:	69ba      	ldr	r2, [r7, #24]
    afce:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    afd0:	69bb      	ldr	r3, [r7, #24]
    afd2:	88ba      	ldrh	r2, [r7, #4]
    afd4:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    afd6:	7dfb      	ldrb	r3, [r7, #23]
    afd8:	3301      	adds	r3, #1
    afda:	b2da      	uxtb	r2, r3
    afdc:	69bb      	ldr	r3, [r7, #24]
    afde:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    afe0:	69bb      	ldr	r3, [r7, #24]
    afe2:	79fa      	ldrb	r2, [r7, #7]
    afe4:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    afe6:	2300      	movs	r3, #0
}
    afe8:	4618      	mov	r0, r3
    afea:	3720      	adds	r7, #32
    afec:	46bd      	mov	sp, r7
    afee:	bd80      	pop	{r7, pc}
    aff0:	00009ef5 	.word	0x00009ef5
    aff4:	00011214 	.word	0x00011214

0000aff8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    aff8:	b580      	push	{r7, lr}
    affa:	b086      	sub	sp, #24
    affc:	af00      	add	r7, sp, #0
    affe:	4603      	mov	r3, r0
    b000:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    b002:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b006:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    b008:	79fb      	ldrb	r3, [r7, #7]
    b00a:	f003 030f 	and.w	r3, r3, #15
    b00e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b010:	79fb      	ldrb	r3, [r7, #7]
    b012:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b016:	2b00      	cmp	r3, #0
    b018:	bf14      	ite	ne
    b01a:	2301      	movne	r3, #1
    b01c:	2300      	moveq	r3, #0
    b01e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b020:	7cba      	ldrb	r2, [r7, #18]
    b022:	7cfb      	ldrb	r3, [r7, #19]
    b024:	4611      	mov	r1, r2
    b026:	4618      	mov	r0, r3
    b028:	4b2a      	ldr	r3, [pc, #168]	; (b0d4 <_usb_d_dev_ep_deinit+0xdc>)
    b02a:	4798      	blx	r3
    b02c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b02e:	7cfb      	ldrb	r3, [r7, #19]
    b030:	2b04      	cmp	r3, #4
    b032:	d84a      	bhi.n	b0ca <_usb_d_dev_ep_deinit+0xd2>
    b034:	68fb      	ldr	r3, [r7, #12]
    b036:	7c9b      	ldrb	r3, [r3, #18]
    b038:	2bff      	cmp	r3, #255	; 0xff
    b03a:	d046      	beq.n	b0ca <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    b03c:	7cbb      	ldrb	r3, [r7, #18]
    b03e:	2203      	movs	r2, #3
    b040:	4619      	mov	r1, r3
    b042:	68f8      	ldr	r0, [r7, #12]
    b044:	4b24      	ldr	r3, [pc, #144]	; (b0d8 <_usb_d_dev_ep_deinit+0xe0>)
    b046:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b048:	68fb      	ldr	r3, [r7, #12]
    b04a:	7cdb      	ldrb	r3, [r3, #19]
    b04c:	f003 0307 	and.w	r3, r3, #7
    b050:	b2db      	uxtb	r3, r3
    b052:	2b01      	cmp	r3, #1
    b054:	d107      	bne.n	b066 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    b056:	79fb      	ldrb	r3, [r7, #7]
    b058:	697a      	ldr	r2, [r7, #20]
    b05a:	3308      	adds	r3, #8
    b05c:	015b      	lsls	r3, r3, #5
    b05e:	4413      	add	r3, r2
    b060:	2200      	movs	r2, #0
    b062:	701a      	strb	r2, [r3, #0]
    b064:	e02a      	b.n	b0bc <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    b066:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b06a:	2b00      	cmp	r3, #0
    b06c:	da15      	bge.n	b09a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    b06e:	79fb      	ldrb	r3, [r7, #7]
    b070:	f003 030f 	and.w	r3, r3, #15
    b074:	79fa      	ldrb	r2, [r7, #7]
    b076:	f002 020f 	and.w	r2, r2, #15
    b07a:	6979      	ldr	r1, [r7, #20]
    b07c:	3208      	adds	r2, #8
    b07e:	0152      	lsls	r2, r2, #5
    b080:	440a      	add	r2, r1
    b082:	7812      	ldrb	r2, [r2, #0]
    b084:	b2d2      	uxtb	r2, r2
    b086:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    b08a:	b2d1      	uxtb	r1, r2
    b08c:	697a      	ldr	r2, [r7, #20]
    b08e:	3308      	adds	r3, #8
    b090:	015b      	lsls	r3, r3, #5
    b092:	4413      	add	r3, r2
    b094:	460a      	mov	r2, r1
    b096:	701a      	strb	r2, [r3, #0]
    b098:	e010      	b.n	b0bc <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b09a:	79fb      	ldrb	r3, [r7, #7]
    b09c:	79fa      	ldrb	r2, [r7, #7]
    b09e:	6979      	ldr	r1, [r7, #20]
    b0a0:	3208      	adds	r2, #8
    b0a2:	0152      	lsls	r2, r2, #5
    b0a4:	440a      	add	r2, r1
    b0a6:	7812      	ldrb	r2, [r2, #0]
    b0a8:	b2d2      	uxtb	r2, r2
    b0aa:	f022 0207 	bic.w	r2, r2, #7
    b0ae:	b2d1      	uxtb	r1, r2
    b0b0:	697a      	ldr	r2, [r7, #20]
    b0b2:	3308      	adds	r3, #8
    b0b4:	015b      	lsls	r3, r3, #5
    b0b6:	4413      	add	r3, r2
    b0b8:	460a      	mov	r2, r1
    b0ba:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    b0bc:	68fb      	ldr	r3, [r7, #12]
    b0be:	2200      	movs	r2, #0
    b0c0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    b0c2:	68fb      	ldr	r3, [r7, #12]
    b0c4:	22ff      	movs	r2, #255	; 0xff
    b0c6:	749a      	strb	r2, [r3, #18]
    b0c8:	e000      	b.n	b0cc <_usb_d_dev_ep_deinit+0xd4>
		return;
    b0ca:	bf00      	nop
}
    b0cc:	3718      	adds	r7, #24
    b0ce:	46bd      	mov	sp, r7
    b0d0:	bd80      	pop	{r7, pc}
    b0d2:	bf00      	nop
    b0d4:	00009ef5 	.word	0x00009ef5
    b0d8:	0000b52d 	.word	0x0000b52d

0000b0dc <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    b0dc:	b5b0      	push	{r4, r5, r7, lr}
    b0de:	b088      	sub	sp, #32
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	4603      	mov	r3, r0
    b0e4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    b0e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b0ea:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    b0ec:	79fb      	ldrb	r3, [r7, #7]
    b0ee:	f003 030f 	and.w	r3, r3, #15
    b0f2:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    b0f4:	79fb      	ldrb	r3, [r7, #7]
    b0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	bf14      	ite	ne
    b0fe:	2301      	movne	r3, #1
    b100:	2300      	moveq	r3, #0
    b102:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    b104:	7eba      	ldrb	r2, [r7, #26]
    b106:	7efb      	ldrb	r3, [r7, #27]
    b108:	4611      	mov	r1, r2
    b10a:	4618      	mov	r0, r3
    b10c:	4b70      	ldr	r3, [pc, #448]	; (b2d0 <_usb_d_dev_ep_enable+0x1f4>)
    b10e:	4798      	blx	r3
    b110:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    b112:	7efb      	ldrb	r3, [r7, #27]
    b114:	4619      	mov	r1, r3
    b116:	69f8      	ldr	r0, [r7, #28]
    b118:	4b6e      	ldr	r3, [pc, #440]	; (b2d4 <_usb_d_dev_ep_enable+0x1f8>)
    b11a:	4798      	blx	r3
    b11c:	4603      	mov	r3, r0
    b11e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b120:	7efb      	ldrb	r3, [r7, #27]
    b122:	2b04      	cmp	r3, #4
    b124:	d803      	bhi.n	b12e <_usb_d_dev_ep_enable+0x52>
    b126:	697b      	ldr	r3, [r7, #20]
    b128:	7c9b      	ldrb	r3, [r3, #18]
    b12a:	2bff      	cmp	r3, #255	; 0xff
    b12c:	d102      	bne.n	b134 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    b12e:	f06f 0311 	mvn.w	r3, #17
    b132:	e0c8      	b.n	b2c6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b134:	7efb      	ldrb	r3, [r7, #27]
    b136:	015b      	lsls	r3, r3, #5
    b138:	4a67      	ldr	r2, [pc, #412]	; (b2d8 <_usb_d_dev_ep_enable+0x1fc>)
    b13a:	4413      	add	r3, r2
    b13c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b13e:	697b      	ldr	r3, [r7, #20]
    b140:	7cdb      	ldrb	r3, [r3, #19]
    b142:	f003 0307 	and.w	r3, r3, #7
    b146:	b2db      	uxtb	r3, r3
    b148:	2b01      	cmp	r3, #1
    b14a:	d14b      	bne.n	b1e4 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b14c:	7cfb      	ldrb	r3, [r7, #19]
    b14e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    b152:	2b00      	cmp	r3, #0
    b154:	d002      	beq.n	b15c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    b156:	f06f 0313 	mvn.w	r3, #19
    b15a:	e0b4      	b.n	b2c6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    b15c:	7efb      	ldrb	r3, [r7, #27]
    b15e:	2211      	movs	r2, #17
    b160:	4619      	mov	r1, r3
    b162:	69f8      	ldr	r0, [r7, #28]
    b164:	4b5d      	ldr	r3, [pc, #372]	; (b2dc <_usb_d_dev_ep_enable+0x200>)
    b166:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b168:	697b      	ldr	r3, [r7, #20]
    b16a:	8a1b      	ldrh	r3, [r3, #16]
    b16c:	039b      	lsls	r3, r3, #14
    b16e:	4c5c      	ldr	r4, [pc, #368]	; (b2e0 <_usb_d_dev_ep_enable+0x204>)
    b170:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b172:	697b      	ldr	r3, [r7, #20]
    b174:	8a1b      	ldrh	r3, [r3, #16]
    b176:	4618      	mov	r0, r3
    b178:	4b5a      	ldr	r3, [pc, #360]	; (b2e4 <_usb_d_dev_ep_enable+0x208>)
    b17a:	4798      	blx	r3
    b17c:	4603      	mov	r3, r0
    b17e:	071b      	lsls	r3, r3, #28
    b180:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b184:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b188:	68fb      	ldr	r3, [r7, #12]
    b18a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    b18c:	68fb      	ldr	r3, [r7, #12]
    b18e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b192:	697b      	ldr	r3, [r7, #20]
    b194:	8a1b      	ldrh	r3, [r3, #16]
    b196:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b19a:	697b      	ldr	r3, [r7, #20]
    b19c:	8a1b      	ldrh	r3, [r3, #16]
    b19e:	4618      	mov	r0, r3
    b1a0:	4b50      	ldr	r3, [pc, #320]	; (b2e4 <_usb_d_dev_ep_enable+0x208>)
    b1a2:	4798      	blx	r3
    b1a4:	4603      	mov	r3, r0
    b1a6:	071b      	lsls	r3, r3, #28
    b1a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b1ac:	432b      	orrs	r3, r5
    b1ae:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b1b0:	7efb      	ldrb	r3, [r7, #27]
    b1b2:	2200      	movs	r2, #0
    b1b4:	2100      	movs	r1, #0
    b1b6:	4618      	mov	r0, r3
    b1b8:	4b4b      	ldr	r3, [pc, #300]	; (b2e8 <_usb_d_dev_ep_enable+0x20c>)
    b1ba:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b1bc:	7efb      	ldrb	r3, [r7, #27]
    b1be:	2200      	movs	r2, #0
    b1c0:	2101      	movs	r1, #1
    b1c2:	4618      	mov	r0, r3
    b1c4:	4b49      	ldr	r3, [pc, #292]	; (b2ec <_usb_d_dev_ep_enable+0x210>)
    b1c6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b1c8:	7efb      	ldrb	r3, [r7, #27]
    b1ca:	2100      	movs	r1, #0
    b1cc:	4618      	mov	r0, r3
    b1ce:	4b48      	ldr	r3, [pc, #288]	; (b2f0 <_usb_d_dev_ep_enable+0x214>)
    b1d0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b1d2:	7efb      	ldrb	r3, [r7, #27]
    b1d4:	2101      	movs	r1, #1
    b1d6:	4618      	mov	r0, r3
    b1d8:	4b45      	ldr	r3, [pc, #276]	; (b2f0 <_usb_d_dev_ep_enable+0x214>)
    b1da:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b1dc:	6978      	ldr	r0, [r7, #20]
    b1de:	4b45      	ldr	r3, [pc, #276]	; (b2f4 <_usb_d_dev_ep_enable+0x218>)
    b1e0:	4798      	blx	r3
    b1e2:	e06f      	b.n	b2c4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b1e4:	7ebb      	ldrb	r3, [r7, #26]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d038      	beq.n	b25c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b1ea:	7cfb      	ldrb	r3, [r7, #19]
    b1ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b1f0:	2b00      	cmp	r3, #0
    b1f2:	d002      	beq.n	b1fa <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b1f4:	f06f 0313 	mvn.w	r3, #19
    b1f8:	e065      	b.n	b2c6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b1fa:	697b      	ldr	r3, [r7, #20]
    b1fc:	7cdb      	ldrb	r3, [r3, #19]
    b1fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b202:	b2db      	uxtb	r3, r3
    b204:	011b      	lsls	r3, r3, #4
    b206:	b2db      	uxtb	r3, r3
    b208:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b20c:	b2da      	uxtb	r2, r3
    b20e:	7cfb      	ldrb	r3, [r7, #19]
    b210:	4313      	orrs	r3, r2
    b212:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b214:	7cfa      	ldrb	r2, [r7, #19]
    b216:	7efb      	ldrb	r3, [r7, #27]
    b218:	4619      	mov	r1, r3
    b21a:	69f8      	ldr	r0, [r7, #28]
    b21c:	4b2f      	ldr	r3, [pc, #188]	; (b2dc <_usb_d_dev_ep_enable+0x200>)
    b21e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b220:	68fb      	ldr	r3, [r7, #12]
    b222:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b226:	697b      	ldr	r3, [r7, #20]
    b228:	8a1b      	ldrh	r3, [r3, #16]
    b22a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b22e:	697b      	ldr	r3, [r7, #20]
    b230:	8a1b      	ldrh	r3, [r3, #16]
    b232:	4618      	mov	r0, r3
    b234:	4b2b      	ldr	r3, [pc, #172]	; (b2e4 <_usb_d_dev_ep_enable+0x208>)
    b236:	4798      	blx	r3
    b238:	4603      	mov	r3, r0
    b23a:	071b      	lsls	r3, r3, #28
    b23c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b240:	432b      	orrs	r3, r5
    b242:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b244:	7efb      	ldrb	r3, [r7, #27]
    b246:	2200      	movs	r2, #0
    b248:	2101      	movs	r1, #1
    b24a:	4618      	mov	r0, r3
    b24c:	4b27      	ldr	r3, [pc, #156]	; (b2ec <_usb_d_dev_ep_enable+0x210>)
    b24e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b250:	7efb      	ldrb	r3, [r7, #27]
    b252:	2101      	movs	r1, #1
    b254:	4618      	mov	r0, r3
    b256:	4b26      	ldr	r3, [pc, #152]	; (b2f0 <_usb_d_dev_ep_enable+0x214>)
    b258:	4798      	blx	r3
    b25a:	e033      	b.n	b2c4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b25c:	7cfb      	ldrb	r3, [r7, #19]
    b25e:	f003 0307 	and.w	r3, r3, #7
    b262:	2b00      	cmp	r3, #0
    b264:	d002      	beq.n	b26c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b266:	f06f 0313 	mvn.w	r3, #19
    b26a:	e02c      	b.n	b2c6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b26c:	697b      	ldr	r3, [r7, #20]
    b26e:	7cdb      	ldrb	r3, [r3, #19]
    b270:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b274:	b2db      	uxtb	r3, r3
    b276:	461a      	mov	r2, r3
    b278:	7cfb      	ldrb	r3, [r7, #19]
    b27a:	4313      	orrs	r3, r2
    b27c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b27e:	7cfa      	ldrb	r2, [r7, #19]
    b280:	7efb      	ldrb	r3, [r7, #27]
    b282:	4619      	mov	r1, r3
    b284:	69f8      	ldr	r0, [r7, #28]
    b286:	4b15      	ldr	r3, [pc, #84]	; (b2dc <_usb_d_dev_ep_enable+0x200>)
    b288:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b28a:	697b      	ldr	r3, [r7, #20]
    b28c:	8a1b      	ldrh	r3, [r3, #16]
    b28e:	039b      	lsls	r3, r3, #14
    b290:	4c13      	ldr	r4, [pc, #76]	; (b2e0 <_usb_d_dev_ep_enable+0x204>)
    b292:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b294:	697b      	ldr	r3, [r7, #20]
    b296:	8a1b      	ldrh	r3, [r3, #16]
    b298:	4618      	mov	r0, r3
    b29a:	4b12      	ldr	r3, [pc, #72]	; (b2e4 <_usb_d_dev_ep_enable+0x208>)
    b29c:	4798      	blx	r3
    b29e:	4603      	mov	r3, r0
    b2a0:	071b      	lsls	r3, r3, #28
    b2a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b2a6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b2aa:	68fb      	ldr	r3, [r7, #12]
    b2ac:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b2ae:	7efb      	ldrb	r3, [r7, #27]
    b2b0:	2200      	movs	r2, #0
    b2b2:	2100      	movs	r1, #0
    b2b4:	4618      	mov	r0, r3
    b2b6:	4b0c      	ldr	r3, [pc, #48]	; (b2e8 <_usb_d_dev_ep_enable+0x20c>)
    b2b8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b2ba:	7efb      	ldrb	r3, [r7, #27]
    b2bc:	2100      	movs	r1, #0
    b2be:	4618      	mov	r0, r3
    b2c0:	4b0b      	ldr	r3, [pc, #44]	; (b2f0 <_usb_d_dev_ep_enable+0x214>)
    b2c2:	4798      	blx	r3
	}

	return USB_OK;
    b2c4:	2300      	movs	r3, #0
}
    b2c6:	4618      	mov	r0, r3
    b2c8:	3720      	adds	r7, #32
    b2ca:	46bd      	mov	sp, r7
    b2cc:	bdb0      	pop	{r4, r5, r7, pc}
    b2ce:	bf00      	nop
    b2d0:	00009ef5 	.word	0x00009ef5
    b2d4:	0000957b 	.word	0x0000957b
    b2d8:	20001150 	.word	0x20001150
    b2dc:	00009551 	.word	0x00009551
    b2e0:	0fffc000 	.word	0x0fffc000
    b2e4:	00009e91 	.word	0x00009e91
    b2e8:	00009e39 	.word	0x00009e39
    b2ec:	00009de1 	.word	0x00009de1
    b2f0:	00009da9 	.word	0x00009da9
    b2f4:	0000ae4d 	.word	0x0000ae4d

0000b2f8 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b2f8:	b580      	push	{r7, lr}
    b2fa:	b084      	sub	sp, #16
    b2fc:	af00      	add	r7, sp, #0
    b2fe:	6078      	str	r0, [r7, #4]
    b300:	460b      	mov	r3, r1
    b302:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b304:	687b      	ldr	r3, [r7, #4]
    b306:	7c9b      	ldrb	r3, [r3, #18]
    b308:	f003 030f 	and.w	r3, r3, #15
    b30c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b30e:	78fa      	ldrb	r2, [r7, #3]
    b310:	7bfb      	ldrb	r3, [r7, #15]
    b312:	4611      	mov	r1, r2
    b314:	4618      	mov	r0, r3
    b316:	4b03      	ldr	r3, [pc, #12]	; (b324 <_usb_d_dev_ep_stall_get+0x2c>)
    b318:	4798      	blx	r3
    b31a:	4603      	mov	r3, r0
}
    b31c:	4618      	mov	r0, r3
    b31e:	3710      	adds	r7, #16
    b320:	46bd      	mov	sp, r7
    b322:	bd80      	pop	{r7, pc}
    b324:	000099e9 	.word	0x000099e9

0000b328 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b328:	b580      	push	{r7, lr}
    b32a:	b084      	sub	sp, #16
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	460b      	mov	r3, r1
    b332:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b334:	687b      	ldr	r3, [r7, #4]
    b336:	7c9b      	ldrb	r3, [r3, #18]
    b338:	f003 030f 	and.w	r3, r3, #15
    b33c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b33e:	78f9      	ldrb	r1, [r7, #3]
    b340:	7bfb      	ldrb	r3, [r7, #15]
    b342:	2201      	movs	r2, #1
    b344:	4618      	mov	r0, r3
    b346:	4b0a      	ldr	r3, [pc, #40]	; (b370 <_usb_d_dev_ep_stall_set+0x48>)
    b348:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b34a:	78fb      	ldrb	r3, [r7, #3]
    b34c:	2220      	movs	r2, #32
    b34e:	409a      	lsls	r2, r3
    b350:	7bfb      	ldrb	r3, [r7, #15]
    b352:	4611      	mov	r1, r2
    b354:	4618      	mov	r0, r3
    b356:	4b07      	ldr	r3, [pc, #28]	; (b374 <_usb_d_dev_ep_stall_set+0x4c>)
    b358:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b35a:	687a      	ldr	r2, [r7, #4]
    b35c:	7cd3      	ldrb	r3, [r2, #19]
    b35e:	f043 0308 	orr.w	r3, r3, #8
    b362:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b364:	2300      	movs	r3, #0
}
    b366:	4618      	mov	r0, r3
    b368:	3710      	adds	r7, #16
    b36a:	46bd      	mov	sp, r7
    b36c:	bd80      	pop	{r7, pc}
    b36e:	bf00      	nop
    b370:	00009991 	.word	0x00009991
    b374:	00009911 	.word	0x00009911

0000b378 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b378:	b580      	push	{r7, lr}
    b37a:	b084      	sub	sp, #16
    b37c:	af00      	add	r7, sp, #0
    b37e:	6078      	str	r0, [r7, #4]
    b380:	460b      	mov	r3, r1
    b382:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b384:	687b      	ldr	r3, [r7, #4]
    b386:	7c9b      	ldrb	r3, [r3, #18]
    b388:	f003 030f 	and.w	r3, r3, #15
    b38c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b38e:	78fa      	ldrb	r2, [r7, #3]
    b390:	7bfb      	ldrb	r3, [r7, #15]
    b392:	4611      	mov	r1, r2
    b394:	4618      	mov	r0, r3
    b396:	4b28      	ldr	r3, [pc, #160]	; (b438 <_usb_d_dev_ep_stall_clr+0xc0>)
    b398:	4798      	blx	r3
    b39a:	4603      	mov	r3, r0
    b39c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b39e:	7bbb      	ldrb	r3, [r7, #14]
    b3a0:	f083 0301 	eor.w	r3, r3, #1
    b3a4:	b2db      	uxtb	r3, r3
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d001      	beq.n	b3ae <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b3aa:	2300      	movs	r3, #0
    b3ac:	e040      	b.n	b430 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b3ae:	78f9      	ldrb	r1, [r7, #3]
    b3b0:	7bfb      	ldrb	r3, [r7, #15]
    b3b2:	2200      	movs	r2, #0
    b3b4:	4618      	mov	r0, r3
    b3b6:	4b21      	ldr	r3, [pc, #132]	; (b43c <_usb_d_dev_ep_stall_clr+0xc4>)
    b3b8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b3ba:	78fb      	ldrb	r3, [r7, #3]
    b3bc:	2220      	movs	r2, #32
    b3be:	409a      	lsls	r2, r3
    b3c0:	7bfb      	ldrb	r3, [r7, #15]
    b3c2:	4611      	mov	r1, r2
    b3c4:	4618      	mov	r0, r3
    b3c6:	4b1e      	ldr	r3, [pc, #120]	; (b440 <_usb_d_dev_ep_stall_clr+0xc8>)
    b3c8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b3ca:	78fa      	ldrb	r2, [r7, #3]
    b3cc:	7bfb      	ldrb	r3, [r7, #15]
    b3ce:	4611      	mov	r1, r2
    b3d0:	4618      	mov	r0, r3
    b3d2:	4b1c      	ldr	r3, [pc, #112]	; (b444 <_usb_d_dev_ep_stall_clr+0xcc>)
    b3d4:	4798      	blx	r3
    b3d6:	4603      	mov	r3, r0
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d00b      	beq.n	b3f4 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b3dc:	78fa      	ldrb	r2, [r7, #3]
    b3de:	7bfb      	ldrb	r3, [r7, #15]
    b3e0:	4611      	mov	r1, r2
    b3e2:	4618      	mov	r0, r3
    b3e4:	4b18      	ldr	r3, [pc, #96]	; (b448 <_usb_d_dev_ep_stall_clr+0xd0>)
    b3e6:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b3e8:	78f9      	ldrb	r1, [r7, #3]
    b3ea:	7bfb      	ldrb	r3, [r7, #15]
    b3ec:	2200      	movs	r2, #0
    b3ee:	4618      	mov	r0, r3
    b3f0:	4b16      	ldr	r3, [pc, #88]	; (b44c <_usb_d_dev_ep_stall_clr+0xd4>)
    b3f2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b3f4:	687b      	ldr	r3, [r7, #4]
    b3f6:	7cdb      	ldrb	r3, [r3, #19]
    b3f8:	f003 0307 	and.w	r3, r3, #7
    b3fc:	b2db      	uxtb	r3, r3
    b3fe:	2b01      	cmp	r3, #1
    b400:	d110      	bne.n	b424 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b402:	7bfb      	ldrb	r3, [r7, #15]
    b404:	4619      	mov	r1, r3
    b406:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b40a:	4b11      	ldr	r3, [pc, #68]	; (b450 <_usb_d_dev_ep_stall_clr+0xd8>)
    b40c:	4798      	blx	r3
    b40e:	4603      	mov	r3, r0
    b410:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b414:	2b00      	cmp	r3, #0
    b416:	d10a      	bne.n	b42e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b418:	687a      	ldr	r2, [r7, #4]
    b41a:	7cd3      	ldrb	r3, [r2, #19]
    b41c:	f36f 03c3 	bfc	r3, #3, #1
    b420:	74d3      	strb	r3, [r2, #19]
    b422:	e004      	b.n	b42e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b424:	687a      	ldr	r2, [r7, #4]
    b426:	7cd3      	ldrb	r3, [r2, #19]
    b428:	f36f 03c3 	bfc	r3, #3, #1
    b42c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b42e:	2300      	movs	r3, #0
}
    b430:	4618      	mov	r0, r3
    b432:	3710      	adds	r7, #16
    b434:	46bd      	mov	sp, r7
    b436:	bd80      	pop	{r7, pc}
    b438:	000099e9 	.word	0x000099e9
    b43c:	00009991 	.word	0x00009991
    b440:	00009939 	.word	0x00009939
    b444:	00009a2d 	.word	0x00009a2d
    b448:	00009a71 	.word	0x00009a71
    b44c:	00009b5d 	.word	0x00009b5d
    b450:	00009419 	.word	0x00009419

0000b454 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b454:	b580      	push	{r7, lr}
    b456:	b086      	sub	sp, #24
    b458:	af00      	add	r7, sp, #0
    b45a:	4603      	mov	r3, r0
    b45c:	460a      	mov	r2, r1
    b45e:	71fb      	strb	r3, [r7, #7]
    b460:	4613      	mov	r3, r2
    b462:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b464:	79fb      	ldrb	r3, [r7, #7]
    b466:	f003 030f 	and.w	r3, r3, #15
    b46a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b46c:	79fb      	ldrb	r3, [r7, #7]
    b46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b472:	2b00      	cmp	r3, #0
    b474:	bf14      	ite	ne
    b476:	2301      	movne	r3, #1
    b478:	2300      	moveq	r3, #0
    b47a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b47c:	7cba      	ldrb	r2, [r7, #18]
    b47e:	7cfb      	ldrb	r3, [r7, #19]
    b480:	4611      	mov	r1, r2
    b482:	4618      	mov	r0, r3
    b484:	4b13      	ldr	r3, [pc, #76]	; (b4d4 <_usb_d_dev_ep_stall+0x80>)
    b486:	4798      	blx	r3
    b488:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b48a:	7cfb      	ldrb	r3, [r7, #19]
    b48c:	2b04      	cmp	r3, #4
    b48e:	d902      	bls.n	b496 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b490:	f06f 0311 	mvn.w	r3, #17
    b494:	e01a      	b.n	b4cc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b496:	79bb      	ldrb	r3, [r7, #6]
    b498:	2b01      	cmp	r3, #1
    b49a:	d106      	bne.n	b4aa <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b49c:	7cbb      	ldrb	r3, [r7, #18]
    b49e:	4619      	mov	r1, r3
    b4a0:	68f8      	ldr	r0, [r7, #12]
    b4a2:	4b0d      	ldr	r3, [pc, #52]	; (b4d8 <_usb_d_dev_ep_stall+0x84>)
    b4a4:	4798      	blx	r3
    b4a6:	6178      	str	r0, [r7, #20]
    b4a8:	e00f      	b.n	b4ca <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b4aa:	79bb      	ldrb	r3, [r7, #6]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d106      	bne.n	b4be <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b4b0:	7cbb      	ldrb	r3, [r7, #18]
    b4b2:	4619      	mov	r1, r3
    b4b4:	68f8      	ldr	r0, [r7, #12]
    b4b6:	4b09      	ldr	r3, [pc, #36]	; (b4dc <_usb_d_dev_ep_stall+0x88>)
    b4b8:	4798      	blx	r3
    b4ba:	6178      	str	r0, [r7, #20]
    b4bc:	e005      	b.n	b4ca <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b4be:	7cbb      	ldrb	r3, [r7, #18]
    b4c0:	4619      	mov	r1, r3
    b4c2:	68f8      	ldr	r0, [r7, #12]
    b4c4:	4b06      	ldr	r3, [pc, #24]	; (b4e0 <_usb_d_dev_ep_stall+0x8c>)
    b4c6:	4798      	blx	r3
    b4c8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b4ca:	697b      	ldr	r3, [r7, #20]
}
    b4cc:	4618      	mov	r0, r3
    b4ce:	3718      	adds	r7, #24
    b4d0:	46bd      	mov	sp, r7
    b4d2:	bd80      	pop	{r7, pc}
    b4d4:	00009ef5 	.word	0x00009ef5
    b4d8:	0000b329 	.word	0x0000b329
    b4dc:	0000b379 	.word	0x0000b379
    b4e0:	0000b2f9 	.word	0x0000b2f9

0000b4e4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b4e4:	b580      	push	{r7, lr}
    b4e6:	b082      	sub	sp, #8
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	6078      	str	r0, [r7, #4]
    b4ec:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b4ee:	687b      	ldr	r3, [r7, #4]
    b4f0:	7c9b      	ldrb	r3, [r3, #18]
    b4f2:	2bff      	cmp	r3, #255	; 0xff
    b4f4:	d014      	beq.n	b520 <_usb_d_dev_trans_done+0x3c>
    b4f6:	687b      	ldr	r3, [r7, #4]
    b4f8:	7cdb      	ldrb	r3, [r3, #19]
    b4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b4fe:	b2db      	uxtb	r3, r3
    b500:	2b00      	cmp	r3, #0
    b502:	d00d      	beq.n	b520 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b504:	687a      	ldr	r2, [r7, #4]
    b506:	7cd3      	ldrb	r3, [r2, #19]
    b508:	f36f 1386 	bfc	r3, #6, #1
    b50c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b50e:	4b06      	ldr	r3, [pc, #24]	; (b528 <_usb_d_dev_trans_done+0x44>)
    b510:	691b      	ldr	r3, [r3, #16]
    b512:	687a      	ldr	r2, [r7, #4]
    b514:	7c90      	ldrb	r0, [r2, #18]
    b516:	687a      	ldr	r2, [r7, #4]
    b518:	6892      	ldr	r2, [r2, #8]
    b51a:	6839      	ldr	r1, [r7, #0]
    b51c:	4798      	blx	r3
    b51e:	e000      	b.n	b522 <_usb_d_dev_trans_done+0x3e>
		return;
    b520:	bf00      	nop
}
    b522:	3708      	adds	r7, #8
    b524:	46bd      	mov	sp, r7
    b526:	bd80      	pop	{r7, pc}
    b528:	20001088 	.word	0x20001088

0000b52c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b52c:	b580      	push	{r7, lr}
    b52e:	b086      	sub	sp, #24
    b530:	af00      	add	r7, sp, #0
    b532:	60f8      	str	r0, [r7, #12]
    b534:	460b      	mov	r3, r1
    b536:	607a      	str	r2, [r7, #4]
    b538:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b53a:	68fb      	ldr	r3, [r7, #12]
    b53c:	7c9b      	ldrb	r3, [r3, #18]
    b53e:	f003 030f 	and.w	r3, r3, #15
    b542:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b544:	4b1f      	ldr	r3, [pc, #124]	; (b5c4 <_usb_d_dev_trans_stop+0x98>)
    b546:	881b      	ldrh	r3, [r3, #0]
    b548:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b54a:	68fb      	ldr	r3, [r7, #12]
    b54c:	7c9b      	ldrb	r3, [r3, #18]
    b54e:	2bff      	cmp	r3, #255	; 0xff
    b550:	d033      	beq.n	b5ba <_usb_d_dev_trans_stop+0x8e>
    b552:	68fb      	ldr	r3, [r7, #12]
    b554:	7cdb      	ldrb	r3, [r3, #19]
    b556:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b55a:	b2db      	uxtb	r3, r3
    b55c:	2b00      	cmp	r3, #0
    b55e:	d02c      	beq.n	b5ba <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b560:	7afb      	ldrb	r3, [r7, #11]
    b562:	2b00      	cmp	r3, #0
    b564:	d006      	beq.n	b574 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b566:	7dfb      	ldrb	r3, [r7, #23]
    b568:	2200      	movs	r2, #0
    b56a:	2101      	movs	r1, #1
    b56c:	4618      	mov	r0, r3
    b56e:	4b16      	ldr	r3, [pc, #88]	; (b5c8 <_usb_d_dev_trans_stop+0x9c>)
    b570:	4798      	blx	r3
    b572:	e005      	b.n	b580 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b574:	7dfb      	ldrb	r3, [r7, #23]
    b576:	2200      	movs	r2, #0
    b578:	2100      	movs	r1, #0
    b57a:	4618      	mov	r0, r3
    b57c:	4b13      	ldr	r3, [pc, #76]	; (b5cc <_usb_d_dev_trans_stop+0xa0>)
    b57e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b580:	7afb      	ldrb	r3, [r7, #11]
    b582:	f107 0218 	add.w	r2, r7, #24
    b586:	4413      	add	r3, r2
    b588:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b58c:	461a      	mov	r2, r3
    b58e:	7dfb      	ldrb	r3, [r7, #23]
    b590:	4611      	mov	r1, r2
    b592:	4618      	mov	r0, r3
    b594:	4b0e      	ldr	r3, [pc, #56]	; (b5d0 <_usb_d_dev_trans_stop+0xa4>)
    b596:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b598:	7afb      	ldrb	r3, [r7, #11]
    b59a:	f107 0218 	add.w	r2, r7, #24
    b59e:	4413      	add	r3, r2
    b5a0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b5a4:	461a      	mov	r2, r3
    b5a6:	7dfb      	ldrb	r3, [r7, #23]
    b5a8:	4611      	mov	r1, r2
    b5aa:	4618      	mov	r0, r3
    b5ac:	4b09      	ldr	r3, [pc, #36]	; (b5d4 <_usb_d_dev_trans_stop+0xa8>)
    b5ae:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b5b0:	6879      	ldr	r1, [r7, #4]
    b5b2:	68f8      	ldr	r0, [r7, #12]
    b5b4:	4b08      	ldr	r3, [pc, #32]	; (b5d8 <_usb_d_dev_trans_stop+0xac>)
    b5b6:	4798      	blx	r3
    b5b8:	e000      	b.n	b5bc <_usb_d_dev_trans_stop+0x90>
		return;
    b5ba:	bf00      	nop
}
    b5bc:	3718      	adds	r7, #24
    b5be:	46bd      	mov	sp, r7
    b5c0:	bd80      	pop	{r7, pc}
    b5c2:	bf00      	nop
    b5c4:	00011254 	.word	0x00011254
    b5c8:	00009de1 	.word	0x00009de1
    b5cc:	00009e39 	.word	0x00009e39
    b5d0:	000098e9 	.word	0x000098e9
    b5d4:	00009939 	.word	0x00009939
    b5d8:	0000b4e5 	.word	0x0000b4e5

0000b5dc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b5dc:	b580      	push	{r7, lr}
    b5de:	b086      	sub	sp, #24
    b5e0:	af00      	add	r7, sp, #0
    b5e2:	4603      	mov	r3, r0
    b5e4:	6039      	str	r1, [r7, #0]
    b5e6:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b5e8:	79fb      	ldrb	r3, [r7, #7]
    b5ea:	f003 030f 	and.w	r3, r3, #15
    b5ee:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b5f0:	7dfb      	ldrb	r3, [r7, #23]
    b5f2:	015b      	lsls	r3, r3, #5
    b5f4:	4a1e      	ldr	r2, [pc, #120]	; (b670 <_usb_d_dev_ep_read_req+0x94>)
    b5f6:	4413      	add	r3, r2
    b5f8:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b5fa:	693b      	ldr	r3, [r7, #16]
    b5fc:	681b      	ldr	r3, [r3, #0]
    b5fe:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b600:	693b      	ldr	r3, [r7, #16]
    b602:	685b      	ldr	r3, [r3, #4]
    b604:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b608:	b29b      	uxth	r3, r3
    b60a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b60c:	7dfb      	ldrb	r3, [r7, #23]
    b60e:	2b04      	cmp	r3, #4
    b610:	d802      	bhi.n	b618 <_usb_d_dev_ep_read_req+0x3c>
    b612:	683b      	ldr	r3, [r7, #0]
    b614:	2b00      	cmp	r3, #0
    b616:	d102      	bne.n	b61e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b618:	f06f 0311 	mvn.w	r3, #17
    b61c:	e023      	b.n	b666 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b61e:	7dfb      	ldrb	r3, [r7, #23]
    b620:	4618      	mov	r0, r3
    b622:	4b14      	ldr	r3, [pc, #80]	; (b674 <_usb_d_dev_ep_read_req+0x98>)
    b624:	4798      	blx	r3
    b626:	4603      	mov	r3, r0
    b628:	f083 0301 	eor.w	r3, r3, #1
    b62c:	b2db      	uxtb	r3, r3
    b62e:	2b00      	cmp	r3, #0
    b630:	d002      	beq.n	b638 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b632:	f06f 0312 	mvn.w	r3, #18
    b636:	e016      	b.n	b666 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b638:	7dfb      	ldrb	r3, [r7, #23]
    b63a:	4618      	mov	r0, r3
    b63c:	4b0e      	ldr	r3, [pc, #56]	; (b678 <_usb_d_dev_ep_read_req+0x9c>)
    b63e:	4798      	blx	r3
    b640:	4603      	mov	r3, r0
    b642:	f083 0301 	eor.w	r3, r3, #1
    b646:	b2db      	uxtb	r3, r3
    b648:	2b00      	cmp	r3, #0
    b64a:	d001      	beq.n	b650 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b64c:	2300      	movs	r3, #0
    b64e:	e00a      	b.n	b666 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b650:	68fb      	ldr	r3, [r7, #12]
    b652:	2208      	movs	r2, #8
    b654:	4619      	mov	r1, r3
    b656:	6838      	ldr	r0, [r7, #0]
    b658:	4b08      	ldr	r3, [pc, #32]	; (b67c <_usb_d_dev_ep_read_req+0xa0>)
    b65a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b65c:	7dfb      	ldrb	r3, [r7, #23]
    b65e:	4618      	mov	r0, r3
    b660:	4b07      	ldr	r3, [pc, #28]	; (b680 <_usb_d_dev_ep_read_req+0xa4>)
    b662:	4798      	blx	r3

	return bytes;
    b664:	897b      	ldrh	r3, [r7, #10]
}
    b666:	4618      	mov	r0, r3
    b668:	3718      	adds	r7, #24
    b66a:	46bd      	mov	sp, r7
    b66c:	bd80      	pop	{r7, pc}
    b66e:	bf00      	nop
    b670:	20001150 	.word	0x20001150
    b674:	00009961 	.word	0x00009961
    b678:	00009b0d 	.word	0x00009b0d
    b67c:	00010a91 	.word	0x00010a91
    b680:	00009b3d 	.word	0x00009b3d

0000b684 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b684:	b580      	push	{r7, lr}
    b686:	b086      	sub	sp, #24
    b688:	af00      	add	r7, sp, #0
    b68a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b68c:	687b      	ldr	r3, [r7, #4]
    b68e:	7a1b      	ldrb	r3, [r3, #8]
    b690:	f003 030f 	and.w	r3, r3, #15
    b694:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b696:	687b      	ldr	r3, [r7, #4]
    b698:	7a1b      	ldrb	r3, [r3, #8]
    b69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b69e:	2b00      	cmp	r3, #0
    b6a0:	bf14      	ite	ne
    b6a2:	2301      	movne	r3, #1
    b6a4:	2300      	moveq	r3, #0
    b6a6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b6a8:	7d7a      	ldrb	r2, [r7, #21]
    b6aa:	7dbb      	ldrb	r3, [r7, #22]
    b6ac:	4611      	mov	r1, r2
    b6ae:	4618      	mov	r0, r3
    b6b0:	4b5f      	ldr	r3, [pc, #380]	; (b830 <_usb_d_dev_ep_trans+0x1ac>)
    b6b2:	4798      	blx	r3
    b6b4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b6b6:	693b      	ldr	r3, [r7, #16]
    b6b8:	8a1b      	ldrh	r3, [r3, #16]
    b6ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b6be:	4293      	cmp	r3, r2
    b6c0:	d004      	beq.n	b6cc <_usb_d_dev_ep_trans+0x48>
    b6c2:	693b      	ldr	r3, [r7, #16]
    b6c4:	8a1b      	ldrh	r3, [r3, #16]
    b6c6:	3b01      	subs	r3, #1
    b6c8:	b29b      	uxth	r3, r3
    b6ca:	e001      	b.n	b6d0 <_usb_d_dev_ep_trans+0x4c>
    b6cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b6d0:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b6d2:	687b      	ldr	r3, [r7, #4]
    b6d4:	685a      	ldr	r2, [r3, #4]
    b6d6:	89fb      	ldrh	r3, [r7, #14]
    b6d8:	4013      	ands	r3, r2
    b6da:	2b00      	cmp	r3, #0
    b6dc:	bf14      	ite	ne
    b6de:	2301      	movne	r3, #1
    b6e0:	2300      	moveq	r3, #0
    b6e2:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b6e4:	2300      	movs	r3, #0
    b6e6:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b6e8:	7dbb      	ldrb	r3, [r7, #22]
    b6ea:	2b04      	cmp	r3, #4
    b6ec:	d902      	bls.n	b6f4 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b6ee:	f06f 0311 	mvn.w	r3, #17
    b6f2:	e098      	b.n	b826 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	681b      	ldr	r3, [r3, #0]
    b6f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b6fc:	d31a      	bcc.n	b734 <_usb_d_dev_ep_trans+0xb0>
    b6fe:	687b      	ldr	r3, [r7, #4]
    b700:	681b      	ldr	r3, [r3, #0]
    b702:	461a      	mov	r2, r3
    b704:	687b      	ldr	r3, [r7, #4]
    b706:	685b      	ldr	r3, [r3, #4]
    b708:	4413      	add	r3, r2
    b70a:	4a4a      	ldr	r2, [pc, #296]	; (b834 <_usb_d_dev_ep_trans+0x1b0>)
    b70c:	4293      	cmp	r3, r2
    b70e:	d811      	bhi.n	b734 <_usb_d_dev_ep_trans+0xb0>
    b710:	687b      	ldr	r3, [r7, #4]
    b712:	681b      	ldr	r3, [r3, #0]
    b714:	f003 0303 	and.w	r3, r3, #3
    b718:	2b00      	cmp	r3, #0
    b71a:	d10b      	bne.n	b734 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b71c:	7d7b      	ldrb	r3, [r7, #21]
    b71e:	f083 0301 	eor.w	r3, r3, #1
    b722:	b2db      	uxtb	r3, r3
    b724:	2b00      	cmp	r3, #0
    b726:	d00e      	beq.n	b746 <_usb_d_dev_ep_trans+0xc2>
    b728:	687b      	ldr	r3, [r7, #4]
    b72a:	685b      	ldr	r3, [r3, #4]
    b72c:	693a      	ldr	r2, [r7, #16]
    b72e:	8a12      	ldrh	r2, [r2, #16]
    b730:	4293      	cmp	r3, r2
    b732:	d208      	bcs.n	b746 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b734:	693b      	ldr	r3, [r7, #16]
    b736:	68db      	ldr	r3, [r3, #12]
    b738:	2b00      	cmp	r3, #0
    b73a:	d102      	bne.n	b742 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b73c:	f06f 0312 	mvn.w	r3, #18
    b740:	e071      	b.n	b826 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b742:	2301      	movs	r3, #1
    b744:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b746:	7d7b      	ldrb	r3, [r7, #21]
    b748:	f083 0301 	eor.w	r3, r3, #1
    b74c:	b2db      	uxtb	r3, r3
    b74e:	2b00      	cmp	r3, #0
    b750:	d009      	beq.n	b766 <_usb_d_dev_ep_trans+0xe2>
    b752:	7b7b      	ldrb	r3, [r7, #13]
    b754:	2b00      	cmp	r3, #0
    b756:	d006      	beq.n	b766 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b758:	693b      	ldr	r3, [r7, #16]
    b75a:	68db      	ldr	r3, [r3, #12]
    b75c:	2b00      	cmp	r3, #0
    b75e:	d102      	bne.n	b766 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b760:	f06f 0311 	mvn.w	r3, #17
    b764:	e05f      	b.n	b826 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b766:	693b      	ldr	r3, [r7, #16]
    b768:	7cdb      	ldrb	r3, [r3, #19]
    b76a:	f003 0308 	and.w	r3, r3, #8
    b76e:	b2db      	uxtb	r3, r3
    b770:	2b00      	cmp	r3, #0
    b772:	d001      	beq.n	b778 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b774:	2302      	movs	r3, #2
    b776:	e056      	b.n	b826 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b778:	f107 0308 	add.w	r3, r7, #8
    b77c:	4618      	mov	r0, r3
    b77e:	4b2e      	ldr	r3, [pc, #184]	; (b838 <_usb_d_dev_ep_trans+0x1b4>)
    b780:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b782:	693b      	ldr	r3, [r7, #16]
    b784:	7cdb      	ldrb	r3, [r3, #19]
    b786:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b78a:	b2db      	uxtb	r3, r3
    b78c:	2b00      	cmp	r3, #0
    b78e:	d006      	beq.n	b79e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b790:	f107 0308 	add.w	r3, r7, #8
    b794:	4618      	mov	r0, r3
    b796:	4b29      	ldr	r3, [pc, #164]	; (b83c <_usb_d_dev_ep_trans+0x1b8>)
    b798:	4798      	blx	r3
		return USB_BUSY;
    b79a:	2301      	movs	r3, #1
    b79c:	e043      	b.n	b826 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b79e:	693a      	ldr	r2, [r7, #16]
    b7a0:	7cd3      	ldrb	r3, [r2, #19]
    b7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7a6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b7a8:	f107 0308 	add.w	r3, r7, #8
    b7ac:	4618      	mov	r0, r3
    b7ae:	4b23      	ldr	r3, [pc, #140]	; (b83c <_usb_d_dev_ep_trans+0x1b8>)
    b7b0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b7b2:	687b      	ldr	r3, [r7, #4]
    b7b4:	681a      	ldr	r2, [r3, #0]
    b7b6:	693b      	ldr	r3, [r7, #16]
    b7b8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b7ba:	687b      	ldr	r3, [r7, #4]
    b7bc:	685a      	ldr	r2, [r3, #4]
    b7be:	693b      	ldr	r3, [r7, #16]
    b7c0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b7c2:	693b      	ldr	r3, [r7, #16]
    b7c4:	2200      	movs	r2, #0
    b7c6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b7c8:	693a      	ldr	r2, [r7, #16]
    b7ca:	7cd3      	ldrb	r3, [r2, #19]
    b7cc:	7d79      	ldrb	r1, [r7, #21]
    b7ce:	f361 13c7 	bfi	r3, r1, #7, #1
    b7d2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b7d4:	693a      	ldr	r2, [r7, #16]
    b7d6:	7cd3      	ldrb	r3, [r2, #19]
    b7d8:	7df9      	ldrb	r1, [r7, #23]
    b7da:	f361 1345 	bfi	r3, r1, #5, #1
    b7de:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b7e0:	687b      	ldr	r3, [r7, #4]
    b7e2:	7a5b      	ldrb	r3, [r3, #9]
    b7e4:	2b00      	cmp	r3, #0
    b7e6:	d007      	beq.n	b7f8 <_usb_d_dev_ep_trans+0x174>
    b7e8:	7b7b      	ldrb	r3, [r7, #13]
    b7ea:	f083 0301 	eor.w	r3, r3, #1
    b7ee:	b2db      	uxtb	r3, r3
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d001      	beq.n	b7f8 <_usb_d_dev_ep_trans+0x174>
    b7f4:	2301      	movs	r3, #1
    b7f6:	e000      	b.n	b7fa <_usb_d_dev_ep_trans+0x176>
    b7f8:	2300      	movs	r3, #0
    b7fa:	b2db      	uxtb	r3, r3
    b7fc:	f003 0301 	and.w	r3, r3, #1
    b800:	b2d9      	uxtb	r1, r3
    b802:	693a      	ldr	r2, [r7, #16]
    b804:	7cd3      	ldrb	r3, [r2, #19]
    b806:	f361 1304 	bfi	r3, r1, #4, #1
    b80a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b80c:	7d7b      	ldrb	r3, [r7, #21]
    b80e:	2b00      	cmp	r3, #0
    b810:	d004      	beq.n	b81c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b812:	2100      	movs	r1, #0
    b814:	6938      	ldr	r0, [r7, #16]
    b816:	4b0a      	ldr	r3, [pc, #40]	; (b840 <_usb_d_dev_ep_trans+0x1bc>)
    b818:	4798      	blx	r3
    b81a:	e003      	b.n	b824 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b81c:	2100      	movs	r1, #0
    b81e:	6938      	ldr	r0, [r7, #16]
    b820:	4b08      	ldr	r3, [pc, #32]	; (b844 <_usb_d_dev_ep_trans+0x1c0>)
    b822:	4798      	blx	r3
	}

	return ERR_NONE;
    b824:	2300      	movs	r3, #0
}
    b826:	4618      	mov	r0, r3
    b828:	3718      	adds	r7, #24
    b82a:	46bd      	mov	sp, r7
    b82c:	bd80      	pop	{r7, pc}
    b82e:	bf00      	nop
    b830:	00009ef5 	.word	0x00009ef5
    b834:	20041fff 	.word	0x20041fff
    b838:	000029dd 	.word	0x000029dd
    b83c:	00002a03 	.word	0x00002a03
    b840:	0000a1bd 	.word	0x0000a1bd
    b844:	0000a3d5 	.word	0x0000a3d5

0000b848 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b848:	b580      	push	{r7, lr}
    b84a:	b084      	sub	sp, #16
    b84c:	af00      	add	r7, sp, #0
    b84e:	4603      	mov	r3, r0
    b850:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b852:	79fb      	ldrb	r3, [r7, #7]
    b854:	f003 030f 	and.w	r3, r3, #15
    b858:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b85a:	79fb      	ldrb	r3, [r7, #7]
    b85c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b860:	2b00      	cmp	r3, #0
    b862:	bf14      	ite	ne
    b864:	2301      	movne	r3, #1
    b866:	2300      	moveq	r3, #0
    b868:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b86a:	7bba      	ldrb	r2, [r7, #14]
    b86c:	7bfb      	ldrb	r3, [r7, #15]
    b86e:	4611      	mov	r1, r2
    b870:	4618      	mov	r0, r3
    b872:	4b08      	ldr	r3, [pc, #32]	; (b894 <_usb_d_dev_ep_abort+0x4c>)
    b874:	4798      	blx	r3
    b876:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b878:	7bfb      	ldrb	r3, [r7, #15]
    b87a:	2b04      	cmp	r3, #4
    b87c:	d806      	bhi.n	b88c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b87e:	7bbb      	ldrb	r3, [r7, #14]
    b880:	2202      	movs	r2, #2
    b882:	4619      	mov	r1, r3
    b884:	68b8      	ldr	r0, [r7, #8]
    b886:	4b04      	ldr	r3, [pc, #16]	; (b898 <_usb_d_dev_ep_abort+0x50>)
    b888:	4798      	blx	r3
    b88a:	e000      	b.n	b88e <_usb_d_dev_ep_abort+0x46>
		return;
    b88c:	bf00      	nop
}
    b88e:	3710      	adds	r7, #16
    b890:	46bd      	mov	sp, r7
    b892:	bd80      	pop	{r7, pc}
    b894:	00009ef5 	.word	0x00009ef5
    b898:	0000b52d 	.word	0x0000b52d

0000b89c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b89c:	b480      	push	{r7}
    b89e:	b085      	sub	sp, #20
    b8a0:	af00      	add	r7, sp, #0
    b8a2:	4603      	mov	r3, r0
    b8a4:	6039      	str	r1, [r7, #0]
    b8a6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b8a8:	683b      	ldr	r3, [r7, #0]
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d001      	beq.n	b8b2 <_usb_d_dev_register_callback+0x16>
    b8ae:	683b      	ldr	r3, [r7, #0]
    b8b0:	e000      	b.n	b8b4 <_usb_d_dev_register_callback+0x18>
    b8b2:	4b0a      	ldr	r3, [pc, #40]	; (b8dc <_usb_d_dev_register_callback+0x40>)
    b8b4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b8b6:	79fb      	ldrb	r3, [r7, #7]
    b8b8:	2b01      	cmp	r3, #1
    b8ba:	d103      	bne.n	b8c4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b8bc:	4a08      	ldr	r2, [pc, #32]	; (b8e0 <_usb_d_dev_register_callback+0x44>)
    b8be:	68fb      	ldr	r3, [r7, #12]
    b8c0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b8c2:	e005      	b.n	b8d0 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b8c4:	79fb      	ldrb	r3, [r7, #7]
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	d102      	bne.n	b8d0 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b8ca:	4a05      	ldr	r2, [pc, #20]	; (b8e0 <_usb_d_dev_register_callback+0x44>)
    b8cc:	68fb      	ldr	r3, [r7, #12]
    b8ce:	6013      	str	r3, [r2, #0]
}
    b8d0:	bf00      	nop
    b8d2:	3714      	adds	r7, #20
    b8d4:	46bd      	mov	sp, r7
    b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8da:	4770      	bx	lr
    b8dc:	0000977d 	.word	0x0000977d
    b8e0:	20001088 	.word	0x20001088

0000b8e4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b8e4:	b480      	push	{r7}
    b8e6:	b085      	sub	sp, #20
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	4603      	mov	r3, r0
    b8ec:	6039      	str	r1, [r7, #0]
    b8ee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b8f0:	683b      	ldr	r3, [r7, #0]
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	d001      	beq.n	b8fa <_usb_d_dev_register_ep_callback+0x16>
    b8f6:	683b      	ldr	r3, [r7, #0]
    b8f8:	e000      	b.n	b8fc <_usb_d_dev_register_ep_callback+0x18>
    b8fa:	4b0e      	ldr	r3, [pc, #56]	; (b934 <_usb_d_dev_register_ep_callback+0x50>)
    b8fc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b8fe:	79fb      	ldrb	r3, [r7, #7]
    b900:	2b00      	cmp	r3, #0
    b902:	d103      	bne.n	b90c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b904:	4a0c      	ldr	r2, [pc, #48]	; (b938 <_usb_d_dev_register_ep_callback+0x54>)
    b906:	68fb      	ldr	r3, [r7, #12]
    b908:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b90a:	e00c      	b.n	b926 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b90c:	79fb      	ldrb	r3, [r7, #7]
    b90e:	2b01      	cmp	r3, #1
    b910:	d103      	bne.n	b91a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b912:	4a09      	ldr	r2, [pc, #36]	; (b938 <_usb_d_dev_register_ep_callback+0x54>)
    b914:	68fb      	ldr	r3, [r7, #12]
    b916:	60d3      	str	r3, [r2, #12]
}
    b918:	e005      	b.n	b926 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b91a:	79fb      	ldrb	r3, [r7, #7]
    b91c:	2b02      	cmp	r3, #2
    b91e:	d102      	bne.n	b926 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b920:	4a05      	ldr	r2, [pc, #20]	; (b938 <_usb_d_dev_register_ep_callback+0x54>)
    b922:	68fb      	ldr	r3, [r7, #12]
    b924:	6113      	str	r3, [r2, #16]
}
    b926:	bf00      	nop
    b928:	3714      	adds	r7, #20
    b92a:	46bd      	mov	sp, r7
    b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b930:	4770      	bx	lr
    b932:	bf00      	nop
    b934:	0000977d 	.word	0x0000977d
    b938:	20001088 	.word	0x20001088

0000b93c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b93c:	b580      	push	{r7, lr}
    b93e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b940:	4b01      	ldr	r3, [pc, #4]	; (b948 <USB_0_Handler+0xc>)
    b942:	4798      	blx	r3
}
    b944:	bf00      	nop
    b946:	bd80      	pop	{r7, pc}
    b948:	0000abad 	.word	0x0000abad

0000b94c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b950:	4b01      	ldr	r3, [pc, #4]	; (b958 <USB_1_Handler+0xc>)
    b952:	4798      	blx	r3
}
    b954:	bf00      	nop
    b956:	bd80      	pop	{r7, pc}
    b958:	0000abad 	.word	0x0000abad

0000b95c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b95c:	b580      	push	{r7, lr}
    b95e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b960:	4b01      	ldr	r3, [pc, #4]	; (b968 <USB_2_Handler+0xc>)
    b962:	4798      	blx	r3
}
    b964:	bf00      	nop
    b966:	bd80      	pop	{r7, pc}
    b968:	0000abad 	.word	0x0000abad

0000b96c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b96c:	b580      	push	{r7, lr}
    b96e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b970:	4b01      	ldr	r3, [pc, #4]	; (b978 <USB_3_Handler+0xc>)
    b972:	4798      	blx	r3
}
    b974:	bf00      	nop
    b976:	bd80      	pop	{r7, pc}
    b978:	0000abad 	.word	0x0000abad

0000b97c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b97c:	b480      	push	{r7}
    b97e:	b083      	sub	sp, #12
    b980:	af00      	add	r7, sp, #0
    b982:	6078      	str	r0, [r7, #4]
    b984:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b986:	bf00      	nop
    b988:	687b      	ldr	r3, [r7, #4]
    b98a:	689a      	ldr	r2, [r3, #8]
    b98c:	683b      	ldr	r3, [r7, #0]
    b98e:	4013      	ands	r3, r2
    b990:	2b00      	cmp	r3, #0
    b992:	d1f9      	bne.n	b988 <hri_wdt_wait_for_sync+0xc>
	};
}
    b994:	bf00      	nop
    b996:	370c      	adds	r7, #12
    b998:	46bd      	mov	sp, r7
    b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b99e:	4770      	bx	lr

0000b9a0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b9a0:	b580      	push	{r7, lr}
    b9a2:	b084      	sub	sp, #16
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b9a8:	210e      	movs	r1, #14
    b9aa:	6878      	ldr	r0, [r7, #4]
    b9ac:	4b0a      	ldr	r3, [pc, #40]	; (b9d8 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b9ae:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b9b0:	687b      	ldr	r3, [r7, #4]
    b9b2:	781b      	ldrb	r3, [r3, #0]
    b9b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b9b6:	7bfb      	ldrb	r3, [r7, #15]
    b9b8:	085b      	lsrs	r3, r3, #1
    b9ba:	b2db      	uxtb	r3, r3
    b9bc:	f003 0301 	and.w	r3, r3, #1
    b9c0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b9c2:	7bfb      	ldrb	r3, [r7, #15]
    b9c4:	2b00      	cmp	r3, #0
    b9c6:	bf14      	ite	ne
    b9c8:	2301      	movne	r3, #1
    b9ca:	2300      	moveq	r3, #0
    b9cc:	b2db      	uxtb	r3, r3
}
    b9ce:	4618      	mov	r0, r3
    b9d0:	3710      	adds	r7, #16
    b9d2:	46bd      	mov	sp, r7
    b9d4:	bd80      	pop	{r7, pc}
    b9d6:	bf00      	nop
    b9d8:	0000b97d 	.word	0x0000b97d

0000b9dc <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b9dc:	b580      	push	{r7, lr}
    b9de:	b082      	sub	sp, #8
    b9e0:	af00      	add	r7, sp, #0
    b9e2:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	781b      	ldrb	r3, [r3, #0]
    b9e8:	b2db      	uxtb	r3, r3
    b9ea:	f023 0304 	bic.w	r3, r3, #4
    b9ee:	b2da      	uxtb	r2, r3
    b9f0:	687b      	ldr	r3, [r7, #4]
    b9f2:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b9f4:	210e      	movs	r1, #14
    b9f6:	6878      	ldr	r0, [r7, #4]
    b9f8:	4b02      	ldr	r3, [pc, #8]	; (ba04 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b9fa:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b9fc:	bf00      	nop
    b9fe:	3708      	adds	r7, #8
    ba00:	46bd      	mov	sp, r7
    ba02:	bd80      	pop	{r7, pc}
    ba04:	0000b97d 	.word	0x0000b97d

0000ba08 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ba08:	b580      	push	{r7, lr}
    ba0a:	b084      	sub	sp, #16
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ba10:	210e      	movs	r1, #14
    ba12:	6878      	ldr	r0, [r7, #4]
    ba14:	4b08      	ldr	r3, [pc, #32]	; (ba38 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ba16:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ba18:	687b      	ldr	r3, [r7, #4]
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ba1e:	7bfb      	ldrb	r3, [r7, #15]
    ba20:	09db      	lsrs	r3, r3, #7
    ba22:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ba24:	7bfb      	ldrb	r3, [r7, #15]
    ba26:	2b00      	cmp	r3, #0
    ba28:	bf14      	ite	ne
    ba2a:	2301      	movne	r3, #1
    ba2c:	2300      	moveq	r3, #0
    ba2e:	b2db      	uxtb	r3, r3
}
    ba30:	4618      	mov	r0, r3
    ba32:	3710      	adds	r7, #16
    ba34:	46bd      	mov	sp, r7
    ba36:	bd80      	pop	{r7, pc}
    ba38:	0000b97d 	.word	0x0000b97d

0000ba3c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ba3c:	b480      	push	{r7}
    ba3e:	b085      	sub	sp, #20
    ba40:	af00      	add	r7, sp, #0
    ba42:	6078      	str	r0, [r7, #4]
    ba44:	460b      	mov	r3, r1
    ba46:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ba48:	687b      	ldr	r3, [r7, #4]
    ba4a:	785b      	ldrb	r3, [r3, #1]
    ba4c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ba4e:	7bfb      	ldrb	r3, [r7, #15]
    ba50:	f023 030f 	bic.w	r3, r3, #15
    ba54:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ba56:	78fb      	ldrb	r3, [r7, #3]
    ba58:	f003 030f 	and.w	r3, r3, #15
    ba5c:	b2da      	uxtb	r2, r3
    ba5e:	7bfb      	ldrb	r3, [r7, #15]
    ba60:	4313      	orrs	r3, r2
    ba62:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ba64:	687b      	ldr	r3, [r7, #4]
    ba66:	7bfa      	ldrb	r2, [r7, #15]
    ba68:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ba6a:	bf00      	nop
    ba6c:	3714      	adds	r7, #20
    ba6e:	46bd      	mov	sp, r7
    ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba74:	4770      	bx	lr
	...

0000ba78 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ba78:	b580      	push	{r7, lr}
    ba7a:	b082      	sub	sp, #8
    ba7c:	af00      	add	r7, sp, #0
    ba7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ba80:	687b      	ldr	r3, [r7, #4]
    ba82:	2b00      	cmp	r3, #0
    ba84:	d005      	beq.n	ba92 <_wdt_init+0x1a>
    ba86:	687b      	ldr	r3, [r7, #4]
    ba88:	681b      	ldr	r3, [r3, #0]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d001      	beq.n	ba92 <_wdt_init+0x1a>
    ba8e:	2301      	movs	r3, #1
    ba90:	e000      	b.n	ba94 <_wdt_init+0x1c>
    ba92:	2300      	movs	r3, #0
    ba94:	f003 0301 	and.w	r3, r3, #1
    ba98:	b2db      	uxtb	r3, r3
    ba9a:	2250      	movs	r2, #80	; 0x50
    ba9c:	4913      	ldr	r1, [pc, #76]	; (baec <_wdt_init+0x74>)
    ba9e:	4618      	mov	r0, r3
    baa0:	4b13      	ldr	r3, [pc, #76]	; (baf0 <_wdt_init+0x78>)
    baa2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    baa4:	687b      	ldr	r3, [r7, #4]
    baa6:	681b      	ldr	r3, [r3, #0]
    baa8:	4618      	mov	r0, r3
    baaa:	4b12      	ldr	r3, [pc, #72]	; (baf4 <_wdt_init+0x7c>)
    baac:	4798      	blx	r3
    baae:	4603      	mov	r3, r0
    bab0:	2b00      	cmp	r3, #0
    bab2:	d107      	bne.n	bac4 <_wdt_init+0x4c>
    bab4:	687b      	ldr	r3, [r7, #4]
    bab6:	681b      	ldr	r3, [r3, #0]
    bab8:	4618      	mov	r0, r3
    baba:	4b0f      	ldr	r3, [pc, #60]	; (baf8 <_wdt_init+0x80>)
    babc:	4798      	blx	r3
    babe:	4603      	mov	r3, r0
    bac0:	2b00      	cmp	r3, #0
    bac2:	d002      	beq.n	baca <_wdt_init+0x52>
		return ERR_DENIED;
    bac4:	f06f 0310 	mvn.w	r3, #16
    bac8:	e00b      	b.n	bae2 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    baca:	687b      	ldr	r3, [r7, #4]
    bacc:	681b      	ldr	r3, [r3, #0]
    bace:	4618      	mov	r0, r3
    bad0:	4b0a      	ldr	r3, [pc, #40]	; (bafc <_wdt_init+0x84>)
    bad2:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    bad4:	687b      	ldr	r3, [r7, #4]
    bad6:	681b      	ldr	r3, [r3, #0]
    bad8:	210b      	movs	r1, #11
    bada:	4618      	mov	r0, r3
    badc:	4b08      	ldr	r3, [pc, #32]	; (bb00 <_wdt_init+0x88>)
    bade:	4798      	blx	r3
	}

	return ERR_NONE;
    bae0:	2300      	movs	r3, #0
}
    bae2:	4618      	mov	r0, r3
    bae4:	3708      	adds	r7, #8
    bae6:	46bd      	mov	sp, r7
    bae8:	bd80      	pop	{r7, pc}
    baea:	bf00      	nop
    baec:	00011258 	.word	0x00011258
    baf0:	0000445d 	.word	0x0000445d
    baf4:	0000ba09 	.word	0x0000ba09
    baf8:	0000b9a1 	.word	0x0000b9a1
    bafc:	0000b9dd 	.word	0x0000b9dd
    bb00:	0000ba3d 	.word	0x0000ba3d

0000bb04 <hri_port_set_DIR_reg>:
{
    bb04:	b480      	push	{r7}
    bb06:	b085      	sub	sp, #20
    bb08:	af00      	add	r7, sp, #0
    bb0a:	60f8      	str	r0, [r7, #12]
    bb0c:	460b      	mov	r3, r1
    bb0e:	607a      	str	r2, [r7, #4]
    bb10:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    bb12:	7afb      	ldrb	r3, [r7, #11]
    bb14:	68fa      	ldr	r2, [r7, #12]
    bb16:	01db      	lsls	r3, r3, #7
    bb18:	4413      	add	r3, r2
    bb1a:	3308      	adds	r3, #8
    bb1c:	687a      	ldr	r2, [r7, #4]
    bb1e:	601a      	str	r2, [r3, #0]
}
    bb20:	bf00      	nop
    bb22:	3714      	adds	r7, #20
    bb24:	46bd      	mov	sp, r7
    bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb2a:	4770      	bx	lr

0000bb2c <hri_port_clear_DIR_reg>:
{
    bb2c:	b480      	push	{r7}
    bb2e:	b085      	sub	sp, #20
    bb30:	af00      	add	r7, sp, #0
    bb32:	60f8      	str	r0, [r7, #12]
    bb34:	460b      	mov	r3, r1
    bb36:	607a      	str	r2, [r7, #4]
    bb38:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    bb3a:	7afb      	ldrb	r3, [r7, #11]
    bb3c:	68fa      	ldr	r2, [r7, #12]
    bb3e:	01db      	lsls	r3, r3, #7
    bb40:	4413      	add	r3, r2
    bb42:	3304      	adds	r3, #4
    bb44:	687a      	ldr	r2, [r7, #4]
    bb46:	601a      	str	r2, [r3, #0]
}
    bb48:	bf00      	nop
    bb4a:	3714      	adds	r7, #20
    bb4c:	46bd      	mov	sp, r7
    bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb52:	4770      	bx	lr

0000bb54 <hri_port_set_OUT_reg>:
{
    bb54:	b480      	push	{r7}
    bb56:	b085      	sub	sp, #20
    bb58:	af00      	add	r7, sp, #0
    bb5a:	60f8      	str	r0, [r7, #12]
    bb5c:	460b      	mov	r3, r1
    bb5e:	607a      	str	r2, [r7, #4]
    bb60:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    bb62:	7afb      	ldrb	r3, [r7, #11]
    bb64:	68fa      	ldr	r2, [r7, #12]
    bb66:	01db      	lsls	r3, r3, #7
    bb68:	4413      	add	r3, r2
    bb6a:	3318      	adds	r3, #24
    bb6c:	687a      	ldr	r2, [r7, #4]
    bb6e:	601a      	str	r2, [r3, #0]
}
    bb70:	bf00      	nop
    bb72:	3714      	adds	r7, #20
    bb74:	46bd      	mov	sp, r7
    bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb7a:	4770      	bx	lr

0000bb7c <hri_port_clear_OUT_reg>:
{
    bb7c:	b480      	push	{r7}
    bb7e:	b085      	sub	sp, #20
    bb80:	af00      	add	r7, sp, #0
    bb82:	60f8      	str	r0, [r7, #12]
    bb84:	460b      	mov	r3, r1
    bb86:	607a      	str	r2, [r7, #4]
    bb88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    bb8a:	7afb      	ldrb	r3, [r7, #11]
    bb8c:	68fa      	ldr	r2, [r7, #12]
    bb8e:	01db      	lsls	r3, r3, #7
    bb90:	4413      	add	r3, r2
    bb92:	3314      	adds	r3, #20
    bb94:	687a      	ldr	r2, [r7, #4]
    bb96:	601a      	str	r2, [r3, #0]
}
    bb98:	bf00      	nop
    bb9a:	3714      	adds	r7, #20
    bb9c:	46bd      	mov	sp, r7
    bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bba2:	4770      	bx	lr

0000bba4 <hri_port_write_PMUX_PMUXE_bf>:
{
    bba4:	b480      	push	{r7}
    bba6:	b085      	sub	sp, #20
    bba8:	af00      	add	r7, sp, #0
    bbaa:	6078      	str	r0, [r7, #4]
    bbac:	4608      	mov	r0, r1
    bbae:	4611      	mov	r1, r2
    bbb0:	461a      	mov	r2, r3
    bbb2:	4603      	mov	r3, r0
    bbb4:	70fb      	strb	r3, [r7, #3]
    bbb6:	460b      	mov	r3, r1
    bbb8:	70bb      	strb	r3, [r7, #2]
    bbba:	4613      	mov	r3, r2
    bbbc:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bbbe:	78fa      	ldrb	r2, [r7, #3]
    bbc0:	78bb      	ldrb	r3, [r7, #2]
    bbc2:	6879      	ldr	r1, [r7, #4]
    bbc4:	01d2      	lsls	r2, r2, #7
    bbc6:	440a      	add	r2, r1
    bbc8:	4413      	add	r3, r2
    bbca:	3330      	adds	r3, #48	; 0x30
    bbcc:	781b      	ldrb	r3, [r3, #0]
    bbce:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    bbd0:	7bfb      	ldrb	r3, [r7, #15]
    bbd2:	f023 030f 	bic.w	r3, r3, #15
    bbd6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    bbd8:	787b      	ldrb	r3, [r7, #1]
    bbda:	f003 030f 	and.w	r3, r3, #15
    bbde:	b2da      	uxtb	r2, r3
    bbe0:	7bfb      	ldrb	r3, [r7, #15]
    bbe2:	4313      	orrs	r3, r2
    bbe4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bbe6:	78fa      	ldrb	r2, [r7, #3]
    bbe8:	78bb      	ldrb	r3, [r7, #2]
    bbea:	6879      	ldr	r1, [r7, #4]
    bbec:	01d2      	lsls	r2, r2, #7
    bbee:	440a      	add	r2, r1
    bbf0:	4413      	add	r3, r2
    bbf2:	3330      	adds	r3, #48	; 0x30
    bbf4:	7bfa      	ldrb	r2, [r7, #15]
    bbf6:	701a      	strb	r2, [r3, #0]
}
    bbf8:	bf00      	nop
    bbfa:	3714      	adds	r7, #20
    bbfc:	46bd      	mov	sp, r7
    bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc02:	4770      	bx	lr

0000bc04 <hri_port_write_PMUX_PMUXO_bf>:
{
    bc04:	b480      	push	{r7}
    bc06:	b085      	sub	sp, #20
    bc08:	af00      	add	r7, sp, #0
    bc0a:	6078      	str	r0, [r7, #4]
    bc0c:	4608      	mov	r0, r1
    bc0e:	4611      	mov	r1, r2
    bc10:	461a      	mov	r2, r3
    bc12:	4603      	mov	r3, r0
    bc14:	70fb      	strb	r3, [r7, #3]
    bc16:	460b      	mov	r3, r1
    bc18:	70bb      	strb	r3, [r7, #2]
    bc1a:	4613      	mov	r3, r2
    bc1c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bc1e:	78fa      	ldrb	r2, [r7, #3]
    bc20:	78bb      	ldrb	r3, [r7, #2]
    bc22:	6879      	ldr	r1, [r7, #4]
    bc24:	01d2      	lsls	r2, r2, #7
    bc26:	440a      	add	r2, r1
    bc28:	4413      	add	r3, r2
    bc2a:	3330      	adds	r3, #48	; 0x30
    bc2c:	781b      	ldrb	r3, [r3, #0]
    bc2e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    bc30:	7bfb      	ldrb	r3, [r7, #15]
    bc32:	f003 030f 	and.w	r3, r3, #15
    bc36:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    bc38:	787b      	ldrb	r3, [r7, #1]
    bc3a:	011b      	lsls	r3, r3, #4
    bc3c:	b2da      	uxtb	r2, r3
    bc3e:	7bfb      	ldrb	r3, [r7, #15]
    bc40:	4313      	orrs	r3, r2
    bc42:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bc44:	78fa      	ldrb	r2, [r7, #3]
    bc46:	78bb      	ldrb	r3, [r7, #2]
    bc48:	6879      	ldr	r1, [r7, #4]
    bc4a:	01d2      	lsls	r2, r2, #7
    bc4c:	440a      	add	r2, r1
    bc4e:	4413      	add	r3, r2
    bc50:	3330      	adds	r3, #48	; 0x30
    bc52:	7bfa      	ldrb	r2, [r7, #15]
    bc54:	701a      	strb	r2, [r3, #0]
}
    bc56:	bf00      	nop
    bc58:	3714      	adds	r7, #20
    bc5a:	46bd      	mov	sp, r7
    bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc60:	4770      	bx	lr

0000bc62 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    bc62:	b480      	push	{r7}
    bc64:	b085      	sub	sp, #20
    bc66:	af00      	add	r7, sp, #0
    bc68:	6078      	str	r0, [r7, #4]
    bc6a:	4608      	mov	r0, r1
    bc6c:	4611      	mov	r1, r2
    bc6e:	461a      	mov	r2, r3
    bc70:	4603      	mov	r3, r0
    bc72:	70fb      	strb	r3, [r7, #3]
    bc74:	460b      	mov	r3, r1
    bc76:	70bb      	strb	r3, [r7, #2]
    bc78:	4613      	mov	r3, r2
    bc7a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    bc7c:	78fa      	ldrb	r2, [r7, #3]
    bc7e:	78bb      	ldrb	r3, [r7, #2]
    bc80:	6879      	ldr	r1, [r7, #4]
    bc82:	01d2      	lsls	r2, r2, #7
    bc84:	440a      	add	r2, r1
    bc86:	4413      	add	r3, r2
    bc88:	3340      	adds	r3, #64	; 0x40
    bc8a:	781b      	ldrb	r3, [r3, #0]
    bc8c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    bc8e:	7bfb      	ldrb	r3, [r7, #15]
    bc90:	f023 0301 	bic.w	r3, r3, #1
    bc94:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    bc96:	787a      	ldrb	r2, [r7, #1]
    bc98:	7bfb      	ldrb	r3, [r7, #15]
    bc9a:	4313      	orrs	r3, r2
    bc9c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    bc9e:	78fa      	ldrb	r2, [r7, #3]
    bca0:	78bb      	ldrb	r3, [r7, #2]
    bca2:	6879      	ldr	r1, [r7, #4]
    bca4:	01d2      	lsls	r2, r2, #7
    bca6:	440a      	add	r2, r1
    bca8:	4413      	add	r3, r2
    bcaa:	3340      	adds	r3, #64	; 0x40
    bcac:	7bfa      	ldrb	r2, [r7, #15]
    bcae:	701a      	strb	r2, [r3, #0]
}
    bcb0:	bf00      	nop
    bcb2:	3714      	adds	r7, #20
    bcb4:	46bd      	mov	sp, r7
    bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcba:	4770      	bx	lr

0000bcbc <hri_port_write_WRCONFIG_reg>:
{
    bcbc:	b480      	push	{r7}
    bcbe:	b085      	sub	sp, #20
    bcc0:	af00      	add	r7, sp, #0
    bcc2:	60f8      	str	r0, [r7, #12]
    bcc4:	460b      	mov	r3, r1
    bcc6:	607a      	str	r2, [r7, #4]
    bcc8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    bcca:	7afb      	ldrb	r3, [r7, #11]
    bccc:	68fa      	ldr	r2, [r7, #12]
    bcce:	01db      	lsls	r3, r3, #7
    bcd0:	4413      	add	r3, r2
    bcd2:	3328      	adds	r3, #40	; 0x28
    bcd4:	687a      	ldr	r2, [r7, #4]
    bcd6:	601a      	str	r2, [r3, #0]
}
    bcd8:	bf00      	nop
    bcda:	3714      	adds	r7, #20
    bcdc:	46bd      	mov	sp, r7
    bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
    bce2:	4770      	bx	lr

0000bce4 <_gpio_set_direction>:
{
    bce4:	b580      	push	{r7, lr}
    bce6:	b082      	sub	sp, #8
    bce8:	af00      	add	r7, sp, #0
    bcea:	4603      	mov	r3, r0
    bcec:	6039      	str	r1, [r7, #0]
    bcee:	71fb      	strb	r3, [r7, #7]
    bcf0:	4613      	mov	r3, r2
    bcf2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    bcf4:	79bb      	ldrb	r3, [r7, #6]
    bcf6:	2b01      	cmp	r3, #1
    bcf8:	d01c      	beq.n	bd34 <_gpio_set_direction+0x50>
    bcfa:	2b02      	cmp	r3, #2
    bcfc:	d037      	beq.n	bd6e <_gpio_set_direction+0x8a>
    bcfe:	2b00      	cmp	r3, #0
    bd00:	d14e      	bne.n	bda0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bd02:	79fb      	ldrb	r3, [r7, #7]
    bd04:	683a      	ldr	r2, [r7, #0]
    bd06:	4619      	mov	r1, r3
    bd08:	482a      	ldr	r0, [pc, #168]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd0a:	4b2b      	ldr	r3, [pc, #172]	; (bdb8 <_gpio_set_direction+0xd4>)
    bd0c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bd0e:	683b      	ldr	r3, [r7, #0]
    bd10:	b29b      	uxth	r3, r3
    bd12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bd16:	79fb      	ldrb	r3, [r7, #7]
    bd18:	4619      	mov	r1, r3
    bd1a:	4826      	ldr	r0, [pc, #152]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd1c:	4b27      	ldr	r3, [pc, #156]	; (bdbc <_gpio_set_direction+0xd8>)
    bd1e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bd20:	683b      	ldr	r3, [r7, #0]
    bd22:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bd24:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bd28:	79fb      	ldrb	r3, [r7, #7]
    bd2a:	4619      	mov	r1, r3
    bd2c:	4821      	ldr	r0, [pc, #132]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd2e:	4b23      	ldr	r3, [pc, #140]	; (bdbc <_gpio_set_direction+0xd8>)
    bd30:	4798      	blx	r3
		break;
    bd32:	e03a      	b.n	bdaa <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bd34:	79fb      	ldrb	r3, [r7, #7]
    bd36:	683a      	ldr	r2, [r7, #0]
    bd38:	4619      	mov	r1, r3
    bd3a:	481e      	ldr	r0, [pc, #120]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd3c:	4b1e      	ldr	r3, [pc, #120]	; (bdb8 <_gpio_set_direction+0xd4>)
    bd3e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    bd40:	683b      	ldr	r3, [r7, #0]
    bd42:	b29b      	uxth	r3, r3
    bd44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    bd48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bd4c:	79f9      	ldrb	r1, [r7, #7]
    bd4e:	461a      	mov	r2, r3
    bd50:	4818      	ldr	r0, [pc, #96]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd52:	4b1a      	ldr	r3, [pc, #104]	; (bdbc <_gpio_set_direction+0xd8>)
    bd54:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    bd56:	683b      	ldr	r3, [r7, #0]
    bd58:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    bd5a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    bd5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bd62:	79f9      	ldrb	r1, [r7, #7]
    bd64:	461a      	mov	r2, r3
    bd66:	4813      	ldr	r0, [pc, #76]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd68:	4b14      	ldr	r3, [pc, #80]	; (bdbc <_gpio_set_direction+0xd8>)
    bd6a:	4798      	blx	r3
		break;
    bd6c:	e01d      	b.n	bdaa <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    bd6e:	79fb      	ldrb	r3, [r7, #7]
    bd70:	683a      	ldr	r2, [r7, #0]
    bd72:	4619      	mov	r1, r3
    bd74:	480f      	ldr	r0, [pc, #60]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd76:	4b12      	ldr	r3, [pc, #72]	; (bdc0 <_gpio_set_direction+0xdc>)
    bd78:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bd7a:	683b      	ldr	r3, [r7, #0]
    bd7c:	b29b      	uxth	r3, r3
    bd7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bd82:	79fb      	ldrb	r3, [r7, #7]
    bd84:	4619      	mov	r1, r3
    bd86:	480b      	ldr	r0, [pc, #44]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd88:	4b0c      	ldr	r3, [pc, #48]	; (bdbc <_gpio_set_direction+0xd8>)
    bd8a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bd8c:	683b      	ldr	r3, [r7, #0]
    bd8e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bd90:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bd94:	79fb      	ldrb	r3, [r7, #7]
    bd96:	4619      	mov	r1, r3
    bd98:	4806      	ldr	r0, [pc, #24]	; (bdb4 <_gpio_set_direction+0xd0>)
    bd9a:	4b08      	ldr	r3, [pc, #32]	; (bdbc <_gpio_set_direction+0xd8>)
    bd9c:	4798      	blx	r3
		break;
    bd9e:	e004      	b.n	bdaa <_gpio_set_direction+0xc6>
		ASSERT(false);
    bda0:	2246      	movs	r2, #70	; 0x46
    bda2:	4908      	ldr	r1, [pc, #32]	; (bdc4 <_gpio_set_direction+0xe0>)
    bda4:	2000      	movs	r0, #0
    bda6:	4b08      	ldr	r3, [pc, #32]	; (bdc8 <_gpio_set_direction+0xe4>)
    bda8:	4798      	blx	r3
}
    bdaa:	bf00      	nop
    bdac:	3708      	adds	r7, #8
    bdae:	46bd      	mov	sp, r7
    bdb0:	bd80      	pop	{r7, pc}
    bdb2:	bf00      	nop
    bdb4:	41008000 	.word	0x41008000
    bdb8:	0000bb2d 	.word	0x0000bb2d
    bdbc:	0000bcbd 	.word	0x0000bcbd
    bdc0:	0000bb05 	.word	0x0000bb05
    bdc4:	00011270 	.word	0x00011270
    bdc8:	0000445d 	.word	0x0000445d

0000bdcc <_gpio_set_level>:
{
    bdcc:	b580      	push	{r7, lr}
    bdce:	b082      	sub	sp, #8
    bdd0:	af00      	add	r7, sp, #0
    bdd2:	4603      	mov	r3, r0
    bdd4:	6039      	str	r1, [r7, #0]
    bdd6:	71fb      	strb	r3, [r7, #7]
    bdd8:	4613      	mov	r3, r2
    bdda:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bddc:	79bb      	ldrb	r3, [r7, #6]
    bdde:	2b00      	cmp	r3, #0
    bde0:	d006      	beq.n	bdf0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bde2:	79fb      	ldrb	r3, [r7, #7]
    bde4:	683a      	ldr	r2, [r7, #0]
    bde6:	4619      	mov	r1, r3
    bde8:	4806      	ldr	r0, [pc, #24]	; (be04 <_gpio_set_level+0x38>)
    bdea:	4b07      	ldr	r3, [pc, #28]	; (be08 <_gpio_set_level+0x3c>)
    bdec:	4798      	blx	r3
}
    bdee:	e005      	b.n	bdfc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bdf0:	79fb      	ldrb	r3, [r7, #7]
    bdf2:	683a      	ldr	r2, [r7, #0]
    bdf4:	4619      	mov	r1, r3
    bdf6:	4803      	ldr	r0, [pc, #12]	; (be04 <_gpio_set_level+0x38>)
    bdf8:	4b04      	ldr	r3, [pc, #16]	; (be0c <_gpio_set_level+0x40>)
    bdfa:	4798      	blx	r3
}
    bdfc:	bf00      	nop
    bdfe:	3708      	adds	r7, #8
    be00:	46bd      	mov	sp, r7
    be02:	bd80      	pop	{r7, pc}
    be04:	41008000 	.word	0x41008000
    be08:	0000bb55 	.word	0x0000bb55
    be0c:	0000bb7d 	.word	0x0000bb7d

0000be10 <_gpio_set_pin_function>:
{
    be10:	b590      	push	{r4, r7, lr}
    be12:	b085      	sub	sp, #20
    be14:	af00      	add	r7, sp, #0
    be16:	6078      	str	r0, [r7, #4]
    be18:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    be1a:	687b      	ldr	r3, [r7, #4]
    be1c:	095b      	lsrs	r3, r3, #5
    be1e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    be20:	687b      	ldr	r3, [r7, #4]
    be22:	b2db      	uxtb	r3, r3
    be24:	f003 031f 	and.w	r3, r3, #31
    be28:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    be2a:	683b      	ldr	r3, [r7, #0]
    be2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    be30:	d106      	bne.n	be40 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    be32:	7bba      	ldrb	r2, [r7, #14]
    be34:	7bf9      	ldrb	r1, [r7, #15]
    be36:	2300      	movs	r3, #0
    be38:	4812      	ldr	r0, [pc, #72]	; (be84 <_gpio_set_pin_function+0x74>)
    be3a:	4c13      	ldr	r4, [pc, #76]	; (be88 <_gpio_set_pin_function+0x78>)
    be3c:	47a0      	blx	r4
}
    be3e:	e01d      	b.n	be7c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    be40:	7bba      	ldrb	r2, [r7, #14]
    be42:	7bf9      	ldrb	r1, [r7, #15]
    be44:	2301      	movs	r3, #1
    be46:	480f      	ldr	r0, [pc, #60]	; (be84 <_gpio_set_pin_function+0x74>)
    be48:	4c0f      	ldr	r4, [pc, #60]	; (be88 <_gpio_set_pin_function+0x78>)
    be4a:	47a0      	blx	r4
		if (pin & 1) {
    be4c:	7bbb      	ldrb	r3, [r7, #14]
    be4e:	f003 0301 	and.w	r3, r3, #1
    be52:	2b00      	cmp	r3, #0
    be54:	d009      	beq.n	be6a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    be56:	7bbb      	ldrb	r3, [r7, #14]
    be58:	085b      	lsrs	r3, r3, #1
    be5a:	b2da      	uxtb	r2, r3
    be5c:	683b      	ldr	r3, [r7, #0]
    be5e:	b2db      	uxtb	r3, r3
    be60:	7bf9      	ldrb	r1, [r7, #15]
    be62:	4808      	ldr	r0, [pc, #32]	; (be84 <_gpio_set_pin_function+0x74>)
    be64:	4c09      	ldr	r4, [pc, #36]	; (be8c <_gpio_set_pin_function+0x7c>)
    be66:	47a0      	blx	r4
}
    be68:	e008      	b.n	be7c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    be6a:	7bbb      	ldrb	r3, [r7, #14]
    be6c:	085b      	lsrs	r3, r3, #1
    be6e:	b2da      	uxtb	r2, r3
    be70:	683b      	ldr	r3, [r7, #0]
    be72:	b2db      	uxtb	r3, r3
    be74:	7bf9      	ldrb	r1, [r7, #15]
    be76:	4803      	ldr	r0, [pc, #12]	; (be84 <_gpio_set_pin_function+0x74>)
    be78:	4c05      	ldr	r4, [pc, #20]	; (be90 <_gpio_set_pin_function+0x80>)
    be7a:	47a0      	blx	r4
}
    be7c:	bf00      	nop
    be7e:	3714      	adds	r7, #20
    be80:	46bd      	mov	sp, r7
    be82:	bd90      	pop	{r4, r7, pc}
    be84:	41008000 	.word	0x41008000
    be88:	0000bc63 	.word	0x0000bc63
    be8c:	0000bc05 	.word	0x0000bc05
    be90:	0000bba5 	.word	0x0000bba5

0000be94 <gpio_set_pin_function>:
{
    be94:	b580      	push	{r7, lr}
    be96:	b082      	sub	sp, #8
    be98:	af00      	add	r7, sp, #0
    be9a:	6078      	str	r0, [r7, #4]
    be9c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    be9e:	6839      	ldr	r1, [r7, #0]
    bea0:	6878      	ldr	r0, [r7, #4]
    bea2:	4b03      	ldr	r3, [pc, #12]	; (beb0 <gpio_set_pin_function+0x1c>)
    bea4:	4798      	blx	r3
}
    bea6:	bf00      	nop
    bea8:	3708      	adds	r7, #8
    beaa:	46bd      	mov	sp, r7
    beac:	bd80      	pop	{r7, pc}
    beae:	bf00      	nop
    beb0:	0000be11 	.word	0x0000be11

0000beb4 <gpio_set_pin_direction>:
{
    beb4:	b580      	push	{r7, lr}
    beb6:	b082      	sub	sp, #8
    beb8:	af00      	add	r7, sp, #0
    beba:	4603      	mov	r3, r0
    bebc:	460a      	mov	r2, r1
    bebe:	71fb      	strb	r3, [r7, #7]
    bec0:	4613      	mov	r3, r2
    bec2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bec4:	79fb      	ldrb	r3, [r7, #7]
    bec6:	095b      	lsrs	r3, r3, #5
    bec8:	b2d8      	uxtb	r0, r3
    beca:	79fb      	ldrb	r3, [r7, #7]
    becc:	f003 031f 	and.w	r3, r3, #31
    bed0:	2201      	movs	r2, #1
    bed2:	fa02 f303 	lsl.w	r3, r2, r3
    bed6:	79ba      	ldrb	r2, [r7, #6]
    bed8:	4619      	mov	r1, r3
    beda:	4b03      	ldr	r3, [pc, #12]	; (bee8 <gpio_set_pin_direction+0x34>)
    bedc:	4798      	blx	r3
}
    bede:	bf00      	nop
    bee0:	3708      	adds	r7, #8
    bee2:	46bd      	mov	sp, r7
    bee4:	bd80      	pop	{r7, pc}
    bee6:	bf00      	nop
    bee8:	0000bce5 	.word	0x0000bce5

0000beec <gpio_set_pin_level>:
{
    beec:	b580      	push	{r7, lr}
    beee:	b082      	sub	sp, #8
    bef0:	af00      	add	r7, sp, #0
    bef2:	4603      	mov	r3, r0
    bef4:	460a      	mov	r2, r1
    bef6:	71fb      	strb	r3, [r7, #7]
    bef8:	4613      	mov	r3, r2
    befa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    befc:	79fb      	ldrb	r3, [r7, #7]
    befe:	095b      	lsrs	r3, r3, #5
    bf00:	b2d8      	uxtb	r0, r3
    bf02:	79fb      	ldrb	r3, [r7, #7]
    bf04:	f003 031f 	and.w	r3, r3, #31
    bf08:	2201      	movs	r2, #1
    bf0a:	fa02 f303 	lsl.w	r3, r2, r3
    bf0e:	79ba      	ldrb	r2, [r7, #6]
    bf10:	4619      	mov	r1, r3
    bf12:	4b03      	ldr	r3, [pc, #12]	; (bf20 <gpio_set_pin_level+0x34>)
    bf14:	4798      	blx	r3
}
    bf16:	bf00      	nop
    bf18:	3708      	adds	r7, #8
    bf1a:	46bd      	mov	sp, r7
    bf1c:	bd80      	pop	{r7, pc}
    bf1e:	bf00      	nop
    bf20:	0000bdcd 	.word	0x0000bdcd

0000bf24 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bf24:	b580      	push	{r7, lr}
    bf26:	b082      	sub	sp, #8
    bf28:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bf2a:	2100      	movs	r1, #0
    bf2c:	2008      	movs	r0, #8
    bf2e:	4b24      	ldr	r3, [pc, #144]	; (bfc0 <QSPI_N25Q256_exit_xip+0x9c>)
    bf30:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bf32:	2100      	movs	r1, #0
    bf34:	202b      	movs	r0, #43	; 0x2b
    bf36:	4b22      	ldr	r3, [pc, #136]	; (bfc0 <QSPI_N25Q256_exit_xip+0x9c>)
    bf38:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bf3a:	2100      	movs	r1, #0
    bf3c:	202a      	movs	r0, #42	; 0x2a
    bf3e:	4b20      	ldr	r3, [pc, #128]	; (bfc0 <QSPI_N25Q256_exit_xip+0x9c>)
    bf40:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bf42:	2102      	movs	r1, #2
    bf44:	2008      	movs	r0, #8
    bf46:	4b1f      	ldr	r3, [pc, #124]	; (bfc4 <QSPI_N25Q256_exit_xip+0xa0>)
    bf48:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bf4a:	2102      	movs	r1, #2
    bf4c:	202b      	movs	r0, #43	; 0x2b
    bf4e:	4b1d      	ldr	r3, [pc, #116]	; (bfc4 <QSPI_N25Q256_exit_xip+0xa0>)
    bf50:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bf52:	2102      	movs	r1, #2
    bf54:	202a      	movs	r0, #42	; 0x2a
    bf56:	4b1b      	ldr	r3, [pc, #108]	; (bfc4 <QSPI_N25Q256_exit_xip+0xa0>)
    bf58:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bf5a:	2101      	movs	r1, #1
    bf5c:	2008      	movs	r0, #8
    bf5e:	4b1a      	ldr	r3, [pc, #104]	; (bfc8 <QSPI_N25Q256_exit_xip+0xa4>)
    bf60:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bf62:	2100      	movs	r1, #0
    bf64:	202b      	movs	r0, #43	; 0x2b
    bf66:	4b18      	ldr	r3, [pc, #96]	; (bfc8 <QSPI_N25Q256_exit_xip+0xa4>)
    bf68:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bf6a:	2100      	movs	r1, #0
    bf6c:	202a      	movs	r0, #42	; 0x2a
    bf6e:	4b16      	ldr	r3, [pc, #88]	; (bfc8 <QSPI_N25Q256_exit_xip+0xa4>)
    bf70:	4798      	blx	r3

	delay_us(1);
    bf72:	2001      	movs	r0, #1
    bf74:	4b15      	ldr	r3, [pc, #84]	; (bfcc <QSPI_N25Q256_exit_xip+0xa8>)
    bf76:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bf78:	2300      	movs	r3, #0
    bf7a:	607b      	str	r3, [r7, #4]
    bf7c:	e010      	b.n	bfa0 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bf7e:	2101      	movs	r1, #1
    bf80:	202a      	movs	r0, #42	; 0x2a
    bf82:	4b11      	ldr	r3, [pc, #68]	; (bfc8 <QSPI_N25Q256_exit_xip+0xa4>)
    bf84:	4798      	blx	r3
		delay_us(1);
    bf86:	2001      	movs	r0, #1
    bf88:	4b10      	ldr	r3, [pc, #64]	; (bfcc <QSPI_N25Q256_exit_xip+0xa8>)
    bf8a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bf8c:	2100      	movs	r1, #0
    bf8e:	202a      	movs	r0, #42	; 0x2a
    bf90:	4b0d      	ldr	r3, [pc, #52]	; (bfc8 <QSPI_N25Q256_exit_xip+0xa4>)
    bf92:	4798      	blx	r3
		delay_us(1);
    bf94:	2001      	movs	r0, #1
    bf96:	4b0d      	ldr	r3, [pc, #52]	; (bfcc <QSPI_N25Q256_exit_xip+0xa8>)
    bf98:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bf9a:	687b      	ldr	r3, [r7, #4]
    bf9c:	3301      	adds	r3, #1
    bf9e:	607b      	str	r3, [r7, #4]
    bfa0:	687b      	ldr	r3, [r7, #4]
    bfa2:	2b06      	cmp	r3, #6
    bfa4:	ddeb      	ble.n	bf7e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bfa6:	2101      	movs	r1, #1
    bfa8:	202b      	movs	r0, #43	; 0x2b
    bfaa:	4b07      	ldr	r3, [pc, #28]	; (bfc8 <QSPI_N25Q256_exit_xip+0xa4>)
    bfac:	4798      	blx	r3
	delay_us(1);
    bfae:	2001      	movs	r0, #1
    bfb0:	4b06      	ldr	r3, [pc, #24]	; (bfcc <QSPI_N25Q256_exit_xip+0xa8>)
    bfb2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bfb4:	4b06      	ldr	r3, [pc, #24]	; (bfd0 <QSPI_N25Q256_exit_xip+0xac>)
    bfb6:	4798      	blx	r3
}
    bfb8:	bf00      	nop
    bfba:	3708      	adds	r7, #8
    bfbc:	46bd      	mov	sp, r7
    bfbe:	bd80      	pop	{r7, pc}
    bfc0:	0000be95 	.word	0x0000be95
    bfc4:	0000beb5 	.word	0x0000beb5
    bfc8:	0000beed 	.word	0x0000beed
    bfcc:	00002e39 	.word	0x00002e39
    bfd0:	00001ee1 	.word	0x00001ee1

0000bfd4 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bfd4:	b598      	push	{r3, r4, r7, lr}
    bfd6:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bfd8:	4806      	ldr	r0, [pc, #24]	; (bff4 <spi_nor_flash_init+0x20>)
    bfda:	4b07      	ldr	r3, [pc, #28]	; (bff8 <spi_nor_flash_init+0x24>)
    bfdc:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bfde:	2300      	movs	r3, #0
    bfe0:	4a06      	ldr	r2, [pc, #24]	; (bffc <spi_nor_flash_init+0x28>)
    bfe2:	4904      	ldr	r1, [pc, #16]	; (bff4 <spi_nor_flash_init+0x20>)
    bfe4:	4806      	ldr	r0, [pc, #24]	; (c000 <spi_nor_flash_init+0x2c>)
    bfe6:	4c07      	ldr	r4, [pc, #28]	; (c004 <spi_nor_flash_init+0x30>)
    bfe8:	47a0      	blx	r4
    bfea:	4602      	mov	r2, r0
    bfec:	4b06      	ldr	r3, [pc, #24]	; (c008 <spi_nor_flash_init+0x34>)
    bfee:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bff0:	bf00      	nop
    bff2:	bd98      	pop	{r3, r4, r7, pc}
    bff4:	2000aad0 	.word	0x2000aad0
    bff8:	000033c5 	.word	0x000033c5
    bffc:	0000bf25 	.word	0x0000bf25
    c000:	200011f0 	.word	0x200011f0
    c004:	0000c3f5 	.word	0x0000c3f5
    c008:	2000acd0 	.word	0x2000acd0

0000c00c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    c00c:	b580      	push	{r7, lr}
    c00e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    c010:	4805      	ldr	r0, [pc, #20]	; (c028 <cdc_device_acm_init+0x1c>)
    c012:	4b06      	ldr	r3, [pc, #24]	; (c02c <cdc_device_acm_init+0x20>)
    c014:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    c016:	4b06      	ldr	r3, [pc, #24]	; (c030 <cdc_device_acm_init+0x24>)
    c018:	4798      	blx	r3

	usbdc_start(single_desc);
    c01a:	4806      	ldr	r0, [pc, #24]	; (c034 <cdc_device_acm_init+0x28>)
    c01c:	4b06      	ldr	r3, [pc, #24]	; (c038 <cdc_device_acm_init+0x2c>)
    c01e:	4798      	blx	r3
	usbdc_attach();
    c020:	4b06      	ldr	r3, [pc, #24]	; (c03c <cdc_device_acm_init+0x30>)
    c022:	4798      	blx	r3
}
    c024:	bf00      	nop
    c026:	bd80      	pop	{r7, pc}
    c028:	20001240 	.word	0x20001240
    c02c:	0000db1d 	.word	0x0000db1d
    c030:	0000cd95 	.word	0x0000cd95
    c034:	20000200 	.word	0x20000200
    c038:	0000dbb9 	.word	0x0000dbb9
    c03c:	0000dc09 	.word	0x0000dc09

0000c040 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    c040:	b580      	push	{r7, lr}
    c042:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    c044:	4b01      	ldr	r3, [pc, #4]	; (c04c <usb_init+0xc>)
    c046:	4798      	blx	r3
}
    c048:	bf00      	nop
    c04a:	bd80      	pop	{r7, pc}
    c04c:	0000c00d 	.word	0x0000c00d

0000c050 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c050:	b580      	push	{r7, lr}
    c052:	b08c      	sub	sp, #48	; 0x30
    c054:	af00      	add	r7, sp, #0
    c056:	6078      	str	r0, [r7, #4]
    c058:	460b      	mov	r3, r1
    c05a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c05c:	687b      	ldr	r3, [r7, #4]
    c05e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c060:	687b      	ldr	r3, [r7, #4]
    c062:	681b      	ldr	r3, [r3, #0]
    c064:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c066:	f107 030c 	add.w	r3, r7, #12
    c06a:	2200      	movs	r2, #0
    c06c:	601a      	str	r2, [r3, #0]
    c06e:	605a      	str	r2, [r3, #4]
    c070:	609a      	str	r2, [r3, #8]
    c072:	60da      	str	r2, [r3, #12]
    c074:	611a      	str	r2, [r3, #16]
    c076:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c07a:	7b1b      	ldrb	r3, [r3, #12]
    c07c:	2b00      	cmp	r3, #0
    c07e:	d001      	beq.n	c084 <n25q256a_xip_confirm+0x34>
    c080:	2206      	movs	r2, #6
    c082:	e000      	b.n	c086 <n25q256a_xip_confirm+0x36>
    c084:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c086:	7b3b      	ldrb	r3, [r7, #12]
    c088:	f362 0302 	bfi	r3, r2, #0, #3
    c08c:	733b      	strb	r3, [r7, #12]
    c08e:	7b3b      	ldrb	r3, [r7, #12]
    c090:	f043 0310 	orr.w	r3, r3, #16
    c094:	733b      	strb	r3, [r7, #12]
    c096:	7b3b      	ldrb	r3, [r7, #12]
    c098:	f043 0320 	orr.w	r3, r3, #32
    c09c:	733b      	strb	r3, [r7, #12]
    c09e:	7b3b      	ldrb	r3, [r7, #12]
    c0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c0a4:	733b      	strb	r3, [r7, #12]
    c0a6:	7b3b      	ldrb	r3, [r7, #12]
    c0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c0ac:	733b      	strb	r3, [r7, #12]
    c0ae:	7b7b      	ldrb	r3, [r7, #13]
    c0b0:	f043 0303 	orr.w	r3, r3, #3
    c0b4:	737b      	strb	r3, [r7, #13]
    c0b6:	7b7b      	ldrb	r3, [r7, #13]
    c0b8:	2201      	movs	r2, #1
    c0ba:	f362 1305 	bfi	r3, r2, #4, #2
    c0be:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0c2:	7b1b      	ldrb	r3, [r3, #12]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d001      	beq.n	c0cc <n25q256a_xip_confirm+0x7c>
    c0c8:	2208      	movs	r2, #8
    c0ca:	e000      	b.n	c0ce <n25q256a_xip_confirm+0x7e>
    c0cc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c0ce:	7bbb      	ldrb	r3, [r7, #14]
    c0d0:	f362 0304 	bfi	r3, r2, #0, #5
    c0d4:	73bb      	strb	r3, [r7, #14]
    c0d6:	230b      	movs	r3, #11
    c0d8:	743b      	strb	r3, [r7, #16]
    c0da:	78fb      	ldrb	r3, [r7, #3]
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d001      	beq.n	c0e4 <n25q256a_xip_confirm+0x94>
    c0e0:	2300      	movs	r3, #0
    c0e2:	e000      	b.n	c0e6 <n25q256a_xip_confirm+0x96>
    c0e4:	23ff      	movs	r3, #255	; 0xff
    c0e6:	747b      	strb	r3, [r7, #17]
    c0e8:	2301      	movs	r3, #1
    c0ea:	61bb      	str	r3, [r7, #24]
    c0ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c0f0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c0f2:	f107 030c 	add.w	r3, r7, #12
    c0f6:	4619      	mov	r1, r3
    c0f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0fa:	4b07      	ldr	r3, [pc, #28]	; (c118 <n25q256a_xip_confirm+0xc8>)
    c0fc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    c0fe:	78fb      	ldrb	r3, [r7, #3]
    c100:	2b00      	cmp	r3, #0
    c102:	d001      	beq.n	c108 <n25q256a_xip_confirm+0xb8>
    c104:	2202      	movs	r2, #2
    c106:	e000      	b.n	c10a <n25q256a_xip_confirm+0xba>
    c108:	2201      	movs	r2, #1
    c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c10c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c10e:	2300      	movs	r3, #0
}
    c110:	4618      	mov	r0, r3
    c112:	3730      	adds	r7, #48	; 0x30
    c114:	46bd      	mov	sp, r7
    c116:	bd80      	pop	{r7, pc}
    c118:	0000343d 	.word	0x0000343d

0000c11c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    c11c:	b580      	push	{r7, lr}
    c11e:	b08c      	sub	sp, #48	; 0x30
    c120:	af00      	add	r7, sp, #0
    c122:	6078      	str	r0, [r7, #4]
    c124:	460b      	mov	r3, r1
    c126:	70fb      	strb	r3, [r7, #3]
    c128:	4613      	mov	r3, r2
    c12a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    c12c:	2300      	movs	r3, #0
    c12e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    c130:	687b      	ldr	r3, [r7, #4]
    c132:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    c134:	687b      	ldr	r3, [r7, #4]
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    c13a:	f107 030c 	add.w	r3, r7, #12
    c13e:	2200      	movs	r2, #0
    c140:	601a      	str	r2, [r3, #0]
    c142:	605a      	str	r2, [r3, #4]
    c144:	609a      	str	r2, [r3, #8]
    c146:	60da      	str	r2, [r3, #12]
    c148:	611a      	str	r2, [r3, #16]
    c14a:	615a      	str	r2, [r3, #20]
    c14c:	78fb      	ldrb	r3, [r7, #3]
    c14e:	f003 0307 	and.w	r3, r3, #7
    c152:	b2da      	uxtb	r2, r3
    c154:	7b3b      	ldrb	r3, [r7, #12]
    c156:	f362 0302 	bfi	r3, r2, #0, #3
    c15a:	733b      	strb	r3, [r7, #12]
    c15c:	7b3b      	ldrb	r3, [r7, #12]
    c15e:	f043 0310 	orr.w	r3, r3, #16
    c162:	733b      	strb	r3, [r7, #12]
    c164:	7b3b      	ldrb	r3, [r7, #12]
    c166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c16a:	733b      	strb	r3, [r7, #12]
    c16c:	78bb      	ldrb	r3, [r7, #2]
    c16e:	743b      	strb	r3, [r7, #16]
    c170:	2301      	movs	r3, #1
    c172:	61bb      	str	r3, [r7, #24]
    c174:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c178:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c17c:	7b5b      	ldrb	r3, [r3, #13]
    c17e:	2b00      	cmp	r3, #0
    c180:	d003      	beq.n	c18a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c182:	2100      	movs	r1, #0
    c184:	6878      	ldr	r0, [r7, #4]
    c186:	4b0a      	ldr	r3, [pc, #40]	; (c1b0 <n25q256a_read_reg+0x94>)
    c188:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c18a:	f107 030c 	add.w	r3, r7, #12
    c18e:	4619      	mov	r1, r3
    c190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c192:	4b08      	ldr	r3, [pc, #32]	; (c1b4 <n25q256a_read_reg+0x98>)
    c194:	4798      	blx	r3
	if (n25q->xip_mode) {
    c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c198:	7b5b      	ldrb	r3, [r3, #13]
    c19a:	2b00      	cmp	r3, #0
    c19c:	d003      	beq.n	c1a6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c19e:	2101      	movs	r1, #1
    c1a0:	6878      	ldr	r0, [r7, #4]
    c1a2:	4b03      	ldr	r3, [pc, #12]	; (c1b0 <n25q256a_read_reg+0x94>)
    c1a4:	4798      	blx	r3
	}
	return status;
    c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c1a8:	4618      	mov	r0, r3
    c1aa:	3730      	adds	r7, #48	; 0x30
    c1ac:	46bd      	mov	sp, r7
    c1ae:	bd80      	pop	{r7, pc}
    c1b0:	0000c051 	.word	0x0000c051
    c1b4:	0000343d 	.word	0x0000343d

0000c1b8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c1b8:	b580      	push	{r7, lr}
    c1ba:	b08c      	sub	sp, #48	; 0x30
    c1bc:	af00      	add	r7, sp, #0
    c1be:	60f8      	str	r0, [r7, #12]
    c1c0:	607b      	str	r3, [r7, #4]
    c1c2:	460b      	mov	r3, r1
    c1c4:	72fb      	strb	r3, [r7, #11]
    c1c6:	4613      	mov	r3, r2
    c1c8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1ca:	68fb      	ldr	r3, [r7, #12]
    c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1ce:	68fb      	ldr	r3, [r7, #12]
    c1d0:	681b      	ldr	r3, [r3, #0]
    c1d2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c1d4:	f107 0310 	add.w	r3, r7, #16
    c1d8:	2200      	movs	r2, #0
    c1da:	601a      	str	r2, [r3, #0]
    c1dc:	605a      	str	r2, [r3, #4]
    c1de:	609a      	str	r2, [r3, #8]
    c1e0:	60da      	str	r2, [r3, #12]
    c1e2:	611a      	str	r2, [r3, #16]
    c1e4:	615a      	str	r2, [r3, #20]
    c1e6:	7afb      	ldrb	r3, [r7, #11]
    c1e8:	f003 0307 	and.w	r3, r3, #7
    c1ec:	b2da      	uxtb	r2, r3
    c1ee:	7c3b      	ldrb	r3, [r7, #16]
    c1f0:	f362 0302 	bfi	r3, r2, #0, #3
    c1f4:	743b      	strb	r3, [r7, #16]
    c1f6:	7c3b      	ldrb	r3, [r7, #16]
    c1f8:	f043 0310 	orr.w	r3, r3, #16
    c1fc:	743b      	strb	r3, [r7, #16]
    c1fe:	7c3b      	ldrb	r3, [r7, #16]
    c200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c204:	743b      	strb	r3, [r7, #16]
    c206:	7c7b      	ldrb	r3, [r7, #17]
    c208:	2202      	movs	r2, #2
    c20a:	f362 1305 	bfi	r3, r2, #4, #2
    c20e:	747b      	strb	r3, [r7, #17]
    c210:	7abb      	ldrb	r3, [r7, #10]
    c212:	753b      	strb	r3, [r7, #20]
    c214:	2301      	movs	r3, #1
    c216:	61fb      	str	r3, [r7, #28]
    c218:	1d3b      	adds	r3, r7, #4
    c21a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c21e:	7b5b      	ldrb	r3, [r3, #13]
    c220:	2b00      	cmp	r3, #0
    c222:	d003      	beq.n	c22c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c224:	2100      	movs	r1, #0
    c226:	68f8      	ldr	r0, [r7, #12]
    c228:	4b09      	ldr	r3, [pc, #36]	; (c250 <n25q256a_write_reg+0x98>)
    c22a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c22c:	f107 0310 	add.w	r3, r7, #16
    c230:	4619      	mov	r1, r3
    c232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c234:	4b07      	ldr	r3, [pc, #28]	; (c254 <n25q256a_write_reg+0x9c>)
    c236:	4798      	blx	r3
	if (n25q->xip_mode) {
    c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c23a:	7b5b      	ldrb	r3, [r3, #13]
    c23c:	2b00      	cmp	r3, #0
    c23e:	d003      	beq.n	c248 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c240:	2101      	movs	r1, #1
    c242:	68f8      	ldr	r0, [r7, #12]
    c244:	4b02      	ldr	r3, [pc, #8]	; (c250 <n25q256a_write_reg+0x98>)
    c246:	4798      	blx	r3
	}
}
    c248:	bf00      	nop
    c24a:	3730      	adds	r7, #48	; 0x30
    c24c:	46bd      	mov	sp, r7
    c24e:	bd80      	pop	{r7, pc}
    c250:	0000c051 	.word	0x0000c051
    c254:	0000343d 	.word	0x0000343d

0000c258 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c258:	b580      	push	{r7, lr}
    c25a:	b090      	sub	sp, #64	; 0x40
    c25c:	af00      	add	r7, sp, #0
    c25e:	6078      	str	r0, [r7, #4]
    c260:	460b      	mov	r3, r1
    c262:	70fb      	strb	r3, [r7, #3]
    c264:	4613      	mov	r3, r2
    c266:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c268:	687b      	ldr	r3, [r7, #4]
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c26e:	78bb      	ldrb	r3, [r7, #2]
    c270:	2b00      	cmp	r3, #0
    c272:	d001      	beq.n	c278 <n25q256a_write_enable+0x20>
    c274:	2306      	movs	r3, #6
    c276:	e000      	b.n	c27a <n25q256a_write_enable+0x22>
    c278:	2304      	movs	r3, #4
    c27a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c27e:	f107 0320 	add.w	r3, r7, #32
    c282:	2200      	movs	r2, #0
    c284:	601a      	str	r2, [r3, #0]
    c286:	605a      	str	r2, [r3, #4]
    c288:	609a      	str	r2, [r3, #8]
    c28a:	60da      	str	r2, [r3, #12]
    c28c:	611a      	str	r2, [r3, #16]
    c28e:	615a      	str	r2, [r3, #20]
    c290:	78fb      	ldrb	r3, [r7, #3]
    c292:	f003 0307 	and.w	r3, r3, #7
    c296:	b2da      	uxtb	r2, r3
    c298:	f897 3020 	ldrb.w	r3, [r7, #32]
    c29c:	f362 0302 	bfi	r3, r2, #0, #3
    c2a0:	f887 3020 	strb.w	r3, [r7, #32]
    c2a4:	f897 3020 	ldrb.w	r3, [r7, #32]
    c2a8:	f043 0310 	orr.w	r3, r3, #16
    c2ac:	f887 3020 	strb.w	r3, [r7, #32]
    c2b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c2b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c2b8:	f107 0308 	add.w	r3, r7, #8
    c2bc:	2200      	movs	r2, #0
    c2be:	601a      	str	r2, [r3, #0]
    c2c0:	605a      	str	r2, [r3, #4]
    c2c2:	609a      	str	r2, [r3, #8]
    c2c4:	60da      	str	r2, [r3, #12]
    c2c6:	611a      	str	r2, [r3, #16]
    c2c8:	615a      	str	r2, [r3, #20]
    c2ca:	78fb      	ldrb	r3, [r7, #3]
    c2cc:	f003 0307 	and.w	r3, r3, #7
    c2d0:	b2da      	uxtb	r2, r3
    c2d2:	7a3b      	ldrb	r3, [r7, #8]
    c2d4:	f362 0302 	bfi	r3, r2, #0, #3
    c2d8:	723b      	strb	r3, [r7, #8]
    c2da:	7a3b      	ldrb	r3, [r7, #8]
    c2dc:	f043 0310 	orr.w	r3, r3, #16
    c2e0:	723b      	strb	r3, [r7, #8]
    c2e2:	7a3b      	ldrb	r3, [r7, #8]
    c2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c2e8:	723b      	strb	r3, [r7, #8]
    c2ea:	2305      	movs	r3, #5
    c2ec:	733b      	strb	r3, [r7, #12]
    c2ee:	2301      	movs	r3, #1
    c2f0:	617b      	str	r3, [r7, #20]
    c2f2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c2f6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c2f8:	f107 0320 	add.w	r3, r7, #32
    c2fc:	4619      	mov	r1, r3
    c2fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c300:	4b08      	ldr	r3, [pc, #32]	; (c324 <n25q256a_write_enable+0xcc>)
    c302:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c304:	f107 0308 	add.w	r3, r7, #8
    c308:	4619      	mov	r1, r3
    c30a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c30c:	4b05      	ldr	r3, [pc, #20]	; (c324 <n25q256a_write_enable+0xcc>)
    c30e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c310:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c314:	f003 0302 	and.w	r3, r3, #2
    c318:	2b00      	cmp	r3, #0
    c31a:	d0ed      	beq.n	c2f8 <n25q256a_write_enable+0xa0>
}
    c31c:	bf00      	nop
    c31e:	3740      	adds	r7, #64	; 0x40
    c320:	46bd      	mov	sp, r7
    c322:	bd80      	pop	{r7, pc}
    c324:	0000343d 	.word	0x0000343d

0000c328 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c328:	b590      	push	{r4, r7, lr}
    c32a:	b087      	sub	sp, #28
    c32c:	af00      	add	r7, sp, #0
    c32e:	6078      	str	r0, [r7, #4]
    c330:	460b      	mov	r3, r1
    c332:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c334:	687b      	ldr	r3, [r7, #4]
    c336:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c338:	68fb      	ldr	r3, [r7, #12]
    c33a:	7b1b      	ldrb	r3, [r3, #12]
    c33c:	2b00      	cmp	r3, #0
    c33e:	d001      	beq.n	c344 <n25q256a_switch_mode+0x1c>
    c340:	2306      	movs	r3, #6
    c342:	e000      	b.n	c346 <n25q256a_switch_mode+0x1e>
    c344:	2300      	movs	r3, #0
    c346:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c348:	7afb      	ldrb	r3, [r7, #11]
    c34a:	2265      	movs	r2, #101	; 0x65
    c34c:	4619      	mov	r1, r3
    c34e:	6878      	ldr	r0, [r7, #4]
    c350:	4b25      	ldr	r3, [pc, #148]	; (c3e8 <n25q256a_switch_mode+0xc0>)
    c352:	4798      	blx	r3
    c354:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c356:	2300      	movs	r3, #0
    c358:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c35a:	68fb      	ldr	r3, [r7, #12]
    c35c:	7b1b      	ldrb	r3, [r3, #12]
    c35e:	78fa      	ldrb	r2, [r7, #3]
    c360:	429a      	cmp	r2, r3
    c362:	d03d      	beq.n	c3e0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c364:	78fb      	ldrb	r3, [r7, #3]
    c366:	2b00      	cmp	r3, #0
    c368:	d00b      	beq.n	c382 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c36a:	697b      	ldr	r3, [r7, #20]
    c36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c370:	2b00      	cmp	r3, #0
    c372:	d011      	beq.n	c398 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c374:	697b      	ldr	r3, [r7, #20]
    c376:	f003 031f 	and.w	r3, r3, #31
    c37a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c37c:	2301      	movs	r3, #1
    c37e:	74fb      	strb	r3, [r7, #19]
    c380:	e00a      	b.n	c398 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c382:	697b      	ldr	r3, [r7, #20]
    c384:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c388:	2b00      	cmp	r3, #0
    c38a:	d105      	bne.n	c398 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c38c:	697b      	ldr	r3, [r7, #20]
    c38e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c392:	617b      	str	r3, [r7, #20]
			modify = 1;
    c394:	2301      	movs	r3, #1
    c396:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c398:	7cfb      	ldrb	r3, [r7, #19]
    c39a:	2b00      	cmp	r3, #0
    c39c:	d021      	beq.n	c3e2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c39e:	68fb      	ldr	r3, [r7, #12]
    c3a0:	78fa      	ldrb	r2, [r7, #3]
    c3a2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c3a4:	7afb      	ldrb	r3, [r7, #11]
    c3a6:	2201      	movs	r2, #1
    c3a8:	4619      	mov	r1, r3
    c3aa:	6878      	ldr	r0, [r7, #4]
    c3ac:	4b0f      	ldr	r3, [pc, #60]	; (c3ec <n25q256a_switch_mode+0xc4>)
    c3ae:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c3b0:	7af9      	ldrb	r1, [r7, #11]
    c3b2:	697b      	ldr	r3, [r7, #20]
    c3b4:	2261      	movs	r2, #97	; 0x61
    c3b6:	6878      	ldr	r0, [r7, #4]
    c3b8:	4c0d      	ldr	r4, [pc, #52]	; (c3f0 <n25q256a_switch_mode+0xc8>)
    c3ba:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c3bc:	78fb      	ldrb	r3, [r7, #3]
    c3be:	2b00      	cmp	r3, #0
    c3c0:	d001      	beq.n	c3c6 <n25q256a_switch_mode+0x9e>
    c3c2:	2306      	movs	r3, #6
    c3c4:	e000      	b.n	c3c8 <n25q256a_switch_mode+0xa0>
    c3c6:	2300      	movs	r3, #0
    c3c8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c3ca:	7afb      	ldrb	r3, [r7, #11]
    c3cc:	2265      	movs	r2, #101	; 0x65
    c3ce:	4619      	mov	r1, r3
    c3d0:	6878      	ldr	r0, [r7, #4]
    c3d2:	4b05      	ldr	r3, [pc, #20]	; (c3e8 <n25q256a_switch_mode+0xc0>)
    c3d4:	4798      	blx	r3
    c3d6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c3d8:	68fb      	ldr	r3, [r7, #12]
    c3da:	78fa      	ldrb	r2, [r7, #3]
    c3dc:	731a      	strb	r2, [r3, #12]
    c3de:	e000      	b.n	c3e2 <n25q256a_switch_mode+0xba>
		return;
    c3e0:	bf00      	nop
	}
}
    c3e2:	371c      	adds	r7, #28
    c3e4:	46bd      	mov	sp, r7
    c3e6:	bd90      	pop	{r4, r7, pc}
    c3e8:	0000c11d 	.word	0x0000c11d
    c3ec:	0000c259 	.word	0x0000c259
    c3f0:	0000c1b9 	.word	0x0000c1b9

0000c3f4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c3f4:	b580      	push	{r7, lr}
    c3f6:	b086      	sub	sp, #24
    c3f8:	af00      	add	r7, sp, #0
    c3fa:	60f8      	str	r0, [r7, #12]
    c3fc:	60b9      	str	r1, [r7, #8]
    c3fe:	607a      	str	r2, [r7, #4]
    c400:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c402:	68fb      	ldr	r3, [r7, #12]
    c404:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c406:	4a0c      	ldr	r2, [pc, #48]	; (c438 <n25q256a_construct+0x44>)
    c408:	68b9      	ldr	r1, [r7, #8]
    c40a:	68f8      	ldr	r0, [r7, #12]
    c40c:	4b0b      	ldr	r3, [pc, #44]	; (c43c <n25q256a_construct+0x48>)
    c40e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c410:	697b      	ldr	r3, [r7, #20]
    c412:	2200      	movs	r2, #0
    c414:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c416:	697b      	ldr	r3, [r7, #20]
    c418:	2200      	movs	r2, #0
    c41a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c41c:	697b      	ldr	r3, [r7, #20]
    c41e:	687a      	ldr	r2, [r7, #4]
    c420:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c422:	78fb      	ldrb	r3, [r7, #3]
    c424:	4619      	mov	r1, r3
    c426:	68f8      	ldr	r0, [r7, #12]
    c428:	4b05      	ldr	r3, [pc, #20]	; (c440 <n25q256a_construct+0x4c>)
    c42a:	4798      	blx	r3
	return me;
    c42c:	68fb      	ldr	r3, [r7, #12]
}
    c42e:	4618      	mov	r0, r3
    c430:	3718      	adds	r7, #24
    c432:	46bd      	mov	sp, r7
    c434:	bd80      	pop	{r7, pc}
    c436:	bf00      	nop
    c438:	0001128c 	.word	0x0001128c
    c43c:	0000c8d1 	.word	0x0000c8d1
    c440:	0000c329 	.word	0x0000c329

0000c444 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c444:	b580      	push	{r7, lr}
    c446:	b08c      	sub	sp, #48	; 0x30
    c448:	af00      	add	r7, sp, #0
    c44a:	60f8      	str	r0, [r7, #12]
    c44c:	60b9      	str	r1, [r7, #8]
    c44e:	607a      	str	r2, [r7, #4]
    c450:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c452:	68fb      	ldr	r3, [r7, #12]
    c454:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c456:	68fb      	ldr	r3, [r7, #12]
    c458:	681b      	ldr	r3, [r3, #0]
    c45a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c45c:	f107 0310 	add.w	r3, r7, #16
    c460:	2200      	movs	r2, #0
    c462:	601a      	str	r2, [r3, #0]
    c464:	605a      	str	r2, [r3, #4]
    c466:	609a      	str	r2, [r3, #8]
    c468:	60da      	str	r2, [r3, #12]
    c46a:	611a      	str	r2, [r3, #16]
    c46c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c470:	7b1b      	ldrb	r3, [r3, #12]
    c472:	2b00      	cmp	r3, #0
    c474:	d001      	beq.n	c47a <n25q256a_read+0x36>
    c476:	2206      	movs	r2, #6
    c478:	e000      	b.n	c47c <n25q256a_read+0x38>
    c47a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c47c:	7c3b      	ldrb	r3, [r7, #16]
    c47e:	f362 0302 	bfi	r3, r2, #0, #3
    c482:	743b      	strb	r3, [r7, #16]
    c484:	7c3b      	ldrb	r3, [r7, #16]
    c486:	f043 0310 	orr.w	r3, r3, #16
    c48a:	743b      	strb	r3, [r7, #16]
    c48c:	7c3b      	ldrb	r3, [r7, #16]
    c48e:	f043 0320 	orr.w	r3, r3, #32
    c492:	743b      	strb	r3, [r7, #16]
    c494:	7c3b      	ldrb	r3, [r7, #16]
    c496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c49a:	743b      	strb	r3, [r7, #16]
    c49c:	7c7b      	ldrb	r3, [r7, #17]
    c49e:	2201      	movs	r2, #1
    c4a0:	f362 1305 	bfi	r3, r2, #4, #2
    c4a4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4a8:	7b1b      	ldrb	r3, [r3, #12]
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d001      	beq.n	c4b2 <n25q256a_read+0x6e>
    c4ae:	220a      	movs	r2, #10
    c4b0:	e000      	b.n	c4b4 <n25q256a_read+0x70>
    c4b2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c4b4:	7cbb      	ldrb	r3, [r7, #18]
    c4b6:	f362 0304 	bfi	r3, r2, #0, #5
    c4ba:	74bb      	strb	r3, [r7, #18]
    c4bc:	230b      	movs	r3, #11
    c4be:	753b      	strb	r3, [r7, #20]
    c4c0:	687b      	ldr	r3, [r7, #4]
    c4c2:	61bb      	str	r3, [r7, #24]
    c4c4:	683b      	ldr	r3, [r7, #0]
    c4c6:	61fb      	str	r3, [r7, #28]
    c4c8:	68bb      	ldr	r3, [r7, #8]
    c4ca:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c4cc:	f107 0310 	add.w	r3, r7, #16
    c4d0:	4619      	mov	r1, r3
    c4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c4d4:	4b03      	ldr	r3, [pc, #12]	; (c4e4 <n25q256a_read+0xa0>)
    c4d6:	4798      	blx	r3
	return ERR_NONE;
    c4d8:	2300      	movs	r3, #0
}
    c4da:	4618      	mov	r0, r3
    c4dc:	3730      	adds	r7, #48	; 0x30
    c4de:	46bd      	mov	sp, r7
    c4e0:	bd80      	pop	{r7, pc}
    c4e2:	bf00      	nop
    c4e4:	0000343d 	.word	0x0000343d

0000c4e8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c4e8:	b580      	push	{r7, lr}
    c4ea:	b08c      	sub	sp, #48	; 0x30
    c4ec:	af00      	add	r7, sp, #0
    c4ee:	60f8      	str	r0, [r7, #12]
    c4f0:	60b9      	str	r1, [r7, #8]
    c4f2:	607a      	str	r2, [r7, #4]
    c4f4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c4f6:	68fb      	ldr	r3, [r7, #12]
    c4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c4fa:	68fb      	ldr	r3, [r7, #12]
    c4fc:	681b      	ldr	r3, [r3, #0]
    c4fe:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c500:	f107 0310 	add.w	r3, r7, #16
    c504:	2200      	movs	r2, #0
    c506:	601a      	str	r2, [r3, #0]
    c508:	605a      	str	r2, [r3, #4]
    c50a:	609a      	str	r2, [r3, #8]
    c50c:	60da      	str	r2, [r3, #12]
    c50e:	611a      	str	r2, [r3, #16]
    c510:	615a      	str	r2, [r3, #20]
    c512:	7c3b      	ldrb	r3, [r7, #16]
    c514:	f043 0310 	orr.w	r3, r3, #16
    c518:	743b      	strb	r3, [r7, #16]
    c51a:	7c3b      	ldrb	r3, [r7, #16]
    c51c:	f043 0320 	orr.w	r3, r3, #32
    c520:	743b      	strb	r3, [r7, #16]
    c522:	7c3b      	ldrb	r3, [r7, #16]
    c524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c528:	743b      	strb	r3, [r7, #16]
    c52a:	7c7b      	ldrb	r3, [r7, #17]
    c52c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c530:	747b      	strb	r3, [r7, #17]
    c532:	2302      	movs	r3, #2
    c534:	753b      	strb	r3, [r7, #20]
    c536:	687b      	ldr	r3, [r7, #4]
    c538:	61bb      	str	r3, [r7, #24]
    c53a:	683b      	ldr	r3, [r7, #0]
    c53c:	61fb      	str	r3, [r7, #28]
    c53e:	68bb      	ldr	r3, [r7, #8]
    c540:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c544:	7b1b      	ldrb	r3, [r3, #12]
    c546:	2b00      	cmp	r3, #0
    c548:	d001      	beq.n	c54e <n25q256a_write+0x66>
    c54a:	2206      	movs	r2, #6
    c54c:	e000      	b.n	c550 <n25q256a_write+0x68>
    c54e:	2200      	movs	r2, #0
    c550:	7c3b      	ldrb	r3, [r7, #16]
    c552:	f362 0302 	bfi	r3, r2, #0, #3
    c556:	743b      	strb	r3, [r7, #16]
	while (length) {
    c558:	e035      	b.n	c5c6 <n25q256a_write+0xde>
		cmd.address = address;
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c55e:	683b      	ldr	r3, [r7, #0]
    c560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c564:	d802      	bhi.n	c56c <n25q256a_write+0x84>
			cmd.buf_len = length;
    c566:	683b      	ldr	r3, [r7, #0]
    c568:	61fb      	str	r3, [r7, #28]
    c56a:	e002      	b.n	c572 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c56c:	f44f 7380 	mov.w	r3, #256	; 0x100
    c570:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c572:	7c3b      	ldrb	r3, [r7, #16]
    c574:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c578:	b2db      	uxtb	r3, r3
    c57a:	2201      	movs	r2, #1
    c57c:	4619      	mov	r1, r3
    c57e:	68f8      	ldr	r0, [r7, #12]
    c580:	4b19      	ldr	r3, [pc, #100]	; (c5e8 <n25q256a_write+0x100>)
    c582:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c584:	f107 0310 	add.w	r3, r7, #16
    c588:	4619      	mov	r1, r3
    c58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c58c:	4b17      	ldr	r3, [pc, #92]	; (c5ec <n25q256a_write+0x104>)
    c58e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c590:	bf00      	nop
    c592:	7c3b      	ldrb	r3, [r7, #16]
    c594:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c598:	b2db      	uxtb	r3, r3
    c59a:	2270      	movs	r2, #112	; 0x70
    c59c:	4619      	mov	r1, r3
    c59e:	68f8      	ldr	r0, [r7, #12]
    c5a0:	4b13      	ldr	r3, [pc, #76]	; (c5f0 <n25q256a_write+0x108>)
    c5a2:	4798      	blx	r3
    c5a4:	4603      	mov	r3, r0
    c5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c5aa:	2b00      	cmp	r3, #0
    c5ac:	d0f1      	beq.n	c592 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c5ae:	6a3a      	ldr	r2, [r7, #32]
    c5b0:	69fb      	ldr	r3, [r7, #28]
    c5b2:	4413      	add	r3, r2
    c5b4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c5b6:	69fb      	ldr	r3, [r7, #28]
    c5b8:	683a      	ldr	r2, [r7, #0]
    c5ba:	1ad3      	subs	r3, r2, r3
    c5bc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c5be:	69fb      	ldr	r3, [r7, #28]
    c5c0:	687a      	ldr	r2, [r7, #4]
    c5c2:	4413      	add	r3, r2
    c5c4:	607b      	str	r3, [r7, #4]
	while (length) {
    c5c6:	683b      	ldr	r3, [r7, #0]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d1c6      	bne.n	c55a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5ce:	7b5b      	ldrb	r3, [r3, #13]
    c5d0:	2b00      	cmp	r3, #0
    c5d2:	d003      	beq.n	c5dc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c5d4:	2101      	movs	r1, #1
    c5d6:	68f8      	ldr	r0, [r7, #12]
    c5d8:	4b06      	ldr	r3, [pc, #24]	; (c5f4 <n25q256a_write+0x10c>)
    c5da:	4798      	blx	r3
	}
	return ERR_NONE;
    c5dc:	2300      	movs	r3, #0
}
    c5de:	4618      	mov	r0, r3
    c5e0:	3730      	adds	r7, #48	; 0x30
    c5e2:	46bd      	mov	sp, r7
    c5e4:	bd80      	pop	{r7, pc}
    c5e6:	bf00      	nop
    c5e8:	0000c259 	.word	0x0000c259
    c5ec:	0000343d 	.word	0x0000343d
    c5f0:	0000c11d 	.word	0x0000c11d
    c5f4:	0000c051 	.word	0x0000c051

0000c5f8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c5f8:	b580      	push	{r7, lr}
    c5fa:	b090      	sub	sp, #64	; 0x40
    c5fc:	af00      	add	r7, sp, #0
    c5fe:	60f8      	str	r0, [r7, #12]
    c600:	60b9      	str	r1, [r7, #8]
    c602:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c604:	68fb      	ldr	r3, [r7, #12]
    c606:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c608:	68fb      	ldr	r3, [r7, #12]
    c60a:	681b      	ldr	r3, [r3, #0]
    c60c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c60e:	f107 0314 	add.w	r3, r7, #20
    c612:	2200      	movs	r2, #0
    c614:	601a      	str	r2, [r3, #0]
    c616:	605a      	str	r2, [r3, #4]
    c618:	609a      	str	r2, [r3, #8]
    c61a:	60da      	str	r2, [r3, #12]
    c61c:	611a      	str	r2, [r3, #16]
    c61e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c622:	7b1b      	ldrb	r3, [r3, #12]
    c624:	2b00      	cmp	r3, #0
    c626:	d001      	beq.n	c62c <n25q256a_erase+0x34>
    c628:	2206      	movs	r2, #6
    c62a:	e000      	b.n	c62e <n25q256a_erase+0x36>
    c62c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c62e:	7d3b      	ldrb	r3, [r7, #20]
    c630:	f362 0302 	bfi	r3, r2, #0, #3
    c634:	753b      	strb	r3, [r7, #20]
    c636:	7d3b      	ldrb	r3, [r7, #20]
    c638:	f043 0310 	orr.w	r3, r3, #16
    c63c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c63e:	687b      	ldr	r3, [r7, #4]
    c640:	4a56      	ldr	r2, [pc, #344]	; (c79c <n25q256a_erase+0x1a4>)
    c642:	4293      	cmp	r3, r2
    c644:	bf94      	ite	ls
    c646:	2301      	movls	r3, #1
    c648:	2300      	movhi	r3, #0
    c64a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c64c:	7d3b      	ldrb	r3, [r7, #20]
    c64e:	f362 1345 	bfi	r3, r2, #5, #1
    c652:	753b      	strb	r3, [r7, #20]
    c654:	7d7b      	ldrb	r3, [r7, #21]
    c656:	2202      	movs	r2, #2
    c658:	f362 1305 	bfi	r3, r2, #4, #2
    c65c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c65e:	68bb      	ldr	r3, [r7, #8]
    c660:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c666:	2300      	movs	r3, #0
    c668:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c66a:	687b      	ldr	r3, [r7, #4]
    c66c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c670:	2b00      	cmp	r3, #0
    c672:	d104      	bne.n	c67e <n25q256a_erase+0x86>
    c674:	68bb      	ldr	r3, [r7, #8]
    c676:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c67a:	2b00      	cmp	r3, #0
    c67c:	d002      	beq.n	c684 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c67e:	f06f 030c 	mvn.w	r3, #12
    c682:	e087      	b.n	c794 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c684:	687b      	ldr	r3, [r7, #4]
    c686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c68a:	d368      	bcc.n	c75e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c68c:	23c7      	movs	r3, #199	; 0xc7
    c68e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c690:	7d3b      	ldrb	r3, [r7, #20]
    c692:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c696:	b2db      	uxtb	r3, r3
    c698:	2201      	movs	r2, #1
    c69a:	4619      	mov	r1, r3
    c69c:	68f8      	ldr	r0, [r7, #12]
    c69e:	4b40      	ldr	r3, [pc, #256]	; (c7a0 <n25q256a_erase+0x1a8>)
    c6a0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c6a2:	f107 0314 	add.w	r3, r7, #20
    c6a6:	4619      	mov	r1, r3
    c6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6aa:	4b3e      	ldr	r3, [pc, #248]	; (c7a4 <n25q256a_erase+0x1ac>)
    c6ac:	4798      	blx	r3
    c6ae:	e059      	b.n	c764 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6b2:	b29b      	uxth	r3, r3
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d11f      	bne.n	c6f8 <n25q256a_erase+0x100>
    c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c6be:	d31b      	bcc.n	c6f8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6c2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c6c4:	23d8      	movs	r3, #216	; 0xd8
    c6c6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c6c8:	7d3b      	ldrb	r3, [r7, #20]
    c6ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6ce:	b2db      	uxtb	r3, r3
    c6d0:	2201      	movs	r2, #1
    c6d2:	4619      	mov	r1, r3
    c6d4:	68f8      	ldr	r0, [r7, #12]
    c6d6:	4b32      	ldr	r3, [pc, #200]	; (c7a0 <n25q256a_erase+0x1a8>)
    c6d8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c6da:	f107 0314 	add.w	r3, r7, #20
    c6de:	4619      	mov	r1, r3
    c6e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6e2:	4b30      	ldr	r3, [pc, #192]	; (c7a4 <n25q256a_erase+0x1ac>)
    c6e4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6f0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c6f4:	63bb      	str	r3, [r7, #56]	; 0x38
    c6f6:	e023      	b.n	c740 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c6fe:	d31b      	bcc.n	c738 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c702:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c704:	2320      	movs	r3, #32
    c706:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c708:	7d3b      	ldrb	r3, [r7, #20]
    c70a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c70e:	b2db      	uxtb	r3, r3
    c710:	2201      	movs	r2, #1
    c712:	4619      	mov	r1, r3
    c714:	68f8      	ldr	r0, [r7, #12]
    c716:	4b22      	ldr	r3, [pc, #136]	; (c7a0 <n25q256a_erase+0x1a8>)
    c718:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c71a:	f107 0314 	add.w	r3, r7, #20
    c71e:	4619      	mov	r1, r3
    c720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c722:	4b20      	ldr	r3, [pc, #128]	; (c7a4 <n25q256a_erase+0x1ac>)
    c724:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c730:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c734:	63bb      	str	r3, [r7, #56]	; 0x38
    c736:	e003      	b.n	c740 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c738:	f06f 030c 	mvn.w	r3, #12
    c73c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c73e:	e011      	b.n	c764 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c740:	bf00      	nop
    c742:	7d3b      	ldrb	r3, [r7, #20]
    c744:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c748:	b2db      	uxtb	r3, r3
    c74a:	2270      	movs	r2, #112	; 0x70
    c74c:	4619      	mov	r1, r3
    c74e:	68f8      	ldr	r0, [r7, #12]
    c750:	4b15      	ldr	r3, [pc, #84]	; (c7a8 <n25q256a_erase+0x1b0>)
    c752:	4798      	blx	r3
    c754:	4603      	mov	r3, r0
    c756:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c75a:	2b00      	cmp	r3, #0
    c75c:	d0f1      	beq.n	c742 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c760:	2b00      	cmp	r3, #0
    c762:	d1a5      	bne.n	c6b0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c764:	bf00      	nop
    c766:	7d3b      	ldrb	r3, [r7, #20]
    c768:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c76c:	b2db      	uxtb	r3, r3
    c76e:	2270      	movs	r2, #112	; 0x70
    c770:	4619      	mov	r1, r3
    c772:	68f8      	ldr	r0, [r7, #12]
    c774:	4b0c      	ldr	r3, [pc, #48]	; (c7a8 <n25q256a_erase+0x1b0>)
    c776:	4798      	blx	r3
    c778:	4603      	mov	r3, r0
    c77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c77e:	2b00      	cmp	r3, #0
    c780:	d0f1      	beq.n	c766 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c784:	7b5b      	ldrb	r3, [r3, #13]
    c786:	2b00      	cmp	r3, #0
    c788:	d003      	beq.n	c792 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c78a:	2101      	movs	r1, #1
    c78c:	68f8      	ldr	r0, [r7, #12]
    c78e:	4b07      	ldr	r3, [pc, #28]	; (c7ac <n25q256a_erase+0x1b4>)
    c790:	4798      	blx	r3
	}
	return rc;
    c792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c794:	4618      	mov	r0, r3
    c796:	3740      	adds	r7, #64	; 0x40
    c798:	46bd      	mov	sp, r7
    c79a:	bd80      	pop	{r7, pc}
    c79c:	001fffff 	.word	0x001fffff
    c7a0:	0000c259 	.word	0x0000c259
    c7a4:	0000343d 	.word	0x0000343d
    c7a8:	0000c11d 	.word	0x0000c11d
    c7ac:	0000c051 	.word	0x0000c051

0000c7b0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c7b0:	b590      	push	{r4, r7, lr}
    c7b2:	b085      	sub	sp, #20
    c7b4:	af00      	add	r7, sp, #0
    c7b6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c7b8:	687b      	ldr	r3, [r7, #4]
    c7ba:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c7bc:	68fb      	ldr	r3, [r7, #12]
    c7be:	7b1b      	ldrb	r3, [r3, #12]
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d001      	beq.n	c7c8 <n25q256a_enable_xip+0x18>
    c7c4:	2306      	movs	r3, #6
    c7c6:	e000      	b.n	c7ca <n25q256a_enable_xip+0x1a>
    c7c8:	2300      	movs	r3, #0
    c7ca:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c7cc:	68fb      	ldr	r3, [r7, #12]
    c7ce:	7b5b      	ldrb	r3, [r3, #13]
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d129      	bne.n	c828 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c7d4:	7afb      	ldrb	r3, [r7, #11]
    c7d6:	2285      	movs	r2, #133	; 0x85
    c7d8:	4619      	mov	r1, r3
    c7da:	6878      	ldr	r0, [r7, #4]
    c7dc:	4b15      	ldr	r3, [pc, #84]	; (c834 <n25q256a_enable_xip+0x84>)
    c7de:	4798      	blx	r3
    c7e0:	4603      	mov	r3, r0
    c7e2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c7e4:	7abb      	ldrb	r3, [r7, #10]
    c7e6:	f003 0308 	and.w	r3, r3, #8
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d015      	beq.n	c81a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c7ee:	7abb      	ldrb	r3, [r7, #10]
    c7f0:	f023 0308 	bic.w	r3, r3, #8
    c7f4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c7f6:	7abb      	ldrb	r3, [r7, #10]
    c7f8:	7af9      	ldrb	r1, [r7, #11]
    c7fa:	2281      	movs	r2, #129	; 0x81
    c7fc:	6878      	ldr	r0, [r7, #4]
    c7fe:	4c0e      	ldr	r4, [pc, #56]	; (c838 <n25q256a_enable_xip+0x88>)
    c800:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c802:	bf00      	nop
    c804:	7afb      	ldrb	r3, [r7, #11]
    c806:	2270      	movs	r2, #112	; 0x70
    c808:	4619      	mov	r1, r3
    c80a:	6878      	ldr	r0, [r7, #4]
    c80c:	4b09      	ldr	r3, [pc, #36]	; (c834 <n25q256a_enable_xip+0x84>)
    c80e:	4798      	blx	r3
    c810:	4603      	mov	r3, r0
    c812:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c816:	2b00      	cmp	r3, #0
    c818:	d0f4      	beq.n	c804 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c81a:	68fb      	ldr	r3, [r7, #12]
    c81c:	2201      	movs	r2, #1
    c81e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c820:	2101      	movs	r1, #1
    c822:	6878      	ldr	r0, [r7, #4]
    c824:	4b05      	ldr	r3, [pc, #20]	; (c83c <n25q256a_enable_xip+0x8c>)
    c826:	4798      	blx	r3
	}
	return ERR_NONE;
    c828:	2300      	movs	r3, #0
}
    c82a:	4618      	mov	r0, r3
    c82c:	3714      	adds	r7, #20
    c82e:	46bd      	mov	sp, r7
    c830:	bd90      	pop	{r4, r7, pc}
    c832:	bf00      	nop
    c834:	0000c11d 	.word	0x0000c11d
    c838:	0000c1b9 	.word	0x0000c1b9
    c83c:	0000c051 	.word	0x0000c051

0000c840 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c840:	b580      	push	{r7, lr}
    c842:	b086      	sub	sp, #24
    c844:	af00      	add	r7, sp, #0
    c846:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c848:	687b      	ldr	r3, [r7, #4]
    c84a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c84c:	687b      	ldr	r3, [r7, #4]
    c84e:	681b      	ldr	r3, [r3, #0]
    c850:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c852:	697b      	ldr	r3, [r7, #20]
    c854:	7b1b      	ldrb	r3, [r3, #12]
    c856:	2b00      	cmp	r3, #0
    c858:	d001      	beq.n	c85e <n25q256a_disable_xip+0x1e>
    c85a:	2306      	movs	r3, #6
    c85c:	e000      	b.n	c860 <n25q256a_disable_xip+0x20>
    c85e:	2300      	movs	r3, #0
    c860:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c862:	2100      	movs	r1, #0
    c864:	6878      	ldr	r0, [r7, #4]
    c866:	4b15      	ldr	r3, [pc, #84]	; (c8bc <n25q256a_disable_xip+0x7c>)
    c868:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c86a:	7bfb      	ldrb	r3, [r7, #15]
    c86c:	2285      	movs	r2, #133	; 0x85
    c86e:	4619      	mov	r1, r3
    c870:	6878      	ldr	r0, [r7, #4]
    c872:	4b13      	ldr	r3, [pc, #76]	; (c8c0 <n25q256a_disable_xip+0x80>)
    c874:	4798      	blx	r3
    c876:	4603      	mov	r3, r0
    c878:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c87a:	7bbb      	ldrb	r3, [r7, #14]
    c87c:	f003 0308 	and.w	r3, r3, #8
    c880:	2b00      	cmp	r3, #0
    c882:	d113      	bne.n	c8ac <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c884:	697b      	ldr	r3, [r7, #20]
    c886:	689b      	ldr	r3, [r3, #8]
    c888:	2b00      	cmp	r3, #0
    c88a:	d00f      	beq.n	c8ac <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c88c:	693b      	ldr	r3, [r7, #16]
    c88e:	681b      	ldr	r3, [r3, #0]
    c890:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c892:	6938      	ldr	r0, [r7, #16]
    c894:	4b0b      	ldr	r3, [pc, #44]	; (c8c4 <n25q256a_disable_xip+0x84>)
    c896:	4798      	blx	r3
			n25q->pin_exit_xip();
    c898:	697b      	ldr	r3, [r7, #20]
    c89a:	689b      	ldr	r3, [r3, #8]
    c89c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c89e:	68b9      	ldr	r1, [r7, #8]
    c8a0:	6938      	ldr	r0, [r7, #16]
    c8a2:	4b09      	ldr	r3, [pc, #36]	; (c8c8 <n25q256a_disable_xip+0x88>)
    c8a4:	4798      	blx	r3
			qspi_sync_enable(descr);
    c8a6:	6938      	ldr	r0, [r7, #16]
    c8a8:	4b08      	ldr	r3, [pc, #32]	; (c8cc <n25q256a_disable_xip+0x8c>)
    c8aa:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c8ac:	697b      	ldr	r3, [r7, #20]
    c8ae:	2200      	movs	r2, #0
    c8b0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c8b2:	2300      	movs	r3, #0
}
    c8b4:	4618      	mov	r0, r3
    c8b6:	3718      	adds	r7, #24
    c8b8:	46bd      	mov	sp, r7
    c8ba:	bd80      	pop	{r7, pc}
    c8bc:	0000c051 	.word	0x0000c051
    c8c0:	0000c11d 	.word	0x0000c11d
    c8c4:	00003401 	.word	0x00003401
    c8c8:	00003379 	.word	0x00003379
    c8cc:	000033c5 	.word	0x000033c5

0000c8d0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c8d0:	b480      	push	{r7}
    c8d2:	b085      	sub	sp, #20
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	60f8      	str	r0, [r7, #12]
    c8d8:	60b9      	str	r1, [r7, #8]
    c8da:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c8dc:	68fb      	ldr	r3, [r7, #12]
    c8de:	68ba      	ldr	r2, [r7, #8]
    c8e0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c8e2:	68fb      	ldr	r3, [r7, #12]
    c8e4:	687a      	ldr	r2, [r7, #4]
    c8e6:	605a      	str	r2, [r3, #4]

	return me;
    c8e8:	68fb      	ldr	r3, [r7, #12]
}
    c8ea:	4618      	mov	r0, r3
    c8ec:	3714      	adds	r7, #20
    c8ee:	46bd      	mov	sp, r7
    c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8f4:	4770      	bx	lr

0000c8f6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c8f6:	b480      	push	{r7}
    c8f8:	b083      	sub	sp, #12
    c8fa:	af00      	add	r7, sp, #0
    c8fc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c8fe:	687b      	ldr	r3, [r7, #4]
    c900:	781b      	ldrb	r3, [r3, #0]
    c902:	b29a      	uxth	r2, r3
    c904:	687b      	ldr	r3, [r7, #4]
    c906:	3301      	adds	r3, #1
    c908:	781b      	ldrb	r3, [r3, #0]
    c90a:	b29b      	uxth	r3, r3
    c90c:	021b      	lsls	r3, r3, #8
    c90e:	b29b      	uxth	r3, r3
    c910:	4413      	add	r3, r2
    c912:	b29b      	uxth	r3, r3
}
    c914:	4618      	mov	r0, r3
    c916:	370c      	adds	r7, #12
    c918:	46bd      	mov	sp, r7
    c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c91e:	4770      	bx	lr

0000c920 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c920:	b480      	push	{r7}
    c922:	b083      	sub	sp, #12
    c924:	af00      	add	r7, sp, #0
    c926:	6078      	str	r0, [r7, #4]
	return desc[0];
    c928:	687b      	ldr	r3, [r7, #4]
    c92a:	781b      	ldrb	r3, [r3, #0]
}
    c92c:	4618      	mov	r0, r3
    c92e:	370c      	adds	r7, #12
    c930:	46bd      	mov	sp, r7
    c932:	f85d 7b04 	ldr.w	r7, [sp], #4
    c936:	4770      	bx	lr

0000c938 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c938:	b580      	push	{r7, lr}
    c93a:	b082      	sub	sp, #8
    c93c:	af00      	add	r7, sp, #0
    c93e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c940:	6878      	ldr	r0, [r7, #4]
    c942:	4b05      	ldr	r3, [pc, #20]	; (c958 <usb_desc_next+0x20>)
    c944:	4798      	blx	r3
    c946:	4603      	mov	r3, r0
    c948:	461a      	mov	r2, r3
    c94a:	687b      	ldr	r3, [r7, #4]
    c94c:	4413      	add	r3, r2
}
    c94e:	4618      	mov	r0, r3
    c950:	3708      	adds	r7, #8
    c952:	46bd      	mov	sp, r7
    c954:	bd80      	pop	{r7, pc}
    c956:	bf00      	nop
    c958:	0000c921 	.word	0x0000c921

0000c95c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b08c      	sub	sp, #48	; 0x30
    c960:	af00      	add	r7, sp, #0
    c962:	6078      	str	r0, [r7, #4]
    c964:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	689b      	ldr	r3, [r3, #8]
    c96a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c96c:	683b      	ldr	r3, [r7, #0]
    c96e:	681b      	ldr	r3, [r3, #0]
    c970:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c972:	2300      	movs	r3, #0
    c974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c978:	e08f      	b.n	ca9a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c97c:	2b00      	cmp	r3, #0
    c97e:	d102      	bne.n	c986 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c980:	f06f 0309 	mvn.w	r3, #9
    c984:	e092      	b.n	caac <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c988:	789b      	ldrb	r3, [r3, #2]
    c98a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c98e:	795b      	ldrb	r3, [r3, #5]
    c990:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c992:	7c7b      	ldrb	r3, [r7, #17]
    c994:	2b02      	cmp	r3, #2
    c996:	d002      	beq.n	c99e <cdcdf_acm_enable+0x42>
    c998:	7c7b      	ldrb	r3, [r7, #17]
    c99a:	2b0a      	cmp	r3, #10
    c99c:	d121      	bne.n	c9e2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9a2:	6a3a      	ldr	r2, [r7, #32]
    c9a4:	5cd2      	ldrb	r2, [r2, r3]
    c9a6:	7bbb      	ldrb	r3, [r7, #14]
    c9a8:	429a      	cmp	r2, r3
    c9aa:	d102      	bne.n	c9b2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c9ac:	f06f 0311 	mvn.w	r3, #17
    c9b0:	e07c      	b.n	caac <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9b6:	6a3a      	ldr	r2, [r7, #32]
    c9b8:	5cd3      	ldrb	r3, [r2, r3]
    c9ba:	2bff      	cmp	r3, #255	; 0xff
    c9bc:	d002      	beq.n	c9c4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c9be:	f06f 031b 	mvn.w	r3, #27
    c9c2:	e073      	b.n	caac <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9c8:	7bb9      	ldrb	r1, [r7, #14]
    c9ca:	6a3a      	ldr	r2, [r7, #32]
    c9cc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c9ce:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c9d0:	683b      	ldr	r3, [r7, #0]
    c9d2:	685b      	ldr	r3, [r3, #4]
    c9d4:	2205      	movs	r2, #5
    c9d6:	4619      	mov	r1, r3
    c9d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c9da:	4b36      	ldr	r3, [pc, #216]	; (cab4 <cdcdf_acm_enable+0x158>)
    c9dc:	4798      	blx	r3
    c9de:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c9e0:	e047      	b.n	ca72 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c9e2:	f06f 0309 	mvn.w	r3, #9
    c9e6:	e061      	b.n	caac <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9ea:	789b      	ldrb	r3, [r3, #2]
    c9ec:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9f0:	78db      	ldrb	r3, [r3, #3]
    c9f2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9f6:	3304      	adds	r3, #4
    c9f8:	4618      	mov	r0, r3
    c9fa:	4b2f      	ldr	r3, [pc, #188]	; (cab8 <cdcdf_acm_enable+0x15c>)
    c9fc:	4798      	blx	r3
    c9fe:	4603      	mov	r3, r0
    ca00:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ca02:	7ebb      	ldrb	r3, [r7, #26]
    ca04:	7ef9      	ldrb	r1, [r7, #27]
    ca06:	8bba      	ldrh	r2, [r7, #28]
    ca08:	4618      	mov	r0, r3
    ca0a:	4b2c      	ldr	r3, [pc, #176]	; (cabc <cdcdf_acm_enable+0x160>)
    ca0c:	4798      	blx	r3
    ca0e:	4603      	mov	r3, r0
    ca10:	2b00      	cmp	r3, #0
    ca12:	d002      	beq.n	ca1a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    ca14:	f06f 0313 	mvn.w	r3, #19
    ca18:	e048      	b.n	caac <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ca1a:	7ebb      	ldrb	r3, [r7, #26]
    ca1c:	b25b      	sxtb	r3, r3
    ca1e:	2b00      	cmp	r3, #0
    ca20:	da0f      	bge.n	ca42 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    ca22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca26:	7eb9      	ldrb	r1, [r7, #26]
    ca28:	6a3a      	ldr	r2, [r7, #32]
    ca2a:	4413      	add	r3, r2
    ca2c:	460a      	mov	r2, r1
    ca2e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    ca30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca34:	6a3a      	ldr	r2, [r7, #32]
    ca36:	4413      	add	r3, r2
    ca38:	789b      	ldrb	r3, [r3, #2]
    ca3a:	4618      	mov	r0, r3
    ca3c:	4b20      	ldr	r3, [pc, #128]	; (cac0 <cdcdf_acm_enable+0x164>)
    ca3e:	4798      	blx	r3
    ca40:	e007      	b.n	ca52 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ca42:	7eba      	ldrb	r2, [r7, #26]
    ca44:	6a3b      	ldr	r3, [r7, #32]
    ca46:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ca48:	6a3b      	ldr	r3, [r7, #32]
    ca4a:	791b      	ldrb	r3, [r3, #4]
    ca4c:	4618      	mov	r0, r3
    ca4e:	4b1c      	ldr	r3, [pc, #112]	; (cac0 <cdcdf_acm_enable+0x164>)
    ca50:	4798      	blx	r3
			}
			desc->sod = ep;
    ca52:	683b      	ldr	r3, [r7, #0]
    ca54:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ca56:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ca58:	683b      	ldr	r3, [r7, #0]
    ca5a:	681b      	ldr	r3, [r3, #0]
    ca5c:	4618      	mov	r0, r3
    ca5e:	4b19      	ldr	r3, [pc, #100]	; (cac4 <cdcdf_acm_enable+0x168>)
    ca60:	4798      	blx	r3
    ca62:	4602      	mov	r2, r0
    ca64:	683b      	ldr	r3, [r7, #0]
    ca66:	685b      	ldr	r3, [r3, #4]
    ca68:	4619      	mov	r1, r3
    ca6a:	4610      	mov	r0, r2
    ca6c:	4b16      	ldr	r3, [pc, #88]	; (cac8 <cdcdf_acm_enable+0x16c>)
    ca6e:	4798      	blx	r3
    ca70:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    ca72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ca74:	2b00      	cmp	r3, #0
    ca76:	d1b7      	bne.n	c9e8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ca78:	683b      	ldr	r3, [r7, #0]
    ca7a:	681b      	ldr	r3, [r3, #0]
    ca7c:	4618      	mov	r0, r3
    ca7e:	4b11      	ldr	r3, [pc, #68]	; (cac4 <cdcdf_acm_enable+0x168>)
    ca80:	4798      	blx	r3
    ca82:	683b      	ldr	r3, [r7, #0]
    ca84:	685b      	ldr	r3, [r3, #4]
    ca86:	2204      	movs	r2, #4
    ca88:	4619      	mov	r1, r3
    ca8a:	4b0a      	ldr	r3, [pc, #40]	; (cab4 <cdcdf_acm_enable+0x158>)
    ca8c:	4798      	blx	r3
    ca8e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    ca90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca94:	3301      	adds	r3, #1
    ca96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ca9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca9e:	2b01      	cmp	r3, #1
    caa0:	f67f af6b 	bls.w	c97a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    caa4:	4b09      	ldr	r3, [pc, #36]	; (cacc <cdcdf_acm_enable+0x170>)
    caa6:	2201      	movs	r2, #1
    caa8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    caaa:	2300      	movs	r3, #0
}
    caac:	4618      	mov	r0, r3
    caae:	3730      	adds	r7, #48	; 0x30
    cab0:	46bd      	mov	sp, r7
    cab2:	bd80      	pop	{r7, pc}
    cab4:	0000dd1d 	.word	0x0000dd1d
    cab8:	0000c8f7 	.word	0x0000c8f7
    cabc:	00003ff1 	.word	0x00003ff1
    cac0:	000040dd 	.word	0x000040dd
    cac4:	0000c939 	.word	0x0000c939
    cac8:	0000dd79 	.word	0x0000dd79
    cacc:	2000128c 	.word	0x2000128c

0000cad0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    cad0:	b580      	push	{r7, lr}
    cad2:	b088      	sub	sp, #32
    cad4:	af00      	add	r7, sp, #0
    cad6:	6078      	str	r0, [r7, #4]
    cad8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	689b      	ldr	r3, [r3, #8]
    cade:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    cae0:	683b      	ldr	r3, [r7, #0]
    cae2:	2b00      	cmp	r3, #0
    cae4:	d00c      	beq.n	cb00 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    cae6:	683b      	ldr	r3, [r7, #0]
    cae8:	681b      	ldr	r3, [r3, #0]
    caea:	795b      	ldrb	r3, [r3, #5]
    caec:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    caee:	7c7b      	ldrb	r3, [r7, #17]
    caf0:	2b02      	cmp	r3, #2
    caf2:	d005      	beq.n	cb00 <cdcdf_acm_disable+0x30>
    caf4:	7c7b      	ldrb	r3, [r7, #17]
    caf6:	2b0a      	cmp	r3, #10
    caf8:	d002      	beq.n	cb00 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    cafa:	f06f 0309 	mvn.w	r3, #9
    cafe:	e035      	b.n	cb6c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    cb00:	2300      	movs	r3, #0
    cb02:	77fb      	strb	r3, [r7, #31]
    cb04:	e01f      	b.n	cb46 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    cb06:	7ffb      	ldrb	r3, [r7, #31]
    cb08:	69ba      	ldr	r2, [r7, #24]
    cb0a:	5cd3      	ldrb	r3, [r2, r3]
    cb0c:	2bff      	cmp	r3, #255	; 0xff
    cb0e:	d016      	beq.n	cb3e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    cb10:	7ffb      	ldrb	r3, [r7, #31]
    cb12:	69ba      	ldr	r2, [r7, #24]
    cb14:	21ff      	movs	r1, #255	; 0xff
    cb16:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    cb18:	7ffb      	ldrb	r3, [r7, #31]
    cb1a:	69ba      	ldr	r2, [r7, #24]
    cb1c:	4413      	add	r3, r2
    cb1e:	789b      	ldrb	r3, [r3, #2]
    cb20:	2bff      	cmp	r3, #255	; 0xff
    cb22:	d00d      	beq.n	cb40 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cb24:	7ffb      	ldrb	r3, [r7, #31]
    cb26:	69ba      	ldr	r2, [r7, #24]
    cb28:	4413      	add	r3, r2
    cb2a:	789b      	ldrb	r3, [r3, #2]
    cb2c:	4618      	mov	r0, r3
    cb2e:	4b11      	ldr	r3, [pc, #68]	; (cb74 <cdcdf_acm_disable+0xa4>)
    cb30:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    cb32:	7ffb      	ldrb	r3, [r7, #31]
    cb34:	69ba      	ldr	r2, [r7, #24]
    cb36:	4413      	add	r3, r2
    cb38:	22ff      	movs	r2, #255	; 0xff
    cb3a:	709a      	strb	r2, [r3, #2]
    cb3c:	e000      	b.n	cb40 <cdcdf_acm_disable+0x70>
			continue;
    cb3e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    cb40:	7ffb      	ldrb	r3, [r7, #31]
    cb42:	3301      	adds	r3, #1
    cb44:	77fb      	strb	r3, [r7, #31]
    cb46:	7ffb      	ldrb	r3, [r7, #31]
    cb48:	2b01      	cmp	r3, #1
    cb4a:	d9dc      	bls.n	cb06 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    cb4c:	69bb      	ldr	r3, [r7, #24]
    cb4e:	791b      	ldrb	r3, [r3, #4]
    cb50:	2bff      	cmp	r3, #255	; 0xff
    cb52:	d007      	beq.n	cb64 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    cb54:	69bb      	ldr	r3, [r7, #24]
    cb56:	791b      	ldrb	r3, [r3, #4]
    cb58:	4618      	mov	r0, r3
    cb5a:	4b06      	ldr	r3, [pc, #24]	; (cb74 <cdcdf_acm_disable+0xa4>)
    cb5c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    cb5e:	69bb      	ldr	r3, [r7, #24]
    cb60:	22ff      	movs	r2, #255	; 0xff
    cb62:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    cb64:	4b04      	ldr	r3, [pc, #16]	; (cb78 <cdcdf_acm_disable+0xa8>)
    cb66:	2200      	movs	r2, #0
    cb68:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    cb6a:	2300      	movs	r3, #0
}
    cb6c:	4618      	mov	r0, r3
    cb6e:	3720      	adds	r7, #32
    cb70:	46bd      	mov	sp, r7
    cb72:	bd80      	pop	{r7, pc}
    cb74:	0000408d 	.word	0x0000408d
    cb78:	2000128c 	.word	0x2000128c

0000cb7c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    cb7c:	b580      	push	{r7, lr}
    cb7e:	b084      	sub	sp, #16
    cb80:	af00      	add	r7, sp, #0
    cb82:	60f8      	str	r0, [r7, #12]
    cb84:	460b      	mov	r3, r1
    cb86:	607a      	str	r2, [r7, #4]
    cb88:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    cb8a:	7afb      	ldrb	r3, [r7, #11]
    cb8c:	2b01      	cmp	r3, #1
    cb8e:	d009      	beq.n	cba4 <cdcdf_acm_ctrl+0x28>
    cb90:	2b02      	cmp	r3, #2
    cb92:	d00d      	beq.n	cbb0 <cdcdf_acm_ctrl+0x34>
    cb94:	2b00      	cmp	r3, #0
    cb96:	d10e      	bne.n	cbb6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    cb98:	6879      	ldr	r1, [r7, #4]
    cb9a:	68f8      	ldr	r0, [r7, #12]
    cb9c:	4b09      	ldr	r3, [pc, #36]	; (cbc4 <cdcdf_acm_ctrl+0x48>)
    cb9e:	4798      	blx	r3
    cba0:	4603      	mov	r3, r0
    cba2:	e00a      	b.n	cbba <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    cba4:	6879      	ldr	r1, [r7, #4]
    cba6:	68f8      	ldr	r0, [r7, #12]
    cba8:	4b07      	ldr	r3, [pc, #28]	; (cbc8 <cdcdf_acm_ctrl+0x4c>)
    cbaa:	4798      	blx	r3
    cbac:	4603      	mov	r3, r0
    cbae:	e004      	b.n	cbba <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    cbb0:	f06f 031a 	mvn.w	r3, #26
    cbb4:	e001      	b.n	cbba <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    cbb6:	f06f 030c 	mvn.w	r3, #12
	}
}
    cbba:	4618      	mov	r0, r3
    cbbc:	3710      	adds	r7, #16
    cbbe:	46bd      	mov	sp, r7
    cbc0:	bd80      	pop	{r7, pc}
    cbc2:	bf00      	nop
    cbc4:	0000c95d 	.word	0x0000c95d
    cbc8:	0000cad1 	.word	0x0000cad1

0000cbcc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cbcc:	b590      	push	{r4, r7, lr}
    cbce:	b087      	sub	sp, #28
    cbd0:	af00      	add	r7, sp, #0
    cbd2:	4603      	mov	r3, r0
    cbd4:	6039      	str	r1, [r7, #0]
    cbd6:	71fb      	strb	r3, [r7, #7]
    cbd8:	4613      	mov	r3, r2
    cbda:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    cbdc:	683b      	ldr	r3, [r7, #0]
    cbde:	799a      	ldrb	r2, [r3, #6]
    cbe0:	79db      	ldrb	r3, [r3, #7]
    cbe2:	021b      	lsls	r3, r3, #8
    cbe4:	4313      	orrs	r3, r2
    cbe6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cbe8:	4b2b      	ldr	r3, [pc, #172]	; (cc98 <cdcdf_acm_set_req+0xcc>)
    cbea:	4798      	blx	r3
    cbec:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    cbee:	683b      	ldr	r3, [r7, #0]
    cbf0:	785b      	ldrb	r3, [r3, #1]
    cbf2:	2b20      	cmp	r3, #32
    cbf4:	d002      	beq.n	cbfc <cdcdf_acm_set_req+0x30>
    cbf6:	2b22      	cmp	r3, #34	; 0x22
    cbf8:	d034      	beq.n	cc64 <cdcdf_acm_set_req+0x98>
    cbfa:	e046      	b.n	cc8a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cbfc:	8afb      	ldrh	r3, [r7, #22]
    cbfe:	2b07      	cmp	r3, #7
    cc00:	d002      	beq.n	cc08 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    cc02:	f04f 33ff 	mov.w	r3, #4294967295
    cc06:	e042      	b.n	cc8e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    cc08:	79bb      	ldrb	r3, [r7, #6]
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	d107      	bne.n	cc1e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cc0e:	8afa      	ldrh	r2, [r7, #22]
    cc10:	79f8      	ldrb	r0, [r7, #7]
    cc12:	2300      	movs	r3, #0
    cc14:	6939      	ldr	r1, [r7, #16]
    cc16:	4c21      	ldr	r4, [pc, #132]	; (cc9c <cdcdf_acm_set_req+0xd0>)
    cc18:	47a0      	blx	r4
    cc1a:	4603      	mov	r3, r0
    cc1c:	e037      	b.n	cc8e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cc1e:	693a      	ldr	r2, [r7, #16]
    cc20:	f107 0308 	add.w	r3, r7, #8
    cc24:	6810      	ldr	r0, [r2, #0]
    cc26:	6018      	str	r0, [r3, #0]
    cc28:	8891      	ldrh	r1, [r2, #4]
    cc2a:	7992      	ldrb	r2, [r2, #6]
    cc2c:	8099      	strh	r1, [r3, #4]
    cc2e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cc30:	4b1b      	ldr	r3, [pc, #108]	; (cca0 <cdcdf_acm_set_req+0xd4>)
    cc32:	681b      	ldr	r3, [r3, #0]
    cc34:	2b00      	cmp	r3, #0
    cc36:	d008      	beq.n	cc4a <cdcdf_acm_set_req+0x7e>
    cc38:	4b19      	ldr	r3, [pc, #100]	; (cca0 <cdcdf_acm_set_req+0xd4>)
    cc3a:	681b      	ldr	r3, [r3, #0]
    cc3c:	f107 0208 	add.w	r2, r7, #8
    cc40:	4610      	mov	r0, r2
    cc42:	4798      	blx	r3
    cc44:	4603      	mov	r3, r0
    cc46:	2b00      	cmp	r3, #0
    cc48:	d00a      	beq.n	cc60 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    cc4a:	4b16      	ldr	r3, [pc, #88]	; (cca4 <cdcdf_acm_set_req+0xd8>)
    cc4c:	f107 0208 	add.w	r2, r7, #8
    cc50:	e892 0003 	ldmia.w	r2, {r0, r1}
    cc54:	6018      	str	r0, [r3, #0]
    cc56:	3304      	adds	r3, #4
    cc58:	8019      	strh	r1, [r3, #0]
    cc5a:	3302      	adds	r3, #2
    cc5c:	0c0a      	lsrs	r2, r1, #16
    cc5e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    cc60:	2300      	movs	r3, #0
    cc62:	e014      	b.n	cc8e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    cc64:	2300      	movs	r3, #0
    cc66:	2200      	movs	r2, #0
    cc68:	2100      	movs	r1, #0
    cc6a:	2000      	movs	r0, #0
    cc6c:	4c0b      	ldr	r4, [pc, #44]	; (cc9c <cdcdf_acm_set_req+0xd0>)
    cc6e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    cc70:	4b0d      	ldr	r3, [pc, #52]	; (cca8 <cdcdf_acm_set_req+0xdc>)
    cc72:	681b      	ldr	r3, [r3, #0]
    cc74:	2b00      	cmp	r3, #0
    cc76:	d006      	beq.n	cc86 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    cc78:	4b0b      	ldr	r3, [pc, #44]	; (cca8 <cdcdf_acm_set_req+0xdc>)
    cc7a:	681b      	ldr	r3, [r3, #0]
    cc7c:	683a      	ldr	r2, [r7, #0]
    cc7e:	8852      	ldrh	r2, [r2, #2]
    cc80:	b292      	uxth	r2, r2
    cc82:	4610      	mov	r0, r2
    cc84:	4798      	blx	r3
		}
		return ERR_NONE;
    cc86:	2300      	movs	r3, #0
    cc88:	e001      	b.n	cc8e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    cc8a:	f06f 030c 	mvn.w	r3, #12
	}
}
    cc8e:	4618      	mov	r0, r3
    cc90:	371c      	adds	r7, #28
    cc92:	46bd      	mov	sp, r7
    cc94:	bd90      	pop	{r4, r7, pc}
    cc96:	bf00      	nop
    cc98:	0000dc19 	.word	0x0000dc19
    cc9c:	0000da8d 	.word	0x0000da8d
    cca0:	200012a0 	.word	0x200012a0
    cca4:	20001294 	.word	0x20001294
    cca8:	2000129c 	.word	0x2000129c

0000ccac <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ccac:	b590      	push	{r4, r7, lr}
    ccae:	b085      	sub	sp, #20
    ccb0:	af00      	add	r7, sp, #0
    ccb2:	4603      	mov	r3, r0
    ccb4:	6039      	str	r1, [r7, #0]
    ccb6:	71fb      	strb	r3, [r7, #7]
    ccb8:	4613      	mov	r3, r2
    ccba:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    ccbc:	683b      	ldr	r3, [r7, #0]
    ccbe:	799a      	ldrb	r2, [r3, #6]
    ccc0:	79db      	ldrb	r3, [r3, #7]
    ccc2:	021b      	lsls	r3, r3, #8
    ccc4:	4313      	orrs	r3, r2
    ccc6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    ccc8:	79bb      	ldrb	r3, [r7, #6]
    ccca:	2b01      	cmp	r3, #1
    cccc:	d101      	bne.n	ccd2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    ccce:	2300      	movs	r3, #0
    ccd0:	e013      	b.n	ccfa <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    ccd2:	683b      	ldr	r3, [r7, #0]
    ccd4:	785b      	ldrb	r3, [r3, #1]
    ccd6:	2b21      	cmp	r3, #33	; 0x21
    ccd8:	d10d      	bne.n	ccf6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ccda:	89fb      	ldrh	r3, [r7, #14]
    ccdc:	2b07      	cmp	r3, #7
    ccde:	d002      	beq.n	cce6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    cce0:	f04f 33ff 	mov.w	r3, #4294967295
    cce4:	e009      	b.n	ccfa <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cce6:	89fa      	ldrh	r2, [r7, #14]
    cce8:	79f8      	ldrb	r0, [r7, #7]
    ccea:	2300      	movs	r3, #0
    ccec:	4905      	ldr	r1, [pc, #20]	; (cd04 <cdcdf_acm_get_req+0x58>)
    ccee:	4c06      	ldr	r4, [pc, #24]	; (cd08 <cdcdf_acm_get_req+0x5c>)
    ccf0:	47a0      	blx	r4
    ccf2:	4603      	mov	r3, r0
    ccf4:	e001      	b.n	ccfa <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    ccf6:	f06f 030c 	mvn.w	r3, #12
	}
}
    ccfa:	4618      	mov	r0, r3
    ccfc:	3714      	adds	r7, #20
    ccfe:	46bd      	mov	sp, r7
    cd00:	bd90      	pop	{r4, r7, pc}
    cd02:	bf00      	nop
    cd04:	20001294 	.word	0x20001294
    cd08:	0000da8d 	.word	0x0000da8d

0000cd0c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cd0c:	b580      	push	{r7, lr}
    cd0e:	b082      	sub	sp, #8
    cd10:	af00      	add	r7, sp, #0
    cd12:	4603      	mov	r3, r0
    cd14:	6039      	str	r1, [r7, #0]
    cd16:	71fb      	strb	r3, [r7, #7]
    cd18:	4613      	mov	r3, r2
    cd1a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cd1c:	683b      	ldr	r3, [r7, #0]
    cd1e:	781b      	ldrb	r3, [r3, #0]
    cd20:	095b      	lsrs	r3, r3, #5
    cd22:	b2db      	uxtb	r3, r3
    cd24:	f003 0303 	and.w	r3, r3, #3
    cd28:	2b01      	cmp	r3, #1
    cd2a:	d002      	beq.n	cd32 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    cd2c:	f06f 0309 	mvn.w	r3, #9
    cd30:	e026      	b.n	cd80 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    cd32:	683b      	ldr	r3, [r7, #0]
    cd34:	889b      	ldrh	r3, [r3, #4]
    cd36:	b29a      	uxth	r2, r3
    cd38:	4b13      	ldr	r3, [pc, #76]	; (cd88 <cdcdf_acm_req+0x7c>)
    cd3a:	781b      	ldrb	r3, [r3, #0]
    cd3c:	b29b      	uxth	r3, r3
    cd3e:	429a      	cmp	r2, r3
    cd40:	d007      	beq.n	cd52 <cdcdf_acm_req+0x46>
    cd42:	683b      	ldr	r3, [r7, #0]
    cd44:	889b      	ldrh	r3, [r3, #4]
    cd46:	b29a      	uxth	r2, r3
    cd48:	4b0f      	ldr	r3, [pc, #60]	; (cd88 <cdcdf_acm_req+0x7c>)
    cd4a:	785b      	ldrb	r3, [r3, #1]
    cd4c:	b29b      	uxth	r3, r3
    cd4e:	429a      	cmp	r2, r3
    cd50:	d114      	bne.n	cd7c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cd52:	683b      	ldr	r3, [r7, #0]
    cd54:	781b      	ldrb	r3, [r3, #0]
    cd56:	b25b      	sxtb	r3, r3
    cd58:	2b00      	cmp	r3, #0
    cd5a:	da07      	bge.n	cd6c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    cd5c:	79ba      	ldrb	r2, [r7, #6]
    cd5e:	79fb      	ldrb	r3, [r7, #7]
    cd60:	6839      	ldr	r1, [r7, #0]
    cd62:	4618      	mov	r0, r3
    cd64:	4b09      	ldr	r3, [pc, #36]	; (cd8c <cdcdf_acm_req+0x80>)
    cd66:	4798      	blx	r3
    cd68:	4603      	mov	r3, r0
    cd6a:	e009      	b.n	cd80 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cd6c:	79ba      	ldrb	r2, [r7, #6]
    cd6e:	79fb      	ldrb	r3, [r7, #7]
    cd70:	6839      	ldr	r1, [r7, #0]
    cd72:	4618      	mov	r0, r3
    cd74:	4b06      	ldr	r3, [pc, #24]	; (cd90 <cdcdf_acm_req+0x84>)
    cd76:	4798      	blx	r3
    cd78:	4603      	mov	r3, r0
    cd7a:	e001      	b.n	cd80 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cd7c:	f06f 0309 	mvn.w	r3, #9
	}
}
    cd80:	4618      	mov	r0, r3
    cd82:	3708      	adds	r7, #8
    cd84:	46bd      	mov	sp, r7
    cd86:	bd80      	pop	{r7, pc}
    cd88:	2000128c 	.word	0x2000128c
    cd8c:	0000ccad 	.word	0x0000ccad
    cd90:	0000cbcd 	.word	0x0000cbcd

0000cd94 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cd94:	b580      	push	{r7, lr}
    cd96:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cd98:	4b0b      	ldr	r3, [pc, #44]	; (cdc8 <cdcdf_acm_init+0x34>)
    cd9a:	4798      	blx	r3
    cd9c:	4603      	mov	r3, r0
    cd9e:	2b01      	cmp	r3, #1
    cda0:	d902      	bls.n	cda8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cda2:	f06f 0310 	mvn.w	r3, #16
    cda6:	e00d      	b.n	cdc4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cda8:	4b08      	ldr	r3, [pc, #32]	; (cdcc <cdcdf_acm_init+0x38>)
    cdaa:	4a09      	ldr	r2, [pc, #36]	; (cdd0 <cdcdf_acm_init+0x3c>)
    cdac:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cdae:	4b07      	ldr	r3, [pc, #28]	; (cdcc <cdcdf_acm_init+0x38>)
    cdb0:	4a08      	ldr	r2, [pc, #32]	; (cdd4 <cdcdf_acm_init+0x40>)
    cdb2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cdb4:	4805      	ldr	r0, [pc, #20]	; (cdcc <cdcdf_acm_init+0x38>)
    cdb6:	4b08      	ldr	r3, [pc, #32]	; (cdd8 <cdcdf_acm_init+0x44>)
    cdb8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cdba:	4908      	ldr	r1, [pc, #32]	; (cddc <cdcdf_acm_init+0x48>)
    cdbc:	2001      	movs	r0, #1
    cdbe:	4b08      	ldr	r3, [pc, #32]	; (cde0 <cdcdf_acm_init+0x4c>)
    cdc0:	4798      	blx	r3
	return ERR_NONE;
    cdc2:	2300      	movs	r3, #0
}
    cdc4:	4618      	mov	r0, r3
    cdc6:	bd80      	pop	{r7, pc}
    cdc8:	0000dc31 	.word	0x0000dc31
    cdcc:	20001280 	.word	0x20001280
    cdd0:	0000cb7d 	.word	0x0000cb7d
    cdd4:	2000128c 	.word	0x2000128c
    cdd8:	0000db99 	.word	0x0000db99
    cddc:	20000208 	.word	0x20000208
    cde0:	0000dac9 	.word	0x0000dac9

0000cde4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cde4:	b590      	push	{r4, r7, lr}
    cde6:	b083      	sub	sp, #12
    cde8:	af00      	add	r7, sp, #0
    cdea:	6078      	str	r0, [r7, #4]
    cdec:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cdee:	4b0b      	ldr	r3, [pc, #44]	; (ce1c <cdcdf_acm_read+0x38>)
    cdf0:	4798      	blx	r3
    cdf2:	4603      	mov	r3, r0
    cdf4:	f083 0301 	eor.w	r3, r3, #1
    cdf8:	b2db      	uxtb	r3, r3
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d002      	beq.n	ce04 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cdfe:	f06f 0310 	mvn.w	r3, #16
    ce02:	e007      	b.n	ce14 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ce04:	4b06      	ldr	r3, [pc, #24]	; (ce20 <cdcdf_acm_read+0x3c>)
    ce06:	7918      	ldrb	r0, [r3, #4]
    ce08:	2300      	movs	r3, #0
    ce0a:	683a      	ldr	r2, [r7, #0]
    ce0c:	6879      	ldr	r1, [r7, #4]
    ce0e:	4c05      	ldr	r4, [pc, #20]	; (ce24 <cdcdf_acm_read+0x40>)
    ce10:	47a0      	blx	r4
    ce12:	4603      	mov	r3, r0
}
    ce14:	4618      	mov	r0, r3
    ce16:	370c      	adds	r7, #12
    ce18:	46bd      	mov	sp, r7
    ce1a:	bd90      	pop	{r4, r7, pc}
    ce1c:	0000cf09 	.word	0x0000cf09
    ce20:	2000128c 	.word	0x2000128c
    ce24:	0000da8d 	.word	0x0000da8d

0000ce28 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    ce28:	b590      	push	{r4, r7, lr}
    ce2a:	b083      	sub	sp, #12
    ce2c:	af00      	add	r7, sp, #0
    ce2e:	6078      	str	r0, [r7, #4]
    ce30:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ce32:	4b0b      	ldr	r3, [pc, #44]	; (ce60 <cdcdf_acm_write+0x38>)
    ce34:	4798      	blx	r3
    ce36:	4603      	mov	r3, r0
    ce38:	f083 0301 	eor.w	r3, r3, #1
    ce3c:	b2db      	uxtb	r3, r3
    ce3e:	2b00      	cmp	r3, #0
    ce40:	d002      	beq.n	ce48 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    ce42:	f06f 0310 	mvn.w	r3, #16
    ce46:	e007      	b.n	ce58 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ce48:	4b06      	ldr	r3, [pc, #24]	; (ce64 <cdcdf_acm_write+0x3c>)
    ce4a:	78d8      	ldrb	r0, [r3, #3]
    ce4c:	2301      	movs	r3, #1
    ce4e:	683a      	ldr	r2, [r7, #0]
    ce50:	6879      	ldr	r1, [r7, #4]
    ce52:	4c05      	ldr	r4, [pc, #20]	; (ce68 <cdcdf_acm_write+0x40>)
    ce54:	47a0      	blx	r4
    ce56:	4603      	mov	r3, r0
}
    ce58:	4618      	mov	r0, r3
    ce5a:	370c      	adds	r7, #12
    ce5c:	46bd      	mov	sp, r7
    ce5e:	bd90      	pop	{r4, r7, pc}
    ce60:	0000cf09 	.word	0x0000cf09
    ce64:	2000128c 	.word	0x2000128c
    ce68:	0000da8d 	.word	0x0000da8d

0000ce6c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    ce6c:	b580      	push	{r7, lr}
    ce6e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    ce70:	4b05      	ldr	r3, [pc, #20]	; (ce88 <cdcdf_acm_stop_xfer+0x1c>)
    ce72:	78db      	ldrb	r3, [r3, #3]
    ce74:	4618      	mov	r0, r3
    ce76:	4b05      	ldr	r3, [pc, #20]	; (ce8c <cdcdf_acm_stop_xfer+0x20>)
    ce78:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    ce7a:	4b03      	ldr	r3, [pc, #12]	; (ce88 <cdcdf_acm_stop_xfer+0x1c>)
    ce7c:	791b      	ldrb	r3, [r3, #4]
    ce7e:	4618      	mov	r0, r3
    ce80:	4b02      	ldr	r3, [pc, #8]	; (ce8c <cdcdf_acm_stop_xfer+0x20>)
    ce82:	4798      	blx	r3
}
    ce84:	bf00      	nop
    ce86:	bd80      	pop	{r7, pc}
    ce88:	2000128c 	.word	0x2000128c
    ce8c:	000042b5 	.word	0x000042b5

0000ce90 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    ce90:	b580      	push	{r7, lr}
    ce92:	b082      	sub	sp, #8
    ce94:	af00      	add	r7, sp, #0
    ce96:	4603      	mov	r3, r0
    ce98:	6039      	str	r1, [r7, #0]
    ce9a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    ce9c:	79fb      	ldrb	r3, [r7, #7]
    ce9e:	2b03      	cmp	r3, #3
    cea0:	d822      	bhi.n	cee8 <cdcdf_acm_register_callback+0x58>
    cea2:	a201      	add	r2, pc, #4	; (adr r2, cea8 <cdcdf_acm_register_callback+0x18>)
    cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cea8:	0000ceb9 	.word	0x0000ceb9
    ceac:	0000cec9 	.word	0x0000cec9
    ceb0:	0000ced9 	.word	0x0000ced9
    ceb4:	0000cee1 	.word	0x0000cee1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    ceb8:	4b0f      	ldr	r3, [pc, #60]	; (cef8 <cdcdf_acm_register_callback+0x68>)
    ceba:	791b      	ldrb	r3, [r3, #4]
    cebc:	683a      	ldr	r2, [r7, #0]
    cebe:	2102      	movs	r1, #2
    cec0:	4618      	mov	r0, r3
    cec2:	4b0e      	ldr	r3, [pc, #56]	; (cefc <cdcdf_acm_register_callback+0x6c>)
    cec4:	4798      	blx	r3
		break;
    cec6:	e012      	b.n	ceee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cec8:	4b0b      	ldr	r3, [pc, #44]	; (cef8 <cdcdf_acm_register_callback+0x68>)
    ceca:	78db      	ldrb	r3, [r3, #3]
    cecc:	683a      	ldr	r2, [r7, #0]
    cece:	2102      	movs	r1, #2
    ced0:	4618      	mov	r0, r3
    ced2:	4b0a      	ldr	r3, [pc, #40]	; (cefc <cdcdf_acm_register_callback+0x6c>)
    ced4:	4798      	blx	r3
		break;
    ced6:	e00a      	b.n	ceee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    ced8:	4a09      	ldr	r2, [pc, #36]	; (cf00 <cdcdf_acm_register_callback+0x70>)
    ceda:	683b      	ldr	r3, [r7, #0]
    cedc:	6013      	str	r3, [r2, #0]
		break;
    cede:	e006      	b.n	ceee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cee0:	4a08      	ldr	r2, [pc, #32]	; (cf04 <cdcdf_acm_register_callback+0x74>)
    cee2:	683b      	ldr	r3, [r7, #0]
    cee4:	6013      	str	r3, [r2, #0]
		break;
    cee6:	e002      	b.n	ceee <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cee8:	f06f 030c 	mvn.w	r3, #12
    ceec:	e000      	b.n	cef0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    ceee:	2300      	movs	r3, #0
}
    cef0:	4618      	mov	r0, r3
    cef2:	3708      	adds	r7, #8
    cef4:	46bd      	mov	sp, r7
    cef6:	bd80      	pop	{r7, pc}
    cef8:	2000128c 	.word	0x2000128c
    cefc:	000043e1 	.word	0x000043e1
    cf00:	200012a0 	.word	0x200012a0
    cf04:	2000129c 	.word	0x2000129c

0000cf08 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cf08:	b480      	push	{r7}
    cf0a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cf0c:	4b03      	ldr	r3, [pc, #12]	; (cf1c <cdcdf_acm_is_enabled+0x14>)
    cf0e:	795b      	ldrb	r3, [r3, #5]
}
    cf10:	4618      	mov	r0, r3
    cf12:	46bd      	mov	sp, r7
    cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf18:	4770      	bx	lr
    cf1a:	bf00      	nop
    cf1c:	2000128c 	.word	0x2000128c

0000cf20 <usb_get_u16>:
{
    cf20:	b480      	push	{r7}
    cf22:	b083      	sub	sp, #12
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cf28:	687b      	ldr	r3, [r7, #4]
    cf2a:	781b      	ldrb	r3, [r3, #0]
    cf2c:	b29a      	uxth	r2, r3
    cf2e:	687b      	ldr	r3, [r7, #4]
    cf30:	3301      	adds	r3, #1
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	b29b      	uxth	r3, r3
    cf36:	021b      	lsls	r3, r3, #8
    cf38:	b29b      	uxth	r3, r3
    cf3a:	4413      	add	r3, r2
    cf3c:	b29b      	uxth	r3, r3
}
    cf3e:	4618      	mov	r0, r3
    cf40:	370c      	adds	r7, #12
    cf42:	46bd      	mov	sp, r7
    cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf48:	4770      	bx	lr

0000cf4a <usb_desc_len>:
{
    cf4a:	b480      	push	{r7}
    cf4c:	b083      	sub	sp, #12
    cf4e:	af00      	add	r7, sp, #0
    cf50:	6078      	str	r0, [r7, #4]
	return desc[0];
    cf52:	687b      	ldr	r3, [r7, #4]
    cf54:	781b      	ldrb	r3, [r3, #0]
}
    cf56:	4618      	mov	r0, r3
    cf58:	370c      	adds	r7, #12
    cf5a:	46bd      	mov	sp, r7
    cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf60:	4770      	bx	lr
	...

0000cf64 <usb_desc_next>:
{
    cf64:	b580      	push	{r7, lr}
    cf66:	b082      	sub	sp, #8
    cf68:	af00      	add	r7, sp, #0
    cf6a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cf6c:	6878      	ldr	r0, [r7, #4]
    cf6e:	4b05      	ldr	r3, [pc, #20]	; (cf84 <usb_desc_next+0x20>)
    cf70:	4798      	blx	r3
    cf72:	4603      	mov	r3, r0
    cf74:	461a      	mov	r2, r3
    cf76:	687b      	ldr	r3, [r7, #4]
    cf78:	4413      	add	r3, r2
}
    cf7a:	4618      	mov	r0, r3
    cf7c:	3708      	adds	r7, #8
    cf7e:	46bd      	mov	sp, r7
    cf80:	bd80      	pop	{r7, pc}
    cf82:	bf00      	nop
    cf84:	0000cf4b 	.word	0x0000cf4b

0000cf88 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	b082      	sub	sp, #8
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	3302      	adds	r3, #2
    cf94:	4618      	mov	r0, r3
    cf96:	4b03      	ldr	r3, [pc, #12]	; (cfa4 <usb_cfg_desc_total_len+0x1c>)
    cf98:	4798      	blx	r3
    cf9a:	4603      	mov	r3, r0
}
    cf9c:	4618      	mov	r0, r3
    cf9e:	3708      	adds	r7, #8
    cfa0:	46bd      	mov	sp, r7
    cfa2:	bd80      	pop	{r7, pc}
    cfa4:	0000cf21 	.word	0x0000cf21

0000cfa8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cfa8:	b590      	push	{r4, r7, lr}
    cfaa:	b085      	sub	sp, #20
    cfac:	af00      	add	r7, sp, #0
    cfae:	4603      	mov	r3, r0
    cfb0:	6039      	str	r1, [r7, #0]
    cfb2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cfb4:	2300      	movs	r3, #0
    cfb6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cfb8:	683b      	ldr	r3, [r7, #0]
    cfba:	799a      	ldrb	r2, [r3, #6]
    cfbc:	79db      	ldrb	r3, [r3, #7]
    cfbe:	021b      	lsls	r3, r3, #8
    cfc0:	4313      	orrs	r3, r2
    cfc2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cfc4:	897b      	ldrh	r3, [r7, #10]
    cfc6:	2b12      	cmp	r3, #18
    cfc8:	d901      	bls.n	cfce <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cfca:	2312      	movs	r3, #18
    cfcc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cfce:	68fb      	ldr	r3, [r7, #12]
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d10a      	bne.n	cfea <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cfd4:	4b0f      	ldr	r3, [pc, #60]	; (d014 <usbdc_get_dev_desc+0x6c>)
    cfd6:	681b      	ldr	r3, [r3, #0]
    cfd8:	6818      	ldr	r0, [r3, #0]
    cfda:	4b0e      	ldr	r3, [pc, #56]	; (d014 <usbdc_get_dev_desc+0x6c>)
    cfdc:	681b      	ldr	r3, [r3, #0]
    cfde:	685b      	ldr	r3, [r3, #4]
    cfe0:	2201      	movs	r2, #1
    cfe2:	4619      	mov	r1, r3
    cfe4:	4b0c      	ldr	r3, [pc, #48]	; (d018 <usbdc_get_dev_desc+0x70>)
    cfe6:	4798      	blx	r3
    cfe8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cfea:	68fb      	ldr	r3, [r7, #12]
    cfec:	2b00      	cmp	r3, #0
    cfee:	d101      	bne.n	cff4 <usbdc_get_dev_desc+0x4c>
		return false;
    cff0:	2300      	movs	r3, #0
    cff2:	e00b      	b.n	d00c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cff4:	897a      	ldrh	r2, [r7, #10]
    cff6:	79f8      	ldrb	r0, [r7, #7]
    cff8:	2300      	movs	r3, #0
    cffa:	68f9      	ldr	r1, [r7, #12]
    cffc:	4c07      	ldr	r4, [pc, #28]	; (d01c <usbdc_get_dev_desc+0x74>)
    cffe:	47a0      	blx	r4
    d000:	4603      	mov	r3, r0
    d002:	2b00      	cmp	r3, #0
    d004:	d001      	beq.n	d00a <usbdc_get_dev_desc+0x62>
		return false;
    d006:	2300      	movs	r3, #0
    d008:	e000      	b.n	d00c <usbdc_get_dev_desc+0x64>
	}
	return true;
    d00a:	2301      	movs	r3, #1
}
    d00c:	4618      	mov	r0, r3
    d00e:	3714      	adds	r7, #20
    d010:	46bd      	mov	sp, r7
    d012:	bd90      	pop	{r4, r7, pc}
    d014:	200012a4 	.word	0x200012a4
    d018:	0000dd1d 	.word	0x0000dd1d
    d01c:	0000da8d 	.word	0x0000da8d

0000d020 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    d020:	b590      	push	{r4, r7, lr}
    d022:	b087      	sub	sp, #28
    d024:	af00      	add	r7, sp, #0
    d026:	4603      	mov	r3, r0
    d028:	6039      	str	r1, [r7, #0]
    d02a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    d02c:	2300      	movs	r3, #0
    d02e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    d030:	683b      	ldr	r3, [r7, #0]
    d032:	799a      	ldrb	r2, [r3, #6]
    d034:	79db      	ldrb	r3, [r3, #7]
    d036:	021b      	lsls	r3, r3, #8
    d038:	4313      	orrs	r3, r2
    d03a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    d03c:	683b      	ldr	r3, [r7, #0]
    d03e:	885b      	ldrh	r3, [r3, #2]
    d040:	b29b      	uxth	r3, r3
    d042:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d044:	8a7a      	ldrh	r2, [r7, #18]
    d046:	4b1e      	ldr	r3, [pc, #120]	; (d0c0 <usbdc_get_cfg_desc+0xa0>)
    d048:	7f1b      	ldrb	r3, [r3, #28]
    d04a:	3b01      	subs	r3, #1
    d04c:	4013      	ands	r3, r2
    d04e:	2b00      	cmp	r3, #0
    d050:	bf0c      	ite	eq
    d052:	2301      	moveq	r3, #1
    d054:	2300      	movne	r3, #0
    d056:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d058:	697b      	ldr	r3, [r7, #20]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d10c      	bne.n	d078 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d05e:	4b18      	ldr	r3, [pc, #96]	; (d0c0 <usbdc_get_cfg_desc+0xa0>)
    d060:	681b      	ldr	r3, [r3, #0]
    d062:	6818      	ldr	r0, [r3, #0]
    d064:	4b16      	ldr	r3, [pc, #88]	; (d0c0 <usbdc_get_cfg_desc+0xa0>)
    d066:	681b      	ldr	r3, [r3, #0]
    d068:	6859      	ldr	r1, [r3, #4]
    d06a:	7c3b      	ldrb	r3, [r7, #16]
    d06c:	3301      	adds	r3, #1
    d06e:	b2db      	uxtb	r3, r3
    d070:	461a      	mov	r2, r3
    d072:	4b14      	ldr	r3, [pc, #80]	; (d0c4 <usbdc_get_cfg_desc+0xa4>)
    d074:	4798      	blx	r3
    d076:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    d078:	697b      	ldr	r3, [r7, #20]
    d07a:	2b00      	cmp	r3, #0
    d07c:	d101      	bne.n	d082 <usbdc_get_cfg_desc+0x62>
		return false;
    d07e:	2300      	movs	r3, #0
    d080:	e019      	b.n	d0b6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    d082:	6978      	ldr	r0, [r7, #20]
    d084:	4b10      	ldr	r3, [pc, #64]	; (d0c8 <usbdc_get_cfg_desc+0xa8>)
    d086:	4798      	blx	r3
    d088:	4603      	mov	r3, r0
    d08a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    d08c:	8a7a      	ldrh	r2, [r7, #18]
    d08e:	89fb      	ldrh	r3, [r7, #14]
    d090:	429a      	cmp	r2, r3
    d092:	d802      	bhi.n	d09a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    d094:	2300      	movs	r3, #0
    d096:	747b      	strb	r3, [r7, #17]
    d098:	e001      	b.n	d09e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    d09a:	89fb      	ldrh	r3, [r7, #14]
    d09c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d09e:	8a7a      	ldrh	r2, [r7, #18]
    d0a0:	7c7b      	ldrb	r3, [r7, #17]
    d0a2:	79f8      	ldrb	r0, [r7, #7]
    d0a4:	6979      	ldr	r1, [r7, #20]
    d0a6:	4c09      	ldr	r4, [pc, #36]	; (d0cc <usbdc_get_cfg_desc+0xac>)
    d0a8:	47a0      	blx	r4
    d0aa:	4603      	mov	r3, r0
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d001      	beq.n	d0b4 <usbdc_get_cfg_desc+0x94>
		return false;
    d0b0:	2300      	movs	r3, #0
    d0b2:	e000      	b.n	d0b6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    d0b4:	2301      	movs	r3, #1
}
    d0b6:	4618      	mov	r0, r3
    d0b8:	371c      	adds	r7, #28
    d0ba:	46bd      	mov	sp, r7
    d0bc:	bd90      	pop	{r4, r7, pc}
    d0be:	bf00      	nop
    d0c0:	200012a4 	.word	0x200012a4
    d0c4:	0000dddd 	.word	0x0000dddd
    d0c8:	0000cf89 	.word	0x0000cf89
    d0cc:	0000da8d 	.word	0x0000da8d

0000d0d0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    d0d0:	b590      	push	{r4, r7, lr}
    d0d2:	b085      	sub	sp, #20
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	4603      	mov	r3, r0
    d0d8:	6039      	str	r1, [r7, #0]
    d0da:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    d0dc:	683b      	ldr	r3, [r7, #0]
    d0de:	799a      	ldrb	r2, [r3, #6]
    d0e0:	79db      	ldrb	r3, [r3, #7]
    d0e2:	021b      	lsls	r3, r3, #8
    d0e4:	4313      	orrs	r3, r2
    d0e6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    d0e8:	683b      	ldr	r3, [r7, #0]
    d0ea:	885b      	ldrh	r3, [r3, #2]
    d0ec:	b29b      	uxth	r3, r3
    d0ee:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d0f0:	89fa      	ldrh	r2, [r7, #14]
    d0f2:	4b1a      	ldr	r3, [pc, #104]	; (d15c <usbdc_get_str_desc+0x8c>)
    d0f4:	7f1b      	ldrb	r3, [r3, #28]
    d0f6:	3b01      	subs	r3, #1
    d0f8:	4013      	ands	r3, r2
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	bf0c      	ite	eq
    d0fe:	2301      	moveq	r3, #1
    d100:	2300      	movne	r3, #0
    d102:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d104:	4b15      	ldr	r3, [pc, #84]	; (d15c <usbdc_get_str_desc+0x8c>)
    d106:	681b      	ldr	r3, [r3, #0]
    d108:	6818      	ldr	r0, [r3, #0]
    d10a:	4b14      	ldr	r3, [pc, #80]	; (d15c <usbdc_get_str_desc+0x8c>)
    d10c:	681b      	ldr	r3, [r3, #0]
    d10e:	685b      	ldr	r3, [r3, #4]
    d110:	7b3a      	ldrb	r2, [r7, #12]
    d112:	4619      	mov	r1, r3
    d114:	4b12      	ldr	r3, [pc, #72]	; (d160 <usbdc_get_str_desc+0x90>)
    d116:	4798      	blx	r3
    d118:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    d11a:	68bb      	ldr	r3, [r7, #8]
    d11c:	2b00      	cmp	r3, #0
    d11e:	d101      	bne.n	d124 <usbdc_get_str_desc+0x54>
		return false;
    d120:	2300      	movs	r3, #0
    d122:	e017      	b.n	d154 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    d124:	68bb      	ldr	r3, [r7, #8]
    d126:	781b      	ldrb	r3, [r3, #0]
    d128:	b29b      	uxth	r3, r3
    d12a:	89fa      	ldrh	r2, [r7, #14]
    d12c:	429a      	cmp	r2, r3
    d12e:	d802      	bhi.n	d136 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    d130:	2300      	movs	r3, #0
    d132:	737b      	strb	r3, [r7, #13]
    d134:	e002      	b.n	d13c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    d136:	68bb      	ldr	r3, [r7, #8]
    d138:	781b      	ldrb	r3, [r3, #0]
    d13a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d13c:	89fa      	ldrh	r2, [r7, #14]
    d13e:	7b7b      	ldrb	r3, [r7, #13]
    d140:	79f8      	ldrb	r0, [r7, #7]
    d142:	68b9      	ldr	r1, [r7, #8]
    d144:	4c07      	ldr	r4, [pc, #28]	; (d164 <usbdc_get_str_desc+0x94>)
    d146:	47a0      	blx	r4
    d148:	4603      	mov	r3, r0
    d14a:	2b00      	cmp	r3, #0
    d14c:	d001      	beq.n	d152 <usbdc_get_str_desc+0x82>
		return false;
    d14e:	2300      	movs	r3, #0
    d150:	e000      	b.n	d154 <usbdc_get_str_desc+0x84>
	}
	return true;
    d152:	2301      	movs	r3, #1
}
    d154:	4618      	mov	r0, r3
    d156:	3714      	adds	r7, #20
    d158:	46bd      	mov	sp, r7
    d15a:	bd90      	pop	{r4, r7, pc}
    d15c:	200012a4 	.word	0x200012a4
    d160:	0000de55 	.word	0x0000de55
    d164:	0000da8d 	.word	0x0000da8d

0000d168 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d168:	b580      	push	{r7, lr}
    d16a:	b084      	sub	sp, #16
    d16c:	af00      	add	r7, sp, #0
    d16e:	4603      	mov	r3, r0
    d170:	6039      	str	r1, [r7, #0]
    d172:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d174:	683b      	ldr	r3, [r7, #0]
    d176:	885b      	ldrh	r3, [r3, #2]
    d178:	b29b      	uxth	r3, r3
    d17a:	0a1b      	lsrs	r3, r3, #8
    d17c:	b29b      	uxth	r3, r3
    d17e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d180:	7bfb      	ldrb	r3, [r7, #15]
    d182:	2b02      	cmp	r3, #2
    d184:	d00d      	beq.n	d1a2 <usbdc_get_desc_req+0x3a>
    d186:	2b03      	cmp	r3, #3
    d188:	d012      	beq.n	d1b0 <usbdc_get_desc_req+0x48>
    d18a:	2b01      	cmp	r3, #1
    d18c:	d002      	beq.n	d194 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d18e:	bf00      	nop
	}
	return false;
    d190:	2300      	movs	r3, #0
    d192:	e013      	b.n	d1bc <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d194:	79fb      	ldrb	r3, [r7, #7]
    d196:	6839      	ldr	r1, [r7, #0]
    d198:	4618      	mov	r0, r3
    d19a:	4b0a      	ldr	r3, [pc, #40]	; (d1c4 <usbdc_get_desc_req+0x5c>)
    d19c:	4798      	blx	r3
    d19e:	4603      	mov	r3, r0
    d1a0:	e00c      	b.n	d1bc <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d1a2:	79fb      	ldrb	r3, [r7, #7]
    d1a4:	6839      	ldr	r1, [r7, #0]
    d1a6:	4618      	mov	r0, r3
    d1a8:	4b07      	ldr	r3, [pc, #28]	; (d1c8 <usbdc_get_desc_req+0x60>)
    d1aa:	4798      	blx	r3
    d1ac:	4603      	mov	r3, r0
    d1ae:	e005      	b.n	d1bc <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d1b0:	79fb      	ldrb	r3, [r7, #7]
    d1b2:	6839      	ldr	r1, [r7, #0]
    d1b4:	4618      	mov	r0, r3
    d1b6:	4b05      	ldr	r3, [pc, #20]	; (d1cc <usbdc_get_desc_req+0x64>)
    d1b8:	4798      	blx	r3
    d1ba:	4603      	mov	r3, r0
}
    d1bc:	4618      	mov	r0, r3
    d1be:	3710      	adds	r7, #16
    d1c0:	46bd      	mov	sp, r7
    d1c2:	bd80      	pop	{r7, pc}
    d1c4:	0000cfa9 	.word	0x0000cfa9
    d1c8:	0000d021 	.word	0x0000d021
    d1cc:	0000d0d1 	.word	0x0000d0d1

0000d1d0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d1d0:	b590      	push	{r4, r7, lr}
    d1d2:	b085      	sub	sp, #20
    d1d4:	af00      	add	r7, sp, #0
    d1d6:	4603      	mov	r3, r0
    d1d8:	6039      	str	r1, [r7, #0]
    d1da:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d1dc:	683b      	ldr	r3, [r7, #0]
    d1de:	781b      	ldrb	r3, [r3, #0]
    d1e0:	f003 031f 	and.w	r3, r3, #31
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	db1b      	blt.n	d220 <usbdc_get_status_req+0x50>
    d1e8:	2b01      	cmp	r3, #1
    d1ea:	dd02      	ble.n	d1f2 <usbdc_get_status_req+0x22>
    d1ec:	2b02      	cmp	r3, #2
    d1ee:	d003      	beq.n	d1f8 <usbdc_get_status_req+0x28>
    d1f0:	e016      	b.n	d220 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d1f2:	2300      	movs	r3, #0
    d1f4:	60fb      	str	r3, [r7, #12]
		break;
    d1f6:	e015      	b.n	d224 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d1f8:	683b      	ldr	r3, [r7, #0]
    d1fa:	889b      	ldrh	r3, [r3, #4]
    d1fc:	b29b      	uxth	r3, r3
    d1fe:	b2db      	uxtb	r3, r3
    d200:	2102      	movs	r1, #2
    d202:	4618      	mov	r0, r3
    d204:	4b0f      	ldr	r3, [pc, #60]	; (d244 <usbdc_get_status_req+0x74>)
    d206:	4798      	blx	r3
    d208:	4603      	mov	r3, r0
    d20a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d20c:	68fb      	ldr	r3, [r7, #12]
    d20e:	2b00      	cmp	r3, #0
    d210:	da01      	bge.n	d216 <usbdc_get_status_req+0x46>
			return false;
    d212:	2300      	movs	r3, #0
    d214:	e012      	b.n	d23c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d216:	68fb      	ldr	r3, [r7, #12]
    d218:	f003 0301 	and.w	r3, r3, #1
    d21c:	60fb      	str	r3, [r7, #12]
		break;
    d21e:	e001      	b.n	d224 <usbdc_get_status_req+0x54>
	default:
		return false;
    d220:	2300      	movs	r3, #0
    d222:	e00b      	b.n	d23c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d224:	4b08      	ldr	r3, [pc, #32]	; (d248 <usbdc_get_status_req+0x78>)
    d226:	695b      	ldr	r3, [r3, #20]
    d228:	89ba      	ldrh	r2, [r7, #12]
    d22a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d22c:	4b06      	ldr	r3, [pc, #24]	; (d248 <usbdc_get_status_req+0x78>)
    d22e:	6959      	ldr	r1, [r3, #20]
    d230:	79f8      	ldrb	r0, [r7, #7]
    d232:	2300      	movs	r3, #0
    d234:	2202      	movs	r2, #2
    d236:	4c05      	ldr	r4, [pc, #20]	; (d24c <usbdc_get_status_req+0x7c>)
    d238:	47a0      	blx	r4
	return true;
    d23a:	2301      	movs	r3, #1
}
    d23c:	4618      	mov	r0, r3
    d23e:	3714      	adds	r7, #20
    d240:	46bd      	mov	sp, r7
    d242:	bd90      	pop	{r4, r7, pc}
    d244:	0000438d 	.word	0x0000438d
    d248:	200012a4 	.word	0x200012a4
    d24c:	0000da8d 	.word	0x0000da8d

0000d250 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d250:	b590      	push	{r4, r7, lr}
    d252:	b085      	sub	sp, #20
    d254:	af00      	add	r7, sp, #0
    d256:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d258:	4b1f      	ldr	r3, [pc, #124]	; (d2d8 <usbdc_get_interface+0x88>)
    d25a:	691b      	ldr	r3, [r3, #16]
    d25c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d25e:	4b1e      	ldr	r3, [pc, #120]	; (d2d8 <usbdc_get_interface+0x88>)
    d260:	7f5b      	ldrb	r3, [r3, #29]
    d262:	461a      	mov	r2, r3
    d264:	687b      	ldr	r3, [r7, #4]
    d266:	889b      	ldrh	r3, [r3, #4]
    d268:	b29b      	uxth	r3, r3
    d26a:	fa42 f303 	asr.w	r3, r2, r3
    d26e:	f003 0301 	and.w	r3, r3, #1
    d272:	2b00      	cmp	r3, #0
    d274:	d128      	bne.n	d2c8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d276:	4b18      	ldr	r3, [pc, #96]	; (d2d8 <usbdc_get_interface+0x88>)
    d278:	695b      	ldr	r3, [r3, #20]
    d27a:	2200      	movs	r2, #0
    d27c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d27e:	4b16      	ldr	r3, [pc, #88]	; (d2d8 <usbdc_get_interface+0x88>)
    d280:	6959      	ldr	r1, [r3, #20]
    d282:	2300      	movs	r3, #0
    d284:	2201      	movs	r2, #1
    d286:	2000      	movs	r0, #0
    d288:	4c14      	ldr	r4, [pc, #80]	; (d2dc <usbdc_get_interface+0x8c>)
    d28a:	47a0      	blx	r4
		return true;
    d28c:	2301      	movs	r3, #1
    d28e:	e01f      	b.n	d2d0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d290:	68fb      	ldr	r3, [r7, #12]
    d292:	685b      	ldr	r3, [r3, #4]
    d294:	687a      	ldr	r2, [r7, #4]
    d296:	2102      	movs	r1, #2
    d298:	68f8      	ldr	r0, [r7, #12]
    d29a:	4798      	blx	r3
    d29c:	60b8      	str	r0, [r7, #8]
    d29e:	68bb      	ldr	r3, [r7, #8]
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	da03      	bge.n	d2ac <usbdc_get_interface+0x5c>
			func = func->next;
    d2a4:	68fb      	ldr	r3, [r7, #12]
    d2a6:	681b      	ldr	r3, [r3, #0]
    d2a8:	60fb      	str	r3, [r7, #12]
    d2aa:	e00d      	b.n	d2c8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d2ac:	4b0a      	ldr	r3, [pc, #40]	; (d2d8 <usbdc_get_interface+0x88>)
    d2ae:	695b      	ldr	r3, [r3, #20]
    d2b0:	68ba      	ldr	r2, [r7, #8]
    d2b2:	b2d2      	uxtb	r2, r2
    d2b4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d2b6:	4b08      	ldr	r3, [pc, #32]	; (d2d8 <usbdc_get_interface+0x88>)
    d2b8:	6959      	ldr	r1, [r3, #20]
    d2ba:	2300      	movs	r3, #0
    d2bc:	2201      	movs	r2, #1
    d2be:	2000      	movs	r0, #0
    d2c0:	4c06      	ldr	r4, [pc, #24]	; (d2dc <usbdc_get_interface+0x8c>)
    d2c2:	47a0      	blx	r4
			return true;
    d2c4:	2301      	movs	r3, #1
    d2c6:	e003      	b.n	d2d0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d2c8:	68fb      	ldr	r3, [r7, #12]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d1e0      	bne.n	d290 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d2ce:	2300      	movs	r3, #0
}
    d2d0:	4618      	mov	r0, r3
    d2d2:	3714      	adds	r7, #20
    d2d4:	46bd      	mov	sp, r7
    d2d6:	bd90      	pop	{r4, r7, pc}
    d2d8:	200012a4 	.word	0x200012a4
    d2dc:	0000da8d 	.word	0x0000da8d

0000d2e0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d2e0:	b590      	push	{r4, r7, lr}
    d2e2:	b083      	sub	sp, #12
    d2e4:	af00      	add	r7, sp, #0
    d2e6:	4603      	mov	r3, r0
    d2e8:	6039      	str	r1, [r7, #0]
    d2ea:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d2ec:	683b      	ldr	r3, [r7, #0]
    d2ee:	785b      	ldrb	r3, [r3, #1]
    d2f0:	2b0a      	cmp	r3, #10
    d2f2:	d83a      	bhi.n	d36a <usbdc_get_req+0x8a>
    d2f4:	a201      	add	r2, pc, #4	; (adr r2, d2fc <usbdc_get_req+0x1c>)
    d2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d2fa:	bf00      	nop
    d2fc:	0000d353 	.word	0x0000d353
    d300:	0000d36b 	.word	0x0000d36b
    d304:	0000d36b 	.word	0x0000d36b
    d308:	0000d36b 	.word	0x0000d36b
    d30c:	0000d36b 	.word	0x0000d36b
    d310:	0000d36b 	.word	0x0000d36b
    d314:	0000d329 	.word	0x0000d329
    d318:	0000d36b 	.word	0x0000d36b
    d31c:	0000d337 	.word	0x0000d337
    d320:	0000d36b 	.word	0x0000d36b
    d324:	0000d361 	.word	0x0000d361
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d328:	79fb      	ldrb	r3, [r7, #7]
    d32a:	6839      	ldr	r1, [r7, #0]
    d32c:	4618      	mov	r0, r3
    d32e:	4b11      	ldr	r3, [pc, #68]	; (d374 <usbdc_get_req+0x94>)
    d330:	4798      	blx	r3
    d332:	4603      	mov	r3, r0
    d334:	e01a      	b.n	d36c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d336:	4b10      	ldr	r3, [pc, #64]	; (d378 <usbdc_get_req+0x98>)
    d338:	695b      	ldr	r3, [r3, #20]
    d33a:	4a0f      	ldr	r2, [pc, #60]	; (d378 <usbdc_get_req+0x98>)
    d33c:	7ed2      	ldrb	r2, [r2, #27]
    d33e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d340:	4b0d      	ldr	r3, [pc, #52]	; (d378 <usbdc_get_req+0x98>)
    d342:	6959      	ldr	r1, [r3, #20]
    d344:	79f8      	ldrb	r0, [r7, #7]
    d346:	2300      	movs	r3, #0
    d348:	2201      	movs	r2, #1
    d34a:	4c0c      	ldr	r4, [pc, #48]	; (d37c <usbdc_get_req+0x9c>)
    d34c:	47a0      	blx	r4
		return true;
    d34e:	2301      	movs	r3, #1
    d350:	e00c      	b.n	d36c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d352:	79fb      	ldrb	r3, [r7, #7]
    d354:	6839      	ldr	r1, [r7, #0]
    d356:	4618      	mov	r0, r3
    d358:	4b09      	ldr	r3, [pc, #36]	; (d380 <usbdc_get_req+0xa0>)
    d35a:	4798      	blx	r3
    d35c:	4603      	mov	r3, r0
    d35e:	e005      	b.n	d36c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d360:	6838      	ldr	r0, [r7, #0]
    d362:	4b08      	ldr	r3, [pc, #32]	; (d384 <usbdc_get_req+0xa4>)
    d364:	4798      	blx	r3
    d366:	4603      	mov	r3, r0
    d368:	e000      	b.n	d36c <usbdc_get_req+0x8c>
	default:
		return false;
    d36a:	2300      	movs	r3, #0
	}
}
    d36c:	4618      	mov	r0, r3
    d36e:	370c      	adds	r7, #12
    d370:	46bd      	mov	sp, r7
    d372:	bd90      	pop	{r4, r7, pc}
    d374:	0000d169 	.word	0x0000d169
    d378:	200012a4 	.word	0x200012a4
    d37c:	0000da8d 	.word	0x0000da8d
    d380:	0000d1d1 	.word	0x0000d1d1
    d384:	0000d251 	.word	0x0000d251

0000d388 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d388:	b590      	push	{r4, r7, lr}
    d38a:	b083      	sub	sp, #12
    d38c:	af00      	add	r7, sp, #0
    d38e:	4603      	mov	r3, r0
    d390:	6039      	str	r1, [r7, #0]
    d392:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d394:	683b      	ldr	r3, [r7, #0]
    d396:	781b      	ldrb	r3, [r3, #0]
    d398:	f003 031f 	and.w	r3, r3, #31
    d39c:	2b02      	cmp	r3, #2
    d39e:	d116      	bne.n	d3ce <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d3a0:	683b      	ldr	r3, [r7, #0]
    d3a2:	88db      	ldrh	r3, [r3, #6]
    d3a4:	b29b      	uxth	r3, r3
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	d001      	beq.n	d3ae <usbdc_clear_ftr_req+0x26>
			return false;
    d3aa:	2300      	movs	r3, #0
    d3ac:	e010      	b.n	d3d0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d3ae:	683b      	ldr	r3, [r7, #0]
    d3b0:	889b      	ldrh	r3, [r3, #4]
    d3b2:	b29b      	uxth	r3, r3
    d3b4:	b2db      	uxtb	r3, r3
    d3b6:	2100      	movs	r1, #0
    d3b8:	4618      	mov	r0, r3
    d3ba:	4b07      	ldr	r3, [pc, #28]	; (d3d8 <usbdc_clear_ftr_req+0x50>)
    d3bc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d3be:	79f8      	ldrb	r0, [r7, #7]
    d3c0:	2301      	movs	r3, #1
    d3c2:	2200      	movs	r2, #0
    d3c4:	2100      	movs	r1, #0
    d3c6:	4c05      	ldr	r4, [pc, #20]	; (d3dc <usbdc_clear_ftr_req+0x54>)
    d3c8:	47a0      	blx	r4
		return true;
    d3ca:	2301      	movs	r3, #1
    d3cc:	e000      	b.n	d3d0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d3ce:	2300      	movs	r3, #0
	}
}
    d3d0:	4618      	mov	r0, r3
    d3d2:	370c      	adds	r7, #12
    d3d4:	46bd      	mov	sp, r7
    d3d6:	bd90      	pop	{r4, r7, pc}
    d3d8:	0000438d 	.word	0x0000438d
    d3dc:	0000da8d 	.word	0x0000da8d

0000d3e0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d3e0:	b590      	push	{r4, r7, lr}
    d3e2:	b083      	sub	sp, #12
    d3e4:	af00      	add	r7, sp, #0
    d3e6:	4603      	mov	r3, r0
    d3e8:	6039      	str	r1, [r7, #0]
    d3ea:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d3ec:	683b      	ldr	r3, [r7, #0]
    d3ee:	781b      	ldrb	r3, [r3, #0]
    d3f0:	f003 031f 	and.w	r3, r3, #31
    d3f4:	2b02      	cmp	r3, #2
    d3f6:	d116      	bne.n	d426 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d3f8:	683b      	ldr	r3, [r7, #0]
    d3fa:	88db      	ldrh	r3, [r3, #6]
    d3fc:	b29b      	uxth	r3, r3
    d3fe:	2b00      	cmp	r3, #0
    d400:	d001      	beq.n	d406 <usbdc_set_ftr_req+0x26>
			return false;
    d402:	2300      	movs	r3, #0
    d404:	e010      	b.n	d428 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d406:	683b      	ldr	r3, [r7, #0]
    d408:	889b      	ldrh	r3, [r3, #4]
    d40a:	b29b      	uxth	r3, r3
    d40c:	b2db      	uxtb	r3, r3
    d40e:	2101      	movs	r1, #1
    d410:	4618      	mov	r0, r3
    d412:	4b07      	ldr	r3, [pc, #28]	; (d430 <usbdc_set_ftr_req+0x50>)
    d414:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d416:	79f8      	ldrb	r0, [r7, #7]
    d418:	2301      	movs	r3, #1
    d41a:	2200      	movs	r2, #0
    d41c:	2100      	movs	r1, #0
    d41e:	4c05      	ldr	r4, [pc, #20]	; (d434 <usbdc_set_ftr_req+0x54>)
    d420:	47a0      	blx	r4
		return true;
    d422:	2301      	movs	r3, #1
    d424:	e000      	b.n	d428 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d426:	2300      	movs	r3, #0
	}
}
    d428:	4618      	mov	r0, r3
    d42a:	370c      	adds	r7, #12
    d42c:	46bd      	mov	sp, r7
    d42e:	bd90      	pop	{r4, r7, pc}
    d430:	0000438d 	.word	0x0000438d
    d434:	0000da8d 	.word	0x0000da8d

0000d438 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d438:	b580      	push	{r7, lr}
    d43a:	b082      	sub	sp, #8
    d43c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d43e:	4b0a      	ldr	r3, [pc, #40]	; (d468 <usbdc_unconfig+0x30>)
    d440:	691b      	ldr	r3, [r3, #16]
    d442:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d444:	e008      	b.n	d458 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d446:	687b      	ldr	r3, [r7, #4]
    d448:	685b      	ldr	r3, [r3, #4]
    d44a:	2200      	movs	r2, #0
    d44c:	2101      	movs	r1, #1
    d44e:	6878      	ldr	r0, [r7, #4]
    d450:	4798      	blx	r3
		func = func->next;
    d452:	687b      	ldr	r3, [r7, #4]
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d458:	687b      	ldr	r3, [r7, #4]
    d45a:	2b00      	cmp	r3, #0
    d45c:	d1f3      	bne.n	d446 <usbdc_unconfig+0xe>
	}
}
    d45e:	bf00      	nop
    d460:	3708      	adds	r7, #8
    d462:	46bd      	mov	sp, r7
    d464:	bd80      	pop	{r7, pc}
    d466:	bf00      	nop
    d468:	200012a4 	.word	0x200012a4

0000d46c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d46c:	b580      	push	{r7, lr}
    d46e:	b088      	sub	sp, #32
    d470:	af00      	add	r7, sp, #0
    d472:	4603      	mov	r3, r0
    d474:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d476:	2300      	movs	r3, #0
    d478:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d47a:	23ff      	movs	r3, #255	; 0xff
    d47c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d47e:	79fb      	ldrb	r3, [r7, #7]
    d480:	2b00      	cmp	r3, #0
    d482:	d103      	bne.n	d48c <usbdc_set_config+0x20>
		usbdc_unconfig();
    d484:	4b2e      	ldr	r3, [pc, #184]	; (d540 <usbdc_set_config+0xd4>)
    d486:	4798      	blx	r3
		return true;
    d488:	2301      	movs	r3, #1
    d48a:	e055      	b.n	d538 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d48c:	69bb      	ldr	r3, [r7, #24]
    d48e:	2b00      	cmp	r3, #0
    d490:	d10a      	bne.n	d4a8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d492:	4b2c      	ldr	r3, [pc, #176]	; (d544 <usbdc_set_config+0xd8>)
    d494:	681b      	ldr	r3, [r3, #0]
    d496:	6818      	ldr	r0, [r3, #0]
    d498:	4b2a      	ldr	r3, [pc, #168]	; (d544 <usbdc_set_config+0xd8>)
    d49a:	681b      	ldr	r3, [r3, #0]
    d49c:	685b      	ldr	r3, [r3, #4]
    d49e:	79fa      	ldrb	r2, [r7, #7]
    d4a0:	4619      	mov	r1, r3
    d4a2:	4b29      	ldr	r3, [pc, #164]	; (d548 <usbdc_set_config+0xdc>)
    d4a4:	4798      	blx	r3
    d4a6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d4a8:	69bb      	ldr	r3, [r7, #24]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d101      	bne.n	d4b2 <usbdc_set_config+0x46>
		return false;
    d4ae:	2300      	movs	r3, #0
    d4b0:	e042      	b.n	d538 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d4b2:	69b8      	ldr	r0, [r7, #24]
    d4b4:	4b25      	ldr	r3, [pc, #148]	; (d54c <usbdc_set_config+0xe0>)
    d4b6:	4798      	blx	r3
    d4b8:	4603      	mov	r3, r0
    d4ba:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d4bc:	8abb      	ldrh	r3, [r7, #20]
    d4be:	69ba      	ldr	r2, [r7, #24]
    d4c0:	4413      	add	r3, r2
    d4c2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d4c4:	693b      	ldr	r3, [r7, #16]
    d4c6:	2204      	movs	r2, #4
    d4c8:	4619      	mov	r1, r3
    d4ca:	69b8      	ldr	r0, [r7, #24]
    d4cc:	4b20      	ldr	r3, [pc, #128]	; (d550 <usbdc_set_config+0xe4>)
    d4ce:	4798      	blx	r3
    d4d0:	4603      	mov	r3, r0
    d4d2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d4d4:	e02c      	b.n	d530 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	3302      	adds	r3, #2
    d4da:	781b      	ldrb	r3, [r3, #0]
    d4dc:	7dfa      	ldrb	r2, [r7, #23]
    d4de:	429a      	cmp	r2, r3
    d4e0:	d018      	beq.n	d514 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d4e2:	68fb      	ldr	r3, [r7, #12]
    d4e4:	789b      	ldrb	r3, [r3, #2]
    d4e6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d4e8:	4b16      	ldr	r3, [pc, #88]	; (d544 <usbdc_set_config+0xd8>)
    d4ea:	691b      	ldr	r3, [r3, #16]
    d4ec:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d4ee:	e00c      	b.n	d50a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d4f0:	69fb      	ldr	r3, [r7, #28]
    d4f2:	685b      	ldr	r3, [r3, #4]
    d4f4:	f107 020c 	add.w	r2, r7, #12
    d4f8:	2100      	movs	r1, #0
    d4fa:	69f8      	ldr	r0, [r7, #28]
    d4fc:	4798      	blx	r3
    d4fe:	4603      	mov	r3, r0
    d500:	2b00      	cmp	r3, #0
    d502:	d006      	beq.n	d512 <usbdc_set_config+0xa6>
					func = func->next;
    d504:	69fb      	ldr	r3, [r7, #28]
    d506:	681b      	ldr	r3, [r3, #0]
    d508:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d50a:	69fb      	ldr	r3, [r7, #28]
    d50c:	2b00      	cmp	r3, #0
    d50e:	d1ef      	bne.n	d4f0 <usbdc_set_config+0x84>
    d510:	e000      	b.n	d514 <usbdc_set_config+0xa8>
				} else {
					break;
    d512:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d514:	68fb      	ldr	r3, [r7, #12]
    d516:	4618      	mov	r0, r3
    d518:	4b0e      	ldr	r3, [pc, #56]	; (d554 <usbdc_set_config+0xe8>)
    d51a:	4798      	blx	r3
    d51c:	4603      	mov	r3, r0
    d51e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d520:	68fb      	ldr	r3, [r7, #12]
    d522:	6939      	ldr	r1, [r7, #16]
    d524:	2204      	movs	r2, #4
    d526:	4618      	mov	r0, r3
    d528:	4b09      	ldr	r3, [pc, #36]	; (d550 <usbdc_set_config+0xe4>)
    d52a:	4798      	blx	r3
    d52c:	4603      	mov	r3, r0
    d52e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d530:	68fb      	ldr	r3, [r7, #12]
    d532:	2b00      	cmp	r3, #0
    d534:	d1cf      	bne.n	d4d6 <usbdc_set_config+0x6a>
	}
	return true;
    d536:	2301      	movs	r3, #1
}
    d538:	4618      	mov	r0, r3
    d53a:	3720      	adds	r7, #32
    d53c:	46bd      	mov	sp, r7
    d53e:	bd80      	pop	{r7, pc}
    d540:	0000d439 	.word	0x0000d439
    d544:	200012a4 	.word	0x200012a4
    d548:	0000dddd 	.word	0x0000dddd
    d54c:	0000cf89 	.word	0x0000cf89
    d550:	0000dd1d 	.word	0x0000dd1d
    d554:	0000cf65 	.word	0x0000cf65

0000d558 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d558:	b580      	push	{r7, lr}
    d55a:	b082      	sub	sp, #8
    d55c:	af00      	add	r7, sp, #0
    d55e:	4603      	mov	r3, r0
    d560:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d562:	79fb      	ldrb	r3, [r7, #7]
    d564:	4618      	mov	r0, r3
    d566:	4b03      	ldr	r3, [pc, #12]	; (d574 <usbdc_set_address+0x1c>)
    d568:	4798      	blx	r3
}
    d56a:	bf00      	nop
    d56c:	3708      	adds	r7, #8
    d56e:	46bd      	mov	sp, r7
    d570:	bd80      	pop	{r7, pc}
    d572:	bf00      	nop
    d574:	00003fa9 	.word	0x00003fa9

0000d578 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d578:	b590      	push	{r4, r7, lr}
    d57a:	b087      	sub	sp, #28
    d57c:	af00      	add	r7, sp, #0
    d57e:	4603      	mov	r3, r0
    d580:	460a      	mov	r2, r1
    d582:	80fb      	strh	r3, [r7, #6]
    d584:	4613      	mov	r3, r2
    d586:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d588:	2300      	movs	r3, #0
    d58a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d58c:	693b      	ldr	r3, [r7, #16]
    d58e:	2b00      	cmp	r3, #0
    d590:	d10b      	bne.n	d5aa <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d592:	4b43      	ldr	r3, [pc, #268]	; (d6a0 <usbdc_set_interface+0x128>)
    d594:	681b      	ldr	r3, [r3, #0]
    d596:	6818      	ldr	r0, [r3, #0]
    d598:	4b41      	ldr	r3, [pc, #260]	; (d6a0 <usbdc_set_interface+0x128>)
    d59a:	681b      	ldr	r3, [r3, #0]
    d59c:	6859      	ldr	r1, [r3, #4]
    d59e:	4b40      	ldr	r3, [pc, #256]	; (d6a0 <usbdc_set_interface+0x128>)
    d5a0:	7edb      	ldrb	r3, [r3, #27]
    d5a2:	461a      	mov	r2, r3
    d5a4:	4b3f      	ldr	r3, [pc, #252]	; (d6a4 <usbdc_set_interface+0x12c>)
    d5a6:	4798      	blx	r3
    d5a8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d5aa:	693b      	ldr	r3, [r7, #16]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d101      	bne.n	d5b4 <usbdc_set_interface+0x3c>
		return false;
    d5b0:	2300      	movs	r3, #0
    d5b2:	e071      	b.n	d698 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d5b4:	693b      	ldr	r3, [r7, #16]
    d5b6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d5b8:	6938      	ldr	r0, [r7, #16]
    d5ba:	4b3b      	ldr	r3, [pc, #236]	; (d6a8 <usbdc_set_interface+0x130>)
    d5bc:	4798      	blx	r3
    d5be:	4603      	mov	r3, r0
    d5c0:	461a      	mov	r2, r3
    d5c2:	693b      	ldr	r3, [r7, #16]
    d5c4:	4413      	add	r3, r2
    d5c6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d5c8:	68bb      	ldr	r3, [r7, #8]
    d5ca:	68f9      	ldr	r1, [r7, #12]
    d5cc:	2204      	movs	r2, #4
    d5ce:	4618      	mov	r0, r3
    d5d0:	4b36      	ldr	r3, [pc, #216]	; (d6ac <usbdc_set_interface+0x134>)
    d5d2:	4798      	blx	r3
    d5d4:	6138      	str	r0, [r7, #16]
    d5d6:	693b      	ldr	r3, [r7, #16]
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d113      	bne.n	d604 <usbdc_set_interface+0x8c>
		return false;
    d5dc:	2300      	movs	r3, #0
    d5de:	e05b      	b.n	d698 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d5e0:	68bb      	ldr	r3, [r7, #8]
    d5e2:	4618      	mov	r0, r3
    d5e4:	4b32      	ldr	r3, [pc, #200]	; (d6b0 <usbdc_set_interface+0x138>)
    d5e6:	4798      	blx	r3
    d5e8:	4603      	mov	r3, r0
    d5ea:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d5ec:	68bb      	ldr	r3, [r7, #8]
    d5ee:	68f9      	ldr	r1, [r7, #12]
    d5f0:	2204      	movs	r2, #4
    d5f2:	4618      	mov	r0, r3
    d5f4:	4b2d      	ldr	r3, [pc, #180]	; (d6ac <usbdc_set_interface+0x134>)
    d5f6:	4798      	blx	r3
    d5f8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d5fa:	693b      	ldr	r3, [r7, #16]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d101      	bne.n	d604 <usbdc_set_interface+0x8c>
			return false;
    d600:	2300      	movs	r3, #0
    d602:	e049      	b.n	d698 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d604:	693b      	ldr	r3, [r7, #16]
    d606:	3302      	adds	r3, #2
    d608:	781b      	ldrb	r3, [r3, #0]
    d60a:	b29b      	uxth	r3, r3
    d60c:	88ba      	ldrh	r2, [r7, #4]
    d60e:	429a      	cmp	r2, r3
    d610:	d1e6      	bne.n	d5e0 <usbdc_set_interface+0x68>
    d612:	693b      	ldr	r3, [r7, #16]
    d614:	3303      	adds	r3, #3
    d616:	781b      	ldrb	r3, [r3, #0]
    d618:	b29b      	uxth	r3, r3
    d61a:	88fa      	ldrh	r2, [r7, #6]
    d61c:	429a      	cmp	r2, r3
    d61e:	d1df      	bne.n	d5e0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d620:	693b      	ldr	r3, [r7, #16]
    d622:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d624:	4b1e      	ldr	r3, [pc, #120]	; (d6a0 <usbdc_set_interface+0x128>)
    d626:	691b      	ldr	r3, [r3, #16]
    d628:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d62a:	e031      	b.n	d690 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d62c:	697b      	ldr	r3, [r7, #20]
    d62e:	685b      	ldr	r3, [r3, #4]
    d630:	f107 0208 	add.w	r2, r7, #8
    d634:	2101      	movs	r1, #1
    d636:	6978      	ldr	r0, [r7, #20]
    d638:	4798      	blx	r3
    d63a:	4603      	mov	r3, r0
    d63c:	2b00      	cmp	r3, #0
    d63e:	d003      	beq.n	d648 <usbdc_set_interface+0xd0>
			func = func->next;
    d640:	697b      	ldr	r3, [r7, #20]
    d642:	681b      	ldr	r3, [r3, #0]
    d644:	617b      	str	r3, [r7, #20]
    d646:	e023      	b.n	d690 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d648:	697b      	ldr	r3, [r7, #20]
    d64a:	685b      	ldr	r3, [r3, #4]
    d64c:	f107 0208 	add.w	r2, r7, #8
    d650:	2100      	movs	r1, #0
    d652:	6978      	ldr	r0, [r7, #20]
    d654:	4798      	blx	r3
    d656:	4603      	mov	r3, r0
    d658:	2b00      	cmp	r3, #0
    d65a:	d117      	bne.n	d68c <usbdc_set_interface+0x114>
			if (alt_set) {
    d65c:	88fb      	ldrh	r3, [r7, #6]
    d65e:	2b00      	cmp	r3, #0
    d660:	d00c      	beq.n	d67c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d662:	4b0f      	ldr	r3, [pc, #60]	; (d6a0 <usbdc_set_interface+0x128>)
    d664:	7f5b      	ldrb	r3, [r3, #29]
    d666:	b25a      	sxtb	r2, r3
    d668:	88bb      	ldrh	r3, [r7, #4]
    d66a:	2101      	movs	r1, #1
    d66c:	fa01 f303 	lsl.w	r3, r1, r3
    d670:	b25b      	sxtb	r3, r3
    d672:	4313      	orrs	r3, r2
    d674:	b25b      	sxtb	r3, r3
    d676:	b2da      	uxtb	r2, r3
    d678:	4b09      	ldr	r3, [pc, #36]	; (d6a0 <usbdc_set_interface+0x128>)
    d67a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d67c:	2300      	movs	r3, #0
    d67e:	2200      	movs	r2, #0
    d680:	2100      	movs	r1, #0
    d682:	2000      	movs	r0, #0
    d684:	4c0b      	ldr	r4, [pc, #44]	; (d6b4 <usbdc_set_interface+0x13c>)
    d686:	47a0      	blx	r4
			return true;
    d688:	2301      	movs	r3, #1
    d68a:	e005      	b.n	d698 <usbdc_set_interface+0x120>
		} else {
			return false;
    d68c:	2300      	movs	r3, #0
    d68e:	e003      	b.n	d698 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d690:	697b      	ldr	r3, [r7, #20]
    d692:	2b00      	cmp	r3, #0
    d694:	d1ca      	bne.n	d62c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d696:	2300      	movs	r3, #0
}
    d698:	4618      	mov	r0, r3
    d69a:	371c      	adds	r7, #28
    d69c:	46bd      	mov	sp, r7
    d69e:	bd90      	pop	{r4, r7, pc}
    d6a0:	200012a4 	.word	0x200012a4
    d6a4:	0000dddd 	.word	0x0000dddd
    d6a8:	0000cf89 	.word	0x0000cf89
    d6ac:	0000dd1d 	.word	0x0000dd1d
    d6b0:	0000cf65 	.word	0x0000cf65
    d6b4:	0000da8d 	.word	0x0000da8d

0000d6b8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d6b8:	b590      	push	{r4, r7, lr}
    d6ba:	b083      	sub	sp, #12
    d6bc:	af00      	add	r7, sp, #0
    d6be:	4603      	mov	r3, r0
    d6c0:	6039      	str	r1, [r7, #0]
    d6c2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d6c4:	683b      	ldr	r3, [r7, #0]
    d6c6:	785b      	ldrb	r3, [r3, #1]
    d6c8:	3b01      	subs	r3, #1
    d6ca:	2b0a      	cmp	r3, #10
    d6cc:	d85b      	bhi.n	d786 <usbdc_set_req+0xce>
    d6ce:	a201      	add	r2, pc, #4	; (adr r2, d6d4 <usbdc_set_req+0x1c>)
    d6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d6d4:	0000d753 	.word	0x0000d753
    d6d8:	0000d787 	.word	0x0000d787
    d6dc:	0000d761 	.word	0x0000d761
    d6e0:	0000d787 	.word	0x0000d787
    d6e4:	0000d701 	.word	0x0000d701
    d6e8:	0000d787 	.word	0x0000d787
    d6ec:	0000d787 	.word	0x0000d787
    d6f0:	0000d787 	.word	0x0000d787
    d6f4:	0000d71b 	.word	0x0000d71b
    d6f8:	0000d787 	.word	0x0000d787
    d6fc:	0000d76f 	.word	0x0000d76f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d700:	79f8      	ldrb	r0, [r7, #7]
    d702:	2301      	movs	r3, #1
    d704:	2200      	movs	r2, #0
    d706:	2100      	movs	r1, #0
    d708:	4c21      	ldr	r4, [pc, #132]	; (d790 <usbdc_set_req+0xd8>)
    d70a:	47a0      	blx	r4
    d70c:	4603      	mov	r3, r0
    d70e:	2b00      	cmp	r3, #0
    d710:	bf0c      	ite	eq
    d712:	2301      	moveq	r3, #1
    d714:	2300      	movne	r3, #0
    d716:	b2db      	uxtb	r3, r3
    d718:	e036      	b.n	d788 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d71a:	683b      	ldr	r3, [r7, #0]
    d71c:	885b      	ldrh	r3, [r3, #2]
    d71e:	b29b      	uxth	r3, r3
    d720:	b2db      	uxtb	r3, r3
    d722:	4618      	mov	r0, r3
    d724:	4b1b      	ldr	r3, [pc, #108]	; (d794 <usbdc_set_req+0xdc>)
    d726:	4798      	blx	r3
    d728:	4603      	mov	r3, r0
    d72a:	f083 0301 	eor.w	r3, r3, #1
    d72e:	b2db      	uxtb	r3, r3
    d730:	2b00      	cmp	r3, #0
    d732:	d001      	beq.n	d738 <usbdc_set_req+0x80>
			return false;
    d734:	2300      	movs	r3, #0
    d736:	e027      	b.n	d788 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d738:	79f8      	ldrb	r0, [r7, #7]
    d73a:	2301      	movs	r3, #1
    d73c:	2200      	movs	r2, #0
    d73e:	2100      	movs	r1, #0
    d740:	4c13      	ldr	r4, [pc, #76]	; (d790 <usbdc_set_req+0xd8>)
    d742:	47a0      	blx	r4
    d744:	4603      	mov	r3, r0
    d746:	2b00      	cmp	r3, #0
    d748:	bf0c      	ite	eq
    d74a:	2301      	moveq	r3, #1
    d74c:	2300      	movne	r3, #0
    d74e:	b2db      	uxtb	r3, r3
    d750:	e01a      	b.n	d788 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d752:	79fb      	ldrb	r3, [r7, #7]
    d754:	6839      	ldr	r1, [r7, #0]
    d756:	4618      	mov	r0, r3
    d758:	4b0f      	ldr	r3, [pc, #60]	; (d798 <usbdc_set_req+0xe0>)
    d75a:	4798      	blx	r3
    d75c:	4603      	mov	r3, r0
    d75e:	e013      	b.n	d788 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d760:	79fb      	ldrb	r3, [r7, #7]
    d762:	6839      	ldr	r1, [r7, #0]
    d764:	4618      	mov	r0, r3
    d766:	4b0d      	ldr	r3, [pc, #52]	; (d79c <usbdc_set_req+0xe4>)
    d768:	4798      	blx	r3
    d76a:	4603      	mov	r3, r0
    d76c:	e00c      	b.n	d788 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d76e:	683b      	ldr	r3, [r7, #0]
    d770:	885b      	ldrh	r3, [r3, #2]
    d772:	b29a      	uxth	r2, r3
    d774:	683b      	ldr	r3, [r7, #0]
    d776:	889b      	ldrh	r3, [r3, #4]
    d778:	b29b      	uxth	r3, r3
    d77a:	4619      	mov	r1, r3
    d77c:	4610      	mov	r0, r2
    d77e:	4b08      	ldr	r3, [pc, #32]	; (d7a0 <usbdc_set_req+0xe8>)
    d780:	4798      	blx	r3
    d782:	4603      	mov	r3, r0
    d784:	e000      	b.n	d788 <usbdc_set_req+0xd0>
	default:
		return false;
    d786:	2300      	movs	r3, #0
	}
}
    d788:	4618      	mov	r0, r3
    d78a:	370c      	adds	r7, #12
    d78c:	46bd      	mov	sp, r7
    d78e:	bd90      	pop	{r4, r7, pc}
    d790:	0000da8d 	.word	0x0000da8d
    d794:	0000d46d 	.word	0x0000d46d
    d798:	0000d389 	.word	0x0000d389
    d79c:	0000d3e1 	.word	0x0000d3e1
    d7a0:	0000d579 	.word	0x0000d579

0000d7a4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d7a4:	b580      	push	{r7, lr}
    d7a6:	b082      	sub	sp, #8
    d7a8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d7aa:	4b0a      	ldr	r3, [pc, #40]	; (d7d4 <usbdc_sof_notify+0x30>)
    d7ac:	685b      	ldr	r3, [r3, #4]
    d7ae:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d7b0:	e009      	b.n	d7c6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d7b2:	687b      	ldr	r3, [r7, #4]
    d7b4:	685b      	ldr	r3, [r3, #4]
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	d002      	beq.n	d7c0 <usbdc_sof_notify+0x1c>
			sof->cb();
    d7ba:	687b      	ldr	r3, [r7, #4]
    d7bc:	685b      	ldr	r3, [r3, #4]
    d7be:	4798      	blx	r3
		}
		sof = sof->next;
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	681b      	ldr	r3, [r3, #0]
    d7c4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d7c6:	687b      	ldr	r3, [r7, #4]
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	d1f2      	bne.n	d7b2 <usbdc_sof_notify+0xe>
	}
}
    d7cc:	bf00      	nop
    d7ce:	3708      	adds	r7, #8
    d7d0:	46bd      	mov	sp, r7
    d7d2:	bd80      	pop	{r7, pc}
    d7d4:	200012a4 	.word	0x200012a4

0000d7d8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d7d8:	b580      	push	{r7, lr}
    d7da:	b084      	sub	sp, #16
    d7dc:	af00      	add	r7, sp, #0
    d7de:	4603      	mov	r3, r0
    d7e0:	6039      	str	r1, [r7, #0]
    d7e2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d7e4:	4b0b      	ldr	r3, [pc, #44]	; (d814 <usbdc_change_notify+0x3c>)
    d7e6:	68db      	ldr	r3, [r3, #12]
    d7e8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d7ea:	e00c      	b.n	d806 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d7ec:	68fb      	ldr	r3, [r7, #12]
    d7ee:	685b      	ldr	r3, [r3, #4]
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d005      	beq.n	d800 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d7f4:	68fb      	ldr	r3, [r7, #12]
    d7f6:	685b      	ldr	r3, [r3, #4]
    d7f8:	79fa      	ldrb	r2, [r7, #7]
    d7fa:	6839      	ldr	r1, [r7, #0]
    d7fc:	4610      	mov	r0, r2
    d7fe:	4798      	blx	r3
		}
		cg = cg->next;
    d800:	68fb      	ldr	r3, [r7, #12]
    d802:	681b      	ldr	r3, [r3, #0]
    d804:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d806:	68fb      	ldr	r3, [r7, #12]
    d808:	2b00      	cmp	r3, #0
    d80a:	d1ef      	bne.n	d7ec <usbdc_change_notify+0x14>
	}
}
    d80c:	bf00      	nop
    d80e:	3710      	adds	r7, #16
    d810:	46bd      	mov	sp, r7
    d812:	bd80      	pop	{r7, pc}
    d814:	200012a4 	.word	0x200012a4

0000d818 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d818:	b580      	push	{r7, lr}
    d81a:	b084      	sub	sp, #16
    d81c:	af00      	add	r7, sp, #0
    d81e:	4603      	mov	r3, r0
    d820:	6039      	str	r1, [r7, #0]
    d822:	71fb      	strb	r3, [r7, #7]
    d824:	4613      	mov	r3, r2
    d826:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d828:	4b12      	ldr	r3, [pc, #72]	; (d874 <usbdc_request_handler+0x5c>)
    d82a:	689b      	ldr	r3, [r3, #8]
    d82c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d82e:	e019      	b.n	d864 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d830:	68fb      	ldr	r3, [r7, #12]
    d832:	685b      	ldr	r3, [r3, #4]
    d834:	2b00      	cmp	r3, #0
    d836:	d012      	beq.n	d85e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d838:	68fb      	ldr	r3, [r7, #12]
    d83a:	685b      	ldr	r3, [r3, #4]
    d83c:	79ba      	ldrb	r2, [r7, #6]
    d83e:	79f8      	ldrb	r0, [r7, #7]
    d840:	6839      	ldr	r1, [r7, #0]
    d842:	4798      	blx	r3
    d844:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d846:	68bb      	ldr	r3, [r7, #8]
    d848:	2b00      	cmp	r3, #0
    d84a:	d101      	bne.n	d850 <usbdc_request_handler+0x38>
				return true;
    d84c:	2301      	movs	r3, #1
    d84e:	e00d      	b.n	d86c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d850:	68bb      	ldr	r3, [r7, #8]
    d852:	f113 0f0a 	cmn.w	r3, #10
    d856:	d002      	beq.n	d85e <usbdc_request_handler+0x46>
				return -1;
    d858:	f04f 33ff 	mov.w	r3, #4294967295
    d85c:	e006      	b.n	d86c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d85e:	68fb      	ldr	r3, [r7, #12]
    d860:	681b      	ldr	r3, [r3, #0]
    d862:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d864:	68fb      	ldr	r3, [r7, #12]
    d866:	2b00      	cmp	r3, #0
    d868:	d1e2      	bne.n	d830 <usbdc_request_handler+0x18>
	}
	return false;
    d86a:	2300      	movs	r3, #0
}
    d86c:	4618      	mov	r0, r3
    d86e:	3710      	adds	r7, #16
    d870:	46bd      	mov	sp, r7
    d872:	bd80      	pop	{r7, pc}
    d874:	200012a4 	.word	0x200012a4

0000d878 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d878:	b580      	push	{r7, lr}
    d87a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d87c:	4b01      	ldr	r3, [pc, #4]	; (d884 <usbd_sof_cb+0xc>)
    d87e:	4798      	blx	r3
}
    d880:	bf00      	nop
    d882:	bd80      	pop	{r7, pc}
    d884:	0000d7a5 	.word	0x0000d7a5

0000d888 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d888:	b580      	push	{r7, lr}
    d88a:	b082      	sub	sp, #8
    d88c:	af00      	add	r7, sp, #0
    d88e:	4603      	mov	r3, r0
    d890:	6039      	str	r1, [r7, #0]
    d892:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d894:	79fb      	ldrb	r3, [r7, #7]
    d896:	2200      	movs	r2, #0
    d898:	6839      	ldr	r1, [r7, #0]
    d89a:	4618      	mov	r0, r3
    d89c:	4b14      	ldr	r3, [pc, #80]	; (d8f0 <usbdc_cb_ctl_req+0x68>)
    d89e:	4798      	blx	r3
    d8a0:	4603      	mov	r3, r0
    d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d8a6:	d00b      	beq.n	d8c0 <usbdc_cb_ctl_req+0x38>
    d8a8:	2b01      	cmp	r3, #1
    d8aa:	d007      	beq.n	d8bc <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d8ac:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d8ae:	683b      	ldr	r3, [r7, #0]
    d8b0:	781b      	ldrb	r3, [r3, #0]
    d8b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d8b6:	2b00      	cmp	r3, #0
    d8b8:	d007      	beq.n	d8ca <usbdc_cb_ctl_req+0x42>
    d8ba:	e003      	b.n	d8c4 <usbdc_cb_ctl_req+0x3c>
		return true;
    d8bc:	2301      	movs	r3, #1
    d8be:	e013      	b.n	d8e8 <usbdc_cb_ctl_req+0x60>
		return false;
    d8c0:	2300      	movs	r3, #0
    d8c2:	e011      	b.n	d8e8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d8c4:	2b80      	cmp	r3, #128	; 0x80
    d8c6:	d007      	beq.n	d8d8 <usbdc_cb_ctl_req+0x50>
    d8c8:	e00d      	b.n	d8e6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d8ca:	79fb      	ldrb	r3, [r7, #7]
    d8cc:	6839      	ldr	r1, [r7, #0]
    d8ce:	4618      	mov	r0, r3
    d8d0:	4b08      	ldr	r3, [pc, #32]	; (d8f4 <usbdc_cb_ctl_req+0x6c>)
    d8d2:	4798      	blx	r3
    d8d4:	4603      	mov	r3, r0
    d8d6:	e007      	b.n	d8e8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d8d8:	79fb      	ldrb	r3, [r7, #7]
    d8da:	6839      	ldr	r1, [r7, #0]
    d8dc:	4618      	mov	r0, r3
    d8de:	4b06      	ldr	r3, [pc, #24]	; (d8f8 <usbdc_cb_ctl_req+0x70>)
    d8e0:	4798      	blx	r3
    d8e2:	4603      	mov	r3, r0
    d8e4:	e000      	b.n	d8e8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d8e6:	2300      	movs	r3, #0
	}
}
    d8e8:	4618      	mov	r0, r3
    d8ea:	3708      	adds	r7, #8
    d8ec:	46bd      	mov	sp, r7
    d8ee:	bd80      	pop	{r7, pc}
    d8f0:	0000d819 	.word	0x0000d819
    d8f4:	0000d6b9 	.word	0x0000d6b9
    d8f8:	0000d2e1 	.word	0x0000d2e1

0000d8fc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d8fc:	b580      	push	{r7, lr}
    d8fe:	b082      	sub	sp, #8
    d900:	af00      	add	r7, sp, #0
    d902:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	781b      	ldrb	r3, [r3, #0]
    d908:	2b00      	cmp	r3, #0
    d90a:	d135      	bne.n	d978 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d90c:	687b      	ldr	r3, [r7, #4]
    d90e:	785b      	ldrb	r3, [r3, #1]
    d910:	2b05      	cmp	r3, #5
    d912:	d019      	beq.n	d948 <usbdc_ctrl_status_end+0x4c>
    d914:	2b09      	cmp	r3, #9
    d916:	d000      	beq.n	d91a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d918:	e02f      	b.n	d97a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	885b      	ldrh	r3, [r3, #2]
    d91e:	b29b      	uxth	r3, r3
    d920:	b2da      	uxtb	r2, r3
    d922:	4b17      	ldr	r3, [pc, #92]	; (d980 <usbdc_ctrl_status_end+0x84>)
    d924:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	885b      	ldrh	r3, [r3, #2]
    d92a:	b29b      	uxth	r3, r3
    d92c:	2b00      	cmp	r3, #0
    d92e:	d001      	beq.n	d934 <usbdc_ctrl_status_end+0x38>
    d930:	2204      	movs	r2, #4
    d932:	e000      	b.n	d936 <usbdc_ctrl_status_end+0x3a>
    d934:	2203      	movs	r2, #3
    d936:	4b12      	ldr	r3, [pc, #72]	; (d980 <usbdc_ctrl_status_end+0x84>)
    d938:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d93a:	4b11      	ldr	r3, [pc, #68]	; (d980 <usbdc_ctrl_status_end+0x84>)
    d93c:	7e9b      	ldrb	r3, [r3, #26]
    d93e:	4619      	mov	r1, r3
    d940:	2001      	movs	r0, #1
    d942:	4b10      	ldr	r3, [pc, #64]	; (d984 <usbdc_ctrl_status_end+0x88>)
    d944:	4798      	blx	r3
		break;
    d946:	e018      	b.n	d97a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	885b      	ldrh	r3, [r3, #2]
    d94c:	b29b      	uxth	r3, r3
    d94e:	b2db      	uxtb	r3, r3
    d950:	4618      	mov	r0, r3
    d952:	4b0d      	ldr	r3, [pc, #52]	; (d988 <usbdc_ctrl_status_end+0x8c>)
    d954:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	885b      	ldrh	r3, [r3, #2]
    d95a:	b29b      	uxth	r3, r3
    d95c:	2b00      	cmp	r3, #0
    d95e:	d001      	beq.n	d964 <usbdc_ctrl_status_end+0x68>
    d960:	2203      	movs	r2, #3
    d962:	e000      	b.n	d966 <usbdc_ctrl_status_end+0x6a>
    d964:	2202      	movs	r2, #2
    d966:	4b06      	ldr	r3, [pc, #24]	; (d980 <usbdc_ctrl_status_end+0x84>)
    d968:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d96a:	4b05      	ldr	r3, [pc, #20]	; (d980 <usbdc_ctrl_status_end+0x84>)
    d96c:	7e9b      	ldrb	r3, [r3, #26]
    d96e:	4619      	mov	r1, r3
    d970:	2001      	movs	r0, #1
    d972:	4b04      	ldr	r3, [pc, #16]	; (d984 <usbdc_ctrl_status_end+0x88>)
    d974:	4798      	blx	r3
		break;
    d976:	e000      	b.n	d97a <usbdc_ctrl_status_end+0x7e>
		return;
    d978:	bf00      	nop
	}
}
    d97a:	3708      	adds	r7, #8
    d97c:	46bd      	mov	sp, r7
    d97e:	bd80      	pop	{r7, pc}
    d980:	200012a4 	.word	0x200012a4
    d984:	0000d7d9 	.word	0x0000d7d9
    d988:	0000d559 	.word	0x0000d559

0000d98c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d98c:	b580      	push	{r7, lr}
    d98e:	b082      	sub	sp, #8
    d990:	af00      	add	r7, sp, #0
    d992:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d994:	2201      	movs	r2, #1
    d996:	6879      	ldr	r1, [r7, #4]
    d998:	2000      	movs	r0, #0
    d99a:	4b03      	ldr	r3, [pc, #12]	; (d9a8 <usbdc_ctrl_data_end+0x1c>)
    d99c:	4798      	blx	r3
	return false;
    d99e:	2300      	movs	r3, #0
}
    d9a0:	4618      	mov	r0, r3
    d9a2:	3708      	adds	r7, #8
    d9a4:	46bd      	mov	sp, r7
    d9a6:	bd80      	pop	{r7, pc}
    d9a8:	0000d819 	.word	0x0000d819

0000d9ac <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d9ac:	b580      	push	{r7, lr}
    d9ae:	b082      	sub	sp, #8
    d9b0:	af00      	add	r7, sp, #0
    d9b2:	4603      	mov	r3, r0
    d9b4:	603a      	str	r2, [r7, #0]
    d9b6:	71fb      	strb	r3, [r7, #7]
    d9b8:	460b      	mov	r3, r1
    d9ba:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d9bc:	79bb      	ldrb	r3, [r7, #6]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d002      	beq.n	d9c8 <usbdc_cb_ctl_done+0x1c>
    d9c2:	2b01      	cmp	r3, #1
    d9c4:	d004      	beq.n	d9d0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d9c6:	e008      	b.n	d9da <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d9c8:	6838      	ldr	r0, [r7, #0]
    d9ca:	4b06      	ldr	r3, [pc, #24]	; (d9e4 <usbdc_cb_ctl_done+0x38>)
    d9cc:	4798      	blx	r3
		break;
    d9ce:	e004      	b.n	d9da <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d9d0:	6838      	ldr	r0, [r7, #0]
    d9d2:	4b05      	ldr	r3, [pc, #20]	; (d9e8 <usbdc_cb_ctl_done+0x3c>)
    d9d4:	4798      	blx	r3
    d9d6:	4603      	mov	r3, r0
    d9d8:	e000      	b.n	d9dc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d9da:	2300      	movs	r3, #0
}
    d9dc:	4618      	mov	r0, r3
    d9de:	3708      	adds	r7, #8
    d9e0:	46bd      	mov	sp, r7
    d9e2:	bd80      	pop	{r7, pc}
    d9e4:	0000d8fd 	.word	0x0000d8fd
    d9e8:	0000d98d 	.word	0x0000d98d

0000d9ec <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d9ec:	b580      	push	{r7, lr}
    d9ee:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d9f0:	4b10      	ldr	r3, [pc, #64]	; (da34 <usbdc_reset+0x48>)
    d9f2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d9f4:	4b10      	ldr	r3, [pc, #64]	; (da38 <usbdc_reset+0x4c>)
    d9f6:	2202      	movs	r2, #2
    d9f8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d9fa:	4b0f      	ldr	r3, [pc, #60]	; (da38 <usbdc_reset+0x4c>)
    d9fc:	2200      	movs	r2, #0
    d9fe:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    da00:	4b0d      	ldr	r3, [pc, #52]	; (da38 <usbdc_reset+0x4c>)
    da02:	2200      	movs	r2, #0
    da04:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    da06:	2000      	movs	r0, #0
    da08:	4b0c      	ldr	r3, [pc, #48]	; (da3c <usbdc_reset+0x50>)
    da0a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    da0c:	4b0a      	ldr	r3, [pc, #40]	; (da38 <usbdc_reset+0x4c>)
    da0e:	7f1b      	ldrb	r3, [r3, #28]
    da10:	4618      	mov	r0, r3
    da12:	4b0b      	ldr	r3, [pc, #44]	; (da40 <usbdc_reset+0x54>)
    da14:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    da16:	4a0b      	ldr	r2, [pc, #44]	; (da44 <usbdc_reset+0x58>)
    da18:	2100      	movs	r1, #0
    da1a:	2000      	movs	r0, #0
    da1c:	4b0a      	ldr	r3, [pc, #40]	; (da48 <usbdc_reset+0x5c>)
    da1e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    da20:	4a0a      	ldr	r2, [pc, #40]	; (da4c <usbdc_reset+0x60>)
    da22:	2102      	movs	r1, #2
    da24:	2000      	movs	r0, #0
    da26:	4b08      	ldr	r3, [pc, #32]	; (da48 <usbdc_reset+0x5c>)
    da28:	4798      	blx	r3
	usb_d_ep_enable(0);
    da2a:	2000      	movs	r0, #0
    da2c:	4b08      	ldr	r3, [pc, #32]	; (da50 <usbdc_reset+0x64>)
    da2e:	4798      	blx	r3
}
    da30:	bf00      	nop
    da32:	bd80      	pop	{r7, pc}
    da34:	0000d439 	.word	0x0000d439
    da38:	200012a4 	.word	0x200012a4
    da3c:	0000408d 	.word	0x0000408d
    da40:	00003fc9 	.word	0x00003fc9
    da44:	0000d889 	.word	0x0000d889
    da48:	000043e1 	.word	0x000043e1
    da4c:	0000d9ad 	.word	0x0000d9ad
    da50:	000040dd 	.word	0x000040dd

0000da54 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    da54:	b580      	push	{r7, lr}
    da56:	b082      	sub	sp, #8
    da58:	af00      	add	r7, sp, #0
    da5a:	4603      	mov	r3, r0
    da5c:	6039      	str	r1, [r7, #0]
    da5e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    da60:	79fb      	ldrb	r3, [r7, #7]
    da62:	2b00      	cmp	r3, #0
    da64:	d002      	beq.n	da6c <usbd_event_cb+0x18>
    da66:	2b01      	cmp	r3, #1
    da68:	d005      	beq.n	da76 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    da6a:	e007      	b.n	da7c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    da6c:	6839      	ldr	r1, [r7, #0]
    da6e:	2000      	movs	r0, #0
    da70:	4b04      	ldr	r3, [pc, #16]	; (da84 <usbd_event_cb+0x30>)
    da72:	4798      	blx	r3
		break;
    da74:	e002      	b.n	da7c <usbd_event_cb+0x28>
		usbdc_reset();
    da76:	4b04      	ldr	r3, [pc, #16]	; (da88 <usbd_event_cb+0x34>)
    da78:	4798      	blx	r3
		break;
    da7a:	bf00      	nop
	}
}
    da7c:	bf00      	nop
    da7e:	3708      	adds	r7, #8
    da80:	46bd      	mov	sp, r7
    da82:	bd80      	pop	{r7, pc}
    da84:	0000d7d9 	.word	0x0000d7d9
    da88:	0000d9ed 	.word	0x0000d9ed

0000da8c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    da8c:	b580      	push	{r7, lr}
    da8e:	b088      	sub	sp, #32
    da90:	af00      	add	r7, sp, #0
    da92:	60b9      	str	r1, [r7, #8]
    da94:	607a      	str	r2, [r7, #4]
    da96:	461a      	mov	r2, r3
    da98:	4603      	mov	r3, r0
    da9a:	73fb      	strb	r3, [r7, #15]
    da9c:	4613      	mov	r3, r2
    da9e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    daa0:	68bb      	ldr	r3, [r7, #8]
    daa2:	617b      	str	r3, [r7, #20]
    daa4:	687b      	ldr	r3, [r7, #4]
    daa6:	61bb      	str	r3, [r7, #24]
    daa8:	7bfb      	ldrb	r3, [r7, #15]
    daaa:	773b      	strb	r3, [r7, #28]
    daac:	7bbb      	ldrb	r3, [r7, #14]
    daae:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    dab0:	f107 0314 	add.w	r3, r7, #20
    dab4:	4618      	mov	r0, r3
    dab6:	4b03      	ldr	r3, [pc, #12]	; (dac4 <usbdc_xfer+0x38>)
    dab8:	4798      	blx	r3
    daba:	4603      	mov	r3, r0
}
    dabc:	4618      	mov	r0, r3
    dabe:	3720      	adds	r7, #32
    dac0:	46bd      	mov	sp, r7
    dac2:	bd80      	pop	{r7, pc}
    dac4:	0000414d 	.word	0x0000414d

0000dac8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    dac8:	b580      	push	{r7, lr}
    daca:	b082      	sub	sp, #8
    dacc:	af00      	add	r7, sp, #0
    dace:	4603      	mov	r3, r0
    dad0:	6039      	str	r1, [r7, #0]
    dad2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    dad4:	79fb      	ldrb	r3, [r7, #7]
    dad6:	2b01      	cmp	r3, #1
    dad8:	d009      	beq.n	daee <usbdc_register_handler+0x26>
    dada:	2b02      	cmp	r3, #2
    dadc:	d00c      	beq.n	daf8 <usbdc_register_handler+0x30>
    dade:	2b00      	cmp	r3, #0
    dae0:	d000      	beq.n	dae4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    dae2:	e00e      	b.n	db02 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    dae4:	6839      	ldr	r1, [r7, #0]
    dae6:	4809      	ldr	r0, [pc, #36]	; (db0c <usbdc_register_handler+0x44>)
    dae8:	4b09      	ldr	r3, [pc, #36]	; (db10 <usbdc_register_handler+0x48>)
    daea:	4798      	blx	r3
		break;
    daec:	e009      	b.n	db02 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    daee:	6839      	ldr	r1, [r7, #0]
    daf0:	4808      	ldr	r0, [pc, #32]	; (db14 <usbdc_register_handler+0x4c>)
    daf2:	4b07      	ldr	r3, [pc, #28]	; (db10 <usbdc_register_handler+0x48>)
    daf4:	4798      	blx	r3
		break;
    daf6:	e004      	b.n	db02 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    daf8:	6839      	ldr	r1, [r7, #0]
    dafa:	4807      	ldr	r0, [pc, #28]	; (db18 <usbdc_register_handler+0x50>)
    dafc:	4b04      	ldr	r3, [pc, #16]	; (db10 <usbdc_register_handler+0x48>)
    dafe:	4798      	blx	r3
		break;
    db00:	bf00      	nop
	}
}
    db02:	bf00      	nop
    db04:	3708      	adds	r7, #8
    db06:	46bd      	mov	sp, r7
    db08:	bd80      	pop	{r7, pc}
    db0a:	bf00      	nop
    db0c:	200012a8 	.word	0x200012a8
    db10:	00004539 	.word	0x00004539
    db14:	200012ac 	.word	0x200012ac
    db18:	200012b0 	.word	0x200012b0

0000db1c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    db1c:	b580      	push	{r7, lr}
    db1e:	b084      	sub	sp, #16
    db20:	af00      	add	r7, sp, #0
    db22:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    db24:	687b      	ldr	r3, [r7, #4]
    db26:	2b00      	cmp	r3, #0
    db28:	bf14      	ite	ne
    db2a:	2301      	movne	r3, #1
    db2c:	2300      	moveq	r3, #0
    db2e:	b2db      	uxtb	r3, r3
    db30:	f240 3255 	movw	r2, #853	; 0x355
    db34:	4910      	ldr	r1, [pc, #64]	; (db78 <usbdc_init+0x5c>)
    db36:	4618      	mov	r0, r3
    db38:	4b10      	ldr	r3, [pc, #64]	; (db7c <usbdc_init+0x60>)
    db3a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    db3c:	4b10      	ldr	r3, [pc, #64]	; (db80 <usbdc_init+0x64>)
    db3e:	4798      	blx	r3
    db40:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    db42:	68fb      	ldr	r3, [r7, #12]
    db44:	2b00      	cmp	r3, #0
    db46:	da01      	bge.n	db4c <usbdc_init+0x30>
		return rc;
    db48:	68fb      	ldr	r3, [r7, #12]
    db4a:	e010      	b.n	db6e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    db4c:	2220      	movs	r2, #32
    db4e:	2100      	movs	r1, #0
    db50:	480c      	ldr	r0, [pc, #48]	; (db84 <usbdc_init+0x68>)
    db52:	4b0d      	ldr	r3, [pc, #52]	; (db88 <usbdc_init+0x6c>)
    db54:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    db56:	4a0b      	ldr	r2, [pc, #44]	; (db84 <usbdc_init+0x68>)
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    db5c:	490b      	ldr	r1, [pc, #44]	; (db8c <usbdc_init+0x70>)
    db5e:	2000      	movs	r0, #0
    db60:	4b0b      	ldr	r3, [pc, #44]	; (db90 <usbdc_init+0x74>)
    db62:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    db64:	490b      	ldr	r1, [pc, #44]	; (db94 <usbdc_init+0x78>)
    db66:	2001      	movs	r0, #1
    db68:	4b09      	ldr	r3, [pc, #36]	; (db90 <usbdc_init+0x74>)
    db6a:	4798      	blx	r3

	return 0;
    db6c:	2300      	movs	r3, #0
}
    db6e:	4618      	mov	r0, r3
    db70:	3710      	adds	r7, #16
    db72:	46bd      	mov	sp, r7
    db74:	bd80      	pop	{r7, pc}
    db76:	bf00      	nop
    db78:	000112a0 	.word	0x000112a0
    db7c:	0000445d 	.word	0x0000445d
    db80:	00003eb5 	.word	0x00003eb5
    db84:	200012a4 	.word	0x200012a4
    db88:	00010bc5 	.word	0x00010bc5
    db8c:	0000d879 	.word	0x0000d879
    db90:	00003f61 	.word	0x00003f61
    db94:	0000da55 	.word	0x0000da55

0000db98 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    db98:	b580      	push	{r7, lr}
    db9a:	b082      	sub	sp, #8
    db9c:	af00      	add	r7, sp, #0
    db9e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    dba0:	6879      	ldr	r1, [r7, #4]
    dba2:	4803      	ldr	r0, [pc, #12]	; (dbb0 <usbdc_register_function+0x18>)
    dba4:	4b03      	ldr	r3, [pc, #12]	; (dbb4 <usbdc_register_function+0x1c>)
    dba6:	4798      	blx	r3
}
    dba8:	bf00      	nop
    dbaa:	3708      	adds	r7, #8
    dbac:	46bd      	mov	sp, r7
    dbae:	bd80      	pop	{r7, pc}
    dbb0:	200012b4 	.word	0x200012b4
    dbb4:	00004539 	.word	0x00004539

0000dbb8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    dbb8:	b580      	push	{r7, lr}
    dbba:	b082      	sub	sp, #8
    dbbc:	af00      	add	r7, sp, #0
    dbbe:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    dbc0:	4b0f      	ldr	r3, [pc, #60]	; (dc00 <usbdc_start+0x48>)
    dbc2:	7e9b      	ldrb	r3, [r3, #26]
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d002      	beq.n	dbce <usbdc_start+0x16>
		return ERR_BUSY;
    dbc8:	f06f 0303 	mvn.w	r3, #3
    dbcc:	e013      	b.n	dbf6 <usbdc_start+0x3e>
	}

	if (desces) {
    dbce:	687b      	ldr	r3, [r7, #4]
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d00e      	beq.n	dbf2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    dbd4:	4a0a      	ldr	r2, [pc, #40]	; (dc00 <usbdc_start+0x48>)
    dbd6:	687b      	ldr	r3, [r7, #4]
    dbd8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	681b      	ldr	r3, [r3, #0]
    dbde:	79da      	ldrb	r2, [r3, #7]
    dbe0:	4b07      	ldr	r3, [pc, #28]	; (dc00 <usbdc_start+0x48>)
    dbe2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    dbe4:	4b06      	ldr	r3, [pc, #24]	; (dc00 <usbdc_start+0x48>)
    dbe6:	2201      	movs	r2, #1
    dbe8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    dbea:	4b06      	ldr	r3, [pc, #24]	; (dc04 <usbdc_start+0x4c>)
    dbec:	4798      	blx	r3
	return ERR_NONE;
    dbee:	2300      	movs	r3, #0
    dbf0:	e001      	b.n	dbf6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    dbf2:	f06f 0308 	mvn.w	r3, #8
}
    dbf6:	4618      	mov	r0, r3
    dbf8:	3708      	adds	r7, #8
    dbfa:	46bd      	mov	sp, r7
    dbfc:	bd80      	pop	{r7, pc}
    dbfe:	bf00      	nop
    dc00:	200012a4 	.word	0x200012a4
    dc04:	00003f85 	.word	0x00003f85

0000dc08 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    dc08:	b580      	push	{r7, lr}
    dc0a:	af00      	add	r7, sp, #0
	usb_d_attach();
    dc0c:	4b01      	ldr	r3, [pc, #4]	; (dc14 <usbdc_attach+0xc>)
    dc0e:	4798      	blx	r3
}
    dc10:	bf00      	nop
    dc12:	bd80      	pop	{r7, pc}
    dc14:	00003f99 	.word	0x00003f99

0000dc18 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    dc18:	b480      	push	{r7}
    dc1a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    dc1c:	4b03      	ldr	r3, [pc, #12]	; (dc2c <usbdc_get_ctrl_buffer+0x14>)
    dc1e:	695b      	ldr	r3, [r3, #20]
}
    dc20:	4618      	mov	r0, r3
    dc22:	46bd      	mov	sp, r7
    dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc28:	4770      	bx	lr
    dc2a:	bf00      	nop
    dc2c:	200012a4 	.word	0x200012a4

0000dc30 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    dc30:	b480      	push	{r7}
    dc32:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    dc34:	4b07      	ldr	r3, [pc, #28]	; (dc54 <usbdc_get_state+0x24>)
    dc36:	7e9b      	ldrb	r3, [r3, #26]
    dc38:	f003 0310 	and.w	r3, r3, #16
    dc3c:	2b00      	cmp	r3, #0
    dc3e:	d001      	beq.n	dc44 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    dc40:	2310      	movs	r3, #16
    dc42:	e001      	b.n	dc48 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    dc44:	4b03      	ldr	r3, [pc, #12]	; (dc54 <usbdc_get_state+0x24>)
    dc46:	7e9b      	ldrb	r3, [r3, #26]
}
    dc48:	4618      	mov	r0, r3
    dc4a:	46bd      	mov	sp, r7
    dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc50:	4770      	bx	lr
    dc52:	bf00      	nop
    dc54:	200012a4 	.word	0x200012a4

0000dc58 <usb_get_u16>:
{
    dc58:	b480      	push	{r7}
    dc5a:	b083      	sub	sp, #12
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dc60:	687b      	ldr	r3, [r7, #4]
    dc62:	781b      	ldrb	r3, [r3, #0]
    dc64:	b29a      	uxth	r2, r3
    dc66:	687b      	ldr	r3, [r7, #4]
    dc68:	3301      	adds	r3, #1
    dc6a:	781b      	ldrb	r3, [r3, #0]
    dc6c:	b29b      	uxth	r3, r3
    dc6e:	021b      	lsls	r3, r3, #8
    dc70:	b29b      	uxth	r3, r3
    dc72:	4413      	add	r3, r2
    dc74:	b29b      	uxth	r3, r3
}
    dc76:	4618      	mov	r0, r3
    dc78:	370c      	adds	r7, #12
    dc7a:	46bd      	mov	sp, r7
    dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc80:	4770      	bx	lr

0000dc82 <usb_desc_len>:
{
    dc82:	b480      	push	{r7}
    dc84:	b083      	sub	sp, #12
    dc86:	af00      	add	r7, sp, #0
    dc88:	6078      	str	r0, [r7, #4]
	return desc[0];
    dc8a:	687b      	ldr	r3, [r7, #4]
    dc8c:	781b      	ldrb	r3, [r3, #0]
}
    dc8e:	4618      	mov	r0, r3
    dc90:	370c      	adds	r7, #12
    dc92:	46bd      	mov	sp, r7
    dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc98:	4770      	bx	lr

0000dc9a <usb_desc_type>:
{
    dc9a:	b480      	push	{r7}
    dc9c:	b083      	sub	sp, #12
    dc9e:	af00      	add	r7, sp, #0
    dca0:	6078      	str	r0, [r7, #4]
	return desc[1];
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	3301      	adds	r3, #1
    dca6:	781b      	ldrb	r3, [r3, #0]
}
    dca8:	4618      	mov	r0, r3
    dcaa:	370c      	adds	r7, #12
    dcac:	46bd      	mov	sp, r7
    dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcb2:	4770      	bx	lr

0000dcb4 <usb_desc_next>:
{
    dcb4:	b580      	push	{r7, lr}
    dcb6:	b082      	sub	sp, #8
    dcb8:	af00      	add	r7, sp, #0
    dcba:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    dcbc:	6878      	ldr	r0, [r7, #4]
    dcbe:	4b05      	ldr	r3, [pc, #20]	; (dcd4 <usb_desc_next+0x20>)
    dcc0:	4798      	blx	r3
    dcc2:	4603      	mov	r3, r0
    dcc4:	461a      	mov	r2, r3
    dcc6:	687b      	ldr	r3, [r7, #4]
    dcc8:	4413      	add	r3, r2
}
    dcca:	4618      	mov	r0, r3
    dccc:	3708      	adds	r7, #8
    dcce:	46bd      	mov	sp, r7
    dcd0:	bd80      	pop	{r7, pc}
    dcd2:	bf00      	nop
    dcd4:	0000dc83 	.word	0x0000dc83

0000dcd8 <usb_cfg_desc_total_len>:
{
    dcd8:	b580      	push	{r7, lr}
    dcda:	b082      	sub	sp, #8
    dcdc:	af00      	add	r7, sp, #0
    dcde:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    dce0:	687b      	ldr	r3, [r7, #4]
    dce2:	3302      	adds	r3, #2
    dce4:	4618      	mov	r0, r3
    dce6:	4b03      	ldr	r3, [pc, #12]	; (dcf4 <usb_cfg_desc_total_len+0x1c>)
    dce8:	4798      	blx	r3
    dcea:	4603      	mov	r3, r0
}
    dcec:	4618      	mov	r0, r3
    dcee:	3708      	adds	r7, #8
    dcf0:	46bd      	mov	sp, r7
    dcf2:	bd80      	pop	{r7, pc}
    dcf4:	0000dc59 	.word	0x0000dc59

0000dcf8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    dcf8:	b580      	push	{r7, lr}
    dcfa:	b082      	sub	sp, #8
    dcfc:	af00      	add	r7, sp, #0
    dcfe:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    dd00:	6878      	ldr	r0, [r7, #4]
    dd02:	4b05      	ldr	r3, [pc, #20]	; (dd18 <usb_cfg_desc_next+0x20>)
    dd04:	4798      	blx	r3
    dd06:	4603      	mov	r3, r0
    dd08:	461a      	mov	r2, r3
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	4413      	add	r3, r2
}
    dd0e:	4618      	mov	r0, r3
    dd10:	3708      	adds	r7, #8
    dd12:	46bd      	mov	sp, r7
    dd14:	bd80      	pop	{r7, pc}
    dd16:	bf00      	nop
    dd18:	0000dcd9 	.word	0x0000dcd9

0000dd1c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    dd1c:	b580      	push	{r7, lr}
    dd1e:	b084      	sub	sp, #16
    dd20:	af00      	add	r7, sp, #0
    dd22:	60f8      	str	r0, [r7, #12]
    dd24:	60b9      	str	r1, [r7, #8]
    dd26:	4613      	mov	r3, r2
    dd28:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dd2a:	e015      	b.n	dd58 <usb_find_desc+0x3c>
		_desc_len_check();
    dd2c:	68f8      	ldr	r0, [r7, #12]
    dd2e:	4b0f      	ldr	r3, [pc, #60]	; (dd6c <usb_find_desc+0x50>)
    dd30:	4798      	blx	r3
    dd32:	4603      	mov	r3, r0
    dd34:	2b01      	cmp	r3, #1
    dd36:	d801      	bhi.n	dd3c <usb_find_desc+0x20>
    dd38:	2300      	movs	r3, #0
    dd3a:	e012      	b.n	dd62 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    dd3c:	68f8      	ldr	r0, [r7, #12]
    dd3e:	4b0c      	ldr	r3, [pc, #48]	; (dd70 <usb_find_desc+0x54>)
    dd40:	4798      	blx	r3
    dd42:	4603      	mov	r3, r0
    dd44:	461a      	mov	r2, r3
    dd46:	79fb      	ldrb	r3, [r7, #7]
    dd48:	4293      	cmp	r3, r2
    dd4a:	d101      	bne.n	dd50 <usb_find_desc+0x34>
			return desc;
    dd4c:	68fb      	ldr	r3, [r7, #12]
    dd4e:	e008      	b.n	dd62 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dd50:	68f8      	ldr	r0, [r7, #12]
    dd52:	4b08      	ldr	r3, [pc, #32]	; (dd74 <usb_find_desc+0x58>)
    dd54:	4798      	blx	r3
    dd56:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dd58:	68fa      	ldr	r2, [r7, #12]
    dd5a:	68bb      	ldr	r3, [r7, #8]
    dd5c:	429a      	cmp	r2, r3
    dd5e:	d3e5      	bcc.n	dd2c <usb_find_desc+0x10>
	}
	return NULL;
    dd60:	2300      	movs	r3, #0
}
    dd62:	4618      	mov	r0, r3
    dd64:	3710      	adds	r7, #16
    dd66:	46bd      	mov	sp, r7
    dd68:	bd80      	pop	{r7, pc}
    dd6a:	bf00      	nop
    dd6c:	0000dc83 	.word	0x0000dc83
    dd70:	0000dc9b 	.word	0x0000dc9b
    dd74:	0000dcb5 	.word	0x0000dcb5

0000dd78 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dd78:	b580      	push	{r7, lr}
    dd7a:	b082      	sub	sp, #8
    dd7c:	af00      	add	r7, sp, #0
    dd7e:	6078      	str	r0, [r7, #4]
    dd80:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dd82:	e019      	b.n	ddb8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    dd84:	6878      	ldr	r0, [r7, #4]
    dd86:	4b12      	ldr	r3, [pc, #72]	; (ddd0 <usb_find_ep_desc+0x58>)
    dd88:	4798      	blx	r3
    dd8a:	4603      	mov	r3, r0
    dd8c:	2b01      	cmp	r3, #1
    dd8e:	d801      	bhi.n	dd94 <usb_find_ep_desc+0x1c>
    dd90:	2300      	movs	r3, #0
    dd92:	e018      	b.n	ddc6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dd94:	6878      	ldr	r0, [r7, #4]
    dd96:	4b0f      	ldr	r3, [pc, #60]	; (ddd4 <usb_find_ep_desc+0x5c>)
    dd98:	4798      	blx	r3
    dd9a:	4603      	mov	r3, r0
    dd9c:	2b04      	cmp	r3, #4
    dd9e:	d010      	beq.n	ddc2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    dda0:	6878      	ldr	r0, [r7, #4]
    dda2:	4b0c      	ldr	r3, [pc, #48]	; (ddd4 <usb_find_ep_desc+0x5c>)
    dda4:	4798      	blx	r3
    dda6:	4603      	mov	r3, r0
    dda8:	2b05      	cmp	r3, #5
    ddaa:	d101      	bne.n	ddb0 <usb_find_ep_desc+0x38>
			return desc;
    ddac:	687b      	ldr	r3, [r7, #4]
    ddae:	e00a      	b.n	ddc6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ddb0:	6878      	ldr	r0, [r7, #4]
    ddb2:	4b09      	ldr	r3, [pc, #36]	; (ddd8 <usb_find_ep_desc+0x60>)
    ddb4:	4798      	blx	r3
    ddb6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ddb8:	687a      	ldr	r2, [r7, #4]
    ddba:	683b      	ldr	r3, [r7, #0]
    ddbc:	429a      	cmp	r2, r3
    ddbe:	d3e1      	bcc.n	dd84 <usb_find_ep_desc+0xc>
    ddc0:	e000      	b.n	ddc4 <usb_find_ep_desc+0x4c>
			break;
    ddc2:	bf00      	nop
	}
	return NULL;
    ddc4:	2300      	movs	r3, #0
}
    ddc6:	4618      	mov	r0, r3
    ddc8:	3708      	adds	r7, #8
    ddca:	46bd      	mov	sp, r7
    ddcc:	bd80      	pop	{r7, pc}
    ddce:	bf00      	nop
    ddd0:	0000dc83 	.word	0x0000dc83
    ddd4:	0000dc9b 	.word	0x0000dc9b
    ddd8:	0000dcb5 	.word	0x0000dcb5

0000dddc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    dddc:	b580      	push	{r7, lr}
    ddde:	b084      	sub	sp, #16
    dde0:	af00      	add	r7, sp, #0
    dde2:	60f8      	str	r0, [r7, #12]
    dde4:	60b9      	str	r1, [r7, #8]
    dde6:	4613      	mov	r3, r2
    dde8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ddea:	2202      	movs	r2, #2
    ddec:	68b9      	ldr	r1, [r7, #8]
    ddee:	68f8      	ldr	r0, [r7, #12]
    ddf0:	4b15      	ldr	r3, [pc, #84]	; (de48 <usb_find_cfg_desc+0x6c>)
    ddf2:	4798      	blx	r3
    ddf4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ddf6:	68fb      	ldr	r3, [r7, #12]
    ddf8:	2b00      	cmp	r3, #0
    ddfa:	d11a      	bne.n	de32 <usb_find_cfg_desc+0x56>
		return NULL;
    ddfc:	2300      	movs	r3, #0
    ddfe:	e01f      	b.n	de40 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    de00:	68f8      	ldr	r0, [r7, #12]
    de02:	4b12      	ldr	r3, [pc, #72]	; (de4c <usb_find_cfg_desc+0x70>)
    de04:	4798      	blx	r3
    de06:	4603      	mov	r3, r0
    de08:	2b01      	cmp	r3, #1
    de0a:	d801      	bhi.n	de10 <usb_find_cfg_desc+0x34>
    de0c:	2300      	movs	r3, #0
    de0e:	e017      	b.n	de40 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    de10:	68fb      	ldr	r3, [r7, #12]
    de12:	3301      	adds	r3, #1
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	2b02      	cmp	r3, #2
    de18:	d110      	bne.n	de3c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    de1a:	68fb      	ldr	r3, [r7, #12]
    de1c:	3305      	adds	r3, #5
    de1e:	781b      	ldrb	r3, [r3, #0]
    de20:	79fa      	ldrb	r2, [r7, #7]
    de22:	429a      	cmp	r2, r3
    de24:	d101      	bne.n	de2a <usb_find_cfg_desc+0x4e>
			return desc;
    de26:	68fb      	ldr	r3, [r7, #12]
    de28:	e00a      	b.n	de40 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    de2a:	68f8      	ldr	r0, [r7, #12]
    de2c:	4b08      	ldr	r3, [pc, #32]	; (de50 <usb_find_cfg_desc+0x74>)
    de2e:	4798      	blx	r3
    de30:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    de32:	68fa      	ldr	r2, [r7, #12]
    de34:	68bb      	ldr	r3, [r7, #8]
    de36:	429a      	cmp	r2, r3
    de38:	d3e2      	bcc.n	de00 <usb_find_cfg_desc+0x24>
    de3a:	e000      	b.n	de3e <usb_find_cfg_desc+0x62>
			break;
    de3c:	bf00      	nop
	}
	return NULL;
    de3e:	2300      	movs	r3, #0
}
    de40:	4618      	mov	r0, r3
    de42:	3710      	adds	r7, #16
    de44:	46bd      	mov	sp, r7
    de46:	bd80      	pop	{r7, pc}
    de48:	0000dd1d 	.word	0x0000dd1d
    de4c:	0000dc83 	.word	0x0000dc83
    de50:	0000dcf9 	.word	0x0000dcf9

0000de54 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    de54:	b580      	push	{r7, lr}
    de56:	b086      	sub	sp, #24
    de58:	af00      	add	r7, sp, #0
    de5a:	60f8      	str	r0, [r7, #12]
    de5c:	60b9      	str	r1, [r7, #8]
    de5e:	4613      	mov	r3, r2
    de60:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    de62:	2300      	movs	r3, #0
    de64:	75fb      	strb	r3, [r7, #23]
    de66:	e020      	b.n	deaa <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    de68:	2203      	movs	r2, #3
    de6a:	68b9      	ldr	r1, [r7, #8]
    de6c:	68f8      	ldr	r0, [r7, #12]
    de6e:	4b13      	ldr	r3, [pc, #76]	; (debc <usb_find_str_desc+0x68>)
    de70:	4798      	blx	r3
    de72:	60f8      	str	r0, [r7, #12]
		if (desc) {
    de74:	68fb      	ldr	r3, [r7, #12]
    de76:	2b00      	cmp	r3, #0
    de78:	d015      	beq.n	dea6 <usb_find_str_desc+0x52>
			_desc_len_check();
    de7a:	68f8      	ldr	r0, [r7, #12]
    de7c:	4b10      	ldr	r3, [pc, #64]	; (dec0 <usb_find_str_desc+0x6c>)
    de7e:	4798      	blx	r3
    de80:	4603      	mov	r3, r0
    de82:	2b01      	cmp	r3, #1
    de84:	d801      	bhi.n	de8a <usb_find_str_desc+0x36>
    de86:	2300      	movs	r3, #0
    de88:	e014      	b.n	deb4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    de8a:	7dfa      	ldrb	r2, [r7, #23]
    de8c:	79fb      	ldrb	r3, [r7, #7]
    de8e:	429a      	cmp	r2, r3
    de90:	d101      	bne.n	de96 <usb_find_str_desc+0x42>
				return desc;
    de92:	68fb      	ldr	r3, [r7, #12]
    de94:	e00e      	b.n	deb4 <usb_find_str_desc+0x60>
			}
			i++;
    de96:	7dfb      	ldrb	r3, [r7, #23]
    de98:	3301      	adds	r3, #1
    de9a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    de9c:	68f8      	ldr	r0, [r7, #12]
    de9e:	4b09      	ldr	r3, [pc, #36]	; (dec4 <usb_find_str_desc+0x70>)
    dea0:	4798      	blx	r3
    dea2:	60f8      	str	r0, [r7, #12]
    dea4:	e001      	b.n	deaa <usb_find_str_desc+0x56>
		} else {
			return NULL;
    dea6:	2300      	movs	r3, #0
    dea8:	e004      	b.n	deb4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    deaa:	68fa      	ldr	r2, [r7, #12]
    deac:	68bb      	ldr	r3, [r7, #8]
    deae:	429a      	cmp	r2, r3
    deb0:	d3da      	bcc.n	de68 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    deb2:	2300      	movs	r3, #0
}
    deb4:	4618      	mov	r0, r3
    deb6:	3718      	adds	r7, #24
    deb8:	46bd      	mov	sp, r7
    deba:	bd80      	pop	{r7, pc}
    debc:	0000dd1d 	.word	0x0000dd1d
    dec0:	0000dc83 	.word	0x0000dc83
    dec4:	0000dcb5 	.word	0x0000dcb5

0000dec8 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    dec8:	b480      	push	{r7}
    deca:	b083      	sub	sp, #12
    decc:	af00      	add	r7, sp, #0
    dece:	6078      	str	r0, [r7, #4]
    ded0:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    ded2:	687b      	ldr	r3, [r7, #4]
    ded4:	683a      	ldr	r2, [r7, #0]
    ded6:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    ded8:	687b      	ldr	r3, [r7, #4]
    deda:	4618      	mov	r0, r3
    dedc:	370c      	adds	r7, #12
    dede:	46bd      	mov	sp, r7
    dee0:	bc80      	pop	{r7}
    dee2:	4770      	bx	lr

0000dee4 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    dee4:	b480      	push	{r7}
    dee6:	b083      	sub	sp, #12
    dee8:	af00      	add	r7, sp, #0
    deea:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    deec:	687b      	ldr	r3, [r7, #4]
    deee:	4618      	mov	r0, r3
    def0:	370c      	adds	r7, #12
    def2:	46bd      	mov	sp, r7
    def4:	bc80      	pop	{r7}
    def6:	4770      	bx	lr

0000def8 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    def8:	b580      	push	{r7, lr}
    defa:	b082      	sub	sp, #8
    defc:	af00      	add	r7, sp, #0
    defe:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	4a23      	ldr	r2, [pc, #140]	; (df90 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    df04:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    df06:	687b      	ldr	r3, [r7, #4]
    df08:	4a21      	ldr	r2, [pc, #132]	; (df90 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    df0a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	691a      	ldr	r2, [r3, #16]
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	330c      	adds	r3, #12
    df14:	4619      	mov	r1, r3
    df16:	4610      	mov	r0, r2
    df18:	4b1e      	ldr	r3, [pc, #120]	; (df94 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    df1a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    df1c:	687b      	ldr	r3, [r7, #4]
    df1e:	691b      	ldr	r3, [r3, #16]
    df20:	4618      	mov	r0, r3
    df22:	4b1d      	ldr	r3, [pc, #116]	; (df98 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    df24:	4798      	blx	r3
    df26:	4603      	mov	r3, r0
    df28:	b2da      	uxtb	r2, r3
    df2a:	687b      	ldr	r3, [r7, #4]
    df2c:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    df2e:	687b      	ldr	r3, [r7, #4]
    df30:	7d1b      	ldrb	r3, [r3, #20]
    df32:	2b00      	cmp	r3, #0
    df34:	bf0c      	ite	eq
    df36:	2301      	moveq	r3, #1
    df38:	2300      	movne	r3, #0
    df3a:	b2da      	uxtb	r2, r3
    df3c:	687b      	ldr	r3, [r7, #4]
    df3e:	725a      	strb	r2, [r3, #9]
	if (isOK)
    df40:	687b      	ldr	r3, [r7, #4]
    df42:	7a5b      	ldrb	r3, [r3, #9]
    df44:	b2db      	uxtb	r3, r3
    df46:	2b00      	cmp	r3, #0
    df48:	d116      	bne.n	df78 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    df4a:	687b      	ldr	r3, [r7, #4]
    df4c:	691b      	ldr	r3, [r3, #16]
    df4e:	4618      	mov	r0, r3
    df50:	4b12      	ldr	r3, [pc, #72]	; (df9c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    df52:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    df54:	687b      	ldr	r3, [r7, #4]
    df56:	691b      	ldr	r3, [r3, #16]
    df58:	4618      	mov	r0, r3
    df5a:	4b0f      	ldr	r3, [pc, #60]	; (df98 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    df5c:	4798      	blx	r3
    df5e:	4603      	mov	r3, r0
    df60:	b2da      	uxtb	r2, r3
    df62:	687b      	ldr	r3, [r7, #4]
    df64:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    df66:	687b      	ldr	r3, [r7, #4]
    df68:	7d1b      	ldrb	r3, [r3, #20]
    df6a:	2b00      	cmp	r3, #0
    df6c:	bf0c      	ite	eq
    df6e:	2301      	moveq	r3, #1
    df70:	2300      	movne	r3, #0
    df72:	b2da      	uxtb	r2, r3
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    df78:	687b      	ldr	r3, [r7, #4]
    df7a:	7a5b      	ldrb	r3, [r3, #9]
    df7c:	b2da      	uxtb	r2, r3
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	721a      	strb	r2, [r3, #8]
	return isOK;
    df82:	687b      	ldr	r3, [r7, #4]
    df84:	7a5b      	ldrb	r3, [r3, #9]
    df86:	b2db      	uxtb	r3, r3
	
}
    df88:	4618      	mov	r0, r3
    df8a:	3708      	adds	r7, #8
    df8c:	46bd      	mov	sp, r7
    df8e:	bd80      	pop	{r7, pc}
    df90:	200012dc 	.word	0x200012dc
    df94:	00003257 	.word	0x00003257
    df98:	000031dd 	.word	0x000031dd
    df9c:	000031fd 	.word	0x000031fd

0000dfa0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    dfa0:	b580      	push	{r7, lr}
    dfa2:	b082      	sub	sp, #8
    dfa4:	af00      	add	r7, sp, #0
    dfa6:	6078      	str	r0, [r7, #4]
    dfa8:	460b      	mov	r3, r1
    dfaa:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    dfac:	687b      	ldr	r3, [r7, #4]
    dfae:	691b      	ldr	r3, [r3, #16]
    dfb0:	78fa      	ldrb	r2, [r7, #3]
    dfb2:	b211      	sxth	r1, r2
    dfb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dfb8:	4618      	mov	r0, r3
    dfba:	4b03      	ldr	r3, [pc, #12]	; (dfc8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    dfbc:	4798      	blx	r3
    dfbe:	4603      	mov	r3, r0
}
    dfc0:	4618      	mov	r0, r3
    dfc2:	3708      	adds	r7, #8
    dfc4:	46bd      	mov	sp, r7
    dfc6:	bd80      	pop	{r7, pc}
    dfc8:	0000321d 	.word	0x0000321d

0000dfcc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    dfcc:	b580      	push	{r7, lr}
    dfce:	b086      	sub	sp, #24
    dfd0:	af00      	add	r7, sp, #0
    dfd2:	60f8      	str	r0, [r7, #12]
    dfd4:	60b9      	str	r1, [r7, #8]
    dfd6:	4613      	mov	r3, r2
    dfd8:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dfda:	68fb      	ldr	r3, [r7, #12]
    dfdc:	68db      	ldr	r3, [r3, #12]
    dfde:	88fa      	ldrh	r2, [r7, #6]
    dfe0:	68b9      	ldr	r1, [r7, #8]
    dfe2:	4618      	mov	r0, r3
    dfe4:	4b03      	ldr	r3, [pc, #12]	; (dff4 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dfe6:	4798      	blx	r3
    dfe8:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dfea:	697b      	ldr	r3, [r7, #20]
}
    dfec:	4618      	mov	r0, r3
    dfee:	3718      	adds	r7, #24
    dff0:	46bd      	mov	sp, r7
    dff2:	bd80      	pop	{r7, pc}
    dff4:	0000f889 	.word	0x0000f889

0000dff8 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dff8:	b580      	push	{r7, lr}
    dffa:	b086      	sub	sp, #24
    dffc:	af00      	add	r7, sp, #0
    dffe:	60f8      	str	r0, [r7, #12]
    e000:	60b9      	str	r1, [r7, #8]
    e002:	4613      	mov	r3, r2
    e004:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    e006:	68fb      	ldr	r3, [r7, #12]
    e008:	68db      	ldr	r3, [r3, #12]
    e00a:	88fa      	ldrh	r2, [r7, #6]
    e00c:	68b9      	ldr	r1, [r7, #8]
    e00e:	4618      	mov	r0, r3
    e010:	4b03      	ldr	r3, [pc, #12]	; (e020 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    e012:	4798      	blx	r3
    e014:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    e016:	697b      	ldr	r3, [r7, #20]
}
    e018:	4618      	mov	r0, r3
    e01a:	3718      	adds	r7, #24
    e01c:	46bd      	mov	sp, r7
    e01e:	bd80      	pop	{r7, pc}
    e020:	0000f8d9 	.word	0x0000f8d9

0000e024 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    e024:	b580      	push	{r7, lr}
    e026:	b082      	sub	sp, #8
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
    e02c:	6039      	str	r1, [r7, #0]
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	2b01      	cmp	r3, #1
    e032:	d10d      	bne.n	e050 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e034:	683b      	ldr	r3, [r7, #0]
    e036:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e03a:	4293      	cmp	r3, r2
    e03c:	d108      	bne.n	e050 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    e03e:	4906      	ldr	r1, [pc, #24]	; (e058 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e040:	4806      	ldr	r0, [pc, #24]	; (e05c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e042:	4b07      	ldr	r3, [pc, #28]	; (e060 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e044:	4798      	blx	r3
    e046:	4a07      	ldr	r2, [pc, #28]	; (e064 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e048:	4907      	ldr	r1, [pc, #28]	; (e068 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e04a:	4804      	ldr	r0, [pc, #16]	; (e05c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e04c:	4b07      	ldr	r3, [pc, #28]	; (e06c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e04e:	4798      	blx	r3
    e050:	bf00      	nop
    e052:	3708      	adds	r7, #8
    e054:	46bd      	mov	sp, r7
    e056:	bd80      	pop	{r7, pc}
    e058:	2000ab70 	.word	0x2000ab70
    e05c:	200012c4 	.word	0x200012c4
    e060:	0000dec9 	.word	0x0000dec9
    e064:	20000000 	.word	0x20000000
    e068:	0000dee5 	.word	0x0000dee5
    e06c:	00010a0d 	.word	0x00010a0d

0000e070 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    e070:	b580      	push	{r7, lr}
    e072:	af00      	add	r7, sp, #0
    e074:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e078:	2001      	movs	r0, #1
    e07a:	4b01      	ldr	r3, [pc, #4]	; (e080 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    e07c:	4798      	blx	r3
    e07e:	bd80      	pop	{r7, pc}
    e080:	0000e025 	.word	0x0000e025

0000e084 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    e084:	b480      	push	{r7}
    e086:	b083      	sub	sp, #12
    e088:	af00      	add	r7, sp, #0
    e08a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	4618      	mov	r0, r3
    e090:	370c      	adds	r7, #12
    e092:	46bd      	mov	sp, r7
    e094:	bc80      	pop	{r7}
    e096:	4770      	bx	lr

0000e098 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    e098:	b480      	push	{r7}
    e09a:	b083      	sub	sp, #12
    e09c:	af00      	add	r7, sp, #0
    e09e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	4618      	mov	r0, r3
    e0a4:	370c      	adds	r7, #12
    e0a6:	46bd      	mov	sp, r7
    e0a8:	bc80      	pop	{r7}
    e0aa:	4770      	bx	lr

0000e0ac <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
    e0ac:	b480      	push	{r7}
    e0ae:	b085      	sub	sp, #20
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	6078      	str	r0, [r7, #4]
    e0b4:	460b      	mov	r3, r1
    e0b6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
    e0b8:	2300      	movs	r3, #0
    e0ba:	73fb      	strb	r3, [r7, #15]
    e0bc:	7bfb      	ldrb	r3, [r7, #15]
    e0be:	2b01      	cmp	r3, #1
    e0c0:	dc13      	bgt.n	e0ea <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
    e0c2:	7bfb      	ldrb	r3, [r7, #15]
    e0c4:	78f9      	ldrb	r1, [r7, #3]
    e0c6:	7bfa      	ldrb	r2, [r7, #15]
    e0c8:	2080      	movs	r0, #128	; 0x80
    e0ca:	fa40 f202 	asr.w	r2, r0, r2
    e0ce:	400a      	ands	r2, r1
    e0d0:	2a00      	cmp	r2, #0
    e0d2:	bfcc      	ite	gt
    e0d4:	2201      	movgt	r2, #1
    e0d6:	2200      	movle	r2, #0
    e0d8:	b2d1      	uxtb	r1, r2
    e0da:	687a      	ldr	r2, [r7, #4]
    e0dc:	4413      	add	r3, r2
    e0de:	460a      	mov	r2, r1
    e0e0:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
    e0e2:	7bfb      	ldrb	r3, [r7, #15]
    e0e4:	3301      	adds	r3, #1
    e0e6:	73fb      	strb	r3, [r7, #15]
    e0e8:	e7e8      	b.n	e0bc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
    e0ea:	bf00      	nop
    e0ec:	3714      	adds	r7, #20
    e0ee:	46bd      	mov	sp, r7
    e0f0:	bc80      	pop	{r7}
    e0f2:	4770      	bx	lr

0000e0f4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
    e0f4:	b480      	push	{r7}
    e0f6:	b085      	sub	sp, #20
    e0f8:	af00      	add	r7, sp, #0
    e0fa:	6078      	str	r0, [r7, #4]
    e0fc:	460b      	mov	r3, r1
    e0fe:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
    e100:	2300      	movs	r3, #0
    e102:	73fb      	strb	r3, [r7, #15]
    e104:	7bfb      	ldrb	r3, [r7, #15]
    e106:	2b02      	cmp	r3, #2
    e108:	dc15      	bgt.n	e136 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
    e10a:	7bfb      	ldrb	r3, [r7, #15]
    e10c:	f1c3 0302 	rsb	r3, r3, #2
    e110:	78f9      	ldrb	r1, [r7, #3]
    e112:	7bfa      	ldrb	r2, [r7, #15]
    e114:	2020      	movs	r0, #32
    e116:	fa40 f202 	asr.w	r2, r0, r2
    e11a:	400a      	ands	r2, r1
    e11c:	2a00      	cmp	r2, #0
    e11e:	bfcc      	ite	gt
    e120:	2201      	movgt	r2, #1
    e122:	2200      	movle	r2, #0
    e124:	b2d1      	uxtb	r1, r2
    e126:	687a      	ldr	r2, [r7, #4]
    e128:	4413      	add	r3, r2
    e12a:	460a      	mov	r2, r1
    e12c:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
    e12e:	7bfb      	ldrb	r3, [r7, #15]
    e130:	3301      	adds	r3, #1
    e132:	73fb      	strb	r3, [r7, #15]
    e134:	e7e6      	b.n	e104 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
    e136:	bf00      	nop
    e138:	3714      	adds	r7, #20
    e13a:	46bd      	mov	sp, r7
    e13c:	bc80      	pop	{r7}
    e13e:	4770      	bx	lr

0000e140 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
    e140:	b580      	push	{r7, lr}
    e142:	b084      	sub	sp, #16
    e144:	af00      	add	r7, sp, #0
    e146:	60f8      	str	r0, [r7, #12]
    e148:	60b9      	str	r1, [r7, #8]
    e14a:	4613      	mov	r3, r2
    e14c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
    e14e:	79fb      	ldrb	r3, [r7, #7]
    e150:	4619      	mov	r1, r3
    e152:	68b8      	ldr	r0, [r7, #8]
    e154:	4b0d      	ldr	r3, [pc, #52]	; (e18c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
    e156:	4798      	blx	r3
	FillLimitSwitch(v);
    e158:	79fb      	ldrb	r3, [r7, #7]
    e15a:	4619      	mov	r1, r3
    e15c:	68b8      	ldr	r0, [r7, #8]
    e15e:	4b0c      	ldr	r3, [pc, #48]	; (e190 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
    e160:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
    e162:	79fb      	ldrb	r3, [r7, #7]
    e164:	f003 0301 	and.w	r3, r3, #1
    e168:	2b00      	cmp	r3, #0
    e16a:	bfcc      	ite	gt
    e16c:	2301      	movgt	r3, #1
    e16e:	2300      	movle	r3, #0
    e170:	b2da      	uxtb	r2, r3
    e172:	68bb      	ldr	r3, [r7, #8]
    e174:	769a      	strb	r2, [r3, #26]
	return controlStatus;
    e176:	68fa      	ldr	r2, [r7, #12]
    e178:	68bb      	ldr	r3, [r7, #8]
    e17a:	3315      	adds	r3, #21
    e17c:	6819      	ldr	r1, [r3, #0]
    e17e:	6011      	str	r1, [r2, #0]
    e180:	889b      	ldrh	r3, [r3, #4]
    e182:	8093      	strh	r3, [r2, #4]
}
    e184:	68f8      	ldr	r0, [r7, #12]
    e186:	3710      	adds	r7, #16
    e188:	46bd      	mov	sp, r7
    e18a:	bd80      	pop	{r7, pc}
    e18c:	0000e0ad 	.word	0x0000e0ad
    e190:	0000e0f5 	.word	0x0000e0f5

0000e194 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
    e194:	b480      	push	{r7}
    e196:	b085      	sub	sp, #20
    e198:	af00      	add	r7, sp, #0
    e19a:	60f8      	str	r0, [r7, #12]
    e19c:	60b9      	str	r1, [r7, #8]
    e19e:	4613      	mov	r3, r2
    e1a0:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
    e1a2:	79fb      	ldrb	r3, [r7, #7]
    e1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	bfcc      	ite	gt
    e1ac:	2301      	movgt	r3, #1
    e1ae:	2300      	movle	r3, #0
    e1b0:	b2da      	uxtb	r2, r3
    e1b2:	68bb      	ldr	r3, [r7, #8]
    e1b4:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
    e1b6:	79fb      	ldrb	r3, [r7, #7]
    e1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e1bc:	2b00      	cmp	r3, #0
    e1be:	bfcc      	ite	gt
    e1c0:	2301      	movgt	r3, #1
    e1c2:	2300      	movle	r3, #0
    e1c4:	b2da      	uxtb	r2, r3
    e1c6:	68bb      	ldr	r3, [r7, #8]
    e1c8:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
    e1ca:	79fb      	ldrb	r3, [r7, #7]
    e1cc:	f003 0320 	and.w	r3, r3, #32
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	bfcc      	ite	gt
    e1d4:	2301      	movgt	r3, #1
    e1d6:	2300      	movle	r3, #0
    e1d8:	b2da      	uxtb	r2, r3
    e1da:	68bb      	ldr	r3, [r7, #8]
    e1dc:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
    e1de:	79fb      	ldrb	r3, [r7, #7]
    e1e0:	f003 0310 	and.w	r3, r3, #16
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	bfcc      	ite	gt
    e1e8:	2301      	movgt	r3, #1
    e1ea:	2300      	movle	r3, #0
    e1ec:	b2da      	uxtb	r2, r3
    e1ee:	68bb      	ldr	r3, [r7, #8]
    e1f0:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
    e1f2:	79fb      	ldrb	r3, [r7, #7]
    e1f4:	f003 0308 	and.w	r3, r3, #8
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	bfcc      	ite	gt
    e1fc:	2301      	movgt	r3, #1
    e1fe:	2300      	movle	r3, #0
    e200:	b2da      	uxtb	r2, r3
    e202:	68bb      	ldr	r3, [r7, #8]
    e204:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
    e206:	79fb      	ldrb	r3, [r7, #7]
    e208:	f003 0304 	and.w	r3, r3, #4
    e20c:	2b00      	cmp	r3, #0
    e20e:	bfcc      	ite	gt
    e210:	2301      	movgt	r3, #1
    e212:	2300      	movle	r3, #0
    e214:	b2da      	uxtb	r2, r3
    e216:	68bb      	ldr	r3, [r7, #8]
    e218:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
    e21c:	79fb      	ldrb	r3, [r7, #7]
    e21e:	f003 0302 	and.w	r3, r3, #2
    e222:	2b00      	cmp	r3, #0
    e224:	bfcc      	ite	gt
    e226:	2301      	movgt	r3, #1
    e228:	2300      	movle	r3, #0
    e22a:	b2da      	uxtb	r2, r3
    e22c:	68bb      	ldr	r3, [r7, #8]
    e22e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
    e232:	79fb      	ldrb	r3, [r7, #7]
    e234:	f003 0301 	and.w	r3, r3, #1
    e238:	2b00      	cmp	r3, #0
    e23a:	bfcc      	ite	gt
    e23c:	2301      	movgt	r3, #1
    e23e:	2300      	movle	r3, #0
    e240:	b2da      	uxtb	r2, r3
    e242:	68bb      	ldr	r3, [r7, #8]
    e244:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
    e248:	68fa      	ldr	r2, [r7, #12]
    e24a:	68bb      	ldr	r3, [r7, #8]
    e24c:	331b      	adds	r3, #27
    e24e:	6819      	ldr	r1, [r3, #0]
    e250:	685b      	ldr	r3, [r3, #4]
    e252:	6011      	str	r1, [r2, #0]
    e254:	6053      	str	r3, [r2, #4]
    e256:	68f8      	ldr	r0, [r7, #12]
    e258:	3714      	adds	r7, #20
    e25a:	46bd      	mov	sp, r7
    e25c:	bc80      	pop	{r7}
    e25e:	4770      	bx	lr

0000e260 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    e260:	b480      	push	{r7}
    e262:	b083      	sub	sp, #12
    e264:	af00      	add	r7, sp, #0
    e266:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    e268:	687b      	ldr	r3, [r7, #4]
    e26a:	4618      	mov	r0, r3
    e26c:	370c      	adds	r7, #12
    e26e:	46bd      	mov	sp, r7
    e270:	bc80      	pop	{r7}
    e272:	4770      	bx	lr

0000e274 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    e274:	b480      	push	{r7}
    e276:	b083      	sub	sp, #12
    e278:	af00      	add	r7, sp, #0
    e27a:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    e27c:	687b      	ldr	r3, [r7, #4]
    e27e:	4618      	mov	r0, r3
    e280:	370c      	adds	r7, #12
    e282:	46bd      	mov	sp, r7
    e284:	bc80      	pop	{r7}
    e286:	4770      	bx	lr

0000e288 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    e288:	b480      	push	{r7}
    e28a:	b085      	sub	sp, #20
    e28c:	af00      	add	r7, sp, #0
    e28e:	60f8      	str	r0, [r7, #12]
    e290:	460b      	mov	r3, r1
    e292:	607a      	str	r2, [r7, #4]
    e294:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    e296:	687b      	ldr	r3, [r7, #4]
    e298:	681a      	ldr	r2, [r3, #0]
    e29a:	68fb      	ldr	r3, [r7, #12]
    e29c:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    e29e:	687b      	ldr	r3, [r7, #4]
    e2a0:	685a      	ldr	r2, [r3, #4]
    e2a2:	68fb      	ldr	r3, [r7, #12]
    e2a4:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    e2a6:	68fb      	ldr	r3, [r7, #12]
    e2a8:	7afa      	ldrb	r2, [r7, #11]
    e2aa:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    e2ac:	68fb      	ldr	r3, [r7, #12]
    e2ae:	687a      	ldr	r2, [r7, #4]
    e2b0:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    e2b2:	68fb      	ldr	r3, [r7, #12]
    e2b4:	68db      	ldr	r3, [r3, #12]
    e2b6:	7a5b      	ldrb	r3, [r3, #9]
    e2b8:	b2da      	uxtb	r2, r3
    e2ba:	68fb      	ldr	r3, [r7, #12]
    e2bc:	719a      	strb	r2, [r3, #6]
	return isOK;
    e2be:	68fb      	ldr	r3, [r7, #12]
    e2c0:	799b      	ldrb	r3, [r3, #6]
    e2c2:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e2c4:	4618      	mov	r0, r3
    e2c6:	3714      	adds	r7, #20
    e2c8:	46bd      	mov	sp, r7
    e2ca:	bc80      	pop	{r7}
    e2cc:	4770      	bx	lr

0000e2ce <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e2ce:	b480      	push	{r7}
    e2d0:	b083      	sub	sp, #12
    e2d2:	af00      	add	r7, sp, #0
    e2d4:	6078      	str	r0, [r7, #4]
    e2d6:	460b      	mov	r3, r1
    e2d8:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e2da:	78fb      	ldrb	r3, [r7, #3]
    e2dc:	f003 0307 	and.w	r3, r3, #7
    e2e0:	b2db      	uxtb	r3, r3
}
    e2e2:	4618      	mov	r0, r3
    e2e4:	370c      	adds	r7, #12
    e2e6:	46bd      	mov	sp, r7
    e2e8:	bc80      	pop	{r7}
    e2ea:	4770      	bx	lr

0000e2ec <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e2ec:	b580      	push	{r7, lr}
    e2ee:	b082      	sub	sp, #8
    e2f0:	af00      	add	r7, sp, #0
    e2f2:	6078      	str	r0, [r7, #4]
    e2f4:	460b      	mov	r3, r1
    e2f6:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	68da      	ldr	r2, [r3, #12]
    e2fc:	687b      	ldr	r3, [r7, #4]
    e2fe:	7a1b      	ldrb	r3, [r3, #8]
    e300:	4619      	mov	r1, r3
    e302:	4610      	mov	r0, r2
    e304:	4b0a      	ldr	r3, [pc, #40]	; (e330 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    e306:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e308:	687b      	ldr	r3, [r7, #4]
    e30a:	68db      	ldr	r3, [r3, #12]
    e30c:	1cf9      	adds	r1, r7, #3
    e30e:	2201      	movs	r2, #1
    e310:	4618      	mov	r0, r3
    e312:	4b08      	ldr	r3, [pc, #32]	; (e334 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e314:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	68db      	ldr	r3, [r3, #12]
    e31a:	6879      	ldr	r1, [r7, #4]
    e31c:	2201      	movs	r2, #1
    e31e:	4618      	mov	r0, r3
    e320:	4b05      	ldr	r3, [pc, #20]	; (e338 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e322:	4798      	blx	r3

	return registerValue;
    e324:	687b      	ldr	r3, [r7, #4]
    e326:	781b      	ldrb	r3, [r3, #0]
}
    e328:	4618      	mov	r0, r3
    e32a:	3708      	adds	r7, #8
    e32c:	46bd      	mov	sp, r7
    e32e:	bd80      	pop	{r7, pc}
    e330:	0000dfa1 	.word	0x0000dfa1
    e334:	0000dfcd 	.word	0x0000dfcd
    e338:	0000dff9 	.word	0x0000dff9

0000e33c <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e33c:	b580      	push	{r7, lr}
    e33e:	b084      	sub	sp, #16
    e340:	af00      	add	r7, sp, #0
    e342:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	68da      	ldr	r2, [r3, #12]
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	7a1b      	ldrb	r3, [r3, #8]
    e34c:	4619      	mov	r1, r3
    e34e:	4610      	mov	r0, r2
    e350:	4b06      	ldr	r3, [pc, #24]	; (e36c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e352:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    e354:	2109      	movs	r1, #9
    e356:	6878      	ldr	r0, [r7, #4]
    e358:	4b05      	ldr	r3, [pc, #20]	; (e370 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    e35a:	4798      	blx	r3
    e35c:	4603      	mov	r3, r0
    e35e:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    e360:	7bfb      	ldrb	r3, [r7, #15]
}
    e362:	4618      	mov	r0, r3
    e364:	3710      	adds	r7, #16
    e366:	46bd      	mov	sp, r7
    e368:	bd80      	pop	{r7, pc}
    e36a:	bf00      	nop
    e36c:	0000dfa1 	.word	0x0000dfa1
    e370:	0000e2ed 	.word	0x0000e2ed

0000e374 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e374:	b580      	push	{r7, lr}
    e376:	b084      	sub	sp, #16
    e378:	af00      	add	r7, sp, #0
    e37a:	6078      	str	r0, [r7, #4]
    e37c:	460b      	mov	r3, r1
    e37e:	70fb      	strb	r3, [r7, #3]
    e380:	4613      	mov	r3, r2
    e382:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	68da      	ldr	r2, [r3, #12]
    e388:	687b      	ldr	r3, [r7, #4]
    e38a:	7a1b      	ldrb	r3, [r3, #8]
    e38c:	4619      	mov	r1, r3
    e38e:	4610      	mov	r0, r2
    e390:	4b09      	ldr	r3, [pc, #36]	; (e3b8 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e392:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e394:	78fb      	ldrb	r3, [r7, #3]
    e396:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e398:	78bb      	ldrb	r3, [r7, #2]
    e39a:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e39c:	687b      	ldr	r3, [r7, #4]
    e39e:	68db      	ldr	r3, [r3, #12]
    e3a0:	f107 010c 	add.w	r1, r7, #12
    e3a4:	2202      	movs	r2, #2
    e3a6:	4618      	mov	r0, r3
    e3a8:	4b04      	ldr	r3, [pc, #16]	; (e3bc <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e3aa:	4798      	blx	r3
    e3ac:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e3ae:	4618      	mov	r0, r3
    e3b0:	3710      	adds	r7, #16
    e3b2:	46bd      	mov	sp, r7
    e3b4:	bd80      	pop	{r7, pc}
    e3b6:	bf00      	nop
    e3b8:	0000dfa1 	.word	0x0000dfa1
    e3bc:	0000dfcd 	.word	0x0000dfcd

0000e3c0 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b082      	sub	sp, #8
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	6078      	str	r0, [r7, #4]
    e3c8:	460b      	mov	r3, r1
    e3ca:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e3cc:	687b      	ldr	r3, [r7, #4]
    e3ce:	68da      	ldr	r2, [r3, #12]
    e3d0:	687b      	ldr	r3, [r7, #4]
    e3d2:	7a1b      	ldrb	r3, [r3, #8]
    e3d4:	4619      	mov	r1, r3
    e3d6:	4610      	mov	r0, r2
    e3d8:	4b06      	ldr	r3, [pc, #24]	; (e3f4 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    e3da:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    e3dc:	78fb      	ldrb	r3, [r7, #3]
    e3de:	461a      	mov	r2, r3
    e3e0:	2109      	movs	r1, #9
    e3e2:	6878      	ldr	r0, [r7, #4]
    e3e4:	4b04      	ldr	r3, [pc, #16]	; (e3f8 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    e3e6:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    e3e8:	78fb      	ldrb	r3, [r7, #3]
}
    e3ea:	4618      	mov	r0, r3
    e3ec:	3708      	adds	r7, #8
    e3ee:	46bd      	mov	sp, r7
    e3f0:	bd80      	pop	{r7, pc}
    e3f2:	bf00      	nop
    e3f4:	0000dfa1 	.word	0x0000dfa1
    e3f8:	0000e375 	.word	0x0000e375

0000e3fc <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    e3fc:	b580      	push	{r7, lr}
    e3fe:	b084      	sub	sp, #16
    e400:	af00      	add	r7, sp, #0
    e402:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e404:	2300      	movs	r3, #0
    e406:	73fb      	strb	r3, [r7, #15]
    e408:	7bfb      	ldrb	r3, [r7, #15]
    e40a:	2b07      	cmp	r3, #7
    e40c:	dc0f      	bgt.n	e42e <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e40e:	7bfb      	ldrb	r3, [r7, #15]
    e410:	2201      	movs	r2, #1
    e412:	4619      	mov	r1, r3
    e414:	6878      	ldr	r0, [r7, #4]
    e416:	4b08      	ldr	r3, [pc, #32]	; (e438 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e418:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e41a:	7bfb      	ldrb	r3, [r7, #15]
    e41c:	2201      	movs	r2, #1
    e41e:	4619      	mov	r1, r3
    e420:	6878      	ldr	r0, [r7, #4]
    e422:	4b06      	ldr	r3, [pc, #24]	; (e43c <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e424:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e426:	7bfb      	ldrb	r3, [r7, #15]
    e428:	3301      	adds	r3, #1
    e42a:	73fb      	strb	r3, [r7, #15]
    e42c:	e7ec      	b.n	e408 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e42e:	bf00      	nop
    e430:	3710      	adds	r7, #16
    e432:	46bd      	mov	sp, r7
    e434:	bd80      	pop	{r7, pc}
    e436:	bf00      	nop
    e438:	0000e575 	.word	0x0000e575
    e43c:	0000e5ad 	.word	0x0000e5ad

0000e440 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    e440:	b580      	push	{r7, lr}
    e442:	b084      	sub	sp, #16
    e444:	af00      	add	r7, sp, #0
    e446:	6078      	str	r0, [r7, #4]
    e448:	460b      	mov	r3, r1
    e44a:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    e44c:	78fb      	ldrb	r3, [r7, #3]
    e44e:	2b00      	cmp	r3, #0
    e450:	dd23      	ble.n	e49a <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    e452:	2300      	movs	r3, #0
    e454:	73fb      	strb	r3, [r7, #15]
    e456:	7bfb      	ldrb	r3, [r7, #15]
    e458:	2b07      	cmp	r3, #7
    e45a:	dc21      	bgt.n	e4a0 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    e45c:	78fa      	ldrb	r2, [r7, #3]
    e45e:	7bfb      	ldrb	r3, [r7, #15]
    e460:	fa42 f303 	asr.w	r3, r2, r3
    e464:	f003 0301 	and.w	r3, r3, #1
    e468:	2b00      	cmp	r3, #0
    e46a:	d00c      	beq.n	e486 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    e46c:	7bfb      	ldrb	r3, [r7, #15]
    e46e:	2201      	movs	r2, #1
    e470:	4619      	mov	r1, r3
    e472:	6878      	ldr	r0, [r7, #4]
    e474:	4b0c      	ldr	r3, [pc, #48]	; (e4a8 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e476:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    e478:	7bfb      	ldrb	r3, [r7, #15]
    e47a:	2201      	movs	r2, #1
    e47c:	4619      	mov	r1, r3
    e47e:	6878      	ldr	r0, [r7, #4]
    e480:	4b0a      	ldr	r3, [pc, #40]	; (e4ac <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    e482:	4798      	blx	r3
    e484:	e005      	b.n	e492 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    e486:	7bfb      	ldrb	r3, [r7, #15]
    e488:	2200      	movs	r2, #0
    e48a:	4619      	mov	r1, r3
    e48c:	6878      	ldr	r0, [r7, #4]
    e48e:	4b06      	ldr	r3, [pc, #24]	; (e4a8 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    e490:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    e492:	7bfb      	ldrb	r3, [r7, #15]
    e494:	3301      	adds	r3, #1
    e496:	73fb      	strb	r3, [r7, #15]
    e498:	e7dd      	b.n	e456 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    e49a:	6878      	ldr	r0, [r7, #4]
    e49c:	4b04      	ldr	r3, [pc, #16]	; (e4b0 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    e49e:	4798      	blx	r3
	}
	
}
    e4a0:	bf00      	nop
    e4a2:	3710      	adds	r7, #16
    e4a4:	46bd      	mov	sp, r7
    e4a6:	bd80      	pop	{r7, pc}
    e4a8:	0000e575 	.word	0x0000e575
    e4ac:	0000e5ad 	.word	0x0000e5ad
    e4b0:	0000e4b5 	.word	0x0000e4b5

0000e4b4 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    e4b4:	b580      	push	{r7, lr}
    e4b6:	b084      	sub	sp, #16
    e4b8:	af00      	add	r7, sp, #0
    e4ba:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e4bc:	2300      	movs	r3, #0
    e4be:	73fb      	strb	r3, [r7, #15]
    e4c0:	7bfb      	ldrb	r3, [r7, #15]
    e4c2:	2b07      	cmp	r3, #7
    e4c4:	dc09      	bgt.n	e4da <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e4c6:	7bfb      	ldrb	r3, [r7, #15]
    e4c8:	2200      	movs	r2, #0
    e4ca:	4619      	mov	r1, r3
    e4cc:	6878      	ldr	r0, [r7, #4]
    e4ce:	4b05      	ldr	r3, [pc, #20]	; (e4e4 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e4d0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e4d2:	7bfb      	ldrb	r3, [r7, #15]
    e4d4:	3301      	adds	r3, #1
    e4d6:	73fb      	strb	r3, [r7, #15]
    e4d8:	e7f2      	b.n	e4c0 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e4da:	bf00      	nop
    e4dc:	3710      	adds	r7, #16
    e4de:	46bd      	mov	sp, r7
    e4e0:	bd80      	pop	{r7, pc}
    e4e2:	bf00      	nop
    e4e4:	0000e575 	.word	0x0000e575

0000e4e8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e4e8:	b580      	push	{r7, lr}
    e4ea:	b084      	sub	sp, #16
    e4ec:	af00      	add	r7, sp, #0
    e4ee:	6078      	str	r0, [r7, #4]
    e4f0:	4608      	mov	r0, r1
    e4f2:	4611      	mov	r1, r2
    e4f4:	461a      	mov	r2, r3
    e4f6:	4603      	mov	r3, r0
    e4f8:	70fb      	strb	r3, [r7, #3]
    e4fa:	460b      	mov	r3, r1
    e4fc:	70bb      	strb	r3, [r7, #2]
    e4fe:	4613      	mov	r3, r2
    e500:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e502:	787b      	ldrb	r3, [r7, #1]
    e504:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e506:	78fb      	ldrb	r3, [r7, #3]
    e508:	4619      	mov	r1, r3
    e50a:	6878      	ldr	r0, [r7, #4]
    e50c:	4b16      	ldr	r3, [pc, #88]	; (e568 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e50e:	4798      	blx	r3
    e510:	4603      	mov	r3, r0
    e512:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e514:	7bfb      	ldrb	r3, [r7, #15]
    e516:	4619      	mov	r1, r3
    e518:	6878      	ldr	r0, [r7, #4]
    e51a:	4b14      	ldr	r3, [pc, #80]	; (e56c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e51c:	4798      	blx	r3
    e51e:	4603      	mov	r3, r0
    e520:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e522:	78bb      	ldrb	r3, [r7, #2]
    e524:	2b00      	cmp	r3, #0
    e526:	d009      	beq.n	e53c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e528:	7bba      	ldrb	r2, [r7, #14]
    e52a:	7b7b      	ldrb	r3, [r7, #13]
    e52c:	4619      	mov	r1, r3
    e52e:	2301      	movs	r3, #1
    e530:	408b      	lsls	r3, r1
    e532:	b2db      	uxtb	r3, r3
    e534:	4313      	orrs	r3, r2
    e536:	b2db      	uxtb	r3, r3
    e538:	73bb      	strb	r3, [r7, #14]
    e53a:	e00a      	b.n	e552 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e53c:	7bba      	ldrb	r2, [r7, #14]
    e53e:	7b7b      	ldrb	r3, [r7, #13]
    e540:	4619      	mov	r1, r3
    e542:	2301      	movs	r3, #1
    e544:	408b      	lsls	r3, r1
    e546:	b2db      	uxtb	r3, r3
    e548:	43db      	mvns	r3, r3
    e54a:	b2db      	uxtb	r3, r3
    e54c:	4013      	ands	r3, r2
    e54e:	b2db      	uxtb	r3, r3
    e550:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e552:	7bba      	ldrb	r2, [r7, #14]
    e554:	7bfb      	ldrb	r3, [r7, #15]
    e556:	4619      	mov	r1, r3
    e558:	6878      	ldr	r0, [r7, #4]
    e55a:	4b05      	ldr	r3, [pc, #20]	; (e570 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e55c:	4798      	blx	r3
}
    e55e:	bf00      	nop
    e560:	3710      	adds	r7, #16
    e562:	46bd      	mov	sp, r7
    e564:	bd80      	pop	{r7, pc}
    e566:	bf00      	nop
    e568:	0000e2cf 	.word	0x0000e2cf
    e56c:	0000e2ed 	.word	0x0000e2ed
    e570:	0000e375 	.word	0x0000e375

0000e574 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e574:	b590      	push	{r4, r7, lr}
    e576:	b085      	sub	sp, #20
    e578:	af02      	add	r7, sp, #8
    e57a:	6078      	str	r0, [r7, #4]
    e57c:	460b      	mov	r3, r1
    e57e:	70fb      	strb	r3, [r7, #3]
    e580:	4613      	mov	r3, r2
    e582:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e584:	78bb      	ldrb	r3, [r7, #2]
    e586:	2b01      	cmp	r3, #1
    e588:	bf0c      	ite	eq
    e58a:	2301      	moveq	r3, #1
    e58c:	2300      	movne	r3, #0
    e58e:	b2db      	uxtb	r3, r3
    e590:	461a      	mov	r2, r3
    e592:	78f9      	ldrb	r1, [r7, #3]
    e594:	2300      	movs	r3, #0
    e596:	9300      	str	r3, [sp, #0]
    e598:	2300      	movs	r3, #0
    e59a:	6878      	ldr	r0, [r7, #4]
    e59c:	4c02      	ldr	r4, [pc, #8]	; (e5a8 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e59e:	47a0      	blx	r4
}
    e5a0:	bf00      	nop
    e5a2:	370c      	adds	r7, #12
    e5a4:	46bd      	mov	sp, r7
    e5a6:	bd90      	pop	{r4, r7, pc}
    e5a8:	0000e4e9 	.word	0x0000e4e9

0000e5ac <_ZN14MCP23008_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	return	writeRegister(regAddr,gpio)==0;
}

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e5ac:	b590      	push	{r4, r7, lr}
    e5ae:	b085      	sub	sp, #20
    e5b0:	af02      	add	r7, sp, #8
    e5b2:	6078      	str	r0, [r7, #4]
    e5b4:	460b      	mov	r3, r1
    e5b6:	70fb      	strb	r3, [r7, #3]
    e5b8:	4613      	mov	r3, r2
    e5ba:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e5bc:	78ba      	ldrb	r2, [r7, #2]
    e5be:	78f9      	ldrb	r1, [r7, #3]
    e5c0:	2306      	movs	r3, #6
    e5c2:	9300      	str	r3, [sp, #0]
    e5c4:	2306      	movs	r3, #6
    e5c6:	6878      	ldr	r0, [r7, #4]
    e5c8:	4c02      	ldr	r4, [pc, #8]	; (e5d4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e5ca:	47a0      	blx	r4
}
    e5cc:	bf00      	nop
    e5ce:	370c      	adds	r7, #12
    e5d0:	46bd      	mov	sp, r7
    e5d2:	bd90      	pop	{r4, r7, pc}
    e5d4:	0000e4e9 	.word	0x0000e4e9

0000e5d8 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    e5d8:	b580      	push	{r7, lr}
    e5da:	b082      	sub	sp, #8
    e5dc:	af00      	add	r7, sp, #0
    e5de:	6078      	str	r0, [r7, #4]
    e5e0:	6039      	str	r1, [r7, #0]
    e5e2:	687b      	ldr	r3, [r7, #4]
    e5e4:	2b01      	cmp	r3, #1
    e5e6:	d10d      	bne.n	e604 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e5e8:	683b      	ldr	r3, [r7, #0]
    e5ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e5ee:	4293      	cmp	r3, r2
    e5f0:	d108      	bne.n	e604 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e5f2:	4906      	ldr	r1, [pc, #24]	; (e60c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e5f4:	4806      	ldr	r0, [pc, #24]	; (e610 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e5f6:	4b07      	ldr	r3, [pc, #28]	; (e614 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e5f8:	4798      	blx	r3
    e5fa:	4a07      	ldr	r2, [pc, #28]	; (e618 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e5fc:	4907      	ldr	r1, [pc, #28]	; (e61c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e5fe:	4804      	ldr	r0, [pc, #16]	; (e610 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e600:	4b07      	ldr	r3, [pc, #28]	; (e620 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e602:	4798      	blx	r3
    e604:	bf00      	nop
    e606:	3708      	adds	r7, #8
    e608:	46bd      	mov	sp, r7
    e60a:	bd80      	pop	{r7, pc}
    e60c:	2000ab70 	.word	0x2000ab70
    e610:	2000135c 	.word	0x2000135c
    e614:	0000dec9 	.word	0x0000dec9
    e618:	20000000 	.word	0x20000000
    e61c:	0000dee5 	.word	0x0000dee5
    e620:	00010a0d 	.word	0x00010a0d

0000e624 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    e624:	b580      	push	{r7, lr}
    e626:	af00      	add	r7, sp, #0
    e628:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e62c:	2001      	movs	r0, #1
    e62e:	4b01      	ldr	r3, [pc, #4]	; (e634 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    e630:	4798      	blx	r3
    e632:	bd80      	pop	{r7, pc}
    e634:	0000e5d9 	.word	0x0000e5d9

0000e638 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e638:	b480      	push	{r7}
    e63a:	b083      	sub	sp, #12
    e63c:	af00      	add	r7, sp, #0
    e63e:	6078      	str	r0, [r7, #4]
    e640:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e642:	687b      	ldr	r3, [r7, #4]
    e644:	683a      	ldr	r2, [r7, #0]
    e646:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	68db      	ldr	r3, [r3, #12]
    e64c:	2200      	movs	r2, #0
    e64e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    e650:	4a06      	ldr	r2, [pc, #24]	; (e66c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    e652:	687b      	ldr	r3, [r7, #4]
    e654:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e656:	687b      	ldr	r3, [r7, #4]
    e658:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e65c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e65e:	687b      	ldr	r3, [r7, #4]
    e660:	4618      	mov	r0, r3
    e662:	370c      	adds	r7, #12
    e664:	46bd      	mov	sp, r7
    e666:	bc80      	pop	{r7}
    e668:	4770      	bx	lr
    e66a:	bf00      	nop
    e66c:	20001474 	.word	0x20001474

0000e670 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e670:	b480      	push	{r7}
    e672:	b083      	sub	sp, #12
    e674:	af00      	add	r7, sp, #0
    e676:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e678:	687b      	ldr	r3, [r7, #4]
    e67a:	2200      	movs	r2, #0
    e67c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	4618      	mov	r0, r3
    e682:	370c      	adds	r7, #12
    e684:	46bd      	mov	sp, r7
    e686:	bc80      	pop	{r7}
    e688:	4770      	bx	lr
	...

0000e68c <_ZL9InitArrayv>:


static void InitArray(){
    e68c:	b480      	push	{r7}
    e68e:	b083      	sub	sp, #12
    e690:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    e692:	2301      	movs	r3, #1
    e694:	607b      	str	r3, [r7, #4]
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	2b1f      	cmp	r3, #31
    e69a:	dc34      	bgt.n	e706 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    e69c:	491e      	ldr	r1, [pc, #120]	; (e718 <_ZL9InitArrayv+0x8c>)
    e69e:	687a      	ldr	r2, [r7, #4]
    e6a0:	4613      	mov	r3, r2
    e6a2:	009b      	lsls	r3, r3, #2
    e6a4:	4413      	add	r3, r2
    e6a6:	009b      	lsls	r3, r3, #2
    e6a8:	440b      	add	r3, r1
    e6aa:	2200      	movs	r2, #0
    e6ac:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    e6ae:	491a      	ldr	r1, [pc, #104]	; (e718 <_ZL9InitArrayv+0x8c>)
    e6b0:	687a      	ldr	r2, [r7, #4]
    e6b2:	4613      	mov	r3, r2
    e6b4:	009b      	lsls	r3, r3, #2
    e6b6:	4413      	add	r3, r2
    e6b8:	009b      	lsls	r3, r3, #2
    e6ba:	440b      	add	r3, r1
    e6bc:	330c      	adds	r3, #12
    e6be:	2200      	movs	r2, #0
    e6c0:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    e6c2:	687b      	ldr	r3, [r7, #4]
    e6c4:	1e5a      	subs	r2, r3, #1
    e6c6:	6879      	ldr	r1, [r7, #4]
    e6c8:	460b      	mov	r3, r1
    e6ca:	009b      	lsls	r3, r3, #2
    e6cc:	440b      	add	r3, r1
    e6ce:	009b      	lsls	r3, r3, #2
    e6d0:	4911      	ldr	r1, [pc, #68]	; (e718 <_ZL9InitArrayv+0x8c>)
    e6d2:	4419      	add	r1, r3
    e6d4:	4810      	ldr	r0, [pc, #64]	; (e718 <_ZL9InitArrayv+0x8c>)
    e6d6:	4613      	mov	r3, r2
    e6d8:	009b      	lsls	r3, r3, #2
    e6da:	4413      	add	r3, r2
    e6dc:	009b      	lsls	r3, r3, #2
    e6de:	4403      	add	r3, r0
    e6e0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    e6e2:	4a0e      	ldr	r2, [pc, #56]	; (e71c <_ZL9InitArrayv+0x90>)
    e6e4:	687b      	ldr	r3, [r7, #4]
    e6e6:	2100      	movs	r1, #0
    e6e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    e6ec:	687b      	ldr	r3, [r7, #4]
    e6ee:	3b01      	subs	r3, #1
    e6f0:	687a      	ldr	r2, [r7, #4]
    e6f2:	0092      	lsls	r2, r2, #2
    e6f4:	4909      	ldr	r1, [pc, #36]	; (e71c <_ZL9InitArrayv+0x90>)
    e6f6:	440a      	add	r2, r1
    e6f8:	4908      	ldr	r1, [pc, #32]	; (e71c <_ZL9InitArrayv+0x90>)
    e6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    e6fe:	687b      	ldr	r3, [r7, #4]
    e700:	3301      	adds	r3, #1
    e702:	607b      	str	r3, [r7, #4]
    e704:	e7c7      	b.n	e696 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    e706:	4b06      	ldr	r3, [pc, #24]	; (e720 <_ZL9InitArrayv+0x94>)
    e708:	2201      	movs	r2, #1
    e70a:	701a      	strb	r2, [r3, #0]
		
}
    e70c:	bf00      	nop
    e70e:	370c      	adds	r7, #12
    e710:	46bd      	mov	sp, r7
    e712:	bc80      	pop	{r7}
    e714:	4770      	bx	lr
    e716:	bf00      	nop
    e718:	20001478 	.word	0x20001478
    e71c:	200016f8 	.word	0x200016f8
    e720:	20001778 	.word	0x20001778

0000e724 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    e724:	b580      	push	{r7, lr}
    e726:	b082      	sub	sp, #8
    e728:	af00      	add	r7, sp, #0
    e72a:	6078      	str	r0, [r7, #4]
	ticks=0;
    e72c:	687b      	ldr	r3, [r7, #4]
    e72e:	2200      	movs	r2, #0
    e730:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    e732:	4b0d      	ldr	r3, [pc, #52]	; (e768 <_ZN11Timer_Class4InitEv+0x44>)
    e734:	781b      	ldrb	r3, [r3, #0]
    e736:	f083 0301 	eor.w	r3, r3, #1
    e73a:	b2db      	uxtb	r3, r3
    e73c:	2b00      	cmp	r3, #0
    e73e:	d001      	beq.n	e744 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    e740:	4b0a      	ldr	r3, [pc, #40]	; (e76c <_ZN11Timer_Class4InitEv+0x48>)
    e742:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    e744:	6878      	ldr	r0, [r7, #4]
    e746:	4b0a      	ldr	r3, [pc, #40]	; (e770 <_ZN11Timer_Class4InitEv+0x4c>)
    e748:	4798      	blx	r3
    e74a:	4603      	mov	r3, r0
    e74c:	2b00      	cmp	r3, #0
    e74e:	bf0c      	ite	eq
    e750:	2301      	moveq	r3, #1
    e752:	2300      	movne	r3, #0
    e754:	b2da      	uxtb	r2, r3
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	709a      	strb	r2, [r3, #2]
	return isOK;
    e75a:	687b      	ldr	r3, [r7, #4]
    e75c:	789b      	ldrb	r3, [r3, #2]
    e75e:	b2db      	uxtb	r3, r3
}
    e760:	4618      	mov	r0, r3
    e762:	3708      	adds	r7, #8
    e764:	46bd      	mov	sp, r7
    e766:	bd80      	pop	{r7, pc}
    e768:	20001778 	.word	0x20001778
    e76c:	0000e68d 	.word	0x0000e68d
    e770:	0000e775 	.word	0x0000e775

0000e774 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    e774:	b580      	push	{r7, lr}
    e776:	b084      	sub	sp, #16
    e778:	af00      	add	r7, sp, #0
    e77a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e77c:	687b      	ldr	r3, [r7, #4]
    e77e:	68db      	ldr	r3, [r3, #12]
    e780:	4618      	mov	r0, r3
    e782:	4b04      	ldr	r3, [pc, #16]	; (e794 <_ZN11Timer_Class5StartEv+0x20>)
    e784:	4798      	blx	r3
    e786:	60f8      	str	r0, [r7, #12]
	return status;
    e788:	68fb      	ldr	r3, [r7, #12]
	
}
    e78a:	4618      	mov	r0, r3
    e78c:	3710      	adds	r7, #16
    e78e:	46bd      	mov	sp, r7
    e790:	bd80      	pop	{r7, pc}
    e792:	bf00      	nop
    e794:	000036c5 	.word	0x000036c5

0000e798 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    e798:	b580      	push	{r7, lr}
    e79a:	b084      	sub	sp, #16
    e79c:	af00      	add	r7, sp, #0
    e79e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e7a0:	687b      	ldr	r3, [r7, #4]
    e7a2:	68db      	ldr	r3, [r3, #12]
    e7a4:	4618      	mov	r0, r3
    e7a6:	4b05      	ldr	r3, [pc, #20]	; (e7bc <_ZN11Timer_Class4StopEv+0x24>)
    e7a8:	4798      	blx	r3
    e7aa:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	2200      	movs	r2, #0
    e7b0:	705a      	strb	r2, [r3, #1]
	return status;
    e7b2:	68fb      	ldr	r3, [r7, #12]
}
    e7b4:	4618      	mov	r0, r3
    e7b6:	3710      	adds	r7, #16
    e7b8:	46bd      	mov	sp, r7
    e7ba:	bd80      	pop	{r7, pc}
    e7bc:	0000372d 	.word	0x0000372d

0000e7c0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e7c0:	b580      	push	{r7, lr}
    e7c2:	b086      	sub	sp, #24
    e7c4:	af00      	add	r7, sp, #0
    e7c6:	60f8      	str	r0, [r7, #12]
    e7c8:	60b9      	str	r1, [r7, #8]
    e7ca:	607a      	str	r2, [r7, #4]
    e7cc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    e7ce:	68b9      	ldr	r1, [r7, #8]
    e7d0:	68f8      	ldr	r0, [r7, #12]
    e7d2:	4b0e      	ldr	r3, [pc, #56]	; (e80c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e7d4:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    e7d6:	68fb      	ldr	r3, [r7, #12]
    e7d8:	699b      	ldr	r3, [r3, #24]
    e7da:	687a      	ldr	r2, [r7, #4]
    e7dc:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e7de:	68fb      	ldr	r3, [r7, #12]
    e7e0:	699b      	ldr	r3, [r3, #24]
    e7e2:	68ba      	ldr	r2, [r7, #8]
    e7e4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e7e6:	68fb      	ldr	r3, [r7, #12]
    e7e8:	699b      	ldr	r3, [r3, #24]
    e7ea:	78fa      	ldrb	r2, [r7, #3]
    e7ec:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e7ee:	68fb      	ldr	r3, [r7, #12]
    e7f0:	68da      	ldr	r2, [r3, #12]
    e7f2:	68fb      	ldr	r3, [r7, #12]
    e7f4:	699b      	ldr	r3, [r3, #24]
    e7f6:	4619      	mov	r1, r3
    e7f8:	4610      	mov	r0, r2
    e7fa:	4b05      	ldr	r3, [pc, #20]	; (e810 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    e7fc:	4798      	blx	r3
    e7fe:	6178      	str	r0, [r7, #20]
	
	return status;
    e800:	697b      	ldr	r3, [r7, #20]
}
    e802:	4618      	mov	r0, r3
    e804:	3718      	adds	r7, #24
    e806:	46bd      	mov	sp, r7
    e808:	bd80      	pop	{r7, pc}
    e80a:	bf00      	nop
    e80c:	0000e99d 	.word	0x0000e99d
    e810:	00003799 	.word	0x00003799

0000e814 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    e814:	b580      	push	{r7, lr}
    e816:	b086      	sub	sp, #24
    e818:	af00      	add	r7, sp, #0
    e81a:	60f8      	str	r0, [r7, #12]
    e81c:	60b9      	str	r1, [r7, #8]
    e81e:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    e820:	687a      	ldr	r2, [r7, #4]
    e822:	68b9      	ldr	r1, [r7, #8]
    e824:	68f8      	ldr	r0, [r7, #12]
    e826:	4b0c      	ldr	r3, [pc, #48]	; (e858 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    e828:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e82a:	68fb      	ldr	r3, [r7, #12]
    e82c:	68db      	ldr	r3, [r3, #12]
    e82e:	681b      	ldr	r3, [r3, #0]
    e830:	699b      	ldr	r3, [r3, #24]
    e832:	68fa      	ldr	r2, [r7, #12]
    e834:	68d2      	ldr	r2, [r2, #12]
    e836:	3204      	adds	r2, #4
    e838:	4610      	mov	r0, r2
    e83a:	4798      	blx	r3
    e83c:	4603      	mov	r3, r0
    e83e:	2b00      	cmp	r3, #0
    e840:	d105      	bne.n	e84e <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    e842:	68fb      	ldr	r3, [r7, #12]
    e844:	68db      	ldr	r3, [r3, #12]
    e846:	4618      	mov	r0, r3
    e848:	4b04      	ldr	r3, [pc, #16]	; (e85c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    e84a:	4798      	blx	r3
    e84c:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    e84e:	697b      	ldr	r3, [r7, #20]
}
    e850:	4618      	mov	r0, r3
    e852:	3718      	adds	r7, #24
    e854:	46bd      	mov	sp, r7
    e856:	bd80      	pop	{r7, pc}
    e858:	0000e861 	.word	0x0000e861
    e85c:	000036c5 	.word	0x000036c5

0000e860 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e860:	b590      	push	{r4, r7, lr}
    e862:	b087      	sub	sp, #28
    e864:	af00      	add	r7, sp, #0
    e866:	60f8      	str	r0, [r7, #12]
    e868:	60b9      	str	r1, [r7, #8]
    e86a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e86c:	2301      	movs	r3, #1
    e86e:	687a      	ldr	r2, [r7, #4]
    e870:	68b9      	ldr	r1, [r7, #8]
    e872:	68f8      	ldr	r0, [r7, #12]
    e874:	4c03      	ldr	r4, [pc, #12]	; (e884 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    e876:	47a0      	blx	r4
    e878:	6178      	str	r0, [r7, #20]
		return status;
    e87a:	697b      	ldr	r3, [r7, #20]
}
    e87c:	4618      	mov	r0, r3
    e87e:	371c      	adds	r7, #28
    e880:	46bd      	mov	sp, r7
    e882:	bd90      	pop	{r4, r7, pc}
    e884:	0000e7c1 	.word	0x0000e7c1

0000e888 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    e888:	b580      	push	{r7, lr}
    e88a:	b082      	sub	sp, #8
    e88c:	af00      	add	r7, sp, #0
    e88e:	6078      	str	r0, [r7, #4]
    e890:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e892:	6839      	ldr	r1, [r7, #0]
    e894:	6878      	ldr	r0, [r7, #4]
    e896:	4b0f      	ldr	r3, [pc, #60]	; (e8d4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    e898:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e89a:	687b      	ldr	r3, [r7, #4]
    e89c:	68db      	ldr	r3, [r3, #12]
    e89e:	f103 0218 	add.w	r2, r3, #24
    e8a2:	687b      	ldr	r3, [r7, #4]
    e8a4:	699b      	ldr	r3, [r3, #24]
    e8a6:	4619      	mov	r1, r3
    e8a8:	4610      	mov	r0, r2
    e8aa:	4b0b      	ldr	r3, [pc, #44]	; (e8d8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    e8ac:	4798      	blx	r3
    e8ae:	4603      	mov	r3, r0
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	d007      	beq.n	e8c4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	68da      	ldr	r2, [r3, #12]
    e8b8:	687b      	ldr	r3, [r7, #4]
    e8ba:	699b      	ldr	r3, [r3, #24]
    e8bc:	4619      	mov	r1, r3
    e8be:	4610      	mov	r0, r2
    e8c0:	4b06      	ldr	r3, [pc, #24]	; (e8dc <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    e8c2:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e8c4:	687b      	ldr	r3, [r7, #4]
    e8c6:	699b      	ldr	r3, [r3, #24]
    e8c8:	2200      	movs	r2, #0
    e8ca:	60da      	str	r2, [r3, #12]
}
    e8cc:	bf00      	nop
    e8ce:	3708      	adds	r7, #8
    e8d0:	46bd      	mov	sp, r7
    e8d2:	bd80      	pop	{r7, pc}
    e8d4:	0000ea1d 	.word	0x0000ea1d
    e8d8:	00004485 	.word	0x00004485
    e8dc:	0000389d 	.word	0x0000389d

0000e8e0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e8e0:	b590      	push	{r4, r7, lr}
    e8e2:	b087      	sub	sp, #28
    e8e4:	af00      	add	r7, sp, #0
    e8e6:	60f8      	str	r0, [r7, #12]
    e8e8:	60b9      	str	r1, [r7, #8]
    e8ea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e8ec:	2300      	movs	r3, #0
    e8ee:	687a      	ldr	r2, [r7, #4]
    e8f0:	68b9      	ldr	r1, [r7, #8]
    e8f2:	68f8      	ldr	r0, [r7, #12]
    e8f4:	4c0c      	ldr	r4, [pc, #48]	; (e928 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e8f6:	47a0      	blx	r4
    e8f8:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e8fa:	68fb      	ldr	r3, [r7, #12]
    e8fc:	68db      	ldr	r3, [r3, #12]
    e8fe:	681b      	ldr	r3, [r3, #0]
    e900:	699b      	ldr	r3, [r3, #24]
    e902:	68fa      	ldr	r2, [r7, #12]
    e904:	68d2      	ldr	r2, [r2, #12]
    e906:	3204      	adds	r2, #4
    e908:	4610      	mov	r0, r2
    e90a:	4798      	blx	r3
    e90c:	4603      	mov	r3, r0
    e90e:	2b00      	cmp	r3, #0
    e910:	d105      	bne.n	e91e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e912:	68fb      	ldr	r3, [r7, #12]
    e914:	68db      	ldr	r3, [r3, #12]
    e916:	4618      	mov	r0, r3
    e918:	4b04      	ldr	r3, [pc, #16]	; (e92c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e91a:	4798      	blx	r3
    e91c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e91e:	697b      	ldr	r3, [r7, #20]
}
    e920:	4618      	mov	r0, r3
    e922:	371c      	adds	r7, #28
    e924:	46bd      	mov	sp, r7
    e926:	bd90      	pop	{r4, r7, pc}
    e928:	0000e7c1 	.word	0x0000e7c1
    e92c:	000036c5 	.word	0x000036c5

0000e930 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e930:	b480      	push	{r7}
    e932:	b085      	sub	sp, #20
    e934:	af00      	add	r7, sp, #0
    e936:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e938:	2300      	movs	r3, #0
    e93a:	73fb      	strb	r3, [r7, #15]
    e93c:	7bfb      	ldrb	r3, [r7, #15]
    e93e:	2b1f      	cmp	r3, #31
    e940:	dc23      	bgt.n	e98a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e942:	687b      	ldr	r3, [r7, #4]
    e944:	7f1a      	ldrb	r2, [r3, #28]
    e946:	7bfb      	ldrb	r3, [r7, #15]
    e948:	4413      	add	r3, r2
    e94a:	b2db      	uxtb	r3, r3
    e94c:	f003 031f 	and.w	r3, r3, #31
    e950:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e952:	7bba      	ldrb	r2, [r7, #14]
    e954:	4910      	ldr	r1, [pc, #64]	; (e998 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e956:	4613      	mov	r3, r2
    e958:	009b      	lsls	r3, r3, #2
    e95a:	4413      	add	r3, r2
    e95c:	009b      	lsls	r3, r3, #2
    e95e:	440b      	add	r3, r1
    e960:	330c      	adds	r3, #12
    e962:	681b      	ldr	r3, [r3, #0]
    e964:	2b00      	cmp	r3, #0
    e966:	d10c      	bne.n	e982 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e968:	7bba      	ldrb	r2, [r7, #14]
    e96a:	4613      	mov	r3, r2
    e96c:	009b      	lsls	r3, r3, #2
    e96e:	4413      	add	r3, r2
    e970:	009b      	lsls	r3, r3, #2
    e972:	4a09      	ldr	r2, [pc, #36]	; (e998 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e974:	441a      	add	r2, r3
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e97a:	687b      	ldr	r3, [r7, #4]
    e97c:	7bba      	ldrb	r2, [r7, #14]
    e97e:	771a      	strb	r2, [r3, #28]
			return;
    e980:	e006      	b.n	e990 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e982:	7bfb      	ldrb	r3, [r7, #15]
    e984:	3301      	adds	r3, #1
    e986:	73fb      	strb	r3, [r7, #15]
    e988:	e7d8      	b.n	e93c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e98a:	687b      	ldr	r3, [r7, #4]
    e98c:	4a02      	ldr	r2, [pc, #8]	; (e998 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e98e:	619a      	str	r2, [r3, #24]

}
    e990:	3714      	adds	r7, #20
    e992:	46bd      	mov	sp, r7
    e994:	bc80      	pop	{r7}
    e996:	4770      	bx	lr
    e998:	20001478 	.word	0x20001478

0000e99c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e99c:	b580      	push	{r7, lr}
    e99e:	b084      	sub	sp, #16
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	6078      	str	r0, [r7, #4]
    e9a4:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e9a6:	2300      	movs	r3, #0
    e9a8:	73fb      	strb	r3, [r7, #15]
    e9aa:	7bfb      	ldrb	r3, [r7, #15]
    e9ac:	2b1f      	cmp	r3, #31
    e9ae:	dc28      	bgt.n	ea02 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	7f1a      	ldrb	r2, [r3, #28]
    e9b4:	7bfb      	ldrb	r3, [r7, #15]
    e9b6:	4413      	add	r3, r2
    e9b8:	b2db      	uxtb	r3, r3
    e9ba:	f003 031f 	and.w	r3, r3, #31
    e9be:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e9c0:	7bba      	ldrb	r2, [r7, #14]
    e9c2:	4913      	ldr	r1, [pc, #76]	; (ea10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e9c4:	4613      	mov	r3, r2
    e9c6:	009b      	lsls	r3, r3, #2
    e9c8:	4413      	add	r3, r2
    e9ca:	009b      	lsls	r3, r3, #2
    e9cc:	440b      	add	r3, r1
    e9ce:	330c      	adds	r3, #12
    e9d0:	681a      	ldr	r2, [r3, #0]
    e9d2:	683b      	ldr	r3, [r7, #0]
    e9d4:	429a      	cmp	r2, r3
    e9d6:	d110      	bne.n	e9fa <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e9d8:	6839      	ldr	r1, [r7, #0]
    e9da:	6878      	ldr	r0, [r7, #4]
    e9dc:	4b0d      	ldr	r3, [pc, #52]	; (ea14 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e9de:	4798      	blx	r3
			task=&taskArray[j];
    e9e0:	7bba      	ldrb	r2, [r7, #14]
    e9e2:	4613      	mov	r3, r2
    e9e4:	009b      	lsls	r3, r3, #2
    e9e6:	4413      	add	r3, r2
    e9e8:	009b      	lsls	r3, r3, #2
    e9ea:	4a09      	ldr	r2, [pc, #36]	; (ea10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e9ec:	441a      	add	r2, r3
    e9ee:	687b      	ldr	r3, [r7, #4]
    e9f0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e9f2:	687b      	ldr	r3, [r7, #4]
    e9f4:	7bba      	ldrb	r2, [r7, #14]
    e9f6:	771a      	strb	r2, [r3, #28]
			return;
    e9f8:	e006      	b.n	ea08 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e9fa:	7bfb      	ldrb	r3, [r7, #15]
    e9fc:	3301      	adds	r3, #1
    e9fe:	73fb      	strb	r3, [r7, #15]
    ea00:	e7d3      	b.n	e9aa <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    ea02:	6878      	ldr	r0, [r7, #4]
    ea04:	4b04      	ldr	r3, [pc, #16]	; (ea18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    ea06:	4798      	blx	r3
	//task=&taskArray[0];

}
    ea08:	3710      	adds	r7, #16
    ea0a:	46bd      	mov	sp, r7
    ea0c:	bd80      	pop	{r7, pc}
    ea0e:	bf00      	nop
    ea10:	20001478 	.word	0x20001478
    ea14:	0000e889 	.word	0x0000e889
    ea18:	0000e931 	.word	0x0000e931

0000ea1c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    ea1c:	b480      	push	{r7}
    ea1e:	b085      	sub	sp, #20
    ea20:	af00      	add	r7, sp, #0
    ea22:	6078      	str	r0, [r7, #4]
    ea24:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ea26:	2300      	movs	r3, #0
    ea28:	73fb      	strb	r3, [r7, #15]
    ea2a:	7bfb      	ldrb	r3, [r7, #15]
    ea2c:	2b1f      	cmp	r3, #31
    ea2e:	dc19      	bgt.n	ea64 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    ea30:	7bfa      	ldrb	r2, [r7, #15]
    ea32:	490f      	ldr	r1, [pc, #60]	; (ea70 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ea34:	4613      	mov	r3, r2
    ea36:	009b      	lsls	r3, r3, #2
    ea38:	4413      	add	r3, r2
    ea3a:	009b      	lsls	r3, r3, #2
    ea3c:	440b      	add	r3, r1
    ea3e:	330c      	adds	r3, #12
    ea40:	681a      	ldr	r2, [r3, #0]
    ea42:	683b      	ldr	r3, [r7, #0]
    ea44:	429a      	cmp	r2, r3
    ea46:	d109      	bne.n	ea5c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    ea48:	7bfa      	ldrb	r2, [r7, #15]
    ea4a:	4613      	mov	r3, r2
    ea4c:	009b      	lsls	r3, r3, #2
    ea4e:	4413      	add	r3, r2
    ea50:	009b      	lsls	r3, r3, #2
    ea52:	4a07      	ldr	r2, [pc, #28]	; (ea70 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ea54:	441a      	add	r2, r3
    ea56:	687b      	ldr	r3, [r7, #4]
    ea58:	619a      	str	r2, [r3, #24]
			return;
    ea5a:	e004      	b.n	ea66 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ea5c:	7bfb      	ldrb	r3, [r7, #15]
    ea5e:	3301      	adds	r3, #1
    ea60:	73fb      	strb	r3, [r7, #15]
    ea62:	e7e2      	b.n	ea2a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    ea64:	bf00      	nop
}
    ea66:	3714      	adds	r7, #20
    ea68:	46bd      	mov	sp, r7
    ea6a:	bc80      	pop	{r7}
    ea6c:	4770      	bx	lr
    ea6e:	bf00      	nop
    ea70:	20001478 	.word	0x20001478

0000ea74 <_Z41__static_initialization_and_destruction_0ii>:
    ea74:	b580      	push	{r7, lr}
    ea76:	b082      	sub	sp, #8
    ea78:	af00      	add	r7, sp, #0
    ea7a:	6078      	str	r0, [r7, #4]
    ea7c:	6039      	str	r1, [r7, #0]
    ea7e:	687b      	ldr	r3, [r7, #4]
    ea80:	2b01      	cmp	r3, #1
    ea82:	d14c      	bne.n	eb1e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ea84:	683b      	ldr	r3, [r7, #0]
    ea86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ea8a:	4293      	cmp	r3, r2
    ea8c:	d147      	bne.n	eb1e <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ea8e:	4926      	ldr	r1, [pc, #152]	; (eb28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ea90:	4826      	ldr	r0, [pc, #152]	; (eb2c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ea92:	4b27      	ldr	r3, [pc, #156]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea94:	4798      	blx	r3
    ea96:	4a27      	ldr	r2, [pc, #156]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea98:	4927      	ldr	r1, [pc, #156]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea9a:	4824      	ldr	r0, [pc, #144]	; (eb2c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ea9c:	4b27      	ldr	r3, [pc, #156]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea9e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    eaa0:	4927      	ldr	r1, [pc, #156]	; (eb40 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    eaa2:	4828      	ldr	r0, [pc, #160]	; (eb44 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eaa4:	4b22      	ldr	r3, [pc, #136]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eaa6:	4798      	blx	r3
    eaa8:	4a22      	ldr	r2, [pc, #136]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eaaa:	4923      	ldr	r1, [pc, #140]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eaac:	4825      	ldr	r0, [pc, #148]	; (eb44 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eaae:	4b23      	ldr	r3, [pc, #140]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eab0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    eab2:	4925      	ldr	r1, [pc, #148]	; (eb48 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    eab4:	4825      	ldr	r0, [pc, #148]	; (eb4c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eab6:	4b1e      	ldr	r3, [pc, #120]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eab8:	4798      	blx	r3
    eaba:	4a1e      	ldr	r2, [pc, #120]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eabc:	491e      	ldr	r1, [pc, #120]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eabe:	4823      	ldr	r0, [pc, #140]	; (eb4c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eac0:	4b1e      	ldr	r3, [pc, #120]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eac2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    eac4:	4922      	ldr	r1, [pc, #136]	; (eb50 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    eac6:	4823      	ldr	r0, [pc, #140]	; (eb54 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    eac8:	4b19      	ldr	r3, [pc, #100]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eaca:	4798      	blx	r3
    eacc:	4a19      	ldr	r2, [pc, #100]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eace:	491a      	ldr	r1, [pc, #104]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ead0:	4820      	ldr	r0, [pc, #128]	; (eb54 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ead2:	4b1a      	ldr	r3, [pc, #104]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ead4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ead6:	4920      	ldr	r1, [pc, #128]	; (eb58 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ead8:	4820      	ldr	r0, [pc, #128]	; (eb5c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    eada:	4b15      	ldr	r3, [pc, #84]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eadc:	4798      	blx	r3
    eade:	4a15      	ldr	r2, [pc, #84]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eae0:	4915      	ldr	r1, [pc, #84]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eae2:	481e      	ldr	r0, [pc, #120]	; (eb5c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    eae4:	4b15      	ldr	r3, [pc, #84]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eae6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    eae8:	491d      	ldr	r1, [pc, #116]	; (eb60 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    eaea:	481e      	ldr	r0, [pc, #120]	; (eb64 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    eaec:	4b10      	ldr	r3, [pc, #64]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eaee:	4798      	blx	r3
    eaf0:	4a10      	ldr	r2, [pc, #64]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eaf2:	4911      	ldr	r1, [pc, #68]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eaf4:	481b      	ldr	r0, [pc, #108]	; (eb64 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    eaf6:	4b11      	ldr	r3, [pc, #68]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eaf8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    eafa:	491b      	ldr	r1, [pc, #108]	; (eb68 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    eafc:	481b      	ldr	r0, [pc, #108]	; (eb6c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    eafe:	4b0c      	ldr	r3, [pc, #48]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eb00:	4798      	blx	r3
    eb02:	4a0c      	ldr	r2, [pc, #48]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eb04:	490c      	ldr	r1, [pc, #48]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eb06:	4819      	ldr	r0, [pc, #100]	; (eb6c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    eb08:	4b0c      	ldr	r3, [pc, #48]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eb0a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    eb0c:	4918      	ldr	r1, [pc, #96]	; (eb70 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    eb0e:	4819      	ldr	r0, [pc, #100]	; (eb74 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eb10:	4b07      	ldr	r3, [pc, #28]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eb12:	4798      	blx	r3
    eb14:	4a07      	ldr	r2, [pc, #28]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eb16:	4908      	ldr	r1, [pc, #32]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eb18:	4816      	ldr	r0, [pc, #88]	; (eb74 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eb1a:	4b08      	ldr	r3, [pc, #32]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eb1c:	4798      	blx	r3
    eb1e:	bf00      	nop
    eb20:	3708      	adds	r7, #8
    eb22:	46bd      	mov	sp, r7
    eb24:	bd80      	pop	{r7, pc}
    eb26:	bf00      	nop
    eb28:	2000aa40 	.word	0x2000aa40
    eb2c:	20001374 	.word	0x20001374
    eb30:	0000e639 	.word	0x0000e639
    eb34:	20000000 	.word	0x20000000
    eb38:	0000e671 	.word	0x0000e671
    eb3c:	00010a0d 	.word	0x00010a0d
    eb40:	2000aad4 	.word	0x2000aad4
    eb44:	20001394 	.word	0x20001394
    eb48:	2000abf8 	.word	0x2000abf8
    eb4c:	200013b4 	.word	0x200013b4
    eb50:	2000aaf4 	.word	0x2000aaf4
    eb54:	200013d4 	.word	0x200013d4
    eb58:	2000abb8 	.word	0x2000abb8
    eb5c:	200013f4 	.word	0x200013f4
    eb60:	2000abd8 	.word	0x2000abd8
    eb64:	20001414 	.word	0x20001414
    eb68:	2000aab0 	.word	0x2000aab0
    eb6c:	20001434 	.word	0x20001434
    eb70:	2000ab50 	.word	0x2000ab50
    eb74:	20001454 	.word	0x20001454

0000eb78 <_GLOBAL__sub_I_ptrTimerClass>:
    eb78:	b580      	push	{r7, lr}
    eb7a:	af00      	add	r7, sp, #0
    eb7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eb80:	2001      	movs	r0, #1
    eb82:	4b01      	ldr	r3, [pc, #4]	; (eb88 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    eb84:	4798      	blx	r3
    eb86:	bd80      	pop	{r7, pc}
    eb88:	0000ea75 	.word	0x0000ea75

0000eb8c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    eb8c:	b480      	push	{r7}
    eb8e:	b083      	sub	sp, #12
    eb90:	af00      	add	r7, sp, #0
    eb92:	6078      	str	r0, [r7, #4]
    eb94:	4a05      	ldr	r2, [pc, #20]	; (ebac <_ZN5PrintC1Ev+0x20>)
    eb96:	687b      	ldr	r3, [r7, #4]
    eb98:	601a      	str	r2, [r3, #0]
    eb9a:	687b      	ldr	r3, [r7, #4]
    eb9c:	2200      	movs	r2, #0
    eb9e:	605a      	str	r2, [r3, #4]
    eba0:	687b      	ldr	r3, [r7, #4]
    eba2:	4618      	mov	r0, r3
    eba4:	370c      	adds	r7, #12
    eba6:	46bd      	mov	sp, r7
    eba8:	bc80      	pop	{r7}
    ebaa:	4770      	bx	lr
    ebac:	00011338 	.word	0x00011338

0000ebb0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    ebb0:	b480      	push	{r7}
    ebb2:	b083      	sub	sp, #12
    ebb4:	af00      	add	r7, sp, #0
    ebb6:	6078      	str	r0, [r7, #4]
    ebb8:	2300      	movs	r3, #0
    ebba:	4618      	mov	r0, r3
    ebbc:	370c      	adds	r7, #12
    ebbe:	46bd      	mov	sp, r7
    ebc0:	bc80      	pop	{r7}
    ebc2:	4770      	bx	lr

0000ebc4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ebc4:	b480      	push	{r7}
    ebc6:	b083      	sub	sp, #12
    ebc8:	af00      	add	r7, sp, #0
    ebca:	6078      	str	r0, [r7, #4]
    ebcc:	bf00      	nop
    ebce:	370c      	adds	r7, #12
    ebd0:	46bd      	mov	sp, r7
    ebd2:	bc80      	pop	{r7}
    ebd4:	4770      	bx	lr
	...

0000ebd8 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ebd8:	b580      	push	{r7, lr}
    ebda:	b082      	sub	sp, #8
    ebdc:	af00      	add	r7, sp, #0
    ebde:	6078      	str	r0, [r7, #4]
    ebe0:	687b      	ldr	r3, [r7, #4]
    ebe2:	4618      	mov	r0, r3
    ebe4:	4b06      	ldr	r3, [pc, #24]	; (ec00 <_ZN6StreamC1Ev+0x28>)
    ebe6:	4798      	blx	r3
    ebe8:	4a06      	ldr	r2, [pc, #24]	; (ec04 <_ZN6StreamC1Ev+0x2c>)
    ebea:	687b      	ldr	r3, [r7, #4]
    ebec:	601a      	str	r2, [r3, #0]
    ebee:	687b      	ldr	r3, [r7, #4]
    ebf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ebf4:	609a      	str	r2, [r3, #8]
    ebf6:	687b      	ldr	r3, [r7, #4]
    ebf8:	4618      	mov	r0, r3
    ebfa:	3708      	adds	r7, #8
    ebfc:	46bd      	mov	sp, r7
    ebfe:	bd80      	pop	{r7, pc}
    ec00:	0000eb8d 	.word	0x0000eb8d
    ec04:	000112fc 	.word	0x000112fc

0000ec08 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ec08:	b480      	push	{r7}
    ec0a:	b083      	sub	sp, #12
    ec0c:	af00      	add	r7, sp, #0
    ec0e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ec10:	4b06      	ldr	r3, [pc, #24]	; (ec2c <_ZL10USBTimeoutPK10timer_task+0x24>)
    ec12:	681b      	ldr	r3, [r3, #0]
    ec14:	2201      	movs	r2, #1
    ec16:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ec18:	4b04      	ldr	r3, [pc, #16]	; (ec2c <_ZL10USBTimeoutPK10timer_task+0x24>)
    ec1a:	681b      	ldr	r3, [r3, #0]
    ec1c:	2200      	movs	r2, #0
    ec1e:	741a      	strb	r2, [r3, #16]
	
}
    ec20:	bf00      	nop
    ec22:	370c      	adds	r7, #12
    ec24:	46bd      	mov	sp, r7
    ec26:	bc80      	pop	{r7}
    ec28:	4770      	bx	lr
    ec2a:	bf00      	nop
    ec2c:	2000187c 	.word	0x2000187c

0000ec30 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ec30:	b480      	push	{r7}
    ec32:	b083      	sub	sp, #12
    ec34:	af00      	add	r7, sp, #0
    ec36:	4603      	mov	r3, r0
    ec38:	603a      	str	r2, [r7, #0]
    ec3a:	71fb      	strb	r3, [r7, #7]
    ec3c:	460b      	mov	r3, r1
    ec3e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ec40:	4b08      	ldr	r3, [pc, #32]	; (ec64 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ec42:	681b      	ldr	r3, [r3, #0]
    ec44:	2201      	movs	r2, #1
    ec46:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ec48:	4b06      	ldr	r3, [pc, #24]	; (ec64 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ec4a:	681b      	ldr	r3, [r3, #0]
    ec4c:	2201      	movs	r2, #1
    ec4e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ec50:	4b04      	ldr	r3, [pc, #16]	; (ec64 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ec52:	681b      	ldr	r3, [r3, #0]
    ec54:	2201      	movs	r2, #1
    ec56:	741a      	strb	r2, [r3, #16]


	return false;
    ec58:	2300      	movs	r3, #0
}
    ec5a:	4618      	mov	r0, r3
    ec5c:	370c      	adds	r7, #12
    ec5e:	46bd      	mov	sp, r7
    ec60:	bc80      	pop	{r7}
    ec62:	4770      	bx	lr
    ec64:	2000187c 	.word	0x2000187c

0000ec68 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ec68:	b480      	push	{r7}
    ec6a:	b083      	sub	sp, #12
    ec6c:	af00      	add	r7, sp, #0
    ec6e:	4603      	mov	r3, r0
    ec70:	603a      	str	r2, [r7, #0]
    ec72:	71fb      	strb	r3, [r7, #7]
    ec74:	460b      	mov	r3, r1
    ec76:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ec78:	4b08      	ldr	r3, [pc, #32]	; (ec9c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ec7a:	681b      	ldr	r3, [r3, #0]
    ec7c:	2201      	movs	r2, #1
    ec7e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ec80:	4b06      	ldr	r3, [pc, #24]	; (ec9c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ec82:	681b      	ldr	r3, [r3, #0]
    ec84:	2201      	movs	r2, #1
    ec86:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ec88:	4b04      	ldr	r3, [pc, #16]	; (ec9c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ec8a:	681b      	ldr	r3, [r3, #0]
    ec8c:	2201      	movs	r2, #1
    ec8e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ec90:	2300      	movs	r3, #0
}
    ec92:	4618      	mov	r0, r3
    ec94:	370c      	adds	r7, #12
    ec96:	46bd      	mov	sp, r7
    ec98:	bc80      	pop	{r7}
    ec9a:	4770      	bx	lr
    ec9c:	2000187c 	.word	0x2000187c

0000eca0 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    eca0:	b580      	push	{r7, lr}
    eca2:	b082      	sub	sp, #8
    eca4:	af00      	add	r7, sp, #0
    eca6:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    eca8:	793b      	ldrb	r3, [r7, #4]
    ecaa:	f003 0301 	and.w	r3, r3, #1
    ecae:	b2db      	uxtb	r3, r3
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	d013      	beq.n	ecdc <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ecb4:	490c      	ldr	r1, [pc, #48]	; (ece8 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ecb6:	2000      	movs	r0, #0
    ecb8:	4b0c      	ldr	r3, [pc, #48]	; (ecec <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ecba:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ecbc:	490c      	ldr	r1, [pc, #48]	; (ecf0 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ecbe:	2001      	movs	r0, #1
    ecc0:	4b0a      	ldr	r3, [pc, #40]	; (ecec <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ecc2:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ecc4:	4b0b      	ldr	r3, [pc, #44]	; (ecf4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ecc6:	681b      	ldr	r3, [r3, #0]
    ecc8:	2201      	movs	r2, #1
    ecca:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    eccc:	4b09      	ldr	r3, [pc, #36]	; (ecf4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ecce:	681b      	ldr	r3, [r3, #0]
    ecd0:	2201      	movs	r2, #1
    ecd2:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ecd4:	4b07      	ldr	r3, [pc, #28]	; (ecf4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ecd6:	681b      	ldr	r3, [r3, #0]
    ecd8:	2201      	movs	r2, #1
    ecda:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ecdc:	2300      	movs	r3, #0
}
    ecde:	4618      	mov	r0, r3
    ece0:	3708      	adds	r7, #8
    ece2:	46bd      	mov	sp, r7
    ece4:	bd80      	pop	{r7, pc}
    ece6:	bf00      	nop
    ece8:	0000ec31 	.word	0x0000ec31
    ecec:	0000ce91 	.word	0x0000ce91
    ecf0:	0000ec69 	.word	0x0000ec69
    ecf4:	2000187c 	.word	0x2000187c

0000ecf8 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    ecf8:	b580      	push	{r7, lr}
    ecfa:	b082      	sub	sp, #8
    ecfc:	af00      	add	r7, sp, #0
    ecfe:	6078      	str	r0, [r7, #4]
    ed00:	687b      	ldr	r3, [r7, #4]
    ed02:	4618      	mov	r0, r3
    ed04:	4b0a      	ldr	r3, [pc, #40]	; (ed30 <_ZN9CDC_ClassC1Ev+0x38>)
    ed06:	4798      	blx	r3
    ed08:	687b      	ldr	r3, [r7, #4]
    ed0a:	3310      	adds	r3, #16
    ed0c:	4618      	mov	r0, r3
    ed0e:	4b09      	ldr	r3, [pc, #36]	; (ed34 <_ZN9CDC_ClassC1Ev+0x3c>)
    ed10:	4798      	blx	r3
    ed12:	4a09      	ldr	r2, [pc, #36]	; (ed38 <_ZN9CDC_ClassC1Ev+0x40>)
    ed14:	687b      	ldr	r3, [r7, #4]
    ed16:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ed18:	687b      	ldr	r3, [r7, #4]
    ed1a:	f04f 32ff 	mov.w	r2, #4294967295
    ed1e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    ed20:	4a06      	ldr	r2, [pc, #24]	; (ed3c <_ZN9CDC_ClassC1Ev+0x44>)
    ed22:	687b      	ldr	r3, [r7, #4]
    ed24:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	4618      	mov	r0, r3
    ed2a:	3708      	adds	r7, #8
    ed2c:	46bd      	mov	sp, r7
    ed2e:	bd80      	pop	{r7, pc}
    ed30:	0000ebd9 	.word	0x0000ebd9
    ed34:	0000f3e5 	.word	0x0000f3e5
    ed38:	000112cc 	.word	0x000112cc
    ed3c:	2000187c 	.word	0x2000187c

0000ed40 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    ed40:	b580      	push	{r7, lr}
    ed42:	b082      	sub	sp, #8
    ed44:	af00      	add	r7, sp, #0
    ed46:	6078      	str	r0, [r7, #4]
    ed48:	4a06      	ldr	r2, [pc, #24]	; (ed64 <_ZN9CDC_ClassD1Ev+0x24>)
    ed4a:	687b      	ldr	r3, [r7, #4]
    ed4c:	601a      	str	r2, [r3, #0]
    ed4e:	687b      	ldr	r3, [r7, #4]
    ed50:	3310      	adds	r3, #16
    ed52:	4618      	mov	r0, r3
    ed54:	4b04      	ldr	r3, [pc, #16]	; (ed68 <_ZN9CDC_ClassD1Ev+0x28>)
    ed56:	4798      	blx	r3
{
} //~CDC_Class
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	4618      	mov	r0, r3
    ed5c:	3708      	adds	r7, #8
    ed5e:	46bd      	mov	sp, r7
    ed60:	bd80      	pop	{r7, pc}
    ed62:	bf00      	nop
    ed64:	000112cc 	.word	0x000112cc
    ed68:	0000f405 	.word	0x0000f405

0000ed6c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    ed6c:	b580      	push	{r7, lr}
    ed6e:	b082      	sub	sp, #8
    ed70:	af00      	add	r7, sp, #0
    ed72:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ed74:	687b      	ldr	r3, [r7, #4]
    ed76:	3310      	adds	r3, #16
    ed78:	4618      	mov	r0, r3
    ed7a:	4b09      	ldr	r3, [pc, #36]	; (eda0 <_ZN9CDC_Class4InitEv+0x34>)
    ed7c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ed7e:	4909      	ldr	r1, [pc, #36]	; (eda4 <_ZN9CDC_Class4InitEv+0x38>)
    ed80:	2003      	movs	r0, #3
    ed82:	4b09      	ldr	r3, [pc, #36]	; (eda8 <_ZN9CDC_Class4InitEv+0x3c>)
    ed84:	4798      	blx	r3
	delay_ms(100);
    ed86:	2064      	movs	r0, #100	; 0x64
    ed88:	4b08      	ldr	r3, [pc, #32]	; (edac <_ZN9CDC_Class4InitEv+0x40>)
    ed8a:	4798      	blx	r3
		
	if (connected)
    ed8c:	687b      	ldr	r3, [r7, #4]
    ed8e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ed90:	2064      	movs	r0, #100	; 0x64
    ed92:	4b06      	ldr	r3, [pc, #24]	; (edac <_ZN9CDC_Class4InitEv+0x40>)
    ed94:	4798      	blx	r3

	

}
    ed96:	bf00      	nop
    ed98:	3708      	adds	r7, #8
    ed9a:	46bd      	mov	sp, r7
    ed9c:	bd80      	pop	{r7, pc}
    ed9e:	bf00      	nop
    eda0:	0000f419 	.word	0x0000f419
    eda4:	0000eca1 	.word	0x0000eca1
    eda8:	0000ce91 	.word	0x0000ce91
    edac:	00002e6d 	.word	0x00002e6d

0000edb0 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    edb0:	b580      	push	{r7, lr}
    edb2:	b082      	sub	sp, #8
    edb4:	af00      	add	r7, sp, #0
    edb6:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    edb8:	4b03      	ldr	r3, [pc, #12]	; (edc8 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    edba:	4798      	blx	r3
    edbc:	4603      	mov	r3, r0
	
}
    edbe:	4618      	mov	r0, r3
    edc0:	3708      	adds	r7, #8
    edc2:	46bd      	mov	sp, r7
    edc4:	bd80      	pop	{r7, pc}
    edc6:	bf00      	nop
    edc8:	0000cf09 	.word	0x0000cf09

0000edcc <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    edcc:	b580      	push	{r7, lr}
    edce:	b084      	sub	sp, #16
    edd0:	af00      	add	r7, sp, #0
    edd2:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    edd4:	687b      	ldr	r3, [r7, #4]
    edd6:	699b      	ldr	r3, [r3, #24]
    edd8:	f1b3 3fff 	cmp.w	r3, #4294967295
    eddc:	bf14      	ite	ne
    edde:	2301      	movne	r3, #1
    ede0:	2300      	moveq	r3, #0
    ede2:	b2db      	uxtb	r3, r3
    ede4:	2b00      	cmp	r3, #0
    ede6:	d002      	beq.n	edee <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    ede8:	687b      	ldr	r3, [r7, #4]
    edea:	699b      	ldr	r3, [r3, #24]
    edec:	e011      	b.n	ee12 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    edee:	687b      	ldr	r3, [r7, #4]
    edf0:	681b      	ldr	r3, [r3, #0]
    edf2:	331c      	adds	r3, #28
    edf4:	681b      	ldr	r3, [r3, #0]
    edf6:	f107 010f 	add.w	r1, r7, #15
    edfa:	2201      	movs	r2, #1
    edfc:	6878      	ldr	r0, [r7, #4]
    edfe:	4798      	blx	r3
    ee00:	4602      	mov	r2, r0
    ee02:	687b      	ldr	r3, [r7, #4]
    ee04:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    ee06:	7bfb      	ldrb	r3, [r7, #15]
    ee08:	461a      	mov	r2, r3
    ee0a:	687b      	ldr	r3, [r7, #4]
    ee0c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    ee0e:	687b      	ldr	r3, [r7, #4]
    ee10:	699b      	ldr	r3, [r3, #24]
}
    ee12:	4618      	mov	r0, r3
    ee14:	3710      	adds	r7, #16
    ee16:	46bd      	mov	sp, r7
    ee18:	bd80      	pop	{r7, pc}
	...

0000ee1c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	b086      	sub	sp, #24
    ee20:	af00      	add	r7, sp, #0
    ee22:	60f8      	str	r0, [r7, #12]
    ee24:	60b9      	str	r1, [r7, #8]
    ee26:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    ee28:	68fb      	ldr	r3, [r7, #12]
    ee2a:	7c1b      	ldrb	r3, [r3, #16]
    ee2c:	b2db      	uxtb	r3, r3
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d02e      	beq.n	ee90 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ee32:	687a      	ldr	r2, [r7, #4]
    ee34:	4613      	mov	r3, r2
    ee36:	009b      	lsls	r3, r3, #2
    ee38:	4413      	add	r3, r2
    ee3a:	005b      	lsls	r3, r3, #1
    ee3c:	461a      	mov	r2, r3
    ee3e:	4918      	ldr	r1, [pc, #96]	; (eea0 <_ZN9CDC_Class8readDataEPvl+0x84>)
    ee40:	4818      	ldr	r0, [pc, #96]	; (eea4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ee42:	4b19      	ldr	r3, [pc, #100]	; (eea8 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    ee44:	4798      	blx	r3
		rxReady=false;
    ee46:	68fb      	ldr	r3, [r7, #12]
    ee48:	2200      	movs	r2, #0
    ee4a:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    ee4c:	687b      	ldr	r3, [r7, #4]
    ee4e:	4619      	mov	r1, r3
    ee50:	68b8      	ldr	r0, [r7, #8]
    ee52:	4b16      	ldr	r3, [pc, #88]	; (eeac <_ZN9CDC_Class8readDataEPvl+0x90>)
    ee54:	4798      	blx	r3
    ee56:	4603      	mov	r3, r0
    ee58:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    ee5a:	68fb      	ldr	r3, [r7, #12]
    ee5c:	7d5b      	ldrb	r3, [r3, #21]
    ee5e:	b2db      	uxtb	r3, r3
    ee60:	f083 0301 	eor.w	r3, r3, #1
    ee64:	b2db      	uxtb	r3, r3
    ee66:	2b00      	cmp	r3, #0
    ee68:	d006      	beq.n	ee78 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ee6a:	68fb      	ldr	r3, [r7, #12]
    ee6c:	7c1b      	ldrb	r3, [r3, #16]
    ee6e:	b2db      	uxtb	r3, r3
    ee70:	2b00      	cmp	r3, #0
    ee72:	d001      	beq.n	ee78 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ee74:	2301      	movs	r3, #1
    ee76:	e000      	b.n	ee7a <_ZN9CDC_Class8readDataEPvl+0x5e>
    ee78:	2300      	movs	r3, #0
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d000      	beq.n	ee80 <_ZN9CDC_Class8readDataEPvl+0x64>
    ee7e:	e7ec      	b.n	ee5a <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ee80:	4808      	ldr	r0, [pc, #32]	; (eea4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ee82:	4b0b      	ldr	r3, [pc, #44]	; (eeb0 <_ZN9CDC_Class8readDataEPvl+0x94>)
    ee84:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ee86:	4906      	ldr	r1, [pc, #24]	; (eea0 <_ZN9CDC_Class8readDataEPvl+0x84>)
    ee88:	4806      	ldr	r0, [pc, #24]	; (eea4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ee8a:	4b0a      	ldr	r3, [pc, #40]	; (eeb4 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ee8c:	4798      	blx	r3
    ee8e:	e001      	b.n	ee94 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    ee90:	2300      	movs	r3, #0
    ee92:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    ee94:	7dfb      	ldrb	r3, [r7, #23]
}
    ee96:	4618      	mov	r0, r3
    ee98:	3718      	adds	r7, #24
    ee9a:	46bd      	mov	sp, r7
    ee9c:	bd80      	pop	{r7, pc}
    ee9e:	bf00      	nop
    eea0:	0000ec09 	.word	0x0000ec09
    eea4:	2000181c 	.word	0x2000181c
    eea8:	0000e8e1 	.word	0x0000e8e1
    eeac:	0000cde5 	.word	0x0000cde5
    eeb0:	0000e799 	.word	0x0000e799
    eeb4:	0000e889 	.word	0x0000e889

0000eeb8 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    eeb8:	b580      	push	{r7, lr}
    eeba:	b084      	sub	sp, #16
    eebc:	af00      	add	r7, sp, #0
    eebe:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    eec0:	687b      	ldr	r3, [r7, #4]
    eec2:	2200      	movs	r2, #0
    eec4:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    eec6:	f107 030f 	add.w	r3, r7, #15
    eeca:	2101      	movs	r1, #1
    eecc:	4618      	mov	r0, r3
    eece:	4b08      	ldr	r3, [pc, #32]	; (eef0 <_ZN9CDC_Class4readEv+0x38>)
    eed0:	4798      	blx	r3
	while(!rxReady);
    eed2:	687b      	ldr	r3, [r7, #4]
    eed4:	7d5b      	ldrb	r3, [r3, #21]
    eed6:	b2db      	uxtb	r3, r3
    eed8:	f083 0301 	eor.w	r3, r3, #1
    eedc:	b2db      	uxtb	r3, r3
    eede:	2b00      	cmp	r3, #0
    eee0:	d000      	beq.n	eee4 <_ZN9CDC_Class4readEv+0x2c>
    eee2:	e7f6      	b.n	eed2 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    eee4:	7bfb      	ldrb	r3, [r7, #15]
}
    eee6:	4618      	mov	r0, r3
    eee8:	3710      	adds	r7, #16
    eeea:	46bd      	mov	sp, r7
    eeec:	bd80      	pop	{r7, pc}
    eeee:	bf00      	nop
    eef0:	0000cde5 	.word	0x0000cde5

0000eef4 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    eef4:	b580      	push	{r7, lr}
    eef6:	b082      	sub	sp, #8
    eef8:	af00      	add	r7, sp, #0
    eefa:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    eefc:	687b      	ldr	r3, [r7, #4]
    eefe:	331c      	adds	r3, #28
    ef00:	2140      	movs	r1, #64	; 0x40
    ef02:	4618      	mov	r0, r3
    ef04:	4b02      	ldr	r3, [pc, #8]	; (ef10 <_ZN9CDC_Class5flushEv+0x1c>)
    ef06:	4798      	blx	r3
}
    ef08:	bf00      	nop
    ef0a:	3708      	adds	r7, #8
    ef0c:	46bd      	mov	sp, r7
    ef0e:	bd80      	pop	{r7, pc}
    ef10:	0000ce29 	.word	0x0000ce29

0000ef14 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    ef14:	b580      	push	{r7, lr}
    ef16:	b082      	sub	sp, #8
    ef18:	af00      	add	r7, sp, #0
    ef1a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    ef1c:	4b02      	ldr	r3, [pc, #8]	; (ef28 <_ZN9CDC_Class5clearEv+0x14>)
    ef1e:	4798      	blx	r3
}
    ef20:	bf00      	nop
    ef22:	3708      	adds	r7, #8
    ef24:	46bd      	mov	sp, r7
    ef26:	bd80      	pop	{r7, pc}
    ef28:	0000ce6d 	.word	0x0000ce6d

0000ef2c <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    ef2c:	b580      	push	{r7, lr}
    ef2e:	b082      	sub	sp, #8
    ef30:	af00      	add	r7, sp, #0
    ef32:	6078      	str	r0, [r7, #4]
    ef34:	460b      	mov	r3, r1
    ef36:	70fb      	strb	r3, [r7, #3]
	if (connected){
    ef38:	687b      	ldr	r3, [r7, #4]
    ef3a:	7c1b      	ldrb	r3, [r3, #16]
    ef3c:	b2db      	uxtb	r3, r3
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d012      	beq.n	ef68 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    ef42:	687b      	ldr	r3, [r7, #4]
    ef44:	7d1b      	ldrb	r3, [r3, #20]
    ef46:	b2db      	uxtb	r3, r3
    ef48:	f083 0301 	eor.w	r3, r3, #1
    ef4c:	b2db      	uxtb	r3, r3
    ef4e:	2b00      	cmp	r3, #0
    ef50:	d000      	beq.n	ef54 <_ZN9CDC_Class5writeEh+0x28>
    ef52:	e7f6      	b.n	ef42 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    ef54:	687b      	ldr	r3, [r7, #4]
    ef56:	681b      	ldr	r3, [r3, #0]
    ef58:	3324      	adds	r3, #36	; 0x24
    ef5a:	681b      	ldr	r3, [r3, #0]
    ef5c:	1cf9      	adds	r1, r7, #3
    ef5e:	2201      	movs	r2, #1
    ef60:	6878      	ldr	r0, [r7, #4]
    ef62:	4798      	blx	r3
    ef64:	4603      	mov	r3, r0
    ef66:	e000      	b.n	ef6a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    ef68:	2300      	movs	r3, #0
	}
		
}
    ef6a:	4618      	mov	r0, r3
    ef6c:	3708      	adds	r7, #8
    ef6e:	46bd      	mov	sp, r7
    ef70:	bd80      	pop	{r7, pc}
	...

0000ef74 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    ef74:	b580      	push	{r7, lr}
    ef76:	b086      	sub	sp, #24
    ef78:	af00      	add	r7, sp, #0
    ef7a:	60f8      	str	r0, [r7, #12]
    ef7c:	60b9      	str	r1, [r7, #8]
    ef7e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    ef80:	68fb      	ldr	r3, [r7, #12]
    ef82:	7c1b      	ldrb	r3, [r3, #16]
    ef84:	b2db      	uxtb	r3, r3
    ef86:	2b00      	cmp	r3, #0
    ef88:	d02f      	beq.n	efea <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ef8a:	687a      	ldr	r2, [r7, #4]
    ef8c:	4613      	mov	r3, r2
    ef8e:	009b      	lsls	r3, r3, #2
    ef90:	4413      	add	r3, r2
    ef92:	005b      	lsls	r3, r3, #1
    ef94:	461a      	mov	r2, r3
    ef96:	4917      	ldr	r1, [pc, #92]	; (eff4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ef98:	4817      	ldr	r0, [pc, #92]	; (eff8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ef9a:	4b18      	ldr	r3, [pc, #96]	; (effc <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    ef9c:	4798      	blx	r3
		txReady=false;
    ef9e:	68fb      	ldr	r3, [r7, #12]
    efa0:	2200      	movs	r2, #0
    efa2:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    efa4:	687b      	ldr	r3, [r7, #4]
    efa6:	4619      	mov	r1, r3
    efa8:	68b8      	ldr	r0, [r7, #8]
    efaa:	4b15      	ldr	r3, [pc, #84]	; (f000 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    efac:	4798      	blx	r3
    efae:	4603      	mov	r3, r0
    efb0:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    efb2:	68fb      	ldr	r3, [r7, #12]
    efb4:	7d1b      	ldrb	r3, [r3, #20]
    efb6:	b2db      	uxtb	r3, r3
    efb8:	f083 0301 	eor.w	r3, r3, #1
    efbc:	b2db      	uxtb	r3, r3
    efbe:	2b00      	cmp	r3, #0
    efc0:	d006      	beq.n	efd0 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    efc2:	68fb      	ldr	r3, [r7, #12]
    efc4:	7c1b      	ldrb	r3, [r3, #16]
    efc6:	b2db      	uxtb	r3, r3
    efc8:	2b00      	cmp	r3, #0
    efca:	d001      	beq.n	efd0 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    efcc:	2301      	movs	r3, #1
    efce:	e000      	b.n	efd2 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    efd0:	2300      	movs	r3, #0
    efd2:	2b00      	cmp	r3, #0
    efd4:	d000      	beq.n	efd8 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    efd6:	e7ec      	b.n	efb2 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    efd8:	4807      	ldr	r0, [pc, #28]	; (eff8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    efda:	4b0a      	ldr	r3, [pc, #40]	; (f004 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    efdc:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    efde:	4905      	ldr	r1, [pc, #20]	; (eff4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    efe0:	4805      	ldr	r0, [pc, #20]	; (eff8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    efe2:	4b09      	ldr	r3, [pc, #36]	; (f008 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    efe4:	4798      	blx	r3
		return r;
    efe6:	697b      	ldr	r3, [r7, #20]
    efe8:	e000      	b.n	efec <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    efea:	2300      	movs	r3, #0
	}
	

}
    efec:	4618      	mov	r0, r3
    efee:	3718      	adds	r7, #24
    eff0:	46bd      	mov	sp, r7
    eff2:	bd80      	pop	{r7, pc}
    eff4:	0000ec09 	.word	0x0000ec09
    eff8:	2000181c 	.word	0x2000181c
    effc:	0000e8e1 	.word	0x0000e8e1
    f000:	0000ce29 	.word	0x0000ce29
    f004:	0000e799 	.word	0x0000e799
    f008:	0000e889 	.word	0x0000e889

0000f00c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f00c:	b580      	push	{r7, lr}
    f00e:	b086      	sub	sp, #24
    f010:	af00      	add	r7, sp, #0
    f012:	60f8      	str	r0, [r7, #12]
    f014:	60b9      	str	r1, [r7, #8]
    f016:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f018:	68fb      	ldr	r3, [r7, #12]
    f01a:	2200      	movs	r2, #0
    f01c:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f01e:	68fb      	ldr	r3, [r7, #12]
    f020:	7c1b      	ldrb	r3, [r3, #16]
    f022:	b2db      	uxtb	r3, r3
    f024:	2b00      	cmp	r3, #0
    f026:	d02a      	beq.n	f07e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f028:	687a      	ldr	r2, [r7, #4]
    f02a:	4613      	mov	r3, r2
    f02c:	009b      	lsls	r3, r3, #2
    f02e:	4413      	add	r3, r2
    f030:	005b      	lsls	r3, r3, #1
    f032:	461a      	mov	r2, r3
    f034:	4915      	ldr	r1, [pc, #84]	; (f08c <_ZN9CDC_Class5writeEPKhj+0x80>)
    f036:	4816      	ldr	r0, [pc, #88]	; (f090 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f038:	4b16      	ldr	r3, [pc, #88]	; (f094 <_ZN9CDC_Class5writeEPKhj+0x88>)
    f03a:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f03c:	6879      	ldr	r1, [r7, #4]
    f03e:	68b8      	ldr	r0, [r7, #8]
    f040:	4b15      	ldr	r3, [pc, #84]	; (f098 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f042:	4798      	blx	r3
    f044:	4603      	mov	r3, r0
    f046:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f048:	68fb      	ldr	r3, [r7, #12]
    f04a:	7d1b      	ldrb	r3, [r3, #20]
    f04c:	b2db      	uxtb	r3, r3
    f04e:	f083 0301 	eor.w	r3, r3, #1
    f052:	b2db      	uxtb	r3, r3
    f054:	2b00      	cmp	r3, #0
    f056:	d006      	beq.n	f066 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f058:	68fb      	ldr	r3, [r7, #12]
    f05a:	7c1b      	ldrb	r3, [r3, #16]
    f05c:	b2db      	uxtb	r3, r3
    f05e:	2b00      	cmp	r3, #0
    f060:	d001      	beq.n	f066 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f062:	2301      	movs	r3, #1
    f064:	e000      	b.n	f068 <_ZN9CDC_Class5writeEPKhj+0x5c>
    f066:	2300      	movs	r3, #0
    f068:	2b00      	cmp	r3, #0
    f06a:	d000      	beq.n	f06e <_ZN9CDC_Class5writeEPKhj+0x62>
    f06c:	e7ec      	b.n	f048 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f06e:	4808      	ldr	r0, [pc, #32]	; (f090 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f070:	4b0a      	ldr	r3, [pc, #40]	; (f09c <_ZN9CDC_Class5writeEPKhj+0x90>)
    f072:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f074:	4905      	ldr	r1, [pc, #20]	; (f08c <_ZN9CDC_Class5writeEPKhj+0x80>)
    f076:	4806      	ldr	r0, [pc, #24]	; (f090 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f078:	4b09      	ldr	r3, [pc, #36]	; (f0a0 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f07a:	4798      	blx	r3
    f07c:	e001      	b.n	f082 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f07e:	2300      	movs	r3, #0
    f080:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f082:	697b      	ldr	r3, [r7, #20]
}
    f084:	4618      	mov	r0, r3
    f086:	3718      	adds	r7, #24
    f088:	46bd      	mov	sp, r7
    f08a:	bd80      	pop	{r7, pc}
    f08c:	0000ec09 	.word	0x0000ec09
    f090:	2000181c 	.word	0x2000181c
    f094:	0000e8e1 	.word	0x0000e8e1
    f098:	0000ce29 	.word	0x0000ce29
    f09c:	0000e799 	.word	0x0000e799
    f0a0:	0000e889 	.word	0x0000e889

0000f0a4 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f0a4:	b480      	push	{r7}
    f0a6:	b083      	sub	sp, #12
    f0a8:	af00      	add	r7, sp, #0
    f0aa:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f0ac:	687b      	ldr	r3, [r7, #4]
    f0ae:	7d5b      	ldrb	r3, [r3, #21]
    f0b0:	b2db      	uxtb	r3, r3
    f0b2:	2b00      	cmp	r3, #0
    f0b4:	d006      	beq.n	f0c4 <_ZN9CDC_Class9availableEv+0x20>
    f0b6:	687b      	ldr	r3, [r7, #4]
    f0b8:	7d1b      	ldrb	r3, [r3, #20]
    f0ba:	b2db      	uxtb	r3, r3
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d001      	beq.n	f0c4 <_ZN9CDC_Class9availableEv+0x20>
    f0c0:	2301      	movs	r3, #1
    f0c2:	e000      	b.n	f0c6 <_ZN9CDC_Class9availableEv+0x22>
    f0c4:	2300      	movs	r3, #0
    f0c6:	2b00      	cmp	r3, #0
    f0c8:	d001      	beq.n	f0ce <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f0ca:	2301      	movs	r3, #1
    f0cc:	e000      	b.n	f0d0 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f0ce:	2300      	movs	r3, #0
	}
	
}
    f0d0:	4618      	mov	r0, r3
    f0d2:	370c      	adds	r7, #12
    f0d4:	46bd      	mov	sp, r7
    f0d6:	bc80      	pop	{r7}
    f0d8:	4770      	bx	lr
	...

0000f0dc <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f0dc:	b580      	push	{r7, lr}
    f0de:	b082      	sub	sp, #8
    f0e0:	af00      	add	r7, sp, #0
    f0e2:	6078      	str	r0, [r7, #4]
    f0e4:	6039      	str	r1, [r7, #0]
    f0e6:	687b      	ldr	r3, [r7, #4]
    f0e8:	2b01      	cmp	r3, #1
    f0ea:	d154      	bne.n	f196 <_Z41__static_initialization_and_destruction_0ii+0xba>
    f0ec:	683b      	ldr	r3, [r7, #0]
    f0ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f0f2:	4293      	cmp	r3, r2
    f0f4:	d14f      	bne.n	f196 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f0f6:	492a      	ldr	r1, [pc, #168]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f0f8:	482a      	ldr	r0, [pc, #168]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f0fa:	4b2b      	ldr	r3, [pc, #172]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f0fc:	4798      	blx	r3
    f0fe:	4a2b      	ldr	r2, [pc, #172]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f100:	492b      	ldr	r1, [pc, #172]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f102:	4828      	ldr	r0, [pc, #160]	; (f1a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f104:	4b2b      	ldr	r3, [pc, #172]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f106:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f108:	492b      	ldr	r1, [pc, #172]	; (f1b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f10a:	482c      	ldr	r0, [pc, #176]	; (f1bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f10c:	4b26      	ldr	r3, [pc, #152]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f10e:	4798      	blx	r3
    f110:	4a26      	ldr	r2, [pc, #152]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f112:	4927      	ldr	r1, [pc, #156]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f114:	4829      	ldr	r0, [pc, #164]	; (f1bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f116:	4b27      	ldr	r3, [pc, #156]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f118:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f11a:	4929      	ldr	r1, [pc, #164]	; (f1c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f11c:	4829      	ldr	r0, [pc, #164]	; (f1c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f11e:	4b22      	ldr	r3, [pc, #136]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f120:	4798      	blx	r3
    f122:	4a22      	ldr	r2, [pc, #136]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f124:	4922      	ldr	r1, [pc, #136]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f126:	4827      	ldr	r0, [pc, #156]	; (f1c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f128:	4b22      	ldr	r3, [pc, #136]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f12a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f12c:	4926      	ldr	r1, [pc, #152]	; (f1c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f12e:	4827      	ldr	r0, [pc, #156]	; (f1cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f130:	4b1d      	ldr	r3, [pc, #116]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f132:	4798      	blx	r3
    f134:	4a1d      	ldr	r2, [pc, #116]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f136:	491e      	ldr	r1, [pc, #120]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f138:	4824      	ldr	r0, [pc, #144]	; (f1cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f13a:	4b1e      	ldr	r3, [pc, #120]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f13c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f13e:	4924      	ldr	r1, [pc, #144]	; (f1d0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f140:	4824      	ldr	r0, [pc, #144]	; (f1d4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f142:	4b19      	ldr	r3, [pc, #100]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f144:	4798      	blx	r3
    f146:	4a19      	ldr	r2, [pc, #100]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f148:	4919      	ldr	r1, [pc, #100]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f14a:	4822      	ldr	r0, [pc, #136]	; (f1d4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f14c:	4b19      	ldr	r3, [pc, #100]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f14e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f150:	4921      	ldr	r1, [pc, #132]	; (f1d8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f152:	4822      	ldr	r0, [pc, #136]	; (f1dc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f154:	4b14      	ldr	r3, [pc, #80]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f156:	4798      	blx	r3
    f158:	4a14      	ldr	r2, [pc, #80]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f15a:	4915      	ldr	r1, [pc, #84]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f15c:	481f      	ldr	r0, [pc, #124]	; (f1dc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f15e:	4b15      	ldr	r3, [pc, #84]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f160:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f162:	491f      	ldr	r1, [pc, #124]	; (f1e0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f164:	481f      	ldr	r0, [pc, #124]	; (f1e4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f166:	4b10      	ldr	r3, [pc, #64]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f168:	4798      	blx	r3
    f16a:	4a10      	ldr	r2, [pc, #64]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f16c:	4910      	ldr	r1, [pc, #64]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f16e:	481d      	ldr	r0, [pc, #116]	; (f1e4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f170:	4b10      	ldr	r3, [pc, #64]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f172:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f174:	491c      	ldr	r1, [pc, #112]	; (f1e8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f176:	481d      	ldr	r0, [pc, #116]	; (f1ec <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f178:	4b0b      	ldr	r3, [pc, #44]	; (f1a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f17a:	4798      	blx	r3
    f17c:	4a0b      	ldr	r2, [pc, #44]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f17e:	490c      	ldr	r1, [pc, #48]	; (f1b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f180:	481a      	ldr	r0, [pc, #104]	; (f1ec <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f182:	4b0c      	ldr	r3, [pc, #48]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f184:	4798      	blx	r3
    f186:	481a      	ldr	r0, [pc, #104]	; (f1f0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f188:	4b1a      	ldr	r3, [pc, #104]	; (f1f4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f18a:	4798      	blx	r3
    f18c:	4a07      	ldr	r2, [pc, #28]	; (f1ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f18e:	491a      	ldr	r1, [pc, #104]	; (f1f8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f190:	4817      	ldr	r0, [pc, #92]	; (f1f0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f192:	4b08      	ldr	r3, [pc, #32]	; (f1b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f194:	4798      	blx	r3
    f196:	bf00      	nop
    f198:	3708      	adds	r7, #8
    f19a:	46bd      	mov	sp, r7
    f19c:	bd80      	pop	{r7, pc}
    f19e:	bf00      	nop
    f1a0:	2000aa40 	.word	0x2000aa40
    f1a4:	2000177c 	.word	0x2000177c
    f1a8:	0000e639 	.word	0x0000e639
    f1ac:	20000000 	.word	0x20000000
    f1b0:	0000e671 	.word	0x0000e671
    f1b4:	00010a0d 	.word	0x00010a0d
    f1b8:	2000aad4 	.word	0x2000aad4
    f1bc:	2000179c 	.word	0x2000179c
    f1c0:	2000abf8 	.word	0x2000abf8
    f1c4:	200017bc 	.word	0x200017bc
    f1c8:	2000aaf4 	.word	0x2000aaf4
    f1cc:	200017dc 	.word	0x200017dc
    f1d0:	2000abb8 	.word	0x2000abb8
    f1d4:	200017fc 	.word	0x200017fc
    f1d8:	2000abd8 	.word	0x2000abd8
    f1dc:	2000181c 	.word	0x2000181c
    f1e0:	2000aab0 	.word	0x2000aab0
    f1e4:	2000183c 	.word	0x2000183c
    f1e8:	2000ab50 	.word	0x2000ab50
    f1ec:	2000185c 	.word	0x2000185c
    f1f0:	20001880 	.word	0x20001880
    f1f4:	0000ecf9 	.word	0x0000ecf9
    f1f8:	0000ed41 	.word	0x0000ed41

0000f1fc <_GLOBAL__sub_I_ptrCDCClass>:
    f1fc:	b580      	push	{r7, lr}
    f1fe:	af00      	add	r7, sp, #0
    f200:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f204:	2001      	movs	r0, #1
    f206:	4b01      	ldr	r3, [pc, #4]	; (f20c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f208:	4798      	blx	r3
    f20a:	bd80      	pop	{r7, pc}
    f20c:	0000f0dd 	.word	0x0000f0dd

0000f210 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f210:	b580      	push	{r7, lr}
    f212:	b086      	sub	sp, #24
    f214:	af00      	add	r7, sp, #0
    f216:	60f8      	str	r0, [r7, #12]
    f218:	60b9      	str	r1, [r7, #8]
    f21a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f21c:	2300      	movs	r3, #0
    f21e:	617b      	str	r3, [r7, #20]
  while (size--) {
    f220:	687b      	ldr	r3, [r7, #4]
    f222:	1e5a      	subs	r2, r3, #1
    f224:	607a      	str	r2, [r7, #4]
    f226:	2b00      	cmp	r3, #0
    f228:	bf14      	ite	ne
    f22a:	2301      	movne	r3, #1
    f22c:	2300      	moveq	r3, #0
    f22e:	b2db      	uxtb	r3, r3
    f230:	2b00      	cmp	r3, #0
    f232:	d016      	beq.n	f262 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f234:	68fb      	ldr	r3, [r7, #12]
    f236:	681b      	ldr	r3, [r3, #0]
    f238:	681a      	ldr	r2, [r3, #0]
    f23a:	68bb      	ldr	r3, [r7, #8]
    f23c:	1c59      	adds	r1, r3, #1
    f23e:	60b9      	str	r1, [r7, #8]
    f240:	781b      	ldrb	r3, [r3, #0]
    f242:	4619      	mov	r1, r3
    f244:	68f8      	ldr	r0, [r7, #12]
    f246:	4790      	blx	r2
    f248:	4603      	mov	r3, r0
    f24a:	2b00      	cmp	r3, #0
    f24c:	bf14      	ite	ne
    f24e:	2301      	movne	r3, #1
    f250:	2300      	moveq	r3, #0
    f252:	b2db      	uxtb	r3, r3
    f254:	2b00      	cmp	r3, #0
    f256:	d003      	beq.n	f260 <_ZN5Print5writeEPKhj+0x50>
    f258:	697b      	ldr	r3, [r7, #20]
    f25a:	3301      	adds	r3, #1
    f25c:	617b      	str	r3, [r7, #20]
  while (size--) {
    f25e:	e7df      	b.n	f220 <_ZN5Print5writeEPKhj+0x10>
    else break;
    f260:	bf00      	nop
  }
  return n;
    f262:	697b      	ldr	r3, [r7, #20]
}
    f264:	4618      	mov	r0, r3
    f266:	3718      	adds	r7, #24
    f268:	46bd      	mov	sp, r7
    f26a:	bd80      	pop	{r7, pc}

0000f26c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    f26c:	b480      	push	{r7}
    f26e:	b083      	sub	sp, #12
    f270:	af00      	add	r7, sp, #0
    f272:	6078      	str	r0, [r7, #4]
    f274:	460b      	mov	r3, r1
    f276:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f278:	78fb      	ldrb	r3, [r7, #3]
    f27a:	687a      	ldr	r2, [r7, #4]
    f27c:	01db      	lsls	r3, r3, #7
    f27e:	4413      	add	r3, r2
    f280:	681b      	ldr	r3, [r3, #0]
}
    f282:	4618      	mov	r0, r3
    f284:	370c      	adds	r7, #12
    f286:	46bd      	mov	sp, r7
    f288:	bc80      	pop	{r7}
    f28a:	4770      	bx	lr

0000f28c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    f28c:	b480      	push	{r7}
    f28e:	b083      	sub	sp, #12
    f290:	af00      	add	r7, sp, #0
    f292:	6078      	str	r0, [r7, #4]
    f294:	460b      	mov	r3, r1
    f296:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f298:	78fb      	ldrb	r3, [r7, #3]
    f29a:	687a      	ldr	r2, [r7, #4]
    f29c:	01db      	lsls	r3, r3, #7
    f29e:	4413      	add	r3, r2
    f2a0:	3310      	adds	r3, #16
    f2a2:	681b      	ldr	r3, [r3, #0]
}
    f2a4:	4618      	mov	r0, r3
    f2a6:	370c      	adds	r7, #12
    f2a8:	46bd      	mov	sp, r7
    f2aa:	bc80      	pop	{r7}
    f2ac:	4770      	bx	lr

0000f2ae <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f2ae:	b480      	push	{r7}
    f2b0:	b083      	sub	sp, #12
    f2b2:	af00      	add	r7, sp, #0
    f2b4:	6078      	str	r0, [r7, #4]
    f2b6:	460b      	mov	r3, r1
    f2b8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f2ba:	78fb      	ldrb	r3, [r7, #3]
    f2bc:	687a      	ldr	r2, [r7, #4]
    f2be:	01db      	lsls	r3, r3, #7
    f2c0:	4413      	add	r3, r2
    f2c2:	3320      	adds	r3, #32
    f2c4:	681b      	ldr	r3, [r3, #0]
}
    f2c6:	4618      	mov	r0, r3
    f2c8:	370c      	adds	r7, #12
    f2ca:	46bd      	mov	sp, r7
    f2cc:	bc80      	pop	{r7}
    f2ce:	4770      	bx	lr

0000f2d0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f2d0:	b580      	push	{r7, lr}
    f2d2:	b086      	sub	sp, #24
    f2d4:	af00      	add	r7, sp, #0
    f2d6:	4603      	mov	r3, r0
    f2d8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f2da:	f107 030c 	add.w	r3, r7, #12
    f2de:	4618      	mov	r0, r3
    f2e0:	4b13      	ldr	r3, [pc, #76]	; (f330 <_gpio_get_level+0x60>)
    f2e2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f2e4:	79fb      	ldrb	r3, [r7, #7]
    f2e6:	4619      	mov	r1, r3
    f2e8:	4812      	ldr	r0, [pc, #72]	; (f334 <_gpio_get_level+0x64>)
    f2ea:	4b13      	ldr	r3, [pc, #76]	; (f338 <_gpio_get_level+0x68>)
    f2ec:	4798      	blx	r3
    f2ee:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f2f0:	79fb      	ldrb	r3, [r7, #7]
    f2f2:	4619      	mov	r1, r3
    f2f4:	480f      	ldr	r0, [pc, #60]	; (f334 <_gpio_get_level+0x64>)
    f2f6:	4b11      	ldr	r3, [pc, #68]	; (f33c <_gpio_get_level+0x6c>)
    f2f8:	4798      	blx	r3
    f2fa:	4602      	mov	r2, r0
    f2fc:	697b      	ldr	r3, [r7, #20]
    f2fe:	43db      	mvns	r3, r3
    f300:	4013      	ands	r3, r2
    f302:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f304:	79fb      	ldrb	r3, [r7, #7]
    f306:	4619      	mov	r1, r3
    f308:	480a      	ldr	r0, [pc, #40]	; (f334 <_gpio_get_level+0x64>)
    f30a:	4b0d      	ldr	r3, [pc, #52]	; (f340 <_gpio_get_level+0x70>)
    f30c:	4798      	blx	r3
    f30e:	4602      	mov	r2, r0
    f310:	697b      	ldr	r3, [r7, #20]
    f312:	4013      	ands	r3, r2
    f314:	693a      	ldr	r2, [r7, #16]
    f316:	4313      	orrs	r3, r2
    f318:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f31a:	f107 030c 	add.w	r3, r7, #12
    f31e:	4618      	mov	r0, r3
    f320:	4b08      	ldr	r3, [pc, #32]	; (f344 <_gpio_get_level+0x74>)
    f322:	4798      	blx	r3

	return tmp;
    f324:	693b      	ldr	r3, [r7, #16]
}
    f326:	4618      	mov	r0, r3
    f328:	3718      	adds	r7, #24
    f32a:	46bd      	mov	sp, r7
    f32c:	bd80      	pop	{r7, pc}
    f32e:	bf00      	nop
    f330:	000029dd 	.word	0x000029dd
    f334:	41008000 	.word	0x41008000
    f338:	0000f26d 	.word	0x0000f26d
    f33c:	0000f2af 	.word	0x0000f2af
    f340:	0000f28d 	.word	0x0000f28d
    f344:	00002a03 	.word	0x00002a03

0000f348 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f348:	b580      	push	{r7, lr}
    f34a:	b082      	sub	sp, #8
    f34c:	af00      	add	r7, sp, #0
    f34e:	4603      	mov	r3, r0
    f350:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f352:	79fb      	ldrb	r3, [r7, #7]
    f354:	115b      	asrs	r3, r3, #5
    f356:	b2db      	uxtb	r3, r3
    f358:	4618      	mov	r0, r3
    f35a:	4b09      	ldr	r3, [pc, #36]	; (f380 <gpio_get_pin_level+0x38>)
    f35c:	4798      	blx	r3
    f35e:	4601      	mov	r1, r0
    f360:	79fb      	ldrb	r3, [r7, #7]
    f362:	f003 031f 	and.w	r3, r3, #31
    f366:	2201      	movs	r2, #1
    f368:	fa02 f303 	lsl.w	r3, r2, r3
    f36c:	400b      	ands	r3, r1
    f36e:	2b00      	cmp	r3, #0
    f370:	bf14      	ite	ne
    f372:	2301      	movne	r3, #1
    f374:	2300      	moveq	r3, #0
    f376:	b2db      	uxtb	r3, r3
}
    f378:	4618      	mov	r0, r3
    f37a:	3708      	adds	r7, #8
    f37c:	46bd      	mov	sp, r7
    f37e:	bd80      	pop	{r7, pc}
    f380:	0000f2d1 	.word	0x0000f2d1

0000f384 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f384:	b480      	push	{r7}
    f386:	b083      	sub	sp, #12
    f388:	af00      	add	r7, sp, #0
    f38a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f38c:	4b06      	ldr	r3, [pc, #24]	; (f3a8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f38e:	681b      	ldr	r3, [r3, #0]
    f390:	2201      	movs	r2, #1
    f392:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f394:	4b04      	ldr	r3, [pc, #16]	; (f3a8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f396:	681b      	ldr	r3, [r3, #0]
    f398:	2200      	movs	r2, #0
    f39a:	705a      	strb	r2, [r3, #1]
}
    f39c:	bf00      	nop
    f39e:	370c      	adds	r7, #12
    f3a0:	46bd      	mov	sp, r7
    f3a2:	bc80      	pop	{r7}
    f3a4:	4770      	bx	lr
    f3a6:	bf00      	nop
    f3a8:	200019e0 	.word	0x200019e0

0000f3ac <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f3ac:	b580      	push	{r7, lr}
    f3ae:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f3b0:	2040      	movs	r0, #64	; 0x40
    f3b2:	4b0a      	ldr	r3, [pc, #40]	; (f3dc <_ZL10USBPluggedv+0x30>)
    f3b4:	4798      	blx	r3
    f3b6:	4603      	mov	r3, r0
    f3b8:	2b00      	cmp	r3, #0
    f3ba:	d004      	beq.n	f3c6 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f3bc:	4b08      	ldr	r3, [pc, #32]	; (f3e0 <_ZL10USBPluggedv+0x34>)
    f3be:	681b      	ldr	r3, [r3, #0]
    f3c0:	2201      	movs	r2, #1
    f3c2:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f3c4:	e007      	b.n	f3d6 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f3c6:	4b06      	ldr	r3, [pc, #24]	; (f3e0 <_ZL10USBPluggedv+0x34>)
    f3c8:	681b      	ldr	r3, [r3, #0]
    f3ca:	2200      	movs	r2, #0
    f3cc:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f3ce:	4b04      	ldr	r3, [pc, #16]	; (f3e0 <_ZL10USBPluggedv+0x34>)
    f3d0:	681b      	ldr	r3, [r3, #0]
    f3d2:	2200      	movs	r2, #0
    f3d4:	701a      	strb	r2, [r3, #0]
}
    f3d6:	bf00      	nop
    f3d8:	bd80      	pop	{r7, pc}
    f3da:	bf00      	nop
    f3dc:	0000f349 	.word	0x0000f349
    f3e0:	200019e0 	.word	0x200019e0

0000f3e4 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f3e4:	b480      	push	{r7}
    f3e6:	b083      	sub	sp, #12
    f3e8:	af00      	add	r7, sp, #0
    f3ea:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f3ec:	4a04      	ldr	r2, [pc, #16]	; (f400 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f3ee:	687b      	ldr	r3, [r7, #4]
    f3f0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f3f2:	687b      	ldr	r3, [r7, #4]
    f3f4:	4618      	mov	r0, r3
    f3f6:	370c      	adds	r7, #12
    f3f8:	46bd      	mov	sp, r7
    f3fa:	bc80      	pop	{r7}
    f3fc:	4770      	bx	lr
    f3fe:	bf00      	nop
    f400:	200019e0 	.word	0x200019e0

0000f404 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f404:	b480      	push	{r7}
    f406:	b083      	sub	sp, #12
    f408:	af00      	add	r7, sp, #0
    f40a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f40c:	687b      	ldr	r3, [r7, #4]
    f40e:	4618      	mov	r0, r3
    f410:	370c      	adds	r7, #12
    f412:	46bd      	mov	sp, r7
    f414:	bc80      	pop	{r7}
    f416:	4770      	bx	lr

0000f418 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f418:	b580      	push	{r7, lr}
    f41a:	b082      	sub	sp, #8
    f41c:	af00      	add	r7, sp, #0
    f41e:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f420:	491e      	ldr	r1, [pc, #120]	; (f49c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    f422:	2040      	movs	r0, #64	; 0x40
    f424:	4b1e      	ldr	r3, [pc, #120]	; (f4a0 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f426:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f428:	481e      	ldr	r0, [pc, #120]	; (f4a4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f42a:	4b1f      	ldr	r3, [pc, #124]	; (f4a8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f42c:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f42e:	2040      	movs	r0, #64	; 0x40
    f430:	4b1e      	ldr	r3, [pc, #120]	; (f4ac <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f432:	4798      	blx	r3
    f434:	4603      	mov	r3, r0
    f436:	461a      	mov	r2, r3
    f438:	687b      	ldr	r3, [r7, #4]
    f43a:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f43c:	687b      	ldr	r3, [r7, #4]
    f43e:	78db      	ldrb	r3, [r3, #3]
    f440:	2b00      	cmp	r3, #0
    f442:	d021      	beq.n	f488 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    f444:	687b      	ldr	r3, [r7, #4]
    f446:	2200      	movs	r2, #0
    f448:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f44a:	687b      	ldr	r3, [r7, #4]
    f44c:	2201      	movs	r2, #1
    f44e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f450:	f44f 7216 	mov.w	r2, #600	; 0x258
    f454:	4916      	ldr	r1, [pc, #88]	; (f4b0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f456:	4813      	ldr	r0, [pc, #76]	; (f4a4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f458:	4b16      	ldr	r3, [pc, #88]	; (f4b4 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f45a:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f45c:	4816      	ldr	r0, [pc, #88]	; (f4b8 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f45e:	4b17      	ldr	r3, [pc, #92]	; (f4bc <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f460:	4798      	blx	r3
    f462:	4603      	mov	r3, r0
    f464:	f083 0301 	eor.w	r3, r3, #1
    f468:	b2db      	uxtb	r3, r3
    f46a:	2b00      	cmp	r3, #0
    f46c:	d008      	beq.n	f480 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    f46e:	687b      	ldr	r3, [r7, #4]
    f470:	789b      	ldrb	r3, [r3, #2]
    f472:	b2db      	uxtb	r3, r3
    f474:	2b00      	cmp	r3, #0
    f476:	d0f1      	beq.n	f45c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    f478:	687b      	ldr	r3, [r7, #4]
    f47a:	2200      	movs	r2, #0
    f47c:	701a      	strb	r2, [r3, #0]
					return;
    f47e:	e009      	b.n	f494 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f480:	4808      	ldr	r0, [pc, #32]	; (f4a4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f482:	4b0f      	ldr	r3, [pc, #60]	; (f4c0 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f484:	4798      	blx	r3
    f486:	e005      	b.n	f494 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    f488:	687b      	ldr	r3, [r7, #4]
    f48a:	2200      	movs	r2, #0
    f48c:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f48e:	687b      	ldr	r3, [r7, #4]
    f490:	2200      	movs	r2, #0
    f492:	705a      	strb	r2, [r3, #1]
		}
		
}
    f494:	3708      	adds	r7, #8
    f496:	46bd      	mov	sp, r7
    f498:	bd80      	pop	{r7, pc}
    f49a:	bf00      	nop
    f49c:	0000f3ad 	.word	0x0000f3ad
    f4a0:	00002f01 	.word	0x00002f01
    f4a4:	20001980 	.word	0x20001980
    f4a8:	0000e725 	.word	0x0000e725
    f4ac:	0000f349 	.word	0x0000f349
    f4b0:	0000f385 	.word	0x0000f385
    f4b4:	0000e8e1 	.word	0x0000e8e1
    f4b8:	20001880 	.word	0x20001880
    f4bc:	0000edb1 	.word	0x0000edb1
    f4c0:	0000e799 	.word	0x0000e799

0000f4c4 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    f4c4:	b580      	push	{r7, lr}
    f4c6:	b082      	sub	sp, #8
    f4c8:	af00      	add	r7, sp, #0
    f4ca:	6078      	str	r0, [r7, #4]
    f4cc:	6039      	str	r1, [r7, #0]
    f4ce:	687b      	ldr	r3, [r7, #4]
    f4d0:	2b01      	cmp	r3, #1
    f4d2:	d14c      	bne.n	f56e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    f4d4:	683b      	ldr	r3, [r7, #0]
    f4d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f4da:	4293      	cmp	r3, r2
    f4dc:	d147      	bne.n	f56e <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f4de:	4926      	ldr	r1, [pc, #152]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    f4e0:	4826      	ldr	r0, [pc, #152]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f4e2:	4b27      	ldr	r3, [pc, #156]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4e4:	4798      	blx	r3
    f4e6:	4a27      	ldr	r2, [pc, #156]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4e8:	4927      	ldr	r1, [pc, #156]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4ea:	4824      	ldr	r0, [pc, #144]	; (f57c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f4ec:	4b27      	ldr	r3, [pc, #156]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4ee:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f4f0:	4927      	ldr	r1, [pc, #156]	; (f590 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f4f2:	4828      	ldr	r0, [pc, #160]	; (f594 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4f4:	4b22      	ldr	r3, [pc, #136]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4f6:	4798      	blx	r3
    f4f8:	4a22      	ldr	r2, [pc, #136]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4fa:	4923      	ldr	r1, [pc, #140]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4fc:	4825      	ldr	r0, [pc, #148]	; (f594 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4fe:	4b23      	ldr	r3, [pc, #140]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f500:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f502:	4925      	ldr	r1, [pc, #148]	; (f598 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f504:	4825      	ldr	r0, [pc, #148]	; (f59c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f506:	4b1e      	ldr	r3, [pc, #120]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f508:	4798      	blx	r3
    f50a:	4a1e      	ldr	r2, [pc, #120]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f50c:	491e      	ldr	r1, [pc, #120]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f50e:	4823      	ldr	r0, [pc, #140]	; (f59c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f510:	4b1e      	ldr	r3, [pc, #120]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f512:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f514:	4922      	ldr	r1, [pc, #136]	; (f5a0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f516:	4823      	ldr	r0, [pc, #140]	; (f5a4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f518:	4b19      	ldr	r3, [pc, #100]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f51a:	4798      	blx	r3
    f51c:	4a19      	ldr	r2, [pc, #100]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f51e:	491a      	ldr	r1, [pc, #104]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f520:	4820      	ldr	r0, [pc, #128]	; (f5a4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f522:	4b1a      	ldr	r3, [pc, #104]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f524:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f526:	4920      	ldr	r1, [pc, #128]	; (f5a8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f528:	4820      	ldr	r0, [pc, #128]	; (f5ac <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f52a:	4b15      	ldr	r3, [pc, #84]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f52c:	4798      	blx	r3
    f52e:	4a15      	ldr	r2, [pc, #84]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f530:	4915      	ldr	r1, [pc, #84]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f532:	481e      	ldr	r0, [pc, #120]	; (f5ac <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f534:	4b15      	ldr	r3, [pc, #84]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f536:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f538:	491d      	ldr	r1, [pc, #116]	; (f5b0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f53a:	481e      	ldr	r0, [pc, #120]	; (f5b4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f53c:	4b10      	ldr	r3, [pc, #64]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f53e:	4798      	blx	r3
    f540:	4a10      	ldr	r2, [pc, #64]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f542:	4911      	ldr	r1, [pc, #68]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f544:	481b      	ldr	r0, [pc, #108]	; (f5b4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f546:	4b11      	ldr	r3, [pc, #68]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f548:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f54a:	491b      	ldr	r1, [pc, #108]	; (f5b8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f54c:	481b      	ldr	r0, [pc, #108]	; (f5bc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f54e:	4b0c      	ldr	r3, [pc, #48]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f550:	4798      	blx	r3
    f552:	4a0c      	ldr	r2, [pc, #48]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f554:	490c      	ldr	r1, [pc, #48]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f556:	4819      	ldr	r0, [pc, #100]	; (f5bc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f558:	4b0c      	ldr	r3, [pc, #48]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f55a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f55c:	4918      	ldr	r1, [pc, #96]	; (f5c0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f55e:	4819      	ldr	r0, [pc, #100]	; (f5c4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f560:	4b07      	ldr	r3, [pc, #28]	; (f580 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f562:	4798      	blx	r3
    f564:	4a07      	ldr	r2, [pc, #28]	; (f584 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f566:	4908      	ldr	r1, [pc, #32]	; (f588 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f568:	4816      	ldr	r0, [pc, #88]	; (f5c4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f56a:	4b08      	ldr	r3, [pc, #32]	; (f58c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f56c:	4798      	blx	r3
    f56e:	bf00      	nop
    f570:	3708      	adds	r7, #8
    f572:	46bd      	mov	sp, r7
    f574:	bd80      	pop	{r7, pc}
    f576:	bf00      	nop
    f578:	2000aa40 	.word	0x2000aa40
    f57c:	200018e0 	.word	0x200018e0
    f580:	0000e639 	.word	0x0000e639
    f584:	20000000 	.word	0x20000000
    f588:	0000e671 	.word	0x0000e671
    f58c:	00010a0d 	.word	0x00010a0d
    f590:	2000aad4 	.word	0x2000aad4
    f594:	20001900 	.word	0x20001900
    f598:	2000abf8 	.word	0x2000abf8
    f59c:	20001920 	.word	0x20001920
    f5a0:	2000aaf4 	.word	0x2000aaf4
    f5a4:	20001940 	.word	0x20001940
    f5a8:	2000abb8 	.word	0x2000abb8
    f5ac:	20001960 	.word	0x20001960
    f5b0:	2000abd8 	.word	0x2000abd8
    f5b4:	20001980 	.word	0x20001980
    f5b8:	2000aab0 	.word	0x2000aab0
    f5bc:	200019a0 	.word	0x200019a0
    f5c0:	2000ab50 	.word	0x2000ab50
    f5c4:	200019c0 	.word	0x200019c0

0000f5c8 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    f5c8:	b580      	push	{r7, lr}
    f5ca:	af00      	add	r7, sp, #0
    f5cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f5d0:	2001      	movs	r0, #1
    f5d2:	4b01      	ldr	r3, [pc, #4]	; (f5d8 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    f5d4:	4798      	blx	r3
    f5d6:	bd80      	pop	{r7, pc}
    f5d8:	0000f4c5 	.word	0x0000f4c5

0000f5dc <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f5dc:	b480      	push	{r7}
    f5de:	b083      	sub	sp, #12
    f5e0:	af00      	add	r7, sp, #0
    f5e2:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f5e4:	2300      	movs	r3, #0
	}
    f5e6:	4618      	mov	r0, r3
    f5e8:	370c      	adds	r7, #12
    f5ea:	46bd      	mov	sp, r7
    f5ec:	bc80      	pop	{r7}
    f5ee:	4770      	bx	lr

0000f5f0 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f5f0:	b480      	push	{r7}
    f5f2:	af00      	add	r7, sp, #0
		}
    f5f4:	bf00      	nop
    f5f6:	46bd      	mov	sp, r7
    f5f8:	bc80      	pop	{r7}
    f5fa:	4770      	bx	lr

0000f5fc <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    f5fc:	4770      	bx	lr

0000f5fe <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    f5fe:	4770      	bx	lr

0000f600 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    f600:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    f602:	2302      	movs	r3, #2
    f604:	4801      	ldr	r0, [pc, #4]	; (f60c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    f606:	4c02      	ldr	r4, [pc, #8]	; (f610 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    f608:	47a0      	blx	r4
	return	w;
}
    f60a:	bd10      	pop	{r4, pc}
    f60c:	20008e18 	.word	0x20008e18
    f610:	0000fed5 	.word	0x0000fed5

0000f614 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    f614:	b500      	push	{lr}
    f616:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    f618:	4b07      	ldr	r3, [pc, #28]	; (f638 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    f61a:	881b      	ldrh	r3, [r3, #0]
    f61c:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    f620:	4b06      	ldr	r3, [pc, #24]	; (f63c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    f622:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    f624:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    f628:	3202      	adds	r2, #2
    f62a:	a901      	add	r1, sp, #4
    f62c:	4b04      	ldr	r3, [pc, #16]	; (f640 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    f62e:	4798      	blx	r3
	return	w;
}
    f630:	b003      	add	sp, #12
    f632:	f85d fb04 	ldr.w	pc, [sp], #4
    f636:	bf00      	nop
    f638:	000112b8 	.word	0x000112b8
    f63c:	200019e4 	.word	0x200019e4
    f640:	0000f601 	.word	0x0000f601

0000f644 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    f644:	b510      	push	{r4, lr}
    f646:	4604      	mov	r4, r0
    f648:	30c0      	adds	r0, #192	; 0xc0
    f64a:	4b03      	ldr	r3, [pc, #12]	; (f658 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    f64c:	4798      	blx	r3
    f64e:	4620      	mov	r0, r4
    f650:	4b02      	ldr	r3, [pc, #8]	; (f65c <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    f652:	4798      	blx	r3
{
} //~MemoryManagment_Class
    f654:	4620      	mov	r0, r4
    f656:	bd10      	pop	{r4, pc}
    f658:	0000f887 	.word	0x0000f887
    f65c:	0000f5ff 	.word	0x0000f5ff

0000f660 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    f660:	b538      	push	{r3, r4, r5, lr}
    f662:	4604      	mov	r4, r0
    f664:	4b14      	ldr	r3, [pc, #80]	; (f6b8 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    f666:	4798      	blx	r3
    f668:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f66c:	4b13      	ldr	r3, [pc, #76]	; (f6bc <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    f66e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f670:	f44f 7500 	mov.w	r5, #512	; 0x200
    f674:	462a      	mov	r2, r5
    f676:	2100      	movs	r1, #0
    f678:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f67c:	4b10      	ldr	r3, [pc, #64]	; (f6c0 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    f67e:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f680:	2300      	movs	r3, #0
    f682:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
    f686:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
    f68a:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
    f68e:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
    f692:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
    f696:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
    f69a:	490a      	ldr	r1, [pc, #40]	; (f6c4 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    f69c:	f246 3214 	movw	r2, #25364	; 0x6314
    f6a0:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    f6a2:	4a09      	ldr	r2, [pc, #36]	; (f6c8 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    f6a4:	6812      	ldr	r2, [r2, #0]
    f6a6:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
    f6aa:	f246 3118 	movw	r1, #25368	; 0x6318
    f6ae:	5062      	str	r2, [r4, r1]
	initiated=false;
    f6b0:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
    f6b4:	4620      	mov	r0, r4
    f6b6:	bd38      	pop	{r3, r4, r5, pc}
    f6b8:	0000f5fd 	.word	0x0000f5fd
    f6bc:	0000f885 	.word	0x0000f885
    f6c0:	00010bc5 	.word	0x00010bc5
    f6c4:	200019e8 	.word	0x200019e8
    f6c8:	200019e4 	.word	0x200019e4

0000f6cc <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    f6cc:	b510      	push	{r4, lr}
    f6ce:	4604      	mov	r4, r0
		if (qspiFlash.Init())
    f6d0:	480a      	ldr	r0, [pc, #40]	; (f6fc <_ZN17MemoryFlash_Class4InitEm+0x30>)
    f6d2:	4b0b      	ldr	r3, [pc, #44]	; (f700 <_ZN17MemoryFlash_Class4InitEm+0x34>)
    f6d4:	4798      	blx	r3
    f6d6:	b948      	cbnz	r0, f6ec <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
    f6d8:	490a      	ldr	r1, [pc, #40]	; (f704 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    f6da:	480b      	ldr	r0, [pc, #44]	; (f708 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    f6dc:	4b0b      	ldr	r3, [pc, #44]	; (f70c <_ZN17MemoryFlash_Class4InitEm+0x40>)
    f6de:	4798      	blx	r3
			initiated=false;
    f6e0:	2300      	movs	r3, #0
    f6e2:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
    f6e6:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    f6ea:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
    f6ec:	4908      	ldr	r1, [pc, #32]	; (f710 <_ZN17MemoryFlash_Class4InitEm+0x44>)
    f6ee:	4806      	ldr	r0, [pc, #24]	; (f708 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    f6f0:	4b06      	ldr	r3, [pc, #24]	; (f70c <_ZN17MemoryFlash_Class4InitEm+0x40>)
    f6f2:	4798      	blx	r3
			initiated=true;
    f6f4:	2301      	movs	r3, #1
    f6f6:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
    f6fa:	e7f4      	b.n	f6e6 <_ZN17MemoryFlash_Class4InitEm+0x1a>
    f6fc:	20008e18 	.word	0x20008e18
    f700:	0000fe39 	.word	0x0000fe39
    f704:	00011368 	.word	0x00011368
    f708:	20009260 	.word	0x20009260
    f70c:	000103d9 	.word	0x000103d9
    f710:	00011348 	.word	0x00011348

0000f714 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
		  return	w;
	  }

	  return	r;
  }
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    f714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f718:	4604      	mov	r4, r0
    f71a:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    f71c:	f246 3318 	movw	r3, #25368	; 0x6318
    f720:	58c3      	ldr	r3, [r0, r3]
    f722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f72a:	d906      	bls.n	f73a <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    f72c:	4b14      	ldr	r3, [pc, #80]	; (f780 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f72e:	681b      	ldr	r3, [r3, #0]
    f730:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
    f734:	f246 3218 	movw	r2, #25368	; 0x6318
    f738:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    f73a:	f246 3618 	movw	r6, #25368	; 0x6318
    f73e:	59a1      	ldr	r1, [r4, r6]
    f740:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    f744:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
    f746:	4d0f      	ldr	r5, [pc, #60]	; (f784 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
    f748:	4628      	mov	r0, r5
    f74a:	4b0f      	ldr	r3, [pc, #60]	; (f788 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
    f74c:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
    f74e:	4628      	mov	r0, r5
    f750:	4f0e      	ldr	r7, [pc, #56]	; (f78c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
    f752:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    f754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f758:	59a2      	ldr	r2, [r4, r6]
    f75a:	4641      	mov	r1, r8
    f75c:	4628      	mov	r0, r5
    f75e:	4e0c      	ldr	r6, [pc, #48]	; (f790 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
    f760:	47b0      	blx	r6
    f762:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
    f764:	4628      	mov	r0, r5
    f766:	47b8      	blx	r7
		   if (w==0)
    f768:	b12e      	cbz	r6, f776 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
    f76a:	4b05      	ldr	r3, [pc, #20]	; (f780 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f76c:	6818      	ldr	r0, [r3, #0]
    f76e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
    f772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
    f776:	f246 3318 	movw	r3, #25368	; 0x6318
    f77a:	58e0      	ldr	r0, [r4, r3]
    f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f780:	200019e4 	.word	0x200019e4
    f784:	20008e18 	.word	0x20008e18
    f788:	0000fea5 	.word	0x0000fea5
    f78c:	0000ffb9 	.word	0x0000ffb9
    f790:	0000fed5 	.word	0x0000fed5

0000f794 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    f794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f798:	4c2b      	ldr	r4, [pc, #172]	; (f848 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    f79a:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    f79e:	492b      	ldr	r1, [pc, #172]	; (f84c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    f7a0:	4628      	mov	r0, r5
    f7a2:	4f2b      	ldr	r7, [pc, #172]	; (f850 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    f7a4:	47b8      	blx	r7
    f7a6:	4e2b      	ldr	r6, [pc, #172]	; (f854 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    f7a8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f880 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    f7ac:	4632      	mov	r2, r6
    f7ae:	4641      	mov	r1, r8
    f7b0:	4628      	mov	r0, r5
    f7b2:	4d29      	ldr	r5, [pc, #164]	; (f858 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    f7b4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f7b6:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    f7ba:	4928      	ldr	r1, [pc, #160]	; (f85c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    f7bc:	4648      	mov	r0, r9
    f7be:	47b8      	blx	r7
    f7c0:	4632      	mov	r2, r6
    f7c2:	4641      	mov	r1, r8
    f7c4:	4648      	mov	r0, r9
    f7c6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f7c8:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    f7cc:	4924      	ldr	r1, [pc, #144]	; (f860 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    f7ce:	4648      	mov	r0, r9
    f7d0:	47b8      	blx	r7
    f7d2:	4632      	mov	r2, r6
    f7d4:	4641      	mov	r1, r8
    f7d6:	4648      	mov	r0, r9
    f7d8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f7da:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    f7de:	4921      	ldr	r1, [pc, #132]	; (f864 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    f7e0:	4648      	mov	r0, r9
    f7e2:	47b8      	blx	r7
    f7e4:	4632      	mov	r2, r6
    f7e6:	4641      	mov	r1, r8
    f7e8:	4648      	mov	r0, r9
    f7ea:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f7ec:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    f7f0:	491d      	ldr	r1, [pc, #116]	; (f868 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    f7f2:	4648      	mov	r0, r9
    f7f4:	47b8      	blx	r7
    f7f6:	4632      	mov	r2, r6
    f7f8:	4641      	mov	r1, r8
    f7fa:	4648      	mov	r0, r9
    f7fc:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f7fe:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    f802:	491a      	ldr	r1, [pc, #104]	; (f86c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    f804:	4648      	mov	r0, r9
    f806:	47b8      	blx	r7
    f808:	4632      	mov	r2, r6
    f80a:	4641      	mov	r1, r8
    f80c:	4648      	mov	r0, r9
    f80e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f810:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    f814:	4916      	ldr	r1, [pc, #88]	; (f870 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    f816:	4648      	mov	r0, r9
    f818:	47b8      	blx	r7
    f81a:	4632      	mov	r2, r6
    f81c:	4641      	mov	r1, r8
    f81e:	4648      	mov	r0, r9
    f820:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f822:	f1a4 0918 	sub.w	r9, r4, #24
    f826:	4913      	ldr	r1, [pc, #76]	; (f874 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    f828:	4648      	mov	r0, r9
    f82a:	47b8      	blx	r7
    f82c:	4632      	mov	r2, r6
    f82e:	4641      	mov	r1, r8
    f830:	4648      	mov	r0, r9
    f832:	47a8      	blx	r5
    f834:	3408      	adds	r4, #8
    f836:	4620      	mov	r0, r4
    f838:	4b0f      	ldr	r3, [pc, #60]	; (f878 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    f83a:	4798      	blx	r3
    f83c:	4632      	mov	r2, r6
    f83e:	490f      	ldr	r1, [pc, #60]	; (f87c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    f840:	4620      	mov	r0, r4
    f842:	47a8      	blx	r5
    f844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f848:	20002ae0 	.word	0x20002ae0
    f84c:	2000aa40 	.word	0x2000aa40
    f850:	0000e639 	.word	0x0000e639
    f854:	20000000 	.word	0x20000000
    f858:	00010a0d 	.word	0x00010a0d
    f85c:	2000aad4 	.word	0x2000aad4
    f860:	2000abf8 	.word	0x2000abf8
    f864:	2000aaf4 	.word	0x2000aaf4
    f868:	2000abb8 	.word	0x2000abb8
    f86c:	2000abd8 	.word	0x2000abd8
    f870:	2000aab0 	.word	0x2000aab0
    f874:	2000ab50 	.word	0x2000ab50
    f878:	0000f661 	.word	0x0000f661
    f87c:	0000f645 	.word	0x0000f645
    f880:	0000e671 	.word	0x0000e671

0000f884 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    f884:	4770      	bx	lr

0000f886 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    f886:	4770      	bx	lr

0000f888 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f888:	b580      	push	{r7, lr}
    f88a:	b084      	sub	sp, #16
    f88c:	af00      	add	r7, sp, #0
    f88e:	60f8      	str	r0, [r7, #12]
    f890:	60b9      	str	r1, [r7, #8]
    f892:	4613      	mov	r3, r2
    f894:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f896:	68fb      	ldr	r3, [r7, #12]
    f898:	2b00      	cmp	r3, #0
    f89a:	d004      	beq.n	f8a6 <io_write+0x1e>
    f89c:	68bb      	ldr	r3, [r7, #8]
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d001      	beq.n	f8a6 <io_write+0x1e>
    f8a2:	2301      	movs	r3, #1
    f8a4:	e000      	b.n	f8a8 <io_write+0x20>
    f8a6:	2300      	movs	r3, #0
    f8a8:	f003 0301 	and.w	r3, r3, #1
    f8ac:	b2db      	uxtb	r3, r3
    f8ae:	2234      	movs	r2, #52	; 0x34
    f8b0:	4907      	ldr	r1, [pc, #28]	; (f8d0 <io_write+0x48>)
    f8b2:	4618      	mov	r0, r3
    f8b4:	4b07      	ldr	r3, [pc, #28]	; (f8d4 <io_write+0x4c>)
    f8b6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f8b8:	68fb      	ldr	r3, [r7, #12]
    f8ba:	681b      	ldr	r3, [r3, #0]
    f8bc:	88fa      	ldrh	r2, [r7, #6]
    f8be:	68b9      	ldr	r1, [r7, #8]
    f8c0:	68f8      	ldr	r0, [r7, #12]
    f8c2:	4798      	blx	r3
    f8c4:	4603      	mov	r3, r0
}
    f8c6:	4618      	mov	r0, r3
    f8c8:	3710      	adds	r7, #16
    f8ca:	46bd      	mov	sp, r7
    f8cc:	bd80      	pop	{r7, pc}
    f8ce:	bf00      	nop
    f8d0:	00011388 	.word	0x00011388
    f8d4:	0000445d 	.word	0x0000445d

0000f8d8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f8d8:	b580      	push	{r7, lr}
    f8da:	b084      	sub	sp, #16
    f8dc:	af00      	add	r7, sp, #0
    f8de:	60f8      	str	r0, [r7, #12]
    f8e0:	60b9      	str	r1, [r7, #8]
    f8e2:	4613      	mov	r3, r2
    f8e4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f8e6:	68fb      	ldr	r3, [r7, #12]
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	d004      	beq.n	f8f6 <io_read+0x1e>
    f8ec:	68bb      	ldr	r3, [r7, #8]
    f8ee:	2b00      	cmp	r3, #0
    f8f0:	d001      	beq.n	f8f6 <io_read+0x1e>
    f8f2:	2301      	movs	r3, #1
    f8f4:	e000      	b.n	f8f8 <io_read+0x20>
    f8f6:	2300      	movs	r3, #0
    f8f8:	f003 0301 	and.w	r3, r3, #1
    f8fc:	b2db      	uxtb	r3, r3
    f8fe:	223d      	movs	r2, #61	; 0x3d
    f900:	4907      	ldr	r1, [pc, #28]	; (f920 <io_read+0x48>)
    f902:	4618      	mov	r0, r3
    f904:	4b07      	ldr	r3, [pc, #28]	; (f924 <io_read+0x4c>)
    f906:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f908:	68fb      	ldr	r3, [r7, #12]
    f90a:	685b      	ldr	r3, [r3, #4]
    f90c:	88fa      	ldrh	r2, [r7, #6]
    f90e:	68b9      	ldr	r1, [r7, #8]
    f910:	68f8      	ldr	r0, [r7, #12]
    f912:	4798      	blx	r3
    f914:	4603      	mov	r3, r0
}
    f916:	4618      	mov	r0, r3
    f918:	3710      	adds	r7, #16
    f91a:	46bd      	mov	sp, r7
    f91c:	bd80      	pop	{r7, pc}
    f91e:	bf00      	nop
    f920:	00011388 	.word	0x00011388
    f924:	0000445d 	.word	0x0000445d

0000f928 <hri_port_set_DIR_reg>:
{
    f928:	b480      	push	{r7}
    f92a:	b085      	sub	sp, #20
    f92c:	af00      	add	r7, sp, #0
    f92e:	60f8      	str	r0, [r7, #12]
    f930:	460b      	mov	r3, r1
    f932:	607a      	str	r2, [r7, #4]
    f934:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    f936:	7afb      	ldrb	r3, [r7, #11]
    f938:	68fa      	ldr	r2, [r7, #12]
    f93a:	01db      	lsls	r3, r3, #7
    f93c:	4413      	add	r3, r2
    f93e:	3308      	adds	r3, #8
    f940:	687a      	ldr	r2, [r7, #4]
    f942:	601a      	str	r2, [r3, #0]
}
    f944:	bf00      	nop
    f946:	3714      	adds	r7, #20
    f948:	46bd      	mov	sp, r7
    f94a:	bc80      	pop	{r7}
    f94c:	4770      	bx	lr

0000f94e <hri_port_clear_DIR_reg>:
{
    f94e:	b480      	push	{r7}
    f950:	b085      	sub	sp, #20
    f952:	af00      	add	r7, sp, #0
    f954:	60f8      	str	r0, [r7, #12]
    f956:	460b      	mov	r3, r1
    f958:	607a      	str	r2, [r7, #4]
    f95a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f95c:	7afb      	ldrb	r3, [r7, #11]
    f95e:	68fa      	ldr	r2, [r7, #12]
    f960:	01db      	lsls	r3, r3, #7
    f962:	4413      	add	r3, r2
    f964:	3304      	adds	r3, #4
    f966:	687a      	ldr	r2, [r7, #4]
    f968:	601a      	str	r2, [r3, #0]
}
    f96a:	bf00      	nop
    f96c:	3714      	adds	r7, #20
    f96e:	46bd      	mov	sp, r7
    f970:	bc80      	pop	{r7}
    f972:	4770      	bx	lr

0000f974 <hri_port_set_OUT_reg>:
{
    f974:	b480      	push	{r7}
    f976:	b085      	sub	sp, #20
    f978:	af00      	add	r7, sp, #0
    f97a:	60f8      	str	r0, [r7, #12]
    f97c:	460b      	mov	r3, r1
    f97e:	607a      	str	r2, [r7, #4]
    f980:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f982:	7afb      	ldrb	r3, [r7, #11]
    f984:	68fa      	ldr	r2, [r7, #12]
    f986:	01db      	lsls	r3, r3, #7
    f988:	4413      	add	r3, r2
    f98a:	3318      	adds	r3, #24
    f98c:	687a      	ldr	r2, [r7, #4]
    f98e:	601a      	str	r2, [r3, #0]
}
    f990:	bf00      	nop
    f992:	3714      	adds	r7, #20
    f994:	46bd      	mov	sp, r7
    f996:	bc80      	pop	{r7}
    f998:	4770      	bx	lr

0000f99a <hri_port_clear_OUT_reg>:
{
    f99a:	b480      	push	{r7}
    f99c:	b085      	sub	sp, #20
    f99e:	af00      	add	r7, sp, #0
    f9a0:	60f8      	str	r0, [r7, #12]
    f9a2:	460b      	mov	r3, r1
    f9a4:	607a      	str	r2, [r7, #4]
    f9a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f9a8:	7afb      	ldrb	r3, [r7, #11]
    f9aa:	68fa      	ldr	r2, [r7, #12]
    f9ac:	01db      	lsls	r3, r3, #7
    f9ae:	4413      	add	r3, r2
    f9b0:	3314      	adds	r3, #20
    f9b2:	687a      	ldr	r2, [r7, #4]
    f9b4:	601a      	str	r2, [r3, #0]
}
    f9b6:	bf00      	nop
    f9b8:	3714      	adds	r7, #20
    f9ba:	46bd      	mov	sp, r7
    f9bc:	bc80      	pop	{r7}
    f9be:	4770      	bx	lr

0000f9c0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    f9c0:	b480      	push	{r7}
    f9c2:	b085      	sub	sp, #20
    f9c4:	af00      	add	r7, sp, #0
    f9c6:	6078      	str	r0, [r7, #4]
    f9c8:	4608      	mov	r0, r1
    f9ca:	4611      	mov	r1, r2
    f9cc:	461a      	mov	r2, r3
    f9ce:	4603      	mov	r3, r0
    f9d0:	70fb      	strb	r3, [r7, #3]
    f9d2:	460b      	mov	r3, r1
    f9d4:	70bb      	strb	r3, [r7, #2]
    f9d6:	4613      	mov	r3, r2
    f9d8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    f9da:	78fa      	ldrb	r2, [r7, #3]
    f9dc:	78bb      	ldrb	r3, [r7, #2]
    f9de:	6879      	ldr	r1, [r7, #4]
    f9e0:	01d2      	lsls	r2, r2, #7
    f9e2:	440a      	add	r2, r1
    f9e4:	4413      	add	r3, r2
    f9e6:	3330      	adds	r3, #48	; 0x30
    f9e8:	781b      	ldrb	r3, [r3, #0]
    f9ea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    f9ec:	7bfb      	ldrb	r3, [r7, #15]
    f9ee:	f023 030f 	bic.w	r3, r3, #15
    f9f2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    f9f4:	787b      	ldrb	r3, [r7, #1]
    f9f6:	f003 030f 	and.w	r3, r3, #15
    f9fa:	b2da      	uxtb	r2, r3
    f9fc:	7bfb      	ldrb	r3, [r7, #15]
    f9fe:	4313      	orrs	r3, r2
    fa00:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fa02:	78fa      	ldrb	r2, [r7, #3]
    fa04:	78bb      	ldrb	r3, [r7, #2]
    fa06:	6879      	ldr	r1, [r7, #4]
    fa08:	01d2      	lsls	r2, r2, #7
    fa0a:	440a      	add	r2, r1
    fa0c:	4413      	add	r3, r2
    fa0e:	3330      	adds	r3, #48	; 0x30
    fa10:	7bfa      	ldrb	r2, [r7, #15]
    fa12:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa14:	bf00      	nop
    fa16:	3714      	adds	r7, #20
    fa18:	46bd      	mov	sp, r7
    fa1a:	bc80      	pop	{r7}
    fa1c:	4770      	bx	lr

0000fa1e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    fa1e:	b480      	push	{r7}
    fa20:	b085      	sub	sp, #20
    fa22:	af00      	add	r7, sp, #0
    fa24:	6078      	str	r0, [r7, #4]
    fa26:	4608      	mov	r0, r1
    fa28:	4611      	mov	r1, r2
    fa2a:	461a      	mov	r2, r3
    fa2c:	4603      	mov	r3, r0
    fa2e:	70fb      	strb	r3, [r7, #3]
    fa30:	460b      	mov	r3, r1
    fa32:	70bb      	strb	r3, [r7, #2]
    fa34:	4613      	mov	r3, r2
    fa36:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    fa38:	78fa      	ldrb	r2, [r7, #3]
    fa3a:	78bb      	ldrb	r3, [r7, #2]
    fa3c:	6879      	ldr	r1, [r7, #4]
    fa3e:	01d2      	lsls	r2, r2, #7
    fa40:	440a      	add	r2, r1
    fa42:	4413      	add	r3, r2
    fa44:	3330      	adds	r3, #48	; 0x30
    fa46:	781b      	ldrb	r3, [r3, #0]
    fa48:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    fa4a:	7bfb      	ldrb	r3, [r7, #15]
    fa4c:	f003 030f 	and.w	r3, r3, #15
    fa50:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    fa52:	787b      	ldrb	r3, [r7, #1]
    fa54:	011b      	lsls	r3, r3, #4
    fa56:	b2da      	uxtb	r2, r3
    fa58:	7bfb      	ldrb	r3, [r7, #15]
    fa5a:	4313      	orrs	r3, r2
    fa5c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fa5e:	78fa      	ldrb	r2, [r7, #3]
    fa60:	78bb      	ldrb	r3, [r7, #2]
    fa62:	6879      	ldr	r1, [r7, #4]
    fa64:	01d2      	lsls	r2, r2, #7
    fa66:	440a      	add	r2, r1
    fa68:	4413      	add	r3, r2
    fa6a:	3330      	adds	r3, #48	; 0x30
    fa6c:	7bfa      	ldrb	r2, [r7, #15]
    fa6e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa70:	bf00      	nop
    fa72:	3714      	adds	r7, #20
    fa74:	46bd      	mov	sp, r7
    fa76:	bc80      	pop	{r7}
    fa78:	4770      	bx	lr

0000fa7a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    fa7a:	b480      	push	{r7}
    fa7c:	b085      	sub	sp, #20
    fa7e:	af00      	add	r7, sp, #0
    fa80:	6078      	str	r0, [r7, #4]
    fa82:	4608      	mov	r0, r1
    fa84:	4611      	mov	r1, r2
    fa86:	461a      	mov	r2, r3
    fa88:	4603      	mov	r3, r0
    fa8a:	70fb      	strb	r3, [r7, #3]
    fa8c:	460b      	mov	r3, r1
    fa8e:	70bb      	strb	r3, [r7, #2]
    fa90:	4613      	mov	r3, r2
    fa92:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fa94:	78fa      	ldrb	r2, [r7, #3]
    fa96:	78bb      	ldrb	r3, [r7, #2]
    fa98:	6879      	ldr	r1, [r7, #4]
    fa9a:	01d2      	lsls	r2, r2, #7
    fa9c:	440a      	add	r2, r1
    fa9e:	4413      	add	r3, r2
    faa0:	3340      	adds	r3, #64	; 0x40
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    faa6:	7bfb      	ldrb	r3, [r7, #15]
    faa8:	f023 0301 	bic.w	r3, r3, #1
    faac:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    faae:	787a      	ldrb	r2, [r7, #1]
    fab0:	7bfb      	ldrb	r3, [r7, #15]
    fab2:	4313      	orrs	r3, r2
    fab4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fab6:	78fa      	ldrb	r2, [r7, #3]
    fab8:	78bb      	ldrb	r3, [r7, #2]
    faba:	6879      	ldr	r1, [r7, #4]
    fabc:	01d2      	lsls	r2, r2, #7
    fabe:	440a      	add	r2, r1
    fac0:	4413      	add	r3, r2
    fac2:	3340      	adds	r3, #64	; 0x40
    fac4:	7bfa      	ldrb	r2, [r7, #15]
    fac6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fac8:	bf00      	nop
    faca:	3714      	adds	r7, #20
    facc:	46bd      	mov	sp, r7
    face:	bc80      	pop	{r7}
    fad0:	4770      	bx	lr

0000fad2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    fad2:	b480      	push	{r7}
    fad4:	b085      	sub	sp, #20
    fad6:	af00      	add	r7, sp, #0
    fad8:	60f8      	str	r0, [r7, #12]
    fada:	460b      	mov	r3, r1
    fadc:	607a      	str	r2, [r7, #4]
    fade:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    fae0:	7afb      	ldrb	r3, [r7, #11]
    fae2:	68fa      	ldr	r2, [r7, #12]
    fae4:	01db      	lsls	r3, r3, #7
    fae6:	4413      	add	r3, r2
    fae8:	3328      	adds	r3, #40	; 0x28
    faea:	687a      	ldr	r2, [r7, #4]
    faec:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    faee:	bf00      	nop
    faf0:	3714      	adds	r7, #20
    faf2:	46bd      	mov	sp, r7
    faf4:	bc80      	pop	{r7}
    faf6:	4770      	bx	lr

0000faf8 <_gpio_set_direction>:
{
    faf8:	b580      	push	{r7, lr}
    fafa:	b082      	sub	sp, #8
    fafc:	af00      	add	r7, sp, #0
    fafe:	4603      	mov	r3, r0
    fb00:	6039      	str	r1, [r7, #0]
    fb02:	71fb      	strb	r3, [r7, #7]
    fb04:	4613      	mov	r3, r2
    fb06:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    fb08:	79bb      	ldrb	r3, [r7, #6]
    fb0a:	2b01      	cmp	r3, #1
    fb0c:	d01c      	beq.n	fb48 <_gpio_set_direction+0x50>
    fb0e:	2b02      	cmp	r3, #2
    fb10:	d037      	beq.n	fb82 <_gpio_set_direction+0x8a>
    fb12:	2b00      	cmp	r3, #0
    fb14:	d14e      	bne.n	fbb4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    fb16:	79fb      	ldrb	r3, [r7, #7]
    fb18:	683a      	ldr	r2, [r7, #0]
    fb1a:	4619      	mov	r1, r3
    fb1c:	482a      	ldr	r0, [pc, #168]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb1e:	4b2b      	ldr	r3, [pc, #172]	; (fbcc <_gpio_set_direction+0xd4>)
    fb20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fb22:	683b      	ldr	r3, [r7, #0]
    fb24:	b29b      	uxth	r3, r3
    fb26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fb2a:	79fb      	ldrb	r3, [r7, #7]
    fb2c:	4619      	mov	r1, r3
    fb2e:	4826      	ldr	r0, [pc, #152]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb30:	4b27      	ldr	r3, [pc, #156]	; (fbd0 <_gpio_set_direction+0xd8>)
    fb32:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fb34:	683b      	ldr	r3, [r7, #0]
    fb36:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fb38:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fb3c:	79fb      	ldrb	r3, [r7, #7]
    fb3e:	4619      	mov	r1, r3
    fb40:	4821      	ldr	r0, [pc, #132]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb42:	4b23      	ldr	r3, [pc, #140]	; (fbd0 <_gpio_set_direction+0xd8>)
    fb44:	4798      	blx	r3
		break;
    fb46:	e03a      	b.n	fbbe <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    fb48:	79fb      	ldrb	r3, [r7, #7]
    fb4a:	683a      	ldr	r2, [r7, #0]
    fb4c:	4619      	mov	r1, r3
    fb4e:	481e      	ldr	r0, [pc, #120]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb50:	4b1e      	ldr	r3, [pc, #120]	; (fbcc <_gpio_set_direction+0xd4>)
    fb52:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    fb54:	683b      	ldr	r3, [r7, #0]
    fb56:	b29b      	uxth	r3, r3
    fb58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    fb5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fb60:	79f9      	ldrb	r1, [r7, #7]
    fb62:	461a      	mov	r2, r3
    fb64:	4818      	ldr	r0, [pc, #96]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb66:	4b1a      	ldr	r3, [pc, #104]	; (fbd0 <_gpio_set_direction+0xd8>)
    fb68:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    fb6a:	683b      	ldr	r3, [r7, #0]
    fb6c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    fb6e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    fb72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    fb76:	79f9      	ldrb	r1, [r7, #7]
    fb78:	461a      	mov	r2, r3
    fb7a:	4813      	ldr	r0, [pc, #76]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb7c:	4b14      	ldr	r3, [pc, #80]	; (fbd0 <_gpio_set_direction+0xd8>)
    fb7e:	4798      	blx	r3
		break;
    fb80:	e01d      	b.n	fbbe <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    fb82:	79fb      	ldrb	r3, [r7, #7]
    fb84:	683a      	ldr	r2, [r7, #0]
    fb86:	4619      	mov	r1, r3
    fb88:	480f      	ldr	r0, [pc, #60]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb8a:	4b12      	ldr	r3, [pc, #72]	; (fbd4 <_gpio_set_direction+0xdc>)
    fb8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fb8e:	683b      	ldr	r3, [r7, #0]
    fb90:	b29b      	uxth	r3, r3
    fb92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fb96:	79fb      	ldrb	r3, [r7, #7]
    fb98:	4619      	mov	r1, r3
    fb9a:	480b      	ldr	r0, [pc, #44]	; (fbc8 <_gpio_set_direction+0xd0>)
    fb9c:	4b0c      	ldr	r3, [pc, #48]	; (fbd0 <_gpio_set_direction+0xd8>)
    fb9e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fba0:	683b      	ldr	r3, [r7, #0]
    fba2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fba4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fba8:	79fb      	ldrb	r3, [r7, #7]
    fbaa:	4619      	mov	r1, r3
    fbac:	4806      	ldr	r0, [pc, #24]	; (fbc8 <_gpio_set_direction+0xd0>)
    fbae:	4b08      	ldr	r3, [pc, #32]	; (fbd0 <_gpio_set_direction+0xd8>)
    fbb0:	4798      	blx	r3
		break;
    fbb2:	e004      	b.n	fbbe <_gpio_set_direction+0xc6>
		ASSERT(false);
    fbb4:	2246      	movs	r2, #70	; 0x46
    fbb6:	4908      	ldr	r1, [pc, #32]	; (fbd8 <_gpio_set_direction+0xe0>)
    fbb8:	2000      	movs	r0, #0
    fbba:	4b08      	ldr	r3, [pc, #32]	; (fbdc <_gpio_set_direction+0xe4>)
    fbbc:	4798      	blx	r3
}
    fbbe:	bf00      	nop
    fbc0:	3708      	adds	r7, #8
    fbc2:	46bd      	mov	sp, r7
    fbc4:	bd80      	pop	{r7, pc}
    fbc6:	bf00      	nop
    fbc8:	41008000 	.word	0x41008000
    fbcc:	0000f94f 	.word	0x0000f94f
    fbd0:	0000fad3 	.word	0x0000fad3
    fbd4:	0000f929 	.word	0x0000f929
    fbd8:	0001139c 	.word	0x0001139c
    fbdc:	0000445d 	.word	0x0000445d

0000fbe0 <_gpio_set_level>:
{
    fbe0:	b580      	push	{r7, lr}
    fbe2:	b082      	sub	sp, #8
    fbe4:	af00      	add	r7, sp, #0
    fbe6:	4603      	mov	r3, r0
    fbe8:	6039      	str	r1, [r7, #0]
    fbea:	71fb      	strb	r3, [r7, #7]
    fbec:	4613      	mov	r3, r2
    fbee:	71bb      	strb	r3, [r7, #6]
	if (level) {
    fbf0:	79bb      	ldrb	r3, [r7, #6]
    fbf2:	2b00      	cmp	r3, #0
    fbf4:	d006      	beq.n	fc04 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    fbf6:	79fb      	ldrb	r3, [r7, #7]
    fbf8:	683a      	ldr	r2, [r7, #0]
    fbfa:	4619      	mov	r1, r3
    fbfc:	4806      	ldr	r0, [pc, #24]	; (fc18 <_gpio_set_level+0x38>)
    fbfe:	4b07      	ldr	r3, [pc, #28]	; (fc1c <_gpio_set_level+0x3c>)
    fc00:	4798      	blx	r3
}
    fc02:	e005      	b.n	fc10 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    fc04:	79fb      	ldrb	r3, [r7, #7]
    fc06:	683a      	ldr	r2, [r7, #0]
    fc08:	4619      	mov	r1, r3
    fc0a:	4803      	ldr	r0, [pc, #12]	; (fc18 <_gpio_set_level+0x38>)
    fc0c:	4b04      	ldr	r3, [pc, #16]	; (fc20 <_gpio_set_level+0x40>)
    fc0e:	4798      	blx	r3
}
    fc10:	bf00      	nop
    fc12:	3708      	adds	r7, #8
    fc14:	46bd      	mov	sp, r7
    fc16:	bd80      	pop	{r7, pc}
    fc18:	41008000 	.word	0x41008000
    fc1c:	0000f975 	.word	0x0000f975
    fc20:	0000f99b 	.word	0x0000f99b

0000fc24 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    fc24:	b590      	push	{r4, r7, lr}
    fc26:	b085      	sub	sp, #20
    fc28:	af00      	add	r7, sp, #0
    fc2a:	6078      	str	r0, [r7, #4]
    fc2c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    fc2e:	687b      	ldr	r3, [r7, #4]
    fc30:	095b      	lsrs	r3, r3, #5
    fc32:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    fc34:	687b      	ldr	r3, [r7, #4]
    fc36:	b2db      	uxtb	r3, r3
    fc38:	f003 031f 	and.w	r3, r3, #31
    fc3c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    fc3e:	683b      	ldr	r3, [r7, #0]
    fc40:	f1b3 3fff 	cmp.w	r3, #4294967295
    fc44:	d106      	bne.n	fc54 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    fc46:	7bba      	ldrb	r2, [r7, #14]
    fc48:	7bf9      	ldrb	r1, [r7, #15]
    fc4a:	2300      	movs	r3, #0
    fc4c:	4812      	ldr	r0, [pc, #72]	; (fc98 <_gpio_set_pin_function+0x74>)
    fc4e:	4c13      	ldr	r4, [pc, #76]	; (fc9c <_gpio_set_pin_function+0x78>)
    fc50:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    fc52:	e01d      	b.n	fc90 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    fc54:	7bba      	ldrb	r2, [r7, #14]
    fc56:	7bf9      	ldrb	r1, [r7, #15]
    fc58:	2301      	movs	r3, #1
    fc5a:	480f      	ldr	r0, [pc, #60]	; (fc98 <_gpio_set_pin_function+0x74>)
    fc5c:	4c0f      	ldr	r4, [pc, #60]	; (fc9c <_gpio_set_pin_function+0x78>)
    fc5e:	47a0      	blx	r4
		if (pin & 1) {
    fc60:	7bbb      	ldrb	r3, [r7, #14]
    fc62:	f003 0301 	and.w	r3, r3, #1
    fc66:	2b00      	cmp	r3, #0
    fc68:	d009      	beq.n	fc7e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    fc6a:	7bbb      	ldrb	r3, [r7, #14]
    fc6c:	105b      	asrs	r3, r3, #1
    fc6e:	b2da      	uxtb	r2, r3
    fc70:	683b      	ldr	r3, [r7, #0]
    fc72:	b2db      	uxtb	r3, r3
    fc74:	7bf9      	ldrb	r1, [r7, #15]
    fc76:	4808      	ldr	r0, [pc, #32]	; (fc98 <_gpio_set_pin_function+0x74>)
    fc78:	4c09      	ldr	r4, [pc, #36]	; (fca0 <_gpio_set_pin_function+0x7c>)
    fc7a:	47a0      	blx	r4
}
    fc7c:	e008      	b.n	fc90 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    fc7e:	7bbb      	ldrb	r3, [r7, #14]
    fc80:	105b      	asrs	r3, r3, #1
    fc82:	b2da      	uxtb	r2, r3
    fc84:	683b      	ldr	r3, [r7, #0]
    fc86:	b2db      	uxtb	r3, r3
    fc88:	7bf9      	ldrb	r1, [r7, #15]
    fc8a:	4803      	ldr	r0, [pc, #12]	; (fc98 <_gpio_set_pin_function+0x74>)
    fc8c:	4c05      	ldr	r4, [pc, #20]	; (fca4 <_gpio_set_pin_function+0x80>)
    fc8e:	47a0      	blx	r4
}
    fc90:	bf00      	nop
    fc92:	3714      	adds	r7, #20
    fc94:	46bd      	mov	sp, r7
    fc96:	bd90      	pop	{r4, r7, pc}
    fc98:	41008000 	.word	0x41008000
    fc9c:	0000fa7b 	.word	0x0000fa7b
    fca0:	0000fa1f 	.word	0x0000fa1f
    fca4:	0000f9c1 	.word	0x0000f9c1

0000fca8 <gpio_set_pin_function>:
{
    fca8:	b580      	push	{r7, lr}
    fcaa:	b082      	sub	sp, #8
    fcac:	af00      	add	r7, sp, #0
    fcae:	6078      	str	r0, [r7, #4]
    fcb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    fcb2:	6839      	ldr	r1, [r7, #0]
    fcb4:	6878      	ldr	r0, [r7, #4]
    fcb6:	4b03      	ldr	r3, [pc, #12]	; (fcc4 <gpio_set_pin_function+0x1c>)
    fcb8:	4798      	blx	r3
}
    fcba:	bf00      	nop
    fcbc:	3708      	adds	r7, #8
    fcbe:	46bd      	mov	sp, r7
    fcc0:	bd80      	pop	{r7, pc}
    fcc2:	bf00      	nop
    fcc4:	0000fc25 	.word	0x0000fc25

0000fcc8 <gpio_set_pin_direction>:
{
    fcc8:	b580      	push	{r7, lr}
    fcca:	b082      	sub	sp, #8
    fccc:	af00      	add	r7, sp, #0
    fcce:	4603      	mov	r3, r0
    fcd0:	460a      	mov	r2, r1
    fcd2:	71fb      	strb	r3, [r7, #7]
    fcd4:	4613      	mov	r3, r2
    fcd6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    fcd8:	79fb      	ldrb	r3, [r7, #7]
    fcda:	115b      	asrs	r3, r3, #5
    fcdc:	b2d8      	uxtb	r0, r3
    fcde:	79fb      	ldrb	r3, [r7, #7]
    fce0:	f003 031f 	and.w	r3, r3, #31
    fce4:	2201      	movs	r2, #1
    fce6:	fa02 f303 	lsl.w	r3, r2, r3
    fcea:	79ba      	ldrb	r2, [r7, #6]
    fcec:	4619      	mov	r1, r3
    fcee:	4b03      	ldr	r3, [pc, #12]	; (fcfc <gpio_set_pin_direction+0x34>)
    fcf0:	4798      	blx	r3
}
    fcf2:	bf00      	nop
    fcf4:	3708      	adds	r7, #8
    fcf6:	46bd      	mov	sp, r7
    fcf8:	bd80      	pop	{r7, pc}
    fcfa:	bf00      	nop
    fcfc:	0000faf9 	.word	0x0000faf9

0000fd00 <gpio_set_pin_level>:
{
    fd00:	b580      	push	{r7, lr}
    fd02:	b082      	sub	sp, #8
    fd04:	af00      	add	r7, sp, #0
    fd06:	4603      	mov	r3, r0
    fd08:	460a      	mov	r2, r1
    fd0a:	71fb      	strb	r3, [r7, #7]
    fd0c:	4613      	mov	r3, r2
    fd0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    fd10:	79fb      	ldrb	r3, [r7, #7]
    fd12:	115b      	asrs	r3, r3, #5
    fd14:	b2d8      	uxtb	r0, r3
    fd16:	79fb      	ldrb	r3, [r7, #7]
    fd18:	f003 031f 	and.w	r3, r3, #31
    fd1c:	2201      	movs	r2, #1
    fd1e:	fa02 f303 	lsl.w	r3, r2, r3
    fd22:	79ba      	ldrb	r2, [r7, #6]
    fd24:	4619      	mov	r1, r3
    fd26:	4b03      	ldr	r3, [pc, #12]	; (fd34 <gpio_set_pin_level+0x34>)
    fd28:	4798      	blx	r3
}
    fd2a:	bf00      	nop
    fd2c:	3708      	adds	r7, #8
    fd2e:	46bd      	mov	sp, r7
    fd30:	bd80      	pop	{r7, pc}
    fd32:	bf00      	nop
    fd34:	0000fbe1 	.word	0x0000fbe1

0000fd38 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    fd38:	b580      	push	{r7, lr}
    fd3a:	b082      	sub	sp, #8
    fd3c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    fd3e:	2100      	movs	r1, #0
    fd40:	2008      	movs	r0, #8
    fd42:	4b24      	ldr	r3, [pc, #144]	; (fdd4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fd44:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    fd46:	2100      	movs	r1, #0
    fd48:	202b      	movs	r0, #43	; 0x2b
    fd4a:	4b22      	ldr	r3, [pc, #136]	; (fdd4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fd4c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    fd4e:	2100      	movs	r1, #0
    fd50:	202a      	movs	r0, #42	; 0x2a
    fd52:	4b20      	ldr	r3, [pc, #128]	; (fdd4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fd54:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    fd56:	2102      	movs	r1, #2
    fd58:	2008      	movs	r0, #8
    fd5a:	4b1f      	ldr	r3, [pc, #124]	; (fdd8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd5c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    fd5e:	2102      	movs	r1, #2
    fd60:	202b      	movs	r0, #43	; 0x2b
    fd62:	4b1d      	ldr	r3, [pc, #116]	; (fdd8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd64:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    fd66:	2102      	movs	r1, #2
    fd68:	202a      	movs	r0, #42	; 0x2a
    fd6a:	4b1b      	ldr	r3, [pc, #108]	; (fdd8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd6c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    fd6e:	2101      	movs	r1, #1
    fd70:	2008      	movs	r0, #8
    fd72:	4b1a      	ldr	r3, [pc, #104]	; (fddc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd74:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    fd76:	2100      	movs	r1, #0
    fd78:	202b      	movs	r0, #43	; 0x2b
    fd7a:	4b18      	ldr	r3, [pc, #96]	; (fddc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd7c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    fd7e:	2100      	movs	r1, #0
    fd80:	202a      	movs	r0, #42	; 0x2a
    fd82:	4b16      	ldr	r3, [pc, #88]	; (fddc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd84:	4798      	blx	r3

	delay_us(1);
    fd86:	2001      	movs	r0, #1
    fd88:	4b15      	ldr	r3, [pc, #84]	; (fde0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fd8a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    fd8c:	2300      	movs	r3, #0
    fd8e:	607b      	str	r3, [r7, #4]
    fd90:	687b      	ldr	r3, [r7, #4]
    fd92:	2b06      	cmp	r3, #6
    fd94:	dc11      	bgt.n	fdba <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    fd96:	2101      	movs	r1, #1
    fd98:	202a      	movs	r0, #42	; 0x2a
    fd9a:	4b10      	ldr	r3, [pc, #64]	; (fddc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd9c:	4798      	blx	r3
		delay_us(1);
    fd9e:	2001      	movs	r0, #1
    fda0:	4b0f      	ldr	r3, [pc, #60]	; (fde0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fda2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    fda4:	2100      	movs	r1, #0
    fda6:	202a      	movs	r0, #42	; 0x2a
    fda8:	4b0c      	ldr	r3, [pc, #48]	; (fddc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fdaa:	4798      	blx	r3
		delay_us(1);
    fdac:	2001      	movs	r0, #1
    fdae:	4b0c      	ldr	r3, [pc, #48]	; (fde0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fdb0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    fdb2:	687b      	ldr	r3, [r7, #4]
    fdb4:	3301      	adds	r3, #1
    fdb6:	607b      	str	r3, [r7, #4]
    fdb8:	e7ea      	b.n	fd90 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    fdba:	2101      	movs	r1, #1
    fdbc:	202b      	movs	r0, #43	; 0x2b
    fdbe:	4b07      	ldr	r3, [pc, #28]	; (fddc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fdc0:	4798      	blx	r3
	delay_us(1);
    fdc2:	2001      	movs	r0, #1
    fdc4:	4b06      	ldr	r3, [pc, #24]	; (fde0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fdc6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    fdc8:	4b06      	ldr	r3, [pc, #24]	; (fde4 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    fdca:	4798      	blx	r3
}
    fdcc:	bf00      	nop
    fdce:	3708      	adds	r7, #8
    fdd0:	46bd      	mov	sp, r7
    fdd2:	bd80      	pop	{r7, pc}
    fdd4:	0000fca9 	.word	0x0000fca9
    fdd8:	0000fcc9 	.word	0x0000fcc9
    fddc:	0000fd01 	.word	0x0000fd01
    fde0:	00002e39 	.word	0x00002e39
    fde4:	00001ee1 	.word	0x00001ee1

0000fde8 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
    fde8:	b480      	push	{r7}
    fdea:	b083      	sub	sp, #12
    fdec:	af00      	add	r7, sp, #0
    fdee:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    fdf0:	687b      	ldr	r3, [r7, #4]
    fdf2:	4618      	mov	r0, r3
    fdf4:	370c      	adds	r7, #12
    fdf6:	46bd      	mov	sp, r7
    fdf8:	bc80      	pop	{r7}
    fdfa:	4770      	bx	lr

0000fdfc <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    fdfc:	b480      	push	{r7}
    fdfe:	b083      	sub	sp, #12
    fe00:	af00      	add	r7, sp, #0
    fe02:	6078      	str	r0, [r7, #4]
    fe04:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    fe06:	687b      	ldr	r3, [r7, #4]
    fe08:	683a      	ldr	r2, [r7, #0]
    fe0a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    fe0c:	687b      	ldr	r3, [r7, #4]
    fe0e:	4a04      	ldr	r2, [pc, #16]	; (fe20 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    fe10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    fe14:	687b      	ldr	r3, [r7, #4]
    fe16:	4618      	mov	r0, r3
    fe18:	370c      	adds	r7, #12
    fe1a:	46bd      	mov	sp, r7
    fe1c:	bc80      	pop	{r7}
    fe1e:	4770      	bx	lr
    fe20:	001fff00 	.word	0x001fff00

0000fe24 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    fe24:	b480      	push	{r7}
    fe26:	b083      	sub	sp, #12
    fe28:	af00      	add	r7, sp, #0
    fe2a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    fe2c:	687b      	ldr	r3, [r7, #4]
    fe2e:	4618      	mov	r0, r3
    fe30:	370c      	adds	r7, #12
    fe32:	46bd      	mov	sp, r7
    fe34:	bc80      	pop	{r7}
    fe36:	4770      	bx	lr

0000fe38 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
    fe38:	b580      	push	{r7, lr}
    fe3a:	b082      	sub	sp, #8
    fe3c:	af00      	add	r7, sp, #0
    fe3e:	6078      	str	r0, [r7, #4]
	xferDone=false;
    fe40:	687b      	ldr	r3, [r7, #4]
    fe42:	2200      	movs	r2, #0
    fe44:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
    fe46:	6878      	ldr	r0, [r7, #4]
    fe48:	4b04      	ldr	r3, [pc, #16]	; (fe5c <_ZN13N25Q256_Class4InitEv+0x24>)
    fe4a:	4798      	blx	r3
	return SelfTest();
    fe4c:	6878      	ldr	r0, [r7, #4]
    fe4e:	4b04      	ldr	r3, [pc, #16]	; (fe60 <_ZN13N25Q256_Class4InitEv+0x28>)
    fe50:	4798      	blx	r3
    fe52:	4603      	mov	r3, r0
}
    fe54:	4618      	mov	r0, r3
    fe56:	3708      	adds	r7, #8
    fe58:	46bd      	mov	sp, r7
    fe5a:	bd80      	pop	{r7, pc}
    fe5c:	0000fe65 	.word	0x0000fe65
    fe60:	00010001 	.word	0x00010001

0000fe64 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    fe64:	b590      	push	{r4, r7, lr}
    fe66:	b083      	sub	sp, #12
    fe68:	af00      	add	r7, sp, #0
    fe6a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    fe6c:	687b      	ldr	r3, [r7, #4]
    fe6e:	685b      	ldr	r3, [r3, #4]
    fe70:	4618      	mov	r0, r3
    fe72:	4b08      	ldr	r3, [pc, #32]	; (fe94 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    fe74:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    fe76:	687b      	ldr	r3, [r7, #4]
    fe78:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    fe7a:	2300      	movs	r3, #0
    fe7c:	4a06      	ldr	r2, [pc, #24]	; (fe98 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    fe7e:	4807      	ldr	r0, [pc, #28]	; (fe9c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    fe80:	4c07      	ldr	r4, [pc, #28]	; (fea0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    fe82:	47a0      	blx	r4
    fe84:	4602      	mov	r2, r0
    fe86:	687b      	ldr	r3, [r7, #4]
    fe88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    fe8c:	bf00      	nop
    fe8e:	370c      	adds	r7, #12
    fe90:	46bd      	mov	sp, r7
    fe92:	bd90      	pop	{r4, r7, pc}
    fe94:	000033c5 	.word	0x000033c5
    fe98:	0000fd39 	.word	0x0000fd39
    fe9c:	20008e08 	.word	0x20008e08
    fea0:	0000c3f5 	.word	0x0000c3f5

0000fea4 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
    fea4:	b580      	push	{r7, lr}
    fea6:	b084      	sub	sp, #16
    fea8:	af00      	add	r7, sp, #0
    feaa:	6078      	str	r0, [r7, #4]
    feac:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    feae:	687b      	ldr	r3, [r7, #4]
    feb0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    feb4:	685b      	ldr	r3, [r3, #4]
    feb6:	689b      	ldr	r3, [r3, #8]
    feb8:	687a      	ldr	r2, [r7, #4]
    feba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    febe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    fec2:	6839      	ldr	r1, [r7, #0]
    fec4:	4798      	blx	r3
    fec6:	4603      	mov	r3, r0
    fec8:	60fb      	str	r3, [r7, #12]
	return	e;
    feca:	68fb      	ldr	r3, [r7, #12]
}
    fecc:	4618      	mov	r0, r3
    fece:	3710      	adds	r7, #16
    fed0:	46bd      	mov	sp, r7
    fed2:	bd80      	pop	{r7, pc}

0000fed4 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    fed4:	b590      	push	{r4, r7, lr}
    fed6:	b087      	sub	sp, #28
    fed8:	af00      	add	r7, sp, #0
    feda:	60f8      	str	r0, [r7, #12]
    fedc:	60b9      	str	r1, [r7, #8]
    fede:	607a      	str	r2, [r7, #4]
    fee0:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    fee2:	68fb      	ldr	r3, [r7, #12]
    fee4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    fee8:	685b      	ldr	r3, [r3, #4]
    feea:	685c      	ldr	r4, [r3, #4]
    feec:	68fb      	ldr	r3, [r7, #12]
    feee:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    fef2:	683b      	ldr	r3, [r7, #0]
    fef4:	687a      	ldr	r2, [r7, #4]
    fef6:	68b9      	ldr	r1, [r7, #8]
    fef8:	47a0      	blx	r4
    fefa:	4603      	mov	r3, r0
    fefc:	617b      	str	r3, [r7, #20]
	return	w;
    fefe:	697b      	ldr	r3, [r7, #20]
}
    ff00:	4618      	mov	r0, r3
    ff02:	371c      	adds	r7, #28
    ff04:	46bd      	mov	sp, r7
    ff06:	bd90      	pop	{r4, r7, pc}

0000ff08 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    ff08:	b590      	push	{r4, r7, lr}
    ff0a:	b087      	sub	sp, #28
    ff0c:	af00      	add	r7, sp, #0
    ff0e:	60f8      	str	r0, [r7, #12]
    ff10:	60b9      	str	r1, [r7, #8]
    ff12:	607a      	str	r2, [r7, #4]
    ff14:	603b      	str	r3, [r7, #0]
	xferDone=false;
    ff16:	68fb      	ldr	r3, [r7, #12]
    ff18:	2200      	movs	r2, #0
    ff1a:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    ff1c:	68fb      	ldr	r3, [r7, #12]
    ff1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    ff22:	685b      	ldr	r3, [r3, #4]
    ff24:	681c      	ldr	r4, [r3, #0]
    ff26:	68fb      	ldr	r3, [r7, #12]
    ff28:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    ff2c:	683b      	ldr	r3, [r7, #0]
    ff2e:	687a      	ldr	r2, [r7, #4]
    ff30:	68b9      	ldr	r1, [r7, #8]
    ff32:	47a0      	blx	r4
    ff34:	4603      	mov	r3, r0
    ff36:	617b      	str	r3, [r7, #20]
	return	r;
    ff38:	697b      	ldr	r3, [r7, #20]
}
    ff3a:	4618      	mov	r0, r3
    ff3c:	371c      	adds	r7, #28
    ff3e:	46bd      	mov	sp, r7
    ff40:	bd90      	pop	{r4, r7, pc}
	...

0000ff44 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
    ff44:	b580      	push	{r7, lr}
    ff46:	b082      	sub	sp, #8
    ff48:	af00      	add	r7, sp, #0
    ff4a:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    ff4c:	687a      	ldr	r2, [r7, #4]
    ff4e:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    ff52:	f043 0310 	orr.w	r3, r3, #16
    ff56:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    ff5a:	687a      	ldr	r2, [r7, #4]
    ff5c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    ff60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ff64:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    ff68:	687a      	ldr	r2, [r7, #4]
    ff6a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    ff6e:	f36f 1305 	bfc	r3, #4, #2
    ff72:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    ff76:	687b      	ldr	r3, [r7, #4]
    ff78:	2205      	movs	r2, #5
    ff7a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    ff7e:	687b      	ldr	r3, [r7, #4]
    ff80:	2201      	movs	r2, #1
    ff82:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    ff86:	687b      	ldr	r3, [r7, #4]
    ff88:	f203 2212 	addw	r2, r3, #530	; 0x212
    ff8c:	687b      	ldr	r3, [r7, #4]
    ff8e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    ff92:	687b      	ldr	r3, [r7, #4]
    ff94:	685a      	ldr	r2, [r3, #4]
    ff96:	687b      	ldr	r3, [r7, #4]
    ff98:	f503 7305 	add.w	r3, r3, #532	; 0x214
    ff9c:	4619      	mov	r1, r3
    ff9e:	4610      	mov	r0, r2
    ffa0:	4b04      	ldr	r3, [pc, #16]	; (ffb4 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    ffa2:	4798      	blx	r3
		return status;
    ffa4:	687b      	ldr	r3, [r7, #4]
    ffa6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    ffaa:	4618      	mov	r0, r3
    ffac:	3708      	adds	r7, #8
    ffae:	46bd      	mov	sp, r7
    ffb0:	bd80      	pop	{r7, pc}
    ffb2:	bf00      	nop
    ffb4:	0000343d 	.word	0x0000343d

0000ffb8 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    ffb8:	b580      	push	{r7, lr}
    ffba:	b082      	sub	sp, #8
    ffbc:	af00      	add	r7, sp, #0
    ffbe:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    ffc0:	6878      	ldr	r0, [r7, #4]
    ffc2:	4b0e      	ldr	r3, [pc, #56]	; (fffc <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    ffc4:	4798      	blx	r3
    ffc6:	4603      	mov	r3, r0
    ffc8:	461a      	mov	r2, r3
    ffca:	687b      	ldr	r3, [r7, #4]
    ffcc:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    ffd0:	687b      	ldr	r3, [r7, #4]
    ffd2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    ffd6:	f003 0301 	and.w	r3, r3, #1
    ffda:	2b00      	cmp	r3, #0
    ffdc:	d000      	beq.n	ffe0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    ffde:	e7ef      	b.n	ffc0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    ffe0:	687b      	ldr	r3, [r7, #4]
    ffe2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    ffe6:	f003 0301 	and.w	r3, r3, #1
    ffea:	2b00      	cmp	r3, #0
    ffec:	bf0c      	ite	eq
    ffee:	2301      	moveq	r3, #1
    fff0:	2300      	movne	r3, #0
    fff2:	b2db      	uxtb	r3, r3
}
    fff4:	4618      	mov	r0, r3
    fff6:	3708      	adds	r7, #8
    fff8:	46bd      	mov	sp, r7
    fffa:	bd80      	pop	{r7, pc}
    fffc:	0000ff45 	.word	0x0000ff45

00010000 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   10000:	b590      	push	{r4, r7, lr}
   10002:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   10006:	b085      	sub	sp, #20
   10008:	af00      	add	r7, sp, #0
   1000a:	f107 0310 	add.w	r3, r7, #16
   1000e:	3b0c      	subs	r3, #12
   10010:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   10012:	f107 0310 	add.w	r3, r7, #16
   10016:	3b0c      	subs	r3, #12
   10018:	681b      	ldr	r3, [r3, #0]
   1001a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1001e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   10022:	2300      	movs	r3, #0
   10024:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10028:	f102 020c 	add.w	r2, r2, #12
   1002c:	6013      	str	r3, [r2, #0]
   1002e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10032:	f103 030c 	add.w	r3, r3, #12
   10036:	681b      	ldr	r3, [r3, #0]
   10038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1003c:	d22f      	bcs.n	1009e <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   1003e:	4b60      	ldr	r3, [pc, #384]	; (101c0 <STACK_SIZE+0x1c0>)
   10040:	4798      	blx	r3
   10042:	4603      	mov	r3, r0
   10044:	b2d9      	uxtb	r1, r3
   10046:	f107 0310 	add.w	r3, r7, #16
   1004a:	3b08      	subs	r3, #8
   1004c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10050:	f102 020c 	add.w	r2, r2, #12
   10054:	6812      	ldr	r2, [r2, #0]
   10056:	4413      	add	r3, r2
   10058:	460a      	mov	r2, r1
   1005a:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   1005c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10060:	f103 030c 	add.w	r3, r3, #12
   10064:	681b      	ldr	r3, [r3, #0]
   10066:	b2db      	uxtb	r3, r3
   10068:	425b      	negs	r3, r3
   1006a:	b2d9      	uxtb	r1, r3
   1006c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   10070:	f103 0310 	add.w	r3, r3, #16
   10074:	3b08      	subs	r3, #8
   10076:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1007a:	f102 020c 	add.w	r2, r2, #12
   1007e:	6812      	ldr	r2, [r2, #0]
   10080:	4413      	add	r3, r2
   10082:	460a      	mov	r2, r1
   10084:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   10086:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1008a:	f103 030c 	add.w	r3, r3, #12
   1008e:	681b      	ldr	r3, [r3, #0]
   10090:	3301      	adds	r3, #1
   10092:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10096:	f102 020c 	add.w	r2, r2, #12
   1009a:	6013      	str	r3, [r2, #0]
   1009c:	e7c7      	b.n	1002e <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   1009e:	f107 0310 	add.w	r3, r7, #16
   100a2:	3b0c      	subs	r3, #12
   100a4:	681b      	ldr	r3, [r3, #0]
   100a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   100aa:	f107 0310 	add.w	r3, r7, #16
   100ae:	3b0c      	subs	r3, #12
   100b0:	4611      	mov	r1, r2
   100b2:	6818      	ldr	r0, [r3, #0]
   100b4:	4b43      	ldr	r3, [pc, #268]	; (101c4 <STACK_SIZE+0x1c4>)
   100b6:	4798      	blx	r3
	WaitOnBusy();
   100b8:	f107 0310 	add.w	r3, r7, #16
   100bc:	3b0c      	subs	r3, #12
   100be:	6818      	ldr	r0, [r3, #0]
   100c0:	4b41      	ldr	r3, [pc, #260]	; (101c8 <STACK_SIZE+0x1c8>)
   100c2:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   100c4:	f107 0310 	add.w	r3, r7, #16
   100c8:	3b0c      	subs	r3, #12
   100ca:	681b      	ldr	r3, [r3, #0]
   100cc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   100d0:	f107 0110 	add.w	r1, r7, #16
   100d4:	3908      	subs	r1, #8
   100d6:	f107 0010 	add.w	r0, r7, #16
   100da:	380c      	subs	r0, #12
   100dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   100e0:	6800      	ldr	r0, [r0, #0]
   100e2:	4c3a      	ldr	r4, [pc, #232]	; (101cc <STACK_SIZE+0x1cc>)
   100e4:	47a0      	blx	r4
	WaitOnBusy();
   100e6:	f107 0310 	add.w	r3, r7, #16
   100ea:	3b0c      	subs	r3, #12
   100ec:	6818      	ldr	r0, [r3, #0]
   100ee:	4b36      	ldr	r3, [pc, #216]	; (101c8 <STACK_SIZE+0x1c8>)
   100f0:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   100f2:	f107 0310 	add.w	r3, r7, #16
   100f6:	3b0c      	subs	r3, #12
   100f8:	681b      	ldr	r3, [r3, #0]
   100fa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   100fe:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   10102:	f101 0110 	add.w	r1, r1, #16
   10106:	3908      	subs	r1, #8
   10108:	f107 0010 	add.w	r0, r7, #16
   1010c:	380c      	subs	r0, #12
   1010e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10112:	6800      	ldr	r0, [r0, #0]
   10114:	4c2e      	ldr	r4, [pc, #184]	; (101d0 <STACK_SIZE+0x1d0>)
   10116:	47a0      	blx	r4
	WaitOnBusy();
   10118:	f107 0310 	add.w	r3, r7, #16
   1011c:	3b0c      	subs	r3, #12
   1011e:	6818      	ldr	r0, [r3, #0]
   10120:	4b29      	ldr	r3, [pc, #164]	; (101c8 <STACK_SIZE+0x1c8>)
   10122:	4798      	blx	r3
	isOK	 = true;
   10124:	f107 0310 	add.w	r3, r7, #16
   10128:	3b0c      	subs	r3, #12
   1012a:	681b      	ldr	r3, [r3, #0]
   1012c:	2201      	movs	r2, #1
   1012e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   10132:	2300      	movs	r3, #0
   10134:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10138:	f102 0208 	add.w	r2, r2, #8
   1013c:	6013      	str	r3, [r2, #0]
   1013e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10142:	f103 0308 	add.w	r3, r3, #8
   10146:	681b      	ldr	r3, [r3, #0]
   10148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1014c:	da2b      	bge.n	101a6 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1014e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   10152:	f103 0310 	add.w	r3, r3, #16
   10156:	3b08      	subs	r3, #8
   10158:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1015c:	f102 0208 	add.w	r2, r2, #8
   10160:	6812      	ldr	r2, [r2, #0]
   10162:	4413      	add	r3, r2
   10164:	781a      	ldrb	r2, [r3, #0]
   10166:	f107 0310 	add.w	r3, r7, #16
   1016a:	3b08      	subs	r3, #8
   1016c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   10170:	f101 0108 	add.w	r1, r1, #8
   10174:	6809      	ldr	r1, [r1, #0]
   10176:	440b      	add	r3, r1
   10178:	781b      	ldrb	r3, [r3, #0]
   1017a:	429a      	cmp	r2, r3
   1017c:	d007      	beq.n	1018e <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   1017e:	f107 0310 	add.w	r3, r7, #16
   10182:	3b0c      	subs	r3, #12
   10184:	681b      	ldr	r3, [r3, #0]
   10186:	2200      	movs	r2, #0
   10188:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1018c:	e00b      	b.n	101a6 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1018e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10192:	f103 0308 	add.w	r3, r3, #8
   10196:	681b      	ldr	r3, [r3, #0]
   10198:	3301      	adds	r3, #1
   1019a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1019e:	f102 0208 	add.w	r2, r2, #8
   101a2:	6013      	str	r3, [r2, #0]
   101a4:	e7cb      	b.n	1013e <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   101a6:	f107 0310 	add.w	r3, r7, #16
   101aa:	3b0c      	subs	r3, #12
   101ac:	681b      	ldr	r3, [r3, #0]
   101ae:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   101b2:	4618      	mov	r0, r3
   101b4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   101b8:	3714      	adds	r7, #20
   101ba:	46bd      	mov	sp, r7
   101bc:	bd90      	pop	{r4, r7, pc}
   101be:	bf00      	nop
   101c0:	00010c61 	.word	0x00010c61
   101c4:	0000fea5 	.word	0x0000fea5
   101c8:	0000ffb9 	.word	0x0000ffb9
   101cc:	0000fed5 	.word	0x0000fed5
   101d0:	0000ff09 	.word	0x0000ff09

000101d4 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   101d4:	b580      	push	{r7, lr}
   101d6:	b082      	sub	sp, #8
   101d8:	af00      	add	r7, sp, #0
   101da:	6078      	str	r0, [r7, #4]
   101dc:	6039      	str	r1, [r7, #0]
   101de:	687b      	ldr	r3, [r7, #4]
   101e0:	2b01      	cmp	r3, #1
   101e2:	d10d      	bne.n	10200 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   101e4:	683b      	ldr	r3, [r7, #0]
   101e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   101ea:	4293      	cmp	r3, r2
   101ec:	d108      	bne.n	10200 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   101ee:	4906      	ldr	r1, [pc, #24]	; (10208 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   101f0:	4806      	ldr	r0, [pc, #24]	; (1020c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   101f2:	4b07      	ldr	r3, [pc, #28]	; (10210 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   101f4:	4798      	blx	r3
   101f6:	4a07      	ldr	r2, [pc, #28]	; (10214 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   101f8:	4907      	ldr	r1, [pc, #28]	; (10218 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   101fa:	4804      	ldr	r0, [pc, #16]	; (1020c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   101fc:	4b07      	ldr	r3, [pc, #28]	; (1021c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   101fe:	4798      	blx	r3
   10200:	bf00      	nop
   10202:	3708      	adds	r7, #8
   10204:	46bd      	mov	sp, r7
   10206:	bd80      	pop	{r7, pc}
   10208:	2000aad0 	.word	0x2000aad0
   1020c:	20008e18 	.word	0x20008e18
   10210:	0000fdfd 	.word	0x0000fdfd
   10214:	20000000 	.word	0x20000000
   10218:	0000fe25 	.word	0x0000fe25
   1021c:	00010a0d 	.word	0x00010a0d

00010220 <_GLOBAL__sub_I_ptrN25Q256Class>:
   10220:	b580      	push	{r7, lr}
   10222:	af00      	add	r7, sp, #0
   10224:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10228:	2001      	movs	r0, #1
   1022a:	4b01      	ldr	r3, [pc, #4]	; (10230 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1022c:	4798      	blx	r3
   1022e:	bd80      	pop	{r7, pc}
   10230:	000101d5 	.word	0x000101d5

00010234 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   10234:	b510      	push	{r4, lr}
   10236:	4604      	mov	r4, r0
   10238:	4b06      	ldr	r3, [pc, #24]	; (10254 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   1023a:	f840 3bb4 	str.w	r3, [r0], #180
   1023e:	4b06      	ldr	r3, [pc, #24]	; (10258 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   10240:	4798      	blx	r3
   10242:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10246:	4b05      	ldr	r3, [pc, #20]	; (1025c <_ZN18Event_Logger_ClassD1Ev+0x28>)
   10248:	4798      	blx	r3
   1024a:	4620      	mov	r0, r4
   1024c:	4b04      	ldr	r3, [pc, #16]	; (10260 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   1024e:	4798      	blx	r3
{
} //~Event_Logger_Class
   10250:	4620      	mov	r0, r4
   10252:	bd10      	pop	{r4, pc}
   10254:	000113dc 	.word	0x000113dc
   10258:	00010589 	.word	0x00010589
   1025c:	000104f7 	.word	0x000104f7
   10260:	000106f5 	.word	0x000106f5

00010264 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   10264:	b510      	push	{r4, lr}
   10266:	4604      	mov	r4, r0
   10268:	4b11      	ldr	r3, [pc, #68]	; (102b0 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   1026a:	4798      	blx	r3
   1026c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10270:	4b10      	ldr	r3, [pc, #64]	; (102b4 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   10272:	4798      	blx	r3
   10274:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   10278:	4b0f      	ldr	r3, [pc, #60]	; (102b8 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   1027a:	4798      	blx	r3
   1027c:	4b0f      	ldr	r3, [pc, #60]	; (102bc <_ZN18Event_Logger_ClassC1Ev+0x58>)
   1027e:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   10280:	230a      	movs	r3, #10
   10282:	f884 36f7 	strb.w	r3, [r4, #1783]	; 0x6f7
	cal=&staticClock;
   10286:	4b0e      	ldr	r3, [pc, #56]	; (102c0 <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   10288:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
   1028c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   10290:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
   10294:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   10298:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
   1029c:	f503 7388 	add.w	r3, r3, #272	; 0x110
   102a0:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
   102a4:	4b07      	ldr	r3, [pc, #28]	; (102c4 <_ZN18Event_Logger_ClassC1Ev+0x60>)
   102a6:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
   102aa:	4620      	mov	r0, r4
   102ac:	bd10      	pop	{r4, pc}
   102ae:	bf00      	nop
   102b0:	00010685 	.word	0x00010685
   102b4:	000104f5 	.word	0x000104f5
   102b8:	00010539 	.word	0x00010539
   102bc:	000113dc 	.word	0x000113dc
   102c0:	20009048 	.word	0x20009048
   102c4:	20000210 	.word	0x20000210

000102c8 <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   102c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102cc:	4604      	mov	r4, r0
   102ce:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   102d0:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
   102d4:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
   102d8:	6803      	ldr	r3, [r0, #0]
   102da:	681b      	ldr	r3, [r3, #0]
   102dc:	4631      	mov	r1, r6
   102de:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   102e0:	f204 67bc 	addw	r7, r4, #1724	; 0x6bc
   102e4:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
   102e8:	681a      	ldr	r2, [r3, #0]
   102ea:	685b      	ldr	r3, [r3, #4]
   102ec:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   102f0:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   102f2:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   102f6:	4629      	mov	r1, r5
   102f8:	4640      	mov	r0, r8
   102fa:	4b32      	ldr	r3, [pc, #200]	; (103c4 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   102fc:	4798      	blx	r3
   102fe:	f884 06f8 	strb.w	r0, [r4, #1784]	; 0x6f8
	if (semiColonPosition>0)
   10302:	b130      	cbz	r0, 10312 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   10304:	2807      	cmp	r0, #7
   10306:	dc2d      	bgt.n	10364 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   10308:	4602      	mov	r2, r0
   1030a:	4629      	mov	r1, r5
   1030c:	4638      	mov	r0, r7
   1030e:	4b2e      	ldr	r3, [pc, #184]	; (103c8 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   10310:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   10312:	4628      	mov	r0, r5
   10314:	4b2d      	ldr	r3, [pc, #180]	; (103cc <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   10316:	4798      	blx	r3
   10318:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
   1031c:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   1031e:	2a33      	cmp	r2, #51	; 0x33
   10320:	dd26      	ble.n	10370 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   10322:	4629      	mov	r1, r5
   10324:	4640      	mov	r0, r8
   10326:	4b2a      	ldr	r3, [pc, #168]	; (103d0 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   10328:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   1032a:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   1032e:	4429      	add	r1, r5
   10330:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
   10334:	f101 0230 	add.w	r2, r1, #48	; 0x30
   10338:	f8d1 e000 	ldr.w	lr, [r1]
   1033c:	684f      	ldr	r7, [r1, #4]
   1033e:	688d      	ldr	r5, [r1, #8]
   10340:	68c8      	ldr	r0, [r1, #12]
   10342:	f8c3 e000 	str.w	lr, [r3]
   10346:	605f      	str	r7, [r3, #4]
   10348:	609d      	str	r5, [r3, #8]
   1034a:	60d8      	str	r0, [r3, #12]
   1034c:	3110      	adds	r1, #16
   1034e:	3310      	adds	r3, #16
   10350:	4291      	cmp	r1, r2
   10352:	d1f1      	bne.n	10338 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   10354:	8808      	ldrh	r0, [r1, #0]
   10356:	788a      	ldrb	r2, [r1, #2]
   10358:	8018      	strh	r0, [r3, #0]
   1035a:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   1035c:	2333      	movs	r3, #51	; 0x33
   1035e:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
   10362:	e012      	b.n	1038a <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   10364:	682a      	ldr	r2, [r5, #0]
   10366:	686b      	ldr	r3, [r5, #4]
   10368:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   1036c:	607b      	str	r3, [r7, #4]
   1036e:	e7d0      	b.n	10312 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   10370:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   10374:	4429      	add	r1, r5
   10376:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
   1037a:	4b13      	ldr	r3, [pc, #76]	; (103c8 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   1037c:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   1037e:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
   10382:	4423      	add	r3, r4
   10384:	220a      	movs	r2, #10
   10386:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   1038a:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   1038e:	6803      	ldr	r3, [r0, #0]
   10390:	685b      	ldr	r3, [r3, #4]
   10392:	4631      	mov	r1, r6
   10394:	4798      	blx	r3
   10396:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
   1039a:	b978      	cbnz	r0, 103bc <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   1039c:	f04f 33ff 	mov.w	r3, #4294967295
   103a0:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,text_length+1);
   103a4:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
   103a8:	3201      	adds	r2, #1
   103aa:	b2d2      	uxtb	r2, r2
   103ac:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
   103b0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   103b4:	4b07      	ldr	r3, [pc, #28]	; (103d4 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   103b6:	4798      	blx	r3
   103b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   103bc:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
   103c0:	e7f0      	b.n	103a4 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   103c2:	bf00      	nop
   103c4:	00010519 	.word	0x00010519
   103c8:	00010a91 	.word	0x00010a91
   103cc:	00010cc1 	.word	0x00010cc1
   103d0:	000104f9 	.word	0x000104f9
   103d4:	000105ad 	.word	0x000105ad

000103d8 <_ZN18Event_Logger_Class9SaveEventEPKc>:
	}
	SaveEvent(logger_module);
	
}

void Event_Logger_Class::SaveEvent(char const * text){
   103d8:	b508      	push	{r3, lr}
	
	SaveEvent((uint8_t*)text);
   103da:	4b01      	ldr	r3, [pc, #4]	; (103e0 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   103dc:	4798      	blx	r3
   103de:	bd08      	pop	{r3, pc}
   103e0:	000102c9 	.word	0x000102c9

000103e4 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   103e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   103e8:	4c30      	ldr	r4, [pc, #192]	; (104ac <_GLOBAL__sub_I_local_info_text+0xc8>)
   103ea:	f504 758c 	add.w	r5, r4, #280	; 0x118
   103ee:	4930      	ldr	r1, [pc, #192]	; (104b0 <_GLOBAL__sub_I_local_info_text+0xcc>)
   103f0:	4628      	mov	r0, r5
   103f2:	4f30      	ldr	r7, [pc, #192]	; (104b4 <_GLOBAL__sub_I_local_info_text+0xd0>)
   103f4:	47b8      	blx	r7
   103f6:	4e30      	ldr	r6, [pc, #192]	; (104b8 <_GLOBAL__sub_I_local_info_text+0xd4>)
   103f8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 104f0 <_GLOBAL__sub_I_local_info_text+0x10c>
   103fc:	4632      	mov	r2, r6
   103fe:	4641      	mov	r1, r8
   10400:	4628      	mov	r0, r5
   10402:	4d2e      	ldr	r5, [pc, #184]	; (104bc <_GLOBAL__sub_I_local_info_text+0xd8>)
   10404:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   10406:	f504 799c 	add.w	r9, r4, #312	; 0x138
   1040a:	492d      	ldr	r1, [pc, #180]	; (104c0 <_GLOBAL__sub_I_local_info_text+0xdc>)
   1040c:	4648      	mov	r0, r9
   1040e:	47b8      	blx	r7
   10410:	4632      	mov	r2, r6
   10412:	4641      	mov	r1, r8
   10414:	4648      	mov	r0, r9
   10416:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   10418:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   1041c:	4929      	ldr	r1, [pc, #164]	; (104c4 <_GLOBAL__sub_I_local_info_text+0xe0>)
   1041e:	4648      	mov	r0, r9
   10420:	47b8      	blx	r7
   10422:	4632      	mov	r2, r6
   10424:	4641      	mov	r1, r8
   10426:	4648      	mov	r0, r9
   10428:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1042a:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   1042e:	4926      	ldr	r1, [pc, #152]	; (104c8 <_GLOBAL__sub_I_local_info_text+0xe4>)
   10430:	4648      	mov	r0, r9
   10432:	47b8      	blx	r7
   10434:	4632      	mov	r2, r6
   10436:	4641      	mov	r1, r8
   10438:	4648      	mov	r0, r9
   1043a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1043c:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   10440:	4922      	ldr	r1, [pc, #136]	; (104cc <_GLOBAL__sub_I_local_info_text+0xe8>)
   10442:	4648      	mov	r0, r9
   10444:	47b8      	blx	r7
   10446:	4632      	mov	r2, r6
   10448:	4641      	mov	r1, r8
   1044a:	4648      	mov	r0, r9
   1044c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1044e:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   10452:	491f      	ldr	r1, [pc, #124]	; (104d0 <_GLOBAL__sub_I_local_info_text+0xec>)
   10454:	4648      	mov	r0, r9
   10456:	47b8      	blx	r7
   10458:	4632      	mov	r2, r6
   1045a:	4641      	mov	r1, r8
   1045c:	4648      	mov	r0, r9
   1045e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10460:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   10464:	491b      	ldr	r1, [pc, #108]	; (104d4 <_GLOBAL__sub_I_local_info_text+0xf0>)
   10466:	4648      	mov	r0, r9
   10468:	47b8      	blx	r7
   1046a:	4632      	mov	r2, r6
   1046c:	4641      	mov	r1, r8
   1046e:	4648      	mov	r0, r9
   10470:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   10472:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   10476:	4918      	ldr	r1, [pc, #96]	; (104d8 <_GLOBAL__sub_I_local_info_text+0xf4>)
   10478:	4648      	mov	r0, r9
   1047a:	47b8      	blx	r7
   1047c:	4632      	mov	r2, r6
   1047e:	4641      	mov	r1, r8
   10480:	4648      	mov	r0, r9
   10482:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   10484:	4915      	ldr	r1, [pc, #84]	; (104dc <_GLOBAL__sub_I_local_info_text+0xf8>)
   10486:	4620      	mov	r0, r4
   10488:	4b15      	ldr	r3, [pc, #84]	; (104e0 <_GLOBAL__sub_I_local_info_text+0xfc>)
   1048a:	4798      	blx	r3
   1048c:	4632      	mov	r2, r6
   1048e:	4915      	ldr	r1, [pc, #84]	; (104e4 <_GLOBAL__sub_I_local_info_text+0x100>)
   10490:	4620      	mov	r0, r4
   10492:	47a8      	blx	r5
 Event_Logger_Class	logger;
   10494:	f504 7406 	add.w	r4, r4, #536	; 0x218
   10498:	4620      	mov	r0, r4
   1049a:	4b13      	ldr	r3, [pc, #76]	; (104e8 <_GLOBAL__sub_I_local_info_text+0x104>)
   1049c:	4798      	blx	r3
   1049e:	4632      	mov	r2, r6
   104a0:	4912      	ldr	r1, [pc, #72]	; (104ec <_GLOBAL__sub_I_local_info_text+0x108>)
   104a2:	4620      	mov	r0, r4
   104a4:	47a8      	blx	r5
   104a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   104aa:	bf00      	nop
   104ac:	20009048 	.word	0x20009048
   104b0:	2000aa40 	.word	0x2000aa40
   104b4:	0000e639 	.word	0x0000e639
   104b8:	20000000 	.word	0x20000000
   104bc:	00010a0d 	.word	0x00010a0d
   104c0:	2000aad4 	.word	0x2000aad4
   104c4:	2000abf8 	.word	0x2000abf8
   104c8:	2000aaf4 	.word	0x2000aaf4
   104cc:	2000abb8 	.word	0x2000abb8
   104d0:	2000abd8 	.word	0x2000abd8
   104d4:	2000aab0 	.word	0x2000aab0
   104d8:	2000ab50 	.word	0x2000ab50
   104dc:	2000ac18 	.word	0x2000ac18
   104e0:	000106b9 	.word	0x000106b9
   104e4:	000106f5 	.word	0x000106f5
   104e8:	00010265 	.word	0x00010265
   104ec:	00010235 	.word	0x00010235
   104f0:	0000e671 	.word	0x0000e671

000104f4 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   104f4:	4770      	bx	lr

000104f6 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   104f6:	4770      	bx	lr

000104f8 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   104f8:	b538      	push	{r3, r4, r5, lr}
   104fa:	4605      	mov	r5, r0
   104fc:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   104fe:	4608      	mov	r0, r1
   10500:	4b04      	ldr	r3, [pc, #16]	; (10514 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   10502:	4798      	blx	r3
   10504:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   10506:	b2c0      	uxtb	r0, r0
   10508:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   1050a:	bfc4      	itt	gt
   1050c:	230a      	movgt	r3, #10
   1050e:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   10512:	bd38      	pop	{r3, r4, r5, pc}
   10514:	00010cc1 	.word	0x00010cc1

00010518 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   10518:	7808      	ldrb	r0, [r1, #0]
   1051a:	b148      	cbz	r0, 10530 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   1051c:	283a      	cmp	r0, #58	; 0x3a
   1051e:	d009      	beq.n	10534 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   10520:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   10522:	3301      	adds	r3, #1
   10524:	b2db      	uxtb	r3, r3
   10526:	5cc8      	ldrb	r0, [r1, r3]
   10528:	b118      	cbz	r0, 10532 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   1052a:	283a      	cmp	r0, #58	; 0x3a
   1052c:	d1f9      	bne.n	10522 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   1052e:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   10530:	4770      	bx	lr
   10532:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   10534:	2000      	movs	r0, #0
   10536:	4770      	bx	lr

00010538 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   10538:	b510      	push	{r4, lr}
   1053a:	4604      	mov	r4, r0
   1053c:	4b0d      	ldr	r3, [pc, #52]	; (10574 <_ZN15DataLoger_ClassC1Ev+0x3c>)
   1053e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   10540:	f44f 7200 	mov.w	r2, #512	; 0x200
   10544:	2100      	movs	r1, #0
   10546:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   1054a:	4b0b      	ldr	r3, [pc, #44]	; (10578 <_ZN15DataLoger_ClassC1Ev+0x40>)
   1054c:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   1054e:	2300      	movs	r3, #0
   10550:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   10554:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   10558:	230a      	movs	r3, #10
   1055a:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   1055e:	4a07      	ldr	r2, [pc, #28]	; (1057c <_ZN15DataLoger_ClassC1Ev+0x44>)
   10560:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   10564:	4b06      	ldr	r3, [pc, #24]	; (10580 <_ZN15DataLoger_ClassC1Ev+0x48>)
   10566:	4907      	ldr	r1, [pc, #28]	; (10584 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   10568:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   1056c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
   10570:	4620      	mov	r0, r4
   10572:	bd10      	pop	{r4, pc}
   10574:	0000fde9 	.word	0x0000fde9
   10578:	00010bc5 	.word	0x00010bc5
   1057c:	20009980 	.word	0x20009980
   10580:	20009260 	.word	0x20009260
   10584:	2000a980 	.word	0x2000a980

00010588 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   10588:	b510      	push	{r4, lr}
   1058a:	4604      	mov	r4, r0
   1058c:	4b01      	ldr	r3, [pc, #4]	; (10594 <_ZN15DataLoger_ClassD1Ev+0xc>)
   1058e:	4798      	blx	r3
{
} //~DataLoger_Class
   10590:	4620      	mov	r0, r4
   10592:	bd10      	pop	{r4, pc}
   10594:	0000fe25 	.word	0x0000fe25

00010598 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   10598:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   1059c:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   1059e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   105a2:	bf94      	ite	ls
   105a4:	2000      	movls	r0, #0
   105a6:	2001      	movhi	r0, #1
   105a8:	4770      	bx	lr
	...

000105ac <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   105ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ae:	b087      	sub	sp, #28
   105b0:	4604      	mov	r4, r0
   105b2:	460e      	mov	r6, r1
	if (len==0xff)
   105b4:	2aff      	cmp	r2, #255	; 0xff
   105b6:	d018      	beq.n	105ea <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   105b8:	4615      	mov	r5, r2
		if (IsStackFull())
   105ba:	4b29      	ldr	r3, [pc, #164]	; (10660 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   105bc:	4798      	blx	r3
   105be:	2800      	cmp	r0, #0
   105c0:	d13b      	bne.n	1063a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   105c2:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   105c6:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   105ca:	f105 020c 	add.w	r2, r5, #12
   105ce:	4631      	mov	r1, r6
   105d0:	4418      	add	r0, r3
   105d2:	4b24      	ldr	r3, [pc, #144]	; (10664 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   105d4:	4798      	blx	r3
		stackValue+=12+len;
   105d6:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   105da:	320c      	adds	r2, #12
   105dc:	442a      	add	r2, r5
   105de:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   105e2:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   105e6:	b007      	add	sp, #28
   105e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   105ea:	466d      	mov	r5, sp
   105ec:	4f1e      	ldr	r7, [pc, #120]	; (10668 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   105ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   105f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   105f2:	e897 0003 	ldmia.w	r7, {r0, r1}
   105f6:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   105fa:	4668      	mov	r0, sp
   105fc:	4b1b      	ldr	r3, [pc, #108]	; (1066c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   105fe:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   10600:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   10604:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   10608:	b2c2      	uxtb	r2, r0
   1060a:	320d      	adds	r2, #13
   1060c:	4631      	mov	r1, r6
   1060e:	18e8      	adds	r0, r5, r3
   10610:	4b14      	ldr	r3, [pc, #80]	; (10664 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   10612:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   10614:	4d16      	ldr	r5, [pc, #88]	; (10670 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   10616:	4629      	mov	r1, r5
   10618:	4816      	ldr	r0, [pc, #88]	; (10674 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   1061a:	4b17      	ldr	r3, [pc, #92]	; (10678 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   1061c:	4798      	blx	r3
   1061e:	4b17      	ldr	r3, [pc, #92]	; (1067c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   10620:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   10624:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   10628:	2100      	movs	r1, #0
   1062a:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   1062e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10632:	4628      	mov	r0, r5
   10634:	4b12      	ldr	r3, [pc, #72]	; (10680 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   10636:	4798      	blx	r3
   10638:	e7d3      	b.n	105e2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   1063a:	4f0d      	ldr	r7, [pc, #52]	; (10670 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   1063c:	4639      	mov	r1, r7
   1063e:	480d      	ldr	r0, [pc, #52]	; (10674 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   10640:	4b0d      	ldr	r3, [pc, #52]	; (10678 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   10642:	4798      	blx	r3
   10644:	4b0d      	ldr	r3, [pc, #52]	; (1067c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   10646:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   1064a:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   1064e:	2100      	movs	r1, #0
   10650:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   10654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10658:	4638      	mov	r0, r7
   1065a:	4b09      	ldr	r3, [pc, #36]	; (10680 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   1065c:	4798      	blx	r3
   1065e:	e7b0      	b.n	105c2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   10660:	00010599 	.word	0x00010599
   10664:	00010a91 	.word	0x00010a91
   10668:	000113e4 	.word	0x000113e4
   1066c:	00010cc1 	.word	0x00010cc1
   10670:	20009980 	.word	0x20009980
   10674:	20002ae8 	.word	0x20002ae8
   10678:	0000f715 	.word	0x0000f715
   1067c:	2000aa78 	.word	0x2000aa78
   10680:	00010bc5 	.word	0x00010bc5

00010684 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   10684:	b580      	push	{r7, lr}
   10686:	b082      	sub	sp, #8
   10688:	af00      	add	r7, sp, #0
   1068a:	6078      	str	r0, [r7, #4]
   1068c:	687b      	ldr	r3, [r7, #4]
   1068e:	4618      	mov	r0, r3
   10690:	4b06      	ldr	r3, [pc, #24]	; (106ac <_ZN14Calendar_ClassC1Ev+0x28>)
   10692:	4798      	blx	r3
   10694:	4a06      	ldr	r2, [pc, #24]	; (106b0 <_ZN14Calendar_ClassC1Ev+0x2c>)
   10696:	687b      	ldr	r3, [r7, #4]
   10698:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   1069a:	4a06      	ldr	r2, [pc, #24]	; (106b4 <_ZN14Calendar_ClassC1Ev+0x30>)
   1069c:	687b      	ldr	r3, [r7, #4]
   1069e:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   106a0:	687b      	ldr	r3, [r7, #4]
   106a2:	4618      	mov	r0, r3
   106a4:	3708      	adds	r7, #8
   106a6:	46bd      	mov	sp, r7
   106a8:	bd80      	pop	{r7, pc}
   106aa:	bf00      	nop
   106ac:	000109cd 	.word	0x000109cd
   106b0:	00011410 	.word	0x00011410
   106b4:	2000a988 	.word	0x2000a988

000106b8 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   106b8:	b580      	push	{r7, lr}
   106ba:	b082      	sub	sp, #8
   106bc:	af00      	add	r7, sp, #0
   106be:	6078      	str	r0, [r7, #4]
   106c0:	6039      	str	r1, [r7, #0]
   106c2:	687b      	ldr	r3, [r7, #4]
   106c4:	4618      	mov	r0, r3
   106c6:	4b08      	ldr	r3, [pc, #32]	; (106e8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   106c8:	4798      	blx	r3
   106ca:	4a08      	ldr	r2, [pc, #32]	; (106ec <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   106cc:	687b      	ldr	r3, [r7, #4]
   106ce:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   106d0:	687b      	ldr	r3, [r7, #4]
   106d2:	683a      	ldr	r2, [r7, #0]
   106d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   106d8:	4a05      	ldr	r2, [pc, #20]	; (106f0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   106da:	687b      	ldr	r3, [r7, #4]
   106dc:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   106de:	687b      	ldr	r3, [r7, #4]
   106e0:	4618      	mov	r0, r3
   106e2:	3708      	adds	r7, #8
   106e4:	46bd      	mov	sp, r7
   106e6:	bd80      	pop	{r7, pc}
   106e8:	000109cd 	.word	0x000109cd
   106ec:	00011410 	.word	0x00011410
   106f0:	2000a988 	.word	0x2000a988

000106f4 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   106f4:	b580      	push	{r7, lr}
   106f6:	b082      	sub	sp, #8
   106f8:	af00      	add	r7, sp, #0
   106fa:	6078      	str	r0, [r7, #4]
   106fc:	4a05      	ldr	r2, [pc, #20]	; (10714 <_ZN14Calendar_ClassD1Ev+0x20>)
   106fe:	687b      	ldr	r3, [r7, #4]
   10700:	601a      	str	r2, [r3, #0]
   10702:	687b      	ldr	r3, [r7, #4]
   10704:	4618      	mov	r0, r3
   10706:	4b04      	ldr	r3, [pc, #16]	; (10718 <_ZN14Calendar_ClassD1Ev+0x24>)
   10708:	4798      	blx	r3
{
} //~Calendar_Class
   1070a:	687b      	ldr	r3, [r7, #4]
   1070c:	4618      	mov	r0, r3
   1070e:	3708      	adds	r7, #8
   10710:	46bd      	mov	sp, r7
   10712:	bd80      	pop	{r7, pc}
   10714:	00011410 	.word	0x00011410
   10718:	000109ed 	.word	0x000109ed

0001071c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1071c:	b580      	push	{r7, lr}
   1071e:	b082      	sub	sp, #8
   10720:	af00      	add	r7, sp, #0
   10722:	6078      	str	r0, [r7, #4]
   10724:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   10726:	687b      	ldr	r3, [r7, #4]
   10728:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1072c:	6839      	ldr	r1, [r7, #0]
   1072e:	4618      	mov	r0, r3
   10730:	4b03      	ldr	r3, [pc, #12]	; (10740 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   10732:	4798      	blx	r3
   10734:	4603      	mov	r3, r0
}
   10736:	4618      	mov	r0, r3
   10738:	3708      	adds	r7, #8
   1073a:	46bd      	mov	sp, r7
   1073c:	bd80      	pop	{r7, pc}
   1073e:	bf00      	nop
   10740:	00002cb1 	.word	0x00002cb1

00010744 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   10744:	b480      	push	{r7}
   10746:	b083      	sub	sp, #12
   10748:	af00      	add	r7, sp, #0
   1074a:	6078      	str	r0, [r7, #4]
   1074c:	460b      	mov	r3, r1
   1074e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   10750:	887b      	ldrh	r3, [r7, #2]
   10752:	f003 0303 	and.w	r3, r3, #3
   10756:	2b00      	cmp	r3, #0
   10758:	d001      	beq.n	1075e <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1075a:	2300      	movs	r3, #0
   1075c:	e000      	b.n	10760 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   1075e:	2301      	movs	r3, #1
	}
}
   10760:	4618      	mov	r0, r3
   10762:	370c      	adds	r7, #12
   10764:	46bd      	mov	sp, r7
   10766:	bc80      	pop	{r7}
   10768:	4770      	bx	lr
	...

0001076c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1076c:	b580      	push	{r7, lr}
   1076e:	b086      	sub	sp, #24
   10770:	af00      	add	r7, sp, #0
   10772:	6078      	str	r0, [r7, #4]
   10774:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   10776:	2300      	movs	r3, #0
   10778:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1077a:	2300      	movs	r3, #0
   1077c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1077e:	683b      	ldr	r3, [r7, #0]
   10780:	88db      	ldrh	r3, [r3, #6]
   10782:	b2da      	uxtb	r2, r3
   10784:	687b      	ldr	r3, [r7, #4]
   10786:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1078a:	699b      	ldr	r3, [r3, #24]
   1078c:	b2db      	uxtb	r3, r3
   1078e:	1ad3      	subs	r3, r2, r3
   10790:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   10792:	683b      	ldr	r3, [r7, #0]
   10794:	795b      	ldrb	r3, [r3, #5]
   10796:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   10798:	683b      	ldr	r3, [r7, #0]
   1079a:	791b      	ldrb	r3, [r3, #4]
   1079c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   1079e:	683b      	ldr	r3, [r7, #0]
   107a0:	789b      	ldrb	r3, [r3, #2]
   107a2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   107a4:	683b      	ldr	r3, [r7, #0]
   107a6:	785b      	ldrb	r3, [r3, #1]
   107a8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   107aa:	683b      	ldr	r3, [r7, #0]
   107ac:	781b      	ldrb	r3, [r3, #0]
   107ae:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   107b0:	2300      	movs	r3, #0
   107b2:	613b      	str	r3, [r7, #16]
   107b4:	7bfa      	ldrb	r2, [r7, #15]
   107b6:	693b      	ldr	r3, [r7, #16]
   107b8:	429a      	cmp	r2, r3
   107ba:	d91e      	bls.n	107fa <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   107bc:	687b      	ldr	r3, [r7, #4]
   107be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   107c2:	699b      	ldr	r3, [r3, #24]
   107c4:	b29a      	uxth	r2, r3
   107c6:	693b      	ldr	r3, [r7, #16]
   107c8:	b29b      	uxth	r3, r3
   107ca:	4413      	add	r3, r2
   107cc:	b29b      	uxth	r3, r3
   107ce:	4619      	mov	r1, r3
   107d0:	6878      	ldr	r0, [r7, #4]
   107d2:	4b27      	ldr	r3, [pc, #156]	; (10870 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   107d4:	4798      	blx	r3
   107d6:	4603      	mov	r3, r0
   107d8:	2b00      	cmp	r3, #0
   107da:	d006      	beq.n	107ea <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   107dc:	697b      	ldr	r3, [r7, #20]
   107de:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   107e2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   107e6:	617b      	str	r3, [r7, #20]
   107e8:	e003      	b.n	107f2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   107ea:	697a      	ldr	r2, [r7, #20]
   107ec:	4b21      	ldr	r3, [pc, #132]	; (10874 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   107ee:	4413      	add	r3, r2
   107f0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   107f2:	693b      	ldr	r3, [r7, #16]
   107f4:	3301      	adds	r3, #1
   107f6:	613b      	str	r3, [r7, #16]
   107f8:	e7dc      	b.n	107b4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   107fa:	2301      	movs	r3, #1
   107fc:	613b      	str	r3, [r7, #16]
   107fe:	7bba      	ldrb	r2, [r7, #14]
   10800:	693b      	ldr	r3, [r7, #16]
   10802:	429a      	cmp	r2, r3
   10804:	d910      	bls.n	10828 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   10806:	683b      	ldr	r3, [r7, #0]
   10808:	88db      	ldrh	r3, [r3, #6]
   1080a:	4619      	mov	r1, r3
   1080c:	693b      	ldr	r3, [r7, #16]
   1080e:	b2db      	uxtb	r3, r3
   10810:	461a      	mov	r2, r3
   10812:	6878      	ldr	r0, [r7, #4]
   10814:	4b18      	ldr	r3, [pc, #96]	; (10878 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   10816:	4798      	blx	r3
   10818:	4602      	mov	r2, r0
   1081a:	697b      	ldr	r3, [r7, #20]
   1081c:	4413      	add	r3, r2
   1081e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   10820:	693b      	ldr	r3, [r7, #16]
   10822:	3301      	adds	r3, #1
   10824:	613b      	str	r3, [r7, #16]
   10826:	e7ea      	b.n	107fe <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   10828:	7b7b      	ldrb	r3, [r7, #13]
   1082a:	3b01      	subs	r3, #1
   1082c:	4a13      	ldr	r2, [pc, #76]	; (1087c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1082e:	fb02 f303 	mul.w	r3, r2, r3
   10832:	461a      	mov	r2, r3
   10834:	697b      	ldr	r3, [r7, #20]
   10836:	4413      	add	r3, r2
   10838:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1083a:	7b3b      	ldrb	r3, [r7, #12]
   1083c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   10840:	fb02 f303 	mul.w	r3, r2, r3
   10844:	461a      	mov	r2, r3
   10846:	697b      	ldr	r3, [r7, #20]
   10848:	4413      	add	r3, r2
   1084a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1084c:	7afa      	ldrb	r2, [r7, #11]
   1084e:	4613      	mov	r3, r2
   10850:	011b      	lsls	r3, r3, #4
   10852:	1a9b      	subs	r3, r3, r2
   10854:	009b      	lsls	r3, r3, #2
   10856:	461a      	mov	r2, r3
   10858:	697b      	ldr	r3, [r7, #20]
   1085a:	4413      	add	r3, r2
   1085c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1085e:	7abb      	ldrb	r3, [r7, #10]
   10860:	697a      	ldr	r2, [r7, #20]
   10862:	4413      	add	r3, r2
   10864:	617b      	str	r3, [r7, #20]

	return tmp;
   10866:	697b      	ldr	r3, [r7, #20]
}
   10868:	4618      	mov	r0, r3
   1086a:	3718      	adds	r7, #24
   1086c:	46bd      	mov	sp, r7
   1086e:	bd80      	pop	{r7, pc}
   10870:	00010745 	.word	0x00010745
   10874:	01e13380 	.word	0x01e13380
   10878:	00010881 	.word	0x00010881
   1087c:	00015180 	.word	0x00015180

00010880 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   10880:	b580      	push	{r7, lr}
   10882:	b086      	sub	sp, #24
   10884:	af00      	add	r7, sp, #0
   10886:	60f8      	str	r0, [r7, #12]
   10888:	60b9      	str	r1, [r7, #8]
   1088a:	4613      	mov	r3, r2
   1088c:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   1088e:	2300      	movs	r3, #0
   10890:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   10892:	68bb      	ldr	r3, [r7, #8]
   10894:	b29b      	uxth	r3, r3
   10896:	4619      	mov	r1, r3
   10898:	68f8      	ldr	r0, [r7, #12]
   1089a:	4b2f      	ldr	r3, [pc, #188]	; (10958 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   1089c:	4798      	blx	r3
   1089e:	4603      	mov	r3, r0
   108a0:	2b00      	cmp	r3, #0
   108a2:	d028      	beq.n	108f6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   108a4:	79fb      	ldrb	r3, [r7, #7]
   108a6:	3b01      	subs	r3, #1
   108a8:	2b0b      	cmp	r3, #11
   108aa:	d84c      	bhi.n	10946 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   108ac:	a201      	add	r2, pc, #4	; (adr r2, 108b4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   108ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   108b2:	bf00      	nop
   108b4:	000108e5 	.word	0x000108e5
   108b8:	000108eb 	.word	0x000108eb
   108bc:	000108e5 	.word	0x000108e5
   108c0:	000108f1 	.word	0x000108f1
   108c4:	000108e5 	.word	0x000108e5
   108c8:	000108f1 	.word	0x000108f1
   108cc:	000108e5 	.word	0x000108e5
   108d0:	000108e5 	.word	0x000108e5
   108d4:	000108f1 	.word	0x000108f1
   108d8:	000108e5 	.word	0x000108e5
   108dc:	000108f1 	.word	0x000108f1
   108e0:	000108e5 	.word	0x000108e5
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   108e4:	4b1d      	ldr	r3, [pc, #116]	; (1095c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   108e6:	617b      	str	r3, [r7, #20]
			break;
   108e8:	e030      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   108ea:	4b1d      	ldr	r3, [pc, #116]	; (10960 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   108ec:	617b      	str	r3, [r7, #20]
			break;
   108ee:	e02d      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   108f0:	4b1c      	ldr	r3, [pc, #112]	; (10964 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   108f2:	617b      	str	r3, [r7, #20]
			break;
   108f4:	e02a      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   108f6:	79fb      	ldrb	r3, [r7, #7]
   108f8:	3b01      	subs	r3, #1
   108fa:	2b0b      	cmp	r3, #11
   108fc:	d825      	bhi.n	1094a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   108fe:	a201      	add	r2, pc, #4	; (adr r2, 10904 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   10900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10904:	00010935 	.word	0x00010935
   10908:	0001093b 	.word	0x0001093b
   1090c:	00010935 	.word	0x00010935
   10910:	00010941 	.word	0x00010941
   10914:	00010935 	.word	0x00010935
   10918:	00010941 	.word	0x00010941
   1091c:	00010935 	.word	0x00010935
   10920:	00010935 	.word	0x00010935
   10924:	00010941 	.word	0x00010941
   10928:	00010935 	.word	0x00010935
   1092c:	00010941 	.word	0x00010941
   10930:	00010935 	.word	0x00010935
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   10934:	4b09      	ldr	r3, [pc, #36]	; (1095c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   10936:	617b      	str	r3, [r7, #20]
			break;
   10938:	e008      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1093a:	4b0b      	ldr	r3, [pc, #44]	; (10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1093c:	617b      	str	r3, [r7, #20]
			break;
   1093e:	e005      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   10940:	4b08      	ldr	r3, [pc, #32]	; (10964 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   10942:	617b      	str	r3, [r7, #20]
			break;
   10944:	e002      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   10946:	bf00      	nop
   10948:	e000      	b.n	1094c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1094a:	bf00      	nop
		}
	}

	return sec_in_month;
   1094c:	697b      	ldr	r3, [r7, #20]
}
   1094e:	4618      	mov	r0, r3
   10950:	3718      	adds	r7, #24
   10952:	46bd      	mov	sp, r7
   10954:	bd80      	pop	{r7, pc}
   10956:	bf00      	nop
   10958:	00010745 	.word	0x00010745
   1095c:	0028de80 	.word	0x0028de80
   10960:	00263b80 	.word	0x00263b80
   10964:	00278d00 	.word	0x00278d00
   10968:	0024ea00 	.word	0x0024ea00

0001096c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1096c:	b580      	push	{r7, lr}
   1096e:	b082      	sub	sp, #8
   10970:	af00      	add	r7, sp, #0
   10972:	6078      	str	r0, [r7, #4]
   10974:	6039      	str	r1, [r7, #0]
   10976:	687b      	ldr	r3, [r7, #4]
   10978:	2b01      	cmp	r3, #1
   1097a:	d10d      	bne.n	10998 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1097c:	683b      	ldr	r3, [r7, #0]
   1097e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10982:	4293      	cmp	r3, r2
   10984:	d108      	bne.n	10998 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10986:	4906      	ldr	r1, [pc, #24]	; (109a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10988:	4806      	ldr	r0, [pc, #24]	; (109a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1098a:	4b07      	ldr	r3, [pc, #28]	; (109a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1098c:	4798      	blx	r3
   1098e:	4a07      	ldr	r2, [pc, #28]	; (109ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10990:	4907      	ldr	r1, [pc, #28]	; (109b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10992:	4804      	ldr	r0, [pc, #16]	; (109a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10994:	4b07      	ldr	r3, [pc, #28]	; (109b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   10996:	4798      	blx	r3
   10998:	bf00      	nop
   1099a:	3708      	adds	r7, #8
   1099c:	46bd      	mov	sp, r7
   1099e:	bd80      	pop	{r7, pc}
   109a0:	2000ac18 	.word	0x2000ac18
   109a4:	2000a990 	.word	0x2000a990
   109a8:	000106b9 	.word	0x000106b9
   109ac:	20000000 	.word	0x20000000
   109b0:	000106f5 	.word	0x000106f5
   109b4:	00010a0d 	.word	0x00010a0d

000109b8 <_GLOBAL__sub_I_ptrCalendarClass>:
   109b8:	b580      	push	{r7, lr}
   109ba:	af00      	add	r7, sp, #0
   109bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   109c0:	2001      	movs	r0, #1
   109c2:	4b01      	ldr	r3, [pc, #4]	; (109c8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   109c4:	4798      	blx	r3
   109c6:	bd80      	pop	{r7, pc}
   109c8:	0001096d 	.word	0x0001096d

000109cc <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   109cc:	b480      	push	{r7}
   109ce:	b083      	sub	sp, #12
   109d0:	af00      	add	r7, sp, #0
   109d2:	6078      	str	r0, [r7, #4]
   109d4:	4a04      	ldr	r2, [pc, #16]	; (109e8 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	601a      	str	r2, [r3, #0]
{
} //~D
   109da:	687b      	ldr	r3, [r7, #4]
   109dc:	4618      	mov	r0, r3
   109de:	370c      	adds	r7, #12
   109e0:	46bd      	mov	sp, r7
   109e2:	bc80      	pop	{r7}
   109e4:	4770      	bx	lr
   109e6:	bf00      	nop
   109e8:	00011420 	.word	0x00011420

000109ec <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   109ec:	b480      	push	{r7}
   109ee:	b083      	sub	sp, #12
   109f0:	af00      	add	r7, sp, #0
   109f2:	6078      	str	r0, [r7, #4]
   109f4:	4a04      	ldr	r2, [pc, #16]	; (10a08 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   109f6:	687b      	ldr	r3, [r7, #4]
   109f8:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   109fa:	687b      	ldr	r3, [r7, #4]
   109fc:	4618      	mov	r0, r3
   109fe:	370c      	adds	r7, #12
   10a00:	46bd      	mov	sp, r7
   10a02:	bc80      	pop	{r7}
   10a04:	4770      	bx	lr
   10a06:	bf00      	nop
   10a08:	00011420 	.word	0x00011420

00010a0c <__aeabi_atexit>:
   10a0c:	460b      	mov	r3, r1
   10a0e:	4601      	mov	r1, r0
   10a10:	4618      	mov	r0, r3
   10a12:	f000 b801 	b.w	10a18 <__cxa_atexit>
   10a16:	bf00      	nop

00010a18 <__cxa_atexit>:
   10a18:	4613      	mov	r3, r2
   10a1a:	460a      	mov	r2, r1
   10a1c:	4601      	mov	r1, r0
   10a1e:	2002      	movs	r0, #2
   10a20:	f000 b9bc 	b.w	10d9c <__register_exitproc>

00010a24 <ffs>:
   10a24:	b140      	cbz	r0, 10a38 <ffs+0x14>
   10a26:	2300      	movs	r3, #0
   10a28:	fa40 f103 	asr.w	r1, r0, r3
   10a2c:	1c5a      	adds	r2, r3, #1
   10a2e:	07c9      	lsls	r1, r1, #31
   10a30:	4613      	mov	r3, r2
   10a32:	d5f9      	bpl.n	10a28 <ffs+0x4>
   10a34:	4610      	mov	r0, r2
   10a36:	4770      	bx	lr
   10a38:	4602      	mov	r2, r0
   10a3a:	4610      	mov	r0, r2
   10a3c:	4770      	bx	lr
   10a3e:	bf00      	nop

00010a40 <__libc_init_array>:
   10a40:	b570      	push	{r4, r5, r6, lr}
   10a42:	4e0f      	ldr	r6, [pc, #60]	; (10a80 <__libc_init_array+0x40>)
   10a44:	4d0f      	ldr	r5, [pc, #60]	; (10a84 <__libc_init_array+0x44>)
   10a46:	1b76      	subs	r6, r6, r5
   10a48:	10b6      	asrs	r6, r6, #2
   10a4a:	bf18      	it	ne
   10a4c:	2400      	movne	r4, #0
   10a4e:	d005      	beq.n	10a5c <__libc_init_array+0x1c>
   10a50:	3401      	adds	r4, #1
   10a52:	f855 3b04 	ldr.w	r3, [r5], #4
   10a56:	4798      	blx	r3
   10a58:	42a6      	cmp	r6, r4
   10a5a:	d1f9      	bne.n	10a50 <__libc_init_array+0x10>
   10a5c:	4e0a      	ldr	r6, [pc, #40]	; (10a88 <__libc_init_array+0x48>)
   10a5e:	4d0b      	ldr	r5, [pc, #44]	; (10a8c <__libc_init_array+0x4c>)
   10a60:	1b76      	subs	r6, r6, r5
   10a62:	f000 fce3 	bl	1142c <_init>
   10a66:	10b6      	asrs	r6, r6, #2
   10a68:	bf18      	it	ne
   10a6a:	2400      	movne	r4, #0
   10a6c:	d006      	beq.n	10a7c <__libc_init_array+0x3c>
   10a6e:	3401      	adds	r4, #1
   10a70:	f855 3b04 	ldr.w	r3, [r5], #4
   10a74:	4798      	blx	r3
   10a76:	42a6      	cmp	r6, r4
   10a78:	d1f9      	bne.n	10a6e <__libc_init_array+0x2e>
   10a7a:	bd70      	pop	{r4, r5, r6, pc}
   10a7c:	bd70      	pop	{r4, r5, r6, pc}
   10a7e:	bf00      	nop
   10a80:	00011438 	.word	0x00011438
   10a84:	00011438 	.word	0x00011438
   10a88:	00011470 	.word	0x00011470
   10a8c:	00011438 	.word	0x00011438

00010a90 <memcpy>:
   10a90:	4684      	mov	ip, r0
   10a92:	ea41 0300 	orr.w	r3, r1, r0
   10a96:	f013 0303 	ands.w	r3, r3, #3
   10a9a:	d16d      	bne.n	10b78 <memcpy+0xe8>
   10a9c:	3a40      	subs	r2, #64	; 0x40
   10a9e:	d341      	bcc.n	10b24 <memcpy+0x94>
   10aa0:	f851 3b04 	ldr.w	r3, [r1], #4
   10aa4:	f840 3b04 	str.w	r3, [r0], #4
   10aa8:	f851 3b04 	ldr.w	r3, [r1], #4
   10aac:	f840 3b04 	str.w	r3, [r0], #4
   10ab0:	f851 3b04 	ldr.w	r3, [r1], #4
   10ab4:	f840 3b04 	str.w	r3, [r0], #4
   10ab8:	f851 3b04 	ldr.w	r3, [r1], #4
   10abc:	f840 3b04 	str.w	r3, [r0], #4
   10ac0:	f851 3b04 	ldr.w	r3, [r1], #4
   10ac4:	f840 3b04 	str.w	r3, [r0], #4
   10ac8:	f851 3b04 	ldr.w	r3, [r1], #4
   10acc:	f840 3b04 	str.w	r3, [r0], #4
   10ad0:	f851 3b04 	ldr.w	r3, [r1], #4
   10ad4:	f840 3b04 	str.w	r3, [r0], #4
   10ad8:	f851 3b04 	ldr.w	r3, [r1], #4
   10adc:	f840 3b04 	str.w	r3, [r0], #4
   10ae0:	f851 3b04 	ldr.w	r3, [r1], #4
   10ae4:	f840 3b04 	str.w	r3, [r0], #4
   10ae8:	f851 3b04 	ldr.w	r3, [r1], #4
   10aec:	f840 3b04 	str.w	r3, [r0], #4
   10af0:	f851 3b04 	ldr.w	r3, [r1], #4
   10af4:	f840 3b04 	str.w	r3, [r0], #4
   10af8:	f851 3b04 	ldr.w	r3, [r1], #4
   10afc:	f840 3b04 	str.w	r3, [r0], #4
   10b00:	f851 3b04 	ldr.w	r3, [r1], #4
   10b04:	f840 3b04 	str.w	r3, [r0], #4
   10b08:	f851 3b04 	ldr.w	r3, [r1], #4
   10b0c:	f840 3b04 	str.w	r3, [r0], #4
   10b10:	f851 3b04 	ldr.w	r3, [r1], #4
   10b14:	f840 3b04 	str.w	r3, [r0], #4
   10b18:	f851 3b04 	ldr.w	r3, [r1], #4
   10b1c:	f840 3b04 	str.w	r3, [r0], #4
   10b20:	3a40      	subs	r2, #64	; 0x40
   10b22:	d2bd      	bcs.n	10aa0 <memcpy+0x10>
   10b24:	3230      	adds	r2, #48	; 0x30
   10b26:	d311      	bcc.n	10b4c <memcpy+0xbc>
   10b28:	f851 3b04 	ldr.w	r3, [r1], #4
   10b2c:	f840 3b04 	str.w	r3, [r0], #4
   10b30:	f851 3b04 	ldr.w	r3, [r1], #4
   10b34:	f840 3b04 	str.w	r3, [r0], #4
   10b38:	f851 3b04 	ldr.w	r3, [r1], #4
   10b3c:	f840 3b04 	str.w	r3, [r0], #4
   10b40:	f851 3b04 	ldr.w	r3, [r1], #4
   10b44:	f840 3b04 	str.w	r3, [r0], #4
   10b48:	3a10      	subs	r2, #16
   10b4a:	d2ed      	bcs.n	10b28 <memcpy+0x98>
   10b4c:	320c      	adds	r2, #12
   10b4e:	d305      	bcc.n	10b5c <memcpy+0xcc>
   10b50:	f851 3b04 	ldr.w	r3, [r1], #4
   10b54:	f840 3b04 	str.w	r3, [r0], #4
   10b58:	3a04      	subs	r2, #4
   10b5a:	d2f9      	bcs.n	10b50 <memcpy+0xc0>
   10b5c:	3204      	adds	r2, #4
   10b5e:	d008      	beq.n	10b72 <memcpy+0xe2>
   10b60:	07d2      	lsls	r2, r2, #31
   10b62:	bf1c      	itt	ne
   10b64:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10b68:	f800 3b01 	strbne.w	r3, [r0], #1
   10b6c:	d301      	bcc.n	10b72 <memcpy+0xe2>
   10b6e:	880b      	ldrh	r3, [r1, #0]
   10b70:	8003      	strh	r3, [r0, #0]
   10b72:	4660      	mov	r0, ip
   10b74:	4770      	bx	lr
   10b76:	bf00      	nop
   10b78:	2a08      	cmp	r2, #8
   10b7a:	d313      	bcc.n	10ba4 <memcpy+0x114>
   10b7c:	078b      	lsls	r3, r1, #30
   10b7e:	d08d      	beq.n	10a9c <memcpy+0xc>
   10b80:	f010 0303 	ands.w	r3, r0, #3
   10b84:	d08a      	beq.n	10a9c <memcpy+0xc>
   10b86:	f1c3 0304 	rsb	r3, r3, #4
   10b8a:	1ad2      	subs	r2, r2, r3
   10b8c:	07db      	lsls	r3, r3, #31
   10b8e:	bf1c      	itt	ne
   10b90:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10b94:	f800 3b01 	strbne.w	r3, [r0], #1
   10b98:	d380      	bcc.n	10a9c <memcpy+0xc>
   10b9a:	f831 3b02 	ldrh.w	r3, [r1], #2
   10b9e:	f820 3b02 	strh.w	r3, [r0], #2
   10ba2:	e77b      	b.n	10a9c <memcpy+0xc>
   10ba4:	3a04      	subs	r2, #4
   10ba6:	d3d9      	bcc.n	10b5c <memcpy+0xcc>
   10ba8:	3a01      	subs	r2, #1
   10baa:	f811 3b01 	ldrb.w	r3, [r1], #1
   10bae:	f800 3b01 	strb.w	r3, [r0], #1
   10bb2:	d2f9      	bcs.n	10ba8 <memcpy+0x118>
   10bb4:	780b      	ldrb	r3, [r1, #0]
   10bb6:	7003      	strb	r3, [r0, #0]
   10bb8:	784b      	ldrb	r3, [r1, #1]
   10bba:	7043      	strb	r3, [r0, #1]
   10bbc:	788b      	ldrb	r3, [r1, #2]
   10bbe:	7083      	strb	r3, [r0, #2]
   10bc0:	4660      	mov	r0, ip
   10bc2:	4770      	bx	lr

00010bc4 <memset>:
   10bc4:	b470      	push	{r4, r5, r6}
   10bc6:	0786      	lsls	r6, r0, #30
   10bc8:	d046      	beq.n	10c58 <memset+0x94>
   10bca:	1e54      	subs	r4, r2, #1
   10bcc:	2a00      	cmp	r2, #0
   10bce:	d041      	beq.n	10c54 <memset+0x90>
   10bd0:	b2ca      	uxtb	r2, r1
   10bd2:	4603      	mov	r3, r0
   10bd4:	e002      	b.n	10bdc <memset+0x18>
   10bd6:	f114 34ff 	adds.w	r4, r4, #4294967295
   10bda:	d33b      	bcc.n	10c54 <memset+0x90>
   10bdc:	f803 2b01 	strb.w	r2, [r3], #1
   10be0:	079d      	lsls	r5, r3, #30
   10be2:	d1f8      	bne.n	10bd6 <memset+0x12>
   10be4:	2c03      	cmp	r4, #3
   10be6:	d92e      	bls.n	10c46 <memset+0x82>
   10be8:	b2cd      	uxtb	r5, r1
   10bea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10bee:	2c0f      	cmp	r4, #15
   10bf0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10bf4:	d919      	bls.n	10c2a <memset+0x66>
   10bf6:	f103 0210 	add.w	r2, r3, #16
   10bfa:	4626      	mov	r6, r4
   10bfc:	3e10      	subs	r6, #16
   10bfe:	2e0f      	cmp	r6, #15
   10c00:	f842 5c10 	str.w	r5, [r2, #-16]
   10c04:	f842 5c0c 	str.w	r5, [r2, #-12]
   10c08:	f842 5c08 	str.w	r5, [r2, #-8]
   10c0c:	f842 5c04 	str.w	r5, [r2, #-4]
   10c10:	f102 0210 	add.w	r2, r2, #16
   10c14:	d8f2      	bhi.n	10bfc <memset+0x38>
   10c16:	f1a4 0210 	sub.w	r2, r4, #16
   10c1a:	f022 020f 	bic.w	r2, r2, #15
   10c1e:	f004 040f 	and.w	r4, r4, #15
   10c22:	3210      	adds	r2, #16
   10c24:	2c03      	cmp	r4, #3
   10c26:	4413      	add	r3, r2
   10c28:	d90d      	bls.n	10c46 <memset+0x82>
   10c2a:	461e      	mov	r6, r3
   10c2c:	4622      	mov	r2, r4
   10c2e:	3a04      	subs	r2, #4
   10c30:	2a03      	cmp	r2, #3
   10c32:	f846 5b04 	str.w	r5, [r6], #4
   10c36:	d8fa      	bhi.n	10c2e <memset+0x6a>
   10c38:	1f22      	subs	r2, r4, #4
   10c3a:	f022 0203 	bic.w	r2, r2, #3
   10c3e:	3204      	adds	r2, #4
   10c40:	4413      	add	r3, r2
   10c42:	f004 0403 	and.w	r4, r4, #3
   10c46:	b12c      	cbz	r4, 10c54 <memset+0x90>
   10c48:	b2c9      	uxtb	r1, r1
   10c4a:	441c      	add	r4, r3
   10c4c:	f803 1b01 	strb.w	r1, [r3], #1
   10c50:	429c      	cmp	r4, r3
   10c52:	d1fb      	bne.n	10c4c <memset+0x88>
   10c54:	bc70      	pop	{r4, r5, r6}
   10c56:	4770      	bx	lr
   10c58:	4614      	mov	r4, r2
   10c5a:	4603      	mov	r3, r0
   10c5c:	e7c2      	b.n	10be4 <memset+0x20>
   10c5e:	bf00      	nop

00010c60 <rand>:
   10c60:	b410      	push	{r4}
   10c62:	4b0c      	ldr	r3, [pc, #48]	; (10c94 <rand+0x34>)
   10c64:	480c      	ldr	r0, [pc, #48]	; (10c98 <rand+0x38>)
   10c66:	6819      	ldr	r1, [r3, #0]
   10c68:	4c0c      	ldr	r4, [pc, #48]	; (10c9c <rand+0x3c>)
   10c6a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   10c6e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   10c72:	fb00 f002 	mul.w	r0, r0, r2
   10c76:	fb04 0003 	mla	r0, r4, r3, r0
   10c7a:	fba2 2304 	umull	r2, r3, r2, r4
   10c7e:	4403      	add	r3, r0
   10c80:	3201      	adds	r2, #1
   10c82:	f143 0300 	adc.w	r3, r3, #0
   10c86:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   10c8a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   10c8e:	bc10      	pop	{r4}
   10c90:	4770      	bx	lr
   10c92:	bf00      	nop
   10c94:	2000021c 	.word	0x2000021c
   10c98:	5851f42d 	.word	0x5851f42d
   10c9c:	4c957f2d 	.word	0x4c957f2d
	...

00010cc0 <strlen>:
   10cc0:	f890 f000 	pld	[r0]
   10cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10cc8:	f020 0107 	bic.w	r1, r0, #7
   10ccc:	f06f 0c00 	mvn.w	ip, #0
   10cd0:	f010 0407 	ands.w	r4, r0, #7
   10cd4:	f891 f020 	pld	[r1, #32]
   10cd8:	f040 8049 	bne.w	10d6e <strlen+0xae>
   10cdc:	f04f 0400 	mov.w	r4, #0
   10ce0:	f06f 0007 	mvn.w	r0, #7
   10ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
   10ce8:	f891 f040 	pld	[r1, #64]	; 0x40
   10cec:	f100 0008 	add.w	r0, r0, #8
   10cf0:	fa82 f24c 	uadd8	r2, r2, ip
   10cf4:	faa4 f28c 	sel	r2, r4, ip
   10cf8:	fa83 f34c 	uadd8	r3, r3, ip
   10cfc:	faa2 f38c 	sel	r3, r2, ip
   10d00:	bb4b      	cbnz	r3, 10d56 <strlen+0x96>
   10d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10d06:	fa82 f24c 	uadd8	r2, r2, ip
   10d0a:	f100 0008 	add.w	r0, r0, #8
   10d0e:	faa4 f28c 	sel	r2, r4, ip
   10d12:	fa83 f34c 	uadd8	r3, r3, ip
   10d16:	faa2 f38c 	sel	r3, r2, ip
   10d1a:	b9e3      	cbnz	r3, 10d56 <strlen+0x96>
   10d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10d20:	fa82 f24c 	uadd8	r2, r2, ip
   10d24:	f100 0008 	add.w	r0, r0, #8
   10d28:	faa4 f28c 	sel	r2, r4, ip
   10d2c:	fa83 f34c 	uadd8	r3, r3, ip
   10d30:	faa2 f38c 	sel	r3, r2, ip
   10d34:	b97b      	cbnz	r3, 10d56 <strlen+0x96>
   10d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10d3a:	f101 0120 	add.w	r1, r1, #32
   10d3e:	fa82 f24c 	uadd8	r2, r2, ip
   10d42:	f100 0008 	add.w	r0, r0, #8
   10d46:	faa4 f28c 	sel	r2, r4, ip
   10d4a:	fa83 f34c 	uadd8	r3, r3, ip
   10d4e:	faa2 f38c 	sel	r3, r2, ip
   10d52:	2b00      	cmp	r3, #0
   10d54:	d0c6      	beq.n	10ce4 <strlen+0x24>
   10d56:	2a00      	cmp	r2, #0
   10d58:	bf04      	itt	eq
   10d5a:	3004      	addeq	r0, #4
   10d5c:	461a      	moveq	r2, r3
   10d5e:	ba12      	rev	r2, r2
   10d60:	fab2 f282 	clz	r2, r2
   10d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10d6c:	4770      	bx	lr
   10d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10d72:	f004 0503 	and.w	r5, r4, #3
   10d76:	f1c4 0000 	rsb	r0, r4, #0
   10d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10d7e:	f014 0f04 	tst.w	r4, #4
   10d82:	f891 f040 	pld	[r1, #64]	; 0x40
   10d86:	fa0c f505 	lsl.w	r5, ip, r5
   10d8a:	ea62 0205 	orn	r2, r2, r5
   10d8e:	bf1c      	itt	ne
   10d90:	ea63 0305 	ornne	r3, r3, r5
   10d94:	4662      	movne	r2, ip
   10d96:	f04f 0400 	mov.w	r4, #0
   10d9a:	e7a9      	b.n	10cf0 <strlen+0x30>

00010d9c <__register_exitproc>:
   10d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10da0:	4d2c      	ldr	r5, [pc, #176]	; (10e54 <__register_exitproc+0xb8>)
   10da2:	4606      	mov	r6, r0
   10da4:	6828      	ldr	r0, [r5, #0]
   10da6:	4698      	mov	r8, r3
   10da8:	460f      	mov	r7, r1
   10daa:	4691      	mov	r9, r2
   10dac:	f000 f882 	bl	10eb4 <__retarget_lock_acquire_recursive>
   10db0:	4b29      	ldr	r3, [pc, #164]	; (10e58 <__register_exitproc+0xbc>)
   10db2:	681c      	ldr	r4, [r3, #0]
   10db4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10db8:	2b00      	cmp	r3, #0
   10dba:	d03e      	beq.n	10e3a <__register_exitproc+0x9e>
   10dbc:	685a      	ldr	r2, [r3, #4]
   10dbe:	2a1f      	cmp	r2, #31
   10dc0:	dc1c      	bgt.n	10dfc <__register_exitproc+0x60>
   10dc2:	f102 0e01 	add.w	lr, r2, #1
   10dc6:	b176      	cbz	r6, 10de6 <__register_exitproc+0x4a>
   10dc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10dcc:	2401      	movs	r4, #1
   10dce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10dd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10dd6:	4094      	lsls	r4, r2
   10dd8:	4320      	orrs	r0, r4
   10dda:	2e02      	cmp	r6, #2
   10ddc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10de0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10de4:	d023      	beq.n	10e2e <__register_exitproc+0x92>
   10de6:	3202      	adds	r2, #2
   10de8:	f8c3 e004 	str.w	lr, [r3, #4]
   10dec:	6828      	ldr	r0, [r5, #0]
   10dee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10df2:	f000 f861 	bl	10eb8 <__retarget_lock_release_recursive>
   10df6:	2000      	movs	r0, #0
   10df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10dfc:	4b17      	ldr	r3, [pc, #92]	; (10e5c <__register_exitproc+0xc0>)
   10dfe:	b30b      	cbz	r3, 10e44 <__register_exitproc+0xa8>
   10e00:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10e04:	f7fe fbea 	bl	f5dc <malloc>
   10e08:	4603      	mov	r3, r0
   10e0a:	b1d8      	cbz	r0, 10e44 <__register_exitproc+0xa8>
   10e0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10e10:	6002      	str	r2, [r0, #0]
   10e12:	2100      	movs	r1, #0
   10e14:	6041      	str	r1, [r0, #4]
   10e16:	460a      	mov	r2, r1
   10e18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   10e1c:	f04f 0e01 	mov.w	lr, #1
   10e20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10e24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10e28:	2e00      	cmp	r6, #0
   10e2a:	d0dc      	beq.n	10de6 <__register_exitproc+0x4a>
   10e2c:	e7cc      	b.n	10dc8 <__register_exitproc+0x2c>
   10e2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10e32:	430c      	orrs	r4, r1
   10e34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10e38:	e7d5      	b.n	10de6 <__register_exitproc+0x4a>
   10e3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   10e3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10e42:	e7bb      	b.n	10dbc <__register_exitproc+0x20>
   10e44:	6828      	ldr	r0, [r5, #0]
   10e46:	f000 f837 	bl	10eb8 <__retarget_lock_release_recursive>
   10e4a:	f04f 30ff 	mov.w	r0, #4294967295
   10e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10e52:	bf00      	nop
   10e54:	20000648 	.word	0x20000648
   10e58:	00011428 	.word	0x00011428
   10e5c:	0000f5dd 	.word	0x0000f5dd

00010e60 <register_fini>:
   10e60:	4b02      	ldr	r3, [pc, #8]	; (10e6c <register_fini+0xc>)
   10e62:	b113      	cbz	r3, 10e6a <register_fini+0xa>
   10e64:	4802      	ldr	r0, [pc, #8]	; (10e70 <register_fini+0x10>)
   10e66:	f000 b805 	b.w	10e74 <atexit>
   10e6a:	4770      	bx	lr
   10e6c:	00000000 	.word	0x00000000
   10e70:	00010e81 	.word	0x00010e81

00010e74 <atexit>:
   10e74:	2300      	movs	r3, #0
   10e76:	4601      	mov	r1, r0
   10e78:	461a      	mov	r2, r3
   10e7a:	4618      	mov	r0, r3
   10e7c:	f7ff bf8e 	b.w	10d9c <__register_exitproc>

00010e80 <__libc_fini_array>:
   10e80:	b538      	push	{r3, r4, r5, lr}
   10e82:	4c0a      	ldr	r4, [pc, #40]	; (10eac <__libc_fini_array+0x2c>)
   10e84:	4d0a      	ldr	r5, [pc, #40]	; (10eb0 <__libc_fini_array+0x30>)
   10e86:	1b64      	subs	r4, r4, r5
   10e88:	10a4      	asrs	r4, r4, #2
   10e8a:	d00a      	beq.n	10ea2 <__libc_fini_array+0x22>
   10e8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10e90:	3b01      	subs	r3, #1
   10e92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10e96:	3c01      	subs	r4, #1
   10e98:	f855 3904 	ldr.w	r3, [r5], #-4
   10e9c:	4798      	blx	r3
   10e9e:	2c00      	cmp	r4, #0
   10ea0:	d1f9      	bne.n	10e96 <__libc_fini_array+0x16>
   10ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10ea6:	f000 bae3 	b.w	11470 <_fini>
   10eaa:	bf00      	nop
   10eac:	00011480 	.word	0x00011480
   10eb0:	0001147c 	.word	0x0001147c

00010eb4 <__retarget_lock_acquire_recursive>:
   10eb4:	4770      	bx	lr
   10eb6:	bf00      	nop

00010eb8 <__retarget_lock_release_recursive>:
   10eb8:	4770      	bx	lr
   10eba:	bf00      	nop
   10ebc:	682f2e2e 	.word	0x682f2e2e
   10ec0:	702f6c70 	.word	0x702f6c70
   10ec4:	2f74726f 	.word	0x2f74726f
   10ec8:	5f6c7068 	.word	0x5f6c7068
   10ecc:	6f697067 	.word	0x6f697067
   10ed0:	7361625f 	.word	0x7361625f
   10ed4:	00682e65 	.word	0x00682e65
   10ed8:	682f2e2e 	.word	0x682f2e2e
   10edc:	692f6c61 	.word	0x692f6c61
   10ee0:	756c636e 	.word	0x756c636e
   10ee4:	682f6564 	.word	0x682f6564
   10ee8:	775f6c61 	.word	0x775f6c61
   10eec:	682e7464 	.word	0x682e7464
   10ef0:	00000000 	.word	0x00000000
   10ef4:	682f2e2e 	.word	0x682f2e2e
   10ef8:	732f6c61 	.word	0x732f6c61
   10efc:	682f6372 	.word	0x682f6372
   10f00:	635f6c61 	.word	0x635f6c61
   10f04:	6e656c61 	.word	0x6e656c61
   10f08:	2e726164 	.word	0x2e726164
   10f0c:	00000063 	.word	0x00000063
   10f10:	682f2e2e 	.word	0x682f2e2e
   10f14:	732f6c61 	.word	0x732f6c61
   10f18:	682f6372 	.word	0x682f6372
   10f1c:	635f6c61 	.word	0x635f6c61
   10f20:	615f6e61 	.word	0x615f6e61
   10f24:	636e7973 	.word	0x636e7973
   10f28:	0000632e 	.word	0x0000632e
   10f2c:	682f2e2e 	.word	0x682f2e2e
   10f30:	732f6c61 	.word	0x732f6c61
   10f34:	682f6372 	.word	0x682f6372
   10f38:	635f6c61 	.word	0x635f6c61
   10f3c:	735f6372 	.word	0x735f6372
   10f40:	2e636e79 	.word	0x2e636e79
   10f44:	00000063 	.word	0x00000063
   10f48:	682f2e2e 	.word	0x682f2e2e
   10f4c:	732f6c61 	.word	0x732f6c61
   10f50:	682f6372 	.word	0x682f6372
   10f54:	695f6c61 	.word	0x695f6c61
   10f58:	6d5f6332 	.word	0x6d5f6332
   10f5c:	6e79735f 	.word	0x6e79735f
   10f60:	00632e63 	.word	0x00632e63
   10f64:	682f2e2e 	.word	0x682f2e2e
   10f68:	732f6c61 	.word	0x732f6c61
   10f6c:	682f6372 	.word	0x682f6372
   10f70:	705f6c61 	.word	0x705f6c61
   10f74:	632e6d77 	.word	0x632e6d77
   10f78:	00000000 	.word	0x00000000
   10f7c:	682f2e2e 	.word	0x682f2e2e
   10f80:	732f6c61 	.word	0x732f6c61
   10f84:	682f6372 	.word	0x682f6372
   10f88:	715f6c61 	.word	0x715f6c61
   10f8c:	5f697073 	.word	0x5f697073
   10f90:	636e7973 	.word	0x636e7973
   10f94:	0000632e 	.word	0x0000632e
   10f98:	682f2e2e 	.word	0x682f2e2e
   10f9c:	732f6c61 	.word	0x732f6c61
   10fa0:	682f6372 	.word	0x682f6372
   10fa4:	735f6c61 	.word	0x735f6c61
   10fa8:	6d5f6970 	.word	0x6d5f6970
   10fac:	6e79735f 	.word	0x6e79735f
   10fb0:	00632e63 	.word	0x00632e63
   10fb4:	682f2e2e 	.word	0x682f2e2e
   10fb8:	732f6c61 	.word	0x732f6c61
   10fbc:	682f6372 	.word	0x682f6372
   10fc0:	745f6c61 	.word	0x745f6c61
   10fc4:	72656d69 	.word	0x72656d69
   10fc8:	0000632e 	.word	0x0000632e
   10fcc:	682f2e2e 	.word	0x682f2e2e
   10fd0:	752f6c61 	.word	0x752f6c61
   10fd4:	736c6974 	.word	0x736c6974
   10fd8:	6372732f 	.word	0x6372732f
   10fdc:	6974752f 	.word	0x6974752f
   10fe0:	6c5f736c 	.word	0x6c5f736c
   10fe4:	2e747369 	.word	0x2e747369
   10fe8:	00000063 	.word	0x00000063

00010fec <_map>:
   10fec:	00000000 00000040 00000001 00000021     ....@.......!...
   10ffc:	00000003 00000003 00000004 00000004     ................
   1100c:	00000005 00000005 00000006 00000056     ............V...
   1101c:	00000007 00000057 00000008 00000028     ....W.......(...
   1102c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1103c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001104c <user_mux_confs>:
   1104c:	00020100 00000000 00000000 00000000     ................
	...

00011090 <channel_confs>:
   11090:	0660065f 00000000 00000000 00000000     _.`.............
	...

000110d0 <interrupt_cfg>:
	...
   11150:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   11160:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   11170:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   11180:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   11190:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   111a0:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   111b0:	43000400 43000800 43000c00              ...C...C...C

000111bc <sercomspi_regs>:
   111bc:	0020000c 00020000 00000000 01ff0001     .. .............
   111cc:	30000c04 02000000 00000000 ff001700     ...0............
   111dc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   111ec:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   111fc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1120c:	43001400 43001800                       ...C...C

00011214 <_usb_ep_cfgs>:
   11214:	20000e48 00000000 00000040 20000e88     H.. ....@...... 
   11224:	20000ec8 00400040 20000f08 20000f48     ... @.@.... H.. 
   11234:	00400040 20000f88 20000fc8 00400040     @.@.... ... @.@.
   11244:	20001008 20001048 00400040 00000804     ... H.. @.@.....
   11254:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   11264:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   11274:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   11284:	7361625f 00682e65                       _base.h.

0001128c <n25q256a_interface>:
   1128c:	0000c445 0000c4e9 0000c5f9 0000c7b1     E...............
   1129c:	0000c841 752f2e2e 642f6273 63697665     A...../usb/devic
   112ac:	73752f65 2e636462 00000063              e/usbdc.c...

000112b8 <defaultParameters>:
   112b8:	00004020                                 @..

000112bc <defaultPreferences>:
   112bc:	000000fa 00000032                       ....2...

000112c4 <_ZTV9CDC_Class>:
	...
   112cc:	0000ef2d 0000f00d 0000ebb1 0000eef5     -...............
   112dc:	0000f0a5 0000eeb9 0000edcd 0000ee1d     ................
   112ec:	0000ef15 0000ef75                       ....u...

000112f4 <_ZTV6Stream>:
	...
   112fc:	0000f5f1 0000f211 0000ebb1 0000ebc5     ................
   1130c:	0000f5f1 0000f5f1 0000f5f1 2e257830     ............0x%.
   1131c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1132c:	0066766f                                ovf.

00011330 <_ZTV5Print>:
	...
   11338:	0000f5f1 0000f211 0000ebb1 0000ebc5     ................
   11348:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   11358:	73655466 41502074 44455353 00000000     fTest PASSED....
   11368:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   11378:	73655466 41462074 44454c49 00000000     fTest FAILED....
   11388:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   11398:	00632e6f 2e2f2e2e 2e2e2f2e 554c412f     o.c.../../../ALU
   113a8:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   113b8:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   113c8:	6f697067 7361625f 00682e65              gpio_base.h.

000113d4 <_ZTV18Event_Logger_Class>:
	...
   113dc:	0001071d 0001076d 74696e49 696c6169     ....m...Initiali
   113ec:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   113fc:	343a3631 32313a34 00000000              16:44:12....

00011408 <_ZTV14Calendar_Class>:
	...
   11410:	0001071d 0001076d                       ....m...

00011418 <_ZTV17DateTimeLog_Class>:
	...
   11420:	0000f5f1 0000f5f1                       ........

00011428 <_global_impure_ptr>:
   11428:	20000220                                 .. 

0001142c <_init>:
   1142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1142e:	bf00      	nop
   11430:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11432:	bc08      	pop	{r3}
   11434:	469e      	mov	lr, r3
   11436:	4770      	bx	lr

00011438 <__init_array_start>:
   11438:	00010e61 	.word	0x00010e61

0001143c <__frame_dummy_init_array_entry>:
   1143c:	00000289 000009dd 0000109d 000013d9     ................
   1144c:	0000e071 0000e625 0000eb79 0000f1fd     q...%...y.......
   1145c:	0000f5c9 0000f795 00010221 000103e5     ........!.......
   1146c:	000109b9                                ....

00011470 <_fini>:
   11470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11472:	bf00      	nop
   11474:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11476:	bc08      	pop	{r3}
   11478:	469e      	mov	lr, r3
   1147a:	4770      	bx	lr

0001147c <__fini_array_start>:
   1147c:	00000265 	.word	0x00000265
