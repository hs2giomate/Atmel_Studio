
libSingleFlapperValveP0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011674  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011674  00011674  00021674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000064c  20000000  0001167c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003064c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003064c  2**0
                  CONTENTS
  5 .bss          0000a440  20000650  00011cd0  00030650  2**3
                  ALLOC
  6 .stack        00010000  2000aa90  0001c110  00030650  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003067a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007cd7a  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa7e  00000000  00000000  000ad44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d7d0  00000000  00000000  000b7ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033c0  00000000  00000000  000d569b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003030  00000000  00000000  000d8a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00051858  00000000  00000000  000dba8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003f878  00000000  00000000  0012d2e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013f541  00000000  00000000  0016cb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d6dc  00000000  00000000  002ac09c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 aa 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	c9 76 00 00 61 64 00 00 71 64 00 00 55 03 00 00     .v..ad..qd..U...
      7c:	81 64 00 00 91 64 00 00 a1 64 00 00 b1 64 00 00     .d...d...d...d..
      8c:	c1 64 00 00 d1 64 00 00 e1 64 00 00 55 03 00 00     .d...d...d..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 7d 59 00 00 b1 c5 00 00     U...U...}Y......
     184:	c1 c5 00 00 d1 c5 00 00 e1 c5 00 00 55 03 00 00     ............U...
     194:	45 90 00 00 55 03 00 00 55 03 00 00 55 03 00 00     E...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 61 90 00 00     U...U...U...a...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	7d 90 00 00 55 03 00 00 55 03 00 00 55 03 00 00     }...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 01 9d 00 00 55 03 00 00     U...U.......U...
     1f4:	1d 9d 00 00 55 03 00 00 39 9d 00 00 55 9d 00 00     ....U...9...U...
     204:	71 9d 00 00 8d 9d 00 00 55 03 00 00 55 03 00 00     q.......U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000650 	.word	0x20000650
     280:	00000000 	.word	0x00000000
     284:	0001167c 	.word	0x0001167c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001167c 	.word	0x0001167c
     2c4:	20000654 	.word	0x20000654
     2c8:	0001167c 	.word	0x0001167c
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0001167c 	.word	0x0001167c
     334:	20000000 	.word	0x20000000
     338:	2000064c 	.word	0x2000064c
     33c:	20000650 	.word	0x20000650
     340:	2000aa90 	.word	0x2000aa90
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	00010cd9 	.word	0x00010cd9
     350:	000021d1 	.word	0x000021d1

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
			asm("nop");
     358:	bf00      	nop
     35a:	e7fd      	b.n	358 <Dummy_Handler+0x4>

0000035c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
     35c:	b480      	push	{r7}
     35e:	b083      	sub	sp, #12
     360:	af00      	add	r7, sp, #0
     362:	6078      	str	r0, [r7, #4]
     364:	460b      	mov	r3, r1
     366:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     368:	78fb      	ldrb	r3, [r7, #3]
     36a:	687a      	ldr	r2, [r7, #4]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	681b      	ldr	r3, [r3, #0]
}
     372:	4618      	mov	r0, r3
     374:	370c      	adds	r7, #12
     376:	46bd      	mov	sp, r7
     378:	bc80      	pop	{r7}
     37a:	4770      	bx	lr

0000037c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     37c:	b480      	push	{r7}
     37e:	b085      	sub	sp, #20
     380:	af00      	add	r7, sp, #0
     382:	60f8      	str	r0, [r7, #12]
     384:	460b      	mov	r3, r1
     386:	607a      	str	r2, [r7, #4]
     388:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38a:	7afb      	ldrb	r3, [r7, #11]
     38c:	68fa      	ldr	r2, [r7, #12]
     38e:	01db      	lsls	r3, r3, #7
     390:	4413      	add	r3, r2
     392:	3318      	adds	r3, #24
     394:	687a      	ldr	r2, [r7, #4]
     396:	601a      	str	r2, [r3, #0]
}
     398:	bf00      	nop
     39a:	3714      	adds	r7, #20
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr

000003a2 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
     3a2:	b480      	push	{r7}
     3a4:	b083      	sub	sp, #12
     3a6:	af00      	add	r7, sp, #0
     3a8:	6078      	str	r0, [r7, #4]
     3aa:	460b      	mov	r3, r1
     3ac:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     3ae:	78fb      	ldrb	r3, [r7, #3]
     3b0:	687a      	ldr	r2, [r7, #4]
     3b2:	01db      	lsls	r3, r3, #7
     3b4:	4413      	add	r3, r2
     3b6:	3310      	adds	r3, #16
     3b8:	681b      	ldr	r3, [r3, #0]
}
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bc80      	pop	{r7}
     3c2:	4770      	bx	lr

000003c4 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3c4:	b480      	push	{r7}
     3c6:	b085      	sub	sp, #20
     3c8:	af00      	add	r7, sp, #0
     3ca:	60f8      	str	r0, [r7, #12]
     3cc:	460b      	mov	r3, r1
     3ce:	607a      	str	r2, [r7, #4]
     3d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d2:	7afb      	ldrb	r3, [r7, #11]
     3d4:	68fa      	ldr	r2, [r7, #12]
     3d6:	01db      	lsls	r3, r3, #7
     3d8:	4413      	add	r3, r2
     3da:	3314      	adds	r3, #20
     3dc:	687a      	ldr	r2, [r7, #4]
     3de:	601a      	str	r2, [r3, #0]
}
     3e0:	bf00      	nop
     3e2:	3714      	adds	r7, #20
     3e4:	46bd      	mov	sp, r7
     3e6:	bc80      	pop	{r7}
     3e8:	4770      	bx	lr

000003ea <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3ea:	b480      	push	{r7}
     3ec:	b085      	sub	sp, #20
     3ee:	af00      	add	r7, sp, #0
     3f0:	60f8      	str	r0, [r7, #12]
     3f2:	460b      	mov	r3, r1
     3f4:	607a      	str	r2, [r7, #4]
     3f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     3f8:	7afb      	ldrb	r3, [r7, #11]
     3fa:	68fa      	ldr	r2, [r7, #12]
     3fc:	01db      	lsls	r3, r3, #7
     3fe:	4413      	add	r3, r2
     400:	331c      	adds	r3, #28
     402:	687a      	ldr	r2, [r7, #4]
     404:	601a      	str	r2, [r3, #0]
}
     406:	bf00      	nop
     408:	3714      	adds	r7, #20
     40a:	46bd      	mov	sp, r7
     40c:	bc80      	pop	{r7}
     40e:	4770      	bx	lr

00000410 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
     410:	b480      	push	{r7}
     412:	b083      	sub	sp, #12
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
     418:	460b      	mov	r3, r1
     41a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     41c:	78fb      	ldrb	r3, [r7, #3]
     41e:	687a      	ldr	r2, [r7, #4]
     420:	01db      	lsls	r3, r3, #7
     422:	4413      	add	r3, r2
     424:	3320      	adds	r3, #32
     426:	681b      	ldr	r3, [r3, #0]
}
     428:	4618      	mov	r0, r3
     42a:	370c      	adds	r7, #12
     42c:	46bd      	mov	sp, r7
     42e:	bc80      	pop	{r7}
     430:	4770      	bx	lr
	...

00000434 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     434:	b580      	push	{r7, lr}
     436:	b082      	sub	sp, #8
     438:	af00      	add	r7, sp, #0
     43a:	4603      	mov	r3, r0
     43c:	6039      	str	r1, [r7, #0]
     43e:	71fb      	strb	r3, [r7, #7]
     440:	4613      	mov	r3, r2
     442:	71bb      	strb	r3, [r7, #6]
	if (level) {
     444:	79bb      	ldrb	r3, [r7, #6]
     446:	2b00      	cmp	r3, #0
     448:	d006      	beq.n	458 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     44a:	79fb      	ldrb	r3, [r7, #7]
     44c:	683a      	ldr	r2, [r7, #0]
     44e:	4619      	mov	r1, r3
     450:	4806      	ldr	r0, [pc, #24]	; (46c <_gpio_set_level+0x38>)
     452:	4b07      	ldr	r3, [pc, #28]	; (470 <_gpio_set_level+0x3c>)
     454:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     456:	e005      	b.n	464 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     458:	79fb      	ldrb	r3, [r7, #7]
     45a:	683a      	ldr	r2, [r7, #0]
     45c:	4619      	mov	r1, r3
     45e:	4803      	ldr	r0, [pc, #12]	; (46c <_gpio_set_level+0x38>)
     460:	4b04      	ldr	r3, [pc, #16]	; (474 <_gpio_set_level+0x40>)
     462:	4798      	blx	r3
}
     464:	bf00      	nop
     466:	3708      	adds	r7, #8
     468:	46bd      	mov	sp, r7
     46a:	bd80      	pop	{r7, pc}
     46c:	41008000 	.word	0x41008000
     470:	0000037d 	.word	0x0000037d
     474:	000003c5 	.word	0x000003c5

00000478 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     478:	b580      	push	{r7, lr}
     47a:	b082      	sub	sp, #8
     47c:	af00      	add	r7, sp, #0
     47e:	4603      	mov	r3, r0
     480:	6039      	str	r1, [r7, #0]
     482:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     484:	79fb      	ldrb	r3, [r7, #7]
     486:	683a      	ldr	r2, [r7, #0]
     488:	4619      	mov	r1, r3
     48a:	4803      	ldr	r0, [pc, #12]	; (498 <_gpio_toggle_level+0x20>)
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <_gpio_toggle_level+0x24>)
     48e:	4798      	blx	r3
}
     490:	bf00      	nop
     492:	3708      	adds	r7, #8
     494:	46bd      	mov	sp, r7
     496:	bd80      	pop	{r7, pc}
     498:	41008000 	.word	0x41008000
     49c:	000003eb 	.word	0x000003eb

000004a0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b086      	sub	sp, #24
     4a4:	af00      	add	r7, sp, #0
     4a6:	4603      	mov	r3, r0
     4a8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     4aa:	f107 030c 	add.w	r3, r7, #12
     4ae:	4618      	mov	r0, r3
     4b0:	4b13      	ldr	r3, [pc, #76]	; (500 <_gpio_get_level+0x60>)
     4b2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
     4b4:	79fb      	ldrb	r3, [r7, #7]
     4b6:	4619      	mov	r1, r3
     4b8:	4812      	ldr	r0, [pc, #72]	; (504 <_gpio_get_level+0x64>)
     4ba:	4b13      	ldr	r3, [pc, #76]	; (508 <_gpio_get_level+0x68>)
     4bc:	4798      	blx	r3
     4be:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
     4c0:	79fb      	ldrb	r3, [r7, #7]
     4c2:	4619      	mov	r1, r3
     4c4:	480f      	ldr	r0, [pc, #60]	; (504 <_gpio_get_level+0x64>)
     4c6:	4b11      	ldr	r3, [pc, #68]	; (50c <_gpio_get_level+0x6c>)
     4c8:	4798      	blx	r3
     4ca:	4602      	mov	r2, r0
     4cc:	697b      	ldr	r3, [r7, #20]
     4ce:	43db      	mvns	r3, r3
     4d0:	4013      	ands	r3, r2
     4d2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     4d4:	79fb      	ldrb	r3, [r7, #7]
     4d6:	4619      	mov	r1, r3
     4d8:	480a      	ldr	r0, [pc, #40]	; (504 <_gpio_get_level+0x64>)
     4da:	4b0d      	ldr	r3, [pc, #52]	; (510 <_gpio_get_level+0x70>)
     4dc:	4798      	blx	r3
     4de:	4602      	mov	r2, r0
     4e0:	697b      	ldr	r3, [r7, #20]
     4e2:	4013      	ands	r3, r2
     4e4:	693a      	ldr	r2, [r7, #16]
     4e6:	4313      	orrs	r3, r2
     4e8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
     4ea:	f107 030c 	add.w	r3, r7, #12
     4ee:	4618      	mov	r0, r3
     4f0:	4b08      	ldr	r3, [pc, #32]	; (514 <_gpio_get_level+0x74>)
     4f2:	4798      	blx	r3

	return tmp;
     4f4:	693b      	ldr	r3, [r7, #16]
}
     4f6:	4618      	mov	r0, r3
     4f8:	3718      	adds	r7, #24
     4fa:	46bd      	mov	sp, r7
     4fc:	bd80      	pop	{r7, pc}
     4fe:	bf00      	nop
     500:	00003a25 	.word	0x00003a25
     504:	41008000 	.word	0x41008000
     508:	0000035d 	.word	0x0000035d
     50c:	00000411 	.word	0x00000411
     510:	000003a3 	.word	0x000003a3
     514:	00003a4b 	.word	0x00003a4b

00000518 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
     51e:	4603      	mov	r3, r0
     520:	460a      	mov	r2, r1
     522:	71fb      	strb	r3, [r7, #7]
     524:	4613      	mov	r3, r2
     526:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     528:	79fb      	ldrb	r3, [r7, #7]
     52a:	115b      	asrs	r3, r3, #5
     52c:	b2d8      	uxtb	r0, r3
     52e:	79fb      	ldrb	r3, [r7, #7]
     530:	f003 031f 	and.w	r3, r3, #31
     534:	2201      	movs	r2, #1
     536:	fa02 f303 	lsl.w	r3, r2, r3
     53a:	79ba      	ldrb	r2, [r7, #6]
     53c:	4619      	mov	r1, r3
     53e:	4b03      	ldr	r3, [pc, #12]	; (54c <gpio_set_pin_level+0x34>)
     540:	4798      	blx	r3
}
     542:	bf00      	nop
     544:	3708      	adds	r7, #8
     546:	46bd      	mov	sp, r7
     548:	bd80      	pop	{r7, pc}
     54a:	bf00      	nop
     54c:	00000435 	.word	0x00000435

00000550 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     550:	b580      	push	{r7, lr}
     552:	b082      	sub	sp, #8
     554:	af00      	add	r7, sp, #0
     556:	4603      	mov	r3, r0
     558:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     55a:	79fb      	ldrb	r3, [r7, #7]
     55c:	115b      	asrs	r3, r3, #5
     55e:	b2d8      	uxtb	r0, r3
     560:	79fb      	ldrb	r3, [r7, #7]
     562:	f003 031f 	and.w	r3, r3, #31
     566:	2201      	movs	r2, #1
     568:	fa02 f303 	lsl.w	r3, r2, r3
     56c:	4619      	mov	r1, r3
     56e:	4b03      	ldr	r3, [pc, #12]	; (57c <gpio_toggle_pin_level+0x2c>)
     570:	4798      	blx	r3
}
     572:	bf00      	nop
     574:	3708      	adds	r7, #8
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop
     57c:	00000479 	.word	0x00000479

00000580 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     580:	b580      	push	{r7, lr}
     582:	b082      	sub	sp, #8
     584:	af00      	add	r7, sp, #0
     586:	4603      	mov	r3, r0
     588:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     58a:	79fb      	ldrb	r3, [r7, #7]
     58c:	115b      	asrs	r3, r3, #5
     58e:	b2db      	uxtb	r3, r3
     590:	4618      	mov	r0, r3
     592:	4b09      	ldr	r3, [pc, #36]	; (5b8 <gpio_get_pin_level+0x38>)
     594:	4798      	blx	r3
     596:	4601      	mov	r1, r0
     598:	79fb      	ldrb	r3, [r7, #7]
     59a:	f003 031f 	and.w	r3, r3, #31
     59e:	2201      	movs	r2, #1
     5a0:	fa02 f303 	lsl.w	r3, r2, r3
     5a4:	400b      	ands	r3, r1
     5a6:	2b00      	cmp	r3, #0
     5a8:	bf14      	ite	ne
     5aa:	2301      	movne	r3, #1
     5ac:	2300      	moveq	r3, #0
     5ae:	b2db      	uxtb	r3, r3
}
     5b0:	4618      	mov	r0, r3
     5b2:	3708      	adds	r7, #8
     5b4:	46bd      	mov	sp, r7
     5b6:	bd80      	pop	{r7, pc}
     5b8:	000004a1 	.word	0x000004a1

000005bc <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
     5bc:	b480      	push	{r7}
     5be:	b083      	sub	sp, #12
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
     5c4:	4b07      	ldr	r3, [pc, #28]	; (5e4 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	2201      	movs	r2, #1
     5ca:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	2201      	movs	r2, #1
     5d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
     5d8:	bf00      	nop
     5da:	370c      	adds	r7, #12
     5dc:	46bd      	mov	sp, r7
     5de:	bc80      	pop	{r7}
     5e0:	4770      	bx	lr
     5e2:	bf00      	nop
     5e4:	200007a4 	.word	0x200007a4

000005e8 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
     5f0:	4b07      	ldr	r3, [pc, #28]	; (610 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
     5f2:	685b      	ldr	r3, [r3, #4]
     5f4:	2201      	movs	r2, #1
     5f6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
     5fa:	4b05      	ldr	r3, [pc, #20]	; (610 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
     5fc:	685b      	ldr	r3, [r3, #4]
     5fe:	2201      	movs	r2, #1
     600:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
     604:	bf00      	nop
     606:	370c      	adds	r7, #12
     608:	46bd      	mov	sp, r7
     60a:	bc80      	pop	{r7}
     60c:	4770      	bx	lr
     60e:	bf00      	nop
     610:	200007a4 	.word	0x200007a4

00000614 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
     614:	b480      	push	{r7}
     616:	b083      	sub	sp, #12
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
     61c:	4b04      	ldr	r3, [pc, #16]	; (630 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	2201      	movs	r2, #1
     622:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
     626:	bf00      	nop
     628:	370c      	adds	r7, #12
     62a:	46bd      	mov	sp, r7
     62c:	bc80      	pop	{r7}
     62e:	4770      	bx	lr
     630:	200007a4 	.word	0x200007a4

00000634 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
     634:	b480      	push	{r7}
     636:	b083      	sub	sp, #12
     638:	af00      	add	r7, sp, #0
     63a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
     63e:	685b      	ldr	r3, [r3, #4]
     640:	2201      	movs	r2, #1
     642:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
     646:	bf00      	nop
     648:	370c      	adds	r7, #12
     64a:	46bd      	mov	sp, r7
     64c:	bc80      	pop	{r7}
     64e:	4770      	bx	lr
     650:	200007a4 	.word	0x200007a4

00000654 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
     654:	b480      	push	{r7}
     656:	b083      	sub	sp, #12
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
     65c:	4b04      	ldr	r3, [pc, #16]	; (670 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
     65e:	681b      	ldr	r3, [r3, #0]
     660:	2201      	movs	r2, #1
     662:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
     666:	bf00      	nop
     668:	370c      	adds	r7, #12
     66a:	46bd      	mov	sp, r7
     66c:	bc80      	pop	{r7}
     66e:	4770      	bx	lr
     670:	200007a4 	.word	0x200007a4

00000674 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
     674:	b480      	push	{r7}
     676:	b083      	sub	sp, #12
     678:	af00      	add	r7, sp, #0
     67a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
     67c:	4b04      	ldr	r3, [pc, #16]	; (690 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
     67e:	685b      	ldr	r3, [r3, #4]
     680:	2201      	movs	r2, #1
     682:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
     686:	bf00      	nop
     688:	370c      	adds	r7, #12
     68a:	46bd      	mov	sp, r7
     68c:	bc80      	pop	{r7}
     68e:	4770      	bx	lr
     690:	200007a4 	.word	0x200007a4

00000694 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
     694:	b580      	push	{r7, lr}
     696:	b082      	sub	sp, #8
     698:	af00      	add	r7, sp, #0
     69a:	6078      	str	r0, [r7, #4]
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	4618      	mov	r0, r3
     6a0:	4b1f      	ldr	r3, [pc, #124]	; (720 <_ZN22FlapperValveControllerC1Ev+0x8c>)
     6a2:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	4a1f      	ldr	r2, [pc, #124]	; (724 <_ZN22FlapperValveControllerC1Ev+0x90>)
     6a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	2200      	movs	r2, #0
     6b0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	2200      	movs	r2, #0
     6b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	2200      	movs	r2, #0
     6c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	2200      	movs	r2, #0
     6c8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	2200      	movs	r2, #0
     6d0:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	22da      	movs	r2, #218	; 0xda
     6d8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	2200      	movs	r2, #0
     6e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	2200      	movs	r2, #0
     6e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	2200      	movs	r2, #0
     6f0:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	2200      	movs	r2, #0
     6f8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	2200      	movs	r2, #0
     700:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
     704:	687b      	ldr	r3, [r7, #4]
     706:	2200      	movs	r2, #0
     708:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	partner=NULL;
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	2200      	movs	r2, #0
     710:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	
	
} //FlapperValveController
     714:	687b      	ldr	r3, [r7, #4]
     716:	4618      	mov	r0, r3
     718:	3708      	adds	r7, #8
     71a:	46bd      	mov	sp, r7
     71c:	bd80      	pop	{r7, pc}
     71e:	bf00      	nop
     720:	000019ad 	.word	0x000019ad
     724:	200007ac 	.word	0x200007ac

00000728 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	687b      	ldr	r3, [r7, #4]
     732:	4618      	mov	r0, r3
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <_ZN22FlapperValveControllerD1Ev+0x1c>)
     736:	4798      	blx	r3
{
} //~FlapperValveController
     738:	687b      	ldr	r3, [r7, #4]
     73a:	4618      	mov	r0, r3
     73c:	3708      	adds	r7, #8
     73e:	46bd      	mov	sp, r7
     740:	bd80      	pop	{r7, pc}
     742:	bf00      	nop
     744:	000019f9 	.word	0x000019f9

00000748 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
     750:	460b      	mov	r3, r1
     752:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
     754:	78fb      	ldrb	r3, [r7, #3]
     756:	491b      	ldr	r1, [pc, #108]	; (7c4 <_ZN22FlapperValveController14InitControllerEh+0x7c>)
     758:	687a      	ldr	r2, [r7, #4]
     75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
     75e:	687b      	ldr	r3, [r7, #4]
     760:	78fa      	ldrb	r2, [r7, #3]
     762:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
     766:	78fa      	ldrb	r2, [r7, #3]
     768:	4613      	mov	r3, r2
     76a:	011b      	lsls	r3, r3, #4
     76c:	1a9b      	subs	r3, r3, r2
     76e:	00db      	lsls	r3, r3, #3
     770:	4a15      	ldr	r2, [pc, #84]	; (7c8 <_ZN22FlapperValveController14InitControllerEh+0x80>)
     772:	441a      	add	r2, r3
     774:	687b      	ldr	r3, [r7, #4]
     776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
     77a:	78fb      	ldrb	r3, [r7, #3]
     77c:	78fa      	ldrb	r2, [r7, #3]
     77e:	0112      	lsls	r2, r2, #4
     780:	4912      	ldr	r1, [pc, #72]	; (7cc <_ZN22FlapperValveController14InitControllerEh+0x84>)
     782:	440a      	add	r2, r1
     784:	6879      	ldr	r1, [r7, #4]
     786:	3332      	adds	r3, #50	; 0x32
     788:	009b      	lsls	r3, r3, #2
     78a:	440b      	add	r3, r1
     78c:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
     78e:	687b      	ldr	r3, [r7, #4]
     790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     794:	78fa      	ldrb	r2, [r7, #3]
     796:	4611      	mov	r1, r2
     798:	4618      	mov	r0, r3
     79a:	4b0d      	ldr	r3, [pc, #52]	; (7d0 <_ZN22FlapperValveController14InitControllerEh+0x88>)
     79c:	4798      	blx	r3
     79e:	4603      	mov	r3, r0
     7a0:	2b00      	cmp	r3, #0
     7a2:	d007      	beq.n	7b4 <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
     7a4:	6878      	ldr	r0, [r7, #4]
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <_ZN22FlapperValveController14InitControllerEh+0x8c>)
     7a8:	4798      	blx	r3
     7aa:	4603      	mov	r3, r0
     7ac:	461a      	mov	r2, r3
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
     7ba:	b2db      	uxtb	r3, r3
}
     7bc:	4618      	mov	r0, r3
     7be:	3708      	adds	r7, #8
     7c0:	46bd      	mov	sp, r7
     7c2:	bd80      	pop	{r7, pc}
     7c4:	200007a4 	.word	0x200007a4
     7c8:	200007ac 	.word	0x200007ac
     7cc:	20000784 	.word	0x20000784
     7d0:	00001aad 	.word	0x00001aad
     7d4:	00001619 	.word	0x00001619

000007d8 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
     7d8:	b480      	push	{r7}
     7da:	b083      	sub	sp, #12
     7dc:	af00      	add	r7, sp, #0
     7de:	6078      	str	r0, [r7, #4]
     7e0:	460b      	mov	r3, r1
     7e2:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     7f6:	461a      	mov	r2, r3
     7f8:	78fb      	ldrb	r3, [r7, #3]
     7fa:	429a      	cmp	r2, r3
     7fc:	bfcc      	ite	gt
     7fe:	2301      	movgt	r3, #1
     800:	2300      	movle	r3, #0
     802:	b2da      	uxtb	r2, r3
     804:	687b      	ldr	r3, [r7, #4]
     806:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
     810:	4618      	mov	r0, r3
     812:	370c      	adds	r7, #12
     814:	46bd      	mov	sp, r7
     816:	bc80      	pop	{r7}
     818:	4770      	bx	lr
	...

0000081c <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
     824:	687b      	ldr	r3, [r7, #4]
     826:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
     82a:	4619      	mov	r1, r3
     82c:	6878      	ldr	r0, [r7, #4]
     82e:	4b03      	ldr	r3, [pc, #12]	; (83c <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
     830:	4798      	blx	r3
     832:	4603      	mov	r3, r0
	
}
     834:	4618      	mov	r0, r3
     836:	3708      	adds	r7, #8
     838:	46bd      	mov	sp, r7
     83a:	bd80      	pop	{r7, pc}
     83c:	000007d9 	.word	0x000007d9

00000840 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
     840:	b590      	push	{r4, r7, lr}
     842:	b083      	sub	sp, #12
     844:	af00      	add	r7, sp, #0
     846:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
     848:	687b      	ldr	r3, [r7, #4]
     84a:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
     84e:	687b      	ldr	r3, [r7, #4]
     850:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
     854:	687b      	ldr	r3, [r7, #4]
     856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     85a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
     85e:	2b00      	cmp	r3, #0
     860:	d009      	beq.n	876 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
     862:	687b      	ldr	r3, [r7, #4]
     864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     868:	2100      	movs	r1, #0
     86a:	4618      	mov	r0, r3
     86c:	4b0b      	ldr	r3, [pc, #44]	; (89c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
     86e:	4798      	blx	r3
		delay_ms(10);
     870:	200a      	movs	r0, #10
     872:	4b0b      	ldr	r3, [pc, #44]	; (8a0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
     874:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
     876:	687b      	ldr	r3, [r7, #4]
     878:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
     87c:	6878      	ldr	r0, [r7, #4]
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
     880:	4798      	blx	r3
     882:	4603      	mov	r3, r0
     884:	4619      	mov	r1, r3
     886:	4620      	mov	r0, r4
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
     88a:	4798      	blx	r3
	StartMotor();
     88c:	6878      	ldr	r0, [r7, #4]
     88e:	4b07      	ldr	r3, [pc, #28]	; (8ac <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
     890:	4798      	blx	r3
	return 0;
     892:	2300      	movs	r3, #0
}
     894:	4618      	mov	r0, r3
     896:	370c      	adds	r7, #12
     898:	46bd      	mov	sp, r7
     89a:	bd90      	pop	{r4, r7, pc}
     89c:	00001c0d 	.word	0x00001c0d
     8a0:	00003eb5 	.word	0x00003eb5
     8a4:	0000081d 	.word	0x0000081d
     8a8:	00001c8d 	.word	0x00001c8d
     8ac:	00001281 	.word	0x00001281

000008b0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
     8b8:	6878      	ldr	r0, [r7, #4]
     8ba:	4b13      	ldr	r3, [pc, #76]	; (908 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
     8bc:	4798      	blx	r3
     8be:	4603      	mov	r3, r0
     8c0:	2b00      	cmp	r3, #0
     8c2:	d003      	beq.n	8cc <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
     8c4:	6878      	ldr	r0, [r7, #4]
     8c6:	4b11      	ldr	r3, [pc, #68]	; (90c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
     8c8:	4798      	blx	r3
     8ca:	e013      	b.n	8f4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
     8d2:	2b00      	cmp	r3, #0
     8d4:	d00b      	beq.n	8ee <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
     8dc:	4619      	mov	r1, r3
     8de:	6878      	ldr	r0, [r7, #4]
     8e0:	4b0b      	ldr	r3, [pc, #44]	; (910 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
     8e2:	4798      	blx	r3
			NBC_Activated=false;
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	2200      	movs	r2, #0
     8e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
     8ec:	e002      	b.n	8f4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
     8ee:	6878      	ldr	r0, [r7, #4]
     8f0:	4b08      	ldr	r3, [pc, #32]	; (914 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
     8f2:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
     8fa:	f083 0301 	eor.w	r3, r3, #1
     8fe:	b2db      	uxtb	r3, r3
}
     900:	4618      	mov	r0, r3
     902:	3708      	adds	r7, #8
     904:	46bd      	mov	sp, r7
     906:	bd80      	pop	{r7, pc}
     908:	00001005 	.word	0x00001005
     90c:	00000fa5 	.word	0x00000fa5
     910:	000012d5 	.word	0x000012d5
     914:	00000c0d 	.word	0x00000c0d

00000918 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
     918:	b590      	push	{r4, r7, lr}
     91a:	b085      	sub	sp, #20
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
	bool result=false;
     920:	2300      	movs	r3, #0
     922:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
     924:	687b      	ldr	r3, [r7, #4]
     926:	33c7      	adds	r3, #199	; 0xc7
     928:	4619      	mov	r1, r3
     92a:	4817      	ldr	r0, [pc, #92]	; (988 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
     92c:	4b17      	ldr	r3, [pc, #92]	; (98c <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
     92e:	4798      	blx	r3
	UpdateFlapperValveData();
     930:	6878      	ldr	r0, [r7, #4]
     932:	4b17      	ldr	r3, [pc, #92]	; (990 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
     934:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
     936:	687b      	ldr	r3, [r7, #4]
     938:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
     93c:	f083 0301 	eor.w	r3, r3, #1
     940:	b2db      	uxtb	r3, r3
     942:	461c      	mov	r4, r3
     944:	6878      	ldr	r0, [r7, #4]
     946:	4b13      	ldr	r3, [pc, #76]	; (994 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
     948:	4798      	blx	r3
     94a:	4603      	mov	r3, r0
     94c:	f083 0301 	eor.w	r3, r3, #1
     950:	b2db      	uxtb	r3, r3
     952:	4023      	ands	r3, r4
     954:	2b00      	cmp	r3, #0
     956:	bf14      	ite	ne
     958:	2301      	movne	r3, #1
     95a:	2300      	moveq	r3, #0
     95c:	b2db      	uxtb	r3, r3
     95e:	2b00      	cmp	r3, #0
     960:	d00d      	beq.n	97e <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
     962:	687b      	ldr	r3, [r7, #4]
     964:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     968:	461a      	mov	r2, r3
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
     970:	429a      	cmp	r2, r3
     972:	dd02      	ble.n	97a <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
     974:	2301      	movs	r3, #1
     976:	73fb      	strb	r3, [r7, #15]
     978:	e001      	b.n	97e <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
     97a:	2300      	movs	r3, #0
     97c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
     97e:	7bfb      	ldrb	r3, [r7, #15]
}
     980:	4618      	mov	r0, r3
     982:	3714      	adds	r7, #20
     984:	46bd      	mov	sp, r7
     986:	bd90      	pop	{r4, r7, pc}
     988:	20002880 	.word	0x20002880
     98c:	0000f5a9 	.word	0x0000f5a9
     990:	000014ad 	.word	0x000014ad
     994:	00001005 	.word	0x00001005

00000998 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
     998:	b580      	push	{r7, lr}
     99a:	b082      	sub	sp, #8
     99c:	af00      	add	r7, sp, #0
     99e:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
     9a0:	6878      	ldr	r0, [r7, #4]
     9a2:	4b1c      	ldr	r3, [pc, #112]	; (a14 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
     9a4:	4798      	blx	r3
     9a6:	4603      	mov	r3, r0
     9a8:	461a      	mov	r2, r3
     9aa:	687b      	ldr	r3, [r7, #4]
     9ac:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
     9b0:	b2db      	uxtb	r3, r3
     9b2:	f083 0301 	eor.w	r3, r3, #1
     9b6:	b2db      	uxtb	r3, r3
     9b8:	4013      	ands	r3, r2
     9ba:	2b00      	cmp	r3, #0
     9bc:	bf14      	ite	ne
     9be:	2301      	movne	r3, #1
     9c0:	2300      	moveq	r3, #0
     9c2:	b2db      	uxtb	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	d003      	beq.n	9d0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
     9c8:	6878      	ldr	r0, [r7, #4]
     9ca:	4b13      	ldr	r3, [pc, #76]	; (a18 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
     9cc:	4798      	blx	r3
     9ce:	e019      	b.n	a04 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
     9d6:	2b00      	cmp	r3, #0
     9d8:	d011      	beq.n	9fe <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     9e0:	2100      	movs	r1, #0
     9e2:	4618      	mov	r0, r3
     9e4:	4b0d      	ldr	r3, [pc, #52]	; (a1c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
     9e6:	4798      	blx	r3
			delay_us(10);
     9e8:	200a      	movs	r0, #10
     9ea:	4b0d      	ldr	r3, [pc, #52]	; (a20 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
     9ec:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     9f4:	2101      	movs	r1, #1
     9f6:	4618      	mov	r0, r3
     9f8:	4b08      	ldr	r3, [pc, #32]	; (a1c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
     9fa:	4798      	blx	r3
     9fc:	e002      	b.n	a04 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
     9fe:	6878      	ldr	r0, [r7, #4]
     a00:	4b08      	ldr	r3, [pc, #32]	; (a24 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
     a02:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
     a0a:	b2db      	uxtb	r3, r3
}
     a0c:	4618      	mov	r0, r3
     a0e:	3708      	adds	r7, #8
     a10:	46bd      	mov	sp, r7
     a12:	bd80      	pop	{r7, pc}
     a14:	00000919 	.word	0x00000919
     a18:	00000ddd 	.word	0x00000ddd
     a1c:	00001d05 	.word	0x00001d05
     a20:	00003e81 	.word	0x00003e81
     a24:	00000a29 	.word	0x00000a29

00000a28 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
     a28:	b580      	push	{r7, lr}
     a2a:	b082      	sub	sp, #8
     a2c:	af00      	add	r7, sp, #0
     a2e:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
     a30:	6878      	ldr	r0, [r7, #4]
     a32:	4b29      	ldr	r3, [pc, #164]	; (ad8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
     a34:	4798      	blx	r3
     a36:	4603      	mov	r3, r0
     a38:	2b00      	cmp	r3, #0
     a3a:	d031      	beq.n	aa0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	2201      	movs	r2, #1
     a40:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
     a4a:	2b00      	cmp	r3, #0
     a4c:	d003      	beq.n	a56 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
     a4e:	6878      	ldr	r0, [r7, #4]
     a50:	4b22      	ldr	r3, [pc, #136]	; (adc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
     a52:	4798      	blx	r3
     a54:	e038      	b.n	ac8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     a5c:	461a      	mov	r2, r3
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
     a64:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
     a68:	429a      	cmp	r2, r3
     a6a:	dd0c      	ble.n	a86 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
     a72:	43db      	mvns	r3, r3
     a74:	b2db      	uxtb	r3, r3
     a76:	4619      	mov	r1, r3
     a78:	6878      	ldr	r0, [r7, #4]
     a7a:	4b19      	ldr	r3, [pc, #100]	; (ae0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
     a7c:	4798      	blx	r3
					standAloneReturning=true;
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	2201      	movs	r2, #1
     a82:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
     a8c:	43db      	mvns	r3, r3
     a8e:	b2da      	uxtb	r2, r3
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	2201      	movs	r2, #1
     a9a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     a9e:	e013      	b.n	ac8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	2200      	movs	r2, #0
     aa4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
     aae:	2b00      	cmp	r3, #0
     ab0:	d007      	beq.n	ac2 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	2200      	movs	r2, #0
     ab6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	2200      	movs	r2, #0
     abe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
     ac2:	6878      	ldr	r0, [r7, #4]
     ac4:	4b05      	ldr	r3, [pc, #20]	; (adc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
     ac6:	4798      	blx	r3
		
	}
	return standAloneMode;
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
     ace:	4618      	mov	r0, r3
     ad0:	3708      	adds	r7, #8
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	bf00      	nop
     ad8:	00000ae5 	.word	0x00000ae5
     adc:	000008b1 	.word	0x000008b1
     ae0:	000012d5 	.word	0x000012d5

00000ae4 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
     ae4:	b480      	push	{r7}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
	
	bool result=false;
     aec:	2300      	movs	r3, #0
     aee:	73fb      	strb	r3, [r7, #15]
	if (partner!=NULL)
     af0:	687b      	ldr	r3, [r7, #4]
     af2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
     af6:	2b00      	cmp	r3, #0
     af8:	d011      	beq.n	b1e <_ZN22FlapperValveController16IsStandAloneModeEv+0x3a>
	{
		if (partner->isOK)
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
     b00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
     b04:	b2db      	uxtb	r3, r3
     b06:	2b00      	cmp	r3, #0
     b08:	d006      	beq.n	b18 <_ZN22FlapperValveController16IsStandAloneModeEv+0x34>
		{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
     b10:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
     b14:	73fb      	strb	r3, [r7, #15]
     b16:	e004      	b.n	b22 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
		else
		{
			result=true;
     b18:	2301      	movs	r3, #1
     b1a:	73fb      	strb	r3, [r7, #15]
     b1c:	e001      	b.n	b22 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
	} 
	else
	{
		result=true;
     b1e:	2301      	movs	r3, #1
     b20:	73fb      	strb	r3, [r7, #15]
	}
	


	return result;
     b22:	7bfb      	ldrb	r3, [r7, #15]
}
     b24:	4618      	mov	r0, r3
     b26:	3714      	adds	r7, #20
     b28:	46bd      	mov	sp, r7
     b2a:	bc80      	pop	{r7}
     b2c:	4770      	bx	lr
	...

00000b30 <_ZN22FlapperValveController14CheckIsClosingEv>:


void FlapperValveController::SetPartner(FlapperValveController *part){
	partner=part;
}
bool FlapperValveController::CheckIsClosing(void){
     b30:	b580      	push	{r7, lr}
     b32:	b082      	sub	sp, #8
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
     b3e:	2b05      	cmp	r3, #5
     b40:	bfd4      	ite	le
     b42:	2301      	movle	r3, #1
     b44:	2300      	movgt	r3, #0
     b46:	b2da      	uxtb	r2, r3
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     b4e:	2b05      	cmp	r3, #5
     b50:	bfd4      	ite	le
     b52:	2301      	movle	r3, #1
     b54:	2300      	movgt	r3, #0
     b56:	b2db      	uxtb	r3, r3
     b58:	4013      	ands	r3, r2
     b5a:	b2da      	uxtb	r2, r3
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
     b62:	2bfa      	cmp	r3, #250	; 0xfa
     b64:	bfcc      	ite	gt
     b66:	2301      	movgt	r3, #1
     b68:	2300      	movle	r3, #0
     b6a:	b2d9      	uxtb	r1, r3
     b6c:	687b      	ldr	r3, [r7, #4]
     b6e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     b72:	2bf5      	cmp	r3, #245	; 0xf5
     b74:	bfcc      	ite	gt
     b76:	2301      	movgt	r3, #1
     b78:	2300      	movle	r3, #0
     b7a:	b2db      	uxtb	r3, r3
     b7c:	400b      	ands	r3, r1
     b7e:	b2db      	uxtb	r3, r3
     b80:	4313      	orrs	r3, r2
     b82:	b2db      	uxtb	r3, r3
     b84:	461a      	mov	r2, r3
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
     b8c:	f083 0301 	eor.w	r3, r3, #1
     b90:	b2db      	uxtb	r3, r3
     b92:	4619      	mov	r1, r3
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
     b9a:	b2db      	uxtb	r3, r3
     b9c:	400b      	ands	r3, r1
     b9e:	4013      	ands	r3, r2
     ba0:	2b00      	cmp	r3, #0
     ba2:	bf14      	ite	ne
     ba4:	2301      	movne	r3, #1
     ba6:	2300      	moveq	r3, #0
     ba8:	b2db      	uxtb	r3, r3
     baa:	2b00      	cmp	r3, #0
     bac:	d01f      	beq.n	bee <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     bb4:	2b00      	cmp	r3, #0
     bb6:	d105      	bne.n	bc4 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
     bb8:	22c8      	movs	r2, #200	; 0xc8
     bba:	4910      	ldr	r1, [pc, #64]	; (bfc <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
     bbc:	4810      	ldr	r0, [pc, #64]	; (c00 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
     bbe:	4b11      	ldr	r3, [pc, #68]	; (c04 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
     bc0:	4798      	blx	r3
     bc2:	e004      	b.n	bce <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
     bc4:	22c8      	movs	r2, #200	; 0xc8
     bc6:	4910      	ldr	r1, [pc, #64]	; (c08 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
     bc8:	480d      	ldr	r0, [pc, #52]	; (c00 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
     bca:	4b0e      	ldr	r3, [pc, #56]	; (c04 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
     bcc:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	2200      	movs	r2, #0
     bd2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	2200      	movs	r2, #0
     bda:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	2201      	movs	r2, #1
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	2201      	movs	r2, #1
     bea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
     bee:	687b      	ldr	r3, [r7, #4]
     bf0:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
     bf4:	4618      	mov	r0, r3
     bf6:	3708      	adds	r7, #8
     bf8:	46bd      	mov	sp, r7
     bfa:	bd80      	pop	{r7, pc}
     bfc:	00000615 	.word	0x00000615
     c00:	200006c4 	.word	0x200006c4
     c04:	0000f2e5 	.word	0x0000f2e5
     c08:	00000635 	.word	0x00000635

00000c0c <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
     c0c:	b590      	push	{r4, r7, lr}
     c0e:	b083      	sub	sp, #12
     c10:	af00      	add	r7, sp, #0
     c12:	6078      	str	r0, [r7, #4]
	if (isControlling)
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
     c1a:	2b00      	cmp	r3, #0
     c1c:	f000 80c9 	beq.w	db2 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
     c20:	687b      	ldr	r3, [r7, #4]
     c22:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
     c2c:	4313      	orrs	r3, r2
     c2e:	b2db      	uxtb	r3, r3
     c30:	461a      	mov	r2, r3
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
     c38:	4013      	ands	r3, r2
     c3a:	687a      	ldr	r2, [r7, #4]
     c3c:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
     c40:	b2d2      	uxtb	r2, r2
     c42:	4013      	ands	r3, r2
     c44:	2b00      	cmp	r3, #0
     c46:	bf14      	ite	ne
     c48:	2301      	movne	r3, #1
     c4a:	2300      	moveq	r3, #0
     c4c:	b2db      	uxtb	r3, r3
     c4e:	2b00      	cmp	r3, #0
     c50:	d003      	beq.n	c5a <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
     c52:	6878      	ldr	r0, [r7, #4]
     c54:	4b59      	ldr	r3, [pc, #356]	; (dbc <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
     c56:	4798      	blx	r3
     c58:	e0ab      	b.n	db2 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
     c5a:	6878      	ldr	r0, [r7, #4]
     c5c:	4b58      	ldr	r3, [pc, #352]	; (dc0 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
     c5e:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     c66:	461a      	mov	r2, r3
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
     c6e:	1ad3      	subs	r3, r2, r3
     c70:	2b00      	cmp	r3, #0
     c72:	bfb8      	it	lt
     c74:	425b      	neglt	r3, r3
     c76:	687a      	ldr	r2, [r7, #4]
     c78:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
     c7c:	4293      	cmp	r3, r2
     c7e:	bfcc      	ite	gt
     c80:	2301      	movgt	r3, #1
     c82:	2300      	movle	r3, #0
     c84:	b2db      	uxtb	r3, r3
     c86:	461a      	mov	r2, r3
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
     c8e:	4313      	orrs	r3, r2
     c90:	2b00      	cmp	r3, #0
     c92:	d078      	beq.n	d86 <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
     c94:	6878      	ldr	r0, [r7, #4]
     c96:	4b4b      	ldr	r3, [pc, #300]	; (dc4 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
     c98:	4798      	blx	r3
     c9a:	4603      	mov	r3, r0
     c9c:	2b00      	cmp	r3, #0
     c9e:	d04a      	beq.n	d36 <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
     ca6:	2b00      	cmp	r3, #0
     ca8:	d00e      	beq.n	cc8 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
     cb0:	2b00      	cmp	r3, #0
     cb2:	d053      	beq.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     cba:	b2db      	uxtb	r3, r3
     cbc:	2b00      	cmp	r3, #0
     cbe:	d04d      	beq.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
     cc0:	6878      	ldr	r0, [r7, #4]
     cc2:	4b3e      	ldr	r3, [pc, #248]	; (dbc <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
     cc4:	4798      	blx	r3
     cc6:	e049      	b.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
     cce:	6878      	ldr	r0, [r7, #4]
     cd0:	4b3d      	ldr	r3, [pc, #244]	; (dc8 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
     cd2:	4798      	blx	r3
     cd4:	4603      	mov	r3, r0
     cd6:	429c      	cmp	r4, r3
     cd8:	bf14      	ite	ne
     cda:	2301      	movne	r3, #1
     cdc:	2300      	moveq	r3, #0
     cde:	b2db      	uxtb	r3, r3
     ce0:	2b00      	cmp	r3, #0
     ce2:	d00a      	beq.n	cfa <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
     ce4:	6878      	ldr	r0, [r7, #4]
     ce6:	4b39      	ldr	r3, [pc, #228]	; (dcc <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
     ce8:	4798      	blx	r3
							RemoveTimeoutTask();
     cea:	6878      	ldr	r0, [r7, #4]
     cec:	4b38      	ldr	r3, [pc, #224]	; (dd0 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
     cee:	4798      	blx	r3
							keepControlling=true;
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	2201      	movs	r2, #1
     cf4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
     cf8:	e030      	b.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
     d00:	b2db      	uxtb	r3, r3
     d02:	2b00      	cmp	r3, #0
     d04:	d003      	beq.n	d0e <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
     d06:	6878      	ldr	r0, [r7, #4]
     d08:	4b30      	ldr	r3, [pc, #192]	; (dcc <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
     d0a:	4798      	blx	r3
     d0c:	e026      	b.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
     d14:	2b00      	cmp	r3, #0
     d16:	d021      	beq.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
     d1e:	b2db      	uxtb	r3, r3
     d20:	2b00      	cmp	r3, #0
     d22:	d003      	beq.n	d2c <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
     d24:	6878      	ldr	r0, [r7, #4]
     d26:	4b29      	ldr	r3, [pc, #164]	; (dcc <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
     d28:	4798      	blx	r3
     d2a:	e017      	b.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
     d2c:	2100      	movs	r1, #0
     d2e:	6878      	ldr	r0, [r7, #4]
     d30:	4b28      	ldr	r3, [pc, #160]	; (dd4 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
     d32:	4798      	blx	r3
     d34:	e012      	b.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
     d3c:	2b00      	cmp	r3, #0
     d3e:	d00d      	beq.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
     d40:	687b      	ldr	r3, [r7, #4]
     d42:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
     d46:	b2db      	uxtb	r3, r3
     d48:	2b00      	cmp	r3, #0
     d4a:	d003      	beq.n	d54 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
     d4c:	6878      	ldr	r0, [r7, #4]
     d4e:	4b22      	ldr	r3, [pc, #136]	; (dd8 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
     d50:	4798      	blx	r3
     d52:	e003      	b.n	d5c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
     d54:	2100      	movs	r1, #0
     d56:	6878      	ldr	r0, [r7, #4]
     d58:	4b1e      	ldr	r3, [pc, #120]	; (dd4 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
     d5a:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     d62:	461a      	mov	r2, r3
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
     d6a:	1ad3      	subs	r3, r2, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	bfb8      	it	lt
     d70:	425b      	neglt	r3, r3
     d72:	687a      	ldr	r2, [r7, #4]
     d74:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
     d78:	4293      	cmp	r3, r2
     d7a:	dd1a      	ble.n	db2 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	2200      	movs	r2, #0
     d80:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
     d84:	e015      	b.n	db2 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
     d8c:	2b00      	cmp	r3, #0
     d8e:	d009      	beq.n	da4 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
     d96:	b2db      	uxtb	r3, r3
     d98:	2b00      	cmp	r3, #0
     d9a:	d00a      	beq.n	db2 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
     d9c:	6878      	ldr	r0, [r7, #4]
     d9e:	4b07      	ldr	r3, [pc, #28]	; (dbc <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
     da0:	4798      	blx	r3
     da2:	e006      	b.n	db2 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
     da4:	6878      	ldr	r0, [r7, #4]
     da6:	4b0c      	ldr	r3, [pc, #48]	; (dd8 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
     da8:	4798      	blx	r3
					gotSetpoint=true;
     daa:	687b      	ldr	r3, [r7, #4]
     dac:	2201      	movs	r2, #1
     dae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
     db2:	2300      	movs	r3, #0
	
}
     db4:	4618      	mov	r0, r3
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	bd90      	pop	{r4, r7, pc}
     dbc:	00001121 	.word	0x00001121
     dc0:	00000b31 	.word	0x00000b31
     dc4:	00001079 	.word	0x00001079
     dc8:	0000081d 	.word	0x0000081d
     dcc:	0000104d 	.word	0x0000104d
     dd0:	000017c5 	.word	0x000017c5
     dd4:	00001475 	.word	0x00001475
     dd8:	000011b9 	.word	0x000011b9

00000ddc <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
     ddc:	b580      	push	{r7, lr}
     dde:	b084      	sub	sp, #16
     de0:	af00      	add	r7, sp, #0
     de2:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
     de4:	2052      	movs	r0, #82	; 0x52
     de6:	4b60      	ldr	r3, [pc, #384]	; (f68 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
     de8:	4798      	blx	r3
     dea:	4603      	mov	r3, r0
     dec:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
     dee:	6878      	ldr	r0, [r7, #4]
     df0:	4b5e      	ldr	r3, [pc, #376]	; (f6c <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
     df2:	4798      	blx	r3
     df4:	4603      	mov	r3, r0
     df6:	2b00      	cmp	r3, #0
     df8:	f000 80b2 	beq.w	f60 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
     e02:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e0a:	2100      	movs	r1, #0
     e0c:	4618      	mov	r0, r3
     e0e:	4b58      	ldr	r3, [pc, #352]	; (f70 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
     e10:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e18:	2100      	movs	r1, #0
     e1a:	4618      	mov	r0, r3
     e1c:	4b55      	ldr	r3, [pc, #340]	; (f74 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
     e1e:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e26:	2100      	movs	r1, #0
     e28:	4618      	mov	r0, r3
     e2a:	4b53      	ldr	r3, [pc, #332]	; (f78 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
     e2c:	4798      	blx	r3
		delay_ms(100);
     e2e:	2064      	movs	r0, #100	; 0x64
     e30:	4b52      	ldr	r3, [pc, #328]	; (f7c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
     e32:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e3a:	4618      	mov	r0, r3
     e3c:	4b50      	ldr	r3, [pc, #320]	; (f80 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
     e3e:	4798      	blx	r3
     e40:	4603      	mov	r3, r0
     e42:	461a      	mov	r2, r3
     e44:	7bbb      	ldrb	r3, [r7, #14]
     e46:	429a      	cmp	r2, r3
     e48:	bfcc      	ite	gt
     e4a:	2301      	movgt	r3, #1
     e4c:	2300      	movle	r3, #0
     e4e:	b2db      	uxtb	r3, r3
     e50:	2b00      	cmp	r3, #0
     e52:	d007      	beq.n	e64 <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
     e54:	687b      	ldr	r3, [r7, #4]
     e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e5a:	2101      	movs	r1, #1
     e5c:	4618      	mov	r0, r3
     e5e:	4b49      	ldr	r3, [pc, #292]	; (f84 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
     e60:	4798      	blx	r3
     e62:	e006      	b.n	e72 <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e6a:	2100      	movs	r1, #0
     e6c:	4618      	mov	r0, r3
     e6e:	4b45      	ldr	r3, [pc, #276]	; (f84 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
     e70:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e78:	2101      	movs	r1, #1
     e7a:	4618      	mov	r0, r3
     e7c:	4b3d      	ldr	r3, [pc, #244]	; (f74 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
     e7e:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e86:	2101      	movs	r1, #1
     e88:	4618      	mov	r0, r3
     e8a:	4b3b      	ldr	r3, [pc, #236]	; (f78 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
     e8c:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     e94:	7bba      	ldrb	r2, [r7, #14]
     e96:	4611      	mov	r1, r2
     e98:	4618      	mov	r0, r3
     e9a:	4b3b      	ldr	r3, [pc, #236]	; (f88 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
     e9c:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     ea4:	4618      	mov	r0, r3
     ea6:	4b36      	ldr	r3, [pc, #216]	; (f80 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
     ea8:	4798      	blx	r3
     eaa:	4603      	mov	r3, r0
     eac:	461a      	mov	r2, r3
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
     eb4:	687b      	ldr	r3, [r7, #4]
     eb6:	2200      	movs	r2, #0
     eb8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
     ec2:	2b00      	cmp	r3, #0
     ec4:	d106      	bne.n	ed4 <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
     ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     eca:	4930      	ldr	r1, [pc, #192]	; (f8c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
     ecc:	4830      	ldr	r0, [pc, #192]	; (f90 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
     ece:	4b31      	ldr	r3, [pc, #196]	; (f94 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
     ed0:	4798      	blx	r3
     ed2:	e005      	b.n	ee0 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
     ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     ed8:	492f      	ldr	r1, [pc, #188]	; (f98 <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
     eda:	482d      	ldr	r0, [pc, #180]	; (f90 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
     edc:	4b2d      	ldr	r3, [pc, #180]	; (f94 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
     ede:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
     ee0:	687b      	ldr	r3, [r7, #4]
     ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     ee6:	2101      	movs	r1, #1
     ee8:	4618      	mov	r0, r3
     eea:	4b21      	ldr	r3, [pc, #132]	; (f70 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
     eec:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
     ef4:	461a      	mov	r2, r3
     ef6:	7bbb      	ldrb	r3, [r7, #14]
     ef8:	1ad3      	subs	r3, r2, r3
     efa:	2b00      	cmp	r3, #0
     efc:	bfb8      	it	lt
     efe:	425b      	neglt	r3, r3
     f00:	2b06      	cmp	r3, #6
     f02:	bfcc      	ite	gt
     f04:	2301      	movgt	r3, #1
     f06:	2300      	movle	r3, #0
     f08:	b2db      	uxtb	r3, r3
     f0a:	461a      	mov	r2, r3
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
     f12:	b2db      	uxtb	r3, r3
     f14:	f083 0301 	eor.w	r3, r3, #1
     f18:	b2db      	uxtb	r3, r3
     f1a:	4013      	ands	r3, r2
     f1c:	2b00      	cmp	r3, #0
     f1e:	bf14      	ite	ne
     f20:	2301      	movne	r3, #1
     f22:	2300      	moveq	r3, #0
     f24:	b2db      	uxtb	r3, r3
     f26:	2b00      	cmp	r3, #0
     f28:	d00e      	beq.n	f48 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
     f2a:	2052      	movs	r0, #82	; 0x52
     f2c:	4b1b      	ldr	r3, [pc, #108]	; (f9c <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
     f2e:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     f36:	4618      	mov	r0, r3
     f38:	4b11      	ldr	r3, [pc, #68]	; (f80 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
     f3a:	4798      	blx	r3
     f3c:	4603      	mov	r3, r0
     f3e:	461a      	mov	r2, r3
     f40:	687b      	ldr	r3, [r7, #4]
     f42:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
     f46:	e7d2      	b.n	eee <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
     f4e:	2100      	movs	r1, #0
     f50:	4618      	mov	r0, r3
     f52:	4b07      	ldr	r3, [pc, #28]	; (f70 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
     f54:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
     f56:	7bfb      	ldrb	r3, [r7, #15]
     f58:	4619      	mov	r1, r3
     f5a:	2052      	movs	r0, #82	; 0x52
     f5c:	4b10      	ldr	r3, [pc, #64]	; (fa0 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
     f5e:	4798      	blx	r3
	} 
	else
	{
	}
}
     f60:	bf00      	nop
     f62:	3710      	adds	r7, #16
     f64:	46bd      	mov	sp, r7
     f66:	bd80      	pop	{r7, pc}
     f68:	00000581 	.word	0x00000581
     f6c:	00000919 	.word	0x00000919
     f70:	00001c0d 	.word	0x00001c0d
     f74:	00001d7d 	.word	0x00001d7d
     f78:	00001d05 	.word	0x00001d05
     f7c:	00003eb5 	.word	0x00003eb5
     f80:	00001e2d 	.word	0x00001e2d
     f84:	00001c8d 	.word	0x00001c8d
     f88:	00001df5 	.word	0x00001df5
     f8c:	00000655 	.word	0x00000655
     f90:	200006c4 	.word	0x200006c4
     f94:	0000f2e5 	.word	0x0000f2e5
     f98:	00000675 	.word	0x00000675
     f9c:	00000551 	.word	0x00000551
     fa0:	00000519 	.word	0x00000519

00000fa4 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
     fa4:	b580      	push	{r7, lr}
     fa6:	b082      	sub	sp, #8
     fa8:	af00      	add	r7, sp, #0
     faa:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
     fb2:	2b00      	cmp	r3, #0
     fb4:	d014      	beq.n	fe0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
     fbc:	2b00      	cmp	r3, #0
     fbe:	d003      	beq.n	fc8 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
     fc0:	6878      	ldr	r0, [r7, #4]
     fc2:	4b0e      	ldr	r3, [pc, #56]	; (ffc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
     fc4:	4798      	blx	r3
     fc6:	e013      	b.n	ff0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
     fce:	4619      	mov	r1, r3
     fd0:	6878      	ldr	r0, [r7, #4]
     fd2:	4b0b      	ldr	r3, [pc, #44]	; (1000 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
     fd4:	4798      	blx	r3
			NBC_Activated=false;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	2200      	movs	r2, #0
     fda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
     fde:	e007      	b.n	ff0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
     fe0:	21ff      	movs	r1, #255	; 0xff
     fe2:	6878      	ldr	r0, [r7, #4]
     fe4:	4b06      	ldr	r3, [pc, #24]	; (1000 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
     fe6:	4798      	blx	r3
			NBC_Activated=true;
     fe8:	687b      	ldr	r3, [r7, #4]
     fea:	2201      	movs	r2, #1
     fec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
     ff0:	2300      	movs	r3, #0
	
}
     ff2:	4618      	mov	r0, r3
     ff4:	3708      	adds	r7, #8
     ff6:	46bd      	mov	sp, r7
     ff8:	bd80      	pop	{r7, pc}
     ffa:	bf00      	nop
     ffc:	00000c0d 	.word	0x00000c0d
    1000:	000012d5 	.word	0x000012d5

00001004 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    1004:	b480      	push	{r7}
    1006:	b083      	sub	sp, #12
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    1012:	461a      	mov	r2, r3
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
    101a:	4013      	ands	r3, r2
    101c:	687a      	ldr	r2, [r7, #4]
    101e:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
    1022:	4313      	orrs	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	bf14      	ite	ne
    1028:	2301      	movne	r3, #1
    102a:	2300      	moveq	r3, #0
    102c:	b2da      	uxtb	r2, r3
    102e:	687b      	ldr	r3, [r7, #4]
    1030:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	22ff      	movs	r2, #255	; 0xff
    1038:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
    1042:	4618      	mov	r0, r3
    1044:	370c      	adds	r7, #12
    1046:	46bd      	mov	sp, r7
    1048:	bc80      	pop	{r7}
    104a:	4770      	bx	lr

0000104c <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
    104c:	b580      	push	{r7, lr}
    104e:	b082      	sub	sp, #8
    1050:	af00      	add	r7, sp, #0
    1052:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    105a:	2100      	movs	r1, #0
    105c:	4618      	mov	r0, r3
    105e:	4b05      	ldr	r3, [pc, #20]	; (1074 <_ZN22FlapperValveController9StopMotorEv+0x28>)
    1060:	4798      	blx	r3
	flapperValveIsMoving=false;
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	2200      	movs	r2, #0
    1066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
    106a:	2300      	movs	r3, #0
}
    106c:	4618      	mov	r0, r3
    106e:	3708      	adds	r7, #8
    1070:	46bd      	mov	sp, r7
    1072:	bd80      	pop	{r7, pc}
    1074:	00001c0d 	.word	0x00001c0d

00001078 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
    1078:	b480      	push	{r7}
    107a:	b085      	sub	sp, #20
    107c:	af00      	add	r7, sp, #0
    107e:	6078      	str	r0, [r7, #4]
	bool_result=true;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	2201      	movs	r2, #1
    1084:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    108e:	b2db      	uxtb	r3, r3
    1090:	2b00      	cmp	r3, #0
    1092:	d03c      	beq.n	110e <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    1094:	2300      	movs	r3, #0
    1096:	73fb      	strb	r3, [r7, #15]
    1098:	7bfb      	ldrb	r3, [r7, #15]
    109a:	2b0e      	cmp	r3, #14
    109c:	dc26      	bgt.n	10ec <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    10a4:	687a      	ldr	r2, [r7, #4]
    10a6:	3332      	adds	r3, #50	; 0x32
    10a8:	009b      	lsls	r3, r3, #2
    10aa:	4413      	add	r3, r2
    10ac:	685a      	ldr	r2, [r3, #4]
    10ae:	7bfb      	ldrb	r3, [r7, #15]
    10b0:	4413      	add	r3, r2
    10b2:	781a      	ldrb	r2, [r3, #0]
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    10ba:	6879      	ldr	r1, [r7, #4]
    10bc:	3332      	adds	r3, #50	; 0x32
    10be:	009b      	lsls	r3, r3, #2
    10c0:	440b      	add	r3, r1
    10c2:	6859      	ldr	r1, [r3, #4]
    10c4:	7bfb      	ldrb	r3, [r7, #15]
    10c6:	3301      	adds	r3, #1
    10c8:	440b      	add	r3, r1
    10ca:	781b      	ldrb	r3, [r3, #0]
    10cc:	429a      	cmp	r2, r3
    10ce:	d104      	bne.n	10da <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	2200      	movs	r2, #0
    10d4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    10d8:	e004      	b.n	10e4 <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	2201      	movs	r2, #1
    10de:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
    10e2:	e003      	b.n	10ec <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    10e4:	7bfb      	ldrb	r3, [r7, #15]
    10e6:	3301      	adds	r3, #1
    10e8:	73fb      	strb	r3, [r7, #15]
    10ea:	e7d5      	b.n	1098 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    10f2:	b2db      	uxtb	r3, r3
    10f4:	461a      	mov	r2, r3
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    10fc:	4013      	ands	r3, r2
    10fe:	2b00      	cmp	r3, #0
    1100:	bf14      	ite	ne
    1102:	2301      	movne	r3, #1
    1104:	2300      	moveq	r3, #0
    1106:	b2da      	uxtb	r2, r3
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1114:	b2db      	uxtb	r3, r3
	
}
    1116:	4618      	mov	r0, r3
    1118:	3714      	adds	r7, #20
    111a:	46bd      	mov	sp, r7
    111c:	bc80      	pop	{r7}
    111e:	4770      	bx	lr

00001120 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
    1120:	b580      	push	{r7, lr}
    1122:	b082      	sub	sp, #8
    1124:	af00      	add	r7, sp, #0
    1126:	6078      	str	r0, [r7, #4]
		if (closing)
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    112e:	2b00      	cmp	r3, #0
    1130:	d003      	beq.n	113a <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	2200      	movs	r2, #0
    1136:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
    113a:	6878      	ldr	r0, [r7, #4]
    113c:	4b17      	ldr	r3, [pc, #92]	; (119c <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
    113e:	4798      	blx	r3
		if (valve_ID==0)
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    1146:	2b00      	cmp	r3, #0
    1148:	d108      	bne.n	115c <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    114a:	4915      	ldr	r1, [pc, #84]	; (11a0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
    114c:	4815      	ldr	r0, [pc, #84]	; (11a4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    114e:	4b16      	ldr	r3, [pc, #88]	; (11a8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    1150:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
    1152:	4916      	ldr	r1, [pc, #88]	; (11ac <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
    1154:	4813      	ldr	r0, [pc, #76]	; (11a4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    1156:	4b14      	ldr	r3, [pc, #80]	; (11a8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    1158:	4798      	blx	r3
    115a:	e007      	b.n	116c <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    115c:	4914      	ldr	r1, [pc, #80]	; (11b0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
    115e:	4811      	ldr	r0, [pc, #68]	; (11a4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    1160:	4b11      	ldr	r3, [pc, #68]	; (11a8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    1162:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
    1164:	4913      	ldr	r1, [pc, #76]	; (11b4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
    1166:	480f      	ldr	r0, [pc, #60]	; (11a4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    1168:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    116a:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	2200      	movs	r2, #0
    1170:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	2200      	movs	r2, #0
    1178:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	2200      	movs	r2, #0
    1180:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	2200      	movs	r2, #0
    1188:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	2200      	movs	r2, #0
    1190:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
    1194:	bf00      	nop
    1196:	3708      	adds	r7, #8
    1198:	46bd      	mov	sp, r7
    119a:	bd80      	pop	{r7, pc}
    119c:	0000104d 	.word	0x0000104d
    11a0:	000005bd 	.word	0x000005bd
    11a4:	200006c4 	.word	0x200006c4
    11a8:	0000f28d 	.word	0x0000f28d
    11ac:	00000615 	.word	0x00000615
    11b0:	000005e9 	.word	0x000005e9
    11b4:	00000635 	.word	0x00000635

000011b8 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    11b8:	b580      	push	{r7, lr}
    11ba:	b082      	sub	sp, #8
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
		StopMotor();
    11c0:	6878      	ldr	r0, [r7, #4]
    11c2:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
    11c4:	4798      	blx	r3
		RemoveTimeoutTask();
    11c6:	6878      	ldr	r0, [r7, #4]
    11c8:	4b0b      	ldr	r3, [pc, #44]	; (11f8 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    11ca:	4798      	blx	r3
		timeoutFlapperValveController=false;
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	2200      	movs	r2, #0
    11d0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
    11d4:	687b      	ldr	r3, [r7, #4]
    11d6:	2200      	movs	r2, #0
    11d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	2200      	movs	r2, #0
    11e0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	2201      	movs	r2, #1
    11e8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
    11ec:	bf00      	nop
    11ee:	3708      	adds	r7, #8
    11f0:	46bd      	mov	sp, r7
    11f2:	bd80      	pop	{r7, pc}
    11f4:	0000104d 	.word	0x0000104d
    11f8:	000017c5 	.word	0x000017c5

000011fc <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    11fc:	b580      	push	{r7, lr}
    11fe:	b084      	sub	sp, #16
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	460b      	mov	r3, r1
    1206:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    1208:	78fb      	ldrb	r3, [r7, #3]
    120a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    120e:	2b00      	cmp	r3, #0
    1210:	dd0c      	ble.n	122c <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
    1212:	78fb      	ldrb	r3, [r7, #3]
    1214:	43db      	mvns	r3, r3
    1216:	009b      	lsls	r3, r3, #2
    1218:	2b00      	cmp	r3, #0
    121a:	da00      	bge.n	121e <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
    121c:	33ff      	adds	r3, #255	; 0xff
    121e:	121b      	asrs	r3, r3, #8
    1220:	461a      	mov	r2, r3
    1222:	4b15      	ldr	r3, [pc, #84]	; (1278 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
    1224:	4610      	mov	r0, r2
    1226:	4798      	blx	r3
    1228:	4603      	mov	r3, r0
    122a:	e00b      	b.n	1244 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
    122c:	78fb      	ldrb	r3, [r7, #3]
    122e:	3bff      	subs	r3, #255	; 0xff
    1230:	009b      	lsls	r3, r3, #2
    1232:	2b00      	cmp	r3, #0
    1234:	da00      	bge.n	1238 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    1236:	33ff      	adds	r3, #255	; 0xff
    1238:	121b      	asrs	r3, r3, #8
    123a:	461a      	mov	r2, r3
    123c:	4b0e      	ldr	r3, [pc, #56]	; (1278 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
    123e:	4610      	mov	r0, r2
    1240:	4798      	blx	r3
    1242:	4603      	mov	r3, r0
    1244:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    1246:	4b0d      	ldr	r3, [pc, #52]	; (127c <_ZN22FlapperValveController16CorrectToleranceEh+0x80>)
    1248:	68f8      	ldr	r0, [r7, #12]
    124a:	4798      	blx	r3
    124c:	4603      	mov	r3, r0
    124e:	b2da      	uxtb	r2, r3
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	if (tolerance<1)
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    125c:	2b00      	cmp	r3, #0
    125e:	dc03      	bgt.n	1268 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>
	{
		tolerance=0x01;
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	2201      	movs	r2, #1
    1264:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	}
	return tolerance;
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
    126e:	4618      	mov	r0, r3
    1270:	3710      	adds	r7, #16
    1272:	46bd      	mov	sp, r7
    1274:	bd80      	pop	{r7, pc}
    1276:	bf00      	nop
    1278:	00010bc9 	.word	0x00010bc9
    127c:	00010c71 	.word	0x00010c71

00001280 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    128e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    1292:	2b00      	cmp	r3, #0
    1294:	d009      	beq.n	12aa <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    129c:	2100      	movs	r1, #0
    129e:	4618      	mov	r0, r3
    12a0:	4b0a      	ldr	r3, [pc, #40]	; (12cc <_ZN22FlapperValveController10StartMotorEv+0x4c>)
    12a2:	4798      	blx	r3
		delay_ms(10);
    12a4:	200a      	movs	r0, #10
    12a6:	4b0a      	ldr	r3, [pc, #40]	; (12d0 <_ZN22FlapperValveController10StartMotorEv+0x50>)
    12a8:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    12b0:	2101      	movs	r1, #1
    12b2:	4618      	mov	r0, r3
    12b4:	4b05      	ldr	r3, [pc, #20]	; (12cc <_ZN22FlapperValveController10StartMotorEv+0x4c>)
    12b6:	4798      	blx	r3
	flapperValveIsMoving=true;
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	2201      	movs	r2, #1
    12bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
    12c0:	2300      	movs	r3, #0
}
    12c2:	4618      	mov	r0, r3
    12c4:	3708      	adds	r7, #8
    12c6:	46bd      	mov	sp, r7
    12c8:	bd80      	pop	{r7, pc}
    12ca:	bf00      	nop
    12cc:	00001c0d 	.word	0x00001c0d
    12d0:	00003eb5 	.word	0x00003eb5

000012d4 <_ZN22FlapperValveController16StartControllingEh>:
	keepControlling=false;
	controllerEnabled=false;
	return 0;
}

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    12d4:	b580      	push	{r7, lr}
    12d6:	b082      	sub	sp, #8
    12d8:	af00      	add	r7, sp, #0
    12da:	6078      	str	r0, [r7, #4]
    12dc:	460b      	mov	r3, r1
    12de:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    12e0:	78fb      	ldrb	r3, [r7, #3]
    12e2:	4619      	mov	r1, r3
    12e4:	6878      	ldr	r0, [r7, #4]
    12e6:	4b2b      	ldr	r3, [pc, #172]	; (1394 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    12e8:	4798      	blx	r3
    12ea:	4603      	mov	r3, r0
    12ec:	461a      	mov	r2, r3
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    12fa:	4619      	mov	r1, r3
    12fc:	6878      	ldr	r0, [r7, #4]
    12fe:	4b26      	ldr	r3, [pc, #152]	; (1398 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    1300:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
    1308:	4b24      	ldr	r3, [pc, #144]	; (139c <_ZN22FlapperValveController16StartControllingEh+0xc8>)
    130a:	4610      	mov	r0, r2
    130c:	4798      	blx	r3
    130e:	4602      	mov	r2, r0
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	2200      	movs	r2, #0
    131a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	2200      	movs	r2, #0
    1322:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	2200      	movs	r2, #0
    132a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
    132e:	687b      	ldr	r3, [r7, #4]
    1330:	2201      	movs	r2, #1
    1332:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	2200      	movs	r2, #0
    133a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
    133e:	687b      	ldr	r3, [r7, #4]
    1340:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    1344:	2b00      	cmp	r3, #0
    1346:	d106      	bne.n	1356 <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    1348:	f242 7210 	movw	r2, #10000	; 0x2710
    134c:	4914      	ldr	r1, [pc, #80]	; (13a0 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
    134e:	4815      	ldr	r0, [pc, #84]	; (13a4 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    1350:	4b15      	ldr	r3, [pc, #84]	; (13a8 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    1352:	4798      	blx	r3
    1354:	e005      	b.n	1362 <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    1356:	f242 7210 	movw	r2, #10000	; 0x2710
    135a:	4914      	ldr	r1, [pc, #80]	; (13ac <_ZN22FlapperValveController16StartControllingEh+0xd8>)
    135c:	4811      	ldr	r0, [pc, #68]	; (13a4 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    135e:	4b12      	ldr	r3, [pc, #72]	; (13a8 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    1360:	4798      	blx	r3
		}
		
		isControlling=true;
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	2201      	movs	r2, #1
    1366:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
    136a:	6878      	ldr	r0, [r7, #4]
    136c:	4b10      	ldr	r3, [pc, #64]	; (13b0 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
    136e:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    1370:	6878      	ldr	r0, [r7, #4]
    1372:	4b10      	ldr	r3, [pc, #64]	; (13b4 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
    1374:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    137c:	b2db      	uxtb	r3, r3
    137e:	2b00      	cmp	r3, #0
    1380:	d003      	beq.n	138a <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	2201      	movs	r2, #1
    1386:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
    138a:	2300      	movs	r3, #0
	
}
    138c:	4618      	mov	r0, r3
    138e:	3708      	adds	r7, #8
    1390:	46bd      	mov	sp, r7
    1392:	bd80      	pop	{r7, pc}
    1394:	000013b9 	.word	0x000013b9
    1398:	000011fd 	.word	0x000011fd
    139c:	00010bc1 	.word	0x00010bc1
    13a0:	000005bd 	.word	0x000005bd
    13a4:	200006c4 	.word	0x200006c4
    13a8:	0000f2e5 	.word	0x0000f2e5
    13ac:	000005e9 	.word	0x000005e9
    13b0:	00000841 	.word	0x00000841
    13b4:	00000c0d 	.word	0x00000c0d

000013b8 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    13b8:	b580      	push	{r7, lr}
    13ba:	b082      	sub	sp, #8
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]
    13c0:	460b      	mov	r3, r1
    13c2:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    13c4:	6878      	ldr	r0, [r7, #4]
    13c6:	4b2a      	ldr	r3, [pc, #168]	; (1470 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
    13c8:	4798      	blx	r3
    13ca:	4603      	mov	r3, r0
    13cc:	2b00      	cmp	r3, #0
    13ce:	d004      	beq.n	13da <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	78fa      	ldrb	r2, [r7, #3]
    13d4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
    13d8:	e043      	b.n	1462 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
    13da:	687b      	ldr	r3, [r7, #4]
    13dc:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    13e0:	2b00      	cmp	r3, #0
    13e2:	d01f      	beq.n	1424 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    13ea:	43db      	mvns	r3, r3
    13ec:	b2da      	uxtb	r2, r3
    13ee:	687b      	ldr	r3, [r7, #4]
    13f0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
    13f4:	78fb      	ldrb	r3, [r7, #3]
    13f6:	687a      	ldr	r2, [r7, #4]
    13f8:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
    13fc:	4293      	cmp	r3, r2
    13fe:	dd0c      	ble.n	141a <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    1418:	e023      	b.n	1462 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	78fa      	ldrb	r2, [r7, #3]
    141e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
    1422:	e01e      	b.n	1462 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    142a:	43db      	mvns	r3, r3
    142c:	b2da      	uxtb	r2, r3
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
    1434:	78fb      	ldrb	r3, [r7, #3]
    1436:	687a      	ldr	r2, [r7, #4]
    1438:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
    143c:	4293      	cmp	r3, r2
    143e:	dd0c      	ble.n	145a <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
    1440:	687b      	ldr	r3, [r7, #4]
    1442:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    1458:	e003      	b.n	1462 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    145a:	687b      	ldr	r3, [r7, #4]
    145c:	78fa      	ldrb	r2, [r7, #3]
    145e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
    1468:	4618      	mov	r0, r3
    146a:	3708      	adds	r7, #8
    146c:	46bd      	mov	sp, r7
    146e:	bd80      	pop	{r7, pc}
    1470:	00001005 	.word	0x00001005

00001474 <_ZN22FlapperValveController15KeepControllingEh>:
	
uint8_t	FlapperValveController::StartControlling(void){
	return	StartControlling(currentPosition);
	
}
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
    147c:	460b      	mov	r3, r1
    147e:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	2200      	movs	r2, #0
    1484:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	2201      	movs	r2, #1
    148c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
    1490:	6878      	ldr	r0, [r7, #4]
    1492:	4b05      	ldr	r3, [pc, #20]	; (14a8 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    1494:	4798      	blx	r3
		keepControlling=false;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	2200      	movs	r2, #0
    149a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
    149e:	2300      	movs	r3, #0
	
}
    14a0:	4618      	mov	r0, r3
    14a2:	3708      	adds	r7, #8
    14a4:	46bd      	mov	sp, r7
    14a6:	bd80      	pop	{r7, pc}
    14a8:	00000841 	.word	0x00000841

000014ac <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    14ac:	b590      	push	{r4, r7, lr}
    14ae:	b085      	sub	sp, #20
    14b0:	af00      	add	r7, sp, #0
    14b2:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
    14b4:	68fb      	ldr	r3, [r7, #12]
    14b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    14ba:	4618      	mov	r0, r3
    14bc:	4b36      	ldr	r3, [pc, #216]	; (1598 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
    14be:	4798      	blx	r3
    14c0:	4603      	mov	r3, r0
    14c2:	461a      	mov	r2, r3
    14c4:	68fb      	ldr	r3, [r7, #12]
    14c6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
    14d0:	68fb      	ldr	r3, [r7, #12]
    14d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
    14d6:	68fb      	ldr	r3, [r7, #12]
    14d8:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    14e8:	68fc      	ldr	r4, [r7, #12]
    14ea:	463b      	mov	r3, r7
    14ec:	4611      	mov	r1, r2
    14ee:	4618      	mov	r0, r3
    14f0:	4b2a      	ldr	r3, [pc, #168]	; (159c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
    14f2:	4798      	blx	r3
    14f4:	f104 0384 	add.w	r3, r4, #132	; 0x84
    14f8:	463a      	mov	r2, r7
    14fa:	6810      	ldr	r0, [r2, #0]
    14fc:	6018      	str	r0, [r3, #0]
    14fe:	8892      	ldrh	r2, [r2, #4]
    1500:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1508:	68fc      	ldr	r4, [r7, #12]
    150a:	463b      	mov	r3, r7
    150c:	4611      	mov	r1, r2
    150e:	4618      	mov	r0, r3
    1510:	4b23      	ldr	r3, [pc, #140]	; (15a0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
    1512:	4798      	blx	r3
    1514:	f104 038a 	add.w	r3, r4, #138	; 0x8a
    1518:	463a      	mov	r2, r7
    151a:	6811      	ldr	r1, [r2, #0]
    151c:	6852      	ldr	r2, [r2, #4]
    151e:	6019      	str	r1, [r3, #0]
    1520:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
    1522:	68fb      	ldr	r3, [r7, #12]
    1524:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1528:	b2da      	uxtb	r2, r3
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    1542:	68fb      	ldr	r3, [r7, #12]
    1544:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
    1548:	68fb      	ldr	r3, [r7, #12]
    154a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    154e:	b2da      	uxtb	r2, r3
    1550:	68fb      	ldr	r3, [r7, #12]
    1552:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    155c:	2b00      	cmp	r3, #0
    155e:	d008      	beq.n	1572 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    1560:	68fb      	ldr	r3, [r7, #12]
    1562:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    1566:	43db      	mvns	r3, r3
    1568:	b2da      	uxtb	r2, r3
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    1570:	e007      	b.n	1582 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    1578:	43db      	mvns	r3, r3
    157a:	b2da      	uxtb	r2, r3
    157c:	68fb      	ldr	r3, [r7, #12]
    157e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    1588:	4619      	mov	r1, r3
    158a:	68f8      	ldr	r0, [r7, #12]
    158c:	4b05      	ldr	r3, [pc, #20]	; (15a4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
    158e:	4798      	blx	r3
}
    1590:	bf00      	nop
    1592:	3714      	adds	r7, #20
    1594:	46bd      	mov	sp, r7
    1596:	bd90      	pop	{r4, r7, pc}
    1598:	00001e2d 	.word	0x00001e2d
    159c:	00001bb1 	.word	0x00001bb1
    15a0:	00001b59 	.word	0x00001b59
    15a4:	000015a9 	.word	0x000015a9

000015a8 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
    15a8:	b480      	push	{r7}
    15aa:	b085      	sub	sp, #20
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
    15b0:	460b      	mov	r3, r1
    15b2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    15b4:	2300      	movs	r3, #0
    15b6:	73fb      	strb	r3, [r7, #15]
    15b8:	7bfb      	ldrb	r3, [r7, #15]
    15ba:	2b0e      	cmp	r3, #14
    15bc:	dc1d      	bgt.n	15fa <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	3332      	adds	r3, #50	; 0x32
    15c8:	009b      	lsls	r3, r3, #2
    15ca:	4413      	add	r3, r2
    15cc:	685b      	ldr	r3, [r3, #4]
    15ce:	7bfa      	ldrb	r2, [r7, #15]
    15d0:	f1c2 020f 	rsb	r2, r2, #15
    15d4:	441a      	add	r2, r3
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    15dc:	6879      	ldr	r1, [r7, #4]
    15de:	3332      	adds	r3, #50	; 0x32
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	440b      	add	r3, r1
    15e4:	685b      	ldr	r3, [r3, #4]
    15e6:	7bf9      	ldrb	r1, [r7, #15]
    15e8:	f1c1 010e 	rsb	r1, r1, #14
    15ec:	440b      	add	r3, r1
    15ee:	781b      	ldrb	r3, [r3, #0]
    15f0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    15f2:	7bfb      	ldrb	r3, [r7, #15]
    15f4:	3301      	adds	r3, #1
    15f6:	73fb      	strb	r3, [r7, #15]
    15f8:	e7de      	b.n	15b8 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    1600:	687a      	ldr	r2, [r7, #4]
    1602:	3332      	adds	r3, #50	; 0x32
    1604:	009b      	lsls	r3, r3, #2
    1606:	4413      	add	r3, r2
    1608:	685b      	ldr	r3, [r3, #4]
    160a:	78fa      	ldrb	r2, [r7, #3]
    160c:	701a      	strb	r2, [r3, #0]
}
    160e:	bf00      	nop
    1610:	3714      	adds	r7, #20
    1612:	46bd      	mov	sp, r7
    1614:	bc80      	pop	{r7}
    1616:	4770      	bx	lr

00001618 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
    1618:	b580      	push	{r7, lr}
    161a:	b084      	sub	sp, #16
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
    1620:	23b4      	movs	r3, #180	; 0xb4
    1622:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	4a59      	ldr	r2, [pc, #356]	; (178c <_ZN22FlapperValveController8SelftestEv+0x174>)
    1628:	33c7      	adds	r3, #199	; 0xc7
    162a:	8812      	ldrh	r2, [r2, #0]
    162c:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
    162e:	6878      	ldr	r0, [r7, #4]
    1630:	4b57      	ldr	r3, [pc, #348]	; (1790 <_ZN22FlapperValveController8SelftestEv+0x178>)
    1632:	4798      	blx	r3
	singlefv->SetEnable(false);
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    163a:	2100      	movs	r1, #0
    163c:	4618      	mov	r0, r3
    163e:	4b55      	ldr	r3, [pc, #340]	; (1794 <_ZN22FlapperValveController8SelftestEv+0x17c>)
    1640:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1648:	2100      	movs	r1, #0
    164a:	4618      	mov	r0, r3
    164c:	4b52      	ldr	r3, [pc, #328]	; (1798 <_ZN22FlapperValveController8SelftestEv+0x180>)
    164e:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1656:	2100      	movs	r1, #0
    1658:	4618      	mov	r0, r3
    165a:	4b50      	ldr	r3, [pc, #320]	; (179c <_ZN22FlapperValveController8SelftestEv+0x184>)
    165c:	4798      	blx	r3
	delay_ms(10);
    165e:	200a      	movs	r0, #10
    1660:	4b4f      	ldr	r3, [pc, #316]	; (17a0 <_ZN22FlapperValveController8SelftestEv+0x188>)
    1662:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    166a:	2101      	movs	r1, #1
    166c:	4618      	mov	r0, r3
    166e:	4b4b      	ldr	r3, [pc, #300]	; (179c <_ZN22FlapperValveController8SelftestEv+0x184>)
    1670:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1678:	7bba      	ldrb	r2, [r7, #14]
    167a:	4611      	mov	r1, r2
    167c:	4618      	mov	r0, r3
    167e:	4b49      	ldr	r3, [pc, #292]	; (17a4 <_ZN22FlapperValveController8SelftestEv+0x18c>)
    1680:	4798      	blx	r3
	singlefv->SetDirection(false);
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1688:	2100      	movs	r1, #0
    168a:	4618      	mov	r0, r3
    168c:	4b46      	ldr	r3, [pc, #280]	; (17a8 <_ZN22FlapperValveController8SelftestEv+0x190>)
    168e:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1696:	4618      	mov	r0, r3
    1698:	4b44      	ldr	r3, [pc, #272]	; (17ac <_ZN22FlapperValveController8SelftestEv+0x194>)
    169a:	4798      	blx	r3
    169c:	4603      	mov	r3, r0
    169e:	461a      	mov	r2, r3
    16a0:	7bbb      	ldrb	r3, [r7, #14]
    16a2:	429a      	cmp	r2, r3
    16a4:	bfcc      	ite	gt
    16a6:	2301      	movgt	r3, #1
    16a8:	2300      	movle	r3, #0
    16aa:	b2db      	uxtb	r3, r3
    16ac:	2b00      	cmp	r3, #0
    16ae:	d007      	beq.n	16c0 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    16b6:	2101      	movs	r1, #1
    16b8:	4618      	mov	r0, r3
    16ba:	4b3b      	ldr	r3, [pc, #236]	; (17a8 <_ZN22FlapperValveController8SelftestEv+0x190>)
    16bc:	4798      	blx	r3
    16be:	e006      	b.n	16ce <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    16c6:	2100      	movs	r1, #0
    16c8:	4618      	mov	r0, r3
    16ca:	4b37      	ldr	r3, [pc, #220]	; (17a8 <_ZN22FlapperValveController8SelftestEv+0x190>)
    16cc:	4798      	blx	r3
	}
	
		if (valve_ID==0)
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    16d4:	2b00      	cmp	r3, #0
    16d6:	d106      	bne.n	16e6 <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    16d8:	f242 7210 	movw	r2, #10000	; 0x2710
    16dc:	4934      	ldr	r1, [pc, #208]	; (17b0 <_ZN22FlapperValveController8SelftestEv+0x198>)
    16de:	4835      	ldr	r0, [pc, #212]	; (17b4 <_ZN22FlapperValveController8SelftestEv+0x19c>)
    16e0:	4b35      	ldr	r3, [pc, #212]	; (17b8 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
    16e2:	4798      	blx	r3
    16e4:	e005      	b.n	16f2 <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    16e6:	f242 7210 	movw	r2, #10000	; 0x2710
    16ea:	4934      	ldr	r1, [pc, #208]	; (17bc <_ZN22FlapperValveController8SelftestEv+0x1a4>)
    16ec:	4831      	ldr	r0, [pc, #196]	; (17b4 <_ZN22FlapperValveController8SelftestEv+0x19c>)
    16ee:	4b32      	ldr	r3, [pc, #200]	; (17b8 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
    16f0:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    16f8:	2101      	movs	r1, #1
    16fa:	4618      	mov	r0, r3
    16fc:	4b25      	ldr	r3, [pc, #148]	; (1794 <_ZN22FlapperValveController8SelftestEv+0x17c>)
    16fe:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1706:	4618      	mov	r0, r3
    1708:	4b28      	ldr	r3, [pc, #160]	; (17ac <_ZN22FlapperValveController8SelftestEv+0x194>)
    170a:	4798      	blx	r3
    170c:	4603      	mov	r3, r0
    170e:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
    1710:	687b      	ldr	r3, [r7, #4]
    1712:	2200      	movs	r2, #0
    1714:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
    1718:	7bfa      	ldrb	r2, [r7, #15]
    171a:	7bbb      	ldrb	r3, [r7, #14]
    171c:	1ad3      	subs	r3, r2, r3
    171e:	2b00      	cmp	r3, #0
    1720:	bfb8      	it	lt
    1722:	425b      	neglt	r3, r3
    1724:	2b0c      	cmp	r3, #12
    1726:	bfcc      	ite	gt
    1728:	2301      	movgt	r3, #1
    172a:	2300      	movle	r3, #0
    172c:	b2db      	uxtb	r3, r3
    172e:	461a      	mov	r2, r3
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    1736:	b2db      	uxtb	r3, r3
    1738:	f083 0301 	eor.w	r3, r3, #1
    173c:	b2db      	uxtb	r3, r3
    173e:	4013      	ands	r3, r2
    1740:	2b00      	cmp	r3, #0
    1742:	bf14      	ite	ne
    1744:	2301      	movne	r3, #1
    1746:	2300      	moveq	r3, #0
    1748:	b2db      	uxtb	r3, r3
    174a:	2b00      	cmp	r3, #0
    174c:	d008      	beq.n	1760 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
    174e:	687b      	ldr	r3, [r7, #4]
    1750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1754:	4618      	mov	r0, r3
    1756:	4b15      	ldr	r3, [pc, #84]	; (17ac <_ZN22FlapperValveController8SelftestEv+0x194>)
    1758:	4798      	blx	r3
    175a:	4603      	mov	r3, r0
    175c:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
    175e:	e7db      	b.n	1718 <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
    1760:	6878      	ldr	r0, [r7, #4]
    1762:	4b17      	ldr	r3, [pc, #92]	; (17c0 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
    1764:	4798      	blx	r3

	singlefv->SetEnable(false);
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    176c:	2100      	movs	r1, #0
    176e:	4618      	mov	r0, r3
    1770:	4b08      	ldr	r3, [pc, #32]	; (1794 <_ZN22FlapperValveController8SelftestEv+0x17c>)
    1772:	4798      	blx	r3
	return !timeoutFlapperValveController;
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    177a:	b2db      	uxtb	r3, r3
    177c:	f083 0301 	eor.w	r3, r3, #1
    1780:	b2db      	uxtb	r3, r3
}
    1782:	4618      	mov	r0, r3
    1784:	3710      	adds	r7, #16
    1786:	46bd      	mov	sp, r7
    1788:	bd80      	pop	{r7, pc}
    178a:	bf00      	nop
    178c:	00011538 	.word	0x00011538
    1790:	000014ad 	.word	0x000014ad
    1794:	00001c0d 	.word	0x00001c0d
    1798:	00001d7d 	.word	0x00001d7d
    179c:	00001d05 	.word	0x00001d05
    17a0:	00003eb5 	.word	0x00003eb5
    17a4:	00001df5 	.word	0x00001df5
    17a8:	00001c8d 	.word	0x00001c8d
    17ac:	00001e2d 	.word	0x00001e2d
    17b0:	000005bd 	.word	0x000005bd
    17b4:	200006c4 	.word	0x200006c4
    17b8:	0000f2e5 	.word	0x0000f2e5
    17bc:	000005e9 	.word	0x000005e9
    17c0:	000017c5 	.word	0x000017c5

000017c4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
    17c4:	b580      	push	{r7, lr}
    17c6:	b082      	sub	sp, #8
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    17d2:	2b00      	cmp	r3, #0
    17d4:	d104      	bne.n	17e0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    17d6:	4906      	ldr	r1, [pc, #24]	; (17f0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
    17d8:	4806      	ldr	r0, [pc, #24]	; (17f4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
    17da:	4b07      	ldr	r3, [pc, #28]	; (17f8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
    17dc:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
    17de:	e003      	b.n	17e8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    17e0:	4906      	ldr	r1, [pc, #24]	; (17fc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
    17e2:	4804      	ldr	r0, [pc, #16]	; (17f4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
    17e6:	4798      	blx	r3
}
    17e8:	bf00      	nop
    17ea:	3708      	adds	r7, #8
    17ec:	46bd      	mov	sp, r7
    17ee:	bd80      	pop	{r7, pc}
    17f0:	000005bd 	.word	0x000005bd
    17f4:	200006c4 	.word	0x200006c4
    17f8:	0000f28d 	.word	0x0000f28d
    17fc:	000005e9 	.word	0x000005e9

00001800 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
    1800:	b590      	push	{r4, r7, lr}
    1802:	b083      	sub	sp, #12
    1804:	af00      	add	r7, sp, #0
    1806:	6078      	str	r0, [r7, #4]
    1808:	4c05      	ldr	r4, [pc, #20]	; (1820 <__tcf_0+0x20>)
    180a:	4b06      	ldr	r3, [pc, #24]	; (1824 <__tcf_0+0x24>)
    180c:	429c      	cmp	r4, r3
    180e:	d004      	beq.n	181a <__tcf_0+0x1a>
    1810:	3c78      	subs	r4, #120	; 0x78
    1812:	4620      	mov	r0, r4
    1814:	4b04      	ldr	r3, [pc, #16]	; (1828 <__tcf_0+0x28>)
    1816:	4798      	blx	r3
    1818:	e7f7      	b.n	180a <__tcf_0+0xa>
    181a:	370c      	adds	r7, #12
    181c:	46bd      	mov	sp, r7
    181e:	bd90      	pop	{r4, r7, pc}
    1820:	2000089c 	.word	0x2000089c
    1824:	200007ac 	.word	0x200007ac
    1828:	000019f9 	.word	0x000019f9

0000182c <_Z41__static_initialization_and_destruction_0ii>:

    182c:	b5b0      	push	{r4, r5, r7, lr}
    182e:	b082      	sub	sp, #8
    1830:	af00      	add	r7, sp, #0
    1832:	6078      	str	r0, [r7, #4]
    1834:	6039      	str	r1, [r7, #0]
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	2b01      	cmp	r3, #1
    183a:	d16d      	bne.n	1918 <_Z41__static_initialization_and_destruction_0ii+0xec>
    183c:	683b      	ldr	r3, [r7, #0]
    183e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1842:	4293      	cmp	r3, r2
    1844:	d168      	bne.n	1918 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    1846:	4936      	ldr	r1, [pc, #216]	; (1920 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    1848:	4836      	ldr	r0, [pc, #216]	; (1924 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    184a:	4b37      	ldr	r3, [pc, #220]	; (1928 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    184c:	4798      	blx	r3
    184e:	4a37      	ldr	r2, [pc, #220]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1850:	4937      	ldr	r1, [pc, #220]	; (1930 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    1852:	4834      	ldr	r0, [pc, #208]	; (1924 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    1854:	4b37      	ldr	r3, [pc, #220]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    1856:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1858:	4937      	ldr	r1, [pc, #220]	; (1938 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    185a:	4838      	ldr	r0, [pc, #224]	; (193c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    185c:	4b38      	ldr	r3, [pc, #224]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    185e:	4798      	blx	r3
    1860:	4a32      	ldr	r2, [pc, #200]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1862:	4938      	ldr	r1, [pc, #224]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1864:	4835      	ldr	r0, [pc, #212]	; (193c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    1866:	4b33      	ldr	r3, [pc, #204]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    1868:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    186a:	4937      	ldr	r1, [pc, #220]	; (1948 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    186c:	4837      	ldr	r0, [pc, #220]	; (194c <_Z41__static_initialization_and_destruction_0ii+0x120>)
    186e:	4b34      	ldr	r3, [pc, #208]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1870:	4798      	blx	r3
    1872:	4a2e      	ldr	r2, [pc, #184]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1874:	4933      	ldr	r1, [pc, #204]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1876:	4835      	ldr	r0, [pc, #212]	; (194c <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1878:	4b2e      	ldr	r3, [pc, #184]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    187a:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    187c:	4934      	ldr	r1, [pc, #208]	; (1950 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    187e:	4835      	ldr	r0, [pc, #212]	; (1954 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    1880:	4b2f      	ldr	r3, [pc, #188]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1882:	4798      	blx	r3
    1884:	4a29      	ldr	r2, [pc, #164]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1886:	492f      	ldr	r1, [pc, #188]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1888:	4832      	ldr	r0, [pc, #200]	; (1954 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    188a:	4b2a      	ldr	r3, [pc, #168]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    188c:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    188e:	4932      	ldr	r1, [pc, #200]	; (1958 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1890:	4832      	ldr	r0, [pc, #200]	; (195c <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1892:	4b2b      	ldr	r3, [pc, #172]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1894:	4798      	blx	r3
    1896:	4a25      	ldr	r2, [pc, #148]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1898:	492a      	ldr	r1, [pc, #168]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    189a:	4830      	ldr	r0, [pc, #192]	; (195c <_Z41__static_initialization_and_destruction_0ii+0x130>)
    189c:	4b25      	ldr	r3, [pc, #148]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    189e:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    18a0:	492f      	ldr	r1, [pc, #188]	; (1960 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    18a2:	4830      	ldr	r0, [pc, #192]	; (1964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    18a4:	4b26      	ldr	r3, [pc, #152]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    18a6:	4798      	blx	r3
    18a8:	4a20      	ldr	r2, [pc, #128]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    18aa:	4926      	ldr	r1, [pc, #152]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    18ac:	482d      	ldr	r0, [pc, #180]	; (1964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    18ae:	4b21      	ldr	r3, [pc, #132]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    18b0:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    18b2:	492d      	ldr	r1, [pc, #180]	; (1968 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    18b4:	482d      	ldr	r0, [pc, #180]	; (196c <_Z41__static_initialization_and_destruction_0ii+0x140>)
    18b6:	4b22      	ldr	r3, [pc, #136]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    18b8:	4798      	blx	r3
    18ba:	4a1c      	ldr	r2, [pc, #112]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    18bc:	4921      	ldr	r1, [pc, #132]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    18be:	482b      	ldr	r0, [pc, #172]	; (196c <_Z41__static_initialization_and_destruction_0ii+0x140>)
    18c0:	4b1c      	ldr	r3, [pc, #112]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    18c2:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    18c4:	492a      	ldr	r1, [pc, #168]	; (1970 <_Z41__static_initialization_and_destruction_0ii+0x144>)
    18c6:	482b      	ldr	r0, [pc, #172]	; (1974 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    18c8:	4b1d      	ldr	r3, [pc, #116]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    18ca:	4798      	blx	r3
    18cc:	4a17      	ldr	r2, [pc, #92]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    18ce:	491d      	ldr	r1, [pc, #116]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    18d0:	4828      	ldr	r0, [pc, #160]	; (1974 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    18d2:	4b18      	ldr	r3, [pc, #96]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    18d4:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    18d6:	4928      	ldr	r1, [pc, #160]	; (1978 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
    18d8:	4828      	ldr	r0, [pc, #160]	; (197c <_Z41__static_initialization_and_destruction_0ii+0x150>)
    18da:	4b19      	ldr	r3, [pc, #100]	; (1940 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    18dc:	4798      	blx	r3
    18de:	4a13      	ldr	r2, [pc, #76]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    18e0:	4918      	ldr	r1, [pc, #96]	; (1944 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    18e2:	4826      	ldr	r0, [pc, #152]	; (197c <_Z41__static_initialization_and_destruction_0ii+0x150>)
    18e4:	4b13      	ldr	r3, [pc, #76]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    18e6:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
    18e8:	4b25      	ldr	r3, [pc, #148]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0x154>)
    18ea:	2401      	movs	r4, #1
    18ec:	461d      	mov	r5, r3
    18ee:	2c00      	cmp	r4, #0
    18f0:	db05      	blt.n	18fe <_Z41__static_initialization_and_destruction_0ii+0xd2>
    18f2:	4628      	mov	r0, r5
    18f4:	4b23      	ldr	r3, [pc, #140]	; (1984 <_Z41__static_initialization_and_destruction_0ii+0x158>)
    18f6:	4798      	blx	r3
    18f8:	3578      	adds	r5, #120	; 0x78
    18fa:	3c01      	subs	r4, #1
    18fc:	e7f7      	b.n	18ee <_Z41__static_initialization_and_destruction_0ii+0xc2>
    18fe:	4a0b      	ldr	r2, [pc, #44]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1900:	4921      	ldr	r1, [pc, #132]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
    1902:	2000      	movs	r0, #0
    1904:	4b0b      	ldr	r3, [pc, #44]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    1906:	4798      	blx	r3
    1908:	4820      	ldr	r0, [pc, #128]	; (198c <_Z41__static_initialization_and_destruction_0ii+0x160>)
    190a:	4b21      	ldr	r3, [pc, #132]	; (1990 <_Z41__static_initialization_and_destruction_0ii+0x164>)
    190c:	4798      	blx	r3
    190e:	4a07      	ldr	r2, [pc, #28]	; (192c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    1910:	4920      	ldr	r1, [pc, #128]	; (1994 <_Z41__static_initialization_and_destruction_0ii+0x168>)
    1912:	481e      	ldr	r0, [pc, #120]	; (198c <_Z41__static_initialization_and_destruction_0ii+0x160>)
    1914:	4b07      	ldr	r3, [pc, #28]	; (1934 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    1916:	4798      	blx	r3
    1918:	bf00      	nop
    191a:	3708      	adds	r7, #8
    191c:	46bd      	mov	sp, r7
    191e:	bdb0      	pop	{r4, r5, r7, pc}
    1920:	2000a908 	.word	0x2000a908
    1924:	2000066c 	.word	0x2000066c
    1928:	0000ea01 	.word	0x0000ea01
    192c:	20000000 	.word	0x20000000
    1930:	0000ea1d 	.word	0x0000ea1d
    1934:	00010a49 	.word	0x00010a49
    1938:	2000a7d8 	.word	0x2000a7d8
    193c:	20000684 	.word	0x20000684
    1940:	0000f171 	.word	0x0000f171
    1944:	0000f1a9 	.word	0x0000f1a9
    1948:	2000a86c 	.word	0x2000a86c
    194c:	200006a4 	.word	0x200006a4
    1950:	2000a990 	.word	0x2000a990
    1954:	200006c4 	.word	0x200006c4
    1958:	2000a88c 	.word	0x2000a88c
    195c:	200006e4 	.word	0x200006e4
    1960:	2000a950 	.word	0x2000a950
    1964:	20000704 	.word	0x20000704
    1968:	2000a970 	.word	0x2000a970
    196c:	20000724 	.word	0x20000724
    1970:	2000a848 	.word	0x2000a848
    1974:	20000744 	.word	0x20000744
    1978:	2000a8e8 	.word	0x2000a8e8
    197c:	20000764 	.word	0x20000764
    1980:	200007ac 	.word	0x200007ac
    1984:	000019ad 	.word	0x000019ad
    1988:	00001801 	.word	0x00001801
    198c:	2000089c 	.word	0x2000089c
    1990:	00000695 	.word	0x00000695
    1994:	00000729 	.word	0x00000729

00001998 <_GLOBAL__sub_I_ptrFlapperValveController>:
    1998:	b580      	push	{r7, lr}
    199a:	af00      	add	r7, sp, #0
    199c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    19a0:	2001      	movs	r0, #1
    19a2:	4b01      	ldr	r3, [pc, #4]	; (19a8 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    19a4:	4798      	blx	r3
    19a6:	bd80      	pop	{r7, pc}
    19a8:	0000182d 	.word	0x0000182d

000019ac <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	4618      	mov	r0, r3
    19b8:	4b0c      	ldr	r3, [pc, #48]	; (19ec <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
    19ba:	4798      	blx	r3
{
	valveID=0;
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	2200      	movs	r2, #0
    19c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	4a0a      	ldr	r2, [pc, #40]	; (19f0 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
    19c8:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	2200      	movs	r2, #0
    19ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
    19d2:	4a08      	ldr	r2, [pc, #32]	; (19f4 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	6013      	str	r3, [r2, #0]
	isOK=false;
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	2200      	movs	r2, #0
    19dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	4618      	mov	r0, r3
    19e4:	3708      	adds	r7, #8
    19e6:	46bd      	mov	sp, r7
    19e8:	bd80      	pop	{r7, pc}
    19ea:	bf00      	nop
    19ec:	0000ebbd 	.word	0x0000ebbd
    19f0:	20000a94 	.word	0x20000a94
    19f4:	20000a90 	.word	0x20000a90

000019f8 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	4618      	mov	r0, r3
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
    1a06:	4798      	blx	r3
{
} //~FlapperValve_Class
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	4618      	mov	r0, r3
    1a0c:	3708      	adds	r7, #8
    1a0e:	46bd      	mov	sp, r7
    1a10:	bd80      	pop	{r7, pc}
    1a12:	bf00      	nop
    1a14:	0000ebd1 	.word	0x0000ebd1

00001a18 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
    1a18:	b580      	push	{r7, lr}
    1a1a:	b082      	sub	sp, #8
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1a24:	7a1b      	ldrb	r3, [r3, #8]
    1a26:	b2db      	uxtb	r3, r3
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d104      	bne.n	1a36 <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1a30:	4618      	mov	r0, r3
    1a32:	4b19      	ldr	r3, [pc, #100]	; (1a98 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
    1a34:	4798      	blx	r3
	}
		

		if (i2c->isOK)
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1a3a:	7a5b      	ldrb	r3, [r3, #9]
    1a3c:	b2db      	uxtb	r3, r3
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d01b      	beq.n	1a7a <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    1a48:	4619      	mov	r1, r3
    1a4a:	6878      	ldr	r0, [r7, #4]
    1a4c:	4b13      	ldr	r3, [pc, #76]	; (1a9c <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
    1a4e:	4798      	blx	r3
			expanders[0]->SetPortInput();
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1a54:	4618      	mov	r0, r3
    1a56:	4b12      	ldr	r3, [pc, #72]	; (1aa0 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
    1a58:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1a5e:	2182      	movs	r1, #130	; 0x82
    1a60:	4618      	mov	r0, r3
    1a62:	4b10      	ldr	r3, [pc, #64]	; (1aa4 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
    1a64:	4798      	blx	r3
			expanders[2]->SetPortOutput();
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1a6a:	4618      	mov	r0, r3
    1a6c:	4b0e      	ldr	r3, [pc, #56]	; (1aa8 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
    1a6e:	4798      	blx	r3
			expanders[3]->SetPortInput();
    1a70:	687b      	ldr	r3, [r7, #4]
    1a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a74:	4618      	mov	r0, r3
    1a76:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
    1a78:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1a7e:	7a5b      	ldrb	r3, [r3, #9]
    1a80:	b2da      	uxtb	r2, r3
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
    1a88:	687b      	ldr	r3, [r7, #4]
    1a8a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    1a8e:	b2db      	uxtb	r3, r3


}
    1a90:	4618      	mov	r0, r3
    1a92:	3708      	adds	r7, #8
    1a94:	46bd      	mov	sp, r7
    1a96:	bd80      	pop	{r7, pc}
    1a98:	0000ea31 	.word	0x0000ea31
    1a9c:	00001ad5 	.word	0x00001ad5
    1aa0:	0000ef35 	.word	0x0000ef35
    1aa4:	0000ef79 	.word	0x0000ef79
    1aa8:	0000efed 	.word	0x0000efed

00001aac <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
    1aac:	b580      	push	{r7, lr}
    1aae:	b082      	sub	sp, #8
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
    1ab4:	460b      	mov	r3, r1
    1ab6:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	78fa      	ldrb	r2, [r7, #3]
    1abc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
    1ac0:	6878      	ldr	r0, [r7, #4]
    1ac2:	4b03      	ldr	r3, [pc, #12]	; (1ad0 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
    1ac4:	4798      	blx	r3
    1ac6:	4603      	mov	r3, r0
}
    1ac8:	4618      	mov	r0, r3
    1aca:	3708      	adds	r7, #8
    1acc:	46bd      	mov	sp, r7
    1ace:	bd80      	pop	{r7, pc}
    1ad0:	00001a19 	.word	0x00001a19

00001ad4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b084      	sub	sp, #16
    1ad8:	af00      	add	r7, sp, #0
    1ada:	6078      	str	r0, [r7, #4]
    1adc:	460b      	mov	r3, r1
    1ade:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1ae0:	2300      	movs	r3, #0
    1ae2:	60fb      	str	r3, [r7, #12]
    1ae4:	68fb      	ldr	r3, [r7, #12]
    1ae6:	2b03      	cmp	r3, #3
    1ae8:	dc2d      	bgt.n	1b46 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    1af0:	4619      	mov	r1, r3
    1af2:	68fb      	ldr	r3, [r7, #12]
    1af4:	461a      	mov	r2, r3
    1af6:	00d2      	lsls	r2, r2, #3
    1af8:	1ad2      	subs	r2, r2, r3
    1afa:	0093      	lsls	r3, r2, #2
    1afc:	461a      	mov	r2, r3
    1afe:	460b      	mov	r3, r1
    1b00:	00db      	lsls	r3, r3, #3
    1b02:	1a5b      	subs	r3, r3, r1
    1b04:	011b      	lsls	r3, r3, #4
    1b06:	4413      	add	r3, r2
    1b08:	4a11      	ldr	r2, [pc, #68]	; (1b50 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
    1b0a:	441a      	add	r2, r3
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
    1b10:	687b      	ldr	r3, [r7, #4]
    1b12:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1b14:	68fb      	ldr	r3, [r7, #12]
    1b16:	b2da      	uxtb	r2, r3
    1b18:	78fb      	ldrb	r3, [r7, #3]
    1b1a:	009b      	lsls	r3, r3, #2
    1b1c:	b2db      	uxtb	r3, r3
    1b1e:	4413      	add	r3, r2
    1b20:	b2db      	uxtb	r3, r3
    1b22:	3320      	adds	r3, #32
    1b24:	b2d9      	uxtb	r1, r3
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b2a:	461a      	mov	r2, r3
    1b2c:	4b09      	ldr	r3, [pc, #36]	; (1b54 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
    1b2e:	4798      	blx	r3
		expanders[i]=currentExpander;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	6e99      	ldr	r1, [r3, #104]	; 0x68
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	68fa      	ldr	r2, [r7, #12]
    1b38:	3216      	adds	r2, #22
    1b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1b3e:	68fb      	ldr	r3, [r7, #12]
    1b40:	3301      	adds	r3, #1
    1b42:	60fb      	str	r3, [r7, #12]
    1b44:	e7ce      	b.n	1ae4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
    1b46:	2300      	movs	r3, #0
}
    1b48:	4618      	mov	r0, r3
    1b4a:	3710      	adds	r7, #16
    1b4c:	46bd      	mov	sp, r7
    1b4e:	bd80      	pop	{r7, pc}
    1b50:	20000aac 	.word	0x20000aac
    1b54:	0000edc1 	.word	0x0000edc1

00001b58 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
    1b58:	b590      	push	{r4, r7, lr}
    1b5a:	b085      	sub	sp, #20
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	60f8      	str	r0, [r7, #12]
    1b60:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
    1b62:	68bb      	ldr	r3, [r7, #8]
    1b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1b66:	4618      	mov	r0, r3
    1b68:	4b0f      	ldr	r3, [pc, #60]	; (1ba8 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
    1b6a:	4798      	blx	r3
    1b6c:	4603      	mov	r3, r0
    1b6e:	461a      	mov	r2, r3
    1b70:	68bb      	ldr	r3, [r7, #8]
    1b72:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
    1b76:	68b9      	ldr	r1, [r7, #8]
    1b78:	68bb      	ldr	r3, [r7, #8]
    1b7a:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
    1b7e:	68bc      	ldr	r4, [r7, #8]
    1b80:	463b      	mov	r3, r7
    1b82:	4618      	mov	r0, r3
    1b84:	4b09      	ldr	r3, [pc, #36]	; (1bac <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
    1b86:	4798      	blx	r3
    1b88:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    1b8c:	463a      	mov	r2, r7
    1b8e:	6810      	ldr	r0, [r2, #0]
    1b90:	6851      	ldr	r1, [r2, #4]
    1b92:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
    1b94:	68fa      	ldr	r2, [r7, #12]
    1b96:	68bb      	ldr	r3, [r7, #8]
    1b98:	333c      	adds	r3, #60	; 0x3c
    1b9a:	cb03      	ldmia	r3!, {r0, r1}
    1b9c:	6010      	str	r0, [r2, #0]
    1b9e:	6051      	str	r1, [r2, #4]
}
    1ba0:	68f8      	ldr	r0, [r7, #12]
    1ba2:	3714      	adds	r7, #20
    1ba4:	46bd      	mov	sp, r7
    1ba6:	bd90      	pop	{r4, r7, pc}
    1ba8:	0000ee75 	.word	0x0000ee75
    1bac:	0000eccd 	.word	0x0000eccd

00001bb0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
    1bb0:	b590      	push	{r4, r7, lr}
    1bb2:	b085      	sub	sp, #20
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	60f8      	str	r0, [r7, #12]
    1bb8:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
    1bba:	68bb      	ldr	r3, [r7, #8]
    1bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1bbe:	4618      	mov	r0, r3
    1bc0:	4b10      	ldr	r3, [pc, #64]	; (1c04 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
    1bc2:	4798      	blx	r3
    1bc4:	4603      	mov	r3, r0
    1bc6:	461a      	mov	r2, r3
    1bc8:	68bb      	ldr	r3, [r7, #8]
    1bca:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
    1bce:	68b9      	ldr	r1, [r7, #8]
    1bd0:	68bb      	ldr	r3, [r7, #8]
    1bd2:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
    1bd6:	68bc      	ldr	r4, [r7, #8]
    1bd8:	463b      	mov	r3, r7
    1bda:	4618      	mov	r0, r3
    1bdc:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
    1bde:	4798      	blx	r3
    1be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1be4:	463a      	mov	r2, r7
    1be6:	6810      	ldr	r0, [r2, #0]
    1be8:	6018      	str	r0, [r3, #0]
    1bea:	8892      	ldrh	r2, [r2, #4]
    1bec:	809a      	strh	r2, [r3, #4]
	return statusInputs;
    1bee:	68fa      	ldr	r2, [r7, #12]
    1bf0:	68bb      	ldr	r3, [r7, #8]
    1bf2:	3344      	adds	r3, #68	; 0x44
    1bf4:	6818      	ldr	r0, [r3, #0]
    1bf6:	6010      	str	r0, [r2, #0]
    1bf8:	889b      	ldrh	r3, [r3, #4]
    1bfa:	8093      	strh	r3, [r2, #4]
}
    1bfc:	68f8      	ldr	r0, [r7, #12]
    1bfe:	3714      	adds	r7, #20
    1c00:	46bd      	mov	sp, r7
    1c02:	bd90      	pop	{r4, r7, pc}
    1c04:	0000ee75 	.word	0x0000ee75
    1c08:	0000ec79 	.word	0x0000ec79

00001c0c <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
    1c0c:	b580      	push	{r7, lr}
    1c0e:	b082      	sub	sp, #8
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
    1c14:	460b      	mov	r3, r1
    1c16:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1c1c:	4618      	mov	r0, r3
    1c1e:	4b19      	ldr	r3, [pc, #100]	; (1c84 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
    1c20:	4798      	blx	r3
    1c22:	4603      	mov	r3, r0
    1c24:	461a      	mov	r2, r3
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
    1c2c:	78fb      	ldrb	r3, [r7, #3]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d006      	beq.n	1c40 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1c38:	f043 0301 	orr.w	r3, r3, #1
    1c3c:	b2db      	uxtb	r3, r3
    1c3e:	e005      	b.n	1c4c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1c46:	f023 0301 	bic.w	r3, r3, #1
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	687a      	ldr	r2, [r7, #4]
    1c4e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	78fa      	ldrb	r2, [r7, #3]
    1c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1c64:	4619      	mov	r1, r3
    1c66:	4610      	mov	r0, r2
    1c68:	4b07      	ldr	r3, [pc, #28]	; (1c88 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
    1c6a:	4798      	blx	r3
    1c6c:	4603      	mov	r3, r0
    1c6e:	461a      	mov	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    1c7c:	4618      	mov	r0, r3
    1c7e:	3708      	adds	r7, #8
    1c80:	46bd      	mov	sp, r7
    1c82:	bd80      	pop	{r7, pc}
    1c84:	0000ee75 	.word	0x0000ee75
    1c88:	0000eef9 	.word	0x0000eef9

00001c8c <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
    1c8c:	b580      	push	{r7, lr}
    1c8e:	b082      	sub	sp, #8
    1c90:	af00      	add	r7, sp, #0
    1c92:	6078      	str	r0, [r7, #4]
    1c94:	460b      	mov	r3, r1
    1c96:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1c9c:	4618      	mov	r0, r3
    1c9e:	4b17      	ldr	r3, [pc, #92]	; (1cfc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
    1ca0:	4798      	blx	r3
    1ca2:	4603      	mov	r3, r0
    1ca4:	461a      	mov	r2, r3
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
    1cac:	78fb      	ldrb	r3, [r7, #3]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d006      	beq.n	1cc0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1cb8:	f043 0320 	orr.w	r3, r3, #32
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	e005      	b.n	1ccc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1cc6:	f023 0320 	bic.w	r3, r3, #32
    1cca:	b2db      	uxtb	r3, r3
    1ccc:	687a      	ldr	r2, [r7, #4]
    1cce:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1cdc:	4619      	mov	r1, r3
    1cde:	4610      	mov	r0, r2
    1ce0:	4b07      	ldr	r3, [pc, #28]	; (1d00 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
    1ce2:	4798      	blx	r3
    1ce4:	4603      	mov	r3, r0
    1ce6:	461a      	mov	r2, r3
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    1cf4:	4618      	mov	r0, r3
    1cf6:	3708      	adds	r7, #8
    1cf8:	46bd      	mov	sp, r7
    1cfa:	bd80      	pop	{r7, pc}
    1cfc:	0000ee75 	.word	0x0000ee75
    1d00:	0000eef9 	.word	0x0000eef9

00001d04 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
    1d04:	b580      	push	{r7, lr}
    1d06:	b082      	sub	sp, #8
    1d08:	af00      	add	r7, sp, #0
    1d0a:	6078      	str	r0, [r7, #4]
    1d0c:	460b      	mov	r3, r1
    1d0e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1d14:	4618      	mov	r0, r3
    1d16:	4b17      	ldr	r3, [pc, #92]	; (1d74 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
    1d18:	4798      	blx	r3
    1d1a:	4603      	mov	r3, r0
    1d1c:	461a      	mov	r2, r3
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
    1d24:	78fb      	ldrb	r3, [r7, #3]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d006      	beq.n	1d38 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d34:	b2db      	uxtb	r3, r3
    1d36:	e005      	b.n	1d44 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1d42:	b2db      	uxtb	r3, r3
    1d44:	687a      	ldr	r2, [r7, #4]
    1d46:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1d54:	4619      	mov	r1, r3
    1d56:	4610      	mov	r0, r2
    1d58:	4b07      	ldr	r3, [pc, #28]	; (1d78 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
    1d5a:	4798      	blx	r3
    1d5c:	4603      	mov	r3, r0
    1d5e:	461a      	mov	r2, r3
    1d60:	687b      	ldr	r3, [r7, #4]
    1d62:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    1d6c:	4618      	mov	r0, r3
    1d6e:	3708      	adds	r7, #8
    1d70:	46bd      	mov	sp, r7
    1d72:	bd80      	pop	{r7, pc}
    1d74:	0000ee75 	.word	0x0000ee75
    1d78:	0000eef9 	.word	0x0000eef9

00001d7c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
    1d7c:	b580      	push	{r7, lr}
    1d7e:	b082      	sub	sp, #8
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
    1d84:	460b      	mov	r3, r1
    1d86:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    1d88:	687b      	ldr	r3, [r7, #4]
    1d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1d8c:	4618      	mov	r0, r3
    1d8e:	4b17      	ldr	r3, [pc, #92]	; (1dec <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
    1d90:	4798      	blx	r3
    1d92:	4603      	mov	r3, r0
    1d94:	461a      	mov	r2, r3
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
    1d9c:	78fb      	ldrb	r3, [r7, #3]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d006      	beq.n	1db0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1da8:	f043 0304 	orr.w	r3, r3, #4
    1dac:	b2db      	uxtb	r3, r3
    1dae:	e005      	b.n	1dbc <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1db6:	f023 0304 	bic.w	r3, r3, #4
    1dba:	b2db      	uxtb	r3, r3
    1dbc:	687a      	ldr	r2, [r7, #4]
    1dbe:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    1dcc:	4619      	mov	r1, r3
    1dce:	4610      	mov	r0, r2
    1dd0:	4b07      	ldr	r3, [pc, #28]	; (1df0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
    1dd2:	4798      	blx	r3
    1dd4:	4603      	mov	r3, r0
    1dd6:	461a      	mov	r2, r3
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    1de4:	4618      	mov	r0, r3
    1de6:	3708      	adds	r7, #8
    1de8:	46bd      	mov	sp, r7
    1dea:	bd80      	pop	{r7, pc}
    1dec:	0000ee75 	.word	0x0000ee75
    1df0:	0000eef9 	.word	0x0000eef9

00001df4 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
    1df4:	b580      	push	{r7, lr}
    1df6:	b082      	sub	sp, #8
    1df8:	af00      	add	r7, sp, #0
    1dfa:	6078      	str	r0, [r7, #4]
    1dfc:	460b      	mov	r3, r1
    1dfe:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1e04:	78fa      	ldrb	r2, [r7, #3]
    1e06:	4611      	mov	r1, r2
    1e08:	4618      	mov	r0, r3
    1e0a:	4b07      	ldr	r3, [pc, #28]	; (1e28 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
    1e0c:	4798      	blx	r3
    1e0e:	4603      	mov	r3, r0
    1e10:	461a      	mov	r2, r3
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
    1e1e:	4618      	mov	r0, r3
    1e20:	3708      	adds	r7, #8
    1e22:	46bd      	mov	sp, r7
    1e24:	bd80      	pop	{r7, pc}
    1e26:	bf00      	nop
    1e28:	0000eef9 	.word	0x0000eef9

00001e2c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
    1e32:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1e44:	4618      	mov	r0, r3
    1e46:	4b18      	ldr	r3, [pc, #96]	; (1ea8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
    1e48:	4798      	blx	r3
    1e4a:	4603      	mov	r3, r0
    1e4c:	461a      	mov	r2, r3
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    1e5a:	2bda      	cmp	r3, #218	; 0xda
    1e5c:	dd04      	ble.n	1e68 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	2203      	movs	r2, #3
    1e62:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1e66:	e017      	b.n	1e98 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    1e6e:	2b6d      	cmp	r3, #109	; 0x6d
    1e70:	dd04      	ble.n	1e7c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	2202      	movs	r2, #2
    1e76:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1e7a:	e00d      	b.n	1e98 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    1e82:	2b36      	cmp	r3, #54	; 0x36
    1e84:	dd04      	ble.n	1e90 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	2201      	movs	r2, #1
    1e8a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1e8e:	e003      	b.n	1e98 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	2200      	movs	r2, #0
    1e94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
    1e98:	687b      	ldr	r3, [r7, #4]
    1e9a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
    1e9e:	4618      	mov	r0, r3
    1ea0:	3708      	adds	r7, #8
    1ea2:	46bd      	mov	sp, r7
    1ea4:	bd80      	pop	{r7, pc}
    1ea6:	bf00      	nop
    1ea8:	0000ee75 	.word	0x0000ee75

00001eac <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
    1eac:	b590      	push	{r4, r7, lr}
    1eae:	b083      	sub	sp, #12
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    1eb4:	4c05      	ldr	r4, [pc, #20]	; (1ecc <__tcf_0+0x20>)
    1eb6:	4b06      	ldr	r3, [pc, #24]	; (1ed0 <__tcf_0+0x24>)
    1eb8:	429c      	cmp	r4, r3
    1eba:	d004      	beq.n	1ec6 <__tcf_0+0x1a>
    1ebc:	3c1c      	subs	r4, #28
    1ebe:	4620      	mov	r0, r4
    1ec0:	4b04      	ldr	r3, [pc, #16]	; (1ed4 <__tcf_0+0x28>)
    1ec2:	4798      	blx	r3
    1ec4:	e7f7      	b.n	1eb6 <__tcf_0+0xa>
    1ec6:	370c      	adds	r7, #12
    1ec8:	46bd      	mov	sp, r7
    1eca:	bd90      	pop	{r4, r7, pc}
    1ecc:	20000b8c 	.word	0x20000b8c
    1ed0:	20000aac 	.word	0x20000aac
    1ed4:	0000edad 	.word	0x0000edad

00001ed8 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
    1ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1edc:	b082      	sub	sp, #8
    1ede:	af00      	add	r7, sp, #0
    1ee0:	6078      	str	r0, [r7, #4]
    1ee2:	6039      	str	r1, [r7, #0]
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	2b01      	cmp	r3, #1
    1ee8:	d177      	bne.n	1fda <_Z41__static_initialization_and_destruction_0ii+0x102>
    1eea:	683b      	ldr	r3, [r7, #0]
    1eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1ef0:	4293      	cmp	r3, r2
    1ef2:	d172      	bne.n	1fda <_Z41__static_initialization_and_destruction_0ii+0x102>
    1ef4:	493b      	ldr	r1, [pc, #236]	; (1fe4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    1ef6:	483c      	ldr	r0, [pc, #240]	; (1fe8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    1ef8:	4b3c      	ldr	r3, [pc, #240]	; (1fec <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1efa:	4798      	blx	r3
    1efc:	4a3c      	ldr	r2, [pc, #240]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1efe:	493d      	ldr	r1, [pc, #244]	; (1ff4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    1f00:	4839      	ldr	r0, [pc, #228]	; (1fe8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    1f02:	4b3d      	ldr	r3, [pc, #244]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f04:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1f06:	493d      	ldr	r1, [pc, #244]	; (1ffc <_Z41__static_initialization_and_destruction_0ii+0x124>)
    1f08:	483d      	ldr	r0, [pc, #244]	; (2000 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    1f0a:	4b3e      	ldr	r3, [pc, #248]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f0c:	4798      	blx	r3
    1f0e:	4a38      	ldr	r2, [pc, #224]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f10:	493d      	ldr	r1, [pc, #244]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f12:	483b      	ldr	r0, [pc, #236]	; (2000 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    1f14:	4b38      	ldr	r3, [pc, #224]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f16:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    1f18:	493c      	ldr	r1, [pc, #240]	; (200c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    1f1a:	483d      	ldr	r0, [pc, #244]	; (2010 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    1f1c:	4b39      	ldr	r3, [pc, #228]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f1e:	4798      	blx	r3
    1f20:	4a33      	ldr	r2, [pc, #204]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f22:	4939      	ldr	r1, [pc, #228]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f24:	483a      	ldr	r0, [pc, #232]	; (2010 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    1f26:	4b34      	ldr	r3, [pc, #208]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f28:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    1f2a:	493a      	ldr	r1, [pc, #232]	; (2014 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    1f2c:	483a      	ldr	r0, [pc, #232]	; (2018 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    1f2e:	4b35      	ldr	r3, [pc, #212]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f30:	4798      	blx	r3
    1f32:	4a2f      	ldr	r2, [pc, #188]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f34:	4934      	ldr	r1, [pc, #208]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f36:	4838      	ldr	r0, [pc, #224]	; (2018 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    1f38:	4b2f      	ldr	r3, [pc, #188]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f3a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1f3c:	4937      	ldr	r1, [pc, #220]	; (201c <_Z41__static_initialization_and_destruction_0ii+0x144>)
    1f3e:	4838      	ldr	r0, [pc, #224]	; (2020 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    1f40:	4b30      	ldr	r3, [pc, #192]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f42:	4798      	blx	r3
    1f44:	4a2a      	ldr	r2, [pc, #168]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f46:	4930      	ldr	r1, [pc, #192]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f48:	4835      	ldr	r0, [pc, #212]	; (2020 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    1f4a:	4b2b      	ldr	r3, [pc, #172]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f4c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    1f4e:	4935      	ldr	r1, [pc, #212]	; (2024 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
    1f50:	4835      	ldr	r0, [pc, #212]	; (2028 <_Z41__static_initialization_and_destruction_0ii+0x150>)
    1f52:	4b2c      	ldr	r3, [pc, #176]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f54:	4798      	blx	r3
    1f56:	4a26      	ldr	r2, [pc, #152]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f58:	492b      	ldr	r1, [pc, #172]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f5a:	4833      	ldr	r0, [pc, #204]	; (2028 <_Z41__static_initialization_and_destruction_0ii+0x150>)
    1f5c:	4b26      	ldr	r3, [pc, #152]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f5e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    1f60:	4932      	ldr	r1, [pc, #200]	; (202c <_Z41__static_initialization_and_destruction_0ii+0x154>)
    1f62:	4833      	ldr	r0, [pc, #204]	; (2030 <_Z41__static_initialization_and_destruction_0ii+0x158>)
    1f64:	4b27      	ldr	r3, [pc, #156]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f66:	4798      	blx	r3
    1f68:	4a21      	ldr	r2, [pc, #132]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f6a:	4927      	ldr	r1, [pc, #156]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f6c:	4830      	ldr	r0, [pc, #192]	; (2030 <_Z41__static_initialization_and_destruction_0ii+0x158>)
    1f6e:	4b22      	ldr	r3, [pc, #136]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f70:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1f72:	4930      	ldr	r1, [pc, #192]	; (2034 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
    1f74:	4830      	ldr	r0, [pc, #192]	; (2038 <_Z41__static_initialization_and_destruction_0ii+0x160>)
    1f76:	4b23      	ldr	r3, [pc, #140]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f78:	4798      	blx	r3
    1f7a:	4a1d      	ldr	r2, [pc, #116]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f7c:	4922      	ldr	r1, [pc, #136]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f7e:	482e      	ldr	r0, [pc, #184]	; (2038 <_Z41__static_initialization_and_destruction_0ii+0x160>)
    1f80:	4b1d      	ldr	r3, [pc, #116]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f82:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    1f84:	492d      	ldr	r1, [pc, #180]	; (203c <_Z41__static_initialization_and_destruction_0ii+0x164>)
    1f86:	482e      	ldr	r0, [pc, #184]	; (2040 <_Z41__static_initialization_and_destruction_0ii+0x168>)
    1f88:	4b1e      	ldr	r3, [pc, #120]	; (2004 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    1f8a:	4798      	blx	r3
    1f8c:	4a18      	ldr	r2, [pc, #96]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1f8e:	491e      	ldr	r1, [pc, #120]	; (2008 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    1f90:	482b      	ldr	r0, [pc, #172]	; (2040 <_Z41__static_initialization_and_destruction_0ii+0x168>)
    1f92:	4b19      	ldr	r3, [pc, #100]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1f94:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
    1f96:	492b      	ldr	r1, [pc, #172]	; (2044 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
    1f98:	482b      	ldr	r0, [pc, #172]	; (2048 <_Z41__static_initialization_and_destruction_0ii+0x170>)
    1f9a:	4b14      	ldr	r3, [pc, #80]	; (1fec <_Z41__static_initialization_and_destruction_0ii+0x114>)
    1f9c:	4798      	blx	r3
    1f9e:	4a14      	ldr	r2, [pc, #80]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1fa0:	4914      	ldr	r1, [pc, #80]	; (1ff4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    1fa2:	4829      	ldr	r0, [pc, #164]	; (2048 <_Z41__static_initialization_and_destruction_0ii+0x170>)
    1fa4:	4b14      	ldr	r3, [pc, #80]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1fa6:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
    1fa8:	4b28      	ldr	r3, [pc, #160]	; (204c <_Z41__static_initialization_and_destruction_0ii+0x174>)
    1faa:	2401      	movs	r4, #1
    1fac:	461e      	mov	r6, r3
    1fae:	2c00      	cmp	r4, #0
    1fb0:	db0e      	blt.n	1fd0 <_Z41__static_initialization_and_destruction_0ii+0xf8>
    1fb2:	4633      	mov	r3, r6
    1fb4:	2503      	movs	r5, #3
    1fb6:	4698      	mov	r8, r3
    1fb8:	2d00      	cmp	r5, #0
    1fba:	db06      	blt.n	1fca <_Z41__static_initialization_and_destruction_0ii+0xf2>
    1fbc:	4640      	mov	r0, r8
    1fbe:	4b24      	ldr	r3, [pc, #144]	; (2050 <_Z41__static_initialization_and_destruction_0ii+0x178>)
    1fc0:	4798      	blx	r3
    1fc2:	f108 081c 	add.w	r8, r8, #28
    1fc6:	3d01      	subs	r5, #1
    1fc8:	e7f6      	b.n	1fb8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
    1fca:	3670      	adds	r6, #112	; 0x70
    1fcc:	3c01      	subs	r4, #1
    1fce:	e7ee      	b.n	1fae <_Z41__static_initialization_and_destruction_0ii+0xd6>
    1fd0:	4a07      	ldr	r2, [pc, #28]	; (1ff0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    1fd2:	4920      	ldr	r1, [pc, #128]	; (2054 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
    1fd4:	2000      	movs	r0, #0
    1fd6:	4b08      	ldr	r3, [pc, #32]	; (1ff8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    1fd8:	4798      	blx	r3
}
    1fda:	bf00      	nop
    1fdc:	3708      	adds	r7, #8
    1fde:	46bd      	mov	sp, r7
    1fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe4:	2000a908 	.word	0x2000a908
    1fe8:	20000978 	.word	0x20000978
    1fec:	0000ea01 	.word	0x0000ea01
    1ff0:	20000000 	.word	0x20000000
    1ff4:	0000ea1d 	.word	0x0000ea1d
    1ff8:	00010a49 	.word	0x00010a49
    1ffc:	2000a7d8 	.word	0x2000a7d8
    2000:	20000990 	.word	0x20000990
    2004:	0000f171 	.word	0x0000f171
    2008:	0000f1a9 	.word	0x0000f1a9
    200c:	2000a86c 	.word	0x2000a86c
    2010:	200009b0 	.word	0x200009b0
    2014:	2000a990 	.word	0x2000a990
    2018:	200009d0 	.word	0x200009d0
    201c:	2000a88c 	.word	0x2000a88c
    2020:	200009f0 	.word	0x200009f0
    2024:	2000a950 	.word	0x2000a950
    2028:	20000a10 	.word	0x20000a10
    202c:	2000a970 	.word	0x2000a970
    2030:	20000a30 	.word	0x20000a30
    2034:	2000a848 	.word	0x2000a848
    2038:	20000a50 	.word	0x20000a50
    203c:	2000a8e8 	.word	0x2000a8e8
    2040:	20000a70 	.word	0x20000a70
    2044:	2000a8ac 	.word	0x2000a8ac
    2048:	20000a94 	.word	0x20000a94
    204c:	20000aac 	.word	0x20000aac
    2050:	0000ed99 	.word	0x0000ed99
    2054:	00001ead 	.word	0x00001ead

00002058 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
    2058:	b580      	push	{r7, lr}
    205a:	af00      	add	r7, sp, #0
    205c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2060:	2001      	movs	r0, #1
    2062:	4b01      	ldr	r3, [pc, #4]	; (2068 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
    2064:	4798      	blx	r3
    2066:	bd80      	pop	{r7, pc}
    2068:	00001ed9 	.word	0x00001ed9

0000206c <hri_port_set_OUT_reg>:
{
    206c:	b480      	push	{r7}
    206e:	b085      	sub	sp, #20
    2070:	af00      	add	r7, sp, #0
    2072:	60f8      	str	r0, [r7, #12]
    2074:	460b      	mov	r3, r1
    2076:	607a      	str	r2, [r7, #4]
    2078:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    207a:	7afb      	ldrb	r3, [r7, #11]
    207c:	68fa      	ldr	r2, [r7, #12]
    207e:	01db      	lsls	r3, r3, #7
    2080:	4413      	add	r3, r2
    2082:	3318      	adds	r3, #24
    2084:	687a      	ldr	r2, [r7, #4]
    2086:	601a      	str	r2, [r3, #0]
}
    2088:	bf00      	nop
    208a:	3714      	adds	r7, #20
    208c:	46bd      	mov	sp, r7
    208e:	bc80      	pop	{r7}
    2090:	4770      	bx	lr

00002092 <hri_port_clear_OUT_reg>:
{
    2092:	b480      	push	{r7}
    2094:	b085      	sub	sp, #20
    2096:	af00      	add	r7, sp, #0
    2098:	60f8      	str	r0, [r7, #12]
    209a:	460b      	mov	r3, r1
    209c:	607a      	str	r2, [r7, #4]
    209e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20a0:	7afb      	ldrb	r3, [r7, #11]
    20a2:	68fa      	ldr	r2, [r7, #12]
    20a4:	01db      	lsls	r3, r3, #7
    20a6:	4413      	add	r3, r2
    20a8:	3314      	adds	r3, #20
    20aa:	687a      	ldr	r2, [r7, #4]
    20ac:	601a      	str	r2, [r3, #0]
}
    20ae:	bf00      	nop
    20b0:	3714      	adds	r7, #20
    20b2:	46bd      	mov	sp, r7
    20b4:	bc80      	pop	{r7}
    20b6:	4770      	bx	lr

000020b8 <hri_port_toggle_OUT_reg>:
{
    20b8:	b480      	push	{r7}
    20ba:	b085      	sub	sp, #20
    20bc:	af00      	add	r7, sp, #0
    20be:	60f8      	str	r0, [r7, #12]
    20c0:	460b      	mov	r3, r1
    20c2:	607a      	str	r2, [r7, #4]
    20c4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    20c6:	7afb      	ldrb	r3, [r7, #11]
    20c8:	68fa      	ldr	r2, [r7, #12]
    20ca:	01db      	lsls	r3, r3, #7
    20cc:	4413      	add	r3, r2
    20ce:	331c      	adds	r3, #28
    20d0:	687a      	ldr	r2, [r7, #4]
    20d2:	601a      	str	r2, [r3, #0]
}
    20d4:	bf00      	nop
    20d6:	3714      	adds	r7, #20
    20d8:	46bd      	mov	sp, r7
    20da:	bc80      	pop	{r7}
    20dc:	4770      	bx	lr
	...

000020e0 <_gpio_set_level>:
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
    20e6:	4603      	mov	r3, r0
    20e8:	6039      	str	r1, [r7, #0]
    20ea:	71fb      	strb	r3, [r7, #7]
    20ec:	4613      	mov	r3, r2
    20ee:	71bb      	strb	r3, [r7, #6]
	if (level) {
    20f0:	79bb      	ldrb	r3, [r7, #6]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d006      	beq.n	2104 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    20f6:	79fb      	ldrb	r3, [r7, #7]
    20f8:	683a      	ldr	r2, [r7, #0]
    20fa:	4619      	mov	r1, r3
    20fc:	4806      	ldr	r0, [pc, #24]	; (2118 <_gpio_set_level+0x38>)
    20fe:	4b07      	ldr	r3, [pc, #28]	; (211c <_gpio_set_level+0x3c>)
    2100:	4798      	blx	r3
}
    2102:	e005      	b.n	2110 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2104:	79fb      	ldrb	r3, [r7, #7]
    2106:	683a      	ldr	r2, [r7, #0]
    2108:	4619      	mov	r1, r3
    210a:	4803      	ldr	r0, [pc, #12]	; (2118 <_gpio_set_level+0x38>)
    210c:	4b04      	ldr	r3, [pc, #16]	; (2120 <_gpio_set_level+0x40>)
    210e:	4798      	blx	r3
}
    2110:	bf00      	nop
    2112:	3708      	adds	r7, #8
    2114:	46bd      	mov	sp, r7
    2116:	bd80      	pop	{r7, pc}
    2118:	41008000 	.word	0x41008000
    211c:	0000206d 	.word	0x0000206d
    2120:	00002093 	.word	0x00002093

00002124 <_gpio_toggle_level>:
{
    2124:	b580      	push	{r7, lr}
    2126:	b082      	sub	sp, #8
    2128:	af00      	add	r7, sp, #0
    212a:	4603      	mov	r3, r0
    212c:	6039      	str	r1, [r7, #0]
    212e:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    2130:	79fb      	ldrb	r3, [r7, #7]
    2132:	683a      	ldr	r2, [r7, #0]
    2134:	4619      	mov	r1, r3
    2136:	4803      	ldr	r0, [pc, #12]	; (2144 <_gpio_toggle_level+0x20>)
    2138:	4b03      	ldr	r3, [pc, #12]	; (2148 <_gpio_toggle_level+0x24>)
    213a:	4798      	blx	r3
}
    213c:	bf00      	nop
    213e:	3708      	adds	r7, #8
    2140:	46bd      	mov	sp, r7
    2142:	bd80      	pop	{r7, pc}
    2144:	41008000 	.word	0x41008000
    2148:	000020b9 	.word	0x000020b9

0000214c <gpio_set_pin_level>:
{
    214c:	b580      	push	{r7, lr}
    214e:	b082      	sub	sp, #8
    2150:	af00      	add	r7, sp, #0
    2152:	4603      	mov	r3, r0
    2154:	460a      	mov	r2, r1
    2156:	71fb      	strb	r3, [r7, #7]
    2158:	4613      	mov	r3, r2
    215a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    215c:	79fb      	ldrb	r3, [r7, #7]
    215e:	115b      	asrs	r3, r3, #5
    2160:	b2d8      	uxtb	r0, r3
    2162:	79fb      	ldrb	r3, [r7, #7]
    2164:	f003 031f 	and.w	r3, r3, #31
    2168:	2201      	movs	r2, #1
    216a:	fa02 f303 	lsl.w	r3, r2, r3
    216e:	79ba      	ldrb	r2, [r7, #6]
    2170:	4619      	mov	r1, r3
    2172:	4b03      	ldr	r3, [pc, #12]	; (2180 <gpio_set_pin_level+0x34>)
    2174:	4798      	blx	r3
}
    2176:	bf00      	nop
    2178:	3708      	adds	r7, #8
    217a:	46bd      	mov	sp, r7
    217c:	bd80      	pop	{r7, pc}
    217e:	bf00      	nop
    2180:	000020e1 	.word	0x000020e1

00002184 <gpio_toggle_pin_level>:
{
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	4603      	mov	r3, r0
    218c:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    218e:	79fb      	ldrb	r3, [r7, #7]
    2190:	115b      	asrs	r3, r3, #5
    2192:	b2d8      	uxtb	r0, r3
    2194:	79fb      	ldrb	r3, [r7, #7]
    2196:	f003 031f 	and.w	r3, r3, #31
    219a:	2201      	movs	r2, #1
    219c:	fa02 f303 	lsl.w	r3, r2, r3
    21a0:	4619      	mov	r1, r3
    21a2:	4b03      	ldr	r3, [pc, #12]	; (21b0 <gpio_toggle_pin_level+0x2c>)
    21a4:	4798      	blx	r3
}
    21a6:	bf00      	nop
    21a8:	3708      	adds	r7, #8
    21aa:	46bd      	mov	sp, r7
    21ac:	bd80      	pop	{r7, pc}
    21ae:	bf00      	nop
    21b0:	00002125 	.word	0x00002125

000021b4 <_ZL13FirmwareAlivePK10timer_task>:
//static EvaporatorAndCondesatorFans_Class fans;
//static SingleFlapperValve_Class fv(0);


static void FirmwareAlive(const struct timer_task *const timer_task)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	b082      	sub	sp, #8
    21b8:	af00      	add	r7, sp, #0
    21ba:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(iAlcFwIsAlive,true);
    21bc:	2101      	movs	r1, #1
    21be:	2007      	movs	r0, #7
    21c0:	4b02      	ldr	r3, [pc, #8]	; (21cc <_ZL13FirmwareAlivePK10timer_task+0x18>)
    21c2:	4798      	blx	r3
}
    21c4:	bf00      	nop
    21c6:	3708      	adds	r7, #8
    21c8:	46bd      	mov	sp, r7
    21ca:	bd80      	pop	{r7, pc}
    21cc:	0000214d 	.word	0x0000214d

000021d0 <main>:


int main(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b082      	sub	sp, #8
    21d4:	af00      	add	r7, sp, #0
	atmel_start_init();
    21d6:	4b3a      	ldr	r3, [pc, #232]	; (22c0 <main+0xf0>)
    21d8:	4798      	blx	r3
// 	delay_ms(100);
// 	//	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
// 	//	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
// 	pwm_enable(&LIVE_PULSE);
// 	delay_ms(200);
	memory.Init();
    21da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    21de:	4839      	ldr	r0, [pc, #228]	; (22c4 <main+0xf4>)
    21e0:	4b39      	ldr	r3, [pc, #228]	; (22c8 <main+0xf8>)
    21e2:	4798      	blx	r3
	UserParameters  local_parameters=defaultParameters;
    21e4:	4a39      	ldr	r2, [pc, #228]	; (22cc <main+0xfc>)
    21e6:	1d3b      	adds	r3, r7, #4
    21e8:	8812      	ldrh	r2, [r2, #0]
    21ea:	801a      	strh	r2, [r3, #0]
	memory.WriteDefaultParameters();
    21ec:	4835      	ldr	r0, [pc, #212]	; (22c4 <main+0xf4>)
    21ee:	4b38      	ldr	r3, [pc, #224]	; (22d0 <main+0x100>)
    21f0:	4798      	blx	r3
	memory.SaveParameters(local_parameters);
    21f2:	1d3b      	adds	r3, r7, #4
    21f4:	4619      	mov	r1, r3
    21f6:	4833      	ldr	r0, [pc, #204]	; (22c4 <main+0xf4>)
    21f8:	4b36      	ldr	r3, [pc, #216]	; (22d4 <main+0x104>)
    21fa:	4798      	blx	r3
	while(!fvc.InitController(1))
    21fc:	2101      	movs	r1, #1
    21fe:	4836      	ldr	r0, [pc, #216]	; (22d8 <main+0x108>)
    2200:	4b36      	ldr	r3, [pc, #216]	; (22dc <main+0x10c>)
    2202:	4798      	blx	r3
    2204:	4603      	mov	r3, r0
    2206:	f083 0301 	eor.w	r3, r3, #1
    220a:	b2db      	uxtb	r3, r3
    220c:	2b00      	cmp	r3, #0
    220e:	d006      	beq.n	221e <main+0x4e>
	{
		gpio_toggle_pin_level(LED0);
    2210:	2052      	movs	r0, #82	; 0x52
    2212:	4b33      	ldr	r3, [pc, #204]	; (22e0 <main+0x110>)
    2214:	4798      	blx	r3
		delay_ms(100);
    2216:	2064      	movs	r0, #100	; 0x64
    2218:	4b32      	ldr	r3, [pc, #200]	; (22e4 <main+0x114>)
    221a:	4798      	blx	r3
	while(!fvc.InitController(1))
    221c:	e7ee      	b.n	21fc <main+0x2c>
	}

	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
    221e:	22fa      	movs	r2, #250	; 0xfa
    2220:	4931      	ldr	r1, [pc, #196]	; (22e8 <main+0x118>)
    2222:	4832      	ldr	r0, [pc, #200]	; (22ec <main+0x11c>)
    2224:	4b32      	ldr	r3, [pc, #200]	; (22f0 <main+0x120>)
    2226:	4798      	blx	r3
	//toolApp.Init();
	while (1)
	{
			for (uint8_t i = 0; i < 8; i++)
    2228:	2300      	movs	r3, #0
    222a:	71fb      	strb	r3, [r7, #7]
    222c:	79fb      	ldrb	r3, [r7, #7]
    222e:	2b07      	cmp	r3, #7
    2230:	dc20      	bgt.n	2274 <main+0xa4>
			{
				fvc.StartControlling(0x20 +i*30);
    2232:	79fb      	ldrb	r3, [r7, #7]
    2234:	461a      	mov	r2, r3
    2236:	0112      	lsls	r2, r2, #4
    2238:	1ad3      	subs	r3, r2, r3
    223a:	005b      	lsls	r3, r3, #1
    223c:	b2db      	uxtb	r3, r3
    223e:	3320      	adds	r3, #32
    2240:	b2db      	uxtb	r3, r3
    2242:	4619      	mov	r1, r3
    2244:	4824      	ldr	r0, [pc, #144]	; (22d8 <main+0x108>)
    2246:	4b2b      	ldr	r3, [pc, #172]	; (22f4 <main+0x124>)
    2248:	4798      	blx	r3
				while (!fvc.gotSetpoint)
    224a:	4b23      	ldr	r3, [pc, #140]	; (22d8 <main+0x108>)
    224c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    2250:	b2db      	uxtb	r3, r3
    2252:	f083 0301 	eor.w	r3, r3, #1
    2256:	b2db      	uxtb	r3, r3
    2258:	2b00      	cmp	r3, #0
    225a:	d003      	beq.n	2264 <main+0x94>
				{
					fvc.Control_NBC_StandAlone_Reset();
    225c:	481e      	ldr	r0, [pc, #120]	; (22d8 <main+0x108>)
    225e:	4b26      	ldr	r3, [pc, #152]	; (22f8 <main+0x128>)
    2260:	4798      	blx	r3
				while (!fvc.gotSetpoint)
    2262:	e7f2      	b.n	224a <main+0x7a>
				}
						
				delay_ms(1000);
    2264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2268:	4b1e      	ldr	r3, [pc, #120]	; (22e4 <main+0x114>)
    226a:	4798      	blx	r3
			for (uint8_t i = 0; i < 8; i++)
    226c:	79fb      	ldrb	r3, [r7, #7]
    226e:	3301      	adds	r3, #1
    2270:	71fb      	strb	r3, [r7, #7]
    2272:	e7db      	b.n	222c <main+0x5c>
				//	fvc.StopControlling();
			}
	
		for (uint8_t i = 0; i < 8; i++)
    2274:	2300      	movs	r3, #0
    2276:	71bb      	strb	r3, [r7, #6]
    2278:	79bb      	ldrb	r3, [r7, #6]
    227a:	2b07      	cmp	r3, #7
    227c:	dcd4      	bgt.n	2228 <main+0x58>
		{
			fvc.StartControlling(230 -i*30);
    227e:	79bb      	ldrb	r3, [r7, #6]
    2280:	461a      	mov	r2, r3
    2282:	011b      	lsls	r3, r3, #4
    2284:	1ad3      	subs	r3, r2, r3
    2286:	005b      	lsls	r3, r3, #1
    2288:	b2db      	uxtb	r3, r3
    228a:	3b1a      	subs	r3, #26
    228c:	b2db      	uxtb	r3, r3
    228e:	4619      	mov	r1, r3
    2290:	4811      	ldr	r0, [pc, #68]	; (22d8 <main+0x108>)
    2292:	4b18      	ldr	r3, [pc, #96]	; (22f4 <main+0x124>)
    2294:	4798      	blx	r3
			while (!fvc.gotSetpoint)
    2296:	4b10      	ldr	r3, [pc, #64]	; (22d8 <main+0x108>)
    2298:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    229c:	b2db      	uxtb	r3, r3
    229e:	f083 0301 	eor.w	r3, r3, #1
    22a2:	b2db      	uxtb	r3, r3
    22a4:	2b00      	cmp	r3, #0
    22a6:	d003      	beq.n	22b0 <main+0xe0>
			{
				fvc.Control_NBC_StandAlone_Reset();
    22a8:	480b      	ldr	r0, [pc, #44]	; (22d8 <main+0x108>)
    22aa:	4b13      	ldr	r3, [pc, #76]	; (22f8 <main+0x128>)
    22ac:	4798      	blx	r3
			while (!fvc.gotSetpoint)
    22ae:	e7f2      	b.n	2296 <main+0xc6>
			}
			delay_ms(1000);
    22b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    22b4:	4b0b      	ldr	r3, [pc, #44]	; (22e4 <main+0x114>)
    22b6:	4798      	blx	r3
		for (uint8_t i = 0; i < 8; i++)
    22b8:	79bb      	ldrb	r3, [r7, #6]
    22ba:	3301      	adds	r3, #1
    22bc:	71bb      	strb	r3, [r7, #6]
    22be:	e7db      	b.n	2278 <main+0xa8>
    22c0:	00002435 	.word	0x00002435
    22c4:	20002880 	.word	0x20002880
    22c8:	0000f68d 	.word	0x0000f68d
    22cc:	00011538 	.word	0x00011538
    22d0:	0000f5d5 	.word	0x0000f5d5
    22d4:	0000f6d5 	.word	0x0000f6d5
    22d8:	2000089c 	.word	0x2000089c
    22dc:	00000749 	.word	0x00000749
    22e0:	00002185 	.word	0x00002185
    22e4:	00003eb5 	.word	0x00003eb5
    22e8:	000021b5 	.word	0x000021b5
    22ec:	20000bcc 	.word	0x20000bcc
    22f0:	0000f219 	.word	0x0000f219
    22f4:	000012d5 	.word	0x000012d5
    22f8:	00000999 	.word	0x00000999

000022fc <_Z41__static_initialization_and_destruction_0ii>:
// 		delay_ms(500);

		

	}
}
    22fc:	b580      	push	{r7, lr}
    22fe:	b082      	sub	sp, #8
    2300:	af00      	add	r7, sp, #0
    2302:	6078      	str	r0, [r7, #4]
    2304:	6039      	str	r1, [r7, #0]
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	2b01      	cmp	r3, #1
    230a:	d155      	bne.n	23b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>
    230c:	683b      	ldr	r3, [r7, #0]
    230e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2312:	4293      	cmp	r3, r2
    2314:	d150      	bne.n	23b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    2316:	492a      	ldr	r1, [pc, #168]	; (23c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2318:	482a      	ldr	r0, [pc, #168]	; (23c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    231a:	4b2b      	ldr	r3, [pc, #172]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    231c:	4798      	blx	r3
    231e:	4a2b      	ldr	r2, [pc, #172]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2320:	492b      	ldr	r1, [pc, #172]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2322:	4828      	ldr	r0, [pc, #160]	; (23c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2324:	4b2b      	ldr	r3, [pc, #172]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    2326:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    2328:	492b      	ldr	r1, [pc, #172]	; (23d8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    232a:	482c      	ldr	r0, [pc, #176]	; (23dc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    232c:	4b26      	ldr	r3, [pc, #152]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    232e:	4798      	blx	r3
    2330:	4a26      	ldr	r2, [pc, #152]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2332:	4927      	ldr	r1, [pc, #156]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2334:	4829      	ldr	r0, [pc, #164]	; (23dc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    2336:	4b27      	ldr	r3, [pc, #156]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    2338:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    233a:	4929      	ldr	r1, [pc, #164]	; (23e0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    233c:	4829      	ldr	r0, [pc, #164]	; (23e4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    233e:	4b22      	ldr	r3, [pc, #136]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2340:	4798      	blx	r3
    2342:	4a22      	ldr	r2, [pc, #136]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2344:	4922      	ldr	r1, [pc, #136]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2346:	4827      	ldr	r0, [pc, #156]	; (23e4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    2348:	4b22      	ldr	r3, [pc, #136]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    234a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    234c:	4926      	ldr	r1, [pc, #152]	; (23e8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    234e:	4827      	ldr	r0, [pc, #156]	; (23ec <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    2350:	4b1d      	ldr	r3, [pc, #116]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2352:	4798      	blx	r3
    2354:	4a1d      	ldr	r2, [pc, #116]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2356:	491e      	ldr	r1, [pc, #120]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2358:	4824      	ldr	r0, [pc, #144]	; (23ec <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    235a:	4b1e      	ldr	r3, [pc, #120]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    235c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    235e:	4924      	ldr	r1, [pc, #144]	; (23f0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    2360:	4824      	ldr	r0, [pc, #144]	; (23f4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    2362:	4b19      	ldr	r3, [pc, #100]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2364:	4798      	blx	r3
    2366:	4a19      	ldr	r2, [pc, #100]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2368:	4919      	ldr	r1, [pc, #100]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    236a:	4822      	ldr	r0, [pc, #136]	; (23f4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    236c:	4b19      	ldr	r3, [pc, #100]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    236e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    2370:	4921      	ldr	r1, [pc, #132]	; (23f8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    2372:	4822      	ldr	r0, [pc, #136]	; (23fc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    2374:	4b14      	ldr	r3, [pc, #80]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2376:	4798      	blx	r3
    2378:	4a14      	ldr	r2, [pc, #80]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    237a:	4915      	ldr	r1, [pc, #84]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    237c:	481f      	ldr	r0, [pc, #124]	; (23fc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    237e:	4b15      	ldr	r3, [pc, #84]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    2380:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    2382:	491f      	ldr	r1, [pc, #124]	; (2400 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    2384:	481f      	ldr	r0, [pc, #124]	; (2404 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    2386:	4b10      	ldr	r3, [pc, #64]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2388:	4798      	blx	r3
    238a:	4a10      	ldr	r2, [pc, #64]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    238c:	4910      	ldr	r1, [pc, #64]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    238e:	481d      	ldr	r0, [pc, #116]	; (2404 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    2390:	4b10      	ldr	r3, [pc, #64]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    2392:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    2394:	491c      	ldr	r1, [pc, #112]	; (2408 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    2396:	481d      	ldr	r0, [pc, #116]	; (240c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    2398:	4b0b      	ldr	r3, [pc, #44]	; (23c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    239a:	4798      	blx	r3
    239c:	4a0b      	ldr	r2, [pc, #44]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    239e:	490c      	ldr	r1, [pc, #48]	; (23d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    23a0:	481a      	ldr	r0, [pc, #104]	; (240c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    23a2:	4b0c      	ldr	r3, [pc, #48]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    23a4:	4798      	blx	r3
    23a6:	491a      	ldr	r1, [pc, #104]	; (2410 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    23a8:	481a      	ldr	r0, [pc, #104]	; (2414 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    23aa:	4b1b      	ldr	r3, [pc, #108]	; (2418 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    23ac:	4798      	blx	r3
    23ae:	4a07      	ldr	r2, [pc, #28]	; (23cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    23b0:	491a      	ldr	r1, [pc, #104]	; (241c <_Z41__static_initialization_and_destruction_0ii+0x120>)
    23b2:	4818      	ldr	r0, [pc, #96]	; (2414 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    23b4:	4b07      	ldr	r3, [pc, #28]	; (23d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    23b6:	4798      	blx	r3
    23b8:	bf00      	nop
    23ba:	3708      	adds	r7, #8
    23bc:	46bd      	mov	sp, r7
    23be:	bd80      	pop	{r7, pc}
    23c0:	2000a7d8 	.word	0x2000a7d8
    23c4:	20000b8c 	.word	0x20000b8c
    23c8:	0000f171 	.word	0x0000f171
    23cc:	20000000 	.word	0x20000000
    23d0:	0000f1a9 	.word	0x0000f1a9
    23d4:	00010a49 	.word	0x00010a49
    23d8:	2000a86c 	.word	0x2000a86c
    23dc:	20000bac 	.word	0x20000bac
    23e0:	2000a990 	.word	0x2000a990
    23e4:	20000bcc 	.word	0x20000bcc
    23e8:	2000a88c 	.word	0x2000a88c
    23ec:	20000bec 	.word	0x20000bec
    23f0:	2000a950 	.word	0x2000a950
    23f4:	20000c0c 	.word	0x20000c0c
    23f8:	2000a970 	.word	0x2000a970
    23fc:	20000c2c 	.word	0x20000c2c
    2400:	2000a848 	.word	0x2000a848
    2404:	20000c4c 	.word	0x20000c4c
    2408:	2000a8e8 	.word	0x2000a8e8
    240c:	20000c6c 	.word	0x20000c6c
    2410:	2000a908 	.word	0x2000a908
    2414:	20000c8c 	.word	0x20000c8c
    2418:	0000ea01 	.word	0x0000ea01
    241c:	0000ea1d 	.word	0x0000ea1d

00002420 <_GLOBAL__sub_I_dir>:
    2420:	b580      	push	{r7, lr}
    2422:	af00      	add	r7, sp, #0
    2424:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2428:	2001      	movs	r0, #1
    242a:	4b01      	ldr	r3, [pc, #4]	; (2430 <_GLOBAL__sub_I_dir+0x10>)
    242c:	4798      	blx	r3
    242e:	bd80      	pop	{r7, pc}
    2430:	000022fd 	.word	0x000022fd

00002434 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2434:	b580      	push	{r7, lr}
    2436:	af00      	add	r7, sp, #0
	system_init();
    2438:	4b03      	ldr	r3, [pc, #12]	; (2448 <atmel_start_init+0x14>)
    243a:	4798      	blx	r3
	usb_init();
    243c:	4b03      	ldr	r3, [pc, #12]	; (244c <atmel_start_init+0x18>)
    243e:	4798      	blx	r3
	spi_nor_flash_init();
    2440:	4b03      	ldr	r3, [pc, #12]	; (2450 <atmel_start_init+0x1c>)
    2442:	4798      	blx	r3
}
    2444:	bf00      	nop
    2446:	bd80      	pop	{r7, pc}
    2448:	00003835 	.word	0x00003835
    244c:	0000ccb5 	.word	0x0000ccb5
    2450:	0000cc49 	.word	0x0000cc49

00002454 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2454:	b480      	push	{r7}
    2456:	b085      	sub	sp, #20
    2458:	af00      	add	r7, sp, #0
    245a:	60f8      	str	r0, [r7, #12]
    245c:	460b      	mov	r3, r1
    245e:	607a      	str	r2, [r7, #4]
    2460:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2462:	7afa      	ldrb	r2, [r7, #11]
    2464:	68fb      	ldr	r3, [r7, #12]
    2466:	3220      	adds	r2, #32
    2468:	6879      	ldr	r1, [r7, #4]
    246a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    246e:	bf00      	nop
    2470:	3714      	adds	r7, #20
    2472:	46bd      	mov	sp, r7
    2474:	f85d 7b04 	ldr.w	r7, [sp], #4
    2478:	4770      	bx	lr

0000247a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    247a:	b480      	push	{r7}
    247c:	b083      	sub	sp, #12
    247e:	af00      	add	r7, sp, #0
    2480:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2482:	687b      	ldr	r3, [r7, #4]
    2484:	691b      	ldr	r3, [r3, #16]
    2486:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    248a:	687b      	ldr	r3, [r7, #4]
    248c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    248e:	bf00      	nop
    2490:	370c      	adds	r7, #12
    2492:	46bd      	mov	sp, r7
    2494:	f85d 7b04 	ldr.w	r7, [sp], #4
    2498:	4770      	bx	lr

0000249a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    249a:	b480      	push	{r7}
    249c:	b083      	sub	sp, #12
    249e:	af00      	add	r7, sp, #0
    24a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	691b      	ldr	r3, [r3, #16]
    24a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24ae:	bf00      	nop
    24b0:	370c      	adds	r7, #12
    24b2:	46bd      	mov	sp, r7
    24b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24b8:	4770      	bx	lr

000024ba <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    24ba:	b480      	push	{r7}
    24bc:	b083      	sub	sp, #12
    24be:	af00      	add	r7, sp, #0
    24c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    24c2:	687b      	ldr	r3, [r7, #4]
    24c4:	691b      	ldr	r3, [r3, #16]
    24c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24ce:	bf00      	nop
    24d0:	370c      	adds	r7, #12
    24d2:	46bd      	mov	sp, r7
    24d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24d8:	4770      	bx	lr

000024da <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    24da:	b480      	push	{r7}
    24dc:	b083      	sub	sp, #12
    24de:	af00      	add	r7, sp, #0
    24e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    24e2:	687b      	ldr	r3, [r7, #4]
    24e4:	691b      	ldr	r3, [r3, #16]
    24e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24ee:	bf00      	nop
    24f0:	370c      	adds	r7, #12
    24f2:	46bd      	mov	sp, r7
    24f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    24f8:	4770      	bx	lr

000024fa <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    24fa:	b480      	push	{r7}
    24fc:	b083      	sub	sp, #12
    24fe:	af00      	add	r7, sp, #0
    2500:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	695b      	ldr	r3, [r3, #20]
    2506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    250e:	bf00      	nop
    2510:	370c      	adds	r7, #12
    2512:	46bd      	mov	sp, r7
    2514:	f85d 7b04 	ldr.w	r7, [sp], #4
    2518:	4770      	bx	lr

0000251a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    251a:	b480      	push	{r7}
    251c:	b083      	sub	sp, #12
    251e:	af00      	add	r7, sp, #0
    2520:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2522:	687b      	ldr	r3, [r7, #4]
    2524:	695b      	ldr	r3, [r3, #20]
    2526:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    252e:	bf00      	nop
    2530:	370c      	adds	r7, #12
    2532:	46bd      	mov	sp, r7
    2534:	f85d 7b04 	ldr.w	r7, [sp], #4
    2538:	4770      	bx	lr

0000253a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    253a:	b480      	push	{r7}
    253c:	b083      	sub	sp, #12
    253e:	af00      	add	r7, sp, #0
    2540:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	695b      	ldr	r3, [r3, #20]
    2546:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    254e:	bf00      	nop
    2550:	370c      	adds	r7, #12
    2552:	46bd      	mov	sp, r7
    2554:	f85d 7b04 	ldr.w	r7, [sp], #4
    2558:	4770      	bx	lr

0000255a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    255a:	b480      	push	{r7}
    255c:	b083      	sub	sp, #12
    255e:	af00      	add	r7, sp, #0
    2560:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	695b      	ldr	r3, [r3, #20]
    2566:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    256a:	687b      	ldr	r3, [r7, #4]
    256c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    256e:	bf00      	nop
    2570:	370c      	adds	r7, #12
    2572:	46bd      	mov	sp, r7
    2574:	f85d 7b04 	ldr.w	r7, [sp], #4
    2578:	4770      	bx	lr

0000257a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    257a:	b480      	push	{r7}
    257c:	b083      	sub	sp, #12
    257e:	af00      	add	r7, sp, #0
    2580:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	699b      	ldr	r3, [r3, #24]
    2586:	f043 0201 	orr.w	r2, r3, #1
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    258e:	bf00      	nop
    2590:	370c      	adds	r7, #12
    2592:	46bd      	mov	sp, r7
    2594:	f85d 7b04 	ldr.w	r7, [sp], #4
    2598:	4770      	bx	lr

0000259a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    259a:	b480      	push	{r7}
    259c:	b083      	sub	sp, #12
    259e:	af00      	add	r7, sp, #0
    25a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    25a2:	687b      	ldr	r3, [r7, #4]
    25a4:	699b      	ldr	r3, [r3, #24]
    25a6:	f043 0202 	orr.w	r2, r3, #2
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25ae:	bf00      	nop
    25b0:	370c      	adds	r7, #12
    25b2:	46bd      	mov	sp, r7
    25b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    25b8:	4770      	bx	lr

000025ba <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    25ba:	b480      	push	{r7}
    25bc:	b083      	sub	sp, #12
    25be:	af00      	add	r7, sp, #0
    25c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	699b      	ldr	r3, [r3, #24]
    25c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25ce:	bf00      	nop
    25d0:	370c      	adds	r7, #12
    25d2:	46bd      	mov	sp, r7
    25d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    25d8:	4770      	bx	lr

000025da <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
    25da:	b480      	push	{r7}
    25dc:	b083      	sub	sp, #12
    25de:	af00      	add	r7, sp, #0
    25e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	699b      	ldr	r3, [r3, #24]
    25e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25ee:	bf00      	nop
    25f0:	370c      	adds	r7, #12
    25f2:	46bd      	mov	sp, r7
    25f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    25f8:	4770      	bx	lr

000025fa <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    25fa:	b480      	push	{r7}
    25fc:	b083      	sub	sp, #12
    25fe:	af00      	add	r7, sp, #0
    2600:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	699b      	ldr	r3, [r3, #24]
    2606:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    260e:	bf00      	nop
    2610:	370c      	adds	r7, #12
    2612:	46bd      	mov	sp, r7
    2614:	f85d 7b04 	ldr.w	r7, [sp], #4
    2618:	4770      	bx	lr

0000261a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    261a:	b480      	push	{r7}
    261c:	b083      	sub	sp, #12
    261e:	af00      	add	r7, sp, #0
    2620:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	699b      	ldr	r3, [r3, #24]
    2626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    262e:	bf00      	nop
    2630:	370c      	adds	r7, #12
    2632:	46bd      	mov	sp, r7
    2634:	f85d 7b04 	ldr.w	r7, [sp], #4
    2638:	4770      	bx	lr

0000263a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    263a:	b480      	push	{r7}
    263c:	b083      	sub	sp, #12
    263e:	af00      	add	r7, sp, #0
    2640:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2642:	687b      	ldr	r3, [r7, #4]
    2644:	699b      	ldr	r3, [r3, #24]
    2646:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    264e:	bf00      	nop
    2650:	370c      	adds	r7, #12
    2652:	46bd      	mov	sp, r7
    2654:	f85d 7b04 	ldr.w	r7, [sp], #4
    2658:	4770      	bx	lr

0000265a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    265a:	b480      	push	{r7}
    265c:	b083      	sub	sp, #12
    265e:	af00      	add	r7, sp, #0
    2660:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    2662:	687b      	ldr	r3, [r7, #4]
    2664:	69db      	ldr	r3, [r3, #28]
    2666:	f043 0208 	orr.w	r2, r3, #8
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    266e:	bf00      	nop
    2670:	370c      	adds	r7, #12
    2672:	46bd      	mov	sp, r7
    2674:	f85d 7b04 	ldr.w	r7, [sp], #4
    2678:	4770      	bx	lr

0000267a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    267a:	b480      	push	{r7}
    267c:	b083      	sub	sp, #12
    267e:	af00      	add	r7, sp, #0
    2680:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	69db      	ldr	r3, [r3, #28]
    2686:	f043 0220 	orr.w	r2, r3, #32
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    268e:	bf00      	nop
    2690:	370c      	adds	r7, #12
    2692:	46bd      	mov	sp, r7
    2694:	f85d 7b04 	ldr.w	r7, [sp], #4
    2698:	4770      	bx	lr

0000269a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    269a:	b480      	push	{r7}
    269c:	b083      	sub	sp, #12
    269e:	af00      	add	r7, sp, #0
    26a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    26a2:	687b      	ldr	r3, [r7, #4]
    26a4:	69db      	ldr	r3, [r3, #28]
    26a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26ae:	bf00      	nop
    26b0:	370c      	adds	r7, #12
    26b2:	46bd      	mov	sp, r7
    26b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b8:	4770      	bx	lr

000026ba <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    26ba:	b480      	push	{r7}
    26bc:	b083      	sub	sp, #12
    26be:	af00      	add	r7, sp, #0
    26c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	69db      	ldr	r3, [r3, #28]
    26c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26ce:	bf00      	nop
    26d0:	370c      	adds	r7, #12
    26d2:	46bd      	mov	sp, r7
    26d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26d8:	4770      	bx	lr

000026da <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    26da:	b480      	push	{r7}
    26dc:	b083      	sub	sp, #12
    26de:	af00      	add	r7, sp, #0
    26e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	6a1b      	ldr	r3, [r3, #32]
    26e6:	f043 0201 	orr.w	r2, r3, #1
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26ee:	bf00      	nop
    26f0:	370c      	adds	r7, #12
    26f2:	46bd      	mov	sp, r7
    26f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26f8:	4770      	bx	lr

000026fa <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    26fa:	b480      	push	{r7}
    26fc:	b083      	sub	sp, #12
    26fe:	af00      	add	r7, sp, #0
    2700:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	6a1b      	ldr	r3, [r3, #32]
    2706:	f043 0202 	orr.w	r2, r3, #2
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    270e:	bf00      	nop
    2710:	370c      	adds	r7, #12
    2712:	46bd      	mov	sp, r7
    2714:	f85d 7b04 	ldr.w	r7, [sp], #4
    2718:	4770      	bx	lr

0000271a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    271a:	b480      	push	{r7}
    271c:	b083      	sub	sp, #12
    271e:	af00      	add	r7, sp, #0
    2720:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	6a1b      	ldr	r3, [r3, #32]
    2726:	f043 0204 	orr.w	r2, r3, #4
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    272e:	bf00      	nop
    2730:	370c      	adds	r7, #12
    2732:	46bd      	mov	sp, r7
    2734:	f85d 7b04 	ldr.w	r7, [sp], #4
    2738:	4770      	bx	lr

0000273a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    273a:	b480      	push	{r7}
    273c:	b083      	sub	sp, #12
    273e:	af00      	add	r7, sp, #0
    2740:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	6a1b      	ldr	r3, [r3, #32]
    2746:	f043 0208 	orr.w	r2, r3, #8
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    274e:	bf00      	nop
    2750:	370c      	adds	r7, #12
    2752:	46bd      	mov	sp, r7
    2754:	f85d 7b04 	ldr.w	r7, [sp], #4
    2758:	4770      	bx	lr

0000275a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    275a:	b480      	push	{r7}
    275c:	b083      	sub	sp, #12
    275e:	af00      	add	r7, sp, #0
    2760:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	6a1b      	ldr	r3, [r3, #32]
    2766:	f043 0220 	orr.w	r2, r3, #32
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    276e:	bf00      	nop
    2770:	370c      	adds	r7, #12
    2772:	46bd      	mov	sp, r7
    2774:	f85d 7b04 	ldr.w	r7, [sp], #4
    2778:	4770      	bx	lr

0000277a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    277a:	b480      	push	{r7}
    277c:	b083      	sub	sp, #12
    277e:	af00      	add	r7, sp, #0
    2780:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	6a1b      	ldr	r3, [r3, #32]
    2786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    278e:	bf00      	nop
    2790:	370c      	adds	r7, #12
    2792:	46bd      	mov	sp, r7
    2794:	f85d 7b04 	ldr.w	r7, [sp], #4
    2798:	4770      	bx	lr

0000279a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    279a:	b480      	push	{r7}
    279c:	b085      	sub	sp, #20
    279e:	af00      	add	r7, sp, #0
    27a0:	60f8      	str	r0, [r7, #12]
    27a2:	460b      	mov	r3, r1
    27a4:	607a      	str	r2, [r7, #4]
    27a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    27a8:	7afb      	ldrb	r3, [r7, #11]
    27aa:	68fa      	ldr	r2, [r7, #12]
    27ac:	01db      	lsls	r3, r3, #7
    27ae:	4413      	add	r3, r2
    27b0:	3308      	adds	r3, #8
    27b2:	687a      	ldr	r2, [r7, #4]
    27b4:	601a      	str	r2, [r3, #0]
}
    27b6:	bf00      	nop
    27b8:	3714      	adds	r7, #20
    27ba:	46bd      	mov	sp, r7
    27bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c0:	4770      	bx	lr

000027c2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    27c2:	b480      	push	{r7}
    27c4:	b085      	sub	sp, #20
    27c6:	af00      	add	r7, sp, #0
    27c8:	60f8      	str	r0, [r7, #12]
    27ca:	460b      	mov	r3, r1
    27cc:	607a      	str	r2, [r7, #4]
    27ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    27d0:	7afb      	ldrb	r3, [r7, #11]
    27d2:	68fa      	ldr	r2, [r7, #12]
    27d4:	01db      	lsls	r3, r3, #7
    27d6:	4413      	add	r3, r2
    27d8:	3304      	adds	r3, #4
    27da:	687a      	ldr	r2, [r7, #4]
    27dc:	601a      	str	r2, [r3, #0]
}
    27de:	bf00      	nop
    27e0:	3714      	adds	r7, #20
    27e2:	46bd      	mov	sp, r7
    27e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27e8:	4770      	bx	lr

000027ea <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    27ea:	b480      	push	{r7}
    27ec:	b085      	sub	sp, #20
    27ee:	af00      	add	r7, sp, #0
    27f0:	60f8      	str	r0, [r7, #12]
    27f2:	460b      	mov	r3, r1
    27f4:	607a      	str	r2, [r7, #4]
    27f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27f8:	7afb      	ldrb	r3, [r7, #11]
    27fa:	68fa      	ldr	r2, [r7, #12]
    27fc:	01db      	lsls	r3, r3, #7
    27fe:	4413      	add	r3, r2
    2800:	3318      	adds	r3, #24
    2802:	687a      	ldr	r2, [r7, #4]
    2804:	601a      	str	r2, [r3, #0]
}
    2806:	bf00      	nop
    2808:	3714      	adds	r7, #20
    280a:	46bd      	mov	sp, r7
    280c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2810:	4770      	bx	lr

00002812 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2812:	b480      	push	{r7}
    2814:	b085      	sub	sp, #20
    2816:	af00      	add	r7, sp, #0
    2818:	60f8      	str	r0, [r7, #12]
    281a:	460b      	mov	r3, r1
    281c:	607a      	str	r2, [r7, #4]
    281e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2820:	7afb      	ldrb	r3, [r7, #11]
    2822:	68fa      	ldr	r2, [r7, #12]
    2824:	01db      	lsls	r3, r3, #7
    2826:	4413      	add	r3, r2
    2828:	3314      	adds	r3, #20
    282a:	687a      	ldr	r2, [r7, #4]
    282c:	601a      	str	r2, [r3, #0]
}
    282e:	bf00      	nop
    2830:	3714      	adds	r7, #20
    2832:	46bd      	mov	sp, r7
    2834:	f85d 7b04 	ldr.w	r7, [sp], #4
    2838:	4770      	bx	lr

0000283a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    283a:	b480      	push	{r7}
    283c:	b085      	sub	sp, #20
    283e:	af00      	add	r7, sp, #0
    2840:	6078      	str	r0, [r7, #4]
    2842:	4608      	mov	r0, r1
    2844:	4611      	mov	r1, r2
    2846:	461a      	mov	r2, r3
    2848:	4603      	mov	r3, r0
    284a:	70fb      	strb	r3, [r7, #3]
    284c:	460b      	mov	r3, r1
    284e:	70bb      	strb	r3, [r7, #2]
    2850:	4613      	mov	r3, r2
    2852:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2854:	78fa      	ldrb	r2, [r7, #3]
    2856:	78bb      	ldrb	r3, [r7, #2]
    2858:	6879      	ldr	r1, [r7, #4]
    285a:	01d2      	lsls	r2, r2, #7
    285c:	440a      	add	r2, r1
    285e:	4413      	add	r3, r2
    2860:	3330      	adds	r3, #48	; 0x30
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2866:	7bfb      	ldrb	r3, [r7, #15]
    2868:	f023 030f 	bic.w	r3, r3, #15
    286c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    286e:	787b      	ldrb	r3, [r7, #1]
    2870:	f003 030f 	and.w	r3, r3, #15
    2874:	b2da      	uxtb	r2, r3
    2876:	7bfb      	ldrb	r3, [r7, #15]
    2878:	4313      	orrs	r3, r2
    287a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    287c:	78fa      	ldrb	r2, [r7, #3]
    287e:	78bb      	ldrb	r3, [r7, #2]
    2880:	6879      	ldr	r1, [r7, #4]
    2882:	01d2      	lsls	r2, r2, #7
    2884:	440a      	add	r2, r1
    2886:	4413      	add	r3, r2
    2888:	3330      	adds	r3, #48	; 0x30
    288a:	7bfa      	ldrb	r2, [r7, #15]
    288c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    288e:	bf00      	nop
    2890:	3714      	adds	r7, #20
    2892:	46bd      	mov	sp, r7
    2894:	f85d 7b04 	ldr.w	r7, [sp], #4
    2898:	4770      	bx	lr

0000289a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    289a:	b480      	push	{r7}
    289c:	b085      	sub	sp, #20
    289e:	af00      	add	r7, sp, #0
    28a0:	6078      	str	r0, [r7, #4]
    28a2:	4608      	mov	r0, r1
    28a4:	4611      	mov	r1, r2
    28a6:	461a      	mov	r2, r3
    28a8:	4603      	mov	r3, r0
    28aa:	70fb      	strb	r3, [r7, #3]
    28ac:	460b      	mov	r3, r1
    28ae:	70bb      	strb	r3, [r7, #2]
    28b0:	4613      	mov	r3, r2
    28b2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    28b4:	78fa      	ldrb	r2, [r7, #3]
    28b6:	78bb      	ldrb	r3, [r7, #2]
    28b8:	6879      	ldr	r1, [r7, #4]
    28ba:	01d2      	lsls	r2, r2, #7
    28bc:	440a      	add	r2, r1
    28be:	4413      	add	r3, r2
    28c0:	3330      	adds	r3, #48	; 0x30
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    28c6:	7bfb      	ldrb	r3, [r7, #15]
    28c8:	f003 030f 	and.w	r3, r3, #15
    28cc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    28ce:	787b      	ldrb	r3, [r7, #1]
    28d0:	011b      	lsls	r3, r3, #4
    28d2:	b2da      	uxtb	r2, r3
    28d4:	7bfb      	ldrb	r3, [r7, #15]
    28d6:	4313      	orrs	r3, r2
    28d8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    28da:	78fa      	ldrb	r2, [r7, #3]
    28dc:	78bb      	ldrb	r3, [r7, #2]
    28de:	6879      	ldr	r1, [r7, #4]
    28e0:	01d2      	lsls	r2, r2, #7
    28e2:	440a      	add	r2, r1
    28e4:	4413      	add	r3, r2
    28e6:	3330      	adds	r3, #48	; 0x30
    28e8:	7bfa      	ldrb	r2, [r7, #15]
    28ea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    28ec:	bf00      	nop
    28ee:	3714      	adds	r7, #20
    28f0:	46bd      	mov	sp, r7
    28f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    28f6:	4770      	bx	lr

000028f8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    28f8:	b480      	push	{r7}
    28fa:	b085      	sub	sp, #20
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
    2900:	4608      	mov	r0, r1
    2902:	4611      	mov	r1, r2
    2904:	461a      	mov	r2, r3
    2906:	4603      	mov	r3, r0
    2908:	70fb      	strb	r3, [r7, #3]
    290a:	460b      	mov	r3, r1
    290c:	70bb      	strb	r3, [r7, #2]
    290e:	4613      	mov	r3, r2
    2910:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2912:	78fa      	ldrb	r2, [r7, #3]
    2914:	78bb      	ldrb	r3, [r7, #2]
    2916:	6879      	ldr	r1, [r7, #4]
    2918:	01d2      	lsls	r2, r2, #7
    291a:	440a      	add	r2, r1
    291c:	4413      	add	r3, r2
    291e:	3340      	adds	r3, #64	; 0x40
    2920:	781b      	ldrb	r3, [r3, #0]
    2922:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2924:	7bfb      	ldrb	r3, [r7, #15]
    2926:	f023 0301 	bic.w	r3, r3, #1
    292a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    292c:	787a      	ldrb	r2, [r7, #1]
    292e:	7bfb      	ldrb	r3, [r7, #15]
    2930:	4313      	orrs	r3, r2
    2932:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2934:	78fa      	ldrb	r2, [r7, #3]
    2936:	78bb      	ldrb	r3, [r7, #2]
    2938:	6879      	ldr	r1, [r7, #4]
    293a:	01d2      	lsls	r2, r2, #7
    293c:	440a      	add	r2, r1
    293e:	4413      	add	r3, r2
    2940:	3340      	adds	r3, #64	; 0x40
    2942:	7bfa      	ldrb	r2, [r7, #15]
    2944:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2946:	bf00      	nop
    2948:	3714      	adds	r7, #20
    294a:	46bd      	mov	sp, r7
    294c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2950:	4770      	bx	lr

00002952 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2952:	b490      	push	{r4, r7}
    2954:	b082      	sub	sp, #8
    2956:	af00      	add	r7, sp, #0
    2958:	6078      	str	r0, [r7, #4]
    295a:	460b      	mov	r3, r1
    295c:	70fb      	strb	r3, [r7, #3]
    295e:	4613      	mov	r3, r2
    2960:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2962:	78fa      	ldrb	r2, [r7, #3]
    2964:	78bb      	ldrb	r3, [r7, #2]
    2966:	78f8      	ldrb	r0, [r7, #3]
    2968:	78b9      	ldrb	r1, [r7, #2]
    296a:	687c      	ldr	r4, [r7, #4]
    296c:	01c0      	lsls	r0, r0, #7
    296e:	4420      	add	r0, r4
    2970:	4401      	add	r1, r0
    2972:	3140      	adds	r1, #64	; 0x40
    2974:	7809      	ldrb	r1, [r1, #0]
    2976:	b2c9      	uxtb	r1, r1
    2978:	f041 0104 	orr.w	r1, r1, #4
    297c:	b2c8      	uxtb	r0, r1
    297e:	6879      	ldr	r1, [r7, #4]
    2980:	01d2      	lsls	r2, r2, #7
    2982:	440a      	add	r2, r1
    2984:	4413      	add	r3, r2
    2986:	3340      	adds	r3, #64	; 0x40
    2988:	4602      	mov	r2, r0
    298a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    298c:	bf00      	nop
    298e:	3708      	adds	r7, #8
    2990:	46bd      	mov	sp, r7
    2992:	bc90      	pop	{r4, r7}
    2994:	4770      	bx	lr

00002996 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2996:	b490      	push	{r4, r7}
    2998:	b082      	sub	sp, #8
    299a:	af00      	add	r7, sp, #0
    299c:	6078      	str	r0, [r7, #4]
    299e:	460b      	mov	r3, r1
    29a0:	70fb      	strb	r3, [r7, #3]
    29a2:	4613      	mov	r3, r2
    29a4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    29a6:	78fa      	ldrb	r2, [r7, #3]
    29a8:	78bb      	ldrb	r3, [r7, #2]
    29aa:	78f8      	ldrb	r0, [r7, #3]
    29ac:	78b9      	ldrb	r1, [r7, #2]
    29ae:	687c      	ldr	r4, [r7, #4]
    29b0:	01c0      	lsls	r0, r0, #7
    29b2:	4420      	add	r0, r4
    29b4:	4401      	add	r1, r0
    29b6:	3140      	adds	r1, #64	; 0x40
    29b8:	7809      	ldrb	r1, [r1, #0]
    29ba:	b2c9      	uxtb	r1, r1
    29bc:	f021 0104 	bic.w	r1, r1, #4
    29c0:	b2c8      	uxtb	r0, r1
    29c2:	6879      	ldr	r1, [r7, #4]
    29c4:	01d2      	lsls	r2, r2, #7
    29c6:	440a      	add	r2, r1
    29c8:	4413      	add	r3, r2
    29ca:	3340      	adds	r3, #64	; 0x40
    29cc:	4602      	mov	r2, r0
    29ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    29d0:	bf00      	nop
    29d2:	3708      	adds	r7, #8
    29d4:	46bd      	mov	sp, r7
    29d6:	bc90      	pop	{r4, r7}
    29d8:	4770      	bx	lr

000029da <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    29da:	b480      	push	{r7}
    29dc:	b085      	sub	sp, #20
    29de:	af00      	add	r7, sp, #0
    29e0:	60f8      	str	r0, [r7, #12]
    29e2:	460b      	mov	r3, r1
    29e4:	607a      	str	r2, [r7, #4]
    29e6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29e8:	7afb      	ldrb	r3, [r7, #11]
    29ea:	68fa      	ldr	r2, [r7, #12]
    29ec:	01db      	lsls	r3, r3, #7
    29ee:	4413      	add	r3, r2
    29f0:	3328      	adds	r3, #40	; 0x28
    29f2:	687a      	ldr	r2, [r7, #4]
    29f4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    29f6:	bf00      	nop
    29f8:	3714      	adds	r7, #20
    29fa:	46bd      	mov	sp, r7
    29fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a00:	4770      	bx	lr
	...

00002a04 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2a04:	b580      	push	{r7, lr}
    2a06:	b082      	sub	sp, #8
    2a08:	af00      	add	r7, sp, #0
    2a0a:	4603      	mov	r3, r0
    2a0c:	6039      	str	r1, [r7, #0]
    2a0e:	71fb      	strb	r3, [r7, #7]
    2a10:	4613      	mov	r3, r2
    2a12:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    2a14:	79bb      	ldrb	r3, [r7, #6]
    2a16:	2b01      	cmp	r3, #1
    2a18:	d01c      	beq.n	2a54 <_gpio_set_direction+0x50>
    2a1a:	2b02      	cmp	r3, #2
    2a1c:	d037      	beq.n	2a8e <_gpio_set_direction+0x8a>
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d14e      	bne.n	2ac0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2a22:	79fb      	ldrb	r3, [r7, #7]
    2a24:	683a      	ldr	r2, [r7, #0]
    2a26:	4619      	mov	r1, r3
    2a28:	482a      	ldr	r0, [pc, #168]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a2a:	4b2b      	ldr	r3, [pc, #172]	; (2ad8 <_gpio_set_direction+0xd4>)
    2a2c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2a2e:	683b      	ldr	r3, [r7, #0]
    2a30:	b29b      	uxth	r3, r3
    2a32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2a36:	79fb      	ldrb	r3, [r7, #7]
    2a38:	4619      	mov	r1, r3
    2a3a:	4826      	ldr	r0, [pc, #152]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a3c:	4b27      	ldr	r3, [pc, #156]	; (2adc <_gpio_set_direction+0xd8>)
    2a3e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2a40:	683b      	ldr	r3, [r7, #0]
    2a42:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2a44:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2a48:	79fb      	ldrb	r3, [r7, #7]
    2a4a:	4619      	mov	r1, r3
    2a4c:	4821      	ldr	r0, [pc, #132]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a4e:	4b23      	ldr	r3, [pc, #140]	; (2adc <_gpio_set_direction+0xd8>)
    2a50:	4798      	blx	r3
		break;
    2a52:	e03a      	b.n	2aca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2a54:	79fb      	ldrb	r3, [r7, #7]
    2a56:	683a      	ldr	r2, [r7, #0]
    2a58:	4619      	mov	r1, r3
    2a5a:	481e      	ldr	r0, [pc, #120]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a5c:	4b1e      	ldr	r3, [pc, #120]	; (2ad8 <_gpio_set_direction+0xd4>)
    2a5e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2a60:	683b      	ldr	r3, [r7, #0]
    2a62:	b29b      	uxth	r3, r3
    2a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2a6c:	79f9      	ldrb	r1, [r7, #7]
    2a6e:	461a      	mov	r2, r3
    2a70:	4818      	ldr	r0, [pc, #96]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a72:	4b1a      	ldr	r3, [pc, #104]	; (2adc <_gpio_set_direction+0xd8>)
    2a74:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2a76:	683b      	ldr	r3, [r7, #0]
    2a78:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2a7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2a82:	79f9      	ldrb	r1, [r7, #7]
    2a84:	461a      	mov	r2, r3
    2a86:	4813      	ldr	r0, [pc, #76]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a88:	4b14      	ldr	r3, [pc, #80]	; (2adc <_gpio_set_direction+0xd8>)
    2a8a:	4798      	blx	r3
		break;
    2a8c:	e01d      	b.n	2aca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    2a8e:	79fb      	ldrb	r3, [r7, #7]
    2a90:	683a      	ldr	r2, [r7, #0]
    2a92:	4619      	mov	r1, r3
    2a94:	480f      	ldr	r0, [pc, #60]	; (2ad4 <_gpio_set_direction+0xd0>)
    2a96:	4b12      	ldr	r3, [pc, #72]	; (2ae0 <_gpio_set_direction+0xdc>)
    2a98:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2a9a:	683b      	ldr	r3, [r7, #0]
    2a9c:	b29b      	uxth	r3, r3
    2a9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2aa2:	79fb      	ldrb	r3, [r7, #7]
    2aa4:	4619      	mov	r1, r3
    2aa6:	480b      	ldr	r0, [pc, #44]	; (2ad4 <_gpio_set_direction+0xd0>)
    2aa8:	4b0c      	ldr	r3, [pc, #48]	; (2adc <_gpio_set_direction+0xd8>)
    2aaa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2aac:	683b      	ldr	r3, [r7, #0]
    2aae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2ab0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2ab4:	79fb      	ldrb	r3, [r7, #7]
    2ab6:	4619      	mov	r1, r3
    2ab8:	4806      	ldr	r0, [pc, #24]	; (2ad4 <_gpio_set_direction+0xd0>)
    2aba:	4b08      	ldr	r3, [pc, #32]	; (2adc <_gpio_set_direction+0xd8>)
    2abc:	4798      	blx	r3
		break;
    2abe:	e004      	b.n	2aca <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    2ac0:	2246      	movs	r2, #70	; 0x46
    2ac2:	4908      	ldr	r1, [pc, #32]	; (2ae4 <_gpio_set_direction+0xe0>)
    2ac4:	2000      	movs	r0, #0
    2ac6:	4b08      	ldr	r3, [pc, #32]	; (2ae8 <_gpio_set_direction+0xe4>)
    2ac8:	4798      	blx	r3
	}
}
    2aca:	bf00      	nop
    2acc:	3708      	adds	r7, #8
    2ace:	46bd      	mov	sp, r7
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop
    2ad4:	41008000 	.word	0x41008000
    2ad8:	000027c3 	.word	0x000027c3
    2adc:	000029db 	.word	0x000029db
    2ae0:	0000279b 	.word	0x0000279b
    2ae4:	0001113c 	.word	0x0001113c
    2ae8:	00005239 	.word	0x00005239

00002aec <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	4603      	mov	r3, r0
    2af4:	6039      	str	r1, [r7, #0]
    2af6:	71fb      	strb	r3, [r7, #7]
    2af8:	4613      	mov	r3, r2
    2afa:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2afc:	79bb      	ldrb	r3, [r7, #6]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d006      	beq.n	2b10 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    2b02:	79fb      	ldrb	r3, [r7, #7]
    2b04:	683a      	ldr	r2, [r7, #0]
    2b06:	4619      	mov	r1, r3
    2b08:	4806      	ldr	r0, [pc, #24]	; (2b24 <_gpio_set_level+0x38>)
    2b0a:	4b07      	ldr	r3, [pc, #28]	; (2b28 <_gpio_set_level+0x3c>)
    2b0c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    2b0e:	e005      	b.n	2b1c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2b10:	79fb      	ldrb	r3, [r7, #7]
    2b12:	683a      	ldr	r2, [r7, #0]
    2b14:	4619      	mov	r1, r3
    2b16:	4803      	ldr	r0, [pc, #12]	; (2b24 <_gpio_set_level+0x38>)
    2b18:	4b04      	ldr	r3, [pc, #16]	; (2b2c <_gpio_set_level+0x40>)
    2b1a:	4798      	blx	r3
}
    2b1c:	bf00      	nop
    2b1e:	3708      	adds	r7, #8
    2b20:	46bd      	mov	sp, r7
    2b22:	bd80      	pop	{r7, pc}
    2b24:	41008000 	.word	0x41008000
    2b28:	000027eb 	.word	0x000027eb
    2b2c:	00002813 	.word	0x00002813

00002b30 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b082      	sub	sp, #8
    2b34:	af00      	add	r7, sp, #0
    2b36:	4603      	mov	r3, r0
    2b38:	71fb      	strb	r3, [r7, #7]
    2b3a:	460b      	mov	r3, r1
    2b3c:	71bb      	strb	r3, [r7, #6]
    2b3e:	4613      	mov	r3, r2
    2b40:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    2b42:	797b      	ldrb	r3, [r7, #5]
    2b44:	2b01      	cmp	r3, #1
    2b46:	d00a      	beq.n	2b5e <_gpio_set_pin_pull_mode+0x2e>
    2b48:	2b02      	cmp	r3, #2
    2b4a:	d01f      	beq.n	2b8c <_gpio_set_pin_pull_mode+0x5c>
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d134      	bne.n	2bba <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    2b50:	79ba      	ldrb	r2, [r7, #6]
    2b52:	79fb      	ldrb	r3, [r7, #7]
    2b54:	4619      	mov	r1, r3
    2b56:	481e      	ldr	r0, [pc, #120]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2b58:	4b1e      	ldr	r3, [pc, #120]	; (2bd4 <_gpio_set_pin_pull_mode+0xa4>)
    2b5a:	4798      	blx	r3
		break;
    2b5c:	e033      	b.n	2bc6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2b5e:	79bb      	ldrb	r3, [r7, #6]
    2b60:	2201      	movs	r2, #1
    2b62:	409a      	lsls	r2, r3
    2b64:	79fb      	ldrb	r3, [r7, #7]
    2b66:	4619      	mov	r1, r3
    2b68:	4819      	ldr	r0, [pc, #100]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2b6a:	4b1b      	ldr	r3, [pc, #108]	; (2bd8 <_gpio_set_pin_pull_mode+0xa8>)
    2b6c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2b6e:	79ba      	ldrb	r2, [r7, #6]
    2b70:	79fb      	ldrb	r3, [r7, #7]
    2b72:	4619      	mov	r1, r3
    2b74:	4816      	ldr	r0, [pc, #88]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2b76:	4b19      	ldr	r3, [pc, #100]	; (2bdc <_gpio_set_pin_pull_mode+0xac>)
    2b78:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    2b7a:	79bb      	ldrb	r3, [r7, #6]
    2b7c:	2201      	movs	r2, #1
    2b7e:	409a      	lsls	r2, r3
    2b80:	79fb      	ldrb	r3, [r7, #7]
    2b82:	4619      	mov	r1, r3
    2b84:	4812      	ldr	r0, [pc, #72]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2b86:	4b16      	ldr	r3, [pc, #88]	; (2be0 <_gpio_set_pin_pull_mode+0xb0>)
    2b88:	4798      	blx	r3
		break;
    2b8a:	e01c      	b.n	2bc6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2b8c:	79bb      	ldrb	r3, [r7, #6]
    2b8e:	2201      	movs	r2, #1
    2b90:	409a      	lsls	r2, r3
    2b92:	79fb      	ldrb	r3, [r7, #7]
    2b94:	4619      	mov	r1, r3
    2b96:	480e      	ldr	r0, [pc, #56]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2b98:	4b0f      	ldr	r3, [pc, #60]	; (2bd8 <_gpio_set_pin_pull_mode+0xa8>)
    2b9a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2b9c:	79ba      	ldrb	r2, [r7, #6]
    2b9e:	79fb      	ldrb	r3, [r7, #7]
    2ba0:	4619      	mov	r1, r3
    2ba2:	480b      	ldr	r0, [pc, #44]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2ba4:	4b0d      	ldr	r3, [pc, #52]	; (2bdc <_gpio_set_pin_pull_mode+0xac>)
    2ba6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    2ba8:	79bb      	ldrb	r3, [r7, #6]
    2baa:	2201      	movs	r2, #1
    2bac:	409a      	lsls	r2, r3
    2bae:	79fb      	ldrb	r3, [r7, #7]
    2bb0:	4619      	mov	r1, r3
    2bb2:	4807      	ldr	r0, [pc, #28]	; (2bd0 <_gpio_set_pin_pull_mode+0xa0>)
    2bb4:	4b0b      	ldr	r3, [pc, #44]	; (2be4 <_gpio_set_pin_pull_mode+0xb4>)
    2bb6:	4798      	blx	r3
		break;
    2bb8:	e005      	b.n	2bc6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    2bba:	2289      	movs	r2, #137	; 0x89
    2bbc:	490a      	ldr	r1, [pc, #40]	; (2be8 <_gpio_set_pin_pull_mode+0xb8>)
    2bbe:	2000      	movs	r0, #0
    2bc0:	4b0a      	ldr	r3, [pc, #40]	; (2bec <_gpio_set_pin_pull_mode+0xbc>)
    2bc2:	4798      	blx	r3
		break;
    2bc4:	bf00      	nop
	}
}
    2bc6:	bf00      	nop
    2bc8:	3708      	adds	r7, #8
    2bca:	46bd      	mov	sp, r7
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	bf00      	nop
    2bd0:	41008000 	.word	0x41008000
    2bd4:	00002997 	.word	0x00002997
    2bd8:	000027c3 	.word	0x000027c3
    2bdc:	00002953 	.word	0x00002953
    2be0:	000027eb 	.word	0x000027eb
    2be4:	00002813 	.word	0x00002813
    2be8:	0001113c 	.word	0x0001113c
    2bec:	00005239 	.word	0x00005239

00002bf0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2bf0:	b590      	push	{r4, r7, lr}
    2bf2:	b085      	sub	sp, #20
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
    2bf8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	095b      	lsrs	r3, r3, #5
    2bfe:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	b2db      	uxtb	r3, r3
    2c04:	f003 031f 	and.w	r3, r3, #31
    2c08:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2c0a:	683b      	ldr	r3, [r7, #0]
    2c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c10:	d106      	bne.n	2c20 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    2c12:	7bba      	ldrb	r2, [r7, #14]
    2c14:	7bf9      	ldrb	r1, [r7, #15]
    2c16:	2300      	movs	r3, #0
    2c18:	4812      	ldr	r0, [pc, #72]	; (2c64 <_gpio_set_pin_function+0x74>)
    2c1a:	4c13      	ldr	r4, [pc, #76]	; (2c68 <_gpio_set_pin_function+0x78>)
    2c1c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    2c1e:	e01d      	b.n	2c5c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    2c20:	7bba      	ldrb	r2, [r7, #14]
    2c22:	7bf9      	ldrb	r1, [r7, #15]
    2c24:	2301      	movs	r3, #1
    2c26:	480f      	ldr	r0, [pc, #60]	; (2c64 <_gpio_set_pin_function+0x74>)
    2c28:	4c0f      	ldr	r4, [pc, #60]	; (2c68 <_gpio_set_pin_function+0x78>)
    2c2a:	47a0      	blx	r4
		if (pin & 1) {
    2c2c:	7bbb      	ldrb	r3, [r7, #14]
    2c2e:	f003 0301 	and.w	r3, r3, #1
    2c32:	2b00      	cmp	r3, #0
    2c34:	d009      	beq.n	2c4a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2c36:	7bbb      	ldrb	r3, [r7, #14]
    2c38:	085b      	lsrs	r3, r3, #1
    2c3a:	b2da      	uxtb	r2, r3
    2c3c:	683b      	ldr	r3, [r7, #0]
    2c3e:	b2db      	uxtb	r3, r3
    2c40:	7bf9      	ldrb	r1, [r7, #15]
    2c42:	4808      	ldr	r0, [pc, #32]	; (2c64 <_gpio_set_pin_function+0x74>)
    2c44:	4c09      	ldr	r4, [pc, #36]	; (2c6c <_gpio_set_pin_function+0x7c>)
    2c46:	47a0      	blx	r4
}
    2c48:	e008      	b.n	2c5c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2c4a:	7bbb      	ldrb	r3, [r7, #14]
    2c4c:	085b      	lsrs	r3, r3, #1
    2c4e:	b2da      	uxtb	r2, r3
    2c50:	683b      	ldr	r3, [r7, #0]
    2c52:	b2db      	uxtb	r3, r3
    2c54:	7bf9      	ldrb	r1, [r7, #15]
    2c56:	4803      	ldr	r0, [pc, #12]	; (2c64 <_gpio_set_pin_function+0x74>)
    2c58:	4c05      	ldr	r4, [pc, #20]	; (2c70 <_gpio_set_pin_function+0x80>)
    2c5a:	47a0      	blx	r4
}
    2c5c:	bf00      	nop
    2c5e:	3714      	adds	r7, #20
    2c60:	46bd      	mov	sp, r7
    2c62:	bd90      	pop	{r4, r7, pc}
    2c64:	41008000 	.word	0x41008000
    2c68:	000028f9 	.word	0x000028f9
    2c6c:	0000289b 	.word	0x0000289b
    2c70:	0000283b 	.word	0x0000283b

00002c74 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    2c74:	b580      	push	{r7, lr}
    2c76:	b082      	sub	sp, #8
    2c78:	af00      	add	r7, sp, #0
    2c7a:	4603      	mov	r3, r0
    2c7c:	460a      	mov	r2, r1
    2c7e:	71fb      	strb	r3, [r7, #7]
    2c80:	4613      	mov	r3, r2
    2c82:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    2c84:	79fb      	ldrb	r3, [r7, #7]
    2c86:	095b      	lsrs	r3, r3, #5
    2c88:	b2d8      	uxtb	r0, r3
    2c8a:	79fb      	ldrb	r3, [r7, #7]
    2c8c:	f003 031f 	and.w	r3, r3, #31
    2c90:	b2db      	uxtb	r3, r3
    2c92:	79ba      	ldrb	r2, [r7, #6]
    2c94:	4619      	mov	r1, r3
    2c96:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <gpio_set_pin_pull_mode+0x30>)
    2c98:	4798      	blx	r3
}
    2c9a:	bf00      	nop
    2c9c:	3708      	adds	r7, #8
    2c9e:	46bd      	mov	sp, r7
    2ca0:	bd80      	pop	{r7, pc}
    2ca2:	bf00      	nop
    2ca4:	00002b31 	.word	0x00002b31

00002ca8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b082      	sub	sp, #8
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
    2cb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    2cb2:	6839      	ldr	r1, [r7, #0]
    2cb4:	6878      	ldr	r0, [r7, #4]
    2cb6:	4b03      	ldr	r3, [pc, #12]	; (2cc4 <gpio_set_pin_function+0x1c>)
    2cb8:	4798      	blx	r3
}
    2cba:	bf00      	nop
    2cbc:	3708      	adds	r7, #8
    2cbe:	46bd      	mov	sp, r7
    2cc0:	bd80      	pop	{r7, pc}
    2cc2:	bf00      	nop
    2cc4:	00002bf1 	.word	0x00002bf1

00002cc8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	4603      	mov	r3, r0
    2cd0:	460a      	mov	r2, r1
    2cd2:	71fb      	strb	r3, [r7, #7]
    2cd4:	4613      	mov	r3, r2
    2cd6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    2cd8:	79fb      	ldrb	r3, [r7, #7]
    2cda:	095b      	lsrs	r3, r3, #5
    2cdc:	b2d8      	uxtb	r0, r3
    2cde:	79fb      	ldrb	r3, [r7, #7]
    2ce0:	f003 031f 	and.w	r3, r3, #31
    2ce4:	2201      	movs	r2, #1
    2ce6:	fa02 f303 	lsl.w	r3, r2, r3
    2cea:	79ba      	ldrb	r2, [r7, #6]
    2cec:	4619      	mov	r1, r3
    2cee:	4b03      	ldr	r3, [pc, #12]	; (2cfc <gpio_set_pin_direction+0x34>)
    2cf0:	4798      	blx	r3
}
    2cf2:	bf00      	nop
    2cf4:	3708      	adds	r7, #8
    2cf6:	46bd      	mov	sp, r7
    2cf8:	bd80      	pop	{r7, pc}
    2cfa:	bf00      	nop
    2cfc:	00002a05 	.word	0x00002a05

00002d00 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b082      	sub	sp, #8
    2d04:	af00      	add	r7, sp, #0
    2d06:	4603      	mov	r3, r0
    2d08:	460a      	mov	r2, r1
    2d0a:	71fb      	strb	r3, [r7, #7]
    2d0c:	4613      	mov	r3, r2
    2d0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2d10:	79fb      	ldrb	r3, [r7, #7]
    2d12:	095b      	lsrs	r3, r3, #5
    2d14:	b2d8      	uxtb	r0, r3
    2d16:	79fb      	ldrb	r3, [r7, #7]
    2d18:	f003 031f 	and.w	r3, r3, #31
    2d1c:	2201      	movs	r2, #1
    2d1e:	fa02 f303 	lsl.w	r3, r2, r3
    2d22:	79ba      	ldrb	r2, [r7, #6]
    2d24:	4619      	mov	r1, r3
    2d26:	4b03      	ldr	r3, [pc, #12]	; (2d34 <gpio_set_pin_level+0x34>)
    2d28:	4798      	blx	r3
}
    2d2a:	bf00      	nop
    2d2c:	3708      	adds	r7, #8
    2d2e:	46bd      	mov	sp, r7
    2d30:	bd80      	pop	{r7, pc}
    2d32:	bf00      	nop
    2d34:	00002aed 	.word	0x00002aed

00002d38 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	af00      	add	r7, sp, #0
	_init_chip();
    2d3c:	4b01      	ldr	r3, [pc, #4]	; (2d44 <init_mcu+0xc>)
    2d3e:	4798      	blx	r3
}
    2d40:	bf00      	nop
    2d42:	bd80      	pop	{r7, pc}
    2d44:	00005e45 	.word	0x00005e45

00002d48 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
    2d50:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d004      	beq.n	2d62 <wdt_init+0x1a>
    2d58:	683b      	ldr	r3, [r7, #0]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d001      	beq.n	2d62 <wdt_init+0x1a>
    2d5e:	2301      	movs	r3, #1
    2d60:	e000      	b.n	2d64 <wdt_init+0x1c>
    2d62:	2300      	movs	r3, #0
    2d64:	f003 0301 	and.w	r3, r3, #1
    2d68:	b2db      	uxtb	r3, r3
    2d6a:	2248      	movs	r2, #72	; 0x48
    2d6c:	4907      	ldr	r1, [pc, #28]	; (2d8c <wdt_init+0x44>)
    2d6e:	4618      	mov	r0, r3
    2d70:	4b07      	ldr	r3, [pc, #28]	; (2d90 <wdt_init+0x48>)
    2d72:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	683a      	ldr	r2, [r7, #0]
    2d78:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	4618      	mov	r0, r3
    2d7e:	4b05      	ldr	r3, [pc, #20]	; (2d94 <wdt_init+0x4c>)
    2d80:	4798      	blx	r3
    2d82:	4603      	mov	r3, r0
}
    2d84:	4618      	mov	r0, r3
    2d86:	3708      	adds	r7, #8
    2d88:	46bd      	mov	sp, r7
    2d8a:	bd80      	pop	{r7, pc}
    2d8c:	00011158 	.word	0x00011158
    2d90:	00005239 	.word	0x00005239
    2d94:	0000c6ed 	.word	0x0000c6ed

00002d98 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    2d9c:	4804      	ldr	r0, [pc, #16]	; (2db0 <CRC_CALC_init+0x18>)
    2d9e:	4b05      	ldr	r3, [pc, #20]	; (2db4 <CRC_CALC_init+0x1c>)
    2da0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    2da2:	4905      	ldr	r1, [pc, #20]	; (2db8 <CRC_CALC_init+0x20>)
    2da4:	4805      	ldr	r0, [pc, #20]	; (2dbc <CRC_CALC_init+0x24>)
    2da6:	4b06      	ldr	r3, [pc, #24]	; (2dc0 <CRC_CALC_init+0x28>)
    2da8:	4798      	blx	r3
}
    2daa:	bf00      	nop
    2dac:	bd80      	pop	{r7, pc}
    2dae:	bf00      	nop
    2db0:	40000800 	.word	0x40000800
    2db4:	0000259b 	.word	0x0000259b
    2db8:	41002000 	.word	0x41002000
    2dbc:	2000a9d4 	.word	0x2000a9d4
    2dc0:	00003e35 	.word	0x00003e35

00002dc4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2dc8:	2244      	movs	r2, #68	; 0x44
    2dca:	2104      	movs	r1, #4
    2dcc:	483f      	ldr	r0, [pc, #252]	; (2ecc <EXTERNAL_IRQ_0_init+0x108>)
    2dce:	4b40      	ldr	r3, [pc, #256]	; (2ed0 <EXTERNAL_IRQ_0_init+0x10c>)
    2dd0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    2dd2:	4840      	ldr	r0, [pc, #256]	; (2ed4 <EXTERNAL_IRQ_0_init+0x110>)
    2dd4:	4b40      	ldr	r3, [pc, #256]	; (2ed8 <EXTERNAL_IRQ_0_init+0x114>)
    2dd6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    2dd8:	2101      	movs	r1, #1
    2dda:	2040      	movs	r0, #64	; 0x40
    2ddc:	4b3f      	ldr	r3, [pc, #252]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2dde:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    2de0:	2100      	movs	r1, #0
    2de2:	2040      	movs	r0, #64	; 0x40
    2de4:	4b3e      	ldr	r3, [pc, #248]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2de6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    2de8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    2dec:	2040      	movs	r0, #64	; 0x40
    2dee:	4b3d      	ldr	r3, [pc, #244]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2df0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    2df2:	2101      	movs	r1, #1
    2df4:	2021      	movs	r0, #33	; 0x21
    2df6:	4b39      	ldr	r3, [pc, #228]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2df8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    2dfa:	2100      	movs	r1, #0
    2dfc:	2021      	movs	r0, #33	; 0x21
    2dfe:	4b38      	ldr	r3, [pc, #224]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e00:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    2e02:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    2e06:	2021      	movs	r0, #33	; 0x21
    2e08:	4b36      	ldr	r3, [pc, #216]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2e0a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    2e0c:	2101      	movs	r1, #1
    2e0e:	2003      	movs	r0, #3
    2e10:	4b32      	ldr	r3, [pc, #200]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2e12:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    2e14:	2102      	movs	r1, #2
    2e16:	2003      	movs	r0, #3
    2e18:	4b31      	ldr	r3, [pc, #196]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    2e1c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    2e20:	2003      	movs	r0, #3
    2e22:	4b30      	ldr	r3, [pc, #192]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2e24:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    2e26:	2101      	movs	r1, #1
    2e28:	2004      	movs	r0, #4
    2e2a:	4b2c      	ldr	r3, [pc, #176]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2e2c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    2e2e:	2102      	movs	r1, #2
    2e30:	2004      	movs	r0, #4
    2e32:	4b2b      	ldr	r3, [pc, #172]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e34:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    2e36:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2e3a:	2004      	movs	r0, #4
    2e3c:	4b29      	ldr	r3, [pc, #164]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2e3e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    2e40:	2101      	movs	r1, #1
    2e42:	2005      	movs	r0, #5
    2e44:	4b25      	ldr	r3, [pc, #148]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2e46:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2e48:	2102      	movs	r1, #2
    2e4a:	2005      	movs	r0, #5
    2e4c:	4b24      	ldr	r3, [pc, #144]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    2e50:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    2e54:	2005      	movs	r0, #5
    2e56:	4b23      	ldr	r3, [pc, #140]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2e58:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    2e5a:	2101      	movs	r1, #1
    2e5c:	2056      	movs	r0, #86	; 0x56
    2e5e:	4b1f      	ldr	r3, [pc, #124]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2e60:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    2e62:	2102      	movs	r1, #2
    2e64:	2056      	movs	r0, #86	; 0x56
    2e66:	4b1e      	ldr	r3, [pc, #120]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e68:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    2e6a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    2e6e:	2056      	movs	r0, #86	; 0x56
    2e70:	4b1c      	ldr	r3, [pc, #112]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2e72:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    2e74:	2101      	movs	r1, #1
    2e76:	2057      	movs	r0, #87	; 0x57
    2e78:	4b18      	ldr	r3, [pc, #96]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2e7a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    2e7c:	2102      	movs	r1, #2
    2e7e:	2057      	movs	r0, #87	; 0x57
    2e80:	4b17      	ldr	r3, [pc, #92]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    2e84:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2e88:	2057      	movs	r0, #87	; 0x57
    2e8a:	4b16      	ldr	r3, [pc, #88]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2e8c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    2e8e:	2101      	movs	r1, #1
    2e90:	2028      	movs	r0, #40	; 0x28
    2e92:	4b12      	ldr	r3, [pc, #72]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2e94:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    2e96:	2100      	movs	r1, #0
    2e98:	2028      	movs	r0, #40	; 0x28
    2e9a:	4b11      	ldr	r3, [pc, #68]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2e9c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    2e9e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2ea2:	2028      	movs	r0, #40	; 0x28
    2ea4:	4b0f      	ldr	r3, [pc, #60]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2ea6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    2ea8:	2101      	movs	r1, #1
    2eaa:	2029      	movs	r0, #41	; 0x29
    2eac:	4b0b      	ldr	r3, [pc, #44]	; (2edc <EXTERNAL_IRQ_0_init+0x118>)
    2eae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    2eb0:	2100      	movs	r1, #0
    2eb2:	2029      	movs	r0, #41	; 0x29
    2eb4:	4b0a      	ldr	r3, [pc, #40]	; (2ee0 <EXTERNAL_IRQ_0_init+0x11c>)
    2eb6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    2eb8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    2ebc:	2029      	movs	r0, #41	; 0x29
    2ebe:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <EXTERNAL_IRQ_0_init+0x120>)
    2ec0:	4798      	blx	r3

	ext_irq_init();
    2ec2:	4b09      	ldr	r3, [pc, #36]	; (2ee8 <EXTERNAL_IRQ_0_init+0x124>)
    2ec4:	4798      	blx	r3
}
    2ec6:	bf00      	nop
    2ec8:	bd80      	pop	{r7, pc}
    2eca:	bf00      	nop
    2ecc:	40001c00 	.word	0x40001c00
    2ed0:	00002455 	.word	0x00002455
    2ed4:	40000800 	.word	0x40000800
    2ed8:	0000253b 	.word	0x0000253b
    2edc:	00002cc9 	.word	0x00002cc9
    2ee0:	00002c75 	.word	0x00002c75
    2ee4:	00002ca9 	.word	0x00002ca9
    2ee8:	00003efd 	.word	0x00003efd

00002eec <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    2eec:	b580      	push	{r7, lr}
    2eee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2ef0:	2244      	movs	r2, #68	; 0x44
    2ef2:	210b      	movs	r1, #11
    2ef4:	4807      	ldr	r0, [pc, #28]	; (2f14 <EVENT_SYSTEM_0_init+0x28>)
    2ef6:	4b08      	ldr	r3, [pc, #32]	; (2f18 <EVENT_SYSTEM_0_init+0x2c>)
    2ef8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2efa:	2244      	movs	r2, #68	; 0x44
    2efc:	210c      	movs	r1, #12
    2efe:	4805      	ldr	r0, [pc, #20]	; (2f14 <EVENT_SYSTEM_0_init+0x28>)
    2f00:	4b05      	ldr	r3, [pc, #20]	; (2f18 <EVENT_SYSTEM_0_init+0x2c>)
    2f02:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    2f04:	4805      	ldr	r0, [pc, #20]	; (2f1c <EVENT_SYSTEM_0_init+0x30>)
    2f06:	4b06      	ldr	r3, [pc, #24]	; (2f20 <EVENT_SYSTEM_0_init+0x34>)
    2f08:	4798      	blx	r3

	event_system_init();
    2f0a:	4b06      	ldr	r3, [pc, #24]	; (2f24 <EVENT_SYSTEM_0_init+0x38>)
    2f0c:	4798      	blx	r3
}
    2f0e:	bf00      	nop
    2f10:	bd80      	pop	{r7, pc}
    2f12:	bf00      	nop
    2f14:	40001c00 	.word	0x40001c00
    2f18:	00002455 	.word	0x00002455
    2f1c:	40000800 	.word	0x40000800
    2f20:	000025bb 	.word	0x000025bb
    2f24:	00003ee9 	.word	0x00003ee9

00002f28 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    2f2c:	2101      	movs	r1, #1
    2f2e:	202b      	movs	r0, #43	; 0x2b
    2f30:	4b2b      	ldr	r3, [pc, #172]	; (2fe0 <QSPI_N25Q256_PORT_init+0xb8>)
    2f32:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    2f34:	2100      	movs	r1, #0
    2f36:	202b      	movs	r0, #43	; 0x2b
    2f38:	4b2a      	ldr	r3, [pc, #168]	; (2fe4 <QSPI_N25Q256_PORT_init+0xbc>)
    2f3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    2f3c:	492a      	ldr	r1, [pc, #168]	; (2fe8 <QSPI_N25Q256_PORT_init+0xc0>)
    2f3e:	202b      	movs	r0, #43	; 0x2b
    2f40:	4b2a      	ldr	r3, [pc, #168]	; (2fec <QSPI_N25Q256_PORT_init+0xc4>)
    2f42:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2f44:	2102      	movs	r1, #2
    2f46:	2008      	movs	r0, #8
    2f48:	4b25      	ldr	r3, [pc, #148]	; (2fe0 <QSPI_N25Q256_PORT_init+0xb8>)
    2f4a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    2f4c:	2100      	movs	r1, #0
    2f4e:	2008      	movs	r0, #8
    2f50:	4b27      	ldr	r3, [pc, #156]	; (2ff0 <QSPI_N25Q256_PORT_init+0xc8>)
    2f52:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2f54:	2100      	movs	r1, #0
    2f56:	2008      	movs	r0, #8
    2f58:	4b22      	ldr	r3, [pc, #136]	; (2fe4 <QSPI_N25Q256_PORT_init+0xbc>)
    2f5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    2f5c:	4925      	ldr	r1, [pc, #148]	; (2ff4 <QSPI_N25Q256_PORT_init+0xcc>)
    2f5e:	2008      	movs	r0, #8
    2f60:	4b22      	ldr	r3, [pc, #136]	; (2fec <QSPI_N25Q256_PORT_init+0xc4>)
    2f62:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2f64:	2102      	movs	r1, #2
    2f66:	2009      	movs	r0, #9
    2f68:	4b1d      	ldr	r3, [pc, #116]	; (2fe0 <QSPI_N25Q256_PORT_init+0xb8>)
    2f6a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    2f6c:	2100      	movs	r1, #0
    2f6e:	2009      	movs	r0, #9
    2f70:	4b1f      	ldr	r3, [pc, #124]	; (2ff0 <QSPI_N25Q256_PORT_init+0xc8>)
    2f72:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    2f74:	2100      	movs	r1, #0
    2f76:	2009      	movs	r0, #9
    2f78:	4b1a      	ldr	r3, [pc, #104]	; (2fe4 <QSPI_N25Q256_PORT_init+0xbc>)
    2f7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    2f7c:	491e      	ldr	r1, [pc, #120]	; (2ff8 <QSPI_N25Q256_PORT_init+0xd0>)
    2f7e:	2009      	movs	r0, #9
    2f80:	4b1a      	ldr	r3, [pc, #104]	; (2fec <QSPI_N25Q256_PORT_init+0xc4>)
    2f82:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    2f84:	2102      	movs	r1, #2
    2f86:	200a      	movs	r0, #10
    2f88:	4b15      	ldr	r3, [pc, #84]	; (2fe0 <QSPI_N25Q256_PORT_init+0xb8>)
    2f8a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    2f8c:	2100      	movs	r1, #0
    2f8e:	200a      	movs	r0, #10
    2f90:	4b17      	ldr	r3, [pc, #92]	; (2ff0 <QSPI_N25Q256_PORT_init+0xc8>)
    2f92:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    2f94:	2100      	movs	r1, #0
    2f96:	200a      	movs	r0, #10
    2f98:	4b12      	ldr	r3, [pc, #72]	; (2fe4 <QSPI_N25Q256_PORT_init+0xbc>)
    2f9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    2f9c:	4917      	ldr	r1, [pc, #92]	; (2ffc <QSPI_N25Q256_PORT_init+0xd4>)
    2f9e:	200a      	movs	r0, #10
    2fa0:	4b12      	ldr	r3, [pc, #72]	; (2fec <QSPI_N25Q256_PORT_init+0xc4>)
    2fa2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    2fa4:	2102      	movs	r1, #2
    2fa6:	200b      	movs	r0, #11
    2fa8:	4b0d      	ldr	r3, [pc, #52]	; (2fe0 <QSPI_N25Q256_PORT_init+0xb8>)
    2faa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    2fac:	2100      	movs	r1, #0
    2fae:	200b      	movs	r0, #11
    2fb0:	4b0f      	ldr	r3, [pc, #60]	; (2ff0 <QSPI_N25Q256_PORT_init+0xc8>)
    2fb2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    2fb4:	2100      	movs	r1, #0
    2fb6:	200b      	movs	r0, #11
    2fb8:	4b0a      	ldr	r3, [pc, #40]	; (2fe4 <QSPI_N25Q256_PORT_init+0xbc>)
    2fba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    2fbc:	4910      	ldr	r1, [pc, #64]	; (3000 <QSPI_N25Q256_PORT_init+0xd8>)
    2fbe:	200b      	movs	r0, #11
    2fc0:	4b0a      	ldr	r3, [pc, #40]	; (2fec <QSPI_N25Q256_PORT_init+0xc4>)
    2fc2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    2fc4:	2101      	movs	r1, #1
    2fc6:	202a      	movs	r0, #42	; 0x2a
    2fc8:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <QSPI_N25Q256_PORT_init+0xb8>)
    2fca:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    2fcc:	2100      	movs	r1, #0
    2fce:	202a      	movs	r0, #42	; 0x2a
    2fd0:	4b04      	ldr	r3, [pc, #16]	; (2fe4 <QSPI_N25Q256_PORT_init+0xbc>)
    2fd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    2fd4:	490b      	ldr	r1, [pc, #44]	; (3004 <QSPI_N25Q256_PORT_init+0xdc>)
    2fd6:	202a      	movs	r0, #42	; 0x2a
    2fd8:	4b04      	ldr	r3, [pc, #16]	; (2fec <QSPI_N25Q256_PORT_init+0xc4>)
    2fda:	4798      	blx	r3
}
    2fdc:	bf00      	nop
    2fde:	bd80      	pop	{r7, pc}
    2fe0:	00002cc9 	.word	0x00002cc9
    2fe4:	00002c75 	.word	0x00002c75
    2fe8:	002b0007 	.word	0x002b0007
    2fec:	00002ca9 	.word	0x00002ca9
    2ff0:	00002d01 	.word	0x00002d01
    2ff4:	00080007 	.word	0x00080007
    2ff8:	00090007 	.word	0x00090007
    2ffc:	000a0007 	.word	0x000a0007
    3000:	000b0007 	.word	0x000b0007
    3004:	002a0007 	.word	0x002a0007

00003008 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3008:	b580      	push	{r7, lr}
    300a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    300c:	4805      	ldr	r0, [pc, #20]	; (3024 <QSPI_N25Q256_CLOCK_init+0x1c>)
    300e:	4b06      	ldr	r3, [pc, #24]	; (3028 <QSPI_N25Q256_CLOCK_init+0x20>)
    3010:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    3012:	4804      	ldr	r0, [pc, #16]	; (3024 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3014:	4b05      	ldr	r3, [pc, #20]	; (302c <QSPI_N25Q256_CLOCK_init+0x24>)
    3016:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3018:	4802      	ldr	r0, [pc, #8]	; (3024 <QSPI_N25Q256_CLOCK_init+0x1c>)
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <QSPI_N25Q256_CLOCK_init+0x28>)
    301c:	4798      	blx	r3
}
    301e:	bf00      	nop
    3020:	bd80      	pop	{r7, pc}
    3022:	bf00      	nop
    3024:	40000800 	.word	0x40000800
    3028:	0000249b 	.word	0x0000249b
    302c:	000024db 	.word	0x000024db
    3030:	000026bb 	.word	0x000026bb

00003034 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3034:	b580      	push	{r7, lr}
    3036:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <QSPI_N25Q256_init+0x18>)
    303a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    303c:	4904      	ldr	r1, [pc, #16]	; (3050 <QSPI_N25Q256_init+0x1c>)
    303e:	4805      	ldr	r0, [pc, #20]	; (3054 <QSPI_N25Q256_init+0x20>)
    3040:	4b05      	ldr	r3, [pc, #20]	; (3058 <QSPI_N25Q256_init+0x24>)
    3042:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3044:	4b05      	ldr	r3, [pc, #20]	; (305c <QSPI_N25Q256_init+0x28>)
    3046:	4798      	blx	r3
}
    3048:	bf00      	nop
    304a:	bd80      	pop	{r7, pc}
    304c:	00003009 	.word	0x00003009
    3050:	42003400 	.word	0x42003400
    3054:	2000a868 	.word	0x2000a868
    3058:	00004215 	.word	0x00004215
    305c:	00002f29 	.word	0x00002f29

00003060 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3060:	b580      	push	{r7, lr}
    3062:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3064:	4802      	ldr	r0, [pc, #8]	; (3070 <DATETIME_CLOCK_CLOCK_init+0x10>)
    3066:	4b03      	ldr	r3, [pc, #12]	; (3074 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3068:	4798      	blx	r3
}
    306a:	bf00      	nop
    306c:	bd80      	pop	{r7, pc}
    306e:	bf00      	nop
    3070:	40000800 	.word	0x40000800
    3074:	0000251b 	.word	0x0000251b

00003078 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3078:	b580      	push	{r7, lr}
    307a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    307c:	4b03      	ldr	r3, [pc, #12]	; (308c <DATETIME_CLOCK_init+0x14>)
    307e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3080:	4903      	ldr	r1, [pc, #12]	; (3090 <DATETIME_CLOCK_init+0x18>)
    3082:	4804      	ldr	r0, [pc, #16]	; (3094 <DATETIME_CLOCK_init+0x1c>)
    3084:	4b04      	ldr	r3, [pc, #16]	; (3098 <DATETIME_CLOCK_init+0x20>)
    3086:	4798      	blx	r3
}
    3088:	bf00      	nop
    308a:	bd80      	pop	{r7, pc}
    308c:	00003061 	.word	0x00003061
    3090:	40002400 	.word	0x40002400
    3094:	2000a9b0 	.word	0x2000a9b0
    3098:	00003c89 	.word	0x00003c89

0000309c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    309c:	b580      	push	{r7, lr}
    309e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    30a0:	2100      	movs	r1, #0
    30a2:	2011      	movs	r0, #17
    30a4:	4b07      	ldr	r3, [pc, #28]	; (30c4 <I2C_HEATERS_PORT_init+0x28>)
    30a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    30a8:	4907      	ldr	r1, [pc, #28]	; (30c8 <I2C_HEATERS_PORT_init+0x2c>)
    30aa:	2011      	movs	r0, #17
    30ac:	4b07      	ldr	r3, [pc, #28]	; (30cc <I2C_HEATERS_PORT_init+0x30>)
    30ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    30b0:	2100      	movs	r1, #0
    30b2:	2010      	movs	r0, #16
    30b4:	4b03      	ldr	r3, [pc, #12]	; (30c4 <I2C_HEATERS_PORT_init+0x28>)
    30b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    30b8:	4905      	ldr	r1, [pc, #20]	; (30d0 <I2C_HEATERS_PORT_init+0x34>)
    30ba:	2010      	movs	r0, #16
    30bc:	4b03      	ldr	r3, [pc, #12]	; (30cc <I2C_HEATERS_PORT_init+0x30>)
    30be:	4798      	blx	r3
}
    30c0:	bf00      	nop
    30c2:	bd80      	pop	{r7, pc}
    30c4:	00002c75 	.word	0x00002c75
    30c8:	00110003 	.word	0x00110003
    30cc:	00002ca9 	.word	0x00002ca9
    30d0:	00100003 	.word	0x00100003

000030d4 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    30d4:	b580      	push	{r7, lr}
    30d6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    30d8:	2240      	movs	r2, #64	; 0x40
    30da:	2118      	movs	r1, #24
    30dc:	4806      	ldr	r0, [pc, #24]	; (30f8 <I2C_HEATERS_CLOCK_init+0x24>)
    30de:	4b07      	ldr	r3, [pc, #28]	; (30fc <I2C_HEATERS_CLOCK_init+0x28>)
    30e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    30e2:	2243      	movs	r2, #67	; 0x43
    30e4:	2103      	movs	r1, #3
    30e6:	4804      	ldr	r0, [pc, #16]	; (30f8 <I2C_HEATERS_CLOCK_init+0x24>)
    30e8:	4b04      	ldr	r3, [pc, #16]	; (30fc <I2C_HEATERS_CLOCK_init+0x28>)
    30ea:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    30ec:	4804      	ldr	r0, [pc, #16]	; (3100 <I2C_HEATERS_CLOCK_init+0x2c>)
    30ee:	4b05      	ldr	r3, [pc, #20]	; (3104 <I2C_HEATERS_CLOCK_init+0x30>)
    30f0:	4798      	blx	r3
}
    30f2:	bf00      	nop
    30f4:	bd80      	pop	{r7, pc}
    30f6:	bf00      	nop
    30f8:	40001c00 	.word	0x40001c00
    30fc:	00002455 	.word	0x00002455
    3100:	40000800 	.word	0x40000800
    3104:	000025db 	.word	0x000025db

00003108 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    3108:	b580      	push	{r7, lr}
    310a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    310c:	4b04      	ldr	r3, [pc, #16]	; (3120 <I2C_HEATERS_init+0x18>)
    310e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    3110:	4904      	ldr	r1, [pc, #16]	; (3124 <I2C_HEATERS_init+0x1c>)
    3112:	4805      	ldr	r0, [pc, #20]	; (3128 <I2C_HEATERS_init+0x20>)
    3114:	4b05      	ldr	r3, [pc, #20]	; (312c <I2C_HEATERS_init+0x24>)
    3116:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    3118:	4b05      	ldr	r3, [pc, #20]	; (3130 <I2C_HEATERS_init+0x28>)
    311a:	4798      	blx	r3
}
    311c:	bf00      	nop
    311e:	bd80      	pop	{r7, pc}
    3120:	000030d5 	.word	0x000030d5
    3124:	41014000 	.word	0x41014000
    3128:	2000a908 	.word	0x2000a908
    312c:	0000406d 	.word	0x0000406d
    3130:	0000309d 	.word	0x0000309d

00003134 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3134:	b580      	push	{r7, lr}
    3136:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3138:	2100      	movs	r1, #0
    313a:	203b      	movs	r0, #59	; 0x3b
    313c:	4b11      	ldr	r3, [pc, #68]	; (3184 <SPI_TEMP_PORT_init+0x50>)
    313e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3140:	2102      	movs	r1, #2
    3142:	203b      	movs	r0, #59	; 0x3b
    3144:	4b10      	ldr	r3, [pc, #64]	; (3188 <SPI_TEMP_PORT_init+0x54>)
    3146:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3148:	4910      	ldr	r1, [pc, #64]	; (318c <SPI_TEMP_PORT_init+0x58>)
    314a:	203b      	movs	r0, #59	; 0x3b
    314c:	4b10      	ldr	r3, [pc, #64]	; (3190 <SPI_TEMP_PORT_init+0x5c>)
    314e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    3150:	2100      	movs	r1, #0
    3152:	203a      	movs	r0, #58	; 0x3a
    3154:	4b0b      	ldr	r3, [pc, #44]	; (3184 <SPI_TEMP_PORT_init+0x50>)
    3156:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3158:	2102      	movs	r1, #2
    315a:	203a      	movs	r0, #58	; 0x3a
    315c:	4b0a      	ldr	r3, [pc, #40]	; (3188 <SPI_TEMP_PORT_init+0x54>)
    315e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    3160:	490c      	ldr	r1, [pc, #48]	; (3194 <SPI_TEMP_PORT_init+0x60>)
    3162:	203a      	movs	r0, #58	; 0x3a
    3164:	4b0a      	ldr	r3, [pc, #40]	; (3190 <SPI_TEMP_PORT_init+0x5c>)
    3166:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3168:	2101      	movs	r1, #1
    316a:	203c      	movs	r0, #60	; 0x3c
    316c:	4b06      	ldr	r3, [pc, #24]	; (3188 <SPI_TEMP_PORT_init+0x54>)
    316e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    3170:	2100      	movs	r1, #0
    3172:	203c      	movs	r0, #60	; 0x3c
    3174:	4b08      	ldr	r3, [pc, #32]	; (3198 <SPI_TEMP_PORT_init+0x64>)
    3176:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    3178:	4908      	ldr	r1, [pc, #32]	; (319c <SPI_TEMP_PORT_init+0x68>)
    317a:	203c      	movs	r0, #60	; 0x3c
    317c:	4b04      	ldr	r3, [pc, #16]	; (3190 <SPI_TEMP_PORT_init+0x5c>)
    317e:	4798      	blx	r3
}
    3180:	bf00      	nop
    3182:	bd80      	pop	{r7, pc}
    3184:	00002d01 	.word	0x00002d01
    3188:	00002cc9 	.word	0x00002cc9
    318c:	003b0003 	.word	0x003b0003
    3190:	00002ca9 	.word	0x00002ca9
    3194:	003a0003 	.word	0x003a0003
    3198:	00002c75 	.word	0x00002c75
    319c:	003c0003 	.word	0x003c0003

000031a0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    31a0:	b580      	push	{r7, lr}
    31a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    31a4:	2245      	movs	r2, #69	; 0x45
    31a6:	2122      	movs	r1, #34	; 0x22
    31a8:	4806      	ldr	r0, [pc, #24]	; (31c4 <SPI_TEMP_CLOCK_init+0x24>)
    31aa:	4b07      	ldr	r3, [pc, #28]	; (31c8 <SPI_TEMP_CLOCK_init+0x28>)
    31ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    31ae:	224a      	movs	r2, #74	; 0x4a
    31b0:	2103      	movs	r1, #3
    31b2:	4804      	ldr	r0, [pc, #16]	; (31c4 <SPI_TEMP_CLOCK_init+0x24>)
    31b4:	4b04      	ldr	r3, [pc, #16]	; (31c8 <SPI_TEMP_CLOCK_init+0x28>)
    31b6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    31b8:	4804      	ldr	r0, [pc, #16]	; (31cc <SPI_TEMP_CLOCK_init+0x2c>)
    31ba:	4b05      	ldr	r3, [pc, #20]	; (31d0 <SPI_TEMP_CLOCK_init+0x30>)
    31bc:	4798      	blx	r3
}
    31be:	bf00      	nop
    31c0:	bd80      	pop	{r7, pc}
    31c2:	bf00      	nop
    31c4:	40001c00 	.word	0x40001c00
    31c8:	00002455 	.word	0x00002455
    31cc:	40000800 	.word	0x40000800
    31d0:	000026db 	.word	0x000026db

000031d4 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    31d8:	4b05      	ldr	r3, [pc, #20]	; (31f0 <SPI_TEMP_init+0x1c>)
    31da:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    31dc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    31e0:	4804      	ldr	r0, [pc, #16]	; (31f4 <SPI_TEMP_init+0x20>)
    31e2:	4b05      	ldr	r3, [pc, #20]	; (31f8 <SPI_TEMP_init+0x24>)
    31e4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    31e6:	4b05      	ldr	r3, [pc, #20]	; (31fc <SPI_TEMP_init+0x28>)
    31e8:	4798      	blx	r3
}
    31ea:	bf00      	nop
    31ec:	bd80      	pop	{r7, pc}
    31ee:	bf00      	nop
    31f0:	000031a1 	.word	0x000031a1
    31f4:	2000a810 	.word	0x2000a810
    31f8:	00004325 	.word	0x00004325
    31fc:	00003135 	.word	0x00003135

00003200 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    3200:	b580      	push	{r7, lr}
    3202:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    3204:	2100      	movs	r1, #0
    3206:	2017      	movs	r0, #23
    3208:	4b07      	ldr	r3, [pc, #28]	; (3228 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    320a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    320c:	4907      	ldr	r1, [pc, #28]	; (322c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    320e:	2017      	movs	r0, #23
    3210:	4b07      	ldr	r3, [pc, #28]	; (3230 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    3212:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3214:	2100      	movs	r1, #0
    3216:	2016      	movs	r0, #22
    3218:	4b03      	ldr	r3, [pc, #12]	; (3228 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    321a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    321c:	4905      	ldr	r1, [pc, #20]	; (3234 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    321e:	2016      	movs	r0, #22
    3220:	4b03      	ldr	r3, [pc, #12]	; (3230 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    3222:	4798      	blx	r3
}
    3224:	bf00      	nop
    3226:	bd80      	pop	{r7, pc}
    3228:	00002c75 	.word	0x00002c75
    322c:	00170003 	.word	0x00170003
    3230:	00002ca9 	.word	0x00002ca9
    3234:	00160003 	.word	0x00160003

00003238 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    3238:	b580      	push	{r7, lr}
    323a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    323c:	2244      	movs	r2, #68	; 0x44
    323e:	2123      	movs	r1, #35	; 0x23
    3240:	4806      	ldr	r0, [pc, #24]	; (325c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    3242:	4b07      	ldr	r3, [pc, #28]	; (3260 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    3244:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3246:	224a      	movs	r2, #74	; 0x4a
    3248:	2103      	movs	r1, #3
    324a:	4804      	ldr	r0, [pc, #16]	; (325c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    324c:	4b04      	ldr	r3, [pc, #16]	; (3260 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    324e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    3250:	4804      	ldr	r0, [pc, #16]	; (3264 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    3252:	4b05      	ldr	r3, [pc, #20]	; (3268 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    3254:	4798      	blx	r3
}
    3256:	bf00      	nop
    3258:	bd80      	pop	{r7, pc}
    325a:	bf00      	nop
    325c:	40001c00 	.word	0x40001c00
    3260:	00002455 	.word	0x00002455
    3264:	40000800 	.word	0x40000800
    3268:	000026fb 	.word	0x000026fb

0000326c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    326c:	b580      	push	{r7, lr}
    326e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    3270:	4b04      	ldr	r3, [pc, #16]	; (3284 <I2C_FLAPPER_VALVE_init+0x18>)
    3272:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    3274:	4904      	ldr	r1, [pc, #16]	; (3288 <I2C_FLAPPER_VALVE_init+0x1c>)
    3276:	4805      	ldr	r0, [pc, #20]	; (328c <I2C_FLAPPER_VALVE_init+0x20>)
    3278:	4b05      	ldr	r3, [pc, #20]	; (3290 <I2C_FLAPPER_VALVE_init+0x24>)
    327a:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    327c:	4b05      	ldr	r3, [pc, #20]	; (3294 <I2C_FLAPPER_VALVE_init+0x28>)
    327e:	4798      	blx	r3
}
    3280:	bf00      	nop
    3282:	bd80      	pop	{r7, pc}
    3284:	00003239 	.word	0x00003239
    3288:	43000400 	.word	0x43000400
    328c:	2000a8ac 	.word	0x2000a8ac
    3290:	0000406d 	.word	0x0000406d
    3294:	00003201 	.word	0x00003201

00003298 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    3298:	b580      	push	{r7, lr}
    329a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    329c:	2100      	movs	r1, #0
    329e:	2044      	movs	r0, #68	; 0x44
    32a0:	4b11      	ldr	r3, [pc, #68]	; (32e8 <SPI_HI3593_PORT_init+0x50>)
    32a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    32a4:	2102      	movs	r1, #2
    32a6:	2044      	movs	r0, #68	; 0x44
    32a8:	4b10      	ldr	r3, [pc, #64]	; (32ec <SPI_HI3593_PORT_init+0x54>)
    32aa:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    32ac:	4910      	ldr	r1, [pc, #64]	; (32f0 <SPI_HI3593_PORT_init+0x58>)
    32ae:	2044      	movs	r0, #68	; 0x44
    32b0:	4b10      	ldr	r3, [pc, #64]	; (32f4 <SPI_HI3593_PORT_init+0x5c>)
    32b2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    32b4:	2100      	movs	r1, #0
    32b6:	2045      	movs	r0, #69	; 0x45
    32b8:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <SPI_HI3593_PORT_init+0x50>)
    32ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    32bc:	2102      	movs	r1, #2
    32be:	2045      	movs	r0, #69	; 0x45
    32c0:	4b0a      	ldr	r3, [pc, #40]	; (32ec <SPI_HI3593_PORT_init+0x54>)
    32c2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    32c4:	490c      	ldr	r1, [pc, #48]	; (32f8 <SPI_HI3593_PORT_init+0x60>)
    32c6:	2045      	movs	r0, #69	; 0x45
    32c8:	4b0a      	ldr	r3, [pc, #40]	; (32f4 <SPI_HI3593_PORT_init+0x5c>)
    32ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    32cc:	2101      	movs	r1, #1
    32ce:	2047      	movs	r0, #71	; 0x47
    32d0:	4b06      	ldr	r3, [pc, #24]	; (32ec <SPI_HI3593_PORT_init+0x54>)
    32d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    32d4:	2100      	movs	r1, #0
    32d6:	2047      	movs	r0, #71	; 0x47
    32d8:	4b08      	ldr	r3, [pc, #32]	; (32fc <SPI_HI3593_PORT_init+0x64>)
    32da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    32dc:	4908      	ldr	r1, [pc, #32]	; (3300 <SPI_HI3593_PORT_init+0x68>)
    32de:	2047      	movs	r0, #71	; 0x47
    32e0:	4b04      	ldr	r3, [pc, #16]	; (32f4 <SPI_HI3593_PORT_init+0x5c>)
    32e2:	4798      	blx	r3
}
    32e4:	bf00      	nop
    32e6:	bd80      	pop	{r7, pc}
    32e8:	00002d01 	.word	0x00002d01
    32ec:	00002cc9 	.word	0x00002cc9
    32f0:	00440002 	.word	0x00440002
    32f4:	00002ca9 	.word	0x00002ca9
    32f8:	00450002 	.word	0x00450002
    32fc:	00002c75 	.word	0x00002c75
    3300:	00470002 	.word	0x00470002

00003304 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    3304:	b580      	push	{r7, lr}
    3306:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3308:	2242      	movs	r2, #66	; 0x42
    330a:	2124      	movs	r1, #36	; 0x24
    330c:	4806      	ldr	r0, [pc, #24]	; (3328 <SPI_HI3593_CLOCK_init+0x24>)
    330e:	4b07      	ldr	r3, [pc, #28]	; (332c <SPI_HI3593_CLOCK_init+0x28>)
    3310:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3312:	224a      	movs	r2, #74	; 0x4a
    3314:	2103      	movs	r1, #3
    3316:	4804      	ldr	r0, [pc, #16]	; (3328 <SPI_HI3593_CLOCK_init+0x24>)
    3318:	4b04      	ldr	r3, [pc, #16]	; (332c <SPI_HI3593_CLOCK_init+0x28>)
    331a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    331c:	4804      	ldr	r0, [pc, #16]	; (3330 <SPI_HI3593_CLOCK_init+0x2c>)
    331e:	4b05      	ldr	r3, [pc, #20]	; (3334 <SPI_HI3593_CLOCK_init+0x30>)
    3320:	4798      	blx	r3
}
    3322:	bf00      	nop
    3324:	bd80      	pop	{r7, pc}
    3326:	bf00      	nop
    3328:	40001c00 	.word	0x40001c00
    332c:	00002455 	.word	0x00002455
    3330:	40000800 	.word	0x40000800
    3334:	0000271b 	.word	0x0000271b

00003338 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3338:	b580      	push	{r7, lr}
    333a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    333c:	4b04      	ldr	r3, [pc, #16]	; (3350 <SPI_HI3593_init+0x18>)
    333e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    3340:	4904      	ldr	r1, [pc, #16]	; (3354 <SPI_HI3593_init+0x1c>)
    3342:	4805      	ldr	r0, [pc, #20]	; (3358 <SPI_HI3593_init+0x20>)
    3344:	4b05      	ldr	r3, [pc, #20]	; (335c <SPI_HI3593_init+0x24>)
    3346:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3348:	4b05      	ldr	r3, [pc, #20]	; (3360 <SPI_HI3593_init+0x28>)
    334a:	4798      	blx	r3
}
    334c:	bf00      	nop
    334e:	bd80      	pop	{r7, pc}
    3350:	00003305 	.word	0x00003305
    3354:	43000800 	.word	0x43000800
    3358:	2000a7f8 	.word	0x2000a7f8
    335c:	00004325 	.word	0x00004325
    3360:	00003299 	.word	0x00003299

00003364 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3368:	2100      	movs	r1, #0
    336a:	2068      	movs	r0, #104	; 0x68
    336c:	4b07      	ldr	r3, [pc, #28]	; (338c <I2C_FANS_PORT_init+0x28>)
    336e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    3370:	4907      	ldr	r1, [pc, #28]	; (3390 <I2C_FANS_PORT_init+0x2c>)
    3372:	2068      	movs	r0, #104	; 0x68
    3374:	4b07      	ldr	r3, [pc, #28]	; (3394 <I2C_FANS_PORT_init+0x30>)
    3376:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3378:	2100      	movs	r1, #0
    337a:	2069      	movs	r0, #105	; 0x69
    337c:	4b03      	ldr	r3, [pc, #12]	; (338c <I2C_FANS_PORT_init+0x28>)
    337e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3380:	4905      	ldr	r1, [pc, #20]	; (3398 <I2C_FANS_PORT_init+0x34>)
    3382:	2069      	movs	r0, #105	; 0x69
    3384:	4b03      	ldr	r3, [pc, #12]	; (3394 <I2C_FANS_PORT_init+0x30>)
    3386:	4798      	blx	r3
}
    3388:	bf00      	nop
    338a:	bd80      	pop	{r7, pc}
    338c:	00002c75 	.word	0x00002c75
    3390:	00680002 	.word	0x00680002
    3394:	00002ca9 	.word	0x00002ca9
    3398:	00690002 	.word	0x00690002

0000339c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33a0:	2244      	movs	r2, #68	; 0x44
    33a2:	2125      	movs	r1, #37	; 0x25
    33a4:	4806      	ldr	r0, [pc, #24]	; (33c0 <I2C_FANS_CLOCK_init+0x24>)
    33a6:	4b07      	ldr	r3, [pc, #28]	; (33c4 <I2C_FANS_CLOCK_init+0x28>)
    33a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33aa:	224a      	movs	r2, #74	; 0x4a
    33ac:	2103      	movs	r1, #3
    33ae:	4804      	ldr	r0, [pc, #16]	; (33c0 <I2C_FANS_CLOCK_init+0x24>)
    33b0:	4b04      	ldr	r3, [pc, #16]	; (33c4 <I2C_FANS_CLOCK_init+0x28>)
    33b2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    33b4:	4804      	ldr	r0, [pc, #16]	; (33c8 <I2C_FANS_CLOCK_init+0x2c>)
    33b6:	4b05      	ldr	r3, [pc, #20]	; (33cc <I2C_FANS_CLOCK_init+0x30>)
    33b8:	4798      	blx	r3
}
    33ba:	bf00      	nop
    33bc:	bd80      	pop	{r7, pc}
    33be:	bf00      	nop
    33c0:	40001c00 	.word	0x40001c00
    33c4:	00002455 	.word	0x00002455
    33c8:	40000800 	.word	0x40000800
    33cc:	0000273b 	.word	0x0000273b

000033d0 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    33d0:	b580      	push	{r7, lr}
    33d2:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    33d4:	4b04      	ldr	r3, [pc, #16]	; (33e8 <I2C_FANS_init+0x18>)
    33d6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    33d8:	4904      	ldr	r1, [pc, #16]	; (33ec <I2C_FANS_init+0x1c>)
    33da:	4805      	ldr	r0, [pc, #20]	; (33f0 <I2C_FANS_init+0x20>)
    33dc:	4b05      	ldr	r3, [pc, #20]	; (33f4 <I2C_FANS_init+0x24>)
    33de:	4798      	blx	r3
	I2C_FANS_PORT_init();
    33e0:	4b05      	ldr	r3, [pc, #20]	; (33f8 <I2C_FANS_init+0x28>)
    33e2:	4798      	blx	r3
}
    33e4:	bf00      	nop
    33e6:	bd80      	pop	{r7, pc}
    33e8:	0000339d 	.word	0x0000339d
    33ec:	43000c00 	.word	0x43000c00
    33f0:	2000a828 	.word	0x2000a828
    33f4:	0000406d 	.word	0x0000406d
    33f8:	00003365 	.word	0x00003365

000033fc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    33fc:	b580      	push	{r7, lr}
    33fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3400:	4808      	ldr	r0, [pc, #32]	; (3424 <TIMER_USB_init+0x28>)
    3402:	4b09      	ldr	r3, [pc, #36]	; (3428 <TIMER_USB_init+0x2c>)
    3404:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3406:	2243      	movs	r2, #67	; 0x43
    3408:	2109      	movs	r1, #9
    340a:	4808      	ldr	r0, [pc, #32]	; (342c <TIMER_USB_init+0x30>)
    340c:	4b08      	ldr	r3, [pc, #32]	; (3430 <TIMER_USB_init+0x34>)
    340e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    3410:	4b08      	ldr	r3, [pc, #32]	; (3434 <TIMER_USB_init+0x38>)
    3412:	4798      	blx	r3
    3414:	4603      	mov	r3, r0
    3416:	461a      	mov	r2, r3
    3418:	4907      	ldr	r1, [pc, #28]	; (3438 <TIMER_USB_init+0x3c>)
    341a:	4808      	ldr	r0, [pc, #32]	; (343c <TIMER_USB_init+0x40>)
    341c:	4b08      	ldr	r3, [pc, #32]	; (3440 <TIMER_USB_init+0x44>)
    341e:	4798      	blx	r3
}
    3420:	bf00      	nop
    3422:	bd80      	pop	{r7, pc}
    3424:	40000800 	.word	0x40000800
    3428:	0000255b 	.word	0x0000255b
    342c:	40001c00 	.word	0x40001c00
    3430:	00002455 	.word	0x00002455
    3434:	00009bd9 	.word	0x00009bd9
    3438:	40003800 	.word	0x40003800
    343c:	2000a970 	.word	0x2000a970
    3440:	000044f5 	.word	0x000044f5

00003444 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3444:	b580      	push	{r7, lr}
    3446:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3448:	4808      	ldr	r0, [pc, #32]	; (346c <TIMER_ARINC_init+0x28>)
    344a:	4b09      	ldr	r3, [pc, #36]	; (3470 <TIMER_ARINC_init+0x2c>)
    344c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    344e:	2244      	movs	r2, #68	; 0x44
    3450:	211a      	movs	r1, #26
    3452:	4808      	ldr	r0, [pc, #32]	; (3474 <TIMER_ARINC_init+0x30>)
    3454:	4b08      	ldr	r3, [pc, #32]	; (3478 <TIMER_ARINC_init+0x34>)
    3456:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3458:	4b08      	ldr	r3, [pc, #32]	; (347c <TIMER_ARINC_init+0x38>)
    345a:	4798      	blx	r3
    345c:	4603      	mov	r3, r0
    345e:	461a      	mov	r2, r3
    3460:	4907      	ldr	r1, [pc, #28]	; (3480 <TIMER_ARINC_init+0x3c>)
    3462:	4808      	ldr	r0, [pc, #32]	; (3484 <TIMER_ARINC_init+0x40>)
    3464:	4b08      	ldr	r3, [pc, #32]	; (3488 <TIMER_ARINC_init+0x44>)
    3466:	4798      	blx	r3
}
    3468:	bf00      	nop
    346a:	bd80      	pop	{r7, pc}
    346c:	40000800 	.word	0x40000800
    3470:	0000263b 	.word	0x0000263b
    3474:	40001c00 	.word	0x40001c00
    3478:	00002455 	.word	0x00002455
    347c:	00009bd9 	.word	0x00009bd9
    3480:	4101a000 	.word	0x4101a000
    3484:	2000a950 	.word	0x2000a950
    3488:	000044f5 	.word	0x000044f5

0000348c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    348c:	b580      	push	{r7, lr}
    348e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    3490:	4808      	ldr	r0, [pc, #32]	; (34b4 <TIMER_MAINTENANCE_init+0x28>)
    3492:	4b09      	ldr	r3, [pc, #36]	; (34b8 <TIMER_MAINTENANCE_init+0x2c>)
    3494:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3496:	2246      	movs	r2, #70	; 0x46
    3498:	211e      	movs	r1, #30
    349a:	4808      	ldr	r0, [pc, #32]	; (34bc <TIMER_MAINTENANCE_init+0x30>)
    349c:	4b08      	ldr	r3, [pc, #32]	; (34c0 <TIMER_MAINTENANCE_init+0x34>)
    349e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    34a0:	4b08      	ldr	r3, [pc, #32]	; (34c4 <TIMER_MAINTENANCE_init+0x38>)
    34a2:	4798      	blx	r3
    34a4:	4603      	mov	r3, r0
    34a6:	461a      	mov	r2, r3
    34a8:	4907      	ldr	r1, [pc, #28]	; (34c8 <TIMER_MAINTENANCE_init+0x3c>)
    34aa:	4808      	ldr	r0, [pc, #32]	; (34cc <TIMER_MAINTENANCE_init+0x40>)
    34ac:	4b08      	ldr	r3, [pc, #32]	; (34d0 <TIMER_MAINTENANCE_init+0x44>)
    34ae:	4798      	blx	r3
}
    34b0:	bf00      	nop
    34b2:	bd80      	pop	{r7, pc}
    34b4:	40000800 	.word	0x40000800
    34b8:	0000267b 	.word	0x0000267b
    34bc:	40001c00 	.word	0x40001c00
    34c0:	00002455 	.word	0x00002455
    34c4:	00009bd9 	.word	0x00009bd9
    34c8:	42001400 	.word	0x42001400
    34cc:	2000a848 	.word	0x2000a848
    34d0:	000044f5 	.word	0x000044f5

000034d4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    34d4:	b580      	push	{r7, lr}
    34d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    34d8:	4808      	ldr	r0, [pc, #32]	; (34fc <TIMER_INTERFACE_init+0x28>)
    34da:	4b09      	ldr	r3, [pc, #36]	; (3500 <TIMER_INTERFACE_init+0x2c>)
    34dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    34de:	2246      	movs	r2, #70	; 0x46
    34e0:	211e      	movs	r1, #30
    34e2:	4808      	ldr	r0, [pc, #32]	; (3504 <TIMER_INTERFACE_init+0x30>)
    34e4:	4b08      	ldr	r3, [pc, #32]	; (3508 <TIMER_INTERFACE_init+0x34>)
    34e6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    34e8:	4b08      	ldr	r3, [pc, #32]	; (350c <TIMER_INTERFACE_init+0x38>)
    34ea:	4798      	blx	r3
    34ec:	4603      	mov	r3, r0
    34ee:	461a      	mov	r2, r3
    34f0:	4907      	ldr	r1, [pc, #28]	; (3510 <TIMER_INTERFACE_init+0x3c>)
    34f2:	4808      	ldr	r0, [pc, #32]	; (3514 <TIMER_INTERFACE_init+0x40>)
    34f4:	4b08      	ldr	r3, [pc, #32]	; (3518 <TIMER_INTERFACE_init+0x44>)
    34f6:	4798      	blx	r3
}
    34f8:	bf00      	nop
    34fa:	bd80      	pop	{r7, pc}
    34fc:	40000800 	.word	0x40000800
    3500:	0000269b 	.word	0x0000269b
    3504:	40001c00 	.word	0x40001c00
    3508:	00002455 	.word	0x00002455
    350c:	00009bd9 	.word	0x00009bd9
    3510:	42001800 	.word	0x42001800
    3514:	2000a88c 	.word	0x2000a88c
    3518:	000044f5 	.word	0x000044f5

0000351c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    351c:	b580      	push	{r7, lr}
    351e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    3520:	4808      	ldr	r0, [pc, #32]	; (3544 <TIMER_EVENT_init+0x28>)
    3522:	4b09      	ldr	r3, [pc, #36]	; (3548 <TIMER_EVENT_init+0x2c>)
    3524:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3526:	2246      	movs	r2, #70	; 0x46
    3528:	2127      	movs	r1, #39	; 0x27
    352a:	4808      	ldr	r0, [pc, #32]	; (354c <TIMER_EVENT_init+0x30>)
    352c:	4b08      	ldr	r3, [pc, #32]	; (3550 <TIMER_EVENT_init+0x34>)
    352e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    3530:	4b08      	ldr	r3, [pc, #32]	; (3554 <TIMER_EVENT_init+0x38>)
    3532:	4798      	blx	r3
    3534:	4603      	mov	r3, r0
    3536:	461a      	mov	r2, r3
    3538:	4907      	ldr	r1, [pc, #28]	; (3558 <TIMER_EVENT_init+0x3c>)
    353a:	4808      	ldr	r0, [pc, #32]	; (355c <TIMER_EVENT_init+0x40>)
    353c:	4b08      	ldr	r3, [pc, #32]	; (3560 <TIMER_EVENT_init+0x44>)
    353e:	4798      	blx	r3
}
    3540:	bf00      	nop
    3542:	bd80      	pop	{r7, pc}
    3544:	40000800 	.word	0x40000800
    3548:	0000275b 	.word	0x0000275b
    354c:	40001c00 	.word	0x40001c00
    3550:	00002455 	.word	0x00002455
    3554:	00009bd9 	.word	0x00009bd9
    3558:	43001400 	.word	0x43001400
    355c:	2000a86c 	.word	0x2000a86c
    3560:	000044f5 	.word	0x000044f5

00003564 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3564:	b480      	push	{r7}
    3566:	af00      	add	r7, sp, #0
}
    3568:	bf00      	nop
    356a:	46bd      	mov	sp, r7
    356c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3570:	4770      	bx	lr
	...

00003574 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3574:	b580      	push	{r7, lr}
    3576:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3578:	4804      	ldr	r0, [pc, #16]	; (358c <LIVE_PULSE_CLOCK_init+0x18>)
    357a:	4b05      	ldr	r3, [pc, #20]	; (3590 <LIVE_PULSE_CLOCK_init+0x1c>)
    357c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    357e:	2240      	movs	r2, #64	; 0x40
    3580:	2127      	movs	r1, #39	; 0x27
    3582:	4804      	ldr	r0, [pc, #16]	; (3594 <LIVE_PULSE_CLOCK_init+0x20>)
    3584:	4b04      	ldr	r3, [pc, #16]	; (3598 <LIVE_PULSE_CLOCK_init+0x24>)
    3586:	4798      	blx	r3
}
    3588:	bf00      	nop
    358a:	bd80      	pop	{r7, pc}
    358c:	40000800 	.word	0x40000800
    3590:	0000277b 	.word	0x0000277b
    3594:	40001c00 	.word	0x40001c00
    3598:	00002455 	.word	0x00002455

0000359c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    359c:	b580      	push	{r7, lr}
    359e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    35a0:	4b06      	ldr	r3, [pc, #24]	; (35bc <LIVE_PULSE_init+0x20>)
    35a2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    35a4:	4b06      	ldr	r3, [pc, #24]	; (35c0 <LIVE_PULSE_init+0x24>)
    35a6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    35a8:	4b06      	ldr	r3, [pc, #24]	; (35c4 <LIVE_PULSE_init+0x28>)
    35aa:	4798      	blx	r3
    35ac:	4603      	mov	r3, r0
    35ae:	461a      	mov	r2, r3
    35b0:	4905      	ldr	r1, [pc, #20]	; (35c8 <LIVE_PULSE_init+0x2c>)
    35b2:	4806      	ldr	r0, [pc, #24]	; (35cc <LIVE_PULSE_init+0x30>)
    35b4:	4b06      	ldr	r3, [pc, #24]	; (35d0 <LIVE_PULSE_init+0x34>)
    35b6:	4798      	blx	r3
}
    35b8:	bf00      	nop
    35ba:	bd80      	pop	{r7, pc}
    35bc:	00003575 	.word	0x00003575
    35c0:	00003565 	.word	0x00003565
    35c4:	00009bed 	.word	0x00009bed
    35c8:	43001800 	.word	0x43001800
    35cc:	2000a8cc 	.word	0x2000a8cc
    35d0:	00004169 	.word	0x00004169

000035d4 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    35d8:	4804      	ldr	r0, [pc, #16]	; (35ec <TIMER_HVAC_CLOCK_init+0x18>)
    35da:	4b05      	ldr	r3, [pc, #20]	; (35f0 <TIMER_HVAC_CLOCK_init+0x1c>)
    35dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    35de:	2244      	movs	r2, #68	; 0x44
    35e0:	2119      	movs	r1, #25
    35e2:	4804      	ldr	r0, [pc, #16]	; (35f4 <TIMER_HVAC_CLOCK_init+0x20>)
    35e4:	4b04      	ldr	r3, [pc, #16]	; (35f8 <TIMER_HVAC_CLOCK_init+0x24>)
    35e6:	4798      	blx	r3
}
    35e8:	bf00      	nop
    35ea:	bd80      	pop	{r7, pc}
    35ec:	40000800 	.word	0x40000800
    35f0:	000025fb 	.word	0x000025fb
    35f4:	40001c00 	.word	0x40001c00
    35f8:	00002455 	.word	0x00002455

000035fc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    35fc:	b580      	push	{r7, lr}
    35fe:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    3600:	4b05      	ldr	r3, [pc, #20]	; (3618 <TIMER_HVAC_init+0x1c>)
    3602:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    3604:	4b05      	ldr	r3, [pc, #20]	; (361c <TIMER_HVAC_init+0x20>)
    3606:	4798      	blx	r3
    3608:	4603      	mov	r3, r0
    360a:	461a      	mov	r2, r3
    360c:	4904      	ldr	r1, [pc, #16]	; (3620 <TIMER_HVAC_init+0x24>)
    360e:	4805      	ldr	r0, [pc, #20]	; (3624 <TIMER_HVAC_init+0x28>)
    3610:	4b05      	ldr	r3, [pc, #20]	; (3628 <TIMER_HVAC_init+0x2c>)
    3612:	4798      	blx	r3
}
    3614:	bf00      	nop
    3616:	bd80      	pop	{r7, pc}
    3618:	000035d5 	.word	0x000035d5
    361c:	00008fbd 	.word	0x00008fbd
    3620:	41016000 	.word	0x41016000
    3624:	2000a990 	.word	0x2000a990
    3628:	000044f5 	.word	0x000044f5

0000362c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    362c:	b580      	push	{r7, lr}
    362e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    3630:	4804      	ldr	r0, [pc, #16]	; (3644 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    3632:	4b05      	ldr	r3, [pc, #20]	; (3648 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    3634:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3636:	2244      	movs	r2, #68	; 0x44
    3638:	2119      	movs	r1, #25
    363a:	4804      	ldr	r0, [pc, #16]	; (364c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    363c:	4b04      	ldr	r3, [pc, #16]	; (3650 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    363e:	4798      	blx	r3
}
    3640:	bf00      	nop
    3642:	bd80      	pop	{r7, pc}
    3644:	40000800 	.word	0x40000800
    3648:	0000261b 	.word	0x0000261b
    364c:	40001c00 	.word	0x40001c00
    3650:	00002455 	.word	0x00002455

00003654 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    3654:	b580      	push	{r7, lr}
    3656:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    3658:	4b05      	ldr	r3, [pc, #20]	; (3670 <TIMER_TEMPERATURES_init+0x1c>)
    365a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    365c:	4b05      	ldr	r3, [pc, #20]	; (3674 <TIMER_TEMPERATURES_init+0x20>)
    365e:	4798      	blx	r3
    3660:	4603      	mov	r3, r0
    3662:	461a      	mov	r2, r3
    3664:	4904      	ldr	r1, [pc, #16]	; (3678 <TIMER_TEMPERATURES_init+0x24>)
    3666:	4805      	ldr	r0, [pc, #20]	; (367c <TIMER_TEMPERATURES_init+0x28>)
    3668:	4b05      	ldr	r3, [pc, #20]	; (3680 <TIMER_TEMPERATURES_init+0x2c>)
    366a:	4798      	blx	r3
}
    366c:	bf00      	nop
    366e:	bd80      	pop	{r7, pc}
    3670:	0000362d 	.word	0x0000362d
    3674:	00008fbd 	.word	0x00008fbd
    3678:	41018000 	.word	0x41018000
    367c:	2000a7d8 	.word	0x2000a7d8
    3680:	000044f5 	.word	0x000044f5

00003684 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    3684:	b580      	push	{r7, lr}
    3686:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    3688:	4804      	ldr	r0, [pc, #16]	; (369c <TIMER_CCU_CLOCK_init+0x18>)
    368a:	4b05      	ldr	r3, [pc, #20]	; (36a0 <TIMER_CCU_CLOCK_init+0x1c>)
    368c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    368e:	2240      	movs	r2, #64	; 0x40
    3690:	211d      	movs	r1, #29
    3692:	4804      	ldr	r0, [pc, #16]	; (36a4 <TIMER_CCU_CLOCK_init+0x20>)
    3694:	4b04      	ldr	r3, [pc, #16]	; (36a8 <TIMER_CCU_CLOCK_init+0x24>)
    3696:	4798      	blx	r3
}
    3698:	bf00      	nop
    369a:	bd80      	pop	{r7, pc}
    369c:	40000800 	.word	0x40000800
    36a0:	0000265b 	.word	0x0000265b
    36a4:	40001c00 	.word	0x40001c00
    36a8:	00002455 	.word	0x00002455

000036ac <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    36b0:	4b05      	ldr	r3, [pc, #20]	; (36c8 <TIMER_CCU_init+0x1c>)
    36b2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    36b4:	4b05      	ldr	r3, [pc, #20]	; (36cc <TIMER_CCU_init+0x20>)
    36b6:	4798      	blx	r3
    36b8:	4603      	mov	r3, r0
    36ba:	461a      	mov	r2, r3
    36bc:	4904      	ldr	r1, [pc, #16]	; (36d0 <TIMER_CCU_init+0x24>)
    36be:	4805      	ldr	r0, [pc, #20]	; (36d4 <TIMER_CCU_init+0x28>)
    36c0:	4b05      	ldr	r3, [pc, #20]	; (36d8 <TIMER_CCU_init+0x2c>)
    36c2:	4798      	blx	r3
}
    36c4:	bf00      	nop
    36c6:	bd80      	pop	{r7, pc}
    36c8:	00003685 	.word	0x00003685
    36cc:	00008fbd 	.word	0x00008fbd
    36d0:	42000c00 	.word	0x42000c00
    36d4:	2000a8e8 	.word	0x2000a8e8
    36d8:	000044f5 	.word	0x000044f5

000036dc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    36dc:	b580      	push	{r7, lr}
    36de:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    36e0:	2102      	movs	r1, #2
    36e2:	2018      	movs	r0, #24
    36e4:	4b0f      	ldr	r3, [pc, #60]	; (3724 <CDCUSB_PORT_init+0x48>)
    36e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    36e8:	2100      	movs	r1, #0
    36ea:	2018      	movs	r0, #24
    36ec:	4b0e      	ldr	r3, [pc, #56]	; (3728 <CDCUSB_PORT_init+0x4c>)
    36ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    36f0:	2100      	movs	r1, #0
    36f2:	2018      	movs	r0, #24
    36f4:	4b0d      	ldr	r3, [pc, #52]	; (372c <CDCUSB_PORT_init+0x50>)
    36f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    36f8:	490d      	ldr	r1, [pc, #52]	; (3730 <CDCUSB_PORT_init+0x54>)
    36fa:	2018      	movs	r0, #24
    36fc:	4b0d      	ldr	r3, [pc, #52]	; (3734 <CDCUSB_PORT_init+0x58>)
    36fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3700:	2102      	movs	r1, #2
    3702:	2019      	movs	r0, #25
    3704:	4b07      	ldr	r3, [pc, #28]	; (3724 <CDCUSB_PORT_init+0x48>)
    3706:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3708:	2100      	movs	r1, #0
    370a:	2019      	movs	r0, #25
    370c:	4b06      	ldr	r3, [pc, #24]	; (3728 <CDCUSB_PORT_init+0x4c>)
    370e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3710:	2100      	movs	r1, #0
    3712:	2019      	movs	r0, #25
    3714:	4b05      	ldr	r3, [pc, #20]	; (372c <CDCUSB_PORT_init+0x50>)
    3716:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3718:	4907      	ldr	r1, [pc, #28]	; (3738 <CDCUSB_PORT_init+0x5c>)
    371a:	2019      	movs	r0, #25
    371c:	4b05      	ldr	r3, [pc, #20]	; (3734 <CDCUSB_PORT_init+0x58>)
    371e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3720:	bf00      	nop
    3722:	bd80      	pop	{r7, pc}
    3724:	00002cc9 	.word	0x00002cc9
    3728:	00002d01 	.word	0x00002d01
    372c:	00002c75 	.word	0x00002c75
    3730:	00180007 	.word	0x00180007
    3734:	00002ca9 	.word	0x00002ca9
    3738:	00190007 	.word	0x00190007

0000373c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    373c:	b580      	push	{r7, lr}
    373e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3740:	2242      	movs	r2, #66	; 0x42
    3742:	210a      	movs	r1, #10
    3744:	4805      	ldr	r0, [pc, #20]	; (375c <CDCUSB_CLOCK_init+0x20>)
    3746:	4b06      	ldr	r3, [pc, #24]	; (3760 <CDCUSB_CLOCK_init+0x24>)
    3748:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    374a:	4806      	ldr	r0, [pc, #24]	; (3764 <CDCUSB_CLOCK_init+0x28>)
    374c:	4b06      	ldr	r3, [pc, #24]	; (3768 <CDCUSB_CLOCK_init+0x2c>)
    374e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3750:	4804      	ldr	r0, [pc, #16]	; (3764 <CDCUSB_CLOCK_init+0x28>)
    3752:	4b06      	ldr	r3, [pc, #24]	; (376c <CDCUSB_CLOCK_init+0x30>)
    3754:	4798      	blx	r3
}
    3756:	bf00      	nop
    3758:	bd80      	pop	{r7, pc}
    375a:	bf00      	nop
    375c:	40001c00 	.word	0x40001c00
    3760:	00002455 	.word	0x00002455
    3764:	40000800 	.word	0x40000800
    3768:	0000247b 	.word	0x0000247b
    376c:	0000257b 	.word	0x0000257b

00003770 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3770:	b580      	push	{r7, lr}
    3772:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3774:	4b03      	ldr	r3, [pc, #12]	; (3784 <CDCUSB_init+0x14>)
    3776:	4798      	blx	r3
	usb_d_init();
    3778:	4b03      	ldr	r3, [pc, #12]	; (3788 <CDCUSB_init+0x18>)
    377a:	4798      	blx	r3
	CDCUSB_PORT_init();
    377c:	4b03      	ldr	r3, [pc, #12]	; (378c <CDCUSB_init+0x1c>)
    377e:	4798      	blx	r3
}
    3780:	bf00      	nop
    3782:	bd80      	pop	{r7, pc}
    3784:	0000373d 	.word	0x0000373d
    3788:	00004ce5 	.word	0x00004ce5
    378c:	000036dd 	.word	0x000036dd

00003790 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3790:	b580      	push	{r7, lr}
    3792:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3794:	4802      	ldr	r0, [pc, #8]	; (37a0 <WATCHDOG_CLOCK_init+0x10>)
    3796:	4b03      	ldr	r3, [pc, #12]	; (37a4 <WATCHDOG_CLOCK_init+0x14>)
    3798:	4798      	blx	r3
}
    379a:	bf00      	nop
    379c:	bd80      	pop	{r7, pc}
    379e:	bf00      	nop
    37a0:	40000800 	.word	0x40000800
    37a4:	000024fb 	.word	0x000024fb

000037a8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    37ac:	4b03      	ldr	r3, [pc, #12]	; (37bc <WATCHDOG_init+0x14>)
    37ae:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    37b0:	4903      	ldr	r1, [pc, #12]	; (37c0 <WATCHDOG_init+0x18>)
    37b2:	4804      	ldr	r0, [pc, #16]	; (37c4 <WATCHDOG_init+0x1c>)
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <WATCHDOG_init+0x20>)
    37b6:	4798      	blx	r3
}
    37b8:	bf00      	nop
    37ba:	bd80      	pop	{r7, pc}
    37bc:	00003791 	.word	0x00003791
    37c0:	40002000 	.word	0x40002000
    37c4:	2000a9d0 	.word	0x2000a9d0
    37c8:	00002d49 	.word	0x00002d49

000037cc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    37cc:	b580      	push	{r7, lr}
    37ce:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    37d0:	4904      	ldr	r1, [pc, #16]	; (37e4 <CAN_CCU_PORT_init+0x18>)
    37d2:	202d      	movs	r0, #45	; 0x2d
    37d4:	4b04      	ldr	r3, [pc, #16]	; (37e8 <CAN_CCU_PORT_init+0x1c>)
    37d6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    37d8:	4904      	ldr	r1, [pc, #16]	; (37ec <CAN_CCU_PORT_init+0x20>)
    37da:	202c      	movs	r0, #44	; 0x2c
    37dc:	4b02      	ldr	r3, [pc, #8]	; (37e8 <CAN_CCU_PORT_init+0x1c>)
    37de:	4798      	blx	r3
}
    37e0:	bf00      	nop
    37e2:	bd80      	pop	{r7, pc}
    37e4:	002d0007 	.word	0x002d0007
    37e8:	00002ca9 	.word	0x00002ca9
    37ec:	002c0007 	.word	0x002c0007

000037f0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    37f0:	b580      	push	{r7, lr}
    37f2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    37f4:	4807      	ldr	r0, [pc, #28]	; (3814 <CAN_CCU_init+0x24>)
    37f6:	4b08      	ldr	r3, [pc, #32]	; (3818 <CAN_CCU_init+0x28>)
    37f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    37fa:	2249      	movs	r2, #73	; 0x49
    37fc:	211c      	movs	r1, #28
    37fe:	4807      	ldr	r0, [pc, #28]	; (381c <CAN_CCU_init+0x2c>)
    3800:	4b07      	ldr	r3, [pc, #28]	; (3820 <CAN_CCU_init+0x30>)
    3802:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3804:	4907      	ldr	r1, [pc, #28]	; (3824 <CAN_CCU_init+0x34>)
    3806:	4808      	ldr	r0, [pc, #32]	; (3828 <CAN_CCU_init+0x38>)
    3808:	4b08      	ldr	r3, [pc, #32]	; (382c <CAN_CCU_init+0x3c>)
    380a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    380c:	4b08      	ldr	r3, [pc, #32]	; (3830 <CAN_CCU_init+0x40>)
    380e:	4798      	blx	r3
}
    3810:	bf00      	nop
    3812:	bd80      	pop	{r7, pc}
    3814:	40000800 	.word	0x40000800
    3818:	000024bb 	.word	0x000024bb
    381c:	40001c00 	.word	0x40001c00
    3820:	00002455 	.word	0x00002455
    3824:	42000400 	.word	0x42000400
    3828:	2000a928 	.word	0x2000a928
    382c:	00003d49 	.word	0x00003d49
    3830:	000037cd 	.word	0x000037cd

00003834 <system_init>:

void system_init(void)
{
    3834:	b580      	push	{r7, lr}
    3836:	af00      	add	r7, sp, #0
	init_mcu();
    3838:	4b5f      	ldr	r3, [pc, #380]	; (39b8 <system_init+0x184>)
    383a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    383c:	2100      	movs	r1, #0
    383e:	2007      	movs	r0, #7
    3840:	4b5e      	ldr	r3, [pc, #376]	; (39bc <system_init+0x188>)
    3842:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    3844:	2102      	movs	r1, #2
    3846:	2007      	movs	r0, #7
    3848:	4b5d      	ldr	r3, [pc, #372]	; (39c0 <system_init+0x18c>)
    384a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    384c:	f04f 31ff 	mov.w	r1, #4294967295
    3850:	2007      	movs	r0, #7
    3852:	4b5c      	ldr	r3, [pc, #368]	; (39c4 <system_init+0x190>)
    3854:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    3856:	2101      	movs	r1, #1
    3858:	200f      	movs	r0, #15
    385a:	4b58      	ldr	r3, [pc, #352]	; (39bc <system_init+0x188>)
    385c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    385e:	2102      	movs	r1, #2
    3860:	200f      	movs	r0, #15
    3862:	4b57      	ldr	r3, [pc, #348]	; (39c0 <system_init+0x18c>)
    3864:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    3866:	f04f 31ff 	mov.w	r1, #4294967295
    386a:	200f      	movs	r0, #15
    386c:	4b55      	ldr	r3, [pc, #340]	; (39c4 <system_init+0x190>)
    386e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    3870:	2101      	movs	r1, #1
    3872:	2013      	movs	r0, #19
    3874:	4b51      	ldr	r3, [pc, #324]	; (39bc <system_init+0x188>)
    3876:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    3878:	2102      	movs	r1, #2
    387a:	2013      	movs	r0, #19
    387c:	4b50      	ldr	r3, [pc, #320]	; (39c0 <system_init+0x18c>)
    387e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3880:	f04f 31ff 	mov.w	r1, #4294967295
    3884:	2013      	movs	r0, #19
    3886:	4b4f      	ldr	r3, [pc, #316]	; (39c4 <system_init+0x190>)
    3888:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    388a:	2101      	movs	r1, #1
    388c:	201b      	movs	r0, #27
    388e:	4b4b      	ldr	r3, [pc, #300]	; (39bc <system_init+0x188>)
    3890:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    3892:	2102      	movs	r1, #2
    3894:	201b      	movs	r0, #27
    3896:	4b4a      	ldr	r3, [pc, #296]	; (39c0 <system_init+0x18c>)
    3898:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    389a:	f04f 31ff 	mov.w	r1, #4294967295
    389e:	201b      	movs	r0, #27
    38a0:	4b48      	ldr	r3, [pc, #288]	; (39c4 <system_init+0x190>)
    38a2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    38a4:	2101      	movs	r1, #1
    38a6:	2027      	movs	r0, #39	; 0x27
    38a8:	4b44      	ldr	r3, [pc, #272]	; (39bc <system_init+0x188>)
    38aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    38ac:	2102      	movs	r1, #2
    38ae:	2027      	movs	r0, #39	; 0x27
    38b0:	4b43      	ldr	r3, [pc, #268]	; (39c0 <system_init+0x18c>)
    38b2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    38b4:	f04f 31ff 	mov.w	r1, #4294967295
    38b8:	2027      	movs	r0, #39	; 0x27
    38ba:	4b42      	ldr	r3, [pc, #264]	; (39c4 <system_init+0x190>)
    38bc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    38be:	2101      	movs	r1, #1
    38c0:	203d      	movs	r0, #61	; 0x3d
    38c2:	4b3e      	ldr	r3, [pc, #248]	; (39bc <system_init+0x188>)
    38c4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    38c6:	2102      	movs	r1, #2
    38c8:	203d      	movs	r0, #61	; 0x3d
    38ca:	4b3d      	ldr	r3, [pc, #244]	; (39c0 <system_init+0x18c>)
    38cc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    38ce:	f04f 31ff 	mov.w	r1, #4294967295
    38d2:	203d      	movs	r0, #61	; 0x3d
    38d4:	4b3b      	ldr	r3, [pc, #236]	; (39c4 <system_init+0x190>)
    38d6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    38d8:	2101      	movs	r1, #1
    38da:	203f      	movs	r0, #63	; 0x3f
    38dc:	4b38      	ldr	r3, [pc, #224]	; (39c0 <system_init+0x18c>)
    38de:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    38e0:	2101      	movs	r1, #1
    38e2:	203f      	movs	r0, #63	; 0x3f
    38e4:	4b38      	ldr	r3, [pc, #224]	; (39c8 <system_init+0x194>)
    38e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    38e8:	f04f 31ff 	mov.w	r1, #4294967295
    38ec:	203f      	movs	r0, #63	; 0x3f
    38ee:	4b35      	ldr	r3, [pc, #212]	; (39c4 <system_init+0x190>)
    38f0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    38f2:	2100      	movs	r1, #0
    38f4:	204d      	movs	r0, #77	; 0x4d
    38f6:	4b31      	ldr	r3, [pc, #196]	; (39bc <system_init+0x188>)
    38f8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    38fa:	2102      	movs	r1, #2
    38fc:	204d      	movs	r0, #77	; 0x4d
    38fe:	4b30      	ldr	r3, [pc, #192]	; (39c0 <system_init+0x18c>)
    3900:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    3902:	f04f 31ff 	mov.w	r1, #4294967295
    3906:	204d      	movs	r0, #77	; 0x4d
    3908:	4b2e      	ldr	r3, [pc, #184]	; (39c4 <system_init+0x190>)
    390a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    390c:	2101      	movs	r1, #1
    390e:	204e      	movs	r0, #78	; 0x4e
    3910:	4b2a      	ldr	r3, [pc, #168]	; (39bc <system_init+0x188>)
    3912:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3914:	2102      	movs	r1, #2
    3916:	204e      	movs	r0, #78	; 0x4e
    3918:	4b29      	ldr	r3, [pc, #164]	; (39c0 <system_init+0x18c>)
    391a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    391c:	f04f 31ff 	mov.w	r1, #4294967295
    3920:	204e      	movs	r0, #78	; 0x4e
    3922:	4b28      	ldr	r3, [pc, #160]	; (39c4 <system_init+0x190>)
    3924:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3926:	2100      	movs	r1, #0
    3928:	204f      	movs	r0, #79	; 0x4f
    392a:	4b24      	ldr	r3, [pc, #144]	; (39bc <system_init+0x188>)
    392c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    392e:	2102      	movs	r1, #2
    3930:	204f      	movs	r0, #79	; 0x4f
    3932:	4b23      	ldr	r3, [pc, #140]	; (39c0 <system_init+0x18c>)
    3934:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3936:	f04f 31ff 	mov.w	r1, #4294967295
    393a:	204f      	movs	r0, #79	; 0x4f
    393c:	4b21      	ldr	r3, [pc, #132]	; (39c4 <system_init+0x190>)
    393e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3940:	2100      	movs	r1, #0
    3942:	2052      	movs	r0, #82	; 0x52
    3944:	4b1d      	ldr	r3, [pc, #116]	; (39bc <system_init+0x188>)
    3946:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3948:	2102      	movs	r1, #2
    394a:	2052      	movs	r0, #82	; 0x52
    394c:	4b1c      	ldr	r3, [pc, #112]	; (39c0 <system_init+0x18c>)
    394e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3950:	f04f 31ff 	mov.w	r1, #4294967295
    3954:	2052      	movs	r0, #82	; 0x52
    3956:	4b1b      	ldr	r3, [pc, #108]	; (39c4 <system_init+0x190>)
    3958:	4798      	blx	r3

	CRC_CALC_init();
    395a:	4b1c      	ldr	r3, [pc, #112]	; (39cc <system_init+0x198>)
    395c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    395e:	4b1c      	ldr	r3, [pc, #112]	; (39d0 <system_init+0x19c>)
    3960:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3962:	4b1c      	ldr	r3, [pc, #112]	; (39d4 <system_init+0x1a0>)
    3964:	4798      	blx	r3

	QSPI_N25Q256_init();
    3966:	4b1c      	ldr	r3, [pc, #112]	; (39d8 <system_init+0x1a4>)
    3968:	4798      	blx	r3

	DATETIME_CLOCK_init();
    396a:	4b1c      	ldr	r3, [pc, #112]	; (39dc <system_init+0x1a8>)
    396c:	4798      	blx	r3

	I2C_HEATERS_init();
    396e:	4b1c      	ldr	r3, [pc, #112]	; (39e0 <system_init+0x1ac>)
    3970:	4798      	blx	r3

	SPI_TEMP_init();
    3972:	4b1c      	ldr	r3, [pc, #112]	; (39e4 <system_init+0x1b0>)
    3974:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    3976:	4b1c      	ldr	r3, [pc, #112]	; (39e8 <system_init+0x1b4>)
    3978:	4798      	blx	r3

	SPI_HI3593_init();
    397a:	4b1c      	ldr	r3, [pc, #112]	; (39ec <system_init+0x1b8>)
    397c:	4798      	blx	r3

	I2C_FANS_init();
    397e:	4b1c      	ldr	r3, [pc, #112]	; (39f0 <system_init+0x1bc>)
    3980:	4798      	blx	r3

	TIMER_USB_init();
    3982:	4b1c      	ldr	r3, [pc, #112]	; (39f4 <system_init+0x1c0>)
    3984:	4798      	blx	r3
	TIMER_ARINC_init();
    3986:	4b1c      	ldr	r3, [pc, #112]	; (39f8 <system_init+0x1c4>)
    3988:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    398a:	4b1c      	ldr	r3, [pc, #112]	; (39fc <system_init+0x1c8>)
    398c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    398e:	4b1c      	ldr	r3, [pc, #112]	; (3a00 <system_init+0x1cc>)
    3990:	4798      	blx	r3
	TIMER_EVENT_init();
    3992:	4b1c      	ldr	r3, [pc, #112]	; (3a04 <system_init+0x1d0>)
    3994:	4798      	blx	r3
	LIVE_PULSE_init();
    3996:	4b1c      	ldr	r3, [pc, #112]	; (3a08 <system_init+0x1d4>)
    3998:	4798      	blx	r3

	TIMER_HVAC_init();
    399a:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <system_init+0x1d8>)
    399c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    399e:	4b1c      	ldr	r3, [pc, #112]	; (3a10 <system_init+0x1dc>)
    39a0:	4798      	blx	r3

	TIMER_CCU_init();
    39a2:	4b1c      	ldr	r3, [pc, #112]	; (3a14 <system_init+0x1e0>)
    39a4:	4798      	blx	r3

	CDCUSB_init();
    39a6:	4b1c      	ldr	r3, [pc, #112]	; (3a18 <system_init+0x1e4>)
    39a8:	4798      	blx	r3

	WATCHDOG_init();
    39aa:	4b1c      	ldr	r3, [pc, #112]	; (3a1c <system_init+0x1e8>)
    39ac:	4798      	blx	r3
	CAN_CCU_init();
    39ae:	4b1c      	ldr	r3, [pc, #112]	; (3a20 <system_init+0x1ec>)
    39b0:	4798      	blx	r3
}
    39b2:	bf00      	nop
    39b4:	bd80      	pop	{r7, pc}
    39b6:	bf00      	nop
    39b8:	00002d39 	.word	0x00002d39
    39bc:	00002d01 	.word	0x00002d01
    39c0:	00002cc9 	.word	0x00002cc9
    39c4:	00002ca9 	.word	0x00002ca9
    39c8:	00002c75 	.word	0x00002c75
    39cc:	00002d99 	.word	0x00002d99
    39d0:	00002dc5 	.word	0x00002dc5
    39d4:	00002eed 	.word	0x00002eed
    39d8:	00003035 	.word	0x00003035
    39dc:	00003079 	.word	0x00003079
    39e0:	00003109 	.word	0x00003109
    39e4:	000031d5 	.word	0x000031d5
    39e8:	0000326d 	.word	0x0000326d
    39ec:	00003339 	.word	0x00003339
    39f0:	000033d1 	.word	0x000033d1
    39f4:	000033fd 	.word	0x000033fd
    39f8:	00003445 	.word	0x00003445
    39fc:	0000348d 	.word	0x0000348d
    3a00:	000034d5 	.word	0x000034d5
    3a04:	0000351d 	.word	0x0000351d
    3a08:	0000359d 	.word	0x0000359d
    3a0c:	000035fd 	.word	0x000035fd
    3a10:	00003655 	.word	0x00003655
    3a14:	000036ad 	.word	0x000036ad
    3a18:	00003771 	.word	0x00003771
    3a1c:	000037a9 	.word	0x000037a9
    3a20:	000037f1 	.word	0x000037f1

00003a24 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    3a24:	b480      	push	{r7}
    3a26:	b085      	sub	sp, #20
    3a28:	af00      	add	r7, sp, #0
    3a2a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3a2c:	f3ef 8310 	mrs	r3, PRIMASK
    3a30:	60fb      	str	r3, [r7, #12]
  return(result);
    3a32:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    3a34:	687b      	ldr	r3, [r7, #4]
    3a36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3a38:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3a3a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3a3e:	bf00      	nop
    3a40:	3714      	adds	r7, #20
    3a42:	46bd      	mov	sp, r7
    3a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a48:	4770      	bx	lr

00003a4a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    3a4a:	b480      	push	{r7}
    3a4c:	b085      	sub	sp, #20
    3a4e:	af00      	add	r7, sp, #0
    3a50:	6078      	str	r0, [r7, #4]
    3a52:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3a5c:	68fb      	ldr	r3, [r7, #12]
    3a5e:	f383 8810 	msr	PRIMASK, r3
}
    3a62:	bf00      	nop
    3a64:	3714      	adds	r7, #20
    3a66:	46bd      	mov	sp, r7
    3a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a6c:	4770      	bx	lr

00003a6e <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3a6e:	b480      	push	{r7}
    3a70:	b083      	sub	sp, #12
    3a72:	af00      	add	r7, sp, #0
    3a74:	4603      	mov	r3, r0
    3a76:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3a78:	88fb      	ldrh	r3, [r7, #6]
    3a7a:	f003 0303 	and.w	r3, r3, #3
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d001      	beq.n	3a86 <leap_year+0x18>
		return false;
    3a82:	2300      	movs	r3, #0
    3a84:	e000      	b.n	3a88 <leap_year+0x1a>
	} else {
		return true;
    3a86:	2301      	movs	r3, #1
	}
}
    3a88:	4618      	mov	r0, r3
    3a8a:	370c      	adds	r7, #12
    3a8c:	46bd      	mov	sp, r7
    3a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a92:	4770      	bx	lr

00003a94 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b084      	sub	sp, #16
    3a98:	af00      	add	r7, sp, #0
    3a9a:	6078      	str	r0, [r7, #4]
    3a9c:	460b      	mov	r3, r1
    3a9e:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3aa0:	2300      	movs	r3, #0
    3aa2:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	b29b      	uxth	r3, r3
    3aa8:	4618      	mov	r0, r3
    3aaa:	4b2f      	ldr	r3, [pc, #188]	; (3b68 <get_secs_in_month+0xd4>)
    3aac:	4798      	blx	r3
    3aae:	4603      	mov	r3, r0
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d028      	beq.n	3b06 <get_secs_in_month+0x72>
		switch (month) {
    3ab4:	78fb      	ldrb	r3, [r7, #3]
    3ab6:	3b01      	subs	r3, #1
    3ab8:	2b0b      	cmp	r3, #11
    3aba:	d84c      	bhi.n	3b56 <get_secs_in_month+0xc2>
    3abc:	a201      	add	r2, pc, #4	; (adr r2, 3ac4 <get_secs_in_month+0x30>)
    3abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3ac2:	bf00      	nop
    3ac4:	00003af5 	.word	0x00003af5
    3ac8:	00003afb 	.word	0x00003afb
    3acc:	00003af5 	.word	0x00003af5
    3ad0:	00003b01 	.word	0x00003b01
    3ad4:	00003af5 	.word	0x00003af5
    3ad8:	00003b01 	.word	0x00003b01
    3adc:	00003af5 	.word	0x00003af5
    3ae0:	00003af5 	.word	0x00003af5
    3ae4:	00003b01 	.word	0x00003b01
    3ae8:	00003af5 	.word	0x00003af5
    3aec:	00003b01 	.word	0x00003b01
    3af0:	00003af5 	.word	0x00003af5
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3af4:	4b1d      	ldr	r3, [pc, #116]	; (3b6c <get_secs_in_month+0xd8>)
    3af6:	60fb      	str	r3, [r7, #12]
			break;
    3af8:	e030      	b.n	3b5c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    3afa:	4b1d      	ldr	r3, [pc, #116]	; (3b70 <get_secs_in_month+0xdc>)
    3afc:	60fb      	str	r3, [r7, #12]
			break;
    3afe:	e02d      	b.n	3b5c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3b00:	4b1c      	ldr	r3, [pc, #112]	; (3b74 <get_secs_in_month+0xe0>)
    3b02:	60fb      	str	r3, [r7, #12]
			break;
    3b04:	e02a      	b.n	3b5c <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    3b06:	78fb      	ldrb	r3, [r7, #3]
    3b08:	3b01      	subs	r3, #1
    3b0a:	2b0b      	cmp	r3, #11
    3b0c:	d825      	bhi.n	3b5a <get_secs_in_month+0xc6>
    3b0e:	a201      	add	r2, pc, #4	; (adr r2, 3b14 <get_secs_in_month+0x80>)
    3b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b14:	00003b45 	.word	0x00003b45
    3b18:	00003b4b 	.word	0x00003b4b
    3b1c:	00003b45 	.word	0x00003b45
    3b20:	00003b51 	.word	0x00003b51
    3b24:	00003b45 	.word	0x00003b45
    3b28:	00003b51 	.word	0x00003b51
    3b2c:	00003b45 	.word	0x00003b45
    3b30:	00003b45 	.word	0x00003b45
    3b34:	00003b51 	.word	0x00003b51
    3b38:	00003b45 	.word	0x00003b45
    3b3c:	00003b51 	.word	0x00003b51
    3b40:	00003b45 	.word	0x00003b45
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3b44:	4b09      	ldr	r3, [pc, #36]	; (3b6c <get_secs_in_month+0xd8>)
    3b46:	60fb      	str	r3, [r7, #12]
			break;
    3b48:	e008      	b.n	3b5c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    3b4a:	4b0b      	ldr	r3, [pc, #44]	; (3b78 <get_secs_in_month+0xe4>)
    3b4c:	60fb      	str	r3, [r7, #12]
			break;
    3b4e:	e005      	b.n	3b5c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3b50:	4b08      	ldr	r3, [pc, #32]	; (3b74 <get_secs_in_month+0xe0>)
    3b52:	60fb      	str	r3, [r7, #12]
			break;
    3b54:	e002      	b.n	3b5c <get_secs_in_month+0xc8>
			break;
    3b56:	bf00      	nop
    3b58:	e000      	b.n	3b5c <get_secs_in_month+0xc8>
		default:
			break;
    3b5a:	bf00      	nop
		}
	}

	return sec_in_month;
    3b5c:	68fb      	ldr	r3, [r7, #12]
}
    3b5e:	4618      	mov	r0, r3
    3b60:	3710      	adds	r7, #16
    3b62:	46bd      	mov	sp, r7
    3b64:	bd80      	pop	{r7, pc}
    3b66:	bf00      	nop
    3b68:	00003a6f 	.word	0x00003a6f
    3b6c:	0028de80 	.word	0x0028de80
    3b70:	00263b80 	.word	0x00263b80
    3b74:	00278d00 	.word	0x00278d00
    3b78:	0024ea00 	.word	0x0024ea00

00003b7c <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b08a      	sub	sp, #40	; 0x28
    3b80:	af00      	add	r7, sp, #0
    3b82:	60f8      	str	r0, [r7, #12]
    3b84:	60b9      	str	r1, [r7, #8]
    3b86:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    3b88:	68fb      	ldr	r3, [r7, #12]
    3b8a:	699b      	ldr	r3, [r3, #24]
    3b8c:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    3b8e:	2301      	movs	r3, #1
    3b90:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    3b92:	2301      	movs	r3, #1
    3b94:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    3b96:	2300      	movs	r3, #0
    3b98:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    3b9a:	2300      	movs	r3, #0
    3b9c:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    3b9e:	68bb      	ldr	r3, [r7, #8]
    3ba0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    3ba2:	6a3b      	ldr	r3, [r7, #32]
    3ba4:	b29b      	uxth	r3, r3
    3ba6:	4618      	mov	r0, r3
    3ba8:	4b32      	ldr	r3, [pc, #200]	; (3c74 <convert_timestamp_to_datetime+0xf8>)
    3baa:	4798      	blx	r3
    3bac:	4603      	mov	r3, r0
    3bae:	2b00      	cmp	r3, #0
    3bb0:	d001      	beq.n	3bb6 <convert_timestamp_to_datetime+0x3a>
    3bb2:	4b31      	ldr	r3, [pc, #196]	; (3c78 <convert_timestamp_to_datetime+0xfc>)
    3bb4:	e000      	b.n	3bb8 <convert_timestamp_to_datetime+0x3c>
    3bb6:	4b31      	ldr	r3, [pc, #196]	; (3c7c <convert_timestamp_to_datetime+0x100>)
    3bb8:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    3bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3bbc:	69bb      	ldr	r3, [r7, #24]
    3bbe:	429a      	cmp	r2, r3
    3bc0:	d307      	bcc.n	3bd2 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    3bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3bc4:	69bb      	ldr	r3, [r7, #24]
    3bc6:	1ad3      	subs	r3, r2, r3
    3bc8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    3bca:	6a3b      	ldr	r3, [r7, #32]
    3bcc:	3301      	adds	r3, #1
    3bce:	623b      	str	r3, [r7, #32]
    3bd0:	e7e7      	b.n	3ba2 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    3bd2:	7ffb      	ldrb	r3, [r7, #31]
    3bd4:	4619      	mov	r1, r3
    3bd6:	6a38      	ldr	r0, [r7, #32]
    3bd8:	4b29      	ldr	r3, [pc, #164]	; (3c80 <convert_timestamp_to_datetime+0x104>)
    3bda:	4798      	blx	r3
    3bdc:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    3bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3be0:	697b      	ldr	r3, [r7, #20]
    3be2:	429a      	cmp	r2, r3
    3be4:	d307      	bcc.n	3bf6 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    3be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3be8:	697b      	ldr	r3, [r7, #20]
    3bea:	1ad3      	subs	r3, r2, r3
    3bec:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    3bee:	7ffb      	ldrb	r3, [r7, #31]
    3bf0:	3301      	adds	r3, #1
    3bf2:	77fb      	strb	r3, [r7, #31]
    3bf4:	e7ed      	b.n	3bd2 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    3bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bf8:	4a22      	ldr	r2, [pc, #136]	; (3c84 <convert_timestamp_to_datetime+0x108>)
    3bfa:	4293      	cmp	r3, r2
    3bfc:	d909      	bls.n	3c12 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    3bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c00:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    3c04:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    3c08:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    3c0a:	7fbb      	ldrb	r3, [r7, #30]
    3c0c:	3301      	adds	r3, #1
    3c0e:	77bb      	strb	r3, [r7, #30]
    3c10:	e7f1      	b.n	3bf6 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    3c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c14:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    3c18:	d307      	bcc.n	3c2a <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    3c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c1c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    3c20:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    3c22:	7f7b      	ldrb	r3, [r7, #29]
    3c24:	3301      	adds	r3, #1
    3c26:	777b      	strb	r3, [r7, #29]
    3c28:	e7f3      	b.n	3c12 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    3c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c2c:	2b3b      	cmp	r3, #59	; 0x3b
    3c2e:	d906      	bls.n	3c3e <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    3c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c32:	3b3c      	subs	r3, #60	; 0x3c
    3c34:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    3c36:	7f3b      	ldrb	r3, [r7, #28]
    3c38:	3301      	adds	r3, #1
    3c3a:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    3c3c:	e7f5      	b.n	3c2a <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    3c3e:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    3c40:	6a3b      	ldr	r3, [r7, #32]
    3c42:	b29a      	uxth	r2, r3
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	7ffa      	ldrb	r2, [r7, #31]
    3c4c:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	7fba      	ldrb	r2, [r7, #30]
    3c52:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	7f7a      	ldrb	r2, [r7, #29]
    3c58:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	7f3a      	ldrb	r2, [r7, #28]
    3c5e:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    3c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c62:	b2da      	uxtb	r2, r3
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    3c68:	2300      	movs	r3, #0
}
    3c6a:	4618      	mov	r0, r3
    3c6c:	3728      	adds	r7, #40	; 0x28
    3c6e:	46bd      	mov	sp, r7
    3c70:	bd80      	pop	{r7, pc}
    3c72:	bf00      	nop
    3c74:	00003a6f 	.word	0x00003a6f
    3c78:	01e28500 	.word	0x01e28500
    3c7c:	01e13380 	.word	0x01e13380
    3c80:	00003a95 	.word	0x00003a95
    3c84:	0001517f 	.word	0x0001517f

00003c88 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    3c88:	b580      	push	{r7, lr}
    3c8a:	b084      	sub	sp, #16
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	6078      	str	r0, [r7, #4]
    3c90:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3c92:	2300      	movs	r3, #0
    3c94:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	2b00      	cmp	r3, #0
    3c9a:	bf14      	ite	ne
    3c9c:	2301      	movne	r3, #1
    3c9e:	2300      	moveq	r3, #0
    3ca0:	b2db      	uxtb	r3, r3
    3ca2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3ca6:	4911      	ldr	r1, [pc, #68]	; (3cec <calendar_init+0x64>)
    3ca8:	4618      	mov	r0, r3
    3caa:	4b11      	ldr	r3, [pc, #68]	; (3cf0 <calendar_init+0x68>)
    3cac:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	681a      	ldr	r2, [r3, #0]
    3cb2:	683b      	ldr	r3, [r7, #0]
    3cb4:	429a      	cmp	r2, r3
    3cb6:	d101      	bne.n	3cbc <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3cb8:	2300      	movs	r3, #0
    3cba:	e013      	b.n	3ce4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d002      	beq.n	3cca <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3cc4:	f06f 0311 	mvn.w	r3, #17
    3cc8:	e00c      	b.n	3ce4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	683a      	ldr	r2, [r7, #0]
    3cce:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	4618      	mov	r0, r3
    3cd4:	4b07      	ldr	r3, [pc, #28]	; (3cf4 <calendar_init+0x6c>)
    3cd6:	4798      	blx	r3
    3cd8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3ce0:	619a      	str	r2, [r3, #24]

	return ret;
    3ce2:	68fb      	ldr	r3, [r7, #12]
}
    3ce4:	4618      	mov	r0, r3
    3ce6:	3710      	adds	r7, #16
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}
    3cec:	00011174 	.word	0x00011174
    3cf0:	00005239 	.word	0x00005239
    3cf4:	00007541 	.word	0x00007541

00003cf8 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b084      	sub	sp, #16
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	2b00      	cmp	r3, #0
    3d06:	bf14      	ite	ne
    3d08:	2301      	movne	r3, #1
    3d0a:	2300      	moveq	r3, #0
    3d0c:	b2db      	uxtb	r3, r3
    3d0e:	f240 223b 	movw	r2, #571	; 0x23b
    3d12:	4909      	ldr	r1, [pc, #36]	; (3d38 <calendar_get_date_time+0x40>)
    3d14:	4618      	mov	r0, r3
    3d16:	4b09      	ldr	r3, [pc, #36]	; (3d3c <calendar_get_date_time+0x44>)
    3d18:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	4618      	mov	r0, r3
    3d1e:	4b08      	ldr	r3, [pc, #32]	; (3d40 <calendar_get_date_time+0x48>)
    3d20:	4798      	blx	r3
    3d22:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    3d24:	683a      	ldr	r2, [r7, #0]
    3d26:	68f9      	ldr	r1, [r7, #12]
    3d28:	6878      	ldr	r0, [r7, #4]
    3d2a:	4b06      	ldr	r3, [pc, #24]	; (3d44 <calendar_get_date_time+0x4c>)
    3d2c:	4798      	blx	r3

	return ERR_NONE;
    3d2e:	2300      	movs	r3, #0
}
    3d30:	4618      	mov	r0, r3
    3d32:	3710      	adds	r7, #16
    3d34:	46bd      	mov	sp, r7
    3d36:	bd80      	pop	{r7, pc}
    3d38:	00011174 	.word	0x00011174
    3d3c:	00005239 	.word	0x00005239
    3d40:	000075f9 	.word	0x000075f9
    3d44:	00003b7d 	.word	0x00003b7d

00003d48 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	b084      	sub	sp, #16
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	6078      	str	r0, [r7, #4]
    3d50:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d004      	beq.n	3d62 <can_async_init+0x1a>
    3d58:	683b      	ldr	r3, [r7, #0]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d001      	beq.n	3d62 <can_async_init+0x1a>
    3d5e:	2301      	movs	r3, #1
    3d60:	e000      	b.n	3d64 <can_async_init+0x1c>
    3d62:	2300      	movs	r3, #0
    3d64:	f003 0301 	and.w	r3, r3, #1
    3d68:	b2db      	uxtb	r3, r3
    3d6a:	2241      	movs	r2, #65	; 0x41
    3d6c:	490e      	ldr	r1, [pc, #56]	; (3da8 <can_async_init+0x60>)
    3d6e:	4618      	mov	r0, r3
    3d70:	4b0e      	ldr	r3, [pc, #56]	; (3dac <can_async_init+0x64>)
    3d72:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3d74:	687b      	ldr	r3, [r7, #4]
    3d76:	6839      	ldr	r1, [r7, #0]
    3d78:	4618      	mov	r0, r3
    3d7a:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <can_async_init+0x68>)
    3d7c:	4798      	blx	r3
    3d7e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3d80:	68fb      	ldr	r3, [r7, #12]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d001      	beq.n	3d8a <can_async_init+0x42>
		return rc;
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	e009      	b.n	3d9e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	4a09      	ldr	r2, [pc, #36]	; (3db4 <can_async_init+0x6c>)
    3d8e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	4a09      	ldr	r2, [pc, #36]	; (3db8 <can_async_init+0x70>)
    3d94:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	4a08      	ldr	r2, [pc, #32]	; (3dbc <can_async_init+0x74>)
    3d9a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3d9c:	2300      	movs	r3, #0
}
    3d9e:	4618      	mov	r0, r3
    3da0:	3710      	adds	r7, #16
    3da2:	46bd      	mov	sp, r7
    3da4:	bd80      	pop	{r7, pc}
    3da6:	bf00      	nop
    3da8:	00011190 	.word	0x00011190
    3dac:	00005239 	.word	0x00005239
    3db0:	00005795 	.word	0x00005795
    3db4:	00003dc1 	.word	0x00003dc1
    3db8:	00003de5 	.word	0x00003de5
    3dbc:	00003e09 	.word	0x00003e09

00003dc0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b084      	sub	sp, #16
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    3dcc:	68fb      	ldr	r3, [r7, #12]
    3dce:	69db      	ldr	r3, [r3, #28]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d003      	beq.n	3ddc <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	69db      	ldr	r3, [r3, #28]
    3dd8:	68f8      	ldr	r0, [r7, #12]
    3dda:	4798      	blx	r3
	}
}
    3ddc:	bf00      	nop
    3dde:	3710      	adds	r7, #16
    3de0:	46bd      	mov	sp, r7
    3de2:	bd80      	pop	{r7, pc}

00003de4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3de4:	b580      	push	{r7, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3df0:	68fb      	ldr	r3, [r7, #12]
    3df2:	6a1b      	ldr	r3, [r3, #32]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d003      	beq.n	3e00 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3df8:	68fb      	ldr	r3, [r7, #12]
    3dfa:	6a1b      	ldr	r3, [r3, #32]
    3dfc:	68f8      	ldr	r0, [r7, #12]
    3dfe:	4798      	blx	r3
	}
}
    3e00:	bf00      	nop
    3e02:	3710      	adds	r7, #16
    3e04:	46bd      	mov	sp, r7
    3e06:	bd80      	pop	{r7, pc}

00003e08 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	b084      	sub	sp, #16
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
    3e10:	460b      	mov	r3, r1
    3e12:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    3e18:	68fb      	ldr	r3, [r7, #12]
    3e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	d005      	beq.n	3e2c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3e20:	68fb      	ldr	r3, [r7, #12]
    3e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e24:	78fa      	ldrb	r2, [r7, #3]
    3e26:	4611      	mov	r1, r2
    3e28:	68f8      	ldr	r0, [r7, #12]
    3e2a:	4798      	blx	r3
	}
}
    3e2c:	bf00      	nop
    3e2e:	3710      	adds	r7, #16
    3e30:	46bd      	mov	sp, r7
    3e32:	bd80      	pop	{r7, pc}

00003e34 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3e34:	b580      	push	{r7, lr}
    3e36:	b082      	sub	sp, #8
    3e38:	af00      	add	r7, sp, #0
    3e3a:	6078      	str	r0, [r7, #4]
    3e3c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d004      	beq.n	3e4e <crc_sync_init+0x1a>
    3e44:	683b      	ldr	r3, [r7, #0]
    3e46:	2b00      	cmp	r3, #0
    3e48:	d001      	beq.n	3e4e <crc_sync_init+0x1a>
    3e4a:	2301      	movs	r3, #1
    3e4c:	e000      	b.n	3e50 <crc_sync_init+0x1c>
    3e4e:	2300      	movs	r3, #0
    3e50:	f003 0301 	and.w	r3, r3, #1
    3e54:	b2db      	uxtb	r3, r3
    3e56:	222b      	movs	r2, #43	; 0x2b
    3e58:	4906      	ldr	r1, [pc, #24]	; (3e74 <crc_sync_init+0x40>)
    3e5a:	4618      	mov	r0, r3
    3e5c:	4b06      	ldr	r3, [pc, #24]	; (3e78 <crc_sync_init+0x44>)
    3e5e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	6839      	ldr	r1, [r7, #0]
    3e64:	4618      	mov	r0, r3
    3e66:	4b05      	ldr	r3, [pc, #20]	; (3e7c <crc_sync_init+0x48>)
    3e68:	4798      	blx	r3
    3e6a:	4603      	mov	r3, r0
}
    3e6c:	4618      	mov	r0, r3
    3e6e:	3708      	adds	r7, #8
    3e70:	46bd      	mov	sp, r7
    3e72:	bd80      	pop	{r7, pc}
    3e74:	000111ac 	.word	0x000111ac
    3e78:	00005239 	.word	0x00005239
    3e7c:	00005e99 	.word	0x00005e99

00003e80 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3e80:	b590      	push	{r4, r7, lr}
    3e82:	b083      	sub	sp, #12
    3e84:	af00      	add	r7, sp, #0
    3e86:	4603      	mov	r3, r0
    3e88:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    3e8a:	4b07      	ldr	r3, [pc, #28]	; (3ea8 <delay_us+0x28>)
    3e8c:	681c      	ldr	r4, [r3, #0]
    3e8e:	88fb      	ldrh	r3, [r7, #6]
    3e90:	4618      	mov	r0, r3
    3e92:	4b06      	ldr	r3, [pc, #24]	; (3eac <delay_us+0x2c>)
    3e94:	4798      	blx	r3
    3e96:	4603      	mov	r3, r0
    3e98:	4619      	mov	r1, r3
    3e9a:	4620      	mov	r0, r4
    3e9c:	4b04      	ldr	r3, [pc, #16]	; (3eb0 <delay_us+0x30>)
    3e9e:	4798      	blx	r3
}
    3ea0:	bf00      	nop
    3ea2:	370c      	adds	r7, #12
    3ea4:	46bd      	mov	sp, r7
    3ea6:	bd90      	pop	{r4, r7, pc}
    3ea8:	20000cac 	.word	0x20000cac
    3eac:	00005be9 	.word	0x00005be9
    3eb0:	00005d81 	.word	0x00005d81

00003eb4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3eb4:	b590      	push	{r4, r7, lr}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	4603      	mov	r3, r0
    3ebc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3ebe:	4b07      	ldr	r3, [pc, #28]	; (3edc <delay_ms+0x28>)
    3ec0:	681c      	ldr	r4, [r3, #0]
    3ec2:	88fb      	ldrh	r3, [r7, #6]
    3ec4:	4618      	mov	r0, r3
    3ec6:	4b06      	ldr	r3, [pc, #24]	; (3ee0 <delay_ms+0x2c>)
    3ec8:	4798      	blx	r3
    3eca:	4603      	mov	r3, r0
    3ecc:	4619      	mov	r1, r3
    3ece:	4620      	mov	r0, r4
    3ed0:	4b04      	ldr	r3, [pc, #16]	; (3ee4 <delay_ms+0x30>)
    3ed2:	4798      	blx	r3
}
    3ed4:	bf00      	nop
    3ed6:	370c      	adds	r7, #12
    3ed8:	46bd      	mov	sp, r7
    3eda:	bd90      	pop	{r4, r7, pc}
    3edc:	20000cac 	.word	0x20000cac
    3ee0:	00005d55 	.word	0x00005d55
    3ee4:	00005d81 	.word	0x00005d81

00003ee8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	af00      	add	r7, sp, #0
	return _event_system_init();
    3eec:	4b02      	ldr	r3, [pc, #8]	; (3ef8 <event_system_init+0x10>)
    3eee:	4798      	blx	r3
    3ef0:	4603      	mov	r3, r0
}
    3ef2:	4618      	mov	r0, r3
    3ef4:	bd80      	pop	{r7, pc}
    3ef6:	bf00      	nop
    3ef8:	0000657d 	.word	0x0000657d

00003efc <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b082      	sub	sp, #8
    3f00:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3f02:	2300      	movs	r3, #0
    3f04:	80fb      	strh	r3, [r7, #6]
    3f06:	e00e      	b.n	3f26 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3f08:	88fb      	ldrh	r3, [r7, #6]
    3f0a:	4a0c      	ldr	r2, [pc, #48]	; (3f3c <ext_irq_init+0x40>)
    3f0c:	00db      	lsls	r3, r3, #3
    3f0e:	4413      	add	r3, r2
    3f10:	f04f 32ff 	mov.w	r2, #4294967295
    3f14:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3f16:	88fb      	ldrh	r3, [r7, #6]
    3f18:	4a08      	ldr	r2, [pc, #32]	; (3f3c <ext_irq_init+0x40>)
    3f1a:	2100      	movs	r1, #0
    3f1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3f20:	88fb      	ldrh	r3, [r7, #6]
    3f22:	3301      	adds	r3, #1
    3f24:	80fb      	strh	r3, [r7, #6]
    3f26:	88fb      	ldrh	r3, [r7, #6]
    3f28:	2b08      	cmp	r3, #8
    3f2a:	d9ed      	bls.n	3f08 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    3f2c:	4804      	ldr	r0, [pc, #16]	; (3f40 <ext_irq_init+0x44>)
    3f2e:	4b05      	ldr	r3, [pc, #20]	; (3f44 <ext_irq_init+0x48>)
    3f30:	4798      	blx	r3
    3f32:	4603      	mov	r3, r0
}
    3f34:	4618      	mov	r0, r3
    3f36:	3708      	adds	r7, #8
    3f38:	46bd      	mov	sp, r7
    3f3a:	bd80      	pop	{r7, pc}
    3f3c:	20000cb0 	.word	0x20000cb0
    3f40:	00003f49 	.word	0x00003f49
    3f44:	000061a1 	.word	0x000061a1

00003f48 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b084      	sub	sp, #16
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3f50:	2300      	movs	r3, #0
    3f52:	73fb      	strb	r3, [r7, #15]
    3f54:	2309      	movs	r3, #9
    3f56:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    3f58:	e02a      	b.n	3fb0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    3f5a:	7bba      	ldrb	r2, [r7, #14]
    3f5c:	7bfb      	ldrb	r3, [r7, #15]
    3f5e:	4413      	add	r3, r2
    3f60:	105b      	asrs	r3, r3, #1
    3f62:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    3f64:	7b7b      	ldrb	r3, [r7, #13]
    3f66:	2b08      	cmp	r3, #8
    3f68:	d827      	bhi.n	3fba <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    3f6a:	7b7b      	ldrb	r3, [r7, #13]
    3f6c:	4a16      	ldr	r2, [pc, #88]	; (3fc8 <process_ext_irq+0x80>)
    3f6e:	00db      	lsls	r3, r3, #3
    3f70:	4413      	add	r3, r2
    3f72:	685a      	ldr	r2, [r3, #4]
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	429a      	cmp	r2, r3
    3f78:	d10b      	bne.n	3f92 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    3f7a:	7b7b      	ldrb	r3, [r7, #13]
    3f7c:	4a12      	ldr	r2, [pc, #72]	; (3fc8 <process_ext_irq+0x80>)
    3f7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d01b      	beq.n	3fbe <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    3f86:	7b7b      	ldrb	r3, [r7, #13]
    3f88:	4a0f      	ldr	r2, [pc, #60]	; (3fc8 <process_ext_irq+0x80>)
    3f8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3f8e:	4798      	blx	r3
			}
			return;
    3f90:	e015      	b.n	3fbe <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    3f92:	7b7b      	ldrb	r3, [r7, #13]
    3f94:	4a0c      	ldr	r2, [pc, #48]	; (3fc8 <process_ext_irq+0x80>)
    3f96:	00db      	lsls	r3, r3, #3
    3f98:	4413      	add	r3, r2
    3f9a:	685a      	ldr	r2, [r3, #4]
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	429a      	cmp	r2, r3
    3fa0:	d203      	bcs.n	3faa <process_ext_irq+0x62>
			lower = middle + 1;
    3fa2:	7b7b      	ldrb	r3, [r7, #13]
    3fa4:	3301      	adds	r3, #1
    3fa6:	73fb      	strb	r3, [r7, #15]
    3fa8:	e002      	b.n	3fb0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    3faa:	7b7b      	ldrb	r3, [r7, #13]
    3fac:	3b01      	subs	r3, #1
    3fae:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    3fb0:	7bba      	ldrb	r2, [r7, #14]
    3fb2:	7bfb      	ldrb	r3, [r7, #15]
    3fb4:	429a      	cmp	r2, r3
    3fb6:	d2d0      	bcs.n	3f5a <process_ext_irq+0x12>
    3fb8:	e002      	b.n	3fc0 <process_ext_irq+0x78>
			return;
    3fba:	bf00      	nop
    3fbc:	e000      	b.n	3fc0 <process_ext_irq+0x78>
			return;
    3fbe:	bf00      	nop
		}
	}
}
    3fc0:	3710      	adds	r7, #16
    3fc2:	46bd      	mov	sp, r7
    3fc4:	bd80      	pop	{r7, pc}
    3fc6:	bf00      	nop
    3fc8:	20000cb0 	.word	0x20000cb0

00003fcc <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b08a      	sub	sp, #40	; 0x28
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	60f8      	str	r0, [r7, #12]
    3fd4:	60b9      	str	r1, [r7, #8]
    3fd6:	4613      	mov	r3, r2
    3fd8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	3b14      	subs	r3, #20
    3fde:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fe2:	8b9b      	ldrh	r3, [r3, #28]
    3fe4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3fe6:	88fb      	ldrh	r3, [r7, #6]
    3fe8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    3fea:	f248 0301 	movw	r3, #32769	; 0x8001
    3fee:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    3ff0:	68bb      	ldr	r3, [r7, #8]
    3ff2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ff6:	f107 0214 	add.w	r2, r7, #20
    3ffa:	4611      	mov	r1, r2
    3ffc:	4618      	mov	r0, r3
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <i2c_m_sync_read+0x4c>)
    4000:	4798      	blx	r3
    4002:	6238      	str	r0, [r7, #32]

	if (ret) {
    4004:	6a3b      	ldr	r3, [r7, #32]
    4006:	2b00      	cmp	r3, #0
    4008:	d001      	beq.n	400e <i2c_m_sync_read+0x42>
		return ret;
    400a:	6a3b      	ldr	r3, [r7, #32]
    400c:	e000      	b.n	4010 <i2c_m_sync_read+0x44>
	}

	return n;
    400e:	88fb      	ldrh	r3, [r7, #6]
}
    4010:	4618      	mov	r0, r3
    4012:	3728      	adds	r7, #40	; 0x28
    4014:	46bd      	mov	sp, r7
    4016:	bd80      	pop	{r7, pc}
    4018:	00008249 	.word	0x00008249

0000401c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    401c:	b580      	push	{r7, lr}
    401e:	b08a      	sub	sp, #40	; 0x28
    4020:	af00      	add	r7, sp, #0
    4022:	60f8      	str	r0, [r7, #12]
    4024:	60b9      	str	r1, [r7, #8]
    4026:	4613      	mov	r3, r2
    4028:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    402a:	68fb      	ldr	r3, [r7, #12]
    402c:	3b14      	subs	r3, #20
    402e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    4030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4032:	8b9b      	ldrh	r3, [r3, #28]
    4034:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    4036:	88fb      	ldrh	r3, [r7, #6]
    4038:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    403e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4040:	68bb      	ldr	r3, [r7, #8]
    4042:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    4044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4046:	f107 0214 	add.w	r2, r7, #20
    404a:	4611      	mov	r1, r2
    404c:	4618      	mov	r0, r3
    404e:	4b06      	ldr	r3, [pc, #24]	; (4068 <i2c_m_sync_write+0x4c>)
    4050:	4798      	blx	r3
    4052:	6238      	str	r0, [r7, #32]

	if (ret) {
    4054:	6a3b      	ldr	r3, [r7, #32]
    4056:	2b00      	cmp	r3, #0
    4058:	d001      	beq.n	405e <i2c_m_sync_write+0x42>
		return ret;
    405a:	6a3b      	ldr	r3, [r7, #32]
    405c:	e000      	b.n	4060 <i2c_m_sync_write+0x44>
	}

	return n;
    405e:	88fb      	ldrh	r3, [r7, #6]
}
    4060:	4618      	mov	r0, r3
    4062:	3728      	adds	r7, #40	; 0x28
    4064:	46bd      	mov	sp, r7
    4066:	bd80      	pop	{r7, pc}
    4068:	00008249 	.word	0x00008249

0000406c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    406c:	b580      	push	{r7, lr}
    406e:	b084      	sub	sp, #16
    4070:	af00      	add	r7, sp, #0
    4072:	6078      	str	r0, [r7, #4]
    4074:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	2b00      	cmp	r3, #0
    407a:	bf14      	ite	ne
    407c:	2301      	movne	r3, #1
    407e:	2300      	moveq	r3, #0
    4080:	b2db      	uxtb	r3, r3
    4082:	225e      	movs	r2, #94	; 0x5e
    4084:	490c      	ldr	r1, [pc, #48]	; (40b8 <i2c_m_sync_init+0x4c>)
    4086:	4618      	mov	r0, r3
    4088:	4b0c      	ldr	r3, [pc, #48]	; (40bc <i2c_m_sync_init+0x50>)
    408a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	6839      	ldr	r1, [r7, #0]
    4090:	4618      	mov	r0, r3
    4092:	4b0b      	ldr	r3, [pc, #44]	; (40c0 <i2c_m_sync_init+0x54>)
    4094:	4798      	blx	r3
    4096:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	2b00      	cmp	r3, #0
    409c:	d001      	beq.n	40a2 <i2c_m_sync_init+0x36>
		return init_status;
    409e:	68fb      	ldr	r3, [r7, #12]
    40a0:	e006      	b.n	40b0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	4a07      	ldr	r2, [pc, #28]	; (40c4 <i2c_m_sync_init+0x58>)
    40a6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	4a07      	ldr	r2, [pc, #28]	; (40c8 <i2c_m_sync_init+0x5c>)
    40ac:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    40ae:	2300      	movs	r3, #0
}
    40b0:	4618      	mov	r0, r3
    40b2:	3710      	adds	r7, #16
    40b4:	46bd      	mov	sp, r7
    40b6:	bd80      	pop	{r7, pc}
    40b8:	000111c8 	.word	0x000111c8
    40bc:	00005239 	.word	0x00005239
    40c0:	00007fe9 	.word	0x00007fe9
    40c4:	00003fcd 	.word	0x00003fcd
    40c8:	0000401d 	.word	0x0000401d

000040cc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b082      	sub	sp, #8
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	4618      	mov	r0, r3
    40d8:	4b03      	ldr	r3, [pc, #12]	; (40e8 <i2c_m_sync_enable+0x1c>)
    40da:	4798      	blx	r3
    40dc:	4603      	mov	r3, r0
}
    40de:	4618      	mov	r0, r3
    40e0:	3708      	adds	r7, #8
    40e2:	46bd      	mov	sp, r7
    40e4:	bd80      	pop	{r7, pc}
    40e6:	bf00      	nop
    40e8:	00008031 	.word	0x00008031

000040ec <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	4618      	mov	r0, r3
    40f8:	4b03      	ldr	r3, [pc, #12]	; (4108 <i2c_m_sync_disable+0x1c>)
    40fa:	4798      	blx	r3
    40fc:	4603      	mov	r3, r0
}
    40fe:	4618      	mov	r0, r3
    4100:	3708      	adds	r7, #8
    4102:	46bd      	mov	sp, r7
    4104:	bd80      	pop	{r7, pc}
    4106:	bf00      	nop
    4108:	00008071 	.word	0x00008071

0000410c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    410c:	b480      	push	{r7}
    410e:	b085      	sub	sp, #20
    4110:	af00      	add	r7, sp, #0
    4112:	60f8      	str	r0, [r7, #12]
    4114:	460b      	mov	r3, r1
    4116:	607a      	str	r2, [r7, #4]
    4118:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    411a:	897b      	ldrh	r3, [r7, #10]
    411c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4120:	b21a      	sxth	r2, r3
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	b21b      	sxth	r3, r3
    4126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    412a:	b21b      	sxth	r3, r3
    412c:	4313      	orrs	r3, r2
    412e:	b21b      	sxth	r3, r3
    4130:	b29a      	uxth	r2, r3
    4132:	68fb      	ldr	r3, [r7, #12]
    4134:	839a      	strh	r2, [r3, #28]
    4136:	68fb      	ldr	r3, [r7, #12]
    4138:	8b9b      	ldrh	r3, [r3, #28]
}
    413a:	4618      	mov	r0, r3
    413c:	3714      	adds	r7, #20
    413e:	46bd      	mov	sp, r7
    4140:	f85d 7b04 	ldr.w	r7, [sp], #4
    4144:	4770      	bx	lr

00004146 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    4146:	b480      	push	{r7}
    4148:	b083      	sub	sp, #12
    414a:	af00      	add	r7, sp, #0
    414c:	6078      	str	r0, [r7, #4]
    414e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	f103 0214 	add.w	r2, r3, #20
    4156:	683b      	ldr	r3, [r7, #0]
    4158:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    415a:	2300      	movs	r3, #0
}
    415c:	4618      	mov	r0, r3
    415e:	370c      	adds	r7, #12
    4160:	46bd      	mov	sp, r7
    4162:	f85d 7b04 	ldr.w	r7, [sp], #4
    4166:	4770      	bx	lr

00004168 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4168:	b580      	push	{r7, lr}
    416a:	b084      	sub	sp, #16
    416c:	af00      	add	r7, sp, #0
    416e:	60f8      	str	r0, [r7, #12]
    4170:	60b9      	str	r1, [r7, #8]
    4172:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4174:	68fb      	ldr	r3, [r7, #12]
    4176:	2b00      	cmp	r3, #0
    4178:	d004      	beq.n	4184 <pwm_init+0x1c>
    417a:	68bb      	ldr	r3, [r7, #8]
    417c:	2b00      	cmp	r3, #0
    417e:	d001      	beq.n	4184 <pwm_init+0x1c>
    4180:	2301      	movs	r3, #1
    4182:	e000      	b.n	4186 <pwm_init+0x1e>
    4184:	2300      	movs	r3, #0
    4186:	f003 0301 	and.w	r3, r3, #1
    418a:	b2db      	uxtb	r3, r3
    418c:	2233      	movs	r2, #51	; 0x33
    418e:	490a      	ldr	r1, [pc, #40]	; (41b8 <pwm_init+0x50>)
    4190:	4618      	mov	r0, r3
    4192:	4b0a      	ldr	r3, [pc, #40]	; (41bc <pwm_init+0x54>)
    4194:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	68b9      	ldr	r1, [r7, #8]
    419a:	4618      	mov	r0, r3
    419c:	4b08      	ldr	r3, [pc, #32]	; (41c0 <pwm_init+0x58>)
    419e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	4a08      	ldr	r2, [pc, #32]	; (41c4 <pwm_init+0x5c>)
    41a4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    41a6:	68fb      	ldr	r3, [r7, #12]
    41a8:	4a07      	ldr	r2, [pc, #28]	; (41c8 <pwm_init+0x60>)
    41aa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    41ac:	2300      	movs	r3, #0
}
    41ae:	4618      	mov	r0, r3
    41b0:	3710      	adds	r7, #16
    41b2:	46bd      	mov	sp, r7
    41b4:	bd80      	pop	{r7, pc}
    41b6:	bf00      	nop
    41b8:	000111e4 	.word	0x000111e4
    41bc:	00005239 	.word	0x00005239
    41c0:	00009809 	.word	0x00009809
    41c4:	000041cd 	.word	0x000041cd
    41c8:	000041f1 	.word	0x000041f1

000041cc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    41cc:	b580      	push	{r7, lr}
    41ce:	b084      	sub	sp, #16
    41d0:	af00      	add	r7, sp, #0
    41d2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    41d8:	68fb      	ldr	r3, [r7, #12]
    41da:	695b      	ldr	r3, [r3, #20]
    41dc:	2b00      	cmp	r3, #0
    41de:	d003      	beq.n	41e8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	695b      	ldr	r3, [r3, #20]
    41e4:	68f8      	ldr	r0, [r7, #12]
    41e6:	4798      	blx	r3
	}
}
    41e8:	bf00      	nop
    41ea:	3710      	adds	r7, #16
    41ec:	46bd      	mov	sp, r7
    41ee:	bd80      	pop	{r7, pc}

000041f0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    41f0:	b580      	push	{r7, lr}
    41f2:	b084      	sub	sp, #16
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	699b      	ldr	r3, [r3, #24]
    4200:	2b00      	cmp	r3, #0
    4202:	d003      	beq.n	420c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4204:	68fb      	ldr	r3, [r7, #12]
    4206:	699b      	ldr	r3, [r3, #24]
    4208:	68f8      	ldr	r0, [r7, #12]
    420a:	4798      	blx	r3
	}
}
    420c:	bf00      	nop
    420e:	3710      	adds	r7, #16
    4210:	46bd      	mov	sp, r7
    4212:	bd80      	pop	{r7, pc}

00004214 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4214:	b580      	push	{r7, lr}
    4216:	b082      	sub	sp, #8
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
    421c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	2b00      	cmp	r3, #0
    4222:	d004      	beq.n	422e <qspi_sync_init+0x1a>
    4224:	683b      	ldr	r3, [r7, #0]
    4226:	2b00      	cmp	r3, #0
    4228:	d001      	beq.n	422e <qspi_sync_init+0x1a>
    422a:	2301      	movs	r3, #1
    422c:	e000      	b.n	4230 <qspi_sync_init+0x1c>
    422e:	2300      	movs	r3, #0
    4230:	f003 0301 	and.w	r3, r3, #1
    4234:	b2db      	uxtb	r3, r3
    4236:	2231      	movs	r2, #49	; 0x31
    4238:	4906      	ldr	r1, [pc, #24]	; (4254 <qspi_sync_init+0x40>)
    423a:	4618      	mov	r0, r3
    423c:	4b06      	ldr	r3, [pc, #24]	; (4258 <qspi_sync_init+0x44>)
    423e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	6839      	ldr	r1, [r7, #0]
    4244:	4618      	mov	r0, r3
    4246:	4b05      	ldr	r3, [pc, #20]	; (425c <qspi_sync_init+0x48>)
    4248:	4798      	blx	r3
    424a:	4603      	mov	r3, r0
}
    424c:	4618      	mov	r0, r3
    424e:	3708      	adds	r7, #8
    4250:	46bd      	mov	sp, r7
    4252:	bd80      	pop	{r7, pc}
    4254:	000111fc 	.word	0x000111fc
    4258:	00005239 	.word	0x00005239
    425c:	0000715d 	.word	0x0000715d

00004260 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4260:	b580      	push	{r7, lr}
    4262:	b082      	sub	sp, #8
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	2b00      	cmp	r3, #0
    426c:	bf14      	ite	ne
    426e:	2301      	movne	r3, #1
    4270:	2300      	moveq	r3, #0
    4272:	b2db      	uxtb	r3, r3
    4274:	223f      	movs	r2, #63	; 0x3f
    4276:	4906      	ldr	r1, [pc, #24]	; (4290 <qspi_sync_enable+0x30>)
    4278:	4618      	mov	r0, r3
    427a:	4b06      	ldr	r3, [pc, #24]	; (4294 <qspi_sync_enable+0x34>)
    427c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	4618      	mov	r0, r3
    4282:	4b05      	ldr	r3, [pc, #20]	; (4298 <qspi_sync_enable+0x38>)
    4284:	4798      	blx	r3
    4286:	4603      	mov	r3, r0
}
    4288:	4618      	mov	r0, r3
    428a:	3708      	adds	r7, #8
    428c:	46bd      	mov	sp, r7
    428e:	bd80      	pop	{r7, pc}
    4290:	000111fc 	.word	0x000111fc
    4294:	00005239 	.word	0x00005239
    4298:	000071d1 	.word	0x000071d1

0000429c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    429c:	b580      	push	{r7, lr}
    429e:	b082      	sub	sp, #8
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	2b00      	cmp	r3, #0
    42a8:	bf14      	ite	ne
    42aa:	2301      	movne	r3, #1
    42ac:	2300      	moveq	r3, #0
    42ae:	b2db      	uxtb	r3, r3
    42b0:	2246      	movs	r2, #70	; 0x46
    42b2:	4906      	ldr	r1, [pc, #24]	; (42cc <qspi_sync_disable+0x30>)
    42b4:	4618      	mov	r0, r3
    42b6:	4b06      	ldr	r3, [pc, #24]	; (42d0 <qspi_sync_disable+0x34>)
    42b8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	4618      	mov	r0, r3
    42be:	4b05      	ldr	r3, [pc, #20]	; (42d4 <qspi_sync_disable+0x38>)
    42c0:	4798      	blx	r3
    42c2:	4603      	mov	r3, r0
}
    42c4:	4618      	mov	r0, r3
    42c6:	3708      	adds	r7, #8
    42c8:	46bd      	mov	sp, r7
    42ca:	bd80      	pop	{r7, pc}
    42cc:	000111fc 	.word	0x000111fc
    42d0:	00005239 	.word	0x00005239
    42d4:	000071f5 	.word	0x000071f5

000042d8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    42d8:	b580      	push	{r7, lr}
    42da:	b082      	sub	sp, #8
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
    42e0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d004      	beq.n	42f2 <qspi_sync_serial_run_command+0x1a>
    42e8:	683b      	ldr	r3, [r7, #0]
    42ea:	2b00      	cmp	r3, #0
    42ec:	d001      	beq.n	42f2 <qspi_sync_serial_run_command+0x1a>
    42ee:	2301      	movs	r3, #1
    42f0:	e000      	b.n	42f4 <qspi_sync_serial_run_command+0x1c>
    42f2:	2300      	movs	r3, #0
    42f4:	f003 0301 	and.w	r3, r3, #1
    42f8:	b2db      	uxtb	r3, r3
    42fa:	224d      	movs	r2, #77	; 0x4d
    42fc:	4906      	ldr	r1, [pc, #24]	; (4318 <qspi_sync_serial_run_command+0x40>)
    42fe:	4618      	mov	r0, r3
    4300:	4b06      	ldr	r3, [pc, #24]	; (431c <qspi_sync_serial_run_command+0x44>)
    4302:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	6839      	ldr	r1, [r7, #0]
    4308:	4618      	mov	r0, r3
    430a:	4b05      	ldr	r3, [pc, #20]	; (4320 <qspi_sync_serial_run_command+0x48>)
    430c:	4798      	blx	r3
    430e:	4603      	mov	r3, r0
}
    4310:	4618      	mov	r0, r3
    4312:	3708      	adds	r7, #8
    4314:	46bd      	mov	sp, r7
    4316:	bd80      	pop	{r7, pc}
    4318:	000111fc 	.word	0x000111fc
    431c:	00005239 	.word	0x00005239
    4320:	00007341 	.word	0x00007341

00004324 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    4324:	b580      	push	{r7, lr}
    4326:	b084      	sub	sp, #16
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
    432c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    432e:	2300      	movs	r3, #0
    4330:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	2b00      	cmp	r3, #0
    4336:	d004      	beq.n	4342 <spi_m_sync_init+0x1e>
    4338:	683b      	ldr	r3, [r7, #0]
    433a:	2b00      	cmp	r3, #0
    433c:	d001      	beq.n	4342 <spi_m_sync_init+0x1e>
    433e:	2301      	movs	r3, #1
    4340:	e000      	b.n	4344 <spi_m_sync_init+0x20>
    4342:	2300      	movs	r3, #0
    4344:	f003 0301 	and.w	r3, r3, #1
    4348:	b2db      	uxtb	r3, r3
    434a:	2240      	movs	r2, #64	; 0x40
    434c:	4910      	ldr	r1, [pc, #64]	; (4390 <spi_m_sync_init+0x6c>)
    434e:	4618      	mov	r0, r3
    4350:	4b10      	ldr	r3, [pc, #64]	; (4394 <spi_m_sync_init+0x70>)
    4352:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	683a      	ldr	r2, [r7, #0]
    4358:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	3304      	adds	r3, #4
    435e:	6839      	ldr	r1, [r7, #0]
    4360:	4618      	mov	r0, r3
    4362:	4b0d      	ldr	r3, [pc, #52]	; (4398 <spi_m_sync_init+0x74>)
    4364:	4798      	blx	r3
    4366:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	2b00      	cmp	r3, #0
    436c:	da01      	bge.n	4372 <spi_m_sync_init+0x4e>
		return rc;
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	e00a      	b.n	4388 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4378:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	4a07      	ldr	r2, [pc, #28]	; (439c <spi_m_sync_init+0x78>)
    437e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	4a07      	ldr	r2, [pc, #28]	; (43a0 <spi_m_sync_init+0x7c>)
    4384:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4386:	2300      	movs	r3, #0
}
    4388:	4618      	mov	r0, r3
    438a:	3710      	adds	r7, #16
    438c:	46bd      	mov	sp, r7
    438e:	bd80      	pop	{r7, pc}
    4390:	00011218 	.word	0x00011218
    4394:	00005239 	.word	0x00005239
    4398:	000086dd 	.word	0x000086dd
    439c:	000043a5 	.word	0x000043a5
    43a0:	000043fd 	.word	0x000043fd

000043a4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b088      	sub	sp, #32
    43a8:	af00      	add	r7, sp, #0
    43aa:	60f8      	str	r0, [r7, #12]
    43ac:	60b9      	str	r1, [r7, #8]
    43ae:	4613      	mov	r3, r2
    43b0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    43b2:	68fb      	ldr	r3, [r7, #12]
    43b4:	2b00      	cmp	r3, #0
    43b6:	bf14      	ite	ne
    43b8:	2301      	movne	r3, #1
    43ba:	2300      	moveq	r3, #0
    43bc:	b2db      	uxtb	r3, r3
    43be:	2287      	movs	r2, #135	; 0x87
    43c0:	490b      	ldr	r1, [pc, #44]	; (43f0 <_spi_m_sync_io_read+0x4c>)
    43c2:	4618      	mov	r0, r3
    43c4:	4b0b      	ldr	r3, [pc, #44]	; (43f4 <_spi_m_sync_io_read+0x50>)
    43c6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    43c8:	68fb      	ldr	r3, [r7, #12]
    43ca:	3b0c      	subs	r3, #12
    43cc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    43ce:	68bb      	ldr	r3, [r7, #8]
    43d0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    43d2:	2300      	movs	r3, #0
    43d4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    43d6:	88fb      	ldrh	r3, [r7, #6]
    43d8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    43da:	f107 0310 	add.w	r3, r7, #16
    43de:	4619      	mov	r1, r3
    43e0:	69f8      	ldr	r0, [r7, #28]
    43e2:	4b05      	ldr	r3, [pc, #20]	; (43f8 <_spi_m_sync_io_read+0x54>)
    43e4:	4798      	blx	r3
    43e6:	4603      	mov	r3, r0
}
    43e8:	4618      	mov	r0, r3
    43ea:	3720      	adds	r7, #32
    43ec:	46bd      	mov	sp, r7
    43ee:	bd80      	pop	{r7, pc}
    43f0:	00011218 	.word	0x00011218
    43f4:	00005239 	.word	0x00005239
    43f8:	00004455 	.word	0x00004455

000043fc <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    43fc:	b580      	push	{r7, lr}
    43fe:	b088      	sub	sp, #32
    4400:	af00      	add	r7, sp, #0
    4402:	60f8      	str	r0, [r7, #12]
    4404:	60b9      	str	r1, [r7, #8]
    4406:	4613      	mov	r3, r2
    4408:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	2b00      	cmp	r3, #0
    440e:	bf14      	ite	ne
    4410:	2301      	movne	r3, #1
    4412:	2300      	moveq	r3, #0
    4414:	b2db      	uxtb	r3, r3
    4416:	22a3      	movs	r2, #163	; 0xa3
    4418:	490b      	ldr	r1, [pc, #44]	; (4448 <_spi_m_sync_io_write+0x4c>)
    441a:	4618      	mov	r0, r3
    441c:	4b0b      	ldr	r3, [pc, #44]	; (444c <_spi_m_sync_io_write+0x50>)
    441e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	3b0c      	subs	r3, #12
    4424:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    4426:	2300      	movs	r3, #0
    4428:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    442a:	68bb      	ldr	r3, [r7, #8]
    442c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    442e:	88fb      	ldrh	r3, [r7, #6]
    4430:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    4432:	f107 0310 	add.w	r3, r7, #16
    4436:	4619      	mov	r1, r3
    4438:	69f8      	ldr	r0, [r7, #28]
    443a:	4b05      	ldr	r3, [pc, #20]	; (4450 <_spi_m_sync_io_write+0x54>)
    443c:	4798      	blx	r3
    443e:	4603      	mov	r3, r0
}
    4440:	4618      	mov	r0, r3
    4442:	3720      	adds	r7, #32
    4444:	46bd      	mov	sp, r7
    4446:	bd80      	pop	{r7, pc}
    4448:	00011218 	.word	0x00011218
    444c:	00005239 	.word	0x00005239
    4450:	00004455 	.word	0x00004455

00004454 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    4454:	b580      	push	{r7, lr}
    4456:	b086      	sub	sp, #24
    4458:	af00      	add	r7, sp, #0
    445a:	6078      	str	r0, [r7, #4]
    445c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	2b00      	cmp	r3, #0
    4462:	d004      	beq.n	446e <spi_m_sync_transfer+0x1a>
    4464:	683b      	ldr	r3, [r7, #0]
    4466:	2b00      	cmp	r3, #0
    4468:	d001      	beq.n	446e <spi_m_sync_transfer+0x1a>
    446a:	2301      	movs	r3, #1
    446c:	e000      	b.n	4470 <spi_m_sync_transfer+0x1c>
    446e:	2300      	movs	r3, #0
    4470:	f003 0301 	and.w	r3, r3, #1
    4474:	b2db      	uxtb	r3, r3
    4476:	22b3      	movs	r2, #179	; 0xb3
    4478:	490c      	ldr	r1, [pc, #48]	; (44ac <spi_m_sync_transfer+0x58>)
    447a:	4618      	mov	r0, r3
    447c:	4b0c      	ldr	r3, [pc, #48]	; (44b0 <spi_m_sync_transfer+0x5c>)
    447e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    4480:	683b      	ldr	r3, [r7, #0]
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	685b      	ldr	r3, [r3, #4]
    448a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    448c:	683b      	ldr	r3, [r7, #0]
    448e:	689b      	ldr	r3, [r3, #8]
    4490:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    4492:	687b      	ldr	r3, [r7, #4]
    4494:	3304      	adds	r3, #4
    4496:	f107 020c 	add.w	r2, r7, #12
    449a:	4611      	mov	r1, r2
    449c:	4618      	mov	r0, r3
    449e:	4b05      	ldr	r3, [pc, #20]	; (44b4 <spi_m_sync_transfer+0x60>)
    44a0:	4798      	blx	r3
    44a2:	4603      	mov	r3, r0
}
    44a4:	4618      	mov	r0, r3
    44a6:	3718      	adds	r7, #24
    44a8:	46bd      	mov	sp, r7
    44aa:	bd80      	pop	{r7, pc}
    44ac:	00011218 	.word	0x00011218
    44b0:	00005239 	.word	0x00005239
    44b4:	0000893d 	.word	0x0000893d

000044b8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    44b8:	b480      	push	{r7}
    44ba:	b083      	sub	sp, #12
    44bc:	af00      	add	r7, sp, #0
    44be:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	681b      	ldr	r3, [r3, #0]
}
    44c4:	4618      	mov	r0, r3
    44c6:	370c      	adds	r7, #12
    44c8:	46bd      	mov	sp, r7
    44ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ce:	4770      	bx	lr

000044d0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    44d0:	b480      	push	{r7}
    44d2:	b083      	sub	sp, #12
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	2b00      	cmp	r3, #0
    44dc:	d002      	beq.n	44e4 <list_get_next_element+0x14>
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	e000      	b.n	44e6 <list_get_next_element+0x16>
    44e4:	2300      	movs	r3, #0
}
    44e6:	4618      	mov	r0, r3
    44e8:	370c      	adds	r7, #12
    44ea:	46bd      	mov	sp, r7
    44ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f0:	4770      	bx	lr
	...

000044f4 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    44f4:	b580      	push	{r7, lr}
    44f6:	b084      	sub	sp, #16
    44f8:	af00      	add	r7, sp, #0
    44fa:	60f8      	str	r0, [r7, #12]
    44fc:	60b9      	str	r1, [r7, #8]
    44fe:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	2b00      	cmp	r3, #0
    4504:	d007      	beq.n	4516 <timer_init+0x22>
    4506:	68bb      	ldr	r3, [r7, #8]
    4508:	2b00      	cmp	r3, #0
    450a:	d004      	beq.n	4516 <timer_init+0x22>
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	2b00      	cmp	r3, #0
    4510:	d001      	beq.n	4516 <timer_init+0x22>
    4512:	2301      	movs	r3, #1
    4514:	e000      	b.n	4518 <timer_init+0x24>
    4516:	2300      	movs	r3, #0
    4518:	f003 0301 	and.w	r3, r3, #1
    451c:	b2db      	uxtb	r3, r3
    451e:	223b      	movs	r2, #59	; 0x3b
    4520:	490c      	ldr	r1, [pc, #48]	; (4554 <timer_init+0x60>)
    4522:	4618      	mov	r0, r3
    4524:	4b0c      	ldr	r3, [pc, #48]	; (4558 <timer_init+0x64>)
    4526:	4798      	blx	r3
	descr->func = func;
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	687a      	ldr	r2, [r7, #4]
    452c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	68fa      	ldr	r2, [r7, #12]
    4536:	3204      	adds	r2, #4
    4538:	68b9      	ldr	r1, [r7, #8]
    453a:	4610      	mov	r0, r2
    453c:	4798      	blx	r3
	descr->time                           = 0;
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	2200      	movs	r2, #0
    4542:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	4a05      	ldr	r2, [pc, #20]	; (455c <timer_init+0x68>)
    4548:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    454a:	2300      	movs	r3, #0
}
    454c:	4618      	mov	r0, r3
    454e:	3710      	adds	r7, #16
    4550:	46bd      	mov	sp, r7
    4552:	bd80      	pop	{r7, pc}
    4554:	00011234 	.word	0x00011234
    4558:	00005239 	.word	0x00005239
    455c:	00004879 	.word	0x00004879

00004560 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    4560:	b580      	push	{r7, lr}
    4562:	b082      	sub	sp, #8
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	2b00      	cmp	r3, #0
    456c:	d005      	beq.n	457a <timer_start+0x1a>
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d001      	beq.n	457a <timer_start+0x1a>
    4576:	2301      	movs	r3, #1
    4578:	e000      	b.n	457c <timer_start+0x1c>
    457a:	2300      	movs	r3, #0
    457c:	f003 0301 	and.w	r3, r3, #1
    4580:	b2db      	uxtb	r3, r3
    4582:	2254      	movs	r2, #84	; 0x54
    4584:	490e      	ldr	r1, [pc, #56]	; (45c0 <timer_start+0x60>)
    4586:	4618      	mov	r0, r3
    4588:	4b0e      	ldr	r3, [pc, #56]	; (45c4 <timer_start+0x64>)
    458a:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	681b      	ldr	r3, [r3, #0]
    4590:	699b      	ldr	r3, [r3, #24]
    4592:	687a      	ldr	r2, [r7, #4]
    4594:	3204      	adds	r2, #4
    4596:	4610      	mov	r0, r2
    4598:	4798      	blx	r3
    459a:	4603      	mov	r3, r0
    459c:	2b00      	cmp	r3, #0
    459e:	d002      	beq.n	45a6 <timer_start+0x46>
		return ERR_DENIED;
    45a0:	f06f 0310 	mvn.w	r3, #16
    45a4:	e007      	b.n	45b6 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	681b      	ldr	r3, [r3, #0]
    45aa:	689b      	ldr	r3, [r3, #8]
    45ac:	687a      	ldr	r2, [r7, #4]
    45ae:	3204      	adds	r2, #4
    45b0:	4610      	mov	r0, r2
    45b2:	4798      	blx	r3

	return ERR_NONE;
    45b4:	2300      	movs	r3, #0
}
    45b6:	4618      	mov	r0, r3
    45b8:	3708      	adds	r7, #8
    45ba:	46bd      	mov	sp, r7
    45bc:	bd80      	pop	{r7, pc}
    45be:	bf00      	nop
    45c0:	00011234 	.word	0x00011234
    45c4:	00005239 	.word	0x00005239

000045c8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	b084      	sub	sp, #16
    45cc:	af00      	add	r7, sp, #0
    45ce:	6078      	str	r0, [r7, #4]
    45d0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	2b00      	cmp	r3, #0
    45d6:	d008      	beq.n	45ea <timer_add_task+0x22>
    45d8:	683b      	ldr	r3, [r7, #0]
    45da:	2b00      	cmp	r3, #0
    45dc:	d005      	beq.n	45ea <timer_add_task+0x22>
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	681b      	ldr	r3, [r3, #0]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d001      	beq.n	45ea <timer_add_task+0x22>
    45e6:	2301      	movs	r3, #1
    45e8:	e000      	b.n	45ec <timer_add_task+0x24>
    45ea:	2300      	movs	r3, #0
    45ec:	f003 0301 	and.w	r3, r3, #1
    45f0:	b2db      	uxtb	r3, r3
    45f2:	227b      	movs	r2, #123	; 0x7b
    45f4:	492f      	ldr	r1, [pc, #188]	; (46b4 <timer_add_task+0xec>)
    45f6:	4618      	mov	r0, r3
    45f8:	4b2f      	ldr	r3, [pc, #188]	; (46b8 <timer_add_task+0xf0>)
    45fa:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	7f1b      	ldrb	r3, [r3, #28]
    4600:	b2db      	uxtb	r3, r3
    4602:	f043 0301 	orr.w	r3, r3, #1
    4606:	b2da      	uxtb	r2, r3
    4608:	687b      	ldr	r3, [r7, #4]
    460a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	3318      	adds	r3, #24
    4610:	6839      	ldr	r1, [r7, #0]
    4612:	4618      	mov	r0, r3
    4614:	4b29      	ldr	r3, [pc, #164]	; (46bc <timer_add_task+0xf4>)
    4616:	4798      	blx	r3
    4618:	4603      	mov	r3, r0
    461a:	2b00      	cmp	r3, #0
    461c:	d00f      	beq.n	463e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    461e:	687b      	ldr	r3, [r7, #4]
    4620:	7f1b      	ldrb	r3, [r3, #28]
    4622:	b2db      	uxtb	r3, r3
    4624:	f023 0301 	bic.w	r3, r3, #1
    4628:	b2da      	uxtb	r2, r3
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    462e:	2280      	movs	r2, #128	; 0x80
    4630:	4920      	ldr	r1, [pc, #128]	; (46b4 <timer_add_task+0xec>)
    4632:	2000      	movs	r0, #0
    4634:	4b20      	ldr	r3, [pc, #128]	; (46b8 <timer_add_task+0xf0>)
    4636:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4638:	f06f 0311 	mvn.w	r3, #17
    463c:	e035      	b.n	46aa <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	695a      	ldr	r2, [r3, #20]
    4642:	683b      	ldr	r3, [r7, #0]
    4644:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	f103 0018 	add.w	r0, r3, #24
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	695b      	ldr	r3, [r3, #20]
    4650:	461a      	mov	r2, r3
    4652:	6839      	ldr	r1, [r7, #0]
    4654:	4b1a      	ldr	r3, [pc, #104]	; (46c0 <timer_add_task+0xf8>)
    4656:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	7f1b      	ldrb	r3, [r3, #28]
    465c:	b2db      	uxtb	r3, r3
    465e:	f023 0301 	bic.w	r3, r3, #1
    4662:	b2da      	uxtb	r2, r3
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	7f1b      	ldrb	r3, [r3, #28]
    466c:	b2db      	uxtb	r3, r3
    466e:	f003 0302 	and.w	r3, r3, #2
    4672:	2b00      	cmp	r3, #0
    4674:	d018      	beq.n	46a8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    4676:	f107 030c 	add.w	r3, r7, #12
    467a:	4618      	mov	r0, r3
    467c:	4b11      	ldr	r3, [pc, #68]	; (46c4 <timer_add_task+0xfc>)
    467e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	7f1b      	ldrb	r3, [r3, #28]
    4684:	b2db      	uxtb	r3, r3
    4686:	f023 0302 	bic.w	r3, r3, #2
    468a:	b2da      	uxtb	r2, r3
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4690:	687b      	ldr	r3, [r7, #4]
    4692:	681b      	ldr	r3, [r3, #0]
    4694:	69db      	ldr	r3, [r3, #28]
    4696:	687a      	ldr	r2, [r7, #4]
    4698:	3204      	adds	r2, #4
    469a:	4610      	mov	r0, r2
    469c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    469e:	f107 030c 	add.w	r3, r7, #12
    46a2:	4618      	mov	r0, r3
    46a4:	4b08      	ldr	r3, [pc, #32]	; (46c8 <timer_add_task+0x100>)
    46a6:	4798      	blx	r3
	}

	return ERR_NONE;
    46a8:	2300      	movs	r3, #0
}
    46aa:	4618      	mov	r0, r3
    46ac:	3710      	adds	r7, #16
    46ae:	46bd      	mov	sp, r7
    46b0:	bd80      	pop	{r7, pc}
    46b2:	bf00      	nop
    46b4:	00011234 	.word	0x00011234
    46b8:	00005239 	.word	0x00005239
    46bc:	00005261 	.word	0x00005261
    46c0:	000047c9 	.word	0x000047c9
    46c4:	00003a25 	.word	0x00003a25
    46c8:	00003a4b 	.word	0x00003a4b

000046cc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    46cc:	b580      	push	{r7, lr}
    46ce:	b084      	sub	sp, #16
    46d0:	af00      	add	r7, sp, #0
    46d2:	6078      	str	r0, [r7, #4]
    46d4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	2b00      	cmp	r3, #0
    46da:	d008      	beq.n	46ee <timer_remove_task+0x22>
    46dc:	683b      	ldr	r3, [r7, #0]
    46de:	2b00      	cmp	r3, #0
    46e0:	d005      	beq.n	46ee <timer_remove_task+0x22>
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d001      	beq.n	46ee <timer_remove_task+0x22>
    46ea:	2301      	movs	r3, #1
    46ec:	e000      	b.n	46f0 <timer_remove_task+0x24>
    46ee:	2300      	movs	r3, #0
    46f0:	f003 0301 	and.w	r3, r3, #1
    46f4:	b2db      	uxtb	r3, r3
    46f6:	2296      	movs	r2, #150	; 0x96
    46f8:	492d      	ldr	r1, [pc, #180]	; (47b0 <timer_remove_task+0xe4>)
    46fa:	4618      	mov	r0, r3
    46fc:	4b2d      	ldr	r3, [pc, #180]	; (47b4 <timer_remove_task+0xe8>)
    46fe:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	7f1b      	ldrb	r3, [r3, #28]
    4704:	b2db      	uxtb	r3, r3
    4706:	f043 0301 	orr.w	r3, r3, #1
    470a:	b2da      	uxtb	r2, r3
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    4710:	687b      	ldr	r3, [r7, #4]
    4712:	3318      	adds	r3, #24
    4714:	6839      	ldr	r1, [r7, #0]
    4716:	4618      	mov	r0, r3
    4718:	4b27      	ldr	r3, [pc, #156]	; (47b8 <timer_remove_task+0xec>)
    471a:	4798      	blx	r3
    471c:	4603      	mov	r3, r0
    471e:	f083 0301 	eor.w	r3, r3, #1
    4722:	b2db      	uxtb	r3, r3
    4724:	2b00      	cmp	r3, #0
    4726:	d00f      	beq.n	4748 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	7f1b      	ldrb	r3, [r3, #28]
    472c:	b2db      	uxtb	r3, r3
    472e:	f023 0301 	bic.w	r3, r3, #1
    4732:	b2da      	uxtb	r2, r3
    4734:	687b      	ldr	r3, [r7, #4]
    4736:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4738:	229b      	movs	r2, #155	; 0x9b
    473a:	491d      	ldr	r1, [pc, #116]	; (47b0 <timer_remove_task+0xe4>)
    473c:	2000      	movs	r0, #0
    473e:	4b1d      	ldr	r3, [pc, #116]	; (47b4 <timer_remove_task+0xe8>)
    4740:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4742:	f06f 0309 	mvn.w	r3, #9
    4746:	e02e      	b.n	47a6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	3318      	adds	r3, #24
    474c:	6839      	ldr	r1, [r7, #0]
    474e:	4618      	mov	r0, r3
    4750:	4b1a      	ldr	r3, [pc, #104]	; (47bc <timer_remove_task+0xf0>)
    4752:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	7f1b      	ldrb	r3, [r3, #28]
    4758:	b2db      	uxtb	r3, r3
    475a:	f023 0301 	bic.w	r3, r3, #1
    475e:	b2da      	uxtb	r2, r3
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	7f1b      	ldrb	r3, [r3, #28]
    4768:	b2db      	uxtb	r3, r3
    476a:	f003 0302 	and.w	r3, r3, #2
    476e:	2b00      	cmp	r3, #0
    4770:	d018      	beq.n	47a4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    4772:	f107 030c 	add.w	r3, r7, #12
    4776:	4618      	mov	r0, r3
    4778:	4b11      	ldr	r3, [pc, #68]	; (47c0 <timer_remove_task+0xf4>)
    477a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	7f1b      	ldrb	r3, [r3, #28]
    4780:	b2db      	uxtb	r3, r3
    4782:	f023 0302 	bic.w	r3, r3, #2
    4786:	b2da      	uxtb	r2, r3
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	681b      	ldr	r3, [r3, #0]
    4790:	69db      	ldr	r3, [r3, #28]
    4792:	687a      	ldr	r2, [r7, #4]
    4794:	3204      	adds	r2, #4
    4796:	4610      	mov	r0, r2
    4798:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    479a:	f107 030c 	add.w	r3, r7, #12
    479e:	4618      	mov	r0, r3
    47a0:	4b08      	ldr	r3, [pc, #32]	; (47c4 <timer_remove_task+0xf8>)
    47a2:	4798      	blx	r3
	}

	return ERR_NONE;
    47a4:	2300      	movs	r3, #0
}
    47a6:	4618      	mov	r0, r3
    47a8:	3710      	adds	r7, #16
    47aa:	46bd      	mov	sp, r7
    47ac:	bd80      	pop	{r7, pc}
    47ae:	bf00      	nop
    47b0:	00011234 	.word	0x00011234
    47b4:	00005239 	.word	0x00005239
    47b8:	00005261 	.word	0x00005261
    47bc:	000053c3 	.word	0x000053c3
    47c0:	00003a25 	.word	0x00003a25
    47c4:	00003a4b 	.word	0x00003a4b

000047c8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b088      	sub	sp, #32
    47cc:	af00      	add	r7, sp, #0
    47ce:	60f8      	str	r0, [r7, #12]
    47d0:	60b9      	str	r1, [r7, #8]
    47d2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    47d4:	2300      	movs	r3, #0
    47d6:	61bb      	str	r3, [r7, #24]
    47d8:	68f8      	ldr	r0, [r7, #12]
    47da:	4b23      	ldr	r3, [pc, #140]	; (4868 <timer_add_timer_task+0xa0>)
    47dc:	4798      	blx	r3
    47de:	6138      	str	r0, [r7, #16]

	if (!head) {
    47e0:	693b      	ldr	r3, [r7, #16]
    47e2:	2b00      	cmp	r3, #0
    47e4:	d104      	bne.n	47f0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    47e6:	68b9      	ldr	r1, [r7, #8]
    47e8:	68f8      	ldr	r0, [r7, #12]
    47ea:	4b20      	ldr	r3, [pc, #128]	; (486c <timer_add_timer_task+0xa4>)
    47ec:	4798      	blx	r3
		return;
    47ee:	e037      	b.n	4860 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    47f0:	693b      	ldr	r3, [r7, #16]
    47f2:	61fb      	str	r3, [r7, #28]
    47f4:	e022      	b.n	483c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    47f6:	69fb      	ldr	r3, [r7, #28]
    47f8:	685a      	ldr	r2, [r3, #4]
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	429a      	cmp	r2, r3
    47fe:	d808      	bhi.n	4812 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4800:	69fb      	ldr	r3, [r7, #28]
    4802:	689a      	ldr	r2, [r3, #8]
    4804:	69fb      	ldr	r3, [r7, #28]
    4806:	6859      	ldr	r1, [r3, #4]
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	1acb      	subs	r3, r1, r3
    480c:	4413      	add	r3, r2
    480e:	617b      	str	r3, [r7, #20]
    4810:	e009      	b.n	4826 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4812:	69fb      	ldr	r3, [r7, #28]
    4814:	689a      	ldr	r2, [r3, #8]
    4816:	69fb      	ldr	r3, [r7, #28]
    4818:	685b      	ldr	r3, [r3, #4]
    481a:	441a      	add	r2, r3
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	425b      	negs	r3, r3
    4820:	4413      	add	r3, r2
    4822:	3301      	adds	r3, #1
    4824:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    4826:	68bb      	ldr	r3, [r7, #8]
    4828:	689a      	ldr	r2, [r3, #8]
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	429a      	cmp	r2, r3
    482e:	d909      	bls.n	4844 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4830:	69fb      	ldr	r3, [r7, #28]
    4832:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4834:	69f8      	ldr	r0, [r7, #28]
    4836:	4b0e      	ldr	r3, [pc, #56]	; (4870 <timer_add_timer_task+0xa8>)
    4838:	4798      	blx	r3
    483a:	61f8      	str	r0, [r7, #28]
    483c:	69fb      	ldr	r3, [r7, #28]
    483e:	2b00      	cmp	r3, #0
    4840:	d1d9      	bne.n	47f6 <timer_add_timer_task+0x2e>
    4842:	e000      	b.n	4846 <timer_add_timer_task+0x7e>
			break;
    4844:	bf00      	nop
	}

	if (it == head) {
    4846:	69fa      	ldr	r2, [r7, #28]
    4848:	693b      	ldr	r3, [r7, #16]
    484a:	429a      	cmp	r2, r3
    484c:	d104      	bne.n	4858 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    484e:	68b9      	ldr	r1, [r7, #8]
    4850:	68f8      	ldr	r0, [r7, #12]
    4852:	4b06      	ldr	r3, [pc, #24]	; (486c <timer_add_timer_task+0xa4>)
    4854:	4798      	blx	r3
    4856:	e003      	b.n	4860 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4858:	68b9      	ldr	r1, [r7, #8]
    485a:	69b8      	ldr	r0, [r7, #24]
    485c:	4b05      	ldr	r3, [pc, #20]	; (4874 <timer_add_timer_task+0xac>)
    485e:	4798      	blx	r3
	}
}
    4860:	3720      	adds	r7, #32
    4862:	46bd      	mov	sp, r7
    4864:	bd80      	pop	{r7, pc}
    4866:	bf00      	nop
    4868:	000044b9 	.word	0x000044b9
    486c:	00005299 	.word	0x00005299
    4870:	000044d1 	.word	0x000044d1
    4874:	000052f1 	.word	0x000052f1

00004878 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4878:	b580      	push	{r7, lr}
    487a:	b086      	sub	sp, #24
    487c:	af00      	add	r7, sp, #0
    487e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	3b04      	subs	r3, #4
    4884:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    4886:	693b      	ldr	r3, [r7, #16]
    4888:	3318      	adds	r3, #24
    488a:	4618      	mov	r0, r3
    488c:	4b27      	ldr	r3, [pc, #156]	; (492c <timer_process_counted+0xb4>)
    488e:	4798      	blx	r3
    4890:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    4892:	693b      	ldr	r3, [r7, #16]
    4894:	695b      	ldr	r3, [r3, #20]
    4896:	1c5a      	adds	r2, r3, #1
    4898:	693b      	ldr	r3, [r7, #16]
    489a:	615a      	str	r2, [r3, #20]
    489c:	693b      	ldr	r3, [r7, #16]
    489e:	695b      	ldr	r3, [r3, #20]
    48a0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    48a2:	693b      	ldr	r3, [r7, #16]
    48a4:	7f1b      	ldrb	r3, [r3, #28]
    48a6:	b2db      	uxtb	r3, r3
    48a8:	f003 0301 	and.w	r3, r3, #1
    48ac:	2b00      	cmp	r3, #0
    48ae:	d106      	bne.n	48be <timer_process_counted+0x46>
    48b0:	693b      	ldr	r3, [r7, #16]
    48b2:	7f1b      	ldrb	r3, [r3, #28]
    48b4:	b2db      	uxtb	r3, r3
    48b6:	f003 0302 	and.w	r3, r3, #2
    48ba:	2b00      	cmp	r3, #0
    48bc:	d027      	beq.n	490e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    48be:	693b      	ldr	r3, [r7, #16]
    48c0:	7f1b      	ldrb	r3, [r3, #28]
    48c2:	b2db      	uxtb	r3, r3
    48c4:	f043 0302 	orr.w	r3, r3, #2
    48c8:	b2da      	uxtb	r2, r3
    48ca:	693b      	ldr	r3, [r7, #16]
    48cc:	771a      	strb	r2, [r3, #28]
		return;
    48ce:	e029      	b.n	4924 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    48d0:	697b      	ldr	r3, [r7, #20]
    48d2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    48d4:	693b      	ldr	r3, [r7, #16]
    48d6:	3318      	adds	r3, #24
    48d8:	4618      	mov	r0, r3
    48da:	4b15      	ldr	r3, [pc, #84]	; (4930 <timer_process_counted+0xb8>)
    48dc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    48de:	68bb      	ldr	r3, [r7, #8]
    48e0:	7c1b      	ldrb	r3, [r3, #16]
    48e2:	2b01      	cmp	r3, #1
    48e4:	d109      	bne.n	48fa <timer_process_counted+0x82>
			tmp->time_label = time;
    48e6:	68bb      	ldr	r3, [r7, #8]
    48e8:	68fa      	ldr	r2, [r7, #12]
    48ea:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    48ec:	693b      	ldr	r3, [r7, #16]
    48ee:	3318      	adds	r3, #24
    48f0:	68fa      	ldr	r2, [r7, #12]
    48f2:	68b9      	ldr	r1, [r7, #8]
    48f4:	4618      	mov	r0, r3
    48f6:	4b0f      	ldr	r3, [pc, #60]	; (4934 <timer_process_counted+0xbc>)
    48f8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    48fa:	693b      	ldr	r3, [r7, #16]
    48fc:	3318      	adds	r3, #24
    48fe:	4618      	mov	r0, r3
    4900:	4b0a      	ldr	r3, [pc, #40]	; (492c <timer_process_counted+0xb4>)
    4902:	4798      	blx	r3
    4904:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    4906:	68bb      	ldr	r3, [r7, #8]
    4908:	68db      	ldr	r3, [r3, #12]
    490a:	68b8      	ldr	r0, [r7, #8]
    490c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	2b00      	cmp	r3, #0
    4912:	d007      	beq.n	4924 <timer_process_counted+0xac>
    4914:	697b      	ldr	r3, [r7, #20]
    4916:	685b      	ldr	r3, [r3, #4]
    4918:	68fa      	ldr	r2, [r7, #12]
    491a:	1ad2      	subs	r2, r2, r3
    491c:	697b      	ldr	r3, [r7, #20]
    491e:	689b      	ldr	r3, [r3, #8]
    4920:	429a      	cmp	r2, r3
    4922:	d2d5      	bcs.n	48d0 <timer_process_counted+0x58>
	}
}
    4924:	3718      	adds	r7, #24
    4926:	46bd      	mov	sp, r7
    4928:	bd80      	pop	{r7, pc}
    492a:	bf00      	nop
    492c:	000044b9 	.word	0x000044b9
    4930:	00005391 	.word	0x00005391
    4934:	000047c9 	.word	0x000047c9

00004938 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4938:	b480      	push	{r7}
    493a:	b085      	sub	sp, #20
    493c:	af00      	add	r7, sp, #0
    493e:	4603      	mov	r3, r0
    4940:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4942:	2300      	movs	r3, #0
    4944:	73fb      	strb	r3, [r7, #15]
    4946:	e029      	b.n	499c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4948:	f997 300f 	ldrsb.w	r3, [r7, #15]
    494c:	4a19      	ldr	r2, [pc, #100]	; (49b4 <_usb_d_find_ep+0x7c>)
    494e:	015b      	lsls	r3, r3, #5
    4950:	4413      	add	r3, r2
    4952:	3301      	adds	r3, #1
    4954:	781b      	ldrb	r3, [r3, #0]
    4956:	79fa      	ldrb	r2, [r7, #7]
    4958:	429a      	cmp	r2, r3
    495a:	d102      	bne.n	4962 <_usb_d_find_ep+0x2a>
			return i;
    495c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4960:	e022      	b.n	49a8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4962:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4966:	4a13      	ldr	r2, [pc, #76]	; (49b4 <_usb_d_find_ep+0x7c>)
    4968:	015b      	lsls	r3, r3, #5
    496a:	4413      	add	r3, r2
    496c:	781b      	ldrb	r3, [r3, #0]
    496e:	2b00      	cmp	r3, #0
    4970:	d10e      	bne.n	4990 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4972:	79fb      	ldrb	r3, [r7, #7]
    4974:	f003 030f 	and.w	r3, r3, #15
    4978:	f997 200f 	ldrsb.w	r2, [r7, #15]
    497c:	490d      	ldr	r1, [pc, #52]	; (49b4 <_usb_d_find_ep+0x7c>)
    497e:	0152      	lsls	r2, r2, #5
    4980:	440a      	add	r2, r1
    4982:	3201      	adds	r2, #1
    4984:	7812      	ldrb	r2, [r2, #0]
    4986:	4293      	cmp	r3, r2
    4988:	d102      	bne.n	4990 <_usb_d_find_ep+0x58>
			return i;
    498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    498e:	e00b      	b.n	49a8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4990:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4994:	b2db      	uxtb	r3, r3
    4996:	3301      	adds	r3, #1
    4998:	b2db      	uxtb	r3, r3
    499a:	73fb      	strb	r3, [r7, #15]
    499c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    49a0:	2b03      	cmp	r3, #3
    49a2:	ddd1      	ble.n	4948 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    49a4:	f04f 33ff 	mov.w	r3, #4294967295
}
    49a8:	4618      	mov	r0, r3
    49aa:	3714      	adds	r7, #20
    49ac:	46bd      	mov	sp, r7
    49ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b2:	4770      	bx	lr
    49b4:	20000cf8 	.word	0x20000cf8

000049b8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	b088      	sub	sp, #32
    49bc:	af00      	add	r7, sp, #0
    49be:	60ba      	str	r2, [r7, #8]
    49c0:	607b      	str	r3, [r7, #4]
    49c2:	4603      	mov	r3, r0
    49c4:	73fb      	strb	r3, [r7, #15]
    49c6:	460b      	mov	r3, r1
    49c8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    49ca:	68bb      	ldr	r3, [r7, #8]
    49cc:	617b      	str	r3, [r7, #20]
    49ce:	687b      	ldr	r3, [r7, #4]
    49d0:	61bb      	str	r3, [r7, #24]
    49d2:	7bbb      	ldrb	r3, [r7, #14]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d004      	beq.n	49e2 <_usb_d_trans+0x2a>
    49d8:	7bfb      	ldrb	r3, [r7, #15]
    49da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    49de:	b2db      	uxtb	r3, r3
    49e0:	e003      	b.n	49ea <_usb_d_trans+0x32>
    49e2:	7bfb      	ldrb	r3, [r7, #15]
    49e4:	f003 030f 	and.w	r3, r3, #15
    49e8:	b2db      	uxtb	r3, r3
    49ea:	773b      	strb	r3, [r7, #28]
    49ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    49f0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    49f2:	f107 0314 	add.w	r3, r7, #20
    49f6:	4618      	mov	r0, r3
    49f8:	4b03      	ldr	r3, [pc, #12]	; (4a08 <_usb_d_trans+0x50>)
    49fa:	4798      	blx	r3
    49fc:	4603      	mov	r3, r0
}
    49fe:	4618      	mov	r0, r3
    4a00:	3720      	adds	r7, #32
    4a02:	46bd      	mov	sp, r7
    4a04:	bd80      	pop	{r7, pc}
    4a06:	bf00      	nop
    4a08:	0000c34d 	.word	0x0000c34d

00004a0c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    4a0c:	b480      	push	{r7}
    4a0e:	b085      	sub	sp, #20
    4a10:	af00      	add	r7, sp, #0
    4a12:	60f8      	str	r0, [r7, #12]
    4a14:	60b9      	str	r1, [r7, #8]
    4a16:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4a18:	2300      	movs	r3, #0
}
    4a1a:	4618      	mov	r0, r3
    4a1c:	3714      	adds	r7, #20
    4a1e:	46bd      	mov	sp, r7
    4a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a24:	4770      	bx	lr
	...

00004a28 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b086      	sub	sp, #24
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	4603      	mov	r3, r0
    4a30:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4a32:	79fb      	ldrb	r3, [r7, #7]
    4a34:	4618      	mov	r0, r3
    4a36:	4b2a      	ldr	r3, [pc, #168]	; (4ae0 <usb_d_cb_trans_setup+0xb8>)
    4a38:	4798      	blx	r3
    4a3a:	4603      	mov	r3, r0
    4a3c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4a42:	015b      	lsls	r3, r3, #5
    4a44:	4a27      	ldr	r2, [pc, #156]	; (4ae4 <usb_d_cb_trans_setup+0xbc>)
    4a46:	4413      	add	r3, r2
    4a48:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    4a4a:	693b      	ldr	r3, [r7, #16]
    4a4c:	330c      	adds	r3, #12
    4a4e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4a50:	79fb      	ldrb	r3, [r7, #7]
    4a52:	68f9      	ldr	r1, [r7, #12]
    4a54:	4618      	mov	r0, r3
    4a56:	4b24      	ldr	r3, [pc, #144]	; (4ae8 <usb_d_cb_trans_setup+0xc0>)
    4a58:	4798      	blx	r3
    4a5a:	4603      	mov	r3, r0
    4a5c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4a5e:	7afb      	ldrb	r3, [r7, #11]
    4a60:	2b08      	cmp	r3, #8
    4a62:	d00d      	beq.n	4a80 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4a64:	79fb      	ldrb	r3, [r7, #7]
    4a66:	2101      	movs	r1, #1
    4a68:	4618      	mov	r0, r3
    4a6a:	4b20      	ldr	r3, [pc, #128]	; (4aec <usb_d_cb_trans_setup+0xc4>)
    4a6c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4a6e:	79fb      	ldrb	r3, [r7, #7]
    4a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a74:	b2db      	uxtb	r3, r3
    4a76:	2101      	movs	r1, #1
    4a78:	4618      	mov	r0, r3
    4a7a:	4b1c      	ldr	r3, [pc, #112]	; (4aec <usb_d_cb_trans_setup+0xc4>)
    4a7c:	4798      	blx	r3
		return;
    4a7e:	e02b      	b.n	4ad8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4a80:	79fb      	ldrb	r3, [r7, #7]
    4a82:	2100      	movs	r1, #0
    4a84:	4618      	mov	r0, r3
    4a86:	4b19      	ldr	r3, [pc, #100]	; (4aec <usb_d_cb_trans_setup+0xc4>)
    4a88:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4a8a:	79fb      	ldrb	r3, [r7, #7]
    4a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a90:	b2db      	uxtb	r3, r3
    4a92:	2100      	movs	r1, #0
    4a94:	4618      	mov	r0, r3
    4a96:	4b15      	ldr	r3, [pc, #84]	; (4aec <usb_d_cb_trans_setup+0xc4>)
    4a98:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4a9a:	693b      	ldr	r3, [r7, #16]
    4a9c:	2201      	movs	r2, #1
    4a9e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4aa0:	693b      	ldr	r3, [r7, #16]
    4aa2:	695b      	ldr	r3, [r3, #20]
    4aa4:	79fa      	ldrb	r2, [r7, #7]
    4aa6:	68f9      	ldr	r1, [r7, #12]
    4aa8:	4610      	mov	r0, r2
    4aaa:	4798      	blx	r3
    4aac:	4603      	mov	r3, r0
    4aae:	f083 0301 	eor.w	r3, r3, #1
    4ab2:	b2db      	uxtb	r3, r3
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d00f      	beq.n	4ad8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4ab8:	693b      	ldr	r3, [r7, #16]
    4aba:	2205      	movs	r2, #5
    4abc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4abe:	79fb      	ldrb	r3, [r7, #7]
    4ac0:	2101      	movs	r1, #1
    4ac2:	4618      	mov	r0, r3
    4ac4:	4b09      	ldr	r3, [pc, #36]	; (4aec <usb_d_cb_trans_setup+0xc4>)
    4ac6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4ac8:	79fb      	ldrb	r3, [r7, #7]
    4aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	2101      	movs	r1, #1
    4ad2:	4618      	mov	r0, r3
    4ad4:	4b05      	ldr	r3, [pc, #20]	; (4aec <usb_d_cb_trans_setup+0xc4>)
    4ad6:	4798      	blx	r3
	}
}
    4ad8:	3718      	adds	r7, #24
    4ada:	46bd      	mov	sp, r7
    4adc:	bd80      	pop	{r7, pc}
    4ade:	bf00      	nop
    4ae0:	00004939 	.word	0x00004939
    4ae4:	20000cf8 	.word	0x20000cf8
    4ae8:	0000c2a5 	.word	0x0000c2a5
    4aec:	0000c11d 	.word	0x0000c11d

00004af0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4af0:	b580      	push	{r7, lr}
    4af2:	b084      	sub	sp, #16
    4af4:	af00      	add	r7, sp, #0
    4af6:	4603      	mov	r3, r0
    4af8:	6039      	str	r1, [r7, #0]
    4afa:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4afc:	79fb      	ldrb	r3, [r7, #7]
    4afe:	4618      	mov	r0, r3
    4b00:	4b0d      	ldr	r3, [pc, #52]	; (4b38 <usb_d_cb_trans_more+0x48>)
    4b02:	4798      	blx	r3
    4b04:	4603      	mov	r3, r0
    4b06:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b0c:	015b      	lsls	r3, r3, #5
    4b0e:	4a0b      	ldr	r2, [pc, #44]	; (4b3c <usb_d_cb_trans_more+0x4c>)
    4b10:	4413      	add	r3, r2
    4b12:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4b14:	68bb      	ldr	r3, [r7, #8]
    4b16:	789b      	ldrb	r3, [r3, #2]
    4b18:	2b03      	cmp	r3, #3
    4b1a:	d107      	bne.n	4b2c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    4b1c:	68bb      	ldr	r3, [r7, #8]
    4b1e:	699b      	ldr	r3, [r3, #24]
    4b20:	79fa      	ldrb	r2, [r7, #7]
    4b22:	6839      	ldr	r1, [r7, #0]
    4b24:	4610      	mov	r0, r2
    4b26:	4798      	blx	r3
    4b28:	4603      	mov	r3, r0
    4b2a:	e000      	b.n	4b2e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    4b2c:	2300      	movs	r3, #0
}
    4b2e:	4618      	mov	r0, r3
    4b30:	3710      	adds	r7, #16
    4b32:	46bd      	mov	sp, r7
    4b34:	bd80      	pop	{r7, pc}
    4b36:	bf00      	nop
    4b38:	00004939 	.word	0x00004939
    4b3c:	20000cf8 	.word	0x20000cf8

00004b40 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4b40:	b590      	push	{r4, r7, lr}
    4b42:	b087      	sub	sp, #28
    4b44:	af02      	add	r7, sp, #8
    4b46:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	789b      	ldrb	r3, [r3, #2]
    4b4c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	7b1b      	ldrb	r3, [r3, #12]
    4b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4b56:	2b00      	cmp	r3, #0
    4b58:	bf14      	ite	ne
    4b5a:	2301      	movne	r3, #1
    4b5c:	2300      	moveq	r3, #0
    4b5e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4b60:	7bfb      	ldrb	r3, [r7, #15]
    4b62:	2b03      	cmp	r3, #3
    4b64:	d13a      	bne.n	4bdc <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	69db      	ldr	r3, [r3, #28]
    4b6a:	687a      	ldr	r2, [r7, #4]
    4b6c:	7850      	ldrb	r0, [r2, #1]
    4b6e:	687a      	ldr	r2, [r7, #4]
    4b70:	320c      	adds	r2, #12
    4b72:	2101      	movs	r1, #1
    4b74:	4798      	blx	r3
    4b76:	4603      	mov	r3, r0
    4b78:	737b      	strb	r3, [r7, #13]
		if (err) {
    4b7a:	7b7b      	ldrb	r3, [r7, #13]
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d015      	beq.n	4bac <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	2205      	movs	r2, #5
    4b84:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	2202      	movs	r2, #2
    4b8a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4b8c:	7bbb      	ldrb	r3, [r7, #14]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d002      	beq.n	4b98 <usb_d_ctrl_trans_done+0x58>
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	785b      	ldrb	r3, [r3, #1]
    4b96:	e004      	b.n	4ba2 <usb_d_ctrl_trans_done+0x62>
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	785b      	ldrb	r3, [r3, #1]
    4b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ba0:	b2db      	uxtb	r3, r3
    4ba2:	2101      	movs	r1, #1
    4ba4:	4618      	mov	r0, r3
    4ba6:	4b15      	ldr	r3, [pc, #84]	; (4bfc <usb_d_ctrl_trans_done+0xbc>)
    4ba8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    4baa:	e022      	b.n	4bf2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	2204      	movs	r2, #4
    4bb0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4bb2:	687b      	ldr	r3, [r7, #4]
    4bb4:	7858      	ldrb	r0, [r3, #1]
    4bb6:	7bbb      	ldrb	r3, [r7, #14]
    4bb8:	2b00      	cmp	r3, #0
    4bba:	bf14      	ite	ne
    4bbc:	2301      	movne	r3, #1
    4bbe:	2300      	moveq	r3, #0
    4bc0:	b2db      	uxtb	r3, r3
    4bc2:	f083 0301 	eor.w	r3, r3, #1
    4bc6:	b2db      	uxtb	r3, r3
    4bc8:	f003 0301 	and.w	r3, r3, #1
    4bcc:	b2d9      	uxtb	r1, r3
    4bce:	2301      	movs	r3, #1
    4bd0:	9300      	str	r3, [sp, #0]
    4bd2:	2300      	movs	r3, #0
    4bd4:	2200      	movs	r2, #0
    4bd6:	4c0a      	ldr	r4, [pc, #40]	; (4c00 <usb_d_ctrl_trans_done+0xc0>)
    4bd8:	47a0      	blx	r4
}
    4bda:	e00a      	b.n	4bf2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4bdc:	687b      	ldr	r3, [r7, #4]
    4bde:	69db      	ldr	r3, [r3, #28]
    4be0:	687a      	ldr	r2, [r7, #4]
    4be2:	7850      	ldrb	r0, [r2, #1]
    4be4:	687a      	ldr	r2, [r7, #4]
    4be6:	320c      	adds	r2, #12
    4be8:	2100      	movs	r1, #0
    4bea:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	2202      	movs	r2, #2
    4bf0:	709a      	strb	r2, [r3, #2]
}
    4bf2:	bf00      	nop
    4bf4:	3714      	adds	r7, #20
    4bf6:	46bd      	mov	sp, r7
    4bf8:	bd90      	pop	{r4, r7, pc}
    4bfa:	bf00      	nop
    4bfc:	0000c11d 	.word	0x0000c11d
    4c00:	000049b9 	.word	0x000049b9

00004c04 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4c04:	b580      	push	{r7, lr}
    4c06:	b086      	sub	sp, #24
    4c08:	af00      	add	r7, sp, #0
    4c0a:	4603      	mov	r3, r0
    4c0c:	60b9      	str	r1, [r7, #8]
    4c0e:	607a      	str	r2, [r7, #4]
    4c10:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4c12:	7bfb      	ldrb	r3, [r7, #15]
    4c14:	4618      	mov	r0, r3
    4c16:	4b2f      	ldr	r3, [pc, #188]	; (4cd4 <_usb_d_cb_trans_done+0xd0>)
    4c18:	4798      	blx	r3
    4c1a:	4603      	mov	r3, r0
    4c1c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4c22:	015b      	lsls	r3, r3, #5
    4c24:	4a2c      	ldr	r2, [pc, #176]	; (4cd8 <_usb_d_cb_trans_done+0xd4>)
    4c26:	4413      	add	r3, r2
    4c28:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    4c2a:	68bb      	ldr	r3, [r7, #8]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d10e      	bne.n	4c4e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4c30:	693b      	ldr	r3, [r7, #16]
    4c32:	2200      	movs	r2, #0
    4c34:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4c36:	693b      	ldr	r3, [r7, #16]
    4c38:	781b      	ldrb	r3, [r3, #0]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d103      	bne.n	4c46 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    4c3e:	6938      	ldr	r0, [r7, #16]
    4c40:	4b26      	ldr	r3, [pc, #152]	; (4cdc <_usb_d_cb_trans_done+0xd8>)
    4c42:	4798      	blx	r3
			return;
    4c44:	e043      	b.n	4cce <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4c46:	693b      	ldr	r3, [r7, #16]
    4c48:	2201      	movs	r2, #1
    4c4a:	709a      	strb	r2, [r3, #2]
    4c4c:	e038      	b.n	4cc0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    4c4e:	68bb      	ldr	r3, [r7, #8]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d113      	bne.n	4c7c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4c54:	693b      	ldr	r3, [r7, #16]
    4c56:	2202      	movs	r2, #2
    4c58:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4c5a:	693b      	ldr	r3, [r7, #16]
    4c5c:	781b      	ldrb	r3, [r3, #0]
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d108      	bne.n	4c74 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4c62:	693b      	ldr	r3, [r7, #16]
    4c64:	2202      	movs	r2, #2
    4c66:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4c68:	7bfb      	ldrb	r3, [r7, #15]
    4c6a:	2100      	movs	r1, #0
    4c6c:	4618      	mov	r0, r3
    4c6e:	4b1c      	ldr	r3, [pc, #112]	; (4ce0 <_usb_d_cb_trans_done+0xdc>)
    4c70:	4798      	blx	r3
    4c72:	e025      	b.n	4cc0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4c74:	693b      	ldr	r3, [r7, #16]
    4c76:	2205      	movs	r2, #5
    4c78:	709a      	strb	r2, [r3, #2]
    4c7a:	e021      	b.n	4cc0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4c7c:	68bb      	ldr	r3, [r7, #8]
    4c7e:	2b02      	cmp	r3, #2
    4c80:	d10e      	bne.n	4ca0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4c82:	693b      	ldr	r3, [r7, #16]
    4c84:	2204      	movs	r2, #4
    4c86:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4c88:	693b      	ldr	r3, [r7, #16]
    4c8a:	781b      	ldrb	r3, [r3, #0]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d103      	bne.n	4c98 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4c90:	693b      	ldr	r3, [r7, #16]
    4c92:	2202      	movs	r2, #2
    4c94:	709a      	strb	r2, [r3, #2]
			return;
    4c96:	e01a      	b.n	4cce <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4c98:	693b      	ldr	r3, [r7, #16]
    4c9a:	2201      	movs	r2, #1
    4c9c:	709a      	strb	r2, [r3, #2]
    4c9e:	e00f      	b.n	4cc0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    4ca0:	68bb      	ldr	r3, [r7, #8]
    4ca2:	2b03      	cmp	r3, #3
    4ca4:	d106      	bne.n	4cb4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4ca6:	693b      	ldr	r3, [r7, #16]
    4ca8:	2200      	movs	r2, #0
    4caa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4cac:	693b      	ldr	r3, [r7, #16]
    4cae:	2205      	movs	r2, #5
    4cb0:	70da      	strb	r2, [r3, #3]
    4cb2:	e005      	b.n	4cc0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4cb4:	693b      	ldr	r3, [r7, #16]
    4cb6:	2206      	movs	r2, #6
    4cb8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4cba:	693b      	ldr	r3, [r7, #16]
    4cbc:	2206      	movs	r2, #6
    4cbe:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4cc0:	693b      	ldr	r3, [r7, #16]
    4cc2:	69db      	ldr	r3, [r3, #28]
    4cc4:	693a      	ldr	r2, [r7, #16]
    4cc6:	78d1      	ldrb	r1, [r2, #3]
    4cc8:	687a      	ldr	r2, [r7, #4]
    4cca:	7bf8      	ldrb	r0, [r7, #15]
    4ccc:	4798      	blx	r3
}
    4cce:	3718      	adds	r7, #24
    4cd0:	46bd      	mov	sp, r7
    4cd2:	bd80      	pop	{r7, pc}
    4cd4:	00004939 	.word	0x00004939
    4cd8:	20000cf8 	.word	0x20000cf8
    4cdc:	00004b41 	.word	0x00004b41
    4ce0:	0000c11d 	.word	0x0000c11d

00004ce4 <usb_d_init>:

int32_t usb_d_init(void)
{
    4ce4:	b580      	push	{r7, lr}
    4ce6:	b082      	sub	sp, #8
    4ce8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    4cea:	4b21      	ldr	r3, [pc, #132]	; (4d70 <usb_d_init+0x8c>)
    4cec:	4798      	blx	r3
    4cee:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    4cf0:	683b      	ldr	r3, [r7, #0]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	da01      	bge.n	4cfa <usb_d_init+0x16>
		return rc;
    4cf6:	683b      	ldr	r3, [r7, #0]
    4cf8:	e036      	b.n	4d68 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4cfa:	2280      	movs	r2, #128	; 0x80
    4cfc:	2100      	movs	r1, #0
    4cfe:	481d      	ldr	r0, [pc, #116]	; (4d74 <usb_d_init+0x90>)
    4d00:	4b1d      	ldr	r3, [pc, #116]	; (4d78 <usb_d_init+0x94>)
    4d02:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4d04:	2300      	movs	r3, #0
    4d06:	71fb      	strb	r3, [r7, #7]
    4d08:	e01e      	b.n	4d48 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4d0a:	79fb      	ldrb	r3, [r7, #7]
    4d0c:	4a19      	ldr	r2, [pc, #100]	; (4d74 <usb_d_init+0x90>)
    4d0e:	015b      	lsls	r3, r3, #5
    4d10:	4413      	add	r3, r2
    4d12:	3301      	adds	r3, #1
    4d14:	22ff      	movs	r2, #255	; 0xff
    4d16:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4d18:	79fb      	ldrb	r3, [r7, #7]
    4d1a:	4a16      	ldr	r2, [pc, #88]	; (4d74 <usb_d_init+0x90>)
    4d1c:	015b      	lsls	r3, r3, #5
    4d1e:	4413      	add	r3, r2
    4d20:	3314      	adds	r3, #20
    4d22:	4a16      	ldr	r2, [pc, #88]	; (4d7c <usb_d_init+0x98>)
    4d24:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4d26:	79fb      	ldrb	r3, [r7, #7]
    4d28:	4a12      	ldr	r2, [pc, #72]	; (4d74 <usb_d_init+0x90>)
    4d2a:	015b      	lsls	r3, r3, #5
    4d2c:	4413      	add	r3, r2
    4d2e:	3318      	adds	r3, #24
    4d30:	4a12      	ldr	r2, [pc, #72]	; (4d7c <usb_d_init+0x98>)
    4d32:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4d34:	79fb      	ldrb	r3, [r7, #7]
    4d36:	4a0f      	ldr	r2, [pc, #60]	; (4d74 <usb_d_init+0x90>)
    4d38:	015b      	lsls	r3, r3, #5
    4d3a:	4413      	add	r3, r2
    4d3c:	331c      	adds	r3, #28
    4d3e:	4a0f      	ldr	r2, [pc, #60]	; (4d7c <usb_d_init+0x98>)
    4d40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4d42:	79fb      	ldrb	r3, [r7, #7]
    4d44:	3301      	adds	r3, #1
    4d46:	71fb      	strb	r3, [r7, #7]
    4d48:	79fb      	ldrb	r3, [r7, #7]
    4d4a:	2b03      	cmp	r3, #3
    4d4c:	d9dd      	bls.n	4d0a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4d4e:	490c      	ldr	r1, [pc, #48]	; (4d80 <usb_d_init+0x9c>)
    4d50:	2000      	movs	r0, #0
    4d52:	4b0c      	ldr	r3, [pc, #48]	; (4d84 <usb_d_init+0xa0>)
    4d54:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4d56:	490c      	ldr	r1, [pc, #48]	; (4d88 <usb_d_init+0xa4>)
    4d58:	2001      	movs	r0, #1
    4d5a:	4b0a      	ldr	r3, [pc, #40]	; (4d84 <usb_d_init+0xa0>)
    4d5c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4d5e:	490b      	ldr	r1, [pc, #44]	; (4d8c <usb_d_init+0xa8>)
    4d60:	2002      	movs	r0, #2
    4d62:	4b08      	ldr	r3, [pc, #32]	; (4d84 <usb_d_init+0xa0>)
    4d64:	4798      	blx	r3
	return ERR_NONE;
    4d66:	2300      	movs	r3, #0
}
    4d68:	4618      	mov	r0, r3
    4d6a:	3708      	adds	r7, #8
    4d6c:	46bd      	mov	sp, r7
    4d6e:	bd80      	pop	{r7, pc}
    4d70:	0000b965 	.word	0x0000b965
    4d74:	20000cf8 	.word	0x20000cf8
    4d78:	00010e5d 	.word	0x00010e5d
    4d7c:	00004a0d 	.word	0x00004a0d
    4d80:	00004a29 	.word	0x00004a29
    4d84:	0000c559 	.word	0x0000c559
    4d88:	00004af1 	.word	0x00004af1
    4d8c:	00004c05 	.word	0x00004c05

00004d90 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4d90:	b580      	push	{r7, lr}
    4d92:	b082      	sub	sp, #8
    4d94:	af00      	add	r7, sp, #0
    4d96:	4603      	mov	r3, r0
    4d98:	6039      	str	r1, [r7, #0]
    4d9a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4d9c:	79fb      	ldrb	r3, [r7, #7]
    4d9e:	6839      	ldr	r1, [r7, #0]
    4da0:	4618      	mov	r0, r3
    4da2:	4b03      	ldr	r3, [pc, #12]	; (4db0 <usb_d_register_callback+0x20>)
    4da4:	4798      	blx	r3
}
    4da6:	bf00      	nop
    4da8:	3708      	adds	r7, #8
    4daa:	46bd      	mov	sp, r7
    4dac:	bd80      	pop	{r7, pc}
    4dae:	bf00      	nop
    4db0:	0000c511 	.word	0x0000c511

00004db4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    4db4:	b580      	push	{r7, lr}
    4db6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    4db8:	4b02      	ldr	r3, [pc, #8]	; (4dc4 <usb_d_enable+0x10>)
    4dba:	4798      	blx	r3
    4dbc:	4603      	mov	r3, r0
}
    4dbe:	4618      	mov	r0, r3
    4dc0:	bd80      	pop	{r7, pc}
    4dc2:	bf00      	nop
    4dc4:	0000ba55 	.word	0x0000ba55

00004dc8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4dc8:	b580      	push	{r7, lr}
    4dca:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    4dcc:	4b01      	ldr	r3, [pc, #4]	; (4dd4 <usb_d_attach+0xc>)
    4dce:	4798      	blx	r3
}
    4dd0:	bf00      	nop
    4dd2:	bd80      	pop	{r7, pc}
    4dd4:	0000bad9 	.word	0x0000bad9

00004dd8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b082      	sub	sp, #8
    4ddc:	af00      	add	r7, sp, #0
    4dde:	4603      	mov	r3, r0
    4de0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    4de2:	79fb      	ldrb	r3, [r7, #7]
    4de4:	4618      	mov	r0, r3
    4de6:	4b03      	ldr	r3, [pc, #12]	; (4df4 <usb_d_set_address+0x1c>)
    4de8:	4798      	blx	r3
}
    4dea:	bf00      	nop
    4dec:	3708      	adds	r7, #8
    4dee:	46bd      	mov	sp, r7
    4df0:	bd80      	pop	{r7, pc}
    4df2:	bf00      	nop
    4df4:	0000baed 	.word	0x0000baed

00004df8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    4df8:	b580      	push	{r7, lr}
    4dfa:	b082      	sub	sp, #8
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	4603      	mov	r3, r0
    4e00:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    4e02:	79fb      	ldrb	r3, [r7, #7]
    4e04:	b29b      	uxth	r3, r3
    4e06:	461a      	mov	r2, r3
    4e08:	2100      	movs	r1, #0
    4e0a:	2000      	movs	r0, #0
    4e0c:	4b03      	ldr	r3, [pc, #12]	; (4e1c <usb_d_ep0_init+0x24>)
    4e0e:	4798      	blx	r3
    4e10:	4603      	mov	r3, r0
}
    4e12:	4618      	mov	r0, r3
    4e14:	3708      	adds	r7, #8
    4e16:	46bd      	mov	sp, r7
    4e18:	bd80      	pop	{r7, pc}
    4e1a:	bf00      	nop
    4e1c:	00004e21 	.word	0x00004e21

00004e20 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4e20:	b580      	push	{r7, lr}
    4e22:	b086      	sub	sp, #24
    4e24:	af00      	add	r7, sp, #0
    4e26:	4603      	mov	r3, r0
    4e28:	71fb      	strb	r3, [r7, #7]
    4e2a:	460b      	mov	r3, r1
    4e2c:	71bb      	strb	r3, [r7, #6]
    4e2e:	4613      	mov	r3, r2
    4e30:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4e32:	79fb      	ldrb	r3, [r7, #7]
    4e34:	4618      	mov	r0, r3
    4e36:	4b1e      	ldr	r3, [pc, #120]	; (4eb0 <usb_d_ep_init+0x90>)
    4e38:	4798      	blx	r3
    4e3a:	4603      	mov	r3, r0
    4e3c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4e42:	015b      	lsls	r3, r3, #5
    4e44:	4a1b      	ldr	r2, [pc, #108]	; (4eb4 <usb_d_ep_init+0x94>)
    4e46:	4413      	add	r3, r2
    4e48:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    4e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4e4e:	2b00      	cmp	r3, #0
    4e50:	db02      	blt.n	4e58 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    4e52:	f06f 0313 	mvn.w	r3, #19
    4e56:	e027      	b.n	4ea8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4e58:	20ff      	movs	r0, #255	; 0xff
    4e5a:	4b15      	ldr	r3, [pc, #84]	; (4eb0 <usb_d_ep_init+0x90>)
    4e5c:	4798      	blx	r3
    4e5e:	4603      	mov	r3, r0
    4e60:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    4e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4e66:	2b00      	cmp	r3, #0
    4e68:	da02      	bge.n	4e70 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    4e6a:	f06f 0314 	mvn.w	r3, #20
    4e6e:	e01b      	b.n	4ea8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    4e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4e74:	015b      	lsls	r3, r3, #5
    4e76:	4a0f      	ldr	r2, [pc, #60]	; (4eb4 <usb_d_ep_init+0x94>)
    4e78:	4413      	add	r3, r2
    4e7a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4e7c:	88ba      	ldrh	r2, [r7, #4]
    4e7e:	79b9      	ldrb	r1, [r7, #6]
    4e80:	79fb      	ldrb	r3, [r7, #7]
    4e82:	4618      	mov	r0, r3
    4e84:	4b0c      	ldr	r3, [pc, #48]	; (4eb8 <usb_d_ep_init+0x98>)
    4e86:	4798      	blx	r3
    4e88:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4e8a:	68fb      	ldr	r3, [r7, #12]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	da01      	bge.n	4e94 <usb_d_ep_init+0x74>
		return rc;
    4e90:	68fb      	ldr	r3, [r7, #12]
    4e92:	e009      	b.n	4ea8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    4e94:	693b      	ldr	r3, [r7, #16]
    4e96:	79fa      	ldrb	r2, [r7, #7]
    4e98:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4e9a:	79bb      	ldrb	r3, [r7, #6]
    4e9c:	f003 0303 	and.w	r3, r3, #3
    4ea0:	b2da      	uxtb	r2, r3
    4ea2:	693b      	ldr	r3, [r7, #16]
    4ea4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    4ea6:	2300      	movs	r3, #0
}
    4ea8:	4618      	mov	r0, r3
    4eaa:	3718      	adds	r7, #24
    4eac:	46bd      	mov	sp, r7
    4eae:	bd80      	pop	{r7, pc}
    4eb0:	00004939 	.word	0x00004939
    4eb4:	20000cf8 	.word	0x20000cf8
    4eb8:	0000bb8d 	.word	0x0000bb8d

00004ebc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    4ebc:	b580      	push	{r7, lr}
    4ebe:	b084      	sub	sp, #16
    4ec0:	af00      	add	r7, sp, #0
    4ec2:	4603      	mov	r3, r0
    4ec4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4ec6:	79fb      	ldrb	r3, [r7, #7]
    4ec8:	4618      	mov	r0, r3
    4eca:	4b0d      	ldr	r3, [pc, #52]	; (4f00 <usb_d_ep_deinit+0x44>)
    4ecc:	4798      	blx	r3
    4ece:	4603      	mov	r3, r0
    4ed0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ed6:	015b      	lsls	r3, r3, #5
    4ed8:	4a0a      	ldr	r2, [pc, #40]	; (4f04 <usb_d_ep_deinit+0x48>)
    4eda:	4413      	add	r3, r2
    4edc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	db07      	blt.n	4ef6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    4ee6:	79fb      	ldrb	r3, [r7, #7]
    4ee8:	4618      	mov	r0, r3
    4eea:	4b07      	ldr	r3, [pc, #28]	; (4f08 <usb_d_ep_deinit+0x4c>)
    4eec:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    4eee:	68bb      	ldr	r3, [r7, #8]
    4ef0:	22ff      	movs	r2, #255	; 0xff
    4ef2:	705a      	strb	r2, [r3, #1]
    4ef4:	e000      	b.n	4ef8 <usb_d_ep_deinit+0x3c>
		return;
    4ef6:	bf00      	nop
}
    4ef8:	3710      	adds	r7, #16
    4efa:	46bd      	mov	sp, r7
    4efc:	bd80      	pop	{r7, pc}
    4efe:	bf00      	nop
    4f00:	00004939 	.word	0x00004939
    4f04:	20000cf8 	.word	0x20000cf8
    4f08:	0000bcc1 	.word	0x0000bcc1

00004f0c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    4f0c:	b580      	push	{r7, lr}
    4f0e:	b086      	sub	sp, #24
    4f10:	af00      	add	r7, sp, #0
    4f12:	4603      	mov	r3, r0
    4f14:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4f16:	79fb      	ldrb	r3, [r7, #7]
    4f18:	4618      	mov	r0, r3
    4f1a:	4b15      	ldr	r3, [pc, #84]	; (4f70 <usb_d_ep_enable+0x64>)
    4f1c:	4798      	blx	r3
    4f1e:	4603      	mov	r3, r0
    4f20:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4f26:	015b      	lsls	r3, r3, #5
    4f28:	4a12      	ldr	r2, [pc, #72]	; (4f74 <usb_d_ep_enable+0x68>)
    4f2a:	4413      	add	r3, r2
    4f2c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4f32:	2b00      	cmp	r3, #0
    4f34:	da02      	bge.n	4f3c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    4f36:	f06f 0311 	mvn.w	r3, #17
    4f3a:	e014      	b.n	4f66 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	781b      	ldrb	r3, [r3, #0]
    4f40:	2b00      	cmp	r3, #0
    4f42:	d101      	bne.n	4f48 <usb_d_ep_enable+0x3c>
    4f44:	2202      	movs	r2, #2
    4f46:	e000      	b.n	4f4a <usb_d_ep_enable+0x3e>
    4f48:	2201      	movs	r2, #1
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    4f4e:	79fb      	ldrb	r3, [r7, #7]
    4f50:	4618      	mov	r0, r3
    4f52:	4b09      	ldr	r3, [pc, #36]	; (4f78 <usb_d_ep_enable+0x6c>)
    4f54:	4798      	blx	r3
    4f56:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4f58:	68fb      	ldr	r3, [r7, #12]
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	da02      	bge.n	4f64 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    4f5e:	693b      	ldr	r3, [r7, #16]
    4f60:	2200      	movs	r2, #0
    4f62:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    4f64:	68fb      	ldr	r3, [r7, #12]
}
    4f66:	4618      	mov	r0, r3
    4f68:	3718      	adds	r7, #24
    4f6a:	46bd      	mov	sp, r7
    4f6c:	bd80      	pop	{r7, pc}
    4f6e:	bf00      	nop
    4f70:	00004939 	.word	0x00004939
    4f74:	20000cf8 	.word	0x20000cf8
    4f78:	0000bda5 	.word	0x0000bda5

00004f7c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    4f7c:	b590      	push	{r4, r7, lr}
    4f7e:	b08d      	sub	sp, #52	; 0x34
    4f80:	af02      	add	r7, sp, #8
    4f82:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	7a1b      	ldrb	r3, [r3, #8]
    4f88:	4618      	mov	r0, r3
    4f8a:	4b51      	ldr	r3, [pc, #324]	; (50d0 <usb_d_ep_transfer+0x154>)
    4f8c:	4798      	blx	r3
    4f8e:	4603      	mov	r3, r0
    4f90:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    4f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4f96:	015b      	lsls	r3, r3, #5
    4f98:	4a4e      	ldr	r2, [pc, #312]	; (50d4 <usb_d_ep_transfer+0x158>)
    4f9a:	4413      	add	r3, r2
    4f9c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	7a1b      	ldrb	r3, [r3, #8]
    4fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	bf14      	ite	ne
    4faa:	2301      	movne	r3, #1
    4fac:	2300      	moveq	r3, #0
    4fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	7a5b      	ldrb	r3, [r3, #9]
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	bf14      	ite	ne
    4fba:	2301      	movne	r3, #1
    4fbc:	2300      	moveq	r3, #0
    4fbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    4fc2:	687b      	ldr	r3, [r7, #4]
    4fc4:	685b      	ldr	r3, [r3, #4]
    4fc6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    4fc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	da02      	bge.n	4fd6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    4fd0:	f06f 0311 	mvn.w	r3, #17
    4fd4:	e077      	b.n	50c6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    4fd6:	f107 0308 	add.w	r3, r7, #8
    4fda:	4618      	mov	r0, r3
    4fdc:	4b3e      	ldr	r3, [pc, #248]	; (50d8 <usb_d_ep_transfer+0x15c>)
    4fde:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    4fe0:	69bb      	ldr	r3, [r7, #24]
    4fe2:	789b      	ldrb	r3, [r3, #2]
    4fe4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    4fe6:	7bfb      	ldrb	r3, [r7, #15]
    4fe8:	b2db      	uxtb	r3, r3
    4fea:	2b01      	cmp	r3, #1
    4fec:	d10c      	bne.n	5008 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    4fee:	69bb      	ldr	r3, [r7, #24]
    4ff0:	2203      	movs	r2, #3
    4ff2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    4ff4:	f107 0308 	add.w	r3, r7, #8
    4ff8:	4618      	mov	r0, r3
    4ffa:	4b38      	ldr	r3, [pc, #224]	; (50dc <usb_d_ep_transfer+0x160>)
    4ffc:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4ffe:	69bb      	ldr	r3, [r7, #24]
    5000:	781b      	ldrb	r3, [r3, #0]
    5002:	2b00      	cmp	r3, #0
    5004:	d151      	bne.n	50aa <usb_d_ep_transfer+0x12e>
    5006:	e017      	b.n	5038 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5008:	f107 0308 	add.w	r3, r7, #8
    500c:	4618      	mov	r0, r3
    500e:	4b33      	ldr	r3, [pc, #204]	; (50dc <usb_d_ep_transfer+0x160>)
    5010:	4798      	blx	r3
		switch (state) {
    5012:	7bfb      	ldrb	r3, [r7, #15]
    5014:	b2db      	uxtb	r3, r3
    5016:	2b05      	cmp	r3, #5
    5018:	d004      	beq.n	5024 <usb_d_ep_transfer+0xa8>
    501a:	2b06      	cmp	r3, #6
    501c:	d004      	beq.n	5028 <usb_d_ep_transfer+0xac>
    501e:	2b00      	cmp	r3, #0
    5020:	d005      	beq.n	502e <usb_d_ep_transfer+0xb2>
    5022:	e007      	b.n	5034 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    5024:	2302      	movs	r3, #2
    5026:	e04e      	b.n	50c6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5028:	f06f 030f 	mvn.w	r3, #15
    502c:	e04b      	b.n	50c6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    502e:	f06f 0312 	mvn.w	r3, #18
    5032:	e048      	b.n	50c6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    5034:	2301      	movs	r3, #1
    5036:	e046      	b.n	50c6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5038:	69bb      	ldr	r3, [r7, #24]
    503a:	7c9b      	ldrb	r3, [r3, #18]
    503c:	b29a      	uxth	r2, r3
    503e:	69bb      	ldr	r3, [r7, #24]
    5040:	7cdb      	ldrb	r3, [r3, #19]
    5042:	b29b      	uxth	r3, r3
    5044:	021b      	lsls	r3, r3, #8
    5046:	b29b      	uxth	r3, r3
    5048:	4413      	add	r3, r2
    504a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    504c:	8afb      	ldrh	r3, [r7, #22]
    504e:	2b00      	cmp	r3, #0
    5050:	d10b      	bne.n	506a <usb_d_ep_transfer+0xee>
			dir                 = true;
    5052:	2301      	movs	r3, #1
    5054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    5058:	2300      	movs	r3, #0
    505a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    505c:	2301      	movs	r3, #1
    505e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5062:	69bb      	ldr	r3, [r7, #24]
    5064:	2204      	movs	r2, #4
    5066:	709a      	strb	r2, [r3, #2]
    5068:	e01f      	b.n	50aa <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    506a:	69bb      	ldr	r3, [r7, #24]
    506c:	7b1b      	ldrb	r3, [r3, #12]
    506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5072:	2b00      	cmp	r3, #0
    5074:	bf14      	ite	ne
    5076:	2301      	movne	r3, #1
    5078:	2300      	moveq	r3, #0
    507a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    507e:	8afa      	ldrh	r2, [r7, #22]
    5080:	6a3b      	ldr	r3, [r7, #32]
    5082:	429a      	cmp	r2, r3
    5084:	d201      	bcs.n	508a <usb_d_ep_transfer+0x10e>
				len = req_len;
    5086:	8afb      	ldrh	r3, [r7, #22]
    5088:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    508a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    508e:	2b00      	cmp	r3, #0
    5090:	d008      	beq.n	50a4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    5092:	8afa      	ldrh	r2, [r7, #22]
    5094:	6a3b      	ldr	r3, [r7, #32]
    5096:	429a      	cmp	r2, r3
    5098:	bf8c      	ite	hi
    509a:	2301      	movhi	r3, #1
    509c:	2300      	movls	r3, #0
    509e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    50a2:	e002      	b.n	50aa <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    50a4:	2300      	movs	r3, #0
    50a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	7a18      	ldrb	r0, [r3, #8]
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	681a      	ldr	r2, [r3, #0]
    50b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    50b6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    50ba:	9300      	str	r3, [sp, #0]
    50bc:	6a3b      	ldr	r3, [r7, #32]
    50be:	4c08      	ldr	r4, [pc, #32]	; (50e0 <usb_d_ep_transfer+0x164>)
    50c0:	47a0      	blx	r4
    50c2:	6138      	str	r0, [r7, #16]
	return rc;
    50c4:	693b      	ldr	r3, [r7, #16]
}
    50c6:	4618      	mov	r0, r3
    50c8:	372c      	adds	r7, #44	; 0x2c
    50ca:	46bd      	mov	sp, r7
    50cc:	bd90      	pop	{r4, r7, pc}
    50ce:	bf00      	nop
    50d0:	00004939 	.word	0x00004939
    50d4:	20000cf8 	.word	0x20000cf8
    50d8:	00003a25 	.word	0x00003a25
    50dc:	00003a4b 	.word	0x00003a4b
    50e0:	000049b9 	.word	0x000049b9

000050e4 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    50e4:	b580      	push	{r7, lr}
    50e6:	b086      	sub	sp, #24
    50e8:	af00      	add	r7, sp, #0
    50ea:	4603      	mov	r3, r0
    50ec:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    50ee:	79fb      	ldrb	r3, [r7, #7]
    50f0:	4618      	mov	r0, r3
    50f2:	4b1a      	ldr	r3, [pc, #104]	; (515c <_usb_d_ep_halt_clr+0x78>)
    50f4:	4798      	blx	r3
    50f6:	4603      	mov	r3, r0
    50f8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    50fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    50fe:	015b      	lsls	r3, r3, #5
    5100:	4a17      	ldr	r2, [pc, #92]	; (5160 <_usb_d_ep_halt_clr+0x7c>)
    5102:	4413      	add	r3, r2
    5104:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5106:	f997 3017 	ldrsb.w	r3, [r7, #23]
    510a:	2b00      	cmp	r3, #0
    510c:	da02      	bge.n	5114 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    510e:	f06f 0311 	mvn.w	r3, #17
    5112:	e01f      	b.n	5154 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5114:	79fb      	ldrb	r3, [r7, #7]
    5116:	2102      	movs	r1, #2
    5118:	4618      	mov	r0, r3
    511a:	4b12      	ldr	r3, [pc, #72]	; (5164 <_usb_d_ep_halt_clr+0x80>)
    511c:	4798      	blx	r3
    511e:	4603      	mov	r3, r0
    5120:	2b00      	cmp	r3, #0
    5122:	d016      	beq.n	5152 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5124:	79fb      	ldrb	r3, [r7, #7]
    5126:	2100      	movs	r1, #0
    5128:	4618      	mov	r0, r3
    512a:	4b0e      	ldr	r3, [pc, #56]	; (5164 <_usb_d_ep_halt_clr+0x80>)
    512c:	4798      	blx	r3
    512e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    5130:	68fb      	ldr	r3, [r7, #12]
    5132:	2b00      	cmp	r3, #0
    5134:	da01      	bge.n	513a <_usb_d_ep_halt_clr+0x56>
			return rc;
    5136:	68fb      	ldr	r3, [r7, #12]
    5138:	e00c      	b.n	5154 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    513a:	693b      	ldr	r3, [r7, #16]
    513c:	2201      	movs	r2, #1
    513e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5140:	693b      	ldr	r3, [r7, #16]
    5142:	2203      	movs	r2, #3
    5144:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5146:	693b      	ldr	r3, [r7, #16]
    5148:	69db      	ldr	r3, [r3, #28]
    514a:	79f8      	ldrb	r0, [r7, #7]
    514c:	2200      	movs	r2, #0
    514e:	2103      	movs	r1, #3
    5150:	4798      	blx	r3
	}
	return ERR_NONE;
    5152:	2300      	movs	r3, #0
}
    5154:	4618      	mov	r0, r3
    5156:	3718      	adds	r7, #24
    5158:	46bd      	mov	sp, r7
    515a:	bd80      	pop	{r7, pc}
    515c:	00004939 	.word	0x00004939
    5160:	20000cf8 	.word	0x20000cf8
    5164:	0000c11d 	.word	0x0000c11d

00005168 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5168:	b580      	push	{r7, lr}
    516a:	b082      	sub	sp, #8
    516c:	af00      	add	r7, sp, #0
    516e:	4603      	mov	r3, r0
    5170:	460a      	mov	r2, r1
    5172:	71fb      	strb	r3, [r7, #7]
    5174:	4613      	mov	r3, r2
    5176:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    5178:	79bb      	ldrb	r3, [r7, #6]
    517a:	2b00      	cmp	r3, #0
    517c:	d105      	bne.n	518a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    517e:	79fb      	ldrb	r3, [r7, #7]
    5180:	4618      	mov	r0, r3
    5182:	4b0c      	ldr	r3, [pc, #48]	; (51b4 <usb_d_ep_halt+0x4c>)
    5184:	4798      	blx	r3
    5186:	4603      	mov	r3, r0
    5188:	e00f      	b.n	51aa <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    518a:	79bb      	ldrb	r3, [r7, #6]
    518c:	2b01      	cmp	r3, #1
    518e:	d106      	bne.n	519e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5190:	79fb      	ldrb	r3, [r7, #7]
    5192:	2101      	movs	r1, #1
    5194:	4618      	mov	r0, r3
    5196:	4b08      	ldr	r3, [pc, #32]	; (51b8 <usb_d_ep_halt+0x50>)
    5198:	4798      	blx	r3
    519a:	4603      	mov	r3, r0
    519c:	e005      	b.n	51aa <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    519e:	79fb      	ldrb	r3, [r7, #7]
    51a0:	2102      	movs	r1, #2
    51a2:	4618      	mov	r0, r3
    51a4:	4b04      	ldr	r3, [pc, #16]	; (51b8 <usb_d_ep_halt+0x50>)
    51a6:	4798      	blx	r3
    51a8:	4603      	mov	r3, r0
	}
}
    51aa:	4618      	mov	r0, r3
    51ac:	3708      	adds	r7, #8
    51ae:	46bd      	mov	sp, r7
    51b0:	bd80      	pop	{r7, pc}
    51b2:	bf00      	nop
    51b4:	000050e5 	.word	0x000050e5
    51b8:	0000c11d 	.word	0x0000c11d

000051bc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    51bc:	b580      	push	{r7, lr}
    51be:	b086      	sub	sp, #24
    51c0:	af00      	add	r7, sp, #0
    51c2:	4603      	mov	r3, r0
    51c4:	603a      	str	r2, [r7, #0]
    51c6:	71fb      	strb	r3, [r7, #7]
    51c8:	460b      	mov	r3, r1
    51ca:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    51cc:	79fb      	ldrb	r3, [r7, #7]
    51ce:	4618      	mov	r0, r3
    51d0:	4b16      	ldr	r3, [pc, #88]	; (522c <usb_d_ep_register_callback+0x70>)
    51d2:	4798      	blx	r3
    51d4:	4603      	mov	r3, r0
    51d6:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    51d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    51dc:	015b      	lsls	r3, r3, #5
    51de:	4a14      	ldr	r2, [pc, #80]	; (5230 <usb_d_ep_register_callback+0x74>)
    51e0:	4413      	add	r3, r2
    51e2:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    51e4:	683b      	ldr	r3, [r7, #0]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d001      	beq.n	51ee <usb_d_ep_register_callback+0x32>
    51ea:	683b      	ldr	r3, [r7, #0]
    51ec:	e000      	b.n	51f0 <usb_d_ep_register_callback+0x34>
    51ee:	4b11      	ldr	r3, [pc, #68]	; (5234 <usb_d_ep_register_callback+0x78>)
    51f0:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    51f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    51f6:	2b00      	cmp	r3, #0
    51f8:	db13      	blt.n	5222 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    51fa:	79bb      	ldrb	r3, [r7, #6]
    51fc:	2b01      	cmp	r3, #1
    51fe:	d008      	beq.n	5212 <usb_d_ep_register_callback+0x56>
    5200:	2b02      	cmp	r3, #2
    5202:	d00a      	beq.n	521a <usb_d_ep_register_callback+0x5e>
    5204:	2b00      	cmp	r3, #0
    5206:	d000      	beq.n	520a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    5208:	e00c      	b.n	5224 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    520a:	693b      	ldr	r3, [r7, #16]
    520c:	68fa      	ldr	r2, [r7, #12]
    520e:	615a      	str	r2, [r3, #20]
		break;
    5210:	e008      	b.n	5224 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5212:	693b      	ldr	r3, [r7, #16]
    5214:	68fa      	ldr	r2, [r7, #12]
    5216:	619a      	str	r2, [r3, #24]
		break;
    5218:	e004      	b.n	5224 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    521a:	693b      	ldr	r3, [r7, #16]
    521c:	68fa      	ldr	r2, [r7, #12]
    521e:	61da      	str	r2, [r3, #28]
		break;
    5220:	e000      	b.n	5224 <usb_d_ep_register_callback+0x68>
		return;
    5222:	bf00      	nop
	}
}
    5224:	3718      	adds	r7, #24
    5226:	46bd      	mov	sp, r7
    5228:	bd80      	pop	{r7, pc}
    522a:	bf00      	nop
    522c:	00004939 	.word	0x00004939
    5230:	20000cf8 	.word	0x20000cf8
    5234:	00004a0d 	.word	0x00004a0d

00005238 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    5238:	b480      	push	{r7}
    523a:	b085      	sub	sp, #20
    523c:	af00      	add	r7, sp, #0
    523e:	4603      	mov	r3, r0
    5240:	60b9      	str	r1, [r7, #8]
    5242:	607a      	str	r2, [r7, #4]
    5244:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    5246:	7bfb      	ldrb	r3, [r7, #15]
    5248:	f083 0301 	eor.w	r3, r3, #1
    524c:	b2db      	uxtb	r3, r3
    524e:	2b00      	cmp	r3, #0
    5250:	d000      	beq.n	5254 <assert+0x1c>
		__asm("BKPT #0");
    5252:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    5254:	bf00      	nop
    5256:	3714      	adds	r7, #20
    5258:	46bd      	mov	sp, r7
    525a:	f85d 7b04 	ldr.w	r7, [sp], #4
    525e:	4770      	bx	lr

00005260 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    5260:	b480      	push	{r7}
    5262:	b085      	sub	sp, #20
    5264:	af00      	add	r7, sp, #0
    5266:	6078      	str	r0, [r7, #4]
    5268:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	60fb      	str	r3, [r7, #12]
    5270:	e008      	b.n	5284 <is_list_element+0x24>
		if (it == element) {
    5272:	68fa      	ldr	r2, [r7, #12]
    5274:	683b      	ldr	r3, [r7, #0]
    5276:	429a      	cmp	r2, r3
    5278:	d101      	bne.n	527e <is_list_element+0x1e>
			return true;
    527a:	2301      	movs	r3, #1
    527c:	e006      	b.n	528c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    527e:	68fb      	ldr	r3, [r7, #12]
    5280:	681b      	ldr	r3, [r3, #0]
    5282:	60fb      	str	r3, [r7, #12]
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	2b00      	cmp	r3, #0
    5288:	d1f3      	bne.n	5272 <is_list_element+0x12>
		}
	}

	return false;
    528a:	2300      	movs	r3, #0
}
    528c:	4618      	mov	r0, r3
    528e:	3714      	adds	r7, #20
    5290:	46bd      	mov	sp, r7
    5292:	f85d 7b04 	ldr.w	r7, [sp], #4
    5296:	4770      	bx	lr

00005298 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5298:	b580      	push	{r7, lr}
    529a:	b082      	sub	sp, #8
    529c:	af00      	add	r7, sp, #0
    529e:	6078      	str	r0, [r7, #4]
    52a0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    52a2:	6839      	ldr	r1, [r7, #0]
    52a4:	6878      	ldr	r0, [r7, #4]
    52a6:	4b0f      	ldr	r3, [pc, #60]	; (52e4 <list_insert_as_head+0x4c>)
    52a8:	4798      	blx	r3
    52aa:	4603      	mov	r3, r0
    52ac:	2b00      	cmp	r3, #0
    52ae:	bf14      	ite	ne
    52b0:	2301      	movne	r3, #1
    52b2:	2300      	moveq	r3, #0
    52b4:	b2db      	uxtb	r3, r3
    52b6:	f083 0301 	eor.w	r3, r3, #1
    52ba:	b2db      	uxtb	r3, r3
    52bc:	f003 0301 	and.w	r3, r3, #1
    52c0:	b2db      	uxtb	r3, r3
    52c2:	2239      	movs	r2, #57	; 0x39
    52c4:	4908      	ldr	r1, [pc, #32]	; (52e8 <list_insert_as_head+0x50>)
    52c6:	4618      	mov	r0, r3
    52c8:	4b08      	ldr	r3, [pc, #32]	; (52ec <list_insert_as_head+0x54>)
    52ca:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    52cc:	687b      	ldr	r3, [r7, #4]
    52ce:	681a      	ldr	r2, [r3, #0]
    52d0:	683b      	ldr	r3, [r7, #0]
    52d2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	683a      	ldr	r2, [r7, #0]
    52d8:	601a      	str	r2, [r3, #0]
}
    52da:	bf00      	nop
    52dc:	3708      	adds	r7, #8
    52de:	46bd      	mov	sp, r7
    52e0:	bd80      	pop	{r7, pc}
    52e2:	bf00      	nop
    52e4:	00005261 	.word	0x00005261
    52e8:	0001124c 	.word	0x0001124c
    52ec:	00005239 	.word	0x00005239

000052f0 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    52f0:	b480      	push	{r7}
    52f2:	b083      	sub	sp, #12
    52f4:	af00      	add	r7, sp, #0
    52f6:	6078      	str	r0, [r7, #4]
    52f8:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	681a      	ldr	r2, [r3, #0]
    52fe:	683b      	ldr	r3, [r7, #0]
    5300:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	683a      	ldr	r2, [r7, #0]
    5306:	601a      	str	r2, [r3, #0]
}
    5308:	bf00      	nop
    530a:	370c      	adds	r7, #12
    530c:	46bd      	mov	sp, r7
    530e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5312:	4770      	bx	lr

00005314 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5314:	b580      	push	{r7, lr}
    5316:	b084      	sub	sp, #16
    5318:	af00      	add	r7, sp, #0
    531a:	6078      	str	r0, [r7, #4]
    531c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    531e:	687b      	ldr	r3, [r7, #4]
    5320:	681b      	ldr	r3, [r3, #0]
    5322:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    5324:	6839      	ldr	r1, [r7, #0]
    5326:	6878      	ldr	r0, [r7, #4]
    5328:	4b16      	ldr	r3, [pc, #88]	; (5384 <list_insert_at_end+0x70>)
    532a:	4798      	blx	r3
    532c:	4603      	mov	r3, r0
    532e:	2b00      	cmp	r3, #0
    5330:	bf14      	ite	ne
    5332:	2301      	movne	r3, #1
    5334:	2300      	moveq	r3, #0
    5336:	b2db      	uxtb	r3, r3
    5338:	f083 0301 	eor.w	r3, r3, #1
    533c:	b2db      	uxtb	r3, r3
    533e:	f003 0301 	and.w	r3, r3, #1
    5342:	b2db      	uxtb	r3, r3
    5344:	224f      	movs	r2, #79	; 0x4f
    5346:	4910      	ldr	r1, [pc, #64]	; (5388 <list_insert_at_end+0x74>)
    5348:	4618      	mov	r0, r3
    534a:	4b10      	ldr	r3, [pc, #64]	; (538c <list_insert_at_end+0x78>)
    534c:	4798      	blx	r3

	if (!list->head) {
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	681b      	ldr	r3, [r3, #0]
    5352:	2b00      	cmp	r3, #0
    5354:	d109      	bne.n	536a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    5356:	687b      	ldr	r3, [r7, #4]
    5358:	683a      	ldr	r2, [r7, #0]
    535a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    535c:	683b      	ldr	r3, [r7, #0]
    535e:	2200      	movs	r2, #0
    5360:	601a      	str	r2, [r3, #0]
		return;
    5362:	e00c      	b.n	537e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    5364:	68fb      	ldr	r3, [r7, #12]
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    536a:	68fb      	ldr	r3, [r7, #12]
    536c:	681b      	ldr	r3, [r3, #0]
    536e:	2b00      	cmp	r3, #0
    5370:	d1f8      	bne.n	5364 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    5372:	68fb      	ldr	r3, [r7, #12]
    5374:	683a      	ldr	r2, [r7, #0]
    5376:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    5378:	683b      	ldr	r3, [r7, #0]
    537a:	2200      	movs	r2, #0
    537c:	601a      	str	r2, [r3, #0]
}
    537e:	3710      	adds	r7, #16
    5380:	46bd      	mov	sp, r7
    5382:	bd80      	pop	{r7, pc}
    5384:	00005261 	.word	0x00005261
    5388:	0001124c 	.word	0x0001124c
    538c:	00005239 	.word	0x00005239

00005390 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    5390:	b480      	push	{r7}
    5392:	b085      	sub	sp, #20
    5394:	af00      	add	r7, sp, #0
    5396:	6078      	str	r0, [r7, #4]
	if (list->head) {
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	681b      	ldr	r3, [r3, #0]
    539c:	2b00      	cmp	r3, #0
    539e:	d009      	beq.n	53b4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	681b      	ldr	r3, [r3, #0]
    53a4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	681b      	ldr	r3, [r3, #0]
    53aa:	681a      	ldr	r2, [r3, #0]
    53ac:	687b      	ldr	r3, [r7, #4]
    53ae:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    53b0:	68fb      	ldr	r3, [r7, #12]
    53b2:	e000      	b.n	53b6 <list_remove_head+0x26>
	}

	return NULL;
    53b4:	2300      	movs	r3, #0
}
    53b6:	4618      	mov	r0, r3
    53b8:	3714      	adds	r7, #20
    53ba:	46bd      	mov	sp, r7
    53bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c0:	4770      	bx	lr

000053c2 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    53c2:	b480      	push	{r7}
    53c4:	b085      	sub	sp, #20
    53c6:	af00      	add	r7, sp, #0
    53c8:	6078      	str	r0, [r7, #4]
    53ca:	6039      	str	r1, [r7, #0]
	if (!element) {
    53cc:	683b      	ldr	r3, [r7, #0]
    53ce:	2b00      	cmp	r3, #0
    53d0:	d101      	bne.n	53d6 <list_delete_element+0x14>
		return false;
    53d2:	2300      	movs	r3, #0
    53d4:	e024      	b.n	5420 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    53d6:	687b      	ldr	r3, [r7, #4]
    53d8:	681a      	ldr	r2, [r3, #0]
    53da:	683b      	ldr	r3, [r7, #0]
    53dc:	429a      	cmp	r2, r3
    53de:	d106      	bne.n	53ee <list_delete_element+0x2c>
		list->head = list->head->next;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	681b      	ldr	r3, [r3, #0]
    53e4:	681a      	ldr	r2, [r3, #0]
    53e6:	687b      	ldr	r3, [r7, #4]
    53e8:	601a      	str	r2, [r3, #0]
		return true;
    53ea:	2301      	movs	r3, #1
    53ec:	e018      	b.n	5420 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    53f4:	e002      	b.n	53fc <list_delete_element+0x3a>
			it = it->next;
    53f6:	68fb      	ldr	r3, [r7, #12]
    53f8:	681b      	ldr	r3, [r3, #0]
    53fa:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    53fc:	68fb      	ldr	r3, [r7, #12]
    53fe:	2b00      	cmp	r3, #0
    5400:	d004      	beq.n	540c <list_delete_element+0x4a>
    5402:	68fb      	ldr	r3, [r7, #12]
    5404:	681a      	ldr	r2, [r3, #0]
    5406:	683b      	ldr	r3, [r7, #0]
    5408:	429a      	cmp	r2, r3
    540a:	d1f4      	bne.n	53f6 <list_delete_element+0x34>
		}
		if (it) {
    540c:	68fb      	ldr	r3, [r7, #12]
    540e:	2b00      	cmp	r3, #0
    5410:	d005      	beq.n	541e <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    5412:	683b      	ldr	r3, [r7, #0]
    5414:	681a      	ldr	r2, [r3, #0]
    5416:	68fb      	ldr	r3, [r7, #12]
    5418:	601a      	str	r2, [r3, #0]
			return true;
    541a:	2301      	movs	r3, #1
    541c:	e000      	b.n	5420 <list_delete_element+0x5e>
		}
	}

	return false;
    541e:	2300      	movs	r3, #0
}
    5420:	4618      	mov	r0, r3
    5422:	3714      	adds	r7, #20
    5424:	46bd      	mov	sp, r7
    5426:	f85d 7b04 	ldr.w	r7, [sp], #4
    542a:	4770      	bx	lr

0000542c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    542c:	b480      	push	{r7}
    542e:	b083      	sub	sp, #12
    5430:	af00      	add	r7, sp, #0
    5432:	4603      	mov	r3, r0
    5434:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    543a:	2b00      	cmp	r3, #0
    543c:	db0b      	blt.n	5456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    543e:	4909      	ldr	r1, [pc, #36]	; (5464 <__NVIC_EnableIRQ+0x38>)
    5440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5444:	095b      	lsrs	r3, r3, #5
    5446:	88fa      	ldrh	r2, [r7, #6]
    5448:	f002 021f 	and.w	r2, r2, #31
    544c:	2001      	movs	r0, #1
    544e:	fa00 f202 	lsl.w	r2, r0, r2
    5452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5456:	bf00      	nop
    5458:	370c      	adds	r7, #12
    545a:	46bd      	mov	sp, r7
    545c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5460:	4770      	bx	lr
    5462:	bf00      	nop
    5464:	e000e100 	.word	0xe000e100

00005468 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    5468:	b480      	push	{r7}
    546a:	b083      	sub	sp, #12
    546c:	af00      	add	r7, sp, #0
    546e:	4603      	mov	r3, r0
    5470:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5476:	2b00      	cmp	r3, #0
    5478:	db10      	blt.n	549c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    547a:	490b      	ldr	r1, [pc, #44]	; (54a8 <__NVIC_DisableIRQ+0x40>)
    547c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5480:	095b      	lsrs	r3, r3, #5
    5482:	88fa      	ldrh	r2, [r7, #6]
    5484:	f002 021f 	and.w	r2, r2, #31
    5488:	2001      	movs	r0, #1
    548a:	fa00 f202 	lsl.w	r2, r0, r2
    548e:	3320      	adds	r3, #32
    5490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5494:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5498:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    549c:	bf00      	nop
    549e:	370c      	adds	r7, #12
    54a0:	46bd      	mov	sp, r7
    54a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a6:	4770      	bx	lr
    54a8:	e000e100 	.word	0xe000e100

000054ac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    54ac:	b480      	push	{r7}
    54ae:	b083      	sub	sp, #12
    54b0:	af00      	add	r7, sp, #0
    54b2:	4603      	mov	r3, r0
    54b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    54b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    54ba:	2b00      	cmp	r3, #0
    54bc:	db0c      	blt.n	54d8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54be:	4909      	ldr	r1, [pc, #36]	; (54e4 <__NVIC_ClearPendingIRQ+0x38>)
    54c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    54c4:	095b      	lsrs	r3, r3, #5
    54c6:	88fa      	ldrh	r2, [r7, #6]
    54c8:	f002 021f 	and.w	r2, r2, #31
    54cc:	2001      	movs	r0, #1
    54ce:	fa00 f202 	lsl.w	r2, r0, r2
    54d2:	3360      	adds	r3, #96	; 0x60
    54d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    54d8:	bf00      	nop
    54da:	370c      	adds	r7, #12
    54dc:	46bd      	mov	sp, r7
    54de:	f85d 7b04 	ldr.w	r7, [sp], #4
    54e2:	4770      	bx	lr
    54e4:	e000e100 	.word	0xe000e100

000054e8 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    54e8:	b480      	push	{r7}
    54ea:	b083      	sub	sp, #12
    54ec:	af00      	add	r7, sp, #0
    54ee:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    54f4:	095b      	lsrs	r3, r3, #5
    54f6:	f003 0301 	and.w	r3, r3, #1
    54fa:	2b00      	cmp	r3, #0
    54fc:	bf14      	ite	ne
    54fe:	2301      	movne	r3, #1
    5500:	2300      	moveq	r3, #0
    5502:	b2db      	uxtb	r3, r3
}
    5504:	4618      	mov	r0, r3
    5506:	370c      	adds	r7, #12
    5508:	46bd      	mov	sp, r7
    550a:	f85d 7b04 	ldr.w	r7, [sp], #4
    550e:	4770      	bx	lr

00005510 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    5510:	b480      	push	{r7}
    5512:	b083      	sub	sp, #12
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
    5518:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	683a      	ldr	r2, [r7, #0]
    551e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5520:	bf00      	nop
    5522:	370c      	adds	r7, #12
    5524:	46bd      	mov	sp, r7
    5526:	f85d 7b04 	ldr.w	r7, [sp], #4
    552a:	4770      	bx	lr

0000552c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    552c:	b480      	push	{r7}
    552e:	b083      	sub	sp, #12
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
    5534:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	683a      	ldr	r2, [r7, #0]
    553a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    553c:	bf00      	nop
    553e:	370c      	adds	r7, #12
    5540:	46bd      	mov	sp, r7
    5542:	f85d 7b04 	ldr.w	r7, [sp], #4
    5546:	4770      	bx	lr

00005548 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5548:	b480      	push	{r7}
    554a:	b083      	sub	sp, #12
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	699b      	ldr	r3, [r3, #24]
    5554:	f043 0201 	orr.w	r2, r3, #1
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    555c:	bf00      	nop
    555e:	370c      	adds	r7, #12
    5560:	46bd      	mov	sp, r7
    5562:	f85d 7b04 	ldr.w	r7, [sp], #4
    5566:	4770      	bx	lr

00005568 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5568:	b480      	push	{r7}
    556a:	b085      	sub	sp, #20
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	699b      	ldr	r3, [r3, #24]
    5574:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    5576:	68fb      	ldr	r3, [r7, #12]
    5578:	f003 0301 	and.w	r3, r3, #1
    557c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    557e:	68fb      	ldr	r3, [r7, #12]
    5580:	2b00      	cmp	r3, #0
    5582:	bf14      	ite	ne
    5584:	2301      	movne	r3, #1
    5586:	2300      	moveq	r3, #0
    5588:	b2db      	uxtb	r3, r3
}
    558a:	4618      	mov	r0, r3
    558c:	3714      	adds	r7, #20
    558e:	46bd      	mov	sp, r7
    5590:	f85d 7b04 	ldr.w	r7, [sp], #4
    5594:	4770      	bx	lr

00005596 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    5596:	b480      	push	{r7}
    5598:	b083      	sub	sp, #12
    559a:	af00      	add	r7, sp, #0
    559c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	699b      	ldr	r3, [r3, #24]
    55a2:	f023 0201 	bic.w	r2, r3, #1
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    55aa:	bf00      	nop
    55ac:	370c      	adds	r7, #12
    55ae:	46bd      	mov	sp, r7
    55b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b4:	4770      	bx	lr

000055b6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    55b6:	b480      	push	{r7}
    55b8:	b083      	sub	sp, #12
    55ba:	af00      	add	r7, sp, #0
    55bc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	699b      	ldr	r3, [r3, #24]
    55c2:	f043 0202 	orr.w	r2, r3, #2
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    55ca:	bf00      	nop
    55cc:	370c      	adds	r7, #12
    55ce:	46bd      	mov	sp, r7
    55d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55d4:	4770      	bx	lr

000055d6 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    55d6:	b480      	push	{r7}
    55d8:	b083      	sub	sp, #12
    55da:	af00      	add	r7, sp, #0
    55dc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	699b      	ldr	r3, [r3, #24]
    55e2:	f023 0202 	bic.w	r2, r3, #2
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    55ea:	bf00      	nop
    55ec:	370c      	adds	r7, #12
    55ee:	46bd      	mov	sp, r7
    55f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f4:	4770      	bx	lr

000055f6 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    55f6:	b480      	push	{r7}
    55f8:	b083      	sub	sp, #12
    55fa:	af00      	add	r7, sp, #0
    55fc:	6078      	str	r0, [r7, #4]
    55fe:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	699a      	ldr	r2, [r3, #24]
    5604:	683b      	ldr	r3, [r7, #0]
    5606:	431a      	orrs	r2, r3
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    560c:	bf00      	nop
    560e:	370c      	adds	r7, #12
    5610:	46bd      	mov	sp, r7
    5612:	f85d 7b04 	ldr.w	r7, [sp], #4
    5616:	4770      	bx	lr

00005618 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5618:	b480      	push	{r7}
    561a:	b083      	sub	sp, #12
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
    5620:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	683a      	ldr	r2, [r7, #0]
    5626:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5628:	bf00      	nop
    562a:	370c      	adds	r7, #12
    562c:	46bd      	mov	sp, r7
    562e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5632:	4770      	bx	lr

00005634 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5634:	b480      	push	{r7}
    5636:	b083      	sub	sp, #12
    5638:	af00      	add	r7, sp, #0
    563a:	6078      	str	r0, [r7, #4]
    563c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    563e:	687b      	ldr	r3, [r7, #4]
    5640:	683a      	ldr	r2, [r7, #0]
    5642:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5644:	bf00      	nop
    5646:	370c      	adds	r7, #12
    5648:	46bd      	mov	sp, r7
    564a:	f85d 7b04 	ldr.w	r7, [sp], #4
    564e:	4770      	bx	lr

00005650 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    5650:	b480      	push	{r7}
    5652:	b083      	sub	sp, #12
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    565c:	4618      	mov	r0, r3
    565e:	370c      	adds	r7, #12
    5660:	46bd      	mov	sp, r7
    5662:	f85d 7b04 	ldr.w	r7, [sp], #4
    5666:	4770      	bx	lr

00005668 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5668:	b480      	push	{r7}
    566a:	b083      	sub	sp, #12
    566c:	af00      	add	r7, sp, #0
    566e:	6078      	str	r0, [r7, #4]
    5670:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	683a      	ldr	r2, [r7, #0]
    5676:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5678:	bf00      	nop
    567a:	370c      	adds	r7, #12
    567c:	46bd      	mov	sp, r7
    567e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5682:	4770      	bx	lr

00005684 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5684:	b480      	push	{r7}
    5686:	b083      	sub	sp, #12
    5688:	af00      	add	r7, sp, #0
    568a:	6078      	str	r0, [r7, #4]
    568c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	683a      	ldr	r2, [r7, #0]
    5692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    5696:	bf00      	nop
    5698:	370c      	adds	r7, #12
    569a:	46bd      	mov	sp, r7
    569c:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a0:	4770      	bx	lr

000056a2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    56a2:	b480      	push	{r7}
    56a4:	b083      	sub	sp, #12
    56a6:	af00      	add	r7, sp, #0
    56a8:	6078      	str	r0, [r7, #4]
    56aa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	683a      	ldr	r2, [r7, #0]
    56b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    56b4:	bf00      	nop
    56b6:	370c      	adds	r7, #12
    56b8:	46bd      	mov	sp, r7
    56ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    56be:	4770      	bx	lr

000056c0 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    56c0:	b480      	push	{r7}
    56c2:	b083      	sub	sp, #12
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
    56c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	683a      	ldr	r2, [r7, #0]
    56ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    56d2:	bf00      	nop
    56d4:	370c      	adds	r7, #12
    56d6:	46bd      	mov	sp, r7
    56d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56dc:	4770      	bx	lr

000056de <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    56de:	b480      	push	{r7}
    56e0:	b083      	sub	sp, #12
    56e2:	af00      	add	r7, sp, #0
    56e4:	6078      	str	r0, [r7, #4]
    56e6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	683a      	ldr	r2, [r7, #0]
    56ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    56f0:	bf00      	nop
    56f2:	370c      	adds	r7, #12
    56f4:	46bd      	mov	sp, r7
    56f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fa:	4770      	bx	lr

000056fc <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    56fc:	b480      	push	{r7}
    56fe:	b083      	sub	sp, #12
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
    5704:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	683a      	ldr	r2, [r7, #0]
    570a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    570e:	bf00      	nop
    5710:	370c      	adds	r7, #12
    5712:	46bd      	mov	sp, r7
    5714:	f85d 7b04 	ldr.w	r7, [sp], #4
    5718:	4770      	bx	lr

0000571a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    571a:	b480      	push	{r7}
    571c:	b083      	sub	sp, #12
    571e:	af00      	add	r7, sp, #0
    5720:	6078      	str	r0, [r7, #4]
    5722:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	683a      	ldr	r2, [r7, #0]
    5728:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    572c:	bf00      	nop
    572e:	370c      	adds	r7, #12
    5730:	46bd      	mov	sp, r7
    5732:	f85d 7b04 	ldr.w	r7, [sp], #4
    5736:	4770      	bx	lr

00005738 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    5738:	b480      	push	{r7}
    573a:	b083      	sub	sp, #12
    573c:	af00      	add	r7, sp, #0
    573e:	6078      	str	r0, [r7, #4]
    5740:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    5742:	687b      	ldr	r3, [r7, #4]
    5744:	683a      	ldr	r2, [r7, #0]
    5746:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    574a:	bf00      	nop
    574c:	370c      	adds	r7, #12
    574e:	46bd      	mov	sp, r7
    5750:	f85d 7b04 	ldr.w	r7, [sp], #4
    5754:	4770      	bx	lr

00005756 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    5756:	b480      	push	{r7}
    5758:	b083      	sub	sp, #12
    575a:	af00      	add	r7, sp, #0
    575c:	6078      	str	r0, [r7, #4]
    575e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	683a      	ldr	r2, [r7, #0]
    5764:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5768:	bf00      	nop
    576a:	370c      	adds	r7, #12
    576c:	46bd      	mov	sp, r7
    576e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5772:	4770      	bx	lr

00005774 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5774:	b480      	push	{r7}
    5776:	b083      	sub	sp, #12
    5778:	af00      	add	r7, sp, #0
    577a:	6078      	str	r0, [r7, #4]
    577c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    577e:	687b      	ldr	r3, [r7, #4]
    5780:	683a      	ldr	r2, [r7, #0]
    5782:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5786:	bf00      	nop
    5788:	370c      	adds	r7, #12
    578a:	46bd      	mov	sp, r7
    578c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5790:	4770      	bx	lr
	...

00005794 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5794:	b580      	push	{r7, lr}
    5796:	b082      	sub	sp, #8
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
    579c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    579e:	687b      	ldr	r3, [r7, #4]
    57a0:	683a      	ldr	r2, [r7, #0]
    57a2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    57a4:	687b      	ldr	r3, [r7, #4]
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	4618      	mov	r0, r3
    57aa:	4b56      	ldr	r3, [pc, #344]	; (5904 <_can_async_init+0x170>)
    57ac:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    57ae:	bf00      	nop
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	681b      	ldr	r3, [r3, #0]
    57b4:	4618      	mov	r0, r3
    57b6:	4b54      	ldr	r3, [pc, #336]	; (5908 <_can_async_init+0x174>)
    57b8:	4798      	blx	r3
    57ba:	4603      	mov	r3, r0
    57bc:	f083 0301 	eor.w	r3, r3, #1
    57c0:	b2db      	uxtb	r3, r3
    57c2:	2b00      	cmp	r3, #0
    57c4:	d1f4      	bne.n	57b0 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    57c6:	687b      	ldr	r3, [r7, #4]
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	4618      	mov	r0, r3
    57cc:	4b4f      	ldr	r3, [pc, #316]	; (590c <_can_async_init+0x178>)
    57ce:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    57d0:	683b      	ldr	r3, [r7, #0]
    57d2:	4a4f      	ldr	r2, [pc, #316]	; (5910 <_can_async_init+0x17c>)
    57d4:	4293      	cmp	r3, r2
    57d6:	d17c      	bne.n	58d2 <_can_async_init+0x13e>
		_can1_dev    = dev;
    57d8:	4a4e      	ldr	r2, [pc, #312]	; (5914 <_can_async_init+0x180>)
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	4a4d      	ldr	r2, [pc, #308]	; (5918 <_can_async_init+0x184>)
    57e2:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	f44f 7100 	mov.w	r1, #512	; 0x200
    57ec:	4618      	mov	r0, r3
    57ee:	4b4b      	ldr	r3, [pc, #300]	; (591c <_can_async_init+0x188>)
    57f0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	2102      	movs	r1, #2
    57f8:	4618      	mov	r0, r3
    57fa:	4b49      	ldr	r3, [pc, #292]	; (5920 <_can_async_init+0x18c>)
    57fc:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    57fe:	687b      	ldr	r3, [r7, #4]
    5800:	681b      	ldr	r3, [r3, #0]
    5802:	f640 2103 	movw	r1, #2563	; 0xa03
    5806:	4618      	mov	r0, r3
    5808:	4b46      	ldr	r3, [pc, #280]	; (5924 <_can_async_init+0x190>)
    580a:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    580c:	687b      	ldr	r3, [r7, #4]
    580e:	681b      	ldr	r3, [r3, #0]
    5810:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    5814:	4618      	mov	r0, r3
    5816:	4b44      	ldr	r3, [pc, #272]	; (5928 <_can_async_init+0x194>)
    5818:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	681a      	ldr	r2, [r3, #0]
    581e:	4b43      	ldr	r3, [pc, #268]	; (592c <_can_async_init+0x198>)
    5820:	b29b      	uxth	r3, r3
    5822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    582a:	4619      	mov	r1, r3
    582c:	4610      	mov	r0, r2
    582e:	4b40      	ldr	r3, [pc, #256]	; (5930 <_can_async_init+0x19c>)
    5830:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	2107      	movs	r1, #7
    5838:	4618      	mov	r0, r3
    583a:	4b3e      	ldr	r3, [pc, #248]	; (5934 <_can_async_init+0x1a0>)
    583c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	2107      	movs	r1, #7
    5844:	4618      	mov	r0, r3
    5846:	4b3c      	ldr	r3, [pc, #240]	; (5938 <_can_async_init+0x1a4>)
    5848:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	681a      	ldr	r2, [r3, #0]
    584e:	4b3b      	ldr	r3, [pc, #236]	; (593c <_can_async_init+0x1a8>)
    5850:	b29b      	uxth	r3, r3
    5852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5856:	4619      	mov	r1, r3
    5858:	4610      	mov	r0, r2
    585a:	4b39      	ldr	r3, [pc, #228]	; (5940 <_can_async_init+0x1ac>)
    585c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	681a      	ldr	r2, [r3, #0]
    5862:	4b38      	ldr	r3, [pc, #224]	; (5944 <_can_async_init+0x1b0>)
    5864:	b29b      	uxth	r3, r3
    5866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    586a:	4619      	mov	r1, r3
    586c:	4610      	mov	r0, r2
    586e:	4b36      	ldr	r3, [pc, #216]	; (5948 <_can_async_init+0x1b4>)
    5870:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    5872:	687b      	ldr	r3, [r7, #4]
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	2108      	movs	r1, #8
    5878:	4618      	mov	r0, r3
    587a:	4b34      	ldr	r3, [pc, #208]	; (594c <_can_async_init+0x1b8>)
    587c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    587e:	687b      	ldr	r3, [r7, #4]
    5880:	681a      	ldr	r2, [r3, #0]
    5882:	4b33      	ldr	r3, [pc, #204]	; (5950 <_can_async_init+0x1bc>)
    5884:	b29b      	uxth	r3, r3
    5886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    588a:	4619      	mov	r1, r3
    588c:	4610      	mov	r0, r2
    588e:	4b31      	ldr	r3, [pc, #196]	; (5954 <_can_async_init+0x1c0>)
    5890:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	681a      	ldr	r2, [r3, #0]
    5896:	4b30      	ldr	r3, [pc, #192]	; (5958 <_can_async_init+0x1c4>)
    5898:	b29b      	uxth	r3, r3
    589a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    589e:	4619      	mov	r1, r3
    58a0:	4610      	mov	r0, r2
    58a2:	4b2e      	ldr	r3, [pc, #184]	; (595c <_can_async_init+0x1c8>)
    58a4:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    58ae:	4618      	mov	r0, r3
    58b0:	4b2b      	ldr	r3, [pc, #172]	; (5960 <_can_async_init+0x1cc>)
    58b2:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    58b4:	204f      	movs	r0, #79	; 0x4f
    58b6:	4b2b      	ldr	r3, [pc, #172]	; (5964 <_can_async_init+0x1d0>)
    58b8:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    58ba:	204f      	movs	r0, #79	; 0x4f
    58bc:	4b2a      	ldr	r3, [pc, #168]	; (5968 <_can_async_init+0x1d4>)
    58be:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    58c0:	204f      	movs	r0, #79	; 0x4f
    58c2:	4b2a      	ldr	r3, [pc, #168]	; (596c <_can_async_init+0x1d8>)
    58c4:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    58c6:	687b      	ldr	r3, [r7, #4]
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	2101      	movs	r1, #1
    58cc:	4618      	mov	r0, r3
    58ce:	4b28      	ldr	r3, [pc, #160]	; (5970 <_can_async_init+0x1dc>)
    58d0:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	4618      	mov	r0, r3
    58d8:	4b26      	ldr	r3, [pc, #152]	; (5974 <_can_async_init+0x1e0>)
    58da:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	4618      	mov	r0, r3
    58e2:	4b25      	ldr	r3, [pc, #148]	; (5978 <_can_async_init+0x1e4>)
    58e4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    58e6:	bf00      	nop
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	4618      	mov	r0, r3
    58ee:	4b06      	ldr	r3, [pc, #24]	; (5908 <_can_async_init+0x174>)
    58f0:	4798      	blx	r3
    58f2:	4603      	mov	r3, r0
    58f4:	2b00      	cmp	r3, #0
    58f6:	d1f7      	bne.n	58e8 <_can_async_init+0x154>
	};

	return ERR_NONE;
    58f8:	2300      	movs	r3, #0
}
    58fa:	4618      	mov	r0, r3
    58fc:	3708      	adds	r7, #8
    58fe:	46bd      	mov	sp, r7
    5900:	bd80      	pop	{r7, pc}
    5902:	bf00      	nop
    5904:	00005549 	.word	0x00005549
    5908:	00005569 	.word	0x00005569
    590c:	000055b7 	.word	0x000055b7
    5910:	42000400 	.word	0x42000400
    5914:	20000e18 	.word	0x20000e18
    5918:	20000004 	.word	0x20000004
    591c:	000055f7 	.word	0x000055f7
    5920:	00005511 	.word	0x00005511
    5924:	00005619 	.word	0x00005619
    5928:	0000552d 	.word	0x0000552d
    592c:	2000aa20 	.word	0x2000aa20
    5930:	000056fd 	.word	0x000056fd
    5934:	0000571b 	.word	0x0000571b
    5938:	00005757 	.word	0x00005757
    593c:	2000a9d8 	.word	0x2000a9d8
    5940:	00005739 	.word	0x00005739
    5944:	20000d78 	.word	0x20000d78
    5948:	00005775 	.word	0x00005775
    594c:	00005685 	.word	0x00005685
    5950:	20000d88 	.word	0x20000d88
    5954:	000056a3 	.word	0x000056a3
    5958:	20000e08 	.word	0x20000e08
    595c:	000056c1 	.word	0x000056c1
    5960:	000056df 	.word	0x000056df
    5964:	00005469 	.word	0x00005469
    5968:	000054ad 	.word	0x000054ad
    596c:	0000542d 	.word	0x0000542d
    5970:	00005669 	.word	0x00005669
    5974:	000055d7 	.word	0x000055d7
    5978:	00005597 	.word	0x00005597

0000597c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    597c:	b590      	push	{r4, r7, lr}
    597e:	b083      	sub	sp, #12
    5980:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5982:	4b2c      	ldr	r3, [pc, #176]	; (5a34 <CAN1_Handler+0xb8>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	681b      	ldr	r3, [r3, #0]
    598c:	4618      	mov	r0, r3
    598e:	4b2a      	ldr	r3, [pc, #168]	; (5a38 <CAN1_Handler+0xbc>)
    5990:	4798      	blx	r3
    5992:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5994:	683b      	ldr	r3, [r7, #0]
    5996:	f003 0301 	and.w	r3, r3, #1
    599a:	2b00      	cmp	r3, #0
    599c:	d003      	beq.n	59a6 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	689b      	ldr	r3, [r3, #8]
    59a2:	6878      	ldr	r0, [r7, #4]
    59a4:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    59a6:	683b      	ldr	r3, [r7, #0]
    59a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    59ac:	2b00      	cmp	r3, #0
    59ae:	d003      	beq.n	59b8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	6878      	ldr	r0, [r7, #4]
    59b6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    59b8:	683b      	ldr	r3, [r7, #0]
    59ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    59be:	2b00      	cmp	r3, #0
    59c0:	d004      	beq.n	59cc <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	68db      	ldr	r3, [r3, #12]
    59c6:	2103      	movs	r1, #3
    59c8:	6878      	ldr	r0, [r7, #4]
    59ca:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    59cc:	683b      	ldr	r3, [r7, #0]
    59ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    59d2:	2b00      	cmp	r3, #0
    59d4:	d004      	beq.n	59e0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	68db      	ldr	r3, [r3, #12]
    59da:	2100      	movs	r1, #0
    59dc:	6878      	ldr	r0, [r7, #4]
    59de:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    59e0:	683b      	ldr	r3, [r7, #0]
    59e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    59e6:	2b00      	cmp	r3, #0
    59e8:	d00f      	beq.n	5a0a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	68dc      	ldr	r4, [r3, #12]
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	4618      	mov	r0, r3
    59f4:	4b11      	ldr	r3, [pc, #68]	; (5a3c <CAN1_Handler+0xc0>)
    59f6:	4798      	blx	r3
    59f8:	4603      	mov	r3, r0
    59fa:	2b00      	cmp	r3, #0
    59fc:	d001      	beq.n	5a02 <CAN1_Handler+0x86>
    59fe:	2302      	movs	r3, #2
    5a00:	e000      	b.n	5a04 <CAN1_Handler+0x88>
    5a02:	2301      	movs	r3, #1
    5a04:	4619      	mov	r1, r3
    5a06:	6878      	ldr	r0, [r7, #4]
    5a08:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5a0a:	683b      	ldr	r3, [r7, #0]
    5a0c:	f003 0308 	and.w	r3, r3, #8
    5a10:	2b00      	cmp	r3, #0
    5a12:	d004      	beq.n	5a1e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	68db      	ldr	r3, [r3, #12]
    5a18:	2104      	movs	r1, #4
    5a1a:	6878      	ldr	r0, [r7, #4]
    5a1c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5a1e:	687b      	ldr	r3, [r7, #4]
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	6839      	ldr	r1, [r7, #0]
    5a24:	4618      	mov	r0, r3
    5a26:	4b06      	ldr	r3, [pc, #24]	; (5a40 <CAN1_Handler+0xc4>)
    5a28:	4798      	blx	r3
}
    5a2a:	bf00      	nop
    5a2c:	370c      	adds	r7, #12
    5a2e:	46bd      	mov	sp, r7
    5a30:	bd90      	pop	{r4, r7, pc}
    5a32:	bf00      	nop
    5a34:	20000e18 	.word	0x20000e18
    5a38:	00005651 	.word	0x00005651
    5a3c:	000054e9 	.word	0x000054e9
    5a40:	00005635 	.word	0x00005635

00005a44 <__NVIC_SetPendingIRQ>:
{
    5a44:	b480      	push	{r7}
    5a46:	b083      	sub	sp, #12
    5a48:	af00      	add	r7, sp, #0
    5a4a:	4603      	mov	r3, r0
    5a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a52:	2b00      	cmp	r3, #0
    5a54:	db0c      	blt.n	5a70 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a56:	4909      	ldr	r1, [pc, #36]	; (5a7c <__NVIC_SetPendingIRQ+0x38>)
    5a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a5c:	095b      	lsrs	r3, r3, #5
    5a5e:	88fa      	ldrh	r2, [r7, #6]
    5a60:	f002 021f 	and.w	r2, r2, #31
    5a64:	2001      	movs	r0, #1
    5a66:	fa00 f202 	lsl.w	r2, r0, r2
    5a6a:	3340      	adds	r3, #64	; 0x40
    5a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5a70:	bf00      	nop
    5a72:	370c      	adds	r7, #12
    5a74:	46bd      	mov	sp, r7
    5a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a7a:	4770      	bx	lr
    5a7c:	e000e100 	.word	0xe000e100

00005a80 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5a80:	b580      	push	{r7, lr}
    5a82:	b082      	sub	sp, #8
    5a84:	af00      	add	r7, sp, #0
    5a86:	4603      	mov	r3, r0
    5a88:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5a8a:	79fb      	ldrb	r3, [r7, #7]
    5a8c:	b21b      	sxth	r3, r3
    5a8e:	4618      	mov	r0, r3
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <_irq_set+0x1c>)
    5a92:	4798      	blx	r3
}
    5a94:	bf00      	nop
    5a96:	3708      	adds	r7, #8
    5a98:	46bd      	mov	sp, r7
    5a9a:	bd80      	pop	{r7, pc}
    5a9c:	00005a45 	.word	0x00005a45

00005aa0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5aa0:	b480      	push	{r7}
    5aa2:	b083      	sub	sp, #12
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	4603      	mov	r3, r0
    5aa8:	6039      	str	r1, [r7, #0]
    5aaa:	80fb      	strh	r3, [r7, #6]
    5aac:	4613      	mov	r3, r2
    5aae:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5ab0:	797b      	ldrb	r3, [r7, #5]
    5ab2:	3b04      	subs	r3, #4
    5ab4:	2b05      	cmp	r3, #5
    5ab6:	d86b      	bhi.n	5b90 <_get_cycles_for_us_internal+0xf0>
    5ab8:	a201      	add	r2, pc, #4	; (adr r2, 5ac0 <_get_cycles_for_us_internal+0x20>)
    5aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5abe:	bf00      	nop
    5ac0:	00005b6f 	.word	0x00005b6f
    5ac4:	00005b4f 	.word	0x00005b4f
    5ac8:	00005b31 	.word	0x00005b31
    5acc:	00005b13 	.word	0x00005b13
    5ad0:	00005af5 	.word	0x00005af5
    5ad4:	00005ad9 	.word	0x00005ad9
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5ad8:	88fb      	ldrh	r3, [r7, #6]
    5ada:	683a      	ldr	r2, [r7, #0]
    5adc:	4935      	ldr	r1, [pc, #212]	; (5bb4 <_get_cycles_for_us_internal+0x114>)
    5ade:	fba1 1202 	umull	r1, r2, r1, r2
    5ae2:	0c92      	lsrs	r2, r2, #18
    5ae4:	fb02 f303 	mul.w	r3, r2, r3
    5ae8:	3302      	adds	r3, #2
    5aea:	4a33      	ldr	r2, [pc, #204]	; (5bb8 <_get_cycles_for_us_internal+0x118>)
    5aec:	fba2 2303 	umull	r2, r3, r2, r3
    5af0:	085b      	lsrs	r3, r3, #1
    5af2:	e059      	b.n	5ba8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5af4:	88fb      	ldrh	r3, [r7, #6]
    5af6:	683a      	ldr	r2, [r7, #0]
    5af8:	0952      	lsrs	r2, r2, #5
    5afa:	4930      	ldr	r1, [pc, #192]	; (5bbc <_get_cycles_for_us_internal+0x11c>)
    5afc:	fba1 1202 	umull	r1, r2, r1, r2
    5b00:	09d2      	lsrs	r2, r2, #7
    5b02:	fb02 f303 	mul.w	r3, r2, r3
    5b06:	331d      	adds	r3, #29
    5b08:	4a2d      	ldr	r2, [pc, #180]	; (5bc0 <_get_cycles_for_us_internal+0x120>)
    5b0a:	fba2 2303 	umull	r2, r3, r2, r3
    5b0e:	091b      	lsrs	r3, r3, #4
    5b10:	e04a      	b.n	5ba8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5b12:	88fb      	ldrh	r3, [r7, #6]
    5b14:	683a      	ldr	r2, [r7, #0]
    5b16:	492b      	ldr	r1, [pc, #172]	; (5bc4 <_get_cycles_for_us_internal+0x124>)
    5b18:	fba1 1202 	umull	r1, r2, r1, r2
    5b1c:	0b52      	lsrs	r2, r2, #13
    5b1e:	fb02 f303 	mul.w	r3, r2, r3
    5b22:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5b26:	4a28      	ldr	r2, [pc, #160]	; (5bc8 <_get_cycles_for_us_internal+0x128>)
    5b28:	fba2 2303 	umull	r2, r3, r2, r3
    5b2c:	095b      	lsrs	r3, r3, #5
    5b2e:	e03b      	b.n	5ba8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5b30:	88fb      	ldrh	r3, [r7, #6]
    5b32:	683a      	ldr	r2, [r7, #0]
    5b34:	4925      	ldr	r1, [pc, #148]	; (5bcc <_get_cycles_for_us_internal+0x12c>)
    5b36:	fba1 1202 	umull	r1, r2, r1, r2
    5b3a:	0992      	lsrs	r2, r2, #6
    5b3c:	fb02 f303 	mul.w	r3, r2, r3
    5b40:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5b44:	4a22      	ldr	r2, [pc, #136]	; (5bd0 <_get_cycles_for_us_internal+0x130>)
    5b46:	fba2 2303 	umull	r2, r3, r2, r3
    5b4a:	099b      	lsrs	r3, r3, #6
    5b4c:	e02c      	b.n	5ba8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5b4e:	88fb      	ldrh	r3, [r7, #6]
    5b50:	683a      	ldr	r2, [r7, #0]
    5b52:	4920      	ldr	r1, [pc, #128]	; (5bd4 <_get_cycles_for_us_internal+0x134>)
    5b54:	fba1 1202 	umull	r1, r2, r1, r2
    5b58:	0952      	lsrs	r2, r2, #5
    5b5a:	fb02 f303 	mul.w	r3, r2, r3
    5b5e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5b62:	332f      	adds	r3, #47	; 0x2f
    5b64:	4a1c      	ldr	r2, [pc, #112]	; (5bd8 <_get_cycles_for_us_internal+0x138>)
    5b66:	fba2 2303 	umull	r2, r3, r2, r3
    5b6a:	0b5b      	lsrs	r3, r3, #13
    5b6c:	e01c      	b.n	5ba8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5b6e:	88fb      	ldrh	r3, [r7, #6]
    5b70:	683a      	ldr	r2, [r7, #0]
    5b72:	491a      	ldr	r1, [pc, #104]	; (5bdc <_get_cycles_for_us_internal+0x13c>)
    5b74:	fba1 1202 	umull	r1, r2, r1, r2
    5b78:	08d2      	lsrs	r2, r2, #3
    5b7a:	fb02 f303 	mul.w	r3, r2, r3
    5b7e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5b82:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5b86:	4a16      	ldr	r2, [pc, #88]	; (5be0 <_get_cycles_for_us_internal+0x140>)
    5b88:	fba2 2303 	umull	r2, r3, r2, r3
    5b8c:	0c5b      	lsrs	r3, r3, #17
    5b8e:	e00b      	b.n	5ba8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5b90:	88fb      	ldrh	r3, [r7, #6]
    5b92:	683a      	ldr	r2, [r7, #0]
    5b94:	fb02 f303 	mul.w	r3, r2, r3
    5b98:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5b9c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5ba0:	4a10      	ldr	r2, [pc, #64]	; (5be4 <_get_cycles_for_us_internal+0x144>)
    5ba2:	fba2 2303 	umull	r2, r3, r2, r3
    5ba6:	0c9b      	lsrs	r3, r3, #18
	}
}
    5ba8:	4618      	mov	r0, r3
    5baa:	370c      	adds	r7, #12
    5bac:	46bd      	mov	sp, r7
    5bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb2:	4770      	bx	lr
    5bb4:	431bde83 	.word	0x431bde83
    5bb8:	aaaaaaab 	.word	0xaaaaaaab
    5bbc:	0a7c5ac5 	.word	0x0a7c5ac5
    5bc0:	88888889 	.word	0x88888889
    5bc4:	d1b71759 	.word	0xd1b71759
    5bc8:	1b4e81b5 	.word	0x1b4e81b5
    5bcc:	10624dd3 	.word	0x10624dd3
    5bd0:	057619f1 	.word	0x057619f1
    5bd4:	51eb851f 	.word	0x51eb851f
    5bd8:	45e7b273 	.word	0x45e7b273
    5bdc:	cccccccd 	.word	0xcccccccd
    5be0:	6fd91d85 	.word	0x6fd91d85
    5be4:	165e9f81 	.word	0x165e9f81

00005be8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b082      	sub	sp, #8
    5bec:	af00      	add	r7, sp, #0
    5bee:	4603      	mov	r3, r0
    5bf0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5bf2:	88fb      	ldrh	r3, [r7, #6]
    5bf4:	2209      	movs	r2, #9
    5bf6:	4904      	ldr	r1, [pc, #16]	; (5c08 <_get_cycles_for_us+0x20>)
    5bf8:	4618      	mov	r0, r3
    5bfa:	4b04      	ldr	r3, [pc, #16]	; (5c0c <_get_cycles_for_us+0x24>)
    5bfc:	4798      	blx	r3
    5bfe:	4603      	mov	r3, r0
}
    5c00:	4618      	mov	r0, r3
    5c02:	3708      	adds	r7, #8
    5c04:	46bd      	mov	sp, r7
    5c06:	bd80      	pop	{r7, pc}
    5c08:	07270e00 	.word	0x07270e00
    5c0c:	00005aa1 	.word	0x00005aa1

00005c10 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5c10:	b480      	push	{r7}
    5c12:	b083      	sub	sp, #12
    5c14:	af00      	add	r7, sp, #0
    5c16:	4603      	mov	r3, r0
    5c18:	6039      	str	r1, [r7, #0]
    5c1a:	80fb      	strh	r3, [r7, #6]
    5c1c:	4613      	mov	r3, r2
    5c1e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5c20:	797b      	ldrb	r3, [r7, #5]
    5c22:	3b04      	subs	r3, #4
    5c24:	2b05      	cmp	r3, #5
    5c26:	d870      	bhi.n	5d0a <_get_cycles_for_ms_internal+0xfa>
    5c28:	a201      	add	r2, pc, #4	; (adr r2, 5c30 <_get_cycles_for_ms_internal+0x20>)
    5c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c2e:	bf00      	nop
    5c30:	00005ced 	.word	0x00005ced
    5c34:	00005cd1 	.word	0x00005cd1
    5c38:	00005cb5 	.word	0x00005cb5
    5c3c:	00005c91 	.word	0x00005c91
    5c40:	00005c6d 	.word	0x00005c6d
    5c44:	00005c49 	.word	0x00005c49
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5c48:	88fb      	ldrh	r3, [r7, #6]
    5c4a:	683a      	ldr	r2, [r7, #0]
    5c4c:	4937      	ldr	r1, [pc, #220]	; (5d2c <_get_cycles_for_ms_internal+0x11c>)
    5c4e:	fba1 1202 	umull	r1, r2, r1, r2
    5c52:	0c92      	lsrs	r2, r2, #18
    5c54:	fb02 f303 	mul.w	r3, r2, r3
    5c58:	3302      	adds	r3, #2
    5c5a:	4a35      	ldr	r2, [pc, #212]	; (5d30 <_get_cycles_for_ms_internal+0x120>)
    5c5c:	fba2 2303 	umull	r2, r3, r2, r3
    5c60:	085b      	lsrs	r3, r3, #1
    5c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c66:	fb02 f303 	mul.w	r3, r2, r3
    5c6a:	e058      	b.n	5d1e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5c6c:	88fb      	ldrh	r3, [r7, #6]
    5c6e:	683a      	ldr	r2, [r7, #0]
    5c70:	0952      	lsrs	r2, r2, #5
    5c72:	4930      	ldr	r1, [pc, #192]	; (5d34 <_get_cycles_for_ms_internal+0x124>)
    5c74:	fba1 1202 	umull	r1, r2, r1, r2
    5c78:	09d2      	lsrs	r2, r2, #7
    5c7a:	fb02 f303 	mul.w	r3, r2, r3
    5c7e:	3302      	adds	r3, #2
    5c80:	4a2b      	ldr	r2, [pc, #172]	; (5d30 <_get_cycles_for_ms_internal+0x120>)
    5c82:	fba2 2303 	umull	r2, r3, r2, r3
    5c86:	085b      	lsrs	r3, r3, #1
    5c88:	2264      	movs	r2, #100	; 0x64
    5c8a:	fb02 f303 	mul.w	r3, r2, r3
    5c8e:	e046      	b.n	5d1e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5c90:	88fb      	ldrh	r3, [r7, #6]
    5c92:	683a      	ldr	r2, [r7, #0]
    5c94:	4928      	ldr	r1, [pc, #160]	; (5d38 <_get_cycles_for_ms_internal+0x128>)
    5c96:	fba1 1202 	umull	r1, r2, r1, r2
    5c9a:	0b52      	lsrs	r2, r2, #13
    5c9c:	fb02 f303 	mul.w	r3, r2, r3
    5ca0:	3302      	adds	r3, #2
    5ca2:	4a23      	ldr	r2, [pc, #140]	; (5d30 <_get_cycles_for_ms_internal+0x120>)
    5ca4:	fba2 2303 	umull	r2, r3, r2, r3
    5ca8:	085a      	lsrs	r2, r3, #1
    5caa:	4613      	mov	r3, r2
    5cac:	009b      	lsls	r3, r3, #2
    5cae:	4413      	add	r3, r2
    5cb0:	005b      	lsls	r3, r3, #1
    5cb2:	e034      	b.n	5d1e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5cb4:	88fb      	ldrh	r3, [r7, #6]
    5cb6:	683a      	ldr	r2, [r7, #0]
    5cb8:	4920      	ldr	r1, [pc, #128]	; (5d3c <_get_cycles_for_ms_internal+0x12c>)
    5cba:	fba1 1202 	umull	r1, r2, r1, r2
    5cbe:	0992      	lsrs	r2, r2, #6
    5cc0:	fb02 f303 	mul.w	r3, r2, r3
    5cc4:	3302      	adds	r3, #2
    5cc6:	4a1a      	ldr	r2, [pc, #104]	; (5d30 <_get_cycles_for_ms_internal+0x120>)
    5cc8:	fba2 2303 	umull	r2, r3, r2, r3
    5ccc:	085b      	lsrs	r3, r3, #1
    5cce:	e026      	b.n	5d1e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5cd0:	88fb      	ldrh	r3, [r7, #6]
    5cd2:	683a      	ldr	r2, [r7, #0]
    5cd4:	491a      	ldr	r1, [pc, #104]	; (5d40 <_get_cycles_for_ms_internal+0x130>)
    5cd6:	fba1 1202 	umull	r1, r2, r1, r2
    5cda:	0952      	lsrs	r2, r2, #5
    5cdc:	fb02 f303 	mul.w	r3, r2, r3
    5ce0:	331d      	adds	r3, #29
    5ce2:	4a18      	ldr	r2, [pc, #96]	; (5d44 <_get_cycles_for_ms_internal+0x134>)
    5ce4:	fba2 2303 	umull	r2, r3, r2, r3
    5ce8:	091b      	lsrs	r3, r3, #4
    5cea:	e018      	b.n	5d1e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5cec:	88fb      	ldrh	r3, [r7, #6]
    5cee:	683a      	ldr	r2, [r7, #0]
    5cf0:	4915      	ldr	r1, [pc, #84]	; (5d48 <_get_cycles_for_ms_internal+0x138>)
    5cf2:	fba1 1202 	umull	r1, r2, r1, r2
    5cf6:	08d2      	lsrs	r2, r2, #3
    5cf8:	fb02 f303 	mul.w	r3, r2, r3
    5cfc:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5d00:	4a12      	ldr	r2, [pc, #72]	; (5d4c <_get_cycles_for_ms_internal+0x13c>)
    5d02:	fba2 2303 	umull	r2, r3, r2, r3
    5d06:	095b      	lsrs	r3, r3, #5
    5d08:	e009      	b.n	5d1e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    5d0a:	88fb      	ldrh	r3, [r7, #6]
    5d0c:	683a      	ldr	r2, [r7, #0]
    5d0e:	fb02 f303 	mul.w	r3, r2, r3
    5d12:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5d16:	4a0e      	ldr	r2, [pc, #56]	; (5d50 <_get_cycles_for_ms_internal+0x140>)
    5d18:	fba2 2303 	umull	r2, r3, r2, r3
    5d1c:	099b      	lsrs	r3, r3, #6
	}
}
    5d1e:	4618      	mov	r0, r3
    5d20:	370c      	adds	r7, #12
    5d22:	46bd      	mov	sp, r7
    5d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d28:	4770      	bx	lr
    5d2a:	bf00      	nop
    5d2c:	431bde83 	.word	0x431bde83
    5d30:	aaaaaaab 	.word	0xaaaaaaab
    5d34:	0a7c5ac5 	.word	0x0a7c5ac5
    5d38:	d1b71759 	.word	0xd1b71759
    5d3c:	10624dd3 	.word	0x10624dd3
    5d40:	51eb851f 	.word	0x51eb851f
    5d44:	88888889 	.word	0x88888889
    5d48:	cccccccd 	.word	0xcccccccd
    5d4c:	1b4e81b5 	.word	0x1b4e81b5
    5d50:	057619f1 	.word	0x057619f1

00005d54 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	b082      	sub	sp, #8
    5d58:	af00      	add	r7, sp, #0
    5d5a:	4603      	mov	r3, r0
    5d5c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5d5e:	88fb      	ldrh	r3, [r7, #6]
    5d60:	2209      	movs	r2, #9
    5d62:	4904      	ldr	r1, [pc, #16]	; (5d74 <_get_cycles_for_ms+0x20>)
    5d64:	4618      	mov	r0, r3
    5d66:	4b04      	ldr	r3, [pc, #16]	; (5d78 <_get_cycles_for_ms+0x24>)
    5d68:	4798      	blx	r3
    5d6a:	4603      	mov	r3, r0
}
    5d6c:	4618      	mov	r0, r3
    5d6e:	3708      	adds	r7, #8
    5d70:	46bd      	mov	sp, r7
    5d72:	bd80      	pop	{r7, pc}
    5d74:	07270e00 	.word	0x07270e00
    5d78:	00005c11 	.word	0x00005c11
    5d7c:	00000000 	.word	0x00000000

00005d80 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5d80:	b480      	push	{r7}
    5d82:	b083      	sub	sp, #12
    5d84:	af00      	add	r7, sp, #0
    5d86:	6078      	str	r0, [r7, #4]
    5d88:	6039      	str	r1, [r7, #0]
    5d8a:	bf00      	nop
    5d8c:	f3af 8000 	nop.w

00005d90 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    5d90:	3901      	subs	r1, #1
    5d92:	d8fd      	bhi.n	5d90 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    5d94:	bf00      	nop
    5d96:	370c      	adds	r7, #12
    5d98:	46bd      	mov	sp, r7
    5d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d9e:	4770      	bx	lr

00005da0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5da0:	b480      	push	{r7}
    5da2:	b083      	sub	sp, #12
    5da4:	af00      	add	r7, sp, #0
    5da6:	6078      	str	r0, [r7, #4]
    5da8:	460b      	mov	r3, r1
    5daa:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5dac:	687b      	ldr	r3, [r7, #4]
    5dae:	881b      	ldrh	r3, [r3, #0]
    5db0:	b29a      	uxth	r2, r3
    5db2:	887b      	ldrh	r3, [r7, #2]
    5db4:	021b      	lsls	r3, r3, #8
    5db6:	b29b      	uxth	r3, r3
    5db8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    5dbc:	b29b      	uxth	r3, r3
    5dbe:	4313      	orrs	r3, r2
    5dc0:	b29a      	uxth	r2, r3
    5dc2:	687b      	ldr	r3, [r7, #4]
    5dc4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5dc6:	bf00      	nop
    5dc8:	370c      	adds	r7, #12
    5dca:	46bd      	mov	sp, r7
    5dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd0:	4770      	bx	lr

00005dd2 <hri_port_set_EVCTRL_reg>:
{
    5dd2:	b480      	push	{r7}
    5dd4:	b085      	sub	sp, #20
    5dd6:	af00      	add	r7, sp, #0
    5dd8:	60f8      	str	r0, [r7, #12]
    5dda:	460b      	mov	r3, r1
    5ddc:	607a      	str	r2, [r7, #4]
    5dde:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5de0:	7afb      	ldrb	r3, [r7, #11]
    5de2:	7afa      	ldrb	r2, [r7, #11]
    5de4:	68f9      	ldr	r1, [r7, #12]
    5de6:	01d2      	lsls	r2, r2, #7
    5de8:	440a      	add	r2, r1
    5dea:	322c      	adds	r2, #44	; 0x2c
    5dec:	6811      	ldr	r1, [r2, #0]
    5dee:	687a      	ldr	r2, [r7, #4]
    5df0:	430a      	orrs	r2, r1
    5df2:	68f9      	ldr	r1, [r7, #12]
    5df4:	01db      	lsls	r3, r3, #7
    5df6:	440b      	add	r3, r1
    5df8:	332c      	adds	r3, #44	; 0x2c
    5dfa:	601a      	str	r2, [r3, #0]
}
    5dfc:	bf00      	nop
    5dfe:	3714      	adds	r7, #20
    5e00:	46bd      	mov	sp, r7
    5e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e06:	4770      	bx	lr

00005e08 <_port_event_init>:

static inline void _port_event_init()
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    5e0c:	2200      	movs	r2, #0
    5e0e:	2100      	movs	r1, #0
    5e10:	480a      	ldr	r0, [pc, #40]	; (5e3c <_port_event_init+0x34>)
    5e12:	4b0b      	ldr	r3, [pc, #44]	; (5e40 <_port_event_init+0x38>)
    5e14:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5e16:	2200      	movs	r2, #0
    5e18:	2101      	movs	r1, #1
    5e1a:	4808      	ldr	r0, [pc, #32]	; (5e3c <_port_event_init+0x34>)
    5e1c:	4b08      	ldr	r3, [pc, #32]	; (5e40 <_port_event_init+0x38>)
    5e1e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5e20:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5e24:	2102      	movs	r1, #2
    5e26:	4805      	ldr	r0, [pc, #20]	; (5e3c <_port_event_init+0x34>)
    5e28:	4b05      	ldr	r3, [pc, #20]	; (5e40 <_port_event_init+0x38>)
    5e2a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    5e2c:	2200      	movs	r2, #0
    5e2e:	2103      	movs	r1, #3
    5e30:	4802      	ldr	r0, [pc, #8]	; (5e3c <_port_event_init+0x34>)
    5e32:	4b03      	ldr	r3, [pc, #12]	; (5e40 <_port_event_init+0x38>)
    5e34:	4798      	blx	r3
}
    5e36:	bf00      	nop
    5e38:	bd80      	pop	{r7, pc}
    5e3a:	bf00      	nop
    5e3c:	41008000 	.word	0x41008000
    5e40:	00005dd3 	.word	0x00005dd3

00005e44 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5e44:	b580      	push	{r7, lr}
    5e46:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5e48:	2104      	movs	r1, #4
    5e4a:	480b      	ldr	r0, [pc, #44]	; (5e78 <_init_chip+0x34>)
    5e4c:	4b0b      	ldr	r3, [pc, #44]	; (5e7c <_init_chip+0x38>)
    5e4e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5e50:	4b0b      	ldr	r3, [pc, #44]	; (5e80 <_init_chip+0x3c>)
    5e52:	4798      	blx	r3
	_oscctrl_init_sources();
    5e54:	4b0b      	ldr	r3, [pc, #44]	; (5e84 <_init_chip+0x40>)
    5e56:	4798      	blx	r3
	_mclk_init();
    5e58:	4b0b      	ldr	r3, [pc, #44]	; (5e88 <_init_chip+0x44>)
    5e5a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5e5c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5e60:	4b0a      	ldr	r3, [pc, #40]	; (5e8c <_init_chip+0x48>)
    5e62:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5e64:	4b0a      	ldr	r3, [pc, #40]	; (5e90 <_init_chip+0x4c>)
    5e66:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5e68:	f640 30df 	movw	r0, #3039	; 0xbdf
    5e6c:	4b07      	ldr	r3, [pc, #28]	; (5e8c <_init_chip+0x48>)
    5e6e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5e70:	4b08      	ldr	r3, [pc, #32]	; (5e94 <_init_chip+0x50>)
    5e72:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5e74:	bf00      	nop
    5e76:	bd80      	pop	{r7, pc}
    5e78:	41004000 	.word	0x41004000
    5e7c:	00005da1 	.word	0x00005da1
    5e80:	00006895 	.word	0x00006895
    5e84:	00006d5d 	.word	0x00006d5d
    5e88:	000067b5 	.word	0x000067b5
    5e8c:	0000665d 	.word	0x0000665d
    5e90:	00006d9d 	.word	0x00006d9d
    5e94:	00005e09 	.word	0x00005e09

00005e98 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5e98:	b480      	push	{r7}
    5e9a:	b083      	sub	sp, #12
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
    5ea0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	683a      	ldr	r2, [r7, #0]
    5ea6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5ea8:	2300      	movs	r3, #0
}
    5eaa:	4618      	mov	r0, r3
    5eac:	370c      	adds	r7, #12
    5eae:	46bd      	mov	sp, r7
    5eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb4:	4770      	bx	lr
	...

00005eb8 <__NVIC_EnableIRQ>:
{
    5eb8:	b480      	push	{r7}
    5eba:	b083      	sub	sp, #12
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	4603      	mov	r3, r0
    5ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	db0b      	blt.n	5ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5eca:	4909      	ldr	r1, [pc, #36]	; (5ef0 <__NVIC_EnableIRQ+0x38>)
    5ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ed0:	095b      	lsrs	r3, r3, #5
    5ed2:	88fa      	ldrh	r2, [r7, #6]
    5ed4:	f002 021f 	and.w	r2, r2, #31
    5ed8:	2001      	movs	r0, #1
    5eda:	fa00 f202 	lsl.w	r2, r0, r2
    5ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5ee2:	bf00      	nop
    5ee4:	370c      	adds	r7, #12
    5ee6:	46bd      	mov	sp, r7
    5ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eec:	4770      	bx	lr
    5eee:	bf00      	nop
    5ef0:	e000e100 	.word	0xe000e100

00005ef4 <__NVIC_DisableIRQ>:
{
    5ef4:	b480      	push	{r7}
    5ef6:	b083      	sub	sp, #12
    5ef8:	af00      	add	r7, sp, #0
    5efa:	4603      	mov	r3, r0
    5efc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f02:	2b00      	cmp	r3, #0
    5f04:	db10      	blt.n	5f28 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f06:	490b      	ldr	r1, [pc, #44]	; (5f34 <__NVIC_DisableIRQ+0x40>)
    5f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f0c:	095b      	lsrs	r3, r3, #5
    5f0e:	88fa      	ldrh	r2, [r7, #6]
    5f10:	f002 021f 	and.w	r2, r2, #31
    5f14:	2001      	movs	r0, #1
    5f16:	fa00 f202 	lsl.w	r2, r0, r2
    5f1a:	3320      	adds	r3, #32
    5f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5f20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f24:	f3bf 8f6f 	isb	sy
}
    5f28:	bf00      	nop
    5f2a:	370c      	adds	r7, #12
    5f2c:	46bd      	mov	sp, r7
    5f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f32:	4770      	bx	lr
    5f34:	e000e100 	.word	0xe000e100

00005f38 <__NVIC_ClearPendingIRQ>:
{
    5f38:	b480      	push	{r7}
    5f3a:	b083      	sub	sp, #12
    5f3c:	af00      	add	r7, sp, #0
    5f3e:	4603      	mov	r3, r0
    5f40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f46:	2b00      	cmp	r3, #0
    5f48:	db0c      	blt.n	5f64 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f4a:	4909      	ldr	r1, [pc, #36]	; (5f70 <__NVIC_ClearPendingIRQ+0x38>)
    5f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f50:	095b      	lsrs	r3, r3, #5
    5f52:	88fa      	ldrh	r2, [r7, #6]
    5f54:	f002 021f 	and.w	r2, r2, #31
    5f58:	2001      	movs	r0, #1
    5f5a:	fa00 f202 	lsl.w	r2, r0, r2
    5f5e:	3360      	adds	r3, #96	; 0x60
    5f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f64:	bf00      	nop
    5f66:	370c      	adds	r7, #12
    5f68:	46bd      	mov	sp, r7
    5f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f6e:	4770      	bx	lr
    5f70:	e000e100 	.word	0xe000e100

00005f74 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5f74:	b480      	push	{r7}
    5f76:	b083      	sub	sp, #12
    5f78:	af00      	add	r7, sp, #0
    5f7a:	6078      	str	r0, [r7, #4]
    5f7c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    5f7e:	bf00      	nop
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	685a      	ldr	r2, [r3, #4]
    5f84:	683b      	ldr	r3, [r7, #0]
    5f86:	4013      	ands	r3, r2
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d1f9      	bne.n	5f80 <hri_eic_wait_for_sync+0xc>
	};
}
    5f8c:	bf00      	nop
    5f8e:	370c      	adds	r7, #12
    5f90:	46bd      	mov	sp, r7
    5f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f96:	4770      	bx	lr

00005f98 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5f98:	b480      	push	{r7}
    5f9a:	b083      	sub	sp, #12
    5f9c:	af00      	add	r7, sp, #0
    5f9e:	6078      	str	r0, [r7, #4]
    5fa0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	685a      	ldr	r2, [r3, #4]
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	4013      	ands	r3, r2
    5faa:	2b00      	cmp	r3, #0
    5fac:	bf14      	ite	ne
    5fae:	2301      	movne	r3, #1
    5fb0:	2300      	moveq	r3, #0
    5fb2:	b2db      	uxtb	r3, r3
}
    5fb4:	4618      	mov	r0, r3
    5fb6:	370c      	adds	r7, #12
    5fb8:	46bd      	mov	sp, r7
    5fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fbe:	4770      	bx	lr

00005fc0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    5fc0:	b480      	push	{r7}
    5fc2:	b083      	sub	sp, #12
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	695b      	ldr	r3, [r3, #20]
}
    5fcc:	4618      	mov	r0, r3
    5fce:	370c      	adds	r7, #12
    5fd0:	46bd      	mov	sp, r7
    5fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd6:	4770      	bx	lr

00005fd8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    5fd8:	b480      	push	{r7}
    5fda:	b083      	sub	sp, #12
    5fdc:	af00      	add	r7, sp, #0
    5fde:	6078      	str	r0, [r7, #4]
    5fe0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	683a      	ldr	r2, [r7, #0]
    5fe6:	615a      	str	r2, [r3, #20]
}
    5fe8:	bf00      	nop
    5fea:	370c      	adds	r7, #12
    5fec:	46bd      	mov	sp, r7
    5fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff2:	4770      	bx	lr

00005ff4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	b082      	sub	sp, #8
    5ff8:	af00      	add	r7, sp, #0
    5ffa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	781b      	ldrb	r3, [r3, #0]
    6000:	b2db      	uxtb	r3, r3
    6002:	f043 0302 	orr.w	r3, r3, #2
    6006:	b2da      	uxtb	r2, r3
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    600c:	2103      	movs	r1, #3
    600e:	6878      	ldr	r0, [r7, #4]
    6010:	4b02      	ldr	r3, [pc, #8]	; (601c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    6012:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6014:	bf00      	nop
    6016:	3708      	adds	r7, #8
    6018:	46bd      	mov	sp, r7
    601a:	bd80      	pop	{r7, pc}
    601c:	00005f75 	.word	0x00005f75

00006020 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6020:	b580      	push	{r7, lr}
    6022:	b082      	sub	sp, #8
    6024:	af00      	add	r7, sp, #0
    6026:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	b2db      	uxtb	r3, r3
    602e:	f023 0302 	bic.w	r3, r3, #2
    6032:	b2da      	uxtb	r2, r3
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6038:	2103      	movs	r1, #3
    603a:	6878      	ldr	r0, [r7, #4]
    603c:	4b02      	ldr	r3, [pc, #8]	; (6048 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    603e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6040:	bf00      	nop
    6042:	3708      	adds	r7, #8
    6044:	46bd      	mov	sp, r7
    6046:	bd80      	pop	{r7, pc}
    6048:	00005f75 	.word	0x00005f75

0000604c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    604c:	b580      	push	{r7, lr}
    604e:	b084      	sub	sp, #16
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
    6054:	460b      	mov	r3, r1
    6056:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    605e:	7bfb      	ldrb	r3, [r7, #15]
    6060:	f023 0310 	bic.w	r3, r3, #16
    6064:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    6066:	78fb      	ldrb	r3, [r7, #3]
    6068:	011b      	lsls	r3, r3, #4
    606a:	b25a      	sxtb	r2, r3
    606c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6070:	4313      	orrs	r3, r2
    6072:	b25b      	sxtb	r3, r3
    6074:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    6076:	687b      	ldr	r3, [r7, #4]
    6078:	7bfa      	ldrb	r2, [r7, #15]
    607a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    607c:	2103      	movs	r1, #3
    607e:	6878      	ldr	r0, [r7, #4]
    6080:	4b02      	ldr	r3, [pc, #8]	; (608c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    6082:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6084:	bf00      	nop
    6086:	3710      	adds	r7, #16
    6088:	46bd      	mov	sp, r7
    608a:	bd80      	pop	{r7, pc}
    608c:	00005f75 	.word	0x00005f75

00006090 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6090:	b580      	push	{r7, lr}
    6092:	b084      	sub	sp, #16
    6094:	af00      	add	r7, sp, #0
    6096:	6078      	str	r0, [r7, #4]
    6098:	460b      	mov	r3, r1
    609a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    609c:	2103      	movs	r1, #3
    609e:	6878      	ldr	r0, [r7, #4]
    60a0:	4b06      	ldr	r3, [pc, #24]	; (60bc <hri_eic_get_CTRLA_reg+0x2c>)
    60a2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	781b      	ldrb	r3, [r3, #0]
    60a8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    60aa:	7bfa      	ldrb	r2, [r7, #15]
    60ac:	78fb      	ldrb	r3, [r7, #3]
    60ae:	4013      	ands	r3, r2
    60b0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    60b2:	7bfb      	ldrb	r3, [r7, #15]
}
    60b4:	4618      	mov	r0, r3
    60b6:	3710      	adds	r7, #16
    60b8:	46bd      	mov	sp, r7
    60ba:	bd80      	pop	{r7, pc}
    60bc:	00005f75 	.word	0x00005f75

000060c0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	460b      	mov	r3, r1
    60ca:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	78fa      	ldrb	r2, [r7, #3]
    60d0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    60d2:	2103      	movs	r1, #3
    60d4:	6878      	ldr	r0, [r7, #4]
    60d6:	4b03      	ldr	r3, [pc, #12]	; (60e4 <hri_eic_write_CTRLA_reg+0x24>)
    60d8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    60da:	bf00      	nop
    60dc:	3708      	adds	r7, #8
    60de:	46bd      	mov	sp, r7
    60e0:	bd80      	pop	{r7, pc}
    60e2:	bf00      	nop
    60e4:	00005f75 	.word	0x00005f75

000060e8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    60e8:	b480      	push	{r7}
    60ea:	b083      	sub	sp, #12
    60ec:	af00      	add	r7, sp, #0
    60ee:	6078      	str	r0, [r7, #4]
    60f0:	460b      	mov	r3, r1
    60f2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	78fa      	ldrb	r2, [r7, #3]
    60f8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    60fa:	bf00      	nop
    60fc:	370c      	adds	r7, #12
    60fe:	46bd      	mov	sp, r7
    6100:	f85d 7b04 	ldr.w	r7, [sp], #4
    6104:	4770      	bx	lr

00006106 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    6106:	b480      	push	{r7}
    6108:	b083      	sub	sp, #12
    610a:	af00      	add	r7, sp, #0
    610c:	6078      	str	r0, [r7, #4]
    610e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	683a      	ldr	r2, [r7, #0]
    6114:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6116:	bf00      	nop
    6118:	370c      	adds	r7, #12
    611a:	46bd      	mov	sp, r7
    611c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6120:	4770      	bx	lr

00006122 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    6122:	b480      	push	{r7}
    6124:	b083      	sub	sp, #12
    6126:	af00      	add	r7, sp, #0
    6128:	6078      	str	r0, [r7, #4]
    612a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	683a      	ldr	r2, [r7, #0]
    6130:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6132:	bf00      	nop
    6134:	370c      	adds	r7, #12
    6136:	46bd      	mov	sp, r7
    6138:	f85d 7b04 	ldr.w	r7, [sp], #4
    613c:	4770      	bx	lr

0000613e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    613e:	b480      	push	{r7}
    6140:	b085      	sub	sp, #20
    6142:	af00      	add	r7, sp, #0
    6144:	60f8      	str	r0, [r7, #12]
    6146:	460b      	mov	r3, r1
    6148:	607a      	str	r2, [r7, #4]
    614a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    614c:	7afb      	ldrb	r3, [r7, #11]
    614e:	68fa      	ldr	r2, [r7, #12]
    6150:	3306      	adds	r3, #6
    6152:	009b      	lsls	r3, r3, #2
    6154:	4413      	add	r3, r2
    6156:	687a      	ldr	r2, [r7, #4]
    6158:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    615a:	bf00      	nop
    615c:	3714      	adds	r7, #20
    615e:	46bd      	mov	sp, r7
    6160:	f85d 7b04 	ldr.w	r7, [sp], #4
    6164:	4770      	bx	lr

00006166 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6166:	b480      	push	{r7}
    6168:	b083      	sub	sp, #12
    616a:	af00      	add	r7, sp, #0
    616c:	6078      	str	r0, [r7, #4]
    616e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	683a      	ldr	r2, [r7, #0]
    6174:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6176:	bf00      	nop
    6178:	370c      	adds	r7, #12
    617a:	46bd      	mov	sp, r7
    617c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6180:	4770      	bx	lr

00006182 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    6182:	b480      	push	{r7}
    6184:	b083      	sub	sp, #12
    6186:	af00      	add	r7, sp, #0
    6188:	6078      	str	r0, [r7, #4]
    618a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	683a      	ldr	r2, [r7, #0]
    6190:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6192:	bf00      	nop
    6194:	370c      	adds	r7, #12
    6196:	46bd      	mov	sp, r7
    6198:	f85d 7b04 	ldr.w	r7, [sp], #4
    619c:	4770      	bx	lr
	...

000061a0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b082      	sub	sp, #8
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    61a8:	2101      	movs	r1, #1
    61aa:	484f      	ldr	r0, [pc, #316]	; (62e8 <_ext_irq_init+0x148>)
    61ac:	4b4f      	ldr	r3, [pc, #316]	; (62ec <_ext_irq_init+0x14c>)
    61ae:	4798      	blx	r3
    61b0:	4603      	mov	r3, r0
    61b2:	f083 0301 	eor.w	r3, r3, #1
    61b6:	b2db      	uxtb	r3, r3
    61b8:	2b00      	cmp	r3, #0
    61ba:	d011      	beq.n	61e0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    61bc:	2102      	movs	r1, #2
    61be:	484a      	ldr	r0, [pc, #296]	; (62e8 <_ext_irq_init+0x148>)
    61c0:	4b4b      	ldr	r3, [pc, #300]	; (62f0 <_ext_irq_init+0x150>)
    61c2:	4798      	blx	r3
    61c4:	4603      	mov	r3, r0
    61c6:	2b00      	cmp	r3, #0
    61c8:	d006      	beq.n	61d8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    61ca:	4847      	ldr	r0, [pc, #284]	; (62e8 <_ext_irq_init+0x148>)
    61cc:	4b49      	ldr	r3, [pc, #292]	; (62f4 <_ext_irq_init+0x154>)
    61ce:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    61d0:	2102      	movs	r1, #2
    61d2:	4845      	ldr	r0, [pc, #276]	; (62e8 <_ext_irq_init+0x148>)
    61d4:	4b48      	ldr	r3, [pc, #288]	; (62f8 <_ext_irq_init+0x158>)
    61d6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    61d8:	2101      	movs	r1, #1
    61da:	4843      	ldr	r0, [pc, #268]	; (62e8 <_ext_irq_init+0x148>)
    61dc:	4b47      	ldr	r3, [pc, #284]	; (62fc <_ext_irq_init+0x15c>)
    61de:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    61e0:	2101      	movs	r1, #1
    61e2:	4841      	ldr	r0, [pc, #260]	; (62e8 <_ext_irq_init+0x148>)
    61e4:	4b44      	ldr	r3, [pc, #272]	; (62f8 <_ext_irq_init+0x158>)
    61e6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    61e8:	2100      	movs	r1, #0
    61ea:	483f      	ldr	r0, [pc, #252]	; (62e8 <_ext_irq_init+0x148>)
    61ec:	4b44      	ldr	r3, [pc, #272]	; (6300 <_ext_irq_init+0x160>)
    61ee:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    61f0:	2100      	movs	r1, #0
    61f2:	483d      	ldr	r0, [pc, #244]	; (62e8 <_ext_irq_init+0x148>)
    61f4:	4b43      	ldr	r3, [pc, #268]	; (6304 <_ext_irq_init+0x164>)
    61f6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    61f8:	2100      	movs	r1, #0
    61fa:	483b      	ldr	r0, [pc, #236]	; (62e8 <_ext_irq_init+0x148>)
    61fc:	4b42      	ldr	r3, [pc, #264]	; (6308 <_ext_irq_init+0x168>)
    61fe:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6200:	f240 31bb 	movw	r1, #955	; 0x3bb
    6204:	4838      	ldr	r0, [pc, #224]	; (62e8 <_ext_irq_init+0x148>)
    6206:	4b41      	ldr	r3, [pc, #260]	; (630c <_ext_irq_init+0x16c>)
    6208:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    620a:	f240 313b 	movw	r1, #827	; 0x33b
    620e:	4836      	ldr	r0, [pc, #216]	; (62e8 <_ext_irq_init+0x148>)
    6210:	4b3f      	ldr	r3, [pc, #252]	; (6310 <_ext_irq_init+0x170>)
    6212:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    6214:	2100      	movs	r1, #0
    6216:	4834      	ldr	r0, [pc, #208]	; (62e8 <_ext_irq_init+0x148>)
    6218:	4b3e      	ldr	r3, [pc, #248]	; (6314 <_ext_irq_init+0x174>)
    621a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    621c:	4a3e      	ldr	r2, [pc, #248]	; (6318 <_ext_irq_init+0x178>)
    621e:	2100      	movs	r1, #0
    6220:	4831      	ldr	r0, [pc, #196]	; (62e8 <_ext_irq_init+0x148>)
    6222:	4b3e      	ldr	r3, [pc, #248]	; (631c <_ext_irq_init+0x17c>)
    6224:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6226:	2211      	movs	r2, #17
    6228:	2101      	movs	r1, #1
    622a:	482f      	ldr	r0, [pc, #188]	; (62e8 <_ext_irq_init+0x148>)
    622c:	4b3b      	ldr	r3, [pc, #236]	; (631c <_ext_irq_init+0x17c>)
    622e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6230:	482d      	ldr	r0, [pc, #180]	; (62e8 <_ext_irq_init+0x148>)
    6232:	4b3b      	ldr	r3, [pc, #236]	; (6320 <_ext_irq_init+0x180>)
    6234:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    6236:	200c      	movs	r0, #12
    6238:	4b3a      	ldr	r3, [pc, #232]	; (6324 <_ext_irq_init+0x184>)
    623a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    623c:	200c      	movs	r0, #12
    623e:	4b3a      	ldr	r3, [pc, #232]	; (6328 <_ext_irq_init+0x188>)
    6240:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    6242:	200c      	movs	r0, #12
    6244:	4b39      	ldr	r3, [pc, #228]	; (632c <_ext_irq_init+0x18c>)
    6246:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    6248:	200d      	movs	r0, #13
    624a:	4b36      	ldr	r3, [pc, #216]	; (6324 <_ext_irq_init+0x184>)
    624c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    624e:	200d      	movs	r0, #13
    6250:	4b35      	ldr	r3, [pc, #212]	; (6328 <_ext_irq_init+0x188>)
    6252:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    6254:	200d      	movs	r0, #13
    6256:	4b35      	ldr	r3, [pc, #212]	; (632c <_ext_irq_init+0x18c>)
    6258:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    625a:	200f      	movs	r0, #15
    625c:	4b31      	ldr	r3, [pc, #196]	; (6324 <_ext_irq_init+0x184>)
    625e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    6260:	200f      	movs	r0, #15
    6262:	4b31      	ldr	r3, [pc, #196]	; (6328 <_ext_irq_init+0x188>)
    6264:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    6266:	200f      	movs	r0, #15
    6268:	4b30      	ldr	r3, [pc, #192]	; (632c <_ext_irq_init+0x18c>)
    626a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    626c:	2010      	movs	r0, #16
    626e:	4b2d      	ldr	r3, [pc, #180]	; (6324 <_ext_irq_init+0x184>)
    6270:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6272:	2010      	movs	r0, #16
    6274:	4b2c      	ldr	r3, [pc, #176]	; (6328 <_ext_irq_init+0x188>)
    6276:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6278:	2010      	movs	r0, #16
    627a:	4b2c      	ldr	r3, [pc, #176]	; (632c <_ext_irq_init+0x18c>)
    627c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    627e:	2011      	movs	r0, #17
    6280:	4b28      	ldr	r3, [pc, #160]	; (6324 <_ext_irq_init+0x184>)
    6282:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6284:	2011      	movs	r0, #17
    6286:	4b28      	ldr	r3, [pc, #160]	; (6328 <_ext_irq_init+0x188>)
    6288:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    628a:	2011      	movs	r0, #17
    628c:	4b27      	ldr	r3, [pc, #156]	; (632c <_ext_irq_init+0x18c>)
    628e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6290:	2012      	movs	r0, #18
    6292:	4b24      	ldr	r3, [pc, #144]	; (6324 <_ext_irq_init+0x184>)
    6294:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6296:	2012      	movs	r0, #18
    6298:	4b23      	ldr	r3, [pc, #140]	; (6328 <_ext_irq_init+0x188>)
    629a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    629c:	2012      	movs	r0, #18
    629e:	4b23      	ldr	r3, [pc, #140]	; (632c <_ext_irq_init+0x18c>)
    62a0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    62a2:	2013      	movs	r0, #19
    62a4:	4b1f      	ldr	r3, [pc, #124]	; (6324 <_ext_irq_init+0x184>)
    62a6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    62a8:	2013      	movs	r0, #19
    62aa:	4b1f      	ldr	r3, [pc, #124]	; (6328 <_ext_irq_init+0x188>)
    62ac:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    62ae:	2013      	movs	r0, #19
    62b0:	4b1e      	ldr	r3, [pc, #120]	; (632c <_ext_irq_init+0x18c>)
    62b2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    62b4:	2014      	movs	r0, #20
    62b6:	4b1b      	ldr	r3, [pc, #108]	; (6324 <_ext_irq_init+0x184>)
    62b8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    62ba:	2014      	movs	r0, #20
    62bc:	4b1a      	ldr	r3, [pc, #104]	; (6328 <_ext_irq_init+0x188>)
    62be:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    62c0:	2014      	movs	r0, #20
    62c2:	4b1a      	ldr	r3, [pc, #104]	; (632c <_ext_irq_init+0x18c>)
    62c4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    62c6:	2015      	movs	r0, #21
    62c8:	4b16      	ldr	r3, [pc, #88]	; (6324 <_ext_irq_init+0x184>)
    62ca:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    62cc:	2015      	movs	r0, #21
    62ce:	4b16      	ldr	r3, [pc, #88]	; (6328 <_ext_irq_init+0x188>)
    62d0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    62d2:	2015      	movs	r0, #21
    62d4:	4b15      	ldr	r3, [pc, #84]	; (632c <_ext_irq_init+0x18c>)
    62d6:	4798      	blx	r3

	callback = cb;
    62d8:	4a15      	ldr	r2, [pc, #84]	; (6330 <_ext_irq_init+0x190>)
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    62de:	2300      	movs	r3, #0
}
    62e0:	4618      	mov	r0, r3
    62e2:	3708      	adds	r7, #8
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}
    62e8:	40002800 	.word	0x40002800
    62ec:	00005f99 	.word	0x00005f99
    62f0:	00006091 	.word	0x00006091
    62f4:	00006021 	.word	0x00006021
    62f8:	00005f75 	.word	0x00005f75
    62fc:	000060c1 	.word	0x000060c1
    6300:	0000604d 	.word	0x0000604d
    6304:	000060e9 	.word	0x000060e9
    6308:	00006107 	.word	0x00006107
    630c:	00006123 	.word	0x00006123
    6310:	00006167 	.word	0x00006167
    6314:	00006183 	.word	0x00006183
    6318:	90999013 	.word	0x90999013
    631c:	0000613f 	.word	0x0000613f
    6320:	00005ff5 	.word	0x00005ff5
    6324:	00005ef5 	.word	0x00005ef5
    6328:	00005f39 	.word	0x00005f39
    632c:	00005eb9 	.word	0x00005eb9
    6330:	20000e1c 	.word	0x20000e1c

00006334 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    6334:	b580      	push	{r7, lr}
    6336:	b084      	sub	sp, #16
    6338:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    633a:	4841      	ldr	r0, [pc, #260]	; (6440 <_ext_irq_handler+0x10c>)
    633c:	4b41      	ldr	r3, [pc, #260]	; (6444 <_ext_irq_handler+0x110>)
    633e:	4798      	blx	r3
    6340:	4603      	mov	r3, r0
    6342:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    6344:	f04f 33ff 	mov.w	r3, #4294967295
    6348:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    634a:	683b      	ldr	r3, [r7, #0]
    634c:	4619      	mov	r1, r3
    634e:	483c      	ldr	r0, [pc, #240]	; (6440 <_ext_irq_handler+0x10c>)
    6350:	4b3d      	ldr	r3, [pc, #244]	; (6448 <_ext_irq_handler+0x114>)
    6352:	4798      	blx	r3

	ASSERT(callback);
    6354:	4b3d      	ldr	r3, [pc, #244]	; (644c <_ext_irq_handler+0x118>)
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	2b00      	cmp	r3, #0
    635a:	bf14      	ite	ne
    635c:	2301      	movne	r3, #1
    635e:	2300      	moveq	r3, #0
    6360:	b2db      	uxtb	r3, r3
    6362:	f44f 7284 	mov.w	r2, #264	; 0x108
    6366:	493a      	ldr	r1, [pc, #232]	; (6450 <_ext_irq_handler+0x11c>)
    6368:	4618      	mov	r0, r3
    636a:	4b3a      	ldr	r3, [pc, #232]	; (6454 <_ext_irq_handler+0x120>)
    636c:	4798      	blx	r3

	while (flags) {
    636e:	e060      	b.n	6432 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    6370:	683b      	ldr	r3, [r7, #0]
    6372:	4618      	mov	r0, r3
    6374:	4b38      	ldr	r3, [pc, #224]	; (6458 <_ext_irq_handler+0x124>)
    6376:	4798      	blx	r3
    6378:	4603      	mov	r3, r0
    637a:	b2db      	uxtb	r3, r3
    637c:	3b01      	subs	r3, #1
    637e:	b2db      	uxtb	r3, r3
    6380:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6382:	e047      	b.n	6414 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6384:	2300      	movs	r3, #0
    6386:	71fb      	strb	r3, [r7, #7]
    6388:	2309      	movs	r3, #9
    638a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    638c:	e024      	b.n	63d8 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    638e:	79ba      	ldrb	r2, [r7, #6]
    6390:	79fb      	ldrb	r3, [r7, #7]
    6392:	4413      	add	r3, r2
    6394:	105b      	asrs	r3, r3, #1
    6396:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    6398:	797b      	ldrb	r3, [r7, #5]
    639a:	4a30      	ldr	r2, [pc, #192]	; (645c <_ext_irq_handler+0x128>)
    639c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    63a0:	461a      	mov	r2, r3
    63a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    63a6:	429a      	cmp	r2, r3
    63a8:	d106      	bne.n	63b8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    63aa:	797b      	ldrb	r3, [r7, #5]
    63ac:	4a2b      	ldr	r2, [pc, #172]	; (645c <_ext_irq_handler+0x128>)
    63ae:	00db      	lsls	r3, r3, #3
    63b0:	4413      	add	r3, r2
    63b2:	685b      	ldr	r3, [r3, #4]
    63b4:	60bb      	str	r3, [r7, #8]
					break;
    63b6:	e013      	b.n	63e0 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    63b8:	797b      	ldrb	r3, [r7, #5]
    63ba:	4a28      	ldr	r2, [pc, #160]	; (645c <_ext_irq_handler+0x128>)
    63bc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    63c0:	461a      	mov	r2, r3
    63c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    63c6:	429a      	cmp	r2, r3
    63c8:	da03      	bge.n	63d2 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    63ca:	797b      	ldrb	r3, [r7, #5]
    63cc:	3301      	adds	r3, #1
    63ce:	71fb      	strb	r3, [r7, #7]
    63d0:	e002      	b.n	63d8 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    63d2:	797b      	ldrb	r3, [r7, #5]
    63d4:	3b01      	subs	r3, #1
    63d6:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    63d8:	79ba      	ldrb	r2, [r7, #6]
    63da:	79fb      	ldrb	r3, [r7, #7]
    63dc:	429a      	cmp	r2, r3
    63de:	d2d6      	bcs.n	638e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    63e0:	68bb      	ldr	r3, [r7, #8]
    63e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    63e6:	d003      	beq.n	63f0 <_ext_irq_handler+0xbc>
				callback(pin);
    63e8:	4b18      	ldr	r3, [pc, #96]	; (644c <_ext_irq_handler+0x118>)
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	68b8      	ldr	r0, [r7, #8]
    63ee:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    63f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    63f4:	2201      	movs	r2, #1
    63f6:	fa02 f303 	lsl.w	r3, r2, r3
    63fa:	43da      	mvns	r2, r3
    63fc:	683b      	ldr	r3, [r7, #0]
    63fe:	4013      	ands	r3, r2
    6400:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    6402:	683b      	ldr	r3, [r7, #0]
    6404:	4618      	mov	r0, r3
    6406:	4b14      	ldr	r3, [pc, #80]	; (6458 <_ext_irq_handler+0x124>)
    6408:	4798      	blx	r3
    640a:	4603      	mov	r3, r0
    640c:	b2db      	uxtb	r3, r3
    640e:	3b01      	subs	r3, #1
    6410:	b2db      	uxtb	r3, r3
    6412:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6414:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6418:	f1b3 3fff 	cmp.w	r3, #4294967295
    641c:	d1b2      	bne.n	6384 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    641e:	4808      	ldr	r0, [pc, #32]	; (6440 <_ext_irq_handler+0x10c>)
    6420:	4b08      	ldr	r3, [pc, #32]	; (6444 <_ext_irq_handler+0x110>)
    6422:	4798      	blx	r3
    6424:	4603      	mov	r3, r0
    6426:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    6428:	683b      	ldr	r3, [r7, #0]
    642a:	4619      	mov	r1, r3
    642c:	4804      	ldr	r0, [pc, #16]	; (6440 <_ext_irq_handler+0x10c>)
    642e:	4b06      	ldr	r3, [pc, #24]	; (6448 <_ext_irq_handler+0x114>)
    6430:	4798      	blx	r3
	while (flags) {
    6432:	683b      	ldr	r3, [r7, #0]
    6434:	2b00      	cmp	r3, #0
    6436:	d19b      	bne.n	6370 <_ext_irq_handler+0x3c>
	}
}
    6438:	bf00      	nop
    643a:	3710      	adds	r7, #16
    643c:	46bd      	mov	sp, r7
    643e:	bd80      	pop	{r7, pc}
    6440:	40002800 	.word	0x40002800
    6444:	00005fc1 	.word	0x00005fc1
    6448:	00005fd9 	.word	0x00005fd9
    644c:	20000e1c 	.word	0x20000e1c
    6450:	000112b4 	.word	0x000112b4
    6454:	00005239 	.word	0x00005239
    6458:	00010cbd 	.word	0x00010cbd
    645c:	0001126c 	.word	0x0001126c

00006460 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    6460:	b580      	push	{r7, lr}
    6462:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6464:	4b01      	ldr	r3, [pc, #4]	; (646c <EIC_0_Handler+0xc>)
    6466:	4798      	blx	r3
} /**
    6468:	bf00      	nop
    646a:	bd80      	pop	{r7, pc}
    646c:	00006335 	.word	0x00006335

00006470 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    6470:	b580      	push	{r7, lr}
    6472:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6474:	4b01      	ldr	r3, [pc, #4]	; (647c <EIC_1_Handler+0xc>)
    6476:	4798      	blx	r3
} /**
    6478:	bf00      	nop
    647a:	bd80      	pop	{r7, pc}
    647c:	00006335 	.word	0x00006335

00006480 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    6480:	b580      	push	{r7, lr}
    6482:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6484:	4b01      	ldr	r3, [pc, #4]	; (648c <EIC_3_Handler+0xc>)
    6486:	4798      	blx	r3
} /**
    6488:	bf00      	nop
    648a:	bd80      	pop	{r7, pc}
    648c:	00006335 	.word	0x00006335

00006490 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    6490:	b580      	push	{r7, lr}
    6492:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6494:	4b01      	ldr	r3, [pc, #4]	; (649c <EIC_4_Handler+0xc>)
    6496:	4798      	blx	r3
} /**
    6498:	bf00      	nop
    649a:	bd80      	pop	{r7, pc}
    649c:	00006335 	.word	0x00006335

000064a0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    64a0:	b580      	push	{r7, lr}
    64a2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    64a4:	4b01      	ldr	r3, [pc, #4]	; (64ac <EIC_5_Handler+0xc>)
    64a6:	4798      	blx	r3
} /**
    64a8:	bf00      	nop
    64aa:	bd80      	pop	{r7, pc}
    64ac:	00006335 	.word	0x00006335

000064b0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    64b0:	b580      	push	{r7, lr}
    64b2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    64b4:	4b01      	ldr	r3, [pc, #4]	; (64bc <EIC_6_Handler+0xc>)
    64b6:	4798      	blx	r3
} /**
    64b8:	bf00      	nop
    64ba:	bd80      	pop	{r7, pc}
    64bc:	00006335 	.word	0x00006335

000064c0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    64c4:	4b01      	ldr	r3, [pc, #4]	; (64cc <EIC_7_Handler+0xc>)
    64c6:	4798      	blx	r3
} /**
    64c8:	bf00      	nop
    64ca:	bd80      	pop	{r7, pc}
    64cc:	00006335 	.word	0x00006335

000064d0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    64d4:	4b01      	ldr	r3, [pc, #4]	; (64dc <EIC_8_Handler+0xc>)
    64d6:	4798      	blx	r3
} /**
    64d8:	bf00      	nop
    64da:	bd80      	pop	{r7, pc}
    64dc:	00006335 	.word	0x00006335

000064e0 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    64e0:	b580      	push	{r7, lr}
    64e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    64e4:	4b01      	ldr	r3, [pc, #4]	; (64ec <EIC_9_Handler+0xc>)
    64e6:	4798      	blx	r3
}
    64e8:	bf00      	nop
    64ea:	bd80      	pop	{r7, pc}
    64ec:	00006335 	.word	0x00006335

000064f0 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    64f0:	b480      	push	{r7}
    64f2:	b085      	sub	sp, #20
    64f4:	af00      	add	r7, sp, #0
    64f6:	60f8      	str	r0, [r7, #12]
    64f8:	460b      	mov	r3, r1
    64fa:	607a      	str	r2, [r7, #4]
    64fc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    64fe:	7afa      	ldrb	r2, [r7, #11]
    6500:	68fb      	ldr	r3, [r7, #12]
    6502:	3248      	adds	r2, #72	; 0x48
    6504:	6879      	ldr	r1, [r7, #4]
    6506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    650a:	bf00      	nop
    650c:	3714      	adds	r7, #20
    650e:	46bd      	mov	sp, r7
    6510:	f85d 7b04 	ldr.w	r7, [sp], #4
    6514:	4770      	bx	lr

00006516 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    6516:	b480      	push	{r7}
    6518:	b083      	sub	sp, #12
    651a:	af00      	add	r7, sp, #0
    651c:	6078      	str	r0, [r7, #4]
    651e:	460b      	mov	r3, r1
    6520:	70fb      	strb	r3, [r7, #3]
    6522:	4613      	mov	r3, r2
    6524:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6526:	78fb      	ldrb	r3, [r7, #3]
    6528:	687a      	ldr	r2, [r7, #4]
    652a:	3304      	adds	r3, #4
    652c:	00db      	lsls	r3, r3, #3
    652e:	4413      	add	r3, r2
    6530:	78ba      	ldrb	r2, [r7, #2]
    6532:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6534:	78fb      	ldrb	r3, [r7, #3]
    6536:	78ba      	ldrb	r2, [r7, #2]
    6538:	43d2      	mvns	r2, r2
    653a:	b2d1      	uxtb	r1, r2
    653c:	687a      	ldr	r2, [r7, #4]
    653e:	3304      	adds	r3, #4
    6540:	00db      	lsls	r3, r3, #3
    6542:	4413      	add	r3, r2
    6544:	460a      	mov	r2, r1
    6546:	711a      	strb	r2, [r3, #4]
}
    6548:	bf00      	nop
    654a:	370c      	adds	r7, #12
    654c:	46bd      	mov	sp, r7
    654e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6552:	4770      	bx	lr

00006554 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    6554:	b480      	push	{r7}
    6556:	b085      	sub	sp, #20
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	460b      	mov	r3, r1
    655e:	607a      	str	r2, [r7, #4]
    6560:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6562:	7afa      	ldrb	r2, [r7, #11]
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	3204      	adds	r2, #4
    6568:	6879      	ldr	r1, [r7, #4]
    656a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    656e:	bf00      	nop
    6570:	3714      	adds	r7, #20
    6572:	46bd      	mov	sp, r7
    6574:	f85d 7b04 	ldr.w	r7, [sp], #4
    6578:	4770      	bx	lr
	...

0000657c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    657c:	b580      	push	{r7, lr}
    657e:	b082      	sub	sp, #8
    6580:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    6582:	2300      	movs	r3, #0
    6584:	71fb      	strb	r3, [r7, #7]
    6586:	e00b      	b.n	65a0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6588:	79fb      	ldrb	r3, [r7, #7]
    658a:	4a18      	ldr	r2, [pc, #96]	; (65ec <_event_system_init+0x70>)
    658c:	5cd3      	ldrb	r3, [r2, r3]
    658e:	461a      	mov	r2, r3
    6590:	79fb      	ldrb	r3, [r7, #7]
    6592:	4619      	mov	r1, r3
    6594:	4816      	ldr	r0, [pc, #88]	; (65f0 <_event_system_init+0x74>)
    6596:	4b17      	ldr	r3, [pc, #92]	; (65f4 <_event_system_init+0x78>)
    6598:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    659a:	79fb      	ldrb	r3, [r7, #7]
    659c:	3301      	adds	r3, #1
    659e:	71fb      	strb	r3, [r7, #7]
    65a0:	79fb      	ldrb	r3, [r7, #7]
    65a2:	2b42      	cmp	r3, #66	; 0x42
    65a4:	d9f0      	bls.n	6588 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    65a6:	2300      	movs	r3, #0
    65a8:	71fb      	strb	r3, [r7, #7]
    65aa:	e016      	b.n	65da <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    65ac:	79fb      	ldrb	r3, [r7, #7]
    65ae:	4a12      	ldr	r2, [pc, #72]	; (65f8 <_event_system_init+0x7c>)
    65b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    65b4:	461a      	mov	r2, r3
    65b6:	79fb      	ldrb	r3, [r7, #7]
    65b8:	4619      	mov	r1, r3
    65ba:	480d      	ldr	r0, [pc, #52]	; (65f0 <_event_system_init+0x74>)
    65bc:	4b0f      	ldr	r3, [pc, #60]	; (65fc <_event_system_init+0x80>)
    65be:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    65c0:	79fb      	ldrb	r3, [r7, #7]
    65c2:	4a0f      	ldr	r2, [pc, #60]	; (6600 <_event_system_init+0x84>)
    65c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65c8:	b2da      	uxtb	r2, r3
    65ca:	79fb      	ldrb	r3, [r7, #7]
    65cc:	4619      	mov	r1, r3
    65ce:	4808      	ldr	r0, [pc, #32]	; (65f0 <_event_system_init+0x74>)
    65d0:	4b0c      	ldr	r3, [pc, #48]	; (6604 <_event_system_init+0x88>)
    65d2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    65d4:	79fb      	ldrb	r3, [r7, #7]
    65d6:	3301      	adds	r3, #1
    65d8:	71fb      	strb	r3, [r7, #7]
    65da:	79fb      	ldrb	r3, [r7, #7]
    65dc:	2b1f      	cmp	r3, #31
    65de:	d9e5      	bls.n	65ac <_event_system_init+0x30>
	}

	return ERR_NONE;
    65e0:	2300      	movs	r3, #0
}
    65e2:	4618      	mov	r0, r3
    65e4:	3708      	adds	r7, #8
    65e6:	46bd      	mov	sp, r7
    65e8:	bd80      	pop	{r7, pc}
    65ea:	bf00      	nop
    65ec:	000112cc 	.word	0x000112cc
    65f0:	4100e000 	.word	0x4100e000
    65f4:	000064f1 	.word	0x000064f1
    65f8:	00011310 	.word	0x00011310
    65fc:	00006555 	.word	0x00006555
    6600:	00011350 	.word	0x00011350
    6604:	00006517 	.word	0x00006517

00006608 <hri_gclk_wait_for_sync>:
{
    6608:	b480      	push	{r7}
    660a:	b083      	sub	sp, #12
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
    6610:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6612:	bf00      	nop
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	685a      	ldr	r2, [r3, #4]
    6618:	683b      	ldr	r3, [r7, #0]
    661a:	4013      	ands	r3, r2
    661c:	2b00      	cmp	r3, #0
    661e:	d1f9      	bne.n	6614 <hri_gclk_wait_for_sync+0xc>
}
    6620:	bf00      	nop
    6622:	370c      	adds	r7, #12
    6624:	46bd      	mov	sp, r7
    6626:	f85d 7b04 	ldr.w	r7, [sp], #4
    662a:	4770      	bx	lr

0000662c <hri_gclk_write_GENCTRL_reg>:
{
    662c:	b580      	push	{r7, lr}
    662e:	b084      	sub	sp, #16
    6630:	af00      	add	r7, sp, #0
    6632:	60f8      	str	r0, [r7, #12]
    6634:	460b      	mov	r3, r1
    6636:	607a      	str	r2, [r7, #4]
    6638:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    663a:	7afa      	ldrb	r2, [r7, #11]
    663c:	68fb      	ldr	r3, [r7, #12]
    663e:	3208      	adds	r2, #8
    6640:	6879      	ldr	r1, [r7, #4]
    6642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6646:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    664a:	68f8      	ldr	r0, [r7, #12]
    664c:	4b02      	ldr	r3, [pc, #8]	; (6658 <hri_gclk_write_GENCTRL_reg+0x2c>)
    664e:	4798      	blx	r3
}
    6650:	bf00      	nop
    6652:	3710      	adds	r7, #16
    6654:	46bd      	mov	sp, r7
    6656:	bd80      	pop	{r7, pc}
    6658:	00006609 	.word	0x00006609

0000665c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    665c:	b580      	push	{r7, lr}
    665e:	b082      	sub	sp, #8
    6660:	af00      	add	r7, sp, #0
    6662:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	f003 0301 	and.w	r3, r3, #1
    666a:	2b00      	cmp	r3, #0
    666c:	d004      	beq.n	6678 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    666e:	4a3b      	ldr	r2, [pc, #236]	; (675c <_gclk_init_generators_by_fref+0x100>)
    6670:	2100      	movs	r1, #0
    6672:	483b      	ldr	r0, [pc, #236]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    6674:	4b3b      	ldr	r3, [pc, #236]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    6676:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	f003 0302 	and.w	r3, r3, #2
    667e:	2b00      	cmp	r3, #0
    6680:	d004      	beq.n	668c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    6682:	4a39      	ldr	r2, [pc, #228]	; (6768 <_gclk_init_generators_by_fref+0x10c>)
    6684:	2101      	movs	r1, #1
    6686:	4836      	ldr	r0, [pc, #216]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    6688:	4b36      	ldr	r3, [pc, #216]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    668a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	f003 0304 	and.w	r3, r3, #4
    6692:	2b00      	cmp	r3, #0
    6694:	d004      	beq.n	66a0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    6696:	4a35      	ldr	r2, [pc, #212]	; (676c <_gclk_init_generators_by_fref+0x110>)
    6698:	2102      	movs	r1, #2
    669a:	4831      	ldr	r0, [pc, #196]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    669c:	4b31      	ldr	r3, [pc, #196]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    669e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    66a0:	687b      	ldr	r3, [r7, #4]
    66a2:	f003 0308 	and.w	r3, r3, #8
    66a6:	2b00      	cmp	r3, #0
    66a8:	d004      	beq.n	66b4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    66aa:	4a31      	ldr	r2, [pc, #196]	; (6770 <_gclk_init_generators_by_fref+0x114>)
    66ac:	2103      	movs	r1, #3
    66ae:	482c      	ldr	r0, [pc, #176]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    66b0:	4b2c      	ldr	r3, [pc, #176]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    66b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	f003 0310 	and.w	r3, r3, #16
    66ba:	2b00      	cmp	r3, #0
    66bc:	d004      	beq.n	66c8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    66be:	4a2d      	ldr	r2, [pc, #180]	; (6774 <_gclk_init_generators_by_fref+0x118>)
    66c0:	2104      	movs	r1, #4
    66c2:	4827      	ldr	r0, [pc, #156]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    66c4:	4b27      	ldr	r3, [pc, #156]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    66c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	f003 0320 	and.w	r3, r3, #32
    66ce:	2b00      	cmp	r3, #0
    66d0:	d004      	beq.n	66dc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    66d2:	4a29      	ldr	r2, [pc, #164]	; (6778 <_gclk_init_generators_by_fref+0x11c>)
    66d4:	2105      	movs	r1, #5
    66d6:	4822      	ldr	r0, [pc, #136]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    66d8:	4b22      	ldr	r3, [pc, #136]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    66da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    66e2:	2b00      	cmp	r3, #0
    66e4:	d004      	beq.n	66f0 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    66e6:	4a25      	ldr	r2, [pc, #148]	; (677c <_gclk_init_generators_by_fref+0x120>)
    66e8:	2106      	movs	r1, #6
    66ea:	481d      	ldr	r0, [pc, #116]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    66ec:	4b1d      	ldr	r3, [pc, #116]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    66ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    66f6:	2b00      	cmp	r3, #0
    66f8:	d004      	beq.n	6704 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    66fa:	4a21      	ldr	r2, [pc, #132]	; (6780 <_gclk_init_generators_by_fref+0x124>)
    66fc:	2107      	movs	r1, #7
    66fe:	4818      	ldr	r0, [pc, #96]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    6700:	4b18      	ldr	r3, [pc, #96]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    6702:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	f403 7380 	and.w	r3, r3, #256	; 0x100
    670a:	2b00      	cmp	r3, #0
    670c:	d004      	beq.n	6718 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    670e:	4a1d      	ldr	r2, [pc, #116]	; (6784 <_gclk_init_generators_by_fref+0x128>)
    6710:	2108      	movs	r1, #8
    6712:	4813      	ldr	r0, [pc, #76]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    6714:	4b13      	ldr	r3, [pc, #76]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    6716:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    6718:	687b      	ldr	r3, [r7, #4]
    671a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    671e:	2b00      	cmp	r3, #0
    6720:	d004      	beq.n	672c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    6722:	4a19      	ldr	r2, [pc, #100]	; (6788 <_gclk_init_generators_by_fref+0x12c>)
    6724:	2109      	movs	r1, #9
    6726:	480e      	ldr	r0, [pc, #56]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    6728:	4b0e      	ldr	r3, [pc, #56]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    672a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6732:	2b00      	cmp	r3, #0
    6734:	d004      	beq.n	6740 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    6736:	4a15      	ldr	r2, [pc, #84]	; (678c <_gclk_init_generators_by_fref+0x130>)
    6738:	210a      	movs	r1, #10
    673a:	4809      	ldr	r0, [pc, #36]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    673c:	4b09      	ldr	r3, [pc, #36]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    673e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6746:	2b00      	cmp	r3, #0
    6748:	d004      	beq.n	6754 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    674a:	4a11      	ldr	r2, [pc, #68]	; (6790 <_gclk_init_generators_by_fref+0x134>)
    674c:	210b      	movs	r1, #11
    674e:	4804      	ldr	r0, [pc, #16]	; (6760 <_gclk_init_generators_by_fref+0x104>)
    6750:	4b04      	ldr	r3, [pc, #16]	; (6764 <_gclk_init_generators_by_fref+0x108>)
    6752:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6754:	bf00      	nop
    6756:	3708      	adds	r7, #8
    6758:	46bd      	mov	sp, r7
    675a:	bd80      	pop	{r7, pc}
    675c:	00010107 	.word	0x00010107
    6760:	40001c00 	.word	0x40001c00
    6764:	0000662d 	.word	0x0000662d
    6768:	00010907 	.word	0x00010907
    676c:	00010906 	.word	0x00010906
    6770:	00020908 	.word	0x00020908
    6774:	00010901 	.word	0x00010901
    6778:	00062901 	.word	0x00062901
    677c:	000c2901 	.word	0x000c2901
    6780:	00082908 	.word	0x00082908
    6784:	00032901 	.word	0x00032901
    6788:	00011908 	.word	0x00011908
    678c:	00010905 	.word	0x00010905
    6790:	00041905 	.word	0x00041905

00006794 <hri_mclk_write_CPUDIV_reg>:
{
    6794:	b480      	push	{r7}
    6796:	b083      	sub	sp, #12
    6798:	af00      	add	r7, sp, #0
    679a:	6078      	str	r0, [r7, #4]
    679c:	460b      	mov	r3, r1
    679e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	78fa      	ldrb	r2, [r7, #3]
    67a4:	715a      	strb	r2, [r3, #5]
}
    67a6:	bf00      	nop
    67a8:	370c      	adds	r7, #12
    67aa:	46bd      	mov	sp, r7
    67ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    67b0:	4770      	bx	lr
	...

000067b4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    67ba:	4b05      	ldr	r3, [pc, #20]	; (67d0 <_mclk_init+0x1c>)
    67bc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    67be:	2101      	movs	r1, #1
    67c0:	6878      	ldr	r0, [r7, #4]
    67c2:	4b04      	ldr	r3, [pc, #16]	; (67d4 <_mclk_init+0x20>)
    67c4:	4798      	blx	r3
}
    67c6:	bf00      	nop
    67c8:	3708      	adds	r7, #8
    67ca:	46bd      	mov	sp, r7
    67cc:	bd80      	pop	{r7, pc}
    67ce:	bf00      	nop
    67d0:	40000800 	.word	0x40000800
    67d4:	00006795 	.word	0x00006795

000067d8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    67d8:	b480      	push	{r7}
    67da:	b083      	sub	sp, #12
    67dc:	af00      	add	r7, sp, #0
    67de:	6078      	str	r0, [r7, #4]
    67e0:	460b      	mov	r3, r1
    67e2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	78fa      	ldrb	r2, [r7, #3]
    67e8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    67ea:	bf00      	nop
    67ec:	370c      	adds	r7, #12
    67ee:	46bd      	mov	sp, r7
    67f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    67f4:	4770      	bx	lr

000067f6 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    67f6:	b480      	push	{r7}
    67f8:	b083      	sub	sp, #12
    67fa:	af00      	add	r7, sp, #0
    67fc:	6078      	str	r0, [r7, #4]
    67fe:	460b      	mov	r3, r1
    6800:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6802:	687b      	ldr	r3, [r7, #4]
    6804:	887a      	ldrh	r2, [r7, #2]
    6806:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6808:	bf00      	nop
    680a:	370c      	adds	r7, #12
    680c:	46bd      	mov	sp, r7
    680e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6812:	4770      	bx	lr

00006814 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6814:	b480      	push	{r7}
    6816:	b083      	sub	sp, #12
    6818:	af00      	add	r7, sp, #0
    681a:	6078      	str	r0, [r7, #4]
    681c:	460b      	mov	r3, r1
    681e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	78fa      	ldrb	r2, [r7, #3]
    6824:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6826:	bf00      	nop
    6828:	370c      	adds	r7, #12
    682a:	46bd      	mov	sp, r7
    682c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6830:	4770      	bx	lr

00006832 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6832:	b480      	push	{r7}
    6834:	b083      	sub	sp, #12
    6836:	af00      	add	r7, sp, #0
    6838:	6078      	str	r0, [r7, #4]
    683a:	460b      	mov	r3, r1
    683c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	78fa      	ldrb	r2, [r7, #3]
    6842:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6844:	bf00      	nop
    6846:	370c      	adds	r7, #12
    6848:	46bd      	mov	sp, r7
    684a:	f85d 7b04 	ldr.w	r7, [sp], #4
    684e:	4770      	bx	lr

00006850 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6850:	b480      	push	{r7}
    6852:	b085      	sub	sp, #20
    6854:	af00      	add	r7, sp, #0
    6856:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6858:	687b      	ldr	r3, [r7, #4]
    685a:	69db      	ldr	r3, [r3, #28]
    685c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    685e:	68fb      	ldr	r3, [r7, #12]
    6860:	0a1b      	lsrs	r3, r3, #8
    6862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6866:	60fb      	str	r3, [r7, #12]
	return tmp;
    6868:	68fb      	ldr	r3, [r7, #12]
}
    686a:	4618      	mov	r0, r3
    686c:	3714      	adds	r7, #20
    686e:	46bd      	mov	sp, r7
    6870:	f85d 7b04 	ldr.w	r7, [sp], #4
    6874:	4770      	bx	lr

00006876 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6876:	b480      	push	{r7}
    6878:	b083      	sub	sp, #12
    687a:	af00      	add	r7, sp, #0
    687c:	6078      	str	r0, [r7, #4]
    687e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	683a      	ldr	r2, [r7, #0]
    6884:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6886:	bf00      	nop
    6888:	370c      	adds	r7, #12
    688a:	46bd      	mov	sp, r7
    688c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6890:	4770      	bx	lr
	...

00006894 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6894:	b580      	push	{r7, lr}
    6896:	b082      	sub	sp, #8
    6898:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    689a:	4b13      	ldr	r3, [pc, #76]	; (68e8 <_osc32kctrl_init_sources+0x54>)
    689c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    689e:	2300      	movs	r3, #0
    68a0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    68a2:	f242 018e 	movw	r1, #8334	; 0x208e
    68a6:	6878      	ldr	r0, [r7, #4]
    68a8:	4b10      	ldr	r3, [pc, #64]	; (68ec <_osc32kctrl_init_sources+0x58>)
    68aa:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    68ac:	2100      	movs	r1, #0
    68ae:	6878      	ldr	r0, [r7, #4]
    68b0:	4b0f      	ldr	r3, [pc, #60]	; (68f0 <_osc32kctrl_init_sources+0x5c>)
    68b2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    68b4:	2100      	movs	r1, #0
    68b6:	6878      	ldr	r0, [r7, #4]
    68b8:	4b0e      	ldr	r3, [pc, #56]	; (68f4 <_osc32kctrl_init_sources+0x60>)
    68ba:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    68bc:	6878      	ldr	r0, [r7, #4]
    68be:	4b0e      	ldr	r3, [pc, #56]	; (68f8 <_osc32kctrl_init_sources+0x64>)
    68c0:	4798      	blx	r3
    68c2:	4603      	mov	r3, r0
    68c4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    68c6:	887b      	ldrh	r3, [r7, #2]
    68c8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    68ca:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    68ce:	4619      	mov	r1, r3
    68d0:	6878      	ldr	r0, [r7, #4]
    68d2:	4b0a      	ldr	r3, [pc, #40]	; (68fc <_osc32kctrl_init_sources+0x68>)
    68d4:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    68d6:	2100      	movs	r1, #0
    68d8:	6878      	ldr	r0, [r7, #4]
    68da:	4b09      	ldr	r3, [pc, #36]	; (6900 <_osc32kctrl_init_sources+0x6c>)
    68dc:	4798      	blx	r3
	(void)calib;
}
    68de:	bf00      	nop
    68e0:	3708      	adds	r7, #8
    68e2:	46bd      	mov	sp, r7
    68e4:	bd80      	pop	{r7, pc}
    68e6:	bf00      	nop
    68e8:	40001400 	.word	0x40001400
    68ec:	000067f7 	.word	0x000067f7
    68f0:	00006815 	.word	0x00006815
    68f4:	00006833 	.word	0x00006833
    68f8:	00006851 	.word	0x00006851
    68fc:	00006877 	.word	0x00006877
    6900:	000067d9 	.word	0x000067d9

00006904 <hri_gclk_wait_for_sync>:
{
    6904:	b480      	push	{r7}
    6906:	b083      	sub	sp, #12
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
    690c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    690e:	bf00      	nop
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	685a      	ldr	r2, [r3, #4]
    6914:	683b      	ldr	r3, [r7, #0]
    6916:	4013      	ands	r3, r2
    6918:	2b00      	cmp	r3, #0
    691a:	d1f9      	bne.n	6910 <hri_gclk_wait_for_sync+0xc>
}
    691c:	bf00      	nop
    691e:	370c      	adds	r7, #12
    6920:	46bd      	mov	sp, r7
    6922:	f85d 7b04 	ldr.w	r7, [sp], #4
    6926:	4770      	bx	lr

00006928 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6928:	b480      	push	{r7}
    692a:	b083      	sub	sp, #12
    692c:	af00      	add	r7, sp, #0
    692e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	685b      	ldr	r3, [r3, #4]
    6934:	089b      	lsrs	r3, r3, #2
    6936:	f003 0301 	and.w	r3, r3, #1
    693a:	2b00      	cmp	r3, #0
    693c:	bf14      	ite	ne
    693e:	2301      	movne	r3, #1
    6940:	2300      	moveq	r3, #0
    6942:	b2db      	uxtb	r3, r3
}
    6944:	4618      	mov	r0, r3
    6946:	370c      	adds	r7, #12
    6948:	46bd      	mov	sp, r7
    694a:	f85d 7b04 	ldr.w	r7, [sp], #4
    694e:	4770      	bx	lr

00006950 <hri_gclk_read_SYNCBUSY_reg>:
{
    6950:	b480      	push	{r7}
    6952:	b083      	sub	sp, #12
    6954:	af00      	add	r7, sp, #0
    6956:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6958:	687b      	ldr	r3, [r7, #4]
    695a:	685b      	ldr	r3, [r3, #4]
}
    695c:	4618      	mov	r0, r3
    695e:	370c      	adds	r7, #12
    6960:	46bd      	mov	sp, r7
    6962:	f85d 7b04 	ldr.w	r7, [sp], #4
    6966:	4770      	bx	lr

00006968 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6968:	b580      	push	{r7, lr}
    696a:	b086      	sub	sp, #24
    696c:	af00      	add	r7, sp, #0
    696e:	60f8      	str	r0, [r7, #12]
    6970:	460b      	mov	r3, r1
    6972:	607a      	str	r2, [r7, #4]
    6974:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6976:	7afa      	ldrb	r2, [r7, #11]
    6978:	68fb      	ldr	r3, [r7, #12]
    697a:	3208      	adds	r2, #8
    697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6980:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6982:	697b      	ldr	r3, [r7, #20]
    6984:	f023 030f 	bic.w	r3, r3, #15
    6988:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	f003 030f 	and.w	r3, r3, #15
    6990:	697a      	ldr	r2, [r7, #20]
    6992:	4313      	orrs	r3, r2
    6994:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6996:	7afa      	ldrb	r2, [r7, #11]
    6998:	68fb      	ldr	r3, [r7, #12]
    699a:	3208      	adds	r2, #8
    699c:	6979      	ldr	r1, [r7, #20]
    699e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    69a2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    69a6:	68f8      	ldr	r0, [r7, #12]
    69a8:	4b02      	ldr	r3, [pc, #8]	; (69b4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    69aa:	4798      	blx	r3
}
    69ac:	bf00      	nop
    69ae:	3718      	adds	r7, #24
    69b0:	46bd      	mov	sp, r7
    69b2:	bd80      	pop	{r7, pc}
    69b4:	00006905 	.word	0x00006905

000069b8 <hri_gclk_write_PCHCTRL_reg>:
{
    69b8:	b480      	push	{r7}
    69ba:	b085      	sub	sp, #20
    69bc:	af00      	add	r7, sp, #0
    69be:	60f8      	str	r0, [r7, #12]
    69c0:	460b      	mov	r3, r1
    69c2:	607a      	str	r2, [r7, #4]
    69c4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    69c6:	7afa      	ldrb	r2, [r7, #11]
    69c8:	68fb      	ldr	r3, [r7, #12]
    69ca:	3220      	adds	r2, #32
    69cc:	6879      	ldr	r1, [r7, #4]
    69ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    69d2:	bf00      	nop
    69d4:	3714      	adds	r7, #20
    69d6:	46bd      	mov	sp, r7
    69d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69dc:	4770      	bx	lr

000069de <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    69de:	b480      	push	{r7}
    69e0:	b085      	sub	sp, #20
    69e2:	af00      	add	r7, sp, #0
    69e4:	60f8      	str	r0, [r7, #12]
    69e6:	460b      	mov	r3, r1
    69e8:	607a      	str	r2, [r7, #4]
    69ea:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    69ec:	bf00      	nop
    69ee:	7afa      	ldrb	r2, [r7, #11]
    69f0:	68f9      	ldr	r1, [r7, #12]
    69f2:	4613      	mov	r3, r2
    69f4:	009b      	lsls	r3, r3, #2
    69f6:	4413      	add	r3, r2
    69f8:	009b      	lsls	r3, r3, #2
    69fa:	440b      	add	r3, r1
    69fc:	333c      	adds	r3, #60	; 0x3c
    69fe:	681a      	ldr	r2, [r3, #0]
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	4013      	ands	r3, r2
    6a04:	2b00      	cmp	r3, #0
    6a06:	d1f2      	bne.n	69ee <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6a08:	bf00      	nop
    6a0a:	3714      	adds	r7, #20
    6a0c:	46bd      	mov	sp, r7
    6a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a12:	4770      	bx	lr

00006a14 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6a14:	b480      	push	{r7}
    6a16:	b083      	sub	sp, #12
    6a18:	af00      	add	r7, sp, #0
    6a1a:	6078      	str	r0, [r7, #4]
    6a1c:	460b      	mov	r3, r1
    6a1e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6a20:	78fa      	ldrb	r2, [r7, #3]
    6a22:	6879      	ldr	r1, [r7, #4]
    6a24:	4613      	mov	r3, r2
    6a26:	009b      	lsls	r3, r3, #2
    6a28:	4413      	add	r3, r2
    6a2a:	009b      	lsls	r3, r3, #2
    6a2c:	440b      	add	r3, r1
    6a2e:	3340      	adds	r3, #64	; 0x40
    6a30:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6a32:	f003 0301 	and.w	r3, r3, #1
    6a36:	2b00      	cmp	r3, #0
    6a38:	bf14      	ite	ne
    6a3a:	2301      	movne	r3, #1
    6a3c:	2300      	moveq	r3, #0
    6a3e:	b2db      	uxtb	r3, r3
}
    6a40:	4618      	mov	r0, r3
    6a42:	370c      	adds	r7, #12
    6a44:	46bd      	mov	sp, r7
    6a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a4a:	4770      	bx	lr

00006a4c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6a4c:	b480      	push	{r7}
    6a4e:	b083      	sub	sp, #12
    6a50:	af00      	add	r7, sp, #0
    6a52:	6078      	str	r0, [r7, #4]
    6a54:	460b      	mov	r3, r1
    6a56:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6a58:	78fa      	ldrb	r2, [r7, #3]
    6a5a:	6879      	ldr	r1, [r7, #4]
    6a5c:	4613      	mov	r3, r2
    6a5e:	009b      	lsls	r3, r3, #2
    6a60:	4413      	add	r3, r2
    6a62:	009b      	lsls	r3, r3, #2
    6a64:	440b      	add	r3, r1
    6a66:	3340      	adds	r3, #64	; 0x40
    6a68:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6a6a:	085b      	lsrs	r3, r3, #1
    6a6c:	f003 0301 	and.w	r3, r3, #1
    6a70:	2b00      	cmp	r3, #0
    6a72:	bf14      	ite	ne
    6a74:	2301      	movne	r3, #1
    6a76:	2300      	moveq	r3, #0
    6a78:	b2db      	uxtb	r3, r3
}
    6a7a:	4618      	mov	r0, r3
    6a7c:	370c      	adds	r7, #12
    6a7e:	46bd      	mov	sp, r7
    6a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a84:	4770      	bx	lr
	...

00006a88 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	b082      	sub	sp, #8
    6a8c:	af00      	add	r7, sp, #0
    6a8e:	6078      	str	r0, [r7, #4]
    6a90:	460b      	mov	r3, r1
    6a92:	70fb      	strb	r3, [r7, #3]
    6a94:	4613      	mov	r3, r2
    6a96:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6a98:	78fa      	ldrb	r2, [r7, #3]
    6a9a:	6879      	ldr	r1, [r7, #4]
    6a9c:	4613      	mov	r3, r2
    6a9e:	009b      	lsls	r3, r3, #2
    6aa0:	4413      	add	r3, r2
    6aa2:	009b      	lsls	r3, r3, #2
    6aa4:	440b      	add	r3, r1
    6aa6:	3330      	adds	r3, #48	; 0x30
    6aa8:	78ba      	ldrb	r2, [r7, #2]
    6aaa:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6aac:	78fb      	ldrb	r3, [r7, #3]
    6aae:	2202      	movs	r2, #2
    6ab0:	4619      	mov	r1, r3
    6ab2:	6878      	ldr	r0, [r7, #4]
    6ab4:	4b02      	ldr	r3, [pc, #8]	; (6ac0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6ab6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6ab8:	bf00      	nop
    6aba:	3708      	adds	r7, #8
    6abc:	46bd      	mov	sp, r7
    6abe:	bd80      	pop	{r7, pc}
    6ac0:	000069df 	.word	0x000069df

00006ac4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6ac4:	b580      	push	{r7, lr}
    6ac6:	b084      	sub	sp, #16
    6ac8:	af00      	add	r7, sp, #0
    6aca:	60f8      	str	r0, [r7, #12]
    6acc:	460b      	mov	r3, r1
    6ace:	607a      	str	r2, [r7, #4]
    6ad0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6ad2:	7afa      	ldrb	r2, [r7, #11]
    6ad4:	68f9      	ldr	r1, [r7, #12]
    6ad6:	4613      	mov	r3, r2
    6ad8:	009b      	lsls	r3, r3, #2
    6ada:	4413      	add	r3, r2
    6adc:	009b      	lsls	r3, r3, #2
    6ade:	440b      	add	r3, r1
    6ae0:	3334      	adds	r3, #52	; 0x34
    6ae2:	687a      	ldr	r2, [r7, #4]
    6ae4:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6ae6:	7afb      	ldrb	r3, [r7, #11]
    6ae8:	2206      	movs	r2, #6
    6aea:	4619      	mov	r1, r3
    6aec:	68f8      	ldr	r0, [r7, #12]
    6aee:	4b03      	ldr	r3, [pc, #12]	; (6afc <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6af0:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6af2:	bf00      	nop
    6af4:	3710      	adds	r7, #16
    6af6:	46bd      	mov	sp, r7
    6af8:	bd80      	pop	{r7, pc}
    6afa:	bf00      	nop
    6afc:	000069df 	.word	0x000069df

00006b00 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6b00:	b480      	push	{r7}
    6b02:	b085      	sub	sp, #20
    6b04:	af00      	add	r7, sp, #0
    6b06:	60f8      	str	r0, [r7, #12]
    6b08:	460b      	mov	r3, r1
    6b0a:	607a      	str	r2, [r7, #4]
    6b0c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6b0e:	7afa      	ldrb	r2, [r7, #11]
    6b10:	68f9      	ldr	r1, [r7, #12]
    6b12:	4613      	mov	r3, r2
    6b14:	009b      	lsls	r3, r3, #2
    6b16:	4413      	add	r3, r2
    6b18:	009b      	lsls	r3, r3, #2
    6b1a:	440b      	add	r3, r1
    6b1c:	3338      	adds	r3, #56	; 0x38
    6b1e:	687a      	ldr	r2, [r7, #4]
    6b20:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6b22:	bf00      	nop
    6b24:	3714      	adds	r7, #20
    6b26:	46bd      	mov	sp, r7
    6b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b2c:	4770      	bx	lr

00006b2e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6b2e:	b480      	push	{r7}
    6b30:	b083      	sub	sp, #12
    6b32:	af00      	add	r7, sp, #0
    6b34:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	691b      	ldr	r3, [r3, #16]
    6b3a:	085b      	lsrs	r3, r3, #1
    6b3c:	f003 0301 	and.w	r3, r3, #1
    6b40:	2b00      	cmp	r3, #0
    6b42:	bf14      	ite	ne
    6b44:	2301      	movne	r3, #1
    6b46:	2300      	moveq	r3, #0
    6b48:	b2db      	uxtb	r3, r3
}
    6b4a:	4618      	mov	r0, r3
    6b4c:	370c      	adds	r7, #12
    6b4e:	46bd      	mov	sp, r7
    6b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b54:	4770      	bx	lr

00006b56 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6b56:	b480      	push	{r7}
    6b58:	b083      	sub	sp, #12
    6b5a:	af00      	add	r7, sp, #0
    6b5c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6b5e:	687b      	ldr	r3, [r7, #4]
    6b60:	691b      	ldr	r3, [r3, #16]
    6b62:	0a1b      	lsrs	r3, r3, #8
    6b64:	f003 0301 	and.w	r3, r3, #1
    6b68:	2b00      	cmp	r3, #0
    6b6a:	bf14      	ite	ne
    6b6c:	2301      	movne	r3, #1
    6b6e:	2300      	moveq	r3, #0
    6b70:	b2db      	uxtb	r3, r3
}
    6b72:	4618      	mov	r0, r3
    6b74:	370c      	adds	r7, #12
    6b76:	46bd      	mov	sp, r7
    6b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b7c:	4770      	bx	lr

00006b7e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6b7e:	b480      	push	{r7}
    6b80:	b085      	sub	sp, #20
    6b82:	af00      	add	r7, sp, #0
    6b84:	6078      	str	r0, [r7, #4]
    6b86:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6b88:	687b      	ldr	r3, [r7, #4]
    6b8a:	691b      	ldr	r3, [r3, #16]
    6b8c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6b8e:	68fa      	ldr	r2, [r7, #12]
    6b90:	683b      	ldr	r3, [r7, #0]
    6b92:	4013      	ands	r3, r2
    6b94:	60fb      	str	r3, [r7, #12]
	return tmp;
    6b96:	68fb      	ldr	r3, [r7, #12]
}
    6b98:	4618      	mov	r0, r3
    6b9a:	3714      	adds	r7, #20
    6b9c:	46bd      	mov	sp, r7
    6b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ba2:	4770      	bx	lr

00006ba4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6ba4:	b480      	push	{r7}
    6ba6:	b085      	sub	sp, #20
    6ba8:	af00      	add	r7, sp, #0
    6baa:	60f8      	str	r0, [r7, #12]
    6bac:	460b      	mov	r3, r1
    6bae:	607a      	str	r2, [r7, #4]
    6bb0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6bb2:	7afb      	ldrb	r3, [r7, #11]
    6bb4:	68fa      	ldr	r2, [r7, #12]
    6bb6:	3304      	adds	r3, #4
    6bb8:	009b      	lsls	r3, r3, #2
    6bba:	4413      	add	r3, r2
    6bbc:	687a      	ldr	r2, [r7, #4]
    6bbe:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6bc0:	bf00      	nop
    6bc2:	3714      	adds	r7, #20
    6bc4:	46bd      	mov	sp, r7
    6bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bca:	4770      	bx	lr

00006bcc <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6bcc:	b480      	push	{r7}
    6bce:	b083      	sub	sp, #12
    6bd0:	af00      	add	r7, sp, #0
    6bd2:	6078      	str	r0, [r7, #4]
    6bd4:	460b      	mov	r3, r1
    6bd6:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	78fa      	ldrb	r2, [r7, #3]
    6bdc:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6bde:	bf00      	nop
    6be0:	370c      	adds	r7, #12
    6be2:	46bd      	mov	sp, r7
    6be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6be8:	4770      	bx	lr

00006bea <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    6bea:	b480      	push	{r7}
    6bec:	b085      	sub	sp, #20
    6bee:	af00      	add	r7, sp, #0
    6bf0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
    6bf8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6bfa:	7bfb      	ldrb	r3, [r7, #15]
    6bfc:	f003 0301 	and.w	r3, r3, #1
    6c00:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6c02:	7bfb      	ldrb	r3, [r7, #15]
    6c04:	2b00      	cmp	r3, #0
    6c06:	bf14      	ite	ne
    6c08:	2301      	movne	r3, #1
    6c0a:	2300      	moveq	r3, #0
    6c0c:	b2db      	uxtb	r3, r3
}
    6c0e:	4618      	mov	r0, r3
    6c10:	3714      	adds	r7, #20
    6c12:	46bd      	mov	sp, r7
    6c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c18:	4770      	bx	lr

00006c1a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    6c1a:	b480      	push	{r7}
    6c1c:	b083      	sub	sp, #12
    6c1e:	af00      	add	r7, sp, #0
    6c20:	6078      	str	r0, [r7, #4]
    6c22:	460b      	mov	r3, r1
    6c24:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	78fa      	ldrb	r2, [r7, #3]
    6c2a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c2e:	bf00      	nop
    6c30:	370c      	adds	r7, #12
    6c32:	46bd      	mov	sp, r7
    6c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c38:	4770      	bx	lr

00006c3a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    6c3a:	b480      	push	{r7}
    6c3c:	b083      	sub	sp, #12
    6c3e:	af00      	add	r7, sp, #0
    6c40:	6078      	str	r0, [r7, #4]
    6c42:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	683a      	ldr	r2, [r7, #0]
    6c48:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c4a:	bf00      	nop
    6c4c:	370c      	adds	r7, #12
    6c4e:	46bd      	mov	sp, r7
    6c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c54:	4770      	bx	lr

00006c56 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6c56:	b480      	push	{r7}
    6c58:	b083      	sub	sp, #12
    6c5a:	af00      	add	r7, sp, #0
    6c5c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6c62:	4618      	mov	r0, r3
    6c64:	370c      	adds	r7, #12
    6c66:	46bd      	mov	sp, r7
    6c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c6c:	4770      	bx	lr

00006c6e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6c6e:	b480      	push	{r7}
    6c70:	b083      	sub	sp, #12
    6c72:	af00      	add	r7, sp, #0
    6c74:	6078      	str	r0, [r7, #4]
    6c76:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	683a      	ldr	r2, [r7, #0]
    6c7c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c7e:	bf00      	nop
    6c80:	370c      	adds	r7, #12
    6c82:	46bd      	mov	sp, r7
    6c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c88:	4770      	bx	lr

00006c8a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    6c8a:	b480      	push	{r7}
    6c8c:	b085      	sub	sp, #20
    6c8e:	af00      	add	r7, sp, #0
    6c90:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6c98:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    6c9a:	7bfb      	ldrb	r3, [r7, #15]
    6c9c:	085b      	lsrs	r3, r3, #1
    6c9e:	b2db      	uxtb	r3, r3
    6ca0:	f003 0301 	and.w	r3, r3, #1
    6ca4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6ca6:	7bfb      	ldrb	r3, [r7, #15]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	bf14      	ite	ne
    6cac:	2301      	movne	r3, #1
    6cae:	2300      	moveq	r3, #0
    6cb0:	b2db      	uxtb	r3, r3
}
    6cb2:	4618      	mov	r0, r3
    6cb4:	3714      	adds	r7, #20
    6cb6:	46bd      	mov	sp, r7
    6cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cbc:	4770      	bx	lr

00006cbe <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6cbe:	b480      	push	{r7}
    6cc0:	b085      	sub	sp, #20
    6cc2:	af00      	add	r7, sp, #0
    6cc4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6ccc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6cce:	7bfb      	ldrb	r3, [r7, #15]
    6cd0:	089b      	lsrs	r3, r3, #2
    6cd2:	b2db      	uxtb	r3, r3
    6cd4:	f003 0301 	and.w	r3, r3, #1
    6cd8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6cda:	7bfb      	ldrb	r3, [r7, #15]
    6cdc:	2b00      	cmp	r3, #0
    6cde:	bf14      	ite	ne
    6ce0:	2301      	movne	r3, #1
    6ce2:	2300      	moveq	r3, #0
    6ce4:	b2db      	uxtb	r3, r3
}
    6ce6:	4618      	mov	r0, r3
    6ce8:	3714      	adds	r7, #20
    6cea:	46bd      	mov	sp, r7
    6cec:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cf0:	4770      	bx	lr

00006cf2 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6cf2:	b480      	push	{r7}
    6cf4:	b085      	sub	sp, #20
    6cf6:	af00      	add	r7, sp, #0
    6cf8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6cfa:	687b      	ldr	r3, [r7, #4]
    6cfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6d00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6d02:	7bfb      	ldrb	r3, [r7, #15]
    6d04:	08db      	lsrs	r3, r3, #3
    6d06:	b2db      	uxtb	r3, r3
    6d08:	f003 0301 	and.w	r3, r3, #1
    6d0c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6d0e:	7bfb      	ldrb	r3, [r7, #15]
    6d10:	2b00      	cmp	r3, #0
    6d12:	bf14      	ite	ne
    6d14:	2301      	movne	r3, #1
    6d16:	2300      	moveq	r3, #0
    6d18:	b2db      	uxtb	r3, r3
}
    6d1a:	4618      	mov	r0, r3
    6d1c:	3714      	adds	r7, #20
    6d1e:	46bd      	mov	sp, r7
    6d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d24:	4770      	bx	lr

00006d26 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6d26:	b480      	push	{r7}
    6d28:	b085      	sub	sp, #20
    6d2a:	af00      	add	r7, sp, #0
    6d2c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6d2e:	687b      	ldr	r3, [r7, #4]
    6d30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6d34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6d36:	7bfb      	ldrb	r3, [r7, #15]
    6d38:	091b      	lsrs	r3, r3, #4
    6d3a:	b2db      	uxtb	r3, r3
    6d3c:	f003 0301 	and.w	r3, r3, #1
    6d40:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6d42:	7bfb      	ldrb	r3, [r7, #15]
    6d44:	2b00      	cmp	r3, #0
    6d46:	bf14      	ite	ne
    6d48:	2301      	movne	r3, #1
    6d4a:	2300      	moveq	r3, #0
    6d4c:	b2db      	uxtb	r3, r3
}
    6d4e:	4618      	mov	r0, r3
    6d50:	3714      	adds	r7, #20
    6d52:	46bd      	mov	sp, r7
    6d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d58:	4770      	bx	lr
	...

00006d5c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6d5c:	b580      	push	{r7, lr}
    6d5e:	b082      	sub	sp, #8
    6d60:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6d62:	4b0a      	ldr	r3, [pc, #40]	; (6d8c <_oscctrl_init_sources+0x30>)
    6d64:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6d66:	4a0a      	ldr	r2, [pc, #40]	; (6d90 <_oscctrl_init_sources+0x34>)
    6d68:	2101      	movs	r1, #1
    6d6a:	6878      	ldr	r0, [r7, #4]
    6d6c:	4b09      	ldr	r3, [pc, #36]	; (6d94 <_oscctrl_init_sources+0x38>)
    6d6e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6d70:	bf00      	nop
    6d72:	6878      	ldr	r0, [r7, #4]
    6d74:	4b08      	ldr	r3, [pc, #32]	; (6d98 <_oscctrl_init_sources+0x3c>)
    6d76:	4798      	blx	r3
    6d78:	4603      	mov	r3, r0
    6d7a:	f083 0301 	eor.w	r3, r3, #1
    6d7e:	b2db      	uxtb	r3, r3
    6d80:	2b00      	cmp	r3, #0
    6d82:	d1f6      	bne.n	6d72 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6d84:	bf00      	nop
    6d86:	3708      	adds	r7, #8
    6d88:	46bd      	mov	sp, r7
    6d8a:	bd80      	pop	{r7, pc}
    6d8c:	40001000 	.word	0x40001000
    6d90:	03002646 	.word	0x03002646
    6d94:	00006ba5 	.word	0x00006ba5
    6d98:	00006b2f 	.word	0x00006b2f

00006d9c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6d9c:	b580      	push	{r7, lr}
    6d9e:	b084      	sub	sp, #16
    6da0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6da2:	4b6b      	ldr	r3, [pc, #428]	; (6f50 <_oscctrl_init_referenced_generators+0x1b4>)
    6da4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    6da6:	2204      	movs	r2, #4
    6da8:	2100      	movs	r1, #0
    6daa:	486a      	ldr	r0, [pc, #424]	; (6f54 <_oscctrl_init_referenced_generators+0x1b8>)
    6dac:	4b6a      	ldr	r3, [pc, #424]	; (6f58 <_oscctrl_init_referenced_generators+0x1bc>)
    6dae:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6db0:	bf00      	nop
    6db2:	4868      	ldr	r0, [pc, #416]	; (6f54 <_oscctrl_init_referenced_generators+0x1b8>)
    6db4:	4b69      	ldr	r3, [pc, #420]	; (6f5c <_oscctrl_init_referenced_generators+0x1c0>)
    6db6:	4798      	blx	r3
    6db8:	4603      	mov	r3, r0
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d1f9      	bne.n	6db2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6dbe:	2100      	movs	r1, #0
    6dc0:	68f8      	ldr	r0, [r7, #12]
    6dc2:	4b67      	ldr	r3, [pc, #412]	; (6f60 <_oscctrl_init_referenced_generators+0x1c4>)
    6dc4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    6dc6:	4967      	ldr	r1, [pc, #412]	; (6f64 <_oscctrl_init_referenced_generators+0x1c8>)
    6dc8:	68f8      	ldr	r0, [r7, #12]
    6dca:	4b67      	ldr	r3, [pc, #412]	; (6f68 <_oscctrl_init_referenced_generators+0x1cc>)
    6dcc:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6dce:	bf00      	nop
    6dd0:	68f8      	ldr	r0, [r7, #12]
    6dd2:	4b66      	ldr	r3, [pc, #408]	; (6f6c <_oscctrl_init_referenced_generators+0x1d0>)
    6dd4:	4798      	blx	r3
    6dd6:	4603      	mov	r3, r0
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d1f9      	bne.n	6dd0 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6ddc:	2100      	movs	r1, #0
    6dde:	68f8      	ldr	r0, [r7, #12]
    6de0:	4b63      	ldr	r3, [pc, #396]	; (6f70 <_oscctrl_init_referenced_generators+0x1d4>)
    6de2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6de4:	bf00      	nop
    6de6:	68f8      	ldr	r0, [r7, #12]
    6de8:	4b62      	ldr	r3, [pc, #392]	; (6f74 <_oscctrl_init_referenced_generators+0x1d8>)
    6dea:	4798      	blx	r3
    6dec:	4603      	mov	r3, r0
    6dee:	2b00      	cmp	r3, #0
    6df0:	d1f9      	bne.n	6de6 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6df2:	2302      	movs	r3, #2
    6df4:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    6df6:	7afb      	ldrb	r3, [r7, #11]
    6df8:	4619      	mov	r1, r3
    6dfa:	68f8      	ldr	r0, [r7, #12]
    6dfc:	4b58      	ldr	r3, [pc, #352]	; (6f60 <_oscctrl_init_referenced_generators+0x1c4>)
    6dfe:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6e00:	bf00      	nop
    6e02:	68f8      	ldr	r0, [r7, #12]
    6e04:	4b5c      	ldr	r3, [pc, #368]	; (6f78 <_oscctrl_init_referenced_generators+0x1dc>)
    6e06:	4798      	blx	r3
    6e08:	4603      	mov	r3, r0
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d1f9      	bne.n	6e02 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    6e0e:	68f8      	ldr	r0, [r7, #12]
    6e10:	4b5a      	ldr	r3, [pc, #360]	; (6f7c <_oscctrl_init_referenced_generators+0x1e0>)
    6e12:	4798      	blx	r3
    6e14:	4603      	mov	r3, r0
    6e16:	4619      	mov	r1, r3
    6e18:	68f8      	ldr	r0, [r7, #12]
    6e1a:	4b59      	ldr	r3, [pc, #356]	; (6f80 <_oscctrl_init_referenced_generators+0x1e4>)
    6e1c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6e1e:	bf00      	nop
    6e20:	68f8      	ldr	r0, [r7, #12]
    6e22:	4b58      	ldr	r3, [pc, #352]	; (6f84 <_oscctrl_init_referenced_generators+0x1e8>)
    6e24:	4798      	blx	r3
    6e26:	4603      	mov	r3, r0
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d1f9      	bne.n	6e20 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    6e2c:	2319      	movs	r3, #25
    6e2e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    6e30:	7afb      	ldrb	r3, [r7, #11]
    6e32:	4619      	mov	r1, r3
    6e34:	68f8      	ldr	r0, [r7, #12]
    6e36:	4b4e      	ldr	r3, [pc, #312]	; (6f70 <_oscctrl_init_referenced_generators+0x1d4>)
    6e38:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6e3a:	bf00      	nop
    6e3c:	68f8      	ldr	r0, [r7, #12]
    6e3e:	4b4d      	ldr	r3, [pc, #308]	; (6f74 <_oscctrl_init_referenced_generators+0x1d8>)
    6e40:	4798      	blx	r3
    6e42:	4603      	mov	r3, r0
    6e44:	2b00      	cmp	r3, #0
    6e46:	d1f9      	bne.n	6e3c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    6e48:	2245      	movs	r2, #69	; 0x45
    6e4a:	2101      	movs	r1, #1
    6e4c:	4841      	ldr	r0, [pc, #260]	; (6f54 <_oscctrl_init_referenced_generators+0x1b8>)
    6e4e:	4b4e      	ldr	r3, [pc, #312]	; (6f88 <_oscctrl_init_referenced_generators+0x1ec>)
    6e50:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6e52:	223b      	movs	r2, #59	; 0x3b
    6e54:	2100      	movs	r1, #0
    6e56:	68f8      	ldr	r0, [r7, #12]
    6e58:	4b4c      	ldr	r3, [pc, #304]	; (6f8c <_oscctrl_init_referenced_generators+0x1f0>)
    6e5a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6e5c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    6e60:	2100      	movs	r1, #0
    6e62:	68f8      	ldr	r0, [r7, #12]
    6e64:	4b4a      	ldr	r3, [pc, #296]	; (6f90 <_oscctrl_init_referenced_generators+0x1f4>)
    6e66:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6e68:	2242      	movs	r2, #66	; 0x42
    6e6a:	2100      	movs	r1, #0
    6e6c:	68f8      	ldr	r0, [r7, #12]
    6e6e:	4b49      	ldr	r3, [pc, #292]	; (6f94 <_oscctrl_init_referenced_generators+0x1f8>)
    6e70:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6e72:	4a49      	ldr	r2, [pc, #292]	; (6f98 <_oscctrl_init_referenced_generators+0x1fc>)
    6e74:	2101      	movs	r1, #1
    6e76:	68f8      	ldr	r0, [r7, #12]
    6e78:	4b44      	ldr	r3, [pc, #272]	; (6f8c <_oscctrl_init_referenced_generators+0x1f0>)
    6e7a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6e7c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    6e80:	2101      	movs	r1, #1
    6e82:	68f8      	ldr	r0, [r7, #12]
    6e84:	4b42      	ldr	r3, [pc, #264]	; (6f90 <_oscctrl_init_referenced_generators+0x1f4>)
    6e86:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6e88:	2202      	movs	r2, #2
    6e8a:	2101      	movs	r1, #1
    6e8c:	68f8      	ldr	r0, [r7, #12]
    6e8e:	4b41      	ldr	r3, [pc, #260]	; (6f94 <_oscctrl_init_referenced_generators+0x1f8>)
    6e90:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6e92:	68f8      	ldr	r0, [r7, #12]
    6e94:	4b41      	ldr	r3, [pc, #260]	; (6f9c <_oscctrl_init_referenced_generators+0x200>)
    6e96:	4798      	blx	r3
    6e98:	4603      	mov	r3, r0
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	d00c      	beq.n	6eb8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    6e9e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    6ea2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    6ea4:	bf00      	nop
    6ea6:	6879      	ldr	r1, [r7, #4]
    6ea8:	68f8      	ldr	r0, [r7, #12]
    6eaa:	4b3d      	ldr	r3, [pc, #244]	; (6fa0 <_oscctrl_init_referenced_generators+0x204>)
    6eac:	4798      	blx	r3
    6eae:	4602      	mov	r2, r0
    6eb0:	687b      	ldr	r3, [r7, #4]
    6eb2:	429a      	cmp	r2, r3
    6eb4:	d1f7      	bne.n	6ea6 <_oscctrl_init_referenced_generators+0x10a>
    6eb6:	e009      	b.n	6ecc <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6eb8:	bf00      	nop
    6eba:	68f8      	ldr	r0, [r7, #12]
    6ebc:	4b39      	ldr	r3, [pc, #228]	; (6fa4 <_oscctrl_init_referenced_generators+0x208>)
    6ebe:	4798      	blx	r3
    6ec0:	4603      	mov	r3, r0
    6ec2:	f083 0301 	eor.w	r3, r3, #1
    6ec6:	b2db      	uxtb	r3, r3
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d1f6      	bne.n	6eba <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    6ecc:	bf00      	nop
    6ece:	2100      	movs	r1, #0
    6ed0:	68f8      	ldr	r0, [r7, #12]
    6ed2:	4b35      	ldr	r3, [pc, #212]	; (6fa8 <_oscctrl_init_referenced_generators+0x20c>)
    6ed4:	4798      	blx	r3
    6ed6:	4603      	mov	r3, r0
    6ed8:	f083 0301 	eor.w	r3, r3, #1
    6edc:	b2db      	uxtb	r3, r3
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d009      	beq.n	6ef6 <_oscctrl_init_referenced_generators+0x15a>
    6ee2:	2100      	movs	r1, #0
    6ee4:	68f8      	ldr	r0, [r7, #12]
    6ee6:	4b31      	ldr	r3, [pc, #196]	; (6fac <_oscctrl_init_referenced_generators+0x210>)
    6ee8:	4798      	blx	r3
    6eea:	4603      	mov	r3, r0
    6eec:	f083 0301 	eor.w	r3, r3, #1
    6ef0:	b2db      	uxtb	r3, r3
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d1eb      	bne.n	6ece <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    6ef6:	bf00      	nop
    6ef8:	2101      	movs	r1, #1
    6efa:	68f8      	ldr	r0, [r7, #12]
    6efc:	4b2a      	ldr	r3, [pc, #168]	; (6fa8 <_oscctrl_init_referenced_generators+0x20c>)
    6efe:	4798      	blx	r3
    6f00:	4603      	mov	r3, r0
    6f02:	f083 0301 	eor.w	r3, r3, #1
    6f06:	b2db      	uxtb	r3, r3
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d009      	beq.n	6f20 <_oscctrl_init_referenced_generators+0x184>
    6f0c:	2101      	movs	r1, #1
    6f0e:	68f8      	ldr	r0, [r7, #12]
    6f10:	4b26      	ldr	r3, [pc, #152]	; (6fac <_oscctrl_init_referenced_generators+0x210>)
    6f12:	4798      	blx	r3
    6f14:	4603      	mov	r3, r0
    6f16:	f083 0301 	eor.w	r3, r3, #1
    6f1a:	b2db      	uxtb	r3, r3
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d1eb      	bne.n	6ef8 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6f20:	bf00      	nop
    6f22:	480c      	ldr	r0, [pc, #48]	; (6f54 <_oscctrl_init_referenced_generators+0x1b8>)
    6f24:	4b22      	ldr	r3, [pc, #136]	; (6fb0 <_oscctrl_init_referenced_generators+0x214>)
    6f26:	4798      	blx	r3
    6f28:	4603      	mov	r3, r0
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d1f9      	bne.n	6f22 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    6f2e:	2207      	movs	r2, #7
    6f30:	2100      	movs	r1, #0
    6f32:	4808      	ldr	r0, [pc, #32]	; (6f54 <_oscctrl_init_referenced_generators+0x1b8>)
    6f34:	4b08      	ldr	r3, [pc, #32]	; (6f58 <_oscctrl_init_referenced_generators+0x1bc>)
    6f36:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6f38:	bf00      	nop
    6f3a:	4806      	ldr	r0, [pc, #24]	; (6f54 <_oscctrl_init_referenced_generators+0x1b8>)
    6f3c:	4b07      	ldr	r3, [pc, #28]	; (6f5c <_oscctrl_init_referenced_generators+0x1c0>)
    6f3e:	4798      	blx	r3
    6f40:	4603      	mov	r3, r0
    6f42:	2b00      	cmp	r3, #0
    6f44:	d1f9      	bne.n	6f3a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    6f46:	bf00      	nop
    6f48:	3710      	adds	r7, #16
    6f4a:	46bd      	mov	sp, r7
    6f4c:	bd80      	pop	{r7, pc}
    6f4e:	bf00      	nop
    6f50:	40001000 	.word	0x40001000
    6f54:	40001c00 	.word	0x40001c00
    6f58:	00006969 	.word	0x00006969
    6f5c:	00006929 	.word	0x00006929
    6f60:	00006bcd 	.word	0x00006bcd
    6f64:	0401bb80 	.word	0x0401bb80
    6f68:	00006c6f 	.word	0x00006c6f
    6f6c:	00006d27 	.word	0x00006d27
    6f70:	00006c1b 	.word	0x00006c1b
    6f74:	00006cbf 	.word	0x00006cbf
    6f78:	00006c8b 	.word	0x00006c8b
    6f7c:	00006c57 	.word	0x00006c57
    6f80:	00006c3b 	.word	0x00006c3b
    6f84:	00006cf3 	.word	0x00006cf3
    6f88:	000069b9 	.word	0x000069b9
    6f8c:	00006ac5 	.word	0x00006ac5
    6f90:	00006b01 	.word	0x00006b01
    6f94:	00006a89 	.word	0x00006a89
    6f98:	000407a0 	.word	0x000407a0
    6f9c:	00006beb 	.word	0x00006beb
    6fa0:	00006b7f 	.word	0x00006b7f
    6fa4:	00006b57 	.word	0x00006b57
    6fa8:	00006a15 	.word	0x00006a15
    6fac:	00006a4d 	.word	0x00006a4d
    6fb0:	00006951 	.word	0x00006951

00006fb4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    6fb4:	b480      	push	{r7}
    6fb6:	b083      	sub	sp, #12
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	69db      	ldr	r3, [r3, #28]
    6fc0:	0a9b      	lsrs	r3, r3, #10
    6fc2:	f003 0301 	and.w	r3, r3, #1
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	bf14      	ite	ne
    6fca:	2301      	movne	r3, #1
    6fcc:	2300      	moveq	r3, #0
    6fce:	b2db      	uxtb	r3, r3
}
    6fd0:	4618      	mov	r0, r3
    6fd2:	370c      	adds	r7, #12
    6fd4:	46bd      	mov	sp, r7
    6fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fda:	4770      	bx	lr

00006fdc <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    6fdc:	b480      	push	{r7}
    6fde:	b083      	sub	sp, #12
    6fe0:	af00      	add	r7, sp, #0
    6fe2:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    6fe4:	687b      	ldr	r3, [r7, #4]
    6fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6fea:	61da      	str	r2, [r3, #28]
}
    6fec:	bf00      	nop
    6fee:	370c      	adds	r7, #12
    6ff0:	46bd      	mov	sp, r7
    6ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ff6:	4770      	bx	lr

00006ff8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    6ff8:	b480      	push	{r7}
    6ffa:	b083      	sub	sp, #12
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	6078      	str	r0, [r7, #4]
    7000:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	683a      	ldr	r2, [r7, #0]
    7006:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7008:	bf00      	nop
    700a:	370c      	adds	r7, #12
    700c:	46bd      	mov	sp, r7
    700e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7012:	4770      	bx	lr

00007014 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7014:	b480      	push	{r7}
    7016:	b083      	sub	sp, #12
    7018:	af00      	add	r7, sp, #0
    701a:	6078      	str	r0, [r7, #4]
    701c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	683a      	ldr	r2, [r7, #0]
    7022:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7024:	bf00      	nop
    7026:	370c      	adds	r7, #12
    7028:	46bd      	mov	sp, r7
    702a:	f85d 7b04 	ldr.w	r7, [sp], #4
    702e:	4770      	bx	lr

00007030 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    7030:	b480      	push	{r7}
    7032:	b083      	sub	sp, #12
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
    7038:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	683a      	ldr	r2, [r7, #0]
    703e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7040:	bf00      	nop
    7042:	370c      	adds	r7, #12
    7044:	46bd      	mov	sp, r7
    7046:	f85d 7b04 	ldr.w	r7, [sp], #4
    704a:	4770      	bx	lr

0000704c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    704c:	b480      	push	{r7}
    704e:	b083      	sub	sp, #12
    7050:	af00      	add	r7, sp, #0
    7052:	6078      	str	r0, [r7, #4]
    7054:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	683a      	ldr	r2, [r7, #0]
    705a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    705c:	bf00      	nop
    705e:	370c      	adds	r7, #12
    7060:	46bd      	mov	sp, r7
    7062:	f85d 7b04 	ldr.w	r7, [sp], #4
    7066:	4770      	bx	lr

00007068 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7068:	b480      	push	{r7}
    706a:	b085      	sub	sp, #20
    706c:	af00      	add	r7, sp, #0
    706e:	6078      	str	r0, [r7, #4]
    7070:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7076:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    7078:	68fb      	ldr	r3, [r7, #12]
    707a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    707e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    7080:	683b      	ldr	r3, [r7, #0]
    7082:	b2db      	uxtb	r3, r3
    7084:	68fa      	ldr	r2, [r7, #12]
    7086:	4313      	orrs	r3, r2
    7088:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	68fa      	ldr	r2, [r7, #12]
    708e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7090:	bf00      	nop
    7092:	3714      	adds	r7, #20
    7094:	46bd      	mov	sp, r7
    7096:	f85d 7b04 	ldr.w	r7, [sp], #4
    709a:	4770      	bx	lr

0000709c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    709c:	b480      	push	{r7}
    709e:	b085      	sub	sp, #20
    70a0:	af00      	add	r7, sp, #0
    70a2:	6078      	str	r0, [r7, #4]
    70a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    70a6:	687b      	ldr	r3, [r7, #4]
    70a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    70aa:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    70ac:	68fb      	ldr	r3, [r7, #12]
    70ae:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    70b2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    70b4:	683b      	ldr	r3, [r7, #0]
    70b6:	041b      	lsls	r3, r3, #16
    70b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    70bc:	68fa      	ldr	r2, [r7, #12]
    70be:	4313      	orrs	r3, r2
    70c0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	68fa      	ldr	r2, [r7, #12]
    70c6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    70c8:	bf00      	nop
    70ca:	3714      	adds	r7, #20
    70cc:	46bd      	mov	sp, r7
    70ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    70d2:	4770      	bx	lr

000070d4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    70d4:	b480      	push	{r7}
    70d6:	b083      	sub	sp, #12
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
    70dc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	683a      	ldr	r2, [r7, #0]
    70e2:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    70e4:	bf00      	nop
    70e6:	370c      	adds	r7, #12
    70e8:	46bd      	mov	sp, r7
    70ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    70ee:	4770      	bx	lr

000070f0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    70f0:	b480      	push	{r7}
    70f2:	b083      	sub	sp, #12
    70f4:	af00      	add	r7, sp, #0
    70f6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    70fc:	4618      	mov	r0, r3
    70fe:	370c      	adds	r7, #12
    7100:	46bd      	mov	sp, r7
    7102:	f85d 7b04 	ldr.w	r7, [sp], #4
    7106:	4770      	bx	lr

00007108 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    7108:	b480      	push	{r7}
    710a:	b085      	sub	sp, #20
    710c:	af00      	add	r7, sp, #0
    710e:	60f8      	str	r0, [r7, #12]
    7110:	60b9      	str	r1, [r7, #8]
    7112:	607a      	str	r2, [r7, #4]
	while (count--) {
    7114:	e007      	b.n	7126 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7116:	68fb      	ldr	r3, [r7, #12]
    7118:	1c5a      	adds	r2, r3, #1
    711a:	60fa      	str	r2, [r7, #12]
    711c:	68ba      	ldr	r2, [r7, #8]
    711e:	1c51      	adds	r1, r2, #1
    7120:	60b9      	str	r1, [r7, #8]
    7122:	7812      	ldrb	r2, [r2, #0]
    7124:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7126:	687b      	ldr	r3, [r7, #4]
    7128:	1e5a      	subs	r2, r3, #1
    712a:	607a      	str	r2, [r7, #4]
    712c:	2b00      	cmp	r3, #0
    712e:	d1f2      	bne.n	7116 <_qspi_memcpy+0xe>
	}
}
    7130:	bf00      	nop
    7132:	3714      	adds	r7, #20
    7134:	46bd      	mov	sp, r7
    7136:	f85d 7b04 	ldr.w	r7, [sp], #4
    713a:	4770      	bx	lr

0000713c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    713c:	b580      	push	{r7, lr}
    713e:	b082      	sub	sp, #8
    7140:	af00      	add	r7, sp, #0
    7142:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7144:	4903      	ldr	r1, [pc, #12]	; (7154 <_qspi_end_transfer+0x18>)
    7146:	6878      	ldr	r0, [r7, #4]
    7148:	4b03      	ldr	r3, [pc, #12]	; (7158 <_qspi_end_transfer+0x1c>)
    714a:	4798      	blx	r3
}
    714c:	bf00      	nop
    714e:	3708      	adds	r7, #8
    7150:	46bd      	mov	sp, r7
    7152:	bd80      	pop	{r7, pc}
    7154:	01000002 	.word	0x01000002
    7158:	00006ff9 	.word	0x00006ff9

0000715c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    715c:	b580      	push	{r7, lr}
    715e:	b082      	sub	sp, #8
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
    7164:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7166:	687b      	ldr	r3, [r7, #4]
    7168:	2b00      	cmp	r3, #0
    716a:	d004      	beq.n	7176 <_qspi_sync_init+0x1a>
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	2b00      	cmp	r3, #0
    7170:	d001      	beq.n	7176 <_qspi_sync_init+0x1a>
    7172:	2301      	movs	r3, #1
    7174:	e000      	b.n	7178 <_qspi_sync_init+0x1c>
    7176:	2300      	movs	r3, #0
    7178:	f003 0301 	and.w	r3, r3, #1
    717c:	b2db      	uxtb	r3, r3
    717e:	2240      	movs	r2, #64	; 0x40
    7180:	490c      	ldr	r1, [pc, #48]	; (71b4 <_qspi_sync_init+0x58>)
    7182:	4618      	mov	r0, r3
    7184:	4b0c      	ldr	r3, [pc, #48]	; (71b8 <_qspi_sync_init+0x5c>)
    7186:	4798      	blx	r3
	dev->prvt = hw;
    7188:	687b      	ldr	r3, [r7, #4]
    718a:	683a      	ldr	r2, [r7, #0]
    718c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    718e:	687b      	ldr	r3, [r7, #4]
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	2101      	movs	r1, #1
    7194:	4618      	mov	r0, r3
    7196:	4b09      	ldr	r3, [pc, #36]	; (71bc <_qspi_sync_init+0x60>)
    7198:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    719a:	4909      	ldr	r1, [pc, #36]	; (71c0 <_qspi_sync_init+0x64>)
    719c:	6838      	ldr	r0, [r7, #0]
    719e:	4b09      	ldr	r3, [pc, #36]	; (71c4 <_qspi_sync_init+0x68>)
    71a0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    71a2:	4909      	ldr	r1, [pc, #36]	; (71c8 <_qspi_sync_init+0x6c>)
    71a4:	6838      	ldr	r0, [r7, #0]
    71a6:	4b09      	ldr	r3, [pc, #36]	; (71cc <_qspi_sync_init+0x70>)
    71a8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    71aa:	2300      	movs	r3, #0
}
    71ac:	4618      	mov	r0, r3
    71ae:	3708      	adds	r7, #8
    71b0:	46bd      	mov	sp, r7
    71b2:	bd80      	pop	{r7, pc}
    71b4:	000113d0 	.word	0x000113d0
    71b8:	00005239 	.word	0x00005239
    71bc:	00006ff9 	.word	0x00006ff9
    71c0:	06000011 	.word	0x06000011
    71c4:	00007015 	.word	0x00007015
    71c8:	00241300 	.word	0x00241300
    71cc:	00007031 	.word	0x00007031

000071d0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    71d0:	b580      	push	{r7, lr}
    71d2:	b082      	sub	sp, #8
    71d4:	af00      	add	r7, sp, #0
    71d6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    71d8:	687b      	ldr	r3, [r7, #4]
    71da:	681b      	ldr	r3, [r3, #0]
    71dc:	2102      	movs	r1, #2
    71de:	4618      	mov	r0, r3
    71e0:	4b03      	ldr	r3, [pc, #12]	; (71f0 <_qspi_sync_enable+0x20>)
    71e2:	4798      	blx	r3
	return ERR_NONE;
    71e4:	2300      	movs	r3, #0
}
    71e6:	4618      	mov	r0, r3
    71e8:	3708      	adds	r7, #8
    71ea:	46bd      	mov	sp, r7
    71ec:	bd80      	pop	{r7, pc}
    71ee:	bf00      	nop
    71f0:	00006ff9 	.word	0x00006ff9

000071f4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    71f4:	b580      	push	{r7, lr}
    71f6:	b082      	sub	sp, #8
    71f8:	af00      	add	r7, sp, #0
    71fa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	681b      	ldr	r3, [r3, #0]
    7200:	2100      	movs	r1, #0
    7202:	4618      	mov	r0, r3
    7204:	4b03      	ldr	r3, [pc, #12]	; (7214 <_qspi_sync_disable+0x20>)
    7206:	4798      	blx	r3
	return ERR_NONE;
    7208:	2300      	movs	r3, #0
}
    720a:	4618      	mov	r0, r3
    720c:	3708      	adds	r7, #8
    720e:	46bd      	mov	sp, r7
    7210:	bd80      	pop	{r7, pc}
    7212:	bf00      	nop
    7214:	00006ff9 	.word	0x00006ff9

00007218 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7218:	b580      	push	{r7, lr}
    721a:	b084      	sub	sp, #16
    721c:	af00      	add	r7, sp, #0
    721e:	6078      	str	r0, [r7, #4]
    7220:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	681b      	ldr	r3, [r3, #0]
    7226:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7228:	683b      	ldr	r3, [r7, #0]
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	f003 0320 	and.w	r3, r3, #32
    7230:	b2db      	uxtb	r3, r3
    7232:	2b00      	cmp	r3, #0
    7234:	d005      	beq.n	7242 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7236:	683b      	ldr	r3, [r7, #0]
    7238:	689b      	ldr	r3, [r3, #8]
    723a:	4619      	mov	r1, r3
    723c:	68f8      	ldr	r0, [r7, #12]
    723e:	4b13      	ldr	r3, [pc, #76]	; (728c <_qspi_sync_command_set_ifr+0x74>)
    7240:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7242:	683b      	ldr	r3, [r7, #0]
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	f003 0310 	and.w	r3, r3, #16
    724a:	b2db      	uxtb	r3, r3
    724c:	2b00      	cmp	r3, #0
    724e:	d005      	beq.n	725c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7250:	683b      	ldr	r3, [r7, #0]
    7252:	791b      	ldrb	r3, [r3, #4]
    7254:	4619      	mov	r1, r3
    7256:	68f8      	ldr	r0, [r7, #12]
    7258:	4b0d      	ldr	r3, [pc, #52]	; (7290 <_qspi_sync_command_set_ifr+0x78>)
    725a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    725c:	683b      	ldr	r3, [r7, #0]
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7264:	b2db      	uxtb	r3, r3
    7266:	2b00      	cmp	r3, #0
    7268:	d005      	beq.n	7276 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    726a:	683b      	ldr	r3, [r7, #0]
    726c:	795b      	ldrb	r3, [r3, #5]
    726e:	4619      	mov	r1, r3
    7270:	68f8      	ldr	r0, [r7, #12]
    7272:	4b08      	ldr	r3, [pc, #32]	; (7294 <_qspi_sync_command_set_ifr+0x7c>)
    7274:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7276:	683b      	ldr	r3, [r7, #0]
    7278:	681b      	ldr	r3, [r3, #0]
    727a:	4619      	mov	r1, r3
    727c:	68f8      	ldr	r0, [r7, #12]
    727e:	4b06      	ldr	r3, [pc, #24]	; (7298 <_qspi_sync_command_set_ifr+0x80>)
    7280:	4798      	blx	r3
}
    7282:	bf00      	nop
    7284:	3710      	adds	r7, #16
    7286:	46bd      	mov	sp, r7
    7288:	bd80      	pop	{r7, pc}
    728a:	bf00      	nop
    728c:	0000704d 	.word	0x0000704d
    7290:	00007069 	.word	0x00007069
    7294:	0000709d 	.word	0x0000709d
    7298:	000070d5 	.word	0x000070d5

0000729c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    729c:	b580      	push	{r7, lr}
    729e:	b084      	sub	sp, #16
    72a0:	af00      	add	r7, sp, #0
    72a2:	6078      	str	r0, [r7, #4]
    72a4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    72a6:	687b      	ldr	r3, [r7, #4]
    72a8:	681b      	ldr	r3, [r3, #0]
    72aa:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    72ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    72b0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    72b2:	683b      	ldr	r3, [r7, #0]
    72b4:	781b      	ldrb	r3, [r3, #0]
    72b6:	f003 0320 	and.w	r3, r3, #32
    72ba:	b2db      	uxtb	r3, r3
    72bc:	2b00      	cmp	r3, #0
    72be:	d004      	beq.n	72ca <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    72c0:	683b      	ldr	r3, [r7, #0]
    72c2:	689b      	ldr	r3, [r3, #8]
    72c4:	68fa      	ldr	r2, [r7, #12]
    72c6:	4413      	add	r3, r2
    72c8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    72ca:	68b8      	ldr	r0, [r7, #8]
    72cc:	4b18      	ldr	r3, [pc, #96]	; (7330 <_qspi_sync_run_transfer+0x94>)
    72ce:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    72d0:	683b      	ldr	r3, [r7, #0]
    72d2:	691b      	ldr	r3, [r3, #16]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d103      	bne.n	72e0 <_qspi_sync_run_transfer+0x44>
    72d8:	683b      	ldr	r3, [r7, #0]
    72da:	695b      	ldr	r3, [r3, #20]
    72dc:	2b00      	cmp	r3, #0
    72de:	d001      	beq.n	72e4 <_qspi_sync_run_transfer+0x48>
    72e0:	2301      	movs	r3, #1
    72e2:	e000      	b.n	72e6 <_qspi_sync_run_transfer+0x4a>
    72e4:	2300      	movs	r3, #0
    72e6:	f003 0301 	and.w	r3, r3, #1
    72ea:	b2db      	uxtb	r3, r3
    72ec:	2282      	movs	r2, #130	; 0x82
    72ee:	4911      	ldr	r1, [pc, #68]	; (7334 <_qspi_sync_run_transfer+0x98>)
    72f0:	4618      	mov	r0, r3
    72f2:	4b11      	ldr	r3, [pc, #68]	; (7338 <_qspi_sync_run_transfer+0x9c>)
    72f4:	4798      	blx	r3

	if (cmd->tx_buf) {
    72f6:	683b      	ldr	r3, [r7, #0]
    72f8:	691b      	ldr	r3, [r3, #16]
    72fa:	2b00      	cmp	r3, #0
    72fc:	d008      	beq.n	7310 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    72fe:	683b      	ldr	r3, [r7, #0]
    7300:	6919      	ldr	r1, [r3, #16]
    7302:	683b      	ldr	r3, [r7, #0]
    7304:	68db      	ldr	r3, [r3, #12]
    7306:	461a      	mov	r2, r3
    7308:	68f8      	ldr	r0, [r7, #12]
    730a:	4b0c      	ldr	r3, [pc, #48]	; (733c <_qspi_sync_run_transfer+0xa0>)
    730c:	4798      	blx	r3
    730e:	e007      	b.n	7320 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7310:	683b      	ldr	r3, [r7, #0]
    7312:	6958      	ldr	r0, [r3, #20]
    7314:	683b      	ldr	r3, [r7, #0]
    7316:	68db      	ldr	r3, [r3, #12]
    7318:	461a      	mov	r2, r3
    731a:	68f9      	ldr	r1, [r7, #12]
    731c:	4b07      	ldr	r3, [pc, #28]	; (733c <_qspi_sync_run_transfer+0xa0>)
    731e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7320:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7324:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7328:	bf00      	nop
    732a:	3710      	adds	r7, #16
    732c:	46bd      	mov	sp, r7
    732e:	bd80      	pop	{r7, pc}
    7330:	000070f1 	.word	0x000070f1
    7334:	000113d0 	.word	0x000113d0
    7338:	00005239 	.word	0x00005239
    733c:	00007109 	.word	0x00007109

00007340 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7340:	b580      	push	{r7, lr}
    7342:	b082      	sub	sp, #8
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
    7348:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    734a:	6839      	ldr	r1, [r7, #0]
    734c:	6878      	ldr	r0, [r7, #4]
    734e:	4b14      	ldr	r3, [pc, #80]	; (73a0 <_qspi_sync_serial_run_command+0x60>)
    7350:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    7352:	683b      	ldr	r3, [r7, #0]
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    735a:	b2db      	uxtb	r3, r3
    735c:	2b00      	cmp	r3, #0
    735e:	d003      	beq.n	7368 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    7360:	6839      	ldr	r1, [r7, #0]
    7362:	6878      	ldr	r0, [r7, #4]
    7364:	4b0f      	ldr	r3, [pc, #60]	; (73a4 <_qspi_sync_serial_run_command+0x64>)
    7366:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    7368:	687b      	ldr	r3, [r7, #4]
    736a:	681b      	ldr	r3, [r3, #0]
    736c:	4618      	mov	r0, r3
    736e:	4b0e      	ldr	r3, [pc, #56]	; (73a8 <_qspi_sync_serial_run_command+0x68>)
    7370:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    7372:	bf00      	nop
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	681b      	ldr	r3, [r3, #0]
    7378:	4618      	mov	r0, r3
    737a:	4b0c      	ldr	r3, [pc, #48]	; (73ac <_qspi_sync_serial_run_command+0x6c>)
    737c:	4798      	blx	r3
    737e:	4603      	mov	r3, r0
    7380:	f083 0301 	eor.w	r3, r3, #1
    7384:	b2db      	uxtb	r3, r3
    7386:	2b00      	cmp	r3, #0
    7388:	d1f4      	bne.n	7374 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	681b      	ldr	r3, [r3, #0]
    738e:	4618      	mov	r0, r3
    7390:	4b07      	ldr	r3, [pc, #28]	; (73b0 <_qspi_sync_serial_run_command+0x70>)
    7392:	4798      	blx	r3
	return ERR_NONE;
    7394:	2300      	movs	r3, #0
}
    7396:	4618      	mov	r0, r3
    7398:	3708      	adds	r7, #8
    739a:	46bd      	mov	sp, r7
    739c:	bd80      	pop	{r7, pc}
    739e:	bf00      	nop
    73a0:	00007219 	.word	0x00007219
    73a4:	0000729d 	.word	0x0000729d
    73a8:	0000713d 	.word	0x0000713d
    73ac:	00006fb5 	.word	0x00006fb5
    73b0:	00006fdd 	.word	0x00006fdd

000073b4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    73b4:	b480      	push	{r7}
    73b6:	b083      	sub	sp, #12
    73b8:	af00      	add	r7, sp, #0
    73ba:	6078      	str	r0, [r7, #4]
    73bc:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    73be:	bf00      	nop
    73c0:	687b      	ldr	r3, [r7, #4]
    73c2:	691a      	ldr	r2, [r3, #16]
    73c4:	683b      	ldr	r3, [r7, #0]
    73c6:	4013      	ands	r3, r2
    73c8:	2b00      	cmp	r3, #0
    73ca:	d1f9      	bne.n	73c0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    73cc:	bf00      	nop
    73ce:	370c      	adds	r7, #12
    73d0:	46bd      	mov	sp, r7
    73d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    73d6:	4770      	bx	lr

000073d8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    73d8:	b480      	push	{r7}
    73da:	b083      	sub	sp, #12
    73dc:	af00      	add	r7, sp, #0
    73de:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    73e0:	687b      	ldr	r3, [r7, #4]
    73e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    73e6:	819a      	strh	r2, [r3, #12]
}
    73e8:	bf00      	nop
    73ea:	370c      	adds	r7, #12
    73ec:	46bd      	mov	sp, r7
    73ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f2:	4770      	bx	lr

000073f4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    73f4:	b480      	push	{r7}
    73f6:	b083      	sub	sp, #12
    73f8:	af00      	add	r7, sp, #0
    73fa:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7402:	819a      	strh	r2, [r3, #12]
}
    7404:	bf00      	nop
    7406:	370c      	adds	r7, #12
    7408:	46bd      	mov	sp, r7
    740a:	f85d 7b04 	ldr.w	r7, [sp], #4
    740e:	4770      	bx	lr

00007410 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    7410:	b480      	push	{r7}
    7412:	b083      	sub	sp, #12
    7414:	af00      	add	r7, sp, #0
    7416:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	899b      	ldrh	r3, [r3, #12]
    741c:	b29b      	uxth	r3, r3
}
    741e:	4618      	mov	r0, r3
    7420:	370c      	adds	r7, #12
    7422:	46bd      	mov	sp, r7
    7424:	f85d 7b04 	ldr.w	r7, [sp], #4
    7428:	4770      	bx	lr

0000742a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    742a:	b480      	push	{r7}
    742c:	b083      	sub	sp, #12
    742e:	af00      	add	r7, sp, #0
    7430:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    7432:	687b      	ldr	r3, [r7, #4]
    7434:	895b      	ldrh	r3, [r3, #10]
    7436:	b29b      	uxth	r3, r3
}
    7438:	4618      	mov	r0, r3
    743a:	370c      	adds	r7, #12
    743c:	46bd      	mov	sp, r7
    743e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7442:	4770      	bx	lr

00007444 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7444:	b580      	push	{r7, lr}
    7446:	b082      	sub	sp, #8
    7448:	af00      	add	r7, sp, #0
    744a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    744c:	687b      	ldr	r3, [r7, #4]
    744e:	881b      	ldrh	r3, [r3, #0]
    7450:	b29b      	uxth	r3, r3
    7452:	f043 0301 	orr.w	r3, r3, #1
    7456:	b29a      	uxth	r2, r3
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    745c:	2101      	movs	r1, #1
    745e:	6878      	ldr	r0, [r7, #4]
    7460:	4b02      	ldr	r3, [pc, #8]	; (746c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    7462:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7464:	bf00      	nop
    7466:	3708      	adds	r7, #8
    7468:	46bd      	mov	sp, r7
    746a:	bd80      	pop	{r7, pc}
    746c:	000073b5 	.word	0x000073b5

00007470 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7470:	b580      	push	{r7, lr}
    7472:	b084      	sub	sp, #16
    7474:	af00      	add	r7, sp, #0
    7476:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7478:	f248 0103 	movw	r1, #32771	; 0x8003
    747c:	6878      	ldr	r0, [r7, #4]
    747e:	4b0a      	ldr	r3, [pc, #40]	; (74a8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    7480:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	881b      	ldrh	r3, [r3, #0]
    7486:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    7488:	89fb      	ldrh	r3, [r7, #14]
    748a:	085b      	lsrs	r3, r3, #1
    748c:	b29b      	uxth	r3, r3
    748e:	f003 0301 	and.w	r3, r3, #1
    7492:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    7494:	89fb      	ldrh	r3, [r7, #14]
    7496:	2b00      	cmp	r3, #0
    7498:	bf14      	ite	ne
    749a:	2301      	movne	r3, #1
    749c:	2300      	moveq	r3, #0
    749e:	b2db      	uxtb	r3, r3
}
    74a0:	4618      	mov	r0, r3
    74a2:	3710      	adds	r7, #16
    74a4:	46bd      	mov	sp, r7
    74a6:	bd80      	pop	{r7, pc}
    74a8:	000073b5 	.word	0x000073b5

000074ac <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    74ac:	b580      	push	{r7, lr}
    74ae:	b082      	sub	sp, #8
    74b0:	af00      	add	r7, sp, #0
    74b2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	881b      	ldrh	r3, [r3, #0]
    74b8:	b29b      	uxth	r3, r3
    74ba:	f023 0302 	bic.w	r3, r3, #2
    74be:	b29a      	uxth	r2, r3
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    74c4:	f248 0103 	movw	r1, #32771	; 0x8003
    74c8:	6878      	ldr	r0, [r7, #4]
    74ca:	4b03      	ldr	r3, [pc, #12]	; (74d8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    74cc:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    74ce:	bf00      	nop
    74d0:	3708      	adds	r7, #8
    74d2:	46bd      	mov	sp, r7
    74d4:	bd80      	pop	{r7, pc}
    74d6:	bf00      	nop
    74d8:	000073b5 	.word	0x000073b5

000074dc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    74dc:	b580      	push	{r7, lr}
    74de:	b082      	sub	sp, #8
    74e0:	af00      	add	r7, sp, #0
    74e2:	6078      	str	r0, [r7, #4]
    74e4:	460b      	mov	r3, r1
    74e6:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    74e8:	687b      	ldr	r3, [r7, #4]
    74ea:	887a      	ldrh	r2, [r7, #2]
    74ec:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    74ee:	f248 0103 	movw	r1, #32771	; 0x8003
    74f2:	6878      	ldr	r0, [r7, #4]
    74f4:	4b02      	ldr	r3, [pc, #8]	; (7500 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    74f6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    74f8:	bf00      	nop
    74fa:	3708      	adds	r7, #8
    74fc:	46bd      	mov	sp, r7
    74fe:	bd80      	pop	{r7, pc}
    7500:	000073b5 	.word	0x000073b5

00007504 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7504:	b580      	push	{r7, lr}
    7506:	b082      	sub	sp, #8
    7508:	af00      	add	r7, sp, #0
    750a:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    750c:	2108      	movs	r1, #8
    750e:	6878      	ldr	r0, [r7, #4]
    7510:	4b03      	ldr	r3, [pc, #12]	; (7520 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    7512:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7514:	687b      	ldr	r3, [r7, #4]
    7516:	699b      	ldr	r3, [r3, #24]
}
    7518:	4618      	mov	r0, r3
    751a:	3708      	adds	r7, #8
    751c:	46bd      	mov	sp, r7
    751e:	bd80      	pop	{r7, pc}
    7520:	000073b5 	.word	0x000073b5

00007524 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7524:	b480      	push	{r7}
    7526:	b083      	sub	sp, #12
    7528:	af00      	add	r7, sp, #0
    752a:	6078      	str	r0, [r7, #4]
    752c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    752e:	687b      	ldr	r3, [r7, #4]
    7530:	683a      	ldr	r2, [r7, #0]
    7532:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7534:	bf00      	nop
    7536:	370c      	adds	r7, #12
    7538:	46bd      	mov	sp, r7
    753a:	f85d 7b04 	ldr.w	r7, [sp], #4
    753e:	4770      	bx	lr

00007540 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    7540:	b580      	push	{r7, lr}
    7542:	b082      	sub	sp, #8
    7544:	af00      	add	r7, sp, #0
    7546:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7548:	687b      	ldr	r3, [r7, #4]
    754a:	2b00      	cmp	r3, #0
    754c:	d005      	beq.n	755a <_calendar_init+0x1a>
    754e:	687b      	ldr	r3, [r7, #4]
    7550:	681b      	ldr	r3, [r3, #0]
    7552:	2b00      	cmp	r3, #0
    7554:	d001      	beq.n	755a <_calendar_init+0x1a>
    7556:	2301      	movs	r3, #1
    7558:	e000      	b.n	755c <_calendar_init+0x1c>
    755a:	2300      	movs	r3, #0
    755c:	f003 0301 	and.w	r3, r3, #1
    7560:	b2db      	uxtb	r3, r3
    7562:	222f      	movs	r2, #47	; 0x2f
    7564:	491b      	ldr	r1, [pc, #108]	; (75d4 <_calendar_init+0x94>)
    7566:	4618      	mov	r0, r3
    7568:	4b1b      	ldr	r3, [pc, #108]	; (75d8 <_calendar_init+0x98>)
    756a:	4798      	blx	r3

	_rtc_dev = dev;
    756c:	4a1b      	ldr	r2, [pc, #108]	; (75dc <_calendar_init+0x9c>)
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    7572:	687b      	ldr	r3, [r7, #4]
    7574:	681b      	ldr	r3, [r3, #0]
    7576:	4618      	mov	r0, r3
    7578:	4b19      	ldr	r3, [pc, #100]	; (75e0 <_calendar_init+0xa0>)
    757a:	4798      	blx	r3
    757c:	4603      	mov	r3, r0
    757e:	2b00      	cmp	r3, #0
    7580:	d00a      	beq.n	7598 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7582:	687b      	ldr	r3, [r7, #4]
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	4618      	mov	r0, r3
    7588:	4b16      	ldr	r3, [pc, #88]	; (75e4 <_calendar_init+0xa4>)
    758a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	681b      	ldr	r3, [r3, #0]
    7590:	2102      	movs	r1, #2
    7592:	4618      	mov	r0, r3
    7594:	4b14      	ldr	r3, [pc, #80]	; (75e8 <_calendar_init+0xa8>)
    7596:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	681b      	ldr	r3, [r3, #0]
    759c:	4618      	mov	r0, r3
    759e:	4b13      	ldr	r3, [pc, #76]	; (75ec <_calendar_init+0xac>)
    75a0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	2101      	movs	r1, #1
    75a8:	4618      	mov	r0, r3
    75aa:	4b0f      	ldr	r3, [pc, #60]	; (75e8 <_calendar_init+0xa8>)
    75ac:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    75b6:	4618      	mov	r0, r3
    75b8:	4b0d      	ldr	r3, [pc, #52]	; (75f0 <_calendar_init+0xb0>)
    75ba:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    75c0:	2100      	movs	r1, #0
    75c2:	4618      	mov	r0, r3
    75c4:	4b0b      	ldr	r3, [pc, #44]	; (75f4 <_calendar_init+0xb4>)
    75c6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    75c8:	2300      	movs	r3, #0
}
    75ca:	4618      	mov	r0, r3
    75cc:	3708      	adds	r7, #8
    75ce:	46bd      	mov	sp, r7
    75d0:	bd80      	pop	{r7, pc}
    75d2:	bf00      	nop
    75d4:	000113e8 	.word	0x000113e8
    75d8:	00005239 	.word	0x00005239
    75dc:	20000e20 	.word	0x20000e20
    75e0:	00007471 	.word	0x00007471
    75e4:	000074ad 	.word	0x000074ad
    75e8:	000073b5 	.word	0x000073b5
    75ec:	00007445 	.word	0x00007445
    75f0:	000074dd 	.word	0x000074dd
    75f4:	00007525 	.word	0x00007525

000075f8 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    75f8:	b580      	push	{r7, lr}
    75fa:	b082      	sub	sp, #8
    75fc:	af00      	add	r7, sp, #0
    75fe:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	2b00      	cmp	r3, #0
    7604:	d005      	beq.n	7612 <_calendar_get_counter+0x1a>
    7606:	687b      	ldr	r3, [r7, #4]
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	2b00      	cmp	r3, #0
    760c:	d001      	beq.n	7612 <_calendar_get_counter+0x1a>
    760e:	2301      	movs	r3, #1
    7610:	e000      	b.n	7614 <_calendar_get_counter+0x1c>
    7612:	2300      	movs	r3, #0
    7614:	f003 0301 	and.w	r3, r3, #1
    7618:	b2db      	uxtb	r3, r3
    761a:	2299      	movs	r2, #153	; 0x99
    761c:	4906      	ldr	r1, [pc, #24]	; (7638 <_calendar_get_counter+0x40>)
    761e:	4618      	mov	r0, r3
    7620:	4b06      	ldr	r3, [pc, #24]	; (763c <_calendar_get_counter+0x44>)
    7622:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	681b      	ldr	r3, [r3, #0]
    7628:	4618      	mov	r0, r3
    762a:	4b05      	ldr	r3, [pc, #20]	; (7640 <_calendar_get_counter+0x48>)
    762c:	4798      	blx	r3
    762e:	4603      	mov	r3, r0
}
    7630:	4618      	mov	r0, r3
    7632:	3708      	adds	r7, #8
    7634:	46bd      	mov	sp, r7
    7636:	bd80      	pop	{r7, pc}
    7638:	000113e8 	.word	0x000113e8
    763c:	00005239 	.word	0x00005239
    7640:	00007505 	.word	0x00007505

00007644 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    7644:	b580      	push	{r7, lr}
    7646:	b084      	sub	sp, #16
    7648:	af00      	add	r7, sp, #0
    764a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	681b      	ldr	r3, [r3, #0]
    7650:	4618      	mov	r0, r3
    7652:	4b19      	ldr	r3, [pc, #100]	; (76b8 <_rtc_interrupt_handler+0x74>)
    7654:	4798      	blx	r3
    7656:	4603      	mov	r3, r0
    7658:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    765a:	687b      	ldr	r3, [r7, #4]
    765c:	681b      	ldr	r3, [r3, #0]
    765e:	4618      	mov	r0, r3
    7660:	4b16      	ldr	r3, [pc, #88]	; (76bc <_rtc_interrupt_handler+0x78>)
    7662:	4798      	blx	r3
    7664:	4603      	mov	r3, r0
    7666:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7668:	89fa      	ldrh	r2, [r7, #14]
    766a:	89bb      	ldrh	r3, [r7, #12]
    766c:	4013      	ands	r3, r2
    766e:	b29b      	uxth	r3, r3
    7670:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7674:	2b00      	cmp	r3, #0
    7676:	d009      	beq.n	768c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	685b      	ldr	r3, [r3, #4]
    767c:	6878      	ldr	r0, [r7, #4]
    767e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	681b      	ldr	r3, [r3, #0]
    7684:	4618      	mov	r0, r3
    7686:	4b0e      	ldr	r3, [pc, #56]	; (76c0 <_rtc_interrupt_handler+0x7c>)
    7688:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    768a:	e010      	b.n	76ae <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    768c:	89fa      	ldrh	r2, [r7, #14]
    768e:	89bb      	ldrh	r3, [r7, #12]
    7690:	4013      	ands	r3, r2
    7692:	b29b      	uxth	r3, r3
    7694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7698:	2b00      	cmp	r3, #0
    769a:	d008      	beq.n	76ae <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    769c:	687b      	ldr	r3, [r7, #4]
    769e:	689b      	ldr	r3, [r3, #8]
    76a0:	6878      	ldr	r0, [r7, #4]
    76a2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	681b      	ldr	r3, [r3, #0]
    76a8:	4618      	mov	r0, r3
    76aa:	4b06      	ldr	r3, [pc, #24]	; (76c4 <_rtc_interrupt_handler+0x80>)
    76ac:	4798      	blx	r3
}
    76ae:	bf00      	nop
    76b0:	3710      	adds	r7, #16
    76b2:	46bd      	mov	sp, r7
    76b4:	bd80      	pop	{r7, pc}
    76b6:	bf00      	nop
    76b8:	00007411 	.word	0x00007411
    76bc:	0000742b 	.word	0x0000742b
    76c0:	000073d9 	.word	0x000073d9
    76c4:	000073f5 	.word	0x000073f5

000076c8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    76c8:	b580      	push	{r7, lr}
    76ca:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    76cc:	4b03      	ldr	r3, [pc, #12]	; (76dc <RTC_Handler+0x14>)
    76ce:	681b      	ldr	r3, [r3, #0]
    76d0:	4618      	mov	r0, r3
    76d2:	4b03      	ldr	r3, [pc, #12]	; (76e0 <RTC_Handler+0x18>)
    76d4:	4798      	blx	r3
}
    76d6:	bf00      	nop
    76d8:	bd80      	pop	{r7, pc}
    76da:	bf00      	nop
    76dc:	20000e20 	.word	0x20000e20
    76e0:	00007645 	.word	0x00007645

000076e4 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    76e4:	b480      	push	{r7}
    76e6:	b083      	sub	sp, #12
    76e8:	af00      	add	r7, sp, #0
    76ea:	6078      	str	r0, [r7, #4]
    76ec:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    76ee:	bf00      	nop
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	69da      	ldr	r2, [r3, #28]
    76f4:	683b      	ldr	r3, [r7, #0]
    76f6:	4013      	ands	r3, r2
    76f8:	2b00      	cmp	r3, #0
    76fa:	d1f9      	bne.n	76f0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    76fc:	bf00      	nop
    76fe:	370c      	adds	r7, #12
    7700:	46bd      	mov	sp, r7
    7702:	f85d 7b04 	ldr.w	r7, [sp], #4
    7706:	4770      	bx	lr

00007708 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7708:	b480      	push	{r7}
    770a:	b083      	sub	sp, #12
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
    7710:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7712:	687b      	ldr	r3, [r7, #4]
    7714:	69da      	ldr	r2, [r3, #28]
    7716:	683b      	ldr	r3, [r7, #0]
    7718:	4013      	ands	r3, r2
    771a:	2b00      	cmp	r3, #0
    771c:	bf14      	ite	ne
    771e:	2301      	movne	r3, #1
    7720:	2300      	moveq	r3, #0
    7722:	b2db      	uxtb	r3, r3
}
    7724:	4618      	mov	r0, r3
    7726:	370c      	adds	r7, #12
    7728:	46bd      	mov	sp, r7
    772a:	f85d 7b04 	ldr.w	r7, [sp], #4
    772e:	4770      	bx	lr

00007730 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7730:	b480      	push	{r7}
    7732:	b083      	sub	sp, #12
    7734:	af00      	add	r7, sp, #0
    7736:	6078      	str	r0, [r7, #4]
    7738:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    773a:	bf00      	nop
    773c:	687b      	ldr	r3, [r7, #4]
    773e:	69da      	ldr	r2, [r3, #28]
    7740:	683b      	ldr	r3, [r7, #0]
    7742:	4013      	ands	r3, r2
    7744:	2b00      	cmp	r3, #0
    7746:	d1f9      	bne.n	773c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    7748:	bf00      	nop
    774a:	370c      	adds	r7, #12
    774c:	46bd      	mov	sp, r7
    774e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7752:	4770      	bx	lr

00007754 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7754:	b480      	push	{r7}
    7756:	b083      	sub	sp, #12
    7758:	af00      	add	r7, sp, #0
    775a:	6078      	str	r0, [r7, #4]
    775c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    775e:	687b      	ldr	r3, [r7, #4]
    7760:	69da      	ldr	r2, [r3, #28]
    7762:	683b      	ldr	r3, [r7, #0]
    7764:	4013      	ands	r3, r2
    7766:	2b00      	cmp	r3, #0
    7768:	bf14      	ite	ne
    776a:	2301      	movne	r3, #1
    776c:	2300      	moveq	r3, #0
    776e:	b2db      	uxtb	r3, r3
}
    7770:	4618      	mov	r0, r3
    7772:	370c      	adds	r7, #12
    7774:	46bd      	mov	sp, r7
    7776:	f85d 7b04 	ldr.w	r7, [sp], #4
    777a:	4770      	bx	lr

0000777c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    777c:	b480      	push	{r7}
    777e:	b083      	sub	sp, #12
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	2201      	movs	r2, #1
    7788:	761a      	strb	r2, [r3, #24]
}
    778a:	bf00      	nop
    778c:	370c      	adds	r7, #12
    778e:	46bd      	mov	sp, r7
    7790:	f85d 7b04 	ldr.w	r7, [sp], #4
    7794:	4770      	bx	lr

00007796 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    7796:	b480      	push	{r7}
    7798:	b083      	sub	sp, #12
    779a:	af00      	add	r7, sp, #0
    779c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	2202      	movs	r2, #2
    77a2:	761a      	strb	r2, [r3, #24]
}
    77a4:	bf00      	nop
    77a6:	370c      	adds	r7, #12
    77a8:	46bd      	mov	sp, r7
    77aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ae:	4770      	bx	lr

000077b0 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    77b0:	b480      	push	{r7}
    77b2:	b083      	sub	sp, #12
    77b4:	af00      	add	r7, sp, #0
    77b6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	7e1b      	ldrb	r3, [r3, #24]
    77bc:	b2db      	uxtb	r3, r3
}
    77be:	4618      	mov	r0, r3
    77c0:	370c      	adds	r7, #12
    77c2:	46bd      	mov	sp, r7
    77c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c8:	4770      	bx	lr

000077ca <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    77ca:	b480      	push	{r7}
    77cc:	b085      	sub	sp, #20
    77ce:	af00      	add	r7, sp, #0
    77d0:	6078      	str	r0, [r7, #4]
    77d2:	460b      	mov	r3, r1
    77d4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    77d6:	687b      	ldr	r3, [r7, #4]
    77d8:	7e1b      	ldrb	r3, [r3, #24]
    77da:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    77dc:	7bfa      	ldrb	r2, [r7, #15]
    77de:	78fb      	ldrb	r3, [r7, #3]
    77e0:	4013      	ands	r3, r2
    77e2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    77e4:	7bfb      	ldrb	r3, [r7, #15]
}
    77e6:	4618      	mov	r0, r3
    77e8:	3714      	adds	r7, #20
    77ea:	46bd      	mov	sp, r7
    77ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f0:	4770      	bx	lr

000077f2 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    77f2:	b480      	push	{r7}
    77f4:	b083      	sub	sp, #12
    77f6:	af00      	add	r7, sp, #0
    77f8:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	7e1b      	ldrb	r3, [r3, #24]
    77fe:	b2db      	uxtb	r3, r3
}
    7800:	4618      	mov	r0, r3
    7802:	370c      	adds	r7, #12
    7804:	46bd      	mov	sp, r7
    7806:	f85d 7b04 	ldr.w	r7, [sp], #4
    780a:	4770      	bx	lr

0000780c <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    780c:	b480      	push	{r7}
    780e:	b083      	sub	sp, #12
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
    7814:	460b      	mov	r3, r1
    7816:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	78fa      	ldrb	r2, [r7, #3]
    781c:	761a      	strb	r2, [r3, #24]
}
    781e:	bf00      	nop
    7820:	370c      	adds	r7, #12
    7822:	46bd      	mov	sp, r7
    7824:	f85d 7b04 	ldr.w	r7, [sp], #4
    7828:	4770      	bx	lr
	...

0000782c <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    782c:	b580      	push	{r7, lr}
    782e:	b082      	sub	sp, #8
    7830:	af00      	add	r7, sp, #0
    7832:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	681b      	ldr	r3, [r3, #0]
    7838:	f043 0202 	orr.w	r2, r3, #2
    783c:	687b      	ldr	r3, [r7, #4]
    783e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7840:	2103      	movs	r1, #3
    7842:	6878      	ldr	r0, [r7, #4]
    7844:	4b02      	ldr	r3, [pc, #8]	; (7850 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    7846:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7848:	bf00      	nop
    784a:	3708      	adds	r7, #8
    784c:	46bd      	mov	sp, r7
    784e:	bd80      	pop	{r7, pc}
    7850:	000076e5 	.word	0x000076e5

00007854 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7854:	b580      	push	{r7, lr}
    7856:	b082      	sub	sp, #8
    7858:	af00      	add	r7, sp, #0
    785a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	681b      	ldr	r3, [r3, #0]
    7860:	f023 0202 	bic.w	r2, r3, #2
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7868:	2103      	movs	r1, #3
    786a:	6878      	ldr	r0, [r7, #4]
    786c:	4b02      	ldr	r3, [pc, #8]	; (7878 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    786e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7870:	bf00      	nop
    7872:	3708      	adds	r7, #8
    7874:	46bd      	mov	sp, r7
    7876:	bd80      	pop	{r7, pc}
    7878:	000076e5 	.word	0x000076e5

0000787c <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    787c:	b480      	push	{r7}
    787e:	b085      	sub	sp, #20
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	681b      	ldr	r3, [r3, #0]
    7888:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    788a:	68fb      	ldr	r3, [r7, #12]
    788c:	0edb      	lsrs	r3, r3, #27
    788e:	f003 0301 	and.w	r3, r3, #1
    7892:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7894:	68fb      	ldr	r3, [r7, #12]
    7896:	2b00      	cmp	r3, #0
    7898:	bf14      	ite	ne
    789a:	2301      	movne	r3, #1
    789c:	2300      	moveq	r3, #0
    789e:	b2db      	uxtb	r3, r3
}
    78a0:	4618      	mov	r0, r3
    78a2:	3714      	adds	r7, #20
    78a4:	46bd      	mov	sp, r7
    78a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78aa:	4770      	bx	lr

000078ac <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    78ac:	b580      	push	{r7, lr}
    78ae:	b084      	sub	sp, #16
    78b0:	af00      	add	r7, sp, #0
    78b2:	6078      	str	r0, [r7, #4]
    78b4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    78b6:	2103      	movs	r1, #3
    78b8:	6878      	ldr	r0, [r7, #4]
    78ba:	4b07      	ldr	r3, [pc, #28]	; (78d8 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    78bc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	681b      	ldr	r3, [r3, #0]
    78c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    78c4:	68fa      	ldr	r2, [r7, #12]
    78c6:	683b      	ldr	r3, [r7, #0]
    78c8:	4013      	ands	r3, r2
    78ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    78cc:	68fb      	ldr	r3, [r7, #12]
}
    78ce:	4618      	mov	r0, r3
    78d0:	3710      	adds	r7, #16
    78d2:	46bd      	mov	sp, r7
    78d4:	bd80      	pop	{r7, pc}
    78d6:	bf00      	nop
    78d8:	000076e5 	.word	0x000076e5

000078dc <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    78dc:	b580      	push	{r7, lr}
    78de:	b082      	sub	sp, #8
    78e0:	af00      	add	r7, sp, #0
    78e2:	6078      	str	r0, [r7, #4]
    78e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    78e6:	687b      	ldr	r3, [r7, #4]
    78e8:	683a      	ldr	r2, [r7, #0]
    78ea:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    78ec:	2103      	movs	r1, #3
    78ee:	6878      	ldr	r0, [r7, #4]
    78f0:	4b02      	ldr	r3, [pc, #8]	; (78fc <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    78f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    78f4:	bf00      	nop
    78f6:	3708      	adds	r7, #8
    78f8:	46bd      	mov	sp, r7
    78fa:	bd80      	pop	{r7, pc}
    78fc:	000076e5 	.word	0x000076e5

00007900 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7900:	b580      	push	{r7, lr}
    7902:	b084      	sub	sp, #16
    7904:	af00      	add	r7, sp, #0
    7906:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7908:	2103      	movs	r1, #3
    790a:	6878      	ldr	r0, [r7, #4]
    790c:	4b09      	ldr	r3, [pc, #36]	; (7934 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    790e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	681b      	ldr	r3, [r3, #0]
    7914:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7916:	68fb      	ldr	r3, [r7, #12]
    7918:	085b      	lsrs	r3, r3, #1
    791a:	f003 0301 	and.w	r3, r3, #1
    791e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7920:	68fb      	ldr	r3, [r7, #12]
    7922:	2b00      	cmp	r3, #0
    7924:	bf14      	ite	ne
    7926:	2301      	movne	r3, #1
    7928:	2300      	moveq	r3, #0
    792a:	b2db      	uxtb	r3, r3
}
    792c:	4618      	mov	r0, r3
    792e:	3710      	adds	r7, #16
    7930:	46bd      	mov	sp, r7
    7932:	bd80      	pop	{r7, pc}
    7934:	00007731 	.word	0x00007731

00007938 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7938:	b580      	push	{r7, lr}
    793a:	b082      	sub	sp, #8
    793c:	af00      	add	r7, sp, #0
    793e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7940:	687b      	ldr	r3, [r7, #4]
    7942:	681b      	ldr	r3, [r3, #0]
    7944:	f023 0202 	bic.w	r2, r3, #2
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    794c:	2103      	movs	r1, #3
    794e:	6878      	ldr	r0, [r7, #4]
    7950:	4b02      	ldr	r3, [pc, #8]	; (795c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7952:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7954:	bf00      	nop
    7956:	3708      	adds	r7, #8
    7958:	46bd      	mov	sp, r7
    795a:	bd80      	pop	{r7, pc}
    795c:	00007731 	.word	0x00007731

00007960 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7960:	b580      	push	{r7, lr}
    7962:	b084      	sub	sp, #16
    7964:	af00      	add	r7, sp, #0
    7966:	6078      	str	r0, [r7, #4]
    7968:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    796a:	2103      	movs	r1, #3
    796c:	6878      	ldr	r0, [r7, #4]
    796e:	4b07      	ldr	r3, [pc, #28]	; (798c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7970:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7978:	68fa      	ldr	r2, [r7, #12]
    797a:	683b      	ldr	r3, [r7, #0]
    797c:	4013      	ands	r3, r2
    797e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7980:	68fb      	ldr	r3, [r7, #12]
}
    7982:	4618      	mov	r0, r3
    7984:	3710      	adds	r7, #16
    7986:	46bd      	mov	sp, r7
    7988:	bd80      	pop	{r7, pc}
    798a:	bf00      	nop
    798c:	00007731 	.word	0x00007731

00007990 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7990:	b580      	push	{r7, lr}
    7992:	b082      	sub	sp, #8
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
    7998:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	683a      	ldr	r2, [r7, #0]
    799e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    79a0:	2103      	movs	r1, #3
    79a2:	6878      	ldr	r0, [r7, #4]
    79a4:	4b02      	ldr	r3, [pc, #8]	; (79b0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    79a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    79a8:	bf00      	nop
    79aa:	3708      	adds	r7, #8
    79ac:	46bd      	mov	sp, r7
    79ae:	bd80      	pop	{r7, pc}
    79b0:	00007731 	.word	0x00007731

000079b4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    79b4:	b580      	push	{r7, lr}
    79b6:	b082      	sub	sp, #8
    79b8:	af00      	add	r7, sp, #0
    79ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	685b      	ldr	r3, [r3, #4]
    79c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    79c8:	2104      	movs	r1, #4
    79ca:	6878      	ldr	r0, [r7, #4]
    79cc:	4b02      	ldr	r3, [pc, #8]	; (79d8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    79ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    79d0:	bf00      	nop
    79d2:	3708      	adds	r7, #8
    79d4:	46bd      	mov	sp, r7
    79d6:	bd80      	pop	{r7, pc}
    79d8:	000076e5 	.word	0x000076e5

000079dc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    79dc:	b580      	push	{r7, lr}
    79de:	b082      	sub	sp, #8
    79e0:	af00      	add	r7, sp, #0
    79e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	685b      	ldr	r3, [r3, #4]
    79e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    79f0:	2104      	movs	r1, #4
    79f2:	6878      	ldr	r0, [r7, #4]
    79f4:	4b02      	ldr	r3, [pc, #8]	; (7a00 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    79f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    79f8:	bf00      	nop
    79fa:	3708      	adds	r7, #8
    79fc:	46bd      	mov	sp, r7
    79fe:	bd80      	pop	{r7, pc}
    7a00:	000076e5 	.word	0x000076e5

00007a04 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7a04:	b580      	push	{r7, lr}
    7a06:	b082      	sub	sp, #8
    7a08:	af00      	add	r7, sp, #0
    7a0a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	685b      	ldr	r3, [r3, #4]
    7a10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a18:	2104      	movs	r1, #4
    7a1a:	6878      	ldr	r0, [r7, #4]
    7a1c:	4b02      	ldr	r3, [pc, #8]	; (7a28 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7a1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a20:	bf00      	nop
    7a22:	3708      	adds	r7, #8
    7a24:	46bd      	mov	sp, r7
    7a26:	bd80      	pop	{r7, pc}
    7a28:	000076e5 	.word	0x000076e5

00007a2c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7a2c:	b580      	push	{r7, lr}
    7a2e:	b082      	sub	sp, #8
    7a30:	af00      	add	r7, sp, #0
    7a32:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	685b      	ldr	r3, [r3, #4]
    7a38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a40:	2104      	movs	r1, #4
    7a42:	6878      	ldr	r0, [r7, #4]
    7a44:	4b02      	ldr	r3, [pc, #8]	; (7a50 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7a46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a48:	bf00      	nop
    7a4a:	3708      	adds	r7, #8
    7a4c:	46bd      	mov	sp, r7
    7a4e:	bd80      	pop	{r7, pc}
    7a50:	000076e5 	.word	0x000076e5

00007a54 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7a54:	b580      	push	{r7, lr}
    7a56:	b082      	sub	sp, #8
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
    7a5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	685a      	ldr	r2, [r3, #4]
    7a62:	683b      	ldr	r3, [r7, #0]
    7a64:	041b      	lsls	r3, r3, #16
    7a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    7a6a:	431a      	orrs	r2, r3
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a70:	2104      	movs	r1, #4
    7a72:	6878      	ldr	r0, [r7, #4]
    7a74:	4b02      	ldr	r3, [pc, #8]	; (7a80 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    7a76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a78:	bf00      	nop
    7a7a:	3708      	adds	r7, #8
    7a7c:	46bd      	mov	sp, r7
    7a7e:	bd80      	pop	{r7, pc}
    7a80:	000076e5 	.word	0x000076e5

00007a84 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7a84:	b580      	push	{r7, lr}
    7a86:	b082      	sub	sp, #8
    7a88:	af00      	add	r7, sp, #0
    7a8a:	6078      	str	r0, [r7, #4]
    7a8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7a8e:	687b      	ldr	r3, [r7, #4]
    7a90:	683a      	ldr	r2, [r7, #0]
    7a92:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a94:	2104      	movs	r1, #4
    7a96:	6878      	ldr	r0, [r7, #4]
    7a98:	4b02      	ldr	r3, [pc, #8]	; (7aa4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    7a9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a9c:	bf00      	nop
    7a9e:	3708      	adds	r7, #8
    7aa0:	46bd      	mov	sp, r7
    7aa2:	bd80      	pop	{r7, pc}
    7aa4:	000076e5 	.word	0x000076e5

00007aa8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    7aa8:	b580      	push	{r7, lr}
    7aaa:	b082      	sub	sp, #8
    7aac:	af00      	add	r7, sp, #0
    7aae:	6078      	str	r0, [r7, #4]
    7ab0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	683a      	ldr	r2, [r7, #0]
    7ab6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    7ab8:	2117      	movs	r1, #23
    7aba:	6878      	ldr	r0, [r7, #4]
    7abc:	4b02      	ldr	r3, [pc, #8]	; (7ac8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    7abe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ac0:	bf00      	nop
    7ac2:	3708      	adds	r7, #8
    7ac4:	46bd      	mov	sp, r7
    7ac6:	bd80      	pop	{r7, pc}
    7ac8:	00007731 	.word	0x00007731

00007acc <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7acc:	b480      	push	{r7}
    7ace:	b083      	sub	sp, #12
    7ad0:	af00      	add	r7, sp, #0
    7ad2:	6078      	str	r0, [r7, #4]
    7ad4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7ad6:	687b      	ldr	r3, [r7, #4]
    7ad8:	683a      	ldr	r2, [r7, #0]
    7ada:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7adc:	bf00      	nop
    7ade:	370c      	adds	r7, #12
    7ae0:	46bd      	mov	sp, r7
    7ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae6:	4770      	bx	lr

00007ae8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    7ae8:	b480      	push	{r7}
    7aea:	b083      	sub	sp, #12
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
    7af0:	460b      	mov	r3, r1
    7af2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	78fa      	ldrb	r2, [r7, #3]
    7af8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7afa:	bf00      	nop
    7afc:	370c      	adds	r7, #12
    7afe:	46bd      	mov	sp, r7
    7b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b04:	4770      	bx	lr
	...

00007b08 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    7b08:	b580      	push	{r7, lr}
    7b0a:	b084      	sub	sp, #16
    7b0c:	af00      	add	r7, sp, #0
    7b0e:	6078      	str	r0, [r7, #4]
    7b10:	460b      	mov	r3, r1
    7b12:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7b18:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7b1a:	68fb      	ldr	r3, [r7, #12]
    7b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    7b20:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7b22:	78fb      	ldrb	r3, [r7, #3]
    7b24:	039b      	lsls	r3, r3, #14
    7b26:	461a      	mov	r2, r3
    7b28:	68fb      	ldr	r3, [r7, #12]
    7b2a:	4313      	orrs	r3, r2
    7b2c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	68fa      	ldr	r2, [r7, #12]
    7b32:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7b34:	2104      	movs	r1, #4
    7b36:	6878      	ldr	r0, [r7, #4]
    7b38:	4b02      	ldr	r3, [pc, #8]	; (7b44 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    7b3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b3c:	bf00      	nop
    7b3e:	3710      	adds	r7, #16
    7b40:	46bd      	mov	sp, r7
    7b42:	bd80      	pop	{r7, pc}
    7b44:	000076e5 	.word	0x000076e5

00007b48 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    7b48:	b580      	push	{r7, lr}
    7b4a:	b082      	sub	sp, #8
    7b4c:	af00      	add	r7, sp, #0
    7b4e:	6078      	str	r0, [r7, #4]
    7b50:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	683a      	ldr	r2, [r7, #0]
    7b56:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7b58:	2104      	movs	r1, #4
    7b5a:	6878      	ldr	r0, [r7, #4]
    7b5c:	4b02      	ldr	r3, [pc, #8]	; (7b68 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7b5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b60:	bf00      	nop
    7b62:	3708      	adds	r7, #8
    7b64:	46bd      	mov	sp, r7
    7b66:	bd80      	pop	{r7, pc}
    7b68:	000076e5 	.word	0x000076e5

00007b6c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7b6c:	b580      	push	{r7, lr}
    7b6e:	b082      	sub	sp, #8
    7b70:	af00      	add	r7, sp, #0
    7b72:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7b74:	2104      	movs	r1, #4
    7b76:	6878      	ldr	r0, [r7, #4]
    7b78:	4b03      	ldr	r3, [pc, #12]	; (7b88 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    7b7a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7b80:	4618      	mov	r0, r3
    7b82:	3708      	adds	r7, #8
    7b84:	46bd      	mov	sp, r7
    7b86:	bd80      	pop	{r7, pc}
    7b88:	000076e5 	.word	0x000076e5

00007b8c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7b8c:	b480      	push	{r7}
    7b8e:	b083      	sub	sp, #12
    7b90:	af00      	add	r7, sp, #0
    7b92:	6078      	str	r0, [r7, #4]
    7b94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	683a      	ldr	r2, [r7, #0]
    7b9a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b9c:	bf00      	nop
    7b9e:	370c      	adds	r7, #12
    7ba0:	46bd      	mov	sp, r7
    7ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba6:	4770      	bx	lr

00007ba8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    7ba8:	b580      	push	{r7, lr}
    7baa:	b082      	sub	sp, #8
    7bac:	af00      	add	r7, sp, #0
    7bae:	6078      	str	r0, [r7, #4]
    7bb0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	683a      	ldr	r2, [r7, #0]
    7bb6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7bb8:	2104      	movs	r1, #4
    7bba:	6878      	ldr	r0, [r7, #4]
    7bbc:	4b02      	ldr	r3, [pc, #8]	; (7bc8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    7bbe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7bc0:	bf00      	nop
    7bc2:	3708      	adds	r7, #8
    7bc4:	46bd      	mov	sp, r7
    7bc6:	bd80      	pop	{r7, pc}
    7bc8:	000076e5 	.word	0x000076e5

00007bcc <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b082      	sub	sp, #8
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7bd4:	2104      	movs	r1, #4
    7bd6:	6878      	ldr	r0, [r7, #4]
    7bd8:	4b03      	ldr	r3, [pc, #12]	; (7be8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    7bda:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7bdc:	687b      	ldr	r3, [r7, #4]
    7bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7be0:	4618      	mov	r0, r3
    7be2:	3708      	adds	r7, #8
    7be4:	46bd      	mov	sp, r7
    7be6:	bd80      	pop	{r7, pc}
    7be8:	000076e5 	.word	0x000076e5

00007bec <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    7bec:	b480      	push	{r7}
    7bee:	b083      	sub	sp, #12
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	6078      	str	r0, [r7, #4]
    7bf4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    7bf6:	687b      	ldr	r3, [r7, #4]
    7bf8:	683a      	ldr	r2, [r7, #0]
    7bfa:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7bfc:	bf00      	nop
    7bfe:	370c      	adds	r7, #12
    7c00:	46bd      	mov	sp, r7
    7c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c06:	4770      	bx	lr

00007c08 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    7c08:	b480      	push	{r7}
    7c0a:	b083      	sub	sp, #12
    7c0c:	af00      	add	r7, sp, #0
    7c0e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7c10:	687b      	ldr	r3, [r7, #4]
    7c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7c14:	4618      	mov	r0, r3
    7c16:	370c      	adds	r7, #12
    7c18:	46bd      	mov	sp, r7
    7c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c1e:	4770      	bx	lr

00007c20 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    7c20:	b480      	push	{r7}
    7c22:	b083      	sub	sp, #12
    7c24:	af00      	add	r7, sp, #0
    7c26:	6078      	str	r0, [r7, #4]
    7c28:	460b      	mov	r3, r1
    7c2a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	78fa      	ldrb	r2, [r7, #3]
    7c30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c34:	bf00      	nop
    7c36:	370c      	adds	r7, #12
    7c38:	46bd      	mov	sp, r7
    7c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c3e:	4770      	bx	lr

00007c40 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    7c40:	b480      	push	{r7}
    7c42:	b083      	sub	sp, #12
    7c44:	af00      	add	r7, sp, #0
    7c46:	6078      	str	r0, [r7, #4]
    7c48:	460b      	mov	r3, r1
    7c4a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	887a      	ldrh	r2, [r7, #2]
    7c50:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c52:	bf00      	nop
    7c54:	370c      	adds	r7, #12
    7c56:	46bd      	mov	sp, r7
    7c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c5c:	4770      	bx	lr
	...

00007c60 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7c60:	b580      	push	{r7, lr}
    7c62:	b082      	sub	sp, #8
    7c64:	af00      	add	r7, sp, #0
    7c66:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c68:	2104      	movs	r1, #4
    7c6a:	6878      	ldr	r0, [r7, #4]
    7c6c:	4b06      	ldr	r3, [pc, #24]	; (7c88 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7c6e:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7c70:	687b      	ldr	r3, [r7, #4]
    7c72:	8b5b      	ldrh	r3, [r3, #26]
    7c74:	b29b      	uxth	r3, r3
    7c76:	091b      	lsrs	r3, r3, #4
    7c78:	b29b      	uxth	r3, r3
    7c7a:	f003 0303 	and.w	r3, r3, #3
    7c7e:	b29b      	uxth	r3, r3
}
    7c80:	4618      	mov	r0, r3
    7c82:	3708      	adds	r7, #8
    7c84:	46bd      	mov	sp, r7
    7c86:	bd80      	pop	{r7, pc}
    7c88:	000076e5 	.word	0x000076e5

00007c8c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	b082      	sub	sp, #8
    7c90:	af00      	add	r7, sp, #0
    7c92:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c94:	2104      	movs	r1, #4
    7c96:	6878      	ldr	r0, [r7, #4]
    7c98:	4b04      	ldr	r3, [pc, #16]	; (7cac <hri_sercomi2cm_read_STATUS_reg+0x20>)
    7c9a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	8b5b      	ldrh	r3, [r3, #26]
    7ca0:	b29b      	uxth	r3, r3
}
    7ca2:	4618      	mov	r0, r3
    7ca4:	3708      	adds	r7, #8
    7ca6:	46bd      	mov	sp, r7
    7ca8:	bd80      	pop	{r7, pc}
    7caa:	bf00      	nop
    7cac:	000076e5 	.word	0x000076e5

00007cb0 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b082      	sub	sp, #8
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	460b      	mov	r3, r1
    7cba:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	887a      	ldrh	r2, [r7, #2]
    7cc0:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7cc2:	2104      	movs	r1, #4
    7cc4:	6878      	ldr	r0, [r7, #4]
    7cc6:	4b03      	ldr	r3, [pc, #12]	; (7cd4 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    7cc8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cca:	bf00      	nop
    7ccc:	3708      	adds	r7, #8
    7cce:	46bd      	mov	sp, r7
    7cd0:	bd80      	pop	{r7, pc}
    7cd2:	bf00      	nop
    7cd4:	000076e5 	.word	0x000076e5

00007cd8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    7cd8:	b4b0      	push	{r4, r5, r7}
    7cda:	b08d      	sub	sp, #52	; 0x34
    7cdc:	af00      	add	r7, sp, #0
    7cde:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7ce0:	4b13      	ldr	r3, [pc, #76]	; (7d30 <_sercom_get_hardware_index+0x58>)
    7ce2:	f107 040c 	add.w	r4, r7, #12
    7ce6:	461d      	mov	r5, r3
    7ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7cec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7cf4:	2300      	movs	r3, #0
    7cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    7cf8:	e010      	b.n	7d1c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7cfc:	009b      	lsls	r3, r3, #2
    7cfe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7d02:	4413      	add	r3, r2
    7d04:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7d08:	461a      	mov	r2, r3
    7d0a:	687b      	ldr	r3, [r7, #4]
    7d0c:	429a      	cmp	r2, r3
    7d0e:	d102      	bne.n	7d16 <_sercom_get_hardware_index+0x3e>
			return i;
    7d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d12:	b2db      	uxtb	r3, r3
    7d14:	e006      	b.n	7d24 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d18:	3301      	adds	r3, #1
    7d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    7d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d1e:	2b07      	cmp	r3, #7
    7d20:	d9eb      	bls.n	7cfa <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    7d22:	2300      	movs	r3, #0
}
    7d24:	4618      	mov	r0, r3
    7d26:	3734      	adds	r7, #52	; 0x34
    7d28:	46bd      	mov	sp, r7
    7d2a:	bcb0      	pop	{r4, r5, r7}
    7d2c:	4770      	bx	lr
    7d2e:	bf00      	nop
    7d30:	0001141c 	.word	0x0001141c

00007d34 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7d34:	b580      	push	{r7, lr}
    7d36:	b084      	sub	sp, #16
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7d3c:	6878      	ldr	r0, [r7, #4]
    7d3e:	4b13      	ldr	r3, [pc, #76]	; (7d8c <_get_i2cm_index+0x58>)
    7d40:	4798      	blx	r3
    7d42:	4603      	mov	r3, r0
    7d44:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7d46:	2300      	movs	r3, #0
    7d48:	73fb      	strb	r3, [r7, #15]
    7d4a:	e010      	b.n	7d6e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    7d4c:	7bfa      	ldrb	r2, [r7, #15]
    7d4e:	4910      	ldr	r1, [pc, #64]	; (7d90 <_get_i2cm_index+0x5c>)
    7d50:	4613      	mov	r3, r2
    7d52:	005b      	lsls	r3, r3, #1
    7d54:	4413      	add	r3, r2
    7d56:	00db      	lsls	r3, r3, #3
    7d58:	440b      	add	r3, r1
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	7bba      	ldrb	r2, [r7, #14]
    7d5e:	429a      	cmp	r2, r3
    7d60:	d102      	bne.n	7d68 <_get_i2cm_index+0x34>
			return i;
    7d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7d66:	e00d      	b.n	7d84 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7d68:	7bfb      	ldrb	r3, [r7, #15]
    7d6a:	3301      	adds	r3, #1
    7d6c:	73fb      	strb	r3, [r7, #15]
    7d6e:	7bfb      	ldrb	r3, [r7, #15]
    7d70:	2b02      	cmp	r3, #2
    7d72:	d9eb      	bls.n	7d4c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    7d74:	f240 32a6 	movw	r2, #934	; 0x3a6
    7d78:	4906      	ldr	r1, [pc, #24]	; (7d94 <_get_i2cm_index+0x60>)
    7d7a:	2000      	movs	r0, #0
    7d7c:	4b06      	ldr	r3, [pc, #24]	; (7d98 <_get_i2cm_index+0x64>)
    7d7e:	4798      	blx	r3
	return -1;
    7d80:	f04f 33ff 	mov.w	r3, #4294967295
}
    7d84:	4618      	mov	r0, r3
    7d86:	3710      	adds	r7, #16
    7d88:	46bd      	mov	sp, r7
    7d8a:	bd80      	pop	{r7, pc}
    7d8c:	00007cd9 	.word	0x00007cd9
    7d90:	20000018 	.word	0x20000018
    7d94:	00011400 	.word	0x00011400
    7d98:	00005239 	.word	0x00005239

00007d9c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    7d9c:	b580      	push	{r7, lr}
    7d9e:	b082      	sub	sp, #8
    7da0:	af00      	add	r7, sp, #0
    7da2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    7da4:	2103      	movs	r1, #3
    7da6:	6878      	ldr	r0, [r7, #4]
    7da8:	4b02      	ldr	r3, [pc, #8]	; (7db4 <_sercom_i2c_send_stop+0x18>)
    7daa:	4798      	blx	r3
}
    7dac:	bf00      	nop
    7dae:	3708      	adds	r7, #8
    7db0:	46bd      	mov	sp, r7
    7db2:	bd80      	pop	{r7, pc}
    7db4:	00007a55 	.word	0x00007a55

00007db8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    7db8:	b590      	push	{r4, r7, lr}
    7dba:	b087      	sub	sp, #28
    7dbc:	af00      	add	r7, sp, #0
    7dbe:	60f8      	str	r0, [r7, #12]
    7dc0:	60b9      	str	r1, [r7, #8]
    7dc2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7dc4:	68f8      	ldr	r0, [r7, #12]
    7dc6:	4b7d      	ldr	r3, [pc, #500]	; (7fbc <_sercom_i2c_sync_analyse_flags+0x204>)
    7dc8:	4798      	blx	r3
    7dca:	4603      	mov	r3, r0
    7dcc:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    7dce:	68f8      	ldr	r0, [r7, #12]
    7dd0:	4b7b      	ldr	r3, [pc, #492]	; (7fc0 <_sercom_i2c_sync_analyse_flags+0x208>)
    7dd2:	4798      	blx	r3
    7dd4:	4603      	mov	r3, r0
    7dd6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    7dd8:	68bb      	ldr	r3, [r7, #8]
    7dda:	f003 0301 	and.w	r3, r3, #1
    7dde:	2b00      	cmp	r3, #0
    7de0:	f000 8095 	beq.w	7f0e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    7de4:	8a7b      	ldrh	r3, [r7, #18]
    7de6:	f003 0302 	and.w	r3, r3, #2
    7dea:	2b00      	cmp	r3, #0
    7dec:	d01d      	beq.n	7e2a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    7dee:	68f8      	ldr	r0, [r7, #12]
    7df0:	4b74      	ldr	r3, [pc, #464]	; (7fc4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    7df2:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	885b      	ldrh	r3, [r3, #2]
    7df8:	b29b      	uxth	r3, r3
    7dfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7dfe:	b29a      	uxth	r2, r3
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	885b      	ldrh	r3, [r3, #2]
    7e08:	b29b      	uxth	r3, r3
    7e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7e0e:	b29a      	uxth	r2, r3
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    7e14:	8a7b      	ldrh	r3, [r7, #18]
    7e16:	f003 0301 	and.w	r3, r3, #1
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d002      	beq.n	7e24 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    7e1e:	f06f 0304 	mvn.w	r3, #4
    7e22:	e0c6      	b.n	7fb2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    7e24:	f06f 0303 	mvn.w	r3, #3
    7e28:	e0c3      	b.n	7fb2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    7e2a:	8a7b      	ldrh	r3, [r7, #18]
    7e2c:	f003 0304 	and.w	r3, r3, #4
    7e30:	2b00      	cmp	r3, #0
    7e32:	d01f      	beq.n	7e74 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	685b      	ldr	r3, [r3, #4]
    7e38:	2b00      	cmp	r3, #0
    7e3a:	dd07      	ble.n	7e4c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    7e3c:	687b      	ldr	r3, [r7, #4]
    7e3e:	885b      	ldrh	r3, [r3, #2]
    7e40:	b29b      	uxth	r3, r3
    7e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7e46:	b29a      	uxth	r2, r3
    7e48:	687b      	ldr	r3, [r7, #4]
    7e4a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	885b      	ldrh	r3, [r3, #2]
    7e50:	b29b      	uxth	r3, r3
    7e52:	b21b      	sxth	r3, r3
    7e54:	2b00      	cmp	r3, #0
    7e56:	da02      	bge.n	7e5e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    7e58:	68f8      	ldr	r0, [r7, #12]
    7e5a:	4b5b      	ldr	r3, [pc, #364]	; (7fc8 <_sercom_i2c_sync_analyse_flags+0x210>)
    7e5c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7e5e:	687b      	ldr	r3, [r7, #4]
    7e60:	885b      	ldrh	r3, [r3, #2]
    7e62:	b29b      	uxth	r3, r3
    7e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7e68:	b29a      	uxth	r2, r3
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    7e6e:	f06f 0301 	mvn.w	r3, #1
    7e72:	e09e      	b.n	7fb2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    7e74:	687b      	ldr	r3, [r7, #4]
    7e76:	885b      	ldrh	r3, [r3, #2]
    7e78:	b29b      	uxth	r3, r3
    7e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d01c      	beq.n	7ebc <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7e82:	687b      	ldr	r3, [r7, #4]
    7e84:	881b      	ldrh	r3, [r3, #0]
    7e86:	121b      	asrs	r3, r3, #8
    7e88:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7e8a:	f003 0406 	and.w	r4, r3, #6
    7e8e:	68f8      	ldr	r0, [r7, #12]
    7e90:	4b4e      	ldr	r3, [pc, #312]	; (7fcc <_sercom_i2c_sync_analyse_flags+0x214>)
    7e92:	4798      	blx	r3
    7e94:	4603      	mov	r3, r0
    7e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7e9a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    7e9c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    7ea0:	4619      	mov	r1, r3
    7ea2:	68f8      	ldr	r0, [r7, #12]
    7ea4:	4b4a      	ldr	r3, [pc, #296]	; (7fd0 <_sercom_i2c_sync_analyse_flags+0x218>)
    7ea6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	885b      	ldrh	r3, [r3, #2]
    7eac:	b29b      	uxth	r3, r3
    7eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7eb2:	b29a      	uxth	r2, r3
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    7eb8:	2300      	movs	r3, #0
    7eba:	e07a      	b.n	7fb2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	685b      	ldr	r3, [r3, #4]
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d111      	bne.n	7ee8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	885b      	ldrh	r3, [r3, #2]
    7ec8:	b29b      	uxth	r3, r3
    7eca:	b21b      	sxth	r3, r3
    7ecc:	2b00      	cmp	r3, #0
    7ece:	da02      	bge.n	7ed6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    7ed0:	68f8      	ldr	r0, [r7, #12]
    7ed2:	4b3d      	ldr	r3, [pc, #244]	; (7fc8 <_sercom_i2c_sync_analyse_flags+0x210>)
    7ed4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	885b      	ldrh	r3, [r3, #2]
    7eda:	b29b      	uxth	r3, r3
    7edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7ee0:	b29a      	uxth	r2, r3
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	805a      	strh	r2, [r3, #2]
    7ee6:	e010      	b.n	7f0a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	689b      	ldr	r3, [r3, #8]
    7eec:	781b      	ldrb	r3, [r3, #0]
    7eee:	4619      	mov	r1, r3
    7ef0:	68f8      	ldr	r0, [r7, #12]
    7ef2:	4b38      	ldr	r3, [pc, #224]	; (7fd4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    7ef4:	4798      	blx	r3
				msg->buffer++;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	689b      	ldr	r3, [r3, #8]
    7efa:	1c5a      	adds	r2, r3, #1
    7efc:	687b      	ldr	r3, [r7, #4]
    7efe:	609a      	str	r2, [r3, #8]
				msg->len--;
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	685b      	ldr	r3, [r3, #4]
    7f04:	1e5a      	subs	r2, r3, #1
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    7f0a:	2300      	movs	r3, #0
    7f0c:	e051      	b.n	7fb2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    7f0e:	68bb      	ldr	r3, [r7, #8]
    7f10:	f003 0302 	and.w	r3, r3, #2
    7f14:	2b00      	cmp	r3, #0
    7f16:	d04b      	beq.n	7fb0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	685b      	ldr	r3, [r3, #4]
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d041      	beq.n	7fa4 <_sercom_i2c_sync_analyse_flags+0x1ec>
    7f20:	8a7b      	ldrh	r3, [r7, #18]
    7f22:	f003 0304 	and.w	r3, r3, #4
    7f26:	2b00      	cmp	r3, #0
    7f28:	d13c      	bne.n	7fa4 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	685b      	ldr	r3, [r3, #4]
    7f2e:	1e5a      	subs	r2, r3, #1
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7f34:	687b      	ldr	r3, [r7, #4]
    7f36:	685b      	ldr	r3, [r3, #4]
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d102      	bne.n	7f42 <_sercom_i2c_sync_analyse_flags+0x18a>
    7f3c:	697b      	ldr	r3, [r7, #20]
    7f3e:	2b00      	cmp	r3, #0
    7f40:	d006      	beq.n	7f50 <_sercom_i2c_sync_analyse_flags+0x198>
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	685b      	ldr	r3, [r3, #4]
    7f46:	2b01      	cmp	r3, #1
    7f48:	d105      	bne.n	7f56 <_sercom_i2c_sync_analyse_flags+0x19e>
    7f4a:	697b      	ldr	r3, [r7, #20]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d002      	beq.n	7f56 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7f50:	68f8      	ldr	r0, [r7, #12]
    7f52:	4b21      	ldr	r3, [pc, #132]	; (7fd8 <_sercom_i2c_sync_analyse_flags+0x220>)
    7f54:	4798      	blx	r3
			}

			if (msg->len == 0) {
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	685b      	ldr	r3, [r3, #4]
    7f5a:	2b00      	cmp	r3, #0
    7f5c:	d113      	bne.n	7f86 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	885b      	ldrh	r3, [r3, #2]
    7f62:	b29b      	uxth	r3, r3
    7f64:	b21b      	sxth	r3, r3
    7f66:	2b00      	cmp	r3, #0
    7f68:	da05      	bge.n	7f76 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    7f6a:	68f8      	ldr	r0, [r7, #12]
    7f6c:	4b1b      	ldr	r3, [pc, #108]	; (7fdc <_sercom_i2c_sync_analyse_flags+0x224>)
    7f6e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    7f70:	68f8      	ldr	r0, [r7, #12]
    7f72:	4b15      	ldr	r3, [pc, #84]	; (7fc8 <_sercom_i2c_sync_analyse_flags+0x210>)
    7f74:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7f76:	687b      	ldr	r3, [r7, #4]
    7f78:	885b      	ldrh	r3, [r3, #2]
    7f7a:	b29b      	uxth	r3, r3
    7f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7f80:	b29a      	uxth	r2, r3
    7f82:	687b      	ldr	r3, [r7, #4]
    7f84:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	689c      	ldr	r4, [r3, #8]
    7f8a:	1c62      	adds	r2, r4, #1
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	609a      	str	r2, [r3, #8]
    7f90:	68f8      	ldr	r0, [r7, #12]
    7f92:	4b13      	ldr	r3, [pc, #76]	; (7fe0 <_sercom_i2c_sync_analyse_flags+0x228>)
    7f94:	4798      	blx	r3
    7f96:	4603      	mov	r3, r0
    7f98:	b2db      	uxtb	r3, r3
    7f9a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7f9c:	68f8      	ldr	r0, [r7, #12]
    7f9e:	4b11      	ldr	r3, [pc, #68]	; (7fe4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    7fa0:	4798      	blx	r3
    7fa2:	e005      	b.n	7fb0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7fa4:	68f8      	ldr	r0, [r7, #12]
    7fa6:	4b0f      	ldr	r3, [pc, #60]	; (7fe4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    7fa8:	4798      	blx	r3
			return I2C_NACK;
    7faa:	f06f 0301 	mvn.w	r3, #1
    7fae:	e000      	b.n	7fb2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    7fb0:	2300      	movs	r3, #0
}
    7fb2:	4618      	mov	r0, r3
    7fb4:	371c      	adds	r7, #28
    7fb6:	46bd      	mov	sp, r7
    7fb8:	bd90      	pop	{r4, r7, pc}
    7fba:	bf00      	nop
    7fbc:	0000787d 	.word	0x0000787d
    7fc0:	00007c8d 	.word	0x00007c8d
    7fc4:	0000777d 	.word	0x0000777d
    7fc8:	00007d9d 	.word	0x00007d9d
    7fcc:	00007b6d 	.word	0x00007b6d
    7fd0:	00007b49 	.word	0x00007b49
    7fd4:	00007ba9 	.word	0x00007ba9
    7fd8:	00007a05 	.word	0x00007a05
    7fdc:	000079dd 	.word	0x000079dd
    7fe0:	00007bcd 	.word	0x00007bcd
    7fe4:	00007797 	.word	0x00007797

00007fe8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    7fe8:	b580      	push	{r7, lr}
    7fea:	b082      	sub	sp, #8
    7fec:	af00      	add	r7, sp, #0
    7fee:	6078      	str	r0, [r7, #4]
    7ff0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    7ff2:	687b      	ldr	r3, [r7, #4]
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	bf14      	ite	ne
    7ff8:	2301      	movne	r3, #1
    7ffa:	2300      	moveq	r3, #0
    7ffc:	b2db      	uxtb	r3, r3
    7ffe:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    8002:	4908      	ldr	r1, [pc, #32]	; (8024 <_i2c_m_sync_init+0x3c>)
    8004:	4618      	mov	r0, r3
    8006:	4b08      	ldr	r3, [pc, #32]	; (8028 <_i2c_m_sync_init+0x40>)
    8008:	4798      	blx	r3

	i2c_dev->hw = hw;
    800a:	687b      	ldr	r3, [r7, #4]
    800c:	683a      	ldr	r2, [r7, #0]
    800e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	6839      	ldr	r1, [r7, #0]
    8014:	4618      	mov	r0, r3
    8016:	4b05      	ldr	r3, [pc, #20]	; (802c <_i2c_m_sync_init+0x44>)
    8018:	4798      	blx	r3
    801a:	4603      	mov	r3, r0
}
    801c:	4618      	mov	r0, r3
    801e:	3708      	adds	r7, #8
    8020:	46bd      	mov	sp, r7
    8022:	bd80      	pop	{r7, pc}
    8024:	00011400 	.word	0x00011400
    8028:	00005239 	.word	0x00005239
    802c:	00008401 	.word	0x00008401

00008030 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    8030:	b580      	push	{r7, lr}
    8032:	b082      	sub	sp, #8
    8034:	af00      	add	r7, sp, #0
    8036:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    8038:	687b      	ldr	r3, [r7, #4]
    803a:	2b00      	cmp	r3, #0
    803c:	bf14      	ite	ne
    803e:	2301      	movne	r3, #1
    8040:	2300      	moveq	r3, #0
    8042:	b2db      	uxtb	r3, r3
    8044:	f240 5235 	movw	r2, #1333	; 0x535
    8048:	4906      	ldr	r1, [pc, #24]	; (8064 <_i2c_m_sync_enable+0x34>)
    804a:	4618      	mov	r0, r3
    804c:	4b06      	ldr	r3, [pc, #24]	; (8068 <_i2c_m_sync_enable+0x38>)
    804e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    8050:	687b      	ldr	r3, [r7, #4]
    8052:	691b      	ldr	r3, [r3, #16]
    8054:	4618      	mov	r0, r3
    8056:	4b05      	ldr	r3, [pc, #20]	; (806c <_i2c_m_sync_enable+0x3c>)
    8058:	4798      	blx	r3
    805a:	4603      	mov	r3, r0
}
    805c:	4618      	mov	r0, r3
    805e:	3708      	adds	r7, #8
    8060:	46bd      	mov	sp, r7
    8062:	bd80      	pop	{r7, pc}
    8064:	00011400 	.word	0x00011400
    8068:	00005239 	.word	0x00005239
    806c:	00008375 	.word	0x00008375

00008070 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    8070:	b580      	push	{r7, lr}
    8072:	b084      	sub	sp, #16
    8074:	af00      	add	r7, sp, #0
    8076:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    8078:	687b      	ldr	r3, [r7, #4]
    807a:	691b      	ldr	r3, [r3, #16]
    807c:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    807e:	687b      	ldr	r3, [r7, #4]
    8080:	2b00      	cmp	r3, #0
    8082:	bf14      	ite	ne
    8084:	2301      	movne	r3, #1
    8086:	2300      	moveq	r3, #0
    8088:	b2db      	uxtb	r3, r3
    808a:	f240 5243 	movw	r2, #1347	; 0x543
    808e:	490c      	ldr	r1, [pc, #48]	; (80c0 <_i2c_m_sync_disable+0x50>)
    8090:	4618      	mov	r0, r3
    8092:	4b0c      	ldr	r3, [pc, #48]	; (80c4 <_i2c_m_sync_disable+0x54>)
    8094:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	691b      	ldr	r3, [r3, #16]
    809a:	2b00      	cmp	r3, #0
    809c:	bf14      	ite	ne
    809e:	2301      	movne	r3, #1
    80a0:	2300      	moveq	r3, #0
    80a2:	b2db      	uxtb	r3, r3
    80a4:	f240 5244 	movw	r2, #1348	; 0x544
    80a8:	4905      	ldr	r1, [pc, #20]	; (80c0 <_i2c_m_sync_disable+0x50>)
    80aa:	4618      	mov	r0, r3
    80ac:	4b05      	ldr	r3, [pc, #20]	; (80c4 <_i2c_m_sync_disable+0x54>)
    80ae:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    80b0:	68f8      	ldr	r0, [r7, #12]
    80b2:	4b05      	ldr	r3, [pc, #20]	; (80c8 <_i2c_m_sync_disable+0x58>)
    80b4:	4798      	blx	r3

	return ERR_NONE;
    80b6:	2300      	movs	r3, #0
}
    80b8:	4618      	mov	r0, r3
    80ba:	3710      	adds	r7, #16
    80bc:	46bd      	mov	sp, r7
    80be:	bd80      	pop	{r7, pc}
    80c0:	00011400 	.word	0x00011400
    80c4:	00005239 	.word	0x00005239
    80c8:	00007855 	.word	0x00007855

000080cc <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b084      	sub	sp, #16
    80d0:	af00      	add	r7, sp, #0
    80d2:	6078      	str	r0, [r7, #4]
    80d4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    80d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    80da:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    80dc:	687b      	ldr	r3, [r7, #4]
    80de:	691b      	ldr	r3, [r3, #16]
    80e0:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    80e2:	68b8      	ldr	r0, [r7, #8]
    80e4:	4b0f      	ldr	r3, [pc, #60]	; (8124 <_sercom_i2c_sync_wait_bus+0x58>)
    80e6:	4798      	blx	r3
    80e8:	4603      	mov	r3, r0
    80ea:	461a      	mov	r2, r3
    80ec:	683b      	ldr	r3, [r7, #0]
    80ee:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    80f0:	68fb      	ldr	r3, [r7, #12]
    80f2:	1e5a      	subs	r2, r3, #1
    80f4:	60fa      	str	r2, [r7, #12]
    80f6:	2b00      	cmp	r3, #0
    80f8:	d102      	bne.n	8100 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    80fa:	f06f 0304 	mvn.w	r3, #4
    80fe:	e00c      	b.n	811a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    8100:	683b      	ldr	r3, [r7, #0]
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	f003 0301 	and.w	r3, r3, #1
    8108:	2b00      	cmp	r3, #0
    810a:	d105      	bne.n	8118 <_sercom_i2c_sync_wait_bus+0x4c>
    810c:	683b      	ldr	r3, [r7, #0]
    810e:	681b      	ldr	r3, [r3, #0]
    8110:	f003 0302 	and.w	r3, r3, #2
    8114:	2b00      	cmp	r3, #0
    8116:	d0e4      	beq.n	80e2 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    8118:	2300      	movs	r3, #0
}
    811a:	4618      	mov	r0, r3
    811c:	3710      	adds	r7, #16
    811e:	46bd      	mov	sp, r7
    8120:	bd80      	pop	{r7, pc}
    8122:	bf00      	nop
    8124:	000077b1 	.word	0x000077b1

00008128 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    8128:	b590      	push	{r4, r7, lr}
    812a:	b087      	sub	sp, #28
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    8130:	687b      	ldr	r3, [r7, #4]
    8132:	691b      	ldr	r3, [r3, #16]
    8134:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    813a:	6978      	ldr	r0, [r7, #20]
    813c:	4b39      	ldr	r3, [pc, #228]	; (8224 <_sercom_i2c_sync_send_address+0xfc>)
    813e:	4798      	blx	r3
    8140:	4603      	mov	r3, r0
    8142:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	2b00      	cmp	r3, #0
    8148:	bf14      	ite	ne
    814a:	2301      	movne	r3, #1
    814c:	2300      	moveq	r3, #0
    814e:	b2db      	uxtb	r3, r3
    8150:	f240 52a5 	movw	r2, #1445	; 0x5a5
    8154:	4934      	ldr	r1, [pc, #208]	; (8228 <_sercom_i2c_sync_send_address+0x100>)
    8156:	4618      	mov	r0, r3
    8158:	4b34      	ldr	r3, [pc, #208]	; (822c <_sercom_i2c_sync_send_address+0x104>)
    815a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    815c:	693b      	ldr	r3, [r7, #16]
    815e:	685b      	ldr	r3, [r3, #4]
    8160:	2b01      	cmp	r3, #1
    8162:	d106      	bne.n	8172 <_sercom_i2c_sync_send_address+0x4a>
    8164:	68fb      	ldr	r3, [r7, #12]
    8166:	2b00      	cmp	r3, #0
    8168:	d003      	beq.n	8172 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    816a:	6978      	ldr	r0, [r7, #20]
    816c:	4b30      	ldr	r3, [pc, #192]	; (8230 <_sercom_i2c_sync_send_address+0x108>)
    816e:	4798      	blx	r3
    8170:	e002      	b.n	8178 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    8172:	6978      	ldr	r0, [r7, #20]
    8174:	4b2f      	ldr	r3, [pc, #188]	; (8234 <_sercom_i2c_sync_send_address+0x10c>)
    8176:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    8178:	693b      	ldr	r3, [r7, #16]
    817a:	881b      	ldrh	r3, [r3, #0]
    817c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8180:	2b00      	cmp	r3, #0
    8182:	d022      	beq.n	81ca <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    8184:	693b      	ldr	r3, [r7, #16]
    8186:	885b      	ldrh	r3, [r3, #2]
    8188:	b29b      	uxth	r3, r3
    818a:	f003 0301 	and.w	r3, r3, #1
    818e:	2b00      	cmp	r3, #0
    8190:	d007      	beq.n	81a2 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    8192:	693b      	ldr	r3, [r7, #16]
    8194:	885b      	ldrh	r3, [r3, #2]
    8196:	b29b      	uxth	r3, r3
    8198:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    819c:	b29a      	uxth	r2, r3
    819e:	693b      	ldr	r3, [r7, #16]
    81a0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    81a2:	693b      	ldr	r3, [r7, #16]
    81a4:	881b      	ldrh	r3, [r3, #0]
    81a6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    81a8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    81ac:	401c      	ands	r4, r3
    81ae:	6978      	ldr	r0, [r7, #20]
    81b0:	4b21      	ldr	r3, [pc, #132]	; (8238 <_sercom_i2c_sync_send_address+0x110>)
    81b2:	4798      	blx	r3
    81b4:	4603      	mov	r3, r0
    81b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    81ba:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    81bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    81c0:	4619      	mov	r1, r3
    81c2:	6978      	ldr	r0, [r7, #20]
    81c4:	4b1d      	ldr	r3, [pc, #116]	; (823c <_sercom_i2c_sync_send_address+0x114>)
    81c6:	4798      	blx	r3
    81c8:	e01a      	b.n	8200 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    81ca:	693b      	ldr	r3, [r7, #16]
    81cc:	881b      	ldrh	r3, [r3, #0]
    81ce:	005b      	lsls	r3, r3, #1
    81d0:	b2db      	uxtb	r3, r3
    81d2:	693a      	ldr	r2, [r7, #16]
    81d4:	8852      	ldrh	r2, [r2, #2]
    81d6:	b292      	uxth	r2, r2
    81d8:	f002 0201 	and.w	r2, r2, #1
    81dc:	2a00      	cmp	r2, #0
    81de:	bf14      	ite	ne
    81e0:	2201      	movne	r2, #1
    81e2:	2200      	moveq	r2, #0
    81e4:	b2d2      	uxtb	r2, r2
    81e6:	4313      	orrs	r3, r2
    81e8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    81ea:	6978      	ldr	r0, [r7, #20]
    81ec:	4b12      	ldr	r3, [pc, #72]	; (8238 <_sercom_i2c_sync_send_address+0x110>)
    81ee:	4798      	blx	r3
    81f0:	4603      	mov	r3, r0
    81f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    81f6:	4323      	orrs	r3, r4
    81f8:	4619      	mov	r1, r3
    81fa:	6978      	ldr	r0, [r7, #20]
    81fc:	4b0f      	ldr	r3, [pc, #60]	; (823c <_sercom_i2c_sync_send_address+0x114>)
    81fe:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8200:	f107 0308 	add.w	r3, r7, #8
    8204:	4619      	mov	r1, r3
    8206:	6878      	ldr	r0, [r7, #4]
    8208:	4b0d      	ldr	r3, [pc, #52]	; (8240 <_sercom_i2c_sync_send_address+0x118>)
    820a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    820c:	68bb      	ldr	r3, [r7, #8]
    820e:	693a      	ldr	r2, [r7, #16]
    8210:	4619      	mov	r1, r3
    8212:	6978      	ldr	r0, [r7, #20]
    8214:	4b0b      	ldr	r3, [pc, #44]	; (8244 <_sercom_i2c_sync_send_address+0x11c>)
    8216:	4798      	blx	r3
    8218:	4603      	mov	r3, r0
}
    821a:	4618      	mov	r0, r3
    821c:	371c      	adds	r7, #28
    821e:	46bd      	mov	sp, r7
    8220:	bd90      	pop	{r4, r7, pc}
    8222:	bf00      	nop
    8224:	0000787d 	.word	0x0000787d
    8228:	00011400 	.word	0x00011400
    822c:	00005239 	.word	0x00005239
    8230:	00007a05 	.word	0x00007a05
    8234:	00007a2d 	.word	0x00007a2d
    8238:	00007b6d 	.word	0x00007b6d
    823c:	00007b49 	.word	0x00007b49
    8240:	000080cd 	.word	0x000080cd
    8244:	00007db9 	.word	0x00007db9

00008248 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    8248:	b580      	push	{r7, lr}
    824a:	b086      	sub	sp, #24
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
    8250:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	691b      	ldr	r3, [r3, #16]
    8256:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	2b00      	cmp	r3, #0
    825c:	bf14      	ite	ne
    825e:	2301      	movne	r3, #1
    8260:	2300      	moveq	r3, #0
    8262:	b2db      	uxtb	r3, r3
    8264:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    8268:	493b      	ldr	r1, [pc, #236]	; (8358 <_i2c_m_sync_transfer+0x110>)
    826a:	4618      	mov	r0, r3
    826c:	4b3b      	ldr	r3, [pc, #236]	; (835c <_i2c_m_sync_transfer+0x114>)
    826e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	691b      	ldr	r3, [r3, #16]
    8274:	2b00      	cmp	r3, #0
    8276:	bf14      	ite	ne
    8278:	2301      	movne	r3, #1
    827a:	2300      	moveq	r3, #0
    827c:	b2db      	uxtb	r3, r3
    827e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    8282:	4935      	ldr	r1, [pc, #212]	; (8358 <_i2c_m_sync_transfer+0x110>)
    8284:	4618      	mov	r0, r3
    8286:	4b35      	ldr	r3, [pc, #212]	; (835c <_i2c_m_sync_transfer+0x114>)
    8288:	4798      	blx	r3
	ASSERT(msg);
    828a:	683b      	ldr	r3, [r7, #0]
    828c:	2b00      	cmp	r3, #0
    828e:	bf14      	ite	ne
    8290:	2301      	movne	r3, #1
    8292:	2300      	moveq	r3, #0
    8294:	b2db      	uxtb	r3, r3
    8296:	f240 52d2 	movw	r2, #1490	; 0x5d2
    829a:	492f      	ldr	r1, [pc, #188]	; (8358 <_i2c_m_sync_transfer+0x110>)
    829c:	4618      	mov	r0, r3
    829e:	4b2f      	ldr	r3, [pc, #188]	; (835c <_i2c_m_sync_transfer+0x114>)
    82a0:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    82a2:	687b      	ldr	r3, [r7, #4]
    82a4:	885b      	ldrh	r3, [r3, #2]
    82a6:	b29b      	uxth	r3, r3
    82a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    82ac:	2b00      	cmp	r3, #0
    82ae:	d002      	beq.n	82b6 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    82b0:	f06f 0305 	mvn.w	r3, #5
    82b4:	e04c      	b.n	8350 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    82b6:	683b      	ldr	r3, [r7, #0]
    82b8:	885b      	ldrh	r3, [r3, #2]
    82ba:	b29b      	uxth	r3, r3
    82bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    82c0:	b29a      	uxth	r2, r3
    82c2:	683b      	ldr	r3, [r7, #0]
    82c4:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	683a      	ldr	r2, [r7, #0]
    82ca:	ca07      	ldmia	r2, {r0, r1, r2}
    82cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    82d0:	6938      	ldr	r0, [r7, #16]
    82d2:	4b23      	ldr	r3, [pc, #140]	; (8360 <_i2c_m_sync_transfer+0x118>)
    82d4:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    82d6:	6878      	ldr	r0, [r7, #4]
    82d8:	4b22      	ldr	r3, [pc, #136]	; (8364 <_i2c_m_sync_transfer+0x11c>)
    82da:	4798      	blx	r3
    82dc:	6178      	str	r0, [r7, #20]

	if (ret) {
    82de:	697b      	ldr	r3, [r7, #20]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d02d      	beq.n	8340 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	885b      	ldrh	r3, [r3, #2]
    82e8:	b29b      	uxth	r3, r3
    82ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    82ee:	b29a      	uxth	r2, r3
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	805a      	strh	r2, [r3, #2]

		return ret;
    82f4:	697b      	ldr	r3, [r7, #20]
    82f6:	e02b      	b.n	8350 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    82f8:	f107 030c 	add.w	r3, r7, #12
    82fc:	4619      	mov	r1, r3
    82fe:	6878      	ldr	r0, [r7, #4]
    8300:	4b19      	ldr	r3, [pc, #100]	; (8368 <_i2c_m_sync_transfer+0x120>)
    8302:	4798      	blx	r3
    8304:	6178      	str	r0, [r7, #20]

		if (ret) {
    8306:	697b      	ldr	r3, [r7, #20]
    8308:	2b00      	cmp	r3, #0
    830a:	d012      	beq.n	8332 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    830c:	683b      	ldr	r3, [r7, #0]
    830e:	885b      	ldrh	r3, [r3, #2]
    8310:	b29b      	uxth	r3, r3
    8312:	b21b      	sxth	r3, r3
    8314:	2b00      	cmp	r3, #0
    8316:	da02      	bge.n	831e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    8318:	6938      	ldr	r0, [r7, #16]
    831a:	4b14      	ldr	r3, [pc, #80]	; (836c <_i2c_m_sync_transfer+0x124>)
    831c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    831e:	687b      	ldr	r3, [r7, #4]
    8320:	885b      	ldrh	r3, [r3, #2]
    8322:	b29b      	uxth	r3, r3
    8324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8328:	b29a      	uxth	r2, r3
    832a:	687b      	ldr	r3, [r7, #4]
    832c:	805a      	strh	r2, [r3, #2]

			return ret;
    832e:	697b      	ldr	r3, [r7, #20]
    8330:	e00e      	b.n	8350 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    8332:	68fb      	ldr	r3, [r7, #12]
    8334:	687a      	ldr	r2, [r7, #4]
    8336:	4619      	mov	r1, r3
    8338:	6938      	ldr	r0, [r7, #16]
    833a:	4b0d      	ldr	r3, [pc, #52]	; (8370 <_i2c_m_sync_transfer+0x128>)
    833c:	4798      	blx	r3
    833e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8340:	687b      	ldr	r3, [r7, #4]
    8342:	885b      	ldrh	r3, [r3, #2]
    8344:	b29b      	uxth	r3, r3
    8346:	f403 7380 	and.w	r3, r3, #256	; 0x100
    834a:	2b00      	cmp	r3, #0
    834c:	d1d4      	bne.n	82f8 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    834e:	697b      	ldr	r3, [r7, #20]
}
    8350:	4618      	mov	r0, r3
    8352:	3718      	adds	r7, #24
    8354:	46bd      	mov	sp, r7
    8356:	bd80      	pop	{r7, pc}
    8358:	00011400 	.word	0x00011400
    835c:	00005239 	.word	0x00005239
    8360:	000079b5 	.word	0x000079b5
    8364:	00008129 	.word	0x00008129
    8368:	000080cd 	.word	0x000080cd
    836c:	00007d9d 	.word	0x00007d9d
    8370:	00007db9 	.word	0x00007db9

00008374 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    8374:	b580      	push	{r7, lr}
    8376:	b084      	sub	sp, #16
    8378:	af00      	add	r7, sp, #0
    837a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    837c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8380:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    8382:	2304      	movs	r3, #4
    8384:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    8386:	687b      	ldr	r3, [r7, #4]
    8388:	2b00      	cmp	r3, #0
    838a:	bf14      	ite	ne
    838c:	2301      	movne	r3, #1
    838e:	2300      	moveq	r3, #0
    8390:	b2db      	uxtb	r3, r3
    8392:	f240 6205 	movw	r2, #1541	; 0x605
    8396:	4915      	ldr	r1, [pc, #84]	; (83ec <_i2c_m_enable_implementation+0x78>)
    8398:	4618      	mov	r0, r3
    839a:	4b15      	ldr	r3, [pc, #84]	; (83f0 <_i2c_m_enable_implementation+0x7c>)
    839c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    839e:	6878      	ldr	r0, [r7, #4]
    83a0:	4b14      	ldr	r3, [pc, #80]	; (83f4 <_i2c_m_enable_implementation+0x80>)
    83a2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    83a4:	e016      	b.n	83d4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    83a6:	68fb      	ldr	r3, [r7, #12]
    83a8:	3b01      	subs	r3, #1
    83aa:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    83ac:	68fb      	ldr	r3, [r7, #12]
    83ae:	2b00      	cmp	r3, #0
    83b0:	dc10      	bgt.n	83d4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    83b2:	68bb      	ldr	r3, [r7, #8]
    83b4:	3b01      	subs	r3, #1
    83b6:	60bb      	str	r3, [r7, #8]
    83b8:	68bb      	ldr	r3, [r7, #8]
    83ba:	2b00      	cmp	r3, #0
    83bc:	d007      	beq.n	83ce <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    83be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    83c2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    83c4:	2110      	movs	r1, #16
    83c6:	6878      	ldr	r0, [r7, #4]
    83c8:	4b0b      	ldr	r3, [pc, #44]	; (83f8 <_i2c_m_enable_implementation+0x84>)
    83ca:	4798      	blx	r3
    83cc:	e002      	b.n	83d4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    83ce:	f06f 0305 	mvn.w	r3, #5
    83d2:	e006      	b.n	83e2 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    83d4:	6878      	ldr	r0, [r7, #4]
    83d6:	4b09      	ldr	r3, [pc, #36]	; (83fc <_i2c_m_enable_implementation+0x88>)
    83d8:	4798      	blx	r3
    83da:	4603      	mov	r3, r0
    83dc:	2b01      	cmp	r3, #1
    83de:	d1e2      	bne.n	83a6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    83e0:	2300      	movs	r3, #0
}
    83e2:	4618      	mov	r0, r3
    83e4:	3710      	adds	r7, #16
    83e6:	46bd      	mov	sp, r7
    83e8:	bd80      	pop	{r7, pc}
    83ea:	bf00      	nop
    83ec:	00011400 	.word	0x00011400
    83f0:	00005239 	.word	0x00005239
    83f4:	0000782d 	.word	0x0000782d
    83f8:	00007cb1 	.word	0x00007cb1
    83fc:	00007c61 	.word	0x00007c61

00008400 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8400:	b580      	push	{r7, lr}
    8402:	b084      	sub	sp, #16
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]
    8408:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    840a:	6838      	ldr	r0, [r7, #0]
    840c:	4b42      	ldr	r3, [pc, #264]	; (8518 <_i2c_m_sync_init_impl+0x118>)
    840e:	4798      	blx	r3
    8410:	4603      	mov	r3, r0
    8412:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8414:	2101      	movs	r1, #1
    8416:	6838      	ldr	r0, [r7, #0]
    8418:	4b40      	ldr	r3, [pc, #256]	; (851c <_i2c_m_sync_init_impl+0x11c>)
    841a:	4798      	blx	r3
    841c:	4603      	mov	r3, r0
    841e:	f083 0301 	eor.w	r3, r3, #1
    8422:	b2db      	uxtb	r3, r3
    8424:	2b00      	cmp	r3, #0
    8426:	d020      	beq.n	846a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    8428:	7bfa      	ldrb	r2, [r7, #15]
    842a:	493d      	ldr	r1, [pc, #244]	; (8520 <_i2c_m_sync_init_impl+0x120>)
    842c:	4613      	mov	r3, r2
    842e:	005b      	lsls	r3, r3, #1
    8430:	4413      	add	r3, r2
    8432:	00db      	lsls	r3, r3, #3
    8434:	440b      	add	r3, r1
    8436:	3304      	adds	r3, #4
    8438:	681b      	ldr	r3, [r3, #0]
    843a:	f003 031c 	and.w	r3, r3, #28
    843e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8440:	2102      	movs	r1, #2
    8442:	6838      	ldr	r0, [r7, #0]
    8444:	4b37      	ldr	r3, [pc, #220]	; (8524 <_i2c_m_sync_init_impl+0x124>)
    8446:	4798      	blx	r3
    8448:	4603      	mov	r3, r0
    844a:	2b00      	cmp	r3, #0
    844c:	d006      	beq.n	845c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    844e:	6838      	ldr	r0, [r7, #0]
    8450:	4b35      	ldr	r3, [pc, #212]	; (8528 <_i2c_m_sync_init_impl+0x128>)
    8452:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    8454:	2102      	movs	r1, #2
    8456:	6838      	ldr	r0, [r7, #0]
    8458:	4b34      	ldr	r3, [pc, #208]	; (852c <_i2c_m_sync_init_impl+0x12c>)
    845a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    845c:	68bb      	ldr	r3, [r7, #8]
    845e:	f043 0301 	orr.w	r3, r3, #1
    8462:	4619      	mov	r1, r3
    8464:	6838      	ldr	r0, [r7, #0]
    8466:	4b32      	ldr	r3, [pc, #200]	; (8530 <_i2c_m_sync_init_impl+0x130>)
    8468:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    846a:	2101      	movs	r1, #1
    846c:	6838      	ldr	r0, [r7, #0]
    846e:	4b2f      	ldr	r3, [pc, #188]	; (852c <_i2c_m_sync_init_impl+0x12c>)
    8470:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8472:	7bfa      	ldrb	r2, [r7, #15]
    8474:	492a      	ldr	r1, [pc, #168]	; (8520 <_i2c_m_sync_init_impl+0x120>)
    8476:	4613      	mov	r3, r2
    8478:	005b      	lsls	r3, r3, #1
    847a:	4413      	add	r3, r2
    847c:	00db      	lsls	r3, r3, #3
    847e:	440b      	add	r3, r1
    8480:	3304      	adds	r3, #4
    8482:	681b      	ldr	r3, [r3, #0]
    8484:	4619      	mov	r1, r3
    8486:	6838      	ldr	r0, [r7, #0]
    8488:	4b29      	ldr	r3, [pc, #164]	; (8530 <_i2c_m_sync_init_impl+0x130>)
    848a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    848c:	7bfa      	ldrb	r2, [r7, #15]
    848e:	4924      	ldr	r1, [pc, #144]	; (8520 <_i2c_m_sync_init_impl+0x120>)
    8490:	4613      	mov	r3, r2
    8492:	005b      	lsls	r3, r3, #1
    8494:	4413      	add	r3, r2
    8496:	00db      	lsls	r3, r3, #3
    8498:	440b      	add	r3, r1
    849a:	3308      	adds	r3, #8
    849c:	681b      	ldr	r3, [r3, #0]
    849e:	4619      	mov	r1, r3
    84a0:	6838      	ldr	r0, [r7, #0]
    84a2:	4b24      	ldr	r3, [pc, #144]	; (8534 <_i2c_m_sync_init_impl+0x134>)
    84a4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    84a6:	7bfa      	ldrb	r2, [r7, #15]
    84a8:	491d      	ldr	r1, [pc, #116]	; (8520 <_i2c_m_sync_init_impl+0x120>)
    84aa:	4613      	mov	r3, r2
    84ac:	005b      	lsls	r3, r3, #1
    84ae:	4413      	add	r3, r2
    84b0:	00db      	lsls	r3, r3, #3
    84b2:	440b      	add	r3, r1
    84b4:	330c      	adds	r3, #12
    84b6:	681b      	ldr	r3, [r3, #0]
    84b8:	4619      	mov	r1, r3
    84ba:	6838      	ldr	r0, [r7, #0]
    84bc:	4b1e      	ldr	r3, [pc, #120]	; (8538 <_i2c_m_sync_init_impl+0x138>)
    84be:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    84c0:	7bfa      	ldrb	r2, [r7, #15]
    84c2:	4917      	ldr	r1, [pc, #92]	; (8520 <_i2c_m_sync_init_impl+0x120>)
    84c4:	4613      	mov	r3, r2
    84c6:	005b      	lsls	r3, r3, #1
    84c8:	4413      	add	r3, r2
    84ca:	00db      	lsls	r3, r3, #3
    84cc:	440b      	add	r3, r1
    84ce:	3304      	adds	r3, #4
    84d0:	681b      	ldr	r3, [r3, #0]
    84d2:	0e1b      	lsrs	r3, r3, #24
    84d4:	b29b      	uxth	r3, r3
    84d6:	f003 0303 	and.w	r3, r3, #3
    84da:	b29a      	uxth	r2, r3
    84dc:	687b      	ldr	r3, [r7, #4]
    84de:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	899b      	ldrh	r3, [r3, #12]
    84e4:	2b01      	cmp	r3, #1
    84e6:	bf8c      	ite	hi
    84e8:	2301      	movhi	r3, #1
    84ea:	2300      	movls	r3, #0
    84ec:	b2db      	uxtb	r3, r3
    84ee:	4619      	mov	r1, r3
    84f0:	6838      	ldr	r0, [r7, #0]
    84f2:	4b12      	ldr	r3, [pc, #72]	; (853c <_i2c_m_sync_init_impl+0x13c>)
    84f4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    84f6:	7bfa      	ldrb	r2, [r7, #15]
    84f8:	4909      	ldr	r1, [pc, #36]	; (8520 <_i2c_m_sync_init_impl+0x120>)
    84fa:	4613      	mov	r3, r2
    84fc:	005b      	lsls	r3, r3, #1
    84fe:	4413      	add	r3, r2
    8500:	00db      	lsls	r3, r3, #3
    8502:	440b      	add	r3, r1
    8504:	3312      	adds	r3, #18
    8506:	881a      	ldrh	r2, [r3, #0]
    8508:	687b      	ldr	r3, [r7, #4]
    850a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    850c:	2300      	movs	r3, #0
}
    850e:	4618      	mov	r0, r3
    8510:	3710      	adds	r7, #16
    8512:	46bd      	mov	sp, r7
    8514:	bd80      	pop	{r7, pc}
    8516:	bf00      	nop
    8518:	00007d35 	.word	0x00007d35
    851c:	00007709 	.word	0x00007709
    8520:	20000018 	.word	0x20000018
    8524:	000078ad 	.word	0x000078ad
    8528:	00007855 	.word	0x00007855
    852c:	000076e5 	.word	0x000076e5
    8530:	000078dd 	.word	0x000078dd
    8534:	00007a85 	.word	0x00007a85
    8538:	00007acd 	.word	0x00007acd
    853c:	00007b09 	.word	0x00007b09

00008540 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8540:	b580      	push	{r7, lr}
    8542:	b082      	sub	sp, #8
    8544:	af00      	add	r7, sp, #0
    8546:	6078      	str	r0, [r7, #4]
    8548:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	2b00      	cmp	r3, #0
    854e:	d004      	beq.n	855a <_spi_load_regs_master+0x1a>
    8550:	683b      	ldr	r3, [r7, #0]
    8552:	2b00      	cmp	r3, #0
    8554:	d001      	beq.n	855a <_spi_load_regs_master+0x1a>
    8556:	2301      	movs	r3, #1
    8558:	e000      	b.n	855c <_spi_load_regs_master+0x1c>
    855a:	2300      	movs	r3, #0
    855c:	f003 0301 	and.w	r3, r3, #1
    8560:	b2db      	uxtb	r3, r3
    8562:	f640 1209 	movw	r2, #2313	; 0x909
    8566:	4915      	ldr	r1, [pc, #84]	; (85bc <_spi_load_regs_master+0x7c>)
    8568:	4618      	mov	r0, r3
    856a:	4b15      	ldr	r3, [pc, #84]	; (85c0 <_spi_load_regs_master+0x80>)
    856c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    856e:	683b      	ldr	r3, [r7, #0]
    8570:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8572:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8576:	f023 0301 	bic.w	r3, r3, #1
    857a:	4619      	mov	r1, r3
    857c:	6878      	ldr	r0, [r7, #4]
    857e:	4b11      	ldr	r3, [pc, #68]	; (85c4 <_spi_load_regs_master+0x84>)
    8580:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8582:	683b      	ldr	r3, [r7, #0]
    8584:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    8586:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    858a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    858e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8592:	4619      	mov	r1, r3
    8594:	6878      	ldr	r0, [r7, #4]
    8596:	4b0c      	ldr	r3, [pc, #48]	; (85c8 <_spi_load_regs_master+0x88>)
    8598:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    859a:	683b      	ldr	r3, [r7, #0]
    859c:	7b1b      	ldrb	r3, [r3, #12]
    859e:	4619      	mov	r1, r3
    85a0:	6878      	ldr	r0, [r7, #4]
    85a2:	4b0a      	ldr	r3, [pc, #40]	; (85cc <_spi_load_regs_master+0x8c>)
    85a4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    85a6:	683b      	ldr	r3, [r7, #0]
    85a8:	7b5b      	ldrb	r3, [r3, #13]
    85aa:	4619      	mov	r1, r3
    85ac:	6878      	ldr	r0, [r7, #4]
    85ae:	4b08      	ldr	r3, [pc, #32]	; (85d0 <_spi_load_regs_master+0x90>)
    85b0:	4798      	blx	r3
}
    85b2:	bf00      	nop
    85b4:	3708      	adds	r7, #8
    85b6:	46bd      	mov	sp, r7
    85b8:	bd80      	pop	{r7, pc}
    85ba:	bf00      	nop
    85bc:	00011400 	.word	0x00011400
    85c0:	00005239 	.word	0x00005239
    85c4:	00007991 	.word	0x00007991
    85c8:	00007aa9 	.word	0x00007aa9
    85cc:	00007ae9 	.word	0x00007ae9
    85d0:	00007c21 	.word	0x00007c21

000085d4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    85d4:	b580      	push	{r7, lr}
    85d6:	b082      	sub	sp, #8
    85d8:	af00      	add	r7, sp, #0
    85da:	6078      	str	r0, [r7, #4]
    85dc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    85de:	687b      	ldr	r3, [r7, #4]
    85e0:	2b00      	cmp	r3, #0
    85e2:	d004      	beq.n	85ee <_spi_load_regs_slave+0x1a>
    85e4:	683b      	ldr	r3, [r7, #0]
    85e6:	2b00      	cmp	r3, #0
    85e8:	d001      	beq.n	85ee <_spi_load_regs_slave+0x1a>
    85ea:	2301      	movs	r3, #1
    85ec:	e000      	b.n	85f0 <_spi_load_regs_slave+0x1c>
    85ee:	2300      	movs	r3, #0
    85f0:	f003 0301 	and.w	r3, r3, #1
    85f4:	b2db      	uxtb	r3, r3
    85f6:	f640 121d 	movw	r2, #2333	; 0x91d
    85fa:	491a      	ldr	r1, [pc, #104]	; (8664 <_spi_load_regs_slave+0x90>)
    85fc:	4618      	mov	r0, r3
    85fe:	4b1a      	ldr	r3, [pc, #104]	; (8668 <_spi_load_regs_slave+0x94>)
    8600:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8602:	683b      	ldr	r3, [r7, #0]
    8604:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8606:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    860a:	f023 0301 	bic.w	r3, r3, #1
    860e:	4619      	mov	r1, r3
    8610:	6878      	ldr	r0, [r7, #4]
    8612:	4b16      	ldr	r3, [pc, #88]	; (866c <_spi_load_regs_slave+0x98>)
    8614:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8616:	683b      	ldr	r3, [r7, #0]
    8618:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    861a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    861e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8626:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    862a:	4619      	mov	r1, r3
    862c:	6878      	ldr	r0, [r7, #4]
    862e:	4b10      	ldr	r3, [pc, #64]	; (8670 <_spi_load_regs_slave+0x9c>)
    8630:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8632:	683b      	ldr	r3, [r7, #0]
    8634:	689b      	ldr	r3, [r3, #8]
    8636:	4619      	mov	r1, r3
    8638:	6878      	ldr	r0, [r7, #4]
    863a:	4b0e      	ldr	r3, [pc, #56]	; (8674 <_spi_load_regs_slave+0xa0>)
    863c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    863e:	683b      	ldr	r3, [r7, #0]
    8640:	7b5b      	ldrb	r3, [r3, #13]
    8642:	4619      	mov	r1, r3
    8644:	6878      	ldr	r0, [r7, #4]
    8646:	4b0c      	ldr	r3, [pc, #48]	; (8678 <_spi_load_regs_slave+0xa4>)
    8648:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    864a:	bf00      	nop
    864c:	f04f 31ff 	mov.w	r1, #4294967295
    8650:	6878      	ldr	r0, [r7, #4]
    8652:	4b0a      	ldr	r3, [pc, #40]	; (867c <_spi_load_regs_slave+0xa8>)
    8654:	4798      	blx	r3
    8656:	4603      	mov	r3, r0
    8658:	2b00      	cmp	r3, #0
    865a:	d1f7      	bne.n	864c <_spi_load_regs_slave+0x78>
		;
}
    865c:	bf00      	nop
    865e:	3708      	adds	r7, #8
    8660:	46bd      	mov	sp, r7
    8662:	bd80      	pop	{r7, pc}
    8664:	00011400 	.word	0x00011400
    8668:	00005239 	.word	0x00005239
    866c:	00007991 	.word	0x00007991
    8670:	00007aa9 	.word	0x00007aa9
    8674:	00007b8d 	.word	0x00007b8d
    8678:	00007c21 	.word	0x00007c21
    867c:	00007755 	.word	0x00007755

00008680 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    8680:	b580      	push	{r7, lr}
    8682:	b084      	sub	sp, #16
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8688:	687b      	ldr	r3, [r7, #4]
    868a:	4618      	mov	r0, r3
    868c:	4b11      	ldr	r3, [pc, #68]	; (86d4 <_spi_get_regs+0x54>)
    868e:	4798      	blx	r3
    8690:	4603      	mov	r3, r0
    8692:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8694:	2300      	movs	r3, #0
    8696:	73fb      	strb	r3, [r7, #15]
    8698:	e014      	b.n	86c4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    869a:	7bfa      	ldrb	r2, [r7, #15]
    869c:	490e      	ldr	r1, [pc, #56]	; (86d8 <_spi_get_regs+0x58>)
    869e:	4613      	mov	r3, r2
    86a0:	011b      	lsls	r3, r3, #4
    86a2:	4413      	add	r3, r2
    86a4:	440b      	add	r3, r1
    86a6:	3310      	adds	r3, #16
    86a8:	781b      	ldrb	r3, [r3, #0]
    86aa:	7bba      	ldrb	r2, [r7, #14]
    86ac:	429a      	cmp	r2, r3
    86ae:	d106      	bne.n	86be <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    86b0:	7bfa      	ldrb	r2, [r7, #15]
    86b2:	4613      	mov	r3, r2
    86b4:	011b      	lsls	r3, r3, #4
    86b6:	4413      	add	r3, r2
    86b8:	4a07      	ldr	r2, [pc, #28]	; (86d8 <_spi_get_regs+0x58>)
    86ba:	4413      	add	r3, r2
    86bc:	e006      	b.n	86cc <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    86be:	7bfb      	ldrb	r3, [r7, #15]
    86c0:	3301      	adds	r3, #1
    86c2:	73fb      	strb	r3, [r7, #15]
    86c4:	7bfb      	ldrb	r3, [r7, #15]
    86c6:	2b01      	cmp	r3, #1
    86c8:	d9e7      	bls.n	869a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    86ca:	2300      	movs	r3, #0
}
    86cc:	4618      	mov	r0, r3
    86ce:	3710      	adds	r7, #16
    86d0:	46bd      	mov	sp, r7
    86d2:	bd80      	pop	{r7, pc}
    86d4:	00007cd9 	.word	0x00007cd9
    86d8:	0001143c 	.word	0x0001143c

000086dc <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    86dc:	b580      	push	{r7, lr}
    86de:	b084      	sub	sp, #16
    86e0:	af00      	add	r7, sp, #0
    86e2:	6078      	str	r0, [r7, #4]
    86e4:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    86e6:	683b      	ldr	r3, [r7, #0]
    86e8:	4618      	mov	r0, r3
    86ea:	4b35      	ldr	r3, [pc, #212]	; (87c0 <_spi_m_sync_init+0xe4>)
    86ec:	4798      	blx	r3
    86ee:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	2b00      	cmp	r3, #0
    86f4:	d004      	beq.n	8700 <_spi_m_sync_init+0x24>
    86f6:	683b      	ldr	r3, [r7, #0]
    86f8:	2b00      	cmp	r3, #0
    86fa:	d001      	beq.n	8700 <_spi_m_sync_init+0x24>
    86fc:	2301      	movs	r3, #1
    86fe:	e000      	b.n	8702 <_spi_m_sync_init+0x26>
    8700:	2300      	movs	r3, #0
    8702:	f003 0301 	and.w	r3, r3, #1
    8706:	b2db      	uxtb	r3, r3
    8708:	f640 123f 	movw	r2, #2367	; 0x93f
    870c:	492d      	ldr	r1, [pc, #180]	; (87c4 <_spi_m_sync_init+0xe8>)
    870e:	4618      	mov	r0, r3
    8710:	4b2d      	ldr	r3, [pc, #180]	; (87c8 <_spi_m_sync_init+0xec>)
    8712:	4798      	blx	r3

	if (regs == NULL) {
    8714:	68fb      	ldr	r3, [r7, #12]
    8716:	2b00      	cmp	r3, #0
    8718:	d102      	bne.n	8720 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    871a:	f06f 030c 	mvn.w	r3, #12
    871e:	e04a      	b.n	87b6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8720:	2101      	movs	r1, #1
    8722:	6838      	ldr	r0, [r7, #0]
    8724:	4b29      	ldr	r3, [pc, #164]	; (87cc <_spi_m_sync_init+0xf0>)
    8726:	4798      	blx	r3
    8728:	4603      	mov	r3, r0
    872a:	f083 0301 	eor.w	r3, r3, #1
    872e:	b2db      	uxtb	r3, r3
    8730:	2b00      	cmp	r3, #0
    8732:	d019      	beq.n	8768 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8734:	68fb      	ldr	r3, [r7, #12]
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	f003 031c 	and.w	r3, r3, #28
    873c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    873e:	2102      	movs	r1, #2
    8740:	6838      	ldr	r0, [r7, #0]
    8742:	4b23      	ldr	r3, [pc, #140]	; (87d0 <_spi_m_sync_init+0xf4>)
    8744:	4798      	blx	r3
    8746:	4603      	mov	r3, r0
    8748:	2b00      	cmp	r3, #0
    874a:	d006      	beq.n	875a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    874c:	6838      	ldr	r0, [r7, #0]
    874e:	4b21      	ldr	r3, [pc, #132]	; (87d4 <_spi_m_sync_init+0xf8>)
    8750:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8752:	2102      	movs	r1, #2
    8754:	6838      	ldr	r0, [r7, #0]
    8756:	4b20      	ldr	r3, [pc, #128]	; (87d8 <_spi_m_sync_init+0xfc>)
    8758:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    875a:	68bb      	ldr	r3, [r7, #8]
    875c:	f043 0301 	orr.w	r3, r3, #1
    8760:	4619      	mov	r1, r3
    8762:	6838      	ldr	r0, [r7, #0]
    8764:	4b1d      	ldr	r3, [pc, #116]	; (87dc <_spi_m_sync_init+0x100>)
    8766:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8768:	2101      	movs	r1, #1
    876a:	6838      	ldr	r0, [r7, #0]
    876c:	4b1a      	ldr	r3, [pc, #104]	; (87d8 <_spi_m_sync_init+0xfc>)
    876e:	4798      	blx	r3

	dev->prvt = hw;
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	683a      	ldr	r2, [r7, #0]
    8774:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8776:	68fb      	ldr	r3, [r7, #12]
    8778:	681b      	ldr	r3, [r3, #0]
    877a:	f003 031c 	and.w	r3, r3, #28
    877e:	2b08      	cmp	r3, #8
    8780:	d104      	bne.n	878c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8782:	68f9      	ldr	r1, [r7, #12]
    8784:	6838      	ldr	r0, [r7, #0]
    8786:	4b16      	ldr	r3, [pc, #88]	; (87e0 <_spi_m_sync_init+0x104>)
    8788:	4798      	blx	r3
    878a:	e003      	b.n	8794 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    878c:	68f9      	ldr	r1, [r7, #12]
    878e:	6838      	ldr	r0, [r7, #0]
    8790:	4b14      	ldr	r3, [pc, #80]	; (87e4 <_spi_m_sync_init+0x108>)
    8792:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8794:	68fb      	ldr	r3, [r7, #12]
    8796:	685b      	ldr	r3, [r3, #4]
    8798:	f003 0307 	and.w	r3, r3, #7
    879c:	2b00      	cmp	r3, #0
    879e:	d101      	bne.n	87a4 <_spi_m_sync_init+0xc8>
    87a0:	2201      	movs	r2, #1
    87a2:	e000      	b.n	87a6 <_spi_m_sync_init+0xca>
    87a4:	2202      	movs	r2, #2
    87a6:	687b      	ldr	r3, [r7, #4]
    87a8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    87aa:	68fb      	ldr	r3, [r7, #12]
    87ac:	89db      	ldrh	r3, [r3, #14]
    87ae:	b29a      	uxth	r2, r3
    87b0:	687b      	ldr	r3, [r7, #4]
    87b2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    87b4:	2300      	movs	r3, #0
}
    87b6:	4618      	mov	r0, r3
    87b8:	3710      	adds	r7, #16
    87ba:	46bd      	mov	sp, r7
    87bc:	bd80      	pop	{r7, pc}
    87be:	bf00      	nop
    87c0:	00008681 	.word	0x00008681
    87c4:	00011400 	.word	0x00011400
    87c8:	00005239 	.word	0x00005239
    87cc:	00007755 	.word	0x00007755
    87d0:	00007961 	.word	0x00007961
    87d4:	00007939 	.word	0x00007939
    87d8:	00007731 	.word	0x00007731
    87dc:	00007991 	.word	0x00007991
    87e0:	000085d5 	.word	0x000085d5
    87e4:	00008541 	.word	0x00008541

000087e8 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    87e8:	b580      	push	{r7, lr}
    87ea:	b082      	sub	sp, #8
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    87f0:	bf00      	nop
    87f2:	2103      	movs	r1, #3
    87f4:	6878      	ldr	r0, [r7, #4]
    87f6:	4b06      	ldr	r3, [pc, #24]	; (8810 <_spi_wait_bus_idle+0x28>)
    87f8:	4798      	blx	r3
    87fa:	4603      	mov	r3, r0
    87fc:	2b00      	cmp	r3, #0
    87fe:	d0f8      	beq.n	87f2 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    8800:	2103      	movs	r1, #3
    8802:	6878      	ldr	r0, [r7, #4]
    8804:	4b03      	ldr	r3, [pc, #12]	; (8814 <_spi_wait_bus_idle+0x2c>)
    8806:	4798      	blx	r3
}
    8808:	bf00      	nop
    880a:	3708      	adds	r7, #8
    880c:	46bd      	mov	sp, r7
    880e:	bd80      	pop	{r7, pc}
    8810:	000077cb 	.word	0x000077cb
    8814:	0000780d 	.word	0x0000780d

00008818 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    8818:	b580      	push	{r7, lr}
    881a:	b086      	sub	sp, #24
    881c:	af00      	add	r7, sp, #0
    881e:	60f8      	str	r0, [r7, #12]
    8820:	60b9      	str	r1, [r7, #8]
    8822:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    8824:	68bb      	ldr	r3, [r7, #8]
    8826:	f003 0304 	and.w	r3, r3, #4
    882a:	2b00      	cmp	r3, #0
    882c:	d101      	bne.n	8832 <_spi_rx_check_and_receive+0x1a>
		return false;
    882e:	2300      	movs	r3, #0
    8830:	e022      	b.n	8878 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    8832:	68f8      	ldr	r0, [r7, #12]
    8834:	4b12      	ldr	r3, [pc, #72]	; (8880 <_spi_rx_check_and_receive+0x68>)
    8836:	4798      	blx	r3
    8838:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	685b      	ldr	r3, [r3, #4]
    883e:	2b00      	cmp	r3, #0
    8840:	d014      	beq.n	886c <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    8842:	687b      	ldr	r3, [r7, #4]
    8844:	685b      	ldr	r3, [r3, #4]
    8846:	1c59      	adds	r1, r3, #1
    8848:	687a      	ldr	r2, [r7, #4]
    884a:	6051      	str	r1, [r2, #4]
    884c:	697a      	ldr	r2, [r7, #20]
    884e:	b2d2      	uxtb	r2, r2
    8850:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    8852:	687b      	ldr	r3, [r7, #4]
    8854:	7c1b      	ldrb	r3, [r3, #16]
    8856:	2b01      	cmp	r3, #1
    8858:	d908      	bls.n	886c <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	685b      	ldr	r3, [r3, #4]
    885e:	1c59      	adds	r1, r3, #1
    8860:	687a      	ldr	r2, [r7, #4]
    8862:	6051      	str	r1, [r2, #4]
    8864:	697a      	ldr	r2, [r7, #20]
    8866:	0a12      	lsrs	r2, r2, #8
    8868:	b2d2      	uxtb	r2, r2
    886a:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    886c:	687b      	ldr	r3, [r7, #4]
    886e:	68db      	ldr	r3, [r3, #12]
    8870:	1c5a      	adds	r2, r3, #1
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	60da      	str	r2, [r3, #12]

	return true;
    8876:	2301      	movs	r3, #1
}
    8878:	4618      	mov	r0, r3
    887a:	3718      	adds	r7, #24
    887c:	46bd      	mov	sp, r7
    887e:	bd80      	pop	{r7, pc}
    8880:	00007c09 	.word	0x00007c09

00008884 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    8884:	b580      	push	{r7, lr}
    8886:	b086      	sub	sp, #24
    8888:	af00      	add	r7, sp, #0
    888a:	60f8      	str	r0, [r7, #12]
    888c:	60b9      	str	r1, [r7, #8]
    888e:	607a      	str	r2, [r7, #4]
    8890:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    8892:	68bb      	ldr	r3, [r7, #8]
    8894:	f003 0301 	and.w	r3, r3, #1
    8898:	2b00      	cmp	r3, #0
    889a:	d028      	beq.n	88ee <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	681b      	ldr	r3, [r3, #0]
    88a0:	2b00      	cmp	r3, #0
    88a2:	d018      	beq.n	88d6 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    88a4:	687b      	ldr	r3, [r7, #4]
    88a6:	681b      	ldr	r3, [r3, #0]
    88a8:	1c59      	adds	r1, r3, #1
    88aa:	687a      	ldr	r2, [r7, #4]
    88ac:	6011      	str	r1, [r2, #0]
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	7c1b      	ldrb	r3, [r3, #16]
    88b6:	2b01      	cmp	r3, #1
    88b8:	d90f      	bls.n	88da <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	681b      	ldr	r3, [r3, #0]
    88be:	781b      	ldrb	r3, [r3, #0]
    88c0:	021b      	lsls	r3, r3, #8
    88c2:	461a      	mov	r2, r3
    88c4:	697b      	ldr	r3, [r7, #20]
    88c6:	4313      	orrs	r3, r2
    88c8:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	681b      	ldr	r3, [r3, #0]
    88ce:	1c5a      	adds	r2, r3, #1
    88d0:	687b      	ldr	r3, [r7, #4]
    88d2:	601a      	str	r2, [r3, #0]
    88d4:	e001      	b.n	88da <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    88d6:	887b      	ldrh	r3, [r7, #2]
    88d8:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	689b      	ldr	r3, [r3, #8]
    88de:	1c5a      	adds	r2, r3, #1
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    88e4:	6979      	ldr	r1, [r7, #20]
    88e6:	68f8      	ldr	r0, [r7, #12]
    88e8:	4b03      	ldr	r3, [pc, #12]	; (88f8 <_spi_tx_check_and_send+0x74>)
    88ea:	4798      	blx	r3
    88ec:	e000      	b.n	88f0 <_spi_tx_check_and_send+0x6c>
		return;
    88ee:	bf00      	nop
}
    88f0:	3718      	adds	r7, #24
    88f2:	46bd      	mov	sp, r7
    88f4:	bd80      	pop	{r7, pc}
    88f6:	bf00      	nop
    88f8:	00007bed 	.word	0x00007bed

000088fc <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    88fc:	b580      	push	{r7, lr}
    88fe:	b082      	sub	sp, #8
    8900:	af00      	add	r7, sp, #0
    8902:	6078      	str	r0, [r7, #4]
    8904:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    8906:	687b      	ldr	r3, [r7, #4]
    8908:	f003 0380 	and.w	r3, r3, #128	; 0x80
    890c:	2b00      	cmp	r3, #0
    890e:	d00b      	beq.n	8928 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8910:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8914:	6838      	ldr	r0, [r7, #0]
    8916:	4b07      	ldr	r3, [pc, #28]	; (8934 <_spi_err_check+0x38>)
    8918:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    891a:	2180      	movs	r1, #128	; 0x80
    891c:	6838      	ldr	r0, [r7, #0]
    891e:	4b06      	ldr	r3, [pc, #24]	; (8938 <_spi_err_check+0x3c>)
    8920:	4798      	blx	r3
		return ERR_OVERFLOW;
    8922:	f06f 0312 	mvn.w	r3, #18
    8926:	e000      	b.n	892a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8928:	2300      	movs	r3, #0
}
    892a:	4618      	mov	r0, r3
    892c:	3708      	adds	r7, #8
    892e:	46bd      	mov	sp, r7
    8930:	bd80      	pop	{r7, pc}
    8932:	bf00      	nop
    8934:	00007c41 	.word	0x00007c41
    8938:	0000780d 	.word	0x0000780d

0000893c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    893c:	b590      	push	{r4, r7, lr}
    893e:	b08b      	sub	sp, #44	; 0x2c
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
    8944:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	681b      	ldr	r3, [r3, #0]
    894a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    894c:	2300      	movs	r3, #0
    894e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    8950:	683b      	ldr	r3, [r7, #0]
    8952:	681b      	ldr	r3, [r3, #0]
    8954:	60bb      	str	r3, [r7, #8]
    8956:	683b      	ldr	r3, [r7, #0]
    8958:	685b      	ldr	r3, [r3, #4]
    895a:	60fb      	str	r3, [r7, #12]
    895c:	2300      	movs	r3, #0
    895e:	613b      	str	r3, [r7, #16]
    8960:	2300      	movs	r3, #0
    8962:	617b      	str	r3, [r7, #20]
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	791b      	ldrb	r3, [r3, #4]
    8968:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	2b00      	cmp	r3, #0
    896e:	d004      	beq.n	897a <_spi_m_sync_trans+0x3e>
    8970:	6a3b      	ldr	r3, [r7, #32]
    8972:	2b00      	cmp	r3, #0
    8974:	d001      	beq.n	897a <_spi_m_sync_trans+0x3e>
    8976:	2301      	movs	r3, #1
    8978:	e000      	b.n	897c <_spi_m_sync_trans+0x40>
    897a:	2300      	movs	r3, #0
    897c:	f003 0301 	and.w	r3, r3, #1
    8980:	b2db      	uxtb	r3, r3
    8982:	f640 22a3 	movw	r2, #2723	; 0xaa3
    8986:	492b      	ldr	r1, [pc, #172]	; (8a34 <_spi_m_sync_trans+0xf8>)
    8988:	4618      	mov	r0, r3
    898a:	4b2b      	ldr	r3, [pc, #172]	; (8a38 <_spi_m_sync_trans+0xfc>)
    898c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    898e:	2107      	movs	r1, #7
    8990:	6a38      	ldr	r0, [r7, #32]
    8992:	4b2a      	ldr	r3, [pc, #168]	; (8a3c <_spi_m_sync_trans+0x100>)
    8994:	4798      	blx	r3
    8996:	4603      	mov	r3, r0
    8998:	2b00      	cmp	r3, #0
    899a:	d002      	beq.n	89a2 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    899c:	f06f 0303 	mvn.w	r3, #3
    89a0:	e043      	b.n	8a2a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    89a2:	6a38      	ldr	r0, [r7, #32]
    89a4:	4b26      	ldr	r3, [pc, #152]	; (8a40 <_spi_m_sync_trans+0x104>)
    89a6:	4798      	blx	r3
    89a8:	4603      	mov	r3, r0
    89aa:	f083 0301 	eor.w	r3, r3, #1
    89ae:	b2db      	uxtb	r3, r3
    89b0:	2b00      	cmp	r3, #0
    89b2:	d002      	beq.n	89ba <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    89b4:	f06f 0313 	mvn.w	r3, #19
    89b8:	e037      	b.n	8a2a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    89ba:	6a38      	ldr	r0, [r7, #32]
    89bc:	4b21      	ldr	r3, [pc, #132]	; (8a44 <_spi_m_sync_trans+0x108>)
    89be:	4798      	blx	r3
    89c0:	4603      	mov	r3, r0
    89c2:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    89c4:	f107 0308 	add.w	r3, r7, #8
    89c8:	461a      	mov	r2, r3
    89ca:	69f9      	ldr	r1, [r7, #28]
    89cc:	6a38      	ldr	r0, [r7, #32]
    89ce:	4b1e      	ldr	r3, [pc, #120]	; (8a48 <_spi_m_sync_trans+0x10c>)
    89d0:	4798      	blx	r3
    89d2:	4603      	mov	r3, r0
    89d4:	f083 0301 	eor.w	r3, r3, #1
    89d8:	b2db      	uxtb	r3, r3
    89da:	2b00      	cmp	r3, #0
    89dc:	d00b      	beq.n	89f6 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    89de:	697a      	ldr	r2, [r7, #20]
    89e0:	693b      	ldr	r3, [r7, #16]
    89e2:	429a      	cmp	r2, r3
    89e4:	d307      	bcc.n	89f6 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	88db      	ldrh	r3, [r3, #6]
    89ea:	f107 0208 	add.w	r2, r7, #8
    89ee:	69f9      	ldr	r1, [r7, #28]
    89f0:	6a38      	ldr	r0, [r7, #32]
    89f2:	4c16      	ldr	r4, [pc, #88]	; (8a4c <_spi_m_sync_trans+0x110>)
    89f4:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    89f6:	6a39      	ldr	r1, [r7, #32]
    89f8:	69f8      	ldr	r0, [r7, #28]
    89fa:	4b15      	ldr	r3, [pc, #84]	; (8a50 <_spi_m_sync_trans+0x114>)
    89fc:	4798      	blx	r3
    89fe:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a02:	2b00      	cmp	r3, #0
    8a04:	db0c      	blt.n	8a20 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    8a06:	693a      	ldr	r2, [r7, #16]
    8a08:	683b      	ldr	r3, [r7, #0]
    8a0a:	689b      	ldr	r3, [r3, #8]
    8a0c:	429a      	cmp	r2, r3
    8a0e:	d3d4      	bcc.n	89ba <_spi_m_sync_trans+0x7e>
    8a10:	697a      	ldr	r2, [r7, #20]
    8a12:	683b      	ldr	r3, [r7, #0]
    8a14:	689b      	ldr	r3, [r3, #8]
    8a16:	429a      	cmp	r2, r3
    8a18:	d3cf      	bcc.n	89ba <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8a1a:	693b      	ldr	r3, [r7, #16]
    8a1c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8a1e:	e000      	b.n	8a22 <_spi_m_sync_trans+0xe6>
			break;
    8a20:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    8a22:	6a38      	ldr	r0, [r7, #32]
    8a24:	4b0b      	ldr	r3, [pc, #44]	; (8a54 <_spi_m_sync_trans+0x118>)
    8a26:	4798      	blx	r3

	return rc;
    8a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8a2a:	4618      	mov	r0, r3
    8a2c:	372c      	adds	r7, #44	; 0x2c
    8a2e:	46bd      	mov	sp, r7
    8a30:	bd90      	pop	{r4, r7, pc}
    8a32:	bf00      	nop
    8a34:	00011400 	.word	0x00011400
    8a38:	00005239 	.word	0x00005239
    8a3c:	00007755 	.word	0x00007755
    8a40:	00007901 	.word	0x00007901
    8a44:	000077f3 	.word	0x000077f3
    8a48:	00008819 	.word	0x00008819
    8a4c:	00008885 	.word	0x00008885
    8a50:	000088fd 	.word	0x000088fd
    8a54:	000087e9 	.word	0x000087e9

00008a58 <__NVIC_EnableIRQ>:
{
    8a58:	b480      	push	{r7}
    8a5a:	b083      	sub	sp, #12
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	4603      	mov	r3, r0
    8a60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a66:	2b00      	cmp	r3, #0
    8a68:	db0b      	blt.n	8a82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8a6a:	4909      	ldr	r1, [pc, #36]	; (8a90 <__NVIC_EnableIRQ+0x38>)
    8a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a70:	095b      	lsrs	r3, r3, #5
    8a72:	88fa      	ldrh	r2, [r7, #6]
    8a74:	f002 021f 	and.w	r2, r2, #31
    8a78:	2001      	movs	r0, #1
    8a7a:	fa00 f202 	lsl.w	r2, r0, r2
    8a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a82:	bf00      	nop
    8a84:	370c      	adds	r7, #12
    8a86:	46bd      	mov	sp, r7
    8a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8c:	4770      	bx	lr
    8a8e:	bf00      	nop
    8a90:	e000e100 	.word	0xe000e100

00008a94 <__NVIC_DisableIRQ>:
{
    8a94:	b480      	push	{r7}
    8a96:	b083      	sub	sp, #12
    8a98:	af00      	add	r7, sp, #0
    8a9a:	4603      	mov	r3, r0
    8a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	db10      	blt.n	8ac8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8aa6:	490b      	ldr	r1, [pc, #44]	; (8ad4 <__NVIC_DisableIRQ+0x40>)
    8aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8aac:	095b      	lsrs	r3, r3, #5
    8aae:	88fa      	ldrh	r2, [r7, #6]
    8ab0:	f002 021f 	and.w	r2, r2, #31
    8ab4:	2001      	movs	r0, #1
    8ab6:	fa00 f202 	lsl.w	r2, r0, r2
    8aba:	3320      	adds	r3, #32
    8abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8ac0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8ac4:	f3bf 8f6f 	isb	sy
}
    8ac8:	bf00      	nop
    8aca:	370c      	adds	r7, #12
    8acc:	46bd      	mov	sp, r7
    8ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ad2:	4770      	bx	lr
    8ad4:	e000e100 	.word	0xe000e100

00008ad8 <__NVIC_ClearPendingIRQ>:
{
    8ad8:	b480      	push	{r7}
    8ada:	b083      	sub	sp, #12
    8adc:	af00      	add	r7, sp, #0
    8ade:	4603      	mov	r3, r0
    8ae0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ae6:	2b00      	cmp	r3, #0
    8ae8:	db0c      	blt.n	8b04 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8aea:	4909      	ldr	r1, [pc, #36]	; (8b10 <__NVIC_ClearPendingIRQ+0x38>)
    8aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8af0:	095b      	lsrs	r3, r3, #5
    8af2:	88fa      	ldrh	r2, [r7, #6]
    8af4:	f002 021f 	and.w	r2, r2, #31
    8af8:	2001      	movs	r0, #1
    8afa:	fa00 f202 	lsl.w	r2, r0, r2
    8afe:	3360      	adds	r3, #96	; 0x60
    8b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b04:	bf00      	nop
    8b06:	370c      	adds	r7, #12
    8b08:	46bd      	mov	sp, r7
    8b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b0e:	4770      	bx	lr
    8b10:	e000e100 	.word	0xe000e100

00008b14 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8b14:	b480      	push	{r7}
    8b16:	b083      	sub	sp, #12
    8b18:	af00      	add	r7, sp, #0
    8b1a:	6078      	str	r0, [r7, #4]
    8b1c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    8b1e:	bf00      	nop
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	689a      	ldr	r2, [r3, #8]
    8b24:	683b      	ldr	r3, [r7, #0]
    8b26:	4013      	ands	r3, r2
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d1f9      	bne.n	8b20 <hri_tcc_wait_for_sync+0xc>
	};
}
    8b2c:	bf00      	nop
    8b2e:	370c      	adds	r7, #12
    8b30:	46bd      	mov	sp, r7
    8b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b36:	4770      	bx	lr

00008b38 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8b38:	b480      	push	{r7}
    8b3a:	b083      	sub	sp, #12
    8b3c:	af00      	add	r7, sp, #0
    8b3e:	6078      	str	r0, [r7, #4]
    8b40:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    8b42:	687b      	ldr	r3, [r7, #4]
    8b44:	689a      	ldr	r2, [r3, #8]
    8b46:	683b      	ldr	r3, [r7, #0]
    8b48:	4013      	ands	r3, r2
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	bf14      	ite	ne
    8b4e:	2301      	movne	r3, #1
    8b50:	2300      	moveq	r3, #0
    8b52:	b2db      	uxtb	r3, r3
}
    8b54:	4618      	mov	r0, r3
    8b56:	370c      	adds	r7, #12
    8b58:	46bd      	mov	sp, r7
    8b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b5e:	4770      	bx	lr

00008b60 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    8b60:	b480      	push	{r7}
    8b62:	b083      	sub	sp, #12
    8b64:	af00      	add	r7, sp, #0
    8b66:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b6c:	f003 0301 	and.w	r3, r3, #1
    8b70:	2b00      	cmp	r3, #0
    8b72:	bf14      	ite	ne
    8b74:	2301      	movne	r3, #1
    8b76:	2300      	moveq	r3, #0
    8b78:	b2db      	uxtb	r3, r3
}
    8b7a:	4618      	mov	r0, r3
    8b7c:	370c      	adds	r7, #12
    8b7e:	46bd      	mov	sp, r7
    8b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b84:	4770      	bx	lr

00008b86 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    8b86:	b480      	push	{r7}
    8b88:	b083      	sub	sp, #12
    8b8a:	af00      	add	r7, sp, #0
    8b8c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	2201      	movs	r2, #1
    8b92:	62da      	str	r2, [r3, #44]	; 0x2c
}
    8b94:	bf00      	nop
    8b96:	370c      	adds	r7, #12
    8b98:	46bd      	mov	sp, r7
    8b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b9e:	4770      	bx	lr

00008ba0 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    8ba0:	b480      	push	{r7}
    8ba2:	b083      	sub	sp, #12
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	6078      	str	r0, [r7, #4]
    8ba8:	460b      	mov	r3, r1
    8baa:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	78fa      	ldrb	r2, [r7, #3]
    8bb0:	715a      	strb	r2, [r3, #5]
}
    8bb2:	bf00      	nop
    8bb4:	370c      	adds	r7, #12
    8bb6:	46bd      	mov	sp, r7
    8bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bbc:	4770      	bx	lr

00008bbe <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    8bbe:	b480      	push	{r7}
    8bc0:	b083      	sub	sp, #12
    8bc2:	af00      	add	r7, sp, #0
    8bc4:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	2201      	movs	r2, #1
    8bca:	629a      	str	r2, [r3, #40]	; 0x28
}
    8bcc:	bf00      	nop
    8bce:	370c      	adds	r7, #12
    8bd0:	46bd      	mov	sp, r7
    8bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bd6:	4770      	bx	lr

00008bd8 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8bd8:	b580      	push	{r7, lr}
    8bda:	b082      	sub	sp, #8
    8bdc:	af00      	add	r7, sp, #0
    8bde:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    8be0:	687b      	ldr	r3, [r7, #4]
    8be2:	681b      	ldr	r3, [r3, #0]
    8be4:	f043 0201 	orr.w	r2, r3, #1
    8be8:	687b      	ldr	r3, [r7, #4]
    8bea:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8bec:	2101      	movs	r1, #1
    8bee:	6878      	ldr	r0, [r7, #4]
    8bf0:	4b02      	ldr	r3, [pc, #8]	; (8bfc <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    8bf2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8bf4:	bf00      	nop
    8bf6:	3708      	adds	r7, #8
    8bf8:	46bd      	mov	sp, r7
    8bfa:	bd80      	pop	{r7, pc}
    8bfc:	00008b15 	.word	0x00008b15

00008c00 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	b082      	sub	sp, #8
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	681b      	ldr	r3, [r3, #0]
    8c0c:	f043 0202 	orr.w	r2, r3, #2
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8c14:	2103      	movs	r1, #3
    8c16:	6878      	ldr	r0, [r7, #4]
    8c18:	4b02      	ldr	r3, [pc, #8]	; (8c24 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    8c1a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8c1c:	bf00      	nop
    8c1e:	3708      	adds	r7, #8
    8c20:	46bd      	mov	sp, r7
    8c22:	bd80      	pop	{r7, pc}
    8c24:	00008b15 	.word	0x00008b15

00008c28 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b084      	sub	sp, #16
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8c30:	2103      	movs	r1, #3
    8c32:	6878      	ldr	r0, [r7, #4]
    8c34:	4b09      	ldr	r3, [pc, #36]	; (8c5c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    8c36:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	681b      	ldr	r3, [r3, #0]
    8c3c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    8c3e:	68fb      	ldr	r3, [r7, #12]
    8c40:	085b      	lsrs	r3, r3, #1
    8c42:	f003 0301 	and.w	r3, r3, #1
    8c46:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8c48:	68fb      	ldr	r3, [r7, #12]
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	bf14      	ite	ne
    8c4e:	2301      	movne	r3, #1
    8c50:	2300      	moveq	r3, #0
    8c52:	b2db      	uxtb	r3, r3
}
    8c54:	4618      	mov	r0, r3
    8c56:	3710      	adds	r7, #16
    8c58:	46bd      	mov	sp, r7
    8c5a:	bd80      	pop	{r7, pc}
    8c5c:	00008b15 	.word	0x00008b15

00008c60 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8c60:	b580      	push	{r7, lr}
    8c62:	b082      	sub	sp, #8
    8c64:	af00      	add	r7, sp, #0
    8c66:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    8c68:	687b      	ldr	r3, [r7, #4]
    8c6a:	681b      	ldr	r3, [r3, #0]
    8c6c:	f023 0202 	bic.w	r2, r3, #2
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8c74:	2103      	movs	r1, #3
    8c76:	6878      	ldr	r0, [r7, #4]
    8c78:	4b02      	ldr	r3, [pc, #8]	; (8c84 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    8c7a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8c7c:	bf00      	nop
    8c7e:	3708      	adds	r7, #8
    8c80:	46bd      	mov	sp, r7
    8c82:	bd80      	pop	{r7, pc}
    8c84:	00008b15 	.word	0x00008b15

00008c88 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    8c88:	b580      	push	{r7, lr}
    8c8a:	b084      	sub	sp, #16
    8c8c:	af00      	add	r7, sp, #0
    8c8e:	6078      	str	r0, [r7, #4]
    8c90:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8c92:	2103      	movs	r1, #3
    8c94:	6878      	ldr	r0, [r7, #4]
    8c96:	4b07      	ldr	r3, [pc, #28]	; (8cb4 <hri_tcc_get_CTRLA_reg+0x2c>)
    8c98:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8c9a:	687b      	ldr	r3, [r7, #4]
    8c9c:	681b      	ldr	r3, [r3, #0]
    8c9e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8ca0:	68fa      	ldr	r2, [r7, #12]
    8ca2:	683b      	ldr	r3, [r7, #0]
    8ca4:	4013      	ands	r3, r2
    8ca6:	60fb      	str	r3, [r7, #12]
	return tmp;
    8ca8:	68fb      	ldr	r3, [r7, #12]
}
    8caa:	4618      	mov	r0, r3
    8cac:	3710      	adds	r7, #16
    8cae:	46bd      	mov	sp, r7
    8cb0:	bd80      	pop	{r7, pc}
    8cb2:	bf00      	nop
    8cb4:	00008b15 	.word	0x00008b15

00008cb8 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    8cb8:	b580      	push	{r7, lr}
    8cba:	b082      	sub	sp, #8
    8cbc:	af00      	add	r7, sp, #0
    8cbe:	6078      	str	r0, [r7, #4]
    8cc0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	683a      	ldr	r2, [r7, #0]
    8cc6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8cc8:	2103      	movs	r1, #3
    8cca:	6878      	ldr	r0, [r7, #4]
    8ccc:	4b02      	ldr	r3, [pc, #8]	; (8cd8 <hri_tcc_write_CTRLA_reg+0x20>)
    8cce:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8cd0:	bf00      	nop
    8cd2:	3708      	adds	r7, #8
    8cd4:	46bd      	mov	sp, r7
    8cd6:	bd80      	pop	{r7, pc}
    8cd8:	00008b15 	.word	0x00008b15

00008cdc <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    8cdc:	b480      	push	{r7}
    8cde:	b083      	sub	sp, #12
    8ce0:	af00      	add	r7, sp, #0
    8ce2:	6078      	str	r0, [r7, #4]
    8ce4:	460b      	mov	r3, r1
    8ce6:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    8ce8:	687b      	ldr	r3, [r7, #4]
    8cea:	78fa      	ldrb	r2, [r7, #3]
    8cec:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8cee:	bf00      	nop
    8cf0:	370c      	adds	r7, #12
    8cf2:	46bd      	mov	sp, r7
    8cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf8:	4770      	bx	lr

00008cfa <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    8cfa:	b480      	push	{r7}
    8cfc:	b083      	sub	sp, #12
    8cfe:	af00      	add	r7, sp, #0
    8d00:	6078      	str	r0, [r7, #4]
    8d02:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	683a      	ldr	r2, [r7, #0]
    8d08:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    8d0a:	bf00      	nop
    8d0c:	370c      	adds	r7, #12
    8d0e:	46bd      	mov	sp, r7
    8d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d14:	4770      	bx	lr
	...

00008d18 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    8d18:	b580      	push	{r7, lr}
    8d1a:	b082      	sub	sp, #8
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	6078      	str	r0, [r7, #4]
    8d20:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    8d22:	687b      	ldr	r3, [r7, #4]
    8d24:	683a      	ldr	r2, [r7, #0]
    8d26:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8d28:	2180      	movs	r1, #128	; 0x80
    8d2a:	6878      	ldr	r0, [r7, #4]
    8d2c:	4b02      	ldr	r3, [pc, #8]	; (8d38 <hri_tcc_write_PER_reg+0x20>)
    8d2e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8d30:	bf00      	nop
    8d32:	3708      	adds	r7, #8
    8d34:	46bd      	mov	sp, r7
    8d36:	bd80      	pop	{r7, pc}
    8d38:	00008b15 	.word	0x00008b15

00008d3c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    8d3c:	b580      	push	{r7, lr}
    8d3e:	b082      	sub	sp, #8
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    8d44:	2180      	movs	r1, #128	; 0x80
    8d46:	6878      	ldr	r0, [r7, #4]
    8d48:	4b03      	ldr	r3, [pc, #12]	; (8d58 <hri_tcc_read_PER_reg+0x1c>)
    8d4a:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    8d50:	4618      	mov	r0, r3
    8d52:	3708      	adds	r7, #8
    8d54:	46bd      	mov	sp, r7
    8d56:	bd80      	pop	{r7, pc}
    8d58:	00008b15 	.word	0x00008b15

00008d5c <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    8d5c:	b480      	push	{r7}
    8d5e:	b083      	sub	sp, #12
    8d60:	af00      	add	r7, sp, #0
    8d62:	6078      	str	r0, [r7, #4]
    8d64:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    8d66:	687b      	ldr	r3, [r7, #4]
    8d68:	4a0c      	ldr	r2, [pc, #48]	; (8d9c <_tcc_init_irq_param+0x40>)
    8d6a:	4293      	cmp	r3, r2
    8d6c:	d102      	bne.n	8d74 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    8d6e:	4a0c      	ldr	r2, [pc, #48]	; (8da0 <_tcc_init_irq_param+0x44>)
    8d70:	683b      	ldr	r3, [r7, #0]
    8d72:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	4a0b      	ldr	r2, [pc, #44]	; (8da4 <_tcc_init_irq_param+0x48>)
    8d78:	4293      	cmp	r3, r2
    8d7a:	d102      	bne.n	8d82 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    8d7c:	4a0a      	ldr	r2, [pc, #40]	; (8da8 <_tcc_init_irq_param+0x4c>)
    8d7e:	683b      	ldr	r3, [r7, #0]
    8d80:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    8d82:	687b      	ldr	r3, [r7, #4]
    8d84:	4a09      	ldr	r2, [pc, #36]	; (8dac <_tcc_init_irq_param+0x50>)
    8d86:	4293      	cmp	r3, r2
    8d88:	d102      	bne.n	8d90 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    8d8a:	4a09      	ldr	r2, [pc, #36]	; (8db0 <_tcc_init_irq_param+0x54>)
    8d8c:	683b      	ldr	r3, [r7, #0]
    8d8e:	6013      	str	r3, [r2, #0]
	}
}
    8d90:	bf00      	nop
    8d92:	370c      	adds	r7, #12
    8d94:	46bd      	mov	sp, r7
    8d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d9a:	4770      	bx	lr
    8d9c:	41016000 	.word	0x41016000
    8da0:	20000e24 	.word	0x20000e24
    8da4:	41018000 	.word	0x41018000
    8da8:	20000e28 	.word	0x20000e28
    8dac:	42000c00 	.word	0x42000c00
    8db0:	20000e2c 	.word	0x20000e2c

00008db4 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    8db4:	b580      	push	{r7, lr}
    8db6:	b084      	sub	sp, #16
    8db8:	af00      	add	r7, sp, #0
    8dba:	6078      	str	r0, [r7, #4]
    8dbc:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8dbe:	6838      	ldr	r0, [r7, #0]
    8dc0:	4b33      	ldr	r3, [pc, #204]	; (8e90 <_tcc_timer_init+0xdc>)
    8dc2:	4798      	blx	r3
    8dc4:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    8dc6:	68fb      	ldr	r3, [r7, #12]
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d102      	bne.n	8dd2 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    8dcc:	f06f 0309 	mvn.w	r3, #9
    8dd0:	e05a      	b.n	8e88 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	683a      	ldr	r2, [r7, #0]
    8dd6:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    8dd8:	2101      	movs	r1, #1
    8dda:	6838      	ldr	r0, [r7, #0]
    8ddc:	4b2d      	ldr	r3, [pc, #180]	; (8e94 <_tcc_timer_init+0xe0>)
    8dde:	4798      	blx	r3
    8de0:	4603      	mov	r3, r0
    8de2:	f083 0301 	eor.w	r3, r3, #1
    8de6:	b2db      	uxtb	r3, r3
    8de8:	2b00      	cmp	r3, #0
    8dea:	d011      	beq.n	8e10 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    8dec:	2102      	movs	r1, #2
    8dee:	6838      	ldr	r0, [r7, #0]
    8df0:	4b29      	ldr	r3, [pc, #164]	; (8e98 <_tcc_timer_init+0xe4>)
    8df2:	4798      	blx	r3
    8df4:	4603      	mov	r3, r0
    8df6:	2b00      	cmp	r3, #0
    8df8:	d006      	beq.n	8e08 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8dfa:	6838      	ldr	r0, [r7, #0]
    8dfc:	4b27      	ldr	r3, [pc, #156]	; (8e9c <_tcc_timer_init+0xe8>)
    8dfe:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    8e00:	2102      	movs	r1, #2
    8e02:	6838      	ldr	r0, [r7, #0]
    8e04:	4b26      	ldr	r3, [pc, #152]	; (8ea0 <_tcc_timer_init+0xec>)
    8e06:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    8e08:	2101      	movs	r1, #1
    8e0a:	6838      	ldr	r0, [r7, #0]
    8e0c:	4b25      	ldr	r3, [pc, #148]	; (8ea4 <_tcc_timer_init+0xf0>)
    8e0e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8e10:	2101      	movs	r1, #1
    8e12:	6838      	ldr	r0, [r7, #0]
    8e14:	4b22      	ldr	r3, [pc, #136]	; (8ea0 <_tcc_timer_init+0xec>)
    8e16:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    8e18:	68fb      	ldr	r3, [r7, #12]
    8e1a:	689b      	ldr	r3, [r3, #8]
    8e1c:	4619      	mov	r1, r3
    8e1e:	6838      	ldr	r0, [r7, #0]
    8e20:	4b20      	ldr	r3, [pc, #128]	; (8ea4 <_tcc_timer_init+0xf0>)
    8e22:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    8e24:	68fb      	ldr	r3, [r7, #12]
    8e26:	7b1b      	ldrb	r3, [r3, #12]
    8e28:	4619      	mov	r1, r3
    8e2a:	6838      	ldr	r0, [r7, #0]
    8e2c:	4b1e      	ldr	r3, [pc, #120]	; (8ea8 <_tcc_timer_init+0xf4>)
    8e2e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    8e30:	68fb      	ldr	r3, [r7, #12]
    8e32:	7b5b      	ldrb	r3, [r3, #13]
    8e34:	4619      	mov	r1, r3
    8e36:	6838      	ldr	r0, [r7, #0]
    8e38:	4b1c      	ldr	r3, [pc, #112]	; (8eac <_tcc_timer_init+0xf8>)
    8e3a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    8e3c:	68fb      	ldr	r3, [r7, #12]
    8e3e:	691b      	ldr	r3, [r3, #16]
    8e40:	4619      	mov	r1, r3
    8e42:	6838      	ldr	r0, [r7, #0]
    8e44:	4b1a      	ldr	r3, [pc, #104]	; (8eb0 <_tcc_timer_init+0xfc>)
    8e46:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    8e48:	68fb      	ldr	r3, [r7, #12]
    8e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8e4c:	4619      	mov	r1, r3
    8e4e:	6838      	ldr	r0, [r7, #0]
    8e50:	4b18      	ldr	r3, [pc, #96]	; (8eb4 <_tcc_timer_init+0x100>)
    8e52:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    8e54:	6838      	ldr	r0, [r7, #0]
    8e56:	4b18      	ldr	r3, [pc, #96]	; (8eb8 <_tcc_timer_init+0x104>)
    8e58:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    8e5a:	6879      	ldr	r1, [r7, #4]
    8e5c:	6838      	ldr	r0, [r7, #0]
    8e5e:	4b17      	ldr	r3, [pc, #92]	; (8ebc <_tcc_timer_init+0x108>)
    8e60:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    8e62:	68fb      	ldr	r3, [r7, #12]
    8e64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8e68:	4618      	mov	r0, r3
    8e6a:	4b15      	ldr	r3, [pc, #84]	; (8ec0 <_tcc_timer_init+0x10c>)
    8e6c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    8e6e:	68fb      	ldr	r3, [r7, #12]
    8e70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8e74:	4618      	mov	r0, r3
    8e76:	4b13      	ldr	r3, [pc, #76]	; (8ec4 <_tcc_timer_init+0x110>)
    8e78:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    8e7a:	68fb      	ldr	r3, [r7, #12]
    8e7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8e80:	4618      	mov	r0, r3
    8e82:	4b11      	ldr	r3, [pc, #68]	; (8ec8 <_tcc_timer_init+0x114>)
    8e84:	4798      	blx	r3

	return ERR_NONE;
    8e86:	2300      	movs	r3, #0
}
    8e88:	4618      	mov	r0, r3
    8e8a:	3710      	adds	r7, #16
    8e8c:	46bd      	mov	sp, r7
    8e8e:	bd80      	pop	{r7, pc}
    8e90:	00009099 	.word	0x00009099
    8e94:	00008b39 	.word	0x00008b39
    8e98:	00008c89 	.word	0x00008c89
    8e9c:	00008c61 	.word	0x00008c61
    8ea0:	00008b15 	.word	0x00008b15
    8ea4:	00008cb9 	.word	0x00008cb9
    8ea8:	00008ba1 	.word	0x00008ba1
    8eac:	00008cdd 	.word	0x00008cdd
    8eb0:	00008cfb 	.word	0x00008cfb
    8eb4:	00008d19 	.word	0x00008d19
    8eb8:	00008bbf 	.word	0x00008bbf
    8ebc:	00008d5d 	.word	0x00008d5d
    8ec0:	00008a95 	.word	0x00008a95
    8ec4:	00008ad9 	.word	0x00008ad9
    8ec8:	00008a59 	.word	0x00008a59

00008ecc <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    8ecc:	b580      	push	{r7, lr}
    8ece:	b084      	sub	sp, #16
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	68db      	ldr	r3, [r3, #12]
    8ed8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8eda:	68f8      	ldr	r0, [r7, #12]
    8edc:	4b0a      	ldr	r3, [pc, #40]	; (8f08 <_tcc_timer_deinit+0x3c>)
    8ede:	4798      	blx	r3
    8ee0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8ee2:	68bb      	ldr	r3, [r7, #8]
    8ee4:	2b00      	cmp	r3, #0
    8ee6:	d00b      	beq.n	8f00 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    8ee8:	68bb      	ldr	r3, [r7, #8]
    8eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8eee:	4618      	mov	r0, r3
    8ef0:	4b06      	ldr	r3, [pc, #24]	; (8f0c <_tcc_timer_deinit+0x40>)
    8ef2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8ef4:	68f8      	ldr	r0, [r7, #12]
    8ef6:	4b06      	ldr	r3, [pc, #24]	; (8f10 <_tcc_timer_deinit+0x44>)
    8ef8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    8efa:	68f8      	ldr	r0, [r7, #12]
    8efc:	4b05      	ldr	r3, [pc, #20]	; (8f14 <_tcc_timer_deinit+0x48>)
    8efe:	4798      	blx	r3
	}
}
    8f00:	bf00      	nop
    8f02:	3710      	adds	r7, #16
    8f04:	46bd      	mov	sp, r7
    8f06:	bd80      	pop	{r7, pc}
    8f08:	00009099 	.word	0x00009099
    8f0c:	00008a95 	.word	0x00008a95
    8f10:	00008c61 	.word	0x00008c61
    8f14:	00008bd9 	.word	0x00008bd9

00008f18 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    8f18:	b580      	push	{r7, lr}
    8f1a:	b082      	sub	sp, #8
    8f1c:	af00      	add	r7, sp, #0
    8f1e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    8f20:	687b      	ldr	r3, [r7, #4]
    8f22:	68db      	ldr	r3, [r3, #12]
    8f24:	4618      	mov	r0, r3
    8f26:	4b03      	ldr	r3, [pc, #12]	; (8f34 <_tcc_timer_start+0x1c>)
    8f28:	4798      	blx	r3
}
    8f2a:	bf00      	nop
    8f2c:	3708      	adds	r7, #8
    8f2e:	46bd      	mov	sp, r7
    8f30:	bd80      	pop	{r7, pc}
    8f32:	bf00      	nop
    8f34:	00008c01 	.word	0x00008c01

00008f38 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    8f38:	b580      	push	{r7, lr}
    8f3a:	b082      	sub	sp, #8
    8f3c:	af00      	add	r7, sp, #0
    8f3e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	68db      	ldr	r3, [r3, #12]
    8f44:	4618      	mov	r0, r3
    8f46:	4b03      	ldr	r3, [pc, #12]	; (8f54 <_tcc_timer_stop+0x1c>)
    8f48:	4798      	blx	r3
}
    8f4a:	bf00      	nop
    8f4c:	3708      	adds	r7, #8
    8f4e:	46bd      	mov	sp, r7
    8f50:	bd80      	pop	{r7, pc}
    8f52:	bf00      	nop
    8f54:	00008c61 	.word	0x00008c61

00008f58 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b082      	sub	sp, #8
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
    8f60:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	68db      	ldr	r3, [r3, #12]
    8f66:	6839      	ldr	r1, [r7, #0]
    8f68:	4618      	mov	r0, r3
    8f6a:	4b03      	ldr	r3, [pc, #12]	; (8f78 <_tcc_timer_set_period+0x20>)
    8f6c:	4798      	blx	r3
}
    8f6e:	bf00      	nop
    8f70:	3708      	adds	r7, #8
    8f72:	46bd      	mov	sp, r7
    8f74:	bd80      	pop	{r7, pc}
    8f76:	bf00      	nop
    8f78:	00008d19 	.word	0x00008d19

00008f7c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    8f7c:	b580      	push	{r7, lr}
    8f7e:	b082      	sub	sp, #8
    8f80:	af00      	add	r7, sp, #0
    8f82:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	68db      	ldr	r3, [r3, #12]
    8f88:	4618      	mov	r0, r3
    8f8a:	4b03      	ldr	r3, [pc, #12]	; (8f98 <_tcc_timer_get_period+0x1c>)
    8f8c:	4798      	blx	r3
    8f8e:	4603      	mov	r3, r0
}
    8f90:	4618      	mov	r0, r3
    8f92:	3708      	adds	r7, #8
    8f94:	46bd      	mov	sp, r7
    8f96:	bd80      	pop	{r7, pc}
    8f98:	00008d3d 	.word	0x00008d3d

00008f9c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    8f9c:	b580      	push	{r7, lr}
    8f9e:	b082      	sub	sp, #8
    8fa0:	af00      	add	r7, sp, #0
    8fa2:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	68db      	ldr	r3, [r3, #12]
    8fa8:	4618      	mov	r0, r3
    8faa:	4b03      	ldr	r3, [pc, #12]	; (8fb8 <_tcc_timer_is_started+0x1c>)
    8fac:	4798      	blx	r3
    8fae:	4603      	mov	r3, r0
}
    8fb0:	4618      	mov	r0, r3
    8fb2:	3708      	adds	r7, #8
    8fb4:	46bd      	mov	sp, r7
    8fb6:	bd80      	pop	{r7, pc}
    8fb8:	00008c29 	.word	0x00008c29

00008fbc <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    8fbc:	b480      	push	{r7}
    8fbe:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8fc0:	4b02      	ldr	r3, [pc, #8]	; (8fcc <_tcc_get_timer+0x10>)
}
    8fc2:	4618      	mov	r0, r3
    8fc4:	46bd      	mov	sp, r7
    8fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fca:	4770      	bx	lr
    8fcc:	200000f0 	.word	0x200000f0

00008fd0 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8fd0:	b580      	push	{r7, lr}
    8fd2:	b084      	sub	sp, #16
    8fd4:	af00      	add	r7, sp, #0
    8fd6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8fd8:	687b      	ldr	r3, [r7, #4]
    8fda:	68db      	ldr	r3, [r3, #12]
    8fdc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8fde:	68f8      	ldr	r0, [r7, #12]
    8fe0:	4b08      	ldr	r3, [pc, #32]	; (9004 <_tcc_timer_set_irq+0x34>)
    8fe2:	4798      	blx	r3
    8fe4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    8fe6:	68bb      	ldr	r3, [r7, #8]
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d006      	beq.n	8ffa <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8fec:	68bb      	ldr	r3, [r7, #8]
    8fee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8ff2:	b2db      	uxtb	r3, r3
    8ff4:	4618      	mov	r0, r3
    8ff6:	4b04      	ldr	r3, [pc, #16]	; (9008 <_tcc_timer_set_irq+0x38>)
    8ff8:	4798      	blx	r3
	}
}
    8ffa:	bf00      	nop
    8ffc:	3710      	adds	r7, #16
    8ffe:	46bd      	mov	sp, r7
    9000:	bd80      	pop	{r7, pc}
    9002:	bf00      	nop
    9004:	00009099 	.word	0x00009099
    9008:	00005a81 	.word	0x00005a81

0000900c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    900c:	b580      	push	{r7, lr}
    900e:	b084      	sub	sp, #16
    9010:	af00      	add	r7, sp, #0
    9012:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	68db      	ldr	r3, [r3, #12]
    9018:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    901a:	68f8      	ldr	r0, [r7, #12]
    901c:	4b07      	ldr	r3, [pc, #28]	; (903c <tcc_interrupt_handler+0x30>)
    901e:	4798      	blx	r3
    9020:	4603      	mov	r3, r0
    9022:	2b00      	cmp	r3, #0
    9024:	d006      	beq.n	9034 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    9026:	68f8      	ldr	r0, [r7, #12]
    9028:	4b05      	ldr	r3, [pc, #20]	; (9040 <tcc_interrupt_handler+0x34>)
    902a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	681b      	ldr	r3, [r3, #0]
    9030:	6878      	ldr	r0, [r7, #4]
    9032:	4798      	blx	r3
	}
}
    9034:	bf00      	nop
    9036:	3710      	adds	r7, #16
    9038:	46bd      	mov	sp, r7
    903a:	bd80      	pop	{r7, pc}
    903c:	00008b61 	.word	0x00008b61
    9040:	00008b87 	.word	0x00008b87

00009044 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    9044:	b580      	push	{r7, lr}
    9046:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    9048:	4b03      	ldr	r3, [pc, #12]	; (9058 <TCC0_0_Handler+0x14>)
    904a:	681b      	ldr	r3, [r3, #0]
    904c:	4618      	mov	r0, r3
    904e:	4b03      	ldr	r3, [pc, #12]	; (905c <TCC0_0_Handler+0x18>)
    9050:	4798      	blx	r3
}
    9052:	bf00      	nop
    9054:	bd80      	pop	{r7, pc}
    9056:	bf00      	nop
    9058:	20000e24 	.word	0x20000e24
    905c:	0000900d 	.word	0x0000900d

00009060 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    9060:	b580      	push	{r7, lr}
    9062:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    9064:	4b03      	ldr	r3, [pc, #12]	; (9074 <TCC1_0_Handler+0x14>)
    9066:	681b      	ldr	r3, [r3, #0]
    9068:	4618      	mov	r0, r3
    906a:	4b03      	ldr	r3, [pc, #12]	; (9078 <TCC1_0_Handler+0x18>)
    906c:	4798      	blx	r3
}
    906e:	bf00      	nop
    9070:	bd80      	pop	{r7, pc}
    9072:	bf00      	nop
    9074:	20000e28 	.word	0x20000e28
    9078:	0000900d 	.word	0x0000900d

0000907c <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    907c:	b580      	push	{r7, lr}
    907e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    9080:	4b03      	ldr	r3, [pc, #12]	; (9090 <TCC2_0_Handler+0x14>)
    9082:	681b      	ldr	r3, [r3, #0]
    9084:	4618      	mov	r0, r3
    9086:	4b03      	ldr	r3, [pc, #12]	; (9094 <TCC2_0_Handler+0x18>)
    9088:	4798      	blx	r3
}
    908a:	bf00      	nop
    908c:	bd80      	pop	{r7, pc}
    908e:	bf00      	nop
    9090:	20000e2c 	.word	0x20000e2c
    9094:	0000900d 	.word	0x0000900d

00009098 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    9098:	b480      	push	{r7}
    909a:	b085      	sub	sp, #20
    909c:	af00      	add	r7, sp, #0
    909e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    90a0:	2300      	movs	r3, #0
    90a2:	73fb      	strb	r3, [r7, #15]
    90a4:	e015      	b.n	90d2 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    90a6:	7bfa      	ldrb	r2, [r7, #15]
    90a8:	490f      	ldr	r1, [pc, #60]	; (90e8 <_get_tcc_cfg+0x50>)
    90aa:	4613      	mov	r3, r2
    90ac:	005b      	lsls	r3, r3, #1
    90ae:	4413      	add	r3, r2
    90b0:	011b      	lsls	r3, r3, #4
    90b2:	440b      	add	r3, r1
    90b4:	681a      	ldr	r2, [r3, #0]
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	429a      	cmp	r2, r3
    90ba:	d107      	bne.n	90cc <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    90bc:	7bfa      	ldrb	r2, [r7, #15]
    90be:	4613      	mov	r3, r2
    90c0:	005b      	lsls	r3, r3, #1
    90c2:	4413      	add	r3, r2
    90c4:	011b      	lsls	r3, r3, #4
    90c6:	4a08      	ldr	r2, [pc, #32]	; (90e8 <_get_tcc_cfg+0x50>)
    90c8:	4413      	add	r3, r2
    90ca:	e006      	b.n	90da <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    90cc:	7bfb      	ldrb	r3, [r7, #15]
    90ce:	3301      	adds	r3, #1
    90d0:	73fb      	strb	r3, [r7, #15]
    90d2:	7bfb      	ldrb	r3, [r7, #15]
    90d4:	2b02      	cmp	r3, #2
    90d6:	d9e6      	bls.n	90a6 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    90d8:	2300      	movs	r3, #0
}
    90da:	4618      	mov	r0, r3
    90dc:	3714      	adds	r7, #20
    90de:	46bd      	mov	sp, r7
    90e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e4:	4770      	bx	lr
    90e6:	bf00      	nop
    90e8:	20000060 	.word	0x20000060

000090ec <__NVIC_EnableIRQ>:
{
    90ec:	b480      	push	{r7}
    90ee:	b083      	sub	sp, #12
    90f0:	af00      	add	r7, sp, #0
    90f2:	4603      	mov	r3, r0
    90f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    90f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    90fa:	2b00      	cmp	r3, #0
    90fc:	db0b      	blt.n	9116 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    90fe:	4909      	ldr	r1, [pc, #36]	; (9124 <__NVIC_EnableIRQ+0x38>)
    9100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9104:	095b      	lsrs	r3, r3, #5
    9106:	88fa      	ldrh	r2, [r7, #6]
    9108:	f002 021f 	and.w	r2, r2, #31
    910c:	2001      	movs	r0, #1
    910e:	fa00 f202 	lsl.w	r2, r0, r2
    9112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9116:	bf00      	nop
    9118:	370c      	adds	r7, #12
    911a:	46bd      	mov	sp, r7
    911c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9120:	4770      	bx	lr
    9122:	bf00      	nop
    9124:	e000e100 	.word	0xe000e100

00009128 <__NVIC_DisableIRQ>:
{
    9128:	b480      	push	{r7}
    912a:	b083      	sub	sp, #12
    912c:	af00      	add	r7, sp, #0
    912e:	4603      	mov	r3, r0
    9130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9136:	2b00      	cmp	r3, #0
    9138:	db10      	blt.n	915c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    913a:	490b      	ldr	r1, [pc, #44]	; (9168 <__NVIC_DisableIRQ+0x40>)
    913c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9140:	095b      	lsrs	r3, r3, #5
    9142:	88fa      	ldrh	r2, [r7, #6]
    9144:	f002 021f 	and.w	r2, r2, #31
    9148:	2001      	movs	r0, #1
    914a:	fa00 f202 	lsl.w	r2, r0, r2
    914e:	3320      	adds	r3, #32
    9150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9154:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9158:	f3bf 8f6f 	isb	sy
}
    915c:	bf00      	nop
    915e:	370c      	adds	r7, #12
    9160:	46bd      	mov	sp, r7
    9162:	f85d 7b04 	ldr.w	r7, [sp], #4
    9166:	4770      	bx	lr
    9168:	e000e100 	.word	0xe000e100

0000916c <__NVIC_ClearPendingIRQ>:
{
    916c:	b480      	push	{r7}
    916e:	b083      	sub	sp, #12
    9170:	af00      	add	r7, sp, #0
    9172:	4603      	mov	r3, r0
    9174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    917a:	2b00      	cmp	r3, #0
    917c:	db0c      	blt.n	9198 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    917e:	4909      	ldr	r1, [pc, #36]	; (91a4 <__NVIC_ClearPendingIRQ+0x38>)
    9180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9184:	095b      	lsrs	r3, r3, #5
    9186:	88fa      	ldrh	r2, [r7, #6]
    9188:	f002 021f 	and.w	r2, r2, #31
    918c:	2001      	movs	r0, #1
    918e:	fa00 f202 	lsl.w	r2, r0, r2
    9192:	3360      	adds	r3, #96	; 0x60
    9194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9198:	bf00      	nop
    919a:	370c      	adds	r7, #12
    919c:	46bd      	mov	sp, r7
    919e:	f85d 7b04 	ldr.w	r7, [sp], #4
    91a2:	4770      	bx	lr
    91a4:	e000e100 	.word	0xe000e100

000091a8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    91a8:	b480      	push	{r7}
    91aa:	b083      	sub	sp, #12
    91ac:	af00      	add	r7, sp, #0
    91ae:	6078      	str	r0, [r7, #4]
    91b0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    91b2:	bf00      	nop
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	691a      	ldr	r2, [r3, #16]
    91b8:	683b      	ldr	r3, [r7, #0]
    91ba:	4013      	ands	r3, r2
    91bc:	2b00      	cmp	r3, #0
    91be:	d1f9      	bne.n	91b4 <hri_tc_wait_for_sync+0xc>
	};
}
    91c0:	bf00      	nop
    91c2:	370c      	adds	r7, #12
    91c4:	46bd      	mov	sp, r7
    91c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ca:	4770      	bx	lr

000091cc <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    91cc:	b480      	push	{r7}
    91ce:	b083      	sub	sp, #12
    91d0:	af00      	add	r7, sp, #0
    91d2:	6078      	str	r0, [r7, #4]
    91d4:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    91d6:	687b      	ldr	r3, [r7, #4]
    91d8:	691a      	ldr	r2, [r3, #16]
    91da:	683b      	ldr	r3, [r7, #0]
    91dc:	4013      	ands	r3, r2
    91de:	2b00      	cmp	r3, #0
    91e0:	bf14      	ite	ne
    91e2:	2301      	movne	r3, #1
    91e4:	2300      	moveq	r3, #0
    91e6:	b2db      	uxtb	r3, r3
}
    91e8:	4618      	mov	r0, r3
    91ea:	370c      	adds	r7, #12
    91ec:	46bd      	mov	sp, r7
    91ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    91f2:	4770      	bx	lr

000091f4 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    91f4:	b480      	push	{r7}
    91f6:	b083      	sub	sp, #12
    91f8:	af00      	add	r7, sp, #0
    91fa:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    91fc:	687b      	ldr	r3, [r7, #4]
    91fe:	7a9b      	ldrb	r3, [r3, #10]
    9200:	b2db      	uxtb	r3, r3
    9202:	f003 0301 	and.w	r3, r3, #1
    9206:	2b00      	cmp	r3, #0
    9208:	bf14      	ite	ne
    920a:	2301      	movne	r3, #1
    920c:	2300      	moveq	r3, #0
    920e:	b2db      	uxtb	r3, r3
}
    9210:	4618      	mov	r0, r3
    9212:	370c      	adds	r7, #12
    9214:	46bd      	mov	sp, r7
    9216:	f85d 7b04 	ldr.w	r7, [sp], #4
    921a:	4770      	bx	lr

0000921c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    921c:	b480      	push	{r7}
    921e:	b083      	sub	sp, #12
    9220:	af00      	add	r7, sp, #0
    9222:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	2201      	movs	r2, #1
    9228:	729a      	strb	r2, [r3, #10]
}
    922a:	bf00      	nop
    922c:	370c      	adds	r7, #12
    922e:	46bd      	mov	sp, r7
    9230:	f85d 7b04 	ldr.w	r7, [sp], #4
    9234:	4770      	bx	lr

00009236 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    9236:	b480      	push	{r7}
    9238:	b083      	sub	sp, #12
    923a:	af00      	add	r7, sp, #0
    923c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    923e:	687b      	ldr	r3, [r7, #4]
    9240:	2202      	movs	r2, #2
    9242:	729a      	strb	r2, [r3, #10]
}
    9244:	bf00      	nop
    9246:	370c      	adds	r7, #12
    9248:	46bd      	mov	sp, r7
    924a:	f85d 7b04 	ldr.w	r7, [sp], #4
    924e:	4770      	bx	lr

00009250 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    9250:	b480      	push	{r7}
    9252:	b083      	sub	sp, #12
    9254:	af00      	add	r7, sp, #0
    9256:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	2201      	movs	r2, #1
    925c:	725a      	strb	r2, [r3, #9]
}
    925e:	bf00      	nop
    9260:	370c      	adds	r7, #12
    9262:	46bd      	mov	sp, r7
    9264:	f85d 7b04 	ldr.w	r7, [sp], #4
    9268:	4770      	bx	lr

0000926a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    926a:	b480      	push	{r7}
    926c:	b083      	sub	sp, #12
    926e:	af00      	add	r7, sp, #0
    9270:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	7a5b      	ldrb	r3, [r3, #9]
    9276:	b2db      	uxtb	r3, r3
    9278:	085b      	lsrs	r3, r3, #1
    927a:	f003 0301 	and.w	r3, r3, #1
    927e:	2b00      	cmp	r3, #0
    9280:	bf14      	ite	ne
    9282:	2301      	movne	r3, #1
    9284:	2300      	moveq	r3, #0
    9286:	b2db      	uxtb	r3, r3
}
    9288:	4618      	mov	r0, r3
    928a:	370c      	adds	r7, #12
    928c:	46bd      	mov	sp, r7
    928e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9292:	4770      	bx	lr

00009294 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    9294:	b580      	push	{r7, lr}
    9296:	b082      	sub	sp, #8
    9298:	af00      	add	r7, sp, #0
    929a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	681b      	ldr	r3, [r3, #0]
    92a0:	f043 0201 	orr.w	r2, r3, #1
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    92a8:	2101      	movs	r1, #1
    92aa:	6878      	ldr	r0, [r7, #4]
    92ac:	4b02      	ldr	r3, [pc, #8]	; (92b8 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    92ae:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    92b0:	bf00      	nop
    92b2:	3708      	adds	r7, #8
    92b4:	46bd      	mov	sp, r7
    92b6:	bd80      	pop	{r7, pc}
    92b8:	000091a9 	.word	0x000091a9

000092bc <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b082      	sub	sp, #8
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	681b      	ldr	r3, [r3, #0]
    92c8:	f043 0202 	orr.w	r2, r3, #2
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    92d0:	2103      	movs	r1, #3
    92d2:	6878      	ldr	r0, [r7, #4]
    92d4:	4b02      	ldr	r3, [pc, #8]	; (92e0 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    92d6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    92d8:	bf00      	nop
    92da:	3708      	adds	r7, #8
    92dc:	46bd      	mov	sp, r7
    92de:	bd80      	pop	{r7, pc}
    92e0:	000091a9 	.word	0x000091a9

000092e4 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    92e4:	b580      	push	{r7, lr}
    92e6:	b084      	sub	sp, #16
    92e8:	af00      	add	r7, sp, #0
    92ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    92ec:	2103      	movs	r1, #3
    92ee:	6878      	ldr	r0, [r7, #4]
    92f0:	4b09      	ldr	r3, [pc, #36]	; (9318 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    92f2:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	681b      	ldr	r3, [r3, #0]
    92f8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    92fa:	68fb      	ldr	r3, [r7, #12]
    92fc:	085b      	lsrs	r3, r3, #1
    92fe:	f003 0301 	and.w	r3, r3, #1
    9302:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9304:	68fb      	ldr	r3, [r7, #12]
    9306:	2b00      	cmp	r3, #0
    9308:	bf14      	ite	ne
    930a:	2301      	movne	r3, #1
    930c:	2300      	moveq	r3, #0
    930e:	b2db      	uxtb	r3, r3
}
    9310:	4618      	mov	r0, r3
    9312:	3710      	adds	r7, #16
    9314:	46bd      	mov	sp, r7
    9316:	bd80      	pop	{r7, pc}
    9318:	000091a9 	.word	0x000091a9

0000931c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    931c:	b580      	push	{r7, lr}
    931e:	b082      	sub	sp, #8
    9320:	af00      	add	r7, sp, #0
    9322:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	681b      	ldr	r3, [r3, #0]
    9328:	f023 0202 	bic.w	r2, r3, #2
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9330:	2103      	movs	r1, #3
    9332:	6878      	ldr	r0, [r7, #4]
    9334:	4b02      	ldr	r3, [pc, #8]	; (9340 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    9336:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9338:	bf00      	nop
    933a:	3708      	adds	r7, #8
    933c:	46bd      	mov	sp, r7
    933e:	bd80      	pop	{r7, pc}
    9340:	000091a9 	.word	0x000091a9

00009344 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    9344:	b480      	push	{r7}
    9346:	b085      	sub	sp, #20
    9348:	af00      	add	r7, sp, #0
    934a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    934c:	687b      	ldr	r3, [r7, #4]
    934e:	681b      	ldr	r3, [r3, #0]
    9350:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    9352:	68fb      	ldr	r3, [r7, #12]
    9354:	089b      	lsrs	r3, r3, #2
    9356:	f003 0303 	and.w	r3, r3, #3
    935a:	60fb      	str	r3, [r7, #12]
	return tmp;
    935c:	68fb      	ldr	r3, [r7, #12]
}
    935e:	4618      	mov	r0, r3
    9360:	3714      	adds	r7, #20
    9362:	46bd      	mov	sp, r7
    9364:	f85d 7b04 	ldr.w	r7, [sp], #4
    9368:	4770      	bx	lr
	...

0000936c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    936c:	b580      	push	{r7, lr}
    936e:	b084      	sub	sp, #16
    9370:	af00      	add	r7, sp, #0
    9372:	6078      	str	r0, [r7, #4]
    9374:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9376:	2103      	movs	r1, #3
    9378:	6878      	ldr	r0, [r7, #4]
    937a:	4b07      	ldr	r3, [pc, #28]	; (9398 <hri_tc_get_CTRLA_reg+0x2c>)
    937c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	681b      	ldr	r3, [r3, #0]
    9382:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9384:	68fa      	ldr	r2, [r7, #12]
    9386:	683b      	ldr	r3, [r7, #0]
    9388:	4013      	ands	r3, r2
    938a:	60fb      	str	r3, [r7, #12]
	return tmp;
    938c:	68fb      	ldr	r3, [r7, #12]
}
    938e:	4618      	mov	r0, r3
    9390:	3710      	adds	r7, #16
    9392:	46bd      	mov	sp, r7
    9394:	bd80      	pop	{r7, pc}
    9396:	bf00      	nop
    9398:	000091a9 	.word	0x000091a9

0000939c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    939c:	b580      	push	{r7, lr}
    939e:	b082      	sub	sp, #8
    93a0:	af00      	add	r7, sp, #0
    93a2:	6078      	str	r0, [r7, #4]
    93a4:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	683a      	ldr	r2, [r7, #0]
    93aa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    93ac:	2103      	movs	r1, #3
    93ae:	6878      	ldr	r0, [r7, #4]
    93b0:	4b02      	ldr	r3, [pc, #8]	; (93bc <hri_tc_write_CTRLA_reg+0x20>)
    93b2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    93b4:	bf00      	nop
    93b6:	3708      	adds	r7, #8
    93b8:	46bd      	mov	sp, r7
    93ba:	bd80      	pop	{r7, pc}
    93bc:	000091a9 	.word	0x000091a9

000093c0 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    93c0:	b480      	push	{r7}
    93c2:	b083      	sub	sp, #12
    93c4:	af00      	add	r7, sp, #0
    93c6:	6078      	str	r0, [r7, #4]
    93c8:	460b      	mov	r3, r1
    93ca:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    93cc:	687b      	ldr	r3, [r7, #4]
    93ce:	887a      	ldrh	r2, [r7, #2]
    93d0:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    93d2:	bf00      	nop
    93d4:	370c      	adds	r7, #12
    93d6:	46bd      	mov	sp, r7
    93d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93dc:	4770      	bx	lr

000093de <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    93de:	b480      	push	{r7}
    93e0:	b083      	sub	sp, #12
    93e2:	af00      	add	r7, sp, #0
    93e4:	6078      	str	r0, [r7, #4]
    93e6:	460b      	mov	r3, r1
    93e8:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    93ea:	687b      	ldr	r3, [r7, #4]
    93ec:	78fa      	ldrb	r2, [r7, #3]
    93ee:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    93f0:	bf00      	nop
    93f2:	370c      	adds	r7, #12
    93f4:	46bd      	mov	sp, r7
    93f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93fa:	4770      	bx	lr

000093fc <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    93fc:	b480      	push	{r7}
    93fe:	b083      	sub	sp, #12
    9400:	af00      	add	r7, sp, #0
    9402:	6078      	str	r0, [r7, #4]
    9404:	460b      	mov	r3, r1
    9406:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9408:	687b      	ldr	r3, [r7, #4]
    940a:	78fa      	ldrb	r2, [r7, #3]
    940c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    940e:	bf00      	nop
    9410:	370c      	adds	r7, #12
    9412:	46bd      	mov	sp, r7
    9414:	f85d 7b04 	ldr.w	r7, [sp], #4
    9418:	4770      	bx	lr
	...

0000941c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    941c:	b580      	push	{r7, lr}
    941e:	b082      	sub	sp, #8
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
    9424:	460b      	mov	r3, r1
    9426:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	78fa      	ldrb	r2, [r7, #3]
    942c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    942e:	2120      	movs	r1, #32
    9430:	6878      	ldr	r0, [r7, #4]
    9432:	4b03      	ldr	r3, [pc, #12]	; (9440 <hri_tccount8_write_PER_reg+0x24>)
    9434:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9436:	bf00      	nop
    9438:	3708      	adds	r7, #8
    943a:	46bd      	mov	sp, r7
    943c:	bd80      	pop	{r7, pc}
    943e:	bf00      	nop
    9440:	000091a9 	.word	0x000091a9

00009444 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    9444:	b580      	push	{r7, lr}
    9446:	b082      	sub	sp, #8
    9448:	af00      	add	r7, sp, #0
    944a:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    944c:	2120      	movs	r1, #32
    944e:	6878      	ldr	r0, [r7, #4]
    9450:	4b04      	ldr	r3, [pc, #16]	; (9464 <hri_tccount8_read_PER_reg+0x20>)
    9452:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	7edb      	ldrb	r3, [r3, #27]
    9458:	b2db      	uxtb	r3, r3
}
    945a:	4618      	mov	r0, r3
    945c:	3708      	adds	r7, #8
    945e:	46bd      	mov	sp, r7
    9460:	bd80      	pop	{r7, pc}
    9462:	bf00      	nop
    9464:	000091a9 	.word	0x000091a9

00009468 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    9468:	b580      	push	{r7, lr}
    946a:	b082      	sub	sp, #8
    946c:	af00      	add	r7, sp, #0
    946e:	6078      	str	r0, [r7, #4]
    9470:	460b      	mov	r3, r1
    9472:	70fb      	strb	r3, [r7, #3]
    9474:	4613      	mov	r3, r2
    9476:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9478:	78fb      	ldrb	r3, [r7, #3]
    947a:	687a      	ldr	r2, [r7, #4]
    947c:	4413      	add	r3, r2
    947e:	78ba      	ldrb	r2, [r7, #2]
    9480:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9482:	21c0      	movs	r1, #192	; 0xc0
    9484:	6878      	ldr	r0, [r7, #4]
    9486:	4b03      	ldr	r3, [pc, #12]	; (9494 <hri_tccount8_write_CC_reg+0x2c>)
    9488:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    948a:	bf00      	nop
    948c:	3708      	adds	r7, #8
    948e:	46bd      	mov	sp, r7
    9490:	bd80      	pop	{r7, pc}
    9492:	bf00      	nop
    9494:	000091a9 	.word	0x000091a9

00009498 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    9498:	b580      	push	{r7, lr}
    949a:	b082      	sub	sp, #8
    949c:	af00      	add	r7, sp, #0
    949e:	6078      	str	r0, [r7, #4]
    94a0:	460b      	mov	r3, r1
    94a2:	70fb      	strb	r3, [r7, #3]
    94a4:	4613      	mov	r3, r2
    94a6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    94a8:	78fb      	ldrb	r3, [r7, #3]
    94aa:	687a      	ldr	r2, [r7, #4]
    94ac:	330c      	adds	r3, #12
    94ae:	005b      	lsls	r3, r3, #1
    94b0:	4413      	add	r3, r2
    94b2:	883a      	ldrh	r2, [r7, #0]
    94b4:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    94b6:	21c0      	movs	r1, #192	; 0xc0
    94b8:	6878      	ldr	r0, [r7, #4]
    94ba:	4b03      	ldr	r3, [pc, #12]	; (94c8 <hri_tccount16_write_CC_reg+0x30>)
    94bc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    94be:	bf00      	nop
    94c0:	3708      	adds	r7, #8
    94c2:	46bd      	mov	sp, r7
    94c4:	bd80      	pop	{r7, pc}
    94c6:	bf00      	nop
    94c8:	000091a9 	.word	0x000091a9

000094cc <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    94cc:	b580      	push	{r7, lr}
    94ce:	b082      	sub	sp, #8
    94d0:	af00      	add	r7, sp, #0
    94d2:	6078      	str	r0, [r7, #4]
    94d4:	460b      	mov	r3, r1
    94d6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    94d8:	21c0      	movs	r1, #192	; 0xc0
    94da:	6878      	ldr	r0, [r7, #4]
    94dc:	4b06      	ldr	r3, [pc, #24]	; (94f8 <hri_tccount16_read_CC_reg+0x2c>)
    94de:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    94e0:	78fb      	ldrb	r3, [r7, #3]
    94e2:	687a      	ldr	r2, [r7, #4]
    94e4:	330c      	adds	r3, #12
    94e6:	005b      	lsls	r3, r3, #1
    94e8:	4413      	add	r3, r2
    94ea:	889b      	ldrh	r3, [r3, #4]
    94ec:	b29b      	uxth	r3, r3
}
    94ee:	4618      	mov	r0, r3
    94f0:	3708      	adds	r7, #8
    94f2:	46bd      	mov	sp, r7
    94f4:	bd80      	pop	{r7, pc}
    94f6:	bf00      	nop
    94f8:	000091a9 	.word	0x000091a9

000094fc <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    94fc:	b580      	push	{r7, lr}
    94fe:	b084      	sub	sp, #16
    9500:	af00      	add	r7, sp, #0
    9502:	60f8      	str	r0, [r7, #12]
    9504:	460b      	mov	r3, r1
    9506:	607a      	str	r2, [r7, #4]
    9508:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    950a:	7afb      	ldrb	r3, [r7, #11]
    950c:	68fa      	ldr	r2, [r7, #12]
    950e:	3306      	adds	r3, #6
    9510:	009b      	lsls	r3, r3, #2
    9512:	4413      	add	r3, r2
    9514:	687a      	ldr	r2, [r7, #4]
    9516:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9518:	21c0      	movs	r1, #192	; 0xc0
    951a:	68f8      	ldr	r0, [r7, #12]
    951c:	4b02      	ldr	r3, [pc, #8]	; (9528 <hri_tccount32_write_CC_reg+0x2c>)
    951e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9520:	bf00      	nop
    9522:	3710      	adds	r7, #16
    9524:	46bd      	mov	sp, r7
    9526:	bd80      	pop	{r7, pc}
    9528:	000091a9 	.word	0x000091a9

0000952c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    952c:	b580      	push	{r7, lr}
    952e:	b082      	sub	sp, #8
    9530:	af00      	add	r7, sp, #0
    9532:	6078      	str	r0, [r7, #4]
    9534:	460b      	mov	r3, r1
    9536:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9538:	21c0      	movs	r1, #192	; 0xc0
    953a:	6878      	ldr	r0, [r7, #4]
    953c:	4b05      	ldr	r3, [pc, #20]	; (9554 <hri_tccount32_read_CC_reg+0x28>)
    953e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    9540:	78fb      	ldrb	r3, [r7, #3]
    9542:	687a      	ldr	r2, [r7, #4]
    9544:	3306      	adds	r3, #6
    9546:	009b      	lsls	r3, r3, #2
    9548:	4413      	add	r3, r2
    954a:	685b      	ldr	r3, [r3, #4]
}
    954c:	4618      	mov	r0, r3
    954e:	3708      	adds	r7, #8
    9550:	46bd      	mov	sp, r7
    9552:	bd80      	pop	{r7, pc}
    9554:	000091a9 	.word	0x000091a9

00009558 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    9558:	b580      	push	{r7, lr}
    955a:	b084      	sub	sp, #16
    955c:	af00      	add	r7, sp, #0
    955e:	6078      	str	r0, [r7, #4]
    9560:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    9562:	6838      	ldr	r0, [r7, #0]
    9564:	4b93      	ldr	r3, [pc, #588]	; (97b4 <_tc_timer_init+0x25c>)
    9566:	4798      	blx	r3
    9568:	4603      	mov	r3, r0
    956a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	683a      	ldr	r2, [r7, #0]
    9570:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    9572:	22a4      	movs	r2, #164	; 0xa4
    9574:	4990      	ldr	r1, [pc, #576]	; (97b8 <_tc_timer_init+0x260>)
    9576:	2001      	movs	r0, #1
    9578:	4b90      	ldr	r3, [pc, #576]	; (97bc <_tc_timer_init+0x264>)
    957a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    957c:	2101      	movs	r1, #1
    957e:	6838      	ldr	r0, [r7, #0]
    9580:	4b8f      	ldr	r3, [pc, #572]	; (97c0 <_tc_timer_init+0x268>)
    9582:	4798      	blx	r3
    9584:	4603      	mov	r3, r0
    9586:	f083 0301 	eor.w	r3, r3, #1
    958a:	b2db      	uxtb	r3, r3
    958c:	2b00      	cmp	r3, #0
    958e:	d011      	beq.n	95b4 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9590:	2102      	movs	r1, #2
    9592:	6838      	ldr	r0, [r7, #0]
    9594:	4b8b      	ldr	r3, [pc, #556]	; (97c4 <_tc_timer_init+0x26c>)
    9596:	4798      	blx	r3
    9598:	4603      	mov	r3, r0
    959a:	2b00      	cmp	r3, #0
    959c:	d006      	beq.n	95ac <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    959e:	6838      	ldr	r0, [r7, #0]
    95a0:	4b89      	ldr	r3, [pc, #548]	; (97c8 <_tc_timer_init+0x270>)
    95a2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    95a4:	2102      	movs	r1, #2
    95a6:	6838      	ldr	r0, [r7, #0]
    95a8:	4b88      	ldr	r3, [pc, #544]	; (97cc <_tc_timer_init+0x274>)
    95aa:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    95ac:	2101      	movs	r1, #1
    95ae:	6838      	ldr	r0, [r7, #0]
    95b0:	4b87      	ldr	r3, [pc, #540]	; (97d0 <_tc_timer_init+0x278>)
    95b2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    95b4:	2101      	movs	r1, #1
    95b6:	6838      	ldr	r0, [r7, #0]
    95b8:	4b84      	ldr	r3, [pc, #528]	; (97cc <_tc_timer_init+0x274>)
    95ba:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    95bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    95c0:	4984      	ldr	r1, [pc, #528]	; (97d4 <_tc_timer_init+0x27c>)
    95c2:	4613      	mov	r3, r2
    95c4:	009b      	lsls	r3, r3, #2
    95c6:	4413      	add	r3, r2
    95c8:	009b      	lsls	r3, r3, #2
    95ca:	440b      	add	r3, r1
    95cc:	3304      	adds	r3, #4
    95ce:	681b      	ldr	r3, [r3, #0]
    95d0:	4619      	mov	r1, r3
    95d2:	6838      	ldr	r0, [r7, #0]
    95d4:	4b7e      	ldr	r3, [pc, #504]	; (97d0 <_tc_timer_init+0x278>)
    95d6:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    95d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    95dc:	497d      	ldr	r1, [pc, #500]	; (97d4 <_tc_timer_init+0x27c>)
    95de:	4613      	mov	r3, r2
    95e0:	009b      	lsls	r3, r3, #2
    95e2:	4413      	add	r3, r2
    95e4:	009b      	lsls	r3, r3, #2
    95e6:	440b      	add	r3, r1
    95e8:	330a      	adds	r3, #10
    95ea:	781b      	ldrb	r3, [r3, #0]
    95ec:	4619      	mov	r1, r3
    95ee:	6838      	ldr	r0, [r7, #0]
    95f0:	4b79      	ldr	r3, [pc, #484]	; (97d8 <_tc_timer_init+0x280>)
    95f2:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    95f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    95f8:	4976      	ldr	r1, [pc, #472]	; (97d4 <_tc_timer_init+0x27c>)
    95fa:	4613      	mov	r3, r2
    95fc:	009b      	lsls	r3, r3, #2
    95fe:	4413      	add	r3, r2
    9600:	009b      	lsls	r3, r3, #2
    9602:	440b      	add	r3, r1
    9604:	3308      	adds	r3, #8
    9606:	881b      	ldrh	r3, [r3, #0]
    9608:	4619      	mov	r1, r3
    960a:	6838      	ldr	r0, [r7, #0]
    960c:	4b73      	ldr	r3, [pc, #460]	; (97dc <_tc_timer_init+0x284>)
    960e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    9610:	2101      	movs	r1, #1
    9612:	6838      	ldr	r0, [r7, #0]
    9614:	4b72      	ldr	r3, [pc, #456]	; (97e0 <_tc_timer_init+0x288>)
    9616:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9618:	f997 200f 	ldrsb.w	r2, [r7, #15]
    961c:	496d      	ldr	r1, [pc, #436]	; (97d4 <_tc_timer_init+0x27c>)
    961e:	4613      	mov	r3, r2
    9620:	009b      	lsls	r3, r3, #2
    9622:	4413      	add	r3, r2
    9624:	009b      	lsls	r3, r3, #2
    9626:	440b      	add	r3, r1
    9628:	3304      	adds	r3, #4
    962a:	681b      	ldr	r3, [r3, #0]
    962c:	f003 030c 	and.w	r3, r3, #12
    9630:	2b08      	cmp	r3, #8
    9632:	d11e      	bne.n	9672 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9634:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9638:	4966      	ldr	r1, [pc, #408]	; (97d4 <_tc_timer_init+0x27c>)
    963a:	4613      	mov	r3, r2
    963c:	009b      	lsls	r3, r3, #2
    963e:	4413      	add	r3, r2
    9640:	009b      	lsls	r3, r3, #2
    9642:	440b      	add	r3, r1
    9644:	330c      	adds	r3, #12
    9646:	681b      	ldr	r3, [r3, #0]
    9648:	461a      	mov	r2, r3
    964a:	2100      	movs	r1, #0
    964c:	6838      	ldr	r0, [r7, #0]
    964e:	4b65      	ldr	r3, [pc, #404]	; (97e4 <_tc_timer_init+0x28c>)
    9650:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9652:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9656:	495f      	ldr	r1, [pc, #380]	; (97d4 <_tc_timer_init+0x27c>)
    9658:	4613      	mov	r3, r2
    965a:	009b      	lsls	r3, r3, #2
    965c:	4413      	add	r3, r2
    965e:	009b      	lsls	r3, r3, #2
    9660:	440b      	add	r3, r1
    9662:	3310      	adds	r3, #16
    9664:	681b      	ldr	r3, [r3, #0]
    9666:	461a      	mov	r2, r3
    9668:	2101      	movs	r1, #1
    966a:	6838      	ldr	r0, [r7, #0]
    966c:	4b5d      	ldr	r3, [pc, #372]	; (97e4 <_tc_timer_init+0x28c>)
    966e:	4798      	blx	r3
    9670:	e06a      	b.n	9748 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9672:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9676:	4957      	ldr	r1, [pc, #348]	; (97d4 <_tc_timer_init+0x27c>)
    9678:	4613      	mov	r3, r2
    967a:	009b      	lsls	r3, r3, #2
    967c:	4413      	add	r3, r2
    967e:	009b      	lsls	r3, r3, #2
    9680:	440b      	add	r3, r1
    9682:	3304      	adds	r3, #4
    9684:	681b      	ldr	r3, [r3, #0]
    9686:	f003 030c 	and.w	r3, r3, #12
    968a:	2b00      	cmp	r3, #0
    968c:	d120      	bne.n	96d0 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    968e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9692:	4950      	ldr	r1, [pc, #320]	; (97d4 <_tc_timer_init+0x27c>)
    9694:	4613      	mov	r3, r2
    9696:	009b      	lsls	r3, r3, #2
    9698:	4413      	add	r3, r2
    969a:	009b      	lsls	r3, r3, #2
    969c:	440b      	add	r3, r1
    969e:	330c      	adds	r3, #12
    96a0:	681b      	ldr	r3, [r3, #0]
    96a2:	b29b      	uxth	r3, r3
    96a4:	461a      	mov	r2, r3
    96a6:	2100      	movs	r1, #0
    96a8:	6838      	ldr	r0, [r7, #0]
    96aa:	4b4f      	ldr	r3, [pc, #316]	; (97e8 <_tc_timer_init+0x290>)
    96ac:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    96ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    96b2:	4948      	ldr	r1, [pc, #288]	; (97d4 <_tc_timer_init+0x27c>)
    96b4:	4613      	mov	r3, r2
    96b6:	009b      	lsls	r3, r3, #2
    96b8:	4413      	add	r3, r2
    96ba:	009b      	lsls	r3, r3, #2
    96bc:	440b      	add	r3, r1
    96be:	3310      	adds	r3, #16
    96c0:	681b      	ldr	r3, [r3, #0]
    96c2:	b29b      	uxth	r3, r3
    96c4:	461a      	mov	r2, r3
    96c6:	2101      	movs	r1, #1
    96c8:	6838      	ldr	r0, [r7, #0]
    96ca:	4b47      	ldr	r3, [pc, #284]	; (97e8 <_tc_timer_init+0x290>)
    96cc:	4798      	blx	r3
    96ce:	e03b      	b.n	9748 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    96d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    96d4:	493f      	ldr	r1, [pc, #252]	; (97d4 <_tc_timer_init+0x27c>)
    96d6:	4613      	mov	r3, r2
    96d8:	009b      	lsls	r3, r3, #2
    96da:	4413      	add	r3, r2
    96dc:	009b      	lsls	r3, r3, #2
    96de:	440b      	add	r3, r1
    96e0:	3304      	adds	r3, #4
    96e2:	681b      	ldr	r3, [r3, #0]
    96e4:	f003 030c 	and.w	r3, r3, #12
    96e8:	2b04      	cmp	r3, #4
    96ea:	d12d      	bne.n	9748 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    96ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    96f0:	4938      	ldr	r1, [pc, #224]	; (97d4 <_tc_timer_init+0x27c>)
    96f2:	4613      	mov	r3, r2
    96f4:	009b      	lsls	r3, r3, #2
    96f6:	4413      	add	r3, r2
    96f8:	009b      	lsls	r3, r3, #2
    96fa:	440b      	add	r3, r1
    96fc:	330c      	adds	r3, #12
    96fe:	681b      	ldr	r3, [r3, #0]
    9700:	b2db      	uxtb	r3, r3
    9702:	461a      	mov	r2, r3
    9704:	2100      	movs	r1, #0
    9706:	6838      	ldr	r0, [r7, #0]
    9708:	4b38      	ldr	r3, [pc, #224]	; (97ec <_tc_timer_init+0x294>)
    970a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    970c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9710:	4930      	ldr	r1, [pc, #192]	; (97d4 <_tc_timer_init+0x27c>)
    9712:	4613      	mov	r3, r2
    9714:	009b      	lsls	r3, r3, #2
    9716:	4413      	add	r3, r2
    9718:	009b      	lsls	r3, r3, #2
    971a:	440b      	add	r3, r1
    971c:	3310      	adds	r3, #16
    971e:	681b      	ldr	r3, [r3, #0]
    9720:	b2db      	uxtb	r3, r3
    9722:	461a      	mov	r2, r3
    9724:	2101      	movs	r1, #1
    9726:	6838      	ldr	r0, [r7, #0]
    9728:	4b30      	ldr	r3, [pc, #192]	; (97ec <_tc_timer_init+0x294>)
    972a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    972c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9730:	4928      	ldr	r1, [pc, #160]	; (97d4 <_tc_timer_init+0x27c>)
    9732:	4613      	mov	r3, r2
    9734:	009b      	lsls	r3, r3, #2
    9736:	4413      	add	r3, r2
    9738:	009b      	lsls	r3, r3, #2
    973a:	440b      	add	r3, r1
    973c:	330b      	adds	r3, #11
    973e:	781b      	ldrb	r3, [r3, #0]
    9740:	4619      	mov	r1, r3
    9742:	6838      	ldr	r0, [r7, #0]
    9744:	4b2a      	ldr	r3, [pc, #168]	; (97f0 <_tc_timer_init+0x298>)
    9746:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9748:	6838      	ldr	r0, [r7, #0]
    974a:	4b2a      	ldr	r3, [pc, #168]	; (97f4 <_tc_timer_init+0x29c>)
    974c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    974e:	6879      	ldr	r1, [r7, #4]
    9750:	6838      	ldr	r0, [r7, #0]
    9752:	4b29      	ldr	r3, [pc, #164]	; (97f8 <_tc_timer_init+0x2a0>)
    9754:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9756:	f997 200f 	ldrsb.w	r2, [r7, #15]
    975a:	491e      	ldr	r1, [pc, #120]	; (97d4 <_tc_timer_init+0x27c>)
    975c:	4613      	mov	r3, r2
    975e:	009b      	lsls	r3, r3, #2
    9760:	4413      	add	r3, r2
    9762:	009b      	lsls	r3, r3, #2
    9764:	440b      	add	r3, r1
    9766:	3302      	adds	r3, #2
    9768:	f9b3 3000 	ldrsh.w	r3, [r3]
    976c:	4618      	mov	r0, r3
    976e:	4b23      	ldr	r3, [pc, #140]	; (97fc <_tc_timer_init+0x2a4>)
    9770:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9772:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9776:	4917      	ldr	r1, [pc, #92]	; (97d4 <_tc_timer_init+0x27c>)
    9778:	4613      	mov	r3, r2
    977a:	009b      	lsls	r3, r3, #2
    977c:	4413      	add	r3, r2
    977e:	009b      	lsls	r3, r3, #2
    9780:	440b      	add	r3, r1
    9782:	3302      	adds	r3, #2
    9784:	f9b3 3000 	ldrsh.w	r3, [r3]
    9788:	4618      	mov	r0, r3
    978a:	4b1d      	ldr	r3, [pc, #116]	; (9800 <_tc_timer_init+0x2a8>)
    978c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    978e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9792:	4910      	ldr	r1, [pc, #64]	; (97d4 <_tc_timer_init+0x27c>)
    9794:	4613      	mov	r3, r2
    9796:	009b      	lsls	r3, r3, #2
    9798:	4413      	add	r3, r2
    979a:	009b      	lsls	r3, r3, #2
    979c:	440b      	add	r3, r1
    979e:	3302      	adds	r3, #2
    97a0:	f9b3 3000 	ldrsh.w	r3, [r3]
    97a4:	4618      	mov	r0, r3
    97a6:	4b17      	ldr	r3, [pc, #92]	; (9804 <_tc_timer_init+0x2ac>)
    97a8:	4798      	blx	r3

	return ERR_NONE;
    97aa:	2300      	movs	r3, #0
}
    97ac:	4618      	mov	r0, r3
    97ae:	3710      	adds	r7, #16
    97b0:	46bd      	mov	sp, r7
    97b2:	bd80      	pop	{r7, pc}
    97b4:	00009da9 	.word	0x00009da9
    97b8:	00011460 	.word	0x00011460
    97bc:	00005239 	.word	0x00005239
    97c0:	000091cd 	.word	0x000091cd
    97c4:	0000936d 	.word	0x0000936d
    97c8:	0000931d 	.word	0x0000931d
    97cc:	000091a9 	.word	0x000091a9
    97d0:	0000939d 	.word	0x0000939d
    97d4:	20000110 	.word	0x20000110
    97d8:	000093fd 	.word	0x000093fd
    97dc:	000093c1 	.word	0x000093c1
    97e0:	000093df 	.word	0x000093df
    97e4:	000094fd 	.word	0x000094fd
    97e8:	00009499 	.word	0x00009499
    97ec:	00009469 	.word	0x00009469
    97f0:	0000941d 	.word	0x0000941d
    97f4:	00009251 	.word	0x00009251
    97f8:	00009e11 	.word	0x00009e11
    97fc:	00009129 	.word	0x00009129
    9800:	0000916d 	.word	0x0000916d
    9804:	000090ed 	.word	0x000090ed

00009808 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9808:	b580      	push	{r7, lr}
    980a:	b084      	sub	sp, #16
    980c:	af00      	add	r7, sp, #0
    980e:	6078      	str	r0, [r7, #4]
    9810:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9812:	6838      	ldr	r0, [r7, #0]
    9814:	4b73      	ldr	r3, [pc, #460]	; (99e4 <_pwm_init+0x1dc>)
    9816:	4798      	blx	r3
    9818:	4603      	mov	r3, r0
    981a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	683a      	ldr	r2, [r7, #0]
    9820:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9822:	2101      	movs	r1, #1
    9824:	6838      	ldr	r0, [r7, #0]
    9826:	4b70      	ldr	r3, [pc, #448]	; (99e8 <_pwm_init+0x1e0>)
    9828:	4798      	blx	r3
    982a:	4603      	mov	r3, r0
    982c:	f083 0301 	eor.w	r3, r3, #1
    9830:	b2db      	uxtb	r3, r3
    9832:	2b00      	cmp	r3, #0
    9834:	d011      	beq.n	985a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9836:	2102      	movs	r1, #2
    9838:	6838      	ldr	r0, [r7, #0]
    983a:	4b6c      	ldr	r3, [pc, #432]	; (99ec <_pwm_init+0x1e4>)
    983c:	4798      	blx	r3
    983e:	4603      	mov	r3, r0
    9840:	2b00      	cmp	r3, #0
    9842:	d006      	beq.n	9852 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9844:	6838      	ldr	r0, [r7, #0]
    9846:	4b6a      	ldr	r3, [pc, #424]	; (99f0 <_pwm_init+0x1e8>)
    9848:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    984a:	2102      	movs	r1, #2
    984c:	6838      	ldr	r0, [r7, #0]
    984e:	4b69      	ldr	r3, [pc, #420]	; (99f4 <_pwm_init+0x1ec>)
    9850:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9852:	2101      	movs	r1, #1
    9854:	6838      	ldr	r0, [r7, #0]
    9856:	4b68      	ldr	r3, [pc, #416]	; (99f8 <_pwm_init+0x1f0>)
    9858:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    985a:	2101      	movs	r1, #1
    985c:	6838      	ldr	r0, [r7, #0]
    985e:	4b65      	ldr	r3, [pc, #404]	; (99f4 <_pwm_init+0x1ec>)
    9860:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9862:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9866:	4965      	ldr	r1, [pc, #404]	; (99fc <_pwm_init+0x1f4>)
    9868:	4613      	mov	r3, r2
    986a:	009b      	lsls	r3, r3, #2
    986c:	4413      	add	r3, r2
    986e:	009b      	lsls	r3, r3, #2
    9870:	440b      	add	r3, r1
    9872:	3304      	adds	r3, #4
    9874:	681b      	ldr	r3, [r3, #0]
    9876:	4619      	mov	r1, r3
    9878:	6838      	ldr	r0, [r7, #0]
    987a:	4b5f      	ldr	r3, [pc, #380]	; (99f8 <_pwm_init+0x1f0>)
    987c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    987e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9882:	495e      	ldr	r1, [pc, #376]	; (99fc <_pwm_init+0x1f4>)
    9884:	4613      	mov	r3, r2
    9886:	009b      	lsls	r3, r3, #2
    9888:	4413      	add	r3, r2
    988a:	009b      	lsls	r3, r3, #2
    988c:	440b      	add	r3, r1
    988e:	330a      	adds	r3, #10
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	4619      	mov	r1, r3
    9894:	6838      	ldr	r0, [r7, #0]
    9896:	4b5a      	ldr	r3, [pc, #360]	; (9a00 <_pwm_init+0x1f8>)
    9898:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    989a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    989e:	4957      	ldr	r1, [pc, #348]	; (99fc <_pwm_init+0x1f4>)
    98a0:	4613      	mov	r3, r2
    98a2:	009b      	lsls	r3, r3, #2
    98a4:	4413      	add	r3, r2
    98a6:	009b      	lsls	r3, r3, #2
    98a8:	440b      	add	r3, r1
    98aa:	3308      	adds	r3, #8
    98ac:	881b      	ldrh	r3, [r3, #0]
    98ae:	4619      	mov	r1, r3
    98b0:	6838      	ldr	r0, [r7, #0]
    98b2:	4b54      	ldr	r3, [pc, #336]	; (9a04 <_pwm_init+0x1fc>)
    98b4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    98b6:	2103      	movs	r1, #3
    98b8:	6838      	ldr	r0, [r7, #0]
    98ba:	4b53      	ldr	r3, [pc, #332]	; (9a08 <_pwm_init+0x200>)
    98bc:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    98be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98c2:	494e      	ldr	r1, [pc, #312]	; (99fc <_pwm_init+0x1f4>)
    98c4:	4613      	mov	r3, r2
    98c6:	009b      	lsls	r3, r3, #2
    98c8:	4413      	add	r3, r2
    98ca:	009b      	lsls	r3, r3, #2
    98cc:	440b      	add	r3, r1
    98ce:	3304      	adds	r3, #4
    98d0:	681b      	ldr	r3, [r3, #0]
    98d2:	f003 030c 	and.w	r3, r3, #12
    98d6:	2b08      	cmp	r3, #8
    98d8:	d11e      	bne.n	9918 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    98da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98de:	4947      	ldr	r1, [pc, #284]	; (99fc <_pwm_init+0x1f4>)
    98e0:	4613      	mov	r3, r2
    98e2:	009b      	lsls	r3, r3, #2
    98e4:	4413      	add	r3, r2
    98e6:	009b      	lsls	r3, r3, #2
    98e8:	440b      	add	r3, r1
    98ea:	330c      	adds	r3, #12
    98ec:	681b      	ldr	r3, [r3, #0]
    98ee:	461a      	mov	r2, r3
    98f0:	2100      	movs	r1, #0
    98f2:	6838      	ldr	r0, [r7, #0]
    98f4:	4b45      	ldr	r3, [pc, #276]	; (9a0c <_pwm_init+0x204>)
    98f6:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    98f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98fc:	493f      	ldr	r1, [pc, #252]	; (99fc <_pwm_init+0x1f4>)
    98fe:	4613      	mov	r3, r2
    9900:	009b      	lsls	r3, r3, #2
    9902:	4413      	add	r3, r2
    9904:	009b      	lsls	r3, r3, #2
    9906:	440b      	add	r3, r1
    9908:	3310      	adds	r3, #16
    990a:	681b      	ldr	r3, [r3, #0]
    990c:	461a      	mov	r2, r3
    990e:	2101      	movs	r1, #1
    9910:	6838      	ldr	r0, [r7, #0]
    9912:	4b3e      	ldr	r3, [pc, #248]	; (9a0c <_pwm_init+0x204>)
    9914:	4798      	blx	r3
    9916:	e031      	b.n	997c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9918:	f997 200f 	ldrsb.w	r2, [r7, #15]
    991c:	4937      	ldr	r1, [pc, #220]	; (99fc <_pwm_init+0x1f4>)
    991e:	4613      	mov	r3, r2
    9920:	009b      	lsls	r3, r3, #2
    9922:	4413      	add	r3, r2
    9924:	009b      	lsls	r3, r3, #2
    9926:	440b      	add	r3, r1
    9928:	3304      	adds	r3, #4
    992a:	681b      	ldr	r3, [r3, #0]
    992c:	f003 030c 	and.w	r3, r3, #12
    9930:	2b00      	cmp	r3, #0
    9932:	d120      	bne.n	9976 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9934:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9938:	4930      	ldr	r1, [pc, #192]	; (99fc <_pwm_init+0x1f4>)
    993a:	4613      	mov	r3, r2
    993c:	009b      	lsls	r3, r3, #2
    993e:	4413      	add	r3, r2
    9940:	009b      	lsls	r3, r3, #2
    9942:	440b      	add	r3, r1
    9944:	330c      	adds	r3, #12
    9946:	681b      	ldr	r3, [r3, #0]
    9948:	b29b      	uxth	r3, r3
    994a:	461a      	mov	r2, r3
    994c:	2100      	movs	r1, #0
    994e:	6838      	ldr	r0, [r7, #0]
    9950:	4b2f      	ldr	r3, [pc, #188]	; (9a10 <_pwm_init+0x208>)
    9952:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9954:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9958:	4928      	ldr	r1, [pc, #160]	; (99fc <_pwm_init+0x1f4>)
    995a:	4613      	mov	r3, r2
    995c:	009b      	lsls	r3, r3, #2
    995e:	4413      	add	r3, r2
    9960:	009b      	lsls	r3, r3, #2
    9962:	440b      	add	r3, r1
    9964:	3310      	adds	r3, #16
    9966:	681b      	ldr	r3, [r3, #0]
    9968:	b29b      	uxth	r3, r3
    996a:	461a      	mov	r2, r3
    996c:	2101      	movs	r1, #1
    996e:	6838      	ldr	r0, [r7, #0]
    9970:	4b27      	ldr	r3, [pc, #156]	; (9a10 <_pwm_init+0x208>)
    9972:	4798      	blx	r3
    9974:	e002      	b.n	997c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9976:	f04f 33ff 	mov.w	r3, #4294967295
    997a:	e02e      	b.n	99da <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    997c:	6879      	ldr	r1, [r7, #4]
    997e:	6838      	ldr	r0, [r7, #0]
    9980:	4b24      	ldr	r3, [pc, #144]	; (9a14 <_pwm_init+0x20c>)
    9982:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9984:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9988:	491c      	ldr	r1, [pc, #112]	; (99fc <_pwm_init+0x1f4>)
    998a:	4613      	mov	r3, r2
    998c:	009b      	lsls	r3, r3, #2
    998e:	4413      	add	r3, r2
    9990:	009b      	lsls	r3, r3, #2
    9992:	440b      	add	r3, r1
    9994:	3302      	adds	r3, #2
    9996:	f9b3 3000 	ldrsh.w	r3, [r3]
    999a:	4618      	mov	r0, r3
    999c:	4b1e      	ldr	r3, [pc, #120]	; (9a18 <_pwm_init+0x210>)
    999e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    99a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99a4:	4915      	ldr	r1, [pc, #84]	; (99fc <_pwm_init+0x1f4>)
    99a6:	4613      	mov	r3, r2
    99a8:	009b      	lsls	r3, r3, #2
    99aa:	4413      	add	r3, r2
    99ac:	009b      	lsls	r3, r3, #2
    99ae:	440b      	add	r3, r1
    99b0:	3302      	adds	r3, #2
    99b2:	f9b3 3000 	ldrsh.w	r3, [r3]
    99b6:	4618      	mov	r0, r3
    99b8:	4b18      	ldr	r3, [pc, #96]	; (9a1c <_pwm_init+0x214>)
    99ba:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    99bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99c0:	490e      	ldr	r1, [pc, #56]	; (99fc <_pwm_init+0x1f4>)
    99c2:	4613      	mov	r3, r2
    99c4:	009b      	lsls	r3, r3, #2
    99c6:	4413      	add	r3, r2
    99c8:	009b      	lsls	r3, r3, #2
    99ca:	440b      	add	r3, r1
    99cc:	3302      	adds	r3, #2
    99ce:	f9b3 3000 	ldrsh.w	r3, [r3]
    99d2:	4618      	mov	r0, r3
    99d4:	4b12      	ldr	r3, [pc, #72]	; (9a20 <_pwm_init+0x218>)
    99d6:	4798      	blx	r3

	return 0;
    99d8:	2300      	movs	r3, #0
}
    99da:	4618      	mov	r0, r3
    99dc:	3710      	adds	r7, #16
    99de:	46bd      	mov	sp, r7
    99e0:	bd80      	pop	{r7, pc}
    99e2:	bf00      	nop
    99e4:	00009da9 	.word	0x00009da9
    99e8:	000091cd 	.word	0x000091cd
    99ec:	0000936d 	.word	0x0000936d
    99f0:	0000931d 	.word	0x0000931d
    99f4:	000091a9 	.word	0x000091a9
    99f8:	0000939d 	.word	0x0000939d
    99fc:	20000110 	.word	0x20000110
    9a00:	000093fd 	.word	0x000093fd
    9a04:	000093c1 	.word	0x000093c1
    9a08:	000093df 	.word	0x000093df
    9a0c:	000094fd 	.word	0x000094fd
    9a10:	00009499 	.word	0x00009499
    9a14:	00009e11 	.word	0x00009e11
    9a18:	00009129 	.word	0x00009129
    9a1c:	0000916d 	.word	0x0000916d
    9a20:	000090ed 	.word	0x000090ed

00009a24 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    9a24:	b580      	push	{r7, lr}
    9a26:	b084      	sub	sp, #16
    9a28:	af00      	add	r7, sp, #0
    9a2a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9a2c:	687b      	ldr	r3, [r7, #4]
    9a2e:	68db      	ldr	r3, [r3, #12]
    9a30:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9a32:	68f8      	ldr	r0, [r7, #12]
    9a34:	4b10      	ldr	r3, [pc, #64]	; (9a78 <_tc_timer_deinit+0x54>)
    9a36:	4798      	blx	r3
    9a38:	4603      	mov	r3, r0
    9a3a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9a3c:	22f9      	movs	r2, #249	; 0xf9
    9a3e:	490f      	ldr	r1, [pc, #60]	; (9a7c <_tc_timer_deinit+0x58>)
    9a40:	2001      	movs	r0, #1
    9a42:	4b0f      	ldr	r3, [pc, #60]	; (9a80 <_tc_timer_deinit+0x5c>)
    9a44:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    9a46:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9a4a:	490e      	ldr	r1, [pc, #56]	; (9a84 <_tc_timer_deinit+0x60>)
    9a4c:	4613      	mov	r3, r2
    9a4e:	009b      	lsls	r3, r3, #2
    9a50:	4413      	add	r3, r2
    9a52:	009b      	lsls	r3, r3, #2
    9a54:	440b      	add	r3, r1
    9a56:	3302      	adds	r3, #2
    9a58:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a5c:	4618      	mov	r0, r3
    9a5e:	4b0a      	ldr	r3, [pc, #40]	; (9a88 <_tc_timer_deinit+0x64>)
    9a60:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9a62:	68f8      	ldr	r0, [r7, #12]
    9a64:	4b09      	ldr	r3, [pc, #36]	; (9a8c <_tc_timer_deinit+0x68>)
    9a66:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    9a68:	68f8      	ldr	r0, [r7, #12]
    9a6a:	4b09      	ldr	r3, [pc, #36]	; (9a90 <_tc_timer_deinit+0x6c>)
    9a6c:	4798      	blx	r3
}
    9a6e:	bf00      	nop
    9a70:	3710      	adds	r7, #16
    9a72:	46bd      	mov	sp, r7
    9a74:	bd80      	pop	{r7, pc}
    9a76:	bf00      	nop
    9a78:	00009da9 	.word	0x00009da9
    9a7c:	00011460 	.word	0x00011460
    9a80:	00005239 	.word	0x00005239
    9a84:	20000110 	.word	0x20000110
    9a88:	00009129 	.word	0x00009129
    9a8c:	0000931d 	.word	0x0000931d
    9a90:	00009295 	.word	0x00009295

00009a94 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b082      	sub	sp, #8
    9a98:	af00      	add	r7, sp, #0
    9a9a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	68db      	ldr	r3, [r3, #12]
    9aa0:	4618      	mov	r0, r3
    9aa2:	4b03      	ldr	r3, [pc, #12]	; (9ab0 <_tc_timer_start+0x1c>)
    9aa4:	4798      	blx	r3
}
    9aa6:	bf00      	nop
    9aa8:	3708      	adds	r7, #8
    9aaa:	46bd      	mov	sp, r7
    9aac:	bd80      	pop	{r7, pc}
    9aae:	bf00      	nop
    9ab0:	000092bd 	.word	0x000092bd

00009ab4 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    9ab4:	b580      	push	{r7, lr}
    9ab6:	b082      	sub	sp, #8
    9ab8:	af00      	add	r7, sp, #0
    9aba:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	68db      	ldr	r3, [r3, #12]
    9ac0:	4618      	mov	r0, r3
    9ac2:	4b03      	ldr	r3, [pc, #12]	; (9ad0 <_tc_timer_stop+0x1c>)
    9ac4:	4798      	blx	r3
}
    9ac6:	bf00      	nop
    9ac8:	3708      	adds	r7, #8
    9aca:	46bd      	mov	sp, r7
    9acc:	bd80      	pop	{r7, pc}
    9ace:	bf00      	nop
    9ad0:	0000931d 	.word	0x0000931d

00009ad4 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9ad4:	b580      	push	{r7, lr}
    9ad6:	b084      	sub	sp, #16
    9ad8:	af00      	add	r7, sp, #0
    9ada:	6078      	str	r0, [r7, #4]
    9adc:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    9ade:	687b      	ldr	r3, [r7, #4]
    9ae0:	68db      	ldr	r3, [r3, #12]
    9ae2:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9ae4:	68f8      	ldr	r0, [r7, #12]
    9ae6:	4b14      	ldr	r3, [pc, #80]	; (9b38 <_tc_timer_set_period+0x64>)
    9ae8:	4798      	blx	r3
    9aea:	4603      	mov	r3, r0
    9aec:	2b02      	cmp	r3, #2
    9aee:	d105      	bne.n	9afc <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    9af0:	683a      	ldr	r2, [r7, #0]
    9af2:	2100      	movs	r1, #0
    9af4:	68f8      	ldr	r0, [r7, #12]
    9af6:	4b11      	ldr	r3, [pc, #68]	; (9b3c <_tc_timer_set_period+0x68>)
    9af8:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    9afa:	e019      	b.n	9b30 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9afc:	68f8      	ldr	r0, [r7, #12]
    9afe:	4b0e      	ldr	r3, [pc, #56]	; (9b38 <_tc_timer_set_period+0x64>)
    9b00:	4798      	blx	r3
    9b02:	4603      	mov	r3, r0
    9b04:	2b00      	cmp	r3, #0
    9b06:	d107      	bne.n	9b18 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    9b08:	683b      	ldr	r3, [r7, #0]
    9b0a:	b29b      	uxth	r3, r3
    9b0c:	461a      	mov	r2, r3
    9b0e:	2100      	movs	r1, #0
    9b10:	68f8      	ldr	r0, [r7, #12]
    9b12:	4b0b      	ldr	r3, [pc, #44]	; (9b40 <_tc_timer_set_period+0x6c>)
    9b14:	4798      	blx	r3
}
    9b16:	e00b      	b.n	9b30 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9b18:	68f8      	ldr	r0, [r7, #12]
    9b1a:	4b07      	ldr	r3, [pc, #28]	; (9b38 <_tc_timer_set_period+0x64>)
    9b1c:	4798      	blx	r3
    9b1e:	4603      	mov	r3, r0
    9b20:	2b01      	cmp	r3, #1
    9b22:	d105      	bne.n	9b30 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    9b24:	683b      	ldr	r3, [r7, #0]
    9b26:	b2db      	uxtb	r3, r3
    9b28:	4619      	mov	r1, r3
    9b2a:	68f8      	ldr	r0, [r7, #12]
    9b2c:	4b05      	ldr	r3, [pc, #20]	; (9b44 <_tc_timer_set_period+0x70>)
    9b2e:	4798      	blx	r3
}
    9b30:	bf00      	nop
    9b32:	3710      	adds	r7, #16
    9b34:	46bd      	mov	sp, r7
    9b36:	bd80      	pop	{r7, pc}
    9b38:	00009345 	.word	0x00009345
    9b3c:	000094fd 	.word	0x000094fd
    9b40:	00009499 	.word	0x00009499
    9b44:	0000941d 	.word	0x0000941d

00009b48 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    9b48:	b580      	push	{r7, lr}
    9b4a:	b084      	sub	sp, #16
    9b4c:	af00      	add	r7, sp, #0
    9b4e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9b50:	687b      	ldr	r3, [r7, #4]
    9b52:	68db      	ldr	r3, [r3, #12]
    9b54:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9b56:	68f8      	ldr	r0, [r7, #12]
    9b58:	4b13      	ldr	r3, [pc, #76]	; (9ba8 <_tc_timer_get_period+0x60>)
    9b5a:	4798      	blx	r3
    9b5c:	4603      	mov	r3, r0
    9b5e:	2b02      	cmp	r3, #2
    9b60:	d105      	bne.n	9b6e <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    9b62:	2100      	movs	r1, #0
    9b64:	68f8      	ldr	r0, [r7, #12]
    9b66:	4b11      	ldr	r3, [pc, #68]	; (9bac <_tc_timer_get_period+0x64>)
    9b68:	4798      	blx	r3
    9b6a:	4603      	mov	r3, r0
    9b6c:	e017      	b.n	9b9e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9b6e:	68f8      	ldr	r0, [r7, #12]
    9b70:	4b0d      	ldr	r3, [pc, #52]	; (9ba8 <_tc_timer_get_period+0x60>)
    9b72:	4798      	blx	r3
    9b74:	4603      	mov	r3, r0
    9b76:	2b00      	cmp	r3, #0
    9b78:	d105      	bne.n	9b86 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    9b7a:	2100      	movs	r1, #0
    9b7c:	68f8      	ldr	r0, [r7, #12]
    9b7e:	4b0c      	ldr	r3, [pc, #48]	; (9bb0 <_tc_timer_get_period+0x68>)
    9b80:	4798      	blx	r3
    9b82:	4603      	mov	r3, r0
    9b84:	e00b      	b.n	9b9e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9b86:	68f8      	ldr	r0, [r7, #12]
    9b88:	4b07      	ldr	r3, [pc, #28]	; (9ba8 <_tc_timer_get_period+0x60>)
    9b8a:	4798      	blx	r3
    9b8c:	4603      	mov	r3, r0
    9b8e:	2b01      	cmp	r3, #1
    9b90:	d104      	bne.n	9b9c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    9b92:	68f8      	ldr	r0, [r7, #12]
    9b94:	4b07      	ldr	r3, [pc, #28]	; (9bb4 <_tc_timer_get_period+0x6c>)
    9b96:	4798      	blx	r3
    9b98:	4603      	mov	r3, r0
    9b9a:	e000      	b.n	9b9e <_tc_timer_get_period+0x56>
	}

	return 0;
    9b9c:	2300      	movs	r3, #0
}
    9b9e:	4618      	mov	r0, r3
    9ba0:	3710      	adds	r7, #16
    9ba2:	46bd      	mov	sp, r7
    9ba4:	bd80      	pop	{r7, pc}
    9ba6:	bf00      	nop
    9ba8:	00009345 	.word	0x00009345
    9bac:	0000952d 	.word	0x0000952d
    9bb0:	000094cd 	.word	0x000094cd
    9bb4:	00009445 	.word	0x00009445

00009bb8 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    9bb8:	b580      	push	{r7, lr}
    9bba:	b082      	sub	sp, #8
    9bbc:	af00      	add	r7, sp, #0
    9bbe:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9bc0:	687b      	ldr	r3, [r7, #4]
    9bc2:	68db      	ldr	r3, [r3, #12]
    9bc4:	4618      	mov	r0, r3
    9bc6:	4b03      	ldr	r3, [pc, #12]	; (9bd4 <_tc_timer_is_started+0x1c>)
    9bc8:	4798      	blx	r3
    9bca:	4603      	mov	r3, r0
}
    9bcc:	4618      	mov	r0, r3
    9bce:	3708      	adds	r7, #8
    9bd0:	46bd      	mov	sp, r7
    9bd2:	bd80      	pop	{r7, pc}
    9bd4:	000092e5 	.word	0x000092e5

00009bd8 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9bd8:	b480      	push	{r7}
    9bda:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    9bdc:	4b02      	ldr	r3, [pc, #8]	; (9be8 <_tc_get_timer+0x10>)
}
    9bde:	4618      	mov	r0, r3
    9be0:	46bd      	mov	sp, r7
    9be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9be6:	4770      	bx	lr
    9be8:	20000188 	.word	0x20000188

00009bec <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9bec:	b480      	push	{r7}
    9bee:	af00      	add	r7, sp, #0
	return NULL;
    9bf0:	2300      	movs	r3, #0
}
    9bf2:	4618      	mov	r0, r3
    9bf4:	46bd      	mov	sp, r7
    9bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bfa:	4770      	bx	lr

00009bfc <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    9bfc:	b580      	push	{r7, lr}
    9bfe:	b084      	sub	sp, #16
    9c00:	af00      	add	r7, sp, #0
    9c02:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9c04:	687b      	ldr	r3, [r7, #4]
    9c06:	68db      	ldr	r3, [r3, #12]
    9c08:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9c0a:	68f8      	ldr	r0, [r7, #12]
    9c0c:	4b0e      	ldr	r3, [pc, #56]	; (9c48 <_tc_timer_set_irq+0x4c>)
    9c0e:	4798      	blx	r3
    9c10:	4603      	mov	r3, r0
    9c12:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9c14:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    9c18:	490c      	ldr	r1, [pc, #48]	; (9c4c <_tc_timer_set_irq+0x50>)
    9c1a:	2001      	movs	r0, #1
    9c1c:	4b0c      	ldr	r3, [pc, #48]	; (9c50 <_tc_timer_set_irq+0x54>)
    9c1e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    9c20:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9c24:	490b      	ldr	r1, [pc, #44]	; (9c54 <_tc_timer_set_irq+0x58>)
    9c26:	4613      	mov	r3, r2
    9c28:	009b      	lsls	r3, r3, #2
    9c2a:	4413      	add	r3, r2
    9c2c:	009b      	lsls	r3, r3, #2
    9c2e:	440b      	add	r3, r1
    9c30:	3302      	adds	r3, #2
    9c32:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c36:	b2db      	uxtb	r3, r3
    9c38:	4618      	mov	r0, r3
    9c3a:	4b07      	ldr	r3, [pc, #28]	; (9c58 <_tc_timer_set_irq+0x5c>)
    9c3c:	4798      	blx	r3
}
    9c3e:	bf00      	nop
    9c40:	3710      	adds	r7, #16
    9c42:	46bd      	mov	sp, r7
    9c44:	bd80      	pop	{r7, pc}
    9c46:	bf00      	nop
    9c48:	00009da9 	.word	0x00009da9
    9c4c:	00011460 	.word	0x00011460
    9c50:	00005239 	.word	0x00005239
    9c54:	20000110 	.word	0x20000110
    9c58:	00005a81 	.word	0x00005a81

00009c5c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    9c5c:	b580      	push	{r7, lr}
    9c5e:	b084      	sub	sp, #16
    9c60:	af00      	add	r7, sp, #0
    9c62:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9c64:	687b      	ldr	r3, [r7, #4]
    9c66:	68db      	ldr	r3, [r3, #12]
    9c68:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9c6a:	68f8      	ldr	r0, [r7, #12]
    9c6c:	4b07      	ldr	r3, [pc, #28]	; (9c8c <tc_interrupt_handler+0x30>)
    9c6e:	4798      	blx	r3
    9c70:	4603      	mov	r3, r0
    9c72:	2b00      	cmp	r3, #0
    9c74:	d006      	beq.n	9c84 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9c76:	68f8      	ldr	r0, [r7, #12]
    9c78:	4b05      	ldr	r3, [pc, #20]	; (9c90 <tc_interrupt_handler+0x34>)
    9c7a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9c7c:	687b      	ldr	r3, [r7, #4]
    9c7e:	681b      	ldr	r3, [r3, #0]
    9c80:	6878      	ldr	r0, [r7, #4]
    9c82:	4798      	blx	r3
	}
}
    9c84:	bf00      	nop
    9c86:	3710      	adds	r7, #16
    9c88:	46bd      	mov	sp, r7
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	000091f5 	.word	0x000091f5
    9c90:	0000921d 	.word	0x0000921d

00009c94 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    9c94:	b580      	push	{r7, lr}
    9c96:	b084      	sub	sp, #16
    9c98:	af00      	add	r7, sp, #0
    9c9a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9c9c:	687b      	ldr	r3, [r7, #4]
    9c9e:	691b      	ldr	r3, [r3, #16]
    9ca0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9ca2:	68f8      	ldr	r0, [r7, #12]
    9ca4:	4b12      	ldr	r3, [pc, #72]	; (9cf0 <tc_pwm_interrupt_handler+0x5c>)
    9ca6:	4798      	blx	r3
    9ca8:	4603      	mov	r3, r0
    9caa:	2b00      	cmp	r3, #0
    9cac:	d00a      	beq.n	9cc4 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9cae:	68f8      	ldr	r0, [r7, #12]
    9cb0:	4b10      	ldr	r3, [pc, #64]	; (9cf4 <tc_pwm_interrupt_handler+0x60>)
    9cb2:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    9cb4:	687b      	ldr	r3, [r7, #4]
    9cb6:	681b      	ldr	r3, [r3, #0]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d003      	beq.n	9cc4 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	681b      	ldr	r3, [r3, #0]
    9cc0:	6878      	ldr	r0, [r7, #4]
    9cc2:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    9cc4:	68f8      	ldr	r0, [r7, #12]
    9cc6:	4b0c      	ldr	r3, [pc, #48]	; (9cf8 <tc_pwm_interrupt_handler+0x64>)
    9cc8:	4798      	blx	r3
    9cca:	4603      	mov	r3, r0
    9ccc:	2b00      	cmp	r3, #0
    9cce:	d00a      	beq.n	9ce6 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    9cd0:	68f8      	ldr	r0, [r7, #12]
    9cd2:	4b0a      	ldr	r3, [pc, #40]	; (9cfc <tc_pwm_interrupt_handler+0x68>)
    9cd4:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    9cd6:	687b      	ldr	r3, [r7, #4]
    9cd8:	685b      	ldr	r3, [r3, #4]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d003      	beq.n	9ce6 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    9cde:	687b      	ldr	r3, [r7, #4]
    9ce0:	685b      	ldr	r3, [r3, #4]
    9ce2:	6878      	ldr	r0, [r7, #4]
    9ce4:	4798      	blx	r3
		}
	}
}
    9ce6:	bf00      	nop
    9ce8:	3710      	adds	r7, #16
    9cea:	46bd      	mov	sp, r7
    9cec:	bd80      	pop	{r7, pc}
    9cee:	bf00      	nop
    9cf0:	000091f5 	.word	0x000091f5
    9cf4:	0000921d 	.word	0x0000921d
    9cf8:	0000926b 	.word	0x0000926b
    9cfc:	00009237 	.word	0x00009237

00009d00 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    9d00:	b580      	push	{r7, lr}
    9d02:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    9d04:	4b03      	ldr	r3, [pc, #12]	; (9d14 <TC0_Handler+0x14>)
    9d06:	681b      	ldr	r3, [r3, #0]
    9d08:	4618      	mov	r0, r3
    9d0a:	4b03      	ldr	r3, [pc, #12]	; (9d18 <TC0_Handler+0x18>)
    9d0c:	4798      	blx	r3
}
    9d0e:	bf00      	nop
    9d10:	bd80      	pop	{r7, pc}
    9d12:	bf00      	nop
    9d14:	20000e30 	.word	0x20000e30
    9d18:	00009c5d 	.word	0x00009c5d

00009d1c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9d1c:	b580      	push	{r7, lr}
    9d1e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9d20:	4b03      	ldr	r3, [pc, #12]	; (9d30 <TC2_Handler+0x14>)
    9d22:	681b      	ldr	r3, [r3, #0]
    9d24:	4618      	mov	r0, r3
    9d26:	4b03      	ldr	r3, [pc, #12]	; (9d34 <TC2_Handler+0x18>)
    9d28:	4798      	blx	r3
}
    9d2a:	bf00      	nop
    9d2c:	bd80      	pop	{r7, pc}
    9d2e:	bf00      	nop
    9d30:	20000e34 	.word	0x20000e34
    9d34:	00009c5d 	.word	0x00009c5d

00009d38 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    9d3c:	4b03      	ldr	r3, [pc, #12]	; (9d4c <TC4_Handler+0x14>)
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	4618      	mov	r0, r3
    9d42:	4b03      	ldr	r3, [pc, #12]	; (9d50 <TC4_Handler+0x18>)
    9d44:	4798      	blx	r3
}
    9d46:	bf00      	nop
    9d48:	bd80      	pop	{r7, pc}
    9d4a:	bf00      	nop
    9d4c:	20000e38 	.word	0x20000e38
    9d50:	00009c5d 	.word	0x00009c5d

00009d54 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    9d54:	b580      	push	{r7, lr}
    9d56:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    9d58:	4b03      	ldr	r3, [pc, #12]	; (9d68 <TC5_Handler+0x14>)
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	4618      	mov	r0, r3
    9d5e:	4b03      	ldr	r3, [pc, #12]	; (9d6c <TC5_Handler+0x18>)
    9d60:	4798      	blx	r3
}
    9d62:	bf00      	nop
    9d64:	bd80      	pop	{r7, pc}
    9d66:	bf00      	nop
    9d68:	20000e3c 	.word	0x20000e3c
    9d6c:	00009c5d 	.word	0x00009c5d

00009d70 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    9d70:	b580      	push	{r7, lr}
    9d72:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    9d74:	4b03      	ldr	r3, [pc, #12]	; (9d84 <TC6_Handler+0x14>)
    9d76:	681b      	ldr	r3, [r3, #0]
    9d78:	4618      	mov	r0, r3
    9d7a:	4b03      	ldr	r3, [pc, #12]	; (9d88 <TC6_Handler+0x18>)
    9d7c:	4798      	blx	r3
}
    9d7e:	bf00      	nop
    9d80:	bd80      	pop	{r7, pc}
    9d82:	bf00      	nop
    9d84:	20000e40 	.word	0x20000e40
    9d88:	00009c5d 	.word	0x00009c5d

00009d8c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    9d8c:	b580      	push	{r7, lr}
    9d8e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    9d90:	4b03      	ldr	r3, [pc, #12]	; (9da0 <TC7_Handler+0x14>)
    9d92:	681b      	ldr	r3, [r3, #0]
    9d94:	4618      	mov	r0, r3
    9d96:	4b03      	ldr	r3, [pc, #12]	; (9da4 <TC7_Handler+0x18>)
    9d98:	4798      	blx	r3
}
    9d9a:	bf00      	nop
    9d9c:	bd80      	pop	{r7, pc}
    9d9e:	bf00      	nop
    9da0:	20000e44 	.word	0x20000e44
    9da4:	00009c95 	.word	0x00009c95

00009da8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b084      	sub	sp, #16
    9dac:	af00      	add	r7, sp, #0
    9dae:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    9db0:	6878      	ldr	r0, [r7, #4]
    9db2:	4b13      	ldr	r3, [pc, #76]	; (9e00 <get_tc_index+0x58>)
    9db4:	4798      	blx	r3
    9db6:	4603      	mov	r3, r0
    9db8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9dba:	2300      	movs	r3, #0
    9dbc:	73fb      	strb	r3, [r7, #15]
    9dbe:	e010      	b.n	9de2 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    9dc0:	7bfa      	ldrb	r2, [r7, #15]
    9dc2:	4910      	ldr	r1, [pc, #64]	; (9e04 <get_tc_index+0x5c>)
    9dc4:	4613      	mov	r3, r2
    9dc6:	009b      	lsls	r3, r3, #2
    9dc8:	4413      	add	r3, r2
    9dca:	009b      	lsls	r3, r3, #2
    9dcc:	440b      	add	r3, r1
    9dce:	781b      	ldrb	r3, [r3, #0]
    9dd0:	7bba      	ldrb	r2, [r7, #14]
    9dd2:	429a      	cmp	r2, r3
    9dd4:	d102      	bne.n	9ddc <get_tc_index+0x34>
			return i;
    9dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9dda:	e00d      	b.n	9df8 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9ddc:	7bfb      	ldrb	r3, [r7, #15]
    9dde:	3301      	adds	r3, #1
    9de0:	73fb      	strb	r3, [r7, #15]
    9de2:	7bfb      	ldrb	r3, [r7, #15]
    9de4:	2b05      	cmp	r3, #5
    9de6:	d9eb      	bls.n	9dc0 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9de8:	f240 221d 	movw	r2, #541	; 0x21d
    9dec:	4906      	ldr	r1, [pc, #24]	; (9e08 <get_tc_index+0x60>)
    9dee:	2000      	movs	r0, #0
    9df0:	4b06      	ldr	r3, [pc, #24]	; (9e0c <get_tc_index+0x64>)
    9df2:	4798      	blx	r3
	return -1;
    9df4:	f04f 33ff 	mov.w	r3, #4294967295
}
    9df8:	4618      	mov	r0, r3
    9dfa:	3710      	adds	r7, #16
    9dfc:	46bd      	mov	sp, r7
    9dfe:	bd80      	pop	{r7, pc}
    9e00:	00009ead 	.word	0x00009ead
    9e04:	20000110 	.word	0x20000110
    9e08:	00011460 	.word	0x00011460
    9e0c:	00005239 	.word	0x00005239

00009e10 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    9e10:	b480      	push	{r7}
    9e12:	b083      	sub	sp, #12
    9e14:	af00      	add	r7, sp, #0
    9e16:	6078      	str	r0, [r7, #4]
    9e18:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9e1a:	687b      	ldr	r3, [r7, #4]
    9e1c:	4a17      	ldr	r2, [pc, #92]	; (9e7c <_tc_init_irq_param+0x6c>)
    9e1e:	4293      	cmp	r3, r2
    9e20:	d102      	bne.n	9e28 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    9e22:	4a17      	ldr	r2, [pc, #92]	; (9e80 <_tc_init_irq_param+0x70>)
    9e24:	683b      	ldr	r3, [r7, #0]
    9e26:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	4a16      	ldr	r2, [pc, #88]	; (9e84 <_tc_init_irq_param+0x74>)
    9e2c:	4293      	cmp	r3, r2
    9e2e:	d102      	bne.n	9e36 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    9e30:	4a15      	ldr	r2, [pc, #84]	; (9e88 <_tc_init_irq_param+0x78>)
    9e32:	683b      	ldr	r3, [r7, #0]
    9e34:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	4a14      	ldr	r2, [pc, #80]	; (9e8c <_tc_init_irq_param+0x7c>)
    9e3a:	4293      	cmp	r3, r2
    9e3c:	d102      	bne.n	9e44 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    9e3e:	4a14      	ldr	r2, [pc, #80]	; (9e90 <_tc_init_irq_param+0x80>)
    9e40:	683b      	ldr	r3, [r7, #0]
    9e42:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    9e44:	687b      	ldr	r3, [r7, #4]
    9e46:	4a13      	ldr	r2, [pc, #76]	; (9e94 <_tc_init_irq_param+0x84>)
    9e48:	4293      	cmp	r3, r2
    9e4a:	d102      	bne.n	9e52 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    9e4c:	4a12      	ldr	r2, [pc, #72]	; (9e98 <_tc_init_irq_param+0x88>)
    9e4e:	683b      	ldr	r3, [r7, #0]
    9e50:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	4a11      	ldr	r2, [pc, #68]	; (9e9c <_tc_init_irq_param+0x8c>)
    9e56:	4293      	cmp	r3, r2
    9e58:	d102      	bne.n	9e60 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    9e5a:	4a11      	ldr	r2, [pc, #68]	; (9ea0 <_tc_init_irq_param+0x90>)
    9e5c:	683b      	ldr	r3, [r7, #0]
    9e5e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	4a10      	ldr	r2, [pc, #64]	; (9ea4 <_tc_init_irq_param+0x94>)
    9e64:	4293      	cmp	r3, r2
    9e66:	d102      	bne.n	9e6e <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    9e68:	4a0f      	ldr	r2, [pc, #60]	; (9ea8 <_tc_init_irq_param+0x98>)
    9e6a:	683b      	ldr	r3, [r7, #0]
    9e6c:	6013      	str	r3, [r2, #0]
	}
}
    9e6e:	bf00      	nop
    9e70:	370c      	adds	r7, #12
    9e72:	46bd      	mov	sp, r7
    9e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e78:	4770      	bx	lr
    9e7a:	bf00      	nop
    9e7c:	40003800 	.word	0x40003800
    9e80:	20000e30 	.word	0x20000e30
    9e84:	4101a000 	.word	0x4101a000
    9e88:	20000e34 	.word	0x20000e34
    9e8c:	42001400 	.word	0x42001400
    9e90:	20000e38 	.word	0x20000e38
    9e94:	42001800 	.word	0x42001800
    9e98:	20000e3c 	.word	0x20000e3c
    9e9c:	43001400 	.word	0x43001400
    9ea0:	20000e40 	.word	0x20000e40
    9ea4:	43001800 	.word	0x43001800
    9ea8:	20000e44 	.word	0x20000e44

00009eac <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    9eac:	b4b0      	push	{r4, r5, r7}
    9eae:	b08d      	sub	sp, #52	; 0x34
    9eb0:	af00      	add	r7, sp, #0
    9eb2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    9eb4:	4b13      	ldr	r3, [pc, #76]	; (9f04 <_get_hardware_offset+0x58>)
    9eb6:	f107 040c 	add.w	r4, r7, #12
    9eba:	461d      	mov	r5, r3
    9ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9ec0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9ec8:	2300      	movs	r3, #0
    9eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    9ecc:	e010      	b.n	9ef0 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ed0:	009b      	lsls	r3, r3, #2
    9ed2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9ed6:	4413      	add	r3, r2
    9ed8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9edc:	461a      	mov	r2, r3
    9ede:	687b      	ldr	r3, [r7, #4]
    9ee0:	429a      	cmp	r2, r3
    9ee2:	d102      	bne.n	9eea <_get_hardware_offset+0x3e>
			return i;
    9ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ee6:	b2db      	uxtb	r3, r3
    9ee8:	e006      	b.n	9ef8 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9eec:	3301      	adds	r3, #1
    9eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    9ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ef2:	2b07      	cmp	r3, #7
    9ef4:	d9eb      	bls.n	9ece <_get_hardware_offset+0x22>
		}
	}
	return 0;
    9ef6:	2300      	movs	r3, #0
}
    9ef8:	4618      	mov	r0, r3
    9efa:	3734      	adds	r7, #52	; 0x34
    9efc:	46bd      	mov	sp, r7
    9efe:	bcb0      	pop	{r4, r5, r7}
    9f00:	4770      	bx	lr
    9f02:	bf00      	nop
    9f04:	00011474 	.word	0x00011474

00009f08 <__NVIC_EnableIRQ>:
{
    9f08:	b480      	push	{r7}
    9f0a:	b083      	sub	sp, #12
    9f0c:	af00      	add	r7, sp, #0
    9f0e:	4603      	mov	r3, r0
    9f10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9f16:	2b00      	cmp	r3, #0
    9f18:	db0b      	blt.n	9f32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9f1a:	4909      	ldr	r1, [pc, #36]	; (9f40 <__NVIC_EnableIRQ+0x38>)
    9f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9f20:	095b      	lsrs	r3, r3, #5
    9f22:	88fa      	ldrh	r2, [r7, #6]
    9f24:	f002 021f 	and.w	r2, r2, #31
    9f28:	2001      	movs	r0, #1
    9f2a:	fa00 f202 	lsl.w	r2, r0, r2
    9f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f32:	bf00      	nop
    9f34:	370c      	adds	r7, #12
    9f36:	46bd      	mov	sp, r7
    9f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f3c:	4770      	bx	lr
    9f3e:	bf00      	nop
    9f40:	e000e100 	.word	0xe000e100

00009f44 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    9f44:	b480      	push	{r7}
    9f46:	b087      	sub	sp, #28
    9f48:	af00      	add	r7, sp, #0
    9f4a:	60f8      	str	r0, [r7, #12]
    9f4c:	460b      	mov	r3, r1
    9f4e:	607a      	str	r2, [r7, #4]
    9f50:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    9f52:	7afa      	ldrb	r2, [r7, #11]
    9f54:	68f9      	ldr	r1, [r7, #12]
    9f56:	4613      	mov	r3, r2
    9f58:	009b      	lsls	r3, r3, #2
    9f5a:	4413      	add	r3, r2
    9f5c:	009b      	lsls	r3, r3, #2
    9f5e:	440b      	add	r3, r1
    9f60:	3340      	adds	r3, #64	; 0x40
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    9f66:	697a      	ldr	r2, [r7, #20]
    9f68:	687b      	ldr	r3, [r7, #4]
    9f6a:	4013      	ands	r3, r2
    9f6c:	617b      	str	r3, [r7, #20]
	return tmp;
    9f6e:	697b      	ldr	r3, [r7, #20]
}
    9f70:	4618      	mov	r0, r3
    9f72:	371c      	adds	r7, #28
    9f74:	46bd      	mov	sp, r7
    9f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f7a:	4770      	bx	lr

00009f7c <hri_oscctrl_get_STATUS_reg>:
{
    9f7c:	b480      	push	{r7}
    9f7e:	b085      	sub	sp, #20
    9f80:	af00      	add	r7, sp, #0
    9f82:	6078      	str	r0, [r7, #4]
    9f84:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	691b      	ldr	r3, [r3, #16]
    9f8a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9f8c:	68fa      	ldr	r2, [r7, #12]
    9f8e:	683b      	ldr	r3, [r7, #0]
    9f90:	4013      	ands	r3, r2
    9f92:	60fb      	str	r3, [r7, #12]
	return tmp;
    9f94:	68fb      	ldr	r3, [r7, #12]
}
    9f96:	4618      	mov	r0, r3
    9f98:	3714      	adds	r7, #20
    9f9a:	46bd      	mov	sp, r7
    9f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fa0:	4770      	bx	lr

00009fa2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    9fa2:	b480      	push	{r7}
    9fa4:	b085      	sub	sp, #20
    9fa6:	af00      	add	r7, sp, #0
    9fa8:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	f893 3020 	ldrb.w	r3, [r3, #32]
    9fb0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9fb2:	7bfb      	ldrb	r3, [r7, #15]
    9fb4:	f003 0301 	and.w	r3, r3, #1
    9fb8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9fba:	7bfb      	ldrb	r3, [r7, #15]
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	bf14      	ite	ne
    9fc0:	2301      	movne	r3, #1
    9fc2:	2300      	moveq	r3, #0
    9fc4:	b2db      	uxtb	r3, r3
}
    9fc6:	4618      	mov	r0, r3
    9fc8:	3714      	adds	r7, #20
    9fca:	46bd      	mov	sp, r7
    9fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fd0:	4770      	bx	lr

00009fd2 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9fd2:	b480      	push	{r7}
    9fd4:	b083      	sub	sp, #12
    9fd6:	af00      	add	r7, sp, #0
    9fd8:	6078      	str	r0, [r7, #4]
    9fda:	460b      	mov	r3, r1
    9fdc:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9fde:	bf00      	nop
    9fe0:	687b      	ldr	r3, [r7, #4]
    9fe2:	789b      	ldrb	r3, [r3, #2]
    9fe4:	b2da      	uxtb	r2, r3
    9fe6:	78fb      	ldrb	r3, [r7, #3]
    9fe8:	4013      	ands	r3, r2
    9fea:	b2db      	uxtb	r3, r3
    9fec:	2b00      	cmp	r3, #0
    9fee:	d1f7      	bne.n	9fe0 <hri_usb_wait_for_sync+0xe>
	};
}
    9ff0:	bf00      	nop
    9ff2:	370c      	adds	r7, #12
    9ff4:	46bd      	mov	sp, r7
    9ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ffa:	4770      	bx	lr

00009ffc <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9ffc:	b480      	push	{r7}
    9ffe:	b083      	sub	sp, #12
    a000:	af00      	add	r7, sp, #0
    a002:	6078      	str	r0, [r7, #4]
    a004:	460b      	mov	r3, r1
    a006:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a008:	687b      	ldr	r3, [r7, #4]
    a00a:	789b      	ldrb	r3, [r3, #2]
    a00c:	b2da      	uxtb	r2, r3
    a00e:	78fb      	ldrb	r3, [r7, #3]
    a010:	4013      	ands	r3, r2
    a012:	b2db      	uxtb	r3, r3
    a014:	2b00      	cmp	r3, #0
    a016:	bf14      	ite	ne
    a018:	2301      	movne	r3, #1
    a01a:	2300      	moveq	r3, #0
    a01c:	b2db      	uxtb	r3, r3
}
    a01e:	4618      	mov	r0, r3
    a020:	370c      	adds	r7, #12
    a022:	46bd      	mov	sp, r7
    a024:	f85d 7b04 	ldr.w	r7, [sp], #4
    a028:	4770      	bx	lr

0000a02a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a02a:	b480      	push	{r7}
    a02c:	b085      	sub	sp, #20
    a02e:	af00      	add	r7, sp, #0
    a030:	6078      	str	r0, [r7, #4]
    a032:	460b      	mov	r3, r1
    a034:	70fb      	strb	r3, [r7, #3]
    a036:	4613      	mov	r3, r2
    a038:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a03a:	78fb      	ldrb	r3, [r7, #3]
    a03c:	687a      	ldr	r2, [r7, #4]
    a03e:	3308      	adds	r3, #8
    a040:	015b      	lsls	r3, r3, #5
    a042:	4413      	add	r3, r2
    a044:	3307      	adds	r3, #7
    a046:	781b      	ldrb	r3, [r3, #0]
    a048:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a04a:	7bfa      	ldrb	r2, [r7, #15]
    a04c:	78bb      	ldrb	r3, [r7, #2]
    a04e:	4013      	ands	r3, r2
    a050:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a052:	7bfb      	ldrb	r3, [r7, #15]
}
    a054:	4618      	mov	r0, r3
    a056:	3714      	adds	r7, #20
    a058:	46bd      	mov	sp, r7
    a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a05e:	4770      	bx	lr

0000a060 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a060:	b480      	push	{r7}
    a062:	b083      	sub	sp, #12
    a064:	af00      	add	r7, sp, #0
    a066:	6078      	str	r0, [r7, #4]
    a068:	460b      	mov	r3, r1
    a06a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a06c:	78fb      	ldrb	r3, [r7, #3]
    a06e:	687a      	ldr	r2, [r7, #4]
    a070:	3308      	adds	r3, #8
    a072:	015b      	lsls	r3, r3, #5
    a074:	4413      	add	r3, r2
    a076:	3307      	adds	r3, #7
    a078:	781b      	ldrb	r3, [r3, #0]
    a07a:	b2db      	uxtb	r3, r3
}
    a07c:	4618      	mov	r0, r3
    a07e:	370c      	adds	r7, #12
    a080:	46bd      	mov	sp, r7
    a082:	f85d 7b04 	ldr.w	r7, [sp], #4
    a086:	4770      	bx	lr

0000a088 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a088:	b480      	push	{r7}
    a08a:	b083      	sub	sp, #12
    a08c:	af00      	add	r7, sp, #0
    a08e:	6078      	str	r0, [r7, #4]
    a090:	460b      	mov	r3, r1
    a092:	70fb      	strb	r3, [r7, #3]
    a094:	4613      	mov	r3, r2
    a096:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a098:	78fb      	ldrb	r3, [r7, #3]
    a09a:	687a      	ldr	r2, [r7, #4]
    a09c:	3308      	adds	r3, #8
    a09e:	015b      	lsls	r3, r3, #5
    a0a0:	4413      	add	r3, r2
    a0a2:	3307      	adds	r3, #7
    a0a4:	78ba      	ldrb	r2, [r7, #2]
    a0a6:	701a      	strb	r2, [r3, #0]
}
    a0a8:	bf00      	nop
    a0aa:	370c      	adds	r7, #12
    a0ac:	46bd      	mov	sp, r7
    a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0b2:	4770      	bx	lr

0000a0b4 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a0b4:	b480      	push	{r7}
    a0b6:	b083      	sub	sp, #12
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	6078      	str	r0, [r7, #4]
    a0bc:	460b      	mov	r3, r1
    a0be:	70fb      	strb	r3, [r7, #3]
    a0c0:	4613      	mov	r3, r2
    a0c2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a0c4:	78fb      	ldrb	r3, [r7, #3]
    a0c6:	687a      	ldr	r2, [r7, #4]
    a0c8:	3308      	adds	r3, #8
    a0ca:	015b      	lsls	r3, r3, #5
    a0cc:	4413      	add	r3, r2
    a0ce:	3305      	adds	r3, #5
    a0d0:	78ba      	ldrb	r2, [r7, #2]
    a0d2:	701a      	strb	r2, [r3, #0]
}
    a0d4:	bf00      	nop
    a0d6:	370c      	adds	r7, #12
    a0d8:	46bd      	mov	sp, r7
    a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0de:	4770      	bx	lr

0000a0e0 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a0e0:	b480      	push	{r7}
    a0e2:	b083      	sub	sp, #12
    a0e4:	af00      	add	r7, sp, #0
    a0e6:	6078      	str	r0, [r7, #4]
    a0e8:	460b      	mov	r3, r1
    a0ea:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a0ec:	78fb      	ldrb	r3, [r7, #3]
    a0ee:	687a      	ldr	r2, [r7, #4]
    a0f0:	3308      	adds	r3, #8
    a0f2:	015b      	lsls	r3, r3, #5
    a0f4:	4413      	add	r3, r2
    a0f6:	3306      	adds	r3, #6
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	b2db      	uxtb	r3, r3
}
    a0fc:	4618      	mov	r0, r3
    a0fe:	370c      	adds	r7, #12
    a100:	46bd      	mov	sp, r7
    a102:	f85d 7b04 	ldr.w	r7, [sp], #4
    a106:	4770      	bx	lr

0000a108 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a108:	b480      	push	{r7}
    a10a:	b083      	sub	sp, #12
    a10c:	af00      	add	r7, sp, #0
    a10e:	6078      	str	r0, [r7, #4]
    a110:	460b      	mov	r3, r1
    a112:	70fb      	strb	r3, [r7, #3]
    a114:	4613      	mov	r3, r2
    a116:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a118:	78fb      	ldrb	r3, [r7, #3]
    a11a:	687a      	ldr	r2, [r7, #4]
    a11c:	3308      	adds	r3, #8
    a11e:	015b      	lsls	r3, r3, #5
    a120:	4413      	add	r3, r2
    a122:	3304      	adds	r3, #4
    a124:	78ba      	ldrb	r2, [r7, #2]
    a126:	701a      	strb	r2, [r3, #0]
}
    a128:	bf00      	nop
    a12a:	370c      	adds	r7, #12
    a12c:	46bd      	mov	sp, r7
    a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a132:	4770      	bx	lr

0000a134 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a134:	b480      	push	{r7}
    a136:	b083      	sub	sp, #12
    a138:	af00      	add	r7, sp, #0
    a13a:	6078      	str	r0, [r7, #4]
    a13c:	460b      	mov	r3, r1
    a13e:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a140:	78fb      	ldrb	r3, [r7, #3]
    a142:	687a      	ldr	r2, [r7, #4]
    a144:	015b      	lsls	r3, r3, #5
    a146:	4413      	add	r3, r2
    a148:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a14c:	2210      	movs	r2, #16
    a14e:	701a      	strb	r2, [r3, #0]
}
    a150:	bf00      	nop
    a152:	370c      	adds	r7, #12
    a154:	46bd      	mov	sp, r7
    a156:	f85d 7b04 	ldr.w	r7, [sp], #4
    a15a:	4770      	bx	lr

0000a15c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a15c:	b480      	push	{r7}
    a15e:	b083      	sub	sp, #12
    a160:	af00      	add	r7, sp, #0
    a162:	6078      	str	r0, [r7, #4]
    a164:	460b      	mov	r3, r1
    a166:	70fb      	strb	r3, [r7, #3]
    a168:	4613      	mov	r3, r2
    a16a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a16c:	78fb      	ldrb	r3, [r7, #3]
    a16e:	687a      	ldr	r2, [r7, #4]
    a170:	015b      	lsls	r3, r3, #5
    a172:	4413      	add	r3, r2
    a174:	f203 1309 	addw	r3, r3, #265	; 0x109
    a178:	78ba      	ldrb	r2, [r7, #2]
    a17a:	701a      	strb	r2, [r3, #0]
}
    a17c:	bf00      	nop
    a17e:	370c      	adds	r7, #12
    a180:	46bd      	mov	sp, r7
    a182:	f85d 7b04 	ldr.w	r7, [sp], #4
    a186:	4770      	bx	lr

0000a188 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a188:	b480      	push	{r7}
    a18a:	b083      	sub	sp, #12
    a18c:	af00      	add	r7, sp, #0
    a18e:	6078      	str	r0, [r7, #4]
    a190:	460b      	mov	r3, r1
    a192:	70fb      	strb	r3, [r7, #3]
    a194:	4613      	mov	r3, r2
    a196:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a198:	78fb      	ldrb	r3, [r7, #3]
    a19a:	687a      	ldr	r2, [r7, #4]
    a19c:	015b      	lsls	r3, r3, #5
    a19e:	4413      	add	r3, r2
    a1a0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a1a4:	78ba      	ldrb	r2, [r7, #2]
    a1a6:	701a      	strb	r2, [r3, #0]
}
    a1a8:	bf00      	nop
    a1aa:	370c      	adds	r7, #12
    a1ac:	46bd      	mov	sp, r7
    a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1b2:	4770      	bx	lr

0000a1b4 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a1b4:	b480      	push	{r7}
    a1b6:	b085      	sub	sp, #20
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	6078      	str	r0, [r7, #4]
    a1bc:	460b      	mov	r3, r1
    a1be:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a1c0:	78fb      	ldrb	r3, [r7, #3]
    a1c2:	687a      	ldr	r2, [r7, #4]
    a1c4:	3308      	adds	r3, #8
    a1c6:	015b      	lsls	r3, r3, #5
    a1c8:	4413      	add	r3, r2
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a1ce:	7bfb      	ldrb	r3, [r7, #15]
    a1d0:	f003 0307 	and.w	r3, r3, #7
    a1d4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a1d6:	7bfb      	ldrb	r3, [r7, #15]
}
    a1d8:	4618      	mov	r0, r3
    a1da:	3714      	adds	r7, #20
    a1dc:	46bd      	mov	sp, r7
    a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1e2:	4770      	bx	lr

0000a1e4 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a1e4:	b480      	push	{r7}
    a1e6:	b085      	sub	sp, #20
    a1e8:	af00      	add	r7, sp, #0
    a1ea:	6078      	str	r0, [r7, #4]
    a1ec:	460b      	mov	r3, r1
    a1ee:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a1f0:	78fb      	ldrb	r3, [r7, #3]
    a1f2:	687a      	ldr	r2, [r7, #4]
    a1f4:	3308      	adds	r3, #8
    a1f6:	015b      	lsls	r3, r3, #5
    a1f8:	4413      	add	r3, r2
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a1fe:	7bfb      	ldrb	r3, [r7, #15]
    a200:	091b      	lsrs	r3, r3, #4
    a202:	b2db      	uxtb	r3, r3
    a204:	f003 0307 	and.w	r3, r3, #7
    a208:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a20a:	7bfb      	ldrb	r3, [r7, #15]
}
    a20c:	4618      	mov	r0, r3
    a20e:	3714      	adds	r7, #20
    a210:	46bd      	mov	sp, r7
    a212:	f85d 7b04 	ldr.w	r7, [sp], #4
    a216:	4770      	bx	lr

0000a218 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a218:	b480      	push	{r7}
    a21a:	b083      	sub	sp, #12
    a21c:	af00      	add	r7, sp, #0
    a21e:	6078      	str	r0, [r7, #4]
    a220:	460b      	mov	r3, r1
    a222:	70fb      	strb	r3, [r7, #3]
    a224:	4613      	mov	r3, r2
    a226:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a228:	78fb      	ldrb	r3, [r7, #3]
    a22a:	687a      	ldr	r2, [r7, #4]
    a22c:	3308      	adds	r3, #8
    a22e:	015b      	lsls	r3, r3, #5
    a230:	4413      	add	r3, r2
    a232:	78ba      	ldrb	r2, [r7, #2]
    a234:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a236:	bf00      	nop
    a238:	370c      	adds	r7, #12
    a23a:	46bd      	mov	sp, r7
    a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a240:	4770      	bx	lr

0000a242 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a242:	b480      	push	{r7}
    a244:	b083      	sub	sp, #12
    a246:	af00      	add	r7, sp, #0
    a248:	6078      	str	r0, [r7, #4]
    a24a:	460b      	mov	r3, r1
    a24c:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a24e:	78fb      	ldrb	r3, [r7, #3]
    a250:	687a      	ldr	r2, [r7, #4]
    a252:	3308      	adds	r3, #8
    a254:	015b      	lsls	r3, r3, #5
    a256:	4413      	add	r3, r2
    a258:	781b      	ldrb	r3, [r3, #0]
    a25a:	b2db      	uxtb	r3, r3
}
    a25c:	4618      	mov	r0, r3
    a25e:	370c      	adds	r7, #12
    a260:	46bd      	mov	sp, r7
    a262:	f85d 7b04 	ldr.w	r7, [sp], #4
    a266:	4770      	bx	lr

0000a268 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a268:	b480      	push	{r7}
    a26a:	b083      	sub	sp, #12
    a26c:	af00      	add	r7, sp, #0
    a26e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a270:	687b      	ldr	r3, [r7, #4]
    a272:	8b9b      	ldrh	r3, [r3, #28]
    a274:	b29b      	uxth	r3, r3
}
    a276:	4618      	mov	r0, r3
    a278:	370c      	adds	r7, #12
    a27a:	46bd      	mov	sp, r7
    a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a280:	4770      	bx	lr

0000a282 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a282:	b480      	push	{r7}
    a284:	b083      	sub	sp, #12
    a286:	af00      	add	r7, sp, #0
    a288:	6078      	str	r0, [r7, #4]
    a28a:	460b      	mov	r3, r1
    a28c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a28e:	687b      	ldr	r3, [r7, #4]
    a290:	887a      	ldrh	r2, [r7, #2]
    a292:	839a      	strh	r2, [r3, #28]
}
    a294:	bf00      	nop
    a296:	370c      	adds	r7, #12
    a298:	46bd      	mov	sp, r7
    a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a29e:	4770      	bx	lr

0000a2a0 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a2a0:	b480      	push	{r7}
    a2a2:	b083      	sub	sp, #12
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	6078      	str	r0, [r7, #4]
    a2a8:	460b      	mov	r3, r1
    a2aa:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a2ac:	687b      	ldr	r3, [r7, #4]
    a2ae:	887a      	ldrh	r2, [r7, #2]
    a2b0:	831a      	strh	r2, [r3, #24]
}
    a2b2:	bf00      	nop
    a2b4:	370c      	adds	r7, #12
    a2b6:	46bd      	mov	sp, r7
    a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2bc:	4770      	bx	lr

0000a2be <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a2be:	b480      	push	{r7}
    a2c0:	b083      	sub	sp, #12
    a2c2:	af00      	add	r7, sp, #0
    a2c4:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	8b1b      	ldrh	r3, [r3, #24]
    a2ca:	b29b      	uxth	r3, r3
}
    a2cc:	4618      	mov	r0, r3
    a2ce:	370c      	adds	r7, #12
    a2d0:	46bd      	mov	sp, r7
    a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2d6:	4770      	bx	lr

0000a2d8 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a2d8:	b480      	push	{r7}
    a2da:	b083      	sub	sp, #12
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
    a2e0:	460b      	mov	r3, r1
    a2e2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a2e4:	687b      	ldr	r3, [r7, #4]
    a2e6:	887a      	ldrh	r2, [r7, #2]
    a2e8:	829a      	strh	r2, [r3, #20]
}
    a2ea:	bf00      	nop
    a2ec:	370c      	adds	r7, #12
    a2ee:	46bd      	mov	sp, r7
    a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2f4:	4770      	bx	lr

0000a2f6 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a2f6:	b480      	push	{r7}
    a2f8:	b085      	sub	sp, #20
    a2fa:	af00      	add	r7, sp, #0
    a2fc:	6078      	str	r0, [r7, #4]
    a2fe:	460b      	mov	r3, r1
    a300:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a302:	687b      	ldr	r3, [r7, #4]
    a304:	789b      	ldrb	r3, [r3, #2]
    a306:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a308:	7bfa      	ldrb	r2, [r7, #15]
    a30a:	78fb      	ldrb	r3, [r7, #3]
    a30c:	4013      	ands	r3, r2
    a30e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a310:	7bfb      	ldrb	r3, [r7, #15]
}
    a312:	4618      	mov	r0, r3
    a314:	3714      	adds	r7, #20
    a316:	46bd      	mov	sp, r7
    a318:	f85d 7b04 	ldr.w	r7, [sp], #4
    a31c:	4770      	bx	lr
	...

0000a320 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a320:	b580      	push	{r7, lr}
    a322:	b082      	sub	sp, #8
    a324:	af00      	add	r7, sp, #0
    a326:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a328:	687b      	ldr	r3, [r7, #4]
    a32a:	781b      	ldrb	r3, [r3, #0]
    a32c:	b2db      	uxtb	r3, r3
    a32e:	f023 0302 	bic.w	r3, r3, #2
    a332:	b2da      	uxtb	r2, r3
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a338:	2103      	movs	r1, #3
    a33a:	6878      	ldr	r0, [r7, #4]
    a33c:	4b02      	ldr	r3, [pc, #8]	; (a348 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a33e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a340:	bf00      	nop
    a342:	3708      	adds	r7, #8
    a344:	46bd      	mov	sp, r7
    a346:	bd80      	pop	{r7, pc}
    a348:	00009fd3 	.word	0x00009fd3

0000a34c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a34c:	b580      	push	{r7, lr}
    a34e:	b084      	sub	sp, #16
    a350:	af00      	add	r7, sp, #0
    a352:	6078      	str	r0, [r7, #4]
    a354:	460b      	mov	r3, r1
    a356:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a358:	2103      	movs	r1, #3
    a35a:	6878      	ldr	r0, [r7, #4]
    a35c:	4b06      	ldr	r3, [pc, #24]	; (a378 <hri_usb_get_CTRLA_reg+0x2c>)
    a35e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a366:	7bfa      	ldrb	r2, [r7, #15]
    a368:	78fb      	ldrb	r3, [r7, #3]
    a36a:	4013      	ands	r3, r2
    a36c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a36e:	7bfb      	ldrb	r3, [r7, #15]
}
    a370:	4618      	mov	r0, r3
    a372:	3710      	adds	r7, #16
    a374:	46bd      	mov	sp, r7
    a376:	bd80      	pop	{r7, pc}
    a378:	00009fd3 	.word	0x00009fd3

0000a37c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a37c:	b580      	push	{r7, lr}
    a37e:	b082      	sub	sp, #8
    a380:	af00      	add	r7, sp, #0
    a382:	6078      	str	r0, [r7, #4]
    a384:	460b      	mov	r3, r1
    a386:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	78fa      	ldrb	r2, [r7, #3]
    a38c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a38e:	2103      	movs	r1, #3
    a390:	6878      	ldr	r0, [r7, #4]
    a392:	4b03      	ldr	r3, [pc, #12]	; (a3a0 <hri_usb_write_CTRLA_reg+0x24>)
    a394:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a396:	bf00      	nop
    a398:	3708      	adds	r7, #8
    a39a:	46bd      	mov	sp, r7
    a39c:	bd80      	pop	{r7, pc}
    a39e:	bf00      	nop
    a3a0:	00009fd3 	.word	0x00009fd3

0000a3a4 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a3a4:	b580      	push	{r7, lr}
    a3a6:	b082      	sub	sp, #8
    a3a8:	af00      	add	r7, sp, #0
    a3aa:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a3ac:	2103      	movs	r1, #3
    a3ae:	6878      	ldr	r0, [r7, #4]
    a3b0:	4b04      	ldr	r3, [pc, #16]	; (a3c4 <hri_usb_read_CTRLA_reg+0x20>)
    a3b2:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a3b4:	687b      	ldr	r3, [r7, #4]
    a3b6:	781b      	ldrb	r3, [r3, #0]
    a3b8:	b2db      	uxtb	r3, r3
}
    a3ba:	4618      	mov	r0, r3
    a3bc:	3708      	adds	r7, #8
    a3be:	46bd      	mov	sp, r7
    a3c0:	bd80      	pop	{r7, pc}
    a3c2:	bf00      	nop
    a3c4:	00009fd3 	.word	0x00009fd3

0000a3c8 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a3c8:	b480      	push	{r7}
    a3ca:	b083      	sub	sp, #12
    a3cc:	af00      	add	r7, sp, #0
    a3ce:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a3d0:	687b      	ldr	r3, [r7, #4]
    a3d2:	891b      	ldrh	r3, [r3, #8]
    a3d4:	b29b      	uxth	r3, r3
    a3d6:	f023 0301 	bic.w	r3, r3, #1
    a3da:	b29a      	uxth	r2, r3
    a3dc:	687b      	ldr	r3, [r7, #4]
    a3de:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a3e0:	bf00      	nop
    a3e2:	370c      	adds	r7, #12
    a3e4:	46bd      	mov	sp, r7
    a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ea:	4770      	bx	lr

0000a3ec <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a3ec:	b480      	push	{r7}
    a3ee:	b083      	sub	sp, #12
    a3f0:	af00      	add	r7, sp, #0
    a3f2:	6078      	str	r0, [r7, #4]
    a3f4:	460b      	mov	r3, r1
    a3f6:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	887a      	ldrh	r2, [r7, #2]
    a3fc:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a3fe:	bf00      	nop
    a400:	370c      	adds	r7, #12
    a402:	46bd      	mov	sp, r7
    a404:	f85d 7b04 	ldr.w	r7, [sp], #4
    a408:	4770      	bx	lr

0000a40a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a40a:	b480      	push	{r7}
    a40c:	b083      	sub	sp, #12
    a40e:	af00      	add	r7, sp, #0
    a410:	6078      	str	r0, [r7, #4]
    a412:	460b      	mov	r3, r1
    a414:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	78fa      	ldrb	r2, [r7, #3]
    a41a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a41c:	bf00      	nop
    a41e:	370c      	adds	r7, #12
    a420:	46bd      	mov	sp, r7
    a422:	f85d 7b04 	ldr.w	r7, [sp], #4
    a426:	4770      	bx	lr

0000a428 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a428:	b480      	push	{r7}
    a42a:	b083      	sub	sp, #12
    a42c:	af00      	add	r7, sp, #0
    a42e:	6078      	str	r0, [r7, #4]
    a430:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	683a      	ldr	r2, [r7, #0]
    a436:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a438:	bf00      	nop
    a43a:	370c      	adds	r7, #12
    a43c:	46bd      	mov	sp, r7
    a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a442:	4770      	bx	lr

0000a444 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a444:	b480      	push	{r7}
    a446:	b083      	sub	sp, #12
    a448:	af00      	add	r7, sp, #0
    a44a:	6078      	str	r0, [r7, #4]
    a44c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a44e:	2300      	movs	r3, #0
}
    a450:	4618      	mov	r0, r3
    a452:	370c      	adds	r7, #12
    a454:	46bd      	mov	sp, r7
    a456:	f85d 7b04 	ldr.w	r7, [sp], #4
    a45a:	4770      	bx	lr

0000a45c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a45c:	b480      	push	{r7}
    a45e:	b085      	sub	sp, #20
    a460:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a462:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a466:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a468:	4b28      	ldr	r3, [pc, #160]	; (a50c <_usb_load_calib+0xb0>)
    a46a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a46c:	f003 031f 	and.w	r3, r3, #31
    a470:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a472:	4b26      	ldr	r3, [pc, #152]	; (a50c <_usb_load_calib+0xb0>)
    a474:	681b      	ldr	r3, [r3, #0]
    a476:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a478:	f003 031f 	and.w	r3, r3, #31
    a47c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a47e:	4b23      	ldr	r3, [pc, #140]	; (a50c <_usb_load_calib+0xb0>)
    a480:	681b      	ldr	r3, [r3, #0]
    a482:	0a9b      	lsrs	r3, r3, #10
    a484:	f003 0307 	and.w	r3, r3, #7
    a488:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a48a:	68fb      	ldr	r3, [r7, #12]
    a48c:	2b00      	cmp	r3, #0
    a48e:	d002      	beq.n	a496 <_usb_load_calib+0x3a>
    a490:	68fb      	ldr	r3, [r7, #12]
    a492:	2b1f      	cmp	r3, #31
    a494:	d101      	bne.n	a49a <_usb_load_calib+0x3e>
		pad_transn = 9;
    a496:	2309      	movs	r3, #9
    a498:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a49a:	68bb      	ldr	r3, [r7, #8]
    a49c:	2b00      	cmp	r3, #0
    a49e:	d002      	beq.n	a4a6 <_usb_load_calib+0x4a>
    a4a0:	68bb      	ldr	r3, [r7, #8]
    a4a2:	2b1f      	cmp	r3, #31
    a4a4:	d101      	bne.n	a4aa <_usb_load_calib+0x4e>
		pad_transp = 25;
    a4a6:	2319      	movs	r3, #25
    a4a8:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	d002      	beq.n	a4b6 <_usb_load_calib+0x5a>
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	2b07      	cmp	r3, #7
    a4b4:	d101      	bne.n	a4ba <_usb_load_calib+0x5e>
		pad_trim = 6;
    a4b6:	2306      	movs	r3, #6
    a4b8:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a4ba:	68fb      	ldr	r3, [r7, #12]
    a4bc:	b29b      	uxth	r3, r3
    a4be:	019b      	lsls	r3, r3, #6
    a4c0:	b29b      	uxth	r3, r3
    a4c2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a4c6:	b29a      	uxth	r2, r3
    a4c8:	68bb      	ldr	r3, [r7, #8]
    a4ca:	b29b      	uxth	r3, r3
    a4cc:	f003 031f 	and.w	r3, r3, #31
    a4d0:	b29b      	uxth	r3, r3
    a4d2:	4313      	orrs	r3, r2
    a4d4:	b29a      	uxth	r2, r3
    a4d6:	687b      	ldr	r3, [r7, #4]
    a4d8:	b29b      	uxth	r3, r3
    a4da:	031b      	lsls	r3, r3, #12
    a4dc:	b29b      	uxth	r3, r3
    a4de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a4e2:	b29b      	uxth	r3, r3
    a4e4:	4313      	orrs	r3, r2
    a4e6:	b29a      	uxth	r2, r3
    a4e8:	683b      	ldr	r3, [r7, #0]
    a4ea:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a4ec:	683a      	ldr	r2, [r7, #0]
    a4ee:	78d3      	ldrb	r3, [r2, #3]
    a4f0:	f043 0303 	orr.w	r3, r3, #3
    a4f4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a4f6:	683a      	ldr	r2, [r7, #0]
    a4f8:	78d3      	ldrb	r3, [r2, #3]
    a4fa:	f043 030c 	orr.w	r3, r3, #12
    a4fe:	70d3      	strb	r3, [r2, #3]
}
    a500:	bf00      	nop
    a502:	3714      	adds	r7, #20
    a504:	46bd      	mov	sp, r7
    a506:	f85d 7b04 	ldr.w	r7, [sp], #4
    a50a:	4770      	bx	lr
    a50c:	00800084 	.word	0x00800084

0000a510 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a510:	b580      	push	{r7, lr}
    a512:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a514:	bf00      	nop
    a516:	2203      	movs	r2, #3
    a518:	2100      	movs	r1, #0
    a51a:	4804      	ldr	r0, [pc, #16]	; (a52c <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a51c:	4b04      	ldr	r3, [pc, #16]	; (a530 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a51e:	4798      	blx	r3
    a520:	4603      	mov	r3, r0
    a522:	2b03      	cmp	r3, #3
    a524:	d1f7      	bne.n	a516 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a526:	bf00      	nop
    a528:	bd80      	pop	{r7, pc}
    a52a:	bf00      	nop
    a52c:	40001000 	.word	0x40001000
    a530:	00009f45 	.word	0x00009f45

0000a534 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a534:	b580      	push	{r7, lr}
    a536:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a538:	480e      	ldr	r0, [pc, #56]	; (a574 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a53a:	4b0f      	ldr	r3, [pc, #60]	; (a578 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a53c:	4798      	blx	r3
    a53e:	4603      	mov	r3, r0
    a540:	2b00      	cmp	r3, #0
    a542:	d00a      	beq.n	a55a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a544:	bf00      	nop
    a546:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a54a:	480a      	ldr	r0, [pc, #40]	; (a574 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a54c:	4b0b      	ldr	r3, [pc, #44]	; (a57c <_usb_d_dev_wait_dfll_rdy+0x48>)
    a54e:	4798      	blx	r3
    a550:	4603      	mov	r3, r0
    a552:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a556:	d1f6      	bne.n	a546 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a558:	e009      	b.n	a56e <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a55a:	bf00      	nop
    a55c:	f44f 7180 	mov.w	r1, #256	; 0x100
    a560:	4804      	ldr	r0, [pc, #16]	; (a574 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a562:	4b06      	ldr	r3, [pc, #24]	; (a57c <_usb_d_dev_wait_dfll_rdy+0x48>)
    a564:	4798      	blx	r3
    a566:	4603      	mov	r3, r0
    a568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a56c:	d1f6      	bne.n	a55c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a56e:	bf00      	nop
    a570:	bd80      	pop	{r7, pc}
    a572:	bf00      	nop
    a574:	40001000 	.word	0x40001000
    a578:	00009fa3 	.word	0x00009fa3
    a57c:	00009f7d 	.word	0x00009f7d

0000a580 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a580:	b580      	push	{r7, lr}
    a582:	b082      	sub	sp, #8
    a584:	af00      	add	r7, sp, #0
    a586:	4603      	mov	r3, r0
    a588:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a58a:	79fb      	ldrb	r3, [r7, #7]
    a58c:	2b00      	cmp	r3, #0
    a58e:	d102      	bne.n	a596 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a590:	4b05      	ldr	r3, [pc, #20]	; (a5a8 <_usb_d_dev_wait_clk_rdy+0x28>)
    a592:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a594:	e004      	b.n	a5a0 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a596:	79fb      	ldrb	r3, [r7, #7]
    a598:	2b01      	cmp	r3, #1
    a59a:	d101      	bne.n	a5a0 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a59c:	4b03      	ldr	r3, [pc, #12]	; (a5ac <_usb_d_dev_wait_clk_rdy+0x2c>)
    a59e:	4798      	blx	r3
}
    a5a0:	bf00      	nop
    a5a2:	3708      	adds	r7, #8
    a5a4:	46bd      	mov	sp, r7
    a5a6:	bd80      	pop	{r7, pc}
    a5a8:	0000a535 	.word	0x0000a535
    a5ac:	0000a511 	.word	0x0000a511

0000a5b0 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b082      	sub	sp, #8
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	4603      	mov	r3, r0
    a5b8:	6039      	str	r1, [r7, #0]
    a5ba:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a5bc:	683b      	ldr	r3, [r7, #0]
    a5be:	b2da      	uxtb	r2, r3
    a5c0:	79fb      	ldrb	r3, [r7, #7]
    a5c2:	4619      	mov	r1, r3
    a5c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5c8:	4b02      	ldr	r3, [pc, #8]	; (a5d4 <_usbd_ep_int_ack+0x24>)
    a5ca:	4798      	blx	r3
}
    a5cc:	bf00      	nop
    a5ce:	3708      	adds	r7, #8
    a5d0:	46bd      	mov	sp, r7
    a5d2:	bd80      	pop	{r7, pc}
    a5d4:	0000a089 	.word	0x0000a089

0000a5d8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b082      	sub	sp, #8
    a5dc:	af00      	add	r7, sp, #0
    a5de:	4603      	mov	r3, r0
    a5e0:	6039      	str	r1, [r7, #0]
    a5e2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a5e4:	683b      	ldr	r3, [r7, #0]
    a5e6:	b2da      	uxtb	r2, r3
    a5e8:	79fb      	ldrb	r3, [r7, #7]
    a5ea:	4619      	mov	r1, r3
    a5ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5f0:	4b02      	ldr	r3, [pc, #8]	; (a5fc <_usbd_ep_int_en+0x24>)
    a5f2:	4798      	blx	r3
}
    a5f4:	bf00      	nop
    a5f6:	3708      	adds	r7, #8
    a5f8:	46bd      	mov	sp, r7
    a5fa:	bd80      	pop	{r7, pc}
    a5fc:	0000a15d 	.word	0x0000a15d

0000a600 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    a600:	b580      	push	{r7, lr}
    a602:	b082      	sub	sp, #8
    a604:	af00      	add	r7, sp, #0
    a606:	4603      	mov	r3, r0
    a608:	6039      	str	r1, [r7, #0]
    a60a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a60c:	683b      	ldr	r3, [r7, #0]
    a60e:	b2da      	uxtb	r2, r3
    a610:	79fb      	ldrb	r3, [r7, #7]
    a612:	4619      	mov	r1, r3
    a614:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a618:	4b02      	ldr	r3, [pc, #8]	; (a624 <_usbd_ep_int_dis+0x24>)
    a61a:	4798      	blx	r3
}
    a61c:	bf00      	nop
    a61e:	3708      	adds	r7, #8
    a620:	46bd      	mov	sp, r7
    a622:	bd80      	pop	{r7, pc}
    a624:	0000a189 	.word	0x0000a189

0000a628 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    a628:	b580      	push	{r7, lr}
    a62a:	b082      	sub	sp, #8
    a62c:	af00      	add	r7, sp, #0
    a62e:	4603      	mov	r3, r0
    a630:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    a632:	79fb      	ldrb	r3, [r7, #7]
    a634:	4619      	mov	r1, r3
    a636:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a63a:	4b06      	ldr	r3, [pc, #24]	; (a654 <_usbd_ep_is_ctrl+0x2c>)
    a63c:	4798      	blx	r3
    a63e:	4603      	mov	r3, r0
    a640:	2b11      	cmp	r3, #17
    a642:	bf0c      	ite	eq
    a644:	2301      	moveq	r3, #1
    a646:	2300      	movne	r3, #0
    a648:	b2db      	uxtb	r3, r3
}
    a64a:	4618      	mov	r0, r3
    a64c:	3708      	adds	r7, #8
    a64e:	46bd      	mov	sp, r7
    a650:	bd80      	pop	{r7, pc}
    a652:	bf00      	nop
    a654:	0000a243 	.word	0x0000a243

0000a658 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    a658:	b580      	push	{r7, lr}
    a65a:	b082      	sub	sp, #8
    a65c:	af00      	add	r7, sp, #0
    a65e:	4603      	mov	r3, r0
    a660:	71fb      	strb	r3, [r7, #7]
    a662:	460b      	mov	r3, r1
    a664:	71bb      	strb	r3, [r7, #6]
    a666:	4613      	mov	r3, r2
    a668:	717b      	strb	r3, [r7, #5]
	if (st) {
    a66a:	797b      	ldrb	r3, [r7, #5]
    a66c:	2b00      	cmp	r3, #0
    a66e:	d00b      	beq.n	a688 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a670:	79bb      	ldrb	r3, [r7, #6]
    a672:	2210      	movs	r2, #16
    a674:	fa02 f303 	lsl.w	r3, r2, r3
    a678:	b2da      	uxtb	r2, r3
    a67a:	79fb      	ldrb	r3, [r7, #7]
    a67c:	4619      	mov	r1, r3
    a67e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a682:	4b09      	ldr	r3, [pc, #36]	; (a6a8 <_usbd_ep_set_stall+0x50>)
    a684:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    a686:	e00a      	b.n	a69e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a688:	79bb      	ldrb	r3, [r7, #6]
    a68a:	2210      	movs	r2, #16
    a68c:	fa02 f303 	lsl.w	r3, r2, r3
    a690:	b2da      	uxtb	r2, r3
    a692:	79fb      	ldrb	r3, [r7, #7]
    a694:	4619      	mov	r1, r3
    a696:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a69a:	4b04      	ldr	r3, [pc, #16]	; (a6ac <_usbd_ep_set_stall+0x54>)
    a69c:	4798      	blx	r3
}
    a69e:	bf00      	nop
    a6a0:	3708      	adds	r7, #8
    a6a2:	46bd      	mov	sp, r7
    a6a4:	bd80      	pop	{r7, pc}
    a6a6:	bf00      	nop
    a6a8:	0000a0b5 	.word	0x0000a0b5
    a6ac:	0000a109 	.word	0x0000a109

0000a6b0 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    a6b0:	b580      	push	{r7, lr}
    a6b2:	b084      	sub	sp, #16
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	4603      	mov	r3, r0
    a6b8:	460a      	mov	r2, r1
    a6ba:	71fb      	strb	r3, [r7, #7]
    a6bc:	4613      	mov	r3, r2
    a6be:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a6c0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6c4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a6c6:	79fb      	ldrb	r3, [r7, #7]
    a6c8:	4619      	mov	r1, r3
    a6ca:	68f8      	ldr	r0, [r7, #12]
    a6cc:	4b08      	ldr	r3, [pc, #32]	; (a6f0 <_usbd_ep_is_stalled+0x40>)
    a6ce:	4798      	blx	r3
    a6d0:	4603      	mov	r3, r0
    a6d2:	4619      	mov	r1, r3
    a6d4:	79bb      	ldrb	r3, [r7, #6]
    a6d6:	2210      	movs	r2, #16
    a6d8:	fa02 f303 	lsl.w	r3, r2, r3
    a6dc:	400b      	ands	r3, r1
    a6de:	2b00      	cmp	r3, #0
    a6e0:	bf14      	ite	ne
    a6e2:	2301      	movne	r3, #1
    a6e4:	2300      	moveq	r3, #0
    a6e6:	b2db      	uxtb	r3, r3
}
    a6e8:	4618      	mov	r0, r3
    a6ea:	3710      	adds	r7, #16
    a6ec:	46bd      	mov	sp, r7
    a6ee:	bd80      	pop	{r7, pc}
    a6f0:	0000a0e1 	.word	0x0000a0e1

0000a6f4 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    a6f4:	b580      	push	{r7, lr}
    a6f6:	b084      	sub	sp, #16
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	4603      	mov	r3, r0
    a6fc:	460a      	mov	r2, r1
    a6fe:	71fb      	strb	r3, [r7, #7]
    a700:	4613      	mov	r3, r2
    a702:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a704:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a708:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a70a:	79fb      	ldrb	r3, [r7, #7]
    a70c:	4619      	mov	r1, r3
    a70e:	68f8      	ldr	r0, [r7, #12]
    a710:	4b08      	ldr	r3, [pc, #32]	; (a734 <_usbd_ep_is_stall_sent+0x40>)
    a712:	4798      	blx	r3
    a714:	4603      	mov	r3, r0
    a716:	4619      	mov	r1, r3
    a718:	79bb      	ldrb	r3, [r7, #6]
    a71a:	2220      	movs	r2, #32
    a71c:	fa02 f303 	lsl.w	r3, r2, r3
    a720:	400b      	ands	r3, r1
    a722:	2b00      	cmp	r3, #0
    a724:	bf14      	ite	ne
    a726:	2301      	movne	r3, #1
    a728:	2300      	moveq	r3, #0
    a72a:	b2db      	uxtb	r3, r3
}
    a72c:	4618      	mov	r0, r3
    a72e:	3710      	adds	r7, #16
    a730:	46bd      	mov	sp, r7
    a732:	bd80      	pop	{r7, pc}
    a734:	0000a061 	.word	0x0000a061

0000a738 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    a738:	b580      	push	{r7, lr}
    a73a:	b082      	sub	sp, #8
    a73c:	af00      	add	r7, sp, #0
    a73e:	4603      	mov	r3, r0
    a740:	460a      	mov	r2, r1
    a742:	71fb      	strb	r3, [r7, #7]
    a744:	4613      	mov	r3, r2
    a746:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a748:	79bb      	ldrb	r3, [r7, #6]
    a74a:	2220      	movs	r2, #32
    a74c:	409a      	lsls	r2, r3
    a74e:	79fb      	ldrb	r3, [r7, #7]
    a750:	4611      	mov	r1, r2
    a752:	4618      	mov	r0, r3
    a754:	4b02      	ldr	r3, [pc, #8]	; (a760 <_usbd_ep_ack_stall+0x28>)
    a756:	4798      	blx	r3
}
    a758:	bf00      	nop
    a75a:	3708      	adds	r7, #8
    a75c:	46bd      	mov	sp, r7
    a75e:	bd80      	pop	{r7, pc}
    a760:	0000a5b1 	.word	0x0000a5b1

0000a764 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    a764:	b580      	push	{r7, lr}
    a766:	b082      	sub	sp, #8
    a768:	af00      	add	r7, sp, #0
    a76a:	4603      	mov	r3, r0
    a76c:	71fb      	strb	r3, [r7, #7]
    a76e:	460b      	mov	r3, r1
    a770:	71bb      	strb	r3, [r7, #6]
    a772:	4613      	mov	r3, r2
    a774:	717b      	strb	r3, [r7, #5]
	if (en) {
    a776:	797b      	ldrb	r3, [r7, #5]
    a778:	2b00      	cmp	r3, #0
    a77a:	d008      	beq.n	a78e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a77c:	79bb      	ldrb	r3, [r7, #6]
    a77e:	2220      	movs	r2, #32
    a780:	409a      	lsls	r2, r3
    a782:	79fb      	ldrb	r3, [r7, #7]
    a784:	4611      	mov	r1, r2
    a786:	4618      	mov	r0, r3
    a788:	4b07      	ldr	r3, [pc, #28]	; (a7a8 <_usbd_ep_int_stall_en+0x44>)
    a78a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    a78c:	e007      	b.n	a79e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a78e:	79bb      	ldrb	r3, [r7, #6]
    a790:	2220      	movs	r2, #32
    a792:	409a      	lsls	r2, r3
    a794:	79fb      	ldrb	r3, [r7, #7]
    a796:	4611      	mov	r1, r2
    a798:	4618      	mov	r0, r3
    a79a:	4b04      	ldr	r3, [pc, #16]	; (a7ac <_usbd_ep_int_stall_en+0x48>)
    a79c:	4798      	blx	r3
}
    a79e:	bf00      	nop
    a7a0:	3708      	adds	r7, #8
    a7a2:	46bd      	mov	sp, r7
    a7a4:	bd80      	pop	{r7, pc}
    a7a6:	bf00      	nop
    a7a8:	0000a5d9 	.word	0x0000a5d9
    a7ac:	0000a601 	.word	0x0000a601

0000a7b0 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    a7b0:	b580      	push	{r7, lr}
    a7b2:	b082      	sub	sp, #8
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	4603      	mov	r3, r0
    a7b8:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    a7ba:	79fb      	ldrb	r3, [r7, #7]
    a7bc:	4619      	mov	r1, r3
    a7be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7c2:	4b03      	ldr	r3, [pc, #12]	; (a7d0 <_usbd_ep_stop_setup+0x20>)
    a7c4:	4798      	blx	r3
}
    a7c6:	bf00      	nop
    a7c8:	3708      	adds	r7, #8
    a7ca:	46bd      	mov	sp, r7
    a7cc:	bd80      	pop	{r7, pc}
    a7ce:	bf00      	nop
    a7d0:	0000a135 	.word	0x0000a135

0000a7d4 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b082      	sub	sp, #8
    a7d8:	af00      	add	r7, sp, #0
    a7da:	4603      	mov	r3, r0
    a7dc:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a7de:	79fb      	ldrb	r3, [r7, #7]
    a7e0:	2210      	movs	r2, #16
    a7e2:	4619      	mov	r1, r3
    a7e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7e8:	4b05      	ldr	r3, [pc, #20]	; (a800 <_usbd_ep_is_setup+0x2c>)
    a7ea:	4798      	blx	r3
    a7ec:	4603      	mov	r3, r0
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	bf14      	ite	ne
    a7f2:	2301      	movne	r3, #1
    a7f4:	2300      	moveq	r3, #0
    a7f6:	b2db      	uxtb	r3, r3
}
    a7f8:	4618      	mov	r0, r3
    a7fa:	3708      	adds	r7, #8
    a7fc:	46bd      	mov	sp, r7
    a7fe:	bd80      	pop	{r7, pc}
    a800:	0000a02b 	.word	0x0000a02b

0000a804 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    a804:	b580      	push	{r7, lr}
    a806:	b082      	sub	sp, #8
    a808:	af00      	add	r7, sp, #0
    a80a:	4603      	mov	r3, r0
    a80c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a80e:	79fb      	ldrb	r3, [r7, #7]
    a810:	2110      	movs	r1, #16
    a812:	4618      	mov	r0, r3
    a814:	4b02      	ldr	r3, [pc, #8]	; (a820 <_usbd_ep_ack_setup+0x1c>)
    a816:	4798      	blx	r3
}
    a818:	bf00      	nop
    a81a:	3708      	adds	r7, #8
    a81c:	46bd      	mov	sp, r7
    a81e:	bd80      	pop	{r7, pc}
    a820:	0000a5b1 	.word	0x0000a5b1

0000a824 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    a824:	b580      	push	{r7, lr}
    a826:	b082      	sub	sp, #8
    a828:	af00      	add	r7, sp, #0
    a82a:	4603      	mov	r3, r0
    a82c:	71fb      	strb	r3, [r7, #7]
    a82e:	460b      	mov	r3, r1
    a830:	71bb      	strb	r3, [r7, #6]
    a832:	4613      	mov	r3, r2
    a834:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    a836:	797b      	ldrb	r3, [r7, #5]
    a838:	2b00      	cmp	r3, #0
    a83a:	d00b      	beq.n	a854 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a83c:	79bb      	ldrb	r3, [r7, #6]
    a83e:	2201      	movs	r2, #1
    a840:	fa02 f303 	lsl.w	r3, r2, r3
    a844:	b2da      	uxtb	r2, r3
    a846:	79fb      	ldrb	r3, [r7, #7]
    a848:	4619      	mov	r1, r3
    a84a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a84e:	4b09      	ldr	r3, [pc, #36]	; (a874 <_usbd_ep_set_toggle+0x50>)
    a850:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    a852:	e00a      	b.n	a86a <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a854:	79bb      	ldrb	r3, [r7, #6]
    a856:	2201      	movs	r2, #1
    a858:	fa02 f303 	lsl.w	r3, r2, r3
    a85c:	b2da      	uxtb	r2, r3
    a85e:	79fb      	ldrb	r3, [r7, #7]
    a860:	4619      	mov	r1, r3
    a862:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a866:	4b04      	ldr	r3, [pc, #16]	; (a878 <_usbd_ep_set_toggle+0x54>)
    a868:	4798      	blx	r3
}
    a86a:	bf00      	nop
    a86c:	3708      	adds	r7, #8
    a86e:	46bd      	mov	sp, r7
    a870:	bd80      	pop	{r7, pc}
    a872:	bf00      	nop
    a874:	0000a0b5 	.word	0x0000a0b5
    a878:	0000a109 	.word	0x0000a109

0000a87c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    a87c:	b580      	push	{r7, lr}
    a87e:	b082      	sub	sp, #8
    a880:	af00      	add	r7, sp, #0
    a882:	4603      	mov	r3, r0
    a884:	460a      	mov	r2, r1
    a886:	71fb      	strb	r3, [r7, #7]
    a888:	4613      	mov	r3, r2
    a88a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    a88c:	79bb      	ldrb	r3, [r7, #6]
    a88e:	2201      	movs	r2, #1
    a890:	409a      	lsls	r2, r3
    a892:	79fb      	ldrb	r3, [r7, #7]
    a894:	4611      	mov	r1, r2
    a896:	4618      	mov	r0, r3
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <_usbd_ep_ack_io_cpt+0x28>)
    a89a:	4798      	blx	r3
}
    a89c:	bf00      	nop
    a89e:	3708      	adds	r7, #8
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	0000a5b1 	.word	0x0000a5b1

0000a8a8 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    a8a8:	b480      	push	{r7}
    a8aa:	b085      	sub	sp, #20
    a8ac:	af00      	add	r7, sp, #0
    a8ae:	4603      	mov	r3, r0
    a8b0:	603a      	str	r2, [r7, #0]
    a8b2:	71fb      	strb	r3, [r7, #7]
    a8b4:	460b      	mov	r3, r1
    a8b6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a8b8:	79fa      	ldrb	r2, [r7, #7]
    a8ba:	79bb      	ldrb	r3, [r7, #6]
    a8bc:	0052      	lsls	r2, r2, #1
    a8be:	4413      	add	r3, r2
    a8c0:	011b      	lsls	r3, r3, #4
    a8c2:	4a06      	ldr	r2, [pc, #24]	; (a8dc <_usbd_ep_set_buf+0x34>)
    a8c4:	4413      	add	r3, r2
    a8c6:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    a8c8:	68fb      	ldr	r3, [r7, #12]
    a8ca:	683a      	ldr	r2, [r7, #0]
    a8cc:	601a      	str	r2, [r3, #0]
}
    a8ce:	bf00      	nop
    a8d0:	3714      	adds	r7, #20
    a8d2:	46bd      	mov	sp, r7
    a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8d8:	4770      	bx	lr
    a8da:	bf00      	nop
    a8dc:	20001150 	.word	0x20001150

0000a8e0 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    a8e0:	b480      	push	{r7}
    a8e2:	b085      	sub	sp, #20
    a8e4:	af00      	add	r7, sp, #0
    a8e6:	4603      	mov	r3, r0
    a8e8:	71fb      	strb	r3, [r7, #7]
    a8ea:	460b      	mov	r3, r1
    a8ec:	71bb      	strb	r3, [r7, #6]
    a8ee:	4613      	mov	r3, r2
    a8f0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a8f2:	79fa      	ldrb	r2, [r7, #7]
    a8f4:	79bb      	ldrb	r3, [r7, #6]
    a8f6:	0052      	lsls	r2, r2, #1
    a8f8:	4413      	add	r3, r2
    a8fa:	011b      	lsls	r3, r3, #4
    a8fc:	4a08      	ldr	r2, [pc, #32]	; (a920 <_usbd_ep_set_in_count+0x40>)
    a8fe:	4413      	add	r3, r2
    a900:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    a902:	88bb      	ldrh	r3, [r7, #4]
    a904:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a908:	b299      	uxth	r1, r3
    a90a:	68fa      	ldr	r2, [r7, #12]
    a90c:	6853      	ldr	r3, [r2, #4]
    a90e:	f361 339b 	bfi	r3, r1, #14, #14
    a912:	6053      	str	r3, [r2, #4]
}
    a914:	bf00      	nop
    a916:	3714      	adds	r7, #20
    a918:	46bd      	mov	sp, r7
    a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a91e:	4770      	bx	lr
    a920:	20001150 	.word	0x20001150

0000a924 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    a924:	b480      	push	{r7}
    a926:	b085      	sub	sp, #20
    a928:	af00      	add	r7, sp, #0
    a92a:	4603      	mov	r3, r0
    a92c:	71fb      	strb	r3, [r7, #7]
    a92e:	460b      	mov	r3, r1
    a930:	71bb      	strb	r3, [r7, #6]
    a932:	4613      	mov	r3, r2
    a934:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a936:	79fa      	ldrb	r2, [r7, #7]
    a938:	79bb      	ldrb	r3, [r7, #6]
    a93a:	0052      	lsls	r2, r2, #1
    a93c:	4413      	add	r3, r2
    a93e:	011b      	lsls	r3, r3, #4
    a940:	4a08      	ldr	r2, [pc, #32]	; (a964 <_usbd_ep_set_in_size+0x40>)
    a942:	4413      	add	r3, r2
    a944:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    a946:	88bb      	ldrh	r3, [r7, #4]
    a948:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a94c:	b299      	uxth	r1, r3
    a94e:	68fa      	ldr	r2, [r7, #12]
    a950:	6853      	ldr	r3, [r2, #4]
    a952:	f361 030d 	bfi	r3, r1, #0, #14
    a956:	6053      	str	r3, [r2, #4]
}
    a958:	bf00      	nop
    a95a:	3714      	adds	r7, #20
    a95c:	46bd      	mov	sp, r7
    a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a962:	4770      	bx	lr
    a964:	20001150 	.word	0x20001150

0000a968 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    a968:	b480      	push	{r7}
    a96a:	b085      	sub	sp, #20
    a96c:	af00      	add	r7, sp, #0
    a96e:	4603      	mov	r3, r0
    a970:	71fb      	strb	r3, [r7, #7]
    a972:	460b      	mov	r3, r1
    a974:	71bb      	strb	r3, [r7, #6]
    a976:	4613      	mov	r3, r2
    a978:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a97a:	79fa      	ldrb	r2, [r7, #7]
    a97c:	79bb      	ldrb	r3, [r7, #6]
    a97e:	0052      	lsls	r2, r2, #1
    a980:	4413      	add	r3, r2
    a982:	011b      	lsls	r3, r3, #4
    a984:	4a08      	ldr	r2, [pc, #32]	; (a9a8 <_usbd_ep_set_out_count+0x40>)
    a986:	4413      	add	r3, r2
    a988:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    a98a:	88bb      	ldrh	r3, [r7, #4]
    a98c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a990:	b299      	uxth	r1, r3
    a992:	68fa      	ldr	r2, [r7, #12]
    a994:	6853      	ldr	r3, [r2, #4]
    a996:	f361 030d 	bfi	r3, r1, #0, #14
    a99a:	6053      	str	r3, [r2, #4]
}
    a99c:	bf00      	nop
    a99e:	3714      	adds	r7, #20
    a9a0:	46bd      	mov	sp, r7
    a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9a6:	4770      	bx	lr
    a9a8:	20001150 	.word	0x20001150

0000a9ac <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    a9ac:	b480      	push	{r7}
    a9ae:	b085      	sub	sp, #20
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	4603      	mov	r3, r0
    a9b4:	71fb      	strb	r3, [r7, #7]
    a9b6:	460b      	mov	r3, r1
    a9b8:	71bb      	strb	r3, [r7, #6]
    a9ba:	4613      	mov	r3, r2
    a9bc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a9be:	79fa      	ldrb	r2, [r7, #7]
    a9c0:	79bb      	ldrb	r3, [r7, #6]
    a9c2:	0052      	lsls	r2, r2, #1
    a9c4:	4413      	add	r3, r2
    a9c6:	011b      	lsls	r3, r3, #4
    a9c8:	4a08      	ldr	r2, [pc, #32]	; (a9ec <_usbd_ep_set_out_size+0x40>)
    a9ca:	4413      	add	r3, r2
    a9cc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    a9ce:	88bb      	ldrh	r3, [r7, #4]
    a9d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a9d4:	b299      	uxth	r1, r3
    a9d6:	68fa      	ldr	r2, [r7, #12]
    a9d8:	6853      	ldr	r3, [r2, #4]
    a9da:	f361 339b 	bfi	r3, r1, #14, #14
    a9de:	6053      	str	r3, [r2, #4]
}
    a9e0:	bf00      	nop
    a9e2:	3714      	adds	r7, #20
    a9e4:	46bd      	mov	sp, r7
    a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ea:	4770      	bx	lr
    a9ec:	20001150 	.word	0x20001150

0000a9f0 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    a9f0:	b580      	push	{r7, lr}
    a9f2:	b084      	sub	sp, #16
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	60ba      	str	r2, [r7, #8]
    a9f8:	607b      	str	r3, [r7, #4]
    a9fa:	4603      	mov	r3, r0
    a9fc:	73fb      	strb	r3, [r7, #15]
    a9fe:	460b      	mov	r3, r1
    aa00:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    aa02:	68bb      	ldr	r3, [r7, #8]
    aa04:	b29a      	uxth	r2, r3
    aa06:	7bb9      	ldrb	r1, [r7, #14]
    aa08:	7bfb      	ldrb	r3, [r7, #15]
    aa0a:	4618      	mov	r0, r3
    aa0c:	4b06      	ldr	r3, [pc, #24]	; (aa28 <_usbd_ep_set_in_trans+0x38>)
    aa0e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    aa10:	687b      	ldr	r3, [r7, #4]
    aa12:	b29a      	uxth	r2, r3
    aa14:	7bb9      	ldrb	r1, [r7, #14]
    aa16:	7bfb      	ldrb	r3, [r7, #15]
    aa18:	4618      	mov	r0, r3
    aa1a:	4b04      	ldr	r3, [pc, #16]	; (aa2c <_usbd_ep_set_in_trans+0x3c>)
    aa1c:	4798      	blx	r3
}
    aa1e:	bf00      	nop
    aa20:	3710      	adds	r7, #16
    aa22:	46bd      	mov	sp, r7
    aa24:	bd80      	pop	{r7, pc}
    aa26:	bf00      	nop
    aa28:	0000a925 	.word	0x0000a925
    aa2c:	0000a8e1 	.word	0x0000a8e1

0000aa30 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    aa30:	b580      	push	{r7, lr}
    aa32:	b084      	sub	sp, #16
    aa34:	af00      	add	r7, sp, #0
    aa36:	60ba      	str	r2, [r7, #8]
    aa38:	607b      	str	r3, [r7, #4]
    aa3a:	4603      	mov	r3, r0
    aa3c:	73fb      	strb	r3, [r7, #15]
    aa3e:	460b      	mov	r3, r1
    aa40:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    aa42:	68bb      	ldr	r3, [r7, #8]
    aa44:	b29a      	uxth	r2, r3
    aa46:	7bb9      	ldrb	r1, [r7, #14]
    aa48:	7bfb      	ldrb	r3, [r7, #15]
    aa4a:	4618      	mov	r0, r3
    aa4c:	4b06      	ldr	r3, [pc, #24]	; (aa68 <_usbd_ep_set_out_trans+0x38>)
    aa4e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    aa50:	687b      	ldr	r3, [r7, #4]
    aa52:	b29a      	uxth	r2, r3
    aa54:	7bb9      	ldrb	r1, [r7, #14]
    aa56:	7bfb      	ldrb	r3, [r7, #15]
    aa58:	4618      	mov	r0, r3
    aa5a:	4b04      	ldr	r3, [pc, #16]	; (aa6c <_usbd_ep_set_out_trans+0x3c>)
    aa5c:	4798      	blx	r3
}
    aa5e:	bf00      	nop
    aa60:	3710      	adds	r7, #16
    aa62:	46bd      	mov	sp, r7
    aa64:	bd80      	pop	{r7, pc}
    aa66:	bf00      	nop
    aa68:	0000a9ad 	.word	0x0000a9ad
    aa6c:	0000a969 	.word	0x0000a969

0000aa70 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    aa70:	b480      	push	{r7}
    aa72:	b085      	sub	sp, #20
    aa74:	af00      	add	r7, sp, #0
    aa76:	4603      	mov	r3, r0
    aa78:	460a      	mov	r2, r1
    aa7a:	71fb      	strb	r3, [r7, #7]
    aa7c:	4613      	mov	r3, r2
    aa7e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aa80:	79fa      	ldrb	r2, [r7, #7]
    aa82:	79bb      	ldrb	r3, [r7, #6]
    aa84:	0052      	lsls	r2, r2, #1
    aa86:	4413      	add	r3, r2
    aa88:	011b      	lsls	r3, r3, #4
    aa8a:	4a06      	ldr	r2, [pc, #24]	; (aaa4 <_usbd_ep_clear_bank_status+0x34>)
    aa8c:	4413      	add	r3, r2
    aa8e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    aa90:	68fb      	ldr	r3, [r7, #12]
    aa92:	2200      	movs	r2, #0
    aa94:	729a      	strb	r2, [r3, #10]
}
    aa96:	bf00      	nop
    aa98:	3714      	adds	r7, #20
    aa9a:	46bd      	mov	sp, r7
    aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa0:	4770      	bx	lr
    aaa2:	bf00      	nop
    aaa4:	20001150 	.word	0x20001150

0000aaa8 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    aaa8:	b580      	push	{r7, lr}
    aaaa:	b082      	sub	sp, #8
    aaac:	af00      	add	r7, sp, #0
    aaae:	4603      	mov	r3, r0
    aab0:	71fb      	strb	r3, [r7, #7]
    aab2:	460b      	mov	r3, r1
    aab4:	71bb      	strb	r3, [r7, #6]
    aab6:	4613      	mov	r3, r2
    aab8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    aaba:	797b      	ldrb	r3, [r7, #5]
    aabc:	2b00      	cmp	r3, #0
    aabe:	d00b      	beq.n	aad8 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aac0:	79bb      	ldrb	r3, [r7, #6]
    aac2:	2240      	movs	r2, #64	; 0x40
    aac4:	fa02 f303 	lsl.w	r3, r2, r3
    aac8:	b2da      	uxtb	r2, r3
    aaca:	79fb      	ldrb	r3, [r7, #7]
    aacc:	4619      	mov	r1, r3
    aace:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aad2:	4b09      	ldr	r3, [pc, #36]	; (aaf8 <_usbd_ep_set_in_rdy+0x50>)
    aad4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    aad6:	e00a      	b.n	aaee <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aad8:	79bb      	ldrb	r3, [r7, #6]
    aada:	2240      	movs	r2, #64	; 0x40
    aadc:	fa02 f303 	lsl.w	r3, r2, r3
    aae0:	b2da      	uxtb	r2, r3
    aae2:	79fb      	ldrb	r3, [r7, #7]
    aae4:	4619      	mov	r1, r3
    aae6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aaea:	4b04      	ldr	r3, [pc, #16]	; (aafc <_usbd_ep_set_in_rdy+0x54>)
    aaec:	4798      	blx	r3
}
    aaee:	bf00      	nop
    aaf0:	3708      	adds	r7, #8
    aaf2:	46bd      	mov	sp, r7
    aaf4:	bd80      	pop	{r7, pc}
    aaf6:	bf00      	nop
    aaf8:	0000a0b5 	.word	0x0000a0b5
    aafc:	0000a109 	.word	0x0000a109

0000ab00 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ab00:	b580      	push	{r7, lr}
    ab02:	b082      	sub	sp, #8
    ab04:	af00      	add	r7, sp, #0
    ab06:	4603      	mov	r3, r0
    ab08:	71fb      	strb	r3, [r7, #7]
    ab0a:	460b      	mov	r3, r1
    ab0c:	71bb      	strb	r3, [r7, #6]
    ab0e:	4613      	mov	r3, r2
    ab10:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ab12:	797b      	ldrb	r3, [r7, #5]
    ab14:	2b00      	cmp	r3, #0
    ab16:	d00b      	beq.n	ab30 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ab18:	79bb      	ldrb	r3, [r7, #6]
    ab1a:	2240      	movs	r2, #64	; 0x40
    ab1c:	fa02 f303 	lsl.w	r3, r2, r3
    ab20:	b2da      	uxtb	r2, r3
    ab22:	79fb      	ldrb	r3, [r7, #7]
    ab24:	4619      	mov	r1, r3
    ab26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab2a:	4b09      	ldr	r3, [pc, #36]	; (ab50 <_usbd_ep_set_out_rdy+0x50>)
    ab2c:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ab2e:	e00a      	b.n	ab46 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ab30:	79bb      	ldrb	r3, [r7, #6]
    ab32:	2240      	movs	r2, #64	; 0x40
    ab34:	fa02 f303 	lsl.w	r3, r2, r3
    ab38:	b2da      	uxtb	r2, r3
    ab3a:	79fb      	ldrb	r3, [r7, #7]
    ab3c:	4619      	mov	r1, r3
    ab3e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab42:	4b04      	ldr	r3, [pc, #16]	; (ab54 <_usbd_ep_set_out_rdy+0x54>)
    ab44:	4798      	blx	r3
}
    ab46:	bf00      	nop
    ab48:	3708      	adds	r7, #8
    ab4a:	46bd      	mov	sp, r7
    ab4c:	bd80      	pop	{r7, pc}
    ab4e:	bf00      	nop
    ab50:	0000a109 	.word	0x0000a109
    ab54:	0000a0b5 	.word	0x0000a0b5

0000ab58 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    ab58:	b480      	push	{r7}
    ab5a:	b083      	sub	sp, #12
    ab5c:	af00      	add	r7, sp, #0
    ab5e:	4603      	mov	r3, r0
    ab60:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ab62:	88fb      	ldrh	r3, [r7, #6]
    ab64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ab68:	d820      	bhi.n	abac <_usbd_ep_pcksize_size+0x54>
    ab6a:	88fb      	ldrh	r3, [r7, #6]
    ab6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ab70:	d81a      	bhi.n	aba8 <_usbd_ep_pcksize_size+0x50>
    ab72:	88fb      	ldrh	r3, [r7, #6]
    ab74:	2b80      	cmp	r3, #128	; 0x80
    ab76:	d815      	bhi.n	aba4 <_usbd_ep_pcksize_size+0x4c>
    ab78:	88fb      	ldrh	r3, [r7, #6]
    ab7a:	2b40      	cmp	r3, #64	; 0x40
    ab7c:	d810      	bhi.n	aba0 <_usbd_ep_pcksize_size+0x48>
    ab7e:	88fb      	ldrh	r3, [r7, #6]
    ab80:	2b20      	cmp	r3, #32
    ab82:	d80b      	bhi.n	ab9c <_usbd_ep_pcksize_size+0x44>
    ab84:	88fb      	ldrh	r3, [r7, #6]
    ab86:	2b10      	cmp	r3, #16
    ab88:	d806      	bhi.n	ab98 <_usbd_ep_pcksize_size+0x40>
    ab8a:	88fb      	ldrh	r3, [r7, #6]
    ab8c:	2b08      	cmp	r3, #8
    ab8e:	bf8c      	ite	hi
    ab90:	2301      	movhi	r3, #1
    ab92:	2300      	movls	r3, #0
    ab94:	b2db      	uxtb	r3, r3
    ab96:	e00a      	b.n	abae <_usbd_ep_pcksize_size+0x56>
    ab98:	2302      	movs	r3, #2
    ab9a:	e008      	b.n	abae <_usbd_ep_pcksize_size+0x56>
    ab9c:	2303      	movs	r3, #3
    ab9e:	e006      	b.n	abae <_usbd_ep_pcksize_size+0x56>
    aba0:	2304      	movs	r3, #4
    aba2:	e004      	b.n	abae <_usbd_ep_pcksize_size+0x56>
    aba4:	2305      	movs	r3, #5
    aba6:	e002      	b.n	abae <_usbd_ep_pcksize_size+0x56>
    aba8:	2306      	movs	r3, #6
    abaa:	e000      	b.n	abae <_usbd_ep_pcksize_size+0x56>
    abac:	2307      	movs	r3, #7
}
    abae:	4618      	mov	r0, r3
    abb0:	370c      	adds	r7, #12
    abb2:	46bd      	mov	sp, r7
    abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    abb8:	4770      	bx	lr
	...

0000abbc <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    abbc:	b480      	push	{r7}
    abbe:	b085      	sub	sp, #20
    abc0:	af00      	add	r7, sp, #0
    abc2:	4603      	mov	r3, r0
    abc4:	460a      	mov	r2, r1
    abc6:	71fb      	strb	r3, [r7, #7]
    abc8:	4613      	mov	r3, r2
    abca:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    abcc:	79fb      	ldrb	r3, [r7, #7]
    abce:	2b00      	cmp	r3, #0
    abd0:	d008      	beq.n	abe4 <_usb_d_dev_ept+0x28>
    abd2:	79bb      	ldrb	r3, [r7, #6]
    abd4:	2b00      	cmp	r3, #0
    abd6:	d003      	beq.n	abe0 <_usb_d_dev_ept+0x24>
    abd8:	79fb      	ldrb	r3, [r7, #7]
    abda:	3304      	adds	r3, #4
    abdc:	b2db      	uxtb	r3, r3
    abde:	e002      	b.n	abe6 <_usb_d_dev_ept+0x2a>
    abe0:	79fb      	ldrb	r3, [r7, #7]
    abe2:	e000      	b.n	abe6 <_usb_d_dev_ept+0x2a>
    abe4:	2300      	movs	r3, #0
    abe6:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    abe8:	7bfa      	ldrb	r2, [r7, #15]
    abea:	4613      	mov	r3, r2
    abec:	009b      	lsls	r3, r3, #2
    abee:	4413      	add	r3, r2
    abf0:	009b      	lsls	r3, r3, #2
    abf2:	3310      	adds	r3, #16
    abf4:	4a04      	ldr	r2, [pc, #16]	; (ac08 <_usb_d_dev_ept+0x4c>)
    abf6:	4413      	add	r3, r2
    abf8:	3304      	adds	r3, #4
}
    abfa:	4618      	mov	r0, r3
    abfc:	3714      	adds	r7, #20
    abfe:	46bd      	mov	sp, r7
    ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac04:	4770      	bx	lr
    ac06:	bf00      	nop
    ac08:	20001088 	.word	0x20001088

0000ac0c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    ac0c:	b580      	push	{r7, lr}
    ac0e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    ac10:	2104      	movs	r1, #4
    ac12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac16:	4b03      	ldr	r3, [pc, #12]	; (ac24 <_usb_d_dev_sof+0x18>)
    ac18:	4798      	blx	r3
	dev_inst.callbacks.sof();
    ac1a:	4b03      	ldr	r3, [pc, #12]	; (ac28 <_usb_d_dev_sof+0x1c>)
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	4798      	blx	r3
}
    ac20:	bf00      	nop
    ac22:	bd80      	pop	{r7, pc}
    ac24:	0000a283 	.word	0x0000a283
    ac28:	20001088 	.word	0x20001088

0000ac2c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    ac2c:	b580      	push	{r7, lr}
    ac2e:	b084      	sub	sp, #16
    ac30:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    ac32:	2300      	movs	r3, #0
    ac34:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ac36:	f240 2101 	movw	r1, #513	; 0x201
    ac3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac3e:	4b1a      	ldr	r3, [pc, #104]	; (aca8 <_usb_d_dev_lpmsusp+0x7c>)
    ac40:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ac42:	f240 2101 	movw	r1, #513	; 0x201
    ac46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac4a:	4b18      	ldr	r3, [pc, #96]	; (acac <_usb_d_dev_lpmsusp+0x80>)
    ac4c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ac4e:	2170      	movs	r1, #112	; 0x70
    ac50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac54:	4b16      	ldr	r3, [pc, #88]	; (acb0 <_usb_d_dev_lpmsusp+0x84>)
    ac56:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ac58:	2300      	movs	r3, #0
    ac5a:	73fb      	strb	r3, [r7, #15]
    ac5c:	e018      	b.n	ac90 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    ac5e:	7bfb      	ldrb	r3, [r7, #15]
    ac60:	015b      	lsls	r3, r3, #5
    ac62:	4a14      	ldr	r2, [pc, #80]	; (acb4 <_usb_d_dev_lpmsusp+0x88>)
    ac64:	4413      	add	r3, r2
    ac66:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	891b      	ldrh	r3, [r3, #8]
    ac6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    ac70:	b2db      	uxtb	r3, r3
    ac72:	2b03      	cmp	r3, #3
    ac74:	d109      	bne.n	ac8a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	891b      	ldrh	r3, [r3, #8]
    ac7a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ac7e:	b29b      	uxth	r3, r3
    ac80:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ac82:	687b      	ldr	r3, [r7, #4]
    ac84:	2200      	movs	r2, #0
    ac86:	811a      	strh	r2, [r3, #8]
			break;
    ac88:	e005      	b.n	ac96 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ac8a:	7bfb      	ldrb	r3, [r7, #15]
    ac8c:	3301      	adds	r3, #1
    ac8e:	73fb      	strb	r3, [r7, #15]
    ac90:	7bfb      	ldrb	r3, [r7, #15]
    ac92:	2b03      	cmp	r3, #3
    ac94:	d9e3      	bls.n	ac5e <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ac96:	4b08      	ldr	r3, [pc, #32]	; (acb8 <_usb_d_dev_lpmsusp+0x8c>)
    ac98:	685b      	ldr	r3, [r3, #4]
    ac9a:	68b9      	ldr	r1, [r7, #8]
    ac9c:	2003      	movs	r0, #3
    ac9e:	4798      	blx	r3
}
    aca0:	bf00      	nop
    aca2:	3710      	adds	r7, #16
    aca4:	46bd      	mov	sp, r7
    aca6:	bd80      	pop	{r7, pc}
    aca8:	0000a283 	.word	0x0000a283
    acac:	0000a2d9 	.word	0x0000a2d9
    acb0:	0000a2a1 	.word	0x0000a2a1
    acb4:	20001150 	.word	0x20001150
    acb8:	20001088 	.word	0x20001088

0000acbc <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    acbc:	b580      	push	{r7, lr}
    acbe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    acc0:	2180      	movs	r1, #128	; 0x80
    acc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acc6:	4b04      	ldr	r3, [pc, #16]	; (acd8 <_usb_d_dev_ramerr+0x1c>)
    acc8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    acca:	4b04      	ldr	r3, [pc, #16]	; (acdc <_usb_d_dev_ramerr+0x20>)
    accc:	685b      	ldr	r3, [r3, #4]
    acce:	2100      	movs	r1, #0
    acd0:	2005      	movs	r0, #5
    acd2:	4798      	blx	r3
}
    acd4:	bf00      	nop
    acd6:	bd80      	pop	{r7, pc}
    acd8:	0000a283 	.word	0x0000a283
    acdc:	20001088 	.word	0x20001088

0000ace0 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    ace0:	b580      	push	{r7, lr}
    ace2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ace4:	2170      	movs	r1, #112	; 0x70
    ace6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acea:	4b0b      	ldr	r3, [pc, #44]	; (ad18 <_usb_d_dev_wakeup+0x38>)
    acec:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    acee:	2170      	movs	r1, #112	; 0x70
    acf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acf4:	4b09      	ldr	r3, [pc, #36]	; (ad1c <_usb_d_dev_wakeup+0x3c>)
    acf6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    acf8:	f240 2101 	movw	r1, #513	; 0x201
    acfc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad00:	4b07      	ldr	r3, [pc, #28]	; (ad20 <_usb_d_dev_wakeup+0x40>)
    ad02:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    ad04:	2000      	movs	r0, #0
    ad06:	4b07      	ldr	r3, [pc, #28]	; (ad24 <_usb_d_dev_wakeup+0x44>)
    ad08:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    ad0a:	4b07      	ldr	r3, [pc, #28]	; (ad28 <_usb_d_dev_wakeup+0x48>)
    ad0c:	685b      	ldr	r3, [r3, #4]
    ad0e:	2100      	movs	r1, #0
    ad10:	2002      	movs	r0, #2
    ad12:	4798      	blx	r3
}
    ad14:	bf00      	nop
    ad16:	bd80      	pop	{r7, pc}
    ad18:	0000a283 	.word	0x0000a283
    ad1c:	0000a2d9 	.word	0x0000a2d9
    ad20:	0000a2a1 	.word	0x0000a2a1
    ad24:	0000a581 	.word	0x0000a581
    ad28:	20001088 	.word	0x20001088

0000ad2c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    ad2c:	b580      	push	{r7, lr}
    ad2e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    ad30:	2200      	movs	r2, #0
    ad32:	2100      	movs	r1, #0
    ad34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad38:	4b0d      	ldr	r3, [pc, #52]	; (ad70 <_usb_d_dev_reset+0x44>)
    ad3a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    ad3c:	2108      	movs	r1, #8
    ad3e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad42:	4b0c      	ldr	r3, [pc, #48]	; (ad74 <_usb_d_dev_reset+0x48>)
    ad44:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ad46:	2170      	movs	r1, #112	; 0x70
    ad48:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad4c:	4b0a      	ldr	r3, [pc, #40]	; (ad78 <_usb_d_dev_reset+0x4c>)
    ad4e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ad50:	f240 2101 	movw	r1, #513	; 0x201
    ad54:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad58:	4b08      	ldr	r3, [pc, #32]	; (ad7c <_usb_d_dev_reset+0x50>)
    ad5a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    ad5c:	4b08      	ldr	r3, [pc, #32]	; (ad80 <_usb_d_dev_reset+0x54>)
    ad5e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    ad60:	4b08      	ldr	r3, [pc, #32]	; (ad84 <_usb_d_dev_reset+0x58>)
    ad62:	685b      	ldr	r3, [r3, #4]
    ad64:	2100      	movs	r1, #0
    ad66:	2001      	movs	r0, #1
    ad68:	4798      	blx	r3
}
    ad6a:	bf00      	nop
    ad6c:	bd80      	pop	{r7, pc}
    ad6e:	bf00      	nop
    ad70:	0000a219 	.word	0x0000a219
    ad74:	0000a283 	.word	0x0000a283
    ad78:	0000a2d9 	.word	0x0000a2d9
    ad7c:	0000a2a1 	.word	0x0000a2a1
    ad80:	0000b8e9 	.word	0x0000b8e9
    ad84:	20001088 	.word	0x20001088

0000ad88 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    ad88:	b580      	push	{r7, lr}
    ad8a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ad8c:	f240 2101 	movw	r1, #513	; 0x201
    ad90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad94:	4b09      	ldr	r3, [pc, #36]	; (adbc <_usb_d_dev_suspend+0x34>)
    ad96:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ad98:	f240 2101 	movw	r1, #513	; 0x201
    ad9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ada0:	4b07      	ldr	r3, [pc, #28]	; (adc0 <_usb_d_dev_suspend+0x38>)
    ada2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ada4:	2170      	movs	r1, #112	; 0x70
    ada6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adaa:	4b06      	ldr	r3, [pc, #24]	; (adc4 <_usb_d_dev_suspend+0x3c>)
    adac:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    adae:	4b06      	ldr	r3, [pc, #24]	; (adc8 <_usb_d_dev_suspend+0x40>)
    adb0:	685b      	ldr	r3, [r3, #4]
    adb2:	2100      	movs	r1, #0
    adb4:	2004      	movs	r0, #4
    adb6:	4798      	blx	r3
}
    adb8:	bf00      	nop
    adba:	bd80      	pop	{r7, pc}
    adbc:	0000a283 	.word	0x0000a283
    adc0:	0000a2d9 	.word	0x0000a2d9
    adc4:	0000a2a1 	.word	0x0000a2a1
    adc8:	20001088 	.word	0x20001088

0000adcc <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    adcc:	b580      	push	{r7, lr}
    adce:	b082      	sub	sp, #8
    add0:	af00      	add	r7, sp, #0
	bool     rc    = true;
    add2:	2301      	movs	r3, #1
    add4:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    add6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adda:	4b22      	ldr	r3, [pc, #136]	; (ae64 <_usb_d_dev_handle_nep+0x98>)
    addc:	4798      	blx	r3
    adde:	4603      	mov	r3, r0
    ade0:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    ade2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ade6:	4b20      	ldr	r3, [pc, #128]	; (ae68 <_usb_d_dev_handle_nep+0x9c>)
    ade8:	4798      	blx	r3
    adea:	4603      	mov	r3, r0
    adec:	461a      	mov	r2, r3
    adee:	88bb      	ldrh	r3, [r7, #4]
    adf0:	4013      	ands	r3, r2
    adf2:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    adf4:	88bb      	ldrh	r3, [r7, #4]
    adf6:	f003 0304 	and.w	r3, r3, #4
    adfa:	2b00      	cmp	r3, #0
    adfc:	d003      	beq.n	ae06 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    adfe:	4b1b      	ldr	r3, [pc, #108]	; (ae6c <_usb_d_dev_handle_nep+0xa0>)
    ae00:	4798      	blx	r3
		return true;
    ae02:	2301      	movs	r3, #1
    ae04:	e02a      	b.n	ae5c <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    ae06:	88bb      	ldrh	r3, [r7, #4]
    ae08:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d002      	beq.n	ae16 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    ae10:	4b17      	ldr	r3, [pc, #92]	; (ae70 <_usb_d_dev_handle_nep+0xa4>)
    ae12:	4798      	blx	r3
    ae14:	e021      	b.n	ae5a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    ae16:	88bb      	ldrh	r3, [r7, #4]
    ae18:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d002      	beq.n	ae26 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    ae20:	4b14      	ldr	r3, [pc, #80]	; (ae74 <_usb_d_dev_handle_nep+0xa8>)
    ae22:	4798      	blx	r3
    ae24:	e019      	b.n	ae5a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    ae26:	88bb      	ldrh	r3, [r7, #4]
    ae28:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d002      	beq.n	ae36 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    ae30:	4b11      	ldr	r3, [pc, #68]	; (ae78 <_usb_d_dev_handle_nep+0xac>)
    ae32:	4798      	blx	r3
    ae34:	e011      	b.n	ae5a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    ae36:	88bb      	ldrh	r3, [r7, #4]
    ae38:	f003 0308 	and.w	r3, r3, #8
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d002      	beq.n	ae46 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    ae40:	4b0e      	ldr	r3, [pc, #56]	; (ae7c <_usb_d_dev_handle_nep+0xb0>)
    ae42:	4798      	blx	r3
    ae44:	e009      	b.n	ae5a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    ae46:	88bb      	ldrh	r3, [r7, #4]
    ae48:	f003 0301 	and.w	r3, r3, #1
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	d002      	beq.n	ae56 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    ae50:	4b0b      	ldr	r3, [pc, #44]	; (ae80 <_usb_d_dev_handle_nep+0xb4>)
    ae52:	4798      	blx	r3
    ae54:	e001      	b.n	ae5a <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    ae56:	2300      	movs	r3, #0
    ae58:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    ae5a:	79fb      	ldrb	r3, [r7, #7]
}
    ae5c:	4618      	mov	r0, r3
    ae5e:	3708      	adds	r7, #8
    ae60:	46bd      	mov	sp, r7
    ae62:	bd80      	pop	{r7, pc}
    ae64:	0000a269 	.word	0x0000a269
    ae68:	0000a2bf 	.word	0x0000a2bf
    ae6c:	0000ac0d 	.word	0x0000ac0d
    ae70:	0000ac2d 	.word	0x0000ac2d
    ae74:	0000acbd 	.word	0x0000acbd
    ae78:	0000ace1 	.word	0x0000ace1
    ae7c:	0000ad2d 	.word	0x0000ad2d
    ae80:	0000ad89 	.word	0x0000ad89

0000ae84 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    ae84:	b590      	push	{r4, r7, lr}
    ae86:	b089      	sub	sp, #36	; 0x24
    ae88:	af00      	add	r7, sp, #0
    ae8a:	6078      	str	r0, [r7, #4]
    ae8c:	460b      	mov	r3, r1
    ae8e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    ae90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ae94:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    ae96:	687b      	ldr	r3, [r7, #4]
    ae98:	7c9b      	ldrb	r3, [r3, #18]
    ae9a:	f003 030f 	and.w	r3, r3, #15
    ae9e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    aea0:	7dfb      	ldrb	r3, [r7, #23]
    aea2:	015b      	lsls	r3, r3, #5
    aea4:	4a73      	ldr	r2, [pc, #460]	; (b074 <_usb_d_dev_in_next+0x1f0>)
    aea6:	4413      	add	r3, r2
    aea8:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    aeaa:	78fb      	ldrb	r3, [r7, #3]
    aeac:	2b00      	cmp	r3, #0
    aeae:	d006      	beq.n	aebe <_usb_d_dev_in_next+0x3a>
    aeb0:	693b      	ldr	r3, [r7, #16]
    aeb2:	3310      	adds	r3, #16
    aeb4:	685b      	ldr	r3, [r3, #4]
    aeb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aeba:	b29b      	uxth	r3, r3
    aebc:	e000      	b.n	aec0 <_usb_d_dev_in_next+0x3c>
    aebe:	2300      	movs	r3, #0
    aec0:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    aec2:	687b      	ldr	r3, [r7, #4]
    aec4:	8a1b      	ldrh	r3, [r3, #16]
    aec6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    aeca:	4293      	cmp	r3, r2
    aecc:	d103      	bne.n	aed6 <_usb_d_dev_in_next+0x52>
    aece:	687b      	ldr	r3, [r7, #4]
    aed0:	8a1b      	ldrh	r3, [r3, #16]
    aed2:	b21b      	sxth	r3, r3
    aed4:	e004      	b.n	aee0 <_usb_d_dev_in_next+0x5c>
    aed6:	687b      	ldr	r3, [r7, #4]
    aed8:	8a1b      	ldrh	r3, [r3, #16]
    aeda:	3b01      	subs	r3, #1
    aedc:	b29b      	uxth	r3, r3
    aede:	b21b      	sxth	r3, r3
    aee0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    aee4:	4013      	ands	r3, r2
    aee6:	b21b      	sxth	r3, r3
    aee8:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    aeea:	2300      	movs	r3, #0
    aeec:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    aeee:	687b      	ldr	r3, [r7, #4]
    aef0:	7cdb      	ldrb	r3, [r3, #19]
    aef2:	f003 0307 	and.w	r3, r3, #7
    aef6:	b2db      	uxtb	r3, r3
    aef8:	2b01      	cmp	r3, #1
    aefa:	bf0c      	ite	eq
    aefc:	2301      	moveq	r3, #1
    aefe:	2300      	movne	r3, #0
    af00:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    af02:	78fb      	ldrb	r3, [r7, #3]
    af04:	2b00      	cmp	r3, #0
    af06:	d004      	beq.n	af12 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    af08:	7dfb      	ldrb	r3, [r7, #23]
    af0a:	2101      	movs	r1, #1
    af0c:	4618      	mov	r0, r3
    af0e:	4b5a      	ldr	r3, [pc, #360]	; (b078 <_usb_d_dev_in_next+0x1f4>)
    af10:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    af12:	687b      	ldr	r3, [r7, #4]
    af14:	689a      	ldr	r2, [r3, #8]
    af16:	89fb      	ldrh	r3, [r7, #14]
    af18:	441a      	add	r2, r3
    af1a:	687b      	ldr	r3, [r7, #4]
    af1c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    af1e:	687b      	ldr	r3, [r7, #4]
    af20:	689a      	ldr	r2, [r3, #8]
    af22:	687b      	ldr	r3, [r7, #4]
    af24:	685b      	ldr	r3, [r3, #4]
    af26:	429a      	cmp	r2, r3
    af28:	d243      	bcs.n	afb2 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    af2a:	687b      	ldr	r3, [r7, #4]
    af2c:	685b      	ldr	r3, [r3, #4]
    af2e:	b29a      	uxth	r2, r3
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	689b      	ldr	r3, [r3, #8]
    af34:	b29b      	uxth	r3, r3
    af36:	1ad3      	subs	r3, r2, r3
    af38:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    af3a:	687b      	ldr	r3, [r7, #4]
    af3c:	7cdb      	ldrb	r3, [r3, #19]
    af3e:	f003 0320 	and.w	r3, r3, #32
    af42:	b2db      	uxtb	r3, r3
    af44:	2b00      	cmp	r3, #0
    af46:	d01b      	beq.n	af80 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	8a1b      	ldrh	r3, [r3, #16]
    af4c:	8bfa      	ldrh	r2, [r7, #30]
    af4e:	429a      	cmp	r2, r3
    af50:	d902      	bls.n	af58 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	8a1b      	ldrh	r3, [r3, #16]
    af56:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    af58:	687b      	ldr	r3, [r7, #4]
    af5a:	68d8      	ldr	r0, [r3, #12]
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	681a      	ldr	r2, [r3, #0]
    af60:	687b      	ldr	r3, [r7, #4]
    af62:	689b      	ldr	r3, [r3, #8]
    af64:	4413      	add	r3, r2
    af66:	8bfa      	ldrh	r2, [r7, #30]
    af68:	4619      	mov	r1, r3
    af6a:	4b44      	ldr	r3, [pc, #272]	; (b07c <_usb_d_dev_in_next+0x1f8>)
    af6c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    af6e:	687b      	ldr	r3, [r7, #4]
    af70:	68db      	ldr	r3, [r3, #12]
    af72:	461a      	mov	r2, r3
    af74:	7dfb      	ldrb	r3, [r7, #23]
    af76:	2101      	movs	r1, #1
    af78:	4618      	mov	r0, r3
    af7a:	4b41      	ldr	r3, [pc, #260]	; (b080 <_usb_d_dev_in_next+0x1fc>)
    af7c:	4798      	blx	r3
    af7e:	e011      	b.n	afa4 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    af80:	8bfb      	ldrh	r3, [r7, #30]
    af82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    af86:	d902      	bls.n	af8e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    af88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    af8c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    af8e:	687b      	ldr	r3, [r7, #4]
    af90:	681a      	ldr	r2, [r3, #0]
    af92:	687b      	ldr	r3, [r7, #4]
    af94:	689b      	ldr	r3, [r3, #8]
    af96:	4413      	add	r3, r2
    af98:	461a      	mov	r2, r3
    af9a:	7dfb      	ldrb	r3, [r7, #23]
    af9c:	2101      	movs	r1, #1
    af9e:	4618      	mov	r0, r3
    afa0:	4b37      	ldr	r3, [pc, #220]	; (b080 <_usb_d_dev_in_next+0x1fc>)
    afa2:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    afa4:	8bfa      	ldrh	r2, [r7, #30]
    afa6:	7df8      	ldrb	r0, [r7, #23]
    afa8:	2300      	movs	r3, #0
    afaa:	2101      	movs	r1, #1
    afac:	4c35      	ldr	r4, [pc, #212]	; (b084 <_usb_d_dev_in_next+0x200>)
    afae:	47a0      	blx	r4
		goto _in_tx_exec;
    afb0:	e041      	b.n	b036 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    afb2:	687b      	ldr	r3, [r7, #4]
    afb4:	7cdb      	ldrb	r3, [r3, #19]
    afb6:	f003 0310 	and.w	r3, r3, #16
    afba:	b2db      	uxtb	r3, r3
    afbc:	2b00      	cmp	r3, #0
    afbe:	d00b      	beq.n	afd8 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    afc0:	687a      	ldr	r2, [r7, #4]
    afc2:	7cd3      	ldrb	r3, [r2, #19]
    afc4:	f36f 1304 	bfc	r3, #4, #1
    afc8:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    afca:	7df8      	ldrb	r0, [r7, #23]
    afcc:	2300      	movs	r3, #0
    afce:	2200      	movs	r2, #0
    afd0:	2101      	movs	r1, #1
    afd2:	4c2c      	ldr	r4, [pc, #176]	; (b084 <_usb_d_dev_in_next+0x200>)
    afd4:	47a0      	blx	r4
		goto _in_tx_exec;
    afd6:	e02e      	b.n	b036 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    afd8:	7afb      	ldrb	r3, [r7, #11]
    afda:	2b00      	cmp	r3, #0
    afdc:	d006      	beq.n	afec <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    afde:	7dfb      	ldrb	r3, [r7, #23]
    afe0:	224b      	movs	r2, #75	; 0x4b
    afe2:	4619      	mov	r1, r3
    afe4:	69b8      	ldr	r0, [r7, #24]
    afe6:	4b28      	ldr	r3, [pc, #160]	; (b088 <_usb_d_dev_in_next+0x204>)
    afe8:	4798      	blx	r3
    afea:	e005      	b.n	aff8 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    afec:	7dfb      	ldrb	r3, [r7, #23]
    afee:	224a      	movs	r2, #74	; 0x4a
    aff0:	4619      	mov	r1, r3
    aff2:	69b8      	ldr	r0, [r7, #24]
    aff4:	4b24      	ldr	r3, [pc, #144]	; (b088 <_usb_d_dev_in_next+0x204>)
    aff6:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	8a1b      	ldrh	r3, [r3, #16]
    affc:	89ba      	ldrh	r2, [r7, #12]
    affe:	429a      	cmp	r2, r3
    b000:	d114      	bne.n	b02c <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b002:	687a      	ldr	r2, [r7, #4]
    b004:	7cd3      	ldrb	r3, [r2, #19]
    b006:	f36f 1386 	bfc	r3, #6, #1
    b00a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b00c:	4b1f      	ldr	r3, [pc, #124]	; (b08c <_usb_d_dev_in_next+0x208>)
    b00e:	68db      	ldr	r3, [r3, #12]
    b010:	687a      	ldr	r2, [r7, #4]
    b012:	7c90      	ldrb	r0, [r2, #18]
    b014:	687a      	ldr	r2, [r7, #4]
    b016:	6892      	ldr	r2, [r2, #8]
    b018:	4611      	mov	r1, r2
    b01a:	4798      	blx	r3
    b01c:	4603      	mov	r3, r0
    b01e:	2b00      	cmp	r3, #0
    b020:	d124      	bne.n	b06c <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b022:	687a      	ldr	r2, [r7, #4]
    b024:	7cd3      	ldrb	r3, [r2, #19]
    b026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b02a:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b02c:	2100      	movs	r1, #0
    b02e:	6878      	ldr	r0, [r7, #4]
    b030:	4b17      	ldr	r3, [pc, #92]	; (b090 <_usb_d_dev_in_next+0x20c>)
    b032:	4798      	blx	r3
	return;
    b034:	e01b      	b.n	b06e <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b036:	78fb      	ldrb	r3, [r7, #3]
    b038:	f083 0301 	eor.w	r3, r3, #1
    b03c:	b2db      	uxtb	r3, r3
    b03e:	2b00      	cmp	r3, #0
    b040:	d00d      	beq.n	b05e <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b042:	7afb      	ldrb	r3, [r7, #11]
    b044:	2b00      	cmp	r3, #0
    b046:	d002      	beq.n	b04e <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b048:	234e      	movs	r3, #78	; 0x4e
    b04a:	777b      	strb	r3, [r7, #29]
    b04c:	e001      	b.n	b052 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b04e:	234a      	movs	r3, #74	; 0x4a
    b050:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b052:	7f7a      	ldrb	r2, [r7, #29]
    b054:	7dfb      	ldrb	r3, [r7, #23]
    b056:	4619      	mov	r1, r3
    b058:	69b8      	ldr	r0, [r7, #24]
    b05a:	4b0e      	ldr	r3, [pc, #56]	; (b094 <_usb_d_dev_in_next+0x210>)
    b05c:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b05e:	7dfb      	ldrb	r3, [r7, #23]
    b060:	2201      	movs	r2, #1
    b062:	2101      	movs	r1, #1
    b064:	4618      	mov	r0, r3
    b066:	4b0c      	ldr	r3, [pc, #48]	; (b098 <_usb_d_dev_in_next+0x214>)
    b068:	4798      	blx	r3
    b06a:	e000      	b.n	b06e <_usb_d_dev_in_next+0x1ea>
			return;
    b06c:	bf00      	nop
}
    b06e:	3724      	adds	r7, #36	; 0x24
    b070:	46bd      	mov	sp, r7
    b072:	bd90      	pop	{r4, r7, pc}
    b074:	20001150 	.word	0x20001150
    b078:	0000a87d 	.word	0x0000a87d
    b07c:	00010d29 	.word	0x00010d29
    b080:	0000a8a9 	.word	0x0000a8a9
    b084:	0000a9f1 	.word	0x0000a9f1
    b088:	0000a189 	.word	0x0000a189
    b08c:	20001088 	.word	0x20001088
    b090:	0000c1ad 	.word	0x0000c1ad
    b094:	0000a15d 	.word	0x0000a15d
    b098:	0000aaa9 	.word	0x0000aaa9

0000b09c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b09c:	b590      	push	{r4, r7, lr}
    b09e:	b08b      	sub	sp, #44	; 0x2c
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	6078      	str	r0, [r7, #4]
    b0a4:	460b      	mov	r3, r1
    b0a6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b0a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b0ac:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b0ae:	687b      	ldr	r3, [r7, #4]
    b0b0:	7c9b      	ldrb	r3, [r3, #18]
    b0b2:	f003 030f 	and.w	r3, r3, #15
    b0b6:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b0b8:	7ffb      	ldrb	r3, [r7, #31]
    b0ba:	015b      	lsls	r3, r3, #5
    b0bc:	4a94      	ldr	r2, [pc, #592]	; (b310 <_usb_d_dev_out_next+0x274>)
    b0be:	4413      	add	r3, r2
    b0c0:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b0c2:	78fb      	ldrb	r3, [r7, #3]
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	d005      	beq.n	b0d4 <_usb_d_dev_out_next+0x38>
    b0c8:	69bb      	ldr	r3, [r7, #24]
    b0ca:	685b      	ldr	r3, [r3, #4]
    b0cc:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b0d0:	b29b      	uxth	r3, r3
    b0d2:	e000      	b.n	b0d6 <_usb_d_dev_out_next+0x3a>
    b0d4:	2300      	movs	r3, #0
    b0d6:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b0d8:	78fb      	ldrb	r3, [r7, #3]
    b0da:	2b00      	cmp	r3, #0
    b0dc:	d005      	beq.n	b0ea <_usb_d_dev_out_next+0x4e>
    b0de:	69bb      	ldr	r3, [r7, #24]
    b0e0:	685b      	ldr	r3, [r3, #4]
    b0e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b0e6:	b29b      	uxth	r3, r3
    b0e8:	e000      	b.n	b0ec <_usb_d_dev_out_next+0x50>
    b0ea:	2300      	movs	r3, #0
    b0ec:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b0ee:	687b      	ldr	r3, [r7, #4]
    b0f0:	8a1b      	ldrh	r3, [r3, #16]
    b0f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b0f6:	4293      	cmp	r3, r2
    b0f8:	d004      	beq.n	b104 <_usb_d_dev_out_next+0x68>
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	8a1b      	ldrh	r3, [r3, #16]
    b0fe:	3b01      	subs	r3, #1
    b100:	b29b      	uxth	r3, r3
    b102:	e001      	b.n	b108 <_usb_d_dev_out_next+0x6c>
    b104:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b108:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b10a:	8aba      	ldrh	r2, [r7, #20]
    b10c:	8a7b      	ldrh	r3, [r7, #18]
    b10e:	4013      	ands	r3, r2
    b110:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b112:	687b      	ldr	r3, [r7, #4]
    b114:	7cdb      	ldrb	r3, [r3, #19]
    b116:	f003 0307 	and.w	r3, r3, #7
    b11a:	b2db      	uxtb	r3, r3
    b11c:	2b01      	cmp	r3, #1
    b11e:	bf0c      	ite	eq
    b120:	2301      	moveq	r3, #1
    b122:	2300      	movne	r3, #0
    b124:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b126:	78fb      	ldrb	r3, [r7, #3]
    b128:	2b00      	cmp	r3, #0
    b12a:	d004      	beq.n	b136 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b12c:	7ffb      	ldrb	r3, [r7, #31]
    b12e:	2100      	movs	r1, #0
    b130:	4618      	mov	r0, r3
    b132:	4b78      	ldr	r3, [pc, #480]	; (b314 <_usb_d_dev_out_next+0x278>)
    b134:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b136:	687b      	ldr	r3, [r7, #4]
    b138:	7cdb      	ldrb	r3, [r3, #19]
    b13a:	f003 0320 	and.w	r3, r3, #32
    b13e:	b2db      	uxtb	r3, r3
    b140:	2b00      	cmp	r3, #0
    b142:	d01c      	beq.n	b17e <_usb_d_dev_out_next+0xe2>
    b144:	687b      	ldr	r3, [r7, #4]
    b146:	685b      	ldr	r3, [r3, #4]
    b148:	2b00      	cmp	r3, #0
    b14a:	d018      	beq.n	b17e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	685b      	ldr	r3, [r3, #4]
    b150:	b29a      	uxth	r2, r3
    b152:	687b      	ldr	r3, [r7, #4]
    b154:	689b      	ldr	r3, [r3, #8]
    b156:	b29b      	uxth	r3, r3
    b158:	1ad3      	subs	r3, r2, r3
    b15a:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	681a      	ldr	r2, [r3, #0]
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	689b      	ldr	r3, [r3, #8]
    b164:	18d0      	adds	r0, r2, r3
    b166:	687b      	ldr	r3, [r7, #4]
    b168:	68d9      	ldr	r1, [r3, #12]
    b16a:	89ba      	ldrh	r2, [r7, #12]
    b16c:	8a3b      	ldrh	r3, [r7, #16]
    b16e:	429a      	cmp	r2, r3
    b170:	d901      	bls.n	b176 <_usb_d_dev_out_next+0xda>
    b172:	8a3b      	ldrh	r3, [r7, #16]
    b174:	e000      	b.n	b178 <_usb_d_dev_out_next+0xdc>
    b176:	89bb      	ldrh	r3, [r7, #12]
    b178:	461a      	mov	r2, r3
    b17a:	4b67      	ldr	r3, [pc, #412]	; (b318 <_usb_d_dev_out_next+0x27c>)
    b17c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b17e:	687b      	ldr	r3, [r7, #4]
    b180:	685b      	ldr	r3, [r3, #4]
    b182:	2b00      	cmp	r3, #0
    b184:	d121      	bne.n	b1ca <_usb_d_dev_out_next+0x12e>
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	7cdb      	ldrb	r3, [r3, #19]
    b18a:	f003 0310 	and.w	r3, r3, #16
    b18e:	b2db      	uxtb	r3, r3
    b190:	2b00      	cmp	r3, #0
    b192:	d01a      	beq.n	b1ca <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b194:	687a      	ldr	r2, [r7, #4]
    b196:	7cd3      	ldrb	r3, [r2, #19]
    b198:	f36f 1304 	bfc	r3, #4, #1
    b19c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b19e:	687a      	ldr	r2, [r7, #4]
    b1a0:	7cd3      	ldrb	r3, [r2, #19]
    b1a2:	f043 0320 	orr.w	r3, r3, #32
    b1a6:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b1a8:	687b      	ldr	r3, [r7, #4]
    b1aa:	68db      	ldr	r3, [r3, #12]
    b1ac:	461a      	mov	r2, r3
    b1ae:	7ffb      	ldrb	r3, [r7, #31]
    b1b0:	2100      	movs	r1, #0
    b1b2:	4618      	mov	r0, r3
    b1b4:	4b59      	ldr	r3, [pc, #356]	; (b31c <_usb_d_dev_out_next+0x280>)
    b1b6:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	8a1b      	ldrh	r3, [r3, #16]
    b1bc:	461a      	mov	r2, r3
    b1be:	7ff8      	ldrb	r0, [r7, #31]
    b1c0:	2300      	movs	r3, #0
    b1c2:	2100      	movs	r1, #0
    b1c4:	4c56      	ldr	r4, [pc, #344]	; (b320 <_usb_d_dev_out_next+0x284>)
    b1c6:	47a0      	blx	r4
		goto _out_rx_exec;
    b1c8:	e090      	b.n	b2ec <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b1ca:	78fb      	ldrb	r3, [r7, #3]
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	d010      	beq.n	b1f2 <_usb_d_dev_out_next+0x156>
    b1d0:	687b      	ldr	r3, [r7, #4]
    b1d2:	8a1b      	ldrh	r3, [r3, #16]
    b1d4:	8a3a      	ldrh	r2, [r7, #16]
    b1d6:	429a      	cmp	r2, r3
    b1d8:	d20b      	bcs.n	b1f2 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b1da:	687a      	ldr	r2, [r7, #4]
    b1dc:	7cd3      	ldrb	r3, [r2, #19]
    b1de:	f36f 1304 	bfc	r3, #4, #1
    b1e2:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b1e4:	687b      	ldr	r3, [r7, #4]
    b1e6:	689a      	ldr	r2, [r3, #8]
    b1e8:	8abb      	ldrh	r3, [r7, #20]
    b1ea:	441a      	add	r2, r3
    b1ec:	687b      	ldr	r3, [r7, #4]
    b1ee:	609a      	str	r2, [r3, #8]
    b1f0:	e05c      	b.n	b2ac <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b1f2:	687b      	ldr	r3, [r7, #4]
    b1f4:	689a      	ldr	r2, [r3, #8]
    b1f6:	8afb      	ldrh	r3, [r7, #22]
    b1f8:	441a      	add	r2, r3
    b1fa:	687b      	ldr	r3, [r7, #4]
    b1fc:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b1fe:	687b      	ldr	r3, [r7, #4]
    b200:	689a      	ldr	r2, [r3, #8]
    b202:	687b      	ldr	r3, [r7, #4]
    b204:	685b      	ldr	r3, [r3, #4]
    b206:	429a      	cmp	r2, r3
    b208:	d250      	bcs.n	b2ac <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b20a:	687b      	ldr	r3, [r7, #4]
    b20c:	685b      	ldr	r3, [r3, #4]
    b20e:	b29a      	uxth	r2, r3
    b210:	687b      	ldr	r3, [r7, #4]
    b212:	689b      	ldr	r3, [r3, #8]
    b214:	b29b      	uxth	r3, r3
    b216:	1ad3      	subs	r3, r2, r3
    b218:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b21a:	687b      	ldr	r3, [r7, #4]
    b21c:	7cdb      	ldrb	r3, [r3, #19]
    b21e:	f003 0320 	and.w	r3, r3, #32
    b222:	b2db      	uxtb	r3, r3
    b224:	2b00      	cmp	r3, #0
    b226:	d010      	beq.n	b24a <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b228:	687b      	ldr	r3, [r7, #4]
    b22a:	8a1b      	ldrh	r3, [r3, #16]
    b22c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b22e:	429a      	cmp	r2, r3
    b230:	d902      	bls.n	b238 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b232:	687b      	ldr	r3, [r7, #4]
    b234:	8a1b      	ldrh	r3, [r3, #16]
    b236:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	68db      	ldr	r3, [r3, #12]
    b23c:	461a      	mov	r2, r3
    b23e:	7ffb      	ldrb	r3, [r7, #31]
    b240:	2100      	movs	r1, #0
    b242:	4618      	mov	r0, r3
    b244:	4b35      	ldr	r3, [pc, #212]	; (b31c <_usb_d_dev_out_next+0x280>)
    b246:	4798      	blx	r3
    b248:	e029      	b.n	b29e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b24a:	687b      	ldr	r3, [r7, #4]
    b24c:	8a1b      	ldrh	r3, [r3, #16]
    b24e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b250:	429a      	cmp	r2, r3
    b252:	d90f      	bls.n	b274 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b25a:	d903      	bls.n	b264 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b25c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b260:	84fb      	strh	r3, [r7, #38]	; 0x26
    b262:	e011      	b.n	b288 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b266:	8a7b      	ldrh	r3, [r7, #18]
    b268:	4013      	ands	r3, r2
    b26a:	b29b      	uxth	r3, r3
    b26c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b26e:	1ad3      	subs	r3, r2, r3
    b270:	84fb      	strh	r3, [r7, #38]	; 0x26
    b272:	e009      	b.n	b288 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	8a1b      	ldrh	r3, [r3, #16]
    b278:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b27a:	429a      	cmp	r2, r3
    b27c:	d204      	bcs.n	b288 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b27e:	687a      	ldr	r2, [r7, #4]
    b280:	7cd3      	ldrb	r3, [r2, #19]
    b282:	f043 0320 	orr.w	r3, r3, #32
    b286:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b288:	687b      	ldr	r3, [r7, #4]
    b28a:	681a      	ldr	r2, [r3, #0]
    b28c:	687b      	ldr	r3, [r7, #4]
    b28e:	689b      	ldr	r3, [r3, #8]
    b290:	4413      	add	r3, r2
    b292:	461a      	mov	r2, r3
    b294:	7ffb      	ldrb	r3, [r7, #31]
    b296:	2100      	movs	r1, #0
    b298:	4618      	mov	r0, r3
    b29a:	4b20      	ldr	r3, [pc, #128]	; (b31c <_usb_d_dev_out_next+0x280>)
    b29c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b29e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b2a0:	7ff8      	ldrb	r0, [r7, #31]
    b2a2:	2300      	movs	r3, #0
    b2a4:	2100      	movs	r1, #0
    b2a6:	4c1e      	ldr	r4, [pc, #120]	; (b320 <_usb_d_dev_out_next+0x284>)
    b2a8:	47a0      	blx	r4
			goto _out_rx_exec;
    b2aa:	e01f      	b.n	b2ec <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b2ac:	7bfb      	ldrb	r3, [r7, #15]
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	d006      	beq.n	b2c0 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b2b2:	7ffb      	ldrb	r3, [r7, #31]
    b2b4:	222d      	movs	r2, #45	; 0x2d
    b2b6:	4619      	mov	r1, r3
    b2b8:	6a38      	ldr	r0, [r7, #32]
    b2ba:	4b1a      	ldr	r3, [pc, #104]	; (b324 <_usb_d_dev_out_next+0x288>)
    b2bc:	4798      	blx	r3
    b2be:	e005      	b.n	b2cc <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b2c0:	7ffb      	ldrb	r3, [r7, #31]
    b2c2:	2225      	movs	r2, #37	; 0x25
    b2c4:	4619      	mov	r1, r3
    b2c6:	6a38      	ldr	r0, [r7, #32]
    b2c8:	4b16      	ldr	r3, [pc, #88]	; (b324 <_usb_d_dev_out_next+0x288>)
    b2ca:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b2cc:	7ffb      	ldrb	r3, [r7, #31]
    b2ce:	2b00      	cmp	r3, #0
    b2d0:	d107      	bne.n	b2e2 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	68db      	ldr	r3, [r3, #12]
    b2d6:	461a      	mov	r2, r3
    b2d8:	7ffb      	ldrb	r3, [r7, #31]
    b2da:	2100      	movs	r1, #0
    b2dc:	4618      	mov	r0, r3
    b2de:	4b0f      	ldr	r3, [pc, #60]	; (b31c <_usb_d_dev_out_next+0x280>)
    b2e0:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b2e2:	2100      	movs	r1, #0
    b2e4:	6878      	ldr	r0, [r7, #4]
    b2e6:	4b10      	ldr	r3, [pc, #64]	; (b328 <_usb_d_dev_out_next+0x28c>)
    b2e8:	4798      	blx	r3
	return;
    b2ea:	e031      	b.n	b350 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b2ec:	78fb      	ldrb	r3, [r7, #3]
    b2ee:	f083 0301 	eor.w	r3, r3, #1
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d025      	beq.n	b344 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b2f8:	7bfb      	ldrb	r3, [r7, #15]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d018      	beq.n	b330 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b2fe:	7ffb      	ldrb	r3, [r7, #31]
    b300:	2101      	movs	r1, #1
    b302:	4618      	mov	r0, r3
    b304:	4b09      	ldr	r3, [pc, #36]	; (b32c <_usb_d_dev_out_next+0x290>)
    b306:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b308:	232d      	movs	r3, #45	; 0x2d
    b30a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b30e:	e012      	b.n	b336 <_usb_d_dev_out_next+0x29a>
    b310:	20001150 	.word	0x20001150
    b314:	0000a87d 	.word	0x0000a87d
    b318:	00010d29 	.word	0x00010d29
    b31c:	0000a8a9 	.word	0x0000a8a9
    b320:	0000aa31 	.word	0x0000aa31
    b324:	0000a189 	.word	0x0000a189
    b328:	0000c1ad 	.word	0x0000c1ad
    b32c:	0000aa71 	.word	0x0000aa71
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b330:	2325      	movs	r3, #37	; 0x25
    b332:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b336:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b33a:	7ffb      	ldrb	r3, [r7, #31]
    b33c:	4619      	mov	r1, r3
    b33e:	6a38      	ldr	r0, [r7, #32]
    b340:	4b05      	ldr	r3, [pc, #20]	; (b358 <_usb_d_dev_out_next+0x2bc>)
    b342:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b344:	7ffb      	ldrb	r3, [r7, #31]
    b346:	2201      	movs	r2, #1
    b348:	2100      	movs	r1, #0
    b34a:	4618      	mov	r0, r3
    b34c:	4b03      	ldr	r3, [pc, #12]	; (b35c <_usb_d_dev_out_next+0x2c0>)
    b34e:	4798      	blx	r3
}
    b350:	372c      	adds	r7, #44	; 0x2c
    b352:	46bd      	mov	sp, r7
    b354:	bd90      	pop	{r4, r7, pc}
    b356:	bf00      	nop
    b358:	0000a15d 	.word	0x0000a15d
    b35c:	0000ab01 	.word	0x0000ab01

0000b360 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b360:	b580      	push	{r7, lr}
    b362:	b084      	sub	sp, #16
    b364:	af00      	add	r7, sp, #0
    b366:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b368:	687b      	ldr	r3, [r7, #4]
    b36a:	7c9b      	ldrb	r3, [r3, #18]
    b36c:	f003 030f 	and.w	r3, r3, #15
    b370:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	7cdb      	ldrb	r3, [r3, #19]
    b376:	f003 0307 	and.w	r3, r3, #7
    b37a:	b2db      	uxtb	r3, r3
    b37c:	2b01      	cmp	r3, #1
    b37e:	bf0c      	ite	eq
    b380:	2301      	moveq	r3, #1
    b382:	2300      	movne	r3, #0
    b384:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b386:	7bbb      	ldrb	r3, [r7, #14]
    b388:	f083 0301 	eor.w	r3, r3, #1
    b38c:	b2db      	uxtb	r3, r3
    b38e:	2b00      	cmp	r3, #0
    b390:	d008      	beq.n	b3a4 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b392:	7bfb      	ldrb	r3, [r7, #15]
    b394:	4618      	mov	r0, r3
    b396:	4b20      	ldr	r3, [pc, #128]	; (b418 <_usb_d_dev_handle_setup+0xb8>)
    b398:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b39a:	7bfb      	ldrb	r3, [r7, #15]
    b39c:	4618      	mov	r0, r3
    b39e:	4b1f      	ldr	r3, [pc, #124]	; (b41c <_usb_d_dev_handle_setup+0xbc>)
    b3a0:	4798      	blx	r3
		return;
    b3a2:	e036      	b.n	b412 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	7cdb      	ldrb	r3, [r3, #19]
    b3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b3ac:	b2db      	uxtb	r3, r3
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d010      	beq.n	b3d4 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b3b2:	687a      	ldr	r2, [r7, #4]
    b3b4:	7cd3      	ldrb	r3, [r2, #19]
    b3b6:	f36f 1386 	bfc	r3, #6, #1
    b3ba:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b3bc:	7bfb      	ldrb	r3, [r7, #15]
    b3be:	2200      	movs	r2, #0
    b3c0:	2101      	movs	r1, #1
    b3c2:	4618      	mov	r0, r3
    b3c4:	4b16      	ldr	r3, [pc, #88]	; (b420 <_usb_d_dev_handle_setup+0xc0>)
    b3c6:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b3c8:	7bfb      	ldrb	r3, [r7, #15]
    b3ca:	2200      	movs	r2, #0
    b3cc:	2100      	movs	r1, #0
    b3ce:	4618      	mov	r0, r3
    b3d0:	4b14      	ldr	r3, [pc, #80]	; (b424 <_usb_d_dev_handle_setup+0xc4>)
    b3d2:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b3d4:	687a      	ldr	r2, [r7, #4]
    b3d6:	7cd3      	ldrb	r3, [r2, #19]
    b3d8:	f36f 03c3 	bfc	r3, #3, #1
    b3dc:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b3de:	7bfb      	ldrb	r3, [r7, #15]
    b3e0:	2100      	movs	r1, #0
    b3e2:	4618      	mov	r0, r3
    b3e4:	4b10      	ldr	r3, [pc, #64]	; (b428 <_usb_d_dev_handle_setup+0xc8>)
    b3e6:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b3e8:	7bfb      	ldrb	r3, [r7, #15]
    b3ea:	2101      	movs	r1, #1
    b3ec:	4618      	mov	r0, r3
    b3ee:	4b0e      	ldr	r3, [pc, #56]	; (b428 <_usb_d_dev_handle_setup+0xc8>)
    b3f0:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b3f2:	7bfb      	ldrb	r3, [r7, #15]
    b3f4:	216f      	movs	r1, #111	; 0x6f
    b3f6:	4618      	mov	r0, r3
    b3f8:	4b0c      	ldr	r3, [pc, #48]	; (b42c <_usb_d_dev_handle_setup+0xcc>)
    b3fa:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b3fc:	7bfb      	ldrb	r3, [r7, #15]
    b3fe:	216f      	movs	r1, #111	; 0x6f
    b400:	4618      	mov	r0, r3
    b402:	4b0b      	ldr	r3, [pc, #44]	; (b430 <_usb_d_dev_handle_setup+0xd0>)
    b404:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b406:	4b0b      	ldr	r3, [pc, #44]	; (b434 <_usb_d_dev_handle_setup+0xd4>)
    b408:	689b      	ldr	r3, [r3, #8]
    b40a:	687a      	ldr	r2, [r7, #4]
    b40c:	7c92      	ldrb	r2, [r2, #18]
    b40e:	4610      	mov	r0, r2
    b410:	4798      	blx	r3
}
    b412:	3710      	adds	r7, #16
    b414:	46bd      	mov	sp, r7
    b416:	bd80      	pop	{r7, pc}
    b418:	0000a805 	.word	0x0000a805
    b41c:	0000a7b1 	.word	0x0000a7b1
    b420:	0000aaa9 	.word	0x0000aaa9
    b424:	0000ab01 	.word	0x0000ab01
    b428:	0000aa71 	.word	0x0000aa71
    b42c:	0000a5b1 	.word	0x0000a5b1
    b430:	0000a601 	.word	0x0000a601
    b434:	20001088 	.word	0x20001088

0000b438 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b438:	b580      	push	{r7, lr}
    b43a:	b084      	sub	sp, #16
    b43c:	af00      	add	r7, sp, #0
    b43e:	6078      	str	r0, [r7, #4]
    b440:	460b      	mov	r3, r1
    b442:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	7c9b      	ldrb	r3, [r3, #18]
    b448:	f003 030f 	and.w	r3, r3, #15
    b44c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b44e:	78f9      	ldrb	r1, [r7, #3]
    b450:	7bfb      	ldrb	r3, [r7, #15]
    b452:	2200      	movs	r2, #0
    b454:	4618      	mov	r0, r3
    b456:	4b07      	ldr	r3, [pc, #28]	; (b474 <_usb_d_dev_handle_stall+0x3c>)
    b458:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b45a:	4b07      	ldr	r3, [pc, #28]	; (b478 <_usb_d_dev_handle_stall+0x40>)
    b45c:	691b      	ldr	r3, [r3, #16]
    b45e:	687a      	ldr	r2, [r7, #4]
    b460:	7c90      	ldrb	r0, [r2, #18]
    b462:	687a      	ldr	r2, [r7, #4]
    b464:	6892      	ldr	r2, [r2, #8]
    b466:	2101      	movs	r1, #1
    b468:	4798      	blx	r3
}
    b46a:	bf00      	nop
    b46c:	3710      	adds	r7, #16
    b46e:	46bd      	mov	sp, r7
    b470:	bd80      	pop	{r7, pc}
    b472:	bf00      	nop
    b474:	0000a765 	.word	0x0000a765
    b478:	20001088 	.word	0x20001088

0000b47c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b47c:	b580      	push	{r7, lr}
    b47e:	b088      	sub	sp, #32
    b480:	af00      	add	r7, sp, #0
    b482:	6078      	str	r0, [r7, #4]
    b484:	460b      	mov	r3, r1
    b486:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b488:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b48c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b48e:	687b      	ldr	r3, [r7, #4]
    b490:	7c9b      	ldrb	r3, [r3, #18]
    b492:	f003 030f 	and.w	r3, r3, #15
    b496:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b498:	4b61      	ldr	r3, [pc, #388]	; (b620 <_usb_d_dev_handle_trfail+0x1a4>)
    b49a:	881b      	ldrh	r3, [r3, #0]
    b49c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b49e:	7efb      	ldrb	r3, [r7, #27]
    b4a0:	015b      	lsls	r3, r3, #5
    b4a2:	4a60      	ldr	r2, [pc, #384]	; (b624 <_usb_d_dev_handle_trfail+0x1a8>)
    b4a4:	4413      	add	r3, r2
    b4a6:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b4a8:	78fb      	ldrb	r3, [r7, #3]
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d006      	beq.n	b4bc <_usb_d_dev_handle_trfail+0x40>
    b4ae:	7efb      	ldrb	r3, [r7, #27]
    b4b0:	4619      	mov	r1, r3
    b4b2:	69f8      	ldr	r0, [r7, #28]
    b4b4:	4b5c      	ldr	r3, [pc, #368]	; (b628 <_usb_d_dev_handle_trfail+0x1ac>)
    b4b6:	4798      	blx	r3
    b4b8:	4603      	mov	r3, r0
    b4ba:	e005      	b.n	b4c8 <_usb_d_dev_handle_trfail+0x4c>
    b4bc:	7efb      	ldrb	r3, [r7, #27]
    b4be:	4619      	mov	r1, r3
    b4c0:	69f8      	ldr	r0, [r7, #28]
    b4c2:	4b5a      	ldr	r3, [pc, #360]	; (b62c <_usb_d_dev_handle_trfail+0x1b0>)
    b4c4:	4798      	blx	r3
    b4c6:	4603      	mov	r3, r0
    b4c8:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	7cdb      	ldrb	r3, [r3, #19]
    b4ce:	f003 0307 	and.w	r3, r3, #7
    b4d2:	b2db      	uxtb	r3, r3
    b4d4:	2b01      	cmp	r3, #1
    b4d6:	bf0c      	ite	eq
    b4d8:	2301      	moveq	r3, #1
    b4da:	2300      	movne	r3, #0
    b4dc:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b4de:	78fb      	ldrb	r3, [r7, #3]
    b4e0:	011b      	lsls	r3, r3, #4
    b4e2:	697a      	ldr	r2, [r7, #20]
    b4e4:	4413      	add	r3, r2
    b4e6:	7a9b      	ldrb	r3, [r3, #10]
    b4e8:	b2db      	uxtb	r3, r3
    b4ea:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b4ec:	7cfb      	ldrb	r3, [r7, #19]
    b4ee:	2b02      	cmp	r3, #2
    b4f0:	d12f      	bne.n	b552 <_usb_d_dev_handle_trfail+0xd6>
    b4f2:	7b3b      	ldrb	r3, [r7, #12]
    b4f4:	f003 0301 	and.w	r3, r3, #1
    b4f8:	b2db      	uxtb	r3, r3
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	d029      	beq.n	b552 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b4fe:	78fb      	ldrb	r3, [r7, #3]
    b500:	011b      	lsls	r3, r3, #4
    b502:	697a      	ldr	r2, [r7, #20]
    b504:	441a      	add	r2, r3
    b506:	7a93      	ldrb	r3, [r2, #10]
    b508:	f36f 0300 	bfc	r3, #0, #1
    b50c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b50e:	78fb      	ldrb	r3, [r7, #3]
    b510:	f107 0220 	add.w	r2, r7, #32
    b514:	4413      	add	r3, r2
    b516:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b51a:	7efb      	ldrb	r3, [r7, #27]
    b51c:	4619      	mov	r1, r3
    b51e:	69f8      	ldr	r0, [r7, #28]
    b520:	4b43      	ldr	r3, [pc, #268]	; (b630 <_usb_d_dev_handle_trfail+0x1b4>)
    b522:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b524:	78fb      	ldrb	r3, [r7, #3]
    b526:	f107 0220 	add.w	r2, r7, #32
    b52a:	4413      	add	r3, r2
    b52c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b530:	7efb      	ldrb	r3, [r7, #27]
    b532:	4619      	mov	r1, r3
    b534:	69f8      	ldr	r0, [r7, #28]
    b536:	4b3f      	ldr	r3, [pc, #252]	; (b634 <_usb_d_dev_handle_trfail+0x1b8>)
    b538:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b53a:	78fb      	ldrb	r3, [r7, #3]
    b53c:	2b00      	cmp	r3, #0
    b53e:	bf14      	ite	ne
    b540:	2301      	movne	r3, #1
    b542:	2300      	moveq	r3, #0
    b544:	b2db      	uxtb	r3, r3
    b546:	2204      	movs	r2, #4
    b548:	4619      	mov	r1, r3
    b54a:	6878      	ldr	r0, [r7, #4]
    b54c:	4b3a      	ldr	r3, [pc, #232]	; (b638 <_usb_d_dev_handle_trfail+0x1bc>)
    b54e:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b550:	e062      	b.n	b618 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b552:	7b3b      	ldrb	r3, [r7, #12]
    b554:	f003 0302 	and.w	r3, r3, #2
    b558:	b2db      	uxtb	r3, r3
    b55a:	2b00      	cmp	r3, #0
    b55c:	d040      	beq.n	b5e0 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b55e:	78fb      	ldrb	r3, [r7, #3]
    b560:	011b      	lsls	r3, r3, #4
    b562:	697a      	ldr	r2, [r7, #20]
    b564:	441a      	add	r2, r3
    b566:	7a93      	ldrb	r3, [r2, #10]
    b568:	f36f 0341 	bfc	r3, #1, #1
    b56c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b56e:	78fb      	ldrb	r3, [r7, #3]
    b570:	f107 0220 	add.w	r2, r7, #32
    b574:	4413      	add	r3, r2
    b576:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b57a:	7efb      	ldrb	r3, [r7, #27]
    b57c:	4619      	mov	r1, r3
    b57e:	69f8      	ldr	r0, [r7, #28]
    b580:	4b2b      	ldr	r3, [pc, #172]	; (b630 <_usb_d_dev_handle_trfail+0x1b4>)
    b582:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b584:	78fb      	ldrb	r3, [r7, #3]
    b586:	f107 0220 	add.w	r2, r7, #32
    b58a:	4413      	add	r3, r2
    b58c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b590:	7efb      	ldrb	r3, [r7, #27]
    b592:	4619      	mov	r1, r3
    b594:	69f8      	ldr	r0, [r7, #28]
    b596:	4b27      	ldr	r3, [pc, #156]	; (b634 <_usb_d_dev_handle_trfail+0x1b8>)
    b598:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b59a:	7cbb      	ldrb	r3, [r7, #18]
    b59c:	2b00      	cmp	r3, #0
    b59e:	d03b      	beq.n	b618 <_usb_d_dev_handle_trfail+0x19c>
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	7cdb      	ldrb	r3, [r3, #19]
    b5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b5a8:	b2db      	uxtb	r3, r3
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d034      	beq.n	b618 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b5ae:	687b      	ldr	r3, [r7, #4]
    b5b0:	7cdb      	ldrb	r3, [r3, #19]
    b5b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b5b6:	b2db      	uxtb	r3, r3
    b5b8:	461a      	mov	r2, r3
    b5ba:	78fb      	ldrb	r3, [r7, #3]
    b5bc:	4293      	cmp	r3, r2
    b5be:	d02b      	beq.n	b618 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b5c0:	687b      	ldr	r3, [r7, #4]
    b5c2:	7cdb      	ldrb	r3, [r3, #19]
    b5c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b5c8:	b2db      	uxtb	r3, r3
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	bf14      	ite	ne
    b5ce:	2301      	movne	r3, #1
    b5d0:	2300      	moveq	r3, #0
    b5d2:	b2db      	uxtb	r3, r3
    b5d4:	2200      	movs	r2, #0
    b5d6:	4619      	mov	r1, r3
    b5d8:	6878      	ldr	r0, [r7, #4]
    b5da:	4b17      	ldr	r3, [pc, #92]	; (b638 <_usb_d_dev_handle_trfail+0x1bc>)
    b5dc:	4798      	blx	r3
}
    b5de:	e01b      	b.n	b618 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b5e0:	78fa      	ldrb	r2, [r7, #3]
    b5e2:	7efb      	ldrb	r3, [r7, #27]
    b5e4:	4611      	mov	r1, r2
    b5e6:	4618      	mov	r0, r3
    b5e8:	4b14      	ldr	r3, [pc, #80]	; (b63c <_usb_d_dev_handle_trfail+0x1c0>)
    b5ea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b5ec:	78fb      	ldrb	r3, [r7, #3]
    b5ee:	f107 0220 	add.w	r2, r7, #32
    b5f2:	4413      	add	r3, r2
    b5f4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b5f8:	7efb      	ldrb	r3, [r7, #27]
    b5fa:	4619      	mov	r1, r3
    b5fc:	69f8      	ldr	r0, [r7, #28]
    b5fe:	4b0c      	ldr	r3, [pc, #48]	; (b630 <_usb_d_dev_handle_trfail+0x1b4>)
    b600:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b602:	78fb      	ldrb	r3, [r7, #3]
    b604:	f107 0220 	add.w	r2, r7, #32
    b608:	4413      	add	r3, r2
    b60a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b60e:	7efb      	ldrb	r3, [r7, #27]
    b610:	4619      	mov	r1, r3
    b612:	69f8      	ldr	r0, [r7, #28]
    b614:	4b07      	ldr	r3, [pc, #28]	; (b634 <_usb_d_dev_handle_trfail+0x1b8>)
    b616:	4798      	blx	r3
}
    b618:	bf00      	nop
    b61a:	3720      	adds	r7, #32
    b61c:	46bd      	mov	sp, r7
    b61e:	bd80      	pop	{r7, pc}
    b620:	000114d0 	.word	0x000114d0
    b624:	20001150 	.word	0x20001150
    b628:	0000a1e5 	.word	0x0000a1e5
    b62c:	0000a1b5 	.word	0x0000a1b5
    b630:	0000a089 	.word	0x0000a089
    b634:	0000a189 	.word	0x0000a189
    b638:	0000c1f5 	.word	0x0000c1f5
    b63c:	0000aa71 	.word	0x0000aa71

0000b640 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b640:	b580      	push	{r7, lr}
    b642:	b082      	sub	sp, #8
    b644:	af00      	add	r7, sp, #0
    b646:	6078      	str	r0, [r7, #4]
    b648:	460b      	mov	r3, r1
    b64a:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b64c:	78fb      	ldrb	r3, [r7, #3]
    b64e:	f003 0310 	and.w	r3, r3, #16
    b652:	2b00      	cmp	r3, #0
    b654:	d003      	beq.n	b65e <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    b656:	6878      	ldr	r0, [r7, #4]
    b658:	4b0c      	ldr	r3, [pc, #48]	; (b68c <_usb_d_dev_trans_setup_isr+0x4c>)
    b65a:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    b65c:	e012      	b.n	b684 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b65e:	78fb      	ldrb	r3, [r7, #3]
    b660:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b664:	2b00      	cmp	r3, #0
    b666:	d004      	beq.n	b672 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    b668:	2101      	movs	r1, #1
    b66a:	6878      	ldr	r0, [r7, #4]
    b66c:	4b08      	ldr	r3, [pc, #32]	; (b690 <_usb_d_dev_trans_setup_isr+0x50>)
    b66e:	4798      	blx	r3
}
    b670:	e008      	b.n	b684 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b672:	78fb      	ldrb	r3, [r7, #3]
    b674:	f003 0320 	and.w	r3, r3, #32
    b678:	2b00      	cmp	r3, #0
    b67a:	d003      	beq.n	b684 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    b67c:	2100      	movs	r1, #0
    b67e:	6878      	ldr	r0, [r7, #4]
    b680:	4b03      	ldr	r3, [pc, #12]	; (b690 <_usb_d_dev_trans_setup_isr+0x50>)
    b682:	4798      	blx	r3
}
    b684:	bf00      	nop
    b686:	3708      	adds	r7, #8
    b688:	46bd      	mov	sp, r7
    b68a:	bd80      	pop	{r7, pc}
    b68c:	0000b361 	.word	0x0000b361
    b690:	0000b439 	.word	0x0000b439

0000b694 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b694:	b580      	push	{r7, lr}
    b696:	b082      	sub	sp, #8
    b698:	af00      	add	r7, sp, #0
    b69a:	6078      	str	r0, [r7, #4]
    b69c:	460b      	mov	r3, r1
    b69e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b6a0:	78fb      	ldrb	r3, [r7, #3]
    b6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d004      	beq.n	b6b4 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    b6aa:	2101      	movs	r1, #1
    b6ac:	6878      	ldr	r0, [r7, #4]
    b6ae:	4b1a      	ldr	r3, [pc, #104]	; (b718 <_usb_d_dev_trans_in_isr+0x84>)
    b6b0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b6b2:	e02c      	b.n	b70e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b6b4:	78fb      	ldrb	r3, [r7, #3]
    b6b6:	f003 0308 	and.w	r3, r3, #8
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d004      	beq.n	b6c8 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    b6be:	2101      	movs	r1, #1
    b6c0:	6878      	ldr	r0, [r7, #4]
    b6c2:	4b16      	ldr	r3, [pc, #88]	; (b71c <_usb_d_dev_trans_in_isr+0x88>)
    b6c4:	4798      	blx	r3
}
    b6c6:	e022      	b.n	b70e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    b6c8:	78fb      	ldrb	r3, [r7, #3]
    b6ca:	f003 0302 	and.w	r3, r3, #2
    b6ce:	2b00      	cmp	r3, #0
    b6d0:	d004      	beq.n	b6dc <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    b6d2:	2101      	movs	r1, #1
    b6d4:	6878      	ldr	r0, [r7, #4]
    b6d6:	4b12      	ldr	r3, [pc, #72]	; (b720 <_usb_d_dev_trans_in_isr+0x8c>)
    b6d8:	4798      	blx	r3
}
    b6da:	e018      	b.n	b70e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b6dc:	687b      	ldr	r3, [r7, #4]
    b6de:	7cdb      	ldrb	r3, [r3, #19]
    b6e0:	f003 0307 	and.w	r3, r3, #7
    b6e4:	b2db      	uxtb	r3, r3
    b6e6:	2b01      	cmp	r3, #1
    b6e8:	d111      	bne.n	b70e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b6ea:	78fb      	ldrb	r3, [r7, #3]
    b6ec:	f003 0304 	and.w	r3, r3, #4
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d004      	beq.n	b6fe <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    b6f4:	2100      	movs	r1, #0
    b6f6:	6878      	ldr	r0, [r7, #4]
    b6f8:	4b08      	ldr	r3, [pc, #32]	; (b71c <_usb_d_dev_trans_in_isr+0x88>)
    b6fa:	4798      	blx	r3
}
    b6fc:	e007      	b.n	b70e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b6fe:	78fb      	ldrb	r3, [r7, #3]
    b700:	f003 0310 	and.w	r3, r3, #16
    b704:	2b00      	cmp	r3, #0
    b706:	d002      	beq.n	b70e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b708:	6878      	ldr	r0, [r7, #4]
    b70a:	4b06      	ldr	r3, [pc, #24]	; (b724 <_usb_d_dev_trans_in_isr+0x90>)
    b70c:	4798      	blx	r3
}
    b70e:	bf00      	nop
    b710:	3708      	adds	r7, #8
    b712:	46bd      	mov	sp, r7
    b714:	bd80      	pop	{r7, pc}
    b716:	bf00      	nop
    b718:	0000b439 	.word	0x0000b439
    b71c:	0000b47d 	.word	0x0000b47d
    b720:	0000ae85 	.word	0x0000ae85
    b724:	0000b361 	.word	0x0000b361

0000b728 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b728:	b580      	push	{r7, lr}
    b72a:	b082      	sub	sp, #8
    b72c:	af00      	add	r7, sp, #0
    b72e:	6078      	str	r0, [r7, #4]
    b730:	460b      	mov	r3, r1
    b732:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b734:	78fb      	ldrb	r3, [r7, #3]
    b736:	f003 0320 	and.w	r3, r3, #32
    b73a:	2b00      	cmp	r3, #0
    b73c:	d004      	beq.n	b748 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    b73e:	2100      	movs	r1, #0
    b740:	6878      	ldr	r0, [r7, #4]
    b742:	4b1a      	ldr	r3, [pc, #104]	; (b7ac <_usb_d_dev_trans_out_isr+0x84>)
    b744:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b746:	e02c      	b.n	b7a2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b748:	78fb      	ldrb	r3, [r7, #3]
    b74a:	f003 0304 	and.w	r3, r3, #4
    b74e:	2b00      	cmp	r3, #0
    b750:	d004      	beq.n	b75c <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    b752:	2100      	movs	r1, #0
    b754:	6878      	ldr	r0, [r7, #4]
    b756:	4b16      	ldr	r3, [pc, #88]	; (b7b0 <_usb_d_dev_trans_out_isr+0x88>)
    b758:	4798      	blx	r3
}
    b75a:	e022      	b.n	b7a2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    b75c:	78fb      	ldrb	r3, [r7, #3]
    b75e:	f003 0301 	and.w	r3, r3, #1
    b762:	2b00      	cmp	r3, #0
    b764:	d004      	beq.n	b770 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    b766:	2101      	movs	r1, #1
    b768:	6878      	ldr	r0, [r7, #4]
    b76a:	4b12      	ldr	r3, [pc, #72]	; (b7b4 <_usb_d_dev_trans_out_isr+0x8c>)
    b76c:	4798      	blx	r3
}
    b76e:	e018      	b.n	b7a2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b770:	687b      	ldr	r3, [r7, #4]
    b772:	7cdb      	ldrb	r3, [r3, #19]
    b774:	f003 0307 	and.w	r3, r3, #7
    b778:	b2db      	uxtb	r3, r3
    b77a:	2b01      	cmp	r3, #1
    b77c:	d111      	bne.n	b7a2 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b77e:	78fb      	ldrb	r3, [r7, #3]
    b780:	f003 0308 	and.w	r3, r3, #8
    b784:	2b00      	cmp	r3, #0
    b786:	d004      	beq.n	b792 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    b788:	2101      	movs	r1, #1
    b78a:	6878      	ldr	r0, [r7, #4]
    b78c:	4b08      	ldr	r3, [pc, #32]	; (b7b0 <_usb_d_dev_trans_out_isr+0x88>)
    b78e:	4798      	blx	r3
}
    b790:	e007      	b.n	b7a2 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b792:	78fb      	ldrb	r3, [r7, #3]
    b794:	f003 0310 	and.w	r3, r3, #16
    b798:	2b00      	cmp	r3, #0
    b79a:	d002      	beq.n	b7a2 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b79c:	6878      	ldr	r0, [r7, #4]
    b79e:	4b06      	ldr	r3, [pc, #24]	; (b7b8 <_usb_d_dev_trans_out_isr+0x90>)
    b7a0:	4798      	blx	r3
}
    b7a2:	bf00      	nop
    b7a4:	3708      	adds	r7, #8
    b7a6:	46bd      	mov	sp, r7
    b7a8:	bd80      	pop	{r7, pc}
    b7aa:	bf00      	nop
    b7ac:	0000b439 	.word	0x0000b439
    b7b0:	0000b47d 	.word	0x0000b47d
    b7b4:	0000b09d 	.word	0x0000b09d
    b7b8:	0000b361 	.word	0x0000b361

0000b7bc <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    b7bc:	b580      	push	{r7, lr}
    b7be:	b084      	sub	sp, #16
    b7c0:	af00      	add	r7, sp, #0
    b7c2:	6078      	str	r0, [r7, #4]
    b7c4:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    b7c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b7ca:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b7cc:	683b      	ldr	r3, [r7, #0]
    b7ce:	7c9b      	ldrb	r3, [r3, #18]
    b7d0:	f003 030f 	and.w	r3, r3, #15
    b7d4:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    b7d6:	7afb      	ldrb	r3, [r7, #11]
    b7d8:	2201      	movs	r2, #1
    b7da:	409a      	lsls	r2, r3
    b7dc:	687b      	ldr	r3, [r7, #4]
    b7de:	4013      	ands	r3, r2
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d03d      	beq.n	b860 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    b7e4:	7afb      	ldrb	r3, [r7, #11]
    b7e6:	68fa      	ldr	r2, [r7, #12]
    b7e8:	3308      	adds	r3, #8
    b7ea:	015b      	lsls	r3, r3, #5
    b7ec:	4413      	add	r3, r2
    b7ee:	3307      	adds	r3, #7
    b7f0:	781b      	ldrb	r3, [r3, #0]
    b7f2:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    b7f4:	7afb      	ldrb	r3, [r7, #11]
    b7f6:	68fa      	ldr	r2, [r7, #12]
    b7f8:	015b      	lsls	r3, r3, #5
    b7fa:	4413      	add	r3, r2
    b7fc:	f203 1309 	addw	r3, r3, #265	; 0x109
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    b804:	7aba      	ldrb	r2, [r7, #10]
    b806:	7a7b      	ldrb	r3, [r7, #9]
    b808:	4013      	ands	r3, r2
    b80a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    b80c:	7abb      	ldrb	r3, [r7, #10]
    b80e:	2b00      	cmp	r3, #0
    b810:	d027      	beq.n	b862 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    b812:	683b      	ldr	r3, [r7, #0]
    b814:	7cdb      	ldrb	r3, [r3, #19]
    b816:	f003 0307 	and.w	r3, r3, #7
    b81a:	b2db      	uxtb	r3, r3
    b81c:	2b01      	cmp	r3, #1
    b81e:	d10c      	bne.n	b83a <_usb_d_dev_handle_eps+0x7e>
    b820:	683b      	ldr	r3, [r7, #0]
    b822:	7cdb      	ldrb	r3, [r3, #19]
    b824:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b828:	b2db      	uxtb	r3, r3
    b82a:	2b00      	cmp	r3, #0
    b82c:	d105      	bne.n	b83a <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    b82e:	7abb      	ldrb	r3, [r7, #10]
    b830:	4619      	mov	r1, r3
    b832:	6838      	ldr	r0, [r7, #0]
    b834:	4b0c      	ldr	r3, [pc, #48]	; (b868 <_usb_d_dev_handle_eps+0xac>)
    b836:	4798      	blx	r3
    b838:	e013      	b.n	b862 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    b83a:	683b      	ldr	r3, [r7, #0]
    b83c:	7cdb      	ldrb	r3, [r3, #19]
    b83e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b842:	b2db      	uxtb	r3, r3
    b844:	2b00      	cmp	r3, #0
    b846:	d005      	beq.n	b854 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    b848:	7abb      	ldrb	r3, [r7, #10]
    b84a:	4619      	mov	r1, r3
    b84c:	6838      	ldr	r0, [r7, #0]
    b84e:	4b07      	ldr	r3, [pc, #28]	; (b86c <_usb_d_dev_handle_eps+0xb0>)
    b850:	4798      	blx	r3
    b852:	e006      	b.n	b862 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    b854:	7abb      	ldrb	r3, [r7, #10]
    b856:	4619      	mov	r1, r3
    b858:	6838      	ldr	r0, [r7, #0]
    b85a:	4b05      	ldr	r3, [pc, #20]	; (b870 <_usb_d_dev_handle_eps+0xb4>)
    b85c:	4798      	blx	r3
    b85e:	e000      	b.n	b862 <_usb_d_dev_handle_eps+0xa6>
		return;
    b860:	bf00      	nop
		}
	}
}
    b862:	3710      	adds	r7, #16
    b864:	46bd      	mov	sp, r7
    b866:	bd80      	pop	{r7, pc}
    b868:	0000b641 	.word	0x0000b641
    b86c:	0000b695 	.word	0x0000b695
    b870:	0000b729 	.word	0x0000b729

0000b874 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    b874:	b580      	push	{r7, lr}
    b876:	b084      	sub	sp, #16
    b878:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    b87a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b87e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    b880:	68bb      	ldr	r3, [r7, #8]
    b882:	8c1b      	ldrh	r3, [r3, #32]
    b884:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    b886:	88fb      	ldrh	r3, [r7, #6]
    b888:	2b00      	cmp	r3, #0
    b88a:	d104      	bne.n	b896 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    b88c:	4b13      	ldr	r3, [pc, #76]	; (b8dc <_usb_d_dev_handler+0x68>)
    b88e:	4798      	blx	r3
    b890:	4603      	mov	r3, r0
    b892:	2b00      	cmp	r3, #0
    b894:	d11e      	bne.n	b8d4 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    b896:	2300      	movs	r3, #0
    b898:	73fb      	strb	r3, [r7, #15]
    b89a:	e017      	b.n	b8cc <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    b89c:	7bfa      	ldrb	r2, [r7, #15]
    b89e:	4613      	mov	r3, r2
    b8a0:	009b      	lsls	r3, r3, #2
    b8a2:	4413      	add	r3, r2
    b8a4:	009b      	lsls	r3, r3, #2
    b8a6:	3310      	adds	r3, #16
    b8a8:	4a0d      	ldr	r2, [pc, #52]	; (b8e0 <_usb_d_dev_handler+0x6c>)
    b8aa:	4413      	add	r3, r2
    b8ac:	3304      	adds	r3, #4
    b8ae:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    b8b0:	683b      	ldr	r3, [r7, #0]
    b8b2:	7c9b      	ldrb	r3, [r3, #18]
    b8b4:	2bff      	cmp	r3, #255	; 0xff
    b8b6:	d005      	beq.n	b8c4 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    b8b8:	88fb      	ldrh	r3, [r7, #6]
    b8ba:	6839      	ldr	r1, [r7, #0]
    b8bc:	4618      	mov	r0, r3
    b8be:	4b09      	ldr	r3, [pc, #36]	; (b8e4 <_usb_d_dev_handler+0x70>)
    b8c0:	4798      	blx	r3
    b8c2:	e000      	b.n	b8c6 <_usb_d_dev_handler+0x52>
			continue;
    b8c4:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    b8c6:	7bfb      	ldrb	r3, [r7, #15]
    b8c8:	3301      	adds	r3, #1
    b8ca:	73fb      	strb	r3, [r7, #15]
    b8cc:	7bfb      	ldrb	r3, [r7, #15]
    b8ce:	2b08      	cmp	r3, #8
    b8d0:	d9e4      	bls.n	b89c <_usb_d_dev_handler+0x28>
    b8d2:	e000      	b.n	b8d6 <_usb_d_dev_handler+0x62>
			return;
    b8d4:	bf00      	nop
	}
}
    b8d6:	3710      	adds	r7, #16
    b8d8:	46bd      	mov	sp, r7
    b8da:	bd80      	pop	{r7, pc}
    b8dc:	0000adcd 	.word	0x0000adcd
    b8e0:	20001088 	.word	0x20001088
    b8e4:	0000b7bd 	.word	0x0000b7bd

0000b8e8 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    b8e8:	b580      	push	{r7, lr}
    b8ea:	b082      	sub	sp, #8
    b8ec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    b8ee:	2300      	movs	r3, #0
    b8f0:	71fb      	strb	r3, [r7, #7]
    b8f2:	e023      	b.n	b93c <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    b8f4:	79fa      	ldrb	r2, [r7, #7]
    b8f6:	4613      	mov	r3, r2
    b8f8:	009b      	lsls	r3, r3, #2
    b8fa:	4413      	add	r3, r2
    b8fc:	009b      	lsls	r3, r3, #2
    b8fe:	3310      	adds	r3, #16
    b900:	4a14      	ldr	r2, [pc, #80]	; (b954 <_usb_d_dev_reset_epts+0x6c>)
    b902:	4413      	add	r3, r2
    b904:	3304      	adds	r3, #4
    b906:	2103      	movs	r1, #3
    b908:	4618      	mov	r0, r3
    b90a:	4b13      	ldr	r3, [pc, #76]	; (b958 <_usb_d_dev_reset_epts+0x70>)
    b90c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    b90e:	79fa      	ldrb	r2, [r7, #7]
    b910:	4910      	ldr	r1, [pc, #64]	; (b954 <_usb_d_dev_reset_epts+0x6c>)
    b912:	4613      	mov	r3, r2
    b914:	009b      	lsls	r3, r3, #2
    b916:	4413      	add	r3, r2
    b918:	009b      	lsls	r3, r3, #2
    b91a:	440b      	add	r3, r1
    b91c:	3326      	adds	r3, #38	; 0x26
    b91e:	22ff      	movs	r2, #255	; 0xff
    b920:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    b922:	79fa      	ldrb	r2, [r7, #7]
    b924:	490b      	ldr	r1, [pc, #44]	; (b954 <_usb_d_dev_reset_epts+0x6c>)
    b926:	4613      	mov	r3, r2
    b928:	009b      	lsls	r3, r3, #2
    b92a:	4413      	add	r3, r2
    b92c:	009b      	lsls	r3, r3, #2
    b92e:	440b      	add	r3, r1
    b930:	3327      	adds	r3, #39	; 0x27
    b932:	2200      	movs	r2, #0
    b934:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    b936:	79fb      	ldrb	r3, [r7, #7]
    b938:	3301      	adds	r3, #1
    b93a:	71fb      	strb	r3, [r7, #7]
    b93c:	79fb      	ldrb	r3, [r7, #7]
    b93e:	2b08      	cmp	r3, #8
    b940:	d9d8      	bls.n	b8f4 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    b942:	22a0      	movs	r2, #160	; 0xa0
    b944:	2100      	movs	r1, #0
    b946:	4805      	ldr	r0, [pc, #20]	; (b95c <_usb_d_dev_reset_epts+0x74>)
    b948:	4b05      	ldr	r3, [pc, #20]	; (b960 <_usb_d_dev_reset_epts+0x78>)
    b94a:	4798      	blx	r3
}
    b94c:	bf00      	nop
    b94e:	3708      	adds	r7, #8
    b950:	46bd      	mov	sp, r7
    b952:	bd80      	pop	{r7, pc}
    b954:	20001088 	.word	0x20001088
    b958:	0000c1ad 	.word	0x0000c1ad
    b95c:	20001150 	.word	0x20001150
    b960:	00010e5d 	.word	0x00010e5d

0000b964 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    b964:	b580      	push	{r7, lr}
    b966:	b084      	sub	sp, #16
    b968:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    b96a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b96e:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    b970:	2301      	movs	r3, #1
    b972:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    b974:	2304      	movs	r3, #4
    b976:	713b      	strb	r3, [r7, #4]
    b978:	2300      	movs	r3, #0
    b97a:	717b      	strb	r3, [r7, #5]
    b97c:	2300      	movs	r3, #0
    b97e:	71bb      	strb	r3, [r7, #6]
    b980:	2300      	movs	r3, #0
    b982:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    b984:	2101      	movs	r1, #1
    b986:	68f8      	ldr	r0, [r7, #12]
    b988:	4b26      	ldr	r3, [pc, #152]	; (ba24 <_usb_d_dev_init+0xc0>)
    b98a:	4798      	blx	r3
    b98c:	4603      	mov	r3, r0
    b98e:	f083 0301 	eor.w	r3, r3, #1
    b992:	b2db      	uxtb	r3, r3
    b994:	2b00      	cmp	r3, #0
    b996:	d011      	beq.n	b9bc <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    b998:	2102      	movs	r1, #2
    b99a:	68f8      	ldr	r0, [r7, #12]
    b99c:	4b22      	ldr	r3, [pc, #136]	; (ba28 <_usb_d_dev_init+0xc4>)
    b99e:	4798      	blx	r3
    b9a0:	4603      	mov	r3, r0
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d006      	beq.n	b9b4 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    b9a6:	68f8      	ldr	r0, [r7, #12]
    b9a8:	4b20      	ldr	r3, [pc, #128]	; (ba2c <_usb_d_dev_init+0xc8>)
    b9aa:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    b9ac:	2102      	movs	r1, #2
    b9ae:	68f8      	ldr	r0, [r7, #12]
    b9b0:	4b1f      	ldr	r3, [pc, #124]	; (ba30 <_usb_d_dev_init+0xcc>)
    b9b2:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    b9b4:	2101      	movs	r1, #1
    b9b6:	68f8      	ldr	r0, [r7, #12]
    b9b8:	4b1e      	ldr	r3, [pc, #120]	; (ba34 <_usb_d_dev_init+0xd0>)
    b9ba:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    b9bc:	2101      	movs	r1, #1
    b9be:	68f8      	ldr	r0, [r7, #12]
    b9c0:	4b1b      	ldr	r3, [pc, #108]	; (ba30 <_usb_d_dev_init+0xcc>)
    b9c2:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    b9c4:	4b1c      	ldr	r3, [pc, #112]	; (ba38 <_usb_d_dev_init+0xd4>)
    b9c6:	4a1d      	ldr	r2, [pc, #116]	; (ba3c <_usb_d_dev_init+0xd8>)
    b9c8:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    b9ca:	4b1b      	ldr	r3, [pc, #108]	; (ba38 <_usb_d_dev_init+0xd4>)
    b9cc:	4a1b      	ldr	r2, [pc, #108]	; (ba3c <_usb_d_dev_init+0xd8>)
    b9ce:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    b9d0:	4b19      	ldr	r3, [pc, #100]	; (ba38 <_usb_d_dev_init+0xd4>)
    b9d2:	4a1a      	ldr	r2, [pc, #104]	; (ba3c <_usb_d_dev_init+0xd8>)
    b9d4:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    b9d6:	4b18      	ldr	r3, [pc, #96]	; (ba38 <_usb_d_dev_init+0xd4>)
    b9d8:	4a18      	ldr	r2, [pc, #96]	; (ba3c <_usb_d_dev_init+0xd8>)
    b9da:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    b9dc:	4b16      	ldr	r3, [pc, #88]	; (ba38 <_usb_d_dev_init+0xd4>)
    b9de:	4a17      	ldr	r2, [pc, #92]	; (ba3c <_usb_d_dev_init+0xd8>)
    b9e0:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    b9e2:	4b17      	ldr	r3, [pc, #92]	; (ba40 <_usb_d_dev_init+0xdc>)
    b9e4:	4798      	blx	r3

	_usb_load_calib();
    b9e6:	4b17      	ldr	r3, [pc, #92]	; (ba44 <_usb_d_dev_init+0xe0>)
    b9e8:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    b9ea:	2104      	movs	r1, #4
    b9ec:	68f8      	ldr	r0, [r7, #12]
    b9ee:	4b11      	ldr	r3, [pc, #68]	; (ba34 <_usb_d_dev_init+0xd0>)
    b9f0:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    b9f2:	4b15      	ldr	r3, [pc, #84]	; (ba48 <_usb_d_dev_init+0xe4>)
    b9f4:	4619      	mov	r1, r3
    b9f6:	68f8      	ldr	r0, [r7, #12]
    b9f8:	4b14      	ldr	r3, [pc, #80]	; (ba4c <_usb_d_dev_init+0xe8>)
    b9fa:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    b9fc:	7afb      	ldrb	r3, [r7, #11]
    b9fe:	f107 0210 	add.w	r2, r7, #16
    ba02:	4413      	add	r3, r2
    ba04:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    ba08:	f043 0301 	orr.w	r3, r3, #1
    ba0c:	b2db      	uxtb	r3, r3
    ba0e:	b29b      	uxth	r3, r3
    ba10:	4619      	mov	r1, r3
    ba12:	68f8      	ldr	r0, [r7, #12]
    ba14:	4b0e      	ldr	r3, [pc, #56]	; (ba50 <_usb_d_dev_init+0xec>)
    ba16:	4798      	blx	r3

	return ERR_NONE;
    ba18:	2300      	movs	r3, #0
}
    ba1a:	4618      	mov	r0, r3
    ba1c:	3710      	adds	r7, #16
    ba1e:	46bd      	mov	sp, r7
    ba20:	bd80      	pop	{r7, pc}
    ba22:	bf00      	nop
    ba24:	00009ffd 	.word	0x00009ffd
    ba28:	0000a34d 	.word	0x0000a34d
    ba2c:	0000a321 	.word	0x0000a321
    ba30:	00009fd3 	.word	0x00009fd3
    ba34:	0000a37d 	.word	0x0000a37d
    ba38:	20001088 	.word	0x20001088
    ba3c:	0000a445 	.word	0x0000a445
    ba40:	0000b8e9 	.word	0x0000b8e9
    ba44:	0000a45d 	.word	0x0000a45d
    ba48:	20001150 	.word	0x20001150
    ba4c:	0000a429 	.word	0x0000a429
    ba50:	0000a3ed 	.word	0x0000a3ed

0000ba54 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ba54:	b580      	push	{r7, lr}
    ba56:	b082      	sub	sp, #8
    ba58:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ba5a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ba5e:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ba60:	2103      	movs	r1, #3
    ba62:	6878      	ldr	r0, [r7, #4]
    ba64:	4b17      	ldr	r3, [pc, #92]	; (bac4 <_usb_d_dev_enable+0x70>)
    ba66:	4798      	blx	r3
    ba68:	4603      	mov	r3, r0
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	d002      	beq.n	ba74 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ba6e:	f06f 0310 	mvn.w	r3, #16
    ba72:	e023      	b.n	babc <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    ba74:	6878      	ldr	r0, [r7, #4]
    ba76:	4b14      	ldr	r3, [pc, #80]	; (bac8 <_usb_d_dev_enable+0x74>)
    ba78:	4798      	blx	r3
    ba7a:	4603      	mov	r3, r0
    ba7c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    ba7e:	78fb      	ldrb	r3, [r7, #3]
    ba80:	f003 0302 	and.w	r3, r3, #2
    ba84:	2b00      	cmp	r3, #0
    ba86:	d107      	bne.n	ba98 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    ba88:	78fb      	ldrb	r3, [r7, #3]
    ba8a:	f043 0302 	orr.w	r3, r3, #2
    ba8e:	b2db      	uxtb	r3, r3
    ba90:	4619      	mov	r1, r3
    ba92:	6878      	ldr	r0, [r7, #4]
    ba94:	4b0d      	ldr	r3, [pc, #52]	; (bacc <_usb_d_dev_enable+0x78>)
    ba96:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ba98:	2050      	movs	r0, #80	; 0x50
    ba9a:	4b0d      	ldr	r3, [pc, #52]	; (bad0 <_usb_d_dev_enable+0x7c>)
    ba9c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ba9e:	2051      	movs	r0, #81	; 0x51
    baa0:	4b0b      	ldr	r3, [pc, #44]	; (bad0 <_usb_d_dev_enable+0x7c>)
    baa2:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    baa4:	2052      	movs	r0, #82	; 0x52
    baa6:	4b0a      	ldr	r3, [pc, #40]	; (bad0 <_usb_d_dev_enable+0x7c>)
    baa8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    baaa:	2053      	movs	r0, #83	; 0x53
    baac:	4b08      	ldr	r3, [pc, #32]	; (bad0 <_usb_d_dev_enable+0x7c>)
    baae:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    bab0:	f240 218d 	movw	r1, #653	; 0x28d
    bab4:	6878      	ldr	r0, [r7, #4]
    bab6:	4b07      	ldr	r3, [pc, #28]	; (bad4 <_usb_d_dev_enable+0x80>)
    bab8:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    baba:	2300      	movs	r3, #0
}
    babc:	4618      	mov	r0, r3
    babe:	3708      	adds	r7, #8
    bac0:	46bd      	mov	sp, r7
    bac2:	bd80      	pop	{r7, pc}
    bac4:	0000a2f7 	.word	0x0000a2f7
    bac8:	0000a3a5 	.word	0x0000a3a5
    bacc:	0000a37d 	.word	0x0000a37d
    bad0:	00009f09 	.word	0x00009f09
    bad4:	0000a2a1 	.word	0x0000a2a1

0000bad8 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    bad8:	b580      	push	{r7, lr}
    bada:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    badc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bae0:	4b01      	ldr	r3, [pc, #4]	; (bae8 <_usb_d_dev_attach+0x10>)
    bae2:	4798      	blx	r3
}
    bae4:	bf00      	nop
    bae6:	bd80      	pop	{r7, pc}
    bae8:	0000a3c9 	.word	0x0000a3c9

0000baec <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    baec:	b580      	push	{r7, lr}
    baee:	b082      	sub	sp, #8
    baf0:	af00      	add	r7, sp, #0
    baf2:	4603      	mov	r3, r0
    baf4:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    baf6:	79fb      	ldrb	r3, [r7, #7]
    baf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bafc:	b2db      	uxtb	r3, r3
    bafe:	4619      	mov	r1, r3
    bb00:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb04:	4b02      	ldr	r3, [pc, #8]	; (bb10 <_usb_d_dev_set_address+0x24>)
    bb06:	4798      	blx	r3
}
    bb08:	bf00      	nop
    bb0a:	3708      	adds	r7, #8
    bb0c:	46bd      	mov	sp, r7
    bb0e:	bd80      	pop	{r7, pc}
    bb10:	0000a40b 	.word	0x0000a40b

0000bb14 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bb14:	b590      	push	{r4, r7, lr}
    bb16:	b085      	sub	sp, #20
    bb18:	af00      	add	r7, sp, #0
    bb1a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    bb1c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bb20:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bb22:	687b      	ldr	r3, [r7, #4]
    bb24:	7c9b      	ldrb	r3, [r3, #18]
    bb26:	f003 030f 	and.w	r3, r3, #15
    bb2a:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bb2c:	687b      	ldr	r3, [r7, #4]
    bb2e:	68db      	ldr	r3, [r3, #12]
    bb30:	461a      	mov	r2, r3
    bb32:	7afb      	ldrb	r3, [r7, #11]
    bb34:	2100      	movs	r1, #0
    bb36:	4618      	mov	r0, r3
    bb38:	4b0f      	ldr	r3, [pc, #60]	; (bb78 <_usb_d_dev_trans_setup+0x64>)
    bb3a:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bb3c:	687b      	ldr	r3, [r7, #4]
    bb3e:	8a1b      	ldrh	r3, [r3, #16]
    bb40:	461a      	mov	r2, r3
    bb42:	7af8      	ldrb	r0, [r7, #11]
    bb44:	2300      	movs	r3, #0
    bb46:	2100      	movs	r1, #0
    bb48:	4c0c      	ldr	r4, [pc, #48]	; (bb7c <_usb_d_dev_trans_setup+0x68>)
    bb4a:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    bb4c:	7afb      	ldrb	r3, [r7, #11]
    bb4e:	22b0      	movs	r2, #176	; 0xb0
    bb50:	4619      	mov	r1, r3
    bb52:	68f8      	ldr	r0, [r7, #12]
    bb54:	4b0a      	ldr	r3, [pc, #40]	; (bb80 <_usb_d_dev_trans_setup+0x6c>)
    bb56:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    bb58:	7afb      	ldrb	r3, [r7, #11]
    bb5a:	2200      	movs	r2, #0
    bb5c:	2100      	movs	r1, #0
    bb5e:	4618      	mov	r0, r3
    bb60:	4b08      	ldr	r3, [pc, #32]	; (bb84 <_usb_d_dev_trans_setup+0x70>)
    bb62:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    bb64:	7afb      	ldrb	r3, [r7, #11]
    bb66:	2210      	movs	r2, #16
    bb68:	4619      	mov	r1, r3
    bb6a:	68f8      	ldr	r0, [r7, #12]
    bb6c:	4b06      	ldr	r3, [pc, #24]	; (bb88 <_usb_d_dev_trans_setup+0x74>)
    bb6e:	4798      	blx	r3
}
    bb70:	bf00      	nop
    bb72:	3714      	adds	r7, #20
    bb74:	46bd      	mov	sp, r7
    bb76:	bd90      	pop	{r4, r7, pc}
    bb78:	0000a8a9 	.word	0x0000a8a9
    bb7c:	0000aa31 	.word	0x0000aa31
    bb80:	0000a109 	.word	0x0000a109
    bb84:	0000ab01 	.word	0x0000ab01
    bb88:	0000a15d 	.word	0x0000a15d

0000bb8c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    bb8c:	b580      	push	{r7, lr}
    bb8e:	b088      	sub	sp, #32
    bb90:	af00      	add	r7, sp, #0
    bb92:	4603      	mov	r3, r0
    bb94:	71fb      	strb	r3, [r7, #7]
    bb96:	460b      	mov	r3, r1
    bb98:	71bb      	strb	r3, [r7, #6]
    bb9a:	4613      	mov	r3, r2
    bb9c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    bb9e:	79fb      	ldrb	r3, [r7, #7]
    bba0:	f003 030f 	and.w	r3, r3, #15
    bba4:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    bba6:	79fb      	ldrb	r3, [r7, #7]
    bba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bbac:	2b00      	cmp	r3, #0
    bbae:	bf14      	ite	ne
    bbb0:	2301      	movne	r3, #1
    bbb2:	2300      	moveq	r3, #0
    bbb4:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bbb6:	7fba      	ldrb	r2, [r7, #30]
    bbb8:	7ffb      	ldrb	r3, [r7, #31]
    bbba:	4611      	mov	r1, r2
    bbbc:	4618      	mov	r0, r3
    bbbe:	4b3e      	ldr	r3, [pc, #248]	; (bcb8 <_usb_d_dev_ep_init+0x12c>)
    bbc0:	4798      	blx	r3
    bbc2:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    bbc4:	79bb      	ldrb	r3, [r7, #6]
    bbc6:	f003 0303 	and.w	r3, r3, #3
    bbca:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    bbcc:	7ffa      	ldrb	r2, [r7, #31]
    bbce:	4613      	mov	r3, r2
    bbd0:	005b      	lsls	r3, r3, #1
    bbd2:	4413      	add	r3, r2
    bbd4:	009b      	lsls	r3, r3, #2
    bbd6:	4a39      	ldr	r2, [pc, #228]	; (bcbc <_usb_d_dev_ep_init+0x130>)
    bbd8:	4413      	add	r3, r2
    bbda:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    bbdc:	7ffb      	ldrb	r3, [r7, #31]
    bbde:	2b04      	cmp	r3, #4
    bbe0:	d902      	bls.n	bbe8 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    bbe2:	f06f 0311 	mvn.w	r3, #17
    bbe6:	e063      	b.n	bcb0 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    bbe8:	69bb      	ldr	r3, [r7, #24]
    bbea:	7c9b      	ldrb	r3, [r3, #18]
    bbec:	2bff      	cmp	r3, #255	; 0xff
    bbee:	d002      	beq.n	bbf6 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    bbf0:	f06f 0313 	mvn.w	r3, #19
    bbf4:	e05c      	b.n	bcb0 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    bbf6:	7dfb      	ldrb	r3, [r7, #23]
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	d11f      	bne.n	bc3c <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    bbfc:	7fbb      	ldrb	r3, [r7, #30]
    bbfe:	2b00      	cmp	r3, #0
    bc00:	bf14      	ite	ne
    bc02:	2301      	movne	r3, #1
    bc04:	2300      	moveq	r3, #0
    bc06:	b2db      	uxtb	r3, r3
    bc08:	f083 0301 	eor.w	r3, r3, #1
    bc0c:	b2db      	uxtb	r3, r3
    bc0e:	f003 0301 	and.w	r3, r3, #1
    bc12:	b2da      	uxtb	r2, r3
    bc14:	7ffb      	ldrb	r3, [r7, #31]
    bc16:	4611      	mov	r1, r2
    bc18:	4618      	mov	r0, r3
    bc1a:	4b27      	ldr	r3, [pc, #156]	; (bcb8 <_usb_d_dev_ep_init+0x12c>)
    bc1c:	4798      	blx	r3
    bc1e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    bc20:	68fb      	ldr	r3, [r7, #12]
    bc22:	7c9b      	ldrb	r3, [r3, #18]
    bc24:	2bff      	cmp	r3, #255	; 0xff
    bc26:	d002      	beq.n	bc2e <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    bc28:	f06f 0313 	mvn.w	r3, #19
    bc2c:	e040      	b.n	bcb0 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    bc2e:	693b      	ldr	r3, [r7, #16]
    bc30:	681b      	ldr	r3, [r3, #0]
    bc32:	2b00      	cmp	r3, #0
    bc34:	d102      	bne.n	bc3c <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    bc36:	f06f 0312 	mvn.w	r3, #18
    bc3a:	e039      	b.n	bcb0 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    bc3c:	7fbb      	ldrb	r3, [r7, #30]
    bc3e:	2b00      	cmp	r3, #0
    bc40:	d007      	beq.n	bc52 <_usb_d_dev_ep_init+0xc6>
    bc42:	693b      	ldr	r3, [r7, #16]
    bc44:	685b      	ldr	r3, [r3, #4]
    bc46:	2b00      	cmp	r3, #0
    bc48:	bf14      	ite	ne
    bc4a:	2301      	movne	r3, #1
    bc4c:	2300      	moveq	r3, #0
    bc4e:	b2db      	uxtb	r3, r3
    bc50:	e006      	b.n	bc60 <_usb_d_dev_ep_init+0xd4>
    bc52:	693b      	ldr	r3, [r7, #16]
    bc54:	681b      	ldr	r3, [r3, #0]
    bc56:	2b00      	cmp	r3, #0
    bc58:	bf14      	ite	ne
    bc5a:	2301      	movne	r3, #1
    bc5c:	2300      	moveq	r3, #0
    bc5e:	b2db      	uxtb	r3, r3
    bc60:	2b00      	cmp	r3, #0
    bc62:	d00f      	beq.n	bc84 <_usb_d_dev_ep_init+0xf8>
    bc64:	7fbb      	ldrb	r3, [r7, #30]
    bc66:	2b00      	cmp	r3, #0
    bc68:	d003      	beq.n	bc72 <_usb_d_dev_ep_init+0xe6>
    bc6a:	693b      	ldr	r3, [r7, #16]
    bc6c:	895b      	ldrh	r3, [r3, #10]
    bc6e:	461a      	mov	r2, r3
    bc70:	e002      	b.n	bc78 <_usb_d_dev_ep_init+0xec>
    bc72:	693b      	ldr	r3, [r7, #16]
    bc74:	891b      	ldrh	r3, [r3, #8]
    bc76:	461a      	mov	r2, r3
    bc78:	88bb      	ldrh	r3, [r7, #4]
    bc7a:	429a      	cmp	r2, r3
    bc7c:	da02      	bge.n	bc84 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    bc7e:	f06f 0312 	mvn.w	r3, #18
    bc82:	e015      	b.n	bcb0 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    bc84:	7fbb      	ldrb	r3, [r7, #30]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d002      	beq.n	bc90 <_usb_d_dev_ep_init+0x104>
    bc8a:	693b      	ldr	r3, [r7, #16]
    bc8c:	685b      	ldr	r3, [r3, #4]
    bc8e:	e001      	b.n	bc94 <_usb_d_dev_ep_init+0x108>
    bc90:	693b      	ldr	r3, [r7, #16]
    bc92:	681b      	ldr	r3, [r3, #0]
    bc94:	69ba      	ldr	r2, [r7, #24]
    bc96:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    bc98:	69bb      	ldr	r3, [r7, #24]
    bc9a:	88ba      	ldrh	r2, [r7, #4]
    bc9c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    bc9e:	7dfb      	ldrb	r3, [r7, #23]
    bca0:	3301      	adds	r3, #1
    bca2:	b2da      	uxtb	r2, r3
    bca4:	69bb      	ldr	r3, [r7, #24]
    bca6:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    bca8:	69bb      	ldr	r3, [r7, #24]
    bcaa:	79fa      	ldrb	r2, [r7, #7]
    bcac:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    bcae:	2300      	movs	r3, #0
}
    bcb0:	4618      	mov	r0, r3
    bcb2:	3720      	adds	r7, #32
    bcb4:	46bd      	mov	sp, r7
    bcb6:	bd80      	pop	{r7, pc}
    bcb8:	0000abbd 	.word	0x0000abbd
    bcbc:	00011494 	.word	0x00011494

0000bcc0 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    bcc0:	b580      	push	{r7, lr}
    bcc2:	b086      	sub	sp, #24
    bcc4:	af00      	add	r7, sp, #0
    bcc6:	4603      	mov	r3, r0
    bcc8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    bcca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bcce:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    bcd0:	79fb      	ldrb	r3, [r7, #7]
    bcd2:	f003 030f 	and.w	r3, r3, #15
    bcd6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    bcd8:	79fb      	ldrb	r3, [r7, #7]
    bcda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bcde:	2b00      	cmp	r3, #0
    bce0:	bf14      	ite	ne
    bce2:	2301      	movne	r3, #1
    bce4:	2300      	moveq	r3, #0
    bce6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bce8:	7cba      	ldrb	r2, [r7, #18]
    bcea:	7cfb      	ldrb	r3, [r7, #19]
    bcec:	4611      	mov	r1, r2
    bcee:	4618      	mov	r0, r3
    bcf0:	4b2a      	ldr	r3, [pc, #168]	; (bd9c <_usb_d_dev_ep_deinit+0xdc>)
    bcf2:	4798      	blx	r3
    bcf4:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    bcf6:	7cfb      	ldrb	r3, [r7, #19]
    bcf8:	2b04      	cmp	r3, #4
    bcfa:	d84a      	bhi.n	bd92 <_usb_d_dev_ep_deinit+0xd2>
    bcfc:	68fb      	ldr	r3, [r7, #12]
    bcfe:	7c9b      	ldrb	r3, [r3, #18]
    bd00:	2bff      	cmp	r3, #255	; 0xff
    bd02:	d046      	beq.n	bd92 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    bd04:	7cbb      	ldrb	r3, [r7, #18]
    bd06:	2203      	movs	r2, #3
    bd08:	4619      	mov	r1, r3
    bd0a:	68f8      	ldr	r0, [r7, #12]
    bd0c:	4b24      	ldr	r3, [pc, #144]	; (bda0 <_usb_d_dev_ep_deinit+0xe0>)
    bd0e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    bd10:	68fb      	ldr	r3, [r7, #12]
    bd12:	7cdb      	ldrb	r3, [r3, #19]
    bd14:	f003 0307 	and.w	r3, r3, #7
    bd18:	b2db      	uxtb	r3, r3
    bd1a:	2b01      	cmp	r3, #1
    bd1c:	d107      	bne.n	bd2e <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    bd1e:	79fb      	ldrb	r3, [r7, #7]
    bd20:	697a      	ldr	r2, [r7, #20]
    bd22:	3308      	adds	r3, #8
    bd24:	015b      	lsls	r3, r3, #5
    bd26:	4413      	add	r3, r2
    bd28:	2200      	movs	r2, #0
    bd2a:	701a      	strb	r2, [r3, #0]
    bd2c:	e02a      	b.n	bd84 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    bd2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bd32:	2b00      	cmp	r3, #0
    bd34:	da15      	bge.n	bd62 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    bd36:	79fb      	ldrb	r3, [r7, #7]
    bd38:	f003 030f 	and.w	r3, r3, #15
    bd3c:	79fa      	ldrb	r2, [r7, #7]
    bd3e:	f002 020f 	and.w	r2, r2, #15
    bd42:	6979      	ldr	r1, [r7, #20]
    bd44:	3208      	adds	r2, #8
    bd46:	0152      	lsls	r2, r2, #5
    bd48:	440a      	add	r2, r1
    bd4a:	7812      	ldrb	r2, [r2, #0]
    bd4c:	b2d2      	uxtb	r2, r2
    bd4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    bd52:	b2d1      	uxtb	r1, r2
    bd54:	697a      	ldr	r2, [r7, #20]
    bd56:	3308      	adds	r3, #8
    bd58:	015b      	lsls	r3, r3, #5
    bd5a:	4413      	add	r3, r2
    bd5c:	460a      	mov	r2, r1
    bd5e:	701a      	strb	r2, [r3, #0]
    bd60:	e010      	b.n	bd84 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    bd62:	79fb      	ldrb	r3, [r7, #7]
    bd64:	79fa      	ldrb	r2, [r7, #7]
    bd66:	6979      	ldr	r1, [r7, #20]
    bd68:	3208      	adds	r2, #8
    bd6a:	0152      	lsls	r2, r2, #5
    bd6c:	440a      	add	r2, r1
    bd6e:	7812      	ldrb	r2, [r2, #0]
    bd70:	b2d2      	uxtb	r2, r2
    bd72:	f022 0207 	bic.w	r2, r2, #7
    bd76:	b2d1      	uxtb	r1, r2
    bd78:	697a      	ldr	r2, [r7, #20]
    bd7a:	3308      	adds	r3, #8
    bd7c:	015b      	lsls	r3, r3, #5
    bd7e:	4413      	add	r3, r2
    bd80:	460a      	mov	r2, r1
    bd82:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    bd84:	68fb      	ldr	r3, [r7, #12]
    bd86:	2200      	movs	r2, #0
    bd88:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    bd8a:	68fb      	ldr	r3, [r7, #12]
    bd8c:	22ff      	movs	r2, #255	; 0xff
    bd8e:	749a      	strb	r2, [r3, #18]
    bd90:	e000      	b.n	bd94 <_usb_d_dev_ep_deinit+0xd4>
		return;
    bd92:	bf00      	nop
}
    bd94:	3718      	adds	r7, #24
    bd96:	46bd      	mov	sp, r7
    bd98:	bd80      	pop	{r7, pc}
    bd9a:	bf00      	nop
    bd9c:	0000abbd 	.word	0x0000abbd
    bda0:	0000c1f5 	.word	0x0000c1f5

0000bda4 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    bda4:	b5b0      	push	{r4, r5, r7, lr}
    bda6:	b088      	sub	sp, #32
    bda8:	af00      	add	r7, sp, #0
    bdaa:	4603      	mov	r3, r0
    bdac:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    bdae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bdb2:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    bdb4:	79fb      	ldrb	r3, [r7, #7]
    bdb6:	f003 030f 	and.w	r3, r3, #15
    bdba:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    bdbc:	79fb      	ldrb	r3, [r7, #7]
    bdbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bdc2:	2b00      	cmp	r3, #0
    bdc4:	bf14      	ite	ne
    bdc6:	2301      	movne	r3, #1
    bdc8:	2300      	moveq	r3, #0
    bdca:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    bdcc:	7eba      	ldrb	r2, [r7, #26]
    bdce:	7efb      	ldrb	r3, [r7, #27]
    bdd0:	4611      	mov	r1, r2
    bdd2:	4618      	mov	r0, r3
    bdd4:	4b70      	ldr	r3, [pc, #448]	; (bf98 <_usb_d_dev_ep_enable+0x1f4>)
    bdd6:	4798      	blx	r3
    bdd8:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    bdda:	7efb      	ldrb	r3, [r7, #27]
    bddc:	4619      	mov	r1, r3
    bdde:	69f8      	ldr	r0, [r7, #28]
    bde0:	4b6e      	ldr	r3, [pc, #440]	; (bf9c <_usb_d_dev_ep_enable+0x1f8>)
    bde2:	4798      	blx	r3
    bde4:	4603      	mov	r3, r0
    bde6:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    bde8:	7efb      	ldrb	r3, [r7, #27]
    bdea:	2b04      	cmp	r3, #4
    bdec:	d803      	bhi.n	bdf6 <_usb_d_dev_ep_enable+0x52>
    bdee:	697b      	ldr	r3, [r7, #20]
    bdf0:	7c9b      	ldrb	r3, [r3, #18]
    bdf2:	2bff      	cmp	r3, #255	; 0xff
    bdf4:	d102      	bne.n	bdfc <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    bdf6:	f06f 0311 	mvn.w	r3, #17
    bdfa:	e0c8      	b.n	bf8e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    bdfc:	7efb      	ldrb	r3, [r7, #27]
    bdfe:	015b      	lsls	r3, r3, #5
    be00:	4a67      	ldr	r2, [pc, #412]	; (bfa0 <_usb_d_dev_ep_enable+0x1fc>)
    be02:	4413      	add	r3, r2
    be04:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    be06:	697b      	ldr	r3, [r7, #20]
    be08:	7cdb      	ldrb	r3, [r3, #19]
    be0a:	f003 0307 	and.w	r3, r3, #7
    be0e:	b2db      	uxtb	r3, r3
    be10:	2b01      	cmp	r3, #1
    be12:	d14b      	bne.n	beac <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    be14:	7cfb      	ldrb	r3, [r7, #19]
    be16:	f003 0377 	and.w	r3, r3, #119	; 0x77
    be1a:	2b00      	cmp	r3, #0
    be1c:	d002      	beq.n	be24 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    be1e:	f06f 0313 	mvn.w	r3, #19
    be22:	e0b4      	b.n	bf8e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    be24:	7efb      	ldrb	r3, [r7, #27]
    be26:	2211      	movs	r2, #17
    be28:	4619      	mov	r1, r3
    be2a:	69f8      	ldr	r0, [r7, #28]
    be2c:	4b5d      	ldr	r3, [pc, #372]	; (bfa4 <_usb_d_dev_ep_enable+0x200>)
    be2e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    be30:	697b      	ldr	r3, [r7, #20]
    be32:	8a1b      	ldrh	r3, [r3, #16]
    be34:	039b      	lsls	r3, r3, #14
    be36:	4c5c      	ldr	r4, [pc, #368]	; (bfa8 <_usb_d_dev_ep_enable+0x204>)
    be38:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    be3a:	697b      	ldr	r3, [r7, #20]
    be3c:	8a1b      	ldrh	r3, [r3, #16]
    be3e:	4618      	mov	r0, r3
    be40:	4b5a      	ldr	r3, [pc, #360]	; (bfac <_usb_d_dev_ep_enable+0x208>)
    be42:	4798      	blx	r3
    be44:	4603      	mov	r3, r0
    be46:	071b      	lsls	r3, r3, #28
    be48:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    be4c:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    be50:	68fb      	ldr	r3, [r7, #12]
    be52:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    be54:	68fb      	ldr	r3, [r7, #12]
    be56:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    be5a:	697b      	ldr	r3, [r7, #20]
    be5c:	8a1b      	ldrh	r3, [r3, #16]
    be5e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    be62:	697b      	ldr	r3, [r7, #20]
    be64:	8a1b      	ldrh	r3, [r3, #16]
    be66:	4618      	mov	r0, r3
    be68:	4b50      	ldr	r3, [pc, #320]	; (bfac <_usb_d_dev_ep_enable+0x208>)
    be6a:	4798      	blx	r3
    be6c:	4603      	mov	r3, r0
    be6e:	071b      	lsls	r3, r3, #28
    be70:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    be74:	432b      	orrs	r3, r5
    be76:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    be78:	7efb      	ldrb	r3, [r7, #27]
    be7a:	2200      	movs	r2, #0
    be7c:	2100      	movs	r1, #0
    be7e:	4618      	mov	r0, r3
    be80:	4b4b      	ldr	r3, [pc, #300]	; (bfb0 <_usb_d_dev_ep_enable+0x20c>)
    be82:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    be84:	7efb      	ldrb	r3, [r7, #27]
    be86:	2200      	movs	r2, #0
    be88:	2101      	movs	r1, #1
    be8a:	4618      	mov	r0, r3
    be8c:	4b49      	ldr	r3, [pc, #292]	; (bfb4 <_usb_d_dev_ep_enable+0x210>)
    be8e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    be90:	7efb      	ldrb	r3, [r7, #27]
    be92:	2100      	movs	r1, #0
    be94:	4618      	mov	r0, r3
    be96:	4b48      	ldr	r3, [pc, #288]	; (bfb8 <_usb_d_dev_ep_enable+0x214>)
    be98:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    be9a:	7efb      	ldrb	r3, [r7, #27]
    be9c:	2101      	movs	r1, #1
    be9e:	4618      	mov	r0, r3
    bea0:	4b45      	ldr	r3, [pc, #276]	; (bfb8 <_usb_d_dev_ep_enable+0x214>)
    bea2:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    bea4:	6978      	ldr	r0, [r7, #20]
    bea6:	4b45      	ldr	r3, [pc, #276]	; (bfbc <_usb_d_dev_ep_enable+0x218>)
    bea8:	4798      	blx	r3
    beaa:	e06f      	b.n	bf8c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    beac:	7ebb      	ldrb	r3, [r7, #26]
    beae:	2b00      	cmp	r3, #0
    beb0:	d038      	beq.n	bf24 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    beb2:	7cfb      	ldrb	r3, [r7, #19]
    beb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    beb8:	2b00      	cmp	r3, #0
    beba:	d002      	beq.n	bec2 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    bebc:	f06f 0313 	mvn.w	r3, #19
    bec0:	e065      	b.n	bf8e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    bec2:	697b      	ldr	r3, [r7, #20]
    bec4:	7cdb      	ldrb	r3, [r3, #19]
    bec6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    beca:	b2db      	uxtb	r3, r3
    becc:	011b      	lsls	r3, r3, #4
    bece:	b2db      	uxtb	r3, r3
    bed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    bed4:	b2da      	uxtb	r2, r3
    bed6:	7cfb      	ldrb	r3, [r7, #19]
    bed8:	4313      	orrs	r3, r2
    beda:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    bedc:	7cfa      	ldrb	r2, [r7, #19]
    bede:	7efb      	ldrb	r3, [r7, #27]
    bee0:	4619      	mov	r1, r3
    bee2:	69f8      	ldr	r0, [r7, #28]
    bee4:	4b2f      	ldr	r3, [pc, #188]	; (bfa4 <_usb_d_dev_ep_enable+0x200>)
    bee6:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    bee8:	68fb      	ldr	r3, [r7, #12]
    beea:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    beee:	697b      	ldr	r3, [r7, #20]
    bef0:	8a1b      	ldrh	r3, [r3, #16]
    bef2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    bef6:	697b      	ldr	r3, [r7, #20]
    bef8:	8a1b      	ldrh	r3, [r3, #16]
    befa:	4618      	mov	r0, r3
    befc:	4b2b      	ldr	r3, [pc, #172]	; (bfac <_usb_d_dev_ep_enable+0x208>)
    befe:	4798      	blx	r3
    bf00:	4603      	mov	r3, r0
    bf02:	071b      	lsls	r3, r3, #28
    bf04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    bf08:	432b      	orrs	r3, r5
    bf0a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    bf0c:	7efb      	ldrb	r3, [r7, #27]
    bf0e:	2200      	movs	r2, #0
    bf10:	2101      	movs	r1, #1
    bf12:	4618      	mov	r0, r3
    bf14:	4b27      	ldr	r3, [pc, #156]	; (bfb4 <_usb_d_dev_ep_enable+0x210>)
    bf16:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    bf18:	7efb      	ldrb	r3, [r7, #27]
    bf1a:	2101      	movs	r1, #1
    bf1c:	4618      	mov	r0, r3
    bf1e:	4b26      	ldr	r3, [pc, #152]	; (bfb8 <_usb_d_dev_ep_enable+0x214>)
    bf20:	4798      	blx	r3
    bf22:	e033      	b.n	bf8c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    bf24:	7cfb      	ldrb	r3, [r7, #19]
    bf26:	f003 0307 	and.w	r3, r3, #7
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d002      	beq.n	bf34 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    bf2e:	f06f 0313 	mvn.w	r3, #19
    bf32:	e02c      	b.n	bf8e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    bf34:	697b      	ldr	r3, [r7, #20]
    bf36:	7cdb      	ldrb	r3, [r3, #19]
    bf38:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf3c:	b2db      	uxtb	r3, r3
    bf3e:	461a      	mov	r2, r3
    bf40:	7cfb      	ldrb	r3, [r7, #19]
    bf42:	4313      	orrs	r3, r2
    bf44:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    bf46:	7cfa      	ldrb	r2, [r7, #19]
    bf48:	7efb      	ldrb	r3, [r7, #27]
    bf4a:	4619      	mov	r1, r3
    bf4c:	69f8      	ldr	r0, [r7, #28]
    bf4e:	4b15      	ldr	r3, [pc, #84]	; (bfa4 <_usb_d_dev_ep_enable+0x200>)
    bf50:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    bf52:	697b      	ldr	r3, [r7, #20]
    bf54:	8a1b      	ldrh	r3, [r3, #16]
    bf56:	039b      	lsls	r3, r3, #14
    bf58:	4c13      	ldr	r4, [pc, #76]	; (bfa8 <_usb_d_dev_ep_enable+0x204>)
    bf5a:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    bf5c:	697b      	ldr	r3, [r7, #20]
    bf5e:	8a1b      	ldrh	r3, [r3, #16]
    bf60:	4618      	mov	r0, r3
    bf62:	4b12      	ldr	r3, [pc, #72]	; (bfac <_usb_d_dev_ep_enable+0x208>)
    bf64:	4798      	blx	r3
    bf66:	4603      	mov	r3, r0
    bf68:	071b      	lsls	r3, r3, #28
    bf6a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    bf6e:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    bf72:	68fb      	ldr	r3, [r7, #12]
    bf74:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    bf76:	7efb      	ldrb	r3, [r7, #27]
    bf78:	2200      	movs	r2, #0
    bf7a:	2100      	movs	r1, #0
    bf7c:	4618      	mov	r0, r3
    bf7e:	4b0c      	ldr	r3, [pc, #48]	; (bfb0 <_usb_d_dev_ep_enable+0x20c>)
    bf80:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    bf82:	7efb      	ldrb	r3, [r7, #27]
    bf84:	2100      	movs	r1, #0
    bf86:	4618      	mov	r0, r3
    bf88:	4b0b      	ldr	r3, [pc, #44]	; (bfb8 <_usb_d_dev_ep_enable+0x214>)
    bf8a:	4798      	blx	r3
	}

	return USB_OK;
    bf8c:	2300      	movs	r3, #0
}
    bf8e:	4618      	mov	r0, r3
    bf90:	3720      	adds	r7, #32
    bf92:	46bd      	mov	sp, r7
    bf94:	bdb0      	pop	{r4, r5, r7, pc}
    bf96:	bf00      	nop
    bf98:	0000abbd 	.word	0x0000abbd
    bf9c:	0000a243 	.word	0x0000a243
    bfa0:	20001150 	.word	0x20001150
    bfa4:	0000a219 	.word	0x0000a219
    bfa8:	0fffc000 	.word	0x0fffc000
    bfac:	0000ab59 	.word	0x0000ab59
    bfb0:	0000ab01 	.word	0x0000ab01
    bfb4:	0000aaa9 	.word	0x0000aaa9
    bfb8:	0000aa71 	.word	0x0000aa71
    bfbc:	0000bb15 	.word	0x0000bb15

0000bfc0 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    bfc0:	b580      	push	{r7, lr}
    bfc2:	b084      	sub	sp, #16
    bfc4:	af00      	add	r7, sp, #0
    bfc6:	6078      	str	r0, [r7, #4]
    bfc8:	460b      	mov	r3, r1
    bfca:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bfcc:	687b      	ldr	r3, [r7, #4]
    bfce:	7c9b      	ldrb	r3, [r3, #18]
    bfd0:	f003 030f 	and.w	r3, r3, #15
    bfd4:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    bfd6:	78fa      	ldrb	r2, [r7, #3]
    bfd8:	7bfb      	ldrb	r3, [r7, #15]
    bfda:	4611      	mov	r1, r2
    bfdc:	4618      	mov	r0, r3
    bfde:	4b03      	ldr	r3, [pc, #12]	; (bfec <_usb_d_dev_ep_stall_get+0x2c>)
    bfe0:	4798      	blx	r3
    bfe2:	4603      	mov	r3, r0
}
    bfe4:	4618      	mov	r0, r3
    bfe6:	3710      	adds	r7, #16
    bfe8:	46bd      	mov	sp, r7
    bfea:	bd80      	pop	{r7, pc}
    bfec:	0000a6b1 	.word	0x0000a6b1

0000bff0 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    bff0:	b580      	push	{r7, lr}
    bff2:	b084      	sub	sp, #16
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
    bff8:	460b      	mov	r3, r1
    bffa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bffc:	687b      	ldr	r3, [r7, #4]
    bffe:	7c9b      	ldrb	r3, [r3, #18]
    c000:	f003 030f 	and.w	r3, r3, #15
    c004:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c006:	78f9      	ldrb	r1, [r7, #3]
    c008:	7bfb      	ldrb	r3, [r7, #15]
    c00a:	2201      	movs	r2, #1
    c00c:	4618      	mov	r0, r3
    c00e:	4b0a      	ldr	r3, [pc, #40]	; (c038 <_usb_d_dev_ep_stall_set+0x48>)
    c010:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c012:	78fb      	ldrb	r3, [r7, #3]
    c014:	2220      	movs	r2, #32
    c016:	409a      	lsls	r2, r3
    c018:	7bfb      	ldrb	r3, [r7, #15]
    c01a:	4611      	mov	r1, r2
    c01c:	4618      	mov	r0, r3
    c01e:	4b07      	ldr	r3, [pc, #28]	; (c03c <_usb_d_dev_ep_stall_set+0x4c>)
    c020:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c022:	687a      	ldr	r2, [r7, #4]
    c024:	7cd3      	ldrb	r3, [r2, #19]
    c026:	f043 0308 	orr.w	r3, r3, #8
    c02a:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c02c:	2300      	movs	r3, #0
}
    c02e:	4618      	mov	r0, r3
    c030:	3710      	adds	r7, #16
    c032:	46bd      	mov	sp, r7
    c034:	bd80      	pop	{r7, pc}
    c036:	bf00      	nop
    c038:	0000a659 	.word	0x0000a659
    c03c:	0000a5d9 	.word	0x0000a5d9

0000c040 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c040:	b580      	push	{r7, lr}
    c042:	b084      	sub	sp, #16
    c044:	af00      	add	r7, sp, #0
    c046:	6078      	str	r0, [r7, #4]
    c048:	460b      	mov	r3, r1
    c04a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c04c:	687b      	ldr	r3, [r7, #4]
    c04e:	7c9b      	ldrb	r3, [r3, #18]
    c050:	f003 030f 	and.w	r3, r3, #15
    c054:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c056:	78fa      	ldrb	r2, [r7, #3]
    c058:	7bfb      	ldrb	r3, [r7, #15]
    c05a:	4611      	mov	r1, r2
    c05c:	4618      	mov	r0, r3
    c05e:	4b28      	ldr	r3, [pc, #160]	; (c100 <_usb_d_dev_ep_stall_clr+0xc0>)
    c060:	4798      	blx	r3
    c062:	4603      	mov	r3, r0
    c064:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c066:	7bbb      	ldrb	r3, [r7, #14]
    c068:	f083 0301 	eor.w	r3, r3, #1
    c06c:	b2db      	uxtb	r3, r3
    c06e:	2b00      	cmp	r3, #0
    c070:	d001      	beq.n	c076 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c072:	2300      	movs	r3, #0
    c074:	e040      	b.n	c0f8 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c076:	78f9      	ldrb	r1, [r7, #3]
    c078:	7bfb      	ldrb	r3, [r7, #15]
    c07a:	2200      	movs	r2, #0
    c07c:	4618      	mov	r0, r3
    c07e:	4b21      	ldr	r3, [pc, #132]	; (c104 <_usb_d_dev_ep_stall_clr+0xc4>)
    c080:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c082:	78fb      	ldrb	r3, [r7, #3]
    c084:	2220      	movs	r2, #32
    c086:	409a      	lsls	r2, r3
    c088:	7bfb      	ldrb	r3, [r7, #15]
    c08a:	4611      	mov	r1, r2
    c08c:	4618      	mov	r0, r3
    c08e:	4b1e      	ldr	r3, [pc, #120]	; (c108 <_usb_d_dev_ep_stall_clr+0xc8>)
    c090:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c092:	78fa      	ldrb	r2, [r7, #3]
    c094:	7bfb      	ldrb	r3, [r7, #15]
    c096:	4611      	mov	r1, r2
    c098:	4618      	mov	r0, r3
    c09a:	4b1c      	ldr	r3, [pc, #112]	; (c10c <_usb_d_dev_ep_stall_clr+0xcc>)
    c09c:	4798      	blx	r3
    c09e:	4603      	mov	r3, r0
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d00b      	beq.n	c0bc <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c0a4:	78fa      	ldrb	r2, [r7, #3]
    c0a6:	7bfb      	ldrb	r3, [r7, #15]
    c0a8:	4611      	mov	r1, r2
    c0aa:	4618      	mov	r0, r3
    c0ac:	4b18      	ldr	r3, [pc, #96]	; (c110 <_usb_d_dev_ep_stall_clr+0xd0>)
    c0ae:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c0b0:	78f9      	ldrb	r1, [r7, #3]
    c0b2:	7bfb      	ldrb	r3, [r7, #15]
    c0b4:	2200      	movs	r2, #0
    c0b6:	4618      	mov	r0, r3
    c0b8:	4b16      	ldr	r3, [pc, #88]	; (c114 <_usb_d_dev_ep_stall_clr+0xd4>)
    c0ba:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c0bc:	687b      	ldr	r3, [r7, #4]
    c0be:	7cdb      	ldrb	r3, [r3, #19]
    c0c0:	f003 0307 	and.w	r3, r3, #7
    c0c4:	b2db      	uxtb	r3, r3
    c0c6:	2b01      	cmp	r3, #1
    c0c8:	d110      	bne.n	c0ec <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c0ca:	7bfb      	ldrb	r3, [r7, #15]
    c0cc:	4619      	mov	r1, r3
    c0ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c0d2:	4b11      	ldr	r3, [pc, #68]	; (c118 <_usb_d_dev_ep_stall_clr+0xd8>)
    c0d4:	4798      	blx	r3
    c0d6:	4603      	mov	r3, r0
    c0d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d10a      	bne.n	c0f6 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c0e0:	687a      	ldr	r2, [r7, #4]
    c0e2:	7cd3      	ldrb	r3, [r2, #19]
    c0e4:	f36f 03c3 	bfc	r3, #3, #1
    c0e8:	74d3      	strb	r3, [r2, #19]
    c0ea:	e004      	b.n	c0f6 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c0ec:	687a      	ldr	r2, [r7, #4]
    c0ee:	7cd3      	ldrb	r3, [r2, #19]
    c0f0:	f36f 03c3 	bfc	r3, #3, #1
    c0f4:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c0f6:	2300      	movs	r3, #0
}
    c0f8:	4618      	mov	r0, r3
    c0fa:	3710      	adds	r7, #16
    c0fc:	46bd      	mov	sp, r7
    c0fe:	bd80      	pop	{r7, pc}
    c100:	0000a6b1 	.word	0x0000a6b1
    c104:	0000a659 	.word	0x0000a659
    c108:	0000a601 	.word	0x0000a601
    c10c:	0000a6f5 	.word	0x0000a6f5
    c110:	0000a739 	.word	0x0000a739
    c114:	0000a825 	.word	0x0000a825
    c118:	0000a0e1 	.word	0x0000a0e1

0000c11c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c11c:	b580      	push	{r7, lr}
    c11e:	b086      	sub	sp, #24
    c120:	af00      	add	r7, sp, #0
    c122:	4603      	mov	r3, r0
    c124:	460a      	mov	r2, r1
    c126:	71fb      	strb	r3, [r7, #7]
    c128:	4613      	mov	r3, r2
    c12a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c12c:	79fb      	ldrb	r3, [r7, #7]
    c12e:	f003 030f 	and.w	r3, r3, #15
    c132:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c134:	79fb      	ldrb	r3, [r7, #7]
    c136:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c13a:	2b00      	cmp	r3, #0
    c13c:	bf14      	ite	ne
    c13e:	2301      	movne	r3, #1
    c140:	2300      	moveq	r3, #0
    c142:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c144:	7cba      	ldrb	r2, [r7, #18]
    c146:	7cfb      	ldrb	r3, [r7, #19]
    c148:	4611      	mov	r1, r2
    c14a:	4618      	mov	r0, r3
    c14c:	4b13      	ldr	r3, [pc, #76]	; (c19c <_usb_d_dev_ep_stall+0x80>)
    c14e:	4798      	blx	r3
    c150:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c152:	7cfb      	ldrb	r3, [r7, #19]
    c154:	2b04      	cmp	r3, #4
    c156:	d902      	bls.n	c15e <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c158:	f06f 0311 	mvn.w	r3, #17
    c15c:	e01a      	b.n	c194 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c15e:	79bb      	ldrb	r3, [r7, #6]
    c160:	2b01      	cmp	r3, #1
    c162:	d106      	bne.n	c172 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c164:	7cbb      	ldrb	r3, [r7, #18]
    c166:	4619      	mov	r1, r3
    c168:	68f8      	ldr	r0, [r7, #12]
    c16a:	4b0d      	ldr	r3, [pc, #52]	; (c1a0 <_usb_d_dev_ep_stall+0x84>)
    c16c:	4798      	blx	r3
    c16e:	6178      	str	r0, [r7, #20]
    c170:	e00f      	b.n	c192 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c172:	79bb      	ldrb	r3, [r7, #6]
    c174:	2b00      	cmp	r3, #0
    c176:	d106      	bne.n	c186 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c178:	7cbb      	ldrb	r3, [r7, #18]
    c17a:	4619      	mov	r1, r3
    c17c:	68f8      	ldr	r0, [r7, #12]
    c17e:	4b09      	ldr	r3, [pc, #36]	; (c1a4 <_usb_d_dev_ep_stall+0x88>)
    c180:	4798      	blx	r3
    c182:	6178      	str	r0, [r7, #20]
    c184:	e005      	b.n	c192 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c186:	7cbb      	ldrb	r3, [r7, #18]
    c188:	4619      	mov	r1, r3
    c18a:	68f8      	ldr	r0, [r7, #12]
    c18c:	4b06      	ldr	r3, [pc, #24]	; (c1a8 <_usb_d_dev_ep_stall+0x8c>)
    c18e:	4798      	blx	r3
    c190:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c192:	697b      	ldr	r3, [r7, #20]
}
    c194:	4618      	mov	r0, r3
    c196:	3718      	adds	r7, #24
    c198:	46bd      	mov	sp, r7
    c19a:	bd80      	pop	{r7, pc}
    c19c:	0000abbd 	.word	0x0000abbd
    c1a0:	0000bff1 	.word	0x0000bff1
    c1a4:	0000c041 	.word	0x0000c041
    c1a8:	0000bfc1 	.word	0x0000bfc1

0000c1ac <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	b082      	sub	sp, #8
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	6078      	str	r0, [r7, #4]
    c1b4:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c1b6:	687b      	ldr	r3, [r7, #4]
    c1b8:	7c9b      	ldrb	r3, [r3, #18]
    c1ba:	2bff      	cmp	r3, #255	; 0xff
    c1bc:	d014      	beq.n	c1e8 <_usb_d_dev_trans_done+0x3c>
    c1be:	687b      	ldr	r3, [r7, #4]
    c1c0:	7cdb      	ldrb	r3, [r3, #19]
    c1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c1c6:	b2db      	uxtb	r3, r3
    c1c8:	2b00      	cmp	r3, #0
    c1ca:	d00d      	beq.n	c1e8 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c1cc:	687a      	ldr	r2, [r7, #4]
    c1ce:	7cd3      	ldrb	r3, [r2, #19]
    c1d0:	f36f 1386 	bfc	r3, #6, #1
    c1d4:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c1d6:	4b06      	ldr	r3, [pc, #24]	; (c1f0 <_usb_d_dev_trans_done+0x44>)
    c1d8:	691b      	ldr	r3, [r3, #16]
    c1da:	687a      	ldr	r2, [r7, #4]
    c1dc:	7c90      	ldrb	r0, [r2, #18]
    c1de:	687a      	ldr	r2, [r7, #4]
    c1e0:	6892      	ldr	r2, [r2, #8]
    c1e2:	6839      	ldr	r1, [r7, #0]
    c1e4:	4798      	blx	r3
    c1e6:	e000      	b.n	c1ea <_usb_d_dev_trans_done+0x3e>
		return;
    c1e8:	bf00      	nop
}
    c1ea:	3708      	adds	r7, #8
    c1ec:	46bd      	mov	sp, r7
    c1ee:	bd80      	pop	{r7, pc}
    c1f0:	20001088 	.word	0x20001088

0000c1f4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c1f4:	b580      	push	{r7, lr}
    c1f6:	b086      	sub	sp, #24
    c1f8:	af00      	add	r7, sp, #0
    c1fa:	60f8      	str	r0, [r7, #12]
    c1fc:	460b      	mov	r3, r1
    c1fe:	607a      	str	r2, [r7, #4]
    c200:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c202:	68fb      	ldr	r3, [r7, #12]
    c204:	7c9b      	ldrb	r3, [r3, #18]
    c206:	f003 030f 	and.w	r3, r3, #15
    c20a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c20c:	4b1f      	ldr	r3, [pc, #124]	; (c28c <_usb_d_dev_trans_stop+0x98>)
    c20e:	881b      	ldrh	r3, [r3, #0]
    c210:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c212:	68fb      	ldr	r3, [r7, #12]
    c214:	7c9b      	ldrb	r3, [r3, #18]
    c216:	2bff      	cmp	r3, #255	; 0xff
    c218:	d033      	beq.n	c282 <_usb_d_dev_trans_stop+0x8e>
    c21a:	68fb      	ldr	r3, [r7, #12]
    c21c:	7cdb      	ldrb	r3, [r3, #19]
    c21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c222:	b2db      	uxtb	r3, r3
    c224:	2b00      	cmp	r3, #0
    c226:	d02c      	beq.n	c282 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c228:	7afb      	ldrb	r3, [r7, #11]
    c22a:	2b00      	cmp	r3, #0
    c22c:	d006      	beq.n	c23c <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c22e:	7dfb      	ldrb	r3, [r7, #23]
    c230:	2200      	movs	r2, #0
    c232:	2101      	movs	r1, #1
    c234:	4618      	mov	r0, r3
    c236:	4b16      	ldr	r3, [pc, #88]	; (c290 <_usb_d_dev_trans_stop+0x9c>)
    c238:	4798      	blx	r3
    c23a:	e005      	b.n	c248 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c23c:	7dfb      	ldrb	r3, [r7, #23]
    c23e:	2200      	movs	r2, #0
    c240:	2100      	movs	r1, #0
    c242:	4618      	mov	r0, r3
    c244:	4b13      	ldr	r3, [pc, #76]	; (c294 <_usb_d_dev_trans_stop+0xa0>)
    c246:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c248:	7afb      	ldrb	r3, [r7, #11]
    c24a:	f107 0218 	add.w	r2, r7, #24
    c24e:	4413      	add	r3, r2
    c250:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c254:	461a      	mov	r2, r3
    c256:	7dfb      	ldrb	r3, [r7, #23]
    c258:	4611      	mov	r1, r2
    c25a:	4618      	mov	r0, r3
    c25c:	4b0e      	ldr	r3, [pc, #56]	; (c298 <_usb_d_dev_trans_stop+0xa4>)
    c25e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c260:	7afb      	ldrb	r3, [r7, #11]
    c262:	f107 0218 	add.w	r2, r7, #24
    c266:	4413      	add	r3, r2
    c268:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c26c:	461a      	mov	r2, r3
    c26e:	7dfb      	ldrb	r3, [r7, #23]
    c270:	4611      	mov	r1, r2
    c272:	4618      	mov	r0, r3
    c274:	4b09      	ldr	r3, [pc, #36]	; (c29c <_usb_d_dev_trans_stop+0xa8>)
    c276:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c278:	6879      	ldr	r1, [r7, #4]
    c27a:	68f8      	ldr	r0, [r7, #12]
    c27c:	4b08      	ldr	r3, [pc, #32]	; (c2a0 <_usb_d_dev_trans_stop+0xac>)
    c27e:	4798      	blx	r3
    c280:	e000      	b.n	c284 <_usb_d_dev_trans_stop+0x90>
		return;
    c282:	bf00      	nop
}
    c284:	3718      	adds	r7, #24
    c286:	46bd      	mov	sp, r7
    c288:	bd80      	pop	{r7, pc}
    c28a:	bf00      	nop
    c28c:	000114d4 	.word	0x000114d4
    c290:	0000aaa9 	.word	0x0000aaa9
    c294:	0000ab01 	.word	0x0000ab01
    c298:	0000a5b1 	.word	0x0000a5b1
    c29c:	0000a601 	.word	0x0000a601
    c2a0:	0000c1ad 	.word	0x0000c1ad

0000c2a4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c2a4:	b580      	push	{r7, lr}
    c2a6:	b086      	sub	sp, #24
    c2a8:	af00      	add	r7, sp, #0
    c2aa:	4603      	mov	r3, r0
    c2ac:	6039      	str	r1, [r7, #0]
    c2ae:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c2b0:	79fb      	ldrb	r3, [r7, #7]
    c2b2:	f003 030f 	and.w	r3, r3, #15
    c2b6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c2b8:	7dfb      	ldrb	r3, [r7, #23]
    c2ba:	015b      	lsls	r3, r3, #5
    c2bc:	4a1e      	ldr	r2, [pc, #120]	; (c338 <_usb_d_dev_ep_read_req+0x94>)
    c2be:	4413      	add	r3, r2
    c2c0:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c2c2:	693b      	ldr	r3, [r7, #16]
    c2c4:	681b      	ldr	r3, [r3, #0]
    c2c6:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c2c8:	693b      	ldr	r3, [r7, #16]
    c2ca:	685b      	ldr	r3, [r3, #4]
    c2cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c2d0:	b29b      	uxth	r3, r3
    c2d2:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c2d4:	7dfb      	ldrb	r3, [r7, #23]
    c2d6:	2b04      	cmp	r3, #4
    c2d8:	d802      	bhi.n	c2e0 <_usb_d_dev_ep_read_req+0x3c>
    c2da:	683b      	ldr	r3, [r7, #0]
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d102      	bne.n	c2e6 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c2e0:	f06f 0311 	mvn.w	r3, #17
    c2e4:	e023      	b.n	c32e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c2e6:	7dfb      	ldrb	r3, [r7, #23]
    c2e8:	4618      	mov	r0, r3
    c2ea:	4b14      	ldr	r3, [pc, #80]	; (c33c <_usb_d_dev_ep_read_req+0x98>)
    c2ec:	4798      	blx	r3
    c2ee:	4603      	mov	r3, r0
    c2f0:	f083 0301 	eor.w	r3, r3, #1
    c2f4:	b2db      	uxtb	r3, r3
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	d002      	beq.n	c300 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c2fa:	f06f 0312 	mvn.w	r3, #18
    c2fe:	e016      	b.n	c32e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c300:	7dfb      	ldrb	r3, [r7, #23]
    c302:	4618      	mov	r0, r3
    c304:	4b0e      	ldr	r3, [pc, #56]	; (c340 <_usb_d_dev_ep_read_req+0x9c>)
    c306:	4798      	blx	r3
    c308:	4603      	mov	r3, r0
    c30a:	f083 0301 	eor.w	r3, r3, #1
    c30e:	b2db      	uxtb	r3, r3
    c310:	2b00      	cmp	r3, #0
    c312:	d001      	beq.n	c318 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c314:	2300      	movs	r3, #0
    c316:	e00a      	b.n	c32e <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c318:	68fb      	ldr	r3, [r7, #12]
    c31a:	2208      	movs	r2, #8
    c31c:	4619      	mov	r1, r3
    c31e:	6838      	ldr	r0, [r7, #0]
    c320:	4b08      	ldr	r3, [pc, #32]	; (c344 <_usb_d_dev_ep_read_req+0xa0>)
    c322:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c324:	7dfb      	ldrb	r3, [r7, #23]
    c326:	4618      	mov	r0, r3
    c328:	4b07      	ldr	r3, [pc, #28]	; (c348 <_usb_d_dev_ep_read_req+0xa4>)
    c32a:	4798      	blx	r3

	return bytes;
    c32c:	897b      	ldrh	r3, [r7, #10]
}
    c32e:	4618      	mov	r0, r3
    c330:	3718      	adds	r7, #24
    c332:	46bd      	mov	sp, r7
    c334:	bd80      	pop	{r7, pc}
    c336:	bf00      	nop
    c338:	20001150 	.word	0x20001150
    c33c:	0000a629 	.word	0x0000a629
    c340:	0000a7d5 	.word	0x0000a7d5
    c344:	00010d29 	.word	0x00010d29
    c348:	0000a805 	.word	0x0000a805

0000c34c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c34c:	b580      	push	{r7, lr}
    c34e:	b086      	sub	sp, #24
    c350:	af00      	add	r7, sp, #0
    c352:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c354:	687b      	ldr	r3, [r7, #4]
    c356:	7a1b      	ldrb	r3, [r3, #8]
    c358:	f003 030f 	and.w	r3, r3, #15
    c35c:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c35e:	687b      	ldr	r3, [r7, #4]
    c360:	7a1b      	ldrb	r3, [r3, #8]
    c362:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c366:	2b00      	cmp	r3, #0
    c368:	bf14      	ite	ne
    c36a:	2301      	movne	r3, #1
    c36c:	2300      	moveq	r3, #0
    c36e:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c370:	7d7a      	ldrb	r2, [r7, #21]
    c372:	7dbb      	ldrb	r3, [r7, #22]
    c374:	4611      	mov	r1, r2
    c376:	4618      	mov	r0, r3
    c378:	4b5f      	ldr	r3, [pc, #380]	; (c4f8 <_usb_d_dev_ep_trans+0x1ac>)
    c37a:	4798      	blx	r3
    c37c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c37e:	693b      	ldr	r3, [r7, #16]
    c380:	8a1b      	ldrh	r3, [r3, #16]
    c382:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c386:	4293      	cmp	r3, r2
    c388:	d004      	beq.n	c394 <_usb_d_dev_ep_trans+0x48>
    c38a:	693b      	ldr	r3, [r7, #16]
    c38c:	8a1b      	ldrh	r3, [r3, #16]
    c38e:	3b01      	subs	r3, #1
    c390:	b29b      	uxth	r3, r3
    c392:	e001      	b.n	c398 <_usb_d_dev_ep_trans+0x4c>
    c394:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c398:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c39a:	687b      	ldr	r3, [r7, #4]
    c39c:	685a      	ldr	r2, [r3, #4]
    c39e:	89fb      	ldrh	r3, [r7, #14]
    c3a0:	4013      	ands	r3, r2
    c3a2:	2b00      	cmp	r3, #0
    c3a4:	bf14      	ite	ne
    c3a6:	2301      	movne	r3, #1
    c3a8:	2300      	moveq	r3, #0
    c3aa:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c3ac:	2300      	movs	r3, #0
    c3ae:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c3b0:	7dbb      	ldrb	r3, [r7, #22]
    c3b2:	2b04      	cmp	r3, #4
    c3b4:	d902      	bls.n	c3bc <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c3b6:	f06f 0311 	mvn.w	r3, #17
    c3ba:	e098      	b.n	c4ee <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c3bc:	687b      	ldr	r3, [r7, #4]
    c3be:	681b      	ldr	r3, [r3, #0]
    c3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c3c4:	d31a      	bcc.n	c3fc <_usb_d_dev_ep_trans+0xb0>
    c3c6:	687b      	ldr	r3, [r7, #4]
    c3c8:	681b      	ldr	r3, [r3, #0]
    c3ca:	461a      	mov	r2, r3
    c3cc:	687b      	ldr	r3, [r7, #4]
    c3ce:	685b      	ldr	r3, [r3, #4]
    c3d0:	4413      	add	r3, r2
    c3d2:	4a4a      	ldr	r2, [pc, #296]	; (c4fc <_usb_d_dev_ep_trans+0x1b0>)
    c3d4:	4293      	cmp	r3, r2
    c3d6:	d811      	bhi.n	c3fc <_usb_d_dev_ep_trans+0xb0>
    c3d8:	687b      	ldr	r3, [r7, #4]
    c3da:	681b      	ldr	r3, [r3, #0]
    c3dc:	f003 0303 	and.w	r3, r3, #3
    c3e0:	2b00      	cmp	r3, #0
    c3e2:	d10b      	bne.n	c3fc <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c3e4:	7d7b      	ldrb	r3, [r7, #21]
    c3e6:	f083 0301 	eor.w	r3, r3, #1
    c3ea:	b2db      	uxtb	r3, r3
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d00e      	beq.n	c40e <_usb_d_dev_ep_trans+0xc2>
    c3f0:	687b      	ldr	r3, [r7, #4]
    c3f2:	685b      	ldr	r3, [r3, #4]
    c3f4:	693a      	ldr	r2, [r7, #16]
    c3f6:	8a12      	ldrh	r2, [r2, #16]
    c3f8:	4293      	cmp	r3, r2
    c3fa:	d208      	bcs.n	c40e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c3fc:	693b      	ldr	r3, [r7, #16]
    c3fe:	68db      	ldr	r3, [r3, #12]
    c400:	2b00      	cmp	r3, #0
    c402:	d102      	bne.n	c40a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c404:	f06f 0312 	mvn.w	r3, #18
    c408:	e071      	b.n	c4ee <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c40a:	2301      	movs	r3, #1
    c40c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c40e:	7d7b      	ldrb	r3, [r7, #21]
    c410:	f083 0301 	eor.w	r3, r3, #1
    c414:	b2db      	uxtb	r3, r3
    c416:	2b00      	cmp	r3, #0
    c418:	d009      	beq.n	c42e <_usb_d_dev_ep_trans+0xe2>
    c41a:	7b7b      	ldrb	r3, [r7, #13]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d006      	beq.n	c42e <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c420:	693b      	ldr	r3, [r7, #16]
    c422:	68db      	ldr	r3, [r3, #12]
    c424:	2b00      	cmp	r3, #0
    c426:	d102      	bne.n	c42e <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c428:	f06f 0311 	mvn.w	r3, #17
    c42c:	e05f      	b.n	c4ee <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c42e:	693b      	ldr	r3, [r7, #16]
    c430:	7cdb      	ldrb	r3, [r3, #19]
    c432:	f003 0308 	and.w	r3, r3, #8
    c436:	b2db      	uxtb	r3, r3
    c438:	2b00      	cmp	r3, #0
    c43a:	d001      	beq.n	c440 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c43c:	2302      	movs	r3, #2
    c43e:	e056      	b.n	c4ee <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c440:	f107 0308 	add.w	r3, r7, #8
    c444:	4618      	mov	r0, r3
    c446:	4b2e      	ldr	r3, [pc, #184]	; (c500 <_usb_d_dev_ep_trans+0x1b4>)
    c448:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c44a:	693b      	ldr	r3, [r7, #16]
    c44c:	7cdb      	ldrb	r3, [r3, #19]
    c44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c452:	b2db      	uxtb	r3, r3
    c454:	2b00      	cmp	r3, #0
    c456:	d006      	beq.n	c466 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c458:	f107 0308 	add.w	r3, r7, #8
    c45c:	4618      	mov	r0, r3
    c45e:	4b29      	ldr	r3, [pc, #164]	; (c504 <_usb_d_dev_ep_trans+0x1b8>)
    c460:	4798      	blx	r3
		return USB_BUSY;
    c462:	2301      	movs	r3, #1
    c464:	e043      	b.n	c4ee <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c466:	693a      	ldr	r2, [r7, #16]
    c468:	7cd3      	ldrb	r3, [r2, #19]
    c46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c46e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c470:	f107 0308 	add.w	r3, r7, #8
    c474:	4618      	mov	r0, r3
    c476:	4b23      	ldr	r3, [pc, #140]	; (c504 <_usb_d_dev_ep_trans+0x1b8>)
    c478:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c47a:	687b      	ldr	r3, [r7, #4]
    c47c:	681a      	ldr	r2, [r3, #0]
    c47e:	693b      	ldr	r3, [r7, #16]
    c480:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c482:	687b      	ldr	r3, [r7, #4]
    c484:	685a      	ldr	r2, [r3, #4]
    c486:	693b      	ldr	r3, [r7, #16]
    c488:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c48a:	693b      	ldr	r3, [r7, #16]
    c48c:	2200      	movs	r2, #0
    c48e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c490:	693a      	ldr	r2, [r7, #16]
    c492:	7cd3      	ldrb	r3, [r2, #19]
    c494:	7d79      	ldrb	r1, [r7, #21]
    c496:	f361 13c7 	bfi	r3, r1, #7, #1
    c49a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c49c:	693a      	ldr	r2, [r7, #16]
    c49e:	7cd3      	ldrb	r3, [r2, #19]
    c4a0:	7df9      	ldrb	r1, [r7, #23]
    c4a2:	f361 1345 	bfi	r3, r1, #5, #1
    c4a6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c4a8:	687b      	ldr	r3, [r7, #4]
    c4aa:	7a5b      	ldrb	r3, [r3, #9]
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d007      	beq.n	c4c0 <_usb_d_dev_ep_trans+0x174>
    c4b0:	7b7b      	ldrb	r3, [r7, #13]
    c4b2:	f083 0301 	eor.w	r3, r3, #1
    c4b6:	b2db      	uxtb	r3, r3
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d001      	beq.n	c4c0 <_usb_d_dev_ep_trans+0x174>
    c4bc:	2301      	movs	r3, #1
    c4be:	e000      	b.n	c4c2 <_usb_d_dev_ep_trans+0x176>
    c4c0:	2300      	movs	r3, #0
    c4c2:	b2db      	uxtb	r3, r3
    c4c4:	f003 0301 	and.w	r3, r3, #1
    c4c8:	b2d9      	uxtb	r1, r3
    c4ca:	693a      	ldr	r2, [r7, #16]
    c4cc:	7cd3      	ldrb	r3, [r2, #19]
    c4ce:	f361 1304 	bfi	r3, r1, #4, #1
    c4d2:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c4d4:	7d7b      	ldrb	r3, [r7, #21]
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d004      	beq.n	c4e4 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c4da:	2100      	movs	r1, #0
    c4dc:	6938      	ldr	r0, [r7, #16]
    c4de:	4b0a      	ldr	r3, [pc, #40]	; (c508 <_usb_d_dev_ep_trans+0x1bc>)
    c4e0:	4798      	blx	r3
    c4e2:	e003      	b.n	c4ec <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c4e4:	2100      	movs	r1, #0
    c4e6:	6938      	ldr	r0, [r7, #16]
    c4e8:	4b08      	ldr	r3, [pc, #32]	; (c50c <_usb_d_dev_ep_trans+0x1c0>)
    c4ea:	4798      	blx	r3
	}

	return ERR_NONE;
    c4ec:	2300      	movs	r3, #0
}
    c4ee:	4618      	mov	r0, r3
    c4f0:	3718      	adds	r7, #24
    c4f2:	46bd      	mov	sp, r7
    c4f4:	bd80      	pop	{r7, pc}
    c4f6:	bf00      	nop
    c4f8:	0000abbd 	.word	0x0000abbd
    c4fc:	20041fff 	.word	0x20041fff
    c500:	00003a25 	.word	0x00003a25
    c504:	00003a4b 	.word	0x00003a4b
    c508:	0000ae85 	.word	0x0000ae85
    c50c:	0000b09d 	.word	0x0000b09d

0000c510 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c510:	b480      	push	{r7}
    c512:	b085      	sub	sp, #20
    c514:	af00      	add	r7, sp, #0
    c516:	4603      	mov	r3, r0
    c518:	6039      	str	r1, [r7, #0]
    c51a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c51c:	683b      	ldr	r3, [r7, #0]
    c51e:	2b00      	cmp	r3, #0
    c520:	d001      	beq.n	c526 <_usb_d_dev_register_callback+0x16>
    c522:	683b      	ldr	r3, [r7, #0]
    c524:	e000      	b.n	c528 <_usb_d_dev_register_callback+0x18>
    c526:	4b0a      	ldr	r3, [pc, #40]	; (c550 <_usb_d_dev_register_callback+0x40>)
    c528:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c52a:	79fb      	ldrb	r3, [r7, #7]
    c52c:	2b01      	cmp	r3, #1
    c52e:	d103      	bne.n	c538 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c530:	4a08      	ldr	r2, [pc, #32]	; (c554 <_usb_d_dev_register_callback+0x44>)
    c532:	68fb      	ldr	r3, [r7, #12]
    c534:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c536:	e005      	b.n	c544 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c538:	79fb      	ldrb	r3, [r7, #7]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d102      	bne.n	c544 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c53e:	4a05      	ldr	r2, [pc, #20]	; (c554 <_usb_d_dev_register_callback+0x44>)
    c540:	68fb      	ldr	r3, [r7, #12]
    c542:	6013      	str	r3, [r2, #0]
}
    c544:	bf00      	nop
    c546:	3714      	adds	r7, #20
    c548:	46bd      	mov	sp, r7
    c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c54e:	4770      	bx	lr
    c550:	0000a445 	.word	0x0000a445
    c554:	20001088 	.word	0x20001088

0000c558 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c558:	b480      	push	{r7}
    c55a:	b085      	sub	sp, #20
    c55c:	af00      	add	r7, sp, #0
    c55e:	4603      	mov	r3, r0
    c560:	6039      	str	r1, [r7, #0]
    c562:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c564:	683b      	ldr	r3, [r7, #0]
    c566:	2b00      	cmp	r3, #0
    c568:	d001      	beq.n	c56e <_usb_d_dev_register_ep_callback+0x16>
    c56a:	683b      	ldr	r3, [r7, #0]
    c56c:	e000      	b.n	c570 <_usb_d_dev_register_ep_callback+0x18>
    c56e:	4b0e      	ldr	r3, [pc, #56]	; (c5a8 <_usb_d_dev_register_ep_callback+0x50>)
    c570:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c572:	79fb      	ldrb	r3, [r7, #7]
    c574:	2b00      	cmp	r3, #0
    c576:	d103      	bne.n	c580 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c578:	4a0c      	ldr	r2, [pc, #48]	; (c5ac <_usb_d_dev_register_ep_callback+0x54>)
    c57a:	68fb      	ldr	r3, [r7, #12]
    c57c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c57e:	e00c      	b.n	c59a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c580:	79fb      	ldrb	r3, [r7, #7]
    c582:	2b01      	cmp	r3, #1
    c584:	d103      	bne.n	c58e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c586:	4a09      	ldr	r2, [pc, #36]	; (c5ac <_usb_d_dev_register_ep_callback+0x54>)
    c588:	68fb      	ldr	r3, [r7, #12]
    c58a:	60d3      	str	r3, [r2, #12]
}
    c58c:	e005      	b.n	c59a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c58e:	79fb      	ldrb	r3, [r7, #7]
    c590:	2b02      	cmp	r3, #2
    c592:	d102      	bne.n	c59a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c594:	4a05      	ldr	r2, [pc, #20]	; (c5ac <_usb_d_dev_register_ep_callback+0x54>)
    c596:	68fb      	ldr	r3, [r7, #12]
    c598:	6113      	str	r3, [r2, #16]
}
    c59a:	bf00      	nop
    c59c:	3714      	adds	r7, #20
    c59e:	46bd      	mov	sp, r7
    c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5a4:	4770      	bx	lr
    c5a6:	bf00      	nop
    c5a8:	0000a445 	.word	0x0000a445
    c5ac:	20001088 	.word	0x20001088

0000c5b0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    c5b0:	b580      	push	{r7, lr}
    c5b2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c5b4:	4b01      	ldr	r3, [pc, #4]	; (c5bc <USB_0_Handler+0xc>)
    c5b6:	4798      	blx	r3
}
    c5b8:	bf00      	nop
    c5ba:	bd80      	pop	{r7, pc}
    c5bc:	0000b875 	.word	0x0000b875

0000c5c0 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    c5c0:	b580      	push	{r7, lr}
    c5c2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c5c4:	4b01      	ldr	r3, [pc, #4]	; (c5cc <USB_1_Handler+0xc>)
    c5c6:	4798      	blx	r3
}
    c5c8:	bf00      	nop
    c5ca:	bd80      	pop	{r7, pc}
    c5cc:	0000b875 	.word	0x0000b875

0000c5d0 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    c5d0:	b580      	push	{r7, lr}
    c5d2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c5d4:	4b01      	ldr	r3, [pc, #4]	; (c5dc <USB_2_Handler+0xc>)
    c5d6:	4798      	blx	r3
}
    c5d8:	bf00      	nop
    c5da:	bd80      	pop	{r7, pc}
    c5dc:	0000b875 	.word	0x0000b875

0000c5e0 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    c5e0:	b580      	push	{r7, lr}
    c5e2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c5e4:	4b01      	ldr	r3, [pc, #4]	; (c5ec <USB_3_Handler+0xc>)
    c5e6:	4798      	blx	r3
}
    c5e8:	bf00      	nop
    c5ea:	bd80      	pop	{r7, pc}
    c5ec:	0000b875 	.word	0x0000b875

0000c5f0 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    c5f0:	b480      	push	{r7}
    c5f2:	b083      	sub	sp, #12
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	6078      	str	r0, [r7, #4]
    c5f8:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    c5fa:	bf00      	nop
    c5fc:	687b      	ldr	r3, [r7, #4]
    c5fe:	689a      	ldr	r2, [r3, #8]
    c600:	683b      	ldr	r3, [r7, #0]
    c602:	4013      	ands	r3, r2
    c604:	2b00      	cmp	r3, #0
    c606:	d1f9      	bne.n	c5fc <hri_wdt_wait_for_sync+0xc>
	};
}
    c608:	bf00      	nop
    c60a:	370c      	adds	r7, #12
    c60c:	46bd      	mov	sp, r7
    c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c612:	4770      	bx	lr

0000c614 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c614:	b580      	push	{r7, lr}
    c616:	b084      	sub	sp, #16
    c618:	af00      	add	r7, sp, #0
    c61a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c61c:	210e      	movs	r1, #14
    c61e:	6878      	ldr	r0, [r7, #4]
    c620:	4b0a      	ldr	r3, [pc, #40]	; (c64c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    c622:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c624:	687b      	ldr	r3, [r7, #4]
    c626:	781b      	ldrb	r3, [r3, #0]
    c628:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    c62a:	7bfb      	ldrb	r3, [r7, #15]
    c62c:	085b      	lsrs	r3, r3, #1
    c62e:	b2db      	uxtb	r3, r3
    c630:	f003 0301 	and.w	r3, r3, #1
    c634:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c636:	7bfb      	ldrb	r3, [r7, #15]
    c638:	2b00      	cmp	r3, #0
    c63a:	bf14      	ite	ne
    c63c:	2301      	movne	r3, #1
    c63e:	2300      	moveq	r3, #0
    c640:	b2db      	uxtb	r3, r3
}
    c642:	4618      	mov	r0, r3
    c644:	3710      	adds	r7, #16
    c646:	46bd      	mov	sp, r7
    c648:	bd80      	pop	{r7, pc}
    c64a:	bf00      	nop
    c64c:	0000c5f1 	.word	0x0000c5f1

0000c650 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    c650:	b580      	push	{r7, lr}
    c652:	b082      	sub	sp, #8
    c654:	af00      	add	r7, sp, #0
    c656:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	781b      	ldrb	r3, [r3, #0]
    c65c:	b2db      	uxtb	r3, r3
    c65e:	f023 0304 	bic.w	r3, r3, #4
    c662:	b2da      	uxtb	r2, r3
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c668:	210e      	movs	r1, #14
    c66a:	6878      	ldr	r0, [r7, #4]
    c66c:	4b02      	ldr	r3, [pc, #8]	; (c678 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    c66e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    c670:	bf00      	nop
    c672:	3708      	adds	r7, #8
    c674:	46bd      	mov	sp, r7
    c676:	bd80      	pop	{r7, pc}
    c678:	0000c5f1 	.word	0x0000c5f1

0000c67c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    c67c:	b580      	push	{r7, lr}
    c67e:	b084      	sub	sp, #16
    c680:	af00      	add	r7, sp, #0
    c682:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c684:	210e      	movs	r1, #14
    c686:	6878      	ldr	r0, [r7, #4]
    c688:	4b08      	ldr	r3, [pc, #32]	; (c6ac <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    c68a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c68c:	687b      	ldr	r3, [r7, #4]
    c68e:	781b      	ldrb	r3, [r3, #0]
    c690:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    c692:	7bfb      	ldrb	r3, [r7, #15]
    c694:	09db      	lsrs	r3, r3, #7
    c696:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c698:	7bfb      	ldrb	r3, [r7, #15]
    c69a:	2b00      	cmp	r3, #0
    c69c:	bf14      	ite	ne
    c69e:	2301      	movne	r3, #1
    c6a0:	2300      	moveq	r3, #0
    c6a2:	b2db      	uxtb	r3, r3
}
    c6a4:	4618      	mov	r0, r3
    c6a6:	3710      	adds	r7, #16
    c6a8:	46bd      	mov	sp, r7
    c6aa:	bd80      	pop	{r7, pc}
    c6ac:	0000c5f1 	.word	0x0000c5f1

0000c6b0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    c6b0:	b480      	push	{r7}
    c6b2:	b085      	sub	sp, #20
    c6b4:	af00      	add	r7, sp, #0
    c6b6:	6078      	str	r0, [r7, #4]
    c6b8:	460b      	mov	r3, r1
    c6ba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    c6bc:	687b      	ldr	r3, [r7, #4]
    c6be:	785b      	ldrb	r3, [r3, #1]
    c6c0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    c6c2:	7bfb      	ldrb	r3, [r7, #15]
    c6c4:	f023 030f 	bic.w	r3, r3, #15
    c6c8:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    c6ca:	78fb      	ldrb	r3, [r7, #3]
    c6cc:	f003 030f 	and.w	r3, r3, #15
    c6d0:	b2da      	uxtb	r2, r3
    c6d2:	7bfb      	ldrb	r3, [r7, #15]
    c6d4:	4313      	orrs	r3, r2
    c6d6:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    c6d8:	687b      	ldr	r3, [r7, #4]
    c6da:	7bfa      	ldrb	r2, [r7, #15]
    c6dc:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    c6de:	bf00      	nop
    c6e0:	3714      	adds	r7, #20
    c6e2:	46bd      	mov	sp, r7
    c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6e8:	4770      	bx	lr
	...

0000c6ec <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    c6ec:	b580      	push	{r7, lr}
    c6ee:	b082      	sub	sp, #8
    c6f0:	af00      	add	r7, sp, #0
    c6f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    c6f4:	687b      	ldr	r3, [r7, #4]
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	d005      	beq.n	c706 <_wdt_init+0x1a>
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	2b00      	cmp	r3, #0
    c700:	d001      	beq.n	c706 <_wdt_init+0x1a>
    c702:	2301      	movs	r3, #1
    c704:	e000      	b.n	c708 <_wdt_init+0x1c>
    c706:	2300      	movs	r3, #0
    c708:	f003 0301 	and.w	r3, r3, #1
    c70c:	b2db      	uxtb	r3, r3
    c70e:	2250      	movs	r2, #80	; 0x50
    c710:	4913      	ldr	r1, [pc, #76]	; (c760 <_wdt_init+0x74>)
    c712:	4618      	mov	r0, r3
    c714:	4b13      	ldr	r3, [pc, #76]	; (c764 <_wdt_init+0x78>)
    c716:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    c718:	687b      	ldr	r3, [r7, #4]
    c71a:	681b      	ldr	r3, [r3, #0]
    c71c:	4618      	mov	r0, r3
    c71e:	4b12      	ldr	r3, [pc, #72]	; (c768 <_wdt_init+0x7c>)
    c720:	4798      	blx	r3
    c722:	4603      	mov	r3, r0
    c724:	2b00      	cmp	r3, #0
    c726:	d107      	bne.n	c738 <_wdt_init+0x4c>
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	681b      	ldr	r3, [r3, #0]
    c72c:	4618      	mov	r0, r3
    c72e:	4b0f      	ldr	r3, [pc, #60]	; (c76c <_wdt_init+0x80>)
    c730:	4798      	blx	r3
    c732:	4603      	mov	r3, r0
    c734:	2b00      	cmp	r3, #0
    c736:	d002      	beq.n	c73e <_wdt_init+0x52>
		return ERR_DENIED;
    c738:	f06f 0310 	mvn.w	r3, #16
    c73c:	e00b      	b.n	c756 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	4618      	mov	r0, r3
    c744:	4b0a      	ldr	r3, [pc, #40]	; (c770 <_wdt_init+0x84>)
    c746:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    c748:	687b      	ldr	r3, [r7, #4]
    c74a:	681b      	ldr	r3, [r3, #0]
    c74c:	210b      	movs	r1, #11
    c74e:	4618      	mov	r0, r3
    c750:	4b08      	ldr	r3, [pc, #32]	; (c774 <_wdt_init+0x88>)
    c752:	4798      	blx	r3
	}

	return ERR_NONE;
    c754:	2300      	movs	r3, #0
}
    c756:	4618      	mov	r0, r3
    c758:	3708      	adds	r7, #8
    c75a:	46bd      	mov	sp, r7
    c75c:	bd80      	pop	{r7, pc}
    c75e:	bf00      	nop
    c760:	000114d8 	.word	0x000114d8
    c764:	00005239 	.word	0x00005239
    c768:	0000c67d 	.word	0x0000c67d
    c76c:	0000c615 	.word	0x0000c615
    c770:	0000c651 	.word	0x0000c651
    c774:	0000c6b1 	.word	0x0000c6b1

0000c778 <hri_port_set_DIR_reg>:
{
    c778:	b480      	push	{r7}
    c77a:	b085      	sub	sp, #20
    c77c:	af00      	add	r7, sp, #0
    c77e:	60f8      	str	r0, [r7, #12]
    c780:	460b      	mov	r3, r1
    c782:	607a      	str	r2, [r7, #4]
    c784:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    c786:	7afb      	ldrb	r3, [r7, #11]
    c788:	68fa      	ldr	r2, [r7, #12]
    c78a:	01db      	lsls	r3, r3, #7
    c78c:	4413      	add	r3, r2
    c78e:	3308      	adds	r3, #8
    c790:	687a      	ldr	r2, [r7, #4]
    c792:	601a      	str	r2, [r3, #0]
}
    c794:	bf00      	nop
    c796:	3714      	adds	r7, #20
    c798:	46bd      	mov	sp, r7
    c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c79e:	4770      	bx	lr

0000c7a0 <hri_port_clear_DIR_reg>:
{
    c7a0:	b480      	push	{r7}
    c7a2:	b085      	sub	sp, #20
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	60f8      	str	r0, [r7, #12]
    c7a8:	460b      	mov	r3, r1
    c7aa:	607a      	str	r2, [r7, #4]
    c7ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    c7ae:	7afb      	ldrb	r3, [r7, #11]
    c7b0:	68fa      	ldr	r2, [r7, #12]
    c7b2:	01db      	lsls	r3, r3, #7
    c7b4:	4413      	add	r3, r2
    c7b6:	3304      	adds	r3, #4
    c7b8:	687a      	ldr	r2, [r7, #4]
    c7ba:	601a      	str	r2, [r3, #0]
}
    c7bc:	bf00      	nop
    c7be:	3714      	adds	r7, #20
    c7c0:	46bd      	mov	sp, r7
    c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7c6:	4770      	bx	lr

0000c7c8 <hri_port_set_OUT_reg>:
{
    c7c8:	b480      	push	{r7}
    c7ca:	b085      	sub	sp, #20
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	60f8      	str	r0, [r7, #12]
    c7d0:	460b      	mov	r3, r1
    c7d2:	607a      	str	r2, [r7, #4]
    c7d4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    c7d6:	7afb      	ldrb	r3, [r7, #11]
    c7d8:	68fa      	ldr	r2, [r7, #12]
    c7da:	01db      	lsls	r3, r3, #7
    c7dc:	4413      	add	r3, r2
    c7de:	3318      	adds	r3, #24
    c7e0:	687a      	ldr	r2, [r7, #4]
    c7e2:	601a      	str	r2, [r3, #0]
}
    c7e4:	bf00      	nop
    c7e6:	3714      	adds	r7, #20
    c7e8:	46bd      	mov	sp, r7
    c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ee:	4770      	bx	lr

0000c7f0 <hri_port_clear_OUT_reg>:
{
    c7f0:	b480      	push	{r7}
    c7f2:	b085      	sub	sp, #20
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	60f8      	str	r0, [r7, #12]
    c7f8:	460b      	mov	r3, r1
    c7fa:	607a      	str	r2, [r7, #4]
    c7fc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    c7fe:	7afb      	ldrb	r3, [r7, #11]
    c800:	68fa      	ldr	r2, [r7, #12]
    c802:	01db      	lsls	r3, r3, #7
    c804:	4413      	add	r3, r2
    c806:	3314      	adds	r3, #20
    c808:	687a      	ldr	r2, [r7, #4]
    c80a:	601a      	str	r2, [r3, #0]
}
    c80c:	bf00      	nop
    c80e:	3714      	adds	r7, #20
    c810:	46bd      	mov	sp, r7
    c812:	f85d 7b04 	ldr.w	r7, [sp], #4
    c816:	4770      	bx	lr

0000c818 <hri_port_write_PMUX_PMUXE_bf>:
{
    c818:	b480      	push	{r7}
    c81a:	b085      	sub	sp, #20
    c81c:	af00      	add	r7, sp, #0
    c81e:	6078      	str	r0, [r7, #4]
    c820:	4608      	mov	r0, r1
    c822:	4611      	mov	r1, r2
    c824:	461a      	mov	r2, r3
    c826:	4603      	mov	r3, r0
    c828:	70fb      	strb	r3, [r7, #3]
    c82a:	460b      	mov	r3, r1
    c82c:	70bb      	strb	r3, [r7, #2]
    c82e:	4613      	mov	r3, r2
    c830:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    c832:	78fa      	ldrb	r2, [r7, #3]
    c834:	78bb      	ldrb	r3, [r7, #2]
    c836:	6879      	ldr	r1, [r7, #4]
    c838:	01d2      	lsls	r2, r2, #7
    c83a:	440a      	add	r2, r1
    c83c:	4413      	add	r3, r2
    c83e:	3330      	adds	r3, #48	; 0x30
    c840:	781b      	ldrb	r3, [r3, #0]
    c842:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    c844:	7bfb      	ldrb	r3, [r7, #15]
    c846:	f023 030f 	bic.w	r3, r3, #15
    c84a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    c84c:	787b      	ldrb	r3, [r7, #1]
    c84e:	f003 030f 	and.w	r3, r3, #15
    c852:	b2da      	uxtb	r2, r3
    c854:	7bfb      	ldrb	r3, [r7, #15]
    c856:	4313      	orrs	r3, r2
    c858:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    c85a:	78fa      	ldrb	r2, [r7, #3]
    c85c:	78bb      	ldrb	r3, [r7, #2]
    c85e:	6879      	ldr	r1, [r7, #4]
    c860:	01d2      	lsls	r2, r2, #7
    c862:	440a      	add	r2, r1
    c864:	4413      	add	r3, r2
    c866:	3330      	adds	r3, #48	; 0x30
    c868:	7bfa      	ldrb	r2, [r7, #15]
    c86a:	701a      	strb	r2, [r3, #0]
}
    c86c:	bf00      	nop
    c86e:	3714      	adds	r7, #20
    c870:	46bd      	mov	sp, r7
    c872:	f85d 7b04 	ldr.w	r7, [sp], #4
    c876:	4770      	bx	lr

0000c878 <hri_port_write_PMUX_PMUXO_bf>:
{
    c878:	b480      	push	{r7}
    c87a:	b085      	sub	sp, #20
    c87c:	af00      	add	r7, sp, #0
    c87e:	6078      	str	r0, [r7, #4]
    c880:	4608      	mov	r0, r1
    c882:	4611      	mov	r1, r2
    c884:	461a      	mov	r2, r3
    c886:	4603      	mov	r3, r0
    c888:	70fb      	strb	r3, [r7, #3]
    c88a:	460b      	mov	r3, r1
    c88c:	70bb      	strb	r3, [r7, #2]
    c88e:	4613      	mov	r3, r2
    c890:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    c892:	78fa      	ldrb	r2, [r7, #3]
    c894:	78bb      	ldrb	r3, [r7, #2]
    c896:	6879      	ldr	r1, [r7, #4]
    c898:	01d2      	lsls	r2, r2, #7
    c89a:	440a      	add	r2, r1
    c89c:	4413      	add	r3, r2
    c89e:	3330      	adds	r3, #48	; 0x30
    c8a0:	781b      	ldrb	r3, [r3, #0]
    c8a2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    c8a4:	7bfb      	ldrb	r3, [r7, #15]
    c8a6:	f003 030f 	and.w	r3, r3, #15
    c8aa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    c8ac:	787b      	ldrb	r3, [r7, #1]
    c8ae:	011b      	lsls	r3, r3, #4
    c8b0:	b2da      	uxtb	r2, r3
    c8b2:	7bfb      	ldrb	r3, [r7, #15]
    c8b4:	4313      	orrs	r3, r2
    c8b6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    c8b8:	78fa      	ldrb	r2, [r7, #3]
    c8ba:	78bb      	ldrb	r3, [r7, #2]
    c8bc:	6879      	ldr	r1, [r7, #4]
    c8be:	01d2      	lsls	r2, r2, #7
    c8c0:	440a      	add	r2, r1
    c8c2:	4413      	add	r3, r2
    c8c4:	3330      	adds	r3, #48	; 0x30
    c8c6:	7bfa      	ldrb	r2, [r7, #15]
    c8c8:	701a      	strb	r2, [r3, #0]
}
    c8ca:	bf00      	nop
    c8cc:	3714      	adds	r7, #20
    c8ce:	46bd      	mov	sp, r7
    c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8d4:	4770      	bx	lr

0000c8d6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    c8d6:	b480      	push	{r7}
    c8d8:	b085      	sub	sp, #20
    c8da:	af00      	add	r7, sp, #0
    c8dc:	6078      	str	r0, [r7, #4]
    c8de:	4608      	mov	r0, r1
    c8e0:	4611      	mov	r1, r2
    c8e2:	461a      	mov	r2, r3
    c8e4:	4603      	mov	r3, r0
    c8e6:	70fb      	strb	r3, [r7, #3]
    c8e8:	460b      	mov	r3, r1
    c8ea:	70bb      	strb	r3, [r7, #2]
    c8ec:	4613      	mov	r3, r2
    c8ee:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    c8f0:	78fa      	ldrb	r2, [r7, #3]
    c8f2:	78bb      	ldrb	r3, [r7, #2]
    c8f4:	6879      	ldr	r1, [r7, #4]
    c8f6:	01d2      	lsls	r2, r2, #7
    c8f8:	440a      	add	r2, r1
    c8fa:	4413      	add	r3, r2
    c8fc:	3340      	adds	r3, #64	; 0x40
    c8fe:	781b      	ldrb	r3, [r3, #0]
    c900:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    c902:	7bfb      	ldrb	r3, [r7, #15]
    c904:	f023 0301 	bic.w	r3, r3, #1
    c908:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    c90a:	787a      	ldrb	r2, [r7, #1]
    c90c:	7bfb      	ldrb	r3, [r7, #15]
    c90e:	4313      	orrs	r3, r2
    c910:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    c912:	78fa      	ldrb	r2, [r7, #3]
    c914:	78bb      	ldrb	r3, [r7, #2]
    c916:	6879      	ldr	r1, [r7, #4]
    c918:	01d2      	lsls	r2, r2, #7
    c91a:	440a      	add	r2, r1
    c91c:	4413      	add	r3, r2
    c91e:	3340      	adds	r3, #64	; 0x40
    c920:	7bfa      	ldrb	r2, [r7, #15]
    c922:	701a      	strb	r2, [r3, #0]
}
    c924:	bf00      	nop
    c926:	3714      	adds	r7, #20
    c928:	46bd      	mov	sp, r7
    c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c92e:	4770      	bx	lr

0000c930 <hri_port_write_WRCONFIG_reg>:
{
    c930:	b480      	push	{r7}
    c932:	b085      	sub	sp, #20
    c934:	af00      	add	r7, sp, #0
    c936:	60f8      	str	r0, [r7, #12]
    c938:	460b      	mov	r3, r1
    c93a:	607a      	str	r2, [r7, #4]
    c93c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    c93e:	7afb      	ldrb	r3, [r7, #11]
    c940:	68fa      	ldr	r2, [r7, #12]
    c942:	01db      	lsls	r3, r3, #7
    c944:	4413      	add	r3, r2
    c946:	3328      	adds	r3, #40	; 0x28
    c948:	687a      	ldr	r2, [r7, #4]
    c94a:	601a      	str	r2, [r3, #0]
}
    c94c:	bf00      	nop
    c94e:	3714      	adds	r7, #20
    c950:	46bd      	mov	sp, r7
    c952:	f85d 7b04 	ldr.w	r7, [sp], #4
    c956:	4770      	bx	lr

0000c958 <_gpio_set_direction>:
{
    c958:	b580      	push	{r7, lr}
    c95a:	b082      	sub	sp, #8
    c95c:	af00      	add	r7, sp, #0
    c95e:	4603      	mov	r3, r0
    c960:	6039      	str	r1, [r7, #0]
    c962:	71fb      	strb	r3, [r7, #7]
    c964:	4613      	mov	r3, r2
    c966:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    c968:	79bb      	ldrb	r3, [r7, #6]
    c96a:	2b01      	cmp	r3, #1
    c96c:	d01c      	beq.n	c9a8 <_gpio_set_direction+0x50>
    c96e:	2b02      	cmp	r3, #2
    c970:	d037      	beq.n	c9e2 <_gpio_set_direction+0x8a>
    c972:	2b00      	cmp	r3, #0
    c974:	d14e      	bne.n	ca14 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    c976:	79fb      	ldrb	r3, [r7, #7]
    c978:	683a      	ldr	r2, [r7, #0]
    c97a:	4619      	mov	r1, r3
    c97c:	482a      	ldr	r0, [pc, #168]	; (ca28 <_gpio_set_direction+0xd0>)
    c97e:	4b2b      	ldr	r3, [pc, #172]	; (ca2c <_gpio_set_direction+0xd4>)
    c980:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    c982:	683b      	ldr	r3, [r7, #0]
    c984:	b29b      	uxth	r3, r3
    c986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    c98a:	79fb      	ldrb	r3, [r7, #7]
    c98c:	4619      	mov	r1, r3
    c98e:	4826      	ldr	r0, [pc, #152]	; (ca28 <_gpio_set_direction+0xd0>)
    c990:	4b27      	ldr	r3, [pc, #156]	; (ca30 <_gpio_set_direction+0xd8>)
    c992:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    c994:	683b      	ldr	r3, [r7, #0]
    c996:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    c998:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    c99c:	79fb      	ldrb	r3, [r7, #7]
    c99e:	4619      	mov	r1, r3
    c9a0:	4821      	ldr	r0, [pc, #132]	; (ca28 <_gpio_set_direction+0xd0>)
    c9a2:	4b23      	ldr	r3, [pc, #140]	; (ca30 <_gpio_set_direction+0xd8>)
    c9a4:	4798      	blx	r3
		break;
    c9a6:	e03a      	b.n	ca1e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    c9a8:	79fb      	ldrb	r3, [r7, #7]
    c9aa:	683a      	ldr	r2, [r7, #0]
    c9ac:	4619      	mov	r1, r3
    c9ae:	481e      	ldr	r0, [pc, #120]	; (ca28 <_gpio_set_direction+0xd0>)
    c9b0:	4b1e      	ldr	r3, [pc, #120]	; (ca2c <_gpio_set_direction+0xd4>)
    c9b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    c9b4:	683b      	ldr	r3, [r7, #0]
    c9b6:	b29b      	uxth	r3, r3
    c9b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c9bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c9c0:	79f9      	ldrb	r1, [r7, #7]
    c9c2:	461a      	mov	r2, r3
    c9c4:	4818      	ldr	r0, [pc, #96]	; (ca28 <_gpio_set_direction+0xd0>)
    c9c6:	4b1a      	ldr	r3, [pc, #104]	; (ca30 <_gpio_set_direction+0xd8>)
    c9c8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    c9ca:	683b      	ldr	r3, [r7, #0]
    c9cc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    c9ce:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    c9d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c9d6:	79f9      	ldrb	r1, [r7, #7]
    c9d8:	461a      	mov	r2, r3
    c9da:	4813      	ldr	r0, [pc, #76]	; (ca28 <_gpio_set_direction+0xd0>)
    c9dc:	4b14      	ldr	r3, [pc, #80]	; (ca30 <_gpio_set_direction+0xd8>)
    c9de:	4798      	blx	r3
		break;
    c9e0:	e01d      	b.n	ca1e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    c9e2:	79fb      	ldrb	r3, [r7, #7]
    c9e4:	683a      	ldr	r2, [r7, #0]
    c9e6:	4619      	mov	r1, r3
    c9e8:	480f      	ldr	r0, [pc, #60]	; (ca28 <_gpio_set_direction+0xd0>)
    c9ea:	4b12      	ldr	r3, [pc, #72]	; (ca34 <_gpio_set_direction+0xdc>)
    c9ec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    c9ee:	683b      	ldr	r3, [r7, #0]
    c9f0:	b29b      	uxth	r3, r3
    c9f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    c9f6:	79fb      	ldrb	r3, [r7, #7]
    c9f8:	4619      	mov	r1, r3
    c9fa:	480b      	ldr	r0, [pc, #44]	; (ca28 <_gpio_set_direction+0xd0>)
    c9fc:	4b0c      	ldr	r3, [pc, #48]	; (ca30 <_gpio_set_direction+0xd8>)
    c9fe:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ca00:	683b      	ldr	r3, [r7, #0]
    ca02:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ca04:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ca08:	79fb      	ldrb	r3, [r7, #7]
    ca0a:	4619      	mov	r1, r3
    ca0c:	4806      	ldr	r0, [pc, #24]	; (ca28 <_gpio_set_direction+0xd0>)
    ca0e:	4b08      	ldr	r3, [pc, #32]	; (ca30 <_gpio_set_direction+0xd8>)
    ca10:	4798      	blx	r3
		break;
    ca12:	e004      	b.n	ca1e <_gpio_set_direction+0xc6>
		ASSERT(false);
    ca14:	2246      	movs	r2, #70	; 0x46
    ca16:	4908      	ldr	r1, [pc, #32]	; (ca38 <_gpio_set_direction+0xe0>)
    ca18:	2000      	movs	r0, #0
    ca1a:	4b08      	ldr	r3, [pc, #32]	; (ca3c <_gpio_set_direction+0xe4>)
    ca1c:	4798      	blx	r3
}
    ca1e:	bf00      	nop
    ca20:	3708      	adds	r7, #8
    ca22:	46bd      	mov	sp, r7
    ca24:	bd80      	pop	{r7, pc}
    ca26:	bf00      	nop
    ca28:	41008000 	.word	0x41008000
    ca2c:	0000c7a1 	.word	0x0000c7a1
    ca30:	0000c931 	.word	0x0000c931
    ca34:	0000c779 	.word	0x0000c779
    ca38:	000114f0 	.word	0x000114f0
    ca3c:	00005239 	.word	0x00005239

0000ca40 <_gpio_set_level>:
{
    ca40:	b580      	push	{r7, lr}
    ca42:	b082      	sub	sp, #8
    ca44:	af00      	add	r7, sp, #0
    ca46:	4603      	mov	r3, r0
    ca48:	6039      	str	r1, [r7, #0]
    ca4a:	71fb      	strb	r3, [r7, #7]
    ca4c:	4613      	mov	r3, r2
    ca4e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ca50:	79bb      	ldrb	r3, [r7, #6]
    ca52:	2b00      	cmp	r3, #0
    ca54:	d006      	beq.n	ca64 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ca56:	79fb      	ldrb	r3, [r7, #7]
    ca58:	683a      	ldr	r2, [r7, #0]
    ca5a:	4619      	mov	r1, r3
    ca5c:	4806      	ldr	r0, [pc, #24]	; (ca78 <_gpio_set_level+0x38>)
    ca5e:	4b07      	ldr	r3, [pc, #28]	; (ca7c <_gpio_set_level+0x3c>)
    ca60:	4798      	blx	r3
}
    ca62:	e005      	b.n	ca70 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ca64:	79fb      	ldrb	r3, [r7, #7]
    ca66:	683a      	ldr	r2, [r7, #0]
    ca68:	4619      	mov	r1, r3
    ca6a:	4803      	ldr	r0, [pc, #12]	; (ca78 <_gpio_set_level+0x38>)
    ca6c:	4b04      	ldr	r3, [pc, #16]	; (ca80 <_gpio_set_level+0x40>)
    ca6e:	4798      	blx	r3
}
    ca70:	bf00      	nop
    ca72:	3708      	adds	r7, #8
    ca74:	46bd      	mov	sp, r7
    ca76:	bd80      	pop	{r7, pc}
    ca78:	41008000 	.word	0x41008000
    ca7c:	0000c7c9 	.word	0x0000c7c9
    ca80:	0000c7f1 	.word	0x0000c7f1

0000ca84 <_gpio_set_pin_function>:
{
    ca84:	b590      	push	{r4, r7, lr}
    ca86:	b085      	sub	sp, #20
    ca88:	af00      	add	r7, sp, #0
    ca8a:	6078      	str	r0, [r7, #4]
    ca8c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	095b      	lsrs	r3, r3, #5
    ca92:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ca94:	687b      	ldr	r3, [r7, #4]
    ca96:	b2db      	uxtb	r3, r3
    ca98:	f003 031f 	and.w	r3, r3, #31
    ca9c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ca9e:	683b      	ldr	r3, [r7, #0]
    caa0:	f1b3 3fff 	cmp.w	r3, #4294967295
    caa4:	d106      	bne.n	cab4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    caa6:	7bba      	ldrb	r2, [r7, #14]
    caa8:	7bf9      	ldrb	r1, [r7, #15]
    caaa:	2300      	movs	r3, #0
    caac:	4812      	ldr	r0, [pc, #72]	; (caf8 <_gpio_set_pin_function+0x74>)
    caae:	4c13      	ldr	r4, [pc, #76]	; (cafc <_gpio_set_pin_function+0x78>)
    cab0:	47a0      	blx	r4
}
    cab2:	e01d      	b.n	caf0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    cab4:	7bba      	ldrb	r2, [r7, #14]
    cab6:	7bf9      	ldrb	r1, [r7, #15]
    cab8:	2301      	movs	r3, #1
    caba:	480f      	ldr	r0, [pc, #60]	; (caf8 <_gpio_set_pin_function+0x74>)
    cabc:	4c0f      	ldr	r4, [pc, #60]	; (cafc <_gpio_set_pin_function+0x78>)
    cabe:	47a0      	blx	r4
		if (pin & 1) {
    cac0:	7bbb      	ldrb	r3, [r7, #14]
    cac2:	f003 0301 	and.w	r3, r3, #1
    cac6:	2b00      	cmp	r3, #0
    cac8:	d009      	beq.n	cade <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    caca:	7bbb      	ldrb	r3, [r7, #14]
    cacc:	085b      	lsrs	r3, r3, #1
    cace:	b2da      	uxtb	r2, r3
    cad0:	683b      	ldr	r3, [r7, #0]
    cad2:	b2db      	uxtb	r3, r3
    cad4:	7bf9      	ldrb	r1, [r7, #15]
    cad6:	4808      	ldr	r0, [pc, #32]	; (caf8 <_gpio_set_pin_function+0x74>)
    cad8:	4c09      	ldr	r4, [pc, #36]	; (cb00 <_gpio_set_pin_function+0x7c>)
    cada:	47a0      	blx	r4
}
    cadc:	e008      	b.n	caf0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    cade:	7bbb      	ldrb	r3, [r7, #14]
    cae0:	085b      	lsrs	r3, r3, #1
    cae2:	b2da      	uxtb	r2, r3
    cae4:	683b      	ldr	r3, [r7, #0]
    cae6:	b2db      	uxtb	r3, r3
    cae8:	7bf9      	ldrb	r1, [r7, #15]
    caea:	4803      	ldr	r0, [pc, #12]	; (caf8 <_gpio_set_pin_function+0x74>)
    caec:	4c05      	ldr	r4, [pc, #20]	; (cb04 <_gpio_set_pin_function+0x80>)
    caee:	47a0      	blx	r4
}
    caf0:	bf00      	nop
    caf2:	3714      	adds	r7, #20
    caf4:	46bd      	mov	sp, r7
    caf6:	bd90      	pop	{r4, r7, pc}
    caf8:	41008000 	.word	0x41008000
    cafc:	0000c8d7 	.word	0x0000c8d7
    cb00:	0000c879 	.word	0x0000c879
    cb04:	0000c819 	.word	0x0000c819

0000cb08 <gpio_set_pin_function>:
{
    cb08:	b580      	push	{r7, lr}
    cb0a:	b082      	sub	sp, #8
    cb0c:	af00      	add	r7, sp, #0
    cb0e:	6078      	str	r0, [r7, #4]
    cb10:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    cb12:	6839      	ldr	r1, [r7, #0]
    cb14:	6878      	ldr	r0, [r7, #4]
    cb16:	4b03      	ldr	r3, [pc, #12]	; (cb24 <gpio_set_pin_function+0x1c>)
    cb18:	4798      	blx	r3
}
    cb1a:	bf00      	nop
    cb1c:	3708      	adds	r7, #8
    cb1e:	46bd      	mov	sp, r7
    cb20:	bd80      	pop	{r7, pc}
    cb22:	bf00      	nop
    cb24:	0000ca85 	.word	0x0000ca85

0000cb28 <gpio_set_pin_direction>:
{
    cb28:	b580      	push	{r7, lr}
    cb2a:	b082      	sub	sp, #8
    cb2c:	af00      	add	r7, sp, #0
    cb2e:	4603      	mov	r3, r0
    cb30:	460a      	mov	r2, r1
    cb32:	71fb      	strb	r3, [r7, #7]
    cb34:	4613      	mov	r3, r2
    cb36:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    cb38:	79fb      	ldrb	r3, [r7, #7]
    cb3a:	095b      	lsrs	r3, r3, #5
    cb3c:	b2d8      	uxtb	r0, r3
    cb3e:	79fb      	ldrb	r3, [r7, #7]
    cb40:	f003 031f 	and.w	r3, r3, #31
    cb44:	2201      	movs	r2, #1
    cb46:	fa02 f303 	lsl.w	r3, r2, r3
    cb4a:	79ba      	ldrb	r2, [r7, #6]
    cb4c:	4619      	mov	r1, r3
    cb4e:	4b03      	ldr	r3, [pc, #12]	; (cb5c <gpio_set_pin_direction+0x34>)
    cb50:	4798      	blx	r3
}
    cb52:	bf00      	nop
    cb54:	3708      	adds	r7, #8
    cb56:	46bd      	mov	sp, r7
    cb58:	bd80      	pop	{r7, pc}
    cb5a:	bf00      	nop
    cb5c:	0000c959 	.word	0x0000c959

0000cb60 <gpio_set_pin_level>:
{
    cb60:	b580      	push	{r7, lr}
    cb62:	b082      	sub	sp, #8
    cb64:	af00      	add	r7, sp, #0
    cb66:	4603      	mov	r3, r0
    cb68:	460a      	mov	r2, r1
    cb6a:	71fb      	strb	r3, [r7, #7]
    cb6c:	4613      	mov	r3, r2
    cb6e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    cb70:	79fb      	ldrb	r3, [r7, #7]
    cb72:	095b      	lsrs	r3, r3, #5
    cb74:	b2d8      	uxtb	r0, r3
    cb76:	79fb      	ldrb	r3, [r7, #7]
    cb78:	f003 031f 	and.w	r3, r3, #31
    cb7c:	2201      	movs	r2, #1
    cb7e:	fa02 f303 	lsl.w	r3, r2, r3
    cb82:	79ba      	ldrb	r2, [r7, #6]
    cb84:	4619      	mov	r1, r3
    cb86:	4b03      	ldr	r3, [pc, #12]	; (cb94 <gpio_set_pin_level+0x34>)
    cb88:	4798      	blx	r3
}
    cb8a:	bf00      	nop
    cb8c:	3708      	adds	r7, #8
    cb8e:	46bd      	mov	sp, r7
    cb90:	bd80      	pop	{r7, pc}
    cb92:	bf00      	nop
    cb94:	0000ca41 	.word	0x0000ca41

0000cb98 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    cb98:	b580      	push	{r7, lr}
    cb9a:	b082      	sub	sp, #8
    cb9c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    cb9e:	2100      	movs	r1, #0
    cba0:	2008      	movs	r0, #8
    cba2:	4b24      	ldr	r3, [pc, #144]	; (cc34 <QSPI_N25Q256_exit_xip+0x9c>)
    cba4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    cba6:	2100      	movs	r1, #0
    cba8:	202b      	movs	r0, #43	; 0x2b
    cbaa:	4b22      	ldr	r3, [pc, #136]	; (cc34 <QSPI_N25Q256_exit_xip+0x9c>)
    cbac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    cbae:	2100      	movs	r1, #0
    cbb0:	202a      	movs	r0, #42	; 0x2a
    cbb2:	4b20      	ldr	r3, [pc, #128]	; (cc34 <QSPI_N25Q256_exit_xip+0x9c>)
    cbb4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    cbb6:	2102      	movs	r1, #2
    cbb8:	2008      	movs	r0, #8
    cbba:	4b1f      	ldr	r3, [pc, #124]	; (cc38 <QSPI_N25Q256_exit_xip+0xa0>)
    cbbc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    cbbe:	2102      	movs	r1, #2
    cbc0:	202b      	movs	r0, #43	; 0x2b
    cbc2:	4b1d      	ldr	r3, [pc, #116]	; (cc38 <QSPI_N25Q256_exit_xip+0xa0>)
    cbc4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    cbc6:	2102      	movs	r1, #2
    cbc8:	202a      	movs	r0, #42	; 0x2a
    cbca:	4b1b      	ldr	r3, [pc, #108]	; (cc38 <QSPI_N25Q256_exit_xip+0xa0>)
    cbcc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    cbce:	2101      	movs	r1, #1
    cbd0:	2008      	movs	r0, #8
    cbd2:	4b1a      	ldr	r3, [pc, #104]	; (cc3c <QSPI_N25Q256_exit_xip+0xa4>)
    cbd4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    cbd6:	2100      	movs	r1, #0
    cbd8:	202b      	movs	r0, #43	; 0x2b
    cbda:	4b18      	ldr	r3, [pc, #96]	; (cc3c <QSPI_N25Q256_exit_xip+0xa4>)
    cbdc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    cbde:	2100      	movs	r1, #0
    cbe0:	202a      	movs	r0, #42	; 0x2a
    cbe2:	4b16      	ldr	r3, [pc, #88]	; (cc3c <QSPI_N25Q256_exit_xip+0xa4>)
    cbe4:	4798      	blx	r3

	delay_us(1);
    cbe6:	2001      	movs	r0, #1
    cbe8:	4b15      	ldr	r3, [pc, #84]	; (cc40 <QSPI_N25Q256_exit_xip+0xa8>)
    cbea:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    cbec:	2300      	movs	r3, #0
    cbee:	607b      	str	r3, [r7, #4]
    cbf0:	e010      	b.n	cc14 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    cbf2:	2101      	movs	r1, #1
    cbf4:	202a      	movs	r0, #42	; 0x2a
    cbf6:	4b11      	ldr	r3, [pc, #68]	; (cc3c <QSPI_N25Q256_exit_xip+0xa4>)
    cbf8:	4798      	blx	r3
		delay_us(1);
    cbfa:	2001      	movs	r0, #1
    cbfc:	4b10      	ldr	r3, [pc, #64]	; (cc40 <QSPI_N25Q256_exit_xip+0xa8>)
    cbfe:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    cc00:	2100      	movs	r1, #0
    cc02:	202a      	movs	r0, #42	; 0x2a
    cc04:	4b0d      	ldr	r3, [pc, #52]	; (cc3c <QSPI_N25Q256_exit_xip+0xa4>)
    cc06:	4798      	blx	r3
		delay_us(1);
    cc08:	2001      	movs	r0, #1
    cc0a:	4b0d      	ldr	r3, [pc, #52]	; (cc40 <QSPI_N25Q256_exit_xip+0xa8>)
    cc0c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    cc0e:	687b      	ldr	r3, [r7, #4]
    cc10:	3301      	adds	r3, #1
    cc12:	607b      	str	r3, [r7, #4]
    cc14:	687b      	ldr	r3, [r7, #4]
    cc16:	2b06      	cmp	r3, #6
    cc18:	ddeb      	ble.n	cbf2 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    cc1a:	2101      	movs	r1, #1
    cc1c:	202b      	movs	r0, #43	; 0x2b
    cc1e:	4b07      	ldr	r3, [pc, #28]	; (cc3c <QSPI_N25Q256_exit_xip+0xa4>)
    cc20:	4798      	blx	r3
	delay_us(1);
    cc22:	2001      	movs	r0, #1
    cc24:	4b06      	ldr	r3, [pc, #24]	; (cc40 <QSPI_N25Q256_exit_xip+0xa8>)
    cc26:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    cc28:	4b06      	ldr	r3, [pc, #24]	; (cc44 <QSPI_N25Q256_exit_xip+0xac>)
    cc2a:	4798      	blx	r3
}
    cc2c:	bf00      	nop
    cc2e:	3708      	adds	r7, #8
    cc30:	46bd      	mov	sp, r7
    cc32:	bd80      	pop	{r7, pc}
    cc34:	0000cb09 	.word	0x0000cb09
    cc38:	0000cb29 	.word	0x0000cb29
    cc3c:	0000cb61 	.word	0x0000cb61
    cc40:	00003e81 	.word	0x00003e81
    cc44:	00002f29 	.word	0x00002f29

0000cc48 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    cc48:	b598      	push	{r3, r4, r7, lr}
    cc4a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    cc4c:	4806      	ldr	r0, [pc, #24]	; (cc68 <spi_nor_flash_init+0x20>)
    cc4e:	4b07      	ldr	r3, [pc, #28]	; (cc6c <spi_nor_flash_init+0x24>)
    cc50:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    cc52:	2300      	movs	r3, #0
    cc54:	4a06      	ldr	r2, [pc, #24]	; (cc70 <spi_nor_flash_init+0x28>)
    cc56:	4904      	ldr	r1, [pc, #16]	; (cc68 <spi_nor_flash_init+0x20>)
    cc58:	4806      	ldr	r0, [pc, #24]	; (cc74 <spi_nor_flash_init+0x2c>)
    cc5a:	4c07      	ldr	r4, [pc, #28]	; (cc78 <spi_nor_flash_init+0x30>)
    cc5c:	47a0      	blx	r4
    cc5e:	4602      	mov	r2, r0
    cc60:	4b06      	ldr	r3, [pc, #24]	; (cc7c <spi_nor_flash_init+0x34>)
    cc62:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    cc64:	bf00      	nop
    cc66:	bd98      	pop	{r3, r4, r7, pc}
    cc68:	2000a868 	.word	0x2000a868
    cc6c:	00004261 	.word	0x00004261
    cc70:	0000cb99 	.word	0x0000cb99
    cc74:	200011f0 	.word	0x200011f0
    cc78:	0000d069 	.word	0x0000d069
    cc7c:	2000aa68 	.word	0x2000aa68

0000cc80 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    cc80:	b580      	push	{r7, lr}
    cc82:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    cc84:	4805      	ldr	r0, [pc, #20]	; (cc9c <cdc_device_acm_init+0x1c>)
    cc86:	4b06      	ldr	r3, [pc, #24]	; (cca0 <cdc_device_acm_init+0x20>)
    cc88:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    cc8a:	4b06      	ldr	r3, [pc, #24]	; (cca4 <cdc_device_acm_init+0x24>)
    cc8c:	4798      	blx	r3

	usbdc_start(single_desc);
    cc8e:	4806      	ldr	r0, [pc, #24]	; (cca8 <cdc_device_acm_init+0x28>)
    cc90:	4b06      	ldr	r3, [pc, #24]	; (ccac <cdc_device_acm_init+0x2c>)
    cc92:	4798      	blx	r3
	usbdc_attach();
    cc94:	4b06      	ldr	r3, [pc, #24]	; (ccb0 <cdc_device_acm_init+0x30>)
    cc96:	4798      	blx	r3
}
    cc98:	bf00      	nop
    cc9a:	bd80      	pop	{r7, pc}
    cc9c:	20001240 	.word	0x20001240
    cca0:	0000e655 	.word	0x0000e655
    cca4:	0000da09 	.word	0x0000da09
    cca8:	20000200 	.word	0x20000200
    ccac:	0000e6f1 	.word	0x0000e6f1
    ccb0:	0000e741 	.word	0x0000e741

0000ccb4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ccb4:	b580      	push	{r7, lr}
    ccb6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ccb8:	4b01      	ldr	r3, [pc, #4]	; (ccc0 <usb_init+0xc>)
    ccba:	4798      	blx	r3
}
    ccbc:	bf00      	nop
    ccbe:	bd80      	pop	{r7, pc}
    ccc0:	0000cc81 	.word	0x0000cc81

0000ccc4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    ccc4:	b580      	push	{r7, lr}
    ccc6:	b08c      	sub	sp, #48	; 0x30
    ccc8:	af00      	add	r7, sp, #0
    ccca:	6078      	str	r0, [r7, #4]
    cccc:	460b      	mov	r3, r1
    ccce:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ccd0:	687b      	ldr	r3, [r7, #4]
    ccd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ccd4:	687b      	ldr	r3, [r7, #4]
    ccd6:	681b      	ldr	r3, [r3, #0]
    ccd8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    ccda:	f107 030c 	add.w	r3, r7, #12
    ccde:	2200      	movs	r2, #0
    cce0:	601a      	str	r2, [r3, #0]
    cce2:	605a      	str	r2, [r3, #4]
    cce4:	609a      	str	r2, [r3, #8]
    cce6:	60da      	str	r2, [r3, #12]
    cce8:	611a      	str	r2, [r3, #16]
    ccea:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccee:	7b1b      	ldrb	r3, [r3, #12]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	d001      	beq.n	ccf8 <n25q256a_xip_confirm+0x34>
    ccf4:	2206      	movs	r2, #6
    ccf6:	e000      	b.n	ccfa <n25q256a_xip_confirm+0x36>
    ccf8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    ccfa:	7b3b      	ldrb	r3, [r7, #12]
    ccfc:	f362 0302 	bfi	r3, r2, #0, #3
    cd00:	733b      	strb	r3, [r7, #12]
    cd02:	7b3b      	ldrb	r3, [r7, #12]
    cd04:	f043 0310 	orr.w	r3, r3, #16
    cd08:	733b      	strb	r3, [r7, #12]
    cd0a:	7b3b      	ldrb	r3, [r7, #12]
    cd0c:	f043 0320 	orr.w	r3, r3, #32
    cd10:	733b      	strb	r3, [r7, #12]
    cd12:	7b3b      	ldrb	r3, [r7, #12]
    cd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cd18:	733b      	strb	r3, [r7, #12]
    cd1a:	7b3b      	ldrb	r3, [r7, #12]
    cd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cd20:	733b      	strb	r3, [r7, #12]
    cd22:	7b7b      	ldrb	r3, [r7, #13]
    cd24:	f043 0303 	orr.w	r3, r3, #3
    cd28:	737b      	strb	r3, [r7, #13]
    cd2a:	7b7b      	ldrb	r3, [r7, #13]
    cd2c:	2201      	movs	r2, #1
    cd2e:	f362 1305 	bfi	r3, r2, #4, #2
    cd32:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    cd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd36:	7b1b      	ldrb	r3, [r3, #12]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d001      	beq.n	cd40 <n25q256a_xip_confirm+0x7c>
    cd3c:	2208      	movs	r2, #8
    cd3e:	e000      	b.n	cd42 <n25q256a_xip_confirm+0x7e>
    cd40:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    cd42:	7bbb      	ldrb	r3, [r7, #14]
    cd44:	f362 0304 	bfi	r3, r2, #0, #5
    cd48:	73bb      	strb	r3, [r7, #14]
    cd4a:	230b      	movs	r3, #11
    cd4c:	743b      	strb	r3, [r7, #16]
    cd4e:	78fb      	ldrb	r3, [r7, #3]
    cd50:	2b00      	cmp	r3, #0
    cd52:	d001      	beq.n	cd58 <n25q256a_xip_confirm+0x94>
    cd54:	2300      	movs	r3, #0
    cd56:	e000      	b.n	cd5a <n25q256a_xip_confirm+0x96>
    cd58:	23ff      	movs	r3, #255	; 0xff
    cd5a:	747b      	strb	r3, [r7, #17]
    cd5c:	2301      	movs	r3, #1
    cd5e:	61bb      	str	r3, [r7, #24]
    cd60:	f107 0327 	add.w	r3, r7, #39	; 0x27
    cd64:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    cd66:	f107 030c 	add.w	r3, r7, #12
    cd6a:	4619      	mov	r1, r3
    cd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cd6e:	4b07      	ldr	r3, [pc, #28]	; (cd8c <n25q256a_xip_confirm+0xc8>)
    cd70:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    cd72:	78fb      	ldrb	r3, [r7, #3]
    cd74:	2b00      	cmp	r3, #0
    cd76:	d001      	beq.n	cd7c <n25q256a_xip_confirm+0xb8>
    cd78:	2202      	movs	r2, #2
    cd7a:	e000      	b.n	cd7e <n25q256a_xip_confirm+0xba>
    cd7c:	2201      	movs	r2, #1
    cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd80:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    cd82:	2300      	movs	r3, #0
}
    cd84:	4618      	mov	r0, r3
    cd86:	3730      	adds	r7, #48	; 0x30
    cd88:	46bd      	mov	sp, r7
    cd8a:	bd80      	pop	{r7, pc}
    cd8c:	000042d9 	.word	0x000042d9

0000cd90 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    cd90:	b580      	push	{r7, lr}
    cd92:	b08c      	sub	sp, #48	; 0x30
    cd94:	af00      	add	r7, sp, #0
    cd96:	6078      	str	r0, [r7, #4]
    cd98:	460b      	mov	r3, r1
    cd9a:	70fb      	strb	r3, [r7, #3]
    cd9c:	4613      	mov	r3, r2
    cd9e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    cda0:	2300      	movs	r3, #0
    cda2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    cda4:	687b      	ldr	r3, [r7, #4]
    cda6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    cda8:	687b      	ldr	r3, [r7, #4]
    cdaa:	681b      	ldr	r3, [r3, #0]
    cdac:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    cdae:	f107 030c 	add.w	r3, r7, #12
    cdb2:	2200      	movs	r2, #0
    cdb4:	601a      	str	r2, [r3, #0]
    cdb6:	605a      	str	r2, [r3, #4]
    cdb8:	609a      	str	r2, [r3, #8]
    cdba:	60da      	str	r2, [r3, #12]
    cdbc:	611a      	str	r2, [r3, #16]
    cdbe:	615a      	str	r2, [r3, #20]
    cdc0:	78fb      	ldrb	r3, [r7, #3]
    cdc2:	f003 0307 	and.w	r3, r3, #7
    cdc6:	b2da      	uxtb	r2, r3
    cdc8:	7b3b      	ldrb	r3, [r7, #12]
    cdca:	f362 0302 	bfi	r3, r2, #0, #3
    cdce:	733b      	strb	r3, [r7, #12]
    cdd0:	7b3b      	ldrb	r3, [r7, #12]
    cdd2:	f043 0310 	orr.w	r3, r3, #16
    cdd6:	733b      	strb	r3, [r7, #12]
    cdd8:	7b3b      	ldrb	r3, [r7, #12]
    cdda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cdde:	733b      	strb	r3, [r7, #12]
    cde0:	78bb      	ldrb	r3, [r7, #2]
    cde2:	743b      	strb	r3, [r7, #16]
    cde4:	2301      	movs	r3, #1
    cde6:	61bb      	str	r3, [r7, #24]
    cde8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    cdec:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdf0:	7b5b      	ldrb	r3, [r3, #13]
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d003      	beq.n	cdfe <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    cdf6:	2100      	movs	r1, #0
    cdf8:	6878      	ldr	r0, [r7, #4]
    cdfa:	4b0a      	ldr	r3, [pc, #40]	; (ce24 <n25q256a_read_reg+0x94>)
    cdfc:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    cdfe:	f107 030c 	add.w	r3, r7, #12
    ce02:	4619      	mov	r1, r3
    ce04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ce06:	4b08      	ldr	r3, [pc, #32]	; (ce28 <n25q256a_read_reg+0x98>)
    ce08:	4798      	blx	r3
	if (n25q->xip_mode) {
    ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce0c:	7b5b      	ldrb	r3, [r3, #13]
    ce0e:	2b00      	cmp	r3, #0
    ce10:	d003      	beq.n	ce1a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ce12:	2101      	movs	r1, #1
    ce14:	6878      	ldr	r0, [r7, #4]
    ce16:	4b03      	ldr	r3, [pc, #12]	; (ce24 <n25q256a_read_reg+0x94>)
    ce18:	4798      	blx	r3
	}
	return status;
    ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ce1c:	4618      	mov	r0, r3
    ce1e:	3730      	adds	r7, #48	; 0x30
    ce20:	46bd      	mov	sp, r7
    ce22:	bd80      	pop	{r7, pc}
    ce24:	0000ccc5 	.word	0x0000ccc5
    ce28:	000042d9 	.word	0x000042d9

0000ce2c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ce2c:	b580      	push	{r7, lr}
    ce2e:	b08c      	sub	sp, #48	; 0x30
    ce30:	af00      	add	r7, sp, #0
    ce32:	60f8      	str	r0, [r7, #12]
    ce34:	607b      	str	r3, [r7, #4]
    ce36:	460b      	mov	r3, r1
    ce38:	72fb      	strb	r3, [r7, #11]
    ce3a:	4613      	mov	r3, r2
    ce3c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ce3e:	68fb      	ldr	r3, [r7, #12]
    ce40:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ce42:	68fb      	ldr	r3, [r7, #12]
    ce44:	681b      	ldr	r3, [r3, #0]
    ce46:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ce48:	f107 0310 	add.w	r3, r7, #16
    ce4c:	2200      	movs	r2, #0
    ce4e:	601a      	str	r2, [r3, #0]
    ce50:	605a      	str	r2, [r3, #4]
    ce52:	609a      	str	r2, [r3, #8]
    ce54:	60da      	str	r2, [r3, #12]
    ce56:	611a      	str	r2, [r3, #16]
    ce58:	615a      	str	r2, [r3, #20]
    ce5a:	7afb      	ldrb	r3, [r7, #11]
    ce5c:	f003 0307 	and.w	r3, r3, #7
    ce60:	b2da      	uxtb	r2, r3
    ce62:	7c3b      	ldrb	r3, [r7, #16]
    ce64:	f362 0302 	bfi	r3, r2, #0, #3
    ce68:	743b      	strb	r3, [r7, #16]
    ce6a:	7c3b      	ldrb	r3, [r7, #16]
    ce6c:	f043 0310 	orr.w	r3, r3, #16
    ce70:	743b      	strb	r3, [r7, #16]
    ce72:	7c3b      	ldrb	r3, [r7, #16]
    ce74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce78:	743b      	strb	r3, [r7, #16]
    ce7a:	7c7b      	ldrb	r3, [r7, #17]
    ce7c:	2202      	movs	r2, #2
    ce7e:	f362 1305 	bfi	r3, r2, #4, #2
    ce82:	747b      	strb	r3, [r7, #17]
    ce84:	7abb      	ldrb	r3, [r7, #10]
    ce86:	753b      	strb	r3, [r7, #20]
    ce88:	2301      	movs	r3, #1
    ce8a:	61fb      	str	r3, [r7, #28]
    ce8c:	1d3b      	adds	r3, r7, #4
    ce8e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce92:	7b5b      	ldrb	r3, [r3, #13]
    ce94:	2b00      	cmp	r3, #0
    ce96:	d003      	beq.n	cea0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ce98:	2100      	movs	r1, #0
    ce9a:	68f8      	ldr	r0, [r7, #12]
    ce9c:	4b09      	ldr	r3, [pc, #36]	; (cec4 <n25q256a_write_reg+0x98>)
    ce9e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    cea0:	f107 0310 	add.w	r3, r7, #16
    cea4:	4619      	mov	r1, r3
    cea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cea8:	4b07      	ldr	r3, [pc, #28]	; (cec8 <n25q256a_write_reg+0x9c>)
    ceaa:	4798      	blx	r3
	if (n25q->xip_mode) {
    ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceae:	7b5b      	ldrb	r3, [r3, #13]
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d003      	beq.n	cebc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    ceb4:	2101      	movs	r1, #1
    ceb6:	68f8      	ldr	r0, [r7, #12]
    ceb8:	4b02      	ldr	r3, [pc, #8]	; (cec4 <n25q256a_write_reg+0x98>)
    ceba:	4798      	blx	r3
	}
}
    cebc:	bf00      	nop
    cebe:	3730      	adds	r7, #48	; 0x30
    cec0:	46bd      	mov	sp, r7
    cec2:	bd80      	pop	{r7, pc}
    cec4:	0000ccc5 	.word	0x0000ccc5
    cec8:	000042d9 	.word	0x000042d9

0000cecc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    cecc:	b580      	push	{r7, lr}
    cece:	b090      	sub	sp, #64	; 0x40
    ced0:	af00      	add	r7, sp, #0
    ced2:	6078      	str	r0, [r7, #4]
    ced4:	460b      	mov	r3, r1
    ced6:	70fb      	strb	r3, [r7, #3]
    ced8:	4613      	mov	r3, r2
    ceda:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cedc:	687b      	ldr	r3, [r7, #4]
    cede:	681b      	ldr	r3, [r3, #0]
    cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    cee2:	78bb      	ldrb	r3, [r7, #2]
    cee4:	2b00      	cmp	r3, #0
    cee6:	d001      	beq.n	ceec <n25q256a_write_enable+0x20>
    cee8:	2306      	movs	r3, #6
    ceea:	e000      	b.n	ceee <n25q256a_write_enable+0x22>
    ceec:	2304      	movs	r3, #4
    ceee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    cef2:	f107 0320 	add.w	r3, r7, #32
    cef6:	2200      	movs	r2, #0
    cef8:	601a      	str	r2, [r3, #0]
    cefa:	605a      	str	r2, [r3, #4]
    cefc:	609a      	str	r2, [r3, #8]
    cefe:	60da      	str	r2, [r3, #12]
    cf00:	611a      	str	r2, [r3, #16]
    cf02:	615a      	str	r2, [r3, #20]
    cf04:	78fb      	ldrb	r3, [r7, #3]
    cf06:	f003 0307 	and.w	r3, r3, #7
    cf0a:	b2da      	uxtb	r2, r3
    cf0c:	f897 3020 	ldrb.w	r3, [r7, #32]
    cf10:	f362 0302 	bfi	r3, r2, #0, #3
    cf14:	f887 3020 	strb.w	r3, [r7, #32]
    cf18:	f897 3020 	ldrb.w	r3, [r7, #32]
    cf1c:	f043 0310 	orr.w	r3, r3, #16
    cf20:	f887 3020 	strb.w	r3, [r7, #32]
    cf24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cf28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    cf2c:	f107 0308 	add.w	r3, r7, #8
    cf30:	2200      	movs	r2, #0
    cf32:	601a      	str	r2, [r3, #0]
    cf34:	605a      	str	r2, [r3, #4]
    cf36:	609a      	str	r2, [r3, #8]
    cf38:	60da      	str	r2, [r3, #12]
    cf3a:	611a      	str	r2, [r3, #16]
    cf3c:	615a      	str	r2, [r3, #20]
    cf3e:	78fb      	ldrb	r3, [r7, #3]
    cf40:	f003 0307 	and.w	r3, r3, #7
    cf44:	b2da      	uxtb	r2, r3
    cf46:	7a3b      	ldrb	r3, [r7, #8]
    cf48:	f362 0302 	bfi	r3, r2, #0, #3
    cf4c:	723b      	strb	r3, [r7, #8]
    cf4e:	7a3b      	ldrb	r3, [r7, #8]
    cf50:	f043 0310 	orr.w	r3, r3, #16
    cf54:	723b      	strb	r3, [r7, #8]
    cf56:	7a3b      	ldrb	r3, [r7, #8]
    cf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf5c:	723b      	strb	r3, [r7, #8]
    cf5e:	2305      	movs	r3, #5
    cf60:	733b      	strb	r3, [r7, #12]
    cf62:	2301      	movs	r3, #1
    cf64:	617b      	str	r3, [r7, #20]
    cf66:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    cf6a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    cf6c:	f107 0320 	add.w	r3, r7, #32
    cf70:	4619      	mov	r1, r3
    cf72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cf74:	4b08      	ldr	r3, [pc, #32]	; (cf98 <n25q256a_write_enable+0xcc>)
    cf76:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    cf78:	f107 0308 	add.w	r3, r7, #8
    cf7c:	4619      	mov	r1, r3
    cf7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cf80:	4b05      	ldr	r3, [pc, #20]	; (cf98 <n25q256a_write_enable+0xcc>)
    cf82:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    cf84:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    cf88:	f003 0302 	and.w	r3, r3, #2
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d0ed      	beq.n	cf6c <n25q256a_write_enable+0xa0>
}
    cf90:	bf00      	nop
    cf92:	3740      	adds	r7, #64	; 0x40
    cf94:	46bd      	mov	sp, r7
    cf96:	bd80      	pop	{r7, pc}
    cf98:	000042d9 	.word	0x000042d9

0000cf9c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    cf9c:	b590      	push	{r4, r7, lr}
    cf9e:	b087      	sub	sp, #28
    cfa0:	af00      	add	r7, sp, #0
    cfa2:	6078      	str	r0, [r7, #4]
    cfa4:	460b      	mov	r3, r1
    cfa6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    cfa8:	687b      	ldr	r3, [r7, #4]
    cfaa:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    cfac:	68fb      	ldr	r3, [r7, #12]
    cfae:	7b1b      	ldrb	r3, [r3, #12]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d001      	beq.n	cfb8 <n25q256a_switch_mode+0x1c>
    cfb4:	2306      	movs	r3, #6
    cfb6:	e000      	b.n	cfba <n25q256a_switch_mode+0x1e>
    cfb8:	2300      	movs	r3, #0
    cfba:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    cfbc:	7afb      	ldrb	r3, [r7, #11]
    cfbe:	2265      	movs	r2, #101	; 0x65
    cfc0:	4619      	mov	r1, r3
    cfc2:	6878      	ldr	r0, [r7, #4]
    cfc4:	4b25      	ldr	r3, [pc, #148]	; (d05c <n25q256a_switch_mode+0xc0>)
    cfc6:	4798      	blx	r3
    cfc8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    cfca:	2300      	movs	r3, #0
    cfcc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    cfce:	68fb      	ldr	r3, [r7, #12]
    cfd0:	7b1b      	ldrb	r3, [r3, #12]
    cfd2:	78fa      	ldrb	r2, [r7, #3]
    cfd4:	429a      	cmp	r2, r3
    cfd6:	d03d      	beq.n	d054 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    cfd8:	78fb      	ldrb	r3, [r7, #3]
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d00b      	beq.n	cff6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    cfde:	697b      	ldr	r3, [r7, #20]
    cfe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	d011      	beq.n	d00c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    cfe8:	697b      	ldr	r3, [r7, #20]
    cfea:	f003 031f 	and.w	r3, r3, #31
    cfee:	617b      	str	r3, [r7, #20]
			modify = 1;
    cff0:	2301      	movs	r3, #1
    cff2:	74fb      	strb	r3, [r7, #19]
    cff4:	e00a      	b.n	d00c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    cff6:	697b      	ldr	r3, [r7, #20]
    cff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cffc:	2b00      	cmp	r3, #0
    cffe:	d105      	bne.n	d00c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d000:	697b      	ldr	r3, [r7, #20]
    d002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d006:	617b      	str	r3, [r7, #20]
			modify = 1;
    d008:	2301      	movs	r3, #1
    d00a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d00c:	7cfb      	ldrb	r3, [r7, #19]
    d00e:	2b00      	cmp	r3, #0
    d010:	d021      	beq.n	d056 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d012:	68fb      	ldr	r3, [r7, #12]
    d014:	78fa      	ldrb	r2, [r7, #3]
    d016:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d018:	7afb      	ldrb	r3, [r7, #11]
    d01a:	2201      	movs	r2, #1
    d01c:	4619      	mov	r1, r3
    d01e:	6878      	ldr	r0, [r7, #4]
    d020:	4b0f      	ldr	r3, [pc, #60]	; (d060 <n25q256a_switch_mode+0xc4>)
    d022:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d024:	7af9      	ldrb	r1, [r7, #11]
    d026:	697b      	ldr	r3, [r7, #20]
    d028:	2261      	movs	r2, #97	; 0x61
    d02a:	6878      	ldr	r0, [r7, #4]
    d02c:	4c0d      	ldr	r4, [pc, #52]	; (d064 <n25q256a_switch_mode+0xc8>)
    d02e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d030:	78fb      	ldrb	r3, [r7, #3]
    d032:	2b00      	cmp	r3, #0
    d034:	d001      	beq.n	d03a <n25q256a_switch_mode+0x9e>
    d036:	2306      	movs	r3, #6
    d038:	e000      	b.n	d03c <n25q256a_switch_mode+0xa0>
    d03a:	2300      	movs	r3, #0
    d03c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d03e:	7afb      	ldrb	r3, [r7, #11]
    d040:	2265      	movs	r2, #101	; 0x65
    d042:	4619      	mov	r1, r3
    d044:	6878      	ldr	r0, [r7, #4]
    d046:	4b05      	ldr	r3, [pc, #20]	; (d05c <n25q256a_switch_mode+0xc0>)
    d048:	4798      	blx	r3
    d04a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d04c:	68fb      	ldr	r3, [r7, #12]
    d04e:	78fa      	ldrb	r2, [r7, #3]
    d050:	731a      	strb	r2, [r3, #12]
    d052:	e000      	b.n	d056 <n25q256a_switch_mode+0xba>
		return;
    d054:	bf00      	nop
	}
}
    d056:	371c      	adds	r7, #28
    d058:	46bd      	mov	sp, r7
    d05a:	bd90      	pop	{r4, r7, pc}
    d05c:	0000cd91 	.word	0x0000cd91
    d060:	0000cecd 	.word	0x0000cecd
    d064:	0000ce2d 	.word	0x0000ce2d

0000d068 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d068:	b580      	push	{r7, lr}
    d06a:	b086      	sub	sp, #24
    d06c:	af00      	add	r7, sp, #0
    d06e:	60f8      	str	r0, [r7, #12]
    d070:	60b9      	str	r1, [r7, #8]
    d072:	607a      	str	r2, [r7, #4]
    d074:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d076:	68fb      	ldr	r3, [r7, #12]
    d078:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d07a:	4a0c      	ldr	r2, [pc, #48]	; (d0ac <n25q256a_construct+0x44>)
    d07c:	68b9      	ldr	r1, [r7, #8]
    d07e:	68f8      	ldr	r0, [r7, #12]
    d080:	4b0b      	ldr	r3, [pc, #44]	; (d0b0 <n25q256a_construct+0x48>)
    d082:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d084:	697b      	ldr	r3, [r7, #20]
    d086:	2200      	movs	r2, #0
    d088:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d08a:	697b      	ldr	r3, [r7, #20]
    d08c:	2200      	movs	r2, #0
    d08e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d090:	697b      	ldr	r3, [r7, #20]
    d092:	687a      	ldr	r2, [r7, #4]
    d094:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d096:	78fb      	ldrb	r3, [r7, #3]
    d098:	4619      	mov	r1, r3
    d09a:	68f8      	ldr	r0, [r7, #12]
    d09c:	4b05      	ldr	r3, [pc, #20]	; (d0b4 <n25q256a_construct+0x4c>)
    d09e:	4798      	blx	r3
	return me;
    d0a0:	68fb      	ldr	r3, [r7, #12]
}
    d0a2:	4618      	mov	r0, r3
    d0a4:	3718      	adds	r7, #24
    d0a6:	46bd      	mov	sp, r7
    d0a8:	bd80      	pop	{r7, pc}
    d0aa:	bf00      	nop
    d0ac:	0001150c 	.word	0x0001150c
    d0b0:	0000d545 	.word	0x0000d545
    d0b4:	0000cf9d 	.word	0x0000cf9d

0000d0b8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d0b8:	b580      	push	{r7, lr}
    d0ba:	b08c      	sub	sp, #48	; 0x30
    d0bc:	af00      	add	r7, sp, #0
    d0be:	60f8      	str	r0, [r7, #12]
    d0c0:	60b9      	str	r1, [r7, #8]
    d0c2:	607a      	str	r2, [r7, #4]
    d0c4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d0c6:	68fb      	ldr	r3, [r7, #12]
    d0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d0ca:	68fb      	ldr	r3, [r7, #12]
    d0cc:	681b      	ldr	r3, [r3, #0]
    d0ce:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d0d0:	f107 0310 	add.w	r3, r7, #16
    d0d4:	2200      	movs	r2, #0
    d0d6:	601a      	str	r2, [r3, #0]
    d0d8:	605a      	str	r2, [r3, #4]
    d0da:	609a      	str	r2, [r3, #8]
    d0dc:	60da      	str	r2, [r3, #12]
    d0de:	611a      	str	r2, [r3, #16]
    d0e0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0e4:	7b1b      	ldrb	r3, [r3, #12]
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d001      	beq.n	d0ee <n25q256a_read+0x36>
    d0ea:	2206      	movs	r2, #6
    d0ec:	e000      	b.n	d0f0 <n25q256a_read+0x38>
    d0ee:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d0f0:	7c3b      	ldrb	r3, [r7, #16]
    d0f2:	f362 0302 	bfi	r3, r2, #0, #3
    d0f6:	743b      	strb	r3, [r7, #16]
    d0f8:	7c3b      	ldrb	r3, [r7, #16]
    d0fa:	f043 0310 	orr.w	r3, r3, #16
    d0fe:	743b      	strb	r3, [r7, #16]
    d100:	7c3b      	ldrb	r3, [r7, #16]
    d102:	f043 0320 	orr.w	r3, r3, #32
    d106:	743b      	strb	r3, [r7, #16]
    d108:	7c3b      	ldrb	r3, [r7, #16]
    d10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d10e:	743b      	strb	r3, [r7, #16]
    d110:	7c7b      	ldrb	r3, [r7, #17]
    d112:	2201      	movs	r2, #1
    d114:	f362 1305 	bfi	r3, r2, #4, #2
    d118:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d11c:	7b1b      	ldrb	r3, [r3, #12]
    d11e:	2b00      	cmp	r3, #0
    d120:	d001      	beq.n	d126 <n25q256a_read+0x6e>
    d122:	220a      	movs	r2, #10
    d124:	e000      	b.n	d128 <n25q256a_read+0x70>
    d126:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d128:	7cbb      	ldrb	r3, [r7, #18]
    d12a:	f362 0304 	bfi	r3, r2, #0, #5
    d12e:	74bb      	strb	r3, [r7, #18]
    d130:	230b      	movs	r3, #11
    d132:	753b      	strb	r3, [r7, #20]
    d134:	687b      	ldr	r3, [r7, #4]
    d136:	61bb      	str	r3, [r7, #24]
    d138:	683b      	ldr	r3, [r7, #0]
    d13a:	61fb      	str	r3, [r7, #28]
    d13c:	68bb      	ldr	r3, [r7, #8]
    d13e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d140:	f107 0310 	add.w	r3, r7, #16
    d144:	4619      	mov	r1, r3
    d146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d148:	4b03      	ldr	r3, [pc, #12]	; (d158 <n25q256a_read+0xa0>)
    d14a:	4798      	blx	r3
	return ERR_NONE;
    d14c:	2300      	movs	r3, #0
}
    d14e:	4618      	mov	r0, r3
    d150:	3730      	adds	r7, #48	; 0x30
    d152:	46bd      	mov	sp, r7
    d154:	bd80      	pop	{r7, pc}
    d156:	bf00      	nop
    d158:	000042d9 	.word	0x000042d9

0000d15c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d15c:	b580      	push	{r7, lr}
    d15e:	b08c      	sub	sp, #48	; 0x30
    d160:	af00      	add	r7, sp, #0
    d162:	60f8      	str	r0, [r7, #12]
    d164:	60b9      	str	r1, [r7, #8]
    d166:	607a      	str	r2, [r7, #4]
    d168:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d16a:	68fb      	ldr	r3, [r7, #12]
    d16c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d16e:	68fb      	ldr	r3, [r7, #12]
    d170:	681b      	ldr	r3, [r3, #0]
    d172:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d174:	f107 0310 	add.w	r3, r7, #16
    d178:	2200      	movs	r2, #0
    d17a:	601a      	str	r2, [r3, #0]
    d17c:	605a      	str	r2, [r3, #4]
    d17e:	609a      	str	r2, [r3, #8]
    d180:	60da      	str	r2, [r3, #12]
    d182:	611a      	str	r2, [r3, #16]
    d184:	615a      	str	r2, [r3, #20]
    d186:	7c3b      	ldrb	r3, [r7, #16]
    d188:	f043 0310 	orr.w	r3, r3, #16
    d18c:	743b      	strb	r3, [r7, #16]
    d18e:	7c3b      	ldrb	r3, [r7, #16]
    d190:	f043 0320 	orr.w	r3, r3, #32
    d194:	743b      	strb	r3, [r7, #16]
    d196:	7c3b      	ldrb	r3, [r7, #16]
    d198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d19c:	743b      	strb	r3, [r7, #16]
    d19e:	7c7b      	ldrb	r3, [r7, #17]
    d1a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d1a4:	747b      	strb	r3, [r7, #17]
    d1a6:	2302      	movs	r3, #2
    d1a8:	753b      	strb	r3, [r7, #20]
    d1aa:	687b      	ldr	r3, [r7, #4]
    d1ac:	61bb      	str	r3, [r7, #24]
    d1ae:	683b      	ldr	r3, [r7, #0]
    d1b0:	61fb      	str	r3, [r7, #28]
    d1b2:	68bb      	ldr	r3, [r7, #8]
    d1b4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1b8:	7b1b      	ldrb	r3, [r3, #12]
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d001      	beq.n	d1c2 <n25q256a_write+0x66>
    d1be:	2206      	movs	r2, #6
    d1c0:	e000      	b.n	d1c4 <n25q256a_write+0x68>
    d1c2:	2200      	movs	r2, #0
    d1c4:	7c3b      	ldrb	r3, [r7, #16]
    d1c6:	f362 0302 	bfi	r3, r2, #0, #3
    d1ca:	743b      	strb	r3, [r7, #16]
	while (length) {
    d1cc:	e035      	b.n	d23a <n25q256a_write+0xde>
		cmd.address = address;
    d1ce:	687b      	ldr	r3, [r7, #4]
    d1d0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    d1d2:	683b      	ldr	r3, [r7, #0]
    d1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d1d8:	d802      	bhi.n	d1e0 <n25q256a_write+0x84>
			cmd.buf_len = length;
    d1da:	683b      	ldr	r3, [r7, #0]
    d1dc:	61fb      	str	r3, [r7, #28]
    d1de:	e002      	b.n	d1e6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    d1e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    d1e4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d1e6:	7c3b      	ldrb	r3, [r7, #16]
    d1e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d1ec:	b2db      	uxtb	r3, r3
    d1ee:	2201      	movs	r2, #1
    d1f0:	4619      	mov	r1, r3
    d1f2:	68f8      	ldr	r0, [r7, #12]
    d1f4:	4b19      	ldr	r3, [pc, #100]	; (d25c <n25q256a_write+0x100>)
    d1f6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    d1f8:	f107 0310 	add.w	r3, r7, #16
    d1fc:	4619      	mov	r1, r3
    d1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d200:	4b17      	ldr	r3, [pc, #92]	; (d260 <n25q256a_write+0x104>)
    d202:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d204:	bf00      	nop
    d206:	7c3b      	ldrb	r3, [r7, #16]
    d208:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d20c:	b2db      	uxtb	r3, r3
    d20e:	2270      	movs	r2, #112	; 0x70
    d210:	4619      	mov	r1, r3
    d212:	68f8      	ldr	r0, [r7, #12]
    d214:	4b13      	ldr	r3, [pc, #76]	; (d264 <n25q256a_write+0x108>)
    d216:	4798      	blx	r3
    d218:	4603      	mov	r3, r0
    d21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d21e:	2b00      	cmp	r3, #0
    d220:	d0f1      	beq.n	d206 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    d222:	6a3a      	ldr	r2, [r7, #32]
    d224:	69fb      	ldr	r3, [r7, #28]
    d226:	4413      	add	r3, r2
    d228:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    d22a:	69fb      	ldr	r3, [r7, #28]
    d22c:	683a      	ldr	r2, [r7, #0]
    d22e:	1ad3      	subs	r3, r2, r3
    d230:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    d232:	69fb      	ldr	r3, [r7, #28]
    d234:	687a      	ldr	r2, [r7, #4]
    d236:	4413      	add	r3, r2
    d238:	607b      	str	r3, [r7, #4]
	while (length) {
    d23a:	683b      	ldr	r3, [r7, #0]
    d23c:	2b00      	cmp	r3, #0
    d23e:	d1c6      	bne.n	d1ce <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    d240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d242:	7b5b      	ldrb	r3, [r3, #13]
    d244:	2b00      	cmp	r3, #0
    d246:	d003      	beq.n	d250 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    d248:	2101      	movs	r1, #1
    d24a:	68f8      	ldr	r0, [r7, #12]
    d24c:	4b06      	ldr	r3, [pc, #24]	; (d268 <n25q256a_write+0x10c>)
    d24e:	4798      	blx	r3
	}
	return ERR_NONE;
    d250:	2300      	movs	r3, #0
}
    d252:	4618      	mov	r0, r3
    d254:	3730      	adds	r7, #48	; 0x30
    d256:	46bd      	mov	sp, r7
    d258:	bd80      	pop	{r7, pc}
    d25a:	bf00      	nop
    d25c:	0000cecd 	.word	0x0000cecd
    d260:	000042d9 	.word	0x000042d9
    d264:	0000cd91 	.word	0x0000cd91
    d268:	0000ccc5 	.word	0x0000ccc5

0000d26c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    d26c:	b580      	push	{r7, lr}
    d26e:	b090      	sub	sp, #64	; 0x40
    d270:	af00      	add	r7, sp, #0
    d272:	60f8      	str	r0, [r7, #12]
    d274:	60b9      	str	r1, [r7, #8]
    d276:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d278:	68fb      	ldr	r3, [r7, #12]
    d27a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d27c:	68fb      	ldr	r3, [r7, #12]
    d27e:	681b      	ldr	r3, [r3, #0]
    d280:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    d282:	f107 0314 	add.w	r3, r7, #20
    d286:	2200      	movs	r2, #0
    d288:	601a      	str	r2, [r3, #0]
    d28a:	605a      	str	r2, [r3, #4]
    d28c:	609a      	str	r2, [r3, #8]
    d28e:	60da      	str	r2, [r3, #12]
    d290:	611a      	str	r2, [r3, #16]
    d292:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d296:	7b1b      	ldrb	r3, [r3, #12]
    d298:	2b00      	cmp	r3, #0
    d29a:	d001      	beq.n	d2a0 <n25q256a_erase+0x34>
    d29c:	2206      	movs	r2, #6
    d29e:	e000      	b.n	d2a2 <n25q256a_erase+0x36>
    d2a0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    d2a2:	7d3b      	ldrb	r3, [r7, #20]
    d2a4:	f362 0302 	bfi	r3, r2, #0, #3
    d2a8:	753b      	strb	r3, [r7, #20]
    d2aa:	7d3b      	ldrb	r3, [r7, #20]
    d2ac:	f043 0310 	orr.w	r3, r3, #16
    d2b0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    d2b2:	687b      	ldr	r3, [r7, #4]
    d2b4:	4a56      	ldr	r2, [pc, #344]	; (d410 <n25q256a_erase+0x1a4>)
    d2b6:	4293      	cmp	r3, r2
    d2b8:	bf94      	ite	ls
    d2ba:	2301      	movls	r3, #1
    d2bc:	2300      	movhi	r3, #0
    d2be:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    d2c0:	7d3b      	ldrb	r3, [r7, #20]
    d2c2:	f362 1345 	bfi	r3, r2, #5, #1
    d2c6:	753b      	strb	r3, [r7, #20]
    d2c8:	7d7b      	ldrb	r3, [r7, #21]
    d2ca:	2202      	movs	r2, #2
    d2cc:	f362 1305 	bfi	r3, r2, #4, #2
    d2d0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    d2d2:	68bb      	ldr	r3, [r7, #8]
    d2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    d2d6:	687b      	ldr	r3, [r7, #4]
    d2d8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    d2da:	2300      	movs	r3, #0
    d2dc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    d2de:	687b      	ldr	r3, [r7, #4]
    d2e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d104      	bne.n	d2f2 <n25q256a_erase+0x86>
    d2e8:	68bb      	ldr	r3, [r7, #8]
    d2ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d002      	beq.n	d2f8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    d2f2:	f06f 030c 	mvn.w	r3, #12
    d2f6:	e087      	b.n	d408 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    d2f8:	687b      	ldr	r3, [r7, #4]
    d2fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    d2fe:	d368      	bcc.n	d3d2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    d300:	23c7      	movs	r3, #199	; 0xc7
    d302:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d304:	7d3b      	ldrb	r3, [r7, #20]
    d306:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d30a:	b2db      	uxtb	r3, r3
    d30c:	2201      	movs	r2, #1
    d30e:	4619      	mov	r1, r3
    d310:	68f8      	ldr	r0, [r7, #12]
    d312:	4b40      	ldr	r3, [pc, #256]	; (d414 <n25q256a_erase+0x1a8>)
    d314:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    d316:	f107 0314 	add.w	r3, r7, #20
    d31a:	4619      	mov	r1, r3
    d31c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d31e:	4b3e      	ldr	r3, [pc, #248]	; (d418 <n25q256a_erase+0x1ac>)
    d320:	4798      	blx	r3
    d322:	e059      	b.n	d3d8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    d324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d326:	b29b      	uxth	r3, r3
    d328:	2b00      	cmp	r3, #0
    d32a:	d11f      	bne.n	d36c <n25q256a_erase+0x100>
    d32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d332:	d31b      	bcc.n	d36c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d336:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    d338:	23d8      	movs	r3, #216	; 0xd8
    d33a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d33c:	7d3b      	ldrb	r3, [r7, #20]
    d33e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d342:	b2db      	uxtb	r3, r3
    d344:	2201      	movs	r2, #1
    d346:	4619      	mov	r1, r3
    d348:	68f8      	ldr	r0, [r7, #12]
    d34a:	4b32      	ldr	r3, [pc, #200]	; (d414 <n25q256a_erase+0x1a8>)
    d34c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d34e:	f107 0314 	add.w	r3, r7, #20
    d352:	4619      	mov	r1, r3
    d354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d356:	4b30      	ldr	r3, [pc, #192]	; (d418 <n25q256a_erase+0x1ac>)
    d358:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d35c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d360:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d364:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d368:	63bb      	str	r3, [r7, #56]	; 0x38
    d36a:	e023      	b.n	d3b4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d372:	d31b      	bcc.n	d3ac <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d376:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d378:	2320      	movs	r3, #32
    d37a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d37c:	7d3b      	ldrb	r3, [r7, #20]
    d37e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d382:	b2db      	uxtb	r3, r3
    d384:	2201      	movs	r2, #1
    d386:	4619      	mov	r1, r3
    d388:	68f8      	ldr	r0, [r7, #12]
    d38a:	4b22      	ldr	r3, [pc, #136]	; (d414 <n25q256a_erase+0x1a8>)
    d38c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d38e:	f107 0314 	add.w	r3, r7, #20
    d392:	4619      	mov	r1, r3
    d394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d396:	4b20      	ldr	r3, [pc, #128]	; (d418 <n25q256a_erase+0x1ac>)
    d398:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d39c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3a4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d3a8:	63bb      	str	r3, [r7, #56]	; 0x38
    d3aa:	e003      	b.n	d3b4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d3ac:	f06f 030c 	mvn.w	r3, #12
    d3b0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d3b2:	e011      	b.n	d3d8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d3b4:	bf00      	nop
    d3b6:	7d3b      	ldrb	r3, [r7, #20]
    d3b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d3bc:	b2db      	uxtb	r3, r3
    d3be:	2270      	movs	r2, #112	; 0x70
    d3c0:	4619      	mov	r1, r3
    d3c2:	68f8      	ldr	r0, [r7, #12]
    d3c4:	4b15      	ldr	r3, [pc, #84]	; (d41c <n25q256a_erase+0x1b0>)
    d3c6:	4798      	blx	r3
    d3c8:	4603      	mov	r3, r0
    d3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d0f1      	beq.n	d3b6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3d4:	2b00      	cmp	r3, #0
    d3d6:	d1a5      	bne.n	d324 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d3d8:	bf00      	nop
    d3da:	7d3b      	ldrb	r3, [r7, #20]
    d3dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d3e0:	b2db      	uxtb	r3, r3
    d3e2:	2270      	movs	r2, #112	; 0x70
    d3e4:	4619      	mov	r1, r3
    d3e6:	68f8      	ldr	r0, [r7, #12]
    d3e8:	4b0c      	ldr	r3, [pc, #48]	; (d41c <n25q256a_erase+0x1b0>)
    d3ea:	4798      	blx	r3
    d3ec:	4603      	mov	r3, r0
    d3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d0f1      	beq.n	d3da <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d3f8:	7b5b      	ldrb	r3, [r3, #13]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d003      	beq.n	d406 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d3fe:	2101      	movs	r1, #1
    d400:	68f8      	ldr	r0, [r7, #12]
    d402:	4b07      	ldr	r3, [pc, #28]	; (d420 <n25q256a_erase+0x1b4>)
    d404:	4798      	blx	r3
	}
	return rc;
    d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d408:	4618      	mov	r0, r3
    d40a:	3740      	adds	r7, #64	; 0x40
    d40c:	46bd      	mov	sp, r7
    d40e:	bd80      	pop	{r7, pc}
    d410:	001fffff 	.word	0x001fffff
    d414:	0000cecd 	.word	0x0000cecd
    d418:	000042d9 	.word	0x000042d9
    d41c:	0000cd91 	.word	0x0000cd91
    d420:	0000ccc5 	.word	0x0000ccc5

0000d424 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d424:	b590      	push	{r4, r7, lr}
    d426:	b085      	sub	sp, #20
    d428:	af00      	add	r7, sp, #0
    d42a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d430:	68fb      	ldr	r3, [r7, #12]
    d432:	7b1b      	ldrb	r3, [r3, #12]
    d434:	2b00      	cmp	r3, #0
    d436:	d001      	beq.n	d43c <n25q256a_enable_xip+0x18>
    d438:	2306      	movs	r3, #6
    d43a:	e000      	b.n	d43e <n25q256a_enable_xip+0x1a>
    d43c:	2300      	movs	r3, #0
    d43e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d440:	68fb      	ldr	r3, [r7, #12]
    d442:	7b5b      	ldrb	r3, [r3, #13]
    d444:	2b00      	cmp	r3, #0
    d446:	d129      	bne.n	d49c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d448:	7afb      	ldrb	r3, [r7, #11]
    d44a:	2285      	movs	r2, #133	; 0x85
    d44c:	4619      	mov	r1, r3
    d44e:	6878      	ldr	r0, [r7, #4]
    d450:	4b15      	ldr	r3, [pc, #84]	; (d4a8 <n25q256a_enable_xip+0x84>)
    d452:	4798      	blx	r3
    d454:	4603      	mov	r3, r0
    d456:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d458:	7abb      	ldrb	r3, [r7, #10]
    d45a:	f003 0308 	and.w	r3, r3, #8
    d45e:	2b00      	cmp	r3, #0
    d460:	d015      	beq.n	d48e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d462:	7abb      	ldrb	r3, [r7, #10]
    d464:	f023 0308 	bic.w	r3, r3, #8
    d468:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d46a:	7abb      	ldrb	r3, [r7, #10]
    d46c:	7af9      	ldrb	r1, [r7, #11]
    d46e:	2281      	movs	r2, #129	; 0x81
    d470:	6878      	ldr	r0, [r7, #4]
    d472:	4c0e      	ldr	r4, [pc, #56]	; (d4ac <n25q256a_enable_xip+0x88>)
    d474:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d476:	bf00      	nop
    d478:	7afb      	ldrb	r3, [r7, #11]
    d47a:	2270      	movs	r2, #112	; 0x70
    d47c:	4619      	mov	r1, r3
    d47e:	6878      	ldr	r0, [r7, #4]
    d480:	4b09      	ldr	r3, [pc, #36]	; (d4a8 <n25q256a_enable_xip+0x84>)
    d482:	4798      	blx	r3
    d484:	4603      	mov	r3, r0
    d486:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d48a:	2b00      	cmp	r3, #0
    d48c:	d0f4      	beq.n	d478 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d48e:	68fb      	ldr	r3, [r7, #12]
    d490:	2201      	movs	r2, #1
    d492:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d494:	2101      	movs	r1, #1
    d496:	6878      	ldr	r0, [r7, #4]
    d498:	4b05      	ldr	r3, [pc, #20]	; (d4b0 <n25q256a_enable_xip+0x8c>)
    d49a:	4798      	blx	r3
	}
	return ERR_NONE;
    d49c:	2300      	movs	r3, #0
}
    d49e:	4618      	mov	r0, r3
    d4a0:	3714      	adds	r7, #20
    d4a2:	46bd      	mov	sp, r7
    d4a4:	bd90      	pop	{r4, r7, pc}
    d4a6:	bf00      	nop
    d4a8:	0000cd91 	.word	0x0000cd91
    d4ac:	0000ce2d 	.word	0x0000ce2d
    d4b0:	0000ccc5 	.word	0x0000ccc5

0000d4b4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d4b4:	b580      	push	{r7, lr}
    d4b6:	b086      	sub	sp, #24
    d4b8:	af00      	add	r7, sp, #0
    d4ba:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d4bc:	687b      	ldr	r3, [r7, #4]
    d4be:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	681b      	ldr	r3, [r3, #0]
    d4c4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d4c6:	697b      	ldr	r3, [r7, #20]
    d4c8:	7b1b      	ldrb	r3, [r3, #12]
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d001      	beq.n	d4d2 <n25q256a_disable_xip+0x1e>
    d4ce:	2306      	movs	r3, #6
    d4d0:	e000      	b.n	d4d4 <n25q256a_disable_xip+0x20>
    d4d2:	2300      	movs	r3, #0
    d4d4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d4d6:	2100      	movs	r1, #0
    d4d8:	6878      	ldr	r0, [r7, #4]
    d4da:	4b15      	ldr	r3, [pc, #84]	; (d530 <n25q256a_disable_xip+0x7c>)
    d4dc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d4de:	7bfb      	ldrb	r3, [r7, #15]
    d4e0:	2285      	movs	r2, #133	; 0x85
    d4e2:	4619      	mov	r1, r3
    d4e4:	6878      	ldr	r0, [r7, #4]
    d4e6:	4b13      	ldr	r3, [pc, #76]	; (d534 <n25q256a_disable_xip+0x80>)
    d4e8:	4798      	blx	r3
    d4ea:	4603      	mov	r3, r0
    d4ec:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d4ee:	7bbb      	ldrb	r3, [r7, #14]
    d4f0:	f003 0308 	and.w	r3, r3, #8
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	d113      	bne.n	d520 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d4f8:	697b      	ldr	r3, [r7, #20]
    d4fa:	689b      	ldr	r3, [r3, #8]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d00f      	beq.n	d520 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d500:	693b      	ldr	r3, [r7, #16]
    d502:	681b      	ldr	r3, [r3, #0]
    d504:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d506:	6938      	ldr	r0, [r7, #16]
    d508:	4b0b      	ldr	r3, [pc, #44]	; (d538 <n25q256a_disable_xip+0x84>)
    d50a:	4798      	blx	r3
			n25q->pin_exit_xip();
    d50c:	697b      	ldr	r3, [r7, #20]
    d50e:	689b      	ldr	r3, [r3, #8]
    d510:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d512:	68b9      	ldr	r1, [r7, #8]
    d514:	6938      	ldr	r0, [r7, #16]
    d516:	4b09      	ldr	r3, [pc, #36]	; (d53c <n25q256a_disable_xip+0x88>)
    d518:	4798      	blx	r3
			qspi_sync_enable(descr);
    d51a:	6938      	ldr	r0, [r7, #16]
    d51c:	4b08      	ldr	r3, [pc, #32]	; (d540 <n25q256a_disable_xip+0x8c>)
    d51e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d520:	697b      	ldr	r3, [r7, #20]
    d522:	2200      	movs	r2, #0
    d524:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d526:	2300      	movs	r3, #0
}
    d528:	4618      	mov	r0, r3
    d52a:	3718      	adds	r7, #24
    d52c:	46bd      	mov	sp, r7
    d52e:	bd80      	pop	{r7, pc}
    d530:	0000ccc5 	.word	0x0000ccc5
    d534:	0000cd91 	.word	0x0000cd91
    d538:	0000429d 	.word	0x0000429d
    d53c:	00004215 	.word	0x00004215
    d540:	00004261 	.word	0x00004261

0000d544 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d544:	b480      	push	{r7}
    d546:	b085      	sub	sp, #20
    d548:	af00      	add	r7, sp, #0
    d54a:	60f8      	str	r0, [r7, #12]
    d54c:	60b9      	str	r1, [r7, #8]
    d54e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d550:	68fb      	ldr	r3, [r7, #12]
    d552:	68ba      	ldr	r2, [r7, #8]
    d554:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	687a      	ldr	r2, [r7, #4]
    d55a:	605a      	str	r2, [r3, #4]

	return me;
    d55c:	68fb      	ldr	r3, [r7, #12]
}
    d55e:	4618      	mov	r0, r3
    d560:	3714      	adds	r7, #20
    d562:	46bd      	mov	sp, r7
    d564:	f85d 7b04 	ldr.w	r7, [sp], #4
    d568:	4770      	bx	lr

0000d56a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    d56a:	b480      	push	{r7}
    d56c:	b083      	sub	sp, #12
    d56e:	af00      	add	r7, sp, #0
    d570:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	781b      	ldrb	r3, [r3, #0]
    d576:	b29a      	uxth	r2, r3
    d578:	687b      	ldr	r3, [r7, #4]
    d57a:	3301      	adds	r3, #1
    d57c:	781b      	ldrb	r3, [r3, #0]
    d57e:	b29b      	uxth	r3, r3
    d580:	021b      	lsls	r3, r3, #8
    d582:	b29b      	uxth	r3, r3
    d584:	4413      	add	r3, r2
    d586:	b29b      	uxth	r3, r3
}
    d588:	4618      	mov	r0, r3
    d58a:	370c      	adds	r7, #12
    d58c:	46bd      	mov	sp, r7
    d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d592:	4770      	bx	lr

0000d594 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    d594:	b480      	push	{r7}
    d596:	b083      	sub	sp, #12
    d598:	af00      	add	r7, sp, #0
    d59a:	6078      	str	r0, [r7, #4]
	return desc[0];
    d59c:	687b      	ldr	r3, [r7, #4]
    d59e:	781b      	ldrb	r3, [r3, #0]
}
    d5a0:	4618      	mov	r0, r3
    d5a2:	370c      	adds	r7, #12
    d5a4:	46bd      	mov	sp, r7
    d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5aa:	4770      	bx	lr

0000d5ac <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    d5ac:	b580      	push	{r7, lr}
    d5ae:	b082      	sub	sp, #8
    d5b0:	af00      	add	r7, sp, #0
    d5b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d5b4:	6878      	ldr	r0, [r7, #4]
    d5b6:	4b05      	ldr	r3, [pc, #20]	; (d5cc <usb_desc_next+0x20>)
    d5b8:	4798      	blx	r3
    d5ba:	4603      	mov	r3, r0
    d5bc:	461a      	mov	r2, r3
    d5be:	687b      	ldr	r3, [r7, #4]
    d5c0:	4413      	add	r3, r2
}
    d5c2:	4618      	mov	r0, r3
    d5c4:	3708      	adds	r7, #8
    d5c6:	46bd      	mov	sp, r7
    d5c8:	bd80      	pop	{r7, pc}
    d5ca:	bf00      	nop
    d5cc:	0000d595 	.word	0x0000d595

0000d5d0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d5d0:	b580      	push	{r7, lr}
    d5d2:	b08c      	sub	sp, #48	; 0x30
    d5d4:	af00      	add	r7, sp, #0
    d5d6:	6078      	str	r0, [r7, #4]
    d5d8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	689b      	ldr	r3, [r3, #8]
    d5de:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    d5e0:	683b      	ldr	r3, [r7, #0]
    d5e2:	681b      	ldr	r3, [r3, #0]
    d5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d5e6:	2300      	movs	r3, #0
    d5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d5ec:	e08f      	b.n	d70e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5f0:	2b00      	cmp	r3, #0
    d5f2:	d102      	bne.n	d5fa <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    d5f4:	f06f 0309 	mvn.w	r3, #9
    d5f8:	e092      	b.n	d720 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5fc:	789b      	ldrb	r3, [r3, #2]
    d5fe:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d602:	795b      	ldrb	r3, [r3, #5]
    d604:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d606:	7c7b      	ldrb	r3, [r7, #17]
    d608:	2b02      	cmp	r3, #2
    d60a:	d002      	beq.n	d612 <cdcdf_acm_enable+0x42>
    d60c:	7c7b      	ldrb	r3, [r7, #17]
    d60e:	2b0a      	cmp	r3, #10
    d610:	d121      	bne.n	d656 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d616:	6a3a      	ldr	r2, [r7, #32]
    d618:	5cd2      	ldrb	r2, [r2, r3]
    d61a:	7bbb      	ldrb	r3, [r7, #14]
    d61c:	429a      	cmp	r2, r3
    d61e:	d102      	bne.n	d626 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    d620:	f06f 0311 	mvn.w	r3, #17
    d624:	e07c      	b.n	d720 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d62a:	6a3a      	ldr	r2, [r7, #32]
    d62c:	5cd3      	ldrb	r3, [r2, r3]
    d62e:	2bff      	cmp	r3, #255	; 0xff
    d630:	d002      	beq.n	d638 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    d632:	f06f 031b 	mvn.w	r3, #27
    d636:	e073      	b.n	d720 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d63c:	7bb9      	ldrb	r1, [r7, #14]
    d63e:	6a3a      	ldr	r2, [r7, #32]
    d640:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d642:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d644:	683b      	ldr	r3, [r7, #0]
    d646:	685b      	ldr	r3, [r3, #4]
    d648:	2205      	movs	r2, #5
    d64a:	4619      	mov	r1, r3
    d64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d64e:	4b36      	ldr	r3, [pc, #216]	; (d728 <cdcdf_acm_enable+0x158>)
    d650:	4798      	blx	r3
    d652:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d654:	e047      	b.n	d6e6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    d656:	f06f 0309 	mvn.w	r3, #9
    d65a:	e061      	b.n	d720 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d65e:	789b      	ldrb	r3, [r3, #2]
    d660:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d664:	78db      	ldrb	r3, [r3, #3]
    d666:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d66a:	3304      	adds	r3, #4
    d66c:	4618      	mov	r0, r3
    d66e:	4b2f      	ldr	r3, [pc, #188]	; (d72c <cdcdf_acm_enable+0x15c>)
    d670:	4798      	blx	r3
    d672:	4603      	mov	r3, r0
    d674:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d676:	7ebb      	ldrb	r3, [r7, #26]
    d678:	7ef9      	ldrb	r1, [r7, #27]
    d67a:	8bba      	ldrh	r2, [r7, #28]
    d67c:	4618      	mov	r0, r3
    d67e:	4b2c      	ldr	r3, [pc, #176]	; (d730 <cdcdf_acm_enable+0x160>)
    d680:	4798      	blx	r3
    d682:	4603      	mov	r3, r0
    d684:	2b00      	cmp	r3, #0
    d686:	d002      	beq.n	d68e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    d688:	f06f 0313 	mvn.w	r3, #19
    d68c:	e048      	b.n	d720 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d68e:	7ebb      	ldrb	r3, [r7, #26]
    d690:	b25b      	sxtb	r3, r3
    d692:	2b00      	cmp	r3, #0
    d694:	da0f      	bge.n	d6b6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d69a:	7eb9      	ldrb	r1, [r7, #26]
    d69c:	6a3a      	ldr	r2, [r7, #32]
    d69e:	4413      	add	r3, r2
    d6a0:	460a      	mov	r2, r1
    d6a2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    d6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d6a8:	6a3a      	ldr	r2, [r7, #32]
    d6aa:	4413      	add	r3, r2
    d6ac:	789b      	ldrb	r3, [r3, #2]
    d6ae:	4618      	mov	r0, r3
    d6b0:	4b20      	ldr	r3, [pc, #128]	; (d734 <cdcdf_acm_enable+0x164>)
    d6b2:	4798      	blx	r3
    d6b4:	e007      	b.n	d6c6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d6b6:	7eba      	ldrb	r2, [r7, #26]
    d6b8:	6a3b      	ldr	r3, [r7, #32]
    d6ba:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    d6bc:	6a3b      	ldr	r3, [r7, #32]
    d6be:	791b      	ldrb	r3, [r3, #4]
    d6c0:	4618      	mov	r0, r3
    d6c2:	4b1c      	ldr	r3, [pc, #112]	; (d734 <cdcdf_acm_enable+0x164>)
    d6c4:	4798      	blx	r3
			}
			desc->sod = ep;
    d6c6:	683b      	ldr	r3, [r7, #0]
    d6c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d6ca:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d6cc:	683b      	ldr	r3, [r7, #0]
    d6ce:	681b      	ldr	r3, [r3, #0]
    d6d0:	4618      	mov	r0, r3
    d6d2:	4b19      	ldr	r3, [pc, #100]	; (d738 <cdcdf_acm_enable+0x168>)
    d6d4:	4798      	blx	r3
    d6d6:	4602      	mov	r2, r0
    d6d8:	683b      	ldr	r3, [r7, #0]
    d6da:	685b      	ldr	r3, [r3, #4]
    d6dc:	4619      	mov	r1, r3
    d6de:	4610      	mov	r0, r2
    d6e0:	4b16      	ldr	r3, [pc, #88]	; (d73c <cdcdf_acm_enable+0x16c>)
    d6e2:	4798      	blx	r3
    d6e4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d1b7      	bne.n	d65c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d6ec:	683b      	ldr	r3, [r7, #0]
    d6ee:	681b      	ldr	r3, [r3, #0]
    d6f0:	4618      	mov	r0, r3
    d6f2:	4b11      	ldr	r3, [pc, #68]	; (d738 <cdcdf_acm_enable+0x168>)
    d6f4:	4798      	blx	r3
    d6f6:	683b      	ldr	r3, [r7, #0]
    d6f8:	685b      	ldr	r3, [r3, #4]
    d6fa:	2204      	movs	r2, #4
    d6fc:	4619      	mov	r1, r3
    d6fe:	4b0a      	ldr	r3, [pc, #40]	; (d728 <cdcdf_acm_enable+0x158>)
    d700:	4798      	blx	r3
    d702:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d708:	3301      	adds	r3, #1
    d70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d712:	2b01      	cmp	r3, #1
    d714:	f67f af6b 	bls.w	d5ee <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    d718:	4b09      	ldr	r3, [pc, #36]	; (d740 <cdcdf_acm_enable+0x170>)
    d71a:	2201      	movs	r2, #1
    d71c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d71e:	2300      	movs	r3, #0
}
    d720:	4618      	mov	r0, r3
    d722:	3730      	adds	r7, #48	; 0x30
    d724:	46bd      	mov	sp, r7
    d726:	bd80      	pop	{r7, pc}
    d728:	0000e855 	.word	0x0000e855
    d72c:	0000d56b 	.word	0x0000d56b
    d730:	00004e21 	.word	0x00004e21
    d734:	00004f0d 	.word	0x00004f0d
    d738:	0000d5ad 	.word	0x0000d5ad
    d73c:	0000e8b1 	.word	0x0000e8b1
    d740:	2000128c 	.word	0x2000128c

0000d744 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d744:	b580      	push	{r7, lr}
    d746:	b088      	sub	sp, #32
    d748:	af00      	add	r7, sp, #0
    d74a:	6078      	str	r0, [r7, #4]
    d74c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d74e:	687b      	ldr	r3, [r7, #4]
    d750:	689b      	ldr	r3, [r3, #8]
    d752:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    d754:	683b      	ldr	r3, [r7, #0]
    d756:	2b00      	cmp	r3, #0
    d758:	d00c      	beq.n	d774 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d75a:	683b      	ldr	r3, [r7, #0]
    d75c:	681b      	ldr	r3, [r3, #0]
    d75e:	795b      	ldrb	r3, [r3, #5]
    d760:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d762:	7c7b      	ldrb	r3, [r7, #17]
    d764:	2b02      	cmp	r3, #2
    d766:	d005      	beq.n	d774 <cdcdf_acm_disable+0x30>
    d768:	7c7b      	ldrb	r3, [r7, #17]
    d76a:	2b0a      	cmp	r3, #10
    d76c:	d002      	beq.n	d774 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    d76e:	f06f 0309 	mvn.w	r3, #9
    d772:	e035      	b.n	d7e0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    d774:	2300      	movs	r3, #0
    d776:	77fb      	strb	r3, [r7, #31]
    d778:	e01f      	b.n	d7ba <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    d77a:	7ffb      	ldrb	r3, [r7, #31]
    d77c:	69ba      	ldr	r2, [r7, #24]
    d77e:	5cd3      	ldrb	r3, [r2, r3]
    d780:	2bff      	cmp	r3, #255	; 0xff
    d782:	d016      	beq.n	d7b2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    d784:	7ffb      	ldrb	r3, [r7, #31]
    d786:	69ba      	ldr	r2, [r7, #24]
    d788:	21ff      	movs	r1, #255	; 0xff
    d78a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    d78c:	7ffb      	ldrb	r3, [r7, #31]
    d78e:	69ba      	ldr	r2, [r7, #24]
    d790:	4413      	add	r3, r2
    d792:	789b      	ldrb	r3, [r3, #2]
    d794:	2bff      	cmp	r3, #255	; 0xff
    d796:	d00d      	beq.n	d7b4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d798:	7ffb      	ldrb	r3, [r7, #31]
    d79a:	69ba      	ldr	r2, [r7, #24]
    d79c:	4413      	add	r3, r2
    d79e:	789b      	ldrb	r3, [r3, #2]
    d7a0:	4618      	mov	r0, r3
    d7a2:	4b11      	ldr	r3, [pc, #68]	; (d7e8 <cdcdf_acm_disable+0xa4>)
    d7a4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d7a6:	7ffb      	ldrb	r3, [r7, #31]
    d7a8:	69ba      	ldr	r2, [r7, #24]
    d7aa:	4413      	add	r3, r2
    d7ac:	22ff      	movs	r2, #255	; 0xff
    d7ae:	709a      	strb	r2, [r3, #2]
    d7b0:	e000      	b.n	d7b4 <cdcdf_acm_disable+0x70>
			continue;
    d7b2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    d7b4:	7ffb      	ldrb	r3, [r7, #31]
    d7b6:	3301      	adds	r3, #1
    d7b8:	77fb      	strb	r3, [r7, #31]
    d7ba:	7ffb      	ldrb	r3, [r7, #31]
    d7bc:	2b01      	cmp	r3, #1
    d7be:	d9dc      	bls.n	d77a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    d7c0:	69bb      	ldr	r3, [r7, #24]
    d7c2:	791b      	ldrb	r3, [r3, #4]
    d7c4:	2bff      	cmp	r3, #255	; 0xff
    d7c6:	d007      	beq.n	d7d8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    d7c8:	69bb      	ldr	r3, [r7, #24]
    d7ca:	791b      	ldrb	r3, [r3, #4]
    d7cc:	4618      	mov	r0, r3
    d7ce:	4b06      	ldr	r3, [pc, #24]	; (d7e8 <cdcdf_acm_disable+0xa4>)
    d7d0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d7d2:	69bb      	ldr	r3, [r7, #24]
    d7d4:	22ff      	movs	r2, #255	; 0xff
    d7d6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    d7d8:	4b04      	ldr	r3, [pc, #16]	; (d7ec <cdcdf_acm_disable+0xa8>)
    d7da:	2200      	movs	r2, #0
    d7dc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d7de:	2300      	movs	r3, #0
}
    d7e0:	4618      	mov	r0, r3
    d7e2:	3720      	adds	r7, #32
    d7e4:	46bd      	mov	sp, r7
    d7e6:	bd80      	pop	{r7, pc}
    d7e8:	00004ebd 	.word	0x00004ebd
    d7ec:	2000128c 	.word	0x2000128c

0000d7f0 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    d7f0:	b580      	push	{r7, lr}
    d7f2:	b084      	sub	sp, #16
    d7f4:	af00      	add	r7, sp, #0
    d7f6:	60f8      	str	r0, [r7, #12]
    d7f8:	460b      	mov	r3, r1
    d7fa:	607a      	str	r2, [r7, #4]
    d7fc:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    d7fe:	7afb      	ldrb	r3, [r7, #11]
    d800:	2b01      	cmp	r3, #1
    d802:	d009      	beq.n	d818 <cdcdf_acm_ctrl+0x28>
    d804:	2b02      	cmp	r3, #2
    d806:	d00d      	beq.n	d824 <cdcdf_acm_ctrl+0x34>
    d808:	2b00      	cmp	r3, #0
    d80a:	d10e      	bne.n	d82a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    d80c:	6879      	ldr	r1, [r7, #4]
    d80e:	68f8      	ldr	r0, [r7, #12]
    d810:	4b09      	ldr	r3, [pc, #36]	; (d838 <cdcdf_acm_ctrl+0x48>)
    d812:	4798      	blx	r3
    d814:	4603      	mov	r3, r0
    d816:	e00a      	b.n	d82e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    d818:	6879      	ldr	r1, [r7, #4]
    d81a:	68f8      	ldr	r0, [r7, #12]
    d81c:	4b07      	ldr	r3, [pc, #28]	; (d83c <cdcdf_acm_ctrl+0x4c>)
    d81e:	4798      	blx	r3
    d820:	4603      	mov	r3, r0
    d822:	e004      	b.n	d82e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    d824:	f06f 031a 	mvn.w	r3, #26
    d828:	e001      	b.n	d82e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    d82a:	f06f 030c 	mvn.w	r3, #12
	}
}
    d82e:	4618      	mov	r0, r3
    d830:	3710      	adds	r7, #16
    d832:	46bd      	mov	sp, r7
    d834:	bd80      	pop	{r7, pc}
    d836:	bf00      	nop
    d838:	0000d5d1 	.word	0x0000d5d1
    d83c:	0000d745 	.word	0x0000d745

0000d840 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d840:	b590      	push	{r4, r7, lr}
    d842:	b087      	sub	sp, #28
    d844:	af00      	add	r7, sp, #0
    d846:	4603      	mov	r3, r0
    d848:	6039      	str	r1, [r7, #0]
    d84a:	71fb      	strb	r3, [r7, #7]
    d84c:	4613      	mov	r3, r2
    d84e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    d850:	683b      	ldr	r3, [r7, #0]
    d852:	799a      	ldrb	r2, [r3, #6]
    d854:	79db      	ldrb	r3, [r3, #7]
    d856:	021b      	lsls	r3, r3, #8
    d858:	4313      	orrs	r3, r2
    d85a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    d85c:	4b2b      	ldr	r3, [pc, #172]	; (d90c <cdcdf_acm_set_req+0xcc>)
    d85e:	4798      	blx	r3
    d860:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    d862:	683b      	ldr	r3, [r7, #0]
    d864:	785b      	ldrb	r3, [r3, #1]
    d866:	2b20      	cmp	r3, #32
    d868:	d002      	beq.n	d870 <cdcdf_acm_set_req+0x30>
    d86a:	2b22      	cmp	r3, #34	; 0x22
    d86c:	d034      	beq.n	d8d8 <cdcdf_acm_set_req+0x98>
    d86e:	e046      	b.n	d8fe <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d870:	8afb      	ldrh	r3, [r7, #22]
    d872:	2b07      	cmp	r3, #7
    d874:	d002      	beq.n	d87c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    d876:	f04f 33ff 	mov.w	r3, #4294967295
    d87a:	e042      	b.n	d902 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    d87c:	79bb      	ldrb	r3, [r7, #6]
    d87e:	2b00      	cmp	r3, #0
    d880:	d107      	bne.n	d892 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    d882:	8afa      	ldrh	r2, [r7, #22]
    d884:	79f8      	ldrb	r0, [r7, #7]
    d886:	2300      	movs	r3, #0
    d888:	6939      	ldr	r1, [r7, #16]
    d88a:	4c21      	ldr	r4, [pc, #132]	; (d910 <cdcdf_acm_set_req+0xd0>)
    d88c:	47a0      	blx	r4
    d88e:	4603      	mov	r3, r0
    d890:	e037      	b.n	d902 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    d892:	693a      	ldr	r2, [r7, #16]
    d894:	f107 0308 	add.w	r3, r7, #8
    d898:	6810      	ldr	r0, [r2, #0]
    d89a:	6018      	str	r0, [r3, #0]
    d89c:	8891      	ldrh	r1, [r2, #4]
    d89e:	7992      	ldrb	r2, [r2, #6]
    d8a0:	8099      	strh	r1, [r3, #4]
    d8a2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    d8a4:	4b1b      	ldr	r3, [pc, #108]	; (d914 <cdcdf_acm_set_req+0xd4>)
    d8a6:	681b      	ldr	r3, [r3, #0]
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d008      	beq.n	d8be <cdcdf_acm_set_req+0x7e>
    d8ac:	4b19      	ldr	r3, [pc, #100]	; (d914 <cdcdf_acm_set_req+0xd4>)
    d8ae:	681b      	ldr	r3, [r3, #0]
    d8b0:	f107 0208 	add.w	r2, r7, #8
    d8b4:	4610      	mov	r0, r2
    d8b6:	4798      	blx	r3
    d8b8:	4603      	mov	r3, r0
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d00a      	beq.n	d8d4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    d8be:	4b16      	ldr	r3, [pc, #88]	; (d918 <cdcdf_acm_set_req+0xd8>)
    d8c0:	f107 0208 	add.w	r2, r7, #8
    d8c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    d8c8:	6018      	str	r0, [r3, #0]
    d8ca:	3304      	adds	r3, #4
    d8cc:	8019      	strh	r1, [r3, #0]
    d8ce:	3302      	adds	r3, #2
    d8d0:	0c0a      	lsrs	r2, r1, #16
    d8d2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    d8d4:	2300      	movs	r3, #0
    d8d6:	e014      	b.n	d902 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    d8d8:	2300      	movs	r3, #0
    d8da:	2200      	movs	r2, #0
    d8dc:	2100      	movs	r1, #0
    d8de:	2000      	movs	r0, #0
    d8e0:	4c0b      	ldr	r4, [pc, #44]	; (d910 <cdcdf_acm_set_req+0xd0>)
    d8e2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    d8e4:	4b0d      	ldr	r3, [pc, #52]	; (d91c <cdcdf_acm_set_req+0xdc>)
    d8e6:	681b      	ldr	r3, [r3, #0]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d006      	beq.n	d8fa <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    d8ec:	4b0b      	ldr	r3, [pc, #44]	; (d91c <cdcdf_acm_set_req+0xdc>)
    d8ee:	681b      	ldr	r3, [r3, #0]
    d8f0:	683a      	ldr	r2, [r7, #0]
    d8f2:	8852      	ldrh	r2, [r2, #2]
    d8f4:	b292      	uxth	r2, r2
    d8f6:	4610      	mov	r0, r2
    d8f8:	4798      	blx	r3
		}
		return ERR_NONE;
    d8fa:	2300      	movs	r3, #0
    d8fc:	e001      	b.n	d902 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    d8fe:	f06f 030c 	mvn.w	r3, #12
	}
}
    d902:	4618      	mov	r0, r3
    d904:	371c      	adds	r7, #28
    d906:	46bd      	mov	sp, r7
    d908:	bd90      	pop	{r4, r7, pc}
    d90a:	bf00      	nop
    d90c:	0000e751 	.word	0x0000e751
    d910:	0000e5c5 	.word	0x0000e5c5
    d914:	200012a0 	.word	0x200012a0
    d918:	20001294 	.word	0x20001294
    d91c:	2000129c 	.word	0x2000129c

0000d920 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d920:	b590      	push	{r4, r7, lr}
    d922:	b085      	sub	sp, #20
    d924:	af00      	add	r7, sp, #0
    d926:	4603      	mov	r3, r0
    d928:	6039      	str	r1, [r7, #0]
    d92a:	71fb      	strb	r3, [r7, #7]
    d92c:	4613      	mov	r3, r2
    d92e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    d930:	683b      	ldr	r3, [r7, #0]
    d932:	799a      	ldrb	r2, [r3, #6]
    d934:	79db      	ldrb	r3, [r3, #7]
    d936:	021b      	lsls	r3, r3, #8
    d938:	4313      	orrs	r3, r2
    d93a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    d93c:	79bb      	ldrb	r3, [r7, #6]
    d93e:	2b01      	cmp	r3, #1
    d940:	d101      	bne.n	d946 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    d942:	2300      	movs	r3, #0
    d944:	e013      	b.n	d96e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    d946:	683b      	ldr	r3, [r7, #0]
    d948:	785b      	ldrb	r3, [r3, #1]
    d94a:	2b21      	cmp	r3, #33	; 0x21
    d94c:	d10d      	bne.n	d96a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d94e:	89fb      	ldrh	r3, [r7, #14]
    d950:	2b07      	cmp	r3, #7
    d952:	d002      	beq.n	d95a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    d954:	f04f 33ff 	mov.w	r3, #4294967295
    d958:	e009      	b.n	d96e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    d95a:	89fa      	ldrh	r2, [r7, #14]
    d95c:	79f8      	ldrb	r0, [r7, #7]
    d95e:	2300      	movs	r3, #0
    d960:	4905      	ldr	r1, [pc, #20]	; (d978 <cdcdf_acm_get_req+0x58>)
    d962:	4c06      	ldr	r4, [pc, #24]	; (d97c <cdcdf_acm_get_req+0x5c>)
    d964:	47a0      	blx	r4
    d966:	4603      	mov	r3, r0
    d968:	e001      	b.n	d96e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    d96a:	f06f 030c 	mvn.w	r3, #12
	}
}
    d96e:	4618      	mov	r0, r3
    d970:	3714      	adds	r7, #20
    d972:	46bd      	mov	sp, r7
    d974:	bd90      	pop	{r4, r7, pc}
    d976:	bf00      	nop
    d978:	20001294 	.word	0x20001294
    d97c:	0000e5c5 	.word	0x0000e5c5

0000d980 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d980:	b580      	push	{r7, lr}
    d982:	b082      	sub	sp, #8
    d984:	af00      	add	r7, sp, #0
    d986:	4603      	mov	r3, r0
    d988:	6039      	str	r1, [r7, #0]
    d98a:	71fb      	strb	r3, [r7, #7]
    d98c:	4613      	mov	r3, r2
    d98e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d990:	683b      	ldr	r3, [r7, #0]
    d992:	781b      	ldrb	r3, [r3, #0]
    d994:	095b      	lsrs	r3, r3, #5
    d996:	b2db      	uxtb	r3, r3
    d998:	f003 0303 	and.w	r3, r3, #3
    d99c:	2b01      	cmp	r3, #1
    d99e:	d002      	beq.n	d9a6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    d9a0:	f06f 0309 	mvn.w	r3, #9
    d9a4:	e026      	b.n	d9f4 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    d9a6:	683b      	ldr	r3, [r7, #0]
    d9a8:	889b      	ldrh	r3, [r3, #4]
    d9aa:	b29a      	uxth	r2, r3
    d9ac:	4b13      	ldr	r3, [pc, #76]	; (d9fc <cdcdf_acm_req+0x7c>)
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	b29b      	uxth	r3, r3
    d9b2:	429a      	cmp	r2, r3
    d9b4:	d007      	beq.n	d9c6 <cdcdf_acm_req+0x46>
    d9b6:	683b      	ldr	r3, [r7, #0]
    d9b8:	889b      	ldrh	r3, [r3, #4]
    d9ba:	b29a      	uxth	r2, r3
    d9bc:	4b0f      	ldr	r3, [pc, #60]	; (d9fc <cdcdf_acm_req+0x7c>)
    d9be:	785b      	ldrb	r3, [r3, #1]
    d9c0:	b29b      	uxth	r3, r3
    d9c2:	429a      	cmp	r2, r3
    d9c4:	d114      	bne.n	d9f0 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    d9c6:	683b      	ldr	r3, [r7, #0]
    d9c8:	781b      	ldrb	r3, [r3, #0]
    d9ca:	b25b      	sxtb	r3, r3
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	da07      	bge.n	d9e0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    d9d0:	79ba      	ldrb	r2, [r7, #6]
    d9d2:	79fb      	ldrb	r3, [r7, #7]
    d9d4:	6839      	ldr	r1, [r7, #0]
    d9d6:	4618      	mov	r0, r3
    d9d8:	4b09      	ldr	r3, [pc, #36]	; (da00 <cdcdf_acm_req+0x80>)
    d9da:	4798      	blx	r3
    d9dc:	4603      	mov	r3, r0
    d9de:	e009      	b.n	d9f4 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    d9e0:	79ba      	ldrb	r2, [r7, #6]
    d9e2:	79fb      	ldrb	r3, [r7, #7]
    d9e4:	6839      	ldr	r1, [r7, #0]
    d9e6:	4618      	mov	r0, r3
    d9e8:	4b06      	ldr	r3, [pc, #24]	; (da04 <cdcdf_acm_req+0x84>)
    d9ea:	4798      	blx	r3
    d9ec:	4603      	mov	r3, r0
    d9ee:	e001      	b.n	d9f4 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    d9f0:	f06f 0309 	mvn.w	r3, #9
	}
}
    d9f4:	4618      	mov	r0, r3
    d9f6:	3708      	adds	r7, #8
    d9f8:	46bd      	mov	sp, r7
    d9fa:	bd80      	pop	{r7, pc}
    d9fc:	2000128c 	.word	0x2000128c
    da00:	0000d921 	.word	0x0000d921
    da04:	0000d841 	.word	0x0000d841

0000da08 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    da08:	b580      	push	{r7, lr}
    da0a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    da0c:	4b0b      	ldr	r3, [pc, #44]	; (da3c <cdcdf_acm_init+0x34>)
    da0e:	4798      	blx	r3
    da10:	4603      	mov	r3, r0
    da12:	2b01      	cmp	r3, #1
    da14:	d902      	bls.n	da1c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    da16:	f06f 0310 	mvn.w	r3, #16
    da1a:	e00d      	b.n	da38 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    da1c:	4b08      	ldr	r3, [pc, #32]	; (da40 <cdcdf_acm_init+0x38>)
    da1e:	4a09      	ldr	r2, [pc, #36]	; (da44 <cdcdf_acm_init+0x3c>)
    da20:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    da22:	4b07      	ldr	r3, [pc, #28]	; (da40 <cdcdf_acm_init+0x38>)
    da24:	4a08      	ldr	r2, [pc, #32]	; (da48 <cdcdf_acm_init+0x40>)
    da26:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    da28:	4805      	ldr	r0, [pc, #20]	; (da40 <cdcdf_acm_init+0x38>)
    da2a:	4b08      	ldr	r3, [pc, #32]	; (da4c <cdcdf_acm_init+0x44>)
    da2c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    da2e:	4908      	ldr	r1, [pc, #32]	; (da50 <cdcdf_acm_init+0x48>)
    da30:	2001      	movs	r0, #1
    da32:	4b08      	ldr	r3, [pc, #32]	; (da54 <cdcdf_acm_init+0x4c>)
    da34:	4798      	blx	r3
	return ERR_NONE;
    da36:	2300      	movs	r3, #0
}
    da38:	4618      	mov	r0, r3
    da3a:	bd80      	pop	{r7, pc}
    da3c:	0000e769 	.word	0x0000e769
    da40:	20001280 	.word	0x20001280
    da44:	0000d7f1 	.word	0x0000d7f1
    da48:	2000128c 	.word	0x2000128c
    da4c:	0000e6d1 	.word	0x0000e6d1
    da50:	20000208 	.word	0x20000208
    da54:	0000e601 	.word	0x0000e601

0000da58 <usb_get_u16>:
{
    da58:	b480      	push	{r7}
    da5a:	b083      	sub	sp, #12
    da5c:	af00      	add	r7, sp, #0
    da5e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    da60:	687b      	ldr	r3, [r7, #4]
    da62:	781b      	ldrb	r3, [r3, #0]
    da64:	b29a      	uxth	r2, r3
    da66:	687b      	ldr	r3, [r7, #4]
    da68:	3301      	adds	r3, #1
    da6a:	781b      	ldrb	r3, [r3, #0]
    da6c:	b29b      	uxth	r3, r3
    da6e:	021b      	lsls	r3, r3, #8
    da70:	b29b      	uxth	r3, r3
    da72:	4413      	add	r3, r2
    da74:	b29b      	uxth	r3, r3
}
    da76:	4618      	mov	r0, r3
    da78:	370c      	adds	r7, #12
    da7a:	46bd      	mov	sp, r7
    da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    da80:	4770      	bx	lr

0000da82 <usb_desc_len>:
{
    da82:	b480      	push	{r7}
    da84:	b083      	sub	sp, #12
    da86:	af00      	add	r7, sp, #0
    da88:	6078      	str	r0, [r7, #4]
	return desc[0];
    da8a:	687b      	ldr	r3, [r7, #4]
    da8c:	781b      	ldrb	r3, [r3, #0]
}
    da8e:	4618      	mov	r0, r3
    da90:	370c      	adds	r7, #12
    da92:	46bd      	mov	sp, r7
    da94:	f85d 7b04 	ldr.w	r7, [sp], #4
    da98:	4770      	bx	lr
	...

0000da9c <usb_desc_next>:
{
    da9c:	b580      	push	{r7, lr}
    da9e:	b082      	sub	sp, #8
    daa0:	af00      	add	r7, sp, #0
    daa2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    daa4:	6878      	ldr	r0, [r7, #4]
    daa6:	4b05      	ldr	r3, [pc, #20]	; (dabc <usb_desc_next+0x20>)
    daa8:	4798      	blx	r3
    daaa:	4603      	mov	r3, r0
    daac:	461a      	mov	r2, r3
    daae:	687b      	ldr	r3, [r7, #4]
    dab0:	4413      	add	r3, r2
}
    dab2:	4618      	mov	r0, r3
    dab4:	3708      	adds	r7, #8
    dab6:	46bd      	mov	sp, r7
    dab8:	bd80      	pop	{r7, pc}
    daba:	bf00      	nop
    dabc:	0000da83 	.word	0x0000da83

0000dac0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    dac0:	b580      	push	{r7, lr}
    dac2:	b082      	sub	sp, #8
    dac4:	af00      	add	r7, sp, #0
    dac6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	3302      	adds	r3, #2
    dacc:	4618      	mov	r0, r3
    dace:	4b03      	ldr	r3, [pc, #12]	; (dadc <usb_cfg_desc_total_len+0x1c>)
    dad0:	4798      	blx	r3
    dad2:	4603      	mov	r3, r0
}
    dad4:	4618      	mov	r0, r3
    dad6:	3708      	adds	r7, #8
    dad8:	46bd      	mov	sp, r7
    dada:	bd80      	pop	{r7, pc}
    dadc:	0000da59 	.word	0x0000da59

0000dae0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    dae0:	b590      	push	{r4, r7, lr}
    dae2:	b085      	sub	sp, #20
    dae4:	af00      	add	r7, sp, #0
    dae6:	4603      	mov	r3, r0
    dae8:	6039      	str	r1, [r7, #0]
    daea:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    daec:	2300      	movs	r3, #0
    daee:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    daf0:	683b      	ldr	r3, [r7, #0]
    daf2:	799a      	ldrb	r2, [r3, #6]
    daf4:	79db      	ldrb	r3, [r3, #7]
    daf6:	021b      	lsls	r3, r3, #8
    daf8:	4313      	orrs	r3, r2
    dafa:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    dafc:	897b      	ldrh	r3, [r7, #10]
    dafe:	2b12      	cmp	r3, #18
    db00:	d901      	bls.n	db06 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    db02:	2312      	movs	r3, #18
    db04:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    db06:	68fb      	ldr	r3, [r7, #12]
    db08:	2b00      	cmp	r3, #0
    db0a:	d10a      	bne.n	db22 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    db0c:	4b0f      	ldr	r3, [pc, #60]	; (db4c <usbdc_get_dev_desc+0x6c>)
    db0e:	681b      	ldr	r3, [r3, #0]
    db10:	6818      	ldr	r0, [r3, #0]
    db12:	4b0e      	ldr	r3, [pc, #56]	; (db4c <usbdc_get_dev_desc+0x6c>)
    db14:	681b      	ldr	r3, [r3, #0]
    db16:	685b      	ldr	r3, [r3, #4]
    db18:	2201      	movs	r2, #1
    db1a:	4619      	mov	r1, r3
    db1c:	4b0c      	ldr	r3, [pc, #48]	; (db50 <usbdc_get_dev_desc+0x70>)
    db1e:	4798      	blx	r3
    db20:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    db22:	68fb      	ldr	r3, [r7, #12]
    db24:	2b00      	cmp	r3, #0
    db26:	d101      	bne.n	db2c <usbdc_get_dev_desc+0x4c>
		return false;
    db28:	2300      	movs	r3, #0
    db2a:	e00b      	b.n	db44 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    db2c:	897a      	ldrh	r2, [r7, #10]
    db2e:	79f8      	ldrb	r0, [r7, #7]
    db30:	2300      	movs	r3, #0
    db32:	68f9      	ldr	r1, [r7, #12]
    db34:	4c07      	ldr	r4, [pc, #28]	; (db54 <usbdc_get_dev_desc+0x74>)
    db36:	47a0      	blx	r4
    db38:	4603      	mov	r3, r0
    db3a:	2b00      	cmp	r3, #0
    db3c:	d001      	beq.n	db42 <usbdc_get_dev_desc+0x62>
		return false;
    db3e:	2300      	movs	r3, #0
    db40:	e000      	b.n	db44 <usbdc_get_dev_desc+0x64>
	}
	return true;
    db42:	2301      	movs	r3, #1
}
    db44:	4618      	mov	r0, r3
    db46:	3714      	adds	r7, #20
    db48:	46bd      	mov	sp, r7
    db4a:	bd90      	pop	{r4, r7, pc}
    db4c:	200012a4 	.word	0x200012a4
    db50:	0000e855 	.word	0x0000e855
    db54:	0000e5c5 	.word	0x0000e5c5

0000db58 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    db58:	b590      	push	{r4, r7, lr}
    db5a:	b087      	sub	sp, #28
    db5c:	af00      	add	r7, sp, #0
    db5e:	4603      	mov	r3, r0
    db60:	6039      	str	r1, [r7, #0]
    db62:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    db64:	2300      	movs	r3, #0
    db66:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    db68:	683b      	ldr	r3, [r7, #0]
    db6a:	799a      	ldrb	r2, [r3, #6]
    db6c:	79db      	ldrb	r3, [r3, #7]
    db6e:	021b      	lsls	r3, r3, #8
    db70:	4313      	orrs	r3, r2
    db72:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    db74:	683b      	ldr	r3, [r7, #0]
    db76:	885b      	ldrh	r3, [r3, #2]
    db78:	b29b      	uxth	r3, r3
    db7a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    db7c:	8a7a      	ldrh	r2, [r7, #18]
    db7e:	4b1e      	ldr	r3, [pc, #120]	; (dbf8 <usbdc_get_cfg_desc+0xa0>)
    db80:	7f1b      	ldrb	r3, [r3, #28]
    db82:	3b01      	subs	r3, #1
    db84:	4013      	ands	r3, r2
    db86:	2b00      	cmp	r3, #0
    db88:	bf0c      	ite	eq
    db8a:	2301      	moveq	r3, #1
    db8c:	2300      	movne	r3, #0
    db8e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    db90:	697b      	ldr	r3, [r7, #20]
    db92:	2b00      	cmp	r3, #0
    db94:	d10c      	bne.n	dbb0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    db96:	4b18      	ldr	r3, [pc, #96]	; (dbf8 <usbdc_get_cfg_desc+0xa0>)
    db98:	681b      	ldr	r3, [r3, #0]
    db9a:	6818      	ldr	r0, [r3, #0]
    db9c:	4b16      	ldr	r3, [pc, #88]	; (dbf8 <usbdc_get_cfg_desc+0xa0>)
    db9e:	681b      	ldr	r3, [r3, #0]
    dba0:	6859      	ldr	r1, [r3, #4]
    dba2:	7c3b      	ldrb	r3, [r7, #16]
    dba4:	3301      	adds	r3, #1
    dba6:	b2db      	uxtb	r3, r3
    dba8:	461a      	mov	r2, r3
    dbaa:	4b14      	ldr	r3, [pc, #80]	; (dbfc <usbdc_get_cfg_desc+0xa4>)
    dbac:	4798      	blx	r3
    dbae:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    dbb0:	697b      	ldr	r3, [r7, #20]
    dbb2:	2b00      	cmp	r3, #0
    dbb4:	d101      	bne.n	dbba <usbdc_get_cfg_desc+0x62>
		return false;
    dbb6:	2300      	movs	r3, #0
    dbb8:	e019      	b.n	dbee <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    dbba:	6978      	ldr	r0, [r7, #20]
    dbbc:	4b10      	ldr	r3, [pc, #64]	; (dc00 <usbdc_get_cfg_desc+0xa8>)
    dbbe:	4798      	blx	r3
    dbc0:	4603      	mov	r3, r0
    dbc2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    dbc4:	8a7a      	ldrh	r2, [r7, #18]
    dbc6:	89fb      	ldrh	r3, [r7, #14]
    dbc8:	429a      	cmp	r2, r3
    dbca:	d802      	bhi.n	dbd2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    dbcc:	2300      	movs	r3, #0
    dbce:	747b      	strb	r3, [r7, #17]
    dbd0:	e001      	b.n	dbd6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    dbd2:	89fb      	ldrh	r3, [r7, #14]
    dbd4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    dbd6:	8a7a      	ldrh	r2, [r7, #18]
    dbd8:	7c7b      	ldrb	r3, [r7, #17]
    dbda:	79f8      	ldrb	r0, [r7, #7]
    dbdc:	6979      	ldr	r1, [r7, #20]
    dbde:	4c09      	ldr	r4, [pc, #36]	; (dc04 <usbdc_get_cfg_desc+0xac>)
    dbe0:	47a0      	blx	r4
    dbe2:	4603      	mov	r3, r0
    dbe4:	2b00      	cmp	r3, #0
    dbe6:	d001      	beq.n	dbec <usbdc_get_cfg_desc+0x94>
		return false;
    dbe8:	2300      	movs	r3, #0
    dbea:	e000      	b.n	dbee <usbdc_get_cfg_desc+0x96>
	}
	return true;
    dbec:	2301      	movs	r3, #1
}
    dbee:	4618      	mov	r0, r3
    dbf0:	371c      	adds	r7, #28
    dbf2:	46bd      	mov	sp, r7
    dbf4:	bd90      	pop	{r4, r7, pc}
    dbf6:	bf00      	nop
    dbf8:	200012a4 	.word	0x200012a4
    dbfc:	0000e915 	.word	0x0000e915
    dc00:	0000dac1 	.word	0x0000dac1
    dc04:	0000e5c5 	.word	0x0000e5c5

0000dc08 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    dc08:	b590      	push	{r4, r7, lr}
    dc0a:	b085      	sub	sp, #20
    dc0c:	af00      	add	r7, sp, #0
    dc0e:	4603      	mov	r3, r0
    dc10:	6039      	str	r1, [r7, #0]
    dc12:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    dc14:	683b      	ldr	r3, [r7, #0]
    dc16:	799a      	ldrb	r2, [r3, #6]
    dc18:	79db      	ldrb	r3, [r3, #7]
    dc1a:	021b      	lsls	r3, r3, #8
    dc1c:	4313      	orrs	r3, r2
    dc1e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    dc20:	683b      	ldr	r3, [r7, #0]
    dc22:	885b      	ldrh	r3, [r3, #2]
    dc24:	b29b      	uxth	r3, r3
    dc26:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    dc28:	89fa      	ldrh	r2, [r7, #14]
    dc2a:	4b1a      	ldr	r3, [pc, #104]	; (dc94 <usbdc_get_str_desc+0x8c>)
    dc2c:	7f1b      	ldrb	r3, [r3, #28]
    dc2e:	3b01      	subs	r3, #1
    dc30:	4013      	ands	r3, r2
    dc32:	2b00      	cmp	r3, #0
    dc34:	bf0c      	ite	eq
    dc36:	2301      	moveq	r3, #1
    dc38:	2300      	movne	r3, #0
    dc3a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    dc3c:	4b15      	ldr	r3, [pc, #84]	; (dc94 <usbdc_get_str_desc+0x8c>)
    dc3e:	681b      	ldr	r3, [r3, #0]
    dc40:	6818      	ldr	r0, [r3, #0]
    dc42:	4b14      	ldr	r3, [pc, #80]	; (dc94 <usbdc_get_str_desc+0x8c>)
    dc44:	681b      	ldr	r3, [r3, #0]
    dc46:	685b      	ldr	r3, [r3, #4]
    dc48:	7b3a      	ldrb	r2, [r7, #12]
    dc4a:	4619      	mov	r1, r3
    dc4c:	4b12      	ldr	r3, [pc, #72]	; (dc98 <usbdc_get_str_desc+0x90>)
    dc4e:	4798      	blx	r3
    dc50:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    dc52:	68bb      	ldr	r3, [r7, #8]
    dc54:	2b00      	cmp	r3, #0
    dc56:	d101      	bne.n	dc5c <usbdc_get_str_desc+0x54>
		return false;
    dc58:	2300      	movs	r3, #0
    dc5a:	e017      	b.n	dc8c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    dc5c:	68bb      	ldr	r3, [r7, #8]
    dc5e:	781b      	ldrb	r3, [r3, #0]
    dc60:	b29b      	uxth	r3, r3
    dc62:	89fa      	ldrh	r2, [r7, #14]
    dc64:	429a      	cmp	r2, r3
    dc66:	d802      	bhi.n	dc6e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    dc68:	2300      	movs	r3, #0
    dc6a:	737b      	strb	r3, [r7, #13]
    dc6c:	e002      	b.n	dc74 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    dc6e:	68bb      	ldr	r3, [r7, #8]
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    dc74:	89fa      	ldrh	r2, [r7, #14]
    dc76:	7b7b      	ldrb	r3, [r7, #13]
    dc78:	79f8      	ldrb	r0, [r7, #7]
    dc7a:	68b9      	ldr	r1, [r7, #8]
    dc7c:	4c07      	ldr	r4, [pc, #28]	; (dc9c <usbdc_get_str_desc+0x94>)
    dc7e:	47a0      	blx	r4
    dc80:	4603      	mov	r3, r0
    dc82:	2b00      	cmp	r3, #0
    dc84:	d001      	beq.n	dc8a <usbdc_get_str_desc+0x82>
		return false;
    dc86:	2300      	movs	r3, #0
    dc88:	e000      	b.n	dc8c <usbdc_get_str_desc+0x84>
	}
	return true;
    dc8a:	2301      	movs	r3, #1
}
    dc8c:	4618      	mov	r0, r3
    dc8e:	3714      	adds	r7, #20
    dc90:	46bd      	mov	sp, r7
    dc92:	bd90      	pop	{r4, r7, pc}
    dc94:	200012a4 	.word	0x200012a4
    dc98:	0000e98d 	.word	0x0000e98d
    dc9c:	0000e5c5 	.word	0x0000e5c5

0000dca0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    dca0:	b580      	push	{r7, lr}
    dca2:	b084      	sub	sp, #16
    dca4:	af00      	add	r7, sp, #0
    dca6:	4603      	mov	r3, r0
    dca8:	6039      	str	r1, [r7, #0]
    dcaa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    dcac:	683b      	ldr	r3, [r7, #0]
    dcae:	885b      	ldrh	r3, [r3, #2]
    dcb0:	b29b      	uxth	r3, r3
    dcb2:	0a1b      	lsrs	r3, r3, #8
    dcb4:	b29b      	uxth	r3, r3
    dcb6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    dcb8:	7bfb      	ldrb	r3, [r7, #15]
    dcba:	2b02      	cmp	r3, #2
    dcbc:	d00d      	beq.n	dcda <usbdc_get_desc_req+0x3a>
    dcbe:	2b03      	cmp	r3, #3
    dcc0:	d012      	beq.n	dce8 <usbdc_get_desc_req+0x48>
    dcc2:	2b01      	cmp	r3, #1
    dcc4:	d002      	beq.n	dccc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    dcc6:	bf00      	nop
	}
	return false;
    dcc8:	2300      	movs	r3, #0
    dcca:	e013      	b.n	dcf4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    dccc:	79fb      	ldrb	r3, [r7, #7]
    dcce:	6839      	ldr	r1, [r7, #0]
    dcd0:	4618      	mov	r0, r3
    dcd2:	4b0a      	ldr	r3, [pc, #40]	; (dcfc <usbdc_get_desc_req+0x5c>)
    dcd4:	4798      	blx	r3
    dcd6:	4603      	mov	r3, r0
    dcd8:	e00c      	b.n	dcf4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    dcda:	79fb      	ldrb	r3, [r7, #7]
    dcdc:	6839      	ldr	r1, [r7, #0]
    dcde:	4618      	mov	r0, r3
    dce0:	4b07      	ldr	r3, [pc, #28]	; (dd00 <usbdc_get_desc_req+0x60>)
    dce2:	4798      	blx	r3
    dce4:	4603      	mov	r3, r0
    dce6:	e005      	b.n	dcf4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    dce8:	79fb      	ldrb	r3, [r7, #7]
    dcea:	6839      	ldr	r1, [r7, #0]
    dcec:	4618      	mov	r0, r3
    dcee:	4b05      	ldr	r3, [pc, #20]	; (dd04 <usbdc_get_desc_req+0x64>)
    dcf0:	4798      	blx	r3
    dcf2:	4603      	mov	r3, r0
}
    dcf4:	4618      	mov	r0, r3
    dcf6:	3710      	adds	r7, #16
    dcf8:	46bd      	mov	sp, r7
    dcfa:	bd80      	pop	{r7, pc}
    dcfc:	0000dae1 	.word	0x0000dae1
    dd00:	0000db59 	.word	0x0000db59
    dd04:	0000dc09 	.word	0x0000dc09

0000dd08 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    dd08:	b590      	push	{r4, r7, lr}
    dd0a:	b085      	sub	sp, #20
    dd0c:	af00      	add	r7, sp, #0
    dd0e:	4603      	mov	r3, r0
    dd10:	6039      	str	r1, [r7, #0]
    dd12:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    dd14:	683b      	ldr	r3, [r7, #0]
    dd16:	781b      	ldrb	r3, [r3, #0]
    dd18:	f003 031f 	and.w	r3, r3, #31
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	db1b      	blt.n	dd58 <usbdc_get_status_req+0x50>
    dd20:	2b01      	cmp	r3, #1
    dd22:	dd02      	ble.n	dd2a <usbdc_get_status_req+0x22>
    dd24:	2b02      	cmp	r3, #2
    dd26:	d003      	beq.n	dd30 <usbdc_get_status_req+0x28>
    dd28:	e016      	b.n	dd58 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    dd2a:	2300      	movs	r3, #0
    dd2c:	60fb      	str	r3, [r7, #12]
		break;
    dd2e:	e015      	b.n	dd5c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    dd30:	683b      	ldr	r3, [r7, #0]
    dd32:	889b      	ldrh	r3, [r3, #4]
    dd34:	b29b      	uxth	r3, r3
    dd36:	b2db      	uxtb	r3, r3
    dd38:	2102      	movs	r1, #2
    dd3a:	4618      	mov	r0, r3
    dd3c:	4b0f      	ldr	r3, [pc, #60]	; (dd7c <usbdc_get_status_req+0x74>)
    dd3e:	4798      	blx	r3
    dd40:	4603      	mov	r3, r0
    dd42:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    dd44:	68fb      	ldr	r3, [r7, #12]
    dd46:	2b00      	cmp	r3, #0
    dd48:	da01      	bge.n	dd4e <usbdc_get_status_req+0x46>
			return false;
    dd4a:	2300      	movs	r3, #0
    dd4c:	e012      	b.n	dd74 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    dd4e:	68fb      	ldr	r3, [r7, #12]
    dd50:	f003 0301 	and.w	r3, r3, #1
    dd54:	60fb      	str	r3, [r7, #12]
		break;
    dd56:	e001      	b.n	dd5c <usbdc_get_status_req+0x54>
	default:
		return false;
    dd58:	2300      	movs	r3, #0
    dd5a:	e00b      	b.n	dd74 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    dd5c:	4b08      	ldr	r3, [pc, #32]	; (dd80 <usbdc_get_status_req+0x78>)
    dd5e:	695b      	ldr	r3, [r3, #20]
    dd60:	89ba      	ldrh	r2, [r7, #12]
    dd62:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    dd64:	4b06      	ldr	r3, [pc, #24]	; (dd80 <usbdc_get_status_req+0x78>)
    dd66:	6959      	ldr	r1, [r3, #20]
    dd68:	79f8      	ldrb	r0, [r7, #7]
    dd6a:	2300      	movs	r3, #0
    dd6c:	2202      	movs	r2, #2
    dd6e:	4c05      	ldr	r4, [pc, #20]	; (dd84 <usbdc_get_status_req+0x7c>)
    dd70:	47a0      	blx	r4
	return true;
    dd72:	2301      	movs	r3, #1
}
    dd74:	4618      	mov	r0, r3
    dd76:	3714      	adds	r7, #20
    dd78:	46bd      	mov	sp, r7
    dd7a:	bd90      	pop	{r4, r7, pc}
    dd7c:	00005169 	.word	0x00005169
    dd80:	200012a4 	.word	0x200012a4
    dd84:	0000e5c5 	.word	0x0000e5c5

0000dd88 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    dd88:	b590      	push	{r4, r7, lr}
    dd8a:	b085      	sub	sp, #20
    dd8c:	af00      	add	r7, sp, #0
    dd8e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    dd90:	4b1f      	ldr	r3, [pc, #124]	; (de10 <usbdc_get_interface+0x88>)
    dd92:	691b      	ldr	r3, [r3, #16]
    dd94:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    dd96:	4b1e      	ldr	r3, [pc, #120]	; (de10 <usbdc_get_interface+0x88>)
    dd98:	7f5b      	ldrb	r3, [r3, #29]
    dd9a:	461a      	mov	r2, r3
    dd9c:	687b      	ldr	r3, [r7, #4]
    dd9e:	889b      	ldrh	r3, [r3, #4]
    dda0:	b29b      	uxth	r3, r3
    dda2:	fa42 f303 	asr.w	r3, r2, r3
    dda6:	f003 0301 	and.w	r3, r3, #1
    ddaa:	2b00      	cmp	r3, #0
    ddac:	d128      	bne.n	de00 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ddae:	4b18      	ldr	r3, [pc, #96]	; (de10 <usbdc_get_interface+0x88>)
    ddb0:	695b      	ldr	r3, [r3, #20]
    ddb2:	2200      	movs	r2, #0
    ddb4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ddb6:	4b16      	ldr	r3, [pc, #88]	; (de10 <usbdc_get_interface+0x88>)
    ddb8:	6959      	ldr	r1, [r3, #20]
    ddba:	2300      	movs	r3, #0
    ddbc:	2201      	movs	r2, #1
    ddbe:	2000      	movs	r0, #0
    ddc0:	4c14      	ldr	r4, [pc, #80]	; (de14 <usbdc_get_interface+0x8c>)
    ddc2:	47a0      	blx	r4
		return true;
    ddc4:	2301      	movs	r3, #1
    ddc6:	e01f      	b.n	de08 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ddc8:	68fb      	ldr	r3, [r7, #12]
    ddca:	685b      	ldr	r3, [r3, #4]
    ddcc:	687a      	ldr	r2, [r7, #4]
    ddce:	2102      	movs	r1, #2
    ddd0:	68f8      	ldr	r0, [r7, #12]
    ddd2:	4798      	blx	r3
    ddd4:	60b8      	str	r0, [r7, #8]
    ddd6:	68bb      	ldr	r3, [r7, #8]
    ddd8:	2b00      	cmp	r3, #0
    ddda:	da03      	bge.n	dde4 <usbdc_get_interface+0x5c>
			func = func->next;
    dddc:	68fb      	ldr	r3, [r7, #12]
    ddde:	681b      	ldr	r3, [r3, #0]
    dde0:	60fb      	str	r3, [r7, #12]
    dde2:	e00d      	b.n	de00 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    dde4:	4b0a      	ldr	r3, [pc, #40]	; (de10 <usbdc_get_interface+0x88>)
    dde6:	695b      	ldr	r3, [r3, #20]
    dde8:	68ba      	ldr	r2, [r7, #8]
    ddea:	b2d2      	uxtb	r2, r2
    ddec:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ddee:	4b08      	ldr	r3, [pc, #32]	; (de10 <usbdc_get_interface+0x88>)
    ddf0:	6959      	ldr	r1, [r3, #20]
    ddf2:	2300      	movs	r3, #0
    ddf4:	2201      	movs	r2, #1
    ddf6:	2000      	movs	r0, #0
    ddf8:	4c06      	ldr	r4, [pc, #24]	; (de14 <usbdc_get_interface+0x8c>)
    ddfa:	47a0      	blx	r4
			return true;
    ddfc:	2301      	movs	r3, #1
    ddfe:	e003      	b.n	de08 <usbdc_get_interface+0x80>
	while (NULL != func) {
    de00:	68fb      	ldr	r3, [r7, #12]
    de02:	2b00      	cmp	r3, #0
    de04:	d1e0      	bne.n	ddc8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    de06:	2300      	movs	r3, #0
}
    de08:	4618      	mov	r0, r3
    de0a:	3714      	adds	r7, #20
    de0c:	46bd      	mov	sp, r7
    de0e:	bd90      	pop	{r4, r7, pc}
    de10:	200012a4 	.word	0x200012a4
    de14:	0000e5c5 	.word	0x0000e5c5

0000de18 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    de18:	b590      	push	{r4, r7, lr}
    de1a:	b083      	sub	sp, #12
    de1c:	af00      	add	r7, sp, #0
    de1e:	4603      	mov	r3, r0
    de20:	6039      	str	r1, [r7, #0]
    de22:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    de24:	683b      	ldr	r3, [r7, #0]
    de26:	785b      	ldrb	r3, [r3, #1]
    de28:	2b0a      	cmp	r3, #10
    de2a:	d83a      	bhi.n	dea2 <usbdc_get_req+0x8a>
    de2c:	a201      	add	r2, pc, #4	; (adr r2, de34 <usbdc_get_req+0x1c>)
    de2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    de32:	bf00      	nop
    de34:	0000de8b 	.word	0x0000de8b
    de38:	0000dea3 	.word	0x0000dea3
    de3c:	0000dea3 	.word	0x0000dea3
    de40:	0000dea3 	.word	0x0000dea3
    de44:	0000dea3 	.word	0x0000dea3
    de48:	0000dea3 	.word	0x0000dea3
    de4c:	0000de61 	.word	0x0000de61
    de50:	0000dea3 	.word	0x0000dea3
    de54:	0000de6f 	.word	0x0000de6f
    de58:	0000dea3 	.word	0x0000dea3
    de5c:	0000de99 	.word	0x0000de99
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    de60:	79fb      	ldrb	r3, [r7, #7]
    de62:	6839      	ldr	r1, [r7, #0]
    de64:	4618      	mov	r0, r3
    de66:	4b11      	ldr	r3, [pc, #68]	; (deac <usbdc_get_req+0x94>)
    de68:	4798      	blx	r3
    de6a:	4603      	mov	r3, r0
    de6c:	e01a      	b.n	dea4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    de6e:	4b10      	ldr	r3, [pc, #64]	; (deb0 <usbdc_get_req+0x98>)
    de70:	695b      	ldr	r3, [r3, #20]
    de72:	4a0f      	ldr	r2, [pc, #60]	; (deb0 <usbdc_get_req+0x98>)
    de74:	7ed2      	ldrb	r2, [r2, #27]
    de76:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    de78:	4b0d      	ldr	r3, [pc, #52]	; (deb0 <usbdc_get_req+0x98>)
    de7a:	6959      	ldr	r1, [r3, #20]
    de7c:	79f8      	ldrb	r0, [r7, #7]
    de7e:	2300      	movs	r3, #0
    de80:	2201      	movs	r2, #1
    de82:	4c0c      	ldr	r4, [pc, #48]	; (deb4 <usbdc_get_req+0x9c>)
    de84:	47a0      	blx	r4
		return true;
    de86:	2301      	movs	r3, #1
    de88:	e00c      	b.n	dea4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    de8a:	79fb      	ldrb	r3, [r7, #7]
    de8c:	6839      	ldr	r1, [r7, #0]
    de8e:	4618      	mov	r0, r3
    de90:	4b09      	ldr	r3, [pc, #36]	; (deb8 <usbdc_get_req+0xa0>)
    de92:	4798      	blx	r3
    de94:	4603      	mov	r3, r0
    de96:	e005      	b.n	dea4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    de98:	6838      	ldr	r0, [r7, #0]
    de9a:	4b08      	ldr	r3, [pc, #32]	; (debc <usbdc_get_req+0xa4>)
    de9c:	4798      	blx	r3
    de9e:	4603      	mov	r3, r0
    dea0:	e000      	b.n	dea4 <usbdc_get_req+0x8c>
	default:
		return false;
    dea2:	2300      	movs	r3, #0
	}
}
    dea4:	4618      	mov	r0, r3
    dea6:	370c      	adds	r7, #12
    dea8:	46bd      	mov	sp, r7
    deaa:	bd90      	pop	{r4, r7, pc}
    deac:	0000dca1 	.word	0x0000dca1
    deb0:	200012a4 	.word	0x200012a4
    deb4:	0000e5c5 	.word	0x0000e5c5
    deb8:	0000dd09 	.word	0x0000dd09
    debc:	0000dd89 	.word	0x0000dd89

0000dec0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    dec0:	b590      	push	{r4, r7, lr}
    dec2:	b083      	sub	sp, #12
    dec4:	af00      	add	r7, sp, #0
    dec6:	4603      	mov	r3, r0
    dec8:	6039      	str	r1, [r7, #0]
    deca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    decc:	683b      	ldr	r3, [r7, #0]
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	f003 031f 	and.w	r3, r3, #31
    ded4:	2b02      	cmp	r3, #2
    ded6:	d116      	bne.n	df06 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ded8:	683b      	ldr	r3, [r7, #0]
    deda:	88db      	ldrh	r3, [r3, #6]
    dedc:	b29b      	uxth	r3, r3
    dede:	2b00      	cmp	r3, #0
    dee0:	d001      	beq.n	dee6 <usbdc_clear_ftr_req+0x26>
			return false;
    dee2:	2300      	movs	r3, #0
    dee4:	e010      	b.n	df08 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    dee6:	683b      	ldr	r3, [r7, #0]
    dee8:	889b      	ldrh	r3, [r3, #4]
    deea:	b29b      	uxth	r3, r3
    deec:	b2db      	uxtb	r3, r3
    deee:	2100      	movs	r1, #0
    def0:	4618      	mov	r0, r3
    def2:	4b07      	ldr	r3, [pc, #28]	; (df10 <usbdc_clear_ftr_req+0x50>)
    def4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    def6:	79f8      	ldrb	r0, [r7, #7]
    def8:	2301      	movs	r3, #1
    defa:	2200      	movs	r2, #0
    defc:	2100      	movs	r1, #0
    defe:	4c05      	ldr	r4, [pc, #20]	; (df14 <usbdc_clear_ftr_req+0x54>)
    df00:	47a0      	blx	r4
		return true;
    df02:	2301      	movs	r3, #1
    df04:	e000      	b.n	df08 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    df06:	2300      	movs	r3, #0
	}
}
    df08:	4618      	mov	r0, r3
    df0a:	370c      	adds	r7, #12
    df0c:	46bd      	mov	sp, r7
    df0e:	bd90      	pop	{r4, r7, pc}
    df10:	00005169 	.word	0x00005169
    df14:	0000e5c5 	.word	0x0000e5c5

0000df18 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    df18:	b590      	push	{r4, r7, lr}
    df1a:	b083      	sub	sp, #12
    df1c:	af00      	add	r7, sp, #0
    df1e:	4603      	mov	r3, r0
    df20:	6039      	str	r1, [r7, #0]
    df22:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    df24:	683b      	ldr	r3, [r7, #0]
    df26:	781b      	ldrb	r3, [r3, #0]
    df28:	f003 031f 	and.w	r3, r3, #31
    df2c:	2b02      	cmp	r3, #2
    df2e:	d116      	bne.n	df5e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    df30:	683b      	ldr	r3, [r7, #0]
    df32:	88db      	ldrh	r3, [r3, #6]
    df34:	b29b      	uxth	r3, r3
    df36:	2b00      	cmp	r3, #0
    df38:	d001      	beq.n	df3e <usbdc_set_ftr_req+0x26>
			return false;
    df3a:	2300      	movs	r3, #0
    df3c:	e010      	b.n	df60 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    df3e:	683b      	ldr	r3, [r7, #0]
    df40:	889b      	ldrh	r3, [r3, #4]
    df42:	b29b      	uxth	r3, r3
    df44:	b2db      	uxtb	r3, r3
    df46:	2101      	movs	r1, #1
    df48:	4618      	mov	r0, r3
    df4a:	4b07      	ldr	r3, [pc, #28]	; (df68 <usbdc_set_ftr_req+0x50>)
    df4c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    df4e:	79f8      	ldrb	r0, [r7, #7]
    df50:	2301      	movs	r3, #1
    df52:	2200      	movs	r2, #0
    df54:	2100      	movs	r1, #0
    df56:	4c05      	ldr	r4, [pc, #20]	; (df6c <usbdc_set_ftr_req+0x54>)
    df58:	47a0      	blx	r4
		return true;
    df5a:	2301      	movs	r3, #1
    df5c:	e000      	b.n	df60 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    df5e:	2300      	movs	r3, #0
	}
}
    df60:	4618      	mov	r0, r3
    df62:	370c      	adds	r7, #12
    df64:	46bd      	mov	sp, r7
    df66:	bd90      	pop	{r4, r7, pc}
    df68:	00005169 	.word	0x00005169
    df6c:	0000e5c5 	.word	0x0000e5c5

0000df70 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    df70:	b580      	push	{r7, lr}
    df72:	b082      	sub	sp, #8
    df74:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    df76:	4b0a      	ldr	r3, [pc, #40]	; (dfa0 <usbdc_unconfig+0x30>)
    df78:	691b      	ldr	r3, [r3, #16]
    df7a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    df7c:	e008      	b.n	df90 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	685b      	ldr	r3, [r3, #4]
    df82:	2200      	movs	r2, #0
    df84:	2101      	movs	r1, #1
    df86:	6878      	ldr	r0, [r7, #4]
    df88:	4798      	blx	r3
		func = func->next;
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	681b      	ldr	r3, [r3, #0]
    df8e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    df90:	687b      	ldr	r3, [r7, #4]
    df92:	2b00      	cmp	r3, #0
    df94:	d1f3      	bne.n	df7e <usbdc_unconfig+0xe>
	}
}
    df96:	bf00      	nop
    df98:	3708      	adds	r7, #8
    df9a:	46bd      	mov	sp, r7
    df9c:	bd80      	pop	{r7, pc}
    df9e:	bf00      	nop
    dfa0:	200012a4 	.word	0x200012a4

0000dfa4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b088      	sub	sp, #32
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	4603      	mov	r3, r0
    dfac:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    dfae:	2300      	movs	r3, #0
    dfb0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    dfb2:	23ff      	movs	r3, #255	; 0xff
    dfb4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    dfb6:	79fb      	ldrb	r3, [r7, #7]
    dfb8:	2b00      	cmp	r3, #0
    dfba:	d103      	bne.n	dfc4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    dfbc:	4b2e      	ldr	r3, [pc, #184]	; (e078 <usbdc_set_config+0xd4>)
    dfbe:	4798      	blx	r3
		return true;
    dfc0:	2301      	movs	r3, #1
    dfc2:	e055      	b.n	e070 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    dfc4:	69bb      	ldr	r3, [r7, #24]
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	d10a      	bne.n	dfe0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    dfca:	4b2c      	ldr	r3, [pc, #176]	; (e07c <usbdc_set_config+0xd8>)
    dfcc:	681b      	ldr	r3, [r3, #0]
    dfce:	6818      	ldr	r0, [r3, #0]
    dfd0:	4b2a      	ldr	r3, [pc, #168]	; (e07c <usbdc_set_config+0xd8>)
    dfd2:	681b      	ldr	r3, [r3, #0]
    dfd4:	685b      	ldr	r3, [r3, #4]
    dfd6:	79fa      	ldrb	r2, [r7, #7]
    dfd8:	4619      	mov	r1, r3
    dfda:	4b29      	ldr	r3, [pc, #164]	; (e080 <usbdc_set_config+0xdc>)
    dfdc:	4798      	blx	r3
    dfde:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    dfe0:	69bb      	ldr	r3, [r7, #24]
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	d101      	bne.n	dfea <usbdc_set_config+0x46>
		return false;
    dfe6:	2300      	movs	r3, #0
    dfe8:	e042      	b.n	e070 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    dfea:	69b8      	ldr	r0, [r7, #24]
    dfec:	4b25      	ldr	r3, [pc, #148]	; (e084 <usbdc_set_config+0xe0>)
    dfee:	4798      	blx	r3
    dff0:	4603      	mov	r3, r0
    dff2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    dff4:	8abb      	ldrh	r3, [r7, #20]
    dff6:	69ba      	ldr	r2, [r7, #24]
    dff8:	4413      	add	r3, r2
    dffa:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    dffc:	693b      	ldr	r3, [r7, #16]
    dffe:	2204      	movs	r2, #4
    e000:	4619      	mov	r1, r3
    e002:	69b8      	ldr	r0, [r7, #24]
    e004:	4b20      	ldr	r3, [pc, #128]	; (e088 <usbdc_set_config+0xe4>)
    e006:	4798      	blx	r3
    e008:	4603      	mov	r3, r0
    e00a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e00c:	e02c      	b.n	e068 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e00e:	68fb      	ldr	r3, [r7, #12]
    e010:	3302      	adds	r3, #2
    e012:	781b      	ldrb	r3, [r3, #0]
    e014:	7dfa      	ldrb	r2, [r7, #23]
    e016:	429a      	cmp	r2, r3
    e018:	d018      	beq.n	e04c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e01a:	68fb      	ldr	r3, [r7, #12]
    e01c:	789b      	ldrb	r3, [r3, #2]
    e01e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e020:	4b16      	ldr	r3, [pc, #88]	; (e07c <usbdc_set_config+0xd8>)
    e022:	691b      	ldr	r3, [r3, #16]
    e024:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e026:	e00c      	b.n	e042 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e028:	69fb      	ldr	r3, [r7, #28]
    e02a:	685b      	ldr	r3, [r3, #4]
    e02c:	f107 020c 	add.w	r2, r7, #12
    e030:	2100      	movs	r1, #0
    e032:	69f8      	ldr	r0, [r7, #28]
    e034:	4798      	blx	r3
    e036:	4603      	mov	r3, r0
    e038:	2b00      	cmp	r3, #0
    e03a:	d006      	beq.n	e04a <usbdc_set_config+0xa6>
					func = func->next;
    e03c:	69fb      	ldr	r3, [r7, #28]
    e03e:	681b      	ldr	r3, [r3, #0]
    e040:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e042:	69fb      	ldr	r3, [r7, #28]
    e044:	2b00      	cmp	r3, #0
    e046:	d1ef      	bne.n	e028 <usbdc_set_config+0x84>
    e048:	e000      	b.n	e04c <usbdc_set_config+0xa8>
				} else {
					break;
    e04a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e04c:	68fb      	ldr	r3, [r7, #12]
    e04e:	4618      	mov	r0, r3
    e050:	4b0e      	ldr	r3, [pc, #56]	; (e08c <usbdc_set_config+0xe8>)
    e052:	4798      	blx	r3
    e054:	4603      	mov	r3, r0
    e056:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e058:	68fb      	ldr	r3, [r7, #12]
    e05a:	6939      	ldr	r1, [r7, #16]
    e05c:	2204      	movs	r2, #4
    e05e:	4618      	mov	r0, r3
    e060:	4b09      	ldr	r3, [pc, #36]	; (e088 <usbdc_set_config+0xe4>)
    e062:	4798      	blx	r3
    e064:	4603      	mov	r3, r0
    e066:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e068:	68fb      	ldr	r3, [r7, #12]
    e06a:	2b00      	cmp	r3, #0
    e06c:	d1cf      	bne.n	e00e <usbdc_set_config+0x6a>
	}
	return true;
    e06e:	2301      	movs	r3, #1
}
    e070:	4618      	mov	r0, r3
    e072:	3720      	adds	r7, #32
    e074:	46bd      	mov	sp, r7
    e076:	bd80      	pop	{r7, pc}
    e078:	0000df71 	.word	0x0000df71
    e07c:	200012a4 	.word	0x200012a4
    e080:	0000e915 	.word	0x0000e915
    e084:	0000dac1 	.word	0x0000dac1
    e088:	0000e855 	.word	0x0000e855
    e08c:	0000da9d 	.word	0x0000da9d

0000e090 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e090:	b580      	push	{r7, lr}
    e092:	b082      	sub	sp, #8
    e094:	af00      	add	r7, sp, #0
    e096:	4603      	mov	r3, r0
    e098:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e09a:	79fb      	ldrb	r3, [r7, #7]
    e09c:	4618      	mov	r0, r3
    e09e:	4b03      	ldr	r3, [pc, #12]	; (e0ac <usbdc_set_address+0x1c>)
    e0a0:	4798      	blx	r3
}
    e0a2:	bf00      	nop
    e0a4:	3708      	adds	r7, #8
    e0a6:	46bd      	mov	sp, r7
    e0a8:	bd80      	pop	{r7, pc}
    e0aa:	bf00      	nop
    e0ac:	00004dd9 	.word	0x00004dd9

0000e0b0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e0b0:	b590      	push	{r4, r7, lr}
    e0b2:	b087      	sub	sp, #28
    e0b4:	af00      	add	r7, sp, #0
    e0b6:	4603      	mov	r3, r0
    e0b8:	460a      	mov	r2, r1
    e0ba:	80fb      	strh	r3, [r7, #6]
    e0bc:	4613      	mov	r3, r2
    e0be:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e0c0:	2300      	movs	r3, #0
    e0c2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e0c4:	693b      	ldr	r3, [r7, #16]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d10b      	bne.n	e0e2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e0ca:	4b43      	ldr	r3, [pc, #268]	; (e1d8 <usbdc_set_interface+0x128>)
    e0cc:	681b      	ldr	r3, [r3, #0]
    e0ce:	6818      	ldr	r0, [r3, #0]
    e0d0:	4b41      	ldr	r3, [pc, #260]	; (e1d8 <usbdc_set_interface+0x128>)
    e0d2:	681b      	ldr	r3, [r3, #0]
    e0d4:	6859      	ldr	r1, [r3, #4]
    e0d6:	4b40      	ldr	r3, [pc, #256]	; (e1d8 <usbdc_set_interface+0x128>)
    e0d8:	7edb      	ldrb	r3, [r3, #27]
    e0da:	461a      	mov	r2, r3
    e0dc:	4b3f      	ldr	r3, [pc, #252]	; (e1dc <usbdc_set_interface+0x12c>)
    e0de:	4798      	blx	r3
    e0e0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e0e2:	693b      	ldr	r3, [r7, #16]
    e0e4:	2b00      	cmp	r3, #0
    e0e6:	d101      	bne.n	e0ec <usbdc_set_interface+0x3c>
		return false;
    e0e8:	2300      	movs	r3, #0
    e0ea:	e071      	b.n	e1d0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e0ec:	693b      	ldr	r3, [r7, #16]
    e0ee:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e0f0:	6938      	ldr	r0, [r7, #16]
    e0f2:	4b3b      	ldr	r3, [pc, #236]	; (e1e0 <usbdc_set_interface+0x130>)
    e0f4:	4798      	blx	r3
    e0f6:	4603      	mov	r3, r0
    e0f8:	461a      	mov	r2, r3
    e0fa:	693b      	ldr	r3, [r7, #16]
    e0fc:	4413      	add	r3, r2
    e0fe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e100:	68bb      	ldr	r3, [r7, #8]
    e102:	68f9      	ldr	r1, [r7, #12]
    e104:	2204      	movs	r2, #4
    e106:	4618      	mov	r0, r3
    e108:	4b36      	ldr	r3, [pc, #216]	; (e1e4 <usbdc_set_interface+0x134>)
    e10a:	4798      	blx	r3
    e10c:	6138      	str	r0, [r7, #16]
    e10e:	693b      	ldr	r3, [r7, #16]
    e110:	2b00      	cmp	r3, #0
    e112:	d113      	bne.n	e13c <usbdc_set_interface+0x8c>
		return false;
    e114:	2300      	movs	r3, #0
    e116:	e05b      	b.n	e1d0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e118:	68bb      	ldr	r3, [r7, #8]
    e11a:	4618      	mov	r0, r3
    e11c:	4b32      	ldr	r3, [pc, #200]	; (e1e8 <usbdc_set_interface+0x138>)
    e11e:	4798      	blx	r3
    e120:	4603      	mov	r3, r0
    e122:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e124:	68bb      	ldr	r3, [r7, #8]
    e126:	68f9      	ldr	r1, [r7, #12]
    e128:	2204      	movs	r2, #4
    e12a:	4618      	mov	r0, r3
    e12c:	4b2d      	ldr	r3, [pc, #180]	; (e1e4 <usbdc_set_interface+0x134>)
    e12e:	4798      	blx	r3
    e130:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e132:	693b      	ldr	r3, [r7, #16]
    e134:	2b00      	cmp	r3, #0
    e136:	d101      	bne.n	e13c <usbdc_set_interface+0x8c>
			return false;
    e138:	2300      	movs	r3, #0
    e13a:	e049      	b.n	e1d0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e13c:	693b      	ldr	r3, [r7, #16]
    e13e:	3302      	adds	r3, #2
    e140:	781b      	ldrb	r3, [r3, #0]
    e142:	b29b      	uxth	r3, r3
    e144:	88ba      	ldrh	r2, [r7, #4]
    e146:	429a      	cmp	r2, r3
    e148:	d1e6      	bne.n	e118 <usbdc_set_interface+0x68>
    e14a:	693b      	ldr	r3, [r7, #16]
    e14c:	3303      	adds	r3, #3
    e14e:	781b      	ldrb	r3, [r3, #0]
    e150:	b29b      	uxth	r3, r3
    e152:	88fa      	ldrh	r2, [r7, #6]
    e154:	429a      	cmp	r2, r3
    e156:	d1df      	bne.n	e118 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e158:	693b      	ldr	r3, [r7, #16]
    e15a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e15c:	4b1e      	ldr	r3, [pc, #120]	; (e1d8 <usbdc_set_interface+0x128>)
    e15e:	691b      	ldr	r3, [r3, #16]
    e160:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e162:	e031      	b.n	e1c8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e164:	697b      	ldr	r3, [r7, #20]
    e166:	685b      	ldr	r3, [r3, #4]
    e168:	f107 0208 	add.w	r2, r7, #8
    e16c:	2101      	movs	r1, #1
    e16e:	6978      	ldr	r0, [r7, #20]
    e170:	4798      	blx	r3
    e172:	4603      	mov	r3, r0
    e174:	2b00      	cmp	r3, #0
    e176:	d003      	beq.n	e180 <usbdc_set_interface+0xd0>
			func = func->next;
    e178:	697b      	ldr	r3, [r7, #20]
    e17a:	681b      	ldr	r3, [r3, #0]
    e17c:	617b      	str	r3, [r7, #20]
    e17e:	e023      	b.n	e1c8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e180:	697b      	ldr	r3, [r7, #20]
    e182:	685b      	ldr	r3, [r3, #4]
    e184:	f107 0208 	add.w	r2, r7, #8
    e188:	2100      	movs	r1, #0
    e18a:	6978      	ldr	r0, [r7, #20]
    e18c:	4798      	blx	r3
    e18e:	4603      	mov	r3, r0
    e190:	2b00      	cmp	r3, #0
    e192:	d117      	bne.n	e1c4 <usbdc_set_interface+0x114>
			if (alt_set) {
    e194:	88fb      	ldrh	r3, [r7, #6]
    e196:	2b00      	cmp	r3, #0
    e198:	d00c      	beq.n	e1b4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e19a:	4b0f      	ldr	r3, [pc, #60]	; (e1d8 <usbdc_set_interface+0x128>)
    e19c:	7f5b      	ldrb	r3, [r3, #29]
    e19e:	b25a      	sxtb	r2, r3
    e1a0:	88bb      	ldrh	r3, [r7, #4]
    e1a2:	2101      	movs	r1, #1
    e1a4:	fa01 f303 	lsl.w	r3, r1, r3
    e1a8:	b25b      	sxtb	r3, r3
    e1aa:	4313      	orrs	r3, r2
    e1ac:	b25b      	sxtb	r3, r3
    e1ae:	b2da      	uxtb	r2, r3
    e1b0:	4b09      	ldr	r3, [pc, #36]	; (e1d8 <usbdc_set_interface+0x128>)
    e1b2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e1b4:	2300      	movs	r3, #0
    e1b6:	2200      	movs	r2, #0
    e1b8:	2100      	movs	r1, #0
    e1ba:	2000      	movs	r0, #0
    e1bc:	4c0b      	ldr	r4, [pc, #44]	; (e1ec <usbdc_set_interface+0x13c>)
    e1be:	47a0      	blx	r4
			return true;
    e1c0:	2301      	movs	r3, #1
    e1c2:	e005      	b.n	e1d0 <usbdc_set_interface+0x120>
		} else {
			return false;
    e1c4:	2300      	movs	r3, #0
    e1c6:	e003      	b.n	e1d0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    e1c8:	697b      	ldr	r3, [r7, #20]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d1ca      	bne.n	e164 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e1ce:	2300      	movs	r3, #0
}
    e1d0:	4618      	mov	r0, r3
    e1d2:	371c      	adds	r7, #28
    e1d4:	46bd      	mov	sp, r7
    e1d6:	bd90      	pop	{r4, r7, pc}
    e1d8:	200012a4 	.word	0x200012a4
    e1dc:	0000e915 	.word	0x0000e915
    e1e0:	0000dac1 	.word	0x0000dac1
    e1e4:	0000e855 	.word	0x0000e855
    e1e8:	0000da9d 	.word	0x0000da9d
    e1ec:	0000e5c5 	.word	0x0000e5c5

0000e1f0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e1f0:	b590      	push	{r4, r7, lr}
    e1f2:	b083      	sub	sp, #12
    e1f4:	af00      	add	r7, sp, #0
    e1f6:	4603      	mov	r3, r0
    e1f8:	6039      	str	r1, [r7, #0]
    e1fa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e1fc:	683b      	ldr	r3, [r7, #0]
    e1fe:	785b      	ldrb	r3, [r3, #1]
    e200:	3b01      	subs	r3, #1
    e202:	2b0a      	cmp	r3, #10
    e204:	d85b      	bhi.n	e2be <usbdc_set_req+0xce>
    e206:	a201      	add	r2, pc, #4	; (adr r2, e20c <usbdc_set_req+0x1c>)
    e208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e20c:	0000e28b 	.word	0x0000e28b
    e210:	0000e2bf 	.word	0x0000e2bf
    e214:	0000e299 	.word	0x0000e299
    e218:	0000e2bf 	.word	0x0000e2bf
    e21c:	0000e239 	.word	0x0000e239
    e220:	0000e2bf 	.word	0x0000e2bf
    e224:	0000e2bf 	.word	0x0000e2bf
    e228:	0000e2bf 	.word	0x0000e2bf
    e22c:	0000e253 	.word	0x0000e253
    e230:	0000e2bf 	.word	0x0000e2bf
    e234:	0000e2a7 	.word	0x0000e2a7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e238:	79f8      	ldrb	r0, [r7, #7]
    e23a:	2301      	movs	r3, #1
    e23c:	2200      	movs	r2, #0
    e23e:	2100      	movs	r1, #0
    e240:	4c21      	ldr	r4, [pc, #132]	; (e2c8 <usbdc_set_req+0xd8>)
    e242:	47a0      	blx	r4
    e244:	4603      	mov	r3, r0
    e246:	2b00      	cmp	r3, #0
    e248:	bf0c      	ite	eq
    e24a:	2301      	moveq	r3, #1
    e24c:	2300      	movne	r3, #0
    e24e:	b2db      	uxtb	r3, r3
    e250:	e036      	b.n	e2c0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e252:	683b      	ldr	r3, [r7, #0]
    e254:	885b      	ldrh	r3, [r3, #2]
    e256:	b29b      	uxth	r3, r3
    e258:	b2db      	uxtb	r3, r3
    e25a:	4618      	mov	r0, r3
    e25c:	4b1b      	ldr	r3, [pc, #108]	; (e2cc <usbdc_set_req+0xdc>)
    e25e:	4798      	blx	r3
    e260:	4603      	mov	r3, r0
    e262:	f083 0301 	eor.w	r3, r3, #1
    e266:	b2db      	uxtb	r3, r3
    e268:	2b00      	cmp	r3, #0
    e26a:	d001      	beq.n	e270 <usbdc_set_req+0x80>
			return false;
    e26c:	2300      	movs	r3, #0
    e26e:	e027      	b.n	e2c0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e270:	79f8      	ldrb	r0, [r7, #7]
    e272:	2301      	movs	r3, #1
    e274:	2200      	movs	r2, #0
    e276:	2100      	movs	r1, #0
    e278:	4c13      	ldr	r4, [pc, #76]	; (e2c8 <usbdc_set_req+0xd8>)
    e27a:	47a0      	blx	r4
    e27c:	4603      	mov	r3, r0
    e27e:	2b00      	cmp	r3, #0
    e280:	bf0c      	ite	eq
    e282:	2301      	moveq	r3, #1
    e284:	2300      	movne	r3, #0
    e286:	b2db      	uxtb	r3, r3
    e288:	e01a      	b.n	e2c0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e28a:	79fb      	ldrb	r3, [r7, #7]
    e28c:	6839      	ldr	r1, [r7, #0]
    e28e:	4618      	mov	r0, r3
    e290:	4b0f      	ldr	r3, [pc, #60]	; (e2d0 <usbdc_set_req+0xe0>)
    e292:	4798      	blx	r3
    e294:	4603      	mov	r3, r0
    e296:	e013      	b.n	e2c0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e298:	79fb      	ldrb	r3, [r7, #7]
    e29a:	6839      	ldr	r1, [r7, #0]
    e29c:	4618      	mov	r0, r3
    e29e:	4b0d      	ldr	r3, [pc, #52]	; (e2d4 <usbdc_set_req+0xe4>)
    e2a0:	4798      	blx	r3
    e2a2:	4603      	mov	r3, r0
    e2a4:	e00c      	b.n	e2c0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e2a6:	683b      	ldr	r3, [r7, #0]
    e2a8:	885b      	ldrh	r3, [r3, #2]
    e2aa:	b29a      	uxth	r2, r3
    e2ac:	683b      	ldr	r3, [r7, #0]
    e2ae:	889b      	ldrh	r3, [r3, #4]
    e2b0:	b29b      	uxth	r3, r3
    e2b2:	4619      	mov	r1, r3
    e2b4:	4610      	mov	r0, r2
    e2b6:	4b08      	ldr	r3, [pc, #32]	; (e2d8 <usbdc_set_req+0xe8>)
    e2b8:	4798      	blx	r3
    e2ba:	4603      	mov	r3, r0
    e2bc:	e000      	b.n	e2c0 <usbdc_set_req+0xd0>
	default:
		return false;
    e2be:	2300      	movs	r3, #0
	}
}
    e2c0:	4618      	mov	r0, r3
    e2c2:	370c      	adds	r7, #12
    e2c4:	46bd      	mov	sp, r7
    e2c6:	bd90      	pop	{r4, r7, pc}
    e2c8:	0000e5c5 	.word	0x0000e5c5
    e2cc:	0000dfa5 	.word	0x0000dfa5
    e2d0:	0000dec1 	.word	0x0000dec1
    e2d4:	0000df19 	.word	0x0000df19
    e2d8:	0000e0b1 	.word	0x0000e0b1

0000e2dc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e2dc:	b580      	push	{r7, lr}
    e2de:	b082      	sub	sp, #8
    e2e0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e2e2:	4b0a      	ldr	r3, [pc, #40]	; (e30c <usbdc_sof_notify+0x30>)
    e2e4:	685b      	ldr	r3, [r3, #4]
    e2e6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e2e8:	e009      	b.n	e2fe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e2ea:	687b      	ldr	r3, [r7, #4]
    e2ec:	685b      	ldr	r3, [r3, #4]
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d002      	beq.n	e2f8 <usbdc_sof_notify+0x1c>
			sof->cb();
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	685b      	ldr	r3, [r3, #4]
    e2f6:	4798      	blx	r3
		}
		sof = sof->next;
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	681b      	ldr	r3, [r3, #0]
    e2fc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e2fe:	687b      	ldr	r3, [r7, #4]
    e300:	2b00      	cmp	r3, #0
    e302:	d1f2      	bne.n	e2ea <usbdc_sof_notify+0xe>
	}
}
    e304:	bf00      	nop
    e306:	3708      	adds	r7, #8
    e308:	46bd      	mov	sp, r7
    e30a:	bd80      	pop	{r7, pc}
    e30c:	200012a4 	.word	0x200012a4

0000e310 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e310:	b580      	push	{r7, lr}
    e312:	b084      	sub	sp, #16
    e314:	af00      	add	r7, sp, #0
    e316:	4603      	mov	r3, r0
    e318:	6039      	str	r1, [r7, #0]
    e31a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e31c:	4b0b      	ldr	r3, [pc, #44]	; (e34c <usbdc_change_notify+0x3c>)
    e31e:	68db      	ldr	r3, [r3, #12]
    e320:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e322:	e00c      	b.n	e33e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e324:	68fb      	ldr	r3, [r7, #12]
    e326:	685b      	ldr	r3, [r3, #4]
    e328:	2b00      	cmp	r3, #0
    e32a:	d005      	beq.n	e338 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e32c:	68fb      	ldr	r3, [r7, #12]
    e32e:	685b      	ldr	r3, [r3, #4]
    e330:	79fa      	ldrb	r2, [r7, #7]
    e332:	6839      	ldr	r1, [r7, #0]
    e334:	4610      	mov	r0, r2
    e336:	4798      	blx	r3
		}
		cg = cg->next;
    e338:	68fb      	ldr	r3, [r7, #12]
    e33a:	681b      	ldr	r3, [r3, #0]
    e33c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e33e:	68fb      	ldr	r3, [r7, #12]
    e340:	2b00      	cmp	r3, #0
    e342:	d1ef      	bne.n	e324 <usbdc_change_notify+0x14>
	}
}
    e344:	bf00      	nop
    e346:	3710      	adds	r7, #16
    e348:	46bd      	mov	sp, r7
    e34a:	bd80      	pop	{r7, pc}
    e34c:	200012a4 	.word	0x200012a4

0000e350 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e350:	b580      	push	{r7, lr}
    e352:	b084      	sub	sp, #16
    e354:	af00      	add	r7, sp, #0
    e356:	4603      	mov	r3, r0
    e358:	6039      	str	r1, [r7, #0]
    e35a:	71fb      	strb	r3, [r7, #7]
    e35c:	4613      	mov	r3, r2
    e35e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e360:	4b12      	ldr	r3, [pc, #72]	; (e3ac <usbdc_request_handler+0x5c>)
    e362:	689b      	ldr	r3, [r3, #8]
    e364:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e366:	e019      	b.n	e39c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e368:	68fb      	ldr	r3, [r7, #12]
    e36a:	685b      	ldr	r3, [r3, #4]
    e36c:	2b00      	cmp	r3, #0
    e36e:	d012      	beq.n	e396 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e370:	68fb      	ldr	r3, [r7, #12]
    e372:	685b      	ldr	r3, [r3, #4]
    e374:	79ba      	ldrb	r2, [r7, #6]
    e376:	79f8      	ldrb	r0, [r7, #7]
    e378:	6839      	ldr	r1, [r7, #0]
    e37a:	4798      	blx	r3
    e37c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e37e:	68bb      	ldr	r3, [r7, #8]
    e380:	2b00      	cmp	r3, #0
    e382:	d101      	bne.n	e388 <usbdc_request_handler+0x38>
				return true;
    e384:	2301      	movs	r3, #1
    e386:	e00d      	b.n	e3a4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e388:	68bb      	ldr	r3, [r7, #8]
    e38a:	f113 0f0a 	cmn.w	r3, #10
    e38e:	d002      	beq.n	e396 <usbdc_request_handler+0x46>
				return -1;
    e390:	f04f 33ff 	mov.w	r3, #4294967295
    e394:	e006      	b.n	e3a4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e396:	68fb      	ldr	r3, [r7, #12]
    e398:	681b      	ldr	r3, [r3, #0]
    e39a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e39c:	68fb      	ldr	r3, [r7, #12]
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d1e2      	bne.n	e368 <usbdc_request_handler+0x18>
	}
	return false;
    e3a2:	2300      	movs	r3, #0
}
    e3a4:	4618      	mov	r0, r3
    e3a6:	3710      	adds	r7, #16
    e3a8:	46bd      	mov	sp, r7
    e3aa:	bd80      	pop	{r7, pc}
    e3ac:	200012a4 	.word	0x200012a4

0000e3b0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e3b0:	b580      	push	{r7, lr}
    e3b2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e3b4:	4b01      	ldr	r3, [pc, #4]	; (e3bc <usbd_sof_cb+0xc>)
    e3b6:	4798      	blx	r3
}
    e3b8:	bf00      	nop
    e3ba:	bd80      	pop	{r7, pc}
    e3bc:	0000e2dd 	.word	0x0000e2dd

0000e3c0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b082      	sub	sp, #8
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	4603      	mov	r3, r0
    e3c8:	6039      	str	r1, [r7, #0]
    e3ca:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e3cc:	79fb      	ldrb	r3, [r7, #7]
    e3ce:	2200      	movs	r2, #0
    e3d0:	6839      	ldr	r1, [r7, #0]
    e3d2:	4618      	mov	r0, r3
    e3d4:	4b14      	ldr	r3, [pc, #80]	; (e428 <usbdc_cb_ctl_req+0x68>)
    e3d6:	4798      	blx	r3
    e3d8:	4603      	mov	r3, r0
    e3da:	f1b3 3fff 	cmp.w	r3, #4294967295
    e3de:	d00b      	beq.n	e3f8 <usbdc_cb_ctl_req+0x38>
    e3e0:	2b01      	cmp	r3, #1
    e3e2:	d007      	beq.n	e3f4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e3e4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e3e6:	683b      	ldr	r3, [r7, #0]
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	d007      	beq.n	e402 <usbdc_cb_ctl_req+0x42>
    e3f2:	e003      	b.n	e3fc <usbdc_cb_ctl_req+0x3c>
		return true;
    e3f4:	2301      	movs	r3, #1
    e3f6:	e013      	b.n	e420 <usbdc_cb_ctl_req+0x60>
		return false;
    e3f8:	2300      	movs	r3, #0
    e3fa:	e011      	b.n	e420 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e3fc:	2b80      	cmp	r3, #128	; 0x80
    e3fe:	d007      	beq.n	e410 <usbdc_cb_ctl_req+0x50>
    e400:	e00d      	b.n	e41e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e402:	79fb      	ldrb	r3, [r7, #7]
    e404:	6839      	ldr	r1, [r7, #0]
    e406:	4618      	mov	r0, r3
    e408:	4b08      	ldr	r3, [pc, #32]	; (e42c <usbdc_cb_ctl_req+0x6c>)
    e40a:	4798      	blx	r3
    e40c:	4603      	mov	r3, r0
    e40e:	e007      	b.n	e420 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e410:	79fb      	ldrb	r3, [r7, #7]
    e412:	6839      	ldr	r1, [r7, #0]
    e414:	4618      	mov	r0, r3
    e416:	4b06      	ldr	r3, [pc, #24]	; (e430 <usbdc_cb_ctl_req+0x70>)
    e418:	4798      	blx	r3
    e41a:	4603      	mov	r3, r0
    e41c:	e000      	b.n	e420 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    e41e:	2300      	movs	r3, #0
	}
}
    e420:	4618      	mov	r0, r3
    e422:	3708      	adds	r7, #8
    e424:	46bd      	mov	sp, r7
    e426:	bd80      	pop	{r7, pc}
    e428:	0000e351 	.word	0x0000e351
    e42c:	0000e1f1 	.word	0x0000e1f1
    e430:	0000de19 	.word	0x0000de19

0000e434 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    e434:	b580      	push	{r7, lr}
    e436:	b082      	sub	sp, #8
    e438:	af00      	add	r7, sp, #0
    e43a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	781b      	ldrb	r3, [r3, #0]
    e440:	2b00      	cmp	r3, #0
    e442:	d135      	bne.n	e4b0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	785b      	ldrb	r3, [r3, #1]
    e448:	2b05      	cmp	r3, #5
    e44a:	d019      	beq.n	e480 <usbdc_ctrl_status_end+0x4c>
    e44c:	2b09      	cmp	r3, #9
    e44e:	d000      	beq.n	e452 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    e450:	e02f      	b.n	e4b2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    e452:	687b      	ldr	r3, [r7, #4]
    e454:	885b      	ldrh	r3, [r3, #2]
    e456:	b29b      	uxth	r3, r3
    e458:	b2da      	uxtb	r2, r3
    e45a:	4b17      	ldr	r3, [pc, #92]	; (e4b8 <usbdc_ctrl_status_end+0x84>)
    e45c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    e45e:	687b      	ldr	r3, [r7, #4]
    e460:	885b      	ldrh	r3, [r3, #2]
    e462:	b29b      	uxth	r3, r3
    e464:	2b00      	cmp	r3, #0
    e466:	d001      	beq.n	e46c <usbdc_ctrl_status_end+0x38>
    e468:	2204      	movs	r2, #4
    e46a:	e000      	b.n	e46e <usbdc_ctrl_status_end+0x3a>
    e46c:	2203      	movs	r2, #3
    e46e:	4b12      	ldr	r3, [pc, #72]	; (e4b8 <usbdc_ctrl_status_end+0x84>)
    e470:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e472:	4b11      	ldr	r3, [pc, #68]	; (e4b8 <usbdc_ctrl_status_end+0x84>)
    e474:	7e9b      	ldrb	r3, [r3, #26]
    e476:	4619      	mov	r1, r3
    e478:	2001      	movs	r0, #1
    e47a:	4b10      	ldr	r3, [pc, #64]	; (e4bc <usbdc_ctrl_status_end+0x88>)
    e47c:	4798      	blx	r3
		break;
    e47e:	e018      	b.n	e4b2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    e480:	687b      	ldr	r3, [r7, #4]
    e482:	885b      	ldrh	r3, [r3, #2]
    e484:	b29b      	uxth	r3, r3
    e486:	b2db      	uxtb	r3, r3
    e488:	4618      	mov	r0, r3
    e48a:	4b0d      	ldr	r3, [pc, #52]	; (e4c0 <usbdc_ctrl_status_end+0x8c>)
    e48c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    e48e:	687b      	ldr	r3, [r7, #4]
    e490:	885b      	ldrh	r3, [r3, #2]
    e492:	b29b      	uxth	r3, r3
    e494:	2b00      	cmp	r3, #0
    e496:	d001      	beq.n	e49c <usbdc_ctrl_status_end+0x68>
    e498:	2203      	movs	r2, #3
    e49a:	e000      	b.n	e49e <usbdc_ctrl_status_end+0x6a>
    e49c:	2202      	movs	r2, #2
    e49e:	4b06      	ldr	r3, [pc, #24]	; (e4b8 <usbdc_ctrl_status_end+0x84>)
    e4a0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e4a2:	4b05      	ldr	r3, [pc, #20]	; (e4b8 <usbdc_ctrl_status_end+0x84>)
    e4a4:	7e9b      	ldrb	r3, [r3, #26]
    e4a6:	4619      	mov	r1, r3
    e4a8:	2001      	movs	r0, #1
    e4aa:	4b04      	ldr	r3, [pc, #16]	; (e4bc <usbdc_ctrl_status_end+0x88>)
    e4ac:	4798      	blx	r3
		break;
    e4ae:	e000      	b.n	e4b2 <usbdc_ctrl_status_end+0x7e>
		return;
    e4b0:	bf00      	nop
	}
}
    e4b2:	3708      	adds	r7, #8
    e4b4:	46bd      	mov	sp, r7
    e4b6:	bd80      	pop	{r7, pc}
    e4b8:	200012a4 	.word	0x200012a4
    e4bc:	0000e311 	.word	0x0000e311
    e4c0:	0000e091 	.word	0x0000e091

0000e4c4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    e4c4:	b580      	push	{r7, lr}
    e4c6:	b082      	sub	sp, #8
    e4c8:	af00      	add	r7, sp, #0
    e4ca:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    e4cc:	2201      	movs	r2, #1
    e4ce:	6879      	ldr	r1, [r7, #4]
    e4d0:	2000      	movs	r0, #0
    e4d2:	4b03      	ldr	r3, [pc, #12]	; (e4e0 <usbdc_ctrl_data_end+0x1c>)
    e4d4:	4798      	blx	r3
	return false;
    e4d6:	2300      	movs	r3, #0
}
    e4d8:	4618      	mov	r0, r3
    e4da:	3708      	adds	r7, #8
    e4dc:	46bd      	mov	sp, r7
    e4de:	bd80      	pop	{r7, pc}
    e4e0:	0000e351 	.word	0x0000e351

0000e4e4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    e4e4:	b580      	push	{r7, lr}
    e4e6:	b082      	sub	sp, #8
    e4e8:	af00      	add	r7, sp, #0
    e4ea:	4603      	mov	r3, r0
    e4ec:	603a      	str	r2, [r7, #0]
    e4ee:	71fb      	strb	r3, [r7, #7]
    e4f0:	460b      	mov	r3, r1
    e4f2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    e4f4:	79bb      	ldrb	r3, [r7, #6]
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d002      	beq.n	e500 <usbdc_cb_ctl_done+0x1c>
    e4fa:	2b01      	cmp	r3, #1
    e4fc:	d004      	beq.n	e508 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    e4fe:	e008      	b.n	e512 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    e500:	6838      	ldr	r0, [r7, #0]
    e502:	4b06      	ldr	r3, [pc, #24]	; (e51c <usbdc_cb_ctl_done+0x38>)
    e504:	4798      	blx	r3
		break;
    e506:	e004      	b.n	e512 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    e508:	6838      	ldr	r0, [r7, #0]
    e50a:	4b05      	ldr	r3, [pc, #20]	; (e520 <usbdc_cb_ctl_done+0x3c>)
    e50c:	4798      	blx	r3
    e50e:	4603      	mov	r3, r0
    e510:	e000      	b.n	e514 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    e512:	2300      	movs	r3, #0
}
    e514:	4618      	mov	r0, r3
    e516:	3708      	adds	r7, #8
    e518:	46bd      	mov	sp, r7
    e51a:	bd80      	pop	{r7, pc}
    e51c:	0000e435 	.word	0x0000e435
    e520:	0000e4c5 	.word	0x0000e4c5

0000e524 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    e524:	b580      	push	{r7, lr}
    e526:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    e528:	4b10      	ldr	r3, [pc, #64]	; (e56c <usbdc_reset+0x48>)
    e52a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    e52c:	4b10      	ldr	r3, [pc, #64]	; (e570 <usbdc_reset+0x4c>)
    e52e:	2202      	movs	r2, #2
    e530:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    e532:	4b0f      	ldr	r3, [pc, #60]	; (e570 <usbdc_reset+0x4c>)
    e534:	2200      	movs	r2, #0
    e536:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    e538:	4b0d      	ldr	r3, [pc, #52]	; (e570 <usbdc_reset+0x4c>)
    e53a:	2200      	movs	r2, #0
    e53c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    e53e:	2000      	movs	r0, #0
    e540:	4b0c      	ldr	r3, [pc, #48]	; (e574 <usbdc_reset+0x50>)
    e542:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    e544:	4b0a      	ldr	r3, [pc, #40]	; (e570 <usbdc_reset+0x4c>)
    e546:	7f1b      	ldrb	r3, [r3, #28]
    e548:	4618      	mov	r0, r3
    e54a:	4b0b      	ldr	r3, [pc, #44]	; (e578 <usbdc_reset+0x54>)
    e54c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    e54e:	4a0b      	ldr	r2, [pc, #44]	; (e57c <usbdc_reset+0x58>)
    e550:	2100      	movs	r1, #0
    e552:	2000      	movs	r0, #0
    e554:	4b0a      	ldr	r3, [pc, #40]	; (e580 <usbdc_reset+0x5c>)
    e556:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    e558:	4a0a      	ldr	r2, [pc, #40]	; (e584 <usbdc_reset+0x60>)
    e55a:	2102      	movs	r1, #2
    e55c:	2000      	movs	r0, #0
    e55e:	4b08      	ldr	r3, [pc, #32]	; (e580 <usbdc_reset+0x5c>)
    e560:	4798      	blx	r3
	usb_d_ep_enable(0);
    e562:	2000      	movs	r0, #0
    e564:	4b08      	ldr	r3, [pc, #32]	; (e588 <usbdc_reset+0x64>)
    e566:	4798      	blx	r3
}
    e568:	bf00      	nop
    e56a:	bd80      	pop	{r7, pc}
    e56c:	0000df71 	.word	0x0000df71
    e570:	200012a4 	.word	0x200012a4
    e574:	00004ebd 	.word	0x00004ebd
    e578:	00004df9 	.word	0x00004df9
    e57c:	0000e3c1 	.word	0x0000e3c1
    e580:	000051bd 	.word	0x000051bd
    e584:	0000e4e5 	.word	0x0000e4e5
    e588:	00004f0d 	.word	0x00004f0d

0000e58c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    e58c:	b580      	push	{r7, lr}
    e58e:	b082      	sub	sp, #8
    e590:	af00      	add	r7, sp, #0
    e592:	4603      	mov	r3, r0
    e594:	6039      	str	r1, [r7, #0]
    e596:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    e598:	79fb      	ldrb	r3, [r7, #7]
    e59a:	2b00      	cmp	r3, #0
    e59c:	d002      	beq.n	e5a4 <usbd_event_cb+0x18>
    e59e:	2b01      	cmp	r3, #1
    e5a0:	d005      	beq.n	e5ae <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    e5a2:	e007      	b.n	e5b4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    e5a4:	6839      	ldr	r1, [r7, #0]
    e5a6:	2000      	movs	r0, #0
    e5a8:	4b04      	ldr	r3, [pc, #16]	; (e5bc <usbd_event_cb+0x30>)
    e5aa:	4798      	blx	r3
		break;
    e5ac:	e002      	b.n	e5b4 <usbd_event_cb+0x28>
		usbdc_reset();
    e5ae:	4b04      	ldr	r3, [pc, #16]	; (e5c0 <usbd_event_cb+0x34>)
    e5b0:	4798      	blx	r3
		break;
    e5b2:	bf00      	nop
	}
}
    e5b4:	bf00      	nop
    e5b6:	3708      	adds	r7, #8
    e5b8:	46bd      	mov	sp, r7
    e5ba:	bd80      	pop	{r7, pc}
    e5bc:	0000e311 	.word	0x0000e311
    e5c0:	0000e525 	.word	0x0000e525

0000e5c4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    e5c4:	b580      	push	{r7, lr}
    e5c6:	b088      	sub	sp, #32
    e5c8:	af00      	add	r7, sp, #0
    e5ca:	60b9      	str	r1, [r7, #8]
    e5cc:	607a      	str	r2, [r7, #4]
    e5ce:	461a      	mov	r2, r3
    e5d0:	4603      	mov	r3, r0
    e5d2:	73fb      	strb	r3, [r7, #15]
    e5d4:	4613      	mov	r3, r2
    e5d6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    e5d8:	68bb      	ldr	r3, [r7, #8]
    e5da:	617b      	str	r3, [r7, #20]
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	61bb      	str	r3, [r7, #24]
    e5e0:	7bfb      	ldrb	r3, [r7, #15]
    e5e2:	773b      	strb	r3, [r7, #28]
    e5e4:	7bbb      	ldrb	r3, [r7, #14]
    e5e6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    e5e8:	f107 0314 	add.w	r3, r7, #20
    e5ec:	4618      	mov	r0, r3
    e5ee:	4b03      	ldr	r3, [pc, #12]	; (e5fc <usbdc_xfer+0x38>)
    e5f0:	4798      	blx	r3
    e5f2:	4603      	mov	r3, r0
}
    e5f4:	4618      	mov	r0, r3
    e5f6:	3720      	adds	r7, #32
    e5f8:	46bd      	mov	sp, r7
    e5fa:	bd80      	pop	{r7, pc}
    e5fc:	00004f7d 	.word	0x00004f7d

0000e600 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    e600:	b580      	push	{r7, lr}
    e602:	b082      	sub	sp, #8
    e604:	af00      	add	r7, sp, #0
    e606:	4603      	mov	r3, r0
    e608:	6039      	str	r1, [r7, #0]
    e60a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    e60c:	79fb      	ldrb	r3, [r7, #7]
    e60e:	2b01      	cmp	r3, #1
    e610:	d009      	beq.n	e626 <usbdc_register_handler+0x26>
    e612:	2b02      	cmp	r3, #2
    e614:	d00c      	beq.n	e630 <usbdc_register_handler+0x30>
    e616:	2b00      	cmp	r3, #0
    e618:	d000      	beq.n	e61c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    e61a:	e00e      	b.n	e63a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    e61c:	6839      	ldr	r1, [r7, #0]
    e61e:	4809      	ldr	r0, [pc, #36]	; (e644 <usbdc_register_handler+0x44>)
    e620:	4b09      	ldr	r3, [pc, #36]	; (e648 <usbdc_register_handler+0x48>)
    e622:	4798      	blx	r3
		break;
    e624:	e009      	b.n	e63a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    e626:	6839      	ldr	r1, [r7, #0]
    e628:	4808      	ldr	r0, [pc, #32]	; (e64c <usbdc_register_handler+0x4c>)
    e62a:	4b07      	ldr	r3, [pc, #28]	; (e648 <usbdc_register_handler+0x48>)
    e62c:	4798      	blx	r3
		break;
    e62e:	e004      	b.n	e63a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    e630:	6839      	ldr	r1, [r7, #0]
    e632:	4807      	ldr	r0, [pc, #28]	; (e650 <usbdc_register_handler+0x50>)
    e634:	4b04      	ldr	r3, [pc, #16]	; (e648 <usbdc_register_handler+0x48>)
    e636:	4798      	blx	r3
		break;
    e638:	bf00      	nop
	}
}
    e63a:	bf00      	nop
    e63c:	3708      	adds	r7, #8
    e63e:	46bd      	mov	sp, r7
    e640:	bd80      	pop	{r7, pc}
    e642:	bf00      	nop
    e644:	200012a8 	.word	0x200012a8
    e648:	00005315 	.word	0x00005315
    e64c:	200012ac 	.word	0x200012ac
    e650:	200012b0 	.word	0x200012b0

0000e654 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    e654:	b580      	push	{r7, lr}
    e656:	b084      	sub	sp, #16
    e658:	af00      	add	r7, sp, #0
    e65a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    e65c:	687b      	ldr	r3, [r7, #4]
    e65e:	2b00      	cmp	r3, #0
    e660:	bf14      	ite	ne
    e662:	2301      	movne	r3, #1
    e664:	2300      	moveq	r3, #0
    e666:	b2db      	uxtb	r3, r3
    e668:	f240 3255 	movw	r2, #853	; 0x355
    e66c:	4910      	ldr	r1, [pc, #64]	; (e6b0 <usbdc_init+0x5c>)
    e66e:	4618      	mov	r0, r3
    e670:	4b10      	ldr	r3, [pc, #64]	; (e6b4 <usbdc_init+0x60>)
    e672:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    e674:	4b10      	ldr	r3, [pc, #64]	; (e6b8 <usbdc_init+0x64>)
    e676:	4798      	blx	r3
    e678:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    e67a:	68fb      	ldr	r3, [r7, #12]
    e67c:	2b00      	cmp	r3, #0
    e67e:	da01      	bge.n	e684 <usbdc_init+0x30>
		return rc;
    e680:	68fb      	ldr	r3, [r7, #12]
    e682:	e010      	b.n	e6a6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    e684:	2220      	movs	r2, #32
    e686:	2100      	movs	r1, #0
    e688:	480c      	ldr	r0, [pc, #48]	; (e6bc <usbdc_init+0x68>)
    e68a:	4b0d      	ldr	r3, [pc, #52]	; (e6c0 <usbdc_init+0x6c>)
    e68c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    e68e:	4a0b      	ldr	r2, [pc, #44]	; (e6bc <usbdc_init+0x68>)
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    e694:	490b      	ldr	r1, [pc, #44]	; (e6c4 <usbdc_init+0x70>)
    e696:	2000      	movs	r0, #0
    e698:	4b0b      	ldr	r3, [pc, #44]	; (e6c8 <usbdc_init+0x74>)
    e69a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    e69c:	490b      	ldr	r1, [pc, #44]	; (e6cc <usbdc_init+0x78>)
    e69e:	2001      	movs	r0, #1
    e6a0:	4b09      	ldr	r3, [pc, #36]	; (e6c8 <usbdc_init+0x74>)
    e6a2:	4798      	blx	r3

	return 0;
    e6a4:	2300      	movs	r3, #0
}
    e6a6:	4618      	mov	r0, r3
    e6a8:	3710      	adds	r7, #16
    e6aa:	46bd      	mov	sp, r7
    e6ac:	bd80      	pop	{r7, pc}
    e6ae:	bf00      	nop
    e6b0:	00011520 	.word	0x00011520
    e6b4:	00005239 	.word	0x00005239
    e6b8:	00004ce5 	.word	0x00004ce5
    e6bc:	200012a4 	.word	0x200012a4
    e6c0:	00010e5d 	.word	0x00010e5d
    e6c4:	0000e3b1 	.word	0x0000e3b1
    e6c8:	00004d91 	.word	0x00004d91
    e6cc:	0000e58d 	.word	0x0000e58d

0000e6d0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    e6d0:	b580      	push	{r7, lr}
    e6d2:	b082      	sub	sp, #8
    e6d4:	af00      	add	r7, sp, #0
    e6d6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    e6d8:	6879      	ldr	r1, [r7, #4]
    e6da:	4803      	ldr	r0, [pc, #12]	; (e6e8 <usbdc_register_function+0x18>)
    e6dc:	4b03      	ldr	r3, [pc, #12]	; (e6ec <usbdc_register_function+0x1c>)
    e6de:	4798      	blx	r3
}
    e6e0:	bf00      	nop
    e6e2:	3708      	adds	r7, #8
    e6e4:	46bd      	mov	sp, r7
    e6e6:	bd80      	pop	{r7, pc}
    e6e8:	200012b4 	.word	0x200012b4
    e6ec:	00005315 	.word	0x00005315

0000e6f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    e6f0:	b580      	push	{r7, lr}
    e6f2:	b082      	sub	sp, #8
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    e6f8:	4b0f      	ldr	r3, [pc, #60]	; (e738 <usbdc_start+0x48>)
    e6fa:	7e9b      	ldrb	r3, [r3, #26]
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d002      	beq.n	e706 <usbdc_start+0x16>
		return ERR_BUSY;
    e700:	f06f 0303 	mvn.w	r3, #3
    e704:	e013      	b.n	e72e <usbdc_start+0x3e>
	}

	if (desces) {
    e706:	687b      	ldr	r3, [r7, #4]
    e708:	2b00      	cmp	r3, #0
    e70a:	d00e      	beq.n	e72a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    e70c:	4a0a      	ldr	r2, [pc, #40]	; (e738 <usbdc_start+0x48>)
    e70e:	687b      	ldr	r3, [r7, #4]
    e710:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    e712:	687b      	ldr	r3, [r7, #4]
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	79da      	ldrb	r2, [r3, #7]
    e718:	4b07      	ldr	r3, [pc, #28]	; (e738 <usbdc_start+0x48>)
    e71a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    e71c:	4b06      	ldr	r3, [pc, #24]	; (e738 <usbdc_start+0x48>)
    e71e:	2201      	movs	r2, #1
    e720:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    e722:	4b06      	ldr	r3, [pc, #24]	; (e73c <usbdc_start+0x4c>)
    e724:	4798      	blx	r3
	return ERR_NONE;
    e726:	2300      	movs	r3, #0
    e728:	e001      	b.n	e72e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    e72a:	f06f 0308 	mvn.w	r3, #8
}
    e72e:	4618      	mov	r0, r3
    e730:	3708      	adds	r7, #8
    e732:	46bd      	mov	sp, r7
    e734:	bd80      	pop	{r7, pc}
    e736:	bf00      	nop
    e738:	200012a4 	.word	0x200012a4
    e73c:	00004db5 	.word	0x00004db5

0000e740 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    e740:	b580      	push	{r7, lr}
    e742:	af00      	add	r7, sp, #0
	usb_d_attach();
    e744:	4b01      	ldr	r3, [pc, #4]	; (e74c <usbdc_attach+0xc>)
    e746:	4798      	blx	r3
}
    e748:	bf00      	nop
    e74a:	bd80      	pop	{r7, pc}
    e74c:	00004dc9 	.word	0x00004dc9

0000e750 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    e750:	b480      	push	{r7}
    e752:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    e754:	4b03      	ldr	r3, [pc, #12]	; (e764 <usbdc_get_ctrl_buffer+0x14>)
    e756:	695b      	ldr	r3, [r3, #20]
}
    e758:	4618      	mov	r0, r3
    e75a:	46bd      	mov	sp, r7
    e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e760:	4770      	bx	lr
    e762:	bf00      	nop
    e764:	200012a4 	.word	0x200012a4

0000e768 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    e768:	b480      	push	{r7}
    e76a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    e76c:	4b07      	ldr	r3, [pc, #28]	; (e78c <usbdc_get_state+0x24>)
    e76e:	7e9b      	ldrb	r3, [r3, #26]
    e770:	f003 0310 	and.w	r3, r3, #16
    e774:	2b00      	cmp	r3, #0
    e776:	d001      	beq.n	e77c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    e778:	2310      	movs	r3, #16
    e77a:	e001      	b.n	e780 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    e77c:	4b03      	ldr	r3, [pc, #12]	; (e78c <usbdc_get_state+0x24>)
    e77e:	7e9b      	ldrb	r3, [r3, #26]
}
    e780:	4618      	mov	r0, r3
    e782:	46bd      	mov	sp, r7
    e784:	f85d 7b04 	ldr.w	r7, [sp], #4
    e788:	4770      	bx	lr
    e78a:	bf00      	nop
    e78c:	200012a4 	.word	0x200012a4

0000e790 <usb_get_u16>:
{
    e790:	b480      	push	{r7}
    e792:	b083      	sub	sp, #12
    e794:	af00      	add	r7, sp, #0
    e796:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	781b      	ldrb	r3, [r3, #0]
    e79c:	b29a      	uxth	r2, r3
    e79e:	687b      	ldr	r3, [r7, #4]
    e7a0:	3301      	adds	r3, #1
    e7a2:	781b      	ldrb	r3, [r3, #0]
    e7a4:	b29b      	uxth	r3, r3
    e7a6:	021b      	lsls	r3, r3, #8
    e7a8:	b29b      	uxth	r3, r3
    e7aa:	4413      	add	r3, r2
    e7ac:	b29b      	uxth	r3, r3
}
    e7ae:	4618      	mov	r0, r3
    e7b0:	370c      	adds	r7, #12
    e7b2:	46bd      	mov	sp, r7
    e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e7b8:	4770      	bx	lr

0000e7ba <usb_desc_len>:
{
    e7ba:	b480      	push	{r7}
    e7bc:	b083      	sub	sp, #12
    e7be:	af00      	add	r7, sp, #0
    e7c0:	6078      	str	r0, [r7, #4]
	return desc[0];
    e7c2:	687b      	ldr	r3, [r7, #4]
    e7c4:	781b      	ldrb	r3, [r3, #0]
}
    e7c6:	4618      	mov	r0, r3
    e7c8:	370c      	adds	r7, #12
    e7ca:	46bd      	mov	sp, r7
    e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e7d0:	4770      	bx	lr

0000e7d2 <usb_desc_type>:
{
    e7d2:	b480      	push	{r7}
    e7d4:	b083      	sub	sp, #12
    e7d6:	af00      	add	r7, sp, #0
    e7d8:	6078      	str	r0, [r7, #4]
	return desc[1];
    e7da:	687b      	ldr	r3, [r7, #4]
    e7dc:	3301      	adds	r3, #1
    e7de:	781b      	ldrb	r3, [r3, #0]
}
    e7e0:	4618      	mov	r0, r3
    e7e2:	370c      	adds	r7, #12
    e7e4:	46bd      	mov	sp, r7
    e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e7ea:	4770      	bx	lr

0000e7ec <usb_desc_next>:
{
    e7ec:	b580      	push	{r7, lr}
    e7ee:	b082      	sub	sp, #8
    e7f0:	af00      	add	r7, sp, #0
    e7f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e7f4:	6878      	ldr	r0, [r7, #4]
    e7f6:	4b05      	ldr	r3, [pc, #20]	; (e80c <usb_desc_next+0x20>)
    e7f8:	4798      	blx	r3
    e7fa:	4603      	mov	r3, r0
    e7fc:	461a      	mov	r2, r3
    e7fe:	687b      	ldr	r3, [r7, #4]
    e800:	4413      	add	r3, r2
}
    e802:	4618      	mov	r0, r3
    e804:	3708      	adds	r7, #8
    e806:	46bd      	mov	sp, r7
    e808:	bd80      	pop	{r7, pc}
    e80a:	bf00      	nop
    e80c:	0000e7bb 	.word	0x0000e7bb

0000e810 <usb_cfg_desc_total_len>:
{
    e810:	b580      	push	{r7, lr}
    e812:	b082      	sub	sp, #8
    e814:	af00      	add	r7, sp, #0
    e816:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e818:	687b      	ldr	r3, [r7, #4]
    e81a:	3302      	adds	r3, #2
    e81c:	4618      	mov	r0, r3
    e81e:	4b03      	ldr	r3, [pc, #12]	; (e82c <usb_cfg_desc_total_len+0x1c>)
    e820:	4798      	blx	r3
    e822:	4603      	mov	r3, r0
}
    e824:	4618      	mov	r0, r3
    e826:	3708      	adds	r7, #8
    e828:	46bd      	mov	sp, r7
    e82a:	bd80      	pop	{r7, pc}
    e82c:	0000e791 	.word	0x0000e791

0000e830 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    e830:	b580      	push	{r7, lr}
    e832:	b082      	sub	sp, #8
    e834:	af00      	add	r7, sp, #0
    e836:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    e838:	6878      	ldr	r0, [r7, #4]
    e83a:	4b05      	ldr	r3, [pc, #20]	; (e850 <usb_cfg_desc_next+0x20>)
    e83c:	4798      	blx	r3
    e83e:	4603      	mov	r3, r0
    e840:	461a      	mov	r2, r3
    e842:	687b      	ldr	r3, [r7, #4]
    e844:	4413      	add	r3, r2
}
    e846:	4618      	mov	r0, r3
    e848:	3708      	adds	r7, #8
    e84a:	46bd      	mov	sp, r7
    e84c:	bd80      	pop	{r7, pc}
    e84e:	bf00      	nop
    e850:	0000e811 	.word	0x0000e811

0000e854 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    e854:	b580      	push	{r7, lr}
    e856:	b084      	sub	sp, #16
    e858:	af00      	add	r7, sp, #0
    e85a:	60f8      	str	r0, [r7, #12]
    e85c:	60b9      	str	r1, [r7, #8]
    e85e:	4613      	mov	r3, r2
    e860:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    e862:	e015      	b.n	e890 <usb_find_desc+0x3c>
		_desc_len_check();
    e864:	68f8      	ldr	r0, [r7, #12]
    e866:	4b0f      	ldr	r3, [pc, #60]	; (e8a4 <usb_find_desc+0x50>)
    e868:	4798      	blx	r3
    e86a:	4603      	mov	r3, r0
    e86c:	2b01      	cmp	r3, #1
    e86e:	d801      	bhi.n	e874 <usb_find_desc+0x20>
    e870:	2300      	movs	r3, #0
    e872:	e012      	b.n	e89a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    e874:	68f8      	ldr	r0, [r7, #12]
    e876:	4b0c      	ldr	r3, [pc, #48]	; (e8a8 <usb_find_desc+0x54>)
    e878:	4798      	blx	r3
    e87a:	4603      	mov	r3, r0
    e87c:	461a      	mov	r2, r3
    e87e:	79fb      	ldrb	r3, [r7, #7]
    e880:	4293      	cmp	r3, r2
    e882:	d101      	bne.n	e888 <usb_find_desc+0x34>
			return desc;
    e884:	68fb      	ldr	r3, [r7, #12]
    e886:	e008      	b.n	e89a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    e888:	68f8      	ldr	r0, [r7, #12]
    e88a:	4b08      	ldr	r3, [pc, #32]	; (e8ac <usb_find_desc+0x58>)
    e88c:	4798      	blx	r3
    e88e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    e890:	68fa      	ldr	r2, [r7, #12]
    e892:	68bb      	ldr	r3, [r7, #8]
    e894:	429a      	cmp	r2, r3
    e896:	d3e5      	bcc.n	e864 <usb_find_desc+0x10>
	}
	return NULL;
    e898:	2300      	movs	r3, #0
}
    e89a:	4618      	mov	r0, r3
    e89c:	3710      	adds	r7, #16
    e89e:	46bd      	mov	sp, r7
    e8a0:	bd80      	pop	{r7, pc}
    e8a2:	bf00      	nop
    e8a4:	0000e7bb 	.word	0x0000e7bb
    e8a8:	0000e7d3 	.word	0x0000e7d3
    e8ac:	0000e7ed 	.word	0x0000e7ed

0000e8b0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    e8b0:	b580      	push	{r7, lr}
    e8b2:	b082      	sub	sp, #8
    e8b4:	af00      	add	r7, sp, #0
    e8b6:	6078      	str	r0, [r7, #4]
    e8b8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    e8ba:	e019      	b.n	e8f0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    e8bc:	6878      	ldr	r0, [r7, #4]
    e8be:	4b12      	ldr	r3, [pc, #72]	; (e908 <usb_find_ep_desc+0x58>)
    e8c0:	4798      	blx	r3
    e8c2:	4603      	mov	r3, r0
    e8c4:	2b01      	cmp	r3, #1
    e8c6:	d801      	bhi.n	e8cc <usb_find_ep_desc+0x1c>
    e8c8:	2300      	movs	r3, #0
    e8ca:	e018      	b.n	e8fe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    e8cc:	6878      	ldr	r0, [r7, #4]
    e8ce:	4b0f      	ldr	r3, [pc, #60]	; (e90c <usb_find_ep_desc+0x5c>)
    e8d0:	4798      	blx	r3
    e8d2:	4603      	mov	r3, r0
    e8d4:	2b04      	cmp	r3, #4
    e8d6:	d010      	beq.n	e8fa <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    e8d8:	6878      	ldr	r0, [r7, #4]
    e8da:	4b0c      	ldr	r3, [pc, #48]	; (e90c <usb_find_ep_desc+0x5c>)
    e8dc:	4798      	blx	r3
    e8de:	4603      	mov	r3, r0
    e8e0:	2b05      	cmp	r3, #5
    e8e2:	d101      	bne.n	e8e8 <usb_find_ep_desc+0x38>
			return desc;
    e8e4:	687b      	ldr	r3, [r7, #4]
    e8e6:	e00a      	b.n	e8fe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    e8e8:	6878      	ldr	r0, [r7, #4]
    e8ea:	4b09      	ldr	r3, [pc, #36]	; (e910 <usb_find_ep_desc+0x60>)
    e8ec:	4798      	blx	r3
    e8ee:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    e8f0:	687a      	ldr	r2, [r7, #4]
    e8f2:	683b      	ldr	r3, [r7, #0]
    e8f4:	429a      	cmp	r2, r3
    e8f6:	d3e1      	bcc.n	e8bc <usb_find_ep_desc+0xc>
    e8f8:	e000      	b.n	e8fc <usb_find_ep_desc+0x4c>
			break;
    e8fa:	bf00      	nop
	}
	return NULL;
    e8fc:	2300      	movs	r3, #0
}
    e8fe:	4618      	mov	r0, r3
    e900:	3708      	adds	r7, #8
    e902:	46bd      	mov	sp, r7
    e904:	bd80      	pop	{r7, pc}
    e906:	bf00      	nop
    e908:	0000e7bb 	.word	0x0000e7bb
    e90c:	0000e7d3 	.word	0x0000e7d3
    e910:	0000e7ed 	.word	0x0000e7ed

0000e914 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    e914:	b580      	push	{r7, lr}
    e916:	b084      	sub	sp, #16
    e918:	af00      	add	r7, sp, #0
    e91a:	60f8      	str	r0, [r7, #12]
    e91c:	60b9      	str	r1, [r7, #8]
    e91e:	4613      	mov	r3, r2
    e920:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    e922:	2202      	movs	r2, #2
    e924:	68b9      	ldr	r1, [r7, #8]
    e926:	68f8      	ldr	r0, [r7, #12]
    e928:	4b15      	ldr	r3, [pc, #84]	; (e980 <usb_find_cfg_desc+0x6c>)
    e92a:	4798      	blx	r3
    e92c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    e92e:	68fb      	ldr	r3, [r7, #12]
    e930:	2b00      	cmp	r3, #0
    e932:	d11a      	bne.n	e96a <usb_find_cfg_desc+0x56>
		return NULL;
    e934:	2300      	movs	r3, #0
    e936:	e01f      	b.n	e978 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    e938:	68f8      	ldr	r0, [r7, #12]
    e93a:	4b12      	ldr	r3, [pc, #72]	; (e984 <usb_find_cfg_desc+0x70>)
    e93c:	4798      	blx	r3
    e93e:	4603      	mov	r3, r0
    e940:	2b01      	cmp	r3, #1
    e942:	d801      	bhi.n	e948 <usb_find_cfg_desc+0x34>
    e944:	2300      	movs	r3, #0
    e946:	e017      	b.n	e978 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    e948:	68fb      	ldr	r3, [r7, #12]
    e94a:	3301      	adds	r3, #1
    e94c:	781b      	ldrb	r3, [r3, #0]
    e94e:	2b02      	cmp	r3, #2
    e950:	d110      	bne.n	e974 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    e952:	68fb      	ldr	r3, [r7, #12]
    e954:	3305      	adds	r3, #5
    e956:	781b      	ldrb	r3, [r3, #0]
    e958:	79fa      	ldrb	r2, [r7, #7]
    e95a:	429a      	cmp	r2, r3
    e95c:	d101      	bne.n	e962 <usb_find_cfg_desc+0x4e>
			return desc;
    e95e:	68fb      	ldr	r3, [r7, #12]
    e960:	e00a      	b.n	e978 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    e962:	68f8      	ldr	r0, [r7, #12]
    e964:	4b08      	ldr	r3, [pc, #32]	; (e988 <usb_find_cfg_desc+0x74>)
    e966:	4798      	blx	r3
    e968:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    e96a:	68fa      	ldr	r2, [r7, #12]
    e96c:	68bb      	ldr	r3, [r7, #8]
    e96e:	429a      	cmp	r2, r3
    e970:	d3e2      	bcc.n	e938 <usb_find_cfg_desc+0x24>
    e972:	e000      	b.n	e976 <usb_find_cfg_desc+0x62>
			break;
    e974:	bf00      	nop
	}
	return NULL;
    e976:	2300      	movs	r3, #0
}
    e978:	4618      	mov	r0, r3
    e97a:	3710      	adds	r7, #16
    e97c:	46bd      	mov	sp, r7
    e97e:	bd80      	pop	{r7, pc}
    e980:	0000e855 	.word	0x0000e855
    e984:	0000e7bb 	.word	0x0000e7bb
    e988:	0000e831 	.word	0x0000e831

0000e98c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    e98c:	b580      	push	{r7, lr}
    e98e:	b086      	sub	sp, #24
    e990:	af00      	add	r7, sp, #0
    e992:	60f8      	str	r0, [r7, #12]
    e994:	60b9      	str	r1, [r7, #8]
    e996:	4613      	mov	r3, r2
    e998:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    e99a:	2300      	movs	r3, #0
    e99c:	75fb      	strb	r3, [r7, #23]
    e99e:	e020      	b.n	e9e2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    e9a0:	2203      	movs	r2, #3
    e9a2:	68b9      	ldr	r1, [r7, #8]
    e9a4:	68f8      	ldr	r0, [r7, #12]
    e9a6:	4b13      	ldr	r3, [pc, #76]	; (e9f4 <usb_find_str_desc+0x68>)
    e9a8:	4798      	blx	r3
    e9aa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    e9ac:	68fb      	ldr	r3, [r7, #12]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d015      	beq.n	e9de <usb_find_str_desc+0x52>
			_desc_len_check();
    e9b2:	68f8      	ldr	r0, [r7, #12]
    e9b4:	4b10      	ldr	r3, [pc, #64]	; (e9f8 <usb_find_str_desc+0x6c>)
    e9b6:	4798      	blx	r3
    e9b8:	4603      	mov	r3, r0
    e9ba:	2b01      	cmp	r3, #1
    e9bc:	d801      	bhi.n	e9c2 <usb_find_str_desc+0x36>
    e9be:	2300      	movs	r3, #0
    e9c0:	e014      	b.n	e9ec <usb_find_str_desc+0x60>
			if (i == str_index) {
    e9c2:	7dfa      	ldrb	r2, [r7, #23]
    e9c4:	79fb      	ldrb	r3, [r7, #7]
    e9c6:	429a      	cmp	r2, r3
    e9c8:	d101      	bne.n	e9ce <usb_find_str_desc+0x42>
				return desc;
    e9ca:	68fb      	ldr	r3, [r7, #12]
    e9cc:	e00e      	b.n	e9ec <usb_find_str_desc+0x60>
			}
			i++;
    e9ce:	7dfb      	ldrb	r3, [r7, #23]
    e9d0:	3301      	adds	r3, #1
    e9d2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    e9d4:	68f8      	ldr	r0, [r7, #12]
    e9d6:	4b09      	ldr	r3, [pc, #36]	; (e9fc <usb_find_str_desc+0x70>)
    e9d8:	4798      	blx	r3
    e9da:	60f8      	str	r0, [r7, #12]
    e9dc:	e001      	b.n	e9e2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    e9de:	2300      	movs	r3, #0
    e9e0:	e004      	b.n	e9ec <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    e9e2:	68fa      	ldr	r2, [r7, #12]
    e9e4:	68bb      	ldr	r3, [r7, #8]
    e9e6:	429a      	cmp	r2, r3
    e9e8:	d3da      	bcc.n	e9a0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    e9ea:	2300      	movs	r3, #0
}
    e9ec:	4618      	mov	r0, r3
    e9ee:	3718      	adds	r7, #24
    e9f0:	46bd      	mov	sp, r7
    e9f2:	bd80      	pop	{r7, pc}
    e9f4:	0000e855 	.word	0x0000e855
    e9f8:	0000e7bb 	.word	0x0000e7bb
    e9fc:	0000e7ed 	.word	0x0000e7ed

0000ea00 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    ea00:	b480      	push	{r7}
    ea02:	b083      	sub	sp, #12
    ea04:	af00      	add	r7, sp, #0
    ea06:	6078      	str	r0, [r7, #4]
    ea08:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    ea0a:	687b      	ldr	r3, [r7, #4]
    ea0c:	683a      	ldr	r2, [r7, #0]
    ea0e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    ea10:	687b      	ldr	r3, [r7, #4]
    ea12:	4618      	mov	r0, r3
    ea14:	370c      	adds	r7, #12
    ea16:	46bd      	mov	sp, r7
    ea18:	bc80      	pop	{r7}
    ea1a:	4770      	bx	lr

0000ea1c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    ea1c:	b480      	push	{r7}
    ea1e:	b083      	sub	sp, #12
    ea20:	af00      	add	r7, sp, #0
    ea22:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    ea24:	687b      	ldr	r3, [r7, #4]
    ea26:	4618      	mov	r0, r3
    ea28:	370c      	adds	r7, #12
    ea2a:	46bd      	mov	sp, r7
    ea2c:	bc80      	pop	{r7}
    ea2e:	4770      	bx	lr

0000ea30 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    ea30:	b580      	push	{r7, lr}
    ea32:	b082      	sub	sp, #8
    ea34:	af00      	add	r7, sp, #0
    ea36:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	4a23      	ldr	r2, [pc, #140]	; (eac8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    ea3c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    ea3e:	687b      	ldr	r3, [r7, #4]
    ea40:	4a21      	ldr	r2, [pc, #132]	; (eac8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    ea42:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    ea44:	687b      	ldr	r3, [r7, #4]
    ea46:	691a      	ldr	r2, [r3, #16]
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	330c      	adds	r3, #12
    ea4c:	4619      	mov	r1, r3
    ea4e:	4610      	mov	r0, r2
    ea50:	4b1e      	ldr	r3, [pc, #120]	; (eacc <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    ea52:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    ea54:	687b      	ldr	r3, [r7, #4]
    ea56:	691b      	ldr	r3, [r3, #16]
    ea58:	4618      	mov	r0, r3
    ea5a:	4b1d      	ldr	r3, [pc, #116]	; (ead0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    ea5c:	4798      	blx	r3
    ea5e:	4603      	mov	r3, r0
    ea60:	b2da      	uxtb	r2, r3
    ea62:	687b      	ldr	r3, [r7, #4]
    ea64:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    ea66:	687b      	ldr	r3, [r7, #4]
    ea68:	7d1b      	ldrb	r3, [r3, #20]
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	bf0c      	ite	eq
    ea6e:	2301      	moveq	r3, #1
    ea70:	2300      	movne	r3, #0
    ea72:	b2da      	uxtb	r2, r3
    ea74:	687b      	ldr	r3, [r7, #4]
    ea76:	725a      	strb	r2, [r3, #9]
	if (isOK)
    ea78:	687b      	ldr	r3, [r7, #4]
    ea7a:	7a5b      	ldrb	r3, [r3, #9]
    ea7c:	b2db      	uxtb	r3, r3
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d116      	bne.n	eab0 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    ea82:	687b      	ldr	r3, [r7, #4]
    ea84:	691b      	ldr	r3, [r3, #16]
    ea86:	4618      	mov	r0, r3
    ea88:	4b12      	ldr	r3, [pc, #72]	; (ead4 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    ea8a:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    ea8c:	687b      	ldr	r3, [r7, #4]
    ea8e:	691b      	ldr	r3, [r3, #16]
    ea90:	4618      	mov	r0, r3
    ea92:	4b0f      	ldr	r3, [pc, #60]	; (ead0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    ea94:	4798      	blx	r3
    ea96:	4603      	mov	r3, r0
    ea98:	b2da      	uxtb	r2, r3
    ea9a:	687b      	ldr	r3, [r7, #4]
    ea9c:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    ea9e:	687b      	ldr	r3, [r7, #4]
    eaa0:	7d1b      	ldrb	r3, [r3, #20]
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	bf0c      	ite	eq
    eaa6:	2301      	moveq	r3, #1
    eaa8:	2300      	movne	r3, #0
    eaaa:	b2da      	uxtb	r2, r3
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    eab0:	687b      	ldr	r3, [r7, #4]
    eab2:	7a5b      	ldrb	r3, [r3, #9]
    eab4:	b2da      	uxtb	r2, r3
    eab6:	687b      	ldr	r3, [r7, #4]
    eab8:	721a      	strb	r2, [r3, #8]
	return isOK;
    eaba:	687b      	ldr	r3, [r7, #4]
    eabc:	7a5b      	ldrb	r3, [r3, #9]
    eabe:	b2db      	uxtb	r3, r3
	
}
    eac0:	4618      	mov	r0, r3
    eac2:	3708      	adds	r7, #8
    eac4:	46bd      	mov	sp, r7
    eac6:	bd80      	pop	{r7, pc}
    eac8:	200012dc 	.word	0x200012dc
    eacc:	00004147 	.word	0x00004147
    ead0:	000040cd 	.word	0x000040cd
    ead4:	000040ed 	.word	0x000040ed

0000ead8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    ead8:	b580      	push	{r7, lr}
    eada:	b082      	sub	sp, #8
    eadc:	af00      	add	r7, sp, #0
    eade:	6078      	str	r0, [r7, #4]
    eae0:	460b      	mov	r3, r1
    eae2:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	691b      	ldr	r3, [r3, #16]
    eae8:	78fa      	ldrb	r2, [r7, #3]
    eaea:	b211      	sxth	r1, r2
    eaec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    eaf0:	4618      	mov	r0, r3
    eaf2:	4b03      	ldr	r3, [pc, #12]	; (eb00 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    eaf4:	4798      	blx	r3
    eaf6:	4603      	mov	r3, r0
}
    eaf8:	4618      	mov	r0, r3
    eafa:	3708      	adds	r7, #8
    eafc:	46bd      	mov	sp, r7
    eafe:	bd80      	pop	{r7, pc}
    eb00:	0000410d 	.word	0x0000410d

0000eb04 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    eb04:	b580      	push	{r7, lr}
    eb06:	b086      	sub	sp, #24
    eb08:	af00      	add	r7, sp, #0
    eb0a:	60f8      	str	r0, [r7, #12]
    eb0c:	60b9      	str	r1, [r7, #8]
    eb0e:	4613      	mov	r3, r2
    eb10:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    eb12:	68fb      	ldr	r3, [r7, #12]
    eb14:	68db      	ldr	r3, [r3, #12]
    eb16:	88fa      	ldrh	r2, [r7, #6]
    eb18:	68b9      	ldr	r1, [r7, #8]
    eb1a:	4618      	mov	r0, r3
    eb1c:	4b03      	ldr	r3, [pc, #12]	; (eb2c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    eb1e:	4798      	blx	r3
    eb20:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    eb22:	697b      	ldr	r3, [r7, #20]
}
    eb24:	4618      	mov	r0, r3
    eb26:	3718      	adds	r7, #24
    eb28:	46bd      	mov	sp, r7
    eb2a:	bd80      	pop	{r7, pc}
    eb2c:	0000f8a5 	.word	0x0000f8a5

0000eb30 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    eb30:	b580      	push	{r7, lr}
    eb32:	b086      	sub	sp, #24
    eb34:	af00      	add	r7, sp, #0
    eb36:	60f8      	str	r0, [r7, #12]
    eb38:	60b9      	str	r1, [r7, #8]
    eb3a:	4613      	mov	r3, r2
    eb3c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    eb3e:	68fb      	ldr	r3, [r7, #12]
    eb40:	68db      	ldr	r3, [r3, #12]
    eb42:	88fa      	ldrh	r2, [r7, #6]
    eb44:	68b9      	ldr	r1, [r7, #8]
    eb46:	4618      	mov	r0, r3
    eb48:	4b03      	ldr	r3, [pc, #12]	; (eb58 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    eb4a:	4798      	blx	r3
    eb4c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    eb4e:	697b      	ldr	r3, [r7, #20]
}
    eb50:	4618      	mov	r0, r3
    eb52:	3718      	adds	r7, #24
    eb54:	46bd      	mov	sp, r7
    eb56:	bd80      	pop	{r7, pc}
    eb58:	0000f8f5 	.word	0x0000f8f5

0000eb5c <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    eb5c:	b580      	push	{r7, lr}
    eb5e:	b082      	sub	sp, #8
    eb60:	af00      	add	r7, sp, #0
    eb62:	6078      	str	r0, [r7, #4]
    eb64:	6039      	str	r1, [r7, #0]
    eb66:	687b      	ldr	r3, [r7, #4]
    eb68:	2b01      	cmp	r3, #1
    eb6a:	d10d      	bne.n	eb88 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    eb6c:	683b      	ldr	r3, [r7, #0]
    eb6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb72:	4293      	cmp	r3, r2
    eb74:	d108      	bne.n	eb88 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    eb76:	4906      	ldr	r1, [pc, #24]	; (eb90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    eb78:	4806      	ldr	r0, [pc, #24]	; (eb94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    eb7a:	4b07      	ldr	r3, [pc, #28]	; (eb98 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    eb7c:	4798      	blx	r3
    eb7e:	4a07      	ldr	r2, [pc, #28]	; (eb9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    eb80:	4907      	ldr	r1, [pc, #28]	; (eba0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    eb82:	4804      	ldr	r0, [pc, #16]	; (eb94 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    eb84:	4b07      	ldr	r3, [pc, #28]	; (eba4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    eb86:	4798      	blx	r3
    eb88:	bf00      	nop
    eb8a:	3708      	adds	r7, #8
    eb8c:	46bd      	mov	sp, r7
    eb8e:	bd80      	pop	{r7, pc}
    eb90:	2000a908 	.word	0x2000a908
    eb94:	200012c4 	.word	0x200012c4
    eb98:	0000ea01 	.word	0x0000ea01
    eb9c:	20000000 	.word	0x20000000
    eba0:	0000ea1d 	.word	0x0000ea1d
    eba4:	00010a49 	.word	0x00010a49

0000eba8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    eba8:	b580      	push	{r7, lr}
    ebaa:	af00      	add	r7, sp, #0
    ebac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ebb0:	2001      	movs	r0, #1
    ebb2:	4b01      	ldr	r3, [pc, #4]	; (ebb8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    ebb4:	4798      	blx	r3
    ebb6:	bd80      	pop	{r7, pc}
    ebb8:	0000eb5d 	.word	0x0000eb5d

0000ebbc <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    ebbc:	b480      	push	{r7}
    ebbe:	b083      	sub	sp, #12
    ebc0:	af00      	add	r7, sp, #0
    ebc2:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	4618      	mov	r0, r3
    ebc8:	370c      	adds	r7, #12
    ebca:	46bd      	mov	sp, r7
    ebcc:	bc80      	pop	{r7}
    ebce:	4770      	bx	lr

0000ebd0 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    ebd0:	b480      	push	{r7}
    ebd2:	b083      	sub	sp, #12
    ebd4:	af00      	add	r7, sp, #0
    ebd6:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    ebd8:	687b      	ldr	r3, [r7, #4]
    ebda:	4618      	mov	r0, r3
    ebdc:	370c      	adds	r7, #12
    ebde:	46bd      	mov	sp, r7
    ebe0:	bc80      	pop	{r7}
    ebe2:	4770      	bx	lr

0000ebe4 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
    ebe4:	b480      	push	{r7}
    ebe6:	b085      	sub	sp, #20
    ebe8:	af00      	add	r7, sp, #0
    ebea:	6078      	str	r0, [r7, #4]
    ebec:	460b      	mov	r3, r1
    ebee:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
    ebf0:	2300      	movs	r3, #0
    ebf2:	73fb      	strb	r3, [r7, #15]
    ebf4:	7bfb      	ldrb	r3, [r7, #15]
    ebf6:	2b01      	cmp	r3, #1
    ebf8:	dc13      	bgt.n	ec22 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
    ebfa:	7bfb      	ldrb	r3, [r7, #15]
    ebfc:	78f9      	ldrb	r1, [r7, #3]
    ebfe:	7bfa      	ldrb	r2, [r7, #15]
    ec00:	2080      	movs	r0, #128	; 0x80
    ec02:	fa40 f202 	asr.w	r2, r0, r2
    ec06:	400a      	ands	r2, r1
    ec08:	2a00      	cmp	r2, #0
    ec0a:	bfcc      	ite	gt
    ec0c:	2201      	movgt	r2, #1
    ec0e:	2200      	movle	r2, #0
    ec10:	b2d1      	uxtb	r1, r2
    ec12:	687a      	ldr	r2, [r7, #4]
    ec14:	4413      	add	r3, r2
    ec16:	460a      	mov	r2, r1
    ec18:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
    ec1a:	7bfb      	ldrb	r3, [r7, #15]
    ec1c:	3301      	adds	r3, #1
    ec1e:	73fb      	strb	r3, [r7, #15]
    ec20:	e7e8      	b.n	ebf4 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
    ec22:	bf00      	nop
    ec24:	3714      	adds	r7, #20
    ec26:	46bd      	mov	sp, r7
    ec28:	bc80      	pop	{r7}
    ec2a:	4770      	bx	lr

0000ec2c <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
    ec2c:	b480      	push	{r7}
    ec2e:	b085      	sub	sp, #20
    ec30:	af00      	add	r7, sp, #0
    ec32:	6078      	str	r0, [r7, #4]
    ec34:	460b      	mov	r3, r1
    ec36:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
    ec38:	2300      	movs	r3, #0
    ec3a:	73fb      	strb	r3, [r7, #15]
    ec3c:	7bfb      	ldrb	r3, [r7, #15]
    ec3e:	2b02      	cmp	r3, #2
    ec40:	dc15      	bgt.n	ec6e <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
    ec42:	7bfb      	ldrb	r3, [r7, #15]
    ec44:	f1c3 0302 	rsb	r3, r3, #2
    ec48:	78f9      	ldrb	r1, [r7, #3]
    ec4a:	7bfa      	ldrb	r2, [r7, #15]
    ec4c:	2020      	movs	r0, #32
    ec4e:	fa40 f202 	asr.w	r2, r0, r2
    ec52:	400a      	ands	r2, r1
    ec54:	2a00      	cmp	r2, #0
    ec56:	bfcc      	ite	gt
    ec58:	2201      	movgt	r2, #1
    ec5a:	2200      	movle	r2, #0
    ec5c:	b2d1      	uxtb	r1, r2
    ec5e:	687a      	ldr	r2, [r7, #4]
    ec60:	4413      	add	r3, r2
    ec62:	460a      	mov	r2, r1
    ec64:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
    ec66:	7bfb      	ldrb	r3, [r7, #15]
    ec68:	3301      	adds	r3, #1
    ec6a:	73fb      	strb	r3, [r7, #15]
    ec6c:	e7e6      	b.n	ec3c <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
    ec6e:	bf00      	nop
    ec70:	3714      	adds	r7, #20
    ec72:	46bd      	mov	sp, r7
    ec74:	bc80      	pop	{r7}
    ec76:	4770      	bx	lr

0000ec78 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
    ec78:	b580      	push	{r7, lr}
    ec7a:	b084      	sub	sp, #16
    ec7c:	af00      	add	r7, sp, #0
    ec7e:	60f8      	str	r0, [r7, #12]
    ec80:	60b9      	str	r1, [r7, #8]
    ec82:	4613      	mov	r3, r2
    ec84:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
    ec86:	79fb      	ldrb	r3, [r7, #7]
    ec88:	4619      	mov	r1, r3
    ec8a:	68b8      	ldr	r0, [r7, #8]
    ec8c:	4b0d      	ldr	r3, [pc, #52]	; (ecc4 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
    ec8e:	4798      	blx	r3
	FillLimitSwitch(v);
    ec90:	79fb      	ldrb	r3, [r7, #7]
    ec92:	4619      	mov	r1, r3
    ec94:	68b8      	ldr	r0, [r7, #8]
    ec96:	4b0c      	ldr	r3, [pc, #48]	; (ecc8 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
    ec98:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
    ec9a:	79fb      	ldrb	r3, [r7, #7]
    ec9c:	f003 0301 	and.w	r3, r3, #1
    eca0:	2b00      	cmp	r3, #0
    eca2:	bfcc      	ite	gt
    eca4:	2301      	movgt	r3, #1
    eca6:	2300      	movle	r3, #0
    eca8:	b2da      	uxtb	r2, r3
    ecaa:	68bb      	ldr	r3, [r7, #8]
    ecac:	769a      	strb	r2, [r3, #26]
	return controlStatus;
    ecae:	68fa      	ldr	r2, [r7, #12]
    ecb0:	68bb      	ldr	r3, [r7, #8]
    ecb2:	3315      	adds	r3, #21
    ecb4:	6819      	ldr	r1, [r3, #0]
    ecb6:	6011      	str	r1, [r2, #0]
    ecb8:	889b      	ldrh	r3, [r3, #4]
    ecba:	8093      	strh	r3, [r2, #4]
}
    ecbc:	68f8      	ldr	r0, [r7, #12]
    ecbe:	3710      	adds	r7, #16
    ecc0:	46bd      	mov	sp, r7
    ecc2:	bd80      	pop	{r7, pc}
    ecc4:	0000ebe5 	.word	0x0000ebe5
    ecc8:	0000ec2d 	.word	0x0000ec2d

0000eccc <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
    eccc:	b480      	push	{r7}
    ecce:	b085      	sub	sp, #20
    ecd0:	af00      	add	r7, sp, #0
    ecd2:	60f8      	str	r0, [r7, #12]
    ecd4:	60b9      	str	r1, [r7, #8]
    ecd6:	4613      	mov	r3, r2
    ecd8:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
    ecda:	79fb      	ldrb	r3, [r7, #7]
    ecdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ece0:	2b00      	cmp	r3, #0
    ece2:	bfcc      	ite	gt
    ece4:	2301      	movgt	r3, #1
    ece6:	2300      	movle	r3, #0
    ece8:	b2da      	uxtb	r2, r3
    ecea:	68bb      	ldr	r3, [r7, #8]
    ecec:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
    ecee:	79fb      	ldrb	r3, [r7, #7]
    ecf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	bfcc      	ite	gt
    ecf8:	2301      	movgt	r3, #1
    ecfa:	2300      	movle	r3, #0
    ecfc:	b2da      	uxtb	r2, r3
    ecfe:	68bb      	ldr	r3, [r7, #8]
    ed00:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
    ed02:	79fb      	ldrb	r3, [r7, #7]
    ed04:	f003 0320 	and.w	r3, r3, #32
    ed08:	2b00      	cmp	r3, #0
    ed0a:	bfcc      	ite	gt
    ed0c:	2301      	movgt	r3, #1
    ed0e:	2300      	movle	r3, #0
    ed10:	b2da      	uxtb	r2, r3
    ed12:	68bb      	ldr	r3, [r7, #8]
    ed14:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
    ed16:	79fb      	ldrb	r3, [r7, #7]
    ed18:	f003 0310 	and.w	r3, r3, #16
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	bfcc      	ite	gt
    ed20:	2301      	movgt	r3, #1
    ed22:	2300      	movle	r3, #0
    ed24:	b2da      	uxtb	r2, r3
    ed26:	68bb      	ldr	r3, [r7, #8]
    ed28:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
    ed2a:	79fb      	ldrb	r3, [r7, #7]
    ed2c:	f003 0308 	and.w	r3, r3, #8
    ed30:	2b00      	cmp	r3, #0
    ed32:	bfcc      	ite	gt
    ed34:	2301      	movgt	r3, #1
    ed36:	2300      	movle	r3, #0
    ed38:	b2da      	uxtb	r2, r3
    ed3a:	68bb      	ldr	r3, [r7, #8]
    ed3c:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
    ed3e:	79fb      	ldrb	r3, [r7, #7]
    ed40:	f003 0304 	and.w	r3, r3, #4
    ed44:	2b00      	cmp	r3, #0
    ed46:	bfcc      	ite	gt
    ed48:	2301      	movgt	r3, #1
    ed4a:	2300      	movle	r3, #0
    ed4c:	b2da      	uxtb	r2, r3
    ed4e:	68bb      	ldr	r3, [r7, #8]
    ed50:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
    ed54:	79fb      	ldrb	r3, [r7, #7]
    ed56:	f003 0302 	and.w	r3, r3, #2
    ed5a:	2b00      	cmp	r3, #0
    ed5c:	bfcc      	ite	gt
    ed5e:	2301      	movgt	r3, #1
    ed60:	2300      	movle	r3, #0
    ed62:	b2da      	uxtb	r2, r3
    ed64:	68bb      	ldr	r3, [r7, #8]
    ed66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
    ed6a:	79fb      	ldrb	r3, [r7, #7]
    ed6c:	f003 0301 	and.w	r3, r3, #1
    ed70:	2b00      	cmp	r3, #0
    ed72:	bfcc      	ite	gt
    ed74:	2301      	movgt	r3, #1
    ed76:	2300      	movle	r3, #0
    ed78:	b2da      	uxtb	r2, r3
    ed7a:	68bb      	ldr	r3, [r7, #8]
    ed7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
    ed80:	68fa      	ldr	r2, [r7, #12]
    ed82:	68bb      	ldr	r3, [r7, #8]
    ed84:	331b      	adds	r3, #27
    ed86:	6819      	ldr	r1, [r3, #0]
    ed88:	685b      	ldr	r3, [r3, #4]
    ed8a:	6011      	str	r1, [r2, #0]
    ed8c:	6053      	str	r3, [r2, #4]
    ed8e:	68f8      	ldr	r0, [r7, #12]
    ed90:	3714      	adds	r7, #20
    ed92:	46bd      	mov	sp, r7
    ed94:	bc80      	pop	{r7}
    ed96:	4770      	bx	lr

0000ed98 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    ed98:	b480      	push	{r7}
    ed9a:	b083      	sub	sp, #12
    ed9c:	af00      	add	r7, sp, #0
    ed9e:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    eda0:	687b      	ldr	r3, [r7, #4]
    eda2:	4618      	mov	r0, r3
    eda4:	370c      	adds	r7, #12
    eda6:	46bd      	mov	sp, r7
    eda8:	bc80      	pop	{r7}
    edaa:	4770      	bx	lr

0000edac <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    edac:	b480      	push	{r7}
    edae:	b083      	sub	sp, #12
    edb0:	af00      	add	r7, sp, #0
    edb2:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    edb4:	687b      	ldr	r3, [r7, #4]
    edb6:	4618      	mov	r0, r3
    edb8:	370c      	adds	r7, #12
    edba:	46bd      	mov	sp, r7
    edbc:	bc80      	pop	{r7}
    edbe:	4770      	bx	lr

0000edc0 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    edc0:	b480      	push	{r7}
    edc2:	b085      	sub	sp, #20
    edc4:	af00      	add	r7, sp, #0
    edc6:	60f8      	str	r0, [r7, #12]
    edc8:	460b      	mov	r3, r1
    edca:	607a      	str	r2, [r7, #4]
    edcc:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    edce:	687b      	ldr	r3, [r7, #4]
    edd0:	681a      	ldr	r2, [r3, #0]
    edd2:	68fb      	ldr	r3, [r7, #12]
    edd4:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    edd6:	687b      	ldr	r3, [r7, #4]
    edd8:	685a      	ldr	r2, [r3, #4]
    edda:	68fb      	ldr	r3, [r7, #12]
    eddc:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    edde:	68fb      	ldr	r3, [r7, #12]
    ede0:	7afa      	ldrb	r2, [r7, #11]
    ede2:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    ede4:	68fb      	ldr	r3, [r7, #12]
    ede6:	687a      	ldr	r2, [r7, #4]
    ede8:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    edea:	68fb      	ldr	r3, [r7, #12]
    edec:	68db      	ldr	r3, [r3, #12]
    edee:	7a5b      	ldrb	r3, [r3, #9]
    edf0:	b2da      	uxtb	r2, r3
    edf2:	68fb      	ldr	r3, [r7, #12]
    edf4:	719a      	strb	r2, [r3, #6]
	return isOK;
    edf6:	68fb      	ldr	r3, [r7, #12]
    edf8:	799b      	ldrb	r3, [r3, #6]
    edfa:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    edfc:	4618      	mov	r0, r3
    edfe:	3714      	adds	r7, #20
    ee00:	46bd      	mov	sp, r7
    ee02:	bc80      	pop	{r7}
    ee04:	4770      	bx	lr

0000ee06 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    ee06:	b480      	push	{r7}
    ee08:	b083      	sub	sp, #12
    ee0a:	af00      	add	r7, sp, #0
    ee0c:	6078      	str	r0, [r7, #4]
    ee0e:	460b      	mov	r3, r1
    ee10:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    ee12:	78fb      	ldrb	r3, [r7, #3]
    ee14:	f003 0307 	and.w	r3, r3, #7
    ee18:	b2db      	uxtb	r3, r3
}
    ee1a:	4618      	mov	r0, r3
    ee1c:	370c      	adds	r7, #12
    ee1e:	46bd      	mov	sp, r7
    ee20:	bc80      	pop	{r7}
    ee22:	4770      	bx	lr

0000ee24 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    ee24:	b580      	push	{r7, lr}
    ee26:	b082      	sub	sp, #8
    ee28:	af00      	add	r7, sp, #0
    ee2a:	6078      	str	r0, [r7, #4]
    ee2c:	460b      	mov	r3, r1
    ee2e:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    ee30:	687b      	ldr	r3, [r7, #4]
    ee32:	68da      	ldr	r2, [r3, #12]
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	7a1b      	ldrb	r3, [r3, #8]
    ee38:	4619      	mov	r1, r3
    ee3a:	4610      	mov	r0, r2
    ee3c:	4b0a      	ldr	r3, [pc, #40]	; (ee68 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    ee3e:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    ee40:	687b      	ldr	r3, [r7, #4]
    ee42:	68db      	ldr	r3, [r3, #12]
    ee44:	1cf9      	adds	r1, r7, #3
    ee46:	2201      	movs	r2, #1
    ee48:	4618      	mov	r0, r3
    ee4a:	4b08      	ldr	r3, [pc, #32]	; (ee6c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    ee4c:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	68db      	ldr	r3, [r3, #12]
    ee52:	6879      	ldr	r1, [r7, #4]
    ee54:	2201      	movs	r2, #1
    ee56:	4618      	mov	r0, r3
    ee58:	4b05      	ldr	r3, [pc, #20]	; (ee70 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    ee5a:	4798      	blx	r3

	return registerValue;
    ee5c:	687b      	ldr	r3, [r7, #4]
    ee5e:	781b      	ldrb	r3, [r3, #0]
}
    ee60:	4618      	mov	r0, r3
    ee62:	3708      	adds	r7, #8
    ee64:	46bd      	mov	sp, r7
    ee66:	bd80      	pop	{r7, pc}
    ee68:	0000ead9 	.word	0x0000ead9
    ee6c:	0000eb05 	.word	0x0000eb05
    ee70:	0000eb31 	.word	0x0000eb31

0000ee74 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    ee74:	b580      	push	{r7, lr}
    ee76:	b084      	sub	sp, #16
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    ee7c:	687b      	ldr	r3, [r7, #4]
    ee7e:	68da      	ldr	r2, [r3, #12]
    ee80:	687b      	ldr	r3, [r7, #4]
    ee82:	7a1b      	ldrb	r3, [r3, #8]
    ee84:	4619      	mov	r1, r3
    ee86:	4610      	mov	r0, r2
    ee88:	4b06      	ldr	r3, [pc, #24]	; (eea4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    ee8a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    ee8c:	2109      	movs	r1, #9
    ee8e:	6878      	ldr	r0, [r7, #4]
    ee90:	4b05      	ldr	r3, [pc, #20]	; (eea8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    ee92:	4798      	blx	r3
    ee94:	4603      	mov	r3, r0
    ee96:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    ee98:	7bfb      	ldrb	r3, [r7, #15]
}
    ee9a:	4618      	mov	r0, r3
    ee9c:	3710      	adds	r7, #16
    ee9e:	46bd      	mov	sp, r7
    eea0:	bd80      	pop	{r7, pc}
    eea2:	bf00      	nop
    eea4:	0000ead9 	.word	0x0000ead9
    eea8:	0000ee25 	.word	0x0000ee25

0000eeac <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    eeac:	b580      	push	{r7, lr}
    eeae:	b084      	sub	sp, #16
    eeb0:	af00      	add	r7, sp, #0
    eeb2:	6078      	str	r0, [r7, #4]
    eeb4:	460b      	mov	r3, r1
    eeb6:	70fb      	strb	r3, [r7, #3]
    eeb8:	4613      	mov	r3, r2
    eeba:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    eebc:	687b      	ldr	r3, [r7, #4]
    eebe:	68da      	ldr	r2, [r3, #12]
    eec0:	687b      	ldr	r3, [r7, #4]
    eec2:	7a1b      	ldrb	r3, [r3, #8]
    eec4:	4619      	mov	r1, r3
    eec6:	4610      	mov	r0, r2
    eec8:	4b09      	ldr	r3, [pc, #36]	; (eef0 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    eeca:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    eecc:	78fb      	ldrb	r3, [r7, #3]
    eece:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    eed0:	78bb      	ldrb	r3, [r7, #2]
    eed2:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    eed4:	687b      	ldr	r3, [r7, #4]
    eed6:	68db      	ldr	r3, [r3, #12]
    eed8:	f107 010c 	add.w	r1, r7, #12
    eedc:	2202      	movs	r2, #2
    eede:	4618      	mov	r0, r3
    eee0:	4b04      	ldr	r3, [pc, #16]	; (eef4 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    eee2:	4798      	blx	r3
    eee4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    eee6:	4618      	mov	r0, r3
    eee8:	3710      	adds	r7, #16
    eeea:	46bd      	mov	sp, r7
    eeec:	bd80      	pop	{r7, pc}
    eeee:	bf00      	nop
    eef0:	0000ead9 	.word	0x0000ead9
    eef4:	0000eb05 	.word	0x0000eb05

0000eef8 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    eef8:	b580      	push	{r7, lr}
    eefa:	b082      	sub	sp, #8
    eefc:	af00      	add	r7, sp, #0
    eefe:	6078      	str	r0, [r7, #4]
    ef00:	460b      	mov	r3, r1
    ef02:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    ef04:	687b      	ldr	r3, [r7, #4]
    ef06:	68da      	ldr	r2, [r3, #12]
    ef08:	687b      	ldr	r3, [r7, #4]
    ef0a:	7a1b      	ldrb	r3, [r3, #8]
    ef0c:	4619      	mov	r1, r3
    ef0e:	4610      	mov	r0, r2
    ef10:	4b06      	ldr	r3, [pc, #24]	; (ef2c <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    ef12:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    ef14:	78fb      	ldrb	r3, [r7, #3]
    ef16:	461a      	mov	r2, r3
    ef18:	2109      	movs	r1, #9
    ef1a:	6878      	ldr	r0, [r7, #4]
    ef1c:	4b04      	ldr	r3, [pc, #16]	; (ef30 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    ef1e:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    ef20:	78fb      	ldrb	r3, [r7, #3]
}
    ef22:	4618      	mov	r0, r3
    ef24:	3708      	adds	r7, #8
    ef26:	46bd      	mov	sp, r7
    ef28:	bd80      	pop	{r7, pc}
    ef2a:	bf00      	nop
    ef2c:	0000ead9 	.word	0x0000ead9
    ef30:	0000eead 	.word	0x0000eead

0000ef34 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    ef34:	b580      	push	{r7, lr}
    ef36:	b084      	sub	sp, #16
    ef38:	af00      	add	r7, sp, #0
    ef3a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    ef3c:	2300      	movs	r3, #0
    ef3e:	73fb      	strb	r3, [r7, #15]
    ef40:	7bfb      	ldrb	r3, [r7, #15]
    ef42:	2b07      	cmp	r3, #7
    ef44:	dc0f      	bgt.n	ef66 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    ef46:	7bfb      	ldrb	r3, [r7, #15]
    ef48:	2201      	movs	r2, #1
    ef4a:	4619      	mov	r1, r3
    ef4c:	6878      	ldr	r0, [r7, #4]
    ef4e:	4b08      	ldr	r3, [pc, #32]	; (ef70 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    ef50:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    ef52:	7bfb      	ldrb	r3, [r7, #15]
    ef54:	2201      	movs	r2, #1
    ef56:	4619      	mov	r1, r3
    ef58:	6878      	ldr	r0, [r7, #4]
    ef5a:	4b06      	ldr	r3, [pc, #24]	; (ef74 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    ef5c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    ef5e:	7bfb      	ldrb	r3, [r7, #15]
    ef60:	3301      	adds	r3, #1
    ef62:	73fb      	strb	r3, [r7, #15]
    ef64:	e7ec      	b.n	ef40 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    ef66:	bf00      	nop
    ef68:	3710      	adds	r7, #16
    ef6a:	46bd      	mov	sp, r7
    ef6c:	bd80      	pop	{r7, pc}
    ef6e:	bf00      	nop
    ef70:	0000f0ad 	.word	0x0000f0ad
    ef74:	0000f0e5 	.word	0x0000f0e5

0000ef78 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    ef78:	b580      	push	{r7, lr}
    ef7a:	b084      	sub	sp, #16
    ef7c:	af00      	add	r7, sp, #0
    ef7e:	6078      	str	r0, [r7, #4]
    ef80:	460b      	mov	r3, r1
    ef82:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    ef84:	78fb      	ldrb	r3, [r7, #3]
    ef86:	2b00      	cmp	r3, #0
    ef88:	dd23      	ble.n	efd2 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    ef8a:	2300      	movs	r3, #0
    ef8c:	73fb      	strb	r3, [r7, #15]
    ef8e:	7bfb      	ldrb	r3, [r7, #15]
    ef90:	2b07      	cmp	r3, #7
    ef92:	dc21      	bgt.n	efd8 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    ef94:	78fa      	ldrb	r2, [r7, #3]
    ef96:	7bfb      	ldrb	r3, [r7, #15]
    ef98:	fa42 f303 	asr.w	r3, r2, r3
    ef9c:	f003 0301 	and.w	r3, r3, #1
    efa0:	2b00      	cmp	r3, #0
    efa2:	d00c      	beq.n	efbe <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    efa4:	7bfb      	ldrb	r3, [r7, #15]
    efa6:	2201      	movs	r2, #1
    efa8:	4619      	mov	r1, r3
    efaa:	6878      	ldr	r0, [r7, #4]
    efac:	4b0c      	ldr	r3, [pc, #48]	; (efe0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    efae:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    efb0:	7bfb      	ldrb	r3, [r7, #15]
    efb2:	2201      	movs	r2, #1
    efb4:	4619      	mov	r1, r3
    efb6:	6878      	ldr	r0, [r7, #4]
    efb8:	4b0a      	ldr	r3, [pc, #40]	; (efe4 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    efba:	4798      	blx	r3
    efbc:	e005      	b.n	efca <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    efbe:	7bfb      	ldrb	r3, [r7, #15]
    efc0:	2200      	movs	r2, #0
    efc2:	4619      	mov	r1, r3
    efc4:	6878      	ldr	r0, [r7, #4]
    efc6:	4b06      	ldr	r3, [pc, #24]	; (efe0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    efc8:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    efca:	7bfb      	ldrb	r3, [r7, #15]
    efcc:	3301      	adds	r3, #1
    efce:	73fb      	strb	r3, [r7, #15]
    efd0:	e7dd      	b.n	ef8e <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    efd2:	6878      	ldr	r0, [r7, #4]
    efd4:	4b04      	ldr	r3, [pc, #16]	; (efe8 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    efd6:	4798      	blx	r3
	}
	
}
    efd8:	bf00      	nop
    efda:	3710      	adds	r7, #16
    efdc:	46bd      	mov	sp, r7
    efde:	bd80      	pop	{r7, pc}
    efe0:	0000f0ad 	.word	0x0000f0ad
    efe4:	0000f0e5 	.word	0x0000f0e5
    efe8:	0000efed 	.word	0x0000efed

0000efec <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    efec:	b580      	push	{r7, lr}
    efee:	b084      	sub	sp, #16
    eff0:	af00      	add	r7, sp, #0
    eff2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    eff4:	2300      	movs	r3, #0
    eff6:	73fb      	strb	r3, [r7, #15]
    eff8:	7bfb      	ldrb	r3, [r7, #15]
    effa:	2b07      	cmp	r3, #7
    effc:	dc09      	bgt.n	f012 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    effe:	7bfb      	ldrb	r3, [r7, #15]
    f000:	2200      	movs	r2, #0
    f002:	4619      	mov	r1, r3
    f004:	6878      	ldr	r0, [r7, #4]
    f006:	4b05      	ldr	r3, [pc, #20]	; (f01c <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    f008:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    f00a:	7bfb      	ldrb	r3, [r7, #15]
    f00c:	3301      	adds	r3, #1
    f00e:	73fb      	strb	r3, [r7, #15]
    f010:	e7f2      	b.n	eff8 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    f012:	bf00      	nop
    f014:	3710      	adds	r7, #16
    f016:	46bd      	mov	sp, r7
    f018:	bd80      	pop	{r7, pc}
    f01a:	bf00      	nop
    f01c:	0000f0ad 	.word	0x0000f0ad

0000f020 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    f020:	b580      	push	{r7, lr}
    f022:	b084      	sub	sp, #16
    f024:	af00      	add	r7, sp, #0
    f026:	6078      	str	r0, [r7, #4]
    f028:	4608      	mov	r0, r1
    f02a:	4611      	mov	r1, r2
    f02c:	461a      	mov	r2, r3
    f02e:	4603      	mov	r3, r0
    f030:	70fb      	strb	r3, [r7, #3]
    f032:	460b      	mov	r3, r1
    f034:	70bb      	strb	r3, [r7, #2]
    f036:	4613      	mov	r3, r2
    f038:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    f03a:	787b      	ldrb	r3, [r7, #1]
    f03c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    f03e:	78fb      	ldrb	r3, [r7, #3]
    f040:	4619      	mov	r1, r3
    f042:	6878      	ldr	r0, [r7, #4]
    f044:	4b16      	ldr	r3, [pc, #88]	; (f0a0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    f046:	4798      	blx	r3
    f048:	4603      	mov	r3, r0
    f04a:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    f04c:	7bfb      	ldrb	r3, [r7, #15]
    f04e:	4619      	mov	r1, r3
    f050:	6878      	ldr	r0, [r7, #4]
    f052:	4b14      	ldr	r3, [pc, #80]	; (f0a4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    f054:	4798      	blx	r3
    f056:	4603      	mov	r3, r0
    f058:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    f05a:	78bb      	ldrb	r3, [r7, #2]
    f05c:	2b00      	cmp	r3, #0
    f05e:	d009      	beq.n	f074 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    f060:	7bba      	ldrb	r2, [r7, #14]
    f062:	7b7b      	ldrb	r3, [r7, #13]
    f064:	4619      	mov	r1, r3
    f066:	2301      	movs	r3, #1
    f068:	408b      	lsls	r3, r1
    f06a:	b2db      	uxtb	r3, r3
    f06c:	4313      	orrs	r3, r2
    f06e:	b2db      	uxtb	r3, r3
    f070:	73bb      	strb	r3, [r7, #14]
    f072:	e00a      	b.n	f08a <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    f074:	7bba      	ldrb	r2, [r7, #14]
    f076:	7b7b      	ldrb	r3, [r7, #13]
    f078:	4619      	mov	r1, r3
    f07a:	2301      	movs	r3, #1
    f07c:	408b      	lsls	r3, r1
    f07e:	b2db      	uxtb	r3, r3
    f080:	43db      	mvns	r3, r3
    f082:	b2db      	uxtb	r3, r3
    f084:	4013      	ands	r3, r2
    f086:	b2db      	uxtb	r3, r3
    f088:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    f08a:	7bba      	ldrb	r2, [r7, #14]
    f08c:	7bfb      	ldrb	r3, [r7, #15]
    f08e:	4619      	mov	r1, r3
    f090:	6878      	ldr	r0, [r7, #4]
    f092:	4b05      	ldr	r3, [pc, #20]	; (f0a8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    f094:	4798      	blx	r3
}
    f096:	bf00      	nop
    f098:	3710      	adds	r7, #16
    f09a:	46bd      	mov	sp, r7
    f09c:	bd80      	pop	{r7, pc}
    f09e:	bf00      	nop
    f0a0:	0000ee07 	.word	0x0000ee07
    f0a4:	0000ee25 	.word	0x0000ee25
    f0a8:	0000eead 	.word	0x0000eead

0000f0ac <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    f0ac:	b590      	push	{r4, r7, lr}
    f0ae:	b085      	sub	sp, #20
    f0b0:	af02      	add	r7, sp, #8
    f0b2:	6078      	str	r0, [r7, #4]
    f0b4:	460b      	mov	r3, r1
    f0b6:	70fb      	strb	r3, [r7, #3]
    f0b8:	4613      	mov	r3, r2
    f0ba:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    f0bc:	78bb      	ldrb	r3, [r7, #2]
    f0be:	2b01      	cmp	r3, #1
    f0c0:	bf0c      	ite	eq
    f0c2:	2301      	moveq	r3, #1
    f0c4:	2300      	movne	r3, #0
    f0c6:	b2db      	uxtb	r3, r3
    f0c8:	461a      	mov	r2, r3
    f0ca:	78f9      	ldrb	r1, [r7, #3]
    f0cc:	2300      	movs	r3, #0
    f0ce:	9300      	str	r3, [sp, #0]
    f0d0:	2300      	movs	r3, #0
    f0d2:	6878      	ldr	r0, [r7, #4]
    f0d4:	4c02      	ldr	r4, [pc, #8]	; (f0e0 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    f0d6:	47a0      	blx	r4
}
    f0d8:	bf00      	nop
    f0da:	370c      	adds	r7, #12
    f0dc:	46bd      	mov	sp, r7
    f0de:	bd90      	pop	{r4, r7, pc}
    f0e0:	0000f021 	.word	0x0000f021

0000f0e4 <_ZN14MCP23008_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	return	writeRegister(regAddr,gpio)==0;
}

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    f0e4:	b590      	push	{r4, r7, lr}
    f0e6:	b085      	sub	sp, #20
    f0e8:	af02      	add	r7, sp, #8
    f0ea:	6078      	str	r0, [r7, #4]
    f0ec:	460b      	mov	r3, r1
    f0ee:	70fb      	strb	r3, [r7, #3]
    f0f0:	4613      	mov	r3, r2
    f0f2:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    f0f4:	78ba      	ldrb	r2, [r7, #2]
    f0f6:	78f9      	ldrb	r1, [r7, #3]
    f0f8:	2306      	movs	r3, #6
    f0fa:	9300      	str	r3, [sp, #0]
    f0fc:	2306      	movs	r3, #6
    f0fe:	6878      	ldr	r0, [r7, #4]
    f100:	4c02      	ldr	r4, [pc, #8]	; (f10c <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    f102:	47a0      	blx	r4
}
    f104:	bf00      	nop
    f106:	370c      	adds	r7, #12
    f108:	46bd      	mov	sp, r7
    f10a:	bd90      	pop	{r4, r7, pc}
    f10c:	0000f021 	.word	0x0000f021

0000f110 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
    f110:	b580      	push	{r7, lr}
    f112:	b082      	sub	sp, #8
    f114:	af00      	add	r7, sp, #0
    f116:	6078      	str	r0, [r7, #4]
    f118:	6039      	str	r1, [r7, #0]
    f11a:	687b      	ldr	r3, [r7, #4]
    f11c:	2b01      	cmp	r3, #1
    f11e:	d10d      	bne.n	f13c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    f120:	683b      	ldr	r3, [r7, #0]
    f122:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f126:	4293      	cmp	r3, r2
    f128:	d108      	bne.n	f13c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    f12a:	4906      	ldr	r1, [pc, #24]	; (f144 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f12c:	4806      	ldr	r0, [pc, #24]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f12e:	4b07      	ldr	r3, [pc, #28]	; (f14c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f130:	4798      	blx	r3
    f132:	4a07      	ldr	r2, [pc, #28]	; (f150 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f134:	4907      	ldr	r1, [pc, #28]	; (f154 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f136:	4804      	ldr	r0, [pc, #16]	; (f148 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f138:	4b07      	ldr	r3, [pc, #28]	; (f158 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f13a:	4798      	blx	r3
    f13c:	bf00      	nop
    f13e:	3708      	adds	r7, #8
    f140:	46bd      	mov	sp, r7
    f142:	bd80      	pop	{r7, pc}
    f144:	2000a908 	.word	0x2000a908
    f148:	2000135c 	.word	0x2000135c
    f14c:	0000ea01 	.word	0x0000ea01
    f150:	20000000 	.word	0x20000000
    f154:	0000ea1d 	.word	0x0000ea1d
    f158:	00010a49 	.word	0x00010a49

0000f15c <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
    f15c:	b580      	push	{r7, lr}
    f15e:	af00      	add	r7, sp, #0
    f160:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f164:	2001      	movs	r0, #1
    f166:	4b01      	ldr	r3, [pc, #4]	; (f16c <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
    f168:	4798      	blx	r3
    f16a:	bd80      	pop	{r7, pc}
    f16c:	0000f111 	.word	0x0000f111

0000f170 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    f170:	b480      	push	{r7}
    f172:	b083      	sub	sp, #12
    f174:	af00      	add	r7, sp, #0
    f176:	6078      	str	r0, [r7, #4]
    f178:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	683a      	ldr	r2, [r7, #0]
    f17e:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    f180:	687b      	ldr	r3, [r7, #4]
    f182:	68db      	ldr	r3, [r3, #12]
    f184:	2200      	movs	r2, #0
    f186:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    f188:	4a06      	ldr	r2, [pc, #24]	; (f1a4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    f18a:	687b      	ldr	r3, [r7, #4]
    f18c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f18e:	687b      	ldr	r3, [r7, #4]
    f190:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f194:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    f196:	687b      	ldr	r3, [r7, #4]
    f198:	4618      	mov	r0, r3
    f19a:	370c      	adds	r7, #12
    f19c:	46bd      	mov	sp, r7
    f19e:	bc80      	pop	{r7}
    f1a0:	4770      	bx	lr
    f1a2:	bf00      	nop
    f1a4:	20001474 	.word	0x20001474

0000f1a8 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    f1a8:	b480      	push	{r7}
    f1aa:	b083      	sub	sp, #12
    f1ac:	af00      	add	r7, sp, #0
    f1ae:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f1b0:	687b      	ldr	r3, [r7, #4]
    f1b2:	2200      	movs	r2, #0
    f1b4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f1b6:	687b      	ldr	r3, [r7, #4]
    f1b8:	4618      	mov	r0, r3
    f1ba:	370c      	adds	r7, #12
    f1bc:	46bd      	mov	sp, r7
    f1be:	bc80      	pop	{r7}
    f1c0:	4770      	bx	lr
	...

0000f1c4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f1c4:	b580      	push	{r7, lr}
    f1c6:	b086      	sub	sp, #24
    f1c8:	af00      	add	r7, sp, #0
    f1ca:	60f8      	str	r0, [r7, #12]
    f1cc:	60b9      	str	r1, [r7, #8]
    f1ce:	607a      	str	r2, [r7, #4]
    f1d0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    f1d2:	68b9      	ldr	r1, [r7, #8]
    f1d4:	68f8      	ldr	r0, [r7, #12]
    f1d6:	4b0e      	ldr	r3, [pc, #56]	; (f210 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f1d8:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    f1da:	68fb      	ldr	r3, [r7, #12]
    f1dc:	699b      	ldr	r3, [r3, #24]
    f1de:	687a      	ldr	r2, [r7, #4]
    f1e0:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f1e2:	68fb      	ldr	r3, [r7, #12]
    f1e4:	699b      	ldr	r3, [r3, #24]
    f1e6:	68ba      	ldr	r2, [r7, #8]
    f1e8:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f1ea:	68fb      	ldr	r3, [r7, #12]
    f1ec:	699b      	ldr	r3, [r3, #24]
    f1ee:	78fa      	ldrb	r2, [r7, #3]
    f1f0:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f1f2:	68fb      	ldr	r3, [r7, #12]
    f1f4:	68da      	ldr	r2, [r3, #12]
    f1f6:	68fb      	ldr	r3, [r7, #12]
    f1f8:	699b      	ldr	r3, [r3, #24]
    f1fa:	4619      	mov	r1, r3
    f1fc:	4610      	mov	r0, r2
    f1fe:	4b05      	ldr	r3, [pc, #20]	; (f214 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    f200:	4798      	blx	r3
    f202:	6178      	str	r0, [r7, #20]
	
	return status;
    f204:	697b      	ldr	r3, [r7, #20]
}
    f206:	4618      	mov	r0, r3
    f208:	3718      	adds	r7, #24
    f20a:	46bd      	mov	sp, r7
    f20c:	bd80      	pop	{r7, pc}
    f20e:	bf00      	nop
    f210:	0000f3a1 	.word	0x0000f3a1
    f214:	000045c9 	.word	0x000045c9

0000f218 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    f218:	b580      	push	{r7, lr}
    f21a:	b086      	sub	sp, #24
    f21c:	af00      	add	r7, sp, #0
    f21e:	60f8      	str	r0, [r7, #12]
    f220:	60b9      	str	r1, [r7, #8]
    f222:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    f224:	687a      	ldr	r2, [r7, #4]
    f226:	68b9      	ldr	r1, [r7, #8]
    f228:	68f8      	ldr	r0, [r7, #12]
    f22a:	4b0c      	ldr	r3, [pc, #48]	; (f25c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    f22c:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    f22e:	68fb      	ldr	r3, [r7, #12]
    f230:	68db      	ldr	r3, [r3, #12]
    f232:	681b      	ldr	r3, [r3, #0]
    f234:	699b      	ldr	r3, [r3, #24]
    f236:	68fa      	ldr	r2, [r7, #12]
    f238:	68d2      	ldr	r2, [r2, #12]
    f23a:	3204      	adds	r2, #4
    f23c:	4610      	mov	r0, r2
    f23e:	4798      	blx	r3
    f240:	4603      	mov	r3, r0
    f242:	2b00      	cmp	r3, #0
    f244:	d105      	bne.n	f252 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    f246:	68fb      	ldr	r3, [r7, #12]
    f248:	68db      	ldr	r3, [r3, #12]
    f24a:	4618      	mov	r0, r3
    f24c:	4b04      	ldr	r3, [pc, #16]	; (f260 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    f24e:	4798      	blx	r3
    f250:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    f252:	697b      	ldr	r3, [r7, #20]
}
    f254:	4618      	mov	r0, r3
    f256:	3718      	adds	r7, #24
    f258:	46bd      	mov	sp, r7
    f25a:	bd80      	pop	{r7, pc}
    f25c:	0000f265 	.word	0x0000f265
    f260:	00004561 	.word	0x00004561

0000f264 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    f264:	b590      	push	{r4, r7, lr}
    f266:	b087      	sub	sp, #28
    f268:	af00      	add	r7, sp, #0
    f26a:	60f8      	str	r0, [r7, #12]
    f26c:	60b9      	str	r1, [r7, #8]
    f26e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    f270:	2301      	movs	r3, #1
    f272:	687a      	ldr	r2, [r7, #4]
    f274:	68b9      	ldr	r1, [r7, #8]
    f276:	68f8      	ldr	r0, [r7, #12]
    f278:	4c03      	ldr	r4, [pc, #12]	; (f288 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    f27a:	47a0      	blx	r4
    f27c:	6178      	str	r0, [r7, #20]
		return status;
    f27e:	697b      	ldr	r3, [r7, #20]
}
    f280:	4618      	mov	r0, r3
    f282:	371c      	adds	r7, #28
    f284:	46bd      	mov	sp, r7
    f286:	bd90      	pop	{r4, r7, pc}
    f288:	0000f1c5 	.word	0x0000f1c5

0000f28c <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    f28c:	b580      	push	{r7, lr}
    f28e:	b082      	sub	sp, #8
    f290:	af00      	add	r7, sp, #0
    f292:	6078      	str	r0, [r7, #4]
    f294:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f296:	6839      	ldr	r1, [r7, #0]
    f298:	6878      	ldr	r0, [r7, #4]
    f29a:	4b0f      	ldr	r3, [pc, #60]	; (f2d8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    f29c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f29e:	687b      	ldr	r3, [r7, #4]
    f2a0:	68db      	ldr	r3, [r3, #12]
    f2a2:	f103 0218 	add.w	r2, r3, #24
    f2a6:	687b      	ldr	r3, [r7, #4]
    f2a8:	699b      	ldr	r3, [r3, #24]
    f2aa:	4619      	mov	r1, r3
    f2ac:	4610      	mov	r0, r2
    f2ae:	4b0b      	ldr	r3, [pc, #44]	; (f2dc <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    f2b0:	4798      	blx	r3
    f2b2:	4603      	mov	r3, r0
    f2b4:	2b00      	cmp	r3, #0
    f2b6:	d007      	beq.n	f2c8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	68da      	ldr	r2, [r3, #12]
    f2bc:	687b      	ldr	r3, [r7, #4]
    f2be:	699b      	ldr	r3, [r3, #24]
    f2c0:	4619      	mov	r1, r3
    f2c2:	4610      	mov	r0, r2
    f2c4:	4b06      	ldr	r3, [pc, #24]	; (f2e0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    f2c6:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f2c8:	687b      	ldr	r3, [r7, #4]
    f2ca:	699b      	ldr	r3, [r3, #24]
    f2cc:	2200      	movs	r2, #0
    f2ce:	60da      	str	r2, [r3, #12]
}
    f2d0:	bf00      	nop
    f2d2:	3708      	adds	r7, #8
    f2d4:	46bd      	mov	sp, r7
    f2d6:	bd80      	pop	{r7, pc}
    f2d8:	0000f421 	.word	0x0000f421
    f2dc:	00005261 	.word	0x00005261
    f2e0:	000046cd 	.word	0x000046cd

0000f2e4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f2e4:	b590      	push	{r4, r7, lr}
    f2e6:	b087      	sub	sp, #28
    f2e8:	af00      	add	r7, sp, #0
    f2ea:	60f8      	str	r0, [r7, #12]
    f2ec:	60b9      	str	r1, [r7, #8]
    f2ee:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f2f0:	2300      	movs	r3, #0
    f2f2:	687a      	ldr	r2, [r7, #4]
    f2f4:	68b9      	ldr	r1, [r7, #8]
    f2f6:	68f8      	ldr	r0, [r7, #12]
    f2f8:	4c0c      	ldr	r4, [pc, #48]	; (f32c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    f2fa:	47a0      	blx	r4
    f2fc:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    f2fe:	68fb      	ldr	r3, [r7, #12]
    f300:	68db      	ldr	r3, [r3, #12]
    f302:	681b      	ldr	r3, [r3, #0]
    f304:	699b      	ldr	r3, [r3, #24]
    f306:	68fa      	ldr	r2, [r7, #12]
    f308:	68d2      	ldr	r2, [r2, #12]
    f30a:	3204      	adds	r2, #4
    f30c:	4610      	mov	r0, r2
    f30e:	4798      	blx	r3
    f310:	4603      	mov	r3, r0
    f312:	2b00      	cmp	r3, #0
    f314:	d105      	bne.n	f322 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    f316:	68fb      	ldr	r3, [r7, #12]
    f318:	68db      	ldr	r3, [r3, #12]
    f31a:	4618      	mov	r0, r3
    f31c:	4b04      	ldr	r3, [pc, #16]	; (f330 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    f31e:	4798      	blx	r3
    f320:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    f322:	697b      	ldr	r3, [r7, #20]
}
    f324:	4618      	mov	r0, r3
    f326:	371c      	adds	r7, #28
    f328:	46bd      	mov	sp, r7
    f32a:	bd90      	pop	{r4, r7, pc}
    f32c:	0000f1c5 	.word	0x0000f1c5
    f330:	00004561 	.word	0x00004561

0000f334 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    f334:	b480      	push	{r7}
    f336:	b085      	sub	sp, #20
    f338:	af00      	add	r7, sp, #0
    f33a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f33c:	2300      	movs	r3, #0
    f33e:	73fb      	strb	r3, [r7, #15]
    f340:	7bfb      	ldrb	r3, [r7, #15]
    f342:	2b1f      	cmp	r3, #31
    f344:	dc23      	bgt.n	f38e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    f346:	687b      	ldr	r3, [r7, #4]
    f348:	7f1a      	ldrb	r2, [r3, #28]
    f34a:	7bfb      	ldrb	r3, [r7, #15]
    f34c:	4413      	add	r3, r2
    f34e:	b2db      	uxtb	r3, r3
    f350:	f003 031f 	and.w	r3, r3, #31
    f354:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    f356:	7bba      	ldrb	r2, [r7, #14]
    f358:	4910      	ldr	r1, [pc, #64]	; (f39c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    f35a:	4613      	mov	r3, r2
    f35c:	009b      	lsls	r3, r3, #2
    f35e:	4413      	add	r3, r2
    f360:	009b      	lsls	r3, r3, #2
    f362:	440b      	add	r3, r1
    f364:	330c      	adds	r3, #12
    f366:	681b      	ldr	r3, [r3, #0]
    f368:	2b00      	cmp	r3, #0
    f36a:	d10c      	bne.n	f386 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    f36c:	7bba      	ldrb	r2, [r7, #14]
    f36e:	4613      	mov	r3, r2
    f370:	009b      	lsls	r3, r3, #2
    f372:	4413      	add	r3, r2
    f374:	009b      	lsls	r3, r3, #2
    f376:	4a09      	ldr	r2, [pc, #36]	; (f39c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    f378:	441a      	add	r2, r3
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    f37e:	687b      	ldr	r3, [r7, #4]
    f380:	7bba      	ldrb	r2, [r7, #14]
    f382:	771a      	strb	r2, [r3, #28]
			return;
    f384:	e006      	b.n	f394 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f386:	7bfb      	ldrb	r3, [r7, #15]
    f388:	3301      	adds	r3, #1
    f38a:	73fb      	strb	r3, [r7, #15]
    f38c:	e7d8      	b.n	f340 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    f38e:	687b      	ldr	r3, [r7, #4]
    f390:	4a02      	ldr	r2, [pc, #8]	; (f39c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    f392:	619a      	str	r2, [r3, #24]

}
    f394:	3714      	adds	r7, #20
    f396:	46bd      	mov	sp, r7
    f398:	bc80      	pop	{r7}
    f39a:	4770      	bx	lr
    f39c:	20001478 	.word	0x20001478

0000f3a0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    f3a0:	b580      	push	{r7, lr}
    f3a2:	b084      	sub	sp, #16
    f3a4:	af00      	add	r7, sp, #0
    f3a6:	6078      	str	r0, [r7, #4]
    f3a8:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f3aa:	2300      	movs	r3, #0
    f3ac:	73fb      	strb	r3, [r7, #15]
    f3ae:	7bfb      	ldrb	r3, [r7, #15]
    f3b0:	2b1f      	cmp	r3, #31
    f3b2:	dc28      	bgt.n	f406 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    f3b4:	687b      	ldr	r3, [r7, #4]
    f3b6:	7f1a      	ldrb	r2, [r3, #28]
    f3b8:	7bfb      	ldrb	r3, [r7, #15]
    f3ba:	4413      	add	r3, r2
    f3bc:	b2db      	uxtb	r3, r3
    f3be:	f003 031f 	and.w	r3, r3, #31
    f3c2:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    f3c4:	7bba      	ldrb	r2, [r7, #14]
    f3c6:	4913      	ldr	r1, [pc, #76]	; (f414 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    f3c8:	4613      	mov	r3, r2
    f3ca:	009b      	lsls	r3, r3, #2
    f3cc:	4413      	add	r3, r2
    f3ce:	009b      	lsls	r3, r3, #2
    f3d0:	440b      	add	r3, r1
    f3d2:	330c      	adds	r3, #12
    f3d4:	681a      	ldr	r2, [r3, #0]
    f3d6:	683b      	ldr	r3, [r7, #0]
    f3d8:	429a      	cmp	r2, r3
    f3da:	d110      	bne.n	f3fe <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    f3dc:	6839      	ldr	r1, [r7, #0]
    f3de:	6878      	ldr	r0, [r7, #4]
    f3e0:	4b0d      	ldr	r3, [pc, #52]	; (f418 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    f3e2:	4798      	blx	r3
			task=&taskArray[j];
    f3e4:	7bba      	ldrb	r2, [r7, #14]
    f3e6:	4613      	mov	r3, r2
    f3e8:	009b      	lsls	r3, r3, #2
    f3ea:	4413      	add	r3, r2
    f3ec:	009b      	lsls	r3, r3, #2
    f3ee:	4a09      	ldr	r2, [pc, #36]	; (f414 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    f3f0:	441a      	add	r2, r3
    f3f2:	687b      	ldr	r3, [r7, #4]
    f3f4:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    f3f6:	687b      	ldr	r3, [r7, #4]
    f3f8:	7bba      	ldrb	r2, [r7, #14]
    f3fa:	771a      	strb	r2, [r3, #28]
			return;
    f3fc:	e006      	b.n	f40c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f3fe:	7bfb      	ldrb	r3, [r7, #15]
    f400:	3301      	adds	r3, #1
    f402:	73fb      	strb	r3, [r7, #15]
    f404:	e7d3      	b.n	f3ae <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    f406:	6878      	ldr	r0, [r7, #4]
    f408:	4b04      	ldr	r3, [pc, #16]	; (f41c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    f40a:	4798      	blx	r3
	//task=&taskArray[0];

}
    f40c:	3710      	adds	r7, #16
    f40e:	46bd      	mov	sp, r7
    f410:	bd80      	pop	{r7, pc}
    f412:	bf00      	nop
    f414:	20001478 	.word	0x20001478
    f418:	0000f28d 	.word	0x0000f28d
    f41c:	0000f335 	.word	0x0000f335

0000f420 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    f420:	b480      	push	{r7}
    f422:	b085      	sub	sp, #20
    f424:	af00      	add	r7, sp, #0
    f426:	6078      	str	r0, [r7, #4]
    f428:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f42a:	2300      	movs	r3, #0
    f42c:	73fb      	strb	r3, [r7, #15]
    f42e:	7bfb      	ldrb	r3, [r7, #15]
    f430:	2b1f      	cmp	r3, #31
    f432:	dc19      	bgt.n	f468 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f434:	7bfa      	ldrb	r2, [r7, #15]
    f436:	490f      	ldr	r1, [pc, #60]	; (f474 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    f438:	4613      	mov	r3, r2
    f43a:	009b      	lsls	r3, r3, #2
    f43c:	4413      	add	r3, r2
    f43e:	009b      	lsls	r3, r3, #2
    f440:	440b      	add	r3, r1
    f442:	330c      	adds	r3, #12
    f444:	681a      	ldr	r2, [r3, #0]
    f446:	683b      	ldr	r3, [r7, #0]
    f448:	429a      	cmp	r2, r3
    f44a:	d109      	bne.n	f460 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f44c:	7bfa      	ldrb	r2, [r7, #15]
    f44e:	4613      	mov	r3, r2
    f450:	009b      	lsls	r3, r3, #2
    f452:	4413      	add	r3, r2
    f454:	009b      	lsls	r3, r3, #2
    f456:	4a07      	ldr	r2, [pc, #28]	; (f474 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    f458:	441a      	add	r2, r3
    f45a:	687b      	ldr	r3, [r7, #4]
    f45c:	619a      	str	r2, [r3, #24]
			return;
    f45e:	e004      	b.n	f46a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    f460:	7bfb      	ldrb	r3, [r7, #15]
    f462:	3301      	adds	r3, #1
    f464:	73fb      	strb	r3, [r7, #15]
    f466:	e7e2      	b.n	f42e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    f468:	bf00      	nop
}
    f46a:	3714      	adds	r7, #20
    f46c:	46bd      	mov	sp, r7
    f46e:	bc80      	pop	{r7}
    f470:	4770      	bx	lr
    f472:	bf00      	nop
    f474:	20001478 	.word	0x20001478

0000f478 <_Z41__static_initialization_and_destruction_0ii>:
    f478:	b580      	push	{r7, lr}
    f47a:	b082      	sub	sp, #8
    f47c:	af00      	add	r7, sp, #0
    f47e:	6078      	str	r0, [r7, #4]
    f480:	6039      	str	r1, [r7, #0]
    f482:	687b      	ldr	r3, [r7, #4]
    f484:	2b01      	cmp	r3, #1
    f486:	d14c      	bne.n	f522 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    f488:	683b      	ldr	r3, [r7, #0]
    f48a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f48e:	4293      	cmp	r3, r2
    f490:	d147      	bne.n	f522 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f492:	4926      	ldr	r1, [pc, #152]	; (f52c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    f494:	4826      	ldr	r0, [pc, #152]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f496:	4b27      	ldr	r3, [pc, #156]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f498:	4798      	blx	r3
    f49a:	4a27      	ldr	r2, [pc, #156]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f49c:	4927      	ldr	r1, [pc, #156]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f49e:	4824      	ldr	r0, [pc, #144]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f4a0:	4b27      	ldr	r3, [pc, #156]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4a2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f4a4:	4927      	ldr	r1, [pc, #156]	; (f544 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f4a6:	4828      	ldr	r0, [pc, #160]	; (f548 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4a8:	4b22      	ldr	r3, [pc, #136]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4aa:	4798      	blx	r3
    f4ac:	4a22      	ldr	r2, [pc, #136]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4ae:	4923      	ldr	r1, [pc, #140]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4b0:	4825      	ldr	r0, [pc, #148]	; (f548 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f4b2:	4b23      	ldr	r3, [pc, #140]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4b4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f4b6:	4925      	ldr	r1, [pc, #148]	; (f54c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f4b8:	4825      	ldr	r0, [pc, #148]	; (f550 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f4ba:	4b1e      	ldr	r3, [pc, #120]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4bc:	4798      	blx	r3
    f4be:	4a1e      	ldr	r2, [pc, #120]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4c0:	491e      	ldr	r1, [pc, #120]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4c2:	4823      	ldr	r0, [pc, #140]	; (f550 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f4c4:	4b1e      	ldr	r3, [pc, #120]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4c6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f4c8:	4922      	ldr	r1, [pc, #136]	; (f554 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f4ca:	4823      	ldr	r0, [pc, #140]	; (f558 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f4cc:	4b19      	ldr	r3, [pc, #100]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4ce:	4798      	blx	r3
    f4d0:	4a19      	ldr	r2, [pc, #100]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4d2:	491a      	ldr	r1, [pc, #104]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4d4:	4820      	ldr	r0, [pc, #128]	; (f558 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f4d6:	4b1a      	ldr	r3, [pc, #104]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4d8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f4da:	4920      	ldr	r1, [pc, #128]	; (f55c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f4dc:	4820      	ldr	r0, [pc, #128]	; (f560 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f4de:	4b15      	ldr	r3, [pc, #84]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4e0:	4798      	blx	r3
    f4e2:	4a15      	ldr	r2, [pc, #84]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4e4:	4915      	ldr	r1, [pc, #84]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4e6:	481e      	ldr	r0, [pc, #120]	; (f560 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f4e8:	4b15      	ldr	r3, [pc, #84]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4ea:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f4ec:	491d      	ldr	r1, [pc, #116]	; (f564 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f4ee:	481e      	ldr	r0, [pc, #120]	; (f568 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f4f0:	4b10      	ldr	r3, [pc, #64]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f4f2:	4798      	blx	r3
    f4f4:	4a10      	ldr	r2, [pc, #64]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f4f6:	4911      	ldr	r1, [pc, #68]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f4f8:	481b      	ldr	r0, [pc, #108]	; (f568 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f4fa:	4b11      	ldr	r3, [pc, #68]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f4fc:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f4fe:	491b      	ldr	r1, [pc, #108]	; (f56c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f500:	481b      	ldr	r0, [pc, #108]	; (f570 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f502:	4b0c      	ldr	r3, [pc, #48]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f504:	4798      	blx	r3
    f506:	4a0c      	ldr	r2, [pc, #48]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f508:	490c      	ldr	r1, [pc, #48]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f50a:	4819      	ldr	r0, [pc, #100]	; (f570 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f50c:	4b0c      	ldr	r3, [pc, #48]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f50e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f510:	4918      	ldr	r1, [pc, #96]	; (f574 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f512:	4819      	ldr	r0, [pc, #100]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f514:	4b07      	ldr	r3, [pc, #28]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f516:	4798      	blx	r3
    f518:	4a07      	ldr	r2, [pc, #28]	; (f538 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f51a:	4908      	ldr	r1, [pc, #32]	; (f53c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f51c:	4816      	ldr	r0, [pc, #88]	; (f578 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f51e:	4b08      	ldr	r3, [pc, #32]	; (f540 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f520:	4798      	blx	r3
    f522:	bf00      	nop
    f524:	3708      	adds	r7, #8
    f526:	46bd      	mov	sp, r7
    f528:	bd80      	pop	{r7, pc}
    f52a:	bf00      	nop
    f52c:	2000a7d8 	.word	0x2000a7d8
    f530:	20001374 	.word	0x20001374
    f534:	0000f171 	.word	0x0000f171
    f538:	20000000 	.word	0x20000000
    f53c:	0000f1a9 	.word	0x0000f1a9
    f540:	00010a49 	.word	0x00010a49
    f544:	2000a86c 	.word	0x2000a86c
    f548:	20001394 	.word	0x20001394
    f54c:	2000a990 	.word	0x2000a990
    f550:	200013b4 	.word	0x200013b4
    f554:	2000a88c 	.word	0x2000a88c
    f558:	200013d4 	.word	0x200013d4
    f55c:	2000a950 	.word	0x2000a950
    f560:	200013f4 	.word	0x200013f4
    f564:	2000a970 	.word	0x2000a970
    f568:	20001414 	.word	0x20001414
    f56c:	2000a848 	.word	0x2000a848
    f570:	20001434 	.word	0x20001434
    f574:	2000a8e8 	.word	0x2000a8e8
    f578:	20001454 	.word	0x20001454

0000f57c <_GLOBAL__sub_I_ptrTimerClass>:
    f57c:	b580      	push	{r7, lr}
    f57e:	af00      	add	r7, sp, #0
    f580:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f584:	2001      	movs	r0, #1
    f586:	4b01      	ldr	r3, [pc, #4]	; (f58c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    f588:	4798      	blx	r3
    f58a:	bd80      	pop	{r7, pc}
    f58c:	0000f479 	.word	0x0000f479

0000f590 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    f590:	4770      	bx	lr

0000f592 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    f592:	4770      	bx	lr

0000f594 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
    f594:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
    f596:	2302      	movs	r3, #2
    f598:	4801      	ldr	r0, [pc, #4]	; (f5a0 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
    f59a:	4c02      	ldr	r4, [pc, #8]	; (f5a4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
    f59c:	47a0      	blx	r4
	return	r;
}
    f59e:	bd10      	pop	{r4, pc}
    f5a0:	20008bb0 	.word	0x20008bb0
    f5a4:	0000ff25 	.word	0x0000ff25

0000f5a8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
    f5a8:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
    f5aa:	4b03      	ldr	r3, [pc, #12]	; (f5b8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
    f5ac:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
    f5ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    f5b2:	4b02      	ldr	r3, [pc, #8]	; (f5bc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
    f5b4:	4798      	blx	r3
}
    f5b6:	bd08      	pop	{r3, pc}
    f5b8:	2000177c 	.word	0x2000177c
    f5bc:	0000f595 	.word	0x0000f595

0000f5c0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    f5c0:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    f5c2:	2302      	movs	r3, #2
    f5c4:	4801      	ldr	r0, [pc, #4]	; (f5cc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    f5c6:	4c02      	ldr	r4, [pc, #8]	; (f5d0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    f5c8:	47a0      	blx	r4
	return	w;
}
    f5ca:	bd10      	pop	{r4, pc}
    f5cc:	20008bb0 	.word	0x20008bb0
    f5d0:	0000fef1 	.word	0x0000fef1

0000f5d4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    f5d4:	b500      	push	{lr}
    f5d6:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    f5d8:	4b07      	ldr	r3, [pc, #28]	; (f5f8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    f5da:	881b      	ldrh	r3, [r3, #0]
    f5dc:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    f5e0:	4b06      	ldr	r3, [pc, #24]	; (f5fc <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    f5e2:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    f5e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    f5e8:	3202      	adds	r2, #2
    f5ea:	a901      	add	r1, sp, #4
    f5ec:	4b04      	ldr	r3, [pc, #16]	; (f600 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    f5ee:	4798      	blx	r3
	return	w;
}
    f5f0:	b003      	add	sp, #12
    f5f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f6:	bf00      	nop
    f5f8:	00011538 	.word	0x00011538
    f5fc:	2000177c 	.word	0x2000177c
    f600:	0000f5c1 	.word	0x0000f5c1

0000f604 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    f604:	b510      	push	{r4, lr}
    f606:	4604      	mov	r4, r0
    f608:	30c0      	adds	r0, #192	; 0xc0
    f60a:	4b03      	ldr	r3, [pc, #12]	; (f618 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    f60c:	4798      	blx	r3
    f60e:	4620      	mov	r0, r4
    f610:	4b02      	ldr	r3, [pc, #8]	; (f61c <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    f612:	4798      	blx	r3
{
} //~MemoryManagment_Class
    f614:	4620      	mov	r0, r4
    f616:	bd10      	pop	{r4, pc}
    f618:	0000f8a3 	.word	0x0000f8a3
    f61c:	0000f593 	.word	0x0000f593

0000f620 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    f620:	b538      	push	{r3, r4, r5, lr}
    f622:	4604      	mov	r4, r0
    f624:	4b14      	ldr	r3, [pc, #80]	; (f678 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    f626:	4798      	blx	r3
    f628:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f62c:	4b13      	ldr	r3, [pc, #76]	; (f67c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    f62e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f630:	f44f 7500 	mov.w	r5, #512	; 0x200
    f634:	462a      	mov	r2, r5
    f636:	2100      	movs	r1, #0
    f638:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f63c:	4b10      	ldr	r3, [pc, #64]	; (f680 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    f63e:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f640:	2300      	movs	r3, #0
    f642:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
    f646:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
    f64a:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
    f64e:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
    f652:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
    f656:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
    f65a:	490a      	ldr	r1, [pc, #40]	; (f684 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    f65c:	f246 3214 	movw	r2, #25364	; 0x6314
    f660:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    f662:	4a09      	ldr	r2, [pc, #36]	; (f688 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    f664:	6812      	ldr	r2, [r2, #0]
    f666:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
    f66a:	f246 3118 	movw	r1, #25368	; 0x6318
    f66e:	5062      	str	r2, [r4, r1]
	initiated=false;
    f670:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
    f674:	4620      	mov	r0, r4
    f676:	bd38      	pop	{r3, r4, r5, pc}
    f678:	0000f591 	.word	0x0000f591
    f67c:	0000f8a1 	.word	0x0000f8a1
    f680:	00010e5d 	.word	0x00010e5d
    f684:	20001780 	.word	0x20001780
    f688:	2000177c 	.word	0x2000177c

0000f68c <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    f68c:	b510      	push	{r4, lr}
    f68e:	4604      	mov	r4, r0
		if (qspiFlash.Init())
    f690:	480a      	ldr	r0, [pc, #40]	; (f6bc <_ZN17MemoryFlash_Class4InitEm+0x30>)
    f692:	4b0b      	ldr	r3, [pc, #44]	; (f6c0 <_ZN17MemoryFlash_Class4InitEm+0x34>)
    f694:	4798      	blx	r3
    f696:	b948      	cbnz	r0, f6ac <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
    f698:	490a      	ldr	r1, [pc, #40]	; (f6c4 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    f69a:	480b      	ldr	r0, [pc, #44]	; (f6c8 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    f69c:	4b0b      	ldr	r3, [pc, #44]	; (f6cc <_ZN17MemoryFlash_Class4InitEm+0x40>)
    f69e:	4798      	blx	r3
			initiated=false;
    f6a0:	2300      	movs	r3, #0
    f6a2:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
    f6a6:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    f6aa:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
    f6ac:	4908      	ldr	r1, [pc, #32]	; (f6d0 <_ZN17MemoryFlash_Class4InitEm+0x44>)
    f6ae:	4806      	ldr	r0, [pc, #24]	; (f6c8 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    f6b0:	4b06      	ldr	r3, [pc, #24]	; (f6cc <_ZN17MemoryFlash_Class4InitEm+0x40>)
    f6b2:	4798      	blx	r3
			initiated=true;
    f6b4:	2301      	movs	r3, #1
    f6b6:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
    f6ba:	e7f4      	b.n	f6a6 <_ZN17MemoryFlash_Class4InitEm+0x1a>
    f6bc:	20008bb0 	.word	0x20008bb0
    f6c0:	0000fe55 	.word	0x0000fe55
    f6c4:	00011564 	.word	0x00011564
    f6c8:	20008ff8 	.word	0x20008ff8
    f6cc:	000103f5 	.word	0x000103f5
    f6d0:	00011544 	.word	0x00011544

0000f6d4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
    f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6d6:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
    f6d8:	4b10      	ldr	r3, [pc, #64]	; (f71c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
    f6da:	681c      	ldr	r4, [r3, #0]
    f6dc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
    f6e0:	f246 3314 	movw	r3, #25364	; 0x6314
    f6e4:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
    f6e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f6ea:	4622      	mov	r2, r4
    f6ec:	4629      	mov	r1, r5
    f6ee:	480c      	ldr	r0, [pc, #48]	; (f720 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
    f6f0:	4e0c      	ldr	r6, [pc, #48]	; (f724 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
    f6f2:	47b0      	blx	r6
	  if (r==0)
    f6f4:	4603      	mov	r3, r0
    f6f6:	b108      	cbz	r0, f6fc <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
    f6f8:	4618      	mov	r0, r3
    f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
    f6fc:	883b      	ldrh	r3, [r7, #0]
    f6fe:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
    f700:	4e07      	ldr	r6, [pc, #28]	; (f720 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
    f702:	4621      	mov	r1, r4
    f704:	4630      	mov	r0, r6
    f706:	4b08      	ldr	r3, [pc, #32]	; (f728 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
    f708:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
    f70a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f70e:	4622      	mov	r2, r4
    f710:	4629      	mov	r1, r5
    f712:	4630      	mov	r0, r6
    f714:	4c05      	ldr	r4, [pc, #20]	; (f72c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
    f716:	47a0      	blx	r4
    f718:	4603      	mov	r3, r0
		  return	w;
    f71a:	e7ed      	b.n	f6f8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
    f71c:	2000177c 	.word	0x2000177c
    f720:	20008bb0 	.word	0x20008bb0
    f724:	0000ff25 	.word	0x0000ff25
    f728:	0000fec1 	.word	0x0000fec1
    f72c:	0000fef1 	.word	0x0000fef1

0000f730 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    f730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f734:	4604      	mov	r4, r0
    f736:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    f738:	f246 3318 	movw	r3, #25368	; 0x6318
    f73c:	58c3      	ldr	r3, [r0, r3]
    f73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f746:	d906      	bls.n	f756 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    f748:	4b14      	ldr	r3, [pc, #80]	; (f79c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f74a:	681b      	ldr	r3, [r3, #0]
    f74c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
    f750:	f246 3218 	movw	r2, #25368	; 0x6318
    f754:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    f756:	f246 3618 	movw	r6, #25368	; 0x6318
    f75a:	59a1      	ldr	r1, [r4, r6]
    f75c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    f760:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
    f762:	4d0f      	ldr	r5, [pc, #60]	; (f7a0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
    f764:	4628      	mov	r0, r5
    f766:	4b0f      	ldr	r3, [pc, #60]	; (f7a4 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
    f768:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
    f76a:	4628      	mov	r0, r5
    f76c:	4f0e      	ldr	r7, [pc, #56]	; (f7a8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
    f76e:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    f770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f774:	59a2      	ldr	r2, [r4, r6]
    f776:	4641      	mov	r1, r8
    f778:	4628      	mov	r0, r5
    f77a:	4e0c      	ldr	r6, [pc, #48]	; (f7ac <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
    f77c:	47b0      	blx	r6
    f77e:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
    f780:	4628      	mov	r0, r5
    f782:	47b8      	blx	r7
		   if (w==0)
    f784:	b12e      	cbz	r6, f792 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
    f786:	4b05      	ldr	r3, [pc, #20]	; (f79c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f788:	6818      	ldr	r0, [r3, #0]
    f78a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
    f78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
    f792:	f246 3318 	movw	r3, #25368	; 0x6318
    f796:	58e0      	ldr	r0, [r4, r3]
    f798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f79c:	2000177c 	.word	0x2000177c
    f7a0:	20008bb0 	.word	0x20008bb0
    f7a4:	0000fec1 	.word	0x0000fec1
    f7a8:	0000ffd5 	.word	0x0000ffd5
    f7ac:	0000fef1 	.word	0x0000fef1

0000f7b0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    f7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f7b4:	4c2b      	ldr	r4, [pc, #172]	; (f864 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    f7b6:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    f7ba:	492b      	ldr	r1, [pc, #172]	; (f868 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    f7bc:	4628      	mov	r0, r5
    f7be:	4f2b      	ldr	r7, [pc, #172]	; (f86c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    f7c0:	47b8      	blx	r7
    f7c2:	4e2b      	ldr	r6, [pc, #172]	; (f870 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    f7c4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f89c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    f7c8:	4632      	mov	r2, r6
    f7ca:	4641      	mov	r1, r8
    f7cc:	4628      	mov	r0, r5
    f7ce:	4d29      	ldr	r5, [pc, #164]	; (f874 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    f7d0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f7d2:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    f7d6:	4928      	ldr	r1, [pc, #160]	; (f878 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    f7d8:	4648      	mov	r0, r9
    f7da:	47b8      	blx	r7
    f7dc:	4632      	mov	r2, r6
    f7de:	4641      	mov	r1, r8
    f7e0:	4648      	mov	r0, r9
    f7e2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f7e4:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    f7e8:	4924      	ldr	r1, [pc, #144]	; (f87c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    f7ea:	4648      	mov	r0, r9
    f7ec:	47b8      	blx	r7
    f7ee:	4632      	mov	r2, r6
    f7f0:	4641      	mov	r1, r8
    f7f2:	4648      	mov	r0, r9
    f7f4:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f7f6:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    f7fa:	4921      	ldr	r1, [pc, #132]	; (f880 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    f7fc:	4648      	mov	r0, r9
    f7fe:	47b8      	blx	r7
    f800:	4632      	mov	r2, r6
    f802:	4641      	mov	r1, r8
    f804:	4648      	mov	r0, r9
    f806:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f808:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    f80c:	491d      	ldr	r1, [pc, #116]	; (f884 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    f80e:	4648      	mov	r0, r9
    f810:	47b8      	blx	r7
    f812:	4632      	mov	r2, r6
    f814:	4641      	mov	r1, r8
    f816:	4648      	mov	r0, r9
    f818:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f81a:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    f81e:	491a      	ldr	r1, [pc, #104]	; (f888 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    f820:	4648      	mov	r0, r9
    f822:	47b8      	blx	r7
    f824:	4632      	mov	r2, r6
    f826:	4641      	mov	r1, r8
    f828:	4648      	mov	r0, r9
    f82a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f82c:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    f830:	4916      	ldr	r1, [pc, #88]	; (f88c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    f832:	4648      	mov	r0, r9
    f834:	47b8      	blx	r7
    f836:	4632      	mov	r2, r6
    f838:	4641      	mov	r1, r8
    f83a:	4648      	mov	r0, r9
    f83c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f83e:	f1a4 0918 	sub.w	r9, r4, #24
    f842:	4913      	ldr	r1, [pc, #76]	; (f890 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    f844:	4648      	mov	r0, r9
    f846:	47b8      	blx	r7
    f848:	4632      	mov	r2, r6
    f84a:	4641      	mov	r1, r8
    f84c:	4648      	mov	r0, r9
    f84e:	47a8      	blx	r5
    f850:	3408      	adds	r4, #8
    f852:	4620      	mov	r0, r4
    f854:	4b0f      	ldr	r3, [pc, #60]	; (f894 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    f856:	4798      	blx	r3
    f858:	4632      	mov	r2, r6
    f85a:	490f      	ldr	r1, [pc, #60]	; (f898 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    f85c:	4620      	mov	r0, r4
    f85e:	47a8      	blx	r5
    f860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f864:	20002878 	.word	0x20002878
    f868:	2000a7d8 	.word	0x2000a7d8
    f86c:	0000f171 	.word	0x0000f171
    f870:	20000000 	.word	0x20000000
    f874:	00010a49 	.word	0x00010a49
    f878:	2000a86c 	.word	0x2000a86c
    f87c:	2000a990 	.word	0x2000a990
    f880:	2000a88c 	.word	0x2000a88c
    f884:	2000a950 	.word	0x2000a950
    f888:	2000a970 	.word	0x2000a970
    f88c:	2000a848 	.word	0x2000a848
    f890:	2000a8e8 	.word	0x2000a8e8
    f894:	0000f621 	.word	0x0000f621
    f898:	0000f605 	.word	0x0000f605
    f89c:	0000f1a9 	.word	0x0000f1a9

0000f8a0 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    f8a0:	4770      	bx	lr

0000f8a2 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    f8a2:	4770      	bx	lr

0000f8a4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f8a4:	b580      	push	{r7, lr}
    f8a6:	b084      	sub	sp, #16
    f8a8:	af00      	add	r7, sp, #0
    f8aa:	60f8      	str	r0, [r7, #12]
    f8ac:	60b9      	str	r1, [r7, #8]
    f8ae:	4613      	mov	r3, r2
    f8b0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f8b2:	68fb      	ldr	r3, [r7, #12]
    f8b4:	2b00      	cmp	r3, #0
    f8b6:	d004      	beq.n	f8c2 <io_write+0x1e>
    f8b8:	68bb      	ldr	r3, [r7, #8]
    f8ba:	2b00      	cmp	r3, #0
    f8bc:	d001      	beq.n	f8c2 <io_write+0x1e>
    f8be:	2301      	movs	r3, #1
    f8c0:	e000      	b.n	f8c4 <io_write+0x20>
    f8c2:	2300      	movs	r3, #0
    f8c4:	f003 0301 	and.w	r3, r3, #1
    f8c8:	b2db      	uxtb	r3, r3
    f8ca:	2234      	movs	r2, #52	; 0x34
    f8cc:	4907      	ldr	r1, [pc, #28]	; (f8ec <io_write+0x48>)
    f8ce:	4618      	mov	r0, r3
    f8d0:	4b07      	ldr	r3, [pc, #28]	; (f8f0 <io_write+0x4c>)
    f8d2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f8d4:	68fb      	ldr	r3, [r7, #12]
    f8d6:	681b      	ldr	r3, [r3, #0]
    f8d8:	88fa      	ldrh	r2, [r7, #6]
    f8da:	68b9      	ldr	r1, [r7, #8]
    f8dc:	68f8      	ldr	r0, [r7, #12]
    f8de:	4798      	blx	r3
    f8e0:	4603      	mov	r3, r0
}
    f8e2:	4618      	mov	r0, r3
    f8e4:	3710      	adds	r7, #16
    f8e6:	46bd      	mov	sp, r7
    f8e8:	bd80      	pop	{r7, pc}
    f8ea:	bf00      	nop
    f8ec:	00011584 	.word	0x00011584
    f8f0:	00005239 	.word	0x00005239

0000f8f4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f8f4:	b580      	push	{r7, lr}
    f8f6:	b084      	sub	sp, #16
    f8f8:	af00      	add	r7, sp, #0
    f8fa:	60f8      	str	r0, [r7, #12]
    f8fc:	60b9      	str	r1, [r7, #8]
    f8fe:	4613      	mov	r3, r2
    f900:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f902:	68fb      	ldr	r3, [r7, #12]
    f904:	2b00      	cmp	r3, #0
    f906:	d004      	beq.n	f912 <io_read+0x1e>
    f908:	68bb      	ldr	r3, [r7, #8]
    f90a:	2b00      	cmp	r3, #0
    f90c:	d001      	beq.n	f912 <io_read+0x1e>
    f90e:	2301      	movs	r3, #1
    f910:	e000      	b.n	f914 <io_read+0x20>
    f912:	2300      	movs	r3, #0
    f914:	f003 0301 	and.w	r3, r3, #1
    f918:	b2db      	uxtb	r3, r3
    f91a:	223d      	movs	r2, #61	; 0x3d
    f91c:	4907      	ldr	r1, [pc, #28]	; (f93c <io_read+0x48>)
    f91e:	4618      	mov	r0, r3
    f920:	4b07      	ldr	r3, [pc, #28]	; (f940 <io_read+0x4c>)
    f922:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f924:	68fb      	ldr	r3, [r7, #12]
    f926:	685b      	ldr	r3, [r3, #4]
    f928:	88fa      	ldrh	r2, [r7, #6]
    f92a:	68b9      	ldr	r1, [r7, #8]
    f92c:	68f8      	ldr	r0, [r7, #12]
    f92e:	4798      	blx	r3
    f930:	4603      	mov	r3, r0
}
    f932:	4618      	mov	r0, r3
    f934:	3710      	adds	r7, #16
    f936:	46bd      	mov	sp, r7
    f938:	bd80      	pop	{r7, pc}
    f93a:	bf00      	nop
    f93c:	00011584 	.word	0x00011584
    f940:	00005239 	.word	0x00005239

0000f944 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    f944:	b480      	push	{r7}
    f946:	b085      	sub	sp, #20
    f948:	af00      	add	r7, sp, #0
    f94a:	60f8      	str	r0, [r7, #12]
    f94c:	460b      	mov	r3, r1
    f94e:	607a      	str	r2, [r7, #4]
    f950:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    f952:	7afb      	ldrb	r3, [r7, #11]
    f954:	68fa      	ldr	r2, [r7, #12]
    f956:	01db      	lsls	r3, r3, #7
    f958:	4413      	add	r3, r2
    f95a:	3308      	adds	r3, #8
    f95c:	687a      	ldr	r2, [r7, #4]
    f95e:	601a      	str	r2, [r3, #0]
}
    f960:	bf00      	nop
    f962:	3714      	adds	r7, #20
    f964:	46bd      	mov	sp, r7
    f966:	bc80      	pop	{r7}
    f968:	4770      	bx	lr

0000f96a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    f96a:	b480      	push	{r7}
    f96c:	b085      	sub	sp, #20
    f96e:	af00      	add	r7, sp, #0
    f970:	60f8      	str	r0, [r7, #12]
    f972:	460b      	mov	r3, r1
    f974:	607a      	str	r2, [r7, #4]
    f976:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f978:	7afb      	ldrb	r3, [r7, #11]
    f97a:	68fa      	ldr	r2, [r7, #12]
    f97c:	01db      	lsls	r3, r3, #7
    f97e:	4413      	add	r3, r2
    f980:	3304      	adds	r3, #4
    f982:	687a      	ldr	r2, [r7, #4]
    f984:	601a      	str	r2, [r3, #0]
}
    f986:	bf00      	nop
    f988:	3714      	adds	r7, #20
    f98a:	46bd      	mov	sp, r7
    f98c:	bc80      	pop	{r7}
    f98e:	4770      	bx	lr

0000f990 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f990:	b480      	push	{r7}
    f992:	b085      	sub	sp, #20
    f994:	af00      	add	r7, sp, #0
    f996:	60f8      	str	r0, [r7, #12]
    f998:	460b      	mov	r3, r1
    f99a:	607a      	str	r2, [r7, #4]
    f99c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f99e:	7afb      	ldrb	r3, [r7, #11]
    f9a0:	68fa      	ldr	r2, [r7, #12]
    f9a2:	01db      	lsls	r3, r3, #7
    f9a4:	4413      	add	r3, r2
    f9a6:	3318      	adds	r3, #24
    f9a8:	687a      	ldr	r2, [r7, #4]
    f9aa:	601a      	str	r2, [r3, #0]
}
    f9ac:	bf00      	nop
    f9ae:	3714      	adds	r7, #20
    f9b0:	46bd      	mov	sp, r7
    f9b2:	bc80      	pop	{r7}
    f9b4:	4770      	bx	lr

0000f9b6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    f9b6:	b480      	push	{r7}
    f9b8:	b085      	sub	sp, #20
    f9ba:	af00      	add	r7, sp, #0
    f9bc:	60f8      	str	r0, [r7, #12]
    f9be:	460b      	mov	r3, r1
    f9c0:	607a      	str	r2, [r7, #4]
    f9c2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f9c4:	7afb      	ldrb	r3, [r7, #11]
    f9c6:	68fa      	ldr	r2, [r7, #12]
    f9c8:	01db      	lsls	r3, r3, #7
    f9ca:	4413      	add	r3, r2
    f9cc:	3314      	adds	r3, #20
    f9ce:	687a      	ldr	r2, [r7, #4]
    f9d0:	601a      	str	r2, [r3, #0]
}
    f9d2:	bf00      	nop
    f9d4:	3714      	adds	r7, #20
    f9d6:	46bd      	mov	sp, r7
    f9d8:	bc80      	pop	{r7}
    f9da:	4770      	bx	lr

0000f9dc <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    f9dc:	b480      	push	{r7}
    f9de:	b085      	sub	sp, #20
    f9e0:	af00      	add	r7, sp, #0
    f9e2:	6078      	str	r0, [r7, #4]
    f9e4:	4608      	mov	r0, r1
    f9e6:	4611      	mov	r1, r2
    f9e8:	461a      	mov	r2, r3
    f9ea:	4603      	mov	r3, r0
    f9ec:	70fb      	strb	r3, [r7, #3]
    f9ee:	460b      	mov	r3, r1
    f9f0:	70bb      	strb	r3, [r7, #2]
    f9f2:	4613      	mov	r3, r2
    f9f4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    f9f6:	78fa      	ldrb	r2, [r7, #3]
    f9f8:	78bb      	ldrb	r3, [r7, #2]
    f9fa:	6879      	ldr	r1, [r7, #4]
    f9fc:	01d2      	lsls	r2, r2, #7
    f9fe:	440a      	add	r2, r1
    fa00:	4413      	add	r3, r2
    fa02:	3330      	adds	r3, #48	; 0x30
    fa04:	781b      	ldrb	r3, [r3, #0]
    fa06:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    fa08:	7bfb      	ldrb	r3, [r7, #15]
    fa0a:	f023 030f 	bic.w	r3, r3, #15
    fa0e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    fa10:	787b      	ldrb	r3, [r7, #1]
    fa12:	f003 030f 	and.w	r3, r3, #15
    fa16:	b2da      	uxtb	r2, r3
    fa18:	7bfb      	ldrb	r3, [r7, #15]
    fa1a:	4313      	orrs	r3, r2
    fa1c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fa1e:	78fa      	ldrb	r2, [r7, #3]
    fa20:	78bb      	ldrb	r3, [r7, #2]
    fa22:	6879      	ldr	r1, [r7, #4]
    fa24:	01d2      	lsls	r2, r2, #7
    fa26:	440a      	add	r2, r1
    fa28:	4413      	add	r3, r2
    fa2a:	3330      	adds	r3, #48	; 0x30
    fa2c:	7bfa      	ldrb	r2, [r7, #15]
    fa2e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa30:	bf00      	nop
    fa32:	3714      	adds	r7, #20
    fa34:	46bd      	mov	sp, r7
    fa36:	bc80      	pop	{r7}
    fa38:	4770      	bx	lr

0000fa3a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    fa3a:	b480      	push	{r7}
    fa3c:	b085      	sub	sp, #20
    fa3e:	af00      	add	r7, sp, #0
    fa40:	6078      	str	r0, [r7, #4]
    fa42:	4608      	mov	r0, r1
    fa44:	4611      	mov	r1, r2
    fa46:	461a      	mov	r2, r3
    fa48:	4603      	mov	r3, r0
    fa4a:	70fb      	strb	r3, [r7, #3]
    fa4c:	460b      	mov	r3, r1
    fa4e:	70bb      	strb	r3, [r7, #2]
    fa50:	4613      	mov	r3, r2
    fa52:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    fa54:	78fa      	ldrb	r2, [r7, #3]
    fa56:	78bb      	ldrb	r3, [r7, #2]
    fa58:	6879      	ldr	r1, [r7, #4]
    fa5a:	01d2      	lsls	r2, r2, #7
    fa5c:	440a      	add	r2, r1
    fa5e:	4413      	add	r3, r2
    fa60:	3330      	adds	r3, #48	; 0x30
    fa62:	781b      	ldrb	r3, [r3, #0]
    fa64:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    fa66:	7bfb      	ldrb	r3, [r7, #15]
    fa68:	f003 030f 	and.w	r3, r3, #15
    fa6c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    fa6e:	787b      	ldrb	r3, [r7, #1]
    fa70:	011b      	lsls	r3, r3, #4
    fa72:	b2da      	uxtb	r2, r3
    fa74:	7bfb      	ldrb	r3, [r7, #15]
    fa76:	4313      	orrs	r3, r2
    fa78:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    fa7a:	78fa      	ldrb	r2, [r7, #3]
    fa7c:	78bb      	ldrb	r3, [r7, #2]
    fa7e:	6879      	ldr	r1, [r7, #4]
    fa80:	01d2      	lsls	r2, r2, #7
    fa82:	440a      	add	r2, r1
    fa84:	4413      	add	r3, r2
    fa86:	3330      	adds	r3, #48	; 0x30
    fa88:	7bfa      	ldrb	r2, [r7, #15]
    fa8a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fa8c:	bf00      	nop
    fa8e:	3714      	adds	r7, #20
    fa90:	46bd      	mov	sp, r7
    fa92:	bc80      	pop	{r7}
    fa94:	4770      	bx	lr

0000fa96 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    fa96:	b480      	push	{r7}
    fa98:	b085      	sub	sp, #20
    fa9a:	af00      	add	r7, sp, #0
    fa9c:	6078      	str	r0, [r7, #4]
    fa9e:	4608      	mov	r0, r1
    faa0:	4611      	mov	r1, r2
    faa2:	461a      	mov	r2, r3
    faa4:	4603      	mov	r3, r0
    faa6:	70fb      	strb	r3, [r7, #3]
    faa8:	460b      	mov	r3, r1
    faaa:	70bb      	strb	r3, [r7, #2]
    faac:	4613      	mov	r3, r2
    faae:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fab0:	78fa      	ldrb	r2, [r7, #3]
    fab2:	78bb      	ldrb	r3, [r7, #2]
    fab4:	6879      	ldr	r1, [r7, #4]
    fab6:	01d2      	lsls	r2, r2, #7
    fab8:	440a      	add	r2, r1
    faba:	4413      	add	r3, r2
    fabc:	3340      	adds	r3, #64	; 0x40
    fabe:	781b      	ldrb	r3, [r3, #0]
    fac0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    fac2:	7bfb      	ldrb	r3, [r7, #15]
    fac4:	f023 0301 	bic.w	r3, r3, #1
    fac8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    faca:	787a      	ldrb	r2, [r7, #1]
    facc:	7bfb      	ldrb	r3, [r7, #15]
    face:	4313      	orrs	r3, r2
    fad0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fad2:	78fa      	ldrb	r2, [r7, #3]
    fad4:	78bb      	ldrb	r3, [r7, #2]
    fad6:	6879      	ldr	r1, [r7, #4]
    fad8:	01d2      	lsls	r2, r2, #7
    fada:	440a      	add	r2, r1
    fadc:	4413      	add	r3, r2
    fade:	3340      	adds	r3, #64	; 0x40
    fae0:	7bfa      	ldrb	r2, [r7, #15]
    fae2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fae4:	bf00      	nop
    fae6:	3714      	adds	r7, #20
    fae8:	46bd      	mov	sp, r7
    faea:	bc80      	pop	{r7}
    faec:	4770      	bx	lr

0000faee <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    faee:	b480      	push	{r7}
    faf0:	b085      	sub	sp, #20
    faf2:	af00      	add	r7, sp, #0
    faf4:	60f8      	str	r0, [r7, #12]
    faf6:	460b      	mov	r3, r1
    faf8:	607a      	str	r2, [r7, #4]
    fafa:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    fafc:	7afb      	ldrb	r3, [r7, #11]
    fafe:	68fa      	ldr	r2, [r7, #12]
    fb00:	01db      	lsls	r3, r3, #7
    fb02:	4413      	add	r3, r2
    fb04:	3328      	adds	r3, #40	; 0x28
    fb06:	687a      	ldr	r2, [r7, #4]
    fb08:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    fb0a:	bf00      	nop
    fb0c:	3714      	adds	r7, #20
    fb0e:	46bd      	mov	sp, r7
    fb10:	bc80      	pop	{r7}
    fb12:	4770      	bx	lr

0000fb14 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    fb14:	b580      	push	{r7, lr}
    fb16:	b082      	sub	sp, #8
    fb18:	af00      	add	r7, sp, #0
    fb1a:	4603      	mov	r3, r0
    fb1c:	6039      	str	r1, [r7, #0]
    fb1e:	71fb      	strb	r3, [r7, #7]
    fb20:	4613      	mov	r3, r2
    fb22:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    fb24:	79bb      	ldrb	r3, [r7, #6]
    fb26:	2b01      	cmp	r3, #1
    fb28:	d01c      	beq.n	fb64 <_gpio_set_direction+0x50>
    fb2a:	2b02      	cmp	r3, #2
    fb2c:	d037      	beq.n	fb9e <_gpio_set_direction+0x8a>
    fb2e:	2b00      	cmp	r3, #0
    fb30:	d14e      	bne.n	fbd0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    fb32:	79fb      	ldrb	r3, [r7, #7]
    fb34:	683a      	ldr	r2, [r7, #0]
    fb36:	4619      	mov	r1, r3
    fb38:	482a      	ldr	r0, [pc, #168]	; (fbe4 <_gpio_set_direction+0xd0>)
    fb3a:	4b2b      	ldr	r3, [pc, #172]	; (fbe8 <_gpio_set_direction+0xd4>)
    fb3c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fb3e:	683b      	ldr	r3, [r7, #0]
    fb40:	b29b      	uxth	r3, r3
    fb42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fb46:	79fb      	ldrb	r3, [r7, #7]
    fb48:	4619      	mov	r1, r3
    fb4a:	4826      	ldr	r0, [pc, #152]	; (fbe4 <_gpio_set_direction+0xd0>)
    fb4c:	4b27      	ldr	r3, [pc, #156]	; (fbec <_gpio_set_direction+0xd8>)
    fb4e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fb50:	683b      	ldr	r3, [r7, #0]
    fb52:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fb54:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fb58:	79fb      	ldrb	r3, [r7, #7]
    fb5a:	4619      	mov	r1, r3
    fb5c:	4821      	ldr	r0, [pc, #132]	; (fbe4 <_gpio_set_direction+0xd0>)
    fb5e:	4b23      	ldr	r3, [pc, #140]	; (fbec <_gpio_set_direction+0xd8>)
    fb60:	4798      	blx	r3
		break;
    fb62:	e03a      	b.n	fbda <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    fb64:	79fb      	ldrb	r3, [r7, #7]
    fb66:	683a      	ldr	r2, [r7, #0]
    fb68:	4619      	mov	r1, r3
    fb6a:	481e      	ldr	r0, [pc, #120]	; (fbe4 <_gpio_set_direction+0xd0>)
    fb6c:	4b1e      	ldr	r3, [pc, #120]	; (fbe8 <_gpio_set_direction+0xd4>)
    fb6e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    fb70:	683b      	ldr	r3, [r7, #0]
    fb72:	b29b      	uxth	r3, r3
    fb74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    fb78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fb7c:	79f9      	ldrb	r1, [r7, #7]
    fb7e:	461a      	mov	r2, r3
    fb80:	4818      	ldr	r0, [pc, #96]	; (fbe4 <_gpio_set_direction+0xd0>)
    fb82:	4b1a      	ldr	r3, [pc, #104]	; (fbec <_gpio_set_direction+0xd8>)
    fb84:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    fb86:	683b      	ldr	r3, [r7, #0]
    fb88:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    fb8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    fb8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    fb92:	79f9      	ldrb	r1, [r7, #7]
    fb94:	461a      	mov	r2, r3
    fb96:	4813      	ldr	r0, [pc, #76]	; (fbe4 <_gpio_set_direction+0xd0>)
    fb98:	4b14      	ldr	r3, [pc, #80]	; (fbec <_gpio_set_direction+0xd8>)
    fb9a:	4798      	blx	r3
		break;
    fb9c:	e01d      	b.n	fbda <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    fb9e:	79fb      	ldrb	r3, [r7, #7]
    fba0:	683a      	ldr	r2, [r7, #0]
    fba2:	4619      	mov	r1, r3
    fba4:	480f      	ldr	r0, [pc, #60]	; (fbe4 <_gpio_set_direction+0xd0>)
    fba6:	4b12      	ldr	r3, [pc, #72]	; (fbf0 <_gpio_set_direction+0xdc>)
    fba8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    fbaa:	683b      	ldr	r3, [r7, #0]
    fbac:	b29b      	uxth	r3, r3
    fbae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    fbb2:	79fb      	ldrb	r3, [r7, #7]
    fbb4:	4619      	mov	r1, r3
    fbb6:	480b      	ldr	r0, [pc, #44]	; (fbe4 <_gpio_set_direction+0xd0>)
    fbb8:	4b0c      	ldr	r3, [pc, #48]	; (fbec <_gpio_set_direction+0xd8>)
    fbba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fbbc:	683b      	ldr	r3, [r7, #0]
    fbbe:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    fbc0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    fbc4:	79fb      	ldrb	r3, [r7, #7]
    fbc6:	4619      	mov	r1, r3
    fbc8:	4806      	ldr	r0, [pc, #24]	; (fbe4 <_gpio_set_direction+0xd0>)
    fbca:	4b08      	ldr	r3, [pc, #32]	; (fbec <_gpio_set_direction+0xd8>)
    fbcc:	4798      	blx	r3
		break;
    fbce:	e004      	b.n	fbda <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    fbd0:	2246      	movs	r2, #70	; 0x46
    fbd2:	4908      	ldr	r1, [pc, #32]	; (fbf4 <_gpio_set_direction+0xe0>)
    fbd4:	2000      	movs	r0, #0
    fbd6:	4b08      	ldr	r3, [pc, #32]	; (fbf8 <_gpio_set_direction+0xe4>)
    fbd8:	4798      	blx	r3
	}
}
    fbda:	bf00      	nop
    fbdc:	3708      	adds	r7, #8
    fbde:	46bd      	mov	sp, r7
    fbe0:	bd80      	pop	{r7, pc}
    fbe2:	bf00      	nop
    fbe4:	41008000 	.word	0x41008000
    fbe8:	0000f96b 	.word	0x0000f96b
    fbec:	0000faef 	.word	0x0000faef
    fbf0:	0000f945 	.word	0x0000f945
    fbf4:	00011598 	.word	0x00011598
    fbf8:	00005239 	.word	0x00005239

0000fbfc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    fbfc:	b580      	push	{r7, lr}
    fbfe:	b082      	sub	sp, #8
    fc00:	af00      	add	r7, sp, #0
    fc02:	4603      	mov	r3, r0
    fc04:	6039      	str	r1, [r7, #0]
    fc06:	71fb      	strb	r3, [r7, #7]
    fc08:	4613      	mov	r3, r2
    fc0a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    fc0c:	79bb      	ldrb	r3, [r7, #6]
    fc0e:	2b00      	cmp	r3, #0
    fc10:	d006      	beq.n	fc20 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    fc12:	79fb      	ldrb	r3, [r7, #7]
    fc14:	683a      	ldr	r2, [r7, #0]
    fc16:	4619      	mov	r1, r3
    fc18:	4806      	ldr	r0, [pc, #24]	; (fc34 <_gpio_set_level+0x38>)
    fc1a:	4b07      	ldr	r3, [pc, #28]	; (fc38 <_gpio_set_level+0x3c>)
    fc1c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    fc1e:	e005      	b.n	fc2c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    fc20:	79fb      	ldrb	r3, [r7, #7]
    fc22:	683a      	ldr	r2, [r7, #0]
    fc24:	4619      	mov	r1, r3
    fc26:	4803      	ldr	r0, [pc, #12]	; (fc34 <_gpio_set_level+0x38>)
    fc28:	4b04      	ldr	r3, [pc, #16]	; (fc3c <_gpio_set_level+0x40>)
    fc2a:	4798      	blx	r3
}
    fc2c:	bf00      	nop
    fc2e:	3708      	adds	r7, #8
    fc30:	46bd      	mov	sp, r7
    fc32:	bd80      	pop	{r7, pc}
    fc34:	41008000 	.word	0x41008000
    fc38:	0000f991 	.word	0x0000f991
    fc3c:	0000f9b7 	.word	0x0000f9b7

0000fc40 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    fc40:	b590      	push	{r4, r7, lr}
    fc42:	b085      	sub	sp, #20
    fc44:	af00      	add	r7, sp, #0
    fc46:	6078      	str	r0, [r7, #4]
    fc48:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    fc4a:	687b      	ldr	r3, [r7, #4]
    fc4c:	095b      	lsrs	r3, r3, #5
    fc4e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    fc50:	687b      	ldr	r3, [r7, #4]
    fc52:	b2db      	uxtb	r3, r3
    fc54:	f003 031f 	and.w	r3, r3, #31
    fc58:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    fc5a:	683b      	ldr	r3, [r7, #0]
    fc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    fc60:	d106      	bne.n	fc70 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    fc62:	7bba      	ldrb	r2, [r7, #14]
    fc64:	7bf9      	ldrb	r1, [r7, #15]
    fc66:	2300      	movs	r3, #0
    fc68:	4812      	ldr	r0, [pc, #72]	; (fcb4 <_gpio_set_pin_function+0x74>)
    fc6a:	4c13      	ldr	r4, [pc, #76]	; (fcb8 <_gpio_set_pin_function+0x78>)
    fc6c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    fc6e:	e01d      	b.n	fcac <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    fc70:	7bba      	ldrb	r2, [r7, #14]
    fc72:	7bf9      	ldrb	r1, [r7, #15]
    fc74:	2301      	movs	r3, #1
    fc76:	480f      	ldr	r0, [pc, #60]	; (fcb4 <_gpio_set_pin_function+0x74>)
    fc78:	4c0f      	ldr	r4, [pc, #60]	; (fcb8 <_gpio_set_pin_function+0x78>)
    fc7a:	47a0      	blx	r4
		if (pin & 1) {
    fc7c:	7bbb      	ldrb	r3, [r7, #14]
    fc7e:	f003 0301 	and.w	r3, r3, #1
    fc82:	2b00      	cmp	r3, #0
    fc84:	d009      	beq.n	fc9a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    fc86:	7bbb      	ldrb	r3, [r7, #14]
    fc88:	105b      	asrs	r3, r3, #1
    fc8a:	b2da      	uxtb	r2, r3
    fc8c:	683b      	ldr	r3, [r7, #0]
    fc8e:	b2db      	uxtb	r3, r3
    fc90:	7bf9      	ldrb	r1, [r7, #15]
    fc92:	4808      	ldr	r0, [pc, #32]	; (fcb4 <_gpio_set_pin_function+0x74>)
    fc94:	4c09      	ldr	r4, [pc, #36]	; (fcbc <_gpio_set_pin_function+0x7c>)
    fc96:	47a0      	blx	r4
}
    fc98:	e008      	b.n	fcac <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    fc9a:	7bbb      	ldrb	r3, [r7, #14]
    fc9c:	105b      	asrs	r3, r3, #1
    fc9e:	b2da      	uxtb	r2, r3
    fca0:	683b      	ldr	r3, [r7, #0]
    fca2:	b2db      	uxtb	r3, r3
    fca4:	7bf9      	ldrb	r1, [r7, #15]
    fca6:	4803      	ldr	r0, [pc, #12]	; (fcb4 <_gpio_set_pin_function+0x74>)
    fca8:	4c05      	ldr	r4, [pc, #20]	; (fcc0 <_gpio_set_pin_function+0x80>)
    fcaa:	47a0      	blx	r4
}
    fcac:	bf00      	nop
    fcae:	3714      	adds	r7, #20
    fcb0:	46bd      	mov	sp, r7
    fcb2:	bd90      	pop	{r4, r7, pc}
    fcb4:	41008000 	.word	0x41008000
    fcb8:	0000fa97 	.word	0x0000fa97
    fcbc:	0000fa3b 	.word	0x0000fa3b
    fcc0:	0000f9dd 	.word	0x0000f9dd

0000fcc4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    fcc4:	b580      	push	{r7, lr}
    fcc6:	b082      	sub	sp, #8
    fcc8:	af00      	add	r7, sp, #0
    fcca:	6078      	str	r0, [r7, #4]
    fccc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    fcce:	6839      	ldr	r1, [r7, #0]
    fcd0:	6878      	ldr	r0, [r7, #4]
    fcd2:	4b03      	ldr	r3, [pc, #12]	; (fce0 <gpio_set_pin_function+0x1c>)
    fcd4:	4798      	blx	r3
}
    fcd6:	bf00      	nop
    fcd8:	3708      	adds	r7, #8
    fcda:	46bd      	mov	sp, r7
    fcdc:	bd80      	pop	{r7, pc}
    fcde:	bf00      	nop
    fce0:	0000fc41 	.word	0x0000fc41

0000fce4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    fce4:	b580      	push	{r7, lr}
    fce6:	b082      	sub	sp, #8
    fce8:	af00      	add	r7, sp, #0
    fcea:	4603      	mov	r3, r0
    fcec:	460a      	mov	r2, r1
    fcee:	71fb      	strb	r3, [r7, #7]
    fcf0:	4613      	mov	r3, r2
    fcf2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    fcf4:	79fb      	ldrb	r3, [r7, #7]
    fcf6:	115b      	asrs	r3, r3, #5
    fcf8:	b2d8      	uxtb	r0, r3
    fcfa:	79fb      	ldrb	r3, [r7, #7]
    fcfc:	f003 031f 	and.w	r3, r3, #31
    fd00:	2201      	movs	r2, #1
    fd02:	fa02 f303 	lsl.w	r3, r2, r3
    fd06:	79ba      	ldrb	r2, [r7, #6]
    fd08:	4619      	mov	r1, r3
    fd0a:	4b03      	ldr	r3, [pc, #12]	; (fd18 <gpio_set_pin_direction+0x34>)
    fd0c:	4798      	blx	r3
}
    fd0e:	bf00      	nop
    fd10:	3708      	adds	r7, #8
    fd12:	46bd      	mov	sp, r7
    fd14:	bd80      	pop	{r7, pc}
    fd16:	bf00      	nop
    fd18:	0000fb15 	.word	0x0000fb15

0000fd1c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    fd1c:	b580      	push	{r7, lr}
    fd1e:	b082      	sub	sp, #8
    fd20:	af00      	add	r7, sp, #0
    fd22:	4603      	mov	r3, r0
    fd24:	460a      	mov	r2, r1
    fd26:	71fb      	strb	r3, [r7, #7]
    fd28:	4613      	mov	r3, r2
    fd2a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    fd2c:	79fb      	ldrb	r3, [r7, #7]
    fd2e:	115b      	asrs	r3, r3, #5
    fd30:	b2d8      	uxtb	r0, r3
    fd32:	79fb      	ldrb	r3, [r7, #7]
    fd34:	f003 031f 	and.w	r3, r3, #31
    fd38:	2201      	movs	r2, #1
    fd3a:	fa02 f303 	lsl.w	r3, r2, r3
    fd3e:	79ba      	ldrb	r2, [r7, #6]
    fd40:	4619      	mov	r1, r3
    fd42:	4b03      	ldr	r3, [pc, #12]	; (fd50 <gpio_set_pin_level+0x34>)
    fd44:	4798      	blx	r3
}
    fd46:	bf00      	nop
    fd48:	3708      	adds	r7, #8
    fd4a:	46bd      	mov	sp, r7
    fd4c:	bd80      	pop	{r7, pc}
    fd4e:	bf00      	nop
    fd50:	0000fbfd 	.word	0x0000fbfd

0000fd54 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    fd54:	b580      	push	{r7, lr}
    fd56:	b082      	sub	sp, #8
    fd58:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    fd5a:	2100      	movs	r1, #0
    fd5c:	2008      	movs	r0, #8
    fd5e:	4b24      	ldr	r3, [pc, #144]	; (fdf0 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fd60:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    fd62:	2100      	movs	r1, #0
    fd64:	202b      	movs	r0, #43	; 0x2b
    fd66:	4b22      	ldr	r3, [pc, #136]	; (fdf0 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fd68:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    fd6a:	2100      	movs	r1, #0
    fd6c:	202a      	movs	r0, #42	; 0x2a
    fd6e:	4b20      	ldr	r3, [pc, #128]	; (fdf0 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    fd70:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    fd72:	2102      	movs	r1, #2
    fd74:	2008      	movs	r0, #8
    fd76:	4b1f      	ldr	r3, [pc, #124]	; (fdf4 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd78:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    fd7a:	2102      	movs	r1, #2
    fd7c:	202b      	movs	r0, #43	; 0x2b
    fd7e:	4b1d      	ldr	r3, [pc, #116]	; (fdf4 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd80:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    fd82:	2102      	movs	r1, #2
    fd84:	202a      	movs	r0, #42	; 0x2a
    fd86:	4b1b      	ldr	r3, [pc, #108]	; (fdf4 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    fd88:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    fd8a:	2101      	movs	r1, #1
    fd8c:	2008      	movs	r0, #8
    fd8e:	4b1a      	ldr	r3, [pc, #104]	; (fdf8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd90:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    fd92:	2100      	movs	r1, #0
    fd94:	202b      	movs	r0, #43	; 0x2b
    fd96:	4b18      	ldr	r3, [pc, #96]	; (fdf8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fd98:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    fd9a:	2100      	movs	r1, #0
    fd9c:	202a      	movs	r0, #42	; 0x2a
    fd9e:	4b16      	ldr	r3, [pc, #88]	; (fdf8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fda0:	4798      	blx	r3

	delay_us(1);
    fda2:	2001      	movs	r0, #1
    fda4:	4b15      	ldr	r3, [pc, #84]	; (fdfc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fda6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    fda8:	2300      	movs	r3, #0
    fdaa:	607b      	str	r3, [r7, #4]
    fdac:	687b      	ldr	r3, [r7, #4]
    fdae:	2b06      	cmp	r3, #6
    fdb0:	dc11      	bgt.n	fdd6 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    fdb2:	2101      	movs	r1, #1
    fdb4:	202a      	movs	r0, #42	; 0x2a
    fdb6:	4b10      	ldr	r3, [pc, #64]	; (fdf8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fdb8:	4798      	blx	r3
		delay_us(1);
    fdba:	2001      	movs	r0, #1
    fdbc:	4b0f      	ldr	r3, [pc, #60]	; (fdfc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fdbe:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    fdc0:	2100      	movs	r1, #0
    fdc2:	202a      	movs	r0, #42	; 0x2a
    fdc4:	4b0c      	ldr	r3, [pc, #48]	; (fdf8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fdc6:	4798      	blx	r3
		delay_us(1);
    fdc8:	2001      	movs	r0, #1
    fdca:	4b0c      	ldr	r3, [pc, #48]	; (fdfc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fdcc:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    fdce:	687b      	ldr	r3, [r7, #4]
    fdd0:	3301      	adds	r3, #1
    fdd2:	607b      	str	r3, [r7, #4]
    fdd4:	e7ea      	b.n	fdac <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    fdd6:	2101      	movs	r1, #1
    fdd8:	202b      	movs	r0, #43	; 0x2b
    fdda:	4b07      	ldr	r3, [pc, #28]	; (fdf8 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    fddc:	4798      	blx	r3
	delay_us(1);
    fdde:	2001      	movs	r0, #1
    fde0:	4b06      	ldr	r3, [pc, #24]	; (fdfc <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    fde2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    fde4:	4b06      	ldr	r3, [pc, #24]	; (fe00 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    fde6:	4798      	blx	r3
}
    fde8:	bf00      	nop
    fdea:	3708      	adds	r7, #8
    fdec:	46bd      	mov	sp, r7
    fdee:	bd80      	pop	{r7, pc}
    fdf0:	0000fcc5 	.word	0x0000fcc5
    fdf4:	0000fce5 	.word	0x0000fce5
    fdf8:	0000fd1d 	.word	0x0000fd1d
    fdfc:	00003e81 	.word	0x00003e81
    fe00:	00002f29 	.word	0x00002f29

0000fe04 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
    fe04:	b480      	push	{r7}
    fe06:	b083      	sub	sp, #12
    fe08:	af00      	add	r7, sp, #0
    fe0a:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    fe0c:	687b      	ldr	r3, [r7, #4]
    fe0e:	4618      	mov	r0, r3
    fe10:	370c      	adds	r7, #12
    fe12:	46bd      	mov	sp, r7
    fe14:	bc80      	pop	{r7}
    fe16:	4770      	bx	lr

0000fe18 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    fe18:	b480      	push	{r7}
    fe1a:	b083      	sub	sp, #12
    fe1c:	af00      	add	r7, sp, #0
    fe1e:	6078      	str	r0, [r7, #4]
    fe20:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    fe22:	687b      	ldr	r3, [r7, #4]
    fe24:	683a      	ldr	r2, [r7, #0]
    fe26:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    fe28:	687b      	ldr	r3, [r7, #4]
    fe2a:	4a04      	ldr	r2, [pc, #16]	; (fe3c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    fe2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    fe30:	687b      	ldr	r3, [r7, #4]
    fe32:	4618      	mov	r0, r3
    fe34:	370c      	adds	r7, #12
    fe36:	46bd      	mov	sp, r7
    fe38:	bc80      	pop	{r7}
    fe3a:	4770      	bx	lr
    fe3c:	001fff00 	.word	0x001fff00

0000fe40 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    fe40:	b480      	push	{r7}
    fe42:	b083      	sub	sp, #12
    fe44:	af00      	add	r7, sp, #0
    fe46:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    fe48:	687b      	ldr	r3, [r7, #4]
    fe4a:	4618      	mov	r0, r3
    fe4c:	370c      	adds	r7, #12
    fe4e:	46bd      	mov	sp, r7
    fe50:	bc80      	pop	{r7}
    fe52:	4770      	bx	lr

0000fe54 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
    fe54:	b580      	push	{r7, lr}
    fe56:	b082      	sub	sp, #8
    fe58:	af00      	add	r7, sp, #0
    fe5a:	6078      	str	r0, [r7, #4]
	xferDone=false;
    fe5c:	687b      	ldr	r3, [r7, #4]
    fe5e:	2200      	movs	r2, #0
    fe60:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
    fe62:	6878      	ldr	r0, [r7, #4]
    fe64:	4b04      	ldr	r3, [pc, #16]	; (fe78 <_ZN13N25Q256_Class4InitEv+0x24>)
    fe66:	4798      	blx	r3
	return SelfTest();
    fe68:	6878      	ldr	r0, [r7, #4]
    fe6a:	4b04      	ldr	r3, [pc, #16]	; (fe7c <_ZN13N25Q256_Class4InitEv+0x28>)
    fe6c:	4798      	blx	r3
    fe6e:	4603      	mov	r3, r0
}
    fe70:	4618      	mov	r0, r3
    fe72:	3708      	adds	r7, #8
    fe74:	46bd      	mov	sp, r7
    fe76:	bd80      	pop	{r7, pc}
    fe78:	0000fe81 	.word	0x0000fe81
    fe7c:	0001001d 	.word	0x0001001d

0000fe80 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    fe80:	b590      	push	{r4, r7, lr}
    fe82:	b083      	sub	sp, #12
    fe84:	af00      	add	r7, sp, #0
    fe86:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    fe88:	687b      	ldr	r3, [r7, #4]
    fe8a:	685b      	ldr	r3, [r3, #4]
    fe8c:	4618      	mov	r0, r3
    fe8e:	4b08      	ldr	r3, [pc, #32]	; (feb0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    fe90:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    fe92:	687b      	ldr	r3, [r7, #4]
    fe94:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    fe96:	2300      	movs	r3, #0
    fe98:	4a06      	ldr	r2, [pc, #24]	; (feb4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    fe9a:	4807      	ldr	r0, [pc, #28]	; (feb8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    fe9c:	4c07      	ldr	r4, [pc, #28]	; (febc <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    fe9e:	47a0      	blx	r4
    fea0:	4602      	mov	r2, r0
    fea2:	687b      	ldr	r3, [r7, #4]
    fea4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    fea8:	bf00      	nop
    feaa:	370c      	adds	r7, #12
    feac:	46bd      	mov	sp, r7
    feae:	bd90      	pop	{r4, r7, pc}
    feb0:	00004261 	.word	0x00004261
    feb4:	0000fd55 	.word	0x0000fd55
    feb8:	20008ba0 	.word	0x20008ba0
    febc:	0000d069 	.word	0x0000d069

0000fec0 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
    fec0:	b580      	push	{r7, lr}
    fec2:	b084      	sub	sp, #16
    fec4:	af00      	add	r7, sp, #0
    fec6:	6078      	str	r0, [r7, #4]
    fec8:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    feca:	687b      	ldr	r3, [r7, #4]
    fecc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    fed0:	685b      	ldr	r3, [r3, #4]
    fed2:	689b      	ldr	r3, [r3, #8]
    fed4:	687a      	ldr	r2, [r7, #4]
    fed6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    feda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    fede:	6839      	ldr	r1, [r7, #0]
    fee0:	4798      	blx	r3
    fee2:	4603      	mov	r3, r0
    fee4:	60fb      	str	r3, [r7, #12]
	return	e;
    fee6:	68fb      	ldr	r3, [r7, #12]
}
    fee8:	4618      	mov	r0, r3
    feea:	3710      	adds	r7, #16
    feec:	46bd      	mov	sp, r7
    feee:	bd80      	pop	{r7, pc}

0000fef0 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    fef0:	b590      	push	{r4, r7, lr}
    fef2:	b087      	sub	sp, #28
    fef4:	af00      	add	r7, sp, #0
    fef6:	60f8      	str	r0, [r7, #12]
    fef8:	60b9      	str	r1, [r7, #8]
    fefa:	607a      	str	r2, [r7, #4]
    fefc:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    fefe:	68fb      	ldr	r3, [r7, #12]
    ff00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    ff04:	685b      	ldr	r3, [r3, #4]
    ff06:	685c      	ldr	r4, [r3, #4]
    ff08:	68fb      	ldr	r3, [r7, #12]
    ff0a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    ff0e:	683b      	ldr	r3, [r7, #0]
    ff10:	687a      	ldr	r2, [r7, #4]
    ff12:	68b9      	ldr	r1, [r7, #8]
    ff14:	47a0      	blx	r4
    ff16:	4603      	mov	r3, r0
    ff18:	617b      	str	r3, [r7, #20]
	return	w;
    ff1a:	697b      	ldr	r3, [r7, #20]
}
    ff1c:	4618      	mov	r0, r3
    ff1e:	371c      	adds	r7, #28
    ff20:	46bd      	mov	sp, r7
    ff22:	bd90      	pop	{r4, r7, pc}

0000ff24 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    ff24:	b590      	push	{r4, r7, lr}
    ff26:	b087      	sub	sp, #28
    ff28:	af00      	add	r7, sp, #0
    ff2a:	60f8      	str	r0, [r7, #12]
    ff2c:	60b9      	str	r1, [r7, #8]
    ff2e:	607a      	str	r2, [r7, #4]
    ff30:	603b      	str	r3, [r7, #0]
	xferDone=false;
    ff32:	68fb      	ldr	r3, [r7, #12]
    ff34:	2200      	movs	r2, #0
    ff36:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    ff38:	68fb      	ldr	r3, [r7, #12]
    ff3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    ff3e:	685b      	ldr	r3, [r3, #4]
    ff40:	681c      	ldr	r4, [r3, #0]
    ff42:	68fb      	ldr	r3, [r7, #12]
    ff44:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    ff48:	683b      	ldr	r3, [r7, #0]
    ff4a:	687a      	ldr	r2, [r7, #4]
    ff4c:	68b9      	ldr	r1, [r7, #8]
    ff4e:	47a0      	blx	r4
    ff50:	4603      	mov	r3, r0
    ff52:	617b      	str	r3, [r7, #20]
	return	r;
    ff54:	697b      	ldr	r3, [r7, #20]
}
    ff56:	4618      	mov	r0, r3
    ff58:	371c      	adds	r7, #28
    ff5a:	46bd      	mov	sp, r7
    ff5c:	bd90      	pop	{r4, r7, pc}
	...

0000ff60 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
    ff60:	b580      	push	{r7, lr}
    ff62:	b082      	sub	sp, #8
    ff64:	af00      	add	r7, sp, #0
    ff66:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    ff68:	687a      	ldr	r2, [r7, #4]
    ff6a:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    ff6e:	f043 0310 	orr.w	r3, r3, #16
    ff72:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    ff76:	687a      	ldr	r2, [r7, #4]
    ff78:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    ff7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ff80:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    ff84:	687a      	ldr	r2, [r7, #4]
    ff86:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    ff8a:	f36f 1305 	bfc	r3, #4, #2
    ff8e:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    ff92:	687b      	ldr	r3, [r7, #4]
    ff94:	2205      	movs	r2, #5
    ff96:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    ff9a:	687b      	ldr	r3, [r7, #4]
    ff9c:	2201      	movs	r2, #1
    ff9e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    ffa2:	687b      	ldr	r3, [r7, #4]
    ffa4:	f203 2212 	addw	r2, r3, #530	; 0x212
    ffa8:	687b      	ldr	r3, [r7, #4]
    ffaa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    ffae:	687b      	ldr	r3, [r7, #4]
    ffb0:	685a      	ldr	r2, [r3, #4]
    ffb2:	687b      	ldr	r3, [r7, #4]
    ffb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
    ffb8:	4619      	mov	r1, r3
    ffba:	4610      	mov	r0, r2
    ffbc:	4b04      	ldr	r3, [pc, #16]	; (ffd0 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    ffbe:	4798      	blx	r3
		return status;
    ffc0:	687b      	ldr	r3, [r7, #4]
    ffc2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    ffc6:	4618      	mov	r0, r3
    ffc8:	3708      	adds	r7, #8
    ffca:	46bd      	mov	sp, r7
    ffcc:	bd80      	pop	{r7, pc}
    ffce:	bf00      	nop
    ffd0:	000042d9 	.word	0x000042d9

0000ffd4 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    ffd4:	b580      	push	{r7, lr}
    ffd6:	b082      	sub	sp, #8
    ffd8:	af00      	add	r7, sp, #0
    ffda:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    ffdc:	6878      	ldr	r0, [r7, #4]
    ffde:	4b0e      	ldr	r3, [pc, #56]	; (10018 <STACK_SIZE+0x18>)
    ffe0:	4798      	blx	r3
    ffe2:	4603      	mov	r3, r0
    ffe4:	461a      	mov	r2, r3
    ffe6:	687b      	ldr	r3, [r7, #4]
    ffe8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    ffec:	687b      	ldr	r3, [r7, #4]
    ffee:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    fff2:	f003 0301 	and.w	r3, r3, #1
    fff6:	2b00      	cmp	r3, #0
    fff8:	d000      	beq.n	fffc <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    fffa:	e7ef      	b.n	ffdc <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   10002:	f003 0301 	and.w	r3, r3, #1
   10006:	2b00      	cmp	r3, #0
   10008:	bf0c      	ite	eq
   1000a:	2301      	moveq	r3, #1
   1000c:	2300      	movne	r3, #0
   1000e:	b2db      	uxtb	r3, r3
}
   10010:	4618      	mov	r0, r3
   10012:	3708      	adds	r7, #8
   10014:	46bd      	mov	sp, r7
   10016:	bd80      	pop	{r7, pc}
   10018:	0000ff61 	.word	0x0000ff61

0001001c <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   1001c:	b590      	push	{r4, r7, lr}
   1001e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   10022:	b085      	sub	sp, #20
   10024:	af00      	add	r7, sp, #0
   10026:	f107 0310 	add.w	r3, r7, #16
   1002a:	3b0c      	subs	r3, #12
   1002c:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   1002e:	f107 0310 	add.w	r3, r7, #16
   10032:	3b0c      	subs	r3, #12
   10034:	681b      	ldr	r3, [r3, #0]
   10036:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1003a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   1003e:	2300      	movs	r3, #0
   10040:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10044:	f102 020c 	add.w	r2, r2, #12
   10048:	6013      	str	r3, [r2, #0]
   1004a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1004e:	f103 030c 	add.w	r3, r3, #12
   10052:	681b      	ldr	r3, [r3, #0]
   10054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10058:	d22f      	bcs.n	100ba <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   1005a:	4b60      	ldr	r3, [pc, #384]	; (101dc <_ZN13N25Q256_Class8SelfTestEv+0x1c0>)
   1005c:	4798      	blx	r3
   1005e:	4603      	mov	r3, r0
   10060:	b2d9      	uxtb	r1, r3
   10062:	f107 0310 	add.w	r3, r7, #16
   10066:	3b08      	subs	r3, #8
   10068:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1006c:	f102 020c 	add.w	r2, r2, #12
   10070:	6812      	ldr	r2, [r2, #0]
   10072:	4413      	add	r3, r2
   10074:	460a      	mov	r2, r1
   10076:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   10078:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1007c:	f103 030c 	add.w	r3, r3, #12
   10080:	681b      	ldr	r3, [r3, #0]
   10082:	b2db      	uxtb	r3, r3
   10084:	425b      	negs	r3, r3
   10086:	b2d9      	uxtb	r1, r3
   10088:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1008c:	f103 0310 	add.w	r3, r3, #16
   10090:	3b08      	subs	r3, #8
   10092:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10096:	f102 020c 	add.w	r2, r2, #12
   1009a:	6812      	ldr	r2, [r2, #0]
   1009c:	4413      	add	r3, r2
   1009e:	460a      	mov	r2, r1
   100a0:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   100a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   100a6:	f103 030c 	add.w	r3, r3, #12
   100aa:	681b      	ldr	r3, [r3, #0]
   100ac:	3301      	adds	r3, #1
   100ae:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   100b2:	f102 020c 	add.w	r2, r2, #12
   100b6:	6013      	str	r3, [r2, #0]
   100b8:	e7c7      	b.n	1004a <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   100ba:	f107 0310 	add.w	r3, r7, #16
   100be:	3b0c      	subs	r3, #12
   100c0:	681b      	ldr	r3, [r3, #0]
   100c2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   100c6:	f107 0310 	add.w	r3, r7, #16
   100ca:	3b0c      	subs	r3, #12
   100cc:	4611      	mov	r1, r2
   100ce:	6818      	ldr	r0, [r3, #0]
   100d0:	4b43      	ldr	r3, [pc, #268]	; (101e0 <_ZN13N25Q256_Class8SelfTestEv+0x1c4>)
   100d2:	4798      	blx	r3
	WaitOnBusy();
   100d4:	f107 0310 	add.w	r3, r7, #16
   100d8:	3b0c      	subs	r3, #12
   100da:	6818      	ldr	r0, [r3, #0]
   100dc:	4b41      	ldr	r3, [pc, #260]	; (101e4 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   100de:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   100e0:	f107 0310 	add.w	r3, r7, #16
   100e4:	3b0c      	subs	r3, #12
   100e6:	681b      	ldr	r3, [r3, #0]
   100e8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   100ec:	f107 0110 	add.w	r1, r7, #16
   100f0:	3908      	subs	r1, #8
   100f2:	f107 0010 	add.w	r0, r7, #16
   100f6:	380c      	subs	r0, #12
   100f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   100fc:	6800      	ldr	r0, [r0, #0]
   100fe:	4c3a      	ldr	r4, [pc, #232]	; (101e8 <_ZN13N25Q256_Class8SelfTestEv+0x1cc>)
   10100:	47a0      	blx	r4
	WaitOnBusy();
   10102:	f107 0310 	add.w	r3, r7, #16
   10106:	3b0c      	subs	r3, #12
   10108:	6818      	ldr	r0, [r3, #0]
   1010a:	4b36      	ldr	r3, [pc, #216]	; (101e4 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   1010c:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   1010e:	f107 0310 	add.w	r3, r7, #16
   10112:	3b0c      	subs	r3, #12
   10114:	681b      	ldr	r3, [r3, #0]
   10116:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1011a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   1011e:	f101 0110 	add.w	r1, r1, #16
   10122:	3908      	subs	r1, #8
   10124:	f107 0010 	add.w	r0, r7, #16
   10128:	380c      	subs	r0, #12
   1012a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1012e:	6800      	ldr	r0, [r0, #0]
   10130:	4c2e      	ldr	r4, [pc, #184]	; (101ec <_ZN13N25Q256_Class8SelfTestEv+0x1d0>)
   10132:	47a0      	blx	r4
	WaitOnBusy();
   10134:	f107 0310 	add.w	r3, r7, #16
   10138:	3b0c      	subs	r3, #12
   1013a:	6818      	ldr	r0, [r3, #0]
   1013c:	4b29      	ldr	r3, [pc, #164]	; (101e4 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   1013e:	4798      	blx	r3
	isOK	 = true;
   10140:	f107 0310 	add.w	r3, r7, #16
   10144:	3b0c      	subs	r3, #12
   10146:	681b      	ldr	r3, [r3, #0]
   10148:	2201      	movs	r2, #1
   1014a:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1014e:	2300      	movs	r3, #0
   10150:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10154:	f102 0208 	add.w	r2, r2, #8
   10158:	6013      	str	r3, [r2, #0]
   1015a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1015e:	f103 0308 	add.w	r3, r3, #8
   10162:	681b      	ldr	r3, [r3, #0]
   10164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10168:	da2b      	bge.n	101c2 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1016a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1016e:	f103 0310 	add.w	r3, r3, #16
   10172:	3b08      	subs	r3, #8
   10174:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10178:	f102 0208 	add.w	r2, r2, #8
   1017c:	6812      	ldr	r2, [r2, #0]
   1017e:	4413      	add	r3, r2
   10180:	781a      	ldrb	r2, [r3, #0]
   10182:	f107 0310 	add.w	r3, r7, #16
   10186:	3b08      	subs	r3, #8
   10188:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   1018c:	f101 0108 	add.w	r1, r1, #8
   10190:	6809      	ldr	r1, [r1, #0]
   10192:	440b      	add	r3, r1
   10194:	781b      	ldrb	r3, [r3, #0]
   10196:	429a      	cmp	r2, r3
   10198:	d007      	beq.n	101aa <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   1019a:	f107 0310 	add.w	r3, r7, #16
   1019e:	3b0c      	subs	r3, #12
   101a0:	681b      	ldr	r3, [r3, #0]
   101a2:	2200      	movs	r2, #0
   101a4:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   101a8:	e00b      	b.n	101c2 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   101aa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   101ae:	f103 0308 	add.w	r3, r3, #8
   101b2:	681b      	ldr	r3, [r3, #0]
   101b4:	3301      	adds	r3, #1
   101b6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   101ba:	f102 0208 	add.w	r2, r2, #8
   101be:	6013      	str	r3, [r2, #0]
   101c0:	e7cb      	b.n	1015a <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   101c2:	f107 0310 	add.w	r3, r7, #16
   101c6:	3b0c      	subs	r3, #12
   101c8:	681b      	ldr	r3, [r3, #0]
   101ca:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   101ce:	4618      	mov	r0, r3
   101d0:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   101d4:	3714      	adds	r7, #20
   101d6:	46bd      	mov	sp, r7
   101d8:	bd90      	pop	{r4, r7, pc}
   101da:	bf00      	nop
   101dc:	00010ef9 	.word	0x00010ef9
   101e0:	0000fec1 	.word	0x0000fec1
   101e4:	0000ffd5 	.word	0x0000ffd5
   101e8:	0000fef1 	.word	0x0000fef1
   101ec:	0000ff25 	.word	0x0000ff25

000101f0 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   101f0:	b580      	push	{r7, lr}
   101f2:	b082      	sub	sp, #8
   101f4:	af00      	add	r7, sp, #0
   101f6:	6078      	str	r0, [r7, #4]
   101f8:	6039      	str	r1, [r7, #0]
   101fa:	687b      	ldr	r3, [r7, #4]
   101fc:	2b01      	cmp	r3, #1
   101fe:	d10d      	bne.n	1021c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10200:	683b      	ldr	r3, [r7, #0]
   10202:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10206:	4293      	cmp	r3, r2
   10208:	d108      	bne.n	1021c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1020a:	4906      	ldr	r1, [pc, #24]	; (10224 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1020c:	4806      	ldr	r0, [pc, #24]	; (10228 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1020e:	4b07      	ldr	r3, [pc, #28]	; (1022c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10210:	4798      	blx	r3
   10212:	4a07      	ldr	r2, [pc, #28]	; (10230 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10214:	4907      	ldr	r1, [pc, #28]	; (10234 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10216:	4804      	ldr	r0, [pc, #16]	; (10228 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10218:	4b07      	ldr	r3, [pc, #28]	; (10238 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1021a:	4798      	blx	r3
   1021c:	bf00      	nop
   1021e:	3708      	adds	r7, #8
   10220:	46bd      	mov	sp, r7
   10222:	bd80      	pop	{r7, pc}
   10224:	2000a868 	.word	0x2000a868
   10228:	20008bb0 	.word	0x20008bb0
   1022c:	0000fe19 	.word	0x0000fe19
   10230:	20000000 	.word	0x20000000
   10234:	0000fe41 	.word	0x0000fe41
   10238:	00010a49 	.word	0x00010a49

0001023c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1023c:	b580      	push	{r7, lr}
   1023e:	af00      	add	r7, sp, #0
   10240:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10244:	2001      	movs	r0, #1
   10246:	4b01      	ldr	r3, [pc, #4]	; (1024c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   10248:	4798      	blx	r3
   1024a:	bd80      	pop	{r7, pc}
   1024c:	000101f1 	.word	0x000101f1

00010250 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   10250:	b510      	push	{r4, lr}
   10252:	4604      	mov	r4, r0
   10254:	4b06      	ldr	r3, [pc, #24]	; (10270 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   10256:	f840 3bb4 	str.w	r3, [r0], #180
   1025a:	4b06      	ldr	r3, [pc, #24]	; (10274 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   1025c:	4798      	blx	r3
   1025e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10262:	4b05      	ldr	r3, [pc, #20]	; (10278 <_ZN18Event_Logger_ClassD1Ev+0x28>)
   10264:	4798      	blx	r3
   10266:	4620      	mov	r0, r4
   10268:	4b04      	ldr	r3, [pc, #16]	; (1027c <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   1026a:	4798      	blx	r3
{
} //~Event_Logger_Class
   1026c:	4620      	mov	r0, r4
   1026e:	bd10      	pop	{r4, pc}
   10270:	000115d8 	.word	0x000115d8
   10274:	000105a5 	.word	0x000105a5
   10278:	00010513 	.word	0x00010513
   1027c:	00010711 	.word	0x00010711

00010280 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   10280:	b510      	push	{r4, lr}
   10282:	4604      	mov	r4, r0
   10284:	4b11      	ldr	r3, [pc, #68]	; (102cc <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   10286:	4798      	blx	r3
   10288:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   1028c:	4b10      	ldr	r3, [pc, #64]	; (102d0 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   1028e:	4798      	blx	r3
   10290:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   10294:	4b0f      	ldr	r3, [pc, #60]	; (102d4 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   10296:	4798      	blx	r3
   10298:	4b0f      	ldr	r3, [pc, #60]	; (102d8 <_ZN18Event_Logger_ClassC1Ev+0x58>)
   1029a:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   1029c:	230a      	movs	r3, #10
   1029e:	f884 36f7 	strb.w	r3, [r4, #1783]	; 0x6f7
	cal=&staticClock;
   102a2:	4b0e      	ldr	r3, [pc, #56]	; (102dc <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   102a4:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
   102a8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   102ac:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
   102b0:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   102b4:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
   102b8:	f503 7388 	add.w	r3, r3, #272	; 0x110
   102bc:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
   102c0:	4b07      	ldr	r3, [pc, #28]	; (102e0 <_ZN18Event_Logger_ClassC1Ev+0x60>)
   102c2:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
   102c6:	4620      	mov	r0, r4
   102c8:	bd10      	pop	{r4, pc}
   102ca:	bf00      	nop
   102cc:	000106a1 	.word	0x000106a1
   102d0:	00010511 	.word	0x00010511
   102d4:	00010555 	.word	0x00010555
   102d8:	000115d8 	.word	0x000115d8
   102dc:	20008de0 	.word	0x20008de0
   102e0:	20000210 	.word	0x20000210

000102e4 <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   102e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102e8:	4604      	mov	r4, r0
   102ea:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   102ec:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
   102f0:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
   102f4:	6803      	ldr	r3, [r0, #0]
   102f6:	681b      	ldr	r3, [r3, #0]
   102f8:	4631      	mov	r1, r6
   102fa:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   102fc:	f204 67bc 	addw	r7, r4, #1724	; 0x6bc
   10300:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
   10304:	681a      	ldr	r2, [r3, #0]
   10306:	685b      	ldr	r3, [r3, #4]
   10308:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   1030c:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   1030e:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   10312:	4629      	mov	r1, r5
   10314:	4640      	mov	r0, r8
   10316:	4b32      	ldr	r3, [pc, #200]	; (103e0 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   10318:	4798      	blx	r3
   1031a:	f884 06f8 	strb.w	r0, [r4, #1784]	; 0x6f8
	if (semiColonPosition>0)
   1031e:	b130      	cbz	r0, 1032e <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   10320:	2807      	cmp	r0, #7
   10322:	dc2d      	bgt.n	10380 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   10324:	4602      	mov	r2, r0
   10326:	4629      	mov	r1, r5
   10328:	4638      	mov	r0, r7
   1032a:	4b2e      	ldr	r3, [pc, #184]	; (103e4 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   1032c:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   1032e:	4628      	mov	r0, r5
   10330:	4b2d      	ldr	r3, [pc, #180]	; (103e8 <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   10332:	4798      	blx	r3
   10334:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
   10338:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   1033a:	2a33      	cmp	r2, #51	; 0x33
   1033c:	dd26      	ble.n	1038c <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   1033e:	4629      	mov	r1, r5
   10340:	4640      	mov	r0, r8
   10342:	4b2a      	ldr	r3, [pc, #168]	; (103ec <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   10344:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   10346:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   1034a:	4429      	add	r1, r5
   1034c:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
   10350:	f101 0230 	add.w	r2, r1, #48	; 0x30
   10354:	f8d1 e000 	ldr.w	lr, [r1]
   10358:	684f      	ldr	r7, [r1, #4]
   1035a:	688d      	ldr	r5, [r1, #8]
   1035c:	68c8      	ldr	r0, [r1, #12]
   1035e:	f8c3 e000 	str.w	lr, [r3]
   10362:	605f      	str	r7, [r3, #4]
   10364:	609d      	str	r5, [r3, #8]
   10366:	60d8      	str	r0, [r3, #12]
   10368:	3110      	adds	r1, #16
   1036a:	3310      	adds	r3, #16
   1036c:	4291      	cmp	r1, r2
   1036e:	d1f1      	bne.n	10354 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   10370:	8808      	ldrh	r0, [r1, #0]
   10372:	788a      	ldrb	r2, [r1, #2]
   10374:	8018      	strh	r0, [r3, #0]
   10376:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   10378:	2333      	movs	r3, #51	; 0x33
   1037a:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
   1037e:	e012      	b.n	103a6 <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   10380:	682a      	ldr	r2, [r5, #0]
   10382:	686b      	ldr	r3, [r5, #4]
   10384:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   10388:	607b      	str	r3, [r7, #4]
   1038a:	e7d0      	b.n	1032e <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   1038c:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   10390:	4429      	add	r1, r5
   10392:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
   10396:	4b13      	ldr	r3, [pc, #76]	; (103e4 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   10398:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   1039a:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
   1039e:	4423      	add	r3, r4
   103a0:	220a      	movs	r2, #10
   103a2:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   103a6:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   103aa:	6803      	ldr	r3, [r0, #0]
   103ac:	685b      	ldr	r3, [r3, #4]
   103ae:	4631      	mov	r1, r6
   103b0:	4798      	blx	r3
   103b2:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
   103b6:	b978      	cbnz	r0, 103d8 <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   103b8:	f04f 33ff 	mov.w	r3, #4294967295
   103bc:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,text_length+1);
   103c0:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
   103c4:	3201      	adds	r2, #1
   103c6:	b2d2      	uxtb	r2, r2
   103c8:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
   103cc:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   103d0:	4b07      	ldr	r3, [pc, #28]	; (103f0 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   103d2:	4798      	blx	r3
   103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   103d8:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
   103dc:	e7f0      	b.n	103c0 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   103de:	bf00      	nop
   103e0:	00010535 	.word	0x00010535
   103e4:	00010d29 	.word	0x00010d29
   103e8:	00010f41 	.word	0x00010f41
   103ec:	00010515 	.word	0x00010515
   103f0:	000105c9 	.word	0x000105c9

000103f4 <_ZN18Event_Logger_Class9SaveEventEPKc>:
	}
	SaveEvent(logger_module);
	
}

void Event_Logger_Class::SaveEvent(char const * text){
   103f4:	b508      	push	{r3, lr}
	
	SaveEvent((uint8_t*)text);
   103f6:	4b01      	ldr	r3, [pc, #4]	; (103fc <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   103f8:	4798      	blx	r3
   103fa:	bd08      	pop	{r3, pc}
   103fc:	000102e5 	.word	0x000102e5

00010400 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   10400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10404:	4c30      	ldr	r4, [pc, #192]	; (104c8 <_GLOBAL__sub_I_local_info_text+0xc8>)
   10406:	f504 758c 	add.w	r5, r4, #280	; 0x118
   1040a:	4930      	ldr	r1, [pc, #192]	; (104cc <_GLOBAL__sub_I_local_info_text+0xcc>)
   1040c:	4628      	mov	r0, r5
   1040e:	4f30      	ldr	r7, [pc, #192]	; (104d0 <_GLOBAL__sub_I_local_info_text+0xd0>)
   10410:	47b8      	blx	r7
   10412:	4e30      	ldr	r6, [pc, #192]	; (104d4 <_GLOBAL__sub_I_local_info_text+0xd4>)
   10414:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1050c <_GLOBAL__sub_I_local_info_text+0x10c>
   10418:	4632      	mov	r2, r6
   1041a:	4641      	mov	r1, r8
   1041c:	4628      	mov	r0, r5
   1041e:	4d2e      	ldr	r5, [pc, #184]	; (104d8 <_GLOBAL__sub_I_local_info_text+0xd8>)
   10420:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   10422:	f504 799c 	add.w	r9, r4, #312	; 0x138
   10426:	492d      	ldr	r1, [pc, #180]	; (104dc <_GLOBAL__sub_I_local_info_text+0xdc>)
   10428:	4648      	mov	r0, r9
   1042a:	47b8      	blx	r7
   1042c:	4632      	mov	r2, r6
   1042e:	4641      	mov	r1, r8
   10430:	4648      	mov	r0, r9
   10432:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   10434:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   10438:	4929      	ldr	r1, [pc, #164]	; (104e0 <_GLOBAL__sub_I_local_info_text+0xe0>)
   1043a:	4648      	mov	r0, r9
   1043c:	47b8      	blx	r7
   1043e:	4632      	mov	r2, r6
   10440:	4641      	mov	r1, r8
   10442:	4648      	mov	r0, r9
   10444:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10446:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   1044a:	4926      	ldr	r1, [pc, #152]	; (104e4 <_GLOBAL__sub_I_local_info_text+0xe4>)
   1044c:	4648      	mov	r0, r9
   1044e:	47b8      	blx	r7
   10450:	4632      	mov	r2, r6
   10452:	4641      	mov	r1, r8
   10454:	4648      	mov	r0, r9
   10456:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   10458:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   1045c:	4922      	ldr	r1, [pc, #136]	; (104e8 <_GLOBAL__sub_I_local_info_text+0xe8>)
   1045e:	4648      	mov	r0, r9
   10460:	47b8      	blx	r7
   10462:	4632      	mov	r2, r6
   10464:	4641      	mov	r1, r8
   10466:	4648      	mov	r0, r9
   10468:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1046a:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   1046e:	491f      	ldr	r1, [pc, #124]	; (104ec <_GLOBAL__sub_I_local_info_text+0xec>)
   10470:	4648      	mov	r0, r9
   10472:	47b8      	blx	r7
   10474:	4632      	mov	r2, r6
   10476:	4641      	mov	r1, r8
   10478:	4648      	mov	r0, r9
   1047a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1047c:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   10480:	491b      	ldr	r1, [pc, #108]	; (104f0 <_GLOBAL__sub_I_local_info_text+0xf0>)
   10482:	4648      	mov	r0, r9
   10484:	47b8      	blx	r7
   10486:	4632      	mov	r2, r6
   10488:	4641      	mov	r1, r8
   1048a:	4648      	mov	r0, r9
   1048c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   1048e:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   10492:	4918      	ldr	r1, [pc, #96]	; (104f4 <_GLOBAL__sub_I_local_info_text+0xf4>)
   10494:	4648      	mov	r0, r9
   10496:	47b8      	blx	r7
   10498:	4632      	mov	r2, r6
   1049a:	4641      	mov	r1, r8
   1049c:	4648      	mov	r0, r9
   1049e:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   104a0:	4915      	ldr	r1, [pc, #84]	; (104f8 <_GLOBAL__sub_I_local_info_text+0xf8>)
   104a2:	4620      	mov	r0, r4
   104a4:	4b15      	ldr	r3, [pc, #84]	; (104fc <_GLOBAL__sub_I_local_info_text+0xfc>)
   104a6:	4798      	blx	r3
   104a8:	4632      	mov	r2, r6
   104aa:	4915      	ldr	r1, [pc, #84]	; (10500 <_GLOBAL__sub_I_local_info_text+0x100>)
   104ac:	4620      	mov	r0, r4
   104ae:	47a8      	blx	r5
 Event_Logger_Class	logger;
   104b0:	f504 7406 	add.w	r4, r4, #536	; 0x218
   104b4:	4620      	mov	r0, r4
   104b6:	4b13      	ldr	r3, [pc, #76]	; (10504 <_GLOBAL__sub_I_local_info_text+0x104>)
   104b8:	4798      	blx	r3
   104ba:	4632      	mov	r2, r6
   104bc:	4912      	ldr	r1, [pc, #72]	; (10508 <_GLOBAL__sub_I_local_info_text+0x108>)
   104be:	4620      	mov	r0, r4
   104c0:	47a8      	blx	r5
   104c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   104c6:	bf00      	nop
   104c8:	20008de0 	.word	0x20008de0
   104cc:	2000a7d8 	.word	0x2000a7d8
   104d0:	0000f171 	.word	0x0000f171
   104d4:	20000000 	.word	0x20000000
   104d8:	00010a49 	.word	0x00010a49
   104dc:	2000a86c 	.word	0x2000a86c
   104e0:	2000a990 	.word	0x2000a990
   104e4:	2000a88c 	.word	0x2000a88c
   104e8:	2000a950 	.word	0x2000a950
   104ec:	2000a970 	.word	0x2000a970
   104f0:	2000a848 	.word	0x2000a848
   104f4:	2000a8e8 	.word	0x2000a8e8
   104f8:	2000a9b0 	.word	0x2000a9b0
   104fc:	000106d5 	.word	0x000106d5
   10500:	00010711 	.word	0x00010711
   10504:	00010281 	.word	0x00010281
   10508:	00010251 	.word	0x00010251
   1050c:	0000f1a9 	.word	0x0000f1a9

00010510 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   10510:	4770      	bx	lr

00010512 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   10512:	4770      	bx	lr

00010514 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   10514:	b538      	push	{r3, r4, r5, lr}
   10516:	4605      	mov	r5, r0
   10518:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   1051a:	4608      	mov	r0, r1
   1051c:	4b04      	ldr	r3, [pc, #16]	; (10530 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   1051e:	4798      	blx	r3
   10520:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   10522:	b2c0      	uxtb	r0, r0
   10524:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   10526:	bfc4      	itt	gt
   10528:	230a      	movgt	r3, #10
   1052a:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   1052e:	bd38      	pop	{r3, r4, r5, pc}
   10530:	00010f41 	.word	0x00010f41

00010534 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   10534:	7808      	ldrb	r0, [r1, #0]
   10536:	b148      	cbz	r0, 1054c <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   10538:	283a      	cmp	r0, #58	; 0x3a
   1053a:	d009      	beq.n	10550 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   1053c:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   1053e:	3301      	adds	r3, #1
   10540:	b2db      	uxtb	r3, r3
   10542:	5cc8      	ldrb	r0, [r1, r3]
   10544:	b118      	cbz	r0, 1054e <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   10546:	283a      	cmp	r0, #58	; 0x3a
   10548:	d1f9      	bne.n	1053e <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   1054a:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   1054c:	4770      	bx	lr
   1054e:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   10550:	2000      	movs	r0, #0
   10552:	4770      	bx	lr

00010554 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   10554:	b510      	push	{r4, lr}
   10556:	4604      	mov	r4, r0
   10558:	4b0d      	ldr	r3, [pc, #52]	; (10590 <_ZN15DataLoger_ClassC1Ev+0x3c>)
   1055a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   1055c:	f44f 7200 	mov.w	r2, #512	; 0x200
   10560:	2100      	movs	r1, #0
   10562:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   10566:	4b0b      	ldr	r3, [pc, #44]	; (10594 <_ZN15DataLoger_ClassC1Ev+0x40>)
   10568:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   1056a:	2300      	movs	r3, #0
   1056c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   10570:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   10574:	230a      	movs	r3, #10
   10576:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   1057a:	4a07      	ldr	r2, [pc, #28]	; (10598 <_ZN15DataLoger_ClassC1Ev+0x44>)
   1057c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   10580:	4b06      	ldr	r3, [pc, #24]	; (1059c <_ZN15DataLoger_ClassC1Ev+0x48>)
   10582:	4907      	ldr	r1, [pc, #28]	; (105a0 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   10584:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   10588:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
   1058c:	4620      	mov	r0, r4
   1058e:	bd10      	pop	{r4, pc}
   10590:	0000fe05 	.word	0x0000fe05
   10594:	00010e5d 	.word	0x00010e5d
   10598:	20009718 	.word	0x20009718
   1059c:	20008ff8 	.word	0x20008ff8
   105a0:	2000a718 	.word	0x2000a718

000105a4 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   105a4:	b510      	push	{r4, lr}
   105a6:	4604      	mov	r4, r0
   105a8:	4b01      	ldr	r3, [pc, #4]	; (105b0 <_ZN15DataLoger_ClassD1Ev+0xc>)
   105aa:	4798      	blx	r3
{
} //~DataLoger_Class
   105ac:	4620      	mov	r0, r4
   105ae:	bd10      	pop	{r4, pc}
   105b0:	0000fe41 	.word	0x0000fe41

000105b4 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   105b4:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   105b8:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   105ba:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   105be:	bf94      	ite	ls
   105c0:	2000      	movls	r0, #0
   105c2:	2001      	movhi	r0, #1
   105c4:	4770      	bx	lr
	...

000105c8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   105c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ca:	b087      	sub	sp, #28
   105cc:	4604      	mov	r4, r0
   105ce:	460e      	mov	r6, r1
	if (len==0xff)
   105d0:	2aff      	cmp	r2, #255	; 0xff
   105d2:	d018      	beq.n	10606 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   105d4:	4615      	mov	r5, r2
		if (IsStackFull())
   105d6:	4b29      	ldr	r3, [pc, #164]	; (1067c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   105d8:	4798      	blx	r3
   105da:	2800      	cmp	r0, #0
   105dc:	d13b      	bne.n	10656 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   105de:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   105e2:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   105e6:	f105 020c 	add.w	r2, r5, #12
   105ea:	4631      	mov	r1, r6
   105ec:	4418      	add	r0, r3
   105ee:	4b24      	ldr	r3, [pc, #144]	; (10680 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   105f0:	4798      	blx	r3
		stackValue+=12+len;
   105f2:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   105f6:	320c      	adds	r2, #12
   105f8:	442a      	add	r2, r5
   105fa:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   105fe:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   10602:	b007      	add	sp, #28
   10604:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   10606:	466d      	mov	r5, sp
   10608:	4f1e      	ldr	r7, [pc, #120]	; (10684 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   1060a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1060c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1060e:	e897 0003 	ldmia.w	r7, {r0, r1}
   10612:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   10616:	4668      	mov	r0, sp
   10618:	4b1b      	ldr	r3, [pc, #108]	; (10688 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   1061a:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   1061c:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   10620:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   10624:	b2c2      	uxtb	r2, r0
   10626:	320d      	adds	r2, #13
   10628:	4631      	mov	r1, r6
   1062a:	18e8      	adds	r0, r5, r3
   1062c:	4b14      	ldr	r3, [pc, #80]	; (10680 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   1062e:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   10630:	4d16      	ldr	r5, [pc, #88]	; (1068c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   10632:	4629      	mov	r1, r5
   10634:	4816      	ldr	r0, [pc, #88]	; (10690 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   10636:	4b17      	ldr	r3, [pc, #92]	; (10694 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   10638:	4798      	blx	r3
   1063a:	4b17      	ldr	r3, [pc, #92]	; (10698 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   1063c:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   10640:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   10644:	2100      	movs	r1, #0
   10646:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   1064a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1064e:	4628      	mov	r0, r5
   10650:	4b12      	ldr	r3, [pc, #72]	; (1069c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   10652:	4798      	blx	r3
   10654:	e7d3      	b.n	105fe <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   10656:	4f0d      	ldr	r7, [pc, #52]	; (1068c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   10658:	4639      	mov	r1, r7
   1065a:	480d      	ldr	r0, [pc, #52]	; (10690 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   1065c:	4b0d      	ldr	r3, [pc, #52]	; (10694 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   1065e:	4798      	blx	r3
   10660:	4b0d      	ldr	r3, [pc, #52]	; (10698 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   10662:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   10666:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   1066a:	2100      	movs	r1, #0
   1066c:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   10670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10674:	4638      	mov	r0, r7
   10676:	4b09      	ldr	r3, [pc, #36]	; (1069c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   10678:	4798      	blx	r3
   1067a:	e7b0      	b.n	105de <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   1067c:	000105b5 	.word	0x000105b5
   10680:	00010d29 	.word	0x00010d29
   10684:	000115e0 	.word	0x000115e0
   10688:	00010f41 	.word	0x00010f41
   1068c:	20009718 	.word	0x20009718
   10690:	20002880 	.word	0x20002880
   10694:	0000f731 	.word	0x0000f731
   10698:	2000a810 	.word	0x2000a810
   1069c:	00010e5d 	.word	0x00010e5d

000106a0 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   106a0:	b580      	push	{r7, lr}
   106a2:	b082      	sub	sp, #8
   106a4:	af00      	add	r7, sp, #0
   106a6:	6078      	str	r0, [r7, #4]
   106a8:	687b      	ldr	r3, [r7, #4]
   106aa:	4618      	mov	r0, r3
   106ac:	4b06      	ldr	r3, [pc, #24]	; (106c8 <_ZN14Calendar_ClassC1Ev+0x28>)
   106ae:	4798      	blx	r3
   106b0:	4a06      	ldr	r2, [pc, #24]	; (106cc <_ZN14Calendar_ClassC1Ev+0x2c>)
   106b2:	687b      	ldr	r3, [r7, #4]
   106b4:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   106b6:	4a06      	ldr	r2, [pc, #24]	; (106d0 <_ZN14Calendar_ClassC1Ev+0x30>)
   106b8:	687b      	ldr	r3, [r7, #4]
   106ba:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   106bc:	687b      	ldr	r3, [r7, #4]
   106be:	4618      	mov	r0, r3
   106c0:	3708      	adds	r7, #8
   106c2:	46bd      	mov	sp, r7
   106c4:	bd80      	pop	{r7, pc}
   106c6:	bf00      	nop
   106c8:	000109e9 	.word	0x000109e9
   106cc:	0001160c 	.word	0x0001160c
   106d0:	2000a720 	.word	0x2000a720

000106d4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   106d4:	b580      	push	{r7, lr}
   106d6:	b082      	sub	sp, #8
   106d8:	af00      	add	r7, sp, #0
   106da:	6078      	str	r0, [r7, #4]
   106dc:	6039      	str	r1, [r7, #0]
   106de:	687b      	ldr	r3, [r7, #4]
   106e0:	4618      	mov	r0, r3
   106e2:	4b08      	ldr	r3, [pc, #32]	; (10704 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   106e4:	4798      	blx	r3
   106e6:	4a08      	ldr	r2, [pc, #32]	; (10708 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   106e8:	687b      	ldr	r3, [r7, #4]
   106ea:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   106ec:	687b      	ldr	r3, [r7, #4]
   106ee:	683a      	ldr	r2, [r7, #0]
   106f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   106f4:	4a05      	ldr	r2, [pc, #20]	; (1070c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   106f6:	687b      	ldr	r3, [r7, #4]
   106f8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   106fa:	687b      	ldr	r3, [r7, #4]
   106fc:	4618      	mov	r0, r3
   106fe:	3708      	adds	r7, #8
   10700:	46bd      	mov	sp, r7
   10702:	bd80      	pop	{r7, pc}
   10704:	000109e9 	.word	0x000109e9
   10708:	0001160c 	.word	0x0001160c
   1070c:	2000a720 	.word	0x2000a720

00010710 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   10710:	b580      	push	{r7, lr}
   10712:	b082      	sub	sp, #8
   10714:	af00      	add	r7, sp, #0
   10716:	6078      	str	r0, [r7, #4]
   10718:	4a05      	ldr	r2, [pc, #20]	; (10730 <_ZN14Calendar_ClassD1Ev+0x20>)
   1071a:	687b      	ldr	r3, [r7, #4]
   1071c:	601a      	str	r2, [r3, #0]
   1071e:	687b      	ldr	r3, [r7, #4]
   10720:	4618      	mov	r0, r3
   10722:	4b04      	ldr	r3, [pc, #16]	; (10734 <_ZN14Calendar_ClassD1Ev+0x24>)
   10724:	4798      	blx	r3
{
} //~Calendar_Class
   10726:	687b      	ldr	r3, [r7, #4]
   10728:	4618      	mov	r0, r3
   1072a:	3708      	adds	r7, #8
   1072c:	46bd      	mov	sp, r7
   1072e:	bd80      	pop	{r7, pc}
   10730:	0001160c 	.word	0x0001160c
   10734:	00010a09 	.word	0x00010a09

00010738 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   10738:	b580      	push	{r7, lr}
   1073a:	b082      	sub	sp, #8
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
   10740:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   10742:	687b      	ldr	r3, [r7, #4]
   10744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   10748:	6839      	ldr	r1, [r7, #0]
   1074a:	4618      	mov	r0, r3
   1074c:	4b03      	ldr	r3, [pc, #12]	; (1075c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   1074e:	4798      	blx	r3
   10750:	4603      	mov	r3, r0
}
   10752:	4618      	mov	r0, r3
   10754:	3708      	adds	r7, #8
   10756:	46bd      	mov	sp, r7
   10758:	bd80      	pop	{r7, pc}
   1075a:	bf00      	nop
   1075c:	00003cf9 	.word	0x00003cf9

00010760 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   10760:	b480      	push	{r7}
   10762:	b083      	sub	sp, #12
   10764:	af00      	add	r7, sp, #0
   10766:	6078      	str	r0, [r7, #4]
   10768:	460b      	mov	r3, r1
   1076a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   1076c:	887b      	ldrh	r3, [r7, #2]
   1076e:	f003 0303 	and.w	r3, r3, #3
   10772:	2b00      	cmp	r3, #0
   10774:	d001      	beq.n	1077a <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   10776:	2300      	movs	r3, #0
   10778:	e000      	b.n	1077c <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   1077a:	2301      	movs	r3, #1
	}
}
   1077c:	4618      	mov	r0, r3
   1077e:	370c      	adds	r7, #12
   10780:	46bd      	mov	sp, r7
   10782:	bc80      	pop	{r7}
   10784:	4770      	bx	lr
	...

00010788 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   10788:	b580      	push	{r7, lr}
   1078a:	b086      	sub	sp, #24
   1078c:	af00      	add	r7, sp, #0
   1078e:	6078      	str	r0, [r7, #4]
   10790:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   10792:	2300      	movs	r3, #0
   10794:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   10796:	2300      	movs	r3, #0
   10798:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1079a:	683b      	ldr	r3, [r7, #0]
   1079c:	88db      	ldrh	r3, [r3, #6]
   1079e:	b2da      	uxtb	r2, r3
   107a0:	687b      	ldr	r3, [r7, #4]
   107a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   107a6:	699b      	ldr	r3, [r3, #24]
   107a8:	b2db      	uxtb	r3, r3
   107aa:	1ad3      	subs	r3, r2, r3
   107ac:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   107ae:	683b      	ldr	r3, [r7, #0]
   107b0:	795b      	ldrb	r3, [r3, #5]
   107b2:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   107b4:	683b      	ldr	r3, [r7, #0]
   107b6:	791b      	ldrb	r3, [r3, #4]
   107b8:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   107ba:	683b      	ldr	r3, [r7, #0]
   107bc:	789b      	ldrb	r3, [r3, #2]
   107be:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   107c0:	683b      	ldr	r3, [r7, #0]
   107c2:	785b      	ldrb	r3, [r3, #1]
   107c4:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   107c6:	683b      	ldr	r3, [r7, #0]
   107c8:	781b      	ldrb	r3, [r3, #0]
   107ca:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   107cc:	2300      	movs	r3, #0
   107ce:	613b      	str	r3, [r7, #16]
   107d0:	7bfa      	ldrb	r2, [r7, #15]
   107d2:	693b      	ldr	r3, [r7, #16]
   107d4:	429a      	cmp	r2, r3
   107d6:	d91e      	bls.n	10816 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   107d8:	687b      	ldr	r3, [r7, #4]
   107da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   107de:	699b      	ldr	r3, [r3, #24]
   107e0:	b29a      	uxth	r2, r3
   107e2:	693b      	ldr	r3, [r7, #16]
   107e4:	b29b      	uxth	r3, r3
   107e6:	4413      	add	r3, r2
   107e8:	b29b      	uxth	r3, r3
   107ea:	4619      	mov	r1, r3
   107ec:	6878      	ldr	r0, [r7, #4]
   107ee:	4b27      	ldr	r3, [pc, #156]	; (1088c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   107f0:	4798      	blx	r3
   107f2:	4603      	mov	r3, r0
   107f4:	2b00      	cmp	r3, #0
   107f6:	d006      	beq.n	10806 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   107f8:	697b      	ldr	r3, [r7, #20]
   107fa:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   107fe:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   10802:	617b      	str	r3, [r7, #20]
   10804:	e003      	b.n	1080e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   10806:	697a      	ldr	r2, [r7, #20]
   10808:	4b21      	ldr	r3, [pc, #132]	; (10890 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   1080a:	4413      	add	r3, r2
   1080c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   1080e:	693b      	ldr	r3, [r7, #16]
   10810:	3301      	adds	r3, #1
   10812:	613b      	str	r3, [r7, #16]
   10814:	e7dc      	b.n	107d0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   10816:	2301      	movs	r3, #1
   10818:	613b      	str	r3, [r7, #16]
   1081a:	7bba      	ldrb	r2, [r7, #14]
   1081c:	693b      	ldr	r3, [r7, #16]
   1081e:	429a      	cmp	r2, r3
   10820:	d910      	bls.n	10844 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   10822:	683b      	ldr	r3, [r7, #0]
   10824:	88db      	ldrh	r3, [r3, #6]
   10826:	4619      	mov	r1, r3
   10828:	693b      	ldr	r3, [r7, #16]
   1082a:	b2db      	uxtb	r3, r3
   1082c:	461a      	mov	r2, r3
   1082e:	6878      	ldr	r0, [r7, #4]
   10830:	4b18      	ldr	r3, [pc, #96]	; (10894 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   10832:	4798      	blx	r3
   10834:	4602      	mov	r2, r0
   10836:	697b      	ldr	r3, [r7, #20]
   10838:	4413      	add	r3, r2
   1083a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   1083c:	693b      	ldr	r3, [r7, #16]
   1083e:	3301      	adds	r3, #1
   10840:	613b      	str	r3, [r7, #16]
   10842:	e7ea      	b.n	1081a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   10844:	7b7b      	ldrb	r3, [r7, #13]
   10846:	3b01      	subs	r3, #1
   10848:	4a13      	ldr	r2, [pc, #76]	; (10898 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1084a:	fb02 f303 	mul.w	r3, r2, r3
   1084e:	461a      	mov	r2, r3
   10850:	697b      	ldr	r3, [r7, #20]
   10852:	4413      	add	r3, r2
   10854:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   10856:	7b3b      	ldrb	r3, [r7, #12]
   10858:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1085c:	fb02 f303 	mul.w	r3, r2, r3
   10860:	461a      	mov	r2, r3
   10862:	697b      	ldr	r3, [r7, #20]
   10864:	4413      	add	r3, r2
   10866:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   10868:	7afa      	ldrb	r2, [r7, #11]
   1086a:	4613      	mov	r3, r2
   1086c:	011b      	lsls	r3, r3, #4
   1086e:	1a9b      	subs	r3, r3, r2
   10870:	009b      	lsls	r3, r3, #2
   10872:	461a      	mov	r2, r3
   10874:	697b      	ldr	r3, [r7, #20]
   10876:	4413      	add	r3, r2
   10878:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1087a:	7abb      	ldrb	r3, [r7, #10]
   1087c:	697a      	ldr	r2, [r7, #20]
   1087e:	4413      	add	r3, r2
   10880:	617b      	str	r3, [r7, #20]

	return tmp;
   10882:	697b      	ldr	r3, [r7, #20]
}
   10884:	4618      	mov	r0, r3
   10886:	3718      	adds	r7, #24
   10888:	46bd      	mov	sp, r7
   1088a:	bd80      	pop	{r7, pc}
   1088c:	00010761 	.word	0x00010761
   10890:	01e13380 	.word	0x01e13380
   10894:	0001089d 	.word	0x0001089d
   10898:	00015180 	.word	0x00015180

0001089c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   1089c:	b580      	push	{r7, lr}
   1089e:	b086      	sub	sp, #24
   108a0:	af00      	add	r7, sp, #0
   108a2:	60f8      	str	r0, [r7, #12]
   108a4:	60b9      	str	r1, [r7, #8]
   108a6:	4613      	mov	r3, r2
   108a8:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   108aa:	2300      	movs	r3, #0
   108ac:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   108ae:	68bb      	ldr	r3, [r7, #8]
   108b0:	b29b      	uxth	r3, r3
   108b2:	4619      	mov	r1, r3
   108b4:	68f8      	ldr	r0, [r7, #12]
   108b6:	4b2f      	ldr	r3, [pc, #188]	; (10974 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   108b8:	4798      	blx	r3
   108ba:	4603      	mov	r3, r0
   108bc:	2b00      	cmp	r3, #0
   108be:	d028      	beq.n	10912 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   108c0:	79fb      	ldrb	r3, [r7, #7]
   108c2:	3b01      	subs	r3, #1
   108c4:	2b0b      	cmp	r3, #11
   108c6:	d84c      	bhi.n	10962 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   108c8:	a201      	add	r2, pc, #4	; (adr r2, 108d0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   108ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   108ce:	bf00      	nop
   108d0:	00010901 	.word	0x00010901
   108d4:	00010907 	.word	0x00010907
   108d8:	00010901 	.word	0x00010901
   108dc:	0001090d 	.word	0x0001090d
   108e0:	00010901 	.word	0x00010901
   108e4:	0001090d 	.word	0x0001090d
   108e8:	00010901 	.word	0x00010901
   108ec:	00010901 	.word	0x00010901
   108f0:	0001090d 	.word	0x0001090d
   108f4:	00010901 	.word	0x00010901
   108f8:	0001090d 	.word	0x0001090d
   108fc:	00010901 	.word	0x00010901
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   10900:	4b1d      	ldr	r3, [pc, #116]	; (10978 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   10902:	617b      	str	r3, [r7, #20]
			break;
   10904:	e030      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   10906:	4b1d      	ldr	r3, [pc, #116]	; (1097c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   10908:	617b      	str	r3, [r7, #20]
			break;
   1090a:	e02d      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1090c:	4b1c      	ldr	r3, [pc, #112]	; (10980 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1090e:	617b      	str	r3, [r7, #20]
			break;
   10910:	e02a      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   10912:	79fb      	ldrb	r3, [r7, #7]
   10914:	3b01      	subs	r3, #1
   10916:	2b0b      	cmp	r3, #11
   10918:	d825      	bhi.n	10966 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   1091a:	a201      	add	r2, pc, #4	; (adr r2, 10920 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   1091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10920:	00010951 	.word	0x00010951
   10924:	00010957 	.word	0x00010957
   10928:	00010951 	.word	0x00010951
   1092c:	0001095d 	.word	0x0001095d
   10930:	00010951 	.word	0x00010951
   10934:	0001095d 	.word	0x0001095d
   10938:	00010951 	.word	0x00010951
   1093c:	00010951 	.word	0x00010951
   10940:	0001095d 	.word	0x0001095d
   10944:	00010951 	.word	0x00010951
   10948:	0001095d 	.word	0x0001095d
   1094c:	00010951 	.word	0x00010951
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   10950:	4b09      	ldr	r3, [pc, #36]	; (10978 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   10952:	617b      	str	r3, [r7, #20]
			break;
   10954:	e008      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   10956:	4b0b      	ldr	r3, [pc, #44]	; (10984 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   10958:	617b      	str	r3, [r7, #20]
			break;
   1095a:	e005      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1095c:	4b08      	ldr	r3, [pc, #32]	; (10980 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1095e:	617b      	str	r3, [r7, #20]
			break;
   10960:	e002      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   10962:	bf00      	nop
   10964:	e000      	b.n	10968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   10966:	bf00      	nop
		}
	}

	return sec_in_month;
   10968:	697b      	ldr	r3, [r7, #20]
}
   1096a:	4618      	mov	r0, r3
   1096c:	3718      	adds	r7, #24
   1096e:	46bd      	mov	sp, r7
   10970:	bd80      	pop	{r7, pc}
   10972:	bf00      	nop
   10974:	00010761 	.word	0x00010761
   10978:	0028de80 	.word	0x0028de80
   1097c:	00263b80 	.word	0x00263b80
   10980:	00278d00 	.word	0x00278d00
   10984:	0024ea00 	.word	0x0024ea00

00010988 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   10988:	b580      	push	{r7, lr}
   1098a:	b082      	sub	sp, #8
   1098c:	af00      	add	r7, sp, #0
   1098e:	6078      	str	r0, [r7, #4]
   10990:	6039      	str	r1, [r7, #0]
   10992:	687b      	ldr	r3, [r7, #4]
   10994:	2b01      	cmp	r3, #1
   10996:	d10d      	bne.n	109b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10998:	683b      	ldr	r3, [r7, #0]
   1099a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1099e:	4293      	cmp	r3, r2
   109a0:	d108      	bne.n	109b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   109a2:	4906      	ldr	r1, [pc, #24]	; (109bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   109a4:	4806      	ldr	r0, [pc, #24]	; (109c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   109a6:	4b07      	ldr	r3, [pc, #28]	; (109c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   109a8:	4798      	blx	r3
   109aa:	4a07      	ldr	r2, [pc, #28]	; (109c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   109ac:	4907      	ldr	r1, [pc, #28]	; (109cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
   109ae:	4804      	ldr	r0, [pc, #16]	; (109c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   109b0:	4b07      	ldr	r3, [pc, #28]	; (109d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   109b2:	4798      	blx	r3
   109b4:	bf00      	nop
   109b6:	3708      	adds	r7, #8
   109b8:	46bd      	mov	sp, r7
   109ba:	bd80      	pop	{r7, pc}
   109bc:	2000a9b0 	.word	0x2000a9b0
   109c0:	2000a728 	.word	0x2000a728
   109c4:	000106d5 	.word	0x000106d5
   109c8:	20000000 	.word	0x20000000
   109cc:	00010711 	.word	0x00010711
   109d0:	00010a49 	.word	0x00010a49

000109d4 <_GLOBAL__sub_I_ptrCalendarClass>:
   109d4:	b580      	push	{r7, lr}
   109d6:	af00      	add	r7, sp, #0
   109d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   109dc:	2001      	movs	r0, #1
   109de:	4b01      	ldr	r3, [pc, #4]	; (109e4 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   109e0:	4798      	blx	r3
   109e2:	bd80      	pop	{r7, pc}
   109e4:	00010989 	.word	0x00010989

000109e8 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   109e8:	b480      	push	{r7}
   109ea:	b083      	sub	sp, #12
   109ec:	af00      	add	r7, sp, #0
   109ee:	6078      	str	r0, [r7, #4]
   109f0:	4a04      	ldr	r2, [pc, #16]	; (10a04 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   109f2:	687b      	ldr	r3, [r7, #4]
   109f4:	601a      	str	r2, [r3, #0]
{
} //~D
   109f6:	687b      	ldr	r3, [r7, #4]
   109f8:	4618      	mov	r0, r3
   109fa:	370c      	adds	r7, #12
   109fc:	46bd      	mov	sp, r7
   109fe:	bc80      	pop	{r7}
   10a00:	4770      	bx	lr
   10a02:	bf00      	nop
   10a04:	0001161c 	.word	0x0001161c

00010a08 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   10a08:	b480      	push	{r7}
   10a0a:	b083      	sub	sp, #12
   10a0c:	af00      	add	r7, sp, #0
   10a0e:	6078      	str	r0, [r7, #4]
   10a10:	4a04      	ldr	r2, [pc, #16]	; (10a24 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   10a12:	687b      	ldr	r3, [r7, #4]
   10a14:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   10a16:	687b      	ldr	r3, [r7, #4]
   10a18:	4618      	mov	r0, r3
   10a1a:	370c      	adds	r7, #12
   10a1c:	46bd      	mov	sp, r7
   10a1e:	bc80      	pop	{r7}
   10a20:	4770      	bx	lr
   10a22:	bf00      	nop
   10a24:	0001161c 	.word	0x0001161c

00010a28 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   10a28:	b480      	push	{r7}
   10a2a:	b083      	sub	sp, #12
   10a2c:	af00      	add	r7, sp, #0
   10a2e:	6078      	str	r0, [r7, #4]
    return (void *)0;
   10a30:	2300      	movs	r3, #0
	}
   10a32:	4618      	mov	r0, r3
   10a34:	370c      	adds	r7, #12
   10a36:	46bd      	mov	sp, r7
   10a38:	bc80      	pop	{r7}
   10a3a:	4770      	bx	lr

00010a3c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   10a3c:	b480      	push	{r7}
   10a3e:	af00      	add	r7, sp, #0
		}
   10a40:	bf00      	nop
   10a42:	46bd      	mov	sp, r7
   10a44:	bc80      	pop	{r7}
   10a46:	4770      	bx	lr

00010a48 <__aeabi_atexit>:
   10a48:	460b      	mov	r3, r1
   10a4a:	4601      	mov	r1, r0
   10a4c:	4618      	mov	r0, r3
   10a4e:	f000 b92f 	b.w	10cb0 <__cxa_atexit>
   10a52:	bf00      	nop

00010a54 <__aeabi_frsub>:
   10a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10a58:	e002      	b.n	10a60 <__addsf3>
   10a5a:	bf00      	nop

00010a5c <__aeabi_fsub>:
   10a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010a60 <__addsf3>:
   10a60:	0042      	lsls	r2, r0, #1
   10a62:	bf1f      	itttt	ne
   10a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10a68:	ea92 0f03 	teqne	r2, r3
   10a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10a74:	d06a      	beq.n	10b4c <__addsf3+0xec>
   10a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10a7e:	bfc1      	itttt	gt
   10a80:	18d2      	addgt	r2, r2, r3
   10a82:	4041      	eorgt	r1, r0
   10a84:	4048      	eorgt	r0, r1
   10a86:	4041      	eorgt	r1, r0
   10a88:	bfb8      	it	lt
   10a8a:	425b      	neglt	r3, r3
   10a8c:	2b19      	cmp	r3, #25
   10a8e:	bf88      	it	hi
   10a90:	4770      	bxhi	lr
   10a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10a9e:	bf18      	it	ne
   10aa0:	4240      	negne	r0, r0
   10aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10aae:	bf18      	it	ne
   10ab0:	4249      	negne	r1, r1
   10ab2:	ea92 0f03 	teq	r2, r3
   10ab6:	d03f      	beq.n	10b38 <__addsf3+0xd8>
   10ab8:	f1a2 0201 	sub.w	r2, r2, #1
   10abc:	fa41 fc03 	asr.w	ip, r1, r3
   10ac0:	eb10 000c 	adds.w	r0, r0, ip
   10ac4:	f1c3 0320 	rsb	r3, r3, #32
   10ac8:	fa01 f103 	lsl.w	r1, r1, r3
   10acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10ad0:	d502      	bpl.n	10ad8 <__addsf3+0x78>
   10ad2:	4249      	negs	r1, r1
   10ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10adc:	d313      	bcc.n	10b06 <__addsf3+0xa6>
   10ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10ae2:	d306      	bcc.n	10af2 <__addsf3+0x92>
   10ae4:	0840      	lsrs	r0, r0, #1
   10ae6:	ea4f 0131 	mov.w	r1, r1, rrx
   10aea:	f102 0201 	add.w	r2, r2, #1
   10aee:	2afe      	cmp	r2, #254	; 0xfe
   10af0:	d251      	bcs.n	10b96 <__addsf3+0x136>
   10af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10afa:	bf08      	it	eq
   10afc:	f020 0001 	biceq.w	r0, r0, #1
   10b00:	ea40 0003 	orr.w	r0, r0, r3
   10b04:	4770      	bx	lr
   10b06:	0049      	lsls	r1, r1, #1
   10b08:	eb40 0000 	adc.w	r0, r0, r0
   10b0c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   10b10:	f1a2 0201 	sub.w	r2, r2, #1
   10b14:	d1ed      	bne.n	10af2 <__addsf3+0x92>
   10b16:	fab0 fc80 	clz	ip, r0
   10b1a:	f1ac 0c08 	sub.w	ip, ip, #8
   10b1e:	ebb2 020c 	subs.w	r2, r2, ip
   10b22:	fa00 f00c 	lsl.w	r0, r0, ip
   10b26:	bfaa      	itet	ge
   10b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10b2c:	4252      	neglt	r2, r2
   10b2e:	4318      	orrge	r0, r3
   10b30:	bfbc      	itt	lt
   10b32:	40d0      	lsrlt	r0, r2
   10b34:	4318      	orrlt	r0, r3
   10b36:	4770      	bx	lr
   10b38:	f092 0f00 	teq	r2, #0
   10b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10b40:	bf06      	itte	eq
   10b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10b46:	3201      	addeq	r2, #1
   10b48:	3b01      	subne	r3, #1
   10b4a:	e7b5      	b.n	10ab8 <__addsf3+0x58>
   10b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10b54:	bf18      	it	ne
   10b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10b5a:	d021      	beq.n	10ba0 <__addsf3+0x140>
   10b5c:	ea92 0f03 	teq	r2, r3
   10b60:	d004      	beq.n	10b6c <__addsf3+0x10c>
   10b62:	f092 0f00 	teq	r2, #0
   10b66:	bf08      	it	eq
   10b68:	4608      	moveq	r0, r1
   10b6a:	4770      	bx	lr
   10b6c:	ea90 0f01 	teq	r0, r1
   10b70:	bf1c      	itt	ne
   10b72:	2000      	movne	r0, #0
   10b74:	4770      	bxne	lr
   10b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10b7a:	d104      	bne.n	10b86 <__addsf3+0x126>
   10b7c:	0040      	lsls	r0, r0, #1
   10b7e:	bf28      	it	cs
   10b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10b84:	4770      	bx	lr
   10b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10b8a:	bf3c      	itt	cc
   10b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10b90:	4770      	bxcc	lr
   10b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10b9e:	4770      	bx	lr
   10ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10ba4:	bf16      	itet	ne
   10ba6:	4608      	movne	r0, r1
   10ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10bac:	4601      	movne	r1, r0
   10bae:	0242      	lsls	r2, r0, #9
   10bb0:	bf06      	itte	eq
   10bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10bb6:	ea90 0f01 	teqeq	r0, r1
   10bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10bbe:	4770      	bx	lr

00010bc0 <__aeabi_ui2f>:
   10bc0:	f04f 0300 	mov.w	r3, #0
   10bc4:	e004      	b.n	10bd0 <__aeabi_i2f+0x8>
   10bc6:	bf00      	nop

00010bc8 <__aeabi_i2f>:
   10bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10bcc:	bf48      	it	mi
   10bce:	4240      	negmi	r0, r0
   10bd0:	ea5f 0c00 	movs.w	ip, r0
   10bd4:	bf08      	it	eq
   10bd6:	4770      	bxeq	lr
   10bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10bdc:	4601      	mov	r1, r0
   10bde:	f04f 0000 	mov.w	r0, #0
   10be2:	e01c      	b.n	10c1e <__aeabi_l2f+0x2a>

00010be4 <__aeabi_ul2f>:
   10be4:	ea50 0201 	orrs.w	r2, r0, r1
   10be8:	bf08      	it	eq
   10bea:	4770      	bxeq	lr
   10bec:	f04f 0300 	mov.w	r3, #0
   10bf0:	e00a      	b.n	10c08 <__aeabi_l2f+0x14>
   10bf2:	bf00      	nop

00010bf4 <__aeabi_l2f>:
   10bf4:	ea50 0201 	orrs.w	r2, r0, r1
   10bf8:	bf08      	it	eq
   10bfa:	4770      	bxeq	lr
   10bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10c00:	d502      	bpl.n	10c08 <__aeabi_l2f+0x14>
   10c02:	4240      	negs	r0, r0
   10c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10c08:	ea5f 0c01 	movs.w	ip, r1
   10c0c:	bf02      	ittt	eq
   10c0e:	4684      	moveq	ip, r0
   10c10:	4601      	moveq	r1, r0
   10c12:	2000      	moveq	r0, #0
   10c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10c18:	bf08      	it	eq
   10c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10c22:	fabc f28c 	clz	r2, ip
   10c26:	3a08      	subs	r2, #8
   10c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10c2c:	db10      	blt.n	10c50 <__aeabi_l2f+0x5c>
   10c2e:	fa01 fc02 	lsl.w	ip, r1, r2
   10c32:	4463      	add	r3, ip
   10c34:	fa00 fc02 	lsl.w	ip, r0, r2
   10c38:	f1c2 0220 	rsb	r2, r2, #32
   10c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10c40:	fa20 f202 	lsr.w	r2, r0, r2
   10c44:	eb43 0002 	adc.w	r0, r3, r2
   10c48:	bf08      	it	eq
   10c4a:	f020 0001 	biceq.w	r0, r0, #1
   10c4e:	4770      	bx	lr
   10c50:	f102 0220 	add.w	r2, r2, #32
   10c54:	fa01 fc02 	lsl.w	ip, r1, r2
   10c58:	f1c2 0220 	rsb	r2, r2, #32
   10c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10c60:	fa21 f202 	lsr.w	r2, r1, r2
   10c64:	eb43 0002 	adc.w	r0, r3, r2
   10c68:	bf08      	it	eq
   10c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10c6e:	4770      	bx	lr

00010c70 <__aeabi_f2uiz>:
   10c70:	0042      	lsls	r2, r0, #1
   10c72:	d20e      	bcs.n	10c92 <__aeabi_f2uiz+0x22>
   10c74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   10c78:	d30b      	bcc.n	10c92 <__aeabi_f2uiz+0x22>
   10c7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   10c7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   10c82:	d409      	bmi.n	10c98 <__aeabi_f2uiz+0x28>
   10c84:	ea4f 2300 	mov.w	r3, r0, lsl #8
   10c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10c8c:	fa23 f002 	lsr.w	r0, r3, r2
   10c90:	4770      	bx	lr
   10c92:	f04f 0000 	mov.w	r0, #0
   10c96:	4770      	bx	lr
   10c98:	f112 0f61 	cmn.w	r2, #97	; 0x61
   10c9c:	d101      	bne.n	10ca2 <__aeabi_f2uiz+0x32>
   10c9e:	0242      	lsls	r2, r0, #9
   10ca0:	d102      	bne.n	10ca8 <__aeabi_f2uiz+0x38>
   10ca2:	f04f 30ff 	mov.w	r0, #4294967295
   10ca6:	4770      	bx	lr
   10ca8:	f04f 0000 	mov.w	r0, #0
   10cac:	4770      	bx	lr
   10cae:	bf00      	nop

00010cb0 <__cxa_atexit>:
   10cb0:	4613      	mov	r3, r2
   10cb2:	460a      	mov	r2, r1
   10cb4:	4601      	mov	r1, r0
   10cb6:	2002      	movs	r0, #2
   10cb8:	f000 b9b0 	b.w	1101c <__register_exitproc>

00010cbc <ffs>:
   10cbc:	b140      	cbz	r0, 10cd0 <ffs+0x14>
   10cbe:	2300      	movs	r3, #0
   10cc0:	fa40 f103 	asr.w	r1, r0, r3
   10cc4:	1c5a      	adds	r2, r3, #1
   10cc6:	07c9      	lsls	r1, r1, #31
   10cc8:	4613      	mov	r3, r2
   10cca:	d5f9      	bpl.n	10cc0 <ffs+0x4>
   10ccc:	4610      	mov	r0, r2
   10cce:	4770      	bx	lr
   10cd0:	4602      	mov	r2, r0
   10cd2:	4610      	mov	r0, r2
   10cd4:	4770      	bx	lr
   10cd6:	bf00      	nop

00010cd8 <__libc_init_array>:
   10cd8:	b570      	push	{r4, r5, r6, lr}
   10cda:	4e0f      	ldr	r6, [pc, #60]	; (10d18 <__libc_init_array+0x40>)
   10cdc:	4d0f      	ldr	r5, [pc, #60]	; (10d1c <__libc_init_array+0x44>)
   10cde:	1b76      	subs	r6, r6, r5
   10ce0:	10b6      	asrs	r6, r6, #2
   10ce2:	bf18      	it	ne
   10ce4:	2400      	movne	r4, #0
   10ce6:	d005      	beq.n	10cf4 <__libc_init_array+0x1c>
   10ce8:	3401      	adds	r4, #1
   10cea:	f855 3b04 	ldr.w	r3, [r5], #4
   10cee:	4798      	blx	r3
   10cf0:	42a6      	cmp	r6, r4
   10cf2:	d1f9      	bne.n	10ce8 <__libc_init_array+0x10>
   10cf4:	4e0a      	ldr	r6, [pc, #40]	; (10d20 <__libc_init_array+0x48>)
   10cf6:	4d0b      	ldr	r5, [pc, #44]	; (10d24 <__libc_init_array+0x4c>)
   10cf8:	1b76      	subs	r6, r6, r5
   10cfa:	f000 fc95 	bl	11628 <_init>
   10cfe:	10b6      	asrs	r6, r6, #2
   10d00:	bf18      	it	ne
   10d02:	2400      	movne	r4, #0
   10d04:	d006      	beq.n	10d14 <__libc_init_array+0x3c>
   10d06:	3401      	adds	r4, #1
   10d08:	f855 3b04 	ldr.w	r3, [r5], #4
   10d0c:	4798      	blx	r3
   10d0e:	42a6      	cmp	r6, r4
   10d10:	d1f9      	bne.n	10d06 <__libc_init_array+0x2e>
   10d12:	bd70      	pop	{r4, r5, r6, pc}
   10d14:	bd70      	pop	{r4, r5, r6, pc}
   10d16:	bf00      	nop
   10d18:	00011634 	.word	0x00011634
   10d1c:	00011634 	.word	0x00011634
   10d20:	00011664 	.word	0x00011664
   10d24:	00011634 	.word	0x00011634

00010d28 <memcpy>:
   10d28:	4684      	mov	ip, r0
   10d2a:	ea41 0300 	orr.w	r3, r1, r0
   10d2e:	f013 0303 	ands.w	r3, r3, #3
   10d32:	d16d      	bne.n	10e10 <memcpy+0xe8>
   10d34:	3a40      	subs	r2, #64	; 0x40
   10d36:	d341      	bcc.n	10dbc <memcpy+0x94>
   10d38:	f851 3b04 	ldr.w	r3, [r1], #4
   10d3c:	f840 3b04 	str.w	r3, [r0], #4
   10d40:	f851 3b04 	ldr.w	r3, [r1], #4
   10d44:	f840 3b04 	str.w	r3, [r0], #4
   10d48:	f851 3b04 	ldr.w	r3, [r1], #4
   10d4c:	f840 3b04 	str.w	r3, [r0], #4
   10d50:	f851 3b04 	ldr.w	r3, [r1], #4
   10d54:	f840 3b04 	str.w	r3, [r0], #4
   10d58:	f851 3b04 	ldr.w	r3, [r1], #4
   10d5c:	f840 3b04 	str.w	r3, [r0], #4
   10d60:	f851 3b04 	ldr.w	r3, [r1], #4
   10d64:	f840 3b04 	str.w	r3, [r0], #4
   10d68:	f851 3b04 	ldr.w	r3, [r1], #4
   10d6c:	f840 3b04 	str.w	r3, [r0], #4
   10d70:	f851 3b04 	ldr.w	r3, [r1], #4
   10d74:	f840 3b04 	str.w	r3, [r0], #4
   10d78:	f851 3b04 	ldr.w	r3, [r1], #4
   10d7c:	f840 3b04 	str.w	r3, [r0], #4
   10d80:	f851 3b04 	ldr.w	r3, [r1], #4
   10d84:	f840 3b04 	str.w	r3, [r0], #4
   10d88:	f851 3b04 	ldr.w	r3, [r1], #4
   10d8c:	f840 3b04 	str.w	r3, [r0], #4
   10d90:	f851 3b04 	ldr.w	r3, [r1], #4
   10d94:	f840 3b04 	str.w	r3, [r0], #4
   10d98:	f851 3b04 	ldr.w	r3, [r1], #4
   10d9c:	f840 3b04 	str.w	r3, [r0], #4
   10da0:	f851 3b04 	ldr.w	r3, [r1], #4
   10da4:	f840 3b04 	str.w	r3, [r0], #4
   10da8:	f851 3b04 	ldr.w	r3, [r1], #4
   10dac:	f840 3b04 	str.w	r3, [r0], #4
   10db0:	f851 3b04 	ldr.w	r3, [r1], #4
   10db4:	f840 3b04 	str.w	r3, [r0], #4
   10db8:	3a40      	subs	r2, #64	; 0x40
   10dba:	d2bd      	bcs.n	10d38 <memcpy+0x10>
   10dbc:	3230      	adds	r2, #48	; 0x30
   10dbe:	d311      	bcc.n	10de4 <memcpy+0xbc>
   10dc0:	f851 3b04 	ldr.w	r3, [r1], #4
   10dc4:	f840 3b04 	str.w	r3, [r0], #4
   10dc8:	f851 3b04 	ldr.w	r3, [r1], #4
   10dcc:	f840 3b04 	str.w	r3, [r0], #4
   10dd0:	f851 3b04 	ldr.w	r3, [r1], #4
   10dd4:	f840 3b04 	str.w	r3, [r0], #4
   10dd8:	f851 3b04 	ldr.w	r3, [r1], #4
   10ddc:	f840 3b04 	str.w	r3, [r0], #4
   10de0:	3a10      	subs	r2, #16
   10de2:	d2ed      	bcs.n	10dc0 <memcpy+0x98>
   10de4:	320c      	adds	r2, #12
   10de6:	d305      	bcc.n	10df4 <memcpy+0xcc>
   10de8:	f851 3b04 	ldr.w	r3, [r1], #4
   10dec:	f840 3b04 	str.w	r3, [r0], #4
   10df0:	3a04      	subs	r2, #4
   10df2:	d2f9      	bcs.n	10de8 <memcpy+0xc0>
   10df4:	3204      	adds	r2, #4
   10df6:	d008      	beq.n	10e0a <memcpy+0xe2>
   10df8:	07d2      	lsls	r2, r2, #31
   10dfa:	bf1c      	itt	ne
   10dfc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10e00:	f800 3b01 	strbne.w	r3, [r0], #1
   10e04:	d301      	bcc.n	10e0a <memcpy+0xe2>
   10e06:	880b      	ldrh	r3, [r1, #0]
   10e08:	8003      	strh	r3, [r0, #0]
   10e0a:	4660      	mov	r0, ip
   10e0c:	4770      	bx	lr
   10e0e:	bf00      	nop
   10e10:	2a08      	cmp	r2, #8
   10e12:	d313      	bcc.n	10e3c <memcpy+0x114>
   10e14:	078b      	lsls	r3, r1, #30
   10e16:	d08d      	beq.n	10d34 <memcpy+0xc>
   10e18:	f010 0303 	ands.w	r3, r0, #3
   10e1c:	d08a      	beq.n	10d34 <memcpy+0xc>
   10e1e:	f1c3 0304 	rsb	r3, r3, #4
   10e22:	1ad2      	subs	r2, r2, r3
   10e24:	07db      	lsls	r3, r3, #31
   10e26:	bf1c      	itt	ne
   10e28:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10e2c:	f800 3b01 	strbne.w	r3, [r0], #1
   10e30:	d380      	bcc.n	10d34 <memcpy+0xc>
   10e32:	f831 3b02 	ldrh.w	r3, [r1], #2
   10e36:	f820 3b02 	strh.w	r3, [r0], #2
   10e3a:	e77b      	b.n	10d34 <memcpy+0xc>
   10e3c:	3a04      	subs	r2, #4
   10e3e:	d3d9      	bcc.n	10df4 <memcpy+0xcc>
   10e40:	3a01      	subs	r2, #1
   10e42:	f811 3b01 	ldrb.w	r3, [r1], #1
   10e46:	f800 3b01 	strb.w	r3, [r0], #1
   10e4a:	d2f9      	bcs.n	10e40 <memcpy+0x118>
   10e4c:	780b      	ldrb	r3, [r1, #0]
   10e4e:	7003      	strb	r3, [r0, #0]
   10e50:	784b      	ldrb	r3, [r1, #1]
   10e52:	7043      	strb	r3, [r0, #1]
   10e54:	788b      	ldrb	r3, [r1, #2]
   10e56:	7083      	strb	r3, [r0, #2]
   10e58:	4660      	mov	r0, ip
   10e5a:	4770      	bx	lr

00010e5c <memset>:
   10e5c:	b470      	push	{r4, r5, r6}
   10e5e:	0786      	lsls	r6, r0, #30
   10e60:	d046      	beq.n	10ef0 <memset+0x94>
   10e62:	1e54      	subs	r4, r2, #1
   10e64:	2a00      	cmp	r2, #0
   10e66:	d041      	beq.n	10eec <memset+0x90>
   10e68:	b2ca      	uxtb	r2, r1
   10e6a:	4603      	mov	r3, r0
   10e6c:	e002      	b.n	10e74 <memset+0x18>
   10e6e:	f114 34ff 	adds.w	r4, r4, #4294967295
   10e72:	d33b      	bcc.n	10eec <memset+0x90>
   10e74:	f803 2b01 	strb.w	r2, [r3], #1
   10e78:	079d      	lsls	r5, r3, #30
   10e7a:	d1f8      	bne.n	10e6e <memset+0x12>
   10e7c:	2c03      	cmp	r4, #3
   10e7e:	d92e      	bls.n	10ede <memset+0x82>
   10e80:	b2cd      	uxtb	r5, r1
   10e82:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10e86:	2c0f      	cmp	r4, #15
   10e88:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10e8c:	d919      	bls.n	10ec2 <memset+0x66>
   10e8e:	f103 0210 	add.w	r2, r3, #16
   10e92:	4626      	mov	r6, r4
   10e94:	3e10      	subs	r6, #16
   10e96:	2e0f      	cmp	r6, #15
   10e98:	f842 5c10 	str.w	r5, [r2, #-16]
   10e9c:	f842 5c0c 	str.w	r5, [r2, #-12]
   10ea0:	f842 5c08 	str.w	r5, [r2, #-8]
   10ea4:	f842 5c04 	str.w	r5, [r2, #-4]
   10ea8:	f102 0210 	add.w	r2, r2, #16
   10eac:	d8f2      	bhi.n	10e94 <memset+0x38>
   10eae:	f1a4 0210 	sub.w	r2, r4, #16
   10eb2:	f022 020f 	bic.w	r2, r2, #15
   10eb6:	f004 040f 	and.w	r4, r4, #15
   10eba:	3210      	adds	r2, #16
   10ebc:	2c03      	cmp	r4, #3
   10ebe:	4413      	add	r3, r2
   10ec0:	d90d      	bls.n	10ede <memset+0x82>
   10ec2:	461e      	mov	r6, r3
   10ec4:	4622      	mov	r2, r4
   10ec6:	3a04      	subs	r2, #4
   10ec8:	2a03      	cmp	r2, #3
   10eca:	f846 5b04 	str.w	r5, [r6], #4
   10ece:	d8fa      	bhi.n	10ec6 <memset+0x6a>
   10ed0:	1f22      	subs	r2, r4, #4
   10ed2:	f022 0203 	bic.w	r2, r2, #3
   10ed6:	3204      	adds	r2, #4
   10ed8:	4413      	add	r3, r2
   10eda:	f004 0403 	and.w	r4, r4, #3
   10ede:	b12c      	cbz	r4, 10eec <memset+0x90>
   10ee0:	b2c9      	uxtb	r1, r1
   10ee2:	441c      	add	r4, r3
   10ee4:	f803 1b01 	strb.w	r1, [r3], #1
   10ee8:	429c      	cmp	r4, r3
   10eea:	d1fb      	bne.n	10ee4 <memset+0x88>
   10eec:	bc70      	pop	{r4, r5, r6}
   10eee:	4770      	bx	lr
   10ef0:	4614      	mov	r4, r2
   10ef2:	4603      	mov	r3, r0
   10ef4:	e7c2      	b.n	10e7c <memset+0x20>
   10ef6:	bf00      	nop

00010ef8 <rand>:
   10ef8:	b410      	push	{r4}
   10efa:	4b0c      	ldr	r3, [pc, #48]	; (10f2c <rand+0x34>)
   10efc:	480c      	ldr	r0, [pc, #48]	; (10f30 <rand+0x38>)
   10efe:	6819      	ldr	r1, [r3, #0]
   10f00:	4c0c      	ldr	r4, [pc, #48]	; (10f34 <rand+0x3c>)
   10f02:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   10f06:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   10f0a:	fb00 f002 	mul.w	r0, r0, r2
   10f0e:	fb04 0003 	mla	r0, r4, r3, r0
   10f12:	fba2 2304 	umull	r2, r3, r2, r4
   10f16:	4403      	add	r3, r0
   10f18:	3201      	adds	r2, #1
   10f1a:	f143 0300 	adc.w	r3, r3, #0
   10f1e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   10f22:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   10f26:	bc10      	pop	{r4}
   10f28:	4770      	bx	lr
   10f2a:	bf00      	nop
   10f2c:	2000021c 	.word	0x2000021c
   10f30:	5851f42d 	.word	0x5851f42d
   10f34:	4c957f2d 	.word	0x4c957f2d
	...

00010f40 <strlen>:
   10f40:	f890 f000 	pld	[r0]
   10f44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10f48:	f020 0107 	bic.w	r1, r0, #7
   10f4c:	f06f 0c00 	mvn.w	ip, #0
   10f50:	f010 0407 	ands.w	r4, r0, #7
   10f54:	f891 f020 	pld	[r1, #32]
   10f58:	f040 8049 	bne.w	10fee <strlen+0xae>
   10f5c:	f04f 0400 	mov.w	r4, #0
   10f60:	f06f 0007 	mvn.w	r0, #7
   10f64:	e9d1 2300 	ldrd	r2, r3, [r1]
   10f68:	f891 f040 	pld	[r1, #64]	; 0x40
   10f6c:	f100 0008 	add.w	r0, r0, #8
   10f70:	fa82 f24c 	uadd8	r2, r2, ip
   10f74:	faa4 f28c 	sel	r2, r4, ip
   10f78:	fa83 f34c 	uadd8	r3, r3, ip
   10f7c:	faa2 f38c 	sel	r3, r2, ip
   10f80:	bb4b      	cbnz	r3, 10fd6 <strlen+0x96>
   10f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10f86:	fa82 f24c 	uadd8	r2, r2, ip
   10f8a:	f100 0008 	add.w	r0, r0, #8
   10f8e:	faa4 f28c 	sel	r2, r4, ip
   10f92:	fa83 f34c 	uadd8	r3, r3, ip
   10f96:	faa2 f38c 	sel	r3, r2, ip
   10f9a:	b9e3      	cbnz	r3, 10fd6 <strlen+0x96>
   10f9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10fa0:	fa82 f24c 	uadd8	r2, r2, ip
   10fa4:	f100 0008 	add.w	r0, r0, #8
   10fa8:	faa4 f28c 	sel	r2, r4, ip
   10fac:	fa83 f34c 	uadd8	r3, r3, ip
   10fb0:	faa2 f38c 	sel	r3, r2, ip
   10fb4:	b97b      	cbnz	r3, 10fd6 <strlen+0x96>
   10fb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10fba:	f101 0120 	add.w	r1, r1, #32
   10fbe:	fa82 f24c 	uadd8	r2, r2, ip
   10fc2:	f100 0008 	add.w	r0, r0, #8
   10fc6:	faa4 f28c 	sel	r2, r4, ip
   10fca:	fa83 f34c 	uadd8	r3, r3, ip
   10fce:	faa2 f38c 	sel	r3, r2, ip
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d0c6      	beq.n	10f64 <strlen+0x24>
   10fd6:	2a00      	cmp	r2, #0
   10fd8:	bf04      	itt	eq
   10fda:	3004      	addeq	r0, #4
   10fdc:	461a      	moveq	r2, r3
   10fde:	ba12      	rev	r2, r2
   10fe0:	fab2 f282 	clz	r2, r2
   10fe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10fe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10fec:	4770      	bx	lr
   10fee:	e9d1 2300 	ldrd	r2, r3, [r1]
   10ff2:	f004 0503 	and.w	r5, r4, #3
   10ff6:	f1c4 0000 	rsb	r0, r4, #0
   10ffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10ffe:	f014 0f04 	tst.w	r4, #4
   11002:	f891 f040 	pld	[r1, #64]	; 0x40
   11006:	fa0c f505 	lsl.w	r5, ip, r5
   1100a:	ea62 0205 	orn	r2, r2, r5
   1100e:	bf1c      	itt	ne
   11010:	ea63 0305 	ornne	r3, r3, r5
   11014:	4662      	movne	r2, ip
   11016:	f04f 0400 	mov.w	r4, #0
   1101a:	e7a9      	b.n	10f70 <strlen+0x30>

0001101c <__register_exitproc>:
   1101c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11020:	4d2c      	ldr	r5, [pc, #176]	; (110d4 <__register_exitproc+0xb8>)
   11022:	4606      	mov	r6, r0
   11024:	6828      	ldr	r0, [r5, #0]
   11026:	4698      	mov	r8, r3
   11028:	460f      	mov	r7, r1
   1102a:	4691      	mov	r9, r2
   1102c:	f000 f882 	bl	11134 <__retarget_lock_acquire_recursive>
   11030:	4b29      	ldr	r3, [pc, #164]	; (110d8 <__register_exitproc+0xbc>)
   11032:	681c      	ldr	r4, [r3, #0]
   11034:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   11038:	2b00      	cmp	r3, #0
   1103a:	d03e      	beq.n	110ba <__register_exitproc+0x9e>
   1103c:	685a      	ldr	r2, [r3, #4]
   1103e:	2a1f      	cmp	r2, #31
   11040:	dc1c      	bgt.n	1107c <__register_exitproc+0x60>
   11042:	f102 0e01 	add.w	lr, r2, #1
   11046:	b176      	cbz	r6, 11066 <__register_exitproc+0x4a>
   11048:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1104c:	2401      	movs	r4, #1
   1104e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11052:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   11056:	4094      	lsls	r4, r2
   11058:	4320      	orrs	r0, r4
   1105a:	2e02      	cmp	r6, #2
   1105c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   11060:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11064:	d023      	beq.n	110ae <__register_exitproc+0x92>
   11066:	3202      	adds	r2, #2
   11068:	f8c3 e004 	str.w	lr, [r3, #4]
   1106c:	6828      	ldr	r0, [r5, #0]
   1106e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11072:	f000 f861 	bl	11138 <__retarget_lock_release_recursive>
   11076:	2000      	movs	r0, #0
   11078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1107c:	4b17      	ldr	r3, [pc, #92]	; (110dc <__register_exitproc+0xc0>)
   1107e:	b30b      	cbz	r3, 110c4 <__register_exitproc+0xa8>
   11080:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11084:	f7ff fcd0 	bl	10a28 <malloc>
   11088:	4603      	mov	r3, r0
   1108a:	b1d8      	cbz	r0, 110c4 <__register_exitproc+0xa8>
   1108c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11090:	6002      	str	r2, [r0, #0]
   11092:	2100      	movs	r1, #0
   11094:	6041      	str	r1, [r0, #4]
   11096:	460a      	mov	r2, r1
   11098:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1109c:	f04f 0e01 	mov.w	lr, #1
   110a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   110a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   110a8:	2e00      	cmp	r6, #0
   110aa:	d0dc      	beq.n	11066 <__register_exitproc+0x4a>
   110ac:	e7cc      	b.n	11048 <__register_exitproc+0x2c>
   110ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   110b2:	430c      	orrs	r4, r1
   110b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   110b8:	e7d5      	b.n	11066 <__register_exitproc+0x4a>
   110ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   110be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   110c2:	e7bb      	b.n	1103c <__register_exitproc+0x20>
   110c4:	6828      	ldr	r0, [r5, #0]
   110c6:	f000 f837 	bl	11138 <__retarget_lock_release_recursive>
   110ca:	f04f 30ff 	mov.w	r0, #4294967295
   110ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   110d2:	bf00      	nop
   110d4:	20000648 	.word	0x20000648
   110d8:	00011624 	.word	0x00011624
   110dc:	00010a29 	.word	0x00010a29

000110e0 <register_fini>:
   110e0:	4b02      	ldr	r3, [pc, #8]	; (110ec <register_fini+0xc>)
   110e2:	b113      	cbz	r3, 110ea <register_fini+0xa>
   110e4:	4802      	ldr	r0, [pc, #8]	; (110f0 <register_fini+0x10>)
   110e6:	f000 b805 	b.w	110f4 <atexit>
   110ea:	4770      	bx	lr
   110ec:	00000000 	.word	0x00000000
   110f0:	00011101 	.word	0x00011101

000110f4 <atexit>:
   110f4:	2300      	movs	r3, #0
   110f6:	4601      	mov	r1, r0
   110f8:	461a      	mov	r2, r3
   110fa:	4618      	mov	r0, r3
   110fc:	f7ff bf8e 	b.w	1101c <__register_exitproc>

00011100 <__libc_fini_array>:
   11100:	b538      	push	{r3, r4, r5, lr}
   11102:	4c0a      	ldr	r4, [pc, #40]	; (1112c <__libc_fini_array+0x2c>)
   11104:	4d0a      	ldr	r5, [pc, #40]	; (11130 <__libc_fini_array+0x30>)
   11106:	1b64      	subs	r4, r4, r5
   11108:	10a4      	asrs	r4, r4, #2
   1110a:	d00a      	beq.n	11122 <__libc_fini_array+0x22>
   1110c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11110:	3b01      	subs	r3, #1
   11112:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11116:	3c01      	subs	r4, #1
   11118:	f855 3904 	ldr.w	r3, [r5], #-4
   1111c:	4798      	blx	r3
   1111e:	2c00      	cmp	r4, #0
   11120:	d1f9      	bne.n	11116 <__libc_fini_array+0x16>
   11122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11126:	f000 ba9d 	b.w	11664 <_fini>
   1112a:	bf00      	nop
   1112c:	00011674 	.word	0x00011674
   11130:	00011670 	.word	0x00011670

00011134 <__retarget_lock_acquire_recursive>:
   11134:	4770      	bx	lr
   11136:	bf00      	nop

00011138 <__retarget_lock_release_recursive>:
   11138:	4770      	bx	lr
   1113a:	bf00      	nop
   1113c:	682f2e2e 	.word	0x682f2e2e
   11140:	702f6c70 	.word	0x702f6c70
   11144:	2f74726f 	.word	0x2f74726f
   11148:	5f6c7068 	.word	0x5f6c7068
   1114c:	6f697067 	.word	0x6f697067
   11150:	7361625f 	.word	0x7361625f
   11154:	00682e65 	.word	0x00682e65
   11158:	682f2e2e 	.word	0x682f2e2e
   1115c:	692f6c61 	.word	0x692f6c61
   11160:	756c636e 	.word	0x756c636e
   11164:	682f6564 	.word	0x682f6564
   11168:	775f6c61 	.word	0x775f6c61
   1116c:	682e7464 	.word	0x682e7464
   11170:	00000000 	.word	0x00000000
   11174:	682f2e2e 	.word	0x682f2e2e
   11178:	732f6c61 	.word	0x732f6c61
   1117c:	682f6372 	.word	0x682f6372
   11180:	635f6c61 	.word	0x635f6c61
   11184:	6e656c61 	.word	0x6e656c61
   11188:	2e726164 	.word	0x2e726164
   1118c:	00000063 	.word	0x00000063
   11190:	682f2e2e 	.word	0x682f2e2e
   11194:	732f6c61 	.word	0x732f6c61
   11198:	682f6372 	.word	0x682f6372
   1119c:	635f6c61 	.word	0x635f6c61
   111a0:	615f6e61 	.word	0x615f6e61
   111a4:	636e7973 	.word	0x636e7973
   111a8:	0000632e 	.word	0x0000632e
   111ac:	682f2e2e 	.word	0x682f2e2e
   111b0:	732f6c61 	.word	0x732f6c61
   111b4:	682f6372 	.word	0x682f6372
   111b8:	635f6c61 	.word	0x635f6c61
   111bc:	735f6372 	.word	0x735f6372
   111c0:	2e636e79 	.word	0x2e636e79
   111c4:	00000063 	.word	0x00000063
   111c8:	682f2e2e 	.word	0x682f2e2e
   111cc:	732f6c61 	.word	0x732f6c61
   111d0:	682f6372 	.word	0x682f6372
   111d4:	695f6c61 	.word	0x695f6c61
   111d8:	6d5f6332 	.word	0x6d5f6332
   111dc:	6e79735f 	.word	0x6e79735f
   111e0:	00632e63 	.word	0x00632e63
   111e4:	682f2e2e 	.word	0x682f2e2e
   111e8:	732f6c61 	.word	0x732f6c61
   111ec:	682f6372 	.word	0x682f6372
   111f0:	705f6c61 	.word	0x705f6c61
   111f4:	632e6d77 	.word	0x632e6d77
   111f8:	00000000 	.word	0x00000000
   111fc:	682f2e2e 	.word	0x682f2e2e
   11200:	732f6c61 	.word	0x732f6c61
   11204:	682f6372 	.word	0x682f6372
   11208:	715f6c61 	.word	0x715f6c61
   1120c:	5f697073 	.word	0x5f697073
   11210:	636e7973 	.word	0x636e7973
   11214:	0000632e 	.word	0x0000632e
   11218:	682f2e2e 	.word	0x682f2e2e
   1121c:	732f6c61 	.word	0x732f6c61
   11220:	682f6372 	.word	0x682f6372
   11224:	735f6c61 	.word	0x735f6c61
   11228:	6d5f6970 	.word	0x6d5f6970
   1122c:	6e79735f 	.word	0x6e79735f
   11230:	00632e63 	.word	0x00632e63
   11234:	682f2e2e 	.word	0x682f2e2e
   11238:	732f6c61 	.word	0x732f6c61
   1123c:	682f6372 	.word	0x682f6372
   11240:	745f6c61 	.word	0x745f6c61
   11244:	72656d69 	.word	0x72656d69
   11248:	0000632e 	.word	0x0000632e
   1124c:	682f2e2e 	.word	0x682f2e2e
   11250:	752f6c61 	.word	0x752f6c61
   11254:	736c6974 	.word	0x736c6974
   11258:	6372732f 	.word	0x6372732f
   1125c:	6974752f 	.word	0x6974752f
   11260:	6c5f736c 	.word	0x6c5f736c
   11264:	2e747369 	.word	0x2e747369
   11268:	00000063 	.word	0x00000063

0001126c <_map>:
   1126c:	00000000 00000040 00000001 00000021     ....@.......!...
   1127c:	00000003 00000003 00000004 00000004     ................
   1128c:	00000005 00000005 00000006 00000056     ............V...
   1129c:	00000007 00000057 00000008 00000028     ....W.......(...
   112ac:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   112bc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000112cc <user_mux_confs>:
   112cc:	00020100 00000000 00000000 00000000     ................
	...

00011310 <channel_confs>:
   11310:	0660065f 00000000 00000000 00000000     _.`.............
	...

00011350 <interrupt_cfg>:
	...
   113d0:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   113e0:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   113f0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   11400:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   11410:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   11420:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   11430:	43000400 43000800 43000c00              ...C...C...C

0001143c <sercomspi_regs>:
   1143c:	0020000c 00020000 00000000 01ff0001     .. .............
   1144c:	30000c04 02000000 00000000 ff001700     ...0............
   1145c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1146c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1147c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1148c:	43001400 43001800                       ...C...C

00011494 <_usb_ep_cfgs>:
   11494:	20000e48 00000000 00000040 20000e88     H.. ....@...... 
   114a4:	20000ec8 00400040 20000f08 20000f48     ... @.@.... H.. 
   114b4:	00400040 20000f88 20000fc8 00400040     @.@.... ... @.@.
   114c4:	20001008 20001048 00400040 00000804     ... H.. @.@.....
   114d4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   114e4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   114f4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   11504:	7361625f 00682e65                       _base.h.

0001150c <n25q256a_interface>:
   1150c:	0000d0b9 0000d15d 0000d26d 0000d425     ....]...m...%...
   1151c:	0000d4b5 752f2e2e 642f6273 63697665     ....../usb/devic
   1152c:	73752f65 2e636462 00000063              e/usbdc.c...

00011538 <defaultParameters>:
   11538:	00004020                                 @..

0001153c <defaultPreferences>:
   1153c:	000000fa 00000032 73616c46 654d2068     ....2...Flash Me
   1154c:	79726f6d 6c655320 73655466 41502074     mory SelfTest PA
   1155c:	44455353 00000000 73616c46 654d2068     SSED....Flash Me
   1156c:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   1157c:	44454c49 00000000 682f2e2e 732f6c61     ILED....../hal/s
   1158c:	682f6372 695f6c61 00632e6f 2e2f2e2e     rc/hal_io.c.../.
   1159c:	2e2e2f2e 554c412f 6972445f 2f726576     ./../ALU_Driver/
   115ac:	5f554c41 76697244 682f7265 702f6c70     ALU_Driver/hpl/p
   115bc:	2f74726f 5f6c7068 6f697067 7361625f     ort/hpl_gpio_bas
   115cc:	00682e65                                e.h.

000115d0 <_ZTV18Event_Logger_Class>:
	...
   115d8:	00010739 00010789 74696e49 696c6169     9.......Initiali
   115e8:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   115f8:	343a3631 32313a34 00000000              16:44:12....

00011604 <_ZTV14Calendar_Class>:
	...
   1160c:	00010739 00010789                       9.......

00011614 <_ZTV17DateTimeLog_Class>:
	...
   1161c:	00010a3d 00010a3d                       =...=...

00011624 <_global_impure_ptr>:
   11624:	20000220                                 .. 

00011628 <_init>:
   11628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1162a:	bf00      	nop
   1162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1162e:	bc08      	pop	{r3}
   11630:	469e      	mov	lr, r3
   11632:	4770      	bx	lr

00011634 <__init_array_start>:
   11634:	000110e1 	.word	0x000110e1

00011638 <__frame_dummy_init_array_entry>:
   11638:	00000289 00001999 00002059 00002421     ........Y ..!$..
   11648:	0000eba9 0000f15d 0000f57d 0000f7b1     ....]...}.......
   11658:	0001023d 00010401 000109d5              =...........

00011664 <_fini>:
   11664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11666:	bf00      	nop
   11668:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1166a:	bc08      	pop	{r3}
   1166c:	469e      	mov	lr, r3
   1166e:	4770      	bx	lr

00011670 <__fini_array_start>:
   11670:	00000265 	.word	0x00000265
