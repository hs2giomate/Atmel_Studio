
ByteGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000059dc  000059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004ac  20000000  000059e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000614  200004ac  00005e90  000204ac  2**2
                  ALLOC
  4 .stack        00002000  20000ac0  000064a4  000204ac  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000327ae  00000000  00000000  0002052d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000058a4  00000000  00000000  00052cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d9e4  00000000  00000000  0005857f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cc8  00000000  00000000  00065f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001160  00000000  00000000  00066c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021d2b  00000000  00000000  00067d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015abc  00000000  00000000  00089ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00092202  00000000  00000000  0009f572  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002660  00000000  00000000  00131774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 2a 00 20 ad 04 00 00 a5 05 00 00 a5 05 00 00     .*. ............
	...
      2c:	a5 05 00 00 00 00 00 00 00 00 00 00 a5 05 00 00     ................
      3c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      4c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      5c:	6d 32 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     m2..............
      6c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      7c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 25 21 00 00     ............%!..
      8c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      9c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      ac:	a5 05 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004ac 	.word	0x200004ac
      d4:	00000000 	.word	0x00000000
      d8:	000059e4 	.word	0x000059e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004b0 	.word	0x200004b0
     108:	000059e4 	.word	0x000059e4
     10c:	000059e4 	.word	0x000059e4
     110:	00000000 	.word	0x00000000

00000114 <hri_port_read_DIR_reg>:
		chL=(char)serial.read();
		
	}while(chL!=CR);
	serial.println(" Got it!...");
	return	byte;
}
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	000a      	movs	r2, r1
     11e:	1cfb      	adds	r3, r7, #3
     120:	701a      	strb	r2, [r3, #0]
     122:	1cfb      	adds	r3, r7, #3
     124:	781a      	ldrb	r2, [r3, #0]
     126:	687b      	ldr	r3, [r7, #4]
     128:	01d2      	lsls	r2, r2, #7
     12a:	58d3      	ldr	r3, [r2, r3]
     12c:	0018      	movs	r0, r3
     12e:	46bd      	mov	sp, r7
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
}
     130:	b002      	add	sp, #8
     132:	bd80      	pop	{r7, pc}

00000134 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     134:	b580      	push	{r7, lr}
     136:	b084      	sub	sp, #16
     138:	af00      	add	r7, sp, #0
     13a:	60f8      	str	r0, [r7, #12]
     13c:	607a      	str	r2, [r7, #4]
     13e:	230b      	movs	r3, #11
     140:	18fb      	adds	r3, r7, r3
     142:	1c0a      	adds	r2, r1, #0
     144:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     146:	230b      	movs	r3, #11
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	68fa      	ldr	r2, [r7, #12]
     14e:	01db      	lsls	r3, r3, #7
     150:	18d3      	adds	r3, r2, r3
     152:	3318      	adds	r3, #24
     154:	687a      	ldr	r2, [r7, #4]
     156:	601a      	str	r2, [r3, #0]
}
     158:	46c0      	nop			; (mov r8, r8)
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}

00000160 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
     168:	000a      	movs	r2, r1
     16a:	1cfb      	adds	r3, r7, #3
     16c:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     16e:	1cfb      	adds	r3, r7, #3
     170:	781b      	ldrb	r3, [r3, #0]
     172:	687a      	ldr	r2, [r7, #4]
     174:	01db      	lsls	r3, r3, #7
     176:	18d3      	adds	r3, r2, r3
     178:	3310      	adds	r3, #16
     17a:	681b      	ldr	r3, [r3, #0]
}
     17c:	0018      	movs	r0, r3
     17e:	46bd      	mov	sp, r7
     180:	b002      	add	sp, #8
     182:	bd80      	pop	{r7, pc}

00000184 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	60f8      	str	r0, [r7, #12]
     18c:	607a      	str	r2, [r7, #4]
     18e:	230b      	movs	r3, #11
     190:	18fb      	adds	r3, r7, r3
     192:	1c0a      	adds	r2, r1, #0
     194:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     196:	230b      	movs	r3, #11
     198:	18fb      	adds	r3, r7, r3
     19a:	781b      	ldrb	r3, [r3, #0]
     19c:	68fa      	ldr	r2, [r7, #12]
     19e:	01db      	lsls	r3, r3, #7
     1a0:	18d3      	adds	r3, r2, r3
     1a2:	3314      	adds	r3, #20
     1a4:	687a      	ldr	r2, [r7, #4]
     1a6:	601a      	str	r2, [r3, #0]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b004      	add	sp, #16
     1ae:	bd80      	pop	{r7, pc}

000001b0 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
     1b8:	000a      	movs	r2, r1
     1ba:	1cfb      	adds	r3, r7, #3
     1bc:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     1be:	1cfb      	adds	r3, r7, #3
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	687a      	ldr	r2, [r7, #4]
     1c4:	01db      	lsls	r3, r3, #7
     1c6:	18d3      	adds	r3, r2, r3
     1c8:	3320      	adds	r3, #32
     1ca:	681b      	ldr	r3, [r3, #0]
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b002      	add	sp, #8
     1d2:	bd80      	pop	{r7, pc}

000001d4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6039      	str	r1, [r7, #0]
     1dc:	0011      	movs	r1, r2
     1de:	1dfb      	adds	r3, r7, #7
     1e0:	1c02      	adds	r2, r0, #0
     1e2:	701a      	strb	r2, [r3, #0]
     1e4:	1dbb      	adds	r3, r7, #6
     1e6:	1c0a      	adds	r2, r1, #0
     1e8:	701a      	strb	r2, [r3, #0]
	if (level) {
     1ea:	1dbb      	adds	r3, r7, #6
     1ec:	781b      	ldrb	r3, [r3, #0]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d008      	beq.n	204 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     1f2:	683a      	ldr	r2, [r7, #0]
     1f4:	1dfb      	adds	r3, r7, #7
     1f6:	7819      	ldrb	r1, [r3, #0]
     1f8:	23c0      	movs	r3, #192	; 0xc0
     1fa:	05db      	lsls	r3, r3, #23
     1fc:	0018      	movs	r0, r3
     1fe:	4b07      	ldr	r3, [pc, #28]	; (21c <_gpio_set_level+0x48>)
     200:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     202:	e007      	b.n	214 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     204:	683a      	ldr	r2, [r7, #0]
     206:	1dfb      	adds	r3, r7, #7
     208:	7819      	ldrb	r1, [r3, #0]
     20a:	23c0      	movs	r3, #192	; 0xc0
     20c:	05db      	lsls	r3, r3, #23
     20e:	0018      	movs	r0, r3
     210:	4b03      	ldr	r3, [pc, #12]	; (220 <_gpio_set_level+0x4c>)
     212:	4798      	blx	r3
}
     214:	46c0      	nop			; (mov r8, r8)
     216:	46bd      	mov	sp, r7
     218:	b002      	add	sp, #8
     21a:	bd80      	pop	{r7, pc}
     21c:	00000135 	.word	0x00000135
     220:	00000185 	.word	0x00000185

00000224 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
     224:	b580      	push	{r7, lr}
     226:	b086      	sub	sp, #24
     228:	af00      	add	r7, sp, #0
     22a:	0002      	movs	r2, r0
     22c:	1dfb      	adds	r3, r7, #7
     22e:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     230:	230c      	movs	r3, #12
     232:	18fb      	adds	r3, r7, r3
     234:	0018      	movs	r0, r3
     236:	4b18      	ldr	r3, [pc, #96]	; (298 <_gpio_get_level+0x74>)
     238:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
     23a:	1dfb      	adds	r3, r7, #7
     23c:	781a      	ldrb	r2, [r3, #0]
     23e:	23c0      	movs	r3, #192	; 0xc0
     240:	05db      	lsls	r3, r3, #23
     242:	0011      	movs	r1, r2
     244:	0018      	movs	r0, r3
     246:	4b15      	ldr	r3, [pc, #84]	; (29c <_gpio_get_level+0x78>)
     248:	4798      	blx	r3
     24a:	0003      	movs	r3, r0
     24c:	617b      	str	r3, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
     24e:	1dfb      	adds	r3, r7, #7
     250:	781b      	ldrb	r3, [r3, #0]
     252:	4a13      	ldr	r2, [pc, #76]	; (2a0 <_gpio_get_level+0x7c>)
     254:	0019      	movs	r1, r3
     256:	0010      	movs	r0, r2
     258:	4b12      	ldr	r3, [pc, #72]	; (2a4 <_gpio_get_level+0x80>)
     25a:	4798      	blx	r3
     25c:	0002      	movs	r2, r0
     25e:	697b      	ldr	r3, [r7, #20]
     260:	43db      	mvns	r3, r3
     262:	4013      	ands	r3, r2
     264:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     266:	1dfb      	adds	r3, r7, #7
     268:	781a      	ldrb	r2, [r3, #0]
     26a:	23c0      	movs	r3, #192	; 0xc0
     26c:	05db      	lsls	r3, r3, #23
     26e:	0011      	movs	r1, r2
     270:	0018      	movs	r0, r3
     272:	4b0d      	ldr	r3, [pc, #52]	; (2a8 <_gpio_get_level+0x84>)
     274:	4798      	blx	r3
     276:	0002      	movs	r2, r0
     278:	697b      	ldr	r3, [r7, #20]
     27a:	4013      	ands	r3, r2
     27c:	693a      	ldr	r2, [r7, #16]
     27e:	4313      	orrs	r3, r2
     280:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
     282:	230c      	movs	r3, #12
     284:	18fb      	adds	r3, r7, r3
     286:	0018      	movs	r0, r3
     288:	4b08      	ldr	r3, [pc, #32]	; (2ac <_gpio_get_level+0x88>)
     28a:	4798      	blx	r3

	return tmp;
     28c:	693b      	ldr	r3, [r7, #16]
}
     28e:	0018      	movs	r0, r3
     290:	46bd      	mov	sp, r7
     292:	b006      	add	sp, #24
     294:	bd80      	pop	{r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	0000136d 	.word	0x0000136d
     29c:	00000115 	.word	0x00000115
     2a0:	41004400 	.word	0x41004400
     2a4:	000001b1 	.word	0x000001b1
     2a8:	00000161 	.word	0x00000161
     2ac:	0000137b 	.word	0x0000137b

000002b0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b082      	sub	sp, #8
     2b4:	af00      	add	r7, sp, #0
     2b6:	0002      	movs	r2, r0
     2b8:	1dfb      	adds	r3, r7, #7
     2ba:	701a      	strb	r2, [r3, #0]
     2bc:	1dbb      	adds	r3, r7, #6
     2be:	1c0a      	adds	r2, r1, #0
     2c0:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     2c2:	1dfb      	adds	r3, r7, #7
     2c4:	781b      	ldrb	r3, [r3, #0]
     2c6:	115b      	asrs	r3, r3, #5
     2c8:	b2d8      	uxtb	r0, r3
     2ca:	1dfb      	adds	r3, r7, #7
     2cc:	781b      	ldrb	r3, [r3, #0]
     2ce:	001a      	movs	r2, r3
     2d0:	231f      	movs	r3, #31
     2d2:	4013      	ands	r3, r2
     2d4:	2201      	movs	r2, #1
     2d6:	409a      	lsls	r2, r3
     2d8:	0011      	movs	r1, r2
     2da:	1dbb      	adds	r3, r7, #6
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	001a      	movs	r2, r3
     2e0:	4b02      	ldr	r3, [pc, #8]	; (2ec <gpio_set_pin_level+0x3c>)
     2e2:	4798      	blx	r3
}
     2e4:	46c0      	nop			; (mov r8, r8)
     2e6:	46bd      	mov	sp, r7
     2e8:	b002      	add	sp, #8
     2ea:	bd80      	pop	{r7, pc}
     2ec:	000001d5 	.word	0x000001d5

000002f0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b082      	sub	sp, #8
     2f4:	af00      	add	r7, sp, #0
     2f6:	0002      	movs	r2, r0
     2f8:	1dfb      	adds	r3, r7, #7
     2fa:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     2fc:	1dfb      	adds	r3, r7, #7
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	115b      	asrs	r3, r3, #5
     302:	b2db      	uxtb	r3, r3
     304:	0018      	movs	r0, r3
     306:	4b09      	ldr	r3, [pc, #36]	; (32c <gpio_get_pin_level+0x3c>)
     308:	4798      	blx	r3
     30a:	0001      	movs	r1, r0
     30c:	1dfb      	adds	r3, r7, #7
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	001a      	movs	r2, r3
     312:	231f      	movs	r3, #31
     314:	4013      	ands	r3, r2
     316:	2201      	movs	r2, #1
     318:	409a      	lsls	r2, r3
     31a:	0013      	movs	r3, r2
     31c:	400b      	ands	r3, r1
     31e:	1e5a      	subs	r2, r3, #1
     320:	4193      	sbcs	r3, r2
     322:	b2db      	uxtb	r3, r3
}
     324:	0018      	movs	r0, r3
     326:	46bd      	mov	sp, r7
     328:	b002      	add	sp, #8
     32a:	bd80      	pop	{r7, pc}
     32c:	00000225 	.word	0x00000225

00000330 <_ZN19GPIOConnector_ClassC1Ev>:
GPIOConnector_Class::GPIOConnector_Class()
     330:	b580      	push	{r7, lr}
     332:	b082      	sub	sp, #8
     334:	af00      	add	r7, sp, #0
     336:	6078      	str	r0, [r7, #4]
} //ByteBiulder_Class
     338:	687b      	ldr	r3, [r7, #4]
     33a:	0018      	movs	r0, r3
     33c:	46bd      	mov	sp, r7
     33e:	b002      	add	sp, #8
     340:	bd80      	pop	{r7, pc}

00000342 <_ZN19GPIOConnector_ClassD1Ev>:
GPIOConnector_Class::~GPIOConnector_Class()
     342:	b580      	push	{r7, lr}
     344:	b082      	sub	sp, #8
     346:	af00      	add	r7, sp, #0
     348:	6078      	str	r0, [r7, #4]
} //~ByteBiulder_Class
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	0018      	movs	r0, r3
     34e:	46bd      	mov	sp, r7
     350:	b002      	add	sp, #8
     352:	bd80      	pop	{r7, pc}

00000354 <_ZN19GPIOConnector_Class4InitEv>:
bool	GPIOConnector_Class::Init(void){
     354:	b580      	push	{r7, lr}
     356:	b082      	sub	sp, #8
     358:	af00      	add	r7, sp, #0
     35a:	6078      	str	r0, [r7, #4]
	return EXT2.Init();
     35c:	4b04      	ldr	r3, [pc, #16]	; (370 <_ZN19GPIOConnector_Class4InitEv+0x1c>)
     35e:	0018      	movs	r0, r3
     360:	4b04      	ldr	r3, [pc, #16]	; (374 <_ZN19GPIOConnector_Class4InitEv+0x20>)
     362:	4798      	blx	r3
     364:	0003      	movs	r3, r0
}
     366:	0018      	movs	r0, r3
     368:	46bd      	mov	sp, r7
     36a:	b002      	add	sp, #8
     36c:	bd80      	pop	{r7, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	200004e0 	.word	0x200004e0
     374:	000010d9 	.word	0x000010d9

00000378 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh>:
	byte = Atohex(upperNibble) << 4;    // get upper hex nibble
	byte |= Atohex(lowerNibble);        // get lower hex nibble and merge
	return byte;

}
uint8_t	GPIOConnector_Class::PutByteOnEXT2(uint8_t by){
     378:	b580      	push	{r7, lr}
     37a:	b084      	sub	sp, #16
     37c:	af00      	add	r7, sp, #0
     37e:	6078      	str	r0, [r7, #4]
     380:	000a      	movs	r2, r1
     382:	1cfb      	adds	r3, r7, #3
     384:	701a      	strb	r2, [r3, #0]
	uint8_t mask=0x01;
     386:	230f      	movs	r3, #15
     388:	18fb      	adds	r3, r7, r3
     38a:	2201      	movs	r2, #1
     38c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++)
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2200      	movs	r2, #0
     392:	70da      	strb	r2, [r3, #3]
     394:	687b      	ldr	r3, [r7, #4]
     396:	78db      	ldrb	r3, [r3, #3]
     398:	2b07      	cmp	r3, #7
     39a:	dc21      	bgt.n	3e0 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x68>
	{
		
		gpio_set_pin_level(EXT2.connector.pinsOutput[i],(by&mask)>0);
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	78db      	ldrb	r3, [r3, #3]
     3a0:	001a      	movs	r2, r3
     3a2:	4b12      	ldr	r3, [pc, #72]	; (3ec <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x74>)
     3a4:	189b      	adds	r3, r3, r2
     3a6:	7a18      	ldrb	r0, [r3, #8]
     3a8:	1cfb      	adds	r3, r7, #3
     3aa:	220f      	movs	r2, #15
     3ac:	18ba      	adds	r2, r7, r2
     3ae:	781b      	ldrb	r3, [r3, #0]
     3b0:	7812      	ldrb	r2, [r2, #0]
     3b2:	4013      	ands	r3, r2
     3b4:	b2db      	uxtb	r3, r3
     3b6:	17da      	asrs	r2, r3, #31
     3b8:	1ad3      	subs	r3, r2, r3
     3ba:	0fdb      	lsrs	r3, r3, #31
     3bc:	b2db      	uxtb	r3, r3
     3be:	0019      	movs	r1, r3
     3c0:	4b0b      	ldr	r3, [pc, #44]	; (3f0 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x78>)
     3c2:	4798      	blx	r3
		mask=mask<<1;
     3c4:	230f      	movs	r3, #15
     3c6:	18fa      	adds	r2, r7, r3
     3c8:	230f      	movs	r3, #15
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	18db      	adds	r3, r3, r3
     3d0:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++)
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	78db      	ldrb	r3, [r3, #3]
     3d6:	3301      	adds	r3, #1
     3d8:	b2da      	uxtb	r2, r3
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	70da      	strb	r2, [r3, #3]
     3de:	e7d9      	b.n	394 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x1c>
	}
	return	by;
     3e0:	1cfb      	adds	r3, r7, #3
     3e2:	781b      	ldrb	r3, [r3, #0]
}
     3e4:	0018      	movs	r0, r3
     3e6:	46bd      	mov	sp, r7
     3e8:	b004      	add	sp, #16
     3ea:	bd80      	pop	{r7, pc}
     3ec:	200004e0 	.word	0x200004e0
     3f0:	000002b1 	.word	0x000002b1

000003f4 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev>:

		gpio_set_pin_level(EXT2.connector.pinsOutput[i],false);
	}
	return	0;
}
uint8_t	GPIOConnector_Class::ReadByteOnEXT2(void){
     3f4:	b580      	push	{r7, lr}
     3f6:	b084      	sub	sp, #16
     3f8:	af00      	add	r7, sp, #0
     3fa:	6078      	str	r0, [r7, #4]
	uint8_t mask=0x01;
     3fc:	230f      	movs	r3, #15
     3fe:	18fb      	adds	r3, r7, r3
     400:	2201      	movs	r2, #1
     402:	701a      	strb	r2, [r3, #0]
	byte=0;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2200      	movs	r2, #0
     408:	719a      	strb	r2, [r3, #6]
	bit=false;
     40a:	687b      	ldr	r3, [r7, #4]
     40c:	2200      	movs	r2, #0
     40e:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < 8; i++)
     410:	687b      	ldr	r3, [r7, #4]
     412:	2200      	movs	r2, #0
     414:	70da      	strb	r2, [r3, #3]
     416:	687b      	ldr	r3, [r7, #4]
     418:	78db      	ldrb	r3, [r3, #3]
     41a:	2b07      	cmp	r3, #7
     41c:	dc29      	bgt.n	472 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x7e>
	{
		bit=gpio_get_pin_level(EXT2.connector.pinsInput[7-i]);
     41e:	687b      	ldr	r3, [r7, #4]
     420:	78db      	ldrb	r3, [r3, #3]
     422:	001a      	movs	r2, r3
     424:	2307      	movs	r3, #7
     426:	1a9b      	subs	r3, r3, r2
     428:	4a15      	ldr	r2, [pc, #84]	; (480 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x8c>)
     42a:	5cd3      	ldrb	r3, [r2, r3]
     42c:	0018      	movs	r0, r3
     42e:	4b15      	ldr	r3, [pc, #84]	; (484 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x90>)
     430:	4798      	blx	r3
     432:	0003      	movs	r3, r0
     434:	001a      	movs	r2, r3
     436:	687b      	ldr	r3, [r7, #4]
     438:	721a      	strb	r2, [r3, #8]
		if (bit)
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	7a1b      	ldrb	r3, [r3, #8]
     43e:	2b00      	cmp	r3, #0
     440:	d008      	beq.n	454 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x60>
		{
			byte|=(mask);
     442:	687b      	ldr	r3, [r7, #4]
     444:	799a      	ldrb	r2, [r3, #6]
     446:	230f      	movs	r3, #15
     448:	18fb      	adds	r3, r7, r3
     44a:	781b      	ldrb	r3, [r3, #0]
     44c:	4313      	orrs	r3, r2
     44e:	b2da      	uxtb	r2, r3
     450:	687b      	ldr	r3, [r7, #4]
     452:	719a      	strb	r2, [r3, #6]
		}
		
		mask=mask<<1;
     454:	230f      	movs	r3, #15
     456:	18fb      	adds	r3, r7, r3
     458:	781b      	ldrb	r3, [r3, #0]
     45a:	18db      	adds	r3, r3, r3
     45c:	b2da      	uxtb	r2, r3
     45e:	230f      	movs	r3, #15
     460:	18fb      	adds	r3, r7, r3
     462:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++)
     464:	687b      	ldr	r3, [r7, #4]
     466:	78db      	ldrb	r3, [r3, #3]
     468:	3301      	adds	r3, #1
     46a:	b2da      	uxtb	r2, r3
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	70da      	strb	r2, [r3, #3]
     470:	e7d1      	b.n	416 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x22>
	}
	return	byte;
     472:	687b      	ldr	r3, [r7, #4]
     474:	799b      	ldrb	r3, [r3, #6]
}
     476:	0018      	movs	r0, r3
     478:	46bd      	mov	sp, r7
     47a:	b004      	add	sp, #16
     47c:	bd80      	pop	{r7, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	200004e0 	.word	0x200004e0
     484:	000002f1 	.word	0x000002f1

00000488 <_ZlsIA3_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
     490:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     492:	683a      	ldr	r2, [r7, #0]
     494:	687b      	ldr	r3, [r7, #4]
     496:	0011      	movs	r1, r2
     498:	0018      	movs	r0, r3
     49a:	4b03      	ldr	r3, [pc, #12]	; (4a8 <_ZlsIA3_cER5PrintS2_RKT_+0x20>)
     49c:	4798      	blx	r3
     49e:	687b      	ldr	r3, [r7, #4]
     4a0:	0018      	movs	r0, r3
     4a2:	46bd      	mov	sp, r7
     4a4:	b002      	add	sp, #8
     4a6:	bd80      	pop	{r7, pc}
     4a8:	0000438d 	.word	0x0000438d

000004ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     4ac:	b580      	push	{r7, lr}
     4ae:	b082      	sub	sp, #8
     4b0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     4b2:	4b2f      	ldr	r3, [pc, #188]	; (570 <Reset_Handler+0xc4>)
     4b4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     4b6:	4b2f      	ldr	r3, [pc, #188]	; (574 <Reset_Handler+0xc8>)
     4b8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     4ba:	687a      	ldr	r2, [r7, #4]
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	429a      	cmp	r2, r3
     4c0:	d00c      	beq.n	4dc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     4c2:	e007      	b.n	4d4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     4c4:	683b      	ldr	r3, [r7, #0]
     4c6:	1d1a      	adds	r2, r3, #4
     4c8:	603a      	str	r2, [r7, #0]
     4ca:	687a      	ldr	r2, [r7, #4]
     4cc:	1d11      	adds	r1, r2, #4
     4ce:	6079      	str	r1, [r7, #4]
     4d0:	6812      	ldr	r2, [r2, #0]
     4d2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     4d4:	683a      	ldr	r2, [r7, #0]
     4d6:	4b28      	ldr	r3, [pc, #160]	; (578 <Reset_Handler+0xcc>)
     4d8:	429a      	cmp	r2, r3
     4da:	d3f3      	bcc.n	4c4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     4dc:	4b27      	ldr	r3, [pc, #156]	; (57c <Reset_Handler+0xd0>)
     4de:	603b      	str	r3, [r7, #0]
     4e0:	e004      	b.n	4ec <Reset_Handler+0x40>
                *pDest++ = 0;
     4e2:	683b      	ldr	r3, [r7, #0]
     4e4:	1d1a      	adds	r2, r3, #4
     4e6:	603a      	str	r2, [r7, #0]
     4e8:	2200      	movs	r2, #0
     4ea:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     4ec:	683a      	ldr	r2, [r7, #0]
     4ee:	4b24      	ldr	r3, [pc, #144]	; (580 <Reset_Handler+0xd4>)
     4f0:	429a      	cmp	r2, r3
     4f2:	d3f6      	bcc.n	4e2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     4f4:	4b23      	ldr	r3, [pc, #140]	; (584 <Reset_Handler+0xd8>)
     4f6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4f8:	4b23      	ldr	r3, [pc, #140]	; (588 <Reset_Handler+0xdc>)
     4fa:	687a      	ldr	r2, [r7, #4]
     4fc:	21ff      	movs	r1, #255	; 0xff
     4fe:	438a      	bics	r2, r1
     500:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     502:	4a22      	ldr	r2, [pc, #136]	; (58c <Reset_Handler+0xe0>)
     504:	2390      	movs	r3, #144	; 0x90
     506:	005b      	lsls	r3, r3, #1
     508:	2102      	movs	r1, #2
     50a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     50c:	4a20      	ldr	r2, [pc, #128]	; (590 <Reset_Handler+0xe4>)
     50e:	78d3      	ldrb	r3, [r2, #3]
     510:	2103      	movs	r1, #3
     512:	438b      	bics	r3, r1
     514:	1c19      	adds	r1, r3, #0
     516:	2302      	movs	r3, #2
     518:	430b      	orrs	r3, r1
     51a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     51c:	4a1c      	ldr	r2, [pc, #112]	; (590 <Reset_Handler+0xe4>)
     51e:	78d3      	ldrb	r3, [r2, #3]
     520:	210c      	movs	r1, #12
     522:	438b      	bics	r3, r1
     524:	1c19      	adds	r1, r3, #0
     526:	2308      	movs	r3, #8
     528:	430b      	orrs	r3, r1
     52a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     52c:	4a19      	ldr	r2, [pc, #100]	; (594 <Reset_Handler+0xe8>)
     52e:	7b93      	ldrb	r3, [r2, #14]
     530:	2130      	movs	r1, #48	; 0x30
     532:	438b      	bics	r3, r1
     534:	1c19      	adds	r1, r3, #0
     536:	2320      	movs	r3, #32
     538:	430b      	orrs	r3, r1
     53a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     53c:	4a15      	ldr	r2, [pc, #84]	; (594 <Reset_Handler+0xe8>)
     53e:	7b93      	ldrb	r3, [r2, #14]
     540:	210c      	movs	r1, #12
     542:	438b      	bics	r3, r1
     544:	1c19      	adds	r1, r3, #0
     546:	2308      	movs	r3, #8
     548:	430b      	orrs	r3, r1
     54a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     54c:	4a11      	ldr	r2, [pc, #68]	; (594 <Reset_Handler+0xe8>)
     54e:	7b93      	ldrb	r3, [r2, #14]
     550:	2103      	movs	r1, #3
     552:	438b      	bics	r3, r1
     554:	1c19      	adds	r1, r3, #0
     556:	2302      	movs	r3, #2
     558:	430b      	orrs	r3, r1
     55a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     55c:	4a0e      	ldr	r2, [pc, #56]	; (598 <Reset_Handler+0xec>)
     55e:	6853      	ldr	r3, [r2, #4]
     560:	2180      	movs	r1, #128	; 0x80
     562:	430b      	orrs	r3, r1
     564:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     566:	4b0d      	ldr	r3, [pc, #52]	; (59c <Reset_Handler+0xf0>)
     568:	4798      	blx	r3

        /* Branch to main function */
        main();
     56a:	4b0d      	ldr	r3, [pc, #52]	; (5a0 <Reset_Handler+0xf4>)
     56c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     56e:	e7fe      	b.n	56e <Reset_Handler+0xc2>
     570:	000059e4 	.word	0x000059e4
     574:	20000000 	.word	0x20000000
     578:	200004ac 	.word	0x200004ac
     57c:	200004ac 	.word	0x200004ac
     580:	20000ac0 	.word	0x20000ac0
     584:	00000000 	.word	0x00000000
     588:	e000ed00 	.word	0xe000ed00
     58c:	41007000 	.word	0x41007000
     590:	41005000 	.word	0x41005000
     594:	41004800 	.word	0x41004800
     598:	41004000 	.word	0x41004000
     59c:	000053d9 	.word	0x000053d9
     5a0:	000005ad 	.word	0x000005ad

000005a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	af00      	add	r7, sp, #0
        while (1) {
     5a8:	e7fe      	b.n	5a8 <Dummy_Handler+0x4>
	...

000005ac <main>:
uint8_t	processValue=0;
float	processFloat=0,outputFloat=0,integralError=0;
uint8_t	SimpleProportionalController(uint8_t sp);

int main(void)
{
     5ac:	b590      	push	{r4, r7, lr}
     5ae:	b083      	sub	sp, #12
     5b0:	af00      	add	r7, sp, #0
	char cmd;
	uint8_t	byte;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     5b2:	4b3d      	ldr	r3, [pc, #244]	; (6a8 <main+0xfc>)
     5b4:	4798      	blx	r3
    /* Replace with your application code */
	serial.Init();
     5b6:	4b3d      	ldr	r3, [pc, #244]	; (6ac <main+0x100>)
     5b8:	0018      	movs	r0, r3
     5ba:	4b3d      	ldr	r3, [pc, #244]	; (6b0 <main+0x104>)
     5bc:	4798      	blx	r3
	gpio.Init();
     5be:	4b3d      	ldr	r3, [pc, #244]	; (6b4 <main+0x108>)
     5c0:	0018      	movs	r0, r3
     5c2:	4b3d      	ldr	r3, [pc, #244]	; (6b8 <main+0x10c>)
     5c4:	4798      	blx	r3
	//	serial.write(test,sizeof(test));
	delay_ms(200);
     5c6:	20c8      	movs	r0, #200	; 0xc8
     5c8:	4b3c      	ldr	r3, [pc, #240]	; (6bc <main+0x110>)
     5ca:	4798      	blx	r3
	serial.println("*** USB Interface Test ***");
     5cc:	4a3c      	ldr	r2, [pc, #240]	; (6c0 <main+0x114>)
     5ce:	4b37      	ldr	r3, [pc, #220]	; (6ac <main+0x100>)
     5d0:	0011      	movs	r1, r2
     5d2:	0018      	movs	r0, r3
     5d4:	4b3b      	ldr	r3, [pc, #236]	; (6c4 <main+0x118>)
     5d6:	4798      	blx	r3
    while (1) 
    {
		serial<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<" ***"<<NEWLINE;
     5d8:	4a3b      	ldr	r2, [pc, #236]	; (6c8 <main+0x11c>)
     5da:	4b34      	ldr	r3, [pc, #208]	; (6ac <main+0x100>)
     5dc:	0011      	movs	r1, r2
     5de:	0018      	movs	r0, r3
     5e0:	4b3a      	ldr	r3, [pc, #232]	; (6cc <main+0x120>)
     5e2:	4798      	blx	r3
     5e4:	0002      	movs	r2, r0
     5e6:	4b3a      	ldr	r3, [pc, #232]	; (6d0 <main+0x124>)
     5e8:	0019      	movs	r1, r3
     5ea:	0010      	movs	r0, r2
     5ec:	4b37      	ldr	r3, [pc, #220]	; (6cc <main+0x120>)
     5ee:	4798      	blx	r3
     5f0:	0002      	movs	r2, r0
     5f2:	4b38      	ldr	r3, [pc, #224]	; (6d4 <main+0x128>)
     5f4:	0019      	movs	r1, r3
     5f6:	0010      	movs	r0, r2
     5f8:	4b37      	ldr	r3, [pc, #220]	; (6d8 <main+0x12c>)
     5fa:	4798      	blx	r3
     5fc:	0002      	movs	r2, r0
     5fe:	4b37      	ldr	r3, [pc, #220]	; (6dc <main+0x130>)
     600:	0019      	movs	r1, r3
     602:	0010      	movs	r0, r2
     604:	4b36      	ldr	r3, [pc, #216]	; (6e0 <main+0x134>)
     606:	4798      	blx	r3
     608:	0002      	movs	r2, r0
     60a:	4b36      	ldr	r3, [pc, #216]	; (6e4 <main+0x138>)
     60c:	0019      	movs	r1, r3
     60e:	0010      	movs	r0, r2
     610:	4b35      	ldr	r3, [pc, #212]	; (6e8 <main+0x13c>)
     612:	4798      	blx	r3
     614:	0002      	movs	r2, r0
     616:	4b35      	ldr	r3, [pc, #212]	; (6ec <main+0x140>)
     618:	0019      	movs	r1, r3
     61a:	0010      	movs	r0, r2
     61c:	4b34      	ldr	r3, [pc, #208]	; (6f0 <main+0x144>)
     61e:	4798      	blx	r3
		byte=gpio.ReadByteOnEXT2();
     620:	1dfc      	adds	r4, r7, #7
     622:	4b24      	ldr	r3, [pc, #144]	; (6b4 <main+0x108>)
     624:	0018      	movs	r0, r3
     626:	4b33      	ldr	r3, [pc, #204]	; (6f4 <main+0x148>)
     628:	4798      	blx	r3
     62a:	0003      	movs	r3, r0
     62c:	7023      	strb	r3, [r4, #0]
		serial<<"Input Value on EXT2: ";
     62e:	4a32      	ldr	r2, [pc, #200]	; (6f8 <main+0x14c>)
     630:	4b1e      	ldr	r3, [pc, #120]	; (6ac <main+0x100>)
     632:	0011      	movs	r1, r2
     634:	0018      	movs	r0, r3
     636:	4b31      	ldr	r3, [pc, #196]	; (6fc <main+0x150>)
     638:	4798      	blx	r3
		serial.println(byte,HEX);
     63a:	1dfb      	adds	r3, r7, #7
     63c:	7819      	ldrb	r1, [r3, #0]
     63e:	4b1b      	ldr	r3, [pc, #108]	; (6ac <main+0x100>)
     640:	2210      	movs	r2, #16
     642:	0018      	movs	r0, r3
     644:	4b2e      	ldr	r3, [pc, #184]	; (700 <main+0x154>)
     646:	4798      	blx	r3
// 			
// 		} 
// 		else
// 		{
			while(1){
				byte=gpio.ReadByteOnEXT2();
     648:	1dfc      	adds	r4, r7, #7
     64a:	4b1a      	ldr	r3, [pc, #104]	; (6b4 <main+0x108>)
     64c:	0018      	movs	r0, r3
     64e:	4b29      	ldr	r3, [pc, #164]	; (6f4 <main+0x148>)
     650:	4798      	blx	r3
     652:	0003      	movs	r3, r0
     654:	7023      	strb	r3, [r4, #0]
				serial<<"SetpointPosition: ";
     656:	4a2b      	ldr	r2, [pc, #172]	; (704 <main+0x158>)
     658:	4b14      	ldr	r3, [pc, #80]	; (6ac <main+0x100>)
     65a:	0011      	movs	r1, r2
     65c:	0018      	movs	r0, r3
     65e:	4b2a      	ldr	r3, [pc, #168]	; (708 <main+0x15c>)
     660:	4798      	blx	r3
				serial.print(byte,HEX);
     662:	1dfb      	adds	r3, r7, #7
     664:	7819      	ldrb	r1, [r3, #0]
     666:	4b11      	ldr	r3, [pc, #68]	; (6ac <main+0x100>)
     668:	2210      	movs	r2, #16
     66a:	0018      	movs	r0, r3
     66c:	4b27      	ldr	r3, [pc, #156]	; (70c <main+0x160>)
     66e:	4798      	blx	r3
				serial<<"\tActualPosition: ";
     670:	4a27      	ldr	r2, [pc, #156]	; (710 <main+0x164>)
     672:	4b0e      	ldr	r3, [pc, #56]	; (6ac <main+0x100>)
     674:	0011      	movs	r1, r2
     676:	0018      	movs	r0, r3
     678:	4b26      	ldr	r3, [pc, #152]	; (714 <main+0x168>)
     67a:	4798      	blx	r3
				serial.println(SimpleProportionalController(byte),HEX);
     67c:	1dfb      	adds	r3, r7, #7
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	0018      	movs	r0, r3
     682:	4b25      	ldr	r3, [pc, #148]	; (718 <main+0x16c>)
     684:	4798      	blx	r3
     686:	0003      	movs	r3, r0
     688:	0019      	movs	r1, r3
     68a:	4b08      	ldr	r3, [pc, #32]	; (6ac <main+0x100>)
     68c:	2210      	movs	r2, #16
     68e:	0018      	movs	r0, r3
     690:	4b1b      	ldr	r3, [pc, #108]	; (700 <main+0x154>)
     692:	4798      	blx	r3
				gpio.PutByteOnEXT2(processValue);
     694:	4b21      	ldr	r3, [pc, #132]	; (71c <main+0x170>)
     696:	781a      	ldrb	r2, [r3, #0]
     698:	4b06      	ldr	r3, [pc, #24]	; (6b4 <main+0x108>)
     69a:	0011      	movs	r1, r2
     69c:	0018      	movs	r0, r3
     69e:	4b20      	ldr	r3, [pc, #128]	; (720 <main+0x174>)
     6a0:	4798      	blx	r3
				asm("nop");
     6a2:	46c0      	nop			; (mov r8, r8)
				byte=gpio.ReadByteOnEXT2();
     6a4:	e7d0      	b.n	648 <main+0x9c>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	0000123d 	.word	0x0000123d
     6ac:	200009ec 	.word	0x200009ec
     6b0:	00004301 	.word	0x00004301
     6b4:	200004c8 	.word	0x200004c8
     6b8:	00000355 	.word	0x00000355
     6bc:	00001389 	.word	0x00001389
     6c0:	000056f4 	.word	0x000056f4
     6c4:	000043c5 	.word	0x000043c5
     6c8:	00005710 	.word	0x00005710
     6cc:	00000849 	.word	0x00000849
     6d0:	0000571c 	.word	0x0000571c
     6d4:	00005728 	.word	0x00005728
     6d8:	0000086d 	.word	0x0000086d
     6dc:	00005730 	.word	0x00005730
     6e0:	00000891 	.word	0x00000891
     6e4:	0000573c 	.word	0x0000573c
     6e8:	000008b5 	.word	0x000008b5
     6ec:	00005744 	.word	0x00005744
     6f0:	00000489 	.word	0x00000489
     6f4:	000003f5 	.word	0x000003f5
     6f8:	00005748 	.word	0x00005748
     6fc:	000008d9 	.word	0x000008d9
     700:	000044a5 	.word	0x000044a5
     704:	00005760 	.word	0x00005760
     708:	000008fd 	.word	0x000008fd
     70c:	00004499 	.word	0x00004499
     710:	00005774 	.word	0x00005774
     714:	00000921 	.word	0x00000921
     718:	00000725 	.word	0x00000725
     71c:	200004d1 	.word	0x200004d1
     720:	00000379 	.word	0x00000379

00000724 <_Z28SimpleProportionalControllerh>:
		delay_ms(500);
	
    }
}

uint8_t	SimpleProportionalController(uint8_t sp){
     724:	b590      	push	{r4, r7, lr}
     726:	b085      	sub	sp, #20
     728:	af00      	add	r7, sp, #0
     72a:	0002      	movs	r2, r0
     72c:	1dfb      	adds	r3, r7, #7
     72e:	701a      	strb	r2, [r3, #0]
	//int proportionalError=(sp-processValue);
	float errorFloat=float(sp)-processFloat;
     730:	1dfb      	adds	r3, r7, #7
     732:	781a      	ldrb	r2, [r3, #0]
     734:	4b37      	ldr	r3, [pc, #220]	; (814 <_Z28SimpleProportionalControllerh+0xf0>)
     736:	0010      	movs	r0, r2
     738:	4798      	blx	r3
     73a:	4b37      	ldr	r3, [pc, #220]	; (818 <_Z28SimpleProportionalControllerh+0xf4>)
     73c:	681a      	ldr	r2, [r3, #0]
     73e:	4b37      	ldr	r3, [pc, #220]	; (81c <_Z28SimpleProportionalControllerh+0xf8>)
     740:	1c11      	adds	r1, r2, #0
     742:	4798      	blx	r3
     744:	1c03      	adds	r3, r0, #0
     746:	60bb      	str	r3, [r7, #8]
	integralError=errorFloat+integralError;
     748:	68ba      	ldr	r2, [r7, #8]
     74a:	4b35      	ldr	r3, [pc, #212]	; (820 <_Z28SimpleProportionalControllerh+0xfc>)
     74c:	6819      	ldr	r1, [r3, #0]
     74e:	4b35      	ldr	r3, [pc, #212]	; (824 <_Z28SimpleProportionalControllerh+0x100>)
     750:	1c10      	adds	r0, r2, #0
     752:	4798      	blx	r3
     754:	1c03      	adds	r3, r0, #0
     756:	1c1a      	adds	r2, r3, #0
     758:	4b31      	ldr	r3, [pc, #196]	; (820 <_Z28SimpleProportionalControllerh+0xfc>)
     75a:	601a      	str	r2, [r3, #0]
	errorFloat=2*errorFloat+integralError/32;
     75c:	68ba      	ldr	r2, [r7, #8]
     75e:	4b31      	ldr	r3, [pc, #196]	; (824 <_Z28SimpleProportionalControllerh+0x100>)
     760:	1c11      	adds	r1, r2, #0
     762:	1c10      	adds	r0, r2, #0
     764:	4798      	blx	r3
     766:	1c03      	adds	r3, r0, #0
     768:	1c1c      	adds	r4, r3, #0
     76a:	4b2d      	ldr	r3, [pc, #180]	; (820 <_Z28SimpleProportionalControllerh+0xfc>)
     76c:	681a      	ldr	r2, [r3, #0]
     76e:	4b2e      	ldr	r3, [pc, #184]	; (828 <_Z28SimpleProportionalControllerh+0x104>)
     770:	2184      	movs	r1, #132	; 0x84
     772:	05c9      	lsls	r1, r1, #23
     774:	1c10      	adds	r0, r2, #0
     776:	4798      	blx	r3
     778:	1c03      	adds	r3, r0, #0
     77a:	1c1a      	adds	r2, r3, #0
     77c:	4b29      	ldr	r3, [pc, #164]	; (824 <_Z28SimpleProportionalControllerh+0x100>)
     77e:	1c11      	adds	r1, r2, #0
     780:	1c20      	adds	r0, r4, #0
     782:	4798      	blx	r3
     784:	1c03      	adds	r3, r0, #0
     786:	60bb      	str	r3, [r7, #8]
	float valueFloat  =((errorFloat)/(64));
     788:	68ba      	ldr	r2, [r7, #8]
     78a:	4b27      	ldr	r3, [pc, #156]	; (828 <_Z28SimpleProportionalControllerh+0x104>)
     78c:	2185      	movs	r1, #133	; 0x85
     78e:	05c9      	lsls	r1, r1, #23
     790:	1c10      	adds	r0, r2, #0
     792:	4798      	blx	r3
     794:	1c03      	adds	r3, r0, #0
     796:	60fb      	str	r3, [r7, #12]
	outputFloat=outputFloat+valueFloat;
     798:	4b24      	ldr	r3, [pc, #144]	; (82c <_Z28SimpleProportionalControllerh+0x108>)
     79a:	681a      	ldr	r2, [r3, #0]
     79c:	4b21      	ldr	r3, [pc, #132]	; (824 <_Z28SimpleProportionalControllerh+0x100>)
     79e:	68f9      	ldr	r1, [r7, #12]
     7a0:	1c10      	adds	r0, r2, #0
     7a2:	4798      	blx	r3
     7a4:	1c03      	adds	r3, r0, #0
     7a6:	1c1a      	adds	r2, r3, #0
     7a8:	4b20      	ldr	r3, [pc, #128]	; (82c <_Z28SimpleProportionalControllerh+0x108>)
     7aa:	601a      	str	r2, [r3, #0]
	if (outputFloat<0)
     7ac:	4b1f      	ldr	r3, [pc, #124]	; (82c <_Z28SimpleProportionalControllerh+0x108>)
     7ae:	681a      	ldr	r2, [r3, #0]
     7b0:	4b1f      	ldr	r3, [pc, #124]	; (830 <_Z28SimpleProportionalControllerh+0x10c>)
     7b2:	2100      	movs	r1, #0
     7b4:	1c10      	adds	r0, r2, #0
     7b6:	4798      	blx	r3
     7b8:	1e03      	subs	r3, r0, #0
     7ba:	d006      	beq.n	7ca <_Z28SimpleProportionalControllerh+0xa6>
	{
		processValue=0;
     7bc:	4b1d      	ldr	r3, [pc, #116]	; (834 <_Z28SimpleProportionalControllerh+0x110>)
     7be:	2200      	movs	r2, #0
     7c0:	701a      	strb	r2, [r3, #0]
		processFloat=0;
     7c2:	4b15      	ldr	r3, [pc, #84]	; (818 <_Z28SimpleProportionalControllerh+0xf4>)
     7c4:	2200      	movs	r2, #0
     7c6:	601a      	str	r2, [r3, #0]
     7c8:	e01b      	b.n	802 <_Z28SimpleProportionalControllerh+0xde>
		
	} 
	else
	{
		if (outputFloat>255)
     7ca:	4b18      	ldr	r3, [pc, #96]	; (82c <_Z28SimpleProportionalControllerh+0x108>)
     7cc:	681a      	ldr	r2, [r3, #0]
     7ce:	4b1a      	ldr	r3, [pc, #104]	; (838 <_Z28SimpleProportionalControllerh+0x114>)
     7d0:	491a      	ldr	r1, [pc, #104]	; (83c <_Z28SimpleProportionalControllerh+0x118>)
     7d2:	1c10      	adds	r0, r2, #0
     7d4:	4798      	blx	r3
     7d6:	1e03      	subs	r3, r0, #0
     7d8:	d006      	beq.n	7e8 <_Z28SimpleProportionalControllerh+0xc4>
		{
			processValue=0xff;
     7da:	4b16      	ldr	r3, [pc, #88]	; (834 <_Z28SimpleProportionalControllerh+0x110>)
     7dc:	22ff      	movs	r2, #255	; 0xff
     7de:	701a      	strb	r2, [r3, #0]
			processFloat=255;
     7e0:	4b0d      	ldr	r3, [pc, #52]	; (818 <_Z28SimpleProportionalControllerh+0xf4>)
     7e2:	4a16      	ldr	r2, [pc, #88]	; (83c <_Z28SimpleProportionalControllerh+0x118>)
     7e4:	601a      	str	r2, [r3, #0]
     7e6:	e00c      	b.n	802 <_Z28SimpleProportionalControllerh+0xde>
		} 
		else
		{
			processValue=(uint8_t)outputFloat;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <_Z28SimpleProportionalControllerh+0x108>)
     7ea:	681a      	ldr	r2, [r3, #0]
     7ec:	4b14      	ldr	r3, [pc, #80]	; (840 <_Z28SimpleProportionalControllerh+0x11c>)
     7ee:	1c10      	adds	r0, r2, #0
     7f0:	4798      	blx	r3
     7f2:	0003      	movs	r3, r0
     7f4:	b2da      	uxtb	r2, r3
     7f6:	4b0f      	ldr	r3, [pc, #60]	; (834 <_Z28SimpleProportionalControllerh+0x110>)
     7f8:	701a      	strb	r2, [r3, #0]
			processFloat=outputFloat;
     7fa:	4b0c      	ldr	r3, [pc, #48]	; (82c <_Z28SimpleProportionalControllerh+0x108>)
     7fc:	681a      	ldr	r2, [r3, #0]
     7fe:	4b06      	ldr	r3, [pc, #24]	; (818 <_Z28SimpleProportionalControllerh+0xf4>)
     800:	601a      	str	r2, [r3, #0]
		}
	}
	delay_ms(100);
     802:	2064      	movs	r0, #100	; 0x64
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <_Z28SimpleProportionalControllerh+0x120>)
     806:	4798      	blx	r3
	
	return processValue;
     808:	4b0a      	ldr	r3, [pc, #40]	; (834 <_Z28SimpleProportionalControllerh+0x110>)
     80a:	781b      	ldrb	r3, [r3, #0]
	
}
     80c:	0018      	movs	r0, r3
     80e:	46bd      	mov	sp, r7
     810:	b005      	add	sp, #20
     812:	bd90      	pop	{r4, r7, pc}
     814:	00005301 	.word	0x00005301
     818:	200004d4 	.word	0x200004d4
     81c:	00004f89 	.word	0x00004f89
     820:	200004dc 	.word	0x200004dc
     824:	00004885 	.word	0x00004885
     828:	00004ba9 	.word	0x00004ba9
     82c:	200004d8 	.word	0x200004d8
     830:	00004805 	.word	0x00004805
     834:	200004d1 	.word	0x200004d1
     838:	0000482d 	.word	0x0000482d
     83c:	437f0000 	.word	0x437f0000
     840:	00004855 	.word	0x00004855
     844:	00001389 	.word	0x00001389

00000848 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     848:	b580      	push	{r7, lr}
     84a:	b082      	sub	sp, #8
     84c:	af00      	add	r7, sp, #0
     84e:	6078      	str	r0, [r7, #4]
     850:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     852:	683a      	ldr	r2, [r7, #0]
     854:	687b      	ldr	r3, [r7, #4]
     856:	0011      	movs	r1, r2
     858:	0018      	movs	r0, r3
     85a:	4b03      	ldr	r3, [pc, #12]	; (868 <_ZlsIA12_cER5PrintS2_RKT_+0x20>)
     85c:	4798      	blx	r3
     85e:	687b      	ldr	r3, [r7, #4]
     860:	0018      	movs	r0, r3
     862:	46bd      	mov	sp, r7
     864:	b002      	add	sp, #8
     866:	bd80      	pop	{r7, pc}
     868:	0000438d 	.word	0x0000438d

0000086c <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     876:	683a      	ldr	r2, [r7, #0]
     878:	687b      	ldr	r3, [r7, #4]
     87a:	0011      	movs	r1, r2
     87c:	0018      	movs	r0, r3
     87e:	4b03      	ldr	r3, [pc, #12]	; (88c <_ZlsIA8_cER5PrintS2_RKT_+0x20>)
     880:	4798      	blx	r3
     882:	687b      	ldr	r3, [r7, #4]
     884:	0018      	movs	r0, r3
     886:	46bd      	mov	sp, r7
     888:	b002      	add	sp, #8
     88a:	bd80      	pop	{r7, pc}
     88c:	0000438d 	.word	0x0000438d

00000890 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     89a:	683a      	ldr	r2, [r7, #0]
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	0011      	movs	r1, r2
     8a0:	0018      	movs	r0, r3
     8a2:	4b03      	ldr	r3, [pc, #12]	; (8b0 <_ZlsIA9_cER5PrintS2_RKT_+0x20>)
     8a4:	4798      	blx	r3
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	0018      	movs	r0, r3
     8aa:	46bd      	mov	sp, r7
     8ac:	b002      	add	sp, #8
     8ae:	bd80      	pop	{r7, pc}
     8b0:	0000438d 	.word	0x0000438d

000008b4 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     8b4:	b580      	push	{r7, lr}
     8b6:	b082      	sub	sp, #8
     8b8:	af00      	add	r7, sp, #0
     8ba:	6078      	str	r0, [r7, #4]
     8bc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     8be:	683a      	ldr	r2, [r7, #0]
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	0011      	movs	r1, r2
     8c4:	0018      	movs	r0, r3
     8c6:	4b03      	ldr	r3, [pc, #12]	; (8d4 <_ZlsIA5_cER5PrintS2_RKT_+0x20>)
     8c8:	4798      	blx	r3
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	0018      	movs	r0, r3
     8ce:	46bd      	mov	sp, r7
     8d0:	b002      	add	sp, #8
     8d2:	bd80      	pop	{r7, pc}
     8d4:	0000438d 	.word	0x0000438d

000008d8 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     8d8:	b580      	push	{r7, lr}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
     8e0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     8e2:	683a      	ldr	r2, [r7, #0]
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	0011      	movs	r1, r2
     8e8:	0018      	movs	r0, r3
     8ea:	4b03      	ldr	r3, [pc, #12]	; (8f8 <_ZlsIA22_cER5PrintS2_RKT_+0x20>)
     8ec:	4798      	blx	r3
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	0018      	movs	r0, r3
     8f2:	46bd      	mov	sp, r7
     8f4:	b002      	add	sp, #8
     8f6:	bd80      	pop	{r7, pc}
     8f8:	0000438d 	.word	0x0000438d

000008fc <_ZlsIA19_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     8fc:	b580      	push	{r7, lr}
     8fe:	b082      	sub	sp, #8
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
     904:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     906:	683a      	ldr	r2, [r7, #0]
     908:	687b      	ldr	r3, [r7, #4]
     90a:	0011      	movs	r1, r2
     90c:	0018      	movs	r0, r3
     90e:	4b03      	ldr	r3, [pc, #12]	; (91c <_ZlsIA19_cER5PrintS2_RKT_+0x20>)
     910:	4798      	blx	r3
     912:	687b      	ldr	r3, [r7, #4]
     914:	0018      	movs	r0, r3
     916:	46bd      	mov	sp, r7
     918:	b002      	add	sp, #8
     91a:	bd80      	pop	{r7, pc}
     91c:	0000438d 	.word	0x0000438d

00000920 <_ZlsIA18_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
     926:	6078      	str	r0, [r7, #4]
     928:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     92a:	683a      	ldr	r2, [r7, #0]
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	0011      	movs	r1, r2
     930:	0018      	movs	r0, r3
     932:	4b03      	ldr	r3, [pc, #12]	; (940 <_ZlsIA18_cER5PrintS2_RKT_+0x20>)
     934:	4798      	blx	r3
     936:	687b      	ldr	r3, [r7, #4]
     938:	0018      	movs	r0, r3
     93a:	46bd      	mov	sp, r7
     93c:	b002      	add	sp, #8
     93e:	bd80      	pop	{r7, pc}
     940:	0000438d 	.word	0x0000438d

00000944 <_Z41__static_initialization_and_destruction_0ii>:
     944:	b580      	push	{r7, lr}
     946:	b082      	sub	sp, #8
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	6039      	str	r1, [r7, #0]
     94e:	687b      	ldr	r3, [r7, #4]
     950:	2b01      	cmp	r3, #1
     952:	d10d      	bne.n	970 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     954:	683b      	ldr	r3, [r7, #0]
     956:	4a08      	ldr	r2, [pc, #32]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     958:	4293      	cmp	r3, r2
     95a:	d109      	bne.n	970 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static	GPIOConnector_Class	gpio;
     95c:	4b07      	ldr	r3, [pc, #28]	; (97c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     95e:	0018      	movs	r0, r3
     960:	4b07      	ldr	r3, [pc, #28]	; (980 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     962:	4798      	blx	r3
     964:	4a07      	ldr	r2, [pc, #28]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     966:	4908      	ldr	r1, [pc, #32]	; (988 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     968:	4b04      	ldr	r3, [pc, #16]	; (97c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     96a:	0018      	movs	r0, r3
     96c:	4b07      	ldr	r3, [pc, #28]	; (98c <_Z41__static_initialization_and_destruction_0ii+0x48>)
     96e:	4798      	blx	r3
}
     970:	46c0      	nop			; (mov r8, r8)
     972:	46bd      	mov	sp, r7
     974:	b002      	add	sp, #8
     976:	bd80      	pop	{r7, pc}
     978:	0000ffff 	.word	0x0000ffff
     97c:	200004c8 	.word	0x200004c8
     980:	00000331 	.word	0x00000331
     984:	20000000 	.word	0x20000000
     988:	00000343 	.word	0x00000343
     98c:	000046b9 	.word	0x000046b9

00000990 <_GLOBAL__sub_I_processValue>:
     990:	b580      	push	{r7, lr}
     992:	af00      	add	r7, sp, #0
     994:	4b03      	ldr	r3, [pc, #12]	; (9a4 <_GLOBAL__sub_I_processValue+0x14>)
     996:	0019      	movs	r1, r3
     998:	2001      	movs	r0, #1
     99a:	4b03      	ldr	r3, [pc, #12]	; (9a8 <_GLOBAL__sub_I_processValue+0x18>)
     99c:	4798      	blx	r3
     99e:	46bd      	mov	sp, r7
     9a0:	bd80      	pop	{r7, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	0000ffff 	.word	0x0000ffff
     9a8:	00000945 	.word	0x00000945

000009ac <hri_port_set_DIR_reg>:
{
     9ac:	b580      	push	{r7, lr}
     9ae:	b084      	sub	sp, #16
     9b0:	af00      	add	r7, sp, #0
     9b2:	60f8      	str	r0, [r7, #12]
     9b4:	607a      	str	r2, [r7, #4]
     9b6:	230b      	movs	r3, #11
     9b8:	18fb      	adds	r3, r7, r3
     9ba:	1c0a      	adds	r2, r1, #0
     9bc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9be:	230b      	movs	r3, #11
     9c0:	18fb      	adds	r3, r7, r3
     9c2:	781b      	ldrb	r3, [r3, #0]
     9c4:	68fa      	ldr	r2, [r7, #12]
     9c6:	01db      	lsls	r3, r3, #7
     9c8:	18d3      	adds	r3, r2, r3
     9ca:	3308      	adds	r3, #8
     9cc:	687a      	ldr	r2, [r7, #4]
     9ce:	601a      	str	r2, [r3, #0]
}
     9d0:	46c0      	nop			; (mov r8, r8)
     9d2:	46bd      	mov	sp, r7
     9d4:	b004      	add	sp, #16
     9d6:	bd80      	pop	{r7, pc}

000009d8 <hri_port_clear_DIR_reg>:
{
     9d8:	b580      	push	{r7, lr}
     9da:	b084      	sub	sp, #16
     9dc:	af00      	add	r7, sp, #0
     9de:	60f8      	str	r0, [r7, #12]
     9e0:	607a      	str	r2, [r7, #4]
     9e2:	230b      	movs	r3, #11
     9e4:	18fb      	adds	r3, r7, r3
     9e6:	1c0a      	adds	r2, r1, #0
     9e8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9ea:	230b      	movs	r3, #11
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	68fa      	ldr	r2, [r7, #12]
     9f2:	01db      	lsls	r3, r3, #7
     9f4:	18d3      	adds	r3, r2, r3
     9f6:	3304      	adds	r3, #4
     9f8:	687a      	ldr	r2, [r7, #4]
     9fa:	601a      	str	r2, [r3, #0]
}
     9fc:	46c0      	nop			; (mov r8, r8)
     9fe:	46bd      	mov	sp, r7
     a00:	b004      	add	sp, #16
     a02:	bd80      	pop	{r7, pc}

00000a04 <hri_port_set_OUT_reg>:
{
     a04:	b580      	push	{r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	60f8      	str	r0, [r7, #12]
     a0c:	607a      	str	r2, [r7, #4]
     a0e:	230b      	movs	r3, #11
     a10:	18fb      	adds	r3, r7, r3
     a12:	1c0a      	adds	r2, r1, #0
     a14:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a16:	230b      	movs	r3, #11
     a18:	18fb      	adds	r3, r7, r3
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	68fa      	ldr	r2, [r7, #12]
     a1e:	01db      	lsls	r3, r3, #7
     a20:	18d3      	adds	r3, r2, r3
     a22:	3318      	adds	r3, #24
     a24:	687a      	ldr	r2, [r7, #4]
     a26:	601a      	str	r2, [r3, #0]
}
     a28:	46c0      	nop			; (mov r8, r8)
     a2a:	46bd      	mov	sp, r7
     a2c:	b004      	add	sp, #16
     a2e:	bd80      	pop	{r7, pc}

00000a30 <hri_port_clear_OUT_reg>:
{
     a30:	b580      	push	{r7, lr}
     a32:	b084      	sub	sp, #16
     a34:	af00      	add	r7, sp, #0
     a36:	60f8      	str	r0, [r7, #12]
     a38:	607a      	str	r2, [r7, #4]
     a3a:	230b      	movs	r3, #11
     a3c:	18fb      	adds	r3, r7, r3
     a3e:	1c0a      	adds	r2, r1, #0
     a40:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a42:	230b      	movs	r3, #11
     a44:	18fb      	adds	r3, r7, r3
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	68fa      	ldr	r2, [r7, #12]
     a4a:	01db      	lsls	r3, r3, #7
     a4c:	18d3      	adds	r3, r2, r3
     a4e:	3314      	adds	r3, #20
     a50:	687a      	ldr	r2, [r7, #4]
     a52:	601a      	str	r2, [r3, #0]
}
     a54:	46c0      	nop			; (mov r8, r8)
     a56:	46bd      	mov	sp, r7
     a58:	b004      	add	sp, #16
     a5a:	bd80      	pop	{r7, pc}

00000a5c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a5c:	b590      	push	{r4, r7, lr}
     a5e:	b085      	sub	sp, #20
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
     a64:	000c      	movs	r4, r1
     a66:	0010      	movs	r0, r2
     a68:	0019      	movs	r1, r3
     a6a:	1cfb      	adds	r3, r7, #3
     a6c:	1c22      	adds	r2, r4, #0
     a6e:	701a      	strb	r2, [r3, #0]
     a70:	1cbb      	adds	r3, r7, #2
     a72:	1c02      	adds	r2, r0, #0
     a74:	701a      	strb	r2, [r3, #0]
     a76:	1c7b      	adds	r3, r7, #1
     a78:	1c0a      	adds	r2, r1, #0
     a7a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a7c:	1cfb      	adds	r3, r7, #3
     a7e:	7819      	ldrb	r1, [r3, #0]
     a80:	1cbb      	adds	r3, r7, #2
     a82:	781a      	ldrb	r2, [r3, #0]
     a84:	230f      	movs	r3, #15
     a86:	18fb      	adds	r3, r7, r3
     a88:	6878      	ldr	r0, [r7, #4]
     a8a:	2430      	movs	r4, #48	; 0x30
     a8c:	01c9      	lsls	r1, r1, #7
     a8e:	1841      	adds	r1, r0, r1
     a90:	188a      	adds	r2, r1, r2
     a92:	1912      	adds	r2, r2, r4
     a94:	7812      	ldrb	r2, [r2, #0]
     a96:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a98:	230f      	movs	r3, #15
     a9a:	18fb      	adds	r3, r7, r3
     a9c:	220f      	movs	r2, #15
     a9e:	18ba      	adds	r2, r7, r2
     aa0:	7812      	ldrb	r2, [r2, #0]
     aa2:	210f      	movs	r1, #15
     aa4:	438a      	bics	r2, r1
     aa6:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     aa8:	1c7b      	adds	r3, r7, #1
     aaa:	781b      	ldrb	r3, [r3, #0]
     aac:	220f      	movs	r2, #15
     aae:	4013      	ands	r3, r2
     ab0:	b2d9      	uxtb	r1, r3
     ab2:	230f      	movs	r3, #15
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	220f      	movs	r2, #15
     ab8:	18ba      	adds	r2, r7, r2
     aba:	7812      	ldrb	r2, [r2, #0]
     abc:	430a      	orrs	r2, r1
     abe:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ac0:	1cfb      	adds	r3, r7, #3
     ac2:	781a      	ldrb	r2, [r3, #0]
     ac4:	1cbb      	adds	r3, r7, #2
     ac6:	781b      	ldrb	r3, [r3, #0]
     ac8:	6879      	ldr	r1, [r7, #4]
     aca:	2030      	movs	r0, #48	; 0x30
     acc:	01d2      	lsls	r2, r2, #7
     ace:	188a      	adds	r2, r1, r2
     ad0:	18d3      	adds	r3, r2, r3
     ad2:	181b      	adds	r3, r3, r0
     ad4:	220f      	movs	r2, #15
     ad6:	18ba      	adds	r2, r7, r2
     ad8:	7812      	ldrb	r2, [r2, #0]
     ada:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     adc:	46c0      	nop			; (mov r8, r8)
     ade:	46bd      	mov	sp, r7
     ae0:	b005      	add	sp, #20
     ae2:	bd90      	pop	{r4, r7, pc}

00000ae4 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     ae4:	b590      	push	{r4, r7, lr}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
     aec:	000c      	movs	r4, r1
     aee:	0010      	movs	r0, r2
     af0:	0019      	movs	r1, r3
     af2:	1cfb      	adds	r3, r7, #3
     af4:	1c22      	adds	r2, r4, #0
     af6:	701a      	strb	r2, [r3, #0]
     af8:	1cbb      	adds	r3, r7, #2
     afa:	1c02      	adds	r2, r0, #0
     afc:	701a      	strb	r2, [r3, #0]
     afe:	1c7b      	adds	r3, r7, #1
     b00:	1c0a      	adds	r2, r1, #0
     b02:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b04:	1cfb      	adds	r3, r7, #3
     b06:	7819      	ldrb	r1, [r3, #0]
     b08:	1cbb      	adds	r3, r7, #2
     b0a:	781a      	ldrb	r2, [r3, #0]
     b0c:	230f      	movs	r3, #15
     b0e:	18fb      	adds	r3, r7, r3
     b10:	6878      	ldr	r0, [r7, #4]
     b12:	2430      	movs	r4, #48	; 0x30
     b14:	01c9      	lsls	r1, r1, #7
     b16:	1841      	adds	r1, r0, r1
     b18:	188a      	adds	r2, r1, r2
     b1a:	1912      	adds	r2, r2, r4
     b1c:	7812      	ldrb	r2, [r2, #0]
     b1e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b20:	230f      	movs	r3, #15
     b22:	18fb      	adds	r3, r7, r3
     b24:	220f      	movs	r2, #15
     b26:	18ba      	adds	r2, r7, r2
     b28:	7812      	ldrb	r2, [r2, #0]
     b2a:	210f      	movs	r1, #15
     b2c:	400a      	ands	r2, r1
     b2e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     b30:	1c7b      	adds	r3, r7, #1
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	011b      	lsls	r3, r3, #4
     b36:	b2d9      	uxtb	r1, r3
     b38:	230f      	movs	r3, #15
     b3a:	18fb      	adds	r3, r7, r3
     b3c:	220f      	movs	r2, #15
     b3e:	18ba      	adds	r2, r7, r2
     b40:	7812      	ldrb	r2, [r2, #0]
     b42:	430a      	orrs	r2, r1
     b44:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b46:	1cfb      	adds	r3, r7, #3
     b48:	781a      	ldrb	r2, [r3, #0]
     b4a:	1cbb      	adds	r3, r7, #2
     b4c:	781b      	ldrb	r3, [r3, #0]
     b4e:	6879      	ldr	r1, [r7, #4]
     b50:	2030      	movs	r0, #48	; 0x30
     b52:	01d2      	lsls	r2, r2, #7
     b54:	188a      	adds	r2, r1, r2
     b56:	18d3      	adds	r3, r2, r3
     b58:	181b      	adds	r3, r3, r0
     b5a:	220f      	movs	r2, #15
     b5c:	18ba      	adds	r2, r7, r2
     b5e:	7812      	ldrb	r2, [r2, #0]
     b60:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	46bd      	mov	sp, r7
     b66:	b005      	add	sp, #20
     b68:	bd90      	pop	{r4, r7, pc}

00000b6a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     b6a:	b590      	push	{r4, r7, lr}
     b6c:	b085      	sub	sp, #20
     b6e:	af00      	add	r7, sp, #0
     b70:	6078      	str	r0, [r7, #4]
     b72:	000c      	movs	r4, r1
     b74:	0010      	movs	r0, r2
     b76:	0019      	movs	r1, r3
     b78:	1cfb      	adds	r3, r7, #3
     b7a:	1c22      	adds	r2, r4, #0
     b7c:	701a      	strb	r2, [r3, #0]
     b7e:	1cbb      	adds	r3, r7, #2
     b80:	1c02      	adds	r2, r0, #0
     b82:	701a      	strb	r2, [r3, #0]
     b84:	1c7b      	adds	r3, r7, #1
     b86:	1c0a      	adds	r2, r1, #0
     b88:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b8a:	1cfb      	adds	r3, r7, #3
     b8c:	7819      	ldrb	r1, [r3, #0]
     b8e:	1cbb      	adds	r3, r7, #2
     b90:	781a      	ldrb	r2, [r3, #0]
     b92:	230f      	movs	r3, #15
     b94:	18fb      	adds	r3, r7, r3
     b96:	6878      	ldr	r0, [r7, #4]
     b98:	2440      	movs	r4, #64	; 0x40
     b9a:	01c9      	lsls	r1, r1, #7
     b9c:	1841      	adds	r1, r0, r1
     b9e:	188a      	adds	r2, r1, r2
     ba0:	1912      	adds	r2, r2, r4
     ba2:	7812      	ldrb	r2, [r2, #0]
     ba4:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	230f      	movs	r3, #15
     ba8:	18fb      	adds	r3, r7, r3
     baa:	220f      	movs	r2, #15
     bac:	18ba      	adds	r2, r7, r2
     bae:	7812      	ldrb	r2, [r2, #0]
     bb0:	2101      	movs	r1, #1
     bb2:	438a      	bics	r2, r1
     bb4:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bb6:	1c7b      	adds	r3, r7, #1
     bb8:	7819      	ldrb	r1, [r3, #0]
     bba:	230f      	movs	r3, #15
     bbc:	18fb      	adds	r3, r7, r3
     bbe:	220f      	movs	r2, #15
     bc0:	18ba      	adds	r2, r7, r2
     bc2:	7812      	ldrb	r2, [r2, #0]
     bc4:	430a      	orrs	r2, r1
     bc6:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bc8:	1cfb      	adds	r3, r7, #3
     bca:	781a      	ldrb	r2, [r3, #0]
     bcc:	1cbb      	adds	r3, r7, #2
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	6879      	ldr	r1, [r7, #4]
     bd2:	2040      	movs	r0, #64	; 0x40
     bd4:	01d2      	lsls	r2, r2, #7
     bd6:	188a      	adds	r2, r1, r2
     bd8:	18d3      	adds	r3, r2, r3
     bda:	181b      	adds	r3, r3, r0
     bdc:	220f      	movs	r2, #15
     bde:	18ba      	adds	r2, r7, r2
     be0:	7812      	ldrb	r2, [r2, #0]
     be2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     be4:	46c0      	nop			; (mov r8, r8)
     be6:	46bd      	mov	sp, r7
     be8:	b005      	add	sp, #20
     bea:	bd90      	pop	{r4, r7, pc}

00000bec <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     bec:	b5b0      	push	{r4, r5, r7, lr}
     bee:	b082      	sub	sp, #8
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
     bf4:	0008      	movs	r0, r1
     bf6:	0011      	movs	r1, r2
     bf8:	1cfb      	adds	r3, r7, #3
     bfa:	1c02      	adds	r2, r0, #0
     bfc:	701a      	strb	r2, [r3, #0]
     bfe:	1cbb      	adds	r3, r7, #2
     c00:	1c0a      	adds	r2, r1, #0
     c02:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     c04:	1cfb      	adds	r3, r7, #3
     c06:	781a      	ldrb	r2, [r3, #0]
     c08:	1cbb      	adds	r3, r7, #2
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	1cf9      	adds	r1, r7, #3
     c0e:	7808      	ldrb	r0, [r1, #0]
     c10:	1cb9      	adds	r1, r7, #2
     c12:	7809      	ldrb	r1, [r1, #0]
     c14:	687c      	ldr	r4, [r7, #4]
     c16:	2540      	movs	r5, #64	; 0x40
     c18:	01c0      	lsls	r0, r0, #7
     c1a:	1820      	adds	r0, r4, r0
     c1c:	1841      	adds	r1, r0, r1
     c1e:	1949      	adds	r1, r1, r5
     c20:	7809      	ldrb	r1, [r1, #0]
     c22:	b2c9      	uxtb	r1, r1
     c24:	2004      	movs	r0, #4
     c26:	4301      	orrs	r1, r0
     c28:	b2cc      	uxtb	r4, r1
     c2a:	6879      	ldr	r1, [r7, #4]
     c2c:	2040      	movs	r0, #64	; 0x40
     c2e:	01d2      	lsls	r2, r2, #7
     c30:	188a      	adds	r2, r1, r2
     c32:	18d3      	adds	r3, r2, r3
     c34:	181b      	adds	r3, r3, r0
     c36:	1c22      	adds	r2, r4, #0
     c38:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	46bd      	mov	sp, r7
     c3e:	b002      	add	sp, #8
     c40:	bdb0      	pop	{r4, r5, r7, pc}

00000c42 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     c42:	b5b0      	push	{r4, r5, r7, lr}
     c44:	b082      	sub	sp, #8
     c46:	af00      	add	r7, sp, #0
     c48:	6078      	str	r0, [r7, #4]
     c4a:	0008      	movs	r0, r1
     c4c:	0011      	movs	r1, r2
     c4e:	1cfb      	adds	r3, r7, #3
     c50:	1c02      	adds	r2, r0, #0
     c52:	701a      	strb	r2, [r3, #0]
     c54:	1cbb      	adds	r3, r7, #2
     c56:	1c0a      	adds	r2, r1, #0
     c58:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c5a:	1cfb      	adds	r3, r7, #3
     c5c:	781a      	ldrb	r2, [r3, #0]
     c5e:	1cbb      	adds	r3, r7, #2
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	1cf9      	adds	r1, r7, #3
     c64:	7808      	ldrb	r0, [r1, #0]
     c66:	1cb9      	adds	r1, r7, #2
     c68:	7809      	ldrb	r1, [r1, #0]
     c6a:	687c      	ldr	r4, [r7, #4]
     c6c:	2540      	movs	r5, #64	; 0x40
     c6e:	01c0      	lsls	r0, r0, #7
     c70:	1820      	adds	r0, r4, r0
     c72:	1841      	adds	r1, r0, r1
     c74:	1949      	adds	r1, r1, r5
     c76:	7809      	ldrb	r1, [r1, #0]
     c78:	b2c9      	uxtb	r1, r1
     c7a:	2004      	movs	r0, #4
     c7c:	4381      	bics	r1, r0
     c7e:	b2cc      	uxtb	r4, r1
     c80:	6879      	ldr	r1, [r7, #4]
     c82:	2040      	movs	r0, #64	; 0x40
     c84:	01d2      	lsls	r2, r2, #7
     c86:	188a      	adds	r2, r1, r2
     c88:	18d3      	adds	r3, r2, r3
     c8a:	181b      	adds	r3, r3, r0
     c8c:	1c22      	adds	r2, r4, #0
     c8e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c90:	46c0      	nop			; (mov r8, r8)
     c92:	46bd      	mov	sp, r7
     c94:	b002      	add	sp, #8
     c96:	bdb0      	pop	{r4, r5, r7, pc}

00000c98 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     c98:	b580      	push	{r7, lr}
     c9a:	b084      	sub	sp, #16
     c9c:	af00      	add	r7, sp, #0
     c9e:	60f8      	str	r0, [r7, #12]
     ca0:	607a      	str	r2, [r7, #4]
     ca2:	230b      	movs	r3, #11
     ca4:	18fb      	adds	r3, r7, r3
     ca6:	1c0a      	adds	r2, r1, #0
     ca8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     caa:	230b      	movs	r3, #11
     cac:	18fb      	adds	r3, r7, r3
     cae:	781b      	ldrb	r3, [r3, #0]
     cb0:	68fa      	ldr	r2, [r7, #12]
     cb2:	01db      	lsls	r3, r3, #7
     cb4:	18d3      	adds	r3, r2, r3
     cb6:	3328      	adds	r3, #40	; 0x28
     cb8:	687a      	ldr	r2, [r7, #4]
     cba:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     cbc:	46c0      	nop			; (mov r8, r8)
     cbe:	46bd      	mov	sp, r7
     cc0:	b004      	add	sp, #16
     cc2:	bd80      	pop	{r7, pc}

00000cc4 <_gpio_set_direction>:
{
     cc4:	b580      	push	{r7, lr}
     cc6:	b082      	sub	sp, #8
     cc8:	af00      	add	r7, sp, #0
     cca:	6039      	str	r1, [r7, #0]
     ccc:	0011      	movs	r1, r2
     cce:	1dfb      	adds	r3, r7, #7
     cd0:	1c02      	adds	r2, r0, #0
     cd2:	701a      	strb	r2, [r3, #0]
     cd4:	1dbb      	adds	r3, r7, #6
     cd6:	1c0a      	adds	r2, r1, #0
     cd8:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     cda:	1dbb      	adds	r3, r7, #6
     cdc:	781b      	ldrb	r3, [r3, #0]
     cde:	2b01      	cmp	r3, #1
     ce0:	d023      	beq.n	d2a <_gpio_set_direction+0x66>
     ce2:	2b02      	cmp	r3, #2
     ce4:	d03f      	beq.n	d66 <_gpio_set_direction+0xa2>
     ce6:	2b00      	cmp	r3, #0
     ce8:	d15d      	bne.n	da6 <_gpio_set_direction+0xe2>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     cea:	683a      	ldr	r2, [r7, #0]
     cec:	1dfb      	adds	r3, r7, #7
     cee:	7819      	ldrb	r1, [r3, #0]
     cf0:	23c0      	movs	r3, #192	; 0xc0
     cf2:	05db      	lsls	r3, r3, #23
     cf4:	0018      	movs	r0, r3
     cf6:	4b31      	ldr	r3, [pc, #196]	; (dbc <_gpio_set_direction+0xf8>)
     cf8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     cfa:	683b      	ldr	r3, [r7, #0]
     cfc:	041b      	lsls	r3, r3, #16
     cfe:	0c1b      	lsrs	r3, r3, #16
     d00:	2280      	movs	r2, #128	; 0x80
     d02:	05d2      	lsls	r2, r2, #23
     d04:	431a      	orrs	r2, r3
     d06:	1dfb      	adds	r3, r7, #7
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	482d      	ldr	r0, [pc, #180]	; (dc0 <_gpio_set_direction+0xfc>)
     d0c:	0019      	movs	r1, r3
     d0e:	4b2d      	ldr	r3, [pc, #180]	; (dc4 <_gpio_set_direction+0x100>)
     d10:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     d16:	22c0      	movs	r2, #192	; 0xc0
     d18:	0612      	lsls	r2, r2, #24
     d1a:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     d1c:	1dfb      	adds	r3, r7, #7
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	4827      	ldr	r0, [pc, #156]	; (dc0 <_gpio_set_direction+0xfc>)
     d22:	0019      	movs	r1, r3
     d24:	4b27      	ldr	r3, [pc, #156]	; (dc4 <_gpio_set_direction+0x100>)
     d26:	4798      	blx	r3
		break;
     d28:	e043      	b.n	db2 <_gpio_set_direction+0xee>
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     d2a:	683a      	ldr	r2, [r7, #0]
     d2c:	1dfb      	adds	r3, r7, #7
     d2e:	7819      	ldrb	r1, [r3, #0]
     d30:	23c0      	movs	r3, #192	; 0xc0
     d32:	05db      	lsls	r3, r3, #23
     d34:	0018      	movs	r0, r3
     d36:	4b21      	ldr	r3, [pc, #132]	; (dbc <_gpio_set_direction+0xf8>)
     d38:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	041b      	lsls	r3, r3, #16
     d3e:	0c1b      	lsrs	r3, r3, #16
     d40:	4a21      	ldr	r2, [pc, #132]	; (dc8 <_gpio_set_direction+0x104>)
     d42:	431a      	orrs	r2, r3
     d44:	1dfb      	adds	r3, r7, #7
     d46:	781b      	ldrb	r3, [r3, #0]
     d48:	481d      	ldr	r0, [pc, #116]	; (dc0 <_gpio_set_direction+0xfc>)
     d4a:	0019      	movs	r1, r3
     d4c:	4b1d      	ldr	r3, [pc, #116]	; (dc4 <_gpio_set_direction+0x100>)
     d4e:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
     d50:	683b      	ldr	r3, [r7, #0]
     d52:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     d54:	4a1d      	ldr	r2, [pc, #116]	; (dcc <_gpio_set_direction+0x108>)
     d56:	431a      	orrs	r2, r3
		                                | ((mask & 0xffff0000) >> 16));
     d58:	1dfb      	adds	r3, r7, #7
     d5a:	781b      	ldrb	r3, [r3, #0]
     d5c:	4818      	ldr	r0, [pc, #96]	; (dc0 <_gpio_set_direction+0xfc>)
     d5e:	0019      	movs	r1, r3
     d60:	4b18      	ldr	r3, [pc, #96]	; (dc4 <_gpio_set_direction+0x100>)
     d62:	4798      	blx	r3
		break;
     d64:	e025      	b.n	db2 <_gpio_set_direction+0xee>
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     d66:	683a      	ldr	r2, [r7, #0]
     d68:	1dfb      	adds	r3, r7, #7
     d6a:	7819      	ldrb	r1, [r3, #0]
     d6c:	23c0      	movs	r3, #192	; 0xc0
     d6e:	05db      	lsls	r3, r3, #23
     d70:	0018      	movs	r0, r3
     d72:	4b17      	ldr	r3, [pc, #92]	; (dd0 <_gpio_set_direction+0x10c>)
     d74:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	041b      	lsls	r3, r3, #16
     d7a:	0c1b      	lsrs	r3, r3, #16
     d7c:	2280      	movs	r2, #128	; 0x80
     d7e:	05d2      	lsls	r2, r2, #23
     d80:	431a      	orrs	r2, r3
     d82:	1dfb      	adds	r3, r7, #7
     d84:	781b      	ldrb	r3, [r3, #0]
     d86:	480e      	ldr	r0, [pc, #56]	; (dc0 <_gpio_set_direction+0xfc>)
     d88:	0019      	movs	r1, r3
     d8a:	4b0e      	ldr	r3, [pc, #56]	; (dc4 <_gpio_set_direction+0x100>)
     d8c:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     d8e:	683b      	ldr	r3, [r7, #0]
     d90:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     d92:	22c0      	movs	r2, #192	; 0xc0
     d94:	0612      	lsls	r2, r2, #24
     d96:	431a      	orrs	r2, r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     d98:	1dfb      	adds	r3, r7, #7
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	4808      	ldr	r0, [pc, #32]	; (dc0 <_gpio_set_direction+0xfc>)
     d9e:	0019      	movs	r1, r3
     da0:	4b08      	ldr	r3, [pc, #32]	; (dc4 <_gpio_set_direction+0x100>)
     da2:	4798      	blx	r3
		break;
     da4:	e005      	b.n	db2 <_gpio_set_direction+0xee>
		ASSERT(false);
     da6:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <_gpio_set_direction+0x110>)
     da8:	2245      	movs	r2, #69	; 0x45
     daa:	0019      	movs	r1, r3
     dac:	2000      	movs	r0, #0
     dae:	4b0a      	ldr	r3, [pc, #40]	; (dd8 <_gpio_set_direction+0x114>)
     db0:	4798      	blx	r3
}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	46bd      	mov	sp, r7
     db6:	b002      	add	sp, #8
     db8:	bd80      	pop	{r7, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	000009d9 	.word	0x000009d9
     dc0:	41004400 	.word	0x41004400
     dc4:	00000c99 	.word	0x00000c99
     dc8:	40020000 	.word	0x40020000
     dcc:	c0020000 	.word	0xc0020000
     dd0:	000009ad 	.word	0x000009ad
     dd4:	00005788 	.word	0x00005788
     dd8:	00001ca5 	.word	0x00001ca5

00000ddc <_gpio_set_level>:
{
     ddc:	b580      	push	{r7, lr}
     dde:	b082      	sub	sp, #8
     de0:	af00      	add	r7, sp, #0
     de2:	6039      	str	r1, [r7, #0]
     de4:	0011      	movs	r1, r2
     de6:	1dfb      	adds	r3, r7, #7
     de8:	1c02      	adds	r2, r0, #0
     dea:	701a      	strb	r2, [r3, #0]
     dec:	1dbb      	adds	r3, r7, #6
     dee:	1c0a      	adds	r2, r1, #0
     df0:	701a      	strb	r2, [r3, #0]
	if (level) {
     df2:	1dbb      	adds	r3, r7, #6
     df4:	781b      	ldrb	r3, [r3, #0]
     df6:	2b00      	cmp	r3, #0
     df8:	d008      	beq.n	e0c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     dfa:	683a      	ldr	r2, [r7, #0]
     dfc:	1dfb      	adds	r3, r7, #7
     dfe:	7819      	ldrb	r1, [r3, #0]
     e00:	23c0      	movs	r3, #192	; 0xc0
     e02:	05db      	lsls	r3, r3, #23
     e04:	0018      	movs	r0, r3
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <_gpio_set_level+0x48>)
     e08:	4798      	blx	r3
}
     e0a:	e007      	b.n	e1c <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     e0c:	683a      	ldr	r2, [r7, #0]
     e0e:	1dfb      	adds	r3, r7, #7
     e10:	7819      	ldrb	r1, [r3, #0]
     e12:	23c0      	movs	r3, #192	; 0xc0
     e14:	05db      	lsls	r3, r3, #23
     e16:	0018      	movs	r0, r3
     e18:	4b03      	ldr	r3, [pc, #12]	; (e28 <_gpio_set_level+0x4c>)
     e1a:	4798      	blx	r3
}
     e1c:	46c0      	nop			; (mov r8, r8)
     e1e:	46bd      	mov	sp, r7
     e20:	b002      	add	sp, #8
     e22:	bd80      	pop	{r7, pc}
     e24:	00000a05 	.word	0x00000a05
     e28:	00000a31 	.word	0x00000a31

00000e2c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     e2c:	b590      	push	{r4, r7, lr}
     e2e:	b083      	sub	sp, #12
     e30:	af00      	add	r7, sp, #0
     e32:	0004      	movs	r4, r0
     e34:	0008      	movs	r0, r1
     e36:	0011      	movs	r1, r2
     e38:	1dfb      	adds	r3, r7, #7
     e3a:	1c22      	adds	r2, r4, #0
     e3c:	701a      	strb	r2, [r3, #0]
     e3e:	1dbb      	adds	r3, r7, #6
     e40:	1c02      	adds	r2, r0, #0
     e42:	701a      	strb	r2, [r3, #0]
     e44:	1d7b      	adds	r3, r7, #5
     e46:	1c0a      	adds	r2, r1, #0
     e48:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     e4a:	1d7b      	adds	r3, r7, #5
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	2b01      	cmp	r3, #1
     e50:	d00c      	beq.n	e6c <_gpio_set_pin_pull_mode+0x40>
     e52:	2b02      	cmp	r3, #2
     e54:	d029      	beq.n	eaa <_gpio_set_pin_pull_mode+0x7e>
     e56:	2b00      	cmp	r3, #0
     e58:	d146      	bne.n	ee8 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     e5a:	1dbb      	adds	r3, r7, #6
     e5c:	781a      	ldrb	r2, [r3, #0]
     e5e:	1dfb      	adds	r3, r7, #7
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	4827      	ldr	r0, [pc, #156]	; (f00 <_gpio_set_pin_pull_mode+0xd4>)
     e64:	0019      	movs	r1, r3
     e66:	4b27      	ldr	r3, [pc, #156]	; (f04 <_gpio_set_pin_pull_mode+0xd8>)
     e68:	4798      	blx	r3
		break;
     e6a:	e044      	b.n	ef6 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     e6c:	1dbb      	adds	r3, r7, #6
     e6e:	781b      	ldrb	r3, [r3, #0]
     e70:	2201      	movs	r2, #1
     e72:	409a      	lsls	r2, r3
     e74:	1dfb      	adds	r3, r7, #7
     e76:	7819      	ldrb	r1, [r3, #0]
     e78:	23c0      	movs	r3, #192	; 0xc0
     e7a:	05db      	lsls	r3, r3, #23
     e7c:	0018      	movs	r0, r3
     e7e:	4b22      	ldr	r3, [pc, #136]	; (f08 <_gpio_set_pin_pull_mode+0xdc>)
     e80:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     e82:	1dbb      	adds	r3, r7, #6
     e84:	781a      	ldrb	r2, [r3, #0]
     e86:	1dfb      	adds	r3, r7, #7
     e88:	781b      	ldrb	r3, [r3, #0]
     e8a:	481d      	ldr	r0, [pc, #116]	; (f00 <_gpio_set_pin_pull_mode+0xd4>)
     e8c:	0019      	movs	r1, r3
     e8e:	4b1f      	ldr	r3, [pc, #124]	; (f0c <_gpio_set_pin_pull_mode+0xe0>)
     e90:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     e92:	1dbb      	adds	r3, r7, #6
     e94:	781b      	ldrb	r3, [r3, #0]
     e96:	2201      	movs	r2, #1
     e98:	409a      	lsls	r2, r3
     e9a:	1dfb      	adds	r3, r7, #7
     e9c:	7819      	ldrb	r1, [r3, #0]
     e9e:	23c0      	movs	r3, #192	; 0xc0
     ea0:	05db      	lsls	r3, r3, #23
     ea2:	0018      	movs	r0, r3
     ea4:	4b1a      	ldr	r3, [pc, #104]	; (f10 <_gpio_set_pin_pull_mode+0xe4>)
     ea6:	4798      	blx	r3
		break;
     ea8:	e025      	b.n	ef6 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     eaa:	1dbb      	adds	r3, r7, #6
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	2201      	movs	r2, #1
     eb0:	409a      	lsls	r2, r3
     eb2:	1dfb      	adds	r3, r7, #7
     eb4:	7819      	ldrb	r1, [r3, #0]
     eb6:	23c0      	movs	r3, #192	; 0xc0
     eb8:	05db      	lsls	r3, r3, #23
     eba:	0018      	movs	r0, r3
     ebc:	4b12      	ldr	r3, [pc, #72]	; (f08 <_gpio_set_pin_pull_mode+0xdc>)
     ebe:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     ec0:	1dbb      	adds	r3, r7, #6
     ec2:	781a      	ldrb	r2, [r3, #0]
     ec4:	1dfb      	adds	r3, r7, #7
     ec6:	781b      	ldrb	r3, [r3, #0]
     ec8:	480d      	ldr	r0, [pc, #52]	; (f00 <_gpio_set_pin_pull_mode+0xd4>)
     eca:	0019      	movs	r1, r3
     ecc:	4b0f      	ldr	r3, [pc, #60]	; (f0c <_gpio_set_pin_pull_mode+0xe0>)
     ece:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     ed0:	1dbb      	adds	r3, r7, #6
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	2201      	movs	r2, #1
     ed6:	409a      	lsls	r2, r3
     ed8:	1dfb      	adds	r3, r7, #7
     eda:	7819      	ldrb	r1, [r3, #0]
     edc:	23c0      	movs	r3, #192	; 0xc0
     ede:	05db      	lsls	r3, r3, #23
     ee0:	0018      	movs	r0, r3
     ee2:	4b0c      	ldr	r3, [pc, #48]	; (f14 <_gpio_set_pin_pull_mode+0xe8>)
     ee4:	4798      	blx	r3
		break;
     ee6:	e006      	b.n	ef6 <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     ee8:	4b0b      	ldr	r3, [pc, #44]	; (f18 <_gpio_set_pin_pull_mode+0xec>)
     eea:	2288      	movs	r2, #136	; 0x88
     eec:	0019      	movs	r1, r3
     eee:	2000      	movs	r0, #0
     ef0:	4b0a      	ldr	r3, [pc, #40]	; (f1c <_gpio_set_pin_pull_mode+0xf0>)
     ef2:	4798      	blx	r3
		break;
     ef4:	46c0      	nop			; (mov r8, r8)
	}
}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	46bd      	mov	sp, r7
     efa:	b003      	add	sp, #12
     efc:	bd90      	pop	{r4, r7, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	41004400 	.word	0x41004400
     f04:	00000c43 	.word	0x00000c43
     f08:	000009d9 	.word	0x000009d9
     f0c:	00000bed 	.word	0x00000bed
     f10:	00000a05 	.word	0x00000a05
     f14:	00000a31 	.word	0x00000a31
     f18:	00005788 	.word	0x00005788
     f1c:	00001ca5 	.word	0x00001ca5

00000f20 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     f20:	b590      	push	{r4, r7, lr}
     f22:	b085      	sub	sp, #20
     f24:	af00      	add	r7, sp, #0
     f26:	6078      	str	r0, [r7, #4]
     f28:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	095a      	lsrs	r2, r3, #5
     f2e:	230f      	movs	r3, #15
     f30:	18fb      	adds	r3, r7, r3
     f32:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	b2da      	uxtb	r2, r3
     f38:	230e      	movs	r3, #14
     f3a:	18fb      	adds	r3, r7, r3
     f3c:	211f      	movs	r1, #31
     f3e:	400a      	ands	r2, r1
     f40:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     f42:	683b      	ldr	r3, [r7, #0]
     f44:	3301      	adds	r3, #1
     f46:	d10a      	bne.n	f5e <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     f48:	230e      	movs	r3, #14
     f4a:	18fb      	adds	r3, r7, r3
     f4c:	781a      	ldrb	r2, [r3, #0]
     f4e:	230f      	movs	r3, #15
     f50:	18fb      	adds	r3, r7, r3
     f52:	7819      	ldrb	r1, [r3, #0]
     f54:	481b      	ldr	r0, [pc, #108]	; (fc4 <_gpio_set_pin_function+0xa4>)
     f56:	2300      	movs	r3, #0
     f58:	4c1b      	ldr	r4, [pc, #108]	; (fc8 <_gpio_set_pin_function+0xa8>)
     f5a:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     f5c:	e02e      	b.n	fbc <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     f5e:	230e      	movs	r3, #14
     f60:	18fb      	adds	r3, r7, r3
     f62:	781a      	ldrb	r2, [r3, #0]
     f64:	230f      	movs	r3, #15
     f66:	18fb      	adds	r3, r7, r3
     f68:	7819      	ldrb	r1, [r3, #0]
     f6a:	4816      	ldr	r0, [pc, #88]	; (fc4 <_gpio_set_pin_function+0xa4>)
     f6c:	2301      	movs	r3, #1
     f6e:	4c16      	ldr	r4, [pc, #88]	; (fc8 <_gpio_set_pin_function+0xa8>)
     f70:	47a0      	blx	r4
		if (pin & 1) {
     f72:	230e      	movs	r3, #14
     f74:	18fb      	adds	r3, r7, r3
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	2201      	movs	r2, #1
     f7a:	4013      	ands	r3, r2
     f7c:	d00f      	beq.n	f9e <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     f7e:	230e      	movs	r3, #14
     f80:	18fb      	adds	r3, r7, r3
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	105b      	asrs	r3, r3, #1
     f86:	b2da      	uxtb	r2, r3
     f88:	683b      	ldr	r3, [r7, #0]
     f8a:	b2d8      	uxtb	r0, r3
     f8c:	230f      	movs	r3, #15
     f8e:	18fb      	adds	r3, r7, r3
     f90:	7819      	ldrb	r1, [r3, #0]
     f92:	4c0c      	ldr	r4, [pc, #48]	; (fc4 <_gpio_set_pin_function+0xa4>)
     f94:	0003      	movs	r3, r0
     f96:	0020      	movs	r0, r4
     f98:	4c0c      	ldr	r4, [pc, #48]	; (fcc <_gpio_set_pin_function+0xac>)
     f9a:	47a0      	blx	r4
}
     f9c:	e00e      	b.n	fbc <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     f9e:	230e      	movs	r3, #14
     fa0:	18fb      	adds	r3, r7, r3
     fa2:	781b      	ldrb	r3, [r3, #0]
     fa4:	105b      	asrs	r3, r3, #1
     fa6:	b2da      	uxtb	r2, r3
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	b2d8      	uxtb	r0, r3
     fac:	230f      	movs	r3, #15
     fae:	18fb      	adds	r3, r7, r3
     fb0:	7819      	ldrb	r1, [r3, #0]
     fb2:	4c04      	ldr	r4, [pc, #16]	; (fc4 <_gpio_set_pin_function+0xa4>)
     fb4:	0003      	movs	r3, r0
     fb6:	0020      	movs	r0, r4
     fb8:	4c05      	ldr	r4, [pc, #20]	; (fd0 <_gpio_set_pin_function+0xb0>)
     fba:	47a0      	blx	r4
}
     fbc:	46c0      	nop			; (mov r8, r8)
     fbe:	46bd      	mov	sp, r7
     fc0:	b005      	add	sp, #20
     fc2:	bd90      	pop	{r4, r7, pc}
     fc4:	41004400 	.word	0x41004400
     fc8:	00000b6b 	.word	0x00000b6b
     fcc:	00000ae5 	.word	0x00000ae5
     fd0:	00000a5d 	.word	0x00000a5d

00000fd4 <gpio_set_pin_pull_mode>:
{
     fd4:	b580      	push	{r7, lr}
     fd6:	b082      	sub	sp, #8
     fd8:	af00      	add	r7, sp, #0
     fda:	0002      	movs	r2, r0
     fdc:	1dfb      	adds	r3, r7, #7
     fde:	701a      	strb	r2, [r3, #0]
     fe0:	1dbb      	adds	r3, r7, #6
     fe2:	1c0a      	adds	r2, r1, #0
     fe4:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     fe6:	1dfb      	adds	r3, r7, #7
     fe8:	781b      	ldrb	r3, [r3, #0]
     fea:	115b      	asrs	r3, r3, #5
     fec:	b2d8      	uxtb	r0, r3
     fee:	1dfb      	adds	r3, r7, #7
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	221f      	movs	r2, #31
     ff4:	4013      	ands	r3, r2
     ff6:	b2d9      	uxtb	r1, r3
     ff8:	1dbb      	adds	r3, r7, #6
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	001a      	movs	r2, r3
     ffe:	4b03      	ldr	r3, [pc, #12]	; (100c <gpio_set_pin_pull_mode+0x38>)
    1000:	4798      	blx	r3
}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	46bd      	mov	sp, r7
    1006:	b002      	add	sp, #8
    1008:	bd80      	pop	{r7, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	00000e2d 	.word	0x00000e2d

00001010 <gpio_set_pin_function>:
{
    1010:	b580      	push	{r7, lr}
    1012:	b082      	sub	sp, #8
    1014:	af00      	add	r7, sp, #0
    1016:	6078      	str	r0, [r7, #4]
    1018:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    101a:	683a      	ldr	r2, [r7, #0]
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	0011      	movs	r1, r2
    1020:	0018      	movs	r0, r3
    1022:	4b03      	ldr	r3, [pc, #12]	; (1030 <gpio_set_pin_function+0x20>)
    1024:	4798      	blx	r3
}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	46bd      	mov	sp, r7
    102a:	b002      	add	sp, #8
    102c:	bd80      	pop	{r7, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00000f21 	.word	0x00000f21

00001034 <gpio_set_pin_direction>:
{
    1034:	b580      	push	{r7, lr}
    1036:	b082      	sub	sp, #8
    1038:	af00      	add	r7, sp, #0
    103a:	0002      	movs	r2, r0
    103c:	1dfb      	adds	r3, r7, #7
    103e:	701a      	strb	r2, [r3, #0]
    1040:	1dbb      	adds	r3, r7, #6
    1042:	1c0a      	adds	r2, r1, #0
    1044:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1046:	1dfb      	adds	r3, r7, #7
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	115b      	asrs	r3, r3, #5
    104c:	b2d8      	uxtb	r0, r3
    104e:	1dfb      	adds	r3, r7, #7
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	001a      	movs	r2, r3
    1054:	231f      	movs	r3, #31
    1056:	4013      	ands	r3, r2
    1058:	2201      	movs	r2, #1
    105a:	409a      	lsls	r2, r3
    105c:	0011      	movs	r1, r2
    105e:	1dbb      	adds	r3, r7, #6
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	001a      	movs	r2, r3
    1064:	4b02      	ldr	r3, [pc, #8]	; (1070 <gpio_set_pin_direction+0x3c>)
    1066:	4798      	blx	r3
}
    1068:	46c0      	nop			; (mov r8, r8)
    106a:	46bd      	mov	sp, r7
    106c:	b002      	add	sp, #8
    106e:	bd80      	pop	{r7, pc}
    1070:	00000cc5 	.word	0x00000cc5

00001074 <gpio_set_pin_level>:
{
    1074:	b580      	push	{r7, lr}
    1076:	b082      	sub	sp, #8
    1078:	af00      	add	r7, sp, #0
    107a:	0002      	movs	r2, r0
    107c:	1dfb      	adds	r3, r7, #7
    107e:	701a      	strb	r2, [r3, #0]
    1080:	1dbb      	adds	r3, r7, #6
    1082:	1c0a      	adds	r2, r1, #0
    1084:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1086:	1dfb      	adds	r3, r7, #7
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	115b      	asrs	r3, r3, #5
    108c:	b2d8      	uxtb	r0, r3
    108e:	1dfb      	adds	r3, r7, #7
    1090:	781b      	ldrb	r3, [r3, #0]
    1092:	001a      	movs	r2, r3
    1094:	231f      	movs	r3, #31
    1096:	4013      	ands	r3, r2
    1098:	2201      	movs	r2, #1
    109a:	409a      	lsls	r2, r3
    109c:	0011      	movs	r1, r2
    109e:	1dbb      	adds	r3, r7, #6
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	001a      	movs	r2, r3
    10a4:	4b02      	ldr	r3, [pc, #8]	; (10b0 <gpio_set_pin_level+0x3c>)
    10a6:	4798      	blx	r3
}
    10a8:	46c0      	nop			; (mov r8, r8)
    10aa:	46bd      	mov	sp, r7
    10ac:	b002      	add	sp, #8
    10ae:	bd80      	pop	{r7, pc}
    10b0:	00000ddd 	.word	0x00000ddd

000010b4 <_ZN25PinCodding_SAMD21XplainedC1Ev>:
	GPIO(0,19),
};


// default constructor
PinCodding_SAMD21Xplained::PinCodding_SAMD21Xplained()
    10b4:	b580      	push	{r7, lr}
    10b6:	b082      	sub	sp, #8
    10b8:	af00      	add	r7, sp, #0
    10ba:	6078      	str	r0, [r7, #4]
{
} //PinCodding_SAMD21Xplained
    10bc:	687b      	ldr	r3, [r7, #4]
    10be:	0018      	movs	r0, r3
    10c0:	46bd      	mov	sp, r7
    10c2:	b002      	add	sp, #8
    10c4:	bd80      	pop	{r7, pc}

000010c6 <_ZN25PinCodding_SAMD21XplainedD1Ev>:
{
	connector=cn;
} //PinCodding_SAMD21Xplained

// default destructor
PinCodding_SAMD21Xplained::~PinCodding_SAMD21Xplained()
    10c6:	b580      	push	{r7, lr}
    10c8:	b082      	sub	sp, #8
    10ca:	af00      	add	r7, sp, #0
    10cc:	6078      	str	r0, [r7, #4]
{
} //~PinCodding_SAMD21Xplained
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	0018      	movs	r0, r3
    10d2:	46bd      	mov	sp, r7
    10d4:	b002      	add	sp, #8
    10d6:	bd80      	pop	{r7, pc}

000010d8 <_ZN25PinCodding_SAMD21Xplained4InitEv>:

bool	PinCodding_SAMD21Xplained::Init(void){
    10d8:	b580      	push	{r7, lr}
    10da:	b082      	sub	sp, #8
    10dc:	af00      	add	r7, sp, #0
    10de:	6078      	str	r0, [r7, #4]
		for (i = 0; i < 8; i++)
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	2200      	movs	r2, #0
    10e4:	741a      	strb	r2, [r3, #16]
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	7c1b      	ldrb	r3, [r3, #16]
    10ea:	2b07      	cmp	r3, #7
    10ec:	dc5a      	bgt.n	11a4 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xcc>
		{
			connector.pinsInput[i]=ext2Inputs[i];
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	7c1b      	ldrb	r3, [r3, #16]
    10f2:	001a      	movs	r2, r3
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	7c1b      	ldrb	r3, [r3, #16]
    10f8:	0019      	movs	r1, r3
    10fa:	4b30      	ldr	r3, [pc, #192]	; (11bc <_ZN25PinCodding_SAMD21Xplained4InitEv+0xe4>)
    10fc:	5c59      	ldrb	r1, [r3, r1]
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	5499      	strb	r1, [r3, r2]
			gpio_set_pin_direction(connector.pinsInput[i],GPIO_DIRECTION_IN);
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	7c1b      	ldrb	r3, [r3, #16]
    1106:	001a      	movs	r2, r3
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	5c9b      	ldrb	r3, [r3, r2]
    110c:	2101      	movs	r1, #1
    110e:	0018      	movs	r0, r3
    1110:	4b2b      	ldr	r3, [pc, #172]	; (11c0 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xe8>)
    1112:	4798      	blx	r3
			gpio_set_pin_pull_mode(connector.pinsInput[i],GPIO_PULL_UP);
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	7c1b      	ldrb	r3, [r3, #16]
    1118:	001a      	movs	r2, r3
    111a:	687b      	ldr	r3, [r7, #4]
    111c:	5c9b      	ldrb	r3, [r3, r2]
    111e:	2101      	movs	r1, #1
    1120:	0018      	movs	r0, r3
    1122:	4b28      	ldr	r3, [pc, #160]	; (11c4 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xec>)
    1124:	4798      	blx	r3
			gpio_set_pin_function(connector.pinsInput[i],GPIO_PIN_FUNCTION_OFF);
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	7c1b      	ldrb	r3, [r3, #16]
    112a:	001a      	movs	r2, r3
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	5c9b      	ldrb	r3, [r3, r2]
    1130:	001a      	movs	r2, r3
    1132:	2301      	movs	r3, #1
    1134:	425b      	negs	r3, r3
    1136:	0019      	movs	r1, r3
    1138:	0010      	movs	r0, r2
    113a:	4b23      	ldr	r3, [pc, #140]	; (11c8 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xf0>)
    113c:	4798      	blx	r3
			connector.pinsOutput[i]=ext2Outputs[i];
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	7c1b      	ldrb	r3, [r3, #16]
    1142:	0019      	movs	r1, r3
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	7c1b      	ldrb	r3, [r3, #16]
    1148:	001a      	movs	r2, r3
    114a:	4b20      	ldr	r3, [pc, #128]	; (11cc <_ZN25PinCodding_SAMD21Xplained4InitEv+0xf4>)
    114c:	5c9a      	ldrb	r2, [r3, r2]
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	185b      	adds	r3, r3, r1
    1152:	721a      	strb	r2, [r3, #8]
			gpio_set_pin_direction(connector.pinsOutput[i],GPIO_DIRECTION_OUT);
    1154:	687b      	ldr	r3, [r7, #4]
    1156:	7c1b      	ldrb	r3, [r3, #16]
    1158:	001a      	movs	r2, r3
    115a:	687b      	ldr	r3, [r7, #4]
    115c:	189b      	adds	r3, r3, r2
    115e:	7a1b      	ldrb	r3, [r3, #8]
    1160:	2102      	movs	r1, #2
    1162:	0018      	movs	r0, r3
    1164:	4b16      	ldr	r3, [pc, #88]	; (11c0 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xe8>)
    1166:	4798      	blx	r3
			gpio_set_pin_function(connector.pinsOutput[i],GPIO_PIN_FUNCTION_OFF);
    1168:	687b      	ldr	r3, [r7, #4]
    116a:	7c1b      	ldrb	r3, [r3, #16]
    116c:	001a      	movs	r2, r3
    116e:	687b      	ldr	r3, [r7, #4]
    1170:	189b      	adds	r3, r3, r2
    1172:	7a1b      	ldrb	r3, [r3, #8]
    1174:	001a      	movs	r2, r3
    1176:	2301      	movs	r3, #1
    1178:	425b      	negs	r3, r3
    117a:	0019      	movs	r1, r3
    117c:	0010      	movs	r0, r2
    117e:	4b12      	ldr	r3, [pc, #72]	; (11c8 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xf0>)
    1180:	4798      	blx	r3
			gpio_set_pin_level(connector.pinsOutput[i],false);
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	7c1b      	ldrb	r3, [r3, #16]
    1186:	001a      	movs	r2, r3
    1188:	687b      	ldr	r3, [r7, #4]
    118a:	189b      	adds	r3, r3, r2
    118c:	7a1b      	ldrb	r3, [r3, #8]
    118e:	2100      	movs	r1, #0
    1190:	0018      	movs	r0, r3
    1192:	4b0f      	ldr	r3, [pc, #60]	; (11d0 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xf8>)
    1194:	4798      	blx	r3
		for (i = 0; i < 8; i++)
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	7c1b      	ldrb	r3, [r3, #16]
    119a:	3301      	adds	r3, #1
    119c:	b2da      	uxtb	r2, r3
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	741a      	strb	r2, [r3, #16]
    11a2:	e7a0      	b.n	10e6 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xe>
			
		}
		return	i>=8;
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	7c1b      	ldrb	r3, [r3, #16]
    11a8:	2201      	movs	r2, #1
    11aa:	2b07      	cmp	r3, #7
    11ac:	dc01      	bgt.n	11b2 <_ZN25PinCodding_SAMD21Xplained4InitEv+0xda>
    11ae:	2300      	movs	r3, #0
    11b0:	1c1a      	adds	r2, r3, #0
    11b2:	b2d3      	uxtb	r3, r2
}
    11b4:	0018      	movs	r0, r3
    11b6:	46bd      	mov	sp, r7
    11b8:	b002      	add	sp, #8
    11ba:	bd80      	pop	{r7, pc}
    11bc:	20000004 	.word	0x20000004
    11c0:	00001035 	.word	0x00001035
    11c4:	00000fd5 	.word	0x00000fd5
    11c8:	00001011 	.word	0x00001011
    11cc:	2000000c 	.word	0x2000000c
    11d0:	00001075 	.word	0x00001075

000011d4 <_Z41__static_initialization_and_destruction_0ii>:


    11d4:	b580      	push	{r7, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    11dc:	6039      	str	r1, [r7, #0]
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	2b01      	cmp	r3, #1
    11e2:	d10d      	bne.n	1200 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    11e4:	683b      	ldr	r3, [r7, #0]
    11e6:	4a08      	ldr	r2, [pc, #32]	; (1208 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    11e8:	4293      	cmp	r3, r2
    11ea:	d109      	bne.n	1200 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    11ec:	4b07      	ldr	r3, [pc, #28]	; (120c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11ee:	0018      	movs	r0, r3
    11f0:	4b07      	ldr	r3, [pc, #28]	; (1210 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    11f2:	4798      	blx	r3
    11f4:	4a07      	ldr	r2, [pc, #28]	; (1214 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    11f6:	4908      	ldr	r1, [pc, #32]	; (1218 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    11f8:	4b04      	ldr	r3, [pc, #16]	; (120c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11fa:	0018      	movs	r0, r3
    11fc:	4b07      	ldr	r3, [pc, #28]	; (121c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    11fe:	4798      	blx	r3
    1200:	46c0      	nop			; (mov r8, r8)
    1202:	46bd      	mov	sp, r7
    1204:	b002      	add	sp, #8
    1206:	bd80      	pop	{r7, pc}
    1208:	0000ffff 	.word	0x0000ffff
    120c:	200004e0 	.word	0x200004e0
    1210:	000010b5 	.word	0x000010b5
    1214:	20000000 	.word	0x20000000
    1218:	000010c7 	.word	0x000010c7
    121c:	000046b9 	.word	0x000046b9

00001220 <_GLOBAL__sub_I_ext2Inputs>:
    1220:	b580      	push	{r7, lr}
    1222:	af00      	add	r7, sp, #0
    1224:	4b03      	ldr	r3, [pc, #12]	; (1234 <_GLOBAL__sub_I_ext2Inputs+0x14>)
    1226:	0019      	movs	r1, r3
    1228:	2001      	movs	r0, #1
    122a:	4b03      	ldr	r3, [pc, #12]	; (1238 <_GLOBAL__sub_I_ext2Inputs+0x18>)
    122c:	4798      	blx	r3
    122e:	46bd      	mov	sp, r7
    1230:	bd80      	pop	{r7, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	0000ffff 	.word	0x0000ffff
    1238:	000011d5 	.word	0x000011d5

0000123c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    123c:	b510      	push	{r4, lr}
	system_init();
    123e:	4b02      	ldr	r3, [pc, #8]	; (1248 <atmel_start_init+0xc>)
    1240:	4798      	blx	r3
	usb_init();
    1242:	4b02      	ldr	r3, [pc, #8]	; (124c <atmel_start_init+0x10>)
    1244:	4798      	blx	r3
}
    1246:	bd10      	pop	{r4, pc}
    1248:	0000131d 	.word	0x0000131d
    124c:	00003505 	.word	0x00003505

00001250 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	46c6      	mov	lr, r8
    1254:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1256:	24c0      	movs	r4, #192	; 0xc0
    1258:	05e4      	lsls	r4, r4, #23
    125a:	2280      	movs	r2, #128	; 0x80
    125c:	0452      	lsls	r2, r2, #17
    125e:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1260:	4b1a      	ldr	r3, [pc, #104]	; (12cc <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    1262:	2780      	movs	r7, #128	; 0x80
    1264:	05ff      	lsls	r7, r7, #23
    1266:	629f      	str	r7, [r3, #40]	; 0x28
    1268:	4919      	ldr	r1, [pc, #100]	; (12d0 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    126a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    126c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    126e:	2058      	movs	r0, #88	; 0x58
    1270:	5c19      	ldrb	r1, [r3, r0]
    1272:	2204      	movs	r2, #4
    1274:	4690      	mov	r8, r2
    1276:	4391      	bics	r1, r2
    1278:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    127a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    127c:	2601      	movs	r6, #1
    127e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1280:	2501      	movs	r5, #1
    1282:	4329      	orrs	r1, r5
    1284:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1286:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1288:	381c      	subs	r0, #28
    128a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    128c:	320b      	adds	r2, #11
    128e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    1290:	3a09      	subs	r2, #9
    1292:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1294:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1296:	2180      	movs	r1, #128	; 0x80
    1298:	0489      	lsls	r1, r1, #18
    129a:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    129c:	629f      	str	r7, [r3, #40]	; 0x28
    129e:	4f0d      	ldr	r7, [pc, #52]	; (12d4 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    12a0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12a2:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    12a4:	2159      	movs	r1, #89	; 0x59
    12a6:	5c5c      	ldrb	r4, [r3, r1]
    12a8:	4642      	mov	r2, r8
    12aa:	4394      	bics	r4, r2
    12ac:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12ae:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12b0:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12b2:	432a      	orrs	r2, r5
    12b4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12b6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12b8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12ba:	394a      	subs	r1, #74	; 0x4a
    12bc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    12be:	3151      	adds	r1, #81	; 0x51
    12c0:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12c2:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    12c4:	bc04      	pop	{r2}
    12c6:	4690      	mov	r8, r2
    12c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	41004400 	.word	0x41004400
    12d0:	c0000100 	.word	0xc0000100
    12d4:	c0000200 	.word	0xc0000200

000012d8 <USB_DEVICE_INSTANCE_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
    12d8:	4b06      	ldr	r3, [pc, #24]	; (12f4 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    12da:	69da      	ldr	r2, [r3, #28]
    12dc:	2120      	movs	r1, #32
    12de:	430a      	orrs	r2, r1
    12e0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    12e2:	695a      	ldr	r2, [r3, #20]
    12e4:	3120      	adds	r1, #32
    12e6:	430a      	orrs	r2, r1
    12e8:	615a      	str	r2, [r3, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    12ea:	4a03      	ldr	r2, [pc, #12]	; (12f8 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    12ec:	4b03      	ldr	r3, [pc, #12]	; (12fc <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    12ee:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    12f0:	4770      	bx	lr
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	40000400 	.word	0x40000400
    12f8:	00004106 	.word	0x00004106
    12fc:	40000c00 	.word	0x40000c00

00001300 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    1300:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    1302:	4b03      	ldr	r3, [pc, #12]	; (1310 <USB_DEVICE_INSTANCE_init+0x10>)
    1304:	4798      	blx	r3
	usb_d_init();
    1306:	4b03      	ldr	r3, [pc, #12]	; (1314 <USB_DEVICE_INSTANCE_init+0x14>)
    1308:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    130a:	4b03      	ldr	r3, [pc, #12]	; (1318 <USB_DEVICE_INSTANCE_init+0x18>)
    130c:	4798      	blx	r3
}
    130e:	bd10      	pop	{r4, pc}
    1310:	000012d9 	.word	0x000012d9
    1314:	00001921 	.word	0x00001921
    1318:	00001251 	.word	0x00001251

0000131c <system_init>:

void system_init(void)
{
    131c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    131e:	4b0a      	ldr	r3, [pc, #40]	; (1348 <system_init+0x2c>)
    1320:	4798      	blx	r3
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1322:	4a0a      	ldr	r2, [pc, #40]	; (134c <system_init+0x30>)
    1324:	6a11      	ldr	r1, [r2, #32]
    1326:	2380      	movs	r3, #128	; 0x80
    1328:	011b      	lsls	r3, r3, #4
    132a:	430b      	orrs	r3, r1
    132c:	6213      	str	r3, [r2, #32]
    132e:	4a08      	ldr	r2, [pc, #32]	; (1350 <system_init+0x34>)
    1330:	4b08      	ldr	r3, [pc, #32]	; (1354 <system_init+0x38>)
    1332:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    1334:	4b08      	ldr	r3, [pc, #32]	; (1358 <system_init+0x3c>)
    1336:	4798      	blx	r3
    1338:	0002      	movs	r2, r0
    133a:	4908      	ldr	r1, [pc, #32]	; (135c <system_init+0x40>)
    133c:	4808      	ldr	r0, [pc, #32]	; (1360 <system_init+0x44>)
    133e:	4b09      	ldr	r3, [pc, #36]	; (1364 <system_init+0x48>)
    1340:	4798      	blx	r3
	init_mcu();

	TIMER_0_init();

	USB_DEVICE_INSTANCE_init();
    1342:	4b09      	ldr	r3, [pc, #36]	; (1368 <system_init+0x4c>)
    1344:	4798      	blx	r3
}
    1346:	bd10      	pop	{r4, pc}
    1348:	00001dd5 	.word	0x00001dd5
    134c:	40000400 	.word	0x40000400
    1350:	0000431b 	.word	0x0000431b
    1354:	40000c00 	.word	0x40000c00
    1358:	000020ff 	.word	0x000020ff
    135c:	42002c00 	.word	0x42002c00
    1360:	20000a80 	.word	0x20000a80
    1364:	000014a5 	.word	0x000014a5
    1368:	00001301 	.word	0x00001301

0000136c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    136c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1370:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1372:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1374:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1378:	4770      	bx	lr

0000137a <atomic_leave_critical>:
    137a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    137e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1380:	f383 8810 	msr	PRIMASK, r3
}
    1384:	4770      	bx	lr
	...

00001388 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1388:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    138a:	4b04      	ldr	r3, [pc, #16]	; (139c <delay_ms+0x14>)
    138c:	681c      	ldr	r4, [r3, #0]
    138e:	4b04      	ldr	r3, [pc, #16]	; (13a0 <delay_ms+0x18>)
    1390:	4798      	blx	r3
    1392:	0001      	movs	r1, r0
    1394:	0020      	movs	r0, r4
    1396:	4b03      	ldr	r3, [pc, #12]	; (13a4 <delay_ms+0x1c>)
    1398:	4798      	blx	r3
}
    139a:	bd10      	pop	{r4, pc}
    139c:	200004f4 	.word	0x200004f4
    13a0:	00001db1 	.word	0x00001db1
    13a4:	00001dcd 	.word	0x00001dcd

000013a8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    13a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13aa:	46ce      	mov	lr, r9
    13ac:	4647      	mov	r7, r8
    13ae:	b580      	push	{r7, lr}
    13b0:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    13b2:	6803      	ldr	r3, [r0, #0]
    13b4:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    13b6:	2b00      	cmp	r3, #0
    13b8:	d005      	beq.n	13c6 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    13ba:	688e      	ldr	r6, [r1, #8]
    13bc:	001c      	movs	r4, r3
    13be:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    13c0:	2701      	movs	r7, #1
    13c2:	1abf      	subs	r7, r7, r2
    13c4:	e00d      	b.n	13e2 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    13c6:	4b12      	ldr	r3, [pc, #72]	; (1410 <timer_add_timer_task+0x68>)
    13c8:	4798      	blx	r3
		return;
    13ca:	e018      	b.n	13fe <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	68a0      	ldr	r0, [r4, #8]
    13d0:	4680      	mov	r8, r0
    13d2:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    13d4:	42b3      	cmp	r3, r6
    13d6:	d20c      	bcs.n	13f2 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    13d8:	6823      	ldr	r3, [r4, #0]
    13da:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    13dc:	2b00      	cmp	r3, #0
    13de:	d00b      	beq.n	13f8 <timer_add_timer_task+0x50>
    13e0:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    13e2:	6863      	ldr	r3, [r4, #4]
    13e4:	4293      	cmp	r3, r2
    13e6:	d8f1      	bhi.n	13cc <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    13e8:	68a0      	ldr	r0, [r4, #8]
    13ea:	4680      	mov	r8, r0
    13ec:	4443      	add	r3, r8
    13ee:	1a9b      	subs	r3, r3, r2
    13f0:	e7f0      	b.n	13d4 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    13f2:	45a4      	cmp	ip, r4
    13f4:	d007      	beq.n	1406 <timer_add_timer_task+0x5e>
    13f6:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    13f8:	0020      	movs	r0, r4
    13fa:	4b06      	ldr	r3, [pc, #24]	; (1414 <timer_add_timer_task+0x6c>)
    13fc:	4798      	blx	r3
	}
}
    13fe:	bc0c      	pop	{r2, r3}
    1400:	4690      	mov	r8, r2
    1402:	4699      	mov	r9, r3
    1404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1406:	4648      	mov	r0, r9
    1408:	4b01      	ldr	r3, [pc, #4]	; (1410 <timer_add_timer_task+0x68>)
    140a:	4798      	blx	r3
    140c:	e7f7      	b.n	13fe <timer_add_timer_task+0x56>
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	00001cd1 	.word	0x00001cd1
    1414:	00001cfd 	.word	0x00001cfd

00001418 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1418:	b5f0      	push	{r4, r5, r6, r7, lr}
    141a:	46c6      	mov	lr, r8
    141c:	b500      	push	{lr}
    141e:	b082      	sub	sp, #8
    1420:	0007      	movs	r7, r0
	return (void *)list->head;
    1422:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1424:	6903      	ldr	r3, [r0, #16]
    1426:	3301      	adds	r3, #1
    1428:	4698      	mov	r8, r3
    142a:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    142c:	7e03      	ldrb	r3, [r0, #24]
    142e:	07db      	lsls	r3, r3, #31
    1430:	d411      	bmi.n	1456 <timer_process_counted+0x3e>
    1432:	7e03      	ldrb	r3, [r0, #24]
    1434:	079b      	lsls	r3, r3, #30
    1436:	d40e      	bmi.n	1456 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1438:	2c00      	cmp	r4, #0
    143a:	d010      	beq.n	145e <timer_process_counted+0x46>
    143c:	4643      	mov	r3, r8
    143e:	6862      	ldr	r2, [r4, #4]
    1440:	1a9b      	subs	r3, r3, r2
    1442:	68a2      	ldr	r2, [r4, #8]
    1444:	4293      	cmp	r3, r2
    1446:	d30a      	bcc.n	145e <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1448:	2314      	movs	r3, #20
    144a:	469c      	mov	ip, r3
    144c:	4484      	add	ip, r0
    144e:	4663      	mov	r3, ip
    1450:	9301      	str	r3, [sp, #4]
    1452:	4e12      	ldr	r6, [pc, #72]	; (149c <timer_process_counted+0x84>)
    1454:	e014      	b.n	1480 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1456:	7e3b      	ldrb	r3, [r7, #24]
    1458:	2202      	movs	r2, #2
    145a:	4313      	orrs	r3, r2
    145c:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    145e:	b002      	add	sp, #8
    1460:	bc04      	pop	{r2}
    1462:	4690      	mov	r8, r2
    1464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1466:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    1468:	68e3      	ldr	r3, [r4, #12]
    146a:	0020      	movs	r0, r4
    146c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    146e:	2d00      	cmp	r5, #0
    1470:	d0f5      	beq.n	145e <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1472:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1474:	4643      	mov	r3, r8
    1476:	686a      	ldr	r2, [r5, #4]
    1478:	1a9b      	subs	r3, r3, r2
    147a:	68aa      	ldr	r2, [r5, #8]
    147c:	4293      	cmp	r3, r2
    147e:	d3ee      	bcc.n	145e <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    1480:	9801      	ldr	r0, [sp, #4]
    1482:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1484:	7c23      	ldrb	r3, [r4, #16]
    1486:	2b01      	cmp	r3, #1
    1488:	d1ed      	bne.n	1466 <timer_process_counted+0x4e>
			tmp->time_label = time;
    148a:	4643      	mov	r3, r8
    148c:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    148e:	4642      	mov	r2, r8
    1490:	0021      	movs	r1, r4
    1492:	9801      	ldr	r0, [sp, #4]
    1494:	4b02      	ldr	r3, [pc, #8]	; (14a0 <timer_process_counted+0x88>)
    1496:	4798      	blx	r3
    1498:	e7e5      	b.n	1466 <timer_process_counted+0x4e>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00001d45 	.word	0x00001d45
    14a0:	000013a9 	.word	0x000013a9

000014a4 <timer_init>:
{
    14a4:	b570      	push	{r4, r5, r6, lr}
    14a6:	0005      	movs	r5, r0
    14a8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    14aa:	2800      	cmp	r0, #0
    14ac:	d011      	beq.n	14d2 <timer_init+0x2e>
    14ae:	0008      	movs	r0, r1
    14b0:	1e43      	subs	r3, r0, #1
    14b2:	4198      	sbcs	r0, r3
    14b4:	b2c0      	uxtb	r0, r0
    14b6:	223b      	movs	r2, #59	; 0x3b
    14b8:	4907      	ldr	r1, [pc, #28]	; (14d8 <timer_init+0x34>)
    14ba:	4b08      	ldr	r3, [pc, #32]	; (14dc <timer_init+0x38>)
    14bc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    14be:	0021      	movs	r1, r4
    14c0:	0028      	movs	r0, r5
    14c2:	4b07      	ldr	r3, [pc, #28]	; (14e0 <timer_init+0x3c>)
    14c4:	4798      	blx	r3
	descr->time                           = 0;
    14c6:	2300      	movs	r3, #0
    14c8:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    14ca:	4b06      	ldr	r3, [pc, #24]	; (14e4 <timer_init+0x40>)
    14cc:	602b      	str	r3, [r5, #0]
}
    14ce:	2000      	movs	r0, #0
    14d0:	bd70      	pop	{r4, r5, r6, pc}
    14d2:	2000      	movs	r0, #0
    14d4:	e7ef      	b.n	14b6 <timer_init+0x12>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	000057d0 	.word	0x000057d0
    14dc:	00001ca5 	.word	0x00001ca5
    14e0:	00001fc9 	.word	0x00001fc9
    14e4:	00001419 	.word	0x00001419

000014e8 <timer_start>:
{
    14e8:	b510      	push	{r4, lr}
    14ea:	0004      	movs	r4, r0
	ASSERT(descr);
    14ec:	1e43      	subs	r3, r0, #1
    14ee:	4198      	sbcs	r0, r3
    14f0:	b2c0      	uxtb	r0, r0
    14f2:	2253      	movs	r2, #83	; 0x53
    14f4:	4907      	ldr	r1, [pc, #28]	; (1514 <timer_start+0x2c>)
    14f6:	4b08      	ldr	r3, [pc, #32]	; (1518 <timer_start+0x30>)
    14f8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    14fa:	0020      	movs	r0, r4
    14fc:	4b07      	ldr	r3, [pc, #28]	; (151c <timer_start+0x34>)
    14fe:	4798      	blx	r3
    1500:	2800      	cmp	r0, #0
    1502:	d104      	bne.n	150e <timer_start+0x26>
	_timer_start(&descr->device);
    1504:	0020      	movs	r0, r4
    1506:	4b06      	ldr	r3, [pc, #24]	; (1520 <timer_start+0x38>)
    1508:	4798      	blx	r3
	return ERR_NONE;
    150a:	2000      	movs	r0, #0
}
    150c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    150e:	2011      	movs	r0, #17
    1510:	4240      	negs	r0, r0
    1512:	e7fb      	b.n	150c <timer_start+0x24>
    1514:	000057d0 	.word	0x000057d0
    1518:	00001ca5 	.word	0x00001ca5
    151c:	000020f5 	.word	0x000020f5
    1520:	000020dd 	.word	0x000020dd

00001524 <timer_stop>:
{
    1524:	b510      	push	{r4, lr}
    1526:	0004      	movs	r4, r0
	ASSERT(descr);
    1528:	1e43      	subs	r3, r0, #1
    152a:	4198      	sbcs	r0, r3
    152c:	b2c0      	uxtb	r0, r0
    152e:	2261      	movs	r2, #97	; 0x61
    1530:	4907      	ldr	r1, [pc, #28]	; (1550 <timer_stop+0x2c>)
    1532:	4b08      	ldr	r3, [pc, #32]	; (1554 <timer_stop+0x30>)
    1534:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    1536:	0020      	movs	r0, r4
    1538:	4b07      	ldr	r3, [pc, #28]	; (1558 <timer_stop+0x34>)
    153a:	4798      	blx	r3
    153c:	2800      	cmp	r0, #0
    153e:	d004      	beq.n	154a <timer_stop+0x26>
	_timer_stop(&descr->device);
    1540:	0020      	movs	r0, r4
    1542:	4b06      	ldr	r3, [pc, #24]	; (155c <timer_stop+0x38>)
    1544:	4798      	blx	r3
	return ERR_NONE;
    1546:	2000      	movs	r0, #0
}
    1548:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    154a:	2011      	movs	r0, #17
    154c:	4240      	negs	r0, r0
    154e:	e7fb      	b.n	1548 <timer_stop+0x24>
    1550:	000057d0 	.word	0x000057d0
    1554:	00001ca5 	.word	0x00001ca5
    1558:	000020f5 	.word	0x000020f5
    155c:	000020e9 	.word	0x000020e9

00001560 <timer_add_task>:
{
    1560:	b570      	push	{r4, r5, r6, lr}
    1562:	b082      	sub	sp, #8
    1564:	0004      	movs	r4, r0
    1566:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1568:	2800      	cmp	r0, #0
    156a:	d024      	beq.n	15b6 <timer_add_task+0x56>
    156c:	0008      	movs	r0, r1
    156e:	1e43      	subs	r3, r0, #1
    1570:	4198      	sbcs	r0, r3
    1572:	b2c0      	uxtb	r0, r0
    1574:	227a      	movs	r2, #122	; 0x7a
    1576:	491e      	ldr	r1, [pc, #120]	; (15f0 <timer_add_task+0x90>)
    1578:	4b1e      	ldr	r3, [pc, #120]	; (15f4 <timer_add_task+0x94>)
    157a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    157c:	7e23      	ldrb	r3, [r4, #24]
    157e:	2201      	movs	r2, #1
    1580:	4313      	orrs	r3, r2
    1582:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1584:	0026      	movs	r6, r4
    1586:	3614      	adds	r6, #20
    1588:	0029      	movs	r1, r5
    158a:	0030      	movs	r0, r6
    158c:	4b1a      	ldr	r3, [pc, #104]	; (15f8 <timer_add_task+0x98>)
    158e:	4798      	blx	r3
    1590:	2800      	cmp	r0, #0
    1592:	d112      	bne.n	15ba <timer_add_task+0x5a>
	task->time_label = descr->time;
    1594:	6923      	ldr	r3, [r4, #16]
    1596:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1598:	6922      	ldr	r2, [r4, #16]
    159a:	0029      	movs	r1, r5
    159c:	0030      	movs	r0, r6
    159e:	4b17      	ldr	r3, [pc, #92]	; (15fc <timer_add_task+0x9c>)
    15a0:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    15a2:	7e23      	ldrb	r3, [r4, #24]
    15a4:	2201      	movs	r2, #1
    15a6:	4393      	bics	r3, r2
    15a8:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    15aa:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    15ac:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    15ae:	079b      	lsls	r3, r3, #30
    15b0:	d40f      	bmi.n	15d2 <timer_add_task+0x72>
}
    15b2:	b002      	add	sp, #8
    15b4:	bd70      	pop	{r4, r5, r6, pc}
    15b6:	2000      	movs	r0, #0
    15b8:	e7dc      	b.n	1574 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    15ba:	7e23      	ldrb	r3, [r4, #24]
    15bc:	2201      	movs	r2, #1
    15be:	4393      	bics	r3, r2
    15c0:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    15c2:	327e      	adds	r2, #126	; 0x7e
    15c4:	490a      	ldr	r1, [pc, #40]	; (15f0 <timer_add_task+0x90>)
    15c6:	2000      	movs	r0, #0
    15c8:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <timer_add_task+0x94>)
    15ca:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    15cc:	2012      	movs	r0, #18
    15ce:	4240      	negs	r0, r0
    15d0:	e7ef      	b.n	15b2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    15d2:	a801      	add	r0, sp, #4
    15d4:	4b0a      	ldr	r3, [pc, #40]	; (1600 <timer_add_task+0xa0>)
    15d6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    15d8:	7e23      	ldrb	r3, [r4, #24]
    15da:	2202      	movs	r2, #2
    15dc:	4393      	bics	r3, r2
    15de:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    15e0:	0020      	movs	r0, r4
    15e2:	4b08      	ldr	r3, [pc, #32]	; (1604 <timer_add_task+0xa4>)
    15e4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    15e6:	a801      	add	r0, sp, #4
    15e8:	4b07      	ldr	r3, [pc, #28]	; (1608 <timer_add_task+0xa8>)
    15ea:	4798      	blx	r3
	return ERR_NONE;
    15ec:	2000      	movs	r0, #0
    15ee:	e7e0      	b.n	15b2 <timer_add_task+0x52>
    15f0:	000057d0 	.word	0x000057d0
    15f4:	00001ca5 	.word	0x00001ca5
    15f8:	00001cad 	.word	0x00001cad
    15fc:	000013a9 	.word	0x000013a9
    1600:	0000136d 	.word	0x0000136d
    1604:	00002105 	.word	0x00002105
    1608:	0000137b 	.word	0x0000137b

0000160c <timer_remove_task>:
{
    160c:	b570      	push	{r4, r5, r6, lr}
    160e:	b082      	sub	sp, #8
    1610:	0004      	movs	r4, r0
    1612:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1614:	2800      	cmp	r0, #0
    1616:	d021      	beq.n	165c <timer_remove_task+0x50>
    1618:	0008      	movs	r0, r1
    161a:	1e43      	subs	r3, r0, #1
    161c:	4198      	sbcs	r0, r3
    161e:	b2c0      	uxtb	r0, r0
    1620:	2295      	movs	r2, #149	; 0x95
    1622:	491c      	ldr	r1, [pc, #112]	; (1694 <timer_remove_task+0x88>)
    1624:	4b1c      	ldr	r3, [pc, #112]	; (1698 <timer_remove_task+0x8c>)
    1626:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1628:	7e23      	ldrb	r3, [r4, #24]
    162a:	2201      	movs	r2, #1
    162c:	4313      	orrs	r3, r2
    162e:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    1630:	0026      	movs	r6, r4
    1632:	3614      	adds	r6, #20
    1634:	0029      	movs	r1, r5
    1636:	0030      	movs	r0, r6
    1638:	4b18      	ldr	r3, [pc, #96]	; (169c <timer_remove_task+0x90>)
    163a:	4798      	blx	r3
    163c:	2800      	cmp	r0, #0
    163e:	d00f      	beq.n	1660 <timer_remove_task+0x54>
	list_delete_element(&descr->tasks, task);
    1640:	0029      	movs	r1, r5
    1642:	0030      	movs	r0, r6
    1644:	4b16      	ldr	r3, [pc, #88]	; (16a0 <timer_remove_task+0x94>)
    1646:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1648:	7e23      	ldrb	r3, [r4, #24]
    164a:	2201      	movs	r2, #1
    164c:	4393      	bics	r3, r2
    164e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1650:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    1652:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1654:	079b      	lsls	r3, r3, #30
    1656:	d40e      	bmi.n	1676 <timer_remove_task+0x6a>
}
    1658:	b002      	add	sp, #8
    165a:	bd70      	pop	{r4, r5, r6, pc}
    165c:	2000      	movs	r0, #0
    165e:	e7df      	b.n	1620 <timer_remove_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1660:	7e23      	ldrb	r3, [r4, #24]
    1662:	2201      	movs	r2, #1
    1664:	4393      	bics	r3, r2
    1666:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1668:	3299      	adds	r2, #153	; 0x99
    166a:	490a      	ldr	r1, [pc, #40]	; (1694 <timer_remove_task+0x88>)
    166c:	4b0a      	ldr	r3, [pc, #40]	; (1698 <timer_remove_task+0x8c>)
    166e:	4798      	blx	r3
		return ERR_NOT_FOUND;
    1670:	200a      	movs	r0, #10
    1672:	4240      	negs	r0, r0
    1674:	e7f0      	b.n	1658 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1676:	a801      	add	r0, sp, #4
    1678:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <timer_remove_task+0x98>)
    167a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    167c:	7e23      	ldrb	r3, [r4, #24]
    167e:	2202      	movs	r2, #2
    1680:	4393      	bics	r3, r2
    1682:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1684:	0020      	movs	r0, r4
    1686:	4b08      	ldr	r3, [pc, #32]	; (16a8 <timer_remove_task+0x9c>)
    1688:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    168a:	a801      	add	r0, sp, #4
    168c:	4b07      	ldr	r3, [pc, #28]	; (16ac <timer_remove_task+0xa0>)
    168e:	4798      	blx	r3
	return ERR_NONE;
    1690:	2000      	movs	r0, #0
    1692:	e7e1      	b.n	1658 <timer_remove_task+0x4c>
    1694:	000057d0 	.word	0x000057d0
    1698:	00001ca5 	.word	0x00001ca5
    169c:	00001cad 	.word	0x00001cad
    16a0:	00001d53 	.word	0x00001d53
    16a4:	0000136d 	.word	0x0000136d
    16a8:	00002105 	.word	0x00002105
    16ac:	0000137b 	.word	0x0000137b

000016b0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    16b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b2:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    16b4:	4b0e      	ldr	r3, [pc, #56]	; (16f0 <_usb_d_find_ep+0x40>)
    16b6:	785a      	ldrb	r2, [r3, #1]
    16b8:	4290      	cmp	r0, r2
    16ba:	d017      	beq.n	16ec <_usb_d_find_ep+0x3c>
    16bc:	2300      	movs	r3, #0
    16be:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    16c0:	4f0b      	ldr	r7, [pc, #44]	; (16f0 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    16c2:	260f      	movs	r6, #15
    16c4:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    16c6:	003d      	movs	r5, r7
    16c8:	e008      	b.n	16dc <_usb_d_find_ep+0x2c>
    16ca:	3001      	adds	r0, #1
    16cc:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    16ce:	2804      	cmp	r0, #4
    16d0:	d00a      	beq.n	16e8 <_usb_d_find_ep+0x38>
    16d2:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    16d4:	18ea      	adds	r2, r5, r3
    16d6:	7852      	ldrb	r2, [r2, #1]
    16d8:	42a2      	cmp	r2, r4
    16da:	d006      	beq.n	16ea <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    16dc:	5dd9      	ldrb	r1, [r3, r7]
    16de:	2900      	cmp	r1, #0
    16e0:	d1f3      	bne.n	16ca <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    16e2:	4296      	cmp	r6, r2
    16e4:	d1f1      	bne.n	16ca <_usb_d_find_ep+0x1a>
    16e6:	e000      	b.n	16ea <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    16e8:	3805      	subs	r0, #5
}
    16ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    16ec:	2000      	movs	r0, #0
    16ee:	e7fc      	b.n	16ea <_usb_d_find_ep+0x3a>
    16f0:	200004f8 	.word	0x200004f8

000016f4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    16f4:	2000      	movs	r0, #0
    16f6:	4770      	bx	lr

000016f8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    16f8:	b570      	push	{r4, r5, r6, lr}
    16fa:	0004      	movs	r4, r0
    16fc:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    16fe:	4b0a      	ldr	r3, [pc, #40]	; (1728 <usb_d_cb_trans_more+0x30>)
    1700:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1702:	0142      	lsls	r2, r0, #5
    1704:	4b09      	ldr	r3, [pc, #36]	; (172c <usb_d_cb_trans_more+0x34>)
    1706:	189b      	adds	r3, r3, r2
    1708:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    170a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    170c:	2a03      	cmp	r2, #3
    170e:	d001      	beq.n	1714 <usb_d_cb_trans_more+0x1c>
}
    1710:	0018      	movs	r0, r3
    1712:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1714:	0140      	lsls	r0, r0, #5
    1716:	4b05      	ldr	r3, [pc, #20]	; (172c <usb_d_cb_trans_more+0x34>)
    1718:	1818      	adds	r0, r3, r0
    171a:	6983      	ldr	r3, [r0, #24]
    171c:	0029      	movs	r1, r5
    171e:	0020      	movs	r0, r4
    1720:	4798      	blx	r3
    1722:	0003      	movs	r3, r0
    1724:	e7f4      	b.n	1710 <usb_d_cb_trans_more+0x18>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	000016b1 	.word	0x000016b1
    172c:	200004f8 	.word	0x200004f8

00001730 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1730:	b5f0      	push	{r4, r5, r6, r7, lr}
    1732:	b085      	sub	sp, #20
    1734:	0005      	movs	r5, r0
    1736:	000f      	movs	r7, r1
    1738:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    173a:	4b51      	ldr	r3, [pc, #324]	; (1880 <_usb_d_cb_trans_done+0x150>)
    173c:	4798      	blx	r3
    173e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1740:	2f00      	cmp	r7, #0
    1742:	d162      	bne.n	180a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1744:	4b4f      	ldr	r3, [pc, #316]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1746:	0142      	lsls	r2, r0, #5
    1748:	1899      	adds	r1, r3, r2
    174a:	2000      	movs	r0, #0
    174c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    174e:	5cd3      	ldrb	r3, [r2, r3]
    1750:	2b00      	cmp	r3, #0
    1752:	d00e      	beq.n	1772 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1754:	0162      	lsls	r2, r4, #5
    1756:	4b4b      	ldr	r3, [pc, #300]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1758:	189b      	adds	r3, r3, r2
    175a:	2201      	movs	r2, #1
    175c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    175e:	0164      	lsls	r4, r4, #5
    1760:	4b48      	ldr	r3, [pc, #288]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1762:	191c      	adds	r4, r3, r4
    1764:	78e1      	ldrb	r1, [r4, #3]
    1766:	69e3      	ldr	r3, [r4, #28]
    1768:	0032      	movs	r2, r6
    176a:	0028      	movs	r0, r5
    176c:	4798      	blx	r3
}
    176e:	b005      	add	sp, #20
    1770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1772:	788b      	ldrb	r3, [r1, #2]
    1774:	2b03      	cmp	r3, #3
    1776:	d00c      	beq.n	1792 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1778:	4b42      	ldr	r3, [pc, #264]	; (1884 <_usb_d_cb_trans_done+0x154>)
    177a:	0162      	lsls	r2, r4, #5
    177c:	320c      	adds	r2, #12
    177e:	189a      	adds	r2, r3, r2
    1780:	0164      	lsls	r4, r4, #5
    1782:	191c      	adds	r4, r3, r4
    1784:	7860      	ldrb	r0, [r4, #1]
    1786:	2100      	movs	r1, #0
    1788:	69e3      	ldr	r3, [r4, #28]
    178a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    178c:	2302      	movs	r3, #2
    178e:	70a3      	strb	r3, [r4, #2]
    1790:	e7ed      	b.n	176e <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1792:	4a3c      	ldr	r2, [pc, #240]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1794:	000b      	movs	r3, r1
    1796:	250c      	movs	r5, #12
    1798:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    179a:	0161      	lsls	r1, r4, #5
    179c:	310c      	adds	r1, #12
    179e:	1852      	adds	r2, r2, r1
    17a0:	7858      	ldrb	r0, [r3, #1]
    17a2:	69db      	ldr	r3, [r3, #28]
    17a4:	2101      	movs	r1, #1
    17a6:	4798      	blx	r3
		if (err) {
    17a8:	2800      	cmp	r0, #0
    17aa:	d017      	beq.n	17dc <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    17ac:	0162      	lsls	r2, r4, #5
    17ae:	4b35      	ldr	r3, [pc, #212]	; (1884 <_usb_d_cb_trans_done+0x154>)
    17b0:	189b      	adds	r3, r3, r2
    17b2:	2205      	movs	r2, #5
    17b4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    17b6:	3a03      	subs	r2, #3
    17b8:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    17ba:	2d00      	cmp	r5, #0
    17bc:	db09      	blt.n	17d2 <_usb_d_cb_trans_done+0xa2>
    17be:	0164      	lsls	r4, r4, #5
    17c0:	4b30      	ldr	r3, [pc, #192]	; (1884 <_usb_d_cb_trans_done+0x154>)
    17c2:	191c      	adds	r4, r3, r4
    17c4:	7860      	ldrb	r0, [r4, #1]
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	4318      	orrs	r0, r3
    17ca:	2101      	movs	r1, #1
    17cc:	4b2e      	ldr	r3, [pc, #184]	; (1888 <_usb_d_cb_trans_done+0x158>)
    17ce:	4798      	blx	r3
    17d0:	e7cd      	b.n	176e <_usb_d_cb_trans_done+0x3e>
    17d2:	0164      	lsls	r4, r4, #5
    17d4:	4b2b      	ldr	r3, [pc, #172]	; (1884 <_usb_d_cb_trans_done+0x154>)
    17d6:	191c      	adds	r4, r3, r4
    17d8:	7860      	ldrb	r0, [r4, #1]
    17da:	e7f6      	b.n	17ca <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    17dc:	0164      	lsls	r4, r4, #5
    17de:	4b29      	ldr	r3, [pc, #164]	; (1884 <_usb_d_cb_trans_done+0x154>)
    17e0:	191c      	adds	r4, r3, r4
    17e2:	2304      	movs	r3, #4
    17e4:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    17e6:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    17e8:	2200      	movs	r2, #0
    17ea:	9201      	str	r2, [sp, #4]
    17ec:	9202      	str	r2, [sp, #8]
    17ee:	2d00      	cmp	r5, #0
    17f0:	db08      	blt.n	1804 <_usb_d_cb_trans_done+0xd4>
    17f2:	3280      	adds	r2, #128	; 0x80
    17f4:	4313      	orrs	r3, r2
    17f6:	a801      	add	r0, sp, #4
    17f8:	7203      	strb	r3, [r0, #8]
    17fa:	2301      	movs	r3, #1
    17fc:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    17fe:	4b23      	ldr	r3, [pc, #140]	; (188c <_usb_d_cb_trans_done+0x15c>)
    1800:	4798      	blx	r3
    1802:	e7b4      	b.n	176e <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    1804:	220f      	movs	r2, #15
    1806:	4013      	ands	r3, r2
    1808:	e7f5      	b.n	17f6 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    180a:	2f01      	cmp	r7, #1
    180c:	d00a      	beq.n	1824 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    180e:	2f02      	cmp	r7, #2
    1810:	d01d      	beq.n	184e <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    1812:	2f03      	cmp	r7, #3
    1814:	d02c      	beq.n	1870 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1816:	0142      	lsls	r2, r0, #5
    1818:	4b1a      	ldr	r3, [pc, #104]	; (1884 <_usb_d_cb_trans_done+0x154>)
    181a:	189b      	adds	r3, r3, r2
    181c:	2206      	movs	r2, #6
    181e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1820:	70da      	strb	r2, [r3, #3]
    1822:	e79c      	b.n	175e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1824:	4b17      	ldr	r3, [pc, #92]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1826:	0142      	lsls	r2, r0, #5
    1828:	1899      	adds	r1, r3, r2
    182a:	2002      	movs	r0, #2
    182c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    182e:	5cd3      	ldrb	r3, [r2, r3]
    1830:	2b00      	cmp	r3, #0
    1832:	d005      	beq.n	1840 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1834:	0162      	lsls	r2, r4, #5
    1836:	4b13      	ldr	r3, [pc, #76]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1838:	189b      	adds	r3, r3, r2
    183a:	2205      	movs	r2, #5
    183c:	709a      	strb	r2, [r3, #2]
    183e:	e78e      	b.n	175e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1840:	2202      	movs	r2, #2
    1842:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1844:	2100      	movs	r1, #0
    1846:	0028      	movs	r0, r5
    1848:	4b0f      	ldr	r3, [pc, #60]	; (1888 <_usb_d_cb_trans_done+0x158>)
    184a:	4798      	blx	r3
    184c:	e787      	b.n	175e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    184e:	4b0d      	ldr	r3, [pc, #52]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1850:	0142      	lsls	r2, r0, #5
    1852:	1899      	adds	r1, r3, r2
    1854:	2004      	movs	r0, #4
    1856:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1858:	5cd3      	ldrb	r3, [r2, r3]
    185a:	2b00      	cmp	r3, #0
    185c:	d005      	beq.n	186a <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    185e:	0162      	lsls	r2, r4, #5
    1860:	4b08      	ldr	r3, [pc, #32]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1862:	189b      	adds	r3, r3, r2
    1864:	2201      	movs	r2, #1
    1866:	709a      	strb	r2, [r3, #2]
    1868:	e779      	b.n	175e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    186a:	2302      	movs	r3, #2
    186c:	708b      	strb	r3, [r1, #2]
			return;
    186e:	e77e      	b.n	176e <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1870:	0142      	lsls	r2, r0, #5
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <_usb_d_cb_trans_done+0x154>)
    1874:	189b      	adds	r3, r3, r2
    1876:	2200      	movs	r2, #0
    1878:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    187a:	3205      	adds	r2, #5
    187c:	70da      	strb	r2, [r3, #3]
    187e:	e76e      	b.n	175e <_usb_d_cb_trans_done+0x2e>
    1880:	000016b1 	.word	0x000016b1
    1884:	200004f8 	.word	0x200004f8
    1888:	00002df5 	.word	0x00002df5
    188c:	00002fc9 	.word	0x00002fc9

00001890 <usb_d_cb_trans_setup>:
{
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	46c6      	mov	lr, r8
    1894:	b500      	push	{lr}
    1896:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1898:	4b1d      	ldr	r3, [pc, #116]	; (1910 <usb_d_cb_trans_setup+0x80>)
    189a:	4798      	blx	r3
    189c:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    189e:	0145      	lsls	r5, r0, #5
    18a0:	350c      	adds	r5, #12
    18a2:	4b1c      	ldr	r3, [pc, #112]	; (1914 <usb_d_cb_trans_setup+0x84>)
    18a4:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    18a6:	0029      	movs	r1, r5
    18a8:	0020      	movs	r0, r4
    18aa:	4b1b      	ldr	r3, [pc, #108]	; (1918 <usb_d_cb_trans_setup+0x88>)
    18ac:	4798      	blx	r3
	if (n != 8) {
    18ae:	b2c0      	uxtb	r0, r0
    18b0:	2808      	cmp	r0, #8
    18b2:	d00a      	beq.n	18ca <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    18b4:	2101      	movs	r1, #1
    18b6:	0020      	movs	r0, r4
    18b8:	4d18      	ldr	r5, [pc, #96]	; (191c <usb_d_cb_trans_setup+0x8c>)
    18ba:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    18bc:	2080      	movs	r0, #128	; 0x80
    18be:	4320      	orrs	r0, r4
    18c0:	2101      	movs	r1, #1
    18c2:	47a8      	blx	r5
}
    18c4:	bc04      	pop	{r2}
    18c6:	4690      	mov	r8, r2
    18c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    18ca:	2100      	movs	r1, #0
    18cc:	0020      	movs	r0, r4
    18ce:	4b13      	ldr	r3, [pc, #76]	; (191c <usb_d_cb_trans_setup+0x8c>)
    18d0:	4698      	mov	r8, r3
    18d2:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    18d4:	2780      	movs	r7, #128	; 0x80
    18d6:	4327      	orrs	r7, r4
    18d8:	2100      	movs	r1, #0
    18da:	0038      	movs	r0, r7
    18dc:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    18de:	0172      	lsls	r2, r6, #5
    18e0:	4b0c      	ldr	r3, [pc, #48]	; (1914 <usb_d_cb_trans_setup+0x84>)
    18e2:	189b      	adds	r3, r3, r2
    18e4:	2201      	movs	r2, #1
    18e6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    18e8:	695b      	ldr	r3, [r3, #20]
    18ea:	0029      	movs	r1, r5
    18ec:	0020      	movs	r0, r4
    18ee:	4798      	blx	r3
    18f0:	2800      	cmp	r0, #0
    18f2:	d1e7      	bne.n	18c4 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    18f4:	0176      	lsls	r6, r6, #5
    18f6:	4b07      	ldr	r3, [pc, #28]	; (1914 <usb_d_cb_trans_setup+0x84>)
    18f8:	199e      	adds	r6, r3, r6
    18fa:	2305      	movs	r3, #5
    18fc:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    18fe:	2101      	movs	r1, #1
    1900:	0020      	movs	r0, r4
    1902:	4c06      	ldr	r4, [pc, #24]	; (191c <usb_d_cb_trans_setup+0x8c>)
    1904:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1906:	2101      	movs	r1, #1
    1908:	0038      	movs	r0, r7
    190a:	47a0      	blx	r4
    190c:	e7da      	b.n	18c4 <usb_d_cb_trans_setup+0x34>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	000016b1 	.word	0x000016b1
    1914:	200004f8 	.word	0x200004f8
    1918:	00002f59 	.word	0x00002f59
    191c:	00002df5 	.word	0x00002df5

00001920 <usb_d_init>:

int32_t usb_d_init(void)
{
    1920:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1922:	4b10      	ldr	r3, [pc, #64]	; (1964 <usb_d_init+0x44>)
    1924:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1926:	2800      	cmp	r0, #0
    1928:	db1b      	blt.n	1962 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    192a:	4c0f      	ldr	r4, [pc, #60]	; (1968 <usb_d_init+0x48>)
    192c:	2280      	movs	r2, #128	; 0x80
    192e:	2100      	movs	r1, #0
    1930:	0020      	movs	r0, r4
    1932:	4b0e      	ldr	r3, [pc, #56]	; (196c <usb_d_init+0x4c>)
    1934:	4798      	blx	r3
    1936:	0023      	movs	r3, r4
    1938:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    193a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    193c:	4a0c      	ldr	r2, [pc, #48]	; (1970 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    193e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1940:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1942:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1944:	61da      	str	r2, [r3, #28]
    1946:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1948:	42a3      	cmp	r3, r4
    194a:	d1f8      	bne.n	193e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    194c:	4909      	ldr	r1, [pc, #36]	; (1974 <usb_d_init+0x54>)
    194e:	2000      	movs	r0, #0
    1950:	4c09      	ldr	r4, [pc, #36]	; (1978 <usb_d_init+0x58>)
    1952:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1954:	4909      	ldr	r1, [pc, #36]	; (197c <usb_d_init+0x5c>)
    1956:	2001      	movs	r0, #1
    1958:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    195a:	4909      	ldr	r1, [pc, #36]	; (1980 <usb_d_init+0x60>)
    195c:	2002      	movs	r0, #2
    195e:	47a0      	blx	r4
	return ERR_NONE;
    1960:	2000      	movs	r0, #0
}
    1962:	bd10      	pop	{r4, pc}
    1964:	000027c9 	.word	0x000027c9
    1968:	200004f8 	.word	0x200004f8
    196c:	000054a5 	.word	0x000054a5
    1970:	000016f5 	.word	0x000016f5
    1974:	00001891 	.word	0x00001891
    1978:	0000323d 	.word	0x0000323d
    197c:	000016f9 	.word	0x000016f9
    1980:	00001731 	.word	0x00001731

00001984 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1984:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1986:	4b01      	ldr	r3, [pc, #4]	; (198c <usb_d_register_callback+0x8>)
    1988:	4798      	blx	r3
}
    198a:	bd10      	pop	{r4, pc}
    198c:	00003219 	.word	0x00003219

00001990 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1990:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1992:	4b01      	ldr	r3, [pc, #4]	; (1998 <usb_d_enable+0x8>)
    1994:	4798      	blx	r3
}
    1996:	bd10      	pop	{r4, pc}
    1998:	000028a9 	.word	0x000028a9

0000199c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    199c:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    199e:	4b01      	ldr	r3, [pc, #4]	; (19a4 <usb_d_attach+0x8>)
    19a0:	4798      	blx	r3
}
    19a2:	bd10      	pop	{r4, pc}
    19a4:	000028f9 	.word	0x000028f9

000019a8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    19a8:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    19aa:	4b01      	ldr	r3, [pc, #4]	; (19b0 <usb_d_set_address+0x8>)
    19ac:	4798      	blx	r3
}
    19ae:	bd10      	pop	{r4, pc}
    19b0:	00002909 	.word	0x00002909

000019b4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    19b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19b6:	0005      	movs	r5, r0
    19b8:	000e      	movs	r6, r1
    19ba:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    19bc:	4b0f      	ldr	r3, [pc, #60]	; (19fc <usb_d_ep_init+0x48>)
    19be:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    19c0:	2800      	cmp	r0, #0
    19c2:	da14      	bge.n	19ee <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    19c4:	20ff      	movs	r0, #255	; 0xff
    19c6:	4b0d      	ldr	r3, [pc, #52]	; (19fc <usb_d_ep_init+0x48>)
    19c8:	4798      	blx	r3
    19ca:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    19cc:	db12      	blt.n	19f4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    19ce:	003a      	movs	r2, r7
    19d0:	0031      	movs	r1, r6
    19d2:	0028      	movs	r0, r5
    19d4:	4b0a      	ldr	r3, [pc, #40]	; (1a00 <usb_d_ep_init+0x4c>)
    19d6:	4798      	blx	r3
	if (rc < 0) {
    19d8:	2800      	cmp	r0, #0
    19da:	db07      	blt.n	19ec <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    19dc:	4a09      	ldr	r2, [pc, #36]	; (1a04 <usb_d_ep_init+0x50>)
    19de:	0164      	lsls	r4, r4, #5
    19e0:	1913      	adds	r3, r2, r4
    19e2:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    19e4:	2303      	movs	r3, #3
    19e6:	401e      	ands	r6, r3
    19e8:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    19ea:	2000      	movs	r0, #0
}
    19ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    19ee:	2014      	movs	r0, #20
    19f0:	4240      	negs	r0, r0
    19f2:	e7fb      	b.n	19ec <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    19f4:	2015      	movs	r0, #21
    19f6:	4240      	negs	r0, r0
    19f8:	e7f8      	b.n	19ec <usb_d_ep_init+0x38>
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	000016b1 	.word	0x000016b1
    1a00:	00002919 	.word	0x00002919
    1a04:	200004f8 	.word	0x200004f8

00001a08 <usb_d_ep0_init>:
{
    1a08:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1a0a:	b282      	uxth	r2, r0
    1a0c:	2100      	movs	r1, #0
    1a0e:	2000      	movs	r0, #0
    1a10:	4b01      	ldr	r3, [pc, #4]	; (1a18 <usb_d_ep0_init+0x10>)
    1a12:	4798      	blx	r3
}
    1a14:	bd10      	pop	{r4, pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	000019b5 	.word	0x000019b5

00001a1c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
    1a1e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a20:	4b06      	ldr	r3, [pc, #24]	; (1a3c <usb_d_ep_deinit+0x20>)
    1a22:	4798      	blx	r3
    1a24:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1a26:	db07      	blt.n	1a38 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1a28:	0028      	movs	r0, r5
    1a2a:	4b05      	ldr	r3, [pc, #20]	; (1a40 <usb_d_ep_deinit+0x24>)
    1a2c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1a2e:	0164      	lsls	r4, r4, #5
    1a30:	4b04      	ldr	r3, [pc, #16]	; (1a44 <usb_d_ep_deinit+0x28>)
    1a32:	191c      	adds	r4, r3, r4
    1a34:	23ff      	movs	r3, #255	; 0xff
    1a36:	7063      	strb	r3, [r4, #1]
}
    1a38:	bd70      	pop	{r4, r5, r6, pc}
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	000016b1 	.word	0x000016b1
    1a40:	00002a45 	.word	0x00002a45
    1a44:	200004f8 	.word	0x200004f8

00001a48 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1a48:	b570      	push	{r4, r5, r6, lr}
    1a4a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <usb_d_ep_enable+0x40>)
    1a4e:	4798      	blx	r3
    1a50:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1a52:	db15      	blt.n	1a80 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1a54:	0143      	lsls	r3, r0, #5
    1a56:	4a0d      	ldr	r2, [pc, #52]	; (1a8c <usb_d_ep_enable+0x44>)
    1a58:	5c9b      	ldrb	r3, [r3, r2]
    1a5a:	425a      	negs	r2, r3
    1a5c:	4153      	adcs	r3, r2
    1a5e:	3301      	adds	r3, #1
    1a60:	0141      	lsls	r1, r0, #5
    1a62:	4a0a      	ldr	r2, [pc, #40]	; (1a8c <usb_d_ep_enable+0x44>)
    1a64:	1852      	adds	r2, r2, r1
    1a66:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1a68:	0020      	movs	r0, r4
    1a6a:	4b09      	ldr	r3, [pc, #36]	; (1a90 <usb_d_ep_enable+0x48>)
    1a6c:	4798      	blx	r3
	if (rc < 0) {
    1a6e:	2800      	cmp	r0, #0
    1a70:	db00      	blt.n	1a74 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1a72:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1a74:	016d      	lsls	r5, r5, #5
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <usb_d_ep_enable+0x44>)
    1a78:	195d      	adds	r5, r3, r5
    1a7a:	2300      	movs	r3, #0
    1a7c:	70ab      	strb	r3, [r5, #2]
    1a7e:	e7f8      	b.n	1a72 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1a80:	2012      	movs	r0, #18
    1a82:	4240      	negs	r0, r0
    1a84:	e7f5      	b.n	1a72 <usb_d_ep_enable+0x2a>
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	000016b1 	.word	0x000016b1
    1a8c:	200004f8 	.word	0x200004f8
    1a90:	00002b11 	.word	0x00002b11

00001a94 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a96:	46d6      	mov	lr, sl
    1a98:	464f      	mov	r7, r9
    1a9a:	4646      	mov	r6, r8
    1a9c:	b5c0      	push	{r6, r7, lr}
    1a9e:	b086      	sub	sp, #24
    1aa0:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1aa2:	7a07      	ldrb	r7, [r0, #8]
    1aa4:	0038      	movs	r0, r7
    1aa6:	4b40      	ldr	r3, [pc, #256]	; (1ba8 <usb_d_ep_transfer+0x114>)
    1aa8:	4798      	blx	r3
    1aaa:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1aac:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    1aae:	6863      	ldr	r3, [r4, #4]
    1ab0:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1ab2:	2800      	cmp	r0, #0
    1ab4:	da00      	bge.n	1ab8 <usb_d_ep_transfer+0x24>
    1ab6:	e071      	b.n	1b9c <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1ab8:	a804      	add	r0, sp, #16
    1aba:	4b3c      	ldr	r3, [pc, #240]	; (1bac <usb_d_ep_transfer+0x118>)
    1abc:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1abe:	016a      	lsls	r2, r5, #5
    1ac0:	4b3b      	ldr	r3, [pc, #236]	; (1bb0 <usb_d_ep_transfer+0x11c>)
    1ac2:	189b      	adds	r3, r3, r2
    1ac4:	789a      	ldrb	r2, [r3, #2]
    1ac6:	2317      	movs	r3, #23
    1ac8:	446b      	add	r3, sp
    1aca:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	2b01      	cmp	r3, #1
    1ad0:	d010      	beq.n	1af4 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1ad2:	a804      	add	r0, sp, #16
    1ad4:	4b37      	ldr	r3, [pc, #220]	; (1bb4 <usb_d_ep_transfer+0x120>)
    1ad6:	4798      	blx	r3
		switch (state) {
    1ad8:	2317      	movs	r3, #23
    1ada:	446b      	add	r3, sp
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	b2db      	uxtb	r3, r3
    1ae0:	2b05      	cmp	r3, #5
    1ae2:	d05e      	beq.n	1ba2 <usb_d_ep_transfer+0x10e>
    1ae4:	2b06      	cmp	r3, #6
    1ae6:	d023      	beq.n	1b30 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1ae8:	2001      	movs	r0, #1
		switch (state) {
    1aea:	2b00      	cmp	r3, #0
    1aec:	d13c      	bne.n	1b68 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1aee:	2013      	movs	r0, #19
    1af0:	4240      	negs	r0, r0
    1af2:	e039      	b.n	1b68 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1af4:	4b2e      	ldr	r3, [pc, #184]	; (1bb0 <usb_d_ep_transfer+0x11c>)
    1af6:	4699      	mov	r9, r3
    1af8:	016b      	lsls	r3, r5, #5
    1afa:	469a      	mov	sl, r3
    1afc:	464b      	mov	r3, r9
    1afe:	4453      	add	r3, sl
    1b00:	2203      	movs	r2, #3
    1b02:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1b04:	a804      	add	r0, sp, #16
    1b06:	4b2b      	ldr	r3, [pc, #172]	; (1bb4 <usb_d_ep_transfer+0x120>)
    1b08:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b0a:	464b      	mov	r3, r9
    1b0c:	4652      	mov	r2, sl
    1b0e:	5cd3      	ldrb	r3, [r2, r3]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d010      	beq.n	1b36 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b14:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1b16:	1e72      	subs	r2, r6, #1
    1b18:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b1a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1b1c:	6822      	ldr	r2, [r4, #0]
    1b1e:	9201      	str	r2, [sp, #4]
    1b20:	4642      	mov	r2, r8
    1b22:	9202      	str	r2, [sp, #8]
    1b24:	b27f      	sxtb	r7, r7
    1b26:	2f00      	cmp	r7, #0
    1b28:	db17      	blt.n	1b5a <usb_d_ep_transfer+0xc6>
    1b2a:	220f      	movs	r2, #15
    1b2c:	4013      	ands	r3, r2
    1b2e:	e016      	b.n	1b5e <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1b30:	2010      	movs	r0, #16
    1b32:	4240      	negs	r0, r0
    1b34:	e018      	b.n	1b68 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1b36:	016b      	lsls	r3, r5, #5
    1b38:	4a1d      	ldr	r2, [pc, #116]	; (1bb0 <usb_d_ep_transfer+0x11c>)
    1b3a:	18d2      	adds	r2, r2, r3
    1b3c:	7cd1      	ldrb	r1, [r2, #19]
    1b3e:	0209      	lsls	r1, r1, #8
    1b40:	7c93      	ldrb	r3, [r2, #18]
    1b42:	185b      	adds	r3, r3, r1
    1b44:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1b46:	2b00      	cmp	r3, #0
    1b48:	d114      	bne.n	1b74 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1b4a:	2304      	movs	r3, #4
    1b4c:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1b4e:	2200      	movs	r2, #0
			zlp                 = true;
    1b50:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b52:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1b54:	6821      	ldr	r1, [r4, #0]
    1b56:	9101      	str	r1, [sp, #4]
    1b58:	9202      	str	r2, [sp, #8]
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	4313      	orrs	r3, r2
    1b5e:	a801      	add	r0, sp, #4
    1b60:	7203      	strb	r3, [r0, #8]
    1b62:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1b64:	4b14      	ldr	r3, [pc, #80]	; (1bb8 <usb_d_ep_transfer+0x124>)
    1b66:	4798      	blx	r3
	return rc;
}
    1b68:	b006      	add	sp, #24
    1b6a:	bc1c      	pop	{r2, r3, r4}
    1b6c:	4690      	mov	r8, r2
    1b6e:	4699      	mov	r9, r3
    1b70:	46a2      	mov	sl, r4
    1b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b74:	4642      	mov	r2, r8
    1b76:	429a      	cmp	r2, r3
    1b78:	d900      	bls.n	1b7c <usb_d_ep_transfer+0xe8>
    1b7a:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1b7c:	016d      	lsls	r5, r5, #5
    1b7e:	490c      	ldr	r1, [pc, #48]	; (1bb0 <usb_d_ep_transfer+0x11c>)
    1b80:	194d      	adds	r5, r1, r5
			if (dir) {
    1b82:	7b29      	ldrb	r1, [r5, #12]
    1b84:	297f      	cmp	r1, #127	; 0x7f
    1b86:	d805      	bhi.n	1b94 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b88:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1b8a:	6821      	ldr	r1, [r4, #0]
    1b8c:	9101      	str	r1, [sp, #4]
    1b8e:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b90:	2600      	movs	r6, #0
    1b92:	e7ca      	b.n	1b2a <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    1b94:	429a      	cmp	r2, r3
    1b96:	41b6      	sbcs	r6, r6
    1b98:	4276      	negs	r6, r6
    1b9a:	e7da      	b.n	1b52 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    1b9c:	2012      	movs	r0, #18
    1b9e:	4240      	negs	r0, r0
    1ba0:	e7e2      	b.n	1b68 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    1ba2:	2002      	movs	r0, #2
    1ba4:	e7e0      	b.n	1b68 <usb_d_ep_transfer+0xd4>
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	000016b1 	.word	0x000016b1
    1bac:	0000136d 	.word	0x0000136d
    1bb0:	200004f8 	.word	0x200004f8
    1bb4:	0000137b 	.word	0x0000137b
    1bb8:	00002fc9 	.word	0x00002fc9

00001bbc <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    1bbc:	b570      	push	{r4, r5, r6, lr}
    1bbe:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1bc0:	4b07      	ldr	r3, [pc, #28]	; (1be0 <usb_d_ep_abort+0x24>)
    1bc2:	4798      	blx	r3
    1bc4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1bc6:	db09      	blt.n	1bdc <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    1bc8:	0028      	movs	r0, r5
    1bca:	4b06      	ldr	r3, [pc, #24]	; (1be4 <usb_d_ep_abort+0x28>)
    1bcc:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1bce:	0164      	lsls	r4, r4, #5
    1bd0:	4b05      	ldr	r3, [pc, #20]	; (1be8 <usb_d_ep_abort+0x2c>)
    1bd2:	191c      	adds	r4, r3, r4
    1bd4:	2301      	movs	r3, #1
    1bd6:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    1bd8:	3303      	adds	r3, #3
    1bda:	70e3      	strb	r3, [r4, #3]
}
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	000016b1 	.word	0x000016b1
    1be4:	000031d9 	.word	0x000031d9
    1be8:	200004f8 	.word	0x200004f8

00001bec <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1bec:	b570      	push	{r4, r5, r6, lr}
    1bee:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1bf0:	2900      	cmp	r1, #0
    1bf2:	d005      	beq.n	1c00 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1bf4:	2901      	cmp	r1, #1
    1bf6:	d021      	beq.n	1c3c <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1bf8:	2102      	movs	r1, #2
    1bfa:	4b13      	ldr	r3, [pc, #76]	; (1c48 <usb_d_ep_halt+0x5c>)
    1bfc:	4798      	blx	r3
	}
}
    1bfe:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c00:	4b12      	ldr	r3, [pc, #72]	; (1c4c <usb_d_ep_halt+0x60>)
    1c02:	4798      	blx	r3
    1c04:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    1c06:	db1c      	blt.n	1c42 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1c08:	2102      	movs	r1, #2
    1c0a:	0020      	movs	r0, r4
    1c0c:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <usb_d_ep_halt+0x5c>)
    1c0e:	4798      	blx	r3
    1c10:	2800      	cmp	r0, #0
    1c12:	d0f4      	beq.n	1bfe <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c14:	2100      	movs	r1, #0
    1c16:	0020      	movs	r0, r4
    1c18:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <usb_d_ep_halt+0x5c>)
    1c1a:	4798      	blx	r3
		if (rc < 0) {
    1c1c:	2800      	cmp	r0, #0
    1c1e:	dbee      	blt.n	1bfe <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1c20:	016d      	lsls	r5, r5, #5
    1c22:	4b0b      	ldr	r3, [pc, #44]	; (1c50 <usb_d_ep_halt+0x64>)
    1c24:	195d      	adds	r5, r3, r5
    1c26:	2301      	movs	r3, #1
    1c28:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1c2a:	3302      	adds	r3, #2
    1c2c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1c2e:	69eb      	ldr	r3, [r5, #28]
    1c30:	2200      	movs	r2, #0
    1c32:	2103      	movs	r1, #3
    1c34:	0020      	movs	r0, r4
    1c36:	4798      	blx	r3
	return ERR_NONE;
    1c38:	2000      	movs	r0, #0
    1c3a:	e7e0      	b.n	1bfe <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1c3c:	4b02      	ldr	r3, [pc, #8]	; (1c48 <usb_d_ep_halt+0x5c>)
    1c3e:	4798      	blx	r3
    1c40:	e7dd      	b.n	1bfe <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1c42:	2012      	movs	r0, #18
    1c44:	4240      	negs	r0, r0
    1c46:	e7da      	b.n	1bfe <usb_d_ep_halt+0x12>
    1c48:	00002df5 	.word	0x00002df5
    1c4c:	000016b1 	.word	0x000016b1
    1c50:	200004f8 	.word	0x200004f8

00001c54 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
    1c56:	000d      	movs	r5, r1
    1c58:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c5a:	4b0f      	ldr	r3, [pc, #60]	; (1c98 <usb_d_ep_register_callback+0x44>)
    1c5c:	4798      	blx	r3
    1c5e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1c60:	1e22      	subs	r2, r4, #0
    1c62:	d008      	beq.n	1c76 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1c64:	2b00      	cmp	r3, #0
    1c66:	db05      	blt.n	1c74 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    1c68:	2d01      	cmp	r5, #1
    1c6a:	d00b      	beq.n	1c84 <usb_d_ep_register_callback+0x30>
    1c6c:	2d00      	cmp	r5, #0
    1c6e:	d004      	beq.n	1c7a <usb_d_ep_register_callback+0x26>
    1c70:	2d02      	cmp	r5, #2
    1c72:	d00c      	beq.n	1c8e <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    1c74:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1c76:	4a09      	ldr	r2, [pc, #36]	; (1c9c <usb_d_ep_register_callback+0x48>)
    1c78:	e7f4      	b.n	1c64 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1c7a:	0140      	lsls	r0, r0, #5
    1c7c:	4b08      	ldr	r3, [pc, #32]	; (1ca0 <usb_d_ep_register_callback+0x4c>)
    1c7e:	1818      	adds	r0, r3, r0
    1c80:	6142      	str	r2, [r0, #20]
		break;
    1c82:	e7f7      	b.n	1c74 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1c84:	0140      	lsls	r0, r0, #5
    1c86:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <usb_d_ep_register_callback+0x4c>)
    1c88:	1818      	adds	r0, r3, r0
    1c8a:	6182      	str	r2, [r0, #24]
		break;
    1c8c:	e7f2      	b.n	1c74 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1c8e:	0140      	lsls	r0, r0, #5
    1c90:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <usb_d_ep_register_callback+0x4c>)
    1c92:	1818      	adds	r0, r3, r0
    1c94:	61c2      	str	r2, [r0, #28]
		break;
    1c96:	e7ed      	b.n	1c74 <usb_d_ep_register_callback+0x20>
    1c98:	000016b1 	.word	0x000016b1
    1c9c:	000016f5 	.word	0x000016f5
    1ca0:	200004f8 	.word	0x200004f8

00001ca4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d100      	bne.n	1caa <assert+0x6>
		__asm("BKPT #0");
    1ca8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1caa:	4770      	bx	lr

00001cac <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1cac:	6803      	ldr	r3, [r0, #0]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d00a      	beq.n	1cc8 <is_list_element+0x1c>
		if (it == element) {
    1cb2:	428b      	cmp	r3, r1
    1cb4:	d00a      	beq.n	1ccc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d003      	beq.n	1cc4 <is_list_element+0x18>
		if (it == element) {
    1cbc:	4299      	cmp	r1, r3
    1cbe:	d1fa      	bne.n	1cb6 <is_list_element+0xa>
			return true;
    1cc0:	2001      	movs	r0, #1
    1cc2:	e000      	b.n	1cc6 <is_list_element+0x1a>
		}
	}

	return false;
    1cc4:	2000      	movs	r0, #0
}
    1cc6:	4770      	bx	lr
	return false;
    1cc8:	2000      	movs	r0, #0
    1cca:	e7fc      	b.n	1cc6 <is_list_element+0x1a>
			return true;
    1ccc:	2001      	movs	r0, #1
    1cce:	e7fa      	b.n	1cc6 <is_list_element+0x1a>

00001cd0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1cd0:	b570      	push	{r4, r5, r6, lr}
    1cd2:	0004      	movs	r4, r0
    1cd4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    1cd6:	4b06      	ldr	r3, [pc, #24]	; (1cf0 <list_insert_as_head+0x20>)
    1cd8:	4798      	blx	r3
    1cda:	2301      	movs	r3, #1
    1cdc:	4058      	eors	r0, r3
    1cde:	b2c0      	uxtb	r0, r0
    1ce0:	2239      	movs	r2, #57	; 0x39
    1ce2:	4904      	ldr	r1, [pc, #16]	; (1cf4 <list_insert_as_head+0x24>)
    1ce4:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <list_insert_as_head+0x28>)
    1ce6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1ce8:	6823      	ldr	r3, [r4, #0]
    1cea:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1cec:	6025      	str	r5, [r4, #0]
}
    1cee:	bd70      	pop	{r4, r5, r6, pc}
    1cf0:	00001cad 	.word	0x00001cad
    1cf4:	000057e8 	.word	0x000057e8
    1cf8:	00001ca5 	.word	0x00001ca5

00001cfc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1cfc:	6803      	ldr	r3, [r0, #0]
    1cfe:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1d00:	6001      	str	r1, [r0, #0]
}
    1d02:	4770      	bx	lr

00001d04 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	0005      	movs	r5, r0
    1d08:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    1d0a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1d0c:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <list_insert_at_end+0x34>)
    1d0e:	4798      	blx	r3
    1d10:	2301      	movs	r3, #1
    1d12:	4058      	eors	r0, r3
    1d14:	b2c0      	uxtb	r0, r0
    1d16:	224f      	movs	r2, #79	; 0x4f
    1d18:	4908      	ldr	r1, [pc, #32]	; (1d3c <list_insert_at_end+0x38>)
    1d1a:	4b09      	ldr	r3, [pc, #36]	; (1d40 <list_insert_at_end+0x3c>)
    1d1c:	4798      	blx	r3

	if (!list->head) {
    1d1e:	682b      	ldr	r3, [r5, #0]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d103      	bne.n	1d2c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1d24:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1d26:	6033      	str	r3, [r6, #0]
		return;
    1d28:	e005      	b.n	1d36 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    1d2a:	001c      	movs	r4, r3
	while (it->next) {
    1d2c:	6823      	ldr	r3, [r4, #0]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d1fb      	bne.n	1d2a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    1d32:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1d34:	6033      	str	r3, [r6, #0]
}
    1d36:	bd70      	pop	{r4, r5, r6, pc}
    1d38:	00001cad 	.word	0x00001cad
    1d3c:	000057e8 	.word	0x000057e8
    1d40:	00001ca5 	.word	0x00001ca5

00001d44 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1d44:	6803      	ldr	r3, [r0, #0]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d001      	beq.n	1d4e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1d4a:	681a      	ldr	r2, [r3, #0]
    1d4c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1d4e:	0018      	movs	r0, r3
    1d50:	4770      	bx	lr

00001d52 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    1d52:	2900      	cmp	r1, #0
    1d54:	d019      	beq.n	1d8a <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
    1d56:	6802      	ldr	r2, [r0, #0]
    1d58:	4291      	cmp	r1, r2
    1d5a:	d00b      	beq.n	1d74 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    1d5c:	2a00      	cmp	r2, #0
    1d5e:	d016      	beq.n	1d8e <list_delete_element+0x3c>
    1d60:	6813      	ldr	r3, [r2, #0]
    1d62:	4299      	cmp	r1, r3
    1d64:	d00a      	beq.n	1d7c <list_delete_element+0x2a>
    1d66:	2b00      	cmp	r3, #0
    1d68:	d00d      	beq.n	1d86 <list_delete_element+0x34>
    1d6a:	681a      	ldr	r2, [r3, #0]
    1d6c:	4291      	cmp	r1, r2
    1d6e:	d006      	beq.n	1d7e <list_delete_element+0x2c>
    1d70:	0013      	movs	r3, r2
    1d72:	e7f8      	b.n	1d66 <list_delete_element+0x14>
		list->head = list->head->next;
    1d74:	6813      	ldr	r3, [r2, #0]
    1d76:	6003      	str	r3, [r0, #0]
		return true;
    1d78:	2001      	movs	r0, #1
    1d7a:	e003      	b.n	1d84 <list_delete_element+0x32>
		while (it && it->next != element) {
    1d7c:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    1d7e:	680a      	ldr	r2, [r1, #0]
    1d80:	601a      	str	r2, [r3, #0]
			return true;
    1d82:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1d84:	4770      	bx	lr
	return false;
    1d86:	2000      	movs	r0, #0
    1d88:	e7fc      	b.n	1d84 <list_delete_element+0x32>
		return false;
    1d8a:	2000      	movs	r0, #0
    1d8c:	e7fa      	b.n	1d84 <list_delete_element+0x32>
	return false;
    1d8e:	2000      	movs	r0, #0
    1d90:	e7f8      	b.n	1d84 <list_delete_element+0x32>
	...

00001d94 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1d94:	b243      	sxtb	r3, r0
    1d96:	2b00      	cmp	r3, #0
    1d98:	db07      	blt.n	1daa <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d9a:	231f      	movs	r3, #31
    1d9c:	4018      	ands	r0, r3
    1d9e:	3b1e      	subs	r3, #30
    1da0:	4083      	lsls	r3, r0
    1da2:	2280      	movs	r2, #128	; 0x80
    1da4:	0052      	lsls	r2, r2, #1
    1da6:	4901      	ldr	r1, [pc, #4]	; (1dac <_irq_set+0x18>)
    1da8:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    1daa:	4770      	bx	lr
    1dac:	e000e100 	.word	0xe000e100

00001db0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1db0:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    1db2:	0103      	lsls	r3, r0, #4
    1db4:	1a1b      	subs	r3, r3, r0
    1db6:	015b      	lsls	r3, r3, #5
    1db8:	1a18      	subs	r0, r3, r0
    1dba:	3002      	adds	r0, #2
    1dbc:	2103      	movs	r1, #3
    1dbe:	4b02      	ldr	r3, [pc, #8]	; (1dc8 <_get_cycles_for_ms+0x18>)
    1dc0:	4798      	blx	r3
    1dc2:	2364      	movs	r3, #100	; 0x64
    1dc4:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1dc6:	bd10      	pop	{r4, pc}
    1dc8:	000046c9 	.word	0x000046c9

00001dcc <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1dcc:	3901      	subs	r1, #1
    1dce:	d8fd      	bhi.n	1dcc <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1dd0:	4770      	bx	lr
	...

00001dd4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1dd4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1dd6:	4a08      	ldr	r2, [pc, #32]	; (1df8 <_init_chip+0x24>)
    1dd8:	6853      	ldr	r3, [r2, #4]
    1dda:	2108      	movs	r1, #8
    1ddc:	430b      	orrs	r3, r1
    1dde:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1de0:	4b06      	ldr	r3, [pc, #24]	; (1dfc <_init_chip+0x28>)
    1de2:	4798      	blx	r3
	_sysctrl_init_sources();
    1de4:	4b06      	ldr	r3, [pc, #24]	; (1e00 <_init_chip+0x2c>)
    1de6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1de8:	2040      	movs	r0, #64	; 0x40
    1dea:	4c06      	ldr	r4, [pc, #24]	; (1e04 <_init_chip+0x30>)
    1dec:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    1dee:	4b06      	ldr	r3, [pc, #24]	; (1e08 <_init_chip+0x34>)
    1df0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1df2:	20bf      	movs	r0, #191	; 0xbf
    1df4:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1df6:	bd10      	pop	{r4, pc}
    1df8:	41004000 	.word	0x41004000
    1dfc:	00001ea5 	.word	0x00001ea5
    1e00:	00001ec5 	.word	0x00001ec5
    1e04:	00001e0d 	.word	0x00001e0d
    1e08:	00001f09 	.word	0x00001f09

00001e0c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1e0c:	07c3      	lsls	r3, r0, #31
    1e0e:	d509      	bpl.n	1e24 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1e10:	4b1c      	ldr	r3, [pc, #112]	; (1e84 <_gclk_init_generators_by_fref+0x78>)
    1e12:	2280      	movs	r2, #128	; 0x80
    1e14:	0052      	lsls	r2, r2, #1
    1e16:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1e18:	4a1b      	ldr	r2, [pc, #108]	; (1e88 <_gclk_init_generators_by_fref+0x7c>)
    1e1a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1e1c:	001a      	movs	r2, r3
    1e1e:	7853      	ldrb	r3, [r2, #1]
    1e20:	09db      	lsrs	r3, r3, #7
    1e22:	d1fc      	bne.n	1e1e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1e24:	0783      	lsls	r3, r0, #30
    1e26:	d509      	bpl.n	1e3c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    1e28:	4b16      	ldr	r3, [pc, #88]	; (1e84 <_gclk_init_generators_by_fref+0x78>)
    1e2a:	2202      	movs	r2, #2
    1e2c:	32ff      	adds	r2, #255	; 0xff
    1e2e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1e30:	4a16      	ldr	r2, [pc, #88]	; (1e8c <_gclk_init_generators_by_fref+0x80>)
    1e32:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1e34:	001a      	movs	r2, r3
    1e36:	7853      	ldrb	r3, [r2, #1]
    1e38:	09db      	lsrs	r3, r3, #7
    1e3a:	d1fc      	bne.n	1e36 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1e3c:	0703      	lsls	r3, r0, #28
    1e3e:	d508      	bpl.n	1e52 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    1e40:	4b10      	ldr	r3, [pc, #64]	; (1e84 <_gclk_init_generators_by_fref+0x78>)
    1e42:	4a13      	ldr	r2, [pc, #76]	; (1e90 <_gclk_init_generators_by_fref+0x84>)
    1e44:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1e46:	4a13      	ldr	r2, [pc, #76]	; (1e94 <_gclk_init_generators_by_fref+0x88>)
    1e48:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1e4a:	001a      	movs	r2, r3
    1e4c:	7853      	ldrb	r3, [r2, #1]
    1e4e:	09db      	lsrs	r3, r3, #7
    1e50:	d1fc      	bne.n	1e4c <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    1e52:	0643      	lsls	r3, r0, #25
    1e54:	d509      	bpl.n	1e6a <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    1e56:	4b0b      	ldr	r3, [pc, #44]	; (1e84 <_gclk_init_generators_by_fref+0x78>)
    1e58:	2283      	movs	r2, #131	; 0x83
    1e5a:	0052      	lsls	r2, r2, #1
    1e5c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1e5e:	4a0e      	ldr	r2, [pc, #56]	; (1e98 <_gclk_init_generators_by_fref+0x8c>)
    1e60:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1e62:	001a      	movs	r2, r3
    1e64:	7853      	ldrb	r3, [r2, #1]
    1e66:	09db      	lsrs	r3, r3, #7
    1e68:	d1fc      	bne.n	1e64 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    1e6a:	0603      	lsls	r3, r0, #24
    1e6c:	d508      	bpl.n	1e80 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
    1e6e:	4b05      	ldr	r3, [pc, #20]	; (1e84 <_gclk_init_generators_by_fref+0x78>)
    1e70:	4a0a      	ldr	r2, [pc, #40]	; (1e9c <_gclk_init_generators_by_fref+0x90>)
    1e72:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1e74:	4a0a      	ldr	r2, [pc, #40]	; (1ea0 <_gclk_init_generators_by_fref+0x94>)
    1e76:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1e78:	001a      	movs	r2, r3
    1e7a:	7853      	ldrb	r3, [r2, #1]
    1e7c:	09db      	lsrs	r3, r3, #7
    1e7e:	d1fc      	bne.n	1e7a <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1e80:	4770      	bx	lr
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	40000c00 	.word	0x40000c00
    1e88:	00090800 	.word	0x00090800
    1e8c:	00290701 	.word	0x00290701
    1e90:	00000803 	.word	0x00000803
    1e94:	00010603 	.word	0x00010603
    1e98:	00090306 	.word	0x00090306
    1e9c:	00002007 	.word	0x00002007
    1ea0:	00090307 	.word	0x00090307

00001ea4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1ea4:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <_pm_init+0x1c>)
    1ea6:	7a1a      	ldrb	r2, [r3, #8]
    1ea8:	b2d2      	uxtb	r2, r2
    1eaa:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1eac:	7a5a      	ldrb	r2, [r3, #9]
    1eae:	b2d2      	uxtb	r2, r2
    1eb0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1eb2:	7a9a      	ldrb	r2, [r3, #10]
    1eb4:	b2d2      	uxtb	r2, r2
    1eb6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1eb8:	7ada      	ldrb	r2, [r3, #11]
    1eba:	b2d2      	uxtb	r2, r2
    1ebc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1ebe:	4770      	bx	lr
    1ec0:	40000400 	.word	0x40000400

00001ec4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1ec4:	4b0e      	ldr	r3, [pc, #56]	; (1f00 <_sysctrl_init_sources+0x3c>)
    1ec6:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1ec8:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1eca:	480e      	ldr	r0, [pc, #56]	; (1f04 <_sysctrl_init_sources+0x40>)
    1ecc:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1ece:	0f92      	lsrs	r2, r2, #30
    1ed0:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1ed2:	2002      	movs	r0, #2
    1ed4:	4302      	orrs	r2, r0
    1ed6:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1ed8:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1eda:	699a      	ldr	r2, [r3, #24]
    1edc:	4302      	orrs	r2, r0
    1ede:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1ee0:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1ee2:	211f      	movs	r1, #31
    1ee4:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1ee6:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1ee8:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1eea:	2208      	movs	r2, #8
    1eec:	68cb      	ldr	r3, [r1, #12]
    1eee:	421a      	tst	r2, r3
    1ef0:	d0fc      	beq.n	1eec <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1ef2:	4a03      	ldr	r2, [pc, #12]	; (1f00 <_sysctrl_init_sources+0x3c>)
    1ef4:	6a13      	ldr	r3, [r2, #32]
    1ef6:	2180      	movs	r1, #128	; 0x80
    1ef8:	430b      	orrs	r3, r1
    1efa:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1efc:	4770      	bx	lr
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	40000800 	.word	0x40000800
    1f04:	0fff0000 	.word	0x0fff0000

00001f08 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    1f08:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1f0a:	2202      	movs	r2, #2
    1f0c:	4b28      	ldr	r3, [pc, #160]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
    1f0e:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1f10:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1f12:	320e      	adds	r2, #14
    1f14:	68cb      	ldr	r3, [r1, #12]
    1f16:	421a      	tst	r2, r3
    1f18:	d0fc      	beq.n	1f14 <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1f1a:	4a26      	ldr	r2, [pc, #152]	; (1fb4 <_sysctrl_init_referenced_generators+0xac>)
    1f1c:	4b24      	ldr	r3, [pc, #144]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
    1f1e:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1f20:	4b25      	ldr	r3, [pc, #148]	; (1fb8 <_sysctrl_init_referenced_generators+0xb0>)
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	0e9b      	lsrs	r3, r3, #26
    1f26:	2b3f      	cmp	r3, #63	; 0x3f
    1f28:	d038      	beq.n	1f9c <_sysctrl_init_referenced_generators+0x94>
    1f2a:	029b      	lsls	r3, r3, #10
    1f2c:	2280      	movs	r2, #128	; 0x80
    1f2e:	0092      	lsls	r2, r2, #2
    1f30:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1f32:	4b1f      	ldr	r3, [pc, #124]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
    1f34:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1f36:	2293      	movs	r2, #147	; 0x93
    1f38:	0052      	lsls	r2, r2, #1
    1f3a:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    1f3c:	491f      	ldr	r1, [pc, #124]	; (1fbc <_sysctrl_init_referenced_generators+0xb4>)
    1f3e:	4a20      	ldr	r2, [pc, #128]	; (1fc0 <_sysctrl_init_referenced_generators+0xb8>)
    1f40:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    1f42:	2102      	movs	r1, #2
    1f44:	2244      	movs	r2, #68	; 0x44
    1f46:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    1f48:	4a1e      	ldr	r2, [pc, #120]	; (1fc4 <_sysctrl_init_referenced_generators+0xbc>)
    1f4a:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1f4c:	2220      	movs	r2, #32
    1f4e:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1f50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1f52:	075b      	lsls	r3, r3, #29
    1f54:	d525      	bpl.n	1fa2 <_sysctrl_init_referenced_generators+0x9a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1f56:	4916      	ldr	r1, [pc, #88]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
	tmp &= mask;
    1f58:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1f5a:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1f5c:	421a      	tst	r2, r3
    1f5e:	d0fc      	beq.n	1f5a <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1f60:	4a13      	ldr	r2, [pc, #76]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
    1f62:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    1f64:	2004      	movs	r0, #4
    1f66:	2401      	movs	r4, #1
    1f68:	2502      	movs	r5, #2
    1f6a:	5cd1      	ldrb	r1, [r2, r3]
    1f6c:	4201      	tst	r1, r0
    1f6e:	d105      	bne.n	1f7c <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    1f70:	5cd1      	ldrb	r1, [r2, r3]
    1f72:	4221      	tst	r1, r4
    1f74:	d102      	bne.n	1f7c <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    1f76:	5cd1      	ldrb	r1, [r2, r3]
    1f78:	4229      	tst	r1, r5
    1f7a:	d0f6      	beq.n	1f6a <_sysctrl_init_referenced_generators+0x62>
	((Sysctrl *)hw)->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ONDEMAND;
    1f7c:	490c      	ldr	r1, [pc, #48]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
    1f7e:	2244      	movs	r2, #68	; 0x44
    1f80:	5c8b      	ldrb	r3, [r1, r2]
    1f82:	2080      	movs	r0, #128	; 0x80
    1f84:	4303      	orrs	r3, r0
    1f86:	548b      	strb	r3, [r1, r2]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1f88:	4a0d      	ldr	r2, [pc, #52]	; (1fc0 <_sysctrl_init_referenced_generators+0xb8>)
    1f8a:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1f8c:	09db      	lsrs	r3, r3, #7
    1f8e:	d1fc      	bne.n	1f8a <_sysctrl_init_referenced_generators+0x82>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1f90:	4a07      	ldr	r2, [pc, #28]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
    1f92:	6993      	ldr	r3, [r2, #24]
    1f94:	2102      	movs	r1, #2
    1f96:	438b      	bics	r3, r1
    1f98:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1f9a:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1f9c:	22fc      	movs	r2, #252	; 0xfc
    1f9e:	01d2      	lsls	r2, r2, #7
    1fa0:	e7c7      	b.n	1f32 <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1fa2:	4903      	ldr	r1, [pc, #12]	; (1fb0 <_sysctrl_init_referenced_generators+0xa8>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1fa4:	2210      	movs	r2, #16
    1fa6:	68cb      	ldr	r3, [r1, #12]
    1fa8:	421a      	tst	r2, r3
    1faa:	d0fc      	beq.n	1fa6 <_sysctrl_init_referenced_generators+0x9e>
    1fac:	e7d8      	b.n	1f60 <_sysctrl_init_referenced_generators+0x58>
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	40000800 	.word	0x40000800
    1fb4:	0401bb80 	.word	0x0401bb80
    1fb8:	00806024 	.word	0x00806024
    1fbc:	00004601 	.word	0x00004601
    1fc0:	40000c00 	.word	0x40000c00
    1fc4:	000d05b7 	.word	0x000d05b7

00001fc8 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    1fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fca:	0007      	movs	r7, r0
    1fcc:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1fce:	4b3c      	ldr	r3, [pc, #240]	; (20c0 <STACK_SIZE+0xc0>)
    1fd0:	18cd      	adds	r5, r1, r3
    1fd2:	0aad      	lsrs	r5, r5, #10
    1fd4:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    1fd6:	2d00      	cmp	r5, #0
    1fd8:	d051      	beq.n	207e <STACK_SIZE+0x7e>
			return i;
		}
	}

	ASSERT(false);
    1fda:	229f      	movs	r2, #159	; 0x9f
    1fdc:	0052      	lsls	r2, r2, #1
    1fde:	4939      	ldr	r1, [pc, #228]	; (20c4 <STACK_SIZE+0xc4>)
    1fe0:	2000      	movs	r0, #0
    1fe2:	4b39      	ldr	r3, [pc, #228]	; (20c8 <STACK_SIZE+0xc8>)
    1fe4:	4798      	blx	r3
	return -1;
    1fe6:	2601      	movs	r6, #1
    1fe8:	4276      	negs	r6, r6
	device->hw = hw;
    1fea:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1fec:	228b      	movs	r2, #139	; 0x8b
    1fee:	4935      	ldr	r1, [pc, #212]	; (20c4 <STACK_SIZE+0xc4>)
    1ff0:	2001      	movs	r0, #1
    1ff2:	4b35      	ldr	r3, [pc, #212]	; (20c8 <STACK_SIZE+0xc8>)
    1ff4:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1ff6:	7be3      	ldrb	r3, [r4, #15]
    1ff8:	09db      	lsrs	r3, r3, #7
    1ffa:	d1fc      	bne.n	1ff6 <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1ffc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1ffe:	079b      	lsls	r3, r3, #30
    2000:	d504      	bpl.n	200c <STACK_SIZE+0xc>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2002:	2300      	movs	r3, #0
    2004:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2006:	7be3      	ldrb	r3, [r4, #15]
    2008:	09db      	lsrs	r3, r3, #7
    200a:	d1fc      	bne.n	2006 <STACK_SIZE+0x6>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    200c:	2301      	movs	r3, #1
    200e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2010:	7be3      	ldrb	r3, [r4, #15]
    2012:	09db      	lsrs	r3, r3, #7
    2014:	d1fc      	bne.n	2010 <STACK_SIZE+0x10>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2016:	00b3      	lsls	r3, r6, #2
    2018:	199b      	adds	r3, r3, r6
    201a:	009a      	lsls	r2, r3, #2
    201c:	4b2b      	ldr	r3, [pc, #172]	; (20cc <STACK_SIZE+0xcc>)
    201e:	189b      	adds	r3, r3, r2
    2020:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2022:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2024:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2026:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2028:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    202a:	8163      	strh	r3, [r4, #10]
    202c:	230c      	movs	r3, #12
    202e:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2030:	2b08      	cmp	r3, #8
    2032:	d026      	beq.n	2082 <STACK_SIZE+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2034:	2b00      	cmp	r3, #0
    2036:	d12e      	bne.n	2096 <STACK_SIZE+0x96>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2038:	00b3      	lsls	r3, r6, #2
    203a:	199b      	adds	r3, r3, r6
    203c:	009b      	lsls	r3, r3, #2
    203e:	4a23      	ldr	r2, [pc, #140]	; (20cc <STACK_SIZE+0xcc>)
    2040:	18d3      	adds	r3, r2, r3
    2042:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2044:	8323      	strh	r3, [r4, #24]
    2046:	2300      	movs	r3, #0
    2048:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    204a:	2301      	movs	r3, #1
    204c:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    204e:	4b20      	ldr	r3, [pc, #128]	; (20d0 <STACK_SIZE+0xd0>)
    2050:	429c      	cmp	r4, r3
    2052:	d031      	beq.n	20b8 <STACK_SIZE+0xb8>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2054:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    2056:	b2eb      	uxtb	r3, r5
    2058:	062a      	lsls	r2, r5, #24
    205a:	d40e      	bmi.n	207a <STACK_SIZE+0x7a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    205c:	221f      	movs	r2, #31
    205e:	401a      	ands	r2, r3
    2060:	2301      	movs	r3, #1
    2062:	4093      	lsls	r3, r2
    2064:	4a1b      	ldr	r2, [pc, #108]	; (20d4 <STACK_SIZE+0xd4>)
    2066:	2180      	movs	r1, #128	; 0x80
    2068:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    206a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    206e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2072:	3101      	adds	r1, #1
    2074:	31ff      	adds	r1, #255	; 0xff
    2076:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2078:	6013      	str	r3, [r2, #0]
}
    207a:	2000      	movs	r0, #0
    207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    207e:	2600      	movs	r6, #0
    2080:	e7b3      	b.n	1fea <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2082:	00b3      	lsls	r3, r6, #2
    2084:	199e      	adds	r6, r3, r6
    2086:	00b6      	lsls	r6, r6, #2
    2088:	4b10      	ldr	r3, [pc, #64]	; (20cc <STACK_SIZE+0xcc>)
    208a:	199e      	adds	r6, r3, r6
    208c:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    208e:	61a3      	str	r3, [r4, #24]
    2090:	2300      	movs	r3, #0
    2092:	61e3      	str	r3, [r4, #28]
    2094:	e7d9      	b.n	204a <STACK_SIZE+0x4a>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2096:	2b04      	cmp	r3, #4
    2098:	d1d7      	bne.n	204a <STACK_SIZE+0x4a>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    209a:	480c      	ldr	r0, [pc, #48]	; (20cc <STACK_SIZE+0xcc>)
    209c:	00b3      	lsls	r3, r6, #2
    209e:	199a      	adds	r2, r3, r6
    20a0:	0092      	lsls	r2, r2, #2
    20a2:	1882      	adds	r2, r0, r2
    20a4:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    20a6:	7622      	strb	r2, [r4, #24]
    20a8:	2200      	movs	r2, #0
    20aa:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    20ac:	199b      	adds	r3, r3, r6
    20ae:	009b      	lsls	r3, r3, #2
    20b0:	18c3      	adds	r3, r0, r3
    20b2:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    20b4:	7523      	strb	r3, [r4, #20]
    20b6:	e7c8      	b.n	204a <STACK_SIZE+0x4a>
		_tc3_dev = (struct _timer_device *)dev;
    20b8:	4b07      	ldr	r3, [pc, #28]	; (20d8 <STACK_SIZE+0xd8>)
    20ba:	601f      	str	r7, [r3, #0]
    20bc:	e7ca      	b.n	2054 <STACK_SIZE+0x54>
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	bdffd400 	.word	0xbdffd400
    20c4:	0000581c 	.word	0x0000581c
    20c8:	00001ca5 	.word	0x00001ca5
    20cc:	00005808 	.word	0x00005808
    20d0:	42002c00 	.word	0x42002c00
    20d4:	e000e100 	.word	0xe000e100
    20d8:	20000578 	.word	0x20000578

000020dc <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    20dc:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    20de:	8813      	ldrh	r3, [r2, #0]
    20e0:	2102      	movs	r1, #2
    20e2:	430b      	orrs	r3, r1
    20e4:	8013      	strh	r3, [r2, #0]
}
    20e6:	4770      	bx	lr

000020e8 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    20e8:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    20ea:	8813      	ldrh	r3, [r2, #0]
    20ec:	2102      	movs	r1, #2
    20ee:	438b      	bics	r3, r1
    20f0:	8013      	strh	r3, [r2, #0]
}
    20f2:	4770      	bx	lr

000020f4 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    20f4:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    20f6:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    20f8:	0780      	lsls	r0, r0, #30
    20fa:	0fc0      	lsrs	r0, r0, #31
}
    20fc:	4770      	bx	lr

000020fe <_tc_get_timer>:
}
    20fe:	2000      	movs	r0, #0
    2100:	4770      	bx	lr
	...

00002104 <_timer_set_irq>:
{
    2104:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2106:	68c0      	ldr	r0, [r0, #12]
    2108:	4b04      	ldr	r3, [pc, #16]	; (211c <_timer_set_irq+0x18>)
    210a:	469c      	mov	ip, r3
    210c:	4460      	add	r0, ip
    210e:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    2110:	3012      	adds	r0, #18
    2112:	b2c0      	uxtb	r0, r0
    2114:	4b02      	ldr	r3, [pc, #8]	; (2120 <_timer_set_irq+0x1c>)
    2116:	4798      	blx	r3
}
    2118:	bd10      	pop	{r4, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	bdffd400 	.word	0xbdffd400
    2120:	00001d95 	.word	0x00001d95

00002124 <TC3_Handler>:
{
    2124:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    2126:	4b06      	ldr	r3, [pc, #24]	; (2140 <TC3_Handler+0x1c>)
    2128:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    212a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    212c:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    212e:	07d2      	lsls	r2, r2, #31
    2130:	d400      	bmi.n	2134 <TC3_Handler+0x10>
}
    2132:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2134:	2201      	movs	r2, #1
    2136:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    2138:	6803      	ldr	r3, [r0, #0]
    213a:	4798      	blx	r3
}
    213c:	e7f9      	b.n	2132 <TC3_Handler+0xe>
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	20000578 	.word	0x20000578

00002144 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2144:	2000      	movs	r0, #0
    2146:	4770      	bx	lr

00002148 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2148:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    214a:	7c83      	ldrb	r3, [r0, #18]
    214c:	220f      	movs	r2, #15
    214e:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2150:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    2152:	3a08      	subs	r2, #8
    2154:	400a      	ands	r2, r1
    2156:	2a01      	cmp	r2, #1
    2158:	d00b      	beq.n	2172 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    215a:	015a      	lsls	r2, r3, #5
    215c:	491a      	ldr	r1, [pc, #104]	; (21c8 <_usb_d_dev_handle_setup+0x80>)
    215e:	468c      	mov	ip, r1
    2160:	4462      	add	r2, ip
    2162:	2110      	movs	r1, #16
    2164:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2166:	015b      	lsls	r3, r3, #5
    2168:	4a18      	ldr	r2, [pc, #96]	; (21cc <_usb_d_dev_handle_setup+0x84>)
    216a:	4694      	mov	ip, r2
    216c:	4463      	add	r3, ip
    216e:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    2170:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    2172:	064a      	lsls	r2, r1, #25
    2174:	d50e      	bpl.n	2194 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    2176:	7cc2      	ldrb	r2, [r0, #19]
    2178:	2140      	movs	r1, #64	; 0x40
    217a:	438a      	bics	r2, r1
    217c:	74c2      	strb	r2, [r0, #19]
    217e:	015a      	lsls	r2, r3, #5
    2180:	4c13      	ldr	r4, [pc, #76]	; (21d0 <_usb_d_dev_handle_setup+0x88>)
    2182:	46a4      	mov	ip, r4
    2184:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2186:	2580      	movs	r5, #128	; 0x80
    2188:	2482      	movs	r4, #130	; 0x82
    218a:	0064      	lsls	r4, r4, #1
    218c:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    218e:	2406      	movs	r4, #6
    2190:	34ff      	adds	r4, #255	; 0xff
    2192:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    2194:	7cc2      	ldrb	r2, [r0, #19]
    2196:	2108      	movs	r1, #8
    2198:	438a      	bics	r2, r1
    219a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    219c:	015a      	lsls	r2, r3, #5
    219e:	490d      	ldr	r1, [pc, #52]	; (21d4 <_usb_d_dev_handle_setup+0x8c>)
    21a0:	1889      	adds	r1, r1, r2
    21a2:	2400      	movs	r4, #0
    21a4:	728c      	strb	r4, [r1, #10]
    21a6:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    21a8:	0013      	movs	r3, r2
    21aa:	4907      	ldr	r1, [pc, #28]	; (21c8 <_usb_d_dev_handle_setup+0x80>)
    21ac:	468c      	mov	ip, r1
    21ae:	4463      	add	r3, ip
    21b0:	216f      	movs	r1, #111	; 0x6f
    21b2:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    21b4:	4b05      	ldr	r3, [pc, #20]	; (21cc <_usb_d_dev_handle_setup+0x84>)
    21b6:	469c      	mov	ip, r3
    21b8:	4462      	add	r2, ip
    21ba:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    21bc:	7c80      	ldrb	r0, [r0, #18]
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <_usb_d_dev_handle_setup+0x90>)
    21c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21c2:	4798      	blx	r3
    21c4:	e7d4      	b.n	2170 <_usb_d_dev_handle_setup+0x28>
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	41005100 	.word	0x41005100
    21cc:	41005108 	.word	0x41005108
    21d0:	41005000 	.word	0x41005000
    21d4:	2000057c 	.word	0x2000057c
    21d8:	200005fc 	.word	0x200005fc

000021dc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    21dc:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    21de:	2220      	movs	r2, #32
    21e0:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    21e2:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    21e4:	7c81      	ldrb	r1, [r0, #18]
    21e6:	230f      	movs	r3, #15
    21e8:	400b      	ands	r3, r1
    21ea:	015b      	lsls	r3, r3, #5
    21ec:	4905      	ldr	r1, [pc, #20]	; (2204 <_usb_d_dev_handle_stall+0x28>)
    21ee:	468c      	mov	ip, r1
    21f0:	4463      	add	r3, ip
    21f2:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    21f4:	6882      	ldr	r2, [r0, #8]
    21f6:	7c80      	ldrb	r0, [r0, #18]
    21f8:	4b03      	ldr	r3, [pc, #12]	; (2208 <_usb_d_dev_handle_stall+0x2c>)
    21fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    21fc:	2101      	movs	r1, #1
    21fe:	4798      	blx	r3
}
    2200:	bd10      	pop	{r4, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	41005108 	.word	0x41005108
    2208:	200005fc 	.word	0x200005fc

0000220c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    220c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    220e:	7c83      	ldrb	r3, [r0, #18]
    2210:	2bff      	cmp	r3, #255	; 0xff
    2212:	d002      	beq.n	221a <_usb_d_dev_trans_done+0xe>
    2214:	7cc2      	ldrb	r2, [r0, #19]
    2216:	0652      	lsls	r2, r2, #25
    2218:	d400      	bmi.n	221c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    221a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    221c:	7cc2      	ldrb	r2, [r0, #19]
    221e:	2440      	movs	r4, #64	; 0x40
    2220:	43a2      	bics	r2, r4
    2222:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2224:	6882      	ldr	r2, [r0, #8]
    2226:	4802      	ldr	r0, [pc, #8]	; (2230 <_usb_d_dev_trans_done+0x24>)
    2228:	6b04      	ldr	r4, [r0, #48]	; 0x30
    222a:	0018      	movs	r0, r3
    222c:	47a0      	blx	r4
    222e:	e7f4      	b.n	221a <_usb_d_dev_trans_done+0xe>
    2230:	200005fc 	.word	0x200005fc

00002234 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2234:	b530      	push	{r4, r5, lr}
    2236:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2238:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    223a:	ac01      	add	r4, sp, #4
    223c:	2525      	movs	r5, #37	; 0x25
    223e:	7025      	strb	r5, [r4, #0]
    2240:	3525      	adds	r5, #37	; 0x25
    2242:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2244:	2bff      	cmp	r3, #255	; 0xff
    2246:	d01b      	beq.n	2280 <_usb_d_dev_trans_stop+0x4c>
    2248:	7cc4      	ldrb	r4, [r0, #19]
    224a:	0664      	lsls	r4, r4, #25
    224c:	d518      	bpl.n	2280 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    224e:	240f      	movs	r4, #15
    2250:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    2252:	2900      	cmp	r1, #0
    2254:	d016      	beq.n	2284 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2256:	015c      	lsls	r4, r3, #5
    2258:	4d0e      	ldr	r5, [pc, #56]	; (2294 <_usb_d_dev_trans_stop+0x60>)
    225a:	46ac      	mov	ip, r5
    225c:	4464      	add	r4, ip
    225e:	2580      	movs	r5, #128	; 0x80
    2260:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2262:	ac01      	add	r4, sp, #4
    2264:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2266:	0159      	lsls	r1, r3, #5
    2268:	4d0a      	ldr	r5, [pc, #40]	; (2294 <_usb_d_dev_trans_stop+0x60>)
    226a:	46ac      	mov	ip, r5
    226c:	4461      	add	r1, ip
    226e:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2270:	015b      	lsls	r3, r3, #5
    2272:	4909      	ldr	r1, [pc, #36]	; (2298 <_usb_d_dev_trans_stop+0x64>)
    2274:	468c      	mov	ip, r1
    2276:	4463      	add	r3, ip
    2278:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    227a:	0011      	movs	r1, r2
    227c:	4b07      	ldr	r3, [pc, #28]	; (229c <_usb_d_dev_trans_stop+0x68>)
    227e:	4798      	blx	r3
}
    2280:	b003      	add	sp, #12
    2282:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2284:	015c      	lsls	r4, r3, #5
    2286:	4d03      	ldr	r5, [pc, #12]	; (2294 <_usb_d_dev_trans_stop+0x60>)
    2288:	46ac      	mov	ip, r5
    228a:	4464      	add	r4, ip
    228c:	2540      	movs	r5, #64	; 0x40
    228e:	7165      	strb	r5, [r4, #5]
    2290:	e7e7      	b.n	2262 <_usb_d_dev_trans_stop+0x2e>
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	41005100 	.word	0x41005100
    2298:	41005108 	.word	0x41005108
    229c:	0000220d 	.word	0x0000220d

000022a0 <_usb_d_dev_handle_trfail>:
{
    22a0:	b570      	push	{r4, r5, r6, lr}
    22a2:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    22a4:	7c83      	ldrb	r3, [r0, #18]
    22a6:	220f      	movs	r2, #15
    22a8:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    22aa:	aa01      	add	r2, sp, #4
    22ac:	2404      	movs	r4, #4
    22ae:	7014      	strb	r4, [r2, #0]
    22b0:	3404      	adds	r4, #4
    22b2:	7054      	strb	r4, [r2, #1]
    22b4:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    22b6:	2900      	cmp	r1, #0
    22b8:	d031      	beq.n	231e <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    22ba:	001a      	movs	r2, r3
    22bc:	3208      	adds	r2, #8
    22be:	0152      	lsls	r2, r2, #5
    22c0:	4c32      	ldr	r4, [pc, #200]	; (238c <_usb_d_dev_handle_trfail+0xec>)
    22c2:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    22c4:	0664      	lsls	r4, r4, #25
    22c6:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    22c8:	010a      	lsls	r2, r1, #4
    22ca:	1952      	adds	r2, r2, r5
    22cc:	4d30      	ldr	r5, [pc, #192]	; (2390 <_usb_d_dev_handle_trfail+0xf0>)
    22ce:	18aa      	adds	r2, r5, r2
    22d0:	7a95      	ldrb	r5, [r2, #10]
    22d2:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    22d4:	2c02      	cmp	r4, #2
    22d6:	d02a      	beq.n	232e <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    22d8:	07ac      	lsls	r4, r5, #30
    22da:	d541      	bpl.n	2360 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    22dc:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    22de:	7a94      	ldrb	r4, [r2, #10]
    22e0:	2602      	movs	r6, #2
    22e2:	43b4      	bics	r4, r6
    22e4:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    22e6:	aa01      	add	r2, sp, #4
    22e8:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    22ea:	015a      	lsls	r2, r3, #5
    22ec:	4e29      	ldr	r6, [pc, #164]	; (2394 <_usb_d_dev_handle_trfail+0xf4>)
    22ee:	46b4      	mov	ip, r6
    22f0:	4462      	add	r2, ip
    22f2:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    22f4:	015b      	lsls	r3, r3, #5
    22f6:	4a28      	ldr	r2, [pc, #160]	; (2398 <_usb_d_dev_handle_trfail+0xf8>)
    22f8:	4694      	mov	ip, r2
    22fa:	4463      	add	r3, ip
    22fc:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    22fe:	2307      	movs	r3, #7
    2300:	402b      	ands	r3, r5
    2302:	2b01      	cmp	r3, #1
    2304:	d13f      	bne.n	2386 <_usb_d_dev_handle_trfail+0xe6>
    2306:	7cc3      	ldrb	r3, [r0, #19]
    2308:	065b      	lsls	r3, r3, #25
    230a:	d53c      	bpl.n	2386 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    230c:	7cc3      	ldrb	r3, [r0, #19]
    230e:	09db      	lsrs	r3, r3, #7
    2310:	4299      	cmp	r1, r3
    2312:	d038      	beq.n	2386 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2314:	2200      	movs	r2, #0
    2316:	0019      	movs	r1, r3
    2318:	4b20      	ldr	r3, [pc, #128]	; (239c <_usb_d_dev_handle_trfail+0xfc>)
    231a:	4798      	blx	r3
    231c:	e033      	b.n	2386 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    231e:	001a      	movs	r2, r3
    2320:	3208      	adds	r2, #8
    2322:	0152      	lsls	r2, r2, #5
    2324:	4c19      	ldr	r4, [pc, #100]	; (238c <_usb_d_dev_handle_trfail+0xec>)
    2326:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2328:	2207      	movs	r2, #7
    232a:	4014      	ands	r4, r2
    232c:	e7cc      	b.n	22c8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    232e:	07ec      	lsls	r4, r5, #31
    2330:	d5d2      	bpl.n	22d8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2332:	7a94      	ldrb	r4, [r2, #10]
    2334:	2501      	movs	r5, #1
    2336:	43ac      	bics	r4, r5
    2338:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    233a:	aa01      	add	r2, sp, #4
    233c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    233e:	015a      	lsls	r2, r3, #5
    2340:	4d14      	ldr	r5, [pc, #80]	; (2394 <_usb_d_dev_handle_trfail+0xf4>)
    2342:	46ac      	mov	ip, r5
    2344:	4462      	add	r2, ip
    2346:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2348:	015b      	lsls	r3, r3, #5
    234a:	4a13      	ldr	r2, [pc, #76]	; (2398 <_usb_d_dev_handle_trfail+0xf8>)
    234c:	4694      	mov	ip, r2
    234e:	4463      	add	r3, ip
    2350:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2352:	1e4b      	subs	r3, r1, #1
    2354:	4199      	sbcs	r1, r3
    2356:	b2c9      	uxtb	r1, r1
    2358:	2204      	movs	r2, #4
    235a:	4b10      	ldr	r3, [pc, #64]	; (239c <_usb_d_dev_handle_trfail+0xfc>)
    235c:	4798      	blx	r3
    235e:	e012      	b.n	2386 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    2360:	005a      	lsls	r2, r3, #1
    2362:	1852      	adds	r2, r2, r1
    2364:	0112      	lsls	r2, r2, #4
    2366:	480a      	ldr	r0, [pc, #40]	; (2390 <_usb_d_dev_handle_trfail+0xf0>)
    2368:	1882      	adds	r2, r0, r2
    236a:	2000      	movs	r0, #0
    236c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    236e:	aa01      	add	r2, sp, #4
    2370:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2372:	015a      	lsls	r2, r3, #5
    2374:	4807      	ldr	r0, [pc, #28]	; (2394 <_usb_d_dev_handle_trfail+0xf4>)
    2376:	4684      	mov	ip, r0
    2378:	4462      	add	r2, ip
    237a:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    237c:	015b      	lsls	r3, r3, #5
    237e:	4a06      	ldr	r2, [pc, #24]	; (2398 <_usb_d_dev_handle_trfail+0xf8>)
    2380:	4694      	mov	ip, r2
    2382:	4463      	add	r3, ip
    2384:	7019      	strb	r1, [r3, #0]
}
    2386:	b002      	add	sp, #8
    2388:	bd70      	pop	{r4, r5, r6, pc}
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	41005000 	.word	0x41005000
    2390:	2000057c 	.word	0x2000057c
    2394:	41005100 	.word	0x41005100
    2398:	41005108 	.word	0x41005108
    239c:	00002235 	.word	0x00002235

000023a0 <_usb_d_dev_reset_epts>:
{
    23a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23a2:	46c6      	mov	lr, r8
    23a4:	b500      	push	{lr}
    23a6:	4d0c      	ldr	r5, [pc, #48]	; (23d8 <_usb_d_dev_reset_epts+0x38>)
    23a8:	002c      	movs	r4, r5
    23aa:	3434      	adds	r4, #52	; 0x34
    23ac:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    23ae:	4b0b      	ldr	r3, [pc, #44]	; (23dc <_usb_d_dev_reset_epts+0x3c>)
    23b0:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    23b2:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    23b4:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    23b6:	2103      	movs	r1, #3
    23b8:	0020      	movs	r0, r4
    23ba:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    23bc:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    23be:	74e6      	strb	r6, [r4, #19]
    23c0:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    23c2:	42ac      	cmp	r4, r5
    23c4:	d1f7      	bne.n	23b6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    23c6:	22a0      	movs	r2, #160	; 0xa0
    23c8:	2100      	movs	r1, #0
    23ca:	4805      	ldr	r0, [pc, #20]	; (23e0 <_usb_d_dev_reset_epts+0x40>)
    23cc:	4b05      	ldr	r3, [pc, #20]	; (23e4 <_usb_d_dev_reset_epts+0x44>)
    23ce:	4798      	blx	r3
}
    23d0:	bc04      	pop	{r2}
    23d2:	4690      	mov	r8, r2
    23d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	200005fc 	.word	0x200005fc
    23dc:	0000220d 	.word	0x0000220d
    23e0:	2000057c 	.word	0x2000057c
    23e4:	000054a5 	.word	0x000054a5

000023e8 <_usb_d_dev_in_next>:
{
    23e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ea:	46c6      	mov	lr, r8
    23ec:	b500      	push	{lr}
    23ee:	0004      	movs	r4, r0
    23f0:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    23f2:	7c83      	ldrb	r3, [r0, #18]
    23f4:	250f      	movs	r5, #15
    23f6:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    23f8:	2900      	cmp	r1, #0
    23fa:	d100      	bne.n	23fe <_usb_d_dev_in_next+0x16>
    23fc:	e0aa      	b.n	2554 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    23fe:	016a      	lsls	r2, r5, #5
    2400:	4b5a      	ldr	r3, [pc, #360]	; (256c <_usb_d_dev_in_next+0x184>)
    2402:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2404:	6958      	ldr	r0, [r3, #20]
    2406:	0480      	lsls	r0, r0, #18
    2408:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    240a:	8a23      	ldrh	r3, [r4, #16]
    240c:	4a58      	ldr	r2, [pc, #352]	; (2570 <_usb_d_dev_in_next+0x188>)
    240e:	4293      	cmp	r3, r2
    2410:	d100      	bne.n	2414 <_usb_d_dev_in_next+0x2c>
    2412:	e09a      	b.n	254a <_usb_d_dev_in_next+0x162>
    2414:	3b01      	subs	r3, #1
    2416:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2418:	7ce3      	ldrb	r3, [r4, #19]
    241a:	2707      	movs	r7, #7
    241c:	401f      	ands	r7, r3
	if (isr) {
    241e:	2e00      	cmp	r6, #0
    2420:	d005      	beq.n	242e <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2422:	016b      	lsls	r3, r5, #5
    2424:	4953      	ldr	r1, [pc, #332]	; (2574 <_usb_d_dev_in_next+0x18c>)
    2426:	468c      	mov	ip, r1
    2428:	4463      	add	r3, ip
    242a:	2102      	movs	r1, #2
    242c:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    242e:	68a3      	ldr	r3, [r4, #8]
    2430:	18c1      	adds	r1, r0, r3
    2432:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    2434:	6863      	ldr	r3, [r4, #4]
    2436:	4299      	cmp	r1, r3
    2438:	d24a      	bcs.n	24d0 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    243a:	1a5b      	subs	r3, r3, r1
    243c:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    243e:	7ce2      	ldrb	r2, [r4, #19]
    2440:	0692      	lsls	r2, r2, #26
    2442:	d535      	bpl.n	24b0 <_usb_d_dev_in_next+0xc8>
    2444:	8a22      	ldrh	r2, [r4, #16]
    2446:	1c10      	adds	r0, r2, #0
    2448:	b292      	uxth	r2, r2
    244a:	429a      	cmp	r2, r3
    244c:	d900      	bls.n	2450 <_usb_d_dev_in_next+0x68>
    244e:	1c18      	adds	r0, r3, #0
    2450:	b283      	uxth	r3, r0
    2452:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2454:	6823      	ldr	r3, [r4, #0]
    2456:	469c      	mov	ip, r3
    2458:	4461      	add	r1, ip
    245a:	4642      	mov	r2, r8
    245c:	68e0      	ldr	r0, [r4, #12]
    245e:	4b46      	ldr	r3, [pc, #280]	; (2578 <_usb_d_dev_in_next+0x190>)
    2460:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2462:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    2464:	016a      	lsls	r2, r5, #5
    2466:	4b41      	ldr	r3, [pc, #260]	; (256c <_usb_d_dev_in_next+0x184>)
    2468:	189b      	adds	r3, r3, r2
    246a:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    246c:	016a      	lsls	r2, r5, #5
    246e:	4b3f      	ldr	r3, [pc, #252]	; (256c <_usb_d_dev_in_next+0x184>)
    2470:	189b      	adds	r3, r3, r2
    2472:	695a      	ldr	r2, [r3, #20]
    2474:	4641      	mov	r1, r8
    2476:	0489      	lsls	r1, r1, #18
    2478:	0c89      	lsrs	r1, r1, #18
    247a:	0b92      	lsrs	r2, r2, #14
    247c:	0392      	lsls	r2, r2, #14
    247e:	430a      	orrs	r2, r1
    2480:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2482:	695a      	ldr	r2, [r3, #20]
    2484:	493d      	ldr	r1, [pc, #244]	; (257c <_usb_d_dev_in_next+0x194>)
    2486:	400a      	ands	r2, r1
    2488:	615a      	str	r2, [r3, #20]
	if (!isr) {
    248a:	2e00      	cmp	r6, #0
    248c:	d107      	bne.n	249e <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    248e:	2f01      	cmp	r7, #1
    2490:	d059      	beq.n	2546 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    2492:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2494:	016b      	lsls	r3, r5, #5
    2496:	493a      	ldr	r1, [pc, #232]	; (2580 <_usb_d_dev_in_next+0x198>)
    2498:	468c      	mov	ip, r1
    249a:	4463      	add	r3, ip
    249c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    249e:	016d      	lsls	r5, r5, #5
    24a0:	4b34      	ldr	r3, [pc, #208]	; (2574 <_usb_d_dev_in_next+0x18c>)
    24a2:	469c      	mov	ip, r3
    24a4:	4465      	add	r5, ip
    24a6:	2380      	movs	r3, #128	; 0x80
    24a8:	716b      	strb	r3, [r5, #5]
}
    24aa:	bc04      	pop	{r2}
    24ac:	4690      	mov	r8, r2
    24ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b0:	1c1a      	adds	r2, r3, #0
    24b2:	2080      	movs	r0, #128	; 0x80
    24b4:	0180      	lsls	r0, r0, #6
    24b6:	4283      	cmp	r3, r0
    24b8:	d901      	bls.n	24be <_usb_d_dev_in_next+0xd6>
    24ba:	4b32      	ldr	r3, [pc, #200]	; (2584 <_usb_d_dev_in_next+0x19c>)
    24bc:	881a      	ldrh	r2, [r3, #0]
    24be:	b293      	uxth	r3, r2
    24c0:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    24c2:	6823      	ldr	r3, [r4, #0]
    24c4:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    24c6:	016a      	lsls	r2, r5, #5
    24c8:	4b28      	ldr	r3, [pc, #160]	; (256c <_usb_d_dev_in_next+0x184>)
    24ca:	189b      	adds	r3, r3, r2
    24cc:	6119      	str	r1, [r3, #16]
    24ce:	e7cd      	b.n	246c <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    24d0:	7ce3      	ldrb	r3, [r4, #19]
    24d2:	06db      	lsls	r3, r3, #27
    24d4:	d50f      	bpl.n	24f6 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    24d6:	7ce3      	ldrb	r3, [r4, #19]
    24d8:	2210      	movs	r2, #16
    24da:	4393      	bics	r3, r2
    24dc:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    24de:	016a      	lsls	r2, r5, #5
    24e0:	4b22      	ldr	r3, [pc, #136]	; (256c <_usb_d_dev_in_next+0x184>)
    24e2:	189b      	adds	r3, r3, r2
    24e4:	695a      	ldr	r2, [r3, #20]
    24e6:	0b92      	lsrs	r2, r2, #14
    24e8:	0392      	lsls	r2, r2, #14
    24ea:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    24ec:	695a      	ldr	r2, [r3, #20]
    24ee:	4923      	ldr	r1, [pc, #140]	; (257c <_usb_d_dev_in_next+0x194>)
    24f0:	400a      	ands	r2, r1
    24f2:	615a      	str	r2, [r3, #20]
    24f4:	e7c9      	b.n	248a <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    24f6:	2f01      	cmp	r7, #1
    24f8:	d00e      	beq.n	2518 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24fa:	016d      	lsls	r5, r5, #5
    24fc:	4b22      	ldr	r3, [pc, #136]	; (2588 <_usb_d_dev_in_next+0x1a0>)
    24fe:	469c      	mov	ip, r3
    2500:	4465      	add	r5, ip
    2502:	234a      	movs	r3, #74	; 0x4a
    2504:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    2506:	8a21      	ldrh	r1, [r4, #16]
    2508:	4002      	ands	r2, r0
    250a:	4291      	cmp	r1, r2
    250c:	d00b      	beq.n	2526 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    250e:	2100      	movs	r1, #0
    2510:	0020      	movs	r0, r4
    2512:	4b1e      	ldr	r3, [pc, #120]	; (258c <_usb_d_dev_in_next+0x1a4>)
    2514:	4798      	blx	r3
	return;
    2516:	e7c8      	b.n	24aa <_usb_d_dev_in_next+0xc2>
    2518:	016d      	lsls	r5, r5, #5
    251a:	4b1b      	ldr	r3, [pc, #108]	; (2588 <_usb_d_dev_in_next+0x1a0>)
    251c:	469c      	mov	ip, r3
    251e:	4465      	add	r5, ip
    2520:	234b      	movs	r3, #75	; 0x4b
    2522:	702b      	strb	r3, [r5, #0]
    2524:	e7ef      	b.n	2506 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    2526:	7ce3      	ldrb	r3, [r4, #19]
    2528:	2240      	movs	r2, #64	; 0x40
    252a:	4393      	bics	r3, r2
    252c:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    252e:	7ca0      	ldrb	r0, [r4, #18]
    2530:	4b17      	ldr	r3, [pc, #92]	; (2590 <_usb_d_dev_in_next+0x1a8>)
    2532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2534:	68a1      	ldr	r1, [r4, #8]
    2536:	4798      	blx	r3
    2538:	2800      	cmp	r0, #0
    253a:	d1b6      	bne.n	24aa <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    253c:	7ce3      	ldrb	r3, [r4, #19]
    253e:	2240      	movs	r2, #64	; 0x40
    2540:	4313      	orrs	r3, r2
    2542:	74e3      	strb	r3, [r4, #19]
    2544:	e7e3      	b.n	250e <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    2546:	224e      	movs	r2, #78	; 0x4e
    2548:	e7a4      	b.n	2494 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    254a:	7ce7      	ldrb	r7, [r4, #19]
    254c:	2307      	movs	r3, #7
    254e:	401f      	ands	r7, r3
    2550:	4a07      	ldr	r2, [pc, #28]	; (2570 <_usb_d_dev_in_next+0x188>)
    2552:	e766      	b.n	2422 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2554:	8a03      	ldrh	r3, [r0, #16]
    2556:	4a06      	ldr	r2, [pc, #24]	; (2570 <_usb_d_dev_in_next+0x188>)
    2558:	2000      	movs	r0, #0
    255a:	4293      	cmp	r3, r2
    255c:	d000      	beq.n	2560 <_usb_d_dev_in_next+0x178>
    255e:	e759      	b.n	2414 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2560:	7ce3      	ldrb	r3, [r4, #19]
    2562:	2707      	movs	r7, #7
    2564:	401f      	ands	r7, r3
    2566:	2000      	movs	r0, #0
    2568:	4a01      	ldr	r2, [pc, #4]	; (2570 <_usb_d_dev_in_next+0x188>)
    256a:	e760      	b.n	242e <_usb_d_dev_in_next+0x46>
    256c:	2000057c 	.word	0x2000057c
    2570:	000003ff 	.word	0x000003ff
    2574:	41005100 	.word	0x41005100
    2578:	00005421 	.word	0x00005421
    257c:	f0003fff 	.word	0xf0003fff
    2580:	41005109 	.word	0x41005109
    2584:	00005830 	.word	0x00005830
    2588:	41005108 	.word	0x41005108
    258c:	0000220d 	.word	0x0000220d
    2590:	200005fc 	.word	0x200005fc

00002594 <_usb_d_dev_out_next>:
{
    2594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2596:	46de      	mov	lr, fp
    2598:	4657      	mov	r7, sl
    259a:	464e      	mov	r6, r9
    259c:	4645      	mov	r5, r8
    259e:	b5e0      	push	{r5, r6, r7, lr}
    25a0:	0004      	movs	r4, r0
    25a2:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    25a4:	7c83      	ldrb	r3, [r0, #18]
    25a6:	250f      	movs	r5, #15
    25a8:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    25aa:	2900      	cmp	r1, #0
    25ac:	d057      	beq.n	265e <_usb_d_dev_out_next+0xca>
    25ae:	016a      	lsls	r2, r5, #5
    25b0:	4b7d      	ldr	r3, [pc, #500]	; (27a8 <_usb_d_dev_out_next+0x214>)
    25b2:	189b      	adds	r3, r3, r2
    25b4:	685a      	ldr	r2, [r3, #4]
    25b6:	0112      	lsls	r2, r2, #4
    25b8:	0c92      	lsrs	r2, r2, #18
    25ba:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    25bc:	685f      	ldr	r7, [r3, #4]
    25be:	04bf      	lsls	r7, r7, #18
    25c0:	0cbf      	lsrs	r7, r7, #18
    25c2:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    25c4:	8a06      	ldrh	r6, [r0, #16]
    25c6:	4b79      	ldr	r3, [pc, #484]	; (27ac <_usb_d_dev_out_next+0x218>)
    25c8:	429e      	cmp	r6, r3
    25ca:	d100      	bne.n	25ce <_usb_d_dev_out_next+0x3a>
    25cc:	e0cd      	b.n	276a <_usb_d_dev_out_next+0x1d6>
    25ce:	3e01      	subs	r6, #1
    25d0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    25d2:	465f      	mov	r7, fp
    25d4:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    25d6:	7ce3      	ldrb	r3, [r4, #19]
    25d8:	2207      	movs	r2, #7
    25da:	401a      	ands	r2, r3
    25dc:	4691      	mov	r9, r2
	if (isr) {
    25de:	4643      	mov	r3, r8
    25e0:	2b00      	cmp	r3, #0
    25e2:	d005      	beq.n	25f0 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    25e4:	016b      	lsls	r3, r5, #5
    25e6:	4a72      	ldr	r2, [pc, #456]	; (27b0 <_usb_d_dev_out_next+0x21c>)
    25e8:	4694      	mov	ip, r2
    25ea:	4463      	add	r3, ip
    25ec:	2201      	movs	r2, #1
    25ee:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    25f0:	7ce3      	ldrb	r3, [r4, #19]
    25f2:	069b      	lsls	r3, r3, #26
    25f4:	d50f      	bpl.n	2616 <_usb_d_dev_out_next+0x82>
    25f6:	6863      	ldr	r3, [r4, #4]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d039      	beq.n	2670 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    25fc:	68a0      	ldr	r0, [r4, #8]
    25fe:	1a1b      	subs	r3, r3, r0
    2600:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2602:	6822      	ldr	r2, [r4, #0]
    2604:	4694      	mov	ip, r2
    2606:	4460      	add	r0, ip
    2608:	68e1      	ldr	r1, [r4, #12]
    260a:	001a      	movs	r2, r3
    260c:	42bb      	cmp	r3, r7
    260e:	d900      	bls.n	2612 <_usb_d_dev_out_next+0x7e>
    2610:	003a      	movs	r2, r7
    2612:	4b68      	ldr	r3, [pc, #416]	; (27b4 <_usb_d_dev_out_next+0x220>)
    2614:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2616:	6863      	ldr	r3, [r4, #4]
    2618:	2b00      	cmp	r3, #0
    261a:	d029      	beq.n	2670 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    261c:	4642      	mov	r2, r8
    261e:	2a00      	cmp	r2, #0
    2620:	d042      	beq.n	26a8 <_usb_d_dev_out_next+0x114>
    2622:	8a22      	ldrh	r2, [r4, #16]
    2624:	42ba      	cmp	r2, r7
    2626:	d93f      	bls.n	26a8 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    2628:	7ce3      	ldrb	r3, [r4, #19]
    262a:	2210      	movs	r2, #16
    262c:	4393      	bics	r3, r2
    262e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2630:	68a3      	ldr	r3, [r4, #8]
    2632:	445b      	add	r3, fp
    2634:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2636:	464b      	mov	r3, r9
    2638:	2b01      	cmp	r3, #1
    263a:	d100      	bne.n	263e <_usb_d_dev_out_next+0xaa>
    263c:	e087      	b.n	274e <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    263e:	016b      	lsls	r3, r5, #5
    2640:	4a5d      	ldr	r2, [pc, #372]	; (27b8 <_usb_d_dev_out_next+0x224>)
    2642:	4694      	mov	ip, r2
    2644:	4463      	add	r3, ip
    2646:	2225      	movs	r2, #37	; 0x25
    2648:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    264a:	2d00      	cmp	r5, #0
    264c:	d102      	bne.n	2654 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    264e:	4b56      	ldr	r3, [pc, #344]	; (27a8 <_usb_d_dev_out_next+0x214>)
    2650:	68e2      	ldr	r2, [r4, #12]
    2652:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2654:	2100      	movs	r1, #0
    2656:	0020      	movs	r0, r4
    2658:	4b58      	ldr	r3, [pc, #352]	; (27bc <_usb_d_dev_out_next+0x228>)
    265a:	4798      	blx	r3
	return;
    265c:	e059      	b.n	2712 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    265e:	8a06      	ldrh	r6, [r0, #16]
    2660:	4b52      	ldr	r3, [pc, #328]	; (27ac <_usb_d_dev_out_next+0x218>)
    2662:	429e      	cmp	r6, r3
    2664:	d100      	bne.n	2668 <_usb_d_dev_out_next+0xd4>
    2666:	e08e      	b.n	2786 <_usb_d_dev_out_next+0x1f2>
    2668:	2300      	movs	r3, #0
    266a:	469b      	mov	fp, r3
    266c:	469a      	mov	sl, r3
    266e:	e7ae      	b.n	25ce <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2670:	7ce3      	ldrb	r3, [r4, #19]
    2672:	06db      	lsls	r3, r3, #27
    2674:	d400      	bmi.n	2678 <_usb_d_dev_out_next+0xe4>
    2676:	e07f      	b.n	2778 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    2678:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    267a:	2210      	movs	r2, #16
    267c:	4393      	bics	r3, r2
    267e:	2220      	movs	r2, #32
    2680:	4313      	orrs	r3, r2
    2682:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    2684:	4a48      	ldr	r2, [pc, #288]	; (27a8 <_usb_d_dev_out_next+0x214>)
    2686:	016b      	lsls	r3, r5, #5
    2688:	68e1      	ldr	r1, [r4, #12]
    268a:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    268c:	8a21      	ldrh	r1, [r4, #16]
    268e:	18d3      	adds	r3, r2, r3
    2690:	685a      	ldr	r2, [r3, #4]
    2692:	0489      	lsls	r1, r1, #18
    2694:	0909      	lsrs	r1, r1, #4
    2696:	484a      	ldr	r0, [pc, #296]	; (27c0 <_usb_d_dev_out_next+0x22c>)
    2698:	4002      	ands	r2, r0
    269a:	430a      	orrs	r2, r1
    269c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    269e:	685a      	ldr	r2, [r3, #4]
    26a0:	0b92      	lsrs	r2, r2, #14
    26a2:	0392      	lsls	r2, r2, #14
    26a4:	605a      	str	r2, [r3, #4]
    26a6:	e022      	b.n	26ee <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    26a8:	68a2      	ldr	r2, [r4, #8]
    26aa:	4452      	add	r2, sl
    26ac:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    26ae:	4293      	cmp	r3, r2
    26b0:	d9c1      	bls.n	2636 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    26b2:	1a9b      	subs	r3, r3, r2
    26b4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    26b6:	7ce1      	ldrb	r1, [r4, #19]
    26b8:	0689      	lsls	r1, r1, #26
    26ba:	d530      	bpl.n	271e <_usb_d_dev_out_next+0x18a>
    26bc:	8a22      	ldrh	r2, [r4, #16]
    26be:	1c11      	adds	r1, r2, #0
    26c0:	b292      	uxth	r2, r2
    26c2:	429a      	cmp	r2, r3
    26c4:	d900      	bls.n	26c8 <_usb_d_dev_out_next+0x134>
    26c6:	1c19      	adds	r1, r3, #0
    26c8:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    26ca:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    26cc:	016a      	lsls	r2, r5, #5
    26ce:	4936      	ldr	r1, [pc, #216]	; (27a8 <_usb_d_dev_out_next+0x214>)
    26d0:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    26d2:	016a      	lsls	r2, r5, #5
    26d4:	4934      	ldr	r1, [pc, #208]	; (27a8 <_usb_d_dev_out_next+0x214>)
    26d6:	1889      	adds	r1, r1, r2
    26d8:	684a      	ldr	r2, [r1, #4]
    26da:	049b      	lsls	r3, r3, #18
    26dc:	091b      	lsrs	r3, r3, #4
    26de:	4838      	ldr	r0, [pc, #224]	; (27c0 <_usb_d_dev_out_next+0x22c>)
    26e0:	4002      	ands	r2, r0
    26e2:	4313      	orrs	r3, r2
    26e4:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    26e6:	684b      	ldr	r3, [r1, #4]
    26e8:	0b9b      	lsrs	r3, r3, #14
    26ea:	039b      	lsls	r3, r3, #14
    26ec:	604b      	str	r3, [r1, #4]
	if (!isr) {
    26ee:	4643      	mov	r3, r8
    26f0:	2b00      	cmp	r3, #0
    26f2:	d108      	bne.n	2706 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    26f4:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    26f6:	464b      	mov	r3, r9
    26f8:	2b01      	cmp	r3, #1
    26fa:	d02f      	beq.n	275c <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    26fc:	016b      	lsls	r3, r5, #5
    26fe:	4931      	ldr	r1, [pc, #196]	; (27c4 <_usb_d_dev_out_next+0x230>)
    2700:	468c      	mov	ip, r1
    2702:	4463      	add	r3, ip
    2704:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2706:	016d      	lsls	r5, r5, #5
    2708:	4b29      	ldr	r3, [pc, #164]	; (27b0 <_usb_d_dev_out_next+0x21c>)
    270a:	469c      	mov	ip, r3
    270c:	4465      	add	r5, ip
    270e:	2340      	movs	r3, #64	; 0x40
    2710:	712b      	strb	r3, [r5, #4]
}
    2712:	bc3c      	pop	{r2, r3, r4, r5}
    2714:	4690      	mov	r8, r2
    2716:	4699      	mov	r9, r3
    2718:	46a2      	mov	sl, r4
    271a:	46ab      	mov	fp, r5
    271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    271e:	8a21      	ldrh	r1, [r4, #16]
    2720:	428b      	cmp	r3, r1
    2722:	d90a      	bls.n	273a <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2724:	2180      	movs	r1, #128	; 0x80
    2726:	0189      	lsls	r1, r1, #6
    2728:	428b      	cmp	r3, r1
    272a:	d80d      	bhi.n	2748 <_usb_d_dev_out_next+0x1b4>
    272c:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    272e:	6821      	ldr	r1, [r4, #0]
    2730:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    2732:	0169      	lsls	r1, r5, #5
    2734:	481c      	ldr	r0, [pc, #112]	; (27a8 <_usb_d_dev_out_next+0x214>)
    2736:	500a      	str	r2, [r1, r0]
    2738:	e7cb      	b.n	26d2 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    273a:	428b      	cmp	r3, r1
    273c:	d2f7      	bcs.n	272e <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    273e:	7ce1      	ldrb	r1, [r4, #19]
    2740:	2020      	movs	r0, #32
    2742:	4301      	orrs	r1, r0
    2744:	74e1      	strb	r1, [r4, #19]
    2746:	e7f2      	b.n	272e <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    2748:	2380      	movs	r3, #128	; 0x80
    274a:	019b      	lsls	r3, r3, #6
    274c:	e7ef      	b.n	272e <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    274e:	016b      	lsls	r3, r5, #5
    2750:	4a19      	ldr	r2, [pc, #100]	; (27b8 <_usb_d_dev_out_next+0x224>)
    2752:	4694      	mov	ip, r2
    2754:	4463      	add	r3, ip
    2756:	222d      	movs	r2, #45	; 0x2d
    2758:	701a      	strb	r2, [r3, #0]
    275a:	e776      	b.n	264a <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    275c:	016a      	lsls	r2, r5, #5
    275e:	4b12      	ldr	r3, [pc, #72]	; (27a8 <_usb_d_dev_out_next+0x214>)
    2760:	189b      	adds	r3, r3, r2
    2762:	2200      	movs	r2, #0
    2764:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2766:	322d      	adds	r2, #45	; 0x2d
    2768:	e7c8      	b.n	26fc <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    276a:	05bf      	lsls	r7, r7, #22
    276c:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    276e:	7cc3      	ldrb	r3, [r0, #19]
    2770:	2207      	movs	r2, #7
    2772:	401a      	ands	r2, r3
    2774:	4691      	mov	r9, r2
    2776:	e735      	b.n	25e4 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    2778:	4643      	mov	r3, r8
    277a:	2b00      	cmp	r3, #0
    277c:	d10c      	bne.n	2798 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    277e:	68a3      	ldr	r3, [r4, #8]
    2780:	4453      	add	r3, sl
    2782:	60a3      	str	r3, [r4, #8]
    2784:	e757      	b.n	2636 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2786:	7cc3      	ldrb	r3, [r0, #19]
    2788:	2207      	movs	r2, #7
    278a:	401a      	ands	r2, r3
    278c:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    278e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2790:	2300      	movs	r3, #0
    2792:	469b      	mov	fp, r3
    2794:	469a      	mov	sl, r3
    2796:	e72b      	b.n	25f0 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2798:	8a23      	ldrh	r3, [r4, #16]
    279a:	42bb      	cmp	r3, r7
    279c:	d900      	bls.n	27a0 <_usb_d_dev_out_next+0x20c>
    279e:	e743      	b.n	2628 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    27a0:	68a3      	ldr	r3, [r4, #8]
    27a2:	4453      	add	r3, sl
    27a4:	60a3      	str	r3, [r4, #8]
    27a6:	e746      	b.n	2636 <_usb_d_dev_out_next+0xa2>
    27a8:	2000057c 	.word	0x2000057c
    27ac:	000003ff 	.word	0x000003ff
    27b0:	41005100 	.word	0x41005100
    27b4:	00005421 	.word	0x00005421
    27b8:	41005108 	.word	0x41005108
    27bc:	0000220d 	.word	0x0000220d
    27c0:	f0003fff 	.word	0xf0003fff
    27c4:	41005109 	.word	0x41005109

000027c8 <_usb_d_dev_init>:
{
    27c8:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    27ca:	4b31      	ldr	r3, [pc, #196]	; (2890 <_usb_d_dev_init+0xc8>)
    27cc:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    27ce:	07db      	lsls	r3, r3, #31
    27d0:	d41f      	bmi.n	2812 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    27d2:	492f      	ldr	r1, [pc, #188]	; (2890 <_usb_d_dev_init+0xc8>)
    27d4:	2203      	movs	r2, #3
    27d6:	788b      	ldrb	r3, [r1, #2]
    27d8:	4213      	tst	r3, r2
    27da:	d1fc      	bne.n	27d6 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    27dc:	4b2c      	ldr	r3, [pc, #176]	; (2890 <_usb_d_dev_init+0xc8>)
    27de:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    27e0:	079b      	lsls	r3, r3, #30
    27e2:	d50e      	bpl.n	2802 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    27e4:	4a2a      	ldr	r2, [pc, #168]	; (2890 <_usb_d_dev_init+0xc8>)
    27e6:	7813      	ldrb	r3, [r2, #0]
    27e8:	2102      	movs	r1, #2
    27ea:	438b      	bics	r3, r1
    27ec:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    27ee:	0011      	movs	r1, r2
    27f0:	2203      	movs	r2, #3
    27f2:	788b      	ldrb	r3, [r1, #2]
    27f4:	4213      	tst	r3, r2
    27f6:	d1fc      	bne.n	27f2 <_usb_d_dev_init+0x2a>
    27f8:	4925      	ldr	r1, [pc, #148]	; (2890 <_usb_d_dev_init+0xc8>)
    27fa:	2202      	movs	r2, #2
    27fc:	788b      	ldrb	r3, [r1, #2]
    27fe:	4213      	tst	r3, r2
    2800:	d1fc      	bne.n	27fc <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2802:	2201      	movs	r2, #1
    2804:	4b22      	ldr	r3, [pc, #136]	; (2890 <_usb_d_dev_init+0xc8>)
    2806:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2808:	0019      	movs	r1, r3
    280a:	3202      	adds	r2, #2
    280c:	788b      	ldrb	r3, [r1, #2]
    280e:	4213      	tst	r3, r2
    2810:	d1fc      	bne.n	280c <_usb_d_dev_init+0x44>
    2812:	491f      	ldr	r1, [pc, #124]	; (2890 <_usb_d_dev_init+0xc8>)
    2814:	2201      	movs	r2, #1
    2816:	788b      	ldrb	r3, [r1, #2]
    2818:	4213      	tst	r3, r2
    281a:	d1fc      	bne.n	2816 <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    281c:	4b1d      	ldr	r3, [pc, #116]	; (2894 <_usb_d_dev_init+0xcc>)
    281e:	4a1e      	ldr	r2, [pc, #120]	; (2898 <_usb_d_dev_init+0xd0>)
    2820:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2822:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2824:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2826:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2828:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    282a:	4b1c      	ldr	r3, [pc, #112]	; (289c <_usb_d_dev_init+0xd4>)
    282c:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    282e:	4b1c      	ldr	r3, [pc, #112]	; (28a0 <_usb_d_dev_init+0xd8>)
    2830:	681b      	ldr	r3, [r3, #0]
    2832:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    2834:	211f      	movs	r1, #31
    2836:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2838:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    283a:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    283c:	019b      	lsls	r3, r3, #6
    283e:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    2840:	2a1f      	cmp	r2, #31
    2842:	d01f      	beq.n	2884 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    2844:	291f      	cmp	r1, #31
    2846:	d01f      	beq.n	2888 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    2848:	2b07      	cmp	r3, #7
    284a:	d01f      	beq.n	288c <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    284c:	0192      	lsls	r2, r2, #6
    284e:	430a      	orrs	r2, r1
    2850:	031b      	lsls	r3, r3, #12
    2852:	4313      	orrs	r3, r2
    2854:	4a0e      	ldr	r2, [pc, #56]	; (2890 <_usb_d_dev_init+0xc8>)
    2856:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2858:	78d3      	ldrb	r3, [r2, #3]
    285a:	2103      	movs	r1, #3
    285c:	430b      	orrs	r3, r1
    285e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2860:	78d3      	ldrb	r3, [r2, #3]
    2862:	210c      	movs	r1, #12
    2864:	430b      	orrs	r3, r1
    2866:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2868:	2304      	movs	r3, #4
    286a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    286c:	0011      	movs	r1, r2
    286e:	2203      	movs	r2, #3
    2870:	788b      	ldrb	r3, [r1, #2]
    2872:	4213      	tst	r3, r2
    2874:	d1fc      	bne.n	2870 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2876:	4b06      	ldr	r3, [pc, #24]	; (2890 <_usb_d_dev_init+0xc8>)
    2878:	4a0a      	ldr	r2, [pc, #40]	; (28a4 <_usb_d_dev_init+0xdc>)
    287a:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    287c:	2201      	movs	r2, #1
    287e:	811a      	strh	r2, [r3, #8]
}
    2880:	2000      	movs	r0, #0
    2882:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    2884:	3a1a      	subs	r2, #26
    2886:	e7dd      	b.n	2844 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    2888:	3902      	subs	r1, #2
    288a:	e7dd      	b.n	2848 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    288c:	3b02      	subs	r3, #2
    288e:	e7dd      	b.n	284c <_usb_d_dev_init+0x84>
    2890:	41005000 	.word	0x41005000
    2894:	200005fc 	.word	0x200005fc
    2898:	00002145 	.word	0x00002145
    289c:	000023a1 	.word	0x000023a1
    28a0:	00806024 	.word	0x00806024
    28a4:	2000057c 	.word	0x2000057c

000028a8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    28a8:	4b10      	ldr	r3, [pc, #64]	; (28ec <_usb_d_dev_enable+0x44>)
    28aa:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    28ac:	079b      	lsls	r3, r3, #30
    28ae:	d11a      	bne.n	28e6 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    28b0:	490e      	ldr	r1, [pc, #56]	; (28ec <_usb_d_dev_enable+0x44>)
    28b2:	2203      	movs	r2, #3
    28b4:	788b      	ldrb	r3, [r1, #2]
    28b6:	4213      	tst	r3, r2
    28b8:	d1fc      	bne.n	28b4 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    28ba:	4b0c      	ldr	r3, [pc, #48]	; (28ec <_usb_d_dev_enable+0x44>)
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    28c0:	079a      	lsls	r2, r3, #30
    28c2:	d408      	bmi.n	28d6 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    28c4:	2202      	movs	r2, #2
    28c6:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    28c8:	4a08      	ldr	r2, [pc, #32]	; (28ec <_usb_d_dev_enable+0x44>)
    28ca:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    28cc:	0011      	movs	r1, r2
    28ce:	2203      	movs	r2, #3
    28d0:	788b      	ldrb	r3, [r1, #2]
    28d2:	4213      	tst	r3, r2
    28d4:	d1fc      	bne.n	28d0 <_usb_d_dev_enable+0x28>
    28d6:	2280      	movs	r2, #128	; 0x80
    28d8:	4b05      	ldr	r3, [pc, #20]	; (28f0 <_usb_d_dev_enable+0x48>)
    28da:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    28dc:	4a05      	ldr	r2, [pc, #20]	; (28f4 <_usb_d_dev_enable+0x4c>)
    28de:	4b03      	ldr	r3, [pc, #12]	; (28ec <_usb_d_dev_enable+0x44>)
    28e0:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    28e2:	2000      	movs	r0, #0
}
    28e4:	4770      	bx	lr
		return -USB_ERR_DENIED;
    28e6:	2011      	movs	r0, #17
    28e8:	4240      	negs	r0, r0
    28ea:	e7fb      	b.n	28e4 <_usb_d_dev_enable+0x3c>
    28ec:	41005000 	.word	0x41005000
    28f0:	e000e100 	.word	0xe000e100
    28f4:	0000028d 	.word	0x0000028d

000028f8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    28f8:	4a02      	ldr	r2, [pc, #8]	; (2904 <_usb_d_dev_attach+0xc>)
    28fa:	8913      	ldrh	r3, [r2, #8]
    28fc:	2101      	movs	r1, #1
    28fe:	438b      	bics	r3, r1
    2900:	8113      	strh	r3, [r2, #8]
}
    2902:	4770      	bx	lr
    2904:	41005000 	.word	0x41005000

00002908 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2908:	2380      	movs	r3, #128	; 0x80
    290a:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    290c:	4b01      	ldr	r3, [pc, #4]	; (2914 <_usb_d_dev_set_address+0xc>)
    290e:	7298      	strb	r0, [r3, #10]
}
    2910:	4770      	bx	lr
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	41005000 	.word	0x41005000

00002918 <_usb_d_dev_ep_init>:
{
    2918:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    291a:	240f      	movs	r4, #15
    291c:	4004      	ands	r4, r0
    291e:	b243      	sxtb	r3, r0
    2920:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2922:	2c00      	cmp	r4, #0
    2924:	d054      	beq.n	29d0 <_usb_d_dev_ep_init+0xb8>
    2926:	0025      	movs	r5, r4
    2928:	2b00      	cmp	r3, #0
    292a:	db07      	blt.n	293c <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    292c:	2303      	movs	r3, #3
    292e:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2930:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    2932:	2c04      	cmp	r4, #4
    2934:	d950      	bls.n	29d8 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    2936:	2012      	movs	r0, #18
    2938:	4240      	negs	r0, r0
    293a:	e025      	b.n	2988 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    293c:	1d25      	adds	r5, r4, #4
    293e:	e7f5      	b.n	292c <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2940:	4663      	mov	r3, ip
    2942:	2b00      	cmp	r3, #0
    2944:	db21      	blt.n	298a <_usb_d_dev_ep_init+0x72>
    2946:	007b      	lsls	r3, r7, #1
    2948:	19db      	adds	r3, r3, r7
    294a:	009b      	lsls	r3, r3, #2
    294c:	4c3b      	ldr	r4, [pc, #236]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    294e:	591b      	ldr	r3, [r3, r4]
    2950:	2b00      	cmp	r3, #0
    2952:	d166      	bne.n	2a22 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2954:	007b      	lsls	r3, r7, #1
    2956:	19df      	adds	r7, r3, r7
    2958:	00bf      	lsls	r7, r7, #2
    295a:	4b38      	ldr	r3, [pc, #224]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    295c:	58ff      	ldr	r7, [r7, r3]
    295e:	4b38      	ldr	r3, [pc, #224]	; (2a40 <_usb_d_dev_ep_init+0x128>)
    2960:	00ae      	lsls	r6, r5, #2
    2962:	1974      	adds	r4, r6, r5
    2964:	00a4      	lsls	r4, r4, #2
    2966:	191c      	adds	r4, r3, r4
    2968:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    296a:	3444      	adds	r4, #68	; 0x44
    296c:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    296e:	3320      	adds	r3, #32
    2970:	1972      	adds	r2, r6, r5
    2972:	0092      	lsls	r2, r2, #2
    2974:	189a      	adds	r2, r3, r2
    2976:	3227      	adds	r2, #39	; 0x27
    2978:	3101      	adds	r1, #1
    297a:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    297c:	1975      	adds	r5, r6, r5
    297e:	00ad      	lsls	r5, r5, #2
    2980:	195b      	adds	r3, r3, r5
    2982:	3326      	adds	r3, #38	; 0x26
    2984:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    2986:	2000      	movs	r0, #0
}
    2988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    298a:	007b      	lsls	r3, r7, #1
    298c:	19db      	adds	r3, r3, r7
    298e:	009b      	lsls	r3, r3, #2
    2990:	4c2a      	ldr	r4, [pc, #168]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    2992:	18e3      	adds	r3, r4, r3
    2994:	685b      	ldr	r3, [r3, #4]
    2996:	2b00      	cmp	r3, #0
    2998:	d106      	bne.n	29a8 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    299a:	007b      	lsls	r3, r7, #1
    299c:	19df      	adds	r7, r3, r7
    299e:	00bf      	lsls	r7, r7, #2
    29a0:	4b26      	ldr	r3, [pc, #152]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    29a2:	19df      	adds	r7, r3, r7
    29a4:	687f      	ldr	r7, [r7, #4]
    29a6:	e7da      	b.n	295e <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    29a8:	007b      	lsls	r3, r7, #1
    29aa:	19db      	adds	r3, r3, r7
    29ac:	009b      	lsls	r3, r3, #2
    29ae:	4c23      	ldr	r4, [pc, #140]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    29b0:	18e3      	adds	r3, r4, r3
    29b2:	895b      	ldrh	r3, [r3, #10]
    29b4:	4293      	cmp	r3, r2
    29b6:	daf0      	bge.n	299a <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    29b8:	2013      	movs	r0, #19
    29ba:	4240      	negs	r0, r0
    29bc:	e7e4      	b.n	2988 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    29be:	2014      	movs	r0, #20
    29c0:	4240      	negs	r0, r0
    29c2:	e7e1      	b.n	2988 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    29c4:	2014      	movs	r0, #20
    29c6:	4240      	negs	r0, r0
    29c8:	e7de      	b.n	2988 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    29ca:	2013      	movs	r0, #19
    29cc:	4240      	negs	r0, r0
    29ce:	e7db      	b.n	2988 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    29d0:	2303      	movs	r3, #3
    29d2:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    29d4:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    29d6:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    29d8:	00ab      	lsls	r3, r5, #2
    29da:	195b      	adds	r3, r3, r5
    29dc:	009e      	lsls	r6, r3, #2
    29de:	4b18      	ldr	r3, [pc, #96]	; (2a40 <_usb_d_dev_ep_init+0x128>)
    29e0:	199b      	adds	r3, r3, r6
    29e2:	3346      	adds	r3, #70	; 0x46
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	2bff      	cmp	r3, #255	; 0xff
    29e8:	d1e9      	bne.n	29be <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    29ea:	2900      	cmp	r1, #0
    29ec:	d1a8      	bne.n	2940 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    29ee:	2c00      	cmp	r4, #0
    29f0:	d004      	beq.n	29fc <_usb_d_dev_ep_init+0xe4>
    29f2:	4663      	mov	r3, ip
    29f4:	2b00      	cmp	r3, #0
    29f6:	db01      	blt.n	29fc <_usb_d_dev_ep_init+0xe4>
    29f8:	3404      	adds	r4, #4
    29fa:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    29fc:	00a3      	lsls	r3, r4, #2
    29fe:	191b      	adds	r3, r3, r4
    2a00:	009b      	lsls	r3, r3, #2
    2a02:	4c0f      	ldr	r4, [pc, #60]	; (2a40 <_usb_d_dev_ep_init+0x128>)
    2a04:	18e4      	adds	r4, r4, r3
    2a06:	3446      	adds	r4, #70	; 0x46
    2a08:	7823      	ldrb	r3, [r4, #0]
    2a0a:	2bff      	cmp	r3, #255	; 0xff
    2a0c:	d1da      	bne.n	29c4 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    2a0e:	007b      	lsls	r3, r7, #1
    2a10:	19db      	adds	r3, r3, r7
    2a12:	009b      	lsls	r3, r3, #2
    2a14:	4c09      	ldr	r4, [pc, #36]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    2a16:	591b      	ldr	r3, [r3, r4]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d0d6      	beq.n	29ca <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2a1c:	4663      	mov	r3, ip
    2a1e:	2b00      	cmp	r3, #0
    2a20:	dbb3      	blt.n	298a <_usb_d_dev_ep_init+0x72>
    2a22:	007b      	lsls	r3, r7, #1
    2a24:	19db      	adds	r3, r3, r7
    2a26:	009b      	lsls	r3, r3, #2
    2a28:	4c04      	ldr	r4, [pc, #16]	; (2a3c <_usb_d_dev_ep_init+0x124>)
    2a2a:	18e3      	adds	r3, r4, r3
    2a2c:	891b      	ldrh	r3, [r3, #8]
    2a2e:	4293      	cmp	r3, r2
    2a30:	db00      	blt.n	2a34 <_usb_d_dev_ep_init+0x11c>
    2a32:	e78f      	b.n	2954 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    2a34:	2013      	movs	r0, #19
    2a36:	4240      	negs	r0, r0
    2a38:	e7a6      	b.n	2988 <_usb_d_dev_ep_init+0x70>
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	00005834 	.word	0x00005834
    2a40:	200005fc 	.word	0x200005fc

00002a44 <_usb_d_dev_ep_deinit>:
{
    2a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a46:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    2a48:	240f      	movs	r4, #15
    2a4a:	4004      	ands	r4, r0
    2a4c:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a4e:	2c00      	cmp	r4, #0
    2a50:	d010      	beq.n	2a74 <_usb_d_dev_ep_deinit+0x30>
    2a52:	0020      	movs	r0, r4
    2a54:	2f00      	cmp	r7, #0
    2a56:	db02      	blt.n	2a5e <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2a58:	2c04      	cmp	r4, #4
    2a5a:	d902      	bls.n	2a62 <_usb_d_dev_ep_deinit+0x1e>
}
    2a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a5e:	1d20      	adds	r0, r4, #4
    2a60:	e7fa      	b.n	2a58 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    2a62:	0006      	movs	r6, r0
    2a64:	3001      	adds	r0, #1
    2a66:	0083      	lsls	r3, r0, #2
    2a68:	1818      	adds	r0, r3, r0
    2a6a:	0080      	lsls	r0, r0, #2
    2a6c:	4b25      	ldr	r3, [pc, #148]	; (2b04 <_usb_d_dev_ep_deinit+0xc0>)
    2a6e:	3320      	adds	r3, #32
    2a70:	1818      	adds	r0, r3, r0
    2a72:	e002      	b.n	2a7a <_usb_d_dev_ep_deinit+0x36>
    2a74:	4823      	ldr	r0, [pc, #140]	; (2b04 <_usb_d_dev_ep_deinit+0xc0>)
    2a76:	3034      	adds	r0, #52	; 0x34
    2a78:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2a7a:	00b3      	lsls	r3, r6, #2
    2a7c:	199b      	adds	r3, r3, r6
    2a7e:	009a      	lsls	r2, r3, #2
    2a80:	4b20      	ldr	r3, [pc, #128]	; (2b04 <_usb_d_dev_ep_deinit+0xc0>)
    2a82:	189b      	adds	r3, r3, r2
    2a84:	3346      	adds	r3, #70	; 0x46
    2a86:	781b      	ldrb	r3, [r3, #0]
    2a88:	2bff      	cmp	r3, #255	; 0xff
    2a8a:	d0e7      	beq.n	2a5c <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2a8c:	0ff9      	lsrs	r1, r7, #31
    2a8e:	2203      	movs	r2, #3
    2a90:	4b1d      	ldr	r3, [pc, #116]	; (2b08 <_usb_d_dev_ep_deinit+0xc4>)
    2a92:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2a94:	00b3      	lsls	r3, r6, #2
    2a96:	199b      	adds	r3, r3, r6
    2a98:	009a      	lsls	r2, r3, #2
    2a9a:	4b1a      	ldr	r3, [pc, #104]	; (2b04 <_usb_d_dev_ep_deinit+0xc0>)
    2a9c:	189b      	adds	r3, r3, r2
    2a9e:	3340      	adds	r3, #64	; 0x40
    2aa0:	79da      	ldrb	r2, [r3, #7]
    2aa2:	2307      	movs	r3, #7
    2aa4:	4013      	ands	r3, r2
    2aa6:	2b01      	cmp	r3, #1
    2aa8:	d01b      	beq.n	2ae2 <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    2aaa:	2f00      	cmp	r7, #0
    2aac:	db1f      	blt.n	2aee <_usb_d_dev_ep_deinit+0xaa>
    2aae:	016d      	lsls	r5, r5, #5
    2ab0:	4b16      	ldr	r3, [pc, #88]	; (2b0c <_usb_d_dev_ep_deinit+0xc8>)
    2ab2:	469c      	mov	ip, r3
    2ab4:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2ab6:	2280      	movs	r2, #128	; 0x80
    2ab8:	0052      	lsls	r2, r2, #1
    2aba:	5cab      	ldrb	r3, [r5, r2]
    2abc:	2107      	movs	r1, #7
    2abe:	438b      	bics	r3, r1
    2ac0:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    2ac2:	4b10      	ldr	r3, [pc, #64]	; (2b04 <_usb_d_dev_ep_deinit+0xc0>)
    2ac4:	3320      	adds	r3, #32
    2ac6:	00b1      	lsls	r1, r6, #2
    2ac8:	198a      	adds	r2, r1, r6
    2aca:	0092      	lsls	r2, r2, #2
    2acc:	189a      	adds	r2, r3, r2
    2ace:	3227      	adds	r2, #39	; 0x27
    2ad0:	2000      	movs	r0, #0
    2ad2:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2ad4:	198e      	adds	r6, r1, r6
    2ad6:	00b6      	lsls	r6, r6, #2
    2ad8:	199b      	adds	r3, r3, r6
    2ada:	3326      	adds	r3, #38	; 0x26
    2adc:	22ff      	movs	r2, #255	; 0xff
    2ade:	701a      	strb	r2, [r3, #0]
    2ae0:	e7bc      	b.n	2a5c <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2ae2:	3508      	adds	r5, #8
    2ae4:	016d      	lsls	r5, r5, #5
    2ae6:	2200      	movs	r2, #0
    2ae8:	4b08      	ldr	r3, [pc, #32]	; (2b0c <_usb_d_dev_ep_deinit+0xc8>)
    2aea:	54ea      	strb	r2, [r5, r3]
    2aec:	e7e9      	b.n	2ac2 <_usb_d_dev_ep_deinit+0x7e>
    2aee:	0164      	lsls	r4, r4, #5
    2af0:	4b06      	ldr	r3, [pc, #24]	; (2b0c <_usb_d_dev_ep_deinit+0xc8>)
    2af2:	469c      	mov	ip, r3
    2af4:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2af6:	2280      	movs	r2, #128	; 0x80
    2af8:	0052      	lsls	r2, r2, #1
    2afa:	5ca3      	ldrb	r3, [r4, r2]
    2afc:	2170      	movs	r1, #112	; 0x70
    2afe:	438b      	bics	r3, r1
    2b00:	54a3      	strb	r3, [r4, r2]
    2b02:	e7de      	b.n	2ac2 <_usb_d_dev_ep_deinit+0x7e>
    2b04:	200005fc 	.word	0x200005fc
    2b08:	00002235 	.word	0x00002235
    2b0c:	41005000 	.word	0x41005000

00002b10 <_usb_d_dev_ep_enable>:
{
    2b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b12:	46c6      	mov	lr, r8
    2b14:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    2b16:	220f      	movs	r2, #15
    2b18:	4002      	ands	r2, r0
    2b1a:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b1c:	2a00      	cmp	r2, #0
    2b1e:	d100      	bne.n	2b22 <_usb_d_dev_ep_enable+0x12>
    2b20:	e092      	b.n	2c48 <_usb_d_dev_ep_enable+0x138>
    2b22:	0013      	movs	r3, r2
    2b24:	2800      	cmp	r0, #0
    2b26:	db0b      	blt.n	2b40 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2b28:	0011      	movs	r1, r2
    2b2a:	3208      	adds	r2, #8
    2b2c:	0152      	lsls	r2, r2, #5
    2b2e:	4cab      	ldr	r4, [pc, #684]	; (2ddc <_usb_d_dev_ep_enable+0x2cc>)
    2b30:	5d15      	ldrb	r5, [r2, r4]
    2b32:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2b34:	2904      	cmp	r1, #4
    2b36:	d800      	bhi.n	2b3a <_usb_d_dev_ep_enable+0x2a>
    2b38:	e08d      	b.n	2c56 <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    2b3a:	2012      	movs	r0, #18
    2b3c:	4240      	negs	r0, r0
    2b3e:	e0e6      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2b40:	1d13      	adds	r3, r2, #4
    2b42:	e7f1      	b.n	2b28 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2b44:	2077      	movs	r0, #119	; 0x77
    2b46:	4228      	tst	r0, r5
    2b48:	d175      	bne.n	2c36 <_usb_d_dev_ep_enable+0x126>
    2b4a:	48a4      	ldr	r0, [pc, #656]	; (2ddc <_usb_d_dev_ep_enable+0x2cc>)
    2b4c:	4680      	mov	r8, r0
    2b4e:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2b50:	3410      	adds	r4, #16
    2b52:	2080      	movs	r0, #128	; 0x80
    2b54:	0040      	lsls	r0, r0, #1
    2b56:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2b58:	0098      	lsls	r0, r3, #2
    2b5a:	18c0      	adds	r0, r0, r3
    2b5c:	0084      	lsls	r4, r0, #2
    2b5e:	48a0      	ldr	r0, [pc, #640]	; (2de0 <_usb_d_dev_ep_enable+0x2d0>)
    2b60:	1900      	adds	r0, r0, r4
    2b62:	3044      	adds	r0, #68	; 0x44
    2b64:	8800      	ldrh	r0, [r0, #0]
    2b66:	0385      	lsls	r5, r0, #14
    2b68:	4c9e      	ldr	r4, [pc, #632]	; (2de4 <_usb_d_dev_ep_enable+0x2d4>)
    2b6a:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2b6c:	2480      	movs	r4, #128	; 0x80
    2b6e:	00a4      	lsls	r4, r4, #2
    2b70:	42a0      	cmp	r0, r4
    2b72:	d900      	bls.n	2b76 <_usb_d_dev_ep_enable+0x66>
    2b74:	e0ce      	b.n	2d14 <_usb_d_dev_ep_enable+0x204>
    2b76:	3c01      	subs	r4, #1
    2b78:	3cff      	subs	r4, #255	; 0xff
    2b7a:	42a0      	cmp	r0, r4
    2b7c:	d900      	bls.n	2b80 <_usb_d_dev_ep_enable+0x70>
    2b7e:	e114      	b.n	2daa <_usb_d_dev_ep_enable+0x29a>
    2b80:	2880      	cmp	r0, #128	; 0x80
    2b82:	d900      	bls.n	2b86 <_usb_d_dev_ep_enable+0x76>
    2b84:	e101      	b.n	2d8a <_usb_d_dev_ep_enable+0x27a>
    2b86:	2840      	cmp	r0, #64	; 0x40
    2b88:	d900      	bls.n	2b8c <_usb_d_dev_ep_enable+0x7c>
    2b8a:	e116      	b.n	2dba <_usb_d_dev_ep_enable+0x2aa>
    2b8c:	2820      	cmp	r0, #32
    2b8e:	d900      	bls.n	2b92 <_usb_d_dev_ep_enable+0x82>
    2b90:	e103      	b.n	2d9a <_usb_d_dev_ep_enable+0x28a>
    2b92:	2810      	cmp	r0, #16
    2b94:	d900      	bls.n	2b98 <_usb_d_dev_ep_enable+0x88>
    2b96:	e118      	b.n	2dca <_usb_d_dev_ep_enable+0x2ba>
    2b98:	3cf8      	subs	r4, #248	; 0xf8
    2b9a:	4284      	cmp	r4, r0
    2b9c:	41a4      	sbcs	r4, r4
    2b9e:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ba0:	0726      	lsls	r6, r4, #28
    2ba2:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2ba4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2ba6:	0485      	lsls	r5, r0, #18
    2ba8:	0cad      	lsrs	r5, r5, #18
    2baa:	e0ba      	b.n	2d22 <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2bac:	2070      	movs	r0, #112	; 0x70
    2bae:	4228      	tst	r0, r5
    2bb0:	d144      	bne.n	2c3c <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2bb2:	4c8b      	ldr	r4, [pc, #556]	; (2de0 <_usb_d_dev_ep_enable+0x2d0>)
    2bb4:	009e      	lsls	r6, r3, #2
    2bb6:	18f0      	adds	r0, r6, r3
    2bb8:	0080      	lsls	r0, r0, #2
    2bba:	1820      	adds	r0, r4, r0
    2bbc:	3040      	adds	r0, #64	; 0x40
    2bbe:	79c0      	ldrb	r0, [r0, #7]
    2bc0:	0740      	lsls	r0, r0, #29
    2bc2:	0e40      	lsrs	r0, r0, #25
    2bc4:	4305      	orrs	r5, r0
    2bc6:	4885      	ldr	r0, [pc, #532]	; (2ddc <_usb_d_dev_ep_enable+0x2cc>)
    2bc8:	4684      	mov	ip, r0
    2bca:	4462      	add	r2, ip
    2bcc:	2080      	movs	r0, #128	; 0x80
    2bce:	0040      	lsls	r0, r0, #1
    2bd0:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2bd2:	18f6      	adds	r6, r6, r3
    2bd4:	00b6      	lsls	r6, r6, #2
    2bd6:	19a4      	adds	r4, r4, r6
    2bd8:	3444      	adds	r4, #68	; 0x44
    2bda:	8824      	ldrh	r4, [r4, #0]
    2bdc:	04a5      	lsls	r5, r4, #18
    2bde:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2be0:	3001      	adds	r0, #1
    2be2:	30ff      	adds	r0, #255	; 0xff
    2be4:	2307      	movs	r3, #7
    2be6:	4284      	cmp	r4, r0
    2be8:	d814      	bhi.n	2c14 <_usb_d_dev_ep_enable+0x104>
    2bea:	3801      	subs	r0, #1
    2bec:	38ff      	subs	r0, #255	; 0xff
    2bee:	3b01      	subs	r3, #1
    2bf0:	4284      	cmp	r4, r0
    2bf2:	d80f      	bhi.n	2c14 <_usb_d_dev_ep_enable+0x104>
    2bf4:	3b01      	subs	r3, #1
    2bf6:	2c80      	cmp	r4, #128	; 0x80
    2bf8:	d80c      	bhi.n	2c14 <_usb_d_dev_ep_enable+0x104>
    2bfa:	3b01      	subs	r3, #1
    2bfc:	2c40      	cmp	r4, #64	; 0x40
    2bfe:	d809      	bhi.n	2c14 <_usb_d_dev_ep_enable+0x104>
    2c00:	3b01      	subs	r3, #1
    2c02:	2c20      	cmp	r4, #32
    2c04:	d806      	bhi.n	2c14 <_usb_d_dev_ep_enable+0x104>
    2c06:	3b01      	subs	r3, #1
    2c08:	2c10      	cmp	r4, #16
    2c0a:	d803      	bhi.n	2c14 <_usb_d_dev_ep_enable+0x104>
    2c0c:	38f8      	subs	r0, #248	; 0xf8
    2c0e:	42a0      	cmp	r0, r4
    2c10:	4180      	sbcs	r0, r0
    2c12:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2c14:	071b      	lsls	r3, r3, #28
    2c16:	432b      	orrs	r3, r5
    2c18:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2c1a:	2080      	movs	r0, #128	; 0x80
    2c1c:	2382      	movs	r3, #130	; 0x82
    2c1e:	005b      	lsls	r3, r3, #1
    2c20:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    2c22:	0149      	lsls	r1, r1, #5
    2c24:	4b70      	ldr	r3, [pc, #448]	; (2de8 <_usb_d_dev_ep_enable+0x2d8>)
    2c26:	1859      	adds	r1, r3, r1
    2c28:	2300      	movs	r3, #0
    2c2a:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2c2c:	2000      	movs	r0, #0
    2c2e:	e06e      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    2c30:	2012      	movs	r0, #18
    2c32:	4240      	negs	r0, r0
    2c34:	e06b      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2c36:	2014      	movs	r0, #20
    2c38:	4240      	negs	r0, r0
    2c3a:	e068      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2c3c:	2014      	movs	r0, #20
    2c3e:	4240      	negs	r0, r0
    2c40:	e065      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2c42:	2014      	movs	r0, #20
    2c44:	4240      	negs	r0, r0
    2c46:	e062      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2c48:	2380      	movs	r3, #128	; 0x80
    2c4a:	005b      	lsls	r3, r3, #1
    2c4c:	4a63      	ldr	r2, [pc, #396]	; (2ddc <_usb_d_dev_ep_enable+0x2cc>)
    2c4e:	5cd5      	ldrb	r5, [r2, r3]
    2c50:	b2ed      	uxtb	r5, r5
    2c52:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    2c54:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2c56:	009a      	lsls	r2, r3, #2
    2c58:	18d2      	adds	r2, r2, r3
    2c5a:	0094      	lsls	r4, r2, #2
    2c5c:	4a60      	ldr	r2, [pc, #384]	; (2de0 <_usb_d_dev_ep_enable+0x2d0>)
    2c5e:	1912      	adds	r2, r2, r4
    2c60:	3246      	adds	r2, #70	; 0x46
    2c62:	7812      	ldrb	r2, [r2, #0]
    2c64:	4694      	mov	ip, r2
    2c66:	2aff      	cmp	r2, #255	; 0xff
    2c68:	d0e2      	beq.n	2c30 <_usb_d_dev_ep_enable+0x120>
    2c6a:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2c6c:	4f5e      	ldr	r7, [pc, #376]	; (2de8 <_usb_d_dev_ep_enable+0x2d8>)
    2c6e:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2c70:	009c      	lsls	r4, r3, #2
    2c72:	18e4      	adds	r4, r4, r3
    2c74:	00a6      	lsls	r6, r4, #2
    2c76:	4c5a      	ldr	r4, [pc, #360]	; (2de0 <_usb_d_dev_ep_enable+0x2d0>)
    2c78:	19a4      	adds	r4, r4, r6
    2c7a:	3440      	adds	r4, #64	; 0x40
    2c7c:	79e6      	ldrb	r6, [r4, #7]
    2c7e:	2407      	movs	r4, #7
    2c80:	4034      	ands	r4, r6
    2c82:	2c01      	cmp	r4, #1
    2c84:	d100      	bne.n	2c88 <_usb_d_dev_ep_enable+0x178>
    2c86:	e75d      	b.n	2b44 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    2c88:	2800      	cmp	r0, #0
    2c8a:	db8f      	blt.n	2bac <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    2c8c:	0768      	lsls	r0, r5, #29
    2c8e:	d1d8      	bne.n	2c42 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2c90:	4c53      	ldr	r4, [pc, #332]	; (2de0 <_usb_d_dev_ep_enable+0x2d0>)
    2c92:	009e      	lsls	r6, r3, #2
    2c94:	18f0      	adds	r0, r6, r3
    2c96:	0080      	lsls	r0, r0, #2
    2c98:	1820      	adds	r0, r4, r0
    2c9a:	3040      	adds	r0, #64	; 0x40
    2c9c:	79c0      	ldrb	r0, [r0, #7]
    2c9e:	0740      	lsls	r0, r0, #29
    2ca0:	0f40      	lsrs	r0, r0, #29
    2ca2:	4305      	orrs	r5, r0
    2ca4:	484d      	ldr	r0, [pc, #308]	; (2ddc <_usb_d_dev_ep_enable+0x2cc>)
    2ca6:	4684      	mov	ip, r0
    2ca8:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2caa:	2080      	movs	r0, #128	; 0x80
    2cac:	0040      	lsls	r0, r0, #1
    2cae:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2cb0:	18f6      	adds	r6, r6, r3
    2cb2:	00b6      	lsls	r6, r6, #2
    2cb4:	19a4      	adds	r4, r4, r6
    2cb6:	3444      	adds	r4, #68	; 0x44
    2cb8:	8825      	ldrh	r5, [r4, #0]
    2cba:	03ab      	lsls	r3, r5, #14
    2cbc:	4c49      	ldr	r4, [pc, #292]	; (2de4 <_usb_d_dev_ep_enable+0x2d4>)
    2cbe:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2cc0:	3001      	adds	r0, #1
    2cc2:	30ff      	adds	r0, #255	; 0xff
    2cc4:	2307      	movs	r3, #7
    2cc6:	4285      	cmp	r5, r0
    2cc8:	d814      	bhi.n	2cf4 <_usb_d_dev_ep_enable+0x1e4>
    2cca:	3801      	subs	r0, #1
    2ccc:	38ff      	subs	r0, #255	; 0xff
    2cce:	3b01      	subs	r3, #1
    2cd0:	4285      	cmp	r5, r0
    2cd2:	d80f      	bhi.n	2cf4 <_usb_d_dev_ep_enable+0x1e4>
    2cd4:	3b01      	subs	r3, #1
    2cd6:	2d80      	cmp	r5, #128	; 0x80
    2cd8:	d80c      	bhi.n	2cf4 <_usb_d_dev_ep_enable+0x1e4>
    2cda:	3b01      	subs	r3, #1
    2cdc:	2d40      	cmp	r5, #64	; 0x40
    2cde:	d809      	bhi.n	2cf4 <_usb_d_dev_ep_enable+0x1e4>
    2ce0:	3b01      	subs	r3, #1
    2ce2:	2d20      	cmp	r5, #32
    2ce4:	d806      	bhi.n	2cf4 <_usb_d_dev_ep_enable+0x1e4>
    2ce6:	3b01      	subs	r3, #1
    2ce8:	2d10      	cmp	r5, #16
    2cea:	d803      	bhi.n	2cf4 <_usb_d_dev_ep_enable+0x1e4>
    2cec:	38f8      	subs	r0, #248	; 0xf8
    2cee:	42a8      	cmp	r0, r5
    2cf0:	4180      	sbcs	r0, r0
    2cf2:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2cf4:	071b      	lsls	r3, r3, #28
    2cf6:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2cf8:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2cfa:	2040      	movs	r0, #64	; 0x40
    2cfc:	2306      	movs	r3, #6
    2cfe:	33ff      	adds	r3, #255	; 0xff
    2d00:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    2d02:	0149      	lsls	r1, r1, #5
    2d04:	4b38      	ldr	r3, [pc, #224]	; (2de8 <_usb_d_dev_ep_enable+0x2d8>)
    2d06:	1859      	adds	r1, r3, r1
    2d08:	2300      	movs	r3, #0
    2d0a:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    2d0c:	2000      	movs	r0, #0
}
    2d0e:	bc04      	pop	{r2}
    2d10:	4690      	mov	r8, r2
    2d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d14:	24e0      	movs	r4, #224	; 0xe0
    2d16:	05e4      	lsls	r4, r4, #23
    2d18:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2d1a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d1c:	0485      	lsls	r5, r0, #18
    2d1e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2d20:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d22:	0724      	lsls	r4, r4, #28
    2d24:	432c      	orrs	r4, r5
    2d26:	617c      	str	r4, [r7, #20]
    2d28:	2406      	movs	r4, #6
    2d2a:	34ff      	adds	r4, #255	; 0xff
    2d2c:	2540      	movs	r5, #64	; 0x40
    2d2e:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2d30:	2682      	movs	r6, #130	; 0x82
    2d32:	0076      	lsls	r6, r6, #1
    2d34:	2780      	movs	r7, #128	; 0x80
    2d36:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    2d38:	4f2b      	ldr	r7, [pc, #172]	; (2de8 <_usb_d_dev_ep_enable+0x2d8>)
    2d3a:	0149      	lsls	r1, r1, #5
    2d3c:	1879      	adds	r1, r7, r1
    2d3e:	2200      	movs	r2, #0
    2d40:	728a      	strb	r2, [r1, #10]
    2d42:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2d44:	210f      	movs	r1, #15
    2d46:	4662      	mov	r2, ip
    2d48:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2d4a:	009a      	lsls	r2, r3, #2
    2d4c:	18d2      	adds	r2, r2, r3
    2d4e:	0092      	lsls	r2, r2, #2
    2d50:	4b23      	ldr	r3, [pc, #140]	; (2de0 <_usb_d_dev_ep_enable+0x2d0>)
    2d52:	189a      	adds	r2, r3, r2
    2d54:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    2d56:	014b      	lsls	r3, r1, #5
    2d58:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2d5a:	18f9      	adds	r1, r7, r3
    2d5c:	684a      	ldr	r2, [r1, #4]
    2d5e:	0480      	lsls	r0, r0, #18
    2d60:	0907      	lsrs	r7, r0, #4
    2d62:	4822      	ldr	r0, [pc, #136]	; (2dec <_usb_d_dev_ep_enable+0x2dc>)
    2d64:	4010      	ands	r0, r2
    2d66:	4338      	orrs	r0, r7
    2d68:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2d6a:	684a      	ldr	r2, [r1, #4]
    2d6c:	0b92      	lsrs	r2, r2, #14
    2d6e:	0392      	lsls	r2, r2, #14
    2d70:	604a      	str	r2, [r1, #4]
    2d72:	4a1a      	ldr	r2, [pc, #104]	; (2ddc <_usb_d_dev_ep_enable+0x2cc>)
    2d74:	189a      	adds	r2, r3, r2
    2d76:	21b0      	movs	r1, #176	; 0xb0
    2d78:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d7a:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2d7c:	4a1c      	ldr	r2, [pc, #112]	; (2df0 <_usb_d_dev_ep_enable+0x2e0>)
    2d7e:	4694      	mov	ip, r2
    2d80:	4463      	add	r3, ip
    2d82:	2210      	movs	r2, #16
    2d84:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    2d86:	2000      	movs	r0, #0
    2d88:	e7c1      	b.n	2d0e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d8a:	24a0      	movs	r4, #160	; 0xa0
    2d8c:	05e4      	lsls	r4, r4, #23
    2d8e:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2d90:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d92:	0485      	lsls	r5, r0, #18
    2d94:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2d96:	2405      	movs	r4, #5
    2d98:	e7c3      	b.n	2d22 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2d9a:	24c0      	movs	r4, #192	; 0xc0
    2d9c:	05a4      	lsls	r4, r4, #22
    2d9e:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2da0:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2da2:	0485      	lsls	r5, r0, #18
    2da4:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2da6:	2403      	movs	r4, #3
    2da8:	e7bb      	b.n	2d22 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2daa:	24c0      	movs	r4, #192	; 0xc0
    2dac:	05e4      	lsls	r4, r4, #23
    2dae:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2db0:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2db2:	0485      	lsls	r5, r0, #18
    2db4:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2db6:	2406      	movs	r4, #6
    2db8:	e7b3      	b.n	2d22 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2dba:	2480      	movs	r4, #128	; 0x80
    2dbc:	05e4      	lsls	r4, r4, #23
    2dbe:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2dc0:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2dc2:	0485      	lsls	r5, r0, #18
    2dc4:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2dc6:	2404      	movs	r4, #4
    2dc8:	e7ab      	b.n	2d22 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2dca:	2480      	movs	r4, #128	; 0x80
    2dcc:	05a4      	lsls	r4, r4, #22
    2dce:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2dd0:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2dd2:	0485      	lsls	r5, r0, #18
    2dd4:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2dd6:	2402      	movs	r4, #2
    2dd8:	e7a3      	b.n	2d22 <_usb_d_dev_ep_enable+0x212>
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	41005000 	.word	0x41005000
    2de0:	200005fc 	.word	0x200005fc
    2de4:	0fffc000 	.word	0x0fffc000
    2de8:	2000057c 	.word	0x2000057c
    2dec:	f0003fff 	.word	0xf0003fff
    2df0:	41005109 	.word	0x41005109

00002df4 <_usb_d_dev_ep_stall>:
{
    2df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2df6:	230f      	movs	r3, #15
    2df8:	4003      	ands	r3, r0
    2dfa:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2dfc:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d009      	beq.n	2e16 <_usb_d_dev_ep_stall+0x22>
    2e02:	001a      	movs	r2, r3
    2e04:	2800      	cmp	r0, #0
    2e06:	db04      	blt.n	2e12 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    2e08:	2b04      	cmp	r3, #4
    2e0a:	d905      	bls.n	2e18 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2e0c:	2012      	movs	r0, #18
    2e0e:	4240      	negs	r0, r0
    2e10:	e019      	b.n	2e46 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2e12:	1d1a      	adds	r2, r3, #4
    2e14:	e7f8      	b.n	2e08 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    2e16:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    2e18:	2901      	cmp	r1, #1
    2e1a:	d015      	beq.n	2e48 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2e1c:	2900      	cmp	r1, #0
    2e1e:	d036      	beq.n	2e8e <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2e20:	0093      	lsls	r3, r2, #2
    2e22:	189b      	adds	r3, r3, r2
    2e24:	009b      	lsls	r3, r3, #2
    2e26:	4a47      	ldr	r2, [pc, #284]	; (2f44 <_usb_d_dev_ep_stall+0x150>)
    2e28:	18d2      	adds	r2, r2, r3
    2e2a:	3246      	adds	r2, #70	; 0x46
    2e2c:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2e2e:	230f      	movs	r3, #15
    2e30:	4013      	ands	r3, r2
    2e32:	015b      	lsls	r3, r3, #5
    2e34:	4a44      	ldr	r2, [pc, #272]	; (2f48 <_usb_d_dev_ep_stall+0x154>)
    2e36:	4694      	mov	ip, r2
    2e38:	4463      	add	r3, ip
    2e3a:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2e3c:	2310      	movs	r3, #16
    2e3e:	40a3      	lsls	r3, r4
    2e40:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    2e42:	1e43      	subs	r3, r0, #1
    2e44:	4198      	sbcs	r0, r3
}
    2e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2e48:	2510      	movs	r5, #16
    2e4a:	40a5      	lsls	r5, r4
    2e4c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2e4e:	493d      	ldr	r1, [pc, #244]	; (2f44 <_usb_d_dev_ep_stall+0x150>)
    2e50:	0090      	lsls	r0, r2, #2
    2e52:	1883      	adds	r3, r0, r2
    2e54:	009b      	lsls	r3, r3, #2
    2e56:	18cb      	adds	r3, r1, r3
    2e58:	3346      	adds	r3, #70	; 0x46
    2e5a:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2e5c:	230f      	movs	r3, #15
    2e5e:	4033      	ands	r3, r6
    2e60:	015e      	lsls	r6, r3, #5
    2e62:	4f39      	ldr	r7, [pc, #228]	; (2f48 <_usb_d_dev_ep_stall+0x154>)
    2e64:	46bc      	mov	ip, r7
    2e66:	4466      	add	r6, ip
    2e68:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2e6a:	2520      	movs	r5, #32
    2e6c:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2e6e:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2e70:	015b      	lsls	r3, r3, #5
    2e72:	4d36      	ldr	r5, [pc, #216]	; (2f4c <_usb_d_dev_ep_stall+0x158>)
    2e74:	46ac      	mov	ip, r5
    2e76:	4463      	add	r3, ip
    2e78:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    2e7a:	1882      	adds	r2, r0, r2
    2e7c:	0092      	lsls	r2, r2, #2
    2e7e:	188a      	adds	r2, r1, r2
    2e80:	3240      	adds	r2, #64	; 0x40
    2e82:	79d3      	ldrb	r3, [r2, #7]
    2e84:	2108      	movs	r1, #8
    2e86:	430b      	orrs	r3, r1
    2e88:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2e8a:	2000      	movs	r0, #0
    2e8c:	e7db      	b.n	2e46 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2e8e:	0093      	lsls	r3, r2, #2
    2e90:	189b      	adds	r3, r3, r2
    2e92:	0099      	lsls	r1, r3, #2
    2e94:	4b2b      	ldr	r3, [pc, #172]	; (2f44 <_usb_d_dev_ep_stall+0x150>)
    2e96:	185b      	adds	r3, r3, r1
    2e98:	3346      	adds	r3, #70	; 0x46
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	210f      	movs	r1, #15
    2e9e:	400b      	ands	r3, r1
    2ea0:	015d      	lsls	r5, r3, #5
    2ea2:	492b      	ldr	r1, [pc, #172]	; (2f50 <_usb_d_dev_ep_stall+0x15c>)
    2ea4:	468c      	mov	ip, r1
    2ea6:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2ea8:	2183      	movs	r1, #131	; 0x83
    2eaa:	0049      	lsls	r1, r1, #1
    2eac:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2eae:	39f6      	subs	r1, #246	; 0xf6
    2eb0:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2eb2:	2000      	movs	r0, #0
	if (!is_stalled) {
    2eb4:	420e      	tst	r6, r1
    2eb6:	d0c6      	beq.n	2e46 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2eb8:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2eba:	3005      	adds	r0, #5
    2ebc:	30ff      	adds	r0, #255	; 0xff
    2ebe:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2ec0:	2120      	movs	r1, #32
    2ec2:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2ec4:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2ec6:	015b      	lsls	r3, r3, #5
    2ec8:	4e22      	ldr	r6, [pc, #136]	; (2f54 <_usb_d_dev_ep_stall+0x160>)
    2eca:	46b4      	mov	ip, r6
    2ecc:	4463      	add	r3, ip
    2ece:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2ed0:	2308      	movs	r3, #8
    2ed2:	33ff      	adds	r3, #255	; 0xff
    2ed4:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2ed6:	420b      	tst	r3, r1
    2ed8:	d009      	beq.n	2eee <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2eda:	2308      	movs	r3, #8
    2edc:	33ff      	adds	r3, #255	; 0xff
    2ede:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2ee0:	3b07      	subs	r3, #7
    2ee2:	3bff      	subs	r3, #255	; 0xff
    2ee4:	40a3      	lsls	r3, r4
    2ee6:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2ee8:	2182      	movs	r1, #130	; 0x82
    2eea:	0049      	lsls	r1, r1, #1
    2eec:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2eee:	0093      	lsls	r3, r2, #2
    2ef0:	189b      	adds	r3, r3, r2
    2ef2:	0099      	lsls	r1, r3, #2
    2ef4:	4b13      	ldr	r3, [pc, #76]	; (2f44 <_usb_d_dev_ep_stall+0x150>)
    2ef6:	185b      	adds	r3, r3, r1
    2ef8:	3340      	adds	r3, #64	; 0x40
    2efa:	79d9      	ldrb	r1, [r3, #7]
    2efc:	2307      	movs	r3, #7
    2efe:	400b      	ands	r3, r1
    2f00:	2b01      	cmp	r3, #1
    2f02:	d00b      	beq.n	2f1c <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    2f04:	0093      	lsls	r3, r2, #2
    2f06:	189a      	adds	r2, r3, r2
    2f08:	0092      	lsls	r2, r2, #2
    2f0a:	4b0e      	ldr	r3, [pc, #56]	; (2f44 <_usb_d_dev_ep_stall+0x150>)
    2f0c:	189b      	adds	r3, r3, r2
    2f0e:	3340      	adds	r3, #64	; 0x40
    2f10:	79da      	ldrb	r2, [r3, #7]
    2f12:	2108      	movs	r1, #8
    2f14:	438a      	bics	r2, r1
    2f16:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2f18:	2000      	movs	r0, #0
    2f1a:	e794      	b.n	2e46 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2f1c:	3306      	adds	r3, #6
    2f1e:	33ff      	adds	r3, #255	; 0xff
    2f20:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2f22:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2f24:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2f26:	4219      	tst	r1, r3
    2f28:	d000      	beq.n	2f2c <_usb_d_dev_ep_stall+0x138>
    2f2a:	e78c      	b.n	2e46 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2f2c:	0093      	lsls	r3, r2, #2
    2f2e:	189a      	adds	r2, r3, r2
    2f30:	0092      	lsls	r2, r2, #2
    2f32:	4b04      	ldr	r3, [pc, #16]	; (2f44 <_usb_d_dev_ep_stall+0x150>)
    2f34:	189b      	adds	r3, r3, r2
    2f36:	3340      	adds	r3, #64	; 0x40
    2f38:	79da      	ldrb	r2, [r3, #7]
    2f3a:	2108      	movs	r1, #8
    2f3c:	438a      	bics	r2, r1
    2f3e:	71da      	strb	r2, [r3, #7]
    2f40:	e781      	b.n	2e46 <_usb_d_dev_ep_stall+0x52>
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	200005fc 	.word	0x200005fc
    2f48:	41005100 	.word	0x41005100
    2f4c:	41005109 	.word	0x41005109
    2f50:	41005000 	.word	0x41005000
    2f54:	41005108 	.word	0x41005108

00002f58 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2f58:	b570      	push	{r4, r5, r6, lr}
    2f5a:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2f5c:	230f      	movs	r3, #15
    2f5e:	4018      	ands	r0, r3
    2f60:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2f62:	4b16      	ldr	r3, [pc, #88]	; (2fbc <_usb_d_dev_ep_read_req+0x64>)
    2f64:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    2f66:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2f68:	685b      	ldr	r3, [r3, #4]
    2f6a:	049b      	lsls	r3, r3, #18
    2f6c:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2f6e:	2804      	cmp	r0, #4
    2f70:	d81a      	bhi.n	2fa8 <_usb_d_dev_ep_read_req+0x50>
    2f72:	2d00      	cmp	r5, #0
    2f74:	d01b      	beq.n	2fae <_usb_d_dev_ep_read_req+0x56>
    2f76:	4b12      	ldr	r3, [pc, #72]	; (2fc0 <_usb_d_dev_ep_read_req+0x68>)
    2f78:	469c      	mov	ip, r3
    2f7a:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2f7c:	2380      	movs	r3, #128	; 0x80
    2f7e:	005b      	lsls	r3, r3, #1
    2f80:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    2f82:	2b11      	cmp	r3, #17
    2f84:	d116      	bne.n	2fb4 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2f86:	2308      	movs	r3, #8
    2f88:	33ff      	adds	r3, #255	; 0xff
    2f8a:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    2f8c:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    2f8e:	06db      	lsls	r3, r3, #27
    2f90:	d400      	bmi.n	2f94 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    2f92:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    2f94:	2208      	movs	r2, #8
    2f96:	0028      	movs	r0, r5
    2f98:	4b0a      	ldr	r3, [pc, #40]	; (2fc4 <_usb_d_dev_ep_read_req+0x6c>)
    2f9a:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2f9c:	2210      	movs	r2, #16
    2f9e:	2308      	movs	r3, #8
    2fa0:	33ff      	adds	r3, #255	; 0xff
    2fa2:	54e2      	strb	r2, [r4, r3]
	return bytes;
    2fa4:	0030      	movs	r0, r6
    2fa6:	e7f4      	b.n	2f92 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2fa8:	2012      	movs	r0, #18
    2faa:	4240      	negs	r0, r0
    2fac:	e7f1      	b.n	2f92 <_usb_d_dev_ep_read_req+0x3a>
    2fae:	2012      	movs	r0, #18
    2fb0:	4240      	negs	r0, r0
    2fb2:	e7ee      	b.n	2f92 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2fb4:	2013      	movs	r0, #19
    2fb6:	4240      	negs	r0, r0
    2fb8:	e7eb      	b.n	2f92 <_usb_d_dev_ep_read_req+0x3a>
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	2000057c 	.word	0x2000057c
    2fc0:	41005000 	.word	0x41005000
    2fc4:	00005421 	.word	0x00005421

00002fc8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fca:	46de      	mov	lr, fp
    2fcc:	4657      	mov	r7, sl
    2fce:	464e      	mov	r6, r9
    2fd0:	4645      	mov	r5, r8
    2fd2:	b5e0      	push	{r5, r6, r7, lr}
    2fd4:	b085      	sub	sp, #20
    2fd6:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2fd8:	7a05      	ldrb	r5, [r0, #8]
    2fda:	230f      	movs	r3, #15
    2fdc:	402b      	ands	r3, r5
    2fde:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d100      	bne.n	2fe6 <_usb_d_dev_ep_trans+0x1e>
    2fe4:	e0d0      	b.n	3188 <_usb_d_dev_ep_trans+0x1c0>
    2fe6:	001e      	movs	r6, r3
    2fe8:	2d00      	cmp	r5, #0
    2fea:	db39      	blt.n	3060 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    2fec:	0034      	movs	r4, r6
    2fee:	4a72      	ldr	r2, [pc, #456]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    2ff0:	2120      	movs	r1, #32
    2ff2:	4688      	mov	r8, r1
    2ff4:	4490      	add	r8, r2
    2ff6:	1c71      	adds	r1, r6, #1
    2ff8:	0088      	lsls	r0, r1, #2
    2ffa:	1840      	adds	r0, r0, r1
    2ffc:	0080      	lsls	r0, r0, #2
    2ffe:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3000:	00b1      	lsls	r1, r6, #2
    3002:	1989      	adds	r1, r1, r6
    3004:	0089      	lsls	r1, r1, #2
    3006:	1852      	adds	r2, r2, r1
    3008:	3244      	adds	r2, #68	; 0x44
    300a:	8812      	ldrh	r2, [r2, #0]
    300c:	496b      	ldr	r1, [pc, #428]	; (31bc <_usb_d_dev_ep_trans+0x1f4>)
    300e:	428a      	cmp	r2, r1
    3010:	d028      	beq.n	3064 <_usb_d_dev_ep_trans+0x9c>
    3012:	1e56      	subs	r6, r2, #1
    3014:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    3016:	6879      	ldr	r1, [r7, #4]
    3018:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    301a:	2b04      	cmp	r3, #4
    301c:	d900      	bls.n	3020 <_usb_d_dev_ep_trans+0x58>
    301e:	e09e      	b.n	315e <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3020:	683b      	ldr	r3, [r7, #0]
    3022:	4867      	ldr	r0, [pc, #412]	; (31c0 <_usb_d_dev_ep_trans+0x1f8>)
    3024:	4283      	cmp	r3, r0
    3026:	d91f      	bls.n	3068 <_usb_d_dev_ep_trans+0xa0>
    3028:	1858      	adds	r0, r3, r1
    302a:	9001      	str	r0, [sp, #4]
    302c:	4865      	ldr	r0, [pc, #404]	; (31c4 <_usb_d_dev_ep_trans+0x1fc>)
    302e:	4684      	mov	ip, r0
    3030:	9801      	ldr	r0, [sp, #4]
    3032:	4560      	cmp	r0, ip
    3034:	d818      	bhi.n	3068 <_usb_d_dev_ep_trans+0xa0>
    3036:	079b      	lsls	r3, r3, #30
    3038:	d116      	bne.n	3068 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    303a:	2d00      	cmp	r5, #0
    303c:	db30      	blt.n	30a0 <_usb_d_dev_ep_trans+0xd8>
    303e:	428a      	cmp	r2, r1
    3040:	d900      	bls.n	3044 <_usb_d_dev_ep_trans+0x7c>
    3042:	e0ad      	b.n	31a0 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3044:	2e00      	cmp	r6, #0
    3046:	d02e      	beq.n	30a6 <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    3048:	00a3      	lsls	r3, r4, #2
    304a:	191b      	adds	r3, r3, r4
    304c:	009b      	lsls	r3, r3, #2
    304e:	4a5a      	ldr	r2, [pc, #360]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    3050:	18d3      	adds	r3, r2, r3
    3052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3054:	2b00      	cmp	r3, #0
    3056:	d100      	bne.n	305a <_usb_d_dev_ep_trans+0x92>
    3058:	e087      	b.n	316a <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    305a:	2300      	movs	r3, #0
    305c:	4699      	mov	r9, r3
    305e:	e00e      	b.n	307e <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3060:	1d1e      	adds	r6, r3, #4
    3062:	e7c3      	b.n	2fec <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3064:	0016      	movs	r6, r2
    3066:	e7d6      	b.n	3016 <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    3068:	00a3      	lsls	r3, r4, #2
    306a:	191b      	adds	r3, r3, r4
    306c:	009b      	lsls	r3, r3, #2
    306e:	4a52      	ldr	r2, [pc, #328]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    3070:	18d3      	adds	r3, r2, r3
    3072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3074:	2b00      	cmp	r3, #0
    3076:	d100      	bne.n	307a <_usb_d_dev_ep_trans+0xb2>
    3078:	e074      	b.n	3164 <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    307a:	2301      	movs	r3, #1
    307c:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    307e:	00a3      	lsls	r3, r4, #2
    3080:	191b      	adds	r3, r3, r4
    3082:	009a      	lsls	r2, r3, #2
    3084:	4b4c      	ldr	r3, [pc, #304]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    3086:	189b      	adds	r3, r3, r2
    3088:	3340      	adds	r3, #64	; 0x40
    308a:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    308c:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    308e:	071b      	lsls	r3, r3, #28
    3090:	d50c      	bpl.n	30ac <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3092:	b005      	add	sp, #20
    3094:	bc3c      	pop	{r2, r3, r4, r5}
    3096:	4690      	mov	r8, r2
    3098:	4699      	mov	r9, r3
    309a:	46a2      	mov	sl, r4
    309c:	46ab      	mov	fp, r5
    309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    30a0:	2300      	movs	r3, #0
    30a2:	4699      	mov	r9, r3
    30a4:	e7eb      	b.n	307e <_usb_d_dev_ep_trans+0xb6>
    30a6:	2300      	movs	r3, #0
    30a8:	4699      	mov	r9, r3
    30aa:	e7e8      	b.n	307e <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    30ac:	a803      	add	r0, sp, #12
    30ae:	4b46      	ldr	r3, [pc, #280]	; (31c8 <_usb_d_dev_ep_trans+0x200>)
    30b0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    30b2:	00a3      	lsls	r3, r4, #2
    30b4:	191b      	adds	r3, r3, r4
    30b6:	009a      	lsls	r2, r3, #2
    30b8:	4b3f      	ldr	r3, [pc, #252]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    30ba:	189b      	adds	r3, r3, r2
    30bc:	3340      	adds	r3, #64	; 0x40
    30be:	79db      	ldrb	r3, [r3, #7]
    30c0:	065b      	lsls	r3, r3, #25
    30c2:	d441      	bmi.n	3148 <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    30c4:	00a3      	lsls	r3, r4, #2
    30c6:	191b      	adds	r3, r3, r4
    30c8:	009b      	lsls	r3, r3, #2
    30ca:	4a3b      	ldr	r2, [pc, #236]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    30cc:	4693      	mov	fp, r2
    30ce:	449b      	add	fp, r3
    30d0:	2340      	movs	r3, #64	; 0x40
    30d2:	445b      	add	r3, fp
    30d4:	469a      	mov	sl, r3
    30d6:	79db      	ldrb	r3, [r3, #7]
    30d8:	2240      	movs	r2, #64	; 0x40
    30da:	4313      	orrs	r3, r2
    30dc:	4652      	mov	r2, sl
    30de:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    30e0:	a803      	add	r0, sp, #12
    30e2:	4b3a      	ldr	r3, [pc, #232]	; (31cc <_usb_d_dev_ep_trans+0x204>)
    30e4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    30e6:	465b      	mov	r3, fp
    30e8:	683a      	ldr	r2, [r7, #0]
    30ea:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    30ec:	687a      	ldr	r2, [r7, #4]
    30ee:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    30f0:	2300      	movs	r3, #0
    30f2:	465a      	mov	r2, fp
    30f4:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    30f6:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    30f8:	01d2      	lsls	r2, r2, #7
    30fa:	4653      	mov	r3, sl
    30fc:	79d9      	ldrb	r1, [r3, #7]
    30fe:	237f      	movs	r3, #127	; 0x7f
    3100:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    3102:	4649      	mov	r1, r9
    3104:	0149      	lsls	r1, r1, #5
    3106:	4313      	orrs	r3, r2
    3108:	2220      	movs	r2, #32
    310a:	4393      	bics	r3, r2
    310c:	430b      	orrs	r3, r1
    310e:	4652      	mov	r2, sl
    3110:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3112:	7a7b      	ldrb	r3, [r7, #9]
    3114:	2200      	movs	r2, #0
    3116:	2b00      	cmp	r3, #0
    3118:	d002      	beq.n	3120 <_usb_d_dev_ep_trans+0x158>
    311a:	4272      	negs	r2, r6
    311c:	4172      	adcs	r2, r6
    311e:	b2d2      	uxtb	r2, r2
    3120:	00a3      	lsls	r3, r4, #2
    3122:	191c      	adds	r4, r3, r4
    3124:	00a4      	lsls	r4, r4, #2
    3126:	4b24      	ldr	r3, [pc, #144]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    3128:	191b      	adds	r3, r3, r4
    312a:	3340      	adds	r3, #64	; 0x40
    312c:	0112      	lsls	r2, r2, #4
    312e:	79de      	ldrb	r6, [r3, #7]
    3130:	2110      	movs	r1, #16
    3132:	438e      	bics	r6, r1
    3134:	4316      	orrs	r6, r2
    3136:	71de      	strb	r6, [r3, #7]
	if (dir) {
    3138:	2d00      	cmp	r5, #0
    313a:	db0a      	blt.n	3152 <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    313c:	2100      	movs	r1, #0
    313e:	4640      	mov	r0, r8
    3140:	4b23      	ldr	r3, [pc, #140]	; (31d0 <_usb_d_dev_ep_trans+0x208>)
    3142:	4798      	blx	r3
	return ERR_NONE;
    3144:	2000      	movs	r0, #0
    3146:	e7a4      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    3148:	a803      	add	r0, sp, #12
    314a:	4b20      	ldr	r3, [pc, #128]	; (31cc <_usb_d_dev_ep_trans+0x204>)
    314c:	4798      	blx	r3
		return USB_BUSY;
    314e:	2001      	movs	r0, #1
    3150:	e79f      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    3152:	2100      	movs	r1, #0
    3154:	4640      	mov	r0, r8
    3156:	4b1f      	ldr	r3, [pc, #124]	; (31d4 <_usb_d_dev_ep_trans+0x20c>)
    3158:	4798      	blx	r3
	return ERR_NONE;
    315a:	2000      	movs	r0, #0
    315c:	e799      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    315e:	2012      	movs	r0, #18
    3160:	4240      	negs	r0, r0
    3162:	e796      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    3164:	2013      	movs	r0, #19
    3166:	4240      	negs	r0, r0
    3168:	e793      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    316a:	2012      	movs	r0, #18
    316c:	4240      	negs	r0, r0
    316e:	e790      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    3170:	2013      	movs	r0, #19
    3172:	4240      	negs	r0, r0
    3174:	e78d      	b.n	3092 <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    3176:	6879      	ldr	r1, [r7, #4]
    3178:	058e      	lsls	r6, r1, #22
    317a:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    317c:	4b0e      	ldr	r3, [pc, #56]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    317e:	2034      	movs	r0, #52	; 0x34
    3180:	4680      	mov	r8, r0
    3182:	4498      	add	r8, r3
    3184:	2400      	movs	r4, #0
    3186:	e74b      	b.n	3020 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3188:	2244      	movs	r2, #68	; 0x44
    318a:	490b      	ldr	r1, [pc, #44]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    318c:	5a8a      	ldrh	r2, [r1, r2]
    318e:	490b      	ldr	r1, [pc, #44]	; (31bc <_usb_d_dev_ep_trans+0x1f4>)
    3190:	428a      	cmp	r2, r1
    3192:	d0f0      	beq.n	3176 <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    3194:	4908      	ldr	r1, [pc, #32]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    3196:	2034      	movs	r0, #52	; 0x34
    3198:	4680      	mov	r8, r0
    319a:	4488      	add	r8, r1
    319c:	2400      	movs	r4, #0
    319e:	e738      	b.n	3012 <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    31a0:	00a3      	lsls	r3, r4, #2
    31a2:	191b      	adds	r3, r3, r4
    31a4:	009b      	lsls	r3, r3, #2
    31a6:	4a04      	ldr	r2, [pc, #16]	; (31b8 <_usb_d_dev_ep_trans+0x1f0>)
    31a8:	18d3      	adds	r3, r2, r3
    31aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31ac:	2b00      	cmp	r3, #0
    31ae:	d0df      	beq.n	3170 <_usb_d_dev_ep_trans+0x1a8>
    31b0:	2301      	movs	r3, #1
    31b2:	4699      	mov	r9, r3
    31b4:	e763      	b.n	307e <_usb_d_dev_ep_trans+0xb6>
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	200005fc 	.word	0x200005fc
    31bc:	000003ff 	.word	0x000003ff
    31c0:	1fffffff 	.word	0x1fffffff
    31c4:	20007fff 	.word	0x20007fff
    31c8:	0000136d 	.word	0x0000136d
    31cc:	0000137b 	.word	0x0000137b
    31d0:	00002595 	.word	0x00002595
    31d4:	000023e9 	.word	0x000023e9

000031d8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    31d8:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    31da:	230f      	movs	r3, #15
    31dc:	4003      	ands	r3, r0
    31de:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31e0:	2b00      	cmp	r3, #0
    31e2:	d00e      	beq.n	3202 <_usb_d_dev_ep_abort+0x2a>
    31e4:	001a      	movs	r2, r3
    31e6:	2900      	cmp	r1, #0
    31e8:	db02      	blt.n	31f0 <_usb_d_dev_ep_abort+0x18>
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    31ea:	2b04      	cmp	r3, #4
    31ec:	d902      	bls.n	31f4 <_usb_d_dev_ep_abort+0x1c>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    31ee:	bd10      	pop	{r4, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31f0:	1d1a      	adds	r2, r3, #4
    31f2:	e7fa      	b.n	31ea <_usb_d_dev_ep_abort+0x12>
	return &dev_inst.ep[ep_index];
    31f4:	3201      	adds	r2, #1
    31f6:	2014      	movs	r0, #20
    31f8:	4342      	muls	r2, r0
    31fa:	4805      	ldr	r0, [pc, #20]	; (3210 <_usb_d_dev_ep_abort+0x38>)
    31fc:	3020      	adds	r0, #32
    31fe:	1880      	adds	r0, r0, r2
    3200:	e001      	b.n	3206 <_usb_d_dev_ep_abort+0x2e>
    3202:	4803      	ldr	r0, [pc, #12]	; (3210 <_usb_d_dev_ep_abort+0x38>)
    3204:	3034      	adds	r0, #52	; 0x34
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    3206:	0fc9      	lsrs	r1, r1, #31
    3208:	2202      	movs	r2, #2
    320a:	4b02      	ldr	r3, [pc, #8]	; (3214 <_usb_d_dev_ep_abort+0x3c>)
    320c:	4798      	blx	r3
    320e:	e7ee      	b.n	31ee <_usb_d_dev_ep_abort+0x16>
    3210:	200005fc 	.word	0x200005fc
    3214:	00002235 	.word	0x00002235

00003218 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3218:	1e0b      	subs	r3, r1, #0
    321a:	d006      	beq.n	322a <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    321c:	2801      	cmp	r0, #1
    321e:	d006      	beq.n	322e <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3220:	2800      	cmp	r0, #0
    3222:	d101      	bne.n	3228 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3224:	4a03      	ldr	r2, [pc, #12]	; (3234 <_usb_d_dev_register_callback+0x1c>)
    3226:	6213      	str	r3, [r2, #32]
	}
}
    3228:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    322a:	4b03      	ldr	r3, [pc, #12]	; (3238 <_usb_d_dev_register_callback+0x20>)
    322c:	e7f6      	b.n	321c <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    322e:	4a01      	ldr	r2, [pc, #4]	; (3234 <_usb_d_dev_register_callback+0x1c>)
    3230:	6253      	str	r3, [r2, #36]	; 0x24
    3232:	e7f9      	b.n	3228 <_usb_d_dev_register_callback+0x10>
    3234:	200005fc 	.word	0x200005fc
    3238:	00002145 	.word	0x00002145

0000323c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    323c:	1e0b      	subs	r3, r1, #0
    323e:	d008      	beq.n	3252 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3240:	2800      	cmp	r0, #0
    3242:	d008      	beq.n	3256 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3244:	2801      	cmp	r0, #1
    3246:	d009      	beq.n	325c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3248:	2802      	cmp	r0, #2
    324a:	d106      	bne.n	325a <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    324c:	4a05      	ldr	r2, [pc, #20]	; (3264 <_usb_d_dev_register_ep_callback+0x28>)
    324e:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    3250:	e003      	b.n	325a <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3252:	4b05      	ldr	r3, [pc, #20]	; (3268 <_usb_d_dev_register_ep_callback+0x2c>)
    3254:	e7f4      	b.n	3240 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3256:	4a03      	ldr	r2, [pc, #12]	; (3264 <_usb_d_dev_register_ep_callback+0x28>)
    3258:	6293      	str	r3, [r2, #40]	; 0x28
}
    325a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    325c:	4a01      	ldr	r2, [pc, #4]	; (3264 <_usb_d_dev_register_ep_callback+0x28>)
    325e:	62d3      	str	r3, [r2, #44]	; 0x2c
    3260:	e7fb      	b.n	325a <_usb_d_dev_register_ep_callback+0x1e>
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	200005fc 	.word	0x200005fc
    3268:	00002145 	.word	0x00002145

0000326c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    326e:	4b8b      	ldr	r3, [pc, #556]	; (349c <USB_Handler+0x230>)
    3270:	8c1e      	ldrh	r6, [r3, #32]
    3272:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3274:	2e00      	cmp	r6, #0
    3276:	d003      	beq.n	3280 <USB_Handler+0x14>
    3278:	4c89      	ldr	r4, [pc, #548]	; (34a0 <USB_Handler+0x234>)
    327a:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    327c:	2500      	movs	r5, #0
    327e:	e0ca      	b.n	3416 <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3280:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3282:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3284:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3286:	075a      	lsls	r2, r3, #29
    3288:	d418      	bmi.n	32bc <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    328a:	059a      	lsls	r2, r3, #22
    328c:	d41d      	bmi.n	32ca <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    328e:	061a      	lsls	r2, r3, #24
    3290:	d44f      	bmi.n	3332 <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3292:	2270      	movs	r2, #112	; 0x70
    3294:	421a      	tst	r2, r3
    3296:	d155      	bne.n	3344 <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3298:	071a      	lsls	r2, r3, #28
    329a:	d500      	bpl.n	329e <USB_Handler+0x32>
    329c:	e06e      	b.n	337c <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    329e:	07db      	lsls	r3, r3, #31
    32a0:	d5ea      	bpl.n	3278 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    32a2:	4b7e      	ldr	r3, [pc, #504]	; (349c <USB_Handler+0x230>)
    32a4:	4a7f      	ldr	r2, [pc, #508]	; (34a4 <USB_Handler+0x238>)
    32a6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    32a8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    32aa:	3a92      	subs	r2, #146	; 0x92
    32ac:	3aff      	subs	r2, #255	; 0xff
    32ae:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    32b0:	4b7b      	ldr	r3, [pc, #492]	; (34a0 <USB_Handler+0x234>)
    32b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32b4:	2100      	movs	r1, #0
    32b6:	2004      	movs	r0, #4
    32b8:	4798      	blx	r3
    32ba:	e005      	b.n	32c8 <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    32bc:	2204      	movs	r2, #4
    32be:	4b77      	ldr	r3, [pc, #476]	; (349c <USB_Handler+0x230>)
    32c0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    32c2:	4b77      	ldr	r3, [pc, #476]	; (34a0 <USB_Handler+0x234>)
    32c4:	6a1b      	ldr	r3, [r3, #32]
    32c6:	4798      	blx	r3

	_usb_d_dev_handler();
}
    32c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32ca:	4b74      	ldr	r3, [pc, #464]	; (349c <USB_Handler+0x230>)
    32cc:	4a75      	ldr	r2, [pc, #468]	; (34a4 <USB_Handler+0x238>)
    32ce:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    32d0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    32d2:	3a92      	subs	r2, #146	; 0x92
    32d4:	3aff      	subs	r2, #255	; 0xff
    32d6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    32d8:	4b73      	ldr	r3, [pc, #460]	; (34a8 <USB_Handler+0x23c>)
    32da:	891b      	ldrh	r3, [r3, #8]
    32dc:	071b      	lsls	r3, r3, #28
    32de:	0f1b      	lsrs	r3, r3, #28
    32e0:	2b03      	cmp	r3, #3
    32e2:	d024      	beq.n	332e <USB_Handler+0xc2>
    32e4:	4b70      	ldr	r3, [pc, #448]	; (34a8 <USB_Handler+0x23c>)
    32e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    32e8:	071b      	lsls	r3, r3, #28
    32ea:	0f1b      	lsrs	r3, r3, #28
    32ec:	2b03      	cmp	r3, #3
    32ee:	d012      	beq.n	3316 <USB_Handler+0xaa>
    32f0:	2348      	movs	r3, #72	; 0x48
    32f2:	4a6d      	ldr	r2, [pc, #436]	; (34a8 <USB_Handler+0x23c>)
    32f4:	5ad3      	ldrh	r3, [r2, r3]
    32f6:	071b      	lsls	r3, r3, #28
    32f8:	0f1b      	lsrs	r3, r3, #28
    32fa:	2b03      	cmp	r3, #3
    32fc:	d015      	beq.n	332a <USB_Handler+0xbe>
    32fe:	2368      	movs	r3, #104	; 0x68
    3300:	5ad3      	ldrh	r3, [r2, r3]
    3302:	071b      	lsls	r3, r3, #28
    3304:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    3306:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3308:	2b03      	cmp	r3, #3
    330a:	d005      	beq.n	3318 <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    330c:	4b64      	ldr	r3, [pc, #400]	; (34a0 <USB_Handler+0x234>)
    330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3310:	2003      	movs	r0, #3
    3312:	4798      	blx	r3
    3314:	e7d8      	b.n	32c8 <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3316:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3318:	015b      	lsls	r3, r3, #5
    331a:	4a63      	ldr	r2, [pc, #396]	; (34a8 <USB_Handler+0x23c>)
    331c:	18d3      	adds	r3, r2, r3
    331e:	8919      	ldrh	r1, [r3, #8]
    3320:	0449      	lsls	r1, r1, #17
    3322:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    3324:	2200      	movs	r2, #0
    3326:	811a      	strh	r2, [r3, #8]
    3328:	e7f0      	b.n	330c <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    332a:	2302      	movs	r3, #2
    332c:	e7f4      	b.n	3318 <USB_Handler+0xac>
    332e:	2300      	movs	r3, #0
    3330:	e7f2      	b.n	3318 <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3332:	2280      	movs	r2, #128	; 0x80
    3334:	4b59      	ldr	r3, [pc, #356]	; (349c <USB_Handler+0x230>)
    3336:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3338:	4b59      	ldr	r3, [pc, #356]	; (34a0 <USB_Handler+0x234>)
    333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    333c:	2100      	movs	r1, #0
    333e:	2005      	movs	r0, #5
    3340:	4798      	blx	r3
    3342:	e7c1      	b.n	32c8 <USB_Handler+0x5c>
    3344:	4b55      	ldr	r3, [pc, #340]	; (349c <USB_Handler+0x230>)
    3346:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3348:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    334a:	4a56      	ldr	r2, [pc, #344]	; (34a4 <USB_Handler+0x238>)
    334c:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    334e:	4b57      	ldr	r3, [pc, #348]	; (34ac <USB_Handler+0x240>)
    3350:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3352:	069b      	lsls	r3, r3, #26
    3354:	d40c      	bmi.n	3370 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3356:	4955      	ldr	r1, [pc, #340]	; (34ac <USB_Handler+0x240>)
	tmp &= mask;
    3358:	3a32      	subs	r2, #50	; 0x32
    335a:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    335c:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    335e:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3360:	2bd0      	cmp	r3, #208	; 0xd0
    3362:	d1fb      	bne.n	335c <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3364:	4b4e      	ldr	r3, [pc, #312]	; (34a0 <USB_Handler+0x234>)
    3366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3368:	2100      	movs	r1, #0
    336a:	2002      	movs	r0, #2
    336c:	4798      	blx	r3
    336e:	e7ab      	b.n	32c8 <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3370:	494e      	ldr	r1, [pc, #312]	; (34ac <USB_Handler+0x240>)
	tmp &= mask;
    3372:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3374:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3376:	421a      	tst	r2, r3
    3378:	d0fc      	beq.n	3374 <USB_Handler+0x108>
    337a:	e7f3      	b.n	3364 <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    337c:	4b47      	ldr	r3, [pc, #284]	; (349c <USB_Handler+0x230>)
    337e:	2100      	movs	r1, #0
    3380:	2280      	movs	r2, #128	; 0x80
    3382:	0052      	lsls	r2, r2, #1
    3384:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3386:	3af8      	subs	r2, #248	; 0xf8
    3388:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    338a:	3268      	adds	r2, #104	; 0x68
    338c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    338e:	4a45      	ldr	r2, [pc, #276]	; (34a4 <USB_Handler+0x238>)
    3390:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3392:	4b47      	ldr	r3, [pc, #284]	; (34b0 <USB_Handler+0x244>)
    3394:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3396:	4b42      	ldr	r3, [pc, #264]	; (34a0 <USB_Handler+0x234>)
    3398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    339a:	2100      	movs	r1, #0
    339c:	2001      	movs	r0, #1
    339e:	4798      	blx	r3
    33a0:	e792      	b.n	32c8 <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    33a2:	06cb      	lsls	r3, r1, #27
    33a4:	d407      	bmi.n	33b6 <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    33a6:	064b      	lsls	r3, r1, #25
    33a8:	d408      	bmi.n	33bc <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    33aa:	068b      	lsls	r3, r1, #26
    33ac:	d52e      	bpl.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    33ae:	2100      	movs	r1, #0
    33b0:	4b40      	ldr	r3, [pc, #256]	; (34b4 <USB_Handler+0x248>)
    33b2:	4798      	blx	r3
    33b4:	e02a      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    33b6:	4b40      	ldr	r3, [pc, #256]	; (34b8 <USB_Handler+0x24c>)
    33b8:	4798      	blx	r3
    33ba:	e027      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    33bc:	2101      	movs	r1, #1
    33be:	4b3d      	ldr	r3, [pc, #244]	; (34b4 <USB_Handler+0x248>)
    33c0:	4798      	blx	r3
    33c2:	e023      	b.n	340c <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    33c4:	064b      	lsls	r3, r1, #25
    33c6:	d40e      	bmi.n	33e6 <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    33c8:	070b      	lsls	r3, r1, #28
    33ca:	d410      	bmi.n	33ee <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    33cc:	078b      	lsls	r3, r1, #30
    33ce:	d412      	bmi.n	33f6 <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    33d0:	2307      	movs	r3, #7
    33d2:	401a      	ands	r2, r3
    33d4:	2a01      	cmp	r2, #1
    33d6:	d119      	bne.n	340c <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    33d8:	074b      	lsls	r3, r1, #29
    33da:	d410      	bmi.n	33fe <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    33dc:	06cb      	lsls	r3, r1, #27
    33de:	d515      	bpl.n	340c <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    33e0:	4b35      	ldr	r3, [pc, #212]	; (34b8 <USB_Handler+0x24c>)
    33e2:	4798      	blx	r3
    33e4:	e012      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    33e6:	2101      	movs	r1, #1
    33e8:	4b32      	ldr	r3, [pc, #200]	; (34b4 <USB_Handler+0x248>)
    33ea:	4798      	blx	r3
    33ec:	e00e      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    33ee:	2101      	movs	r1, #1
    33f0:	4b32      	ldr	r3, [pc, #200]	; (34bc <USB_Handler+0x250>)
    33f2:	4798      	blx	r3
    33f4:	e00a      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    33f6:	2101      	movs	r1, #1
    33f8:	4b31      	ldr	r3, [pc, #196]	; (34c0 <USB_Handler+0x254>)
    33fa:	4798      	blx	r3
    33fc:	e006      	b.n	340c <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    33fe:	2100      	movs	r1, #0
    3400:	4b2e      	ldr	r3, [pc, #184]	; (34bc <USB_Handler+0x250>)
    3402:	4798      	blx	r3
    3404:	e002      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    3406:	2100      	movs	r1, #0
    3408:	4b2a      	ldr	r3, [pc, #168]	; (34b4 <USB_Handler+0x248>)
    340a:	4798      	blx	r3
    340c:	3501      	adds	r5, #1
    340e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3410:	2d09      	cmp	r5, #9
    3412:	d100      	bne.n	3416 <USB_Handler+0x1aa>
    3414:	e758      	b.n	32c8 <USB_Handler+0x5c>
    3416:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    3418:	7ca1      	ldrb	r1, [r4, #18]
    341a:	29ff      	cmp	r1, #255	; 0xff
    341c:	d0f6      	beq.n	340c <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    341e:	230f      	movs	r3, #15
    3420:	400b      	ands	r3, r1
    3422:	2101      	movs	r1, #1
    3424:	4099      	lsls	r1, r3
    3426:	420e      	tst	r6, r1
    3428:	d0f0      	beq.n	340c <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    342a:	0159      	lsls	r1, r3, #5
    342c:	4f25      	ldr	r7, [pc, #148]	; (34c4 <USB_Handler+0x258>)
    342e:	46bc      	mov	ip, r7
    3430:	4461      	add	r1, ip
    3432:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3434:	015b      	lsls	r3, r3, #5
    3436:	4f24      	ldr	r7, [pc, #144]	; (34c8 <USB_Handler+0x25c>)
    3438:	46bc      	mov	ip, r7
    343a:	4463      	add	r3, ip
    343c:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    343e:	4019      	ands	r1, r3
	if (flags) {
    3440:	d0e4      	beq.n	340c <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3442:	00ab      	lsls	r3, r5, #2
    3444:	195a      	adds	r2, r3, r5
    3446:	0092      	lsls	r2, r2, #2
    3448:	4b15      	ldr	r3, [pc, #84]	; (34a0 <USB_Handler+0x234>)
    344a:	469c      	mov	ip, r3
    344c:	4462      	add	r2, ip
    344e:	3230      	adds	r2, #48	; 0x30
    3450:	7dd2      	ldrb	r2, [r2, #23]
    3452:	2347      	movs	r3, #71	; 0x47
    3454:	4013      	ands	r3, r2
    3456:	2b01      	cmp	r3, #1
    3458:	d0a3      	beq.n	33a2 <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    345a:	b253      	sxtb	r3, r2
    345c:	2b00      	cmp	r3, #0
    345e:	dbb1      	blt.n	33c4 <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3460:	068b      	lsls	r3, r1, #26
    3462:	d4d0      	bmi.n	3406 <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3464:	074b      	lsls	r3, r1, #29
    3466:	d40c      	bmi.n	3482 <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3468:	07cb      	lsls	r3, r1, #31
    346a:	d40e      	bmi.n	348a <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    346c:	2307      	movs	r3, #7
    346e:	401a      	ands	r2, r3
    3470:	2a01      	cmp	r2, #1
    3472:	d1cb      	bne.n	340c <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3474:	070b      	lsls	r3, r1, #28
    3476:	d40c      	bmi.n	3492 <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3478:	06cb      	lsls	r3, r1, #27
    347a:	d5c7      	bpl.n	340c <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    347c:	4b0e      	ldr	r3, [pc, #56]	; (34b8 <USB_Handler+0x24c>)
    347e:	4798      	blx	r3
    3480:	e7c4      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    3482:	2100      	movs	r1, #0
    3484:	4b0d      	ldr	r3, [pc, #52]	; (34bc <USB_Handler+0x250>)
    3486:	4798      	blx	r3
    3488:	e7c0      	b.n	340c <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    348a:	2101      	movs	r1, #1
    348c:	4b0f      	ldr	r3, [pc, #60]	; (34cc <USB_Handler+0x260>)
    348e:	4798      	blx	r3
    3490:	e7bc      	b.n	340c <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    3492:	2101      	movs	r1, #1
    3494:	4b09      	ldr	r3, [pc, #36]	; (34bc <USB_Handler+0x250>)
    3496:	4798      	blx	r3
    3498:	e7b8      	b.n	340c <USB_Handler+0x1a0>
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	41005000 	.word	0x41005000
    34a0:	200005fc 	.word	0x200005fc
    34a4:	00000201 	.word	0x00000201
    34a8:	2000057c 	.word	0x2000057c
    34ac:	40000800 	.word	0x40000800
    34b0:	000023a1 	.word	0x000023a1
    34b4:	000021dd 	.word	0x000021dd
    34b8:	00002149 	.word	0x00002149
    34bc:	000022a1 	.word	0x000022a1
    34c0:	000023e9 	.word	0x000023e9
    34c4:	41005100 	.word	0x41005100
    34c8:	41005109 	.word	0x41005109
    34cc:	00002595 	.word	0x00002595

000034d0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    34d0:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    34d2:	4806      	ldr	r0, [pc, #24]	; (34ec <cdc_device_acm_init+0x1c>)
    34d4:	3040      	adds	r0, #64	; 0x40
    34d6:	4b06      	ldr	r3, [pc, #24]	; (34f0 <cdc_device_acm_init+0x20>)
    34d8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    34da:	4b06      	ldr	r3, [pc, #24]	; (34f4 <cdc_device_acm_init+0x24>)
    34dc:	4798      	blx	r3

	usbdc_start(single_desc);
    34de:	4806      	ldr	r0, [pc, #24]	; (34f8 <cdc_device_acm_init+0x28>)
    34e0:	4b06      	ldr	r3, [pc, #24]	; (34fc <cdc_device_acm_init+0x2c>)
    34e2:	4798      	blx	r3
	usbdc_attach();
    34e4:	4b06      	ldr	r3, [pc, #24]	; (3500 <cdc_device_acm_init+0x30>)
    34e6:	4798      	blx	r3
}
    34e8:	bd10      	pop	{r4, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	20000924 	.word	0x20000924
    34f0:	00003ef1 	.word	0x00003ef1
    34f4:	000037a9 	.word	0x000037a9
    34f8:	20000014 	.word	0x20000014
    34fc:	00003f69 	.word	0x00003f69
    3500:	00003fa1 	.word	0x00003fa1

00003504 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3504:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    3506:	4b01      	ldr	r3, [pc, #4]	; (350c <usb_init+0x8>)
    3508:	4798      	blx	r3
}
    350a:	bd10      	pop	{r4, pc}
    350c:	000034d1 	.word	0x000034d1

00003510 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3510:	b5f0      	push	{r4, r5, r6, r7, lr}
    3512:	b083      	sub	sp, #12
    3514:	0006      	movs	r6, r0
    3516:	000c      	movs	r4, r1
    3518:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    351a:	780a      	ldrb	r2, [r1, #0]
    351c:	0653      	lsls	r3, r2, #25
    351e:	0f9b      	lsrs	r3, r3, #30
    3520:	2b01      	cmp	r3, #1
    3522:	d000      	beq.n	3526 <cdcdf_acm_req+0x16>
    3524:	e06c      	b.n	3600 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3526:	7909      	ldrb	r1, [r1, #4]
    3528:	7963      	ldrb	r3, [r4, #5]
    352a:	021b      	lsls	r3, r3, #8
    352c:	430b      	orrs	r3, r1
    352e:	493b      	ldr	r1, [pc, #236]	; (361c <cdcdf_acm_req+0x10c>)
    3530:	7809      	ldrb	r1, [r1, #0]
    3532:	4299      	cmp	r1, r3
    3534:	d003      	beq.n	353e <cdcdf_acm_req+0x2e>
    3536:	4939      	ldr	r1, [pc, #228]	; (361c <cdcdf_acm_req+0x10c>)
    3538:	7849      	ldrb	r1, [r1, #1]
    353a:	4299      	cmp	r1, r3
    353c:	d163      	bne.n	3606 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    353e:	b252      	sxtb	r2, r2
    3540:	2a00      	cmp	r2, #0
    3542:	db0e      	blt.n	3562 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    3544:	79a7      	ldrb	r7, [r4, #6]
    3546:	79e3      	ldrb	r3, [r4, #7]
    3548:	021b      	lsls	r3, r3, #8
    354a:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    354c:	4b34      	ldr	r3, [pc, #208]	; (3620 <cdcdf_acm_req+0x110>)
    354e:	4798      	blx	r3
	switch (req->bRequest) {
    3550:	7863      	ldrb	r3, [r4, #1]
    3552:	2b20      	cmp	r3, #32
    3554:	d018      	beq.n	3588 <cdcdf_acm_req+0x78>
    3556:	2b22      	cmp	r3, #34	; 0x22
    3558:	d03c      	beq.n	35d4 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    355a:	200d      	movs	r0, #13
    355c:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    355e:	b003      	add	sp, #12
    3560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3562:	2d01      	cmp	r5, #1
    3564:	d052      	beq.n	360c <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    3566:	7863      	ldrb	r3, [r4, #1]
    3568:	2b21      	cmp	r3, #33	; 0x21
    356a:	d151      	bne.n	3610 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    356c:	79a2      	ldrb	r2, [r4, #6]
    356e:	79e3      	ldrb	r3, [r4, #7]
    3570:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3572:	4313      	orrs	r3, r2
    3574:	2b07      	cmp	r3, #7
    3576:	d14e      	bne.n	3616 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3578:	2300      	movs	r3, #0
    357a:	2207      	movs	r2, #7
    357c:	4927      	ldr	r1, [pc, #156]	; (361c <cdcdf_acm_req+0x10c>)
    357e:	3108      	adds	r1, #8
    3580:	0030      	movs	r0, r6
    3582:	4c28      	ldr	r4, [pc, #160]	; (3624 <cdcdf_acm_req+0x114>)
    3584:	47a0      	blx	r4
    3586:	e7ea      	b.n	355e <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3588:	2f07      	cmp	r7, #7
    358a:	d134      	bne.n	35f6 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    358c:	2d00      	cmp	r5, #0
    358e:	d01a      	beq.n	35c6 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3590:	2207      	movs	r2, #7
    3592:	0001      	movs	r1, r0
    3594:	4668      	mov	r0, sp
    3596:	4b24      	ldr	r3, [pc, #144]	; (3628 <cdcdf_acm_req+0x118>)
    3598:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    359a:	4b20      	ldr	r3, [pc, #128]	; (361c <cdcdf_acm_req+0x10c>)
    359c:	691b      	ldr	r3, [r3, #16]
    359e:	2b00      	cmp	r3, #0
    35a0:	d005      	beq.n	35ae <cdcdf_acm_req+0x9e>
    35a2:	4668      	mov	r0, sp
    35a4:	4798      	blx	r3
    35a6:	0003      	movs	r3, r0
			return ERR_NONE;
    35a8:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    35aa:	2b00      	cmp	r3, #0
    35ac:	d0d7      	beq.n	355e <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    35ae:	4a1b      	ldr	r2, [pc, #108]	; (361c <cdcdf_acm_req+0x10c>)
    35b0:	0013      	movs	r3, r2
    35b2:	9900      	ldr	r1, [sp, #0]
    35b4:	6091      	str	r1, [r2, #8]
    35b6:	466a      	mov	r2, sp
    35b8:	8892      	ldrh	r2, [r2, #4]
    35ba:	819a      	strh	r2, [r3, #12]
    35bc:	466a      	mov	r2, sp
    35be:	7992      	ldrb	r2, [r2, #6]
    35c0:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    35c2:	2000      	movs	r0, #0
    35c4:	e7cb      	b.n	355e <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    35c6:	2300      	movs	r3, #0
    35c8:	2207      	movs	r2, #7
    35ca:	0001      	movs	r1, r0
    35cc:	0030      	movs	r0, r6
    35ce:	4c15      	ldr	r4, [pc, #84]	; (3624 <cdcdf_acm_req+0x114>)
    35d0:	47a0      	blx	r4
    35d2:	e7c4      	b.n	355e <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    35d4:	2300      	movs	r3, #0
    35d6:	2200      	movs	r2, #0
    35d8:	2100      	movs	r1, #0
    35da:	2000      	movs	r0, #0
    35dc:	4d11      	ldr	r5, [pc, #68]	; (3624 <cdcdf_acm_req+0x114>)
    35de:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    35e0:	4b0e      	ldr	r3, [pc, #56]	; (361c <cdcdf_acm_req+0x10c>)
    35e2:	695b      	ldr	r3, [r3, #20]
    35e4:	2b00      	cmp	r3, #0
    35e6:	d009      	beq.n	35fc <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    35e8:	78a2      	ldrb	r2, [r4, #2]
    35ea:	78e0      	ldrb	r0, [r4, #3]
    35ec:	0200      	lsls	r0, r0, #8
    35ee:	4310      	orrs	r0, r2
    35f0:	4798      	blx	r3
		return ERR_NONE;
    35f2:	2000      	movs	r0, #0
    35f4:	e7b3      	b.n	355e <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    35f6:	2001      	movs	r0, #1
    35f8:	4240      	negs	r0, r0
    35fa:	e7b0      	b.n	355e <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    35fc:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    35fe:	e7ae      	b.n	355e <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3600:	200a      	movs	r0, #10
    3602:	4240      	negs	r0, r0
    3604:	e7ab      	b.n	355e <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3606:	200a      	movs	r0, #10
    3608:	4240      	negs	r0, r0
    360a:	e7a8      	b.n	355e <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    360c:	2000      	movs	r0, #0
    360e:	e7a6      	b.n	355e <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    3610:	200d      	movs	r0, #13
    3612:	4240      	negs	r0, r0
    3614:	e7a3      	b.n	355e <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3616:	2001      	movs	r0, #1
    3618:	4240      	negs	r0, r0
    361a:	e7a0      	b.n	355e <cdcdf_acm_req+0x4e>
    361c:	200009a4 	.word	0x200009a4
    3620:	00003fad 	.word	0x00003fad
    3624:	00003a5d 	.word	0x00003a5d
    3628:	00005421 	.word	0x00005421

0000362c <cdcdf_acm_ctrl>:
{
    362c:	b5f0      	push	{r4, r5, r6, r7, lr}
    362e:	46de      	mov	lr, fp
    3630:	4657      	mov	r7, sl
    3632:	464e      	mov	r6, r9
    3634:	4645      	mov	r5, r8
    3636:	b5e0      	push	{r5, r6, r7, lr}
    3638:	b083      	sub	sp, #12
    363a:	0016      	movs	r6, r2
	switch (ctrl) {
    363c:	2901      	cmp	r1, #1
    363e:	d068      	beq.n	3712 <cdcdf_acm_ctrl+0xe6>
    3640:	2900      	cmp	r1, #0
    3642:	d00b      	beq.n	365c <cdcdf_acm_ctrl+0x30>
    3644:	2902      	cmp	r1, #2
    3646:	d100      	bne.n	364a <cdcdf_acm_ctrl+0x1e>
    3648:	e093      	b.n	3772 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    364a:	200d      	movs	r0, #13
    364c:	4240      	negs	r0, r0
}
    364e:	b003      	add	sp, #12
    3650:	bc3c      	pop	{r2, r3, r4, r5}
    3652:	4690      	mov	r8, r2
    3654:	4699      	mov	r9, r3
    3656:	46a2      	mov	sl, r4
    3658:	46ab      	mov	fp, r5
    365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    365c:	6883      	ldr	r3, [r0, #8]
    365e:	4698      	mov	r8, r3
	ifc = desc->sod;
    3660:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3662:	2800      	cmp	r0, #0
    3664:	d100      	bne.n	3668 <cdcdf_acm_ctrl+0x3c>
    3666:	e087      	b.n	3778 <cdcdf_acm_ctrl+0x14c>
    3668:	9301      	str	r3, [sp, #4]
    366a:	2301      	movs	r3, #1
    366c:	4443      	add	r3, r8
    366e:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3670:	4f47      	ldr	r7, [pc, #284]	; (3790 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    3672:	4b48      	ldr	r3, [pc, #288]	; (3794 <cdcdf_acm_ctrl+0x168>)
    3674:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    3676:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3678:	7943      	ldrb	r3, [r0, #5]
    367a:	2108      	movs	r1, #8
    367c:	438b      	bics	r3, r1
    367e:	2b02      	cmp	r3, #2
    3680:	d002      	beq.n	3688 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    3682:	200a      	movs	r0, #10
    3684:	4240      	negs	r0, r0
    3686:	e7e2      	b.n	364e <cdcdf_acm_ctrl+0x22>
    3688:	9901      	ldr	r1, [sp, #4]
    368a:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    368c:	780b      	ldrb	r3, [r1, #0]
    368e:	429a      	cmp	r2, r3
    3690:	d075      	beq.n	377e <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3692:	2bff      	cmp	r3, #255	; 0xff
    3694:	d176      	bne.n	3784 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3696:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3698:	2205      	movs	r2, #5
    369a:	6871      	ldr	r1, [r6, #4]
    369c:	4b3e      	ldr	r3, [pc, #248]	; (3798 <cdcdf_acm_ctrl+0x16c>)
    369e:	4798      	blx	r3
    36a0:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    36a2:	d11e      	bne.n	36e2 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    36a4:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    36a6:	7803      	ldrb	r3, [r0, #0]
    36a8:	18c0      	adds	r0, r0, r3
    36aa:	2204      	movs	r2, #4
    36ac:	6871      	ldr	r1, [r6, #4]
    36ae:	4b3a      	ldr	r3, [pc, #232]	; (3798 <cdcdf_acm_ctrl+0x16c>)
    36b0:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    36b2:	9b01      	ldr	r3, [sp, #4]
    36b4:	455b      	cmp	r3, fp
    36b6:	d027      	beq.n	3708 <cdcdf_acm_ctrl+0xdc>
    36b8:	9b01      	ldr	r3, [sp, #4]
    36ba:	3301      	adds	r3, #1
    36bc:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    36be:	2800      	cmp	r0, #0
    36c0:	d1d9      	bne.n	3676 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    36c2:	200a      	movs	r0, #10
    36c4:	4240      	negs	r0, r0
    36c6:	e7c2      	b.n	364e <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    36c8:	4653      	mov	r3, sl
    36ca:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    36cc:	0028      	movs	r0, r5
    36ce:	4b31      	ldr	r3, [pc, #196]	; (3794 <cdcdf_acm_ctrl+0x168>)
    36d0:	4798      	blx	r3
			desc->sod = ep;
    36d2:	6034      	str	r4, [r6, #0]
    36d4:	7820      	ldrb	r0, [r4, #0]
    36d6:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    36d8:	6871      	ldr	r1, [r6, #4]
    36da:	4b30      	ldr	r3, [pc, #192]	; (379c <cdcdf_acm_ctrl+0x170>)
    36dc:	4798      	blx	r3
    36de:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    36e0:	d0e0      	beq.n	36a4 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    36e2:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    36e4:	7963      	ldrb	r3, [r4, #5]
    36e6:	021b      	lsls	r3, r3, #8
    36e8:	7922      	ldrb	r2, [r4, #4]
    36ea:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    36ec:	b292      	uxth	r2, r2
    36ee:	78e1      	ldrb	r1, [r4, #3]
    36f0:	0028      	movs	r0, r5
    36f2:	47b8      	blx	r7
    36f4:	2800      	cmp	r0, #0
    36f6:	d148      	bne.n	378a <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    36f8:	b26b      	sxtb	r3, r5
    36fa:	2b00      	cmp	r3, #0
    36fc:	dbe4      	blt.n	36c8 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    36fe:	4643      	mov	r3, r8
    3700:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3702:	0028      	movs	r0, r5
    3704:	47c8      	blx	r9
    3706:	e7e4      	b.n	36d2 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    3708:	2201      	movs	r2, #1
    370a:	4b25      	ldr	r3, [pc, #148]	; (37a0 <cdcdf_acm_ctrl+0x174>)
    370c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    370e:	2000      	movs	r0, #0
    3710:	e79d      	b.n	364e <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3712:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3714:	2a00      	cmp	r2, #0
    3716:	d008      	beq.n	372a <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3718:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    371a:	795b      	ldrb	r3, [r3, #5]
    371c:	2208      	movs	r2, #8
    371e:	4393      	bics	r3, r2
    3720:	2b02      	cmp	r3, #2
    3722:	d002      	beq.n	372a <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    3724:	200a      	movs	r0, #10
    3726:	4240      	negs	r0, r0
    3728:	e791      	b.n	364e <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    372a:	7823      	ldrb	r3, [r4, #0]
    372c:	2bff      	cmp	r3, #255	; 0xff
    372e:	d008      	beq.n	3742 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    3730:	23ff      	movs	r3, #255	; 0xff
    3732:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3734:	78a0      	ldrb	r0, [r4, #2]
    3736:	28ff      	cmp	r0, #255	; 0xff
    3738:	d003      	beq.n	3742 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    373a:	4b1a      	ldr	r3, [pc, #104]	; (37a4 <cdcdf_acm_ctrl+0x178>)
    373c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    373e:	23ff      	movs	r3, #255	; 0xff
    3740:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3742:	7863      	ldrb	r3, [r4, #1]
    3744:	2bff      	cmp	r3, #255	; 0xff
    3746:	d008      	beq.n	375a <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    3748:	23ff      	movs	r3, #255	; 0xff
    374a:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    374c:	78e0      	ldrb	r0, [r4, #3]
    374e:	28ff      	cmp	r0, #255	; 0xff
    3750:	d003      	beq.n	375a <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3752:	4b14      	ldr	r3, [pc, #80]	; (37a4 <cdcdf_acm_ctrl+0x178>)
    3754:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3756:	23ff      	movs	r3, #255	; 0xff
    3758:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    375a:	7920      	ldrb	r0, [r4, #4]
    375c:	28ff      	cmp	r0, #255	; 0xff
    375e:	d003      	beq.n	3768 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    3760:	4b10      	ldr	r3, [pc, #64]	; (37a4 <cdcdf_acm_ctrl+0x178>)
    3762:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3764:	23ff      	movs	r3, #255	; 0xff
    3766:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3768:	2200      	movs	r2, #0
    376a:	4b0d      	ldr	r3, [pc, #52]	; (37a0 <cdcdf_acm_ctrl+0x174>)
    376c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    376e:	2000      	movs	r0, #0
    3770:	e76d      	b.n	364e <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    3772:	201b      	movs	r0, #27
    3774:	4240      	negs	r0, r0
    3776:	e76a      	b.n	364e <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    3778:	200a      	movs	r0, #10
    377a:	4240      	negs	r0, r0
    377c:	e767      	b.n	364e <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    377e:	2012      	movs	r0, #18
    3780:	4240      	negs	r0, r0
    3782:	e764      	b.n	364e <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    3784:	201c      	movs	r0, #28
    3786:	4240      	negs	r0, r0
    3788:	e761      	b.n	364e <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    378a:	2014      	movs	r0, #20
    378c:	4240      	negs	r0, r0
    378e:	e75e      	b.n	364e <cdcdf_acm_ctrl+0x22>
    3790:	000019b5 	.word	0x000019b5
    3794:	00001a49 	.word	0x00001a49
    3798:	00003fc9 	.word	0x00003fc9
    379c:	00003fff 	.word	0x00003fff
    37a0:	200009a4 	.word	0x200009a4
    37a4:	00001a1d 	.word	0x00001a1d

000037a8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    37a8:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    37aa:	4b0a      	ldr	r3, [pc, #40]	; (37d4 <cdcdf_acm_init+0x2c>)
    37ac:	4798      	blx	r3
    37ae:	2801      	cmp	r0, #1
    37b0:	d80c      	bhi.n	37cc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    37b2:	4809      	ldr	r0, [pc, #36]	; (37d8 <cdcdf_acm_init+0x30>)
    37b4:	4b09      	ldr	r3, [pc, #36]	; (37dc <cdcdf_acm_init+0x34>)
    37b6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    37b8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    37ba:	3018      	adds	r0, #24
    37bc:	4b08      	ldr	r3, [pc, #32]	; (37e0 <cdcdf_acm_init+0x38>)
    37be:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    37c0:	4908      	ldr	r1, [pc, #32]	; (37e4 <cdcdf_acm_init+0x3c>)
    37c2:	2001      	movs	r0, #1
    37c4:	4b08      	ldr	r3, [pc, #32]	; (37e8 <cdcdf_acm_init+0x40>)
    37c6:	4798      	blx	r3
	return ERR_NONE;
    37c8:	2000      	movs	r0, #0
}
    37ca:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    37cc:	2011      	movs	r0, #17
    37ce:	4240      	negs	r0, r0
    37d0:	e7fb      	b.n	37ca <cdcdf_acm_init+0x22>
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	00003fb9 	.word	0x00003fb9
    37d8:	200009a4 	.word	0x200009a4
    37dc:	0000362d 	.word	0x0000362d
    37e0:	00003f51 	.word	0x00003f51
    37e4:	20000074 	.word	0x20000074
    37e8:	00003eb9 	.word	0x00003eb9

000037ec <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    37ec:	b510      	push	{r4, lr}
    37ee:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    37f0:	4b07      	ldr	r3, [pc, #28]	; (3810 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    37f2:	795b      	ldrb	r3, [r3, #5]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d007      	beq.n	3808 <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    37f8:	4b05      	ldr	r3, [pc, #20]	; (3810 <cdcdf_acm_read+0x24>)
    37fa:	7918      	ldrb	r0, [r3, #4]
    37fc:	2300      	movs	r3, #0
    37fe:	000a      	movs	r2, r1
    3800:	0021      	movs	r1, r4
    3802:	4c04      	ldr	r4, [pc, #16]	; (3814 <cdcdf_acm_read+0x28>)
    3804:	47a0      	blx	r4
}
    3806:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3808:	2011      	movs	r0, #17
    380a:	4240      	negs	r0, r0
    380c:	e7fb      	b.n	3806 <cdcdf_acm_read+0x1a>
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	200009a4 	.word	0x200009a4
    3814:	00003a5d 	.word	0x00003a5d

00003818 <cdcdf_acm_write>:
{
    3818:	b510      	push	{r4, lr}
    381a:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    381c:	4b07      	ldr	r3, [pc, #28]	; (383c <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    381e:	795b      	ldrb	r3, [r3, #5]
    3820:	2b00      	cmp	r3, #0
    3822:	d007      	beq.n	3834 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    3824:	4b05      	ldr	r3, [pc, #20]	; (383c <cdcdf_acm_write+0x24>)
    3826:	78d8      	ldrb	r0, [r3, #3]
    3828:	2301      	movs	r3, #1
    382a:	000a      	movs	r2, r1
    382c:	0021      	movs	r1, r4
    382e:	4c04      	ldr	r4, [pc, #16]	; (3840 <cdcdf_acm_write+0x28>)
    3830:	47a0      	blx	r4
}
    3832:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3834:	2011      	movs	r0, #17
    3836:	4240      	negs	r0, r0
    3838:	e7fb      	b.n	3832 <cdcdf_acm_write+0x1a>
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	200009a4 	.word	0x200009a4
    3840:	00003a5d 	.word	0x00003a5d

00003844 <cdcdf_acm_stop_xfer>:
{
    3844:	b570      	push	{r4, r5, r6, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    3846:	4d03      	ldr	r5, [pc, #12]	; (3854 <cdcdf_acm_stop_xfer+0x10>)
    3848:	78e8      	ldrb	r0, [r5, #3]
    384a:	4c03      	ldr	r4, [pc, #12]	; (3858 <cdcdf_acm_stop_xfer+0x14>)
    384c:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    384e:	7928      	ldrb	r0, [r5, #4]
    3850:	47a0      	blx	r4
}
    3852:	bd70      	pop	{r4, r5, r6, pc}
    3854:	200009a4 	.word	0x200009a4
    3858:	00001bbd 	.word	0x00001bbd

0000385c <cdcdf_acm_register_callback>:
{
    385c:	b510      	push	{r4, lr}
	switch (cb_type) {
    385e:	2801      	cmp	r0, #1
    3860:	d010      	beq.n	3884 <cdcdf_acm_register_callback+0x28>
    3862:	2800      	cmp	r0, #0
    3864:	d006      	beq.n	3874 <cdcdf_acm_register_callback+0x18>
    3866:	2802      	cmp	r0, #2
    3868:	d014      	beq.n	3894 <cdcdf_acm_register_callback+0x38>
    386a:	2803      	cmp	r0, #3
    386c:	d016      	beq.n	389c <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    386e:	200d      	movs	r0, #13
    3870:	4240      	negs	r0, r0
    3872:	e006      	b.n	3882 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    3874:	4b0b      	ldr	r3, [pc, #44]	; (38a4 <cdcdf_acm_register_callback+0x48>)
    3876:	7918      	ldrb	r0, [r3, #4]
    3878:	000a      	movs	r2, r1
    387a:	2102      	movs	r1, #2
    387c:	4b0a      	ldr	r3, [pc, #40]	; (38a8 <cdcdf_acm_register_callback+0x4c>)
    387e:	4798      	blx	r3
	return ERR_NONE;
    3880:	2000      	movs	r0, #0
}
    3882:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    3884:	4b07      	ldr	r3, [pc, #28]	; (38a4 <cdcdf_acm_register_callback+0x48>)
    3886:	78d8      	ldrb	r0, [r3, #3]
    3888:	000a      	movs	r2, r1
    388a:	2102      	movs	r1, #2
    388c:	4b06      	ldr	r3, [pc, #24]	; (38a8 <cdcdf_acm_register_callback+0x4c>)
    388e:	4798      	blx	r3
	return ERR_NONE;
    3890:	2000      	movs	r0, #0
		break;
    3892:	e7f6      	b.n	3882 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    3894:	4b03      	ldr	r3, [pc, #12]	; (38a4 <cdcdf_acm_register_callback+0x48>)
    3896:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    3898:	2000      	movs	r0, #0
		break;
    389a:	e7f2      	b.n	3882 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    389c:	4b01      	ldr	r3, [pc, #4]	; (38a4 <cdcdf_acm_register_callback+0x48>)
    389e:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    38a0:	2000      	movs	r0, #0
		break;
    38a2:	e7ee      	b.n	3882 <cdcdf_acm_register_callback+0x26>
    38a4:	200009a4 	.word	0x200009a4
    38a8:	00001c55 	.word	0x00001c55

000038ac <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    38ac:	4b01      	ldr	r3, [pc, #4]	; (38b4 <cdcdf_acm_is_enabled+0x8>)
    38ae:	7958      	ldrb	r0, [r3, #5]
}
    38b0:	4770      	bx	lr
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	200009a4 	.word	0x200009a4

000038b8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    38b8:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    38ba:	4b06      	ldr	r3, [pc, #24]	; (38d4 <usbdc_unconfig+0x1c>)
    38bc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    38be:	2c00      	cmp	r4, #0
    38c0:	d007      	beq.n	38d2 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    38c2:	2200      	movs	r2, #0
    38c4:	2101      	movs	r1, #1
    38c6:	0020      	movs	r0, r4
    38c8:	6863      	ldr	r3, [r4, #4]
    38ca:	4798      	blx	r3
		func = func->next;
    38cc:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    38ce:	2c00      	cmp	r4, #0
    38d0:	d1f7      	bne.n	38c2 <usbdc_unconfig+0xa>
	}
}
    38d2:	bd10      	pop	{r4, pc}
    38d4:	200009c8 	.word	0x200009c8

000038d8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    38d8:	b570      	push	{r4, r5, r6, lr}
    38da:	0006      	movs	r6, r0
    38dc:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    38de:	4b07      	ldr	r3, [pc, #28]	; (38fc <usbdc_change_notify+0x24>)
    38e0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    38e2:	2c00      	cmp	r4, #0
    38e4:	d103      	bne.n	38ee <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    38e6:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    38e8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    38ea:	2c00      	cmp	r4, #0
    38ec:	d0fb      	beq.n	38e6 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    38ee:	6863      	ldr	r3, [r4, #4]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d0f9      	beq.n	38e8 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    38f4:	0029      	movs	r1, r5
    38f6:	0030      	movs	r0, r6
    38f8:	4798      	blx	r3
    38fa:	e7f5      	b.n	38e8 <usbdc_change_notify+0x10>
    38fc:	200009c8 	.word	0x200009c8

00003900 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3902:	0007      	movs	r7, r0
    3904:	000e      	movs	r6, r1
    3906:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3908:	4b0d      	ldr	r3, [pc, #52]	; (3940 <usbdc_request_handler+0x40>)
    390a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    390c:	2c00      	cmp	r4, #0
    390e:	d104      	bne.n	391a <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3910:	2000      	movs	r0, #0
    3912:	e011      	b.n	3938 <usbdc_request_handler+0x38>
		h = h->next;
    3914:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3916:	2c00      	cmp	r4, #0
    3918:	d00d      	beq.n	3936 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    391a:	6863      	ldr	r3, [r4, #4]
    391c:	2b00      	cmp	r3, #0
    391e:	d0f9      	beq.n	3914 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3920:	002a      	movs	r2, r5
    3922:	0031      	movs	r1, r6
    3924:	0038      	movs	r0, r7
    3926:	4798      	blx	r3
			if (0 == rc) {
    3928:	2800      	cmp	r0, #0
    392a:	d006      	beq.n	393a <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    392c:	300a      	adds	r0, #10
    392e:	d0f1      	beq.n	3914 <usbdc_request_handler+0x14>
				return -1;
    3930:	2001      	movs	r0, #1
    3932:	4240      	negs	r0, r0
    3934:	e000      	b.n	3938 <usbdc_request_handler+0x38>
	return false;
    3936:	2000      	movs	r0, #0
}
    3938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    393a:	2001      	movs	r0, #1
    393c:	e7fc      	b.n	3938 <usbdc_request_handler+0x38>
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	200009c8 	.word	0x200009c8

00003944 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3944:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3946:	4b06      	ldr	r3, [pc, #24]	; (3960 <usbd_sof_cb+0x1c>)
    3948:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    394a:	2c00      	cmp	r4, #0
    394c:	d103      	bne.n	3956 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    394e:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3950:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3952:	2c00      	cmp	r4, #0
    3954:	d0fb      	beq.n	394e <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    3956:	6863      	ldr	r3, [r4, #4]
    3958:	2b00      	cmp	r3, #0
    395a:	d0f9      	beq.n	3950 <usbd_sof_cb+0xc>
			sof->cb();
    395c:	4798      	blx	r3
    395e:	e7f7      	b.n	3950 <usbd_sof_cb+0xc>
    3960:	200009c8 	.word	0x200009c8

00003964 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3964:	b510      	push	{r4, lr}
    3966:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    3968:	2900      	cmp	r1, #0
    396a:	d003      	beq.n	3974 <usbdc_cb_ctl_done+0x10>
    396c:	2901      	cmp	r1, #1
    396e:	d029      	beq.n	39c4 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3970:	2000      	movs	r0, #0
    3972:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3974:	7813      	ldrb	r3, [r2, #0]
    3976:	2b00      	cmp	r3, #0
    3978:	d1fa      	bne.n	3970 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    397a:	7853      	ldrb	r3, [r2, #1]
    397c:	2b05      	cmp	r3, #5
    397e:	d011      	beq.n	39a4 <usbdc_cb_ctl_done+0x40>
    3980:	2b09      	cmp	r3, #9
    3982:	d1f5      	bne.n	3970 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    3984:	7892      	ldrb	r2, [r2, #2]
    3986:	4b12      	ldr	r3, [pc, #72]	; (39d0 <usbdc_cb_ctl_done+0x6c>)
    3988:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    398a:	78a3      	ldrb	r3, [r4, #2]
    398c:	78e1      	ldrb	r1, [r4, #3]
    398e:	0209      	lsls	r1, r1, #8
    3990:	4319      	orrs	r1, r3
    3992:	1e4b      	subs	r3, r1, #1
    3994:	4199      	sbcs	r1, r3
    3996:	3103      	adds	r1, #3
    3998:	4b0d      	ldr	r3, [pc, #52]	; (39d0 <usbdc_cb_ctl_done+0x6c>)
    399a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    399c:	2001      	movs	r0, #1
    399e:	4b0d      	ldr	r3, [pc, #52]	; (39d4 <usbdc_cb_ctl_done+0x70>)
    39a0:	4798      	blx	r3
    39a2:	e7e5      	b.n	3970 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    39a4:	7890      	ldrb	r0, [r2, #2]
    39a6:	4b0c      	ldr	r3, [pc, #48]	; (39d8 <usbdc_cb_ctl_done+0x74>)
    39a8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    39aa:	78a3      	ldrb	r3, [r4, #2]
    39ac:	78e1      	ldrb	r1, [r4, #3]
    39ae:	0209      	lsls	r1, r1, #8
    39b0:	4319      	orrs	r1, r3
    39b2:	1e4b      	subs	r3, r1, #1
    39b4:	4199      	sbcs	r1, r3
    39b6:	3102      	adds	r1, #2
    39b8:	4b05      	ldr	r3, [pc, #20]	; (39d0 <usbdc_cb_ctl_done+0x6c>)
    39ba:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    39bc:	2001      	movs	r0, #1
    39be:	4b05      	ldr	r3, [pc, #20]	; (39d4 <usbdc_cb_ctl_done+0x70>)
    39c0:	4798      	blx	r3
    39c2:	e7d5      	b.n	3970 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    39c4:	2201      	movs	r2, #1
    39c6:	0021      	movs	r1, r4
    39c8:	2000      	movs	r0, #0
    39ca:	4b04      	ldr	r3, [pc, #16]	; (39dc <usbdc_cb_ctl_done+0x78>)
    39cc:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    39ce:	e7cf      	b.n	3970 <usbdc_cb_ctl_done+0xc>
    39d0:	200009c8 	.word	0x200009c8
    39d4:	000038d9 	.word	0x000038d9
    39d8:	000019a9 	.word	0x000019a9
    39dc:	00003901 	.word	0x00003901

000039e0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    39e0:	b510      	push	{r4, lr}
	usbdc_unconfig();
    39e2:	4b0d      	ldr	r3, [pc, #52]	; (3a18 <usbdc_reset+0x38>)
    39e4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    39e6:	4c0d      	ldr	r4, [pc, #52]	; (3a1c <usbdc_reset+0x3c>)
    39e8:	2302      	movs	r3, #2
    39ea:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    39ec:	2300      	movs	r3, #0
    39ee:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    39f0:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    39f2:	2000      	movs	r0, #0
    39f4:	4b0a      	ldr	r3, [pc, #40]	; (3a20 <usbdc_reset+0x40>)
    39f6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    39f8:	7f20      	ldrb	r0, [r4, #28]
    39fa:	4b0a      	ldr	r3, [pc, #40]	; (3a24 <usbdc_reset+0x44>)
    39fc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    39fe:	4a0a      	ldr	r2, [pc, #40]	; (3a28 <usbdc_reset+0x48>)
    3a00:	2100      	movs	r1, #0
    3a02:	2000      	movs	r0, #0
    3a04:	4c09      	ldr	r4, [pc, #36]	; (3a2c <usbdc_reset+0x4c>)
    3a06:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3a08:	4a09      	ldr	r2, [pc, #36]	; (3a30 <usbdc_reset+0x50>)
    3a0a:	2102      	movs	r1, #2
    3a0c:	2000      	movs	r0, #0
    3a0e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3a10:	2000      	movs	r0, #0
    3a12:	4b08      	ldr	r3, [pc, #32]	; (3a34 <usbdc_reset+0x54>)
    3a14:	4798      	blx	r3
}
    3a16:	bd10      	pop	{r4, pc}
    3a18:	000038b9 	.word	0x000038b9
    3a1c:	200009c8 	.word	0x200009c8
    3a20:	00001a1d 	.word	0x00001a1d
    3a24:	00001a09 	.word	0x00001a09
    3a28:	00003a79 	.word	0x00003a79
    3a2c:	00001c55 	.word	0x00001c55
    3a30:	00003965 	.word	0x00003965
    3a34:	00001a49 	.word	0x00001a49

00003a38 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3a38:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d002      	beq.n	3a44 <usbd_event_cb+0xc>
    3a3e:	2801      	cmp	r0, #1
    3a40:	d004      	beq.n	3a4c <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    3a42:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    3a44:	2000      	movs	r0, #0
    3a46:	4b03      	ldr	r3, [pc, #12]	; (3a54 <usbd_event_cb+0x1c>)
    3a48:	4798      	blx	r3
		break;
    3a4a:	e7fa      	b.n	3a42 <usbd_event_cb+0xa>
		usbdc_reset();
    3a4c:	4b02      	ldr	r3, [pc, #8]	; (3a58 <usbd_event_cb+0x20>)
    3a4e:	4798      	blx	r3
}
    3a50:	e7f7      	b.n	3a42 <usbd_event_cb+0xa>
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	000038d9 	.word	0x000038d9
    3a58:	000039e1 	.word	0x000039e1

00003a5c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3a5c:	b510      	push	{r4, lr}
    3a5e:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3a60:	ac01      	add	r4, sp, #4
    3a62:	9101      	str	r1, [sp, #4]
    3a64:	9202      	str	r2, [sp, #8]
    3a66:	7220      	strb	r0, [r4, #8]
    3a68:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    3a6a:	0020      	movs	r0, r4
    3a6c:	4b01      	ldr	r3, [pc, #4]	; (3a74 <usbdc_xfer+0x18>)
    3a6e:	4798      	blx	r3
}
    3a70:	b004      	add	sp, #16
    3a72:	bd10      	pop	{r4, pc}
    3a74:	00001a95 	.word	0x00001a95

00003a78 <usbdc_cb_ctl_req>:
{
    3a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a7a:	46c6      	mov	lr, r8
    3a7c:	b500      	push	{lr}
    3a7e:	b084      	sub	sp, #16
    3a80:	0005      	movs	r5, r0
    3a82:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3a84:	2200      	movs	r2, #0
    3a86:	4bb5      	ldr	r3, [pc, #724]	; (3d5c <usbdc_cb_ctl_req+0x2e4>)
    3a88:	4798      	blx	r3
    3a8a:	1c43      	adds	r3, r0, #1
    3a8c:	d00d      	beq.n	3aaa <usbdc_cb_ctl_req+0x32>
		return true;
    3a8e:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3a90:	2801      	cmp	r0, #1
    3a92:	d00b      	beq.n	3aac <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3a94:	7822      	ldrb	r2, [r4, #0]
    3a96:	231f      	movs	r3, #31
    3a98:	0011      	movs	r1, r2
    3a9a:	4399      	bics	r1, r3
    3a9c:	d00b      	beq.n	3ab6 <usbdc_cb_ctl_req+0x3e>
    3a9e:	b2cb      	uxtb	r3, r1
    3aa0:	2b80      	cmp	r3, #128	; 0x80
    3aa2:	d100      	bne.n	3aa6 <usbdc_cb_ctl_req+0x2e>
    3aa4:	e0f8      	b.n	3c98 <usbdc_cb_ctl_req+0x220>
		return false;
    3aa6:	2300      	movs	r3, #0
    3aa8:	e000      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3aaa:	2300      	movs	r3, #0
}
    3aac:	0018      	movs	r0, r3
    3aae:	b004      	add	sp, #16
    3ab0:	bc04      	pop	{r2}
    3ab2:	4690      	mov	r8, r2
    3ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    3ab6:	7863      	ldrb	r3, [r4, #1]
    3ab8:	2b0b      	cmp	r3, #11
    3aba:	d900      	bls.n	3abe <usbdc_cb_ctl_req+0x46>
    3abc:	e1e4      	b.n	3e88 <usbdc_cb_ctl_req+0x410>
    3abe:	009b      	lsls	r3, r3, #2
    3ac0:	49a7      	ldr	r1, [pc, #668]	; (3d60 <usbdc_cb_ctl_req+0x2e8>)
    3ac2:	58cb      	ldr	r3, [r1, r3]
    3ac4:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3ac6:	2301      	movs	r3, #1
    3ac8:	2200      	movs	r2, #0
    3aca:	2100      	movs	r1, #0
    3acc:	0028      	movs	r0, r5
    3ace:	4ca5      	ldr	r4, [pc, #660]	; (3d64 <usbdc_cb_ctl_req+0x2ec>)
    3ad0:	47a0      	blx	r4
    3ad2:	4243      	negs	r3, r0
    3ad4:	4143      	adcs	r3, r0
    3ad6:	b2db      	uxtb	r3, r3
    3ad8:	e7e8      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    3ada:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    3adc:	2a00      	cmp	r2, #0
    3ade:	d01a      	beq.n	3b16 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3ae0:	4ba1      	ldr	r3, [pc, #644]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	6859      	ldr	r1, [r3, #4]
    3ae6:	6818      	ldr	r0, [r3, #0]
    3ae8:	4ba0      	ldr	r3, [pc, #640]	; (3d6c <usbdc_cb_ctl_req+0x2f4>)
    3aea:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3aec:	2800      	cmp	r0, #0
    3aee:	d100      	bne.n	3af2 <usbdc_cb_ctl_req+0x7a>
    3af0:	e1d4      	b.n	3e9c <usbdc_cb_ctl_req+0x424>
    3af2:	78c3      	ldrb	r3, [r0, #3]
    3af4:	021b      	lsls	r3, r3, #8
    3af6:	7881      	ldrb	r1, [r0, #2]
    3af8:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    3afa:	b289      	uxth	r1, r1
    3afc:	1841      	adds	r1, r0, r1
    3afe:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3b00:	2204      	movs	r2, #4
    3b02:	4b9b      	ldr	r3, [pc, #620]	; (3d70 <usbdc_cb_ctl_req+0x2f8>)
    3b04:	4798      	blx	r3
    3b06:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3b08:	2800      	cmp	r0, #0
    3b0a:	d006      	beq.n	3b1a <usbdc_cb_ctl_req+0xa2>
    3b0c:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3b0e:	4f96      	ldr	r7, [pc, #600]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3b10:	4b97      	ldr	r3, [pc, #604]	; (3d70 <usbdc_cb_ctl_req+0x2f8>)
    3b12:	4698      	mov	r8, r3
    3b14:	e01a      	b.n	3b4c <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    3b16:	4b97      	ldr	r3, [pc, #604]	; (3d74 <usbdc_cb_ctl_req+0x2fc>)
    3b18:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3b1a:	2301      	movs	r3, #1
    3b1c:	2200      	movs	r2, #0
    3b1e:	2100      	movs	r1, #0
    3b20:	0028      	movs	r0, r5
    3b22:	4c90      	ldr	r4, [pc, #576]	; (3d64 <usbdc_cb_ctl_req+0x2ec>)
    3b24:	47a0      	blx	r4
    3b26:	4243      	negs	r3, r0
    3b28:	4143      	adcs	r3, r0
    3b2a:	b2db      	uxtb	r3, r3
    3b2c:	e7be      	b.n	3aac <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3b2e:	0034      	movs	r4, r6
    3b30:	e000      	b.n	3b34 <usbdc_cb_ctl_req+0xbc>
    3b32:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3b34:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3b36:	7803      	ldrb	r3, [r0, #0]
    3b38:	18c0      	adds	r0, r0, r3
    3b3a:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3b3c:	9b03      	ldr	r3, [sp, #12]
    3b3e:	9301      	str	r3, [sp, #4]
    3b40:	2204      	movs	r2, #4
    3b42:	0019      	movs	r1, r3
    3b44:	47c0      	blx	r8
    3b46:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3b48:	2800      	cmp	r0, #0
    3b4a:	d0e6      	beq.n	3b1a <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3b4c:	7886      	ldrb	r6, [r0, #2]
    3b4e:	42a6      	cmp	r6, r4
    3b50:	d0f0      	beq.n	3b34 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3b52:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    3b54:	2c00      	cmp	r4, #0
    3b56:	d0ea      	beq.n	3b2e <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3b58:	aa02      	add	r2, sp, #8
    3b5a:	2100      	movs	r1, #0
    3b5c:	0020      	movs	r0, r4
    3b5e:	6863      	ldr	r3, [r4, #4]
    3b60:	4798      	blx	r3
    3b62:	2800      	cmp	r0, #0
    3b64:	d0e5      	beq.n	3b32 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    3b66:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3b68:	2c00      	cmp	r4, #0
    3b6a:	d1f5      	bne.n	3b58 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    3b6c:	0034      	movs	r4, r6
    3b6e:	e7e1      	b.n	3b34 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3b70:	231f      	movs	r3, #31
    3b72:	401a      	ands	r2, r3
		return false;
    3b74:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3b76:	2a02      	cmp	r2, #2
    3b78:	d198      	bne.n	3aac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    3b7a:	79a3      	ldrb	r3, [r4, #6]
    3b7c:	79e2      	ldrb	r2, [r4, #7]
    3b7e:	0212      	lsls	r2, r2, #8
    3b80:	431a      	orrs	r2, r3
			return false;
    3b82:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3b84:	2a00      	cmp	r2, #0
    3b86:	d000      	beq.n	3b8a <usbdc_cb_ctl_req+0x112>
    3b88:	e790      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3b8a:	7920      	ldrb	r0, [r4, #4]
    3b8c:	2100      	movs	r1, #0
    3b8e:	4b7a      	ldr	r3, [pc, #488]	; (3d78 <usbdc_cb_ctl_req+0x300>)
    3b90:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3b92:	2301      	movs	r3, #1
    3b94:	2200      	movs	r2, #0
    3b96:	2100      	movs	r1, #0
    3b98:	0028      	movs	r0, r5
    3b9a:	4c72      	ldr	r4, [pc, #456]	; (3d64 <usbdc_cb_ctl_req+0x2ec>)
    3b9c:	47a0      	blx	r4
		return true;
    3b9e:	2301      	movs	r3, #1
    3ba0:	e784      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3ba2:	231f      	movs	r3, #31
    3ba4:	401a      	ands	r2, r3
		return false;
    3ba6:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3ba8:	2a02      	cmp	r2, #2
    3baa:	d000      	beq.n	3bae <usbdc_cb_ctl_req+0x136>
    3bac:	e77e      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    3bae:	79a3      	ldrb	r3, [r4, #6]
    3bb0:	79e2      	ldrb	r2, [r4, #7]
    3bb2:	0212      	lsls	r2, r2, #8
    3bb4:	431a      	orrs	r2, r3
			return false;
    3bb6:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3bb8:	2a00      	cmp	r2, #0
    3bba:	d000      	beq.n	3bbe <usbdc_cb_ctl_req+0x146>
    3bbc:	e776      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3bbe:	7920      	ldrb	r0, [r4, #4]
    3bc0:	2101      	movs	r1, #1
    3bc2:	4b6d      	ldr	r3, [pc, #436]	; (3d78 <usbdc_cb_ctl_req+0x300>)
    3bc4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3bc6:	2301      	movs	r3, #1
    3bc8:	2200      	movs	r2, #0
    3bca:	2100      	movs	r1, #0
    3bcc:	0028      	movs	r0, r5
    3bce:	4c65      	ldr	r4, [pc, #404]	; (3d64 <usbdc_cb_ctl_req+0x2ec>)
    3bd0:	47a0      	blx	r4
		return true;
    3bd2:	2301      	movs	r3, #1
    3bd4:	e76a      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3bd6:	78a3      	ldrb	r3, [r4, #2]
    3bd8:	78e5      	ldrb	r5, [r4, #3]
    3bda:	022d      	lsls	r5, r5, #8
    3bdc:	431d      	orrs	r5, r3
    3bde:	7923      	ldrb	r3, [r4, #4]
    3be0:	7964      	ldrb	r4, [r4, #5]
    3be2:	0224      	lsls	r4, r4, #8
    3be4:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3be6:	4a60      	ldr	r2, [pc, #384]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3be8:	6813      	ldr	r3, [r2, #0]
    3bea:	7ed2      	ldrb	r2, [r2, #27]
    3bec:	6859      	ldr	r1, [r3, #4]
    3bee:	6818      	ldr	r0, [r3, #0]
    3bf0:	4b5e      	ldr	r3, [pc, #376]	; (3d6c <usbdc_cb_ctl_req+0x2f4>)
    3bf2:	4798      	blx	r3
	if (NULL == ifc) {
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d047      	beq.n	3c88 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    3bf8:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    3bfa:	78c3      	ldrb	r3, [r0, #3]
    3bfc:	021b      	lsls	r3, r3, #8
    3bfe:	7881      	ldrb	r1, [r0, #2]
    3c00:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3c02:	b289      	uxth	r1, r1
    3c04:	1841      	adds	r1, r0, r1
    3c06:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3c08:	2204      	movs	r2, #4
    3c0a:	4b59      	ldr	r3, [pc, #356]	; (3d70 <usbdc_cb_ctl_req+0x2f8>)
    3c0c:	4798      	blx	r3
    3c0e:	2800      	cmp	r0, #0
    3c10:	d03c      	beq.n	3c8c <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3c12:	4e57      	ldr	r6, [pc, #348]	; (3d70 <usbdc_cb_ctl_req+0x2f8>)
    3c14:	e008      	b.n	3c28 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    3c16:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3c18:	7803      	ldrb	r3, [r0, #0]
    3c1a:	18c0      	adds	r0, r0, r3
    3c1c:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3c1e:	2204      	movs	r2, #4
    3c20:	9903      	ldr	r1, [sp, #12]
    3c22:	47b0      	blx	r6
		if (NULL == ifc) {
    3c24:	2800      	cmp	r0, #0
    3c26:	d033      	beq.n	3c90 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3c28:	7883      	ldrb	r3, [r0, #2]
    3c2a:	42a3      	cmp	r3, r4
    3c2c:	d1f3      	bne.n	3c16 <usbdc_cb_ctl_req+0x19e>
    3c2e:	78c3      	ldrb	r3, [r0, #3]
    3c30:	42ab      	cmp	r3, r5
    3c32:	d1f0      	bne.n	3c16 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3c34:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3c36:	4b4c      	ldr	r3, [pc, #304]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3c38:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    3c3a:	2e00      	cmp	r6, #0
    3c3c:	d02a      	beq.n	3c94 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3c3e:	aa02      	add	r2, sp, #8
    3c40:	2101      	movs	r1, #1
    3c42:	0030      	movs	r0, r6
    3c44:	6873      	ldr	r3, [r6, #4]
    3c46:	4798      	blx	r3
    3c48:	2800      	cmp	r0, #0
    3c4a:	d004      	beq.n	3c56 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    3c4c:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    3c4e:	2e00      	cmp	r6, #0
    3c50:	d1f5      	bne.n	3c3e <usbdc_cb_ctl_req+0x1c6>
	return false;
    3c52:	2300      	movs	r3, #0
    3c54:	e72a      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3c56:	6873      	ldr	r3, [r6, #4]
    3c58:	aa02      	add	r2, sp, #8
    3c5a:	2100      	movs	r1, #0
    3c5c:	0030      	movs	r0, r6
    3c5e:	4798      	blx	r3
			return false;
    3c60:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3c62:	2800      	cmp	r0, #0
    3c64:	d000      	beq.n	3c68 <usbdc_cb_ctl_req+0x1f0>
    3c66:	e721      	b.n	3aac <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    3c68:	2d00      	cmp	r5, #0
    3c6a:	d005      	beq.n	3c78 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3c6c:	493e      	ldr	r1, [pc, #248]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3c6e:	2201      	movs	r2, #1
    3c70:	40a2      	lsls	r2, r4
    3c72:	7f4b      	ldrb	r3, [r1, #29]
    3c74:	4313      	orrs	r3, r2
    3c76:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3c78:	2300      	movs	r3, #0
    3c7a:	2200      	movs	r2, #0
    3c7c:	2100      	movs	r1, #0
    3c7e:	2000      	movs	r0, #0
    3c80:	4c38      	ldr	r4, [pc, #224]	; (3d64 <usbdc_cb_ctl_req+0x2ec>)
    3c82:	47a0      	blx	r4
			return true;
    3c84:	2301      	movs	r3, #1
    3c86:	e711      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3c88:	2300      	movs	r3, #0
    3c8a:	e70f      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3c8c:	2300      	movs	r3, #0
    3c8e:	e70d      	b.n	3aac <usbdc_cb_ctl_req+0x34>
			return false;
    3c90:	2300      	movs	r3, #0
    3c92:	e70b      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	return false;
    3c94:	2300      	movs	r3, #0
    3c96:	e709      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3c98:	7863      	ldrb	r3, [r4, #1]
    3c9a:	2b06      	cmp	r3, #6
    3c9c:	d033      	beq.n	3d06 <usbdc_cb_ctl_req+0x28e>
    3c9e:	b2d9      	uxtb	r1, r3
    3ca0:	2906      	cmp	r1, #6
    3ca2:	d922      	bls.n	3cea <usbdc_cb_ctl_req+0x272>
    3ca4:	2b08      	cmp	r3, #8
    3ca6:	d100      	bne.n	3caa <usbdc_cb_ctl_req+0x232>
    3ca8:	e0af      	b.n	3e0a <usbdc_cb_ctl_req+0x392>
    3caa:	2b0a      	cmp	r3, #10
    3cac:	d000      	beq.n	3cb0 <usbdc_cb_ctl_req+0x238>
    3cae:	e0ed      	b.n	3e8c <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3cb0:	4b2d      	ldr	r3, [pc, #180]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3cb2:	7f5a      	ldrb	r2, [r3, #29]
    3cb4:	7921      	ldrb	r1, [r4, #4]
    3cb6:	7963      	ldrb	r3, [r4, #5]
    3cb8:	021b      	lsls	r3, r3, #8
    3cba:	430b      	orrs	r3, r1
    3cbc:	411a      	asrs	r2, r3
    3cbe:	07d3      	lsls	r3, r2, #31
    3cc0:	d400      	bmi.n	3cc4 <usbdc_cb_ctl_req+0x24c>
    3cc2:	e0ca      	b.n	3e5a <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3cc4:	4b28      	ldr	r3, [pc, #160]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3cc6:	691d      	ldr	r5, [r3, #16]
	return false;
    3cc8:	2300      	movs	r3, #0
	while (NULL != func) {
    3cca:	2d00      	cmp	r5, #0
    3ccc:	d100      	bne.n	3cd0 <usbdc_cb_ctl_req+0x258>
    3cce:	e6ed      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3cd0:	0022      	movs	r2, r4
    3cd2:	2102      	movs	r1, #2
    3cd4:	0028      	movs	r0, r5
    3cd6:	686b      	ldr	r3, [r5, #4]
    3cd8:	4798      	blx	r3
    3cda:	2800      	cmp	r0, #0
    3cdc:	db00      	blt.n	3ce0 <usbdc_cb_ctl_req+0x268>
    3cde:	e0c8      	b.n	3e72 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    3ce0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3ce2:	2d00      	cmp	r5, #0
    3ce4:	d1f4      	bne.n	3cd0 <usbdc_cb_ctl_req+0x258>
	return false;
    3ce6:	2300      	movs	r3, #0
    3ce8:	e6e0      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3cea:	2b00      	cmp	r3, #0
    3cec:	d000      	beq.n	3cf0 <usbdc_cb_ctl_req+0x278>
    3cee:	e0cd      	b.n	3e8c <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3cf0:	231f      	movs	r3, #31
    3cf2:	401a      	ands	r2, r3
    3cf4:	b2d3      	uxtb	r3, r2
    3cf6:	2b01      	cmp	r3, #1
    3cf8:	d800      	bhi.n	3cfc <usbdc_cb_ctl_req+0x284>
    3cfa:	e092      	b.n	3e22 <usbdc_cb_ctl_req+0x3aa>
    3cfc:	2a02      	cmp	r2, #2
    3cfe:	d100      	bne.n	3d02 <usbdc_cb_ctl_req+0x28a>
    3d00:	e09f      	b.n	3e42 <usbdc_cb_ctl_req+0x3ca>
		return false;
    3d02:	2300      	movs	r3, #0
    3d04:	e6d2      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3d06:	78a3      	ldrb	r3, [r4, #2]
    3d08:	78e2      	ldrb	r2, [r4, #3]
    3d0a:	0212      	lsls	r2, r2, #8
    3d0c:	431a      	orrs	r2, r3
    3d0e:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3d10:	2b02      	cmp	r3, #2
    3d12:	d033      	beq.n	3d7c <usbdc_cb_ctl_req+0x304>
    3d14:	2b03      	cmp	r3, #3
    3d16:	d056      	beq.n	3dc6 <usbdc_cb_ctl_req+0x34e>
    3d18:	2b01      	cmp	r3, #1
    3d1a:	d001      	beq.n	3d20 <usbdc_cb_ctl_req+0x2a8>
	return false;
    3d1c:	2300      	movs	r3, #0
    3d1e:	e6c5      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3d20:	79a2      	ldrb	r2, [r4, #6]
    3d22:	79e3      	ldrb	r3, [r4, #7]
    3d24:	021b      	lsls	r3, r3, #8
    3d26:	4313      	orrs	r3, r2
    3d28:	1c1a      	adds	r2, r3, #0
    3d2a:	2b12      	cmp	r3, #18
    3d2c:	d900      	bls.n	3d30 <usbdc_cb_ctl_req+0x2b8>
    3d2e:	2212      	movs	r2, #18
    3d30:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3d32:	4b0d      	ldr	r3, [pc, #52]	; (3d68 <usbdc_cb_ctl_req+0x2f0>)
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	6859      	ldr	r1, [r3, #4]
    3d38:	6818      	ldr	r0, [r3, #0]
    3d3a:	2201      	movs	r2, #1
    3d3c:	4b0c      	ldr	r3, [pc, #48]	; (3d70 <usbdc_cb_ctl_req+0x2f8>)
    3d3e:	4798      	blx	r3
	if (!dev_desc) {
    3d40:	2800      	cmp	r0, #0
    3d42:	d100      	bne.n	3d46 <usbdc_cb_ctl_req+0x2ce>
    3d44:	e0a4      	b.n	3e90 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3d46:	2300      	movs	r3, #0
    3d48:	0022      	movs	r2, r4
    3d4a:	0001      	movs	r1, r0
    3d4c:	0028      	movs	r0, r5
    3d4e:	4c05      	ldr	r4, [pc, #20]	; (3d64 <usbdc_cb_ctl_req+0x2ec>)
    3d50:	47a0      	blx	r4
    3d52:	4243      	negs	r3, r0
    3d54:	4143      	adcs	r3, r0
    3d56:	b2db      	uxtb	r3, r3
    3d58:	e6a8      	b.n	3aac <usbdc_cb_ctl_req+0x34>
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	00003901 	.word	0x00003901
    3d60:	00005870 	.word	0x00005870
    3d64:	00003a5d 	.word	0x00003a5d
    3d68:	200009c8 	.word	0x200009c8
    3d6c:	00004045 	.word	0x00004045
    3d70:	00003fc9 	.word	0x00003fc9
    3d74:	000038b9 	.word	0x000038b9
    3d78:	00001bed 	.word	0x00001bed
	uint16_t length   = req->wLength;
    3d7c:	79a3      	ldrb	r3, [r4, #6]
    3d7e:	79e6      	ldrb	r6, [r4, #7]
    3d80:	0236      	lsls	r6, r6, #8
    3d82:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3d84:	4b46      	ldr	r3, [pc, #280]	; (3ea0 <usbdc_cb_ctl_req+0x428>)
    3d86:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	3201      	adds	r2, #1
    3d8c:	b2d2      	uxtb	r2, r2
    3d8e:	6859      	ldr	r1, [r3, #4]
    3d90:	6818      	ldr	r0, [r3, #0]
    3d92:	4b44      	ldr	r3, [pc, #272]	; (3ea4 <usbdc_cb_ctl_req+0x42c>)
    3d94:	4798      	blx	r3
    3d96:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    3d98:	d07c      	beq.n	3e94 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    3d9a:	78c3      	ldrb	r3, [r0, #3]
    3d9c:	021b      	lsls	r3, r3, #8
    3d9e:	7884      	ldrb	r4, [r0, #2]
    3da0:	18e4      	adds	r4, r4, r3
    3da2:	b2a4      	uxth	r4, r4
		need_zlp = false;
    3da4:	2300      	movs	r3, #0
	if (length <= total_len) {
    3da6:	42a6      	cmp	r6, r4
    3da8:	d905      	bls.n	3db6 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3daa:	3f01      	subs	r7, #1
    3dac:	403e      	ands	r6, r7
    3dae:	4273      	negs	r3, r6
    3db0:	4173      	adcs	r3, r6
    3db2:	b2db      	uxtb	r3, r3
		length = total_len;
    3db4:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3db6:	0032      	movs	r2, r6
    3db8:	0028      	movs	r0, r5
    3dba:	4c3b      	ldr	r4, [pc, #236]	; (3ea8 <usbdc_cb_ctl_req+0x430>)
    3dbc:	47a0      	blx	r4
    3dbe:	4243      	negs	r3, r0
    3dc0:	4143      	adcs	r3, r0
    3dc2:	b2db      	uxtb	r3, r3
    3dc4:	e672      	b.n	3aac <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3dc6:	79a3      	ldrb	r3, [r4, #6]
    3dc8:	79e1      	ldrb	r1, [r4, #7]
    3dca:	0209      	lsls	r1, r1, #8
    3dcc:	4319      	orrs	r1, r3
    3dce:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3dd0:	4b33      	ldr	r3, [pc, #204]	; (3ea0 <usbdc_cb_ctl_req+0x428>)
    3dd2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	b2d2      	uxtb	r2, r2
    3dd8:	6859      	ldr	r1, [r3, #4]
    3dda:	6818      	ldr	r0, [r3, #0]
    3ddc:	4b33      	ldr	r3, [pc, #204]	; (3eac <usbdc_cb_ctl_req+0x434>)
    3dde:	4798      	blx	r3
    3de0:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    3de2:	d059      	beq.n	3e98 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    3de4:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    3de6:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    3de8:	4294      	cmp	r4, r2
    3dea:	d906      	bls.n	3dfa <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3dec:	1e73      	subs	r3, r6, #1
    3dee:	4023      	ands	r3, r4
    3df0:	0018      	movs	r0, r3
    3df2:	4243      	negs	r3, r0
    3df4:	4143      	adcs	r3, r0
    3df6:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3df8:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    3dfa:	0022      	movs	r2, r4
    3dfc:	0028      	movs	r0, r5
    3dfe:	4c2a      	ldr	r4, [pc, #168]	; (3ea8 <usbdc_cb_ctl_req+0x430>)
    3e00:	47a0      	blx	r4
    3e02:	4243      	negs	r3, r0
    3e04:	4143      	adcs	r3, r0
    3e06:	b2db      	uxtb	r3, r3
    3e08:	e650      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    3e0a:	4b25      	ldr	r3, [pc, #148]	; (3ea0 <usbdc_cb_ctl_req+0x428>)
    3e0c:	7eda      	ldrb	r2, [r3, #27]
    3e0e:	6959      	ldr	r1, [r3, #20]
    3e10:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3e12:	6959      	ldr	r1, [r3, #20]
    3e14:	2300      	movs	r3, #0
    3e16:	2201      	movs	r2, #1
    3e18:	0028      	movs	r0, r5
    3e1a:	4c23      	ldr	r4, [pc, #140]	; (3ea8 <usbdc_cb_ctl_req+0x430>)
    3e1c:	47a0      	blx	r4
		return true;
    3e1e:	2301      	movs	r3, #1
    3e20:	e644      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		st = 0;
    3e22:	2300      	movs	r3, #0
    3e24:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3e26:	4c1e      	ldr	r4, [pc, #120]	; (3ea0 <usbdc_cb_ctl_req+0x428>)
    3e28:	2202      	movs	r2, #2
    3e2a:	a902      	add	r1, sp, #8
    3e2c:	6960      	ldr	r0, [r4, #20]
    3e2e:	4b20      	ldr	r3, [pc, #128]	; (3eb0 <usbdc_cb_ctl_req+0x438>)
    3e30:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3e32:	6961      	ldr	r1, [r4, #20]
    3e34:	2300      	movs	r3, #0
    3e36:	2202      	movs	r2, #2
    3e38:	0028      	movs	r0, r5
    3e3a:	4c1b      	ldr	r4, [pc, #108]	; (3ea8 <usbdc_cb_ctl_req+0x430>)
    3e3c:	47a0      	blx	r4
	return true;
    3e3e:	2301      	movs	r3, #1
    3e40:	e634      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3e42:	7920      	ldrb	r0, [r4, #4]
    3e44:	2102      	movs	r1, #2
    3e46:	4b1b      	ldr	r3, [pc, #108]	; (3eb4 <usbdc_cb_ctl_req+0x43c>)
    3e48:	4798      	blx	r3
		if (st < 0) {
    3e4a:	2800      	cmp	r0, #0
    3e4c:	db03      	blt.n	3e56 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    3e4e:	2301      	movs	r3, #1
    3e50:	4018      	ands	r0, r3
    3e52:	9002      	str	r0, [sp, #8]
    3e54:	e7e7      	b.n	3e26 <usbdc_cb_ctl_req+0x3ae>
			return false;
    3e56:	2300      	movs	r3, #0
    3e58:	e628      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    3e5a:	4b11      	ldr	r3, [pc, #68]	; (3ea0 <usbdc_cb_ctl_req+0x428>)
    3e5c:	2200      	movs	r2, #0
    3e5e:	6959      	ldr	r1, [r3, #20]
    3e60:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3e62:	6959      	ldr	r1, [r3, #20]
    3e64:	2300      	movs	r3, #0
    3e66:	3201      	adds	r2, #1
    3e68:	2000      	movs	r0, #0
    3e6a:	4c0f      	ldr	r4, [pc, #60]	; (3ea8 <usbdc_cb_ctl_req+0x430>)
    3e6c:	47a0      	blx	r4
		return true;
    3e6e:	2301      	movs	r3, #1
    3e70:	e61c      	b.n	3aac <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3e72:	4b0b      	ldr	r3, [pc, #44]	; (3ea0 <usbdc_cb_ctl_req+0x428>)
    3e74:	695a      	ldr	r2, [r3, #20]
    3e76:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3e78:	6959      	ldr	r1, [r3, #20]
    3e7a:	2300      	movs	r3, #0
    3e7c:	2201      	movs	r2, #1
    3e7e:	2000      	movs	r0, #0
    3e80:	4c09      	ldr	r4, [pc, #36]	; (3ea8 <usbdc_cb_ctl_req+0x430>)
    3e82:	47a0      	blx	r4
			return true;
    3e84:	2301      	movs	r3, #1
    3e86:	e611      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3e88:	2300      	movs	r3, #0
    3e8a:	e60f      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3e8c:	2300      	movs	r3, #0
    3e8e:	e60d      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3e90:	2300      	movs	r3, #0
    3e92:	e60b      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3e94:	2300      	movs	r3, #0
    3e96:	e609      	b.n	3aac <usbdc_cb_ctl_req+0x34>
		return false;
    3e98:	2300      	movs	r3, #0
    3e9a:	e607      	b.n	3aac <usbdc_cb_ctl_req+0x34>
			return false;
    3e9c:	2300      	movs	r3, #0
    3e9e:	e605      	b.n	3aac <usbdc_cb_ctl_req+0x34>
    3ea0:	200009c8 	.word	0x200009c8
    3ea4:	00004045 	.word	0x00004045
    3ea8:	00003a5d 	.word	0x00003a5d
    3eac:	000040ad 	.word	0x000040ad
    3eb0:	00005421 	.word	0x00005421
    3eb4:	00001bed 	.word	0x00001bed

00003eb8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3eb8:	b510      	push	{r4, lr}
	switch (type) {
    3eba:	2801      	cmp	r0, #1
    3ebc:	d009      	beq.n	3ed2 <usbdc_register_handler+0x1a>
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d002      	beq.n	3ec8 <usbdc_register_handler+0x10>
    3ec2:	2802      	cmp	r0, #2
    3ec4:	d00a      	beq.n	3edc <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3ec6:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3ec8:	4807      	ldr	r0, [pc, #28]	; (3ee8 <usbdc_register_handler+0x30>)
    3eca:	3004      	adds	r0, #4
    3ecc:	4b07      	ldr	r3, [pc, #28]	; (3eec <usbdc_register_handler+0x34>)
    3ece:	4798      	blx	r3
		break;
    3ed0:	e7f9      	b.n	3ec6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3ed2:	4805      	ldr	r0, [pc, #20]	; (3ee8 <usbdc_register_handler+0x30>)
    3ed4:	3008      	adds	r0, #8
    3ed6:	4b05      	ldr	r3, [pc, #20]	; (3eec <usbdc_register_handler+0x34>)
    3ed8:	4798      	blx	r3
		break;
    3eda:	e7f4      	b.n	3ec6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3edc:	4802      	ldr	r0, [pc, #8]	; (3ee8 <usbdc_register_handler+0x30>)
    3ede:	300c      	adds	r0, #12
    3ee0:	4b02      	ldr	r3, [pc, #8]	; (3eec <usbdc_register_handler+0x34>)
    3ee2:	4798      	blx	r3
}
    3ee4:	e7ef      	b.n	3ec6 <usbdc_register_handler+0xe>
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	200009c8 	.word	0x200009c8
    3eec:	00001d05 	.word	0x00001d05

00003ef0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3ef0:	b570      	push	{r4, r5, r6, lr}
    3ef2:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3ef4:	1e43      	subs	r3, r0, #1
    3ef6:	4198      	sbcs	r0, r3
    3ef8:	b2c0      	uxtb	r0, r0
    3efa:	4a0c      	ldr	r2, [pc, #48]	; (3f2c <usbdc_init+0x3c>)
    3efc:	490c      	ldr	r1, [pc, #48]	; (3f30 <usbdc_init+0x40>)
    3efe:	4b0d      	ldr	r3, [pc, #52]	; (3f34 <usbdc_init+0x44>)
    3f00:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3f02:	4b0d      	ldr	r3, [pc, #52]	; (3f38 <usbdc_init+0x48>)
    3f04:	4798      	blx	r3
	if (rc < 0) {
    3f06:	2800      	cmp	r0, #0
    3f08:	db0e      	blt.n	3f28 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    3f0a:	4d0c      	ldr	r5, [pc, #48]	; (3f3c <usbdc_init+0x4c>)
    3f0c:	2220      	movs	r2, #32
    3f0e:	2100      	movs	r1, #0
    3f10:	0028      	movs	r0, r5
    3f12:	4b0b      	ldr	r3, [pc, #44]	; (3f40 <usbdc_init+0x50>)
    3f14:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3f16:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3f18:	490a      	ldr	r1, [pc, #40]	; (3f44 <usbdc_init+0x54>)
    3f1a:	2000      	movs	r0, #0
    3f1c:	4c0a      	ldr	r4, [pc, #40]	; (3f48 <usbdc_init+0x58>)
    3f1e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3f20:	490a      	ldr	r1, [pc, #40]	; (3f4c <usbdc_init+0x5c>)
    3f22:	2001      	movs	r0, #1
    3f24:	47a0      	blx	r4

	return 0;
    3f26:	2000      	movs	r0, #0
}
    3f28:	bd70      	pop	{r4, r5, r6, pc}
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	00000355 	.word	0x00000355
    3f30:	000058a0 	.word	0x000058a0
    3f34:	00001ca5 	.word	0x00001ca5
    3f38:	00001921 	.word	0x00001921
    3f3c:	200009c8 	.word	0x200009c8
    3f40:	000054a5 	.word	0x000054a5
    3f44:	00003945 	.word	0x00003945
    3f48:	00001985 	.word	0x00001985
    3f4c:	00003a39 	.word	0x00003a39

00003f50 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3f50:	b510      	push	{r4, lr}
    3f52:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3f54:	4802      	ldr	r0, [pc, #8]	; (3f60 <usbdc_register_function+0x10>)
    3f56:	3010      	adds	r0, #16
    3f58:	4b02      	ldr	r3, [pc, #8]	; (3f64 <usbdc_register_function+0x14>)
    3f5a:	4798      	blx	r3
}
    3f5c:	bd10      	pop	{r4, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	200009c8 	.word	0x200009c8
    3f64:	00001d05 	.word	0x00001d05

00003f68 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3f68:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3f6a:	4b0b      	ldr	r3, [pc, #44]	; (3f98 <usbdc_start+0x30>)
    3f6c:	7e9b      	ldrb	r3, [r3, #26]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d10c      	bne.n	3f8c <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3f72:	2800      	cmp	r0, #0
    3f74:	d00d      	beq.n	3f92 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    3f76:	4b08      	ldr	r3, [pc, #32]	; (3f98 <usbdc_start+0x30>)
    3f78:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    3f7a:	6802      	ldr	r2, [r0, #0]
    3f7c:	79d2      	ldrb	r2, [r2, #7]
    3f7e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3f80:	2201      	movs	r2, #1
    3f82:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3f84:	4b05      	ldr	r3, [pc, #20]	; (3f9c <usbdc_start+0x34>)
    3f86:	4798      	blx	r3
	return ERR_NONE;
    3f88:	2000      	movs	r0, #0
}
    3f8a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3f8c:	2004      	movs	r0, #4
    3f8e:	4240      	negs	r0, r0
    3f90:	e7fb      	b.n	3f8a <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3f92:	2009      	movs	r0, #9
    3f94:	4240      	negs	r0, r0
    3f96:	e7f8      	b.n	3f8a <usbdc_start+0x22>
    3f98:	200009c8 	.word	0x200009c8
    3f9c:	00001991 	.word	0x00001991

00003fa0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3fa0:	b510      	push	{r4, lr}
	usb_d_attach();
    3fa2:	4b01      	ldr	r3, [pc, #4]	; (3fa8 <usbdc_attach+0x8>)
    3fa4:	4798      	blx	r3
}
    3fa6:	bd10      	pop	{r4, pc}
    3fa8:	0000199d 	.word	0x0000199d

00003fac <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3fac:	4b01      	ldr	r3, [pc, #4]	; (3fb4 <usbdc_get_ctrl_buffer+0x8>)
    3fae:	6958      	ldr	r0, [r3, #20]
}
    3fb0:	4770      	bx	lr
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	200009c8 	.word	0x200009c8

00003fb8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3fb8:	4b02      	ldr	r3, [pc, #8]	; (3fc4 <usbdc_get_state+0xc>)
    3fba:	7e98      	ldrb	r0, [r3, #26]
    3fbc:	06c3      	lsls	r3, r0, #27
    3fbe:	d500      	bpl.n	3fc2 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    3fc0:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    3fc2:	4770      	bx	lr
    3fc4:	200009c8 	.word	0x200009c8

00003fc8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3fc8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3fca:	4288      	cmp	r0, r1
    3fcc:	d211      	bcs.n	3ff2 <usb_find_desc+0x2a>
	return desc[0];
    3fce:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3fd0:	2b01      	cmp	r3, #1
    3fd2:	d910      	bls.n	3ff6 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    3fd4:	7844      	ldrb	r4, [r0, #1]
    3fd6:	4294      	cmp	r4, r2
    3fd8:	d00a      	beq.n	3ff0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3fda:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3fdc:	4281      	cmp	r1, r0
    3fde:	d906      	bls.n	3fee <usb_find_desc+0x26>
	return desc[0];
    3fe0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3fe2:	2b01      	cmp	r3, #1
    3fe4:	d909      	bls.n	3ffa <usb_find_desc+0x32>
	return desc[1];
    3fe6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3fe8:	4294      	cmp	r4, r2
    3fea:	d1f6      	bne.n	3fda <usb_find_desc+0x12>
    3fec:	e000      	b.n	3ff0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3fee:	2000      	movs	r0, #0
}
    3ff0:	bd10      	pop	{r4, pc}
	return NULL;
    3ff2:	2000      	movs	r0, #0
    3ff4:	e7fc      	b.n	3ff0 <usb_find_desc+0x28>
		_desc_len_check();
    3ff6:	2000      	movs	r0, #0
    3ff8:	e7fa      	b.n	3ff0 <usb_find_desc+0x28>
    3ffa:	2000      	movs	r0, #0
    3ffc:	e7f8      	b.n	3ff0 <usb_find_desc+0x28>

00003ffe <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3ffe:	4288      	cmp	r0, r1
    4000:	d215      	bcs.n	402e <usb_find_ep_desc+0x30>
	return desc[0];
    4002:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4004:	2b01      	cmp	r3, #1
    4006:	d914      	bls.n	4032 <usb_find_ep_desc+0x34>
	return desc[1];
    4008:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    400a:	2a04      	cmp	r2, #4
    400c:	d013      	beq.n	4036 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    400e:	2a05      	cmp	r2, #5
    4010:	d00c      	beq.n	402c <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    4012:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4014:	4281      	cmp	r1, r0
    4016:	d908      	bls.n	402a <usb_find_ep_desc+0x2c>
	return desc[0];
    4018:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    401a:	2b01      	cmp	r3, #1
    401c:	d90d      	bls.n	403a <usb_find_ep_desc+0x3c>
	return desc[1];
    401e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4020:	2a04      	cmp	r2, #4
    4022:	d00c      	beq.n	403e <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4024:	2a05      	cmp	r2, #5
    4026:	d1f4      	bne.n	4012 <usb_find_ep_desc+0x14>
    4028:	e000      	b.n	402c <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    402a:	2000      	movs	r0, #0
}
    402c:	4770      	bx	lr
	return NULL;
    402e:	2000      	movs	r0, #0
    4030:	e7fc      	b.n	402c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    4032:	2000      	movs	r0, #0
    4034:	e7fa      	b.n	402c <usb_find_ep_desc+0x2e>
	return NULL;
    4036:	2000      	movs	r0, #0
    4038:	e7f8      	b.n	402c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    403a:	2000      	movs	r0, #0
    403c:	e7f6      	b.n	402c <usb_find_ep_desc+0x2e>
	return NULL;
    403e:	2000      	movs	r0, #0
    4040:	e7f4      	b.n	402c <usb_find_ep_desc+0x2e>
	...

00004044 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4044:	b570      	push	{r4, r5, r6, lr}
    4046:	000c      	movs	r4, r1
    4048:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    404a:	2202      	movs	r2, #2
    404c:	4b16      	ldr	r3, [pc, #88]	; (40a8 <usb_find_cfg_desc+0x64>)
    404e:	4798      	blx	r3
	if (!desc) {
    4050:	2800      	cmp	r0, #0
    4052:	d01d      	beq.n	4090 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4054:	4284      	cmp	r4, r0
    4056:	d91c      	bls.n	4092 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    4058:	7803      	ldrb	r3, [r0, #0]
    405a:	2b01      	cmp	r3, #1
    405c:	d91b      	bls.n	4096 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    405e:	7843      	ldrb	r3, [r0, #1]
    4060:	2b02      	cmp	r3, #2
    4062:	d11a      	bne.n	409a <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    4064:	7943      	ldrb	r3, [r0, #5]
    4066:	42ab      	cmp	r3, r5
    4068:	d012      	beq.n	4090 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    406a:	78c2      	ldrb	r2, [r0, #3]
    406c:	0212      	lsls	r2, r2, #8
    406e:	7883      	ldrb	r3, [r0, #2]
    4070:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4072:	b29b      	uxth	r3, r3
    4074:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4076:	4284      	cmp	r4, r0
    4078:	d909      	bls.n	408e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    407a:	7803      	ldrb	r3, [r0, #0]
    407c:	2b01      	cmp	r3, #1
    407e:	d90e      	bls.n	409e <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    4080:	7843      	ldrb	r3, [r0, #1]
    4082:	2b02      	cmp	r3, #2
    4084:	d10d      	bne.n	40a2 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    4086:	7943      	ldrb	r3, [r0, #5]
    4088:	42ab      	cmp	r3, r5
    408a:	d1ee      	bne.n	406a <usb_find_cfg_desc+0x26>
    408c:	e000      	b.n	4090 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    408e:	2000      	movs	r0, #0
}
    4090:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    4092:	2000      	movs	r0, #0
    4094:	e7fc      	b.n	4090 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4096:	2000      	movs	r0, #0
    4098:	e7fa      	b.n	4090 <usb_find_cfg_desc+0x4c>
	return NULL;
    409a:	2000      	movs	r0, #0
    409c:	e7f8      	b.n	4090 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    409e:	2000      	movs	r0, #0
    40a0:	e7f6      	b.n	4090 <usb_find_cfg_desc+0x4c>
	return NULL;
    40a2:	2000      	movs	r0, #0
    40a4:	e7f4      	b.n	4090 <usb_find_cfg_desc+0x4c>
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	00003fc9 	.word	0x00003fc9

000040ac <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    40ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ae:	000d      	movs	r5, r1
    40b0:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    40b2:	4288      	cmp	r0, r1
    40b4:	d212      	bcs.n	40dc <usb_find_str_desc+0x30>
    40b6:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    40b8:	4e0a      	ldr	r6, [pc, #40]	; (40e4 <usb_find_str_desc+0x38>)
    40ba:	2203      	movs	r2, #3
    40bc:	0029      	movs	r1, r5
    40be:	47b0      	blx	r6
		if (desc) {
    40c0:	2800      	cmp	r0, #0
    40c2:	d00e      	beq.n	40e2 <usb_find_str_desc+0x36>
	return desc[0];
    40c4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    40c6:	2b01      	cmp	r3, #1
    40c8:	d90a      	bls.n	40e0 <usb_find_str_desc+0x34>
			if (i == str_index) {
    40ca:	42a7      	cmp	r7, r4
    40cc:	d009      	beq.n	40e2 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    40ce:	3401      	adds	r4, #1
    40d0:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    40d2:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    40d4:	4285      	cmp	r5, r0
    40d6:	d8f0      	bhi.n	40ba <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    40d8:	2000      	movs	r0, #0
    40da:	e002      	b.n	40e2 <usb_find_str_desc+0x36>
    40dc:	2000      	movs	r0, #0
    40de:	e000      	b.n	40e2 <usb_find_str_desc+0x36>
			_desc_len_check();
    40e0:	2000      	movs	r0, #0
}
    40e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40e4:	00003fc9 	.word	0x00003fc9

000040e8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    40e8:	2000      	movs	r0, #0
    40ea:	4770      	bx	lr

000040ec <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    40ec:	4770      	bx	lr
	...

000040f0 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
    40f0:	4b03      	ldr	r3, [pc, #12]	; (4100 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	2201      	movs	r2, #1
    40f6:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    40f8:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    40fa:	741a      	strb	r2, [r3, #16]


	return false;
}
    40fc:	2000      	movs	r0, #0
    40fe:	4770      	bx	lr
    4100:	200009e8 	.word	0x200009e8

00004104 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    4104:	4b03      	ldr	r3, [pc, #12]	; (4114 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	2201      	movs	r2, #1
    410a:	74da      	strb	r2, [r3, #19]
	ptrCDCClass->terminalStarted=true;
    410c:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    410e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
    4110:	2000      	movs	r0, #0
    4112:	4770      	bx	lr
    4114:	200009e8 	.word	0x200009e8

00004118 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    4118:	b530      	push	{r4, r5, lr}
    411a:	b083      	sub	sp, #12
    411c:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
    411e:	6983      	ldr	r3, [r0, #24]
    4120:	3301      	adds	r3, #1
    4122:	d002      	beq.n	412a <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
    4124:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
    4126:	b003      	add	sp, #12
    4128:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
    412a:	466b      	mov	r3, sp
    412c:	1ddd      	adds	r5, r3, #7
    412e:	6803      	ldr	r3, [r0, #0]
    4130:	69db      	ldr	r3, [r3, #28]
    4132:	2201      	movs	r2, #1
    4134:	0029      	movs	r1, r5
    4136:	4798      	blx	r3
    4138:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
    413a:	782b      	ldrb	r3, [r5, #0]
    413c:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
    413e:	69a0      	ldr	r0, [r4, #24]
    4140:	e7f1      	b.n	4126 <_ZN9CDC_Class4peekEv+0xe>

00004142 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
    4142:	b500      	push	{lr}
    4144:	b083      	sub	sp, #12
    4146:	466b      	mov	r3, sp
    4148:	71d9      	strb	r1, [r3, #7]
		while(!txReady);
    414a:	7cc3      	ldrb	r3, [r0, #19]
    414c:	2b00      	cmp	r3, #0
    414e:	d0fc      	beq.n	414a <_ZN9CDC_Class5writeEh+0x8>
	
		return writeData(&c, 1);
    4150:	6803      	ldr	r3, [r0, #0]
    4152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4154:	2201      	movs	r2, #1
    4156:	4669      	mov	r1, sp
    4158:	3107      	adds	r1, #7
    415a:	4798      	blx	r3
}
    415c:	b003      	add	sp, #12
    415e:	bd00      	pop	{pc}

00004160 <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
    4160:	7d03      	ldrb	r3, [r0, #20]
    4162:	b2db      	uxtb	r3, r3
    4164:	2b00      	cmp	r3, #0
    4166:	d001      	beq.n	416c <_ZN9CDC_Class9availableEv+0xc>
    4168:	7cc3      	ldrb	r3, [r0, #19]
    416a:	b2db      	uxtb	r3, r3
	{
		
	return false;
	}
	
}
    416c:	0018      	movs	r0, r3
    416e:	4770      	bx	lr

00004170 <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
    4170:	b510      	push	{r4, lr}
    4172:	0004      	movs	r4, r0
    4174:	4b03      	ldr	r3, [pc, #12]	; (4184 <_ZN9CDC_ClassD1Ev+0x14>)
    4176:	3308      	adds	r3, #8
    4178:	6003      	str	r3, [r0, #0]
    417a:	3010      	adds	r0, #16
    417c:	4b02      	ldr	r3, [pc, #8]	; (4188 <_ZN9CDC_ClassD1Ev+0x18>)
    417e:	4798      	blx	r3
} //~CDC_Class
    4180:	0020      	movs	r0, r4
    4182:	bd10      	pop	{r4, pc}
    4184:	000058dc 	.word	0x000058dc
    4188:	000044e1 	.word	0x000044e1

0000418c <_ZL10cb_state_c22usb_cdc_control_signal>:
{
    418c:	b510      	push	{r4, lr}
    418e:	b082      	sub	sp, #8
    4190:	1c03      	adds	r3, r0, #0
    4192:	aa01      	add	r2, sp, #4
    4194:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    4196:	07db      	lsls	r3, r3, #31
    4198:	d402      	bmi.n	41a0 <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
    419a:	2000      	movs	r0, #0
    419c:	b002      	add	sp, #8
    419e:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    41a0:	4906      	ldr	r1, [pc, #24]	; (41bc <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
    41a2:	2000      	movs	r0, #0
    41a4:	4c06      	ldr	r4, [pc, #24]	; (41c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
    41a6:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    41a8:	4906      	ldr	r1, [pc, #24]	; (41c4 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    41aa:	2001      	movs	r0, #1
    41ac:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
    41ae:	4b06      	ldr	r3, [pc, #24]	; (41c8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	2201      	movs	r2, #1
    41b4:	74da      	strb	r2, [r3, #19]
		ptrCDCClass->rxReady=true;
    41b6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->plugged=true;
    41b8:	741a      	strb	r2, [r3, #16]
    41ba:	e7ee      	b.n	419a <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
    41bc:	000040f1 	.word	0x000040f1
    41c0:	0000385d 	.word	0x0000385d
    41c4:	00004105 	.word	0x00004105
    41c8:	200009e8 	.word	0x200009e8

000041cc <_ZN9CDC_Class8readDataEPvl>:
{
    41cc:	b510      	push	{r4, lr}
    41ce:	0004      	movs	r4, r0
    41d0:	0008      	movs	r0, r1
	rxReady=false;
    41d2:	2300      	movs	r3, #0
    41d4:	7523      	strb	r3, [r4, #20]
	r=cdcdf_acm_read((uint8_t *)p, size);
    41d6:	0011      	movs	r1, r2
    41d8:	4b03      	ldr	r3, [pc, #12]	; (41e8 <_ZN9CDC_Class8readDataEPvl+0x1c>)
    41da:	4798      	blx	r3
	while(!rxReady);
    41dc:	7d23      	ldrb	r3, [r4, #20]
    41de:	2b00      	cmp	r3, #0
    41e0:	d0fc      	beq.n	41dc <_ZN9CDC_Class8readDataEPvl+0x10>
	return r;
    41e2:	23ff      	movs	r3, #255	; 0xff
    41e4:	4018      	ands	r0, r3
}
    41e6:	bd10      	pop	{r4, pc}
    41e8:	000037ed 	.word	0x000037ed

000041ec <_ZN9CDC_Class4readEv>:
{
    41ec:	b510      	push	{r4, lr}
    41ee:	b082      	sub	sp, #8
    41f0:	0004      	movs	r4, r0
	rxReady=false;
    41f2:	2300      	movs	r3, #0
    41f4:	7503      	strb	r3, [r0, #20]
	cdcdf_acm_read(&p, 1);
    41f6:	2101      	movs	r1, #1
    41f8:	466b      	mov	r3, sp
    41fa:	1dd8      	adds	r0, r3, #7
    41fc:	4b04      	ldr	r3, [pc, #16]	; (4210 <_ZN9CDC_Class4readEv+0x24>)
    41fe:	4798      	blx	r3
	while(!rxReady);
    4200:	7d23      	ldrb	r3, [r4, #20]
    4202:	2b00      	cmp	r3, #0
    4204:	d0fc      	beq.n	4200 <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
    4206:	466b      	mov	r3, sp
    4208:	79d8      	ldrb	r0, [r3, #7]
}
    420a:	b002      	add	sp, #8
    420c:	bd10      	pop	{r4, pc}
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	000037ed 	.word	0x000037ed

00004214 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
    4214:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    4216:	301c      	adds	r0, #28
    4218:	2140      	movs	r1, #64	; 0x40
    421a:	4b01      	ldr	r3, [pc, #4]	; (4220 <_ZN9CDC_Class5flushEv+0xc>)
    421c:	4798      	blx	r3
}
    421e:	bd10      	pop	{r4, pc}
    4220:	00003819 	.word	0x00003819

00004224 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
    4224:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
    4226:	4b01      	ldr	r3, [pc, #4]	; (422c <_ZN9CDC_Class5clearEv+0x8>)
    4228:	4798      	blx	r3
}
    422a:	bd10      	pop	{r4, pc}
    422c:	00003845 	.word	0x00003845

00004230 <_ZN9CDC_Class9writeDataEPKvl>:
{
    4230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4232:	0004      	movs	r4, r0
    4234:	000e      	movs	r6, r1
    4236:	0017      	movs	r7, r2
	txReady=false;
    4238:	2300      	movs	r3, #0
    423a:	74c3      	strb	r3, [r0, #19]
	if (CheckTerminal())
    423c:	3010      	adds	r0, #16
    423e:	4b0a      	ldr	r3, [pc, #40]	; (4268 <_ZN9CDC_Class9writeDataEPKvl+0x38>)
    4240:	4798      	blx	r3
		return 0;
    4242:	2500      	movs	r5, #0
	if (CheckTerminal())
    4244:	2800      	cmp	r0, #0
    4246:	d00d      	beq.n	4264 <_ZN9CDC_Class9writeDataEPKvl+0x34>
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    4248:	0039      	movs	r1, r7
    424a:	0030      	movs	r0, r6
    424c:	4b07      	ldr	r3, [pc, #28]	; (426c <_ZN9CDC_Class9writeDataEPKvl+0x3c>)
    424e:	4798      	blx	r3
    4250:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted)){
    4252:	7ce3      	ldrb	r3, [r4, #19]
    4254:	2b00      	cmp	r3, #0
    4256:	d102      	bne.n	425e <_ZN9CDC_Class9writeDataEPKvl+0x2e>
    4258:	7c63      	ldrb	r3, [r4, #17]
    425a:	2b00      	cmp	r3, #0
    425c:	d1f9      	bne.n	4252 <_ZN9CDC_Class9writeDataEPKvl+0x22>
			usbTimer.Stop();
    425e:	4804      	ldr	r0, [pc, #16]	; (4270 <_ZN9CDC_Class9writeDataEPKvl+0x40>)
    4260:	4b04      	ldr	r3, [pc, #16]	; (4274 <_ZN9CDC_Class9writeDataEPKvl+0x44>)
    4262:	4798      	blx	r3
}
    4264:	0028      	movs	r0, r5
    4266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4268:	00004541 	.word	0x00004541
    426c:	00003819 	.word	0x00003819
    4270:	20000a54 	.word	0x20000a54
    4274:	0000462d 	.word	0x0000462d

00004278 <_ZN9CDC_Class5writeEPKhj>:
{
    4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    427a:	0004      	movs	r4, r0
    427c:	000f      	movs	r7, r1
    427e:	0016      	movs	r6, r2
	txReady=false;
    4280:	2300      	movs	r3, #0
    4282:	74c3      	strb	r3, [r0, #19]
 	if (CheckTerminal(size)){
    4284:	3010      	adds	r0, #16
    4286:	0011      	movs	r1, r2
    4288:	4b0a      	ldr	r3, [pc, #40]	; (42b4 <_ZN9CDC_Class5writeEPKhj+0x3c>)
    428a:	4798      	blx	r3
 		r=0;
    428c:	2500      	movs	r5, #0
 	if (CheckTerminal(size)){
    428e:	2800      	cmp	r0, #0
    4290:	d00d      	beq.n	42ae <_ZN9CDC_Class5writeEPKhj+0x36>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    4292:	0031      	movs	r1, r6
    4294:	0038      	movs	r0, r7
    4296:	4b08      	ldr	r3, [pc, #32]	; (42b8 <_ZN9CDC_Class5writeEPKhj+0x40>)
    4298:	4798      	blx	r3
    429a:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted));
    429c:	7ce3      	ldrb	r3, [r4, #19]
    429e:	2b00      	cmp	r3, #0
    42a0:	d102      	bne.n	42a8 <_ZN9CDC_Class5writeEPKhj+0x30>
    42a2:	7c63      	ldrb	r3, [r4, #17]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d1f9      	bne.n	429c <_ZN9CDC_Class5writeEPKhj+0x24>
		usbTimer.Stop();
    42a8:	4804      	ldr	r0, [pc, #16]	; (42bc <_ZN9CDC_Class5writeEPKhj+0x44>)
    42aa:	4b05      	ldr	r3, [pc, #20]	; (42c0 <_ZN9CDC_Class5writeEPKhj+0x48>)
    42ac:	4798      	blx	r3
}
    42ae:	0028      	movs	r0, r5
    42b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	0000458d 	.word	0x0000458d
    42b8:	00003819 	.word	0x00003819
    42bc:	20000a54 	.word	0x20000a54
    42c0:	0000462d 	.word	0x0000462d

000042c4 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
    42c4:	b510      	push	{r4, lr}
    42c6:	0004      	movs	r4, r0
    Print() : write_error(0) {}
    42c8:	2300      	movs	r3, #0
    42ca:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    42cc:	4b08      	ldr	r3, [pc, #32]	; (42f0 <_ZN9CDC_ClassC1Ev+0x2c>)
    42ce:	6003      	str	r3, [r0, #0]
    42d0:	23fa      	movs	r3, #250	; 0xfa
    42d2:	009b      	lsls	r3, r3, #2
    42d4:	6083      	str	r3, [r0, #8]
    42d6:	3010      	adds	r0, #16
    42d8:	4b06      	ldr	r3, [pc, #24]	; (42f4 <_ZN9CDC_ClassC1Ev+0x30>)
    42da:	4798      	blx	r3
    42dc:	4b06      	ldr	r3, [pc, #24]	; (42f8 <_ZN9CDC_ClassC1Ev+0x34>)
    42de:	3308      	adds	r3, #8
    42e0:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
    42e2:	2301      	movs	r3, #1
    42e4:	425b      	negs	r3, r3
    42e6:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
    42e8:	4b04      	ldr	r3, [pc, #16]	; (42fc <_ZN9CDC_ClassC1Ev+0x38>)
    42ea:	601c      	str	r4, [r3, #0]
} //CDC_Class
    42ec:	0020      	movs	r0, r4
    42ee:	bd10      	pop	{r4, pc}
    42f0:	000058c0 	.word	0x000058c0
    42f4:	000044d5 	.word	0x000044d5
    42f8:	000058dc 	.word	0x000058dc
    42fc:	200009e8 	.word	0x200009e8

00004300 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
    4300:	b510      	push	{r4, lr}
    4302:	0004      	movs	r4, r0
	OnInit();
    4304:	3010      	adds	r0, #16
    4306:	4b04      	ldr	r3, [pc, #16]	; (4318 <_ZN9CDC_Class4InitEv+0x18>)
    4308:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    430a:	4904      	ldr	r1, [pc, #16]	; (431c <_ZN9CDC_Class4InitEv+0x1c>)
    430c:	2003      	movs	r0, #3
    430e:	4b04      	ldr	r3, [pc, #16]	; (4320 <_ZN9CDC_Class4InitEv+0x20>)
    4310:	4798      	blx	r3
	if (plugged)
    4312:	7c23      	ldrb	r3, [r4, #16]
}
    4314:	bd10      	pop	{r4, pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	000044e5 	.word	0x000044e5
    431c:	0000418d 	.word	0x0000418d
    4320:	0000385d 	.word	0x0000385d

00004324 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
    4324:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
    4326:	4b01      	ldr	r3, [pc, #4]	; (432c <_ZN9CDC_Class9IsEnabledEv+0x8>)
    4328:	4798      	blx	r3
}
    432a:	bd10      	pop	{r4, pc}
    432c:	000038ad 	.word	0x000038ad

00004330 <_GLOBAL__sub_I_ptrCDCClass>:

	delay_us(10);
	return result;
}

 CDC_Class	serial;
    4330:	b510      	push	{r4, lr}
    4332:	4c05      	ldr	r4, [pc, #20]	; (4348 <_GLOBAL__sub_I_ptrCDCClass+0x18>)
    4334:	3404      	adds	r4, #4
    4336:	0020      	movs	r0, r4
    4338:	4b04      	ldr	r3, [pc, #16]	; (434c <_GLOBAL__sub_I_ptrCDCClass+0x1c>)
    433a:	4798      	blx	r3
    433c:	4a04      	ldr	r2, [pc, #16]	; (4350 <_GLOBAL__sub_I_ptrCDCClass+0x20>)
    433e:	4905      	ldr	r1, [pc, #20]	; (4354 <_GLOBAL__sub_I_ptrCDCClass+0x24>)
    4340:	0020      	movs	r0, r4
    4342:	4b05      	ldr	r3, [pc, #20]	; (4358 <_GLOBAL__sub_I_ptrCDCClass+0x28>)
    4344:	4798      	blx	r3
    4346:	bd10      	pop	{r4, pc}
    4348:	200009e8 	.word	0x200009e8
    434c:	000042c5 	.word	0x000042c5
    4350:	20000000 	.word	0x20000000
    4354:	00004171 	.word	0x00004171
    4358:	000046b9 	.word	0x000046b9

0000435c <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
    435c:	2000      	movs	r0, #0
    435e:	4770      	bx	lr

00004360 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
    4360:	4770      	bx	lr

00004362 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4364:	0005      	movs	r5, r0
    4366:	000f      	movs	r7, r1
    4368:	1e16      	subs	r6, r2, #0
  size_t n = 0;
  while (size--) {
    436a:	d00c      	beq.n	4386 <_ZN5Print5writeEPKhj+0x24>
    436c:	2400      	movs	r4, #0
    if (write(*buffer++)) n++;
    436e:	5d39      	ldrb	r1, [r7, r4]
    4370:	682b      	ldr	r3, [r5, #0]
    4372:	681b      	ldr	r3, [r3, #0]
    4374:	0028      	movs	r0, r5
    4376:	4798      	blx	r3
    4378:	2800      	cmp	r0, #0
    437a:	d002      	beq.n	4382 <_ZN5Print5writeEPKhj+0x20>
    437c:	3401      	adds	r4, #1
  while (size--) {
    437e:	42a6      	cmp	r6, r4
    4380:	d1f5      	bne.n	436e <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4382:	0020      	movs	r0, r4
    4384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t n = 0;
    4386:	0014      	movs	r4, r2
  return n;
    4388:	e7fb      	b.n	4382 <_ZN5Print5writeEPKhj+0x20>
	...

0000438c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    438c:	b570      	push	{r4, r5, r6, lr}
    438e:	0005      	movs	r5, r0
    4390:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
    4392:	d009      	beq.n	43a8 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    4394:	0008      	movs	r0, r1
    4396:	4b05      	ldr	r3, [pc, #20]	; (43ac <_ZN5Print5printEPKc+0x20>)
    4398:	4798      	blx	r3
    439a:	0002      	movs	r2, r0
    439c:	682b      	ldr	r3, [r5, #0]
    439e:	685b      	ldr	r3, [r3, #4]
    43a0:	0021      	movs	r1, r4
    43a2:	0028      	movs	r0, r5
    43a4:	4798      	blx	r3
  return write(str);
}
    43a6:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
    43a8:	2000      	movs	r0, #0
  return write(str);
    43aa:	e7fc      	b.n	43a6 <_ZN5Print5printEPKc+0x1a>
    43ac:	00005539 	.word	0x00005539

000043b0 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    43b0:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
    43b2:	6803      	ldr	r3, [r0, #0]
    43b4:	685b      	ldr	r3, [r3, #4]
    43b6:	2202      	movs	r2, #2
    43b8:	4901      	ldr	r1, [pc, #4]	; (43c0 <_ZN5Print7printlnEv+0x10>)
    43ba:	4798      	blx	r3
  return write("\r\n");
}
    43bc:	bd10      	pop	{r4, pc}
    43be:	46c0      	nop			; (mov r8, r8)
    43c0:	00005914 	.word	0x00005914

000043c4 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    43c4:	b570      	push	{r4, r5, r6, lr}
    43c6:	0005      	movs	r5, r0
  size_t n = print(c);
    43c8:	4b03      	ldr	r3, [pc, #12]	; (43d8 <_ZN5Print7printlnEPKc+0x14>)
    43ca:	4798      	blx	r3
    43cc:	0004      	movs	r4, r0
  n += println();
    43ce:	0028      	movs	r0, r5
    43d0:	4b02      	ldr	r3, [pc, #8]	; (43dc <_ZN5Print7printlnEPKc+0x18>)
    43d2:	4798      	blx	r3
    43d4:	1820      	adds	r0, r4, r0
  return n;
}
    43d6:	bd70      	pop	{r4, r5, r6, pc}
    43d8:	0000438d 	.word	0x0000438d
    43dc:	000043b1 	.word	0x000043b1

000043e0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    43e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43e2:	46de      	mov	lr, fp
    43e4:	4657      	mov	r7, sl
    43e6:	464e      	mov	r6, r9
    43e8:	4645      	mov	r5, r8
    43ea:	b5e0      	push	{r5, r6, r7, lr}
    43ec:	b08d      	sub	sp, #52	; 0x34
    43ee:	4683      	mov	fp, r0
    43f0:	000e      	movs	r6, r1
    43f2:	0010      	movs	r0, r2
    43f4:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    43f6:	2100      	movs	r1, #0
    43f8:	2320      	movs	r3, #32
    43fa:	aa03      	add	r2, sp, #12
    43fc:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    43fe:	2801      	cmp	r0, #1
    4400:	dd07      	ble.n	4412 <_ZN5Print11printNumberEmh+0x32>
    4402:	af0b      	add	r7, sp, #44	; 0x2c

  do {
    char c = n % base;
    4404:	4b1a      	ldr	r3, [pc, #104]	; (4470 <_ZN5Print11printNumberEmh+0x90>)
    4406:	469a      	mov	sl, r3
    n /= base;
    4408:	4b1a      	ldr	r3, [pc, #104]	; (4474 <_ZN5Print11printNumberEmh+0x94>)
    440a:	4699      	mov	r9, r3

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    440c:	23ff      	movs	r3, #255	; 0xff
    440e:	4698      	mov	r8, r3
    4410:	e007      	b.n	4422 <_ZN5Print11printNumberEmh+0x42>
  if (base < 2) base = 10;
    4412:	230a      	movs	r3, #10
    4414:	9301      	str	r3, [sp, #4]
    4416:	e7f4      	b.n	4402 <_ZN5Print11printNumberEmh+0x22>
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4418:	3437      	adds	r4, #55	; 0x37
    441a:	b2e4      	uxtb	r4, r4
    441c:	703c      	strb	r4, [r7, #0]
  } while(n);
    441e:	2e00      	cmp	r6, #0
    4420:	d010      	beq.n	4444 <_ZN5Print11printNumberEmh+0x64>
    char c = n % base;
    4422:	9901      	ldr	r1, [sp, #4]
    4424:	0030      	movs	r0, r6
    4426:	47d0      	blx	sl
    4428:	000d      	movs	r5, r1
    442a:	b2cc      	uxtb	r4, r1
    n /= base;
    442c:	9901      	ldr	r1, [sp, #4]
    442e:	0030      	movs	r0, r6
    4430:	47c8      	blx	r9
    4432:	0006      	movs	r6, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4434:	3f01      	subs	r7, #1
    4436:	4643      	mov	r3, r8
    4438:	401d      	ands	r5, r3
    443a:	2d09      	cmp	r5, #9
    443c:	dcec      	bgt.n	4418 <_ZN5Print11printNumberEmh+0x38>
    443e:	3430      	adds	r4, #48	; 0x30
    4440:	b2e4      	uxtb	r4, r4
    4442:	e7eb      	b.n	441c <_ZN5Print11printNumberEmh+0x3c>
      if (str == NULL) return 0;
    4444:	2f00      	cmp	r7, #0
    4446:	d010      	beq.n	446a <_ZN5Print11printNumberEmh+0x8a>
      return write((const uint8_t *)str, strlen(str));
    4448:	0038      	movs	r0, r7
    444a:	4b0b      	ldr	r3, [pc, #44]	; (4478 <_ZN5Print11printNumberEmh+0x98>)
    444c:	4798      	blx	r3
    444e:	0002      	movs	r2, r0
    4450:	465b      	mov	r3, fp
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	685b      	ldr	r3, [r3, #4]
    4456:	0039      	movs	r1, r7
    4458:	4658      	mov	r0, fp
    445a:	4798      	blx	r3

  return write(str);
}
    445c:	b00d      	add	sp, #52	; 0x34
    445e:	bc3c      	pop	{r2, r3, r4, r5}
    4460:	4690      	mov	r8, r2
    4462:	4699      	mov	r9, r3
    4464:	46a2      	mov	sl, r4
    4466:	46ab      	mov	fp, r5
    4468:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
    446a:	2000      	movs	r0, #0
  return write(str);
    446c:	e7f6      	b.n	445c <_ZN5Print11printNumberEmh+0x7c>
    446e:	46c0      	nop			; (mov r8, r8)
    4470:	000047d5 	.word	0x000047d5
    4474:	000046c9 	.word	0x000046c9
    4478:	00005539 	.word	0x00005539

0000447c <_ZN5Print5printEmi>:
{
    447c:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    447e:	2a00      	cmp	r2, #0
    4480:	d003      	beq.n	448a <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
    4482:	b2d2      	uxtb	r2, r2
    4484:	4b03      	ldr	r3, [pc, #12]	; (4494 <_ZN5Print5printEmi+0x18>)
    4486:	4798      	blx	r3
}
    4488:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
    448a:	b2c9      	uxtb	r1, r1
    448c:	6803      	ldr	r3, [r0, #0]
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	4798      	blx	r3
    4492:	e7f9      	b.n	4488 <_ZN5Print5printEmi+0xc>
    4494:	000043e1 	.word	0x000043e1

00004498 <_ZN5Print5printEhi>:
{
    4498:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
    449a:	4b01      	ldr	r3, [pc, #4]	; (44a0 <_ZN5Print5printEhi+0x8>)
    449c:	4798      	blx	r3
}
    449e:	bd10      	pop	{r4, pc}
    44a0:	0000447d 	.word	0x0000447d

000044a4 <_ZN5Print7printlnEhi>:
{
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	0004      	movs	r4, r0
  return print((unsigned long) b, base);
    44a8:	4b03      	ldr	r3, [pc, #12]	; (44b8 <_ZN5Print7printlnEhi+0x14>)
    44aa:	4798      	blx	r3
    44ac:	0005      	movs	r5, r0
  n += println();
    44ae:	0020      	movs	r0, r4
    44b0:	4b02      	ldr	r3, [pc, #8]	; (44bc <_ZN5Print7printlnEhi+0x18>)
    44b2:	4798      	blx	r3
    44b4:	1940      	adds	r0, r0, r5
}
    44b6:	bd70      	pop	{r4, r5, r6, pc}
    44b8:	0000447d 	.word	0x0000447d
    44bc:	000043b1 	.word	0x000043b1

000044c0 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
    44c0:	4b03      	ldr	r3, [pc, #12]	; (44d0 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
    44c2:	2201      	movs	r2, #1
    44c4:	6819      	ldr	r1, [r3, #0]
    44c6:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	2200      	movs	r2, #0
    44cc:	705a      	strb	r2, [r3, #1]
}
    44ce:	4770      	bx	lr
    44d0:	20000a4c 	.word	0x20000a4c

000044d4 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
    44d4:	4b01      	ldr	r3, [pc, #4]	; (44dc <_ZN20SerialTerminal_ClassC1Ev+0x8>)
    44d6:	6018      	str	r0, [r3, #0]
} //SerialTerminal_Class
    44d8:	4770      	bx	lr
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	20000a4c 	.word	0x20000a4c

000044e0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
    44e0:	4770      	bx	lr
	...

000044e4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    44e4:	b570      	push	{r4, r5, r6, lr}
    44e6:	0004      	movs	r4, r0
		timeout=false;
    44e8:	2300      	movs	r3, #0
    44ea:	7083      	strb	r3, [r0, #2]
		terminalStarted=true;
    44ec:	3301      	adds	r3, #1
    44ee:	7043      	strb	r3, [r0, #1]
		usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    44f0:	4d0c      	ldr	r5, [pc, #48]	; (4524 <_ZN20SerialTerminal_Class6OnInitEv+0x40>)
    44f2:	2296      	movs	r2, #150	; 0x96
    44f4:	0092      	lsls	r2, r2, #2
    44f6:	490c      	ldr	r1, [pc, #48]	; (4528 <_ZN20SerialTerminal_Class6OnInitEv+0x44>)
    44f8:	0028      	movs	r0, r5
    44fa:	4b0c      	ldr	r3, [pc, #48]	; (452c <_ZN20SerialTerminal_Class6OnInitEv+0x48>)
    44fc:	4798      	blx	r3
		usbTimer.Start();
    44fe:	0028      	movs	r0, r5
    4500:	4b0b      	ldr	r3, [pc, #44]	; (4530 <_ZN20SerialTerminal_Class6OnInitEv+0x4c>)
    4502:	4798      	blx	r3
		while (!serial.IsEnabled()){
    4504:	4d0b      	ldr	r5, [pc, #44]	; (4534 <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
    4506:	4e0c      	ldr	r6, [pc, #48]	; (4538 <_ZN20SerialTerminal_Class6OnInitEv+0x54>)
    4508:	0028      	movs	r0, r5
    450a:	47b0      	blx	r6
    450c:	2800      	cmp	r0, #0
    450e:	d105      	bne.n	451c <_ZN20SerialTerminal_Class6OnInitEv+0x38>
			if (timeout)
    4510:	78a3      	ldrb	r3, [r4, #2]
    4512:	2b00      	cmp	r3, #0
    4514:	d0f8      	beq.n	4508 <_ZN20SerialTerminal_Class6OnInitEv+0x24>
			{
				plugged=false;
    4516:	2300      	movs	r3, #0
    4518:	7023      	strb	r3, [r4, #0]
				return;
    451a:	e002      	b.n	4522 <_ZN20SerialTerminal_Class6OnInitEv+0x3e>
			else
			{
			}
		}
		
		usbTimer.Stop();
    451c:	4801      	ldr	r0, [pc, #4]	; (4524 <_ZN20SerialTerminal_Class6OnInitEv+0x40>)
    451e:	4b07      	ldr	r3, [pc, #28]	; (453c <_ZN20SerialTerminal_Class6OnInitEv+0x58>)
    4520:	4798      	blx	r3
}
    4522:	bd70      	pop	{r4, r5, r6, pc}
    4524:	20000a54 	.word	0x20000a54
    4528:	000044c1 	.word	0x000044c1
    452c:	0000465d 	.word	0x0000465d
    4530:	0000461d 	.word	0x0000461d
    4534:	200009ec 	.word	0x200009ec
    4538:	00004325 	.word	0x00004325
    453c:	0000462d 	.word	0x0000462d

00004540 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    4540:	b510      	push	{r4, lr}
    4542:	0004      	movs	r4, r0
	if (terminalStarted)
    4544:	7843      	ldrb	r3, [r0, #1]
    4546:	2b00      	cmp	r3, #0
    4548:	d014      	beq.n	4574 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x34>
	{
		if (plugged||serial.IsEnabled())
    454a:	7803      	ldrb	r3, [r0, #0]
    454c:	2b00      	cmp	r3, #0
    454e:	d007      	beq.n	4560 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x20>
		{
			terminalStarted=usbTimer.Start()==0;
    4550:	480a      	ldr	r0, [pc, #40]	; (457c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x3c>)
    4552:	4b0b      	ldr	r3, [pc, #44]	; (4580 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x40>)
    4554:	4798      	blx	r3
    4556:	4243      	negs	r3, r0
    4558:	4158      	adcs	r0, r3
    455a:	b2c0      	uxtb	r0, r0
    455c:	7060      	strb	r0, [r4, #1]
    455e:	e006      	b.n	456e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
		if (plugged||serial.IsEnabled())
    4560:	4808      	ldr	r0, [pc, #32]	; (4584 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x44>)
    4562:	4b09      	ldr	r3, [pc, #36]	; (4588 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x48>)
    4564:	4798      	blx	r3
    4566:	2800      	cmp	r0, #0
    4568:	d1f2      	bne.n	4550 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x10>
		}
		else
		{
			terminalStarted=false;
    456a:	2300      	movs	r3, #0
    456c:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
    456e:	7860      	ldrb	r0, [r4, #1]
    4570:	b2c0      	uxtb	r0, r0
}
    4572:	bd10      	pop	{r4, pc}
		return	terminalStarted;
    4574:	7840      	ldrb	r0, [r0, #1]
    4576:	b2c0      	uxtb	r0, r0
    4578:	e7fb      	b.n	4572 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x32>
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	20000a54 	.word	0x20000a54
    4580:	0000461d 	.word	0x0000461d
    4584:	200009ec 	.word	0x200009ec
    4588:	00004325 	.word	0x00004325

0000458c <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    458c:	b570      	push	{r4, r5, r6, lr}
    458e:	0004      	movs	r4, r0
    4590:	000d      	movs	r5, r1
	if (terminalStarted)
    4592:	7843      	ldrb	r3, [r0, #1]
    4594:	2b00      	cmp	r3, #0
    4596:	d022      	beq.n	45de <_ZN20SerialTerminal_Class13CheckTerminalEm+0x52>
	{
		if (plugged||serial.IsEnabled())
    4598:	7803      	ldrb	r3, [r0, #0]
    459a:	2b00      	cmp	r3, #0
    459c:	d015      	beq.n	45ca <_ZN20SerialTerminal_Class13CheckTerminalEm+0x3e>
		{
			usbTimer.Stop();
    459e:	4e11      	ldr	r6, [pc, #68]	; (45e4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x58>)
    45a0:	0030      	movs	r0, r6
    45a2:	4b11      	ldr	r3, [pc, #68]	; (45e8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x5c>)
    45a4:	4798      	blx	r3
			usbTimer.Remove_task();
    45a6:	0030      	movs	r0, r6
    45a8:	4b10      	ldr	r3, [pc, #64]	; (45ec <_ZN20SerialTerminal_Class13CheckTerminalEm+0x60>)
    45aa:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    45ac:	00aa      	lsls	r2, r5, #2
    45ae:	1952      	adds	r2, r2, r5
    45b0:	0052      	lsls	r2, r2, #1
    45b2:	490f      	ldr	r1, [pc, #60]	; (45f0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x64>)
    45b4:	0030      	movs	r0, r6
    45b6:	4b0f      	ldr	r3, [pc, #60]	; (45f4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x68>)
    45b8:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    45ba:	0030      	movs	r0, r6
    45bc:	4b0e      	ldr	r3, [pc, #56]	; (45f8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>)
    45be:	4798      	blx	r3
    45c0:	4243      	negs	r3, r0
    45c2:	4158      	adcs	r0, r3
    45c4:	b2c0      	uxtb	r0, r0
    45c6:	7060      	strb	r0, [r4, #1]
    45c8:	e006      	b.n	45d8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x4c>
		if (plugged||serial.IsEnabled())
    45ca:	480c      	ldr	r0, [pc, #48]	; (45fc <_ZN20SerialTerminal_Class13CheckTerminalEm+0x70>)
    45cc:	4b0c      	ldr	r3, [pc, #48]	; (4600 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>)
    45ce:	4798      	blx	r3
    45d0:	2800      	cmp	r0, #0
    45d2:	d1e4      	bne.n	459e <_ZN20SerialTerminal_Class13CheckTerminalEm+0x12>
		}
		else
		{
			terminalStarted=false;
    45d4:	2300      	movs	r3, #0
    45d6:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
    45d8:	7860      	ldrb	r0, [r4, #1]
    45da:	b2c0      	uxtb	r0, r0
    45dc:	bd70      	pop	{r4, r5, r6, pc}
		return	terminalStarted;
    45de:	7840      	ldrb	r0, [r0, #1]
    45e0:	b2c0      	uxtb	r0, r0
    45e2:	e7fb      	b.n	45dc <_ZN20SerialTerminal_Class13CheckTerminalEm+0x50>
    45e4:	20000a54 	.word	0x20000a54
    45e8:	0000462d 	.word	0x0000462d
    45ec:	0000466d 	.word	0x0000466d
    45f0:	000044c1 	.word	0x000044c1
    45f4:	0000465d 	.word	0x0000465d
    45f8:	0000461d 	.word	0x0000461d
    45fc:	200009ec 	.word	0x200009ec
    4600:	00004325 	.word	0x00004325

00004604 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
    4604:	2300      	movs	r3, #0
    4606:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
    4608:	4770      	bx	lr
	...

0000460c <_ZL7task_cbPK10timer_task>:
	ptrTimerClass->setTimeout();
    460c:	4b02      	ldr	r3, [pc, #8]	; (4618 <_ZL7task_cbPK10timer_task+0xc>)
    460e:	681b      	ldr	r3, [r3, #0]
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
	timeout=1;
    4610:	2201      	movs	r2, #1
    4612:	705a      	strb	r2, [r3, #1]
}
    4614:	4770      	bx	lr
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	20000a50 	.word	0x20000a50

0000461c <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
    461c:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
    461e:	6880      	ldr	r0, [r0, #8]
    4620:	4b01      	ldr	r3, [pc, #4]	; (4628 <_ZN17TimerSerial_Class5StartEv+0xc>)
    4622:	4798      	blx	r3
}
    4624:	bd10      	pop	{r4, pc}
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	000014e9 	.word	0x000014e9

0000462c <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
    462c:	b510      	push	{r4, lr}
    462e:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
    4630:	6880      	ldr	r0, [r0, #8]
    4632:	4b02      	ldr	r3, [pc, #8]	; (463c <_ZN17TimerSerial_Class4StopEv+0x10>)
    4634:	4798      	blx	r3
	timeout=0;
    4636:	2300      	movs	r3, #0
    4638:	7063      	strb	r3, [r4, #1]
}
    463a:	bd10      	pop	{r4, pc}
    463c:	00001525 	.word	0x00001525

00004640 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    4640:	b510      	push	{r4, lr}
	int32_t	status;

	task.interval = interval;
    4642:	61c2      	str	r2, [r0, #28]
	task.cb       = (timer_cb_t)func;
    4644:	6201      	str	r1, [r0, #32]
	task.mode     = modeTask;
    4646:	2224      	movs	r2, #36	; 0x24
    4648:	5483      	strb	r3, [r0, r2]
	status=timer_add_task(timer_descr, &task);
    464a:	0001      	movs	r1, r0
    464c:	3114      	adds	r1, #20
    464e:	6880      	ldr	r0, [r0, #8]
    4650:	4b01      	ldr	r3, [pc, #4]	; (4658 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x18>)
    4652:	4798      	blx	r3
	
	return status;
}
    4654:	bd10      	pop	{r4, pc}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	00001561 	.word	0x00001561

0000465c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    465c:	b510      	push	{r4, lr}
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    465e:	2300      	movs	r3, #0
    4660:	4c01      	ldr	r4, [pc, #4]	; (4668 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0xc>)
    4662:	47a0      	blx	r4
	return status;
}
    4664:	bd10      	pop	{r4, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	00004641 	.word	0x00004641

0000466c <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    466c:	b510      	push	{r4, lr}
	timer_remove_task(timer_descr, &task);
    466e:	0001      	movs	r1, r0
    4670:	3114      	adds	r1, #20
    4672:	6880      	ldr	r0, [r0, #8]
    4674:	4b01      	ldr	r3, [pc, #4]	; (467c <_ZN17TimerSerial_Class11Remove_taskEv+0x10>)
    4676:	4798      	blx	r3
}
    4678:	bd10      	pop	{r4, pc}
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	0000160d 	.word	0x0000160d

00004680 <_GLOBAL__sub_I_ptrTimerClass>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_0);
    4680:	b510      	push	{r4, lr}
	timer_descr=descr;
    4682:	4b07      	ldr	r3, [pc, #28]	; (46a0 <_GLOBAL__sub_I_ptrTimerClass+0x20>)
    4684:	4a07      	ldr	r2, [pc, #28]	; (46a4 <_GLOBAL__sub_I_ptrTimerClass+0x24>)
    4686:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    4688:	1d18      	adds	r0, r3, #4
    468a:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
    468c:	2280      	movs	r2, #128	; 0x80
    468e:	00d2      	lsls	r2, r2, #3
    4690:	615a      	str	r2, [r3, #20]
	task.cb=task_cb;
    4692:	4a05      	ldr	r2, [pc, #20]	; (46a8 <_GLOBAL__sub_I_ptrTimerClass+0x28>)
    4694:	625a      	str	r2, [r3, #36]	; 0x24
TimerSerial_Class usbTimer(&TIMER_0);
    4696:	4a05      	ldr	r2, [pc, #20]	; (46ac <_GLOBAL__sub_I_ptrTimerClass+0x2c>)
    4698:	4905      	ldr	r1, [pc, #20]	; (46b0 <_GLOBAL__sub_I_ptrTimerClass+0x30>)
    469a:	4b06      	ldr	r3, [pc, #24]	; (46b4 <_GLOBAL__sub_I_ptrTimerClass+0x34>)
    469c:	4798      	blx	r3
    469e:	bd10      	pop	{r4, pc}
    46a0:	20000a50 	.word	0x20000a50
    46a4:	20000a80 	.word	0x20000a80
    46a8:	0000460d 	.word	0x0000460d
    46ac:	20000000 	.word	0x20000000
    46b0:	00004605 	.word	0x00004605
    46b4:	000046b9 	.word	0x000046b9

000046b8 <__aeabi_atexit>:
    46b8:	000b      	movs	r3, r1
    46ba:	b510      	push	{r4, lr}
    46bc:	0001      	movs	r1, r0
    46be:	0018      	movs	r0, r3
    46c0:	f000 fe82 	bl	53c8 <__cxa_atexit>
    46c4:	bd10      	pop	{r4, pc}
    46c6:	46c0      	nop			; (mov r8, r8)

000046c8 <__udivsi3>:
    46c8:	2200      	movs	r2, #0
    46ca:	0843      	lsrs	r3, r0, #1
    46cc:	428b      	cmp	r3, r1
    46ce:	d374      	bcc.n	47ba <__udivsi3+0xf2>
    46d0:	0903      	lsrs	r3, r0, #4
    46d2:	428b      	cmp	r3, r1
    46d4:	d35f      	bcc.n	4796 <__udivsi3+0xce>
    46d6:	0a03      	lsrs	r3, r0, #8
    46d8:	428b      	cmp	r3, r1
    46da:	d344      	bcc.n	4766 <__udivsi3+0x9e>
    46dc:	0b03      	lsrs	r3, r0, #12
    46de:	428b      	cmp	r3, r1
    46e0:	d328      	bcc.n	4734 <__udivsi3+0x6c>
    46e2:	0c03      	lsrs	r3, r0, #16
    46e4:	428b      	cmp	r3, r1
    46e6:	d30d      	bcc.n	4704 <__udivsi3+0x3c>
    46e8:	22ff      	movs	r2, #255	; 0xff
    46ea:	0209      	lsls	r1, r1, #8
    46ec:	ba12      	rev	r2, r2
    46ee:	0c03      	lsrs	r3, r0, #16
    46f0:	428b      	cmp	r3, r1
    46f2:	d302      	bcc.n	46fa <__udivsi3+0x32>
    46f4:	1212      	asrs	r2, r2, #8
    46f6:	0209      	lsls	r1, r1, #8
    46f8:	d065      	beq.n	47c6 <__udivsi3+0xfe>
    46fa:	0b03      	lsrs	r3, r0, #12
    46fc:	428b      	cmp	r3, r1
    46fe:	d319      	bcc.n	4734 <__udivsi3+0x6c>
    4700:	e000      	b.n	4704 <__udivsi3+0x3c>
    4702:	0a09      	lsrs	r1, r1, #8
    4704:	0bc3      	lsrs	r3, r0, #15
    4706:	428b      	cmp	r3, r1
    4708:	d301      	bcc.n	470e <__udivsi3+0x46>
    470a:	03cb      	lsls	r3, r1, #15
    470c:	1ac0      	subs	r0, r0, r3
    470e:	4152      	adcs	r2, r2
    4710:	0b83      	lsrs	r3, r0, #14
    4712:	428b      	cmp	r3, r1
    4714:	d301      	bcc.n	471a <__udivsi3+0x52>
    4716:	038b      	lsls	r3, r1, #14
    4718:	1ac0      	subs	r0, r0, r3
    471a:	4152      	adcs	r2, r2
    471c:	0b43      	lsrs	r3, r0, #13
    471e:	428b      	cmp	r3, r1
    4720:	d301      	bcc.n	4726 <__udivsi3+0x5e>
    4722:	034b      	lsls	r3, r1, #13
    4724:	1ac0      	subs	r0, r0, r3
    4726:	4152      	adcs	r2, r2
    4728:	0b03      	lsrs	r3, r0, #12
    472a:	428b      	cmp	r3, r1
    472c:	d301      	bcc.n	4732 <__udivsi3+0x6a>
    472e:	030b      	lsls	r3, r1, #12
    4730:	1ac0      	subs	r0, r0, r3
    4732:	4152      	adcs	r2, r2
    4734:	0ac3      	lsrs	r3, r0, #11
    4736:	428b      	cmp	r3, r1
    4738:	d301      	bcc.n	473e <__udivsi3+0x76>
    473a:	02cb      	lsls	r3, r1, #11
    473c:	1ac0      	subs	r0, r0, r3
    473e:	4152      	adcs	r2, r2
    4740:	0a83      	lsrs	r3, r0, #10
    4742:	428b      	cmp	r3, r1
    4744:	d301      	bcc.n	474a <__udivsi3+0x82>
    4746:	028b      	lsls	r3, r1, #10
    4748:	1ac0      	subs	r0, r0, r3
    474a:	4152      	adcs	r2, r2
    474c:	0a43      	lsrs	r3, r0, #9
    474e:	428b      	cmp	r3, r1
    4750:	d301      	bcc.n	4756 <__udivsi3+0x8e>
    4752:	024b      	lsls	r3, r1, #9
    4754:	1ac0      	subs	r0, r0, r3
    4756:	4152      	adcs	r2, r2
    4758:	0a03      	lsrs	r3, r0, #8
    475a:	428b      	cmp	r3, r1
    475c:	d301      	bcc.n	4762 <__udivsi3+0x9a>
    475e:	020b      	lsls	r3, r1, #8
    4760:	1ac0      	subs	r0, r0, r3
    4762:	4152      	adcs	r2, r2
    4764:	d2cd      	bcs.n	4702 <__udivsi3+0x3a>
    4766:	09c3      	lsrs	r3, r0, #7
    4768:	428b      	cmp	r3, r1
    476a:	d301      	bcc.n	4770 <__udivsi3+0xa8>
    476c:	01cb      	lsls	r3, r1, #7
    476e:	1ac0      	subs	r0, r0, r3
    4770:	4152      	adcs	r2, r2
    4772:	0983      	lsrs	r3, r0, #6
    4774:	428b      	cmp	r3, r1
    4776:	d301      	bcc.n	477c <__udivsi3+0xb4>
    4778:	018b      	lsls	r3, r1, #6
    477a:	1ac0      	subs	r0, r0, r3
    477c:	4152      	adcs	r2, r2
    477e:	0943      	lsrs	r3, r0, #5
    4780:	428b      	cmp	r3, r1
    4782:	d301      	bcc.n	4788 <__udivsi3+0xc0>
    4784:	014b      	lsls	r3, r1, #5
    4786:	1ac0      	subs	r0, r0, r3
    4788:	4152      	adcs	r2, r2
    478a:	0903      	lsrs	r3, r0, #4
    478c:	428b      	cmp	r3, r1
    478e:	d301      	bcc.n	4794 <__udivsi3+0xcc>
    4790:	010b      	lsls	r3, r1, #4
    4792:	1ac0      	subs	r0, r0, r3
    4794:	4152      	adcs	r2, r2
    4796:	08c3      	lsrs	r3, r0, #3
    4798:	428b      	cmp	r3, r1
    479a:	d301      	bcc.n	47a0 <__udivsi3+0xd8>
    479c:	00cb      	lsls	r3, r1, #3
    479e:	1ac0      	subs	r0, r0, r3
    47a0:	4152      	adcs	r2, r2
    47a2:	0883      	lsrs	r3, r0, #2
    47a4:	428b      	cmp	r3, r1
    47a6:	d301      	bcc.n	47ac <__udivsi3+0xe4>
    47a8:	008b      	lsls	r3, r1, #2
    47aa:	1ac0      	subs	r0, r0, r3
    47ac:	4152      	adcs	r2, r2
    47ae:	0843      	lsrs	r3, r0, #1
    47b0:	428b      	cmp	r3, r1
    47b2:	d301      	bcc.n	47b8 <__udivsi3+0xf0>
    47b4:	004b      	lsls	r3, r1, #1
    47b6:	1ac0      	subs	r0, r0, r3
    47b8:	4152      	adcs	r2, r2
    47ba:	1a41      	subs	r1, r0, r1
    47bc:	d200      	bcs.n	47c0 <__udivsi3+0xf8>
    47be:	4601      	mov	r1, r0
    47c0:	4152      	adcs	r2, r2
    47c2:	4610      	mov	r0, r2
    47c4:	4770      	bx	lr
    47c6:	e7ff      	b.n	47c8 <__udivsi3+0x100>
    47c8:	b501      	push	{r0, lr}
    47ca:	2000      	movs	r0, #0
    47cc:	f000 f806 	bl	47dc <__aeabi_idiv0>
    47d0:	bd02      	pop	{r1, pc}
    47d2:	46c0      	nop			; (mov r8, r8)

000047d4 <__aeabi_uidivmod>:
    47d4:	2900      	cmp	r1, #0
    47d6:	d0f7      	beq.n	47c8 <__udivsi3+0x100>
    47d8:	e776      	b.n	46c8 <__udivsi3>
    47da:	4770      	bx	lr

000047dc <__aeabi_idiv0>:
    47dc:	4770      	bx	lr
    47de:	46c0      	nop			; (mov r8, r8)

000047e0 <__aeabi_cfrcmple>:
    47e0:	4684      	mov	ip, r0
    47e2:	1c08      	adds	r0, r1, #0
    47e4:	4661      	mov	r1, ip
    47e6:	e7ff      	b.n	47e8 <__aeabi_cfcmpeq>

000047e8 <__aeabi_cfcmpeq>:
    47e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    47ea:	f000 fb8b 	bl	4f04 <__lesf2>
    47ee:	2800      	cmp	r0, #0
    47f0:	d401      	bmi.n	47f6 <__aeabi_cfcmpeq+0xe>
    47f2:	2100      	movs	r1, #0
    47f4:	42c8      	cmn	r0, r1
    47f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000047f8 <__aeabi_fcmpeq>:
    47f8:	b510      	push	{r4, lr}
    47fa:	f000 fb1d 	bl	4e38 <__eqsf2>
    47fe:	4240      	negs	r0, r0
    4800:	3001      	adds	r0, #1
    4802:	bd10      	pop	{r4, pc}

00004804 <__aeabi_fcmplt>:
    4804:	b510      	push	{r4, lr}
    4806:	f000 fb7d 	bl	4f04 <__lesf2>
    480a:	2800      	cmp	r0, #0
    480c:	db01      	blt.n	4812 <__aeabi_fcmplt+0xe>
    480e:	2000      	movs	r0, #0
    4810:	bd10      	pop	{r4, pc}
    4812:	2001      	movs	r0, #1
    4814:	bd10      	pop	{r4, pc}
    4816:	46c0      	nop			; (mov r8, r8)

00004818 <__aeabi_fcmple>:
    4818:	b510      	push	{r4, lr}
    481a:	f000 fb73 	bl	4f04 <__lesf2>
    481e:	2800      	cmp	r0, #0
    4820:	dd01      	ble.n	4826 <__aeabi_fcmple+0xe>
    4822:	2000      	movs	r0, #0
    4824:	bd10      	pop	{r4, pc}
    4826:	2001      	movs	r0, #1
    4828:	bd10      	pop	{r4, pc}
    482a:	46c0      	nop			; (mov r8, r8)

0000482c <__aeabi_fcmpgt>:
    482c:	b510      	push	{r4, lr}
    482e:	f000 fb29 	bl	4e84 <__gesf2>
    4832:	2800      	cmp	r0, #0
    4834:	dc01      	bgt.n	483a <__aeabi_fcmpgt+0xe>
    4836:	2000      	movs	r0, #0
    4838:	bd10      	pop	{r4, pc}
    483a:	2001      	movs	r0, #1
    483c:	bd10      	pop	{r4, pc}
    483e:	46c0      	nop			; (mov r8, r8)

00004840 <__aeabi_fcmpge>:
    4840:	b510      	push	{r4, lr}
    4842:	f000 fb1f 	bl	4e84 <__gesf2>
    4846:	2800      	cmp	r0, #0
    4848:	da01      	bge.n	484e <__aeabi_fcmpge+0xe>
    484a:	2000      	movs	r0, #0
    484c:	bd10      	pop	{r4, pc}
    484e:	2001      	movs	r0, #1
    4850:	bd10      	pop	{r4, pc}
    4852:	46c0      	nop			; (mov r8, r8)

00004854 <__aeabi_f2uiz>:
    4854:	219e      	movs	r1, #158	; 0x9e
    4856:	b510      	push	{r4, lr}
    4858:	05c9      	lsls	r1, r1, #23
    485a:	1c04      	adds	r4, r0, #0
    485c:	f7ff fff0 	bl	4840 <__aeabi_fcmpge>
    4860:	2800      	cmp	r0, #0
    4862:	d103      	bne.n	486c <__aeabi_f2uiz+0x18>
    4864:	1c20      	adds	r0, r4, #0
    4866:	f000 fd2b 	bl	52c0 <__aeabi_f2iz>
    486a:	bd10      	pop	{r4, pc}
    486c:	219e      	movs	r1, #158	; 0x9e
    486e:	1c20      	adds	r0, r4, #0
    4870:	05c9      	lsls	r1, r1, #23
    4872:	f000 fb89 	bl	4f88 <__aeabi_fsub>
    4876:	f000 fd23 	bl	52c0 <__aeabi_f2iz>
    487a:	2380      	movs	r3, #128	; 0x80
    487c:	061b      	lsls	r3, r3, #24
    487e:	469c      	mov	ip, r3
    4880:	4460      	add	r0, ip
    4882:	e7f2      	b.n	486a <__aeabi_f2uiz+0x16>

00004884 <__aeabi_fadd>:
    4884:	b5f0      	push	{r4, r5, r6, r7, lr}
    4886:	46c6      	mov	lr, r8
    4888:	024e      	lsls	r6, r1, #9
    488a:	0247      	lsls	r7, r0, #9
    488c:	0a76      	lsrs	r6, r6, #9
    488e:	0a7b      	lsrs	r3, r7, #9
    4890:	0044      	lsls	r4, r0, #1
    4892:	0fc5      	lsrs	r5, r0, #31
    4894:	00f7      	lsls	r7, r6, #3
    4896:	0048      	lsls	r0, r1, #1
    4898:	4698      	mov	r8, r3
    489a:	b500      	push	{lr}
    489c:	0e24      	lsrs	r4, r4, #24
    489e:	002a      	movs	r2, r5
    48a0:	00db      	lsls	r3, r3, #3
    48a2:	0e00      	lsrs	r0, r0, #24
    48a4:	0fc9      	lsrs	r1, r1, #31
    48a6:	46bc      	mov	ip, r7
    48a8:	428d      	cmp	r5, r1
    48aa:	d067      	beq.n	497c <__aeabi_fadd+0xf8>
    48ac:	1a22      	subs	r2, r4, r0
    48ae:	2a00      	cmp	r2, #0
    48b0:	dc00      	bgt.n	48b4 <__aeabi_fadd+0x30>
    48b2:	e0a5      	b.n	4a00 <__aeabi_fadd+0x17c>
    48b4:	2800      	cmp	r0, #0
    48b6:	d13a      	bne.n	492e <__aeabi_fadd+0xaa>
    48b8:	2f00      	cmp	r7, #0
    48ba:	d100      	bne.n	48be <__aeabi_fadd+0x3a>
    48bc:	e093      	b.n	49e6 <__aeabi_fadd+0x162>
    48be:	1e51      	subs	r1, r2, #1
    48c0:	2900      	cmp	r1, #0
    48c2:	d000      	beq.n	48c6 <__aeabi_fadd+0x42>
    48c4:	e0bc      	b.n	4a40 <__aeabi_fadd+0x1bc>
    48c6:	2401      	movs	r4, #1
    48c8:	1bdb      	subs	r3, r3, r7
    48ca:	015a      	lsls	r2, r3, #5
    48cc:	d546      	bpl.n	495c <__aeabi_fadd+0xd8>
    48ce:	019b      	lsls	r3, r3, #6
    48d0:	099e      	lsrs	r6, r3, #6
    48d2:	0030      	movs	r0, r6
    48d4:	f000 fd5a 	bl	538c <__clzsi2>
    48d8:	3805      	subs	r0, #5
    48da:	4086      	lsls	r6, r0
    48dc:	4284      	cmp	r4, r0
    48de:	dd00      	ble.n	48e2 <__aeabi_fadd+0x5e>
    48e0:	e09d      	b.n	4a1e <__aeabi_fadd+0x19a>
    48e2:	1b04      	subs	r4, r0, r4
    48e4:	0032      	movs	r2, r6
    48e6:	2020      	movs	r0, #32
    48e8:	3401      	adds	r4, #1
    48ea:	40e2      	lsrs	r2, r4
    48ec:	1b04      	subs	r4, r0, r4
    48ee:	40a6      	lsls	r6, r4
    48f0:	0033      	movs	r3, r6
    48f2:	1e5e      	subs	r6, r3, #1
    48f4:	41b3      	sbcs	r3, r6
    48f6:	2400      	movs	r4, #0
    48f8:	4313      	orrs	r3, r2
    48fa:	075a      	lsls	r2, r3, #29
    48fc:	d004      	beq.n	4908 <__aeabi_fadd+0x84>
    48fe:	220f      	movs	r2, #15
    4900:	401a      	ands	r2, r3
    4902:	2a04      	cmp	r2, #4
    4904:	d000      	beq.n	4908 <__aeabi_fadd+0x84>
    4906:	3304      	adds	r3, #4
    4908:	015a      	lsls	r2, r3, #5
    490a:	d529      	bpl.n	4960 <__aeabi_fadd+0xdc>
    490c:	3401      	adds	r4, #1
    490e:	2cff      	cmp	r4, #255	; 0xff
    4910:	d100      	bne.n	4914 <__aeabi_fadd+0x90>
    4912:	e081      	b.n	4a18 <__aeabi_fadd+0x194>
    4914:	002a      	movs	r2, r5
    4916:	019b      	lsls	r3, r3, #6
    4918:	0a5b      	lsrs	r3, r3, #9
    491a:	b2e4      	uxtb	r4, r4
    491c:	025b      	lsls	r3, r3, #9
    491e:	05e4      	lsls	r4, r4, #23
    4920:	0a58      	lsrs	r0, r3, #9
    4922:	07d2      	lsls	r2, r2, #31
    4924:	4320      	orrs	r0, r4
    4926:	4310      	orrs	r0, r2
    4928:	bc04      	pop	{r2}
    492a:	4690      	mov	r8, r2
    492c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    492e:	2cff      	cmp	r4, #255	; 0xff
    4930:	d0e3      	beq.n	48fa <__aeabi_fadd+0x76>
    4932:	2180      	movs	r1, #128	; 0x80
    4934:	0038      	movs	r0, r7
    4936:	04c9      	lsls	r1, r1, #19
    4938:	4308      	orrs	r0, r1
    493a:	4684      	mov	ip, r0
    493c:	2a1b      	cmp	r2, #27
    493e:	dd00      	ble.n	4942 <__aeabi_fadd+0xbe>
    4940:	e082      	b.n	4a48 <__aeabi_fadd+0x1c4>
    4942:	2020      	movs	r0, #32
    4944:	4661      	mov	r1, ip
    4946:	40d1      	lsrs	r1, r2
    4948:	1a82      	subs	r2, r0, r2
    494a:	4660      	mov	r0, ip
    494c:	4090      	lsls	r0, r2
    494e:	0002      	movs	r2, r0
    4950:	1e50      	subs	r0, r2, #1
    4952:	4182      	sbcs	r2, r0
    4954:	430a      	orrs	r2, r1
    4956:	1a9b      	subs	r3, r3, r2
    4958:	015a      	lsls	r2, r3, #5
    495a:	d4b8      	bmi.n	48ce <__aeabi_fadd+0x4a>
    495c:	075a      	lsls	r2, r3, #29
    495e:	d1ce      	bne.n	48fe <__aeabi_fadd+0x7a>
    4960:	08de      	lsrs	r6, r3, #3
    4962:	002a      	movs	r2, r5
    4964:	2cff      	cmp	r4, #255	; 0xff
    4966:	d13a      	bne.n	49de <__aeabi_fadd+0x15a>
    4968:	2e00      	cmp	r6, #0
    496a:	d100      	bne.n	496e <__aeabi_fadd+0xea>
    496c:	e0ae      	b.n	4acc <__aeabi_fadd+0x248>
    496e:	2380      	movs	r3, #128	; 0x80
    4970:	03db      	lsls	r3, r3, #15
    4972:	4333      	orrs	r3, r6
    4974:	025b      	lsls	r3, r3, #9
    4976:	0a5b      	lsrs	r3, r3, #9
    4978:	24ff      	movs	r4, #255	; 0xff
    497a:	e7cf      	b.n	491c <__aeabi_fadd+0x98>
    497c:	1a21      	subs	r1, r4, r0
    497e:	2900      	cmp	r1, #0
    4980:	dd52      	ble.n	4a28 <__aeabi_fadd+0x1a4>
    4982:	2800      	cmp	r0, #0
    4984:	d031      	beq.n	49ea <__aeabi_fadd+0x166>
    4986:	2cff      	cmp	r4, #255	; 0xff
    4988:	d0b7      	beq.n	48fa <__aeabi_fadd+0x76>
    498a:	2080      	movs	r0, #128	; 0x80
    498c:	003e      	movs	r6, r7
    498e:	04c0      	lsls	r0, r0, #19
    4990:	4306      	orrs	r6, r0
    4992:	46b4      	mov	ip, r6
    4994:	291b      	cmp	r1, #27
    4996:	dd00      	ble.n	499a <__aeabi_fadd+0x116>
    4998:	e0aa      	b.n	4af0 <__aeabi_fadd+0x26c>
    499a:	2620      	movs	r6, #32
    499c:	4660      	mov	r0, ip
    499e:	40c8      	lsrs	r0, r1
    49a0:	1a71      	subs	r1, r6, r1
    49a2:	4666      	mov	r6, ip
    49a4:	408e      	lsls	r6, r1
    49a6:	0031      	movs	r1, r6
    49a8:	1e4e      	subs	r6, r1, #1
    49aa:	41b1      	sbcs	r1, r6
    49ac:	4301      	orrs	r1, r0
    49ae:	185b      	adds	r3, r3, r1
    49b0:	0159      	lsls	r1, r3, #5
    49b2:	d5d3      	bpl.n	495c <__aeabi_fadd+0xd8>
    49b4:	3401      	adds	r4, #1
    49b6:	2cff      	cmp	r4, #255	; 0xff
    49b8:	d100      	bne.n	49bc <__aeabi_fadd+0x138>
    49ba:	e087      	b.n	4acc <__aeabi_fadd+0x248>
    49bc:	2201      	movs	r2, #1
    49be:	4978      	ldr	r1, [pc, #480]	; (4ba0 <__aeabi_fadd+0x31c>)
    49c0:	401a      	ands	r2, r3
    49c2:	085b      	lsrs	r3, r3, #1
    49c4:	400b      	ands	r3, r1
    49c6:	4313      	orrs	r3, r2
    49c8:	e797      	b.n	48fa <__aeabi_fadd+0x76>
    49ca:	2c00      	cmp	r4, #0
    49cc:	d000      	beq.n	49d0 <__aeabi_fadd+0x14c>
    49ce:	e0a7      	b.n	4b20 <__aeabi_fadd+0x29c>
    49d0:	2b00      	cmp	r3, #0
    49d2:	d000      	beq.n	49d6 <__aeabi_fadd+0x152>
    49d4:	e0b6      	b.n	4b44 <__aeabi_fadd+0x2c0>
    49d6:	1e3b      	subs	r3, r7, #0
    49d8:	d162      	bne.n	4aa0 <__aeabi_fadd+0x21c>
    49da:	2600      	movs	r6, #0
    49dc:	2200      	movs	r2, #0
    49de:	0273      	lsls	r3, r6, #9
    49e0:	0a5b      	lsrs	r3, r3, #9
    49e2:	b2e4      	uxtb	r4, r4
    49e4:	e79a      	b.n	491c <__aeabi_fadd+0x98>
    49e6:	0014      	movs	r4, r2
    49e8:	e787      	b.n	48fa <__aeabi_fadd+0x76>
    49ea:	2f00      	cmp	r7, #0
    49ec:	d04d      	beq.n	4a8a <__aeabi_fadd+0x206>
    49ee:	1e48      	subs	r0, r1, #1
    49f0:	2800      	cmp	r0, #0
    49f2:	d157      	bne.n	4aa4 <__aeabi_fadd+0x220>
    49f4:	4463      	add	r3, ip
    49f6:	2401      	movs	r4, #1
    49f8:	015a      	lsls	r2, r3, #5
    49fa:	d5af      	bpl.n	495c <__aeabi_fadd+0xd8>
    49fc:	2402      	movs	r4, #2
    49fe:	e7dd      	b.n	49bc <__aeabi_fadd+0x138>
    4a00:	2a00      	cmp	r2, #0
    4a02:	d124      	bne.n	4a4e <__aeabi_fadd+0x1ca>
    4a04:	1c62      	adds	r2, r4, #1
    4a06:	b2d2      	uxtb	r2, r2
    4a08:	2a01      	cmp	r2, #1
    4a0a:	ddde      	ble.n	49ca <__aeabi_fadd+0x146>
    4a0c:	1bde      	subs	r6, r3, r7
    4a0e:	0172      	lsls	r2, r6, #5
    4a10:	d535      	bpl.n	4a7e <__aeabi_fadd+0x1fa>
    4a12:	1afe      	subs	r6, r7, r3
    4a14:	000d      	movs	r5, r1
    4a16:	e75c      	b.n	48d2 <__aeabi_fadd+0x4e>
    4a18:	002a      	movs	r2, r5
    4a1a:	2300      	movs	r3, #0
    4a1c:	e77e      	b.n	491c <__aeabi_fadd+0x98>
    4a1e:	0033      	movs	r3, r6
    4a20:	4a60      	ldr	r2, [pc, #384]	; (4ba4 <__aeabi_fadd+0x320>)
    4a22:	1a24      	subs	r4, r4, r0
    4a24:	4013      	ands	r3, r2
    4a26:	e768      	b.n	48fa <__aeabi_fadd+0x76>
    4a28:	2900      	cmp	r1, #0
    4a2a:	d163      	bne.n	4af4 <__aeabi_fadd+0x270>
    4a2c:	1c61      	adds	r1, r4, #1
    4a2e:	b2c8      	uxtb	r0, r1
    4a30:	2801      	cmp	r0, #1
    4a32:	dd4e      	ble.n	4ad2 <__aeabi_fadd+0x24e>
    4a34:	29ff      	cmp	r1, #255	; 0xff
    4a36:	d049      	beq.n	4acc <__aeabi_fadd+0x248>
    4a38:	4463      	add	r3, ip
    4a3a:	085b      	lsrs	r3, r3, #1
    4a3c:	000c      	movs	r4, r1
    4a3e:	e75c      	b.n	48fa <__aeabi_fadd+0x76>
    4a40:	2aff      	cmp	r2, #255	; 0xff
    4a42:	d041      	beq.n	4ac8 <__aeabi_fadd+0x244>
    4a44:	000a      	movs	r2, r1
    4a46:	e779      	b.n	493c <__aeabi_fadd+0xb8>
    4a48:	2201      	movs	r2, #1
    4a4a:	1a9b      	subs	r3, r3, r2
    4a4c:	e784      	b.n	4958 <__aeabi_fadd+0xd4>
    4a4e:	2c00      	cmp	r4, #0
    4a50:	d01d      	beq.n	4a8e <__aeabi_fadd+0x20a>
    4a52:	28ff      	cmp	r0, #255	; 0xff
    4a54:	d022      	beq.n	4a9c <__aeabi_fadd+0x218>
    4a56:	2480      	movs	r4, #128	; 0x80
    4a58:	04e4      	lsls	r4, r4, #19
    4a5a:	4252      	negs	r2, r2
    4a5c:	4323      	orrs	r3, r4
    4a5e:	2a1b      	cmp	r2, #27
    4a60:	dd00      	ble.n	4a64 <__aeabi_fadd+0x1e0>
    4a62:	e08a      	b.n	4b7a <__aeabi_fadd+0x2f6>
    4a64:	001c      	movs	r4, r3
    4a66:	2520      	movs	r5, #32
    4a68:	40d4      	lsrs	r4, r2
    4a6a:	1aaa      	subs	r2, r5, r2
    4a6c:	4093      	lsls	r3, r2
    4a6e:	1e5a      	subs	r2, r3, #1
    4a70:	4193      	sbcs	r3, r2
    4a72:	4323      	orrs	r3, r4
    4a74:	4662      	mov	r2, ip
    4a76:	0004      	movs	r4, r0
    4a78:	1ad3      	subs	r3, r2, r3
    4a7a:	000d      	movs	r5, r1
    4a7c:	e725      	b.n	48ca <__aeabi_fadd+0x46>
    4a7e:	2e00      	cmp	r6, #0
    4a80:	d000      	beq.n	4a84 <__aeabi_fadd+0x200>
    4a82:	e726      	b.n	48d2 <__aeabi_fadd+0x4e>
    4a84:	2200      	movs	r2, #0
    4a86:	2400      	movs	r4, #0
    4a88:	e7a9      	b.n	49de <__aeabi_fadd+0x15a>
    4a8a:	000c      	movs	r4, r1
    4a8c:	e735      	b.n	48fa <__aeabi_fadd+0x76>
    4a8e:	2b00      	cmp	r3, #0
    4a90:	d04d      	beq.n	4b2e <__aeabi_fadd+0x2aa>
    4a92:	43d2      	mvns	r2, r2
    4a94:	2a00      	cmp	r2, #0
    4a96:	d0ed      	beq.n	4a74 <__aeabi_fadd+0x1f0>
    4a98:	28ff      	cmp	r0, #255	; 0xff
    4a9a:	d1e0      	bne.n	4a5e <__aeabi_fadd+0x1da>
    4a9c:	4663      	mov	r3, ip
    4a9e:	24ff      	movs	r4, #255	; 0xff
    4aa0:	000d      	movs	r5, r1
    4aa2:	e72a      	b.n	48fa <__aeabi_fadd+0x76>
    4aa4:	29ff      	cmp	r1, #255	; 0xff
    4aa6:	d00f      	beq.n	4ac8 <__aeabi_fadd+0x244>
    4aa8:	0001      	movs	r1, r0
    4aaa:	e773      	b.n	4994 <__aeabi_fadd+0x110>
    4aac:	2b00      	cmp	r3, #0
    4aae:	d061      	beq.n	4b74 <__aeabi_fadd+0x2f0>
    4ab0:	24ff      	movs	r4, #255	; 0xff
    4ab2:	2f00      	cmp	r7, #0
    4ab4:	d100      	bne.n	4ab8 <__aeabi_fadd+0x234>
    4ab6:	e720      	b.n	48fa <__aeabi_fadd+0x76>
    4ab8:	2280      	movs	r2, #128	; 0x80
    4aba:	4641      	mov	r1, r8
    4abc:	03d2      	lsls	r2, r2, #15
    4abe:	4211      	tst	r1, r2
    4ac0:	d002      	beq.n	4ac8 <__aeabi_fadd+0x244>
    4ac2:	4216      	tst	r6, r2
    4ac4:	d100      	bne.n	4ac8 <__aeabi_fadd+0x244>
    4ac6:	003b      	movs	r3, r7
    4ac8:	24ff      	movs	r4, #255	; 0xff
    4aca:	e716      	b.n	48fa <__aeabi_fadd+0x76>
    4acc:	24ff      	movs	r4, #255	; 0xff
    4ace:	2300      	movs	r3, #0
    4ad0:	e724      	b.n	491c <__aeabi_fadd+0x98>
    4ad2:	2c00      	cmp	r4, #0
    4ad4:	d1ea      	bne.n	4aac <__aeabi_fadd+0x228>
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d058      	beq.n	4b8c <__aeabi_fadd+0x308>
    4ada:	2f00      	cmp	r7, #0
    4adc:	d100      	bne.n	4ae0 <__aeabi_fadd+0x25c>
    4ade:	e70c      	b.n	48fa <__aeabi_fadd+0x76>
    4ae0:	4463      	add	r3, ip
    4ae2:	015a      	lsls	r2, r3, #5
    4ae4:	d400      	bmi.n	4ae8 <__aeabi_fadd+0x264>
    4ae6:	e739      	b.n	495c <__aeabi_fadd+0xd8>
    4ae8:	4a2e      	ldr	r2, [pc, #184]	; (4ba4 <__aeabi_fadd+0x320>)
    4aea:	000c      	movs	r4, r1
    4aec:	4013      	ands	r3, r2
    4aee:	e704      	b.n	48fa <__aeabi_fadd+0x76>
    4af0:	2101      	movs	r1, #1
    4af2:	e75c      	b.n	49ae <__aeabi_fadd+0x12a>
    4af4:	2c00      	cmp	r4, #0
    4af6:	d11e      	bne.n	4b36 <__aeabi_fadd+0x2b2>
    4af8:	2b00      	cmp	r3, #0
    4afa:	d040      	beq.n	4b7e <__aeabi_fadd+0x2fa>
    4afc:	43c9      	mvns	r1, r1
    4afe:	2900      	cmp	r1, #0
    4b00:	d00b      	beq.n	4b1a <__aeabi_fadd+0x296>
    4b02:	28ff      	cmp	r0, #255	; 0xff
    4b04:	d036      	beq.n	4b74 <__aeabi_fadd+0x2f0>
    4b06:	291b      	cmp	r1, #27
    4b08:	dc47      	bgt.n	4b9a <__aeabi_fadd+0x316>
    4b0a:	001c      	movs	r4, r3
    4b0c:	2620      	movs	r6, #32
    4b0e:	40cc      	lsrs	r4, r1
    4b10:	1a71      	subs	r1, r6, r1
    4b12:	408b      	lsls	r3, r1
    4b14:	1e59      	subs	r1, r3, #1
    4b16:	418b      	sbcs	r3, r1
    4b18:	4323      	orrs	r3, r4
    4b1a:	4463      	add	r3, ip
    4b1c:	0004      	movs	r4, r0
    4b1e:	e747      	b.n	49b0 <__aeabi_fadd+0x12c>
    4b20:	2b00      	cmp	r3, #0
    4b22:	d118      	bne.n	4b56 <__aeabi_fadd+0x2d2>
    4b24:	1e3b      	subs	r3, r7, #0
    4b26:	d02d      	beq.n	4b84 <__aeabi_fadd+0x300>
    4b28:	000d      	movs	r5, r1
    4b2a:	24ff      	movs	r4, #255	; 0xff
    4b2c:	e6e5      	b.n	48fa <__aeabi_fadd+0x76>
    4b2e:	003b      	movs	r3, r7
    4b30:	0004      	movs	r4, r0
    4b32:	000d      	movs	r5, r1
    4b34:	e6e1      	b.n	48fa <__aeabi_fadd+0x76>
    4b36:	28ff      	cmp	r0, #255	; 0xff
    4b38:	d01c      	beq.n	4b74 <__aeabi_fadd+0x2f0>
    4b3a:	2480      	movs	r4, #128	; 0x80
    4b3c:	04e4      	lsls	r4, r4, #19
    4b3e:	4249      	negs	r1, r1
    4b40:	4323      	orrs	r3, r4
    4b42:	e7e0      	b.n	4b06 <__aeabi_fadd+0x282>
    4b44:	2f00      	cmp	r7, #0
    4b46:	d100      	bne.n	4b4a <__aeabi_fadd+0x2c6>
    4b48:	e6d7      	b.n	48fa <__aeabi_fadd+0x76>
    4b4a:	1bde      	subs	r6, r3, r7
    4b4c:	0172      	lsls	r2, r6, #5
    4b4e:	d51f      	bpl.n	4b90 <__aeabi_fadd+0x30c>
    4b50:	1afb      	subs	r3, r7, r3
    4b52:	000d      	movs	r5, r1
    4b54:	e6d1      	b.n	48fa <__aeabi_fadd+0x76>
    4b56:	24ff      	movs	r4, #255	; 0xff
    4b58:	2f00      	cmp	r7, #0
    4b5a:	d100      	bne.n	4b5e <__aeabi_fadd+0x2da>
    4b5c:	e6cd      	b.n	48fa <__aeabi_fadd+0x76>
    4b5e:	2280      	movs	r2, #128	; 0x80
    4b60:	4640      	mov	r0, r8
    4b62:	03d2      	lsls	r2, r2, #15
    4b64:	4210      	tst	r0, r2
    4b66:	d0af      	beq.n	4ac8 <__aeabi_fadd+0x244>
    4b68:	4216      	tst	r6, r2
    4b6a:	d1ad      	bne.n	4ac8 <__aeabi_fadd+0x244>
    4b6c:	003b      	movs	r3, r7
    4b6e:	000d      	movs	r5, r1
    4b70:	24ff      	movs	r4, #255	; 0xff
    4b72:	e6c2      	b.n	48fa <__aeabi_fadd+0x76>
    4b74:	4663      	mov	r3, ip
    4b76:	24ff      	movs	r4, #255	; 0xff
    4b78:	e6bf      	b.n	48fa <__aeabi_fadd+0x76>
    4b7a:	2301      	movs	r3, #1
    4b7c:	e77a      	b.n	4a74 <__aeabi_fadd+0x1f0>
    4b7e:	003b      	movs	r3, r7
    4b80:	0004      	movs	r4, r0
    4b82:	e6ba      	b.n	48fa <__aeabi_fadd+0x76>
    4b84:	2680      	movs	r6, #128	; 0x80
    4b86:	2200      	movs	r2, #0
    4b88:	03f6      	lsls	r6, r6, #15
    4b8a:	e6f0      	b.n	496e <__aeabi_fadd+0xea>
    4b8c:	003b      	movs	r3, r7
    4b8e:	e6b4      	b.n	48fa <__aeabi_fadd+0x76>
    4b90:	1e33      	subs	r3, r6, #0
    4b92:	d000      	beq.n	4b96 <__aeabi_fadd+0x312>
    4b94:	e6e2      	b.n	495c <__aeabi_fadd+0xd8>
    4b96:	2200      	movs	r2, #0
    4b98:	e721      	b.n	49de <__aeabi_fadd+0x15a>
    4b9a:	2301      	movs	r3, #1
    4b9c:	e7bd      	b.n	4b1a <__aeabi_fadd+0x296>
    4b9e:	46c0      	nop			; (mov r8, r8)
    4ba0:	7dffffff 	.word	0x7dffffff
    4ba4:	fbffffff 	.word	0xfbffffff

00004ba8 <__aeabi_fdiv>:
    4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4baa:	4657      	mov	r7, sl
    4bac:	464e      	mov	r6, r9
    4bae:	46de      	mov	lr, fp
    4bb0:	4645      	mov	r5, r8
    4bb2:	b5e0      	push	{r5, r6, r7, lr}
    4bb4:	0244      	lsls	r4, r0, #9
    4bb6:	0043      	lsls	r3, r0, #1
    4bb8:	0fc6      	lsrs	r6, r0, #31
    4bba:	b083      	sub	sp, #12
    4bbc:	1c0f      	adds	r7, r1, #0
    4bbe:	0a64      	lsrs	r4, r4, #9
    4bc0:	0e1b      	lsrs	r3, r3, #24
    4bc2:	46b2      	mov	sl, r6
    4bc4:	d053      	beq.n	4c6e <__aeabi_fdiv+0xc6>
    4bc6:	2bff      	cmp	r3, #255	; 0xff
    4bc8:	d027      	beq.n	4c1a <__aeabi_fdiv+0x72>
    4bca:	2280      	movs	r2, #128	; 0x80
    4bcc:	00e4      	lsls	r4, r4, #3
    4bce:	04d2      	lsls	r2, r2, #19
    4bd0:	4314      	orrs	r4, r2
    4bd2:	227f      	movs	r2, #127	; 0x7f
    4bd4:	4252      	negs	r2, r2
    4bd6:	4690      	mov	r8, r2
    4bd8:	4498      	add	r8, r3
    4bda:	2300      	movs	r3, #0
    4bdc:	4699      	mov	r9, r3
    4bde:	469b      	mov	fp, r3
    4be0:	027d      	lsls	r5, r7, #9
    4be2:	0078      	lsls	r0, r7, #1
    4be4:	0ffb      	lsrs	r3, r7, #31
    4be6:	0a6d      	lsrs	r5, r5, #9
    4be8:	0e00      	lsrs	r0, r0, #24
    4bea:	9300      	str	r3, [sp, #0]
    4bec:	d024      	beq.n	4c38 <__aeabi_fdiv+0x90>
    4bee:	28ff      	cmp	r0, #255	; 0xff
    4bf0:	d046      	beq.n	4c80 <__aeabi_fdiv+0xd8>
    4bf2:	2380      	movs	r3, #128	; 0x80
    4bf4:	2100      	movs	r1, #0
    4bf6:	00ed      	lsls	r5, r5, #3
    4bf8:	04db      	lsls	r3, r3, #19
    4bfa:	431d      	orrs	r5, r3
    4bfc:	387f      	subs	r0, #127	; 0x7f
    4bfe:	4647      	mov	r7, r8
    4c00:	1a38      	subs	r0, r7, r0
    4c02:	464f      	mov	r7, r9
    4c04:	430f      	orrs	r7, r1
    4c06:	00bf      	lsls	r7, r7, #2
    4c08:	46b9      	mov	r9, r7
    4c0a:	0033      	movs	r3, r6
    4c0c:	9a00      	ldr	r2, [sp, #0]
    4c0e:	4f87      	ldr	r7, [pc, #540]	; (4e2c <__aeabi_fdiv+0x284>)
    4c10:	4053      	eors	r3, r2
    4c12:	464a      	mov	r2, r9
    4c14:	58ba      	ldr	r2, [r7, r2]
    4c16:	9301      	str	r3, [sp, #4]
    4c18:	4697      	mov	pc, r2
    4c1a:	2c00      	cmp	r4, #0
    4c1c:	d14e      	bne.n	4cbc <__aeabi_fdiv+0x114>
    4c1e:	2308      	movs	r3, #8
    4c20:	4699      	mov	r9, r3
    4c22:	33f7      	adds	r3, #247	; 0xf7
    4c24:	4698      	mov	r8, r3
    4c26:	3bfd      	subs	r3, #253	; 0xfd
    4c28:	469b      	mov	fp, r3
    4c2a:	027d      	lsls	r5, r7, #9
    4c2c:	0078      	lsls	r0, r7, #1
    4c2e:	0ffb      	lsrs	r3, r7, #31
    4c30:	0a6d      	lsrs	r5, r5, #9
    4c32:	0e00      	lsrs	r0, r0, #24
    4c34:	9300      	str	r3, [sp, #0]
    4c36:	d1da      	bne.n	4bee <__aeabi_fdiv+0x46>
    4c38:	2d00      	cmp	r5, #0
    4c3a:	d126      	bne.n	4c8a <__aeabi_fdiv+0xe2>
    4c3c:	2000      	movs	r0, #0
    4c3e:	2101      	movs	r1, #1
    4c40:	0033      	movs	r3, r6
    4c42:	9a00      	ldr	r2, [sp, #0]
    4c44:	4f7a      	ldr	r7, [pc, #488]	; (4e30 <__aeabi_fdiv+0x288>)
    4c46:	4053      	eors	r3, r2
    4c48:	4642      	mov	r2, r8
    4c4a:	1a10      	subs	r0, r2, r0
    4c4c:	464a      	mov	r2, r9
    4c4e:	430a      	orrs	r2, r1
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	58ba      	ldr	r2, [r7, r2]
    4c54:	001d      	movs	r5, r3
    4c56:	4697      	mov	pc, r2
    4c58:	9b00      	ldr	r3, [sp, #0]
    4c5a:	002c      	movs	r4, r5
    4c5c:	469a      	mov	sl, r3
    4c5e:	468b      	mov	fp, r1
    4c60:	465b      	mov	r3, fp
    4c62:	2b02      	cmp	r3, #2
    4c64:	d131      	bne.n	4cca <__aeabi_fdiv+0x122>
    4c66:	4653      	mov	r3, sl
    4c68:	21ff      	movs	r1, #255	; 0xff
    4c6a:	2400      	movs	r4, #0
    4c6c:	e038      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4c6e:	2c00      	cmp	r4, #0
    4c70:	d117      	bne.n	4ca2 <__aeabi_fdiv+0xfa>
    4c72:	2304      	movs	r3, #4
    4c74:	4699      	mov	r9, r3
    4c76:	2300      	movs	r3, #0
    4c78:	4698      	mov	r8, r3
    4c7a:	3301      	adds	r3, #1
    4c7c:	469b      	mov	fp, r3
    4c7e:	e7af      	b.n	4be0 <__aeabi_fdiv+0x38>
    4c80:	20ff      	movs	r0, #255	; 0xff
    4c82:	2d00      	cmp	r5, #0
    4c84:	d10b      	bne.n	4c9e <__aeabi_fdiv+0xf6>
    4c86:	2102      	movs	r1, #2
    4c88:	e7da      	b.n	4c40 <__aeabi_fdiv+0x98>
    4c8a:	0028      	movs	r0, r5
    4c8c:	f000 fb7e 	bl	538c <__clzsi2>
    4c90:	1f43      	subs	r3, r0, #5
    4c92:	409d      	lsls	r5, r3
    4c94:	2376      	movs	r3, #118	; 0x76
    4c96:	425b      	negs	r3, r3
    4c98:	1a18      	subs	r0, r3, r0
    4c9a:	2100      	movs	r1, #0
    4c9c:	e7af      	b.n	4bfe <__aeabi_fdiv+0x56>
    4c9e:	2103      	movs	r1, #3
    4ca0:	e7ad      	b.n	4bfe <__aeabi_fdiv+0x56>
    4ca2:	0020      	movs	r0, r4
    4ca4:	f000 fb72 	bl	538c <__clzsi2>
    4ca8:	1f43      	subs	r3, r0, #5
    4caa:	409c      	lsls	r4, r3
    4cac:	2376      	movs	r3, #118	; 0x76
    4cae:	425b      	negs	r3, r3
    4cb0:	1a1b      	subs	r3, r3, r0
    4cb2:	4698      	mov	r8, r3
    4cb4:	2300      	movs	r3, #0
    4cb6:	4699      	mov	r9, r3
    4cb8:	469b      	mov	fp, r3
    4cba:	e791      	b.n	4be0 <__aeabi_fdiv+0x38>
    4cbc:	230c      	movs	r3, #12
    4cbe:	4699      	mov	r9, r3
    4cc0:	33f3      	adds	r3, #243	; 0xf3
    4cc2:	4698      	mov	r8, r3
    4cc4:	3bfc      	subs	r3, #252	; 0xfc
    4cc6:	469b      	mov	fp, r3
    4cc8:	e78a      	b.n	4be0 <__aeabi_fdiv+0x38>
    4cca:	2b03      	cmp	r3, #3
    4ccc:	d100      	bne.n	4cd0 <__aeabi_fdiv+0x128>
    4cce:	e0a5      	b.n	4e1c <__aeabi_fdiv+0x274>
    4cd0:	4655      	mov	r5, sl
    4cd2:	2b01      	cmp	r3, #1
    4cd4:	d000      	beq.n	4cd8 <__aeabi_fdiv+0x130>
    4cd6:	e081      	b.n	4ddc <__aeabi_fdiv+0x234>
    4cd8:	2301      	movs	r3, #1
    4cda:	2100      	movs	r1, #0
    4cdc:	2400      	movs	r4, #0
    4cde:	402b      	ands	r3, r5
    4ce0:	0264      	lsls	r4, r4, #9
    4ce2:	05c9      	lsls	r1, r1, #23
    4ce4:	0a60      	lsrs	r0, r4, #9
    4ce6:	07db      	lsls	r3, r3, #31
    4ce8:	4308      	orrs	r0, r1
    4cea:	4318      	orrs	r0, r3
    4cec:	b003      	add	sp, #12
    4cee:	bc3c      	pop	{r2, r3, r4, r5}
    4cf0:	4690      	mov	r8, r2
    4cf2:	4699      	mov	r9, r3
    4cf4:	46a2      	mov	sl, r4
    4cf6:	46ab      	mov	fp, r5
    4cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cfa:	2480      	movs	r4, #128	; 0x80
    4cfc:	2300      	movs	r3, #0
    4cfe:	03e4      	lsls	r4, r4, #15
    4d00:	21ff      	movs	r1, #255	; 0xff
    4d02:	e7ed      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4d04:	21ff      	movs	r1, #255	; 0xff
    4d06:	2400      	movs	r4, #0
    4d08:	e7ea      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4d0a:	2301      	movs	r3, #1
    4d0c:	1a59      	subs	r1, r3, r1
    4d0e:	291b      	cmp	r1, #27
    4d10:	dd66      	ble.n	4de0 <__aeabi_fdiv+0x238>
    4d12:	9a01      	ldr	r2, [sp, #4]
    4d14:	4013      	ands	r3, r2
    4d16:	2100      	movs	r1, #0
    4d18:	2400      	movs	r4, #0
    4d1a:	e7e1      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4d1c:	2380      	movs	r3, #128	; 0x80
    4d1e:	03db      	lsls	r3, r3, #15
    4d20:	421c      	tst	r4, r3
    4d22:	d038      	beq.n	4d96 <__aeabi_fdiv+0x1ee>
    4d24:	421d      	tst	r5, r3
    4d26:	d051      	beq.n	4dcc <__aeabi_fdiv+0x224>
    4d28:	431c      	orrs	r4, r3
    4d2a:	0264      	lsls	r4, r4, #9
    4d2c:	0a64      	lsrs	r4, r4, #9
    4d2e:	0033      	movs	r3, r6
    4d30:	21ff      	movs	r1, #255	; 0xff
    4d32:	e7d5      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4d34:	0163      	lsls	r3, r4, #5
    4d36:	016c      	lsls	r4, r5, #5
    4d38:	42a3      	cmp	r3, r4
    4d3a:	d23b      	bcs.n	4db4 <__aeabi_fdiv+0x20c>
    4d3c:	261b      	movs	r6, #27
    4d3e:	2100      	movs	r1, #0
    4d40:	3801      	subs	r0, #1
    4d42:	2501      	movs	r5, #1
    4d44:	001f      	movs	r7, r3
    4d46:	0049      	lsls	r1, r1, #1
    4d48:	005b      	lsls	r3, r3, #1
    4d4a:	2f00      	cmp	r7, #0
    4d4c:	db01      	blt.n	4d52 <__aeabi_fdiv+0x1aa>
    4d4e:	429c      	cmp	r4, r3
    4d50:	d801      	bhi.n	4d56 <__aeabi_fdiv+0x1ae>
    4d52:	1b1b      	subs	r3, r3, r4
    4d54:	4329      	orrs	r1, r5
    4d56:	3e01      	subs	r6, #1
    4d58:	2e00      	cmp	r6, #0
    4d5a:	d1f3      	bne.n	4d44 <__aeabi_fdiv+0x19c>
    4d5c:	001c      	movs	r4, r3
    4d5e:	1e63      	subs	r3, r4, #1
    4d60:	419c      	sbcs	r4, r3
    4d62:	430c      	orrs	r4, r1
    4d64:	0001      	movs	r1, r0
    4d66:	317f      	adds	r1, #127	; 0x7f
    4d68:	2900      	cmp	r1, #0
    4d6a:	ddce      	ble.n	4d0a <__aeabi_fdiv+0x162>
    4d6c:	0763      	lsls	r3, r4, #29
    4d6e:	d004      	beq.n	4d7a <__aeabi_fdiv+0x1d2>
    4d70:	230f      	movs	r3, #15
    4d72:	4023      	ands	r3, r4
    4d74:	2b04      	cmp	r3, #4
    4d76:	d000      	beq.n	4d7a <__aeabi_fdiv+0x1d2>
    4d78:	3404      	adds	r4, #4
    4d7a:	0123      	lsls	r3, r4, #4
    4d7c:	d503      	bpl.n	4d86 <__aeabi_fdiv+0x1de>
    4d7e:	0001      	movs	r1, r0
    4d80:	4b2c      	ldr	r3, [pc, #176]	; (4e34 <__aeabi_fdiv+0x28c>)
    4d82:	3180      	adds	r1, #128	; 0x80
    4d84:	401c      	ands	r4, r3
    4d86:	29fe      	cmp	r1, #254	; 0xfe
    4d88:	dd0d      	ble.n	4da6 <__aeabi_fdiv+0x1fe>
    4d8a:	2301      	movs	r3, #1
    4d8c:	9a01      	ldr	r2, [sp, #4]
    4d8e:	21ff      	movs	r1, #255	; 0xff
    4d90:	4013      	ands	r3, r2
    4d92:	2400      	movs	r4, #0
    4d94:	e7a4      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4d96:	2380      	movs	r3, #128	; 0x80
    4d98:	03db      	lsls	r3, r3, #15
    4d9a:	431c      	orrs	r4, r3
    4d9c:	0264      	lsls	r4, r4, #9
    4d9e:	0a64      	lsrs	r4, r4, #9
    4da0:	0033      	movs	r3, r6
    4da2:	21ff      	movs	r1, #255	; 0xff
    4da4:	e79c      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4da6:	2301      	movs	r3, #1
    4da8:	9a01      	ldr	r2, [sp, #4]
    4daa:	01a4      	lsls	r4, r4, #6
    4dac:	0a64      	lsrs	r4, r4, #9
    4dae:	b2c9      	uxtb	r1, r1
    4db0:	4013      	ands	r3, r2
    4db2:	e795      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4db4:	1b1b      	subs	r3, r3, r4
    4db6:	261a      	movs	r6, #26
    4db8:	2101      	movs	r1, #1
    4dba:	e7c2      	b.n	4d42 <__aeabi_fdiv+0x19a>
    4dbc:	9b00      	ldr	r3, [sp, #0]
    4dbe:	468b      	mov	fp, r1
    4dc0:	469a      	mov	sl, r3
    4dc2:	2400      	movs	r4, #0
    4dc4:	e74c      	b.n	4c60 <__aeabi_fdiv+0xb8>
    4dc6:	0263      	lsls	r3, r4, #9
    4dc8:	d5e5      	bpl.n	4d96 <__aeabi_fdiv+0x1ee>
    4dca:	2500      	movs	r5, #0
    4dcc:	2480      	movs	r4, #128	; 0x80
    4dce:	03e4      	lsls	r4, r4, #15
    4dd0:	432c      	orrs	r4, r5
    4dd2:	0264      	lsls	r4, r4, #9
    4dd4:	0a64      	lsrs	r4, r4, #9
    4dd6:	9b00      	ldr	r3, [sp, #0]
    4dd8:	21ff      	movs	r1, #255	; 0xff
    4dda:	e781      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4ddc:	9501      	str	r5, [sp, #4]
    4dde:	e7c1      	b.n	4d64 <__aeabi_fdiv+0x1bc>
    4de0:	0023      	movs	r3, r4
    4de2:	2020      	movs	r0, #32
    4de4:	40cb      	lsrs	r3, r1
    4de6:	1a41      	subs	r1, r0, r1
    4de8:	408c      	lsls	r4, r1
    4dea:	1e61      	subs	r1, r4, #1
    4dec:	418c      	sbcs	r4, r1
    4dee:	431c      	orrs	r4, r3
    4df0:	0763      	lsls	r3, r4, #29
    4df2:	d004      	beq.n	4dfe <__aeabi_fdiv+0x256>
    4df4:	230f      	movs	r3, #15
    4df6:	4023      	ands	r3, r4
    4df8:	2b04      	cmp	r3, #4
    4dfa:	d000      	beq.n	4dfe <__aeabi_fdiv+0x256>
    4dfc:	3404      	adds	r4, #4
    4dfe:	0163      	lsls	r3, r4, #5
    4e00:	d505      	bpl.n	4e0e <__aeabi_fdiv+0x266>
    4e02:	2301      	movs	r3, #1
    4e04:	9a01      	ldr	r2, [sp, #4]
    4e06:	2101      	movs	r1, #1
    4e08:	4013      	ands	r3, r2
    4e0a:	2400      	movs	r4, #0
    4e0c:	e768      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4e0e:	2301      	movs	r3, #1
    4e10:	9a01      	ldr	r2, [sp, #4]
    4e12:	01a4      	lsls	r4, r4, #6
    4e14:	0a64      	lsrs	r4, r4, #9
    4e16:	4013      	ands	r3, r2
    4e18:	2100      	movs	r1, #0
    4e1a:	e761      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4e1c:	2380      	movs	r3, #128	; 0x80
    4e1e:	03db      	lsls	r3, r3, #15
    4e20:	431c      	orrs	r4, r3
    4e22:	0264      	lsls	r4, r4, #9
    4e24:	0a64      	lsrs	r4, r4, #9
    4e26:	4653      	mov	r3, sl
    4e28:	21ff      	movs	r1, #255	; 0xff
    4e2a:	e759      	b.n	4ce0 <__aeabi_fdiv+0x138>
    4e2c:	00005924 	.word	0x00005924
    4e30:	00005964 	.word	0x00005964
    4e34:	f7ffffff 	.word	0xf7ffffff

00004e38 <__eqsf2>:
    4e38:	b570      	push	{r4, r5, r6, lr}
    4e3a:	0042      	lsls	r2, r0, #1
    4e3c:	0245      	lsls	r5, r0, #9
    4e3e:	024e      	lsls	r6, r1, #9
    4e40:	004c      	lsls	r4, r1, #1
    4e42:	0fc3      	lsrs	r3, r0, #31
    4e44:	0a6d      	lsrs	r5, r5, #9
    4e46:	0e12      	lsrs	r2, r2, #24
    4e48:	0a76      	lsrs	r6, r6, #9
    4e4a:	0e24      	lsrs	r4, r4, #24
    4e4c:	0fc9      	lsrs	r1, r1, #31
    4e4e:	2001      	movs	r0, #1
    4e50:	2aff      	cmp	r2, #255	; 0xff
    4e52:	d006      	beq.n	4e62 <__eqsf2+0x2a>
    4e54:	2cff      	cmp	r4, #255	; 0xff
    4e56:	d003      	beq.n	4e60 <__eqsf2+0x28>
    4e58:	42a2      	cmp	r2, r4
    4e5a:	d101      	bne.n	4e60 <__eqsf2+0x28>
    4e5c:	42b5      	cmp	r5, r6
    4e5e:	d006      	beq.n	4e6e <__eqsf2+0x36>
    4e60:	bd70      	pop	{r4, r5, r6, pc}
    4e62:	2d00      	cmp	r5, #0
    4e64:	d1fc      	bne.n	4e60 <__eqsf2+0x28>
    4e66:	2cff      	cmp	r4, #255	; 0xff
    4e68:	d1fa      	bne.n	4e60 <__eqsf2+0x28>
    4e6a:	2e00      	cmp	r6, #0
    4e6c:	d1f8      	bne.n	4e60 <__eqsf2+0x28>
    4e6e:	428b      	cmp	r3, r1
    4e70:	d006      	beq.n	4e80 <__eqsf2+0x48>
    4e72:	2001      	movs	r0, #1
    4e74:	2a00      	cmp	r2, #0
    4e76:	d1f3      	bne.n	4e60 <__eqsf2+0x28>
    4e78:	0028      	movs	r0, r5
    4e7a:	1e45      	subs	r5, r0, #1
    4e7c:	41a8      	sbcs	r0, r5
    4e7e:	e7ef      	b.n	4e60 <__eqsf2+0x28>
    4e80:	2000      	movs	r0, #0
    4e82:	e7ed      	b.n	4e60 <__eqsf2+0x28>

00004e84 <__gesf2>:
    4e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e86:	0042      	lsls	r2, r0, #1
    4e88:	0245      	lsls	r5, r0, #9
    4e8a:	024c      	lsls	r4, r1, #9
    4e8c:	0fc3      	lsrs	r3, r0, #31
    4e8e:	0048      	lsls	r0, r1, #1
    4e90:	0a6d      	lsrs	r5, r5, #9
    4e92:	0e12      	lsrs	r2, r2, #24
    4e94:	0a64      	lsrs	r4, r4, #9
    4e96:	0e00      	lsrs	r0, r0, #24
    4e98:	0fc9      	lsrs	r1, r1, #31
    4e9a:	2aff      	cmp	r2, #255	; 0xff
    4e9c:	d01e      	beq.n	4edc <__gesf2+0x58>
    4e9e:	28ff      	cmp	r0, #255	; 0xff
    4ea0:	d021      	beq.n	4ee6 <__gesf2+0x62>
    4ea2:	2a00      	cmp	r2, #0
    4ea4:	d10a      	bne.n	4ebc <__gesf2+0x38>
    4ea6:	426e      	negs	r6, r5
    4ea8:	416e      	adcs	r6, r5
    4eaa:	b2f6      	uxtb	r6, r6
    4eac:	2800      	cmp	r0, #0
    4eae:	d10f      	bne.n	4ed0 <__gesf2+0x4c>
    4eb0:	2c00      	cmp	r4, #0
    4eb2:	d10d      	bne.n	4ed0 <__gesf2+0x4c>
    4eb4:	2000      	movs	r0, #0
    4eb6:	2d00      	cmp	r5, #0
    4eb8:	d009      	beq.n	4ece <__gesf2+0x4a>
    4eba:	e005      	b.n	4ec8 <__gesf2+0x44>
    4ebc:	2800      	cmp	r0, #0
    4ebe:	d101      	bne.n	4ec4 <__gesf2+0x40>
    4ec0:	2c00      	cmp	r4, #0
    4ec2:	d001      	beq.n	4ec8 <__gesf2+0x44>
    4ec4:	428b      	cmp	r3, r1
    4ec6:	d011      	beq.n	4eec <__gesf2+0x68>
    4ec8:	2101      	movs	r1, #1
    4eca:	4258      	negs	r0, r3
    4ecc:	4308      	orrs	r0, r1
    4ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ed0:	2e00      	cmp	r6, #0
    4ed2:	d0f7      	beq.n	4ec4 <__gesf2+0x40>
    4ed4:	2001      	movs	r0, #1
    4ed6:	3901      	subs	r1, #1
    4ed8:	4308      	orrs	r0, r1
    4eda:	e7f8      	b.n	4ece <__gesf2+0x4a>
    4edc:	2d00      	cmp	r5, #0
    4ede:	d0de      	beq.n	4e9e <__gesf2+0x1a>
    4ee0:	2002      	movs	r0, #2
    4ee2:	4240      	negs	r0, r0
    4ee4:	e7f3      	b.n	4ece <__gesf2+0x4a>
    4ee6:	2c00      	cmp	r4, #0
    4ee8:	d0db      	beq.n	4ea2 <__gesf2+0x1e>
    4eea:	e7f9      	b.n	4ee0 <__gesf2+0x5c>
    4eec:	4282      	cmp	r2, r0
    4eee:	dceb      	bgt.n	4ec8 <__gesf2+0x44>
    4ef0:	db04      	blt.n	4efc <__gesf2+0x78>
    4ef2:	42a5      	cmp	r5, r4
    4ef4:	d8e8      	bhi.n	4ec8 <__gesf2+0x44>
    4ef6:	2000      	movs	r0, #0
    4ef8:	42a5      	cmp	r5, r4
    4efa:	d2e8      	bcs.n	4ece <__gesf2+0x4a>
    4efc:	2101      	movs	r1, #1
    4efe:	1e58      	subs	r0, r3, #1
    4f00:	4308      	orrs	r0, r1
    4f02:	e7e4      	b.n	4ece <__gesf2+0x4a>

00004f04 <__lesf2>:
    4f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f06:	0042      	lsls	r2, r0, #1
    4f08:	024d      	lsls	r5, r1, #9
    4f0a:	004c      	lsls	r4, r1, #1
    4f0c:	0246      	lsls	r6, r0, #9
    4f0e:	0a76      	lsrs	r6, r6, #9
    4f10:	0e12      	lsrs	r2, r2, #24
    4f12:	0fc3      	lsrs	r3, r0, #31
    4f14:	0a6d      	lsrs	r5, r5, #9
    4f16:	0e24      	lsrs	r4, r4, #24
    4f18:	0fc9      	lsrs	r1, r1, #31
    4f1a:	2aff      	cmp	r2, #255	; 0xff
    4f1c:	d016      	beq.n	4f4c <__lesf2+0x48>
    4f1e:	2cff      	cmp	r4, #255	; 0xff
    4f20:	d018      	beq.n	4f54 <__lesf2+0x50>
    4f22:	2a00      	cmp	r2, #0
    4f24:	d10a      	bne.n	4f3c <__lesf2+0x38>
    4f26:	4270      	negs	r0, r6
    4f28:	4170      	adcs	r0, r6
    4f2a:	b2c0      	uxtb	r0, r0
    4f2c:	2c00      	cmp	r4, #0
    4f2e:	d015      	beq.n	4f5c <__lesf2+0x58>
    4f30:	2800      	cmp	r0, #0
    4f32:	d005      	beq.n	4f40 <__lesf2+0x3c>
    4f34:	2001      	movs	r0, #1
    4f36:	3901      	subs	r1, #1
    4f38:	4308      	orrs	r0, r1
    4f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f3c:	2c00      	cmp	r4, #0
    4f3e:	d013      	beq.n	4f68 <__lesf2+0x64>
    4f40:	4299      	cmp	r1, r3
    4f42:	d014      	beq.n	4f6e <__lesf2+0x6a>
    4f44:	2001      	movs	r0, #1
    4f46:	425b      	negs	r3, r3
    4f48:	4318      	orrs	r0, r3
    4f4a:	e7f6      	b.n	4f3a <__lesf2+0x36>
    4f4c:	2002      	movs	r0, #2
    4f4e:	2e00      	cmp	r6, #0
    4f50:	d1f3      	bne.n	4f3a <__lesf2+0x36>
    4f52:	e7e4      	b.n	4f1e <__lesf2+0x1a>
    4f54:	2002      	movs	r0, #2
    4f56:	2d00      	cmp	r5, #0
    4f58:	d1ef      	bne.n	4f3a <__lesf2+0x36>
    4f5a:	e7e2      	b.n	4f22 <__lesf2+0x1e>
    4f5c:	2d00      	cmp	r5, #0
    4f5e:	d1e7      	bne.n	4f30 <__lesf2+0x2c>
    4f60:	2000      	movs	r0, #0
    4f62:	2e00      	cmp	r6, #0
    4f64:	d0e9      	beq.n	4f3a <__lesf2+0x36>
    4f66:	e7ed      	b.n	4f44 <__lesf2+0x40>
    4f68:	2d00      	cmp	r5, #0
    4f6a:	d1e9      	bne.n	4f40 <__lesf2+0x3c>
    4f6c:	e7ea      	b.n	4f44 <__lesf2+0x40>
    4f6e:	42a2      	cmp	r2, r4
    4f70:	dc06      	bgt.n	4f80 <__lesf2+0x7c>
    4f72:	dbdf      	blt.n	4f34 <__lesf2+0x30>
    4f74:	42ae      	cmp	r6, r5
    4f76:	d803      	bhi.n	4f80 <__lesf2+0x7c>
    4f78:	2000      	movs	r0, #0
    4f7a:	42ae      	cmp	r6, r5
    4f7c:	d3da      	bcc.n	4f34 <__lesf2+0x30>
    4f7e:	e7dc      	b.n	4f3a <__lesf2+0x36>
    4f80:	2001      	movs	r0, #1
    4f82:	4249      	negs	r1, r1
    4f84:	4308      	orrs	r0, r1
    4f86:	e7d8      	b.n	4f3a <__lesf2+0x36>

00004f88 <__aeabi_fsub>:
    4f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f8a:	464f      	mov	r7, r9
    4f8c:	46d6      	mov	lr, sl
    4f8e:	4646      	mov	r6, r8
    4f90:	0044      	lsls	r4, r0, #1
    4f92:	b5c0      	push	{r6, r7, lr}
    4f94:	0fc2      	lsrs	r2, r0, #31
    4f96:	0247      	lsls	r7, r0, #9
    4f98:	0248      	lsls	r0, r1, #9
    4f9a:	0a40      	lsrs	r0, r0, #9
    4f9c:	4684      	mov	ip, r0
    4f9e:	4666      	mov	r6, ip
    4fa0:	0a7b      	lsrs	r3, r7, #9
    4fa2:	0048      	lsls	r0, r1, #1
    4fa4:	0fc9      	lsrs	r1, r1, #31
    4fa6:	469a      	mov	sl, r3
    4fa8:	0e24      	lsrs	r4, r4, #24
    4faa:	0015      	movs	r5, r2
    4fac:	00db      	lsls	r3, r3, #3
    4fae:	0e00      	lsrs	r0, r0, #24
    4fb0:	4689      	mov	r9, r1
    4fb2:	00f6      	lsls	r6, r6, #3
    4fb4:	28ff      	cmp	r0, #255	; 0xff
    4fb6:	d100      	bne.n	4fba <__aeabi_fsub+0x32>
    4fb8:	e08f      	b.n	50da <__aeabi_fsub+0x152>
    4fba:	2101      	movs	r1, #1
    4fbc:	464f      	mov	r7, r9
    4fbe:	404f      	eors	r7, r1
    4fc0:	0039      	movs	r1, r7
    4fc2:	4291      	cmp	r1, r2
    4fc4:	d066      	beq.n	5094 <__aeabi_fsub+0x10c>
    4fc6:	1a22      	subs	r2, r4, r0
    4fc8:	2a00      	cmp	r2, #0
    4fca:	dc00      	bgt.n	4fce <__aeabi_fsub+0x46>
    4fcc:	e09d      	b.n	510a <__aeabi_fsub+0x182>
    4fce:	2800      	cmp	r0, #0
    4fd0:	d13d      	bne.n	504e <__aeabi_fsub+0xc6>
    4fd2:	2e00      	cmp	r6, #0
    4fd4:	d100      	bne.n	4fd8 <__aeabi_fsub+0x50>
    4fd6:	e08b      	b.n	50f0 <__aeabi_fsub+0x168>
    4fd8:	1e51      	subs	r1, r2, #1
    4fda:	2900      	cmp	r1, #0
    4fdc:	d000      	beq.n	4fe0 <__aeabi_fsub+0x58>
    4fde:	e0b5      	b.n	514c <__aeabi_fsub+0x1c4>
    4fe0:	2401      	movs	r4, #1
    4fe2:	1b9b      	subs	r3, r3, r6
    4fe4:	015a      	lsls	r2, r3, #5
    4fe6:	d544      	bpl.n	5072 <__aeabi_fsub+0xea>
    4fe8:	019b      	lsls	r3, r3, #6
    4fea:	099f      	lsrs	r7, r3, #6
    4fec:	0038      	movs	r0, r7
    4fee:	f000 f9cd 	bl	538c <__clzsi2>
    4ff2:	3805      	subs	r0, #5
    4ff4:	4087      	lsls	r7, r0
    4ff6:	4284      	cmp	r4, r0
    4ff8:	dd00      	ble.n	4ffc <__aeabi_fsub+0x74>
    4ffa:	e096      	b.n	512a <__aeabi_fsub+0x1a2>
    4ffc:	1b04      	subs	r4, r0, r4
    4ffe:	003a      	movs	r2, r7
    5000:	2020      	movs	r0, #32
    5002:	3401      	adds	r4, #1
    5004:	40e2      	lsrs	r2, r4
    5006:	1b04      	subs	r4, r0, r4
    5008:	40a7      	lsls	r7, r4
    500a:	003b      	movs	r3, r7
    500c:	1e5f      	subs	r7, r3, #1
    500e:	41bb      	sbcs	r3, r7
    5010:	2400      	movs	r4, #0
    5012:	4313      	orrs	r3, r2
    5014:	075a      	lsls	r2, r3, #29
    5016:	d004      	beq.n	5022 <__aeabi_fsub+0x9a>
    5018:	220f      	movs	r2, #15
    501a:	401a      	ands	r2, r3
    501c:	2a04      	cmp	r2, #4
    501e:	d000      	beq.n	5022 <__aeabi_fsub+0x9a>
    5020:	3304      	adds	r3, #4
    5022:	015a      	lsls	r2, r3, #5
    5024:	d527      	bpl.n	5076 <__aeabi_fsub+0xee>
    5026:	3401      	adds	r4, #1
    5028:	2cff      	cmp	r4, #255	; 0xff
    502a:	d100      	bne.n	502e <__aeabi_fsub+0xa6>
    502c:	e079      	b.n	5122 <__aeabi_fsub+0x19a>
    502e:	2201      	movs	r2, #1
    5030:	019b      	lsls	r3, r3, #6
    5032:	0a5b      	lsrs	r3, r3, #9
    5034:	b2e4      	uxtb	r4, r4
    5036:	402a      	ands	r2, r5
    5038:	025b      	lsls	r3, r3, #9
    503a:	05e4      	lsls	r4, r4, #23
    503c:	0a58      	lsrs	r0, r3, #9
    503e:	07d2      	lsls	r2, r2, #31
    5040:	4320      	orrs	r0, r4
    5042:	4310      	orrs	r0, r2
    5044:	bc1c      	pop	{r2, r3, r4}
    5046:	4690      	mov	r8, r2
    5048:	4699      	mov	r9, r3
    504a:	46a2      	mov	sl, r4
    504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    504e:	2cff      	cmp	r4, #255	; 0xff
    5050:	d0e0      	beq.n	5014 <__aeabi_fsub+0x8c>
    5052:	2180      	movs	r1, #128	; 0x80
    5054:	04c9      	lsls	r1, r1, #19
    5056:	430e      	orrs	r6, r1
    5058:	2a1b      	cmp	r2, #27
    505a:	dc7b      	bgt.n	5154 <__aeabi_fsub+0x1cc>
    505c:	0031      	movs	r1, r6
    505e:	2020      	movs	r0, #32
    5060:	40d1      	lsrs	r1, r2
    5062:	1a82      	subs	r2, r0, r2
    5064:	4096      	lsls	r6, r2
    5066:	1e72      	subs	r2, r6, #1
    5068:	4196      	sbcs	r6, r2
    506a:	430e      	orrs	r6, r1
    506c:	1b9b      	subs	r3, r3, r6
    506e:	015a      	lsls	r2, r3, #5
    5070:	d4ba      	bmi.n	4fe8 <__aeabi_fsub+0x60>
    5072:	075a      	lsls	r2, r3, #29
    5074:	d1d0      	bne.n	5018 <__aeabi_fsub+0x90>
    5076:	2201      	movs	r2, #1
    5078:	08df      	lsrs	r7, r3, #3
    507a:	402a      	ands	r2, r5
    507c:	2cff      	cmp	r4, #255	; 0xff
    507e:	d133      	bne.n	50e8 <__aeabi_fsub+0x160>
    5080:	2f00      	cmp	r7, #0
    5082:	d100      	bne.n	5086 <__aeabi_fsub+0xfe>
    5084:	e0a8      	b.n	51d8 <__aeabi_fsub+0x250>
    5086:	2380      	movs	r3, #128	; 0x80
    5088:	03db      	lsls	r3, r3, #15
    508a:	433b      	orrs	r3, r7
    508c:	025b      	lsls	r3, r3, #9
    508e:	0a5b      	lsrs	r3, r3, #9
    5090:	24ff      	movs	r4, #255	; 0xff
    5092:	e7d1      	b.n	5038 <__aeabi_fsub+0xb0>
    5094:	1a21      	subs	r1, r4, r0
    5096:	2900      	cmp	r1, #0
    5098:	dd4c      	ble.n	5134 <__aeabi_fsub+0x1ac>
    509a:	2800      	cmp	r0, #0
    509c:	d02a      	beq.n	50f4 <__aeabi_fsub+0x16c>
    509e:	2cff      	cmp	r4, #255	; 0xff
    50a0:	d0b8      	beq.n	5014 <__aeabi_fsub+0x8c>
    50a2:	2080      	movs	r0, #128	; 0x80
    50a4:	04c0      	lsls	r0, r0, #19
    50a6:	4306      	orrs	r6, r0
    50a8:	291b      	cmp	r1, #27
    50aa:	dd00      	ble.n	50ae <__aeabi_fsub+0x126>
    50ac:	e0af      	b.n	520e <__aeabi_fsub+0x286>
    50ae:	0030      	movs	r0, r6
    50b0:	2720      	movs	r7, #32
    50b2:	40c8      	lsrs	r0, r1
    50b4:	1a79      	subs	r1, r7, r1
    50b6:	408e      	lsls	r6, r1
    50b8:	1e71      	subs	r1, r6, #1
    50ba:	418e      	sbcs	r6, r1
    50bc:	4306      	orrs	r6, r0
    50be:	199b      	adds	r3, r3, r6
    50c0:	0159      	lsls	r1, r3, #5
    50c2:	d5d6      	bpl.n	5072 <__aeabi_fsub+0xea>
    50c4:	3401      	adds	r4, #1
    50c6:	2cff      	cmp	r4, #255	; 0xff
    50c8:	d100      	bne.n	50cc <__aeabi_fsub+0x144>
    50ca:	e085      	b.n	51d8 <__aeabi_fsub+0x250>
    50cc:	2201      	movs	r2, #1
    50ce:	497a      	ldr	r1, [pc, #488]	; (52b8 <__aeabi_fsub+0x330>)
    50d0:	401a      	ands	r2, r3
    50d2:	085b      	lsrs	r3, r3, #1
    50d4:	400b      	ands	r3, r1
    50d6:	4313      	orrs	r3, r2
    50d8:	e79c      	b.n	5014 <__aeabi_fsub+0x8c>
    50da:	2e00      	cmp	r6, #0
    50dc:	d000      	beq.n	50e0 <__aeabi_fsub+0x158>
    50de:	e770      	b.n	4fc2 <__aeabi_fsub+0x3a>
    50e0:	e76b      	b.n	4fba <__aeabi_fsub+0x32>
    50e2:	1e3b      	subs	r3, r7, #0
    50e4:	d1c5      	bne.n	5072 <__aeabi_fsub+0xea>
    50e6:	2200      	movs	r2, #0
    50e8:	027b      	lsls	r3, r7, #9
    50ea:	0a5b      	lsrs	r3, r3, #9
    50ec:	b2e4      	uxtb	r4, r4
    50ee:	e7a3      	b.n	5038 <__aeabi_fsub+0xb0>
    50f0:	0014      	movs	r4, r2
    50f2:	e78f      	b.n	5014 <__aeabi_fsub+0x8c>
    50f4:	2e00      	cmp	r6, #0
    50f6:	d04d      	beq.n	5194 <__aeabi_fsub+0x20c>
    50f8:	1e48      	subs	r0, r1, #1
    50fa:	2800      	cmp	r0, #0
    50fc:	d157      	bne.n	51ae <__aeabi_fsub+0x226>
    50fe:	199b      	adds	r3, r3, r6
    5100:	2401      	movs	r4, #1
    5102:	015a      	lsls	r2, r3, #5
    5104:	d5b5      	bpl.n	5072 <__aeabi_fsub+0xea>
    5106:	2402      	movs	r4, #2
    5108:	e7e0      	b.n	50cc <__aeabi_fsub+0x144>
    510a:	2a00      	cmp	r2, #0
    510c:	d125      	bne.n	515a <__aeabi_fsub+0x1d2>
    510e:	1c62      	adds	r2, r4, #1
    5110:	b2d2      	uxtb	r2, r2
    5112:	2a01      	cmp	r2, #1
    5114:	dd72      	ble.n	51fc <__aeabi_fsub+0x274>
    5116:	1b9f      	subs	r7, r3, r6
    5118:	017a      	lsls	r2, r7, #5
    511a:	d535      	bpl.n	5188 <__aeabi_fsub+0x200>
    511c:	1af7      	subs	r7, r6, r3
    511e:	000d      	movs	r5, r1
    5120:	e764      	b.n	4fec <__aeabi_fsub+0x64>
    5122:	2201      	movs	r2, #1
    5124:	2300      	movs	r3, #0
    5126:	402a      	ands	r2, r5
    5128:	e786      	b.n	5038 <__aeabi_fsub+0xb0>
    512a:	003b      	movs	r3, r7
    512c:	4a63      	ldr	r2, [pc, #396]	; (52bc <__aeabi_fsub+0x334>)
    512e:	1a24      	subs	r4, r4, r0
    5130:	4013      	ands	r3, r2
    5132:	e76f      	b.n	5014 <__aeabi_fsub+0x8c>
    5134:	2900      	cmp	r1, #0
    5136:	d16c      	bne.n	5212 <__aeabi_fsub+0x28a>
    5138:	1c61      	adds	r1, r4, #1
    513a:	b2c8      	uxtb	r0, r1
    513c:	2801      	cmp	r0, #1
    513e:	dd4e      	ble.n	51de <__aeabi_fsub+0x256>
    5140:	29ff      	cmp	r1, #255	; 0xff
    5142:	d049      	beq.n	51d8 <__aeabi_fsub+0x250>
    5144:	199b      	adds	r3, r3, r6
    5146:	085b      	lsrs	r3, r3, #1
    5148:	000c      	movs	r4, r1
    514a:	e763      	b.n	5014 <__aeabi_fsub+0x8c>
    514c:	2aff      	cmp	r2, #255	; 0xff
    514e:	d041      	beq.n	51d4 <__aeabi_fsub+0x24c>
    5150:	000a      	movs	r2, r1
    5152:	e781      	b.n	5058 <__aeabi_fsub+0xd0>
    5154:	2601      	movs	r6, #1
    5156:	1b9b      	subs	r3, r3, r6
    5158:	e789      	b.n	506e <__aeabi_fsub+0xe6>
    515a:	2c00      	cmp	r4, #0
    515c:	d01c      	beq.n	5198 <__aeabi_fsub+0x210>
    515e:	28ff      	cmp	r0, #255	; 0xff
    5160:	d021      	beq.n	51a6 <__aeabi_fsub+0x21e>
    5162:	2480      	movs	r4, #128	; 0x80
    5164:	04e4      	lsls	r4, r4, #19
    5166:	4252      	negs	r2, r2
    5168:	4323      	orrs	r3, r4
    516a:	2a1b      	cmp	r2, #27
    516c:	dd00      	ble.n	5170 <__aeabi_fsub+0x1e8>
    516e:	e096      	b.n	529e <__aeabi_fsub+0x316>
    5170:	001c      	movs	r4, r3
    5172:	2520      	movs	r5, #32
    5174:	40d4      	lsrs	r4, r2
    5176:	1aaa      	subs	r2, r5, r2
    5178:	4093      	lsls	r3, r2
    517a:	1e5a      	subs	r2, r3, #1
    517c:	4193      	sbcs	r3, r2
    517e:	4323      	orrs	r3, r4
    5180:	1af3      	subs	r3, r6, r3
    5182:	0004      	movs	r4, r0
    5184:	000d      	movs	r5, r1
    5186:	e72d      	b.n	4fe4 <__aeabi_fsub+0x5c>
    5188:	2f00      	cmp	r7, #0
    518a:	d000      	beq.n	518e <__aeabi_fsub+0x206>
    518c:	e72e      	b.n	4fec <__aeabi_fsub+0x64>
    518e:	2200      	movs	r2, #0
    5190:	2400      	movs	r4, #0
    5192:	e7a9      	b.n	50e8 <__aeabi_fsub+0x160>
    5194:	000c      	movs	r4, r1
    5196:	e73d      	b.n	5014 <__aeabi_fsub+0x8c>
    5198:	2b00      	cmp	r3, #0
    519a:	d058      	beq.n	524e <__aeabi_fsub+0x2c6>
    519c:	43d2      	mvns	r2, r2
    519e:	2a00      	cmp	r2, #0
    51a0:	d0ee      	beq.n	5180 <__aeabi_fsub+0x1f8>
    51a2:	28ff      	cmp	r0, #255	; 0xff
    51a4:	d1e1      	bne.n	516a <__aeabi_fsub+0x1e2>
    51a6:	0033      	movs	r3, r6
    51a8:	24ff      	movs	r4, #255	; 0xff
    51aa:	000d      	movs	r5, r1
    51ac:	e732      	b.n	5014 <__aeabi_fsub+0x8c>
    51ae:	29ff      	cmp	r1, #255	; 0xff
    51b0:	d010      	beq.n	51d4 <__aeabi_fsub+0x24c>
    51b2:	0001      	movs	r1, r0
    51b4:	e778      	b.n	50a8 <__aeabi_fsub+0x120>
    51b6:	2b00      	cmp	r3, #0
    51b8:	d06e      	beq.n	5298 <__aeabi_fsub+0x310>
    51ba:	24ff      	movs	r4, #255	; 0xff
    51bc:	2e00      	cmp	r6, #0
    51be:	d100      	bne.n	51c2 <__aeabi_fsub+0x23a>
    51c0:	e728      	b.n	5014 <__aeabi_fsub+0x8c>
    51c2:	2280      	movs	r2, #128	; 0x80
    51c4:	4651      	mov	r1, sl
    51c6:	03d2      	lsls	r2, r2, #15
    51c8:	4211      	tst	r1, r2
    51ca:	d003      	beq.n	51d4 <__aeabi_fsub+0x24c>
    51cc:	4661      	mov	r1, ip
    51ce:	4211      	tst	r1, r2
    51d0:	d100      	bne.n	51d4 <__aeabi_fsub+0x24c>
    51d2:	0033      	movs	r3, r6
    51d4:	24ff      	movs	r4, #255	; 0xff
    51d6:	e71d      	b.n	5014 <__aeabi_fsub+0x8c>
    51d8:	24ff      	movs	r4, #255	; 0xff
    51da:	2300      	movs	r3, #0
    51dc:	e72c      	b.n	5038 <__aeabi_fsub+0xb0>
    51de:	2c00      	cmp	r4, #0
    51e0:	d1e9      	bne.n	51b6 <__aeabi_fsub+0x22e>
    51e2:	2b00      	cmp	r3, #0
    51e4:	d063      	beq.n	52ae <__aeabi_fsub+0x326>
    51e6:	2e00      	cmp	r6, #0
    51e8:	d100      	bne.n	51ec <__aeabi_fsub+0x264>
    51ea:	e713      	b.n	5014 <__aeabi_fsub+0x8c>
    51ec:	199b      	adds	r3, r3, r6
    51ee:	015a      	lsls	r2, r3, #5
    51f0:	d400      	bmi.n	51f4 <__aeabi_fsub+0x26c>
    51f2:	e73e      	b.n	5072 <__aeabi_fsub+0xea>
    51f4:	4a31      	ldr	r2, [pc, #196]	; (52bc <__aeabi_fsub+0x334>)
    51f6:	000c      	movs	r4, r1
    51f8:	4013      	ands	r3, r2
    51fa:	e70b      	b.n	5014 <__aeabi_fsub+0x8c>
    51fc:	2c00      	cmp	r4, #0
    51fe:	d11e      	bne.n	523e <__aeabi_fsub+0x2b6>
    5200:	2b00      	cmp	r3, #0
    5202:	d12f      	bne.n	5264 <__aeabi_fsub+0x2dc>
    5204:	2e00      	cmp	r6, #0
    5206:	d04f      	beq.n	52a8 <__aeabi_fsub+0x320>
    5208:	0033      	movs	r3, r6
    520a:	000d      	movs	r5, r1
    520c:	e702      	b.n	5014 <__aeabi_fsub+0x8c>
    520e:	2601      	movs	r6, #1
    5210:	e755      	b.n	50be <__aeabi_fsub+0x136>
    5212:	2c00      	cmp	r4, #0
    5214:	d11f      	bne.n	5256 <__aeabi_fsub+0x2ce>
    5216:	2b00      	cmp	r3, #0
    5218:	d043      	beq.n	52a2 <__aeabi_fsub+0x31a>
    521a:	43c9      	mvns	r1, r1
    521c:	2900      	cmp	r1, #0
    521e:	d00b      	beq.n	5238 <__aeabi_fsub+0x2b0>
    5220:	28ff      	cmp	r0, #255	; 0xff
    5222:	d039      	beq.n	5298 <__aeabi_fsub+0x310>
    5224:	291b      	cmp	r1, #27
    5226:	dc44      	bgt.n	52b2 <__aeabi_fsub+0x32a>
    5228:	001c      	movs	r4, r3
    522a:	2720      	movs	r7, #32
    522c:	40cc      	lsrs	r4, r1
    522e:	1a79      	subs	r1, r7, r1
    5230:	408b      	lsls	r3, r1
    5232:	1e59      	subs	r1, r3, #1
    5234:	418b      	sbcs	r3, r1
    5236:	4323      	orrs	r3, r4
    5238:	199b      	adds	r3, r3, r6
    523a:	0004      	movs	r4, r0
    523c:	e740      	b.n	50c0 <__aeabi_fsub+0x138>
    523e:	2b00      	cmp	r3, #0
    5240:	d11a      	bne.n	5278 <__aeabi_fsub+0x2f0>
    5242:	2e00      	cmp	r6, #0
    5244:	d124      	bne.n	5290 <__aeabi_fsub+0x308>
    5246:	2780      	movs	r7, #128	; 0x80
    5248:	2200      	movs	r2, #0
    524a:	03ff      	lsls	r7, r7, #15
    524c:	e71b      	b.n	5086 <__aeabi_fsub+0xfe>
    524e:	0033      	movs	r3, r6
    5250:	0004      	movs	r4, r0
    5252:	000d      	movs	r5, r1
    5254:	e6de      	b.n	5014 <__aeabi_fsub+0x8c>
    5256:	28ff      	cmp	r0, #255	; 0xff
    5258:	d01e      	beq.n	5298 <__aeabi_fsub+0x310>
    525a:	2480      	movs	r4, #128	; 0x80
    525c:	04e4      	lsls	r4, r4, #19
    525e:	4249      	negs	r1, r1
    5260:	4323      	orrs	r3, r4
    5262:	e7df      	b.n	5224 <__aeabi_fsub+0x29c>
    5264:	2e00      	cmp	r6, #0
    5266:	d100      	bne.n	526a <__aeabi_fsub+0x2e2>
    5268:	e6d4      	b.n	5014 <__aeabi_fsub+0x8c>
    526a:	1b9f      	subs	r7, r3, r6
    526c:	017a      	lsls	r2, r7, #5
    526e:	d400      	bmi.n	5272 <__aeabi_fsub+0x2ea>
    5270:	e737      	b.n	50e2 <__aeabi_fsub+0x15a>
    5272:	1af3      	subs	r3, r6, r3
    5274:	000d      	movs	r5, r1
    5276:	e6cd      	b.n	5014 <__aeabi_fsub+0x8c>
    5278:	24ff      	movs	r4, #255	; 0xff
    527a:	2e00      	cmp	r6, #0
    527c:	d100      	bne.n	5280 <__aeabi_fsub+0x2f8>
    527e:	e6c9      	b.n	5014 <__aeabi_fsub+0x8c>
    5280:	2280      	movs	r2, #128	; 0x80
    5282:	4650      	mov	r0, sl
    5284:	03d2      	lsls	r2, r2, #15
    5286:	4210      	tst	r0, r2
    5288:	d0a4      	beq.n	51d4 <__aeabi_fsub+0x24c>
    528a:	4660      	mov	r0, ip
    528c:	4210      	tst	r0, r2
    528e:	d1a1      	bne.n	51d4 <__aeabi_fsub+0x24c>
    5290:	0033      	movs	r3, r6
    5292:	000d      	movs	r5, r1
    5294:	24ff      	movs	r4, #255	; 0xff
    5296:	e6bd      	b.n	5014 <__aeabi_fsub+0x8c>
    5298:	0033      	movs	r3, r6
    529a:	24ff      	movs	r4, #255	; 0xff
    529c:	e6ba      	b.n	5014 <__aeabi_fsub+0x8c>
    529e:	2301      	movs	r3, #1
    52a0:	e76e      	b.n	5180 <__aeabi_fsub+0x1f8>
    52a2:	0033      	movs	r3, r6
    52a4:	0004      	movs	r4, r0
    52a6:	e6b5      	b.n	5014 <__aeabi_fsub+0x8c>
    52a8:	2700      	movs	r7, #0
    52aa:	2200      	movs	r2, #0
    52ac:	e71c      	b.n	50e8 <__aeabi_fsub+0x160>
    52ae:	0033      	movs	r3, r6
    52b0:	e6b0      	b.n	5014 <__aeabi_fsub+0x8c>
    52b2:	2301      	movs	r3, #1
    52b4:	e7c0      	b.n	5238 <__aeabi_fsub+0x2b0>
    52b6:	46c0      	nop			; (mov r8, r8)
    52b8:	7dffffff 	.word	0x7dffffff
    52bc:	fbffffff 	.word	0xfbffffff

000052c0 <__aeabi_f2iz>:
    52c0:	0241      	lsls	r1, r0, #9
    52c2:	0043      	lsls	r3, r0, #1
    52c4:	0fc2      	lsrs	r2, r0, #31
    52c6:	0a49      	lsrs	r1, r1, #9
    52c8:	0e1b      	lsrs	r3, r3, #24
    52ca:	2000      	movs	r0, #0
    52cc:	2b7e      	cmp	r3, #126	; 0x7e
    52ce:	dd0d      	ble.n	52ec <__aeabi_f2iz+0x2c>
    52d0:	2b9d      	cmp	r3, #157	; 0x9d
    52d2:	dc0c      	bgt.n	52ee <__aeabi_f2iz+0x2e>
    52d4:	2080      	movs	r0, #128	; 0x80
    52d6:	0400      	lsls	r0, r0, #16
    52d8:	4301      	orrs	r1, r0
    52da:	2b95      	cmp	r3, #149	; 0x95
    52dc:	dc0a      	bgt.n	52f4 <__aeabi_f2iz+0x34>
    52de:	2096      	movs	r0, #150	; 0x96
    52e0:	1ac3      	subs	r3, r0, r3
    52e2:	40d9      	lsrs	r1, r3
    52e4:	4248      	negs	r0, r1
    52e6:	2a00      	cmp	r2, #0
    52e8:	d100      	bne.n	52ec <__aeabi_f2iz+0x2c>
    52ea:	0008      	movs	r0, r1
    52ec:	4770      	bx	lr
    52ee:	4b03      	ldr	r3, [pc, #12]	; (52fc <__aeabi_f2iz+0x3c>)
    52f0:	18d0      	adds	r0, r2, r3
    52f2:	e7fb      	b.n	52ec <__aeabi_f2iz+0x2c>
    52f4:	3b96      	subs	r3, #150	; 0x96
    52f6:	4099      	lsls	r1, r3
    52f8:	e7f4      	b.n	52e4 <__aeabi_f2iz+0x24>
    52fa:	46c0      	nop			; (mov r8, r8)
    52fc:	7fffffff 	.word	0x7fffffff

00005300 <__aeabi_ui2f>:
    5300:	b510      	push	{r4, lr}
    5302:	1e04      	subs	r4, r0, #0
    5304:	d027      	beq.n	5356 <__aeabi_ui2f+0x56>
    5306:	f000 f841 	bl	538c <__clzsi2>
    530a:	239e      	movs	r3, #158	; 0x9e
    530c:	1a1b      	subs	r3, r3, r0
    530e:	2b96      	cmp	r3, #150	; 0x96
    5310:	dc0a      	bgt.n	5328 <__aeabi_ui2f+0x28>
    5312:	2296      	movs	r2, #150	; 0x96
    5314:	1ad2      	subs	r2, r2, r3
    5316:	4094      	lsls	r4, r2
    5318:	0264      	lsls	r4, r4, #9
    531a:	0a64      	lsrs	r4, r4, #9
    531c:	b2db      	uxtb	r3, r3
    531e:	0264      	lsls	r4, r4, #9
    5320:	05db      	lsls	r3, r3, #23
    5322:	0a60      	lsrs	r0, r4, #9
    5324:	4318      	orrs	r0, r3
    5326:	bd10      	pop	{r4, pc}
    5328:	2b99      	cmp	r3, #153	; 0x99
    532a:	dc17      	bgt.n	535c <__aeabi_ui2f+0x5c>
    532c:	2299      	movs	r2, #153	; 0x99
    532e:	1ad2      	subs	r2, r2, r3
    5330:	2a00      	cmp	r2, #0
    5332:	dd27      	ble.n	5384 <__aeabi_ui2f+0x84>
    5334:	4094      	lsls	r4, r2
    5336:	0022      	movs	r2, r4
    5338:	4c13      	ldr	r4, [pc, #76]	; (5388 <__aeabi_ui2f+0x88>)
    533a:	4014      	ands	r4, r2
    533c:	0751      	lsls	r1, r2, #29
    533e:	d004      	beq.n	534a <__aeabi_ui2f+0x4a>
    5340:	210f      	movs	r1, #15
    5342:	400a      	ands	r2, r1
    5344:	2a04      	cmp	r2, #4
    5346:	d000      	beq.n	534a <__aeabi_ui2f+0x4a>
    5348:	3404      	adds	r4, #4
    534a:	0162      	lsls	r2, r4, #5
    534c:	d412      	bmi.n	5374 <__aeabi_ui2f+0x74>
    534e:	01a4      	lsls	r4, r4, #6
    5350:	0a64      	lsrs	r4, r4, #9
    5352:	b2db      	uxtb	r3, r3
    5354:	e7e3      	b.n	531e <__aeabi_ui2f+0x1e>
    5356:	2300      	movs	r3, #0
    5358:	2400      	movs	r4, #0
    535a:	e7e0      	b.n	531e <__aeabi_ui2f+0x1e>
    535c:	22b9      	movs	r2, #185	; 0xb9
    535e:	0021      	movs	r1, r4
    5360:	1ad2      	subs	r2, r2, r3
    5362:	4091      	lsls	r1, r2
    5364:	000a      	movs	r2, r1
    5366:	1e51      	subs	r1, r2, #1
    5368:	418a      	sbcs	r2, r1
    536a:	2105      	movs	r1, #5
    536c:	1a09      	subs	r1, r1, r0
    536e:	40cc      	lsrs	r4, r1
    5370:	4314      	orrs	r4, r2
    5372:	e7db      	b.n	532c <__aeabi_ui2f+0x2c>
    5374:	4b04      	ldr	r3, [pc, #16]	; (5388 <__aeabi_ui2f+0x88>)
    5376:	401c      	ands	r4, r3
    5378:	239f      	movs	r3, #159	; 0x9f
    537a:	01a4      	lsls	r4, r4, #6
    537c:	1a1b      	subs	r3, r3, r0
    537e:	0a64      	lsrs	r4, r4, #9
    5380:	b2db      	uxtb	r3, r3
    5382:	e7cc      	b.n	531e <__aeabi_ui2f+0x1e>
    5384:	0022      	movs	r2, r4
    5386:	e7d7      	b.n	5338 <__aeabi_ui2f+0x38>
    5388:	fbffffff 	.word	0xfbffffff

0000538c <__clzsi2>:
    538c:	211c      	movs	r1, #28
    538e:	2301      	movs	r3, #1
    5390:	041b      	lsls	r3, r3, #16
    5392:	4298      	cmp	r0, r3
    5394:	d301      	bcc.n	539a <__clzsi2+0xe>
    5396:	0c00      	lsrs	r0, r0, #16
    5398:	3910      	subs	r1, #16
    539a:	0a1b      	lsrs	r3, r3, #8
    539c:	4298      	cmp	r0, r3
    539e:	d301      	bcc.n	53a4 <__clzsi2+0x18>
    53a0:	0a00      	lsrs	r0, r0, #8
    53a2:	3908      	subs	r1, #8
    53a4:	091b      	lsrs	r3, r3, #4
    53a6:	4298      	cmp	r0, r3
    53a8:	d301      	bcc.n	53ae <__clzsi2+0x22>
    53aa:	0900      	lsrs	r0, r0, #4
    53ac:	3904      	subs	r1, #4
    53ae:	a202      	add	r2, pc, #8	; (adr r2, 53b8 <__clzsi2+0x2c>)
    53b0:	5c10      	ldrb	r0, [r2, r0]
    53b2:	1840      	adds	r0, r0, r1
    53b4:	4770      	bx	lr
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	02020304 	.word	0x02020304
    53bc:	01010101 	.word	0x01010101
	...

000053c8 <__cxa_atexit>:
    53c8:	b510      	push	{r4, lr}
    53ca:	0013      	movs	r3, r2
    53cc:	000a      	movs	r2, r1
    53ce:	0001      	movs	r1, r0
    53d0:	2002      	movs	r0, #2
    53d2:	f000 f8e3 	bl	559c <__register_exitproc>
    53d6:	bd10      	pop	{r4, pc}

000053d8 <__libc_init_array>:
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	4e0d      	ldr	r6, [pc, #52]	; (5410 <__libc_init_array+0x38>)
    53dc:	4d0d      	ldr	r5, [pc, #52]	; (5414 <__libc_init_array+0x3c>)
    53de:	2400      	movs	r4, #0
    53e0:	1bad      	subs	r5, r5, r6
    53e2:	10ad      	asrs	r5, r5, #2
    53e4:	d005      	beq.n	53f2 <__libc_init_array+0x1a>
    53e6:	00a3      	lsls	r3, r4, #2
    53e8:	58f3      	ldr	r3, [r6, r3]
    53ea:	3401      	adds	r4, #1
    53ec:	4798      	blx	r3
    53ee:	42a5      	cmp	r5, r4
    53f0:	d1f9      	bne.n	53e6 <__libc_init_array+0xe>
    53f2:	f000 fad9 	bl	59a8 <_init>
    53f6:	4e08      	ldr	r6, [pc, #32]	; (5418 <__libc_init_array+0x40>)
    53f8:	4d08      	ldr	r5, [pc, #32]	; (541c <__libc_init_array+0x44>)
    53fa:	2400      	movs	r4, #0
    53fc:	1bad      	subs	r5, r5, r6
    53fe:	10ad      	asrs	r5, r5, #2
    5400:	d005      	beq.n	540e <__libc_init_array+0x36>
    5402:	00a3      	lsls	r3, r4, #2
    5404:	58f3      	ldr	r3, [r6, r3]
    5406:	3401      	adds	r4, #1
    5408:	4798      	blx	r3
    540a:	42a5      	cmp	r5, r4
    540c:	d1f9      	bne.n	5402 <__libc_init_array+0x2a>
    540e:	bd70      	pop	{r4, r5, r6, pc}
    5410:	000059b4 	.word	0x000059b4
    5414:	000059b4 	.word	0x000059b4
    5418:	000059b4 	.word	0x000059b4
    541c:	000059cc 	.word	0x000059cc

00005420 <memcpy>:
    5420:	b5f0      	push	{r4, r5, r6, r7, lr}
    5422:	0005      	movs	r5, r0
    5424:	2a0f      	cmp	r2, #15
    5426:	d92f      	bls.n	5488 <memcpy+0x68>
    5428:	000b      	movs	r3, r1
    542a:	4303      	orrs	r3, r0
    542c:	079b      	lsls	r3, r3, #30
    542e:	d134      	bne.n	549a <memcpy+0x7a>
    5430:	0016      	movs	r6, r2
    5432:	000c      	movs	r4, r1
    5434:	0003      	movs	r3, r0
    5436:	3e10      	subs	r6, #16
    5438:	0935      	lsrs	r5, r6, #4
    543a:	3501      	adds	r5, #1
    543c:	012d      	lsls	r5, r5, #4
    543e:	1945      	adds	r5, r0, r5
    5440:	6827      	ldr	r7, [r4, #0]
    5442:	601f      	str	r7, [r3, #0]
    5444:	6867      	ldr	r7, [r4, #4]
    5446:	605f      	str	r7, [r3, #4]
    5448:	68a7      	ldr	r7, [r4, #8]
    544a:	609f      	str	r7, [r3, #8]
    544c:	68e7      	ldr	r7, [r4, #12]
    544e:	3410      	adds	r4, #16
    5450:	60df      	str	r7, [r3, #12]
    5452:	3310      	adds	r3, #16
    5454:	429d      	cmp	r5, r3
    5456:	d1f3      	bne.n	5440 <memcpy+0x20>
    5458:	230f      	movs	r3, #15
    545a:	439e      	bics	r6, r3
    545c:	3610      	adds	r6, #16
    545e:	1985      	adds	r5, r0, r6
    5460:	1989      	adds	r1, r1, r6
    5462:	4013      	ands	r3, r2
    5464:	2b03      	cmp	r3, #3
    5466:	d91a      	bls.n	549e <memcpy+0x7e>
    5468:	1f1e      	subs	r6, r3, #4
    546a:	2300      	movs	r3, #0
    546c:	08b4      	lsrs	r4, r6, #2
    546e:	3401      	adds	r4, #1
    5470:	00a4      	lsls	r4, r4, #2
    5472:	58cf      	ldr	r7, [r1, r3]
    5474:	50ef      	str	r7, [r5, r3]
    5476:	3304      	adds	r3, #4
    5478:	42a3      	cmp	r3, r4
    547a:	d1fa      	bne.n	5472 <memcpy+0x52>
    547c:	2403      	movs	r4, #3
    547e:	43a6      	bics	r6, r4
    5480:	1d33      	adds	r3, r6, #4
    5482:	4022      	ands	r2, r4
    5484:	18c9      	adds	r1, r1, r3
    5486:	18ed      	adds	r5, r5, r3
    5488:	2a00      	cmp	r2, #0
    548a:	d005      	beq.n	5498 <memcpy+0x78>
    548c:	2300      	movs	r3, #0
    548e:	5ccc      	ldrb	r4, [r1, r3]
    5490:	54ec      	strb	r4, [r5, r3]
    5492:	3301      	adds	r3, #1
    5494:	4293      	cmp	r3, r2
    5496:	d1fa      	bne.n	548e <memcpy+0x6e>
    5498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    549a:	0005      	movs	r5, r0
    549c:	e7f6      	b.n	548c <memcpy+0x6c>
    549e:	001a      	movs	r2, r3
    54a0:	e7f2      	b.n	5488 <memcpy+0x68>
    54a2:	46c0      	nop			; (mov r8, r8)

000054a4 <memset>:
    54a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a6:	0783      	lsls	r3, r0, #30
    54a8:	d043      	beq.n	5532 <memset+0x8e>
    54aa:	1e54      	subs	r4, r2, #1
    54ac:	2a00      	cmp	r2, #0
    54ae:	d03f      	beq.n	5530 <memset+0x8c>
    54b0:	b2ce      	uxtb	r6, r1
    54b2:	0002      	movs	r2, r0
    54b4:	2503      	movs	r5, #3
    54b6:	e002      	b.n	54be <memset+0x1a>
    54b8:	001a      	movs	r2, r3
    54ba:	3c01      	subs	r4, #1
    54bc:	d338      	bcc.n	5530 <memset+0x8c>
    54be:	1c53      	adds	r3, r2, #1
    54c0:	7016      	strb	r6, [r2, #0]
    54c2:	422b      	tst	r3, r5
    54c4:	d1f8      	bne.n	54b8 <memset+0x14>
    54c6:	2c03      	cmp	r4, #3
    54c8:	d92a      	bls.n	5520 <memset+0x7c>
    54ca:	22ff      	movs	r2, #255	; 0xff
    54cc:	400a      	ands	r2, r1
    54ce:	0215      	lsls	r5, r2, #8
    54d0:	4315      	orrs	r5, r2
    54d2:	042a      	lsls	r2, r5, #16
    54d4:	4315      	orrs	r5, r2
    54d6:	2c0f      	cmp	r4, #15
    54d8:	d914      	bls.n	5504 <memset+0x60>
    54da:	0027      	movs	r7, r4
    54dc:	001a      	movs	r2, r3
    54de:	3f10      	subs	r7, #16
    54e0:	093e      	lsrs	r6, r7, #4
    54e2:	3601      	adds	r6, #1
    54e4:	0136      	lsls	r6, r6, #4
    54e6:	199e      	adds	r6, r3, r6
    54e8:	6015      	str	r5, [r2, #0]
    54ea:	6055      	str	r5, [r2, #4]
    54ec:	6095      	str	r5, [r2, #8]
    54ee:	60d5      	str	r5, [r2, #12]
    54f0:	3210      	adds	r2, #16
    54f2:	4296      	cmp	r6, r2
    54f4:	d1f8      	bne.n	54e8 <memset+0x44>
    54f6:	220f      	movs	r2, #15
    54f8:	4397      	bics	r7, r2
    54fa:	3710      	adds	r7, #16
    54fc:	19db      	adds	r3, r3, r7
    54fe:	4014      	ands	r4, r2
    5500:	2c03      	cmp	r4, #3
    5502:	d90d      	bls.n	5520 <memset+0x7c>
    5504:	001a      	movs	r2, r3
    5506:	1f27      	subs	r7, r4, #4
    5508:	08be      	lsrs	r6, r7, #2
    550a:	3601      	adds	r6, #1
    550c:	00b6      	lsls	r6, r6, #2
    550e:	199e      	adds	r6, r3, r6
    5510:	c220      	stmia	r2!, {r5}
    5512:	42b2      	cmp	r2, r6
    5514:	d1fc      	bne.n	5510 <memset+0x6c>
    5516:	2203      	movs	r2, #3
    5518:	4397      	bics	r7, r2
    551a:	3704      	adds	r7, #4
    551c:	19db      	adds	r3, r3, r7
    551e:	4014      	ands	r4, r2
    5520:	2c00      	cmp	r4, #0
    5522:	d005      	beq.n	5530 <memset+0x8c>
    5524:	b2c9      	uxtb	r1, r1
    5526:	191c      	adds	r4, r3, r4
    5528:	7019      	strb	r1, [r3, #0]
    552a:	3301      	adds	r3, #1
    552c:	429c      	cmp	r4, r3
    552e:	d1fb      	bne.n	5528 <memset+0x84>
    5530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5532:	0014      	movs	r4, r2
    5534:	0003      	movs	r3, r0
    5536:	e7c6      	b.n	54c6 <memset+0x22>

00005538 <strlen>:
    5538:	b510      	push	{r4, lr}
    553a:	0783      	lsls	r3, r0, #30
    553c:	d025      	beq.n	558a <strlen+0x52>
    553e:	7803      	ldrb	r3, [r0, #0]
    5540:	2b00      	cmp	r3, #0
    5542:	d024      	beq.n	558e <strlen+0x56>
    5544:	0003      	movs	r3, r0
    5546:	2103      	movs	r1, #3
    5548:	e002      	b.n	5550 <strlen+0x18>
    554a:	781a      	ldrb	r2, [r3, #0]
    554c:	2a00      	cmp	r2, #0
    554e:	d01a      	beq.n	5586 <strlen+0x4e>
    5550:	3301      	adds	r3, #1
    5552:	420b      	tst	r3, r1
    5554:	d1f9      	bne.n	554a <strlen+0x12>
    5556:	6819      	ldr	r1, [r3, #0]
    5558:	4a0e      	ldr	r2, [pc, #56]	; (5594 <strlen+0x5c>)
    555a:	4c0f      	ldr	r4, [pc, #60]	; (5598 <strlen+0x60>)
    555c:	188a      	adds	r2, r1, r2
    555e:	438a      	bics	r2, r1
    5560:	4222      	tst	r2, r4
    5562:	d106      	bne.n	5572 <strlen+0x3a>
    5564:	3304      	adds	r3, #4
    5566:	6819      	ldr	r1, [r3, #0]
    5568:	4a0a      	ldr	r2, [pc, #40]	; (5594 <strlen+0x5c>)
    556a:	188a      	adds	r2, r1, r2
    556c:	438a      	bics	r2, r1
    556e:	4222      	tst	r2, r4
    5570:	d0f8      	beq.n	5564 <strlen+0x2c>
    5572:	001a      	movs	r2, r3
    5574:	781b      	ldrb	r3, [r3, #0]
    5576:	2b00      	cmp	r3, #0
    5578:	d003      	beq.n	5582 <strlen+0x4a>
    557a:	3201      	adds	r2, #1
    557c:	7811      	ldrb	r1, [r2, #0]
    557e:	2900      	cmp	r1, #0
    5580:	d1fb      	bne.n	557a <strlen+0x42>
    5582:	1a10      	subs	r0, r2, r0
    5584:	bd10      	pop	{r4, pc}
    5586:	1a18      	subs	r0, r3, r0
    5588:	e7fc      	b.n	5584 <strlen+0x4c>
    558a:	0003      	movs	r3, r0
    558c:	e7e3      	b.n	5556 <strlen+0x1e>
    558e:	2000      	movs	r0, #0
    5590:	e7f8      	b.n	5584 <strlen+0x4c>
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	fefefeff 	.word	0xfefefeff
    5598:	80808080 	.word	0x80808080

0000559c <__register_exitproc>:
    559c:	b5f0      	push	{r4, r5, r6, r7, lr}
    559e:	464e      	mov	r6, r9
    55a0:	4645      	mov	r5, r8
    55a2:	46de      	mov	lr, fp
    55a4:	4657      	mov	r7, sl
    55a6:	b5e0      	push	{r5, r6, r7, lr}
    55a8:	4d36      	ldr	r5, [pc, #216]	; (5684 <__register_exitproc+0xe8>)
    55aa:	b083      	sub	sp, #12
    55ac:	0006      	movs	r6, r0
    55ae:	6828      	ldr	r0, [r5, #0]
    55b0:	4698      	mov	r8, r3
    55b2:	000f      	movs	r7, r1
    55b4:	4691      	mov	r9, r2
    55b6:	f000 f899 	bl	56ec <__retarget_lock_acquire_recursive>
    55ba:	4b33      	ldr	r3, [pc, #204]	; (5688 <__register_exitproc+0xec>)
    55bc:	681c      	ldr	r4, [r3, #0]
    55be:	23a4      	movs	r3, #164	; 0xa4
    55c0:	005b      	lsls	r3, r3, #1
    55c2:	58e0      	ldr	r0, [r4, r3]
    55c4:	2800      	cmp	r0, #0
    55c6:	d052      	beq.n	566e <__register_exitproc+0xd2>
    55c8:	6843      	ldr	r3, [r0, #4]
    55ca:	2b1f      	cmp	r3, #31
    55cc:	dc13      	bgt.n	55f6 <__register_exitproc+0x5a>
    55ce:	1c5a      	adds	r2, r3, #1
    55d0:	9201      	str	r2, [sp, #4]
    55d2:	2e00      	cmp	r6, #0
    55d4:	d128      	bne.n	5628 <__register_exitproc+0x8c>
    55d6:	9a01      	ldr	r2, [sp, #4]
    55d8:	3302      	adds	r3, #2
    55da:	009b      	lsls	r3, r3, #2
    55dc:	6042      	str	r2, [r0, #4]
    55de:	501f      	str	r7, [r3, r0]
    55e0:	6828      	ldr	r0, [r5, #0]
    55e2:	f000 f885 	bl	56f0 <__retarget_lock_release_recursive>
    55e6:	2000      	movs	r0, #0
    55e8:	b003      	add	sp, #12
    55ea:	bc3c      	pop	{r2, r3, r4, r5}
    55ec:	4690      	mov	r8, r2
    55ee:	4699      	mov	r9, r3
    55f0:	46a2      	mov	sl, r4
    55f2:	46ab      	mov	fp, r5
    55f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55f6:	4b25      	ldr	r3, [pc, #148]	; (568c <__register_exitproc+0xf0>)
    55f8:	2b00      	cmp	r3, #0
    55fa:	d03d      	beq.n	5678 <__register_exitproc+0xdc>
    55fc:	20c8      	movs	r0, #200	; 0xc8
    55fe:	0040      	lsls	r0, r0, #1
    5600:	f7fe feac 	bl	435c <malloc>
    5604:	2800      	cmp	r0, #0
    5606:	d037      	beq.n	5678 <__register_exitproc+0xdc>
    5608:	22a4      	movs	r2, #164	; 0xa4
    560a:	2300      	movs	r3, #0
    560c:	0052      	lsls	r2, r2, #1
    560e:	58a1      	ldr	r1, [r4, r2]
    5610:	6043      	str	r3, [r0, #4]
    5612:	6001      	str	r1, [r0, #0]
    5614:	50a0      	str	r0, [r4, r2]
    5616:	3240      	adds	r2, #64	; 0x40
    5618:	5083      	str	r3, [r0, r2]
    561a:	3204      	adds	r2, #4
    561c:	5083      	str	r3, [r0, r2]
    561e:	3301      	adds	r3, #1
    5620:	9301      	str	r3, [sp, #4]
    5622:	2300      	movs	r3, #0
    5624:	2e00      	cmp	r6, #0
    5626:	d0d6      	beq.n	55d6 <__register_exitproc+0x3a>
    5628:	009a      	lsls	r2, r3, #2
    562a:	4692      	mov	sl, r2
    562c:	4482      	add	sl, r0
    562e:	464a      	mov	r2, r9
    5630:	2188      	movs	r1, #136	; 0x88
    5632:	4654      	mov	r4, sl
    5634:	5062      	str	r2, [r4, r1]
    5636:	22c4      	movs	r2, #196	; 0xc4
    5638:	0052      	lsls	r2, r2, #1
    563a:	4691      	mov	r9, r2
    563c:	4481      	add	r9, r0
    563e:	464a      	mov	r2, r9
    5640:	3987      	subs	r1, #135	; 0x87
    5642:	4099      	lsls	r1, r3
    5644:	6812      	ldr	r2, [r2, #0]
    5646:	468b      	mov	fp, r1
    5648:	430a      	orrs	r2, r1
    564a:	4694      	mov	ip, r2
    564c:	464a      	mov	r2, r9
    564e:	4661      	mov	r1, ip
    5650:	6011      	str	r1, [r2, #0]
    5652:	2284      	movs	r2, #132	; 0x84
    5654:	4641      	mov	r1, r8
    5656:	0052      	lsls	r2, r2, #1
    5658:	50a1      	str	r1, [r4, r2]
    565a:	2e02      	cmp	r6, #2
    565c:	d1bb      	bne.n	55d6 <__register_exitproc+0x3a>
    565e:	0002      	movs	r2, r0
    5660:	465c      	mov	r4, fp
    5662:	328d      	adds	r2, #141	; 0x8d
    5664:	32ff      	adds	r2, #255	; 0xff
    5666:	6811      	ldr	r1, [r2, #0]
    5668:	430c      	orrs	r4, r1
    566a:	6014      	str	r4, [r2, #0]
    566c:	e7b3      	b.n	55d6 <__register_exitproc+0x3a>
    566e:	0020      	movs	r0, r4
    5670:	304d      	adds	r0, #77	; 0x4d
    5672:	30ff      	adds	r0, #255	; 0xff
    5674:	50e0      	str	r0, [r4, r3]
    5676:	e7a7      	b.n	55c8 <__register_exitproc+0x2c>
    5678:	6828      	ldr	r0, [r5, #0]
    567a:	f000 f839 	bl	56f0 <__retarget_lock_release_recursive>
    567e:	2001      	movs	r0, #1
    5680:	4240      	negs	r0, r0
    5682:	e7b1      	b.n	55e8 <__register_exitproc+0x4c>
    5684:	200004a8 	.word	0x200004a8
    5688:	000059a4 	.word	0x000059a4
    568c:	0000435d 	.word	0x0000435d

00005690 <register_fini>:
    5690:	4b03      	ldr	r3, [pc, #12]	; (56a0 <register_fini+0x10>)
    5692:	b510      	push	{r4, lr}
    5694:	2b00      	cmp	r3, #0
    5696:	d002      	beq.n	569e <register_fini+0xe>
    5698:	4802      	ldr	r0, [pc, #8]	; (56a4 <register_fini+0x14>)
    569a:	f000 f805 	bl	56a8 <atexit>
    569e:	bd10      	pop	{r4, pc}
    56a0:	00000000 	.word	0x00000000
    56a4:	000056b9 	.word	0x000056b9

000056a8 <atexit>:
    56a8:	b510      	push	{r4, lr}
    56aa:	0001      	movs	r1, r0
    56ac:	2300      	movs	r3, #0
    56ae:	2200      	movs	r2, #0
    56b0:	2000      	movs	r0, #0
    56b2:	f7ff ff73 	bl	559c <__register_exitproc>
    56b6:	bd10      	pop	{r4, pc}

000056b8 <__libc_fini_array>:
    56b8:	b570      	push	{r4, r5, r6, lr}
    56ba:	4b09      	ldr	r3, [pc, #36]	; (56e0 <__libc_fini_array+0x28>)
    56bc:	4c09      	ldr	r4, [pc, #36]	; (56e4 <__libc_fini_array+0x2c>)
    56be:	1ae4      	subs	r4, r4, r3
    56c0:	10a4      	asrs	r4, r4, #2
    56c2:	d009      	beq.n	56d8 <__libc_fini_array+0x20>
    56c4:	4a08      	ldr	r2, [pc, #32]	; (56e8 <__libc_fini_array+0x30>)
    56c6:	18a5      	adds	r5, r4, r2
    56c8:	00ad      	lsls	r5, r5, #2
    56ca:	18ed      	adds	r5, r5, r3
    56cc:	682b      	ldr	r3, [r5, #0]
    56ce:	3c01      	subs	r4, #1
    56d0:	4798      	blx	r3
    56d2:	3d04      	subs	r5, #4
    56d4:	2c00      	cmp	r4, #0
    56d6:	d1f9      	bne.n	56cc <__libc_fini_array+0x14>
    56d8:	f000 f978 	bl	59cc <_fini>
    56dc:	bd70      	pop	{r4, r5, r6, pc}
    56de:	46c0      	nop			; (mov r8, r8)
    56e0:	000059d8 	.word	0x000059d8
    56e4:	000059dc 	.word	0x000059dc
    56e8:	3fffffff 	.word	0x3fffffff

000056ec <__retarget_lock_acquire_recursive>:
    56ec:	4770      	bx	lr
    56ee:	46c0      	nop			; (mov r8, r8)

000056f0 <__retarget_lock_release_recursive>:
    56f0:	4770      	bx	lr
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	202a2a2a 	.word	0x202a2a2a
    56f8:	20425355 	.word	0x20425355
    56fc:	65746e49 	.word	0x65746e49
    5700:	63616672 	.word	0x63616672
    5704:	65542065 	.word	0x65542065
    5708:	2a207473 	.word	0x2a207473
    570c:	00002a2a 	.word	0x00002a2a
    5710:	202a2a2a 	.word	0x202a2a2a
    5714:	65746144 	.word	0x65746144
    5718:	0020203a 	.word	0x0020203a
    571c:	2074634f 	.word	0x2074634f
    5720:	32203032 	.word	0x32203032
    5724:	00303230 	.word	0x00303230
    5728:	6d695420 	.word	0x6d695420
    572c:	00203a65 	.word	0x00203a65
    5730:	353a3831 	.word	0x353a3831
    5734:	31313a34 	.word	0x31313a34
    5738:	00000000 	.word	0x00000000
    573c:	2a2a2a20 	.word	0x2a2a2a20
    5740:	00000000 	.word	0x00000000
    5744:	00000a0d 	.word	0x00000a0d
    5748:	75706e49 	.word	0x75706e49
    574c:	61562074 	.word	0x61562074
    5750:	2065756c 	.word	0x2065756c
    5754:	45206e6f 	.word	0x45206e6f
    5758:	3a325458 	.word	0x3a325458
    575c:	00000020 	.word	0x00000020
    5760:	70746553 	.word	0x70746553
    5764:	746e696f 	.word	0x746e696f
    5768:	69736f50 	.word	0x69736f50
    576c:	6e6f6974 	.word	0x6e6f6974
    5770:	0000203a 	.word	0x0000203a
    5774:	74634109 	.word	0x74634109
    5778:	506c6175 	.word	0x506c6175
    577c:	7469736f 	.word	0x7469736f
    5780:	3a6e6f69 	.word	0x3a6e6f69
    5784:	00000020 	.word	0x00000020
    5788:	2e2f2e2e 	.word	0x2e2f2e2e
    578c:	2e2e2f2e 	.word	0x2e2e2f2e
    5790:	616c462f 	.word	0x616c462f
    5794:	72657070 	.word	0x72657070
    5798:	766c6156 	.word	0x766c6156
    579c:	69724465 	.word	0x69724465
    57a0:	2f726576 	.word	0x2f726576
    57a4:	70616c46 	.word	0x70616c46
    57a8:	56726570 	.word	0x56726570
    57ac:	65766c61 	.word	0x65766c61
    57b0:	76697244 	.word	0x76697244
    57b4:	682f7265 	.word	0x682f7265
    57b8:	702f6c70 	.word	0x702f6c70
    57bc:	2f74726f 	.word	0x2f74726f
    57c0:	5f6c7068 	.word	0x5f6c7068
    57c4:	6f697067 	.word	0x6f697067
    57c8:	7361625f 	.word	0x7361625f
    57cc:	00682e65 	.word	0x00682e65
    57d0:	682f2e2e 	.word	0x682f2e2e
    57d4:	732f6c61 	.word	0x732f6c61
    57d8:	682f6372 	.word	0x682f6372
    57dc:	745f6c61 	.word	0x745f6c61
    57e0:	72656d69 	.word	0x72656d69
    57e4:	0000632e 	.word	0x0000632e
    57e8:	682f2e2e 	.word	0x682f2e2e
    57ec:	752f6c61 	.word	0x752f6c61
    57f0:	736c6974 	.word	0x736c6974
    57f4:	6372732f 	.word	0x6372732f
    57f8:	6974752f 	.word	0x6974752f
    57fc:	6c5f736c 	.word	0x6c5f736c
    5800:	2e747369 	.word	0x2e747369
    5804:	00000063 	.word	0x00000063

00005808 <_tcs>:
    5808:	01680003 00000000 00000000 000001f4     ..h.............
    5818:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    5828:	63745f6c 0000632e 00002000              l_tc.c... ..

00005834 <_usb_ep_cfgs>:
    5834:	200008e4 00000000 00000040 200008a4     ... ....@...... 
    5844:	20000864 00400040 20000824 200007e4     d.. @.@.$.. ... 
    5854:	00400040 200007a4 20000764 00400040     @.@.... d.. @.@.
    5864:	20000724 200006e4 00400040 00003e88     $.. ... @.@..>..
    5874:	00003b70 00003e88 00003ba2 00003e88     p;...>...;...>..
    5884:	00003ac6 00003e88 00003e88 00003e88     .:...>...>...>..
    5894:	00003ada 00003e88 00003bd6 752f2e2e     .:...>...;..../u
    58a4:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    58b4:	00000063                                c...

000058b8 <_ZTV6Stream>:
	...
    58c0:	00004361 00004363 000040e9 000040ed     aC..cC...@...@..
    58d0:	00004361 00004361 00004361              aC..aC..aC..

000058dc <_ZTV9CDC_Class>:
	...
    58e4:	00004143 00004279 000040e9 00004215     CA..yB...@...B..
    58f4:	00004161 000041ed 00004119 000041cd     aA...A...A...A..
    5904:	00004225 00004231 2e257830 00005838     %B..1B..0x%.8X..
    5914:	00000a0d 006e616e 00666e69 0066766f     ....nan.inf.ovf.
    5924:	00004d34 00004d04 00004d16 00004c58     4M...M...M..XL..
    5934:	00004d16 00004cfa 00004d16 00004c58     .M...L...M..XL..
    5944:	00004d04 00004d04 00004cfa 00004c58     .M...M...L..XL..
    5954:	00004c60 00004c60 00004c60 00004d1c     `L..`L..`L...M..
    5964:	00004d04 00004d04 00004cd8 00004dbc     .M...M...L...M..
    5974:	00004cd8 00004cfa 00004cd8 00004dbc     .L...L...L...M..
    5984:	00004d04 00004d04 00004cfa 00004dbc     .M...M...L...M..
    5994:	00004c60 00004c60 00004c60 00004dc6     `L..`L..`L...M..

000059a4 <_global_impure_ptr>:
    59a4:	20000080                                ... 

000059a8 <_init>:
    59a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59ae:	bc08      	pop	{r3}
    59b0:	469e      	mov	lr, r3
    59b2:	4770      	bx	lr

000059b4 <__init_array_start>:
    59b4:	00005691 	.word	0x00005691

000059b8 <__frame_dummy_init_array_entry>:
    59b8:	000000dd 00000991 00001221 00004331     ........!...1C..
    59c8:	00004681                                .F..

000059cc <_fini>:
    59cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ce:	46c0      	nop			; (mov r8, r8)
    59d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59d2:	bc08      	pop	{r3}
    59d4:	469e      	mov	lr, r3
    59d6:	4770      	bx	lr

000059d8 <__fini_array_start>:
    59d8:	000000b5 	.word	0x000000b5
