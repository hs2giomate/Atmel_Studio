
ByteGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000042d4  000042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000004c4  20000000  000042dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000608  200004c4  000047a0  000204c4  2**2
                  ALLOC
  4 .stack        00002004  20000acc  00004da8  000204c4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
  7 .debug_info   00032b52  00000000  00000000  00020545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005a3c  00000000  00000000  00053097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000db81  00000000  00000000  00058ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b78  00000000  00000000  00066654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001150  00000000  00000000  000671cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020b1d  00000000  00000000  0006831c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015872  00000000  00000000  00088e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091fc9  00000000  00000000  0009e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ef4  00000000  00000000  00130674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 2a 00 20 11 04 00 00 0d 04 00 00 0d 04 00 00     .*. ............
	...
      2c:	0d 04 00 00 00 00 00 00 00 00 00 00 0d 04 00 00     ................
      3c:	0d 04 00 00 0d 04 00 00 0d 04 00 00 0d 04 00 00     ................
      4c:	0d 04 00 00 0d 04 00 00 0d 04 00 00 0d 04 00 00     ................
      5c:	a1 27 00 00 0d 04 00 00 0d 04 00 00 0d 04 00 00     .'..............
      6c:	0d 04 00 00 0d 04 00 00 0d 04 00 00 0d 04 00 00     ................
      7c:	0d 04 00 00 0d 04 00 00 0d 04 00 00 59 16 00 00     ............Y...
      8c:	0d 04 00 00 0d 04 00 00 0d 04 00 00 0d 04 00 00     ................
      9c:	0d 04 00 00 0d 04 00 00 0d 04 00 00 0d 04 00 00     ................
      ac:	0d 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004c4 	.word	0x200004c4
      d4:	00000000 	.word	0x00000000
      d8:	000042dc 	.word	0x000042dc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004c8 	.word	0x200004c8
     108:	000042dc 	.word	0x000042dc
     10c:	000042dc 	.word	0x000042dc
     110:	00000000 	.word	0x00000000

00000114 <_ZN19GPIOConnector_ClassC1Ev>:
const char HexToAscii[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
char HexSymbols[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f'};
// default constructor
GPIOConnector_Class::GPIOConnector_Class()
{
} //ByteBiulder_Class
     114:	4770      	bx	lr

00000116 <_ZN19GPIOConnector_ClassD1Ev>:

// default destructor
GPIOConnector_Class::~GPIOConnector_Class()
{
} //~ByteBiulder_Class
     116:	4770      	bx	lr

00000118 <_ZN19GPIOConnector_Class4InitEv>:

bool	GPIOConnector_Class::Init(void){
     118:	b510      	push	{r4, lr}
	return EXT2.Init();
     11a:	4802      	ldr	r0, [pc, #8]	; (124 <_ZN19GPIOConnector_Class4InitEv+0xc>)
     11c:	4b02      	ldr	r3, [pc, #8]	; (128 <_ZN19GPIOConnector_Class4InitEv+0x10>)
     11e:	4798      	blx	r3
	
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	200004ec 	.word	0x200004ec
     128:	00000601 	.word	0x00000601

0000012c <_ZN19GPIOConnector_Class8CheckHexEc>:
	return	byte;
}
bool	GPIOConnector_Class::IsNextHex(char	ch){
	return (( ch == LF) || (ch == CR) || (ch == SPACE) || (ch==EOF)|| (ch==TAB));
}
bool	GPIOConnector_Class::CheckHex(char ch){
     12c:	b510      	push	{r4, lr}
		for (i=0;i<(int)sizeof(HexSymbols);i++)
     12e:	2300      	movs	r3, #0
     130:	70c3      	strb	r3, [r0, #3]
		{
			if (HexSymbols[i]==ch)
     132:	4b0c      	ldr	r3, [pc, #48]	; (164 <_ZN19GPIOConnector_Class8CheckHexEc+0x38>)
     134:	781b      	ldrb	r3, [r3, #0]
     136:	428b      	cmp	r3, r1
     138:	d00f      	beq.n	15a <_ZN19GPIOConnector_Class8CheckHexEc+0x2e>
		for (i=0;i<(int)sizeof(HexSymbols);i++)
     13a:	2301      	movs	r3, #1
     13c:	70c3      	strb	r3, [r0, #3]
     13e:	3301      	adds	r3, #1
     140:	2201      	movs	r2, #1
			if (HexSymbols[i]==ch)
     142:	4c08      	ldr	r4, [pc, #32]	; (164 <_ZN19GPIOConnector_Class8CheckHexEc+0x38>)
     144:	5ca2      	ldrb	r2, [r4, r2]
     146:	428a      	cmp	r2, r1
     148:	d009      	beq.n	15e <_ZN19GPIOConnector_Class8CheckHexEc+0x32>
		for (i=0;i<(int)sizeof(HexSymbols);i++)
     14a:	70c3      	strb	r3, [r0, #3]
     14c:	001a      	movs	r2, r3
     14e:	3301      	adds	r3, #1
     150:	b2db      	uxtb	r3, r3
     152:	2a15      	cmp	r2, #21
     154:	ddf6      	ble.n	144 <_ZN19GPIOConnector_Class8CheckHexEc+0x18>
			{
				return true;
			}
		}
		return false;
     156:	2000      	movs	r0, #0
}
     158:	bd10      	pop	{r4, pc}
				return true;
     15a:	2001      	movs	r0, #1
     15c:	e7fc      	b.n	158 <_ZN19GPIOConnector_Class8CheckHexEc+0x2c>
     15e:	2001      	movs	r0, #1
     160:	e7fa      	b.n	158 <_ZN19GPIOConnector_Class8CheckHexEc+0x2c>
     162:	46c0      	nop			; (mov r8, r8)
     164:	20000004 	.word	0x20000004

00000168 <_ZN19GPIOConnector_Class6AtohexEh>:
uint8_t GPIOConnector_Class::Atohex(unsigned char ch)
{
	uint8_t hex;
	
	if((ch>='0') && (ch<='9'))
     168:	0008      	movs	r0, r1
     16a:	3830      	subs	r0, #48	; 0x30
     16c:	b2c0      	uxtb	r0, r0
     16e:	2809      	cmp	r0, #9
     170:	d90d      	bls.n	18e <_ZN19GPIOConnector_Class6AtohexEh+0x26>
		hex = ch - '0';
	else if ((ch>='A') && (ch<='F'))
     172:	000b      	movs	r3, r1
     174:	3b41      	subs	r3, #65	; 0x41
     176:	2b05      	cmp	r3, #5
     178:	d907      	bls.n	18a <_ZN19GPIOConnector_Class6AtohexEh+0x22>
		hex = ch - 'A' + 10;
	else if ((ch>='a') && (ch<='f'))
		hex = ch - 'a' +10;
	else hex = 0;
     17a:	2000      	movs	r0, #0
	else if ((ch>='a') && (ch<='f'))
     17c:	000b      	movs	r3, r1
     17e:	3b61      	subs	r3, #97	; 0x61
     180:	2b05      	cmp	r3, #5
     182:	d804      	bhi.n	18e <_ZN19GPIOConnector_Class6AtohexEh+0x26>
		hex = ch - 'a' +10;
     184:	3957      	subs	r1, #87	; 0x57
     186:	b2c8      	uxtb	r0, r1
     188:	e001      	b.n	18e <_ZN19GPIOConnector_Class6AtohexEh+0x26>
		hex = ch - 'A' + 10;
     18a:	3937      	subs	r1, #55	; 0x37
     18c:	b2c8      	uxtb	r0, r1
	
	return hex;

}
     18e:	4770      	bx	lr

00000190 <_ZN19GPIOConnector_Class7AtoHex2Ecc>:
uint8_t GPIOConnector_Class::AtoHex2(char upperNibble, char lowerNibble)
{
     190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     192:	0004      	movs	r4, r0
     194:	0017      	movs	r7, r2
	
	byte = 0;
	byte = Atohex(upperNibble) << 4;    // get upper hex nibble
     196:	4e05      	ldr	r6, [pc, #20]	; (1ac <_ZN19GPIOConnector_Class7AtoHex2Ecc+0x1c>)
     198:	47b0      	blx	r6
     19a:	0005      	movs	r5, r0
	byte |= Atohex(lowerNibble);        // get lower hex nibble and merge
     19c:	0039      	movs	r1, r7
     19e:	0020      	movs	r0, r4
     1a0:	47b0      	blx	r6
	byte = Atohex(upperNibble) << 4;    // get upper hex nibble
     1a2:	012d      	lsls	r5, r5, #4
	byte |= Atohex(lowerNibble);        // get lower hex nibble and merge
     1a4:	4328      	orrs	r0, r5
     1a6:	b2c0      	uxtb	r0, r0
     1a8:	71a0      	strb	r0, [r4, #6]
	return byte;

}
     1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1ac:	00000169 	.word	0x00000169

000001b0 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh>:
uint8_t	GPIOConnector_Class::PutByteOnEXT2(uint8_t by){
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	46c6      	mov	lr, r8
     1b4:	b500      	push	{lr}
	uint8_t mask=0x01;
	for (i = 0; i < 8; i++)
     1b6:	2300      	movs	r3, #0
     1b8:	70c3      	strb	r3, [r0, #3]
     1ba:	2201      	movs	r2, #1
	{
		
		gpio_set_pin_level(EXT2.connector.pinsOutput[i],(by&mask)>0);
     1bc:	4e13      	ldr	r6, [pc, #76]	; (20c <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x5c>)
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     1be:	241f      	movs	r4, #31
     1c0:	46a0      	mov	r8, r4
     1c2:	3c1e      	subs	r4, #30
     1c4:	e00d      	b.n	1e2 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1c6:	01db      	lsls	r3, r3, #7
     1c8:	25c0      	movs	r5, #192	; 0xc0
     1ca:	05ed      	lsls	r5, r5, #23
     1cc:	46ac      	mov	ip, r5
     1ce:	4463      	add	r3, ip
     1d0:	615f      	str	r7, [r3, #20]
		mask=mask<<1;
     1d2:	0052      	lsls	r2, r2, #1
     1d4:	b2d2      	uxtb	r2, r2
	for (i = 0; i < 8; i++)
     1d6:	78c3      	ldrb	r3, [r0, #3]
     1d8:	3301      	adds	r3, #1
     1da:	b2db      	uxtb	r3, r3
     1dc:	70c3      	strb	r3, [r0, #3]
     1de:	2b07      	cmp	r3, #7
     1e0:	dc10      	bgt.n	204 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x54>
		gpio_set_pin_level(EXT2.connector.pinsOutput[i],(by&mask)>0);
     1e2:	18f3      	adds	r3, r6, r3
     1e4:	7a1f      	ldrb	r7, [r3, #8]
     1e6:	117b      	asrs	r3, r7, #5
     1e8:	4645      	mov	r5, r8
     1ea:	402f      	ands	r7, r5
     1ec:	0025      	movs	r5, r4
     1ee:	40bd      	lsls	r5, r7
     1f0:	002f      	movs	r7, r5
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     1f2:	420a      	tst	r2, r1
     1f4:	d0e7      	beq.n	1c6 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x16>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     1f6:	01db      	lsls	r3, r3, #7
     1f8:	25c0      	movs	r5, #192	; 0xc0
     1fa:	05ed      	lsls	r5, r5, #23
     1fc:	46ac      	mov	ip, r5
     1fe:	4463      	add	r3, ip
     200:	619f      	str	r7, [r3, #24]
     202:	e7e6      	b.n	1d2 <_ZN19GPIOConnector_Class13PutByteOnEXT2Eh+0x22>
	}
	return	by;
}
     204:	0008      	movs	r0, r1
     206:	bc04      	pop	{r2}
     208:	4690      	mov	r8, r2
     20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     20c:	200004ec 	.word	0x200004ec

00000210 <_ZN19GPIOConnector_Class15ClearByteOnEXT2Ev>:
uint8_t	GPIOConnector_Class::ClearByteOnEXT2(void){
     210:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < 8; i++)
     212:	2300      	movs	r3, #0
     214:	70c3      	strb	r3, [r0, #3]
	{

		gpio_set_pin_level(EXT2.connector.pinsOutput[i],false);
     216:	4c0c      	ldr	r4, [pc, #48]	; (248 <_ZN19GPIOConnector_Class15ClearByteOnEXT2Ev+0x38>)
     218:	211f      	movs	r1, #31
     21a:	2201      	movs	r2, #1
     21c:	18e3      	adds	r3, r4, r3
     21e:	7a1b      	ldrb	r3, [r3, #8]
     220:	000d      	movs	r5, r1
     222:	401d      	ands	r5, r3
     224:	0016      	movs	r6, r2
     226:	40ae      	lsls	r6, r5
     228:	0035      	movs	r5, r6
     22a:	115b      	asrs	r3, r3, #5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     22c:	01db      	lsls	r3, r3, #7
     22e:	26c0      	movs	r6, #192	; 0xc0
     230:	05f6      	lsls	r6, r6, #23
     232:	46b4      	mov	ip, r6
     234:	4463      	add	r3, ip
     236:	615d      	str	r5, [r3, #20]
	for (i = 0; i < 8; i++)
     238:	78c3      	ldrb	r3, [r0, #3]
     23a:	3301      	adds	r3, #1
     23c:	b2db      	uxtb	r3, r3
     23e:	70c3      	strb	r3, [r0, #3]
     240:	2b07      	cmp	r3, #7
     242:	ddeb      	ble.n	21c <_ZN19GPIOConnector_Class15ClearByteOnEXT2Ev+0xc>
	}
	return	0;
}
     244:	2000      	movs	r0, #0
     246:	bd70      	pop	{r4, r5, r6, pc}
     248:	200004ec 	.word	0x200004ec

0000024c <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev>:
uint8_t	GPIOConnector_Class::ReadByteOnEXT2(void){
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46d6      	mov	lr, sl
     250:	464f      	mov	r7, r9
     252:	4646      	mov	r6, r8
     254:	b5c0      	push	{r6, r7, lr}
     256:	b082      	sub	sp, #8
     258:	0005      	movs	r5, r0
	uint8_t mask=0x01;
	byte=0;
     25a:	2300      	movs	r3, #0
     25c:	7183      	strb	r3, [r0, #6]
	bit=false;
     25e:	7203      	strb	r3, [r0, #8]
	for (i = 0; i < 8; i++)
     260:	70c3      	strb	r3, [r0, #3]
     262:	2401      	movs	r4, #1
	{
		bit=gpio_get_pin_level(EXT2.connector.pinsInput[7-i]);
     264:	4a1e      	ldr	r2, [pc, #120]	; (2e0 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x94>)
     266:	4690      	mov	r8, r2
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     268:	4f1e      	ldr	r7, [pc, #120]	; (2e4 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x98>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
     26a:	4a1f      	ldr	r2, [pc, #124]	; (2e8 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x9c>)
     26c:	4691      	mov	r9, r2
     26e:	e007      	b.n	280 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x34>
		if (bit)
		{
			byte|=(mask);
		}
		
		mask=mask<<1;
     270:	0064      	lsls	r4, r4, #1
     272:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 8; i++)
     274:	78eb      	ldrb	r3, [r5, #3]
     276:	3301      	adds	r3, #1
     278:	b2db      	uxtb	r3, r3
     27a:	70eb      	strb	r3, [r5, #3]
     27c:	2b07      	cmp	r3, #7
     27e:	dc27      	bgt.n	2d0 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x84>
		bit=gpio_get_pin_level(EXT2.connector.pinsInput[7-i]);
     280:	4642      	mov	r2, r8
     282:	1ad3      	subs	r3, r2, r3
     284:	79de      	ldrb	r6, [r3, #7]
	CRITICAL_SECTION_ENTER();
     286:	a801      	add	r0, sp, #4
     288:	47b8      	blx	r7
     28a:	1173      	asrs	r3, r6, #5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     28c:	01db      	lsls	r3, r3, #7
     28e:	22c0      	movs	r2, #192	; 0xc0
     290:	05d2      	lsls	r2, r2, #23
     292:	589a      	ldr	r2, [r3, r2]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     294:	4915      	ldr	r1, [pc, #84]	; (2ec <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0xa0>)
     296:	1859      	adds	r1, r3, r1
     298:	6a09      	ldr	r1, [r1, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     29a:	20c0      	movs	r0, #192	; 0xc0
     29c:	05c0      	lsls	r0, r0, #23
     29e:	4684      	mov	ip, r0
     2a0:	4463      	add	r3, ip
     2a2:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     2a4:	404b      	eors	r3, r1
     2a6:	4013      	ands	r3, r2
     2a8:	404b      	eors	r3, r1
     2aa:	469a      	mov	sl, r3
	CRITICAL_SECTION_LEAVE();
     2ac:	a801      	add	r0, sp, #4
     2ae:	47c8      	blx	r9
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     2b0:	221f      	movs	r2, #31
     2b2:	4032      	ands	r2, r6
     2b4:	2301      	movs	r3, #1
     2b6:	4093      	lsls	r3, r2
     2b8:	4652      	mov	r2, sl
     2ba:	4013      	ands	r3, r2
     2bc:	001a      	movs	r2, r3
     2be:	1e51      	subs	r1, r2, #1
     2c0:	418a      	sbcs	r2, r1
     2c2:	722a      	strb	r2, [r5, #8]
		if (bit)
     2c4:	2b00      	cmp	r3, #0
     2c6:	d0d3      	beq.n	270 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x24>
			byte|=(mask);
     2c8:	79ab      	ldrb	r3, [r5, #6]
     2ca:	4323      	orrs	r3, r4
     2cc:	71ab      	strb	r3, [r5, #6]
     2ce:	e7cf      	b.n	270 <_ZN19GPIOConnector_Class14ReadByteOnEXT2Ev+0x24>
	}
	return	byte;
     2d0:	79a8      	ldrb	r0, [r5, #6]
}
     2d2:	b002      	add	sp, #8
     2d4:	bc1c      	pop	{r2, r3, r4}
     2d6:	4690      	mov	r8, r2
     2d8:	4699      	mov	r9, r3
     2da:	46a2      	mov	sl, r4
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	200004ec 	.word	0x200004ec
     2e4:	000008a1 	.word	0x000008a1
     2e8:	000008af 	.word	0x000008af
     2ec:	41004400 	.word	0x41004400

000002f0 <_ZN19GPIOConnector_Class13ConstructByteEv>:
uint8_t	GPIOConnector_Class::ConstructByte(){
     2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2f2:	0004      	movs	r4, r0
		chL=(char)serial.read();
     2f4:	4d22      	ldr	r5, [pc, #136]	; (380 <_ZN19GPIOConnector_Class13ConstructByteEv+0x90>)
     2f6:	4f23      	ldr	r7, [pc, #140]	; (384 <_ZN19GPIOConnector_Class13ConstructByteEv+0x94>)
		done=CheckHex(chL);
     2f8:	4e23      	ldr	r6, [pc, #140]	; (388 <_ZN19GPIOConnector_Class13ConstructByteEv+0x98>)
		done=false;
     2fa:	2300      	movs	r3, #0
     2fc:	71e3      	strb	r3, [r4, #7]
		chL=(char)serial.read();
     2fe:	0028      	movs	r0, r5
     300:	47b8      	blx	r7
     302:	b2c1      	uxtb	r1, r0
     304:	70a1      	strb	r1, [r4, #2]
		done=CheckHex(chL);
     306:	0020      	movs	r0, r4
     308:	47b0      	blx	r6
     30a:	71e0      	strb	r0, [r4, #7]
	}while((!done));
     30c:	2800      	cmp	r0, #0
     30e:	d0f4      	beq.n	2fa <_ZN19GPIOConnector_Class13ConstructByteEv+0xa>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     310:	4d1b      	ldr	r5, [pc, #108]	; (380 <_ZN19GPIOConnector_Class13ConstructByteEv+0x90>)
     312:	491e      	ldr	r1, [pc, #120]	; (38c <_ZN19GPIOConnector_Class13ConstructByteEv+0x9c>)
     314:	0028      	movs	r0, r5
     316:	4b1e      	ldr	r3, [pc, #120]	; (390 <_ZN19GPIOConnector_Class13ConstructByteEv+0xa0>)
     318:	4798      	blx	r3
     31a:	78a1      	ldrb	r1, [r4, #2]
     31c:	0028      	movs	r0, r5
     31e:	4b1d      	ldr	r3, [pc, #116]	; (394 <_ZN19GPIOConnector_Class13ConstructByteEv+0xa4>)
     320:	4798      	blx	r3
		chR=(char)serial.read();
     322:	4d17      	ldr	r5, [pc, #92]	; (380 <_ZN19GPIOConnector_Class13ConstructByteEv+0x90>)
     324:	4f17      	ldr	r7, [pc, #92]	; (384 <_ZN19GPIOConnector_Class13ConstructByteEv+0x94>)
		done=CheckHex(chR);
     326:	4e18      	ldr	r6, [pc, #96]	; (388 <_ZN19GPIOConnector_Class13ConstructByteEv+0x98>)
		done=false;
     328:	2300      	movs	r3, #0
     32a:	71e3      	strb	r3, [r4, #7]
		chR=(char)serial.read();
     32c:	0028      	movs	r0, r5
     32e:	47b8      	blx	r7
     330:	b2c1      	uxtb	r1, r0
     332:	7061      	strb	r1, [r4, #1]
		done=CheckHex(chR);
     334:	0020      	movs	r0, r4
     336:	47b0      	blx	r6
     338:	71e0      	strb	r0, [r4, #7]
	}while((!done));
     33a:	2800      	cmp	r0, #0
     33c:	d0f4      	beq.n	328 <_ZN19GPIOConnector_Class13ConstructByteEv+0x38>
     33e:	7861      	ldrb	r1, [r4, #1]
     340:	4d0f      	ldr	r5, [pc, #60]	; (380 <_ZN19GPIOConnector_Class13ConstructByteEv+0x90>)
     342:	0028      	movs	r0, r5
     344:	4b13      	ldr	r3, [pc, #76]	; (394 <_ZN19GPIOConnector_Class13ConstructByteEv+0xa4>)
     346:	4798      	blx	r3
     348:	4913      	ldr	r1, [pc, #76]	; (398 <_ZN19GPIOConnector_Class13ConstructByteEv+0xa8>)
     34a:	0028      	movs	r0, r5
     34c:	4b10      	ldr	r3, [pc, #64]	; (390 <_ZN19GPIOConnector_Class13ConstructByteEv+0xa0>)
     34e:	4798      	blx	r3
	byte=AtoHex2(chL,chR);
     350:	7862      	ldrb	r2, [r4, #1]
     352:	78a1      	ldrb	r1, [r4, #2]
     354:	0020      	movs	r0, r4
     356:	4b11      	ldr	r3, [pc, #68]	; (39c <_ZN19GPIOConnector_Class13ConstructByteEv+0xac>)
     358:	4798      	blx	r3
     35a:	71a0      	strb	r0, [r4, #6]
	serial.println(" Press RETURN");
     35c:	4910      	ldr	r1, [pc, #64]	; (3a0 <_ZN19GPIOConnector_Class13ConstructByteEv+0xb0>)
     35e:	0028      	movs	r0, r5
     360:	4b10      	ldr	r3, [pc, #64]	; (3a4 <_ZN19GPIOConnector_Class13ConstructByteEv+0xb4>)
     362:	4798      	blx	r3
		chL=(char)serial.read();
     364:	4d06      	ldr	r5, [pc, #24]	; (380 <_ZN19GPIOConnector_Class13ConstructByteEv+0x90>)
     366:	4e07      	ldr	r6, [pc, #28]	; (384 <_ZN19GPIOConnector_Class13ConstructByteEv+0x94>)
     368:	0028      	movs	r0, r5
     36a:	47b0      	blx	r6
     36c:	b2c0      	uxtb	r0, r0
     36e:	70a0      	strb	r0, [r4, #2]
	}while(chL!=CR);
     370:	280d      	cmp	r0, #13
     372:	d1f9      	bne.n	368 <_ZN19GPIOConnector_Class13ConstructByteEv+0x78>
	serial.println(" Got it!...");
     374:	490c      	ldr	r1, [pc, #48]	; (3a8 <_ZN19GPIOConnector_Class13ConstructByteEv+0xb8>)
     376:	4802      	ldr	r0, [pc, #8]	; (380 <_ZN19GPIOConnector_Class13ConstructByteEv+0x90>)
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <_ZN19GPIOConnector_Class13ConstructByteEv+0xb4>)
     37a:	4798      	blx	r3
	return	byte;
     37c:	79a0      	ldrb	r0, [r4, #6]
}
     37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     380:	200009f8 	.word	0x200009f8
     384:	00003721 	.word	0x00003721
     388:	0000012d 	.word	0x0000012d
     38c:	00004040 	.word	0x00004040
     390:	000038c1 	.word	0x000038c1
     394:	000038e5 	.word	0x000038e5
     398:	00004048 	.word	0x00004048
     39c:	00000191 	.word	0x00000191
     3a0:	0000404c 	.word	0x0000404c
     3a4:	00003905 	.word	0x00003905
     3a8:	0000405c 	.word	0x0000405c

000003ac <_ZN19GPIOConnector_Class11RequestByteEv>:
uint8_t	GPIOConnector_Class::RequestByte(void){
     3ac:	b570      	push	{r4, r5, r6, lr}
     3ae:	0006      	movs	r6, r0
		serial.println("\n\r>");
     3b0:	4c0c      	ldr	r4, [pc, #48]	; (3e4 <_ZN19GPIOConnector_Class11RequestByteEv+0x38>)
     3b2:	490d      	ldr	r1, [pc, #52]	; (3e8 <_ZN19GPIOConnector_Class11RequestByteEv+0x3c>)
     3b4:	0020      	movs	r0, r4
     3b6:	4d0d      	ldr	r5, [pc, #52]	; (3ec <_ZN19GPIOConnector_Class11RequestByteEv+0x40>)
     3b8:	47a8      	blx	r5
		serial.println("To Transmit, enter 2 HEX  followed by ENTER");
     3ba:	490d      	ldr	r1, [pc, #52]	; (3f0 <_ZN19GPIOConnector_Class11RequestByteEv+0x44>)
     3bc:	0020      	movs	r0, r4
     3be:	47a8      	blx	r5
		serial.println("Format: Bits 8-5, Bits 4-1, then Enter ");
     3c0:	490c      	ldr	r1, [pc, #48]	; (3f4 <_ZN19GPIOConnector_Class11RequestByteEv+0x48>)
     3c2:	0020      	movs	r0, r4
     3c4:	47a8      	blx	r5
		serial.println("Example: 67 ENTER");
     3c6:	490c      	ldr	r1, [pc, #48]	; (3f8 <_ZN19GPIOConnector_Class11RequestByteEv+0x4c>)
     3c8:	0020      	movs	r0, r4
     3ca:	47a8      	blx	r5
     3cc:	490b      	ldr	r1, [pc, #44]	; (3fc <_ZN19GPIOConnector_Class11RequestByteEv+0x50>)
     3ce:	0020      	movs	r0, r4
     3d0:	4d0b      	ldr	r5, [pc, #44]	; (400 <_ZN19GPIOConnector_Class11RequestByteEv+0x54>)
     3d2:	47a8      	blx	r5
     3d4:	490b      	ldr	r1, [pc, #44]	; (404 <_ZN19GPIOConnector_Class11RequestByteEv+0x58>)
     3d6:	0020      	movs	r0, r4
     3d8:	47a8      	blx	r5
		byte=ConstructByte();
     3da:	0030      	movs	r0, r6
     3dc:	4b0a      	ldr	r3, [pc, #40]	; (408 <_ZN19GPIOConnector_Class11RequestByteEv+0x5c>)
     3de:	4798      	blx	r3
     3e0:	71b0      	strb	r0, [r6, #6]
}
     3e2:	bd70      	pop	{r4, r5, r6, pc}
     3e4:	200009f8 	.word	0x200009f8
     3e8:	00004068 	.word	0x00004068
     3ec:	00003905 	.word	0x00003905
     3f0:	0000406c 	.word	0x0000406c
     3f4:	00004098 	.word	0x00004098
     3f8:	000040c0 	.word	0x000040c0
     3fc:	000040d4 	.word	0x000040d4
     400:	000038c1 	.word	0x000038c1
     404:	00004048 	.word	0x00004048
     408:	000002f1 	.word	0x000002f1

0000040c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     40c:	e7fe      	b.n	40c <Dummy_Handler>
	...

00000410 <Reset_Handler>:
{
     410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     412:	4a2a      	ldr	r2, [pc, #168]	; (4bc <Reset_Handler+0xac>)
     414:	4b2a      	ldr	r3, [pc, #168]	; (4c0 <Reset_Handler+0xb0>)
     416:	429a      	cmp	r2, r3
     418:	d011      	beq.n	43e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     41a:	001a      	movs	r2, r3
     41c:	4b29      	ldr	r3, [pc, #164]	; (4c4 <Reset_Handler+0xb4>)
     41e:	429a      	cmp	r2, r3
     420:	d20d      	bcs.n	43e <Reset_Handler+0x2e>
     422:	4a29      	ldr	r2, [pc, #164]	; (4c8 <Reset_Handler+0xb8>)
     424:	3303      	adds	r3, #3
     426:	1a9b      	subs	r3, r3, r2
     428:	089b      	lsrs	r3, r3, #2
     42a:	3301      	adds	r3, #1
     42c:	009b      	lsls	r3, r3, #2
     42e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     430:	4823      	ldr	r0, [pc, #140]	; (4c0 <Reset_Handler+0xb0>)
     432:	4922      	ldr	r1, [pc, #136]	; (4bc <Reset_Handler+0xac>)
     434:	588c      	ldr	r4, [r1, r2]
     436:	5084      	str	r4, [r0, r2]
     438:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     43a:	429a      	cmp	r2, r3
     43c:	d1fa      	bne.n	434 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     43e:	4a23      	ldr	r2, [pc, #140]	; (4cc <Reset_Handler+0xbc>)
     440:	4b23      	ldr	r3, [pc, #140]	; (4d0 <Reset_Handler+0xc0>)
     442:	429a      	cmp	r2, r3
     444:	d20a      	bcs.n	45c <Reset_Handler+0x4c>
     446:	43d3      	mvns	r3, r2
     448:	4921      	ldr	r1, [pc, #132]	; (4d0 <Reset_Handler+0xc0>)
     44a:	185b      	adds	r3, r3, r1
     44c:	2103      	movs	r1, #3
     44e:	438b      	bics	r3, r1
     450:	3304      	adds	r3, #4
     452:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     454:	2100      	movs	r1, #0
     456:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     458:	4293      	cmp	r3, r2
     45a:	d1fc      	bne.n	456 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     45c:	4a1d      	ldr	r2, [pc, #116]	; (4d4 <Reset_Handler+0xc4>)
     45e:	21ff      	movs	r1, #255	; 0xff
     460:	4b1d      	ldr	r3, [pc, #116]	; (4d8 <Reset_Handler+0xc8>)
     462:	438b      	bics	r3, r1
     464:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     466:	39fd      	subs	r1, #253	; 0xfd
     468:	2390      	movs	r3, #144	; 0x90
     46a:	005b      	lsls	r3, r3, #1
     46c:	4a1b      	ldr	r2, [pc, #108]	; (4dc <Reset_Handler+0xcc>)
     46e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     470:	4a1b      	ldr	r2, [pc, #108]	; (4e0 <Reset_Handler+0xd0>)
     472:	78d3      	ldrb	r3, [r2, #3]
     474:	2503      	movs	r5, #3
     476:	43ab      	bics	r3, r5
     478:	2402      	movs	r4, #2
     47a:	4323      	orrs	r3, r4
     47c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     47e:	78d3      	ldrb	r3, [r2, #3]
     480:	270c      	movs	r7, #12
     482:	43bb      	bics	r3, r7
     484:	2608      	movs	r6, #8
     486:	4333      	orrs	r3, r6
     488:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     48a:	4b16      	ldr	r3, [pc, #88]	; (4e4 <Reset_Handler+0xd4>)
     48c:	7b98      	ldrb	r0, [r3, #14]
     48e:	2230      	movs	r2, #48	; 0x30
     490:	4390      	bics	r0, r2
     492:	2220      	movs	r2, #32
     494:	4310      	orrs	r0, r2
     496:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     498:	7b99      	ldrb	r1, [r3, #14]
     49a:	43b9      	bics	r1, r7
     49c:	4331      	orrs	r1, r6
     49e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     4a0:	7b9a      	ldrb	r2, [r3, #14]
     4a2:	43aa      	bics	r2, r5
     4a4:	4322      	orrs	r2, r4
     4a6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4a8:	4a0f      	ldr	r2, [pc, #60]	; (4e8 <Reset_Handler+0xd8>)
     4aa:	6853      	ldr	r3, [r2, #4]
     4ac:	2180      	movs	r1, #128	; 0x80
     4ae:	430b      	orrs	r3, r1
     4b0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     4b2:	4b0e      	ldr	r3, [pc, #56]	; (4ec <Reset_Handler+0xdc>)
     4b4:	4798      	blx	r3
        main();
     4b6:	4b0e      	ldr	r3, [pc, #56]	; (4f0 <Reset_Handler+0xe0>)
     4b8:	4798      	blx	r3
     4ba:	e7fe      	b.n	4ba <Reset_Handler+0xaa>
     4bc:	000042dc 	.word	0x000042dc
     4c0:	20000000 	.word	0x20000000
     4c4:	200004c4 	.word	0x200004c4
     4c8:	20000004 	.word	0x20000004
     4cc:	200004c4 	.word	0x200004c4
     4d0:	20000acc 	.word	0x20000acc
     4d4:	e000ed00 	.word	0xe000ed00
     4d8:	00000000 	.word	0x00000000
     4dc:	41007000 	.word	0x41007000
     4e0:	41005000 	.word	0x41005000
     4e4:	41004800 	.word	0x41004800
     4e8:	41004000 	.word	0x41004000
     4ec:	00003d25 	.word	0x00003d25
     4f0:	000004f5 	.word	0x000004f5

000004f4 <main>:
#include "CDC_Class.h"
#include "GPIOConnector_Class.h"
static	GPIOConnector_Class	gpio;

int main(void)
{
     4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char cmd;
	uint8_t	byte;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     4f6:	4b21      	ldr	r3, [pc, #132]	; (57c <main+0x88>)
     4f8:	4798      	blx	r3
    /* Replace with your application code */
	serial.Init();
     4fa:	4c21      	ldr	r4, [pc, #132]	; (580 <main+0x8c>)
     4fc:	0020      	movs	r0, r4
     4fe:	4b21      	ldr	r3, [pc, #132]	; (584 <main+0x90>)
     500:	4798      	blx	r3
	gpio.Init();
     502:	4821      	ldr	r0, [pc, #132]	; (588 <main+0x94>)
     504:	4b21      	ldr	r3, [pc, #132]	; (58c <main+0x98>)
     506:	4798      	blx	r3
	//	serial.write(test,sizeof(test));
	delay_ms(200);
     508:	20c8      	movs	r0, #200	; 0xc8
     50a:	4b21      	ldr	r3, [pc, #132]	; (590 <main+0x9c>)
     50c:	4798      	blx	r3
	serial.println("*** USB Interface Test ***");
     50e:	4921      	ldr	r1, [pc, #132]	; (594 <main+0xa0>)
     510:	0020      	movs	r0, r4
     512:	4b21      	ldr	r3, [pc, #132]	; (598 <main+0xa4>)
     514:	4798      	blx	r3
     516:	4c1a      	ldr	r4, [pc, #104]	; (580 <main+0x8c>)
     518:	4f20      	ldr	r7, [pc, #128]	; (59c <main+0xa8>)
     51a:	e006      	b.n	52a <main+0x36>
		{
			gpio.PutByteOnEXT2(byte);
		} 
		else
		{
			gpio.ClearByteOnEXT2();
     51c:	481a      	ldr	r0, [pc, #104]	; (588 <main+0x94>)
     51e:	4b20      	ldr	r3, [pc, #128]	; (5a0 <main+0xac>)
     520:	4798      	blx	r3
		}
		delay_ms(500);
     522:	20fa      	movs	r0, #250	; 0xfa
     524:	0040      	lsls	r0, r0, #1
     526:	4b1a      	ldr	r3, [pc, #104]	; (590 <main+0x9c>)
     528:	4798      	blx	r3
     52a:	491e      	ldr	r1, [pc, #120]	; (5a4 <main+0xb0>)
     52c:	0020      	movs	r0, r4
     52e:	47b8      	blx	r7
     530:	491d      	ldr	r1, [pc, #116]	; (5a8 <main+0xb4>)
     532:	0020      	movs	r0, r4
     534:	47b8      	blx	r7
     536:	491d      	ldr	r1, [pc, #116]	; (5ac <main+0xb8>)
     538:	0020      	movs	r0, r4
     53a:	47b8      	blx	r7
     53c:	491c      	ldr	r1, [pc, #112]	; (5b0 <main+0xbc>)
     53e:	0020      	movs	r0, r4
     540:	47b8      	blx	r7
     542:	491c      	ldr	r1, [pc, #112]	; (5b4 <main+0xc0>)
     544:	0020      	movs	r0, r4
     546:	47b8      	blx	r7
     548:	491b      	ldr	r1, [pc, #108]	; (5b8 <main+0xc4>)
     54a:	0020      	movs	r0, r4
     54c:	47b8      	blx	r7
		byte=gpio.ReadByteOnEXT2();
     54e:	4d0e      	ldr	r5, [pc, #56]	; (588 <main+0x94>)
     550:	0028      	movs	r0, r5
     552:	4b1a      	ldr	r3, [pc, #104]	; (5bc <main+0xc8>)
     554:	4798      	blx	r3
     556:	0006      	movs	r6, r0
     558:	4919      	ldr	r1, [pc, #100]	; (5c0 <main+0xcc>)
     55a:	0020      	movs	r0, r4
     55c:	47b8      	blx	r7
		serial.println(byte,HEX);
     55e:	2210      	movs	r2, #16
     560:	0031      	movs	r1, r6
     562:	0020      	movs	r0, r4
     564:	4b17      	ldr	r3, [pc, #92]	; (5c4 <main+0xd0>)
     566:	4798      	blx	r3
		byte=gpio.RequestByte();
     568:	0028      	movs	r0, r5
     56a:	4b17      	ldr	r3, [pc, #92]	; (5c8 <main+0xd4>)
     56c:	4798      	blx	r3
		if (byte>0)
     56e:	2800      	cmp	r0, #0
     570:	ddd4      	ble.n	51c <main+0x28>
			gpio.PutByteOnEXT2(byte);
     572:	0001      	movs	r1, r0
     574:	4804      	ldr	r0, [pc, #16]	; (588 <main+0x94>)
     576:	4b15      	ldr	r3, [pc, #84]	; (5cc <main+0xd8>)
     578:	4798      	blx	r3
     57a:	e7d2      	b.n	522 <main+0x2e>
     57c:	00000771 	.word	0x00000771
     580:	200009f8 	.word	0x200009f8
     584:	00003835 	.word	0x00003835
     588:	200004e0 	.word	0x200004e0
     58c:	00000119 	.word	0x00000119
     590:	000008bd 	.word	0x000008bd
     594:	000040e4 	.word	0x000040e4
     598:	00003905 	.word	0x00003905
     59c:	000038c1 	.word	0x000038c1
     5a0:	00000211 	.word	0x00000211
     5a4:	00004100 	.word	0x00004100
     5a8:	0000410c 	.word	0x0000410c
     5ac:	00004118 	.word	0x00004118
     5b0:	00004120 	.word	0x00004120
     5b4:	0000412c 	.word	0x0000412c
     5b8:	00004048 	.word	0x00004048
     5bc:	0000024d 	.word	0x0000024d
     5c0:	00004134 	.word	0x00004134
     5c4:	000039d9 	.word	0x000039d9
     5c8:	000003ad 	.word	0x000003ad
     5cc:	000001b1 	.word	0x000001b1

000005d0 <_GLOBAL__sub_I_main>:
	
    }
}
     5d0:	b510      	push	{r4, lr}
static	GPIOConnector_Class	gpio;
     5d2:	4c05      	ldr	r4, [pc, #20]	; (5e8 <_GLOBAL__sub_I_main+0x18>)
     5d4:	0020      	movs	r0, r4
     5d6:	4b05      	ldr	r3, [pc, #20]	; (5ec <_GLOBAL__sub_I_main+0x1c>)
     5d8:	4798      	blx	r3
     5da:	4a05      	ldr	r2, [pc, #20]	; (5f0 <_GLOBAL__sub_I_main+0x20>)
     5dc:	4905      	ldr	r1, [pc, #20]	; (5f4 <_GLOBAL__sub_I_main+0x24>)
     5de:	0020      	movs	r0, r4
     5e0:	4b05      	ldr	r3, [pc, #20]	; (5f8 <_GLOBAL__sub_I_main+0x28>)
     5e2:	4798      	blx	r3
}
     5e4:	bd10      	pop	{r4, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	200004e0 	.word	0x200004e0
     5ec:	00000115 	.word	0x00000115
     5f0:	20000000 	.word	0x20000000
     5f4:	00000117 	.word	0x00000117
     5f8:	00003bed 	.word	0x00003bed

000005fc <_ZN25PinCodding_SAMD21XplainedD1Ev>:
} //PinCodding_SAMD21Xplained

// default destructor
PinCodding_SAMD21Xplained::~PinCodding_SAMD21Xplained()
{
} //~PinCodding_SAMD21Xplained
     5fc:	4770      	bx	lr
	...

00000600 <_ZN25PinCodding_SAMD21Xplained4InitEv>:

bool	PinCodding_SAMD21Xplained::Init(void){
     600:	b5f0      	push	{r4, r5, r6, r7, lr}
     602:	46de      	mov	lr, fp
     604:	4657      	mov	r7, sl
     606:	464e      	mov	r6, r9
     608:	4645      	mov	r5, r8
     60a:	b5e0      	push	{r5, r6, r7, lr}
     60c:	b083      	sub	sp, #12
		for (i = 0; i < 8; i++)
     60e:	2300      	movs	r3, #0
     610:	7403      	strb	r3, [r0, #16]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     612:	211f      	movs	r1, #31
     614:	2201      	movs	r2, #1
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     616:	4c49      	ldr	r4, [pc, #292]	; (73c <_ZN25PinCodding_SAMD21Xplained4InitEv+0x13c>)
     618:	46a4      	mov	ip, r4
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     61a:	2404      	movs	r4, #4
     61c:	46a3      	mov	fp, r4
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     61e:	2480      	movs	r4, #128	; 0x80
     620:	05e4      	lsls	r4, r4, #23
     622:	46a2      	mov	sl, r4
		{
			connector.pinsInput[i]=ext2Inputs[i];
     624:	4c46      	ldr	r4, [pc, #280]	; (740 <_ZN25PinCodding_SAMD21Xplained4InitEv+0x140>)
     626:	5ce5      	ldrb	r5, [r4, r3]
     628:	54c5      	strb	r5, [r0, r3]
     62a:	000b      	movs	r3, r1
     62c:	402b      	ands	r3, r5
     62e:	0016      	movs	r6, r2
     630:	409e      	lsls	r6, r3
     632:	0033      	movs	r3, r6
     634:	116d      	asrs	r5, r5, #5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     636:	01ed      	lsls	r5, r5, #7
     638:	26c0      	movs	r6, #192	; 0xc0
     63a:	05f6      	lsls	r6, r6, #23
     63c:	19ae      	adds	r6, r5, r6
     63e:	6073      	str	r3, [r6, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     640:	041e      	lsls	r6, r3, #16
     642:	0c36      	lsrs	r6, r6, #16
     644:	4667      	mov	r7, ip
     646:	433e      	orrs	r6, r7

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     648:	4f3e      	ldr	r7, [pc, #248]	; (744 <_ZN25PinCodding_SAMD21Xplained4InitEv+0x144>)
     64a:	46b8      	mov	r8, r7
     64c:	4445      	add	r5, r8
     64e:	62ae      	str	r6, [r5, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
     650:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     652:	4e3d      	ldr	r6, [pc, #244]	; (748 <_ZN25PinCodding_SAMD21Xplained4InitEv+0x148>)
     654:	4333      	orrs	r3, r6
     656:	62ab      	str	r3, [r5, #40]	; 0x28
			gpio_set_pin_direction(connector.pinsInput[i],GPIO_DIRECTION_IN);
			gpio_set_pin_pull_mode(connector.pinsInput[i],GPIO_PULL_UP);
     658:	7c03      	ldrb	r3, [r0, #16]
     65a:	5cc3      	ldrb	r3, [r0, r3]
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     65c:	000f      	movs	r7, r1
     65e:	401f      	ands	r7, r3
     660:	0016      	movs	r6, r2
     662:	40be      	lsls	r6, r7
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     664:	115b      	asrs	r3, r3, #5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     666:	01db      	lsls	r3, r3, #7
     668:	25c0      	movs	r5, #192	; 0xc0
     66a:	05ed      	lsls	r5, r5, #23
     66c:	195d      	adds	r5, r3, r5
     66e:	606e      	str	r6, [r5, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     670:	18fb      	adds	r3, r7, r3
     672:	4f36      	ldr	r7, [pc, #216]	; (74c <_ZN25PinCodding_SAMD21Xplained4InitEv+0x14c>)
     674:	46b8      	mov	r8, r7
     676:	4443      	add	r3, r8
     678:	781f      	ldrb	r7, [r3, #0]
     67a:	465c      	mov	r4, fp
     67c:	4327      	orrs	r7, r4
     67e:	1c3c      	adds	r4, r7, #0
     680:	466f      	mov	r7, sp
     682:	71fc      	strb	r4, [r7, #7]
     684:	79fc      	ldrb	r4, [r7, #7]
     686:	701c      	strb	r4, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     688:	61ae      	str	r6, [r5, #24]
			gpio_set_pin_function(connector.pinsInput[i],GPIO_PIN_FUNCTION_OFF);
     68a:	7c03      	ldrb	r3, [r0, #16]
     68c:	5cc3      	ldrb	r3, [r0, r3]
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
     68e:	095d      	lsrs	r5, r3, #5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     690:	400b      	ands	r3, r1
     692:	01ed      	lsls	r5, r5, #7
     694:	195b      	adds	r3, r3, r5
     696:	4443      	add	r3, r8
     698:	781d      	ldrb	r5, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     69a:	4395      	bics	r5, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69c:	701d      	strb	r5, [r3, #0]
			connector.pinsOutput[i]=ext2Outputs[i];
     69e:	7c05      	ldrb	r5, [r0, #16]
     6a0:	4b27      	ldr	r3, [pc, #156]	; (740 <_ZN25PinCodding_SAMD21Xplained4InitEv+0x140>)
     6a2:	195b      	adds	r3, r3, r5
     6a4:	7a1b      	ldrb	r3, [r3, #8]
     6a6:	1945      	adds	r5, r0, r5
     6a8:	722b      	strb	r3, [r5, #8]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     6aa:	000d      	movs	r5, r1
     6ac:	401d      	ands	r5, r3
     6ae:	0016      	movs	r6, r2
     6b0:	40ae      	lsls	r6, r5
     6b2:	115b      	asrs	r3, r3, #5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b4:	01db      	lsls	r3, r3, #7
     6b6:	4699      	mov	r9, r3
     6b8:	23c0      	movs	r3, #192	; 0xc0
     6ba:	05db      	lsls	r3, r3, #23
     6bc:	444b      	add	r3, r9
     6be:	609e      	str	r6, [r3, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     6c0:	0433      	lsls	r3, r6, #16
     6c2:	0c1b      	lsrs	r3, r3, #16
     6c4:	4654      	mov	r4, sl
     6c6:	4323      	orrs	r3, r4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6c8:	4c1e      	ldr	r4, [pc, #120]	; (744 <_ZN25PinCodding_SAMD21Xplained4InitEv+0x144>)
     6ca:	46a0      	mov	r8, r4
     6cc:	44c1      	add	r9, r8
     6ce:	464c      	mov	r4, r9
     6d0:	62a3      	str	r3, [r4, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     6d2:	0c33      	lsrs	r3, r6, #16
		hri_port_write_WRCONFIG_reg(
     6d4:	24c0      	movs	r4, #192	; 0xc0
     6d6:	0624      	lsls	r4, r4, #24
     6d8:	4323      	orrs	r3, r4
     6da:	464c      	mov	r4, r9
     6dc:	62a3      	str	r3, [r4, #40]	; 0x28
			gpio_set_pin_direction(connector.pinsOutput[i],GPIO_DIRECTION_OUT);
			gpio_set_pin_function(connector.pinsOutput[i],GPIO_PIN_FUNCTION_OFF);
     6de:	7c03      	ldrb	r3, [r0, #16]
     6e0:	18c3      	adds	r3, r0, r3
     6e2:	7a1b      	ldrb	r3, [r3, #8]
	uint8_t port = GPIO_PORT(gpio);
     6e4:	095c      	lsrs	r4, r3, #5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6e6:	400b      	ands	r3, r1
     6e8:	01e4      	lsls	r4, r4, #7
     6ea:	46a0      	mov	r8, r4
     6ec:	4443      	add	r3, r8
     6ee:	4c17      	ldr	r4, [pc, #92]	; (74c <_ZN25PinCodding_SAMD21Xplained4InitEv+0x14c>)
     6f0:	46a0      	mov	r8, r4
     6f2:	4443      	add	r3, r8
     6f4:	781c      	ldrb	r4, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f6:	0025      	movs	r5, r4
     6f8:	4395      	bics	r5, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fa:	701d      	strb	r5, [r3, #0]
			gpio_set_pin_level(connector.pinsOutput[i],false);
     6fc:	7c03      	ldrb	r3, [r0, #16]
     6fe:	18c3      	adds	r3, r0, r3
     700:	7a1b      	ldrb	r3, [r3, #8]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     702:	000d      	movs	r5, r1
     704:	401d      	ands	r5, r3
     706:	46a8      	mov	r8, r5
     708:	0015      	movs	r5, r2
     70a:	4644      	mov	r4, r8
     70c:	40a5      	lsls	r5, r4
     70e:	115b      	asrs	r3, r3, #5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     710:	01db      	lsls	r3, r3, #7
     712:	24c0      	movs	r4, #192	; 0xc0
     714:	05e4      	lsls	r4, r4, #23
     716:	46a1      	mov	r9, r4
     718:	444b      	add	r3, r9
     71a:	615d      	str	r5, [r3, #20]
		for (i = 0; i < 8; i++)
     71c:	7c03      	ldrb	r3, [r0, #16]
     71e:	3301      	adds	r3, #1
     720:	b2db      	uxtb	r3, r3
     722:	7403      	strb	r3, [r0, #16]
     724:	2b07      	cmp	r3, #7
     726:	dc00      	bgt.n	72a <_ZN25PinCodding_SAMD21Xplained4InitEv+0x12a>
     728:	e77c      	b.n	624 <_ZN25PinCodding_SAMD21Xplained4InitEv+0x24>
			
		}
		return	i>=8;
}
     72a:	2001      	movs	r0, #1
     72c:	b003      	add	sp, #12
     72e:	bc3c      	pop	{r2, r3, r4, r5}
     730:	4690      	mov	r8, r2
     732:	4699      	mov	r9, r3
     734:	46a2      	mov	sl, r4
     736:	46ab      	mov	fp, r5
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	40020000 	.word	0x40020000
     740:	2000001c 	.word	0x2000001c
     744:	41004400 	.word	0x41004400
     748:	c0020000 	.word	0xc0020000
     74c:	41004440 	.word	0x41004440

00000750 <_GLOBAL__sub_I_ext2Inputs>:


     750:	b510      	push	{r4, lr}
     752:	4a03      	ldr	r2, [pc, #12]	; (760 <_GLOBAL__sub_I_ext2Inputs+0x10>)
     754:	4903      	ldr	r1, [pc, #12]	; (764 <_GLOBAL__sub_I_ext2Inputs+0x14>)
     756:	4804      	ldr	r0, [pc, #16]	; (768 <_GLOBAL__sub_I_ext2Inputs+0x18>)
     758:	4b04      	ldr	r3, [pc, #16]	; (76c <_GLOBAL__sub_I_ext2Inputs+0x1c>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	20000000 	.word	0x20000000
     764:	000005fd 	.word	0x000005fd
     768:	200004ec 	.word	0x200004ec
     76c:	00003bed 	.word	0x00003bed

00000770 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     770:	b510      	push	{r4, lr}
	system_init();
     772:	4b02      	ldr	r3, [pc, #8]	; (77c <atmel_start_init+0xc>)
     774:	4798      	blx	r3
	usb_init();
     776:	4b02      	ldr	r3, [pc, #8]	; (780 <atmel_start_init+0x10>)
     778:	4798      	blx	r3
}
     77a:	bd10      	pop	{r4, pc}
     77c:	00000851 	.word	0x00000851
     780:	00002a39 	.word	0x00002a39

00000784 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46c6      	mov	lr, r8
     788:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     78a:	24c0      	movs	r4, #192	; 0xc0
     78c:	05e4      	lsls	r4, r4, #23
     78e:	2280      	movs	r2, #128	; 0x80
     790:	0452      	lsls	r2, r2, #17
     792:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     794:	4b1a      	ldr	r3, [pc, #104]	; (800 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     796:	2780      	movs	r7, #128	; 0x80
     798:	05ff      	lsls	r7, r7, #23
     79a:	629f      	str	r7, [r3, #40]	; 0x28
     79c:	4919      	ldr	r1, [pc, #100]	; (804 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     79e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7a0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7a2:	2058      	movs	r0, #88	; 0x58
     7a4:	5c19      	ldrb	r1, [r3, r0]
     7a6:	2204      	movs	r2, #4
     7a8:	4690      	mov	r8, r2
     7aa:	4391      	bics	r1, r2
     7ac:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ae:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b0:	2601      	movs	r6, #1
     7b2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7b4:	2501      	movs	r5, #1
     7b6:	4329      	orrs	r1, r5
     7b8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ba:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7bc:	381c      	subs	r0, #28
     7be:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7c0:	320b      	adds	r2, #11
     7c2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     7c4:	3a09      	subs	r2, #9
     7c6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7c8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ca:	2180      	movs	r1, #128	; 0x80
     7cc:	0489      	lsls	r1, r1, #18
     7ce:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d0:	629f      	str	r7, [r3, #40]	; 0x28
     7d2:	4f0d      	ldr	r7, [pc, #52]	; (808 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     7d4:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7d6:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7d8:	2159      	movs	r1, #89	; 0x59
     7da:	5c5c      	ldrb	r4, [r3, r1]
     7dc:	4642      	mov	r2, r8
     7de:	4394      	bics	r4, r2
     7e0:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e4:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e6:	432a      	orrs	r2, r5
     7e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ea:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ec:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ee:	394a      	subs	r1, #74	; 0x4a
     7f0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     7f2:	3151      	adds	r1, #81	; 0x51
     7f4:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7f6:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     7f8:	bc04      	pop	{r2}
     7fa:	4690      	mov	r8, r2
     7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	41004400 	.word	0x41004400
     804:	c0000100 	.word	0xc0000100
     808:	c0000200 	.word	0xc0000200

0000080c <USB_DEVICE_INSTANCE_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     80c:	4b06      	ldr	r3, [pc, #24]	; (828 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     80e:	69da      	ldr	r2, [r3, #28]
     810:	2120      	movs	r1, #32
     812:	430a      	orrs	r2, r1
     814:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     816:	695a      	ldr	r2, [r3, #20]
     818:	3120      	adds	r1, #32
     81a:	430a      	orrs	r2, r1
     81c:	615a      	str	r2, [r3, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     81e:	4a03      	ldr	r2, [pc, #12]	; (82c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     820:	4b03      	ldr	r3, [pc, #12]	; (830 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     822:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     824:	4770      	bx	lr
     826:	46c0      	nop			; (mov r8, r8)
     828:	40000400 	.word	0x40000400
     82c:	00004106 	.word	0x00004106
     830:	40000c00 	.word	0x40000c00

00000834 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     834:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     836:	4b03      	ldr	r3, [pc, #12]	; (844 <USB_DEVICE_INSTANCE_init+0x10>)
     838:	4798      	blx	r3
	usb_d_init();
     83a:	4b03      	ldr	r3, [pc, #12]	; (848 <USB_DEVICE_INSTANCE_init+0x14>)
     83c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     83e:	4b03      	ldr	r3, [pc, #12]	; (84c <USB_DEVICE_INSTANCE_init+0x18>)
     840:	4798      	blx	r3
}
     842:	bd10      	pop	{r4, pc}
     844:	0000080d 	.word	0x0000080d
     848:	00000e55 	.word	0x00000e55
     84c:	00000785 	.word	0x00000785

00000850 <system_init>:

void system_init(void)
{
     850:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     852:	4b0a      	ldr	r3, [pc, #40]	; (87c <system_init+0x2c>)
     854:	4798      	blx	r3
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     856:	4a0a      	ldr	r2, [pc, #40]	; (880 <system_init+0x30>)
     858:	6a11      	ldr	r1, [r2, #32]
     85a:	2380      	movs	r3, #128	; 0x80
     85c:	011b      	lsls	r3, r3, #4
     85e:	430b      	orrs	r3, r1
     860:	6213      	str	r3, [r2, #32]
     862:	4a08      	ldr	r2, [pc, #32]	; (884 <system_init+0x34>)
     864:	4b08      	ldr	r3, [pc, #32]	; (888 <system_init+0x38>)
     866:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     868:	4b08      	ldr	r3, [pc, #32]	; (88c <system_init+0x3c>)
     86a:	4798      	blx	r3
     86c:	0002      	movs	r2, r0
     86e:	4908      	ldr	r1, [pc, #32]	; (890 <system_init+0x40>)
     870:	4808      	ldr	r0, [pc, #32]	; (894 <system_init+0x44>)
     872:	4b09      	ldr	r3, [pc, #36]	; (898 <system_init+0x48>)
     874:	4798      	blx	r3
	init_mcu();

	TIMER_0_init();

	USB_DEVICE_INSTANCE_init();
     876:	4b09      	ldr	r3, [pc, #36]	; (89c <system_init+0x4c>)
     878:	4798      	blx	r3
}
     87a:	bd10      	pop	{r4, pc}
     87c:	00001309 	.word	0x00001309
     880:	40000400 	.word	0x40000400
     884:	0000431b 	.word	0x0000431b
     888:	40000c00 	.word	0x40000c00
     88c:	00001633 	.word	0x00001633
     890:	42002c00 	.word	0x42002c00
     894:	20000a8c 	.word	0x20000a8c
     898:	000009d9 	.word	0x000009d9
     89c:	00000835 	.word	0x00000835

000008a0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8a0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     8a4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     8a6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     8a8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     8ac:	4770      	bx	lr

000008ae <atomic_leave_critical>:
     8ae:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     8b2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     8b4:	f383 8810 	msr	PRIMASK, r3
}
     8b8:	4770      	bx	lr
	...

000008bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     8bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <delay_ms+0x14>)
     8c0:	681c      	ldr	r4, [r3, #0]
     8c2:	4b04      	ldr	r3, [pc, #16]	; (8d4 <delay_ms+0x18>)
     8c4:	4798      	blx	r3
     8c6:	0001      	movs	r1, r0
     8c8:	0020      	movs	r0, r4
     8ca:	4b03      	ldr	r3, [pc, #12]	; (8d8 <delay_ms+0x1c>)
     8cc:	4798      	blx	r3
}
     8ce:	bd10      	pop	{r4, pc}
     8d0:	20000500 	.word	0x20000500
     8d4:	000012e5 	.word	0x000012e5
     8d8:	00001301 	.word	0x00001301

000008dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8de:	46ce      	mov	lr, r9
     8e0:	4647      	mov	r7, r8
     8e2:	b580      	push	{r7, lr}
     8e4:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     8e6:	6803      	ldr	r3, [r0, #0]
     8e8:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     8ea:	2b00      	cmp	r3, #0
     8ec:	d005      	beq.n	8fa <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     8ee:	688e      	ldr	r6, [r1, #8]
     8f0:	001c      	movs	r4, r3
     8f2:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8f4:	2701      	movs	r7, #1
     8f6:	1abf      	subs	r7, r7, r2
     8f8:	e00d      	b.n	916 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     8fa:	4b12      	ldr	r3, [pc, #72]	; (944 <timer_add_timer_task+0x68>)
     8fc:	4798      	blx	r3
		return;
     8fe:	e018      	b.n	932 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     900:	18fb      	adds	r3, r7, r3
     902:	68a0      	ldr	r0, [r4, #8]
     904:	4680      	mov	r8, r0
     906:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     908:	42b3      	cmp	r3, r6
     90a:	d20c      	bcs.n	926 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     90c:	6823      	ldr	r3, [r4, #0]
     90e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     910:	2b00      	cmp	r3, #0
     912:	d00b      	beq.n	92c <timer_add_timer_task+0x50>
     914:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     916:	6863      	ldr	r3, [r4, #4]
     918:	4293      	cmp	r3, r2
     91a:	d8f1      	bhi.n	900 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     91c:	68a0      	ldr	r0, [r4, #8]
     91e:	4680      	mov	r8, r0
     920:	4443      	add	r3, r8
     922:	1a9b      	subs	r3, r3, r2
     924:	e7f0      	b.n	908 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     926:	45a4      	cmp	ip, r4
     928:	d007      	beq.n	93a <timer_add_timer_task+0x5e>
     92a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     92c:	0020      	movs	r0, r4
     92e:	4b06      	ldr	r3, [pc, #24]	; (948 <timer_add_timer_task+0x6c>)
     930:	4798      	blx	r3
	}
}
     932:	bc0c      	pop	{r2, r3}
     934:	4690      	mov	r8, r2
     936:	4699      	mov	r9, r3
     938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     93a:	4648      	mov	r0, r9
     93c:	4b01      	ldr	r3, [pc, #4]	; (944 <timer_add_timer_task+0x68>)
     93e:	4798      	blx	r3
     940:	e7f7      	b.n	932 <timer_add_timer_task+0x56>
     942:	46c0      	nop			; (mov r8, r8)
     944:	00001205 	.word	0x00001205
     948:	00001231 	.word	0x00001231

0000094c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     94c:	b5f0      	push	{r4, r5, r6, r7, lr}
     94e:	46c6      	mov	lr, r8
     950:	b500      	push	{lr}
     952:	b082      	sub	sp, #8
     954:	0007      	movs	r7, r0
	return (void *)list->head;
     956:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     958:	6903      	ldr	r3, [r0, #16]
     95a:	3301      	adds	r3, #1
     95c:	4698      	mov	r8, r3
     95e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     960:	7e03      	ldrb	r3, [r0, #24]
     962:	07db      	lsls	r3, r3, #31
     964:	d411      	bmi.n	98a <timer_process_counted+0x3e>
     966:	7e03      	ldrb	r3, [r0, #24]
     968:	079b      	lsls	r3, r3, #30
     96a:	d40e      	bmi.n	98a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     96c:	2c00      	cmp	r4, #0
     96e:	d010      	beq.n	992 <timer_process_counted+0x46>
     970:	4643      	mov	r3, r8
     972:	6862      	ldr	r2, [r4, #4]
     974:	1a9b      	subs	r3, r3, r2
     976:	68a2      	ldr	r2, [r4, #8]
     978:	4293      	cmp	r3, r2
     97a:	d30a      	bcc.n	992 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     97c:	2314      	movs	r3, #20
     97e:	469c      	mov	ip, r3
     980:	4484      	add	ip, r0
     982:	4663      	mov	r3, ip
     984:	9301      	str	r3, [sp, #4]
     986:	4e12      	ldr	r6, [pc, #72]	; (9d0 <timer_process_counted+0x84>)
     988:	e014      	b.n	9b4 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     98a:	7e3b      	ldrb	r3, [r7, #24]
     98c:	2202      	movs	r2, #2
     98e:	4313      	orrs	r3, r2
     990:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     992:	b002      	add	sp, #8
     994:	bc04      	pop	{r2}
     996:	4690      	mov	r8, r2
     998:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99a:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     99c:	68e3      	ldr	r3, [r4, #12]
     99e:	0020      	movs	r0, r4
     9a0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     9a2:	2d00      	cmp	r5, #0
     9a4:	d0f5      	beq.n	992 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     9a6:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     9a8:	4643      	mov	r3, r8
     9aa:	686a      	ldr	r2, [r5, #4]
     9ac:	1a9b      	subs	r3, r3, r2
     9ae:	68aa      	ldr	r2, [r5, #8]
     9b0:	4293      	cmp	r3, r2
     9b2:	d3ee      	bcc.n	992 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     9b4:	9801      	ldr	r0, [sp, #4]
     9b6:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     9b8:	7c23      	ldrb	r3, [r4, #16]
     9ba:	2b01      	cmp	r3, #1
     9bc:	d1ed      	bne.n	99a <timer_process_counted+0x4e>
			tmp->time_label = time;
     9be:	4643      	mov	r3, r8
     9c0:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9c2:	4642      	mov	r2, r8
     9c4:	0021      	movs	r1, r4
     9c6:	9801      	ldr	r0, [sp, #4]
     9c8:	4b02      	ldr	r3, [pc, #8]	; (9d4 <timer_process_counted+0x88>)
     9ca:	4798      	blx	r3
     9cc:	e7e5      	b.n	99a <timer_process_counted+0x4e>
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	00001279 	.word	0x00001279
     9d4:	000008dd 	.word	0x000008dd

000009d8 <timer_init>:
{
     9d8:	b570      	push	{r4, r5, r6, lr}
     9da:	0005      	movs	r5, r0
     9dc:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     9de:	2800      	cmp	r0, #0
     9e0:	d011      	beq.n	a06 <timer_init+0x2e>
     9e2:	0008      	movs	r0, r1
     9e4:	1e43      	subs	r3, r0, #1
     9e6:	4198      	sbcs	r0, r3
     9e8:	b2c0      	uxtb	r0, r0
     9ea:	223b      	movs	r2, #59	; 0x3b
     9ec:	4907      	ldr	r1, [pc, #28]	; (a0c <timer_init+0x34>)
     9ee:	4b08      	ldr	r3, [pc, #32]	; (a10 <timer_init+0x38>)
     9f0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     9f2:	0021      	movs	r1, r4
     9f4:	0028      	movs	r0, r5
     9f6:	4b07      	ldr	r3, [pc, #28]	; (a14 <timer_init+0x3c>)
     9f8:	4798      	blx	r3
	descr->time                           = 0;
     9fa:	2300      	movs	r3, #0
     9fc:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     9fe:	4b06      	ldr	r3, [pc, #24]	; (a18 <timer_init+0x40>)
     a00:	602b      	str	r3, [r5, #0]
}
     a02:	2000      	movs	r0, #0
     a04:	bd70      	pop	{r4, r5, r6, pc}
     a06:	2000      	movs	r0, #0
     a08:	e7ef      	b.n	9ea <timer_init+0x12>
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	0000414c 	.word	0x0000414c
     a10:	000011d9 	.word	0x000011d9
     a14:	000014fd 	.word	0x000014fd
     a18:	0000094d 	.word	0x0000094d

00000a1c <timer_start>:
{
     a1c:	b510      	push	{r4, lr}
     a1e:	0004      	movs	r4, r0
	ASSERT(descr);
     a20:	1e43      	subs	r3, r0, #1
     a22:	4198      	sbcs	r0, r3
     a24:	b2c0      	uxtb	r0, r0
     a26:	2253      	movs	r2, #83	; 0x53
     a28:	4907      	ldr	r1, [pc, #28]	; (a48 <timer_start+0x2c>)
     a2a:	4b08      	ldr	r3, [pc, #32]	; (a4c <timer_start+0x30>)
     a2c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     a2e:	0020      	movs	r0, r4
     a30:	4b07      	ldr	r3, [pc, #28]	; (a50 <timer_start+0x34>)
     a32:	4798      	blx	r3
     a34:	2800      	cmp	r0, #0
     a36:	d104      	bne.n	a42 <timer_start+0x26>
	_timer_start(&descr->device);
     a38:	0020      	movs	r0, r4
     a3a:	4b06      	ldr	r3, [pc, #24]	; (a54 <timer_start+0x38>)
     a3c:	4798      	blx	r3
	return ERR_NONE;
     a3e:	2000      	movs	r0, #0
}
     a40:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a42:	2011      	movs	r0, #17
     a44:	4240      	negs	r0, r0
     a46:	e7fb      	b.n	a40 <timer_start+0x24>
     a48:	0000414c 	.word	0x0000414c
     a4c:	000011d9 	.word	0x000011d9
     a50:	00001629 	.word	0x00001629
     a54:	00001611 	.word	0x00001611

00000a58 <timer_stop>:
{
     a58:	b510      	push	{r4, lr}
     a5a:	0004      	movs	r4, r0
	ASSERT(descr);
     a5c:	1e43      	subs	r3, r0, #1
     a5e:	4198      	sbcs	r0, r3
     a60:	b2c0      	uxtb	r0, r0
     a62:	2261      	movs	r2, #97	; 0x61
     a64:	4907      	ldr	r1, [pc, #28]	; (a84 <timer_stop+0x2c>)
     a66:	4b08      	ldr	r3, [pc, #32]	; (a88 <timer_stop+0x30>)
     a68:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     a6a:	0020      	movs	r0, r4
     a6c:	4b07      	ldr	r3, [pc, #28]	; (a8c <timer_stop+0x34>)
     a6e:	4798      	blx	r3
     a70:	2800      	cmp	r0, #0
     a72:	d004      	beq.n	a7e <timer_stop+0x26>
	_timer_stop(&descr->device);
     a74:	0020      	movs	r0, r4
     a76:	4b06      	ldr	r3, [pc, #24]	; (a90 <timer_stop+0x38>)
     a78:	4798      	blx	r3
	return ERR_NONE;
     a7a:	2000      	movs	r0, #0
}
     a7c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a7e:	2011      	movs	r0, #17
     a80:	4240      	negs	r0, r0
     a82:	e7fb      	b.n	a7c <timer_stop+0x24>
     a84:	0000414c 	.word	0x0000414c
     a88:	000011d9 	.word	0x000011d9
     a8c:	00001629 	.word	0x00001629
     a90:	0000161d 	.word	0x0000161d

00000a94 <timer_add_task>:
{
     a94:	b570      	push	{r4, r5, r6, lr}
     a96:	b082      	sub	sp, #8
     a98:	0004      	movs	r4, r0
     a9a:	000d      	movs	r5, r1
	ASSERT(descr && task);
     a9c:	2800      	cmp	r0, #0
     a9e:	d024      	beq.n	aea <timer_add_task+0x56>
     aa0:	0008      	movs	r0, r1
     aa2:	1e43      	subs	r3, r0, #1
     aa4:	4198      	sbcs	r0, r3
     aa6:	b2c0      	uxtb	r0, r0
     aa8:	227a      	movs	r2, #122	; 0x7a
     aaa:	491e      	ldr	r1, [pc, #120]	; (b24 <timer_add_task+0x90>)
     aac:	4b1e      	ldr	r3, [pc, #120]	; (b28 <timer_add_task+0x94>)
     aae:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     ab0:	7e23      	ldrb	r3, [r4, #24]
     ab2:	2201      	movs	r2, #1
     ab4:	4313      	orrs	r3, r2
     ab6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     ab8:	0026      	movs	r6, r4
     aba:	3614      	adds	r6, #20
     abc:	0029      	movs	r1, r5
     abe:	0030      	movs	r0, r6
     ac0:	4b1a      	ldr	r3, [pc, #104]	; (b2c <timer_add_task+0x98>)
     ac2:	4798      	blx	r3
     ac4:	2800      	cmp	r0, #0
     ac6:	d112      	bne.n	aee <timer_add_task+0x5a>
	task->time_label = descr->time;
     ac8:	6923      	ldr	r3, [r4, #16]
     aca:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     acc:	6922      	ldr	r2, [r4, #16]
     ace:	0029      	movs	r1, r5
     ad0:	0030      	movs	r0, r6
     ad2:	4b17      	ldr	r3, [pc, #92]	; (b30 <timer_add_task+0x9c>)
     ad4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     ad6:	7e23      	ldrb	r3, [r4, #24]
     ad8:	2201      	movs	r2, #1
     ada:	4393      	bics	r3, r2
     adc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     ade:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     ae0:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     ae2:	079b      	lsls	r3, r3, #30
     ae4:	d40f      	bmi.n	b06 <timer_add_task+0x72>
}
     ae6:	b002      	add	sp, #8
     ae8:	bd70      	pop	{r4, r5, r6, pc}
     aea:	2000      	movs	r0, #0
     aec:	e7dc      	b.n	aa8 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     aee:	7e23      	ldrb	r3, [r4, #24]
     af0:	2201      	movs	r2, #1
     af2:	4393      	bics	r3, r2
     af4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     af6:	327e      	adds	r2, #126	; 0x7e
     af8:	490a      	ldr	r1, [pc, #40]	; (b24 <timer_add_task+0x90>)
     afa:	2000      	movs	r0, #0
     afc:	4b0a      	ldr	r3, [pc, #40]	; (b28 <timer_add_task+0x94>)
     afe:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     b00:	2012      	movs	r0, #18
     b02:	4240      	negs	r0, r0
     b04:	e7ef      	b.n	ae6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     b06:	a801      	add	r0, sp, #4
     b08:	4b0a      	ldr	r3, [pc, #40]	; (b34 <timer_add_task+0xa0>)
     b0a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     b0c:	7e23      	ldrb	r3, [r4, #24]
     b0e:	2202      	movs	r2, #2
     b10:	4393      	bics	r3, r2
     b12:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     b14:	0020      	movs	r0, r4
     b16:	4b08      	ldr	r3, [pc, #32]	; (b38 <timer_add_task+0xa4>)
     b18:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     b1a:	a801      	add	r0, sp, #4
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <timer_add_task+0xa8>)
     b1e:	4798      	blx	r3
	return ERR_NONE;
     b20:	2000      	movs	r0, #0
     b22:	e7e0      	b.n	ae6 <timer_add_task+0x52>
     b24:	0000414c 	.word	0x0000414c
     b28:	000011d9 	.word	0x000011d9
     b2c:	000011e1 	.word	0x000011e1
     b30:	000008dd 	.word	0x000008dd
     b34:	000008a1 	.word	0x000008a1
     b38:	00001639 	.word	0x00001639
     b3c:	000008af 	.word	0x000008af

00000b40 <timer_remove_task>:
{
     b40:	b570      	push	{r4, r5, r6, lr}
     b42:	b082      	sub	sp, #8
     b44:	0004      	movs	r4, r0
     b46:	000d      	movs	r5, r1
	ASSERT(descr && task);
     b48:	2800      	cmp	r0, #0
     b4a:	d021      	beq.n	b90 <timer_remove_task+0x50>
     b4c:	0008      	movs	r0, r1
     b4e:	1e43      	subs	r3, r0, #1
     b50:	4198      	sbcs	r0, r3
     b52:	b2c0      	uxtb	r0, r0
     b54:	2295      	movs	r2, #149	; 0x95
     b56:	491c      	ldr	r1, [pc, #112]	; (bc8 <timer_remove_task+0x88>)
     b58:	4b1c      	ldr	r3, [pc, #112]	; (bcc <timer_remove_task+0x8c>)
     b5a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     b5c:	7e23      	ldrb	r3, [r4, #24]
     b5e:	2201      	movs	r2, #1
     b60:	4313      	orrs	r3, r2
     b62:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
     b64:	0026      	movs	r6, r4
     b66:	3614      	adds	r6, #20
     b68:	0029      	movs	r1, r5
     b6a:	0030      	movs	r0, r6
     b6c:	4b18      	ldr	r3, [pc, #96]	; (bd0 <timer_remove_task+0x90>)
     b6e:	4798      	blx	r3
     b70:	2800      	cmp	r0, #0
     b72:	d00f      	beq.n	b94 <timer_remove_task+0x54>
	list_delete_element(&descr->tasks, task);
     b74:	0029      	movs	r1, r5
     b76:	0030      	movs	r0, r6
     b78:	4b16      	ldr	r3, [pc, #88]	; (bd4 <timer_remove_task+0x94>)
     b7a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     b7c:	7e23      	ldrb	r3, [r4, #24]
     b7e:	2201      	movs	r2, #1
     b80:	4393      	bics	r3, r2
     b82:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     b84:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     b86:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     b88:	079b      	lsls	r3, r3, #30
     b8a:	d40e      	bmi.n	baa <timer_remove_task+0x6a>
}
     b8c:	b002      	add	sp, #8
     b8e:	bd70      	pop	{r4, r5, r6, pc}
     b90:	2000      	movs	r0, #0
     b92:	e7df      	b.n	b54 <timer_remove_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     b94:	7e23      	ldrb	r3, [r4, #24]
     b96:	2201      	movs	r2, #1
     b98:	4393      	bics	r3, r2
     b9a:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     b9c:	3299      	adds	r2, #153	; 0x99
     b9e:	490a      	ldr	r1, [pc, #40]	; (bc8 <timer_remove_task+0x88>)
     ba0:	4b0a      	ldr	r3, [pc, #40]	; (bcc <timer_remove_task+0x8c>)
     ba2:	4798      	blx	r3
		return ERR_NOT_FOUND;
     ba4:	200a      	movs	r0, #10
     ba6:	4240      	negs	r0, r0
     ba8:	e7f0      	b.n	b8c <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
     baa:	a801      	add	r0, sp, #4
     bac:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <timer_remove_task+0x98>)
     bae:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     bb0:	7e23      	ldrb	r3, [r4, #24]
     bb2:	2202      	movs	r2, #2
     bb4:	4393      	bics	r3, r2
     bb6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     bb8:	0020      	movs	r0, r4
     bba:	4b08      	ldr	r3, [pc, #32]	; (bdc <timer_remove_task+0x9c>)
     bbc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     bbe:	a801      	add	r0, sp, #4
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <timer_remove_task+0xa0>)
     bc2:	4798      	blx	r3
	return ERR_NONE;
     bc4:	2000      	movs	r0, #0
     bc6:	e7e1      	b.n	b8c <timer_remove_task+0x4c>
     bc8:	0000414c 	.word	0x0000414c
     bcc:	000011d9 	.word	0x000011d9
     bd0:	000011e1 	.word	0x000011e1
     bd4:	00001287 	.word	0x00001287
     bd8:	000008a1 	.word	0x000008a1
     bdc:	00001639 	.word	0x00001639
     be0:	000008af 	.word	0x000008af

00000be4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     be8:	4b0e      	ldr	r3, [pc, #56]	; (c24 <_usb_d_find_ep+0x40>)
     bea:	785a      	ldrb	r2, [r3, #1]
     bec:	4290      	cmp	r0, r2
     bee:	d017      	beq.n	c20 <_usb_d_find_ep+0x3c>
     bf0:	2300      	movs	r3, #0
     bf2:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     bf4:	4f0b      	ldr	r7, [pc, #44]	; (c24 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     bf6:	260f      	movs	r6, #15
     bf8:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     bfa:	003d      	movs	r5, r7
     bfc:	e008      	b.n	c10 <_usb_d_find_ep+0x2c>
     bfe:	3001      	adds	r0, #1
     c00:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c02:	2804      	cmp	r0, #4
     c04:	d00a      	beq.n	c1c <_usb_d_find_ep+0x38>
     c06:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     c08:	18ea      	adds	r2, r5, r3
     c0a:	7852      	ldrb	r2, [r2, #1]
     c0c:	42a2      	cmp	r2, r4
     c0e:	d006      	beq.n	c1e <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     c10:	5dd9      	ldrb	r1, [r3, r7]
     c12:	2900      	cmp	r1, #0
     c14:	d1f3      	bne.n	bfe <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     c16:	4296      	cmp	r6, r2
     c18:	d1f1      	bne.n	bfe <_usb_d_find_ep+0x1a>
     c1a:	e000      	b.n	c1e <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     c1c:	3805      	subs	r0, #5
}
     c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c20:	2000      	movs	r0, #0
     c22:	e7fc      	b.n	c1e <_usb_d_find_ep+0x3a>
     c24:	20000504 	.word	0x20000504

00000c28 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     c28:	2000      	movs	r0, #0
     c2a:	4770      	bx	lr

00000c2c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	0004      	movs	r4, r0
     c30:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     c32:	4b0a      	ldr	r3, [pc, #40]	; (c5c <usb_d_cb_trans_more+0x30>)
     c34:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     c36:	0142      	lsls	r2, r0, #5
     c38:	4b09      	ldr	r3, [pc, #36]	; (c60 <usb_d_cb_trans_more+0x34>)
     c3a:	189b      	adds	r3, r3, r2
     c3c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     c3e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     c40:	2a03      	cmp	r2, #3
     c42:	d001      	beq.n	c48 <usb_d_cb_trans_more+0x1c>
}
     c44:	0018      	movs	r0, r3
     c46:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     c48:	0140      	lsls	r0, r0, #5
     c4a:	4b05      	ldr	r3, [pc, #20]	; (c60 <usb_d_cb_trans_more+0x34>)
     c4c:	1818      	adds	r0, r3, r0
     c4e:	6983      	ldr	r3, [r0, #24]
     c50:	0029      	movs	r1, r5
     c52:	0020      	movs	r0, r4
     c54:	4798      	blx	r3
     c56:	0003      	movs	r3, r0
     c58:	e7f4      	b.n	c44 <usb_d_cb_trans_more+0x18>
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	00000be5 	.word	0x00000be5
     c60:	20000504 	.word	0x20000504

00000c64 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     c64:	b5f0      	push	{r4, r5, r6, r7, lr}
     c66:	b085      	sub	sp, #20
     c68:	0005      	movs	r5, r0
     c6a:	000f      	movs	r7, r1
     c6c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     c6e:	4b51      	ldr	r3, [pc, #324]	; (db4 <_usb_d_cb_trans_done+0x150>)
     c70:	4798      	blx	r3
     c72:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     c74:	2f00      	cmp	r7, #0
     c76:	d162      	bne.n	d3e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     c78:	4b4f      	ldr	r3, [pc, #316]	; (db8 <_usb_d_cb_trans_done+0x154>)
     c7a:	0142      	lsls	r2, r0, #5
     c7c:	1899      	adds	r1, r3, r2
     c7e:	2000      	movs	r0, #0
     c80:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     c82:	5cd3      	ldrb	r3, [r2, r3]
     c84:	2b00      	cmp	r3, #0
     c86:	d00e      	beq.n	ca6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     c88:	0162      	lsls	r2, r4, #5
     c8a:	4b4b      	ldr	r3, [pc, #300]	; (db8 <_usb_d_cb_trans_done+0x154>)
     c8c:	189b      	adds	r3, r3, r2
     c8e:	2201      	movs	r2, #1
     c90:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     c92:	0164      	lsls	r4, r4, #5
     c94:	4b48      	ldr	r3, [pc, #288]	; (db8 <_usb_d_cb_trans_done+0x154>)
     c96:	191c      	adds	r4, r3, r4
     c98:	78e1      	ldrb	r1, [r4, #3]
     c9a:	69e3      	ldr	r3, [r4, #28]
     c9c:	0032      	movs	r2, r6
     c9e:	0028      	movs	r0, r5
     ca0:	4798      	blx	r3
}
     ca2:	b005      	add	sp, #20
     ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     ca6:	788b      	ldrb	r3, [r1, #2]
     ca8:	2b03      	cmp	r3, #3
     caa:	d00c      	beq.n	cc6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     cac:	4b42      	ldr	r3, [pc, #264]	; (db8 <_usb_d_cb_trans_done+0x154>)
     cae:	0162      	lsls	r2, r4, #5
     cb0:	320c      	adds	r2, #12
     cb2:	189a      	adds	r2, r3, r2
     cb4:	0164      	lsls	r4, r4, #5
     cb6:	191c      	adds	r4, r3, r4
     cb8:	7860      	ldrb	r0, [r4, #1]
     cba:	2100      	movs	r1, #0
     cbc:	69e3      	ldr	r3, [r4, #28]
     cbe:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     cc0:	2302      	movs	r3, #2
     cc2:	70a3      	strb	r3, [r4, #2]
     cc4:	e7ed      	b.n	ca2 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     cc6:	4a3c      	ldr	r2, [pc, #240]	; (db8 <_usb_d_cb_trans_done+0x154>)
     cc8:	000b      	movs	r3, r1
     cca:	250c      	movs	r5, #12
     ccc:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     cce:	0161      	lsls	r1, r4, #5
     cd0:	310c      	adds	r1, #12
     cd2:	1852      	adds	r2, r2, r1
     cd4:	7858      	ldrb	r0, [r3, #1]
     cd6:	69db      	ldr	r3, [r3, #28]
     cd8:	2101      	movs	r1, #1
     cda:	4798      	blx	r3
		if (err) {
     cdc:	2800      	cmp	r0, #0
     cde:	d017      	beq.n	d10 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     ce0:	0162      	lsls	r2, r4, #5
     ce2:	4b35      	ldr	r3, [pc, #212]	; (db8 <_usb_d_cb_trans_done+0x154>)
     ce4:	189b      	adds	r3, r3, r2
     ce6:	2205      	movs	r2, #5
     ce8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     cea:	3a03      	subs	r2, #3
     cec:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     cee:	2d00      	cmp	r5, #0
     cf0:	db09      	blt.n	d06 <_usb_d_cb_trans_done+0xa2>
     cf2:	0164      	lsls	r4, r4, #5
     cf4:	4b30      	ldr	r3, [pc, #192]	; (db8 <_usb_d_cb_trans_done+0x154>)
     cf6:	191c      	adds	r4, r3, r4
     cf8:	7860      	ldrb	r0, [r4, #1]
     cfa:	2380      	movs	r3, #128	; 0x80
     cfc:	4318      	orrs	r0, r3
     cfe:	2101      	movs	r1, #1
     d00:	4b2e      	ldr	r3, [pc, #184]	; (dbc <_usb_d_cb_trans_done+0x158>)
     d02:	4798      	blx	r3
     d04:	e7cd      	b.n	ca2 <_usb_d_cb_trans_done+0x3e>
     d06:	0164      	lsls	r4, r4, #5
     d08:	4b2b      	ldr	r3, [pc, #172]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d0a:	191c      	adds	r4, r3, r4
     d0c:	7860      	ldrb	r0, [r4, #1]
     d0e:	e7f6      	b.n	cfe <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     d10:	0164      	lsls	r4, r4, #5
     d12:	4b29      	ldr	r3, [pc, #164]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d14:	191c      	adds	r4, r3, r4
     d16:	2304      	movs	r3, #4
     d18:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     d1a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     d1c:	2200      	movs	r2, #0
     d1e:	9201      	str	r2, [sp, #4]
     d20:	9202      	str	r2, [sp, #8]
     d22:	2d00      	cmp	r5, #0
     d24:	db08      	blt.n	d38 <_usb_d_cb_trans_done+0xd4>
     d26:	3280      	adds	r2, #128	; 0x80
     d28:	4313      	orrs	r3, r2
     d2a:	a801      	add	r0, sp, #4
     d2c:	7203      	strb	r3, [r0, #8]
     d2e:	2301      	movs	r3, #1
     d30:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     d32:	4b23      	ldr	r3, [pc, #140]	; (dc0 <_usb_d_cb_trans_done+0x15c>)
     d34:	4798      	blx	r3
     d36:	e7b4      	b.n	ca2 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     d38:	220f      	movs	r2, #15
     d3a:	4013      	ands	r3, r2
     d3c:	e7f5      	b.n	d2a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     d3e:	2f01      	cmp	r7, #1
     d40:	d00a      	beq.n	d58 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     d42:	2f02      	cmp	r7, #2
     d44:	d01d      	beq.n	d82 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     d46:	2f03      	cmp	r7, #3
     d48:	d02c      	beq.n	da4 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     d4a:	0142      	lsls	r2, r0, #5
     d4c:	4b1a      	ldr	r3, [pc, #104]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d4e:	189b      	adds	r3, r3, r2
     d50:	2206      	movs	r2, #6
     d52:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     d54:	70da      	strb	r2, [r3, #3]
     d56:	e79c      	b.n	c92 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     d58:	4b17      	ldr	r3, [pc, #92]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d5a:	0142      	lsls	r2, r0, #5
     d5c:	1899      	adds	r1, r3, r2
     d5e:	2002      	movs	r0, #2
     d60:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d62:	5cd3      	ldrb	r3, [r2, r3]
     d64:	2b00      	cmp	r3, #0
     d66:	d005      	beq.n	d74 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     d68:	0162      	lsls	r2, r4, #5
     d6a:	4b13      	ldr	r3, [pc, #76]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d6c:	189b      	adds	r3, r3, r2
     d6e:	2205      	movs	r2, #5
     d70:	709a      	strb	r2, [r3, #2]
     d72:	e78e      	b.n	c92 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d74:	2202      	movs	r2, #2
     d76:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     d78:	2100      	movs	r1, #0
     d7a:	0028      	movs	r0, r5
     d7c:	4b0f      	ldr	r3, [pc, #60]	; (dbc <_usb_d_cb_trans_done+0x158>)
     d7e:	4798      	blx	r3
     d80:	e787      	b.n	c92 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     d82:	4b0d      	ldr	r3, [pc, #52]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d84:	0142      	lsls	r2, r0, #5
     d86:	1899      	adds	r1, r3, r2
     d88:	2004      	movs	r0, #4
     d8a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d8c:	5cd3      	ldrb	r3, [r2, r3]
     d8e:	2b00      	cmp	r3, #0
     d90:	d005      	beq.n	d9e <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     d92:	0162      	lsls	r2, r4, #5
     d94:	4b08      	ldr	r3, [pc, #32]	; (db8 <_usb_d_cb_trans_done+0x154>)
     d96:	189b      	adds	r3, r3, r2
     d98:	2201      	movs	r2, #1
     d9a:	709a      	strb	r2, [r3, #2]
     d9c:	e779      	b.n	c92 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d9e:	2302      	movs	r3, #2
     da0:	708b      	strb	r3, [r1, #2]
			return;
     da2:	e77e      	b.n	ca2 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     da4:	0142      	lsls	r2, r0, #5
     da6:	4b04      	ldr	r3, [pc, #16]	; (db8 <_usb_d_cb_trans_done+0x154>)
     da8:	189b      	adds	r3, r3, r2
     daa:	2200      	movs	r2, #0
     dac:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     dae:	3205      	adds	r2, #5
     db0:	70da      	strb	r2, [r3, #3]
     db2:	e76e      	b.n	c92 <_usb_d_cb_trans_done+0x2e>
     db4:	00000be5 	.word	0x00000be5
     db8:	20000504 	.word	0x20000504
     dbc:	00002329 	.word	0x00002329
     dc0:	000024fd 	.word	0x000024fd

00000dc4 <usb_d_cb_trans_setup>:
{
     dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc6:	46c6      	mov	lr, r8
     dc8:	b500      	push	{lr}
     dca:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     dcc:	4b1d      	ldr	r3, [pc, #116]	; (e44 <usb_d_cb_trans_setup+0x80>)
     dce:	4798      	blx	r3
     dd0:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     dd2:	0145      	lsls	r5, r0, #5
     dd4:	350c      	adds	r5, #12
     dd6:	4b1c      	ldr	r3, [pc, #112]	; (e48 <usb_d_cb_trans_setup+0x84>)
     dd8:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     dda:	0029      	movs	r1, r5
     ddc:	0020      	movs	r0, r4
     dde:	4b1b      	ldr	r3, [pc, #108]	; (e4c <usb_d_cb_trans_setup+0x88>)
     de0:	4798      	blx	r3
	if (n != 8) {
     de2:	b2c0      	uxtb	r0, r0
     de4:	2808      	cmp	r0, #8
     de6:	d00a      	beq.n	dfe <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     de8:	2101      	movs	r1, #1
     dea:	0020      	movs	r0, r4
     dec:	4d18      	ldr	r5, [pc, #96]	; (e50 <usb_d_cb_trans_setup+0x8c>)
     dee:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     df0:	2080      	movs	r0, #128	; 0x80
     df2:	4320      	orrs	r0, r4
     df4:	2101      	movs	r1, #1
     df6:	47a8      	blx	r5
}
     df8:	bc04      	pop	{r2}
     dfa:	4690      	mov	r8, r2
     dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     dfe:	2100      	movs	r1, #0
     e00:	0020      	movs	r0, r4
     e02:	4b13      	ldr	r3, [pc, #76]	; (e50 <usb_d_cb_trans_setup+0x8c>)
     e04:	4698      	mov	r8, r3
     e06:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     e08:	2780      	movs	r7, #128	; 0x80
     e0a:	4327      	orrs	r7, r4
     e0c:	2100      	movs	r1, #0
     e0e:	0038      	movs	r0, r7
     e10:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     e12:	0172      	lsls	r2, r6, #5
     e14:	4b0c      	ldr	r3, [pc, #48]	; (e48 <usb_d_cb_trans_setup+0x84>)
     e16:	189b      	adds	r3, r3, r2
     e18:	2201      	movs	r2, #1
     e1a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     e1c:	695b      	ldr	r3, [r3, #20]
     e1e:	0029      	movs	r1, r5
     e20:	0020      	movs	r0, r4
     e22:	4798      	blx	r3
     e24:	2800      	cmp	r0, #0
     e26:	d1e7      	bne.n	df8 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     e28:	0176      	lsls	r6, r6, #5
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <usb_d_cb_trans_setup+0x84>)
     e2c:	199e      	adds	r6, r3, r6
     e2e:	2305      	movs	r3, #5
     e30:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e32:	2101      	movs	r1, #1
     e34:	0020      	movs	r0, r4
     e36:	4c06      	ldr	r4, [pc, #24]	; (e50 <usb_d_cb_trans_setup+0x8c>)
     e38:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     e3a:	2101      	movs	r1, #1
     e3c:	0038      	movs	r0, r7
     e3e:	47a0      	blx	r4
     e40:	e7da      	b.n	df8 <usb_d_cb_trans_setup+0x34>
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00000be5 	.word	0x00000be5
     e48:	20000504 	.word	0x20000504
     e4c:	0000248d 	.word	0x0000248d
     e50:	00002329 	.word	0x00002329

00000e54 <usb_d_init>:

int32_t usb_d_init(void)
{
     e54:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     e56:	4b10      	ldr	r3, [pc, #64]	; (e98 <usb_d_init+0x44>)
     e58:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     e5a:	2800      	cmp	r0, #0
     e5c:	db1b      	blt.n	e96 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     e5e:	4c0f      	ldr	r4, [pc, #60]	; (e9c <usb_d_init+0x48>)
     e60:	2280      	movs	r2, #128	; 0x80
     e62:	2100      	movs	r1, #0
     e64:	0020      	movs	r0, r4
     e66:	4b0e      	ldr	r3, [pc, #56]	; (ea0 <usb_d_init+0x4c>)
     e68:	4798      	blx	r3
     e6a:	0023      	movs	r3, r4
     e6c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     e6e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     e70:	4a0c      	ldr	r2, [pc, #48]	; (ea4 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     e72:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     e74:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     e76:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     e78:	61da      	str	r2, [r3, #28]
     e7a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e7c:	42a3      	cmp	r3, r4
     e7e:	d1f8      	bne.n	e72 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     e80:	4909      	ldr	r1, [pc, #36]	; (ea8 <usb_d_init+0x54>)
     e82:	2000      	movs	r0, #0
     e84:	4c09      	ldr	r4, [pc, #36]	; (eac <usb_d_init+0x58>)
     e86:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     e88:	4909      	ldr	r1, [pc, #36]	; (eb0 <usb_d_init+0x5c>)
     e8a:	2001      	movs	r0, #1
     e8c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     e8e:	4909      	ldr	r1, [pc, #36]	; (eb4 <usb_d_init+0x60>)
     e90:	2002      	movs	r0, #2
     e92:	47a0      	blx	r4
	return ERR_NONE;
     e94:	2000      	movs	r0, #0
}
     e96:	bd10      	pop	{r4, pc}
     e98:	00001cfd 	.word	0x00001cfd
     e9c:	20000504 	.word	0x20000504
     ea0:	00003df1 	.word	0x00003df1
     ea4:	00000c29 	.word	0x00000c29
     ea8:	00000dc5 	.word	0x00000dc5
     eac:	00002771 	.word	0x00002771
     eb0:	00000c2d 	.word	0x00000c2d
     eb4:	00000c65 	.word	0x00000c65

00000eb8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     eb8:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     eba:	4b01      	ldr	r3, [pc, #4]	; (ec0 <usb_d_register_callback+0x8>)
     ebc:	4798      	blx	r3
}
     ebe:	bd10      	pop	{r4, pc}
     ec0:	0000274d 	.word	0x0000274d

00000ec4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     ec4:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     ec6:	4b01      	ldr	r3, [pc, #4]	; (ecc <usb_d_enable+0x8>)
     ec8:	4798      	blx	r3
}
     eca:	bd10      	pop	{r4, pc}
     ecc:	00001ddd 	.word	0x00001ddd

00000ed0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     ed0:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     ed2:	4b01      	ldr	r3, [pc, #4]	; (ed8 <usb_d_attach+0x8>)
     ed4:	4798      	blx	r3
}
     ed6:	bd10      	pop	{r4, pc}
     ed8:	00001e2d 	.word	0x00001e2d

00000edc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     edc:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     ede:	4b01      	ldr	r3, [pc, #4]	; (ee4 <usb_d_set_address+0x8>)
     ee0:	4798      	blx	r3
}
     ee2:	bd10      	pop	{r4, pc}
     ee4:	00001e3d 	.word	0x00001e3d

00000ee8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eea:	0005      	movs	r5, r0
     eec:	000e      	movs	r6, r1
     eee:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     ef0:	4b0f      	ldr	r3, [pc, #60]	; (f30 <usb_d_ep_init+0x48>)
     ef2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     ef4:	2800      	cmp	r0, #0
     ef6:	da14      	bge.n	f22 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     ef8:	20ff      	movs	r0, #255	; 0xff
     efa:	4b0d      	ldr	r3, [pc, #52]	; (f30 <usb_d_ep_init+0x48>)
     efc:	4798      	blx	r3
     efe:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     f00:	db12      	blt.n	f28 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     f02:	003a      	movs	r2, r7
     f04:	0031      	movs	r1, r6
     f06:	0028      	movs	r0, r5
     f08:	4b0a      	ldr	r3, [pc, #40]	; (f34 <usb_d_ep_init+0x4c>)
     f0a:	4798      	blx	r3
	if (rc < 0) {
     f0c:	2800      	cmp	r0, #0
     f0e:	db07      	blt.n	f20 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     f10:	4a09      	ldr	r2, [pc, #36]	; (f38 <usb_d_ep_init+0x50>)
     f12:	0164      	lsls	r4, r4, #5
     f14:	1913      	adds	r3, r2, r4
     f16:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     f18:	2303      	movs	r3, #3
     f1a:	401e      	ands	r6, r3
     f1c:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     f1e:	2000      	movs	r0, #0
}
     f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     f22:	2014      	movs	r0, #20
     f24:	4240      	negs	r0, r0
     f26:	e7fb      	b.n	f20 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     f28:	2015      	movs	r0, #21
     f2a:	4240      	negs	r0, r0
     f2c:	e7f8      	b.n	f20 <usb_d_ep_init+0x38>
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00000be5 	.word	0x00000be5
     f34:	00001e4d 	.word	0x00001e4d
     f38:	20000504 	.word	0x20000504

00000f3c <usb_d_ep0_init>:
{
     f3c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     f3e:	b282      	uxth	r2, r0
     f40:	2100      	movs	r1, #0
     f42:	2000      	movs	r0, #0
     f44:	4b01      	ldr	r3, [pc, #4]	; (f4c <usb_d_ep0_init+0x10>)
     f46:	4798      	blx	r3
}
     f48:	bd10      	pop	{r4, pc}
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	00000ee9 	.word	0x00000ee9

00000f50 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     f50:	b570      	push	{r4, r5, r6, lr}
     f52:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f54:	4b06      	ldr	r3, [pc, #24]	; (f70 <usb_d_ep_deinit+0x20>)
     f56:	4798      	blx	r3
     f58:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     f5a:	db07      	blt.n	f6c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     f5c:	0028      	movs	r0, r5
     f5e:	4b05      	ldr	r3, [pc, #20]	; (f74 <usb_d_ep_deinit+0x24>)
     f60:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     f62:	0164      	lsls	r4, r4, #5
     f64:	4b04      	ldr	r3, [pc, #16]	; (f78 <usb_d_ep_deinit+0x28>)
     f66:	191c      	adds	r4, r3, r4
     f68:	23ff      	movs	r3, #255	; 0xff
     f6a:	7063      	strb	r3, [r4, #1]
}
     f6c:	bd70      	pop	{r4, r5, r6, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00000be5 	.word	0x00000be5
     f74:	00001f79 	.word	0x00001f79
     f78:	20000504 	.word	0x20000504

00000f7c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f80:	4b0e      	ldr	r3, [pc, #56]	; (fbc <usb_d_ep_enable+0x40>)
     f82:	4798      	blx	r3
     f84:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     f86:	db15      	blt.n	fb4 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     f88:	0143      	lsls	r3, r0, #5
     f8a:	4a0d      	ldr	r2, [pc, #52]	; (fc0 <usb_d_ep_enable+0x44>)
     f8c:	5c9b      	ldrb	r3, [r3, r2]
     f8e:	425a      	negs	r2, r3
     f90:	4153      	adcs	r3, r2
     f92:	3301      	adds	r3, #1
     f94:	0141      	lsls	r1, r0, #5
     f96:	4a0a      	ldr	r2, [pc, #40]	; (fc0 <usb_d_ep_enable+0x44>)
     f98:	1852      	adds	r2, r2, r1
     f9a:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     f9c:	0020      	movs	r0, r4
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <usb_d_ep_enable+0x48>)
     fa0:	4798      	blx	r3
	if (rc < 0) {
     fa2:	2800      	cmp	r0, #0
     fa4:	db00      	blt.n	fa8 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     fa6:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     fa8:	016d      	lsls	r5, r5, #5
     faa:	4b05      	ldr	r3, [pc, #20]	; (fc0 <usb_d_ep_enable+0x44>)
     fac:	195d      	adds	r5, r3, r5
     fae:	2300      	movs	r3, #0
     fb0:	70ab      	strb	r3, [r5, #2]
     fb2:	e7f8      	b.n	fa6 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     fb4:	2012      	movs	r0, #18
     fb6:	4240      	negs	r0, r0
     fb8:	e7f5      	b.n	fa6 <usb_d_ep_enable+0x2a>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00000be5 	.word	0x00000be5
     fc0:	20000504 	.word	0x20000504
     fc4:	00002045 	.word	0x00002045

00000fc8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fca:	46d6      	mov	lr, sl
     fcc:	464f      	mov	r7, r9
     fce:	4646      	mov	r6, r8
     fd0:	b5c0      	push	{r6, r7, lr}
     fd2:	b086      	sub	sp, #24
     fd4:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     fd6:	7a07      	ldrb	r7, [r0, #8]
     fd8:	0038      	movs	r0, r7
     fda:	4b40      	ldr	r3, [pc, #256]	; (10dc <usb_d_ep_transfer+0x114>)
     fdc:	4798      	blx	r3
     fde:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     fe0:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     fe2:	6863      	ldr	r3, [r4, #4]
     fe4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     fe6:	2800      	cmp	r0, #0
     fe8:	da00      	bge.n	fec <usb_d_ep_transfer+0x24>
     fea:	e071      	b.n	10d0 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     fec:	a804      	add	r0, sp, #16
     fee:	4b3c      	ldr	r3, [pc, #240]	; (10e0 <usb_d_ep_transfer+0x118>)
     ff0:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     ff2:	016a      	lsls	r2, r5, #5
     ff4:	4b3b      	ldr	r3, [pc, #236]	; (10e4 <usb_d_ep_transfer+0x11c>)
     ff6:	189b      	adds	r3, r3, r2
     ff8:	789a      	ldrb	r2, [r3, #2]
     ffa:	2317      	movs	r3, #23
     ffc:	446b      	add	r3, sp
     ffe:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	2b01      	cmp	r3, #1
    1004:	d010      	beq.n	1028 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1006:	a804      	add	r0, sp, #16
    1008:	4b37      	ldr	r3, [pc, #220]	; (10e8 <usb_d_ep_transfer+0x120>)
    100a:	4798      	blx	r3
		switch (state) {
    100c:	2317      	movs	r3, #23
    100e:	446b      	add	r3, sp
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	b2db      	uxtb	r3, r3
    1014:	2b05      	cmp	r3, #5
    1016:	d05e      	beq.n	10d6 <usb_d_ep_transfer+0x10e>
    1018:	2b06      	cmp	r3, #6
    101a:	d023      	beq.n	1064 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    101c:	2001      	movs	r0, #1
		switch (state) {
    101e:	2b00      	cmp	r3, #0
    1020:	d13c      	bne.n	109c <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1022:	2013      	movs	r0, #19
    1024:	4240      	negs	r0, r0
    1026:	e039      	b.n	109c <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1028:	4b2e      	ldr	r3, [pc, #184]	; (10e4 <usb_d_ep_transfer+0x11c>)
    102a:	4699      	mov	r9, r3
    102c:	016b      	lsls	r3, r5, #5
    102e:	469a      	mov	sl, r3
    1030:	464b      	mov	r3, r9
    1032:	4453      	add	r3, sl
    1034:	2203      	movs	r2, #3
    1036:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1038:	a804      	add	r0, sp, #16
    103a:	4b2b      	ldr	r3, [pc, #172]	; (10e8 <usb_d_ep_transfer+0x120>)
    103c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    103e:	464b      	mov	r3, r9
    1040:	4652      	mov	r2, sl
    1042:	5cd3      	ldrb	r3, [r2, r3]
    1044:	2b00      	cmp	r3, #0
    1046:	d010      	beq.n	106a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1048:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    104a:	1e72      	subs	r2, r6, #1
    104c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    104e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1050:	6822      	ldr	r2, [r4, #0]
    1052:	9201      	str	r2, [sp, #4]
    1054:	4642      	mov	r2, r8
    1056:	9202      	str	r2, [sp, #8]
    1058:	b27f      	sxtb	r7, r7
    105a:	2f00      	cmp	r7, #0
    105c:	db17      	blt.n	108e <usb_d_ep_transfer+0xc6>
    105e:	220f      	movs	r2, #15
    1060:	4013      	ands	r3, r2
    1062:	e016      	b.n	1092 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1064:	2010      	movs	r0, #16
    1066:	4240      	negs	r0, r0
    1068:	e018      	b.n	109c <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    106a:	016b      	lsls	r3, r5, #5
    106c:	4a1d      	ldr	r2, [pc, #116]	; (10e4 <usb_d_ep_transfer+0x11c>)
    106e:	18d2      	adds	r2, r2, r3
    1070:	7cd1      	ldrb	r1, [r2, #19]
    1072:	0209      	lsls	r1, r1, #8
    1074:	7c93      	ldrb	r3, [r2, #18]
    1076:	185b      	adds	r3, r3, r1
    1078:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    107a:	2b00      	cmp	r3, #0
    107c:	d114      	bne.n	10a8 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    107e:	2304      	movs	r3, #4
    1080:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1082:	2200      	movs	r2, #0
			zlp                 = true;
    1084:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1086:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1088:	6821      	ldr	r1, [r4, #0]
    108a:	9101      	str	r1, [sp, #4]
    108c:	9202      	str	r2, [sp, #8]
    108e:	2280      	movs	r2, #128	; 0x80
    1090:	4313      	orrs	r3, r2
    1092:	a801      	add	r0, sp, #4
    1094:	7203      	strb	r3, [r0, #8]
    1096:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <usb_d_ep_transfer+0x124>)
    109a:	4798      	blx	r3
	return rc;
}
    109c:	b006      	add	sp, #24
    109e:	bc1c      	pop	{r2, r3, r4}
    10a0:	4690      	mov	r8, r2
    10a2:	4699      	mov	r9, r3
    10a4:	46a2      	mov	sl, r4
    10a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a8:	4642      	mov	r2, r8
    10aa:	429a      	cmp	r2, r3
    10ac:	d900      	bls.n	10b0 <usb_d_ep_transfer+0xe8>
    10ae:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    10b0:	016d      	lsls	r5, r5, #5
    10b2:	490c      	ldr	r1, [pc, #48]	; (10e4 <usb_d_ep_transfer+0x11c>)
    10b4:	194d      	adds	r5, r1, r5
			if (dir) {
    10b6:	7b29      	ldrb	r1, [r5, #12]
    10b8:	297f      	cmp	r1, #127	; 0x7f
    10ba:	d805      	bhi.n	10c8 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    10bc:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    10be:	6821      	ldr	r1, [r4, #0]
    10c0:	9101      	str	r1, [sp, #4]
    10c2:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    10c4:	2600      	movs	r6, #0
    10c6:	e7ca      	b.n	105e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    10c8:	429a      	cmp	r2, r3
    10ca:	41b6      	sbcs	r6, r6
    10cc:	4276      	negs	r6, r6
    10ce:	e7da      	b.n	1086 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    10d0:	2012      	movs	r0, #18
    10d2:	4240      	negs	r0, r0
    10d4:	e7e2      	b.n	109c <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    10d6:	2002      	movs	r0, #2
    10d8:	e7e0      	b.n	109c <usb_d_ep_transfer+0xd4>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00000be5 	.word	0x00000be5
    10e0:	000008a1 	.word	0x000008a1
    10e4:	20000504 	.word	0x20000504
    10e8:	000008af 	.word	0x000008af
    10ec:	000024fd 	.word	0x000024fd

000010f0 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    10f0:	b570      	push	{r4, r5, r6, lr}
    10f2:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    10f4:	4b07      	ldr	r3, [pc, #28]	; (1114 <usb_d_ep_abort+0x24>)
    10f6:	4798      	blx	r3
    10f8:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    10fa:	db09      	blt.n	1110 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    10fc:	0028      	movs	r0, r5
    10fe:	4b06      	ldr	r3, [pc, #24]	; (1118 <usb_d_ep_abort+0x28>)
    1100:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1102:	0164      	lsls	r4, r4, #5
    1104:	4b05      	ldr	r3, [pc, #20]	; (111c <usb_d_ep_abort+0x2c>)
    1106:	191c      	adds	r4, r3, r4
    1108:	2301      	movs	r3, #1
    110a:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    110c:	3303      	adds	r3, #3
    110e:	70e3      	strb	r3, [r4, #3]
}
    1110:	bd70      	pop	{r4, r5, r6, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00000be5 	.word	0x00000be5
    1118:	0000270d 	.word	0x0000270d
    111c:	20000504 	.word	0x20000504

00001120 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1124:	2900      	cmp	r1, #0
    1126:	d005      	beq.n	1134 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1128:	2901      	cmp	r1, #1
    112a:	d021      	beq.n	1170 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    112c:	2102      	movs	r1, #2
    112e:	4b13      	ldr	r3, [pc, #76]	; (117c <usb_d_ep_halt+0x5c>)
    1130:	4798      	blx	r3
	}
}
    1132:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1134:	4b12      	ldr	r3, [pc, #72]	; (1180 <usb_d_ep_halt+0x60>)
    1136:	4798      	blx	r3
    1138:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    113a:	db1c      	blt.n	1176 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    113c:	2102      	movs	r1, #2
    113e:	0020      	movs	r0, r4
    1140:	4b0e      	ldr	r3, [pc, #56]	; (117c <usb_d_ep_halt+0x5c>)
    1142:	4798      	blx	r3
    1144:	2800      	cmp	r0, #0
    1146:	d0f4      	beq.n	1132 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1148:	2100      	movs	r1, #0
    114a:	0020      	movs	r0, r4
    114c:	4b0b      	ldr	r3, [pc, #44]	; (117c <usb_d_ep_halt+0x5c>)
    114e:	4798      	blx	r3
		if (rc < 0) {
    1150:	2800      	cmp	r0, #0
    1152:	dbee      	blt.n	1132 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1154:	016d      	lsls	r5, r5, #5
    1156:	4b0b      	ldr	r3, [pc, #44]	; (1184 <usb_d_ep_halt+0x64>)
    1158:	195d      	adds	r5, r3, r5
    115a:	2301      	movs	r3, #1
    115c:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    115e:	3302      	adds	r3, #2
    1160:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1162:	69eb      	ldr	r3, [r5, #28]
    1164:	2200      	movs	r2, #0
    1166:	2103      	movs	r1, #3
    1168:	0020      	movs	r0, r4
    116a:	4798      	blx	r3
	return ERR_NONE;
    116c:	2000      	movs	r0, #0
    116e:	e7e0      	b.n	1132 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1170:	4b02      	ldr	r3, [pc, #8]	; (117c <usb_d_ep_halt+0x5c>)
    1172:	4798      	blx	r3
    1174:	e7dd      	b.n	1132 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1176:	2012      	movs	r0, #18
    1178:	4240      	negs	r0, r0
    117a:	e7da      	b.n	1132 <usb_d_ep_halt+0x12>
    117c:	00002329 	.word	0x00002329
    1180:	00000be5 	.word	0x00000be5
    1184:	20000504 	.word	0x20000504

00001188 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	000d      	movs	r5, r1
    118c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    118e:	4b0f      	ldr	r3, [pc, #60]	; (11cc <usb_d_ep_register_callback+0x44>)
    1190:	4798      	blx	r3
    1192:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1194:	1e22      	subs	r2, r4, #0
    1196:	d008      	beq.n	11aa <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1198:	2b00      	cmp	r3, #0
    119a:	db05      	blt.n	11a8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    119c:	2d01      	cmp	r5, #1
    119e:	d00b      	beq.n	11b8 <usb_d_ep_register_callback+0x30>
    11a0:	2d00      	cmp	r5, #0
    11a2:	d004      	beq.n	11ae <usb_d_ep_register_callback+0x26>
    11a4:	2d02      	cmp	r5, #2
    11a6:	d00c      	beq.n	11c2 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    11a8:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    11aa:	4a09      	ldr	r2, [pc, #36]	; (11d0 <usb_d_ep_register_callback+0x48>)
    11ac:	e7f4      	b.n	1198 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    11ae:	0140      	lsls	r0, r0, #5
    11b0:	4b08      	ldr	r3, [pc, #32]	; (11d4 <usb_d_ep_register_callback+0x4c>)
    11b2:	1818      	adds	r0, r3, r0
    11b4:	6142      	str	r2, [r0, #20]
		break;
    11b6:	e7f7      	b.n	11a8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    11b8:	0140      	lsls	r0, r0, #5
    11ba:	4b06      	ldr	r3, [pc, #24]	; (11d4 <usb_d_ep_register_callback+0x4c>)
    11bc:	1818      	adds	r0, r3, r0
    11be:	6182      	str	r2, [r0, #24]
		break;
    11c0:	e7f2      	b.n	11a8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    11c2:	0140      	lsls	r0, r0, #5
    11c4:	4b03      	ldr	r3, [pc, #12]	; (11d4 <usb_d_ep_register_callback+0x4c>)
    11c6:	1818      	adds	r0, r3, r0
    11c8:	61c2      	str	r2, [r0, #28]
		break;
    11ca:	e7ed      	b.n	11a8 <usb_d_ep_register_callback+0x20>
    11cc:	00000be5 	.word	0x00000be5
    11d0:	00000c29 	.word	0x00000c29
    11d4:	20000504 	.word	0x20000504

000011d8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    11d8:	2800      	cmp	r0, #0
    11da:	d100      	bne.n	11de <assert+0x6>
		__asm("BKPT #0");
    11dc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    11de:	4770      	bx	lr

000011e0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    11e0:	6803      	ldr	r3, [r0, #0]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d00a      	beq.n	11fc <is_list_element+0x1c>
		if (it == element) {
    11e6:	428b      	cmp	r3, r1
    11e8:	d00a      	beq.n	1200 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d003      	beq.n	11f8 <is_list_element+0x18>
		if (it == element) {
    11f0:	4299      	cmp	r1, r3
    11f2:	d1fa      	bne.n	11ea <is_list_element+0xa>
			return true;
    11f4:	2001      	movs	r0, #1
    11f6:	e000      	b.n	11fa <is_list_element+0x1a>
		}
	}

	return false;
    11f8:	2000      	movs	r0, #0
}
    11fa:	4770      	bx	lr
	return false;
    11fc:	2000      	movs	r0, #0
    11fe:	e7fc      	b.n	11fa <is_list_element+0x1a>
			return true;
    1200:	2001      	movs	r0, #1
    1202:	e7fa      	b.n	11fa <is_list_element+0x1a>

00001204 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1204:	b570      	push	{r4, r5, r6, lr}
    1206:	0004      	movs	r4, r0
    1208:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    120a:	4b06      	ldr	r3, [pc, #24]	; (1224 <list_insert_as_head+0x20>)
    120c:	4798      	blx	r3
    120e:	2301      	movs	r3, #1
    1210:	4058      	eors	r0, r3
    1212:	b2c0      	uxtb	r0, r0
    1214:	2239      	movs	r2, #57	; 0x39
    1216:	4904      	ldr	r1, [pc, #16]	; (1228 <list_insert_as_head+0x24>)
    1218:	4b04      	ldr	r3, [pc, #16]	; (122c <list_insert_as_head+0x28>)
    121a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    121c:	6823      	ldr	r3, [r4, #0]
    121e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1220:	6025      	str	r5, [r4, #0]
}
    1222:	bd70      	pop	{r4, r5, r6, pc}
    1224:	000011e1 	.word	0x000011e1
    1228:	00004164 	.word	0x00004164
    122c:	000011d9 	.word	0x000011d9

00001230 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1230:	6803      	ldr	r3, [r0, #0]
    1232:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1234:	6001      	str	r1, [r0, #0]
}
    1236:	4770      	bx	lr

00001238 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1238:	b570      	push	{r4, r5, r6, lr}
    123a:	0005      	movs	r5, r0
    123c:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    123e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1240:	4b0a      	ldr	r3, [pc, #40]	; (126c <list_insert_at_end+0x34>)
    1242:	4798      	blx	r3
    1244:	2301      	movs	r3, #1
    1246:	4058      	eors	r0, r3
    1248:	b2c0      	uxtb	r0, r0
    124a:	224f      	movs	r2, #79	; 0x4f
    124c:	4908      	ldr	r1, [pc, #32]	; (1270 <list_insert_at_end+0x38>)
    124e:	4b09      	ldr	r3, [pc, #36]	; (1274 <list_insert_at_end+0x3c>)
    1250:	4798      	blx	r3

	if (!list->head) {
    1252:	682b      	ldr	r3, [r5, #0]
    1254:	2b00      	cmp	r3, #0
    1256:	d103      	bne.n	1260 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1258:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    125a:	6033      	str	r3, [r6, #0]
		return;
    125c:	e005      	b.n	126a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    125e:	001c      	movs	r4, r3
	while (it->next) {
    1260:	6823      	ldr	r3, [r4, #0]
    1262:	2b00      	cmp	r3, #0
    1264:	d1fb      	bne.n	125e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    1266:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1268:	6033      	str	r3, [r6, #0]
}
    126a:	bd70      	pop	{r4, r5, r6, pc}
    126c:	000011e1 	.word	0x000011e1
    1270:	00004164 	.word	0x00004164
    1274:	000011d9 	.word	0x000011d9

00001278 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1278:	6803      	ldr	r3, [r0, #0]
    127a:	2b00      	cmp	r3, #0
    127c:	d001      	beq.n	1282 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    127e:	681a      	ldr	r2, [r3, #0]
    1280:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1282:	0018      	movs	r0, r3
    1284:	4770      	bx	lr

00001286 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    1286:	2900      	cmp	r1, #0
    1288:	d019      	beq.n	12be <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
    128a:	6802      	ldr	r2, [r0, #0]
    128c:	4291      	cmp	r1, r2
    128e:	d00b      	beq.n	12a8 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    1290:	2a00      	cmp	r2, #0
    1292:	d016      	beq.n	12c2 <list_delete_element+0x3c>
    1294:	6813      	ldr	r3, [r2, #0]
    1296:	4299      	cmp	r1, r3
    1298:	d00a      	beq.n	12b0 <list_delete_element+0x2a>
    129a:	2b00      	cmp	r3, #0
    129c:	d00d      	beq.n	12ba <list_delete_element+0x34>
    129e:	681a      	ldr	r2, [r3, #0]
    12a0:	4291      	cmp	r1, r2
    12a2:	d006      	beq.n	12b2 <list_delete_element+0x2c>
    12a4:	0013      	movs	r3, r2
    12a6:	e7f8      	b.n	129a <list_delete_element+0x14>
		list->head = list->head->next;
    12a8:	6813      	ldr	r3, [r2, #0]
    12aa:	6003      	str	r3, [r0, #0]
		return true;
    12ac:	2001      	movs	r0, #1
    12ae:	e003      	b.n	12b8 <list_delete_element+0x32>
		while (it && it->next != element) {
    12b0:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    12b2:	680a      	ldr	r2, [r1, #0]
    12b4:	601a      	str	r2, [r3, #0]
			return true;
    12b6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    12b8:	4770      	bx	lr
	return false;
    12ba:	2000      	movs	r0, #0
    12bc:	e7fc      	b.n	12b8 <list_delete_element+0x32>
		return false;
    12be:	2000      	movs	r0, #0
    12c0:	e7fa      	b.n	12b8 <list_delete_element+0x32>
	return false;
    12c2:	2000      	movs	r0, #0
    12c4:	e7f8      	b.n	12b8 <list_delete_element+0x32>
	...

000012c8 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    12c8:	b243      	sxtb	r3, r0
    12ca:	2b00      	cmp	r3, #0
    12cc:	db07      	blt.n	12de <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ce:	231f      	movs	r3, #31
    12d0:	4018      	ands	r0, r3
    12d2:	3b1e      	subs	r3, #30
    12d4:	4083      	lsls	r3, r0
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	0052      	lsls	r2, r2, #1
    12da:	4901      	ldr	r1, [pc, #4]	; (12e0 <_irq_set+0x18>)
    12dc:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    12de:	4770      	bx	lr
    12e0:	e000e100 	.word	0xe000e100

000012e4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    12e4:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    12e6:	0103      	lsls	r3, r0, #4
    12e8:	1a1b      	subs	r3, r3, r0
    12ea:	015b      	lsls	r3, r3, #5
    12ec:	1a18      	subs	r0, r3, r0
    12ee:	3002      	adds	r0, #2
    12f0:	2103      	movs	r1, #3
    12f2:	4b02      	ldr	r3, [pc, #8]	; (12fc <_get_cycles_for_ms+0x18>)
    12f4:	4798      	blx	r3
    12f6:	2364      	movs	r3, #100	; 0x64
    12f8:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    12fa:	bd10      	pop	{r4, pc}
    12fc:	00003bfd 	.word	0x00003bfd

00001300 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1300:	3901      	subs	r1, #1
    1302:	d8fd      	bhi.n	1300 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1304:	4770      	bx	lr
	...

00001308 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1308:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    130a:	4a08      	ldr	r2, [pc, #32]	; (132c <_init_chip+0x24>)
    130c:	6853      	ldr	r3, [r2, #4]
    130e:	2108      	movs	r1, #8
    1310:	430b      	orrs	r3, r1
    1312:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <_init_chip+0x28>)
    1316:	4798      	blx	r3
	_sysctrl_init_sources();
    1318:	4b06      	ldr	r3, [pc, #24]	; (1334 <_init_chip+0x2c>)
    131a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    131c:	2040      	movs	r0, #64	; 0x40
    131e:	4c06      	ldr	r4, [pc, #24]	; (1338 <_init_chip+0x30>)
    1320:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    1322:	4b06      	ldr	r3, [pc, #24]	; (133c <_init_chip+0x34>)
    1324:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1326:	20bf      	movs	r0, #191	; 0xbf
    1328:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    132a:	bd10      	pop	{r4, pc}
    132c:	41004000 	.word	0x41004000
    1330:	000013d9 	.word	0x000013d9
    1334:	000013f9 	.word	0x000013f9
    1338:	00001341 	.word	0x00001341
    133c:	0000143d 	.word	0x0000143d

00001340 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1340:	07c3      	lsls	r3, r0, #31
    1342:	d509      	bpl.n	1358 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1344:	4b1c      	ldr	r3, [pc, #112]	; (13b8 <_gclk_init_generators_by_fref+0x78>)
    1346:	2280      	movs	r2, #128	; 0x80
    1348:	0052      	lsls	r2, r2, #1
    134a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    134c:	4a1b      	ldr	r2, [pc, #108]	; (13bc <_gclk_init_generators_by_fref+0x7c>)
    134e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1350:	001a      	movs	r2, r3
    1352:	7853      	ldrb	r3, [r2, #1]
    1354:	09db      	lsrs	r3, r3, #7
    1356:	d1fc      	bne.n	1352 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1358:	0783      	lsls	r3, r0, #30
    135a:	d509      	bpl.n	1370 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    135c:	4b16      	ldr	r3, [pc, #88]	; (13b8 <_gclk_init_generators_by_fref+0x78>)
    135e:	2202      	movs	r2, #2
    1360:	32ff      	adds	r2, #255	; 0xff
    1362:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1364:	4a16      	ldr	r2, [pc, #88]	; (13c0 <_gclk_init_generators_by_fref+0x80>)
    1366:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1368:	001a      	movs	r2, r3
    136a:	7853      	ldrb	r3, [r2, #1]
    136c:	09db      	lsrs	r3, r3, #7
    136e:	d1fc      	bne.n	136a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1370:	0703      	lsls	r3, r0, #28
    1372:	d508      	bpl.n	1386 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    1374:	4b10      	ldr	r3, [pc, #64]	; (13b8 <_gclk_init_generators_by_fref+0x78>)
    1376:	4a13      	ldr	r2, [pc, #76]	; (13c4 <_gclk_init_generators_by_fref+0x84>)
    1378:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    137a:	4a13      	ldr	r2, [pc, #76]	; (13c8 <_gclk_init_generators_by_fref+0x88>)
    137c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    137e:	001a      	movs	r2, r3
    1380:	7853      	ldrb	r3, [r2, #1]
    1382:	09db      	lsrs	r3, r3, #7
    1384:	d1fc      	bne.n	1380 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    1386:	0643      	lsls	r3, r0, #25
    1388:	d509      	bpl.n	139e <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    138a:	4b0b      	ldr	r3, [pc, #44]	; (13b8 <_gclk_init_generators_by_fref+0x78>)
    138c:	2283      	movs	r2, #131	; 0x83
    138e:	0052      	lsls	r2, r2, #1
    1390:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1392:	4a0e      	ldr	r2, [pc, #56]	; (13cc <_gclk_init_generators_by_fref+0x8c>)
    1394:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1396:	001a      	movs	r2, r3
    1398:	7853      	ldrb	r3, [r2, #1]
    139a:	09db      	lsrs	r3, r3, #7
    139c:	d1fc      	bne.n	1398 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    139e:	0603      	lsls	r3, r0, #24
    13a0:	d508      	bpl.n	13b4 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <_gclk_init_generators_by_fref+0x78>)
    13a4:	4a0a      	ldr	r2, [pc, #40]	; (13d0 <_gclk_init_generators_by_fref+0x90>)
    13a6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    13a8:	4a0a      	ldr	r2, [pc, #40]	; (13d4 <_gclk_init_generators_by_fref+0x94>)
    13aa:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    13ac:	001a      	movs	r2, r3
    13ae:	7853      	ldrb	r3, [r2, #1]
    13b0:	09db      	lsrs	r3, r3, #7
    13b2:	d1fc      	bne.n	13ae <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    13b4:	4770      	bx	lr
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	40000c00 	.word	0x40000c00
    13bc:	00090800 	.word	0x00090800
    13c0:	00290701 	.word	0x00290701
    13c4:	00000803 	.word	0x00000803
    13c8:	00010603 	.word	0x00010603
    13cc:	00090306 	.word	0x00090306
    13d0:	00002007 	.word	0x00002007
    13d4:	00090307 	.word	0x00090307

000013d8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    13d8:	4b06      	ldr	r3, [pc, #24]	; (13f4 <_pm_init+0x1c>)
    13da:	7a1a      	ldrb	r2, [r3, #8]
    13dc:	b2d2      	uxtb	r2, r2
    13de:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    13e0:	7a5a      	ldrb	r2, [r3, #9]
    13e2:	b2d2      	uxtb	r2, r2
    13e4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    13e6:	7a9a      	ldrb	r2, [r3, #10]
    13e8:	b2d2      	uxtb	r2, r2
    13ea:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    13ec:	7ada      	ldrb	r2, [r3, #11]
    13ee:	b2d2      	uxtb	r2, r2
    13f0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    13f2:	4770      	bx	lr
    13f4:	40000400 	.word	0x40000400

000013f8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    13f8:	4b0e      	ldr	r3, [pc, #56]	; (1434 <_sysctrl_init_sources+0x3c>)
    13fa:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    13fc:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    13fe:	480e      	ldr	r0, [pc, #56]	; (1438 <_sysctrl_init_sources+0x40>)
    1400:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1402:	0f92      	lsrs	r2, r2, #30
    1404:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1406:	2002      	movs	r0, #2
    1408:	4302      	orrs	r2, r0
    140a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    140c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    140e:	699a      	ldr	r2, [r3, #24]
    1410:	4302      	orrs	r2, r0
    1412:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1414:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1416:	211f      	movs	r1, #31
    1418:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    141a:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    141c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    141e:	2208      	movs	r2, #8
    1420:	68cb      	ldr	r3, [r1, #12]
    1422:	421a      	tst	r2, r3
    1424:	d0fc      	beq.n	1420 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1426:	4a03      	ldr	r2, [pc, #12]	; (1434 <_sysctrl_init_sources+0x3c>)
    1428:	6a13      	ldr	r3, [r2, #32]
    142a:	2180      	movs	r1, #128	; 0x80
    142c:	430b      	orrs	r3, r1
    142e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1430:	4770      	bx	lr
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	40000800 	.word	0x40000800
    1438:	0fff0000 	.word	0x0fff0000

0000143c <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    143c:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    143e:	2202      	movs	r2, #2
    1440:	4b28      	ldr	r3, [pc, #160]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
    1442:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1444:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1446:	320e      	adds	r2, #14
    1448:	68cb      	ldr	r3, [r1, #12]
    144a:	421a      	tst	r2, r3
    144c:	d0fc      	beq.n	1448 <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    144e:	4a26      	ldr	r2, [pc, #152]	; (14e8 <_sysctrl_init_referenced_generators+0xac>)
    1450:	4b24      	ldr	r3, [pc, #144]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
    1452:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1454:	4b25      	ldr	r3, [pc, #148]	; (14ec <_sysctrl_init_referenced_generators+0xb0>)
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	0e9b      	lsrs	r3, r3, #26
    145a:	2b3f      	cmp	r3, #63	; 0x3f
    145c:	d038      	beq.n	14d0 <_sysctrl_init_referenced_generators+0x94>
    145e:	029b      	lsls	r3, r3, #10
    1460:	2280      	movs	r2, #128	; 0x80
    1462:	0092      	lsls	r2, r2, #2
    1464:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1466:	4b1f      	ldr	r3, [pc, #124]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
    1468:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    146a:	2293      	movs	r2, #147	; 0x93
    146c:	0052      	lsls	r2, r2, #1
    146e:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    1470:	491f      	ldr	r1, [pc, #124]	; (14f0 <_sysctrl_init_referenced_generators+0xb4>)
    1472:	4a20      	ldr	r2, [pc, #128]	; (14f4 <_sysctrl_init_referenced_generators+0xb8>)
    1474:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    1476:	2102      	movs	r1, #2
    1478:	2244      	movs	r2, #68	; 0x44
    147a:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    147c:	4a1e      	ldr	r2, [pc, #120]	; (14f8 <_sysctrl_init_referenced_generators+0xbc>)
    147e:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    1480:	2220      	movs	r2, #32
    1482:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1484:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1486:	075b      	lsls	r3, r3, #29
    1488:	d525      	bpl.n	14d6 <_sysctrl_init_referenced_generators+0x9a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    148a:	4916      	ldr	r1, [pc, #88]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
	tmp &= mask;
    148c:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    148e:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1490:	421a      	tst	r2, r3
    1492:	d0fc      	beq.n	148e <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    1494:	4a13      	ldr	r2, [pc, #76]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
    1496:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    1498:	2004      	movs	r0, #4
    149a:	2401      	movs	r4, #1
    149c:	2502      	movs	r5, #2
    149e:	5cd1      	ldrb	r1, [r2, r3]
    14a0:	4201      	tst	r1, r0
    14a2:	d105      	bne.n	14b0 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    14a4:	5cd1      	ldrb	r1, [r2, r3]
    14a6:	4221      	tst	r1, r4
    14a8:	d102      	bne.n	14b0 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    14aa:	5cd1      	ldrb	r1, [r2, r3]
    14ac:	4229      	tst	r1, r5
    14ae:	d0f6      	beq.n	149e <_sysctrl_init_referenced_generators+0x62>
	((Sysctrl *)hw)->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ONDEMAND;
    14b0:	490c      	ldr	r1, [pc, #48]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
    14b2:	2244      	movs	r2, #68	; 0x44
    14b4:	5c8b      	ldrb	r3, [r1, r2]
    14b6:	2080      	movs	r0, #128	; 0x80
    14b8:	4303      	orrs	r3, r0
    14ba:	548b      	strb	r3, [r1, r2]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    14bc:	4a0d      	ldr	r2, [pc, #52]	; (14f4 <_sysctrl_init_referenced_generators+0xb8>)
    14be:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    14c0:	09db      	lsrs	r3, r3, #7
    14c2:	d1fc      	bne.n	14be <_sysctrl_init_referenced_generators+0x82>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    14c4:	4a07      	ldr	r2, [pc, #28]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
    14c6:	6993      	ldr	r3, [r2, #24]
    14c8:	2102      	movs	r1, #2
    14ca:	438b      	bics	r3, r1
    14cc:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    14ce:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    14d0:	22fc      	movs	r2, #252	; 0xfc
    14d2:	01d2      	lsls	r2, r2, #7
    14d4:	e7c7      	b.n	1466 <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    14d6:	4903      	ldr	r1, [pc, #12]	; (14e4 <_sysctrl_init_referenced_generators+0xa8>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    14d8:	2210      	movs	r2, #16
    14da:	68cb      	ldr	r3, [r1, #12]
    14dc:	421a      	tst	r2, r3
    14de:	d0fc      	beq.n	14da <_sysctrl_init_referenced_generators+0x9e>
    14e0:	e7d8      	b.n	1494 <_sysctrl_init_referenced_generators+0x58>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	40000800 	.word	0x40000800
    14e8:	0401bb80 	.word	0x0401bb80
    14ec:	00806024 	.word	0x00806024
    14f0:	00004601 	.word	0x00004601
    14f4:	40000c00 	.word	0x40000c00
    14f8:	000d05b7 	.word	0x000d05b7

000014fc <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    14fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fe:	0007      	movs	r7, r0
    1500:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1502:	4b3c      	ldr	r3, [pc, #240]	; (15f4 <_timer_init+0xf8>)
    1504:	18cd      	adds	r5, r1, r3
    1506:	0aad      	lsrs	r5, r5, #10
    1508:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    150a:	2d00      	cmp	r5, #0
    150c:	d051      	beq.n	15b2 <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
    150e:	229f      	movs	r2, #159	; 0x9f
    1510:	0052      	lsls	r2, r2, #1
    1512:	4939      	ldr	r1, [pc, #228]	; (15f8 <_timer_init+0xfc>)
    1514:	2000      	movs	r0, #0
    1516:	4b39      	ldr	r3, [pc, #228]	; (15fc <_timer_init+0x100>)
    1518:	4798      	blx	r3
	return -1;
    151a:	2601      	movs	r6, #1
    151c:	4276      	negs	r6, r6
	device->hw = hw;
    151e:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1520:	228b      	movs	r2, #139	; 0x8b
    1522:	4935      	ldr	r1, [pc, #212]	; (15f8 <_timer_init+0xfc>)
    1524:	2001      	movs	r0, #1
    1526:	4b35      	ldr	r3, [pc, #212]	; (15fc <_timer_init+0x100>)
    1528:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    152a:	7be3      	ldrb	r3, [r4, #15]
    152c:	09db      	lsrs	r3, r3, #7
    152e:	d1fc      	bne.n	152a <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1530:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1532:	079b      	lsls	r3, r3, #30
    1534:	d504      	bpl.n	1540 <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1536:	2300      	movs	r3, #0
    1538:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    153a:	7be3      	ldrb	r3, [r4, #15]
    153c:	09db      	lsrs	r3, r3, #7
    153e:	d1fc      	bne.n	153a <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1540:	2301      	movs	r3, #1
    1542:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1544:	7be3      	ldrb	r3, [r4, #15]
    1546:	09db      	lsrs	r3, r3, #7
    1548:	d1fc      	bne.n	1544 <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    154a:	00b3      	lsls	r3, r6, #2
    154c:	199b      	adds	r3, r3, r6
    154e:	009a      	lsls	r2, r3, #2
    1550:	4b2b      	ldr	r3, [pc, #172]	; (1600 <_timer_init+0x104>)
    1552:	189b      	adds	r3, r3, r2
    1554:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1556:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1558:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    155a:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    155c:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    155e:	8163      	strh	r3, [r4, #10]
    1560:	230c      	movs	r3, #12
    1562:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1564:	2b08      	cmp	r3, #8
    1566:	d026      	beq.n	15b6 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1568:	2b00      	cmp	r3, #0
    156a:	d12e      	bne.n	15ca <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    156c:	00b3      	lsls	r3, r6, #2
    156e:	199b      	adds	r3, r3, r6
    1570:	009b      	lsls	r3, r3, #2
    1572:	4a23      	ldr	r2, [pc, #140]	; (1600 <_timer_init+0x104>)
    1574:	18d3      	adds	r3, r2, r3
    1576:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1578:	8323      	strh	r3, [r4, #24]
    157a:	2300      	movs	r3, #0
    157c:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    157e:	2301      	movs	r3, #1
    1580:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1582:	4b20      	ldr	r3, [pc, #128]	; (1604 <_timer_init+0x108>)
    1584:	429c      	cmp	r4, r3
    1586:	d031      	beq.n	15ec <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1588:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    158a:	b2eb      	uxtb	r3, r5
    158c:	062a      	lsls	r2, r5, #24
    158e:	d40e      	bmi.n	15ae <_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1590:	221f      	movs	r2, #31
    1592:	401a      	ands	r2, r3
    1594:	2301      	movs	r3, #1
    1596:	4093      	lsls	r3, r2
    1598:	4a1b      	ldr	r2, [pc, #108]	; (1608 <_timer_init+0x10c>)
    159a:	2180      	movs	r1, #128	; 0x80
    159c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    159e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15a2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15a6:	3101      	adds	r1, #1
    15a8:	31ff      	adds	r1, #255	; 0xff
    15aa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15ac:	6013      	str	r3, [r2, #0]
}
    15ae:	2000      	movs	r0, #0
    15b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    15b2:	2600      	movs	r6, #0
    15b4:	e7b3      	b.n	151e <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    15b6:	00b3      	lsls	r3, r6, #2
    15b8:	199e      	adds	r6, r3, r6
    15ba:	00b6      	lsls	r6, r6, #2
    15bc:	4b10      	ldr	r3, [pc, #64]	; (1600 <_timer_init+0x104>)
    15be:	199e      	adds	r6, r3, r6
    15c0:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    15c2:	61a3      	str	r3, [r4, #24]
    15c4:	2300      	movs	r3, #0
    15c6:	61e3      	str	r3, [r4, #28]
    15c8:	e7d9      	b.n	157e <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    15ca:	2b04      	cmp	r3, #4
    15cc:	d1d7      	bne.n	157e <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    15ce:	480c      	ldr	r0, [pc, #48]	; (1600 <_timer_init+0x104>)
    15d0:	00b3      	lsls	r3, r6, #2
    15d2:	199a      	adds	r2, r3, r6
    15d4:	0092      	lsls	r2, r2, #2
    15d6:	1882      	adds	r2, r0, r2
    15d8:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    15da:	7622      	strb	r2, [r4, #24]
    15dc:	2200      	movs	r2, #0
    15de:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    15e0:	199b      	adds	r3, r3, r6
    15e2:	009b      	lsls	r3, r3, #2
    15e4:	18c3      	adds	r3, r0, r3
    15e6:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    15e8:	7523      	strb	r3, [r4, #20]
    15ea:	e7c8      	b.n	157e <_timer_init+0x82>
		_tc3_dev = (struct _timer_device *)dev;
    15ec:	4b07      	ldr	r3, [pc, #28]	; (160c <_timer_init+0x110>)
    15ee:	601f      	str	r7, [r3, #0]
    15f0:	e7ca      	b.n	1588 <_timer_init+0x8c>
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	bdffd400 	.word	0xbdffd400
    15f8:	00004198 	.word	0x00004198
    15fc:	000011d9 	.word	0x000011d9
    1600:	00004184 	.word	0x00004184
    1604:	42002c00 	.word	0x42002c00
    1608:	e000e100 	.word	0xe000e100
    160c:	20000584 	.word	0x20000584

00001610 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1610:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1612:	8813      	ldrh	r3, [r2, #0]
    1614:	2102      	movs	r1, #2
    1616:	430b      	orrs	r3, r1
    1618:	8013      	strh	r3, [r2, #0]
}
    161a:	4770      	bx	lr

0000161c <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    161c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    161e:	8813      	ldrh	r3, [r2, #0]
    1620:	2102      	movs	r1, #2
    1622:	438b      	bics	r3, r1
    1624:	8013      	strh	r3, [r2, #0]
}
    1626:	4770      	bx	lr

00001628 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1628:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    162a:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    162c:	0780      	lsls	r0, r0, #30
    162e:	0fc0      	lsrs	r0, r0, #31
}
    1630:	4770      	bx	lr

00001632 <_tc_get_timer>:
}
    1632:	2000      	movs	r0, #0
    1634:	4770      	bx	lr
	...

00001638 <_timer_set_irq>:
{
    1638:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    163a:	68c0      	ldr	r0, [r0, #12]
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <_timer_set_irq+0x18>)
    163e:	469c      	mov	ip, r3
    1640:	4460      	add	r0, ip
    1642:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    1644:	3012      	adds	r0, #18
    1646:	b2c0      	uxtb	r0, r0
    1648:	4b02      	ldr	r3, [pc, #8]	; (1654 <_timer_set_irq+0x1c>)
    164a:	4798      	blx	r3
}
    164c:	bd10      	pop	{r4, pc}
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	bdffd400 	.word	0xbdffd400
    1654:	000012c9 	.word	0x000012c9

00001658 <TC3_Handler>:
{
    1658:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    165a:	4b06      	ldr	r3, [pc, #24]	; (1674 <TC3_Handler+0x1c>)
    165c:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    165e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1660:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1662:	07d2      	lsls	r2, r2, #31
    1664:	d400      	bmi.n	1668 <TC3_Handler+0x10>
}
    1666:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1668:	2201      	movs	r2, #1
    166a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    166c:	6803      	ldr	r3, [r0, #0]
    166e:	4798      	blx	r3
}
    1670:	e7f9      	b.n	1666 <TC3_Handler+0xe>
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	20000584 	.word	0x20000584

00001678 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1678:	2000      	movs	r0, #0
    167a:	4770      	bx	lr

0000167c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    167c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    167e:	7c83      	ldrb	r3, [r0, #18]
    1680:	220f      	movs	r2, #15
    1682:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1684:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    1686:	3a08      	subs	r2, #8
    1688:	400a      	ands	r2, r1
    168a:	2a01      	cmp	r2, #1
    168c:	d00b      	beq.n	16a6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    168e:	015a      	lsls	r2, r3, #5
    1690:	491a      	ldr	r1, [pc, #104]	; (16fc <_usb_d_dev_handle_setup+0x80>)
    1692:	468c      	mov	ip, r1
    1694:	4462      	add	r2, ip
    1696:	2110      	movs	r1, #16
    1698:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    169a:	015b      	lsls	r3, r3, #5
    169c:	4a18      	ldr	r2, [pc, #96]	; (1700 <_usb_d_dev_handle_setup+0x84>)
    169e:	4694      	mov	ip, r2
    16a0:	4463      	add	r3, ip
    16a2:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    16a4:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    16a6:	064a      	lsls	r2, r1, #25
    16a8:	d50e      	bpl.n	16c8 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    16aa:	7cc2      	ldrb	r2, [r0, #19]
    16ac:	2140      	movs	r1, #64	; 0x40
    16ae:	438a      	bics	r2, r1
    16b0:	74c2      	strb	r2, [r0, #19]
    16b2:	015a      	lsls	r2, r3, #5
    16b4:	4c13      	ldr	r4, [pc, #76]	; (1704 <_usb_d_dev_handle_setup+0x88>)
    16b6:	46a4      	mov	ip, r4
    16b8:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    16ba:	2580      	movs	r5, #128	; 0x80
    16bc:	2482      	movs	r4, #130	; 0x82
    16be:	0064      	lsls	r4, r4, #1
    16c0:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    16c2:	2406      	movs	r4, #6
    16c4:	34ff      	adds	r4, #255	; 0xff
    16c6:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    16c8:	7cc2      	ldrb	r2, [r0, #19]
    16ca:	2108      	movs	r1, #8
    16cc:	438a      	bics	r2, r1
    16ce:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    16d0:	015a      	lsls	r2, r3, #5
    16d2:	490d      	ldr	r1, [pc, #52]	; (1708 <_usb_d_dev_handle_setup+0x8c>)
    16d4:	1889      	adds	r1, r1, r2
    16d6:	2400      	movs	r4, #0
    16d8:	728c      	strb	r4, [r1, #10]
    16da:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16dc:	0013      	movs	r3, r2
    16de:	4907      	ldr	r1, [pc, #28]	; (16fc <_usb_d_dev_handle_setup+0x80>)
    16e0:	468c      	mov	ip, r1
    16e2:	4463      	add	r3, ip
    16e4:	216f      	movs	r1, #111	; 0x6f
    16e6:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    16e8:	4b05      	ldr	r3, [pc, #20]	; (1700 <_usb_d_dev_handle_setup+0x84>)
    16ea:	469c      	mov	ip, r3
    16ec:	4462      	add	r2, ip
    16ee:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    16f0:	7c80      	ldrb	r0, [r0, #18]
    16f2:	4b06      	ldr	r3, [pc, #24]	; (170c <_usb_d_dev_handle_setup+0x90>)
    16f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16f6:	4798      	blx	r3
    16f8:	e7d4      	b.n	16a4 <_usb_d_dev_handle_setup+0x28>
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	41005100 	.word	0x41005100
    1700:	41005108 	.word	0x41005108
    1704:	41005000 	.word	0x41005000
    1708:	20000588 	.word	0x20000588
    170c:	20000608 	.word	0x20000608

00001710 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1710:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1712:	2220      	movs	r2, #32
    1714:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1716:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1718:	7c81      	ldrb	r1, [r0, #18]
    171a:	230f      	movs	r3, #15
    171c:	400b      	ands	r3, r1
    171e:	015b      	lsls	r3, r3, #5
    1720:	4905      	ldr	r1, [pc, #20]	; (1738 <_usb_d_dev_handle_stall+0x28>)
    1722:	468c      	mov	ip, r1
    1724:	4463      	add	r3, ip
    1726:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1728:	6882      	ldr	r2, [r0, #8]
    172a:	7c80      	ldrb	r0, [r0, #18]
    172c:	4b03      	ldr	r3, [pc, #12]	; (173c <_usb_d_dev_handle_stall+0x2c>)
    172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1730:	2101      	movs	r1, #1
    1732:	4798      	blx	r3
}
    1734:	bd10      	pop	{r4, pc}
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	41005108 	.word	0x41005108
    173c:	20000608 	.word	0x20000608

00001740 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1740:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1742:	7c83      	ldrb	r3, [r0, #18]
    1744:	2bff      	cmp	r3, #255	; 0xff
    1746:	d002      	beq.n	174e <_usb_d_dev_trans_done+0xe>
    1748:	7cc2      	ldrb	r2, [r0, #19]
    174a:	0652      	lsls	r2, r2, #25
    174c:	d400      	bmi.n	1750 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    174e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1750:	7cc2      	ldrb	r2, [r0, #19]
    1752:	2440      	movs	r4, #64	; 0x40
    1754:	43a2      	bics	r2, r4
    1756:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1758:	6882      	ldr	r2, [r0, #8]
    175a:	4802      	ldr	r0, [pc, #8]	; (1764 <_usb_d_dev_trans_done+0x24>)
    175c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    175e:	0018      	movs	r0, r3
    1760:	47a0      	blx	r4
    1762:	e7f4      	b.n	174e <_usb_d_dev_trans_done+0xe>
    1764:	20000608 	.word	0x20000608

00001768 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1768:	b530      	push	{r4, r5, lr}
    176a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    176c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    176e:	ac01      	add	r4, sp, #4
    1770:	2525      	movs	r5, #37	; 0x25
    1772:	7025      	strb	r5, [r4, #0]
    1774:	3525      	adds	r5, #37	; 0x25
    1776:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1778:	2bff      	cmp	r3, #255	; 0xff
    177a:	d01b      	beq.n	17b4 <_usb_d_dev_trans_stop+0x4c>
    177c:	7cc4      	ldrb	r4, [r0, #19]
    177e:	0664      	lsls	r4, r4, #25
    1780:	d518      	bpl.n	17b4 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1782:	240f      	movs	r4, #15
    1784:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1786:	2900      	cmp	r1, #0
    1788:	d016      	beq.n	17b8 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    178a:	015c      	lsls	r4, r3, #5
    178c:	4d0e      	ldr	r5, [pc, #56]	; (17c8 <_usb_d_dev_trans_stop+0x60>)
    178e:	46ac      	mov	ip, r5
    1790:	4464      	add	r4, ip
    1792:	2580      	movs	r5, #128	; 0x80
    1794:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1796:	ac01      	add	r4, sp, #4
    1798:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    179a:	0159      	lsls	r1, r3, #5
    179c:	4d0a      	ldr	r5, [pc, #40]	; (17c8 <_usb_d_dev_trans_stop+0x60>)
    179e:	46ac      	mov	ip, r5
    17a0:	4461      	add	r1, ip
    17a2:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17a4:	015b      	lsls	r3, r3, #5
    17a6:	4909      	ldr	r1, [pc, #36]	; (17cc <_usb_d_dev_trans_stop+0x64>)
    17a8:	468c      	mov	ip, r1
    17aa:	4463      	add	r3, ip
    17ac:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    17ae:	0011      	movs	r1, r2
    17b0:	4b07      	ldr	r3, [pc, #28]	; (17d0 <_usb_d_dev_trans_stop+0x68>)
    17b2:	4798      	blx	r3
}
    17b4:	b003      	add	sp, #12
    17b6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    17b8:	015c      	lsls	r4, r3, #5
    17ba:	4d03      	ldr	r5, [pc, #12]	; (17c8 <_usb_d_dev_trans_stop+0x60>)
    17bc:	46ac      	mov	ip, r5
    17be:	4464      	add	r4, ip
    17c0:	2540      	movs	r5, #64	; 0x40
    17c2:	7165      	strb	r5, [r4, #5]
    17c4:	e7e7      	b.n	1796 <_usb_d_dev_trans_stop+0x2e>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	41005100 	.word	0x41005100
    17cc:	41005108 	.word	0x41005108
    17d0:	00001741 	.word	0x00001741

000017d4 <_usb_d_dev_handle_trfail>:
{
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    17d8:	7c83      	ldrb	r3, [r0, #18]
    17da:	220f      	movs	r2, #15
    17dc:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    17de:	aa01      	add	r2, sp, #4
    17e0:	2404      	movs	r4, #4
    17e2:	7014      	strb	r4, [r2, #0]
    17e4:	3404      	adds	r4, #4
    17e6:	7054      	strb	r4, [r2, #1]
    17e8:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    17ea:	2900      	cmp	r1, #0
    17ec:	d031      	beq.n	1852 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17ee:	001a      	movs	r2, r3
    17f0:	3208      	adds	r2, #8
    17f2:	0152      	lsls	r2, r2, #5
    17f4:	4c32      	ldr	r4, [pc, #200]	; (18c0 <_usb_d_dev_handle_trfail+0xec>)
    17f6:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    17f8:	0664      	lsls	r4, r4, #25
    17fa:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    17fc:	010a      	lsls	r2, r1, #4
    17fe:	1952      	adds	r2, r2, r5
    1800:	4d30      	ldr	r5, [pc, #192]	; (18c4 <_usb_d_dev_handle_trfail+0xf0>)
    1802:	18aa      	adds	r2, r5, r2
    1804:	7a95      	ldrb	r5, [r2, #10]
    1806:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1808:	2c02      	cmp	r4, #2
    180a:	d02a      	beq.n	1862 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    180c:	07ac      	lsls	r4, r5, #30
    180e:	d541      	bpl.n	1894 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1810:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1812:	7a94      	ldrb	r4, [r2, #10]
    1814:	2602      	movs	r6, #2
    1816:	43b4      	bics	r4, r6
    1818:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    181a:	aa01      	add	r2, sp, #4
    181c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    181e:	015a      	lsls	r2, r3, #5
    1820:	4e29      	ldr	r6, [pc, #164]	; (18c8 <_usb_d_dev_handle_trfail+0xf4>)
    1822:	46b4      	mov	ip, r6
    1824:	4462      	add	r2, ip
    1826:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1828:	015b      	lsls	r3, r3, #5
    182a:	4a28      	ldr	r2, [pc, #160]	; (18cc <_usb_d_dev_handle_trfail+0xf8>)
    182c:	4694      	mov	ip, r2
    182e:	4463      	add	r3, ip
    1830:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1832:	2307      	movs	r3, #7
    1834:	402b      	ands	r3, r5
    1836:	2b01      	cmp	r3, #1
    1838:	d13f      	bne.n	18ba <_usb_d_dev_handle_trfail+0xe6>
    183a:	7cc3      	ldrb	r3, [r0, #19]
    183c:	065b      	lsls	r3, r3, #25
    183e:	d53c      	bpl.n	18ba <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1840:	7cc3      	ldrb	r3, [r0, #19]
    1842:	09db      	lsrs	r3, r3, #7
    1844:	4299      	cmp	r1, r3
    1846:	d038      	beq.n	18ba <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1848:	2200      	movs	r2, #0
    184a:	0019      	movs	r1, r3
    184c:	4b20      	ldr	r3, [pc, #128]	; (18d0 <_usb_d_dev_handle_trfail+0xfc>)
    184e:	4798      	blx	r3
    1850:	e033      	b.n	18ba <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1852:	001a      	movs	r2, r3
    1854:	3208      	adds	r2, #8
    1856:	0152      	lsls	r2, r2, #5
    1858:	4c19      	ldr	r4, [pc, #100]	; (18c0 <_usb_d_dev_handle_trfail+0xec>)
    185a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    185c:	2207      	movs	r2, #7
    185e:	4014      	ands	r4, r2
    1860:	e7cc      	b.n	17fc <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1862:	07ec      	lsls	r4, r5, #31
    1864:	d5d2      	bpl.n	180c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1866:	7a94      	ldrb	r4, [r2, #10]
    1868:	2501      	movs	r5, #1
    186a:	43ac      	bics	r4, r5
    186c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    186e:	aa01      	add	r2, sp, #4
    1870:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1872:	015a      	lsls	r2, r3, #5
    1874:	4d14      	ldr	r5, [pc, #80]	; (18c8 <_usb_d_dev_handle_trfail+0xf4>)
    1876:	46ac      	mov	ip, r5
    1878:	4462      	add	r2, ip
    187a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    187c:	015b      	lsls	r3, r3, #5
    187e:	4a13      	ldr	r2, [pc, #76]	; (18cc <_usb_d_dev_handle_trfail+0xf8>)
    1880:	4694      	mov	ip, r2
    1882:	4463      	add	r3, ip
    1884:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1886:	1e4b      	subs	r3, r1, #1
    1888:	4199      	sbcs	r1, r3
    188a:	b2c9      	uxtb	r1, r1
    188c:	2204      	movs	r2, #4
    188e:	4b10      	ldr	r3, [pc, #64]	; (18d0 <_usb_d_dev_handle_trfail+0xfc>)
    1890:	4798      	blx	r3
    1892:	e012      	b.n	18ba <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1894:	005a      	lsls	r2, r3, #1
    1896:	1852      	adds	r2, r2, r1
    1898:	0112      	lsls	r2, r2, #4
    189a:	480a      	ldr	r0, [pc, #40]	; (18c4 <_usb_d_dev_handle_trfail+0xf0>)
    189c:	1882      	adds	r2, r0, r2
    189e:	2000      	movs	r0, #0
    18a0:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    18a2:	aa01      	add	r2, sp, #4
    18a4:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18a6:	015a      	lsls	r2, r3, #5
    18a8:	4807      	ldr	r0, [pc, #28]	; (18c8 <_usb_d_dev_handle_trfail+0xf4>)
    18aa:	4684      	mov	ip, r0
    18ac:	4462      	add	r2, ip
    18ae:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18b0:	015b      	lsls	r3, r3, #5
    18b2:	4a06      	ldr	r2, [pc, #24]	; (18cc <_usb_d_dev_handle_trfail+0xf8>)
    18b4:	4694      	mov	ip, r2
    18b6:	4463      	add	r3, ip
    18b8:	7019      	strb	r1, [r3, #0]
}
    18ba:	b002      	add	sp, #8
    18bc:	bd70      	pop	{r4, r5, r6, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	41005000 	.word	0x41005000
    18c4:	20000588 	.word	0x20000588
    18c8:	41005100 	.word	0x41005100
    18cc:	41005108 	.word	0x41005108
    18d0:	00001769 	.word	0x00001769

000018d4 <_usb_d_dev_reset_epts>:
{
    18d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d6:	46c6      	mov	lr, r8
    18d8:	b500      	push	{lr}
    18da:	4d0c      	ldr	r5, [pc, #48]	; (190c <_usb_d_dev_reset_epts+0x38>)
    18dc:	002c      	movs	r4, r5
    18de:	3434      	adds	r4, #52	; 0x34
    18e0:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    18e2:	4b0b      	ldr	r3, [pc, #44]	; (1910 <_usb_d_dev_reset_epts+0x3c>)
    18e4:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    18e6:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    18e8:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    18ea:	2103      	movs	r1, #3
    18ec:	0020      	movs	r0, r4
    18ee:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    18f0:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    18f2:	74e6      	strb	r6, [r4, #19]
    18f4:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    18f6:	42ac      	cmp	r4, r5
    18f8:	d1f7      	bne.n	18ea <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    18fa:	22a0      	movs	r2, #160	; 0xa0
    18fc:	2100      	movs	r1, #0
    18fe:	4805      	ldr	r0, [pc, #20]	; (1914 <_usb_d_dev_reset_epts+0x40>)
    1900:	4b05      	ldr	r3, [pc, #20]	; (1918 <_usb_d_dev_reset_epts+0x44>)
    1902:	4798      	blx	r3
}
    1904:	bc04      	pop	{r2}
    1906:	4690      	mov	r8, r2
    1908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	20000608 	.word	0x20000608
    1910:	00001741 	.word	0x00001741
    1914:	20000588 	.word	0x20000588
    1918:	00003df1 	.word	0x00003df1

0000191c <_usb_d_dev_in_next>:
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	46c6      	mov	lr, r8
    1920:	b500      	push	{lr}
    1922:	0004      	movs	r4, r0
    1924:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1926:	7c83      	ldrb	r3, [r0, #18]
    1928:	250f      	movs	r5, #15
    192a:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    192c:	2900      	cmp	r1, #0
    192e:	d100      	bne.n	1932 <_usb_d_dev_in_next+0x16>
    1930:	e0aa      	b.n	1a88 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1932:	016a      	lsls	r2, r5, #5
    1934:	4b5a      	ldr	r3, [pc, #360]	; (1aa0 <_usb_d_dev_in_next+0x184>)
    1936:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1938:	6958      	ldr	r0, [r3, #20]
    193a:	0480      	lsls	r0, r0, #18
    193c:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    193e:	8a23      	ldrh	r3, [r4, #16]
    1940:	4a58      	ldr	r2, [pc, #352]	; (1aa4 <_usb_d_dev_in_next+0x188>)
    1942:	4293      	cmp	r3, r2
    1944:	d100      	bne.n	1948 <_usb_d_dev_in_next+0x2c>
    1946:	e09a      	b.n	1a7e <_usb_d_dev_in_next+0x162>
    1948:	3b01      	subs	r3, #1
    194a:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    194c:	7ce3      	ldrb	r3, [r4, #19]
    194e:	2707      	movs	r7, #7
    1950:	401f      	ands	r7, r3
	if (isr) {
    1952:	2e00      	cmp	r6, #0
    1954:	d005      	beq.n	1962 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1956:	016b      	lsls	r3, r5, #5
    1958:	4953      	ldr	r1, [pc, #332]	; (1aa8 <_usb_d_dev_in_next+0x18c>)
    195a:	468c      	mov	ip, r1
    195c:	4463      	add	r3, ip
    195e:	2102      	movs	r1, #2
    1960:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1962:	68a3      	ldr	r3, [r4, #8]
    1964:	18c1      	adds	r1, r0, r3
    1966:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1968:	6863      	ldr	r3, [r4, #4]
    196a:	4299      	cmp	r1, r3
    196c:	d24a      	bcs.n	1a04 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    196e:	1a5b      	subs	r3, r3, r1
    1970:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1972:	7ce2      	ldrb	r2, [r4, #19]
    1974:	0692      	lsls	r2, r2, #26
    1976:	d535      	bpl.n	19e4 <_usb_d_dev_in_next+0xc8>
    1978:	8a22      	ldrh	r2, [r4, #16]
    197a:	1c10      	adds	r0, r2, #0
    197c:	b292      	uxth	r2, r2
    197e:	429a      	cmp	r2, r3
    1980:	d900      	bls.n	1984 <_usb_d_dev_in_next+0x68>
    1982:	1c18      	adds	r0, r3, #0
    1984:	b283      	uxth	r3, r0
    1986:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1988:	6823      	ldr	r3, [r4, #0]
    198a:	469c      	mov	ip, r3
    198c:	4461      	add	r1, ip
    198e:	4642      	mov	r2, r8
    1990:	68e0      	ldr	r0, [r4, #12]
    1992:	4b46      	ldr	r3, [pc, #280]	; (1aac <_usb_d_dev_in_next+0x190>)
    1994:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1996:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1998:	016a      	lsls	r2, r5, #5
    199a:	4b41      	ldr	r3, [pc, #260]	; (1aa0 <_usb_d_dev_in_next+0x184>)
    199c:	189b      	adds	r3, r3, r2
    199e:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    19a0:	016a      	lsls	r2, r5, #5
    19a2:	4b3f      	ldr	r3, [pc, #252]	; (1aa0 <_usb_d_dev_in_next+0x184>)
    19a4:	189b      	adds	r3, r3, r2
    19a6:	695a      	ldr	r2, [r3, #20]
    19a8:	4641      	mov	r1, r8
    19aa:	0489      	lsls	r1, r1, #18
    19ac:	0c89      	lsrs	r1, r1, #18
    19ae:	0b92      	lsrs	r2, r2, #14
    19b0:	0392      	lsls	r2, r2, #14
    19b2:	430a      	orrs	r2, r1
    19b4:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    19b6:	695a      	ldr	r2, [r3, #20]
    19b8:	493d      	ldr	r1, [pc, #244]	; (1ab0 <_usb_d_dev_in_next+0x194>)
    19ba:	400a      	ands	r2, r1
    19bc:	615a      	str	r2, [r3, #20]
	if (!isr) {
    19be:	2e00      	cmp	r6, #0
    19c0:	d107      	bne.n	19d2 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    19c2:	2f01      	cmp	r7, #1
    19c4:	d059      	beq.n	1a7a <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    19c6:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19c8:	016b      	lsls	r3, r5, #5
    19ca:	493a      	ldr	r1, [pc, #232]	; (1ab4 <_usb_d_dev_in_next+0x198>)
    19cc:	468c      	mov	ip, r1
    19ce:	4463      	add	r3, ip
    19d0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19d2:	016d      	lsls	r5, r5, #5
    19d4:	4b34      	ldr	r3, [pc, #208]	; (1aa8 <_usb_d_dev_in_next+0x18c>)
    19d6:	469c      	mov	ip, r3
    19d8:	4465      	add	r5, ip
    19da:	2380      	movs	r3, #128	; 0x80
    19dc:	716b      	strb	r3, [r5, #5]
}
    19de:	bc04      	pop	{r2}
    19e0:	4690      	mov	r8, r2
    19e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19e4:	1c1a      	adds	r2, r3, #0
    19e6:	2080      	movs	r0, #128	; 0x80
    19e8:	0180      	lsls	r0, r0, #6
    19ea:	4283      	cmp	r3, r0
    19ec:	d901      	bls.n	19f2 <_usb_d_dev_in_next+0xd6>
    19ee:	4b32      	ldr	r3, [pc, #200]	; (1ab8 <_usb_d_dev_in_next+0x19c>)
    19f0:	881a      	ldrh	r2, [r3, #0]
    19f2:	b293      	uxth	r3, r2
    19f4:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    19f6:	6823      	ldr	r3, [r4, #0]
    19f8:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    19fa:	016a      	lsls	r2, r5, #5
    19fc:	4b28      	ldr	r3, [pc, #160]	; (1aa0 <_usb_d_dev_in_next+0x184>)
    19fe:	189b      	adds	r3, r3, r2
    1a00:	6119      	str	r1, [r3, #16]
    1a02:	e7cd      	b.n	19a0 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1a04:	7ce3      	ldrb	r3, [r4, #19]
    1a06:	06db      	lsls	r3, r3, #27
    1a08:	d50f      	bpl.n	1a2a <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1a0a:	7ce3      	ldrb	r3, [r4, #19]
    1a0c:	2210      	movs	r2, #16
    1a0e:	4393      	bics	r3, r2
    1a10:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1a12:	016a      	lsls	r2, r5, #5
    1a14:	4b22      	ldr	r3, [pc, #136]	; (1aa0 <_usb_d_dev_in_next+0x184>)
    1a16:	189b      	adds	r3, r3, r2
    1a18:	695a      	ldr	r2, [r3, #20]
    1a1a:	0b92      	lsrs	r2, r2, #14
    1a1c:	0392      	lsls	r2, r2, #14
    1a1e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1a20:	695a      	ldr	r2, [r3, #20]
    1a22:	4923      	ldr	r1, [pc, #140]	; (1ab0 <_usb_d_dev_in_next+0x194>)
    1a24:	400a      	ands	r2, r1
    1a26:	615a      	str	r2, [r3, #20]
    1a28:	e7c9      	b.n	19be <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1a2a:	2f01      	cmp	r7, #1
    1a2c:	d00e      	beq.n	1a4c <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a2e:	016d      	lsls	r5, r5, #5
    1a30:	4b22      	ldr	r3, [pc, #136]	; (1abc <_usb_d_dev_in_next+0x1a0>)
    1a32:	469c      	mov	ip, r3
    1a34:	4465      	add	r5, ip
    1a36:	234a      	movs	r3, #74	; 0x4a
    1a38:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1a3a:	8a21      	ldrh	r1, [r4, #16]
    1a3c:	4002      	ands	r2, r0
    1a3e:	4291      	cmp	r1, r2
    1a40:	d00b      	beq.n	1a5a <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1a42:	2100      	movs	r1, #0
    1a44:	0020      	movs	r0, r4
    1a46:	4b1e      	ldr	r3, [pc, #120]	; (1ac0 <_usb_d_dev_in_next+0x1a4>)
    1a48:	4798      	blx	r3
	return;
    1a4a:	e7c8      	b.n	19de <_usb_d_dev_in_next+0xc2>
    1a4c:	016d      	lsls	r5, r5, #5
    1a4e:	4b1b      	ldr	r3, [pc, #108]	; (1abc <_usb_d_dev_in_next+0x1a0>)
    1a50:	469c      	mov	ip, r3
    1a52:	4465      	add	r5, ip
    1a54:	234b      	movs	r3, #75	; 0x4b
    1a56:	702b      	strb	r3, [r5, #0]
    1a58:	e7ef      	b.n	1a3a <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1a5a:	7ce3      	ldrb	r3, [r4, #19]
    1a5c:	2240      	movs	r2, #64	; 0x40
    1a5e:	4393      	bics	r3, r2
    1a60:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1a62:	7ca0      	ldrb	r0, [r4, #18]
    1a64:	4b17      	ldr	r3, [pc, #92]	; (1ac4 <_usb_d_dev_in_next+0x1a8>)
    1a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a68:	68a1      	ldr	r1, [r4, #8]
    1a6a:	4798      	blx	r3
    1a6c:	2800      	cmp	r0, #0
    1a6e:	d1b6      	bne.n	19de <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1a70:	7ce3      	ldrb	r3, [r4, #19]
    1a72:	2240      	movs	r2, #64	; 0x40
    1a74:	4313      	orrs	r3, r2
    1a76:	74e3      	strb	r3, [r4, #19]
    1a78:	e7e3      	b.n	1a42 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1a7a:	224e      	movs	r2, #78	; 0x4e
    1a7c:	e7a4      	b.n	19c8 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a7e:	7ce7      	ldrb	r7, [r4, #19]
    1a80:	2307      	movs	r3, #7
    1a82:	401f      	ands	r7, r3
    1a84:	4a07      	ldr	r2, [pc, #28]	; (1aa4 <_usb_d_dev_in_next+0x188>)
    1a86:	e766      	b.n	1956 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1a88:	8a03      	ldrh	r3, [r0, #16]
    1a8a:	4a06      	ldr	r2, [pc, #24]	; (1aa4 <_usb_d_dev_in_next+0x188>)
    1a8c:	2000      	movs	r0, #0
    1a8e:	4293      	cmp	r3, r2
    1a90:	d000      	beq.n	1a94 <_usb_d_dev_in_next+0x178>
    1a92:	e759      	b.n	1948 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a94:	7ce3      	ldrb	r3, [r4, #19]
    1a96:	2707      	movs	r7, #7
    1a98:	401f      	ands	r7, r3
    1a9a:	2000      	movs	r0, #0
    1a9c:	4a01      	ldr	r2, [pc, #4]	; (1aa4 <_usb_d_dev_in_next+0x188>)
    1a9e:	e760      	b.n	1962 <_usb_d_dev_in_next+0x46>
    1aa0:	20000588 	.word	0x20000588
    1aa4:	000003ff 	.word	0x000003ff
    1aa8:	41005100 	.word	0x41005100
    1aac:	00003d6d 	.word	0x00003d6d
    1ab0:	f0003fff 	.word	0xf0003fff
    1ab4:	41005109 	.word	0x41005109
    1ab8:	000041ac 	.word	0x000041ac
    1abc:	41005108 	.word	0x41005108
    1ac0:	00001741 	.word	0x00001741
    1ac4:	20000608 	.word	0x20000608

00001ac8 <_usb_d_dev_out_next>:
{
    1ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aca:	46de      	mov	lr, fp
    1acc:	4657      	mov	r7, sl
    1ace:	464e      	mov	r6, r9
    1ad0:	4645      	mov	r5, r8
    1ad2:	b5e0      	push	{r5, r6, r7, lr}
    1ad4:	0004      	movs	r4, r0
    1ad6:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1ad8:	7c83      	ldrb	r3, [r0, #18]
    1ada:	250f      	movs	r5, #15
    1adc:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1ade:	2900      	cmp	r1, #0
    1ae0:	d057      	beq.n	1b92 <_usb_d_dev_out_next+0xca>
    1ae2:	016a      	lsls	r2, r5, #5
    1ae4:	4b7d      	ldr	r3, [pc, #500]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1ae6:	189b      	adds	r3, r3, r2
    1ae8:	685a      	ldr	r2, [r3, #4]
    1aea:	0112      	lsls	r2, r2, #4
    1aec:	0c92      	lsrs	r2, r2, #18
    1aee:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1af0:	685f      	ldr	r7, [r3, #4]
    1af2:	04bf      	lsls	r7, r7, #18
    1af4:	0cbf      	lsrs	r7, r7, #18
    1af6:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1af8:	8a06      	ldrh	r6, [r0, #16]
    1afa:	4b79      	ldr	r3, [pc, #484]	; (1ce0 <_usb_d_dev_out_next+0x218>)
    1afc:	429e      	cmp	r6, r3
    1afe:	d100      	bne.n	1b02 <_usb_d_dev_out_next+0x3a>
    1b00:	e0cd      	b.n	1c9e <_usb_d_dev_out_next+0x1d6>
    1b02:	3e01      	subs	r6, #1
    1b04:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1b06:	465f      	mov	r7, fp
    1b08:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b0a:	7ce3      	ldrb	r3, [r4, #19]
    1b0c:	2207      	movs	r2, #7
    1b0e:	401a      	ands	r2, r3
    1b10:	4691      	mov	r9, r2
	if (isr) {
    1b12:	4643      	mov	r3, r8
    1b14:	2b00      	cmp	r3, #0
    1b16:	d005      	beq.n	1b24 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b18:	016b      	lsls	r3, r5, #5
    1b1a:	4a72      	ldr	r2, [pc, #456]	; (1ce4 <_usb_d_dev_out_next+0x21c>)
    1b1c:	4694      	mov	ip, r2
    1b1e:	4463      	add	r3, ip
    1b20:	2201      	movs	r2, #1
    1b22:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1b24:	7ce3      	ldrb	r3, [r4, #19]
    1b26:	069b      	lsls	r3, r3, #26
    1b28:	d50f      	bpl.n	1b4a <_usb_d_dev_out_next+0x82>
    1b2a:	6863      	ldr	r3, [r4, #4]
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d039      	beq.n	1ba4 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1b30:	68a0      	ldr	r0, [r4, #8]
    1b32:	1a1b      	subs	r3, r3, r0
    1b34:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1b36:	6822      	ldr	r2, [r4, #0]
    1b38:	4694      	mov	ip, r2
    1b3a:	4460      	add	r0, ip
    1b3c:	68e1      	ldr	r1, [r4, #12]
    1b3e:	001a      	movs	r2, r3
    1b40:	42bb      	cmp	r3, r7
    1b42:	d900      	bls.n	1b46 <_usb_d_dev_out_next+0x7e>
    1b44:	003a      	movs	r2, r7
    1b46:	4b68      	ldr	r3, [pc, #416]	; (1ce8 <_usb_d_dev_out_next+0x220>)
    1b48:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1b4a:	6863      	ldr	r3, [r4, #4]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d029      	beq.n	1ba4 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1b50:	4642      	mov	r2, r8
    1b52:	2a00      	cmp	r2, #0
    1b54:	d042      	beq.n	1bdc <_usb_d_dev_out_next+0x114>
    1b56:	8a22      	ldrh	r2, [r4, #16]
    1b58:	42ba      	cmp	r2, r7
    1b5a:	d93f      	bls.n	1bdc <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1b5c:	7ce3      	ldrb	r3, [r4, #19]
    1b5e:	2210      	movs	r2, #16
    1b60:	4393      	bics	r3, r2
    1b62:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1b64:	68a3      	ldr	r3, [r4, #8]
    1b66:	445b      	add	r3, fp
    1b68:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1b6a:	464b      	mov	r3, r9
    1b6c:	2b01      	cmp	r3, #1
    1b6e:	d100      	bne.n	1b72 <_usb_d_dev_out_next+0xaa>
    1b70:	e087      	b.n	1c82 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b72:	016b      	lsls	r3, r5, #5
    1b74:	4a5d      	ldr	r2, [pc, #372]	; (1cec <_usb_d_dev_out_next+0x224>)
    1b76:	4694      	mov	ip, r2
    1b78:	4463      	add	r3, ip
    1b7a:	2225      	movs	r2, #37	; 0x25
    1b7c:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1b7e:	2d00      	cmp	r5, #0
    1b80:	d102      	bne.n	1b88 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1b82:	4b56      	ldr	r3, [pc, #344]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1b84:	68e2      	ldr	r2, [r4, #12]
    1b86:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1b88:	2100      	movs	r1, #0
    1b8a:	0020      	movs	r0, r4
    1b8c:	4b58      	ldr	r3, [pc, #352]	; (1cf0 <_usb_d_dev_out_next+0x228>)
    1b8e:	4798      	blx	r3
	return;
    1b90:	e059      	b.n	1c46 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b92:	8a06      	ldrh	r6, [r0, #16]
    1b94:	4b52      	ldr	r3, [pc, #328]	; (1ce0 <_usb_d_dev_out_next+0x218>)
    1b96:	429e      	cmp	r6, r3
    1b98:	d100      	bne.n	1b9c <_usb_d_dev_out_next+0xd4>
    1b9a:	e08e      	b.n	1cba <_usb_d_dev_out_next+0x1f2>
    1b9c:	2300      	movs	r3, #0
    1b9e:	469b      	mov	fp, r3
    1ba0:	469a      	mov	sl, r3
    1ba2:	e7ae      	b.n	1b02 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1ba4:	7ce3      	ldrb	r3, [r4, #19]
    1ba6:	06db      	lsls	r3, r3, #27
    1ba8:	d400      	bmi.n	1bac <_usb_d_dev_out_next+0xe4>
    1baa:	e07f      	b.n	1cac <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1bac:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1bae:	2210      	movs	r2, #16
    1bb0:	4393      	bics	r3, r2
    1bb2:	2220      	movs	r2, #32
    1bb4:	4313      	orrs	r3, r2
    1bb6:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1bb8:	4a48      	ldr	r2, [pc, #288]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1bba:	016b      	lsls	r3, r5, #5
    1bbc:	68e1      	ldr	r1, [r4, #12]
    1bbe:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1bc0:	8a21      	ldrh	r1, [r4, #16]
    1bc2:	18d3      	adds	r3, r2, r3
    1bc4:	685a      	ldr	r2, [r3, #4]
    1bc6:	0489      	lsls	r1, r1, #18
    1bc8:	0909      	lsrs	r1, r1, #4
    1bca:	484a      	ldr	r0, [pc, #296]	; (1cf4 <_usb_d_dev_out_next+0x22c>)
    1bcc:	4002      	ands	r2, r0
    1bce:	430a      	orrs	r2, r1
    1bd0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1bd2:	685a      	ldr	r2, [r3, #4]
    1bd4:	0b92      	lsrs	r2, r2, #14
    1bd6:	0392      	lsls	r2, r2, #14
    1bd8:	605a      	str	r2, [r3, #4]
    1bda:	e022      	b.n	1c22 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1bdc:	68a2      	ldr	r2, [r4, #8]
    1bde:	4452      	add	r2, sl
    1be0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1be2:	4293      	cmp	r3, r2
    1be4:	d9c1      	bls.n	1b6a <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1be6:	1a9b      	subs	r3, r3, r2
    1be8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1bea:	7ce1      	ldrb	r1, [r4, #19]
    1bec:	0689      	lsls	r1, r1, #26
    1bee:	d530      	bpl.n	1c52 <_usb_d_dev_out_next+0x18a>
    1bf0:	8a22      	ldrh	r2, [r4, #16]
    1bf2:	1c11      	adds	r1, r2, #0
    1bf4:	b292      	uxth	r2, r2
    1bf6:	429a      	cmp	r2, r3
    1bf8:	d900      	bls.n	1bfc <_usb_d_dev_out_next+0x134>
    1bfa:	1c19      	adds	r1, r3, #0
    1bfc:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1bfe:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1c00:	016a      	lsls	r2, r5, #5
    1c02:	4936      	ldr	r1, [pc, #216]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1c04:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1c06:	016a      	lsls	r2, r5, #5
    1c08:	4934      	ldr	r1, [pc, #208]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1c0a:	1889      	adds	r1, r1, r2
    1c0c:	684a      	ldr	r2, [r1, #4]
    1c0e:	049b      	lsls	r3, r3, #18
    1c10:	091b      	lsrs	r3, r3, #4
    1c12:	4838      	ldr	r0, [pc, #224]	; (1cf4 <_usb_d_dev_out_next+0x22c>)
    1c14:	4002      	ands	r2, r0
    1c16:	4313      	orrs	r3, r2
    1c18:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1c1a:	684b      	ldr	r3, [r1, #4]
    1c1c:	0b9b      	lsrs	r3, r3, #14
    1c1e:	039b      	lsls	r3, r3, #14
    1c20:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1c22:	4643      	mov	r3, r8
    1c24:	2b00      	cmp	r3, #0
    1c26:	d108      	bne.n	1c3a <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1c28:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1c2a:	464b      	mov	r3, r9
    1c2c:	2b01      	cmp	r3, #1
    1c2e:	d02f      	beq.n	1c90 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c30:	016b      	lsls	r3, r5, #5
    1c32:	4931      	ldr	r1, [pc, #196]	; (1cf8 <_usb_d_dev_out_next+0x230>)
    1c34:	468c      	mov	ip, r1
    1c36:	4463      	add	r3, ip
    1c38:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1c3a:	016d      	lsls	r5, r5, #5
    1c3c:	4b29      	ldr	r3, [pc, #164]	; (1ce4 <_usb_d_dev_out_next+0x21c>)
    1c3e:	469c      	mov	ip, r3
    1c40:	4465      	add	r5, ip
    1c42:	2340      	movs	r3, #64	; 0x40
    1c44:	712b      	strb	r3, [r5, #4]
}
    1c46:	bc3c      	pop	{r2, r3, r4, r5}
    1c48:	4690      	mov	r8, r2
    1c4a:	4699      	mov	r9, r3
    1c4c:	46a2      	mov	sl, r4
    1c4e:	46ab      	mov	fp, r5
    1c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1c52:	8a21      	ldrh	r1, [r4, #16]
    1c54:	428b      	cmp	r3, r1
    1c56:	d90a      	bls.n	1c6e <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1c58:	2180      	movs	r1, #128	; 0x80
    1c5a:	0189      	lsls	r1, r1, #6
    1c5c:	428b      	cmp	r3, r1
    1c5e:	d80d      	bhi.n	1c7c <_usb_d_dev_out_next+0x1b4>
    1c60:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1c62:	6821      	ldr	r1, [r4, #0]
    1c64:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1c66:	0169      	lsls	r1, r5, #5
    1c68:	481c      	ldr	r0, [pc, #112]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1c6a:	500a      	str	r2, [r1, r0]
    1c6c:	e7cb      	b.n	1c06 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1c6e:	428b      	cmp	r3, r1
    1c70:	d2f7      	bcs.n	1c62 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1c72:	7ce1      	ldrb	r1, [r4, #19]
    1c74:	2020      	movs	r0, #32
    1c76:	4301      	orrs	r1, r0
    1c78:	74e1      	strb	r1, [r4, #19]
    1c7a:	e7f2      	b.n	1c62 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1c7c:	2380      	movs	r3, #128	; 0x80
    1c7e:	019b      	lsls	r3, r3, #6
    1c80:	e7ef      	b.n	1c62 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c82:	016b      	lsls	r3, r5, #5
    1c84:	4a19      	ldr	r2, [pc, #100]	; (1cec <_usb_d_dev_out_next+0x224>)
    1c86:	4694      	mov	ip, r2
    1c88:	4463      	add	r3, ip
    1c8a:	222d      	movs	r2, #45	; 0x2d
    1c8c:	701a      	strb	r2, [r3, #0]
    1c8e:	e776      	b.n	1b7e <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1c90:	016a      	lsls	r2, r5, #5
    1c92:	4b12      	ldr	r3, [pc, #72]	; (1cdc <_usb_d_dev_out_next+0x214>)
    1c94:	189b      	adds	r3, r3, r2
    1c96:	2200      	movs	r2, #0
    1c98:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1c9a:	322d      	adds	r2, #45	; 0x2d
    1c9c:	e7c8      	b.n	1c30 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1c9e:	05bf      	lsls	r7, r7, #22
    1ca0:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ca2:	7cc3      	ldrb	r3, [r0, #19]
    1ca4:	2207      	movs	r2, #7
    1ca6:	401a      	ands	r2, r3
    1ca8:	4691      	mov	r9, r2
    1caa:	e735      	b.n	1b18 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1cac:	4643      	mov	r3, r8
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d10c      	bne.n	1ccc <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1cb2:	68a3      	ldr	r3, [r4, #8]
    1cb4:	4453      	add	r3, sl
    1cb6:	60a3      	str	r3, [r4, #8]
    1cb8:	e757      	b.n	1b6a <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1cba:	7cc3      	ldrb	r3, [r0, #19]
    1cbc:	2207      	movs	r2, #7
    1cbe:	401a      	ands	r2, r3
    1cc0:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1cc2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1cc4:	2300      	movs	r3, #0
    1cc6:	469b      	mov	fp, r3
    1cc8:	469a      	mov	sl, r3
    1cca:	e72b      	b.n	1b24 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1ccc:	8a23      	ldrh	r3, [r4, #16]
    1cce:	42bb      	cmp	r3, r7
    1cd0:	d900      	bls.n	1cd4 <_usb_d_dev_out_next+0x20c>
    1cd2:	e743      	b.n	1b5c <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1cd4:	68a3      	ldr	r3, [r4, #8]
    1cd6:	4453      	add	r3, sl
    1cd8:	60a3      	str	r3, [r4, #8]
    1cda:	e746      	b.n	1b6a <_usb_d_dev_out_next+0xa2>
    1cdc:	20000588 	.word	0x20000588
    1ce0:	000003ff 	.word	0x000003ff
    1ce4:	41005100 	.word	0x41005100
    1ce8:	00003d6d 	.word	0x00003d6d
    1cec:	41005108 	.word	0x41005108
    1cf0:	00001741 	.word	0x00001741
    1cf4:	f0003fff 	.word	0xf0003fff
    1cf8:	41005109 	.word	0x41005109

00001cfc <_usb_d_dev_init>:
{
    1cfc:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1cfe:	4b31      	ldr	r3, [pc, #196]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d00:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1d02:	07db      	lsls	r3, r3, #31
    1d04:	d41f      	bmi.n	1d46 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d06:	492f      	ldr	r1, [pc, #188]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d08:	2203      	movs	r2, #3
    1d0a:	788b      	ldrb	r3, [r1, #2]
    1d0c:	4213      	tst	r3, r2
    1d0e:	d1fc      	bne.n	1d0a <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1d10:	4b2c      	ldr	r3, [pc, #176]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d12:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1d14:	079b      	lsls	r3, r3, #30
    1d16:	d50e      	bpl.n	1d36 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1d18:	4a2a      	ldr	r2, [pc, #168]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d1a:	7813      	ldrb	r3, [r2, #0]
    1d1c:	2102      	movs	r1, #2
    1d1e:	438b      	bics	r3, r1
    1d20:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d22:	0011      	movs	r1, r2
    1d24:	2203      	movs	r2, #3
    1d26:	788b      	ldrb	r3, [r1, #2]
    1d28:	4213      	tst	r3, r2
    1d2a:	d1fc      	bne.n	1d26 <_usb_d_dev_init+0x2a>
    1d2c:	4925      	ldr	r1, [pc, #148]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d2e:	2202      	movs	r2, #2
    1d30:	788b      	ldrb	r3, [r1, #2]
    1d32:	4213      	tst	r3, r2
    1d34:	d1fc      	bne.n	1d30 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1d36:	2201      	movs	r2, #1
    1d38:	4b22      	ldr	r3, [pc, #136]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d3a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d3c:	0019      	movs	r1, r3
    1d3e:	3202      	adds	r2, #2
    1d40:	788b      	ldrb	r3, [r1, #2]
    1d42:	4213      	tst	r3, r2
    1d44:	d1fc      	bne.n	1d40 <_usb_d_dev_init+0x44>
    1d46:	491f      	ldr	r1, [pc, #124]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d48:	2201      	movs	r2, #1
    1d4a:	788b      	ldrb	r3, [r1, #2]
    1d4c:	4213      	tst	r3, r2
    1d4e:	d1fc      	bne.n	1d4a <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1d50:	4b1d      	ldr	r3, [pc, #116]	; (1dc8 <_usb_d_dev_init+0xcc>)
    1d52:	4a1e      	ldr	r2, [pc, #120]	; (1dcc <_usb_d_dev_init+0xd0>)
    1d54:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1d56:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1d58:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1d5c:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    1d5e:	4b1c      	ldr	r3, [pc, #112]	; (1dd0 <_usb_d_dev_init+0xd4>)
    1d60:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1d62:	4b1c      	ldr	r3, [pc, #112]	; (1dd4 <_usb_d_dev_init+0xd8>)
    1d64:	681b      	ldr	r3, [r3, #0]
    1d66:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1d68:	211f      	movs	r1, #31
    1d6a:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1d6c:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1d6e:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1d70:	019b      	lsls	r3, r3, #6
    1d72:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1d74:	2a1f      	cmp	r2, #31
    1d76:	d01f      	beq.n	1db8 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    1d78:	291f      	cmp	r1, #31
    1d7a:	d01f      	beq.n	1dbc <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1d7c:	2b07      	cmp	r3, #7
    1d7e:	d01f      	beq.n	1dc0 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1d80:	0192      	lsls	r2, r2, #6
    1d82:	430a      	orrs	r2, r1
    1d84:	031b      	lsls	r3, r3, #12
    1d86:	4313      	orrs	r3, r2
    1d88:	4a0e      	ldr	r2, [pc, #56]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1d8a:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1d8c:	78d3      	ldrb	r3, [r2, #3]
    1d8e:	2103      	movs	r1, #3
    1d90:	430b      	orrs	r3, r1
    1d92:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1d94:	78d3      	ldrb	r3, [r2, #3]
    1d96:	210c      	movs	r1, #12
    1d98:	430b      	orrs	r3, r1
    1d9a:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1d9c:	2304      	movs	r3, #4
    1d9e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1da0:	0011      	movs	r1, r2
    1da2:	2203      	movs	r2, #3
    1da4:	788b      	ldrb	r3, [r1, #2]
    1da6:	4213      	tst	r3, r2
    1da8:	d1fc      	bne.n	1da4 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1daa:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <_usb_d_dev_init+0xc8>)
    1dac:	4a0a      	ldr	r2, [pc, #40]	; (1dd8 <_usb_d_dev_init+0xdc>)
    1dae:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1db0:	2201      	movs	r2, #1
    1db2:	811a      	strh	r2, [r3, #8]
}
    1db4:	2000      	movs	r0, #0
    1db6:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1db8:	3a1a      	subs	r2, #26
    1dba:	e7dd      	b.n	1d78 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1dbc:	3902      	subs	r1, #2
    1dbe:	e7dd      	b.n	1d7c <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1dc0:	3b02      	subs	r3, #2
    1dc2:	e7dd      	b.n	1d80 <_usb_d_dev_init+0x84>
    1dc4:	41005000 	.word	0x41005000
    1dc8:	20000608 	.word	0x20000608
    1dcc:	00001679 	.word	0x00001679
    1dd0:	000018d5 	.word	0x000018d5
    1dd4:	00806024 	.word	0x00806024
    1dd8:	20000588 	.word	0x20000588

00001ddc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1ddc:	4b10      	ldr	r3, [pc, #64]	; (1e20 <_usb_d_dev_enable+0x44>)
    1dde:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1de0:	079b      	lsls	r3, r3, #30
    1de2:	d11a      	bne.n	1e1a <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1de4:	490e      	ldr	r1, [pc, #56]	; (1e20 <_usb_d_dev_enable+0x44>)
    1de6:	2203      	movs	r2, #3
    1de8:	788b      	ldrb	r3, [r1, #2]
    1dea:	4213      	tst	r3, r2
    1dec:	d1fc      	bne.n	1de8 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1dee:	4b0c      	ldr	r3, [pc, #48]	; (1e20 <_usb_d_dev_enable+0x44>)
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1df4:	079a      	lsls	r2, r3, #30
    1df6:	d408      	bmi.n	1e0a <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1df8:	2202      	movs	r2, #2
    1dfa:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1dfc:	4a08      	ldr	r2, [pc, #32]	; (1e20 <_usb_d_dev_enable+0x44>)
    1dfe:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1e00:	0011      	movs	r1, r2
    1e02:	2203      	movs	r2, #3
    1e04:	788b      	ldrb	r3, [r1, #2]
    1e06:	4213      	tst	r3, r2
    1e08:	d1fc      	bne.n	1e04 <_usb_d_dev_enable+0x28>
    1e0a:	2280      	movs	r2, #128	; 0x80
    1e0c:	4b05      	ldr	r3, [pc, #20]	; (1e24 <_usb_d_dev_enable+0x48>)
    1e0e:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1e10:	4a05      	ldr	r2, [pc, #20]	; (1e28 <_usb_d_dev_enable+0x4c>)
    1e12:	4b03      	ldr	r3, [pc, #12]	; (1e20 <_usb_d_dev_enable+0x44>)
    1e14:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1e16:	2000      	movs	r0, #0
}
    1e18:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1e1a:	2011      	movs	r0, #17
    1e1c:	4240      	negs	r0, r0
    1e1e:	e7fb      	b.n	1e18 <_usb_d_dev_enable+0x3c>
    1e20:	41005000 	.word	0x41005000
    1e24:	e000e100 	.word	0xe000e100
    1e28:	0000028d 	.word	0x0000028d

00001e2c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1e2c:	4a02      	ldr	r2, [pc, #8]	; (1e38 <_usb_d_dev_attach+0xc>)
    1e2e:	8913      	ldrh	r3, [r2, #8]
    1e30:	2101      	movs	r1, #1
    1e32:	438b      	bics	r3, r1
    1e34:	8113      	strh	r3, [r2, #8]
}
    1e36:	4770      	bx	lr
    1e38:	41005000 	.word	0x41005000

00001e3c <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1e3c:	2380      	movs	r3, #128	; 0x80
    1e3e:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1e40:	4b01      	ldr	r3, [pc, #4]	; (1e48 <_usb_d_dev_set_address+0xc>)
    1e42:	7298      	strb	r0, [r3, #10]
}
    1e44:	4770      	bx	lr
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	41005000 	.word	0x41005000

00001e4c <_usb_d_dev_ep_init>:
{
    1e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1e4e:	240f      	movs	r4, #15
    1e50:	4004      	ands	r4, r0
    1e52:	b243      	sxtb	r3, r0
    1e54:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e56:	2c00      	cmp	r4, #0
    1e58:	d054      	beq.n	1f04 <_usb_d_dev_ep_init+0xb8>
    1e5a:	0025      	movs	r5, r4
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	db07      	blt.n	1e70 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1e60:	2303      	movs	r3, #3
    1e62:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1e64:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1e66:	2c04      	cmp	r4, #4
    1e68:	d950      	bls.n	1f0c <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    1e6a:	2012      	movs	r0, #18
    1e6c:	4240      	negs	r0, r0
    1e6e:	e025      	b.n	1ebc <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e70:	1d25      	adds	r5, r4, #4
    1e72:	e7f5      	b.n	1e60 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e74:	4663      	mov	r3, ip
    1e76:	2b00      	cmp	r3, #0
    1e78:	db21      	blt.n	1ebe <_usb_d_dev_ep_init+0x72>
    1e7a:	007b      	lsls	r3, r7, #1
    1e7c:	19db      	adds	r3, r3, r7
    1e7e:	009b      	lsls	r3, r3, #2
    1e80:	4c3b      	ldr	r4, [pc, #236]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1e82:	591b      	ldr	r3, [r3, r4]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d166      	bne.n	1f56 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1e88:	007b      	lsls	r3, r7, #1
    1e8a:	19df      	adds	r7, r3, r7
    1e8c:	00bf      	lsls	r7, r7, #2
    1e8e:	4b38      	ldr	r3, [pc, #224]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1e90:	58ff      	ldr	r7, [r7, r3]
    1e92:	4b38      	ldr	r3, [pc, #224]	; (1f74 <_usb_d_dev_ep_init+0x128>)
    1e94:	00ae      	lsls	r6, r5, #2
    1e96:	1974      	adds	r4, r6, r5
    1e98:	00a4      	lsls	r4, r4, #2
    1e9a:	191c      	adds	r4, r3, r4
    1e9c:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    1e9e:	3444      	adds	r4, #68	; 0x44
    1ea0:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    1ea2:	3320      	adds	r3, #32
    1ea4:	1972      	adds	r2, r6, r5
    1ea6:	0092      	lsls	r2, r2, #2
    1ea8:	189a      	adds	r2, r3, r2
    1eaa:	3227      	adds	r2, #39	; 0x27
    1eac:	3101      	adds	r1, #1
    1eae:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    1eb0:	1975      	adds	r5, r6, r5
    1eb2:	00ad      	lsls	r5, r5, #2
    1eb4:	195b      	adds	r3, r3, r5
    1eb6:	3326      	adds	r3, #38	; 0x26
    1eb8:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1eba:	2000      	movs	r0, #0
}
    1ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1ebe:	007b      	lsls	r3, r7, #1
    1ec0:	19db      	adds	r3, r3, r7
    1ec2:	009b      	lsls	r3, r3, #2
    1ec4:	4c2a      	ldr	r4, [pc, #168]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1ec6:	18e3      	adds	r3, r4, r3
    1ec8:	685b      	ldr	r3, [r3, #4]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d106      	bne.n	1edc <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1ece:	007b      	lsls	r3, r7, #1
    1ed0:	19df      	adds	r7, r3, r7
    1ed2:	00bf      	lsls	r7, r7, #2
    1ed4:	4b26      	ldr	r3, [pc, #152]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1ed6:	19df      	adds	r7, r3, r7
    1ed8:	687f      	ldr	r7, [r7, #4]
    1eda:	e7da      	b.n	1e92 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1edc:	007b      	lsls	r3, r7, #1
    1ede:	19db      	adds	r3, r3, r7
    1ee0:	009b      	lsls	r3, r3, #2
    1ee2:	4c23      	ldr	r4, [pc, #140]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1ee4:	18e3      	adds	r3, r4, r3
    1ee6:	895b      	ldrh	r3, [r3, #10]
    1ee8:	4293      	cmp	r3, r2
    1eea:	daf0      	bge.n	1ece <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    1eec:	2013      	movs	r0, #19
    1eee:	4240      	negs	r0, r0
    1ef0:	e7e4      	b.n	1ebc <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    1ef2:	2014      	movs	r0, #20
    1ef4:	4240      	negs	r0, r0
    1ef6:	e7e1      	b.n	1ebc <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1ef8:	2014      	movs	r0, #20
    1efa:	4240      	negs	r0, r0
    1efc:	e7de      	b.n	1ebc <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    1efe:	2013      	movs	r0, #19
    1f00:	4240      	negs	r0, r0
    1f02:	e7db      	b.n	1ebc <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1f04:	2303      	movs	r3, #3
    1f06:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1f08:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1f0a:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    1f0c:	00ab      	lsls	r3, r5, #2
    1f0e:	195b      	adds	r3, r3, r5
    1f10:	009e      	lsls	r6, r3, #2
    1f12:	4b18      	ldr	r3, [pc, #96]	; (1f74 <_usb_d_dev_ep_init+0x128>)
    1f14:	199b      	adds	r3, r3, r6
    1f16:	3346      	adds	r3, #70	; 0x46
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	2bff      	cmp	r3, #255	; 0xff
    1f1c:	d1e9      	bne.n	1ef2 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1f1e:	2900      	cmp	r1, #0
    1f20:	d1a8      	bne.n	1e74 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f22:	2c00      	cmp	r4, #0
    1f24:	d004      	beq.n	1f30 <_usb_d_dev_ep_init+0xe4>
    1f26:	4663      	mov	r3, ip
    1f28:	2b00      	cmp	r3, #0
    1f2a:	db01      	blt.n	1f30 <_usb_d_dev_ep_init+0xe4>
    1f2c:	3404      	adds	r4, #4
    1f2e:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1f30:	00a3      	lsls	r3, r4, #2
    1f32:	191b      	adds	r3, r3, r4
    1f34:	009b      	lsls	r3, r3, #2
    1f36:	4c0f      	ldr	r4, [pc, #60]	; (1f74 <_usb_d_dev_ep_init+0x128>)
    1f38:	18e4      	adds	r4, r4, r3
    1f3a:	3446      	adds	r4, #70	; 0x46
    1f3c:	7823      	ldrb	r3, [r4, #0]
    1f3e:	2bff      	cmp	r3, #255	; 0xff
    1f40:	d1da      	bne.n	1ef8 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    1f42:	007b      	lsls	r3, r7, #1
    1f44:	19db      	adds	r3, r3, r7
    1f46:	009b      	lsls	r3, r3, #2
    1f48:	4c09      	ldr	r4, [pc, #36]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1f4a:	591b      	ldr	r3, [r3, r4]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d0d6      	beq.n	1efe <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1f50:	4663      	mov	r3, ip
    1f52:	2b00      	cmp	r3, #0
    1f54:	dbb3      	blt.n	1ebe <_usb_d_dev_ep_init+0x72>
    1f56:	007b      	lsls	r3, r7, #1
    1f58:	19db      	adds	r3, r3, r7
    1f5a:	009b      	lsls	r3, r3, #2
    1f5c:	4c04      	ldr	r4, [pc, #16]	; (1f70 <_usb_d_dev_ep_init+0x124>)
    1f5e:	18e3      	adds	r3, r4, r3
    1f60:	891b      	ldrh	r3, [r3, #8]
    1f62:	4293      	cmp	r3, r2
    1f64:	db00      	blt.n	1f68 <_usb_d_dev_ep_init+0x11c>
    1f66:	e78f      	b.n	1e88 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1f68:	2013      	movs	r0, #19
    1f6a:	4240      	negs	r0, r0
    1f6c:	e7a6      	b.n	1ebc <_usb_d_dev_ep_init+0x70>
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	000041b0 	.word	0x000041b0
    1f74:	20000608 	.word	0x20000608

00001f78 <_usb_d_dev_ep_deinit>:
{
    1f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f7a:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    1f7c:	240f      	movs	r4, #15
    1f7e:	4004      	ands	r4, r0
    1f80:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f82:	2c00      	cmp	r4, #0
    1f84:	d010      	beq.n	1fa8 <_usb_d_dev_ep_deinit+0x30>
    1f86:	0020      	movs	r0, r4
    1f88:	2f00      	cmp	r7, #0
    1f8a:	db02      	blt.n	1f92 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f8c:	2c04      	cmp	r4, #4
    1f8e:	d902      	bls.n	1f96 <_usb_d_dev_ep_deinit+0x1e>
}
    1f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f92:	1d20      	adds	r0, r4, #4
    1f94:	e7fa      	b.n	1f8c <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    1f96:	0006      	movs	r6, r0
    1f98:	3001      	adds	r0, #1
    1f9a:	0083      	lsls	r3, r0, #2
    1f9c:	1818      	adds	r0, r3, r0
    1f9e:	0080      	lsls	r0, r0, #2
    1fa0:	4b25      	ldr	r3, [pc, #148]	; (2038 <STACK_SIZE+0x38>)
    1fa2:	3320      	adds	r3, #32
    1fa4:	1818      	adds	r0, r3, r0
    1fa6:	e002      	b.n	1fae <_usb_d_dev_ep_deinit+0x36>
    1fa8:	4823      	ldr	r0, [pc, #140]	; (2038 <STACK_SIZE+0x38>)
    1faa:	3034      	adds	r0, #52	; 0x34
    1fac:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1fae:	00b3      	lsls	r3, r6, #2
    1fb0:	199b      	adds	r3, r3, r6
    1fb2:	009a      	lsls	r2, r3, #2
    1fb4:	4b20      	ldr	r3, [pc, #128]	; (2038 <STACK_SIZE+0x38>)
    1fb6:	189b      	adds	r3, r3, r2
    1fb8:	3346      	adds	r3, #70	; 0x46
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	2bff      	cmp	r3, #255	; 0xff
    1fbe:	d0e7      	beq.n	1f90 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1fc0:	0ff9      	lsrs	r1, r7, #31
    1fc2:	2203      	movs	r2, #3
    1fc4:	4b1d      	ldr	r3, [pc, #116]	; (203c <STACK_SIZE+0x3c>)
    1fc6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1fc8:	00b3      	lsls	r3, r6, #2
    1fca:	199b      	adds	r3, r3, r6
    1fcc:	009a      	lsls	r2, r3, #2
    1fce:	4b1a      	ldr	r3, [pc, #104]	; (2038 <STACK_SIZE+0x38>)
    1fd0:	189b      	adds	r3, r3, r2
    1fd2:	3340      	adds	r3, #64	; 0x40
    1fd4:	79da      	ldrb	r2, [r3, #7]
    1fd6:	2307      	movs	r3, #7
    1fd8:	4013      	ands	r3, r2
    1fda:	2b01      	cmp	r3, #1
    1fdc:	d01b      	beq.n	2016 <STACK_SIZE+0x16>
	} else if (USB_EP_GET_DIR(ep)) {
    1fde:	2f00      	cmp	r7, #0
    1fe0:	db1f      	blt.n	2022 <STACK_SIZE+0x22>
    1fe2:	016d      	lsls	r5, r5, #5
    1fe4:	4b16      	ldr	r3, [pc, #88]	; (2040 <STACK_SIZE+0x40>)
    1fe6:	469c      	mov	ip, r3
    1fe8:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1fea:	2280      	movs	r2, #128	; 0x80
    1fec:	0052      	lsls	r2, r2, #1
    1fee:	5cab      	ldrb	r3, [r5, r2]
    1ff0:	2107      	movs	r1, #7
    1ff2:	438b      	bics	r3, r1
    1ff4:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    1ff6:	4b10      	ldr	r3, [pc, #64]	; (2038 <STACK_SIZE+0x38>)
    1ff8:	3320      	adds	r3, #32
    1ffa:	00b1      	lsls	r1, r6, #2
    1ffc:	198a      	adds	r2, r1, r6
    1ffe:	0092      	lsls	r2, r2, #2
    2000:	189a      	adds	r2, r3, r2
    2002:	3227      	adds	r2, #39	; 0x27
    2004:	2000      	movs	r0, #0
    2006:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2008:	198e      	adds	r6, r1, r6
    200a:	00b6      	lsls	r6, r6, #2
    200c:	199b      	adds	r3, r3, r6
    200e:	3326      	adds	r3, #38	; 0x26
    2010:	22ff      	movs	r2, #255	; 0xff
    2012:	701a      	strb	r2, [r3, #0]
    2014:	e7bc      	b.n	1f90 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2016:	3508      	adds	r5, #8
    2018:	016d      	lsls	r5, r5, #5
    201a:	2200      	movs	r2, #0
    201c:	4b08      	ldr	r3, [pc, #32]	; (2040 <STACK_SIZE+0x40>)
    201e:	54ea      	strb	r2, [r5, r3]
    2020:	e7e9      	b.n	1ff6 <_usb_d_dev_ep_deinit+0x7e>
    2022:	0164      	lsls	r4, r4, #5
    2024:	4b06      	ldr	r3, [pc, #24]	; (2040 <STACK_SIZE+0x40>)
    2026:	469c      	mov	ip, r3
    2028:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    202a:	2280      	movs	r2, #128	; 0x80
    202c:	0052      	lsls	r2, r2, #1
    202e:	5ca3      	ldrb	r3, [r4, r2]
    2030:	2170      	movs	r1, #112	; 0x70
    2032:	438b      	bics	r3, r1
    2034:	54a3      	strb	r3, [r4, r2]
    2036:	e7de      	b.n	1ff6 <_usb_d_dev_ep_deinit+0x7e>
    2038:	20000608 	.word	0x20000608
    203c:	00001769 	.word	0x00001769
    2040:	41005000 	.word	0x41005000

00002044 <_usb_d_dev_ep_enable>:
{
    2044:	b5f0      	push	{r4, r5, r6, r7, lr}
    2046:	46c6      	mov	lr, r8
    2048:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    204a:	220f      	movs	r2, #15
    204c:	4002      	ands	r2, r0
    204e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2050:	2a00      	cmp	r2, #0
    2052:	d100      	bne.n	2056 <_usb_d_dev_ep_enable+0x12>
    2054:	e092      	b.n	217c <_usb_d_dev_ep_enable+0x138>
    2056:	0013      	movs	r3, r2
    2058:	2800      	cmp	r0, #0
    205a:	db0b      	blt.n	2074 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    205c:	0011      	movs	r1, r2
    205e:	3208      	adds	r2, #8
    2060:	0152      	lsls	r2, r2, #5
    2062:	4cab      	ldr	r4, [pc, #684]	; (2310 <_usb_d_dev_ep_enable+0x2cc>)
    2064:	5d15      	ldrb	r5, [r2, r4]
    2066:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2068:	2904      	cmp	r1, #4
    206a:	d800      	bhi.n	206e <_usb_d_dev_ep_enable+0x2a>
    206c:	e08d      	b.n	218a <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    206e:	2012      	movs	r0, #18
    2070:	4240      	negs	r0, r0
    2072:	e0e6      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2074:	1d13      	adds	r3, r2, #4
    2076:	e7f1      	b.n	205c <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2078:	2077      	movs	r0, #119	; 0x77
    207a:	4228      	tst	r0, r5
    207c:	d175      	bne.n	216a <_usb_d_dev_ep_enable+0x126>
    207e:	48a4      	ldr	r0, [pc, #656]	; (2310 <_usb_d_dev_ep_enable+0x2cc>)
    2080:	4680      	mov	r8, r0
    2082:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2084:	3410      	adds	r4, #16
    2086:	2080      	movs	r0, #128	; 0x80
    2088:	0040      	lsls	r0, r0, #1
    208a:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    208c:	0098      	lsls	r0, r3, #2
    208e:	18c0      	adds	r0, r0, r3
    2090:	0084      	lsls	r4, r0, #2
    2092:	48a0      	ldr	r0, [pc, #640]	; (2314 <_usb_d_dev_ep_enable+0x2d0>)
    2094:	1900      	adds	r0, r0, r4
    2096:	3044      	adds	r0, #68	; 0x44
    2098:	8800      	ldrh	r0, [r0, #0]
    209a:	0385      	lsls	r5, r0, #14
    209c:	4c9e      	ldr	r4, [pc, #632]	; (2318 <_usb_d_dev_ep_enable+0x2d4>)
    209e:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20a0:	2480      	movs	r4, #128	; 0x80
    20a2:	00a4      	lsls	r4, r4, #2
    20a4:	42a0      	cmp	r0, r4
    20a6:	d900      	bls.n	20aa <_usb_d_dev_ep_enable+0x66>
    20a8:	e0ce      	b.n	2248 <_usb_d_dev_ep_enable+0x204>
    20aa:	3c01      	subs	r4, #1
    20ac:	3cff      	subs	r4, #255	; 0xff
    20ae:	42a0      	cmp	r0, r4
    20b0:	d900      	bls.n	20b4 <_usb_d_dev_ep_enable+0x70>
    20b2:	e114      	b.n	22de <_usb_d_dev_ep_enable+0x29a>
    20b4:	2880      	cmp	r0, #128	; 0x80
    20b6:	d900      	bls.n	20ba <_usb_d_dev_ep_enable+0x76>
    20b8:	e101      	b.n	22be <_usb_d_dev_ep_enable+0x27a>
    20ba:	2840      	cmp	r0, #64	; 0x40
    20bc:	d900      	bls.n	20c0 <_usb_d_dev_ep_enable+0x7c>
    20be:	e116      	b.n	22ee <_usb_d_dev_ep_enable+0x2aa>
    20c0:	2820      	cmp	r0, #32
    20c2:	d900      	bls.n	20c6 <_usb_d_dev_ep_enable+0x82>
    20c4:	e103      	b.n	22ce <_usb_d_dev_ep_enable+0x28a>
    20c6:	2810      	cmp	r0, #16
    20c8:	d900      	bls.n	20cc <_usb_d_dev_ep_enable+0x88>
    20ca:	e118      	b.n	22fe <_usb_d_dev_ep_enable+0x2ba>
    20cc:	3cf8      	subs	r4, #248	; 0xf8
    20ce:	4284      	cmp	r4, r0
    20d0:	41a4      	sbcs	r4, r4
    20d2:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20d4:	0726      	lsls	r6, r4, #28
    20d6:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20d8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20da:	0485      	lsls	r5, r0, #18
    20dc:	0cad      	lsrs	r5, r5, #18
    20de:	e0ba      	b.n	2256 <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    20e0:	2070      	movs	r0, #112	; 0x70
    20e2:	4228      	tst	r0, r5
    20e4:	d144      	bne.n	2170 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    20e6:	4c8b      	ldr	r4, [pc, #556]	; (2314 <_usb_d_dev_ep_enable+0x2d0>)
    20e8:	009e      	lsls	r6, r3, #2
    20ea:	18f0      	adds	r0, r6, r3
    20ec:	0080      	lsls	r0, r0, #2
    20ee:	1820      	adds	r0, r4, r0
    20f0:	3040      	adds	r0, #64	; 0x40
    20f2:	79c0      	ldrb	r0, [r0, #7]
    20f4:	0740      	lsls	r0, r0, #29
    20f6:	0e40      	lsrs	r0, r0, #25
    20f8:	4305      	orrs	r5, r0
    20fa:	4885      	ldr	r0, [pc, #532]	; (2310 <_usb_d_dev_ep_enable+0x2cc>)
    20fc:	4684      	mov	ip, r0
    20fe:	4462      	add	r2, ip
    2100:	2080      	movs	r0, #128	; 0x80
    2102:	0040      	lsls	r0, r0, #1
    2104:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2106:	18f6      	adds	r6, r6, r3
    2108:	00b6      	lsls	r6, r6, #2
    210a:	19a4      	adds	r4, r4, r6
    210c:	3444      	adds	r4, #68	; 0x44
    210e:	8824      	ldrh	r4, [r4, #0]
    2110:	04a5      	lsls	r5, r4, #18
    2112:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2114:	3001      	adds	r0, #1
    2116:	30ff      	adds	r0, #255	; 0xff
    2118:	2307      	movs	r3, #7
    211a:	4284      	cmp	r4, r0
    211c:	d814      	bhi.n	2148 <_usb_d_dev_ep_enable+0x104>
    211e:	3801      	subs	r0, #1
    2120:	38ff      	subs	r0, #255	; 0xff
    2122:	3b01      	subs	r3, #1
    2124:	4284      	cmp	r4, r0
    2126:	d80f      	bhi.n	2148 <_usb_d_dev_ep_enable+0x104>
    2128:	3b01      	subs	r3, #1
    212a:	2c80      	cmp	r4, #128	; 0x80
    212c:	d80c      	bhi.n	2148 <_usb_d_dev_ep_enable+0x104>
    212e:	3b01      	subs	r3, #1
    2130:	2c40      	cmp	r4, #64	; 0x40
    2132:	d809      	bhi.n	2148 <_usb_d_dev_ep_enable+0x104>
    2134:	3b01      	subs	r3, #1
    2136:	2c20      	cmp	r4, #32
    2138:	d806      	bhi.n	2148 <_usb_d_dev_ep_enable+0x104>
    213a:	3b01      	subs	r3, #1
    213c:	2c10      	cmp	r4, #16
    213e:	d803      	bhi.n	2148 <_usb_d_dev_ep_enable+0x104>
    2140:	38f8      	subs	r0, #248	; 0xf8
    2142:	42a0      	cmp	r0, r4
    2144:	4180      	sbcs	r0, r0
    2146:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2148:	071b      	lsls	r3, r3, #28
    214a:	432b      	orrs	r3, r5
    214c:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    214e:	2080      	movs	r0, #128	; 0x80
    2150:	2382      	movs	r3, #130	; 0x82
    2152:	005b      	lsls	r3, r3, #1
    2154:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    2156:	0149      	lsls	r1, r1, #5
    2158:	4b70      	ldr	r3, [pc, #448]	; (231c <_usb_d_dev_ep_enable+0x2d8>)
    215a:	1859      	adds	r1, r3, r1
    215c:	2300      	movs	r3, #0
    215e:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2160:	2000      	movs	r0, #0
    2162:	e06e      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    2164:	2012      	movs	r0, #18
    2166:	4240      	negs	r0, r0
    2168:	e06b      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    216a:	2014      	movs	r0, #20
    216c:	4240      	negs	r0, r0
    216e:	e068      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2170:	2014      	movs	r0, #20
    2172:	4240      	negs	r0, r0
    2174:	e065      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2176:	2014      	movs	r0, #20
    2178:	4240      	negs	r0, r0
    217a:	e062      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    217c:	2380      	movs	r3, #128	; 0x80
    217e:	005b      	lsls	r3, r3, #1
    2180:	4a63      	ldr	r2, [pc, #396]	; (2310 <_usb_d_dev_ep_enable+0x2cc>)
    2182:	5cd5      	ldrb	r5, [r2, r3]
    2184:	b2ed      	uxtb	r5, r5
    2186:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    2188:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    218a:	009a      	lsls	r2, r3, #2
    218c:	18d2      	adds	r2, r2, r3
    218e:	0094      	lsls	r4, r2, #2
    2190:	4a60      	ldr	r2, [pc, #384]	; (2314 <_usb_d_dev_ep_enable+0x2d0>)
    2192:	1912      	adds	r2, r2, r4
    2194:	3246      	adds	r2, #70	; 0x46
    2196:	7812      	ldrb	r2, [r2, #0]
    2198:	4694      	mov	ip, r2
    219a:	2aff      	cmp	r2, #255	; 0xff
    219c:	d0e2      	beq.n	2164 <_usb_d_dev_ep_enable+0x120>
    219e:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    21a0:	4f5e      	ldr	r7, [pc, #376]	; (231c <_usb_d_dev_ep_enable+0x2d8>)
    21a2:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    21a4:	009c      	lsls	r4, r3, #2
    21a6:	18e4      	adds	r4, r4, r3
    21a8:	00a6      	lsls	r6, r4, #2
    21aa:	4c5a      	ldr	r4, [pc, #360]	; (2314 <_usb_d_dev_ep_enable+0x2d0>)
    21ac:	19a4      	adds	r4, r4, r6
    21ae:	3440      	adds	r4, #64	; 0x40
    21b0:	79e6      	ldrb	r6, [r4, #7]
    21b2:	2407      	movs	r4, #7
    21b4:	4034      	ands	r4, r6
    21b6:	2c01      	cmp	r4, #1
    21b8:	d100      	bne.n	21bc <_usb_d_dev_ep_enable+0x178>
    21ba:	e75d      	b.n	2078 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    21bc:	2800      	cmp	r0, #0
    21be:	db8f      	blt.n	20e0 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    21c0:	0768      	lsls	r0, r5, #29
    21c2:	d1d8      	bne.n	2176 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    21c4:	4c53      	ldr	r4, [pc, #332]	; (2314 <_usb_d_dev_ep_enable+0x2d0>)
    21c6:	009e      	lsls	r6, r3, #2
    21c8:	18f0      	adds	r0, r6, r3
    21ca:	0080      	lsls	r0, r0, #2
    21cc:	1820      	adds	r0, r4, r0
    21ce:	3040      	adds	r0, #64	; 0x40
    21d0:	79c0      	ldrb	r0, [r0, #7]
    21d2:	0740      	lsls	r0, r0, #29
    21d4:	0f40      	lsrs	r0, r0, #29
    21d6:	4305      	orrs	r5, r0
    21d8:	484d      	ldr	r0, [pc, #308]	; (2310 <_usb_d_dev_ep_enable+0x2cc>)
    21da:	4684      	mov	ip, r0
    21dc:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    21de:	2080      	movs	r0, #128	; 0x80
    21e0:	0040      	lsls	r0, r0, #1
    21e2:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21e4:	18f6      	adds	r6, r6, r3
    21e6:	00b6      	lsls	r6, r6, #2
    21e8:	19a4      	adds	r4, r4, r6
    21ea:	3444      	adds	r4, #68	; 0x44
    21ec:	8825      	ldrh	r5, [r4, #0]
    21ee:	03ab      	lsls	r3, r5, #14
    21f0:	4c49      	ldr	r4, [pc, #292]	; (2318 <_usb_d_dev_ep_enable+0x2d4>)
    21f2:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21f4:	3001      	adds	r0, #1
    21f6:	30ff      	adds	r0, #255	; 0xff
    21f8:	2307      	movs	r3, #7
    21fa:	4285      	cmp	r5, r0
    21fc:	d814      	bhi.n	2228 <_usb_d_dev_ep_enable+0x1e4>
    21fe:	3801      	subs	r0, #1
    2200:	38ff      	subs	r0, #255	; 0xff
    2202:	3b01      	subs	r3, #1
    2204:	4285      	cmp	r5, r0
    2206:	d80f      	bhi.n	2228 <_usb_d_dev_ep_enable+0x1e4>
    2208:	3b01      	subs	r3, #1
    220a:	2d80      	cmp	r5, #128	; 0x80
    220c:	d80c      	bhi.n	2228 <_usb_d_dev_ep_enable+0x1e4>
    220e:	3b01      	subs	r3, #1
    2210:	2d40      	cmp	r5, #64	; 0x40
    2212:	d809      	bhi.n	2228 <_usb_d_dev_ep_enable+0x1e4>
    2214:	3b01      	subs	r3, #1
    2216:	2d20      	cmp	r5, #32
    2218:	d806      	bhi.n	2228 <_usb_d_dev_ep_enable+0x1e4>
    221a:	3b01      	subs	r3, #1
    221c:	2d10      	cmp	r5, #16
    221e:	d803      	bhi.n	2228 <_usb_d_dev_ep_enable+0x1e4>
    2220:	38f8      	subs	r0, #248	; 0xf8
    2222:	42a8      	cmp	r0, r5
    2224:	4180      	sbcs	r0, r0
    2226:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2228:	071b      	lsls	r3, r3, #28
    222a:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    222c:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    222e:	2040      	movs	r0, #64	; 0x40
    2230:	2306      	movs	r3, #6
    2232:	33ff      	adds	r3, #255	; 0xff
    2234:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    2236:	0149      	lsls	r1, r1, #5
    2238:	4b38      	ldr	r3, [pc, #224]	; (231c <_usb_d_dev_ep_enable+0x2d8>)
    223a:	1859      	adds	r1, r3, r1
    223c:	2300      	movs	r3, #0
    223e:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    2240:	2000      	movs	r0, #0
}
    2242:	bc04      	pop	{r2}
    2244:	4690      	mov	r8, r2
    2246:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2248:	24e0      	movs	r4, #224	; 0xe0
    224a:	05e4      	lsls	r4, r4, #23
    224c:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    224e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2250:	0485      	lsls	r5, r0, #18
    2252:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2254:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2256:	0724      	lsls	r4, r4, #28
    2258:	432c      	orrs	r4, r5
    225a:	617c      	str	r4, [r7, #20]
    225c:	2406      	movs	r4, #6
    225e:	34ff      	adds	r4, #255	; 0xff
    2260:	2540      	movs	r5, #64	; 0x40
    2262:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2264:	2682      	movs	r6, #130	; 0x82
    2266:	0076      	lsls	r6, r6, #1
    2268:	2780      	movs	r7, #128	; 0x80
    226a:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    226c:	4f2b      	ldr	r7, [pc, #172]	; (231c <_usb_d_dev_ep_enable+0x2d8>)
    226e:	0149      	lsls	r1, r1, #5
    2270:	1879      	adds	r1, r7, r1
    2272:	2200      	movs	r2, #0
    2274:	728a      	strb	r2, [r1, #10]
    2276:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2278:	210f      	movs	r1, #15
    227a:	4662      	mov	r2, ip
    227c:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    227e:	009a      	lsls	r2, r3, #2
    2280:	18d2      	adds	r2, r2, r3
    2282:	0092      	lsls	r2, r2, #2
    2284:	4b23      	ldr	r3, [pc, #140]	; (2314 <_usb_d_dev_ep_enable+0x2d0>)
    2286:	189a      	adds	r2, r3, r2
    2288:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    228a:	014b      	lsls	r3, r1, #5
    228c:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    228e:	18f9      	adds	r1, r7, r3
    2290:	684a      	ldr	r2, [r1, #4]
    2292:	0480      	lsls	r0, r0, #18
    2294:	0907      	lsrs	r7, r0, #4
    2296:	4822      	ldr	r0, [pc, #136]	; (2320 <_usb_d_dev_ep_enable+0x2dc>)
    2298:	4010      	ands	r0, r2
    229a:	4338      	orrs	r0, r7
    229c:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    229e:	684a      	ldr	r2, [r1, #4]
    22a0:	0b92      	lsrs	r2, r2, #14
    22a2:	0392      	lsls	r2, r2, #14
    22a4:	604a      	str	r2, [r1, #4]
    22a6:	4a1a      	ldr	r2, [pc, #104]	; (2310 <_usb_d_dev_ep_enable+0x2cc>)
    22a8:	189a      	adds	r2, r3, r2
    22aa:	21b0      	movs	r1, #176	; 0xb0
    22ac:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    22ae:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    22b0:	4a1c      	ldr	r2, [pc, #112]	; (2324 <_usb_d_dev_ep_enable+0x2e0>)
    22b2:	4694      	mov	ip, r2
    22b4:	4463      	add	r3, ip
    22b6:	2210      	movs	r2, #16
    22b8:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    22ba:	2000      	movs	r0, #0
    22bc:	e7c1      	b.n	2242 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22be:	24a0      	movs	r4, #160	; 0xa0
    22c0:	05e4      	lsls	r4, r4, #23
    22c2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22c4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22c6:	0485      	lsls	r5, r0, #18
    22c8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22ca:	2405      	movs	r4, #5
    22cc:	e7c3      	b.n	2256 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22ce:	24c0      	movs	r4, #192	; 0xc0
    22d0:	05a4      	lsls	r4, r4, #22
    22d2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22d4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22d6:	0485      	lsls	r5, r0, #18
    22d8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22da:	2403      	movs	r4, #3
    22dc:	e7bb      	b.n	2256 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22de:	24c0      	movs	r4, #192	; 0xc0
    22e0:	05e4      	lsls	r4, r4, #23
    22e2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22e4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22e6:	0485      	lsls	r5, r0, #18
    22e8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22ea:	2406      	movs	r4, #6
    22ec:	e7b3      	b.n	2256 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22ee:	2480      	movs	r4, #128	; 0x80
    22f0:	05e4      	lsls	r4, r4, #23
    22f2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22f4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22f6:	0485      	lsls	r5, r0, #18
    22f8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22fa:	2404      	movs	r4, #4
    22fc:	e7ab      	b.n	2256 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22fe:	2480      	movs	r4, #128	; 0x80
    2300:	05a4      	lsls	r4, r4, #22
    2302:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2304:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2306:	0485      	lsls	r5, r0, #18
    2308:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    230a:	2402      	movs	r4, #2
    230c:	e7a3      	b.n	2256 <_usb_d_dev_ep_enable+0x212>
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	41005000 	.word	0x41005000
    2314:	20000608 	.word	0x20000608
    2318:	0fffc000 	.word	0x0fffc000
    231c:	20000588 	.word	0x20000588
    2320:	f0003fff 	.word	0xf0003fff
    2324:	41005109 	.word	0x41005109

00002328 <_usb_d_dev_ep_stall>:
{
    2328:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    232a:	230f      	movs	r3, #15
    232c:	4003      	ands	r3, r0
    232e:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2330:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2332:	2b00      	cmp	r3, #0
    2334:	d009      	beq.n	234a <_usb_d_dev_ep_stall+0x22>
    2336:	001a      	movs	r2, r3
    2338:	2800      	cmp	r0, #0
    233a:	db04      	blt.n	2346 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    233c:	2b04      	cmp	r3, #4
    233e:	d905      	bls.n	234c <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2340:	2012      	movs	r0, #18
    2342:	4240      	negs	r0, r0
    2344:	e019      	b.n	237a <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2346:	1d1a      	adds	r2, r3, #4
    2348:	e7f8      	b.n	233c <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    234a:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    234c:	2901      	cmp	r1, #1
    234e:	d015      	beq.n	237c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2350:	2900      	cmp	r1, #0
    2352:	d036      	beq.n	23c2 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2354:	0093      	lsls	r3, r2, #2
    2356:	189b      	adds	r3, r3, r2
    2358:	009b      	lsls	r3, r3, #2
    235a:	4a47      	ldr	r2, [pc, #284]	; (2478 <_usb_d_dev_ep_stall+0x150>)
    235c:	18d2      	adds	r2, r2, r3
    235e:	3246      	adds	r2, #70	; 0x46
    2360:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2362:	230f      	movs	r3, #15
    2364:	4013      	ands	r3, r2
    2366:	015b      	lsls	r3, r3, #5
    2368:	4a44      	ldr	r2, [pc, #272]	; (247c <_usb_d_dev_ep_stall+0x154>)
    236a:	4694      	mov	ip, r2
    236c:	4463      	add	r3, ip
    236e:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2370:	2310      	movs	r3, #16
    2372:	40a3      	lsls	r3, r4
    2374:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    2376:	1e43      	subs	r3, r0, #1
    2378:	4198      	sbcs	r0, r3
}
    237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    237c:	2510      	movs	r5, #16
    237e:	40a5      	lsls	r5, r4
    2380:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2382:	493d      	ldr	r1, [pc, #244]	; (2478 <_usb_d_dev_ep_stall+0x150>)
    2384:	0090      	lsls	r0, r2, #2
    2386:	1883      	adds	r3, r0, r2
    2388:	009b      	lsls	r3, r3, #2
    238a:	18cb      	adds	r3, r1, r3
    238c:	3346      	adds	r3, #70	; 0x46
    238e:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2390:	230f      	movs	r3, #15
    2392:	4033      	ands	r3, r6
    2394:	015e      	lsls	r6, r3, #5
    2396:	4f39      	ldr	r7, [pc, #228]	; (247c <_usb_d_dev_ep_stall+0x154>)
    2398:	46bc      	mov	ip, r7
    239a:	4466      	add	r6, ip
    239c:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    239e:	2520      	movs	r5, #32
    23a0:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    23a2:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    23a4:	015b      	lsls	r3, r3, #5
    23a6:	4d36      	ldr	r5, [pc, #216]	; (2480 <_usb_d_dev_ep_stall+0x158>)
    23a8:	46ac      	mov	ip, r5
    23aa:	4463      	add	r3, ip
    23ac:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    23ae:	1882      	adds	r2, r0, r2
    23b0:	0092      	lsls	r2, r2, #2
    23b2:	188a      	adds	r2, r1, r2
    23b4:	3240      	adds	r2, #64	; 0x40
    23b6:	79d3      	ldrb	r3, [r2, #7]
    23b8:	2108      	movs	r1, #8
    23ba:	430b      	orrs	r3, r1
    23bc:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    23be:	2000      	movs	r0, #0
    23c0:	e7db      	b.n	237a <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    23c2:	0093      	lsls	r3, r2, #2
    23c4:	189b      	adds	r3, r3, r2
    23c6:	0099      	lsls	r1, r3, #2
    23c8:	4b2b      	ldr	r3, [pc, #172]	; (2478 <_usb_d_dev_ep_stall+0x150>)
    23ca:	185b      	adds	r3, r3, r1
    23cc:	3346      	adds	r3, #70	; 0x46
    23ce:	781b      	ldrb	r3, [r3, #0]
    23d0:	210f      	movs	r1, #15
    23d2:	400b      	ands	r3, r1
    23d4:	015d      	lsls	r5, r3, #5
    23d6:	492b      	ldr	r1, [pc, #172]	; (2484 <_usb_d_dev_ep_stall+0x15c>)
    23d8:	468c      	mov	ip, r1
    23da:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    23dc:	2183      	movs	r1, #131	; 0x83
    23de:	0049      	lsls	r1, r1, #1
    23e0:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    23e2:	39f6      	subs	r1, #246	; 0xf6
    23e4:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    23e6:	2000      	movs	r0, #0
	if (!is_stalled) {
    23e8:	420e      	tst	r6, r1
    23ea:	d0c6      	beq.n	237a <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    23ec:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    23ee:	3005      	adds	r0, #5
    23f0:	30ff      	adds	r0, #255	; 0xff
    23f2:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    23f4:	2120      	movs	r1, #32
    23f6:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    23f8:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    23fa:	015b      	lsls	r3, r3, #5
    23fc:	4e22      	ldr	r6, [pc, #136]	; (2488 <_usb_d_dev_ep_stall+0x160>)
    23fe:	46b4      	mov	ip, r6
    2400:	4463      	add	r3, ip
    2402:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2404:	2308      	movs	r3, #8
    2406:	33ff      	adds	r3, #255	; 0xff
    2408:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    240a:	420b      	tst	r3, r1
    240c:	d009      	beq.n	2422 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    240e:	2308      	movs	r3, #8
    2410:	33ff      	adds	r3, #255	; 0xff
    2412:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2414:	3b07      	subs	r3, #7
    2416:	3bff      	subs	r3, #255	; 0xff
    2418:	40a3      	lsls	r3, r4
    241a:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    241c:	2182      	movs	r1, #130	; 0x82
    241e:	0049      	lsls	r1, r1, #1
    2420:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2422:	0093      	lsls	r3, r2, #2
    2424:	189b      	adds	r3, r3, r2
    2426:	0099      	lsls	r1, r3, #2
    2428:	4b13      	ldr	r3, [pc, #76]	; (2478 <_usb_d_dev_ep_stall+0x150>)
    242a:	185b      	adds	r3, r3, r1
    242c:	3340      	adds	r3, #64	; 0x40
    242e:	79d9      	ldrb	r1, [r3, #7]
    2430:	2307      	movs	r3, #7
    2432:	400b      	ands	r3, r1
    2434:	2b01      	cmp	r3, #1
    2436:	d00b      	beq.n	2450 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    2438:	0093      	lsls	r3, r2, #2
    243a:	189a      	adds	r2, r3, r2
    243c:	0092      	lsls	r2, r2, #2
    243e:	4b0e      	ldr	r3, [pc, #56]	; (2478 <_usb_d_dev_ep_stall+0x150>)
    2440:	189b      	adds	r3, r3, r2
    2442:	3340      	adds	r3, #64	; 0x40
    2444:	79da      	ldrb	r2, [r3, #7]
    2446:	2108      	movs	r1, #8
    2448:	438a      	bics	r2, r1
    244a:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    244c:	2000      	movs	r0, #0
    244e:	e794      	b.n	237a <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2450:	3306      	adds	r3, #6
    2452:	33ff      	adds	r3, #255	; 0xff
    2454:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2456:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2458:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    245a:	4219      	tst	r1, r3
    245c:	d000      	beq.n	2460 <_usb_d_dev_ep_stall+0x138>
    245e:	e78c      	b.n	237a <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2460:	0093      	lsls	r3, r2, #2
    2462:	189a      	adds	r2, r3, r2
    2464:	0092      	lsls	r2, r2, #2
    2466:	4b04      	ldr	r3, [pc, #16]	; (2478 <_usb_d_dev_ep_stall+0x150>)
    2468:	189b      	adds	r3, r3, r2
    246a:	3340      	adds	r3, #64	; 0x40
    246c:	79da      	ldrb	r2, [r3, #7]
    246e:	2108      	movs	r1, #8
    2470:	438a      	bics	r2, r1
    2472:	71da      	strb	r2, [r3, #7]
    2474:	e781      	b.n	237a <_usb_d_dev_ep_stall+0x52>
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	20000608 	.word	0x20000608
    247c:	41005100 	.word	0x41005100
    2480:	41005109 	.word	0x41005109
    2484:	41005000 	.word	0x41005000
    2488:	41005108 	.word	0x41005108

0000248c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    248c:	b570      	push	{r4, r5, r6, lr}
    248e:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2490:	230f      	movs	r3, #15
    2492:	4018      	ands	r0, r3
    2494:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2496:	4b16      	ldr	r3, [pc, #88]	; (24f0 <_usb_d_dev_ep_read_req+0x64>)
    2498:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    249a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    249c:	685b      	ldr	r3, [r3, #4]
    249e:	049b      	lsls	r3, r3, #18
    24a0:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    24a2:	2804      	cmp	r0, #4
    24a4:	d81a      	bhi.n	24dc <_usb_d_dev_ep_read_req+0x50>
    24a6:	2d00      	cmp	r5, #0
    24a8:	d01b      	beq.n	24e2 <_usb_d_dev_ep_read_req+0x56>
    24aa:	4b12      	ldr	r3, [pc, #72]	; (24f4 <_usb_d_dev_ep_read_req+0x68>)
    24ac:	469c      	mov	ip, r3
    24ae:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    24b0:	2380      	movs	r3, #128	; 0x80
    24b2:	005b      	lsls	r3, r3, #1
    24b4:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    24b6:	2b11      	cmp	r3, #17
    24b8:	d116      	bne.n	24e8 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    24ba:	2308      	movs	r3, #8
    24bc:	33ff      	adds	r3, #255	; 0xff
    24be:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    24c0:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    24c2:	06db      	lsls	r3, r3, #27
    24c4:	d400      	bmi.n	24c8 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    24c6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    24c8:	2208      	movs	r2, #8
    24ca:	0028      	movs	r0, r5
    24cc:	4b0a      	ldr	r3, [pc, #40]	; (24f8 <_usb_d_dev_ep_read_req+0x6c>)
    24ce:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24d0:	2210      	movs	r2, #16
    24d2:	2308      	movs	r3, #8
    24d4:	33ff      	adds	r3, #255	; 0xff
    24d6:	54e2      	strb	r2, [r4, r3]
	return bytes;
    24d8:	0030      	movs	r0, r6
    24da:	e7f4      	b.n	24c6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    24dc:	2012      	movs	r0, #18
    24de:	4240      	negs	r0, r0
    24e0:	e7f1      	b.n	24c6 <_usb_d_dev_ep_read_req+0x3a>
    24e2:	2012      	movs	r0, #18
    24e4:	4240      	negs	r0, r0
    24e6:	e7ee      	b.n	24c6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    24e8:	2013      	movs	r0, #19
    24ea:	4240      	negs	r0, r0
    24ec:	e7eb      	b.n	24c6 <_usb_d_dev_ep_read_req+0x3a>
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	20000588 	.word	0x20000588
    24f4:	41005000 	.word	0x41005000
    24f8:	00003d6d 	.word	0x00003d6d

000024fc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    24fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24fe:	46de      	mov	lr, fp
    2500:	4657      	mov	r7, sl
    2502:	464e      	mov	r6, r9
    2504:	4645      	mov	r5, r8
    2506:	b5e0      	push	{r5, r6, r7, lr}
    2508:	b085      	sub	sp, #20
    250a:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    250c:	7a05      	ldrb	r5, [r0, #8]
    250e:	230f      	movs	r3, #15
    2510:	402b      	ands	r3, r5
    2512:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2514:	2b00      	cmp	r3, #0
    2516:	d100      	bne.n	251a <_usb_d_dev_ep_trans+0x1e>
    2518:	e0d0      	b.n	26bc <_usb_d_dev_ep_trans+0x1c0>
    251a:	001e      	movs	r6, r3
    251c:	2d00      	cmp	r5, #0
    251e:	db39      	blt.n	2594 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    2520:	0034      	movs	r4, r6
    2522:	4a72      	ldr	r2, [pc, #456]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    2524:	2120      	movs	r1, #32
    2526:	4688      	mov	r8, r1
    2528:	4490      	add	r8, r2
    252a:	1c71      	adds	r1, r6, #1
    252c:	0088      	lsls	r0, r1, #2
    252e:	1840      	adds	r0, r0, r1
    2530:	0080      	lsls	r0, r0, #2
    2532:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2534:	00b1      	lsls	r1, r6, #2
    2536:	1989      	adds	r1, r1, r6
    2538:	0089      	lsls	r1, r1, #2
    253a:	1852      	adds	r2, r2, r1
    253c:	3244      	adds	r2, #68	; 0x44
    253e:	8812      	ldrh	r2, [r2, #0]
    2540:	496b      	ldr	r1, [pc, #428]	; (26f0 <_usb_d_dev_ep_trans+0x1f4>)
    2542:	428a      	cmp	r2, r1
    2544:	d028      	beq.n	2598 <_usb_d_dev_ep_trans+0x9c>
    2546:	1e56      	subs	r6, r2, #1
    2548:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    254a:	6879      	ldr	r1, [r7, #4]
    254c:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    254e:	2b04      	cmp	r3, #4
    2550:	d900      	bls.n	2554 <_usb_d_dev_ep_trans+0x58>
    2552:	e09e      	b.n	2692 <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2554:	683b      	ldr	r3, [r7, #0]
    2556:	4867      	ldr	r0, [pc, #412]	; (26f4 <_usb_d_dev_ep_trans+0x1f8>)
    2558:	4283      	cmp	r3, r0
    255a:	d91f      	bls.n	259c <_usb_d_dev_ep_trans+0xa0>
    255c:	1858      	adds	r0, r3, r1
    255e:	9001      	str	r0, [sp, #4]
    2560:	4865      	ldr	r0, [pc, #404]	; (26f8 <_usb_d_dev_ep_trans+0x1fc>)
    2562:	4684      	mov	ip, r0
    2564:	9801      	ldr	r0, [sp, #4]
    2566:	4560      	cmp	r0, ip
    2568:	d818      	bhi.n	259c <_usb_d_dev_ep_trans+0xa0>
    256a:	079b      	lsls	r3, r3, #30
    256c:	d116      	bne.n	259c <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    256e:	2d00      	cmp	r5, #0
    2570:	db30      	blt.n	25d4 <_usb_d_dev_ep_trans+0xd8>
    2572:	428a      	cmp	r2, r1
    2574:	d900      	bls.n	2578 <_usb_d_dev_ep_trans+0x7c>
    2576:	e0ad      	b.n	26d4 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2578:	2e00      	cmp	r6, #0
    257a:	d02e      	beq.n	25da <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    257c:	00a3      	lsls	r3, r4, #2
    257e:	191b      	adds	r3, r3, r4
    2580:	009b      	lsls	r3, r3, #2
    2582:	4a5a      	ldr	r2, [pc, #360]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    2584:	18d3      	adds	r3, r2, r3
    2586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2588:	2b00      	cmp	r3, #0
    258a:	d100      	bne.n	258e <_usb_d_dev_ep_trans+0x92>
    258c:	e087      	b.n	269e <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    258e:	2300      	movs	r3, #0
    2590:	4699      	mov	r9, r3
    2592:	e00e      	b.n	25b2 <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2594:	1d1e      	adds	r6, r3, #4
    2596:	e7c3      	b.n	2520 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2598:	0016      	movs	r6, r2
    259a:	e7d6      	b.n	254a <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    259c:	00a3      	lsls	r3, r4, #2
    259e:	191b      	adds	r3, r3, r4
    25a0:	009b      	lsls	r3, r3, #2
    25a2:	4a52      	ldr	r2, [pc, #328]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    25a4:	18d3      	adds	r3, r2, r3
    25a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25a8:	2b00      	cmp	r3, #0
    25aa:	d100      	bne.n	25ae <_usb_d_dev_ep_trans+0xb2>
    25ac:	e074      	b.n	2698 <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    25ae:	2301      	movs	r3, #1
    25b0:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    25b2:	00a3      	lsls	r3, r4, #2
    25b4:	191b      	adds	r3, r3, r4
    25b6:	009a      	lsls	r2, r3, #2
    25b8:	4b4c      	ldr	r3, [pc, #304]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    25ba:	189b      	adds	r3, r3, r2
    25bc:	3340      	adds	r3, #64	; 0x40
    25be:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    25c0:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    25c2:	071b      	lsls	r3, r3, #28
    25c4:	d50c      	bpl.n	25e0 <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    25c6:	b005      	add	sp, #20
    25c8:	bc3c      	pop	{r2, r3, r4, r5}
    25ca:	4690      	mov	r8, r2
    25cc:	4699      	mov	r9, r3
    25ce:	46a2      	mov	sl, r4
    25d0:	46ab      	mov	fp, r5
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    25d4:	2300      	movs	r3, #0
    25d6:	4699      	mov	r9, r3
    25d8:	e7eb      	b.n	25b2 <_usb_d_dev_ep_trans+0xb6>
    25da:	2300      	movs	r3, #0
    25dc:	4699      	mov	r9, r3
    25de:	e7e8      	b.n	25b2 <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    25e0:	a803      	add	r0, sp, #12
    25e2:	4b46      	ldr	r3, [pc, #280]	; (26fc <_usb_d_dev_ep_trans+0x200>)
    25e4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    25e6:	00a3      	lsls	r3, r4, #2
    25e8:	191b      	adds	r3, r3, r4
    25ea:	009a      	lsls	r2, r3, #2
    25ec:	4b3f      	ldr	r3, [pc, #252]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    25ee:	189b      	adds	r3, r3, r2
    25f0:	3340      	adds	r3, #64	; 0x40
    25f2:	79db      	ldrb	r3, [r3, #7]
    25f4:	065b      	lsls	r3, r3, #25
    25f6:	d441      	bmi.n	267c <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    25f8:	00a3      	lsls	r3, r4, #2
    25fa:	191b      	adds	r3, r3, r4
    25fc:	009b      	lsls	r3, r3, #2
    25fe:	4a3b      	ldr	r2, [pc, #236]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    2600:	4693      	mov	fp, r2
    2602:	449b      	add	fp, r3
    2604:	2340      	movs	r3, #64	; 0x40
    2606:	445b      	add	r3, fp
    2608:	469a      	mov	sl, r3
    260a:	79db      	ldrb	r3, [r3, #7]
    260c:	2240      	movs	r2, #64	; 0x40
    260e:	4313      	orrs	r3, r2
    2610:	4652      	mov	r2, sl
    2612:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2614:	a803      	add	r0, sp, #12
    2616:	4b3a      	ldr	r3, [pc, #232]	; (2700 <_usb_d_dev_ep_trans+0x204>)
    2618:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    261a:	465b      	mov	r3, fp
    261c:	683a      	ldr	r2, [r7, #0]
    261e:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    2620:	687a      	ldr	r2, [r7, #4]
    2622:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    2624:	2300      	movs	r3, #0
    2626:	465a      	mov	r2, fp
    2628:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    262a:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    262c:	01d2      	lsls	r2, r2, #7
    262e:	4653      	mov	r3, sl
    2630:	79d9      	ldrb	r1, [r3, #7]
    2632:	237f      	movs	r3, #127	; 0x7f
    2634:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    2636:	4649      	mov	r1, r9
    2638:	0149      	lsls	r1, r1, #5
    263a:	4313      	orrs	r3, r2
    263c:	2220      	movs	r2, #32
    263e:	4393      	bics	r3, r2
    2640:	430b      	orrs	r3, r1
    2642:	4652      	mov	r2, sl
    2644:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2646:	7a7b      	ldrb	r3, [r7, #9]
    2648:	2200      	movs	r2, #0
    264a:	2b00      	cmp	r3, #0
    264c:	d002      	beq.n	2654 <_usb_d_dev_ep_trans+0x158>
    264e:	4272      	negs	r2, r6
    2650:	4172      	adcs	r2, r6
    2652:	b2d2      	uxtb	r2, r2
    2654:	00a3      	lsls	r3, r4, #2
    2656:	191c      	adds	r4, r3, r4
    2658:	00a4      	lsls	r4, r4, #2
    265a:	4b24      	ldr	r3, [pc, #144]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    265c:	191b      	adds	r3, r3, r4
    265e:	3340      	adds	r3, #64	; 0x40
    2660:	0112      	lsls	r2, r2, #4
    2662:	79de      	ldrb	r6, [r3, #7]
    2664:	2110      	movs	r1, #16
    2666:	438e      	bics	r6, r1
    2668:	4316      	orrs	r6, r2
    266a:	71de      	strb	r6, [r3, #7]
	if (dir) {
    266c:	2d00      	cmp	r5, #0
    266e:	db0a      	blt.n	2686 <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    2670:	2100      	movs	r1, #0
    2672:	4640      	mov	r0, r8
    2674:	4b23      	ldr	r3, [pc, #140]	; (2704 <_usb_d_dev_ep_trans+0x208>)
    2676:	4798      	blx	r3
	return ERR_NONE;
    2678:	2000      	movs	r0, #0
    267a:	e7a4      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    267c:	a803      	add	r0, sp, #12
    267e:	4b20      	ldr	r3, [pc, #128]	; (2700 <_usb_d_dev_ep_trans+0x204>)
    2680:	4798      	blx	r3
		return USB_BUSY;
    2682:	2001      	movs	r0, #1
    2684:	e79f      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    2686:	2100      	movs	r1, #0
    2688:	4640      	mov	r0, r8
    268a:	4b1f      	ldr	r3, [pc, #124]	; (2708 <_usb_d_dev_ep_trans+0x20c>)
    268c:	4798      	blx	r3
	return ERR_NONE;
    268e:	2000      	movs	r0, #0
    2690:	e799      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    2692:	2012      	movs	r0, #18
    2694:	4240      	negs	r0, r0
    2696:	e796      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    2698:	2013      	movs	r0, #19
    269a:	4240      	negs	r0, r0
    269c:	e793      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    269e:	2012      	movs	r0, #18
    26a0:	4240      	negs	r0, r0
    26a2:	e790      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    26a4:	2013      	movs	r0, #19
    26a6:	4240      	negs	r0, r0
    26a8:	e78d      	b.n	25c6 <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    26aa:	6879      	ldr	r1, [r7, #4]
    26ac:	058e      	lsls	r6, r1, #22
    26ae:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    26b0:	4b0e      	ldr	r3, [pc, #56]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    26b2:	2034      	movs	r0, #52	; 0x34
    26b4:	4680      	mov	r8, r0
    26b6:	4498      	add	r8, r3
    26b8:	2400      	movs	r4, #0
    26ba:	e74b      	b.n	2554 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    26bc:	2244      	movs	r2, #68	; 0x44
    26be:	490b      	ldr	r1, [pc, #44]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    26c0:	5a8a      	ldrh	r2, [r1, r2]
    26c2:	490b      	ldr	r1, [pc, #44]	; (26f0 <_usb_d_dev_ep_trans+0x1f4>)
    26c4:	428a      	cmp	r2, r1
    26c6:	d0f0      	beq.n	26aa <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    26c8:	4908      	ldr	r1, [pc, #32]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    26ca:	2034      	movs	r0, #52	; 0x34
    26cc:	4680      	mov	r8, r0
    26ce:	4488      	add	r8, r1
    26d0:	2400      	movs	r4, #0
    26d2:	e738      	b.n	2546 <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    26d4:	00a3      	lsls	r3, r4, #2
    26d6:	191b      	adds	r3, r3, r4
    26d8:	009b      	lsls	r3, r3, #2
    26da:	4a04      	ldr	r2, [pc, #16]	; (26ec <_usb_d_dev_ep_trans+0x1f0>)
    26dc:	18d3      	adds	r3, r2, r3
    26de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26e0:	2b00      	cmp	r3, #0
    26e2:	d0df      	beq.n	26a4 <_usb_d_dev_ep_trans+0x1a8>
    26e4:	2301      	movs	r3, #1
    26e6:	4699      	mov	r9, r3
    26e8:	e763      	b.n	25b2 <_usb_d_dev_ep_trans+0xb6>
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	20000608 	.word	0x20000608
    26f0:	000003ff 	.word	0x000003ff
    26f4:	1fffffff 	.word	0x1fffffff
    26f8:	20007fff 	.word	0x20007fff
    26fc:	000008a1 	.word	0x000008a1
    2700:	000008af 	.word	0x000008af
    2704:	00001ac9 	.word	0x00001ac9
    2708:	0000191d 	.word	0x0000191d

0000270c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    270c:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    270e:	230f      	movs	r3, #15
    2710:	4003      	ands	r3, r0
    2712:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2714:	2b00      	cmp	r3, #0
    2716:	d00e      	beq.n	2736 <_usb_d_dev_ep_abort+0x2a>
    2718:	001a      	movs	r2, r3
    271a:	2900      	cmp	r1, #0
    271c:	db02      	blt.n	2724 <_usb_d_dev_ep_abort+0x18>
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    271e:	2b04      	cmp	r3, #4
    2720:	d902      	bls.n	2728 <_usb_d_dev_ep_abort+0x1c>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    2722:	bd10      	pop	{r4, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2724:	1d1a      	adds	r2, r3, #4
    2726:	e7fa      	b.n	271e <_usb_d_dev_ep_abort+0x12>
	return &dev_inst.ep[ep_index];
    2728:	3201      	adds	r2, #1
    272a:	2014      	movs	r0, #20
    272c:	4342      	muls	r2, r0
    272e:	4805      	ldr	r0, [pc, #20]	; (2744 <_usb_d_dev_ep_abort+0x38>)
    2730:	3020      	adds	r0, #32
    2732:	1880      	adds	r0, r0, r2
    2734:	e001      	b.n	273a <_usb_d_dev_ep_abort+0x2e>
    2736:	4803      	ldr	r0, [pc, #12]	; (2744 <_usb_d_dev_ep_abort+0x38>)
    2738:	3034      	adds	r0, #52	; 0x34
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    273a:	0fc9      	lsrs	r1, r1, #31
    273c:	2202      	movs	r2, #2
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <_usb_d_dev_ep_abort+0x3c>)
    2740:	4798      	blx	r3
    2742:	e7ee      	b.n	2722 <_usb_d_dev_ep_abort+0x16>
    2744:	20000608 	.word	0x20000608
    2748:	00001769 	.word	0x00001769

0000274c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    274c:	1e0b      	subs	r3, r1, #0
    274e:	d006      	beq.n	275e <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2750:	2801      	cmp	r0, #1
    2752:	d006      	beq.n	2762 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2754:	2800      	cmp	r0, #0
    2756:	d101      	bne.n	275c <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2758:	4a03      	ldr	r2, [pc, #12]	; (2768 <_usb_d_dev_register_callback+0x1c>)
    275a:	6213      	str	r3, [r2, #32]
	}
}
    275c:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    275e:	4b03      	ldr	r3, [pc, #12]	; (276c <_usb_d_dev_register_callback+0x20>)
    2760:	e7f6      	b.n	2750 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2762:	4a01      	ldr	r2, [pc, #4]	; (2768 <_usb_d_dev_register_callback+0x1c>)
    2764:	6253      	str	r3, [r2, #36]	; 0x24
    2766:	e7f9      	b.n	275c <_usb_d_dev_register_callback+0x10>
    2768:	20000608 	.word	0x20000608
    276c:	00001679 	.word	0x00001679

00002770 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2770:	1e0b      	subs	r3, r1, #0
    2772:	d008      	beq.n	2786 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2774:	2800      	cmp	r0, #0
    2776:	d008      	beq.n	278a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2778:	2801      	cmp	r0, #1
    277a:	d009      	beq.n	2790 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    277c:	2802      	cmp	r0, #2
    277e:	d106      	bne.n	278e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2780:	4a05      	ldr	r2, [pc, #20]	; (2798 <_usb_d_dev_register_ep_callback+0x28>)
    2782:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    2784:	e003      	b.n	278e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2786:	4b05      	ldr	r3, [pc, #20]	; (279c <_usb_d_dev_register_ep_callback+0x2c>)
    2788:	e7f4      	b.n	2774 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    278a:	4a03      	ldr	r2, [pc, #12]	; (2798 <_usb_d_dev_register_ep_callback+0x28>)
    278c:	6293      	str	r3, [r2, #40]	; 0x28
}
    278e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2790:	4a01      	ldr	r2, [pc, #4]	; (2798 <_usb_d_dev_register_ep_callback+0x28>)
    2792:	62d3      	str	r3, [r2, #44]	; 0x2c
    2794:	e7fb      	b.n	278e <_usb_d_dev_register_ep_callback+0x1e>
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	20000608 	.word	0x20000608
    279c:	00001679 	.word	0x00001679

000027a0 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    27a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    27a2:	4b8b      	ldr	r3, [pc, #556]	; (29d0 <USB_Handler+0x230>)
    27a4:	8c1e      	ldrh	r6, [r3, #32]
    27a6:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    27a8:	2e00      	cmp	r6, #0
    27aa:	d003      	beq.n	27b4 <USB_Handler+0x14>
    27ac:	4c89      	ldr	r4, [pc, #548]	; (29d4 <USB_Handler+0x234>)
    27ae:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    27b0:	2500      	movs	r5, #0
    27b2:	e0ca      	b.n	294a <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    27b4:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    27b6:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    27b8:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    27ba:	075a      	lsls	r2, r3, #29
    27bc:	d418      	bmi.n	27f0 <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    27be:	059a      	lsls	r2, r3, #22
    27c0:	d41d      	bmi.n	27fe <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    27c2:	061a      	lsls	r2, r3, #24
    27c4:	d44f      	bmi.n	2866 <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    27c6:	2270      	movs	r2, #112	; 0x70
    27c8:	421a      	tst	r2, r3
    27ca:	d155      	bne.n	2878 <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    27cc:	071a      	lsls	r2, r3, #28
    27ce:	d500      	bpl.n	27d2 <USB_Handler+0x32>
    27d0:	e06e      	b.n	28b0 <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    27d2:	07db      	lsls	r3, r3, #31
    27d4:	d5ea      	bpl.n	27ac <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    27d6:	4b7e      	ldr	r3, [pc, #504]	; (29d0 <USB_Handler+0x230>)
    27d8:	4a7f      	ldr	r2, [pc, #508]	; (29d8 <USB_Handler+0x238>)
    27da:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    27dc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    27de:	3a92      	subs	r2, #146	; 0x92
    27e0:	3aff      	subs	r2, #255	; 0xff
    27e2:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    27e4:	4b7b      	ldr	r3, [pc, #492]	; (29d4 <USB_Handler+0x234>)
    27e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    27e8:	2100      	movs	r1, #0
    27ea:	2004      	movs	r0, #4
    27ec:	4798      	blx	r3
    27ee:	e005      	b.n	27fc <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    27f0:	2204      	movs	r2, #4
    27f2:	4b77      	ldr	r3, [pc, #476]	; (29d0 <USB_Handler+0x230>)
    27f4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    27f6:	4b77      	ldr	r3, [pc, #476]	; (29d4 <USB_Handler+0x234>)
    27f8:	6a1b      	ldr	r3, [r3, #32]
    27fa:	4798      	blx	r3

	_usb_d_dev_handler();
}
    27fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27fe:	4b74      	ldr	r3, [pc, #464]	; (29d0 <USB_Handler+0x230>)
    2800:	4a75      	ldr	r2, [pc, #468]	; (29d8 <USB_Handler+0x238>)
    2802:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2804:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2806:	3a92      	subs	r2, #146	; 0x92
    2808:	3aff      	subs	r2, #255	; 0xff
    280a:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    280c:	4b73      	ldr	r3, [pc, #460]	; (29dc <USB_Handler+0x23c>)
    280e:	891b      	ldrh	r3, [r3, #8]
    2810:	071b      	lsls	r3, r3, #28
    2812:	0f1b      	lsrs	r3, r3, #28
    2814:	2b03      	cmp	r3, #3
    2816:	d024      	beq.n	2862 <USB_Handler+0xc2>
    2818:	4b70      	ldr	r3, [pc, #448]	; (29dc <USB_Handler+0x23c>)
    281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    281c:	071b      	lsls	r3, r3, #28
    281e:	0f1b      	lsrs	r3, r3, #28
    2820:	2b03      	cmp	r3, #3
    2822:	d012      	beq.n	284a <USB_Handler+0xaa>
    2824:	2348      	movs	r3, #72	; 0x48
    2826:	4a6d      	ldr	r2, [pc, #436]	; (29dc <USB_Handler+0x23c>)
    2828:	5ad3      	ldrh	r3, [r2, r3]
    282a:	071b      	lsls	r3, r3, #28
    282c:	0f1b      	lsrs	r3, r3, #28
    282e:	2b03      	cmp	r3, #3
    2830:	d015      	beq.n	285e <USB_Handler+0xbe>
    2832:	2368      	movs	r3, #104	; 0x68
    2834:	5ad3      	ldrh	r3, [r2, r3]
    2836:	071b      	lsls	r3, r3, #28
    2838:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    283a:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    283c:	2b03      	cmp	r3, #3
    283e:	d005      	beq.n	284c <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2840:	4b64      	ldr	r3, [pc, #400]	; (29d4 <USB_Handler+0x234>)
    2842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2844:	2003      	movs	r0, #3
    2846:	4798      	blx	r3
    2848:	e7d8      	b.n	27fc <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    284a:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    284c:	015b      	lsls	r3, r3, #5
    284e:	4a63      	ldr	r2, [pc, #396]	; (29dc <USB_Handler+0x23c>)
    2850:	18d3      	adds	r3, r2, r3
    2852:	8919      	ldrh	r1, [r3, #8]
    2854:	0449      	lsls	r1, r1, #17
    2856:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    2858:	2200      	movs	r2, #0
    285a:	811a      	strh	r2, [r3, #8]
    285c:	e7f0      	b.n	2840 <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    285e:	2302      	movs	r3, #2
    2860:	e7f4      	b.n	284c <USB_Handler+0xac>
    2862:	2300      	movs	r3, #0
    2864:	e7f2      	b.n	284c <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2866:	2280      	movs	r2, #128	; 0x80
    2868:	4b59      	ldr	r3, [pc, #356]	; (29d0 <USB_Handler+0x230>)
    286a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    286c:	4b59      	ldr	r3, [pc, #356]	; (29d4 <USB_Handler+0x234>)
    286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2870:	2100      	movs	r1, #0
    2872:	2005      	movs	r0, #5
    2874:	4798      	blx	r3
    2876:	e7c1      	b.n	27fc <USB_Handler+0x5c>
    2878:	4b55      	ldr	r3, [pc, #340]	; (29d0 <USB_Handler+0x230>)
    287a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    287c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    287e:	4a56      	ldr	r2, [pc, #344]	; (29d8 <USB_Handler+0x238>)
    2880:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2882:	4b57      	ldr	r3, [pc, #348]	; (29e0 <USB_Handler+0x240>)
    2884:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2886:	069b      	lsls	r3, r3, #26
    2888:	d40c      	bmi.n	28a4 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    288a:	4955      	ldr	r1, [pc, #340]	; (29e0 <USB_Handler+0x240>)
	tmp &= mask;
    288c:	3a32      	subs	r2, #50	; 0x32
    288e:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2890:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2892:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2894:	2bd0      	cmp	r3, #208	; 0xd0
    2896:	d1fb      	bne.n	2890 <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2898:	4b4e      	ldr	r3, [pc, #312]	; (29d4 <USB_Handler+0x234>)
    289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    289c:	2100      	movs	r1, #0
    289e:	2002      	movs	r0, #2
    28a0:	4798      	blx	r3
    28a2:	e7ab      	b.n	27fc <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    28a4:	494e      	ldr	r1, [pc, #312]	; (29e0 <USB_Handler+0x240>)
	tmp &= mask;
    28a6:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    28a8:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    28aa:	421a      	tst	r2, r3
    28ac:	d0fc      	beq.n	28a8 <USB_Handler+0x108>
    28ae:	e7f3      	b.n	2898 <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    28b0:	4b47      	ldr	r3, [pc, #284]	; (29d0 <USB_Handler+0x230>)
    28b2:	2100      	movs	r1, #0
    28b4:	2280      	movs	r2, #128	; 0x80
    28b6:	0052      	lsls	r2, r2, #1
    28b8:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    28ba:	3af8      	subs	r2, #248	; 0xf8
    28bc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    28be:	3268      	adds	r2, #104	; 0x68
    28c0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    28c2:	4a45      	ldr	r2, [pc, #276]	; (29d8 <USB_Handler+0x238>)
    28c4:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    28c6:	4b47      	ldr	r3, [pc, #284]	; (29e4 <USB_Handler+0x244>)
    28c8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    28ca:	4b42      	ldr	r3, [pc, #264]	; (29d4 <USB_Handler+0x234>)
    28cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28ce:	2100      	movs	r1, #0
    28d0:	2001      	movs	r0, #1
    28d2:	4798      	blx	r3
    28d4:	e792      	b.n	27fc <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    28d6:	06cb      	lsls	r3, r1, #27
    28d8:	d407      	bmi.n	28ea <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    28da:	064b      	lsls	r3, r1, #25
    28dc:	d408      	bmi.n	28f0 <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    28de:	068b      	lsls	r3, r1, #26
    28e0:	d52e      	bpl.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    28e2:	2100      	movs	r1, #0
    28e4:	4b40      	ldr	r3, [pc, #256]	; (29e8 <USB_Handler+0x248>)
    28e6:	4798      	blx	r3
    28e8:	e02a      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    28ea:	4b40      	ldr	r3, [pc, #256]	; (29ec <USB_Handler+0x24c>)
    28ec:	4798      	blx	r3
    28ee:	e027      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    28f0:	2101      	movs	r1, #1
    28f2:	4b3d      	ldr	r3, [pc, #244]	; (29e8 <USB_Handler+0x248>)
    28f4:	4798      	blx	r3
    28f6:	e023      	b.n	2940 <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    28f8:	064b      	lsls	r3, r1, #25
    28fa:	d40e      	bmi.n	291a <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    28fc:	070b      	lsls	r3, r1, #28
    28fe:	d410      	bmi.n	2922 <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2900:	078b      	lsls	r3, r1, #30
    2902:	d412      	bmi.n	292a <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2904:	2307      	movs	r3, #7
    2906:	401a      	ands	r2, r3
    2908:	2a01      	cmp	r2, #1
    290a:	d119      	bne.n	2940 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    290c:	074b      	lsls	r3, r1, #29
    290e:	d410      	bmi.n	2932 <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2910:	06cb      	lsls	r3, r1, #27
    2912:	d515      	bpl.n	2940 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    2914:	4b35      	ldr	r3, [pc, #212]	; (29ec <USB_Handler+0x24c>)
    2916:	4798      	blx	r3
    2918:	e012      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    291a:	2101      	movs	r1, #1
    291c:	4b32      	ldr	r3, [pc, #200]	; (29e8 <USB_Handler+0x248>)
    291e:	4798      	blx	r3
    2920:	e00e      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    2922:	2101      	movs	r1, #1
    2924:	4b32      	ldr	r3, [pc, #200]	; (29f0 <USB_Handler+0x250>)
    2926:	4798      	blx	r3
    2928:	e00a      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    292a:	2101      	movs	r1, #1
    292c:	4b31      	ldr	r3, [pc, #196]	; (29f4 <USB_Handler+0x254>)
    292e:	4798      	blx	r3
    2930:	e006      	b.n	2940 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    2932:	2100      	movs	r1, #0
    2934:	4b2e      	ldr	r3, [pc, #184]	; (29f0 <USB_Handler+0x250>)
    2936:	4798      	blx	r3
    2938:	e002      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    293a:	2100      	movs	r1, #0
    293c:	4b2a      	ldr	r3, [pc, #168]	; (29e8 <USB_Handler+0x248>)
    293e:	4798      	blx	r3
    2940:	3501      	adds	r5, #1
    2942:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2944:	2d09      	cmp	r5, #9
    2946:	d100      	bne.n	294a <USB_Handler+0x1aa>
    2948:	e758      	b.n	27fc <USB_Handler+0x5c>
    294a:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    294c:	7ca1      	ldrb	r1, [r4, #18]
    294e:	29ff      	cmp	r1, #255	; 0xff
    2950:	d0f6      	beq.n	2940 <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    2952:	230f      	movs	r3, #15
    2954:	400b      	ands	r3, r1
    2956:	2101      	movs	r1, #1
    2958:	4099      	lsls	r1, r3
    295a:	420e      	tst	r6, r1
    295c:	d0f0      	beq.n	2940 <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    295e:	0159      	lsls	r1, r3, #5
    2960:	4f25      	ldr	r7, [pc, #148]	; (29f8 <USB_Handler+0x258>)
    2962:	46bc      	mov	ip, r7
    2964:	4461      	add	r1, ip
    2966:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2968:	015b      	lsls	r3, r3, #5
    296a:	4f24      	ldr	r7, [pc, #144]	; (29fc <USB_Handler+0x25c>)
    296c:	46bc      	mov	ip, r7
    296e:	4463      	add	r3, ip
    2970:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2972:	4019      	ands	r1, r3
	if (flags) {
    2974:	d0e4      	beq.n	2940 <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2976:	00ab      	lsls	r3, r5, #2
    2978:	195a      	adds	r2, r3, r5
    297a:	0092      	lsls	r2, r2, #2
    297c:	4b15      	ldr	r3, [pc, #84]	; (29d4 <USB_Handler+0x234>)
    297e:	469c      	mov	ip, r3
    2980:	4462      	add	r2, ip
    2982:	3230      	adds	r2, #48	; 0x30
    2984:	7dd2      	ldrb	r2, [r2, #23]
    2986:	2347      	movs	r3, #71	; 0x47
    2988:	4013      	ands	r3, r2
    298a:	2b01      	cmp	r3, #1
    298c:	d0a3      	beq.n	28d6 <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    298e:	b253      	sxtb	r3, r2
    2990:	2b00      	cmp	r3, #0
    2992:	dbb1      	blt.n	28f8 <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2994:	068b      	lsls	r3, r1, #26
    2996:	d4d0      	bmi.n	293a <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2998:	074b      	lsls	r3, r1, #29
    299a:	d40c      	bmi.n	29b6 <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    299c:	07cb      	lsls	r3, r1, #31
    299e:	d40e      	bmi.n	29be <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    29a0:	2307      	movs	r3, #7
    29a2:	401a      	ands	r2, r3
    29a4:	2a01      	cmp	r2, #1
    29a6:	d1cb      	bne.n	2940 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    29a8:	070b      	lsls	r3, r1, #28
    29aa:	d40c      	bmi.n	29c6 <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    29ac:	06cb      	lsls	r3, r1, #27
    29ae:	d5c7      	bpl.n	2940 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    29b0:	4b0e      	ldr	r3, [pc, #56]	; (29ec <USB_Handler+0x24c>)
    29b2:	4798      	blx	r3
    29b4:	e7c4      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    29b6:	2100      	movs	r1, #0
    29b8:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <USB_Handler+0x250>)
    29ba:	4798      	blx	r3
    29bc:	e7c0      	b.n	2940 <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    29be:	2101      	movs	r1, #1
    29c0:	4b0f      	ldr	r3, [pc, #60]	; (2a00 <USB_Handler+0x260>)
    29c2:	4798      	blx	r3
    29c4:	e7bc      	b.n	2940 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    29c6:	2101      	movs	r1, #1
    29c8:	4b09      	ldr	r3, [pc, #36]	; (29f0 <USB_Handler+0x250>)
    29ca:	4798      	blx	r3
    29cc:	e7b8      	b.n	2940 <USB_Handler+0x1a0>
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	41005000 	.word	0x41005000
    29d4:	20000608 	.word	0x20000608
    29d8:	00000201 	.word	0x00000201
    29dc:	20000588 	.word	0x20000588
    29e0:	40000800 	.word	0x40000800
    29e4:	000018d5 	.word	0x000018d5
    29e8:	00001711 	.word	0x00001711
    29ec:	0000167d 	.word	0x0000167d
    29f0:	000017d5 	.word	0x000017d5
    29f4:	0000191d 	.word	0x0000191d
    29f8:	41005100 	.word	0x41005100
    29fc:	41005109 	.word	0x41005109
    2a00:	00001ac9 	.word	0x00001ac9

00002a04 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2a04:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2a06:	4806      	ldr	r0, [pc, #24]	; (2a20 <cdc_device_acm_init+0x1c>)
    2a08:	3040      	adds	r0, #64	; 0x40
    2a0a:	4b06      	ldr	r3, [pc, #24]	; (2a24 <cdc_device_acm_init+0x20>)
    2a0c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2a0e:	4b06      	ldr	r3, [pc, #24]	; (2a28 <cdc_device_acm_init+0x24>)
    2a10:	4798      	blx	r3

	usbdc_start(single_desc);
    2a12:	4806      	ldr	r0, [pc, #24]	; (2a2c <cdc_device_acm_init+0x28>)
    2a14:	4b06      	ldr	r3, [pc, #24]	; (2a30 <cdc_device_acm_init+0x2c>)
    2a16:	4798      	blx	r3
	usbdc_attach();
    2a18:	4b06      	ldr	r3, [pc, #24]	; (2a34 <cdc_device_acm_init+0x30>)
    2a1a:	4798      	blx	r3
}
    2a1c:	bd10      	pop	{r4, pc}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	20000930 	.word	0x20000930
    2a24:	00003425 	.word	0x00003425
    2a28:	00002cdd 	.word	0x00002cdd
    2a2c:	2000002c 	.word	0x2000002c
    2a30:	0000349d 	.word	0x0000349d
    2a34:	000034d5 	.word	0x000034d5

00002a38 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2a38:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2a3a:	4b01      	ldr	r3, [pc, #4]	; (2a40 <usb_init+0x8>)
    2a3c:	4798      	blx	r3
}
    2a3e:	bd10      	pop	{r4, pc}
    2a40:	00002a05 	.word	0x00002a05

00002a44 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a46:	b083      	sub	sp, #12
    2a48:	0006      	movs	r6, r0
    2a4a:	000c      	movs	r4, r1
    2a4c:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2a4e:	780a      	ldrb	r2, [r1, #0]
    2a50:	0653      	lsls	r3, r2, #25
    2a52:	0f9b      	lsrs	r3, r3, #30
    2a54:	2b01      	cmp	r3, #1
    2a56:	d000      	beq.n	2a5a <cdcdf_acm_req+0x16>
    2a58:	e06c      	b.n	2b34 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2a5a:	7909      	ldrb	r1, [r1, #4]
    2a5c:	7963      	ldrb	r3, [r4, #5]
    2a5e:	021b      	lsls	r3, r3, #8
    2a60:	430b      	orrs	r3, r1
    2a62:	493b      	ldr	r1, [pc, #236]	; (2b50 <cdcdf_acm_req+0x10c>)
    2a64:	7809      	ldrb	r1, [r1, #0]
    2a66:	4299      	cmp	r1, r3
    2a68:	d003      	beq.n	2a72 <cdcdf_acm_req+0x2e>
    2a6a:	4939      	ldr	r1, [pc, #228]	; (2b50 <cdcdf_acm_req+0x10c>)
    2a6c:	7849      	ldrb	r1, [r1, #1]
    2a6e:	4299      	cmp	r1, r3
    2a70:	d163      	bne.n	2b3a <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2a72:	b252      	sxtb	r2, r2
    2a74:	2a00      	cmp	r2, #0
    2a76:	db0e      	blt.n	2a96 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2a78:	79a7      	ldrb	r7, [r4, #6]
    2a7a:	79e3      	ldrb	r3, [r4, #7]
    2a7c:	021b      	lsls	r3, r3, #8
    2a7e:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2a80:	4b34      	ldr	r3, [pc, #208]	; (2b54 <cdcdf_acm_req+0x110>)
    2a82:	4798      	blx	r3
	switch (req->bRequest) {
    2a84:	7863      	ldrb	r3, [r4, #1]
    2a86:	2b20      	cmp	r3, #32
    2a88:	d018      	beq.n	2abc <cdcdf_acm_req+0x78>
    2a8a:	2b22      	cmp	r3, #34	; 0x22
    2a8c:	d03c      	beq.n	2b08 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2a8e:	200d      	movs	r0, #13
    2a90:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2a92:	b003      	add	sp, #12
    2a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2a96:	2d01      	cmp	r5, #1
    2a98:	d052      	beq.n	2b40 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2a9a:	7863      	ldrb	r3, [r4, #1]
    2a9c:	2b21      	cmp	r3, #33	; 0x21
    2a9e:	d151      	bne.n	2b44 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2aa0:	79a2      	ldrb	r2, [r4, #6]
    2aa2:	79e3      	ldrb	r3, [r4, #7]
    2aa4:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2aa6:	4313      	orrs	r3, r2
    2aa8:	2b07      	cmp	r3, #7
    2aaa:	d14e      	bne.n	2b4a <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2aac:	2300      	movs	r3, #0
    2aae:	2207      	movs	r2, #7
    2ab0:	4927      	ldr	r1, [pc, #156]	; (2b50 <cdcdf_acm_req+0x10c>)
    2ab2:	3108      	adds	r1, #8
    2ab4:	0030      	movs	r0, r6
    2ab6:	4c28      	ldr	r4, [pc, #160]	; (2b58 <cdcdf_acm_req+0x114>)
    2ab8:	47a0      	blx	r4
    2aba:	e7ea      	b.n	2a92 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2abc:	2f07      	cmp	r7, #7
    2abe:	d134      	bne.n	2b2a <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2ac0:	2d00      	cmp	r5, #0
    2ac2:	d01a      	beq.n	2afa <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2ac4:	2207      	movs	r2, #7
    2ac6:	0001      	movs	r1, r0
    2ac8:	4668      	mov	r0, sp
    2aca:	4b24      	ldr	r3, [pc, #144]	; (2b5c <cdcdf_acm_req+0x118>)
    2acc:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2ace:	4b20      	ldr	r3, [pc, #128]	; (2b50 <cdcdf_acm_req+0x10c>)
    2ad0:	691b      	ldr	r3, [r3, #16]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d005      	beq.n	2ae2 <cdcdf_acm_req+0x9e>
    2ad6:	4668      	mov	r0, sp
    2ad8:	4798      	blx	r3
    2ada:	0003      	movs	r3, r0
			return ERR_NONE;
    2adc:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d0d7      	beq.n	2a92 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2ae2:	4a1b      	ldr	r2, [pc, #108]	; (2b50 <cdcdf_acm_req+0x10c>)
    2ae4:	0013      	movs	r3, r2
    2ae6:	9900      	ldr	r1, [sp, #0]
    2ae8:	6091      	str	r1, [r2, #8]
    2aea:	466a      	mov	r2, sp
    2aec:	8892      	ldrh	r2, [r2, #4]
    2aee:	819a      	strh	r2, [r3, #12]
    2af0:	466a      	mov	r2, sp
    2af2:	7992      	ldrb	r2, [r2, #6]
    2af4:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2af6:	2000      	movs	r0, #0
    2af8:	e7cb      	b.n	2a92 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2afa:	2300      	movs	r3, #0
    2afc:	2207      	movs	r2, #7
    2afe:	0001      	movs	r1, r0
    2b00:	0030      	movs	r0, r6
    2b02:	4c15      	ldr	r4, [pc, #84]	; (2b58 <cdcdf_acm_req+0x114>)
    2b04:	47a0      	blx	r4
    2b06:	e7c4      	b.n	2a92 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2b08:	2300      	movs	r3, #0
    2b0a:	2200      	movs	r2, #0
    2b0c:	2100      	movs	r1, #0
    2b0e:	2000      	movs	r0, #0
    2b10:	4d11      	ldr	r5, [pc, #68]	; (2b58 <cdcdf_acm_req+0x114>)
    2b12:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2b14:	4b0e      	ldr	r3, [pc, #56]	; (2b50 <cdcdf_acm_req+0x10c>)
    2b16:	695b      	ldr	r3, [r3, #20]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d009      	beq.n	2b30 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2b1c:	78a2      	ldrb	r2, [r4, #2]
    2b1e:	78e0      	ldrb	r0, [r4, #3]
    2b20:	0200      	lsls	r0, r0, #8
    2b22:	4310      	orrs	r0, r2
    2b24:	4798      	blx	r3
		return ERR_NONE;
    2b26:	2000      	movs	r0, #0
    2b28:	e7b3      	b.n	2a92 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2b2a:	2001      	movs	r0, #1
    2b2c:	4240      	negs	r0, r0
    2b2e:	e7b0      	b.n	2a92 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2b30:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2b32:	e7ae      	b.n	2a92 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2b34:	200a      	movs	r0, #10
    2b36:	4240      	negs	r0, r0
    2b38:	e7ab      	b.n	2a92 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2b3a:	200a      	movs	r0, #10
    2b3c:	4240      	negs	r0, r0
    2b3e:	e7a8      	b.n	2a92 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2b40:	2000      	movs	r0, #0
    2b42:	e7a6      	b.n	2a92 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2b44:	200d      	movs	r0, #13
    2b46:	4240      	negs	r0, r0
    2b48:	e7a3      	b.n	2a92 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2b4a:	2001      	movs	r0, #1
    2b4c:	4240      	negs	r0, r0
    2b4e:	e7a0      	b.n	2a92 <cdcdf_acm_req+0x4e>
    2b50:	200009b0 	.word	0x200009b0
    2b54:	000034e1 	.word	0x000034e1
    2b58:	00002f91 	.word	0x00002f91
    2b5c:	00003d6d 	.word	0x00003d6d

00002b60 <cdcdf_acm_ctrl>:
{
    2b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b62:	46de      	mov	lr, fp
    2b64:	4657      	mov	r7, sl
    2b66:	464e      	mov	r6, r9
    2b68:	4645      	mov	r5, r8
    2b6a:	b5e0      	push	{r5, r6, r7, lr}
    2b6c:	b083      	sub	sp, #12
    2b6e:	0016      	movs	r6, r2
	switch (ctrl) {
    2b70:	2901      	cmp	r1, #1
    2b72:	d068      	beq.n	2c46 <cdcdf_acm_ctrl+0xe6>
    2b74:	2900      	cmp	r1, #0
    2b76:	d00b      	beq.n	2b90 <cdcdf_acm_ctrl+0x30>
    2b78:	2902      	cmp	r1, #2
    2b7a:	d100      	bne.n	2b7e <cdcdf_acm_ctrl+0x1e>
    2b7c:	e093      	b.n	2ca6 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2b7e:	200d      	movs	r0, #13
    2b80:	4240      	negs	r0, r0
}
    2b82:	b003      	add	sp, #12
    2b84:	bc3c      	pop	{r2, r3, r4, r5}
    2b86:	4690      	mov	r8, r2
    2b88:	4699      	mov	r9, r3
    2b8a:	46a2      	mov	sl, r4
    2b8c:	46ab      	mov	fp, r5
    2b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2b90:	6883      	ldr	r3, [r0, #8]
    2b92:	4698      	mov	r8, r3
	ifc = desc->sod;
    2b94:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2b96:	2800      	cmp	r0, #0
    2b98:	d100      	bne.n	2b9c <cdcdf_acm_ctrl+0x3c>
    2b9a:	e087      	b.n	2cac <cdcdf_acm_ctrl+0x14c>
    2b9c:	9301      	str	r3, [sp, #4]
    2b9e:	2301      	movs	r3, #1
    2ba0:	4443      	add	r3, r8
    2ba2:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2ba4:	4f47      	ldr	r7, [pc, #284]	; (2cc4 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    2ba6:	4b48      	ldr	r3, [pc, #288]	; (2cc8 <cdcdf_acm_ctrl+0x168>)
    2ba8:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2baa:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2bac:	7943      	ldrb	r3, [r0, #5]
    2bae:	2108      	movs	r1, #8
    2bb0:	438b      	bics	r3, r1
    2bb2:	2b02      	cmp	r3, #2
    2bb4:	d002      	beq.n	2bbc <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    2bb6:	200a      	movs	r0, #10
    2bb8:	4240      	negs	r0, r0
    2bba:	e7e2      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
    2bbc:	9901      	ldr	r1, [sp, #4]
    2bbe:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2bc0:	780b      	ldrb	r3, [r1, #0]
    2bc2:	429a      	cmp	r2, r3
    2bc4:	d075      	beq.n	2cb2 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2bc6:	2bff      	cmp	r3, #255	; 0xff
    2bc8:	d176      	bne.n	2cb8 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2bca:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2bcc:	2205      	movs	r2, #5
    2bce:	6871      	ldr	r1, [r6, #4]
    2bd0:	4b3e      	ldr	r3, [pc, #248]	; (2ccc <cdcdf_acm_ctrl+0x16c>)
    2bd2:	4798      	blx	r3
    2bd4:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2bd6:	d11e      	bne.n	2c16 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2bd8:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2bda:	7803      	ldrb	r3, [r0, #0]
    2bdc:	18c0      	adds	r0, r0, r3
    2bde:	2204      	movs	r2, #4
    2be0:	6871      	ldr	r1, [r6, #4]
    2be2:	4b3a      	ldr	r3, [pc, #232]	; (2ccc <cdcdf_acm_ctrl+0x16c>)
    2be4:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2be6:	9b01      	ldr	r3, [sp, #4]
    2be8:	455b      	cmp	r3, fp
    2bea:	d027      	beq.n	2c3c <cdcdf_acm_ctrl+0xdc>
    2bec:	9b01      	ldr	r3, [sp, #4]
    2bee:	3301      	adds	r3, #1
    2bf0:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    2bf2:	2800      	cmp	r0, #0
    2bf4:	d1d9      	bne.n	2baa <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    2bf6:	200a      	movs	r0, #10
    2bf8:	4240      	negs	r0, r0
    2bfa:	e7c2      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2bfc:	4653      	mov	r3, sl
    2bfe:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2c00:	0028      	movs	r0, r5
    2c02:	4b31      	ldr	r3, [pc, #196]	; (2cc8 <cdcdf_acm_ctrl+0x168>)
    2c04:	4798      	blx	r3
			desc->sod = ep;
    2c06:	6034      	str	r4, [r6, #0]
    2c08:	7820      	ldrb	r0, [r4, #0]
    2c0a:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2c0c:	6871      	ldr	r1, [r6, #4]
    2c0e:	4b30      	ldr	r3, [pc, #192]	; (2cd0 <cdcdf_acm_ctrl+0x170>)
    2c10:	4798      	blx	r3
    2c12:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2c14:	d0e0      	beq.n	2bd8 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2c16:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2c18:	7963      	ldrb	r3, [r4, #5]
    2c1a:	021b      	lsls	r3, r3, #8
    2c1c:	7922      	ldrb	r2, [r4, #4]
    2c1e:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2c20:	b292      	uxth	r2, r2
    2c22:	78e1      	ldrb	r1, [r4, #3]
    2c24:	0028      	movs	r0, r5
    2c26:	47b8      	blx	r7
    2c28:	2800      	cmp	r0, #0
    2c2a:	d148      	bne.n	2cbe <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2c2c:	b26b      	sxtb	r3, r5
    2c2e:	2b00      	cmp	r3, #0
    2c30:	dbe4      	blt.n	2bfc <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2c32:	4643      	mov	r3, r8
    2c34:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2c36:	0028      	movs	r0, r5
    2c38:	47c8      	blx	r9
    2c3a:	e7e4      	b.n	2c06 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2c3c:	2201      	movs	r2, #1
    2c3e:	4b25      	ldr	r3, [pc, #148]	; (2cd4 <cdcdf_acm_ctrl+0x174>)
    2c40:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2c42:	2000      	movs	r0, #0
    2c44:	e79d      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2c46:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2c48:	2a00      	cmp	r2, #0
    2c4a:	d008      	beq.n	2c5e <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2c4c:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2c4e:	795b      	ldrb	r3, [r3, #5]
    2c50:	2208      	movs	r2, #8
    2c52:	4393      	bics	r3, r2
    2c54:	2b02      	cmp	r3, #2
    2c56:	d002      	beq.n	2c5e <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2c58:	200a      	movs	r0, #10
    2c5a:	4240      	negs	r0, r0
    2c5c:	e791      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2c5e:	7823      	ldrb	r3, [r4, #0]
    2c60:	2bff      	cmp	r3, #255	; 0xff
    2c62:	d008      	beq.n	2c76 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    2c64:	23ff      	movs	r3, #255	; 0xff
    2c66:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2c68:	78a0      	ldrb	r0, [r4, #2]
    2c6a:	28ff      	cmp	r0, #255	; 0xff
    2c6c:	d003      	beq.n	2c76 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2c6e:	4b1a      	ldr	r3, [pc, #104]	; (2cd8 <cdcdf_acm_ctrl+0x178>)
    2c70:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2c72:	23ff      	movs	r3, #255	; 0xff
    2c74:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2c76:	7863      	ldrb	r3, [r4, #1]
    2c78:	2bff      	cmp	r3, #255	; 0xff
    2c7a:	d008      	beq.n	2c8e <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    2c7c:	23ff      	movs	r3, #255	; 0xff
    2c7e:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2c80:	78e0      	ldrb	r0, [r4, #3]
    2c82:	28ff      	cmp	r0, #255	; 0xff
    2c84:	d003      	beq.n	2c8e <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2c86:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <cdcdf_acm_ctrl+0x178>)
    2c88:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2c8a:	23ff      	movs	r3, #255	; 0xff
    2c8c:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2c8e:	7920      	ldrb	r0, [r4, #4]
    2c90:	28ff      	cmp	r0, #255	; 0xff
    2c92:	d003      	beq.n	2c9c <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    2c94:	4b10      	ldr	r3, [pc, #64]	; (2cd8 <cdcdf_acm_ctrl+0x178>)
    2c96:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2c98:	23ff      	movs	r3, #255	; 0xff
    2c9a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2c9c:	2200      	movs	r2, #0
    2c9e:	4b0d      	ldr	r3, [pc, #52]	; (2cd4 <cdcdf_acm_ctrl+0x174>)
    2ca0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2ca2:	2000      	movs	r0, #0
    2ca4:	e76d      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    2ca6:	201b      	movs	r0, #27
    2ca8:	4240      	negs	r0, r0
    2caa:	e76a      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2cac:	200a      	movs	r0, #10
    2cae:	4240      	negs	r0, r0
    2cb0:	e767      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    2cb2:	2012      	movs	r0, #18
    2cb4:	4240      	negs	r0, r0
    2cb6:	e764      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2cb8:	201c      	movs	r0, #28
    2cba:	4240      	negs	r0, r0
    2cbc:	e761      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2cbe:	2014      	movs	r0, #20
    2cc0:	4240      	negs	r0, r0
    2cc2:	e75e      	b.n	2b82 <cdcdf_acm_ctrl+0x22>
    2cc4:	00000ee9 	.word	0x00000ee9
    2cc8:	00000f7d 	.word	0x00000f7d
    2ccc:	000034fd 	.word	0x000034fd
    2cd0:	00003533 	.word	0x00003533
    2cd4:	200009b0 	.word	0x200009b0
    2cd8:	00000f51 	.word	0x00000f51

00002cdc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2cdc:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2cde:	4b0a      	ldr	r3, [pc, #40]	; (2d08 <cdcdf_acm_init+0x2c>)
    2ce0:	4798      	blx	r3
    2ce2:	2801      	cmp	r0, #1
    2ce4:	d80c      	bhi.n	2d00 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2ce6:	4809      	ldr	r0, [pc, #36]	; (2d0c <cdcdf_acm_init+0x30>)
    2ce8:	4b09      	ldr	r3, [pc, #36]	; (2d10 <cdcdf_acm_init+0x34>)
    2cea:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2cec:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2cee:	3018      	adds	r0, #24
    2cf0:	4b08      	ldr	r3, [pc, #32]	; (2d14 <cdcdf_acm_init+0x38>)
    2cf2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2cf4:	4908      	ldr	r1, [pc, #32]	; (2d18 <cdcdf_acm_init+0x3c>)
    2cf6:	2001      	movs	r0, #1
    2cf8:	4b08      	ldr	r3, [pc, #32]	; (2d1c <cdcdf_acm_init+0x40>)
    2cfa:	4798      	blx	r3
	return ERR_NONE;
    2cfc:	2000      	movs	r0, #0
}
    2cfe:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2d00:	2011      	movs	r0, #17
    2d02:	4240      	negs	r0, r0
    2d04:	e7fb      	b.n	2cfe <cdcdf_acm_init+0x22>
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	000034ed 	.word	0x000034ed
    2d0c:	200009b0 	.word	0x200009b0
    2d10:	00002b61 	.word	0x00002b61
    2d14:	00003485 	.word	0x00003485
    2d18:	2000008c 	.word	0x2000008c
    2d1c:	000033ed 	.word	0x000033ed

00002d20 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    2d20:	b510      	push	{r4, lr}
    2d22:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2d24:	4b07      	ldr	r3, [pc, #28]	; (2d44 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    2d26:	795b      	ldrb	r3, [r3, #5]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d007      	beq.n	2d3c <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    2d2c:	4b05      	ldr	r3, [pc, #20]	; (2d44 <cdcdf_acm_read+0x24>)
    2d2e:	7918      	ldrb	r0, [r3, #4]
    2d30:	2300      	movs	r3, #0
    2d32:	000a      	movs	r2, r1
    2d34:	0021      	movs	r1, r4
    2d36:	4c04      	ldr	r4, [pc, #16]	; (2d48 <cdcdf_acm_read+0x28>)
    2d38:	47a0      	blx	r4
}
    2d3a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2d3c:	2011      	movs	r0, #17
    2d3e:	4240      	negs	r0, r0
    2d40:	e7fb      	b.n	2d3a <cdcdf_acm_read+0x1a>
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	200009b0 	.word	0x200009b0
    2d48:	00002f91 	.word	0x00002f91

00002d4c <cdcdf_acm_write>:
{
    2d4c:	b510      	push	{r4, lr}
    2d4e:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    2d50:	4b07      	ldr	r3, [pc, #28]	; (2d70 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    2d52:	795b      	ldrb	r3, [r3, #5]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d007      	beq.n	2d68 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <cdcdf_acm_write+0x24>)
    2d5a:	78d8      	ldrb	r0, [r3, #3]
    2d5c:	2301      	movs	r3, #1
    2d5e:	000a      	movs	r2, r1
    2d60:	0021      	movs	r1, r4
    2d62:	4c04      	ldr	r4, [pc, #16]	; (2d74 <cdcdf_acm_write+0x28>)
    2d64:	47a0      	blx	r4
}
    2d66:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2d68:	2011      	movs	r0, #17
    2d6a:	4240      	negs	r0, r0
    2d6c:	e7fb      	b.n	2d66 <cdcdf_acm_write+0x1a>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	200009b0 	.word	0x200009b0
    2d74:	00002f91 	.word	0x00002f91

00002d78 <cdcdf_acm_stop_xfer>:
{
    2d78:	b570      	push	{r4, r5, r6, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    2d7a:	4d03      	ldr	r5, [pc, #12]	; (2d88 <cdcdf_acm_stop_xfer+0x10>)
    2d7c:	78e8      	ldrb	r0, [r5, #3]
    2d7e:	4c03      	ldr	r4, [pc, #12]	; (2d8c <cdcdf_acm_stop_xfer+0x14>)
    2d80:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    2d82:	7928      	ldrb	r0, [r5, #4]
    2d84:	47a0      	blx	r4
}
    2d86:	bd70      	pop	{r4, r5, r6, pc}
    2d88:	200009b0 	.word	0x200009b0
    2d8c:	000010f1 	.word	0x000010f1

00002d90 <cdcdf_acm_register_callback>:
{
    2d90:	b510      	push	{r4, lr}
	switch (cb_type) {
    2d92:	2801      	cmp	r0, #1
    2d94:	d010      	beq.n	2db8 <cdcdf_acm_register_callback+0x28>
    2d96:	2800      	cmp	r0, #0
    2d98:	d006      	beq.n	2da8 <cdcdf_acm_register_callback+0x18>
    2d9a:	2802      	cmp	r0, #2
    2d9c:	d014      	beq.n	2dc8 <cdcdf_acm_register_callback+0x38>
    2d9e:	2803      	cmp	r0, #3
    2da0:	d016      	beq.n	2dd0 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    2da2:	200d      	movs	r0, #13
    2da4:	4240      	negs	r0, r0
    2da6:	e006      	b.n	2db6 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    2da8:	4b0b      	ldr	r3, [pc, #44]	; (2dd8 <cdcdf_acm_register_callback+0x48>)
    2daa:	7918      	ldrb	r0, [r3, #4]
    2dac:	000a      	movs	r2, r1
    2dae:	2102      	movs	r1, #2
    2db0:	4b0a      	ldr	r3, [pc, #40]	; (2ddc <cdcdf_acm_register_callback+0x4c>)
    2db2:	4798      	blx	r3
	return ERR_NONE;
    2db4:	2000      	movs	r0, #0
}
    2db6:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2db8:	4b07      	ldr	r3, [pc, #28]	; (2dd8 <cdcdf_acm_register_callback+0x48>)
    2dba:	78d8      	ldrb	r0, [r3, #3]
    2dbc:	000a      	movs	r2, r1
    2dbe:	2102      	movs	r1, #2
    2dc0:	4b06      	ldr	r3, [pc, #24]	; (2ddc <cdcdf_acm_register_callback+0x4c>)
    2dc2:	4798      	blx	r3
	return ERR_NONE;
    2dc4:	2000      	movs	r0, #0
		break;
    2dc6:	e7f6      	b.n	2db6 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2dc8:	4b03      	ldr	r3, [pc, #12]	; (2dd8 <cdcdf_acm_register_callback+0x48>)
    2dca:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    2dcc:	2000      	movs	r0, #0
		break;
    2dce:	e7f2      	b.n	2db6 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    2dd0:	4b01      	ldr	r3, [pc, #4]	; (2dd8 <cdcdf_acm_register_callback+0x48>)
    2dd2:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    2dd4:	2000      	movs	r0, #0
		break;
    2dd6:	e7ee      	b.n	2db6 <cdcdf_acm_register_callback+0x26>
    2dd8:	200009b0 	.word	0x200009b0
    2ddc:	00001189 	.word	0x00001189

00002de0 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    2de0:	4b01      	ldr	r3, [pc, #4]	; (2de8 <cdcdf_acm_is_enabled+0x8>)
    2de2:	7958      	ldrb	r0, [r3, #5]
}
    2de4:	4770      	bx	lr
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	200009b0 	.word	0x200009b0

00002dec <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2dec:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2dee:	4b06      	ldr	r3, [pc, #24]	; (2e08 <usbdc_unconfig+0x1c>)
    2df0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2df2:	2c00      	cmp	r4, #0
    2df4:	d007      	beq.n	2e06 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2df6:	2200      	movs	r2, #0
    2df8:	2101      	movs	r1, #1
    2dfa:	0020      	movs	r0, r4
    2dfc:	6863      	ldr	r3, [r4, #4]
    2dfe:	4798      	blx	r3
		func = func->next;
    2e00:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2e02:	2c00      	cmp	r4, #0
    2e04:	d1f7      	bne.n	2df6 <usbdc_unconfig+0xa>
	}
}
    2e06:	bd10      	pop	{r4, pc}
    2e08:	200009d4 	.word	0x200009d4

00002e0c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2e0c:	b570      	push	{r4, r5, r6, lr}
    2e0e:	0006      	movs	r6, r0
    2e10:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2e12:	4b07      	ldr	r3, [pc, #28]	; (2e30 <usbdc_change_notify+0x24>)
    2e14:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2e16:	2c00      	cmp	r4, #0
    2e18:	d103      	bne.n	2e22 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    2e1a:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    2e1c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2e1e:	2c00      	cmp	r4, #0
    2e20:	d0fb      	beq.n	2e1a <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    2e22:	6863      	ldr	r3, [r4, #4]
    2e24:	2b00      	cmp	r3, #0
    2e26:	d0f9      	beq.n	2e1c <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2e28:	0029      	movs	r1, r5
    2e2a:	0030      	movs	r0, r6
    2e2c:	4798      	blx	r3
    2e2e:	e7f5      	b.n	2e1c <usbdc_change_notify+0x10>
    2e30:	200009d4 	.word	0x200009d4

00002e34 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e36:	0007      	movs	r7, r0
    2e38:	000e      	movs	r6, r1
    2e3a:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2e3c:	4b0d      	ldr	r3, [pc, #52]	; (2e74 <usbdc_request_handler+0x40>)
    2e3e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2e40:	2c00      	cmp	r4, #0
    2e42:	d104      	bne.n	2e4e <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2e44:	2000      	movs	r0, #0
    2e46:	e011      	b.n	2e6c <usbdc_request_handler+0x38>
		h = h->next;
    2e48:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2e4a:	2c00      	cmp	r4, #0
    2e4c:	d00d      	beq.n	2e6a <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    2e4e:	6863      	ldr	r3, [r4, #4]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d0f9      	beq.n	2e48 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2e54:	002a      	movs	r2, r5
    2e56:	0031      	movs	r1, r6
    2e58:	0038      	movs	r0, r7
    2e5a:	4798      	blx	r3
			if (0 == rc) {
    2e5c:	2800      	cmp	r0, #0
    2e5e:	d006      	beq.n	2e6e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    2e60:	300a      	adds	r0, #10
    2e62:	d0f1      	beq.n	2e48 <usbdc_request_handler+0x14>
				return -1;
    2e64:	2001      	movs	r0, #1
    2e66:	4240      	negs	r0, r0
    2e68:	e000      	b.n	2e6c <usbdc_request_handler+0x38>
	return false;
    2e6a:	2000      	movs	r0, #0
}
    2e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2e6e:	2001      	movs	r0, #1
    2e70:	e7fc      	b.n	2e6c <usbdc_request_handler+0x38>
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	200009d4 	.word	0x200009d4

00002e78 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2e78:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2e7a:	4b06      	ldr	r3, [pc, #24]	; (2e94 <usbd_sof_cb+0x1c>)
    2e7c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2e7e:	2c00      	cmp	r4, #0
    2e80:	d103      	bne.n	2e8a <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    2e82:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2e84:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2e86:	2c00      	cmp	r4, #0
    2e88:	d0fb      	beq.n	2e82 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    2e8a:	6863      	ldr	r3, [r4, #4]
    2e8c:	2b00      	cmp	r3, #0
    2e8e:	d0f9      	beq.n	2e84 <usbd_sof_cb+0xc>
			sof->cb();
    2e90:	4798      	blx	r3
    2e92:	e7f7      	b.n	2e84 <usbd_sof_cb+0xc>
    2e94:	200009d4 	.word	0x200009d4

00002e98 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2e98:	b510      	push	{r4, lr}
    2e9a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2e9c:	2900      	cmp	r1, #0
    2e9e:	d003      	beq.n	2ea8 <usbdc_cb_ctl_done+0x10>
    2ea0:	2901      	cmp	r1, #1
    2ea2:	d029      	beq.n	2ef8 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2ea4:	2000      	movs	r0, #0
    2ea6:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2ea8:	7813      	ldrb	r3, [r2, #0]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d1fa      	bne.n	2ea4 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    2eae:	7853      	ldrb	r3, [r2, #1]
    2eb0:	2b05      	cmp	r3, #5
    2eb2:	d011      	beq.n	2ed8 <usbdc_cb_ctl_done+0x40>
    2eb4:	2b09      	cmp	r3, #9
    2eb6:	d1f5      	bne.n	2ea4 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2eb8:	7892      	ldrb	r2, [r2, #2]
    2eba:	4b12      	ldr	r3, [pc, #72]	; (2f04 <usbdc_cb_ctl_done+0x6c>)
    2ebc:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2ebe:	78a3      	ldrb	r3, [r4, #2]
    2ec0:	78e1      	ldrb	r1, [r4, #3]
    2ec2:	0209      	lsls	r1, r1, #8
    2ec4:	4319      	orrs	r1, r3
    2ec6:	1e4b      	subs	r3, r1, #1
    2ec8:	4199      	sbcs	r1, r3
    2eca:	3103      	adds	r1, #3
    2ecc:	4b0d      	ldr	r3, [pc, #52]	; (2f04 <usbdc_cb_ctl_done+0x6c>)
    2ece:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2ed0:	2001      	movs	r0, #1
    2ed2:	4b0d      	ldr	r3, [pc, #52]	; (2f08 <usbdc_cb_ctl_done+0x70>)
    2ed4:	4798      	blx	r3
    2ed6:	e7e5      	b.n	2ea4 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2ed8:	7890      	ldrb	r0, [r2, #2]
    2eda:	4b0c      	ldr	r3, [pc, #48]	; (2f0c <usbdc_cb_ctl_done+0x74>)
    2edc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2ede:	78a3      	ldrb	r3, [r4, #2]
    2ee0:	78e1      	ldrb	r1, [r4, #3]
    2ee2:	0209      	lsls	r1, r1, #8
    2ee4:	4319      	orrs	r1, r3
    2ee6:	1e4b      	subs	r3, r1, #1
    2ee8:	4199      	sbcs	r1, r3
    2eea:	3102      	adds	r1, #2
    2eec:	4b05      	ldr	r3, [pc, #20]	; (2f04 <usbdc_cb_ctl_done+0x6c>)
    2eee:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2ef0:	2001      	movs	r0, #1
    2ef2:	4b05      	ldr	r3, [pc, #20]	; (2f08 <usbdc_cb_ctl_done+0x70>)
    2ef4:	4798      	blx	r3
    2ef6:	e7d5      	b.n	2ea4 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2ef8:	2201      	movs	r2, #1
    2efa:	0021      	movs	r1, r4
    2efc:	2000      	movs	r0, #0
    2efe:	4b04      	ldr	r3, [pc, #16]	; (2f10 <usbdc_cb_ctl_done+0x78>)
    2f00:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2f02:	e7cf      	b.n	2ea4 <usbdc_cb_ctl_done+0xc>
    2f04:	200009d4 	.word	0x200009d4
    2f08:	00002e0d 	.word	0x00002e0d
    2f0c:	00000edd 	.word	0x00000edd
    2f10:	00002e35 	.word	0x00002e35

00002f14 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2f14:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2f16:	4b0d      	ldr	r3, [pc, #52]	; (2f4c <usbdc_reset+0x38>)
    2f18:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2f1a:	4c0d      	ldr	r4, [pc, #52]	; (2f50 <usbdc_reset+0x3c>)
    2f1c:	2302      	movs	r3, #2
    2f1e:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    2f20:	2300      	movs	r3, #0
    2f22:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2f24:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2f26:	2000      	movs	r0, #0
    2f28:	4b0a      	ldr	r3, [pc, #40]	; (2f54 <usbdc_reset+0x40>)
    2f2a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2f2c:	7f20      	ldrb	r0, [r4, #28]
    2f2e:	4b0a      	ldr	r3, [pc, #40]	; (2f58 <usbdc_reset+0x44>)
    2f30:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2f32:	4a0a      	ldr	r2, [pc, #40]	; (2f5c <usbdc_reset+0x48>)
    2f34:	2100      	movs	r1, #0
    2f36:	2000      	movs	r0, #0
    2f38:	4c09      	ldr	r4, [pc, #36]	; (2f60 <usbdc_reset+0x4c>)
    2f3a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2f3c:	4a09      	ldr	r2, [pc, #36]	; (2f64 <usbdc_reset+0x50>)
    2f3e:	2102      	movs	r1, #2
    2f40:	2000      	movs	r0, #0
    2f42:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2f44:	2000      	movs	r0, #0
    2f46:	4b08      	ldr	r3, [pc, #32]	; (2f68 <usbdc_reset+0x54>)
    2f48:	4798      	blx	r3
}
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	00002ded 	.word	0x00002ded
    2f50:	200009d4 	.word	0x200009d4
    2f54:	00000f51 	.word	0x00000f51
    2f58:	00000f3d 	.word	0x00000f3d
    2f5c:	00002fad 	.word	0x00002fad
    2f60:	00001189 	.word	0x00001189
    2f64:	00002e99 	.word	0x00002e99
    2f68:	00000f7d 	.word	0x00000f7d

00002f6c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2f6c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    2f6e:	2800      	cmp	r0, #0
    2f70:	d002      	beq.n	2f78 <usbd_event_cb+0xc>
    2f72:	2801      	cmp	r0, #1
    2f74:	d004      	beq.n	2f80 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2f76:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2f78:	2000      	movs	r0, #0
    2f7a:	4b03      	ldr	r3, [pc, #12]	; (2f88 <usbd_event_cb+0x1c>)
    2f7c:	4798      	blx	r3
		break;
    2f7e:	e7fa      	b.n	2f76 <usbd_event_cb+0xa>
		usbdc_reset();
    2f80:	4b02      	ldr	r3, [pc, #8]	; (2f8c <usbd_event_cb+0x20>)
    2f82:	4798      	blx	r3
}
    2f84:	e7f7      	b.n	2f76 <usbd_event_cb+0xa>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	00002e0d 	.word	0x00002e0d
    2f8c:	00002f15 	.word	0x00002f15

00002f90 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2f90:	b510      	push	{r4, lr}
    2f92:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2f94:	ac01      	add	r4, sp, #4
    2f96:	9101      	str	r1, [sp, #4]
    2f98:	9202      	str	r2, [sp, #8]
    2f9a:	7220      	strb	r0, [r4, #8]
    2f9c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2f9e:	0020      	movs	r0, r4
    2fa0:	4b01      	ldr	r3, [pc, #4]	; (2fa8 <usbdc_xfer+0x18>)
    2fa2:	4798      	blx	r3
}
    2fa4:	b004      	add	sp, #16
    2fa6:	bd10      	pop	{r4, pc}
    2fa8:	00000fc9 	.word	0x00000fc9

00002fac <usbdc_cb_ctl_req>:
{
    2fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fae:	46c6      	mov	lr, r8
    2fb0:	b500      	push	{lr}
    2fb2:	b084      	sub	sp, #16
    2fb4:	0005      	movs	r5, r0
    2fb6:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2fb8:	2200      	movs	r2, #0
    2fba:	4bb5      	ldr	r3, [pc, #724]	; (3290 <usbdc_cb_ctl_req+0x2e4>)
    2fbc:	4798      	blx	r3
    2fbe:	1c43      	adds	r3, r0, #1
    2fc0:	d00d      	beq.n	2fde <usbdc_cb_ctl_req+0x32>
		return true;
    2fc2:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2fc4:	2801      	cmp	r0, #1
    2fc6:	d00b      	beq.n	2fe0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2fc8:	7822      	ldrb	r2, [r4, #0]
    2fca:	231f      	movs	r3, #31
    2fcc:	0011      	movs	r1, r2
    2fce:	4399      	bics	r1, r3
    2fd0:	d00b      	beq.n	2fea <usbdc_cb_ctl_req+0x3e>
    2fd2:	b2cb      	uxtb	r3, r1
    2fd4:	2b80      	cmp	r3, #128	; 0x80
    2fd6:	d100      	bne.n	2fda <usbdc_cb_ctl_req+0x2e>
    2fd8:	e0f8      	b.n	31cc <usbdc_cb_ctl_req+0x220>
		return false;
    2fda:	2300      	movs	r3, #0
    2fdc:	e000      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    2fde:	2300      	movs	r3, #0
}
    2fe0:	0018      	movs	r0, r3
    2fe2:	b004      	add	sp, #16
    2fe4:	bc04      	pop	{r2}
    2fe6:	4690      	mov	r8, r2
    2fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    2fea:	7863      	ldrb	r3, [r4, #1]
    2fec:	2b0b      	cmp	r3, #11
    2fee:	d900      	bls.n	2ff2 <usbdc_cb_ctl_req+0x46>
    2ff0:	e1e4      	b.n	33bc <usbdc_cb_ctl_req+0x410>
    2ff2:	009b      	lsls	r3, r3, #2
    2ff4:	49a7      	ldr	r1, [pc, #668]	; (3294 <usbdc_cb_ctl_req+0x2e8>)
    2ff6:	58cb      	ldr	r3, [r1, r3]
    2ff8:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2ffa:	2301      	movs	r3, #1
    2ffc:	2200      	movs	r2, #0
    2ffe:	2100      	movs	r1, #0
    3000:	0028      	movs	r0, r5
    3002:	4ca5      	ldr	r4, [pc, #660]	; (3298 <usbdc_cb_ctl_req+0x2ec>)
    3004:	47a0      	blx	r4
    3006:	4243      	negs	r3, r0
    3008:	4143      	adcs	r3, r0
    300a:	b2db      	uxtb	r3, r3
    300c:	e7e8      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    300e:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    3010:	2a00      	cmp	r2, #0
    3012:	d01a      	beq.n	304a <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3014:	4ba1      	ldr	r3, [pc, #644]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	6859      	ldr	r1, [r3, #4]
    301a:	6818      	ldr	r0, [r3, #0]
    301c:	4ba0      	ldr	r3, [pc, #640]	; (32a0 <usbdc_cb_ctl_req+0x2f4>)
    301e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3020:	2800      	cmp	r0, #0
    3022:	d100      	bne.n	3026 <usbdc_cb_ctl_req+0x7a>
    3024:	e1d4      	b.n	33d0 <usbdc_cb_ctl_req+0x424>
    3026:	78c3      	ldrb	r3, [r0, #3]
    3028:	021b      	lsls	r3, r3, #8
    302a:	7881      	ldrb	r1, [r0, #2]
    302c:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    302e:	b289      	uxth	r1, r1
    3030:	1841      	adds	r1, r0, r1
    3032:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3034:	2204      	movs	r2, #4
    3036:	4b9b      	ldr	r3, [pc, #620]	; (32a4 <usbdc_cb_ctl_req+0x2f8>)
    3038:	4798      	blx	r3
    303a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    303c:	2800      	cmp	r0, #0
    303e:	d006      	beq.n	304e <usbdc_cb_ctl_req+0xa2>
    3040:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3042:	4f96      	ldr	r7, [pc, #600]	; (329c <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3044:	4b97      	ldr	r3, [pc, #604]	; (32a4 <usbdc_cb_ctl_req+0x2f8>)
    3046:	4698      	mov	r8, r3
    3048:	e01a      	b.n	3080 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    304a:	4b97      	ldr	r3, [pc, #604]	; (32a8 <usbdc_cb_ctl_req+0x2fc>)
    304c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    304e:	2301      	movs	r3, #1
    3050:	2200      	movs	r2, #0
    3052:	2100      	movs	r1, #0
    3054:	0028      	movs	r0, r5
    3056:	4c90      	ldr	r4, [pc, #576]	; (3298 <usbdc_cb_ctl_req+0x2ec>)
    3058:	47a0      	blx	r4
    305a:	4243      	negs	r3, r0
    305c:	4143      	adcs	r3, r0
    305e:	b2db      	uxtb	r3, r3
    3060:	e7be      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3062:	0034      	movs	r4, r6
    3064:	e000      	b.n	3068 <usbdc_cb_ctl_req+0xbc>
    3066:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3068:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    306a:	7803      	ldrb	r3, [r0, #0]
    306c:	18c0      	adds	r0, r0, r3
    306e:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3070:	9b03      	ldr	r3, [sp, #12]
    3072:	9301      	str	r3, [sp, #4]
    3074:	2204      	movs	r2, #4
    3076:	0019      	movs	r1, r3
    3078:	47c0      	blx	r8
    307a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    307c:	2800      	cmp	r0, #0
    307e:	d0e6      	beq.n	304e <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3080:	7886      	ldrb	r6, [r0, #2]
    3082:	42a6      	cmp	r6, r4
    3084:	d0f0      	beq.n	3068 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3086:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    3088:	2c00      	cmp	r4, #0
    308a:	d0ea      	beq.n	3062 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    308c:	aa02      	add	r2, sp, #8
    308e:	2100      	movs	r1, #0
    3090:	0020      	movs	r0, r4
    3092:	6863      	ldr	r3, [r4, #4]
    3094:	4798      	blx	r3
    3096:	2800      	cmp	r0, #0
    3098:	d0e5      	beq.n	3066 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    309a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    309c:	2c00      	cmp	r4, #0
    309e:	d1f5      	bne.n	308c <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    30a0:	0034      	movs	r4, r6
    30a2:	e7e1      	b.n	3068 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30a4:	231f      	movs	r3, #31
    30a6:	401a      	ands	r2, r3
		return false;
    30a8:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30aa:	2a02      	cmp	r2, #2
    30ac:	d198      	bne.n	2fe0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    30ae:	79a3      	ldrb	r3, [r4, #6]
    30b0:	79e2      	ldrb	r2, [r4, #7]
    30b2:	0212      	lsls	r2, r2, #8
    30b4:	431a      	orrs	r2, r3
			return false;
    30b6:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    30b8:	2a00      	cmp	r2, #0
    30ba:	d000      	beq.n	30be <usbdc_cb_ctl_req+0x112>
    30bc:	e790      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    30be:	7920      	ldrb	r0, [r4, #4]
    30c0:	2100      	movs	r1, #0
    30c2:	4b7a      	ldr	r3, [pc, #488]	; (32ac <usbdc_cb_ctl_req+0x300>)
    30c4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    30c6:	2301      	movs	r3, #1
    30c8:	2200      	movs	r2, #0
    30ca:	2100      	movs	r1, #0
    30cc:	0028      	movs	r0, r5
    30ce:	4c72      	ldr	r4, [pc, #456]	; (3298 <usbdc_cb_ctl_req+0x2ec>)
    30d0:	47a0      	blx	r4
		return true;
    30d2:	2301      	movs	r3, #1
    30d4:	e784      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30d6:	231f      	movs	r3, #31
    30d8:	401a      	ands	r2, r3
		return false;
    30da:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30dc:	2a02      	cmp	r2, #2
    30de:	d000      	beq.n	30e2 <usbdc_cb_ctl_req+0x136>
    30e0:	e77e      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    30e2:	79a3      	ldrb	r3, [r4, #6]
    30e4:	79e2      	ldrb	r2, [r4, #7]
    30e6:	0212      	lsls	r2, r2, #8
    30e8:	431a      	orrs	r2, r3
			return false;
    30ea:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    30ec:	2a00      	cmp	r2, #0
    30ee:	d000      	beq.n	30f2 <usbdc_cb_ctl_req+0x146>
    30f0:	e776      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    30f2:	7920      	ldrb	r0, [r4, #4]
    30f4:	2101      	movs	r1, #1
    30f6:	4b6d      	ldr	r3, [pc, #436]	; (32ac <usbdc_cb_ctl_req+0x300>)
    30f8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    30fa:	2301      	movs	r3, #1
    30fc:	2200      	movs	r2, #0
    30fe:	2100      	movs	r1, #0
    3100:	0028      	movs	r0, r5
    3102:	4c65      	ldr	r4, [pc, #404]	; (3298 <usbdc_cb_ctl_req+0x2ec>)
    3104:	47a0      	blx	r4
		return true;
    3106:	2301      	movs	r3, #1
    3108:	e76a      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    310a:	78a3      	ldrb	r3, [r4, #2]
    310c:	78e5      	ldrb	r5, [r4, #3]
    310e:	022d      	lsls	r5, r5, #8
    3110:	431d      	orrs	r5, r3
    3112:	7923      	ldrb	r3, [r4, #4]
    3114:	7964      	ldrb	r4, [r4, #5]
    3116:	0224      	lsls	r4, r4, #8
    3118:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    311a:	4a60      	ldr	r2, [pc, #384]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    311c:	6813      	ldr	r3, [r2, #0]
    311e:	7ed2      	ldrb	r2, [r2, #27]
    3120:	6859      	ldr	r1, [r3, #4]
    3122:	6818      	ldr	r0, [r3, #0]
    3124:	4b5e      	ldr	r3, [pc, #376]	; (32a0 <usbdc_cb_ctl_req+0x2f4>)
    3126:	4798      	blx	r3
	if (NULL == ifc) {
    3128:	2800      	cmp	r0, #0
    312a:	d047      	beq.n	31bc <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    312c:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    312e:	78c3      	ldrb	r3, [r0, #3]
    3130:	021b      	lsls	r3, r3, #8
    3132:	7881      	ldrb	r1, [r0, #2]
    3134:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3136:	b289      	uxth	r1, r1
    3138:	1841      	adds	r1, r0, r1
    313a:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    313c:	2204      	movs	r2, #4
    313e:	4b59      	ldr	r3, [pc, #356]	; (32a4 <usbdc_cb_ctl_req+0x2f8>)
    3140:	4798      	blx	r3
    3142:	2800      	cmp	r0, #0
    3144:	d03c      	beq.n	31c0 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3146:	4e57      	ldr	r6, [pc, #348]	; (32a4 <usbdc_cb_ctl_req+0x2f8>)
    3148:	e008      	b.n	315c <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    314a:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    314c:	7803      	ldrb	r3, [r0, #0]
    314e:	18c0      	adds	r0, r0, r3
    3150:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3152:	2204      	movs	r2, #4
    3154:	9903      	ldr	r1, [sp, #12]
    3156:	47b0      	blx	r6
		if (NULL == ifc) {
    3158:	2800      	cmp	r0, #0
    315a:	d033      	beq.n	31c4 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    315c:	7883      	ldrb	r3, [r0, #2]
    315e:	42a3      	cmp	r3, r4
    3160:	d1f3      	bne.n	314a <usbdc_cb_ctl_req+0x19e>
    3162:	78c3      	ldrb	r3, [r0, #3]
    3164:	42ab      	cmp	r3, r5
    3166:	d1f0      	bne.n	314a <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3168:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    316a:	4b4c      	ldr	r3, [pc, #304]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    316c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    316e:	2e00      	cmp	r6, #0
    3170:	d02a      	beq.n	31c8 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3172:	aa02      	add	r2, sp, #8
    3174:	2101      	movs	r1, #1
    3176:	0030      	movs	r0, r6
    3178:	6873      	ldr	r3, [r6, #4]
    317a:	4798      	blx	r3
    317c:	2800      	cmp	r0, #0
    317e:	d004      	beq.n	318a <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    3180:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    3182:	2e00      	cmp	r6, #0
    3184:	d1f5      	bne.n	3172 <usbdc_cb_ctl_req+0x1c6>
	return false;
    3186:	2300      	movs	r3, #0
    3188:	e72a      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    318a:	6873      	ldr	r3, [r6, #4]
    318c:	aa02      	add	r2, sp, #8
    318e:	2100      	movs	r1, #0
    3190:	0030      	movs	r0, r6
    3192:	4798      	blx	r3
			return false;
    3194:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3196:	2800      	cmp	r0, #0
    3198:	d000      	beq.n	319c <usbdc_cb_ctl_req+0x1f0>
    319a:	e721      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    319c:	2d00      	cmp	r5, #0
    319e:	d005      	beq.n	31ac <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    31a0:	493e      	ldr	r1, [pc, #248]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    31a2:	2201      	movs	r2, #1
    31a4:	40a2      	lsls	r2, r4
    31a6:	7f4b      	ldrb	r3, [r1, #29]
    31a8:	4313      	orrs	r3, r2
    31aa:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    31ac:	2300      	movs	r3, #0
    31ae:	2200      	movs	r2, #0
    31b0:	2100      	movs	r1, #0
    31b2:	2000      	movs	r0, #0
    31b4:	4c38      	ldr	r4, [pc, #224]	; (3298 <usbdc_cb_ctl_req+0x2ec>)
    31b6:	47a0      	blx	r4
			return true;
    31b8:	2301      	movs	r3, #1
    31ba:	e711      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    31bc:	2300      	movs	r3, #0
    31be:	e70f      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    31c0:	2300      	movs	r3, #0
    31c2:	e70d      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
			return false;
    31c4:	2300      	movs	r3, #0
    31c6:	e70b      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	return false;
    31c8:	2300      	movs	r3, #0
    31ca:	e709      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    31cc:	7863      	ldrb	r3, [r4, #1]
    31ce:	2b06      	cmp	r3, #6
    31d0:	d033      	beq.n	323a <usbdc_cb_ctl_req+0x28e>
    31d2:	b2d9      	uxtb	r1, r3
    31d4:	2906      	cmp	r1, #6
    31d6:	d922      	bls.n	321e <usbdc_cb_ctl_req+0x272>
    31d8:	2b08      	cmp	r3, #8
    31da:	d100      	bne.n	31de <usbdc_cb_ctl_req+0x232>
    31dc:	e0af      	b.n	333e <usbdc_cb_ctl_req+0x392>
    31de:	2b0a      	cmp	r3, #10
    31e0:	d000      	beq.n	31e4 <usbdc_cb_ctl_req+0x238>
    31e2:	e0ed      	b.n	33c0 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    31e4:	4b2d      	ldr	r3, [pc, #180]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    31e6:	7f5a      	ldrb	r2, [r3, #29]
    31e8:	7921      	ldrb	r1, [r4, #4]
    31ea:	7963      	ldrb	r3, [r4, #5]
    31ec:	021b      	lsls	r3, r3, #8
    31ee:	430b      	orrs	r3, r1
    31f0:	411a      	asrs	r2, r3
    31f2:	07d3      	lsls	r3, r2, #31
    31f4:	d400      	bmi.n	31f8 <usbdc_cb_ctl_req+0x24c>
    31f6:	e0ca      	b.n	338e <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    31f8:	4b28      	ldr	r3, [pc, #160]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    31fa:	691d      	ldr	r5, [r3, #16]
	return false;
    31fc:	2300      	movs	r3, #0
	while (NULL != func) {
    31fe:	2d00      	cmp	r5, #0
    3200:	d100      	bne.n	3204 <usbdc_cb_ctl_req+0x258>
    3202:	e6ed      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3204:	0022      	movs	r2, r4
    3206:	2102      	movs	r1, #2
    3208:	0028      	movs	r0, r5
    320a:	686b      	ldr	r3, [r5, #4]
    320c:	4798      	blx	r3
    320e:	2800      	cmp	r0, #0
    3210:	db00      	blt.n	3214 <usbdc_cb_ctl_req+0x268>
    3212:	e0c8      	b.n	33a6 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    3214:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3216:	2d00      	cmp	r5, #0
    3218:	d1f4      	bne.n	3204 <usbdc_cb_ctl_req+0x258>
	return false;
    321a:	2300      	movs	r3, #0
    321c:	e6e0      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    321e:	2b00      	cmp	r3, #0
    3220:	d000      	beq.n	3224 <usbdc_cb_ctl_req+0x278>
    3222:	e0cd      	b.n	33c0 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3224:	231f      	movs	r3, #31
    3226:	401a      	ands	r2, r3
    3228:	b2d3      	uxtb	r3, r2
    322a:	2b01      	cmp	r3, #1
    322c:	d800      	bhi.n	3230 <usbdc_cb_ctl_req+0x284>
    322e:	e092      	b.n	3356 <usbdc_cb_ctl_req+0x3aa>
    3230:	2a02      	cmp	r2, #2
    3232:	d100      	bne.n	3236 <usbdc_cb_ctl_req+0x28a>
    3234:	e09f      	b.n	3376 <usbdc_cb_ctl_req+0x3ca>
		return false;
    3236:	2300      	movs	r3, #0
    3238:	e6d2      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    323a:	78a3      	ldrb	r3, [r4, #2]
    323c:	78e2      	ldrb	r2, [r4, #3]
    323e:	0212      	lsls	r2, r2, #8
    3240:	431a      	orrs	r2, r3
    3242:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3244:	2b02      	cmp	r3, #2
    3246:	d033      	beq.n	32b0 <usbdc_cb_ctl_req+0x304>
    3248:	2b03      	cmp	r3, #3
    324a:	d056      	beq.n	32fa <usbdc_cb_ctl_req+0x34e>
    324c:	2b01      	cmp	r3, #1
    324e:	d001      	beq.n	3254 <usbdc_cb_ctl_req+0x2a8>
	return false;
    3250:	2300      	movs	r3, #0
    3252:	e6c5      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3254:	79a2      	ldrb	r2, [r4, #6]
    3256:	79e3      	ldrb	r3, [r4, #7]
    3258:	021b      	lsls	r3, r3, #8
    325a:	4313      	orrs	r3, r2
    325c:	1c1a      	adds	r2, r3, #0
    325e:	2b12      	cmp	r3, #18
    3260:	d900      	bls.n	3264 <usbdc_cb_ctl_req+0x2b8>
    3262:	2212      	movs	r2, #18
    3264:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3266:	4b0d      	ldr	r3, [pc, #52]	; (329c <usbdc_cb_ctl_req+0x2f0>)
    3268:	681b      	ldr	r3, [r3, #0]
    326a:	6859      	ldr	r1, [r3, #4]
    326c:	6818      	ldr	r0, [r3, #0]
    326e:	2201      	movs	r2, #1
    3270:	4b0c      	ldr	r3, [pc, #48]	; (32a4 <usbdc_cb_ctl_req+0x2f8>)
    3272:	4798      	blx	r3
	if (!dev_desc) {
    3274:	2800      	cmp	r0, #0
    3276:	d100      	bne.n	327a <usbdc_cb_ctl_req+0x2ce>
    3278:	e0a4      	b.n	33c4 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    327a:	2300      	movs	r3, #0
    327c:	0022      	movs	r2, r4
    327e:	0001      	movs	r1, r0
    3280:	0028      	movs	r0, r5
    3282:	4c05      	ldr	r4, [pc, #20]	; (3298 <usbdc_cb_ctl_req+0x2ec>)
    3284:	47a0      	blx	r4
    3286:	4243      	negs	r3, r0
    3288:	4143      	adcs	r3, r0
    328a:	b2db      	uxtb	r3, r3
    328c:	e6a8      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00002e35 	.word	0x00002e35
    3294:	000041ec 	.word	0x000041ec
    3298:	00002f91 	.word	0x00002f91
    329c:	200009d4 	.word	0x200009d4
    32a0:	00003579 	.word	0x00003579
    32a4:	000034fd 	.word	0x000034fd
    32a8:	00002ded 	.word	0x00002ded
    32ac:	00001121 	.word	0x00001121
	uint16_t length   = req->wLength;
    32b0:	79a3      	ldrb	r3, [r4, #6]
    32b2:	79e6      	ldrb	r6, [r4, #7]
    32b4:	0236      	lsls	r6, r6, #8
    32b6:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32b8:	4b46      	ldr	r3, [pc, #280]	; (33d4 <usbdc_cb_ctl_req+0x428>)
    32ba:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    32bc:	681b      	ldr	r3, [r3, #0]
    32be:	3201      	adds	r2, #1
    32c0:	b2d2      	uxtb	r2, r2
    32c2:	6859      	ldr	r1, [r3, #4]
    32c4:	6818      	ldr	r0, [r3, #0]
    32c6:	4b44      	ldr	r3, [pc, #272]	; (33d8 <usbdc_cb_ctl_req+0x42c>)
    32c8:	4798      	blx	r3
    32ca:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    32cc:	d07c      	beq.n	33c8 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    32ce:	78c3      	ldrb	r3, [r0, #3]
    32d0:	021b      	lsls	r3, r3, #8
    32d2:	7884      	ldrb	r4, [r0, #2]
    32d4:	18e4      	adds	r4, r4, r3
    32d6:	b2a4      	uxth	r4, r4
		need_zlp = false;
    32d8:	2300      	movs	r3, #0
	if (length <= total_len) {
    32da:	42a6      	cmp	r6, r4
    32dc:	d905      	bls.n	32ea <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32de:	3f01      	subs	r7, #1
    32e0:	403e      	ands	r6, r7
    32e2:	4273      	negs	r3, r6
    32e4:	4173      	adcs	r3, r6
    32e6:	b2db      	uxtb	r3, r3
		length = total_len;
    32e8:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    32ea:	0032      	movs	r2, r6
    32ec:	0028      	movs	r0, r5
    32ee:	4c3b      	ldr	r4, [pc, #236]	; (33dc <usbdc_cb_ctl_req+0x430>)
    32f0:	47a0      	blx	r4
    32f2:	4243      	negs	r3, r0
    32f4:	4143      	adcs	r3, r0
    32f6:	b2db      	uxtb	r3, r3
    32f8:	e672      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    32fa:	79a3      	ldrb	r3, [r4, #6]
    32fc:	79e1      	ldrb	r1, [r4, #7]
    32fe:	0209      	lsls	r1, r1, #8
    3300:	4319      	orrs	r1, r3
    3302:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3304:	4b33      	ldr	r3, [pc, #204]	; (33d4 <usbdc_cb_ctl_req+0x428>)
    3306:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3308:	681b      	ldr	r3, [r3, #0]
    330a:	b2d2      	uxtb	r2, r2
    330c:	6859      	ldr	r1, [r3, #4]
    330e:	6818      	ldr	r0, [r3, #0]
    3310:	4b33      	ldr	r3, [pc, #204]	; (33e0 <usbdc_cb_ctl_req+0x434>)
    3312:	4798      	blx	r3
    3314:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    3316:	d059      	beq.n	33cc <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    3318:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    331a:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    331c:	4294      	cmp	r4, r2
    331e:	d906      	bls.n	332e <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3320:	1e73      	subs	r3, r6, #1
    3322:	4023      	ands	r3, r4
    3324:	0018      	movs	r0, r3
    3326:	4243      	negs	r3, r0
    3328:	4143      	adcs	r3, r0
    332a:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    332c:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    332e:	0022      	movs	r2, r4
    3330:	0028      	movs	r0, r5
    3332:	4c2a      	ldr	r4, [pc, #168]	; (33dc <usbdc_cb_ctl_req+0x430>)
    3334:	47a0      	blx	r4
    3336:	4243      	negs	r3, r0
    3338:	4143      	adcs	r3, r0
    333a:	b2db      	uxtb	r3, r3
    333c:	e650      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    333e:	4b25      	ldr	r3, [pc, #148]	; (33d4 <usbdc_cb_ctl_req+0x428>)
    3340:	7eda      	ldrb	r2, [r3, #27]
    3342:	6959      	ldr	r1, [r3, #20]
    3344:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3346:	6959      	ldr	r1, [r3, #20]
    3348:	2300      	movs	r3, #0
    334a:	2201      	movs	r2, #1
    334c:	0028      	movs	r0, r5
    334e:	4c23      	ldr	r4, [pc, #140]	; (33dc <usbdc_cb_ctl_req+0x430>)
    3350:	47a0      	blx	r4
		return true;
    3352:	2301      	movs	r3, #1
    3354:	e644      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		st = 0;
    3356:	2300      	movs	r3, #0
    3358:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    335a:	4c1e      	ldr	r4, [pc, #120]	; (33d4 <usbdc_cb_ctl_req+0x428>)
    335c:	2202      	movs	r2, #2
    335e:	a902      	add	r1, sp, #8
    3360:	6960      	ldr	r0, [r4, #20]
    3362:	4b20      	ldr	r3, [pc, #128]	; (33e4 <usbdc_cb_ctl_req+0x438>)
    3364:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3366:	6961      	ldr	r1, [r4, #20]
    3368:	2300      	movs	r3, #0
    336a:	2202      	movs	r2, #2
    336c:	0028      	movs	r0, r5
    336e:	4c1b      	ldr	r4, [pc, #108]	; (33dc <usbdc_cb_ctl_req+0x430>)
    3370:	47a0      	blx	r4
	return true;
    3372:	2301      	movs	r3, #1
    3374:	e634      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3376:	7920      	ldrb	r0, [r4, #4]
    3378:	2102      	movs	r1, #2
    337a:	4b1b      	ldr	r3, [pc, #108]	; (33e8 <usbdc_cb_ctl_req+0x43c>)
    337c:	4798      	blx	r3
		if (st < 0) {
    337e:	2800      	cmp	r0, #0
    3380:	db03      	blt.n	338a <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    3382:	2301      	movs	r3, #1
    3384:	4018      	ands	r0, r3
    3386:	9002      	str	r0, [sp, #8]
    3388:	e7e7      	b.n	335a <usbdc_cb_ctl_req+0x3ae>
			return false;
    338a:	2300      	movs	r3, #0
    338c:	e628      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    338e:	4b11      	ldr	r3, [pc, #68]	; (33d4 <usbdc_cb_ctl_req+0x428>)
    3390:	2200      	movs	r2, #0
    3392:	6959      	ldr	r1, [r3, #20]
    3394:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3396:	6959      	ldr	r1, [r3, #20]
    3398:	2300      	movs	r3, #0
    339a:	3201      	adds	r2, #1
    339c:	2000      	movs	r0, #0
    339e:	4c0f      	ldr	r4, [pc, #60]	; (33dc <usbdc_cb_ctl_req+0x430>)
    33a0:	47a0      	blx	r4
		return true;
    33a2:	2301      	movs	r3, #1
    33a4:	e61c      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    33a6:	4b0b      	ldr	r3, [pc, #44]	; (33d4 <usbdc_cb_ctl_req+0x428>)
    33a8:	695a      	ldr	r2, [r3, #20]
    33aa:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    33ac:	6959      	ldr	r1, [r3, #20]
    33ae:	2300      	movs	r3, #0
    33b0:	2201      	movs	r2, #1
    33b2:	2000      	movs	r0, #0
    33b4:	4c09      	ldr	r4, [pc, #36]	; (33dc <usbdc_cb_ctl_req+0x430>)
    33b6:	47a0      	blx	r4
			return true;
    33b8:	2301      	movs	r3, #1
    33ba:	e611      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    33bc:	2300      	movs	r3, #0
    33be:	e60f      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    33c0:	2300      	movs	r3, #0
    33c2:	e60d      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    33c4:	2300      	movs	r3, #0
    33c6:	e60b      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    33c8:	2300      	movs	r3, #0
    33ca:	e609      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
		return false;
    33cc:	2300      	movs	r3, #0
    33ce:	e607      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
			return false;
    33d0:	2300      	movs	r3, #0
    33d2:	e605      	b.n	2fe0 <usbdc_cb_ctl_req+0x34>
    33d4:	200009d4 	.word	0x200009d4
    33d8:	00003579 	.word	0x00003579
    33dc:	00002f91 	.word	0x00002f91
    33e0:	000035e1 	.word	0x000035e1
    33e4:	00003d6d 	.word	0x00003d6d
    33e8:	00001121 	.word	0x00001121

000033ec <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    33ec:	b510      	push	{r4, lr}
	switch (type) {
    33ee:	2801      	cmp	r0, #1
    33f0:	d009      	beq.n	3406 <usbdc_register_handler+0x1a>
    33f2:	2800      	cmp	r0, #0
    33f4:	d002      	beq.n	33fc <usbdc_register_handler+0x10>
    33f6:	2802      	cmp	r0, #2
    33f8:	d00a      	beq.n	3410 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    33fa:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    33fc:	4807      	ldr	r0, [pc, #28]	; (341c <usbdc_register_handler+0x30>)
    33fe:	3004      	adds	r0, #4
    3400:	4b07      	ldr	r3, [pc, #28]	; (3420 <usbdc_register_handler+0x34>)
    3402:	4798      	blx	r3
		break;
    3404:	e7f9      	b.n	33fa <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3406:	4805      	ldr	r0, [pc, #20]	; (341c <usbdc_register_handler+0x30>)
    3408:	3008      	adds	r0, #8
    340a:	4b05      	ldr	r3, [pc, #20]	; (3420 <usbdc_register_handler+0x34>)
    340c:	4798      	blx	r3
		break;
    340e:	e7f4      	b.n	33fa <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3410:	4802      	ldr	r0, [pc, #8]	; (341c <usbdc_register_handler+0x30>)
    3412:	300c      	adds	r0, #12
    3414:	4b02      	ldr	r3, [pc, #8]	; (3420 <usbdc_register_handler+0x34>)
    3416:	4798      	blx	r3
}
    3418:	e7ef      	b.n	33fa <usbdc_register_handler+0xe>
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	200009d4 	.word	0x200009d4
    3420:	00001239 	.word	0x00001239

00003424 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3424:	b570      	push	{r4, r5, r6, lr}
    3426:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3428:	1e43      	subs	r3, r0, #1
    342a:	4198      	sbcs	r0, r3
    342c:	b2c0      	uxtb	r0, r0
    342e:	4a0c      	ldr	r2, [pc, #48]	; (3460 <usbdc_init+0x3c>)
    3430:	490c      	ldr	r1, [pc, #48]	; (3464 <usbdc_init+0x40>)
    3432:	4b0d      	ldr	r3, [pc, #52]	; (3468 <usbdc_init+0x44>)
    3434:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3436:	4b0d      	ldr	r3, [pc, #52]	; (346c <usbdc_init+0x48>)
    3438:	4798      	blx	r3
	if (rc < 0) {
    343a:	2800      	cmp	r0, #0
    343c:	db0e      	blt.n	345c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    343e:	4d0c      	ldr	r5, [pc, #48]	; (3470 <usbdc_init+0x4c>)
    3440:	2220      	movs	r2, #32
    3442:	2100      	movs	r1, #0
    3444:	0028      	movs	r0, r5
    3446:	4b0b      	ldr	r3, [pc, #44]	; (3474 <usbdc_init+0x50>)
    3448:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    344a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    344c:	490a      	ldr	r1, [pc, #40]	; (3478 <usbdc_init+0x54>)
    344e:	2000      	movs	r0, #0
    3450:	4c0a      	ldr	r4, [pc, #40]	; (347c <usbdc_init+0x58>)
    3452:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3454:	490a      	ldr	r1, [pc, #40]	; (3480 <usbdc_init+0x5c>)
    3456:	2001      	movs	r0, #1
    3458:	47a0      	blx	r4

	return 0;
    345a:	2000      	movs	r0, #0
}
    345c:	bd70      	pop	{r4, r5, r6, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00000355 	.word	0x00000355
    3464:	0000421c 	.word	0x0000421c
    3468:	000011d9 	.word	0x000011d9
    346c:	00000e55 	.word	0x00000e55
    3470:	200009d4 	.word	0x200009d4
    3474:	00003df1 	.word	0x00003df1
    3478:	00002e79 	.word	0x00002e79
    347c:	00000eb9 	.word	0x00000eb9
    3480:	00002f6d 	.word	0x00002f6d

00003484 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3484:	b510      	push	{r4, lr}
    3486:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3488:	4802      	ldr	r0, [pc, #8]	; (3494 <usbdc_register_function+0x10>)
    348a:	3010      	adds	r0, #16
    348c:	4b02      	ldr	r3, [pc, #8]	; (3498 <usbdc_register_function+0x14>)
    348e:	4798      	blx	r3
}
    3490:	bd10      	pop	{r4, pc}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	200009d4 	.word	0x200009d4
    3498:	00001239 	.word	0x00001239

0000349c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    349c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    349e:	4b0b      	ldr	r3, [pc, #44]	; (34cc <usbdc_start+0x30>)
    34a0:	7e9b      	ldrb	r3, [r3, #26]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d10c      	bne.n	34c0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    34a6:	2800      	cmp	r0, #0
    34a8:	d00d      	beq.n	34c6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    34aa:	4b08      	ldr	r3, [pc, #32]	; (34cc <usbdc_start+0x30>)
    34ac:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    34ae:	6802      	ldr	r2, [r0, #0]
    34b0:	79d2      	ldrb	r2, [r2, #7]
    34b2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    34b4:	2201      	movs	r2, #1
    34b6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    34b8:	4b05      	ldr	r3, [pc, #20]	; (34d0 <usbdc_start+0x34>)
    34ba:	4798      	blx	r3
	return ERR_NONE;
    34bc:	2000      	movs	r0, #0
}
    34be:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    34c0:	2004      	movs	r0, #4
    34c2:	4240      	negs	r0, r0
    34c4:	e7fb      	b.n	34be <usbdc_start+0x22>
		return ERR_BAD_DATA;
    34c6:	2009      	movs	r0, #9
    34c8:	4240      	negs	r0, r0
    34ca:	e7f8      	b.n	34be <usbdc_start+0x22>
    34cc:	200009d4 	.word	0x200009d4
    34d0:	00000ec5 	.word	0x00000ec5

000034d4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    34d4:	b510      	push	{r4, lr}
	usb_d_attach();
    34d6:	4b01      	ldr	r3, [pc, #4]	; (34dc <usbdc_attach+0x8>)
    34d8:	4798      	blx	r3
}
    34da:	bd10      	pop	{r4, pc}
    34dc:	00000ed1 	.word	0x00000ed1

000034e0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    34e0:	4b01      	ldr	r3, [pc, #4]	; (34e8 <usbdc_get_ctrl_buffer+0x8>)
    34e2:	6958      	ldr	r0, [r3, #20]
}
    34e4:	4770      	bx	lr
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	200009d4 	.word	0x200009d4

000034ec <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    34ec:	4b02      	ldr	r3, [pc, #8]	; (34f8 <usbdc_get_state+0xc>)
    34ee:	7e98      	ldrb	r0, [r3, #26]
    34f0:	06c3      	lsls	r3, r0, #27
    34f2:	d500      	bpl.n	34f6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    34f4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    34f6:	4770      	bx	lr
    34f8:	200009d4 	.word	0x200009d4

000034fc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    34fc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    34fe:	4288      	cmp	r0, r1
    3500:	d211      	bcs.n	3526 <usb_find_desc+0x2a>
	return desc[0];
    3502:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3504:	2b01      	cmp	r3, #1
    3506:	d910      	bls.n	352a <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    3508:	7844      	ldrb	r4, [r0, #1]
    350a:	4294      	cmp	r4, r2
    350c:	d00a      	beq.n	3524 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    350e:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3510:	4281      	cmp	r1, r0
    3512:	d906      	bls.n	3522 <usb_find_desc+0x26>
	return desc[0];
    3514:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3516:	2b01      	cmp	r3, #1
    3518:	d909      	bls.n	352e <usb_find_desc+0x32>
	return desc[1];
    351a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    351c:	4294      	cmp	r4, r2
    351e:	d1f6      	bne.n	350e <usb_find_desc+0x12>
    3520:	e000      	b.n	3524 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3522:	2000      	movs	r0, #0
}
    3524:	bd10      	pop	{r4, pc}
	return NULL;
    3526:	2000      	movs	r0, #0
    3528:	e7fc      	b.n	3524 <usb_find_desc+0x28>
		_desc_len_check();
    352a:	2000      	movs	r0, #0
    352c:	e7fa      	b.n	3524 <usb_find_desc+0x28>
    352e:	2000      	movs	r0, #0
    3530:	e7f8      	b.n	3524 <usb_find_desc+0x28>

00003532 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3532:	4288      	cmp	r0, r1
    3534:	d215      	bcs.n	3562 <usb_find_ep_desc+0x30>
	return desc[0];
    3536:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3538:	2b01      	cmp	r3, #1
    353a:	d914      	bls.n	3566 <usb_find_ep_desc+0x34>
	return desc[1];
    353c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    353e:	2a04      	cmp	r2, #4
    3540:	d013      	beq.n	356a <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3542:	2a05      	cmp	r2, #5
    3544:	d00c      	beq.n	3560 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    3546:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3548:	4281      	cmp	r1, r0
    354a:	d908      	bls.n	355e <usb_find_ep_desc+0x2c>
	return desc[0];
    354c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    354e:	2b01      	cmp	r3, #1
    3550:	d90d      	bls.n	356e <usb_find_ep_desc+0x3c>
	return desc[1];
    3552:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3554:	2a04      	cmp	r2, #4
    3556:	d00c      	beq.n	3572 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3558:	2a05      	cmp	r2, #5
    355a:	d1f4      	bne.n	3546 <usb_find_ep_desc+0x14>
    355c:	e000      	b.n	3560 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    355e:	2000      	movs	r0, #0
}
    3560:	4770      	bx	lr
	return NULL;
    3562:	2000      	movs	r0, #0
    3564:	e7fc      	b.n	3560 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3566:	2000      	movs	r0, #0
    3568:	e7fa      	b.n	3560 <usb_find_ep_desc+0x2e>
	return NULL;
    356a:	2000      	movs	r0, #0
    356c:	e7f8      	b.n	3560 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    356e:	2000      	movs	r0, #0
    3570:	e7f6      	b.n	3560 <usb_find_ep_desc+0x2e>
	return NULL;
    3572:	2000      	movs	r0, #0
    3574:	e7f4      	b.n	3560 <usb_find_ep_desc+0x2e>
	...

00003578 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3578:	b570      	push	{r4, r5, r6, lr}
    357a:	000c      	movs	r4, r1
    357c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    357e:	2202      	movs	r2, #2
    3580:	4b16      	ldr	r3, [pc, #88]	; (35dc <usb_find_cfg_desc+0x64>)
    3582:	4798      	blx	r3
	if (!desc) {
    3584:	2800      	cmp	r0, #0
    3586:	d01d      	beq.n	35c4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3588:	4284      	cmp	r4, r0
    358a:	d91c      	bls.n	35c6 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    358c:	7803      	ldrb	r3, [r0, #0]
    358e:	2b01      	cmp	r3, #1
    3590:	d91b      	bls.n	35ca <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    3592:	7843      	ldrb	r3, [r0, #1]
    3594:	2b02      	cmp	r3, #2
    3596:	d11a      	bne.n	35ce <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    3598:	7943      	ldrb	r3, [r0, #5]
    359a:	42ab      	cmp	r3, r5
    359c:	d012      	beq.n	35c4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    359e:	78c2      	ldrb	r2, [r0, #3]
    35a0:	0212      	lsls	r2, r2, #8
    35a2:	7883      	ldrb	r3, [r0, #2]
    35a4:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    35a6:	b29b      	uxth	r3, r3
    35a8:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    35aa:	4284      	cmp	r4, r0
    35ac:	d909      	bls.n	35c2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    35ae:	7803      	ldrb	r3, [r0, #0]
    35b0:	2b01      	cmp	r3, #1
    35b2:	d90e      	bls.n	35d2 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    35b4:	7843      	ldrb	r3, [r0, #1]
    35b6:	2b02      	cmp	r3, #2
    35b8:	d10d      	bne.n	35d6 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    35ba:	7943      	ldrb	r3, [r0, #5]
    35bc:	42ab      	cmp	r3, r5
    35be:	d1ee      	bne.n	359e <usb_find_cfg_desc+0x26>
    35c0:	e000      	b.n	35c4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    35c2:	2000      	movs	r0, #0
}
    35c4:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    35c6:	2000      	movs	r0, #0
    35c8:	e7fc      	b.n	35c4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    35ca:	2000      	movs	r0, #0
    35cc:	e7fa      	b.n	35c4 <usb_find_cfg_desc+0x4c>
	return NULL;
    35ce:	2000      	movs	r0, #0
    35d0:	e7f8      	b.n	35c4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    35d2:	2000      	movs	r0, #0
    35d4:	e7f6      	b.n	35c4 <usb_find_cfg_desc+0x4c>
	return NULL;
    35d6:	2000      	movs	r0, #0
    35d8:	e7f4      	b.n	35c4 <usb_find_cfg_desc+0x4c>
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	000034fd 	.word	0x000034fd

000035e0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    35e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35e2:	000d      	movs	r5, r1
    35e4:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    35e6:	4288      	cmp	r0, r1
    35e8:	d212      	bcs.n	3610 <usb_find_str_desc+0x30>
    35ea:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    35ec:	4e0a      	ldr	r6, [pc, #40]	; (3618 <usb_find_str_desc+0x38>)
    35ee:	2203      	movs	r2, #3
    35f0:	0029      	movs	r1, r5
    35f2:	47b0      	blx	r6
		if (desc) {
    35f4:	2800      	cmp	r0, #0
    35f6:	d00e      	beq.n	3616 <usb_find_str_desc+0x36>
	return desc[0];
    35f8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    35fa:	2b01      	cmp	r3, #1
    35fc:	d90a      	bls.n	3614 <usb_find_str_desc+0x34>
			if (i == str_index) {
    35fe:	42a7      	cmp	r7, r4
    3600:	d009      	beq.n	3616 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    3602:	3401      	adds	r4, #1
    3604:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    3606:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    3608:	4285      	cmp	r5, r0
    360a:	d8f0      	bhi.n	35ee <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    360c:	2000      	movs	r0, #0
    360e:	e002      	b.n	3616 <usb_find_str_desc+0x36>
    3610:	2000      	movs	r0, #0
    3612:	e000      	b.n	3616 <usb_find_str_desc+0x36>
			_desc_len_check();
    3614:	2000      	movs	r0, #0
}
    3616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3618:	000034fd 	.word	0x000034fd

0000361c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    361c:	2000      	movs	r0, #0
    361e:	4770      	bx	lr

00003620 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    3620:	4770      	bx	lr
	...

00003624 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
    3624:	4b03      	ldr	r3, [pc, #12]	; (3634 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
    3626:	681b      	ldr	r3, [r3, #0]
    3628:	2201      	movs	r2, #1
    362a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    362c:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    362e:	741a      	strb	r2, [r3, #16]


	return false;
}
    3630:	2000      	movs	r0, #0
    3632:	4770      	bx	lr
    3634:	200009f4 	.word	0x200009f4

00003638 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    3638:	4b03      	ldr	r3, [pc, #12]	; (3648 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
    363a:	681b      	ldr	r3, [r3, #0]
    363c:	2201      	movs	r2, #1
    363e:	74da      	strb	r2, [r3, #19]
	ptrCDCClass->terminalStarted=true;
    3640:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    3642:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
    3644:	2000      	movs	r0, #0
    3646:	4770      	bx	lr
    3648:	200009f4 	.word	0x200009f4

0000364c <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    364c:	b530      	push	{r4, r5, lr}
    364e:	b083      	sub	sp, #12
    3650:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
    3652:	6983      	ldr	r3, [r0, #24]
    3654:	3301      	adds	r3, #1
    3656:	d002      	beq.n	365e <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
    3658:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
    365a:	b003      	add	sp, #12
    365c:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
    365e:	466b      	mov	r3, sp
    3660:	1ddd      	adds	r5, r3, #7
    3662:	6803      	ldr	r3, [r0, #0]
    3664:	69db      	ldr	r3, [r3, #28]
    3666:	2201      	movs	r2, #1
    3668:	0029      	movs	r1, r5
    366a:	4798      	blx	r3
    366c:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
    366e:	782b      	ldrb	r3, [r5, #0]
    3670:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
    3672:	69a0      	ldr	r0, [r4, #24]
    3674:	e7f1      	b.n	365a <_ZN9CDC_Class4peekEv+0xe>

00003676 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
    3676:	b500      	push	{lr}
    3678:	b083      	sub	sp, #12
    367a:	466b      	mov	r3, sp
    367c:	71d9      	strb	r1, [r3, #7]
		while(!txReady);
    367e:	7cc3      	ldrb	r3, [r0, #19]
    3680:	2b00      	cmp	r3, #0
    3682:	d0fc      	beq.n	367e <_ZN9CDC_Class5writeEh+0x8>
	
		return writeData(&c, 1);
    3684:	6803      	ldr	r3, [r0, #0]
    3686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3688:	2201      	movs	r2, #1
    368a:	4669      	mov	r1, sp
    368c:	3107      	adds	r1, #7
    368e:	4798      	blx	r3
}
    3690:	b003      	add	sp, #12
    3692:	bd00      	pop	{pc}

00003694 <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
    3694:	7d03      	ldrb	r3, [r0, #20]
    3696:	b2db      	uxtb	r3, r3
    3698:	2b00      	cmp	r3, #0
    369a:	d001      	beq.n	36a0 <_ZN9CDC_Class9availableEv+0xc>
    369c:	7cc3      	ldrb	r3, [r0, #19]
    369e:	b2db      	uxtb	r3, r3
	{
		
	return false;
	}
	
}
    36a0:	0018      	movs	r0, r3
    36a2:	4770      	bx	lr

000036a4 <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
    36a4:	b510      	push	{r4, lr}
    36a6:	0004      	movs	r4, r0
    36a8:	4b03      	ldr	r3, [pc, #12]	; (36b8 <_ZN9CDC_ClassD1Ev+0x14>)
    36aa:	3308      	adds	r3, #8
    36ac:	6003      	str	r3, [r0, #0]
    36ae:	3010      	adds	r0, #16
    36b0:	4b02      	ldr	r3, [pc, #8]	; (36bc <_ZN9CDC_ClassD1Ev+0x18>)
    36b2:	4798      	blx	r3
} //~CDC_Class
    36b4:	0020      	movs	r0, r4
    36b6:	bd10      	pop	{r4, pc}
    36b8:	00004258 	.word	0x00004258
    36bc:	00003a15 	.word	0x00003a15

000036c0 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
    36c0:	b510      	push	{r4, lr}
    36c2:	b082      	sub	sp, #8
    36c4:	1c03      	adds	r3, r0, #0
    36c6:	aa01      	add	r2, sp, #4
    36c8:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    36ca:	07db      	lsls	r3, r3, #31
    36cc:	d402      	bmi.n	36d4 <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
    36ce:	2000      	movs	r0, #0
    36d0:	b002      	add	sp, #8
    36d2:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    36d4:	4906      	ldr	r1, [pc, #24]	; (36f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
    36d6:	2000      	movs	r0, #0
    36d8:	4c06      	ldr	r4, [pc, #24]	; (36f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
    36da:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    36dc:	4906      	ldr	r1, [pc, #24]	; (36f8 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    36de:	2001      	movs	r0, #1
    36e0:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
    36e2:	4b06      	ldr	r3, [pc, #24]	; (36fc <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	2201      	movs	r2, #1
    36e8:	74da      	strb	r2, [r3, #19]
		ptrCDCClass->rxReady=true;
    36ea:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->plugged=true;
    36ec:	741a      	strb	r2, [r3, #16]
    36ee:	e7ee      	b.n	36ce <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
    36f0:	00003625 	.word	0x00003625
    36f4:	00002d91 	.word	0x00002d91
    36f8:	00003639 	.word	0x00003639
    36fc:	200009f4 	.word	0x200009f4

00003700 <_ZN9CDC_Class8readDataEPvl>:
{
    3700:	b510      	push	{r4, lr}
    3702:	0004      	movs	r4, r0
    3704:	0008      	movs	r0, r1
	rxReady=false;
    3706:	2300      	movs	r3, #0
    3708:	7523      	strb	r3, [r4, #20]
	r=cdcdf_acm_read((uint8_t *)p, size);
    370a:	0011      	movs	r1, r2
    370c:	4b03      	ldr	r3, [pc, #12]	; (371c <_ZN9CDC_Class8readDataEPvl+0x1c>)
    370e:	4798      	blx	r3
	while(!rxReady);
    3710:	7d23      	ldrb	r3, [r4, #20]
    3712:	2b00      	cmp	r3, #0
    3714:	d0fc      	beq.n	3710 <_ZN9CDC_Class8readDataEPvl+0x10>
	return r;
    3716:	23ff      	movs	r3, #255	; 0xff
    3718:	4018      	ands	r0, r3
}
    371a:	bd10      	pop	{r4, pc}
    371c:	00002d21 	.word	0x00002d21

00003720 <_ZN9CDC_Class4readEv>:
{
    3720:	b510      	push	{r4, lr}
    3722:	b082      	sub	sp, #8
    3724:	0004      	movs	r4, r0
	rxReady=false;
    3726:	2300      	movs	r3, #0
    3728:	7503      	strb	r3, [r0, #20]
	cdcdf_acm_read(&p, 1);
    372a:	2101      	movs	r1, #1
    372c:	466b      	mov	r3, sp
    372e:	1dd8      	adds	r0, r3, #7
    3730:	4b04      	ldr	r3, [pc, #16]	; (3744 <_ZN9CDC_Class4readEv+0x24>)
    3732:	4798      	blx	r3
	while(!rxReady);
    3734:	7d23      	ldrb	r3, [r4, #20]
    3736:	2b00      	cmp	r3, #0
    3738:	d0fc      	beq.n	3734 <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
    373a:	466b      	mov	r3, sp
    373c:	79d8      	ldrb	r0, [r3, #7]
}
    373e:	b002      	add	sp, #8
    3740:	bd10      	pop	{r4, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	00002d21 	.word	0x00002d21

00003748 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
    3748:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    374a:	301c      	adds	r0, #28
    374c:	2140      	movs	r1, #64	; 0x40
    374e:	4b01      	ldr	r3, [pc, #4]	; (3754 <_ZN9CDC_Class5flushEv+0xc>)
    3750:	4798      	blx	r3
}
    3752:	bd10      	pop	{r4, pc}
    3754:	00002d4d 	.word	0x00002d4d

00003758 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
    3758:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
    375a:	4b01      	ldr	r3, [pc, #4]	; (3760 <_ZN9CDC_Class5clearEv+0x8>)
    375c:	4798      	blx	r3
}
    375e:	bd10      	pop	{r4, pc}
    3760:	00002d79 	.word	0x00002d79

00003764 <_ZN9CDC_Class9writeDataEPKvl>:
{
    3764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3766:	0004      	movs	r4, r0
    3768:	000e      	movs	r6, r1
    376a:	0017      	movs	r7, r2
	txReady=false;
    376c:	2300      	movs	r3, #0
    376e:	74c3      	strb	r3, [r0, #19]
	if (CheckTerminal())
    3770:	3010      	adds	r0, #16
    3772:	4b0a      	ldr	r3, [pc, #40]	; (379c <_ZN9CDC_Class9writeDataEPKvl+0x38>)
    3774:	4798      	blx	r3
		return 0;
    3776:	2500      	movs	r5, #0
	if (CheckTerminal())
    3778:	2800      	cmp	r0, #0
    377a:	d00d      	beq.n	3798 <_ZN9CDC_Class9writeDataEPKvl+0x34>
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    377c:	0039      	movs	r1, r7
    377e:	0030      	movs	r0, r6
    3780:	4b07      	ldr	r3, [pc, #28]	; (37a0 <_ZN9CDC_Class9writeDataEPKvl+0x3c>)
    3782:	4798      	blx	r3
    3784:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted)){
    3786:	7ce3      	ldrb	r3, [r4, #19]
    3788:	2b00      	cmp	r3, #0
    378a:	d102      	bne.n	3792 <_ZN9CDC_Class9writeDataEPKvl+0x2e>
    378c:	7c63      	ldrb	r3, [r4, #17]
    378e:	2b00      	cmp	r3, #0
    3790:	d1f9      	bne.n	3786 <_ZN9CDC_Class9writeDataEPKvl+0x22>
			usbTimer.Stop();
    3792:	4804      	ldr	r0, [pc, #16]	; (37a4 <_ZN9CDC_Class9writeDataEPKvl+0x40>)
    3794:	4b04      	ldr	r3, [pc, #16]	; (37a8 <_ZN9CDC_Class9writeDataEPKvl+0x44>)
    3796:	4798      	blx	r3
}
    3798:	0028      	movs	r0, r5
    379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    379c:	00003a75 	.word	0x00003a75
    37a0:	00002d4d 	.word	0x00002d4d
    37a4:	20000a60 	.word	0x20000a60
    37a8:	00003b61 	.word	0x00003b61

000037ac <_ZN9CDC_Class5writeEPKhj>:
{
    37ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ae:	0004      	movs	r4, r0
    37b0:	000f      	movs	r7, r1
    37b2:	0016      	movs	r6, r2
	txReady=false;
    37b4:	2300      	movs	r3, #0
    37b6:	74c3      	strb	r3, [r0, #19]
 	if (CheckTerminal(size)){
    37b8:	3010      	adds	r0, #16
    37ba:	0011      	movs	r1, r2
    37bc:	4b0a      	ldr	r3, [pc, #40]	; (37e8 <_ZN9CDC_Class5writeEPKhj+0x3c>)
    37be:	4798      	blx	r3
 		r=0;
    37c0:	2500      	movs	r5, #0
 	if (CheckTerminal(size)){
    37c2:	2800      	cmp	r0, #0
    37c4:	d00d      	beq.n	37e2 <_ZN9CDC_Class5writeEPKhj+0x36>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    37c6:	0031      	movs	r1, r6
    37c8:	0038      	movs	r0, r7
    37ca:	4b08      	ldr	r3, [pc, #32]	; (37ec <_ZN9CDC_Class5writeEPKhj+0x40>)
    37cc:	4798      	blx	r3
    37ce:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted));
    37d0:	7ce3      	ldrb	r3, [r4, #19]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d102      	bne.n	37dc <_ZN9CDC_Class5writeEPKhj+0x30>
    37d6:	7c63      	ldrb	r3, [r4, #17]
    37d8:	2b00      	cmp	r3, #0
    37da:	d1f9      	bne.n	37d0 <_ZN9CDC_Class5writeEPKhj+0x24>
		usbTimer.Stop();
    37dc:	4804      	ldr	r0, [pc, #16]	; (37f0 <_ZN9CDC_Class5writeEPKhj+0x44>)
    37de:	4b05      	ldr	r3, [pc, #20]	; (37f4 <_ZN9CDC_Class5writeEPKhj+0x48>)
    37e0:	4798      	blx	r3
}
    37e2:	0028      	movs	r0, r5
    37e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	00003ac1 	.word	0x00003ac1
    37ec:	00002d4d 	.word	0x00002d4d
    37f0:	20000a60 	.word	0x20000a60
    37f4:	00003b61 	.word	0x00003b61

000037f8 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
    37f8:	b510      	push	{r4, lr}
    37fa:	0004      	movs	r4, r0
    Print() : write_error(0) {}
    37fc:	2300      	movs	r3, #0
    37fe:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    3800:	4b08      	ldr	r3, [pc, #32]	; (3824 <_ZN9CDC_ClassC1Ev+0x2c>)
    3802:	6003      	str	r3, [r0, #0]
    3804:	23fa      	movs	r3, #250	; 0xfa
    3806:	009b      	lsls	r3, r3, #2
    3808:	6083      	str	r3, [r0, #8]
    380a:	3010      	adds	r0, #16
    380c:	4b06      	ldr	r3, [pc, #24]	; (3828 <_ZN9CDC_ClassC1Ev+0x30>)
    380e:	4798      	blx	r3
    3810:	4b06      	ldr	r3, [pc, #24]	; (382c <_ZN9CDC_ClassC1Ev+0x34>)
    3812:	3308      	adds	r3, #8
    3814:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
    3816:	2301      	movs	r3, #1
    3818:	425b      	negs	r3, r3
    381a:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
    381c:	4b04      	ldr	r3, [pc, #16]	; (3830 <_ZN9CDC_ClassC1Ev+0x38>)
    381e:	601c      	str	r4, [r3, #0]
} //CDC_Class
    3820:	0020      	movs	r0, r4
    3822:	bd10      	pop	{r4, pc}
    3824:	0000423c 	.word	0x0000423c
    3828:	00003a09 	.word	0x00003a09
    382c:	00004258 	.word	0x00004258
    3830:	200009f4 	.word	0x200009f4

00003834 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
    3834:	b510      	push	{r4, lr}
    3836:	0004      	movs	r4, r0
	OnInit();
    3838:	3010      	adds	r0, #16
    383a:	4b04      	ldr	r3, [pc, #16]	; (384c <_ZN9CDC_Class4InitEv+0x18>)
    383c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    383e:	4904      	ldr	r1, [pc, #16]	; (3850 <_ZN9CDC_Class4InitEv+0x1c>)
    3840:	2003      	movs	r0, #3
    3842:	4b04      	ldr	r3, [pc, #16]	; (3854 <_ZN9CDC_Class4InitEv+0x20>)
    3844:	4798      	blx	r3
	if (plugged)
    3846:	7c23      	ldrb	r3, [r4, #16]
}
    3848:	bd10      	pop	{r4, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	00003a19 	.word	0x00003a19
    3850:	000036c1 	.word	0x000036c1
    3854:	00002d91 	.word	0x00002d91

00003858 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
    3858:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
    385a:	4b01      	ldr	r3, [pc, #4]	; (3860 <_ZN9CDC_Class9IsEnabledEv+0x8>)
    385c:	4798      	blx	r3
}
    385e:	bd10      	pop	{r4, pc}
    3860:	00002de1 	.word	0x00002de1

00003864 <_GLOBAL__sub_I_ptrCDCClass>:

	delay_us(10);
	return result;
}

 CDC_Class	serial;
    3864:	b510      	push	{r4, lr}
    3866:	4c05      	ldr	r4, [pc, #20]	; (387c <_GLOBAL__sub_I_ptrCDCClass+0x18>)
    3868:	3404      	adds	r4, #4
    386a:	0020      	movs	r0, r4
    386c:	4b04      	ldr	r3, [pc, #16]	; (3880 <_GLOBAL__sub_I_ptrCDCClass+0x1c>)
    386e:	4798      	blx	r3
    3870:	4a04      	ldr	r2, [pc, #16]	; (3884 <_GLOBAL__sub_I_ptrCDCClass+0x20>)
    3872:	4905      	ldr	r1, [pc, #20]	; (3888 <_GLOBAL__sub_I_ptrCDCClass+0x24>)
    3874:	0020      	movs	r0, r4
    3876:	4b05      	ldr	r3, [pc, #20]	; (388c <_GLOBAL__sub_I_ptrCDCClass+0x28>)
    3878:	4798      	blx	r3
    387a:	bd10      	pop	{r4, pc}
    387c:	200009f4 	.word	0x200009f4
    3880:	000037f9 	.word	0x000037f9
    3884:	20000000 	.word	0x20000000
    3888:	000036a5 	.word	0x000036a5
    388c:	00003bed 	.word	0x00003bed

00003890 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
    3890:	2000      	movs	r0, #0
    3892:	4770      	bx	lr

00003894 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
    3894:	4770      	bx	lr

00003896 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3898:	0005      	movs	r5, r0
    389a:	000f      	movs	r7, r1
    389c:	1e16      	subs	r6, r2, #0
  size_t n = 0;
  while (size--) {
    389e:	d00c      	beq.n	38ba <_ZN5Print5writeEPKhj+0x24>
    38a0:	2400      	movs	r4, #0
    if (write(*buffer++)) n++;
    38a2:	5d39      	ldrb	r1, [r7, r4]
    38a4:	682b      	ldr	r3, [r5, #0]
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	0028      	movs	r0, r5
    38aa:	4798      	blx	r3
    38ac:	2800      	cmp	r0, #0
    38ae:	d002      	beq.n	38b6 <_ZN5Print5writeEPKhj+0x20>
    38b0:	3401      	adds	r4, #1
  while (size--) {
    38b2:	42a6      	cmp	r6, r4
    38b4:	d1f5      	bne.n	38a2 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    38b6:	0020      	movs	r0, r4
    38b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t n = 0;
    38ba:	0014      	movs	r4, r2
  return n;
    38bc:	e7fb      	b.n	38b6 <_ZN5Print5writeEPKhj+0x20>
	...

000038c0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    38c0:	b570      	push	{r4, r5, r6, lr}
    38c2:	0005      	movs	r5, r0
    38c4:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
    38c6:	d009      	beq.n	38dc <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    38c8:	0008      	movs	r0, r1
    38ca:	4b05      	ldr	r3, [pc, #20]	; (38e0 <_ZN5Print5printEPKc+0x20>)
    38cc:	4798      	blx	r3
    38ce:	0002      	movs	r2, r0
    38d0:	682b      	ldr	r3, [r5, #0]
    38d2:	685b      	ldr	r3, [r3, #4]
    38d4:	0021      	movs	r1, r4
    38d6:	0028      	movs	r0, r5
    38d8:	4798      	blx	r3
  return write(str);
}
    38da:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
    38dc:	2000      	movs	r0, #0
  return write(str);
    38de:	e7fc      	b.n	38da <_ZN5Print5printEPKc+0x1a>
    38e0:	00003e85 	.word	0x00003e85

000038e4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    38e4:	b510      	push	{r4, lr}
  return write(c);
    38e6:	6803      	ldr	r3, [r0, #0]
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	4798      	blx	r3
}
    38ec:	bd10      	pop	{r4, pc}
	...

000038f0 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    38f0:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
    38f2:	6803      	ldr	r3, [r0, #0]
    38f4:	685b      	ldr	r3, [r3, #4]
    38f6:	2202      	movs	r2, #2
    38f8:	4901      	ldr	r1, [pc, #4]	; (3900 <_ZN5Print7printlnEv+0x10>)
    38fa:	4798      	blx	r3
  return write("\r\n");
}
    38fc:	bd10      	pop	{r4, pc}
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	00004048 	.word	0x00004048

00003904 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    3904:	b570      	push	{r4, r5, r6, lr}
    3906:	0005      	movs	r5, r0
  size_t n = print(c);
    3908:	4b03      	ldr	r3, [pc, #12]	; (3918 <_ZN5Print7printlnEPKc+0x14>)
    390a:	4798      	blx	r3
    390c:	0004      	movs	r4, r0
  n += println();
    390e:	0028      	movs	r0, r5
    3910:	4b02      	ldr	r3, [pc, #8]	; (391c <_ZN5Print7printlnEPKc+0x18>)
    3912:	4798      	blx	r3
    3914:	1820      	adds	r0, r4, r0
  return n;
}
    3916:	bd70      	pop	{r4, r5, r6, pc}
    3918:	000038c1 	.word	0x000038c1
    391c:	000038f1 	.word	0x000038f1

00003920 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3920:	b5f0      	push	{r4, r5, r6, r7, lr}
    3922:	46de      	mov	lr, fp
    3924:	4657      	mov	r7, sl
    3926:	464e      	mov	r6, r9
    3928:	4645      	mov	r5, r8
    392a:	b5e0      	push	{r5, r6, r7, lr}
    392c:	b08d      	sub	sp, #52	; 0x34
    392e:	4683      	mov	fp, r0
    3930:	000e      	movs	r6, r1
    3932:	0010      	movs	r0, r2
    3934:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3936:	2100      	movs	r1, #0
    3938:	2320      	movs	r3, #32
    393a:	aa03      	add	r2, sp, #12
    393c:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    393e:	2801      	cmp	r0, #1
    3940:	dd07      	ble.n	3952 <_ZN5Print11printNumberEmh+0x32>
    3942:	af0b      	add	r7, sp, #44	; 0x2c

  do {
    char c = n % base;
    3944:	4b1a      	ldr	r3, [pc, #104]	; (39b0 <_ZN5Print11printNumberEmh+0x90>)
    3946:	469a      	mov	sl, r3
    n /= base;
    3948:	4b1a      	ldr	r3, [pc, #104]	; (39b4 <_ZN5Print11printNumberEmh+0x94>)
    394a:	4699      	mov	r9, r3

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    394c:	23ff      	movs	r3, #255	; 0xff
    394e:	4698      	mov	r8, r3
    3950:	e007      	b.n	3962 <_ZN5Print11printNumberEmh+0x42>
  if (base < 2) base = 10;
    3952:	230a      	movs	r3, #10
    3954:	9301      	str	r3, [sp, #4]
    3956:	e7f4      	b.n	3942 <_ZN5Print11printNumberEmh+0x22>
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3958:	3437      	adds	r4, #55	; 0x37
    395a:	b2e4      	uxtb	r4, r4
    395c:	703c      	strb	r4, [r7, #0]
  } while(n);
    395e:	2e00      	cmp	r6, #0
    3960:	d010      	beq.n	3984 <_ZN5Print11printNumberEmh+0x64>
    char c = n % base;
    3962:	9901      	ldr	r1, [sp, #4]
    3964:	0030      	movs	r0, r6
    3966:	47d0      	blx	sl
    3968:	000d      	movs	r5, r1
    396a:	b2cc      	uxtb	r4, r1
    n /= base;
    396c:	9901      	ldr	r1, [sp, #4]
    396e:	0030      	movs	r0, r6
    3970:	47c8      	blx	r9
    3972:	0006      	movs	r6, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3974:	3f01      	subs	r7, #1
    3976:	4643      	mov	r3, r8
    3978:	401d      	ands	r5, r3
    397a:	2d09      	cmp	r5, #9
    397c:	dcec      	bgt.n	3958 <_ZN5Print11printNumberEmh+0x38>
    397e:	3430      	adds	r4, #48	; 0x30
    3980:	b2e4      	uxtb	r4, r4
    3982:	e7eb      	b.n	395c <_ZN5Print11printNumberEmh+0x3c>
      if (str == NULL) return 0;
    3984:	2f00      	cmp	r7, #0
    3986:	d010      	beq.n	39aa <_ZN5Print11printNumberEmh+0x8a>
      return write((const uint8_t *)str, strlen(str));
    3988:	0038      	movs	r0, r7
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <_ZN5Print11printNumberEmh+0x98>)
    398c:	4798      	blx	r3
    398e:	0002      	movs	r2, r0
    3990:	465b      	mov	r3, fp
    3992:	681b      	ldr	r3, [r3, #0]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	0039      	movs	r1, r7
    3998:	4658      	mov	r0, fp
    399a:	4798      	blx	r3

  return write(str);
}
    399c:	b00d      	add	sp, #52	; 0x34
    399e:	bc3c      	pop	{r2, r3, r4, r5}
    39a0:	4690      	mov	r8, r2
    39a2:	4699      	mov	r9, r3
    39a4:	46a2      	mov	sl, r4
    39a6:	46ab      	mov	fp, r5
    39a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
    39aa:	2000      	movs	r0, #0
  return write(str);
    39ac:	e7f6      	b.n	399c <_ZN5Print11printNumberEmh+0x7c>
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	00003d09 	.word	0x00003d09
    39b4:	00003bfd 	.word	0x00003bfd
    39b8:	00003e85 	.word	0x00003e85

000039bc <_ZN5Print5printEmi>:
{
    39bc:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    39be:	2a00      	cmp	r2, #0
    39c0:	d003      	beq.n	39ca <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
    39c2:	b2d2      	uxtb	r2, r2
    39c4:	4b03      	ldr	r3, [pc, #12]	; (39d4 <_ZN5Print5printEmi+0x18>)
    39c6:	4798      	blx	r3
}
    39c8:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
    39ca:	b2c9      	uxtb	r1, r1
    39cc:	6803      	ldr	r3, [r0, #0]
    39ce:	681b      	ldr	r3, [r3, #0]
    39d0:	4798      	blx	r3
    39d2:	e7f9      	b.n	39c8 <_ZN5Print5printEmi+0xc>
    39d4:	00003921 	.word	0x00003921

000039d8 <_ZN5Print7printlnEhi>:
{
    39d8:	b570      	push	{r4, r5, r6, lr}
    39da:	0004      	movs	r4, r0
  return print((unsigned long) b, base);
    39dc:	4b03      	ldr	r3, [pc, #12]	; (39ec <_ZN5Print7printlnEhi+0x14>)
    39de:	4798      	blx	r3
    39e0:	0005      	movs	r5, r0
  n += println();
    39e2:	0020      	movs	r0, r4
    39e4:	4b02      	ldr	r3, [pc, #8]	; (39f0 <_ZN5Print7printlnEhi+0x18>)
    39e6:	4798      	blx	r3
    39e8:	1940      	adds	r0, r0, r5
}
    39ea:	bd70      	pop	{r4, r5, r6, pc}
    39ec:	000039bd 	.word	0x000039bd
    39f0:	000038f1 	.word	0x000038f1

000039f4 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
    39f4:	4b03      	ldr	r3, [pc, #12]	; (3a04 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
    39f6:	2201      	movs	r2, #1
    39f8:	6819      	ldr	r1, [r3, #0]
    39fa:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	2200      	movs	r2, #0
    3a00:	705a      	strb	r2, [r3, #1]
}
    3a02:	4770      	bx	lr
    3a04:	20000a58 	.word	0x20000a58

00003a08 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
    3a08:	4b01      	ldr	r3, [pc, #4]	; (3a10 <_ZN20SerialTerminal_ClassC1Ev+0x8>)
    3a0a:	6018      	str	r0, [r3, #0]
} //SerialTerminal_Class
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	20000a58 	.word	0x20000a58

00003a14 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
    3a14:	4770      	bx	lr
	...

00003a18 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    3a18:	b570      	push	{r4, r5, r6, lr}
    3a1a:	0004      	movs	r4, r0
		timeout=false;
    3a1c:	2300      	movs	r3, #0
    3a1e:	7083      	strb	r3, [r0, #2]
		terminalStarted=true;
    3a20:	3301      	adds	r3, #1
    3a22:	7043      	strb	r3, [r0, #1]
		usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    3a24:	4d0c      	ldr	r5, [pc, #48]	; (3a58 <_ZN20SerialTerminal_Class6OnInitEv+0x40>)
    3a26:	2296      	movs	r2, #150	; 0x96
    3a28:	0092      	lsls	r2, r2, #2
    3a2a:	490c      	ldr	r1, [pc, #48]	; (3a5c <_ZN20SerialTerminal_Class6OnInitEv+0x44>)
    3a2c:	0028      	movs	r0, r5
    3a2e:	4b0c      	ldr	r3, [pc, #48]	; (3a60 <_ZN20SerialTerminal_Class6OnInitEv+0x48>)
    3a30:	4798      	blx	r3
		usbTimer.Start();
    3a32:	0028      	movs	r0, r5
    3a34:	4b0b      	ldr	r3, [pc, #44]	; (3a64 <_ZN20SerialTerminal_Class6OnInitEv+0x4c>)
    3a36:	4798      	blx	r3
		while (!serial.IsEnabled()){
    3a38:	4d0b      	ldr	r5, [pc, #44]	; (3a68 <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
    3a3a:	4e0c      	ldr	r6, [pc, #48]	; (3a6c <_ZN20SerialTerminal_Class6OnInitEv+0x54>)
    3a3c:	0028      	movs	r0, r5
    3a3e:	47b0      	blx	r6
    3a40:	2800      	cmp	r0, #0
    3a42:	d105      	bne.n	3a50 <_ZN20SerialTerminal_Class6OnInitEv+0x38>
			if (timeout)
    3a44:	78a3      	ldrb	r3, [r4, #2]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d0f8      	beq.n	3a3c <_ZN20SerialTerminal_Class6OnInitEv+0x24>
			{
				plugged=false;
    3a4a:	2300      	movs	r3, #0
    3a4c:	7023      	strb	r3, [r4, #0]
				return;
    3a4e:	e002      	b.n	3a56 <_ZN20SerialTerminal_Class6OnInitEv+0x3e>
			else
			{
			}
		}
		
		usbTimer.Stop();
    3a50:	4801      	ldr	r0, [pc, #4]	; (3a58 <_ZN20SerialTerminal_Class6OnInitEv+0x40>)
    3a52:	4b07      	ldr	r3, [pc, #28]	; (3a70 <_ZN20SerialTerminal_Class6OnInitEv+0x58>)
    3a54:	4798      	blx	r3
}
    3a56:	bd70      	pop	{r4, r5, r6, pc}
    3a58:	20000a60 	.word	0x20000a60
    3a5c:	000039f5 	.word	0x000039f5
    3a60:	00003b91 	.word	0x00003b91
    3a64:	00003b51 	.word	0x00003b51
    3a68:	200009f8 	.word	0x200009f8
    3a6c:	00003859 	.word	0x00003859
    3a70:	00003b61 	.word	0x00003b61

00003a74 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    3a74:	b510      	push	{r4, lr}
    3a76:	0004      	movs	r4, r0
	if (terminalStarted)
    3a78:	7843      	ldrb	r3, [r0, #1]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d014      	beq.n	3aa8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x34>
	{
		if (plugged||serial.IsEnabled())
    3a7e:	7803      	ldrb	r3, [r0, #0]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d007      	beq.n	3a94 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x20>
		{
			terminalStarted=usbTimer.Start()==0;
    3a84:	480a      	ldr	r0, [pc, #40]	; (3ab0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x3c>)
    3a86:	4b0b      	ldr	r3, [pc, #44]	; (3ab4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x40>)
    3a88:	4798      	blx	r3
    3a8a:	4243      	negs	r3, r0
    3a8c:	4158      	adcs	r0, r3
    3a8e:	b2c0      	uxtb	r0, r0
    3a90:	7060      	strb	r0, [r4, #1]
    3a92:	e006      	b.n	3aa2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
		if (plugged||serial.IsEnabled())
    3a94:	4808      	ldr	r0, [pc, #32]	; (3ab8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x44>)
    3a96:	4b09      	ldr	r3, [pc, #36]	; (3abc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x48>)
    3a98:	4798      	blx	r3
    3a9a:	2800      	cmp	r0, #0
    3a9c:	d1f2      	bne.n	3a84 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x10>
		}
		else
		{
			terminalStarted=false;
    3a9e:	2300      	movs	r3, #0
    3aa0:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
    3aa2:	7860      	ldrb	r0, [r4, #1]
    3aa4:	b2c0      	uxtb	r0, r0
}
    3aa6:	bd10      	pop	{r4, pc}
		return	terminalStarted;
    3aa8:	7840      	ldrb	r0, [r0, #1]
    3aaa:	b2c0      	uxtb	r0, r0
    3aac:	e7fb      	b.n	3aa6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x32>
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	20000a60 	.word	0x20000a60
    3ab4:	00003b51 	.word	0x00003b51
    3ab8:	200009f8 	.word	0x200009f8
    3abc:	00003859 	.word	0x00003859

00003ac0 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    3ac0:	b570      	push	{r4, r5, r6, lr}
    3ac2:	0004      	movs	r4, r0
    3ac4:	000d      	movs	r5, r1
	if (terminalStarted)
    3ac6:	7843      	ldrb	r3, [r0, #1]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d022      	beq.n	3b12 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x52>
	{
		if (plugged||serial.IsEnabled())
    3acc:	7803      	ldrb	r3, [r0, #0]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d015      	beq.n	3afe <_ZN20SerialTerminal_Class13CheckTerminalEm+0x3e>
		{
			usbTimer.Stop();
    3ad2:	4e11      	ldr	r6, [pc, #68]	; (3b18 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x58>)
    3ad4:	0030      	movs	r0, r6
    3ad6:	4b11      	ldr	r3, [pc, #68]	; (3b1c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x5c>)
    3ad8:	4798      	blx	r3
			usbTimer.Remove_task();
    3ada:	0030      	movs	r0, r6
    3adc:	4b10      	ldr	r3, [pc, #64]	; (3b20 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x60>)
    3ade:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    3ae0:	00aa      	lsls	r2, r5, #2
    3ae2:	1952      	adds	r2, r2, r5
    3ae4:	0052      	lsls	r2, r2, #1
    3ae6:	490f      	ldr	r1, [pc, #60]	; (3b24 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x64>)
    3ae8:	0030      	movs	r0, r6
    3aea:	4b0f      	ldr	r3, [pc, #60]	; (3b28 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x68>)
    3aec:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    3aee:	0030      	movs	r0, r6
    3af0:	4b0e      	ldr	r3, [pc, #56]	; (3b2c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>)
    3af2:	4798      	blx	r3
    3af4:	4243      	negs	r3, r0
    3af6:	4158      	adcs	r0, r3
    3af8:	b2c0      	uxtb	r0, r0
    3afa:	7060      	strb	r0, [r4, #1]
    3afc:	e006      	b.n	3b0c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x4c>
		if (plugged||serial.IsEnabled())
    3afe:	480c      	ldr	r0, [pc, #48]	; (3b30 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x70>)
    3b00:	4b0c      	ldr	r3, [pc, #48]	; (3b34 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>)
    3b02:	4798      	blx	r3
    3b04:	2800      	cmp	r0, #0
    3b06:	d1e4      	bne.n	3ad2 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x12>
		}
		else
		{
			terminalStarted=false;
    3b08:	2300      	movs	r3, #0
    3b0a:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
    3b0c:	7860      	ldrb	r0, [r4, #1]
    3b0e:	b2c0      	uxtb	r0, r0
    3b10:	bd70      	pop	{r4, r5, r6, pc}
		return	terminalStarted;
    3b12:	7840      	ldrb	r0, [r0, #1]
    3b14:	b2c0      	uxtb	r0, r0
    3b16:	e7fb      	b.n	3b10 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x50>
    3b18:	20000a60 	.word	0x20000a60
    3b1c:	00003b61 	.word	0x00003b61
    3b20:	00003ba1 	.word	0x00003ba1
    3b24:	000039f5 	.word	0x000039f5
    3b28:	00003b91 	.word	0x00003b91
    3b2c:	00003b51 	.word	0x00003b51
    3b30:	200009f8 	.word	0x200009f8
    3b34:	00003859 	.word	0x00003859

00003b38 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
    3b38:	2300      	movs	r3, #0
    3b3a:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
    3b3c:	4770      	bx	lr
	...

00003b40 <_ZL7task_cbPK10timer_task>:
	ptrTimerClass->setTimeout();
    3b40:	4b02      	ldr	r3, [pc, #8]	; (3b4c <_ZL7task_cbPK10timer_task+0xc>)
    3b42:	681b      	ldr	r3, [r3, #0]
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
	timeout=1;
    3b44:	2201      	movs	r2, #1
    3b46:	705a      	strb	r2, [r3, #1]
}
    3b48:	4770      	bx	lr
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	20000a5c 	.word	0x20000a5c

00003b50 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
    3b50:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
    3b52:	6880      	ldr	r0, [r0, #8]
    3b54:	4b01      	ldr	r3, [pc, #4]	; (3b5c <_ZN17TimerSerial_Class5StartEv+0xc>)
    3b56:	4798      	blx	r3
}
    3b58:	bd10      	pop	{r4, pc}
    3b5a:	46c0      	nop			; (mov r8, r8)
    3b5c:	00000a1d 	.word	0x00000a1d

00003b60 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
    3b60:	b510      	push	{r4, lr}
    3b62:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
    3b64:	6880      	ldr	r0, [r0, #8]
    3b66:	4b02      	ldr	r3, [pc, #8]	; (3b70 <_ZN17TimerSerial_Class4StopEv+0x10>)
    3b68:	4798      	blx	r3
	timeout=0;
    3b6a:	2300      	movs	r3, #0
    3b6c:	7063      	strb	r3, [r4, #1]
}
    3b6e:	bd10      	pop	{r4, pc}
    3b70:	00000a59 	.word	0x00000a59

00003b74 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    3b74:	b510      	push	{r4, lr}
	int32_t	status;

	task.interval = interval;
    3b76:	61c2      	str	r2, [r0, #28]
	task.cb       = (timer_cb_t)func;
    3b78:	6201      	str	r1, [r0, #32]
	task.mode     = modeTask;
    3b7a:	2224      	movs	r2, #36	; 0x24
    3b7c:	5483      	strb	r3, [r0, r2]
	status=timer_add_task(timer_descr, &task);
    3b7e:	0001      	movs	r1, r0
    3b80:	3114      	adds	r1, #20
    3b82:	6880      	ldr	r0, [r0, #8]
    3b84:	4b01      	ldr	r3, [pc, #4]	; (3b8c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x18>)
    3b86:	4798      	blx	r3
	
	return status;
}
    3b88:	bd10      	pop	{r4, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	00000a95 	.word	0x00000a95

00003b90 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    3b90:	b510      	push	{r4, lr}
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    3b92:	2300      	movs	r3, #0
    3b94:	4c01      	ldr	r4, [pc, #4]	; (3b9c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0xc>)
    3b96:	47a0      	blx	r4
	return status;
}
    3b98:	bd10      	pop	{r4, pc}
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	00003b75 	.word	0x00003b75

00003ba0 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    3ba0:	b510      	push	{r4, lr}
	timer_remove_task(timer_descr, &task);
    3ba2:	0001      	movs	r1, r0
    3ba4:	3114      	adds	r1, #20
    3ba6:	6880      	ldr	r0, [r0, #8]
    3ba8:	4b01      	ldr	r3, [pc, #4]	; (3bb0 <_ZN17TimerSerial_Class11Remove_taskEv+0x10>)
    3baa:	4798      	blx	r3
}
    3bac:	bd10      	pop	{r4, pc}
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	00000b41 	.word	0x00000b41

00003bb4 <_GLOBAL__sub_I_ptrTimerClass>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_0);
    3bb4:	b510      	push	{r4, lr}
	timer_descr=descr;
    3bb6:	4b07      	ldr	r3, [pc, #28]	; (3bd4 <_GLOBAL__sub_I_ptrTimerClass+0x20>)
    3bb8:	4a07      	ldr	r2, [pc, #28]	; (3bd8 <_GLOBAL__sub_I_ptrTimerClass+0x24>)
    3bba:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    3bbc:	1d18      	adds	r0, r3, #4
    3bbe:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
    3bc0:	2280      	movs	r2, #128	; 0x80
    3bc2:	00d2      	lsls	r2, r2, #3
    3bc4:	615a      	str	r2, [r3, #20]
	task.cb=task_cb;
    3bc6:	4a05      	ldr	r2, [pc, #20]	; (3bdc <_GLOBAL__sub_I_ptrTimerClass+0x28>)
    3bc8:	625a      	str	r2, [r3, #36]	; 0x24
TimerSerial_Class usbTimer(&TIMER_0);
    3bca:	4a05      	ldr	r2, [pc, #20]	; (3be0 <_GLOBAL__sub_I_ptrTimerClass+0x2c>)
    3bcc:	4905      	ldr	r1, [pc, #20]	; (3be4 <_GLOBAL__sub_I_ptrTimerClass+0x30>)
    3bce:	4b06      	ldr	r3, [pc, #24]	; (3be8 <_GLOBAL__sub_I_ptrTimerClass+0x34>)
    3bd0:	4798      	blx	r3
    3bd2:	bd10      	pop	{r4, pc}
    3bd4:	20000a5c 	.word	0x20000a5c
    3bd8:	20000a8c 	.word	0x20000a8c
    3bdc:	00003b41 	.word	0x00003b41
    3be0:	20000000 	.word	0x20000000
    3be4:	00003b39 	.word	0x00003b39
    3be8:	00003bed 	.word	0x00003bed

00003bec <__aeabi_atexit>:
    3bec:	000b      	movs	r3, r1
    3bee:	b510      	push	{r4, lr}
    3bf0:	0001      	movs	r1, r0
    3bf2:	0018      	movs	r0, r3
    3bf4:	f000 f88e 	bl	3d14 <__cxa_atexit>
    3bf8:	bd10      	pop	{r4, pc}
    3bfa:	46c0      	nop			; (mov r8, r8)

00003bfc <__udivsi3>:
    3bfc:	2200      	movs	r2, #0
    3bfe:	0843      	lsrs	r3, r0, #1
    3c00:	428b      	cmp	r3, r1
    3c02:	d374      	bcc.n	3cee <__udivsi3+0xf2>
    3c04:	0903      	lsrs	r3, r0, #4
    3c06:	428b      	cmp	r3, r1
    3c08:	d35f      	bcc.n	3cca <__udivsi3+0xce>
    3c0a:	0a03      	lsrs	r3, r0, #8
    3c0c:	428b      	cmp	r3, r1
    3c0e:	d344      	bcc.n	3c9a <__udivsi3+0x9e>
    3c10:	0b03      	lsrs	r3, r0, #12
    3c12:	428b      	cmp	r3, r1
    3c14:	d328      	bcc.n	3c68 <__udivsi3+0x6c>
    3c16:	0c03      	lsrs	r3, r0, #16
    3c18:	428b      	cmp	r3, r1
    3c1a:	d30d      	bcc.n	3c38 <__udivsi3+0x3c>
    3c1c:	22ff      	movs	r2, #255	; 0xff
    3c1e:	0209      	lsls	r1, r1, #8
    3c20:	ba12      	rev	r2, r2
    3c22:	0c03      	lsrs	r3, r0, #16
    3c24:	428b      	cmp	r3, r1
    3c26:	d302      	bcc.n	3c2e <__udivsi3+0x32>
    3c28:	1212      	asrs	r2, r2, #8
    3c2a:	0209      	lsls	r1, r1, #8
    3c2c:	d065      	beq.n	3cfa <__udivsi3+0xfe>
    3c2e:	0b03      	lsrs	r3, r0, #12
    3c30:	428b      	cmp	r3, r1
    3c32:	d319      	bcc.n	3c68 <__udivsi3+0x6c>
    3c34:	e000      	b.n	3c38 <__udivsi3+0x3c>
    3c36:	0a09      	lsrs	r1, r1, #8
    3c38:	0bc3      	lsrs	r3, r0, #15
    3c3a:	428b      	cmp	r3, r1
    3c3c:	d301      	bcc.n	3c42 <__udivsi3+0x46>
    3c3e:	03cb      	lsls	r3, r1, #15
    3c40:	1ac0      	subs	r0, r0, r3
    3c42:	4152      	adcs	r2, r2
    3c44:	0b83      	lsrs	r3, r0, #14
    3c46:	428b      	cmp	r3, r1
    3c48:	d301      	bcc.n	3c4e <__udivsi3+0x52>
    3c4a:	038b      	lsls	r3, r1, #14
    3c4c:	1ac0      	subs	r0, r0, r3
    3c4e:	4152      	adcs	r2, r2
    3c50:	0b43      	lsrs	r3, r0, #13
    3c52:	428b      	cmp	r3, r1
    3c54:	d301      	bcc.n	3c5a <__udivsi3+0x5e>
    3c56:	034b      	lsls	r3, r1, #13
    3c58:	1ac0      	subs	r0, r0, r3
    3c5a:	4152      	adcs	r2, r2
    3c5c:	0b03      	lsrs	r3, r0, #12
    3c5e:	428b      	cmp	r3, r1
    3c60:	d301      	bcc.n	3c66 <__udivsi3+0x6a>
    3c62:	030b      	lsls	r3, r1, #12
    3c64:	1ac0      	subs	r0, r0, r3
    3c66:	4152      	adcs	r2, r2
    3c68:	0ac3      	lsrs	r3, r0, #11
    3c6a:	428b      	cmp	r3, r1
    3c6c:	d301      	bcc.n	3c72 <__udivsi3+0x76>
    3c6e:	02cb      	lsls	r3, r1, #11
    3c70:	1ac0      	subs	r0, r0, r3
    3c72:	4152      	adcs	r2, r2
    3c74:	0a83      	lsrs	r3, r0, #10
    3c76:	428b      	cmp	r3, r1
    3c78:	d301      	bcc.n	3c7e <__udivsi3+0x82>
    3c7a:	028b      	lsls	r3, r1, #10
    3c7c:	1ac0      	subs	r0, r0, r3
    3c7e:	4152      	adcs	r2, r2
    3c80:	0a43      	lsrs	r3, r0, #9
    3c82:	428b      	cmp	r3, r1
    3c84:	d301      	bcc.n	3c8a <__udivsi3+0x8e>
    3c86:	024b      	lsls	r3, r1, #9
    3c88:	1ac0      	subs	r0, r0, r3
    3c8a:	4152      	adcs	r2, r2
    3c8c:	0a03      	lsrs	r3, r0, #8
    3c8e:	428b      	cmp	r3, r1
    3c90:	d301      	bcc.n	3c96 <__udivsi3+0x9a>
    3c92:	020b      	lsls	r3, r1, #8
    3c94:	1ac0      	subs	r0, r0, r3
    3c96:	4152      	adcs	r2, r2
    3c98:	d2cd      	bcs.n	3c36 <__udivsi3+0x3a>
    3c9a:	09c3      	lsrs	r3, r0, #7
    3c9c:	428b      	cmp	r3, r1
    3c9e:	d301      	bcc.n	3ca4 <__udivsi3+0xa8>
    3ca0:	01cb      	lsls	r3, r1, #7
    3ca2:	1ac0      	subs	r0, r0, r3
    3ca4:	4152      	adcs	r2, r2
    3ca6:	0983      	lsrs	r3, r0, #6
    3ca8:	428b      	cmp	r3, r1
    3caa:	d301      	bcc.n	3cb0 <__udivsi3+0xb4>
    3cac:	018b      	lsls	r3, r1, #6
    3cae:	1ac0      	subs	r0, r0, r3
    3cb0:	4152      	adcs	r2, r2
    3cb2:	0943      	lsrs	r3, r0, #5
    3cb4:	428b      	cmp	r3, r1
    3cb6:	d301      	bcc.n	3cbc <__udivsi3+0xc0>
    3cb8:	014b      	lsls	r3, r1, #5
    3cba:	1ac0      	subs	r0, r0, r3
    3cbc:	4152      	adcs	r2, r2
    3cbe:	0903      	lsrs	r3, r0, #4
    3cc0:	428b      	cmp	r3, r1
    3cc2:	d301      	bcc.n	3cc8 <__udivsi3+0xcc>
    3cc4:	010b      	lsls	r3, r1, #4
    3cc6:	1ac0      	subs	r0, r0, r3
    3cc8:	4152      	adcs	r2, r2
    3cca:	08c3      	lsrs	r3, r0, #3
    3ccc:	428b      	cmp	r3, r1
    3cce:	d301      	bcc.n	3cd4 <__udivsi3+0xd8>
    3cd0:	00cb      	lsls	r3, r1, #3
    3cd2:	1ac0      	subs	r0, r0, r3
    3cd4:	4152      	adcs	r2, r2
    3cd6:	0883      	lsrs	r3, r0, #2
    3cd8:	428b      	cmp	r3, r1
    3cda:	d301      	bcc.n	3ce0 <__udivsi3+0xe4>
    3cdc:	008b      	lsls	r3, r1, #2
    3cde:	1ac0      	subs	r0, r0, r3
    3ce0:	4152      	adcs	r2, r2
    3ce2:	0843      	lsrs	r3, r0, #1
    3ce4:	428b      	cmp	r3, r1
    3ce6:	d301      	bcc.n	3cec <__udivsi3+0xf0>
    3ce8:	004b      	lsls	r3, r1, #1
    3cea:	1ac0      	subs	r0, r0, r3
    3cec:	4152      	adcs	r2, r2
    3cee:	1a41      	subs	r1, r0, r1
    3cf0:	d200      	bcs.n	3cf4 <__udivsi3+0xf8>
    3cf2:	4601      	mov	r1, r0
    3cf4:	4152      	adcs	r2, r2
    3cf6:	4610      	mov	r0, r2
    3cf8:	4770      	bx	lr
    3cfa:	e7ff      	b.n	3cfc <__udivsi3+0x100>
    3cfc:	b501      	push	{r0, lr}
    3cfe:	2000      	movs	r0, #0
    3d00:	f000 f806 	bl	3d10 <__aeabi_idiv0>
    3d04:	bd02      	pop	{r1, pc}
    3d06:	46c0      	nop			; (mov r8, r8)

00003d08 <__aeabi_uidivmod>:
    3d08:	2900      	cmp	r1, #0
    3d0a:	d0f7      	beq.n	3cfc <__udivsi3+0x100>
    3d0c:	e776      	b.n	3bfc <__udivsi3>
    3d0e:	4770      	bx	lr

00003d10 <__aeabi_idiv0>:
    3d10:	4770      	bx	lr
    3d12:	46c0      	nop			; (mov r8, r8)

00003d14 <__cxa_atexit>:
    3d14:	b510      	push	{r4, lr}
    3d16:	0013      	movs	r3, r2
    3d18:	000a      	movs	r2, r1
    3d1a:	0001      	movs	r1, r0
    3d1c:	2002      	movs	r0, #2
    3d1e:	f000 f8e3 	bl	3ee8 <__register_exitproc>
    3d22:	bd10      	pop	{r4, pc}

00003d24 <__libc_init_array>:
    3d24:	b570      	push	{r4, r5, r6, lr}
    3d26:	4e0d      	ldr	r6, [pc, #52]	; (3d5c <__libc_init_array+0x38>)
    3d28:	4d0d      	ldr	r5, [pc, #52]	; (3d60 <__libc_init_array+0x3c>)
    3d2a:	2400      	movs	r4, #0
    3d2c:	1bad      	subs	r5, r5, r6
    3d2e:	10ad      	asrs	r5, r5, #2
    3d30:	d005      	beq.n	3d3e <__libc_init_array+0x1a>
    3d32:	00a3      	lsls	r3, r4, #2
    3d34:	58f3      	ldr	r3, [r6, r3]
    3d36:	3401      	adds	r4, #1
    3d38:	4798      	blx	r3
    3d3a:	42a5      	cmp	r5, r4
    3d3c:	d1f9      	bne.n	3d32 <__libc_init_array+0xe>
    3d3e:	f000 faaf 	bl	42a0 <_init>
    3d42:	4e08      	ldr	r6, [pc, #32]	; (3d64 <__libc_init_array+0x40>)
    3d44:	4d08      	ldr	r5, [pc, #32]	; (3d68 <__libc_init_array+0x44>)
    3d46:	2400      	movs	r4, #0
    3d48:	1bad      	subs	r5, r5, r6
    3d4a:	10ad      	asrs	r5, r5, #2
    3d4c:	d005      	beq.n	3d5a <__libc_init_array+0x36>
    3d4e:	00a3      	lsls	r3, r4, #2
    3d50:	58f3      	ldr	r3, [r6, r3]
    3d52:	3401      	adds	r4, #1
    3d54:	4798      	blx	r3
    3d56:	42a5      	cmp	r5, r4
    3d58:	d1f9      	bne.n	3d4e <__libc_init_array+0x2a>
    3d5a:	bd70      	pop	{r4, r5, r6, pc}
    3d5c:	000042ac 	.word	0x000042ac
    3d60:	000042ac 	.word	0x000042ac
    3d64:	000042ac 	.word	0x000042ac
    3d68:	000042c4 	.word	0x000042c4

00003d6c <memcpy>:
    3d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d6e:	0005      	movs	r5, r0
    3d70:	2a0f      	cmp	r2, #15
    3d72:	d92f      	bls.n	3dd4 <memcpy+0x68>
    3d74:	000b      	movs	r3, r1
    3d76:	4303      	orrs	r3, r0
    3d78:	079b      	lsls	r3, r3, #30
    3d7a:	d134      	bne.n	3de6 <memcpy+0x7a>
    3d7c:	0016      	movs	r6, r2
    3d7e:	000c      	movs	r4, r1
    3d80:	0003      	movs	r3, r0
    3d82:	3e10      	subs	r6, #16
    3d84:	0935      	lsrs	r5, r6, #4
    3d86:	3501      	adds	r5, #1
    3d88:	012d      	lsls	r5, r5, #4
    3d8a:	1945      	adds	r5, r0, r5
    3d8c:	6827      	ldr	r7, [r4, #0]
    3d8e:	601f      	str	r7, [r3, #0]
    3d90:	6867      	ldr	r7, [r4, #4]
    3d92:	605f      	str	r7, [r3, #4]
    3d94:	68a7      	ldr	r7, [r4, #8]
    3d96:	609f      	str	r7, [r3, #8]
    3d98:	68e7      	ldr	r7, [r4, #12]
    3d9a:	3410      	adds	r4, #16
    3d9c:	60df      	str	r7, [r3, #12]
    3d9e:	3310      	adds	r3, #16
    3da0:	429d      	cmp	r5, r3
    3da2:	d1f3      	bne.n	3d8c <memcpy+0x20>
    3da4:	230f      	movs	r3, #15
    3da6:	439e      	bics	r6, r3
    3da8:	3610      	adds	r6, #16
    3daa:	1985      	adds	r5, r0, r6
    3dac:	1989      	adds	r1, r1, r6
    3dae:	4013      	ands	r3, r2
    3db0:	2b03      	cmp	r3, #3
    3db2:	d91a      	bls.n	3dea <memcpy+0x7e>
    3db4:	1f1e      	subs	r6, r3, #4
    3db6:	2300      	movs	r3, #0
    3db8:	08b4      	lsrs	r4, r6, #2
    3dba:	3401      	adds	r4, #1
    3dbc:	00a4      	lsls	r4, r4, #2
    3dbe:	58cf      	ldr	r7, [r1, r3]
    3dc0:	50ef      	str	r7, [r5, r3]
    3dc2:	3304      	adds	r3, #4
    3dc4:	42a3      	cmp	r3, r4
    3dc6:	d1fa      	bne.n	3dbe <memcpy+0x52>
    3dc8:	2403      	movs	r4, #3
    3dca:	43a6      	bics	r6, r4
    3dcc:	1d33      	adds	r3, r6, #4
    3dce:	4022      	ands	r2, r4
    3dd0:	18c9      	adds	r1, r1, r3
    3dd2:	18ed      	adds	r5, r5, r3
    3dd4:	2a00      	cmp	r2, #0
    3dd6:	d005      	beq.n	3de4 <memcpy+0x78>
    3dd8:	2300      	movs	r3, #0
    3dda:	5ccc      	ldrb	r4, [r1, r3]
    3ddc:	54ec      	strb	r4, [r5, r3]
    3dde:	3301      	adds	r3, #1
    3de0:	4293      	cmp	r3, r2
    3de2:	d1fa      	bne.n	3dda <memcpy+0x6e>
    3de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3de6:	0005      	movs	r5, r0
    3de8:	e7f6      	b.n	3dd8 <memcpy+0x6c>
    3dea:	001a      	movs	r2, r3
    3dec:	e7f2      	b.n	3dd4 <memcpy+0x68>
    3dee:	46c0      	nop			; (mov r8, r8)

00003df0 <memset>:
    3df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3df2:	0783      	lsls	r3, r0, #30
    3df4:	d043      	beq.n	3e7e <memset+0x8e>
    3df6:	1e54      	subs	r4, r2, #1
    3df8:	2a00      	cmp	r2, #0
    3dfa:	d03f      	beq.n	3e7c <memset+0x8c>
    3dfc:	b2ce      	uxtb	r6, r1
    3dfe:	0002      	movs	r2, r0
    3e00:	2503      	movs	r5, #3
    3e02:	e002      	b.n	3e0a <memset+0x1a>
    3e04:	001a      	movs	r2, r3
    3e06:	3c01      	subs	r4, #1
    3e08:	d338      	bcc.n	3e7c <memset+0x8c>
    3e0a:	1c53      	adds	r3, r2, #1
    3e0c:	7016      	strb	r6, [r2, #0]
    3e0e:	422b      	tst	r3, r5
    3e10:	d1f8      	bne.n	3e04 <memset+0x14>
    3e12:	2c03      	cmp	r4, #3
    3e14:	d92a      	bls.n	3e6c <memset+0x7c>
    3e16:	22ff      	movs	r2, #255	; 0xff
    3e18:	400a      	ands	r2, r1
    3e1a:	0215      	lsls	r5, r2, #8
    3e1c:	4315      	orrs	r5, r2
    3e1e:	042a      	lsls	r2, r5, #16
    3e20:	4315      	orrs	r5, r2
    3e22:	2c0f      	cmp	r4, #15
    3e24:	d914      	bls.n	3e50 <memset+0x60>
    3e26:	0027      	movs	r7, r4
    3e28:	001a      	movs	r2, r3
    3e2a:	3f10      	subs	r7, #16
    3e2c:	093e      	lsrs	r6, r7, #4
    3e2e:	3601      	adds	r6, #1
    3e30:	0136      	lsls	r6, r6, #4
    3e32:	199e      	adds	r6, r3, r6
    3e34:	6015      	str	r5, [r2, #0]
    3e36:	6055      	str	r5, [r2, #4]
    3e38:	6095      	str	r5, [r2, #8]
    3e3a:	60d5      	str	r5, [r2, #12]
    3e3c:	3210      	adds	r2, #16
    3e3e:	4296      	cmp	r6, r2
    3e40:	d1f8      	bne.n	3e34 <memset+0x44>
    3e42:	220f      	movs	r2, #15
    3e44:	4397      	bics	r7, r2
    3e46:	3710      	adds	r7, #16
    3e48:	19db      	adds	r3, r3, r7
    3e4a:	4014      	ands	r4, r2
    3e4c:	2c03      	cmp	r4, #3
    3e4e:	d90d      	bls.n	3e6c <memset+0x7c>
    3e50:	001a      	movs	r2, r3
    3e52:	1f27      	subs	r7, r4, #4
    3e54:	08be      	lsrs	r6, r7, #2
    3e56:	3601      	adds	r6, #1
    3e58:	00b6      	lsls	r6, r6, #2
    3e5a:	199e      	adds	r6, r3, r6
    3e5c:	c220      	stmia	r2!, {r5}
    3e5e:	42b2      	cmp	r2, r6
    3e60:	d1fc      	bne.n	3e5c <memset+0x6c>
    3e62:	2203      	movs	r2, #3
    3e64:	4397      	bics	r7, r2
    3e66:	3704      	adds	r7, #4
    3e68:	19db      	adds	r3, r3, r7
    3e6a:	4014      	ands	r4, r2
    3e6c:	2c00      	cmp	r4, #0
    3e6e:	d005      	beq.n	3e7c <memset+0x8c>
    3e70:	b2c9      	uxtb	r1, r1
    3e72:	191c      	adds	r4, r3, r4
    3e74:	7019      	strb	r1, [r3, #0]
    3e76:	3301      	adds	r3, #1
    3e78:	429c      	cmp	r4, r3
    3e7a:	d1fb      	bne.n	3e74 <memset+0x84>
    3e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e7e:	0014      	movs	r4, r2
    3e80:	0003      	movs	r3, r0
    3e82:	e7c6      	b.n	3e12 <memset+0x22>

00003e84 <strlen>:
    3e84:	b510      	push	{r4, lr}
    3e86:	0783      	lsls	r3, r0, #30
    3e88:	d025      	beq.n	3ed6 <strlen+0x52>
    3e8a:	7803      	ldrb	r3, [r0, #0]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d024      	beq.n	3eda <strlen+0x56>
    3e90:	0003      	movs	r3, r0
    3e92:	2103      	movs	r1, #3
    3e94:	e002      	b.n	3e9c <strlen+0x18>
    3e96:	781a      	ldrb	r2, [r3, #0]
    3e98:	2a00      	cmp	r2, #0
    3e9a:	d01a      	beq.n	3ed2 <strlen+0x4e>
    3e9c:	3301      	adds	r3, #1
    3e9e:	420b      	tst	r3, r1
    3ea0:	d1f9      	bne.n	3e96 <strlen+0x12>
    3ea2:	6819      	ldr	r1, [r3, #0]
    3ea4:	4a0e      	ldr	r2, [pc, #56]	; (3ee0 <strlen+0x5c>)
    3ea6:	4c0f      	ldr	r4, [pc, #60]	; (3ee4 <strlen+0x60>)
    3ea8:	188a      	adds	r2, r1, r2
    3eaa:	438a      	bics	r2, r1
    3eac:	4222      	tst	r2, r4
    3eae:	d106      	bne.n	3ebe <strlen+0x3a>
    3eb0:	3304      	adds	r3, #4
    3eb2:	6819      	ldr	r1, [r3, #0]
    3eb4:	4a0a      	ldr	r2, [pc, #40]	; (3ee0 <strlen+0x5c>)
    3eb6:	188a      	adds	r2, r1, r2
    3eb8:	438a      	bics	r2, r1
    3eba:	4222      	tst	r2, r4
    3ebc:	d0f8      	beq.n	3eb0 <strlen+0x2c>
    3ebe:	001a      	movs	r2, r3
    3ec0:	781b      	ldrb	r3, [r3, #0]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d003      	beq.n	3ece <strlen+0x4a>
    3ec6:	3201      	adds	r2, #1
    3ec8:	7811      	ldrb	r1, [r2, #0]
    3eca:	2900      	cmp	r1, #0
    3ecc:	d1fb      	bne.n	3ec6 <strlen+0x42>
    3ece:	1a10      	subs	r0, r2, r0
    3ed0:	bd10      	pop	{r4, pc}
    3ed2:	1a18      	subs	r0, r3, r0
    3ed4:	e7fc      	b.n	3ed0 <strlen+0x4c>
    3ed6:	0003      	movs	r3, r0
    3ed8:	e7e3      	b.n	3ea2 <strlen+0x1e>
    3eda:	2000      	movs	r0, #0
    3edc:	e7f8      	b.n	3ed0 <strlen+0x4c>
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	fefefeff 	.word	0xfefefeff
    3ee4:	80808080 	.word	0x80808080

00003ee8 <__register_exitproc>:
    3ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eea:	464e      	mov	r6, r9
    3eec:	4645      	mov	r5, r8
    3eee:	46de      	mov	lr, fp
    3ef0:	4657      	mov	r7, sl
    3ef2:	b5e0      	push	{r5, r6, r7, lr}
    3ef4:	4d36      	ldr	r5, [pc, #216]	; (3fd0 <__register_exitproc+0xe8>)
    3ef6:	b083      	sub	sp, #12
    3ef8:	0006      	movs	r6, r0
    3efa:	6828      	ldr	r0, [r5, #0]
    3efc:	4698      	mov	r8, r3
    3efe:	000f      	movs	r7, r1
    3f00:	4691      	mov	r9, r2
    3f02:	f000 f899 	bl	4038 <__retarget_lock_acquire_recursive>
    3f06:	4b33      	ldr	r3, [pc, #204]	; (3fd4 <__register_exitproc+0xec>)
    3f08:	681c      	ldr	r4, [r3, #0]
    3f0a:	23a4      	movs	r3, #164	; 0xa4
    3f0c:	005b      	lsls	r3, r3, #1
    3f0e:	58e0      	ldr	r0, [r4, r3]
    3f10:	2800      	cmp	r0, #0
    3f12:	d052      	beq.n	3fba <__register_exitproc+0xd2>
    3f14:	6843      	ldr	r3, [r0, #4]
    3f16:	2b1f      	cmp	r3, #31
    3f18:	dc13      	bgt.n	3f42 <__register_exitproc+0x5a>
    3f1a:	1c5a      	adds	r2, r3, #1
    3f1c:	9201      	str	r2, [sp, #4]
    3f1e:	2e00      	cmp	r6, #0
    3f20:	d128      	bne.n	3f74 <__register_exitproc+0x8c>
    3f22:	9a01      	ldr	r2, [sp, #4]
    3f24:	3302      	adds	r3, #2
    3f26:	009b      	lsls	r3, r3, #2
    3f28:	6042      	str	r2, [r0, #4]
    3f2a:	501f      	str	r7, [r3, r0]
    3f2c:	6828      	ldr	r0, [r5, #0]
    3f2e:	f000 f885 	bl	403c <__retarget_lock_release_recursive>
    3f32:	2000      	movs	r0, #0
    3f34:	b003      	add	sp, #12
    3f36:	bc3c      	pop	{r2, r3, r4, r5}
    3f38:	4690      	mov	r8, r2
    3f3a:	4699      	mov	r9, r3
    3f3c:	46a2      	mov	sl, r4
    3f3e:	46ab      	mov	fp, r5
    3f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f42:	4b25      	ldr	r3, [pc, #148]	; (3fd8 <__register_exitproc+0xf0>)
    3f44:	2b00      	cmp	r3, #0
    3f46:	d03d      	beq.n	3fc4 <__register_exitproc+0xdc>
    3f48:	20c8      	movs	r0, #200	; 0xc8
    3f4a:	0040      	lsls	r0, r0, #1
    3f4c:	f7ff fca0 	bl	3890 <malloc>
    3f50:	2800      	cmp	r0, #0
    3f52:	d037      	beq.n	3fc4 <__register_exitproc+0xdc>
    3f54:	22a4      	movs	r2, #164	; 0xa4
    3f56:	2300      	movs	r3, #0
    3f58:	0052      	lsls	r2, r2, #1
    3f5a:	58a1      	ldr	r1, [r4, r2]
    3f5c:	6043      	str	r3, [r0, #4]
    3f5e:	6001      	str	r1, [r0, #0]
    3f60:	50a0      	str	r0, [r4, r2]
    3f62:	3240      	adds	r2, #64	; 0x40
    3f64:	5083      	str	r3, [r0, r2]
    3f66:	3204      	adds	r2, #4
    3f68:	5083      	str	r3, [r0, r2]
    3f6a:	3301      	adds	r3, #1
    3f6c:	9301      	str	r3, [sp, #4]
    3f6e:	2300      	movs	r3, #0
    3f70:	2e00      	cmp	r6, #0
    3f72:	d0d6      	beq.n	3f22 <__register_exitproc+0x3a>
    3f74:	009a      	lsls	r2, r3, #2
    3f76:	4692      	mov	sl, r2
    3f78:	4482      	add	sl, r0
    3f7a:	464a      	mov	r2, r9
    3f7c:	2188      	movs	r1, #136	; 0x88
    3f7e:	4654      	mov	r4, sl
    3f80:	5062      	str	r2, [r4, r1]
    3f82:	22c4      	movs	r2, #196	; 0xc4
    3f84:	0052      	lsls	r2, r2, #1
    3f86:	4691      	mov	r9, r2
    3f88:	4481      	add	r9, r0
    3f8a:	464a      	mov	r2, r9
    3f8c:	3987      	subs	r1, #135	; 0x87
    3f8e:	4099      	lsls	r1, r3
    3f90:	6812      	ldr	r2, [r2, #0]
    3f92:	468b      	mov	fp, r1
    3f94:	430a      	orrs	r2, r1
    3f96:	4694      	mov	ip, r2
    3f98:	464a      	mov	r2, r9
    3f9a:	4661      	mov	r1, ip
    3f9c:	6011      	str	r1, [r2, #0]
    3f9e:	2284      	movs	r2, #132	; 0x84
    3fa0:	4641      	mov	r1, r8
    3fa2:	0052      	lsls	r2, r2, #1
    3fa4:	50a1      	str	r1, [r4, r2]
    3fa6:	2e02      	cmp	r6, #2
    3fa8:	d1bb      	bne.n	3f22 <__register_exitproc+0x3a>
    3faa:	0002      	movs	r2, r0
    3fac:	465c      	mov	r4, fp
    3fae:	328d      	adds	r2, #141	; 0x8d
    3fb0:	32ff      	adds	r2, #255	; 0xff
    3fb2:	6811      	ldr	r1, [r2, #0]
    3fb4:	430c      	orrs	r4, r1
    3fb6:	6014      	str	r4, [r2, #0]
    3fb8:	e7b3      	b.n	3f22 <__register_exitproc+0x3a>
    3fba:	0020      	movs	r0, r4
    3fbc:	304d      	adds	r0, #77	; 0x4d
    3fbe:	30ff      	adds	r0, #255	; 0xff
    3fc0:	50e0      	str	r0, [r4, r3]
    3fc2:	e7a7      	b.n	3f14 <__register_exitproc+0x2c>
    3fc4:	6828      	ldr	r0, [r5, #0]
    3fc6:	f000 f839 	bl	403c <__retarget_lock_release_recursive>
    3fca:	2001      	movs	r0, #1
    3fcc:	4240      	negs	r0, r0
    3fce:	e7b1      	b.n	3f34 <__register_exitproc+0x4c>
    3fd0:	200004c0 	.word	0x200004c0
    3fd4:	0000429c 	.word	0x0000429c
    3fd8:	00003891 	.word	0x00003891

00003fdc <register_fini>:
    3fdc:	4b03      	ldr	r3, [pc, #12]	; (3fec <register_fini+0x10>)
    3fde:	b510      	push	{r4, lr}
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d002      	beq.n	3fea <register_fini+0xe>
    3fe4:	4802      	ldr	r0, [pc, #8]	; (3ff0 <register_fini+0x14>)
    3fe6:	f000 f805 	bl	3ff4 <atexit>
    3fea:	bd10      	pop	{r4, pc}
    3fec:	00000000 	.word	0x00000000
    3ff0:	00004005 	.word	0x00004005

00003ff4 <atexit>:
    3ff4:	b510      	push	{r4, lr}
    3ff6:	0001      	movs	r1, r0
    3ff8:	2300      	movs	r3, #0
    3ffa:	2200      	movs	r2, #0
    3ffc:	2000      	movs	r0, #0
    3ffe:	f7ff ff73 	bl	3ee8 <__register_exitproc>
    4002:	bd10      	pop	{r4, pc}

00004004 <__libc_fini_array>:
    4004:	b570      	push	{r4, r5, r6, lr}
    4006:	4b09      	ldr	r3, [pc, #36]	; (402c <__libc_fini_array+0x28>)
    4008:	4c09      	ldr	r4, [pc, #36]	; (4030 <__libc_fini_array+0x2c>)
    400a:	1ae4      	subs	r4, r4, r3
    400c:	10a4      	asrs	r4, r4, #2
    400e:	d009      	beq.n	4024 <__libc_fini_array+0x20>
    4010:	4a08      	ldr	r2, [pc, #32]	; (4034 <__libc_fini_array+0x30>)
    4012:	18a5      	adds	r5, r4, r2
    4014:	00ad      	lsls	r5, r5, #2
    4016:	18ed      	adds	r5, r5, r3
    4018:	682b      	ldr	r3, [r5, #0]
    401a:	3c01      	subs	r4, #1
    401c:	4798      	blx	r3
    401e:	3d04      	subs	r5, #4
    4020:	2c00      	cmp	r4, #0
    4022:	d1f9      	bne.n	4018 <__libc_fini_array+0x14>
    4024:	f000 f94e 	bl	42c4 <_fini>
    4028:	bd70      	pop	{r4, r5, r6, pc}
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	000042d0 	.word	0x000042d0
    4030:	000042d4 	.word	0x000042d4
    4034:	3fffffff 	.word	0x3fffffff

00004038 <__retarget_lock_acquire_recursive>:
    4038:	4770      	bx	lr
    403a:	46c0      	nop			; (mov r8, r8)

0000403c <__retarget_lock_release_recursive>:
    403c:	4770      	bx	lr
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	65747942 	.word	0x65747942
    4044:	0000203a 	.word	0x0000203a
    4048:	00000a0d 	.word	0x00000a0d
    404c:	65725020 	.word	0x65725020
    4050:	52207373 	.word	0x52207373
    4054:	52555445 	.word	0x52555445
    4058:	0000004e 	.word	0x0000004e
    405c:	746f4720 	.word	0x746f4720
    4060:	21746920 	.word	0x21746920
    4064:	002e2e2e 	.word	0x002e2e2e
    4068:	003e0d0a 	.word	0x003e0d0a
    406c:	54206f54 	.word	0x54206f54
    4070:	736e6172 	.word	0x736e6172
    4074:	2c74696d 	.word	0x2c74696d
    4078:	746e6520 	.word	0x746e6520
    407c:	32207265 	.word	0x32207265
    4080:	58454820 	.word	0x58454820
    4084:	6f662020 	.word	0x6f662020
    4088:	776f6c6c 	.word	0x776f6c6c
    408c:	62206465 	.word	0x62206465
    4090:	4e452079 	.word	0x4e452079
    4094:	00524554 	.word	0x00524554
    4098:	6d726f46 	.word	0x6d726f46
    409c:	203a7461 	.word	0x203a7461
    40a0:	73746942 	.word	0x73746942
    40a4:	352d3820 	.word	0x352d3820
    40a8:	6942202c 	.word	0x6942202c
    40ac:	34207374 	.word	0x34207374
    40b0:	202c312d 	.word	0x202c312d
    40b4:	6e656874 	.word	0x6e656874
    40b8:	746e4520 	.word	0x746e4520
    40bc:	00207265 	.word	0x00207265
    40c0:	6d617845 	.word	0x6d617845
    40c4:	3a656c70 	.word	0x3a656c70
    40c8:	20373620 	.word	0x20373620
    40cc:	45544e45 	.word	0x45544e45
    40d0:	00000052 	.word	0x00000052
    40d4:	65707954 	.word	0x65707954
    40d8:	206e6120 	.word	0x206e6120
    40dc:	21584548 	.word	0x21584548
    40e0:	00000000 	.word	0x00000000
    40e4:	202a2a2a 	.word	0x202a2a2a
    40e8:	20425355 	.word	0x20425355
    40ec:	65746e49 	.word	0x65746e49
    40f0:	63616672 	.word	0x63616672
    40f4:	65542065 	.word	0x65542065
    40f8:	2a207473 	.word	0x2a207473
    40fc:	00002a2a 	.word	0x00002a2a
    4100:	202a2a2a 	.word	0x202a2a2a
    4104:	65746144 	.word	0x65746144
    4108:	0020203a 	.word	0x0020203a
    410c:	206c754a 	.word	0x206c754a
    4110:	32203832 	.word	0x32203832
    4114:	00303230 	.word	0x00303230
    4118:	6d695420 	.word	0x6d695420
    411c:	00203a65 	.word	0x00203a65
    4120:	313a3031 	.word	0x313a3031
    4124:	35303a35 	.word	0x35303a35
    4128:	00000000 	.word	0x00000000
    412c:	2a2a2a20 	.word	0x2a2a2a20
    4130:	00000000 	.word	0x00000000
    4134:	75706e49 	.word	0x75706e49
    4138:	61562074 	.word	0x61562074
    413c:	2065756c 	.word	0x2065756c
    4140:	45206e6f 	.word	0x45206e6f
    4144:	3a325458 	.word	0x3a325458
    4148:	00000020 	.word	0x00000020
    414c:	682f2e2e 	.word	0x682f2e2e
    4150:	732f6c61 	.word	0x732f6c61
    4154:	682f6372 	.word	0x682f6372
    4158:	745f6c61 	.word	0x745f6c61
    415c:	72656d69 	.word	0x72656d69
    4160:	0000632e 	.word	0x0000632e
    4164:	682f2e2e 	.word	0x682f2e2e
    4168:	752f6c61 	.word	0x752f6c61
    416c:	736c6974 	.word	0x736c6974
    4170:	6372732f 	.word	0x6372732f
    4174:	6974752f 	.word	0x6974752f
    4178:	6c5f736c 	.word	0x6c5f736c
    417c:	2e747369 	.word	0x2e747369
    4180:	00000063 	.word	0x00000063

00004184 <_tcs>:
    4184:	01680003 00000000 00000000 000001f4     ..h.............
    4194:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    41a4:	63745f6c 0000632e 00002000              l_tc.c... ..

000041b0 <_usb_ep_cfgs>:
    41b0:	200008f0 00000000 00000040 200008b0     ... ....@...... 
    41c0:	20000870 00400040 20000830 200007f0     p.. @.@.0.. ... 
    41d0:	00400040 200007b0 20000770 00400040     @.@.... p.. @.@.
    41e0:	20000730 200006f0 00400040 000033bc     0.. ... @.@..3..
    41f0:	000030a4 000033bc 000030d6 000033bc     .0...3...0...3..
    4200:	00002ffa 000033bc 000033bc 000033bc     ./...3...3...3..
    4210:	0000300e 000033bc 0000310a 752f2e2e     .0...3...1..../u
    4220:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    4230:	00000063                                c...

00004234 <_ZTV6Stream>:
	...
    423c:	00003895 00003897 0000361d 00003621     .8...8...6..!6..
    424c:	00003895 00003895 00003895              .8...8...8..

00004258 <_ZTV9CDC_Class>:
	...
    4260:	00003677 000037ad 0000361d 00003749     w6...7...6..I7..
    4270:	00003695 00003721 0000364d 00003701     .6..!7..M6...7..
    4280:	00003759 00003765 2e257830 00005838     Y7..e7..0x%.8X..
    4290:	006e616e 00666e69 0066766f              nan.inf.ovf.

0000429c <_global_impure_ptr>:
    429c:	20000098                                ... 

000042a0 <_init>:
    42a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42a6:	bc08      	pop	{r3}
    42a8:	469e      	mov	lr, r3
    42aa:	4770      	bx	lr

000042ac <__init_array_start>:
    42ac:	00003fdd 	.word	0x00003fdd

000042b0 <__frame_dummy_init_array_entry>:
    42b0:	000000dd 000005d1 00000751 00003865     ........Q...e8..
    42c0:	00003bb5                                .;..

000042c4 <_fini>:
    42c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42ca:	bc08      	pop	{r3}
    42cc:	469e      	mov	lr, r3
    42ce:	4770      	bx	lr

000042d0 <__fini_array_start>:
    42d0:	000000b5 	.word	0x000000b5
