
USBSerialInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ca0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00003ca0  00003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  00003ca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005e8  2000049c  00004144  0002049c  2**2
                  ALLOC
  4 .stack        00002004  20000a84  0000472c  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002eadd  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004f45  00000000  00000000  0004effa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cd58  00000000  00000000  00053f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ab0  00000000  00000000  00060c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f68  00000000  00000000  00061747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f793  00000000  00000000  000626af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013752  00000000  00000000  00081e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009192a  00000000  00000000  00095594  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001cf0  00000000  00000000  00126ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 2a 00 20 8d 03 00 00 89 03 00 00 89 03 00 00     .*. ............
	...
      2c:	89 03 00 00 00 00 00 00 00 00 00 00 89 03 00 00     ................
      3c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      4c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      5c:	c1 27 00 00 89 03 00 00 89 03 00 00 89 03 00 00     .'..............
      6c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      7c:	89 03 00 00 89 03 00 00 89 03 00 00 79 16 00 00     ............y...
      8c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      9c:	89 03 00 00 89 03 00 00 89 03 00 00 89 03 00 00     ................
      ac:	89 03 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	00003ca8 	.word	0x00003ca8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	00003ca8 	.word	0x00003ca8
     10c:	00003ca8 	.word	0x00003ca8
     110:	00000000 	.word	0x00000000

00000114 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     118:	4770      	bx	lr
	...

0000011c <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2201      	movs	r2, #1
     122:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
     124:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
     126:	741a      	strb	r2, [r3, #16]


	return false;
}
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr
     12c:	200004b8 	.word	0x200004b8

00000130 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
     130:	4b03      	ldr	r3, [pc, #12]	; (140 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2201      	movs	r2, #1
     136:	74da      	strb	r2, [r3, #19]
	ptrCDCClass->terminalStarted=true;
     138:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
     13a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
     13c:	2000      	movs	r0, #0
     13e:	4770      	bx	lr
     140:	200004b8 	.word	0x200004b8

00000144 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
     144:	b530      	push	{r4, r5, lr}
     146:	b083      	sub	sp, #12
     148:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
     14a:	6983      	ldr	r3, [r0, #24]
     14c:	3301      	adds	r3, #1
     14e:	d002      	beq.n	156 <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
     150:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
     152:	b003      	add	sp, #12
     154:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
     156:	466b      	mov	r3, sp
     158:	1ddd      	adds	r5, r3, #7
     15a:	6803      	ldr	r3, [r0, #0]
     15c:	69db      	ldr	r3, [r3, #28]
     15e:	2201      	movs	r2, #1
     160:	0029      	movs	r1, r5
     162:	4798      	blx	r3
     164:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
     166:	782b      	ldrb	r3, [r5, #0]
     168:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
     16a:	69a0      	ldr	r0, [r4, #24]
     16c:	e7f1      	b.n	152 <_ZN9CDC_Class4peekEv+0xe>

0000016e <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     16e:	b500      	push	{lr}
     170:	b083      	sub	sp, #12
     172:	466b      	mov	r3, sp
     174:	71d9      	strb	r1, [r3, #7]
		while(!txReady);
     176:	7cc3      	ldrb	r3, [r0, #19]
     178:	2b00      	cmp	r3, #0
     17a:	d0fc      	beq.n	176 <_ZN9CDC_Class5writeEh+0x8>
	
		return writeData(&c, 1);
     17c:	6803      	ldr	r3, [r0, #0]
     17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     180:	2201      	movs	r2, #1
     182:	4669      	mov	r1, sp
     184:	3107      	adds	r1, #7
     186:	4798      	blx	r3
}
     188:	b003      	add	sp, #12
     18a:	bd00      	pop	{pc}

0000018c <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
     18c:	7d03      	ldrb	r3, [r0, #20]
     18e:	b2db      	uxtb	r3, r3
     190:	2b00      	cmp	r3, #0
     192:	d001      	beq.n	198 <_ZN9CDC_Class9availableEv+0xc>
     194:	7cc3      	ldrb	r3, [r0, #19]
     196:	b2db      	uxtb	r3, r3
	{
		
	return false;
	}
	
}
     198:	0018      	movs	r0, r3
     19a:	4770      	bx	lr

0000019c <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
     19c:	b510      	push	{r4, lr}
     19e:	0004      	movs	r4, r0
     1a0:	4b03      	ldr	r3, [pc, #12]	; (1b0 <_ZN9CDC_ClassD1Ev+0x14>)
     1a2:	3308      	adds	r3, #8
     1a4:	6003      	str	r3, [r0, #0]
     1a6:	3010      	adds	r0, #16
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <_ZN9CDC_ClassD1Ev+0x18>)
     1aa:	4798      	blx	r3
} //~CDC_Class
     1ac:	0020      	movs	r0, r4
     1ae:	bd10      	pop	{r4, pc}
     1b0:	00003ad0 	.word	0x00003ad0
     1b4:	000005d5 	.word	0x000005d5

000001b8 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     1b8:	b510      	push	{r4, lr}
     1ba:	b082      	sub	sp, #8
     1bc:	1c03      	adds	r3, r0, #0
     1be:	aa01      	add	r2, sp, #4
     1c0:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
     1c2:	07db      	lsls	r3, r3, #31
     1c4:	d402      	bmi.n	1cc <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     1c6:	2000      	movs	r0, #0
     1c8:	b002      	add	sp, #8
     1ca:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     1cc:	4906      	ldr	r1, [pc, #24]	; (1e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     1ce:	2000      	movs	r0, #0
     1d0:	4c06      	ldr	r4, [pc, #24]	; (1ec <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     1d2:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     1d4:	4906      	ldr	r1, [pc, #24]	; (1f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     1d6:	2001      	movs	r0, #1
     1d8:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
     1da:	4b06      	ldr	r3, [pc, #24]	; (1f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	2201      	movs	r2, #1
     1e0:	74da      	strb	r2, [r3, #19]
		ptrCDCClass->rxReady=true;
     1e2:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->plugged=true;
     1e4:	741a      	strb	r2, [r3, #16]
     1e6:	e7ee      	b.n	1c6 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     1e8:	0000011d 	.word	0x0000011d
     1ec:	00002d71 	.word	0x00002d71
     1f0:	00000131 	.word	0x00000131
     1f4:	200004b8 	.word	0x200004b8

000001f8 <_ZN9CDC_Class8readDataEPvl>:
{
     1f8:	b510      	push	{r4, lr}
     1fa:	0004      	movs	r4, r0
     1fc:	0008      	movs	r0, r1
	rxReady=false;
     1fe:	2300      	movs	r3, #0
     200:	7523      	strb	r3, [r4, #20]
	r=cdcdf_acm_read((uint8_t *)p, size);
     202:	0011      	movs	r1, r2
     204:	4b03      	ldr	r3, [pc, #12]	; (214 <_ZN9CDC_Class8readDataEPvl+0x1c>)
     206:	4798      	blx	r3
	while(!rxReady);
     208:	7d23      	ldrb	r3, [r4, #20]
     20a:	2b00      	cmp	r3, #0
     20c:	d0fc      	beq.n	208 <_ZN9CDC_Class8readDataEPvl+0x10>
	return r;
     20e:	23ff      	movs	r3, #255	; 0xff
     210:	4018      	ands	r0, r3
}
     212:	bd10      	pop	{r4, pc}
     214:	00002d01 	.word	0x00002d01

00000218 <_ZN9CDC_Class4readEv>:
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
     21c:	0004      	movs	r4, r0
	rxReady=false;
     21e:	2300      	movs	r3, #0
     220:	7503      	strb	r3, [r0, #20]
	cdcdf_acm_read(&p, 1);
     222:	2101      	movs	r1, #1
     224:	466b      	mov	r3, sp
     226:	1dd8      	adds	r0, r3, #7
     228:	4b04      	ldr	r3, [pc, #16]	; (23c <_ZN9CDC_Class4readEv+0x24>)
     22a:	4798      	blx	r3
	while(!rxReady);
     22c:	7d23      	ldrb	r3, [r4, #20]
     22e:	2b00      	cmp	r3, #0
     230:	d0fc      	beq.n	22c <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
     232:	466b      	mov	r3, sp
     234:	79d8      	ldrb	r0, [r3, #7]
}
     236:	b002      	add	sp, #8
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00002d01 	.word	0x00002d01

00000240 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     240:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     242:	301c      	adds	r0, #28
     244:	2140      	movs	r1, #64	; 0x40
     246:	4b01      	ldr	r3, [pc, #4]	; (24c <_ZN9CDC_Class5flushEv+0xc>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	00002d2d 	.word	0x00002d2d

00000250 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     250:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
     252:	4b01      	ldr	r3, [pc, #4]	; (258 <_ZN9CDC_Class5clearEv+0x8>)
     254:	4798      	blx	r3
}
     256:	bd10      	pop	{r4, pc}
     258:	00002d59 	.word	0x00002d59

0000025c <_ZN9CDC_Class9writeDataEPKvl>:
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25e:	0004      	movs	r4, r0
     260:	000e      	movs	r6, r1
     262:	0017      	movs	r7, r2
	txReady=false;
     264:	2300      	movs	r3, #0
     266:	74c3      	strb	r3, [r0, #19]
	if (CheckTerminal())
     268:	3010      	adds	r0, #16
     26a:	4b0a      	ldr	r3, [pc, #40]	; (294 <_ZN9CDC_Class9writeDataEPKvl+0x38>)
     26c:	4798      	blx	r3
		return 0;
     26e:	2500      	movs	r5, #0
	if (CheckTerminal())
     270:	2800      	cmp	r0, #0
     272:	d00d      	beq.n	290 <_ZN9CDC_Class9writeDataEPKvl+0x34>
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     274:	0039      	movs	r1, r7
     276:	0030      	movs	r0, r6
     278:	4b07      	ldr	r3, [pc, #28]	; (298 <_ZN9CDC_Class9writeDataEPKvl+0x3c>)
     27a:	4798      	blx	r3
     27c:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted)){
     27e:	7ce3      	ldrb	r3, [r4, #19]
     280:	2b00      	cmp	r3, #0
     282:	d102      	bne.n	28a <_ZN9CDC_Class9writeDataEPKvl+0x2e>
     284:	7c63      	ldrb	r3, [r4, #17]
     286:	2b00      	cmp	r3, #0
     288:	d1f9      	bne.n	27e <_ZN9CDC_Class9writeDataEPKvl+0x22>
			usbTimer.Stop();
     28a:	4804      	ldr	r0, [pc, #16]	; (29c <_ZN9CDC_Class9writeDataEPKvl+0x40>)
     28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <_ZN9CDC_Class9writeDataEPKvl+0x44>)
     28e:	4798      	blx	r3
}
     290:	0028      	movs	r0, r5
     292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     294:	00000635 	.word	0x00000635
     298:	00002d2d 	.word	0x00002d2d
     29c:	20000524 	.word	0x20000524
     2a0:	00000721 	.word	0x00000721

000002a4 <_ZN9CDC_Class5writeEPKhj>:
{
     2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2a6:	0004      	movs	r4, r0
     2a8:	000f      	movs	r7, r1
     2aa:	0016      	movs	r6, r2
	txReady=false;
     2ac:	2300      	movs	r3, #0
     2ae:	74c3      	strb	r3, [r0, #19]
 	if (CheckTerminal(size)){
     2b0:	3010      	adds	r0, #16
     2b2:	0011      	movs	r1, r2
     2b4:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <_ZN9CDC_Class5writeEPKhj+0x3c>)
     2b6:	4798      	blx	r3
 		r=0;
     2b8:	2500      	movs	r5, #0
 	if (CheckTerminal(size)){
     2ba:	2800      	cmp	r0, #0
     2bc:	d00d      	beq.n	2da <_ZN9CDC_Class5writeEPKhj+0x36>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     2be:	0031      	movs	r1, r6
     2c0:	0038      	movs	r0, r7
     2c2:	4b08      	ldr	r3, [pc, #32]	; (2e4 <_ZN9CDC_Class5writeEPKhj+0x40>)
     2c4:	4798      	blx	r3
     2c6:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted));
     2c8:	7ce3      	ldrb	r3, [r4, #19]
     2ca:	2b00      	cmp	r3, #0
     2cc:	d102      	bne.n	2d4 <_ZN9CDC_Class5writeEPKhj+0x30>
     2ce:	7c63      	ldrb	r3, [r4, #17]
     2d0:	2b00      	cmp	r3, #0
     2d2:	d1f9      	bne.n	2c8 <_ZN9CDC_Class5writeEPKhj+0x24>
		usbTimer.Stop();
     2d4:	4804      	ldr	r0, [pc, #16]	; (2e8 <_ZN9CDC_Class5writeEPKhj+0x44>)
     2d6:	4b05      	ldr	r3, [pc, #20]	; (2ec <_ZN9CDC_Class5writeEPKhj+0x48>)
     2d8:	4798      	blx	r3
}
     2da:	0028      	movs	r0, r5
     2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00000681 	.word	0x00000681
     2e4:	00002d2d 	.word	0x00002d2d
     2e8:	20000524 	.word	0x20000524
     2ec:	00000721 	.word	0x00000721

000002f0 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
     2f0:	b510      	push	{r4, lr}
     2f2:	0004      	movs	r4, r0
    Print() : write_error(0) {}
     2f4:	2300      	movs	r3, #0
     2f6:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     2f8:	4b08      	ldr	r3, [pc, #32]	; (31c <_ZN9CDC_ClassC1Ev+0x2c>)
     2fa:	6003      	str	r3, [r0, #0]
     2fc:	23fa      	movs	r3, #250	; 0xfa
     2fe:	009b      	lsls	r3, r3, #2
     300:	6083      	str	r3, [r0, #8]
     302:	3010      	adds	r0, #16
     304:	4b06      	ldr	r3, [pc, #24]	; (320 <_ZN9CDC_ClassC1Ev+0x30>)
     306:	4798      	blx	r3
     308:	4b06      	ldr	r3, [pc, #24]	; (324 <_ZN9CDC_ClassC1Ev+0x34>)
     30a:	3308      	adds	r3, #8
     30c:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
     30e:	2301      	movs	r3, #1
     310:	425b      	negs	r3, r3
     312:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
     314:	4b04      	ldr	r3, [pc, #16]	; (328 <_ZN9CDC_ClassC1Ev+0x38>)
     316:	601c      	str	r4, [r3, #0]
} //CDC_Class
     318:	0020      	movs	r0, r4
     31a:	bd10      	pop	{r4, pc}
     31c:	00003ab4 	.word	0x00003ab4
     320:	000005c9 	.word	0x000005c9
     324:	00003ad0 	.word	0x00003ad0
     328:	200004b8 	.word	0x200004b8

0000032c <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
     32c:	b510      	push	{r4, lr}
     32e:	0004      	movs	r4, r0
	OnInit();
     330:	3010      	adds	r0, #16
     332:	4b04      	ldr	r3, [pc, #16]	; (344 <_ZN9CDC_Class4InitEv+0x18>)
     334:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     336:	4904      	ldr	r1, [pc, #16]	; (348 <_ZN9CDC_Class4InitEv+0x1c>)
     338:	2003      	movs	r0, #3
     33a:	4b04      	ldr	r3, [pc, #16]	; (34c <_ZN9CDC_Class4InitEv+0x20>)
     33c:	4798      	blx	r3
	if (plugged)
     33e:	7c23      	ldrb	r3, [r4, #16]
}
     340:	bd10      	pop	{r4, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	000005d9 	.word	0x000005d9
     348:	000001b9 	.word	0x000001b9
     34c:	00002d71 	.word	0x00002d71

00000350 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
     350:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
     352:	4b01      	ldr	r3, [pc, #4]	; (358 <_ZN9CDC_Class9IsEnabledEv+0x8>)
     354:	4798      	blx	r3
}
     356:	bd10      	pop	{r4, pc}
     358:	00002dc1 	.word	0x00002dc1

0000035c <_GLOBAL__sub_I_ptrCDCClass>:

	delay_us(10);
	return result;
}

 CDC_Class	serial;
     35c:	b510      	push	{r4, lr}
     35e:	4c05      	ldr	r4, [pc, #20]	; (374 <_GLOBAL__sub_I_ptrCDCClass+0x18>)
     360:	3404      	adds	r4, #4
     362:	0020      	movs	r0, r4
     364:	4b04      	ldr	r3, [pc, #16]	; (378 <_GLOBAL__sub_I_ptrCDCClass+0x1c>)
     366:	4798      	blx	r3
     368:	4a04      	ldr	r2, [pc, #16]	; (37c <_GLOBAL__sub_I_ptrCDCClass+0x20>)
     36a:	4905      	ldr	r1, [pc, #20]	; (380 <_GLOBAL__sub_I_ptrCDCClass+0x24>)
     36c:	0020      	movs	r0, r4
     36e:	4b05      	ldr	r3, [pc, #20]	; (384 <_GLOBAL__sub_I_ptrCDCClass+0x28>)
     370:	4798      	blx	r3
     372:	bd10      	pop	{r4, pc}
     374:	200004b8 	.word	0x200004b8
     378:	000002f1 	.word	0x000002f1
     37c:	20000000 	.word	0x20000000
     380:	0000019d 	.word	0x0000019d
     384:	00003659 	.word	0x00003659

00000388 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     388:	e7fe      	b.n	388 <Dummy_Handler>
	...

0000038c <Reset_Handler>:
{
     38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     38e:	4a2a      	ldr	r2, [pc, #168]	; (438 <Reset_Handler+0xac>)
     390:	4b2a      	ldr	r3, [pc, #168]	; (43c <Reset_Handler+0xb0>)
     392:	429a      	cmp	r2, r3
     394:	d011      	beq.n	3ba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     396:	001a      	movs	r2, r3
     398:	4b29      	ldr	r3, [pc, #164]	; (440 <Reset_Handler+0xb4>)
     39a:	429a      	cmp	r2, r3
     39c:	d20d      	bcs.n	3ba <Reset_Handler+0x2e>
     39e:	4a29      	ldr	r2, [pc, #164]	; (444 <Reset_Handler+0xb8>)
     3a0:	3303      	adds	r3, #3
     3a2:	1a9b      	subs	r3, r3, r2
     3a4:	089b      	lsrs	r3, r3, #2
     3a6:	3301      	adds	r3, #1
     3a8:	009b      	lsls	r3, r3, #2
     3aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     3ac:	4823      	ldr	r0, [pc, #140]	; (43c <Reset_Handler+0xb0>)
     3ae:	4922      	ldr	r1, [pc, #136]	; (438 <Reset_Handler+0xac>)
     3b0:	588c      	ldr	r4, [r1, r2]
     3b2:	5084      	str	r4, [r0, r2]
     3b4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     3b6:	429a      	cmp	r2, r3
     3b8:	d1fa      	bne.n	3b0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     3ba:	4a23      	ldr	r2, [pc, #140]	; (448 <Reset_Handler+0xbc>)
     3bc:	4b23      	ldr	r3, [pc, #140]	; (44c <Reset_Handler+0xc0>)
     3be:	429a      	cmp	r2, r3
     3c0:	d20a      	bcs.n	3d8 <Reset_Handler+0x4c>
     3c2:	43d3      	mvns	r3, r2
     3c4:	4921      	ldr	r1, [pc, #132]	; (44c <Reset_Handler+0xc0>)
     3c6:	185b      	adds	r3, r3, r1
     3c8:	2103      	movs	r1, #3
     3ca:	438b      	bics	r3, r1
     3cc:	3304      	adds	r3, #4
     3ce:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     3d0:	2100      	movs	r1, #0
     3d2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     3d4:	4293      	cmp	r3, r2
     3d6:	d1fc      	bne.n	3d2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3d8:	4a1d      	ldr	r2, [pc, #116]	; (450 <Reset_Handler+0xc4>)
     3da:	21ff      	movs	r1, #255	; 0xff
     3dc:	4b1d      	ldr	r3, [pc, #116]	; (454 <Reset_Handler+0xc8>)
     3de:	438b      	bics	r3, r1
     3e0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     3e2:	39fd      	subs	r1, #253	; 0xfd
     3e4:	2390      	movs	r3, #144	; 0x90
     3e6:	005b      	lsls	r3, r3, #1
     3e8:	4a1b      	ldr	r2, [pc, #108]	; (458 <Reset_Handler+0xcc>)
     3ea:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     3ec:	4a1b      	ldr	r2, [pc, #108]	; (45c <Reset_Handler+0xd0>)
     3ee:	78d3      	ldrb	r3, [r2, #3]
     3f0:	2503      	movs	r5, #3
     3f2:	43ab      	bics	r3, r5
     3f4:	2402      	movs	r4, #2
     3f6:	4323      	orrs	r3, r4
     3f8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     3fa:	78d3      	ldrb	r3, [r2, #3]
     3fc:	270c      	movs	r7, #12
     3fe:	43bb      	bics	r3, r7
     400:	2608      	movs	r6, #8
     402:	4333      	orrs	r3, r6
     404:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     406:	4b16      	ldr	r3, [pc, #88]	; (460 <Reset_Handler+0xd4>)
     408:	7b98      	ldrb	r0, [r3, #14]
     40a:	2230      	movs	r2, #48	; 0x30
     40c:	4390      	bics	r0, r2
     40e:	2220      	movs	r2, #32
     410:	4310      	orrs	r0, r2
     412:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     414:	7b99      	ldrb	r1, [r3, #14]
     416:	43b9      	bics	r1, r7
     418:	4331      	orrs	r1, r6
     41a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     41c:	7b9a      	ldrb	r2, [r3, #14]
     41e:	43aa      	bics	r2, r5
     420:	4322      	orrs	r2, r4
     422:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     424:	4a0f      	ldr	r2, [pc, #60]	; (464 <Reset_Handler+0xd8>)
     426:	6853      	ldr	r3, [r2, #4]
     428:	2180      	movs	r1, #128	; 0x80
     42a:	430b      	orrs	r3, r1
     42c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     42e:	4b0e      	ldr	r3, [pc, #56]	; (468 <Reset_Handler+0xdc>)
     430:	4798      	blx	r3
        main();
     432:	4b0e      	ldr	r3, [pc, #56]	; (46c <Reset_Handler+0xe0>)
     434:	4798      	blx	r3
     436:	e7fe      	b.n	436 <Reset_Handler+0xaa>
     438:	00003ca8 	.word	0x00003ca8
     43c:	20000000 	.word	0x20000000
     440:	2000049c 	.word	0x2000049c
     444:	20000004 	.word	0x20000004
     448:	2000049c 	.word	0x2000049c
     44c:	20000a84 	.word	0x20000a84
     450:	e000ed00 	.word	0xe000ed00
     454:	00000000 	.word	0x00000000
     458:	41007000 	.word	0x41007000
     45c:	41005000 	.word	0x41005000
     460:	41004800 	.word	0x41004800
     464:	41004000 	.word	0x41004000
     468:	00003791 	.word	0x00003791
     46c:	00000479 	.word	0x00000479

00000470 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
     474:	4770      	bx	lr
	...

00000478 <main>:

#include <atmel_start.h>
#include "CDC_Class.h"
uint8_t	test[]="por que no funciona\n\r";
int main(void)
{
     478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char cmd;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     47a:	4b1b      	ldr	r3, [pc, #108]	; (4e8 <main+0x70>)
     47c:	4798      	blx	r3
	
	//delay_ms(2000);
	serial.Init();
     47e:	4c1b      	ldr	r4, [pc, #108]	; (4ec <main+0x74>)
     480:	0020      	movs	r0, r4
     482:	4b1b      	ldr	r3, [pc, #108]	; (4f0 <main+0x78>)
     484:	4798      	blx	r3
//	serial.write(test,sizeof(test));
	delay_ms(200);
     486:	20c8      	movs	r0, #200	; 0xc8
     488:	4b1a      	ldr	r3, [pc, #104]	; (4f4 <main+0x7c>)
     48a:	4798      	blx	r3
	serial.println("*** USB Interface Test ***");
     48c:	491a      	ldr	r1, [pc, #104]	; (4f8 <main+0x80>)
     48e:	0020      	movs	r0, r4
     490:	4b1a      	ldr	r3, [pc, #104]	; (4fc <main+0x84>)
     492:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     494:	4c15      	ldr	r4, [pc, #84]	; (4ec <main+0x74>)
     496:	4f1a      	ldr	r7, [pc, #104]	; (500 <main+0x88>)
     498:	491a      	ldr	r1, [pc, #104]	; (504 <main+0x8c>)
     49a:	0020      	movs	r0, r4
     49c:	47b8      	blx	r7
     49e:	491a      	ldr	r1, [pc, #104]	; (508 <main+0x90>)
     4a0:	0020      	movs	r0, r4
     4a2:	47b8      	blx	r7
     4a4:	4919      	ldr	r1, [pc, #100]	; (50c <main+0x94>)
     4a6:	0020      	movs	r0, r4
     4a8:	47b8      	blx	r7
     4aa:	4919      	ldr	r1, [pc, #100]	; (510 <main+0x98>)
     4ac:	0020      	movs	r0, r4
     4ae:	47b8      	blx	r7
     4b0:	4918      	ldr	r1, [pc, #96]	; (514 <main+0x9c>)
     4b2:	0020      	movs	r0, r4
     4b4:	47b8      	blx	r7
     4b6:	4d18      	ldr	r5, [pc, #96]	; (518 <main+0xa0>)
     4b8:	0029      	movs	r1, r5
     4ba:	0020      	movs	r0, r4
     4bc:	47b8      	blx	r7
     4be:	4917      	ldr	r1, [pc, #92]	; (51c <main+0xa4>)
     4c0:	0020      	movs	r0, r4
     4c2:	47b8      	blx	r7
     4c4:	0029      	movs	r1, r5
     4c6:	0020      	movs	r0, r4
     4c8:	47b8      	blx	r7
	/* Replace with your application code */
	while (1) {
		serial<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<" ***"<<NEWLINE;
		serial<<"Type  a Command!"<<NEWLINE;
		cmd=(char)serial.read();
     4ca:	0020      	movs	r0, r4
     4cc:	4b14      	ldr	r3, [pc, #80]	; (520 <main+0xa8>)
     4ce:	4798      	blx	r3
     4d0:	0006      	movs	r6, r0
     4d2:	4914      	ldr	r1, [pc, #80]	; (524 <main+0xac>)
     4d4:	0020      	movs	r0, r4
     4d6:	47b8      	blx	r7
     4d8:	b2f1      	uxtb	r1, r6
     4da:	0020      	movs	r0, r4
     4dc:	4b12      	ldr	r3, [pc, #72]	; (528 <main+0xb0>)
     4de:	4798      	blx	r3
     4e0:	0029      	movs	r1, r5
     4e2:	0020      	movs	r0, r4
     4e4:	47b8      	blx	r7
     4e6:	e7d7      	b.n	498 <main+0x20>
     4e8:	000007ad 	.word	0x000007ad
     4ec:	200004bc 	.word	0x200004bc
     4f0:	0000032d 	.word	0x0000032d
     4f4:	000008dd 	.word	0x000008dd
     4f8:	00003b00 	.word	0x00003b00
     4fc:	00000599 	.word	0x00000599
     500:	00000555 	.word	0x00000555
     504:	00003b1c 	.word	0x00003b1c
     508:	00003b28 	.word	0x00003b28
     50c:	00003b34 	.word	0x00003b34
     510:	00003b3c 	.word	0x00003b3c
     514:	00003b48 	.word	0x00003b48
     518:	00003b50 	.word	0x00003b50
     51c:	00003b54 	.word	0x00003b54
     520:	00000219 	.word	0x00000219
     524:	00003b68 	.word	0x00003b68
     528:	00000579 	.word	0x00000579

0000052c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     52e:	0005      	movs	r5, r0
     530:	000f      	movs	r7, r1
     532:	1e16      	subs	r6, r2, #0
  size_t n = 0;
  while (size--) {
     534:	d00c      	beq.n	550 <_ZN5Print5writeEPKhj+0x24>
     536:	2400      	movs	r4, #0
    if (write(*buffer++)) n++;
     538:	5d39      	ldrb	r1, [r7, r4]
     53a:	682b      	ldr	r3, [r5, #0]
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	0028      	movs	r0, r5
     540:	4798      	blx	r3
     542:	2800      	cmp	r0, #0
     544:	d002      	beq.n	54c <_ZN5Print5writeEPKhj+0x20>
     546:	3401      	adds	r4, #1
  while (size--) {
     548:	42a6      	cmp	r6, r4
     54a:	d1f5      	bne.n	538 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     54c:	0020      	movs	r0, r4
     54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t n = 0;
     550:	0014      	movs	r4, r2
  return n;
     552:	e7fb      	b.n	54c <_ZN5Print5writeEPKhj+0x20>

00000554 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     554:	b570      	push	{r4, r5, r6, lr}
     556:	0005      	movs	r5, r0
     558:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
     55a:	d009      	beq.n	570 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
     55c:	0008      	movs	r0, r1
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <_ZN5Print5printEPKc+0x20>)
     560:	4798      	blx	r3
     562:	0002      	movs	r2, r0
     564:	682b      	ldr	r3, [r5, #0]
     566:	685b      	ldr	r3, [r3, #4]
     568:	0021      	movs	r1, r4
     56a:	0028      	movs	r0, r5
     56c:	4798      	blx	r3
  return write(str);
}
     56e:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     570:	2000      	movs	r0, #0
  return write(str);
     572:	e7fc      	b.n	56e <_ZN5Print5printEPKc+0x1a>
     574:	000038f1 	.word	0x000038f1

00000578 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     578:	b510      	push	{r4, lr}
  return write(c);
     57a:	6803      	ldr	r3, [r0, #0]
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	4798      	blx	r3
}
     580:	bd10      	pop	{r4, pc}
	...

00000584 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     584:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
     586:	6803      	ldr	r3, [r0, #0]
     588:	685b      	ldr	r3, [r3, #4]
     58a:	2202      	movs	r2, #2
     58c:	4901      	ldr	r1, [pc, #4]	; (594 <_ZN5Print7printlnEv+0x10>)
     58e:	4798      	blx	r3
  return write("\r\n");
}
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	00003b50 	.word	0x00003b50

00000598 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0005      	movs	r5, r0
  size_t n = print(c);
     59c:	4b03      	ldr	r3, [pc, #12]	; (5ac <_ZN5Print7printlnEPKc+0x14>)
     59e:	4798      	blx	r3
     5a0:	0004      	movs	r4, r0
  n += println();
     5a2:	0028      	movs	r0, r5
     5a4:	4b02      	ldr	r3, [pc, #8]	; (5b0 <_ZN5Print7printlnEPKc+0x18>)
     5a6:	4798      	blx	r3
     5a8:	1820      	adds	r0, r4, r0
  return n;
}
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	00000555 	.word	0x00000555
     5b0:	00000585 	.word	0x00000585

000005b4 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
     5b4:	4b03      	ldr	r3, [pc, #12]	; (5c4 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
     5b6:	2201      	movs	r2, #1
     5b8:	6819      	ldr	r1, [r3, #0]
     5ba:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->terminalStarted=false;
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	2200      	movs	r2, #0
     5c0:	705a      	strb	r2, [r3, #1]
}
     5c2:	4770      	bx	lr
     5c4:	2000051c 	.word	0x2000051c

000005c8 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <_ZN20SerialTerminal_ClassC1Ev+0x8>)
     5ca:	6018      	str	r0, [r3, #0]
} //SerialTerminal_Class
     5cc:	4770      	bx	lr
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	2000051c 	.word	0x2000051c

000005d4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
     5d4:	4770      	bx	lr
	...

000005d8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	0004      	movs	r4, r0
		timeout=false;
     5dc:	2300      	movs	r3, #0
     5de:	7083      	strb	r3, [r0, #2]
		terminalStarted=true;
     5e0:	3301      	adds	r3, #1
     5e2:	7043      	strb	r3, [r0, #1]
		usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
     5e4:	4d0c      	ldr	r5, [pc, #48]	; (618 <_ZN20SerialTerminal_Class6OnInitEv+0x40>)
     5e6:	2296      	movs	r2, #150	; 0x96
     5e8:	0092      	lsls	r2, r2, #2
     5ea:	490c      	ldr	r1, [pc, #48]	; (61c <_ZN20SerialTerminal_Class6OnInitEv+0x44>)
     5ec:	0028      	movs	r0, r5
     5ee:	4b0c      	ldr	r3, [pc, #48]	; (620 <_ZN20SerialTerminal_Class6OnInitEv+0x48>)
     5f0:	4798      	blx	r3
		usbTimer.Start();
     5f2:	0028      	movs	r0, r5
     5f4:	4b0b      	ldr	r3, [pc, #44]	; (624 <_ZN20SerialTerminal_Class6OnInitEv+0x4c>)
     5f6:	4798      	blx	r3
		while (!serial.IsEnabled()){
     5f8:	4d0b      	ldr	r5, [pc, #44]	; (628 <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
     5fa:	4e0c      	ldr	r6, [pc, #48]	; (62c <_ZN20SerialTerminal_Class6OnInitEv+0x54>)
     5fc:	0028      	movs	r0, r5
     5fe:	47b0      	blx	r6
     600:	2800      	cmp	r0, #0
     602:	d105      	bne.n	610 <_ZN20SerialTerminal_Class6OnInitEv+0x38>
			if (timeout)
     604:	78a3      	ldrb	r3, [r4, #2]
     606:	2b00      	cmp	r3, #0
     608:	d0f8      	beq.n	5fc <_ZN20SerialTerminal_Class6OnInitEv+0x24>
			{
				plugged=false;
     60a:	2300      	movs	r3, #0
     60c:	7023      	strb	r3, [r4, #0]
				return;
     60e:	e002      	b.n	616 <_ZN20SerialTerminal_Class6OnInitEv+0x3e>
			else
			{
			}
		}
		
		usbTimer.Stop();
     610:	4801      	ldr	r0, [pc, #4]	; (618 <_ZN20SerialTerminal_Class6OnInitEv+0x40>)
     612:	4b07      	ldr	r3, [pc, #28]	; (630 <_ZN20SerialTerminal_Class6OnInitEv+0x58>)
     614:	4798      	blx	r3
}
     616:	bd70      	pop	{r4, r5, r6, pc}
     618:	20000524 	.word	0x20000524
     61c:	000005b5 	.word	0x000005b5
     620:	00000751 	.word	0x00000751
     624:	00000711 	.word	0x00000711
     628:	200004bc 	.word	0x200004bc
     62c:	00000351 	.word	0x00000351
     630:	00000721 	.word	0x00000721

00000634 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
     634:	b510      	push	{r4, lr}
     636:	0004      	movs	r4, r0
	if (terminalStarted)
     638:	7843      	ldrb	r3, [r0, #1]
     63a:	2b00      	cmp	r3, #0
     63c:	d014      	beq.n	668 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x34>
	{
		if (plugged||serial.IsEnabled())
     63e:	7803      	ldrb	r3, [r0, #0]
     640:	2b00      	cmp	r3, #0
     642:	d007      	beq.n	654 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x20>
		{
			terminalStarted=usbTimer.Start()==0;
     644:	480a      	ldr	r0, [pc, #40]	; (670 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x3c>)
     646:	4b0b      	ldr	r3, [pc, #44]	; (674 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x40>)
     648:	4798      	blx	r3
     64a:	4243      	negs	r3, r0
     64c:	4158      	adcs	r0, r3
     64e:	b2c0      	uxtb	r0, r0
     650:	7060      	strb	r0, [r4, #1]
     652:	e006      	b.n	662 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
		if (plugged||serial.IsEnabled())
     654:	4808      	ldr	r0, [pc, #32]	; (678 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x44>)
     656:	4b09      	ldr	r3, [pc, #36]	; (67c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x48>)
     658:	4798      	blx	r3
     65a:	2800      	cmp	r0, #0
     65c:	d1f2      	bne.n	644 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x10>
		}
		else
		{
			terminalStarted=false;
     65e:	2300      	movs	r3, #0
     660:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
     662:	7860      	ldrb	r0, [r4, #1]
     664:	b2c0      	uxtb	r0, r0
}
     666:	bd10      	pop	{r4, pc}
		return	terminalStarted;
     668:	7840      	ldrb	r0, [r0, #1]
     66a:	b2c0      	uxtb	r0, r0
     66c:	e7fb      	b.n	666 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x32>
     66e:	46c0      	nop			; (mov r8, r8)
     670:	20000524 	.word	0x20000524
     674:	00000711 	.word	0x00000711
     678:	200004bc 	.word	0x200004bc
     67c:	00000351 	.word	0x00000351

00000680 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
     680:	b570      	push	{r4, r5, r6, lr}
     682:	0004      	movs	r4, r0
     684:	000d      	movs	r5, r1
	if (terminalStarted)
     686:	7843      	ldrb	r3, [r0, #1]
     688:	2b00      	cmp	r3, #0
     68a:	d022      	beq.n	6d2 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x52>
	{
		if (plugged||serial.IsEnabled())
     68c:	7803      	ldrb	r3, [r0, #0]
     68e:	2b00      	cmp	r3, #0
     690:	d015      	beq.n	6be <_ZN20SerialTerminal_Class13CheckTerminalEm+0x3e>
		{
			usbTimer.Stop();
     692:	4e11      	ldr	r6, [pc, #68]	; (6d8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x58>)
     694:	0030      	movs	r0, r6
     696:	4b11      	ldr	r3, [pc, #68]	; (6dc <_ZN20SerialTerminal_Class13CheckTerminalEm+0x5c>)
     698:	4798      	blx	r3
			usbTimer.Remove_task();
     69a:	0030      	movs	r0, r6
     69c:	4b10      	ldr	r3, [pc, #64]	; (6e0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x60>)
     69e:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
     6a0:	00aa      	lsls	r2, r5, #2
     6a2:	1952      	adds	r2, r2, r5
     6a4:	0052      	lsls	r2, r2, #1
     6a6:	490f      	ldr	r1, [pc, #60]	; (6e4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x64>)
     6a8:	0030      	movs	r0, r6
     6aa:	4b0f      	ldr	r3, [pc, #60]	; (6e8 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x68>)
     6ac:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
     6ae:	0030      	movs	r0, r6
     6b0:	4b0e      	ldr	r3, [pc, #56]	; (6ec <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>)
     6b2:	4798      	blx	r3
     6b4:	4243      	negs	r3, r0
     6b6:	4158      	adcs	r0, r3
     6b8:	b2c0      	uxtb	r0, r0
     6ba:	7060      	strb	r0, [r4, #1]
     6bc:	e006      	b.n	6cc <_ZN20SerialTerminal_Class13CheckTerminalEm+0x4c>
		if (plugged||serial.IsEnabled())
     6be:	480c      	ldr	r0, [pc, #48]	; (6f0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x70>)
     6c0:	4b0c      	ldr	r3, [pc, #48]	; (6f4 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>)
     6c2:	4798      	blx	r3
     6c4:	2800      	cmp	r0, #0
     6c6:	d1e4      	bne.n	692 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x12>
		}
		else
		{
			terminalStarted=false;
     6c8:	2300      	movs	r3, #0
     6ca:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
     6cc:	7860      	ldrb	r0, [r4, #1]
     6ce:	b2c0      	uxtb	r0, r0
     6d0:	bd70      	pop	{r4, r5, r6, pc}
		return	terminalStarted;
     6d2:	7840      	ldrb	r0, [r0, #1]
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	e7fb      	b.n	6d0 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x50>
     6d8:	20000524 	.word	0x20000524
     6dc:	00000721 	.word	0x00000721
     6e0:	00000761 	.word	0x00000761
     6e4:	000005b5 	.word	0x000005b5
     6e8:	00000751 	.word	0x00000751
     6ec:	00000711 	.word	0x00000711
     6f0:	200004bc 	.word	0x200004bc
     6f4:	00000351 	.word	0x00000351

000006f8 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
     6f8:	2300      	movs	r3, #0
     6fa:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
     6fc:	4770      	bx	lr
	...

00000700 <_ZL7task_cbPK10timer_task>:
	ptrTimerClass->setTimeout();
     700:	4b02      	ldr	r3, [pc, #8]	; (70c <_ZL7task_cbPK10timer_task+0xc>)
     702:	681b      	ldr	r3, [r3, #0]
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
	timeout=1;
     704:	2201      	movs	r2, #1
     706:	705a      	strb	r2, [r3, #1]
}
     708:	4770      	bx	lr
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	20000520 	.word	0x20000520

00000710 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
     710:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
     712:	6880      	ldr	r0, [r0, #8]
     714:	4b01      	ldr	r3, [pc, #4]	; (71c <_ZN17TimerSerial_Class5StartEv+0xc>)
     716:	4798      	blx	r3
}
     718:	bd10      	pop	{r4, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	00000a3d 	.word	0x00000a3d

00000720 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
     720:	b510      	push	{r4, lr}
     722:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
     724:	6880      	ldr	r0, [r0, #8]
     726:	4b02      	ldr	r3, [pc, #8]	; (730 <_ZN17TimerSerial_Class4StopEv+0x10>)
     728:	4798      	blx	r3
	timeout=0;
     72a:	2300      	movs	r3, #0
     72c:	7063      	strb	r3, [r4, #1]
}
     72e:	bd10      	pop	{r4, pc}
     730:	00000a79 	.word	0x00000a79

00000734 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
     734:	b510      	push	{r4, lr}
	int32_t	status;

	task.interval = interval;
     736:	61c2      	str	r2, [r0, #28]
	task.cb       = (timer_cb_t)func;
     738:	6201      	str	r1, [r0, #32]
	task.mode     = modeTask;
     73a:	2224      	movs	r2, #36	; 0x24
     73c:	5483      	strb	r3, [r0, r2]
	status=timer_add_task(timer_descr, &task);
     73e:	0001      	movs	r1, r0
     740:	3114      	adds	r1, #20
     742:	6880      	ldr	r0, [r0, #8]
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x18>)
     746:	4798      	blx	r3
	
	return status;
}
     748:	bd10      	pop	{r4, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	00000ab5 	.word	0x00000ab5

00000750 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
     750:	b510      	push	{r4, lr}
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     752:	2300      	movs	r3, #0
     754:	4c01      	ldr	r4, [pc, #4]	; (75c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0xc>)
     756:	47a0      	blx	r4
	return status;
}
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	00000735 	.word	0x00000735

00000760 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
     760:	b510      	push	{r4, lr}
	timer_remove_task(timer_descr, &task);
     762:	0001      	movs	r1, r0
     764:	3114      	adds	r1, #20
     766:	6880      	ldr	r0, [r0, #8]
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <_ZN17TimerSerial_Class11Remove_taskEv+0x10>)
     76a:	4798      	blx	r3
}
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00000b61 	.word	0x00000b61

00000774 <_GLOBAL__sub_I_ptrTimerClass>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_0);
     774:	b510      	push	{r4, lr}
	timer_descr=descr;
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <_GLOBAL__sub_I_ptrTimerClass+0x20>)
     778:	4a07      	ldr	r2, [pc, #28]	; (798 <_GLOBAL__sub_I_ptrTimerClass+0x24>)
     77a:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
     77c:	1d18      	adds	r0, r3, #4
     77e:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
     780:	2280      	movs	r2, #128	; 0x80
     782:	00d2      	lsls	r2, r2, #3
     784:	615a      	str	r2, [r3, #20]
	task.cb=task_cb;
     786:	4a05      	ldr	r2, [pc, #20]	; (79c <_GLOBAL__sub_I_ptrTimerClass+0x28>)
     788:	625a      	str	r2, [r3, #36]	; 0x24
TimerSerial_Class usbTimer(&TIMER_0);
     78a:	4a05      	ldr	r2, [pc, #20]	; (7a0 <_GLOBAL__sub_I_ptrTimerClass+0x2c>)
     78c:	4905      	ldr	r1, [pc, #20]	; (7a4 <_GLOBAL__sub_I_ptrTimerClass+0x30>)
     78e:	4b06      	ldr	r3, [pc, #24]	; (7a8 <_GLOBAL__sub_I_ptrTimerClass+0x34>)
     790:	4798      	blx	r3
     792:	bd10      	pop	{r4, pc}
     794:	20000520 	.word	0x20000520
     798:	20000a44 	.word	0x20000a44
     79c:	00000701 	.word	0x00000701
     7a0:	20000000 	.word	0x20000000
     7a4:	000006f9 	.word	0x000006f9
     7a8:	00003659 	.word	0x00003659

000007ac <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     7ac:	b510      	push	{r4, lr}
	system_init();
     7ae:	4b02      	ldr	r3, [pc, #8]	; (7b8 <atmel_start_init+0xc>)
     7b0:	4798      	blx	r3
	usb_init();
     7b2:	4b02      	ldr	r3, [pc, #8]	; (7bc <atmel_start_init+0x10>)
     7b4:	4798      	blx	r3
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	0000088d 	.word	0x0000088d
     7bc:	00003631 	.word	0x00003631

000007c0 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7c2:	46c6      	mov	lr, r8
     7c4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c6:	24c0      	movs	r4, #192	; 0xc0
     7c8:	05e4      	lsls	r4, r4, #23
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0452      	lsls	r2, r2, #17
     7ce:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d0:	4b1a      	ldr	r3, [pc, #104]	; (83c <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     7d2:	2780      	movs	r7, #128	; 0x80
     7d4:	05ff      	lsls	r7, r7, #23
     7d6:	629f      	str	r7, [r3, #40]	; 0x28
     7d8:	4919      	ldr	r1, [pc, #100]	; (840 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     7da:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7dc:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7de:	2058      	movs	r0, #88	; 0x58
     7e0:	5c19      	ldrb	r1, [r3, r0]
     7e2:	2204      	movs	r2, #4
     7e4:	4690      	mov	r8, r2
     7e6:	4391      	bics	r1, r2
     7e8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ea:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ec:	2601      	movs	r6, #1
     7ee:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f0:	2501      	movs	r5, #1
     7f2:	4329      	orrs	r1, r5
     7f4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7f8:	381c      	subs	r0, #28
     7fa:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7fc:	320b      	adds	r2, #11
     7fe:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     800:	3a09      	subs	r2, #9
     802:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     804:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     806:	2180      	movs	r1, #128	; 0x80
     808:	0489      	lsls	r1, r1, #18
     80a:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     80c:	629f      	str	r7, [r3, #40]	; 0x28
     80e:	4f0d      	ldr	r7, [pc, #52]	; (844 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     810:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     812:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     814:	2159      	movs	r1, #89	; 0x59
     816:	5c5c      	ldrb	r4, [r3, r1]
     818:	4642      	mov	r2, r8
     81a:	4394      	bics	r4, r2
     81c:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     820:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     822:	432a      	orrs	r2, r5
     824:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     826:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     828:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     82a:	394a      	subs	r1, #74	; 0x4a
     82c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     82e:	3151      	adds	r1, #81	; 0x51
     830:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     832:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     834:	bc04      	pop	{r2}
     836:	4690      	mov	r8, r2
     838:	bdf0      	pop	{r4, r5, r6, r7, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	41004400 	.word	0x41004400
     840:	c0000100 	.word	0xc0000100
     844:	c0000200 	.word	0xc0000200

00000848 <USB_DEVICE_INSTANCE_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     84a:	69da      	ldr	r2, [r3, #28]
     84c:	2120      	movs	r1, #32
     84e:	430a      	orrs	r2, r1
     850:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     852:	695a      	ldr	r2, [r3, #20]
     854:	3120      	adds	r1, #32
     856:	430a      	orrs	r2, r1
     858:	615a      	str	r2, [r3, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     85a:	4a03      	ldr	r2, [pc, #12]	; (868 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     85c:	4b03      	ldr	r3, [pc, #12]	; (86c <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     85e:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     860:	4770      	bx	lr
     862:	46c0      	nop			; (mov r8, r8)
     864:	40000400 	.word	0x40000400
     868:	00004106 	.word	0x00004106
     86c:	40000c00 	.word	0x40000c00

00000870 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     870:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     872:	4b03      	ldr	r3, [pc, #12]	; (880 <USB_DEVICE_INSTANCE_init+0x10>)
     874:	4798      	blx	r3
	usb_d_init();
     876:	4b03      	ldr	r3, [pc, #12]	; (884 <USB_DEVICE_INSTANCE_init+0x14>)
     878:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     87a:	4b03      	ldr	r3, [pc, #12]	; (888 <USB_DEVICE_INSTANCE_init+0x18>)
     87c:	4798      	blx	r3
}
     87e:	bd10      	pop	{r4, pc}
     880:	00000849 	.word	0x00000849
     884:	00000e75 	.word	0x00000e75
     888:	000007c1 	.word	0x000007c1

0000088c <system_init>:

void system_init(void)
{
     88c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     88e:	4b0a      	ldr	r3, [pc, #40]	; (8b8 <system_init+0x2c>)
     890:	4798      	blx	r3
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     892:	4a0a      	ldr	r2, [pc, #40]	; (8bc <system_init+0x30>)
     894:	6a11      	ldr	r1, [r2, #32]
     896:	2380      	movs	r3, #128	; 0x80
     898:	011b      	lsls	r3, r3, #4
     89a:	430b      	orrs	r3, r1
     89c:	6213      	str	r3, [r2, #32]
     89e:	4a08      	ldr	r2, [pc, #32]	; (8c0 <system_init+0x34>)
     8a0:	4b08      	ldr	r3, [pc, #32]	; (8c4 <system_init+0x38>)
     8a2:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     8a4:	4b08      	ldr	r3, [pc, #32]	; (8c8 <system_init+0x3c>)
     8a6:	4798      	blx	r3
     8a8:	0002      	movs	r2, r0
     8aa:	4908      	ldr	r1, [pc, #32]	; (8cc <system_init+0x40>)
     8ac:	4808      	ldr	r0, [pc, #32]	; (8d0 <system_init+0x44>)
     8ae:	4b09      	ldr	r3, [pc, #36]	; (8d4 <system_init+0x48>)
     8b0:	4798      	blx	r3
	init_mcu();

	TIMER_0_init();

	USB_DEVICE_INSTANCE_init();
     8b2:	4b09      	ldr	r3, [pc, #36]	; (8d8 <system_init+0x4c>)
     8b4:	4798      	blx	r3
}
     8b6:	bd10      	pop	{r4, pc}
     8b8:	00001329 	.word	0x00001329
     8bc:	40000400 	.word	0x40000400
     8c0:	0000431b 	.word	0x0000431b
     8c4:	40000c00 	.word	0x40000c00
     8c8:	00001653 	.word	0x00001653
     8cc:	42002c00 	.word	0x42002c00
     8d0:	20000a44 	.word	0x20000a44
     8d4:	000009f9 	.word	0x000009f9
     8d8:	00000871 	.word	0x00000871

000008dc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     8dc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     8de:	4b04      	ldr	r3, [pc, #16]	; (8f0 <delay_ms+0x14>)
     8e0:	681c      	ldr	r4, [r3, #0]
     8e2:	4b04      	ldr	r3, [pc, #16]	; (8f4 <delay_ms+0x18>)
     8e4:	4798      	blx	r3
     8e6:	0001      	movs	r1, r0
     8e8:	0020      	movs	r0, r4
     8ea:	4b03      	ldr	r3, [pc, #12]	; (8f8 <delay_ms+0x1c>)
     8ec:	4798      	blx	r3
}
     8ee:	bd10      	pop	{r4, pc}
     8f0:	20000550 	.word	0x20000550
     8f4:	00001305 	.word	0x00001305
     8f8:	00001321 	.word	0x00001321

000008fc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8fe:	46ce      	mov	lr, r9
     900:	4647      	mov	r7, r8
     902:	b580      	push	{r7, lr}
     904:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     906:	6803      	ldr	r3, [r0, #0]
     908:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     90a:	2b00      	cmp	r3, #0
     90c:	d005      	beq.n	91a <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     90e:	688e      	ldr	r6, [r1, #8]
     910:	001c      	movs	r4, r3
     912:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     914:	2701      	movs	r7, #1
     916:	1abf      	subs	r7, r7, r2
     918:	e00d      	b.n	936 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     91a:	4b12      	ldr	r3, [pc, #72]	; (964 <timer_add_timer_task+0x68>)
     91c:	4798      	blx	r3
		return;
     91e:	e018      	b.n	952 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     920:	18fb      	adds	r3, r7, r3
     922:	68a0      	ldr	r0, [r4, #8]
     924:	4680      	mov	r8, r0
     926:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     928:	42b3      	cmp	r3, r6
     92a:	d20c      	bcs.n	946 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     92c:	6823      	ldr	r3, [r4, #0]
     92e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     930:	2b00      	cmp	r3, #0
     932:	d00b      	beq.n	94c <timer_add_timer_task+0x50>
     934:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     936:	6863      	ldr	r3, [r4, #4]
     938:	4293      	cmp	r3, r2
     93a:	d8f1      	bhi.n	920 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     93c:	68a0      	ldr	r0, [r4, #8]
     93e:	4680      	mov	r8, r0
     940:	4443      	add	r3, r8
     942:	1a9b      	subs	r3, r3, r2
     944:	e7f0      	b.n	928 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     946:	45a4      	cmp	ip, r4
     948:	d007      	beq.n	95a <timer_add_timer_task+0x5e>
     94a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     94c:	0020      	movs	r0, r4
     94e:	4b06      	ldr	r3, [pc, #24]	; (968 <timer_add_timer_task+0x6c>)
     950:	4798      	blx	r3
	}
}
     952:	bc0c      	pop	{r2, r3}
     954:	4690      	mov	r8, r2
     956:	4699      	mov	r9, r3
     958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     95a:	4648      	mov	r0, r9
     95c:	4b01      	ldr	r3, [pc, #4]	; (964 <timer_add_timer_task+0x68>)
     95e:	4798      	blx	r3
     960:	e7f7      	b.n	952 <timer_add_timer_task+0x56>
     962:	46c0      	nop			; (mov r8, r8)
     964:	00001225 	.word	0x00001225
     968:	00001251 	.word	0x00001251

0000096c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	46c6      	mov	lr, r8
     970:	b500      	push	{lr}
     972:	b082      	sub	sp, #8
     974:	0007      	movs	r7, r0
	return (void *)list->head;
     976:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     978:	6903      	ldr	r3, [r0, #16]
     97a:	3301      	adds	r3, #1
     97c:	4698      	mov	r8, r3
     97e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     980:	7e03      	ldrb	r3, [r0, #24]
     982:	07db      	lsls	r3, r3, #31
     984:	d411      	bmi.n	9aa <timer_process_counted+0x3e>
     986:	7e03      	ldrb	r3, [r0, #24]
     988:	079b      	lsls	r3, r3, #30
     98a:	d40e      	bmi.n	9aa <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     98c:	2c00      	cmp	r4, #0
     98e:	d010      	beq.n	9b2 <timer_process_counted+0x46>
     990:	4643      	mov	r3, r8
     992:	6862      	ldr	r2, [r4, #4]
     994:	1a9b      	subs	r3, r3, r2
     996:	68a2      	ldr	r2, [r4, #8]
     998:	4293      	cmp	r3, r2
     99a:	d30a      	bcc.n	9b2 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     99c:	2314      	movs	r3, #20
     99e:	469c      	mov	ip, r3
     9a0:	4484      	add	ip, r0
     9a2:	4663      	mov	r3, ip
     9a4:	9301      	str	r3, [sp, #4]
     9a6:	4e12      	ldr	r6, [pc, #72]	; (9f0 <timer_process_counted+0x84>)
     9a8:	e014      	b.n	9d4 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     9aa:	7e3b      	ldrb	r3, [r7, #24]
     9ac:	2202      	movs	r2, #2
     9ae:	4313      	orrs	r3, r2
     9b0:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     9b2:	b002      	add	sp, #8
     9b4:	bc04      	pop	{r2}
     9b6:	4690      	mov	r8, r2
     9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ba:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     9bc:	68e3      	ldr	r3, [r4, #12]
     9be:	0020      	movs	r0, r4
     9c0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     9c2:	2d00      	cmp	r5, #0
     9c4:	d0f5      	beq.n	9b2 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     9c6:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     9c8:	4643      	mov	r3, r8
     9ca:	686a      	ldr	r2, [r5, #4]
     9cc:	1a9b      	subs	r3, r3, r2
     9ce:	68aa      	ldr	r2, [r5, #8]
     9d0:	4293      	cmp	r3, r2
     9d2:	d3ee      	bcc.n	9b2 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     9d4:	9801      	ldr	r0, [sp, #4]
     9d6:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     9d8:	7c23      	ldrb	r3, [r4, #16]
     9da:	2b01      	cmp	r3, #1
     9dc:	d1ed      	bne.n	9ba <timer_process_counted+0x4e>
			tmp->time_label = time;
     9de:	4643      	mov	r3, r8
     9e0:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9e2:	4642      	mov	r2, r8
     9e4:	0021      	movs	r1, r4
     9e6:	9801      	ldr	r0, [sp, #4]
     9e8:	4b02      	ldr	r3, [pc, #8]	; (9f4 <timer_process_counted+0x88>)
     9ea:	4798      	blx	r3
     9ec:	e7e5      	b.n	9ba <timer_process_counted+0x4e>
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	00001299 	.word	0x00001299
     9f4:	000008fd 	.word	0x000008fd

000009f8 <timer_init>:
{
     9f8:	b570      	push	{r4, r5, r6, lr}
     9fa:	0005      	movs	r5, r0
     9fc:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     9fe:	2800      	cmp	r0, #0
     a00:	d011      	beq.n	a26 <timer_init+0x2e>
     a02:	0008      	movs	r0, r1
     a04:	1e43      	subs	r3, r0, #1
     a06:	4198      	sbcs	r0, r3
     a08:	b2c0      	uxtb	r0, r0
     a0a:	223b      	movs	r2, #59	; 0x3b
     a0c:	4907      	ldr	r1, [pc, #28]	; (a2c <timer_init+0x34>)
     a0e:	4b08      	ldr	r3, [pc, #32]	; (a30 <timer_init+0x38>)
     a10:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     a12:	0021      	movs	r1, r4
     a14:	0028      	movs	r0, r5
     a16:	4b07      	ldr	r3, [pc, #28]	; (a34 <timer_init+0x3c>)
     a18:	4798      	blx	r3
	descr->time                           = 0;
     a1a:	2300      	movs	r3, #0
     a1c:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     a1e:	4b06      	ldr	r3, [pc, #24]	; (a38 <timer_init+0x40>)
     a20:	602b      	str	r3, [r5, #0]
}
     a22:	2000      	movs	r0, #0
     a24:	bd70      	pop	{r4, r5, r6, pc}
     a26:	2000      	movs	r0, #0
     a28:	e7ef      	b.n	a0a <timer_init+0x12>
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	00003b88 	.word	0x00003b88
     a30:	000011f9 	.word	0x000011f9
     a34:	0000151d 	.word	0x0000151d
     a38:	0000096d 	.word	0x0000096d

00000a3c <timer_start>:
{
     a3c:	b510      	push	{r4, lr}
     a3e:	0004      	movs	r4, r0
	ASSERT(descr);
     a40:	1e43      	subs	r3, r0, #1
     a42:	4198      	sbcs	r0, r3
     a44:	b2c0      	uxtb	r0, r0
     a46:	2253      	movs	r2, #83	; 0x53
     a48:	4907      	ldr	r1, [pc, #28]	; (a68 <timer_start+0x2c>)
     a4a:	4b08      	ldr	r3, [pc, #32]	; (a6c <timer_start+0x30>)
     a4c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     a4e:	0020      	movs	r0, r4
     a50:	4b07      	ldr	r3, [pc, #28]	; (a70 <timer_start+0x34>)
     a52:	4798      	blx	r3
     a54:	2800      	cmp	r0, #0
     a56:	d104      	bne.n	a62 <timer_start+0x26>
	_timer_start(&descr->device);
     a58:	0020      	movs	r0, r4
     a5a:	4b06      	ldr	r3, [pc, #24]	; (a74 <timer_start+0x38>)
     a5c:	4798      	blx	r3
	return ERR_NONE;
     a5e:	2000      	movs	r0, #0
}
     a60:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a62:	2011      	movs	r0, #17
     a64:	4240      	negs	r0, r0
     a66:	e7fb      	b.n	a60 <timer_start+0x24>
     a68:	00003b88 	.word	0x00003b88
     a6c:	000011f9 	.word	0x000011f9
     a70:	00001649 	.word	0x00001649
     a74:	00001631 	.word	0x00001631

00000a78 <timer_stop>:
{
     a78:	b510      	push	{r4, lr}
     a7a:	0004      	movs	r4, r0
	ASSERT(descr);
     a7c:	1e43      	subs	r3, r0, #1
     a7e:	4198      	sbcs	r0, r3
     a80:	b2c0      	uxtb	r0, r0
     a82:	2261      	movs	r2, #97	; 0x61
     a84:	4907      	ldr	r1, [pc, #28]	; (aa4 <timer_stop+0x2c>)
     a86:	4b08      	ldr	r3, [pc, #32]	; (aa8 <timer_stop+0x30>)
     a88:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
     a8a:	0020      	movs	r0, r4
     a8c:	4b07      	ldr	r3, [pc, #28]	; (aac <timer_stop+0x34>)
     a8e:	4798      	blx	r3
     a90:	2800      	cmp	r0, #0
     a92:	d004      	beq.n	a9e <timer_stop+0x26>
	_timer_stop(&descr->device);
     a94:	0020      	movs	r0, r4
     a96:	4b06      	ldr	r3, [pc, #24]	; (ab0 <timer_stop+0x38>)
     a98:	4798      	blx	r3
	return ERR_NONE;
     a9a:	2000      	movs	r0, #0
}
     a9c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a9e:	2011      	movs	r0, #17
     aa0:	4240      	negs	r0, r0
     aa2:	e7fb      	b.n	a9c <timer_stop+0x24>
     aa4:	00003b88 	.word	0x00003b88
     aa8:	000011f9 	.word	0x000011f9
     aac:	00001649 	.word	0x00001649
     ab0:	0000163d 	.word	0x0000163d

00000ab4 <timer_add_task>:
{
     ab4:	b570      	push	{r4, r5, r6, lr}
     ab6:	b082      	sub	sp, #8
     ab8:	0004      	movs	r4, r0
     aba:	000d      	movs	r5, r1
	ASSERT(descr && task);
     abc:	2800      	cmp	r0, #0
     abe:	d024      	beq.n	b0a <timer_add_task+0x56>
     ac0:	0008      	movs	r0, r1
     ac2:	1e43      	subs	r3, r0, #1
     ac4:	4198      	sbcs	r0, r3
     ac6:	b2c0      	uxtb	r0, r0
     ac8:	227a      	movs	r2, #122	; 0x7a
     aca:	491e      	ldr	r1, [pc, #120]	; (b44 <timer_add_task+0x90>)
     acc:	4b1e      	ldr	r3, [pc, #120]	; (b48 <timer_add_task+0x94>)
     ace:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     ad0:	7e23      	ldrb	r3, [r4, #24]
     ad2:	2201      	movs	r2, #1
     ad4:	4313      	orrs	r3, r2
     ad6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     ad8:	0026      	movs	r6, r4
     ada:	3614      	adds	r6, #20
     adc:	0029      	movs	r1, r5
     ade:	0030      	movs	r0, r6
     ae0:	4b1a      	ldr	r3, [pc, #104]	; (b4c <timer_add_task+0x98>)
     ae2:	4798      	blx	r3
     ae4:	2800      	cmp	r0, #0
     ae6:	d112      	bne.n	b0e <timer_add_task+0x5a>
	task->time_label = descr->time;
     ae8:	6923      	ldr	r3, [r4, #16]
     aea:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     aec:	6922      	ldr	r2, [r4, #16]
     aee:	0029      	movs	r1, r5
     af0:	0030      	movs	r0, r6
     af2:	4b17      	ldr	r3, [pc, #92]	; (b50 <timer_add_task+0x9c>)
     af4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     af6:	7e23      	ldrb	r3, [r4, #24]
     af8:	2201      	movs	r2, #1
     afa:	4393      	bics	r3, r2
     afc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     afe:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     b00:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     b02:	079b      	lsls	r3, r3, #30
     b04:	d40f      	bmi.n	b26 <timer_add_task+0x72>
}
     b06:	b002      	add	sp, #8
     b08:	bd70      	pop	{r4, r5, r6, pc}
     b0a:	2000      	movs	r0, #0
     b0c:	e7dc      	b.n	ac8 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     b0e:	7e23      	ldrb	r3, [r4, #24]
     b10:	2201      	movs	r2, #1
     b12:	4393      	bics	r3, r2
     b14:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     b16:	327e      	adds	r2, #126	; 0x7e
     b18:	490a      	ldr	r1, [pc, #40]	; (b44 <timer_add_task+0x90>)
     b1a:	2000      	movs	r0, #0
     b1c:	4b0a      	ldr	r3, [pc, #40]	; (b48 <timer_add_task+0x94>)
     b1e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     b20:	2012      	movs	r0, #18
     b22:	4240      	negs	r0, r0
     b24:	e7ef      	b.n	b06 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     b26:	a801      	add	r0, sp, #4
     b28:	4b0a      	ldr	r3, [pc, #40]	; (b54 <timer_add_task+0xa0>)
     b2a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     b2c:	7e23      	ldrb	r3, [r4, #24]
     b2e:	2202      	movs	r2, #2
     b30:	4393      	bics	r3, r2
     b32:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     b34:	0020      	movs	r0, r4
     b36:	4b08      	ldr	r3, [pc, #32]	; (b58 <timer_add_task+0xa4>)
     b38:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     b3a:	a801      	add	r0, sp, #4
     b3c:	4b07      	ldr	r3, [pc, #28]	; (b5c <timer_add_task+0xa8>)
     b3e:	4798      	blx	r3
	return ERR_NONE;
     b40:	2000      	movs	r0, #0
     b42:	e7e0      	b.n	b06 <timer_add_task+0x52>
     b44:	00003b88 	.word	0x00003b88
     b48:	000011f9 	.word	0x000011f9
     b4c:	00001201 	.word	0x00001201
     b50:	000008fd 	.word	0x000008fd
     b54:	0000363d 	.word	0x0000363d
     b58:	00001659 	.word	0x00001659
     b5c:	0000364b 	.word	0x0000364b

00000b60 <timer_remove_task>:
{
     b60:	b570      	push	{r4, r5, r6, lr}
     b62:	b082      	sub	sp, #8
     b64:	0004      	movs	r4, r0
     b66:	000d      	movs	r5, r1
	ASSERT(descr && task);
     b68:	2800      	cmp	r0, #0
     b6a:	d021      	beq.n	bb0 <timer_remove_task+0x50>
     b6c:	0008      	movs	r0, r1
     b6e:	1e43      	subs	r3, r0, #1
     b70:	4198      	sbcs	r0, r3
     b72:	b2c0      	uxtb	r0, r0
     b74:	2295      	movs	r2, #149	; 0x95
     b76:	491c      	ldr	r1, [pc, #112]	; (be8 <timer_remove_task+0x88>)
     b78:	4b1c      	ldr	r3, [pc, #112]	; (bec <timer_remove_task+0x8c>)
     b7a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     b7c:	7e23      	ldrb	r3, [r4, #24]
     b7e:	2201      	movs	r2, #1
     b80:	4313      	orrs	r3, r2
     b82:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
     b84:	0026      	movs	r6, r4
     b86:	3614      	adds	r6, #20
     b88:	0029      	movs	r1, r5
     b8a:	0030      	movs	r0, r6
     b8c:	4b18      	ldr	r3, [pc, #96]	; (bf0 <timer_remove_task+0x90>)
     b8e:	4798      	blx	r3
     b90:	2800      	cmp	r0, #0
     b92:	d00f      	beq.n	bb4 <timer_remove_task+0x54>
	list_delete_element(&descr->tasks, task);
     b94:	0029      	movs	r1, r5
     b96:	0030      	movs	r0, r6
     b98:	4b16      	ldr	r3, [pc, #88]	; (bf4 <timer_remove_task+0x94>)
     b9a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     b9c:	7e23      	ldrb	r3, [r4, #24]
     b9e:	2201      	movs	r2, #1
     ba0:	4393      	bics	r3, r2
     ba2:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     ba4:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     ba6:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     ba8:	079b      	lsls	r3, r3, #30
     baa:	d40e      	bmi.n	bca <timer_remove_task+0x6a>
}
     bac:	b002      	add	sp, #8
     bae:	bd70      	pop	{r4, r5, r6, pc}
     bb0:	2000      	movs	r0, #0
     bb2:	e7df      	b.n	b74 <timer_remove_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     bb4:	7e23      	ldrb	r3, [r4, #24]
     bb6:	2201      	movs	r2, #1
     bb8:	4393      	bics	r3, r2
     bba:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     bbc:	3299      	adds	r2, #153	; 0x99
     bbe:	490a      	ldr	r1, [pc, #40]	; (be8 <timer_remove_task+0x88>)
     bc0:	4b0a      	ldr	r3, [pc, #40]	; (bec <timer_remove_task+0x8c>)
     bc2:	4798      	blx	r3
		return ERR_NOT_FOUND;
     bc4:	200a      	movs	r0, #10
     bc6:	4240      	negs	r0, r0
     bc8:	e7f0      	b.n	bac <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
     bca:	a801      	add	r0, sp, #4
     bcc:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <timer_remove_task+0x98>)
     bce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     bd0:	7e23      	ldrb	r3, [r4, #24]
     bd2:	2202      	movs	r2, #2
     bd4:	4393      	bics	r3, r2
     bd6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     bd8:	0020      	movs	r0, r4
     bda:	4b08      	ldr	r3, [pc, #32]	; (bfc <timer_remove_task+0x9c>)
     bdc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     bde:	a801      	add	r0, sp, #4
     be0:	4b07      	ldr	r3, [pc, #28]	; (c00 <timer_remove_task+0xa0>)
     be2:	4798      	blx	r3
	return ERR_NONE;
     be4:	2000      	movs	r0, #0
     be6:	e7e1      	b.n	bac <timer_remove_task+0x4c>
     be8:	00003b88 	.word	0x00003b88
     bec:	000011f9 	.word	0x000011f9
     bf0:	00001201 	.word	0x00001201
     bf4:	000012a7 	.word	0x000012a7
     bf8:	0000363d 	.word	0x0000363d
     bfc:	00001659 	.word	0x00001659
     c00:	0000364b 	.word	0x0000364b

00000c04 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     c04:	b5f0      	push	{r4, r5, r6, r7, lr}
     c06:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     c08:	4b0e      	ldr	r3, [pc, #56]	; (c44 <_usb_d_find_ep+0x40>)
     c0a:	785a      	ldrb	r2, [r3, #1]
     c0c:	4290      	cmp	r0, r2
     c0e:	d017      	beq.n	c40 <_usb_d_find_ep+0x3c>
     c10:	2300      	movs	r3, #0
     c12:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     c14:	4f0b      	ldr	r7, [pc, #44]	; (c44 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     c16:	260f      	movs	r6, #15
     c18:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     c1a:	003d      	movs	r5, r7
     c1c:	e008      	b.n	c30 <_usb_d_find_ep+0x2c>
     c1e:	3001      	adds	r0, #1
     c20:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c22:	2804      	cmp	r0, #4
     c24:	d00a      	beq.n	c3c <_usb_d_find_ep+0x38>
     c26:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     c28:	18ea      	adds	r2, r5, r3
     c2a:	7852      	ldrb	r2, [r2, #1]
     c2c:	42a2      	cmp	r2, r4
     c2e:	d006      	beq.n	c3e <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     c30:	5dd9      	ldrb	r1, [r3, r7]
     c32:	2900      	cmp	r1, #0
     c34:	d1f3      	bne.n	c1e <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     c36:	4296      	cmp	r6, r2
     c38:	d1f1      	bne.n	c1e <_usb_d_find_ep+0x1a>
     c3a:	e000      	b.n	c3e <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     c3c:	3805      	subs	r0, #5
}
     c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c40:	2000      	movs	r0, #0
     c42:	e7fc      	b.n	c3e <_usb_d_find_ep+0x3a>
     c44:	20000554 	.word	0x20000554

00000c48 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     c48:	2000      	movs	r0, #0
     c4a:	4770      	bx	lr

00000c4c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     c4c:	b570      	push	{r4, r5, r6, lr}
     c4e:	0004      	movs	r4, r0
     c50:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     c52:	4b0a      	ldr	r3, [pc, #40]	; (c7c <usb_d_cb_trans_more+0x30>)
     c54:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     c56:	0142      	lsls	r2, r0, #5
     c58:	4b09      	ldr	r3, [pc, #36]	; (c80 <usb_d_cb_trans_more+0x34>)
     c5a:	189b      	adds	r3, r3, r2
     c5c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     c5e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     c60:	2a03      	cmp	r2, #3
     c62:	d001      	beq.n	c68 <usb_d_cb_trans_more+0x1c>
}
     c64:	0018      	movs	r0, r3
     c66:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     c68:	0140      	lsls	r0, r0, #5
     c6a:	4b05      	ldr	r3, [pc, #20]	; (c80 <usb_d_cb_trans_more+0x34>)
     c6c:	1818      	adds	r0, r3, r0
     c6e:	6983      	ldr	r3, [r0, #24]
     c70:	0029      	movs	r1, r5
     c72:	0020      	movs	r0, r4
     c74:	4798      	blx	r3
     c76:	0003      	movs	r3, r0
     c78:	e7f4      	b.n	c64 <usb_d_cb_trans_more+0x18>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000c05 	.word	0x00000c05
     c80:	20000554 	.word	0x20000554

00000c84 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	b085      	sub	sp, #20
     c88:	0005      	movs	r5, r0
     c8a:	000f      	movs	r7, r1
     c8c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     c8e:	4b51      	ldr	r3, [pc, #324]	; (dd4 <_usb_d_cb_trans_done+0x150>)
     c90:	4798      	blx	r3
     c92:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     c94:	2f00      	cmp	r7, #0
     c96:	d162      	bne.n	d5e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     c98:	4b4f      	ldr	r3, [pc, #316]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     c9a:	0142      	lsls	r2, r0, #5
     c9c:	1899      	adds	r1, r3, r2
     c9e:	2000      	movs	r0, #0
     ca0:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ca2:	5cd3      	ldrb	r3, [r2, r3]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d00e      	beq.n	cc6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ca8:	0162      	lsls	r2, r4, #5
     caa:	4b4b      	ldr	r3, [pc, #300]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     cac:	189b      	adds	r3, r3, r2
     cae:	2201      	movs	r2, #1
     cb0:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     cb2:	0164      	lsls	r4, r4, #5
     cb4:	4b48      	ldr	r3, [pc, #288]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     cb6:	191c      	adds	r4, r3, r4
     cb8:	78e1      	ldrb	r1, [r4, #3]
     cba:	69e3      	ldr	r3, [r4, #28]
     cbc:	0032      	movs	r2, r6
     cbe:	0028      	movs	r0, r5
     cc0:	4798      	blx	r3
}
     cc2:	b005      	add	sp, #20
     cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     cc6:	788b      	ldrb	r3, [r1, #2]
     cc8:	2b03      	cmp	r3, #3
     cca:	d00c      	beq.n	ce6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     ccc:	4b42      	ldr	r3, [pc, #264]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     cce:	0162      	lsls	r2, r4, #5
     cd0:	320c      	adds	r2, #12
     cd2:	189a      	adds	r2, r3, r2
     cd4:	0164      	lsls	r4, r4, #5
     cd6:	191c      	adds	r4, r3, r4
     cd8:	7860      	ldrb	r0, [r4, #1]
     cda:	2100      	movs	r1, #0
     cdc:	69e3      	ldr	r3, [r4, #28]
     cde:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ce0:	2302      	movs	r3, #2
     ce2:	70a3      	strb	r3, [r4, #2]
     ce4:	e7ed      	b.n	cc2 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     ce6:	4a3c      	ldr	r2, [pc, #240]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     ce8:	000b      	movs	r3, r1
     cea:	250c      	movs	r5, #12
     cec:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     cee:	0161      	lsls	r1, r4, #5
     cf0:	310c      	adds	r1, #12
     cf2:	1852      	adds	r2, r2, r1
     cf4:	7858      	ldrb	r0, [r3, #1]
     cf6:	69db      	ldr	r3, [r3, #28]
     cf8:	2101      	movs	r1, #1
     cfa:	4798      	blx	r3
		if (err) {
     cfc:	2800      	cmp	r0, #0
     cfe:	d017      	beq.n	d30 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     d00:	0162      	lsls	r2, r4, #5
     d02:	4b35      	ldr	r3, [pc, #212]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d04:	189b      	adds	r3, r3, r2
     d06:	2205      	movs	r2, #5
     d08:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     d0a:	3a03      	subs	r2, #3
     d0c:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     d0e:	2d00      	cmp	r5, #0
     d10:	db09      	blt.n	d26 <_usb_d_cb_trans_done+0xa2>
     d12:	0164      	lsls	r4, r4, #5
     d14:	4b30      	ldr	r3, [pc, #192]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d16:	191c      	adds	r4, r3, r4
     d18:	7860      	ldrb	r0, [r4, #1]
     d1a:	2380      	movs	r3, #128	; 0x80
     d1c:	4318      	orrs	r0, r3
     d1e:	2101      	movs	r1, #1
     d20:	4b2e      	ldr	r3, [pc, #184]	; (ddc <_usb_d_cb_trans_done+0x158>)
     d22:	4798      	blx	r3
     d24:	e7cd      	b.n	cc2 <_usb_d_cb_trans_done+0x3e>
     d26:	0164      	lsls	r4, r4, #5
     d28:	4b2b      	ldr	r3, [pc, #172]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d2a:	191c      	adds	r4, r3, r4
     d2c:	7860      	ldrb	r0, [r4, #1]
     d2e:	e7f6      	b.n	d1e <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     d30:	0164      	lsls	r4, r4, #5
     d32:	4b29      	ldr	r3, [pc, #164]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d34:	191c      	adds	r4, r3, r4
     d36:	2304      	movs	r3, #4
     d38:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     d3a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     d3c:	2200      	movs	r2, #0
     d3e:	9201      	str	r2, [sp, #4]
     d40:	9202      	str	r2, [sp, #8]
     d42:	2d00      	cmp	r5, #0
     d44:	db08      	blt.n	d58 <_usb_d_cb_trans_done+0xd4>
     d46:	3280      	adds	r2, #128	; 0x80
     d48:	4313      	orrs	r3, r2
     d4a:	a801      	add	r0, sp, #4
     d4c:	7203      	strb	r3, [r0, #8]
     d4e:	2301      	movs	r3, #1
     d50:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     d52:	4b23      	ldr	r3, [pc, #140]	; (de0 <_usb_d_cb_trans_done+0x15c>)
     d54:	4798      	blx	r3
     d56:	e7b4      	b.n	cc2 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     d58:	220f      	movs	r2, #15
     d5a:	4013      	ands	r3, r2
     d5c:	e7f5      	b.n	d4a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     d5e:	2f01      	cmp	r7, #1
     d60:	d00a      	beq.n	d78 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     d62:	2f02      	cmp	r7, #2
     d64:	d01d      	beq.n	da2 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     d66:	2f03      	cmp	r7, #3
     d68:	d02c      	beq.n	dc4 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     d6a:	0142      	lsls	r2, r0, #5
     d6c:	4b1a      	ldr	r3, [pc, #104]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d6e:	189b      	adds	r3, r3, r2
     d70:	2206      	movs	r2, #6
     d72:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     d74:	70da      	strb	r2, [r3, #3]
     d76:	e79c      	b.n	cb2 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     d78:	4b17      	ldr	r3, [pc, #92]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d7a:	0142      	lsls	r2, r0, #5
     d7c:	1899      	adds	r1, r3, r2
     d7e:	2002      	movs	r0, #2
     d80:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d82:	5cd3      	ldrb	r3, [r2, r3]
     d84:	2b00      	cmp	r3, #0
     d86:	d005      	beq.n	d94 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     d88:	0162      	lsls	r2, r4, #5
     d8a:	4b13      	ldr	r3, [pc, #76]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     d8c:	189b      	adds	r3, r3, r2
     d8e:	2205      	movs	r2, #5
     d90:	709a      	strb	r2, [r3, #2]
     d92:	e78e      	b.n	cb2 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     d94:	2202      	movs	r2, #2
     d96:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     d98:	2100      	movs	r1, #0
     d9a:	0028      	movs	r0, r5
     d9c:	4b0f      	ldr	r3, [pc, #60]	; (ddc <_usb_d_cb_trans_done+0x158>)
     d9e:	4798      	blx	r3
     da0:	e787      	b.n	cb2 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     da2:	4b0d      	ldr	r3, [pc, #52]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     da4:	0142      	lsls	r2, r0, #5
     da6:	1899      	adds	r1, r3, r2
     da8:	2004      	movs	r0, #4
     daa:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     dac:	5cd3      	ldrb	r3, [r2, r3]
     dae:	2b00      	cmp	r3, #0
     db0:	d005      	beq.n	dbe <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     db2:	0162      	lsls	r2, r4, #5
     db4:	4b08      	ldr	r3, [pc, #32]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     db6:	189b      	adds	r3, r3, r2
     db8:	2201      	movs	r2, #1
     dba:	709a      	strb	r2, [r3, #2]
     dbc:	e779      	b.n	cb2 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     dbe:	2302      	movs	r3, #2
     dc0:	708b      	strb	r3, [r1, #2]
			return;
     dc2:	e77e      	b.n	cc2 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     dc4:	0142      	lsls	r2, r0, #5
     dc6:	4b04      	ldr	r3, [pc, #16]	; (dd8 <_usb_d_cb_trans_done+0x154>)
     dc8:	189b      	adds	r3, r3, r2
     dca:	2200      	movs	r2, #0
     dcc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     dce:	3205      	adds	r2, #5
     dd0:	70da      	strb	r2, [r3, #3]
     dd2:	e76e      	b.n	cb2 <_usb_d_cb_trans_done+0x2e>
     dd4:	00000c05 	.word	0x00000c05
     dd8:	20000554 	.word	0x20000554
     ddc:	00002349 	.word	0x00002349
     de0:	0000251d 	.word	0x0000251d

00000de4 <usb_d_cb_trans_setup>:
{
     de4:	b5f0      	push	{r4, r5, r6, r7, lr}
     de6:	46c6      	mov	lr, r8
     de8:	b500      	push	{lr}
     dea:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     dec:	4b1d      	ldr	r3, [pc, #116]	; (e64 <usb_d_cb_trans_setup+0x80>)
     dee:	4798      	blx	r3
     df0:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     df2:	0145      	lsls	r5, r0, #5
     df4:	350c      	adds	r5, #12
     df6:	4b1c      	ldr	r3, [pc, #112]	; (e68 <usb_d_cb_trans_setup+0x84>)
     df8:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     dfa:	0029      	movs	r1, r5
     dfc:	0020      	movs	r0, r4
     dfe:	4b1b      	ldr	r3, [pc, #108]	; (e6c <usb_d_cb_trans_setup+0x88>)
     e00:	4798      	blx	r3
	if (n != 8) {
     e02:	b2c0      	uxtb	r0, r0
     e04:	2808      	cmp	r0, #8
     e06:	d00a      	beq.n	e1e <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e08:	2101      	movs	r1, #1
     e0a:	0020      	movs	r0, r4
     e0c:	4d18      	ldr	r5, [pc, #96]	; (e70 <usb_d_cb_trans_setup+0x8c>)
     e0e:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     e10:	2080      	movs	r0, #128	; 0x80
     e12:	4320      	orrs	r0, r4
     e14:	2101      	movs	r1, #1
     e16:	47a8      	blx	r5
}
     e18:	bc04      	pop	{r2}
     e1a:	4690      	mov	r8, r2
     e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e1e:	2100      	movs	r1, #0
     e20:	0020      	movs	r0, r4
     e22:	4b13      	ldr	r3, [pc, #76]	; (e70 <usb_d_cb_trans_setup+0x8c>)
     e24:	4698      	mov	r8, r3
     e26:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     e28:	2780      	movs	r7, #128	; 0x80
     e2a:	4327      	orrs	r7, r4
     e2c:	2100      	movs	r1, #0
     e2e:	0038      	movs	r0, r7
     e30:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     e32:	0172      	lsls	r2, r6, #5
     e34:	4b0c      	ldr	r3, [pc, #48]	; (e68 <usb_d_cb_trans_setup+0x84>)
     e36:	189b      	adds	r3, r3, r2
     e38:	2201      	movs	r2, #1
     e3a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     e3c:	695b      	ldr	r3, [r3, #20]
     e3e:	0029      	movs	r1, r5
     e40:	0020      	movs	r0, r4
     e42:	4798      	blx	r3
     e44:	2800      	cmp	r0, #0
     e46:	d1e7      	bne.n	e18 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     e48:	0176      	lsls	r6, r6, #5
     e4a:	4b07      	ldr	r3, [pc, #28]	; (e68 <usb_d_cb_trans_setup+0x84>)
     e4c:	199e      	adds	r6, r3, r6
     e4e:	2305      	movs	r3, #5
     e50:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e52:	2101      	movs	r1, #1
     e54:	0020      	movs	r0, r4
     e56:	4c06      	ldr	r4, [pc, #24]	; (e70 <usb_d_cb_trans_setup+0x8c>)
     e58:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     e5a:	2101      	movs	r1, #1
     e5c:	0038      	movs	r0, r7
     e5e:	47a0      	blx	r4
     e60:	e7da      	b.n	e18 <usb_d_cb_trans_setup+0x34>
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	00000c05 	.word	0x00000c05
     e68:	20000554 	.word	0x20000554
     e6c:	000024ad 	.word	0x000024ad
     e70:	00002349 	.word	0x00002349

00000e74 <usb_d_init>:

int32_t usb_d_init(void)
{
     e74:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     e76:	4b10      	ldr	r3, [pc, #64]	; (eb8 <usb_d_init+0x44>)
     e78:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     e7a:	2800      	cmp	r0, #0
     e7c:	db1b      	blt.n	eb6 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     e7e:	4c0f      	ldr	r4, [pc, #60]	; (ebc <usb_d_init+0x48>)
     e80:	2280      	movs	r2, #128	; 0x80
     e82:	2100      	movs	r1, #0
     e84:	0020      	movs	r0, r4
     e86:	4b0e      	ldr	r3, [pc, #56]	; (ec0 <usb_d_init+0x4c>)
     e88:	4798      	blx	r3
     e8a:	0023      	movs	r3, r4
     e8c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     e8e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     e90:	4a0c      	ldr	r2, [pc, #48]	; (ec4 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     e92:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     e94:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     e96:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     e98:	61da      	str	r2, [r3, #28]
     e9a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e9c:	42a3      	cmp	r3, r4
     e9e:	d1f8      	bne.n	e92 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     ea0:	4909      	ldr	r1, [pc, #36]	; (ec8 <usb_d_init+0x54>)
     ea2:	2000      	movs	r0, #0
     ea4:	4c09      	ldr	r4, [pc, #36]	; (ecc <usb_d_init+0x58>)
     ea6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     ea8:	4909      	ldr	r1, [pc, #36]	; (ed0 <usb_d_init+0x5c>)
     eaa:	2001      	movs	r0, #1
     eac:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     eae:	4909      	ldr	r1, [pc, #36]	; (ed4 <usb_d_init+0x60>)
     eb0:	2002      	movs	r0, #2
     eb2:	47a0      	blx	r4
	return ERR_NONE;
     eb4:	2000      	movs	r0, #0
}
     eb6:	bd10      	pop	{r4, pc}
     eb8:	00001d1d 	.word	0x00001d1d
     ebc:	20000554 	.word	0x20000554
     ec0:	0000385d 	.word	0x0000385d
     ec4:	00000c49 	.word	0x00000c49
     ec8:	00000de5 	.word	0x00000de5
     ecc:	00002791 	.word	0x00002791
     ed0:	00000c4d 	.word	0x00000c4d
     ed4:	00000c85 	.word	0x00000c85

00000ed8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     ed8:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     eda:	4b01      	ldr	r3, [pc, #4]	; (ee0 <usb_d_register_callback+0x8>)
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}
     ee0:	0000276d 	.word	0x0000276d

00000ee4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     ee4:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     ee6:	4b01      	ldr	r3, [pc, #4]	; (eec <usb_d_enable+0x8>)
     ee8:	4798      	blx	r3
}
     eea:	bd10      	pop	{r4, pc}
     eec:	00001dfd 	.word	0x00001dfd

00000ef0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     ef0:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     ef2:	4b01      	ldr	r3, [pc, #4]	; (ef8 <usb_d_attach+0x8>)
     ef4:	4798      	blx	r3
}
     ef6:	bd10      	pop	{r4, pc}
     ef8:	00001e4d 	.word	0x00001e4d

00000efc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     efc:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     efe:	4b01      	ldr	r3, [pc, #4]	; (f04 <usb_d_set_address+0x8>)
     f00:	4798      	blx	r3
}
     f02:	bd10      	pop	{r4, pc}
     f04:	00001e5d 	.word	0x00001e5d

00000f08 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f0a:	0005      	movs	r5, r0
     f0c:	000e      	movs	r6, r1
     f0e:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     f10:	4b0f      	ldr	r3, [pc, #60]	; (f50 <usb_d_ep_init+0x48>)
     f12:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     f14:	2800      	cmp	r0, #0
     f16:	da14      	bge.n	f42 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     f18:	20ff      	movs	r0, #255	; 0xff
     f1a:	4b0d      	ldr	r3, [pc, #52]	; (f50 <usb_d_ep_init+0x48>)
     f1c:	4798      	blx	r3
     f1e:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     f20:	db12      	blt.n	f48 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     f22:	003a      	movs	r2, r7
     f24:	0031      	movs	r1, r6
     f26:	0028      	movs	r0, r5
     f28:	4b0a      	ldr	r3, [pc, #40]	; (f54 <usb_d_ep_init+0x4c>)
     f2a:	4798      	blx	r3
	if (rc < 0) {
     f2c:	2800      	cmp	r0, #0
     f2e:	db07      	blt.n	f40 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     f30:	4a09      	ldr	r2, [pc, #36]	; (f58 <usb_d_ep_init+0x50>)
     f32:	0164      	lsls	r4, r4, #5
     f34:	1913      	adds	r3, r2, r4
     f36:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     f38:	2303      	movs	r3, #3
     f3a:	401e      	ands	r6, r3
     f3c:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     f3e:	2000      	movs	r0, #0
}
     f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     f42:	2014      	movs	r0, #20
     f44:	4240      	negs	r0, r0
     f46:	e7fb      	b.n	f40 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     f48:	2015      	movs	r0, #21
     f4a:	4240      	negs	r0, r0
     f4c:	e7f8      	b.n	f40 <usb_d_ep_init+0x38>
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	00000c05 	.word	0x00000c05
     f54:	00001e6d 	.word	0x00001e6d
     f58:	20000554 	.word	0x20000554

00000f5c <usb_d_ep0_init>:
{
     f5c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     f5e:	b282      	uxth	r2, r0
     f60:	2100      	movs	r1, #0
     f62:	2000      	movs	r0, #0
     f64:	4b01      	ldr	r3, [pc, #4]	; (f6c <usb_d_ep0_init+0x10>)
     f66:	4798      	blx	r3
}
     f68:	bd10      	pop	{r4, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	00000f09 	.word	0x00000f09

00000f70 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     f70:	b570      	push	{r4, r5, r6, lr}
     f72:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f74:	4b06      	ldr	r3, [pc, #24]	; (f90 <usb_d_ep_deinit+0x20>)
     f76:	4798      	blx	r3
     f78:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     f7a:	db07      	blt.n	f8c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     f7c:	0028      	movs	r0, r5
     f7e:	4b05      	ldr	r3, [pc, #20]	; (f94 <usb_d_ep_deinit+0x24>)
     f80:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     f82:	0164      	lsls	r4, r4, #5
     f84:	4b04      	ldr	r3, [pc, #16]	; (f98 <usb_d_ep_deinit+0x28>)
     f86:	191c      	adds	r4, r3, r4
     f88:	23ff      	movs	r3, #255	; 0xff
     f8a:	7063      	strb	r3, [r4, #1]
}
     f8c:	bd70      	pop	{r4, r5, r6, pc}
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	00000c05 	.word	0x00000c05
     f94:	00001f99 	.word	0x00001f99
     f98:	20000554 	.word	0x20000554

00000f9c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     fa0:	4b0e      	ldr	r3, [pc, #56]	; (fdc <usb_d_ep_enable+0x40>)
     fa2:	4798      	blx	r3
     fa4:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     fa6:	db15      	blt.n	fd4 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     fa8:	0143      	lsls	r3, r0, #5
     faa:	4a0d      	ldr	r2, [pc, #52]	; (fe0 <usb_d_ep_enable+0x44>)
     fac:	5c9b      	ldrb	r3, [r3, r2]
     fae:	425a      	negs	r2, r3
     fb0:	4153      	adcs	r3, r2
     fb2:	3301      	adds	r3, #1
     fb4:	0141      	lsls	r1, r0, #5
     fb6:	4a0a      	ldr	r2, [pc, #40]	; (fe0 <usb_d_ep_enable+0x44>)
     fb8:	1852      	adds	r2, r2, r1
     fba:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     fbc:	0020      	movs	r0, r4
     fbe:	4b09      	ldr	r3, [pc, #36]	; (fe4 <usb_d_ep_enable+0x48>)
     fc0:	4798      	blx	r3
	if (rc < 0) {
     fc2:	2800      	cmp	r0, #0
     fc4:	db00      	blt.n	fc8 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     fc6:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     fc8:	016d      	lsls	r5, r5, #5
     fca:	4b05      	ldr	r3, [pc, #20]	; (fe0 <usb_d_ep_enable+0x44>)
     fcc:	195d      	adds	r5, r3, r5
     fce:	2300      	movs	r3, #0
     fd0:	70ab      	strb	r3, [r5, #2]
     fd2:	e7f8      	b.n	fc6 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     fd4:	2012      	movs	r0, #18
     fd6:	4240      	negs	r0, r0
     fd8:	e7f5      	b.n	fc6 <usb_d_ep_enable+0x2a>
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	00000c05 	.word	0x00000c05
     fe0:	20000554 	.word	0x20000554
     fe4:	00002065 	.word	0x00002065

00000fe8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fea:	46d6      	mov	lr, sl
     fec:	464f      	mov	r7, r9
     fee:	4646      	mov	r6, r8
     ff0:	b5c0      	push	{r6, r7, lr}
     ff2:	b086      	sub	sp, #24
     ff4:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     ff6:	7a07      	ldrb	r7, [r0, #8]
     ff8:	0038      	movs	r0, r7
     ffa:	4b40      	ldr	r3, [pc, #256]	; (10fc <usb_d_ep_transfer+0x114>)
     ffc:	4798      	blx	r3
     ffe:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1000:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    1002:	6863      	ldr	r3, [r4, #4]
    1004:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1006:	2800      	cmp	r0, #0
    1008:	da00      	bge.n	100c <usb_d_ep_transfer+0x24>
    100a:	e071      	b.n	10f0 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    100c:	a804      	add	r0, sp, #16
    100e:	4b3c      	ldr	r3, [pc, #240]	; (1100 <usb_d_ep_transfer+0x118>)
    1010:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1012:	016a      	lsls	r2, r5, #5
    1014:	4b3b      	ldr	r3, [pc, #236]	; (1104 <usb_d_ep_transfer+0x11c>)
    1016:	189b      	adds	r3, r3, r2
    1018:	789a      	ldrb	r2, [r3, #2]
    101a:	2317      	movs	r3, #23
    101c:	446b      	add	r3, sp
    101e:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b01      	cmp	r3, #1
    1024:	d010      	beq.n	1048 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1026:	a804      	add	r0, sp, #16
    1028:	4b37      	ldr	r3, [pc, #220]	; (1108 <usb_d_ep_transfer+0x120>)
    102a:	4798      	blx	r3
		switch (state) {
    102c:	2317      	movs	r3, #23
    102e:	446b      	add	r3, sp
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	b2db      	uxtb	r3, r3
    1034:	2b05      	cmp	r3, #5
    1036:	d05e      	beq.n	10f6 <usb_d_ep_transfer+0x10e>
    1038:	2b06      	cmp	r3, #6
    103a:	d023      	beq.n	1084 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    103c:	2001      	movs	r0, #1
		switch (state) {
    103e:	2b00      	cmp	r3, #0
    1040:	d13c      	bne.n	10bc <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1042:	2013      	movs	r0, #19
    1044:	4240      	negs	r0, r0
    1046:	e039      	b.n	10bc <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1048:	4b2e      	ldr	r3, [pc, #184]	; (1104 <usb_d_ep_transfer+0x11c>)
    104a:	4699      	mov	r9, r3
    104c:	016b      	lsls	r3, r5, #5
    104e:	469a      	mov	sl, r3
    1050:	464b      	mov	r3, r9
    1052:	4453      	add	r3, sl
    1054:	2203      	movs	r2, #3
    1056:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1058:	a804      	add	r0, sp, #16
    105a:	4b2b      	ldr	r3, [pc, #172]	; (1108 <usb_d_ep_transfer+0x120>)
    105c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    105e:	464b      	mov	r3, r9
    1060:	4652      	mov	r2, sl
    1062:	5cd3      	ldrb	r3, [r2, r3]
    1064:	2b00      	cmp	r3, #0
    1066:	d010      	beq.n	108a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1068:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    106a:	1e72      	subs	r2, r6, #1
    106c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    106e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1070:	6822      	ldr	r2, [r4, #0]
    1072:	9201      	str	r2, [sp, #4]
    1074:	4642      	mov	r2, r8
    1076:	9202      	str	r2, [sp, #8]
    1078:	b27f      	sxtb	r7, r7
    107a:	2f00      	cmp	r7, #0
    107c:	db17      	blt.n	10ae <usb_d_ep_transfer+0xc6>
    107e:	220f      	movs	r2, #15
    1080:	4013      	ands	r3, r2
    1082:	e016      	b.n	10b2 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1084:	2010      	movs	r0, #16
    1086:	4240      	negs	r0, r0
    1088:	e018      	b.n	10bc <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    108a:	016b      	lsls	r3, r5, #5
    108c:	4a1d      	ldr	r2, [pc, #116]	; (1104 <usb_d_ep_transfer+0x11c>)
    108e:	18d2      	adds	r2, r2, r3
    1090:	7cd1      	ldrb	r1, [r2, #19]
    1092:	0209      	lsls	r1, r1, #8
    1094:	7c93      	ldrb	r3, [r2, #18]
    1096:	185b      	adds	r3, r3, r1
    1098:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    109a:	2b00      	cmp	r3, #0
    109c:	d114      	bne.n	10c8 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    109e:	2304      	movs	r3, #4
    10a0:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    10a2:	2200      	movs	r2, #0
			zlp                 = true;
    10a4:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    10a6:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    10a8:	6821      	ldr	r1, [r4, #0]
    10aa:	9101      	str	r1, [sp, #4]
    10ac:	9202      	str	r2, [sp, #8]
    10ae:	2280      	movs	r2, #128	; 0x80
    10b0:	4313      	orrs	r3, r2
    10b2:	a801      	add	r0, sp, #4
    10b4:	7203      	strb	r3, [r0, #8]
    10b6:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    10b8:	4b14      	ldr	r3, [pc, #80]	; (110c <usb_d_ep_transfer+0x124>)
    10ba:	4798      	blx	r3
	return rc;
}
    10bc:	b006      	add	sp, #24
    10be:	bc1c      	pop	{r2, r3, r4}
    10c0:	4690      	mov	r8, r2
    10c2:	4699      	mov	r9, r3
    10c4:	46a2      	mov	sl, r4
    10c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c8:	4642      	mov	r2, r8
    10ca:	429a      	cmp	r2, r3
    10cc:	d900      	bls.n	10d0 <usb_d_ep_transfer+0xe8>
    10ce:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    10d0:	016d      	lsls	r5, r5, #5
    10d2:	490c      	ldr	r1, [pc, #48]	; (1104 <usb_d_ep_transfer+0x11c>)
    10d4:	194d      	adds	r5, r1, r5
			if (dir) {
    10d6:	7b29      	ldrb	r1, [r5, #12]
    10d8:	297f      	cmp	r1, #127	; 0x7f
    10da:	d805      	bhi.n	10e8 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    10dc:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    10de:	6821      	ldr	r1, [r4, #0]
    10e0:	9101      	str	r1, [sp, #4]
    10e2:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    10e4:	2600      	movs	r6, #0
    10e6:	e7ca      	b.n	107e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    10e8:	429a      	cmp	r2, r3
    10ea:	41b6      	sbcs	r6, r6
    10ec:	4276      	negs	r6, r6
    10ee:	e7da      	b.n	10a6 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    10f0:	2012      	movs	r0, #18
    10f2:	4240      	negs	r0, r0
    10f4:	e7e2      	b.n	10bc <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    10f6:	2002      	movs	r0, #2
    10f8:	e7e0      	b.n	10bc <usb_d_ep_transfer+0xd4>
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	00000c05 	.word	0x00000c05
    1100:	0000363d 	.word	0x0000363d
    1104:	20000554 	.word	0x20000554
    1108:	0000364b 	.word	0x0000364b
    110c:	0000251d 	.word	0x0000251d

00001110 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    1110:	b570      	push	{r4, r5, r6, lr}
    1112:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1114:	4b07      	ldr	r3, [pc, #28]	; (1134 <usb_d_ep_abort+0x24>)
    1116:	4798      	blx	r3
    1118:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    111a:	db09      	blt.n	1130 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    111c:	0028      	movs	r0, r5
    111e:	4b06      	ldr	r3, [pc, #24]	; (1138 <usb_d_ep_abort+0x28>)
    1120:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1122:	0164      	lsls	r4, r4, #5
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <usb_d_ep_abort+0x2c>)
    1126:	191c      	adds	r4, r3, r4
    1128:	2301      	movs	r3, #1
    112a:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    112c:	3303      	adds	r3, #3
    112e:	70e3      	strb	r3, [r4, #3]
}
    1130:	bd70      	pop	{r4, r5, r6, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	00000c05 	.word	0x00000c05
    1138:	0000272d 	.word	0x0000272d
    113c:	20000554 	.word	0x20000554

00001140 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1140:	b570      	push	{r4, r5, r6, lr}
    1142:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1144:	2900      	cmp	r1, #0
    1146:	d005      	beq.n	1154 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1148:	2901      	cmp	r1, #1
    114a:	d021      	beq.n	1190 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    114c:	2102      	movs	r1, #2
    114e:	4b13      	ldr	r3, [pc, #76]	; (119c <usb_d_ep_halt+0x5c>)
    1150:	4798      	blx	r3
	}
}
    1152:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1154:	4b12      	ldr	r3, [pc, #72]	; (11a0 <usb_d_ep_halt+0x60>)
    1156:	4798      	blx	r3
    1158:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    115a:	db1c      	blt.n	1196 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    115c:	2102      	movs	r1, #2
    115e:	0020      	movs	r0, r4
    1160:	4b0e      	ldr	r3, [pc, #56]	; (119c <usb_d_ep_halt+0x5c>)
    1162:	4798      	blx	r3
    1164:	2800      	cmp	r0, #0
    1166:	d0f4      	beq.n	1152 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1168:	2100      	movs	r1, #0
    116a:	0020      	movs	r0, r4
    116c:	4b0b      	ldr	r3, [pc, #44]	; (119c <usb_d_ep_halt+0x5c>)
    116e:	4798      	blx	r3
		if (rc < 0) {
    1170:	2800      	cmp	r0, #0
    1172:	dbee      	blt.n	1152 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1174:	016d      	lsls	r5, r5, #5
    1176:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <usb_d_ep_halt+0x64>)
    1178:	195d      	adds	r5, r3, r5
    117a:	2301      	movs	r3, #1
    117c:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    117e:	3302      	adds	r3, #2
    1180:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1182:	69eb      	ldr	r3, [r5, #28]
    1184:	2200      	movs	r2, #0
    1186:	2103      	movs	r1, #3
    1188:	0020      	movs	r0, r4
    118a:	4798      	blx	r3
	return ERR_NONE;
    118c:	2000      	movs	r0, #0
    118e:	e7e0      	b.n	1152 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1190:	4b02      	ldr	r3, [pc, #8]	; (119c <usb_d_ep_halt+0x5c>)
    1192:	4798      	blx	r3
    1194:	e7dd      	b.n	1152 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1196:	2012      	movs	r0, #18
    1198:	4240      	negs	r0, r0
    119a:	e7da      	b.n	1152 <usb_d_ep_halt+0x12>
    119c:	00002349 	.word	0x00002349
    11a0:	00000c05 	.word	0x00000c05
    11a4:	20000554 	.word	0x20000554

000011a8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	000d      	movs	r5, r1
    11ac:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    11ae:	4b0f      	ldr	r3, [pc, #60]	; (11ec <usb_d_ep_register_callback+0x44>)
    11b0:	4798      	blx	r3
    11b2:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    11b4:	1e22      	subs	r2, r4, #0
    11b6:	d008      	beq.n	11ca <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    11b8:	2b00      	cmp	r3, #0
    11ba:	db05      	blt.n	11c8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    11bc:	2d01      	cmp	r5, #1
    11be:	d00b      	beq.n	11d8 <usb_d_ep_register_callback+0x30>
    11c0:	2d00      	cmp	r5, #0
    11c2:	d004      	beq.n	11ce <usb_d_ep_register_callback+0x26>
    11c4:	2d02      	cmp	r5, #2
    11c6:	d00c      	beq.n	11e2 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    11c8:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    11ca:	4a09      	ldr	r2, [pc, #36]	; (11f0 <usb_d_ep_register_callback+0x48>)
    11cc:	e7f4      	b.n	11b8 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    11ce:	0140      	lsls	r0, r0, #5
    11d0:	4b08      	ldr	r3, [pc, #32]	; (11f4 <usb_d_ep_register_callback+0x4c>)
    11d2:	1818      	adds	r0, r3, r0
    11d4:	6142      	str	r2, [r0, #20]
		break;
    11d6:	e7f7      	b.n	11c8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    11d8:	0140      	lsls	r0, r0, #5
    11da:	4b06      	ldr	r3, [pc, #24]	; (11f4 <usb_d_ep_register_callback+0x4c>)
    11dc:	1818      	adds	r0, r3, r0
    11de:	6182      	str	r2, [r0, #24]
		break;
    11e0:	e7f2      	b.n	11c8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    11e2:	0140      	lsls	r0, r0, #5
    11e4:	4b03      	ldr	r3, [pc, #12]	; (11f4 <usb_d_ep_register_callback+0x4c>)
    11e6:	1818      	adds	r0, r3, r0
    11e8:	61c2      	str	r2, [r0, #28]
		break;
    11ea:	e7ed      	b.n	11c8 <usb_d_ep_register_callback+0x20>
    11ec:	00000c05 	.word	0x00000c05
    11f0:	00000c49 	.word	0x00000c49
    11f4:	20000554 	.word	0x20000554

000011f8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    11f8:	2800      	cmp	r0, #0
    11fa:	d100      	bne.n	11fe <assert+0x6>
		__asm("BKPT #0");
    11fc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    11fe:	4770      	bx	lr

00001200 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1200:	6803      	ldr	r3, [r0, #0]
    1202:	2b00      	cmp	r3, #0
    1204:	d00a      	beq.n	121c <is_list_element+0x1c>
		if (it == element) {
    1206:	428b      	cmp	r3, r1
    1208:	d00a      	beq.n	1220 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    120a:	681b      	ldr	r3, [r3, #0]
    120c:	2b00      	cmp	r3, #0
    120e:	d003      	beq.n	1218 <is_list_element+0x18>
		if (it == element) {
    1210:	4299      	cmp	r1, r3
    1212:	d1fa      	bne.n	120a <is_list_element+0xa>
			return true;
    1214:	2001      	movs	r0, #1
    1216:	e000      	b.n	121a <is_list_element+0x1a>
		}
	}

	return false;
    1218:	2000      	movs	r0, #0
}
    121a:	4770      	bx	lr
	return false;
    121c:	2000      	movs	r0, #0
    121e:	e7fc      	b.n	121a <is_list_element+0x1a>
			return true;
    1220:	2001      	movs	r0, #1
    1222:	e7fa      	b.n	121a <is_list_element+0x1a>

00001224 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1224:	b570      	push	{r4, r5, r6, lr}
    1226:	0004      	movs	r4, r0
    1228:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    122a:	4b06      	ldr	r3, [pc, #24]	; (1244 <list_insert_as_head+0x20>)
    122c:	4798      	blx	r3
    122e:	2301      	movs	r3, #1
    1230:	4058      	eors	r0, r3
    1232:	b2c0      	uxtb	r0, r0
    1234:	2239      	movs	r2, #57	; 0x39
    1236:	4904      	ldr	r1, [pc, #16]	; (1248 <list_insert_as_head+0x24>)
    1238:	4b04      	ldr	r3, [pc, #16]	; (124c <list_insert_as_head+0x28>)
    123a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    123c:	6823      	ldr	r3, [r4, #0]
    123e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1240:	6025      	str	r5, [r4, #0]
}
    1242:	bd70      	pop	{r4, r5, r6, pc}
    1244:	00001201 	.word	0x00001201
    1248:	00003ba0 	.word	0x00003ba0
    124c:	000011f9 	.word	0x000011f9

00001250 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1250:	6803      	ldr	r3, [r0, #0]
    1252:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1254:	6001      	str	r1, [r0, #0]
}
    1256:	4770      	bx	lr

00001258 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1258:	b570      	push	{r4, r5, r6, lr}
    125a:	0005      	movs	r5, r0
    125c:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    125e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1260:	4b0a      	ldr	r3, [pc, #40]	; (128c <list_insert_at_end+0x34>)
    1262:	4798      	blx	r3
    1264:	2301      	movs	r3, #1
    1266:	4058      	eors	r0, r3
    1268:	b2c0      	uxtb	r0, r0
    126a:	224f      	movs	r2, #79	; 0x4f
    126c:	4908      	ldr	r1, [pc, #32]	; (1290 <list_insert_at_end+0x38>)
    126e:	4b09      	ldr	r3, [pc, #36]	; (1294 <list_insert_at_end+0x3c>)
    1270:	4798      	blx	r3

	if (!list->head) {
    1272:	682b      	ldr	r3, [r5, #0]
    1274:	2b00      	cmp	r3, #0
    1276:	d103      	bne.n	1280 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1278:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    127a:	6033      	str	r3, [r6, #0]
		return;
    127c:	e005      	b.n	128a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    127e:	001c      	movs	r4, r3
	while (it->next) {
    1280:	6823      	ldr	r3, [r4, #0]
    1282:	2b00      	cmp	r3, #0
    1284:	d1fb      	bne.n	127e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    1286:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1288:	6033      	str	r3, [r6, #0]
}
    128a:	bd70      	pop	{r4, r5, r6, pc}
    128c:	00001201 	.word	0x00001201
    1290:	00003ba0 	.word	0x00003ba0
    1294:	000011f9 	.word	0x000011f9

00001298 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1298:	6803      	ldr	r3, [r0, #0]
    129a:	2b00      	cmp	r3, #0
    129c:	d001      	beq.n	12a2 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    129e:	681a      	ldr	r2, [r3, #0]
    12a0:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    12a2:	0018      	movs	r0, r3
    12a4:	4770      	bx	lr

000012a6 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    12a6:	2900      	cmp	r1, #0
    12a8:	d019      	beq.n	12de <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
    12aa:	6802      	ldr	r2, [r0, #0]
    12ac:	4291      	cmp	r1, r2
    12ae:	d00b      	beq.n	12c8 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    12b0:	2a00      	cmp	r2, #0
    12b2:	d016      	beq.n	12e2 <list_delete_element+0x3c>
    12b4:	6813      	ldr	r3, [r2, #0]
    12b6:	4299      	cmp	r1, r3
    12b8:	d00a      	beq.n	12d0 <list_delete_element+0x2a>
    12ba:	2b00      	cmp	r3, #0
    12bc:	d00d      	beq.n	12da <list_delete_element+0x34>
    12be:	681a      	ldr	r2, [r3, #0]
    12c0:	4291      	cmp	r1, r2
    12c2:	d006      	beq.n	12d2 <list_delete_element+0x2c>
    12c4:	0013      	movs	r3, r2
    12c6:	e7f8      	b.n	12ba <list_delete_element+0x14>
		list->head = list->head->next;
    12c8:	6813      	ldr	r3, [r2, #0]
    12ca:	6003      	str	r3, [r0, #0]
		return true;
    12cc:	2001      	movs	r0, #1
    12ce:	e003      	b.n	12d8 <list_delete_element+0x32>
		while (it && it->next != element) {
    12d0:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    12d2:	680a      	ldr	r2, [r1, #0]
    12d4:	601a      	str	r2, [r3, #0]
			return true;
    12d6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    12d8:	4770      	bx	lr
	return false;
    12da:	2000      	movs	r0, #0
    12dc:	e7fc      	b.n	12d8 <list_delete_element+0x32>
		return false;
    12de:	2000      	movs	r0, #0
    12e0:	e7fa      	b.n	12d8 <list_delete_element+0x32>
	return false;
    12e2:	2000      	movs	r0, #0
    12e4:	e7f8      	b.n	12d8 <list_delete_element+0x32>
	...

000012e8 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    12e8:	b243      	sxtb	r3, r0
    12ea:	2b00      	cmp	r3, #0
    12ec:	db07      	blt.n	12fe <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ee:	231f      	movs	r3, #31
    12f0:	4018      	ands	r0, r3
    12f2:	3b1e      	subs	r3, #30
    12f4:	4083      	lsls	r3, r0
    12f6:	2280      	movs	r2, #128	; 0x80
    12f8:	0052      	lsls	r2, r2, #1
    12fa:	4901      	ldr	r1, [pc, #4]	; (1300 <_irq_set+0x18>)
    12fc:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    12fe:	4770      	bx	lr
    1300:	e000e100 	.word	0xe000e100

00001304 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1304:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    1306:	0103      	lsls	r3, r0, #4
    1308:	1a1b      	subs	r3, r3, r0
    130a:	015b      	lsls	r3, r3, #5
    130c:	1a18      	subs	r0, r3, r0
    130e:	3002      	adds	r0, #2
    1310:	2103      	movs	r1, #3
    1312:	4b02      	ldr	r3, [pc, #8]	; (131c <_get_cycles_for_ms+0x18>)
    1314:	4798      	blx	r3
    1316:	2364      	movs	r3, #100	; 0x64
    1318:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    131a:	bd10      	pop	{r4, pc}
    131c:	00003669 	.word	0x00003669

00001320 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1320:	3901      	subs	r1, #1
    1322:	d8fd      	bhi.n	1320 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1324:	4770      	bx	lr
	...

00001328 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1328:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    132a:	4a08      	ldr	r2, [pc, #32]	; (134c <_init_chip+0x24>)
    132c:	6853      	ldr	r3, [r2, #4]
    132e:	2108      	movs	r1, #8
    1330:	430b      	orrs	r3, r1
    1332:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <_init_chip+0x28>)
    1336:	4798      	blx	r3
	_sysctrl_init_sources();
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <_init_chip+0x2c>)
    133a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    133c:	2040      	movs	r0, #64	; 0x40
    133e:	4c06      	ldr	r4, [pc, #24]	; (1358 <_init_chip+0x30>)
    1340:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    1342:	4b06      	ldr	r3, [pc, #24]	; (135c <_init_chip+0x34>)
    1344:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1346:	20bf      	movs	r0, #191	; 0xbf
    1348:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    134a:	bd10      	pop	{r4, pc}
    134c:	41004000 	.word	0x41004000
    1350:	000013f9 	.word	0x000013f9
    1354:	00001419 	.word	0x00001419
    1358:	00001361 	.word	0x00001361
    135c:	0000145d 	.word	0x0000145d

00001360 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1360:	07c3      	lsls	r3, r0, #31
    1362:	d509      	bpl.n	1378 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1364:	4b1c      	ldr	r3, [pc, #112]	; (13d8 <_gclk_init_generators_by_fref+0x78>)
    1366:	2280      	movs	r2, #128	; 0x80
    1368:	0052      	lsls	r2, r2, #1
    136a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    136c:	4a1b      	ldr	r2, [pc, #108]	; (13dc <_gclk_init_generators_by_fref+0x7c>)
    136e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1370:	001a      	movs	r2, r3
    1372:	7853      	ldrb	r3, [r2, #1]
    1374:	09db      	lsrs	r3, r3, #7
    1376:	d1fc      	bne.n	1372 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1378:	0783      	lsls	r3, r0, #30
    137a:	d509      	bpl.n	1390 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    137c:	4b16      	ldr	r3, [pc, #88]	; (13d8 <_gclk_init_generators_by_fref+0x78>)
    137e:	2202      	movs	r2, #2
    1380:	32ff      	adds	r2, #255	; 0xff
    1382:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1384:	4a16      	ldr	r2, [pc, #88]	; (13e0 <_gclk_init_generators_by_fref+0x80>)
    1386:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1388:	001a      	movs	r2, r3
    138a:	7853      	ldrb	r3, [r2, #1]
    138c:	09db      	lsrs	r3, r3, #7
    138e:	d1fc      	bne.n	138a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1390:	0703      	lsls	r3, r0, #28
    1392:	d508      	bpl.n	13a6 <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
    1394:	4b10      	ldr	r3, [pc, #64]	; (13d8 <_gclk_init_generators_by_fref+0x78>)
    1396:	4a13      	ldr	r2, [pc, #76]	; (13e4 <_gclk_init_generators_by_fref+0x84>)
    1398:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    139a:	4a13      	ldr	r2, [pc, #76]	; (13e8 <_gclk_init_generators_by_fref+0x88>)
    139c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    139e:	001a      	movs	r2, r3
    13a0:	7853      	ldrb	r3, [r2, #1]
    13a2:	09db      	lsrs	r3, r3, #7
    13a4:	d1fc      	bne.n	13a0 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    13a6:	0643      	lsls	r3, r0, #25
    13a8:	d509      	bpl.n	13be <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    13aa:	4b0b      	ldr	r3, [pc, #44]	; (13d8 <_gclk_init_generators_by_fref+0x78>)
    13ac:	2283      	movs	r2, #131	; 0x83
    13ae:	0052      	lsls	r2, r2, #1
    13b0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    13b2:	4a0e      	ldr	r2, [pc, #56]	; (13ec <_gclk_init_generators_by_fref+0x8c>)
    13b4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    13b6:	001a      	movs	r2, r3
    13b8:	7853      	ldrb	r3, [r2, #1]
    13ba:	09db      	lsrs	r3, r3, #7
    13bc:	d1fc      	bne.n	13b8 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    13be:	0603      	lsls	r3, r0, #24
    13c0:	d508      	bpl.n	13d4 <_gclk_init_generators_by_fref+0x74>
	((Gclk *)hw)->GENDIV.reg = data;
    13c2:	4b05      	ldr	r3, [pc, #20]	; (13d8 <_gclk_init_generators_by_fref+0x78>)
    13c4:	4a0a      	ldr	r2, [pc, #40]	; (13f0 <_gclk_init_generators_by_fref+0x90>)
    13c6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    13c8:	4a0a      	ldr	r2, [pc, #40]	; (13f4 <_gclk_init_generators_by_fref+0x94>)
    13ca:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    13cc:	001a      	movs	r2, r3
    13ce:	7853      	ldrb	r3, [r2, #1]
    13d0:	09db      	lsrs	r3, r3, #7
    13d2:	d1fc      	bne.n	13ce <_gclk_init_generators_by_fref+0x6e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    13d4:	4770      	bx	lr
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	40000c00 	.word	0x40000c00
    13dc:	00090800 	.word	0x00090800
    13e0:	00290701 	.word	0x00290701
    13e4:	00000803 	.word	0x00000803
    13e8:	00010603 	.word	0x00010603
    13ec:	00090306 	.word	0x00090306
    13f0:	00002007 	.word	0x00002007
    13f4:	00090307 	.word	0x00090307

000013f8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    13f8:	4b06      	ldr	r3, [pc, #24]	; (1414 <_pm_init+0x1c>)
    13fa:	7a1a      	ldrb	r2, [r3, #8]
    13fc:	b2d2      	uxtb	r2, r2
    13fe:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1400:	7a5a      	ldrb	r2, [r3, #9]
    1402:	b2d2      	uxtb	r2, r2
    1404:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1406:	7a9a      	ldrb	r2, [r3, #10]
    1408:	b2d2      	uxtb	r2, r2
    140a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    140c:	7ada      	ldrb	r2, [r3, #11]
    140e:	b2d2      	uxtb	r2, r2
    1410:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1412:	4770      	bx	lr
    1414:	40000400 	.word	0x40000400

00001418 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1418:	4b0e      	ldr	r3, [pc, #56]	; (1454 <_sysctrl_init_sources+0x3c>)
    141a:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    141c:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    141e:	480e      	ldr	r0, [pc, #56]	; (1458 <_sysctrl_init_sources+0x40>)
    1420:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1422:	0f92      	lsrs	r2, r2, #30
    1424:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1426:	2002      	movs	r0, #2
    1428:	4302      	orrs	r2, r0
    142a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    142c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    142e:	699a      	ldr	r2, [r3, #24]
    1430:	4302      	orrs	r2, r0
    1432:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1434:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1436:	211f      	movs	r1, #31
    1438:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    143a:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    143c:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    143e:	2208      	movs	r2, #8
    1440:	68cb      	ldr	r3, [r1, #12]
    1442:	421a      	tst	r2, r3
    1444:	d0fc      	beq.n	1440 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1446:	4a03      	ldr	r2, [pc, #12]	; (1454 <_sysctrl_init_sources+0x3c>)
    1448:	6a13      	ldr	r3, [r2, #32]
    144a:	2180      	movs	r1, #128	; 0x80
    144c:	430b      	orrs	r3, r1
    144e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1450:	4770      	bx	lr
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	40000800 	.word	0x40000800
    1458:	0fff0000 	.word	0x0fff0000

0000145c <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    145c:	b530      	push	{r4, r5, lr}
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    145e:	2202      	movs	r2, #2
    1460:	4b28      	ldr	r3, [pc, #160]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
    1462:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1464:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1466:	320e      	adds	r2, #14
    1468:	68cb      	ldr	r3, [r1, #12]
    146a:	421a      	tst	r2, r3
    146c:	d0fc      	beq.n	1468 <_sysctrl_init_referenced_generators+0xc>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    146e:	4a26      	ldr	r2, [pc, #152]	; (1508 <_sysctrl_init_referenced_generators+0xac>)
    1470:	4b24      	ldr	r3, [pc, #144]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
    1472:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1474:	4b25      	ldr	r3, [pc, #148]	; (150c <_sysctrl_init_referenced_generators+0xb0>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	0e9b      	lsrs	r3, r3, #26
    147a:	2b3f      	cmp	r3, #63	; 0x3f
    147c:	d038      	beq.n	14f0 <_sysctrl_init_referenced_generators+0x94>
    147e:	029b      	lsls	r3, r3, #10
    1480:	2280      	movs	r2, #128	; 0x80
    1482:	0092      	lsls	r2, r2, #2
    1484:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1486:	4b1f      	ldr	r3, [pc, #124]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
    1488:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    148a:	2293      	movs	r2, #147	; 0x93
    148c:	0052      	lsls	r2, r2, #1
    148e:	849a      	strh	r2, [r3, #36]	; 0x24
	((Gclk *)hw)->CLKCTRL.reg = data;
    1490:	491f      	ldr	r1, [pc, #124]	; (1510 <_sysctrl_init_referenced_generators+0xb4>)
    1492:	4a20      	ldr	r2, [pc, #128]	; (1514 <_sysctrl_init_referenced_generators+0xb8>)
    1494:	8051      	strh	r1, [r2, #2]
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    1496:	2102      	movs	r1, #2
    1498:	2244      	movs	r2, #68	; 0x44
    149a:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    149c:	4a1e      	ldr	r2, [pc, #120]	; (1518 <_sysctrl_init_referenced_generators+0xbc>)
    149e:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    14a0:	2220      	movs	r2, #32
    14a2:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    14a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    14a6:	075b      	lsls	r3, r3, #29
    14a8:	d525      	bpl.n	14f6 <_sysctrl_init_referenced_generators+0x9a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    14aa:	4916      	ldr	r1, [pc, #88]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
	tmp &= mask;
    14ac:	3a10      	subs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    14ae:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    14b0:	421a      	tst	r2, r3
    14b2:	d0fc      	beq.n	14ae <_sysctrl_init_referenced_generators+0x52>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    14b4:	4a13      	ldr	r2, [pc, #76]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
    14b6:	2350      	movs	r3, #80	; 0x50
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    14b8:	2004      	movs	r0, #4
    14ba:	2401      	movs	r4, #1
    14bc:	2502      	movs	r5, #2
    14be:	5cd1      	ldrb	r1, [r2, r3]
    14c0:	4201      	tst	r1, r0
    14c2:	d105      	bne.n	14d0 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    14c4:	5cd1      	ldrb	r1, [r2, r3]
    14c6:	4221      	tst	r1, r4
    14c8:	d102      	bne.n	14d0 <_sysctrl_init_referenced_generators+0x74>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    14ca:	5cd1      	ldrb	r1, [r2, r3]
    14cc:	4229      	tst	r1, r5
    14ce:	d0f6      	beq.n	14be <_sysctrl_init_referenced_generators+0x62>
	((Sysctrl *)hw)->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ONDEMAND;
    14d0:	490c      	ldr	r1, [pc, #48]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
    14d2:	2244      	movs	r2, #68	; 0x44
    14d4:	5c8b      	ldrb	r3, [r1, r2]
    14d6:	2080      	movs	r0, #128	; 0x80
    14d8:	4303      	orrs	r3, r0
    14da:	548b      	strb	r3, [r1, r2]
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    14dc:	4a0d      	ldr	r2, [pc, #52]	; (1514 <_sysctrl_init_referenced_generators+0xb8>)
    14de:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    14e0:	09db      	lsrs	r3, r3, #7
    14e2:	d1fc      	bne.n	14de <_sysctrl_init_referenced_generators+0x82>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    14e4:	4a07      	ldr	r2, [pc, #28]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
    14e6:	6993      	ldr	r3, [r2, #24]
    14e8:	2102      	movs	r1, #2
    14ea:	438b      	bics	r3, r1
    14ec:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    14ee:	bd30      	pop	{r4, r5, pc}
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    14f0:	22fc      	movs	r2, #252	; 0xfc
    14f2:	01d2      	lsls	r2, r2, #7
    14f4:	e7c7      	b.n	1486 <_sysctrl_init_referenced_generators+0x2a>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    14f6:	4903      	ldr	r1, [pc, #12]	; (1504 <_sysctrl_init_referenced_generators+0xa8>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    14f8:	2210      	movs	r2, #16
    14fa:	68cb      	ldr	r3, [r1, #12]
    14fc:	421a      	tst	r2, r3
    14fe:	d0fc      	beq.n	14fa <_sysctrl_init_referenced_generators+0x9e>
    1500:	e7d8      	b.n	14b4 <_sysctrl_init_referenced_generators+0x58>
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	40000800 	.word	0x40000800
    1508:	0401bb80 	.word	0x0401bb80
    150c:	00806024 	.word	0x00806024
    1510:	00004601 	.word	0x00004601
    1514:	40000c00 	.word	0x40000c00
    1518:	000d05b7 	.word	0x000d05b7

0000151c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    151e:	0007      	movs	r7, r0
    1520:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1522:	4b3c      	ldr	r3, [pc, #240]	; (1614 <_timer_init+0xf8>)
    1524:	18cd      	adds	r5, r1, r3
    1526:	0aad      	lsrs	r5, r5, #10
    1528:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    152a:	2d00      	cmp	r5, #0
    152c:	d051      	beq.n	15d2 <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
    152e:	229f      	movs	r2, #159	; 0x9f
    1530:	0052      	lsls	r2, r2, #1
    1532:	4939      	ldr	r1, [pc, #228]	; (1618 <_timer_init+0xfc>)
    1534:	2000      	movs	r0, #0
    1536:	4b39      	ldr	r3, [pc, #228]	; (161c <_timer_init+0x100>)
    1538:	4798      	blx	r3
	return -1;
    153a:	2601      	movs	r6, #1
    153c:	4276      	negs	r6, r6
	device->hw = hw;
    153e:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1540:	228b      	movs	r2, #139	; 0x8b
    1542:	4935      	ldr	r1, [pc, #212]	; (1618 <_timer_init+0xfc>)
    1544:	2001      	movs	r0, #1
    1546:	4b35      	ldr	r3, [pc, #212]	; (161c <_timer_init+0x100>)
    1548:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    154a:	7be3      	ldrb	r3, [r4, #15]
    154c:	09db      	lsrs	r3, r3, #7
    154e:	d1fc      	bne.n	154a <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1550:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1552:	079b      	lsls	r3, r3, #30
    1554:	d504      	bpl.n	1560 <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1556:	2300      	movs	r3, #0
    1558:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    155a:	7be3      	ldrb	r3, [r4, #15]
    155c:	09db      	lsrs	r3, r3, #7
    155e:	d1fc      	bne.n	155a <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1560:	2301      	movs	r3, #1
    1562:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1564:	7be3      	ldrb	r3, [r4, #15]
    1566:	09db      	lsrs	r3, r3, #7
    1568:	d1fc      	bne.n	1564 <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    156a:	00b3      	lsls	r3, r6, #2
    156c:	199b      	adds	r3, r3, r6
    156e:	009a      	lsls	r2, r3, #2
    1570:	4b2b      	ldr	r3, [pc, #172]	; (1620 <_timer_init+0x104>)
    1572:	189b      	adds	r3, r3, r2
    1574:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1576:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1578:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    157a:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    157c:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    157e:	8163      	strh	r3, [r4, #10]
    1580:	230c      	movs	r3, #12
    1582:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1584:	2b08      	cmp	r3, #8
    1586:	d026      	beq.n	15d6 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1588:	2b00      	cmp	r3, #0
    158a:	d12e      	bne.n	15ea <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    158c:	00b3      	lsls	r3, r6, #2
    158e:	199b      	adds	r3, r3, r6
    1590:	009b      	lsls	r3, r3, #2
    1592:	4a23      	ldr	r2, [pc, #140]	; (1620 <_timer_init+0x104>)
    1594:	18d3      	adds	r3, r2, r3
    1596:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1598:	8323      	strh	r3, [r4, #24]
    159a:	2300      	movs	r3, #0
    159c:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    159e:	2301      	movs	r3, #1
    15a0:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    15a2:	4b20      	ldr	r3, [pc, #128]	; (1624 <_timer_init+0x108>)
    15a4:	429c      	cmp	r4, r3
    15a6:	d031      	beq.n	160c <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    15a8:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    15aa:	b2eb      	uxtb	r3, r5
    15ac:	062a      	lsls	r2, r5, #24
    15ae:	d40e      	bmi.n	15ce <_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15b0:	221f      	movs	r2, #31
    15b2:	401a      	ands	r2, r3
    15b4:	2301      	movs	r3, #1
    15b6:	4093      	lsls	r3, r2
    15b8:	4a1b      	ldr	r2, [pc, #108]	; (1628 <_timer_init+0x10c>)
    15ba:	2180      	movs	r1, #128	; 0x80
    15bc:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    15be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15c2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15c6:	3101      	adds	r1, #1
    15c8:	31ff      	adds	r1, #255	; 0xff
    15ca:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15cc:	6013      	str	r3, [r2, #0]
}
    15ce:	2000      	movs	r0, #0
    15d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    15d2:	2600      	movs	r6, #0
    15d4:	e7b3      	b.n	153e <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    15d6:	00b3      	lsls	r3, r6, #2
    15d8:	199e      	adds	r6, r3, r6
    15da:	00b6      	lsls	r6, r6, #2
    15dc:	4b10      	ldr	r3, [pc, #64]	; (1620 <_timer_init+0x104>)
    15de:	199e      	adds	r6, r3, r6
    15e0:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    15e2:	61a3      	str	r3, [r4, #24]
    15e4:	2300      	movs	r3, #0
    15e6:	61e3      	str	r3, [r4, #28]
    15e8:	e7d9      	b.n	159e <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    15ea:	2b04      	cmp	r3, #4
    15ec:	d1d7      	bne.n	159e <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    15ee:	480c      	ldr	r0, [pc, #48]	; (1620 <_timer_init+0x104>)
    15f0:	00b3      	lsls	r3, r6, #2
    15f2:	199a      	adds	r2, r3, r6
    15f4:	0092      	lsls	r2, r2, #2
    15f6:	1882      	adds	r2, r0, r2
    15f8:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    15fa:	7622      	strb	r2, [r4, #24]
    15fc:	2200      	movs	r2, #0
    15fe:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1600:	199b      	adds	r3, r3, r6
    1602:	009b      	lsls	r3, r3, #2
    1604:	18c3      	adds	r3, r0, r3
    1606:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1608:	7523      	strb	r3, [r4, #20]
    160a:	e7c8      	b.n	159e <_timer_init+0x82>
		_tc3_dev = (struct _timer_device *)dev;
    160c:	4b07      	ldr	r3, [pc, #28]	; (162c <_timer_init+0x110>)
    160e:	601f      	str	r7, [r3, #0]
    1610:	e7ca      	b.n	15a8 <_timer_init+0x8c>
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	bdffd400 	.word	0xbdffd400
    1618:	00003bd4 	.word	0x00003bd4
    161c:	000011f9 	.word	0x000011f9
    1620:	00003bc0 	.word	0x00003bc0
    1624:	42002c00 	.word	0x42002c00
    1628:	e000e100 	.word	0xe000e100
    162c:	200005d4 	.word	0x200005d4

00001630 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1630:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1632:	8813      	ldrh	r3, [r2, #0]
    1634:	2102      	movs	r1, #2
    1636:	430b      	orrs	r3, r1
    1638:	8013      	strh	r3, [r2, #0]
}
    163a:	4770      	bx	lr

0000163c <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    163c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    163e:	8813      	ldrh	r3, [r2, #0]
    1640:	2102      	movs	r1, #2
    1642:	438b      	bics	r3, r1
    1644:	8013      	strh	r3, [r2, #0]
}
    1646:	4770      	bx	lr

00001648 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1648:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    164a:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    164c:	0780      	lsls	r0, r0, #30
    164e:	0fc0      	lsrs	r0, r0, #31
}
    1650:	4770      	bx	lr

00001652 <_tc_get_timer>:
}
    1652:	2000      	movs	r0, #0
    1654:	4770      	bx	lr
	...

00001658 <_timer_set_irq>:
{
    1658:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    165a:	68c0      	ldr	r0, [r0, #12]
    165c:	4b04      	ldr	r3, [pc, #16]	; (1670 <_timer_set_irq+0x18>)
    165e:	469c      	mov	ip, r3
    1660:	4460      	add	r0, ip
    1662:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    1664:	3012      	adds	r0, #18
    1666:	b2c0      	uxtb	r0, r0
    1668:	4b02      	ldr	r3, [pc, #8]	; (1674 <_timer_set_irq+0x1c>)
    166a:	4798      	blx	r3
}
    166c:	bd10      	pop	{r4, pc}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	bdffd400 	.word	0xbdffd400
    1674:	000012e9 	.word	0x000012e9

00001678 <TC3_Handler>:
{
    1678:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    167a:	4b06      	ldr	r3, [pc, #24]	; (1694 <TC3_Handler+0x1c>)
    167c:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    167e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1680:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1682:	07d2      	lsls	r2, r2, #31
    1684:	d400      	bmi.n	1688 <TC3_Handler+0x10>
}
    1686:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1688:	2201      	movs	r2, #1
    168a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    168c:	6803      	ldr	r3, [r0, #0]
    168e:	4798      	blx	r3
}
    1690:	e7f9      	b.n	1686 <TC3_Handler+0xe>
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	200005d4 	.word	0x200005d4

00001698 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1698:	2000      	movs	r0, #0
    169a:	4770      	bx	lr

0000169c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    169c:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    169e:	7c83      	ldrb	r3, [r0, #18]
    16a0:	220f      	movs	r2, #15
    16a2:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    16a4:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    16a6:	3a08      	subs	r2, #8
    16a8:	400a      	ands	r2, r1
    16aa:	2a01      	cmp	r2, #1
    16ac:	d00b      	beq.n	16c6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16ae:	015a      	lsls	r2, r3, #5
    16b0:	491a      	ldr	r1, [pc, #104]	; (171c <_usb_d_dev_handle_setup+0x80>)
    16b2:	468c      	mov	ip, r1
    16b4:	4462      	add	r2, ip
    16b6:	2110      	movs	r1, #16
    16b8:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    16ba:	015b      	lsls	r3, r3, #5
    16bc:	4a18      	ldr	r2, [pc, #96]	; (1720 <_usb_d_dev_handle_setup+0x84>)
    16be:	4694      	mov	ip, r2
    16c0:	4463      	add	r3, ip
    16c2:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    16c4:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    16c6:	064a      	lsls	r2, r1, #25
    16c8:	d50e      	bpl.n	16e8 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    16ca:	7cc2      	ldrb	r2, [r0, #19]
    16cc:	2140      	movs	r1, #64	; 0x40
    16ce:	438a      	bics	r2, r1
    16d0:	74c2      	strb	r2, [r0, #19]
    16d2:	015a      	lsls	r2, r3, #5
    16d4:	4c13      	ldr	r4, [pc, #76]	; (1724 <_usb_d_dev_handle_setup+0x88>)
    16d6:	46a4      	mov	ip, r4
    16d8:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    16da:	2580      	movs	r5, #128	; 0x80
    16dc:	2482      	movs	r4, #130	; 0x82
    16de:	0064      	lsls	r4, r4, #1
    16e0:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    16e2:	2406      	movs	r4, #6
    16e4:	34ff      	adds	r4, #255	; 0xff
    16e6:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    16e8:	7cc2      	ldrb	r2, [r0, #19]
    16ea:	2108      	movs	r1, #8
    16ec:	438a      	bics	r2, r1
    16ee:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    16f0:	015a      	lsls	r2, r3, #5
    16f2:	490d      	ldr	r1, [pc, #52]	; (1728 <_usb_d_dev_handle_setup+0x8c>)
    16f4:	1889      	adds	r1, r1, r2
    16f6:	2400      	movs	r4, #0
    16f8:	728c      	strb	r4, [r1, #10]
    16fa:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16fc:	0013      	movs	r3, r2
    16fe:	4907      	ldr	r1, [pc, #28]	; (171c <_usb_d_dev_handle_setup+0x80>)
    1700:	468c      	mov	ip, r1
    1702:	4463      	add	r3, ip
    1704:	216f      	movs	r1, #111	; 0x6f
    1706:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1708:	4b05      	ldr	r3, [pc, #20]	; (1720 <_usb_d_dev_handle_setup+0x84>)
    170a:	469c      	mov	ip, r3
    170c:	4462      	add	r2, ip
    170e:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1710:	7c80      	ldrb	r0, [r0, #18]
    1712:	4b06      	ldr	r3, [pc, #24]	; (172c <_usb_d_dev_handle_setup+0x90>)
    1714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1716:	4798      	blx	r3
    1718:	e7d4      	b.n	16c4 <_usb_d_dev_handle_setup+0x28>
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	41005100 	.word	0x41005100
    1720:	41005108 	.word	0x41005108
    1724:	41005000 	.word	0x41005000
    1728:	200005d8 	.word	0x200005d8
    172c:	20000658 	.word	0x20000658

00001730 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1730:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1732:	2220      	movs	r2, #32
    1734:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1736:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1738:	7c81      	ldrb	r1, [r0, #18]
    173a:	230f      	movs	r3, #15
    173c:	400b      	ands	r3, r1
    173e:	015b      	lsls	r3, r3, #5
    1740:	4905      	ldr	r1, [pc, #20]	; (1758 <_usb_d_dev_handle_stall+0x28>)
    1742:	468c      	mov	ip, r1
    1744:	4463      	add	r3, ip
    1746:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1748:	6882      	ldr	r2, [r0, #8]
    174a:	7c80      	ldrb	r0, [r0, #18]
    174c:	4b03      	ldr	r3, [pc, #12]	; (175c <_usb_d_dev_handle_stall+0x2c>)
    174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1750:	2101      	movs	r1, #1
    1752:	4798      	blx	r3
}
    1754:	bd10      	pop	{r4, pc}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	41005108 	.word	0x41005108
    175c:	20000658 	.word	0x20000658

00001760 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1760:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1762:	7c83      	ldrb	r3, [r0, #18]
    1764:	2bff      	cmp	r3, #255	; 0xff
    1766:	d002      	beq.n	176e <_usb_d_dev_trans_done+0xe>
    1768:	7cc2      	ldrb	r2, [r0, #19]
    176a:	0652      	lsls	r2, r2, #25
    176c:	d400      	bmi.n	1770 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    176e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1770:	7cc2      	ldrb	r2, [r0, #19]
    1772:	2440      	movs	r4, #64	; 0x40
    1774:	43a2      	bics	r2, r4
    1776:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1778:	6882      	ldr	r2, [r0, #8]
    177a:	4802      	ldr	r0, [pc, #8]	; (1784 <_usb_d_dev_trans_done+0x24>)
    177c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    177e:	0018      	movs	r0, r3
    1780:	47a0      	blx	r4
    1782:	e7f4      	b.n	176e <_usb_d_dev_trans_done+0xe>
    1784:	20000658 	.word	0x20000658

00001788 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1788:	b530      	push	{r4, r5, lr}
    178a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    178c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    178e:	ac01      	add	r4, sp, #4
    1790:	2525      	movs	r5, #37	; 0x25
    1792:	7025      	strb	r5, [r4, #0]
    1794:	3525      	adds	r5, #37	; 0x25
    1796:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1798:	2bff      	cmp	r3, #255	; 0xff
    179a:	d01b      	beq.n	17d4 <_usb_d_dev_trans_stop+0x4c>
    179c:	7cc4      	ldrb	r4, [r0, #19]
    179e:	0664      	lsls	r4, r4, #25
    17a0:	d518      	bpl.n	17d4 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    17a2:	240f      	movs	r4, #15
    17a4:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    17a6:	2900      	cmp	r1, #0
    17a8:	d016      	beq.n	17d8 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    17aa:	015c      	lsls	r4, r3, #5
    17ac:	4d0e      	ldr	r5, [pc, #56]	; (17e8 <_usb_d_dev_trans_stop+0x60>)
    17ae:	46ac      	mov	ip, r5
    17b0:	4464      	add	r4, ip
    17b2:	2580      	movs	r5, #128	; 0x80
    17b4:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    17b6:	ac01      	add	r4, sp, #4
    17b8:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17ba:	0159      	lsls	r1, r3, #5
    17bc:	4d0a      	ldr	r5, [pc, #40]	; (17e8 <_usb_d_dev_trans_stop+0x60>)
    17be:	46ac      	mov	ip, r5
    17c0:	4461      	add	r1, ip
    17c2:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17c4:	015b      	lsls	r3, r3, #5
    17c6:	4909      	ldr	r1, [pc, #36]	; (17ec <_usb_d_dev_trans_stop+0x64>)
    17c8:	468c      	mov	ip, r1
    17ca:	4463      	add	r3, ip
    17cc:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    17ce:	0011      	movs	r1, r2
    17d0:	4b07      	ldr	r3, [pc, #28]	; (17f0 <_usb_d_dev_trans_stop+0x68>)
    17d2:	4798      	blx	r3
}
    17d4:	b003      	add	sp, #12
    17d6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    17d8:	015c      	lsls	r4, r3, #5
    17da:	4d03      	ldr	r5, [pc, #12]	; (17e8 <_usb_d_dev_trans_stop+0x60>)
    17dc:	46ac      	mov	ip, r5
    17de:	4464      	add	r4, ip
    17e0:	2540      	movs	r5, #64	; 0x40
    17e2:	7165      	strb	r5, [r4, #5]
    17e4:	e7e7      	b.n	17b6 <_usb_d_dev_trans_stop+0x2e>
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	41005100 	.word	0x41005100
    17ec:	41005108 	.word	0x41005108
    17f0:	00001761 	.word	0x00001761

000017f4 <_usb_d_dev_handle_trfail>:
{
    17f4:	b570      	push	{r4, r5, r6, lr}
    17f6:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    17f8:	7c83      	ldrb	r3, [r0, #18]
    17fa:	220f      	movs	r2, #15
    17fc:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    17fe:	aa01      	add	r2, sp, #4
    1800:	2404      	movs	r4, #4
    1802:	7014      	strb	r4, [r2, #0]
    1804:	3404      	adds	r4, #4
    1806:	7054      	strb	r4, [r2, #1]
    1808:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    180a:	2900      	cmp	r1, #0
    180c:	d031      	beq.n	1872 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    180e:	001a      	movs	r2, r3
    1810:	3208      	adds	r2, #8
    1812:	0152      	lsls	r2, r2, #5
    1814:	4c32      	ldr	r4, [pc, #200]	; (18e0 <_usb_d_dev_handle_trfail+0xec>)
    1816:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1818:	0664      	lsls	r4, r4, #25
    181a:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    181c:	010a      	lsls	r2, r1, #4
    181e:	1952      	adds	r2, r2, r5
    1820:	4d30      	ldr	r5, [pc, #192]	; (18e4 <_usb_d_dev_handle_trfail+0xf0>)
    1822:	18aa      	adds	r2, r5, r2
    1824:	7a95      	ldrb	r5, [r2, #10]
    1826:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1828:	2c02      	cmp	r4, #2
    182a:	d02a      	beq.n	1882 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    182c:	07ac      	lsls	r4, r5, #30
    182e:	d541      	bpl.n	18b4 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1830:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1832:	7a94      	ldrb	r4, [r2, #10]
    1834:	2602      	movs	r6, #2
    1836:	43b4      	bics	r4, r6
    1838:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    183a:	aa01      	add	r2, sp, #4
    183c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    183e:	015a      	lsls	r2, r3, #5
    1840:	4e29      	ldr	r6, [pc, #164]	; (18e8 <_usb_d_dev_handle_trfail+0xf4>)
    1842:	46b4      	mov	ip, r6
    1844:	4462      	add	r2, ip
    1846:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1848:	015b      	lsls	r3, r3, #5
    184a:	4a28      	ldr	r2, [pc, #160]	; (18ec <_usb_d_dev_handle_trfail+0xf8>)
    184c:	4694      	mov	ip, r2
    184e:	4463      	add	r3, ip
    1850:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1852:	2307      	movs	r3, #7
    1854:	402b      	ands	r3, r5
    1856:	2b01      	cmp	r3, #1
    1858:	d13f      	bne.n	18da <_usb_d_dev_handle_trfail+0xe6>
    185a:	7cc3      	ldrb	r3, [r0, #19]
    185c:	065b      	lsls	r3, r3, #25
    185e:	d53c      	bpl.n	18da <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1860:	7cc3      	ldrb	r3, [r0, #19]
    1862:	09db      	lsrs	r3, r3, #7
    1864:	4299      	cmp	r1, r3
    1866:	d038      	beq.n	18da <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1868:	2200      	movs	r2, #0
    186a:	0019      	movs	r1, r3
    186c:	4b20      	ldr	r3, [pc, #128]	; (18f0 <_usb_d_dev_handle_trfail+0xfc>)
    186e:	4798      	blx	r3
    1870:	e033      	b.n	18da <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1872:	001a      	movs	r2, r3
    1874:	3208      	adds	r2, #8
    1876:	0152      	lsls	r2, r2, #5
    1878:	4c19      	ldr	r4, [pc, #100]	; (18e0 <_usb_d_dev_handle_trfail+0xec>)
    187a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    187c:	2207      	movs	r2, #7
    187e:	4014      	ands	r4, r2
    1880:	e7cc      	b.n	181c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1882:	07ec      	lsls	r4, r5, #31
    1884:	d5d2      	bpl.n	182c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1886:	7a94      	ldrb	r4, [r2, #10]
    1888:	2501      	movs	r5, #1
    188a:	43ac      	bics	r4, r5
    188c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    188e:	aa01      	add	r2, sp, #4
    1890:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1892:	015a      	lsls	r2, r3, #5
    1894:	4d14      	ldr	r5, [pc, #80]	; (18e8 <_usb_d_dev_handle_trfail+0xf4>)
    1896:	46ac      	mov	ip, r5
    1898:	4462      	add	r2, ip
    189a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    189c:	015b      	lsls	r3, r3, #5
    189e:	4a13      	ldr	r2, [pc, #76]	; (18ec <_usb_d_dev_handle_trfail+0xf8>)
    18a0:	4694      	mov	ip, r2
    18a2:	4463      	add	r3, ip
    18a4:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    18a6:	1e4b      	subs	r3, r1, #1
    18a8:	4199      	sbcs	r1, r3
    18aa:	b2c9      	uxtb	r1, r1
    18ac:	2204      	movs	r2, #4
    18ae:	4b10      	ldr	r3, [pc, #64]	; (18f0 <_usb_d_dev_handle_trfail+0xfc>)
    18b0:	4798      	blx	r3
    18b2:	e012      	b.n	18da <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    18b4:	005a      	lsls	r2, r3, #1
    18b6:	1852      	adds	r2, r2, r1
    18b8:	0112      	lsls	r2, r2, #4
    18ba:	480a      	ldr	r0, [pc, #40]	; (18e4 <_usb_d_dev_handle_trfail+0xf0>)
    18bc:	1882      	adds	r2, r0, r2
    18be:	2000      	movs	r0, #0
    18c0:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    18c2:	aa01      	add	r2, sp, #4
    18c4:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18c6:	015a      	lsls	r2, r3, #5
    18c8:	4807      	ldr	r0, [pc, #28]	; (18e8 <_usb_d_dev_handle_trfail+0xf4>)
    18ca:	4684      	mov	ip, r0
    18cc:	4462      	add	r2, ip
    18ce:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18d0:	015b      	lsls	r3, r3, #5
    18d2:	4a06      	ldr	r2, [pc, #24]	; (18ec <_usb_d_dev_handle_trfail+0xf8>)
    18d4:	4694      	mov	ip, r2
    18d6:	4463      	add	r3, ip
    18d8:	7019      	strb	r1, [r3, #0]
}
    18da:	b002      	add	sp, #8
    18dc:	bd70      	pop	{r4, r5, r6, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	41005000 	.word	0x41005000
    18e4:	200005d8 	.word	0x200005d8
    18e8:	41005100 	.word	0x41005100
    18ec:	41005108 	.word	0x41005108
    18f0:	00001789 	.word	0x00001789

000018f4 <_usb_d_dev_reset_epts>:
{
    18f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f6:	46c6      	mov	lr, r8
    18f8:	b500      	push	{lr}
    18fa:	4d0c      	ldr	r5, [pc, #48]	; (192c <_usb_d_dev_reset_epts+0x38>)
    18fc:	002c      	movs	r4, r5
    18fe:	3434      	adds	r4, #52	; 0x34
    1900:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1902:	4b0b      	ldr	r3, [pc, #44]	; (1930 <_usb_d_dev_reset_epts+0x3c>)
    1904:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1906:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1908:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    190a:	2103      	movs	r1, #3
    190c:	0020      	movs	r0, r4
    190e:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1910:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1912:	74e6      	strb	r6, [r4, #19]
    1914:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1916:	42ac      	cmp	r4, r5
    1918:	d1f7      	bne.n	190a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    191a:	22a0      	movs	r2, #160	; 0xa0
    191c:	2100      	movs	r1, #0
    191e:	4805      	ldr	r0, [pc, #20]	; (1934 <_usb_d_dev_reset_epts+0x40>)
    1920:	4b05      	ldr	r3, [pc, #20]	; (1938 <_usb_d_dev_reset_epts+0x44>)
    1922:	4798      	blx	r3
}
    1924:	bc04      	pop	{r2}
    1926:	4690      	mov	r8, r2
    1928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	20000658 	.word	0x20000658
    1930:	00001761 	.word	0x00001761
    1934:	200005d8 	.word	0x200005d8
    1938:	0000385d 	.word	0x0000385d

0000193c <_usb_d_dev_in_next>:
{
    193c:	b5f0      	push	{r4, r5, r6, r7, lr}
    193e:	46c6      	mov	lr, r8
    1940:	b500      	push	{lr}
    1942:	0004      	movs	r4, r0
    1944:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1946:	7c83      	ldrb	r3, [r0, #18]
    1948:	250f      	movs	r5, #15
    194a:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    194c:	2900      	cmp	r1, #0
    194e:	d100      	bne.n	1952 <_usb_d_dev_in_next+0x16>
    1950:	e0aa      	b.n	1aa8 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1952:	016a      	lsls	r2, r5, #5
    1954:	4b5a      	ldr	r3, [pc, #360]	; (1ac0 <_usb_d_dev_in_next+0x184>)
    1956:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1958:	6958      	ldr	r0, [r3, #20]
    195a:	0480      	lsls	r0, r0, #18
    195c:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    195e:	8a23      	ldrh	r3, [r4, #16]
    1960:	4a58      	ldr	r2, [pc, #352]	; (1ac4 <_usb_d_dev_in_next+0x188>)
    1962:	4293      	cmp	r3, r2
    1964:	d100      	bne.n	1968 <_usb_d_dev_in_next+0x2c>
    1966:	e09a      	b.n	1a9e <_usb_d_dev_in_next+0x162>
    1968:	3b01      	subs	r3, #1
    196a:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    196c:	7ce3      	ldrb	r3, [r4, #19]
    196e:	2707      	movs	r7, #7
    1970:	401f      	ands	r7, r3
	if (isr) {
    1972:	2e00      	cmp	r6, #0
    1974:	d005      	beq.n	1982 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1976:	016b      	lsls	r3, r5, #5
    1978:	4953      	ldr	r1, [pc, #332]	; (1ac8 <_usb_d_dev_in_next+0x18c>)
    197a:	468c      	mov	ip, r1
    197c:	4463      	add	r3, ip
    197e:	2102      	movs	r1, #2
    1980:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1982:	68a3      	ldr	r3, [r4, #8]
    1984:	18c1      	adds	r1, r0, r3
    1986:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1988:	6863      	ldr	r3, [r4, #4]
    198a:	4299      	cmp	r1, r3
    198c:	d24a      	bcs.n	1a24 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    198e:	1a5b      	subs	r3, r3, r1
    1990:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1992:	7ce2      	ldrb	r2, [r4, #19]
    1994:	0692      	lsls	r2, r2, #26
    1996:	d535      	bpl.n	1a04 <_usb_d_dev_in_next+0xc8>
    1998:	8a22      	ldrh	r2, [r4, #16]
    199a:	1c10      	adds	r0, r2, #0
    199c:	b292      	uxth	r2, r2
    199e:	429a      	cmp	r2, r3
    19a0:	d900      	bls.n	19a4 <_usb_d_dev_in_next+0x68>
    19a2:	1c18      	adds	r0, r3, #0
    19a4:	b283      	uxth	r3, r0
    19a6:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    19a8:	6823      	ldr	r3, [r4, #0]
    19aa:	469c      	mov	ip, r3
    19ac:	4461      	add	r1, ip
    19ae:	4642      	mov	r2, r8
    19b0:	68e0      	ldr	r0, [r4, #12]
    19b2:	4b46      	ldr	r3, [pc, #280]	; (1acc <_usb_d_dev_in_next+0x190>)
    19b4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    19b6:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    19b8:	016a      	lsls	r2, r5, #5
    19ba:	4b41      	ldr	r3, [pc, #260]	; (1ac0 <_usb_d_dev_in_next+0x184>)
    19bc:	189b      	adds	r3, r3, r2
    19be:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    19c0:	016a      	lsls	r2, r5, #5
    19c2:	4b3f      	ldr	r3, [pc, #252]	; (1ac0 <_usb_d_dev_in_next+0x184>)
    19c4:	189b      	adds	r3, r3, r2
    19c6:	695a      	ldr	r2, [r3, #20]
    19c8:	4641      	mov	r1, r8
    19ca:	0489      	lsls	r1, r1, #18
    19cc:	0c89      	lsrs	r1, r1, #18
    19ce:	0b92      	lsrs	r2, r2, #14
    19d0:	0392      	lsls	r2, r2, #14
    19d2:	430a      	orrs	r2, r1
    19d4:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    19d6:	695a      	ldr	r2, [r3, #20]
    19d8:	493d      	ldr	r1, [pc, #244]	; (1ad0 <_usb_d_dev_in_next+0x194>)
    19da:	400a      	ands	r2, r1
    19dc:	615a      	str	r2, [r3, #20]
	if (!isr) {
    19de:	2e00      	cmp	r6, #0
    19e0:	d107      	bne.n	19f2 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    19e2:	2f01      	cmp	r7, #1
    19e4:	d059      	beq.n	1a9a <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    19e6:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19e8:	016b      	lsls	r3, r5, #5
    19ea:	493a      	ldr	r1, [pc, #232]	; (1ad4 <_usb_d_dev_in_next+0x198>)
    19ec:	468c      	mov	ip, r1
    19ee:	4463      	add	r3, ip
    19f0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19f2:	016d      	lsls	r5, r5, #5
    19f4:	4b34      	ldr	r3, [pc, #208]	; (1ac8 <_usb_d_dev_in_next+0x18c>)
    19f6:	469c      	mov	ip, r3
    19f8:	4465      	add	r5, ip
    19fa:	2380      	movs	r3, #128	; 0x80
    19fc:	716b      	strb	r3, [r5, #5]
}
    19fe:	bc04      	pop	{r2}
    1a00:	4690      	mov	r8, r2
    1a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a04:	1c1a      	adds	r2, r3, #0
    1a06:	2080      	movs	r0, #128	; 0x80
    1a08:	0180      	lsls	r0, r0, #6
    1a0a:	4283      	cmp	r3, r0
    1a0c:	d901      	bls.n	1a12 <_usb_d_dev_in_next+0xd6>
    1a0e:	4b32      	ldr	r3, [pc, #200]	; (1ad8 <_usb_d_dev_in_next+0x19c>)
    1a10:	881a      	ldrh	r2, [r3, #0]
    1a12:	b293      	uxth	r3, r2
    1a14:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1a16:	6823      	ldr	r3, [r4, #0]
    1a18:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1a1a:	016a      	lsls	r2, r5, #5
    1a1c:	4b28      	ldr	r3, [pc, #160]	; (1ac0 <_usb_d_dev_in_next+0x184>)
    1a1e:	189b      	adds	r3, r3, r2
    1a20:	6119      	str	r1, [r3, #16]
    1a22:	e7cd      	b.n	19c0 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1a24:	7ce3      	ldrb	r3, [r4, #19]
    1a26:	06db      	lsls	r3, r3, #27
    1a28:	d50f      	bpl.n	1a4a <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1a2a:	7ce3      	ldrb	r3, [r4, #19]
    1a2c:	2210      	movs	r2, #16
    1a2e:	4393      	bics	r3, r2
    1a30:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1a32:	016a      	lsls	r2, r5, #5
    1a34:	4b22      	ldr	r3, [pc, #136]	; (1ac0 <_usb_d_dev_in_next+0x184>)
    1a36:	189b      	adds	r3, r3, r2
    1a38:	695a      	ldr	r2, [r3, #20]
    1a3a:	0b92      	lsrs	r2, r2, #14
    1a3c:	0392      	lsls	r2, r2, #14
    1a3e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1a40:	695a      	ldr	r2, [r3, #20]
    1a42:	4923      	ldr	r1, [pc, #140]	; (1ad0 <_usb_d_dev_in_next+0x194>)
    1a44:	400a      	ands	r2, r1
    1a46:	615a      	str	r2, [r3, #20]
    1a48:	e7c9      	b.n	19de <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1a4a:	2f01      	cmp	r7, #1
    1a4c:	d00e      	beq.n	1a6c <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a4e:	016d      	lsls	r5, r5, #5
    1a50:	4b22      	ldr	r3, [pc, #136]	; (1adc <_usb_d_dev_in_next+0x1a0>)
    1a52:	469c      	mov	ip, r3
    1a54:	4465      	add	r5, ip
    1a56:	234a      	movs	r3, #74	; 0x4a
    1a58:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1a5a:	8a21      	ldrh	r1, [r4, #16]
    1a5c:	4002      	ands	r2, r0
    1a5e:	4291      	cmp	r1, r2
    1a60:	d00b      	beq.n	1a7a <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1a62:	2100      	movs	r1, #0
    1a64:	0020      	movs	r0, r4
    1a66:	4b1e      	ldr	r3, [pc, #120]	; (1ae0 <_usb_d_dev_in_next+0x1a4>)
    1a68:	4798      	blx	r3
	return;
    1a6a:	e7c8      	b.n	19fe <_usb_d_dev_in_next+0xc2>
    1a6c:	016d      	lsls	r5, r5, #5
    1a6e:	4b1b      	ldr	r3, [pc, #108]	; (1adc <_usb_d_dev_in_next+0x1a0>)
    1a70:	469c      	mov	ip, r3
    1a72:	4465      	add	r5, ip
    1a74:	234b      	movs	r3, #75	; 0x4b
    1a76:	702b      	strb	r3, [r5, #0]
    1a78:	e7ef      	b.n	1a5a <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1a7a:	7ce3      	ldrb	r3, [r4, #19]
    1a7c:	2240      	movs	r2, #64	; 0x40
    1a7e:	4393      	bics	r3, r2
    1a80:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1a82:	7ca0      	ldrb	r0, [r4, #18]
    1a84:	4b17      	ldr	r3, [pc, #92]	; (1ae4 <_usb_d_dev_in_next+0x1a8>)
    1a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a88:	68a1      	ldr	r1, [r4, #8]
    1a8a:	4798      	blx	r3
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d1b6      	bne.n	19fe <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1a90:	7ce3      	ldrb	r3, [r4, #19]
    1a92:	2240      	movs	r2, #64	; 0x40
    1a94:	4313      	orrs	r3, r2
    1a96:	74e3      	strb	r3, [r4, #19]
    1a98:	e7e3      	b.n	1a62 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1a9a:	224e      	movs	r2, #78	; 0x4e
    1a9c:	e7a4      	b.n	19e8 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a9e:	7ce7      	ldrb	r7, [r4, #19]
    1aa0:	2307      	movs	r3, #7
    1aa2:	401f      	ands	r7, r3
    1aa4:	4a07      	ldr	r2, [pc, #28]	; (1ac4 <_usb_d_dev_in_next+0x188>)
    1aa6:	e766      	b.n	1976 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1aa8:	8a03      	ldrh	r3, [r0, #16]
    1aaa:	4a06      	ldr	r2, [pc, #24]	; (1ac4 <_usb_d_dev_in_next+0x188>)
    1aac:	2000      	movs	r0, #0
    1aae:	4293      	cmp	r3, r2
    1ab0:	d000      	beq.n	1ab4 <_usb_d_dev_in_next+0x178>
    1ab2:	e759      	b.n	1968 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1ab4:	7ce3      	ldrb	r3, [r4, #19]
    1ab6:	2707      	movs	r7, #7
    1ab8:	401f      	ands	r7, r3
    1aba:	2000      	movs	r0, #0
    1abc:	4a01      	ldr	r2, [pc, #4]	; (1ac4 <_usb_d_dev_in_next+0x188>)
    1abe:	e760      	b.n	1982 <_usb_d_dev_in_next+0x46>
    1ac0:	200005d8 	.word	0x200005d8
    1ac4:	000003ff 	.word	0x000003ff
    1ac8:	41005100 	.word	0x41005100
    1acc:	000037d9 	.word	0x000037d9
    1ad0:	f0003fff 	.word	0xf0003fff
    1ad4:	41005109 	.word	0x41005109
    1ad8:	00003be8 	.word	0x00003be8
    1adc:	41005108 	.word	0x41005108
    1ae0:	00001761 	.word	0x00001761
    1ae4:	20000658 	.word	0x20000658

00001ae8 <_usb_d_dev_out_next>:
{
    1ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aea:	46de      	mov	lr, fp
    1aec:	4657      	mov	r7, sl
    1aee:	464e      	mov	r6, r9
    1af0:	4645      	mov	r5, r8
    1af2:	b5e0      	push	{r5, r6, r7, lr}
    1af4:	0004      	movs	r4, r0
    1af6:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1af8:	7c83      	ldrb	r3, [r0, #18]
    1afa:	250f      	movs	r5, #15
    1afc:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1afe:	2900      	cmp	r1, #0
    1b00:	d057      	beq.n	1bb2 <_usb_d_dev_out_next+0xca>
    1b02:	016a      	lsls	r2, r5, #5
    1b04:	4b7d      	ldr	r3, [pc, #500]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1b06:	189b      	adds	r3, r3, r2
    1b08:	685a      	ldr	r2, [r3, #4]
    1b0a:	0112      	lsls	r2, r2, #4
    1b0c:	0c92      	lsrs	r2, r2, #18
    1b0e:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1b10:	685f      	ldr	r7, [r3, #4]
    1b12:	04bf      	lsls	r7, r7, #18
    1b14:	0cbf      	lsrs	r7, r7, #18
    1b16:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b18:	8a06      	ldrh	r6, [r0, #16]
    1b1a:	4b79      	ldr	r3, [pc, #484]	; (1d00 <_usb_d_dev_out_next+0x218>)
    1b1c:	429e      	cmp	r6, r3
    1b1e:	d100      	bne.n	1b22 <_usb_d_dev_out_next+0x3a>
    1b20:	e0cd      	b.n	1cbe <_usb_d_dev_out_next+0x1d6>
    1b22:	3e01      	subs	r6, #1
    1b24:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1b26:	465f      	mov	r7, fp
    1b28:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1b2a:	7ce3      	ldrb	r3, [r4, #19]
    1b2c:	2207      	movs	r2, #7
    1b2e:	401a      	ands	r2, r3
    1b30:	4691      	mov	r9, r2
	if (isr) {
    1b32:	4643      	mov	r3, r8
    1b34:	2b00      	cmp	r3, #0
    1b36:	d005      	beq.n	1b44 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b38:	016b      	lsls	r3, r5, #5
    1b3a:	4a72      	ldr	r2, [pc, #456]	; (1d04 <_usb_d_dev_out_next+0x21c>)
    1b3c:	4694      	mov	ip, r2
    1b3e:	4463      	add	r3, ip
    1b40:	2201      	movs	r2, #1
    1b42:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1b44:	7ce3      	ldrb	r3, [r4, #19]
    1b46:	069b      	lsls	r3, r3, #26
    1b48:	d50f      	bpl.n	1b6a <_usb_d_dev_out_next+0x82>
    1b4a:	6863      	ldr	r3, [r4, #4]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d039      	beq.n	1bc4 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1b50:	68a0      	ldr	r0, [r4, #8]
    1b52:	1a1b      	subs	r3, r3, r0
    1b54:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1b56:	6822      	ldr	r2, [r4, #0]
    1b58:	4694      	mov	ip, r2
    1b5a:	4460      	add	r0, ip
    1b5c:	68e1      	ldr	r1, [r4, #12]
    1b5e:	001a      	movs	r2, r3
    1b60:	42bb      	cmp	r3, r7
    1b62:	d900      	bls.n	1b66 <_usb_d_dev_out_next+0x7e>
    1b64:	003a      	movs	r2, r7
    1b66:	4b68      	ldr	r3, [pc, #416]	; (1d08 <_usb_d_dev_out_next+0x220>)
    1b68:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1b6a:	6863      	ldr	r3, [r4, #4]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d029      	beq.n	1bc4 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1b70:	4642      	mov	r2, r8
    1b72:	2a00      	cmp	r2, #0
    1b74:	d042      	beq.n	1bfc <_usb_d_dev_out_next+0x114>
    1b76:	8a22      	ldrh	r2, [r4, #16]
    1b78:	42ba      	cmp	r2, r7
    1b7a:	d93f      	bls.n	1bfc <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1b7c:	7ce3      	ldrb	r3, [r4, #19]
    1b7e:	2210      	movs	r2, #16
    1b80:	4393      	bics	r3, r2
    1b82:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1b84:	68a3      	ldr	r3, [r4, #8]
    1b86:	445b      	add	r3, fp
    1b88:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1b8a:	464b      	mov	r3, r9
    1b8c:	2b01      	cmp	r3, #1
    1b8e:	d100      	bne.n	1b92 <_usb_d_dev_out_next+0xaa>
    1b90:	e087      	b.n	1ca2 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b92:	016b      	lsls	r3, r5, #5
    1b94:	4a5d      	ldr	r2, [pc, #372]	; (1d0c <_usb_d_dev_out_next+0x224>)
    1b96:	4694      	mov	ip, r2
    1b98:	4463      	add	r3, ip
    1b9a:	2225      	movs	r2, #37	; 0x25
    1b9c:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1b9e:	2d00      	cmp	r5, #0
    1ba0:	d102      	bne.n	1ba8 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1ba2:	4b56      	ldr	r3, [pc, #344]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1ba4:	68e2      	ldr	r2, [r4, #12]
    1ba6:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1ba8:	2100      	movs	r1, #0
    1baa:	0020      	movs	r0, r4
    1bac:	4b58      	ldr	r3, [pc, #352]	; (1d10 <_usb_d_dev_out_next+0x228>)
    1bae:	4798      	blx	r3
	return;
    1bb0:	e059      	b.n	1c66 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1bb2:	8a06      	ldrh	r6, [r0, #16]
    1bb4:	4b52      	ldr	r3, [pc, #328]	; (1d00 <_usb_d_dev_out_next+0x218>)
    1bb6:	429e      	cmp	r6, r3
    1bb8:	d100      	bne.n	1bbc <_usb_d_dev_out_next+0xd4>
    1bba:	e08e      	b.n	1cda <_usb_d_dev_out_next+0x1f2>
    1bbc:	2300      	movs	r3, #0
    1bbe:	469b      	mov	fp, r3
    1bc0:	469a      	mov	sl, r3
    1bc2:	e7ae      	b.n	1b22 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1bc4:	7ce3      	ldrb	r3, [r4, #19]
    1bc6:	06db      	lsls	r3, r3, #27
    1bc8:	d400      	bmi.n	1bcc <_usb_d_dev_out_next+0xe4>
    1bca:	e07f      	b.n	1ccc <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1bcc:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1bce:	2210      	movs	r2, #16
    1bd0:	4393      	bics	r3, r2
    1bd2:	2220      	movs	r2, #32
    1bd4:	4313      	orrs	r3, r2
    1bd6:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1bd8:	4a48      	ldr	r2, [pc, #288]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1bda:	016b      	lsls	r3, r5, #5
    1bdc:	68e1      	ldr	r1, [r4, #12]
    1bde:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1be0:	8a21      	ldrh	r1, [r4, #16]
    1be2:	18d3      	adds	r3, r2, r3
    1be4:	685a      	ldr	r2, [r3, #4]
    1be6:	0489      	lsls	r1, r1, #18
    1be8:	0909      	lsrs	r1, r1, #4
    1bea:	484a      	ldr	r0, [pc, #296]	; (1d14 <_usb_d_dev_out_next+0x22c>)
    1bec:	4002      	ands	r2, r0
    1bee:	430a      	orrs	r2, r1
    1bf0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1bf2:	685a      	ldr	r2, [r3, #4]
    1bf4:	0b92      	lsrs	r2, r2, #14
    1bf6:	0392      	lsls	r2, r2, #14
    1bf8:	605a      	str	r2, [r3, #4]
    1bfa:	e022      	b.n	1c42 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1bfc:	68a2      	ldr	r2, [r4, #8]
    1bfe:	4452      	add	r2, sl
    1c00:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1c02:	4293      	cmp	r3, r2
    1c04:	d9c1      	bls.n	1b8a <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1c06:	1a9b      	subs	r3, r3, r2
    1c08:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1c0a:	7ce1      	ldrb	r1, [r4, #19]
    1c0c:	0689      	lsls	r1, r1, #26
    1c0e:	d530      	bpl.n	1c72 <_usb_d_dev_out_next+0x18a>
    1c10:	8a22      	ldrh	r2, [r4, #16]
    1c12:	1c11      	adds	r1, r2, #0
    1c14:	b292      	uxth	r2, r2
    1c16:	429a      	cmp	r2, r3
    1c18:	d900      	bls.n	1c1c <_usb_d_dev_out_next+0x134>
    1c1a:	1c19      	adds	r1, r3, #0
    1c1c:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1c1e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1c20:	016a      	lsls	r2, r5, #5
    1c22:	4936      	ldr	r1, [pc, #216]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1c24:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1c26:	016a      	lsls	r2, r5, #5
    1c28:	4934      	ldr	r1, [pc, #208]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1c2a:	1889      	adds	r1, r1, r2
    1c2c:	684a      	ldr	r2, [r1, #4]
    1c2e:	049b      	lsls	r3, r3, #18
    1c30:	091b      	lsrs	r3, r3, #4
    1c32:	4838      	ldr	r0, [pc, #224]	; (1d14 <_usb_d_dev_out_next+0x22c>)
    1c34:	4002      	ands	r2, r0
    1c36:	4313      	orrs	r3, r2
    1c38:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1c3a:	684b      	ldr	r3, [r1, #4]
    1c3c:	0b9b      	lsrs	r3, r3, #14
    1c3e:	039b      	lsls	r3, r3, #14
    1c40:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1c42:	4643      	mov	r3, r8
    1c44:	2b00      	cmp	r3, #0
    1c46:	d108      	bne.n	1c5a <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1c48:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1c4a:	464b      	mov	r3, r9
    1c4c:	2b01      	cmp	r3, #1
    1c4e:	d02f      	beq.n	1cb0 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c50:	016b      	lsls	r3, r5, #5
    1c52:	4931      	ldr	r1, [pc, #196]	; (1d18 <_usb_d_dev_out_next+0x230>)
    1c54:	468c      	mov	ip, r1
    1c56:	4463      	add	r3, ip
    1c58:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1c5a:	016d      	lsls	r5, r5, #5
    1c5c:	4b29      	ldr	r3, [pc, #164]	; (1d04 <_usb_d_dev_out_next+0x21c>)
    1c5e:	469c      	mov	ip, r3
    1c60:	4465      	add	r5, ip
    1c62:	2340      	movs	r3, #64	; 0x40
    1c64:	712b      	strb	r3, [r5, #4]
}
    1c66:	bc3c      	pop	{r2, r3, r4, r5}
    1c68:	4690      	mov	r8, r2
    1c6a:	4699      	mov	r9, r3
    1c6c:	46a2      	mov	sl, r4
    1c6e:	46ab      	mov	fp, r5
    1c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1c72:	8a21      	ldrh	r1, [r4, #16]
    1c74:	428b      	cmp	r3, r1
    1c76:	d90a      	bls.n	1c8e <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1c78:	2180      	movs	r1, #128	; 0x80
    1c7a:	0189      	lsls	r1, r1, #6
    1c7c:	428b      	cmp	r3, r1
    1c7e:	d80d      	bhi.n	1c9c <_usb_d_dev_out_next+0x1b4>
    1c80:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1c82:	6821      	ldr	r1, [r4, #0]
    1c84:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1c86:	0169      	lsls	r1, r5, #5
    1c88:	481c      	ldr	r0, [pc, #112]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1c8a:	500a      	str	r2, [r1, r0]
    1c8c:	e7cb      	b.n	1c26 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1c8e:	428b      	cmp	r3, r1
    1c90:	d2f7      	bcs.n	1c82 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1c92:	7ce1      	ldrb	r1, [r4, #19]
    1c94:	2020      	movs	r0, #32
    1c96:	4301      	orrs	r1, r0
    1c98:	74e1      	strb	r1, [r4, #19]
    1c9a:	e7f2      	b.n	1c82 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1c9c:	2380      	movs	r3, #128	; 0x80
    1c9e:	019b      	lsls	r3, r3, #6
    1ca0:	e7ef      	b.n	1c82 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ca2:	016b      	lsls	r3, r5, #5
    1ca4:	4a19      	ldr	r2, [pc, #100]	; (1d0c <_usb_d_dev_out_next+0x224>)
    1ca6:	4694      	mov	ip, r2
    1ca8:	4463      	add	r3, ip
    1caa:	222d      	movs	r2, #45	; 0x2d
    1cac:	701a      	strb	r2, [r3, #0]
    1cae:	e776      	b.n	1b9e <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1cb0:	016a      	lsls	r2, r5, #5
    1cb2:	4b12      	ldr	r3, [pc, #72]	; (1cfc <_usb_d_dev_out_next+0x214>)
    1cb4:	189b      	adds	r3, r3, r2
    1cb6:	2200      	movs	r2, #0
    1cb8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1cba:	322d      	adds	r2, #45	; 0x2d
    1cbc:	e7c8      	b.n	1c50 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1cbe:	05bf      	lsls	r7, r7, #22
    1cc0:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1cc2:	7cc3      	ldrb	r3, [r0, #19]
    1cc4:	2207      	movs	r2, #7
    1cc6:	401a      	ands	r2, r3
    1cc8:	4691      	mov	r9, r2
    1cca:	e735      	b.n	1b38 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1ccc:	4643      	mov	r3, r8
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d10c      	bne.n	1cec <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1cd2:	68a3      	ldr	r3, [r4, #8]
    1cd4:	4453      	add	r3, sl
    1cd6:	60a3      	str	r3, [r4, #8]
    1cd8:	e757      	b.n	1b8a <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1cda:	7cc3      	ldrb	r3, [r0, #19]
    1cdc:	2207      	movs	r2, #7
    1cde:	401a      	ands	r2, r3
    1ce0:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1ce2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ce4:	2300      	movs	r3, #0
    1ce6:	469b      	mov	fp, r3
    1ce8:	469a      	mov	sl, r3
    1cea:	e72b      	b.n	1b44 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1cec:	8a23      	ldrh	r3, [r4, #16]
    1cee:	42bb      	cmp	r3, r7
    1cf0:	d900      	bls.n	1cf4 <_usb_d_dev_out_next+0x20c>
    1cf2:	e743      	b.n	1b7c <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1cf4:	68a3      	ldr	r3, [r4, #8]
    1cf6:	4453      	add	r3, sl
    1cf8:	60a3      	str	r3, [r4, #8]
    1cfa:	e746      	b.n	1b8a <_usb_d_dev_out_next+0xa2>
    1cfc:	200005d8 	.word	0x200005d8
    1d00:	000003ff 	.word	0x000003ff
    1d04:	41005100 	.word	0x41005100
    1d08:	000037d9 	.word	0x000037d9
    1d0c:	41005108 	.word	0x41005108
    1d10:	00001761 	.word	0x00001761
    1d14:	f0003fff 	.word	0xf0003fff
    1d18:	41005109 	.word	0x41005109

00001d1c <_usb_d_dev_init>:
{
    1d1c:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1d1e:	4b31      	ldr	r3, [pc, #196]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d20:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1d22:	07db      	lsls	r3, r3, #31
    1d24:	d41f      	bmi.n	1d66 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d26:	492f      	ldr	r1, [pc, #188]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d28:	2203      	movs	r2, #3
    1d2a:	788b      	ldrb	r3, [r1, #2]
    1d2c:	4213      	tst	r3, r2
    1d2e:	d1fc      	bne.n	1d2a <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1d30:	4b2c      	ldr	r3, [pc, #176]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d32:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1d34:	079b      	lsls	r3, r3, #30
    1d36:	d50e      	bpl.n	1d56 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1d38:	4a2a      	ldr	r2, [pc, #168]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d3a:	7813      	ldrb	r3, [r2, #0]
    1d3c:	2102      	movs	r1, #2
    1d3e:	438b      	bics	r3, r1
    1d40:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d42:	0011      	movs	r1, r2
    1d44:	2203      	movs	r2, #3
    1d46:	788b      	ldrb	r3, [r1, #2]
    1d48:	4213      	tst	r3, r2
    1d4a:	d1fc      	bne.n	1d46 <_usb_d_dev_init+0x2a>
    1d4c:	4925      	ldr	r1, [pc, #148]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d4e:	2202      	movs	r2, #2
    1d50:	788b      	ldrb	r3, [r1, #2]
    1d52:	4213      	tst	r3, r2
    1d54:	d1fc      	bne.n	1d50 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1d56:	2201      	movs	r2, #1
    1d58:	4b22      	ldr	r3, [pc, #136]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d5a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d5c:	0019      	movs	r1, r3
    1d5e:	3202      	adds	r2, #2
    1d60:	788b      	ldrb	r3, [r1, #2]
    1d62:	4213      	tst	r3, r2
    1d64:	d1fc      	bne.n	1d60 <_usb_d_dev_init+0x44>
    1d66:	491f      	ldr	r1, [pc, #124]	; (1de4 <_usb_d_dev_init+0xc8>)
    1d68:	2201      	movs	r2, #1
    1d6a:	788b      	ldrb	r3, [r1, #2]
    1d6c:	4213      	tst	r3, r2
    1d6e:	d1fc      	bne.n	1d6a <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1d70:	4b1d      	ldr	r3, [pc, #116]	; (1de8 <_usb_d_dev_init+0xcc>)
    1d72:	4a1e      	ldr	r2, [pc, #120]	; (1dec <_usb_d_dev_init+0xd0>)
    1d74:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1d76:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1d78:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1d7a:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1d7c:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    1d7e:	4b1c      	ldr	r3, [pc, #112]	; (1df0 <_usb_d_dev_init+0xd4>)
    1d80:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1d82:	4b1c      	ldr	r3, [pc, #112]	; (1df4 <_usb_d_dev_init+0xd8>)
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1d88:	211f      	movs	r1, #31
    1d8a:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1d8c:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1d8e:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1d90:	019b      	lsls	r3, r3, #6
    1d92:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1d94:	2a1f      	cmp	r2, #31
    1d96:	d01f      	beq.n	1dd8 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    1d98:	291f      	cmp	r1, #31
    1d9a:	d01f      	beq.n	1ddc <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1d9c:	2b07      	cmp	r3, #7
    1d9e:	d01f      	beq.n	1de0 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1da0:	0192      	lsls	r2, r2, #6
    1da2:	430a      	orrs	r2, r1
    1da4:	031b      	lsls	r3, r3, #12
    1da6:	4313      	orrs	r3, r2
    1da8:	4a0e      	ldr	r2, [pc, #56]	; (1de4 <_usb_d_dev_init+0xc8>)
    1daa:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1dac:	78d3      	ldrb	r3, [r2, #3]
    1dae:	2103      	movs	r1, #3
    1db0:	430b      	orrs	r3, r1
    1db2:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1db4:	78d3      	ldrb	r3, [r2, #3]
    1db6:	210c      	movs	r1, #12
    1db8:	430b      	orrs	r3, r1
    1dba:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1dbc:	2304      	movs	r3, #4
    1dbe:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1dc0:	0011      	movs	r1, r2
    1dc2:	2203      	movs	r2, #3
    1dc4:	788b      	ldrb	r3, [r1, #2]
    1dc6:	4213      	tst	r3, r2
    1dc8:	d1fc      	bne.n	1dc4 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1dca:	4b06      	ldr	r3, [pc, #24]	; (1de4 <_usb_d_dev_init+0xc8>)
    1dcc:	4a0a      	ldr	r2, [pc, #40]	; (1df8 <_usb_d_dev_init+0xdc>)
    1dce:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1dd0:	2201      	movs	r2, #1
    1dd2:	811a      	strh	r2, [r3, #8]
}
    1dd4:	2000      	movs	r0, #0
    1dd6:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1dd8:	3a1a      	subs	r2, #26
    1dda:	e7dd      	b.n	1d98 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1ddc:	3902      	subs	r1, #2
    1dde:	e7dd      	b.n	1d9c <_usb_d_dev_init+0x80>
		pad_trim = 5;
    1de0:	3b02      	subs	r3, #2
    1de2:	e7dd      	b.n	1da0 <_usb_d_dev_init+0x84>
    1de4:	41005000 	.word	0x41005000
    1de8:	20000658 	.word	0x20000658
    1dec:	00001699 	.word	0x00001699
    1df0:	000018f5 	.word	0x000018f5
    1df4:	00806024 	.word	0x00806024
    1df8:	200005d8 	.word	0x200005d8

00001dfc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1dfc:	4b10      	ldr	r3, [pc, #64]	; (1e40 <_usb_d_dev_enable+0x44>)
    1dfe:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1e00:	079b      	lsls	r3, r3, #30
    1e02:	d11a      	bne.n	1e3a <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1e04:	490e      	ldr	r1, [pc, #56]	; (1e40 <_usb_d_dev_enable+0x44>)
    1e06:	2203      	movs	r2, #3
    1e08:	788b      	ldrb	r3, [r1, #2]
    1e0a:	4213      	tst	r3, r2
    1e0c:	d1fc      	bne.n	1e08 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1e0e:	4b0c      	ldr	r3, [pc, #48]	; (1e40 <_usb_d_dev_enable+0x44>)
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1e14:	079a      	lsls	r2, r3, #30
    1e16:	d408      	bmi.n	1e2a <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1e18:	2202      	movs	r2, #2
    1e1a:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1e1c:	4a08      	ldr	r2, [pc, #32]	; (1e40 <_usb_d_dev_enable+0x44>)
    1e1e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1e20:	0011      	movs	r1, r2
    1e22:	2203      	movs	r2, #3
    1e24:	788b      	ldrb	r3, [r1, #2]
    1e26:	4213      	tst	r3, r2
    1e28:	d1fc      	bne.n	1e24 <_usb_d_dev_enable+0x28>
    1e2a:	2280      	movs	r2, #128	; 0x80
    1e2c:	4b05      	ldr	r3, [pc, #20]	; (1e44 <_usb_d_dev_enable+0x48>)
    1e2e:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1e30:	4a05      	ldr	r2, [pc, #20]	; (1e48 <_usb_d_dev_enable+0x4c>)
    1e32:	4b03      	ldr	r3, [pc, #12]	; (1e40 <_usb_d_dev_enable+0x44>)
    1e34:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1e36:	2000      	movs	r0, #0
}
    1e38:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1e3a:	2011      	movs	r0, #17
    1e3c:	4240      	negs	r0, r0
    1e3e:	e7fb      	b.n	1e38 <_usb_d_dev_enable+0x3c>
    1e40:	41005000 	.word	0x41005000
    1e44:	e000e100 	.word	0xe000e100
    1e48:	0000028d 	.word	0x0000028d

00001e4c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1e4c:	4a02      	ldr	r2, [pc, #8]	; (1e58 <_usb_d_dev_attach+0xc>)
    1e4e:	8913      	ldrh	r3, [r2, #8]
    1e50:	2101      	movs	r1, #1
    1e52:	438b      	bics	r3, r1
    1e54:	8113      	strh	r3, [r2, #8]
}
    1e56:	4770      	bx	lr
    1e58:	41005000 	.word	0x41005000

00001e5c <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1e5c:	2380      	movs	r3, #128	; 0x80
    1e5e:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1e60:	4b01      	ldr	r3, [pc, #4]	; (1e68 <_usb_d_dev_set_address+0xc>)
    1e62:	7298      	strb	r0, [r3, #10]
}
    1e64:	4770      	bx	lr
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	41005000 	.word	0x41005000

00001e6c <_usb_d_dev_ep_init>:
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1e6e:	240f      	movs	r4, #15
    1e70:	4004      	ands	r4, r0
    1e72:	b243      	sxtb	r3, r0
    1e74:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e76:	2c00      	cmp	r4, #0
    1e78:	d054      	beq.n	1f24 <_usb_d_dev_ep_init+0xb8>
    1e7a:	0025      	movs	r5, r4
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	db07      	blt.n	1e90 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1e80:	2303      	movs	r3, #3
    1e82:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1e84:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1e86:	2c04      	cmp	r4, #4
    1e88:	d950      	bls.n	1f2c <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    1e8a:	2012      	movs	r0, #18
    1e8c:	4240      	negs	r0, r0
    1e8e:	e025      	b.n	1edc <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e90:	1d25      	adds	r5, r4, #4
    1e92:	e7f5      	b.n	1e80 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e94:	4663      	mov	r3, ip
    1e96:	2b00      	cmp	r3, #0
    1e98:	db21      	blt.n	1ede <_usb_d_dev_ep_init+0x72>
    1e9a:	007b      	lsls	r3, r7, #1
    1e9c:	19db      	adds	r3, r3, r7
    1e9e:	009b      	lsls	r3, r3, #2
    1ea0:	4c3b      	ldr	r4, [pc, #236]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1ea2:	591b      	ldr	r3, [r3, r4]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d166      	bne.n	1f76 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1ea8:	007b      	lsls	r3, r7, #1
    1eaa:	19df      	adds	r7, r3, r7
    1eac:	00bf      	lsls	r7, r7, #2
    1eae:	4b38      	ldr	r3, [pc, #224]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1eb0:	58ff      	ldr	r7, [r7, r3]
    1eb2:	4b38      	ldr	r3, [pc, #224]	; (1f94 <_usb_d_dev_ep_init+0x128>)
    1eb4:	00ae      	lsls	r6, r5, #2
    1eb6:	1974      	adds	r4, r6, r5
    1eb8:	00a4      	lsls	r4, r4, #2
    1eba:	191c      	adds	r4, r3, r4
    1ebc:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    1ebe:	3444      	adds	r4, #68	; 0x44
    1ec0:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    1ec2:	3320      	adds	r3, #32
    1ec4:	1972      	adds	r2, r6, r5
    1ec6:	0092      	lsls	r2, r2, #2
    1ec8:	189a      	adds	r2, r3, r2
    1eca:	3227      	adds	r2, #39	; 0x27
    1ecc:	3101      	adds	r1, #1
    1ece:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    1ed0:	1975      	adds	r5, r6, r5
    1ed2:	00ad      	lsls	r5, r5, #2
    1ed4:	195b      	adds	r3, r3, r5
    1ed6:	3326      	adds	r3, #38	; 0x26
    1ed8:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1eda:	2000      	movs	r0, #0
}
    1edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1ede:	007b      	lsls	r3, r7, #1
    1ee0:	19db      	adds	r3, r3, r7
    1ee2:	009b      	lsls	r3, r3, #2
    1ee4:	4c2a      	ldr	r4, [pc, #168]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1ee6:	18e3      	adds	r3, r4, r3
    1ee8:	685b      	ldr	r3, [r3, #4]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d106      	bne.n	1efc <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1eee:	007b      	lsls	r3, r7, #1
    1ef0:	19df      	adds	r7, r3, r7
    1ef2:	00bf      	lsls	r7, r7, #2
    1ef4:	4b26      	ldr	r3, [pc, #152]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1ef6:	19df      	adds	r7, r3, r7
    1ef8:	687f      	ldr	r7, [r7, #4]
    1efa:	e7da      	b.n	1eb2 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1efc:	007b      	lsls	r3, r7, #1
    1efe:	19db      	adds	r3, r3, r7
    1f00:	009b      	lsls	r3, r3, #2
    1f02:	4c23      	ldr	r4, [pc, #140]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1f04:	18e3      	adds	r3, r4, r3
    1f06:	895b      	ldrh	r3, [r3, #10]
    1f08:	4293      	cmp	r3, r2
    1f0a:	daf0      	bge.n	1eee <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    1f0c:	2013      	movs	r0, #19
    1f0e:	4240      	negs	r0, r0
    1f10:	e7e4      	b.n	1edc <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    1f12:	2014      	movs	r0, #20
    1f14:	4240      	negs	r0, r0
    1f16:	e7e1      	b.n	1edc <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1f18:	2014      	movs	r0, #20
    1f1a:	4240      	negs	r0, r0
    1f1c:	e7de      	b.n	1edc <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    1f1e:	2013      	movs	r0, #19
    1f20:	4240      	negs	r0, r0
    1f22:	e7db      	b.n	1edc <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1f24:	2303      	movs	r3, #3
    1f26:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1f28:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1f2a:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    1f2c:	00ab      	lsls	r3, r5, #2
    1f2e:	195b      	adds	r3, r3, r5
    1f30:	009e      	lsls	r6, r3, #2
    1f32:	4b18      	ldr	r3, [pc, #96]	; (1f94 <_usb_d_dev_ep_init+0x128>)
    1f34:	199b      	adds	r3, r3, r6
    1f36:	3346      	adds	r3, #70	; 0x46
    1f38:	781b      	ldrb	r3, [r3, #0]
    1f3a:	2bff      	cmp	r3, #255	; 0xff
    1f3c:	d1e9      	bne.n	1f12 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1f3e:	2900      	cmp	r1, #0
    1f40:	d1a8      	bne.n	1e94 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f42:	2c00      	cmp	r4, #0
    1f44:	d004      	beq.n	1f50 <_usb_d_dev_ep_init+0xe4>
    1f46:	4663      	mov	r3, ip
    1f48:	2b00      	cmp	r3, #0
    1f4a:	db01      	blt.n	1f50 <_usb_d_dev_ep_init+0xe4>
    1f4c:	3404      	adds	r4, #4
    1f4e:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1f50:	00a3      	lsls	r3, r4, #2
    1f52:	191b      	adds	r3, r3, r4
    1f54:	009b      	lsls	r3, r3, #2
    1f56:	4c0f      	ldr	r4, [pc, #60]	; (1f94 <_usb_d_dev_ep_init+0x128>)
    1f58:	18e4      	adds	r4, r4, r3
    1f5a:	3446      	adds	r4, #70	; 0x46
    1f5c:	7823      	ldrb	r3, [r4, #0]
    1f5e:	2bff      	cmp	r3, #255	; 0xff
    1f60:	d1da      	bne.n	1f18 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    1f62:	007b      	lsls	r3, r7, #1
    1f64:	19db      	adds	r3, r3, r7
    1f66:	009b      	lsls	r3, r3, #2
    1f68:	4c09      	ldr	r4, [pc, #36]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1f6a:	591b      	ldr	r3, [r3, r4]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d0d6      	beq.n	1f1e <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1f70:	4663      	mov	r3, ip
    1f72:	2b00      	cmp	r3, #0
    1f74:	dbb3      	blt.n	1ede <_usb_d_dev_ep_init+0x72>
    1f76:	007b      	lsls	r3, r7, #1
    1f78:	19db      	adds	r3, r3, r7
    1f7a:	009b      	lsls	r3, r3, #2
    1f7c:	4c04      	ldr	r4, [pc, #16]	; (1f90 <_usb_d_dev_ep_init+0x124>)
    1f7e:	18e3      	adds	r3, r4, r3
    1f80:	891b      	ldrh	r3, [r3, #8]
    1f82:	4293      	cmp	r3, r2
    1f84:	db00      	blt.n	1f88 <_usb_d_dev_ep_init+0x11c>
    1f86:	e78f      	b.n	1ea8 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1f88:	2013      	movs	r0, #19
    1f8a:	4240      	negs	r0, r0
    1f8c:	e7a6      	b.n	1edc <_usb_d_dev_ep_init+0x70>
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	00003bec 	.word	0x00003bec
    1f94:	20000658 	.word	0x20000658

00001f98 <_usb_d_dev_ep_deinit>:
{
    1f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f9a:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    1f9c:	240f      	movs	r4, #15
    1f9e:	4004      	ands	r4, r0
    1fa0:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1fa2:	2c00      	cmp	r4, #0
    1fa4:	d010      	beq.n	1fc8 <_usb_d_dev_ep_deinit+0x30>
    1fa6:	0020      	movs	r0, r4
    1fa8:	2f00      	cmp	r7, #0
    1faa:	db02      	blt.n	1fb2 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1fac:	2c04      	cmp	r4, #4
    1fae:	d902      	bls.n	1fb6 <_usb_d_dev_ep_deinit+0x1e>
}
    1fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1fb2:	1d20      	adds	r0, r4, #4
    1fb4:	e7fa      	b.n	1fac <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    1fb6:	0006      	movs	r6, r0
    1fb8:	3001      	adds	r0, #1
    1fba:	0083      	lsls	r3, r0, #2
    1fbc:	1818      	adds	r0, r3, r0
    1fbe:	0080      	lsls	r0, r0, #2
    1fc0:	4b25      	ldr	r3, [pc, #148]	; (2058 <STACK_SIZE+0x58>)
    1fc2:	3320      	adds	r3, #32
    1fc4:	1818      	adds	r0, r3, r0
    1fc6:	e002      	b.n	1fce <_usb_d_dev_ep_deinit+0x36>
    1fc8:	4823      	ldr	r0, [pc, #140]	; (2058 <STACK_SIZE+0x58>)
    1fca:	3034      	adds	r0, #52	; 0x34
    1fcc:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1fce:	00b3      	lsls	r3, r6, #2
    1fd0:	199b      	adds	r3, r3, r6
    1fd2:	009a      	lsls	r2, r3, #2
    1fd4:	4b20      	ldr	r3, [pc, #128]	; (2058 <STACK_SIZE+0x58>)
    1fd6:	189b      	adds	r3, r3, r2
    1fd8:	3346      	adds	r3, #70	; 0x46
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	2bff      	cmp	r3, #255	; 0xff
    1fde:	d0e7      	beq.n	1fb0 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1fe0:	0ff9      	lsrs	r1, r7, #31
    1fe2:	2203      	movs	r2, #3
    1fe4:	4b1d      	ldr	r3, [pc, #116]	; (205c <STACK_SIZE+0x5c>)
    1fe6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1fe8:	00b3      	lsls	r3, r6, #2
    1fea:	199b      	adds	r3, r3, r6
    1fec:	009a      	lsls	r2, r3, #2
    1fee:	4b1a      	ldr	r3, [pc, #104]	; (2058 <STACK_SIZE+0x58>)
    1ff0:	189b      	adds	r3, r3, r2
    1ff2:	3340      	adds	r3, #64	; 0x40
    1ff4:	79da      	ldrb	r2, [r3, #7]
    1ff6:	2307      	movs	r3, #7
    1ff8:	4013      	ands	r3, r2
    1ffa:	2b01      	cmp	r3, #1
    1ffc:	d01b      	beq.n	2036 <STACK_SIZE+0x36>
	} else if (USB_EP_GET_DIR(ep)) {
    1ffe:	2f00      	cmp	r7, #0
    2000:	db1f      	blt.n	2042 <STACK_SIZE+0x42>
    2002:	016d      	lsls	r5, r5, #5
    2004:	4b16      	ldr	r3, [pc, #88]	; (2060 <STACK_SIZE+0x60>)
    2006:	469c      	mov	ip, r3
    2008:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    200a:	2280      	movs	r2, #128	; 0x80
    200c:	0052      	lsls	r2, r2, #1
    200e:	5cab      	ldrb	r3, [r5, r2]
    2010:	2107      	movs	r1, #7
    2012:	438b      	bics	r3, r1
    2014:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    2016:	4b10      	ldr	r3, [pc, #64]	; (2058 <STACK_SIZE+0x58>)
    2018:	3320      	adds	r3, #32
    201a:	00b1      	lsls	r1, r6, #2
    201c:	198a      	adds	r2, r1, r6
    201e:	0092      	lsls	r2, r2, #2
    2020:	189a      	adds	r2, r3, r2
    2022:	3227      	adds	r2, #39	; 0x27
    2024:	2000      	movs	r0, #0
    2026:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2028:	198e      	adds	r6, r1, r6
    202a:	00b6      	lsls	r6, r6, #2
    202c:	199b      	adds	r3, r3, r6
    202e:	3326      	adds	r3, #38	; 0x26
    2030:	22ff      	movs	r2, #255	; 0xff
    2032:	701a      	strb	r2, [r3, #0]
    2034:	e7bc      	b.n	1fb0 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    2036:	3508      	adds	r5, #8
    2038:	016d      	lsls	r5, r5, #5
    203a:	2200      	movs	r2, #0
    203c:	4b08      	ldr	r3, [pc, #32]	; (2060 <STACK_SIZE+0x60>)
    203e:	54ea      	strb	r2, [r5, r3]
    2040:	e7e9      	b.n	2016 <STACK_SIZE+0x16>
    2042:	0164      	lsls	r4, r4, #5
    2044:	4b06      	ldr	r3, [pc, #24]	; (2060 <STACK_SIZE+0x60>)
    2046:	469c      	mov	ip, r3
    2048:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    204a:	2280      	movs	r2, #128	; 0x80
    204c:	0052      	lsls	r2, r2, #1
    204e:	5ca3      	ldrb	r3, [r4, r2]
    2050:	2170      	movs	r1, #112	; 0x70
    2052:	438b      	bics	r3, r1
    2054:	54a3      	strb	r3, [r4, r2]
    2056:	e7de      	b.n	2016 <STACK_SIZE+0x16>
    2058:	20000658 	.word	0x20000658
    205c:	00001789 	.word	0x00001789
    2060:	41005000 	.word	0x41005000

00002064 <_usb_d_dev_ep_enable>:
{
    2064:	b5f0      	push	{r4, r5, r6, r7, lr}
    2066:	46c6      	mov	lr, r8
    2068:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    206a:	220f      	movs	r2, #15
    206c:	4002      	ands	r2, r0
    206e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2070:	2a00      	cmp	r2, #0
    2072:	d100      	bne.n	2076 <_usb_d_dev_ep_enable+0x12>
    2074:	e092      	b.n	219c <_usb_d_dev_ep_enable+0x138>
    2076:	0013      	movs	r3, r2
    2078:	2800      	cmp	r0, #0
    207a:	db0b      	blt.n	2094 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    207c:	0011      	movs	r1, r2
    207e:	3208      	adds	r2, #8
    2080:	0152      	lsls	r2, r2, #5
    2082:	4cab      	ldr	r4, [pc, #684]	; (2330 <_usb_d_dev_ep_enable+0x2cc>)
    2084:	5d15      	ldrb	r5, [r2, r4]
    2086:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2088:	2904      	cmp	r1, #4
    208a:	d800      	bhi.n	208e <_usb_d_dev_ep_enable+0x2a>
    208c:	e08d      	b.n	21aa <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    208e:	2012      	movs	r0, #18
    2090:	4240      	negs	r0, r0
    2092:	e0e6      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2094:	1d13      	adds	r3, r2, #4
    2096:	e7f1      	b.n	207c <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2098:	2077      	movs	r0, #119	; 0x77
    209a:	4228      	tst	r0, r5
    209c:	d175      	bne.n	218a <_usb_d_dev_ep_enable+0x126>
    209e:	48a4      	ldr	r0, [pc, #656]	; (2330 <_usb_d_dev_ep_enable+0x2cc>)
    20a0:	4680      	mov	r8, r0
    20a2:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    20a4:	3410      	adds	r4, #16
    20a6:	2080      	movs	r0, #128	; 0x80
    20a8:	0040      	lsls	r0, r0, #1
    20aa:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20ac:	0098      	lsls	r0, r3, #2
    20ae:	18c0      	adds	r0, r0, r3
    20b0:	0084      	lsls	r4, r0, #2
    20b2:	48a0      	ldr	r0, [pc, #640]	; (2334 <_usb_d_dev_ep_enable+0x2d0>)
    20b4:	1900      	adds	r0, r0, r4
    20b6:	3044      	adds	r0, #68	; 0x44
    20b8:	8800      	ldrh	r0, [r0, #0]
    20ba:	0385      	lsls	r5, r0, #14
    20bc:	4c9e      	ldr	r4, [pc, #632]	; (2338 <_usb_d_dev_ep_enable+0x2d4>)
    20be:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20c0:	2480      	movs	r4, #128	; 0x80
    20c2:	00a4      	lsls	r4, r4, #2
    20c4:	42a0      	cmp	r0, r4
    20c6:	d900      	bls.n	20ca <_usb_d_dev_ep_enable+0x66>
    20c8:	e0ce      	b.n	2268 <_usb_d_dev_ep_enable+0x204>
    20ca:	3c01      	subs	r4, #1
    20cc:	3cff      	subs	r4, #255	; 0xff
    20ce:	42a0      	cmp	r0, r4
    20d0:	d900      	bls.n	20d4 <_usb_d_dev_ep_enable+0x70>
    20d2:	e114      	b.n	22fe <_usb_d_dev_ep_enable+0x29a>
    20d4:	2880      	cmp	r0, #128	; 0x80
    20d6:	d900      	bls.n	20da <_usb_d_dev_ep_enable+0x76>
    20d8:	e101      	b.n	22de <_usb_d_dev_ep_enable+0x27a>
    20da:	2840      	cmp	r0, #64	; 0x40
    20dc:	d900      	bls.n	20e0 <_usb_d_dev_ep_enable+0x7c>
    20de:	e116      	b.n	230e <_usb_d_dev_ep_enable+0x2aa>
    20e0:	2820      	cmp	r0, #32
    20e2:	d900      	bls.n	20e6 <_usb_d_dev_ep_enable+0x82>
    20e4:	e103      	b.n	22ee <_usb_d_dev_ep_enable+0x28a>
    20e6:	2810      	cmp	r0, #16
    20e8:	d900      	bls.n	20ec <_usb_d_dev_ep_enable+0x88>
    20ea:	e118      	b.n	231e <_usb_d_dev_ep_enable+0x2ba>
    20ec:	3cf8      	subs	r4, #248	; 0xf8
    20ee:	4284      	cmp	r4, r0
    20f0:	41a4      	sbcs	r4, r4
    20f2:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20f4:	0726      	lsls	r6, r4, #28
    20f6:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20f8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20fa:	0485      	lsls	r5, r0, #18
    20fc:	0cad      	lsrs	r5, r5, #18
    20fe:	e0ba      	b.n	2276 <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2100:	2070      	movs	r0, #112	; 0x70
    2102:	4228      	tst	r0, r5
    2104:	d144      	bne.n	2190 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2106:	4c8b      	ldr	r4, [pc, #556]	; (2334 <_usb_d_dev_ep_enable+0x2d0>)
    2108:	009e      	lsls	r6, r3, #2
    210a:	18f0      	adds	r0, r6, r3
    210c:	0080      	lsls	r0, r0, #2
    210e:	1820      	adds	r0, r4, r0
    2110:	3040      	adds	r0, #64	; 0x40
    2112:	79c0      	ldrb	r0, [r0, #7]
    2114:	0740      	lsls	r0, r0, #29
    2116:	0e40      	lsrs	r0, r0, #25
    2118:	4305      	orrs	r5, r0
    211a:	4885      	ldr	r0, [pc, #532]	; (2330 <_usb_d_dev_ep_enable+0x2cc>)
    211c:	4684      	mov	ip, r0
    211e:	4462      	add	r2, ip
    2120:	2080      	movs	r0, #128	; 0x80
    2122:	0040      	lsls	r0, r0, #1
    2124:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2126:	18f6      	adds	r6, r6, r3
    2128:	00b6      	lsls	r6, r6, #2
    212a:	19a4      	adds	r4, r4, r6
    212c:	3444      	adds	r4, #68	; 0x44
    212e:	8824      	ldrh	r4, [r4, #0]
    2130:	04a5      	lsls	r5, r4, #18
    2132:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2134:	3001      	adds	r0, #1
    2136:	30ff      	adds	r0, #255	; 0xff
    2138:	2307      	movs	r3, #7
    213a:	4284      	cmp	r4, r0
    213c:	d814      	bhi.n	2168 <_usb_d_dev_ep_enable+0x104>
    213e:	3801      	subs	r0, #1
    2140:	38ff      	subs	r0, #255	; 0xff
    2142:	3b01      	subs	r3, #1
    2144:	4284      	cmp	r4, r0
    2146:	d80f      	bhi.n	2168 <_usb_d_dev_ep_enable+0x104>
    2148:	3b01      	subs	r3, #1
    214a:	2c80      	cmp	r4, #128	; 0x80
    214c:	d80c      	bhi.n	2168 <_usb_d_dev_ep_enable+0x104>
    214e:	3b01      	subs	r3, #1
    2150:	2c40      	cmp	r4, #64	; 0x40
    2152:	d809      	bhi.n	2168 <_usb_d_dev_ep_enable+0x104>
    2154:	3b01      	subs	r3, #1
    2156:	2c20      	cmp	r4, #32
    2158:	d806      	bhi.n	2168 <_usb_d_dev_ep_enable+0x104>
    215a:	3b01      	subs	r3, #1
    215c:	2c10      	cmp	r4, #16
    215e:	d803      	bhi.n	2168 <_usb_d_dev_ep_enable+0x104>
    2160:	38f8      	subs	r0, #248	; 0xf8
    2162:	42a0      	cmp	r0, r4
    2164:	4180      	sbcs	r0, r0
    2166:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2168:	071b      	lsls	r3, r3, #28
    216a:	432b      	orrs	r3, r5
    216c:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    216e:	2080      	movs	r0, #128	; 0x80
    2170:	2382      	movs	r3, #130	; 0x82
    2172:	005b      	lsls	r3, r3, #1
    2174:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    2176:	0149      	lsls	r1, r1, #5
    2178:	4b70      	ldr	r3, [pc, #448]	; (233c <_usb_d_dev_ep_enable+0x2d8>)
    217a:	1859      	adds	r1, r3, r1
    217c:	2300      	movs	r3, #0
    217e:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2180:	2000      	movs	r0, #0
    2182:	e06e      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    2184:	2012      	movs	r0, #18
    2186:	4240      	negs	r0, r0
    2188:	e06b      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    218a:	2014      	movs	r0, #20
    218c:	4240      	negs	r0, r0
    218e:	e068      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2190:	2014      	movs	r0, #20
    2192:	4240      	negs	r0, r0
    2194:	e065      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    2196:	2014      	movs	r0, #20
    2198:	4240      	negs	r0, r0
    219a:	e062      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    219c:	2380      	movs	r3, #128	; 0x80
    219e:	005b      	lsls	r3, r3, #1
    21a0:	4a63      	ldr	r2, [pc, #396]	; (2330 <_usb_d_dev_ep_enable+0x2cc>)
    21a2:	5cd5      	ldrb	r5, [r2, r3]
    21a4:	b2ed      	uxtb	r5, r5
    21a6:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    21a8:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    21aa:	009a      	lsls	r2, r3, #2
    21ac:	18d2      	adds	r2, r2, r3
    21ae:	0094      	lsls	r4, r2, #2
    21b0:	4a60      	ldr	r2, [pc, #384]	; (2334 <_usb_d_dev_ep_enable+0x2d0>)
    21b2:	1912      	adds	r2, r2, r4
    21b4:	3246      	adds	r2, #70	; 0x46
    21b6:	7812      	ldrb	r2, [r2, #0]
    21b8:	4694      	mov	ip, r2
    21ba:	2aff      	cmp	r2, #255	; 0xff
    21bc:	d0e2      	beq.n	2184 <_usb_d_dev_ep_enable+0x120>
    21be:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    21c0:	4f5e      	ldr	r7, [pc, #376]	; (233c <_usb_d_dev_ep_enable+0x2d8>)
    21c2:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    21c4:	009c      	lsls	r4, r3, #2
    21c6:	18e4      	adds	r4, r4, r3
    21c8:	00a6      	lsls	r6, r4, #2
    21ca:	4c5a      	ldr	r4, [pc, #360]	; (2334 <_usb_d_dev_ep_enable+0x2d0>)
    21cc:	19a4      	adds	r4, r4, r6
    21ce:	3440      	adds	r4, #64	; 0x40
    21d0:	79e6      	ldrb	r6, [r4, #7]
    21d2:	2407      	movs	r4, #7
    21d4:	4034      	ands	r4, r6
    21d6:	2c01      	cmp	r4, #1
    21d8:	d100      	bne.n	21dc <_usb_d_dev_ep_enable+0x178>
    21da:	e75d      	b.n	2098 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    21dc:	2800      	cmp	r0, #0
    21de:	db8f      	blt.n	2100 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    21e0:	0768      	lsls	r0, r5, #29
    21e2:	d1d8      	bne.n	2196 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    21e4:	4c53      	ldr	r4, [pc, #332]	; (2334 <_usb_d_dev_ep_enable+0x2d0>)
    21e6:	009e      	lsls	r6, r3, #2
    21e8:	18f0      	adds	r0, r6, r3
    21ea:	0080      	lsls	r0, r0, #2
    21ec:	1820      	adds	r0, r4, r0
    21ee:	3040      	adds	r0, #64	; 0x40
    21f0:	79c0      	ldrb	r0, [r0, #7]
    21f2:	0740      	lsls	r0, r0, #29
    21f4:	0f40      	lsrs	r0, r0, #29
    21f6:	4305      	orrs	r5, r0
    21f8:	484d      	ldr	r0, [pc, #308]	; (2330 <_usb_d_dev_ep_enable+0x2cc>)
    21fa:	4684      	mov	ip, r0
    21fc:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    21fe:	2080      	movs	r0, #128	; 0x80
    2200:	0040      	lsls	r0, r0, #1
    2202:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2204:	18f6      	adds	r6, r6, r3
    2206:	00b6      	lsls	r6, r6, #2
    2208:	19a4      	adds	r4, r4, r6
    220a:	3444      	adds	r4, #68	; 0x44
    220c:	8825      	ldrh	r5, [r4, #0]
    220e:	03ab      	lsls	r3, r5, #14
    2210:	4c49      	ldr	r4, [pc, #292]	; (2338 <_usb_d_dev_ep_enable+0x2d4>)
    2212:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2214:	3001      	adds	r0, #1
    2216:	30ff      	adds	r0, #255	; 0xff
    2218:	2307      	movs	r3, #7
    221a:	4285      	cmp	r5, r0
    221c:	d814      	bhi.n	2248 <_usb_d_dev_ep_enable+0x1e4>
    221e:	3801      	subs	r0, #1
    2220:	38ff      	subs	r0, #255	; 0xff
    2222:	3b01      	subs	r3, #1
    2224:	4285      	cmp	r5, r0
    2226:	d80f      	bhi.n	2248 <_usb_d_dev_ep_enable+0x1e4>
    2228:	3b01      	subs	r3, #1
    222a:	2d80      	cmp	r5, #128	; 0x80
    222c:	d80c      	bhi.n	2248 <_usb_d_dev_ep_enable+0x1e4>
    222e:	3b01      	subs	r3, #1
    2230:	2d40      	cmp	r5, #64	; 0x40
    2232:	d809      	bhi.n	2248 <_usb_d_dev_ep_enable+0x1e4>
    2234:	3b01      	subs	r3, #1
    2236:	2d20      	cmp	r5, #32
    2238:	d806      	bhi.n	2248 <_usb_d_dev_ep_enable+0x1e4>
    223a:	3b01      	subs	r3, #1
    223c:	2d10      	cmp	r5, #16
    223e:	d803      	bhi.n	2248 <_usb_d_dev_ep_enable+0x1e4>
    2240:	38f8      	subs	r0, #248	; 0xf8
    2242:	42a8      	cmp	r0, r5
    2244:	4180      	sbcs	r0, r0
    2246:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2248:	071b      	lsls	r3, r3, #28
    224a:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    224c:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    224e:	2040      	movs	r0, #64	; 0x40
    2250:	2306      	movs	r3, #6
    2252:	33ff      	adds	r3, #255	; 0xff
    2254:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    2256:	0149      	lsls	r1, r1, #5
    2258:	4b38      	ldr	r3, [pc, #224]	; (233c <_usb_d_dev_ep_enable+0x2d8>)
    225a:	1859      	adds	r1, r3, r1
    225c:	2300      	movs	r3, #0
    225e:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    2260:	2000      	movs	r0, #0
}
    2262:	bc04      	pop	{r2}
    2264:	4690      	mov	r8, r2
    2266:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2268:	24e0      	movs	r4, #224	; 0xe0
    226a:	05e4      	lsls	r4, r4, #23
    226c:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    226e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2270:	0485      	lsls	r5, r0, #18
    2272:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2274:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2276:	0724      	lsls	r4, r4, #28
    2278:	432c      	orrs	r4, r5
    227a:	617c      	str	r4, [r7, #20]
    227c:	2406      	movs	r4, #6
    227e:	34ff      	adds	r4, #255	; 0xff
    2280:	2540      	movs	r5, #64	; 0x40
    2282:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2284:	2682      	movs	r6, #130	; 0x82
    2286:	0076      	lsls	r6, r6, #1
    2288:	2780      	movs	r7, #128	; 0x80
    228a:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    228c:	4f2b      	ldr	r7, [pc, #172]	; (233c <_usb_d_dev_ep_enable+0x2d8>)
    228e:	0149      	lsls	r1, r1, #5
    2290:	1879      	adds	r1, r7, r1
    2292:	2200      	movs	r2, #0
    2294:	728a      	strb	r2, [r1, #10]
    2296:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2298:	210f      	movs	r1, #15
    229a:	4662      	mov	r2, ip
    229c:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    229e:	009a      	lsls	r2, r3, #2
    22a0:	18d2      	adds	r2, r2, r3
    22a2:	0092      	lsls	r2, r2, #2
    22a4:	4b23      	ldr	r3, [pc, #140]	; (2334 <_usb_d_dev_ep_enable+0x2d0>)
    22a6:	189a      	adds	r2, r3, r2
    22a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    22aa:	014b      	lsls	r3, r1, #5
    22ac:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    22ae:	18f9      	adds	r1, r7, r3
    22b0:	684a      	ldr	r2, [r1, #4]
    22b2:	0480      	lsls	r0, r0, #18
    22b4:	0907      	lsrs	r7, r0, #4
    22b6:	4822      	ldr	r0, [pc, #136]	; (2340 <_usb_d_dev_ep_enable+0x2dc>)
    22b8:	4010      	ands	r0, r2
    22ba:	4338      	orrs	r0, r7
    22bc:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    22be:	684a      	ldr	r2, [r1, #4]
    22c0:	0b92      	lsrs	r2, r2, #14
    22c2:	0392      	lsls	r2, r2, #14
    22c4:	604a      	str	r2, [r1, #4]
    22c6:	4a1a      	ldr	r2, [pc, #104]	; (2330 <_usb_d_dev_ep_enable+0x2cc>)
    22c8:	189a      	adds	r2, r3, r2
    22ca:	21b0      	movs	r1, #176	; 0xb0
    22cc:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    22ce:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    22d0:	4a1c      	ldr	r2, [pc, #112]	; (2344 <_usb_d_dev_ep_enable+0x2e0>)
    22d2:	4694      	mov	ip, r2
    22d4:	4463      	add	r3, ip
    22d6:	2210      	movs	r2, #16
    22d8:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    22da:	2000      	movs	r0, #0
    22dc:	e7c1      	b.n	2262 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22de:	24a0      	movs	r4, #160	; 0xa0
    22e0:	05e4      	lsls	r4, r4, #23
    22e2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22e4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22e6:	0485      	lsls	r5, r0, #18
    22e8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22ea:	2405      	movs	r4, #5
    22ec:	e7c3      	b.n	2276 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22ee:	24c0      	movs	r4, #192	; 0xc0
    22f0:	05a4      	lsls	r4, r4, #22
    22f2:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    22f4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22f6:	0485      	lsls	r5, r0, #18
    22f8:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22fa:	2403      	movs	r4, #3
    22fc:	e7bb      	b.n	2276 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22fe:	24c0      	movs	r4, #192	; 0xc0
    2300:	05e4      	lsls	r4, r4, #23
    2302:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2304:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2306:	0485      	lsls	r5, r0, #18
    2308:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    230a:	2406      	movs	r4, #6
    230c:	e7b3      	b.n	2276 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    230e:	2480      	movs	r4, #128	; 0x80
    2310:	05e4      	lsls	r4, r4, #23
    2312:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2314:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2316:	0485      	lsls	r5, r0, #18
    2318:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    231a:	2404      	movs	r4, #4
    231c:	e7ab      	b.n	2276 <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    231e:	2480      	movs	r4, #128	; 0x80
    2320:	05a4      	lsls	r4, r4, #22
    2322:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2324:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2326:	0485      	lsls	r5, r0, #18
    2328:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    232a:	2402      	movs	r4, #2
    232c:	e7a3      	b.n	2276 <_usb_d_dev_ep_enable+0x212>
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	41005000 	.word	0x41005000
    2334:	20000658 	.word	0x20000658
    2338:	0fffc000 	.word	0x0fffc000
    233c:	200005d8 	.word	0x200005d8
    2340:	f0003fff 	.word	0xf0003fff
    2344:	41005109 	.word	0x41005109

00002348 <_usb_d_dev_ep_stall>:
{
    2348:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    234a:	230f      	movs	r3, #15
    234c:	4003      	ands	r3, r0
    234e:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2350:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2352:	2b00      	cmp	r3, #0
    2354:	d009      	beq.n	236a <_usb_d_dev_ep_stall+0x22>
    2356:	001a      	movs	r2, r3
    2358:	2800      	cmp	r0, #0
    235a:	db04      	blt.n	2366 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    235c:	2b04      	cmp	r3, #4
    235e:	d905      	bls.n	236c <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2360:	2012      	movs	r0, #18
    2362:	4240      	negs	r0, r0
    2364:	e019      	b.n	239a <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2366:	1d1a      	adds	r2, r3, #4
    2368:	e7f8      	b.n	235c <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    236a:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    236c:	2901      	cmp	r1, #1
    236e:	d015      	beq.n	239c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2370:	2900      	cmp	r1, #0
    2372:	d036      	beq.n	23e2 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2374:	0093      	lsls	r3, r2, #2
    2376:	189b      	adds	r3, r3, r2
    2378:	009b      	lsls	r3, r3, #2
    237a:	4a47      	ldr	r2, [pc, #284]	; (2498 <_usb_d_dev_ep_stall+0x150>)
    237c:	18d2      	adds	r2, r2, r3
    237e:	3246      	adds	r2, #70	; 0x46
    2380:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2382:	230f      	movs	r3, #15
    2384:	4013      	ands	r3, r2
    2386:	015b      	lsls	r3, r3, #5
    2388:	4a44      	ldr	r2, [pc, #272]	; (249c <_usb_d_dev_ep_stall+0x154>)
    238a:	4694      	mov	ip, r2
    238c:	4463      	add	r3, ip
    238e:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2390:	2310      	movs	r3, #16
    2392:	40a3      	lsls	r3, r4
    2394:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    2396:	1e43      	subs	r3, r0, #1
    2398:	4198      	sbcs	r0, r3
}
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    239c:	2510      	movs	r5, #16
    239e:	40a5      	lsls	r5, r4
    23a0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    23a2:	493d      	ldr	r1, [pc, #244]	; (2498 <_usb_d_dev_ep_stall+0x150>)
    23a4:	0090      	lsls	r0, r2, #2
    23a6:	1883      	adds	r3, r0, r2
    23a8:	009b      	lsls	r3, r3, #2
    23aa:	18cb      	adds	r3, r1, r3
    23ac:	3346      	adds	r3, #70	; 0x46
    23ae:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    23b0:	230f      	movs	r3, #15
    23b2:	4033      	ands	r3, r6
    23b4:	015e      	lsls	r6, r3, #5
    23b6:	4f39      	ldr	r7, [pc, #228]	; (249c <_usb_d_dev_ep_stall+0x154>)
    23b8:	46bc      	mov	ip, r7
    23ba:	4466      	add	r6, ip
    23bc:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    23be:	2520      	movs	r5, #32
    23c0:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    23c2:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    23c4:	015b      	lsls	r3, r3, #5
    23c6:	4d36      	ldr	r5, [pc, #216]	; (24a0 <_usb_d_dev_ep_stall+0x158>)
    23c8:	46ac      	mov	ip, r5
    23ca:	4463      	add	r3, ip
    23cc:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    23ce:	1882      	adds	r2, r0, r2
    23d0:	0092      	lsls	r2, r2, #2
    23d2:	188a      	adds	r2, r1, r2
    23d4:	3240      	adds	r2, #64	; 0x40
    23d6:	79d3      	ldrb	r3, [r2, #7]
    23d8:	2108      	movs	r1, #8
    23da:	430b      	orrs	r3, r1
    23dc:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    23de:	2000      	movs	r0, #0
    23e0:	e7db      	b.n	239a <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    23e2:	0093      	lsls	r3, r2, #2
    23e4:	189b      	adds	r3, r3, r2
    23e6:	0099      	lsls	r1, r3, #2
    23e8:	4b2b      	ldr	r3, [pc, #172]	; (2498 <_usb_d_dev_ep_stall+0x150>)
    23ea:	185b      	adds	r3, r3, r1
    23ec:	3346      	adds	r3, #70	; 0x46
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	210f      	movs	r1, #15
    23f2:	400b      	ands	r3, r1
    23f4:	015d      	lsls	r5, r3, #5
    23f6:	492b      	ldr	r1, [pc, #172]	; (24a4 <_usb_d_dev_ep_stall+0x15c>)
    23f8:	468c      	mov	ip, r1
    23fa:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    23fc:	2183      	movs	r1, #131	; 0x83
    23fe:	0049      	lsls	r1, r1, #1
    2400:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2402:	39f6      	subs	r1, #246	; 0xf6
    2404:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2406:	2000      	movs	r0, #0
	if (!is_stalled) {
    2408:	420e      	tst	r6, r1
    240a:	d0c6      	beq.n	239a <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    240c:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    240e:	3005      	adds	r0, #5
    2410:	30ff      	adds	r0, #255	; 0xff
    2412:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2414:	2120      	movs	r1, #32
    2416:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2418:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    241a:	015b      	lsls	r3, r3, #5
    241c:	4e22      	ldr	r6, [pc, #136]	; (24a8 <_usb_d_dev_ep_stall+0x160>)
    241e:	46b4      	mov	ip, r6
    2420:	4463      	add	r3, ip
    2422:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2424:	2308      	movs	r3, #8
    2426:	33ff      	adds	r3, #255	; 0xff
    2428:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    242a:	420b      	tst	r3, r1
    242c:	d009      	beq.n	2442 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    242e:	2308      	movs	r3, #8
    2430:	33ff      	adds	r3, #255	; 0xff
    2432:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2434:	3b07      	subs	r3, #7
    2436:	3bff      	subs	r3, #255	; 0xff
    2438:	40a3      	lsls	r3, r4
    243a:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    243c:	2182      	movs	r1, #130	; 0x82
    243e:	0049      	lsls	r1, r1, #1
    2440:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2442:	0093      	lsls	r3, r2, #2
    2444:	189b      	adds	r3, r3, r2
    2446:	0099      	lsls	r1, r3, #2
    2448:	4b13      	ldr	r3, [pc, #76]	; (2498 <_usb_d_dev_ep_stall+0x150>)
    244a:	185b      	adds	r3, r3, r1
    244c:	3340      	adds	r3, #64	; 0x40
    244e:	79d9      	ldrb	r1, [r3, #7]
    2450:	2307      	movs	r3, #7
    2452:	400b      	ands	r3, r1
    2454:	2b01      	cmp	r3, #1
    2456:	d00b      	beq.n	2470 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    2458:	0093      	lsls	r3, r2, #2
    245a:	189a      	adds	r2, r3, r2
    245c:	0092      	lsls	r2, r2, #2
    245e:	4b0e      	ldr	r3, [pc, #56]	; (2498 <_usb_d_dev_ep_stall+0x150>)
    2460:	189b      	adds	r3, r3, r2
    2462:	3340      	adds	r3, #64	; 0x40
    2464:	79da      	ldrb	r2, [r3, #7]
    2466:	2108      	movs	r1, #8
    2468:	438a      	bics	r2, r1
    246a:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    246c:	2000      	movs	r0, #0
    246e:	e794      	b.n	239a <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2470:	3306      	adds	r3, #6
    2472:	33ff      	adds	r3, #255	; 0xff
    2474:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2476:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2478:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    247a:	4219      	tst	r1, r3
    247c:	d000      	beq.n	2480 <_usb_d_dev_ep_stall+0x138>
    247e:	e78c      	b.n	239a <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2480:	0093      	lsls	r3, r2, #2
    2482:	189a      	adds	r2, r3, r2
    2484:	0092      	lsls	r2, r2, #2
    2486:	4b04      	ldr	r3, [pc, #16]	; (2498 <_usb_d_dev_ep_stall+0x150>)
    2488:	189b      	adds	r3, r3, r2
    248a:	3340      	adds	r3, #64	; 0x40
    248c:	79da      	ldrb	r2, [r3, #7]
    248e:	2108      	movs	r1, #8
    2490:	438a      	bics	r2, r1
    2492:	71da      	strb	r2, [r3, #7]
    2494:	e781      	b.n	239a <_usb_d_dev_ep_stall+0x52>
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	20000658 	.word	0x20000658
    249c:	41005100 	.word	0x41005100
    24a0:	41005109 	.word	0x41005109
    24a4:	41005000 	.word	0x41005000
    24a8:	41005108 	.word	0x41005108

000024ac <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    24ac:	b570      	push	{r4, r5, r6, lr}
    24ae:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    24b0:	230f      	movs	r3, #15
    24b2:	4018      	ands	r0, r3
    24b4:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    24b6:	4b16      	ldr	r3, [pc, #88]	; (2510 <_usb_d_dev_ep_read_req+0x64>)
    24b8:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    24ba:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    24bc:	685b      	ldr	r3, [r3, #4]
    24be:	049b      	lsls	r3, r3, #18
    24c0:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    24c2:	2804      	cmp	r0, #4
    24c4:	d81a      	bhi.n	24fc <_usb_d_dev_ep_read_req+0x50>
    24c6:	2d00      	cmp	r5, #0
    24c8:	d01b      	beq.n	2502 <_usb_d_dev_ep_read_req+0x56>
    24ca:	4b12      	ldr	r3, [pc, #72]	; (2514 <_usb_d_dev_ep_read_req+0x68>)
    24cc:	469c      	mov	ip, r3
    24ce:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    24d0:	2380      	movs	r3, #128	; 0x80
    24d2:	005b      	lsls	r3, r3, #1
    24d4:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    24d6:	2b11      	cmp	r3, #17
    24d8:	d116      	bne.n	2508 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    24da:	2308      	movs	r3, #8
    24dc:	33ff      	adds	r3, #255	; 0xff
    24de:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    24e0:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    24e2:	06db      	lsls	r3, r3, #27
    24e4:	d400      	bmi.n	24e8 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    24e6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    24e8:	2208      	movs	r2, #8
    24ea:	0028      	movs	r0, r5
    24ec:	4b0a      	ldr	r3, [pc, #40]	; (2518 <_usb_d_dev_ep_read_req+0x6c>)
    24ee:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    24f0:	2210      	movs	r2, #16
    24f2:	2308      	movs	r3, #8
    24f4:	33ff      	adds	r3, #255	; 0xff
    24f6:	54e2      	strb	r2, [r4, r3]
	return bytes;
    24f8:	0030      	movs	r0, r6
    24fa:	e7f4      	b.n	24e6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    24fc:	2012      	movs	r0, #18
    24fe:	4240      	negs	r0, r0
    2500:	e7f1      	b.n	24e6 <_usb_d_dev_ep_read_req+0x3a>
    2502:	2012      	movs	r0, #18
    2504:	4240      	negs	r0, r0
    2506:	e7ee      	b.n	24e6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2508:	2013      	movs	r0, #19
    250a:	4240      	negs	r0, r0
    250c:	e7eb      	b.n	24e6 <_usb_d_dev_ep_read_req+0x3a>
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	200005d8 	.word	0x200005d8
    2514:	41005000 	.word	0x41005000
    2518:	000037d9 	.word	0x000037d9

0000251c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    251c:	b5f0      	push	{r4, r5, r6, r7, lr}
    251e:	46de      	mov	lr, fp
    2520:	4657      	mov	r7, sl
    2522:	464e      	mov	r6, r9
    2524:	4645      	mov	r5, r8
    2526:	b5e0      	push	{r5, r6, r7, lr}
    2528:	b085      	sub	sp, #20
    252a:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    252c:	7a05      	ldrb	r5, [r0, #8]
    252e:	230f      	movs	r3, #15
    2530:	402b      	ands	r3, r5
    2532:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2534:	2b00      	cmp	r3, #0
    2536:	d100      	bne.n	253a <_usb_d_dev_ep_trans+0x1e>
    2538:	e0d0      	b.n	26dc <_usb_d_dev_ep_trans+0x1c0>
    253a:	001e      	movs	r6, r3
    253c:	2d00      	cmp	r5, #0
    253e:	db39      	blt.n	25b4 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    2540:	0034      	movs	r4, r6
    2542:	4a72      	ldr	r2, [pc, #456]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    2544:	2120      	movs	r1, #32
    2546:	4688      	mov	r8, r1
    2548:	4490      	add	r8, r2
    254a:	1c71      	adds	r1, r6, #1
    254c:	0088      	lsls	r0, r1, #2
    254e:	1840      	adds	r0, r0, r1
    2550:	0080      	lsls	r0, r0, #2
    2552:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2554:	00b1      	lsls	r1, r6, #2
    2556:	1989      	adds	r1, r1, r6
    2558:	0089      	lsls	r1, r1, #2
    255a:	1852      	adds	r2, r2, r1
    255c:	3244      	adds	r2, #68	; 0x44
    255e:	8812      	ldrh	r2, [r2, #0]
    2560:	496b      	ldr	r1, [pc, #428]	; (2710 <_usb_d_dev_ep_trans+0x1f4>)
    2562:	428a      	cmp	r2, r1
    2564:	d028      	beq.n	25b8 <_usb_d_dev_ep_trans+0x9c>
    2566:	1e56      	subs	r6, r2, #1
    2568:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    256a:	6879      	ldr	r1, [r7, #4]
    256c:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    256e:	2b04      	cmp	r3, #4
    2570:	d900      	bls.n	2574 <_usb_d_dev_ep_trans+0x58>
    2572:	e09e      	b.n	26b2 <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2574:	683b      	ldr	r3, [r7, #0]
    2576:	4867      	ldr	r0, [pc, #412]	; (2714 <_usb_d_dev_ep_trans+0x1f8>)
    2578:	4283      	cmp	r3, r0
    257a:	d91f      	bls.n	25bc <_usb_d_dev_ep_trans+0xa0>
    257c:	1858      	adds	r0, r3, r1
    257e:	9001      	str	r0, [sp, #4]
    2580:	4865      	ldr	r0, [pc, #404]	; (2718 <_usb_d_dev_ep_trans+0x1fc>)
    2582:	4684      	mov	ip, r0
    2584:	9801      	ldr	r0, [sp, #4]
    2586:	4560      	cmp	r0, ip
    2588:	d818      	bhi.n	25bc <_usb_d_dev_ep_trans+0xa0>
    258a:	079b      	lsls	r3, r3, #30
    258c:	d116      	bne.n	25bc <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    258e:	2d00      	cmp	r5, #0
    2590:	db30      	blt.n	25f4 <_usb_d_dev_ep_trans+0xd8>
    2592:	428a      	cmp	r2, r1
    2594:	d900      	bls.n	2598 <_usb_d_dev_ep_trans+0x7c>
    2596:	e0ad      	b.n	26f4 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2598:	2e00      	cmp	r6, #0
    259a:	d02e      	beq.n	25fa <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    259c:	00a3      	lsls	r3, r4, #2
    259e:	191b      	adds	r3, r3, r4
    25a0:	009b      	lsls	r3, r3, #2
    25a2:	4a5a      	ldr	r2, [pc, #360]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    25a4:	18d3      	adds	r3, r2, r3
    25a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25a8:	2b00      	cmp	r3, #0
    25aa:	d100      	bne.n	25ae <_usb_d_dev_ep_trans+0x92>
    25ac:	e087      	b.n	26be <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    25ae:	2300      	movs	r3, #0
    25b0:	4699      	mov	r9, r3
    25b2:	e00e      	b.n	25d2 <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25b4:	1d1e      	adds	r6, r3, #4
    25b6:	e7c3      	b.n	2540 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    25b8:	0016      	movs	r6, r2
    25ba:	e7d6      	b.n	256a <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    25bc:	00a3      	lsls	r3, r4, #2
    25be:	191b      	adds	r3, r3, r4
    25c0:	009b      	lsls	r3, r3, #2
    25c2:	4a52      	ldr	r2, [pc, #328]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    25c4:	18d3      	adds	r3, r2, r3
    25c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25c8:	2b00      	cmp	r3, #0
    25ca:	d100      	bne.n	25ce <_usb_d_dev_ep_trans+0xb2>
    25cc:	e074      	b.n	26b8 <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    25ce:	2301      	movs	r3, #1
    25d0:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    25d2:	00a3      	lsls	r3, r4, #2
    25d4:	191b      	adds	r3, r3, r4
    25d6:	009a      	lsls	r2, r3, #2
    25d8:	4b4c      	ldr	r3, [pc, #304]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    25da:	189b      	adds	r3, r3, r2
    25dc:	3340      	adds	r3, #64	; 0x40
    25de:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    25e0:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    25e2:	071b      	lsls	r3, r3, #28
    25e4:	d50c      	bpl.n	2600 <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    25e6:	b005      	add	sp, #20
    25e8:	bc3c      	pop	{r2, r3, r4, r5}
    25ea:	4690      	mov	r8, r2
    25ec:	4699      	mov	r9, r3
    25ee:	46a2      	mov	sl, r4
    25f0:	46ab      	mov	fp, r5
    25f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    25f4:	2300      	movs	r3, #0
    25f6:	4699      	mov	r9, r3
    25f8:	e7eb      	b.n	25d2 <_usb_d_dev_ep_trans+0xb6>
    25fa:	2300      	movs	r3, #0
    25fc:	4699      	mov	r9, r3
    25fe:	e7e8      	b.n	25d2 <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    2600:	a803      	add	r0, sp, #12
    2602:	4b46      	ldr	r3, [pc, #280]	; (271c <_usb_d_dev_ep_trans+0x200>)
    2604:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2606:	00a3      	lsls	r3, r4, #2
    2608:	191b      	adds	r3, r3, r4
    260a:	009a      	lsls	r2, r3, #2
    260c:	4b3f      	ldr	r3, [pc, #252]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    260e:	189b      	adds	r3, r3, r2
    2610:	3340      	adds	r3, #64	; 0x40
    2612:	79db      	ldrb	r3, [r3, #7]
    2614:	065b      	lsls	r3, r3, #25
    2616:	d441      	bmi.n	269c <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    2618:	00a3      	lsls	r3, r4, #2
    261a:	191b      	adds	r3, r3, r4
    261c:	009b      	lsls	r3, r3, #2
    261e:	4a3b      	ldr	r2, [pc, #236]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    2620:	4693      	mov	fp, r2
    2622:	449b      	add	fp, r3
    2624:	2340      	movs	r3, #64	; 0x40
    2626:	445b      	add	r3, fp
    2628:	469a      	mov	sl, r3
    262a:	79db      	ldrb	r3, [r3, #7]
    262c:	2240      	movs	r2, #64	; 0x40
    262e:	4313      	orrs	r3, r2
    2630:	4652      	mov	r2, sl
    2632:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2634:	a803      	add	r0, sp, #12
    2636:	4b3a      	ldr	r3, [pc, #232]	; (2720 <_usb_d_dev_ep_trans+0x204>)
    2638:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    263a:	465b      	mov	r3, fp
    263c:	683a      	ldr	r2, [r7, #0]
    263e:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    2640:	687a      	ldr	r2, [r7, #4]
    2642:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    2644:	2300      	movs	r3, #0
    2646:	465a      	mov	r2, fp
    2648:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    264a:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    264c:	01d2      	lsls	r2, r2, #7
    264e:	4653      	mov	r3, sl
    2650:	79d9      	ldrb	r1, [r3, #7]
    2652:	237f      	movs	r3, #127	; 0x7f
    2654:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    2656:	4649      	mov	r1, r9
    2658:	0149      	lsls	r1, r1, #5
    265a:	4313      	orrs	r3, r2
    265c:	2220      	movs	r2, #32
    265e:	4393      	bics	r3, r2
    2660:	430b      	orrs	r3, r1
    2662:	4652      	mov	r2, sl
    2664:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2666:	7a7b      	ldrb	r3, [r7, #9]
    2668:	2200      	movs	r2, #0
    266a:	2b00      	cmp	r3, #0
    266c:	d002      	beq.n	2674 <_usb_d_dev_ep_trans+0x158>
    266e:	4272      	negs	r2, r6
    2670:	4172      	adcs	r2, r6
    2672:	b2d2      	uxtb	r2, r2
    2674:	00a3      	lsls	r3, r4, #2
    2676:	191c      	adds	r4, r3, r4
    2678:	00a4      	lsls	r4, r4, #2
    267a:	4b24      	ldr	r3, [pc, #144]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    267c:	191b      	adds	r3, r3, r4
    267e:	3340      	adds	r3, #64	; 0x40
    2680:	0112      	lsls	r2, r2, #4
    2682:	79de      	ldrb	r6, [r3, #7]
    2684:	2110      	movs	r1, #16
    2686:	438e      	bics	r6, r1
    2688:	4316      	orrs	r6, r2
    268a:	71de      	strb	r6, [r3, #7]
	if (dir) {
    268c:	2d00      	cmp	r5, #0
    268e:	db0a      	blt.n	26a6 <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    2690:	2100      	movs	r1, #0
    2692:	4640      	mov	r0, r8
    2694:	4b23      	ldr	r3, [pc, #140]	; (2724 <_usb_d_dev_ep_trans+0x208>)
    2696:	4798      	blx	r3
	return ERR_NONE;
    2698:	2000      	movs	r0, #0
    269a:	e7a4      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    269c:	a803      	add	r0, sp, #12
    269e:	4b20      	ldr	r3, [pc, #128]	; (2720 <_usb_d_dev_ep_trans+0x204>)
    26a0:	4798      	blx	r3
		return USB_BUSY;
    26a2:	2001      	movs	r0, #1
    26a4:	e79f      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    26a6:	2100      	movs	r1, #0
    26a8:	4640      	mov	r0, r8
    26aa:	4b1f      	ldr	r3, [pc, #124]	; (2728 <_usb_d_dev_ep_trans+0x20c>)
    26ac:	4798      	blx	r3
	return ERR_NONE;
    26ae:	2000      	movs	r0, #0
    26b0:	e799      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    26b2:	2012      	movs	r0, #18
    26b4:	4240      	negs	r0, r0
    26b6:	e796      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    26b8:	2013      	movs	r0, #19
    26ba:	4240      	negs	r0, r0
    26bc:	e793      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    26be:	2012      	movs	r0, #18
    26c0:	4240      	negs	r0, r0
    26c2:	e790      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    26c4:	2013      	movs	r0, #19
    26c6:	4240      	negs	r0, r0
    26c8:	e78d      	b.n	25e6 <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    26ca:	6879      	ldr	r1, [r7, #4]
    26cc:	058e      	lsls	r6, r1, #22
    26ce:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    26d0:	4b0e      	ldr	r3, [pc, #56]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    26d2:	2034      	movs	r0, #52	; 0x34
    26d4:	4680      	mov	r8, r0
    26d6:	4498      	add	r8, r3
    26d8:	2400      	movs	r4, #0
    26da:	e74b      	b.n	2574 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    26dc:	2244      	movs	r2, #68	; 0x44
    26de:	490b      	ldr	r1, [pc, #44]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    26e0:	5a8a      	ldrh	r2, [r1, r2]
    26e2:	490b      	ldr	r1, [pc, #44]	; (2710 <_usb_d_dev_ep_trans+0x1f4>)
    26e4:	428a      	cmp	r2, r1
    26e6:	d0f0      	beq.n	26ca <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    26e8:	4908      	ldr	r1, [pc, #32]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    26ea:	2034      	movs	r0, #52	; 0x34
    26ec:	4680      	mov	r8, r0
    26ee:	4488      	add	r8, r1
    26f0:	2400      	movs	r4, #0
    26f2:	e738      	b.n	2566 <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    26f4:	00a3      	lsls	r3, r4, #2
    26f6:	191b      	adds	r3, r3, r4
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	4a04      	ldr	r2, [pc, #16]	; (270c <_usb_d_dev_ep_trans+0x1f0>)
    26fc:	18d3      	adds	r3, r2, r3
    26fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2700:	2b00      	cmp	r3, #0
    2702:	d0df      	beq.n	26c4 <_usb_d_dev_ep_trans+0x1a8>
    2704:	2301      	movs	r3, #1
    2706:	4699      	mov	r9, r3
    2708:	e763      	b.n	25d2 <_usb_d_dev_ep_trans+0xb6>
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	20000658 	.word	0x20000658
    2710:	000003ff 	.word	0x000003ff
    2714:	1fffffff 	.word	0x1fffffff
    2718:	20007fff 	.word	0x20007fff
    271c:	0000363d 	.word	0x0000363d
    2720:	0000364b 	.word	0x0000364b
    2724:	00001ae9 	.word	0x00001ae9
    2728:	0000193d 	.word	0x0000193d

0000272c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    272c:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    272e:	230f      	movs	r3, #15
    2730:	4003      	ands	r3, r0
    2732:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2734:	2b00      	cmp	r3, #0
    2736:	d00e      	beq.n	2756 <_usb_d_dev_ep_abort+0x2a>
    2738:	001a      	movs	r2, r3
    273a:	2900      	cmp	r1, #0
    273c:	db02      	blt.n	2744 <_usb_d_dev_ep_abort+0x18>
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    273e:	2b04      	cmp	r3, #4
    2740:	d902      	bls.n	2748 <_usb_d_dev_ep_abort+0x1c>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    2742:	bd10      	pop	{r4, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2744:	1d1a      	adds	r2, r3, #4
    2746:	e7fa      	b.n	273e <_usb_d_dev_ep_abort+0x12>
	return &dev_inst.ep[ep_index];
    2748:	3201      	adds	r2, #1
    274a:	2014      	movs	r0, #20
    274c:	4342      	muls	r2, r0
    274e:	4805      	ldr	r0, [pc, #20]	; (2764 <_usb_d_dev_ep_abort+0x38>)
    2750:	3020      	adds	r0, #32
    2752:	1880      	adds	r0, r0, r2
    2754:	e001      	b.n	275a <_usb_d_dev_ep_abort+0x2e>
    2756:	4803      	ldr	r0, [pc, #12]	; (2764 <_usb_d_dev_ep_abort+0x38>)
    2758:	3034      	adds	r0, #52	; 0x34
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    275a:	0fc9      	lsrs	r1, r1, #31
    275c:	2202      	movs	r2, #2
    275e:	4b02      	ldr	r3, [pc, #8]	; (2768 <_usb_d_dev_ep_abort+0x3c>)
    2760:	4798      	blx	r3
    2762:	e7ee      	b.n	2742 <_usb_d_dev_ep_abort+0x16>
    2764:	20000658 	.word	0x20000658
    2768:	00001789 	.word	0x00001789

0000276c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    276c:	1e0b      	subs	r3, r1, #0
    276e:	d006      	beq.n	277e <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2770:	2801      	cmp	r0, #1
    2772:	d006      	beq.n	2782 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2774:	2800      	cmp	r0, #0
    2776:	d101      	bne.n	277c <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2778:	4a03      	ldr	r2, [pc, #12]	; (2788 <_usb_d_dev_register_callback+0x1c>)
    277a:	6213      	str	r3, [r2, #32]
	}
}
    277c:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    277e:	4b03      	ldr	r3, [pc, #12]	; (278c <_usb_d_dev_register_callback+0x20>)
    2780:	e7f6      	b.n	2770 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2782:	4a01      	ldr	r2, [pc, #4]	; (2788 <_usb_d_dev_register_callback+0x1c>)
    2784:	6253      	str	r3, [r2, #36]	; 0x24
    2786:	e7f9      	b.n	277c <_usb_d_dev_register_callback+0x10>
    2788:	20000658 	.word	0x20000658
    278c:	00001699 	.word	0x00001699

00002790 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2790:	1e0b      	subs	r3, r1, #0
    2792:	d008      	beq.n	27a6 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2794:	2800      	cmp	r0, #0
    2796:	d008      	beq.n	27aa <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2798:	2801      	cmp	r0, #1
    279a:	d009      	beq.n	27b0 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    279c:	2802      	cmp	r0, #2
    279e:	d106      	bne.n	27ae <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    27a0:	4a05      	ldr	r2, [pc, #20]	; (27b8 <_usb_d_dev_register_ep_callback+0x28>)
    27a2:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    27a4:	e003      	b.n	27ae <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    27a6:	4b05      	ldr	r3, [pc, #20]	; (27bc <_usb_d_dev_register_ep_callback+0x2c>)
    27a8:	e7f4      	b.n	2794 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    27aa:	4a03      	ldr	r2, [pc, #12]	; (27b8 <_usb_d_dev_register_ep_callback+0x28>)
    27ac:	6293      	str	r3, [r2, #40]	; 0x28
}
    27ae:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    27b0:	4a01      	ldr	r2, [pc, #4]	; (27b8 <_usb_d_dev_register_ep_callback+0x28>)
    27b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    27b4:	e7fb      	b.n	27ae <_usb_d_dev_register_ep_callback+0x1e>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	20000658 	.word	0x20000658
    27bc:	00001699 	.word	0x00001699

000027c0 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    27c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    27c2:	4b8b      	ldr	r3, [pc, #556]	; (29f0 <USB_Handler+0x230>)
    27c4:	8c1e      	ldrh	r6, [r3, #32]
    27c6:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    27c8:	2e00      	cmp	r6, #0
    27ca:	d003      	beq.n	27d4 <USB_Handler+0x14>
    27cc:	4c89      	ldr	r4, [pc, #548]	; (29f4 <USB_Handler+0x234>)
    27ce:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    27d0:	2500      	movs	r5, #0
    27d2:	e0ca      	b.n	296a <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    27d4:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    27d6:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    27d8:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    27da:	075a      	lsls	r2, r3, #29
    27dc:	d418      	bmi.n	2810 <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    27de:	059a      	lsls	r2, r3, #22
    27e0:	d41d      	bmi.n	281e <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    27e2:	061a      	lsls	r2, r3, #24
    27e4:	d44f      	bmi.n	2886 <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    27e6:	2270      	movs	r2, #112	; 0x70
    27e8:	421a      	tst	r2, r3
    27ea:	d155      	bne.n	2898 <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    27ec:	071a      	lsls	r2, r3, #28
    27ee:	d500      	bpl.n	27f2 <USB_Handler+0x32>
    27f0:	e06e      	b.n	28d0 <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    27f2:	07db      	lsls	r3, r3, #31
    27f4:	d5ea      	bpl.n	27cc <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    27f6:	4b7e      	ldr	r3, [pc, #504]	; (29f0 <USB_Handler+0x230>)
    27f8:	4a7f      	ldr	r2, [pc, #508]	; (29f8 <USB_Handler+0x238>)
    27fa:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    27fc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    27fe:	3a92      	subs	r2, #146	; 0x92
    2800:	3aff      	subs	r2, #255	; 0xff
    2802:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2804:	4b7b      	ldr	r3, [pc, #492]	; (29f4 <USB_Handler+0x234>)
    2806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2808:	2100      	movs	r1, #0
    280a:	2004      	movs	r0, #4
    280c:	4798      	blx	r3
    280e:	e005      	b.n	281c <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2810:	2204      	movs	r2, #4
    2812:	4b77      	ldr	r3, [pc, #476]	; (29f0 <USB_Handler+0x230>)
    2814:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2816:	4b77      	ldr	r3, [pc, #476]	; (29f4 <USB_Handler+0x234>)
    2818:	6a1b      	ldr	r3, [r3, #32]
    281a:	4798      	blx	r3

	_usb_d_dev_handler();
}
    281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    281e:	4b74      	ldr	r3, [pc, #464]	; (29f0 <USB_Handler+0x230>)
    2820:	4a75      	ldr	r2, [pc, #468]	; (29f8 <USB_Handler+0x238>)
    2822:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2824:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2826:	3a92      	subs	r2, #146	; 0x92
    2828:	3aff      	subs	r2, #255	; 0xff
    282a:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    282c:	4b73      	ldr	r3, [pc, #460]	; (29fc <USB_Handler+0x23c>)
    282e:	891b      	ldrh	r3, [r3, #8]
    2830:	071b      	lsls	r3, r3, #28
    2832:	0f1b      	lsrs	r3, r3, #28
    2834:	2b03      	cmp	r3, #3
    2836:	d024      	beq.n	2882 <USB_Handler+0xc2>
    2838:	4b70      	ldr	r3, [pc, #448]	; (29fc <USB_Handler+0x23c>)
    283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    283c:	071b      	lsls	r3, r3, #28
    283e:	0f1b      	lsrs	r3, r3, #28
    2840:	2b03      	cmp	r3, #3
    2842:	d012      	beq.n	286a <USB_Handler+0xaa>
    2844:	2348      	movs	r3, #72	; 0x48
    2846:	4a6d      	ldr	r2, [pc, #436]	; (29fc <USB_Handler+0x23c>)
    2848:	5ad3      	ldrh	r3, [r2, r3]
    284a:	071b      	lsls	r3, r3, #28
    284c:	0f1b      	lsrs	r3, r3, #28
    284e:	2b03      	cmp	r3, #3
    2850:	d015      	beq.n	287e <USB_Handler+0xbe>
    2852:	2368      	movs	r3, #104	; 0x68
    2854:	5ad3      	ldrh	r3, [r2, r3]
    2856:	071b      	lsls	r3, r3, #28
    2858:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    285a:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    285c:	2b03      	cmp	r3, #3
    285e:	d005      	beq.n	286c <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2860:	4b64      	ldr	r3, [pc, #400]	; (29f4 <USB_Handler+0x234>)
    2862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2864:	2003      	movs	r0, #3
    2866:	4798      	blx	r3
    2868:	e7d8      	b.n	281c <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    286a:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    286c:	015b      	lsls	r3, r3, #5
    286e:	4a63      	ldr	r2, [pc, #396]	; (29fc <USB_Handler+0x23c>)
    2870:	18d3      	adds	r3, r2, r3
    2872:	8919      	ldrh	r1, [r3, #8]
    2874:	0449      	lsls	r1, r1, #17
    2876:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    2878:	2200      	movs	r2, #0
    287a:	811a      	strh	r2, [r3, #8]
    287c:	e7f0      	b.n	2860 <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    287e:	2302      	movs	r3, #2
    2880:	e7f4      	b.n	286c <USB_Handler+0xac>
    2882:	2300      	movs	r3, #0
    2884:	e7f2      	b.n	286c <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2886:	2280      	movs	r2, #128	; 0x80
    2888:	4b59      	ldr	r3, [pc, #356]	; (29f0 <USB_Handler+0x230>)
    288a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    288c:	4b59      	ldr	r3, [pc, #356]	; (29f4 <USB_Handler+0x234>)
    288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2890:	2100      	movs	r1, #0
    2892:	2005      	movs	r0, #5
    2894:	4798      	blx	r3
    2896:	e7c1      	b.n	281c <USB_Handler+0x5c>
    2898:	4b55      	ldr	r3, [pc, #340]	; (29f0 <USB_Handler+0x230>)
    289a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    289c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    289e:	4a56      	ldr	r2, [pc, #344]	; (29f8 <USB_Handler+0x238>)
    28a0:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    28a2:	4b57      	ldr	r3, [pc, #348]	; (2a00 <USB_Handler+0x240>)
    28a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    28a6:	069b      	lsls	r3, r3, #26
    28a8:	d40c      	bmi.n	28c4 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    28aa:	4955      	ldr	r1, [pc, #340]	; (2a00 <USB_Handler+0x240>)
	tmp &= mask;
    28ac:	3a32      	subs	r2, #50	; 0x32
    28ae:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    28b0:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    28b2:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    28b4:	2bd0      	cmp	r3, #208	; 0xd0
    28b6:	d1fb      	bne.n	28b0 <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    28b8:	4b4e      	ldr	r3, [pc, #312]	; (29f4 <USB_Handler+0x234>)
    28ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28bc:	2100      	movs	r1, #0
    28be:	2002      	movs	r0, #2
    28c0:	4798      	blx	r3
    28c2:	e7ab      	b.n	281c <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    28c4:	494e      	ldr	r1, [pc, #312]	; (2a00 <USB_Handler+0x240>)
	tmp &= mask;
    28c6:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    28c8:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    28ca:	421a      	tst	r2, r3
    28cc:	d0fc      	beq.n	28c8 <USB_Handler+0x108>
    28ce:	e7f3      	b.n	28b8 <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    28d0:	4b47      	ldr	r3, [pc, #284]	; (29f0 <USB_Handler+0x230>)
    28d2:	2100      	movs	r1, #0
    28d4:	2280      	movs	r2, #128	; 0x80
    28d6:	0052      	lsls	r2, r2, #1
    28d8:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    28da:	3af8      	subs	r2, #248	; 0xf8
    28dc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    28de:	3268      	adds	r2, #104	; 0x68
    28e0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    28e2:	4a45      	ldr	r2, [pc, #276]	; (29f8 <USB_Handler+0x238>)
    28e4:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    28e6:	4b47      	ldr	r3, [pc, #284]	; (2a04 <USB_Handler+0x244>)
    28e8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    28ea:	4b42      	ldr	r3, [pc, #264]	; (29f4 <USB_Handler+0x234>)
    28ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28ee:	2100      	movs	r1, #0
    28f0:	2001      	movs	r0, #1
    28f2:	4798      	blx	r3
    28f4:	e792      	b.n	281c <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    28f6:	06cb      	lsls	r3, r1, #27
    28f8:	d407      	bmi.n	290a <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    28fa:	064b      	lsls	r3, r1, #25
    28fc:	d408      	bmi.n	2910 <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    28fe:	068b      	lsls	r3, r1, #26
    2900:	d52e      	bpl.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    2902:	2100      	movs	r1, #0
    2904:	4b40      	ldr	r3, [pc, #256]	; (2a08 <USB_Handler+0x248>)
    2906:	4798      	blx	r3
    2908:	e02a      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    290a:	4b40      	ldr	r3, [pc, #256]	; (2a0c <USB_Handler+0x24c>)
    290c:	4798      	blx	r3
    290e:	e027      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    2910:	2101      	movs	r1, #1
    2912:	4b3d      	ldr	r3, [pc, #244]	; (2a08 <USB_Handler+0x248>)
    2914:	4798      	blx	r3
    2916:	e023      	b.n	2960 <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2918:	064b      	lsls	r3, r1, #25
    291a:	d40e      	bmi.n	293a <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    291c:	070b      	lsls	r3, r1, #28
    291e:	d410      	bmi.n	2942 <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2920:	078b      	lsls	r3, r1, #30
    2922:	d412      	bmi.n	294a <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2924:	2307      	movs	r3, #7
    2926:	401a      	ands	r2, r3
    2928:	2a01      	cmp	r2, #1
    292a:	d119      	bne.n	2960 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    292c:	074b      	lsls	r3, r1, #29
    292e:	d410      	bmi.n	2952 <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2930:	06cb      	lsls	r3, r1, #27
    2932:	d515      	bpl.n	2960 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    2934:	4b35      	ldr	r3, [pc, #212]	; (2a0c <USB_Handler+0x24c>)
    2936:	4798      	blx	r3
    2938:	e012      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    293a:	2101      	movs	r1, #1
    293c:	4b32      	ldr	r3, [pc, #200]	; (2a08 <USB_Handler+0x248>)
    293e:	4798      	blx	r3
    2940:	e00e      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    2942:	2101      	movs	r1, #1
    2944:	4b32      	ldr	r3, [pc, #200]	; (2a10 <USB_Handler+0x250>)
    2946:	4798      	blx	r3
    2948:	e00a      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    294a:	2101      	movs	r1, #1
    294c:	4b31      	ldr	r3, [pc, #196]	; (2a14 <USB_Handler+0x254>)
    294e:	4798      	blx	r3
    2950:	e006      	b.n	2960 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    2952:	2100      	movs	r1, #0
    2954:	4b2e      	ldr	r3, [pc, #184]	; (2a10 <USB_Handler+0x250>)
    2956:	4798      	blx	r3
    2958:	e002      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    295a:	2100      	movs	r1, #0
    295c:	4b2a      	ldr	r3, [pc, #168]	; (2a08 <USB_Handler+0x248>)
    295e:	4798      	blx	r3
    2960:	3501      	adds	r5, #1
    2962:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2964:	2d09      	cmp	r5, #9
    2966:	d100      	bne.n	296a <USB_Handler+0x1aa>
    2968:	e758      	b.n	281c <USB_Handler+0x5c>
    296a:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    296c:	7ca1      	ldrb	r1, [r4, #18]
    296e:	29ff      	cmp	r1, #255	; 0xff
    2970:	d0f6      	beq.n	2960 <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    2972:	230f      	movs	r3, #15
    2974:	400b      	ands	r3, r1
    2976:	2101      	movs	r1, #1
    2978:	4099      	lsls	r1, r3
    297a:	420e      	tst	r6, r1
    297c:	d0f0      	beq.n	2960 <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    297e:	0159      	lsls	r1, r3, #5
    2980:	4f25      	ldr	r7, [pc, #148]	; (2a18 <USB_Handler+0x258>)
    2982:	46bc      	mov	ip, r7
    2984:	4461      	add	r1, ip
    2986:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2988:	015b      	lsls	r3, r3, #5
    298a:	4f24      	ldr	r7, [pc, #144]	; (2a1c <USB_Handler+0x25c>)
    298c:	46bc      	mov	ip, r7
    298e:	4463      	add	r3, ip
    2990:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2992:	4019      	ands	r1, r3
	if (flags) {
    2994:	d0e4      	beq.n	2960 <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2996:	00ab      	lsls	r3, r5, #2
    2998:	195a      	adds	r2, r3, r5
    299a:	0092      	lsls	r2, r2, #2
    299c:	4b15      	ldr	r3, [pc, #84]	; (29f4 <USB_Handler+0x234>)
    299e:	469c      	mov	ip, r3
    29a0:	4462      	add	r2, ip
    29a2:	3230      	adds	r2, #48	; 0x30
    29a4:	7dd2      	ldrb	r2, [r2, #23]
    29a6:	2347      	movs	r3, #71	; 0x47
    29a8:	4013      	ands	r3, r2
    29aa:	2b01      	cmp	r3, #1
    29ac:	d0a3      	beq.n	28f6 <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    29ae:	b253      	sxtb	r3, r2
    29b0:	2b00      	cmp	r3, #0
    29b2:	dbb1      	blt.n	2918 <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    29b4:	068b      	lsls	r3, r1, #26
    29b6:	d4d0      	bmi.n	295a <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    29b8:	074b      	lsls	r3, r1, #29
    29ba:	d40c      	bmi.n	29d6 <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    29bc:	07cb      	lsls	r3, r1, #31
    29be:	d40e      	bmi.n	29de <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    29c0:	2307      	movs	r3, #7
    29c2:	401a      	ands	r2, r3
    29c4:	2a01      	cmp	r2, #1
    29c6:	d1cb      	bne.n	2960 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    29c8:	070b      	lsls	r3, r1, #28
    29ca:	d40c      	bmi.n	29e6 <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    29cc:	06cb      	lsls	r3, r1, #27
    29ce:	d5c7      	bpl.n	2960 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    29d0:	4b0e      	ldr	r3, [pc, #56]	; (2a0c <USB_Handler+0x24c>)
    29d2:	4798      	blx	r3
    29d4:	e7c4      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    29d6:	2100      	movs	r1, #0
    29d8:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <USB_Handler+0x250>)
    29da:	4798      	blx	r3
    29dc:	e7c0      	b.n	2960 <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    29de:	2101      	movs	r1, #1
    29e0:	4b0f      	ldr	r3, [pc, #60]	; (2a20 <USB_Handler+0x260>)
    29e2:	4798      	blx	r3
    29e4:	e7bc      	b.n	2960 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    29e6:	2101      	movs	r1, #1
    29e8:	4b09      	ldr	r3, [pc, #36]	; (2a10 <USB_Handler+0x250>)
    29ea:	4798      	blx	r3
    29ec:	e7b8      	b.n	2960 <USB_Handler+0x1a0>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	41005000 	.word	0x41005000
    29f4:	20000658 	.word	0x20000658
    29f8:	00000201 	.word	0x00000201
    29fc:	200005d8 	.word	0x200005d8
    2a00:	40000800 	.word	0x40000800
    2a04:	000018f5 	.word	0x000018f5
    2a08:	00001731 	.word	0x00001731
    2a0c:	0000169d 	.word	0x0000169d
    2a10:	000017f5 	.word	0x000017f5
    2a14:	0000193d 	.word	0x0000193d
    2a18:	41005100 	.word	0x41005100
    2a1c:	41005109 	.word	0x41005109
    2a20:	00001ae9 	.word	0x00001ae9

00002a24 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a26:	b083      	sub	sp, #12
    2a28:	0006      	movs	r6, r0
    2a2a:	000c      	movs	r4, r1
    2a2c:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2a2e:	780a      	ldrb	r2, [r1, #0]
    2a30:	0653      	lsls	r3, r2, #25
    2a32:	0f9b      	lsrs	r3, r3, #30
    2a34:	2b01      	cmp	r3, #1
    2a36:	d000      	beq.n	2a3a <cdcdf_acm_req+0x16>
    2a38:	e06c      	b.n	2b14 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2a3a:	7909      	ldrb	r1, [r1, #4]
    2a3c:	7963      	ldrb	r3, [r4, #5]
    2a3e:	021b      	lsls	r3, r3, #8
    2a40:	430b      	orrs	r3, r1
    2a42:	493b      	ldr	r1, [pc, #236]	; (2b30 <cdcdf_acm_req+0x10c>)
    2a44:	7809      	ldrb	r1, [r1, #0]
    2a46:	4299      	cmp	r1, r3
    2a48:	d003      	beq.n	2a52 <cdcdf_acm_req+0x2e>
    2a4a:	4939      	ldr	r1, [pc, #228]	; (2b30 <cdcdf_acm_req+0x10c>)
    2a4c:	7849      	ldrb	r1, [r1, #1]
    2a4e:	4299      	cmp	r1, r3
    2a50:	d163      	bne.n	2b1a <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2a52:	b252      	sxtb	r2, r2
    2a54:	2a00      	cmp	r2, #0
    2a56:	db0e      	blt.n	2a76 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2a58:	79a7      	ldrb	r7, [r4, #6]
    2a5a:	79e3      	ldrb	r3, [r4, #7]
    2a5c:	021b      	lsls	r3, r3, #8
    2a5e:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2a60:	4b34      	ldr	r3, [pc, #208]	; (2b34 <cdcdf_acm_req+0x110>)
    2a62:	4798      	blx	r3
	switch (req->bRequest) {
    2a64:	7863      	ldrb	r3, [r4, #1]
    2a66:	2b20      	cmp	r3, #32
    2a68:	d018      	beq.n	2a9c <cdcdf_acm_req+0x78>
    2a6a:	2b22      	cmp	r3, #34	; 0x22
    2a6c:	d03c      	beq.n	2ae8 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2a6e:	200d      	movs	r0, #13
    2a70:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2a72:	b003      	add	sp, #12
    2a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2a76:	2d01      	cmp	r5, #1
    2a78:	d052      	beq.n	2b20 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2a7a:	7863      	ldrb	r3, [r4, #1]
    2a7c:	2b21      	cmp	r3, #33	; 0x21
    2a7e:	d151      	bne.n	2b24 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2a80:	79a2      	ldrb	r2, [r4, #6]
    2a82:	79e3      	ldrb	r3, [r4, #7]
    2a84:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2a86:	4313      	orrs	r3, r2
    2a88:	2b07      	cmp	r3, #7
    2a8a:	d14e      	bne.n	2b2a <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2a8c:	2300      	movs	r3, #0
    2a8e:	2207      	movs	r2, #7
    2a90:	4927      	ldr	r1, [pc, #156]	; (2b30 <cdcdf_acm_req+0x10c>)
    2a92:	3108      	adds	r1, #8
    2a94:	0030      	movs	r0, r6
    2a96:	4c28      	ldr	r4, [pc, #160]	; (2b38 <cdcdf_acm_req+0x114>)
    2a98:	47a0      	blx	r4
    2a9a:	e7ea      	b.n	2a72 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2a9c:	2f07      	cmp	r7, #7
    2a9e:	d134      	bne.n	2b0a <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2aa0:	2d00      	cmp	r5, #0
    2aa2:	d01a      	beq.n	2ada <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2aa4:	2207      	movs	r2, #7
    2aa6:	0001      	movs	r1, r0
    2aa8:	4668      	mov	r0, sp
    2aaa:	4b24      	ldr	r3, [pc, #144]	; (2b3c <cdcdf_acm_req+0x118>)
    2aac:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2aae:	4b20      	ldr	r3, [pc, #128]	; (2b30 <cdcdf_acm_req+0x10c>)
    2ab0:	691b      	ldr	r3, [r3, #16]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d005      	beq.n	2ac2 <cdcdf_acm_req+0x9e>
    2ab6:	4668      	mov	r0, sp
    2ab8:	4798      	blx	r3
    2aba:	0003      	movs	r3, r0
			return ERR_NONE;
    2abc:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d0d7      	beq.n	2a72 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    2ac2:	4a1b      	ldr	r2, [pc, #108]	; (2b30 <cdcdf_acm_req+0x10c>)
    2ac4:	0013      	movs	r3, r2
    2ac6:	9900      	ldr	r1, [sp, #0]
    2ac8:	6091      	str	r1, [r2, #8]
    2aca:	466a      	mov	r2, sp
    2acc:	8892      	ldrh	r2, [r2, #4]
    2ace:	819a      	strh	r2, [r3, #12]
    2ad0:	466a      	mov	r2, sp
    2ad2:	7992      	ldrb	r2, [r2, #6]
    2ad4:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    2ad6:	2000      	movs	r0, #0
    2ad8:	e7cb      	b.n	2a72 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2ada:	2300      	movs	r3, #0
    2adc:	2207      	movs	r2, #7
    2ade:	0001      	movs	r1, r0
    2ae0:	0030      	movs	r0, r6
    2ae2:	4c15      	ldr	r4, [pc, #84]	; (2b38 <cdcdf_acm_req+0x114>)
    2ae4:	47a0      	blx	r4
    2ae6:	e7c4      	b.n	2a72 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    2ae8:	2300      	movs	r3, #0
    2aea:	2200      	movs	r2, #0
    2aec:	2100      	movs	r1, #0
    2aee:	2000      	movs	r0, #0
    2af0:	4d11      	ldr	r5, [pc, #68]	; (2b38 <cdcdf_acm_req+0x114>)
    2af2:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2af4:	4b0e      	ldr	r3, [pc, #56]	; (2b30 <cdcdf_acm_req+0x10c>)
    2af6:	695b      	ldr	r3, [r3, #20]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d009      	beq.n	2b10 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2afc:	78a2      	ldrb	r2, [r4, #2]
    2afe:	78e0      	ldrb	r0, [r4, #3]
    2b00:	0200      	lsls	r0, r0, #8
    2b02:	4310      	orrs	r0, r2
    2b04:	4798      	blx	r3
		return ERR_NONE;
    2b06:	2000      	movs	r0, #0
    2b08:	e7b3      	b.n	2a72 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2b0a:	2001      	movs	r0, #1
    2b0c:	4240      	negs	r0, r0
    2b0e:	e7b0      	b.n	2a72 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2b10:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2b12:	e7ae      	b.n	2a72 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2b14:	200a      	movs	r0, #10
    2b16:	4240      	negs	r0, r0
    2b18:	e7ab      	b.n	2a72 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    2b1a:	200a      	movs	r0, #10
    2b1c:	4240      	negs	r0, r0
    2b1e:	e7a8      	b.n	2a72 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    2b20:	2000      	movs	r0, #0
    2b22:	e7a6      	b.n	2a72 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    2b24:	200d      	movs	r0, #13
    2b26:	4240      	negs	r0, r0
    2b28:	e7a3      	b.n	2a72 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    2b2a:	2001      	movs	r0, #1
    2b2c:	4240      	negs	r0, r0
    2b2e:	e7a0      	b.n	2a72 <cdcdf_acm_req+0x4e>
    2b30:	20000980 	.word	0x20000980
    2b34:	000034c1 	.word	0x000034c1
    2b38:	00002f71 	.word	0x00002f71
    2b3c:	000037d9 	.word	0x000037d9

00002b40 <cdcdf_acm_ctrl>:
{
    2b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b42:	46de      	mov	lr, fp
    2b44:	4657      	mov	r7, sl
    2b46:	464e      	mov	r6, r9
    2b48:	4645      	mov	r5, r8
    2b4a:	b5e0      	push	{r5, r6, r7, lr}
    2b4c:	b083      	sub	sp, #12
    2b4e:	0016      	movs	r6, r2
	switch (ctrl) {
    2b50:	2901      	cmp	r1, #1
    2b52:	d068      	beq.n	2c26 <cdcdf_acm_ctrl+0xe6>
    2b54:	2900      	cmp	r1, #0
    2b56:	d00b      	beq.n	2b70 <cdcdf_acm_ctrl+0x30>
    2b58:	2902      	cmp	r1, #2
    2b5a:	d100      	bne.n	2b5e <cdcdf_acm_ctrl+0x1e>
    2b5c:	e093      	b.n	2c86 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2b5e:	200d      	movs	r0, #13
    2b60:	4240      	negs	r0, r0
}
    2b62:	b003      	add	sp, #12
    2b64:	bc3c      	pop	{r2, r3, r4, r5}
    2b66:	4690      	mov	r8, r2
    2b68:	4699      	mov	r9, r3
    2b6a:	46a2      	mov	sl, r4
    2b6c:	46ab      	mov	fp, r5
    2b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2b70:	6883      	ldr	r3, [r0, #8]
    2b72:	4698      	mov	r8, r3
	ifc = desc->sod;
    2b74:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2b76:	2800      	cmp	r0, #0
    2b78:	d100      	bne.n	2b7c <cdcdf_acm_ctrl+0x3c>
    2b7a:	e087      	b.n	2c8c <cdcdf_acm_ctrl+0x14c>
    2b7c:	9301      	str	r3, [sp, #4]
    2b7e:	2301      	movs	r3, #1
    2b80:	4443      	add	r3, r8
    2b82:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2b84:	4f47      	ldr	r7, [pc, #284]	; (2ca4 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    2b86:	4b48      	ldr	r3, [pc, #288]	; (2ca8 <cdcdf_acm_ctrl+0x168>)
    2b88:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2b8a:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2b8c:	7943      	ldrb	r3, [r0, #5]
    2b8e:	2108      	movs	r1, #8
    2b90:	438b      	bics	r3, r1
    2b92:	2b02      	cmp	r3, #2
    2b94:	d002      	beq.n	2b9c <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    2b96:	200a      	movs	r0, #10
    2b98:	4240      	negs	r0, r0
    2b9a:	e7e2      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
    2b9c:	9901      	ldr	r1, [sp, #4]
    2b9e:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2ba0:	780b      	ldrb	r3, [r1, #0]
    2ba2:	429a      	cmp	r2, r3
    2ba4:	d075      	beq.n	2c92 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2ba6:	2bff      	cmp	r3, #255	; 0xff
    2ba8:	d176      	bne.n	2c98 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2baa:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2bac:	2205      	movs	r2, #5
    2bae:	6871      	ldr	r1, [r6, #4]
    2bb0:	4b3e      	ldr	r3, [pc, #248]	; (2cac <cdcdf_acm_ctrl+0x16c>)
    2bb2:	4798      	blx	r3
    2bb4:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2bb6:	d11e      	bne.n	2bf6 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2bb8:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2bba:	7803      	ldrb	r3, [r0, #0]
    2bbc:	18c0      	adds	r0, r0, r3
    2bbe:	2204      	movs	r2, #4
    2bc0:	6871      	ldr	r1, [r6, #4]
    2bc2:	4b3a      	ldr	r3, [pc, #232]	; (2cac <cdcdf_acm_ctrl+0x16c>)
    2bc4:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2bc6:	9b01      	ldr	r3, [sp, #4]
    2bc8:	455b      	cmp	r3, fp
    2bca:	d027      	beq.n	2c1c <cdcdf_acm_ctrl+0xdc>
    2bcc:	9b01      	ldr	r3, [sp, #4]
    2bce:	3301      	adds	r3, #1
    2bd0:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    2bd2:	2800      	cmp	r0, #0
    2bd4:	d1d9      	bne.n	2b8a <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    2bd6:	200a      	movs	r0, #10
    2bd8:	4240      	negs	r0, r0
    2bda:	e7c2      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2bdc:	4653      	mov	r3, sl
    2bde:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2be0:	0028      	movs	r0, r5
    2be2:	4b31      	ldr	r3, [pc, #196]	; (2ca8 <cdcdf_acm_ctrl+0x168>)
    2be4:	4798      	blx	r3
			desc->sod = ep;
    2be6:	6034      	str	r4, [r6, #0]
    2be8:	7820      	ldrb	r0, [r4, #0]
    2bea:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2bec:	6871      	ldr	r1, [r6, #4]
    2bee:	4b30      	ldr	r3, [pc, #192]	; (2cb0 <cdcdf_acm_ctrl+0x170>)
    2bf0:	4798      	blx	r3
    2bf2:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2bf4:	d0e0      	beq.n	2bb8 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    2bf6:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    2bf8:	7963      	ldrb	r3, [r4, #5]
    2bfa:	021b      	lsls	r3, r3, #8
    2bfc:	7922      	ldrb	r2, [r4, #4]
    2bfe:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2c00:	b292      	uxth	r2, r2
    2c02:	78e1      	ldrb	r1, [r4, #3]
    2c04:	0028      	movs	r0, r5
    2c06:	47b8      	blx	r7
    2c08:	2800      	cmp	r0, #0
    2c0a:	d148      	bne.n	2c9e <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2c0c:	b26b      	sxtb	r3, r5
    2c0e:	2b00      	cmp	r3, #0
    2c10:	dbe4      	blt.n	2bdc <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2c12:	4643      	mov	r3, r8
    2c14:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2c16:	0028      	movs	r0, r5
    2c18:	47c8      	blx	r9
    2c1a:	e7e4      	b.n	2be6 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    2c1c:	2201      	movs	r2, #1
    2c1e:	4b25      	ldr	r3, [pc, #148]	; (2cb4 <cdcdf_acm_ctrl+0x174>)
    2c20:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2c22:	2000      	movs	r0, #0
    2c24:	e79d      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2c26:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2c28:	2a00      	cmp	r2, #0
    2c2a:	d008      	beq.n	2c3e <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2c2c:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2c2e:	795b      	ldrb	r3, [r3, #5]
    2c30:	2208      	movs	r2, #8
    2c32:	4393      	bics	r3, r2
    2c34:	2b02      	cmp	r3, #2
    2c36:	d002      	beq.n	2c3e <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2c38:	200a      	movs	r0, #10
    2c3a:	4240      	negs	r0, r0
    2c3c:	e791      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2c3e:	7823      	ldrb	r3, [r4, #0]
    2c40:	2bff      	cmp	r3, #255	; 0xff
    2c42:	d008      	beq.n	2c56 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    2c44:	23ff      	movs	r3, #255	; 0xff
    2c46:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2c48:	78a0      	ldrb	r0, [r4, #2]
    2c4a:	28ff      	cmp	r0, #255	; 0xff
    2c4c:	d003      	beq.n	2c56 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2c4e:	4b1a      	ldr	r3, [pc, #104]	; (2cb8 <cdcdf_acm_ctrl+0x178>)
    2c50:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2c52:	23ff      	movs	r3, #255	; 0xff
    2c54:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2c56:	7863      	ldrb	r3, [r4, #1]
    2c58:	2bff      	cmp	r3, #255	; 0xff
    2c5a:	d008      	beq.n	2c6e <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    2c5c:	23ff      	movs	r3, #255	; 0xff
    2c5e:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2c60:	78e0      	ldrb	r0, [r4, #3]
    2c62:	28ff      	cmp	r0, #255	; 0xff
    2c64:	d003      	beq.n	2c6e <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2c66:	4b14      	ldr	r3, [pc, #80]	; (2cb8 <cdcdf_acm_ctrl+0x178>)
    2c68:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2c6a:	23ff      	movs	r3, #255	; 0xff
    2c6c:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2c6e:	7920      	ldrb	r0, [r4, #4]
    2c70:	28ff      	cmp	r0, #255	; 0xff
    2c72:	d003      	beq.n	2c7c <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    2c74:	4b10      	ldr	r3, [pc, #64]	; (2cb8 <cdcdf_acm_ctrl+0x178>)
    2c76:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2c78:	23ff      	movs	r3, #255	; 0xff
    2c7a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2c7c:	2200      	movs	r2, #0
    2c7e:	4b0d      	ldr	r3, [pc, #52]	; (2cb4 <cdcdf_acm_ctrl+0x174>)
    2c80:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2c82:	2000      	movs	r0, #0
    2c84:	e76d      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    2c86:	201b      	movs	r0, #27
    2c88:	4240      	negs	r0, r0
    2c8a:	e76a      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2c8c:	200a      	movs	r0, #10
    2c8e:	4240      	negs	r0, r0
    2c90:	e767      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    2c92:	2012      	movs	r0, #18
    2c94:	4240      	negs	r0, r0
    2c96:	e764      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2c98:	201c      	movs	r0, #28
    2c9a:	4240      	negs	r0, r0
    2c9c:	e761      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2c9e:	2014      	movs	r0, #20
    2ca0:	4240      	negs	r0, r0
    2ca2:	e75e      	b.n	2b62 <cdcdf_acm_ctrl+0x22>
    2ca4:	00000f09 	.word	0x00000f09
    2ca8:	00000f9d 	.word	0x00000f9d
    2cac:	000034dd 	.word	0x000034dd
    2cb0:	00003513 	.word	0x00003513
    2cb4:	20000980 	.word	0x20000980
    2cb8:	00000f71 	.word	0x00000f71

00002cbc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2cbc:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2cbe:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <cdcdf_acm_init+0x2c>)
    2cc0:	4798      	blx	r3
    2cc2:	2801      	cmp	r0, #1
    2cc4:	d80c      	bhi.n	2ce0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2cc6:	4809      	ldr	r0, [pc, #36]	; (2cec <cdcdf_acm_init+0x30>)
    2cc8:	4b09      	ldr	r3, [pc, #36]	; (2cf0 <cdcdf_acm_init+0x34>)
    2cca:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2ccc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2cce:	3018      	adds	r0, #24
    2cd0:	4b08      	ldr	r3, [pc, #32]	; (2cf4 <cdcdf_acm_init+0x38>)
    2cd2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2cd4:	4908      	ldr	r1, [pc, #32]	; (2cf8 <cdcdf_acm_init+0x3c>)
    2cd6:	2001      	movs	r0, #1
    2cd8:	4b08      	ldr	r3, [pc, #32]	; (2cfc <cdcdf_acm_init+0x40>)
    2cda:	4798      	blx	r3
	return ERR_NONE;
    2cdc:	2000      	movs	r0, #0
}
    2cde:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2ce0:	2011      	movs	r0, #17
    2ce2:	4240      	negs	r0, r0
    2ce4:	e7fb      	b.n	2cde <cdcdf_acm_init+0x22>
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	000034cd 	.word	0x000034cd
    2cec:	20000980 	.word	0x20000980
    2cf0:	00002b41 	.word	0x00002b41
    2cf4:	00003465 	.word	0x00003465
    2cf8:	20000004 	.word	0x20000004
    2cfc:	000033cd 	.word	0x000033cd

00002d00 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    2d00:	b510      	push	{r4, lr}
    2d02:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2d04:	4b07      	ldr	r3, [pc, #28]	; (2d24 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    2d06:	795b      	ldrb	r3, [r3, #5]
    2d08:	2b00      	cmp	r3, #0
    2d0a:	d007      	beq.n	2d1c <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    2d0c:	4b05      	ldr	r3, [pc, #20]	; (2d24 <cdcdf_acm_read+0x24>)
    2d0e:	7918      	ldrb	r0, [r3, #4]
    2d10:	2300      	movs	r3, #0
    2d12:	000a      	movs	r2, r1
    2d14:	0021      	movs	r1, r4
    2d16:	4c04      	ldr	r4, [pc, #16]	; (2d28 <cdcdf_acm_read+0x28>)
    2d18:	47a0      	blx	r4
}
    2d1a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2d1c:	2011      	movs	r0, #17
    2d1e:	4240      	negs	r0, r0
    2d20:	e7fb      	b.n	2d1a <cdcdf_acm_read+0x1a>
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	20000980 	.word	0x20000980
    2d28:	00002f71 	.word	0x00002f71

00002d2c <cdcdf_acm_write>:
{
    2d2c:	b510      	push	{r4, lr}
    2d2e:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    2d30:	4b07      	ldr	r3, [pc, #28]	; (2d50 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    2d32:	795b      	ldrb	r3, [r3, #5]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d007      	beq.n	2d48 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <cdcdf_acm_write+0x24>)
    2d3a:	78d8      	ldrb	r0, [r3, #3]
    2d3c:	2301      	movs	r3, #1
    2d3e:	000a      	movs	r2, r1
    2d40:	0021      	movs	r1, r4
    2d42:	4c04      	ldr	r4, [pc, #16]	; (2d54 <cdcdf_acm_write+0x28>)
    2d44:	47a0      	blx	r4
}
    2d46:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2d48:	2011      	movs	r0, #17
    2d4a:	4240      	negs	r0, r0
    2d4c:	e7fb      	b.n	2d46 <cdcdf_acm_write+0x1a>
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	20000980 	.word	0x20000980
    2d54:	00002f71 	.word	0x00002f71

00002d58 <cdcdf_acm_stop_xfer>:
{
    2d58:	b570      	push	{r4, r5, r6, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    2d5a:	4d03      	ldr	r5, [pc, #12]	; (2d68 <cdcdf_acm_stop_xfer+0x10>)
    2d5c:	78e8      	ldrb	r0, [r5, #3]
    2d5e:	4c03      	ldr	r4, [pc, #12]	; (2d6c <cdcdf_acm_stop_xfer+0x14>)
    2d60:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    2d62:	7928      	ldrb	r0, [r5, #4]
    2d64:	47a0      	blx	r4
}
    2d66:	bd70      	pop	{r4, r5, r6, pc}
    2d68:	20000980 	.word	0x20000980
    2d6c:	00001111 	.word	0x00001111

00002d70 <cdcdf_acm_register_callback>:
{
    2d70:	b510      	push	{r4, lr}
	switch (cb_type) {
    2d72:	2801      	cmp	r0, #1
    2d74:	d010      	beq.n	2d98 <cdcdf_acm_register_callback+0x28>
    2d76:	2800      	cmp	r0, #0
    2d78:	d006      	beq.n	2d88 <cdcdf_acm_register_callback+0x18>
    2d7a:	2802      	cmp	r0, #2
    2d7c:	d014      	beq.n	2da8 <cdcdf_acm_register_callback+0x38>
    2d7e:	2803      	cmp	r0, #3
    2d80:	d016      	beq.n	2db0 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    2d82:	200d      	movs	r0, #13
    2d84:	4240      	negs	r0, r0
    2d86:	e006      	b.n	2d96 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    2d88:	4b0b      	ldr	r3, [pc, #44]	; (2db8 <cdcdf_acm_register_callback+0x48>)
    2d8a:	7918      	ldrb	r0, [r3, #4]
    2d8c:	000a      	movs	r2, r1
    2d8e:	2102      	movs	r1, #2
    2d90:	4b0a      	ldr	r3, [pc, #40]	; (2dbc <cdcdf_acm_register_callback+0x4c>)
    2d92:	4798      	blx	r3
	return ERR_NONE;
    2d94:	2000      	movs	r0, #0
}
    2d96:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2d98:	4b07      	ldr	r3, [pc, #28]	; (2db8 <cdcdf_acm_register_callback+0x48>)
    2d9a:	78d8      	ldrb	r0, [r3, #3]
    2d9c:	000a      	movs	r2, r1
    2d9e:	2102      	movs	r1, #2
    2da0:	4b06      	ldr	r3, [pc, #24]	; (2dbc <cdcdf_acm_register_callback+0x4c>)
    2da2:	4798      	blx	r3
	return ERR_NONE;
    2da4:	2000      	movs	r0, #0
		break;
    2da6:	e7f6      	b.n	2d96 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2da8:	4b03      	ldr	r3, [pc, #12]	; (2db8 <cdcdf_acm_register_callback+0x48>)
    2daa:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    2dac:	2000      	movs	r0, #0
		break;
    2dae:	e7f2      	b.n	2d96 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    2db0:	4b01      	ldr	r3, [pc, #4]	; (2db8 <cdcdf_acm_register_callback+0x48>)
    2db2:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    2db4:	2000      	movs	r0, #0
		break;
    2db6:	e7ee      	b.n	2d96 <cdcdf_acm_register_callback+0x26>
    2db8:	20000980 	.word	0x20000980
    2dbc:	000011a9 	.word	0x000011a9

00002dc0 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    2dc0:	4b01      	ldr	r3, [pc, #4]	; (2dc8 <cdcdf_acm_is_enabled+0x8>)
    2dc2:	7958      	ldrb	r0, [r3, #5]
}
    2dc4:	4770      	bx	lr
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	20000980 	.word	0x20000980

00002dcc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2dcc:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2dce:	4b06      	ldr	r3, [pc, #24]	; (2de8 <usbdc_unconfig+0x1c>)
    2dd0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2dd2:	2c00      	cmp	r4, #0
    2dd4:	d007      	beq.n	2de6 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2dd6:	2200      	movs	r2, #0
    2dd8:	2101      	movs	r1, #1
    2dda:	0020      	movs	r0, r4
    2ddc:	6863      	ldr	r3, [r4, #4]
    2dde:	4798      	blx	r3
		func = func->next;
    2de0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2de2:	2c00      	cmp	r4, #0
    2de4:	d1f7      	bne.n	2dd6 <usbdc_unconfig+0xa>
	}
}
    2de6:	bd10      	pop	{r4, pc}
    2de8:	200009a4 	.word	0x200009a4

00002dec <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2dec:	b570      	push	{r4, r5, r6, lr}
    2dee:	0006      	movs	r6, r0
    2df0:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2df2:	4b07      	ldr	r3, [pc, #28]	; (2e10 <usbdc_change_notify+0x24>)
    2df4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2df6:	2c00      	cmp	r4, #0
    2df8:	d103      	bne.n	2e02 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    2dfa:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    2dfc:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2dfe:	2c00      	cmp	r4, #0
    2e00:	d0fb      	beq.n	2dfa <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    2e02:	6863      	ldr	r3, [r4, #4]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d0f9      	beq.n	2dfc <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2e08:	0029      	movs	r1, r5
    2e0a:	0030      	movs	r0, r6
    2e0c:	4798      	blx	r3
    2e0e:	e7f5      	b.n	2dfc <usbdc_change_notify+0x10>
    2e10:	200009a4 	.word	0x200009a4

00002e14 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e16:	0007      	movs	r7, r0
    2e18:	000e      	movs	r6, r1
    2e1a:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2e1c:	4b0d      	ldr	r3, [pc, #52]	; (2e54 <usbdc_request_handler+0x40>)
    2e1e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2e20:	2c00      	cmp	r4, #0
    2e22:	d104      	bne.n	2e2e <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2e24:	2000      	movs	r0, #0
    2e26:	e011      	b.n	2e4c <usbdc_request_handler+0x38>
		h = h->next;
    2e28:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2e2a:	2c00      	cmp	r4, #0
    2e2c:	d00d      	beq.n	2e4a <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    2e2e:	6863      	ldr	r3, [r4, #4]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d0f9      	beq.n	2e28 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2e34:	002a      	movs	r2, r5
    2e36:	0031      	movs	r1, r6
    2e38:	0038      	movs	r0, r7
    2e3a:	4798      	blx	r3
			if (0 == rc) {
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d006      	beq.n	2e4e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    2e40:	300a      	adds	r0, #10
    2e42:	d0f1      	beq.n	2e28 <usbdc_request_handler+0x14>
				return -1;
    2e44:	2001      	movs	r0, #1
    2e46:	4240      	negs	r0, r0
    2e48:	e000      	b.n	2e4c <usbdc_request_handler+0x38>
	return false;
    2e4a:	2000      	movs	r0, #0
}
    2e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2e4e:	2001      	movs	r0, #1
    2e50:	e7fc      	b.n	2e4c <usbdc_request_handler+0x38>
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	200009a4 	.word	0x200009a4

00002e58 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2e58:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2e5a:	4b06      	ldr	r3, [pc, #24]	; (2e74 <usbd_sof_cb+0x1c>)
    2e5c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2e5e:	2c00      	cmp	r4, #0
    2e60:	d103      	bne.n	2e6a <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    2e62:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2e64:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2e66:	2c00      	cmp	r4, #0
    2e68:	d0fb      	beq.n	2e62 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    2e6a:	6863      	ldr	r3, [r4, #4]
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d0f9      	beq.n	2e64 <usbd_sof_cb+0xc>
			sof->cb();
    2e70:	4798      	blx	r3
    2e72:	e7f7      	b.n	2e64 <usbd_sof_cb+0xc>
    2e74:	200009a4 	.word	0x200009a4

00002e78 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2e78:	b510      	push	{r4, lr}
    2e7a:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2e7c:	2900      	cmp	r1, #0
    2e7e:	d003      	beq.n	2e88 <usbdc_cb_ctl_done+0x10>
    2e80:	2901      	cmp	r1, #1
    2e82:	d029      	beq.n	2ed8 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2e84:	2000      	movs	r0, #0
    2e86:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2e88:	7813      	ldrb	r3, [r2, #0]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d1fa      	bne.n	2e84 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    2e8e:	7853      	ldrb	r3, [r2, #1]
    2e90:	2b05      	cmp	r3, #5
    2e92:	d011      	beq.n	2eb8 <usbdc_cb_ctl_done+0x40>
    2e94:	2b09      	cmp	r3, #9
    2e96:	d1f5      	bne.n	2e84 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2e98:	7892      	ldrb	r2, [r2, #2]
    2e9a:	4b12      	ldr	r3, [pc, #72]	; (2ee4 <usbdc_cb_ctl_done+0x6c>)
    2e9c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2e9e:	78a3      	ldrb	r3, [r4, #2]
    2ea0:	78e1      	ldrb	r1, [r4, #3]
    2ea2:	0209      	lsls	r1, r1, #8
    2ea4:	4319      	orrs	r1, r3
    2ea6:	1e4b      	subs	r3, r1, #1
    2ea8:	4199      	sbcs	r1, r3
    2eaa:	3103      	adds	r1, #3
    2eac:	4b0d      	ldr	r3, [pc, #52]	; (2ee4 <usbdc_cb_ctl_done+0x6c>)
    2eae:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2eb0:	2001      	movs	r0, #1
    2eb2:	4b0d      	ldr	r3, [pc, #52]	; (2ee8 <usbdc_cb_ctl_done+0x70>)
    2eb4:	4798      	blx	r3
    2eb6:	e7e5      	b.n	2e84 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2eb8:	7890      	ldrb	r0, [r2, #2]
    2eba:	4b0c      	ldr	r3, [pc, #48]	; (2eec <usbdc_cb_ctl_done+0x74>)
    2ebc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2ebe:	78a3      	ldrb	r3, [r4, #2]
    2ec0:	78e1      	ldrb	r1, [r4, #3]
    2ec2:	0209      	lsls	r1, r1, #8
    2ec4:	4319      	orrs	r1, r3
    2ec6:	1e4b      	subs	r3, r1, #1
    2ec8:	4199      	sbcs	r1, r3
    2eca:	3102      	adds	r1, #2
    2ecc:	4b05      	ldr	r3, [pc, #20]	; (2ee4 <usbdc_cb_ctl_done+0x6c>)
    2ece:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2ed0:	2001      	movs	r0, #1
    2ed2:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <usbdc_cb_ctl_done+0x70>)
    2ed4:	4798      	blx	r3
    2ed6:	e7d5      	b.n	2e84 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2ed8:	2201      	movs	r2, #1
    2eda:	0021      	movs	r1, r4
    2edc:	2000      	movs	r0, #0
    2ede:	4b04      	ldr	r3, [pc, #16]	; (2ef0 <usbdc_cb_ctl_done+0x78>)
    2ee0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2ee2:	e7cf      	b.n	2e84 <usbdc_cb_ctl_done+0xc>
    2ee4:	200009a4 	.word	0x200009a4
    2ee8:	00002ded 	.word	0x00002ded
    2eec:	00000efd 	.word	0x00000efd
    2ef0:	00002e15 	.word	0x00002e15

00002ef4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2ef4:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2ef6:	4b0d      	ldr	r3, [pc, #52]	; (2f2c <usbdc_reset+0x38>)
    2ef8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2efa:	4c0d      	ldr	r4, [pc, #52]	; (2f30 <usbdc_reset+0x3c>)
    2efc:	2302      	movs	r3, #2
    2efe:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    2f00:	2300      	movs	r3, #0
    2f02:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2f04:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2f06:	2000      	movs	r0, #0
    2f08:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <usbdc_reset+0x40>)
    2f0a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2f0c:	7f20      	ldrb	r0, [r4, #28]
    2f0e:	4b0a      	ldr	r3, [pc, #40]	; (2f38 <usbdc_reset+0x44>)
    2f10:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2f12:	4a0a      	ldr	r2, [pc, #40]	; (2f3c <usbdc_reset+0x48>)
    2f14:	2100      	movs	r1, #0
    2f16:	2000      	movs	r0, #0
    2f18:	4c09      	ldr	r4, [pc, #36]	; (2f40 <usbdc_reset+0x4c>)
    2f1a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2f1c:	4a09      	ldr	r2, [pc, #36]	; (2f44 <usbdc_reset+0x50>)
    2f1e:	2102      	movs	r1, #2
    2f20:	2000      	movs	r0, #0
    2f22:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2f24:	2000      	movs	r0, #0
    2f26:	4b08      	ldr	r3, [pc, #32]	; (2f48 <usbdc_reset+0x54>)
    2f28:	4798      	blx	r3
}
    2f2a:	bd10      	pop	{r4, pc}
    2f2c:	00002dcd 	.word	0x00002dcd
    2f30:	200009a4 	.word	0x200009a4
    2f34:	00000f71 	.word	0x00000f71
    2f38:	00000f5d 	.word	0x00000f5d
    2f3c:	00002f8d 	.word	0x00002f8d
    2f40:	000011a9 	.word	0x000011a9
    2f44:	00002e79 	.word	0x00002e79
    2f48:	00000f9d 	.word	0x00000f9d

00002f4c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2f4c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    2f4e:	2800      	cmp	r0, #0
    2f50:	d002      	beq.n	2f58 <usbd_event_cb+0xc>
    2f52:	2801      	cmp	r0, #1
    2f54:	d004      	beq.n	2f60 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2f56:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2f58:	2000      	movs	r0, #0
    2f5a:	4b03      	ldr	r3, [pc, #12]	; (2f68 <usbd_event_cb+0x1c>)
    2f5c:	4798      	blx	r3
		break;
    2f5e:	e7fa      	b.n	2f56 <usbd_event_cb+0xa>
		usbdc_reset();
    2f60:	4b02      	ldr	r3, [pc, #8]	; (2f6c <usbd_event_cb+0x20>)
    2f62:	4798      	blx	r3
}
    2f64:	e7f7      	b.n	2f56 <usbd_event_cb+0xa>
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	00002ded 	.word	0x00002ded
    2f6c:	00002ef5 	.word	0x00002ef5

00002f70 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2f70:	b510      	push	{r4, lr}
    2f72:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2f74:	ac01      	add	r4, sp, #4
    2f76:	9101      	str	r1, [sp, #4]
    2f78:	9202      	str	r2, [sp, #8]
    2f7a:	7220      	strb	r0, [r4, #8]
    2f7c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2f7e:	0020      	movs	r0, r4
    2f80:	4b01      	ldr	r3, [pc, #4]	; (2f88 <usbdc_xfer+0x18>)
    2f82:	4798      	blx	r3
}
    2f84:	b004      	add	sp, #16
    2f86:	bd10      	pop	{r4, pc}
    2f88:	00000fe9 	.word	0x00000fe9

00002f8c <usbdc_cb_ctl_req>:
{
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	46c6      	mov	lr, r8
    2f90:	b500      	push	{lr}
    2f92:	b084      	sub	sp, #16
    2f94:	0005      	movs	r5, r0
    2f96:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2f98:	2200      	movs	r2, #0
    2f9a:	4bb5      	ldr	r3, [pc, #724]	; (3270 <usbdc_cb_ctl_req+0x2e4>)
    2f9c:	4798      	blx	r3
    2f9e:	1c43      	adds	r3, r0, #1
    2fa0:	d00d      	beq.n	2fbe <usbdc_cb_ctl_req+0x32>
		return true;
    2fa2:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2fa4:	2801      	cmp	r0, #1
    2fa6:	d00b      	beq.n	2fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2fa8:	7822      	ldrb	r2, [r4, #0]
    2faa:	231f      	movs	r3, #31
    2fac:	0011      	movs	r1, r2
    2fae:	4399      	bics	r1, r3
    2fb0:	d00b      	beq.n	2fca <usbdc_cb_ctl_req+0x3e>
    2fb2:	b2cb      	uxtb	r3, r1
    2fb4:	2b80      	cmp	r3, #128	; 0x80
    2fb6:	d100      	bne.n	2fba <usbdc_cb_ctl_req+0x2e>
    2fb8:	e0f8      	b.n	31ac <usbdc_cb_ctl_req+0x220>
		return false;
    2fba:	2300      	movs	r3, #0
    2fbc:	e000      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    2fbe:	2300      	movs	r3, #0
}
    2fc0:	0018      	movs	r0, r3
    2fc2:	b004      	add	sp, #16
    2fc4:	bc04      	pop	{r2}
    2fc6:	4690      	mov	r8, r2
    2fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    2fca:	7863      	ldrb	r3, [r4, #1]
    2fcc:	2b0b      	cmp	r3, #11
    2fce:	d900      	bls.n	2fd2 <usbdc_cb_ctl_req+0x46>
    2fd0:	e1e4      	b.n	339c <usbdc_cb_ctl_req+0x410>
    2fd2:	009b      	lsls	r3, r3, #2
    2fd4:	49a7      	ldr	r1, [pc, #668]	; (3274 <usbdc_cb_ctl_req+0x2e8>)
    2fd6:	58cb      	ldr	r3, [r1, r3]
    2fd8:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2fda:	2301      	movs	r3, #1
    2fdc:	2200      	movs	r2, #0
    2fde:	2100      	movs	r1, #0
    2fe0:	0028      	movs	r0, r5
    2fe2:	4ca5      	ldr	r4, [pc, #660]	; (3278 <usbdc_cb_ctl_req+0x2ec>)
    2fe4:	47a0      	blx	r4
    2fe6:	4243      	negs	r3, r0
    2fe8:	4143      	adcs	r3, r0
    2fea:	b2db      	uxtb	r3, r3
    2fec:	e7e8      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    2fee:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    2ff0:	2a00      	cmp	r2, #0
    2ff2:	d01a      	beq.n	302a <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2ff4:	4ba1      	ldr	r3, [pc, #644]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    2ff6:	681b      	ldr	r3, [r3, #0]
    2ff8:	6859      	ldr	r1, [r3, #4]
    2ffa:	6818      	ldr	r0, [r3, #0]
    2ffc:	4ba0      	ldr	r3, [pc, #640]	; (3280 <usbdc_cb_ctl_req+0x2f4>)
    2ffe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3000:	2800      	cmp	r0, #0
    3002:	d100      	bne.n	3006 <usbdc_cb_ctl_req+0x7a>
    3004:	e1d4      	b.n	33b0 <usbdc_cb_ctl_req+0x424>
    3006:	78c3      	ldrb	r3, [r0, #3]
    3008:	021b      	lsls	r3, r3, #8
    300a:	7881      	ldrb	r1, [r0, #2]
    300c:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    300e:	b289      	uxth	r1, r1
    3010:	1841      	adds	r1, r0, r1
    3012:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3014:	2204      	movs	r2, #4
    3016:	4b9b      	ldr	r3, [pc, #620]	; (3284 <usbdc_cb_ctl_req+0x2f8>)
    3018:	4798      	blx	r3
    301a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    301c:	2800      	cmp	r0, #0
    301e:	d006      	beq.n	302e <usbdc_cb_ctl_req+0xa2>
    3020:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3022:	4f96      	ldr	r7, [pc, #600]	; (327c <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3024:	4b97      	ldr	r3, [pc, #604]	; (3284 <usbdc_cb_ctl_req+0x2f8>)
    3026:	4698      	mov	r8, r3
    3028:	e01a      	b.n	3060 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    302a:	4b97      	ldr	r3, [pc, #604]	; (3288 <usbdc_cb_ctl_req+0x2fc>)
    302c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    302e:	2301      	movs	r3, #1
    3030:	2200      	movs	r2, #0
    3032:	2100      	movs	r1, #0
    3034:	0028      	movs	r0, r5
    3036:	4c90      	ldr	r4, [pc, #576]	; (3278 <usbdc_cb_ctl_req+0x2ec>)
    3038:	47a0      	blx	r4
    303a:	4243      	negs	r3, r0
    303c:	4143      	adcs	r3, r0
    303e:	b2db      	uxtb	r3, r3
    3040:	e7be      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    3042:	0034      	movs	r4, r6
    3044:	e000      	b.n	3048 <usbdc_cb_ctl_req+0xbc>
    3046:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    3048:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    304a:	7803      	ldrb	r3, [r0, #0]
    304c:	18c0      	adds	r0, r0, r3
    304e:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3050:	9b03      	ldr	r3, [sp, #12]
    3052:	9301      	str	r3, [sp, #4]
    3054:	2204      	movs	r2, #4
    3056:	0019      	movs	r1, r3
    3058:	47c0      	blx	r8
    305a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    305c:	2800      	cmp	r0, #0
    305e:	d0e6      	beq.n	302e <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3060:	7886      	ldrb	r6, [r0, #2]
    3062:	42a6      	cmp	r6, r4
    3064:	d0f0      	beq.n	3048 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3066:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    3068:	2c00      	cmp	r4, #0
    306a:	d0ea      	beq.n	3042 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    306c:	aa02      	add	r2, sp, #8
    306e:	2100      	movs	r1, #0
    3070:	0020      	movs	r0, r4
    3072:	6863      	ldr	r3, [r4, #4]
    3074:	4798      	blx	r3
    3076:	2800      	cmp	r0, #0
    3078:	d0e5      	beq.n	3046 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    307a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    307c:	2c00      	cmp	r4, #0
    307e:	d1f5      	bne.n	306c <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    3080:	0034      	movs	r4, r6
    3082:	e7e1      	b.n	3048 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3084:	231f      	movs	r3, #31
    3086:	401a      	ands	r2, r3
		return false;
    3088:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    308a:	2a02      	cmp	r2, #2
    308c:	d198      	bne.n	2fc0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    308e:	79a3      	ldrb	r3, [r4, #6]
    3090:	79e2      	ldrb	r2, [r4, #7]
    3092:	0212      	lsls	r2, r2, #8
    3094:	431a      	orrs	r2, r3
			return false;
    3096:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3098:	2a00      	cmp	r2, #0
    309a:	d000      	beq.n	309e <usbdc_cb_ctl_req+0x112>
    309c:	e790      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    309e:	7920      	ldrb	r0, [r4, #4]
    30a0:	2100      	movs	r1, #0
    30a2:	4b7a      	ldr	r3, [pc, #488]	; (328c <usbdc_cb_ctl_req+0x300>)
    30a4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    30a6:	2301      	movs	r3, #1
    30a8:	2200      	movs	r2, #0
    30aa:	2100      	movs	r1, #0
    30ac:	0028      	movs	r0, r5
    30ae:	4c72      	ldr	r4, [pc, #456]	; (3278 <usbdc_cb_ctl_req+0x2ec>)
    30b0:	47a0      	blx	r4
		return true;
    30b2:	2301      	movs	r3, #1
    30b4:	e784      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30b6:	231f      	movs	r3, #31
    30b8:	401a      	ands	r2, r3
		return false;
    30ba:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    30bc:	2a02      	cmp	r2, #2
    30be:	d000      	beq.n	30c2 <usbdc_cb_ctl_req+0x136>
    30c0:	e77e      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    30c2:	79a3      	ldrb	r3, [r4, #6]
    30c4:	79e2      	ldrb	r2, [r4, #7]
    30c6:	0212      	lsls	r2, r2, #8
    30c8:	431a      	orrs	r2, r3
			return false;
    30ca:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    30cc:	2a00      	cmp	r2, #0
    30ce:	d000      	beq.n	30d2 <usbdc_cb_ctl_req+0x146>
    30d0:	e776      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    30d2:	7920      	ldrb	r0, [r4, #4]
    30d4:	2101      	movs	r1, #1
    30d6:	4b6d      	ldr	r3, [pc, #436]	; (328c <usbdc_cb_ctl_req+0x300>)
    30d8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    30da:	2301      	movs	r3, #1
    30dc:	2200      	movs	r2, #0
    30de:	2100      	movs	r1, #0
    30e0:	0028      	movs	r0, r5
    30e2:	4c65      	ldr	r4, [pc, #404]	; (3278 <usbdc_cb_ctl_req+0x2ec>)
    30e4:	47a0      	blx	r4
		return true;
    30e6:	2301      	movs	r3, #1
    30e8:	e76a      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    30ea:	78a3      	ldrb	r3, [r4, #2]
    30ec:	78e5      	ldrb	r5, [r4, #3]
    30ee:	022d      	lsls	r5, r5, #8
    30f0:	431d      	orrs	r5, r3
    30f2:	7923      	ldrb	r3, [r4, #4]
    30f4:	7964      	ldrb	r4, [r4, #5]
    30f6:	0224      	lsls	r4, r4, #8
    30f8:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    30fa:	4a60      	ldr	r2, [pc, #384]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    30fc:	6813      	ldr	r3, [r2, #0]
    30fe:	7ed2      	ldrb	r2, [r2, #27]
    3100:	6859      	ldr	r1, [r3, #4]
    3102:	6818      	ldr	r0, [r3, #0]
    3104:	4b5e      	ldr	r3, [pc, #376]	; (3280 <usbdc_cb_ctl_req+0x2f4>)
    3106:	4798      	blx	r3
	if (NULL == ifc) {
    3108:	2800      	cmp	r0, #0
    310a:	d047      	beq.n	319c <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    310c:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    310e:	78c3      	ldrb	r3, [r0, #3]
    3110:	021b      	lsls	r3, r3, #8
    3112:	7881      	ldrb	r1, [r0, #2]
    3114:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3116:	b289      	uxth	r1, r1
    3118:	1841      	adds	r1, r0, r1
    311a:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    311c:	2204      	movs	r2, #4
    311e:	4b59      	ldr	r3, [pc, #356]	; (3284 <usbdc_cb_ctl_req+0x2f8>)
    3120:	4798      	blx	r3
    3122:	2800      	cmp	r0, #0
    3124:	d03c      	beq.n	31a0 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3126:	4e57      	ldr	r6, [pc, #348]	; (3284 <usbdc_cb_ctl_req+0x2f8>)
    3128:	e008      	b.n	313c <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    312a:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    312c:	7803      	ldrb	r3, [r0, #0]
    312e:	18c0      	adds	r0, r0, r3
    3130:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3132:	2204      	movs	r2, #4
    3134:	9903      	ldr	r1, [sp, #12]
    3136:	47b0      	blx	r6
		if (NULL == ifc) {
    3138:	2800      	cmp	r0, #0
    313a:	d033      	beq.n	31a4 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    313c:	7883      	ldrb	r3, [r0, #2]
    313e:	42a3      	cmp	r3, r4
    3140:	d1f3      	bne.n	312a <usbdc_cb_ctl_req+0x19e>
    3142:	78c3      	ldrb	r3, [r0, #3]
    3144:	42ab      	cmp	r3, r5
    3146:	d1f0      	bne.n	312a <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    3148:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    314a:	4b4c      	ldr	r3, [pc, #304]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    314c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    314e:	2e00      	cmp	r6, #0
    3150:	d02a      	beq.n	31a8 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3152:	aa02      	add	r2, sp, #8
    3154:	2101      	movs	r1, #1
    3156:	0030      	movs	r0, r6
    3158:	6873      	ldr	r3, [r6, #4]
    315a:	4798      	blx	r3
    315c:	2800      	cmp	r0, #0
    315e:	d004      	beq.n	316a <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    3160:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    3162:	2e00      	cmp	r6, #0
    3164:	d1f5      	bne.n	3152 <usbdc_cb_ctl_req+0x1c6>
	return false;
    3166:	2300      	movs	r3, #0
    3168:	e72a      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    316a:	6873      	ldr	r3, [r6, #4]
    316c:	aa02      	add	r2, sp, #8
    316e:	2100      	movs	r1, #0
    3170:	0030      	movs	r0, r6
    3172:	4798      	blx	r3
			return false;
    3174:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3176:	2800      	cmp	r0, #0
    3178:	d000      	beq.n	317c <usbdc_cb_ctl_req+0x1f0>
    317a:	e721      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    317c:	2d00      	cmp	r5, #0
    317e:	d005      	beq.n	318c <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3180:	493e      	ldr	r1, [pc, #248]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    3182:	2201      	movs	r2, #1
    3184:	40a2      	lsls	r2, r4
    3186:	7f4b      	ldrb	r3, [r1, #29]
    3188:	4313      	orrs	r3, r2
    318a:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    318c:	2300      	movs	r3, #0
    318e:	2200      	movs	r2, #0
    3190:	2100      	movs	r1, #0
    3192:	2000      	movs	r0, #0
    3194:	4c38      	ldr	r4, [pc, #224]	; (3278 <usbdc_cb_ctl_req+0x2ec>)
    3196:	47a0      	blx	r4
			return true;
    3198:	2301      	movs	r3, #1
    319a:	e711      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    319c:	2300      	movs	r3, #0
    319e:	e70f      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    31a0:	2300      	movs	r3, #0
    31a2:	e70d      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
			return false;
    31a4:	2300      	movs	r3, #0
    31a6:	e70b      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	return false;
    31a8:	2300      	movs	r3, #0
    31aa:	e709      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    31ac:	7863      	ldrb	r3, [r4, #1]
    31ae:	2b06      	cmp	r3, #6
    31b0:	d033      	beq.n	321a <usbdc_cb_ctl_req+0x28e>
    31b2:	b2d9      	uxtb	r1, r3
    31b4:	2906      	cmp	r1, #6
    31b6:	d922      	bls.n	31fe <usbdc_cb_ctl_req+0x272>
    31b8:	2b08      	cmp	r3, #8
    31ba:	d100      	bne.n	31be <usbdc_cb_ctl_req+0x232>
    31bc:	e0af      	b.n	331e <usbdc_cb_ctl_req+0x392>
    31be:	2b0a      	cmp	r3, #10
    31c0:	d000      	beq.n	31c4 <usbdc_cb_ctl_req+0x238>
    31c2:	e0ed      	b.n	33a0 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    31c4:	4b2d      	ldr	r3, [pc, #180]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    31c6:	7f5a      	ldrb	r2, [r3, #29]
    31c8:	7921      	ldrb	r1, [r4, #4]
    31ca:	7963      	ldrb	r3, [r4, #5]
    31cc:	021b      	lsls	r3, r3, #8
    31ce:	430b      	orrs	r3, r1
    31d0:	411a      	asrs	r2, r3
    31d2:	07d3      	lsls	r3, r2, #31
    31d4:	d400      	bmi.n	31d8 <usbdc_cb_ctl_req+0x24c>
    31d6:	e0ca      	b.n	336e <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    31d8:	4b28      	ldr	r3, [pc, #160]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    31da:	691d      	ldr	r5, [r3, #16]
	return false;
    31dc:	2300      	movs	r3, #0
	while (NULL != func) {
    31de:	2d00      	cmp	r5, #0
    31e0:	d100      	bne.n	31e4 <usbdc_cb_ctl_req+0x258>
    31e2:	e6ed      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    31e4:	0022      	movs	r2, r4
    31e6:	2102      	movs	r1, #2
    31e8:	0028      	movs	r0, r5
    31ea:	686b      	ldr	r3, [r5, #4]
    31ec:	4798      	blx	r3
    31ee:	2800      	cmp	r0, #0
    31f0:	db00      	blt.n	31f4 <usbdc_cb_ctl_req+0x268>
    31f2:	e0c8      	b.n	3386 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    31f4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    31f6:	2d00      	cmp	r5, #0
    31f8:	d1f4      	bne.n	31e4 <usbdc_cb_ctl_req+0x258>
	return false;
    31fa:	2300      	movs	r3, #0
    31fc:	e6e0      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    31fe:	2b00      	cmp	r3, #0
    3200:	d000      	beq.n	3204 <usbdc_cb_ctl_req+0x278>
    3202:	e0cd      	b.n	33a0 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3204:	231f      	movs	r3, #31
    3206:	401a      	ands	r2, r3
    3208:	b2d3      	uxtb	r3, r2
    320a:	2b01      	cmp	r3, #1
    320c:	d800      	bhi.n	3210 <usbdc_cb_ctl_req+0x284>
    320e:	e092      	b.n	3336 <usbdc_cb_ctl_req+0x3aa>
    3210:	2a02      	cmp	r2, #2
    3212:	d100      	bne.n	3216 <usbdc_cb_ctl_req+0x28a>
    3214:	e09f      	b.n	3356 <usbdc_cb_ctl_req+0x3ca>
		return false;
    3216:	2300      	movs	r3, #0
    3218:	e6d2      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    321a:	78a3      	ldrb	r3, [r4, #2]
    321c:	78e2      	ldrb	r2, [r4, #3]
    321e:	0212      	lsls	r2, r2, #8
    3220:	431a      	orrs	r2, r3
    3222:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3224:	2b02      	cmp	r3, #2
    3226:	d033      	beq.n	3290 <usbdc_cb_ctl_req+0x304>
    3228:	2b03      	cmp	r3, #3
    322a:	d056      	beq.n	32da <usbdc_cb_ctl_req+0x34e>
    322c:	2b01      	cmp	r3, #1
    322e:	d001      	beq.n	3234 <usbdc_cb_ctl_req+0x2a8>
	return false;
    3230:	2300      	movs	r3, #0
    3232:	e6c5      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3234:	79a2      	ldrb	r2, [r4, #6]
    3236:	79e3      	ldrb	r3, [r4, #7]
    3238:	021b      	lsls	r3, r3, #8
    323a:	4313      	orrs	r3, r2
    323c:	1c1a      	adds	r2, r3, #0
    323e:	2b12      	cmp	r3, #18
    3240:	d900      	bls.n	3244 <usbdc_cb_ctl_req+0x2b8>
    3242:	2212      	movs	r2, #18
    3244:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3246:	4b0d      	ldr	r3, [pc, #52]	; (327c <usbdc_cb_ctl_req+0x2f0>)
    3248:	681b      	ldr	r3, [r3, #0]
    324a:	6859      	ldr	r1, [r3, #4]
    324c:	6818      	ldr	r0, [r3, #0]
    324e:	2201      	movs	r2, #1
    3250:	4b0c      	ldr	r3, [pc, #48]	; (3284 <usbdc_cb_ctl_req+0x2f8>)
    3252:	4798      	blx	r3
	if (!dev_desc) {
    3254:	2800      	cmp	r0, #0
    3256:	d100      	bne.n	325a <usbdc_cb_ctl_req+0x2ce>
    3258:	e0a4      	b.n	33a4 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    325a:	2300      	movs	r3, #0
    325c:	0022      	movs	r2, r4
    325e:	0001      	movs	r1, r0
    3260:	0028      	movs	r0, r5
    3262:	4c05      	ldr	r4, [pc, #20]	; (3278 <usbdc_cb_ctl_req+0x2ec>)
    3264:	47a0      	blx	r4
    3266:	4243      	negs	r3, r0
    3268:	4143      	adcs	r3, r0
    326a:	b2db      	uxtb	r3, r3
    326c:	e6a8      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	00002e15 	.word	0x00002e15
    3274:	00003c28 	.word	0x00003c28
    3278:	00002f71 	.word	0x00002f71
    327c:	200009a4 	.word	0x200009a4
    3280:	00003559 	.word	0x00003559
    3284:	000034dd 	.word	0x000034dd
    3288:	00002dcd 	.word	0x00002dcd
    328c:	00001141 	.word	0x00001141
	uint16_t length   = req->wLength;
    3290:	79a3      	ldrb	r3, [r4, #6]
    3292:	79e6      	ldrb	r6, [r4, #7]
    3294:	0236      	lsls	r6, r6, #8
    3296:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3298:	4b46      	ldr	r3, [pc, #280]	; (33b4 <usbdc_cb_ctl_req+0x428>)
    329a:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    329c:	681b      	ldr	r3, [r3, #0]
    329e:	3201      	adds	r2, #1
    32a0:	b2d2      	uxtb	r2, r2
    32a2:	6859      	ldr	r1, [r3, #4]
    32a4:	6818      	ldr	r0, [r3, #0]
    32a6:	4b44      	ldr	r3, [pc, #272]	; (33b8 <usbdc_cb_ctl_req+0x42c>)
    32a8:	4798      	blx	r3
    32aa:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    32ac:	d07c      	beq.n	33a8 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    32ae:	78c3      	ldrb	r3, [r0, #3]
    32b0:	021b      	lsls	r3, r3, #8
    32b2:	7884      	ldrb	r4, [r0, #2]
    32b4:	18e4      	adds	r4, r4, r3
    32b6:	b2a4      	uxth	r4, r4
		need_zlp = false;
    32b8:	2300      	movs	r3, #0
	if (length <= total_len) {
    32ba:	42a6      	cmp	r6, r4
    32bc:	d905      	bls.n	32ca <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32be:	3f01      	subs	r7, #1
    32c0:	403e      	ands	r6, r7
    32c2:	4273      	negs	r3, r6
    32c4:	4173      	adcs	r3, r6
    32c6:	b2db      	uxtb	r3, r3
		length = total_len;
    32c8:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    32ca:	0032      	movs	r2, r6
    32cc:	0028      	movs	r0, r5
    32ce:	4c3b      	ldr	r4, [pc, #236]	; (33bc <usbdc_cb_ctl_req+0x430>)
    32d0:	47a0      	blx	r4
    32d2:	4243      	negs	r3, r0
    32d4:	4143      	adcs	r3, r0
    32d6:	b2db      	uxtb	r3, r3
    32d8:	e672      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    32da:	79a3      	ldrb	r3, [r4, #6]
    32dc:	79e1      	ldrb	r1, [r4, #7]
    32de:	0209      	lsls	r1, r1, #8
    32e0:	4319      	orrs	r1, r3
    32e2:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    32e4:	4b33      	ldr	r3, [pc, #204]	; (33b4 <usbdc_cb_ctl_req+0x428>)
    32e6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    32e8:	681b      	ldr	r3, [r3, #0]
    32ea:	b2d2      	uxtb	r2, r2
    32ec:	6859      	ldr	r1, [r3, #4]
    32ee:	6818      	ldr	r0, [r3, #0]
    32f0:	4b33      	ldr	r3, [pc, #204]	; (33c0 <usbdc_cb_ctl_req+0x434>)
    32f2:	4798      	blx	r3
    32f4:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    32f6:	d059      	beq.n	33ac <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    32f8:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    32fa:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    32fc:	4294      	cmp	r4, r2
    32fe:	d906      	bls.n	330e <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3300:	1e73      	subs	r3, r6, #1
    3302:	4023      	ands	r3, r4
    3304:	0018      	movs	r0, r3
    3306:	4243      	negs	r3, r0
    3308:	4143      	adcs	r3, r0
    330a:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    330c:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    330e:	0022      	movs	r2, r4
    3310:	0028      	movs	r0, r5
    3312:	4c2a      	ldr	r4, [pc, #168]	; (33bc <usbdc_cb_ctl_req+0x430>)
    3314:	47a0      	blx	r4
    3316:	4243      	negs	r3, r0
    3318:	4143      	adcs	r3, r0
    331a:	b2db      	uxtb	r3, r3
    331c:	e650      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    331e:	4b25      	ldr	r3, [pc, #148]	; (33b4 <usbdc_cb_ctl_req+0x428>)
    3320:	7eda      	ldrb	r2, [r3, #27]
    3322:	6959      	ldr	r1, [r3, #20]
    3324:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3326:	6959      	ldr	r1, [r3, #20]
    3328:	2300      	movs	r3, #0
    332a:	2201      	movs	r2, #1
    332c:	0028      	movs	r0, r5
    332e:	4c23      	ldr	r4, [pc, #140]	; (33bc <usbdc_cb_ctl_req+0x430>)
    3330:	47a0      	blx	r4
		return true;
    3332:	2301      	movs	r3, #1
    3334:	e644      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		st = 0;
    3336:	2300      	movs	r3, #0
    3338:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    333a:	4c1e      	ldr	r4, [pc, #120]	; (33b4 <usbdc_cb_ctl_req+0x428>)
    333c:	2202      	movs	r2, #2
    333e:	a902      	add	r1, sp, #8
    3340:	6960      	ldr	r0, [r4, #20]
    3342:	4b20      	ldr	r3, [pc, #128]	; (33c4 <usbdc_cb_ctl_req+0x438>)
    3344:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    3346:	6961      	ldr	r1, [r4, #20]
    3348:	2300      	movs	r3, #0
    334a:	2202      	movs	r2, #2
    334c:	0028      	movs	r0, r5
    334e:	4c1b      	ldr	r4, [pc, #108]	; (33bc <usbdc_cb_ctl_req+0x430>)
    3350:	47a0      	blx	r4
	return true;
    3352:	2301      	movs	r3, #1
    3354:	e634      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    3356:	7920      	ldrb	r0, [r4, #4]
    3358:	2102      	movs	r1, #2
    335a:	4b1b      	ldr	r3, [pc, #108]	; (33c8 <usbdc_cb_ctl_req+0x43c>)
    335c:	4798      	blx	r3
		if (st < 0) {
    335e:	2800      	cmp	r0, #0
    3360:	db03      	blt.n	336a <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    3362:	2301      	movs	r3, #1
    3364:	4018      	ands	r0, r3
    3366:	9002      	str	r0, [sp, #8]
    3368:	e7e7      	b.n	333a <usbdc_cb_ctl_req+0x3ae>
			return false;
    336a:	2300      	movs	r3, #0
    336c:	e628      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    336e:	4b11      	ldr	r3, [pc, #68]	; (33b4 <usbdc_cb_ctl_req+0x428>)
    3370:	2200      	movs	r2, #0
    3372:	6959      	ldr	r1, [r3, #20]
    3374:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    3376:	6959      	ldr	r1, [r3, #20]
    3378:	2300      	movs	r3, #0
    337a:	3201      	adds	r2, #1
    337c:	2000      	movs	r0, #0
    337e:	4c0f      	ldr	r4, [pc, #60]	; (33bc <usbdc_cb_ctl_req+0x430>)
    3380:	47a0      	blx	r4
		return true;
    3382:	2301      	movs	r3, #1
    3384:	e61c      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3386:	4b0b      	ldr	r3, [pc, #44]	; (33b4 <usbdc_cb_ctl_req+0x428>)
    3388:	695a      	ldr	r2, [r3, #20]
    338a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    338c:	6959      	ldr	r1, [r3, #20]
    338e:	2300      	movs	r3, #0
    3390:	2201      	movs	r2, #1
    3392:	2000      	movs	r0, #0
    3394:	4c09      	ldr	r4, [pc, #36]	; (33bc <usbdc_cb_ctl_req+0x430>)
    3396:	47a0      	blx	r4
			return true;
    3398:	2301      	movs	r3, #1
    339a:	e611      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    339c:	2300      	movs	r3, #0
    339e:	e60f      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    33a0:	2300      	movs	r3, #0
    33a2:	e60d      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    33a4:	2300      	movs	r3, #0
    33a6:	e60b      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    33a8:	2300      	movs	r3, #0
    33aa:	e609      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
		return false;
    33ac:	2300      	movs	r3, #0
    33ae:	e607      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
			return false;
    33b0:	2300      	movs	r3, #0
    33b2:	e605      	b.n	2fc0 <usbdc_cb_ctl_req+0x34>
    33b4:	200009a4 	.word	0x200009a4
    33b8:	00003559 	.word	0x00003559
    33bc:	00002f71 	.word	0x00002f71
    33c0:	000035c1 	.word	0x000035c1
    33c4:	000037d9 	.word	0x000037d9
    33c8:	00001141 	.word	0x00001141

000033cc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    33cc:	b510      	push	{r4, lr}
	switch (type) {
    33ce:	2801      	cmp	r0, #1
    33d0:	d009      	beq.n	33e6 <usbdc_register_handler+0x1a>
    33d2:	2800      	cmp	r0, #0
    33d4:	d002      	beq.n	33dc <usbdc_register_handler+0x10>
    33d6:	2802      	cmp	r0, #2
    33d8:	d00a      	beq.n	33f0 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    33da:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    33dc:	4807      	ldr	r0, [pc, #28]	; (33fc <usbdc_register_handler+0x30>)
    33de:	3004      	adds	r0, #4
    33e0:	4b07      	ldr	r3, [pc, #28]	; (3400 <usbdc_register_handler+0x34>)
    33e2:	4798      	blx	r3
		break;
    33e4:	e7f9      	b.n	33da <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    33e6:	4805      	ldr	r0, [pc, #20]	; (33fc <usbdc_register_handler+0x30>)
    33e8:	3008      	adds	r0, #8
    33ea:	4b05      	ldr	r3, [pc, #20]	; (3400 <usbdc_register_handler+0x34>)
    33ec:	4798      	blx	r3
		break;
    33ee:	e7f4      	b.n	33da <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    33f0:	4802      	ldr	r0, [pc, #8]	; (33fc <usbdc_register_handler+0x30>)
    33f2:	300c      	adds	r0, #12
    33f4:	4b02      	ldr	r3, [pc, #8]	; (3400 <usbdc_register_handler+0x34>)
    33f6:	4798      	blx	r3
}
    33f8:	e7ef      	b.n	33da <usbdc_register_handler+0xe>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	200009a4 	.word	0x200009a4
    3400:	00001259 	.word	0x00001259

00003404 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3404:	b570      	push	{r4, r5, r6, lr}
    3406:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3408:	1e43      	subs	r3, r0, #1
    340a:	4198      	sbcs	r0, r3
    340c:	b2c0      	uxtb	r0, r0
    340e:	4a0c      	ldr	r2, [pc, #48]	; (3440 <usbdc_init+0x3c>)
    3410:	490c      	ldr	r1, [pc, #48]	; (3444 <usbdc_init+0x40>)
    3412:	4b0d      	ldr	r3, [pc, #52]	; (3448 <usbdc_init+0x44>)
    3414:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3416:	4b0d      	ldr	r3, [pc, #52]	; (344c <usbdc_init+0x48>)
    3418:	4798      	blx	r3
	if (rc < 0) {
    341a:	2800      	cmp	r0, #0
    341c:	db0e      	blt.n	343c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    341e:	4d0c      	ldr	r5, [pc, #48]	; (3450 <usbdc_init+0x4c>)
    3420:	2220      	movs	r2, #32
    3422:	2100      	movs	r1, #0
    3424:	0028      	movs	r0, r5
    3426:	4b0b      	ldr	r3, [pc, #44]	; (3454 <usbdc_init+0x50>)
    3428:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    342a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    342c:	490a      	ldr	r1, [pc, #40]	; (3458 <usbdc_init+0x54>)
    342e:	2000      	movs	r0, #0
    3430:	4c0a      	ldr	r4, [pc, #40]	; (345c <usbdc_init+0x58>)
    3432:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3434:	490a      	ldr	r1, [pc, #40]	; (3460 <usbdc_init+0x5c>)
    3436:	2001      	movs	r0, #1
    3438:	47a0      	blx	r4

	return 0;
    343a:	2000      	movs	r0, #0
}
    343c:	bd70      	pop	{r4, r5, r6, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	00000355 	.word	0x00000355
    3444:	00003c58 	.word	0x00003c58
    3448:	000011f9 	.word	0x000011f9
    344c:	00000e75 	.word	0x00000e75
    3450:	200009a4 	.word	0x200009a4
    3454:	0000385d 	.word	0x0000385d
    3458:	00002e59 	.word	0x00002e59
    345c:	00000ed9 	.word	0x00000ed9
    3460:	00002f4d 	.word	0x00002f4d

00003464 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    3464:	b510      	push	{r4, lr}
    3466:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    3468:	4802      	ldr	r0, [pc, #8]	; (3474 <usbdc_register_function+0x10>)
    346a:	3010      	adds	r0, #16
    346c:	4b02      	ldr	r3, [pc, #8]	; (3478 <usbdc_register_function+0x14>)
    346e:	4798      	blx	r3
}
    3470:	bd10      	pop	{r4, pc}
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	200009a4 	.word	0x200009a4
    3478:	00001259 	.word	0x00001259

0000347c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    347c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    347e:	4b0b      	ldr	r3, [pc, #44]	; (34ac <usbdc_start+0x30>)
    3480:	7e9b      	ldrb	r3, [r3, #26]
    3482:	2b00      	cmp	r3, #0
    3484:	d10c      	bne.n	34a0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    3486:	2800      	cmp	r0, #0
    3488:	d00d      	beq.n	34a6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    348a:	4b08      	ldr	r3, [pc, #32]	; (34ac <usbdc_start+0x30>)
    348c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    348e:	6802      	ldr	r2, [r0, #0]
    3490:	79d2      	ldrb	r2, [r2, #7]
    3492:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3494:	2201      	movs	r2, #1
    3496:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3498:	4b05      	ldr	r3, [pc, #20]	; (34b0 <usbdc_start+0x34>)
    349a:	4798      	blx	r3
	return ERR_NONE;
    349c:	2000      	movs	r0, #0
}
    349e:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    34a0:	2004      	movs	r0, #4
    34a2:	4240      	negs	r0, r0
    34a4:	e7fb      	b.n	349e <usbdc_start+0x22>
		return ERR_BAD_DATA;
    34a6:	2009      	movs	r0, #9
    34a8:	4240      	negs	r0, r0
    34aa:	e7f8      	b.n	349e <usbdc_start+0x22>
    34ac:	200009a4 	.word	0x200009a4
    34b0:	00000ee5 	.word	0x00000ee5

000034b4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    34b4:	b510      	push	{r4, lr}
	usb_d_attach();
    34b6:	4b01      	ldr	r3, [pc, #4]	; (34bc <usbdc_attach+0x8>)
    34b8:	4798      	blx	r3
}
    34ba:	bd10      	pop	{r4, pc}
    34bc:	00000ef1 	.word	0x00000ef1

000034c0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    34c0:	4b01      	ldr	r3, [pc, #4]	; (34c8 <usbdc_get_ctrl_buffer+0x8>)
    34c2:	6958      	ldr	r0, [r3, #20]
}
    34c4:	4770      	bx	lr
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	200009a4 	.word	0x200009a4

000034cc <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    34cc:	4b02      	ldr	r3, [pc, #8]	; (34d8 <usbdc_get_state+0xc>)
    34ce:	7e98      	ldrb	r0, [r3, #26]
    34d0:	06c3      	lsls	r3, r0, #27
    34d2:	d500      	bpl.n	34d6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    34d4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    34d6:	4770      	bx	lr
    34d8:	200009a4 	.word	0x200009a4

000034dc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    34dc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    34de:	4288      	cmp	r0, r1
    34e0:	d211      	bcs.n	3506 <usb_find_desc+0x2a>
	return desc[0];
    34e2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    34e4:	2b01      	cmp	r3, #1
    34e6:	d910      	bls.n	350a <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    34e8:	7844      	ldrb	r4, [r0, #1]
    34ea:	4294      	cmp	r4, r2
    34ec:	d00a      	beq.n	3504 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    34ee:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    34f0:	4281      	cmp	r1, r0
    34f2:	d906      	bls.n	3502 <usb_find_desc+0x26>
	return desc[0];
    34f4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    34f6:	2b01      	cmp	r3, #1
    34f8:	d909      	bls.n	350e <usb_find_desc+0x32>
	return desc[1];
    34fa:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    34fc:	4294      	cmp	r4, r2
    34fe:	d1f6      	bne.n	34ee <usb_find_desc+0x12>
    3500:	e000      	b.n	3504 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3502:	2000      	movs	r0, #0
}
    3504:	bd10      	pop	{r4, pc}
	return NULL;
    3506:	2000      	movs	r0, #0
    3508:	e7fc      	b.n	3504 <usb_find_desc+0x28>
		_desc_len_check();
    350a:	2000      	movs	r0, #0
    350c:	e7fa      	b.n	3504 <usb_find_desc+0x28>
    350e:	2000      	movs	r0, #0
    3510:	e7f8      	b.n	3504 <usb_find_desc+0x28>

00003512 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3512:	4288      	cmp	r0, r1
    3514:	d215      	bcs.n	3542 <usb_find_ep_desc+0x30>
	return desc[0];
    3516:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3518:	2b01      	cmp	r3, #1
    351a:	d914      	bls.n	3546 <usb_find_ep_desc+0x34>
	return desc[1];
    351c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    351e:	2a04      	cmp	r2, #4
    3520:	d013      	beq.n	354a <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3522:	2a05      	cmp	r2, #5
    3524:	d00c      	beq.n	3540 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    3526:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3528:	4281      	cmp	r1, r0
    352a:	d908      	bls.n	353e <usb_find_ep_desc+0x2c>
	return desc[0];
    352c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    352e:	2b01      	cmp	r3, #1
    3530:	d90d      	bls.n	354e <usb_find_ep_desc+0x3c>
	return desc[1];
    3532:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3534:	2a04      	cmp	r2, #4
    3536:	d00c      	beq.n	3552 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3538:	2a05      	cmp	r2, #5
    353a:	d1f4      	bne.n	3526 <usb_find_ep_desc+0x14>
    353c:	e000      	b.n	3540 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    353e:	2000      	movs	r0, #0
}
    3540:	4770      	bx	lr
	return NULL;
    3542:	2000      	movs	r0, #0
    3544:	e7fc      	b.n	3540 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3546:	2000      	movs	r0, #0
    3548:	e7fa      	b.n	3540 <usb_find_ep_desc+0x2e>
	return NULL;
    354a:	2000      	movs	r0, #0
    354c:	e7f8      	b.n	3540 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    354e:	2000      	movs	r0, #0
    3550:	e7f6      	b.n	3540 <usb_find_ep_desc+0x2e>
	return NULL;
    3552:	2000      	movs	r0, #0
    3554:	e7f4      	b.n	3540 <usb_find_ep_desc+0x2e>
	...

00003558 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	000c      	movs	r4, r1
    355c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    355e:	2202      	movs	r2, #2
    3560:	4b16      	ldr	r3, [pc, #88]	; (35bc <usb_find_cfg_desc+0x64>)
    3562:	4798      	blx	r3
	if (!desc) {
    3564:	2800      	cmp	r0, #0
    3566:	d01d      	beq.n	35a4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3568:	4284      	cmp	r4, r0
    356a:	d91c      	bls.n	35a6 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    356c:	7803      	ldrb	r3, [r0, #0]
    356e:	2b01      	cmp	r3, #1
    3570:	d91b      	bls.n	35aa <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    3572:	7843      	ldrb	r3, [r0, #1]
    3574:	2b02      	cmp	r3, #2
    3576:	d11a      	bne.n	35ae <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    3578:	7943      	ldrb	r3, [r0, #5]
    357a:	42ab      	cmp	r3, r5
    357c:	d012      	beq.n	35a4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    357e:	78c2      	ldrb	r2, [r0, #3]
    3580:	0212      	lsls	r2, r2, #8
    3582:	7883      	ldrb	r3, [r0, #2]
    3584:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3586:	b29b      	uxth	r3, r3
    3588:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    358a:	4284      	cmp	r4, r0
    358c:	d909      	bls.n	35a2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    358e:	7803      	ldrb	r3, [r0, #0]
    3590:	2b01      	cmp	r3, #1
    3592:	d90e      	bls.n	35b2 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    3594:	7843      	ldrb	r3, [r0, #1]
    3596:	2b02      	cmp	r3, #2
    3598:	d10d      	bne.n	35b6 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    359a:	7943      	ldrb	r3, [r0, #5]
    359c:	42ab      	cmp	r3, r5
    359e:	d1ee      	bne.n	357e <usb_find_cfg_desc+0x26>
    35a0:	e000      	b.n	35a4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    35a2:	2000      	movs	r0, #0
}
    35a4:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    35a6:	2000      	movs	r0, #0
    35a8:	e7fc      	b.n	35a4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    35aa:	2000      	movs	r0, #0
    35ac:	e7fa      	b.n	35a4 <usb_find_cfg_desc+0x4c>
	return NULL;
    35ae:	2000      	movs	r0, #0
    35b0:	e7f8      	b.n	35a4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    35b2:	2000      	movs	r0, #0
    35b4:	e7f6      	b.n	35a4 <usb_find_cfg_desc+0x4c>
	return NULL;
    35b6:	2000      	movs	r0, #0
    35b8:	e7f4      	b.n	35a4 <usb_find_cfg_desc+0x4c>
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	000034dd 	.word	0x000034dd

000035c0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    35c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35c2:	000d      	movs	r5, r1
    35c4:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    35c6:	4288      	cmp	r0, r1
    35c8:	d212      	bcs.n	35f0 <usb_find_str_desc+0x30>
    35ca:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    35cc:	4e0a      	ldr	r6, [pc, #40]	; (35f8 <usb_find_str_desc+0x38>)
    35ce:	2203      	movs	r2, #3
    35d0:	0029      	movs	r1, r5
    35d2:	47b0      	blx	r6
		if (desc) {
    35d4:	2800      	cmp	r0, #0
    35d6:	d00e      	beq.n	35f6 <usb_find_str_desc+0x36>
	return desc[0];
    35d8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    35da:	2b01      	cmp	r3, #1
    35dc:	d90a      	bls.n	35f4 <usb_find_str_desc+0x34>
			if (i == str_index) {
    35de:	42a7      	cmp	r7, r4
    35e0:	d009      	beq.n	35f6 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    35e2:	3401      	adds	r4, #1
    35e4:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    35e6:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    35e8:	4285      	cmp	r5, r0
    35ea:	d8f0      	bhi.n	35ce <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    35ec:	2000      	movs	r0, #0
    35ee:	e002      	b.n	35f6 <usb_find_str_desc+0x36>
    35f0:	2000      	movs	r0, #0
    35f2:	e000      	b.n	35f6 <usb_find_str_desc+0x36>
			_desc_len_check();
    35f4:	2000      	movs	r0, #0
}
    35f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35f8:	000034dd 	.word	0x000034dd

000035fc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    35fc:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    35fe:	4806      	ldr	r0, [pc, #24]	; (3618 <cdc_device_acm_init+0x1c>)
    3600:	3040      	adds	r0, #64	; 0x40
    3602:	4b06      	ldr	r3, [pc, #24]	; (361c <cdc_device_acm_init+0x20>)
    3604:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3606:	4b06      	ldr	r3, [pc, #24]	; (3620 <cdc_device_acm_init+0x24>)
    3608:	4798      	blx	r3

	usbdc_start(single_desc);
    360a:	4806      	ldr	r0, [pc, #24]	; (3624 <cdc_device_acm_init+0x28>)
    360c:	4b06      	ldr	r3, [pc, #24]	; (3628 <cdc_device_acm_init+0x2c>)
    360e:	4798      	blx	r3
	usbdc_attach();
    3610:	4b06      	ldr	r3, [pc, #24]	; (362c <cdc_device_acm_init+0x30>)
    3612:	4798      	blx	r3
}
    3614:	bd10      	pop	{r4, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	200009c4 	.word	0x200009c4
    361c:	00003405 	.word	0x00003405
    3620:	00002cbd 	.word	0x00002cbd
    3624:	2000000c 	.word	0x2000000c
    3628:	0000347d 	.word	0x0000347d
    362c:	000034b5 	.word	0x000034b5

00003630 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3630:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    3632:	4b01      	ldr	r3, [pc, #4]	; (3638 <usb_init+0x8>)
    3634:	4798      	blx	r3
}
    3636:	bd10      	pop	{r4, pc}
    3638:	000035fd 	.word	0x000035fd

0000363c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    363c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3640:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3642:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3644:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3648:	4770      	bx	lr

0000364a <atomic_leave_critical>:
    364a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    364e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3650:	f383 8810 	msr	PRIMASK, r3
}
    3654:	4770      	bx	lr
	...

00003658 <__aeabi_atexit>:
    3658:	000b      	movs	r3, r1
    365a:	b510      	push	{r4, lr}
    365c:	0001      	movs	r1, r0
    365e:	0018      	movs	r0, r3
    3660:	f000 f88e 	bl	3780 <__cxa_atexit>
    3664:	bd10      	pop	{r4, pc}
    3666:	46c0      	nop			; (mov r8, r8)

00003668 <__udivsi3>:
    3668:	2200      	movs	r2, #0
    366a:	0843      	lsrs	r3, r0, #1
    366c:	428b      	cmp	r3, r1
    366e:	d374      	bcc.n	375a <__udivsi3+0xf2>
    3670:	0903      	lsrs	r3, r0, #4
    3672:	428b      	cmp	r3, r1
    3674:	d35f      	bcc.n	3736 <__udivsi3+0xce>
    3676:	0a03      	lsrs	r3, r0, #8
    3678:	428b      	cmp	r3, r1
    367a:	d344      	bcc.n	3706 <__udivsi3+0x9e>
    367c:	0b03      	lsrs	r3, r0, #12
    367e:	428b      	cmp	r3, r1
    3680:	d328      	bcc.n	36d4 <__udivsi3+0x6c>
    3682:	0c03      	lsrs	r3, r0, #16
    3684:	428b      	cmp	r3, r1
    3686:	d30d      	bcc.n	36a4 <__udivsi3+0x3c>
    3688:	22ff      	movs	r2, #255	; 0xff
    368a:	0209      	lsls	r1, r1, #8
    368c:	ba12      	rev	r2, r2
    368e:	0c03      	lsrs	r3, r0, #16
    3690:	428b      	cmp	r3, r1
    3692:	d302      	bcc.n	369a <__udivsi3+0x32>
    3694:	1212      	asrs	r2, r2, #8
    3696:	0209      	lsls	r1, r1, #8
    3698:	d065      	beq.n	3766 <__udivsi3+0xfe>
    369a:	0b03      	lsrs	r3, r0, #12
    369c:	428b      	cmp	r3, r1
    369e:	d319      	bcc.n	36d4 <__udivsi3+0x6c>
    36a0:	e000      	b.n	36a4 <__udivsi3+0x3c>
    36a2:	0a09      	lsrs	r1, r1, #8
    36a4:	0bc3      	lsrs	r3, r0, #15
    36a6:	428b      	cmp	r3, r1
    36a8:	d301      	bcc.n	36ae <__udivsi3+0x46>
    36aa:	03cb      	lsls	r3, r1, #15
    36ac:	1ac0      	subs	r0, r0, r3
    36ae:	4152      	adcs	r2, r2
    36b0:	0b83      	lsrs	r3, r0, #14
    36b2:	428b      	cmp	r3, r1
    36b4:	d301      	bcc.n	36ba <__udivsi3+0x52>
    36b6:	038b      	lsls	r3, r1, #14
    36b8:	1ac0      	subs	r0, r0, r3
    36ba:	4152      	adcs	r2, r2
    36bc:	0b43      	lsrs	r3, r0, #13
    36be:	428b      	cmp	r3, r1
    36c0:	d301      	bcc.n	36c6 <__udivsi3+0x5e>
    36c2:	034b      	lsls	r3, r1, #13
    36c4:	1ac0      	subs	r0, r0, r3
    36c6:	4152      	adcs	r2, r2
    36c8:	0b03      	lsrs	r3, r0, #12
    36ca:	428b      	cmp	r3, r1
    36cc:	d301      	bcc.n	36d2 <__udivsi3+0x6a>
    36ce:	030b      	lsls	r3, r1, #12
    36d0:	1ac0      	subs	r0, r0, r3
    36d2:	4152      	adcs	r2, r2
    36d4:	0ac3      	lsrs	r3, r0, #11
    36d6:	428b      	cmp	r3, r1
    36d8:	d301      	bcc.n	36de <__udivsi3+0x76>
    36da:	02cb      	lsls	r3, r1, #11
    36dc:	1ac0      	subs	r0, r0, r3
    36de:	4152      	adcs	r2, r2
    36e0:	0a83      	lsrs	r3, r0, #10
    36e2:	428b      	cmp	r3, r1
    36e4:	d301      	bcc.n	36ea <__udivsi3+0x82>
    36e6:	028b      	lsls	r3, r1, #10
    36e8:	1ac0      	subs	r0, r0, r3
    36ea:	4152      	adcs	r2, r2
    36ec:	0a43      	lsrs	r3, r0, #9
    36ee:	428b      	cmp	r3, r1
    36f0:	d301      	bcc.n	36f6 <__udivsi3+0x8e>
    36f2:	024b      	lsls	r3, r1, #9
    36f4:	1ac0      	subs	r0, r0, r3
    36f6:	4152      	adcs	r2, r2
    36f8:	0a03      	lsrs	r3, r0, #8
    36fa:	428b      	cmp	r3, r1
    36fc:	d301      	bcc.n	3702 <__udivsi3+0x9a>
    36fe:	020b      	lsls	r3, r1, #8
    3700:	1ac0      	subs	r0, r0, r3
    3702:	4152      	adcs	r2, r2
    3704:	d2cd      	bcs.n	36a2 <__udivsi3+0x3a>
    3706:	09c3      	lsrs	r3, r0, #7
    3708:	428b      	cmp	r3, r1
    370a:	d301      	bcc.n	3710 <__udivsi3+0xa8>
    370c:	01cb      	lsls	r3, r1, #7
    370e:	1ac0      	subs	r0, r0, r3
    3710:	4152      	adcs	r2, r2
    3712:	0983      	lsrs	r3, r0, #6
    3714:	428b      	cmp	r3, r1
    3716:	d301      	bcc.n	371c <__udivsi3+0xb4>
    3718:	018b      	lsls	r3, r1, #6
    371a:	1ac0      	subs	r0, r0, r3
    371c:	4152      	adcs	r2, r2
    371e:	0943      	lsrs	r3, r0, #5
    3720:	428b      	cmp	r3, r1
    3722:	d301      	bcc.n	3728 <__udivsi3+0xc0>
    3724:	014b      	lsls	r3, r1, #5
    3726:	1ac0      	subs	r0, r0, r3
    3728:	4152      	adcs	r2, r2
    372a:	0903      	lsrs	r3, r0, #4
    372c:	428b      	cmp	r3, r1
    372e:	d301      	bcc.n	3734 <__udivsi3+0xcc>
    3730:	010b      	lsls	r3, r1, #4
    3732:	1ac0      	subs	r0, r0, r3
    3734:	4152      	adcs	r2, r2
    3736:	08c3      	lsrs	r3, r0, #3
    3738:	428b      	cmp	r3, r1
    373a:	d301      	bcc.n	3740 <__udivsi3+0xd8>
    373c:	00cb      	lsls	r3, r1, #3
    373e:	1ac0      	subs	r0, r0, r3
    3740:	4152      	adcs	r2, r2
    3742:	0883      	lsrs	r3, r0, #2
    3744:	428b      	cmp	r3, r1
    3746:	d301      	bcc.n	374c <__udivsi3+0xe4>
    3748:	008b      	lsls	r3, r1, #2
    374a:	1ac0      	subs	r0, r0, r3
    374c:	4152      	adcs	r2, r2
    374e:	0843      	lsrs	r3, r0, #1
    3750:	428b      	cmp	r3, r1
    3752:	d301      	bcc.n	3758 <__udivsi3+0xf0>
    3754:	004b      	lsls	r3, r1, #1
    3756:	1ac0      	subs	r0, r0, r3
    3758:	4152      	adcs	r2, r2
    375a:	1a41      	subs	r1, r0, r1
    375c:	d200      	bcs.n	3760 <__udivsi3+0xf8>
    375e:	4601      	mov	r1, r0
    3760:	4152      	adcs	r2, r2
    3762:	4610      	mov	r0, r2
    3764:	4770      	bx	lr
    3766:	e7ff      	b.n	3768 <__udivsi3+0x100>
    3768:	b501      	push	{r0, lr}
    376a:	2000      	movs	r0, #0
    376c:	f000 f806 	bl	377c <__aeabi_idiv0>
    3770:	bd02      	pop	{r1, pc}
    3772:	46c0      	nop			; (mov r8, r8)

00003774 <__aeabi_uidivmod>:
    3774:	2900      	cmp	r1, #0
    3776:	d0f7      	beq.n	3768 <__udivsi3+0x100>
    3778:	e776      	b.n	3668 <__udivsi3>
    377a:	4770      	bx	lr

0000377c <__aeabi_idiv0>:
    377c:	4770      	bx	lr
    377e:	46c0      	nop			; (mov r8, r8)

00003780 <__cxa_atexit>:
    3780:	b510      	push	{r4, lr}
    3782:	0013      	movs	r3, r2
    3784:	000a      	movs	r2, r1
    3786:	0001      	movs	r1, r0
    3788:	2002      	movs	r0, #2
    378a:	f000 f8e3 	bl	3954 <__register_exitproc>
    378e:	bd10      	pop	{r4, pc}

00003790 <__libc_init_array>:
    3790:	b570      	push	{r4, r5, r6, lr}
    3792:	4e0d      	ldr	r6, [pc, #52]	; (37c8 <__libc_init_array+0x38>)
    3794:	4d0d      	ldr	r5, [pc, #52]	; (37cc <__libc_init_array+0x3c>)
    3796:	2400      	movs	r4, #0
    3798:	1bad      	subs	r5, r5, r6
    379a:	10ad      	asrs	r5, r5, #2
    379c:	d005      	beq.n	37aa <__libc_init_array+0x1a>
    379e:	00a3      	lsls	r3, r4, #2
    37a0:	58f3      	ldr	r3, [r6, r3]
    37a2:	3401      	adds	r4, #1
    37a4:	4798      	blx	r3
    37a6:	42a5      	cmp	r5, r4
    37a8:	d1f9      	bne.n	379e <__libc_init_array+0xe>
    37aa:	f000 fa63 	bl	3c74 <_init>
    37ae:	4e08      	ldr	r6, [pc, #32]	; (37d0 <__libc_init_array+0x40>)
    37b0:	4d08      	ldr	r5, [pc, #32]	; (37d4 <__libc_init_array+0x44>)
    37b2:	2400      	movs	r4, #0
    37b4:	1bad      	subs	r5, r5, r6
    37b6:	10ad      	asrs	r5, r5, #2
    37b8:	d005      	beq.n	37c6 <__libc_init_array+0x36>
    37ba:	00a3      	lsls	r3, r4, #2
    37bc:	58f3      	ldr	r3, [r6, r3]
    37be:	3401      	adds	r4, #1
    37c0:	4798      	blx	r3
    37c2:	42a5      	cmp	r5, r4
    37c4:	d1f9      	bne.n	37ba <__libc_init_array+0x2a>
    37c6:	bd70      	pop	{r4, r5, r6, pc}
    37c8:	00003c80 	.word	0x00003c80
    37cc:	00003c80 	.word	0x00003c80
    37d0:	00003c80 	.word	0x00003c80
    37d4:	00003c90 	.word	0x00003c90

000037d8 <memcpy>:
    37d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37da:	0005      	movs	r5, r0
    37dc:	2a0f      	cmp	r2, #15
    37de:	d92f      	bls.n	3840 <memcpy+0x68>
    37e0:	000b      	movs	r3, r1
    37e2:	4303      	orrs	r3, r0
    37e4:	079b      	lsls	r3, r3, #30
    37e6:	d134      	bne.n	3852 <memcpy+0x7a>
    37e8:	0016      	movs	r6, r2
    37ea:	000c      	movs	r4, r1
    37ec:	0003      	movs	r3, r0
    37ee:	3e10      	subs	r6, #16
    37f0:	0935      	lsrs	r5, r6, #4
    37f2:	3501      	adds	r5, #1
    37f4:	012d      	lsls	r5, r5, #4
    37f6:	1945      	adds	r5, r0, r5
    37f8:	6827      	ldr	r7, [r4, #0]
    37fa:	601f      	str	r7, [r3, #0]
    37fc:	6867      	ldr	r7, [r4, #4]
    37fe:	605f      	str	r7, [r3, #4]
    3800:	68a7      	ldr	r7, [r4, #8]
    3802:	609f      	str	r7, [r3, #8]
    3804:	68e7      	ldr	r7, [r4, #12]
    3806:	3410      	adds	r4, #16
    3808:	60df      	str	r7, [r3, #12]
    380a:	3310      	adds	r3, #16
    380c:	429d      	cmp	r5, r3
    380e:	d1f3      	bne.n	37f8 <memcpy+0x20>
    3810:	230f      	movs	r3, #15
    3812:	439e      	bics	r6, r3
    3814:	3610      	adds	r6, #16
    3816:	1985      	adds	r5, r0, r6
    3818:	1989      	adds	r1, r1, r6
    381a:	4013      	ands	r3, r2
    381c:	2b03      	cmp	r3, #3
    381e:	d91a      	bls.n	3856 <memcpy+0x7e>
    3820:	1f1e      	subs	r6, r3, #4
    3822:	2300      	movs	r3, #0
    3824:	08b4      	lsrs	r4, r6, #2
    3826:	3401      	adds	r4, #1
    3828:	00a4      	lsls	r4, r4, #2
    382a:	58cf      	ldr	r7, [r1, r3]
    382c:	50ef      	str	r7, [r5, r3]
    382e:	3304      	adds	r3, #4
    3830:	42a3      	cmp	r3, r4
    3832:	d1fa      	bne.n	382a <memcpy+0x52>
    3834:	2403      	movs	r4, #3
    3836:	43a6      	bics	r6, r4
    3838:	1d33      	adds	r3, r6, #4
    383a:	4022      	ands	r2, r4
    383c:	18c9      	adds	r1, r1, r3
    383e:	18ed      	adds	r5, r5, r3
    3840:	2a00      	cmp	r2, #0
    3842:	d005      	beq.n	3850 <memcpy+0x78>
    3844:	2300      	movs	r3, #0
    3846:	5ccc      	ldrb	r4, [r1, r3]
    3848:	54ec      	strb	r4, [r5, r3]
    384a:	3301      	adds	r3, #1
    384c:	4293      	cmp	r3, r2
    384e:	d1fa      	bne.n	3846 <memcpy+0x6e>
    3850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3852:	0005      	movs	r5, r0
    3854:	e7f6      	b.n	3844 <memcpy+0x6c>
    3856:	001a      	movs	r2, r3
    3858:	e7f2      	b.n	3840 <memcpy+0x68>
    385a:	46c0      	nop			; (mov r8, r8)

0000385c <memset>:
    385c:	b5f0      	push	{r4, r5, r6, r7, lr}
    385e:	0783      	lsls	r3, r0, #30
    3860:	d043      	beq.n	38ea <memset+0x8e>
    3862:	1e54      	subs	r4, r2, #1
    3864:	2a00      	cmp	r2, #0
    3866:	d03f      	beq.n	38e8 <memset+0x8c>
    3868:	b2ce      	uxtb	r6, r1
    386a:	0002      	movs	r2, r0
    386c:	2503      	movs	r5, #3
    386e:	e002      	b.n	3876 <memset+0x1a>
    3870:	001a      	movs	r2, r3
    3872:	3c01      	subs	r4, #1
    3874:	d338      	bcc.n	38e8 <memset+0x8c>
    3876:	1c53      	adds	r3, r2, #1
    3878:	7016      	strb	r6, [r2, #0]
    387a:	422b      	tst	r3, r5
    387c:	d1f8      	bne.n	3870 <memset+0x14>
    387e:	2c03      	cmp	r4, #3
    3880:	d92a      	bls.n	38d8 <memset+0x7c>
    3882:	22ff      	movs	r2, #255	; 0xff
    3884:	400a      	ands	r2, r1
    3886:	0215      	lsls	r5, r2, #8
    3888:	4315      	orrs	r5, r2
    388a:	042a      	lsls	r2, r5, #16
    388c:	4315      	orrs	r5, r2
    388e:	2c0f      	cmp	r4, #15
    3890:	d914      	bls.n	38bc <memset+0x60>
    3892:	0027      	movs	r7, r4
    3894:	001a      	movs	r2, r3
    3896:	3f10      	subs	r7, #16
    3898:	093e      	lsrs	r6, r7, #4
    389a:	3601      	adds	r6, #1
    389c:	0136      	lsls	r6, r6, #4
    389e:	199e      	adds	r6, r3, r6
    38a0:	6015      	str	r5, [r2, #0]
    38a2:	6055      	str	r5, [r2, #4]
    38a4:	6095      	str	r5, [r2, #8]
    38a6:	60d5      	str	r5, [r2, #12]
    38a8:	3210      	adds	r2, #16
    38aa:	4296      	cmp	r6, r2
    38ac:	d1f8      	bne.n	38a0 <memset+0x44>
    38ae:	220f      	movs	r2, #15
    38b0:	4397      	bics	r7, r2
    38b2:	3710      	adds	r7, #16
    38b4:	19db      	adds	r3, r3, r7
    38b6:	4014      	ands	r4, r2
    38b8:	2c03      	cmp	r4, #3
    38ba:	d90d      	bls.n	38d8 <memset+0x7c>
    38bc:	001a      	movs	r2, r3
    38be:	1f27      	subs	r7, r4, #4
    38c0:	08be      	lsrs	r6, r7, #2
    38c2:	3601      	adds	r6, #1
    38c4:	00b6      	lsls	r6, r6, #2
    38c6:	199e      	adds	r6, r3, r6
    38c8:	c220      	stmia	r2!, {r5}
    38ca:	42b2      	cmp	r2, r6
    38cc:	d1fc      	bne.n	38c8 <memset+0x6c>
    38ce:	2203      	movs	r2, #3
    38d0:	4397      	bics	r7, r2
    38d2:	3704      	adds	r7, #4
    38d4:	19db      	adds	r3, r3, r7
    38d6:	4014      	ands	r4, r2
    38d8:	2c00      	cmp	r4, #0
    38da:	d005      	beq.n	38e8 <memset+0x8c>
    38dc:	b2c9      	uxtb	r1, r1
    38de:	191c      	adds	r4, r3, r4
    38e0:	7019      	strb	r1, [r3, #0]
    38e2:	3301      	adds	r3, #1
    38e4:	429c      	cmp	r4, r3
    38e6:	d1fb      	bne.n	38e0 <memset+0x84>
    38e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ea:	0014      	movs	r4, r2
    38ec:	0003      	movs	r3, r0
    38ee:	e7c6      	b.n	387e <memset+0x22>

000038f0 <strlen>:
    38f0:	b510      	push	{r4, lr}
    38f2:	0783      	lsls	r3, r0, #30
    38f4:	d025      	beq.n	3942 <strlen+0x52>
    38f6:	7803      	ldrb	r3, [r0, #0]
    38f8:	2b00      	cmp	r3, #0
    38fa:	d024      	beq.n	3946 <strlen+0x56>
    38fc:	0003      	movs	r3, r0
    38fe:	2103      	movs	r1, #3
    3900:	e002      	b.n	3908 <strlen+0x18>
    3902:	781a      	ldrb	r2, [r3, #0]
    3904:	2a00      	cmp	r2, #0
    3906:	d01a      	beq.n	393e <strlen+0x4e>
    3908:	3301      	adds	r3, #1
    390a:	420b      	tst	r3, r1
    390c:	d1f9      	bne.n	3902 <strlen+0x12>
    390e:	6819      	ldr	r1, [r3, #0]
    3910:	4a0e      	ldr	r2, [pc, #56]	; (394c <strlen+0x5c>)
    3912:	4c0f      	ldr	r4, [pc, #60]	; (3950 <strlen+0x60>)
    3914:	188a      	adds	r2, r1, r2
    3916:	438a      	bics	r2, r1
    3918:	4222      	tst	r2, r4
    391a:	d106      	bne.n	392a <strlen+0x3a>
    391c:	3304      	adds	r3, #4
    391e:	6819      	ldr	r1, [r3, #0]
    3920:	4a0a      	ldr	r2, [pc, #40]	; (394c <strlen+0x5c>)
    3922:	188a      	adds	r2, r1, r2
    3924:	438a      	bics	r2, r1
    3926:	4222      	tst	r2, r4
    3928:	d0f8      	beq.n	391c <strlen+0x2c>
    392a:	001a      	movs	r2, r3
    392c:	781b      	ldrb	r3, [r3, #0]
    392e:	2b00      	cmp	r3, #0
    3930:	d003      	beq.n	393a <strlen+0x4a>
    3932:	3201      	adds	r2, #1
    3934:	7811      	ldrb	r1, [r2, #0]
    3936:	2900      	cmp	r1, #0
    3938:	d1fb      	bne.n	3932 <strlen+0x42>
    393a:	1a10      	subs	r0, r2, r0
    393c:	bd10      	pop	{r4, pc}
    393e:	1a18      	subs	r0, r3, r0
    3940:	e7fc      	b.n	393c <strlen+0x4c>
    3942:	0003      	movs	r3, r0
    3944:	e7e3      	b.n	390e <strlen+0x1e>
    3946:	2000      	movs	r0, #0
    3948:	e7f8      	b.n	393c <strlen+0x4c>
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	fefefeff 	.word	0xfefefeff
    3950:	80808080 	.word	0x80808080

00003954 <__register_exitproc>:
    3954:	b5f0      	push	{r4, r5, r6, r7, lr}
    3956:	464e      	mov	r6, r9
    3958:	4645      	mov	r5, r8
    395a:	46de      	mov	lr, fp
    395c:	4657      	mov	r7, sl
    395e:	b5e0      	push	{r5, r6, r7, lr}
    3960:	4d36      	ldr	r5, [pc, #216]	; (3a3c <__register_exitproc+0xe8>)
    3962:	b083      	sub	sp, #12
    3964:	0006      	movs	r6, r0
    3966:	6828      	ldr	r0, [r5, #0]
    3968:	4698      	mov	r8, r3
    396a:	000f      	movs	r7, r1
    396c:	4691      	mov	r9, r2
    396e:	f000 f899 	bl	3aa4 <__retarget_lock_acquire_recursive>
    3972:	4b33      	ldr	r3, [pc, #204]	; (3a40 <__register_exitproc+0xec>)
    3974:	681c      	ldr	r4, [r3, #0]
    3976:	23a4      	movs	r3, #164	; 0xa4
    3978:	005b      	lsls	r3, r3, #1
    397a:	58e0      	ldr	r0, [r4, r3]
    397c:	2800      	cmp	r0, #0
    397e:	d052      	beq.n	3a26 <__register_exitproc+0xd2>
    3980:	6843      	ldr	r3, [r0, #4]
    3982:	2b1f      	cmp	r3, #31
    3984:	dc13      	bgt.n	39ae <__register_exitproc+0x5a>
    3986:	1c5a      	adds	r2, r3, #1
    3988:	9201      	str	r2, [sp, #4]
    398a:	2e00      	cmp	r6, #0
    398c:	d128      	bne.n	39e0 <__register_exitproc+0x8c>
    398e:	9a01      	ldr	r2, [sp, #4]
    3990:	3302      	adds	r3, #2
    3992:	009b      	lsls	r3, r3, #2
    3994:	6042      	str	r2, [r0, #4]
    3996:	501f      	str	r7, [r3, r0]
    3998:	6828      	ldr	r0, [r5, #0]
    399a:	f000 f885 	bl	3aa8 <__retarget_lock_release_recursive>
    399e:	2000      	movs	r0, #0
    39a0:	b003      	add	sp, #12
    39a2:	bc3c      	pop	{r2, r3, r4, r5}
    39a4:	4690      	mov	r8, r2
    39a6:	4699      	mov	r9, r3
    39a8:	46a2      	mov	sl, r4
    39aa:	46ab      	mov	fp, r5
    39ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39ae:	4b25      	ldr	r3, [pc, #148]	; (3a44 <__register_exitproc+0xf0>)
    39b0:	2b00      	cmp	r3, #0
    39b2:	d03d      	beq.n	3a30 <__register_exitproc+0xdc>
    39b4:	20c8      	movs	r0, #200	; 0xc8
    39b6:	0040      	lsls	r0, r0, #1
    39b8:	f7fc fd5a 	bl	470 <malloc>
    39bc:	2800      	cmp	r0, #0
    39be:	d037      	beq.n	3a30 <__register_exitproc+0xdc>
    39c0:	22a4      	movs	r2, #164	; 0xa4
    39c2:	2300      	movs	r3, #0
    39c4:	0052      	lsls	r2, r2, #1
    39c6:	58a1      	ldr	r1, [r4, r2]
    39c8:	6043      	str	r3, [r0, #4]
    39ca:	6001      	str	r1, [r0, #0]
    39cc:	50a0      	str	r0, [r4, r2]
    39ce:	3240      	adds	r2, #64	; 0x40
    39d0:	5083      	str	r3, [r0, r2]
    39d2:	3204      	adds	r2, #4
    39d4:	5083      	str	r3, [r0, r2]
    39d6:	3301      	adds	r3, #1
    39d8:	9301      	str	r3, [sp, #4]
    39da:	2300      	movs	r3, #0
    39dc:	2e00      	cmp	r6, #0
    39de:	d0d6      	beq.n	398e <__register_exitproc+0x3a>
    39e0:	009a      	lsls	r2, r3, #2
    39e2:	4692      	mov	sl, r2
    39e4:	4482      	add	sl, r0
    39e6:	464a      	mov	r2, r9
    39e8:	2188      	movs	r1, #136	; 0x88
    39ea:	4654      	mov	r4, sl
    39ec:	5062      	str	r2, [r4, r1]
    39ee:	22c4      	movs	r2, #196	; 0xc4
    39f0:	0052      	lsls	r2, r2, #1
    39f2:	4691      	mov	r9, r2
    39f4:	4481      	add	r9, r0
    39f6:	464a      	mov	r2, r9
    39f8:	3987      	subs	r1, #135	; 0x87
    39fa:	4099      	lsls	r1, r3
    39fc:	6812      	ldr	r2, [r2, #0]
    39fe:	468b      	mov	fp, r1
    3a00:	430a      	orrs	r2, r1
    3a02:	4694      	mov	ip, r2
    3a04:	464a      	mov	r2, r9
    3a06:	4661      	mov	r1, ip
    3a08:	6011      	str	r1, [r2, #0]
    3a0a:	2284      	movs	r2, #132	; 0x84
    3a0c:	4641      	mov	r1, r8
    3a0e:	0052      	lsls	r2, r2, #1
    3a10:	50a1      	str	r1, [r4, r2]
    3a12:	2e02      	cmp	r6, #2
    3a14:	d1bb      	bne.n	398e <__register_exitproc+0x3a>
    3a16:	0002      	movs	r2, r0
    3a18:	465c      	mov	r4, fp
    3a1a:	328d      	adds	r2, #141	; 0x8d
    3a1c:	32ff      	adds	r2, #255	; 0xff
    3a1e:	6811      	ldr	r1, [r2, #0]
    3a20:	430c      	orrs	r4, r1
    3a22:	6014      	str	r4, [r2, #0]
    3a24:	e7b3      	b.n	398e <__register_exitproc+0x3a>
    3a26:	0020      	movs	r0, r4
    3a28:	304d      	adds	r0, #77	; 0x4d
    3a2a:	30ff      	adds	r0, #255	; 0xff
    3a2c:	50e0      	str	r0, [r4, r3]
    3a2e:	e7a7      	b.n	3980 <__register_exitproc+0x2c>
    3a30:	6828      	ldr	r0, [r5, #0]
    3a32:	f000 f839 	bl	3aa8 <__retarget_lock_release_recursive>
    3a36:	2001      	movs	r0, #1
    3a38:	4240      	negs	r0, r0
    3a3a:	e7b1      	b.n	39a0 <__register_exitproc+0x4c>
    3a3c:	20000498 	.word	0x20000498
    3a40:	00003c70 	.word	0x00003c70
    3a44:	00000471 	.word	0x00000471

00003a48 <register_fini>:
    3a48:	4b03      	ldr	r3, [pc, #12]	; (3a58 <register_fini+0x10>)
    3a4a:	b510      	push	{r4, lr}
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d002      	beq.n	3a56 <register_fini+0xe>
    3a50:	4802      	ldr	r0, [pc, #8]	; (3a5c <register_fini+0x14>)
    3a52:	f000 f805 	bl	3a60 <atexit>
    3a56:	bd10      	pop	{r4, pc}
    3a58:	00000000 	.word	0x00000000
    3a5c:	00003a71 	.word	0x00003a71

00003a60 <atexit>:
    3a60:	b510      	push	{r4, lr}
    3a62:	0001      	movs	r1, r0
    3a64:	2300      	movs	r3, #0
    3a66:	2200      	movs	r2, #0
    3a68:	2000      	movs	r0, #0
    3a6a:	f7ff ff73 	bl	3954 <__register_exitproc>
    3a6e:	bd10      	pop	{r4, pc}

00003a70 <__libc_fini_array>:
    3a70:	b570      	push	{r4, r5, r6, lr}
    3a72:	4b09      	ldr	r3, [pc, #36]	; (3a98 <__libc_fini_array+0x28>)
    3a74:	4c09      	ldr	r4, [pc, #36]	; (3a9c <__libc_fini_array+0x2c>)
    3a76:	1ae4      	subs	r4, r4, r3
    3a78:	10a4      	asrs	r4, r4, #2
    3a7a:	d009      	beq.n	3a90 <__libc_fini_array+0x20>
    3a7c:	4a08      	ldr	r2, [pc, #32]	; (3aa0 <__libc_fini_array+0x30>)
    3a7e:	18a5      	adds	r5, r4, r2
    3a80:	00ad      	lsls	r5, r5, #2
    3a82:	18ed      	adds	r5, r5, r3
    3a84:	682b      	ldr	r3, [r5, #0]
    3a86:	3c01      	subs	r4, #1
    3a88:	4798      	blx	r3
    3a8a:	3d04      	subs	r5, #4
    3a8c:	2c00      	cmp	r4, #0
    3a8e:	d1f9      	bne.n	3a84 <__libc_fini_array+0x14>
    3a90:	f000 f8fe 	bl	3c90 <_fini>
    3a94:	bd70      	pop	{r4, r5, r6, pc}
    3a96:	46c0      	nop			; (mov r8, r8)
    3a98:	00003c9c 	.word	0x00003c9c
    3a9c:	00003ca0 	.word	0x00003ca0
    3aa0:	3fffffff 	.word	0x3fffffff

00003aa4 <__retarget_lock_acquire_recursive>:
    3aa4:	4770      	bx	lr
    3aa6:	46c0      	nop			; (mov r8, r8)

00003aa8 <__retarget_lock_release_recursive>:
    3aa8:	4770      	bx	lr
    3aaa:	46c0      	nop			; (mov r8, r8)

00003aac <_ZTV6Stream>:
	...
    3ab4:	0475 0000 052d 0000 0115 0000 0119 0000     u...-...........
    3ac4:	0475 0000 0475 0000 0475 0000               u...u...u...

00003ad0 <_ZTV9CDC_Class>:
	...
    3ad8:	016f 0000 02a5 0000 0115 0000 0241 0000     o...........A...
    3ae8:	018d 0000 0219 0000 0145 0000 01f9 0000     ........E.......
    3af8:	0251 0000 025d 0000 2a2a 202a 5355 2042     Q...]...*** USB 
    3b08:	6e49 6574 6672 6361 2065 6554 7473 2a20     Interface Test *
    3b18:	2a2a 0000 2a2a 202a 6144 6574 203a 0020     **..*** Date:  .
    3b28:	754a 206c 3432 3220 3230 0030 5420 6d69     Jul 24 2020. Tim
    3b38:	3a65 0020 3331 343a 3a33 3033 0000 0000     e: .13:43:30....
    3b48:	2a20 2a2a 0000 0000 0a0d 0000 7954 6570      ***........Type
    3b58:	2020 2061 6f43 6d6d 6e61 2164 0000 0000       a Command!....
    3b68:	6f43 6d6d 6e61 3a64 0020 0000 7830 2e25     Command: ...0x%.
    3b78:	5838 0000 616e 006e 6e69 0066 766f 0066     8X..nan.inf.ovf.
    3b88:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    3b98:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    3ba8:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    3bb8:	7369 2e74 0063 0000                         ist.c...

00003bc0 <_tcs>:
    3bc0:	0003 0168 0000 0000 0000 0000 01f4 0000     ..h.............
    3bd0:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    3be0:	5f6c 6374 632e 0000 2000 0000               l_tc.c... ..

00003bec <_usb_ep_cfgs>:
    3bec:	0940 2000 0000 0000 0040 0000 0900 2000     @.. ....@...... 
    3bfc:	08c0 2000 0040 0040 0880 2000 0840 2000     ... @.@.... @.. 
    3c0c:	0040 0040 0800 2000 07c0 2000 0040 0040     @.@.... ... @.@.
    3c1c:	0780 2000 0740 2000 0040 0040 339c 0000     ... @.. @.@..3..
    3c2c:	3084 0000 339c 0000 30b6 0000 339c 0000     .0...3...0...3..
    3c3c:	2fda 0000 339c 0000 339c 0000 339c 0000     ./...3...3...3..
    3c4c:	2fee 0000 339c 0000 30ea 0000 2e2e 752f     ./...3...0..../u
    3c5c:	6273 642f 7665 6369 2f65 7375 6462 2e63     sb/device/usbdc.
    3c6c:	0063 0000                                   c...

00003c70 <_global_impure_ptr>:
    3c70:	0070 2000                                   p.. 

00003c74 <_init>:
    3c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c7a:	bc08      	pop	{r3}
    3c7c:	469e      	mov	lr, r3
    3c7e:	4770      	bx	lr

00003c80 <__init_array_start>:
    3c80:	00003a49 	.word	0x00003a49

00003c84 <__frame_dummy_init_array_entry>:
    3c84:	000000dd 0000035d 00000775              ....]...u...

00003c90 <_fini>:
    3c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c96:	bc08      	pop	{r3}
    3c98:	469e      	mov	lr, r3
    3c9a:	4770      	bx	lr

00003c9c <__fini_array_start>:
    3c9c:	000000b5 	.word	0x000000b5
