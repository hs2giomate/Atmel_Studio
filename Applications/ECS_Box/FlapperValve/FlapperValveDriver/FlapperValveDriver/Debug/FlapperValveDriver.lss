
FlapperValveDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d94  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000368  20000068  00002dfc  00020068  2**2
                  ALLOC
  3 .stack        00002000  200003d0  00003164  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022126  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000329d  00000000  00000000  0004220f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009f4f  00000000  00000000  000454ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006c0  00000000  00000000  0004f3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b68  00000000  00000000  0004fabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019f26  00000000  00000000  00050623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd33  00000000  00000000  0006a549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088bac  00000000  00000000  0007827c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010c4  00000000  00000000  00100e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 23 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .#. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	a5 1e 00 00 29 01 00 00 29 01 00 00 29 01 00 00     ....)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 b5 0d 00 00     )...)...).......
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002d94 	.word	0x00002d94

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002d94 	.word	0x00002d94
     10c:	00002d94 	.word	0x00002d94
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000002dd 	.word	0x000002dd
     124:	00002c2d 	.word	0x00002c2d

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00002d94 	.word	0x00002d94
     1dc:	20000000 	.word	0x20000000
     1e0:	20000068 	.word	0x20000068
     1e4:	20000004 	.word	0x20000004
     1e8:	20000068 	.word	0x20000068
     1ec:	200003d0 	.word	0x200003d0
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00002c39 	.word	0x00002c39
     20c:	000020e1 	.word	0x000020e1

00000210 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	46c6      	mov	lr, r8
     214:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     216:	24c0      	movs	r4, #192	; 0xc0
     218:	05e4      	lsls	r4, r4, #23
     21a:	2280      	movs	r2, #128	; 0x80
     21c:	0452      	lsls	r2, r2, #17
     21e:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     220:	4b1a      	ldr	r3, [pc, #104]	; (28c <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     222:	2780      	movs	r7, #128	; 0x80
     224:	05ff      	lsls	r7, r7, #23
     226:	629f      	str	r7, [r3, #40]	; 0x28
     228:	4919      	ldr	r1, [pc, #100]	; (290 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     22a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     22c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     22e:	2058      	movs	r0, #88	; 0x58
     230:	5c19      	ldrb	r1, [r3, r0]
     232:	2204      	movs	r2, #4
     234:	4690      	mov	r8, r2
     236:	4391      	bics	r1, r2
     238:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     23a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23c:	2601      	movs	r6, #1
     23e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     240:	2501      	movs	r5, #1
     242:	4329      	orrs	r1, r5
     244:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     246:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     248:	381c      	subs	r0, #28
     24a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     24c:	320b      	adds	r2, #11
     24e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     250:	3a09      	subs	r2, #9
     252:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     254:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     256:	2180      	movs	r1, #128	; 0x80
     258:	0489      	lsls	r1, r1, #18
     25a:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25c:	629f      	str	r7, [r3, #40]	; 0x28
     25e:	4f0d      	ldr	r7, [pc, #52]	; (294 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     260:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     262:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     264:	2159      	movs	r1, #89	; 0x59
     266:	5c5c      	ldrb	r4, [r3, r1]
     268:	4642      	mov	r2, r8
     26a:	4394      	bics	r4, r2
     26c:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     270:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     272:	432a      	orrs	r2, r5
     274:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     276:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     278:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27a:	394a      	subs	r1, #74	; 0x4a
     27c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     27e:	3151      	adds	r1, #81	; 0x51
     280:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     282:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     284:	bc04      	pop	{r2}
     286:	4690      	mov	r8, r2
     288:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	41004400 	.word	0x41004400
     290:	c0000100 	.word	0xc0000100
     294:	c0000200 	.word	0xc0000200

00000298 <USB_DEVICE_INSTANCE_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     298:	4b06      	ldr	r3, [pc, #24]	; (2b4 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     29a:	69da      	ldr	r2, [r3, #28]
     29c:	2120      	movs	r1, #32
     29e:	430a      	orrs	r2, r1
     2a0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     2a2:	695a      	ldr	r2, [r3, #20]
     2a4:	3120      	adds	r1, #32
     2a6:	430a      	orrs	r2, r1
     2a8:	615a      	str	r2, [r3, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2aa:	4a03      	ldr	r2, [pc, #12]	; (2b8 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     2ac:	4b03      	ldr	r3, [pc, #12]	; (2bc <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     2ae:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     2b0:	4770      	bx	lr
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	40000400 	.word	0x40000400
     2b8:	00004106 	.word	0x00004106
     2bc:	40000c00 	.word	0x40000c00

000002c0 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     2c0:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     2c2:	4b03      	ldr	r3, [pc, #12]	; (2d0 <USB_DEVICE_INSTANCE_init+0x10>)
     2c4:	4798      	blx	r3
	usb_d_init();
     2c6:	4b03      	ldr	r3, [pc, #12]	; (2d4 <USB_DEVICE_INSTANCE_init+0x14>)
     2c8:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     2ca:	4b03      	ldr	r3, [pc, #12]	; (2d8 <USB_DEVICE_INSTANCE_init+0x18>)
     2cc:	4798      	blx	r3
}
     2ce:	bd10      	pop	{r4, pc}
     2d0:	00000299 	.word	0x00000299
     2d4:	000006f9 	.word	0x000006f9
     2d8:	00000211 	.word	0x00000211

000002dc <system_init>:

void system_init(void)
{
     2dc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2de:	4b0a      	ldr	r3, [pc, #40]	; (308 <system_init+0x2c>)
     2e0:	4798      	blx	r3
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2e2:	4a0a      	ldr	r2, [pc, #40]	; (30c <system_init+0x30>)
     2e4:	6a11      	ldr	r1, [r2, #32]
     2e6:	2380      	movs	r3, #128	; 0x80
     2e8:	011b      	lsls	r3, r3, #4
     2ea:	430b      	orrs	r3, r1
     2ec:	6213      	str	r3, [r2, #32]
     2ee:	4a08      	ldr	r2, [pc, #32]	; (310 <system_init+0x34>)
     2f0:	4b08      	ldr	r3, [pc, #32]	; (314 <system_init+0x38>)
     2f2:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     2f4:	4b08      	ldr	r3, [pc, #32]	; (318 <system_init+0x3c>)
     2f6:	4798      	blx	r3
     2f8:	0002      	movs	r2, r0
     2fa:	4908      	ldr	r1, [pc, #32]	; (31c <system_init+0x40>)
     2fc:	4808      	ldr	r0, [pc, #32]	; (320 <system_init+0x44>)
     2fe:	4b09      	ldr	r3, [pc, #36]	; (324 <system_init+0x48>)
     300:	4798      	blx	r3
	init_mcu();

	TIMER_0_init();

	USB_DEVICE_INSTANCE_init();
     302:	4b09      	ldr	r3, [pc, #36]	; (328 <system_init+0x4c>)
     304:	4798      	blx	r3
}
     306:	bd10      	pop	{r4, pc}
     308:	00000afd 	.word	0x00000afd
     30c:	40000400 	.word	0x40000400
     310:	0000431b 	.word	0x0000431b
     314:	40000c00 	.word	0x40000c00
     318:	00000db1 	.word	0x00000db1
     31c:	42002c00 	.word	0x42002c00
     320:	200003b4 	.word	0x200003b4
     324:	00000445 	.word	0x00000445
     328:	000002c1 	.word	0x000002c1

0000032c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     32c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     330:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     332:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     334:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     338:	4770      	bx	lr

0000033a <atomic_leave_critical>:
     33a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     33e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     340:	f383 8810 	msr	PRIMASK, r3
}
     344:	4770      	bx	lr
	...

00000348 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     34a:	46ce      	mov	lr, r9
     34c:	4647      	mov	r7, r8
     34e:	b580      	push	{r7, lr}
     350:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     352:	6803      	ldr	r3, [r0, #0]
     354:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     356:	2b00      	cmp	r3, #0
     358:	d005      	beq.n	366 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     35a:	688e      	ldr	r6, [r1, #8]
     35c:	001c      	movs	r4, r3
     35e:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     360:	2701      	movs	r7, #1
     362:	1abf      	subs	r7, r7, r2
     364:	e00d      	b.n	382 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     366:	4b12      	ldr	r3, [pc, #72]	; (3b0 <timer_add_timer_task+0x68>)
     368:	4798      	blx	r3
		return;
     36a:	e018      	b.n	39e <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     36c:	18fb      	adds	r3, r7, r3
     36e:	68a0      	ldr	r0, [r4, #8]
     370:	4680      	mov	r8, r0
     372:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     374:	42b3      	cmp	r3, r6
     376:	d20c      	bcs.n	392 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     378:	6823      	ldr	r3, [r4, #0]
     37a:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     37c:	2b00      	cmp	r3, #0
     37e:	d00b      	beq.n	398 <timer_add_timer_task+0x50>
     380:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     382:	6863      	ldr	r3, [r4, #4]
     384:	4293      	cmp	r3, r2
     386:	d8f1      	bhi.n	36c <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     388:	68a0      	ldr	r0, [r4, #8]
     38a:	4680      	mov	r8, r0
     38c:	4443      	add	r3, r8
     38e:	1a9b      	subs	r3, r3, r2
     390:	e7f0      	b.n	374 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     392:	45a4      	cmp	ip, r4
     394:	d007      	beq.n	3a6 <timer_add_timer_task+0x5e>
     396:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     398:	0020      	movs	r0, r4
     39a:	4b06      	ldr	r3, [pc, #24]	; (3b4 <timer_add_timer_task+0x6c>)
     39c:	4798      	blx	r3
	}
}
     39e:	bc0c      	pop	{r2, r3}
     3a0:	4690      	mov	r8, r2
     3a2:	4699      	mov	r9, r3
     3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     3a6:	4648      	mov	r0, r9
     3a8:	4b01      	ldr	r3, [pc, #4]	; (3b0 <timer_add_timer_task+0x68>)
     3aa:	4798      	blx	r3
     3ac:	e7f7      	b.n	39e <timer_add_timer_task+0x56>
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	00000a79 	.word	0x00000a79
     3b4:	00000aa5 	.word	0x00000aa5

000003b8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	46c6      	mov	lr, r8
     3bc:	b500      	push	{lr}
     3be:	b082      	sub	sp, #8
     3c0:	0007      	movs	r7, r0
	return (void *)list->head;
     3c2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     3c4:	6903      	ldr	r3, [r0, #16]
     3c6:	3301      	adds	r3, #1
     3c8:	4698      	mov	r8, r3
     3ca:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     3cc:	7e03      	ldrb	r3, [r0, #24]
     3ce:	07db      	lsls	r3, r3, #31
     3d0:	d411      	bmi.n	3f6 <timer_process_counted+0x3e>
     3d2:	7e03      	ldrb	r3, [r0, #24]
     3d4:	079b      	lsls	r3, r3, #30
     3d6:	d40e      	bmi.n	3f6 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     3d8:	2c00      	cmp	r4, #0
     3da:	d010      	beq.n	3fe <timer_process_counted+0x46>
     3dc:	4643      	mov	r3, r8
     3de:	6862      	ldr	r2, [r4, #4]
     3e0:	1a9b      	subs	r3, r3, r2
     3e2:	68a2      	ldr	r2, [r4, #8]
     3e4:	4293      	cmp	r3, r2
     3e6:	d30a      	bcc.n	3fe <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     3e8:	2314      	movs	r3, #20
     3ea:	469c      	mov	ip, r3
     3ec:	4484      	add	ip, r0
     3ee:	4663      	mov	r3, ip
     3f0:	9301      	str	r3, [sp, #4]
     3f2:	4e12      	ldr	r6, [pc, #72]	; (43c <timer_process_counted+0x84>)
     3f4:	e014      	b.n	420 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     3f6:	7e3b      	ldrb	r3, [r7, #24]
     3f8:	2202      	movs	r2, #2
     3fa:	4313      	orrs	r3, r2
     3fc:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     3fe:	b002      	add	sp, #8
     400:	bc04      	pop	{r2}
     402:	4690      	mov	r8, r2
     404:	bdf0      	pop	{r4, r5, r6, r7, pc}
     406:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     408:	68e3      	ldr	r3, [r4, #12]
     40a:	0020      	movs	r0, r4
     40c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     40e:	2d00      	cmp	r5, #0
     410:	d0f5      	beq.n	3fe <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     412:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     414:	4643      	mov	r3, r8
     416:	686a      	ldr	r2, [r5, #4]
     418:	1a9b      	subs	r3, r3, r2
     41a:	68aa      	ldr	r2, [r5, #8]
     41c:	4293      	cmp	r3, r2
     41e:	d3ee      	bcc.n	3fe <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     420:	9801      	ldr	r0, [sp, #4]
     422:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     424:	7c23      	ldrb	r3, [r4, #16]
     426:	2b01      	cmp	r3, #1
     428:	d1ed      	bne.n	406 <timer_process_counted+0x4e>
			tmp->time_label = time;
     42a:	4643      	mov	r3, r8
     42c:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     42e:	4642      	mov	r2, r8
     430:	0021      	movs	r1, r4
     432:	9801      	ldr	r0, [sp, #4]
     434:	4b02      	ldr	r3, [pc, #8]	; (440 <timer_process_counted+0x88>)
     436:	4798      	blx	r3
     438:	e7e5      	b.n	406 <timer_process_counted+0x4e>
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	00000aed 	.word	0x00000aed
     440:	00000349 	.word	0x00000349

00000444 <timer_init>:
{
     444:	b570      	push	{r4, r5, r6, lr}
     446:	0005      	movs	r5, r0
     448:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     44a:	2800      	cmp	r0, #0
     44c:	d011      	beq.n	472 <timer_init+0x2e>
     44e:	0008      	movs	r0, r1
     450:	1e43      	subs	r3, r0, #1
     452:	4198      	sbcs	r0, r3
     454:	b2c0      	uxtb	r0, r0
     456:	223b      	movs	r2, #59	; 0x3b
     458:	4907      	ldr	r1, [pc, #28]	; (478 <timer_init+0x34>)
     45a:	4b08      	ldr	r3, [pc, #32]	; (47c <timer_init+0x38>)
     45c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     45e:	0021      	movs	r1, r4
     460:	0028      	movs	r0, r5
     462:	4b07      	ldr	r3, [pc, #28]	; (480 <timer_init+0x3c>)
     464:	4798      	blx	r3
	descr->time                           = 0;
     466:	2300      	movs	r3, #0
     468:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     46a:	4b06      	ldr	r3, [pc, #24]	; (484 <timer_init+0x40>)
     46c:	602b      	str	r3, [r5, #0]
}
     46e:	2000      	movs	r0, #0
     470:	bd70      	pop	{r4, r5, r6, pc}
     472:	2000      	movs	r0, #0
     474:	e7ef      	b.n	456 <timer_init+0x12>
     476:	46c0      	nop			; (mov r8, r8)
     478:	00002ca4 	.word	0x00002ca4
     47c:	00000a4d 	.word	0x00000a4d
     480:	00000c9d 	.word	0x00000c9d
     484:	000003b9 	.word	0x000003b9

00000488 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     48c:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <_usb_d_find_ep+0x40>)
     48e:	785a      	ldrb	r2, [r3, #1]
     490:	4290      	cmp	r0, r2
     492:	d017      	beq.n	4c4 <_usb_d_find_ep+0x3c>
     494:	2300      	movs	r3, #0
     496:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     498:	4f0b      	ldr	r7, [pc, #44]	; (4c8 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     49a:	260f      	movs	r6, #15
     49c:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     49e:	003d      	movs	r5, r7
     4a0:	e008      	b.n	4b4 <_usb_d_find_ep+0x2c>
     4a2:	3001      	adds	r0, #1
     4a4:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     4a6:	2804      	cmp	r0, #4
     4a8:	d00a      	beq.n	4c0 <_usb_d_find_ep+0x38>
     4aa:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     4ac:	18ea      	adds	r2, r5, r3
     4ae:	7852      	ldrb	r2, [r2, #1]
     4b0:	42a2      	cmp	r2, r4
     4b2:	d006      	beq.n	4c2 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     4b4:	5dd9      	ldrb	r1, [r3, r7]
     4b6:	2900      	cmp	r1, #0
     4b8:	d1f3      	bne.n	4a2 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     4ba:	4296      	cmp	r6, r2
     4bc:	d1f1      	bne.n	4a2 <_usb_d_find_ep+0x1a>
     4be:	e000      	b.n	4c2 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     4c0:	3805      	subs	r0, #5
}
     4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     4c4:	2000      	movs	r0, #0
     4c6:	e7fc      	b.n	4c2 <_usb_d_find_ep+0x3a>
     4c8:	20000084 	.word	0x20000084

000004cc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     4cc:	2000      	movs	r0, #0
     4ce:	4770      	bx	lr

000004d0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	0004      	movs	r4, r0
     4d4:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     4d6:	4b0a      	ldr	r3, [pc, #40]	; (500 <usb_d_cb_trans_more+0x30>)
     4d8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     4da:	0142      	lsls	r2, r0, #5
     4dc:	4b09      	ldr	r3, [pc, #36]	; (504 <usb_d_cb_trans_more+0x34>)
     4de:	189b      	adds	r3, r3, r2
     4e0:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     4e2:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     4e4:	2a03      	cmp	r2, #3
     4e6:	d001      	beq.n	4ec <usb_d_cb_trans_more+0x1c>
}
     4e8:	0018      	movs	r0, r3
     4ea:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     4ec:	0140      	lsls	r0, r0, #5
     4ee:	4b05      	ldr	r3, [pc, #20]	; (504 <usb_d_cb_trans_more+0x34>)
     4f0:	1818      	adds	r0, r3, r0
     4f2:	6983      	ldr	r3, [r0, #24]
     4f4:	0029      	movs	r1, r5
     4f6:	0020      	movs	r0, r4
     4f8:	4798      	blx	r3
     4fa:	0003      	movs	r3, r0
     4fc:	e7f4      	b.n	4e8 <usb_d_cb_trans_more+0x18>
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	00000489 	.word	0x00000489
     504:	20000084 	.word	0x20000084

00000508 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     508:	b5f0      	push	{r4, r5, r6, r7, lr}
     50a:	b085      	sub	sp, #20
     50c:	0005      	movs	r5, r0
     50e:	000f      	movs	r7, r1
     510:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     512:	4b51      	ldr	r3, [pc, #324]	; (658 <_usb_d_cb_trans_done+0x150>)
     514:	4798      	blx	r3
     516:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     518:	2f00      	cmp	r7, #0
     51a:	d162      	bne.n	5e2 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     51c:	4b4f      	ldr	r3, [pc, #316]	; (65c <_usb_d_cb_trans_done+0x154>)
     51e:	0142      	lsls	r2, r0, #5
     520:	1899      	adds	r1, r3, r2
     522:	2000      	movs	r0, #0
     524:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     526:	5cd3      	ldrb	r3, [r2, r3]
     528:	2b00      	cmp	r3, #0
     52a:	d00e      	beq.n	54a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     52c:	0162      	lsls	r2, r4, #5
     52e:	4b4b      	ldr	r3, [pc, #300]	; (65c <_usb_d_cb_trans_done+0x154>)
     530:	189b      	adds	r3, r3, r2
     532:	2201      	movs	r2, #1
     534:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     536:	0164      	lsls	r4, r4, #5
     538:	4b48      	ldr	r3, [pc, #288]	; (65c <_usb_d_cb_trans_done+0x154>)
     53a:	191c      	adds	r4, r3, r4
     53c:	78e1      	ldrb	r1, [r4, #3]
     53e:	69e3      	ldr	r3, [r4, #28]
     540:	0032      	movs	r2, r6
     542:	0028      	movs	r0, r5
     544:	4798      	blx	r3
}
     546:	b005      	add	sp, #20
     548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     54a:	788b      	ldrb	r3, [r1, #2]
     54c:	2b03      	cmp	r3, #3
     54e:	d00c      	beq.n	56a <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     550:	4b42      	ldr	r3, [pc, #264]	; (65c <_usb_d_cb_trans_done+0x154>)
     552:	0162      	lsls	r2, r4, #5
     554:	320c      	adds	r2, #12
     556:	189a      	adds	r2, r3, r2
     558:	0164      	lsls	r4, r4, #5
     55a:	191c      	adds	r4, r3, r4
     55c:	7860      	ldrb	r0, [r4, #1]
     55e:	2100      	movs	r1, #0
     560:	69e3      	ldr	r3, [r4, #28]
     562:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     564:	2302      	movs	r3, #2
     566:	70a3      	strb	r3, [r4, #2]
     568:	e7ed      	b.n	546 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     56a:	4a3c      	ldr	r2, [pc, #240]	; (65c <_usb_d_cb_trans_done+0x154>)
     56c:	000b      	movs	r3, r1
     56e:	250c      	movs	r5, #12
     570:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     572:	0161      	lsls	r1, r4, #5
     574:	310c      	adds	r1, #12
     576:	1852      	adds	r2, r2, r1
     578:	7858      	ldrb	r0, [r3, #1]
     57a:	69db      	ldr	r3, [r3, #28]
     57c:	2101      	movs	r1, #1
     57e:	4798      	blx	r3
		if (err) {
     580:	2800      	cmp	r0, #0
     582:	d017      	beq.n	5b4 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     584:	0162      	lsls	r2, r4, #5
     586:	4b35      	ldr	r3, [pc, #212]	; (65c <_usb_d_cb_trans_done+0x154>)
     588:	189b      	adds	r3, r3, r2
     58a:	2205      	movs	r2, #5
     58c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     58e:	3a03      	subs	r2, #3
     590:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     592:	2d00      	cmp	r5, #0
     594:	db09      	blt.n	5aa <_usb_d_cb_trans_done+0xa2>
     596:	0164      	lsls	r4, r4, #5
     598:	4b30      	ldr	r3, [pc, #192]	; (65c <_usb_d_cb_trans_done+0x154>)
     59a:	191c      	adds	r4, r3, r4
     59c:	7860      	ldrb	r0, [r4, #1]
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	4318      	orrs	r0, r3
     5a2:	2101      	movs	r1, #1
     5a4:	4b2e      	ldr	r3, [pc, #184]	; (660 <_usb_d_cb_trans_done+0x158>)
     5a6:	4798      	blx	r3
     5a8:	e7cd      	b.n	546 <_usb_d_cb_trans_done+0x3e>
     5aa:	0164      	lsls	r4, r4, #5
     5ac:	4b2b      	ldr	r3, [pc, #172]	; (65c <_usb_d_cb_trans_done+0x154>)
     5ae:	191c      	adds	r4, r3, r4
     5b0:	7860      	ldrb	r0, [r4, #1]
     5b2:	e7f6      	b.n	5a2 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     5b4:	0164      	lsls	r4, r4, #5
     5b6:	4b29      	ldr	r3, [pc, #164]	; (65c <_usb_d_cb_trans_done+0x154>)
     5b8:	191c      	adds	r4, r3, r4
     5ba:	2304      	movs	r3, #4
     5bc:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     5be:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     5c0:	2200      	movs	r2, #0
     5c2:	9201      	str	r2, [sp, #4]
     5c4:	9202      	str	r2, [sp, #8]
     5c6:	2d00      	cmp	r5, #0
     5c8:	db08      	blt.n	5dc <_usb_d_cb_trans_done+0xd4>
     5ca:	3280      	adds	r2, #128	; 0x80
     5cc:	4313      	orrs	r3, r2
     5ce:	a801      	add	r0, sp, #4
     5d0:	7203      	strb	r3, [r0, #8]
     5d2:	2301      	movs	r3, #1
     5d4:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     5d6:	4b23      	ldr	r3, [pc, #140]	; (664 <_usb_d_cb_trans_done+0x15c>)
     5d8:	4798      	blx	r3
     5da:	e7b4      	b.n	546 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     5dc:	220f      	movs	r2, #15
     5de:	4013      	ands	r3, r2
     5e0:	e7f5      	b.n	5ce <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     5e2:	2f01      	cmp	r7, #1
     5e4:	d00a      	beq.n	5fc <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     5e6:	2f02      	cmp	r7, #2
     5e8:	d01d      	beq.n	626 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     5ea:	2f03      	cmp	r7, #3
     5ec:	d02c      	beq.n	648 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     5ee:	0142      	lsls	r2, r0, #5
     5f0:	4b1a      	ldr	r3, [pc, #104]	; (65c <_usb_d_cb_trans_done+0x154>)
     5f2:	189b      	adds	r3, r3, r2
     5f4:	2206      	movs	r2, #6
     5f6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     5f8:	70da      	strb	r2, [r3, #3]
     5fa:	e79c      	b.n	536 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     5fc:	4b17      	ldr	r3, [pc, #92]	; (65c <_usb_d_cb_trans_done+0x154>)
     5fe:	0142      	lsls	r2, r0, #5
     600:	1899      	adds	r1, r3, r2
     602:	2002      	movs	r0, #2
     604:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     606:	5cd3      	ldrb	r3, [r2, r3]
     608:	2b00      	cmp	r3, #0
     60a:	d005      	beq.n	618 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     60c:	0162      	lsls	r2, r4, #5
     60e:	4b13      	ldr	r3, [pc, #76]	; (65c <_usb_d_cb_trans_done+0x154>)
     610:	189b      	adds	r3, r3, r2
     612:	2205      	movs	r2, #5
     614:	709a      	strb	r2, [r3, #2]
     616:	e78e      	b.n	536 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     618:	2202      	movs	r2, #2
     61a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     61c:	2100      	movs	r1, #0
     61e:	0028      	movs	r0, r5
     620:	4b0f      	ldr	r3, [pc, #60]	; (660 <_usb_d_cb_trans_done+0x158>)
     622:	4798      	blx	r3
     624:	e787      	b.n	536 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     626:	4b0d      	ldr	r3, [pc, #52]	; (65c <_usb_d_cb_trans_done+0x154>)
     628:	0142      	lsls	r2, r0, #5
     62a:	1899      	adds	r1, r3, r2
     62c:	2004      	movs	r0, #4
     62e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     630:	5cd3      	ldrb	r3, [r2, r3]
     632:	2b00      	cmp	r3, #0
     634:	d005      	beq.n	642 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     636:	0162      	lsls	r2, r4, #5
     638:	4b08      	ldr	r3, [pc, #32]	; (65c <_usb_d_cb_trans_done+0x154>)
     63a:	189b      	adds	r3, r3, r2
     63c:	2201      	movs	r2, #1
     63e:	709a      	strb	r2, [r3, #2]
     640:	e779      	b.n	536 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     642:	2302      	movs	r3, #2
     644:	708b      	strb	r3, [r1, #2]
			return;
     646:	e77e      	b.n	546 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     648:	0142      	lsls	r2, r0, #5
     64a:	4b04      	ldr	r3, [pc, #16]	; (65c <_usb_d_cb_trans_done+0x154>)
     64c:	189b      	adds	r3, r3, r2
     64e:	2200      	movs	r2, #0
     650:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     652:	3205      	adds	r2, #5
     654:	70da      	strb	r2, [r3, #3]
     656:	e76e      	b.n	536 <_usb_d_cb_trans_done+0x2e>
     658:	00000489 	.word	0x00000489
     65c:	20000084 	.word	0x20000084
     660:	00001a69 	.word	0x00001a69
     664:	00001c3d 	.word	0x00001c3d

00000668 <usb_d_cb_trans_setup>:
{
     668:	b5f0      	push	{r4, r5, r6, r7, lr}
     66a:	46c6      	mov	lr, r8
     66c:	b500      	push	{lr}
     66e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     670:	4b1d      	ldr	r3, [pc, #116]	; (6e8 <usb_d_cb_trans_setup+0x80>)
     672:	4798      	blx	r3
     674:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     676:	0145      	lsls	r5, r0, #5
     678:	350c      	adds	r5, #12
     67a:	4b1c      	ldr	r3, [pc, #112]	; (6ec <usb_d_cb_trans_setup+0x84>)
     67c:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     67e:	0029      	movs	r1, r5
     680:	0020      	movs	r0, r4
     682:	4b1b      	ldr	r3, [pc, #108]	; (6f0 <usb_d_cb_trans_setup+0x88>)
     684:	4798      	blx	r3
	if (n != 8) {
     686:	b2c0      	uxtb	r0, r0
     688:	2808      	cmp	r0, #8
     68a:	d00a      	beq.n	6a2 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     68c:	2101      	movs	r1, #1
     68e:	0020      	movs	r0, r4
     690:	4d18      	ldr	r5, [pc, #96]	; (6f4 <usb_d_cb_trans_setup+0x8c>)
     692:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     694:	2080      	movs	r0, #128	; 0x80
     696:	4320      	orrs	r0, r4
     698:	2101      	movs	r1, #1
     69a:	47a8      	blx	r5
}
     69c:	bc04      	pop	{r2}
     69e:	4690      	mov	r8, r2
     6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     6a2:	2100      	movs	r1, #0
     6a4:	0020      	movs	r0, r4
     6a6:	4b13      	ldr	r3, [pc, #76]	; (6f4 <usb_d_cb_trans_setup+0x8c>)
     6a8:	4698      	mov	r8, r3
     6aa:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     6ac:	2780      	movs	r7, #128	; 0x80
     6ae:	4327      	orrs	r7, r4
     6b0:	2100      	movs	r1, #0
     6b2:	0038      	movs	r0, r7
     6b4:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     6b6:	0172      	lsls	r2, r6, #5
     6b8:	4b0c      	ldr	r3, [pc, #48]	; (6ec <usb_d_cb_trans_setup+0x84>)
     6ba:	189b      	adds	r3, r3, r2
     6bc:	2201      	movs	r2, #1
     6be:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     6c0:	695b      	ldr	r3, [r3, #20]
     6c2:	0029      	movs	r1, r5
     6c4:	0020      	movs	r0, r4
     6c6:	4798      	blx	r3
     6c8:	2800      	cmp	r0, #0
     6ca:	d1e7      	bne.n	69c <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     6cc:	0176      	lsls	r6, r6, #5
     6ce:	4b07      	ldr	r3, [pc, #28]	; (6ec <usb_d_cb_trans_setup+0x84>)
     6d0:	199e      	adds	r6, r3, r6
     6d2:	2305      	movs	r3, #5
     6d4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     6d6:	2101      	movs	r1, #1
     6d8:	0020      	movs	r0, r4
     6da:	4c06      	ldr	r4, [pc, #24]	; (6f4 <usb_d_cb_trans_setup+0x8c>)
     6dc:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     6de:	2101      	movs	r1, #1
     6e0:	0038      	movs	r0, r7
     6e2:	47a0      	blx	r4
     6e4:	e7da      	b.n	69c <usb_d_cb_trans_setup+0x34>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000489 	.word	0x00000489
     6ec:	20000084 	.word	0x20000084
     6f0:	00001bcd 	.word	0x00001bcd
     6f4:	00001a69 	.word	0x00001a69

000006f8 <usb_d_init>:

int32_t usb_d_init(void)
{
     6f8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     6fa:	4b10      	ldr	r3, [pc, #64]	; (73c <usb_d_init+0x44>)
     6fc:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     6fe:	2800      	cmp	r0, #0
     700:	db1b      	blt.n	73a <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     702:	4c0f      	ldr	r4, [pc, #60]	; (740 <usb_d_init+0x48>)
     704:	2280      	movs	r2, #128	; 0x80
     706:	2100      	movs	r1, #0
     708:	0020      	movs	r0, r4
     70a:	4b0e      	ldr	r3, [pc, #56]	; (744 <usb_d_init+0x4c>)
     70c:	4798      	blx	r3
     70e:	0023      	movs	r3, r4
     710:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     712:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     714:	4a0c      	ldr	r2, [pc, #48]	; (748 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     716:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     718:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     71a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     71c:	61da      	str	r2, [r3, #28]
     71e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     720:	42a3      	cmp	r3, r4
     722:	d1f8      	bne.n	716 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     724:	4909      	ldr	r1, [pc, #36]	; (74c <usb_d_init+0x54>)
     726:	2000      	movs	r0, #0
     728:	4c09      	ldr	r4, [pc, #36]	; (750 <usb_d_init+0x58>)
     72a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     72c:	4909      	ldr	r1, [pc, #36]	; (754 <usb_d_init+0x5c>)
     72e:	2001      	movs	r0, #1
     730:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     732:	4909      	ldr	r1, [pc, #36]	; (758 <usb_d_init+0x60>)
     734:	2002      	movs	r0, #2
     736:	47a0      	blx	r4
	return ERR_NONE;
     738:	2000      	movs	r0, #0
}
     73a:	bd10      	pop	{r4, pc}
     73c:	00001449 	.word	0x00001449
     740:	20000084 	.word	0x20000084
     744:	00002c93 	.word	0x00002c93
     748:	000004cd 	.word	0x000004cd
     74c:	00000669 	.word	0x00000669
     750:	00001e75 	.word	0x00001e75
     754:	000004d1 	.word	0x000004d1
     758:	00000509 	.word	0x00000509

0000075c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     75c:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     75e:	4b01      	ldr	r3, [pc, #4]	; (764 <usb_d_register_callback+0x8>)
     760:	4798      	blx	r3
}
     762:	bd10      	pop	{r4, pc}
     764:	00001e51 	.word	0x00001e51

00000768 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     768:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     76a:	4b01      	ldr	r3, [pc, #4]	; (770 <usb_d_enable+0x8>)
     76c:	4798      	blx	r3
}
     76e:	bd10      	pop	{r4, pc}
     770:	00001525 	.word	0x00001525

00000774 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     774:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     776:	4b01      	ldr	r3, [pc, #4]	; (77c <usb_d_attach+0x8>)
     778:	4798      	blx	r3
}
     77a:	bd10      	pop	{r4, pc}
     77c:	00001575 	.word	0x00001575

00000780 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     780:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     782:	4b01      	ldr	r3, [pc, #4]	; (788 <usb_d_set_address+0x8>)
     784:	4798      	blx	r3
}
     786:	bd10      	pop	{r4, pc}
     788:	00001585 	.word	0x00001585

0000078c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     78e:	0005      	movs	r5, r0
     790:	000e      	movs	r6, r1
     792:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     794:	4b0f      	ldr	r3, [pc, #60]	; (7d4 <usb_d_ep_init+0x48>)
     796:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     798:	2800      	cmp	r0, #0
     79a:	da14      	bge.n	7c6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     79c:	20ff      	movs	r0, #255	; 0xff
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <usb_d_ep_init+0x48>)
     7a0:	4798      	blx	r3
     7a2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     7a4:	db12      	blt.n	7cc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     7a6:	003a      	movs	r2, r7
     7a8:	0031      	movs	r1, r6
     7aa:	0028      	movs	r0, r5
     7ac:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <usb_d_ep_init+0x4c>)
     7ae:	4798      	blx	r3
	if (rc < 0) {
     7b0:	2800      	cmp	r0, #0
     7b2:	db07      	blt.n	7c4 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     7b4:	4a09      	ldr	r2, [pc, #36]	; (7dc <usb_d_ep_init+0x50>)
     7b6:	0164      	lsls	r4, r4, #5
     7b8:	1913      	adds	r3, r2, r4
     7ba:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     7bc:	2303      	movs	r3, #3
     7be:	401e      	ands	r6, r3
     7c0:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     7c2:	2000      	movs	r0, #0
}
     7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     7c6:	2014      	movs	r0, #20
     7c8:	4240      	negs	r0, r0
     7ca:	e7fb      	b.n	7c4 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     7cc:	2015      	movs	r0, #21
     7ce:	4240      	negs	r0, r0
     7d0:	e7f8      	b.n	7c4 <usb_d_ep_init+0x38>
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000489 	.word	0x00000489
     7d8:	00001595 	.word	0x00001595
     7dc:	20000084 	.word	0x20000084

000007e0 <usb_d_ep0_init>:
{
     7e0:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     7e2:	b282      	uxth	r2, r0
     7e4:	2100      	movs	r1, #0
     7e6:	2000      	movs	r0, #0
     7e8:	4b01      	ldr	r3, [pc, #4]	; (7f0 <usb_d_ep0_init+0x10>)
     7ea:	4798      	blx	r3
}
     7ec:	bd10      	pop	{r4, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	0000078d 	.word	0x0000078d

000007f4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     7f4:	b570      	push	{r4, r5, r6, lr}
     7f6:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <usb_d_ep_deinit+0x20>)
     7fa:	4798      	blx	r3
     7fc:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     7fe:	db07      	blt.n	810 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     800:	0028      	movs	r0, r5
     802:	4b05      	ldr	r3, [pc, #20]	; (818 <usb_d_ep_deinit+0x24>)
     804:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     806:	0164      	lsls	r4, r4, #5
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <usb_d_ep_deinit+0x28>)
     80a:	191c      	adds	r4, r3, r4
     80c:	23ff      	movs	r3, #255	; 0xff
     80e:	7063      	strb	r3, [r4, #1]
}
     810:	bd70      	pop	{r4, r5, r6, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	00000489 	.word	0x00000489
     818:	000016c1 	.word	0x000016c1
     81c:	20000084 	.word	0x20000084

00000820 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     820:	b570      	push	{r4, r5, r6, lr}
     822:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     824:	4b0e      	ldr	r3, [pc, #56]	; (860 <usb_d_ep_enable+0x40>)
     826:	4798      	blx	r3
     828:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     82a:	db15      	blt.n	858 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     82c:	0143      	lsls	r3, r0, #5
     82e:	4a0d      	ldr	r2, [pc, #52]	; (864 <usb_d_ep_enable+0x44>)
     830:	5c9b      	ldrb	r3, [r3, r2]
     832:	425a      	negs	r2, r3
     834:	4153      	adcs	r3, r2
     836:	3301      	adds	r3, #1
     838:	0141      	lsls	r1, r0, #5
     83a:	4a0a      	ldr	r2, [pc, #40]	; (864 <usb_d_ep_enable+0x44>)
     83c:	1852      	adds	r2, r2, r1
     83e:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     840:	0020      	movs	r0, r4
     842:	4b09      	ldr	r3, [pc, #36]	; (868 <usb_d_ep_enable+0x48>)
     844:	4798      	blx	r3
	if (rc < 0) {
     846:	2800      	cmp	r0, #0
     848:	db00      	blt.n	84c <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     84a:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     84c:	016d      	lsls	r5, r5, #5
     84e:	4b05      	ldr	r3, [pc, #20]	; (864 <usb_d_ep_enable+0x44>)
     850:	195d      	adds	r5, r3, r5
     852:	2300      	movs	r3, #0
     854:	70ab      	strb	r3, [r5, #2]
     856:	e7f8      	b.n	84a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     858:	2012      	movs	r0, #18
     85a:	4240      	negs	r0, r0
     85c:	e7f5      	b.n	84a <usb_d_ep_enable+0x2a>
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00000489 	.word	0x00000489
     864:	20000084 	.word	0x20000084
     868:	0000178d 	.word	0x0000178d

0000086c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     86c:	b5f0      	push	{r4, r5, r6, r7, lr}
     86e:	46d6      	mov	lr, sl
     870:	464f      	mov	r7, r9
     872:	4646      	mov	r6, r8
     874:	b5c0      	push	{r6, r7, lr}
     876:	b086      	sub	sp, #24
     878:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     87a:	7a07      	ldrb	r7, [r0, #8]
     87c:	0038      	movs	r0, r7
     87e:	4b40      	ldr	r3, [pc, #256]	; (980 <usb_d_ep_transfer+0x114>)
     880:	4798      	blx	r3
     882:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     884:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     886:	6863      	ldr	r3, [r4, #4]
     888:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     88a:	2800      	cmp	r0, #0
     88c:	da00      	bge.n	890 <usb_d_ep_transfer+0x24>
     88e:	e071      	b.n	974 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     890:	a804      	add	r0, sp, #16
     892:	4b3c      	ldr	r3, [pc, #240]	; (984 <usb_d_ep_transfer+0x118>)
     894:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     896:	016a      	lsls	r2, r5, #5
     898:	4b3b      	ldr	r3, [pc, #236]	; (988 <usb_d_ep_transfer+0x11c>)
     89a:	189b      	adds	r3, r3, r2
     89c:	789a      	ldrb	r2, [r3, #2]
     89e:	2317      	movs	r3, #23
     8a0:	446b      	add	r3, sp
     8a2:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	2b01      	cmp	r3, #1
     8a8:	d010      	beq.n	8cc <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     8aa:	a804      	add	r0, sp, #16
     8ac:	4b37      	ldr	r3, [pc, #220]	; (98c <usb_d_ep_transfer+0x120>)
     8ae:	4798      	blx	r3
		switch (state) {
     8b0:	2317      	movs	r3, #23
     8b2:	446b      	add	r3, sp
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2b05      	cmp	r3, #5
     8ba:	d05e      	beq.n	97a <usb_d_ep_transfer+0x10e>
     8bc:	2b06      	cmp	r3, #6
     8be:	d023      	beq.n	908 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     8c0:	2001      	movs	r0, #1
		switch (state) {
     8c2:	2b00      	cmp	r3, #0
     8c4:	d13c      	bne.n	940 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     8c6:	2013      	movs	r0, #19
     8c8:	4240      	negs	r0, r0
     8ca:	e039      	b.n	940 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     8cc:	4b2e      	ldr	r3, [pc, #184]	; (988 <usb_d_ep_transfer+0x11c>)
     8ce:	4699      	mov	r9, r3
     8d0:	016b      	lsls	r3, r5, #5
     8d2:	469a      	mov	sl, r3
     8d4:	464b      	mov	r3, r9
     8d6:	4453      	add	r3, sl
     8d8:	2203      	movs	r2, #3
     8da:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     8dc:	a804      	add	r0, sp, #16
     8de:	4b2b      	ldr	r3, [pc, #172]	; (98c <usb_d_ep_transfer+0x120>)
     8e0:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     8e2:	464b      	mov	r3, r9
     8e4:	4652      	mov	r2, sl
     8e6:	5cd3      	ldrb	r3, [r2, r3]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d010      	beq.n	90e <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     8ec:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     8ee:	1e72      	subs	r2, r6, #1
     8f0:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     8f2:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     8f4:	6822      	ldr	r2, [r4, #0]
     8f6:	9201      	str	r2, [sp, #4]
     8f8:	4642      	mov	r2, r8
     8fa:	9202      	str	r2, [sp, #8]
     8fc:	b27f      	sxtb	r7, r7
     8fe:	2f00      	cmp	r7, #0
     900:	db17      	blt.n	932 <usb_d_ep_transfer+0xc6>
     902:	220f      	movs	r2, #15
     904:	4013      	ands	r3, r2
     906:	e016      	b.n	936 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     908:	2010      	movs	r0, #16
     90a:	4240      	negs	r0, r0
     90c:	e018      	b.n	940 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     90e:	016b      	lsls	r3, r5, #5
     910:	4a1d      	ldr	r2, [pc, #116]	; (988 <usb_d_ep_transfer+0x11c>)
     912:	18d2      	adds	r2, r2, r3
     914:	7cd1      	ldrb	r1, [r2, #19]
     916:	0209      	lsls	r1, r1, #8
     918:	7c93      	ldrb	r3, [r2, #18]
     91a:	185b      	adds	r3, r3, r1
     91c:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     91e:	2b00      	cmp	r3, #0
     920:	d114      	bne.n	94c <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     922:	2304      	movs	r3, #4
     924:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     926:	2200      	movs	r2, #0
			zlp                 = true;
     928:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     92a:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     92c:	6821      	ldr	r1, [r4, #0]
     92e:	9101      	str	r1, [sp, #4]
     930:	9202      	str	r2, [sp, #8]
     932:	2280      	movs	r2, #128	; 0x80
     934:	4313      	orrs	r3, r2
     936:	a801      	add	r0, sp, #4
     938:	7203      	strb	r3, [r0, #8]
     93a:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     93c:	4b14      	ldr	r3, [pc, #80]	; (990 <usb_d_ep_transfer+0x124>)
     93e:	4798      	blx	r3
	return rc;
}
     940:	b006      	add	sp, #24
     942:	bc1c      	pop	{r2, r3, r4}
     944:	4690      	mov	r8, r2
     946:	4699      	mov	r9, r3
     948:	46a2      	mov	sl, r4
     94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     94c:	4642      	mov	r2, r8
     94e:	429a      	cmp	r2, r3
     950:	d900      	bls.n	954 <usb_d_ep_transfer+0xe8>
     952:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     954:	016d      	lsls	r5, r5, #5
     956:	490c      	ldr	r1, [pc, #48]	; (988 <usb_d_ep_transfer+0x11c>)
     958:	194d      	adds	r5, r1, r5
			if (dir) {
     95a:	7b29      	ldrb	r1, [r5, #12]
     95c:	297f      	cmp	r1, #127	; 0x7f
     95e:	d805      	bhi.n	96c <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     960:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     962:	6821      	ldr	r1, [r4, #0]
     964:	9101      	str	r1, [sp, #4]
     966:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     968:	2600      	movs	r6, #0
     96a:	e7ca      	b.n	902 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     96c:	429a      	cmp	r2, r3
     96e:	41b6      	sbcs	r6, r6
     970:	4276      	negs	r6, r6
     972:	e7da      	b.n	92a <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     974:	2012      	movs	r0, #18
     976:	4240      	negs	r0, r0
     978:	e7e2      	b.n	940 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     97a:	2002      	movs	r0, #2
     97c:	e7e0      	b.n	940 <usb_d_ep_transfer+0xd4>
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00000489 	.word	0x00000489
     984:	0000032d 	.word	0x0000032d
     988:	20000084 	.word	0x20000084
     98c:	0000033b 	.word	0x0000033b
     990:	00001c3d 	.word	0x00001c3d

00000994 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     994:	b570      	push	{r4, r5, r6, lr}
     996:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     998:	2900      	cmp	r1, #0
     99a:	d005      	beq.n	9a8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     99c:	2901      	cmp	r1, #1
     99e:	d021      	beq.n	9e4 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     9a0:	2102      	movs	r1, #2
     9a2:	4b13      	ldr	r3, [pc, #76]	; (9f0 <usb_d_ep_halt+0x5c>)
     9a4:	4798      	blx	r3
	}
}
     9a6:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     9a8:	4b12      	ldr	r3, [pc, #72]	; (9f4 <usb_d_ep_halt+0x60>)
     9aa:	4798      	blx	r3
     9ac:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     9ae:	db1c      	blt.n	9ea <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     9b0:	2102      	movs	r1, #2
     9b2:	0020      	movs	r0, r4
     9b4:	4b0e      	ldr	r3, [pc, #56]	; (9f0 <usb_d_ep_halt+0x5c>)
     9b6:	4798      	blx	r3
     9b8:	2800      	cmp	r0, #0
     9ba:	d0f4      	beq.n	9a6 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     9bc:	2100      	movs	r1, #0
     9be:	0020      	movs	r0, r4
     9c0:	4b0b      	ldr	r3, [pc, #44]	; (9f0 <usb_d_ep_halt+0x5c>)
     9c2:	4798      	blx	r3
		if (rc < 0) {
     9c4:	2800      	cmp	r0, #0
     9c6:	dbee      	blt.n	9a6 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     9c8:	016d      	lsls	r5, r5, #5
     9ca:	4b0b      	ldr	r3, [pc, #44]	; (9f8 <usb_d_ep_halt+0x64>)
     9cc:	195d      	adds	r5, r3, r5
     9ce:	2301      	movs	r3, #1
     9d0:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     9d2:	3302      	adds	r3, #2
     9d4:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     9d6:	69eb      	ldr	r3, [r5, #28]
     9d8:	2200      	movs	r2, #0
     9da:	2103      	movs	r1, #3
     9dc:	0020      	movs	r0, r4
     9de:	4798      	blx	r3
	return ERR_NONE;
     9e0:	2000      	movs	r0, #0
     9e2:	e7e0      	b.n	9a6 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     9e4:	4b02      	ldr	r3, [pc, #8]	; (9f0 <usb_d_ep_halt+0x5c>)
     9e6:	4798      	blx	r3
     9e8:	e7dd      	b.n	9a6 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     9ea:	2012      	movs	r0, #18
     9ec:	4240      	negs	r0, r0
     9ee:	e7da      	b.n	9a6 <usb_d_ep_halt+0x12>
     9f0:	00001a69 	.word	0x00001a69
     9f4:	00000489 	.word	0x00000489
     9f8:	20000084 	.word	0x20000084

000009fc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	000d      	movs	r5, r1
     a00:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     a02:	4b0f      	ldr	r3, [pc, #60]	; (a40 <usb_d_ep_register_callback+0x44>)
     a04:	4798      	blx	r3
     a06:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     a08:	1e22      	subs	r2, r4, #0
     a0a:	d008      	beq.n	a1e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     a0c:	2b00      	cmp	r3, #0
     a0e:	db05      	blt.n	a1c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     a10:	2d01      	cmp	r5, #1
     a12:	d00b      	beq.n	a2c <usb_d_ep_register_callback+0x30>
     a14:	2d00      	cmp	r5, #0
     a16:	d004      	beq.n	a22 <usb_d_ep_register_callback+0x26>
     a18:	2d02      	cmp	r5, #2
     a1a:	d00c      	beq.n	a36 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     a1c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     a1e:	4a09      	ldr	r2, [pc, #36]	; (a44 <usb_d_ep_register_callback+0x48>)
     a20:	e7f4      	b.n	a0c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     a22:	0140      	lsls	r0, r0, #5
     a24:	4b08      	ldr	r3, [pc, #32]	; (a48 <usb_d_ep_register_callback+0x4c>)
     a26:	1818      	adds	r0, r3, r0
     a28:	6142      	str	r2, [r0, #20]
		break;
     a2a:	e7f7      	b.n	a1c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     a2c:	0140      	lsls	r0, r0, #5
     a2e:	4b06      	ldr	r3, [pc, #24]	; (a48 <usb_d_ep_register_callback+0x4c>)
     a30:	1818      	adds	r0, r3, r0
     a32:	6182      	str	r2, [r0, #24]
		break;
     a34:	e7f2      	b.n	a1c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     a36:	0140      	lsls	r0, r0, #5
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <usb_d_ep_register_callback+0x4c>)
     a3a:	1818      	adds	r0, r3, r0
     a3c:	61c2      	str	r2, [r0, #28]
		break;
     a3e:	e7ed      	b.n	a1c <usb_d_ep_register_callback+0x20>
     a40:	00000489 	.word	0x00000489
     a44:	000004cd 	.word	0x000004cd
     a48:	20000084 	.word	0x20000084

00000a4c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a4c:	2800      	cmp	r0, #0
     a4e:	d100      	bne.n	a52 <assert+0x6>
		__asm("BKPT #0");
     a50:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a52:	4770      	bx	lr

00000a54 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a54:	6803      	ldr	r3, [r0, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d00a      	beq.n	a70 <is_list_element+0x1c>
		if (it == element) {
     a5a:	428b      	cmp	r3, r1
     a5c:	d00a      	beq.n	a74 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	2b00      	cmp	r3, #0
     a62:	d003      	beq.n	a6c <is_list_element+0x18>
		if (it == element) {
     a64:	4299      	cmp	r1, r3
     a66:	d1fa      	bne.n	a5e <is_list_element+0xa>
			return true;
     a68:	2001      	movs	r0, #1
     a6a:	e000      	b.n	a6e <is_list_element+0x1a>
		}
	}

	return false;
     a6c:	2000      	movs	r0, #0
}
     a6e:	4770      	bx	lr
	return false;
     a70:	2000      	movs	r0, #0
     a72:	e7fc      	b.n	a6e <is_list_element+0x1a>
			return true;
     a74:	2001      	movs	r0, #1
     a76:	e7fa      	b.n	a6e <is_list_element+0x1a>

00000a78 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     a78:	b570      	push	{r4, r5, r6, lr}
     a7a:	0004      	movs	r4, r0
     a7c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     a7e:	4b06      	ldr	r3, [pc, #24]	; (a98 <list_insert_as_head+0x20>)
     a80:	4798      	blx	r3
     a82:	2301      	movs	r3, #1
     a84:	4058      	eors	r0, r3
     a86:	b2c0      	uxtb	r0, r0
     a88:	2239      	movs	r2, #57	; 0x39
     a8a:	4904      	ldr	r1, [pc, #16]	; (a9c <list_insert_as_head+0x24>)
     a8c:	4b04      	ldr	r3, [pc, #16]	; (aa0 <list_insert_as_head+0x28>)
     a8e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     a90:	6823      	ldr	r3, [r4, #0]
     a92:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     a94:	6025      	str	r5, [r4, #0]
}
     a96:	bd70      	pop	{r4, r5, r6, pc}
     a98:	00000a55 	.word	0x00000a55
     a9c:	00002cbc 	.word	0x00002cbc
     aa0:	00000a4d 	.word	0x00000a4d

00000aa4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     aa4:	6803      	ldr	r3, [r0, #0]
     aa6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     aa8:	6001      	str	r1, [r0, #0]
}
     aaa:	4770      	bx	lr

00000aac <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     aac:	b570      	push	{r4, r5, r6, lr}
     aae:	0005      	movs	r5, r0
     ab0:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     ab2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     ab4:	4b0a      	ldr	r3, [pc, #40]	; (ae0 <list_insert_at_end+0x34>)
     ab6:	4798      	blx	r3
     ab8:	2301      	movs	r3, #1
     aba:	4058      	eors	r0, r3
     abc:	b2c0      	uxtb	r0, r0
     abe:	224f      	movs	r2, #79	; 0x4f
     ac0:	4908      	ldr	r1, [pc, #32]	; (ae4 <list_insert_at_end+0x38>)
     ac2:	4b09      	ldr	r3, [pc, #36]	; (ae8 <list_insert_at_end+0x3c>)
     ac4:	4798      	blx	r3

	if (!list->head) {
     ac6:	682b      	ldr	r3, [r5, #0]
     ac8:	2b00      	cmp	r3, #0
     aca:	d103      	bne.n	ad4 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     acc:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     ace:	6033      	str	r3, [r6, #0]
		return;
     ad0:	e005      	b.n	ade <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     ad2:	001c      	movs	r4, r3
	while (it->next) {
     ad4:	6823      	ldr	r3, [r4, #0]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d1fb      	bne.n	ad2 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     ada:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     adc:	6033      	str	r3, [r6, #0]
}
     ade:	bd70      	pop	{r4, r5, r6, pc}
     ae0:	00000a55 	.word	0x00000a55
     ae4:	00002cbc 	.word	0x00002cbc
     ae8:	00000a4d 	.word	0x00000a4d

00000aec <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     aec:	6803      	ldr	r3, [r0, #0]
     aee:	2b00      	cmp	r3, #0
     af0:	d001      	beq.n	af6 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     af2:	681a      	ldr	r2, [r3, #0]
     af4:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     af6:	0018      	movs	r0, r3
     af8:	4770      	bx	lr
	...

00000afc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     afc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     afe:	4b06      	ldr	r3, [pc, #24]	; (b18 <_init_chip+0x1c>)
     b00:	685a      	ldr	r2, [r3, #4]
     b02:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     b04:	4b05      	ldr	r3, [pc, #20]	; (b1c <_init_chip+0x20>)
     b06:	4798      	blx	r3
	_sysctrl_init_sources();
     b08:	4b05      	ldr	r3, [pc, #20]	; (b20 <_init_chip+0x24>)
     b0a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <_init_chip+0x28>)
     b0e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b10:	20ff      	movs	r0, #255	; 0xff
     b12:	4b05      	ldr	r3, [pc, #20]	; (b28 <_init_chip+0x2c>)
     b14:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     b16:	bd10      	pop	{r4, pc}
     b18:	41004000 	.word	0x41004000
     b1c:	00000bc1 	.word	0x00000bc1
     b20:	00000be1 	.word	0x00000be1
     b24:	00000c25 	.word	0x00000c25
     b28:	00000b2d 	.word	0x00000b2d

00000b2c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     b2c:	07c3      	lsls	r3, r0, #31
     b2e:	d50a      	bpl.n	b46 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     b30:	4b1c      	ldr	r3, [pc, #112]	; (ba4 <_gclk_init_generators_by_fref+0x78>)
     b32:	2280      	movs	r2, #128	; 0x80
     b34:	0052      	lsls	r2, r2, #1
     b36:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b38:	2283      	movs	r2, #131	; 0x83
     b3a:	0252      	lsls	r2, r2, #9
     b3c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b3e:	001a      	movs	r2, r3
     b40:	7853      	ldrb	r3, [r2, #1]
     b42:	09db      	lsrs	r3, r3, #7
     b44:	d1fc      	bne.n	b40 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     b46:	0783      	lsls	r3, r0, #30
     b48:	d509      	bpl.n	b5e <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     b4a:	4b16      	ldr	r3, [pc, #88]	; (ba4 <_gclk_init_generators_by_fref+0x78>)
     b4c:	2202      	movs	r2, #2
     b4e:	32ff      	adds	r2, #255	; 0xff
     b50:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b52:	4a15      	ldr	r2, [pc, #84]	; (ba8 <_gclk_init_generators_by_fref+0x7c>)
     b54:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b56:	001a      	movs	r2, r3
     b58:	7853      	ldrb	r3, [r2, #1]
     b5a:	09db      	lsrs	r3, r3, #7
     b5c:	d1fc      	bne.n	b58 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     b5e:	0703      	lsls	r3, r0, #28
     b60:	d508      	bpl.n	b74 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     b62:	4b10      	ldr	r3, [pc, #64]	; (ba4 <_gclk_init_generators_by_fref+0x78>)
     b64:	4a11      	ldr	r2, [pc, #68]	; (bac <_gclk_init_generators_by_fref+0x80>)
     b66:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b68:	4a11      	ldr	r2, [pc, #68]	; (bb0 <_gclk_init_generators_by_fref+0x84>)
     b6a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b6c:	001a      	movs	r2, r3
     b6e:	7853      	ldrb	r3, [r2, #1]
     b70:	09db      	lsrs	r3, r3, #7
     b72:	d1fc      	bne.n	b6e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
     b74:	0643      	lsls	r3, r0, #25
     b76:	d509      	bpl.n	b8c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
     b78:	4b0a      	ldr	r3, [pc, #40]	; (ba4 <_gclk_init_generators_by_fref+0x78>)
     b7a:	2283      	movs	r2, #131	; 0x83
     b7c:	0052      	lsls	r2, r2, #1
     b7e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b80:	4a0c      	ldr	r2, [pc, #48]	; (bb4 <_gclk_init_generators_by_fref+0x88>)
     b82:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b84:	001a      	movs	r2, r3
     b86:	7853      	ldrb	r3, [r2, #1]
     b88:	09db      	lsrs	r3, r3, #7
     b8a:	d1fc      	bne.n	b86 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
     b8c:	0603      	lsls	r3, r0, #24
     b8e:	d508      	bpl.n	ba2 <_gclk_init_generators_by_fref+0x76>
	((Gclk *)hw)->GENDIV.reg = data;
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <_gclk_init_generators_by_fref+0x78>)
     b92:	4a09      	ldr	r2, [pc, #36]	; (bb8 <_gclk_init_generators_by_fref+0x8c>)
     b94:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b96:	4a09      	ldr	r2, [pc, #36]	; (bbc <_gclk_init_generators_by_fref+0x90>)
     b98:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b9a:	001a      	movs	r2, r3
     b9c:	7853      	ldrb	r3, [r2, #1]
     b9e:	09db      	lsrs	r3, r3, #7
     ba0:	d1fc      	bne.n	b9c <_gclk_init_generators_by_fref+0x70>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     ba2:	4770      	bx	lr
     ba4:	40000c00 	.word	0x40000c00
     ba8:	00090701 	.word	0x00090701
     bac:	00000803 	.word	0x00000803
     bb0:	00010603 	.word	0x00010603
     bb4:	00010306 	.word	0x00010306
     bb8:	00002007 	.word	0x00002007
     bbc:	00090307 	.word	0x00090307

00000bc0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     bc0:	4b06      	ldr	r3, [pc, #24]	; (bdc <_pm_init+0x1c>)
     bc2:	7a1a      	ldrb	r2, [r3, #8]
     bc4:	b2d2      	uxtb	r2, r2
     bc6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     bc8:	7a5a      	ldrb	r2, [r3, #9]
     bca:	b2d2      	uxtb	r2, r2
     bcc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     bce:	7a9a      	ldrb	r2, [r3, #10]
     bd0:	b2d2      	uxtb	r2, r2
     bd2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     bd4:	7ada      	ldrb	r2, [r3, #11]
     bd6:	b2d2      	uxtb	r2, r2
     bd8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     bda:	4770      	bx	lr
     bdc:	40000400 	.word	0x40000400

00000be0 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     be0:	4b0e      	ldr	r3, [pc, #56]	; (c1c <_sysctrl_init_sources+0x3c>)
     be2:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     be4:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     be6:	480e      	ldr	r0, [pc, #56]	; (c20 <_sysctrl_init_sources+0x40>)
     be8:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     bea:	0f92      	lsrs	r2, r2, #30
     bec:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     bee:	2002      	movs	r0, #2
     bf0:	4302      	orrs	r2, r0
     bf2:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     bf4:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     bf6:	699a      	ldr	r2, [r3, #24]
     bf8:	4302      	orrs	r2, r0
     bfa:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     bfc:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     bfe:	211f      	movs	r1, #31
     c00:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     c02:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     c04:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     c06:	2208      	movs	r2, #8
     c08:	68cb      	ldr	r3, [r1, #12]
     c0a:	421a      	tst	r2, r3
     c0c:	d0fc      	beq.n	c08 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     c0e:	4a03      	ldr	r2, [pc, #12]	; (c1c <_sysctrl_init_sources+0x3c>)
     c10:	6a13      	ldr	r3, [r2, #32]
     c12:	2180      	movs	r1, #128	; 0x80
     c14:	430b      	orrs	r3, r1
     c16:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     c18:	4770      	bx	lr
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	40000800 	.word	0x40000800
     c20:	0fff0000 	.word	0x0fff0000

00000c24 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     c24:	2202      	movs	r2, #2
     c26:	4b19      	ldr	r3, [pc, #100]	; (c8c <_sysctrl_init_referenced_generators+0x68>)
     c28:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     c2a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     c2c:	320e      	adds	r2, #14
     c2e:	68cb      	ldr	r3, [r1, #12]
     c30:	421a      	tst	r2, r3
     c32:	d0fc      	beq.n	c2e <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     c34:	4a16      	ldr	r2, [pc, #88]	; (c90 <_sysctrl_init_referenced_generators+0x6c>)
     c36:	4b15      	ldr	r3, [pc, #84]	; (c8c <_sysctrl_init_referenced_generators+0x68>)
     c38:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     c3a:	4b16      	ldr	r3, [pc, #88]	; (c94 <_sysctrl_init_referenced_generators+0x70>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	0e9b      	lsrs	r3, r3, #26
     c40:	2b3f      	cmp	r3, #63	; 0x3f
     c42:	d01a      	beq.n	c7a <_sysctrl_init_referenced_generators+0x56>
     c44:	029b      	lsls	r3, r3, #10
     c46:	2280      	movs	r2, #128	; 0x80
     c48:	0092      	lsls	r2, r2, #2
     c4a:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     c4c:	4a0f      	ldr	r2, [pc, #60]	; (c8c <_sysctrl_init_referenced_generators+0x68>)
     c4e:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     c50:	2393      	movs	r3, #147	; 0x93
     c52:	005b      	lsls	r3, r3, #1
     c54:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     c56:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     c58:	075b      	lsls	r3, r3, #29
     c5a:	d511      	bpl.n	c80 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     c5c:	0011      	movs	r1, r2
	tmp &= mask;
     c5e:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     c60:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     c62:	421a      	tst	r2, r3
     c64:	d0fc      	beq.n	c60 <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     c66:	4a0c      	ldr	r2, [pc, #48]	; (c98 <_sysctrl_init_referenced_generators+0x74>)
     c68:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     c6a:	09db      	lsrs	r3, r3, #7
     c6c:	d1fc      	bne.n	c68 <_sysctrl_init_referenced_generators+0x44>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     c6e:	4a07      	ldr	r2, [pc, #28]	; (c8c <_sysctrl_init_referenced_generators+0x68>)
     c70:	6993      	ldr	r3, [r2, #24]
     c72:	2102      	movs	r1, #2
     c74:	438b      	bics	r3, r1
     c76:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     c78:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     c7a:	23fc      	movs	r3, #252	; 0xfc
     c7c:	01db      	lsls	r3, r3, #7
     c7e:	e7e5      	b.n	c4c <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     c80:	4902      	ldr	r1, [pc, #8]	; (c8c <_sysctrl_init_referenced_generators+0x68>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     c82:	2210      	movs	r2, #16
     c84:	68cb      	ldr	r3, [r1, #12]
     c86:	421a      	tst	r2, r3
     c88:	d0fc      	beq.n	c84 <_sysctrl_init_referenced_generators+0x60>
     c8a:	e7ec      	b.n	c66 <_sysctrl_init_referenced_generators+0x42>
     c8c:	40000800 	.word	0x40000800
     c90:	0401bb80 	.word	0x0401bb80
     c94:	00806024 	.word	0x00806024
     c98:	40000c00 	.word	0x40000c00

00000c9c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c9e:	0007      	movs	r7, r0
     ca0:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
     ca2:	4b3c      	ldr	r3, [pc, #240]	; (d94 <_timer_init+0xf8>)
     ca4:	18cd      	adds	r5, r1, r3
     ca6:	0aad      	lsrs	r5, r5, #10
     ca8:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
     caa:	2d00      	cmp	r5, #0
     cac:	d051      	beq.n	d52 <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
     cae:	229f      	movs	r2, #159	; 0x9f
     cb0:	0052      	lsls	r2, r2, #1
     cb2:	4939      	ldr	r1, [pc, #228]	; (d98 <_timer_init+0xfc>)
     cb4:	2000      	movs	r0, #0
     cb6:	4b39      	ldr	r3, [pc, #228]	; (d9c <_timer_init+0x100>)
     cb8:	4798      	blx	r3
	return -1;
     cba:	2601      	movs	r6, #1
     cbc:	4276      	negs	r6, r6
	device->hw = hw;
     cbe:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
     cc0:	228b      	movs	r2, #139	; 0x8b
     cc2:	4935      	ldr	r1, [pc, #212]	; (d98 <_timer_init+0xfc>)
     cc4:	2001      	movs	r0, #1
     cc6:	4b35      	ldr	r3, [pc, #212]	; (d9c <_timer_init+0x100>)
     cc8:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
     cca:	7be3      	ldrb	r3, [r4, #15]
     ccc:	09db      	lsrs	r3, r3, #7
     cce:	d1fc      	bne.n	cca <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     cd0:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
     cd2:	079b      	lsls	r3, r3, #30
     cd4:	d504      	bpl.n	ce0 <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     cd6:	2300      	movs	r3, #0
     cd8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
     cda:	7be3      	ldrb	r3, [r4, #15]
     cdc:	09db      	lsrs	r3, r3, #7
     cde:	d1fc      	bne.n	cda <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     ce0:	2301      	movs	r3, #1
     ce2:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
     ce4:	7be3      	ldrb	r3, [r4, #15]
     ce6:	09db      	lsrs	r3, r3, #7
     ce8:	d1fc      	bne.n	ce4 <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
     cea:	00b3      	lsls	r3, r6, #2
     cec:	199b      	adds	r3, r3, r6
     cee:	009a      	lsls	r2, r3, #2
     cf0:	4b2b      	ldr	r3, [pc, #172]	; (da0 <_timer_init+0x104>)
     cf2:	189b      	adds	r3, r3, r2
     cf4:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     cf6:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
     cf8:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
     cfa:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
     cfc:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
     cfe:	8163      	strh	r3, [r4, #10]
     d00:	230c      	movs	r3, #12
     d02:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
     d04:	2b08      	cmp	r3, #8
     d06:	d026      	beq.n	d56 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
     d08:	2b00      	cmp	r3, #0
     d0a:	d12e      	bne.n	d6a <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
     d0c:	00b3      	lsls	r3, r6, #2
     d0e:	199b      	adds	r3, r3, r6
     d10:	009b      	lsls	r3, r3, #2
     d12:	4a23      	ldr	r2, [pc, #140]	; (da0 <_timer_init+0x104>)
     d14:	18d3      	adds	r3, r2, r3
     d16:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     d18:	8323      	strh	r3, [r4, #24]
     d1a:	2300      	movs	r3, #0
     d1c:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
     d1e:	2301      	movs	r3, #1
     d20:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
     d22:	4b20      	ldr	r3, [pc, #128]	; (da4 <_timer_init+0x108>)
     d24:	429c      	cmp	r4, r3
     d26:	d031      	beq.n	d8c <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
     d28:	3512      	adds	r5, #18
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     d2a:	b2eb      	uxtb	r3, r5
     d2c:	062a      	lsls	r2, r5, #24
     d2e:	d40e      	bmi.n	d4e <_timer_init+0xb2>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d30:	221f      	movs	r2, #31
     d32:	401a      	ands	r2, r3
     d34:	2301      	movs	r3, #1
     d36:	4093      	lsls	r3, r2
     d38:	4a1b      	ldr	r2, [pc, #108]	; (da8 <_timer_init+0x10c>)
     d3a:	2180      	movs	r1, #128	; 0x80
     d3c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     d3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d42:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d46:	3101      	adds	r1, #1
     d48:	31ff      	adds	r1, #255	; 0xff
     d4a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d4c:	6013      	str	r3, [r2, #0]
}
     d4e:	2000      	movs	r0, #0
     d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
     d52:	2600      	movs	r6, #0
     d54:	e7b3      	b.n	cbe <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
     d56:	00b3      	lsls	r3, r6, #2
     d58:	199e      	adds	r6, r3, r6
     d5a:	00b6      	lsls	r6, r6, #2
     d5c:	4b10      	ldr	r3, [pc, #64]	; (da0 <_timer_init+0x104>)
     d5e:	199e      	adds	r6, r3, r6
     d60:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     d62:	61a3      	str	r3, [r4, #24]
     d64:	2300      	movs	r3, #0
     d66:	61e3      	str	r3, [r4, #28]
     d68:	e7d9      	b.n	d1e <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
     d6a:	2b04      	cmp	r3, #4
     d6c:	d1d7      	bne.n	d1e <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
     d6e:	480c      	ldr	r0, [pc, #48]	; (da0 <_timer_init+0x104>)
     d70:	00b3      	lsls	r3, r6, #2
     d72:	199a      	adds	r2, r3, r6
     d74:	0092      	lsls	r2, r2, #2
     d76:	1882      	adds	r2, r0, r2
     d78:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
     d7a:	7622      	strb	r2, [r4, #24]
     d7c:	2200      	movs	r2, #0
     d7e:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
     d80:	199b      	adds	r3, r3, r6
     d82:	009b      	lsls	r3, r3, #2
     d84:	18c3      	adds	r3, r0, r3
     d86:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
     d88:	7523      	strb	r3, [r4, #20]
     d8a:	e7c8      	b.n	d1e <_timer_init+0x82>
		_tc3_dev = (struct _timer_device *)dev;
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <_timer_init+0x110>)
     d8e:	601f      	str	r7, [r3, #0]
     d90:	e7ca      	b.n	d28 <_timer_init+0x8c>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	bdffd400 	.word	0xbdffd400
     d98:	00002cf0 	.word	0x00002cf0
     d9c:	00000a4d 	.word	0x00000a4d
     da0:	00002cdc 	.word	0x00002cdc
     da4:	42002c00 	.word	0x42002c00
     da8:	e000e100 	.word	0xe000e100
     dac:	20000104 	.word	0x20000104

00000db0 <_tc_get_timer>:
}
     db0:	2000      	movs	r0, #0
     db2:	4770      	bx	lr

00000db4 <TC3_Handler>:
{
     db4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
     db6:	4b06      	ldr	r3, [pc, #24]	; (dd0 <TC3_Handler+0x1c>)
     db8:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
     dba:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     dbc:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     dbe:	07d2      	lsls	r2, r2, #31
     dc0:	d400      	bmi.n	dc4 <TC3_Handler+0x10>
}
     dc2:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
     dc4:	2201      	movs	r2, #1
     dc6:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
     dc8:	6803      	ldr	r3, [r0, #0]
     dca:	4798      	blx	r3
}
     dcc:	e7f9      	b.n	dc2 <TC3_Handler+0xe>
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	20000104 	.word	0x20000104

00000dd4 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     dd4:	2000      	movs	r0, #0
     dd6:	4770      	bx	lr

00000dd8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     dd8:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     dda:	7c83      	ldrb	r3, [r0, #18]
     ddc:	220f      	movs	r2, #15
     dde:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     de0:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     de2:	3a08      	subs	r2, #8
     de4:	400a      	ands	r2, r1
     de6:	2a01      	cmp	r2, #1
     de8:	d00b      	beq.n	e02 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     dea:	015a      	lsls	r2, r3, #5
     dec:	4919      	ldr	r1, [pc, #100]	; (e54 <_usb_d_dev_handle_setup+0x7c>)
     dee:	468c      	mov	ip, r1
     df0:	4462      	add	r2, ip
     df2:	2110      	movs	r1, #16
     df4:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     df6:	015b      	lsls	r3, r3, #5
     df8:	4a17      	ldr	r2, [pc, #92]	; (e58 <_usb_d_dev_handle_setup+0x80>)
     dfa:	4694      	mov	ip, r2
     dfc:	4463      	add	r3, ip
     dfe:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     e00:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     e02:	064a      	lsls	r2, r1, #25
     e04:	d50e      	bpl.n	e24 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     e06:	7cc2      	ldrb	r2, [r0, #19]
     e08:	2140      	movs	r1, #64	; 0x40
     e0a:	438a      	bics	r2, r1
     e0c:	74c2      	strb	r2, [r0, #19]
     e0e:	015a      	lsls	r2, r3, #5
     e10:	4c12      	ldr	r4, [pc, #72]	; (e5c <_usb_d_dev_handle_setup+0x84>)
     e12:	46a4      	mov	ip, r4
     e14:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     e16:	2580      	movs	r5, #128	; 0x80
     e18:	2482      	movs	r4, #130	; 0x82
     e1a:	0064      	lsls	r4, r4, #1
     e1c:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e1e:	2406      	movs	r4, #6
     e20:	34ff      	adds	r4, #255	; 0xff
     e22:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     e24:	7cc2      	ldrb	r2, [r0, #19]
     e26:	2108      	movs	r1, #8
     e28:	438a      	bics	r2, r1
     e2a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     e2c:	490c      	ldr	r1, [pc, #48]	; (e60 <_usb_d_dev_handle_setup+0x88>)
     e2e:	015a      	lsls	r2, r3, #5
     e30:	188c      	adds	r4, r1, r2
     e32:	2500      	movs	r5, #0
     e34:	72a5      	strb	r5, [r4, #10]
     e36:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e38:	0013      	movs	r3, r2
     e3a:	4c06      	ldr	r4, [pc, #24]	; (e54 <_usb_d_dev_handle_setup+0x7c>)
     e3c:	46a4      	mov	ip, r4
     e3e:	4463      	add	r3, ip
     e40:	246f      	movs	r4, #111	; 0x6f
     e42:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e44:	4b04      	ldr	r3, [pc, #16]	; (e58 <_usb_d_dev_handle_setup+0x80>)
     e46:	469c      	mov	ip, r3
     e48:	4462      	add	r2, ip
     e4a:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     e4c:	7c80      	ldrb	r0, [r0, #18]
     e4e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     e50:	4798      	blx	r3
     e52:	e7d5      	b.n	e00 <_usb_d_dev_handle_setup+0x28>
     e54:	41005100 	.word	0x41005100
     e58:	41005108 	.word	0x41005108
     e5c:	41005000 	.word	0x41005000
     e60:	20000108 	.word	0x20000108

00000e64 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     e64:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     e66:	2220      	movs	r2, #32
     e68:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     e6a:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e6c:	7c81      	ldrb	r1, [r0, #18]
     e6e:	230f      	movs	r3, #15
     e70:	400b      	ands	r3, r1
     e72:	015b      	lsls	r3, r3, #5
     e74:	4905      	ldr	r1, [pc, #20]	; (e8c <_usb_d_dev_handle_stall+0x28>)
     e76:	468c      	mov	ip, r1
     e78:	4463      	add	r3, ip
     e7a:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     e7c:	6882      	ldr	r2, [r0, #8]
     e7e:	7c80      	ldrb	r0, [r0, #18]
     e80:	4b03      	ldr	r3, [pc, #12]	; (e90 <_usb_d_dev_handle_stall+0x2c>)
     e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e84:	2101      	movs	r1, #1
     e86:	4798      	blx	r3
}
     e88:	bd10      	pop	{r4, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	41005108 	.word	0x41005108
     e90:	20000108 	.word	0x20000108

00000e94 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     e94:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     e96:	7c83      	ldrb	r3, [r0, #18]
     e98:	2bff      	cmp	r3, #255	; 0xff
     e9a:	d002      	beq.n	ea2 <_usb_d_dev_trans_done+0xe>
     e9c:	7cc2      	ldrb	r2, [r0, #19]
     e9e:	0652      	lsls	r2, r2, #25
     ea0:	d400      	bmi.n	ea4 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     ea2:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     ea4:	7cc2      	ldrb	r2, [r0, #19]
     ea6:	2440      	movs	r4, #64	; 0x40
     ea8:	43a2      	bics	r2, r4
     eaa:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     eac:	6882      	ldr	r2, [r0, #8]
     eae:	4802      	ldr	r0, [pc, #8]	; (eb8 <_usb_d_dev_trans_done+0x24>)
     eb0:	6f04      	ldr	r4, [r0, #112]	; 0x70
     eb2:	0018      	movs	r0, r3
     eb4:	47a0      	blx	r4
     eb6:	e7f4      	b.n	ea2 <_usb_d_dev_trans_done+0xe>
     eb8:	20000108 	.word	0x20000108

00000ebc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     ebc:	b530      	push	{r4, r5, lr}
     ebe:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ec0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     ec2:	ac01      	add	r4, sp, #4
     ec4:	2525      	movs	r5, #37	; 0x25
     ec6:	7025      	strb	r5, [r4, #0]
     ec8:	3525      	adds	r5, #37	; 0x25
     eca:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     ecc:	2bff      	cmp	r3, #255	; 0xff
     ece:	d01b      	beq.n	f08 <_usb_d_dev_trans_stop+0x4c>
     ed0:	7cc4      	ldrb	r4, [r0, #19]
     ed2:	0664      	lsls	r4, r4, #25
     ed4:	d518      	bpl.n	f08 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ed6:	240f      	movs	r4, #15
     ed8:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
     eda:	2900      	cmp	r1, #0
     edc:	d016      	beq.n	f0c <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     ede:	015c      	lsls	r4, r3, #5
     ee0:	4d0e      	ldr	r5, [pc, #56]	; (f1c <_usb_d_dev_trans_stop+0x60>)
     ee2:	46ac      	mov	ip, r5
     ee4:	4464      	add	r4, ip
     ee6:	2580      	movs	r5, #128	; 0x80
     ee8:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     eea:	ac01      	add	r4, sp, #4
     eec:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     eee:	0159      	lsls	r1, r3, #5
     ef0:	4d0a      	ldr	r5, [pc, #40]	; (f1c <_usb_d_dev_trans_stop+0x60>)
     ef2:	46ac      	mov	ip, r5
     ef4:	4461      	add	r1, ip
     ef6:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     ef8:	015b      	lsls	r3, r3, #5
     efa:	4909      	ldr	r1, [pc, #36]	; (f20 <_usb_d_dev_trans_stop+0x64>)
     efc:	468c      	mov	ip, r1
     efe:	4463      	add	r3, ip
     f00:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     f02:	0011      	movs	r1, r2
     f04:	4b07      	ldr	r3, [pc, #28]	; (f24 <_usb_d_dev_trans_stop+0x68>)
     f06:	4798      	blx	r3
}
     f08:	b003      	add	sp, #12
     f0a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     f0c:	015c      	lsls	r4, r3, #5
     f0e:	4d03      	ldr	r5, [pc, #12]	; (f1c <_usb_d_dev_trans_stop+0x60>)
     f10:	46ac      	mov	ip, r5
     f12:	4464      	add	r4, ip
     f14:	2540      	movs	r5, #64	; 0x40
     f16:	7165      	strb	r5, [r4, #5]
     f18:	e7e7      	b.n	eea <_usb_d_dev_trans_stop+0x2e>
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	41005100 	.word	0x41005100
     f20:	41005108 	.word	0x41005108
     f24:	00000e95 	.word	0x00000e95

00000f28 <_usb_d_dev_handle_trfail>:
{
     f28:	b570      	push	{r4, r5, r6, lr}
     f2a:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     f2c:	7c83      	ldrb	r3, [r0, #18]
     f2e:	220f      	movs	r2, #15
     f30:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     f32:	aa01      	add	r2, sp, #4
     f34:	2404      	movs	r4, #4
     f36:	7014      	strb	r4, [r2, #0]
     f38:	3404      	adds	r4, #4
     f3a:	7054      	strb	r4, [r2, #1]
     f3c:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
     f3e:	2900      	cmp	r1, #0
     f40:	d031      	beq.n	fa6 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     f42:	001a      	movs	r2, r3
     f44:	3208      	adds	r2, #8
     f46:	0152      	lsls	r2, r2, #5
     f48:	4c32      	ldr	r4, [pc, #200]	; (1014 <_usb_d_dev_handle_trfail+0xec>)
     f4a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     f4c:	0664      	lsls	r4, r4, #25
     f4e:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
     f50:	010a      	lsls	r2, r1, #4
     f52:	1952      	adds	r2, r2, r5
     f54:	4d30      	ldr	r5, [pc, #192]	; (1018 <_usb_d_dev_handle_trfail+0xf0>)
     f56:	18aa      	adds	r2, r5, r2
     f58:	7a95      	ldrb	r5, [r2, #10]
     f5a:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     f5c:	2c02      	cmp	r4, #2
     f5e:	d02a      	beq.n	fb6 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
     f60:	07ac      	lsls	r4, r5, #30
     f62:	d541      	bpl.n	fe8 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f64:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     f66:	7a94      	ldrb	r4, [r2, #10]
     f68:	2602      	movs	r6, #2
     f6a:	43b4      	bics	r4, r6
     f6c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     f6e:	aa01      	add	r2, sp, #4
     f70:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f72:	015a      	lsls	r2, r3, #5
     f74:	4e29      	ldr	r6, [pc, #164]	; (101c <_usb_d_dev_handle_trfail+0xf4>)
     f76:	46b4      	mov	ip, r6
     f78:	4462      	add	r2, ip
     f7a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f7c:	015b      	lsls	r3, r3, #5
     f7e:	4a28      	ldr	r2, [pc, #160]	; (1020 <_usb_d_dev_handle_trfail+0xf8>)
     f80:	4694      	mov	ip, r2
     f82:	4463      	add	r3, ip
     f84:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     f86:	2307      	movs	r3, #7
     f88:	402b      	ands	r3, r5
     f8a:	2b01      	cmp	r3, #1
     f8c:	d13f      	bne.n	100e <_usb_d_dev_handle_trfail+0xe6>
     f8e:	7cc3      	ldrb	r3, [r0, #19]
     f90:	065b      	lsls	r3, r3, #25
     f92:	d53c      	bpl.n	100e <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     f94:	7cc3      	ldrb	r3, [r0, #19]
     f96:	09db      	lsrs	r3, r3, #7
     f98:	4299      	cmp	r1, r3
     f9a:	d038      	beq.n	100e <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     f9c:	2200      	movs	r2, #0
     f9e:	0019      	movs	r1, r3
     fa0:	4b20      	ldr	r3, [pc, #128]	; (1024 <_usb_d_dev_handle_trfail+0xfc>)
     fa2:	4798      	blx	r3
     fa4:	e033      	b.n	100e <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     fa6:	001a      	movs	r2, r3
     fa8:	3208      	adds	r2, #8
     faa:	0152      	lsls	r2, r2, #5
     fac:	4c19      	ldr	r4, [pc, #100]	; (1014 <_usb_d_dev_handle_trfail+0xec>)
     fae:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     fb0:	2207      	movs	r2, #7
     fb2:	4014      	ands	r4, r2
     fb4:	e7cc      	b.n	f50 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     fb6:	07ec      	lsls	r4, r5, #31
     fb8:	d5d2      	bpl.n	f60 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     fba:	7a94      	ldrb	r4, [r2, #10]
     fbc:	2501      	movs	r5, #1
     fbe:	43ac      	bics	r4, r5
     fc0:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     fc2:	aa01      	add	r2, sp, #4
     fc4:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     fc6:	015a      	lsls	r2, r3, #5
     fc8:	4d14      	ldr	r5, [pc, #80]	; (101c <_usb_d_dev_handle_trfail+0xf4>)
     fca:	46ac      	mov	ip, r5
     fcc:	4462      	add	r2, ip
     fce:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fd0:	015b      	lsls	r3, r3, #5
     fd2:	4a13      	ldr	r2, [pc, #76]	; (1020 <_usb_d_dev_handle_trfail+0xf8>)
     fd4:	4694      	mov	ip, r2
     fd6:	4463      	add	r3, ip
     fd8:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     fda:	1e4b      	subs	r3, r1, #1
     fdc:	4199      	sbcs	r1, r3
     fde:	b2c9      	uxtb	r1, r1
     fe0:	2204      	movs	r2, #4
     fe2:	4b10      	ldr	r3, [pc, #64]	; (1024 <_usb_d_dev_handle_trfail+0xfc>)
     fe4:	4798      	blx	r3
     fe6:	e012      	b.n	100e <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
     fe8:	005a      	lsls	r2, r3, #1
     fea:	1852      	adds	r2, r2, r1
     fec:	0112      	lsls	r2, r2, #4
     fee:	480a      	ldr	r0, [pc, #40]	; (1018 <_usb_d_dev_handle_trfail+0xf0>)
     ff0:	1882      	adds	r2, r0, r2
     ff2:	2000      	movs	r0, #0
     ff4:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     ff6:	aa01      	add	r2, sp, #4
     ff8:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ffa:	015a      	lsls	r2, r3, #5
     ffc:	4807      	ldr	r0, [pc, #28]	; (101c <_usb_d_dev_handle_trfail+0xf4>)
     ffe:	4684      	mov	ip, r0
    1000:	4462      	add	r2, ip
    1002:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1004:	015b      	lsls	r3, r3, #5
    1006:	4a06      	ldr	r2, [pc, #24]	; (1020 <_usb_d_dev_handle_trfail+0xf8>)
    1008:	4694      	mov	ip, r2
    100a:	4463      	add	r3, ip
    100c:	7019      	strb	r1, [r3, #0]
}
    100e:	b002      	add	sp, #8
    1010:	bd70      	pop	{r4, r5, r6, pc}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	41005000 	.word	0x41005000
    1018:	20000108 	.word	0x20000108
    101c:	41005100 	.word	0x41005100
    1020:	41005108 	.word	0x41005108
    1024:	00000ebd 	.word	0x00000ebd

00001028 <_usb_d_dev_reset_epts>:
{
    1028:	b5f0      	push	{r4, r5, r6, r7, lr}
    102a:	46c6      	mov	lr, r8
    102c:	b500      	push	{lr}
    102e:	4d0c      	ldr	r5, [pc, #48]	; (1060 <_usb_d_dev_reset_epts+0x38>)
    1030:	002c      	movs	r4, r5
    1032:	3474      	adds	r4, #116	; 0x74
    1034:	3529      	adds	r5, #41	; 0x29
    1036:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1038:	4b0a      	ldr	r3, [pc, #40]	; (1064 <_usb_d_dev_reset_epts+0x3c>)
    103a:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    103c:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    103e:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1040:	2103      	movs	r1, #3
    1042:	0020      	movs	r0, r4
    1044:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1046:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1048:	74e6      	strb	r6, [r4, #19]
    104a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    104c:	42ac      	cmp	r4, r5
    104e:	d1f7      	bne.n	1040 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1050:	2260      	movs	r2, #96	; 0x60
    1052:	2100      	movs	r1, #0
    1054:	4802      	ldr	r0, [pc, #8]	; (1060 <_usb_d_dev_reset_epts+0x38>)
    1056:	4b04      	ldr	r3, [pc, #16]	; (1068 <_usb_d_dev_reset_epts+0x40>)
    1058:	4798      	blx	r3
}
    105a:	bc04      	pop	{r2}
    105c:	4690      	mov	r8, r2
    105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1060:	20000108 	.word	0x20000108
    1064:	00000e95 	.word	0x00000e95
    1068:	00002c93 	.word	0x00002c93

0000106c <_usb_d_dev_in_next>:
{
    106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    106e:	46c6      	mov	lr, r8
    1070:	b500      	push	{lr}
    1072:	0004      	movs	r4, r0
    1074:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1076:	7c83      	ldrb	r3, [r0, #18]
    1078:	250f      	movs	r5, #15
    107a:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    107c:	2900      	cmp	r1, #0
    107e:	d100      	bne.n	1082 <_usb_d_dev_in_next+0x16>
    1080:	e0aa      	b.n	11d8 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1082:	016a      	lsls	r2, r5, #5
    1084:	4b5a      	ldr	r3, [pc, #360]	; (11f0 <_usb_d_dev_in_next+0x184>)
    1086:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1088:	6958      	ldr	r0, [r3, #20]
    108a:	0480      	lsls	r0, r0, #18
    108c:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    108e:	8a23      	ldrh	r3, [r4, #16]
    1090:	4a58      	ldr	r2, [pc, #352]	; (11f4 <_usb_d_dev_in_next+0x188>)
    1092:	4293      	cmp	r3, r2
    1094:	d100      	bne.n	1098 <_usb_d_dev_in_next+0x2c>
    1096:	e09a      	b.n	11ce <_usb_d_dev_in_next+0x162>
    1098:	3b01      	subs	r3, #1
    109a:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    109c:	7ce3      	ldrb	r3, [r4, #19]
    109e:	2707      	movs	r7, #7
    10a0:	401f      	ands	r7, r3
	if (isr) {
    10a2:	2e00      	cmp	r6, #0
    10a4:	d005      	beq.n	10b2 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10a6:	016b      	lsls	r3, r5, #5
    10a8:	4953      	ldr	r1, [pc, #332]	; (11f8 <_usb_d_dev_in_next+0x18c>)
    10aa:	468c      	mov	ip, r1
    10ac:	4463      	add	r3, ip
    10ae:	2102      	movs	r1, #2
    10b0:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    10b2:	68a3      	ldr	r3, [r4, #8]
    10b4:	18c1      	adds	r1, r0, r3
    10b6:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    10b8:	6863      	ldr	r3, [r4, #4]
    10ba:	4299      	cmp	r1, r3
    10bc:	d24a      	bcs.n	1154 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    10be:	1a5b      	subs	r3, r3, r1
    10c0:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    10c2:	7ce2      	ldrb	r2, [r4, #19]
    10c4:	0692      	lsls	r2, r2, #26
    10c6:	d535      	bpl.n	1134 <_usb_d_dev_in_next+0xc8>
    10c8:	8a22      	ldrh	r2, [r4, #16]
    10ca:	1c10      	adds	r0, r2, #0
    10cc:	b292      	uxth	r2, r2
    10ce:	429a      	cmp	r2, r3
    10d0:	d900      	bls.n	10d4 <_usb_d_dev_in_next+0x68>
    10d2:	1c18      	adds	r0, r3, #0
    10d4:	b283      	uxth	r3, r0
    10d6:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    10d8:	6823      	ldr	r3, [r4, #0]
    10da:	469c      	mov	ip, r3
    10dc:	4461      	add	r1, ip
    10de:	4642      	mov	r2, r8
    10e0:	68e0      	ldr	r0, [r4, #12]
    10e2:	4b46      	ldr	r3, [pc, #280]	; (11fc <_usb_d_dev_in_next+0x190>)
    10e4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    10e6:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    10e8:	016a      	lsls	r2, r5, #5
    10ea:	4b41      	ldr	r3, [pc, #260]	; (11f0 <_usb_d_dev_in_next+0x184>)
    10ec:	189b      	adds	r3, r3, r2
    10ee:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    10f0:	016a      	lsls	r2, r5, #5
    10f2:	4b3f      	ldr	r3, [pc, #252]	; (11f0 <_usb_d_dev_in_next+0x184>)
    10f4:	189b      	adds	r3, r3, r2
    10f6:	695a      	ldr	r2, [r3, #20]
    10f8:	4641      	mov	r1, r8
    10fa:	0489      	lsls	r1, r1, #18
    10fc:	0c89      	lsrs	r1, r1, #18
    10fe:	0b92      	lsrs	r2, r2, #14
    1100:	0392      	lsls	r2, r2, #14
    1102:	430a      	orrs	r2, r1
    1104:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1106:	695a      	ldr	r2, [r3, #20]
    1108:	493d      	ldr	r1, [pc, #244]	; (1200 <_usb_d_dev_in_next+0x194>)
    110a:	400a      	ands	r2, r1
    110c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    110e:	2e00      	cmp	r6, #0
    1110:	d107      	bne.n	1122 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1112:	2f01      	cmp	r7, #1
    1114:	d059      	beq.n	11ca <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1116:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1118:	016b      	lsls	r3, r5, #5
    111a:	493a      	ldr	r1, [pc, #232]	; (1204 <_usb_d_dev_in_next+0x198>)
    111c:	468c      	mov	ip, r1
    111e:	4463      	add	r3, ip
    1120:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1122:	016d      	lsls	r5, r5, #5
    1124:	4b34      	ldr	r3, [pc, #208]	; (11f8 <_usb_d_dev_in_next+0x18c>)
    1126:	469c      	mov	ip, r3
    1128:	4465      	add	r5, ip
    112a:	2380      	movs	r3, #128	; 0x80
    112c:	716b      	strb	r3, [r5, #5]
}
    112e:	bc04      	pop	{r2}
    1130:	4690      	mov	r8, r2
    1132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1134:	1c1a      	adds	r2, r3, #0
    1136:	2080      	movs	r0, #128	; 0x80
    1138:	0180      	lsls	r0, r0, #6
    113a:	4283      	cmp	r3, r0
    113c:	d901      	bls.n	1142 <_usb_d_dev_in_next+0xd6>
    113e:	4b32      	ldr	r3, [pc, #200]	; (1208 <_usb_d_dev_in_next+0x19c>)
    1140:	881a      	ldrh	r2, [r3, #0]
    1142:	b293      	uxth	r3, r2
    1144:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1146:	6823      	ldr	r3, [r4, #0]
    1148:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    114a:	016a      	lsls	r2, r5, #5
    114c:	4b28      	ldr	r3, [pc, #160]	; (11f0 <_usb_d_dev_in_next+0x184>)
    114e:	189b      	adds	r3, r3, r2
    1150:	6119      	str	r1, [r3, #16]
    1152:	e7cd      	b.n	10f0 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1154:	7ce3      	ldrb	r3, [r4, #19]
    1156:	06db      	lsls	r3, r3, #27
    1158:	d50f      	bpl.n	117a <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    115a:	7ce3      	ldrb	r3, [r4, #19]
    115c:	2210      	movs	r2, #16
    115e:	4393      	bics	r3, r2
    1160:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1162:	016a      	lsls	r2, r5, #5
    1164:	4b22      	ldr	r3, [pc, #136]	; (11f0 <_usb_d_dev_in_next+0x184>)
    1166:	189b      	adds	r3, r3, r2
    1168:	695a      	ldr	r2, [r3, #20]
    116a:	0b92      	lsrs	r2, r2, #14
    116c:	0392      	lsls	r2, r2, #14
    116e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1170:	695a      	ldr	r2, [r3, #20]
    1172:	4923      	ldr	r1, [pc, #140]	; (1200 <_usb_d_dev_in_next+0x194>)
    1174:	400a      	ands	r2, r1
    1176:	615a      	str	r2, [r3, #20]
    1178:	e7c9      	b.n	110e <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    117a:	2f01      	cmp	r7, #1
    117c:	d00e      	beq.n	119c <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    117e:	016d      	lsls	r5, r5, #5
    1180:	4b22      	ldr	r3, [pc, #136]	; (120c <_usb_d_dev_in_next+0x1a0>)
    1182:	469c      	mov	ip, r3
    1184:	4465      	add	r5, ip
    1186:	234a      	movs	r3, #74	; 0x4a
    1188:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    118a:	8a21      	ldrh	r1, [r4, #16]
    118c:	4002      	ands	r2, r0
    118e:	4291      	cmp	r1, r2
    1190:	d00b      	beq.n	11aa <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1192:	2100      	movs	r1, #0
    1194:	0020      	movs	r0, r4
    1196:	4b1e      	ldr	r3, [pc, #120]	; (1210 <_usb_d_dev_in_next+0x1a4>)
    1198:	4798      	blx	r3
	return;
    119a:	e7c8      	b.n	112e <_usb_d_dev_in_next+0xc2>
    119c:	016d      	lsls	r5, r5, #5
    119e:	4b1b      	ldr	r3, [pc, #108]	; (120c <_usb_d_dev_in_next+0x1a0>)
    11a0:	469c      	mov	ip, r3
    11a2:	4465      	add	r5, ip
    11a4:	234b      	movs	r3, #75	; 0x4b
    11a6:	702b      	strb	r3, [r5, #0]
    11a8:	e7ef      	b.n	118a <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    11aa:	7ce3      	ldrb	r3, [r4, #19]
    11ac:	2240      	movs	r2, #64	; 0x40
    11ae:	4393      	bics	r3, r2
    11b0:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    11b2:	7ca0      	ldrb	r0, [r4, #18]
    11b4:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <_usb_d_dev_in_next+0x184>)
    11b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    11b8:	68a1      	ldr	r1, [r4, #8]
    11ba:	4798      	blx	r3
    11bc:	2800      	cmp	r0, #0
    11be:	d1b6      	bne.n	112e <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    11c0:	7ce3      	ldrb	r3, [r4, #19]
    11c2:	2240      	movs	r2, #64	; 0x40
    11c4:	4313      	orrs	r3, r2
    11c6:	74e3      	strb	r3, [r4, #19]
    11c8:	e7e3      	b.n	1192 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    11ca:	224e      	movs	r2, #78	; 0x4e
    11cc:	e7a4      	b.n	1118 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    11ce:	7ce7      	ldrb	r7, [r4, #19]
    11d0:	2307      	movs	r3, #7
    11d2:	401f      	ands	r7, r3
    11d4:	4a07      	ldr	r2, [pc, #28]	; (11f4 <_usb_d_dev_in_next+0x188>)
    11d6:	e766      	b.n	10a6 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    11d8:	8a03      	ldrh	r3, [r0, #16]
    11da:	4a06      	ldr	r2, [pc, #24]	; (11f4 <_usb_d_dev_in_next+0x188>)
    11dc:	2000      	movs	r0, #0
    11de:	4293      	cmp	r3, r2
    11e0:	d000      	beq.n	11e4 <_usb_d_dev_in_next+0x178>
    11e2:	e759      	b.n	1098 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    11e4:	7ce3      	ldrb	r3, [r4, #19]
    11e6:	2707      	movs	r7, #7
    11e8:	401f      	ands	r7, r3
    11ea:	2000      	movs	r0, #0
    11ec:	4a01      	ldr	r2, [pc, #4]	; (11f4 <_usb_d_dev_in_next+0x188>)
    11ee:	e760      	b.n	10b2 <_usb_d_dev_in_next+0x46>
    11f0:	20000108 	.word	0x20000108
    11f4:	000003ff 	.word	0x000003ff
    11f8:	41005100 	.word	0x41005100
    11fc:	00002c81 	.word	0x00002c81
    1200:	f0003fff 	.word	0xf0003fff
    1204:	41005109 	.word	0x41005109
    1208:	00002d04 	.word	0x00002d04
    120c:	41005108 	.word	0x41005108
    1210:	00000e95 	.word	0x00000e95

00001214 <_usb_d_dev_out_next>:
{
    1214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1216:	46de      	mov	lr, fp
    1218:	4657      	mov	r7, sl
    121a:	464e      	mov	r6, r9
    121c:	4645      	mov	r5, r8
    121e:	b5e0      	push	{r5, r6, r7, lr}
    1220:	0004      	movs	r4, r0
    1222:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1224:	7c83      	ldrb	r3, [r0, #18]
    1226:	250f      	movs	r5, #15
    1228:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    122a:	2900      	cmp	r1, #0
    122c:	d057      	beq.n	12de <_usb_d_dev_out_next+0xca>
    122e:	016a      	lsls	r2, r5, #5
    1230:	4b7d      	ldr	r3, [pc, #500]	; (1428 <_usb_d_dev_out_next+0x214>)
    1232:	189b      	adds	r3, r3, r2
    1234:	685a      	ldr	r2, [r3, #4]
    1236:	0112      	lsls	r2, r2, #4
    1238:	0c92      	lsrs	r2, r2, #18
    123a:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    123c:	685f      	ldr	r7, [r3, #4]
    123e:	04bf      	lsls	r7, r7, #18
    1240:	0cbf      	lsrs	r7, r7, #18
    1242:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1244:	8a06      	ldrh	r6, [r0, #16]
    1246:	4b79      	ldr	r3, [pc, #484]	; (142c <_usb_d_dev_out_next+0x218>)
    1248:	429e      	cmp	r6, r3
    124a:	d100      	bne.n	124e <_usb_d_dev_out_next+0x3a>
    124c:	e0cd      	b.n	13ea <_usb_d_dev_out_next+0x1d6>
    124e:	3e01      	subs	r6, #1
    1250:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1252:	465f      	mov	r7, fp
    1254:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1256:	7ce3      	ldrb	r3, [r4, #19]
    1258:	2207      	movs	r2, #7
    125a:	401a      	ands	r2, r3
    125c:	4691      	mov	r9, r2
	if (isr) {
    125e:	4643      	mov	r3, r8
    1260:	2b00      	cmp	r3, #0
    1262:	d005      	beq.n	1270 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1264:	016b      	lsls	r3, r5, #5
    1266:	4a72      	ldr	r2, [pc, #456]	; (1430 <_usb_d_dev_out_next+0x21c>)
    1268:	4694      	mov	ip, r2
    126a:	4463      	add	r3, ip
    126c:	2201      	movs	r2, #1
    126e:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1270:	7ce3      	ldrb	r3, [r4, #19]
    1272:	069b      	lsls	r3, r3, #26
    1274:	d50f      	bpl.n	1296 <_usb_d_dev_out_next+0x82>
    1276:	6863      	ldr	r3, [r4, #4]
    1278:	2b00      	cmp	r3, #0
    127a:	d039      	beq.n	12f0 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    127c:	68a0      	ldr	r0, [r4, #8]
    127e:	1a1b      	subs	r3, r3, r0
    1280:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1282:	6822      	ldr	r2, [r4, #0]
    1284:	4694      	mov	ip, r2
    1286:	4460      	add	r0, ip
    1288:	68e1      	ldr	r1, [r4, #12]
    128a:	001a      	movs	r2, r3
    128c:	42bb      	cmp	r3, r7
    128e:	d900      	bls.n	1292 <_usb_d_dev_out_next+0x7e>
    1290:	003a      	movs	r2, r7
    1292:	4b68      	ldr	r3, [pc, #416]	; (1434 <_usb_d_dev_out_next+0x220>)
    1294:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1296:	6863      	ldr	r3, [r4, #4]
    1298:	2b00      	cmp	r3, #0
    129a:	d029      	beq.n	12f0 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    129c:	4642      	mov	r2, r8
    129e:	2a00      	cmp	r2, #0
    12a0:	d042      	beq.n	1328 <_usb_d_dev_out_next+0x114>
    12a2:	8a22      	ldrh	r2, [r4, #16]
    12a4:	42ba      	cmp	r2, r7
    12a6:	d93f      	bls.n	1328 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    12a8:	7ce3      	ldrb	r3, [r4, #19]
    12aa:	2210      	movs	r2, #16
    12ac:	4393      	bics	r3, r2
    12ae:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    12b0:	68a3      	ldr	r3, [r4, #8]
    12b2:	445b      	add	r3, fp
    12b4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    12b6:	464b      	mov	r3, r9
    12b8:	2b01      	cmp	r3, #1
    12ba:	d100      	bne.n	12be <_usb_d_dev_out_next+0xaa>
    12bc:	e087      	b.n	13ce <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12be:	016b      	lsls	r3, r5, #5
    12c0:	4a5d      	ldr	r2, [pc, #372]	; (1438 <_usb_d_dev_out_next+0x224>)
    12c2:	4694      	mov	ip, r2
    12c4:	4463      	add	r3, ip
    12c6:	2225      	movs	r2, #37	; 0x25
    12c8:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    12ca:	2d00      	cmp	r5, #0
    12cc:	d102      	bne.n	12d4 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    12ce:	4b56      	ldr	r3, [pc, #344]	; (1428 <_usb_d_dev_out_next+0x214>)
    12d0:	68e2      	ldr	r2, [r4, #12]
    12d2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    12d4:	2100      	movs	r1, #0
    12d6:	0020      	movs	r0, r4
    12d8:	4b58      	ldr	r3, [pc, #352]	; (143c <_usb_d_dev_out_next+0x228>)
    12da:	4798      	blx	r3
	return;
    12dc:	e059      	b.n	1392 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    12de:	8a06      	ldrh	r6, [r0, #16]
    12e0:	4b52      	ldr	r3, [pc, #328]	; (142c <_usb_d_dev_out_next+0x218>)
    12e2:	429e      	cmp	r6, r3
    12e4:	d100      	bne.n	12e8 <_usb_d_dev_out_next+0xd4>
    12e6:	e08e      	b.n	1406 <_usb_d_dev_out_next+0x1f2>
    12e8:	2300      	movs	r3, #0
    12ea:	469b      	mov	fp, r3
    12ec:	469a      	mov	sl, r3
    12ee:	e7ae      	b.n	124e <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    12f0:	7ce3      	ldrb	r3, [r4, #19]
    12f2:	06db      	lsls	r3, r3, #27
    12f4:	d400      	bmi.n	12f8 <_usb_d_dev_out_next+0xe4>
    12f6:	e07f      	b.n	13f8 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    12f8:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    12fa:	2210      	movs	r2, #16
    12fc:	4393      	bics	r3, r2
    12fe:	2220      	movs	r2, #32
    1300:	4313      	orrs	r3, r2
    1302:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1304:	4a48      	ldr	r2, [pc, #288]	; (1428 <_usb_d_dev_out_next+0x214>)
    1306:	016b      	lsls	r3, r5, #5
    1308:	68e1      	ldr	r1, [r4, #12]
    130a:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    130c:	8a21      	ldrh	r1, [r4, #16]
    130e:	18d3      	adds	r3, r2, r3
    1310:	685a      	ldr	r2, [r3, #4]
    1312:	0489      	lsls	r1, r1, #18
    1314:	0909      	lsrs	r1, r1, #4
    1316:	484a      	ldr	r0, [pc, #296]	; (1440 <_usb_d_dev_out_next+0x22c>)
    1318:	4002      	ands	r2, r0
    131a:	430a      	orrs	r2, r1
    131c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    131e:	685a      	ldr	r2, [r3, #4]
    1320:	0b92      	lsrs	r2, r2, #14
    1322:	0392      	lsls	r2, r2, #14
    1324:	605a      	str	r2, [r3, #4]
    1326:	e022      	b.n	136e <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1328:	68a2      	ldr	r2, [r4, #8]
    132a:	4452      	add	r2, sl
    132c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    132e:	4293      	cmp	r3, r2
    1330:	d9c1      	bls.n	12b6 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1332:	1a9b      	subs	r3, r3, r2
    1334:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1336:	7ce1      	ldrb	r1, [r4, #19]
    1338:	0689      	lsls	r1, r1, #26
    133a:	d530      	bpl.n	139e <_usb_d_dev_out_next+0x18a>
    133c:	8a22      	ldrh	r2, [r4, #16]
    133e:	1c11      	adds	r1, r2, #0
    1340:	b292      	uxth	r2, r2
    1342:	429a      	cmp	r2, r3
    1344:	d900      	bls.n	1348 <_usb_d_dev_out_next+0x134>
    1346:	1c19      	adds	r1, r3, #0
    1348:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    134a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    134c:	016a      	lsls	r2, r5, #5
    134e:	4936      	ldr	r1, [pc, #216]	; (1428 <_usb_d_dev_out_next+0x214>)
    1350:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1352:	016a      	lsls	r2, r5, #5
    1354:	4934      	ldr	r1, [pc, #208]	; (1428 <_usb_d_dev_out_next+0x214>)
    1356:	1889      	adds	r1, r1, r2
    1358:	684a      	ldr	r2, [r1, #4]
    135a:	049b      	lsls	r3, r3, #18
    135c:	091b      	lsrs	r3, r3, #4
    135e:	4838      	ldr	r0, [pc, #224]	; (1440 <_usb_d_dev_out_next+0x22c>)
    1360:	4002      	ands	r2, r0
    1362:	4313      	orrs	r3, r2
    1364:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1366:	684b      	ldr	r3, [r1, #4]
    1368:	0b9b      	lsrs	r3, r3, #14
    136a:	039b      	lsls	r3, r3, #14
    136c:	604b      	str	r3, [r1, #4]
	if (!isr) {
    136e:	4643      	mov	r3, r8
    1370:	2b00      	cmp	r3, #0
    1372:	d108      	bne.n	1386 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1374:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1376:	464b      	mov	r3, r9
    1378:	2b01      	cmp	r3, #1
    137a:	d02f      	beq.n	13dc <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    137c:	016b      	lsls	r3, r5, #5
    137e:	4931      	ldr	r1, [pc, #196]	; (1444 <_usb_d_dev_out_next+0x230>)
    1380:	468c      	mov	ip, r1
    1382:	4463      	add	r3, ip
    1384:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1386:	016d      	lsls	r5, r5, #5
    1388:	4b29      	ldr	r3, [pc, #164]	; (1430 <_usb_d_dev_out_next+0x21c>)
    138a:	469c      	mov	ip, r3
    138c:	4465      	add	r5, ip
    138e:	2340      	movs	r3, #64	; 0x40
    1390:	712b      	strb	r3, [r5, #4]
}
    1392:	bc3c      	pop	{r2, r3, r4, r5}
    1394:	4690      	mov	r8, r2
    1396:	4699      	mov	r9, r3
    1398:	46a2      	mov	sl, r4
    139a:	46ab      	mov	fp, r5
    139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    139e:	8a21      	ldrh	r1, [r4, #16]
    13a0:	428b      	cmp	r3, r1
    13a2:	d90a      	bls.n	13ba <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    13a4:	2180      	movs	r1, #128	; 0x80
    13a6:	0189      	lsls	r1, r1, #6
    13a8:	428b      	cmp	r3, r1
    13aa:	d80d      	bhi.n	13c8 <_usb_d_dev_out_next+0x1b4>
    13ac:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    13ae:	6821      	ldr	r1, [r4, #0]
    13b0:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    13b2:	0169      	lsls	r1, r5, #5
    13b4:	481c      	ldr	r0, [pc, #112]	; (1428 <_usb_d_dev_out_next+0x214>)
    13b6:	500a      	str	r2, [r1, r0]
    13b8:	e7cb      	b.n	1352 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    13ba:	428b      	cmp	r3, r1
    13bc:	d2f7      	bcs.n	13ae <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    13be:	7ce1      	ldrb	r1, [r4, #19]
    13c0:	2020      	movs	r0, #32
    13c2:	4301      	orrs	r1, r0
    13c4:	74e1      	strb	r1, [r4, #19]
    13c6:	e7f2      	b.n	13ae <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    13c8:	2380      	movs	r3, #128	; 0x80
    13ca:	019b      	lsls	r3, r3, #6
    13cc:	e7ef      	b.n	13ae <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13ce:	016b      	lsls	r3, r5, #5
    13d0:	4a19      	ldr	r2, [pc, #100]	; (1438 <_usb_d_dev_out_next+0x224>)
    13d2:	4694      	mov	ip, r2
    13d4:	4463      	add	r3, ip
    13d6:	222d      	movs	r2, #45	; 0x2d
    13d8:	701a      	strb	r2, [r3, #0]
    13da:	e776      	b.n	12ca <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    13dc:	016a      	lsls	r2, r5, #5
    13de:	4b12      	ldr	r3, [pc, #72]	; (1428 <_usb_d_dev_out_next+0x214>)
    13e0:	189b      	adds	r3, r3, r2
    13e2:	2200      	movs	r2, #0
    13e4:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    13e6:	322d      	adds	r2, #45	; 0x2d
    13e8:	e7c8      	b.n	137c <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    13ea:	05bf      	lsls	r7, r7, #22
    13ec:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13ee:	7cc3      	ldrb	r3, [r0, #19]
    13f0:	2207      	movs	r2, #7
    13f2:	401a      	ands	r2, r3
    13f4:	4691      	mov	r9, r2
    13f6:	e735      	b.n	1264 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    13f8:	4643      	mov	r3, r8
    13fa:	2b00      	cmp	r3, #0
    13fc:	d10c      	bne.n	1418 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    13fe:	68a3      	ldr	r3, [r4, #8]
    1400:	4453      	add	r3, sl
    1402:	60a3      	str	r3, [r4, #8]
    1404:	e757      	b.n	12b6 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1406:	7cc3      	ldrb	r3, [r0, #19]
    1408:	2207      	movs	r2, #7
    140a:	401a      	ands	r2, r3
    140c:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    140e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1410:	2300      	movs	r3, #0
    1412:	469b      	mov	fp, r3
    1414:	469a      	mov	sl, r3
    1416:	e72b      	b.n	1270 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1418:	8a23      	ldrh	r3, [r4, #16]
    141a:	42bb      	cmp	r3, r7
    141c:	d900      	bls.n	1420 <_usb_d_dev_out_next+0x20c>
    141e:	e743      	b.n	12a8 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1420:	68a3      	ldr	r3, [r4, #8]
    1422:	4453      	add	r3, sl
    1424:	60a3      	str	r3, [r4, #8]
    1426:	e746      	b.n	12b6 <_usb_d_dev_out_next+0xa2>
    1428:	20000108 	.word	0x20000108
    142c:	000003ff 	.word	0x000003ff
    1430:	41005100 	.word	0x41005100
    1434:	00002c81 	.word	0x00002c81
    1438:	41005108 	.word	0x41005108
    143c:	00000e95 	.word	0x00000e95
    1440:	f0003fff 	.word	0xf0003fff
    1444:	41005109 	.word	0x41005109

00001448 <_usb_d_dev_init>:
{
    1448:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    144a:	4b31      	ldr	r3, [pc, #196]	; (1510 <_usb_d_dev_init+0xc8>)
    144c:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    144e:	07db      	lsls	r3, r3, #31
    1450:	d41f      	bmi.n	1492 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1452:	492f      	ldr	r1, [pc, #188]	; (1510 <_usb_d_dev_init+0xc8>)
    1454:	2203      	movs	r2, #3
    1456:	788b      	ldrb	r3, [r1, #2]
    1458:	4213      	tst	r3, r2
    145a:	d1fc      	bne.n	1456 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    145c:	4b2c      	ldr	r3, [pc, #176]	; (1510 <_usb_d_dev_init+0xc8>)
    145e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1460:	079b      	lsls	r3, r3, #30
    1462:	d50e      	bpl.n	1482 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1464:	4a2a      	ldr	r2, [pc, #168]	; (1510 <_usb_d_dev_init+0xc8>)
    1466:	7813      	ldrb	r3, [r2, #0]
    1468:	2102      	movs	r1, #2
    146a:	438b      	bics	r3, r1
    146c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    146e:	0011      	movs	r1, r2
    1470:	2203      	movs	r2, #3
    1472:	788b      	ldrb	r3, [r1, #2]
    1474:	4213      	tst	r3, r2
    1476:	d1fc      	bne.n	1472 <_usb_d_dev_init+0x2a>
    1478:	4925      	ldr	r1, [pc, #148]	; (1510 <_usb_d_dev_init+0xc8>)
    147a:	2202      	movs	r2, #2
    147c:	788b      	ldrb	r3, [r1, #2]
    147e:	4213      	tst	r3, r2
    1480:	d1fc      	bne.n	147c <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1482:	2201      	movs	r2, #1
    1484:	4b22      	ldr	r3, [pc, #136]	; (1510 <_usb_d_dev_init+0xc8>)
    1486:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1488:	0019      	movs	r1, r3
    148a:	3202      	adds	r2, #2
    148c:	788b      	ldrb	r3, [r1, #2]
    148e:	4213      	tst	r3, r2
    1490:	d1fc      	bne.n	148c <_usb_d_dev_init+0x44>
    1492:	491f      	ldr	r1, [pc, #124]	; (1510 <_usb_d_dev_init+0xc8>)
    1494:	2201      	movs	r2, #1
    1496:	788b      	ldrb	r3, [r1, #2]
    1498:	4213      	tst	r3, r2
    149a:	d1fc      	bne.n	1496 <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    149c:	4b1d      	ldr	r3, [pc, #116]	; (1514 <_usb_d_dev_init+0xcc>)
    149e:	4a1e      	ldr	r2, [pc, #120]	; (1518 <_usb_d_dev_init+0xd0>)
    14a0:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    14a2:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    14a4:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    14a6:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    14a8:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    14aa:	4b1c      	ldr	r3, [pc, #112]	; (151c <_usb_d_dev_init+0xd4>)
    14ac:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    14ae:	4b1c      	ldr	r3, [pc, #112]	; (1520 <_usb_d_dev_init+0xd8>)
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    14b4:	211f      	movs	r1, #31
    14b6:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    14b8:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    14ba:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    14bc:	019b      	lsls	r3, r3, #6
    14be:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    14c0:	2a1f      	cmp	r2, #31
    14c2:	d01f      	beq.n	1504 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    14c4:	291f      	cmp	r1, #31
    14c6:	d01f      	beq.n	1508 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    14c8:	2b07      	cmp	r3, #7
    14ca:	d01f      	beq.n	150c <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    14cc:	0192      	lsls	r2, r2, #6
    14ce:	430a      	orrs	r2, r1
    14d0:	031b      	lsls	r3, r3, #12
    14d2:	4313      	orrs	r3, r2
    14d4:	4a0e      	ldr	r2, [pc, #56]	; (1510 <_usb_d_dev_init+0xc8>)
    14d6:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    14d8:	78d3      	ldrb	r3, [r2, #3]
    14da:	2103      	movs	r1, #3
    14dc:	430b      	orrs	r3, r1
    14de:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    14e0:	78d3      	ldrb	r3, [r2, #3]
    14e2:	210c      	movs	r1, #12
    14e4:	430b      	orrs	r3, r1
    14e6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    14e8:	2304      	movs	r3, #4
    14ea:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    14ec:	0011      	movs	r1, r2
    14ee:	2203      	movs	r2, #3
    14f0:	788b      	ldrb	r3, [r1, #2]
    14f2:	4213      	tst	r3, r2
    14f4:	d1fc      	bne.n	14f0 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    14f6:	4b06      	ldr	r3, [pc, #24]	; (1510 <_usb_d_dev_init+0xc8>)
    14f8:	4a06      	ldr	r2, [pc, #24]	; (1514 <_usb_d_dev_init+0xcc>)
    14fa:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    14fc:	2201      	movs	r2, #1
    14fe:	811a      	strh	r2, [r3, #8]
}
    1500:	2000      	movs	r0, #0
    1502:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1504:	3a1a      	subs	r2, #26
    1506:	e7dd      	b.n	14c4 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    1508:	3902      	subs	r1, #2
    150a:	e7dd      	b.n	14c8 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    150c:	3b02      	subs	r3, #2
    150e:	e7dd      	b.n	14cc <_usb_d_dev_init+0x84>
    1510:	41005000 	.word	0x41005000
    1514:	20000108 	.word	0x20000108
    1518:	00000dd5 	.word	0x00000dd5
    151c:	00001029 	.word	0x00001029
    1520:	00806024 	.word	0x00806024

00001524 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1524:	4b10      	ldr	r3, [pc, #64]	; (1568 <_usb_d_dev_enable+0x44>)
    1526:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1528:	079b      	lsls	r3, r3, #30
    152a:	d11a      	bne.n	1562 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    152c:	490e      	ldr	r1, [pc, #56]	; (1568 <_usb_d_dev_enable+0x44>)
    152e:	2203      	movs	r2, #3
    1530:	788b      	ldrb	r3, [r1, #2]
    1532:	4213      	tst	r3, r2
    1534:	d1fc      	bne.n	1530 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1536:	4b0c      	ldr	r3, [pc, #48]	; (1568 <_usb_d_dev_enable+0x44>)
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    153c:	079a      	lsls	r2, r3, #30
    153e:	d408      	bmi.n	1552 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1540:	2202      	movs	r2, #2
    1542:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1544:	4a08      	ldr	r2, [pc, #32]	; (1568 <_usb_d_dev_enable+0x44>)
    1546:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1548:	0011      	movs	r1, r2
    154a:	2203      	movs	r2, #3
    154c:	788b      	ldrb	r3, [r1, #2]
    154e:	4213      	tst	r3, r2
    1550:	d1fc      	bne.n	154c <_usb_d_dev_enable+0x28>
    1552:	2280      	movs	r2, #128	; 0x80
    1554:	4b05      	ldr	r3, [pc, #20]	; (156c <_usb_d_dev_enable+0x48>)
    1556:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1558:	4a05      	ldr	r2, [pc, #20]	; (1570 <_usb_d_dev_enable+0x4c>)
    155a:	4b03      	ldr	r3, [pc, #12]	; (1568 <_usb_d_dev_enable+0x44>)
    155c:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    155e:	2000      	movs	r0, #0
}
    1560:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1562:	2011      	movs	r0, #17
    1564:	4240      	negs	r0, r0
    1566:	e7fb      	b.n	1560 <_usb_d_dev_enable+0x3c>
    1568:	41005000 	.word	0x41005000
    156c:	e000e100 	.word	0xe000e100
    1570:	0000028d 	.word	0x0000028d

00001574 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1574:	4a02      	ldr	r2, [pc, #8]	; (1580 <_usb_d_dev_attach+0xc>)
    1576:	8913      	ldrh	r3, [r2, #8]
    1578:	2101      	movs	r1, #1
    157a:	438b      	bics	r3, r1
    157c:	8113      	strh	r3, [r2, #8]
}
    157e:	4770      	bx	lr
    1580:	41005000 	.word	0x41005000

00001584 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1584:	2380      	movs	r3, #128	; 0x80
    1586:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1588:	4b01      	ldr	r3, [pc, #4]	; (1590 <_usb_d_dev_set_address+0xc>)
    158a:	7298      	strb	r0, [r3, #10]
}
    158c:	4770      	bx	lr
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	41005000 	.word	0x41005000

00001594 <_usb_d_dev_ep_init>:
{
    1594:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1596:	240f      	movs	r4, #15
    1598:	4004      	ands	r4, r0
    159a:	b243      	sxtb	r3, r0
    159c:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    159e:	2c00      	cmp	r4, #0
    15a0:	d054      	beq.n	164c <_usb_d_dev_ep_init+0xb8>
    15a2:	0025      	movs	r5, r4
    15a4:	2b00      	cmp	r3, #0
    15a6:	db07      	blt.n	15b8 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    15a8:	2303      	movs	r3, #3
    15aa:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    15ac:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    15ae:	2c02      	cmp	r4, #2
    15b0:	d950      	bls.n	1654 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    15b2:	2012      	movs	r0, #18
    15b4:	4240      	negs	r0, r0
    15b6:	e025      	b.n	1604 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    15b8:	1ca5      	adds	r5, r4, #2
    15ba:	e7f5      	b.n	15a8 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    15bc:	4663      	mov	r3, ip
    15be:	2b00      	cmp	r3, #0
    15c0:	db21      	blt.n	1606 <_usb_d_dev_ep_init+0x72>
    15c2:	007b      	lsls	r3, r7, #1
    15c4:	19db      	adds	r3, r3, r7
    15c6:	009b      	lsls	r3, r3, #2
    15c8:	4c3b      	ldr	r4, [pc, #236]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    15ca:	591b      	ldr	r3, [r3, r4]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d166      	bne.n	169e <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    15d0:	007b      	lsls	r3, r7, #1
    15d2:	19df      	adds	r7, r3, r7
    15d4:	00bf      	lsls	r7, r7, #2
    15d6:	4b38      	ldr	r3, [pc, #224]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    15d8:	58ff      	ldr	r7, [r7, r3]
    15da:	4b38      	ldr	r3, [pc, #224]	; (16bc <_usb_d_dev_ep_init+0x128>)
    15dc:	00ae      	lsls	r6, r5, #2
    15de:	1974      	adds	r4, r6, r5
    15e0:	00a4      	lsls	r4, r4, #2
    15e2:	191c      	adds	r4, r3, r4
    15e4:	3480      	adds	r4, #128	; 0x80
    15e6:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    15e8:	3360      	adds	r3, #96	; 0x60
    15ea:	1974      	adds	r4, r6, r5
    15ec:	00a4      	lsls	r4, r4, #2
    15ee:	191c      	adds	r4, r3, r4
    15f0:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    15f2:	3427      	adds	r4, #39	; 0x27
    15f4:	3101      	adds	r1, #1
    15f6:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    15f8:	1975      	adds	r5, r6, r5
    15fa:	00ad      	lsls	r5, r5, #2
    15fc:	195b      	adds	r3, r3, r5
    15fe:	3326      	adds	r3, #38	; 0x26
    1600:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1602:	2000      	movs	r0, #0
}
    1604:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1606:	007b      	lsls	r3, r7, #1
    1608:	19db      	adds	r3, r3, r7
    160a:	009b      	lsls	r3, r3, #2
    160c:	4c2a      	ldr	r4, [pc, #168]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    160e:	18e3      	adds	r3, r4, r3
    1610:	685b      	ldr	r3, [r3, #4]
    1612:	2b00      	cmp	r3, #0
    1614:	d106      	bne.n	1624 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1616:	007b      	lsls	r3, r7, #1
    1618:	19df      	adds	r7, r3, r7
    161a:	00bf      	lsls	r7, r7, #2
    161c:	4b26      	ldr	r3, [pc, #152]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    161e:	19df      	adds	r7, r3, r7
    1620:	687f      	ldr	r7, [r7, #4]
    1622:	e7da      	b.n	15da <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1624:	007b      	lsls	r3, r7, #1
    1626:	19db      	adds	r3, r3, r7
    1628:	009b      	lsls	r3, r3, #2
    162a:	4c23      	ldr	r4, [pc, #140]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    162c:	18e3      	adds	r3, r4, r3
    162e:	895b      	ldrh	r3, [r3, #10]
    1630:	4293      	cmp	r3, r2
    1632:	daf0      	bge.n	1616 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    1634:	2013      	movs	r0, #19
    1636:	4240      	negs	r0, r0
    1638:	e7e4      	b.n	1604 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    163a:	2014      	movs	r0, #20
    163c:	4240      	negs	r0, r0
    163e:	e7e1      	b.n	1604 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    1640:	2014      	movs	r0, #20
    1642:	4240      	negs	r0, r0
    1644:	e7de      	b.n	1604 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    1646:	2013      	movs	r0, #19
    1648:	4240      	negs	r0, r0
    164a:	e7db      	b.n	1604 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    164c:	2303      	movs	r3, #3
    164e:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    1650:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1652:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    1654:	00ab      	lsls	r3, r5, #2
    1656:	195b      	adds	r3, r3, r5
    1658:	009e      	lsls	r6, r3, #2
    165a:	4b18      	ldr	r3, [pc, #96]	; (16bc <_usb_d_dev_ep_init+0x128>)
    165c:	199b      	adds	r3, r3, r6
    165e:	3386      	adds	r3, #134	; 0x86
    1660:	781b      	ldrb	r3, [r3, #0]
    1662:	2bff      	cmp	r3, #255	; 0xff
    1664:	d1e9      	bne.n	163a <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1666:	2900      	cmp	r1, #0
    1668:	d1a8      	bne.n	15bc <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    166a:	2c00      	cmp	r4, #0
    166c:	d004      	beq.n	1678 <_usb_d_dev_ep_init+0xe4>
    166e:	4663      	mov	r3, ip
    1670:	2b00      	cmp	r3, #0
    1672:	db01      	blt.n	1678 <_usb_d_dev_ep_init+0xe4>
    1674:	3402      	adds	r4, #2
    1676:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1678:	00a3      	lsls	r3, r4, #2
    167a:	191b      	adds	r3, r3, r4
    167c:	009b      	lsls	r3, r3, #2
    167e:	4c0f      	ldr	r4, [pc, #60]	; (16bc <_usb_d_dev_ep_init+0x128>)
    1680:	18e4      	adds	r4, r4, r3
    1682:	3486      	adds	r4, #134	; 0x86
    1684:	7823      	ldrb	r3, [r4, #0]
    1686:	2bff      	cmp	r3, #255	; 0xff
    1688:	d1da      	bne.n	1640 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    168a:	007b      	lsls	r3, r7, #1
    168c:	19db      	adds	r3, r3, r7
    168e:	009b      	lsls	r3, r3, #2
    1690:	4c09      	ldr	r4, [pc, #36]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    1692:	591b      	ldr	r3, [r3, r4]
    1694:	2b00      	cmp	r3, #0
    1696:	d0d6      	beq.n	1646 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1698:	4663      	mov	r3, ip
    169a:	2b00      	cmp	r3, #0
    169c:	dbb3      	blt.n	1606 <_usb_d_dev_ep_init+0x72>
    169e:	007b      	lsls	r3, r7, #1
    16a0:	19db      	adds	r3, r3, r7
    16a2:	009b      	lsls	r3, r3, #2
    16a4:	4c04      	ldr	r4, [pc, #16]	; (16b8 <_usb_d_dev_ep_init+0x124>)
    16a6:	18e3      	adds	r3, r4, r3
    16a8:	891b      	ldrh	r3, [r3, #8]
    16aa:	4293      	cmp	r3, r2
    16ac:	db00      	blt.n	16b0 <_usb_d_dev_ep_init+0x11c>
    16ae:	e78f      	b.n	15d0 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    16b0:	2013      	movs	r0, #19
    16b2:	4240      	negs	r0, r0
    16b4:	e7a6      	b.n	1604 <_usb_d_dev_ep_init+0x70>
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	00002d08 	.word	0x00002d08
    16bc:	20000108 	.word	0x20000108

000016c0 <_usb_d_dev_ep_deinit>:
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    16c4:	240f      	movs	r4, #15
    16c6:	4004      	ands	r4, r0
    16c8:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    16ca:	2c00      	cmp	r4, #0
    16cc:	d010      	beq.n	16f0 <_usb_d_dev_ep_deinit+0x30>
    16ce:	0020      	movs	r0, r4
    16d0:	2f00      	cmp	r7, #0
    16d2:	db02      	blt.n	16da <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    16d4:	2c02      	cmp	r4, #2
    16d6:	d902      	bls.n	16de <_usb_d_dev_ep_deinit+0x1e>
}
    16d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    16da:	1ca0      	adds	r0, r4, #2
    16dc:	e7fa      	b.n	16d4 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    16de:	0006      	movs	r6, r0
    16e0:	3001      	adds	r0, #1
    16e2:	0083      	lsls	r3, r0, #2
    16e4:	1818      	adds	r0, r3, r0
    16e6:	0080      	lsls	r0, r0, #2
    16e8:	4b25      	ldr	r3, [pc, #148]	; (1780 <_usb_d_dev_ep_deinit+0xc0>)
    16ea:	3360      	adds	r3, #96	; 0x60
    16ec:	1818      	adds	r0, r3, r0
    16ee:	e002      	b.n	16f6 <_usb_d_dev_ep_deinit+0x36>
    16f0:	4823      	ldr	r0, [pc, #140]	; (1780 <_usb_d_dev_ep_deinit+0xc0>)
    16f2:	3074      	adds	r0, #116	; 0x74
    16f4:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    16f6:	00b3      	lsls	r3, r6, #2
    16f8:	199b      	adds	r3, r3, r6
    16fa:	009a      	lsls	r2, r3, #2
    16fc:	4b20      	ldr	r3, [pc, #128]	; (1780 <_usb_d_dev_ep_deinit+0xc0>)
    16fe:	189b      	adds	r3, r3, r2
    1700:	3386      	adds	r3, #134	; 0x86
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	2bff      	cmp	r3, #255	; 0xff
    1706:	d0e7      	beq.n	16d8 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1708:	0ff9      	lsrs	r1, r7, #31
    170a:	2203      	movs	r2, #3
    170c:	4b1d      	ldr	r3, [pc, #116]	; (1784 <_usb_d_dev_ep_deinit+0xc4>)
    170e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1710:	00b3      	lsls	r3, r6, #2
    1712:	199b      	adds	r3, r3, r6
    1714:	009a      	lsls	r2, r3, #2
    1716:	4b1a      	ldr	r3, [pc, #104]	; (1780 <_usb_d_dev_ep_deinit+0xc0>)
    1718:	189b      	adds	r3, r3, r2
    171a:	3380      	adds	r3, #128	; 0x80
    171c:	79da      	ldrb	r2, [r3, #7]
    171e:	2307      	movs	r3, #7
    1720:	4013      	ands	r3, r2
    1722:	2b01      	cmp	r3, #1
    1724:	d01b      	beq.n	175e <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    1726:	2f00      	cmp	r7, #0
    1728:	db1f      	blt.n	176a <_usb_d_dev_ep_deinit+0xaa>
    172a:	016d      	lsls	r5, r5, #5
    172c:	4b16      	ldr	r3, [pc, #88]	; (1788 <_usb_d_dev_ep_deinit+0xc8>)
    172e:	469c      	mov	ip, r3
    1730:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1732:	2280      	movs	r2, #128	; 0x80
    1734:	0052      	lsls	r2, r2, #1
    1736:	5cab      	ldrb	r3, [r5, r2]
    1738:	2107      	movs	r1, #7
    173a:	438b      	bics	r3, r1
    173c:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    173e:	4b10      	ldr	r3, [pc, #64]	; (1780 <_usb_d_dev_ep_deinit+0xc0>)
    1740:	3360      	adds	r3, #96	; 0x60
    1742:	00b1      	lsls	r1, r6, #2
    1744:	198a      	adds	r2, r1, r6
    1746:	0092      	lsls	r2, r2, #2
    1748:	189a      	adds	r2, r3, r2
    174a:	3227      	adds	r2, #39	; 0x27
    174c:	2000      	movs	r0, #0
    174e:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    1750:	198e      	adds	r6, r1, r6
    1752:	00b6      	lsls	r6, r6, #2
    1754:	199b      	adds	r3, r3, r6
    1756:	3326      	adds	r3, #38	; 0x26
    1758:	22ff      	movs	r2, #255	; 0xff
    175a:	701a      	strb	r2, [r3, #0]
    175c:	e7bc      	b.n	16d8 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    175e:	3508      	adds	r5, #8
    1760:	016d      	lsls	r5, r5, #5
    1762:	2200      	movs	r2, #0
    1764:	4b08      	ldr	r3, [pc, #32]	; (1788 <_usb_d_dev_ep_deinit+0xc8>)
    1766:	54ea      	strb	r2, [r5, r3]
    1768:	e7e9      	b.n	173e <_usb_d_dev_ep_deinit+0x7e>
    176a:	0164      	lsls	r4, r4, #5
    176c:	4b06      	ldr	r3, [pc, #24]	; (1788 <_usb_d_dev_ep_deinit+0xc8>)
    176e:	469c      	mov	ip, r3
    1770:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1772:	2280      	movs	r2, #128	; 0x80
    1774:	0052      	lsls	r2, r2, #1
    1776:	5ca3      	ldrb	r3, [r4, r2]
    1778:	2170      	movs	r1, #112	; 0x70
    177a:	438b      	bics	r3, r1
    177c:	54a3      	strb	r3, [r4, r2]
    177e:	e7de      	b.n	173e <_usb_d_dev_ep_deinit+0x7e>
    1780:	20000108 	.word	0x20000108
    1784:	00000ebd 	.word	0x00000ebd
    1788:	41005000 	.word	0x41005000

0000178c <_usb_d_dev_ep_enable>:
{
    178c:	b5f0      	push	{r4, r5, r6, r7, lr}
    178e:	46c6      	mov	lr, r8
    1790:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    1792:	220f      	movs	r2, #15
    1794:	4002      	ands	r2, r0
    1796:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1798:	2a00      	cmp	r2, #0
    179a:	d100      	bne.n	179e <_usb_d_dev_ep_enable+0x12>
    179c:	e092      	b.n	18c4 <_usb_d_dev_ep_enable+0x138>
    179e:	0013      	movs	r3, r2
    17a0:	2800      	cmp	r0, #0
    17a2:	db0b      	blt.n	17bc <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17a4:	0011      	movs	r1, r2
    17a6:	3208      	adds	r2, #8
    17a8:	0152      	lsls	r2, r2, #5
    17aa:	4caa      	ldr	r4, [pc, #680]	; (1a54 <_usb_d_dev_ep_enable+0x2c8>)
    17ac:	5d15      	ldrb	r5, [r2, r4]
    17ae:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    17b0:	2902      	cmp	r1, #2
    17b2:	d800      	bhi.n	17b6 <_usb_d_dev_ep_enable+0x2a>
    17b4:	e08d      	b.n	18d2 <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    17b6:	2012      	movs	r0, #18
    17b8:	4240      	negs	r0, r0
    17ba:	e0e5      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17bc:	1c93      	adds	r3, r2, #2
    17be:	e7f1      	b.n	17a4 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    17c0:	3276      	adds	r2, #118	; 0x76
    17c2:	422a      	tst	r2, r5
    17c4:	d175      	bne.n	18b2 <_usb_d_dev_ep_enable+0x126>
    17c6:	4aa3      	ldr	r2, [pc, #652]	; (1a54 <_usb_d_dev_ep_enable+0x2c8>)
    17c8:	4690      	mov	r8, r2
    17ca:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    17cc:	2011      	movs	r0, #17
    17ce:	2280      	movs	r2, #128	; 0x80
    17d0:	0052      	lsls	r2, r2, #1
    17d2:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    17d4:	009a      	lsls	r2, r3, #2
    17d6:	18d2      	adds	r2, r2, r3
    17d8:	0095      	lsls	r5, r2, #2
    17da:	4a9f      	ldr	r2, [pc, #636]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    17dc:	3260      	adds	r2, #96	; 0x60
    17de:	1952      	adds	r2, r2, r5
    17e0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    17e2:	0395      	lsls	r5, r2, #14
    17e4:	489d      	ldr	r0, [pc, #628]	; (1a5c <_usb_d_dev_ep_enable+0x2d0>)
    17e6:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    17e8:	2080      	movs	r0, #128	; 0x80
    17ea:	0080      	lsls	r0, r0, #2
    17ec:	4282      	cmp	r2, r0
    17ee:	d900      	bls.n	17f2 <_usb_d_dev_ep_enable+0x66>
    17f0:	e0cd      	b.n	198e <_usb_d_dev_ep_enable+0x202>
    17f2:	3801      	subs	r0, #1
    17f4:	38ff      	subs	r0, #255	; 0xff
    17f6:	4282      	cmp	r2, r0
    17f8:	d900      	bls.n	17fc <_usb_d_dev_ep_enable+0x70>
    17fa:	e113      	b.n	1a24 <_usb_d_dev_ep_enable+0x298>
    17fc:	2a80      	cmp	r2, #128	; 0x80
    17fe:	d900      	bls.n	1802 <_usb_d_dev_ep_enable+0x76>
    1800:	e100      	b.n	1a04 <_usb_d_dev_ep_enable+0x278>
    1802:	2a40      	cmp	r2, #64	; 0x40
    1804:	d900      	bls.n	1808 <_usb_d_dev_ep_enable+0x7c>
    1806:	e115      	b.n	1a34 <_usb_d_dev_ep_enable+0x2a8>
    1808:	2a20      	cmp	r2, #32
    180a:	d900      	bls.n	180e <_usb_d_dev_ep_enable+0x82>
    180c:	e102      	b.n	1a14 <_usb_d_dev_ep_enable+0x288>
    180e:	2a10      	cmp	r2, #16
    1810:	d900      	bls.n	1814 <_usb_d_dev_ep_enable+0x88>
    1812:	e117      	b.n	1a44 <_usb_d_dev_ep_enable+0x2b8>
    1814:	38f8      	subs	r0, #248	; 0xf8
    1816:	4290      	cmp	r0, r2
    1818:	4180      	sbcs	r0, r0
    181a:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    181c:	0706      	lsls	r6, r0, #28
    181e:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1820:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1822:	0495      	lsls	r5, r2, #18
    1824:	0cad      	lsrs	r5, r5, #18
    1826:	e0b9      	b.n	199c <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1828:	2270      	movs	r2, #112	; 0x70
    182a:	422a      	tst	r2, r5
    182c:	d144      	bne.n	18b8 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    182e:	488a      	ldr	r0, [pc, #552]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    1830:	009e      	lsls	r6, r3, #2
    1832:	18f2      	adds	r2, r6, r3
    1834:	0092      	lsls	r2, r2, #2
    1836:	1882      	adds	r2, r0, r2
    1838:	3280      	adds	r2, #128	; 0x80
    183a:	79d2      	ldrb	r2, [r2, #7]
    183c:	0752      	lsls	r2, r2, #29
    183e:	0e52      	lsrs	r2, r2, #25
    1840:	4315      	orrs	r5, r2
    1842:	4a84      	ldr	r2, [pc, #528]	; (1a54 <_usb_d_dev_ep_enable+0x2c8>)
    1844:	4694      	mov	ip, r2
    1846:	4464      	add	r4, ip
    1848:	2280      	movs	r2, #128	; 0x80
    184a:	0052      	lsls	r2, r2, #1
    184c:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    184e:	3060      	adds	r0, #96	; 0x60
    1850:	18f6      	adds	r6, r6, r3
    1852:	00b6      	lsls	r6, r6, #2
    1854:	1980      	adds	r0, r0, r6
    1856:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    1858:	0485      	lsls	r5, r0, #18
    185a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    185c:	3201      	adds	r2, #1
    185e:	32ff      	adds	r2, #255	; 0xff
    1860:	2307      	movs	r3, #7
    1862:	4290      	cmp	r0, r2
    1864:	d814      	bhi.n	1890 <_usb_d_dev_ep_enable+0x104>
    1866:	3a01      	subs	r2, #1
    1868:	3aff      	subs	r2, #255	; 0xff
    186a:	3b01      	subs	r3, #1
    186c:	4290      	cmp	r0, r2
    186e:	d80f      	bhi.n	1890 <_usb_d_dev_ep_enable+0x104>
    1870:	3b01      	subs	r3, #1
    1872:	2880      	cmp	r0, #128	; 0x80
    1874:	d80c      	bhi.n	1890 <_usb_d_dev_ep_enable+0x104>
    1876:	3b01      	subs	r3, #1
    1878:	2840      	cmp	r0, #64	; 0x40
    187a:	d809      	bhi.n	1890 <_usb_d_dev_ep_enable+0x104>
    187c:	3b01      	subs	r3, #1
    187e:	2820      	cmp	r0, #32
    1880:	d806      	bhi.n	1890 <_usb_d_dev_ep_enable+0x104>
    1882:	3b01      	subs	r3, #1
    1884:	2810      	cmp	r0, #16
    1886:	d803      	bhi.n	1890 <_usb_d_dev_ep_enable+0x104>
    1888:	3af8      	subs	r2, #248	; 0xf8
    188a:	4282      	cmp	r2, r0
    188c:	4192      	sbcs	r2, r2
    188e:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1890:	071b      	lsls	r3, r3, #28
    1892:	432b      	orrs	r3, r5
    1894:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1896:	2280      	movs	r2, #128	; 0x80
    1898:	2382      	movs	r3, #130	; 0x82
    189a:	005b      	lsls	r3, r3, #1
    189c:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    189e:	0149      	lsls	r1, r1, #5
    18a0:	4b6d      	ldr	r3, [pc, #436]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    18a2:	1859      	adds	r1, r3, r1
    18a4:	2300      	movs	r3, #0
    18a6:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    18a8:	2000      	movs	r0, #0
    18aa:	e06d      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    18ac:	2012      	movs	r0, #18
    18ae:	4240      	negs	r0, r0
    18b0:	e06a      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    18b2:	2014      	movs	r0, #20
    18b4:	4240      	negs	r0, r0
    18b6:	e067      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    18b8:	2014      	movs	r0, #20
    18ba:	4240      	negs	r0, r0
    18bc:	e064      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    18be:	2014      	movs	r0, #20
    18c0:	4240      	negs	r0, r0
    18c2:	e061      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    18c4:	2380      	movs	r3, #128	; 0x80
    18c6:	005b      	lsls	r3, r3, #1
    18c8:	4a62      	ldr	r2, [pc, #392]	; (1a54 <_usb_d_dev_ep_enable+0x2c8>)
    18ca:	5cd5      	ldrb	r5, [r2, r3]
    18cc:	b2ed      	uxtb	r5, r5
    18ce:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    18d0:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    18d2:	009a      	lsls	r2, r3, #2
    18d4:	18d2      	adds	r2, r2, r3
    18d6:	0094      	lsls	r4, r2, #2
    18d8:	4a5f      	ldr	r2, [pc, #380]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    18da:	1912      	adds	r2, r2, r4
    18dc:	3286      	adds	r2, #134	; 0x86
    18de:	7812      	ldrb	r2, [r2, #0]
    18e0:	4694      	mov	ip, r2
    18e2:	2aff      	cmp	r2, #255	; 0xff
    18e4:	d0e2      	beq.n	18ac <_usb_d_dev_ep_enable+0x120>
    18e6:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    18e8:	4a5b      	ldr	r2, [pc, #364]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    18ea:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    18ec:	009e      	lsls	r6, r3, #2
    18ee:	18f6      	adds	r6, r6, r3
    18f0:	00b6      	lsls	r6, r6, #2
    18f2:	1992      	adds	r2, r2, r6
    18f4:	3280      	adds	r2, #128	; 0x80
    18f6:	79d6      	ldrb	r6, [r2, #7]
    18f8:	2207      	movs	r2, #7
    18fa:	4032      	ands	r2, r6
    18fc:	2a01      	cmp	r2, #1
    18fe:	d100      	bne.n	1902 <_usb_d_dev_ep_enable+0x176>
    1900:	e75e      	b.n	17c0 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    1902:	2800      	cmp	r0, #0
    1904:	db90      	blt.n	1828 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1906:	076a      	lsls	r2, r5, #29
    1908:	d1d9      	bne.n	18be <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    190a:	4853      	ldr	r0, [pc, #332]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    190c:	009e      	lsls	r6, r3, #2
    190e:	18f2      	adds	r2, r6, r3
    1910:	0092      	lsls	r2, r2, #2
    1912:	1882      	adds	r2, r0, r2
    1914:	3280      	adds	r2, #128	; 0x80
    1916:	79d2      	ldrb	r2, [r2, #7]
    1918:	0752      	lsls	r2, r2, #29
    191a:	0f52      	lsrs	r2, r2, #29
    191c:	4315      	orrs	r5, r2
    191e:	4a4d      	ldr	r2, [pc, #308]	; (1a54 <_usb_d_dev_ep_enable+0x2c8>)
    1920:	4694      	mov	ip, r2
    1922:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1924:	2280      	movs	r2, #128	; 0x80
    1926:	0052      	lsls	r2, r2, #1
    1928:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    192a:	3060      	adds	r0, #96	; 0x60
    192c:	18f6      	adds	r6, r6, r3
    192e:	00b6      	lsls	r6, r6, #2
    1930:	1980      	adds	r0, r0, r6
    1932:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    1934:	03ab      	lsls	r3, r5, #14
    1936:	4849      	ldr	r0, [pc, #292]	; (1a5c <_usb_d_dev_ep_enable+0x2d0>)
    1938:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    193a:	3201      	adds	r2, #1
    193c:	32ff      	adds	r2, #255	; 0xff
    193e:	2307      	movs	r3, #7
    1940:	4295      	cmp	r5, r2
    1942:	d814      	bhi.n	196e <_usb_d_dev_ep_enable+0x1e2>
    1944:	3a01      	subs	r2, #1
    1946:	3aff      	subs	r2, #255	; 0xff
    1948:	3b01      	subs	r3, #1
    194a:	4295      	cmp	r5, r2
    194c:	d80f      	bhi.n	196e <_usb_d_dev_ep_enable+0x1e2>
    194e:	3b01      	subs	r3, #1
    1950:	2d80      	cmp	r5, #128	; 0x80
    1952:	d80c      	bhi.n	196e <_usb_d_dev_ep_enable+0x1e2>
    1954:	3b01      	subs	r3, #1
    1956:	2d40      	cmp	r5, #64	; 0x40
    1958:	d809      	bhi.n	196e <_usb_d_dev_ep_enable+0x1e2>
    195a:	3b01      	subs	r3, #1
    195c:	2d20      	cmp	r5, #32
    195e:	d806      	bhi.n	196e <_usb_d_dev_ep_enable+0x1e2>
    1960:	3b01      	subs	r3, #1
    1962:	2d10      	cmp	r5, #16
    1964:	d803      	bhi.n	196e <_usb_d_dev_ep_enable+0x1e2>
    1966:	3af8      	subs	r2, #248	; 0xf8
    1968:	42aa      	cmp	r2, r5
    196a:	4192      	sbcs	r2, r2
    196c:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    196e:	071b      	lsls	r3, r3, #28
    1970:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1972:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1974:	2240      	movs	r2, #64	; 0x40
    1976:	2306      	movs	r3, #6
    1978:	33ff      	adds	r3, #255	; 0xff
    197a:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    197c:	0149      	lsls	r1, r1, #5
    197e:	4b36      	ldr	r3, [pc, #216]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    1980:	1859      	adds	r1, r3, r1
    1982:	2300      	movs	r3, #0
    1984:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    1986:	2000      	movs	r0, #0
}
    1988:	bc04      	pop	{r2}
    198a:	4690      	mov	r8, r2
    198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    198e:	20e0      	movs	r0, #224	; 0xe0
    1990:	05c0      	lsls	r0, r0, #23
    1992:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1994:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1996:	0495      	lsls	r5, r2, #18
    1998:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    199a:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    199c:	0700      	lsls	r0, r0, #28
    199e:	4328      	orrs	r0, r5
    19a0:	6178      	str	r0, [r7, #20]
    19a2:	2506      	movs	r5, #6
    19a4:	35ff      	adds	r5, #255	; 0xff
    19a6:	2640      	movs	r6, #64	; 0x40
    19a8:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    19aa:	2782      	movs	r7, #130	; 0x82
    19ac:	007f      	lsls	r7, r7, #1
    19ae:	2080      	movs	r0, #128	; 0x80
    19b0:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    19b2:	4829      	ldr	r0, [pc, #164]	; (1a58 <_usb_d_dev_ep_enable+0x2cc>)
    19b4:	0149      	lsls	r1, r1, #5
    19b6:	1841      	adds	r1, r0, r1
    19b8:	2400      	movs	r4, #0
    19ba:	728c      	strb	r4, [r1, #10]
    19bc:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19be:	340f      	adds	r4, #15
    19c0:	4661      	mov	r1, ip
    19c2:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    19c4:	0099      	lsls	r1, r3, #2
    19c6:	18c9      	adds	r1, r1, r3
    19c8:	0089      	lsls	r1, r1, #2
    19ca:	1841      	adds	r1, r0, r1
    19cc:	3180      	adds	r1, #128	; 0x80
    19ce:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    19d0:	0163      	lsls	r3, r4, #5
    19d2:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    19d4:	18c0      	adds	r0, r0, r3
    19d6:	6841      	ldr	r1, [r0, #4]
    19d8:	0492      	lsls	r2, r2, #18
    19da:	0914      	lsrs	r4, r2, #4
    19dc:	4a20      	ldr	r2, [pc, #128]	; (1a60 <_usb_d_dev_ep_enable+0x2d4>)
    19de:	400a      	ands	r2, r1
    19e0:	4322      	orrs	r2, r4
    19e2:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    19e4:	6842      	ldr	r2, [r0, #4]
    19e6:	0b92      	lsrs	r2, r2, #14
    19e8:	0392      	lsls	r2, r2, #14
    19ea:	6042      	str	r2, [r0, #4]
    19ec:	4a19      	ldr	r2, [pc, #100]	; (1a54 <_usb_d_dev_ep_enable+0x2c8>)
    19ee:	189a      	adds	r2, r3, r2
    19f0:	21b0      	movs	r1, #176	; 0xb0
    19f2:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19f4:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19f6:	4a1b      	ldr	r2, [pc, #108]	; (1a64 <_usb_d_dev_ep_enable+0x2d8>)
    19f8:	4694      	mov	ip, r2
    19fa:	4463      	add	r3, ip
    19fc:	2210      	movs	r2, #16
    19fe:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    1a00:	2000      	movs	r0, #0
    1a02:	e7c1      	b.n	1988 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a04:	20a0      	movs	r0, #160	; 0xa0
    1a06:	05c0      	lsls	r0, r0, #23
    1a08:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a0a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a0c:	0495      	lsls	r5, r2, #18
    1a0e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a10:	2005      	movs	r0, #5
    1a12:	e7c3      	b.n	199c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a14:	20c0      	movs	r0, #192	; 0xc0
    1a16:	0580      	lsls	r0, r0, #22
    1a18:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a1a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a1c:	0495      	lsls	r5, r2, #18
    1a1e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a20:	2003      	movs	r0, #3
    1a22:	e7bb      	b.n	199c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a24:	20c0      	movs	r0, #192	; 0xc0
    1a26:	05c0      	lsls	r0, r0, #23
    1a28:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a2a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a2c:	0495      	lsls	r5, r2, #18
    1a2e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a30:	2006      	movs	r0, #6
    1a32:	e7b3      	b.n	199c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a34:	2080      	movs	r0, #128	; 0x80
    1a36:	05c0      	lsls	r0, r0, #23
    1a38:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a3a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a3c:	0495      	lsls	r5, r2, #18
    1a3e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a40:	2004      	movs	r0, #4
    1a42:	e7ab      	b.n	199c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a44:	2080      	movs	r0, #128	; 0x80
    1a46:	0580      	lsls	r0, r0, #22
    1a48:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a4a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a4c:	0495      	lsls	r5, r2, #18
    1a4e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a50:	2002      	movs	r0, #2
    1a52:	e7a3      	b.n	199c <_usb_d_dev_ep_enable+0x210>
    1a54:	41005000 	.word	0x41005000
    1a58:	20000108 	.word	0x20000108
    1a5c:	0fffc000 	.word	0x0fffc000
    1a60:	f0003fff 	.word	0xf0003fff
    1a64:	41005109 	.word	0x41005109

00001a68 <_usb_d_dev_ep_stall>:
{
    1a68:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1a6a:	230f      	movs	r3, #15
    1a6c:	4003      	ands	r3, r0
    1a6e:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1a70:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1a72:	2b00      	cmp	r3, #0
    1a74:	d009      	beq.n	1a8a <_usb_d_dev_ep_stall+0x22>
    1a76:	001a      	movs	r2, r3
    1a78:	2800      	cmp	r0, #0
    1a7a:	db04      	blt.n	1a86 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    1a7c:	2b02      	cmp	r3, #2
    1a7e:	d905      	bls.n	1a8c <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    1a80:	2012      	movs	r0, #18
    1a82:	4240      	negs	r0, r0
    1a84:	e019      	b.n	1aba <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1a86:	1c9a      	adds	r2, r3, #2
    1a88:	e7f8      	b.n	1a7c <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    1a8a:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1a8c:	2901      	cmp	r1, #1
    1a8e:	d015      	beq.n	1abc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1a90:	2900      	cmp	r1, #0
    1a92:	d036      	beq.n	1b02 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a94:	0093      	lsls	r3, r2, #2
    1a96:	189b      	adds	r3, r3, r2
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	4a47      	ldr	r2, [pc, #284]	; (1bb8 <_usb_d_dev_ep_stall+0x150>)
    1a9c:	18d2      	adds	r2, r2, r3
    1a9e:	3286      	adds	r2, #134	; 0x86
    1aa0:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1aa2:	230f      	movs	r3, #15
    1aa4:	4013      	ands	r3, r2
    1aa6:	015b      	lsls	r3, r3, #5
    1aa8:	4a44      	ldr	r2, [pc, #272]	; (1bbc <_usb_d_dev_ep_stall+0x154>)
    1aaa:	4694      	mov	ip, r2
    1aac:	4463      	add	r3, ip
    1aae:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1ab0:	2310      	movs	r3, #16
    1ab2:	40a3      	lsls	r3, r4
    1ab4:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    1ab6:	1e43      	subs	r3, r0, #1
    1ab8:	4198      	sbcs	r0, r3
}
    1aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1abc:	2510      	movs	r5, #16
    1abe:	40a5      	lsls	r5, r4
    1ac0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1ac2:	493d      	ldr	r1, [pc, #244]	; (1bb8 <_usb_d_dev_ep_stall+0x150>)
    1ac4:	0090      	lsls	r0, r2, #2
    1ac6:	1883      	adds	r3, r0, r2
    1ac8:	009b      	lsls	r3, r3, #2
    1aca:	18cb      	adds	r3, r1, r3
    1acc:	3386      	adds	r3, #134	; 0x86
    1ace:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1ad0:	230f      	movs	r3, #15
    1ad2:	4033      	ands	r3, r6
    1ad4:	015e      	lsls	r6, r3, #5
    1ad6:	4f39      	ldr	r7, [pc, #228]	; (1bbc <_usb_d_dev_ep_stall+0x154>)
    1ad8:	46bc      	mov	ip, r7
    1ada:	4466      	add	r6, ip
    1adc:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1ade:	2520      	movs	r5, #32
    1ae0:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1ae2:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ae4:	015b      	lsls	r3, r3, #5
    1ae6:	4d36      	ldr	r5, [pc, #216]	; (1bc0 <_usb_d_dev_ep_stall+0x158>)
    1ae8:	46ac      	mov	ip, r5
    1aea:	4463      	add	r3, ip
    1aec:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    1aee:	1882      	adds	r2, r0, r2
    1af0:	0092      	lsls	r2, r2, #2
    1af2:	188a      	adds	r2, r1, r2
    1af4:	3280      	adds	r2, #128	; 0x80
    1af6:	79d3      	ldrb	r3, [r2, #7]
    1af8:	2108      	movs	r1, #8
    1afa:	430b      	orrs	r3, r1
    1afc:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1afe:	2000      	movs	r0, #0
    1b00:	e7db      	b.n	1aba <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1b02:	0093      	lsls	r3, r2, #2
    1b04:	189b      	adds	r3, r3, r2
    1b06:	0099      	lsls	r1, r3, #2
    1b08:	4b2b      	ldr	r3, [pc, #172]	; (1bb8 <_usb_d_dev_ep_stall+0x150>)
    1b0a:	185b      	adds	r3, r3, r1
    1b0c:	3386      	adds	r3, #134	; 0x86
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	210f      	movs	r1, #15
    1b12:	400b      	ands	r3, r1
    1b14:	015d      	lsls	r5, r3, #5
    1b16:	492b      	ldr	r1, [pc, #172]	; (1bc4 <_usb_d_dev_ep_stall+0x15c>)
    1b18:	468c      	mov	ip, r1
    1b1a:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1b1c:	2183      	movs	r1, #131	; 0x83
    1b1e:	0049      	lsls	r1, r1, #1
    1b20:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1b22:	39f6      	subs	r1, #246	; 0xf6
    1b24:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1b26:	2000      	movs	r0, #0
	if (!is_stalled) {
    1b28:	420e      	tst	r6, r1
    1b2a:	d0c6      	beq.n	1aba <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1b2c:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b2e:	3005      	adds	r0, #5
    1b30:	30ff      	adds	r0, #255	; 0xff
    1b32:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1b34:	2120      	movs	r1, #32
    1b36:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1b38:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1b3a:	015b      	lsls	r3, r3, #5
    1b3c:	4e22      	ldr	r6, [pc, #136]	; (1bc8 <_usb_d_dev_ep_stall+0x160>)
    1b3e:	46b4      	mov	ip, r6
    1b40:	4463      	add	r3, ip
    1b42:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1b44:	2308      	movs	r3, #8
    1b46:	33ff      	adds	r3, #255	; 0xff
    1b48:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1b4a:	420b      	tst	r3, r1
    1b4c:	d009      	beq.n	1b62 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b4e:	2308      	movs	r3, #8
    1b50:	33ff      	adds	r3, #255	; 0xff
    1b52:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1b54:	3b07      	subs	r3, #7
    1b56:	3bff      	subs	r3, #255	; 0xff
    1b58:	40a3      	lsls	r3, r4
    1b5a:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b5c:	2182      	movs	r1, #130	; 0x82
    1b5e:	0049      	lsls	r1, r1, #1
    1b60:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1b62:	0093      	lsls	r3, r2, #2
    1b64:	189b      	adds	r3, r3, r2
    1b66:	0099      	lsls	r1, r3, #2
    1b68:	4b13      	ldr	r3, [pc, #76]	; (1bb8 <_usb_d_dev_ep_stall+0x150>)
    1b6a:	185b      	adds	r3, r3, r1
    1b6c:	3380      	adds	r3, #128	; 0x80
    1b6e:	79d9      	ldrb	r1, [r3, #7]
    1b70:	2307      	movs	r3, #7
    1b72:	400b      	ands	r3, r1
    1b74:	2b01      	cmp	r3, #1
    1b76:	d00b      	beq.n	1b90 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    1b78:	0093      	lsls	r3, r2, #2
    1b7a:	189a      	adds	r2, r3, r2
    1b7c:	0092      	lsls	r2, r2, #2
    1b7e:	4b0e      	ldr	r3, [pc, #56]	; (1bb8 <_usb_d_dev_ep_stall+0x150>)
    1b80:	189b      	adds	r3, r3, r2
    1b82:	3380      	adds	r3, #128	; 0x80
    1b84:	79da      	ldrb	r2, [r3, #7]
    1b86:	2108      	movs	r1, #8
    1b88:	438a      	bics	r2, r1
    1b8a:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1b8c:	2000      	movs	r0, #0
    1b8e:	e794      	b.n	1aba <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1b90:	3306      	adds	r3, #6
    1b92:	33ff      	adds	r3, #255	; 0xff
    1b94:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1b96:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1b98:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1b9a:	4219      	tst	r1, r3
    1b9c:	d000      	beq.n	1ba0 <_usb_d_dev_ep_stall+0x138>
    1b9e:	e78c      	b.n	1aba <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1ba0:	0093      	lsls	r3, r2, #2
    1ba2:	189a      	adds	r2, r3, r2
    1ba4:	0092      	lsls	r2, r2, #2
    1ba6:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <_usb_d_dev_ep_stall+0x150>)
    1ba8:	189b      	adds	r3, r3, r2
    1baa:	3380      	adds	r3, #128	; 0x80
    1bac:	79da      	ldrb	r2, [r3, #7]
    1bae:	2108      	movs	r1, #8
    1bb0:	438a      	bics	r2, r1
    1bb2:	71da      	strb	r2, [r3, #7]
    1bb4:	e781      	b.n	1aba <_usb_d_dev_ep_stall+0x52>
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	20000108 	.word	0x20000108
    1bbc:	41005100 	.word	0x41005100
    1bc0:	41005109 	.word	0x41005109
    1bc4:	41005000 	.word	0x41005000
    1bc8:	41005108 	.word	0x41005108

00001bcc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1bd0:	230f      	movs	r3, #15
    1bd2:	4018      	ands	r0, r3
    1bd4:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1bd6:	4b16      	ldr	r3, [pc, #88]	; (1c30 <_usb_d_dev_ep_read_req+0x64>)
    1bd8:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    1bda:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1bdc:	685b      	ldr	r3, [r3, #4]
    1bde:	049b      	lsls	r3, r3, #18
    1be0:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1be2:	2802      	cmp	r0, #2
    1be4:	d81a      	bhi.n	1c1c <_usb_d_dev_ep_read_req+0x50>
    1be6:	2d00      	cmp	r5, #0
    1be8:	d01b      	beq.n	1c22 <_usb_d_dev_ep_read_req+0x56>
    1bea:	4b12      	ldr	r3, [pc, #72]	; (1c34 <_usb_d_dev_ep_read_req+0x68>)
    1bec:	469c      	mov	ip, r3
    1bee:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	005b      	lsls	r3, r3, #1
    1bf4:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1bf6:	2b11      	cmp	r3, #17
    1bf8:	d116      	bne.n	1c28 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1bfa:	2308      	movs	r3, #8
    1bfc:	33ff      	adds	r3, #255	; 0xff
    1bfe:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1c00:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1c02:	06db      	lsls	r3, r3, #27
    1c04:	d400      	bmi.n	1c08 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1c06:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    1c08:	2208      	movs	r2, #8
    1c0a:	0028      	movs	r0, r5
    1c0c:	4b0a      	ldr	r3, [pc, #40]	; (1c38 <_usb_d_dev_ep_read_req+0x6c>)
    1c0e:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c10:	2210      	movs	r2, #16
    1c12:	2308      	movs	r3, #8
    1c14:	33ff      	adds	r3, #255	; 0xff
    1c16:	54e2      	strb	r2, [r4, r3]
	return bytes;
    1c18:	0030      	movs	r0, r6
    1c1a:	e7f4      	b.n	1c06 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    1c1c:	2012      	movs	r0, #18
    1c1e:	4240      	negs	r0, r0
    1c20:	e7f1      	b.n	1c06 <_usb_d_dev_ep_read_req+0x3a>
    1c22:	2012      	movs	r0, #18
    1c24:	4240      	negs	r0, r0
    1c26:	e7ee      	b.n	1c06 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    1c28:	2013      	movs	r0, #19
    1c2a:	4240      	negs	r0, r0
    1c2c:	e7eb      	b.n	1c06 <_usb_d_dev_ep_read_req+0x3a>
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	20000108 	.word	0x20000108
    1c34:	41005000 	.word	0x41005000
    1c38:	00002c81 	.word	0x00002c81

00001c3c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3e:	46de      	mov	lr, fp
    1c40:	4657      	mov	r7, sl
    1c42:	464e      	mov	r6, r9
    1c44:	4645      	mov	r5, r8
    1c46:	b5e0      	push	{r5, r6, r7, lr}
    1c48:	b085      	sub	sp, #20
    1c4a:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1c4c:	7a06      	ldrb	r6, [r0, #8]
    1c4e:	230f      	movs	r3, #15
    1c50:	4033      	ands	r3, r6
    1c52:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1c54:	2b00      	cmp	r3, #0
    1c56:	d100      	bne.n	1c5a <_usb_d_dev_ep_trans+0x1e>
    1c58:	e0d3      	b.n	1e02 <_usb_d_dev_ep_trans+0x1c6>
    1c5a:	0018      	movs	r0, r3
    1c5c:	2e00      	cmp	r6, #0
    1c5e:	db39      	blt.n	1cd4 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    1c60:	0004      	movs	r4, r0
    1c62:	4a73      	ldr	r2, [pc, #460]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1c64:	3260      	adds	r2, #96	; 0x60
    1c66:	1c41      	adds	r1, r0, #1
    1c68:	008d      	lsls	r5, r1, #2
    1c6a:	186d      	adds	r5, r5, r1
    1c6c:	00ad      	lsls	r5, r5, #2
    1c6e:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1c70:	0081      	lsls	r1, r0, #2
    1c72:	1809      	adds	r1, r1, r0
    1c74:	0089      	lsls	r1, r1, #2
    1c76:	1852      	adds	r2, r2, r1
    1c78:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1c7a:	4a6e      	ldr	r2, [pc, #440]	; (1e34 <_usb_d_dev_ep_trans+0x1f8>)
    1c7c:	4291      	cmp	r1, r2
    1c7e:	d02b      	beq.n	1cd8 <_usb_d_dev_ep_trans+0x9c>
    1c80:	1e4f      	subs	r7, r1, #1
    1c82:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    1c84:	4642      	mov	r2, r8
    1c86:	6852      	ldr	r2, [r2, #4]
    1c88:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1c8a:	2b02      	cmp	r3, #2
    1c8c:	d900      	bls.n	1c90 <_usb_d_dev_ep_trans+0x54>
    1c8e:	e0a4      	b.n	1dda <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1c90:	4643      	mov	r3, r8
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	4868      	ldr	r0, [pc, #416]	; (1e38 <_usb_d_dev_ep_trans+0x1fc>)
    1c96:	4283      	cmp	r3, r0
    1c98:	d920      	bls.n	1cdc <_usb_d_dev_ep_trans+0xa0>
    1c9a:	1898      	adds	r0, r3, r2
    1c9c:	9001      	str	r0, [sp, #4]
    1c9e:	4867      	ldr	r0, [pc, #412]	; (1e3c <_usb_d_dev_ep_trans+0x200>)
    1ca0:	4684      	mov	ip, r0
    1ca2:	9801      	ldr	r0, [sp, #4]
    1ca4:	4560      	cmp	r0, ip
    1ca6:	d819      	bhi.n	1cdc <_usb_d_dev_ep_trans+0xa0>
    1ca8:	079b      	lsls	r3, r3, #30
    1caa:	d117      	bne.n	1cdc <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1cac:	2e00      	cmp	r6, #0
    1cae:	db32      	blt.n	1d16 <_usb_d_dev_ep_trans+0xda>
    1cb0:	4291      	cmp	r1, r2
    1cb2:	d900      	bls.n	1cb6 <_usb_d_dev_ep_trans+0x7a>
    1cb4:	e0af      	b.n	1e16 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1cb6:	2f00      	cmp	r7, #0
    1cb8:	d030      	beq.n	1d1c <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    1cba:	00a3      	lsls	r3, r4, #2
    1cbc:	191b      	adds	r3, r3, r4
    1cbe:	009a      	lsls	r2, r3, #2
    1cc0:	4b5b      	ldr	r3, [pc, #364]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1cc2:	189b      	adds	r3, r3, r2
    1cc4:	3380      	adds	r3, #128	; 0x80
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d100      	bne.n	1cce <_usb_d_dev_ep_trans+0x92>
    1ccc:	e08b      	b.n	1de6 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    1cce:	2300      	movs	r3, #0
    1cd0:	4699      	mov	r9, r3
    1cd2:	e00f      	b.n	1cf4 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1cd4:	1c98      	adds	r0, r3, #2
    1cd6:	e7c3      	b.n	1c60 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1cd8:	000f      	movs	r7, r1
    1cda:	e7d3      	b.n	1c84 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    1cdc:	00a3      	lsls	r3, r4, #2
    1cde:	191b      	adds	r3, r3, r4
    1ce0:	009a      	lsls	r2, r3, #2
    1ce2:	4b53      	ldr	r3, [pc, #332]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1ce4:	189b      	adds	r3, r3, r2
    1ce6:	3380      	adds	r3, #128	; 0x80
    1ce8:	681b      	ldr	r3, [r3, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d100      	bne.n	1cf0 <_usb_d_dev_ep_trans+0xb4>
    1cee:	e077      	b.n	1de0 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    1cf0:	2301      	movs	r3, #1
    1cf2:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1cf4:	00a3      	lsls	r3, r4, #2
    1cf6:	191b      	adds	r3, r3, r4
    1cf8:	009a      	lsls	r2, r3, #2
    1cfa:	4b4d      	ldr	r3, [pc, #308]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1cfc:	189b      	adds	r3, r3, r2
    1cfe:	3380      	adds	r3, #128	; 0x80
    1d00:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    1d02:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1d04:	071b      	lsls	r3, r3, #28
    1d06:	d50c      	bpl.n	1d22 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1d08:	b005      	add	sp, #20
    1d0a:	bc3c      	pop	{r2, r3, r4, r5}
    1d0c:	4690      	mov	r8, r2
    1d0e:	4699      	mov	r9, r3
    1d10:	46a2      	mov	sl, r4
    1d12:	46ab      	mov	fp, r5
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    1d16:	2300      	movs	r3, #0
    1d18:	4699      	mov	r9, r3
    1d1a:	e7eb      	b.n	1cf4 <_usb_d_dev_ep_trans+0xb8>
    1d1c:	2300      	movs	r3, #0
    1d1e:	4699      	mov	r9, r3
    1d20:	e7e8      	b.n	1cf4 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    1d22:	a803      	add	r0, sp, #12
    1d24:	4b46      	ldr	r3, [pc, #280]	; (1e40 <_usb_d_dev_ep_trans+0x204>)
    1d26:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1d28:	00a3      	lsls	r3, r4, #2
    1d2a:	191b      	adds	r3, r3, r4
    1d2c:	009a      	lsls	r2, r3, #2
    1d2e:	4b40      	ldr	r3, [pc, #256]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1d30:	189b      	adds	r3, r3, r2
    1d32:	3380      	adds	r3, #128	; 0x80
    1d34:	79db      	ldrb	r3, [r3, #7]
    1d36:	065b      	lsls	r3, r3, #25
    1d38:	d444      	bmi.n	1dc4 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    1d3a:	00a3      	lsls	r3, r4, #2
    1d3c:	191b      	adds	r3, r3, r4
    1d3e:	009b      	lsls	r3, r3, #2
    1d40:	4a3b      	ldr	r2, [pc, #236]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1d42:	4693      	mov	fp, r2
    1d44:	449b      	add	fp, r3
    1d46:	2380      	movs	r3, #128	; 0x80
    1d48:	445b      	add	r3, fp
    1d4a:	469a      	mov	sl, r3
    1d4c:	79db      	ldrb	r3, [r3, #7]
    1d4e:	2240      	movs	r2, #64	; 0x40
    1d50:	4313      	orrs	r3, r2
    1d52:	4652      	mov	r2, sl
    1d54:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1d56:	a803      	add	r0, sp, #12
    1d58:	4b3a      	ldr	r3, [pc, #232]	; (1e44 <_usb_d_dev_ep_trans+0x208>)
    1d5a:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1d5c:	465b      	mov	r3, fp
    1d5e:	4642      	mov	r2, r8
    1d60:	6812      	ldr	r2, [r2, #0]
    1d62:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1d64:	4642      	mov	r2, r8
    1d66:	6852      	ldr	r2, [r2, #4]
    1d68:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1d6a:	2300      	movs	r3, #0
    1d6c:	465a      	mov	r2, fp
    1d6e:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1d70:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1d72:	01d2      	lsls	r2, r2, #7
    1d74:	4653      	mov	r3, sl
    1d76:	79d9      	ldrb	r1, [r3, #7]
    1d78:	237f      	movs	r3, #127	; 0x7f
    1d7a:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1d7c:	4649      	mov	r1, r9
    1d7e:	0149      	lsls	r1, r1, #5
    1d80:	4313      	orrs	r3, r2
    1d82:	2220      	movs	r2, #32
    1d84:	4393      	bics	r3, r2
    1d86:	430b      	orrs	r3, r1
    1d88:	4652      	mov	r2, sl
    1d8a:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1d8c:	4643      	mov	r3, r8
    1d8e:	7a5b      	ldrb	r3, [r3, #9]
    1d90:	2200      	movs	r2, #0
    1d92:	2b00      	cmp	r3, #0
    1d94:	d002      	beq.n	1d9c <_usb_d_dev_ep_trans+0x160>
    1d96:	427a      	negs	r2, r7
    1d98:	417a      	adcs	r2, r7
    1d9a:	b2d2      	uxtb	r2, r2
    1d9c:	00a3      	lsls	r3, r4, #2
    1d9e:	191c      	adds	r4, r3, r4
    1da0:	00a4      	lsls	r4, r4, #2
    1da2:	4b23      	ldr	r3, [pc, #140]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1da4:	191b      	adds	r3, r3, r4
    1da6:	3380      	adds	r3, #128	; 0x80
    1da8:	0112      	lsls	r2, r2, #4
    1daa:	79df      	ldrb	r7, [r3, #7]
    1dac:	2110      	movs	r1, #16
    1dae:	438f      	bics	r7, r1
    1db0:	4317      	orrs	r7, r2
    1db2:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1db4:	2e00      	cmp	r6, #0
    1db6:	db0a      	blt.n	1dce <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1db8:	2100      	movs	r1, #0
    1dba:	0028      	movs	r0, r5
    1dbc:	4b22      	ldr	r3, [pc, #136]	; (1e48 <_usb_d_dev_ep_trans+0x20c>)
    1dbe:	4798      	blx	r3
	return ERR_NONE;
    1dc0:	2000      	movs	r0, #0
    1dc2:	e7a1      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1dc4:	a803      	add	r0, sp, #12
    1dc6:	4b1f      	ldr	r3, [pc, #124]	; (1e44 <_usb_d_dev_ep_trans+0x208>)
    1dc8:	4798      	blx	r3
		return USB_BUSY;
    1dca:	2001      	movs	r0, #1
    1dcc:	e79c      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1dce:	2100      	movs	r1, #0
    1dd0:	0028      	movs	r0, r5
    1dd2:	4b1e      	ldr	r3, [pc, #120]	; (1e4c <_usb_d_dev_ep_trans+0x210>)
    1dd4:	4798      	blx	r3
	return ERR_NONE;
    1dd6:	2000      	movs	r0, #0
    1dd8:	e796      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    1dda:	2012      	movs	r0, #18
    1ddc:	4240      	negs	r0, r0
    1dde:	e793      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1de0:	2013      	movs	r0, #19
    1de2:	4240      	negs	r0, r0
    1de4:	e790      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    1de6:	2012      	movs	r0, #18
    1de8:	4240      	negs	r0, r0
    1dea:	e78d      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1dec:	2013      	movs	r0, #19
    1dee:	4240      	negs	r0, r0
    1df0:	e78a      	b.n	1d08 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    1df2:	4643      	mov	r3, r8
    1df4:	685a      	ldr	r2, [r3, #4]
    1df6:	0597      	lsls	r7, r2, #22
    1df8:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    1dfa:	4d0d      	ldr	r5, [pc, #52]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1dfc:	3574      	adds	r5, #116	; 0x74
    1dfe:	2400      	movs	r4, #0
    1e00:	e746      	b.n	1c90 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e02:	4a0b      	ldr	r2, [pc, #44]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1e04:	3260      	adds	r2, #96	; 0x60
    1e06:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1e08:	4a0a      	ldr	r2, [pc, #40]	; (1e34 <_usb_d_dev_ep_trans+0x1f8>)
    1e0a:	4291      	cmp	r1, r2
    1e0c:	d0f1      	beq.n	1df2 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    1e0e:	4d08      	ldr	r5, [pc, #32]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1e10:	3574      	adds	r5, #116	; 0x74
    1e12:	2400      	movs	r4, #0
    1e14:	e734      	b.n	1c80 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1e16:	00a3      	lsls	r3, r4, #2
    1e18:	191b      	adds	r3, r3, r4
    1e1a:	009a      	lsls	r2, r3, #2
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <_usb_d_dev_ep_trans+0x1f4>)
    1e1e:	189b      	adds	r3, r3, r2
    1e20:	3380      	adds	r3, #128	; 0x80
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d0e1      	beq.n	1dec <_usb_d_dev_ep_trans+0x1b0>
    1e28:	2301      	movs	r3, #1
    1e2a:	4699      	mov	r9, r3
    1e2c:	e762      	b.n	1cf4 <_usb_d_dev_ep_trans+0xb8>
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	20000108 	.word	0x20000108
    1e34:	000003ff 	.word	0x000003ff
    1e38:	1fffffff 	.word	0x1fffffff
    1e3c:	20007fff 	.word	0x20007fff
    1e40:	0000032d 	.word	0x0000032d
    1e44:	0000033b 	.word	0x0000033b
    1e48:	00001215 	.word	0x00001215
    1e4c:	0000106d 	.word	0x0000106d

00001e50 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1e50:	1e0b      	subs	r3, r1, #0
    1e52:	d006      	beq.n	1e62 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    1e54:	2801      	cmp	r0, #1
    1e56:	d006      	beq.n	1e66 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1e58:	2800      	cmp	r0, #0
    1e5a:	d101      	bne.n	1e60 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1e5c:	4a03      	ldr	r2, [pc, #12]	; (1e6c <_usb_d_dev_register_callback+0x1c>)
    1e5e:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    1e60:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1e62:	4b03      	ldr	r3, [pc, #12]	; (1e70 <_usb_d_dev_register_callback+0x20>)
    1e64:	e7f6      	b.n	1e54 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1e66:	4a01      	ldr	r2, [pc, #4]	; (1e6c <_usb_d_dev_register_callback+0x1c>)
    1e68:	6653      	str	r3, [r2, #100]	; 0x64
    1e6a:	e7f9      	b.n	1e60 <_usb_d_dev_register_callback+0x10>
    1e6c:	20000108 	.word	0x20000108
    1e70:	00000dd5 	.word	0x00000dd5

00001e74 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1e74:	1e0b      	subs	r3, r1, #0
    1e76:	d008      	beq.n	1e8a <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1e78:	2800      	cmp	r0, #0
    1e7a:	d008      	beq.n	1e8e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1e7c:	2801      	cmp	r0, #1
    1e7e:	d009      	beq.n	1e94 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1e80:	2802      	cmp	r0, #2
    1e82:	d106      	bne.n	1e92 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1e84:	4a05      	ldr	r2, [pc, #20]	; (1e9c <_usb_d_dev_register_ep_callback+0x28>)
    1e86:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1e88:	e003      	b.n	1e92 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1e8a:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <_usb_d_dev_register_ep_callback+0x2c>)
    1e8c:	e7f4      	b.n	1e78 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1e8e:	4a03      	ldr	r2, [pc, #12]	; (1e9c <_usb_d_dev_register_ep_callback+0x28>)
    1e90:	6693      	str	r3, [r2, #104]	; 0x68
}
    1e92:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1e94:	4a01      	ldr	r2, [pc, #4]	; (1e9c <_usb_d_dev_register_ep_callback+0x28>)
    1e96:	66d3      	str	r3, [r2, #108]	; 0x6c
    1e98:	e7fb      	b.n	1e92 <_usb_d_dev_register_ep_callback+0x1e>
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	20000108 	.word	0x20000108
    1ea0:	00000dd5 	.word	0x00000dd5

00001ea4 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1ea6:	4b82      	ldr	r3, [pc, #520]	; (20b0 <STACK_SIZE+0xb0>)
    1ea8:	8c1e      	ldrh	r6, [r3, #32]
    1eaa:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1eac:	2e00      	cmp	r6, #0
    1eae:	d003      	beq.n	1eb8 <USB_Handler+0x14>
    1eb0:	4c80      	ldr	r4, [pc, #512]	; (20b4 <STACK_SIZE+0xb4>)
    1eb2:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1eb4:	2500      	movs	r5, #0
    1eb6:	e0b9      	b.n	202c <STACK_SIZE+0x2c>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1eb8:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1eba:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1ebc:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1ebe:	075a      	lsls	r2, r3, #29
    1ec0:	d417      	bmi.n	1ef2 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1ec2:	059a      	lsls	r2, r3, #22
    1ec4:	d41c      	bmi.n	1f00 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1ec6:	061a      	lsls	r2, r3, #24
    1ec8:	d43e      	bmi.n	1f48 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1eca:	2270      	movs	r2, #112	; 0x70
    1ecc:	421a      	tst	r2, r3
    1ece:	d144      	bne.n	1f5a <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1ed0:	071a      	lsls	r2, r3, #28
    1ed2:	d45e      	bmi.n	1f92 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1ed4:	07db      	lsls	r3, r3, #31
    1ed6:	d5eb      	bpl.n	1eb0 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1ed8:	4b75      	ldr	r3, [pc, #468]	; (20b0 <STACK_SIZE+0xb0>)
    1eda:	4a77      	ldr	r2, [pc, #476]	; (20b8 <STACK_SIZE+0xb8>)
    1edc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1ede:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ee0:	3a92      	subs	r2, #146	; 0x92
    1ee2:	3aff      	subs	r2, #255	; 0xff
    1ee4:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1ee6:	4b73      	ldr	r3, [pc, #460]	; (20b4 <STACK_SIZE+0xb4>)
    1ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1eea:	2100      	movs	r1, #0
    1eec:	2004      	movs	r0, #4
    1eee:	4798      	blx	r3
    1ef0:	e005      	b.n	1efe <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1ef2:	2204      	movs	r2, #4
    1ef4:	4b6e      	ldr	r3, [pc, #440]	; (20b0 <STACK_SIZE+0xb0>)
    1ef6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1ef8:	4b6e      	ldr	r3, [pc, #440]	; (20b4 <STACK_SIZE+0xb4>)
    1efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1efc:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f00:	4b6b      	ldr	r3, [pc, #428]	; (20b0 <STACK_SIZE+0xb0>)
    1f02:	4a6d      	ldr	r2, [pc, #436]	; (20b8 <STACK_SIZE+0xb8>)
    1f04:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1f06:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1f08:	3a92      	subs	r2, #146	; 0x92
    1f0a:	3aff      	subs	r2, #255	; 0xff
    1f0c:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1f0e:	4b69      	ldr	r3, [pc, #420]	; (20b4 <STACK_SIZE+0xb4>)
    1f10:	891b      	ldrh	r3, [r3, #8]
    1f12:	071b      	lsls	r3, r3, #28
    1f14:	0f1b      	lsrs	r3, r3, #28
    1f16:	2b03      	cmp	r3, #3
    1f18:	d00c      	beq.n	1f34 <USB_Handler+0x90>
    1f1a:	4b66      	ldr	r3, [pc, #408]	; (20b4 <STACK_SIZE+0xb4>)
    1f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1f1e:	071b      	lsls	r3, r3, #28
    1f20:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1f22:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1f24:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1f26:	2b03      	cmp	r3, #3
    1f28:	d005      	beq.n	1f36 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1f2a:	4b62      	ldr	r3, [pc, #392]	; (20b4 <STACK_SIZE+0xb4>)
    1f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1f2e:	2003      	movs	r0, #3
    1f30:	4798      	blx	r3
    1f32:	e7e4      	b.n	1efe <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1f34:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1f36:	0152      	lsls	r2, r2, #5
    1f38:	4b5e      	ldr	r3, [pc, #376]	; (20b4 <STACK_SIZE+0xb4>)
    1f3a:	189b      	adds	r3, r3, r2
    1f3c:	8919      	ldrh	r1, [r3, #8]
    1f3e:	0449      	lsls	r1, r1, #17
    1f40:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1f42:	2200      	movs	r2, #0
    1f44:	811a      	strh	r2, [r3, #8]
    1f46:	e7f0      	b.n	1f2a <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1f48:	2280      	movs	r2, #128	; 0x80
    1f4a:	4b59      	ldr	r3, [pc, #356]	; (20b0 <STACK_SIZE+0xb0>)
    1f4c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1f4e:	4b59      	ldr	r3, [pc, #356]	; (20b4 <STACK_SIZE+0xb4>)
    1f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1f52:	2100      	movs	r1, #0
    1f54:	2005      	movs	r0, #5
    1f56:	4798      	blx	r3
    1f58:	e7d1      	b.n	1efe <USB_Handler+0x5a>
    1f5a:	4b55      	ldr	r3, [pc, #340]	; (20b0 <STACK_SIZE+0xb0>)
    1f5c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1f5e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1f60:	4a55      	ldr	r2, [pc, #340]	; (20b8 <STACK_SIZE+0xb8>)
    1f62:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1f64:	4b55      	ldr	r3, [pc, #340]	; (20bc <STACK_SIZE+0xbc>)
    1f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1f68:	069b      	lsls	r3, r3, #26
    1f6a:	d40c      	bmi.n	1f86 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1f6c:	4953      	ldr	r1, [pc, #332]	; (20bc <STACK_SIZE+0xbc>)
	tmp &= mask;
    1f6e:	3a32      	subs	r2, #50	; 0x32
    1f70:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1f72:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1f74:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    1f76:	2bd0      	cmp	r3, #208	; 0xd0
    1f78:	d1fb      	bne.n	1f72 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1f7a:	4b4e      	ldr	r3, [pc, #312]	; (20b4 <STACK_SIZE+0xb4>)
    1f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1f7e:	2100      	movs	r1, #0
    1f80:	2002      	movs	r0, #2
    1f82:	4798      	blx	r3
    1f84:	e7bb      	b.n	1efe <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1f86:	494d      	ldr	r1, [pc, #308]	; (20bc <STACK_SIZE+0xbc>)
	tmp &= mask;
    1f88:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1f8a:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    1f8c:	421a      	tst	r2, r3
    1f8e:	d0fc      	beq.n	1f8a <USB_Handler+0xe6>
    1f90:	e7f3      	b.n	1f7a <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1f92:	4b47      	ldr	r3, [pc, #284]	; (20b0 <STACK_SIZE+0xb0>)
    1f94:	2100      	movs	r1, #0
    1f96:	2280      	movs	r2, #128	; 0x80
    1f98:	0052      	lsls	r2, r2, #1
    1f9a:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1f9c:	3af8      	subs	r2, #248	; 0xf8
    1f9e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1fa0:	3268      	adds	r2, #104	; 0x68
    1fa2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1fa4:	4a44      	ldr	r2, [pc, #272]	; (20b8 <STACK_SIZE+0xb8>)
    1fa6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1fa8:	4b45      	ldr	r3, [pc, #276]	; (20c0 <STACK_SIZE+0xc0>)
    1faa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1fac:	4b41      	ldr	r3, [pc, #260]	; (20b4 <STACK_SIZE+0xb4>)
    1fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1fb0:	2100      	movs	r1, #0
    1fb2:	2001      	movs	r0, #1
    1fb4:	4798      	blx	r3
    1fb6:	e7a2      	b.n	1efe <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1fb8:	06cb      	lsls	r3, r1, #27
    1fba:	d407      	bmi.n	1fcc <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1fbc:	064b      	lsls	r3, r1, #25
    1fbe:	d408      	bmi.n	1fd2 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1fc0:	068b      	lsls	r3, r1, #26
    1fc2:	d52e      	bpl.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_stall(ept, 0);
    1fc4:	2100      	movs	r1, #0
    1fc6:	4b3f      	ldr	r3, [pc, #252]	; (20c4 <STACK_SIZE+0xc4>)
    1fc8:	4798      	blx	r3
    1fca:	e02a      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_setup(ept);
    1fcc:	4b3e      	ldr	r3, [pc, #248]	; (20c8 <STACK_SIZE+0xc8>)
    1fce:	4798      	blx	r3
    1fd0:	e027      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_stall(ept, 1);
    1fd2:	2101      	movs	r1, #1
    1fd4:	4b3b      	ldr	r3, [pc, #236]	; (20c4 <STACK_SIZE+0xc4>)
    1fd6:	4798      	blx	r3
    1fd8:	e023      	b.n	2022 <STACK_SIZE+0x22>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1fda:	064b      	lsls	r3, r1, #25
    1fdc:	d40e      	bmi.n	1ffc <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1fde:	070b      	lsls	r3, r1, #28
    1fe0:	d410      	bmi.n	2004 <STACK_SIZE+0x4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1fe2:	078b      	lsls	r3, r1, #30
    1fe4:	d412      	bmi.n	200c <STACK_SIZE+0xc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1fe6:	2307      	movs	r3, #7
    1fe8:	401a      	ands	r2, r3
    1fea:	2a01      	cmp	r2, #1
    1fec:	d119      	bne.n	2022 <STACK_SIZE+0x22>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1fee:	074b      	lsls	r3, r1, #29
    1ff0:	d410      	bmi.n	2014 <STACK_SIZE+0x14>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1ff2:	06cb      	lsls	r3, r1, #27
    1ff4:	d515      	bpl.n	2022 <STACK_SIZE+0x22>
			_usb_d_dev_handle_setup(ept);
    1ff6:	4b34      	ldr	r3, [pc, #208]	; (20c8 <STACK_SIZE+0xc8>)
    1ff8:	4798      	blx	r3
    1ffa:	e012      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_stall(ept, 1);
    1ffc:	2101      	movs	r1, #1
    1ffe:	4b31      	ldr	r3, [pc, #196]	; (20c4 <STACK_SIZE+0xc4>)
    2000:	4798      	blx	r3
    2002:	e00e      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_trfail(ept, 1);
    2004:	2101      	movs	r1, #1
    2006:	4b31      	ldr	r3, [pc, #196]	; (20cc <STACK_SIZE+0xcc>)
    2008:	4798      	blx	r3
    200a:	e00a      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_in_next(ept, true);
    200c:	2101      	movs	r1, #1
    200e:	4b30      	ldr	r3, [pc, #192]	; (20d0 <STACK_SIZE+0xd0>)
    2010:	4798      	blx	r3
    2012:	e006      	b.n	2022 <STACK_SIZE+0x22>
			_usb_d_dev_handle_trfail(ept, 0);
    2014:	2100      	movs	r1, #0
    2016:	4b2d      	ldr	r3, [pc, #180]	; (20cc <STACK_SIZE+0xcc>)
    2018:	4798      	blx	r3
    201a:	e002      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_stall(ept, 0);
    201c:	2100      	movs	r1, #0
    201e:	4b29      	ldr	r3, [pc, #164]	; (20c4 <STACK_SIZE+0xc4>)
    2020:	4798      	blx	r3
    2022:	3501      	adds	r5, #1
    2024:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2026:	2d09      	cmp	r5, #9
    2028:	d100      	bne.n	202c <STACK_SIZE+0x2c>
    202a:	e768      	b.n	1efe <USB_Handler+0x5a>
    202c:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    202e:	7ca1      	ldrb	r1, [r4, #18]
    2030:	29ff      	cmp	r1, #255	; 0xff
    2032:	d0f6      	beq.n	2022 <STACK_SIZE+0x22>
	if (!(epint & (1u << epn))) {
    2034:	230f      	movs	r3, #15
    2036:	400b      	ands	r3, r1
    2038:	2101      	movs	r1, #1
    203a:	4099      	lsls	r1, r3
    203c:	420e      	tst	r6, r1
    203e:	d0f0      	beq.n	2022 <STACK_SIZE+0x22>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2040:	0159      	lsls	r1, r3, #5
    2042:	4f24      	ldr	r7, [pc, #144]	; (20d4 <STACK_SIZE+0xd4>)
    2044:	46bc      	mov	ip, r7
    2046:	4461      	add	r1, ip
    2048:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    204a:	015b      	lsls	r3, r3, #5
    204c:	4f22      	ldr	r7, [pc, #136]	; (20d8 <STACK_SIZE+0xd8>)
    204e:	46bc      	mov	ip, r7
    2050:	4463      	add	r3, ip
    2052:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2054:	4019      	ands	r1, r3
	if (flags) {
    2056:	d0e4      	beq.n	2022 <STACK_SIZE+0x22>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2058:	00ab      	lsls	r3, r5, #2
    205a:	195a      	adds	r2, r3, r5
    205c:	0092      	lsls	r2, r2, #2
    205e:	4b15      	ldr	r3, [pc, #84]	; (20b4 <STACK_SIZE+0xb4>)
    2060:	469c      	mov	ip, r3
    2062:	4462      	add	r2, ip
    2064:	3270      	adds	r2, #112	; 0x70
    2066:	7dd2      	ldrb	r2, [r2, #23]
    2068:	2347      	movs	r3, #71	; 0x47
    206a:	4013      	ands	r3, r2
    206c:	2b01      	cmp	r3, #1
    206e:	d0a3      	beq.n	1fb8 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2070:	b253      	sxtb	r3, r2
    2072:	2b00      	cmp	r3, #0
    2074:	dbb1      	blt.n	1fda <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2076:	068b      	lsls	r3, r1, #26
    2078:	d4d0      	bmi.n	201c <STACK_SIZE+0x1c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    207a:	074b      	lsls	r3, r1, #29
    207c:	d40c      	bmi.n	2098 <STACK_SIZE+0x98>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    207e:	07cb      	lsls	r3, r1, #31
    2080:	d40e      	bmi.n	20a0 <STACK_SIZE+0xa0>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2082:	2307      	movs	r3, #7
    2084:	401a      	ands	r2, r3
    2086:	2a01      	cmp	r2, #1
    2088:	d1cb      	bne.n	2022 <STACK_SIZE+0x22>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    208a:	070b      	lsls	r3, r1, #28
    208c:	d40c      	bmi.n	20a8 <STACK_SIZE+0xa8>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    208e:	06cb      	lsls	r3, r1, #27
    2090:	d5c7      	bpl.n	2022 <STACK_SIZE+0x22>
			_usb_d_dev_handle_setup(ept);
    2092:	4b0d      	ldr	r3, [pc, #52]	; (20c8 <STACK_SIZE+0xc8>)
    2094:	4798      	blx	r3
    2096:	e7c4      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_handle_trfail(ept, 0);
    2098:	2100      	movs	r1, #0
    209a:	4b0c      	ldr	r3, [pc, #48]	; (20cc <STACK_SIZE+0xcc>)
    209c:	4798      	blx	r3
    209e:	e7c0      	b.n	2022 <STACK_SIZE+0x22>
		_usb_d_dev_out_next(ept, true);
    20a0:	2101      	movs	r1, #1
    20a2:	4b0e      	ldr	r3, [pc, #56]	; (20dc <STACK_SIZE+0xdc>)
    20a4:	4798      	blx	r3
    20a6:	e7bc      	b.n	2022 <STACK_SIZE+0x22>
			_usb_d_dev_handle_trfail(ept, 1);
    20a8:	2101      	movs	r1, #1
    20aa:	4b08      	ldr	r3, [pc, #32]	; (20cc <STACK_SIZE+0xcc>)
    20ac:	4798      	blx	r3
    20ae:	e7b8      	b.n	2022 <STACK_SIZE+0x22>
    20b0:	41005000 	.word	0x41005000
    20b4:	20000108 	.word	0x20000108
    20b8:	00000201 	.word	0x00000201
    20bc:	40000800 	.word	0x40000800
    20c0:	00001029 	.word	0x00001029
    20c4:	00000e65 	.word	0x00000e65
    20c8:	00000dd9 	.word	0x00000dd9
    20cc:	00000f29 	.word	0x00000f29
    20d0:	0000106d 	.word	0x0000106d
    20d4:	41005100 	.word	0x41005100
    20d8:	41005109 	.word	0x41005109
    20dc:	00001215 	.word	0x00001215

000020e0 <main>:
#include <atmel_start.h>

int main(void)
{
    20e0:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    20e2:	4b01      	ldr	r3, [pc, #4]	; (20e8 <main+0x8>)
    20e4:	4798      	blx	r3
    20e6:	e7fe      	b.n	20e6 <main+0x6>
    20e8:	00000115 	.word	0x00000115

000020ec <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	b083      	sub	sp, #12
    20f0:	0006      	movs	r6, r0
    20f2:	000c      	movs	r4, r1
    20f4:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    20f6:	780a      	ldrb	r2, [r1, #0]
    20f8:	0653      	lsls	r3, r2, #25
    20fa:	0f9b      	lsrs	r3, r3, #30
    20fc:	2b01      	cmp	r3, #1
    20fe:	d000      	beq.n	2102 <cdcdf_acm_req+0x16>
    2100:	e06c      	b.n	21dc <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2102:	7909      	ldrb	r1, [r1, #4]
    2104:	7963      	ldrb	r3, [r4, #5]
    2106:	021b      	lsls	r3, r3, #8
    2108:	430b      	orrs	r3, r1
    210a:	493b      	ldr	r1, [pc, #236]	; (21f8 <cdcdf_acm_req+0x10c>)
    210c:	7809      	ldrb	r1, [r1, #0]
    210e:	4299      	cmp	r1, r3
    2110:	d003      	beq.n	211a <cdcdf_acm_req+0x2e>
    2112:	4939      	ldr	r1, [pc, #228]	; (21f8 <cdcdf_acm_req+0x10c>)
    2114:	7849      	ldrb	r1, [r1, #1]
    2116:	4299      	cmp	r1, r3
    2118:	d163      	bne.n	21e2 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    211a:	b252      	sxtb	r2, r2
    211c:	2a00      	cmp	r2, #0
    211e:	db0e      	blt.n	213e <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    2120:	79a7      	ldrb	r7, [r4, #6]
    2122:	79e3      	ldrb	r3, [r4, #7]
    2124:	021b      	lsls	r3, r3, #8
    2126:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2128:	4b34      	ldr	r3, [pc, #208]	; (21fc <cdcdf_acm_req+0x110>)
    212a:	4798      	blx	r3
	switch (req->bRequest) {
    212c:	7863      	ldrb	r3, [r4, #1]
    212e:	2b20      	cmp	r3, #32
    2130:	d018      	beq.n	2164 <cdcdf_acm_req+0x78>
    2132:	2b22      	cmp	r3, #34	; 0x22
    2134:	d03c      	beq.n	21b0 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    2136:	200d      	movs	r0, #13
    2138:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    213a:	b003      	add	sp, #12
    213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    213e:	2d01      	cmp	r5, #1
    2140:	d052      	beq.n	21e8 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    2142:	7863      	ldrb	r3, [r4, #1]
    2144:	2b21      	cmp	r3, #33	; 0x21
    2146:	d151      	bne.n	21ec <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    2148:	79a2      	ldrb	r2, [r4, #6]
    214a:	79e3      	ldrb	r3, [r4, #7]
    214c:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    214e:	4313      	orrs	r3, r2
    2150:	2b07      	cmp	r3, #7
    2152:	d14e      	bne.n	21f2 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2154:	2300      	movs	r3, #0
    2156:	2207      	movs	r2, #7
    2158:	4927      	ldr	r1, [pc, #156]	; (21f8 <cdcdf_acm_req+0x10c>)
    215a:	3108      	adds	r1, #8
    215c:	0030      	movs	r0, r6
    215e:	4c28      	ldr	r4, [pc, #160]	; (2200 <cdcdf_acm_req+0x114>)
    2160:	47a0      	blx	r4
    2162:	e7ea      	b.n	213a <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2164:	2f07      	cmp	r7, #7
    2166:	d134      	bne.n	21d2 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    2168:	2d00      	cmp	r5, #0
    216a:	d01a      	beq.n	21a2 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    216c:	2207      	movs	r2, #7
    216e:	0001      	movs	r1, r0
    2170:	4668      	mov	r0, sp
    2172:	4b24      	ldr	r3, [pc, #144]	; (2204 <cdcdf_acm_req+0x118>)
    2174:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2176:	4b20      	ldr	r3, [pc, #128]	; (21f8 <cdcdf_acm_req+0x10c>)
    2178:	691b      	ldr	r3, [r3, #16]
    217a:	2b00      	cmp	r3, #0
    217c:	d005      	beq.n	218a <cdcdf_acm_req+0x9e>
    217e:	4668      	mov	r0, sp
    2180:	4798      	blx	r3
    2182:	0003      	movs	r3, r0
			return ERR_NONE;
    2184:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2186:	2b00      	cmp	r3, #0
    2188:	d0d7      	beq.n	213a <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    218a:	4a1b      	ldr	r2, [pc, #108]	; (21f8 <cdcdf_acm_req+0x10c>)
    218c:	0013      	movs	r3, r2
    218e:	9900      	ldr	r1, [sp, #0]
    2190:	6091      	str	r1, [r2, #8]
    2192:	466a      	mov	r2, sp
    2194:	8892      	ldrh	r2, [r2, #4]
    2196:	819a      	strh	r2, [r3, #12]
    2198:	466a      	mov	r2, sp
    219a:	7992      	ldrb	r2, [r2, #6]
    219c:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    219e:	2000      	movs	r0, #0
    21a0:	e7cb      	b.n	213a <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    21a2:	2300      	movs	r3, #0
    21a4:	2207      	movs	r2, #7
    21a6:	0001      	movs	r1, r0
    21a8:	0030      	movs	r0, r6
    21aa:	4c15      	ldr	r4, [pc, #84]	; (2200 <cdcdf_acm_req+0x114>)
    21ac:	47a0      	blx	r4
    21ae:	e7c4      	b.n	213a <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    21b0:	2300      	movs	r3, #0
    21b2:	2200      	movs	r2, #0
    21b4:	2100      	movs	r1, #0
    21b6:	2000      	movs	r0, #0
    21b8:	4d11      	ldr	r5, [pc, #68]	; (2200 <cdcdf_acm_req+0x114>)
    21ba:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    21bc:	4b0e      	ldr	r3, [pc, #56]	; (21f8 <cdcdf_acm_req+0x10c>)
    21be:	695b      	ldr	r3, [r3, #20]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d009      	beq.n	21d8 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    21c4:	78a2      	ldrb	r2, [r4, #2]
    21c6:	78e0      	ldrb	r0, [r4, #3]
    21c8:	0200      	lsls	r0, r0, #8
    21ca:	4310      	orrs	r0, r2
    21cc:	4798      	blx	r3
		return ERR_NONE;
    21ce:	2000      	movs	r0, #0
    21d0:	e7b3      	b.n	213a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    21d2:	2001      	movs	r0, #1
    21d4:	4240      	negs	r0, r0
    21d6:	e7b0      	b.n	213a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    21d8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    21da:	e7ae      	b.n	213a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    21dc:	200a      	movs	r0, #10
    21de:	4240      	negs	r0, r0
    21e0:	e7ab      	b.n	213a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    21e2:	200a      	movs	r0, #10
    21e4:	4240      	negs	r0, r0
    21e6:	e7a8      	b.n	213a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    21e8:	2000      	movs	r0, #0
    21ea:	e7a6      	b.n	213a <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    21ec:	200d      	movs	r0, #13
    21ee:	4240      	negs	r0, r0
    21f0:	e7a3      	b.n	213a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    21f2:	2001      	movs	r0, #1
    21f4:	4240      	negs	r0, r0
    21f6:	e7a0      	b.n	213a <cdcdf_acm_req+0x4e>
    21f8:	200002f0 	.word	0x200002f0
    21fc:	00002abd 	.word	0x00002abd
    2200:	0000256d 	.word	0x0000256d
    2204:	00002c81 	.word	0x00002c81

00002208 <cdcdf_acm_ctrl>:
{
    2208:	b5f0      	push	{r4, r5, r6, r7, lr}
    220a:	46de      	mov	lr, fp
    220c:	4657      	mov	r7, sl
    220e:	464e      	mov	r6, r9
    2210:	4645      	mov	r5, r8
    2212:	b5e0      	push	{r5, r6, r7, lr}
    2214:	b083      	sub	sp, #12
    2216:	0016      	movs	r6, r2
	switch (ctrl) {
    2218:	2901      	cmp	r1, #1
    221a:	d068      	beq.n	22ee <cdcdf_acm_ctrl+0xe6>
    221c:	2900      	cmp	r1, #0
    221e:	d00b      	beq.n	2238 <cdcdf_acm_ctrl+0x30>
    2220:	2902      	cmp	r1, #2
    2222:	d100      	bne.n	2226 <cdcdf_acm_ctrl+0x1e>
    2224:	e093      	b.n	234e <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    2226:	200d      	movs	r0, #13
    2228:	4240      	negs	r0, r0
}
    222a:	b003      	add	sp, #12
    222c:	bc3c      	pop	{r2, r3, r4, r5}
    222e:	4690      	mov	r8, r2
    2230:	4699      	mov	r9, r3
    2232:	46a2      	mov	sl, r4
    2234:	46ab      	mov	fp, r5
    2236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2238:	6883      	ldr	r3, [r0, #8]
    223a:	4698      	mov	r8, r3
	ifc = desc->sod;
    223c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    223e:	2800      	cmp	r0, #0
    2240:	d100      	bne.n	2244 <cdcdf_acm_ctrl+0x3c>
    2242:	e087      	b.n	2354 <cdcdf_acm_ctrl+0x14c>
    2244:	9301      	str	r3, [sp, #4]
    2246:	2301      	movs	r3, #1
    2248:	4443      	add	r3, r8
    224a:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    224c:	4f47      	ldr	r7, [pc, #284]	; (236c <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    224e:	4b48      	ldr	r3, [pc, #288]	; (2370 <cdcdf_acm_ctrl+0x168>)
    2250:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    2252:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2254:	7943      	ldrb	r3, [r0, #5]
    2256:	2108      	movs	r1, #8
    2258:	438b      	bics	r3, r1
    225a:	2b02      	cmp	r3, #2
    225c:	d002      	beq.n	2264 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    225e:	200a      	movs	r0, #10
    2260:	4240      	negs	r0, r0
    2262:	e7e2      	b.n	222a <cdcdf_acm_ctrl+0x22>
    2264:	9901      	ldr	r1, [sp, #4]
    2266:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2268:	780b      	ldrb	r3, [r1, #0]
    226a:	429a      	cmp	r2, r3
    226c:	d075      	beq.n	235a <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    226e:	2bff      	cmp	r3, #255	; 0xff
    2270:	d176      	bne.n	2360 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2272:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2274:	2205      	movs	r2, #5
    2276:	6871      	ldr	r1, [r6, #4]
    2278:	4b3e      	ldr	r3, [pc, #248]	; (2374 <cdcdf_acm_ctrl+0x16c>)
    227a:	4798      	blx	r3
    227c:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    227e:	d11e      	bne.n	22be <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2280:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2282:	7803      	ldrb	r3, [r0, #0]
    2284:	18c0      	adds	r0, r0, r3
    2286:	2204      	movs	r2, #4
    2288:	6871      	ldr	r1, [r6, #4]
    228a:	4b3a      	ldr	r3, [pc, #232]	; (2374 <cdcdf_acm_ctrl+0x16c>)
    228c:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    228e:	9b01      	ldr	r3, [sp, #4]
    2290:	455b      	cmp	r3, fp
    2292:	d027      	beq.n	22e4 <cdcdf_acm_ctrl+0xdc>
    2294:	9b01      	ldr	r3, [sp, #4]
    2296:	3301      	adds	r3, #1
    2298:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    229a:	2800      	cmp	r0, #0
    229c:	d1d9      	bne.n	2252 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    229e:	200a      	movs	r0, #10
    22a0:	4240      	negs	r0, r0
    22a2:	e7c2      	b.n	222a <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    22a4:	4653      	mov	r3, sl
    22a6:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    22a8:	0028      	movs	r0, r5
    22aa:	4b31      	ldr	r3, [pc, #196]	; (2370 <cdcdf_acm_ctrl+0x168>)
    22ac:	4798      	blx	r3
			desc->sod = ep;
    22ae:	6034      	str	r4, [r6, #0]
    22b0:	7820      	ldrb	r0, [r4, #0]
    22b2:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    22b4:	6871      	ldr	r1, [r6, #4]
    22b6:	4b30      	ldr	r3, [pc, #192]	; (2378 <cdcdf_acm_ctrl+0x170>)
    22b8:	4798      	blx	r3
    22ba:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    22bc:	d0e0      	beq.n	2280 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    22be:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    22c0:	7963      	ldrb	r3, [r4, #5]
    22c2:	021b      	lsls	r3, r3, #8
    22c4:	7922      	ldrb	r2, [r4, #4]
    22c6:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    22c8:	b292      	uxth	r2, r2
    22ca:	78e1      	ldrb	r1, [r4, #3]
    22cc:	0028      	movs	r0, r5
    22ce:	47b8      	blx	r7
    22d0:	2800      	cmp	r0, #0
    22d2:	d148      	bne.n	2366 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    22d4:	b26b      	sxtb	r3, r5
    22d6:	2b00      	cmp	r3, #0
    22d8:	dbe4      	blt.n	22a4 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    22da:	4643      	mov	r3, r8
    22dc:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    22de:	0028      	movs	r0, r5
    22e0:	47c8      	blx	r9
    22e2:	e7e4      	b.n	22ae <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    22e4:	2201      	movs	r2, #1
    22e6:	4b25      	ldr	r3, [pc, #148]	; (237c <cdcdf_acm_ctrl+0x174>)
    22e8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    22ea:	2000      	movs	r0, #0
    22ec:	e79d      	b.n	222a <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    22ee:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    22f0:	2a00      	cmp	r2, #0
    22f2:	d008      	beq.n	2306 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    22f4:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    22f6:	795b      	ldrb	r3, [r3, #5]
    22f8:	2208      	movs	r2, #8
    22fa:	4393      	bics	r3, r2
    22fc:	2b02      	cmp	r3, #2
    22fe:	d002      	beq.n	2306 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    2300:	200a      	movs	r0, #10
    2302:	4240      	negs	r0, r0
    2304:	e791      	b.n	222a <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    2306:	7823      	ldrb	r3, [r4, #0]
    2308:	2bff      	cmp	r3, #255	; 0xff
    230a:	d008      	beq.n	231e <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    230c:	23ff      	movs	r3, #255	; 0xff
    230e:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2310:	78a0      	ldrb	r0, [r4, #2]
    2312:	28ff      	cmp	r0, #255	; 0xff
    2314:	d003      	beq.n	231e <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2316:	4b1a      	ldr	r3, [pc, #104]	; (2380 <cdcdf_acm_ctrl+0x178>)
    2318:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    231a:	23ff      	movs	r3, #255	; 0xff
    231c:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    231e:	7863      	ldrb	r3, [r4, #1]
    2320:	2bff      	cmp	r3, #255	; 0xff
    2322:	d008      	beq.n	2336 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    2324:	23ff      	movs	r3, #255	; 0xff
    2326:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2328:	78e0      	ldrb	r0, [r4, #3]
    232a:	28ff      	cmp	r0, #255	; 0xff
    232c:	d003      	beq.n	2336 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    232e:	4b14      	ldr	r3, [pc, #80]	; (2380 <cdcdf_acm_ctrl+0x178>)
    2330:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2332:	23ff      	movs	r3, #255	; 0xff
    2334:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2336:	7920      	ldrb	r0, [r4, #4]
    2338:	28ff      	cmp	r0, #255	; 0xff
    233a:	d003      	beq.n	2344 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    233c:	4b10      	ldr	r3, [pc, #64]	; (2380 <cdcdf_acm_ctrl+0x178>)
    233e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2340:	23ff      	movs	r3, #255	; 0xff
    2342:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2344:	2200      	movs	r2, #0
    2346:	4b0d      	ldr	r3, [pc, #52]	; (237c <cdcdf_acm_ctrl+0x174>)
    2348:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    234a:	2000      	movs	r0, #0
    234c:	e76d      	b.n	222a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    234e:	201b      	movs	r0, #27
    2350:	4240      	negs	r0, r0
    2352:	e76a      	b.n	222a <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    2354:	200a      	movs	r0, #10
    2356:	4240      	negs	r0, r0
    2358:	e767      	b.n	222a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    235a:	2012      	movs	r0, #18
    235c:	4240      	negs	r0, r0
    235e:	e764      	b.n	222a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2360:	201c      	movs	r0, #28
    2362:	4240      	negs	r0, r0
    2364:	e761      	b.n	222a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2366:	2014      	movs	r0, #20
    2368:	4240      	negs	r0, r0
    236a:	e75e      	b.n	222a <cdcdf_acm_ctrl+0x22>
    236c:	0000078d 	.word	0x0000078d
    2370:	00000821 	.word	0x00000821
    2374:	00002ad9 	.word	0x00002ad9
    2378:	00002b0f 	.word	0x00002b0f
    237c:	200002f0 	.word	0x200002f0
    2380:	000007f5 	.word	0x000007f5

00002384 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2384:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2386:	4b0a      	ldr	r3, [pc, #40]	; (23b0 <cdcdf_acm_init+0x2c>)
    2388:	4798      	blx	r3
    238a:	2801      	cmp	r0, #1
    238c:	d80c      	bhi.n	23a8 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    238e:	4809      	ldr	r0, [pc, #36]	; (23b4 <cdcdf_acm_init+0x30>)
    2390:	4b09      	ldr	r3, [pc, #36]	; (23b8 <cdcdf_acm_init+0x34>)
    2392:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2394:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2396:	3018      	adds	r0, #24
    2398:	4b08      	ldr	r3, [pc, #32]	; (23bc <cdcdf_acm_init+0x38>)
    239a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    239c:	4908      	ldr	r1, [pc, #32]	; (23c0 <cdcdf_acm_init+0x3c>)
    239e:	2001      	movs	r0, #1
    23a0:	4b08      	ldr	r3, [pc, #32]	; (23c4 <cdcdf_acm_init+0x40>)
    23a2:	4798      	blx	r3
	return ERR_NONE;
    23a4:	2000      	movs	r0, #0
}
    23a6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    23a8:	2011      	movs	r0, #17
    23aa:	4240      	negs	r0, r0
    23ac:	e7fb      	b.n	23a6 <cdcdf_acm_init+0x22>
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	00002ac9 	.word	0x00002ac9
    23b4:	200002f0 	.word	0x200002f0
    23b8:	00002209 	.word	0x00002209
    23bc:	00002a61 	.word	0x00002a61
    23c0:	20000000 	.word	0x20000000
    23c4:	000029c9 	.word	0x000029c9

000023c8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    23c8:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    23ca:	4b06      	ldr	r3, [pc, #24]	; (23e4 <usbdc_unconfig+0x1c>)
    23cc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    23ce:	2c00      	cmp	r4, #0
    23d0:	d007      	beq.n	23e2 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    23d2:	2200      	movs	r2, #0
    23d4:	2101      	movs	r1, #1
    23d6:	0020      	movs	r0, r4
    23d8:	6863      	ldr	r3, [r4, #4]
    23da:	4798      	blx	r3
		func = func->next;
    23dc:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    23de:	2c00      	cmp	r4, #0
    23e0:	d1f7      	bne.n	23d2 <usbdc_unconfig+0xa>
	}
}
    23e2:	bd10      	pop	{r4, pc}
    23e4:	20000314 	.word	0x20000314

000023e8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    23e8:	b570      	push	{r4, r5, r6, lr}
    23ea:	0006      	movs	r6, r0
    23ec:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    23ee:	4b07      	ldr	r3, [pc, #28]	; (240c <usbdc_change_notify+0x24>)
    23f0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    23f2:	2c00      	cmp	r4, #0
    23f4:	d103      	bne.n	23fe <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    23f6:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    23f8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    23fa:	2c00      	cmp	r4, #0
    23fc:	d0fb      	beq.n	23f6 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    23fe:	6863      	ldr	r3, [r4, #4]
    2400:	2b00      	cmp	r3, #0
    2402:	d0f9      	beq.n	23f8 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2404:	0029      	movs	r1, r5
    2406:	0030      	movs	r0, r6
    2408:	4798      	blx	r3
    240a:	e7f5      	b.n	23f8 <usbdc_change_notify+0x10>
    240c:	20000314 	.word	0x20000314

00002410 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2412:	0007      	movs	r7, r0
    2414:	000e      	movs	r6, r1
    2416:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2418:	4b0d      	ldr	r3, [pc, #52]	; (2450 <usbdc_request_handler+0x40>)
    241a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    241c:	2c00      	cmp	r4, #0
    241e:	d104      	bne.n	242a <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2420:	2000      	movs	r0, #0
    2422:	e011      	b.n	2448 <usbdc_request_handler+0x38>
		h = h->next;
    2424:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2426:	2c00      	cmp	r4, #0
    2428:	d00d      	beq.n	2446 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    242a:	6863      	ldr	r3, [r4, #4]
    242c:	2b00      	cmp	r3, #0
    242e:	d0f9      	beq.n	2424 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2430:	002a      	movs	r2, r5
    2432:	0031      	movs	r1, r6
    2434:	0038      	movs	r0, r7
    2436:	4798      	blx	r3
			if (0 == rc) {
    2438:	2800      	cmp	r0, #0
    243a:	d006      	beq.n	244a <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    243c:	300a      	adds	r0, #10
    243e:	d0f1      	beq.n	2424 <usbdc_request_handler+0x14>
				return -1;
    2440:	2001      	movs	r0, #1
    2442:	4240      	negs	r0, r0
    2444:	e000      	b.n	2448 <usbdc_request_handler+0x38>
	return false;
    2446:	2000      	movs	r0, #0
}
    2448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    244a:	2001      	movs	r0, #1
    244c:	e7fc      	b.n	2448 <usbdc_request_handler+0x38>
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	20000314 	.word	0x20000314

00002454 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2454:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2456:	4b06      	ldr	r3, [pc, #24]	; (2470 <usbd_sof_cb+0x1c>)
    2458:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    245a:	2c00      	cmp	r4, #0
    245c:	d103      	bne.n	2466 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    245e:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2460:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2462:	2c00      	cmp	r4, #0
    2464:	d0fb      	beq.n	245e <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    2466:	6863      	ldr	r3, [r4, #4]
    2468:	2b00      	cmp	r3, #0
    246a:	d0f9      	beq.n	2460 <usbd_sof_cb+0xc>
			sof->cb();
    246c:	4798      	blx	r3
    246e:	e7f7      	b.n	2460 <usbd_sof_cb+0xc>
    2470:	20000314 	.word	0x20000314

00002474 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2474:	b510      	push	{r4, lr}
    2476:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2478:	2900      	cmp	r1, #0
    247a:	d003      	beq.n	2484 <usbdc_cb_ctl_done+0x10>
    247c:	2901      	cmp	r1, #1
    247e:	d029      	beq.n	24d4 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2480:	2000      	movs	r0, #0
    2482:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2484:	7813      	ldrb	r3, [r2, #0]
    2486:	2b00      	cmp	r3, #0
    2488:	d1fa      	bne.n	2480 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    248a:	7853      	ldrb	r3, [r2, #1]
    248c:	2b05      	cmp	r3, #5
    248e:	d011      	beq.n	24b4 <usbdc_cb_ctl_done+0x40>
    2490:	2b09      	cmp	r3, #9
    2492:	d1f5      	bne.n	2480 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2494:	7892      	ldrb	r2, [r2, #2]
    2496:	4b12      	ldr	r3, [pc, #72]	; (24e0 <usbdc_cb_ctl_done+0x6c>)
    2498:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    249a:	78a3      	ldrb	r3, [r4, #2]
    249c:	78e1      	ldrb	r1, [r4, #3]
    249e:	0209      	lsls	r1, r1, #8
    24a0:	4319      	orrs	r1, r3
    24a2:	1e4b      	subs	r3, r1, #1
    24a4:	4199      	sbcs	r1, r3
    24a6:	3103      	adds	r1, #3
    24a8:	4b0d      	ldr	r3, [pc, #52]	; (24e0 <usbdc_cb_ctl_done+0x6c>)
    24aa:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    24ac:	2001      	movs	r0, #1
    24ae:	4b0d      	ldr	r3, [pc, #52]	; (24e4 <usbdc_cb_ctl_done+0x70>)
    24b0:	4798      	blx	r3
    24b2:	e7e5      	b.n	2480 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    24b4:	7890      	ldrb	r0, [r2, #2]
    24b6:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <usbdc_cb_ctl_done+0x74>)
    24b8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    24ba:	78a3      	ldrb	r3, [r4, #2]
    24bc:	78e1      	ldrb	r1, [r4, #3]
    24be:	0209      	lsls	r1, r1, #8
    24c0:	4319      	orrs	r1, r3
    24c2:	1e4b      	subs	r3, r1, #1
    24c4:	4199      	sbcs	r1, r3
    24c6:	3102      	adds	r1, #2
    24c8:	4b05      	ldr	r3, [pc, #20]	; (24e0 <usbdc_cb_ctl_done+0x6c>)
    24ca:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    24cc:	2001      	movs	r0, #1
    24ce:	4b05      	ldr	r3, [pc, #20]	; (24e4 <usbdc_cb_ctl_done+0x70>)
    24d0:	4798      	blx	r3
    24d2:	e7d5      	b.n	2480 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    24d4:	2201      	movs	r2, #1
    24d6:	0021      	movs	r1, r4
    24d8:	2000      	movs	r0, #0
    24da:	4b04      	ldr	r3, [pc, #16]	; (24ec <usbdc_cb_ctl_done+0x78>)
    24dc:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    24de:	e7cf      	b.n	2480 <usbdc_cb_ctl_done+0xc>
    24e0:	20000314 	.word	0x20000314
    24e4:	000023e9 	.word	0x000023e9
    24e8:	00000781 	.word	0x00000781
    24ec:	00002411 	.word	0x00002411

000024f0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    24f0:	b510      	push	{r4, lr}
	usbdc_unconfig();
    24f2:	4b0d      	ldr	r3, [pc, #52]	; (2528 <usbdc_reset+0x38>)
    24f4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    24f6:	4c0d      	ldr	r4, [pc, #52]	; (252c <usbdc_reset+0x3c>)
    24f8:	2302      	movs	r3, #2
    24fa:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    24fc:	2300      	movs	r3, #0
    24fe:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2500:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2502:	2000      	movs	r0, #0
    2504:	4b0a      	ldr	r3, [pc, #40]	; (2530 <usbdc_reset+0x40>)
    2506:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2508:	7f20      	ldrb	r0, [r4, #28]
    250a:	4b0a      	ldr	r3, [pc, #40]	; (2534 <usbdc_reset+0x44>)
    250c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    250e:	4a0a      	ldr	r2, [pc, #40]	; (2538 <usbdc_reset+0x48>)
    2510:	2100      	movs	r1, #0
    2512:	2000      	movs	r0, #0
    2514:	4c09      	ldr	r4, [pc, #36]	; (253c <usbdc_reset+0x4c>)
    2516:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2518:	4a09      	ldr	r2, [pc, #36]	; (2540 <usbdc_reset+0x50>)
    251a:	2102      	movs	r1, #2
    251c:	2000      	movs	r0, #0
    251e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2520:	2000      	movs	r0, #0
    2522:	4b08      	ldr	r3, [pc, #32]	; (2544 <usbdc_reset+0x54>)
    2524:	4798      	blx	r3
}
    2526:	bd10      	pop	{r4, pc}
    2528:	000023c9 	.word	0x000023c9
    252c:	20000314 	.word	0x20000314
    2530:	000007f5 	.word	0x000007f5
    2534:	000007e1 	.word	0x000007e1
    2538:	00002589 	.word	0x00002589
    253c:	000009fd 	.word	0x000009fd
    2540:	00002475 	.word	0x00002475
    2544:	00000821 	.word	0x00000821

00002548 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2548:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    254a:	2800      	cmp	r0, #0
    254c:	d002      	beq.n	2554 <usbd_event_cb+0xc>
    254e:	2801      	cmp	r0, #1
    2550:	d004      	beq.n	255c <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    2552:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2554:	2000      	movs	r0, #0
    2556:	4b03      	ldr	r3, [pc, #12]	; (2564 <usbd_event_cb+0x1c>)
    2558:	4798      	blx	r3
		break;
    255a:	e7fa      	b.n	2552 <usbd_event_cb+0xa>
		usbdc_reset();
    255c:	4b02      	ldr	r3, [pc, #8]	; (2568 <usbd_event_cb+0x20>)
    255e:	4798      	blx	r3
}
    2560:	e7f7      	b.n	2552 <usbd_event_cb+0xa>
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	000023e9 	.word	0x000023e9
    2568:	000024f1 	.word	0x000024f1

0000256c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    256c:	b510      	push	{r4, lr}
    256e:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2570:	ac01      	add	r4, sp, #4
    2572:	9101      	str	r1, [sp, #4]
    2574:	9202      	str	r2, [sp, #8]
    2576:	7220      	strb	r0, [r4, #8]
    2578:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    257a:	0020      	movs	r0, r4
    257c:	4b01      	ldr	r3, [pc, #4]	; (2584 <usbdc_xfer+0x18>)
    257e:	4798      	blx	r3
}
    2580:	b004      	add	sp, #16
    2582:	bd10      	pop	{r4, pc}
    2584:	0000086d 	.word	0x0000086d

00002588 <usbdc_cb_ctl_req>:
{
    2588:	b5f0      	push	{r4, r5, r6, r7, lr}
    258a:	46c6      	mov	lr, r8
    258c:	b500      	push	{lr}
    258e:	b084      	sub	sp, #16
    2590:	0005      	movs	r5, r0
    2592:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2594:	2200      	movs	r2, #0
    2596:	4bb5      	ldr	r3, [pc, #724]	; (286c <usbdc_cb_ctl_req+0x2e4>)
    2598:	4798      	blx	r3
    259a:	1c43      	adds	r3, r0, #1
    259c:	d00d      	beq.n	25ba <usbdc_cb_ctl_req+0x32>
		return true;
    259e:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    25a0:	2801      	cmp	r0, #1
    25a2:	d00b      	beq.n	25bc <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    25a4:	7822      	ldrb	r2, [r4, #0]
    25a6:	231f      	movs	r3, #31
    25a8:	0011      	movs	r1, r2
    25aa:	4399      	bics	r1, r3
    25ac:	d00b      	beq.n	25c6 <usbdc_cb_ctl_req+0x3e>
    25ae:	b2cb      	uxtb	r3, r1
    25b0:	2b80      	cmp	r3, #128	; 0x80
    25b2:	d100      	bne.n	25b6 <usbdc_cb_ctl_req+0x2e>
    25b4:	e0f8      	b.n	27a8 <usbdc_cb_ctl_req+0x220>
		return false;
    25b6:	2300      	movs	r3, #0
    25b8:	e000      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    25ba:	2300      	movs	r3, #0
}
    25bc:	0018      	movs	r0, r3
    25be:	b004      	add	sp, #16
    25c0:	bc04      	pop	{r2}
    25c2:	4690      	mov	r8, r2
    25c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    25c6:	7863      	ldrb	r3, [r4, #1]
    25c8:	2b0b      	cmp	r3, #11
    25ca:	d900      	bls.n	25ce <usbdc_cb_ctl_req+0x46>
    25cc:	e1e4      	b.n	2998 <usbdc_cb_ctl_req+0x410>
    25ce:	009b      	lsls	r3, r3, #2
    25d0:	49a7      	ldr	r1, [pc, #668]	; (2870 <usbdc_cb_ctl_req+0x2e8>)
    25d2:	58cb      	ldr	r3, [r1, r3]
    25d4:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    25d6:	2301      	movs	r3, #1
    25d8:	2200      	movs	r2, #0
    25da:	2100      	movs	r1, #0
    25dc:	0028      	movs	r0, r5
    25de:	4ca5      	ldr	r4, [pc, #660]	; (2874 <usbdc_cb_ctl_req+0x2ec>)
    25e0:	47a0      	blx	r4
    25e2:	4243      	negs	r3, r0
    25e4:	4143      	adcs	r3, r0
    25e6:	b2db      	uxtb	r3, r3
    25e8:	e7e8      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    25ea:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    25ec:	2a00      	cmp	r2, #0
    25ee:	d01a      	beq.n	2626 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    25f0:	4ba1      	ldr	r3, [pc, #644]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	6859      	ldr	r1, [r3, #4]
    25f6:	6818      	ldr	r0, [r3, #0]
    25f8:	4ba0      	ldr	r3, [pc, #640]	; (287c <usbdc_cb_ctl_req+0x2f4>)
    25fa:	4798      	blx	r3
	if (NULL == cfg_desc) {
    25fc:	2800      	cmp	r0, #0
    25fe:	d100      	bne.n	2602 <usbdc_cb_ctl_req+0x7a>
    2600:	e1d4      	b.n	29ac <usbdc_cb_ctl_req+0x424>
    2602:	78c3      	ldrb	r3, [r0, #3]
    2604:	021b      	lsls	r3, r3, #8
    2606:	7881      	ldrb	r1, [r0, #2]
    2608:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    260a:	b289      	uxth	r1, r1
    260c:	1841      	adds	r1, r0, r1
    260e:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2610:	2204      	movs	r2, #4
    2612:	4b9b      	ldr	r3, [pc, #620]	; (2880 <usbdc_cb_ctl_req+0x2f8>)
    2614:	4798      	blx	r3
    2616:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    2618:	2800      	cmp	r0, #0
    261a:	d006      	beq.n	262a <usbdc_cb_ctl_req+0xa2>
    261c:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    261e:	4f96      	ldr	r7, [pc, #600]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2620:	4b97      	ldr	r3, [pc, #604]	; (2880 <usbdc_cb_ctl_req+0x2f8>)
    2622:	4698      	mov	r8, r3
    2624:	e01a      	b.n	265c <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    2626:	4b97      	ldr	r3, [pc, #604]	; (2884 <usbdc_cb_ctl_req+0x2fc>)
    2628:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    262a:	2301      	movs	r3, #1
    262c:	2200      	movs	r2, #0
    262e:	2100      	movs	r1, #0
    2630:	0028      	movs	r0, r5
    2632:	4c90      	ldr	r4, [pc, #576]	; (2874 <usbdc_cb_ctl_req+0x2ec>)
    2634:	47a0      	blx	r4
    2636:	4243      	negs	r3, r0
    2638:	4143      	adcs	r3, r0
    263a:	b2db      	uxtb	r3, r3
    263c:	e7be      	b.n	25bc <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    263e:	0034      	movs	r4, r6
    2640:	e000      	b.n	2644 <usbdc_cb_ctl_req+0xbc>
    2642:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    2644:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    2646:	7803      	ldrb	r3, [r0, #0]
    2648:	18c0      	adds	r0, r0, r3
    264a:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    264c:	9b03      	ldr	r3, [sp, #12]
    264e:	9301      	str	r3, [sp, #4]
    2650:	2204      	movs	r2, #4
    2652:	0019      	movs	r1, r3
    2654:	47c0      	blx	r8
    2656:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    2658:	2800      	cmp	r0, #0
    265a:	d0e6      	beq.n	262a <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    265c:	7886      	ldrb	r6, [r0, #2]
    265e:	42a6      	cmp	r6, r4
    2660:	d0f0      	beq.n	2644 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2662:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    2664:	2c00      	cmp	r4, #0
    2666:	d0ea      	beq.n	263e <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2668:	aa02      	add	r2, sp, #8
    266a:	2100      	movs	r1, #0
    266c:	0020      	movs	r0, r4
    266e:	6863      	ldr	r3, [r4, #4]
    2670:	4798      	blx	r3
    2672:	2800      	cmp	r0, #0
    2674:	d0e5      	beq.n	2642 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    2676:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2678:	2c00      	cmp	r4, #0
    267a:	d1f5      	bne.n	2668 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    267c:	0034      	movs	r4, r6
    267e:	e7e1      	b.n	2644 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2680:	231f      	movs	r3, #31
    2682:	401a      	ands	r2, r3
		return false;
    2684:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2686:	2a02      	cmp	r2, #2
    2688:	d198      	bne.n	25bc <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    268a:	79a3      	ldrb	r3, [r4, #6]
    268c:	79e2      	ldrb	r2, [r4, #7]
    268e:	0212      	lsls	r2, r2, #8
    2690:	431a      	orrs	r2, r3
			return false;
    2692:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2694:	2a00      	cmp	r2, #0
    2696:	d000      	beq.n	269a <usbdc_cb_ctl_req+0x112>
    2698:	e790      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    269a:	7920      	ldrb	r0, [r4, #4]
    269c:	2100      	movs	r1, #0
    269e:	4b7a      	ldr	r3, [pc, #488]	; (2888 <usbdc_cb_ctl_req+0x300>)
    26a0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    26a2:	2301      	movs	r3, #1
    26a4:	2200      	movs	r2, #0
    26a6:	2100      	movs	r1, #0
    26a8:	0028      	movs	r0, r5
    26aa:	4c72      	ldr	r4, [pc, #456]	; (2874 <usbdc_cb_ctl_req+0x2ec>)
    26ac:	47a0      	blx	r4
		return true;
    26ae:	2301      	movs	r3, #1
    26b0:	e784      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    26b2:	231f      	movs	r3, #31
    26b4:	401a      	ands	r2, r3
		return false;
    26b6:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    26b8:	2a02      	cmp	r2, #2
    26ba:	d000      	beq.n	26be <usbdc_cb_ctl_req+0x136>
    26bc:	e77e      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    26be:	79a3      	ldrb	r3, [r4, #6]
    26c0:	79e2      	ldrb	r2, [r4, #7]
    26c2:	0212      	lsls	r2, r2, #8
    26c4:	431a      	orrs	r2, r3
			return false;
    26c6:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    26c8:	2a00      	cmp	r2, #0
    26ca:	d000      	beq.n	26ce <usbdc_cb_ctl_req+0x146>
    26cc:	e776      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    26ce:	7920      	ldrb	r0, [r4, #4]
    26d0:	2101      	movs	r1, #1
    26d2:	4b6d      	ldr	r3, [pc, #436]	; (2888 <usbdc_cb_ctl_req+0x300>)
    26d4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    26d6:	2301      	movs	r3, #1
    26d8:	2200      	movs	r2, #0
    26da:	2100      	movs	r1, #0
    26dc:	0028      	movs	r0, r5
    26de:	4c65      	ldr	r4, [pc, #404]	; (2874 <usbdc_cb_ctl_req+0x2ec>)
    26e0:	47a0      	blx	r4
		return true;
    26e2:	2301      	movs	r3, #1
    26e4:	e76a      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    26e6:	78a3      	ldrb	r3, [r4, #2]
    26e8:	78e5      	ldrb	r5, [r4, #3]
    26ea:	022d      	lsls	r5, r5, #8
    26ec:	431d      	orrs	r5, r3
    26ee:	7923      	ldrb	r3, [r4, #4]
    26f0:	7964      	ldrb	r4, [r4, #5]
    26f2:	0224      	lsls	r4, r4, #8
    26f4:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    26f6:	4a60      	ldr	r2, [pc, #384]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    26f8:	6813      	ldr	r3, [r2, #0]
    26fa:	7ed2      	ldrb	r2, [r2, #27]
    26fc:	6859      	ldr	r1, [r3, #4]
    26fe:	6818      	ldr	r0, [r3, #0]
    2700:	4b5e      	ldr	r3, [pc, #376]	; (287c <usbdc_cb_ctl_req+0x2f4>)
    2702:	4798      	blx	r3
	if (NULL == ifc) {
    2704:	2800      	cmp	r0, #0
    2706:	d047      	beq.n	2798 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    2708:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    270a:	78c3      	ldrb	r3, [r0, #3]
    270c:	021b      	lsls	r3, r3, #8
    270e:	7881      	ldrb	r1, [r0, #2]
    2710:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2712:	b289      	uxth	r1, r1
    2714:	1841      	adds	r1, r0, r1
    2716:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2718:	2204      	movs	r2, #4
    271a:	4b59      	ldr	r3, [pc, #356]	; (2880 <usbdc_cb_ctl_req+0x2f8>)
    271c:	4798      	blx	r3
    271e:	2800      	cmp	r0, #0
    2720:	d03c      	beq.n	279c <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2722:	4e57      	ldr	r6, [pc, #348]	; (2880 <usbdc_cb_ctl_req+0x2f8>)
    2724:	e008      	b.n	2738 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    2726:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    2728:	7803      	ldrb	r3, [r0, #0]
    272a:	18c0      	adds	r0, r0, r3
    272c:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    272e:	2204      	movs	r2, #4
    2730:	9903      	ldr	r1, [sp, #12]
    2732:	47b0      	blx	r6
		if (NULL == ifc) {
    2734:	2800      	cmp	r0, #0
    2736:	d033      	beq.n	27a0 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2738:	7883      	ldrb	r3, [r0, #2]
    273a:	42a3      	cmp	r3, r4
    273c:	d1f3      	bne.n	2726 <usbdc_cb_ctl_req+0x19e>
    273e:	78c3      	ldrb	r3, [r0, #3]
    2740:	42ab      	cmp	r3, r5
    2742:	d1f0      	bne.n	2726 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    2744:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2746:	4b4c      	ldr	r3, [pc, #304]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    2748:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    274a:	2e00      	cmp	r6, #0
    274c:	d02a      	beq.n	27a4 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    274e:	aa02      	add	r2, sp, #8
    2750:	2101      	movs	r1, #1
    2752:	0030      	movs	r0, r6
    2754:	6873      	ldr	r3, [r6, #4]
    2756:	4798      	blx	r3
    2758:	2800      	cmp	r0, #0
    275a:	d004      	beq.n	2766 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    275c:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    275e:	2e00      	cmp	r6, #0
    2760:	d1f5      	bne.n	274e <usbdc_cb_ctl_req+0x1c6>
	return false;
    2762:	2300      	movs	r3, #0
    2764:	e72a      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2766:	6873      	ldr	r3, [r6, #4]
    2768:	aa02      	add	r2, sp, #8
    276a:	2100      	movs	r1, #0
    276c:	0030      	movs	r0, r6
    276e:	4798      	blx	r3
			return false;
    2770:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2772:	2800      	cmp	r0, #0
    2774:	d000      	beq.n	2778 <usbdc_cb_ctl_req+0x1f0>
    2776:	e721      	b.n	25bc <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    2778:	2d00      	cmp	r5, #0
    277a:	d005      	beq.n	2788 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    277c:	493e      	ldr	r1, [pc, #248]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    277e:	2201      	movs	r2, #1
    2780:	40a2      	lsls	r2, r4
    2782:	7f4b      	ldrb	r3, [r1, #29]
    2784:	4313      	orrs	r3, r2
    2786:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2788:	2300      	movs	r3, #0
    278a:	2200      	movs	r2, #0
    278c:	2100      	movs	r1, #0
    278e:	2000      	movs	r0, #0
    2790:	4c38      	ldr	r4, [pc, #224]	; (2874 <usbdc_cb_ctl_req+0x2ec>)
    2792:	47a0      	blx	r4
			return true;
    2794:	2301      	movs	r3, #1
    2796:	e711      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    2798:	2300      	movs	r3, #0
    279a:	e70f      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    279c:	2300      	movs	r3, #0
    279e:	e70d      	b.n	25bc <usbdc_cb_ctl_req+0x34>
			return false;
    27a0:	2300      	movs	r3, #0
    27a2:	e70b      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	return false;
    27a4:	2300      	movs	r3, #0
    27a6:	e709      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    27a8:	7863      	ldrb	r3, [r4, #1]
    27aa:	2b06      	cmp	r3, #6
    27ac:	d033      	beq.n	2816 <usbdc_cb_ctl_req+0x28e>
    27ae:	b2d9      	uxtb	r1, r3
    27b0:	2906      	cmp	r1, #6
    27b2:	d922      	bls.n	27fa <usbdc_cb_ctl_req+0x272>
    27b4:	2b08      	cmp	r3, #8
    27b6:	d100      	bne.n	27ba <usbdc_cb_ctl_req+0x232>
    27b8:	e0af      	b.n	291a <usbdc_cb_ctl_req+0x392>
    27ba:	2b0a      	cmp	r3, #10
    27bc:	d000      	beq.n	27c0 <usbdc_cb_ctl_req+0x238>
    27be:	e0ed      	b.n	299c <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    27c0:	4b2d      	ldr	r3, [pc, #180]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    27c2:	7f5a      	ldrb	r2, [r3, #29]
    27c4:	7921      	ldrb	r1, [r4, #4]
    27c6:	7963      	ldrb	r3, [r4, #5]
    27c8:	021b      	lsls	r3, r3, #8
    27ca:	430b      	orrs	r3, r1
    27cc:	411a      	asrs	r2, r3
    27ce:	07d3      	lsls	r3, r2, #31
    27d0:	d400      	bmi.n	27d4 <usbdc_cb_ctl_req+0x24c>
    27d2:	e0ca      	b.n	296a <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    27d4:	4b28      	ldr	r3, [pc, #160]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    27d6:	691d      	ldr	r5, [r3, #16]
	return false;
    27d8:	2300      	movs	r3, #0
	while (NULL != func) {
    27da:	2d00      	cmp	r5, #0
    27dc:	d100      	bne.n	27e0 <usbdc_cb_ctl_req+0x258>
    27de:	e6ed      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    27e0:	0022      	movs	r2, r4
    27e2:	2102      	movs	r1, #2
    27e4:	0028      	movs	r0, r5
    27e6:	686b      	ldr	r3, [r5, #4]
    27e8:	4798      	blx	r3
    27ea:	2800      	cmp	r0, #0
    27ec:	db00      	blt.n	27f0 <usbdc_cb_ctl_req+0x268>
    27ee:	e0c8      	b.n	2982 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    27f0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    27f2:	2d00      	cmp	r5, #0
    27f4:	d1f4      	bne.n	27e0 <usbdc_cb_ctl_req+0x258>
	return false;
    27f6:	2300      	movs	r3, #0
    27f8:	e6e0      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    27fa:	2b00      	cmp	r3, #0
    27fc:	d000      	beq.n	2800 <usbdc_cb_ctl_req+0x278>
    27fe:	e0cd      	b.n	299c <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2800:	231f      	movs	r3, #31
    2802:	401a      	ands	r2, r3
    2804:	b2d3      	uxtb	r3, r2
    2806:	2b01      	cmp	r3, #1
    2808:	d800      	bhi.n	280c <usbdc_cb_ctl_req+0x284>
    280a:	e092      	b.n	2932 <usbdc_cb_ctl_req+0x3aa>
    280c:	2a02      	cmp	r2, #2
    280e:	d100      	bne.n	2812 <usbdc_cb_ctl_req+0x28a>
    2810:	e09f      	b.n	2952 <usbdc_cb_ctl_req+0x3ca>
		return false;
    2812:	2300      	movs	r3, #0
    2814:	e6d2      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2816:	78a3      	ldrb	r3, [r4, #2]
    2818:	78e2      	ldrb	r2, [r4, #3]
    281a:	0212      	lsls	r2, r2, #8
    281c:	431a      	orrs	r2, r3
    281e:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    2820:	2b02      	cmp	r3, #2
    2822:	d033      	beq.n	288c <usbdc_cb_ctl_req+0x304>
    2824:	2b03      	cmp	r3, #3
    2826:	d056      	beq.n	28d6 <usbdc_cb_ctl_req+0x34e>
    2828:	2b01      	cmp	r3, #1
    282a:	d001      	beq.n	2830 <usbdc_cb_ctl_req+0x2a8>
	return false;
    282c:	2300      	movs	r3, #0
    282e:	e6c5      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    2830:	79a2      	ldrb	r2, [r4, #6]
    2832:	79e3      	ldrb	r3, [r4, #7]
    2834:	021b      	lsls	r3, r3, #8
    2836:	4313      	orrs	r3, r2
    2838:	1c1a      	adds	r2, r3, #0
    283a:	2b12      	cmp	r3, #18
    283c:	d900      	bls.n	2840 <usbdc_cb_ctl_req+0x2b8>
    283e:	2212      	movs	r2, #18
    2840:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2842:	4b0d      	ldr	r3, [pc, #52]	; (2878 <usbdc_cb_ctl_req+0x2f0>)
    2844:	681b      	ldr	r3, [r3, #0]
    2846:	6859      	ldr	r1, [r3, #4]
    2848:	6818      	ldr	r0, [r3, #0]
    284a:	2201      	movs	r2, #1
    284c:	4b0c      	ldr	r3, [pc, #48]	; (2880 <usbdc_cb_ctl_req+0x2f8>)
    284e:	4798      	blx	r3
	if (!dev_desc) {
    2850:	2800      	cmp	r0, #0
    2852:	d100      	bne.n	2856 <usbdc_cb_ctl_req+0x2ce>
    2854:	e0a4      	b.n	29a0 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2856:	2300      	movs	r3, #0
    2858:	0022      	movs	r2, r4
    285a:	0001      	movs	r1, r0
    285c:	0028      	movs	r0, r5
    285e:	4c05      	ldr	r4, [pc, #20]	; (2874 <usbdc_cb_ctl_req+0x2ec>)
    2860:	47a0      	blx	r4
    2862:	4243      	negs	r3, r0
    2864:	4143      	adcs	r3, r0
    2866:	b2db      	uxtb	r3, r3
    2868:	e6a8      	b.n	25bc <usbdc_cb_ctl_req+0x34>
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	00002411 	.word	0x00002411
    2870:	00002d2c 	.word	0x00002d2c
    2874:	0000256d 	.word	0x0000256d
    2878:	20000314 	.word	0x20000314
    287c:	00002b55 	.word	0x00002b55
    2880:	00002ad9 	.word	0x00002ad9
    2884:	000023c9 	.word	0x000023c9
    2888:	00000995 	.word	0x00000995
	uint16_t length   = req->wLength;
    288c:	79a3      	ldrb	r3, [r4, #6]
    288e:	79e6      	ldrb	r6, [r4, #7]
    2890:	0236      	lsls	r6, r6, #8
    2892:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2894:	4b46      	ldr	r3, [pc, #280]	; (29b0 <usbdc_cb_ctl_req+0x428>)
    2896:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	3201      	adds	r2, #1
    289c:	b2d2      	uxtb	r2, r2
    289e:	6859      	ldr	r1, [r3, #4]
    28a0:	6818      	ldr	r0, [r3, #0]
    28a2:	4b44      	ldr	r3, [pc, #272]	; (29b4 <usbdc_cb_ctl_req+0x42c>)
    28a4:	4798      	blx	r3
    28a6:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    28a8:	d07c      	beq.n	29a4 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    28aa:	78c3      	ldrb	r3, [r0, #3]
    28ac:	021b      	lsls	r3, r3, #8
    28ae:	7884      	ldrb	r4, [r0, #2]
    28b0:	18e4      	adds	r4, r4, r3
    28b2:	b2a4      	uxth	r4, r4
		need_zlp = false;
    28b4:	2300      	movs	r3, #0
	if (length <= total_len) {
    28b6:	42a6      	cmp	r6, r4
    28b8:	d905      	bls.n	28c6 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    28ba:	3f01      	subs	r7, #1
    28bc:	403e      	ands	r6, r7
    28be:	4273      	negs	r3, r6
    28c0:	4173      	adcs	r3, r6
    28c2:	b2db      	uxtb	r3, r3
		length = total_len;
    28c4:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    28c6:	0032      	movs	r2, r6
    28c8:	0028      	movs	r0, r5
    28ca:	4c3b      	ldr	r4, [pc, #236]	; (29b8 <usbdc_cb_ctl_req+0x430>)
    28cc:	47a0      	blx	r4
    28ce:	4243      	negs	r3, r0
    28d0:	4143      	adcs	r3, r0
    28d2:	b2db      	uxtb	r3, r3
    28d4:	e672      	b.n	25bc <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    28d6:	79a3      	ldrb	r3, [r4, #6]
    28d8:	79e1      	ldrb	r1, [r4, #7]
    28da:	0209      	lsls	r1, r1, #8
    28dc:	4319      	orrs	r1, r3
    28de:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    28e0:	4b33      	ldr	r3, [pc, #204]	; (29b0 <usbdc_cb_ctl_req+0x428>)
    28e2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    28e4:	681b      	ldr	r3, [r3, #0]
    28e6:	b2d2      	uxtb	r2, r2
    28e8:	6859      	ldr	r1, [r3, #4]
    28ea:	6818      	ldr	r0, [r3, #0]
    28ec:	4b33      	ldr	r3, [pc, #204]	; (29bc <usbdc_cb_ctl_req+0x434>)
    28ee:	4798      	blx	r3
    28f0:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    28f2:	d059      	beq.n	29a8 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    28f4:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    28f6:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    28f8:	4294      	cmp	r4, r2
    28fa:	d906      	bls.n	290a <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    28fc:	1e73      	subs	r3, r6, #1
    28fe:	4023      	ands	r3, r4
    2900:	0018      	movs	r0, r3
    2902:	4243      	negs	r3, r0
    2904:	4143      	adcs	r3, r0
    2906:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    2908:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    290a:	0022      	movs	r2, r4
    290c:	0028      	movs	r0, r5
    290e:	4c2a      	ldr	r4, [pc, #168]	; (29b8 <usbdc_cb_ctl_req+0x430>)
    2910:	47a0      	blx	r4
    2912:	4243      	negs	r3, r0
    2914:	4143      	adcs	r3, r0
    2916:	b2db      	uxtb	r3, r3
    2918:	e650      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    291a:	4b25      	ldr	r3, [pc, #148]	; (29b0 <usbdc_cb_ctl_req+0x428>)
    291c:	7eda      	ldrb	r2, [r3, #27]
    291e:	6959      	ldr	r1, [r3, #20]
    2920:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2922:	6959      	ldr	r1, [r3, #20]
    2924:	2300      	movs	r3, #0
    2926:	2201      	movs	r2, #1
    2928:	0028      	movs	r0, r5
    292a:	4c23      	ldr	r4, [pc, #140]	; (29b8 <usbdc_cb_ctl_req+0x430>)
    292c:	47a0      	blx	r4
		return true;
    292e:	2301      	movs	r3, #1
    2930:	e644      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		st = 0;
    2932:	2300      	movs	r3, #0
    2934:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2936:	4c1e      	ldr	r4, [pc, #120]	; (29b0 <usbdc_cb_ctl_req+0x428>)
    2938:	2202      	movs	r2, #2
    293a:	a902      	add	r1, sp, #8
    293c:	6960      	ldr	r0, [r4, #20]
    293e:	4b20      	ldr	r3, [pc, #128]	; (29c0 <usbdc_cb_ctl_req+0x438>)
    2940:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2942:	6961      	ldr	r1, [r4, #20]
    2944:	2300      	movs	r3, #0
    2946:	2202      	movs	r2, #2
    2948:	0028      	movs	r0, r5
    294a:	4c1b      	ldr	r4, [pc, #108]	; (29b8 <usbdc_cb_ctl_req+0x430>)
    294c:	47a0      	blx	r4
	return true;
    294e:	2301      	movs	r3, #1
    2950:	e634      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2952:	7920      	ldrb	r0, [r4, #4]
    2954:	2102      	movs	r1, #2
    2956:	4b1b      	ldr	r3, [pc, #108]	; (29c4 <usbdc_cb_ctl_req+0x43c>)
    2958:	4798      	blx	r3
		if (st < 0) {
    295a:	2800      	cmp	r0, #0
    295c:	db03      	blt.n	2966 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    295e:	2301      	movs	r3, #1
    2960:	4018      	ands	r0, r3
    2962:	9002      	str	r0, [sp, #8]
    2964:	e7e7      	b.n	2936 <usbdc_cb_ctl_req+0x3ae>
			return false;
    2966:	2300      	movs	r3, #0
    2968:	e628      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    296a:	4b11      	ldr	r3, [pc, #68]	; (29b0 <usbdc_cb_ctl_req+0x428>)
    296c:	2200      	movs	r2, #0
    296e:	6959      	ldr	r1, [r3, #20]
    2970:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2972:	6959      	ldr	r1, [r3, #20]
    2974:	2300      	movs	r3, #0
    2976:	3201      	adds	r2, #1
    2978:	2000      	movs	r0, #0
    297a:	4c0f      	ldr	r4, [pc, #60]	; (29b8 <usbdc_cb_ctl_req+0x430>)
    297c:	47a0      	blx	r4
		return true;
    297e:	2301      	movs	r3, #1
    2980:	e61c      	b.n	25bc <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2982:	4b0b      	ldr	r3, [pc, #44]	; (29b0 <usbdc_cb_ctl_req+0x428>)
    2984:	695a      	ldr	r2, [r3, #20]
    2986:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2988:	6959      	ldr	r1, [r3, #20]
    298a:	2300      	movs	r3, #0
    298c:	2201      	movs	r2, #1
    298e:	2000      	movs	r0, #0
    2990:	4c09      	ldr	r4, [pc, #36]	; (29b8 <usbdc_cb_ctl_req+0x430>)
    2992:	47a0      	blx	r4
			return true;
    2994:	2301      	movs	r3, #1
    2996:	e611      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    2998:	2300      	movs	r3, #0
    299a:	e60f      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    299c:	2300      	movs	r3, #0
    299e:	e60d      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    29a0:	2300      	movs	r3, #0
    29a2:	e60b      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    29a4:	2300      	movs	r3, #0
    29a6:	e609      	b.n	25bc <usbdc_cb_ctl_req+0x34>
		return false;
    29a8:	2300      	movs	r3, #0
    29aa:	e607      	b.n	25bc <usbdc_cb_ctl_req+0x34>
			return false;
    29ac:	2300      	movs	r3, #0
    29ae:	e605      	b.n	25bc <usbdc_cb_ctl_req+0x34>
    29b0:	20000314 	.word	0x20000314
    29b4:	00002b55 	.word	0x00002b55
    29b8:	0000256d 	.word	0x0000256d
    29bc:	00002bbd 	.word	0x00002bbd
    29c0:	00002c81 	.word	0x00002c81
    29c4:	00000995 	.word	0x00000995

000029c8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    29c8:	b510      	push	{r4, lr}
	switch (type) {
    29ca:	2801      	cmp	r0, #1
    29cc:	d009      	beq.n	29e2 <usbdc_register_handler+0x1a>
    29ce:	2800      	cmp	r0, #0
    29d0:	d002      	beq.n	29d8 <usbdc_register_handler+0x10>
    29d2:	2802      	cmp	r0, #2
    29d4:	d00a      	beq.n	29ec <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    29d6:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    29d8:	4807      	ldr	r0, [pc, #28]	; (29f8 <usbdc_register_handler+0x30>)
    29da:	3004      	adds	r0, #4
    29dc:	4b07      	ldr	r3, [pc, #28]	; (29fc <usbdc_register_handler+0x34>)
    29de:	4798      	blx	r3
		break;
    29e0:	e7f9      	b.n	29d6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    29e2:	4805      	ldr	r0, [pc, #20]	; (29f8 <usbdc_register_handler+0x30>)
    29e4:	3008      	adds	r0, #8
    29e6:	4b05      	ldr	r3, [pc, #20]	; (29fc <usbdc_register_handler+0x34>)
    29e8:	4798      	blx	r3
		break;
    29ea:	e7f4      	b.n	29d6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    29ec:	4802      	ldr	r0, [pc, #8]	; (29f8 <usbdc_register_handler+0x30>)
    29ee:	300c      	adds	r0, #12
    29f0:	4b02      	ldr	r3, [pc, #8]	; (29fc <usbdc_register_handler+0x34>)
    29f2:	4798      	blx	r3
}
    29f4:	e7ef      	b.n	29d6 <usbdc_register_handler+0xe>
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	20000314 	.word	0x20000314
    29fc:	00000aad 	.word	0x00000aad

00002a00 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2a00:	b570      	push	{r4, r5, r6, lr}
    2a02:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2a04:	1e43      	subs	r3, r0, #1
    2a06:	4198      	sbcs	r0, r3
    2a08:	b2c0      	uxtb	r0, r0
    2a0a:	4a0c      	ldr	r2, [pc, #48]	; (2a3c <usbdc_init+0x3c>)
    2a0c:	490c      	ldr	r1, [pc, #48]	; (2a40 <usbdc_init+0x40>)
    2a0e:	4b0d      	ldr	r3, [pc, #52]	; (2a44 <usbdc_init+0x44>)
    2a10:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2a12:	4b0d      	ldr	r3, [pc, #52]	; (2a48 <usbdc_init+0x48>)
    2a14:	4798      	blx	r3
	if (rc < 0) {
    2a16:	2800      	cmp	r0, #0
    2a18:	db0e      	blt.n	2a38 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2a1a:	4d0c      	ldr	r5, [pc, #48]	; (2a4c <usbdc_init+0x4c>)
    2a1c:	2220      	movs	r2, #32
    2a1e:	2100      	movs	r1, #0
    2a20:	0028      	movs	r0, r5
    2a22:	4b0b      	ldr	r3, [pc, #44]	; (2a50 <usbdc_init+0x50>)
    2a24:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2a26:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2a28:	490a      	ldr	r1, [pc, #40]	; (2a54 <usbdc_init+0x54>)
    2a2a:	2000      	movs	r0, #0
    2a2c:	4c0a      	ldr	r4, [pc, #40]	; (2a58 <usbdc_init+0x58>)
    2a2e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2a30:	490a      	ldr	r1, [pc, #40]	; (2a5c <usbdc_init+0x5c>)
    2a32:	2001      	movs	r0, #1
    2a34:	47a0      	blx	r4

	return 0;
    2a36:	2000      	movs	r0, #0
}
    2a38:	bd70      	pop	{r4, r5, r6, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	00000355 	.word	0x00000355
    2a40:	00002d5c 	.word	0x00002d5c
    2a44:	00000a4d 	.word	0x00000a4d
    2a48:	000006f9 	.word	0x000006f9
    2a4c:	20000314 	.word	0x20000314
    2a50:	00002c93 	.word	0x00002c93
    2a54:	00002455 	.word	0x00002455
    2a58:	0000075d 	.word	0x0000075d
    2a5c:	00002549 	.word	0x00002549

00002a60 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2a60:	b510      	push	{r4, lr}
    2a62:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2a64:	4802      	ldr	r0, [pc, #8]	; (2a70 <usbdc_register_function+0x10>)
    2a66:	3010      	adds	r0, #16
    2a68:	4b02      	ldr	r3, [pc, #8]	; (2a74 <usbdc_register_function+0x14>)
    2a6a:	4798      	blx	r3
}
    2a6c:	bd10      	pop	{r4, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	20000314 	.word	0x20000314
    2a74:	00000aad 	.word	0x00000aad

00002a78 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2a78:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2a7a:	4b0b      	ldr	r3, [pc, #44]	; (2aa8 <usbdc_start+0x30>)
    2a7c:	7e9b      	ldrb	r3, [r3, #26]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d10c      	bne.n	2a9c <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    2a82:	2800      	cmp	r0, #0
    2a84:	d00d      	beq.n	2aa2 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    2a86:	4b08      	ldr	r3, [pc, #32]	; (2aa8 <usbdc_start+0x30>)
    2a88:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2a8a:	6802      	ldr	r2, [r0, #0]
    2a8c:	79d2      	ldrb	r2, [r2, #7]
    2a8e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2a90:	2201      	movs	r2, #1
    2a92:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2a94:	4b05      	ldr	r3, [pc, #20]	; (2aac <usbdc_start+0x34>)
    2a96:	4798      	blx	r3
	return ERR_NONE;
    2a98:	2000      	movs	r0, #0
}
    2a9a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2a9c:	2004      	movs	r0, #4
    2a9e:	4240      	negs	r0, r0
    2aa0:	e7fb      	b.n	2a9a <usbdc_start+0x22>
		return ERR_BAD_DATA;
    2aa2:	2009      	movs	r0, #9
    2aa4:	4240      	negs	r0, r0
    2aa6:	e7f8      	b.n	2a9a <usbdc_start+0x22>
    2aa8:	20000314 	.word	0x20000314
    2aac:	00000769 	.word	0x00000769

00002ab0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2ab0:	b510      	push	{r4, lr}
	usb_d_attach();
    2ab2:	4b01      	ldr	r3, [pc, #4]	; (2ab8 <usbdc_attach+0x8>)
    2ab4:	4798      	blx	r3
}
    2ab6:	bd10      	pop	{r4, pc}
    2ab8:	00000775 	.word	0x00000775

00002abc <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2abc:	4b01      	ldr	r3, [pc, #4]	; (2ac4 <usbdc_get_ctrl_buffer+0x8>)
    2abe:	6958      	ldr	r0, [r3, #20]
}
    2ac0:	4770      	bx	lr
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	20000314 	.word	0x20000314

00002ac8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2ac8:	4b02      	ldr	r3, [pc, #8]	; (2ad4 <usbdc_get_state+0xc>)
    2aca:	7e98      	ldrb	r0, [r3, #26]
    2acc:	06c3      	lsls	r3, r0, #27
    2ace:	d500      	bpl.n	2ad2 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    2ad0:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    2ad2:	4770      	bx	lr
    2ad4:	20000314 	.word	0x20000314

00002ad8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2ad8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2ada:	4288      	cmp	r0, r1
    2adc:	d211      	bcs.n	2b02 <usb_find_desc+0x2a>
	return desc[0];
    2ade:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2ae0:	2b01      	cmp	r3, #1
    2ae2:	d910      	bls.n	2b06 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    2ae4:	7844      	ldrb	r4, [r0, #1]
    2ae6:	4294      	cmp	r4, r2
    2ae8:	d00a      	beq.n	2b00 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2aea:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2aec:	4281      	cmp	r1, r0
    2aee:	d906      	bls.n	2afe <usb_find_desc+0x26>
	return desc[0];
    2af0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2af2:	2b01      	cmp	r3, #1
    2af4:	d909      	bls.n	2b0a <usb_find_desc+0x32>
	return desc[1];
    2af6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2af8:	4294      	cmp	r4, r2
    2afa:	d1f6      	bne.n	2aea <usb_find_desc+0x12>
    2afc:	e000      	b.n	2b00 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2afe:	2000      	movs	r0, #0
}
    2b00:	bd10      	pop	{r4, pc}
	return NULL;
    2b02:	2000      	movs	r0, #0
    2b04:	e7fc      	b.n	2b00 <usb_find_desc+0x28>
		_desc_len_check();
    2b06:	2000      	movs	r0, #0
    2b08:	e7fa      	b.n	2b00 <usb_find_desc+0x28>
    2b0a:	2000      	movs	r0, #0
    2b0c:	e7f8      	b.n	2b00 <usb_find_desc+0x28>

00002b0e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2b0e:	4288      	cmp	r0, r1
    2b10:	d215      	bcs.n	2b3e <usb_find_ep_desc+0x30>
	return desc[0];
    2b12:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2b14:	2b01      	cmp	r3, #1
    2b16:	d914      	bls.n	2b42 <usb_find_ep_desc+0x34>
	return desc[1];
    2b18:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2b1a:	2a04      	cmp	r2, #4
    2b1c:	d013      	beq.n	2b46 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2b1e:	2a05      	cmp	r2, #5
    2b20:	d00c      	beq.n	2b3c <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    2b22:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2b24:	4281      	cmp	r1, r0
    2b26:	d908      	bls.n	2b3a <usb_find_ep_desc+0x2c>
	return desc[0];
    2b28:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2b2a:	2b01      	cmp	r3, #1
    2b2c:	d90d      	bls.n	2b4a <usb_find_ep_desc+0x3c>
	return desc[1];
    2b2e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2b30:	2a04      	cmp	r2, #4
    2b32:	d00c      	beq.n	2b4e <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2b34:	2a05      	cmp	r2, #5
    2b36:	d1f4      	bne.n	2b22 <usb_find_ep_desc+0x14>
    2b38:	e000      	b.n	2b3c <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2b3a:	2000      	movs	r0, #0
}
    2b3c:	4770      	bx	lr
	return NULL;
    2b3e:	2000      	movs	r0, #0
    2b40:	e7fc      	b.n	2b3c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2b42:	2000      	movs	r0, #0
    2b44:	e7fa      	b.n	2b3c <usb_find_ep_desc+0x2e>
	return NULL;
    2b46:	2000      	movs	r0, #0
    2b48:	e7f8      	b.n	2b3c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2b4a:	2000      	movs	r0, #0
    2b4c:	e7f6      	b.n	2b3c <usb_find_ep_desc+0x2e>
	return NULL;
    2b4e:	2000      	movs	r0, #0
    2b50:	e7f4      	b.n	2b3c <usb_find_ep_desc+0x2e>
	...

00002b54 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2b54:	b570      	push	{r4, r5, r6, lr}
    2b56:	000c      	movs	r4, r1
    2b58:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2b5a:	2202      	movs	r2, #2
    2b5c:	4b16      	ldr	r3, [pc, #88]	; (2bb8 <usb_find_cfg_desc+0x64>)
    2b5e:	4798      	blx	r3
	if (!desc) {
    2b60:	2800      	cmp	r0, #0
    2b62:	d01d      	beq.n	2ba0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    2b64:	4284      	cmp	r4, r0
    2b66:	d91c      	bls.n	2ba2 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    2b68:	7803      	ldrb	r3, [r0, #0]
    2b6a:	2b01      	cmp	r3, #1
    2b6c:	d91b      	bls.n	2ba6 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    2b6e:	7843      	ldrb	r3, [r0, #1]
    2b70:	2b02      	cmp	r3, #2
    2b72:	d11a      	bne.n	2baa <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    2b74:	7943      	ldrb	r3, [r0, #5]
    2b76:	42ab      	cmp	r3, r5
    2b78:	d012      	beq.n	2ba0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    2b7a:	78c2      	ldrb	r2, [r0, #3]
    2b7c:	0212      	lsls	r2, r2, #8
    2b7e:	7883      	ldrb	r3, [r0, #2]
    2b80:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2b82:	b29b      	uxth	r3, r3
    2b84:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2b86:	4284      	cmp	r4, r0
    2b88:	d909      	bls.n	2b9e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    2b8a:	7803      	ldrb	r3, [r0, #0]
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d90e      	bls.n	2bae <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    2b90:	7843      	ldrb	r3, [r0, #1]
    2b92:	2b02      	cmp	r3, #2
    2b94:	d10d      	bne.n	2bb2 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    2b96:	7943      	ldrb	r3, [r0, #5]
    2b98:	42ab      	cmp	r3, r5
    2b9a:	d1ee      	bne.n	2b7a <usb_find_cfg_desc+0x26>
    2b9c:	e000      	b.n	2ba0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2b9e:	2000      	movs	r0, #0
}
    2ba0:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    2ba2:	2000      	movs	r0, #0
    2ba4:	e7fc      	b.n	2ba0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2ba6:	2000      	movs	r0, #0
    2ba8:	e7fa      	b.n	2ba0 <usb_find_cfg_desc+0x4c>
	return NULL;
    2baa:	2000      	movs	r0, #0
    2bac:	e7f8      	b.n	2ba0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2bae:	2000      	movs	r0, #0
    2bb0:	e7f6      	b.n	2ba0 <usb_find_cfg_desc+0x4c>
	return NULL;
    2bb2:	2000      	movs	r0, #0
    2bb4:	e7f4      	b.n	2ba0 <usb_find_cfg_desc+0x4c>
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	00002ad9 	.word	0x00002ad9

00002bbc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bbe:	000d      	movs	r5, r1
    2bc0:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2bc2:	4288      	cmp	r0, r1
    2bc4:	d212      	bcs.n	2bec <usb_find_str_desc+0x30>
    2bc6:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2bc8:	4e0a      	ldr	r6, [pc, #40]	; (2bf4 <usb_find_str_desc+0x38>)
    2bca:	2203      	movs	r2, #3
    2bcc:	0029      	movs	r1, r5
    2bce:	47b0      	blx	r6
		if (desc) {
    2bd0:	2800      	cmp	r0, #0
    2bd2:	d00e      	beq.n	2bf2 <usb_find_str_desc+0x36>
	return desc[0];
    2bd4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    2bd6:	2b01      	cmp	r3, #1
    2bd8:	d90a      	bls.n	2bf0 <usb_find_str_desc+0x34>
			if (i == str_index) {
    2bda:	42a7      	cmp	r7, r4
    2bdc:	d009      	beq.n	2bf2 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    2bde:	3401      	adds	r4, #1
    2be0:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    2be2:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    2be4:	4285      	cmp	r5, r0
    2be6:	d8f0      	bhi.n	2bca <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2be8:	2000      	movs	r0, #0
    2bea:	e002      	b.n	2bf2 <usb_find_str_desc+0x36>
    2bec:	2000      	movs	r0, #0
    2bee:	e000      	b.n	2bf2 <usb_find_str_desc+0x36>
			_desc_len_check();
    2bf0:	2000      	movs	r0, #0
}
    2bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bf4:	00002ad9 	.word	0x00002ad9

00002bf8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2bf8:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2bfa:	4806      	ldr	r0, [pc, #24]	; (2c14 <cdc_device_acm_init+0x1c>)
    2bfc:	3040      	adds	r0, #64	; 0x40
    2bfe:	4b06      	ldr	r3, [pc, #24]	; (2c18 <cdc_device_acm_init+0x20>)
    2c00:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2c02:	4b06      	ldr	r3, [pc, #24]	; (2c1c <cdc_device_acm_init+0x24>)
    2c04:	4798      	blx	r3

	usbdc_start(single_desc);
    2c06:	4806      	ldr	r0, [pc, #24]	; (2c20 <cdc_device_acm_init+0x28>)
    2c08:	4b06      	ldr	r3, [pc, #24]	; (2c24 <cdc_device_acm_init+0x2c>)
    2c0a:	4798      	blx	r3
	usbdc_attach();
    2c0c:	4b06      	ldr	r3, [pc, #24]	; (2c28 <cdc_device_acm_init+0x30>)
    2c0e:	4798      	blx	r3
}
    2c10:	bd10      	pop	{r4, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	20000334 	.word	0x20000334
    2c18:	00002a01 	.word	0x00002a01
    2c1c:	00002385 	.word	0x00002385
    2c20:	20000008 	.word	0x20000008
    2c24:	00002a79 	.word	0x00002a79
    2c28:	00002ab1 	.word	0x00002ab1

00002c2c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2c2c:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2c2e:	4b01      	ldr	r3, [pc, #4]	; (2c34 <usb_init+0x8>)
    2c30:	4798      	blx	r3
}
    2c32:	bd10      	pop	{r4, pc}
    2c34:	00002bf9 	.word	0x00002bf9

00002c38 <__libc_init_array>:
    2c38:	b570      	push	{r4, r5, r6, lr}
    2c3a:	2600      	movs	r6, #0
    2c3c:	4d0c      	ldr	r5, [pc, #48]	; (2c70 <__libc_init_array+0x38>)
    2c3e:	4c0d      	ldr	r4, [pc, #52]	; (2c74 <__libc_init_array+0x3c>)
    2c40:	1b64      	subs	r4, r4, r5
    2c42:	10a4      	asrs	r4, r4, #2
    2c44:	42a6      	cmp	r6, r4
    2c46:	d109      	bne.n	2c5c <__libc_init_array+0x24>
    2c48:	2600      	movs	r6, #0
    2c4a:	f000 f893 	bl	2d74 <_init>
    2c4e:	4d0a      	ldr	r5, [pc, #40]	; (2c78 <__libc_init_array+0x40>)
    2c50:	4c0a      	ldr	r4, [pc, #40]	; (2c7c <__libc_init_array+0x44>)
    2c52:	1b64      	subs	r4, r4, r5
    2c54:	10a4      	asrs	r4, r4, #2
    2c56:	42a6      	cmp	r6, r4
    2c58:	d105      	bne.n	2c66 <__libc_init_array+0x2e>
    2c5a:	bd70      	pop	{r4, r5, r6, pc}
    2c5c:	00b3      	lsls	r3, r6, #2
    2c5e:	58eb      	ldr	r3, [r5, r3]
    2c60:	4798      	blx	r3
    2c62:	3601      	adds	r6, #1
    2c64:	e7ee      	b.n	2c44 <__libc_init_array+0xc>
    2c66:	00b3      	lsls	r3, r6, #2
    2c68:	58eb      	ldr	r3, [r5, r3]
    2c6a:	4798      	blx	r3
    2c6c:	3601      	adds	r6, #1
    2c6e:	e7f2      	b.n	2c56 <__libc_init_array+0x1e>
    2c70:	00002d80 	.word	0x00002d80
    2c74:	00002d80 	.word	0x00002d80
    2c78:	00002d80 	.word	0x00002d80
    2c7c:	00002d84 	.word	0x00002d84

00002c80 <memcpy>:
    2c80:	2300      	movs	r3, #0
    2c82:	b510      	push	{r4, lr}
    2c84:	429a      	cmp	r2, r3
    2c86:	d100      	bne.n	2c8a <memcpy+0xa>
    2c88:	bd10      	pop	{r4, pc}
    2c8a:	5ccc      	ldrb	r4, [r1, r3]
    2c8c:	54c4      	strb	r4, [r0, r3]
    2c8e:	3301      	adds	r3, #1
    2c90:	e7f8      	b.n	2c84 <memcpy+0x4>

00002c92 <memset>:
    2c92:	0003      	movs	r3, r0
    2c94:	1882      	adds	r2, r0, r2
    2c96:	4293      	cmp	r3, r2
    2c98:	d100      	bne.n	2c9c <memset+0xa>
    2c9a:	4770      	bx	lr
    2c9c:	7019      	strb	r1, [r3, #0]
    2c9e:	3301      	adds	r3, #1
    2ca0:	e7f9      	b.n	2c96 <memset+0x4>
    2ca2:	0000      	movs	r0, r0
    2ca4:	682f2e2e 	.word	0x682f2e2e
    2ca8:	732f6c61 	.word	0x732f6c61
    2cac:	682f6372 	.word	0x682f6372
    2cb0:	745f6c61 	.word	0x745f6c61
    2cb4:	72656d69 	.word	0x72656d69
    2cb8:	0000632e 	.word	0x0000632e
    2cbc:	682f2e2e 	.word	0x682f2e2e
    2cc0:	752f6c61 	.word	0x752f6c61
    2cc4:	736c6974 	.word	0x736c6974
    2cc8:	6372732f 	.word	0x6372732f
    2ccc:	6974752f 	.word	0x6974752f
    2cd0:	6c5f736c 	.word	0x6c5f736c
    2cd4:	2e747369 	.word	0x2e747369
    2cd8:	00000063 	.word	0x00000063

00002cdc <_tcs>:
    2cdc:	01680003 00000000 00000000 000001f4     ..h.............
    2cec:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    2cfc:	63745f6c 0000632e 00002000              l_tc.c... ..

00002d08 <_usb_ep_cfgs>:
    2d08:	200002b0 00000000 00000040 20000270     ... ....@...p.. 
    2d18:	00000000 00000040 20000230 00000000     ....@...0.. ....
    2d28:	00000040 00002998 00002680 00002998     @....)...&...)..
    2d38:	000026b2 00002998 000025d6 00002998     .&...)...%...)..
    2d48:	00002998 00002998 000025ea 00002998     .)...)...%...)..
    2d58:	000026e6 752f2e2e 642f6273 63697665     .&..../usb/devic
    2d68:	73752f65 2e636462 00000063              e/usbdc.c...

00002d74 <_init>:
    2d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d7a:	bc08      	pop	{r3}
    2d7c:	469e      	mov	lr, r3
    2d7e:	4770      	bx	lr

00002d80 <__init_array_start>:
    2d80:	000000dd 	.word	0x000000dd

00002d84 <_fini>:
    2d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d8a:	bc08      	pop	{r3}
    2d8c:	469e      	mov	lr, r3
    2d8e:	4770      	bx	lr

00002d90 <__fini_array_start>:
    2d90:	000000b5 	.word	0x000000b5
