
Dual_Flapper_Valve_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012604  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012604  00012604  00022604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000064c  20000000  0001260c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003064c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003064c  2**0
                  CONTENTS
  5 .bss          0000a960  20000650  00012c60  00030650  2**3
                  ALLOC
  6 .stack        00010000  2000afb0  0001d5c0  00030650  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003067a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0008a579  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bf78  00000000  00000000  000bac4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001f061  00000000  00000000  000c6bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003688  00000000  00000000  000e5c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000032d0  00000000  00000000  000e92ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00053dd8  00000000  00000000  000ec57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00044456  00000000  00000000  00140355  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00141066  00000000  00000000  001847ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e1e8  00000000  00000000  002c5814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 af 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	e9 5b 00 00 81 49 00 00 91 49 00 00 d1 02 00 00     .[...I...I......
      7c:	a1 49 00 00 b1 49 00 00 c1 49 00 00 d1 49 00 00     .I...I...I...I..
      8c:	e1 49 00 00 f1 49 00 00 01 4a 00 00 d1 02 00 00     .I...I...J......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 c5 3d 00 00 25 ab 00 00     .........=..%...
     184:	35 ab 00 00 45 ab 00 00 55 ab 00 00 d1 02 00 00     5...E...U.......
     194:	65 75 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     eu..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 81 75 00 00     .............u..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	9d 75 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .u..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 21 82 00 00 d1 02 00 00     ........!.......
     1f4:	3d 82 00 00 d1 02 00 00 59 82 00 00 75 82 00 00     =.......Y...u...
     204:	91 82 00 00 ad 82 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000650 	.word	0x20000650
     280:	00000000 	.word	0x00000000
     284:	0001260c 	.word	0x0001260c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001260c 	.word	0x0001260c
     2c4:	20000654 	.word	0x20000654
     2c8:	0001260c 	.word	0x0001260c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0001260c 	.word	0x0001260c
     33c:	2000064c 	.word	0x2000064c
     340:	2000afb0 	.word	0x2000afb0
     344:	20000650 	.word	0x20000650
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00011bcd 	.word	0x00011bcd
     354:	00000461 	.word	0x00000461

00000358 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
     35c:	4b01      	ldr	r3, [pc, #4]	; (364 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
     35e:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
     360:	4620      	mov	r0, r4
     362:	bd10      	pop	{r4, pc}
     364:	0000e885 	.word	0x0000e885

00000368 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
     368:	b538      	push	{r3, r4, r5, lr}
     36a:	4d04      	ldr	r5, [pc, #16]	; (37c <__tcf_0+0x14>)
     36c:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
     370:	4c03      	ldr	r4, [pc, #12]	; (380 <__tcf_0+0x18>)
     372:	47a0      	blx	r4
     374:	4628      	mov	r0, r5
     376:	47a0      	blx	r4
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	2000066c 	.word	0x2000066c
     380:	0000e885 	.word	0x0000e885

00000384 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
     384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     386:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
     388:	4d17      	ldr	r5, [pc, #92]	; (3e8 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x64>)
     38a:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
		valve[i]->InitController(i);
     38e:	2100      	movs	r1, #0
     390:	4628      	mov	r0, r5
     392:	4f16      	ldr	r7, [pc, #88]	; (3ec <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x68>)
     394:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
     396:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
     39a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
     39e:	4e14      	ldr	r6, [pc, #80]	; (3f0 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x6c>)
     3a0:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
     3a2:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
     3a6:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
     3aa:	2101      	movs	r1, #1
     3ac:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
     3ae:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
     3b2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
     3b6:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
     3b8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
     3bc:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
     3c0:	47b0      	blx	r6
     3c2:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
     3c6:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
     3ca:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
     3cc:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
     3d0:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	valve2=valve[1]; 
     3d4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
     3d8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (valve1->isOK)|(valve2->isOK);
     3dc:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
     3e0:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
     3e4:	4310      	orrs	r0, r2
     3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3e8:	2000066c 	.word	0x2000066c
     3ec:	0000e8a5 	.word	0x0000e8a5
     3f0:	0000ec7b 	.word	0x0000ec7b

000003f4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:
bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
	return is_stand_alone;
}

Dual_Flapper_Valve_Controller flapper;
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     3f6:	4c10      	ldr	r4, [pc, #64]	; (438 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
     3f8:	f504 75dc 	add.w	r5, r4, #440	; 0x1b8
     3fc:	490f      	ldr	r1, [pc, #60]	; (43c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
     3fe:	4628      	mov	r0, r5
     400:	4b0f      	ldr	r3, [pc, #60]	; (440 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x4c>)
     402:	4798      	blx	r3
     404:	4e0f      	ldr	r6, [pc, #60]	; (444 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x50>)
     406:	4632      	mov	r2, r6
     408:	490f      	ldr	r1, [pc, #60]	; (448 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x54>)
     40a:	4628      	mov	r0, r5
     40c:	4d0f      	ldr	r5, [pc, #60]	; (44c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x58>)
     40e:	47a8      	blx	r5
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
     410:	4620      	mov	r0, r4
     412:	4f0f      	ldr	r7, [pc, #60]	; (450 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x5c>)
     414:	47b8      	blx	r7
     416:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
     41a:	47b8      	blx	r7
     41c:	4632      	mov	r2, r6
     41e:	490d      	ldr	r1, [pc, #52]	; (454 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x60>)
     420:	2000      	movs	r0, #0
     422:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
     424:	f504 74e8 	add.w	r4, r4, #464	; 0x1d0
     428:	4620      	mov	r0, r4
     42a:	4b0b      	ldr	r3, [pc, #44]	; (458 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x64>)
     42c:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
     42e:	4632      	mov	r2, r6
     430:	490a      	ldr	r1, [pc, #40]	; (45c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x68>)
     432:	4620      	mov	r0, r4
     434:	47a8      	blx	r5
     436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     438:	2000066c 	.word	0x2000066c
     43c:	2000ae28 	.word	0x2000ae28
     440:	0000d0fd 	.word	0x0000d0fd
     444:	20000000 	.word	0x20000000
     448:	0000d119 	.word	0x0000d119
     44c:	0001193d 	.word	0x0001193d
     450:	0000e7f9 	.word	0x0000e7f9
     454:	00000369 	.word	0x00000369
     458:	0000e7f9 	.word	0x0000e7f9
     45c:	00000359 	.word	0x00000359

00000460 <main>:


#include "main.h"

int main(void)
{
     460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	atmel_start_init();
     464:	4b48      	ldr	r3, [pc, #288]	; (588 <main+0x128>)
     466:	4798      	blx	r3
	uint8_t position;

	usb.Init();
     468:	4848      	ldr	r0, [pc, #288]	; (58c <main+0x12c>)
     46a:	4b49      	ldr	r3, [pc, #292]	; (590 <main+0x130>)
     46c:	4798      	blx	r3
	delay_ms(100);
     46e:	2064      	movs	r0, #100	; 0x64
     470:	4b48      	ldr	r3, [pc, #288]	; (594 <main+0x134>)
     472:	4798      	blx	r3

	memory.Init();
     474:	4c48      	ldr	r4, [pc, #288]	; (598 <main+0x138>)
     476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     47a:	4620      	mov	r0, r4
     47c:	4b47      	ldr	r3, [pc, #284]	; (59c <main+0x13c>)
     47e:	4798      	blx	r3
	memory.WriteDefaultParameters();
     480:	4620      	mov	r0, r4
     482:	4b47      	ldr	r3, [pc, #284]	; (5a0 <main+0x140>)
     484:	4798      	blx	r3
	flapper.Init();
     486:	4847      	ldr	r0, [pc, #284]	; (5a4 <main+0x144>)
     488:	4b47      	ldr	r3, [pc, #284]	; (5a8 <main+0x148>)
     48a:	4798      	blx	r3
// 			
// 		}
		
		for (uint8_t i = 1; i < 8; i++)
		{
			flapper.valve1->StartControlling(i*32);
     48c:	4c45      	ldr	r4, [pc, #276]	; (5a4 <main+0x144>)
			flapper.valve2->StartControlling(i*32);
			while ((!flapper.valve1->gotSetpoint)|(!flapper.valve2->gotSetpoint))
			{
				flapper.valve1->Control_NBC_StandAlone_Reset();
     48e:	4d47      	ldr	r5, [pc, #284]	; (5ac <main+0x14c>)
     490:	e076      	b.n	580 <main+0x120>
     492:	47a8      	blx	r5
				flapper.valve2->Control_NBC_StandAlone_Reset();
     494:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
     498:	47a8      	blx	r5
			while ((!flapper.valve1->gotSetpoint)|(!flapper.valve2->gotSetpoint))
     49a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     49e:	f890 209b 	ldrb.w	r2, [r0, #155]	; 0x9b
     4a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
     4a6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
     4aa:	b2db      	uxtb	r3, r3
     4ac:	2a00      	cmp	r2, #0
     4ae:	d0f0      	beq.n	492 <main+0x32>
     4b0:	2b00      	cmp	r3, #0
     4b2:	d0ee      	beq.n	492 <main+0x32>
			}
		
			delay_ms(100);
     4b4:	2064      	movs	r0, #100	; 0x64
     4b6:	4b37      	ldr	r3, [pc, #220]	; (594 <main+0x134>)
     4b8:	4798      	blx	r3
			flapper.valve1->StopControlling();
     4ba:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     4be:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 5b4 <main+0x154>
     4c2:	47c0      	blx	r8
			flapper.valve2->StopControlling();
     4c4:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
     4c8:	47c0      	blx	r8
     4ca:	3620      	adds	r6, #32
		for (uint8_t i = 1; i < 8; i++)
     4cc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
     4d0:	d015      	beq.n	4fe <main+0x9e>
			flapper.valve1->StartControlling(i*32);
     4d2:	4631      	mov	r1, r6
     4d4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     4d8:	47b8      	blx	r7
			flapper.valve2->StartControlling(i*32);
     4da:	4631      	mov	r1, r6
     4dc:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
     4e0:	47b8      	blx	r7
			while ((!flapper.valve1->gotSetpoint)|(!flapper.valve2->gotSetpoint))
     4e2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     4e6:	f890 209b 	ldrb.w	r2, [r0, #155]	; 0x9b
     4ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
     4ee:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
     4f2:	b2db      	uxtb	r3, r3
     4f4:	2a00      	cmp	r2, #0
     4f6:	d0cc      	beq.n	492 <main+0x32>
     4f8:	2b00      	cmp	r3, #0
     4fa:	d0ca      	beq.n	492 <main+0x32>
     4fc:	e7da      	b.n	4b4 <main+0x54>
		}
		delay_ms(1000);
     4fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     502:	4b24      	ldr	r3, [pc, #144]	; (594 <main+0x134>)
     504:	4798      	blx	r3
     506:	26df      	movs	r6, #223	; 0xdf
   		for (uint8_t i = 1; i < 8; i++)
		{
			flapper.valve1->StartControlling(255-i*32);
     508:	4f29      	ldr	r7, [pc, #164]	; (5b0 <main+0x150>)
     50a:	e01f      	b.n	54c <main+0xec>
			flapper.valve2->StartControlling(255-i*32);
			while ((!flapper.valve1->gotSetpoint)|(!flapper.valve2->gotSetpoint))
			{
				flapper.valve1->Control_NBC_StandAlone_Reset();
     50c:	47a8      	blx	r5
				flapper.valve2->Control_NBC_StandAlone_Reset();
     50e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
     512:	47a8      	blx	r5
			while ((!flapper.valve1->gotSetpoint)|(!flapper.valve2->gotSetpoint))
     514:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     518:	f890 209b 	ldrb.w	r2, [r0, #155]	; 0x9b
     51c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
     520:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
     524:	b2db      	uxtb	r3, r3
     526:	2a00      	cmp	r2, #0
     528:	d0f0      	beq.n	50c <main+0xac>
     52a:	2b00      	cmp	r3, #0
     52c:	d0ee      	beq.n	50c <main+0xac>
			}
			delay_ms(100);
     52e:	2064      	movs	r0, #100	; 0x64
     530:	4b18      	ldr	r3, [pc, #96]	; (594 <main+0x134>)
     532:	4798      	blx	r3
			flapper.valve1->StopControlling();
     534:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     538:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5b4 <main+0x154>
     53c:	47c0      	blx	r8
			flapper.valve2->StopControlling();
     53e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
     542:	47c0      	blx	r8
     544:	3e20      	subs	r6, #32
     546:	b2f6      	uxtb	r6, r6
   		for (uint8_t i = 1; i < 8; i++)
     548:	2eff      	cmp	r6, #255	; 0xff
     54a:	d015      	beq.n	578 <main+0x118>
			flapper.valve1->StartControlling(255-i*32);
     54c:	4631      	mov	r1, r6
     54e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     552:	47b8      	blx	r7
			flapper.valve2->StartControlling(255-i*32);
     554:	4631      	mov	r1, r6
     556:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
     55a:	47b8      	blx	r7
			while ((!flapper.valve1->gotSetpoint)|(!flapper.valve2->gotSetpoint))
     55c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
     560:	f890 209b 	ldrb.w	r2, [r0, #155]	; 0x9b
     564:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
     568:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
     56c:	b2db      	uxtb	r3, r3
     56e:	2a00      	cmp	r2, #0
     570:	d0cc      	beq.n	50c <main+0xac>
     572:	2b00      	cmp	r3, #0
     574:	d0ca      	beq.n	50c <main+0xac>
     576:	e7da      	b.n	52e <main+0xce>
		
		}
	delay_ms(1000);
     578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     57c:	4b05      	ldr	r3, [pc, #20]	; (594 <main+0x134>)
     57e:	4798      	blx	r3
{
     580:	2620      	movs	r6, #32
			flapper.valve1->StartControlling(i*32);
     582:	4f0b      	ldr	r7, [pc, #44]	; (5b0 <main+0x150>)
     584:	e7a5      	b.n	4d2 <main+0x72>
     586:	bf00      	nop
     588:	000006ad 	.word	0x000006ad
     58c:	20001600 	.word	0x20001600
     590:	0000d979 	.word	0x0000d979
     594:	000020e5 	.word	0x000020e5
     598:	20002868 	.word	0x20002868
     59c:	0000e305 	.word	0x0000e305
     5a0:	0000e24d 	.word	0x0000e24d
     5a4:	2000083c 	.word	0x2000083c
     5a8:	00000385 	.word	0x00000385
     5ac:	0000eaf5 	.word	0x0000eaf5
     5b0:	0000f46d 	.word	0x0000f46d
     5b4:	0000f429 	.word	0x0000f429

000005b8 <_GLOBAL__sub_I_main>:


	

	}
}
     5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     5bc:	4c2b      	ldr	r4, [pc, #172]	; (66c <_GLOBAL__sub_I_main+0xb4>)
     5be:	492c      	ldr	r1, [pc, #176]	; (670 <_GLOBAL__sub_I_main+0xb8>)
     5c0:	4620      	mov	r0, r4
     5c2:	4f2c      	ldr	r7, [pc, #176]	; (674 <_GLOBAL__sub_I_main+0xbc>)
     5c4:	47b8      	blx	r7
     5c6:	4e2c      	ldr	r6, [pc, #176]	; (678 <_GLOBAL__sub_I_main+0xc0>)
     5c8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 6a8 <_GLOBAL__sub_I_main+0xf0>
     5cc:	4632      	mov	r2, r6
     5ce:	4641      	mov	r1, r8
     5d0:	4620      	mov	r0, r4
     5d2:	4d2a      	ldr	r5, [pc, #168]	; (67c <_GLOBAL__sub_I_main+0xc4>)
     5d4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     5d6:	f104 0920 	add.w	r9, r4, #32
     5da:	4929      	ldr	r1, [pc, #164]	; (680 <_GLOBAL__sub_I_main+0xc8>)
     5dc:	4648      	mov	r0, r9
     5de:	47b8      	blx	r7
     5e0:	4632      	mov	r2, r6
     5e2:	4641      	mov	r1, r8
     5e4:	4648      	mov	r0, r9
     5e6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     5e8:	f104 0940 	add.w	r9, r4, #64	; 0x40
     5ec:	4925      	ldr	r1, [pc, #148]	; (684 <_GLOBAL__sub_I_main+0xcc>)
     5ee:	4648      	mov	r0, r9
     5f0:	47b8      	blx	r7
     5f2:	4632      	mov	r2, r6
     5f4:	4641      	mov	r1, r8
     5f6:	4648      	mov	r0, r9
     5f8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     5fa:	f104 0960 	add.w	r9, r4, #96	; 0x60
     5fe:	4922      	ldr	r1, [pc, #136]	; (688 <_GLOBAL__sub_I_main+0xd0>)
     600:	4648      	mov	r0, r9
     602:	47b8      	blx	r7
     604:	4632      	mov	r2, r6
     606:	4641      	mov	r1, r8
     608:	4648      	mov	r0, r9
     60a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     60c:	f104 0980 	add.w	r9, r4, #128	; 0x80
     610:	491e      	ldr	r1, [pc, #120]	; (68c <_GLOBAL__sub_I_main+0xd4>)
     612:	4648      	mov	r0, r9
     614:	47b8      	blx	r7
     616:	4632      	mov	r2, r6
     618:	4641      	mov	r1, r8
     61a:	4648      	mov	r0, r9
     61c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     61e:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     622:	491b      	ldr	r1, [pc, #108]	; (690 <_GLOBAL__sub_I_main+0xd8>)
     624:	4648      	mov	r0, r9
     626:	47b8      	blx	r7
     628:	4632      	mov	r2, r6
     62a:	4641      	mov	r1, r8
     62c:	4648      	mov	r0, r9
     62e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     630:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     634:	4917      	ldr	r1, [pc, #92]	; (694 <_GLOBAL__sub_I_main+0xdc>)
     636:	4648      	mov	r0, r9
     638:	47b8      	blx	r7
     63a:	4632      	mov	r2, r6
     63c:	4641      	mov	r1, r8
     63e:	4648      	mov	r0, r9
     640:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     642:	f104 09e0 	add.w	r9, r4, #224	; 0xe0
     646:	4914      	ldr	r1, [pc, #80]	; (698 <_GLOBAL__sub_I_main+0xe0>)
     648:	4648      	mov	r0, r9
     64a:	47b8      	blx	r7
     64c:	4632      	mov	r2, r6
     64e:	4641      	mov	r1, r8
     650:	4648      	mov	r0, r9
     652:	47a8      	blx	r5
     654:	f504 7480 	add.w	r4, r4, #256	; 0x100
     658:	4910      	ldr	r1, [pc, #64]	; (69c <_GLOBAL__sub_I_main+0xe4>)
     65a:	4620      	mov	r0, r4
     65c:	4b10      	ldr	r3, [pc, #64]	; (6a0 <_GLOBAL__sub_I_main+0xe8>)
     65e:	4798      	blx	r3
     660:	4632      	mov	r2, r6
     662:	4910      	ldr	r1, [pc, #64]	; (6a4 <_GLOBAL__sub_I_main+0xec>)
     664:	4620      	mov	r0, r4
     666:	47a8      	blx	r5
     668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     66c:	2000092c 	.word	0x2000092c
     670:	2000acf8 	.word	0x2000acf8
     674:	0000d2b9 	.word	0x0000d2b9
     678:	20000000 	.word	0x20000000
     67c:	0001193d 	.word	0x0001193d
     680:	2000ad8c 	.word	0x2000ad8c
     684:	2000aeb0 	.word	0x2000aeb0
     688:	2000adac 	.word	0x2000adac
     68c:	2000ae70 	.word	0x2000ae70
     690:	2000ae90 	.word	0x2000ae90
     694:	2000ad68 	.word	0x2000ad68
     698:	2000ae08 	.word	0x2000ae08
     69c:	2000ae28 	.word	0x2000ae28
     6a0:	0000d0fd 	.word	0x0000d0fd
     6a4:	0000d119 	.word	0x0000d119
     6a8:	0000d2f1 	.word	0x0000d2f1

000006ac <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	af00      	add	r7, sp, #0
	system_init();
     6b0:	4b03      	ldr	r3, [pc, #12]	; (6c0 <atmel_start_init+0x14>)
     6b2:	4798      	blx	r3
	usb_init();
     6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <atmel_start_init+0x18>)
     6b6:	4798      	blx	r3
	spi_nor_flash_init();
     6b8:	4b03      	ldr	r3, [pc, #12]	; (6c8 <atmel_start_init+0x1c>)
     6ba:	4798      	blx	r3
}
     6bc:	bf00      	nop
     6be:	bd80      	pop	{r7, pc}
     6c0:	00001aad 	.word	0x00001aad
     6c4:	0000b229 	.word	0x0000b229
     6c8:	0000b1bd 	.word	0x0000b1bd

000006cc <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     6cc:	b480      	push	{r7}
     6ce:	b085      	sub	sp, #20
     6d0:	af00      	add	r7, sp, #0
     6d2:	60f8      	str	r0, [r7, #12]
     6d4:	460b      	mov	r3, r1
     6d6:	607a      	str	r2, [r7, #4]
     6d8:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     6da:	7afa      	ldrb	r2, [r7, #11]
     6dc:	68fb      	ldr	r3, [r7, #12]
     6de:	3220      	adds	r2, #32
     6e0:	6879      	ldr	r1, [r7, #4]
     6e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     6e6:	bf00      	nop
     6e8:	3714      	adds	r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f0:	4770      	bx	lr

000006f2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     6f2:	b480      	push	{r7}
     6f4:	b083      	sub	sp, #12
     6f6:	af00      	add	r7, sp, #0
     6f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	691b      	ldr	r3, [r3, #16]
     6fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     702:	687b      	ldr	r3, [r7, #4]
     704:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     706:	bf00      	nop
     708:	370c      	adds	r7, #12
     70a:	46bd      	mov	sp, r7
     70c:	f85d 7b04 	ldr.w	r7, [sp], #4
     710:	4770      	bx	lr

00000712 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     712:	b480      	push	{r7}
     714:	b083      	sub	sp, #12
     716:	af00      	add	r7, sp, #0
     718:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	691b      	ldr	r3, [r3, #16]
     71e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     722:	687b      	ldr	r3, [r7, #4]
     724:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     726:	bf00      	nop
     728:	370c      	adds	r7, #12
     72a:	46bd      	mov	sp, r7
     72c:	f85d 7b04 	ldr.w	r7, [sp], #4
     730:	4770      	bx	lr

00000732 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     732:	b480      	push	{r7}
     734:	b083      	sub	sp, #12
     736:	af00      	add	r7, sp, #0
     738:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	691b      	ldr	r3, [r3, #16]
     73e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     742:	687b      	ldr	r3, [r7, #4]
     744:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     746:	bf00      	nop
     748:	370c      	adds	r7, #12
     74a:	46bd      	mov	sp, r7
     74c:	f85d 7b04 	ldr.w	r7, [sp], #4
     750:	4770      	bx	lr

00000752 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     752:	b480      	push	{r7}
     754:	b083      	sub	sp, #12
     756:	af00      	add	r7, sp, #0
     758:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	691b      	ldr	r3, [r3, #16]
     75e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     762:	687b      	ldr	r3, [r7, #4]
     764:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     766:	bf00      	nop
     768:	370c      	adds	r7, #12
     76a:	46bd      	mov	sp, r7
     76c:	f85d 7b04 	ldr.w	r7, [sp], #4
     770:	4770      	bx	lr

00000772 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     772:	b480      	push	{r7}
     774:	b083      	sub	sp, #12
     776:	af00      	add	r7, sp, #0
     778:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	695b      	ldr	r3, [r3, #20]
     77e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     782:	687b      	ldr	r3, [r7, #4]
     784:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     786:	bf00      	nop
     788:	370c      	adds	r7, #12
     78a:	46bd      	mov	sp, r7
     78c:	f85d 7b04 	ldr.w	r7, [sp], #4
     790:	4770      	bx	lr

00000792 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     792:	b480      	push	{r7}
     794:	b083      	sub	sp, #12
     796:	af00      	add	r7, sp, #0
     798:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	695b      	ldr	r3, [r3, #20]
     79e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7a6:	bf00      	nop
     7a8:	370c      	adds	r7, #12
     7aa:	46bd      	mov	sp, r7
     7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b0:	4770      	bx	lr

000007b2 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     7b2:	b480      	push	{r7}
     7b4:	b083      	sub	sp, #12
     7b6:	af00      	add	r7, sp, #0
     7b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	695b      	ldr	r3, [r3, #20]
     7be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7c6:	bf00      	nop
     7c8:	370c      	adds	r7, #12
     7ca:	46bd      	mov	sp, r7
     7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     7d0:	4770      	bx	lr

000007d2 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     7d2:	b480      	push	{r7}
     7d4:	b083      	sub	sp, #12
     7d6:	af00      	add	r7, sp, #0
     7d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	695b      	ldr	r3, [r3, #20]
     7de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7e6:	bf00      	nop
     7e8:	370c      	adds	r7, #12
     7ea:	46bd      	mov	sp, r7
     7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     7f0:	4770      	bx	lr

000007f2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     7f2:	b480      	push	{r7}
     7f4:	b083      	sub	sp, #12
     7f6:	af00      	add	r7, sp, #0
     7f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	699b      	ldr	r3, [r3, #24]
     7fe:	f043 0201 	orr.w	r2, r3, #1
     802:	687b      	ldr	r3, [r7, #4]
     804:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     806:	bf00      	nop
     808:	370c      	adds	r7, #12
     80a:	46bd      	mov	sp, r7
     80c:	f85d 7b04 	ldr.w	r7, [sp], #4
     810:	4770      	bx	lr

00000812 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     812:	b480      	push	{r7}
     814:	b083      	sub	sp, #12
     816:	af00      	add	r7, sp, #0
     818:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	699b      	ldr	r3, [r3, #24]
     81e:	f043 0202 	orr.w	r2, r3, #2
     822:	687b      	ldr	r3, [r7, #4]
     824:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     826:	bf00      	nop
     828:	370c      	adds	r7, #12
     82a:	46bd      	mov	sp, r7
     82c:	f85d 7b04 	ldr.w	r7, [sp], #4
     830:	4770      	bx	lr

00000832 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     832:	b480      	push	{r7}
     834:	b083      	sub	sp, #12
     836:	af00      	add	r7, sp, #0
     838:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	699b      	ldr	r3, [r3, #24]
     83e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     842:	687b      	ldr	r3, [r7, #4]
     844:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     846:	bf00      	nop
     848:	370c      	adds	r7, #12
     84a:	46bd      	mov	sp, r7
     84c:	f85d 7b04 	ldr.w	r7, [sp], #4
     850:	4770      	bx	lr

00000852 <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
     852:	b480      	push	{r7}
     854:	b083      	sub	sp, #12
     856:	af00      	add	r7, sp, #0
     858:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	699b      	ldr	r3, [r3, #24]
     85e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     862:	687b      	ldr	r3, [r7, #4]
     864:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     866:	bf00      	nop
     868:	370c      	adds	r7, #12
     86a:	46bd      	mov	sp, r7
     86c:	f85d 7b04 	ldr.w	r7, [sp], #4
     870:	4770      	bx	lr

00000872 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     872:	b480      	push	{r7}
     874:	b083      	sub	sp, #12
     876:	af00      	add	r7, sp, #0
     878:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	699b      	ldr	r3, [r3, #24]
     87e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     882:	687b      	ldr	r3, [r7, #4]
     884:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     886:	bf00      	nop
     888:	370c      	adds	r7, #12
     88a:	46bd      	mov	sp, r7
     88c:	f85d 7b04 	ldr.w	r7, [sp], #4
     890:	4770      	bx	lr

00000892 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     892:	b480      	push	{r7}
     894:	b083      	sub	sp, #12
     896:	af00      	add	r7, sp, #0
     898:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	699b      	ldr	r3, [r3, #24]
     89e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8a6:	bf00      	nop
     8a8:	370c      	adds	r7, #12
     8aa:	46bd      	mov	sp, r7
     8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b0:	4770      	bx	lr

000008b2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     8b2:	b480      	push	{r7}
     8b4:	b083      	sub	sp, #12
     8b6:	af00      	add	r7, sp, #0
     8b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	699b      	ldr	r3, [r3, #24]
     8be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8c6:	bf00      	nop
     8c8:	370c      	adds	r7, #12
     8ca:	46bd      	mov	sp, r7
     8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     8d0:	4770      	bx	lr

000008d2 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     8d2:	b480      	push	{r7}
     8d4:	b083      	sub	sp, #12
     8d6:	af00      	add	r7, sp, #0
     8d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	69db      	ldr	r3, [r3, #28]
     8de:	f043 0208 	orr.w	r2, r3, #8
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8e6:	bf00      	nop
     8e8:	370c      	adds	r7, #12
     8ea:	46bd      	mov	sp, r7
     8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     8f0:	4770      	bx	lr

000008f2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     8f2:	b480      	push	{r7}
     8f4:	b083      	sub	sp, #12
     8f6:	af00      	add	r7, sp, #0
     8f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	69db      	ldr	r3, [r3, #28]
     8fe:	f043 0220 	orr.w	r2, r3, #32
     902:	687b      	ldr	r3, [r7, #4]
     904:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     906:	bf00      	nop
     908:	370c      	adds	r7, #12
     90a:	46bd      	mov	sp, r7
     90c:	f85d 7b04 	ldr.w	r7, [sp], #4
     910:	4770      	bx	lr

00000912 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     912:	b480      	push	{r7}
     914:	b083      	sub	sp, #12
     916:	af00      	add	r7, sp, #0
     918:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	69db      	ldr	r3, [r3, #28]
     91e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     922:	687b      	ldr	r3, [r7, #4]
     924:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     926:	bf00      	nop
     928:	370c      	adds	r7, #12
     92a:	46bd      	mov	sp, r7
     92c:	f85d 7b04 	ldr.w	r7, [sp], #4
     930:	4770      	bx	lr

00000932 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     932:	b480      	push	{r7}
     934:	b083      	sub	sp, #12
     936:	af00      	add	r7, sp, #0
     938:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	69db      	ldr	r3, [r3, #28]
     93e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     942:	687b      	ldr	r3, [r7, #4]
     944:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     946:	bf00      	nop
     948:	370c      	adds	r7, #12
     94a:	46bd      	mov	sp, r7
     94c:	f85d 7b04 	ldr.w	r7, [sp], #4
     950:	4770      	bx	lr

00000952 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     952:	b480      	push	{r7}
     954:	b083      	sub	sp, #12
     956:	af00      	add	r7, sp, #0
     958:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	6a1b      	ldr	r3, [r3, #32]
     95e:	f043 0201 	orr.w	r2, r3, #1
     962:	687b      	ldr	r3, [r7, #4]
     964:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     966:	bf00      	nop
     968:	370c      	adds	r7, #12
     96a:	46bd      	mov	sp, r7
     96c:	f85d 7b04 	ldr.w	r7, [sp], #4
     970:	4770      	bx	lr

00000972 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     972:	b480      	push	{r7}
     974:	b083      	sub	sp, #12
     976:	af00      	add	r7, sp, #0
     978:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	6a1b      	ldr	r3, [r3, #32]
     97e:	f043 0202 	orr.w	r2, r3, #2
     982:	687b      	ldr	r3, [r7, #4]
     984:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     986:	bf00      	nop
     988:	370c      	adds	r7, #12
     98a:	46bd      	mov	sp, r7
     98c:	f85d 7b04 	ldr.w	r7, [sp], #4
     990:	4770      	bx	lr

00000992 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     992:	b480      	push	{r7}
     994:	b083      	sub	sp, #12
     996:	af00      	add	r7, sp, #0
     998:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	6a1b      	ldr	r3, [r3, #32]
     99e:	f043 0204 	orr.w	r2, r3, #4
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9a6:	bf00      	nop
     9a8:	370c      	adds	r7, #12
     9aa:	46bd      	mov	sp, r7
     9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b0:	4770      	bx	lr

000009b2 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     9b2:	b480      	push	{r7}
     9b4:	b083      	sub	sp, #12
     9b6:	af00      	add	r7, sp, #0
     9b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	6a1b      	ldr	r3, [r3, #32]
     9be:	f043 0208 	orr.w	r2, r3, #8
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9c6:	bf00      	nop
     9c8:	370c      	adds	r7, #12
     9ca:	46bd      	mov	sp, r7
     9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d0:	4770      	bx	lr

000009d2 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     9d2:	b480      	push	{r7}
     9d4:	b083      	sub	sp, #12
     9d6:	af00      	add	r7, sp, #0
     9d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	6a1b      	ldr	r3, [r3, #32]
     9de:	f043 0220 	orr.w	r2, r3, #32
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9e6:	bf00      	nop
     9e8:	370c      	adds	r7, #12
     9ea:	46bd      	mov	sp, r7
     9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f0:	4770      	bx	lr

000009f2 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     9f2:	b480      	push	{r7}
     9f4:	b083      	sub	sp, #12
     9f6:	af00      	add	r7, sp, #0
     9f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     9fa:	687b      	ldr	r3, [r7, #4]
     9fc:	6a1b      	ldr	r3, [r3, #32]
     9fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a06:	bf00      	nop
     a08:	370c      	adds	r7, #12
     a0a:	46bd      	mov	sp, r7
     a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a10:	4770      	bx	lr

00000a12 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     a12:	b480      	push	{r7}
     a14:	b085      	sub	sp, #20
     a16:	af00      	add	r7, sp, #0
     a18:	60f8      	str	r0, [r7, #12]
     a1a:	460b      	mov	r3, r1
     a1c:	607a      	str	r2, [r7, #4]
     a1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a20:	7afb      	ldrb	r3, [r7, #11]
     a22:	68fa      	ldr	r2, [r7, #12]
     a24:	01db      	lsls	r3, r3, #7
     a26:	4413      	add	r3, r2
     a28:	3308      	adds	r3, #8
     a2a:	687a      	ldr	r2, [r7, #4]
     a2c:	601a      	str	r2, [r3, #0]
}
     a2e:	bf00      	nop
     a30:	3714      	adds	r7, #20
     a32:	46bd      	mov	sp, r7
     a34:	f85d 7b04 	ldr.w	r7, [sp], #4
     a38:	4770      	bx	lr

00000a3a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     a3a:	b480      	push	{r7}
     a3c:	b085      	sub	sp, #20
     a3e:	af00      	add	r7, sp, #0
     a40:	60f8      	str	r0, [r7, #12]
     a42:	460b      	mov	r3, r1
     a44:	607a      	str	r2, [r7, #4]
     a46:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a48:	7afb      	ldrb	r3, [r7, #11]
     a4a:	68fa      	ldr	r2, [r7, #12]
     a4c:	01db      	lsls	r3, r3, #7
     a4e:	4413      	add	r3, r2
     a50:	3304      	adds	r3, #4
     a52:	687a      	ldr	r2, [r7, #4]
     a54:	601a      	str	r2, [r3, #0]
}
     a56:	bf00      	nop
     a58:	3714      	adds	r7, #20
     a5a:	46bd      	mov	sp, r7
     a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a60:	4770      	bx	lr

00000a62 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a62:	b480      	push	{r7}
     a64:	b085      	sub	sp, #20
     a66:	af00      	add	r7, sp, #0
     a68:	60f8      	str	r0, [r7, #12]
     a6a:	460b      	mov	r3, r1
     a6c:	607a      	str	r2, [r7, #4]
     a6e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a70:	7afb      	ldrb	r3, [r7, #11]
     a72:	68fa      	ldr	r2, [r7, #12]
     a74:	01db      	lsls	r3, r3, #7
     a76:	4413      	add	r3, r2
     a78:	3318      	adds	r3, #24
     a7a:	687a      	ldr	r2, [r7, #4]
     a7c:	601a      	str	r2, [r3, #0]
}
     a7e:	bf00      	nop
     a80:	3714      	adds	r7, #20
     a82:	46bd      	mov	sp, r7
     a84:	f85d 7b04 	ldr.w	r7, [sp], #4
     a88:	4770      	bx	lr

00000a8a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a8a:	b480      	push	{r7}
     a8c:	b085      	sub	sp, #20
     a8e:	af00      	add	r7, sp, #0
     a90:	60f8      	str	r0, [r7, #12]
     a92:	460b      	mov	r3, r1
     a94:	607a      	str	r2, [r7, #4]
     a96:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a98:	7afb      	ldrb	r3, [r7, #11]
     a9a:	68fa      	ldr	r2, [r7, #12]
     a9c:	01db      	lsls	r3, r3, #7
     a9e:	4413      	add	r3, r2
     aa0:	3314      	adds	r3, #20
     aa2:	687a      	ldr	r2, [r7, #4]
     aa4:	601a      	str	r2, [r3, #0]
}
     aa6:	bf00      	nop
     aa8:	3714      	adds	r7, #20
     aaa:	46bd      	mov	sp, r7
     aac:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab0:	4770      	bx	lr

00000ab2 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     ab2:	b480      	push	{r7}
     ab4:	b085      	sub	sp, #20
     ab6:	af00      	add	r7, sp, #0
     ab8:	6078      	str	r0, [r7, #4]
     aba:	4608      	mov	r0, r1
     abc:	4611      	mov	r1, r2
     abe:	461a      	mov	r2, r3
     ac0:	4603      	mov	r3, r0
     ac2:	70fb      	strb	r3, [r7, #3]
     ac4:	460b      	mov	r3, r1
     ac6:	70bb      	strb	r3, [r7, #2]
     ac8:	4613      	mov	r3, r2
     aca:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     acc:	78fa      	ldrb	r2, [r7, #3]
     ace:	78bb      	ldrb	r3, [r7, #2]
     ad0:	6879      	ldr	r1, [r7, #4]
     ad2:	01d2      	lsls	r2, r2, #7
     ad4:	440a      	add	r2, r1
     ad6:	4413      	add	r3, r2
     ad8:	3330      	adds	r3, #48	; 0x30
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ade:	7bfb      	ldrb	r3, [r7, #15]
     ae0:	f023 030f 	bic.w	r3, r3, #15
     ae4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     ae6:	787b      	ldrb	r3, [r7, #1]
     ae8:	f003 030f 	and.w	r3, r3, #15
     aec:	b2da      	uxtb	r2, r3
     aee:	7bfb      	ldrb	r3, [r7, #15]
     af0:	4313      	orrs	r3, r2
     af2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     af4:	78fa      	ldrb	r2, [r7, #3]
     af6:	78bb      	ldrb	r3, [r7, #2]
     af8:	6879      	ldr	r1, [r7, #4]
     afa:	01d2      	lsls	r2, r2, #7
     afc:	440a      	add	r2, r1
     afe:	4413      	add	r3, r2
     b00:	3330      	adds	r3, #48	; 0x30
     b02:	7bfa      	ldrb	r2, [r7, #15]
     b04:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b06:	bf00      	nop
     b08:	3714      	adds	r7, #20
     b0a:	46bd      	mov	sp, r7
     b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b10:	4770      	bx	lr

00000b12 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     b12:	b480      	push	{r7}
     b14:	b085      	sub	sp, #20
     b16:	af00      	add	r7, sp, #0
     b18:	6078      	str	r0, [r7, #4]
     b1a:	4608      	mov	r0, r1
     b1c:	4611      	mov	r1, r2
     b1e:	461a      	mov	r2, r3
     b20:	4603      	mov	r3, r0
     b22:	70fb      	strb	r3, [r7, #3]
     b24:	460b      	mov	r3, r1
     b26:	70bb      	strb	r3, [r7, #2]
     b28:	4613      	mov	r3, r2
     b2a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b2c:	78fa      	ldrb	r2, [r7, #3]
     b2e:	78bb      	ldrb	r3, [r7, #2]
     b30:	6879      	ldr	r1, [r7, #4]
     b32:	01d2      	lsls	r2, r2, #7
     b34:	440a      	add	r2, r1
     b36:	4413      	add	r3, r2
     b38:	3330      	adds	r3, #48	; 0x30
     b3a:	781b      	ldrb	r3, [r3, #0]
     b3c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b3e:	7bfb      	ldrb	r3, [r7, #15]
     b40:	f003 030f 	and.w	r3, r3, #15
     b44:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     b46:	787b      	ldrb	r3, [r7, #1]
     b48:	011b      	lsls	r3, r3, #4
     b4a:	b2da      	uxtb	r2, r3
     b4c:	7bfb      	ldrb	r3, [r7, #15]
     b4e:	4313      	orrs	r3, r2
     b50:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b52:	78fa      	ldrb	r2, [r7, #3]
     b54:	78bb      	ldrb	r3, [r7, #2]
     b56:	6879      	ldr	r1, [r7, #4]
     b58:	01d2      	lsls	r2, r2, #7
     b5a:	440a      	add	r2, r1
     b5c:	4413      	add	r3, r2
     b5e:	3330      	adds	r3, #48	; 0x30
     b60:	7bfa      	ldrb	r2, [r7, #15]
     b62:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b64:	bf00      	nop
     b66:	3714      	adds	r7, #20
     b68:	46bd      	mov	sp, r7
     b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
     b6e:	4770      	bx	lr

00000b70 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     b70:	b480      	push	{r7}
     b72:	b085      	sub	sp, #20
     b74:	af00      	add	r7, sp, #0
     b76:	6078      	str	r0, [r7, #4]
     b78:	4608      	mov	r0, r1
     b7a:	4611      	mov	r1, r2
     b7c:	461a      	mov	r2, r3
     b7e:	4603      	mov	r3, r0
     b80:	70fb      	strb	r3, [r7, #3]
     b82:	460b      	mov	r3, r1
     b84:	70bb      	strb	r3, [r7, #2]
     b86:	4613      	mov	r3, r2
     b88:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b8a:	78fa      	ldrb	r2, [r7, #3]
     b8c:	78bb      	ldrb	r3, [r7, #2]
     b8e:	6879      	ldr	r1, [r7, #4]
     b90:	01d2      	lsls	r2, r2, #7
     b92:	440a      	add	r2, r1
     b94:	4413      	add	r3, r2
     b96:	3340      	adds	r3, #64	; 0x40
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b9c:	7bfb      	ldrb	r3, [r7, #15]
     b9e:	f023 0301 	bic.w	r3, r3, #1
     ba2:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba4:	787a      	ldrb	r2, [r7, #1]
     ba6:	7bfb      	ldrb	r3, [r7, #15]
     ba8:	4313      	orrs	r3, r2
     baa:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bac:	78fa      	ldrb	r2, [r7, #3]
     bae:	78bb      	ldrb	r3, [r7, #2]
     bb0:	6879      	ldr	r1, [r7, #4]
     bb2:	01d2      	lsls	r2, r2, #7
     bb4:	440a      	add	r2, r1
     bb6:	4413      	add	r3, r2
     bb8:	3340      	adds	r3, #64	; 0x40
     bba:	7bfa      	ldrb	r2, [r7, #15]
     bbc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bbe:	bf00      	nop
     bc0:	3714      	adds	r7, #20
     bc2:	46bd      	mov	sp, r7
     bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc8:	4770      	bx	lr

00000bca <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     bca:	b490      	push	{r4, r7}
     bcc:	b082      	sub	sp, #8
     bce:	af00      	add	r7, sp, #0
     bd0:	6078      	str	r0, [r7, #4]
     bd2:	460b      	mov	r3, r1
     bd4:	70fb      	strb	r3, [r7, #3]
     bd6:	4613      	mov	r3, r2
     bd8:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     bda:	78fa      	ldrb	r2, [r7, #3]
     bdc:	78bb      	ldrb	r3, [r7, #2]
     bde:	78f8      	ldrb	r0, [r7, #3]
     be0:	78b9      	ldrb	r1, [r7, #2]
     be2:	687c      	ldr	r4, [r7, #4]
     be4:	01c0      	lsls	r0, r0, #7
     be6:	4420      	add	r0, r4
     be8:	4401      	add	r1, r0
     bea:	3140      	adds	r1, #64	; 0x40
     bec:	7809      	ldrb	r1, [r1, #0]
     bee:	b2c9      	uxtb	r1, r1
     bf0:	f041 0104 	orr.w	r1, r1, #4
     bf4:	b2c8      	uxtb	r0, r1
     bf6:	6879      	ldr	r1, [r7, #4]
     bf8:	01d2      	lsls	r2, r2, #7
     bfa:	440a      	add	r2, r1
     bfc:	4413      	add	r3, r2
     bfe:	3340      	adds	r3, #64	; 0x40
     c00:	4602      	mov	r2, r0
     c02:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c04:	bf00      	nop
     c06:	3708      	adds	r7, #8
     c08:	46bd      	mov	sp, r7
     c0a:	bc90      	pop	{r4, r7}
     c0c:	4770      	bx	lr

00000c0e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     c0e:	b490      	push	{r4, r7}
     c10:	b082      	sub	sp, #8
     c12:	af00      	add	r7, sp, #0
     c14:	6078      	str	r0, [r7, #4]
     c16:	460b      	mov	r3, r1
     c18:	70fb      	strb	r3, [r7, #3]
     c1a:	4613      	mov	r3, r2
     c1c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c1e:	78fa      	ldrb	r2, [r7, #3]
     c20:	78bb      	ldrb	r3, [r7, #2]
     c22:	78f8      	ldrb	r0, [r7, #3]
     c24:	78b9      	ldrb	r1, [r7, #2]
     c26:	687c      	ldr	r4, [r7, #4]
     c28:	01c0      	lsls	r0, r0, #7
     c2a:	4420      	add	r0, r4
     c2c:	4401      	add	r1, r0
     c2e:	3140      	adds	r1, #64	; 0x40
     c30:	7809      	ldrb	r1, [r1, #0]
     c32:	b2c9      	uxtb	r1, r1
     c34:	f021 0104 	bic.w	r1, r1, #4
     c38:	b2c8      	uxtb	r0, r1
     c3a:	6879      	ldr	r1, [r7, #4]
     c3c:	01d2      	lsls	r2, r2, #7
     c3e:	440a      	add	r2, r1
     c40:	4413      	add	r3, r2
     c42:	3340      	adds	r3, #64	; 0x40
     c44:	4602      	mov	r2, r0
     c46:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c48:	bf00      	nop
     c4a:	3708      	adds	r7, #8
     c4c:	46bd      	mov	sp, r7
     c4e:	bc90      	pop	{r4, r7}
     c50:	4770      	bx	lr

00000c52 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     c52:	b480      	push	{r7}
     c54:	b085      	sub	sp, #20
     c56:	af00      	add	r7, sp, #0
     c58:	60f8      	str	r0, [r7, #12]
     c5a:	460b      	mov	r3, r1
     c5c:	607a      	str	r2, [r7, #4]
     c5e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c60:	7afb      	ldrb	r3, [r7, #11]
     c62:	68fa      	ldr	r2, [r7, #12]
     c64:	01db      	lsls	r3, r3, #7
     c66:	4413      	add	r3, r2
     c68:	3328      	adds	r3, #40	; 0x28
     c6a:	687a      	ldr	r2, [r7, #4]
     c6c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c6e:	bf00      	nop
     c70:	3714      	adds	r7, #20
     c72:	46bd      	mov	sp, r7
     c74:	f85d 7b04 	ldr.w	r7, [sp], #4
     c78:	4770      	bx	lr
	...

00000c7c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	4603      	mov	r3, r0
     c84:	6039      	str	r1, [r7, #0]
     c86:	71fb      	strb	r3, [r7, #7]
     c88:	4613      	mov	r3, r2
     c8a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     c8c:	79bb      	ldrb	r3, [r7, #6]
     c8e:	2b01      	cmp	r3, #1
     c90:	d01c      	beq.n	ccc <_gpio_set_direction+0x50>
     c92:	2b02      	cmp	r3, #2
     c94:	d037      	beq.n	d06 <_gpio_set_direction+0x8a>
     c96:	2b00      	cmp	r3, #0
     c98:	d14e      	bne.n	d38 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c9a:	79fb      	ldrb	r3, [r7, #7]
     c9c:	683a      	ldr	r2, [r7, #0]
     c9e:	4619      	mov	r1, r3
     ca0:	482a      	ldr	r0, [pc, #168]	; (d4c <_gpio_set_direction+0xd0>)
     ca2:	4b2b      	ldr	r3, [pc, #172]	; (d50 <_gpio_set_direction+0xd4>)
     ca4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     ca6:	683b      	ldr	r3, [r7, #0]
     ca8:	b29b      	uxth	r3, r3
     caa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     cae:	79fb      	ldrb	r3, [r7, #7]
     cb0:	4619      	mov	r1, r3
     cb2:	4826      	ldr	r0, [pc, #152]	; (d4c <_gpio_set_direction+0xd0>)
     cb4:	4b27      	ldr	r3, [pc, #156]	; (d54 <_gpio_set_direction+0xd8>)
     cb6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     cb8:	683b      	ldr	r3, [r7, #0]
     cba:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     cbc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     cc0:	79fb      	ldrb	r3, [r7, #7]
     cc2:	4619      	mov	r1, r3
     cc4:	4821      	ldr	r0, [pc, #132]	; (d4c <_gpio_set_direction+0xd0>)
     cc6:	4b23      	ldr	r3, [pc, #140]	; (d54 <_gpio_set_direction+0xd8>)
     cc8:	4798      	blx	r3
		break;
     cca:	e03a      	b.n	d42 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ccc:	79fb      	ldrb	r3, [r7, #7]
     cce:	683a      	ldr	r2, [r7, #0]
     cd0:	4619      	mov	r1, r3
     cd2:	481e      	ldr	r0, [pc, #120]	; (d4c <_gpio_set_direction+0xd0>)
     cd4:	4b1e      	ldr	r3, [pc, #120]	; (d50 <_gpio_set_direction+0xd4>)
     cd6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     cd8:	683b      	ldr	r3, [r7, #0]
     cda:	b29b      	uxth	r3, r3
     cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     ce4:	79f9      	ldrb	r1, [r7, #7]
     ce6:	461a      	mov	r2, r3
     ce8:	4818      	ldr	r0, [pc, #96]	; (d4c <_gpio_set_direction+0xd0>)
     cea:	4b1a      	ldr	r3, [pc, #104]	; (d54 <_gpio_set_direction+0xd8>)
     cec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     cfa:	79f9      	ldrb	r1, [r7, #7]
     cfc:	461a      	mov	r2, r3
     cfe:	4813      	ldr	r0, [pc, #76]	; (d4c <_gpio_set_direction+0xd0>)
     d00:	4b14      	ldr	r3, [pc, #80]	; (d54 <_gpio_set_direction+0xd8>)
     d02:	4798      	blx	r3
		break;
     d04:	e01d      	b.n	d42 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     d06:	79fb      	ldrb	r3, [r7, #7]
     d08:	683a      	ldr	r2, [r7, #0]
     d0a:	4619      	mov	r1, r3
     d0c:	480f      	ldr	r0, [pc, #60]	; (d4c <_gpio_set_direction+0xd0>)
     d0e:	4b12      	ldr	r3, [pc, #72]	; (d58 <_gpio_set_direction+0xdc>)
     d10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	b29b      	uxth	r3, r3
     d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     d1a:	79fb      	ldrb	r3, [r7, #7]
     d1c:	4619      	mov	r1, r3
     d1e:	480b      	ldr	r0, [pc, #44]	; (d4c <_gpio_set_direction+0xd0>)
     d20:	4b0c      	ldr	r3, [pc, #48]	; (d54 <_gpio_set_direction+0xd8>)
     d22:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     d24:	683b      	ldr	r3, [r7, #0]
     d26:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     d28:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     d2c:	79fb      	ldrb	r3, [r7, #7]
     d2e:	4619      	mov	r1, r3
     d30:	4806      	ldr	r0, [pc, #24]	; (d4c <_gpio_set_direction+0xd0>)
     d32:	4b08      	ldr	r3, [pc, #32]	; (d54 <_gpio_set_direction+0xd8>)
     d34:	4798      	blx	r3
		break;
     d36:	e004      	b.n	d42 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     d38:	2246      	movs	r2, #70	; 0x46
     d3a:	4908      	ldr	r1, [pc, #32]	; (d5c <_gpio_set_direction+0xe0>)
     d3c:	2000      	movs	r0, #0
     d3e:	4b08      	ldr	r3, [pc, #32]	; (d60 <_gpio_set_direction+0xe4>)
     d40:	4798      	blx	r3
	}
}
     d42:	bf00      	nop
     d44:	3708      	adds	r7, #8
     d46:	46bd      	mov	sp, r7
     d48:	bd80      	pop	{r7, pc}
     d4a:	bf00      	nop
     d4c:	41008000 	.word	0x41008000
     d50:	00000a3b 	.word	0x00000a3b
     d54:	00000c53 	.word	0x00000c53
     d58:	00000a13 	.word	0x00000a13
     d5c:	0001203c 	.word	0x0001203c
     d60:	00003681 	.word	0x00003681

00000d64 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     d64:	b580      	push	{r7, lr}
     d66:	b082      	sub	sp, #8
     d68:	af00      	add	r7, sp, #0
     d6a:	4603      	mov	r3, r0
     d6c:	6039      	str	r1, [r7, #0]
     d6e:	71fb      	strb	r3, [r7, #7]
     d70:	4613      	mov	r3, r2
     d72:	71bb      	strb	r3, [r7, #6]
	if (level) {
     d74:	79bb      	ldrb	r3, [r7, #6]
     d76:	2b00      	cmp	r3, #0
     d78:	d006      	beq.n	d88 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     d7a:	79fb      	ldrb	r3, [r7, #7]
     d7c:	683a      	ldr	r2, [r7, #0]
     d7e:	4619      	mov	r1, r3
     d80:	4806      	ldr	r0, [pc, #24]	; (d9c <_gpio_set_level+0x38>)
     d82:	4b07      	ldr	r3, [pc, #28]	; (da0 <_gpio_set_level+0x3c>)
     d84:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     d86:	e005      	b.n	d94 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     d88:	79fb      	ldrb	r3, [r7, #7]
     d8a:	683a      	ldr	r2, [r7, #0]
     d8c:	4619      	mov	r1, r3
     d8e:	4803      	ldr	r0, [pc, #12]	; (d9c <_gpio_set_level+0x38>)
     d90:	4b04      	ldr	r3, [pc, #16]	; (da4 <_gpio_set_level+0x40>)
     d92:	4798      	blx	r3
}
     d94:	bf00      	nop
     d96:	3708      	adds	r7, #8
     d98:	46bd      	mov	sp, r7
     d9a:	bd80      	pop	{r7, pc}
     d9c:	41008000 	.word	0x41008000
     da0:	00000a63 	.word	0x00000a63
     da4:	00000a8b 	.word	0x00000a8b

00000da8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	4603      	mov	r3, r0
     db0:	71fb      	strb	r3, [r7, #7]
     db2:	460b      	mov	r3, r1
     db4:	71bb      	strb	r3, [r7, #6]
     db6:	4613      	mov	r3, r2
     db8:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     dba:	797b      	ldrb	r3, [r7, #5]
     dbc:	2b01      	cmp	r3, #1
     dbe:	d00a      	beq.n	dd6 <_gpio_set_pin_pull_mode+0x2e>
     dc0:	2b02      	cmp	r3, #2
     dc2:	d01f      	beq.n	e04 <_gpio_set_pin_pull_mode+0x5c>
     dc4:	2b00      	cmp	r3, #0
     dc6:	d134      	bne.n	e32 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     dc8:	79ba      	ldrb	r2, [r7, #6]
     dca:	79fb      	ldrb	r3, [r7, #7]
     dcc:	4619      	mov	r1, r3
     dce:	481e      	ldr	r0, [pc, #120]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     dd0:	4b1e      	ldr	r3, [pc, #120]	; (e4c <_gpio_set_pin_pull_mode+0xa4>)
     dd2:	4798      	blx	r3
		break;
     dd4:	e033      	b.n	e3e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     dd6:	79bb      	ldrb	r3, [r7, #6]
     dd8:	2201      	movs	r2, #1
     dda:	409a      	lsls	r2, r3
     ddc:	79fb      	ldrb	r3, [r7, #7]
     dde:	4619      	mov	r1, r3
     de0:	4819      	ldr	r0, [pc, #100]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     de2:	4b1b      	ldr	r3, [pc, #108]	; (e50 <_gpio_set_pin_pull_mode+0xa8>)
     de4:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     de6:	79ba      	ldrb	r2, [r7, #6]
     de8:	79fb      	ldrb	r3, [r7, #7]
     dea:	4619      	mov	r1, r3
     dec:	4816      	ldr	r0, [pc, #88]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     dee:	4b19      	ldr	r3, [pc, #100]	; (e54 <_gpio_set_pin_pull_mode+0xac>)
     df0:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     df2:	79bb      	ldrb	r3, [r7, #6]
     df4:	2201      	movs	r2, #1
     df6:	409a      	lsls	r2, r3
     df8:	79fb      	ldrb	r3, [r7, #7]
     dfa:	4619      	mov	r1, r3
     dfc:	4812      	ldr	r0, [pc, #72]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     dfe:	4b16      	ldr	r3, [pc, #88]	; (e58 <_gpio_set_pin_pull_mode+0xb0>)
     e00:	4798      	blx	r3
		break;
     e02:	e01c      	b.n	e3e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     e04:	79bb      	ldrb	r3, [r7, #6]
     e06:	2201      	movs	r2, #1
     e08:	409a      	lsls	r2, r3
     e0a:	79fb      	ldrb	r3, [r7, #7]
     e0c:	4619      	mov	r1, r3
     e0e:	480e      	ldr	r0, [pc, #56]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     e10:	4b0f      	ldr	r3, [pc, #60]	; (e50 <_gpio_set_pin_pull_mode+0xa8>)
     e12:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     e14:	79ba      	ldrb	r2, [r7, #6]
     e16:	79fb      	ldrb	r3, [r7, #7]
     e18:	4619      	mov	r1, r3
     e1a:	480b      	ldr	r0, [pc, #44]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     e1c:	4b0d      	ldr	r3, [pc, #52]	; (e54 <_gpio_set_pin_pull_mode+0xac>)
     e1e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     e20:	79bb      	ldrb	r3, [r7, #6]
     e22:	2201      	movs	r2, #1
     e24:	409a      	lsls	r2, r3
     e26:	79fb      	ldrb	r3, [r7, #7]
     e28:	4619      	mov	r1, r3
     e2a:	4807      	ldr	r0, [pc, #28]	; (e48 <_gpio_set_pin_pull_mode+0xa0>)
     e2c:	4b0b      	ldr	r3, [pc, #44]	; (e5c <_gpio_set_pin_pull_mode+0xb4>)
     e2e:	4798      	blx	r3
		break;
     e30:	e005      	b.n	e3e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     e32:	2289      	movs	r2, #137	; 0x89
     e34:	490a      	ldr	r1, [pc, #40]	; (e60 <_gpio_set_pin_pull_mode+0xb8>)
     e36:	2000      	movs	r0, #0
     e38:	4b0a      	ldr	r3, [pc, #40]	; (e64 <_gpio_set_pin_pull_mode+0xbc>)
     e3a:	4798      	blx	r3
		break;
     e3c:	bf00      	nop
	}
}
     e3e:	bf00      	nop
     e40:	3708      	adds	r7, #8
     e42:	46bd      	mov	sp, r7
     e44:	bd80      	pop	{r7, pc}
     e46:	bf00      	nop
     e48:	41008000 	.word	0x41008000
     e4c:	00000c0f 	.word	0x00000c0f
     e50:	00000a3b 	.word	0x00000a3b
     e54:	00000bcb 	.word	0x00000bcb
     e58:	00000a63 	.word	0x00000a63
     e5c:	00000a8b 	.word	0x00000a8b
     e60:	0001203c 	.word	0x0001203c
     e64:	00003681 	.word	0x00003681

00000e68 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     e68:	b590      	push	{r4, r7, lr}
     e6a:	b085      	sub	sp, #20
     e6c:	af00      	add	r7, sp, #0
     e6e:	6078      	str	r0, [r7, #4]
     e70:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	095b      	lsrs	r3, r3, #5
     e76:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	b2db      	uxtb	r3, r3
     e7c:	f003 031f 	and.w	r3, r3, #31
     e80:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     e82:	683b      	ldr	r3, [r7, #0]
     e84:	f1b3 3fff 	cmp.w	r3, #4294967295
     e88:	d106      	bne.n	e98 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     e8a:	7bba      	ldrb	r2, [r7, #14]
     e8c:	7bf9      	ldrb	r1, [r7, #15]
     e8e:	2300      	movs	r3, #0
     e90:	4812      	ldr	r0, [pc, #72]	; (edc <_gpio_set_pin_function+0x74>)
     e92:	4c13      	ldr	r4, [pc, #76]	; (ee0 <_gpio_set_pin_function+0x78>)
     e94:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     e96:	e01d      	b.n	ed4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     e98:	7bba      	ldrb	r2, [r7, #14]
     e9a:	7bf9      	ldrb	r1, [r7, #15]
     e9c:	2301      	movs	r3, #1
     e9e:	480f      	ldr	r0, [pc, #60]	; (edc <_gpio_set_pin_function+0x74>)
     ea0:	4c0f      	ldr	r4, [pc, #60]	; (ee0 <_gpio_set_pin_function+0x78>)
     ea2:	47a0      	blx	r4
		if (pin & 1) {
     ea4:	7bbb      	ldrb	r3, [r7, #14]
     ea6:	f003 0301 	and.w	r3, r3, #1
     eaa:	2b00      	cmp	r3, #0
     eac:	d009      	beq.n	ec2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     eae:	7bbb      	ldrb	r3, [r7, #14]
     eb0:	085b      	lsrs	r3, r3, #1
     eb2:	b2da      	uxtb	r2, r3
     eb4:	683b      	ldr	r3, [r7, #0]
     eb6:	b2db      	uxtb	r3, r3
     eb8:	7bf9      	ldrb	r1, [r7, #15]
     eba:	4808      	ldr	r0, [pc, #32]	; (edc <_gpio_set_pin_function+0x74>)
     ebc:	4c09      	ldr	r4, [pc, #36]	; (ee4 <_gpio_set_pin_function+0x7c>)
     ebe:	47a0      	blx	r4
}
     ec0:	e008      	b.n	ed4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     ec2:	7bbb      	ldrb	r3, [r7, #14]
     ec4:	085b      	lsrs	r3, r3, #1
     ec6:	b2da      	uxtb	r2, r3
     ec8:	683b      	ldr	r3, [r7, #0]
     eca:	b2db      	uxtb	r3, r3
     ecc:	7bf9      	ldrb	r1, [r7, #15]
     ece:	4803      	ldr	r0, [pc, #12]	; (edc <_gpio_set_pin_function+0x74>)
     ed0:	4c05      	ldr	r4, [pc, #20]	; (ee8 <_gpio_set_pin_function+0x80>)
     ed2:	47a0      	blx	r4
}
     ed4:	bf00      	nop
     ed6:	3714      	adds	r7, #20
     ed8:	46bd      	mov	sp, r7
     eda:	bd90      	pop	{r4, r7, pc}
     edc:	41008000 	.word	0x41008000
     ee0:	00000b71 	.word	0x00000b71
     ee4:	00000b13 	.word	0x00000b13
     ee8:	00000ab3 	.word	0x00000ab3

00000eec <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     eec:	b580      	push	{r7, lr}
     eee:	b082      	sub	sp, #8
     ef0:	af00      	add	r7, sp, #0
     ef2:	4603      	mov	r3, r0
     ef4:	460a      	mov	r2, r1
     ef6:	71fb      	strb	r3, [r7, #7]
     ef8:	4613      	mov	r3, r2
     efa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     efc:	79fb      	ldrb	r3, [r7, #7]
     efe:	095b      	lsrs	r3, r3, #5
     f00:	b2d8      	uxtb	r0, r3
     f02:	79fb      	ldrb	r3, [r7, #7]
     f04:	f003 031f 	and.w	r3, r3, #31
     f08:	b2db      	uxtb	r3, r3
     f0a:	79ba      	ldrb	r2, [r7, #6]
     f0c:	4619      	mov	r1, r3
     f0e:	4b03      	ldr	r3, [pc, #12]	; (f1c <gpio_set_pin_pull_mode+0x30>)
     f10:	4798      	blx	r3
}
     f12:	bf00      	nop
     f14:	3708      	adds	r7, #8
     f16:	46bd      	mov	sp, r7
     f18:	bd80      	pop	{r7, pc}
     f1a:	bf00      	nop
     f1c:	00000da9 	.word	0x00000da9

00000f20 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     f20:	b580      	push	{r7, lr}
     f22:	b082      	sub	sp, #8
     f24:	af00      	add	r7, sp, #0
     f26:	6078      	str	r0, [r7, #4]
     f28:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     f2a:	6839      	ldr	r1, [r7, #0]
     f2c:	6878      	ldr	r0, [r7, #4]
     f2e:	4b03      	ldr	r3, [pc, #12]	; (f3c <gpio_set_pin_function+0x1c>)
     f30:	4798      	blx	r3
}
     f32:	bf00      	nop
     f34:	3708      	adds	r7, #8
     f36:	46bd      	mov	sp, r7
     f38:	bd80      	pop	{r7, pc}
     f3a:	bf00      	nop
     f3c:	00000e69 	.word	0x00000e69

00000f40 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     f40:	b580      	push	{r7, lr}
     f42:	b082      	sub	sp, #8
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	460a      	mov	r2, r1
     f4a:	71fb      	strb	r3, [r7, #7]
     f4c:	4613      	mov	r3, r2
     f4e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     f50:	79fb      	ldrb	r3, [r7, #7]
     f52:	095b      	lsrs	r3, r3, #5
     f54:	b2d8      	uxtb	r0, r3
     f56:	79fb      	ldrb	r3, [r7, #7]
     f58:	f003 031f 	and.w	r3, r3, #31
     f5c:	2201      	movs	r2, #1
     f5e:	fa02 f303 	lsl.w	r3, r2, r3
     f62:	79ba      	ldrb	r2, [r7, #6]
     f64:	4619      	mov	r1, r3
     f66:	4b03      	ldr	r3, [pc, #12]	; (f74 <gpio_set_pin_direction+0x34>)
     f68:	4798      	blx	r3
}
     f6a:	bf00      	nop
     f6c:	3708      	adds	r7, #8
     f6e:	46bd      	mov	sp, r7
     f70:	bd80      	pop	{r7, pc}
     f72:	bf00      	nop
     f74:	00000c7d 	.word	0x00000c7d

00000f78 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	4603      	mov	r3, r0
     f80:	460a      	mov	r2, r1
     f82:	71fb      	strb	r3, [r7, #7]
     f84:	4613      	mov	r3, r2
     f86:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     f88:	79fb      	ldrb	r3, [r7, #7]
     f8a:	095b      	lsrs	r3, r3, #5
     f8c:	b2d8      	uxtb	r0, r3
     f8e:	79fb      	ldrb	r3, [r7, #7]
     f90:	f003 031f 	and.w	r3, r3, #31
     f94:	2201      	movs	r2, #1
     f96:	fa02 f303 	lsl.w	r3, r2, r3
     f9a:	79ba      	ldrb	r2, [r7, #6]
     f9c:	4619      	mov	r1, r3
     f9e:	4b03      	ldr	r3, [pc, #12]	; (fac <gpio_set_pin_level+0x34>)
     fa0:	4798      	blx	r3
}
     fa2:	bf00      	nop
     fa4:	3708      	adds	r7, #8
     fa6:	46bd      	mov	sp, r7
     fa8:	bd80      	pop	{r7, pc}
     faa:	bf00      	nop
     fac:	00000d65 	.word	0x00000d65

00000fb0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     fb0:	b580      	push	{r7, lr}
     fb2:	af00      	add	r7, sp, #0
	_init_chip();
     fb4:	4b01      	ldr	r3, [pc, #4]	; (fbc <init_mcu+0xc>)
     fb6:	4798      	blx	r3
}
     fb8:	bf00      	nop
     fba:	bd80      	pop	{r7, pc}
     fbc:	0000428d 	.word	0x0000428d

00000fc0 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	af00      	add	r7, sp, #0
     fc6:	6078      	str	r0, [r7, #4]
     fc8:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2b00      	cmp	r3, #0
     fce:	d004      	beq.n	fda <wdt_init+0x1a>
     fd0:	683b      	ldr	r3, [r7, #0]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d001      	beq.n	fda <wdt_init+0x1a>
     fd6:	2301      	movs	r3, #1
     fd8:	e000      	b.n	fdc <wdt_init+0x1c>
     fda:	2300      	movs	r3, #0
     fdc:	f003 0301 	and.w	r3, r3, #1
     fe0:	b2db      	uxtb	r3, r3
     fe2:	2248      	movs	r2, #72	; 0x48
     fe4:	4907      	ldr	r1, [pc, #28]	; (1004 <wdt_init+0x44>)
     fe6:	4618      	mov	r0, r3
     fe8:	4b07      	ldr	r3, [pc, #28]	; (1008 <wdt_init+0x48>)
     fea:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	683a      	ldr	r2, [r7, #0]
     ff0:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	4618      	mov	r0, r3
     ff6:	4b05      	ldr	r3, [pc, #20]	; (100c <wdt_init+0x4c>)
     ff8:	4798      	blx	r3
     ffa:	4603      	mov	r3, r0
}
     ffc:	4618      	mov	r0, r3
     ffe:	3708      	adds	r7, #8
    1000:	46bd      	mov	sp, r7
    1002:	bd80      	pop	{r7, pc}
    1004:	00012058 	.word	0x00012058
    1008:	00003681 	.word	0x00003681
    100c:	0000ac61 	.word	0x0000ac61

00001010 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1014:	4804      	ldr	r0, [pc, #16]	; (1028 <CRC_CALC_init+0x18>)
    1016:	4b05      	ldr	r3, [pc, #20]	; (102c <CRC_CALC_init+0x1c>)
    1018:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    101a:	4905      	ldr	r1, [pc, #20]	; (1030 <CRC_CALC_init+0x20>)
    101c:	4805      	ldr	r0, [pc, #20]	; (1034 <CRC_CALC_init+0x24>)
    101e:	4b06      	ldr	r3, [pc, #24]	; (1038 <CRC_CALC_init+0x28>)
    1020:	4798      	blx	r3
}
    1022:	bf00      	nop
    1024:	bd80      	pop	{r7, pc}
    1026:	bf00      	nop
    1028:	40000800 	.word	0x40000800
    102c:	00000813 	.word	0x00000813
    1030:	41002000 	.word	0x41002000
    1034:	2000aef4 	.word	0x2000aef4
    1038:	00002065 	.word	0x00002065

0000103c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    103c:	b580      	push	{r7, lr}
    103e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1040:	2244      	movs	r2, #68	; 0x44
    1042:	2104      	movs	r1, #4
    1044:	483f      	ldr	r0, [pc, #252]	; (1144 <EXTERNAL_IRQ_0_init+0x108>)
    1046:	4b40      	ldr	r3, [pc, #256]	; (1148 <EXTERNAL_IRQ_0_init+0x10c>)
    1048:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    104a:	4840      	ldr	r0, [pc, #256]	; (114c <EXTERNAL_IRQ_0_init+0x110>)
    104c:	4b40      	ldr	r3, [pc, #256]	; (1150 <EXTERNAL_IRQ_0_init+0x114>)
    104e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1050:	2101      	movs	r1, #1
    1052:	2040      	movs	r0, #64	; 0x40
    1054:	4b3f      	ldr	r3, [pc, #252]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    1056:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1058:	2100      	movs	r1, #0
    105a:	2040      	movs	r0, #64	; 0x40
    105c:	4b3e      	ldr	r3, [pc, #248]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    105e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1060:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1064:	2040      	movs	r0, #64	; 0x40
    1066:	4b3d      	ldr	r3, [pc, #244]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    1068:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    106a:	2101      	movs	r1, #1
    106c:	2021      	movs	r0, #33	; 0x21
    106e:	4b39      	ldr	r3, [pc, #228]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    1070:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1072:	2100      	movs	r1, #0
    1074:	2021      	movs	r0, #33	; 0x21
    1076:	4b38      	ldr	r3, [pc, #224]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    1078:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    107a:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    107e:	2021      	movs	r0, #33	; 0x21
    1080:	4b36      	ldr	r3, [pc, #216]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    1082:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1084:	2101      	movs	r1, #1
    1086:	2003      	movs	r0, #3
    1088:	4b32      	ldr	r3, [pc, #200]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    108a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    108c:	2102      	movs	r1, #2
    108e:	2003      	movs	r0, #3
    1090:	4b31      	ldr	r3, [pc, #196]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    1092:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1094:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1098:	2003      	movs	r0, #3
    109a:	4b30      	ldr	r3, [pc, #192]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    109c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    109e:	2101      	movs	r1, #1
    10a0:	2004      	movs	r0, #4
    10a2:	4b2c      	ldr	r3, [pc, #176]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    10a4:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    10a6:	2102      	movs	r1, #2
    10a8:	2004      	movs	r0, #4
    10aa:	4b2b      	ldr	r3, [pc, #172]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    10ac:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    10ae:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    10b2:	2004      	movs	r0, #4
    10b4:	4b29      	ldr	r3, [pc, #164]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    10b6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    10b8:	2101      	movs	r1, #1
    10ba:	2005      	movs	r0, #5
    10bc:	4b25      	ldr	r3, [pc, #148]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    10be:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    10c0:	2102      	movs	r1, #2
    10c2:	2005      	movs	r0, #5
    10c4:	4b24      	ldr	r3, [pc, #144]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    10c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    10c8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    10cc:	2005      	movs	r0, #5
    10ce:	4b23      	ldr	r3, [pc, #140]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    10d0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    10d2:	2101      	movs	r1, #1
    10d4:	2056      	movs	r0, #86	; 0x56
    10d6:	4b1f      	ldr	r3, [pc, #124]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    10d8:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    10da:	2102      	movs	r1, #2
    10dc:	2056      	movs	r0, #86	; 0x56
    10de:	4b1e      	ldr	r3, [pc, #120]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    10e0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    10e2:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    10e6:	2056      	movs	r0, #86	; 0x56
    10e8:	4b1c      	ldr	r3, [pc, #112]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    10ea:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    10ec:	2101      	movs	r1, #1
    10ee:	2057      	movs	r0, #87	; 0x57
    10f0:	4b18      	ldr	r3, [pc, #96]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    10f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    10f4:	2102      	movs	r1, #2
    10f6:	2057      	movs	r0, #87	; 0x57
    10f8:	4b17      	ldr	r3, [pc, #92]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    10fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    10fc:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1100:	2057      	movs	r0, #87	; 0x57
    1102:	4b16      	ldr	r3, [pc, #88]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    1104:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1106:	2101      	movs	r1, #1
    1108:	2028      	movs	r0, #40	; 0x28
    110a:	4b12      	ldr	r3, [pc, #72]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    110c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    110e:	2100      	movs	r1, #0
    1110:	2028      	movs	r0, #40	; 0x28
    1112:	4b11      	ldr	r3, [pc, #68]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    1114:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1116:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    111a:	2028      	movs	r0, #40	; 0x28
    111c:	4b0f      	ldr	r3, [pc, #60]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    111e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1120:	2101      	movs	r1, #1
    1122:	2029      	movs	r0, #41	; 0x29
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <EXTERNAL_IRQ_0_init+0x118>)
    1126:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1128:	2100      	movs	r1, #0
    112a:	2029      	movs	r0, #41	; 0x29
    112c:	4b0a      	ldr	r3, [pc, #40]	; (1158 <EXTERNAL_IRQ_0_init+0x11c>)
    112e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1130:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1134:	2029      	movs	r0, #41	; 0x29
    1136:	4b09      	ldr	r3, [pc, #36]	; (115c <EXTERNAL_IRQ_0_init+0x120>)
    1138:	4798      	blx	r3

	ext_irq_init();
    113a:	4b09      	ldr	r3, [pc, #36]	; (1160 <EXTERNAL_IRQ_0_init+0x124>)
    113c:	4798      	blx	r3
}
    113e:	bf00      	nop
    1140:	bd80      	pop	{r7, pc}
    1142:	bf00      	nop
    1144:	40001c00 	.word	0x40001c00
    1148:	000006cd 	.word	0x000006cd
    114c:	40000800 	.word	0x40000800
    1150:	000007b3 	.word	0x000007b3
    1154:	00000f41 	.word	0x00000f41
    1158:	00000eed 	.word	0x00000eed
    115c:	00000f21 	.word	0x00000f21
    1160:	0000212d 	.word	0x0000212d

00001164 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1164:	b580      	push	{r7, lr}
    1166:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1168:	2244      	movs	r2, #68	; 0x44
    116a:	210b      	movs	r1, #11
    116c:	4807      	ldr	r0, [pc, #28]	; (118c <EVENT_SYSTEM_0_init+0x28>)
    116e:	4b08      	ldr	r3, [pc, #32]	; (1190 <EVENT_SYSTEM_0_init+0x2c>)
    1170:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1172:	2244      	movs	r2, #68	; 0x44
    1174:	210c      	movs	r1, #12
    1176:	4805      	ldr	r0, [pc, #20]	; (118c <EVENT_SYSTEM_0_init+0x28>)
    1178:	4b05      	ldr	r3, [pc, #20]	; (1190 <EVENT_SYSTEM_0_init+0x2c>)
    117a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    117c:	4805      	ldr	r0, [pc, #20]	; (1194 <EVENT_SYSTEM_0_init+0x30>)
    117e:	4b06      	ldr	r3, [pc, #24]	; (1198 <EVENT_SYSTEM_0_init+0x34>)
    1180:	4798      	blx	r3

	event_system_init();
    1182:	4b06      	ldr	r3, [pc, #24]	; (119c <EVENT_SYSTEM_0_init+0x38>)
    1184:	4798      	blx	r3
}
    1186:	bf00      	nop
    1188:	bd80      	pop	{r7, pc}
    118a:	bf00      	nop
    118c:	40001c00 	.word	0x40001c00
    1190:	000006cd 	.word	0x000006cd
    1194:	40000800 	.word	0x40000800
    1198:	00000833 	.word	0x00000833
    119c:	00002119 	.word	0x00002119

000011a0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    11a4:	2101      	movs	r1, #1
    11a6:	202b      	movs	r0, #43	; 0x2b
    11a8:	4b2b      	ldr	r3, [pc, #172]	; (1258 <QSPI_N25Q256_PORT_init+0xb8>)
    11aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    11ac:	2100      	movs	r1, #0
    11ae:	202b      	movs	r0, #43	; 0x2b
    11b0:	4b2a      	ldr	r3, [pc, #168]	; (125c <QSPI_N25Q256_PORT_init+0xbc>)
    11b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    11b4:	492a      	ldr	r1, [pc, #168]	; (1260 <QSPI_N25Q256_PORT_init+0xc0>)
    11b6:	202b      	movs	r0, #43	; 0x2b
    11b8:	4b2a      	ldr	r3, [pc, #168]	; (1264 <QSPI_N25Q256_PORT_init+0xc4>)
    11ba:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    11bc:	2102      	movs	r1, #2
    11be:	2008      	movs	r0, #8
    11c0:	4b25      	ldr	r3, [pc, #148]	; (1258 <QSPI_N25Q256_PORT_init+0xb8>)
    11c2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    11c4:	2100      	movs	r1, #0
    11c6:	2008      	movs	r0, #8
    11c8:	4b27      	ldr	r3, [pc, #156]	; (1268 <QSPI_N25Q256_PORT_init+0xc8>)
    11ca:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    11cc:	2100      	movs	r1, #0
    11ce:	2008      	movs	r0, #8
    11d0:	4b22      	ldr	r3, [pc, #136]	; (125c <QSPI_N25Q256_PORT_init+0xbc>)
    11d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    11d4:	4925      	ldr	r1, [pc, #148]	; (126c <QSPI_N25Q256_PORT_init+0xcc>)
    11d6:	2008      	movs	r0, #8
    11d8:	4b22      	ldr	r3, [pc, #136]	; (1264 <QSPI_N25Q256_PORT_init+0xc4>)
    11da:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    11dc:	2102      	movs	r1, #2
    11de:	2009      	movs	r0, #9
    11e0:	4b1d      	ldr	r3, [pc, #116]	; (1258 <QSPI_N25Q256_PORT_init+0xb8>)
    11e2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    11e4:	2100      	movs	r1, #0
    11e6:	2009      	movs	r0, #9
    11e8:	4b1f      	ldr	r3, [pc, #124]	; (1268 <QSPI_N25Q256_PORT_init+0xc8>)
    11ea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    11ec:	2100      	movs	r1, #0
    11ee:	2009      	movs	r0, #9
    11f0:	4b1a      	ldr	r3, [pc, #104]	; (125c <QSPI_N25Q256_PORT_init+0xbc>)
    11f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    11f4:	491e      	ldr	r1, [pc, #120]	; (1270 <QSPI_N25Q256_PORT_init+0xd0>)
    11f6:	2009      	movs	r0, #9
    11f8:	4b1a      	ldr	r3, [pc, #104]	; (1264 <QSPI_N25Q256_PORT_init+0xc4>)
    11fa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    11fc:	2102      	movs	r1, #2
    11fe:	200a      	movs	r0, #10
    1200:	4b15      	ldr	r3, [pc, #84]	; (1258 <QSPI_N25Q256_PORT_init+0xb8>)
    1202:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1204:	2100      	movs	r1, #0
    1206:	200a      	movs	r0, #10
    1208:	4b17      	ldr	r3, [pc, #92]	; (1268 <QSPI_N25Q256_PORT_init+0xc8>)
    120a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    120c:	2100      	movs	r1, #0
    120e:	200a      	movs	r0, #10
    1210:	4b12      	ldr	r3, [pc, #72]	; (125c <QSPI_N25Q256_PORT_init+0xbc>)
    1212:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1214:	4917      	ldr	r1, [pc, #92]	; (1274 <QSPI_N25Q256_PORT_init+0xd4>)
    1216:	200a      	movs	r0, #10
    1218:	4b12      	ldr	r3, [pc, #72]	; (1264 <QSPI_N25Q256_PORT_init+0xc4>)
    121a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    121c:	2102      	movs	r1, #2
    121e:	200b      	movs	r0, #11
    1220:	4b0d      	ldr	r3, [pc, #52]	; (1258 <QSPI_N25Q256_PORT_init+0xb8>)
    1222:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1224:	2100      	movs	r1, #0
    1226:	200b      	movs	r0, #11
    1228:	4b0f      	ldr	r3, [pc, #60]	; (1268 <QSPI_N25Q256_PORT_init+0xc8>)
    122a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    122c:	2100      	movs	r1, #0
    122e:	200b      	movs	r0, #11
    1230:	4b0a      	ldr	r3, [pc, #40]	; (125c <QSPI_N25Q256_PORT_init+0xbc>)
    1232:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1234:	4910      	ldr	r1, [pc, #64]	; (1278 <QSPI_N25Q256_PORT_init+0xd8>)
    1236:	200b      	movs	r0, #11
    1238:	4b0a      	ldr	r3, [pc, #40]	; (1264 <QSPI_N25Q256_PORT_init+0xc4>)
    123a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    123c:	2101      	movs	r1, #1
    123e:	202a      	movs	r0, #42	; 0x2a
    1240:	4b05      	ldr	r3, [pc, #20]	; (1258 <QSPI_N25Q256_PORT_init+0xb8>)
    1242:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1244:	2100      	movs	r1, #0
    1246:	202a      	movs	r0, #42	; 0x2a
    1248:	4b04      	ldr	r3, [pc, #16]	; (125c <QSPI_N25Q256_PORT_init+0xbc>)
    124a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    124c:	490b      	ldr	r1, [pc, #44]	; (127c <QSPI_N25Q256_PORT_init+0xdc>)
    124e:	202a      	movs	r0, #42	; 0x2a
    1250:	4b04      	ldr	r3, [pc, #16]	; (1264 <QSPI_N25Q256_PORT_init+0xc4>)
    1252:	4798      	blx	r3
}
    1254:	bf00      	nop
    1256:	bd80      	pop	{r7, pc}
    1258:	00000f41 	.word	0x00000f41
    125c:	00000eed 	.word	0x00000eed
    1260:	002b0007 	.word	0x002b0007
    1264:	00000f21 	.word	0x00000f21
    1268:	00000f79 	.word	0x00000f79
    126c:	00080007 	.word	0x00080007
    1270:	00090007 	.word	0x00090007
    1274:	000a0007 	.word	0x000a0007
    1278:	000b0007 	.word	0x000b0007
    127c:	002a0007 	.word	0x002a0007

00001280 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1280:	b580      	push	{r7, lr}
    1282:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1284:	4805      	ldr	r0, [pc, #20]	; (129c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1286:	4b06      	ldr	r3, [pc, #24]	; (12a0 <QSPI_N25Q256_CLOCK_init+0x20>)
    1288:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    128a:	4804      	ldr	r0, [pc, #16]	; (129c <QSPI_N25Q256_CLOCK_init+0x1c>)
    128c:	4b05      	ldr	r3, [pc, #20]	; (12a4 <QSPI_N25Q256_CLOCK_init+0x24>)
    128e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1290:	4802      	ldr	r0, [pc, #8]	; (129c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1292:	4b05      	ldr	r3, [pc, #20]	; (12a8 <QSPI_N25Q256_CLOCK_init+0x28>)
    1294:	4798      	blx	r3
}
    1296:	bf00      	nop
    1298:	bd80      	pop	{r7, pc}
    129a:	bf00      	nop
    129c:	40000800 	.word	0x40000800
    12a0:	00000713 	.word	0x00000713
    12a4:	00000753 	.word	0x00000753
    12a8:	00000933 	.word	0x00000933

000012ac <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    12b0:	4b04      	ldr	r3, [pc, #16]	; (12c4 <QSPI_N25Q256_init+0x18>)
    12b2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    12b4:	4904      	ldr	r1, [pc, #16]	; (12c8 <QSPI_N25Q256_init+0x1c>)
    12b6:	4805      	ldr	r0, [pc, #20]	; (12cc <QSPI_N25Q256_init+0x20>)
    12b8:	4b05      	ldr	r3, [pc, #20]	; (12d0 <QSPI_N25Q256_init+0x24>)
    12ba:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    12bc:	4b05      	ldr	r3, [pc, #20]	; (12d4 <QSPI_N25Q256_init+0x28>)
    12be:	4798      	blx	r3
}
    12c0:	bf00      	nop
    12c2:	bd80      	pop	{r7, pc}
    12c4:	00001281 	.word	0x00001281
    12c8:	42003400 	.word	0x42003400
    12cc:	2000ad88 	.word	0x2000ad88
    12d0:	0000259d 	.word	0x0000259d
    12d4:	000011a1 	.word	0x000011a1

000012d8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    12d8:	b580      	push	{r7, lr}
    12da:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    12dc:	4802      	ldr	r0, [pc, #8]	; (12e8 <DATETIME_CLOCK_CLOCK_init+0x10>)
    12de:	4b03      	ldr	r3, [pc, #12]	; (12ec <DATETIME_CLOCK_CLOCK_init+0x14>)
    12e0:	4798      	blx	r3
}
    12e2:	bf00      	nop
    12e4:	bd80      	pop	{r7, pc}
    12e6:	bf00      	nop
    12e8:	40000800 	.word	0x40000800
    12ec:	00000793 	.word	0x00000793

000012f0 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    12f0:	b580      	push	{r7, lr}
    12f2:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    12f4:	4b03      	ldr	r3, [pc, #12]	; (1304 <DATETIME_CLOCK_init+0x14>)
    12f6:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    12f8:	4903      	ldr	r1, [pc, #12]	; (1308 <DATETIME_CLOCK_init+0x18>)
    12fa:	4804      	ldr	r0, [pc, #16]	; (130c <DATETIME_CLOCK_init+0x1c>)
    12fc:	4b04      	ldr	r3, [pc, #16]	; (1310 <DATETIME_CLOCK_init+0x20>)
    12fe:	4798      	blx	r3
}
    1300:	bf00      	nop
    1302:	bd80      	pop	{r7, pc}
    1304:	000012d9 	.word	0x000012d9
    1308:	40002400 	.word	0x40002400
    130c:	2000aed0 	.word	0x2000aed0
    1310:	00001eb9 	.word	0x00001eb9

00001314 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1314:	b580      	push	{r7, lr}
    1316:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    1318:	2100      	movs	r1, #0
    131a:	2011      	movs	r0, #17
    131c:	4b07      	ldr	r3, [pc, #28]	; (133c <I2C_HEATERS_PORT_init+0x28>)
    131e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    1320:	4907      	ldr	r1, [pc, #28]	; (1340 <I2C_HEATERS_PORT_init+0x2c>)
    1322:	2011      	movs	r0, #17
    1324:	4b07      	ldr	r3, [pc, #28]	; (1344 <I2C_HEATERS_PORT_init+0x30>)
    1326:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    1328:	2100      	movs	r1, #0
    132a:	2010      	movs	r0, #16
    132c:	4b03      	ldr	r3, [pc, #12]	; (133c <I2C_HEATERS_PORT_init+0x28>)
    132e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    1330:	4905      	ldr	r1, [pc, #20]	; (1348 <I2C_HEATERS_PORT_init+0x34>)
    1332:	2010      	movs	r0, #16
    1334:	4b03      	ldr	r3, [pc, #12]	; (1344 <I2C_HEATERS_PORT_init+0x30>)
    1336:	4798      	blx	r3
}
    1338:	bf00      	nop
    133a:	bd80      	pop	{r7, pc}
    133c:	00000eed 	.word	0x00000eed
    1340:	00110003 	.word	0x00110003
    1344:	00000f21 	.word	0x00000f21
    1348:	00100003 	.word	0x00100003

0000134c <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    134c:	b580      	push	{r7, lr}
    134e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1350:	2240      	movs	r2, #64	; 0x40
    1352:	2118      	movs	r1, #24
    1354:	4806      	ldr	r0, [pc, #24]	; (1370 <I2C_HEATERS_CLOCK_init+0x24>)
    1356:	4b07      	ldr	r3, [pc, #28]	; (1374 <I2C_HEATERS_CLOCK_init+0x28>)
    1358:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    135a:	2243      	movs	r2, #67	; 0x43
    135c:	2103      	movs	r1, #3
    135e:	4804      	ldr	r0, [pc, #16]	; (1370 <I2C_HEATERS_CLOCK_init+0x24>)
    1360:	4b04      	ldr	r3, [pc, #16]	; (1374 <I2C_HEATERS_CLOCK_init+0x28>)
    1362:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    1364:	4804      	ldr	r0, [pc, #16]	; (1378 <I2C_HEATERS_CLOCK_init+0x2c>)
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <I2C_HEATERS_CLOCK_init+0x30>)
    1368:	4798      	blx	r3
}
    136a:	bf00      	nop
    136c:	bd80      	pop	{r7, pc}
    136e:	bf00      	nop
    1370:	40001c00 	.word	0x40001c00
    1374:	000006cd 	.word	0x000006cd
    1378:	40000800 	.word	0x40000800
    137c:	00000853 	.word	0x00000853

00001380 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1380:	b580      	push	{r7, lr}
    1382:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1384:	4b04      	ldr	r3, [pc, #16]	; (1398 <I2C_HEATERS_init+0x18>)
    1386:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    1388:	4904      	ldr	r1, [pc, #16]	; (139c <I2C_HEATERS_init+0x1c>)
    138a:	4805      	ldr	r0, [pc, #20]	; (13a0 <I2C_HEATERS_init+0x20>)
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <I2C_HEATERS_init+0x24>)
    138e:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1390:	4b05      	ldr	r3, [pc, #20]	; (13a8 <I2C_HEATERS_init+0x28>)
    1392:	4798      	blx	r3
}
    1394:	bf00      	nop
    1396:	bd80      	pop	{r7, pc}
    1398:	0000134d 	.word	0x0000134d
    139c:	41014000 	.word	0x41014000
    13a0:	2000ae28 	.word	0x2000ae28
    13a4:	000023f5 	.word	0x000023f5
    13a8:	00001315 	.word	0x00001315

000013ac <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    13b0:	2100      	movs	r1, #0
    13b2:	203b      	movs	r0, #59	; 0x3b
    13b4:	4b11      	ldr	r3, [pc, #68]	; (13fc <SPI_TEMP_PORT_init+0x50>)
    13b6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    13b8:	2102      	movs	r1, #2
    13ba:	203b      	movs	r0, #59	; 0x3b
    13bc:	4b10      	ldr	r3, [pc, #64]	; (1400 <SPI_TEMP_PORT_init+0x54>)
    13be:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    13c0:	4910      	ldr	r1, [pc, #64]	; (1404 <SPI_TEMP_PORT_init+0x58>)
    13c2:	203b      	movs	r0, #59	; 0x3b
    13c4:	4b10      	ldr	r3, [pc, #64]	; (1408 <SPI_TEMP_PORT_init+0x5c>)
    13c6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    13c8:	2100      	movs	r1, #0
    13ca:	203a      	movs	r0, #58	; 0x3a
    13cc:	4b0b      	ldr	r3, [pc, #44]	; (13fc <SPI_TEMP_PORT_init+0x50>)
    13ce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    13d0:	2102      	movs	r1, #2
    13d2:	203a      	movs	r0, #58	; 0x3a
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <SPI_TEMP_PORT_init+0x54>)
    13d6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    13d8:	490c      	ldr	r1, [pc, #48]	; (140c <SPI_TEMP_PORT_init+0x60>)
    13da:	203a      	movs	r0, #58	; 0x3a
    13dc:	4b0a      	ldr	r3, [pc, #40]	; (1408 <SPI_TEMP_PORT_init+0x5c>)
    13de:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    13e0:	2101      	movs	r1, #1
    13e2:	203c      	movs	r0, #60	; 0x3c
    13e4:	4b06      	ldr	r3, [pc, #24]	; (1400 <SPI_TEMP_PORT_init+0x54>)
    13e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    13e8:	2100      	movs	r1, #0
    13ea:	203c      	movs	r0, #60	; 0x3c
    13ec:	4b08      	ldr	r3, [pc, #32]	; (1410 <SPI_TEMP_PORT_init+0x64>)
    13ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    13f0:	4908      	ldr	r1, [pc, #32]	; (1414 <SPI_TEMP_PORT_init+0x68>)
    13f2:	203c      	movs	r0, #60	; 0x3c
    13f4:	4b04      	ldr	r3, [pc, #16]	; (1408 <SPI_TEMP_PORT_init+0x5c>)
    13f6:	4798      	blx	r3
}
    13f8:	bf00      	nop
    13fa:	bd80      	pop	{r7, pc}
    13fc:	00000f79 	.word	0x00000f79
    1400:	00000f41 	.word	0x00000f41
    1404:	003b0003 	.word	0x003b0003
    1408:	00000f21 	.word	0x00000f21
    140c:	003a0003 	.word	0x003a0003
    1410:	00000eed 	.word	0x00000eed
    1414:	003c0003 	.word	0x003c0003

00001418 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1418:	b580      	push	{r7, lr}
    141a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    141c:	2245      	movs	r2, #69	; 0x45
    141e:	2122      	movs	r1, #34	; 0x22
    1420:	4806      	ldr	r0, [pc, #24]	; (143c <SPI_TEMP_CLOCK_init+0x24>)
    1422:	4b07      	ldr	r3, [pc, #28]	; (1440 <SPI_TEMP_CLOCK_init+0x28>)
    1424:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1426:	224a      	movs	r2, #74	; 0x4a
    1428:	2103      	movs	r1, #3
    142a:	4804      	ldr	r0, [pc, #16]	; (143c <SPI_TEMP_CLOCK_init+0x24>)
    142c:	4b04      	ldr	r3, [pc, #16]	; (1440 <SPI_TEMP_CLOCK_init+0x28>)
    142e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1430:	4804      	ldr	r0, [pc, #16]	; (1444 <SPI_TEMP_CLOCK_init+0x2c>)
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <SPI_TEMP_CLOCK_init+0x30>)
    1434:	4798      	blx	r3
}
    1436:	bf00      	nop
    1438:	bd80      	pop	{r7, pc}
    143a:	bf00      	nop
    143c:	40001c00 	.word	0x40001c00
    1440:	000006cd 	.word	0x000006cd
    1444:	40000800 	.word	0x40000800
    1448:	00000953 	.word	0x00000953

0000144c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    144c:	b580      	push	{r7, lr}
    144e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1450:	4b05      	ldr	r3, [pc, #20]	; (1468 <SPI_TEMP_init+0x1c>)
    1452:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1454:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1458:	4804      	ldr	r0, [pc, #16]	; (146c <SPI_TEMP_init+0x20>)
    145a:	4b05      	ldr	r3, [pc, #20]	; (1470 <SPI_TEMP_init+0x24>)
    145c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    145e:	4b05      	ldr	r3, [pc, #20]	; (1474 <SPI_TEMP_init+0x28>)
    1460:	4798      	blx	r3
}
    1462:	bf00      	nop
    1464:	bd80      	pop	{r7, pc}
    1466:	bf00      	nop
    1468:	00001419 	.word	0x00001419
    146c:	2000ad30 	.word	0x2000ad30
    1470:	000026ad 	.word	0x000026ad
    1474:	000013ad 	.word	0x000013ad

00001478 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1478:	b580      	push	{r7, lr}
    147a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    147c:	2100      	movs	r1, #0
    147e:	2017      	movs	r0, #23
    1480:	4b07      	ldr	r3, [pc, #28]	; (14a0 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1482:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1484:	4907      	ldr	r1, [pc, #28]	; (14a4 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    1486:	2017      	movs	r0, #23
    1488:	4b07      	ldr	r3, [pc, #28]	; (14a8 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    148a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    148c:	2100      	movs	r1, #0
    148e:	2016      	movs	r0, #22
    1490:	4b03      	ldr	r3, [pc, #12]	; (14a0 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1492:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1494:	4905      	ldr	r1, [pc, #20]	; (14ac <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    1496:	2016      	movs	r0, #22
    1498:	4b03      	ldr	r3, [pc, #12]	; (14a8 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    149a:	4798      	blx	r3
}
    149c:	bf00      	nop
    149e:	bd80      	pop	{r7, pc}
    14a0:	00000eed 	.word	0x00000eed
    14a4:	00170003 	.word	0x00170003
    14a8:	00000f21 	.word	0x00000f21
    14ac:	00160003 	.word	0x00160003

000014b0 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14b4:	2244      	movs	r2, #68	; 0x44
    14b6:	2123      	movs	r1, #35	; 0x23
    14b8:	4806      	ldr	r0, [pc, #24]	; (14d4 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    14ba:	4b07      	ldr	r3, [pc, #28]	; (14d8 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    14bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14be:	224a      	movs	r2, #74	; 0x4a
    14c0:	2103      	movs	r1, #3
    14c2:	4804      	ldr	r0, [pc, #16]	; (14d4 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    14c4:	4b04      	ldr	r3, [pc, #16]	; (14d8 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    14c6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    14c8:	4804      	ldr	r0, [pc, #16]	; (14dc <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    14cc:	4798      	blx	r3
}
    14ce:	bf00      	nop
    14d0:	bd80      	pop	{r7, pc}
    14d2:	bf00      	nop
    14d4:	40001c00 	.word	0x40001c00
    14d8:	000006cd 	.word	0x000006cd
    14dc:	40000800 	.word	0x40000800
    14e0:	00000973 	.word	0x00000973

000014e4 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    14e8:	4b04      	ldr	r3, [pc, #16]	; (14fc <I2C_FLAPPER_VALVE_init+0x18>)
    14ea:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    14ec:	4904      	ldr	r1, [pc, #16]	; (1500 <I2C_FLAPPER_VALVE_init+0x1c>)
    14ee:	4805      	ldr	r0, [pc, #20]	; (1504 <I2C_FLAPPER_VALVE_init+0x20>)
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <I2C_FLAPPER_VALVE_init+0x24>)
    14f2:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    14f4:	4b05      	ldr	r3, [pc, #20]	; (150c <I2C_FLAPPER_VALVE_init+0x28>)
    14f6:	4798      	blx	r3
}
    14f8:	bf00      	nop
    14fa:	bd80      	pop	{r7, pc}
    14fc:	000014b1 	.word	0x000014b1
    1500:	43000400 	.word	0x43000400
    1504:	2000adcc 	.word	0x2000adcc
    1508:	000023f5 	.word	0x000023f5
    150c:	00001479 	.word	0x00001479

00001510 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1510:	b580      	push	{r7, lr}
    1512:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1514:	2100      	movs	r1, #0
    1516:	2044      	movs	r0, #68	; 0x44
    1518:	4b11      	ldr	r3, [pc, #68]	; (1560 <SPI_HI3593_PORT_init+0x50>)
    151a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    151c:	2102      	movs	r1, #2
    151e:	2044      	movs	r0, #68	; 0x44
    1520:	4b10      	ldr	r3, [pc, #64]	; (1564 <SPI_HI3593_PORT_init+0x54>)
    1522:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1524:	4910      	ldr	r1, [pc, #64]	; (1568 <SPI_HI3593_PORT_init+0x58>)
    1526:	2044      	movs	r0, #68	; 0x44
    1528:	4b10      	ldr	r3, [pc, #64]	; (156c <SPI_HI3593_PORT_init+0x5c>)
    152a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    152c:	2100      	movs	r1, #0
    152e:	2045      	movs	r0, #69	; 0x45
    1530:	4b0b      	ldr	r3, [pc, #44]	; (1560 <SPI_HI3593_PORT_init+0x50>)
    1532:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1534:	2102      	movs	r1, #2
    1536:	2045      	movs	r0, #69	; 0x45
    1538:	4b0a      	ldr	r3, [pc, #40]	; (1564 <SPI_HI3593_PORT_init+0x54>)
    153a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    153c:	490c      	ldr	r1, [pc, #48]	; (1570 <SPI_HI3593_PORT_init+0x60>)
    153e:	2045      	movs	r0, #69	; 0x45
    1540:	4b0a      	ldr	r3, [pc, #40]	; (156c <SPI_HI3593_PORT_init+0x5c>)
    1542:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1544:	2101      	movs	r1, #1
    1546:	2047      	movs	r0, #71	; 0x47
    1548:	4b06      	ldr	r3, [pc, #24]	; (1564 <SPI_HI3593_PORT_init+0x54>)
    154a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    154c:	2100      	movs	r1, #0
    154e:	2047      	movs	r0, #71	; 0x47
    1550:	4b08      	ldr	r3, [pc, #32]	; (1574 <SPI_HI3593_PORT_init+0x64>)
    1552:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1554:	4908      	ldr	r1, [pc, #32]	; (1578 <SPI_HI3593_PORT_init+0x68>)
    1556:	2047      	movs	r0, #71	; 0x47
    1558:	4b04      	ldr	r3, [pc, #16]	; (156c <SPI_HI3593_PORT_init+0x5c>)
    155a:	4798      	blx	r3
}
    155c:	bf00      	nop
    155e:	bd80      	pop	{r7, pc}
    1560:	00000f79 	.word	0x00000f79
    1564:	00000f41 	.word	0x00000f41
    1568:	00440002 	.word	0x00440002
    156c:	00000f21 	.word	0x00000f21
    1570:	00450002 	.word	0x00450002
    1574:	00000eed 	.word	0x00000eed
    1578:	00470002 	.word	0x00470002

0000157c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    157c:	b580      	push	{r7, lr}
    157e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1580:	2242      	movs	r2, #66	; 0x42
    1582:	2124      	movs	r1, #36	; 0x24
    1584:	4806      	ldr	r0, [pc, #24]	; (15a0 <SPI_HI3593_CLOCK_init+0x24>)
    1586:	4b07      	ldr	r3, [pc, #28]	; (15a4 <SPI_HI3593_CLOCK_init+0x28>)
    1588:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    158a:	224a      	movs	r2, #74	; 0x4a
    158c:	2103      	movs	r1, #3
    158e:	4804      	ldr	r0, [pc, #16]	; (15a0 <SPI_HI3593_CLOCK_init+0x24>)
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <SPI_HI3593_CLOCK_init+0x28>)
    1592:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1594:	4804      	ldr	r0, [pc, #16]	; (15a8 <SPI_HI3593_CLOCK_init+0x2c>)
    1596:	4b05      	ldr	r3, [pc, #20]	; (15ac <SPI_HI3593_CLOCK_init+0x30>)
    1598:	4798      	blx	r3
}
    159a:	bf00      	nop
    159c:	bd80      	pop	{r7, pc}
    159e:	bf00      	nop
    15a0:	40001c00 	.word	0x40001c00
    15a4:	000006cd 	.word	0x000006cd
    15a8:	40000800 	.word	0x40000800
    15ac:	00000993 	.word	0x00000993

000015b0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    15b0:	b580      	push	{r7, lr}
    15b2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    15b4:	4b04      	ldr	r3, [pc, #16]	; (15c8 <SPI_HI3593_init+0x18>)
    15b6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    15b8:	4904      	ldr	r1, [pc, #16]	; (15cc <SPI_HI3593_init+0x1c>)
    15ba:	4805      	ldr	r0, [pc, #20]	; (15d0 <SPI_HI3593_init+0x20>)
    15bc:	4b05      	ldr	r3, [pc, #20]	; (15d4 <SPI_HI3593_init+0x24>)
    15be:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    15c0:	4b05      	ldr	r3, [pc, #20]	; (15d8 <SPI_HI3593_init+0x28>)
    15c2:	4798      	blx	r3
}
    15c4:	bf00      	nop
    15c6:	bd80      	pop	{r7, pc}
    15c8:	0000157d 	.word	0x0000157d
    15cc:	43000800 	.word	0x43000800
    15d0:	2000ad18 	.word	0x2000ad18
    15d4:	000026ad 	.word	0x000026ad
    15d8:	00001511 	.word	0x00001511

000015dc <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    15dc:	b580      	push	{r7, lr}
    15de:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    15e0:	2100      	movs	r1, #0
    15e2:	2068      	movs	r0, #104	; 0x68
    15e4:	4b07      	ldr	r3, [pc, #28]	; (1604 <I2C_FANS_PORT_init+0x28>)
    15e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    15e8:	4907      	ldr	r1, [pc, #28]	; (1608 <I2C_FANS_PORT_init+0x2c>)
    15ea:	2068      	movs	r0, #104	; 0x68
    15ec:	4b07      	ldr	r3, [pc, #28]	; (160c <I2C_FANS_PORT_init+0x30>)
    15ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    15f0:	2100      	movs	r1, #0
    15f2:	2069      	movs	r0, #105	; 0x69
    15f4:	4b03      	ldr	r3, [pc, #12]	; (1604 <I2C_FANS_PORT_init+0x28>)
    15f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    15f8:	4905      	ldr	r1, [pc, #20]	; (1610 <I2C_FANS_PORT_init+0x34>)
    15fa:	2069      	movs	r0, #105	; 0x69
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <I2C_FANS_PORT_init+0x30>)
    15fe:	4798      	blx	r3
}
    1600:	bf00      	nop
    1602:	bd80      	pop	{r7, pc}
    1604:	00000eed 	.word	0x00000eed
    1608:	00680002 	.word	0x00680002
    160c:	00000f21 	.word	0x00000f21
    1610:	00690002 	.word	0x00690002

00001614 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1618:	2244      	movs	r2, #68	; 0x44
    161a:	2125      	movs	r1, #37	; 0x25
    161c:	4806      	ldr	r0, [pc, #24]	; (1638 <I2C_FANS_CLOCK_init+0x24>)
    161e:	4b07      	ldr	r3, [pc, #28]	; (163c <I2C_FANS_CLOCK_init+0x28>)
    1620:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1622:	224a      	movs	r2, #74	; 0x4a
    1624:	2103      	movs	r1, #3
    1626:	4804      	ldr	r0, [pc, #16]	; (1638 <I2C_FANS_CLOCK_init+0x24>)
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <I2C_FANS_CLOCK_init+0x28>)
    162a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    162c:	4804      	ldr	r0, [pc, #16]	; (1640 <I2C_FANS_CLOCK_init+0x2c>)
    162e:	4b05      	ldr	r3, [pc, #20]	; (1644 <I2C_FANS_CLOCK_init+0x30>)
    1630:	4798      	blx	r3
}
    1632:	bf00      	nop
    1634:	bd80      	pop	{r7, pc}
    1636:	bf00      	nop
    1638:	40001c00 	.word	0x40001c00
    163c:	000006cd 	.word	0x000006cd
    1640:	40000800 	.word	0x40000800
    1644:	000009b3 	.word	0x000009b3

00001648 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1648:	b580      	push	{r7, lr}
    164a:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    164c:	4b04      	ldr	r3, [pc, #16]	; (1660 <I2C_FANS_init+0x18>)
    164e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1650:	4904      	ldr	r1, [pc, #16]	; (1664 <I2C_FANS_init+0x1c>)
    1652:	4805      	ldr	r0, [pc, #20]	; (1668 <I2C_FANS_init+0x20>)
    1654:	4b05      	ldr	r3, [pc, #20]	; (166c <I2C_FANS_init+0x24>)
    1656:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <I2C_FANS_init+0x28>)
    165a:	4798      	blx	r3
}
    165c:	bf00      	nop
    165e:	bd80      	pop	{r7, pc}
    1660:	00001615 	.word	0x00001615
    1664:	43000c00 	.word	0x43000c00
    1668:	2000ad48 	.word	0x2000ad48
    166c:	000023f5 	.word	0x000023f5
    1670:	000015dd 	.word	0x000015dd

00001674 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1674:	b580      	push	{r7, lr}
    1676:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1678:	4808      	ldr	r0, [pc, #32]	; (169c <TIMER_USB_init+0x28>)
    167a:	4b09      	ldr	r3, [pc, #36]	; (16a0 <TIMER_USB_init+0x2c>)
    167c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    167e:	2243      	movs	r2, #67	; 0x43
    1680:	2109      	movs	r1, #9
    1682:	4808      	ldr	r0, [pc, #32]	; (16a4 <TIMER_USB_init+0x30>)
    1684:	4b08      	ldr	r3, [pc, #32]	; (16a8 <TIMER_USB_init+0x34>)
    1686:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <TIMER_USB_init+0x38>)
    168a:	4798      	blx	r3
    168c:	4603      	mov	r3, r0
    168e:	461a      	mov	r2, r3
    1690:	4907      	ldr	r1, [pc, #28]	; (16b0 <TIMER_USB_init+0x3c>)
    1692:	4808      	ldr	r0, [pc, #32]	; (16b4 <TIMER_USB_init+0x40>)
    1694:	4b08      	ldr	r3, [pc, #32]	; (16b8 <TIMER_USB_init+0x44>)
    1696:	4798      	blx	r3
}
    1698:	bf00      	nop
    169a:	bd80      	pop	{r7, pc}
    169c:	40000800 	.word	0x40000800
    16a0:	000007d3 	.word	0x000007d3
    16a4:	40001c00 	.word	0x40001c00
    16a8:	000006cd 	.word	0x000006cd
    16ac:	000080f9 	.word	0x000080f9
    16b0:	40003800 	.word	0x40003800
    16b4:	2000ae90 	.word	0x2000ae90
    16b8:	0000287d 	.word	0x0000287d

000016bc <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    16c0:	4808      	ldr	r0, [pc, #32]	; (16e4 <TIMER_ARINC_init+0x28>)
    16c2:	4b09      	ldr	r3, [pc, #36]	; (16e8 <TIMER_ARINC_init+0x2c>)
    16c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16c6:	2244      	movs	r2, #68	; 0x44
    16c8:	211a      	movs	r1, #26
    16ca:	4808      	ldr	r0, [pc, #32]	; (16ec <TIMER_ARINC_init+0x30>)
    16cc:	4b08      	ldr	r3, [pc, #32]	; (16f0 <TIMER_ARINC_init+0x34>)
    16ce:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    16d0:	4b08      	ldr	r3, [pc, #32]	; (16f4 <TIMER_ARINC_init+0x38>)
    16d2:	4798      	blx	r3
    16d4:	4603      	mov	r3, r0
    16d6:	461a      	mov	r2, r3
    16d8:	4907      	ldr	r1, [pc, #28]	; (16f8 <TIMER_ARINC_init+0x3c>)
    16da:	4808      	ldr	r0, [pc, #32]	; (16fc <TIMER_ARINC_init+0x40>)
    16dc:	4b08      	ldr	r3, [pc, #32]	; (1700 <TIMER_ARINC_init+0x44>)
    16de:	4798      	blx	r3
}
    16e0:	bf00      	nop
    16e2:	bd80      	pop	{r7, pc}
    16e4:	40000800 	.word	0x40000800
    16e8:	000008b3 	.word	0x000008b3
    16ec:	40001c00 	.word	0x40001c00
    16f0:	000006cd 	.word	0x000006cd
    16f4:	000080f9 	.word	0x000080f9
    16f8:	4101a000 	.word	0x4101a000
    16fc:	2000ae70 	.word	0x2000ae70
    1700:	0000287d 	.word	0x0000287d

00001704 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1708:	4808      	ldr	r0, [pc, #32]	; (172c <TIMER_MAINTENANCE_init+0x28>)
    170a:	4b09      	ldr	r3, [pc, #36]	; (1730 <TIMER_MAINTENANCE_init+0x2c>)
    170c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    170e:	2246      	movs	r2, #70	; 0x46
    1710:	211e      	movs	r1, #30
    1712:	4808      	ldr	r0, [pc, #32]	; (1734 <TIMER_MAINTENANCE_init+0x30>)
    1714:	4b08      	ldr	r3, [pc, #32]	; (1738 <TIMER_MAINTENANCE_init+0x34>)
    1716:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1718:	4b08      	ldr	r3, [pc, #32]	; (173c <TIMER_MAINTENANCE_init+0x38>)
    171a:	4798      	blx	r3
    171c:	4603      	mov	r3, r0
    171e:	461a      	mov	r2, r3
    1720:	4907      	ldr	r1, [pc, #28]	; (1740 <TIMER_MAINTENANCE_init+0x3c>)
    1722:	4808      	ldr	r0, [pc, #32]	; (1744 <TIMER_MAINTENANCE_init+0x40>)
    1724:	4b08      	ldr	r3, [pc, #32]	; (1748 <TIMER_MAINTENANCE_init+0x44>)
    1726:	4798      	blx	r3
}
    1728:	bf00      	nop
    172a:	bd80      	pop	{r7, pc}
    172c:	40000800 	.word	0x40000800
    1730:	000008f3 	.word	0x000008f3
    1734:	40001c00 	.word	0x40001c00
    1738:	000006cd 	.word	0x000006cd
    173c:	000080f9 	.word	0x000080f9
    1740:	42001400 	.word	0x42001400
    1744:	2000ad68 	.word	0x2000ad68
    1748:	0000287d 	.word	0x0000287d

0000174c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    174c:	b580      	push	{r7, lr}
    174e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1750:	4808      	ldr	r0, [pc, #32]	; (1774 <TIMER_INTERFACE_init+0x28>)
    1752:	4b09      	ldr	r3, [pc, #36]	; (1778 <TIMER_INTERFACE_init+0x2c>)
    1754:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1756:	2246      	movs	r2, #70	; 0x46
    1758:	211e      	movs	r1, #30
    175a:	4808      	ldr	r0, [pc, #32]	; (177c <TIMER_INTERFACE_init+0x30>)
    175c:	4b08      	ldr	r3, [pc, #32]	; (1780 <TIMER_INTERFACE_init+0x34>)
    175e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1760:	4b08      	ldr	r3, [pc, #32]	; (1784 <TIMER_INTERFACE_init+0x38>)
    1762:	4798      	blx	r3
    1764:	4603      	mov	r3, r0
    1766:	461a      	mov	r2, r3
    1768:	4907      	ldr	r1, [pc, #28]	; (1788 <TIMER_INTERFACE_init+0x3c>)
    176a:	4808      	ldr	r0, [pc, #32]	; (178c <TIMER_INTERFACE_init+0x40>)
    176c:	4b08      	ldr	r3, [pc, #32]	; (1790 <TIMER_INTERFACE_init+0x44>)
    176e:	4798      	blx	r3
}
    1770:	bf00      	nop
    1772:	bd80      	pop	{r7, pc}
    1774:	40000800 	.word	0x40000800
    1778:	00000913 	.word	0x00000913
    177c:	40001c00 	.word	0x40001c00
    1780:	000006cd 	.word	0x000006cd
    1784:	000080f9 	.word	0x000080f9
    1788:	42001800 	.word	0x42001800
    178c:	2000adac 	.word	0x2000adac
    1790:	0000287d 	.word	0x0000287d

00001794 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1794:	b580      	push	{r7, lr}
    1796:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1798:	4808      	ldr	r0, [pc, #32]	; (17bc <TIMER_EVENT_init+0x28>)
    179a:	4b09      	ldr	r3, [pc, #36]	; (17c0 <TIMER_EVENT_init+0x2c>)
    179c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    179e:	2246      	movs	r2, #70	; 0x46
    17a0:	2127      	movs	r1, #39	; 0x27
    17a2:	4808      	ldr	r0, [pc, #32]	; (17c4 <TIMER_EVENT_init+0x30>)
    17a4:	4b08      	ldr	r3, [pc, #32]	; (17c8 <TIMER_EVENT_init+0x34>)
    17a6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    17a8:	4b08      	ldr	r3, [pc, #32]	; (17cc <TIMER_EVENT_init+0x38>)
    17aa:	4798      	blx	r3
    17ac:	4603      	mov	r3, r0
    17ae:	461a      	mov	r2, r3
    17b0:	4907      	ldr	r1, [pc, #28]	; (17d0 <TIMER_EVENT_init+0x3c>)
    17b2:	4808      	ldr	r0, [pc, #32]	; (17d4 <TIMER_EVENT_init+0x40>)
    17b4:	4b08      	ldr	r3, [pc, #32]	; (17d8 <TIMER_EVENT_init+0x44>)
    17b6:	4798      	blx	r3
}
    17b8:	bf00      	nop
    17ba:	bd80      	pop	{r7, pc}
    17bc:	40000800 	.word	0x40000800
    17c0:	000009d3 	.word	0x000009d3
    17c4:	40001c00 	.word	0x40001c00
    17c8:	000006cd 	.word	0x000006cd
    17cc:	000080f9 	.word	0x000080f9
    17d0:	43001400 	.word	0x43001400
    17d4:	2000ad8c 	.word	0x2000ad8c
    17d8:	0000287d 	.word	0x0000287d

000017dc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    17dc:	b480      	push	{r7}
    17de:	af00      	add	r7, sp, #0
}
    17e0:	bf00      	nop
    17e2:	46bd      	mov	sp, r7
    17e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    17e8:	4770      	bx	lr
	...

000017ec <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    17f0:	4804      	ldr	r0, [pc, #16]	; (1804 <LIVE_PULSE_CLOCK_init+0x18>)
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <LIVE_PULSE_CLOCK_init+0x1c>)
    17f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17f6:	2240      	movs	r2, #64	; 0x40
    17f8:	2127      	movs	r1, #39	; 0x27
    17fa:	4804      	ldr	r0, [pc, #16]	; (180c <LIVE_PULSE_CLOCK_init+0x20>)
    17fc:	4b04      	ldr	r3, [pc, #16]	; (1810 <LIVE_PULSE_CLOCK_init+0x24>)
    17fe:	4798      	blx	r3
}
    1800:	bf00      	nop
    1802:	bd80      	pop	{r7, pc}
    1804:	40000800 	.word	0x40000800
    1808:	000009f3 	.word	0x000009f3
    180c:	40001c00 	.word	0x40001c00
    1810:	000006cd 	.word	0x000006cd

00001814 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1818:	4b06      	ldr	r3, [pc, #24]	; (1834 <LIVE_PULSE_init+0x20>)
    181a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    181c:	4b06      	ldr	r3, [pc, #24]	; (1838 <LIVE_PULSE_init+0x24>)
    181e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1820:	4b06      	ldr	r3, [pc, #24]	; (183c <LIVE_PULSE_init+0x28>)
    1822:	4798      	blx	r3
    1824:	4603      	mov	r3, r0
    1826:	461a      	mov	r2, r3
    1828:	4905      	ldr	r1, [pc, #20]	; (1840 <LIVE_PULSE_init+0x2c>)
    182a:	4806      	ldr	r0, [pc, #24]	; (1844 <LIVE_PULSE_init+0x30>)
    182c:	4b06      	ldr	r3, [pc, #24]	; (1848 <LIVE_PULSE_init+0x34>)
    182e:	4798      	blx	r3
}
    1830:	bf00      	nop
    1832:	bd80      	pop	{r7, pc}
    1834:	000017ed 	.word	0x000017ed
    1838:	000017dd 	.word	0x000017dd
    183c:	0000810d 	.word	0x0000810d
    1840:	43001800 	.word	0x43001800
    1844:	2000adec 	.word	0x2000adec
    1848:	000024f1 	.word	0x000024f1

0000184c <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    184c:	b580      	push	{r7, lr}
    184e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1850:	4804      	ldr	r0, [pc, #16]	; (1864 <TIMER_HVAC_CLOCK_init+0x18>)
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <TIMER_HVAC_CLOCK_init+0x1c>)
    1854:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1856:	2244      	movs	r2, #68	; 0x44
    1858:	2119      	movs	r1, #25
    185a:	4804      	ldr	r0, [pc, #16]	; (186c <TIMER_HVAC_CLOCK_init+0x20>)
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <TIMER_HVAC_CLOCK_init+0x24>)
    185e:	4798      	blx	r3
}
    1860:	bf00      	nop
    1862:	bd80      	pop	{r7, pc}
    1864:	40000800 	.word	0x40000800
    1868:	00000873 	.word	0x00000873
    186c:	40001c00 	.word	0x40001c00
    1870:	000006cd 	.word	0x000006cd

00001874 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1874:	b580      	push	{r7, lr}
    1876:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1878:	4b05      	ldr	r3, [pc, #20]	; (1890 <TIMER_HVAC_init+0x1c>)
    187a:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    187c:	4b05      	ldr	r3, [pc, #20]	; (1894 <TIMER_HVAC_init+0x20>)
    187e:	4798      	blx	r3
    1880:	4603      	mov	r3, r0
    1882:	461a      	mov	r2, r3
    1884:	4904      	ldr	r1, [pc, #16]	; (1898 <TIMER_HVAC_init+0x24>)
    1886:	4805      	ldr	r0, [pc, #20]	; (189c <TIMER_HVAC_init+0x28>)
    1888:	4b05      	ldr	r3, [pc, #20]	; (18a0 <TIMER_HVAC_init+0x2c>)
    188a:	4798      	blx	r3
}
    188c:	bf00      	nop
    188e:	bd80      	pop	{r7, pc}
    1890:	0000184d 	.word	0x0000184d
    1894:	000074dd 	.word	0x000074dd
    1898:	41016000 	.word	0x41016000
    189c:	2000aeb0 	.word	0x2000aeb0
    18a0:	0000287d 	.word	0x0000287d

000018a4 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    18a8:	4804      	ldr	r0, [pc, #16]	; (18bc <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    18ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ae:	2244      	movs	r2, #68	; 0x44
    18b0:	2119      	movs	r1, #25
    18b2:	4804      	ldr	r0, [pc, #16]	; (18c4 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    18b4:	4b04      	ldr	r3, [pc, #16]	; (18c8 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    18b6:	4798      	blx	r3
}
    18b8:	bf00      	nop
    18ba:	bd80      	pop	{r7, pc}
    18bc:	40000800 	.word	0x40000800
    18c0:	00000893 	.word	0x00000893
    18c4:	40001c00 	.word	0x40001c00
    18c8:	000006cd 	.word	0x000006cd

000018cc <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    18d0:	4b05      	ldr	r3, [pc, #20]	; (18e8 <TIMER_TEMPERATURES_init+0x1c>)
    18d2:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <TIMER_TEMPERATURES_init+0x20>)
    18d6:	4798      	blx	r3
    18d8:	4603      	mov	r3, r0
    18da:	461a      	mov	r2, r3
    18dc:	4904      	ldr	r1, [pc, #16]	; (18f0 <TIMER_TEMPERATURES_init+0x24>)
    18de:	4805      	ldr	r0, [pc, #20]	; (18f4 <TIMER_TEMPERATURES_init+0x28>)
    18e0:	4b05      	ldr	r3, [pc, #20]	; (18f8 <TIMER_TEMPERATURES_init+0x2c>)
    18e2:	4798      	blx	r3
}
    18e4:	bf00      	nop
    18e6:	bd80      	pop	{r7, pc}
    18e8:	000018a5 	.word	0x000018a5
    18ec:	000074dd 	.word	0x000074dd
    18f0:	41018000 	.word	0x41018000
    18f4:	2000acf8 	.word	0x2000acf8
    18f8:	0000287d 	.word	0x0000287d

000018fc <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1900:	4804      	ldr	r0, [pc, #16]	; (1914 <TIMER_CCU_CLOCK_init+0x18>)
    1902:	4b05      	ldr	r3, [pc, #20]	; (1918 <TIMER_CCU_CLOCK_init+0x1c>)
    1904:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1906:	2240      	movs	r2, #64	; 0x40
    1908:	211d      	movs	r1, #29
    190a:	4804      	ldr	r0, [pc, #16]	; (191c <TIMER_CCU_CLOCK_init+0x20>)
    190c:	4b04      	ldr	r3, [pc, #16]	; (1920 <TIMER_CCU_CLOCK_init+0x24>)
    190e:	4798      	blx	r3
}
    1910:	bf00      	nop
    1912:	bd80      	pop	{r7, pc}
    1914:	40000800 	.word	0x40000800
    1918:	000008d3 	.word	0x000008d3
    191c:	40001c00 	.word	0x40001c00
    1920:	000006cd 	.word	0x000006cd

00001924 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1924:	b580      	push	{r7, lr}
    1926:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1928:	4b05      	ldr	r3, [pc, #20]	; (1940 <TIMER_CCU_init+0x1c>)
    192a:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    192c:	4b05      	ldr	r3, [pc, #20]	; (1944 <TIMER_CCU_init+0x20>)
    192e:	4798      	blx	r3
    1930:	4603      	mov	r3, r0
    1932:	461a      	mov	r2, r3
    1934:	4904      	ldr	r1, [pc, #16]	; (1948 <TIMER_CCU_init+0x24>)
    1936:	4805      	ldr	r0, [pc, #20]	; (194c <TIMER_CCU_init+0x28>)
    1938:	4b05      	ldr	r3, [pc, #20]	; (1950 <TIMER_CCU_init+0x2c>)
    193a:	4798      	blx	r3
}
    193c:	bf00      	nop
    193e:	bd80      	pop	{r7, pc}
    1940:	000018fd 	.word	0x000018fd
    1944:	000074dd 	.word	0x000074dd
    1948:	42000c00 	.word	0x42000c00
    194c:	2000ae08 	.word	0x2000ae08
    1950:	0000287d 	.word	0x0000287d

00001954 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1954:	b580      	push	{r7, lr}
    1956:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1958:	2102      	movs	r1, #2
    195a:	2018      	movs	r0, #24
    195c:	4b0f      	ldr	r3, [pc, #60]	; (199c <CDCUSB_PORT_init+0x48>)
    195e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1960:	2100      	movs	r1, #0
    1962:	2018      	movs	r0, #24
    1964:	4b0e      	ldr	r3, [pc, #56]	; (19a0 <CDCUSB_PORT_init+0x4c>)
    1966:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1968:	2100      	movs	r1, #0
    196a:	2018      	movs	r0, #24
    196c:	4b0d      	ldr	r3, [pc, #52]	; (19a4 <CDCUSB_PORT_init+0x50>)
    196e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1970:	490d      	ldr	r1, [pc, #52]	; (19a8 <CDCUSB_PORT_init+0x54>)
    1972:	2018      	movs	r0, #24
    1974:	4b0d      	ldr	r3, [pc, #52]	; (19ac <CDCUSB_PORT_init+0x58>)
    1976:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1978:	2102      	movs	r1, #2
    197a:	2019      	movs	r0, #25
    197c:	4b07      	ldr	r3, [pc, #28]	; (199c <CDCUSB_PORT_init+0x48>)
    197e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1980:	2100      	movs	r1, #0
    1982:	2019      	movs	r0, #25
    1984:	4b06      	ldr	r3, [pc, #24]	; (19a0 <CDCUSB_PORT_init+0x4c>)
    1986:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1988:	2100      	movs	r1, #0
    198a:	2019      	movs	r0, #25
    198c:	4b05      	ldr	r3, [pc, #20]	; (19a4 <CDCUSB_PORT_init+0x50>)
    198e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1990:	4907      	ldr	r1, [pc, #28]	; (19b0 <CDCUSB_PORT_init+0x5c>)
    1992:	2019      	movs	r0, #25
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <CDCUSB_PORT_init+0x58>)
    1996:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1998:	bf00      	nop
    199a:	bd80      	pop	{r7, pc}
    199c:	00000f41 	.word	0x00000f41
    19a0:	00000f79 	.word	0x00000f79
    19a4:	00000eed 	.word	0x00000eed
    19a8:	00180007 	.word	0x00180007
    19ac:	00000f21 	.word	0x00000f21
    19b0:	00190007 	.word	0x00190007

000019b4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    19b8:	2242      	movs	r2, #66	; 0x42
    19ba:	210a      	movs	r1, #10
    19bc:	4805      	ldr	r0, [pc, #20]	; (19d4 <CDCUSB_CLOCK_init+0x20>)
    19be:	4b06      	ldr	r3, [pc, #24]	; (19d8 <CDCUSB_CLOCK_init+0x24>)
    19c0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    19c2:	4806      	ldr	r0, [pc, #24]	; (19dc <CDCUSB_CLOCK_init+0x28>)
    19c4:	4b06      	ldr	r3, [pc, #24]	; (19e0 <CDCUSB_CLOCK_init+0x2c>)
    19c6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    19c8:	4804      	ldr	r0, [pc, #16]	; (19dc <CDCUSB_CLOCK_init+0x28>)
    19ca:	4b06      	ldr	r3, [pc, #24]	; (19e4 <CDCUSB_CLOCK_init+0x30>)
    19cc:	4798      	blx	r3
}
    19ce:	bf00      	nop
    19d0:	bd80      	pop	{r7, pc}
    19d2:	bf00      	nop
    19d4:	40001c00 	.word	0x40001c00
    19d8:	000006cd 	.word	0x000006cd
    19dc:	40000800 	.word	0x40000800
    19e0:	000006f3 	.word	0x000006f3
    19e4:	000007f3 	.word	0x000007f3

000019e8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    19e8:	b580      	push	{r7, lr}
    19ea:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    19ec:	4b03      	ldr	r3, [pc, #12]	; (19fc <CDCUSB_init+0x14>)
    19ee:	4798      	blx	r3
	usb_d_init();
    19f0:	4b03      	ldr	r3, [pc, #12]	; (1a00 <CDCUSB_init+0x18>)
    19f2:	4798      	blx	r3
	CDCUSB_PORT_init();
    19f4:	4b03      	ldr	r3, [pc, #12]	; (1a04 <CDCUSB_init+0x1c>)
    19f6:	4798      	blx	r3
}
    19f8:	bf00      	nop
    19fa:	bd80      	pop	{r7, pc}
    19fc:	000019b5 	.word	0x000019b5
    1a00:	000030d9 	.word	0x000030d9
    1a04:	00001955 	.word	0x00001955

00001a08 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1a0c:	4802      	ldr	r0, [pc, #8]	; (1a18 <WATCHDOG_CLOCK_init+0x10>)
    1a0e:	4b03      	ldr	r3, [pc, #12]	; (1a1c <WATCHDOG_CLOCK_init+0x14>)
    1a10:	4798      	blx	r3
}
    1a12:	bf00      	nop
    1a14:	bd80      	pop	{r7, pc}
    1a16:	bf00      	nop
    1a18:	40000800 	.word	0x40000800
    1a1c:	00000773 	.word	0x00000773

00001a20 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1a24:	4b03      	ldr	r3, [pc, #12]	; (1a34 <WATCHDOG_init+0x14>)
    1a26:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1a28:	4903      	ldr	r1, [pc, #12]	; (1a38 <WATCHDOG_init+0x18>)
    1a2a:	4804      	ldr	r0, [pc, #16]	; (1a3c <WATCHDOG_init+0x1c>)
    1a2c:	4b04      	ldr	r3, [pc, #16]	; (1a40 <WATCHDOG_init+0x20>)
    1a2e:	4798      	blx	r3
}
    1a30:	bf00      	nop
    1a32:	bd80      	pop	{r7, pc}
    1a34:	00001a09 	.word	0x00001a09
    1a38:	40002000 	.word	0x40002000
    1a3c:	2000aef0 	.word	0x2000aef0
    1a40:	00000fc1 	.word	0x00000fc1

00001a44 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1a44:	b580      	push	{r7, lr}
    1a46:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1a48:	4904      	ldr	r1, [pc, #16]	; (1a5c <CAN_CCU_PORT_init+0x18>)
    1a4a:	202d      	movs	r0, #45	; 0x2d
    1a4c:	4b04      	ldr	r3, [pc, #16]	; (1a60 <CAN_CCU_PORT_init+0x1c>)
    1a4e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1a50:	4904      	ldr	r1, [pc, #16]	; (1a64 <CAN_CCU_PORT_init+0x20>)
    1a52:	202c      	movs	r0, #44	; 0x2c
    1a54:	4b02      	ldr	r3, [pc, #8]	; (1a60 <CAN_CCU_PORT_init+0x1c>)
    1a56:	4798      	blx	r3
}
    1a58:	bf00      	nop
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	002d0007 	.word	0x002d0007
    1a60:	00000f21 	.word	0x00000f21
    1a64:	002c0007 	.word	0x002c0007

00001a68 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1a68:	b580      	push	{r7, lr}
    1a6a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1a6c:	4807      	ldr	r0, [pc, #28]	; (1a8c <CAN_CCU_init+0x24>)
    1a6e:	4b08      	ldr	r3, [pc, #32]	; (1a90 <CAN_CCU_init+0x28>)
    1a70:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a72:	2249      	movs	r2, #73	; 0x49
    1a74:	211c      	movs	r1, #28
    1a76:	4807      	ldr	r0, [pc, #28]	; (1a94 <CAN_CCU_init+0x2c>)
    1a78:	4b07      	ldr	r3, [pc, #28]	; (1a98 <CAN_CCU_init+0x30>)
    1a7a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1a7c:	4907      	ldr	r1, [pc, #28]	; (1a9c <CAN_CCU_init+0x34>)
    1a7e:	4808      	ldr	r0, [pc, #32]	; (1aa0 <CAN_CCU_init+0x38>)
    1a80:	4b08      	ldr	r3, [pc, #32]	; (1aa4 <CAN_CCU_init+0x3c>)
    1a82:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1a84:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <CAN_CCU_init+0x40>)
    1a86:	4798      	blx	r3
}
    1a88:	bf00      	nop
    1a8a:	bd80      	pop	{r7, pc}
    1a8c:	40000800 	.word	0x40000800
    1a90:	00000733 	.word	0x00000733
    1a94:	40001c00 	.word	0x40001c00
    1a98:	000006cd 	.word	0x000006cd
    1a9c:	42000400 	.word	0x42000400
    1aa0:	2000ae48 	.word	0x2000ae48
    1aa4:	00001f79 	.word	0x00001f79
    1aa8:	00001a45 	.word	0x00001a45

00001aac <system_init>:

void system_init(void)
{
    1aac:	b580      	push	{r7, lr}
    1aae:	af00      	add	r7, sp, #0
	init_mcu();
    1ab0:	4b5f      	ldr	r3, [pc, #380]	; (1c30 <system_init+0x184>)
    1ab2:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1ab4:	2100      	movs	r1, #0
    1ab6:	2007      	movs	r0, #7
    1ab8:	4b5e      	ldr	r3, [pc, #376]	; (1c34 <system_init+0x188>)
    1aba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1abc:	2102      	movs	r1, #2
    1abe:	2007      	movs	r0, #7
    1ac0:	4b5d      	ldr	r3, [pc, #372]	; (1c38 <system_init+0x18c>)
    1ac2:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1ac4:	f04f 31ff 	mov.w	r1, #4294967295
    1ac8:	2007      	movs	r0, #7
    1aca:	4b5c      	ldr	r3, [pc, #368]	; (1c3c <system_init+0x190>)
    1acc:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1ace:	2101      	movs	r1, #1
    1ad0:	200f      	movs	r0, #15
    1ad2:	4b58      	ldr	r3, [pc, #352]	; (1c34 <system_init+0x188>)
    1ad4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1ad6:	2102      	movs	r1, #2
    1ad8:	200f      	movs	r0, #15
    1ada:	4b57      	ldr	r3, [pc, #348]	; (1c38 <system_init+0x18c>)
    1adc:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1ade:	f04f 31ff 	mov.w	r1, #4294967295
    1ae2:	200f      	movs	r0, #15
    1ae4:	4b55      	ldr	r3, [pc, #340]	; (1c3c <system_init+0x190>)
    1ae6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1ae8:	2101      	movs	r1, #1
    1aea:	2013      	movs	r0, #19
    1aec:	4b51      	ldr	r3, [pc, #324]	; (1c34 <system_init+0x188>)
    1aee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1af0:	2102      	movs	r1, #2
    1af2:	2013      	movs	r0, #19
    1af4:	4b50      	ldr	r3, [pc, #320]	; (1c38 <system_init+0x18c>)
    1af6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1af8:	f04f 31ff 	mov.w	r1, #4294967295
    1afc:	2013      	movs	r0, #19
    1afe:	4b4f      	ldr	r3, [pc, #316]	; (1c3c <system_init+0x190>)
    1b00:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1b02:	2101      	movs	r1, #1
    1b04:	201b      	movs	r0, #27
    1b06:	4b4b      	ldr	r3, [pc, #300]	; (1c34 <system_init+0x188>)
    1b08:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1b0a:	2102      	movs	r1, #2
    1b0c:	201b      	movs	r0, #27
    1b0e:	4b4a      	ldr	r3, [pc, #296]	; (1c38 <system_init+0x18c>)
    1b10:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1b12:	f04f 31ff 	mov.w	r1, #4294967295
    1b16:	201b      	movs	r0, #27
    1b18:	4b48      	ldr	r3, [pc, #288]	; (1c3c <system_init+0x190>)
    1b1a:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1b1c:	2101      	movs	r1, #1
    1b1e:	2027      	movs	r0, #39	; 0x27
    1b20:	4b44      	ldr	r3, [pc, #272]	; (1c34 <system_init+0x188>)
    1b22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1b24:	2102      	movs	r1, #2
    1b26:	2027      	movs	r0, #39	; 0x27
    1b28:	4b43      	ldr	r3, [pc, #268]	; (1c38 <system_init+0x18c>)
    1b2a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1b2c:	f04f 31ff 	mov.w	r1, #4294967295
    1b30:	2027      	movs	r0, #39	; 0x27
    1b32:	4b42      	ldr	r3, [pc, #264]	; (1c3c <system_init+0x190>)
    1b34:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1b36:	2101      	movs	r1, #1
    1b38:	203d      	movs	r0, #61	; 0x3d
    1b3a:	4b3e      	ldr	r3, [pc, #248]	; (1c34 <system_init+0x188>)
    1b3c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1b3e:	2102      	movs	r1, #2
    1b40:	203d      	movs	r0, #61	; 0x3d
    1b42:	4b3d      	ldr	r3, [pc, #244]	; (1c38 <system_init+0x18c>)
    1b44:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1b46:	f04f 31ff 	mov.w	r1, #4294967295
    1b4a:	203d      	movs	r0, #61	; 0x3d
    1b4c:	4b3b      	ldr	r3, [pc, #236]	; (1c3c <system_init+0x190>)
    1b4e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1b50:	2101      	movs	r1, #1
    1b52:	203f      	movs	r0, #63	; 0x3f
    1b54:	4b38      	ldr	r3, [pc, #224]	; (1c38 <system_init+0x18c>)
    1b56:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1b58:	2101      	movs	r1, #1
    1b5a:	203f      	movs	r0, #63	; 0x3f
    1b5c:	4b38      	ldr	r3, [pc, #224]	; (1c40 <system_init+0x194>)
    1b5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1b60:	f04f 31ff 	mov.w	r1, #4294967295
    1b64:	203f      	movs	r0, #63	; 0x3f
    1b66:	4b35      	ldr	r3, [pc, #212]	; (1c3c <system_init+0x190>)
    1b68:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1b6a:	2100      	movs	r1, #0
    1b6c:	204d      	movs	r0, #77	; 0x4d
    1b6e:	4b31      	ldr	r3, [pc, #196]	; (1c34 <system_init+0x188>)
    1b70:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1b72:	2102      	movs	r1, #2
    1b74:	204d      	movs	r0, #77	; 0x4d
    1b76:	4b30      	ldr	r3, [pc, #192]	; (1c38 <system_init+0x18c>)
    1b78:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1b7a:	f04f 31ff 	mov.w	r1, #4294967295
    1b7e:	204d      	movs	r0, #77	; 0x4d
    1b80:	4b2e      	ldr	r3, [pc, #184]	; (1c3c <system_init+0x190>)
    1b82:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1b84:	2101      	movs	r1, #1
    1b86:	204e      	movs	r0, #78	; 0x4e
    1b88:	4b2a      	ldr	r3, [pc, #168]	; (1c34 <system_init+0x188>)
    1b8a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1b8c:	2102      	movs	r1, #2
    1b8e:	204e      	movs	r0, #78	; 0x4e
    1b90:	4b29      	ldr	r3, [pc, #164]	; (1c38 <system_init+0x18c>)
    1b92:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1b94:	f04f 31ff 	mov.w	r1, #4294967295
    1b98:	204e      	movs	r0, #78	; 0x4e
    1b9a:	4b28      	ldr	r3, [pc, #160]	; (1c3c <system_init+0x190>)
    1b9c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1b9e:	2100      	movs	r1, #0
    1ba0:	204f      	movs	r0, #79	; 0x4f
    1ba2:	4b24      	ldr	r3, [pc, #144]	; (1c34 <system_init+0x188>)
    1ba4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1ba6:	2102      	movs	r1, #2
    1ba8:	204f      	movs	r0, #79	; 0x4f
    1baa:	4b23      	ldr	r3, [pc, #140]	; (1c38 <system_init+0x18c>)
    1bac:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1bae:	f04f 31ff 	mov.w	r1, #4294967295
    1bb2:	204f      	movs	r0, #79	; 0x4f
    1bb4:	4b21      	ldr	r3, [pc, #132]	; (1c3c <system_init+0x190>)
    1bb6:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1bb8:	2100      	movs	r1, #0
    1bba:	2052      	movs	r0, #82	; 0x52
    1bbc:	4b1d      	ldr	r3, [pc, #116]	; (1c34 <system_init+0x188>)
    1bbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1bc0:	2102      	movs	r1, #2
    1bc2:	2052      	movs	r0, #82	; 0x52
    1bc4:	4b1c      	ldr	r3, [pc, #112]	; (1c38 <system_init+0x18c>)
    1bc6:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1bc8:	f04f 31ff 	mov.w	r1, #4294967295
    1bcc:	2052      	movs	r0, #82	; 0x52
    1bce:	4b1b      	ldr	r3, [pc, #108]	; (1c3c <system_init+0x190>)
    1bd0:	4798      	blx	r3

	CRC_CALC_init();
    1bd2:	4b1c      	ldr	r3, [pc, #112]	; (1c44 <system_init+0x198>)
    1bd4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1bd6:	4b1c      	ldr	r3, [pc, #112]	; (1c48 <system_init+0x19c>)
    1bd8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1bda:	4b1c      	ldr	r3, [pc, #112]	; (1c4c <system_init+0x1a0>)
    1bdc:	4798      	blx	r3

	QSPI_N25Q256_init();
    1bde:	4b1c      	ldr	r3, [pc, #112]	; (1c50 <system_init+0x1a4>)
    1be0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1be2:	4b1c      	ldr	r3, [pc, #112]	; (1c54 <system_init+0x1a8>)
    1be4:	4798      	blx	r3

	I2C_HEATERS_init();
    1be6:	4b1c      	ldr	r3, [pc, #112]	; (1c58 <system_init+0x1ac>)
    1be8:	4798      	blx	r3

	SPI_TEMP_init();
    1bea:	4b1c      	ldr	r3, [pc, #112]	; (1c5c <system_init+0x1b0>)
    1bec:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1bee:	4b1c      	ldr	r3, [pc, #112]	; (1c60 <system_init+0x1b4>)
    1bf0:	4798      	blx	r3

	SPI_HI3593_init();
    1bf2:	4b1c      	ldr	r3, [pc, #112]	; (1c64 <system_init+0x1b8>)
    1bf4:	4798      	blx	r3

	I2C_FANS_init();
    1bf6:	4b1c      	ldr	r3, [pc, #112]	; (1c68 <system_init+0x1bc>)
    1bf8:	4798      	blx	r3

	TIMER_USB_init();
    1bfa:	4b1c      	ldr	r3, [pc, #112]	; (1c6c <system_init+0x1c0>)
    1bfc:	4798      	blx	r3
	TIMER_ARINC_init();
    1bfe:	4b1c      	ldr	r3, [pc, #112]	; (1c70 <system_init+0x1c4>)
    1c00:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1c02:	4b1c      	ldr	r3, [pc, #112]	; (1c74 <system_init+0x1c8>)
    1c04:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1c06:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <system_init+0x1cc>)
    1c08:	4798      	blx	r3
	TIMER_EVENT_init();
    1c0a:	4b1c      	ldr	r3, [pc, #112]	; (1c7c <system_init+0x1d0>)
    1c0c:	4798      	blx	r3
	LIVE_PULSE_init();
    1c0e:	4b1c      	ldr	r3, [pc, #112]	; (1c80 <system_init+0x1d4>)
    1c10:	4798      	blx	r3

	TIMER_HVAC_init();
    1c12:	4b1c      	ldr	r3, [pc, #112]	; (1c84 <system_init+0x1d8>)
    1c14:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1c16:	4b1c      	ldr	r3, [pc, #112]	; (1c88 <system_init+0x1dc>)
    1c18:	4798      	blx	r3

	TIMER_CCU_init();
    1c1a:	4b1c      	ldr	r3, [pc, #112]	; (1c8c <system_init+0x1e0>)
    1c1c:	4798      	blx	r3

	CDCUSB_init();
    1c1e:	4b1c      	ldr	r3, [pc, #112]	; (1c90 <system_init+0x1e4>)
    1c20:	4798      	blx	r3

	WATCHDOG_init();
    1c22:	4b1c      	ldr	r3, [pc, #112]	; (1c94 <system_init+0x1e8>)
    1c24:	4798      	blx	r3
	CAN_CCU_init();
    1c26:	4b1c      	ldr	r3, [pc, #112]	; (1c98 <system_init+0x1ec>)
    1c28:	4798      	blx	r3
}
    1c2a:	bf00      	nop
    1c2c:	bd80      	pop	{r7, pc}
    1c2e:	bf00      	nop
    1c30:	00000fb1 	.word	0x00000fb1
    1c34:	00000f79 	.word	0x00000f79
    1c38:	00000f41 	.word	0x00000f41
    1c3c:	00000f21 	.word	0x00000f21
    1c40:	00000eed 	.word	0x00000eed
    1c44:	00001011 	.word	0x00001011
    1c48:	0000103d 	.word	0x0000103d
    1c4c:	00001165 	.word	0x00001165
    1c50:	000012ad 	.word	0x000012ad
    1c54:	000012f1 	.word	0x000012f1
    1c58:	00001381 	.word	0x00001381
    1c5c:	0000144d 	.word	0x0000144d
    1c60:	000014e5 	.word	0x000014e5
    1c64:	000015b1 	.word	0x000015b1
    1c68:	00001649 	.word	0x00001649
    1c6c:	00001675 	.word	0x00001675
    1c70:	000016bd 	.word	0x000016bd
    1c74:	00001705 	.word	0x00001705
    1c78:	0000174d 	.word	0x0000174d
    1c7c:	00001795 	.word	0x00001795
    1c80:	00001815 	.word	0x00001815
    1c84:	00001875 	.word	0x00001875
    1c88:	000018cd 	.word	0x000018cd
    1c8c:	00001925 	.word	0x00001925
    1c90:	000019e9 	.word	0x000019e9
    1c94:	00001a21 	.word	0x00001a21
    1c98:	00001a69 	.word	0x00001a69

00001c9c <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    1c9c:	b480      	push	{r7}
    1c9e:	b083      	sub	sp, #12
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	4603      	mov	r3, r0
    1ca4:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    1ca6:	88fb      	ldrh	r3, [r7, #6]
    1ca8:	f003 0303 	and.w	r3, r3, #3
    1cac:	2b00      	cmp	r3, #0
    1cae:	d001      	beq.n	1cb4 <leap_year+0x18>
		return false;
    1cb0:	2300      	movs	r3, #0
    1cb2:	e000      	b.n	1cb6 <leap_year+0x1a>
	} else {
		return true;
    1cb4:	2301      	movs	r3, #1
	}
}
    1cb6:	4618      	mov	r0, r3
    1cb8:	370c      	adds	r7, #12
    1cba:	46bd      	mov	sp, r7
    1cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc0:	4770      	bx	lr
	...

00001cc4 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b084      	sub	sp, #16
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	460b      	mov	r3, r1
    1cce:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    1cd0:	2300      	movs	r3, #0
    1cd2:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	b29b      	uxth	r3, r3
    1cd8:	4618      	mov	r0, r3
    1cda:	4b2f      	ldr	r3, [pc, #188]	; (1d98 <get_secs_in_month+0xd4>)
    1cdc:	4798      	blx	r3
    1cde:	4603      	mov	r3, r0
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d028      	beq.n	1d36 <get_secs_in_month+0x72>
		switch (month) {
    1ce4:	78fb      	ldrb	r3, [r7, #3]
    1ce6:	3b01      	subs	r3, #1
    1ce8:	2b0b      	cmp	r3, #11
    1cea:	d84c      	bhi.n	1d86 <get_secs_in_month+0xc2>
    1cec:	a201      	add	r2, pc, #4	; (adr r2, 1cf4 <get_secs_in_month+0x30>)
    1cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1cf2:	bf00      	nop
    1cf4:	00001d25 	.word	0x00001d25
    1cf8:	00001d2b 	.word	0x00001d2b
    1cfc:	00001d25 	.word	0x00001d25
    1d00:	00001d31 	.word	0x00001d31
    1d04:	00001d25 	.word	0x00001d25
    1d08:	00001d31 	.word	0x00001d31
    1d0c:	00001d25 	.word	0x00001d25
    1d10:	00001d25 	.word	0x00001d25
    1d14:	00001d31 	.word	0x00001d31
    1d18:	00001d25 	.word	0x00001d25
    1d1c:	00001d31 	.word	0x00001d31
    1d20:	00001d25 	.word	0x00001d25
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1d24:	4b1d      	ldr	r3, [pc, #116]	; (1d9c <get_secs_in_month+0xd8>)
    1d26:	60fb      	str	r3, [r7, #12]
			break;
    1d28:	e030      	b.n	1d8c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    1d2a:	4b1d      	ldr	r3, [pc, #116]	; (1da0 <get_secs_in_month+0xdc>)
    1d2c:	60fb      	str	r3, [r7, #12]
			break;
    1d2e:	e02d      	b.n	1d8c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1d30:	4b1c      	ldr	r3, [pc, #112]	; (1da4 <get_secs_in_month+0xe0>)
    1d32:	60fb      	str	r3, [r7, #12]
			break;
    1d34:	e02a      	b.n	1d8c <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    1d36:	78fb      	ldrb	r3, [r7, #3]
    1d38:	3b01      	subs	r3, #1
    1d3a:	2b0b      	cmp	r3, #11
    1d3c:	d825      	bhi.n	1d8a <get_secs_in_month+0xc6>
    1d3e:	a201      	add	r2, pc, #4	; (adr r2, 1d44 <get_secs_in_month+0x80>)
    1d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d44:	00001d75 	.word	0x00001d75
    1d48:	00001d7b 	.word	0x00001d7b
    1d4c:	00001d75 	.word	0x00001d75
    1d50:	00001d81 	.word	0x00001d81
    1d54:	00001d75 	.word	0x00001d75
    1d58:	00001d81 	.word	0x00001d81
    1d5c:	00001d75 	.word	0x00001d75
    1d60:	00001d75 	.word	0x00001d75
    1d64:	00001d81 	.word	0x00001d81
    1d68:	00001d75 	.word	0x00001d75
    1d6c:	00001d81 	.word	0x00001d81
    1d70:	00001d75 	.word	0x00001d75
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1d74:	4b09      	ldr	r3, [pc, #36]	; (1d9c <get_secs_in_month+0xd8>)
    1d76:	60fb      	str	r3, [r7, #12]
			break;
    1d78:	e008      	b.n	1d8c <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    1d7a:	4b0b      	ldr	r3, [pc, #44]	; (1da8 <get_secs_in_month+0xe4>)
    1d7c:	60fb      	str	r3, [r7, #12]
			break;
    1d7e:	e005      	b.n	1d8c <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1d80:	4b08      	ldr	r3, [pc, #32]	; (1da4 <get_secs_in_month+0xe0>)
    1d82:	60fb      	str	r3, [r7, #12]
			break;
    1d84:	e002      	b.n	1d8c <get_secs_in_month+0xc8>
			break;
    1d86:	bf00      	nop
    1d88:	e000      	b.n	1d8c <get_secs_in_month+0xc8>
		default:
			break;
    1d8a:	bf00      	nop
		}
	}

	return sec_in_month;
    1d8c:	68fb      	ldr	r3, [r7, #12]
}
    1d8e:	4618      	mov	r0, r3
    1d90:	3710      	adds	r7, #16
    1d92:	46bd      	mov	sp, r7
    1d94:	bd80      	pop	{r7, pc}
    1d96:	bf00      	nop
    1d98:	00001c9d 	.word	0x00001c9d
    1d9c:	0028de80 	.word	0x0028de80
    1da0:	00263b80 	.word	0x00263b80
    1da4:	00278d00 	.word	0x00278d00
    1da8:	0024ea00 	.word	0x0024ea00

00001dac <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b08a      	sub	sp, #40	; 0x28
    1db0:	af00      	add	r7, sp, #0
    1db2:	60f8      	str	r0, [r7, #12]
    1db4:	60b9      	str	r1, [r7, #8]
    1db6:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    1db8:	68fb      	ldr	r3, [r7, #12]
    1dba:	699b      	ldr	r3, [r3, #24]
    1dbc:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    1dbe:	2301      	movs	r3, #1
    1dc0:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    1dc2:	2301      	movs	r3, #1
    1dc4:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    1dc6:	2300      	movs	r3, #0
    1dc8:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    1dca:	2300      	movs	r3, #0
    1dcc:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    1dce:	68bb      	ldr	r3, [r7, #8]
    1dd0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1dd2:	6a3b      	ldr	r3, [r7, #32]
    1dd4:	b29b      	uxth	r3, r3
    1dd6:	4618      	mov	r0, r3
    1dd8:	4b32      	ldr	r3, [pc, #200]	; (1ea4 <convert_timestamp_to_datetime+0xf8>)
    1dda:	4798      	blx	r3
    1ddc:	4603      	mov	r3, r0
    1dde:	2b00      	cmp	r3, #0
    1de0:	d001      	beq.n	1de6 <convert_timestamp_to_datetime+0x3a>
    1de2:	4b31      	ldr	r3, [pc, #196]	; (1ea8 <convert_timestamp_to_datetime+0xfc>)
    1de4:	e000      	b.n	1de8 <convert_timestamp_to_datetime+0x3c>
    1de6:	4b31      	ldr	r3, [pc, #196]	; (1eac <convert_timestamp_to_datetime+0x100>)
    1de8:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    1dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1dec:	69bb      	ldr	r3, [r7, #24]
    1dee:	429a      	cmp	r2, r3
    1df0:	d307      	bcc.n	1e02 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    1df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1df4:	69bb      	ldr	r3, [r7, #24]
    1df6:	1ad3      	subs	r3, r2, r3
    1df8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    1dfa:	6a3b      	ldr	r3, [r7, #32]
    1dfc:	3301      	adds	r3, #1
    1dfe:	623b      	str	r3, [r7, #32]
    1e00:	e7e7      	b.n	1dd2 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1e02:	7ffb      	ldrb	r3, [r7, #31]
    1e04:	4619      	mov	r1, r3
    1e06:	6a38      	ldr	r0, [r7, #32]
    1e08:	4b29      	ldr	r3, [pc, #164]	; (1eb0 <convert_timestamp_to_datetime+0x104>)
    1e0a:	4798      	blx	r3
    1e0c:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    1e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1e10:	697b      	ldr	r3, [r7, #20]
    1e12:	429a      	cmp	r2, r3
    1e14:	d307      	bcc.n	1e26 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    1e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1e18:	697b      	ldr	r3, [r7, #20]
    1e1a:	1ad3      	subs	r3, r2, r3
    1e1c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    1e1e:	7ffb      	ldrb	r3, [r7, #31]
    1e20:	3301      	adds	r3, #1
    1e22:	77fb      	strb	r3, [r7, #31]
    1e24:	e7ed      	b.n	1e02 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    1e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e28:	4a22      	ldr	r2, [pc, #136]	; (1eb4 <convert_timestamp_to_datetime+0x108>)
    1e2a:	4293      	cmp	r3, r2
    1e2c:	d909      	bls.n	1e42 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    1e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e30:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    1e34:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    1e38:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    1e3a:	7fbb      	ldrb	r3, [r7, #30]
    1e3c:	3301      	adds	r3, #1
    1e3e:	77bb      	strb	r3, [r7, #30]
    1e40:	e7f1      	b.n	1e26 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    1e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e44:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    1e48:	d307      	bcc.n	1e5a <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    1e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e4c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    1e50:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    1e52:	7f7b      	ldrb	r3, [r7, #29]
    1e54:	3301      	adds	r3, #1
    1e56:	777b      	strb	r3, [r7, #29]
    1e58:	e7f3      	b.n	1e42 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    1e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e5c:	2b3b      	cmp	r3, #59	; 0x3b
    1e5e:	d906      	bls.n	1e6e <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    1e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e62:	3b3c      	subs	r3, #60	; 0x3c
    1e64:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    1e66:	7f3b      	ldrb	r3, [r7, #28]
    1e68:	3301      	adds	r3, #1
    1e6a:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    1e6c:	e7f5      	b.n	1e5a <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    1e6e:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    1e70:	6a3b      	ldr	r3, [r7, #32]
    1e72:	b29a      	uxth	r2, r3
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	7ffa      	ldrb	r2, [r7, #31]
    1e7c:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	7fba      	ldrb	r2, [r7, #30]
    1e82:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	7f7a      	ldrb	r2, [r7, #29]
    1e88:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	7f3a      	ldrb	r2, [r7, #28]
    1e8e:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    1e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e92:	b2da      	uxtb	r2, r3
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    1e98:	2300      	movs	r3, #0
}
    1e9a:	4618      	mov	r0, r3
    1e9c:	3728      	adds	r7, #40	; 0x28
    1e9e:	46bd      	mov	sp, r7
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	bf00      	nop
    1ea4:	00001c9d 	.word	0x00001c9d
    1ea8:	01e28500 	.word	0x01e28500
    1eac:	01e13380 	.word	0x01e13380
    1eb0:	00001cc5 	.word	0x00001cc5
    1eb4:	0001517f 	.word	0x0001517f

00001eb8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b084      	sub	sp, #16
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
    1ec0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1ec2:	2300      	movs	r3, #0
    1ec4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	2b00      	cmp	r3, #0
    1eca:	bf14      	ite	ne
    1ecc:	2301      	movne	r3, #1
    1ece:	2300      	moveq	r3, #0
    1ed0:	b2db      	uxtb	r3, r3
    1ed2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1ed6:	4911      	ldr	r1, [pc, #68]	; (1f1c <calendar_init+0x64>)
    1ed8:	4618      	mov	r0, r3
    1eda:	4b11      	ldr	r3, [pc, #68]	; (1f20 <calendar_init+0x68>)
    1edc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	681a      	ldr	r2, [r3, #0]
    1ee2:	683b      	ldr	r3, [r7, #0]
    1ee4:	429a      	cmp	r2, r3
    1ee6:	d101      	bne.n	1eec <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1ee8:	2300      	movs	r3, #0
    1eea:	e013      	b.n	1f14 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1eec:	687b      	ldr	r3, [r7, #4]
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d002      	beq.n	1efa <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1ef4:	f06f 0311 	mvn.w	r3, #17
    1ef8:	e00c      	b.n	1f14 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	683a      	ldr	r2, [r7, #0]
    1efe:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	4618      	mov	r0, r3
    1f04:	4b07      	ldr	r3, [pc, #28]	; (1f24 <calendar_init+0x6c>)
    1f06:	4798      	blx	r3
    1f08:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1f10:	619a      	str	r2, [r3, #24]

	return ret;
    1f12:	68fb      	ldr	r3, [r7, #12]
}
    1f14:	4618      	mov	r0, r3
    1f16:	3710      	adds	r7, #16
    1f18:	46bd      	mov	sp, r7
    1f1a:	bd80      	pop	{r7, pc}
    1f1c:	00012074 	.word	0x00012074
    1f20:	00003681 	.word	0x00003681
    1f24:	00005a61 	.word	0x00005a61

00001f28 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b084      	sub	sp, #16
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	6078      	str	r0, [r7, #4]
    1f30:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	2b00      	cmp	r3, #0
    1f36:	bf14      	ite	ne
    1f38:	2301      	movne	r3, #1
    1f3a:	2300      	moveq	r3, #0
    1f3c:	b2db      	uxtb	r3, r3
    1f3e:	f240 223b 	movw	r2, #571	; 0x23b
    1f42:	4909      	ldr	r1, [pc, #36]	; (1f68 <calendar_get_date_time+0x40>)
    1f44:	4618      	mov	r0, r3
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <calendar_get_date_time+0x44>)
    1f48:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	4618      	mov	r0, r3
    1f4e:	4b08      	ldr	r3, [pc, #32]	; (1f70 <calendar_get_date_time+0x48>)
    1f50:	4798      	blx	r3
    1f52:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    1f54:	683a      	ldr	r2, [r7, #0]
    1f56:	68f9      	ldr	r1, [r7, #12]
    1f58:	6878      	ldr	r0, [r7, #4]
    1f5a:	4b06      	ldr	r3, [pc, #24]	; (1f74 <calendar_get_date_time+0x4c>)
    1f5c:	4798      	blx	r3

	return ERR_NONE;
    1f5e:	2300      	movs	r3, #0
}
    1f60:	4618      	mov	r0, r3
    1f62:	3710      	adds	r7, #16
    1f64:	46bd      	mov	sp, r7
    1f66:	bd80      	pop	{r7, pc}
    1f68:	00012074 	.word	0x00012074
    1f6c:	00003681 	.word	0x00003681
    1f70:	00005b19 	.word	0x00005b19
    1f74:	00001dad 	.word	0x00001dad

00001f78 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b084      	sub	sp, #16
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
    1f80:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	2b00      	cmp	r3, #0
    1f86:	d004      	beq.n	1f92 <can_async_init+0x1a>
    1f88:	683b      	ldr	r3, [r7, #0]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d001      	beq.n	1f92 <can_async_init+0x1a>
    1f8e:	2301      	movs	r3, #1
    1f90:	e000      	b.n	1f94 <can_async_init+0x1c>
    1f92:	2300      	movs	r3, #0
    1f94:	f003 0301 	and.w	r3, r3, #1
    1f98:	b2db      	uxtb	r3, r3
    1f9a:	2241      	movs	r2, #65	; 0x41
    1f9c:	490e      	ldr	r1, [pc, #56]	; (1fd8 <can_async_init+0x60>)
    1f9e:	4618      	mov	r0, r3
    1fa0:	4b0e      	ldr	r3, [pc, #56]	; (1fdc <can_async_init+0x64>)
    1fa2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	6839      	ldr	r1, [r7, #0]
    1fa8:	4618      	mov	r0, r3
    1faa:	4b0d      	ldr	r3, [pc, #52]	; (1fe0 <can_async_init+0x68>)
    1fac:	4798      	blx	r3
    1fae:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1fb0:	68fb      	ldr	r3, [r7, #12]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d001      	beq.n	1fba <can_async_init+0x42>
		return rc;
    1fb6:	68fb      	ldr	r3, [r7, #12]
    1fb8:	e009      	b.n	1fce <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	4a09      	ldr	r2, [pc, #36]	; (1fe4 <can_async_init+0x6c>)
    1fbe:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	4a09      	ldr	r2, [pc, #36]	; (1fe8 <can_async_init+0x70>)
    1fc4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	4a08      	ldr	r2, [pc, #32]	; (1fec <can_async_init+0x74>)
    1fca:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1fcc:	2300      	movs	r3, #0
}
    1fce:	4618      	mov	r0, r3
    1fd0:	3710      	adds	r7, #16
    1fd2:	46bd      	mov	sp, r7
    1fd4:	bd80      	pop	{r7, pc}
    1fd6:	bf00      	nop
    1fd8:	00012090 	.word	0x00012090
    1fdc:	00003681 	.word	0x00003681
    1fe0:	00003bdd 	.word	0x00003bdd
    1fe4:	00001ff1 	.word	0x00001ff1
    1fe8:	00002015 	.word	0x00002015
    1fec:	00002039 	.word	0x00002039

00001ff0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	b084      	sub	sp, #16
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1ffc:	68fb      	ldr	r3, [r7, #12]
    1ffe:	69db      	ldr	r3, [r3, #28]
    2000:	2b00      	cmp	r3, #0
    2002:	d003      	beq.n	200c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2004:	68fb      	ldr	r3, [r7, #12]
    2006:	69db      	ldr	r3, [r3, #28]
    2008:	68f8      	ldr	r0, [r7, #12]
    200a:	4798      	blx	r3
	}
}
    200c:	bf00      	nop
    200e:	3710      	adds	r7, #16
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}

00002014 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2014:	b580      	push	{r7, lr}
    2016:	b084      	sub	sp, #16
    2018:	af00      	add	r7, sp, #0
    201a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	6a1b      	ldr	r3, [r3, #32]
    2024:	2b00      	cmp	r3, #0
    2026:	d003      	beq.n	2030 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2028:	68fb      	ldr	r3, [r7, #12]
    202a:	6a1b      	ldr	r3, [r3, #32]
    202c:	68f8      	ldr	r0, [r7, #12]
    202e:	4798      	blx	r3
	}
}
    2030:	bf00      	nop
    2032:	3710      	adds	r7, #16
    2034:	46bd      	mov	sp, r7
    2036:	bd80      	pop	{r7, pc}

00002038 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2038:	b580      	push	{r7, lr}
    203a:	b084      	sub	sp, #16
    203c:	af00      	add	r7, sp, #0
    203e:	6078      	str	r0, [r7, #4]
    2040:	460b      	mov	r3, r1
    2042:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2048:	68fb      	ldr	r3, [r7, #12]
    204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    204c:	2b00      	cmp	r3, #0
    204e:	d005      	beq.n	205c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2050:	68fb      	ldr	r3, [r7, #12]
    2052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2054:	78fa      	ldrb	r2, [r7, #3]
    2056:	4611      	mov	r1, r2
    2058:	68f8      	ldr	r0, [r7, #12]
    205a:	4798      	blx	r3
	}
}
    205c:	bf00      	nop
    205e:	3710      	adds	r7, #16
    2060:	46bd      	mov	sp, r7
    2062:	bd80      	pop	{r7, pc}

00002064 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2064:	b580      	push	{r7, lr}
    2066:	b082      	sub	sp, #8
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
    206c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d004      	beq.n	207e <crc_sync_init+0x1a>
    2074:	683b      	ldr	r3, [r7, #0]
    2076:	2b00      	cmp	r3, #0
    2078:	d001      	beq.n	207e <crc_sync_init+0x1a>
    207a:	2301      	movs	r3, #1
    207c:	e000      	b.n	2080 <crc_sync_init+0x1c>
    207e:	2300      	movs	r3, #0
    2080:	f003 0301 	and.w	r3, r3, #1
    2084:	b2db      	uxtb	r3, r3
    2086:	222b      	movs	r2, #43	; 0x2b
    2088:	4906      	ldr	r1, [pc, #24]	; (20a4 <crc_sync_init+0x40>)
    208a:	4618      	mov	r0, r3
    208c:	4b06      	ldr	r3, [pc, #24]	; (20a8 <crc_sync_init+0x44>)
    208e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	6839      	ldr	r1, [r7, #0]
    2094:	4618      	mov	r0, r3
    2096:	4b05      	ldr	r3, [pc, #20]	; (20ac <crc_sync_init+0x48>)
    2098:	4798      	blx	r3
    209a:	4603      	mov	r3, r0
}
    209c:	4618      	mov	r0, r3
    209e:	3708      	adds	r7, #8
    20a0:	46bd      	mov	sp, r7
    20a2:	bd80      	pop	{r7, pc}
    20a4:	000120ac 	.word	0x000120ac
    20a8:	00003681 	.word	0x00003681
    20ac:	000042e1 	.word	0x000042e1

000020b0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    20b0:	b590      	push	{r4, r7, lr}
    20b2:	b083      	sub	sp, #12
    20b4:	af00      	add	r7, sp, #0
    20b6:	4603      	mov	r3, r0
    20b8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    20ba:	4b07      	ldr	r3, [pc, #28]	; (20d8 <delay_us+0x28>)
    20bc:	681c      	ldr	r4, [r3, #0]
    20be:	88fb      	ldrh	r3, [r7, #6]
    20c0:	4618      	mov	r0, r3
    20c2:	4b06      	ldr	r3, [pc, #24]	; (20dc <delay_us+0x2c>)
    20c4:	4798      	blx	r3
    20c6:	4603      	mov	r3, r0
    20c8:	4619      	mov	r1, r3
    20ca:	4620      	mov	r0, r4
    20cc:	4b04      	ldr	r3, [pc, #16]	; (20e0 <delay_us+0x30>)
    20ce:	4798      	blx	r3
}
    20d0:	bf00      	nop
    20d2:	370c      	adds	r7, #12
    20d4:	46bd      	mov	sp, r7
    20d6:	bd90      	pop	{r4, r7, pc}
    20d8:	20000a44 	.word	0x20000a44
    20dc:	00004031 	.word	0x00004031
    20e0:	000041c9 	.word	0x000041c9

000020e4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    20e4:	b590      	push	{r4, r7, lr}
    20e6:	b083      	sub	sp, #12
    20e8:	af00      	add	r7, sp, #0
    20ea:	4603      	mov	r3, r0
    20ec:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    20ee:	4b07      	ldr	r3, [pc, #28]	; (210c <delay_ms+0x28>)
    20f0:	681c      	ldr	r4, [r3, #0]
    20f2:	88fb      	ldrh	r3, [r7, #6]
    20f4:	4618      	mov	r0, r3
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <delay_ms+0x2c>)
    20f8:	4798      	blx	r3
    20fa:	4603      	mov	r3, r0
    20fc:	4619      	mov	r1, r3
    20fe:	4620      	mov	r0, r4
    2100:	4b04      	ldr	r3, [pc, #16]	; (2114 <delay_ms+0x30>)
    2102:	4798      	blx	r3
}
    2104:	bf00      	nop
    2106:	370c      	adds	r7, #12
    2108:	46bd      	mov	sp, r7
    210a:	bd90      	pop	{r4, r7, pc}
    210c:	20000a44 	.word	0x20000a44
    2110:	0000419d 	.word	0x0000419d
    2114:	000041c9 	.word	0x000041c9

00002118 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2118:	b580      	push	{r7, lr}
    211a:	af00      	add	r7, sp, #0
	return _event_system_init();
    211c:	4b02      	ldr	r3, [pc, #8]	; (2128 <event_system_init+0x10>)
    211e:	4798      	blx	r3
    2120:	4603      	mov	r3, r0
}
    2122:	4618      	mov	r0, r3
    2124:	bd80      	pop	{r7, pc}
    2126:	bf00      	nop
    2128:	00004a9d 	.word	0x00004a9d

0000212c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    212c:	b580      	push	{r7, lr}
    212e:	b082      	sub	sp, #8
    2130:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2132:	2300      	movs	r3, #0
    2134:	80fb      	strh	r3, [r7, #6]
    2136:	e00e      	b.n	2156 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2138:	88fb      	ldrh	r3, [r7, #6]
    213a:	4a0c      	ldr	r2, [pc, #48]	; (216c <ext_irq_init+0x40>)
    213c:	00db      	lsls	r3, r3, #3
    213e:	4413      	add	r3, r2
    2140:	f04f 32ff 	mov.w	r2, #4294967295
    2144:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2146:	88fb      	ldrh	r3, [r7, #6]
    2148:	4a08      	ldr	r2, [pc, #32]	; (216c <ext_irq_init+0x40>)
    214a:	2100      	movs	r1, #0
    214c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2150:	88fb      	ldrh	r3, [r7, #6]
    2152:	3301      	adds	r3, #1
    2154:	80fb      	strh	r3, [r7, #6]
    2156:	88fb      	ldrh	r3, [r7, #6]
    2158:	2b08      	cmp	r3, #8
    215a:	d9ed      	bls.n	2138 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    215c:	4804      	ldr	r0, [pc, #16]	; (2170 <ext_irq_init+0x44>)
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <ext_irq_init+0x48>)
    2160:	4798      	blx	r3
    2162:	4603      	mov	r3, r0
}
    2164:	4618      	mov	r0, r3
    2166:	3708      	adds	r7, #8
    2168:	46bd      	mov	sp, r7
    216a:	bd80      	pop	{r7, pc}
    216c:	20000a48 	.word	0x20000a48
    2170:	000022d1 	.word	0x000022d1
    2174:	00004621 	.word	0x00004621

00002178 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2178:	b580      	push	{r7, lr}
    217a:	b086      	sub	sp, #24
    217c:	af00      	add	r7, sp, #0
    217e:	6078      	str	r0, [r7, #4]
    2180:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2182:	2300      	movs	r3, #0
    2184:	75fb      	strb	r3, [r7, #23]
    2186:	2300      	movs	r3, #0
    2188:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    218a:	2300      	movs	r3, #0
    218c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    218e:	e012      	b.n	21b6 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2190:	7dfb      	ldrb	r3, [r7, #23]
    2192:	4a4d      	ldr	r2, [pc, #308]	; (22c8 <ext_irq_register+0x150>)
    2194:	00db      	lsls	r3, r3, #3
    2196:	4413      	add	r3, r2
    2198:	685a      	ldr	r2, [r3, #4]
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	429a      	cmp	r2, r3
    219e:	d107      	bne.n	21b0 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    21a0:	7dfb      	ldrb	r3, [r7, #23]
    21a2:	4949      	ldr	r1, [pc, #292]	; (22c8 <ext_irq_register+0x150>)
    21a4:	683a      	ldr	r2, [r7, #0]
    21a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    21aa:	2301      	movs	r3, #1
    21ac:	757b      	strb	r3, [r7, #21]
			break;
    21ae:	e005      	b.n	21bc <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    21b0:	7dfb      	ldrb	r3, [r7, #23]
    21b2:	3301      	adds	r3, #1
    21b4:	75fb      	strb	r3, [r7, #23]
    21b6:	7dfb      	ldrb	r3, [r7, #23]
    21b8:	2b08      	cmp	r3, #8
    21ba:	d9e9      	bls.n	2190 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    21bc:	683b      	ldr	r3, [r7, #0]
    21be:	2b00      	cmp	r3, #0
    21c0:	d10e      	bne.n	21e0 <ext_irq_register+0x68>
		if (!found) {
    21c2:	7d7b      	ldrb	r3, [r7, #21]
    21c4:	f083 0301 	eor.w	r3, r3, #1
    21c8:	b2db      	uxtb	r3, r3
    21ca:	2b00      	cmp	r3, #0
    21cc:	d002      	beq.n	21d4 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    21ce:	f06f 030c 	mvn.w	r3, #12
    21d2:	e074      	b.n	22be <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    21d4:	2100      	movs	r1, #0
    21d6:	6878      	ldr	r0, [r7, #4]
    21d8:	4b3c      	ldr	r3, [pc, #240]	; (22cc <ext_irq_register+0x154>)
    21da:	4798      	blx	r3
    21dc:	4603      	mov	r3, r0
    21de:	e06e      	b.n	22be <ext_irq_register+0x146>
	}

	if (!found) {
    21e0:	7d7b      	ldrb	r3, [r7, #21]
    21e2:	f083 0301 	eor.w	r3, r3, #1
    21e6:	b2db      	uxtb	r3, r3
    21e8:	2b00      	cmp	r3, #0
    21ea:	d05a      	beq.n	22a2 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    21ec:	2300      	movs	r3, #0
    21ee:	75fb      	strb	r3, [r7, #23]
    21f0:	e016      	b.n	2220 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    21f2:	7dfb      	ldrb	r3, [r7, #23]
    21f4:	4a34      	ldr	r2, [pc, #208]	; (22c8 <ext_irq_register+0x150>)
    21f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d10d      	bne.n	221a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    21fe:	7dfb      	ldrb	r3, [r7, #23]
    2200:	4931      	ldr	r1, [pc, #196]	; (22c8 <ext_irq_register+0x150>)
    2202:	683a      	ldr	r2, [r7, #0]
    2204:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2208:	7dfb      	ldrb	r3, [r7, #23]
    220a:	4a2f      	ldr	r2, [pc, #188]	; (22c8 <ext_irq_register+0x150>)
    220c:	00db      	lsls	r3, r3, #3
    220e:	4413      	add	r3, r2
    2210:	687a      	ldr	r2, [r7, #4]
    2212:	605a      	str	r2, [r3, #4]
				found           = true;
    2214:	2301      	movs	r3, #1
    2216:	757b      	strb	r3, [r7, #21]
				break;
    2218:	e005      	b.n	2226 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    221a:	7dfb      	ldrb	r3, [r7, #23]
    221c:	3301      	adds	r3, #1
    221e:	75fb      	strb	r3, [r7, #23]
    2220:	7dfb      	ldrb	r3, [r7, #23]
    2222:	2b08      	cmp	r3, #8
    2224:	d9e5      	bls.n	21f2 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2226:	e036      	b.n	2296 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2228:	7dfb      	ldrb	r3, [r7, #23]
    222a:	4a27      	ldr	r2, [pc, #156]	; (22c8 <ext_irq_register+0x150>)
    222c:	00db      	lsls	r3, r3, #3
    222e:	4413      	add	r3, r2
    2230:	685a      	ldr	r2, [r3, #4]
    2232:	7dbb      	ldrb	r3, [r7, #22]
    2234:	4924      	ldr	r1, [pc, #144]	; (22c8 <ext_irq_register+0x150>)
    2236:	00db      	lsls	r3, r3, #3
    2238:	440b      	add	r3, r1
    223a:	685b      	ldr	r3, [r3, #4]
    223c:	429a      	cmp	r2, r3
    223e:	d227      	bcs.n	2290 <ext_irq_register+0x118>
    2240:	7dbb      	ldrb	r3, [r7, #22]
    2242:	4a21      	ldr	r2, [pc, #132]	; (22c8 <ext_irq_register+0x150>)
    2244:	00db      	lsls	r3, r3, #3
    2246:	4413      	add	r3, r2
    2248:	685b      	ldr	r3, [r3, #4]
    224a:	f1b3 3fff 	cmp.w	r3, #4294967295
    224e:	d01f      	beq.n	2290 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2250:	7dbb      	ldrb	r3, [r7, #22]
    2252:	491d      	ldr	r1, [pc, #116]	; (22c8 <ext_irq_register+0x150>)
    2254:	f107 020c 	add.w	r2, r7, #12
    2258:	00db      	lsls	r3, r3, #3
    225a:	440b      	add	r3, r1
    225c:	e893 0003 	ldmia.w	r3, {r0, r1}
    2260:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2264:	7dbb      	ldrb	r3, [r7, #22]
    2266:	7dfa      	ldrb	r2, [r7, #23]
    2268:	4817      	ldr	r0, [pc, #92]	; (22c8 <ext_irq_register+0x150>)
    226a:	4917      	ldr	r1, [pc, #92]	; (22c8 <ext_irq_register+0x150>)
    226c:	00db      	lsls	r3, r3, #3
    226e:	4403      	add	r3, r0
    2270:	00d2      	lsls	r2, r2, #3
    2272:	440a      	add	r2, r1
    2274:	e892 0003 	ldmia.w	r2, {r0, r1}
    2278:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    227c:	7dfb      	ldrb	r3, [r7, #23]
    227e:	4a12      	ldr	r2, [pc, #72]	; (22c8 <ext_irq_register+0x150>)
    2280:	00db      	lsls	r3, r3, #3
    2282:	4413      	add	r3, r2
    2284:	f107 020c 	add.w	r2, r7, #12
    2288:	e892 0003 	ldmia.w	r2, {r0, r1}
    228c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2290:	7dbb      	ldrb	r3, [r7, #22]
    2292:	3301      	adds	r3, #1
    2294:	75bb      	strb	r3, [r7, #22]
    2296:	7dbb      	ldrb	r3, [r7, #22]
    2298:	2b08      	cmp	r3, #8
    229a:	d802      	bhi.n	22a2 <ext_irq_register+0x12a>
    229c:	7dfb      	ldrb	r3, [r7, #23]
    229e:	2b08      	cmp	r3, #8
    22a0:	d9c2      	bls.n	2228 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    22a2:	7d7b      	ldrb	r3, [r7, #21]
    22a4:	f083 0301 	eor.w	r3, r3, #1
    22a8:	b2db      	uxtb	r3, r3
    22aa:	2b00      	cmp	r3, #0
    22ac:	d002      	beq.n	22b4 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    22ae:	f06f 030c 	mvn.w	r3, #12
    22b2:	e004      	b.n	22be <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    22b4:	2101      	movs	r1, #1
    22b6:	6878      	ldr	r0, [r7, #4]
    22b8:	4b04      	ldr	r3, [pc, #16]	; (22cc <ext_irq_register+0x154>)
    22ba:	4798      	blx	r3
    22bc:	4603      	mov	r3, r0
}
    22be:	4618      	mov	r0, r3
    22c0:	3718      	adds	r7, #24
    22c2:	46bd      	mov	sp, r7
    22c4:	bd80      	pop	{r7, pc}
    22c6:	bf00      	nop
    22c8:	20000a48 	.word	0x20000a48
    22cc:	000047b5 	.word	0x000047b5

000022d0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b084      	sub	sp, #16
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    22d8:	2300      	movs	r3, #0
    22da:	73fb      	strb	r3, [r7, #15]
    22dc:	2309      	movs	r3, #9
    22de:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    22e0:	e02a      	b.n	2338 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    22e2:	7bba      	ldrb	r2, [r7, #14]
    22e4:	7bfb      	ldrb	r3, [r7, #15]
    22e6:	4413      	add	r3, r2
    22e8:	105b      	asrs	r3, r3, #1
    22ea:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    22ec:	7b7b      	ldrb	r3, [r7, #13]
    22ee:	2b08      	cmp	r3, #8
    22f0:	d827      	bhi.n	2342 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    22f2:	7b7b      	ldrb	r3, [r7, #13]
    22f4:	4a16      	ldr	r2, [pc, #88]	; (2350 <process_ext_irq+0x80>)
    22f6:	00db      	lsls	r3, r3, #3
    22f8:	4413      	add	r3, r2
    22fa:	685a      	ldr	r2, [r3, #4]
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	429a      	cmp	r2, r3
    2300:	d10b      	bne.n	231a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2302:	7b7b      	ldrb	r3, [r7, #13]
    2304:	4a12      	ldr	r2, [pc, #72]	; (2350 <process_ext_irq+0x80>)
    2306:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    230a:	2b00      	cmp	r3, #0
    230c:	d01b      	beq.n	2346 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    230e:	7b7b      	ldrb	r3, [r7, #13]
    2310:	4a0f      	ldr	r2, [pc, #60]	; (2350 <process_ext_irq+0x80>)
    2312:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2316:	4798      	blx	r3
			}
			return;
    2318:	e015      	b.n	2346 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    231a:	7b7b      	ldrb	r3, [r7, #13]
    231c:	4a0c      	ldr	r2, [pc, #48]	; (2350 <process_ext_irq+0x80>)
    231e:	00db      	lsls	r3, r3, #3
    2320:	4413      	add	r3, r2
    2322:	685a      	ldr	r2, [r3, #4]
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	429a      	cmp	r2, r3
    2328:	d203      	bcs.n	2332 <process_ext_irq+0x62>
			lower = middle + 1;
    232a:	7b7b      	ldrb	r3, [r7, #13]
    232c:	3301      	adds	r3, #1
    232e:	73fb      	strb	r3, [r7, #15]
    2330:	e002      	b.n	2338 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2332:	7b7b      	ldrb	r3, [r7, #13]
    2334:	3b01      	subs	r3, #1
    2336:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2338:	7bba      	ldrb	r2, [r7, #14]
    233a:	7bfb      	ldrb	r3, [r7, #15]
    233c:	429a      	cmp	r2, r3
    233e:	d2d0      	bcs.n	22e2 <process_ext_irq+0x12>
    2340:	e002      	b.n	2348 <process_ext_irq+0x78>
			return;
    2342:	bf00      	nop
    2344:	e000      	b.n	2348 <process_ext_irq+0x78>
			return;
    2346:	bf00      	nop
		}
	}
}
    2348:	3710      	adds	r7, #16
    234a:	46bd      	mov	sp, r7
    234c:	bd80      	pop	{r7, pc}
    234e:	bf00      	nop
    2350:	20000a48 	.word	0x20000a48

00002354 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2354:	b580      	push	{r7, lr}
    2356:	b08a      	sub	sp, #40	; 0x28
    2358:	af00      	add	r7, sp, #0
    235a:	60f8      	str	r0, [r7, #12]
    235c:	60b9      	str	r1, [r7, #8]
    235e:	4613      	mov	r3, r2
    2360:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	3b14      	subs	r3, #20
    2366:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    236a:	8b9b      	ldrh	r3, [r3, #28]
    236c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    236e:	88fb      	ldrh	r3, [r7, #6]
    2370:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2372:	f248 0301 	movw	r3, #32769	; 0x8001
    2376:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2378:	68bb      	ldr	r3, [r7, #8]
    237a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    237e:	f107 0214 	add.w	r2, r7, #20
    2382:	4611      	mov	r1, r2
    2384:	4618      	mov	r0, r3
    2386:	4b06      	ldr	r3, [pc, #24]	; (23a0 <i2c_m_sync_read+0x4c>)
    2388:	4798      	blx	r3
    238a:	6238      	str	r0, [r7, #32]

	if (ret) {
    238c:	6a3b      	ldr	r3, [r7, #32]
    238e:	2b00      	cmp	r3, #0
    2390:	d001      	beq.n	2396 <i2c_m_sync_read+0x42>
		return ret;
    2392:	6a3b      	ldr	r3, [r7, #32]
    2394:	e000      	b.n	2398 <i2c_m_sync_read+0x44>
	}

	return n;
    2396:	88fb      	ldrh	r3, [r7, #6]
}
    2398:	4618      	mov	r0, r3
    239a:	3728      	adds	r7, #40	; 0x28
    239c:	46bd      	mov	sp, r7
    239e:	bd80      	pop	{r7, pc}
    23a0:	00006769 	.word	0x00006769

000023a4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    23a4:	b580      	push	{r7, lr}
    23a6:	b08a      	sub	sp, #40	; 0x28
    23a8:	af00      	add	r7, sp, #0
    23aa:	60f8      	str	r0, [r7, #12]
    23ac:	60b9      	str	r1, [r7, #8]
    23ae:	4613      	mov	r3, r2
    23b0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    23b2:	68fb      	ldr	r3, [r7, #12]
    23b4:	3b14      	subs	r3, #20
    23b6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    23b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23ba:	8b9b      	ldrh	r3, [r3, #28]
    23bc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    23be:	88fb      	ldrh	r3, [r7, #6]
    23c0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    23c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    23c6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    23c8:	68bb      	ldr	r3, [r7, #8]
    23ca:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    23cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23ce:	f107 0214 	add.w	r2, r7, #20
    23d2:	4611      	mov	r1, r2
    23d4:	4618      	mov	r0, r3
    23d6:	4b06      	ldr	r3, [pc, #24]	; (23f0 <i2c_m_sync_write+0x4c>)
    23d8:	4798      	blx	r3
    23da:	6238      	str	r0, [r7, #32]

	if (ret) {
    23dc:	6a3b      	ldr	r3, [r7, #32]
    23de:	2b00      	cmp	r3, #0
    23e0:	d001      	beq.n	23e6 <i2c_m_sync_write+0x42>
		return ret;
    23e2:	6a3b      	ldr	r3, [r7, #32]
    23e4:	e000      	b.n	23e8 <i2c_m_sync_write+0x44>
	}

	return n;
    23e6:	88fb      	ldrh	r3, [r7, #6]
}
    23e8:	4618      	mov	r0, r3
    23ea:	3728      	adds	r7, #40	; 0x28
    23ec:	46bd      	mov	sp, r7
    23ee:	bd80      	pop	{r7, pc}
    23f0:	00006769 	.word	0x00006769

000023f4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	b084      	sub	sp, #16
    23f8:	af00      	add	r7, sp, #0
    23fa:	6078      	str	r0, [r7, #4]
    23fc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	2b00      	cmp	r3, #0
    2402:	bf14      	ite	ne
    2404:	2301      	movne	r3, #1
    2406:	2300      	moveq	r3, #0
    2408:	b2db      	uxtb	r3, r3
    240a:	225e      	movs	r2, #94	; 0x5e
    240c:	490c      	ldr	r1, [pc, #48]	; (2440 <i2c_m_sync_init+0x4c>)
    240e:	4618      	mov	r0, r3
    2410:	4b0c      	ldr	r3, [pc, #48]	; (2444 <i2c_m_sync_init+0x50>)
    2412:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	6839      	ldr	r1, [r7, #0]
    2418:	4618      	mov	r0, r3
    241a:	4b0b      	ldr	r3, [pc, #44]	; (2448 <i2c_m_sync_init+0x54>)
    241c:	4798      	blx	r3
    241e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2420:	68fb      	ldr	r3, [r7, #12]
    2422:	2b00      	cmp	r3, #0
    2424:	d001      	beq.n	242a <i2c_m_sync_init+0x36>
		return init_status;
    2426:	68fb      	ldr	r3, [r7, #12]
    2428:	e006      	b.n	2438 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	4a07      	ldr	r2, [pc, #28]	; (244c <i2c_m_sync_init+0x58>)
    242e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	4a07      	ldr	r2, [pc, #28]	; (2450 <i2c_m_sync_init+0x5c>)
    2434:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2436:	2300      	movs	r3, #0
}
    2438:	4618      	mov	r0, r3
    243a:	3710      	adds	r7, #16
    243c:	46bd      	mov	sp, r7
    243e:	bd80      	pop	{r7, pc}
    2440:	000120c8 	.word	0x000120c8
    2444:	00003681 	.word	0x00003681
    2448:	00006509 	.word	0x00006509
    244c:	00002355 	.word	0x00002355
    2450:	000023a5 	.word	0x000023a5

00002454 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	4618      	mov	r0, r3
    2460:	4b03      	ldr	r3, [pc, #12]	; (2470 <i2c_m_sync_enable+0x1c>)
    2462:	4798      	blx	r3
    2464:	4603      	mov	r3, r0
}
    2466:	4618      	mov	r0, r3
    2468:	3708      	adds	r7, #8
    246a:	46bd      	mov	sp, r7
    246c:	bd80      	pop	{r7, pc}
    246e:	bf00      	nop
    2470:	00006551 	.word	0x00006551

00002474 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    2474:	b580      	push	{r7, lr}
    2476:	b082      	sub	sp, #8
    2478:	af00      	add	r7, sp, #0
    247a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	4618      	mov	r0, r3
    2480:	4b03      	ldr	r3, [pc, #12]	; (2490 <i2c_m_sync_disable+0x1c>)
    2482:	4798      	blx	r3
    2484:	4603      	mov	r3, r0
}
    2486:	4618      	mov	r0, r3
    2488:	3708      	adds	r7, #8
    248a:	46bd      	mov	sp, r7
    248c:	bd80      	pop	{r7, pc}
    248e:	bf00      	nop
    2490:	00006591 	.word	0x00006591

00002494 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2494:	b480      	push	{r7}
    2496:	b085      	sub	sp, #20
    2498:	af00      	add	r7, sp, #0
    249a:	60f8      	str	r0, [r7, #12]
    249c:	460b      	mov	r3, r1
    249e:	607a      	str	r2, [r7, #4]
    24a0:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    24a2:	897b      	ldrh	r3, [r7, #10]
    24a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    24a8:	b21a      	sxth	r2, r3
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	b21b      	sxth	r3, r3
    24ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    24b2:	b21b      	sxth	r3, r3
    24b4:	4313      	orrs	r3, r2
    24b6:	b21b      	sxth	r3, r3
    24b8:	b29a      	uxth	r2, r3
    24ba:	68fb      	ldr	r3, [r7, #12]
    24bc:	839a      	strh	r2, [r3, #28]
    24be:	68fb      	ldr	r3, [r7, #12]
    24c0:	8b9b      	ldrh	r3, [r3, #28]
}
    24c2:	4618      	mov	r0, r3
    24c4:	3714      	adds	r7, #20
    24c6:	46bd      	mov	sp, r7
    24c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    24cc:	4770      	bx	lr

000024ce <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    24ce:	b480      	push	{r7}
    24d0:	b083      	sub	sp, #12
    24d2:	af00      	add	r7, sp, #0
    24d4:	6078      	str	r0, [r7, #4]
    24d6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	f103 0214 	add.w	r2, r3, #20
    24de:	683b      	ldr	r3, [r7, #0]
    24e0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    24e2:	2300      	movs	r3, #0
}
    24e4:	4618      	mov	r0, r3
    24e6:	370c      	adds	r7, #12
    24e8:	46bd      	mov	sp, r7
    24ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ee:	4770      	bx	lr

000024f0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    24f0:	b580      	push	{r7, lr}
    24f2:	b084      	sub	sp, #16
    24f4:	af00      	add	r7, sp, #0
    24f6:	60f8      	str	r0, [r7, #12]
    24f8:	60b9      	str	r1, [r7, #8]
    24fa:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    24fc:	68fb      	ldr	r3, [r7, #12]
    24fe:	2b00      	cmp	r3, #0
    2500:	d004      	beq.n	250c <pwm_init+0x1c>
    2502:	68bb      	ldr	r3, [r7, #8]
    2504:	2b00      	cmp	r3, #0
    2506:	d001      	beq.n	250c <pwm_init+0x1c>
    2508:	2301      	movs	r3, #1
    250a:	e000      	b.n	250e <pwm_init+0x1e>
    250c:	2300      	movs	r3, #0
    250e:	f003 0301 	and.w	r3, r3, #1
    2512:	b2db      	uxtb	r3, r3
    2514:	2233      	movs	r2, #51	; 0x33
    2516:	490a      	ldr	r1, [pc, #40]	; (2540 <pwm_init+0x50>)
    2518:	4618      	mov	r0, r3
    251a:	4b0a      	ldr	r3, [pc, #40]	; (2544 <pwm_init+0x54>)
    251c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    251e:	68fb      	ldr	r3, [r7, #12]
    2520:	68b9      	ldr	r1, [r7, #8]
    2522:	4618      	mov	r0, r3
    2524:	4b08      	ldr	r3, [pc, #32]	; (2548 <pwm_init+0x58>)
    2526:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2528:	68fb      	ldr	r3, [r7, #12]
    252a:	4a08      	ldr	r2, [pc, #32]	; (254c <pwm_init+0x5c>)
    252c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    252e:	68fb      	ldr	r3, [r7, #12]
    2530:	4a07      	ldr	r2, [pc, #28]	; (2550 <pwm_init+0x60>)
    2532:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2534:	2300      	movs	r3, #0
}
    2536:	4618      	mov	r0, r3
    2538:	3710      	adds	r7, #16
    253a:	46bd      	mov	sp, r7
    253c:	bd80      	pop	{r7, pc}
    253e:	bf00      	nop
    2540:	000120e4 	.word	0x000120e4
    2544:	00003681 	.word	0x00003681
    2548:	00007d29 	.word	0x00007d29
    254c:	00002555 	.word	0x00002555
    2550:	00002579 	.word	0x00002579

00002554 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2554:	b580      	push	{r7, lr}
    2556:	b084      	sub	sp, #16
    2558:	af00      	add	r7, sp, #0
    255a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2560:	68fb      	ldr	r3, [r7, #12]
    2562:	695b      	ldr	r3, [r3, #20]
    2564:	2b00      	cmp	r3, #0
    2566:	d003      	beq.n	2570 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2568:	68fb      	ldr	r3, [r7, #12]
    256a:	695b      	ldr	r3, [r3, #20]
    256c:	68f8      	ldr	r0, [r7, #12]
    256e:	4798      	blx	r3
	}
}
    2570:	bf00      	nop
    2572:	3710      	adds	r7, #16
    2574:	46bd      	mov	sp, r7
    2576:	bd80      	pop	{r7, pc}

00002578 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2578:	b580      	push	{r7, lr}
    257a:	b084      	sub	sp, #16
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2584:	68fb      	ldr	r3, [r7, #12]
    2586:	699b      	ldr	r3, [r3, #24]
    2588:	2b00      	cmp	r3, #0
    258a:	d003      	beq.n	2594 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    258c:	68fb      	ldr	r3, [r7, #12]
    258e:	699b      	ldr	r3, [r3, #24]
    2590:	68f8      	ldr	r0, [r7, #12]
    2592:	4798      	blx	r3
	}
}
    2594:	bf00      	nop
    2596:	3710      	adds	r7, #16
    2598:	46bd      	mov	sp, r7
    259a:	bd80      	pop	{r7, pc}

0000259c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    259c:	b580      	push	{r7, lr}
    259e:	b082      	sub	sp, #8
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
    25a4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	2b00      	cmp	r3, #0
    25aa:	d004      	beq.n	25b6 <qspi_sync_init+0x1a>
    25ac:	683b      	ldr	r3, [r7, #0]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d001      	beq.n	25b6 <qspi_sync_init+0x1a>
    25b2:	2301      	movs	r3, #1
    25b4:	e000      	b.n	25b8 <qspi_sync_init+0x1c>
    25b6:	2300      	movs	r3, #0
    25b8:	f003 0301 	and.w	r3, r3, #1
    25bc:	b2db      	uxtb	r3, r3
    25be:	2231      	movs	r2, #49	; 0x31
    25c0:	4906      	ldr	r1, [pc, #24]	; (25dc <qspi_sync_init+0x40>)
    25c2:	4618      	mov	r0, r3
    25c4:	4b06      	ldr	r3, [pc, #24]	; (25e0 <qspi_sync_init+0x44>)
    25c6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	6839      	ldr	r1, [r7, #0]
    25cc:	4618      	mov	r0, r3
    25ce:	4b05      	ldr	r3, [pc, #20]	; (25e4 <qspi_sync_init+0x48>)
    25d0:	4798      	blx	r3
    25d2:	4603      	mov	r3, r0
}
    25d4:	4618      	mov	r0, r3
    25d6:	3708      	adds	r7, #8
    25d8:	46bd      	mov	sp, r7
    25da:	bd80      	pop	{r7, pc}
    25dc:	000120fc 	.word	0x000120fc
    25e0:	00003681 	.word	0x00003681
    25e4:	0000567d 	.word	0x0000567d

000025e8 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    25e8:	b580      	push	{r7, lr}
    25ea:	b082      	sub	sp, #8
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	2b00      	cmp	r3, #0
    25f4:	bf14      	ite	ne
    25f6:	2301      	movne	r3, #1
    25f8:	2300      	moveq	r3, #0
    25fa:	b2db      	uxtb	r3, r3
    25fc:	223f      	movs	r2, #63	; 0x3f
    25fe:	4906      	ldr	r1, [pc, #24]	; (2618 <qspi_sync_enable+0x30>)
    2600:	4618      	mov	r0, r3
    2602:	4b06      	ldr	r3, [pc, #24]	; (261c <qspi_sync_enable+0x34>)
    2604:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	4618      	mov	r0, r3
    260a:	4b05      	ldr	r3, [pc, #20]	; (2620 <qspi_sync_enable+0x38>)
    260c:	4798      	blx	r3
    260e:	4603      	mov	r3, r0
}
    2610:	4618      	mov	r0, r3
    2612:	3708      	adds	r7, #8
    2614:	46bd      	mov	sp, r7
    2616:	bd80      	pop	{r7, pc}
    2618:	000120fc 	.word	0x000120fc
    261c:	00003681 	.word	0x00003681
    2620:	000056f1 	.word	0x000056f1

00002624 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2624:	b580      	push	{r7, lr}
    2626:	b082      	sub	sp, #8
    2628:	af00      	add	r7, sp, #0
    262a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	2b00      	cmp	r3, #0
    2630:	bf14      	ite	ne
    2632:	2301      	movne	r3, #1
    2634:	2300      	moveq	r3, #0
    2636:	b2db      	uxtb	r3, r3
    2638:	2246      	movs	r2, #70	; 0x46
    263a:	4906      	ldr	r1, [pc, #24]	; (2654 <qspi_sync_disable+0x30>)
    263c:	4618      	mov	r0, r3
    263e:	4b06      	ldr	r3, [pc, #24]	; (2658 <qspi_sync_disable+0x34>)
    2640:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2642:	687b      	ldr	r3, [r7, #4]
    2644:	4618      	mov	r0, r3
    2646:	4b05      	ldr	r3, [pc, #20]	; (265c <qspi_sync_disable+0x38>)
    2648:	4798      	blx	r3
    264a:	4603      	mov	r3, r0
}
    264c:	4618      	mov	r0, r3
    264e:	3708      	adds	r7, #8
    2650:	46bd      	mov	sp, r7
    2652:	bd80      	pop	{r7, pc}
    2654:	000120fc 	.word	0x000120fc
    2658:	00003681 	.word	0x00003681
    265c:	00005715 	.word	0x00005715

00002660 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2660:	b580      	push	{r7, lr}
    2662:	b082      	sub	sp, #8
    2664:	af00      	add	r7, sp, #0
    2666:	6078      	str	r0, [r7, #4]
    2668:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	2b00      	cmp	r3, #0
    266e:	d004      	beq.n	267a <qspi_sync_serial_run_command+0x1a>
    2670:	683b      	ldr	r3, [r7, #0]
    2672:	2b00      	cmp	r3, #0
    2674:	d001      	beq.n	267a <qspi_sync_serial_run_command+0x1a>
    2676:	2301      	movs	r3, #1
    2678:	e000      	b.n	267c <qspi_sync_serial_run_command+0x1c>
    267a:	2300      	movs	r3, #0
    267c:	f003 0301 	and.w	r3, r3, #1
    2680:	b2db      	uxtb	r3, r3
    2682:	224d      	movs	r2, #77	; 0x4d
    2684:	4906      	ldr	r1, [pc, #24]	; (26a0 <qspi_sync_serial_run_command+0x40>)
    2686:	4618      	mov	r0, r3
    2688:	4b06      	ldr	r3, [pc, #24]	; (26a4 <qspi_sync_serial_run_command+0x44>)
    268a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	6839      	ldr	r1, [r7, #0]
    2690:	4618      	mov	r0, r3
    2692:	4b05      	ldr	r3, [pc, #20]	; (26a8 <qspi_sync_serial_run_command+0x48>)
    2694:	4798      	blx	r3
    2696:	4603      	mov	r3, r0
}
    2698:	4618      	mov	r0, r3
    269a:	3708      	adds	r7, #8
    269c:	46bd      	mov	sp, r7
    269e:	bd80      	pop	{r7, pc}
    26a0:	000120fc 	.word	0x000120fc
    26a4:	00003681 	.word	0x00003681
    26a8:	00005861 	.word	0x00005861

000026ac <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    26ac:	b580      	push	{r7, lr}
    26ae:	b084      	sub	sp, #16
    26b0:	af00      	add	r7, sp, #0
    26b2:	6078      	str	r0, [r7, #4]
    26b4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    26b6:	2300      	movs	r3, #0
    26b8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    26ba:	687b      	ldr	r3, [r7, #4]
    26bc:	2b00      	cmp	r3, #0
    26be:	d004      	beq.n	26ca <spi_m_sync_init+0x1e>
    26c0:	683b      	ldr	r3, [r7, #0]
    26c2:	2b00      	cmp	r3, #0
    26c4:	d001      	beq.n	26ca <spi_m_sync_init+0x1e>
    26c6:	2301      	movs	r3, #1
    26c8:	e000      	b.n	26cc <spi_m_sync_init+0x20>
    26ca:	2300      	movs	r3, #0
    26cc:	f003 0301 	and.w	r3, r3, #1
    26d0:	b2db      	uxtb	r3, r3
    26d2:	2240      	movs	r2, #64	; 0x40
    26d4:	4910      	ldr	r1, [pc, #64]	; (2718 <spi_m_sync_init+0x6c>)
    26d6:	4618      	mov	r0, r3
    26d8:	4b10      	ldr	r3, [pc, #64]	; (271c <spi_m_sync_init+0x70>)
    26da:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	683a      	ldr	r2, [r7, #0]
    26e0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	3304      	adds	r3, #4
    26e6:	6839      	ldr	r1, [r7, #0]
    26e8:	4618      	mov	r0, r3
    26ea:	4b0d      	ldr	r3, [pc, #52]	; (2720 <spi_m_sync_init+0x74>)
    26ec:	4798      	blx	r3
    26ee:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    26f0:	68fb      	ldr	r3, [r7, #12]
    26f2:	2b00      	cmp	r3, #0
    26f4:	da01      	bge.n	26fa <spi_m_sync_init+0x4e>
		return rc;
    26f6:	68fb      	ldr	r3, [r7, #12]
    26f8:	e00a      	b.n	2710 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2700:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	4a07      	ldr	r2, [pc, #28]	; (2724 <spi_m_sync_init+0x78>)
    2706:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	4a07      	ldr	r2, [pc, #28]	; (2728 <spi_m_sync_init+0x7c>)
    270c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    270e:	2300      	movs	r3, #0
}
    2710:	4618      	mov	r0, r3
    2712:	3710      	adds	r7, #16
    2714:	46bd      	mov	sp, r7
    2716:	bd80      	pop	{r7, pc}
    2718:	00012118 	.word	0x00012118
    271c:	00003681 	.word	0x00003681
    2720:	00006bfd 	.word	0x00006bfd
    2724:	0000272d 	.word	0x0000272d
    2728:	00002785 	.word	0x00002785

0000272c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    272c:	b580      	push	{r7, lr}
    272e:	b088      	sub	sp, #32
    2730:	af00      	add	r7, sp, #0
    2732:	60f8      	str	r0, [r7, #12]
    2734:	60b9      	str	r1, [r7, #8]
    2736:	4613      	mov	r3, r2
    2738:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    273a:	68fb      	ldr	r3, [r7, #12]
    273c:	2b00      	cmp	r3, #0
    273e:	bf14      	ite	ne
    2740:	2301      	movne	r3, #1
    2742:	2300      	moveq	r3, #0
    2744:	b2db      	uxtb	r3, r3
    2746:	2287      	movs	r2, #135	; 0x87
    2748:	490b      	ldr	r1, [pc, #44]	; (2778 <_spi_m_sync_io_read+0x4c>)
    274a:	4618      	mov	r0, r3
    274c:	4b0b      	ldr	r3, [pc, #44]	; (277c <_spi_m_sync_io_read+0x50>)
    274e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2750:	68fb      	ldr	r3, [r7, #12]
    2752:	3b0c      	subs	r3, #12
    2754:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2756:	68bb      	ldr	r3, [r7, #8]
    2758:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    275a:	2300      	movs	r3, #0
    275c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    275e:	88fb      	ldrh	r3, [r7, #6]
    2760:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2762:	f107 0310 	add.w	r3, r7, #16
    2766:	4619      	mov	r1, r3
    2768:	69f8      	ldr	r0, [r7, #28]
    276a:	4b05      	ldr	r3, [pc, #20]	; (2780 <_spi_m_sync_io_read+0x54>)
    276c:	4798      	blx	r3
    276e:	4603      	mov	r3, r0
}
    2770:	4618      	mov	r0, r3
    2772:	3720      	adds	r7, #32
    2774:	46bd      	mov	sp, r7
    2776:	bd80      	pop	{r7, pc}
    2778:	00012118 	.word	0x00012118
    277c:	00003681 	.word	0x00003681
    2780:	000027dd 	.word	0x000027dd

00002784 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2784:	b580      	push	{r7, lr}
    2786:	b088      	sub	sp, #32
    2788:	af00      	add	r7, sp, #0
    278a:	60f8      	str	r0, [r7, #12]
    278c:	60b9      	str	r1, [r7, #8]
    278e:	4613      	mov	r3, r2
    2790:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2792:	68fb      	ldr	r3, [r7, #12]
    2794:	2b00      	cmp	r3, #0
    2796:	bf14      	ite	ne
    2798:	2301      	movne	r3, #1
    279a:	2300      	moveq	r3, #0
    279c:	b2db      	uxtb	r3, r3
    279e:	22a3      	movs	r2, #163	; 0xa3
    27a0:	490b      	ldr	r1, [pc, #44]	; (27d0 <_spi_m_sync_io_write+0x4c>)
    27a2:	4618      	mov	r0, r3
    27a4:	4b0b      	ldr	r3, [pc, #44]	; (27d4 <_spi_m_sync_io_write+0x50>)
    27a6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    27a8:	68fb      	ldr	r3, [r7, #12]
    27aa:	3b0c      	subs	r3, #12
    27ac:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    27ae:	2300      	movs	r3, #0
    27b0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    27b2:	68bb      	ldr	r3, [r7, #8]
    27b4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    27b6:	88fb      	ldrh	r3, [r7, #6]
    27b8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    27ba:	f107 0310 	add.w	r3, r7, #16
    27be:	4619      	mov	r1, r3
    27c0:	69f8      	ldr	r0, [r7, #28]
    27c2:	4b05      	ldr	r3, [pc, #20]	; (27d8 <_spi_m_sync_io_write+0x54>)
    27c4:	4798      	blx	r3
    27c6:	4603      	mov	r3, r0
}
    27c8:	4618      	mov	r0, r3
    27ca:	3720      	adds	r7, #32
    27cc:	46bd      	mov	sp, r7
    27ce:	bd80      	pop	{r7, pc}
    27d0:	00012118 	.word	0x00012118
    27d4:	00003681 	.word	0x00003681
    27d8:	000027dd 	.word	0x000027dd

000027dc <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b086      	sub	sp, #24
    27e0:	af00      	add	r7, sp, #0
    27e2:	6078      	str	r0, [r7, #4]
    27e4:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d004      	beq.n	27f6 <spi_m_sync_transfer+0x1a>
    27ec:	683b      	ldr	r3, [r7, #0]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d001      	beq.n	27f6 <spi_m_sync_transfer+0x1a>
    27f2:	2301      	movs	r3, #1
    27f4:	e000      	b.n	27f8 <spi_m_sync_transfer+0x1c>
    27f6:	2300      	movs	r3, #0
    27f8:	f003 0301 	and.w	r3, r3, #1
    27fc:	b2db      	uxtb	r3, r3
    27fe:	22b3      	movs	r2, #179	; 0xb3
    2800:	490c      	ldr	r1, [pc, #48]	; (2834 <spi_m_sync_transfer+0x58>)
    2802:	4618      	mov	r0, r3
    2804:	4b0c      	ldr	r3, [pc, #48]	; (2838 <spi_m_sync_transfer+0x5c>)
    2806:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2808:	683b      	ldr	r3, [r7, #0]
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    280e:	683b      	ldr	r3, [r7, #0]
    2810:	685b      	ldr	r3, [r3, #4]
    2812:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2814:	683b      	ldr	r3, [r7, #0]
    2816:	689b      	ldr	r3, [r3, #8]
    2818:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	3304      	adds	r3, #4
    281e:	f107 020c 	add.w	r2, r7, #12
    2822:	4611      	mov	r1, r2
    2824:	4618      	mov	r0, r3
    2826:	4b05      	ldr	r3, [pc, #20]	; (283c <spi_m_sync_transfer+0x60>)
    2828:	4798      	blx	r3
    282a:	4603      	mov	r3, r0
}
    282c:	4618      	mov	r0, r3
    282e:	3718      	adds	r7, #24
    2830:	46bd      	mov	sp, r7
    2832:	bd80      	pop	{r7, pc}
    2834:	00012118 	.word	0x00012118
    2838:	00003681 	.word	0x00003681
    283c:	00006e5d 	.word	0x00006e5d

00002840 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2840:	b480      	push	{r7}
    2842:	b083      	sub	sp, #12
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	681b      	ldr	r3, [r3, #0]
}
    284c:	4618      	mov	r0, r3
    284e:	370c      	adds	r7, #12
    2850:	46bd      	mov	sp, r7
    2852:	f85d 7b04 	ldr.w	r7, [sp], #4
    2856:	4770      	bx	lr

00002858 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2858:	b480      	push	{r7}
    285a:	b083      	sub	sp, #12
    285c:	af00      	add	r7, sp, #0
    285e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b00      	cmp	r3, #0
    2864:	d002      	beq.n	286c <list_get_next_element+0x14>
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	681b      	ldr	r3, [r3, #0]
    286a:	e000      	b.n	286e <list_get_next_element+0x16>
    286c:	2300      	movs	r3, #0
}
    286e:	4618      	mov	r0, r3
    2870:	370c      	adds	r7, #12
    2872:	46bd      	mov	sp, r7
    2874:	f85d 7b04 	ldr.w	r7, [sp], #4
    2878:	4770      	bx	lr
	...

0000287c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    287c:	b580      	push	{r7, lr}
    287e:	b084      	sub	sp, #16
    2880:	af00      	add	r7, sp, #0
    2882:	60f8      	str	r0, [r7, #12]
    2884:	60b9      	str	r1, [r7, #8]
    2886:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2888:	68fb      	ldr	r3, [r7, #12]
    288a:	2b00      	cmp	r3, #0
    288c:	d007      	beq.n	289e <timer_init+0x22>
    288e:	68bb      	ldr	r3, [r7, #8]
    2890:	2b00      	cmp	r3, #0
    2892:	d004      	beq.n	289e <timer_init+0x22>
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	2b00      	cmp	r3, #0
    2898:	d001      	beq.n	289e <timer_init+0x22>
    289a:	2301      	movs	r3, #1
    289c:	e000      	b.n	28a0 <timer_init+0x24>
    289e:	2300      	movs	r3, #0
    28a0:	f003 0301 	and.w	r3, r3, #1
    28a4:	b2db      	uxtb	r3, r3
    28a6:	223b      	movs	r2, #59	; 0x3b
    28a8:	490c      	ldr	r1, [pc, #48]	; (28dc <timer_init+0x60>)
    28aa:	4618      	mov	r0, r3
    28ac:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <timer_init+0x64>)
    28ae:	4798      	blx	r3
	descr->func = func;
    28b0:	68fb      	ldr	r3, [r7, #12]
    28b2:	687a      	ldr	r2, [r7, #4]
    28b4:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    28b6:	68fb      	ldr	r3, [r7, #12]
    28b8:	681b      	ldr	r3, [r3, #0]
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	68fa      	ldr	r2, [r7, #12]
    28be:	3204      	adds	r2, #4
    28c0:	68b9      	ldr	r1, [r7, #8]
    28c2:	4610      	mov	r0, r2
    28c4:	4798      	blx	r3
	descr->time                           = 0;
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	2200      	movs	r2, #0
    28ca:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	4a05      	ldr	r2, [pc, #20]	; (28e4 <timer_init+0x68>)
    28d0:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    28d2:	2300      	movs	r3, #0
}
    28d4:	4618      	mov	r0, r3
    28d6:	3710      	adds	r7, #16
    28d8:	46bd      	mov	sp, r7
    28da:	bd80      	pop	{r7, pc}
    28dc:	00012134 	.word	0x00012134
    28e0:	00003681 	.word	0x00003681
    28e4:	00002c6d 	.word	0x00002c6d

000028e8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b082      	sub	sp, #8
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d005      	beq.n	2902 <timer_start+0x1a>
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	2b00      	cmp	r3, #0
    28fc:	d001      	beq.n	2902 <timer_start+0x1a>
    28fe:	2301      	movs	r3, #1
    2900:	e000      	b.n	2904 <timer_start+0x1c>
    2902:	2300      	movs	r3, #0
    2904:	f003 0301 	and.w	r3, r3, #1
    2908:	b2db      	uxtb	r3, r3
    290a:	2254      	movs	r2, #84	; 0x54
    290c:	490e      	ldr	r1, [pc, #56]	; (2948 <timer_start+0x60>)
    290e:	4618      	mov	r0, r3
    2910:	4b0e      	ldr	r3, [pc, #56]	; (294c <timer_start+0x64>)
    2912:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	699b      	ldr	r3, [r3, #24]
    291a:	687a      	ldr	r2, [r7, #4]
    291c:	3204      	adds	r2, #4
    291e:	4610      	mov	r0, r2
    2920:	4798      	blx	r3
    2922:	4603      	mov	r3, r0
    2924:	2b00      	cmp	r3, #0
    2926:	d002      	beq.n	292e <timer_start+0x46>
		return ERR_DENIED;
    2928:	f06f 0310 	mvn.w	r3, #16
    292c:	e007      	b.n	293e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	689b      	ldr	r3, [r3, #8]
    2934:	687a      	ldr	r2, [r7, #4]
    2936:	3204      	adds	r2, #4
    2938:	4610      	mov	r0, r2
    293a:	4798      	blx	r3

	return ERR_NONE;
    293c:	2300      	movs	r3, #0
}
    293e:	4618      	mov	r0, r3
    2940:	3708      	adds	r7, #8
    2942:	46bd      	mov	sp, r7
    2944:	bd80      	pop	{r7, pc}
    2946:	bf00      	nop
    2948:	00012134 	.word	0x00012134
    294c:	00003681 	.word	0x00003681

00002950 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2950:	b580      	push	{r7, lr}
    2952:	b082      	sub	sp, #8
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	2b00      	cmp	r3, #0
    295c:	d005      	beq.n	296a <timer_stop+0x1a>
    295e:	687b      	ldr	r3, [r7, #4]
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	2b00      	cmp	r3, #0
    2964:	d001      	beq.n	296a <timer_stop+0x1a>
    2966:	2301      	movs	r3, #1
    2968:	e000      	b.n	296c <timer_stop+0x1c>
    296a:	2300      	movs	r3, #0
    296c:	f003 0301 	and.w	r3, r3, #1
    2970:	b2db      	uxtb	r3, r3
    2972:	2262      	movs	r2, #98	; 0x62
    2974:	490f      	ldr	r1, [pc, #60]	; (29b4 <timer_stop+0x64>)
    2976:	4618      	mov	r0, r3
    2978:	4b0f      	ldr	r3, [pc, #60]	; (29b8 <timer_stop+0x68>)
    297a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	699b      	ldr	r3, [r3, #24]
    2982:	687a      	ldr	r2, [r7, #4]
    2984:	3204      	adds	r2, #4
    2986:	4610      	mov	r0, r2
    2988:	4798      	blx	r3
    298a:	4603      	mov	r3, r0
    298c:	f083 0301 	eor.w	r3, r3, #1
    2990:	b2db      	uxtb	r3, r3
    2992:	2b00      	cmp	r3, #0
    2994:	d002      	beq.n	299c <timer_stop+0x4c>
		return ERR_DENIED;
    2996:	f06f 0310 	mvn.w	r3, #16
    299a:	e007      	b.n	29ac <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	68db      	ldr	r3, [r3, #12]
    29a2:	687a      	ldr	r2, [r7, #4]
    29a4:	3204      	adds	r2, #4
    29a6:	4610      	mov	r0, r2
    29a8:	4798      	blx	r3

	return ERR_NONE;
    29aa:	2300      	movs	r3, #0
}
    29ac:	4618      	mov	r0, r3
    29ae:	3708      	adds	r7, #8
    29b0:	46bd      	mov	sp, r7
    29b2:	bd80      	pop	{r7, pc}
    29b4:	00012134 	.word	0x00012134
    29b8:	00003681 	.word	0x00003681

000029bc <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    29bc:	b580      	push	{r7, lr}
    29be:	b084      	sub	sp, #16
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
    29c4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d008      	beq.n	29de <timer_add_task+0x22>
    29cc:	683b      	ldr	r3, [r7, #0]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d005      	beq.n	29de <timer_add_task+0x22>
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d001      	beq.n	29de <timer_add_task+0x22>
    29da:	2301      	movs	r3, #1
    29dc:	e000      	b.n	29e0 <timer_add_task+0x24>
    29de:	2300      	movs	r3, #0
    29e0:	f003 0301 	and.w	r3, r3, #1
    29e4:	b2db      	uxtb	r3, r3
    29e6:	227b      	movs	r2, #123	; 0x7b
    29e8:	492f      	ldr	r1, [pc, #188]	; (2aa8 <timer_add_task+0xec>)
    29ea:	4618      	mov	r0, r3
    29ec:	4b2f      	ldr	r3, [pc, #188]	; (2aac <timer_add_task+0xf0>)
    29ee:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	7f1b      	ldrb	r3, [r3, #28]
    29f4:	b2db      	uxtb	r3, r3
    29f6:	f043 0301 	orr.w	r3, r3, #1
    29fa:	b2da      	uxtb	r2, r3
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	3318      	adds	r3, #24
    2a04:	6839      	ldr	r1, [r7, #0]
    2a06:	4618      	mov	r0, r3
    2a08:	4b29      	ldr	r3, [pc, #164]	; (2ab0 <timer_add_task+0xf4>)
    2a0a:	4798      	blx	r3
    2a0c:	4603      	mov	r3, r0
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00f      	beq.n	2a32 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	7f1b      	ldrb	r3, [r3, #28]
    2a16:	b2db      	uxtb	r3, r3
    2a18:	f023 0301 	bic.w	r3, r3, #1
    2a1c:	b2da      	uxtb	r2, r3
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2a22:	2280      	movs	r2, #128	; 0x80
    2a24:	4920      	ldr	r1, [pc, #128]	; (2aa8 <timer_add_task+0xec>)
    2a26:	2000      	movs	r0, #0
    2a28:	4b20      	ldr	r3, [pc, #128]	; (2aac <timer_add_task+0xf0>)
    2a2a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2a2c:	f06f 0311 	mvn.w	r3, #17
    2a30:	e035      	b.n	2a9e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	695a      	ldr	r2, [r3, #20]
    2a36:	683b      	ldr	r3, [r7, #0]
    2a38:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	f103 0018 	add.w	r0, r3, #24
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	695b      	ldr	r3, [r3, #20]
    2a44:	461a      	mov	r2, r3
    2a46:	6839      	ldr	r1, [r7, #0]
    2a48:	4b1a      	ldr	r3, [pc, #104]	; (2ab4 <timer_add_task+0xf8>)
    2a4a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	7f1b      	ldrb	r3, [r3, #28]
    2a50:	b2db      	uxtb	r3, r3
    2a52:	f023 0301 	bic.w	r3, r3, #1
    2a56:	b2da      	uxtb	r2, r3
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	7f1b      	ldrb	r3, [r3, #28]
    2a60:	b2db      	uxtb	r3, r3
    2a62:	f003 0302 	and.w	r3, r3, #2
    2a66:	2b00      	cmp	r3, #0
    2a68:	d018      	beq.n	2a9c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2a6a:	f107 030c 	add.w	r3, r7, #12
    2a6e:	4618      	mov	r0, r3
    2a70:	4b11      	ldr	r3, [pc, #68]	; (2ab8 <timer_add_task+0xfc>)
    2a72:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	7f1b      	ldrb	r3, [r3, #28]
    2a78:	b2db      	uxtb	r3, r3
    2a7a:	f023 0302 	bic.w	r3, r3, #2
    2a7e:	b2da      	uxtb	r2, r3
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	69db      	ldr	r3, [r3, #28]
    2a8a:	687a      	ldr	r2, [r7, #4]
    2a8c:	3204      	adds	r2, #4
    2a8e:	4610      	mov	r0, r2
    2a90:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2a92:	f107 030c 	add.w	r3, r7, #12
    2a96:	4618      	mov	r0, r3
    2a98:	4b08      	ldr	r3, [pc, #32]	; (2abc <timer_add_task+0x100>)
    2a9a:	4798      	blx	r3
	}

	return ERR_NONE;
    2a9c:	2300      	movs	r3, #0
}
    2a9e:	4618      	mov	r0, r3
    2aa0:	3710      	adds	r7, #16
    2aa2:	46bd      	mov	sp, r7
    2aa4:	bd80      	pop	{r7, pc}
    2aa6:	bf00      	nop
    2aa8:	00012134 	.word	0x00012134
    2aac:	00003681 	.word	0x00003681
    2ab0:	000036a9 	.word	0x000036a9
    2ab4:	00002bbd 	.word	0x00002bbd
    2ab8:	0000b239 	.word	0x0000b239
    2abc:	0000b25f 	.word	0x0000b25f

00002ac0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b084      	sub	sp, #16
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    2ac8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d008      	beq.n	2ae2 <timer_remove_task+0x22>
    2ad0:	683b      	ldr	r3, [r7, #0]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d005      	beq.n	2ae2 <timer_remove_task+0x22>
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d001      	beq.n	2ae2 <timer_remove_task+0x22>
    2ade:	2301      	movs	r3, #1
    2ae0:	e000      	b.n	2ae4 <timer_remove_task+0x24>
    2ae2:	2300      	movs	r3, #0
    2ae4:	f003 0301 	and.w	r3, r3, #1
    2ae8:	b2db      	uxtb	r3, r3
    2aea:	2296      	movs	r2, #150	; 0x96
    2aec:	492d      	ldr	r1, [pc, #180]	; (2ba4 <timer_remove_task+0xe4>)
    2aee:	4618      	mov	r0, r3
    2af0:	4b2d      	ldr	r3, [pc, #180]	; (2ba8 <timer_remove_task+0xe8>)
    2af2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	7f1b      	ldrb	r3, [r3, #28]
    2af8:	b2db      	uxtb	r3, r3
    2afa:	f043 0301 	orr.w	r3, r3, #1
    2afe:	b2da      	uxtb	r2, r3
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	3318      	adds	r3, #24
    2b08:	6839      	ldr	r1, [r7, #0]
    2b0a:	4618      	mov	r0, r3
    2b0c:	4b27      	ldr	r3, [pc, #156]	; (2bac <timer_remove_task+0xec>)
    2b0e:	4798      	blx	r3
    2b10:	4603      	mov	r3, r0
    2b12:	f083 0301 	eor.w	r3, r3, #1
    2b16:	b2db      	uxtb	r3, r3
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d00f      	beq.n	2b3c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	7f1b      	ldrb	r3, [r3, #28]
    2b20:	b2db      	uxtb	r3, r3
    2b22:	f023 0301 	bic.w	r3, r3, #1
    2b26:	b2da      	uxtb	r2, r3
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2b2c:	229b      	movs	r2, #155	; 0x9b
    2b2e:	491d      	ldr	r1, [pc, #116]	; (2ba4 <timer_remove_task+0xe4>)
    2b30:	2000      	movs	r0, #0
    2b32:	4b1d      	ldr	r3, [pc, #116]	; (2ba8 <timer_remove_task+0xe8>)
    2b34:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2b36:	f06f 0309 	mvn.w	r3, #9
    2b3a:	e02e      	b.n	2b9a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	3318      	adds	r3, #24
    2b40:	6839      	ldr	r1, [r7, #0]
    2b42:	4618      	mov	r0, r3
    2b44:	4b1a      	ldr	r3, [pc, #104]	; (2bb0 <timer_remove_task+0xf0>)
    2b46:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	7f1b      	ldrb	r3, [r3, #28]
    2b4c:	b2db      	uxtb	r3, r3
    2b4e:	f023 0301 	bic.w	r3, r3, #1
    2b52:	b2da      	uxtb	r2, r3
    2b54:	687b      	ldr	r3, [r7, #4]
    2b56:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	7f1b      	ldrb	r3, [r3, #28]
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	f003 0302 	and.w	r3, r3, #2
    2b62:	2b00      	cmp	r3, #0
    2b64:	d018      	beq.n	2b98 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2b66:	f107 030c 	add.w	r3, r7, #12
    2b6a:	4618      	mov	r0, r3
    2b6c:	4b11      	ldr	r3, [pc, #68]	; (2bb4 <timer_remove_task+0xf4>)
    2b6e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b70:	687b      	ldr	r3, [r7, #4]
    2b72:	7f1b      	ldrb	r3, [r3, #28]
    2b74:	b2db      	uxtb	r3, r3
    2b76:	f023 0302 	bic.w	r3, r3, #2
    2b7a:	b2da      	uxtb	r2, r3
    2b7c:	687b      	ldr	r3, [r7, #4]
    2b7e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	681b      	ldr	r3, [r3, #0]
    2b84:	69db      	ldr	r3, [r3, #28]
    2b86:	687a      	ldr	r2, [r7, #4]
    2b88:	3204      	adds	r2, #4
    2b8a:	4610      	mov	r0, r2
    2b8c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2b8e:	f107 030c 	add.w	r3, r7, #12
    2b92:	4618      	mov	r0, r3
    2b94:	4b08      	ldr	r3, [pc, #32]	; (2bb8 <timer_remove_task+0xf8>)
    2b96:	4798      	blx	r3
	}

	return ERR_NONE;
    2b98:	2300      	movs	r3, #0
}
    2b9a:	4618      	mov	r0, r3
    2b9c:	3710      	adds	r7, #16
    2b9e:	46bd      	mov	sp, r7
    2ba0:	bd80      	pop	{r7, pc}
    2ba2:	bf00      	nop
    2ba4:	00012134 	.word	0x00012134
    2ba8:	00003681 	.word	0x00003681
    2bac:	000036a9 	.word	0x000036a9
    2bb0:	0000380b 	.word	0x0000380b
    2bb4:	0000b239 	.word	0x0000b239
    2bb8:	0000b25f 	.word	0x0000b25f

00002bbc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b088      	sub	sp, #32
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	60f8      	str	r0, [r7, #12]
    2bc4:	60b9      	str	r1, [r7, #8]
    2bc6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2bc8:	2300      	movs	r3, #0
    2bca:	61bb      	str	r3, [r7, #24]
    2bcc:	68f8      	ldr	r0, [r7, #12]
    2bce:	4b23      	ldr	r3, [pc, #140]	; (2c5c <timer_add_timer_task+0xa0>)
    2bd0:	4798      	blx	r3
    2bd2:	6138      	str	r0, [r7, #16]

	if (!head) {
    2bd4:	693b      	ldr	r3, [r7, #16]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d104      	bne.n	2be4 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2bda:	68b9      	ldr	r1, [r7, #8]
    2bdc:	68f8      	ldr	r0, [r7, #12]
    2bde:	4b20      	ldr	r3, [pc, #128]	; (2c60 <timer_add_timer_task+0xa4>)
    2be0:	4798      	blx	r3
		return;
    2be2:	e037      	b.n	2c54 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2be4:	693b      	ldr	r3, [r7, #16]
    2be6:	61fb      	str	r3, [r7, #28]
    2be8:	e022      	b.n	2c30 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2bea:	69fb      	ldr	r3, [r7, #28]
    2bec:	685a      	ldr	r2, [r3, #4]
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	429a      	cmp	r2, r3
    2bf2:	d808      	bhi.n	2c06 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2bf4:	69fb      	ldr	r3, [r7, #28]
    2bf6:	689a      	ldr	r2, [r3, #8]
    2bf8:	69fb      	ldr	r3, [r7, #28]
    2bfa:	6859      	ldr	r1, [r3, #4]
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	1acb      	subs	r3, r1, r3
    2c00:	4413      	add	r3, r2
    2c02:	617b      	str	r3, [r7, #20]
    2c04:	e009      	b.n	2c1a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2c06:	69fb      	ldr	r3, [r7, #28]
    2c08:	689a      	ldr	r2, [r3, #8]
    2c0a:	69fb      	ldr	r3, [r7, #28]
    2c0c:	685b      	ldr	r3, [r3, #4]
    2c0e:	441a      	add	r2, r3
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	425b      	negs	r3, r3
    2c14:	4413      	add	r3, r2
    2c16:	3301      	adds	r3, #1
    2c18:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2c1a:	68bb      	ldr	r3, [r7, #8]
    2c1c:	689a      	ldr	r2, [r3, #8]
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	429a      	cmp	r2, r3
    2c22:	d909      	bls.n	2c38 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2c24:	69fb      	ldr	r3, [r7, #28]
    2c26:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2c28:	69f8      	ldr	r0, [r7, #28]
    2c2a:	4b0e      	ldr	r3, [pc, #56]	; (2c64 <timer_add_timer_task+0xa8>)
    2c2c:	4798      	blx	r3
    2c2e:	61f8      	str	r0, [r7, #28]
    2c30:	69fb      	ldr	r3, [r7, #28]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d1d9      	bne.n	2bea <timer_add_timer_task+0x2e>
    2c36:	e000      	b.n	2c3a <timer_add_timer_task+0x7e>
			break;
    2c38:	bf00      	nop
	}

	if (it == head) {
    2c3a:	69fa      	ldr	r2, [r7, #28]
    2c3c:	693b      	ldr	r3, [r7, #16]
    2c3e:	429a      	cmp	r2, r3
    2c40:	d104      	bne.n	2c4c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2c42:	68b9      	ldr	r1, [r7, #8]
    2c44:	68f8      	ldr	r0, [r7, #12]
    2c46:	4b06      	ldr	r3, [pc, #24]	; (2c60 <timer_add_timer_task+0xa4>)
    2c48:	4798      	blx	r3
    2c4a:	e003      	b.n	2c54 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2c4c:	68b9      	ldr	r1, [r7, #8]
    2c4e:	69b8      	ldr	r0, [r7, #24]
    2c50:	4b05      	ldr	r3, [pc, #20]	; (2c68 <timer_add_timer_task+0xac>)
    2c52:	4798      	blx	r3
	}
}
    2c54:	3720      	adds	r7, #32
    2c56:	46bd      	mov	sp, r7
    2c58:	bd80      	pop	{r7, pc}
    2c5a:	bf00      	nop
    2c5c:	00002841 	.word	0x00002841
    2c60:	000036e1 	.word	0x000036e1
    2c64:	00002859 	.word	0x00002859
    2c68:	00003739 	.word	0x00003739

00002c6c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b086      	sub	sp, #24
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	3b04      	subs	r3, #4
    2c78:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2c7a:	693b      	ldr	r3, [r7, #16]
    2c7c:	3318      	adds	r3, #24
    2c7e:	4618      	mov	r0, r3
    2c80:	4b27      	ldr	r3, [pc, #156]	; (2d20 <timer_process_counted+0xb4>)
    2c82:	4798      	blx	r3
    2c84:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2c86:	693b      	ldr	r3, [r7, #16]
    2c88:	695b      	ldr	r3, [r3, #20]
    2c8a:	1c5a      	adds	r2, r3, #1
    2c8c:	693b      	ldr	r3, [r7, #16]
    2c8e:	615a      	str	r2, [r3, #20]
    2c90:	693b      	ldr	r3, [r7, #16]
    2c92:	695b      	ldr	r3, [r3, #20]
    2c94:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2c96:	693b      	ldr	r3, [r7, #16]
    2c98:	7f1b      	ldrb	r3, [r3, #28]
    2c9a:	b2db      	uxtb	r3, r3
    2c9c:	f003 0301 	and.w	r3, r3, #1
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d106      	bne.n	2cb2 <timer_process_counted+0x46>
    2ca4:	693b      	ldr	r3, [r7, #16]
    2ca6:	7f1b      	ldrb	r3, [r3, #28]
    2ca8:	b2db      	uxtb	r3, r3
    2caa:	f003 0302 	and.w	r3, r3, #2
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d027      	beq.n	2d02 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2cb2:	693b      	ldr	r3, [r7, #16]
    2cb4:	7f1b      	ldrb	r3, [r3, #28]
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	f043 0302 	orr.w	r3, r3, #2
    2cbc:	b2da      	uxtb	r2, r3
    2cbe:	693b      	ldr	r3, [r7, #16]
    2cc0:	771a      	strb	r2, [r3, #28]
		return;
    2cc2:	e029      	b.n	2d18 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2cc4:	697b      	ldr	r3, [r7, #20]
    2cc6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2cc8:	693b      	ldr	r3, [r7, #16]
    2cca:	3318      	adds	r3, #24
    2ccc:	4618      	mov	r0, r3
    2cce:	4b15      	ldr	r3, [pc, #84]	; (2d24 <timer_process_counted+0xb8>)
    2cd0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2cd2:	68bb      	ldr	r3, [r7, #8]
    2cd4:	7c1b      	ldrb	r3, [r3, #16]
    2cd6:	2b01      	cmp	r3, #1
    2cd8:	d109      	bne.n	2cee <timer_process_counted+0x82>
			tmp->time_label = time;
    2cda:	68bb      	ldr	r3, [r7, #8]
    2cdc:	68fa      	ldr	r2, [r7, #12]
    2cde:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2ce0:	693b      	ldr	r3, [r7, #16]
    2ce2:	3318      	adds	r3, #24
    2ce4:	68fa      	ldr	r2, [r7, #12]
    2ce6:	68b9      	ldr	r1, [r7, #8]
    2ce8:	4618      	mov	r0, r3
    2cea:	4b0f      	ldr	r3, [pc, #60]	; (2d28 <timer_process_counted+0xbc>)
    2cec:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2cee:	693b      	ldr	r3, [r7, #16]
    2cf0:	3318      	adds	r3, #24
    2cf2:	4618      	mov	r0, r3
    2cf4:	4b0a      	ldr	r3, [pc, #40]	; (2d20 <timer_process_counted+0xb4>)
    2cf6:	4798      	blx	r3
    2cf8:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2cfa:	68bb      	ldr	r3, [r7, #8]
    2cfc:	68db      	ldr	r3, [r3, #12]
    2cfe:	68b8      	ldr	r0, [r7, #8]
    2d00:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2d02:	697b      	ldr	r3, [r7, #20]
    2d04:	2b00      	cmp	r3, #0
    2d06:	d007      	beq.n	2d18 <timer_process_counted+0xac>
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	685b      	ldr	r3, [r3, #4]
    2d0c:	68fa      	ldr	r2, [r7, #12]
    2d0e:	1ad2      	subs	r2, r2, r3
    2d10:	697b      	ldr	r3, [r7, #20]
    2d12:	689b      	ldr	r3, [r3, #8]
    2d14:	429a      	cmp	r2, r3
    2d16:	d2d5      	bcs.n	2cc4 <timer_process_counted+0x58>
	}
}
    2d18:	3718      	adds	r7, #24
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop
    2d20:	00002841 	.word	0x00002841
    2d24:	000037d9 	.word	0x000037d9
    2d28:	00002bbd 	.word	0x00002bbd

00002d2c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2d2c:	b480      	push	{r7}
    2d2e:	b085      	sub	sp, #20
    2d30:	af00      	add	r7, sp, #0
    2d32:	4603      	mov	r3, r0
    2d34:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2d36:	2300      	movs	r3, #0
    2d38:	73fb      	strb	r3, [r7, #15]
    2d3a:	e029      	b.n	2d90 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d40:	4a19      	ldr	r2, [pc, #100]	; (2da8 <_usb_d_find_ep+0x7c>)
    2d42:	015b      	lsls	r3, r3, #5
    2d44:	4413      	add	r3, r2
    2d46:	3301      	adds	r3, #1
    2d48:	781b      	ldrb	r3, [r3, #0]
    2d4a:	79fa      	ldrb	r2, [r7, #7]
    2d4c:	429a      	cmp	r2, r3
    2d4e:	d102      	bne.n	2d56 <_usb_d_find_ep+0x2a>
			return i;
    2d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d54:	e022      	b.n	2d9c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d5a:	4a13      	ldr	r2, [pc, #76]	; (2da8 <_usb_d_find_ep+0x7c>)
    2d5c:	015b      	lsls	r3, r3, #5
    2d5e:	4413      	add	r3, r2
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d10e      	bne.n	2d84 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2d66:	79fb      	ldrb	r3, [r7, #7]
    2d68:	f003 030f 	and.w	r3, r3, #15
    2d6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2d70:	490d      	ldr	r1, [pc, #52]	; (2da8 <_usb_d_find_ep+0x7c>)
    2d72:	0152      	lsls	r2, r2, #5
    2d74:	440a      	add	r2, r1
    2d76:	3201      	adds	r2, #1
    2d78:	7812      	ldrb	r2, [r2, #0]
    2d7a:	4293      	cmp	r3, r2
    2d7c:	d102      	bne.n	2d84 <_usb_d_find_ep+0x58>
			return i;
    2d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d82:	e00b      	b.n	2d9c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d88:	b2db      	uxtb	r3, r3
    2d8a:	3301      	adds	r3, #1
    2d8c:	b2db      	uxtb	r3, r3
    2d8e:	73fb      	strb	r3, [r7, #15]
    2d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d94:	2b03      	cmp	r3, #3
    2d96:	ddd1      	ble.n	2d3c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2d98:	f04f 33ff 	mov.w	r3, #4294967295
}
    2d9c:	4618      	mov	r0, r3
    2d9e:	3714      	adds	r7, #20
    2da0:	46bd      	mov	sp, r7
    2da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2da6:	4770      	bx	lr
    2da8:	20000a90 	.word	0x20000a90

00002dac <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b088      	sub	sp, #32
    2db0:	af00      	add	r7, sp, #0
    2db2:	60ba      	str	r2, [r7, #8]
    2db4:	607b      	str	r3, [r7, #4]
    2db6:	4603      	mov	r3, r0
    2db8:	73fb      	strb	r3, [r7, #15]
    2dba:	460b      	mov	r3, r1
    2dbc:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2dbe:	68bb      	ldr	r3, [r7, #8]
    2dc0:	617b      	str	r3, [r7, #20]
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	61bb      	str	r3, [r7, #24]
    2dc6:	7bbb      	ldrb	r3, [r7, #14]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d004      	beq.n	2dd6 <_usb_d_trans+0x2a>
    2dcc:	7bfb      	ldrb	r3, [r7, #15]
    2dce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2dd2:	b2db      	uxtb	r3, r3
    2dd4:	e003      	b.n	2dde <_usb_d_trans+0x32>
    2dd6:	7bfb      	ldrb	r3, [r7, #15]
    2dd8:	f003 030f 	and.w	r3, r3, #15
    2ddc:	b2db      	uxtb	r3, r3
    2dde:	773b      	strb	r3, [r7, #28]
    2de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2de4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2de6:	f107 0314 	add.w	r3, r7, #20
    2dea:	4618      	mov	r0, r3
    2dec:	4b03      	ldr	r3, [pc, #12]	; (2dfc <_usb_d_trans+0x50>)
    2dee:	4798      	blx	r3
    2df0:	4603      	mov	r3, r0
}
    2df2:	4618      	mov	r0, r3
    2df4:	3720      	adds	r7, #32
    2df6:	46bd      	mov	sp, r7
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	bf00      	nop
    2dfc:	0000a86d 	.word	0x0000a86d

00002e00 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2e00:	b480      	push	{r7}
    2e02:	b085      	sub	sp, #20
    2e04:	af00      	add	r7, sp, #0
    2e06:	60f8      	str	r0, [r7, #12]
    2e08:	60b9      	str	r1, [r7, #8]
    2e0a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2e0c:	2300      	movs	r3, #0
}
    2e0e:	4618      	mov	r0, r3
    2e10:	3714      	adds	r7, #20
    2e12:	46bd      	mov	sp, r7
    2e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e18:	4770      	bx	lr
	...

00002e1c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b086      	sub	sp, #24
    2e20:	af00      	add	r7, sp, #0
    2e22:	4603      	mov	r3, r0
    2e24:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e26:	79fb      	ldrb	r3, [r7, #7]
    2e28:	4618      	mov	r0, r3
    2e2a:	4b2a      	ldr	r3, [pc, #168]	; (2ed4 <usb_d_cb_trans_setup+0xb8>)
    2e2c:	4798      	blx	r3
    2e2e:	4603      	mov	r3, r0
    2e30:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e36:	015b      	lsls	r3, r3, #5
    2e38:	4a27      	ldr	r2, [pc, #156]	; (2ed8 <usb_d_cb_trans_setup+0xbc>)
    2e3a:	4413      	add	r3, r2
    2e3c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2e3e:	693b      	ldr	r3, [r7, #16]
    2e40:	330c      	adds	r3, #12
    2e42:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2e44:	79fb      	ldrb	r3, [r7, #7]
    2e46:	68f9      	ldr	r1, [r7, #12]
    2e48:	4618      	mov	r0, r3
    2e4a:	4b24      	ldr	r3, [pc, #144]	; (2edc <usb_d_cb_trans_setup+0xc0>)
    2e4c:	4798      	blx	r3
    2e4e:	4603      	mov	r3, r0
    2e50:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2e52:	7afb      	ldrb	r3, [r7, #11]
    2e54:	2b08      	cmp	r3, #8
    2e56:	d00d      	beq.n	2e74 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2e58:	79fb      	ldrb	r3, [r7, #7]
    2e5a:	2101      	movs	r1, #1
    2e5c:	4618      	mov	r0, r3
    2e5e:	4b20      	ldr	r3, [pc, #128]	; (2ee0 <usb_d_cb_trans_setup+0xc4>)
    2e60:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2e62:	79fb      	ldrb	r3, [r7, #7]
    2e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e68:	b2db      	uxtb	r3, r3
    2e6a:	2101      	movs	r1, #1
    2e6c:	4618      	mov	r0, r3
    2e6e:	4b1c      	ldr	r3, [pc, #112]	; (2ee0 <usb_d_cb_trans_setup+0xc4>)
    2e70:	4798      	blx	r3
		return;
    2e72:	e02b      	b.n	2ecc <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2e74:	79fb      	ldrb	r3, [r7, #7]
    2e76:	2100      	movs	r1, #0
    2e78:	4618      	mov	r0, r3
    2e7a:	4b19      	ldr	r3, [pc, #100]	; (2ee0 <usb_d_cb_trans_setup+0xc4>)
    2e7c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2e7e:	79fb      	ldrb	r3, [r7, #7]
    2e80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e84:	b2db      	uxtb	r3, r3
    2e86:	2100      	movs	r1, #0
    2e88:	4618      	mov	r0, r3
    2e8a:	4b15      	ldr	r3, [pc, #84]	; (2ee0 <usb_d_cb_trans_setup+0xc4>)
    2e8c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2e8e:	693b      	ldr	r3, [r7, #16]
    2e90:	2201      	movs	r2, #1
    2e92:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2e94:	693b      	ldr	r3, [r7, #16]
    2e96:	695b      	ldr	r3, [r3, #20]
    2e98:	79fa      	ldrb	r2, [r7, #7]
    2e9a:	68f9      	ldr	r1, [r7, #12]
    2e9c:	4610      	mov	r0, r2
    2e9e:	4798      	blx	r3
    2ea0:	4603      	mov	r3, r0
    2ea2:	f083 0301 	eor.w	r3, r3, #1
    2ea6:	b2db      	uxtb	r3, r3
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d00f      	beq.n	2ecc <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2eac:	693b      	ldr	r3, [r7, #16]
    2eae:	2205      	movs	r2, #5
    2eb0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2eb2:	79fb      	ldrb	r3, [r7, #7]
    2eb4:	2101      	movs	r1, #1
    2eb6:	4618      	mov	r0, r3
    2eb8:	4b09      	ldr	r3, [pc, #36]	; (2ee0 <usb_d_cb_trans_setup+0xc4>)
    2eba:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2ebc:	79fb      	ldrb	r3, [r7, #7]
    2ebe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ec2:	b2db      	uxtb	r3, r3
    2ec4:	2101      	movs	r1, #1
    2ec6:	4618      	mov	r0, r3
    2ec8:	4b05      	ldr	r3, [pc, #20]	; (2ee0 <usb_d_cb_trans_setup+0xc4>)
    2eca:	4798      	blx	r3
	}
}
    2ecc:	3718      	adds	r7, #24
    2ece:	46bd      	mov	sp, r7
    2ed0:	bd80      	pop	{r7, pc}
    2ed2:	bf00      	nop
    2ed4:	00002d2d 	.word	0x00002d2d
    2ed8:	20000a90 	.word	0x20000a90
    2edc:	0000a7c5 	.word	0x0000a7c5
    2ee0:	0000a63d 	.word	0x0000a63d

00002ee4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2ee4:	b580      	push	{r7, lr}
    2ee6:	b084      	sub	sp, #16
    2ee8:	af00      	add	r7, sp, #0
    2eea:	4603      	mov	r3, r0
    2eec:	6039      	str	r1, [r7, #0]
    2eee:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ef0:	79fb      	ldrb	r3, [r7, #7]
    2ef2:	4618      	mov	r0, r3
    2ef4:	4b0d      	ldr	r3, [pc, #52]	; (2f2c <usb_d_cb_trans_more+0x48>)
    2ef6:	4798      	blx	r3
    2ef8:	4603      	mov	r3, r0
    2efa:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f00:	015b      	lsls	r3, r3, #5
    2f02:	4a0b      	ldr	r2, [pc, #44]	; (2f30 <usb_d_cb_trans_more+0x4c>)
    2f04:	4413      	add	r3, r2
    2f06:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2f08:	68bb      	ldr	r3, [r7, #8]
    2f0a:	789b      	ldrb	r3, [r3, #2]
    2f0c:	2b03      	cmp	r3, #3
    2f0e:	d107      	bne.n	2f20 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2f10:	68bb      	ldr	r3, [r7, #8]
    2f12:	699b      	ldr	r3, [r3, #24]
    2f14:	79fa      	ldrb	r2, [r7, #7]
    2f16:	6839      	ldr	r1, [r7, #0]
    2f18:	4610      	mov	r0, r2
    2f1a:	4798      	blx	r3
    2f1c:	4603      	mov	r3, r0
    2f1e:	e000      	b.n	2f22 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2f20:	2300      	movs	r3, #0
}
    2f22:	4618      	mov	r0, r3
    2f24:	3710      	adds	r7, #16
    2f26:	46bd      	mov	sp, r7
    2f28:	bd80      	pop	{r7, pc}
    2f2a:	bf00      	nop
    2f2c:	00002d2d 	.word	0x00002d2d
    2f30:	20000a90 	.word	0x20000a90

00002f34 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2f34:	b590      	push	{r4, r7, lr}
    2f36:	b087      	sub	sp, #28
    2f38:	af02      	add	r7, sp, #8
    2f3a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	789b      	ldrb	r3, [r3, #2]
    2f40:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2f42:	687b      	ldr	r3, [r7, #4]
    2f44:	7b1b      	ldrb	r3, [r3, #12]
    2f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	bf14      	ite	ne
    2f4e:	2301      	movne	r3, #1
    2f50:	2300      	moveq	r3, #0
    2f52:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2f54:	7bfb      	ldrb	r3, [r7, #15]
    2f56:	2b03      	cmp	r3, #3
    2f58:	d13a      	bne.n	2fd0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	69db      	ldr	r3, [r3, #28]
    2f5e:	687a      	ldr	r2, [r7, #4]
    2f60:	7850      	ldrb	r0, [r2, #1]
    2f62:	687a      	ldr	r2, [r7, #4]
    2f64:	320c      	adds	r2, #12
    2f66:	2101      	movs	r1, #1
    2f68:	4798      	blx	r3
    2f6a:	4603      	mov	r3, r0
    2f6c:	737b      	strb	r3, [r7, #13]
		if (err) {
    2f6e:	7b7b      	ldrb	r3, [r7, #13]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d015      	beq.n	2fa0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	2205      	movs	r2, #5
    2f78:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	2202      	movs	r2, #2
    2f7e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2f80:	7bbb      	ldrb	r3, [r7, #14]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d002      	beq.n	2f8c <usb_d_ctrl_trans_done+0x58>
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	785b      	ldrb	r3, [r3, #1]
    2f8a:	e004      	b.n	2f96 <usb_d_ctrl_trans_done+0x62>
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	785b      	ldrb	r3, [r3, #1]
    2f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f94:	b2db      	uxtb	r3, r3
    2f96:	2101      	movs	r1, #1
    2f98:	4618      	mov	r0, r3
    2f9a:	4b15      	ldr	r3, [pc, #84]	; (2ff0 <usb_d_ctrl_trans_done+0xbc>)
    2f9c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2f9e:	e022      	b.n	2fe6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	2204      	movs	r2, #4
    2fa4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	7858      	ldrb	r0, [r3, #1]
    2faa:	7bbb      	ldrb	r3, [r7, #14]
    2fac:	2b00      	cmp	r3, #0
    2fae:	bf14      	ite	ne
    2fb0:	2301      	movne	r3, #1
    2fb2:	2300      	moveq	r3, #0
    2fb4:	b2db      	uxtb	r3, r3
    2fb6:	f083 0301 	eor.w	r3, r3, #1
    2fba:	b2db      	uxtb	r3, r3
    2fbc:	f003 0301 	and.w	r3, r3, #1
    2fc0:	b2d9      	uxtb	r1, r3
    2fc2:	2301      	movs	r3, #1
    2fc4:	9300      	str	r3, [sp, #0]
    2fc6:	2300      	movs	r3, #0
    2fc8:	2200      	movs	r2, #0
    2fca:	4c0a      	ldr	r4, [pc, #40]	; (2ff4 <usb_d_ctrl_trans_done+0xc0>)
    2fcc:	47a0      	blx	r4
}
    2fce:	e00a      	b.n	2fe6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	69db      	ldr	r3, [r3, #28]
    2fd4:	687a      	ldr	r2, [r7, #4]
    2fd6:	7850      	ldrb	r0, [r2, #1]
    2fd8:	687a      	ldr	r2, [r7, #4]
    2fda:	320c      	adds	r2, #12
    2fdc:	2100      	movs	r1, #0
    2fde:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	2202      	movs	r2, #2
    2fe4:	709a      	strb	r2, [r3, #2]
}
    2fe6:	bf00      	nop
    2fe8:	3714      	adds	r7, #20
    2fea:	46bd      	mov	sp, r7
    2fec:	bd90      	pop	{r4, r7, pc}
    2fee:	bf00      	nop
    2ff0:	0000a63d 	.word	0x0000a63d
    2ff4:	00002dad 	.word	0x00002dad

00002ff8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2ff8:	b580      	push	{r7, lr}
    2ffa:	b086      	sub	sp, #24
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	4603      	mov	r3, r0
    3000:	60b9      	str	r1, [r7, #8]
    3002:	607a      	str	r2, [r7, #4]
    3004:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3006:	7bfb      	ldrb	r3, [r7, #15]
    3008:	4618      	mov	r0, r3
    300a:	4b2f      	ldr	r3, [pc, #188]	; (30c8 <_usb_d_cb_trans_done+0xd0>)
    300c:	4798      	blx	r3
    300e:	4603      	mov	r3, r0
    3010:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3012:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3016:	015b      	lsls	r3, r3, #5
    3018:	4a2c      	ldr	r2, [pc, #176]	; (30cc <_usb_d_cb_trans_done+0xd4>)
    301a:	4413      	add	r3, r2
    301c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    301e:	68bb      	ldr	r3, [r7, #8]
    3020:	2b00      	cmp	r3, #0
    3022:	d10e      	bne.n	3042 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3024:	693b      	ldr	r3, [r7, #16]
    3026:	2200      	movs	r2, #0
    3028:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    302a:	693b      	ldr	r3, [r7, #16]
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	2b00      	cmp	r3, #0
    3030:	d103      	bne.n	303a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3032:	6938      	ldr	r0, [r7, #16]
    3034:	4b26      	ldr	r3, [pc, #152]	; (30d0 <_usb_d_cb_trans_done+0xd8>)
    3036:	4798      	blx	r3
			return;
    3038:	e043      	b.n	30c2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    303a:	693b      	ldr	r3, [r7, #16]
    303c:	2201      	movs	r2, #1
    303e:	709a      	strb	r2, [r3, #2]
    3040:	e038      	b.n	30b4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3042:	68bb      	ldr	r3, [r7, #8]
    3044:	2b01      	cmp	r3, #1
    3046:	d113      	bne.n	3070 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3048:	693b      	ldr	r3, [r7, #16]
    304a:	2202      	movs	r2, #2
    304c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    304e:	693b      	ldr	r3, [r7, #16]
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	2b00      	cmp	r3, #0
    3054:	d108      	bne.n	3068 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3056:	693b      	ldr	r3, [r7, #16]
    3058:	2202      	movs	r2, #2
    305a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    305c:	7bfb      	ldrb	r3, [r7, #15]
    305e:	2100      	movs	r1, #0
    3060:	4618      	mov	r0, r3
    3062:	4b1c      	ldr	r3, [pc, #112]	; (30d4 <_usb_d_cb_trans_done+0xdc>)
    3064:	4798      	blx	r3
    3066:	e025      	b.n	30b4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3068:	693b      	ldr	r3, [r7, #16]
    306a:	2205      	movs	r2, #5
    306c:	709a      	strb	r2, [r3, #2]
    306e:	e021      	b.n	30b4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3070:	68bb      	ldr	r3, [r7, #8]
    3072:	2b02      	cmp	r3, #2
    3074:	d10e      	bne.n	3094 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3076:	693b      	ldr	r3, [r7, #16]
    3078:	2204      	movs	r2, #4
    307a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    307c:	693b      	ldr	r3, [r7, #16]
    307e:	781b      	ldrb	r3, [r3, #0]
    3080:	2b00      	cmp	r3, #0
    3082:	d103      	bne.n	308c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3084:	693b      	ldr	r3, [r7, #16]
    3086:	2202      	movs	r2, #2
    3088:	709a      	strb	r2, [r3, #2]
			return;
    308a:	e01a      	b.n	30c2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    308c:	693b      	ldr	r3, [r7, #16]
    308e:	2201      	movs	r2, #1
    3090:	709a      	strb	r2, [r3, #2]
    3092:	e00f      	b.n	30b4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3094:	68bb      	ldr	r3, [r7, #8]
    3096:	2b03      	cmp	r3, #3
    3098:	d106      	bne.n	30a8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    309a:	693b      	ldr	r3, [r7, #16]
    309c:	2200      	movs	r2, #0
    309e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    30a0:	693b      	ldr	r3, [r7, #16]
    30a2:	2205      	movs	r2, #5
    30a4:	70da      	strb	r2, [r3, #3]
    30a6:	e005      	b.n	30b4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    30a8:	693b      	ldr	r3, [r7, #16]
    30aa:	2206      	movs	r2, #6
    30ac:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    30ae:	693b      	ldr	r3, [r7, #16]
    30b0:	2206      	movs	r2, #6
    30b2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    30b4:	693b      	ldr	r3, [r7, #16]
    30b6:	69db      	ldr	r3, [r3, #28]
    30b8:	693a      	ldr	r2, [r7, #16]
    30ba:	78d1      	ldrb	r1, [r2, #3]
    30bc:	687a      	ldr	r2, [r7, #4]
    30be:	7bf8      	ldrb	r0, [r7, #15]
    30c0:	4798      	blx	r3
}
    30c2:	3718      	adds	r7, #24
    30c4:	46bd      	mov	sp, r7
    30c6:	bd80      	pop	{r7, pc}
    30c8:	00002d2d 	.word	0x00002d2d
    30cc:	20000a90 	.word	0x20000a90
    30d0:	00002f35 	.word	0x00002f35
    30d4:	0000a63d 	.word	0x0000a63d

000030d8 <usb_d_init>:

int32_t usb_d_init(void)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b082      	sub	sp, #8
    30dc:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    30de:	4b21      	ldr	r3, [pc, #132]	; (3164 <usb_d_init+0x8c>)
    30e0:	4798      	blx	r3
    30e2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    30e4:	683b      	ldr	r3, [r7, #0]
    30e6:	2b00      	cmp	r3, #0
    30e8:	da01      	bge.n	30ee <usb_d_init+0x16>
		return rc;
    30ea:	683b      	ldr	r3, [r7, #0]
    30ec:	e036      	b.n	315c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    30ee:	2280      	movs	r2, #128	; 0x80
    30f0:	2100      	movs	r1, #0
    30f2:	481d      	ldr	r0, [pc, #116]	; (3168 <usb_d_init+0x90>)
    30f4:	4b1d      	ldr	r3, [pc, #116]	; (316c <usb_d_init+0x94>)
    30f6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    30f8:	2300      	movs	r3, #0
    30fa:	71fb      	strb	r3, [r7, #7]
    30fc:	e01e      	b.n	313c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    30fe:	79fb      	ldrb	r3, [r7, #7]
    3100:	4a19      	ldr	r2, [pc, #100]	; (3168 <usb_d_init+0x90>)
    3102:	015b      	lsls	r3, r3, #5
    3104:	4413      	add	r3, r2
    3106:	3301      	adds	r3, #1
    3108:	22ff      	movs	r2, #255	; 0xff
    310a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    310c:	79fb      	ldrb	r3, [r7, #7]
    310e:	4a16      	ldr	r2, [pc, #88]	; (3168 <usb_d_init+0x90>)
    3110:	015b      	lsls	r3, r3, #5
    3112:	4413      	add	r3, r2
    3114:	3314      	adds	r3, #20
    3116:	4a16      	ldr	r2, [pc, #88]	; (3170 <usb_d_init+0x98>)
    3118:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    311a:	79fb      	ldrb	r3, [r7, #7]
    311c:	4a12      	ldr	r2, [pc, #72]	; (3168 <usb_d_init+0x90>)
    311e:	015b      	lsls	r3, r3, #5
    3120:	4413      	add	r3, r2
    3122:	3318      	adds	r3, #24
    3124:	4a12      	ldr	r2, [pc, #72]	; (3170 <usb_d_init+0x98>)
    3126:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3128:	79fb      	ldrb	r3, [r7, #7]
    312a:	4a0f      	ldr	r2, [pc, #60]	; (3168 <usb_d_init+0x90>)
    312c:	015b      	lsls	r3, r3, #5
    312e:	4413      	add	r3, r2
    3130:	331c      	adds	r3, #28
    3132:	4a0f      	ldr	r2, [pc, #60]	; (3170 <usb_d_init+0x98>)
    3134:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3136:	79fb      	ldrb	r3, [r7, #7]
    3138:	3301      	adds	r3, #1
    313a:	71fb      	strb	r3, [r7, #7]
    313c:	79fb      	ldrb	r3, [r7, #7]
    313e:	2b03      	cmp	r3, #3
    3140:	d9dd      	bls.n	30fe <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3142:	490c      	ldr	r1, [pc, #48]	; (3174 <usb_d_init+0x9c>)
    3144:	2000      	movs	r0, #0
    3146:	4b0c      	ldr	r3, [pc, #48]	; (3178 <usb_d_init+0xa0>)
    3148:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    314a:	490c      	ldr	r1, [pc, #48]	; (317c <usb_d_init+0xa4>)
    314c:	2001      	movs	r0, #1
    314e:	4b0a      	ldr	r3, [pc, #40]	; (3178 <usb_d_init+0xa0>)
    3150:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3152:	490b      	ldr	r1, [pc, #44]	; (3180 <usb_d_init+0xa8>)
    3154:	2002      	movs	r0, #2
    3156:	4b08      	ldr	r3, [pc, #32]	; (3178 <usb_d_init+0xa0>)
    3158:	4798      	blx	r3
	return ERR_NONE;
    315a:	2300      	movs	r3, #0
}
    315c:	4618      	mov	r0, r3
    315e:	3708      	adds	r7, #8
    3160:	46bd      	mov	sp, r7
    3162:	bd80      	pop	{r7, pc}
    3164:	00009e85 	.word	0x00009e85
    3168:	20000a90 	.word	0x20000a90
    316c:	00011d51 	.word	0x00011d51
    3170:	00002e01 	.word	0x00002e01
    3174:	00002e1d 	.word	0x00002e1d
    3178:	0000aacd 	.word	0x0000aacd
    317c:	00002ee5 	.word	0x00002ee5
    3180:	00002ff9 	.word	0x00002ff9

00003184 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3184:	b580      	push	{r7, lr}
    3186:	b082      	sub	sp, #8
    3188:	af00      	add	r7, sp, #0
    318a:	4603      	mov	r3, r0
    318c:	6039      	str	r1, [r7, #0]
    318e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3190:	79fb      	ldrb	r3, [r7, #7]
    3192:	6839      	ldr	r1, [r7, #0]
    3194:	4618      	mov	r0, r3
    3196:	4b03      	ldr	r3, [pc, #12]	; (31a4 <usb_d_register_callback+0x20>)
    3198:	4798      	blx	r3
}
    319a:	bf00      	nop
    319c:	3708      	adds	r7, #8
    319e:	46bd      	mov	sp, r7
    31a0:	bd80      	pop	{r7, pc}
    31a2:	bf00      	nop
    31a4:	0000aa85 	.word	0x0000aa85

000031a8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    31a8:	b580      	push	{r7, lr}
    31aa:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    31ac:	4b02      	ldr	r3, [pc, #8]	; (31b8 <usb_d_enable+0x10>)
    31ae:	4798      	blx	r3
    31b0:	4603      	mov	r3, r0
}
    31b2:	4618      	mov	r0, r3
    31b4:	bd80      	pop	{r7, pc}
    31b6:	bf00      	nop
    31b8:	00009f75 	.word	0x00009f75

000031bc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    31bc:	b580      	push	{r7, lr}
    31be:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    31c0:	4b01      	ldr	r3, [pc, #4]	; (31c8 <usb_d_attach+0xc>)
    31c2:	4798      	blx	r3
}
    31c4:	bf00      	nop
    31c6:	bd80      	pop	{r7, pc}
    31c8:	00009ff9 	.word	0x00009ff9

000031cc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	b082      	sub	sp, #8
    31d0:	af00      	add	r7, sp, #0
    31d2:	4603      	mov	r3, r0
    31d4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    31d6:	79fb      	ldrb	r3, [r7, #7]
    31d8:	4618      	mov	r0, r3
    31da:	4b03      	ldr	r3, [pc, #12]	; (31e8 <usb_d_set_address+0x1c>)
    31dc:	4798      	blx	r3
}
    31de:	bf00      	nop
    31e0:	3708      	adds	r7, #8
    31e2:	46bd      	mov	sp, r7
    31e4:	bd80      	pop	{r7, pc}
    31e6:	bf00      	nop
    31e8:	0000a00d 	.word	0x0000a00d

000031ec <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    31ec:	b580      	push	{r7, lr}
    31ee:	b082      	sub	sp, #8
    31f0:	af00      	add	r7, sp, #0
    31f2:	4603      	mov	r3, r0
    31f4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    31f6:	79fb      	ldrb	r3, [r7, #7]
    31f8:	b29b      	uxth	r3, r3
    31fa:	461a      	mov	r2, r3
    31fc:	2100      	movs	r1, #0
    31fe:	2000      	movs	r0, #0
    3200:	4b03      	ldr	r3, [pc, #12]	; (3210 <usb_d_ep0_init+0x24>)
    3202:	4798      	blx	r3
    3204:	4603      	mov	r3, r0
}
    3206:	4618      	mov	r0, r3
    3208:	3708      	adds	r7, #8
    320a:	46bd      	mov	sp, r7
    320c:	bd80      	pop	{r7, pc}
    320e:	bf00      	nop
    3210:	00003215 	.word	0x00003215

00003214 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3214:	b580      	push	{r7, lr}
    3216:	b086      	sub	sp, #24
    3218:	af00      	add	r7, sp, #0
    321a:	4603      	mov	r3, r0
    321c:	71fb      	strb	r3, [r7, #7]
    321e:	460b      	mov	r3, r1
    3220:	71bb      	strb	r3, [r7, #6]
    3222:	4613      	mov	r3, r2
    3224:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3226:	79fb      	ldrb	r3, [r7, #7]
    3228:	4618      	mov	r0, r3
    322a:	4b1e      	ldr	r3, [pc, #120]	; (32a4 <usb_d_ep_init+0x90>)
    322c:	4798      	blx	r3
    322e:	4603      	mov	r3, r0
    3230:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3232:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3236:	015b      	lsls	r3, r3, #5
    3238:	4a1b      	ldr	r2, [pc, #108]	; (32a8 <usb_d_ep_init+0x94>)
    323a:	4413      	add	r3, r2
    323c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    323e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3242:	2b00      	cmp	r3, #0
    3244:	db02      	blt.n	324c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3246:	f06f 0313 	mvn.w	r3, #19
    324a:	e027      	b.n	329c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    324c:	20ff      	movs	r0, #255	; 0xff
    324e:	4b15      	ldr	r3, [pc, #84]	; (32a4 <usb_d_ep_init+0x90>)
    3250:	4798      	blx	r3
    3252:	4603      	mov	r3, r0
    3254:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3256:	f997 3017 	ldrsb.w	r3, [r7, #23]
    325a:	2b00      	cmp	r3, #0
    325c:	da02      	bge.n	3264 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    325e:	f06f 0314 	mvn.w	r3, #20
    3262:	e01b      	b.n	329c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3264:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3268:	015b      	lsls	r3, r3, #5
    326a:	4a0f      	ldr	r2, [pc, #60]	; (32a8 <usb_d_ep_init+0x94>)
    326c:	4413      	add	r3, r2
    326e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3270:	88ba      	ldrh	r2, [r7, #4]
    3272:	79b9      	ldrb	r1, [r7, #6]
    3274:	79fb      	ldrb	r3, [r7, #7]
    3276:	4618      	mov	r0, r3
    3278:	4b0c      	ldr	r3, [pc, #48]	; (32ac <usb_d_ep_init+0x98>)
    327a:	4798      	blx	r3
    327c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    327e:	68fb      	ldr	r3, [r7, #12]
    3280:	2b00      	cmp	r3, #0
    3282:	da01      	bge.n	3288 <usb_d_ep_init+0x74>
		return rc;
    3284:	68fb      	ldr	r3, [r7, #12]
    3286:	e009      	b.n	329c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3288:	693b      	ldr	r3, [r7, #16]
    328a:	79fa      	ldrb	r2, [r7, #7]
    328c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    328e:	79bb      	ldrb	r3, [r7, #6]
    3290:	f003 0303 	and.w	r3, r3, #3
    3294:	b2da      	uxtb	r2, r3
    3296:	693b      	ldr	r3, [r7, #16]
    3298:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    329a:	2300      	movs	r3, #0
}
    329c:	4618      	mov	r0, r3
    329e:	3718      	adds	r7, #24
    32a0:	46bd      	mov	sp, r7
    32a2:	bd80      	pop	{r7, pc}
    32a4:	00002d2d 	.word	0x00002d2d
    32a8:	20000a90 	.word	0x20000a90
    32ac:	0000a0ad 	.word	0x0000a0ad

000032b0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    32b0:	b580      	push	{r7, lr}
    32b2:	b084      	sub	sp, #16
    32b4:	af00      	add	r7, sp, #0
    32b6:	4603      	mov	r3, r0
    32b8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    32ba:	79fb      	ldrb	r3, [r7, #7]
    32bc:	4618      	mov	r0, r3
    32be:	4b0d      	ldr	r3, [pc, #52]	; (32f4 <usb_d_ep_deinit+0x44>)
    32c0:	4798      	blx	r3
    32c2:	4603      	mov	r3, r0
    32c4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    32ca:	015b      	lsls	r3, r3, #5
    32cc:	4a0a      	ldr	r2, [pc, #40]	; (32f8 <usb_d_ep_deinit+0x48>)
    32ce:	4413      	add	r3, r2
    32d0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    32d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    32d6:	2b00      	cmp	r3, #0
    32d8:	db07      	blt.n	32ea <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    32da:	79fb      	ldrb	r3, [r7, #7]
    32dc:	4618      	mov	r0, r3
    32de:	4b07      	ldr	r3, [pc, #28]	; (32fc <usb_d_ep_deinit+0x4c>)
    32e0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    32e2:	68bb      	ldr	r3, [r7, #8]
    32e4:	22ff      	movs	r2, #255	; 0xff
    32e6:	705a      	strb	r2, [r3, #1]
    32e8:	e000      	b.n	32ec <usb_d_ep_deinit+0x3c>
		return;
    32ea:	bf00      	nop
}
    32ec:	3710      	adds	r7, #16
    32ee:	46bd      	mov	sp, r7
    32f0:	bd80      	pop	{r7, pc}
    32f2:	bf00      	nop
    32f4:	00002d2d 	.word	0x00002d2d
    32f8:	20000a90 	.word	0x20000a90
    32fc:	0000a1e1 	.word	0x0000a1e1

00003300 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3300:	b580      	push	{r7, lr}
    3302:	b086      	sub	sp, #24
    3304:	af00      	add	r7, sp, #0
    3306:	4603      	mov	r3, r0
    3308:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    330a:	79fb      	ldrb	r3, [r7, #7]
    330c:	4618      	mov	r0, r3
    330e:	4b15      	ldr	r3, [pc, #84]	; (3364 <usb_d_ep_enable+0x64>)
    3310:	4798      	blx	r3
    3312:	4603      	mov	r3, r0
    3314:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3316:	f997 3017 	ldrsb.w	r3, [r7, #23]
    331a:	015b      	lsls	r3, r3, #5
    331c:	4a12      	ldr	r2, [pc, #72]	; (3368 <usb_d_ep_enable+0x68>)
    331e:	4413      	add	r3, r2
    3320:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3322:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3326:	2b00      	cmp	r3, #0
    3328:	da02      	bge.n	3330 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    332a:	f06f 0311 	mvn.w	r3, #17
    332e:	e014      	b.n	335a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3330:	693b      	ldr	r3, [r7, #16]
    3332:	781b      	ldrb	r3, [r3, #0]
    3334:	2b00      	cmp	r3, #0
    3336:	d101      	bne.n	333c <usb_d_ep_enable+0x3c>
    3338:	2202      	movs	r2, #2
    333a:	e000      	b.n	333e <usb_d_ep_enable+0x3e>
    333c:	2201      	movs	r2, #1
    333e:	693b      	ldr	r3, [r7, #16]
    3340:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3342:	79fb      	ldrb	r3, [r7, #7]
    3344:	4618      	mov	r0, r3
    3346:	4b09      	ldr	r3, [pc, #36]	; (336c <usb_d_ep_enable+0x6c>)
    3348:	4798      	blx	r3
    334a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    334c:	68fb      	ldr	r3, [r7, #12]
    334e:	2b00      	cmp	r3, #0
    3350:	da02      	bge.n	3358 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3352:	693b      	ldr	r3, [r7, #16]
    3354:	2200      	movs	r2, #0
    3356:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3358:	68fb      	ldr	r3, [r7, #12]
}
    335a:	4618      	mov	r0, r3
    335c:	3718      	adds	r7, #24
    335e:	46bd      	mov	sp, r7
    3360:	bd80      	pop	{r7, pc}
    3362:	bf00      	nop
    3364:	00002d2d 	.word	0x00002d2d
    3368:	20000a90 	.word	0x20000a90
    336c:	0000a2c5 	.word	0x0000a2c5

00003370 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3370:	b590      	push	{r4, r7, lr}
    3372:	b08d      	sub	sp, #52	; 0x34
    3374:	af02      	add	r7, sp, #8
    3376:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	7a1b      	ldrb	r3, [r3, #8]
    337c:	4618      	mov	r0, r3
    337e:	4b51      	ldr	r3, [pc, #324]	; (34c4 <usb_d_ep_transfer+0x154>)
    3380:	4798      	blx	r3
    3382:	4603      	mov	r3, r0
    3384:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3386:	f997 301f 	ldrsb.w	r3, [r7, #31]
    338a:	015b      	lsls	r3, r3, #5
    338c:	4a4e      	ldr	r2, [pc, #312]	; (34c8 <usb_d_ep_transfer+0x158>)
    338e:	4413      	add	r3, r2
    3390:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	7a1b      	ldrb	r3, [r3, #8]
    3396:	f003 0380 	and.w	r3, r3, #128	; 0x80
    339a:	2b00      	cmp	r3, #0
    339c:	bf14      	ite	ne
    339e:	2301      	movne	r3, #1
    33a0:	2300      	moveq	r3, #0
    33a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	7a5b      	ldrb	r3, [r3, #9]
    33aa:	2b00      	cmp	r3, #0
    33ac:	bf14      	ite	ne
    33ae:	2301      	movne	r3, #1
    33b0:	2300      	moveq	r3, #0
    33b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	685b      	ldr	r3, [r3, #4]
    33ba:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    33bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    33c0:	2b00      	cmp	r3, #0
    33c2:	da02      	bge.n	33ca <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    33c4:	f06f 0311 	mvn.w	r3, #17
    33c8:	e077      	b.n	34ba <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    33ca:	f107 0308 	add.w	r3, r7, #8
    33ce:	4618      	mov	r0, r3
    33d0:	4b3e      	ldr	r3, [pc, #248]	; (34cc <usb_d_ep_transfer+0x15c>)
    33d2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    33d4:	69bb      	ldr	r3, [r7, #24]
    33d6:	789b      	ldrb	r3, [r3, #2]
    33d8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    33da:	7bfb      	ldrb	r3, [r7, #15]
    33dc:	b2db      	uxtb	r3, r3
    33de:	2b01      	cmp	r3, #1
    33e0:	d10c      	bne.n	33fc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    33e2:	69bb      	ldr	r3, [r7, #24]
    33e4:	2203      	movs	r2, #3
    33e6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    33e8:	f107 0308 	add.w	r3, r7, #8
    33ec:	4618      	mov	r0, r3
    33ee:	4b38      	ldr	r3, [pc, #224]	; (34d0 <usb_d_ep_transfer+0x160>)
    33f0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    33f2:	69bb      	ldr	r3, [r7, #24]
    33f4:	781b      	ldrb	r3, [r3, #0]
    33f6:	2b00      	cmp	r3, #0
    33f8:	d151      	bne.n	349e <usb_d_ep_transfer+0x12e>
    33fa:	e017      	b.n	342c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    33fc:	f107 0308 	add.w	r3, r7, #8
    3400:	4618      	mov	r0, r3
    3402:	4b33      	ldr	r3, [pc, #204]	; (34d0 <usb_d_ep_transfer+0x160>)
    3404:	4798      	blx	r3
		switch (state) {
    3406:	7bfb      	ldrb	r3, [r7, #15]
    3408:	b2db      	uxtb	r3, r3
    340a:	2b05      	cmp	r3, #5
    340c:	d004      	beq.n	3418 <usb_d_ep_transfer+0xa8>
    340e:	2b06      	cmp	r3, #6
    3410:	d004      	beq.n	341c <usb_d_ep_transfer+0xac>
    3412:	2b00      	cmp	r3, #0
    3414:	d005      	beq.n	3422 <usb_d_ep_transfer+0xb2>
    3416:	e007      	b.n	3428 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3418:	2302      	movs	r3, #2
    341a:	e04e      	b.n	34ba <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    341c:	f06f 030f 	mvn.w	r3, #15
    3420:	e04b      	b.n	34ba <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3422:	f06f 0312 	mvn.w	r3, #18
    3426:	e048      	b.n	34ba <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3428:	2301      	movs	r3, #1
    342a:	e046      	b.n	34ba <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    342c:	69bb      	ldr	r3, [r7, #24]
    342e:	7c9b      	ldrb	r3, [r3, #18]
    3430:	b29a      	uxth	r2, r3
    3432:	69bb      	ldr	r3, [r7, #24]
    3434:	7cdb      	ldrb	r3, [r3, #19]
    3436:	b29b      	uxth	r3, r3
    3438:	021b      	lsls	r3, r3, #8
    343a:	b29b      	uxth	r3, r3
    343c:	4413      	add	r3, r2
    343e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3440:	8afb      	ldrh	r3, [r7, #22]
    3442:	2b00      	cmp	r3, #0
    3444:	d10b      	bne.n	345e <usb_d_ep_transfer+0xee>
			dir                 = true;
    3446:	2301      	movs	r3, #1
    3448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    344c:	2300      	movs	r3, #0
    344e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3450:	2301      	movs	r3, #1
    3452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3456:	69bb      	ldr	r3, [r7, #24]
    3458:	2204      	movs	r2, #4
    345a:	709a      	strb	r2, [r3, #2]
    345c:	e01f      	b.n	349e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    345e:	69bb      	ldr	r3, [r7, #24]
    3460:	7b1b      	ldrb	r3, [r3, #12]
    3462:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3466:	2b00      	cmp	r3, #0
    3468:	bf14      	ite	ne
    346a:	2301      	movne	r3, #1
    346c:	2300      	moveq	r3, #0
    346e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3472:	8afa      	ldrh	r2, [r7, #22]
    3474:	6a3b      	ldr	r3, [r7, #32]
    3476:	429a      	cmp	r2, r3
    3478:	d201      	bcs.n	347e <usb_d_ep_transfer+0x10e>
				len = req_len;
    347a:	8afb      	ldrh	r3, [r7, #22]
    347c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    347e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3482:	2b00      	cmp	r3, #0
    3484:	d008      	beq.n	3498 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3486:	8afa      	ldrh	r2, [r7, #22]
    3488:	6a3b      	ldr	r3, [r7, #32]
    348a:	429a      	cmp	r2, r3
    348c:	bf8c      	ite	hi
    348e:	2301      	movhi	r3, #1
    3490:	2300      	movls	r3, #0
    3492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3496:	e002      	b.n	349e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3498:	2300      	movs	r3, #0
    349a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    349e:	687b      	ldr	r3, [r7, #4]
    34a0:	7a18      	ldrb	r0, [r3, #8]
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	681a      	ldr	r2, [r3, #0]
    34a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    34aa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    34ae:	9300      	str	r3, [sp, #0]
    34b0:	6a3b      	ldr	r3, [r7, #32]
    34b2:	4c08      	ldr	r4, [pc, #32]	; (34d4 <usb_d_ep_transfer+0x164>)
    34b4:	47a0      	blx	r4
    34b6:	6138      	str	r0, [r7, #16]
	return rc;
    34b8:	693b      	ldr	r3, [r7, #16]
}
    34ba:	4618      	mov	r0, r3
    34bc:	372c      	adds	r7, #44	; 0x2c
    34be:	46bd      	mov	sp, r7
    34c0:	bd90      	pop	{r4, r7, pc}
    34c2:	bf00      	nop
    34c4:	00002d2d 	.word	0x00002d2d
    34c8:	20000a90 	.word	0x20000a90
    34cc:	0000b239 	.word	0x0000b239
    34d0:	0000b25f 	.word	0x0000b25f
    34d4:	00002dad 	.word	0x00002dad

000034d8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    34d8:	b580      	push	{r7, lr}
    34da:	b084      	sub	sp, #16
    34dc:	af00      	add	r7, sp, #0
    34de:	4603      	mov	r3, r0
    34e0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    34e2:	79fb      	ldrb	r3, [r7, #7]
    34e4:	4618      	mov	r0, r3
    34e6:	4b0e      	ldr	r3, [pc, #56]	; (3520 <usb_d_ep_abort+0x48>)
    34e8:	4798      	blx	r3
    34ea:	4603      	mov	r3, r0
    34ec:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34f2:	015b      	lsls	r3, r3, #5
    34f4:	4a0b      	ldr	r2, [pc, #44]	; (3524 <usb_d_ep_abort+0x4c>)
    34f6:	4413      	add	r3, r2
    34f8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    34fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34fe:	2b00      	cmp	r3, #0
    3500:	db0a      	blt.n	3518 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3502:	79fb      	ldrb	r3, [r7, #7]
    3504:	4618      	mov	r0, r3
    3506:	4b08      	ldr	r3, [pc, #32]	; (3528 <usb_d_ep_abort+0x50>)
    3508:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    350a:	68bb      	ldr	r3, [r7, #8]
    350c:	2201      	movs	r2, #1
    350e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3510:	68bb      	ldr	r3, [r7, #8]
    3512:	2204      	movs	r2, #4
    3514:	70da      	strb	r2, [r3, #3]
    3516:	e000      	b.n	351a <usb_d_ep_abort+0x42>
		return;
    3518:	bf00      	nop
}
    351a:	3710      	adds	r7, #16
    351c:	46bd      	mov	sp, r7
    351e:	bd80      	pop	{r7, pc}
    3520:	00002d2d 	.word	0x00002d2d
    3524:	20000a90 	.word	0x20000a90
    3528:	0000aa31 	.word	0x0000aa31

0000352c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    352c:	b580      	push	{r7, lr}
    352e:	b086      	sub	sp, #24
    3530:	af00      	add	r7, sp, #0
    3532:	4603      	mov	r3, r0
    3534:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3536:	79fb      	ldrb	r3, [r7, #7]
    3538:	4618      	mov	r0, r3
    353a:	4b1a      	ldr	r3, [pc, #104]	; (35a4 <_usb_d_ep_halt_clr+0x78>)
    353c:	4798      	blx	r3
    353e:	4603      	mov	r3, r0
    3540:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3542:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3546:	015b      	lsls	r3, r3, #5
    3548:	4a17      	ldr	r2, [pc, #92]	; (35a8 <_usb_d_ep_halt_clr+0x7c>)
    354a:	4413      	add	r3, r2
    354c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    354e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3552:	2b00      	cmp	r3, #0
    3554:	da02      	bge.n	355c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3556:	f06f 0311 	mvn.w	r3, #17
    355a:	e01f      	b.n	359c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    355c:	79fb      	ldrb	r3, [r7, #7]
    355e:	2102      	movs	r1, #2
    3560:	4618      	mov	r0, r3
    3562:	4b12      	ldr	r3, [pc, #72]	; (35ac <_usb_d_ep_halt_clr+0x80>)
    3564:	4798      	blx	r3
    3566:	4603      	mov	r3, r0
    3568:	2b00      	cmp	r3, #0
    356a:	d016      	beq.n	359a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    356c:	79fb      	ldrb	r3, [r7, #7]
    356e:	2100      	movs	r1, #0
    3570:	4618      	mov	r0, r3
    3572:	4b0e      	ldr	r3, [pc, #56]	; (35ac <_usb_d_ep_halt_clr+0x80>)
    3574:	4798      	blx	r3
    3576:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3578:	68fb      	ldr	r3, [r7, #12]
    357a:	2b00      	cmp	r3, #0
    357c:	da01      	bge.n	3582 <_usb_d_ep_halt_clr+0x56>
			return rc;
    357e:	68fb      	ldr	r3, [r7, #12]
    3580:	e00c      	b.n	359c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3582:	693b      	ldr	r3, [r7, #16]
    3584:	2201      	movs	r2, #1
    3586:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3588:	693b      	ldr	r3, [r7, #16]
    358a:	2203      	movs	r2, #3
    358c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    358e:	693b      	ldr	r3, [r7, #16]
    3590:	69db      	ldr	r3, [r3, #28]
    3592:	79f8      	ldrb	r0, [r7, #7]
    3594:	2200      	movs	r2, #0
    3596:	2103      	movs	r1, #3
    3598:	4798      	blx	r3
	}
	return ERR_NONE;
    359a:	2300      	movs	r3, #0
}
    359c:	4618      	mov	r0, r3
    359e:	3718      	adds	r7, #24
    35a0:	46bd      	mov	sp, r7
    35a2:	bd80      	pop	{r7, pc}
    35a4:	00002d2d 	.word	0x00002d2d
    35a8:	20000a90 	.word	0x20000a90
    35ac:	0000a63d 	.word	0x0000a63d

000035b0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b082      	sub	sp, #8
    35b4:	af00      	add	r7, sp, #0
    35b6:	4603      	mov	r3, r0
    35b8:	460a      	mov	r2, r1
    35ba:	71fb      	strb	r3, [r7, #7]
    35bc:	4613      	mov	r3, r2
    35be:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    35c0:	79bb      	ldrb	r3, [r7, #6]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d105      	bne.n	35d2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    35c6:	79fb      	ldrb	r3, [r7, #7]
    35c8:	4618      	mov	r0, r3
    35ca:	4b0c      	ldr	r3, [pc, #48]	; (35fc <usb_d_ep_halt+0x4c>)
    35cc:	4798      	blx	r3
    35ce:	4603      	mov	r3, r0
    35d0:	e00f      	b.n	35f2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    35d2:	79bb      	ldrb	r3, [r7, #6]
    35d4:	2b01      	cmp	r3, #1
    35d6:	d106      	bne.n	35e6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    35d8:	79fb      	ldrb	r3, [r7, #7]
    35da:	2101      	movs	r1, #1
    35dc:	4618      	mov	r0, r3
    35de:	4b08      	ldr	r3, [pc, #32]	; (3600 <usb_d_ep_halt+0x50>)
    35e0:	4798      	blx	r3
    35e2:	4603      	mov	r3, r0
    35e4:	e005      	b.n	35f2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    35e6:	79fb      	ldrb	r3, [r7, #7]
    35e8:	2102      	movs	r1, #2
    35ea:	4618      	mov	r0, r3
    35ec:	4b04      	ldr	r3, [pc, #16]	; (3600 <usb_d_ep_halt+0x50>)
    35ee:	4798      	blx	r3
    35f0:	4603      	mov	r3, r0
	}
}
    35f2:	4618      	mov	r0, r3
    35f4:	3708      	adds	r7, #8
    35f6:	46bd      	mov	sp, r7
    35f8:	bd80      	pop	{r7, pc}
    35fa:	bf00      	nop
    35fc:	0000352d 	.word	0x0000352d
    3600:	0000a63d 	.word	0x0000a63d

00003604 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3604:	b580      	push	{r7, lr}
    3606:	b086      	sub	sp, #24
    3608:	af00      	add	r7, sp, #0
    360a:	4603      	mov	r3, r0
    360c:	603a      	str	r2, [r7, #0]
    360e:	71fb      	strb	r3, [r7, #7]
    3610:	460b      	mov	r3, r1
    3612:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3614:	79fb      	ldrb	r3, [r7, #7]
    3616:	4618      	mov	r0, r3
    3618:	4b16      	ldr	r3, [pc, #88]	; (3674 <usb_d_ep_register_callback+0x70>)
    361a:	4798      	blx	r3
    361c:	4603      	mov	r3, r0
    361e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3620:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3624:	015b      	lsls	r3, r3, #5
    3626:	4a14      	ldr	r2, [pc, #80]	; (3678 <usb_d_ep_register_callback+0x74>)
    3628:	4413      	add	r3, r2
    362a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    362c:	683b      	ldr	r3, [r7, #0]
    362e:	2b00      	cmp	r3, #0
    3630:	d001      	beq.n	3636 <usb_d_ep_register_callback+0x32>
    3632:	683b      	ldr	r3, [r7, #0]
    3634:	e000      	b.n	3638 <usb_d_ep_register_callback+0x34>
    3636:	4b11      	ldr	r3, [pc, #68]	; (367c <usb_d_ep_register_callback+0x78>)
    3638:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    363a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    363e:	2b00      	cmp	r3, #0
    3640:	db13      	blt.n	366a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3642:	79bb      	ldrb	r3, [r7, #6]
    3644:	2b01      	cmp	r3, #1
    3646:	d008      	beq.n	365a <usb_d_ep_register_callback+0x56>
    3648:	2b02      	cmp	r3, #2
    364a:	d00a      	beq.n	3662 <usb_d_ep_register_callback+0x5e>
    364c:	2b00      	cmp	r3, #0
    364e:	d000      	beq.n	3652 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3650:	e00c      	b.n	366c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3652:	693b      	ldr	r3, [r7, #16]
    3654:	68fa      	ldr	r2, [r7, #12]
    3656:	615a      	str	r2, [r3, #20]
		break;
    3658:	e008      	b.n	366c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    365a:	693b      	ldr	r3, [r7, #16]
    365c:	68fa      	ldr	r2, [r7, #12]
    365e:	619a      	str	r2, [r3, #24]
		break;
    3660:	e004      	b.n	366c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3662:	693b      	ldr	r3, [r7, #16]
    3664:	68fa      	ldr	r2, [r7, #12]
    3666:	61da      	str	r2, [r3, #28]
		break;
    3668:	e000      	b.n	366c <usb_d_ep_register_callback+0x68>
		return;
    366a:	bf00      	nop
	}
}
    366c:	3718      	adds	r7, #24
    366e:	46bd      	mov	sp, r7
    3670:	bd80      	pop	{r7, pc}
    3672:	bf00      	nop
    3674:	00002d2d 	.word	0x00002d2d
    3678:	20000a90 	.word	0x20000a90
    367c:	00002e01 	.word	0x00002e01

00003680 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3680:	b480      	push	{r7}
    3682:	b085      	sub	sp, #20
    3684:	af00      	add	r7, sp, #0
    3686:	4603      	mov	r3, r0
    3688:	60b9      	str	r1, [r7, #8]
    368a:	607a      	str	r2, [r7, #4]
    368c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    368e:	7bfb      	ldrb	r3, [r7, #15]
    3690:	f083 0301 	eor.w	r3, r3, #1
    3694:	b2db      	uxtb	r3, r3
    3696:	2b00      	cmp	r3, #0
    3698:	d000      	beq.n	369c <assert+0x1c>
		__asm("BKPT #0");
    369a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    369c:	bf00      	nop
    369e:	3714      	adds	r7, #20
    36a0:	46bd      	mov	sp, r7
    36a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    36a6:	4770      	bx	lr

000036a8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    36a8:	b480      	push	{r7}
    36aa:	b085      	sub	sp, #20
    36ac:	af00      	add	r7, sp, #0
    36ae:	6078      	str	r0, [r7, #4]
    36b0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	681b      	ldr	r3, [r3, #0]
    36b6:	60fb      	str	r3, [r7, #12]
    36b8:	e008      	b.n	36cc <is_list_element+0x24>
		if (it == element) {
    36ba:	68fa      	ldr	r2, [r7, #12]
    36bc:	683b      	ldr	r3, [r7, #0]
    36be:	429a      	cmp	r2, r3
    36c0:	d101      	bne.n	36c6 <is_list_element+0x1e>
			return true;
    36c2:	2301      	movs	r3, #1
    36c4:	e006      	b.n	36d4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	681b      	ldr	r3, [r3, #0]
    36ca:	60fb      	str	r3, [r7, #12]
    36cc:	68fb      	ldr	r3, [r7, #12]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d1f3      	bne.n	36ba <is_list_element+0x12>
		}
	}

	return false;
    36d2:	2300      	movs	r3, #0
}
    36d4:	4618      	mov	r0, r3
    36d6:	3714      	adds	r7, #20
    36d8:	46bd      	mov	sp, r7
    36da:	f85d 7b04 	ldr.w	r7, [sp], #4
    36de:	4770      	bx	lr

000036e0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b082      	sub	sp, #8
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
    36e8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    36ea:	6839      	ldr	r1, [r7, #0]
    36ec:	6878      	ldr	r0, [r7, #4]
    36ee:	4b0f      	ldr	r3, [pc, #60]	; (372c <list_insert_as_head+0x4c>)
    36f0:	4798      	blx	r3
    36f2:	4603      	mov	r3, r0
    36f4:	2b00      	cmp	r3, #0
    36f6:	bf14      	ite	ne
    36f8:	2301      	movne	r3, #1
    36fa:	2300      	moveq	r3, #0
    36fc:	b2db      	uxtb	r3, r3
    36fe:	f083 0301 	eor.w	r3, r3, #1
    3702:	b2db      	uxtb	r3, r3
    3704:	f003 0301 	and.w	r3, r3, #1
    3708:	b2db      	uxtb	r3, r3
    370a:	2239      	movs	r2, #57	; 0x39
    370c:	4908      	ldr	r1, [pc, #32]	; (3730 <list_insert_as_head+0x50>)
    370e:	4618      	mov	r0, r3
    3710:	4b08      	ldr	r3, [pc, #32]	; (3734 <list_insert_as_head+0x54>)
    3712:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	681a      	ldr	r2, [r3, #0]
    3718:	683b      	ldr	r3, [r7, #0]
    371a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    371c:	687b      	ldr	r3, [r7, #4]
    371e:	683a      	ldr	r2, [r7, #0]
    3720:	601a      	str	r2, [r3, #0]
}
    3722:	bf00      	nop
    3724:	3708      	adds	r7, #8
    3726:	46bd      	mov	sp, r7
    3728:	bd80      	pop	{r7, pc}
    372a:	bf00      	nop
    372c:	000036a9 	.word	0x000036a9
    3730:	0001214c 	.word	0x0001214c
    3734:	00003681 	.word	0x00003681

00003738 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3738:	b480      	push	{r7}
    373a:	b083      	sub	sp, #12
    373c:	af00      	add	r7, sp, #0
    373e:	6078      	str	r0, [r7, #4]
    3740:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	681a      	ldr	r2, [r3, #0]
    3746:	683b      	ldr	r3, [r7, #0]
    3748:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	683a      	ldr	r2, [r7, #0]
    374e:	601a      	str	r2, [r3, #0]
}
    3750:	bf00      	nop
    3752:	370c      	adds	r7, #12
    3754:	46bd      	mov	sp, r7
    3756:	f85d 7b04 	ldr.w	r7, [sp], #4
    375a:	4770      	bx	lr

0000375c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    375c:	b580      	push	{r7, lr}
    375e:	b084      	sub	sp, #16
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
    3764:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	681b      	ldr	r3, [r3, #0]
    376a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    376c:	6839      	ldr	r1, [r7, #0]
    376e:	6878      	ldr	r0, [r7, #4]
    3770:	4b16      	ldr	r3, [pc, #88]	; (37cc <list_insert_at_end+0x70>)
    3772:	4798      	blx	r3
    3774:	4603      	mov	r3, r0
    3776:	2b00      	cmp	r3, #0
    3778:	bf14      	ite	ne
    377a:	2301      	movne	r3, #1
    377c:	2300      	moveq	r3, #0
    377e:	b2db      	uxtb	r3, r3
    3780:	f083 0301 	eor.w	r3, r3, #1
    3784:	b2db      	uxtb	r3, r3
    3786:	f003 0301 	and.w	r3, r3, #1
    378a:	b2db      	uxtb	r3, r3
    378c:	224f      	movs	r2, #79	; 0x4f
    378e:	4910      	ldr	r1, [pc, #64]	; (37d0 <list_insert_at_end+0x74>)
    3790:	4618      	mov	r0, r3
    3792:	4b10      	ldr	r3, [pc, #64]	; (37d4 <list_insert_at_end+0x78>)
    3794:	4798      	blx	r3

	if (!list->head) {
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	681b      	ldr	r3, [r3, #0]
    379a:	2b00      	cmp	r3, #0
    379c:	d109      	bne.n	37b2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    379e:	687b      	ldr	r3, [r7, #4]
    37a0:	683a      	ldr	r2, [r7, #0]
    37a2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    37a4:	683b      	ldr	r3, [r7, #0]
    37a6:	2200      	movs	r2, #0
    37a8:	601a      	str	r2, [r3, #0]
		return;
    37aa:	e00c      	b.n	37c6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    37b2:	68fb      	ldr	r3, [r7, #12]
    37b4:	681b      	ldr	r3, [r3, #0]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d1f8      	bne.n	37ac <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    37ba:	68fb      	ldr	r3, [r7, #12]
    37bc:	683a      	ldr	r2, [r7, #0]
    37be:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    37c0:	683b      	ldr	r3, [r7, #0]
    37c2:	2200      	movs	r2, #0
    37c4:	601a      	str	r2, [r3, #0]
}
    37c6:	3710      	adds	r7, #16
    37c8:	46bd      	mov	sp, r7
    37ca:	bd80      	pop	{r7, pc}
    37cc:	000036a9 	.word	0x000036a9
    37d0:	0001214c 	.word	0x0001214c
    37d4:	00003681 	.word	0x00003681

000037d8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    37d8:	b480      	push	{r7}
    37da:	b085      	sub	sp, #20
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
	if (list->head) {
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d009      	beq.n	37fc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	681b      	ldr	r3, [r3, #0]
    37ec:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	681b      	ldr	r3, [r3, #0]
    37f2:	681a      	ldr	r2, [r3, #0]
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    37f8:	68fb      	ldr	r3, [r7, #12]
    37fa:	e000      	b.n	37fe <list_remove_head+0x26>
	}

	return NULL;
    37fc:	2300      	movs	r3, #0
}
    37fe:	4618      	mov	r0, r3
    3800:	3714      	adds	r7, #20
    3802:	46bd      	mov	sp, r7
    3804:	f85d 7b04 	ldr.w	r7, [sp], #4
    3808:	4770      	bx	lr

0000380a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    380a:	b480      	push	{r7}
    380c:	b085      	sub	sp, #20
    380e:	af00      	add	r7, sp, #0
    3810:	6078      	str	r0, [r7, #4]
    3812:	6039      	str	r1, [r7, #0]
	if (!element) {
    3814:	683b      	ldr	r3, [r7, #0]
    3816:	2b00      	cmp	r3, #0
    3818:	d101      	bne.n	381e <list_delete_element+0x14>
		return false;
    381a:	2300      	movs	r3, #0
    381c:	e024      	b.n	3868 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	681a      	ldr	r2, [r3, #0]
    3822:	683b      	ldr	r3, [r7, #0]
    3824:	429a      	cmp	r2, r3
    3826:	d106      	bne.n	3836 <list_delete_element+0x2c>
		list->head = list->head->next;
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	681a      	ldr	r2, [r3, #0]
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	601a      	str	r2, [r3, #0]
		return true;
    3832:	2301      	movs	r3, #1
    3834:	e018      	b.n	3868 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    383c:	e002      	b.n	3844 <list_delete_element+0x3a>
			it = it->next;
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	2b00      	cmp	r3, #0
    3848:	d004      	beq.n	3854 <list_delete_element+0x4a>
    384a:	68fb      	ldr	r3, [r7, #12]
    384c:	681a      	ldr	r2, [r3, #0]
    384e:	683b      	ldr	r3, [r7, #0]
    3850:	429a      	cmp	r2, r3
    3852:	d1f4      	bne.n	383e <list_delete_element+0x34>
		}
		if (it) {
    3854:	68fb      	ldr	r3, [r7, #12]
    3856:	2b00      	cmp	r3, #0
    3858:	d005      	beq.n	3866 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	681a      	ldr	r2, [r3, #0]
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	601a      	str	r2, [r3, #0]
			return true;
    3862:	2301      	movs	r3, #1
    3864:	e000      	b.n	3868 <list_delete_element+0x5e>
		}
	}

	return false;
    3866:	2300      	movs	r3, #0
}
    3868:	4618      	mov	r0, r3
    386a:	3714      	adds	r7, #20
    386c:	46bd      	mov	sp, r7
    386e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3872:	4770      	bx	lr

00003874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3874:	b480      	push	{r7}
    3876:	b083      	sub	sp, #12
    3878:	af00      	add	r7, sp, #0
    387a:	4603      	mov	r3, r0
    387c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    387e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3882:	2b00      	cmp	r3, #0
    3884:	db0b      	blt.n	389e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3886:	4909      	ldr	r1, [pc, #36]	; (38ac <__NVIC_EnableIRQ+0x38>)
    3888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    388c:	095b      	lsrs	r3, r3, #5
    388e:	88fa      	ldrh	r2, [r7, #6]
    3890:	f002 021f 	and.w	r2, r2, #31
    3894:	2001      	movs	r0, #1
    3896:	fa00 f202 	lsl.w	r2, r0, r2
    389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    389e:	bf00      	nop
    38a0:	370c      	adds	r7, #12
    38a2:	46bd      	mov	sp, r7
    38a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    38a8:	4770      	bx	lr
    38aa:	bf00      	nop
    38ac:	e000e100 	.word	0xe000e100

000038b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    38b0:	b480      	push	{r7}
    38b2:	b083      	sub	sp, #12
    38b4:	af00      	add	r7, sp, #0
    38b6:	4603      	mov	r3, r0
    38b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    38ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    38be:	2b00      	cmp	r3, #0
    38c0:	db10      	blt.n	38e4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38c2:	490b      	ldr	r1, [pc, #44]	; (38f0 <__NVIC_DisableIRQ+0x40>)
    38c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    38c8:	095b      	lsrs	r3, r3, #5
    38ca:	88fa      	ldrh	r2, [r7, #6]
    38cc:	f002 021f 	and.w	r2, r2, #31
    38d0:	2001      	movs	r0, #1
    38d2:	fa00 f202 	lsl.w	r2, r0, r2
    38d6:	3320      	adds	r3, #32
    38d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    38dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    38e4:	bf00      	nop
    38e6:	370c      	adds	r7, #12
    38e8:	46bd      	mov	sp, r7
    38ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ee:	4770      	bx	lr
    38f0:	e000e100 	.word	0xe000e100

000038f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    38f4:	b480      	push	{r7}
    38f6:	b083      	sub	sp, #12
    38f8:	af00      	add	r7, sp, #0
    38fa:	4603      	mov	r3, r0
    38fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    38fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3902:	2b00      	cmp	r3, #0
    3904:	db0c      	blt.n	3920 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3906:	4909      	ldr	r1, [pc, #36]	; (392c <__NVIC_ClearPendingIRQ+0x38>)
    3908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    390c:	095b      	lsrs	r3, r3, #5
    390e:	88fa      	ldrh	r2, [r7, #6]
    3910:	f002 021f 	and.w	r2, r2, #31
    3914:	2001      	movs	r0, #1
    3916:	fa00 f202 	lsl.w	r2, r0, r2
    391a:	3360      	adds	r3, #96	; 0x60
    391c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3920:	bf00      	nop
    3922:	370c      	adds	r7, #12
    3924:	46bd      	mov	sp, r7
    3926:	f85d 7b04 	ldr.w	r7, [sp], #4
    392a:	4770      	bx	lr
    392c:	e000e100 	.word	0xe000e100

00003930 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3930:	b480      	push	{r7}
    3932:	b083      	sub	sp, #12
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    393c:	095b      	lsrs	r3, r3, #5
    393e:	f003 0301 	and.w	r3, r3, #1
    3942:	2b00      	cmp	r3, #0
    3944:	bf14      	ite	ne
    3946:	2301      	movne	r3, #1
    3948:	2300      	moveq	r3, #0
    394a:	b2db      	uxtb	r3, r3
}
    394c:	4618      	mov	r0, r3
    394e:	370c      	adds	r7, #12
    3950:	46bd      	mov	sp, r7
    3952:	f85d 7b04 	ldr.w	r7, [sp], #4
    3956:	4770      	bx	lr

00003958 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3958:	b480      	push	{r7}
    395a:	b083      	sub	sp, #12
    395c:	af00      	add	r7, sp, #0
    395e:	6078      	str	r0, [r7, #4]
    3960:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	683a      	ldr	r2, [r7, #0]
    3966:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3968:	bf00      	nop
    396a:	370c      	adds	r7, #12
    396c:	46bd      	mov	sp, r7
    396e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3972:	4770      	bx	lr

00003974 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3974:	b480      	push	{r7}
    3976:	b083      	sub	sp, #12
    3978:	af00      	add	r7, sp, #0
    397a:	6078      	str	r0, [r7, #4]
    397c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	683a      	ldr	r2, [r7, #0]
    3982:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3984:	bf00      	nop
    3986:	370c      	adds	r7, #12
    3988:	46bd      	mov	sp, r7
    398a:	f85d 7b04 	ldr.w	r7, [sp], #4
    398e:	4770      	bx	lr

00003990 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3990:	b480      	push	{r7}
    3992:	b083      	sub	sp, #12
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	699b      	ldr	r3, [r3, #24]
    399c:	f043 0201 	orr.w	r2, r3, #1
    39a0:	687b      	ldr	r3, [r7, #4]
    39a2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    39a4:	bf00      	nop
    39a6:	370c      	adds	r7, #12
    39a8:	46bd      	mov	sp, r7
    39aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ae:	4770      	bx	lr

000039b0 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    39b0:	b480      	push	{r7}
    39b2:	b085      	sub	sp, #20
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	699b      	ldr	r3, [r3, #24]
    39bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    39be:	68fb      	ldr	r3, [r7, #12]
    39c0:	f003 0301 	and.w	r3, r3, #1
    39c4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    39c6:	68fb      	ldr	r3, [r7, #12]
    39c8:	2b00      	cmp	r3, #0
    39ca:	bf14      	ite	ne
    39cc:	2301      	movne	r3, #1
    39ce:	2300      	moveq	r3, #0
    39d0:	b2db      	uxtb	r3, r3
}
    39d2:	4618      	mov	r0, r3
    39d4:	3714      	adds	r7, #20
    39d6:	46bd      	mov	sp, r7
    39d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    39dc:	4770      	bx	lr

000039de <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    39de:	b480      	push	{r7}
    39e0:	b083      	sub	sp, #12
    39e2:	af00      	add	r7, sp, #0
    39e4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	699b      	ldr	r3, [r3, #24]
    39ea:	f023 0201 	bic.w	r2, r3, #1
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    39f2:	bf00      	nop
    39f4:	370c      	adds	r7, #12
    39f6:	46bd      	mov	sp, r7
    39f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    39fc:	4770      	bx	lr

000039fe <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    39fe:	b480      	push	{r7}
    3a00:	b083      	sub	sp, #12
    3a02:	af00      	add	r7, sp, #0
    3a04:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	699b      	ldr	r3, [r3, #24]
    3a0a:	f043 0202 	orr.w	r2, r3, #2
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a12:	bf00      	nop
    3a14:	370c      	adds	r7, #12
    3a16:	46bd      	mov	sp, r7
    3a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a1c:	4770      	bx	lr

00003a1e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3a1e:	b480      	push	{r7}
    3a20:	b083      	sub	sp, #12
    3a22:	af00      	add	r7, sp, #0
    3a24:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	699b      	ldr	r3, [r3, #24]
    3a2a:	f023 0202 	bic.w	r2, r3, #2
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a32:	bf00      	nop
    3a34:	370c      	adds	r7, #12
    3a36:	46bd      	mov	sp, r7
    3a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a3c:	4770      	bx	lr

00003a3e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3a3e:	b480      	push	{r7}
    3a40:	b083      	sub	sp, #12
    3a42:	af00      	add	r7, sp, #0
    3a44:	6078      	str	r0, [r7, #4]
    3a46:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	699a      	ldr	r2, [r3, #24]
    3a4c:	683b      	ldr	r3, [r7, #0]
    3a4e:	431a      	orrs	r2, r3
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a54:	bf00      	nop
    3a56:	370c      	adds	r7, #12
    3a58:	46bd      	mov	sp, r7
    3a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a5e:	4770      	bx	lr

00003a60 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3a60:	b480      	push	{r7}
    3a62:	b083      	sub	sp, #12
    3a64:	af00      	add	r7, sp, #0
    3a66:	6078      	str	r0, [r7, #4]
    3a68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3a6a:	687b      	ldr	r3, [r7, #4]
    3a6c:	683a      	ldr	r2, [r7, #0]
    3a6e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a70:	bf00      	nop
    3a72:	370c      	adds	r7, #12
    3a74:	46bd      	mov	sp, r7
    3a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a7a:	4770      	bx	lr

00003a7c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3a7c:	b480      	push	{r7}
    3a7e:	b083      	sub	sp, #12
    3a80:	af00      	add	r7, sp, #0
    3a82:	6078      	str	r0, [r7, #4]
    3a84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	683a      	ldr	r2, [r7, #0]
    3a8a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a8c:	bf00      	nop
    3a8e:	370c      	adds	r7, #12
    3a90:	46bd      	mov	sp, r7
    3a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a96:	4770      	bx	lr

00003a98 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3a98:	b480      	push	{r7}
    3a9a:	b083      	sub	sp, #12
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3aa4:	4618      	mov	r0, r3
    3aa6:	370c      	adds	r7, #12
    3aa8:	46bd      	mov	sp, r7
    3aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aae:	4770      	bx	lr

00003ab0 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3ab0:	b480      	push	{r7}
    3ab2:	b083      	sub	sp, #12
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	6078      	str	r0, [r7, #4]
    3ab8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	683a      	ldr	r2, [r7, #0]
    3abe:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ac0:	bf00      	nop
    3ac2:	370c      	adds	r7, #12
    3ac4:	46bd      	mov	sp, r7
    3ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aca:	4770      	bx	lr

00003acc <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3acc:	b480      	push	{r7}
    3ace:	b083      	sub	sp, #12
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	683a      	ldr	r2, [r7, #0]
    3ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ade:	bf00      	nop
    3ae0:	370c      	adds	r7, #12
    3ae2:	46bd      	mov	sp, r7
    3ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ae8:	4770      	bx	lr

00003aea <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3aea:	b480      	push	{r7}
    3aec:	b083      	sub	sp, #12
    3aee:	af00      	add	r7, sp, #0
    3af0:	6078      	str	r0, [r7, #4]
    3af2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3af4:	687b      	ldr	r3, [r7, #4]
    3af6:	683a      	ldr	r2, [r7, #0]
    3af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3afc:	bf00      	nop
    3afe:	370c      	adds	r7, #12
    3b00:	46bd      	mov	sp, r7
    3b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b06:	4770      	bx	lr

00003b08 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3b08:	b480      	push	{r7}
    3b0a:	b083      	sub	sp, #12
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
    3b10:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	683a      	ldr	r2, [r7, #0]
    3b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b1a:	bf00      	nop
    3b1c:	370c      	adds	r7, #12
    3b1e:	46bd      	mov	sp, r7
    3b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b24:	4770      	bx	lr

00003b26 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3b26:	b480      	push	{r7}
    3b28:	b083      	sub	sp, #12
    3b2a:	af00      	add	r7, sp, #0
    3b2c:	6078      	str	r0, [r7, #4]
    3b2e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	683a      	ldr	r2, [r7, #0]
    3b34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b38:	bf00      	nop
    3b3a:	370c      	adds	r7, #12
    3b3c:	46bd      	mov	sp, r7
    3b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b42:	4770      	bx	lr

00003b44 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3b44:	b480      	push	{r7}
    3b46:	b083      	sub	sp, #12
    3b48:	af00      	add	r7, sp, #0
    3b4a:	6078      	str	r0, [r7, #4]
    3b4c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	683a      	ldr	r2, [r7, #0]
    3b52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b56:	bf00      	nop
    3b58:	370c      	adds	r7, #12
    3b5a:	46bd      	mov	sp, r7
    3b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b60:	4770      	bx	lr

00003b62 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3b62:	b480      	push	{r7}
    3b64:	b083      	sub	sp, #12
    3b66:	af00      	add	r7, sp, #0
    3b68:	6078      	str	r0, [r7, #4]
    3b6a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	683a      	ldr	r2, [r7, #0]
    3b70:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b74:	bf00      	nop
    3b76:	370c      	adds	r7, #12
    3b78:	46bd      	mov	sp, r7
    3b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b7e:	4770      	bx	lr

00003b80 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3b80:	b480      	push	{r7}
    3b82:	b083      	sub	sp, #12
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
    3b88:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	683a      	ldr	r2, [r7, #0]
    3b8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b92:	bf00      	nop
    3b94:	370c      	adds	r7, #12
    3b96:	46bd      	mov	sp, r7
    3b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b9c:	4770      	bx	lr

00003b9e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3b9e:	b480      	push	{r7}
    3ba0:	b083      	sub	sp, #12
    3ba2:	af00      	add	r7, sp, #0
    3ba4:	6078      	str	r0, [r7, #4]
    3ba6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3ba8:	687b      	ldr	r3, [r7, #4]
    3baa:	683a      	ldr	r2, [r7, #0]
    3bac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bb0:	bf00      	nop
    3bb2:	370c      	adds	r7, #12
    3bb4:	46bd      	mov	sp, r7
    3bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bba:	4770      	bx	lr

00003bbc <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3bbc:	b480      	push	{r7}
    3bbe:	b083      	sub	sp, #12
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	6078      	str	r0, [r7, #4]
    3bc4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	683a      	ldr	r2, [r7, #0]
    3bca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bce:	bf00      	nop
    3bd0:	370c      	adds	r7, #12
    3bd2:	46bd      	mov	sp, r7
    3bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd8:	4770      	bx	lr
	...

00003bdc <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	683a      	ldr	r2, [r7, #0]
    3bea:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	4618      	mov	r0, r3
    3bf2:	4b56      	ldr	r3, [pc, #344]	; (3d4c <_can_async_init+0x170>)
    3bf4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3bf6:	bf00      	nop
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	4618      	mov	r0, r3
    3bfe:	4b54      	ldr	r3, [pc, #336]	; (3d50 <_can_async_init+0x174>)
    3c00:	4798      	blx	r3
    3c02:	4603      	mov	r3, r0
    3c04:	f083 0301 	eor.w	r3, r3, #1
    3c08:	b2db      	uxtb	r3, r3
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d1f4      	bne.n	3bf8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	4618      	mov	r0, r3
    3c14:	4b4f      	ldr	r3, [pc, #316]	; (3d54 <_can_async_init+0x178>)
    3c16:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3c18:	683b      	ldr	r3, [r7, #0]
    3c1a:	4a4f      	ldr	r2, [pc, #316]	; (3d58 <_can_async_init+0x17c>)
    3c1c:	4293      	cmp	r3, r2
    3c1e:	d17c      	bne.n	3d1a <_can_async_init+0x13e>
		_can1_dev    = dev;
    3c20:	4a4e      	ldr	r2, [pc, #312]	; (3d5c <_can_async_init+0x180>)
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	4a4d      	ldr	r2, [pc, #308]	; (3d60 <_can_async_init+0x184>)
    3c2a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3c2c:	687b      	ldr	r3, [r7, #4]
    3c2e:	681b      	ldr	r3, [r3, #0]
    3c30:	f44f 7100 	mov.w	r1, #512	; 0x200
    3c34:	4618      	mov	r0, r3
    3c36:	4b4b      	ldr	r3, [pc, #300]	; (3d64 <_can_async_init+0x188>)
    3c38:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	2102      	movs	r1, #2
    3c40:	4618      	mov	r0, r3
    3c42:	4b49      	ldr	r3, [pc, #292]	; (3d68 <_can_async_init+0x18c>)
    3c44:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	681b      	ldr	r3, [r3, #0]
    3c4a:	f640 2103 	movw	r1, #2563	; 0xa03
    3c4e:	4618      	mov	r0, r3
    3c50:	4b46      	ldr	r3, [pc, #280]	; (3d6c <_can_async_init+0x190>)
    3c52:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3c5c:	4618      	mov	r0, r3
    3c5e:	4b44      	ldr	r3, [pc, #272]	; (3d70 <_can_async_init+0x194>)
    3c60:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	681a      	ldr	r2, [r3, #0]
    3c66:	4b43      	ldr	r3, [pc, #268]	; (3d74 <_can_async_init+0x198>)
    3c68:	b29b      	uxth	r3, r3
    3c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3c72:	4619      	mov	r1, r3
    3c74:	4610      	mov	r0, r2
    3c76:	4b40      	ldr	r3, [pc, #256]	; (3d78 <_can_async_init+0x19c>)
    3c78:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	2107      	movs	r1, #7
    3c80:	4618      	mov	r0, r3
    3c82:	4b3e      	ldr	r3, [pc, #248]	; (3d7c <_can_async_init+0x1a0>)
    3c84:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	2107      	movs	r1, #7
    3c8c:	4618      	mov	r0, r3
    3c8e:	4b3c      	ldr	r3, [pc, #240]	; (3d80 <_can_async_init+0x1a4>)
    3c90:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	681a      	ldr	r2, [r3, #0]
    3c96:	4b3b      	ldr	r3, [pc, #236]	; (3d84 <_can_async_init+0x1a8>)
    3c98:	b29b      	uxth	r3, r3
    3c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3c9e:	4619      	mov	r1, r3
    3ca0:	4610      	mov	r0, r2
    3ca2:	4b39      	ldr	r3, [pc, #228]	; (3d88 <_can_async_init+0x1ac>)
    3ca4:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	681a      	ldr	r2, [r3, #0]
    3caa:	4b38      	ldr	r3, [pc, #224]	; (3d8c <_can_async_init+0x1b0>)
    3cac:	b29b      	uxth	r3, r3
    3cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3cb2:	4619      	mov	r1, r3
    3cb4:	4610      	mov	r0, r2
    3cb6:	4b36      	ldr	r3, [pc, #216]	; (3d90 <_can_async_init+0x1b4>)
    3cb8:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	681b      	ldr	r3, [r3, #0]
    3cbe:	2108      	movs	r1, #8
    3cc0:	4618      	mov	r0, r3
    3cc2:	4b34      	ldr	r3, [pc, #208]	; (3d94 <_can_async_init+0x1b8>)
    3cc4:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	681a      	ldr	r2, [r3, #0]
    3cca:	4b33      	ldr	r3, [pc, #204]	; (3d98 <_can_async_init+0x1bc>)
    3ccc:	b29b      	uxth	r3, r3
    3cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3cd2:	4619      	mov	r1, r3
    3cd4:	4610      	mov	r0, r2
    3cd6:	4b31      	ldr	r3, [pc, #196]	; (3d9c <_can_async_init+0x1c0>)
    3cd8:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	681a      	ldr	r2, [r3, #0]
    3cde:	4b30      	ldr	r3, [pc, #192]	; (3da0 <_can_async_init+0x1c4>)
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3ce6:	4619      	mov	r1, r3
    3ce8:	4610      	mov	r0, r2
    3cea:	4b2e      	ldr	r3, [pc, #184]	; (3da4 <_can_async_init+0x1c8>)
    3cec:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3cf6:	4618      	mov	r0, r3
    3cf8:	4b2b      	ldr	r3, [pc, #172]	; (3da8 <_can_async_init+0x1cc>)
    3cfa:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3cfc:	204f      	movs	r0, #79	; 0x4f
    3cfe:	4b2b      	ldr	r3, [pc, #172]	; (3dac <_can_async_init+0x1d0>)
    3d00:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3d02:	204f      	movs	r0, #79	; 0x4f
    3d04:	4b2a      	ldr	r3, [pc, #168]	; (3db0 <_can_async_init+0x1d4>)
    3d06:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3d08:	204f      	movs	r0, #79	; 0x4f
    3d0a:	4b2a      	ldr	r3, [pc, #168]	; (3db4 <_can_async_init+0x1d8>)
    3d0c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	2101      	movs	r1, #1
    3d14:	4618      	mov	r0, r3
    3d16:	4b28      	ldr	r3, [pc, #160]	; (3db8 <_can_async_init+0x1dc>)
    3d18:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	4618      	mov	r0, r3
    3d20:	4b26      	ldr	r3, [pc, #152]	; (3dbc <_can_async_init+0x1e0>)
    3d22:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3d24:	687b      	ldr	r3, [r7, #4]
    3d26:	681b      	ldr	r3, [r3, #0]
    3d28:	4618      	mov	r0, r3
    3d2a:	4b25      	ldr	r3, [pc, #148]	; (3dc0 <_can_async_init+0x1e4>)
    3d2c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3d2e:	bf00      	nop
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	681b      	ldr	r3, [r3, #0]
    3d34:	4618      	mov	r0, r3
    3d36:	4b06      	ldr	r3, [pc, #24]	; (3d50 <_can_async_init+0x174>)
    3d38:	4798      	blx	r3
    3d3a:	4603      	mov	r3, r0
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d1f7      	bne.n	3d30 <_can_async_init+0x154>
	};

	return ERR_NONE;
    3d40:	2300      	movs	r3, #0
}
    3d42:	4618      	mov	r0, r3
    3d44:	3708      	adds	r7, #8
    3d46:	46bd      	mov	sp, r7
    3d48:	bd80      	pop	{r7, pc}
    3d4a:	bf00      	nop
    3d4c:	00003991 	.word	0x00003991
    3d50:	000039b1 	.word	0x000039b1
    3d54:	000039ff 	.word	0x000039ff
    3d58:	42000400 	.word	0x42000400
    3d5c:	20000bb0 	.word	0x20000bb0
    3d60:	20000004 	.word	0x20000004
    3d64:	00003a3f 	.word	0x00003a3f
    3d68:	00003959 	.word	0x00003959
    3d6c:	00003a61 	.word	0x00003a61
    3d70:	00003975 	.word	0x00003975
    3d74:	2000af40 	.word	0x2000af40
    3d78:	00003b45 	.word	0x00003b45
    3d7c:	00003b63 	.word	0x00003b63
    3d80:	00003b9f 	.word	0x00003b9f
    3d84:	2000aef8 	.word	0x2000aef8
    3d88:	00003b81 	.word	0x00003b81
    3d8c:	20000b10 	.word	0x20000b10
    3d90:	00003bbd 	.word	0x00003bbd
    3d94:	00003acd 	.word	0x00003acd
    3d98:	20000b20 	.word	0x20000b20
    3d9c:	00003aeb 	.word	0x00003aeb
    3da0:	20000ba0 	.word	0x20000ba0
    3da4:	00003b09 	.word	0x00003b09
    3da8:	00003b27 	.word	0x00003b27
    3dac:	000038b1 	.word	0x000038b1
    3db0:	000038f5 	.word	0x000038f5
    3db4:	00003875 	.word	0x00003875
    3db8:	00003ab1 	.word	0x00003ab1
    3dbc:	00003a1f 	.word	0x00003a1f
    3dc0:	000039df 	.word	0x000039df

00003dc4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3dc4:	b590      	push	{r4, r7, lr}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3dca:	4b2c      	ldr	r3, [pc, #176]	; (3e7c <CAN1_Handler+0xb8>)
    3dcc:	681b      	ldr	r3, [r3, #0]
    3dce:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	4618      	mov	r0, r3
    3dd6:	4b2a      	ldr	r3, [pc, #168]	; (3e80 <CAN1_Handler+0xbc>)
    3dd8:	4798      	blx	r3
    3dda:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3ddc:	683b      	ldr	r3, [r7, #0]
    3dde:	f003 0301 	and.w	r3, r3, #1
    3de2:	2b00      	cmp	r3, #0
    3de4:	d003      	beq.n	3dee <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	689b      	ldr	r3, [r3, #8]
    3dea:	6878      	ldr	r0, [r7, #4]
    3dec:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3dee:	683b      	ldr	r3, [r7, #0]
    3df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3df4:	2b00      	cmp	r3, #0
    3df6:	d003      	beq.n	3e00 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	685b      	ldr	r3, [r3, #4]
    3dfc:	6878      	ldr	r0, [r7, #4]
    3dfe:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3e00:	683b      	ldr	r3, [r7, #0]
    3e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3e06:	2b00      	cmp	r3, #0
    3e08:	d004      	beq.n	3e14 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3e0a:	687b      	ldr	r3, [r7, #4]
    3e0c:	68db      	ldr	r3, [r3, #12]
    3e0e:	2103      	movs	r1, #3
    3e10:	6878      	ldr	r0, [r7, #4]
    3e12:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3e14:	683b      	ldr	r3, [r7, #0]
    3e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d004      	beq.n	3e28 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	68db      	ldr	r3, [r3, #12]
    3e22:	2100      	movs	r1, #0
    3e24:	6878      	ldr	r0, [r7, #4]
    3e26:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3e28:	683b      	ldr	r3, [r7, #0]
    3e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d00f      	beq.n	3e52 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	68dc      	ldr	r4, [r3, #12]
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	681b      	ldr	r3, [r3, #0]
    3e3a:	4618      	mov	r0, r3
    3e3c:	4b11      	ldr	r3, [pc, #68]	; (3e84 <CAN1_Handler+0xc0>)
    3e3e:	4798      	blx	r3
    3e40:	4603      	mov	r3, r0
    3e42:	2b00      	cmp	r3, #0
    3e44:	d001      	beq.n	3e4a <CAN1_Handler+0x86>
    3e46:	2302      	movs	r3, #2
    3e48:	e000      	b.n	3e4c <CAN1_Handler+0x88>
    3e4a:	2301      	movs	r3, #1
    3e4c:	4619      	mov	r1, r3
    3e4e:	6878      	ldr	r0, [r7, #4]
    3e50:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3e52:	683b      	ldr	r3, [r7, #0]
    3e54:	f003 0308 	and.w	r3, r3, #8
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d004      	beq.n	3e66 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	68db      	ldr	r3, [r3, #12]
    3e60:	2104      	movs	r1, #4
    3e62:	6878      	ldr	r0, [r7, #4]
    3e64:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	6839      	ldr	r1, [r7, #0]
    3e6c:	4618      	mov	r0, r3
    3e6e:	4b06      	ldr	r3, [pc, #24]	; (3e88 <CAN1_Handler+0xc4>)
    3e70:	4798      	blx	r3
}
    3e72:	bf00      	nop
    3e74:	370c      	adds	r7, #12
    3e76:	46bd      	mov	sp, r7
    3e78:	bd90      	pop	{r4, r7, pc}
    3e7a:	bf00      	nop
    3e7c:	20000bb0 	.word	0x20000bb0
    3e80:	00003a99 	.word	0x00003a99
    3e84:	00003931 	.word	0x00003931
    3e88:	00003a7d 	.word	0x00003a7d

00003e8c <__NVIC_SetPendingIRQ>:
{
    3e8c:	b480      	push	{r7}
    3e8e:	b083      	sub	sp, #12
    3e90:	af00      	add	r7, sp, #0
    3e92:	4603      	mov	r3, r0
    3e94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	db0c      	blt.n	3eb8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e9e:	4909      	ldr	r1, [pc, #36]	; (3ec4 <__NVIC_SetPendingIRQ+0x38>)
    3ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ea4:	095b      	lsrs	r3, r3, #5
    3ea6:	88fa      	ldrh	r2, [r7, #6]
    3ea8:	f002 021f 	and.w	r2, r2, #31
    3eac:	2001      	movs	r0, #1
    3eae:	fa00 f202 	lsl.w	r2, r0, r2
    3eb2:	3340      	adds	r3, #64	; 0x40
    3eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3eb8:	bf00      	nop
    3eba:	370c      	adds	r7, #12
    3ebc:	46bd      	mov	sp, r7
    3ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec2:	4770      	bx	lr
    3ec4:	e000e100 	.word	0xe000e100

00003ec8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	4603      	mov	r3, r0
    3ed0:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3ed2:	79fb      	ldrb	r3, [r7, #7]
    3ed4:	b21b      	sxth	r3, r3
    3ed6:	4618      	mov	r0, r3
    3ed8:	4b02      	ldr	r3, [pc, #8]	; (3ee4 <_irq_set+0x1c>)
    3eda:	4798      	blx	r3
}
    3edc:	bf00      	nop
    3ede:	3708      	adds	r7, #8
    3ee0:	46bd      	mov	sp, r7
    3ee2:	bd80      	pop	{r7, pc}
    3ee4:	00003e8d 	.word	0x00003e8d

00003ee8 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3ee8:	b480      	push	{r7}
    3eea:	b083      	sub	sp, #12
    3eec:	af00      	add	r7, sp, #0
    3eee:	4603      	mov	r3, r0
    3ef0:	6039      	str	r1, [r7, #0]
    3ef2:	80fb      	strh	r3, [r7, #6]
    3ef4:	4613      	mov	r3, r2
    3ef6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3ef8:	797b      	ldrb	r3, [r7, #5]
    3efa:	3b04      	subs	r3, #4
    3efc:	2b05      	cmp	r3, #5
    3efe:	d86b      	bhi.n	3fd8 <_get_cycles_for_us_internal+0xf0>
    3f00:	a201      	add	r2, pc, #4	; (adr r2, 3f08 <_get_cycles_for_us_internal+0x20>)
    3f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f06:	bf00      	nop
    3f08:	00003fb7 	.word	0x00003fb7
    3f0c:	00003f97 	.word	0x00003f97
    3f10:	00003f79 	.word	0x00003f79
    3f14:	00003f5b 	.word	0x00003f5b
    3f18:	00003f3d 	.word	0x00003f3d
    3f1c:	00003f21 	.word	0x00003f21
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3f20:	88fb      	ldrh	r3, [r7, #6]
    3f22:	683a      	ldr	r2, [r7, #0]
    3f24:	4935      	ldr	r1, [pc, #212]	; (3ffc <_get_cycles_for_us_internal+0x114>)
    3f26:	fba1 1202 	umull	r1, r2, r1, r2
    3f2a:	0c92      	lsrs	r2, r2, #18
    3f2c:	fb02 f303 	mul.w	r3, r2, r3
    3f30:	3302      	adds	r3, #2
    3f32:	4a33      	ldr	r2, [pc, #204]	; (4000 <_get_cycles_for_us_internal+0x118>)
    3f34:	fba2 2303 	umull	r2, r3, r2, r3
    3f38:	085b      	lsrs	r3, r3, #1
    3f3a:	e059      	b.n	3ff0 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3f3c:	88fb      	ldrh	r3, [r7, #6]
    3f3e:	683a      	ldr	r2, [r7, #0]
    3f40:	0952      	lsrs	r2, r2, #5
    3f42:	4930      	ldr	r1, [pc, #192]	; (4004 <_get_cycles_for_us_internal+0x11c>)
    3f44:	fba1 1202 	umull	r1, r2, r1, r2
    3f48:	09d2      	lsrs	r2, r2, #7
    3f4a:	fb02 f303 	mul.w	r3, r2, r3
    3f4e:	331d      	adds	r3, #29
    3f50:	4a2d      	ldr	r2, [pc, #180]	; (4008 <_get_cycles_for_us_internal+0x120>)
    3f52:	fba2 2303 	umull	r2, r3, r2, r3
    3f56:	091b      	lsrs	r3, r3, #4
    3f58:	e04a      	b.n	3ff0 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3f5a:	88fb      	ldrh	r3, [r7, #6]
    3f5c:	683a      	ldr	r2, [r7, #0]
    3f5e:	492b      	ldr	r1, [pc, #172]	; (400c <_get_cycles_for_us_internal+0x124>)
    3f60:	fba1 1202 	umull	r1, r2, r1, r2
    3f64:	0b52      	lsrs	r2, r2, #13
    3f66:	fb02 f303 	mul.w	r3, r2, r3
    3f6a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3f6e:	4a28      	ldr	r2, [pc, #160]	; (4010 <_get_cycles_for_us_internal+0x128>)
    3f70:	fba2 2303 	umull	r2, r3, r2, r3
    3f74:	095b      	lsrs	r3, r3, #5
    3f76:	e03b      	b.n	3ff0 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3f78:	88fb      	ldrh	r3, [r7, #6]
    3f7a:	683a      	ldr	r2, [r7, #0]
    3f7c:	4925      	ldr	r1, [pc, #148]	; (4014 <_get_cycles_for_us_internal+0x12c>)
    3f7e:	fba1 1202 	umull	r1, r2, r1, r2
    3f82:	0992      	lsrs	r2, r2, #6
    3f84:	fb02 f303 	mul.w	r3, r2, r3
    3f88:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3f8c:	4a22      	ldr	r2, [pc, #136]	; (4018 <_get_cycles_for_us_internal+0x130>)
    3f8e:	fba2 2303 	umull	r2, r3, r2, r3
    3f92:	099b      	lsrs	r3, r3, #6
    3f94:	e02c      	b.n	3ff0 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3f96:	88fb      	ldrh	r3, [r7, #6]
    3f98:	683a      	ldr	r2, [r7, #0]
    3f9a:	4920      	ldr	r1, [pc, #128]	; (401c <_get_cycles_for_us_internal+0x134>)
    3f9c:	fba1 1202 	umull	r1, r2, r1, r2
    3fa0:	0952      	lsrs	r2, r2, #5
    3fa2:	fb02 f303 	mul.w	r3, r2, r3
    3fa6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3faa:	332f      	adds	r3, #47	; 0x2f
    3fac:	4a1c      	ldr	r2, [pc, #112]	; (4020 <_get_cycles_for_us_internal+0x138>)
    3fae:	fba2 2303 	umull	r2, r3, r2, r3
    3fb2:	0b5b      	lsrs	r3, r3, #13
    3fb4:	e01c      	b.n	3ff0 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3fb6:	88fb      	ldrh	r3, [r7, #6]
    3fb8:	683a      	ldr	r2, [r7, #0]
    3fba:	491a      	ldr	r1, [pc, #104]	; (4024 <_get_cycles_for_us_internal+0x13c>)
    3fbc:	fba1 1202 	umull	r1, r2, r1, r2
    3fc0:	08d2      	lsrs	r2, r2, #3
    3fc2:	fb02 f303 	mul.w	r3, r2, r3
    3fc6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3fca:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3fce:	4a16      	ldr	r2, [pc, #88]	; (4028 <_get_cycles_for_us_internal+0x140>)
    3fd0:	fba2 2303 	umull	r2, r3, r2, r3
    3fd4:	0c5b      	lsrs	r3, r3, #17
    3fd6:	e00b      	b.n	3ff0 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3fd8:	88fb      	ldrh	r3, [r7, #6]
    3fda:	683a      	ldr	r2, [r7, #0]
    3fdc:	fb02 f303 	mul.w	r3, r2, r3
    3fe0:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3fe4:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3fe8:	4a10      	ldr	r2, [pc, #64]	; (402c <_get_cycles_for_us_internal+0x144>)
    3fea:	fba2 2303 	umull	r2, r3, r2, r3
    3fee:	0c9b      	lsrs	r3, r3, #18
	}
}
    3ff0:	4618      	mov	r0, r3
    3ff2:	370c      	adds	r7, #12
    3ff4:	46bd      	mov	sp, r7
    3ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffa:	4770      	bx	lr
    3ffc:	431bde83 	.word	0x431bde83
    4000:	aaaaaaab 	.word	0xaaaaaaab
    4004:	0a7c5ac5 	.word	0x0a7c5ac5
    4008:	88888889 	.word	0x88888889
    400c:	d1b71759 	.word	0xd1b71759
    4010:	1b4e81b5 	.word	0x1b4e81b5
    4014:	10624dd3 	.word	0x10624dd3
    4018:	057619f1 	.word	0x057619f1
    401c:	51eb851f 	.word	0x51eb851f
    4020:	45e7b273 	.word	0x45e7b273
    4024:	cccccccd 	.word	0xcccccccd
    4028:	6fd91d85 	.word	0x6fd91d85
    402c:	165e9f81 	.word	0x165e9f81

00004030 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4030:	b580      	push	{r7, lr}
    4032:	b082      	sub	sp, #8
    4034:	af00      	add	r7, sp, #0
    4036:	4603      	mov	r3, r0
    4038:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    403a:	88fb      	ldrh	r3, [r7, #6]
    403c:	2209      	movs	r2, #9
    403e:	4904      	ldr	r1, [pc, #16]	; (4050 <_get_cycles_for_us+0x20>)
    4040:	4618      	mov	r0, r3
    4042:	4b04      	ldr	r3, [pc, #16]	; (4054 <_get_cycles_for_us+0x24>)
    4044:	4798      	blx	r3
    4046:	4603      	mov	r3, r0
}
    4048:	4618      	mov	r0, r3
    404a:	3708      	adds	r7, #8
    404c:	46bd      	mov	sp, r7
    404e:	bd80      	pop	{r7, pc}
    4050:	07270e00 	.word	0x07270e00
    4054:	00003ee9 	.word	0x00003ee9

00004058 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4058:	b480      	push	{r7}
    405a:	b083      	sub	sp, #12
    405c:	af00      	add	r7, sp, #0
    405e:	4603      	mov	r3, r0
    4060:	6039      	str	r1, [r7, #0]
    4062:	80fb      	strh	r3, [r7, #6]
    4064:	4613      	mov	r3, r2
    4066:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4068:	797b      	ldrb	r3, [r7, #5]
    406a:	3b04      	subs	r3, #4
    406c:	2b05      	cmp	r3, #5
    406e:	d870      	bhi.n	4152 <_get_cycles_for_ms_internal+0xfa>
    4070:	a201      	add	r2, pc, #4	; (adr r2, 4078 <_get_cycles_for_ms_internal+0x20>)
    4072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4076:	bf00      	nop
    4078:	00004135 	.word	0x00004135
    407c:	00004119 	.word	0x00004119
    4080:	000040fd 	.word	0x000040fd
    4084:	000040d9 	.word	0x000040d9
    4088:	000040b5 	.word	0x000040b5
    408c:	00004091 	.word	0x00004091
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4090:	88fb      	ldrh	r3, [r7, #6]
    4092:	683a      	ldr	r2, [r7, #0]
    4094:	4937      	ldr	r1, [pc, #220]	; (4174 <_get_cycles_for_ms_internal+0x11c>)
    4096:	fba1 1202 	umull	r1, r2, r1, r2
    409a:	0c92      	lsrs	r2, r2, #18
    409c:	fb02 f303 	mul.w	r3, r2, r3
    40a0:	3302      	adds	r3, #2
    40a2:	4a35      	ldr	r2, [pc, #212]	; (4178 <_get_cycles_for_ms_internal+0x120>)
    40a4:	fba2 2303 	umull	r2, r3, r2, r3
    40a8:	085b      	lsrs	r3, r3, #1
    40aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    40ae:	fb02 f303 	mul.w	r3, r2, r3
    40b2:	e058      	b.n	4166 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    40b4:	88fb      	ldrh	r3, [r7, #6]
    40b6:	683a      	ldr	r2, [r7, #0]
    40b8:	0952      	lsrs	r2, r2, #5
    40ba:	4930      	ldr	r1, [pc, #192]	; (417c <_get_cycles_for_ms_internal+0x124>)
    40bc:	fba1 1202 	umull	r1, r2, r1, r2
    40c0:	09d2      	lsrs	r2, r2, #7
    40c2:	fb02 f303 	mul.w	r3, r2, r3
    40c6:	3302      	adds	r3, #2
    40c8:	4a2b      	ldr	r2, [pc, #172]	; (4178 <_get_cycles_for_ms_internal+0x120>)
    40ca:	fba2 2303 	umull	r2, r3, r2, r3
    40ce:	085b      	lsrs	r3, r3, #1
    40d0:	2264      	movs	r2, #100	; 0x64
    40d2:	fb02 f303 	mul.w	r3, r2, r3
    40d6:	e046      	b.n	4166 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    40d8:	88fb      	ldrh	r3, [r7, #6]
    40da:	683a      	ldr	r2, [r7, #0]
    40dc:	4928      	ldr	r1, [pc, #160]	; (4180 <_get_cycles_for_ms_internal+0x128>)
    40de:	fba1 1202 	umull	r1, r2, r1, r2
    40e2:	0b52      	lsrs	r2, r2, #13
    40e4:	fb02 f303 	mul.w	r3, r2, r3
    40e8:	3302      	adds	r3, #2
    40ea:	4a23      	ldr	r2, [pc, #140]	; (4178 <_get_cycles_for_ms_internal+0x120>)
    40ec:	fba2 2303 	umull	r2, r3, r2, r3
    40f0:	085a      	lsrs	r2, r3, #1
    40f2:	4613      	mov	r3, r2
    40f4:	009b      	lsls	r3, r3, #2
    40f6:	4413      	add	r3, r2
    40f8:	005b      	lsls	r3, r3, #1
    40fa:	e034      	b.n	4166 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    40fc:	88fb      	ldrh	r3, [r7, #6]
    40fe:	683a      	ldr	r2, [r7, #0]
    4100:	4920      	ldr	r1, [pc, #128]	; (4184 <_get_cycles_for_ms_internal+0x12c>)
    4102:	fba1 1202 	umull	r1, r2, r1, r2
    4106:	0992      	lsrs	r2, r2, #6
    4108:	fb02 f303 	mul.w	r3, r2, r3
    410c:	3302      	adds	r3, #2
    410e:	4a1a      	ldr	r2, [pc, #104]	; (4178 <_get_cycles_for_ms_internal+0x120>)
    4110:	fba2 2303 	umull	r2, r3, r2, r3
    4114:	085b      	lsrs	r3, r3, #1
    4116:	e026      	b.n	4166 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4118:	88fb      	ldrh	r3, [r7, #6]
    411a:	683a      	ldr	r2, [r7, #0]
    411c:	491a      	ldr	r1, [pc, #104]	; (4188 <_get_cycles_for_ms_internal+0x130>)
    411e:	fba1 1202 	umull	r1, r2, r1, r2
    4122:	0952      	lsrs	r2, r2, #5
    4124:	fb02 f303 	mul.w	r3, r2, r3
    4128:	331d      	adds	r3, #29
    412a:	4a18      	ldr	r2, [pc, #96]	; (418c <_get_cycles_for_ms_internal+0x134>)
    412c:	fba2 2303 	umull	r2, r3, r2, r3
    4130:	091b      	lsrs	r3, r3, #4
    4132:	e018      	b.n	4166 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4134:	88fb      	ldrh	r3, [r7, #6]
    4136:	683a      	ldr	r2, [r7, #0]
    4138:	4915      	ldr	r1, [pc, #84]	; (4190 <_get_cycles_for_ms_internal+0x138>)
    413a:	fba1 1202 	umull	r1, r2, r1, r2
    413e:	08d2      	lsrs	r2, r2, #3
    4140:	fb02 f303 	mul.w	r3, r2, r3
    4144:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4148:	4a12      	ldr	r2, [pc, #72]	; (4194 <_get_cycles_for_ms_internal+0x13c>)
    414a:	fba2 2303 	umull	r2, r3, r2, r3
    414e:	095b      	lsrs	r3, r3, #5
    4150:	e009      	b.n	4166 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4152:	88fb      	ldrh	r3, [r7, #6]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	fb02 f303 	mul.w	r3, r2, r3
    415a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    415e:	4a0e      	ldr	r2, [pc, #56]	; (4198 <_get_cycles_for_ms_internal+0x140>)
    4160:	fba2 2303 	umull	r2, r3, r2, r3
    4164:	099b      	lsrs	r3, r3, #6
	}
}
    4166:	4618      	mov	r0, r3
    4168:	370c      	adds	r7, #12
    416a:	46bd      	mov	sp, r7
    416c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4170:	4770      	bx	lr
    4172:	bf00      	nop
    4174:	431bde83 	.word	0x431bde83
    4178:	aaaaaaab 	.word	0xaaaaaaab
    417c:	0a7c5ac5 	.word	0x0a7c5ac5
    4180:	d1b71759 	.word	0xd1b71759
    4184:	10624dd3 	.word	0x10624dd3
    4188:	51eb851f 	.word	0x51eb851f
    418c:	88888889 	.word	0x88888889
    4190:	cccccccd 	.word	0xcccccccd
    4194:	1b4e81b5 	.word	0x1b4e81b5
    4198:	057619f1 	.word	0x057619f1

0000419c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    419c:	b580      	push	{r7, lr}
    419e:	b082      	sub	sp, #8
    41a0:	af00      	add	r7, sp, #0
    41a2:	4603      	mov	r3, r0
    41a4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    41a6:	88fb      	ldrh	r3, [r7, #6]
    41a8:	2209      	movs	r2, #9
    41aa:	4904      	ldr	r1, [pc, #16]	; (41bc <_get_cycles_for_ms+0x20>)
    41ac:	4618      	mov	r0, r3
    41ae:	4b04      	ldr	r3, [pc, #16]	; (41c0 <_get_cycles_for_ms+0x24>)
    41b0:	4798      	blx	r3
    41b2:	4603      	mov	r3, r0
}
    41b4:	4618      	mov	r0, r3
    41b6:	3708      	adds	r7, #8
    41b8:	46bd      	mov	sp, r7
    41ba:	bd80      	pop	{r7, pc}
    41bc:	07270e00 	.word	0x07270e00
    41c0:	00004059 	.word	0x00004059
    41c4:	00000000 	.word	0x00000000

000041c8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    41c8:	b480      	push	{r7}
    41ca:	b083      	sub	sp, #12
    41cc:	af00      	add	r7, sp, #0
    41ce:	6078      	str	r0, [r7, #4]
    41d0:	6039      	str	r1, [r7, #0]
    41d2:	bf00      	nop
    41d4:	f3af 8000 	nop.w

000041d8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    41d8:	3901      	subs	r1, #1
    41da:	d8fd      	bhi.n	41d8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    41dc:	bf00      	nop
    41de:	370c      	adds	r7, #12
    41e0:	46bd      	mov	sp, r7
    41e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e6:	4770      	bx	lr

000041e8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    41e8:	b480      	push	{r7}
    41ea:	b083      	sub	sp, #12
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	460b      	mov	r3, r1
    41f2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	881b      	ldrh	r3, [r3, #0]
    41f8:	b29a      	uxth	r2, r3
    41fa:	887b      	ldrh	r3, [r7, #2]
    41fc:	021b      	lsls	r3, r3, #8
    41fe:	b29b      	uxth	r3, r3
    4200:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4204:	b29b      	uxth	r3, r3
    4206:	4313      	orrs	r3, r2
    4208:	b29a      	uxth	r2, r3
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    420e:	bf00      	nop
    4210:	370c      	adds	r7, #12
    4212:	46bd      	mov	sp, r7
    4214:	f85d 7b04 	ldr.w	r7, [sp], #4
    4218:	4770      	bx	lr

0000421a <hri_port_set_EVCTRL_reg>:
{
    421a:	b480      	push	{r7}
    421c:	b085      	sub	sp, #20
    421e:	af00      	add	r7, sp, #0
    4220:	60f8      	str	r0, [r7, #12]
    4222:	460b      	mov	r3, r1
    4224:	607a      	str	r2, [r7, #4]
    4226:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4228:	7afb      	ldrb	r3, [r7, #11]
    422a:	7afa      	ldrb	r2, [r7, #11]
    422c:	68f9      	ldr	r1, [r7, #12]
    422e:	01d2      	lsls	r2, r2, #7
    4230:	440a      	add	r2, r1
    4232:	322c      	adds	r2, #44	; 0x2c
    4234:	6811      	ldr	r1, [r2, #0]
    4236:	687a      	ldr	r2, [r7, #4]
    4238:	430a      	orrs	r2, r1
    423a:	68f9      	ldr	r1, [r7, #12]
    423c:	01db      	lsls	r3, r3, #7
    423e:	440b      	add	r3, r1
    4240:	332c      	adds	r3, #44	; 0x2c
    4242:	601a      	str	r2, [r3, #0]
}
    4244:	bf00      	nop
    4246:	3714      	adds	r7, #20
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <_port_event_init>:

static inline void _port_event_init()
{
    4250:	b580      	push	{r7, lr}
    4252:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4254:	2200      	movs	r2, #0
    4256:	2100      	movs	r1, #0
    4258:	480a      	ldr	r0, [pc, #40]	; (4284 <_port_event_init+0x34>)
    425a:	4b0b      	ldr	r3, [pc, #44]	; (4288 <_port_event_init+0x38>)
    425c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    425e:	2200      	movs	r2, #0
    4260:	2101      	movs	r1, #1
    4262:	4808      	ldr	r0, [pc, #32]	; (4284 <_port_event_init+0x34>)
    4264:	4b08      	ldr	r3, [pc, #32]	; (4288 <_port_event_init+0x38>)
    4266:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4268:	f64e 72ef 	movw	r2, #61423	; 0xefef
    426c:	2102      	movs	r1, #2
    426e:	4805      	ldr	r0, [pc, #20]	; (4284 <_port_event_init+0x34>)
    4270:	4b05      	ldr	r3, [pc, #20]	; (4288 <_port_event_init+0x38>)
    4272:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4274:	2200      	movs	r2, #0
    4276:	2103      	movs	r1, #3
    4278:	4802      	ldr	r0, [pc, #8]	; (4284 <_port_event_init+0x34>)
    427a:	4b03      	ldr	r3, [pc, #12]	; (4288 <_port_event_init+0x38>)
    427c:	4798      	blx	r3
}
    427e:	bf00      	nop
    4280:	bd80      	pop	{r7, pc}
    4282:	bf00      	nop
    4284:	41008000 	.word	0x41008000
    4288:	0000421b 	.word	0x0000421b

0000428c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    428c:	b580      	push	{r7, lr}
    428e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4290:	2104      	movs	r1, #4
    4292:	480b      	ldr	r0, [pc, #44]	; (42c0 <_init_chip+0x34>)
    4294:	4b0b      	ldr	r3, [pc, #44]	; (42c4 <_init_chip+0x38>)
    4296:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4298:	4b0b      	ldr	r3, [pc, #44]	; (42c8 <_init_chip+0x3c>)
    429a:	4798      	blx	r3
	_oscctrl_init_sources();
    429c:	4b0b      	ldr	r3, [pc, #44]	; (42cc <_init_chip+0x40>)
    429e:	4798      	blx	r3
	_mclk_init();
    42a0:	4b0b      	ldr	r3, [pc, #44]	; (42d0 <_init_chip+0x44>)
    42a2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    42a4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    42a8:	4b0a      	ldr	r3, [pc, #40]	; (42d4 <_init_chip+0x48>)
    42aa:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    42ac:	4b0a      	ldr	r3, [pc, #40]	; (42d8 <_init_chip+0x4c>)
    42ae:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    42b0:	f640 30df 	movw	r0, #3039	; 0xbdf
    42b4:	4b07      	ldr	r3, [pc, #28]	; (42d4 <_init_chip+0x48>)
    42b6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    42b8:	4b08      	ldr	r3, [pc, #32]	; (42dc <_init_chip+0x50>)
    42ba:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    42bc:	bf00      	nop
    42be:	bd80      	pop	{r7, pc}
    42c0:	41004000 	.word	0x41004000
    42c4:	000041e9 	.word	0x000041e9
    42c8:	00004db5 	.word	0x00004db5
    42cc:	0000527d 	.word	0x0000527d
    42d0:	00004cd5 	.word	0x00004cd5
    42d4:	00004b7d 	.word	0x00004b7d
    42d8:	000052bd 	.word	0x000052bd
    42dc:	00004251 	.word	0x00004251

000042e0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    42e0:	b480      	push	{r7}
    42e2:	b083      	sub	sp, #12
    42e4:	af00      	add	r7, sp, #0
    42e6:	6078      	str	r0, [r7, #4]
    42e8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	683a      	ldr	r2, [r7, #0]
    42ee:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    42f0:	2300      	movs	r3, #0
}
    42f2:	4618      	mov	r0, r3
    42f4:	370c      	adds	r7, #12
    42f6:	46bd      	mov	sp, r7
    42f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42fc:	4770      	bx	lr
	...

00004300 <__NVIC_EnableIRQ>:
{
    4300:	b480      	push	{r7}
    4302:	b083      	sub	sp, #12
    4304:	af00      	add	r7, sp, #0
    4306:	4603      	mov	r3, r0
    4308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    430a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    430e:	2b00      	cmp	r3, #0
    4310:	db0b      	blt.n	432a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4312:	4909      	ldr	r1, [pc, #36]	; (4338 <__NVIC_EnableIRQ+0x38>)
    4314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4318:	095b      	lsrs	r3, r3, #5
    431a:	88fa      	ldrh	r2, [r7, #6]
    431c:	f002 021f 	and.w	r2, r2, #31
    4320:	2001      	movs	r0, #1
    4322:	fa00 f202 	lsl.w	r2, r0, r2
    4326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    432a:	bf00      	nop
    432c:	370c      	adds	r7, #12
    432e:	46bd      	mov	sp, r7
    4330:	f85d 7b04 	ldr.w	r7, [sp], #4
    4334:	4770      	bx	lr
    4336:	bf00      	nop
    4338:	e000e100 	.word	0xe000e100

0000433c <__NVIC_DisableIRQ>:
{
    433c:	b480      	push	{r7}
    433e:	b083      	sub	sp, #12
    4340:	af00      	add	r7, sp, #0
    4342:	4603      	mov	r3, r0
    4344:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    434a:	2b00      	cmp	r3, #0
    434c:	db10      	blt.n	4370 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    434e:	490b      	ldr	r1, [pc, #44]	; (437c <__NVIC_DisableIRQ+0x40>)
    4350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4354:	095b      	lsrs	r3, r3, #5
    4356:	88fa      	ldrh	r2, [r7, #6]
    4358:	f002 021f 	and.w	r2, r2, #31
    435c:	2001      	movs	r0, #1
    435e:	fa00 f202 	lsl.w	r2, r0, r2
    4362:	3320      	adds	r3, #32
    4364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    436c:	f3bf 8f6f 	isb	sy
}
    4370:	bf00      	nop
    4372:	370c      	adds	r7, #12
    4374:	46bd      	mov	sp, r7
    4376:	f85d 7b04 	ldr.w	r7, [sp], #4
    437a:	4770      	bx	lr
    437c:	e000e100 	.word	0xe000e100

00004380 <__NVIC_ClearPendingIRQ>:
{
    4380:	b480      	push	{r7}
    4382:	b083      	sub	sp, #12
    4384:	af00      	add	r7, sp, #0
    4386:	4603      	mov	r3, r0
    4388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    438a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    438e:	2b00      	cmp	r3, #0
    4390:	db0c      	blt.n	43ac <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4392:	4909      	ldr	r1, [pc, #36]	; (43b8 <__NVIC_ClearPendingIRQ+0x38>)
    4394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4398:	095b      	lsrs	r3, r3, #5
    439a:	88fa      	ldrh	r2, [r7, #6]
    439c:	f002 021f 	and.w	r2, r2, #31
    43a0:	2001      	movs	r0, #1
    43a2:	fa00 f202 	lsl.w	r2, r0, r2
    43a6:	3360      	adds	r3, #96	; 0x60
    43a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    43ac:	bf00      	nop
    43ae:	370c      	adds	r7, #12
    43b0:	46bd      	mov	sp, r7
    43b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b6:	4770      	bx	lr
    43b8:	e000e100 	.word	0xe000e100

000043bc <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    43bc:	b480      	push	{r7}
    43be:	b083      	sub	sp, #12
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
    43c4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    43c6:	bf00      	nop
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	685a      	ldr	r2, [r3, #4]
    43cc:	683b      	ldr	r3, [r7, #0]
    43ce:	4013      	ands	r3, r2
    43d0:	2b00      	cmp	r3, #0
    43d2:	d1f9      	bne.n	43c8 <hri_eic_wait_for_sync+0xc>
	};
}
    43d4:	bf00      	nop
    43d6:	370c      	adds	r7, #12
    43d8:	46bd      	mov	sp, r7
    43da:	f85d 7b04 	ldr.w	r7, [sp], #4
    43de:	4770      	bx	lr

000043e0 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    43e0:	b480      	push	{r7}
    43e2:	b083      	sub	sp, #12
    43e4:	af00      	add	r7, sp, #0
    43e6:	6078      	str	r0, [r7, #4]
    43e8:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	685a      	ldr	r2, [r3, #4]
    43ee:	683b      	ldr	r3, [r7, #0]
    43f0:	4013      	ands	r3, r2
    43f2:	2b00      	cmp	r3, #0
    43f4:	bf14      	ite	ne
    43f6:	2301      	movne	r3, #1
    43f8:	2300      	moveq	r3, #0
    43fa:	b2db      	uxtb	r3, r3
}
    43fc:	4618      	mov	r0, r3
    43fe:	370c      	adds	r7, #12
    4400:	46bd      	mov	sp, r7
    4402:	f85d 7b04 	ldr.w	r7, [sp], #4
    4406:	4770      	bx	lr

00004408 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4408:	b480      	push	{r7}
    440a:	b083      	sub	sp, #12
    440c:	af00      	add	r7, sp, #0
    440e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	695b      	ldr	r3, [r3, #20]
}
    4414:	4618      	mov	r0, r3
    4416:	370c      	adds	r7, #12
    4418:	46bd      	mov	sp, r7
    441a:	f85d 7b04 	ldr.w	r7, [sp], #4
    441e:	4770      	bx	lr

00004420 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4420:	b480      	push	{r7}
    4422:	b083      	sub	sp, #12
    4424:	af00      	add	r7, sp, #0
    4426:	6078      	str	r0, [r7, #4]
    4428:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	683a      	ldr	r2, [r7, #0]
    442e:	615a      	str	r2, [r3, #20]
}
    4430:	bf00      	nop
    4432:	370c      	adds	r7, #12
    4434:	46bd      	mov	sp, r7
    4436:	f85d 7b04 	ldr.w	r7, [sp], #4
    443a:	4770      	bx	lr

0000443c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    443c:	b480      	push	{r7}
    443e:	b083      	sub	sp, #12
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
    4444:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	683a      	ldr	r2, [r7, #0]
    444a:	611a      	str	r2, [r3, #16]
}
    444c:	bf00      	nop
    444e:	370c      	adds	r7, #12
    4450:	46bd      	mov	sp, r7
    4452:	f85d 7b04 	ldr.w	r7, [sp], #4
    4456:	4770      	bx	lr

00004458 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4458:	b480      	push	{r7}
    445a:	b083      	sub	sp, #12
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
    4460:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	60da      	str	r2, [r3, #12]
}
    4468:	bf00      	nop
    446a:	370c      	adds	r7, #12
    446c:	46bd      	mov	sp, r7
    446e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4472:	4770      	bx	lr

00004474 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4474:	b580      	push	{r7, lr}
    4476:	b082      	sub	sp, #8
    4478:	af00      	add	r7, sp, #0
    447a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	781b      	ldrb	r3, [r3, #0]
    4480:	b2db      	uxtb	r3, r3
    4482:	f043 0302 	orr.w	r3, r3, #2
    4486:	b2da      	uxtb	r2, r3
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    448c:	2103      	movs	r1, #3
    448e:	6878      	ldr	r0, [r7, #4]
    4490:	4b02      	ldr	r3, [pc, #8]	; (449c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4492:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4494:	bf00      	nop
    4496:	3708      	adds	r7, #8
    4498:	46bd      	mov	sp, r7
    449a:	bd80      	pop	{r7, pc}
    449c:	000043bd 	.word	0x000043bd

000044a0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    44a0:	b580      	push	{r7, lr}
    44a2:	b082      	sub	sp, #8
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	781b      	ldrb	r3, [r3, #0]
    44ac:	b2db      	uxtb	r3, r3
    44ae:	f023 0302 	bic.w	r3, r3, #2
    44b2:	b2da      	uxtb	r2, r3
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    44b8:	2103      	movs	r1, #3
    44ba:	6878      	ldr	r0, [r7, #4]
    44bc:	4b02      	ldr	r3, [pc, #8]	; (44c8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    44be:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    44c0:	bf00      	nop
    44c2:	3708      	adds	r7, #8
    44c4:	46bd      	mov	sp, r7
    44c6:	bd80      	pop	{r7, pc}
    44c8:	000043bd 	.word	0x000043bd

000044cc <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b084      	sub	sp, #16
    44d0:	af00      	add	r7, sp, #0
    44d2:	6078      	str	r0, [r7, #4]
    44d4:	460b      	mov	r3, r1
    44d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	781b      	ldrb	r3, [r3, #0]
    44dc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    44de:	7bfb      	ldrb	r3, [r7, #15]
    44e0:	f023 0310 	bic.w	r3, r3, #16
    44e4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    44e6:	78fb      	ldrb	r3, [r7, #3]
    44e8:	011b      	lsls	r3, r3, #4
    44ea:	b25a      	sxtb	r2, r3
    44ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    44f0:	4313      	orrs	r3, r2
    44f2:	b25b      	sxtb	r3, r3
    44f4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	7bfa      	ldrb	r2, [r7, #15]
    44fa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    44fc:	2103      	movs	r1, #3
    44fe:	6878      	ldr	r0, [r7, #4]
    4500:	4b02      	ldr	r3, [pc, #8]	; (450c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4502:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4504:	bf00      	nop
    4506:	3710      	adds	r7, #16
    4508:	46bd      	mov	sp, r7
    450a:	bd80      	pop	{r7, pc}
    450c:	000043bd 	.word	0x000043bd

00004510 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4510:	b580      	push	{r7, lr}
    4512:	b084      	sub	sp, #16
    4514:	af00      	add	r7, sp, #0
    4516:	6078      	str	r0, [r7, #4]
    4518:	460b      	mov	r3, r1
    451a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    451c:	2103      	movs	r1, #3
    451e:	6878      	ldr	r0, [r7, #4]
    4520:	4b06      	ldr	r3, [pc, #24]	; (453c <hri_eic_get_CTRLA_reg+0x2c>)
    4522:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	781b      	ldrb	r3, [r3, #0]
    4528:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    452a:	7bfa      	ldrb	r2, [r7, #15]
    452c:	78fb      	ldrb	r3, [r7, #3]
    452e:	4013      	ands	r3, r2
    4530:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4532:	7bfb      	ldrb	r3, [r7, #15]
}
    4534:	4618      	mov	r0, r3
    4536:	3710      	adds	r7, #16
    4538:	46bd      	mov	sp, r7
    453a:	bd80      	pop	{r7, pc}
    453c:	000043bd 	.word	0x000043bd

00004540 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4540:	b580      	push	{r7, lr}
    4542:	b082      	sub	sp, #8
    4544:	af00      	add	r7, sp, #0
    4546:	6078      	str	r0, [r7, #4]
    4548:	460b      	mov	r3, r1
    454a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	78fa      	ldrb	r2, [r7, #3]
    4550:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4552:	2103      	movs	r1, #3
    4554:	6878      	ldr	r0, [r7, #4]
    4556:	4b03      	ldr	r3, [pc, #12]	; (4564 <hri_eic_write_CTRLA_reg+0x24>)
    4558:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    455a:	bf00      	nop
    455c:	3708      	adds	r7, #8
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
    4562:	bf00      	nop
    4564:	000043bd 	.word	0x000043bd

00004568 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4568:	b480      	push	{r7}
    456a:	b083      	sub	sp, #12
    456c:	af00      	add	r7, sp, #0
    456e:	6078      	str	r0, [r7, #4]
    4570:	460b      	mov	r3, r1
    4572:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4574:	687b      	ldr	r3, [r7, #4]
    4576:	78fa      	ldrb	r2, [r7, #3]
    4578:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    457a:	bf00      	nop
    457c:	370c      	adds	r7, #12
    457e:	46bd      	mov	sp, r7
    4580:	f85d 7b04 	ldr.w	r7, [sp], #4
    4584:	4770      	bx	lr

00004586 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4586:	b480      	push	{r7}
    4588:	b083      	sub	sp, #12
    458a:	af00      	add	r7, sp, #0
    458c:	6078      	str	r0, [r7, #4]
    458e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4590:	687b      	ldr	r3, [r7, #4]
    4592:	683a      	ldr	r2, [r7, #0]
    4594:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4596:	bf00      	nop
    4598:	370c      	adds	r7, #12
    459a:	46bd      	mov	sp, r7
    459c:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a0:	4770      	bx	lr

000045a2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    45a2:	b480      	push	{r7}
    45a4:	b083      	sub	sp, #12
    45a6:	af00      	add	r7, sp, #0
    45a8:	6078      	str	r0, [r7, #4]
    45aa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    45ac:	687b      	ldr	r3, [r7, #4]
    45ae:	683a      	ldr	r2, [r7, #0]
    45b0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    45b2:	bf00      	nop
    45b4:	370c      	adds	r7, #12
    45b6:	46bd      	mov	sp, r7
    45b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45bc:	4770      	bx	lr

000045be <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    45be:	b480      	push	{r7}
    45c0:	b085      	sub	sp, #20
    45c2:	af00      	add	r7, sp, #0
    45c4:	60f8      	str	r0, [r7, #12]
    45c6:	460b      	mov	r3, r1
    45c8:	607a      	str	r2, [r7, #4]
    45ca:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    45cc:	7afb      	ldrb	r3, [r7, #11]
    45ce:	68fa      	ldr	r2, [r7, #12]
    45d0:	3306      	adds	r3, #6
    45d2:	009b      	lsls	r3, r3, #2
    45d4:	4413      	add	r3, r2
    45d6:	687a      	ldr	r2, [r7, #4]
    45d8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    45da:	bf00      	nop
    45dc:	3714      	adds	r7, #20
    45de:	46bd      	mov	sp, r7
    45e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e4:	4770      	bx	lr

000045e6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    45e6:	b480      	push	{r7}
    45e8:	b083      	sub	sp, #12
    45ea:	af00      	add	r7, sp, #0
    45ec:	6078      	str	r0, [r7, #4]
    45ee:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    45f0:	687b      	ldr	r3, [r7, #4]
    45f2:	683a      	ldr	r2, [r7, #0]
    45f4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    45f6:	bf00      	nop
    45f8:	370c      	adds	r7, #12
    45fa:	46bd      	mov	sp, r7
    45fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4600:	4770      	bx	lr

00004602 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4602:	b480      	push	{r7}
    4604:	b083      	sub	sp, #12
    4606:	af00      	add	r7, sp, #0
    4608:	6078      	str	r0, [r7, #4]
    460a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	683a      	ldr	r2, [r7, #0]
    4610:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4612:	bf00      	nop
    4614:	370c      	adds	r7, #12
    4616:	46bd      	mov	sp, r7
    4618:	f85d 7b04 	ldr.w	r7, [sp], #4
    461c:	4770      	bx	lr
	...

00004620 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4620:	b580      	push	{r7, lr}
    4622:	b082      	sub	sp, #8
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4628:	2101      	movs	r1, #1
    462a:	484f      	ldr	r0, [pc, #316]	; (4768 <_ext_irq_init+0x148>)
    462c:	4b4f      	ldr	r3, [pc, #316]	; (476c <_ext_irq_init+0x14c>)
    462e:	4798      	blx	r3
    4630:	4603      	mov	r3, r0
    4632:	f083 0301 	eor.w	r3, r3, #1
    4636:	b2db      	uxtb	r3, r3
    4638:	2b00      	cmp	r3, #0
    463a:	d011      	beq.n	4660 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    463c:	2102      	movs	r1, #2
    463e:	484a      	ldr	r0, [pc, #296]	; (4768 <_ext_irq_init+0x148>)
    4640:	4b4b      	ldr	r3, [pc, #300]	; (4770 <_ext_irq_init+0x150>)
    4642:	4798      	blx	r3
    4644:	4603      	mov	r3, r0
    4646:	2b00      	cmp	r3, #0
    4648:	d006      	beq.n	4658 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    464a:	4847      	ldr	r0, [pc, #284]	; (4768 <_ext_irq_init+0x148>)
    464c:	4b49      	ldr	r3, [pc, #292]	; (4774 <_ext_irq_init+0x154>)
    464e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4650:	2102      	movs	r1, #2
    4652:	4845      	ldr	r0, [pc, #276]	; (4768 <_ext_irq_init+0x148>)
    4654:	4b48      	ldr	r3, [pc, #288]	; (4778 <_ext_irq_init+0x158>)
    4656:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4658:	2101      	movs	r1, #1
    465a:	4843      	ldr	r0, [pc, #268]	; (4768 <_ext_irq_init+0x148>)
    465c:	4b47      	ldr	r3, [pc, #284]	; (477c <_ext_irq_init+0x15c>)
    465e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4660:	2101      	movs	r1, #1
    4662:	4841      	ldr	r0, [pc, #260]	; (4768 <_ext_irq_init+0x148>)
    4664:	4b44      	ldr	r3, [pc, #272]	; (4778 <_ext_irq_init+0x158>)
    4666:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4668:	2100      	movs	r1, #0
    466a:	483f      	ldr	r0, [pc, #252]	; (4768 <_ext_irq_init+0x148>)
    466c:	4b44      	ldr	r3, [pc, #272]	; (4780 <_ext_irq_init+0x160>)
    466e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4670:	2100      	movs	r1, #0
    4672:	483d      	ldr	r0, [pc, #244]	; (4768 <_ext_irq_init+0x148>)
    4674:	4b43      	ldr	r3, [pc, #268]	; (4784 <_ext_irq_init+0x164>)
    4676:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4678:	2100      	movs	r1, #0
    467a:	483b      	ldr	r0, [pc, #236]	; (4768 <_ext_irq_init+0x148>)
    467c:	4b42      	ldr	r3, [pc, #264]	; (4788 <_ext_irq_init+0x168>)
    467e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4680:	f240 31bb 	movw	r1, #955	; 0x3bb
    4684:	4838      	ldr	r0, [pc, #224]	; (4768 <_ext_irq_init+0x148>)
    4686:	4b41      	ldr	r3, [pc, #260]	; (478c <_ext_irq_init+0x16c>)
    4688:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    468a:	f240 313b 	movw	r1, #827	; 0x33b
    468e:	4836      	ldr	r0, [pc, #216]	; (4768 <_ext_irq_init+0x148>)
    4690:	4b3f      	ldr	r3, [pc, #252]	; (4790 <_ext_irq_init+0x170>)
    4692:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4694:	2100      	movs	r1, #0
    4696:	4834      	ldr	r0, [pc, #208]	; (4768 <_ext_irq_init+0x148>)
    4698:	4b3e      	ldr	r3, [pc, #248]	; (4794 <_ext_irq_init+0x174>)
    469a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    469c:	4a3e      	ldr	r2, [pc, #248]	; (4798 <_ext_irq_init+0x178>)
    469e:	2100      	movs	r1, #0
    46a0:	4831      	ldr	r0, [pc, #196]	; (4768 <_ext_irq_init+0x148>)
    46a2:	4b3e      	ldr	r3, [pc, #248]	; (479c <_ext_irq_init+0x17c>)
    46a4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    46a6:	2211      	movs	r2, #17
    46a8:	2101      	movs	r1, #1
    46aa:	482f      	ldr	r0, [pc, #188]	; (4768 <_ext_irq_init+0x148>)
    46ac:	4b3b      	ldr	r3, [pc, #236]	; (479c <_ext_irq_init+0x17c>)
    46ae:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    46b0:	482d      	ldr	r0, [pc, #180]	; (4768 <_ext_irq_init+0x148>)
    46b2:	4b3b      	ldr	r3, [pc, #236]	; (47a0 <_ext_irq_init+0x180>)
    46b4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    46b6:	200c      	movs	r0, #12
    46b8:	4b3a      	ldr	r3, [pc, #232]	; (47a4 <_ext_irq_init+0x184>)
    46ba:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    46bc:	200c      	movs	r0, #12
    46be:	4b3a      	ldr	r3, [pc, #232]	; (47a8 <_ext_irq_init+0x188>)
    46c0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    46c2:	200c      	movs	r0, #12
    46c4:	4b39      	ldr	r3, [pc, #228]	; (47ac <_ext_irq_init+0x18c>)
    46c6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    46c8:	200d      	movs	r0, #13
    46ca:	4b36      	ldr	r3, [pc, #216]	; (47a4 <_ext_irq_init+0x184>)
    46cc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    46ce:	200d      	movs	r0, #13
    46d0:	4b35      	ldr	r3, [pc, #212]	; (47a8 <_ext_irq_init+0x188>)
    46d2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    46d4:	200d      	movs	r0, #13
    46d6:	4b35      	ldr	r3, [pc, #212]	; (47ac <_ext_irq_init+0x18c>)
    46d8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    46da:	200f      	movs	r0, #15
    46dc:	4b31      	ldr	r3, [pc, #196]	; (47a4 <_ext_irq_init+0x184>)
    46de:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    46e0:	200f      	movs	r0, #15
    46e2:	4b31      	ldr	r3, [pc, #196]	; (47a8 <_ext_irq_init+0x188>)
    46e4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    46e6:	200f      	movs	r0, #15
    46e8:	4b30      	ldr	r3, [pc, #192]	; (47ac <_ext_irq_init+0x18c>)
    46ea:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    46ec:	2010      	movs	r0, #16
    46ee:	4b2d      	ldr	r3, [pc, #180]	; (47a4 <_ext_irq_init+0x184>)
    46f0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    46f2:	2010      	movs	r0, #16
    46f4:	4b2c      	ldr	r3, [pc, #176]	; (47a8 <_ext_irq_init+0x188>)
    46f6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    46f8:	2010      	movs	r0, #16
    46fa:	4b2c      	ldr	r3, [pc, #176]	; (47ac <_ext_irq_init+0x18c>)
    46fc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    46fe:	2011      	movs	r0, #17
    4700:	4b28      	ldr	r3, [pc, #160]	; (47a4 <_ext_irq_init+0x184>)
    4702:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4704:	2011      	movs	r0, #17
    4706:	4b28      	ldr	r3, [pc, #160]	; (47a8 <_ext_irq_init+0x188>)
    4708:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    470a:	2011      	movs	r0, #17
    470c:	4b27      	ldr	r3, [pc, #156]	; (47ac <_ext_irq_init+0x18c>)
    470e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4710:	2012      	movs	r0, #18
    4712:	4b24      	ldr	r3, [pc, #144]	; (47a4 <_ext_irq_init+0x184>)
    4714:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4716:	2012      	movs	r0, #18
    4718:	4b23      	ldr	r3, [pc, #140]	; (47a8 <_ext_irq_init+0x188>)
    471a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    471c:	2012      	movs	r0, #18
    471e:	4b23      	ldr	r3, [pc, #140]	; (47ac <_ext_irq_init+0x18c>)
    4720:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4722:	2013      	movs	r0, #19
    4724:	4b1f      	ldr	r3, [pc, #124]	; (47a4 <_ext_irq_init+0x184>)
    4726:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4728:	2013      	movs	r0, #19
    472a:	4b1f      	ldr	r3, [pc, #124]	; (47a8 <_ext_irq_init+0x188>)
    472c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    472e:	2013      	movs	r0, #19
    4730:	4b1e      	ldr	r3, [pc, #120]	; (47ac <_ext_irq_init+0x18c>)
    4732:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4734:	2014      	movs	r0, #20
    4736:	4b1b      	ldr	r3, [pc, #108]	; (47a4 <_ext_irq_init+0x184>)
    4738:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    473a:	2014      	movs	r0, #20
    473c:	4b1a      	ldr	r3, [pc, #104]	; (47a8 <_ext_irq_init+0x188>)
    473e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4740:	2014      	movs	r0, #20
    4742:	4b1a      	ldr	r3, [pc, #104]	; (47ac <_ext_irq_init+0x18c>)
    4744:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4746:	2015      	movs	r0, #21
    4748:	4b16      	ldr	r3, [pc, #88]	; (47a4 <_ext_irq_init+0x184>)
    474a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    474c:	2015      	movs	r0, #21
    474e:	4b16      	ldr	r3, [pc, #88]	; (47a8 <_ext_irq_init+0x188>)
    4750:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4752:	2015      	movs	r0, #21
    4754:	4b15      	ldr	r3, [pc, #84]	; (47ac <_ext_irq_init+0x18c>)
    4756:	4798      	blx	r3

	callback = cb;
    4758:	4a15      	ldr	r2, [pc, #84]	; (47b0 <_ext_irq_init+0x190>)
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    475e:	2300      	movs	r3, #0
}
    4760:	4618      	mov	r0, r3
    4762:	3708      	adds	r7, #8
    4764:	46bd      	mov	sp, r7
    4766:	bd80      	pop	{r7, pc}
    4768:	40002800 	.word	0x40002800
    476c:	000043e1 	.word	0x000043e1
    4770:	00004511 	.word	0x00004511
    4774:	000044a1 	.word	0x000044a1
    4778:	000043bd 	.word	0x000043bd
    477c:	00004541 	.word	0x00004541
    4780:	000044cd 	.word	0x000044cd
    4784:	00004569 	.word	0x00004569
    4788:	00004587 	.word	0x00004587
    478c:	000045a3 	.word	0x000045a3
    4790:	000045e7 	.word	0x000045e7
    4794:	00004603 	.word	0x00004603
    4798:	90999013 	.word	0x90999013
    479c:	000045bf 	.word	0x000045bf
    47a0:	00004475 	.word	0x00004475
    47a4:	0000433d 	.word	0x0000433d
    47a8:	00004381 	.word	0x00004381
    47ac:	00004301 	.word	0x00004301
    47b0:	20000bb4 	.word	0x20000bb4

000047b4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b084      	sub	sp, #16
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]
    47bc:	460b      	mov	r3, r1
    47be:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    47c0:	23ff      	movs	r3, #255	; 0xff
    47c2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    47c4:	2300      	movs	r3, #0
    47c6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    47c8:	e010      	b.n	47ec <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    47ca:	7bbb      	ldrb	r3, [r7, #14]
    47cc:	4a1c      	ldr	r2, [pc, #112]	; (4840 <_ext_irq_enable+0x8c>)
    47ce:	00db      	lsls	r3, r3, #3
    47d0:	4413      	add	r3, r2
    47d2:	685a      	ldr	r2, [r3, #4]
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	429a      	cmp	r2, r3
    47d8:	d105      	bne.n	47e6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    47da:	7bbb      	ldrb	r3, [r7, #14]
    47dc:	4a18      	ldr	r2, [pc, #96]	; (4840 <_ext_irq_enable+0x8c>)
    47de:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    47e2:	73fb      	strb	r3, [r7, #15]
			break;
    47e4:	e005      	b.n	47f2 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    47e6:	7bbb      	ldrb	r3, [r7, #14]
    47e8:	3301      	adds	r3, #1
    47ea:	73bb      	strb	r3, [r7, #14]
    47ec:	7bbb      	ldrb	r3, [r7, #14]
    47ee:	2b08      	cmp	r3, #8
    47f0:	d9eb      	bls.n	47ca <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    47f2:	7bfb      	ldrb	r3, [r7, #15]
    47f4:	2bff      	cmp	r3, #255	; 0xff
    47f6:	d102      	bne.n	47fe <_ext_irq_enable+0x4a>
		return -1;
    47f8:	f04f 33ff 	mov.w	r3, #4294967295
    47fc:	e01c      	b.n	4838 <_ext_irq_enable+0x84>
	}

	if (enable) {
    47fe:	78fb      	ldrb	r3, [r7, #3]
    4800:	2b00      	cmp	r3, #0
    4802:	d008      	beq.n	4816 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4804:	7bfb      	ldrb	r3, [r7, #15]
    4806:	2201      	movs	r2, #1
    4808:	fa02 f303 	lsl.w	r3, r2, r3
    480c:	4619      	mov	r1, r3
    480e:	480d      	ldr	r0, [pc, #52]	; (4844 <_ext_irq_enable+0x90>)
    4810:	4b0d      	ldr	r3, [pc, #52]	; (4848 <_ext_irq_enable+0x94>)
    4812:	4798      	blx	r3
    4814:	e00f      	b.n	4836 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4816:	7bfb      	ldrb	r3, [r7, #15]
    4818:	2201      	movs	r2, #1
    481a:	fa02 f303 	lsl.w	r3, r2, r3
    481e:	4619      	mov	r1, r3
    4820:	4808      	ldr	r0, [pc, #32]	; (4844 <_ext_irq_enable+0x90>)
    4822:	4b0a      	ldr	r3, [pc, #40]	; (484c <_ext_irq_enable+0x98>)
    4824:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4826:	7bfb      	ldrb	r3, [r7, #15]
    4828:	2201      	movs	r2, #1
    482a:	fa02 f303 	lsl.w	r3, r2, r3
    482e:	4619      	mov	r1, r3
    4830:	4804      	ldr	r0, [pc, #16]	; (4844 <_ext_irq_enable+0x90>)
    4832:	4b07      	ldr	r3, [pc, #28]	; (4850 <_ext_irq_enable+0x9c>)
    4834:	4798      	blx	r3
	}

	return ERR_NONE;
    4836:	2300      	movs	r3, #0
}
    4838:	4618      	mov	r0, r3
    483a:	3710      	adds	r7, #16
    483c:	46bd      	mov	sp, r7
    483e:	bd80      	pop	{r7, pc}
    4840:	0001216c 	.word	0x0001216c
    4844:	40002800 	.word	0x40002800
    4848:	0000443d 	.word	0x0000443d
    484c:	00004459 	.word	0x00004459
    4850:	00004421 	.word	0x00004421

00004854 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4854:	b580      	push	{r7, lr}
    4856:	b084      	sub	sp, #16
    4858:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    485a:	4841      	ldr	r0, [pc, #260]	; (4960 <_ext_irq_handler+0x10c>)
    485c:	4b41      	ldr	r3, [pc, #260]	; (4964 <_ext_irq_handler+0x110>)
    485e:	4798      	blx	r3
    4860:	4603      	mov	r3, r0
    4862:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4864:	f04f 33ff 	mov.w	r3, #4294967295
    4868:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    486a:	683b      	ldr	r3, [r7, #0]
    486c:	4619      	mov	r1, r3
    486e:	483c      	ldr	r0, [pc, #240]	; (4960 <_ext_irq_handler+0x10c>)
    4870:	4b3d      	ldr	r3, [pc, #244]	; (4968 <_ext_irq_handler+0x114>)
    4872:	4798      	blx	r3

	ASSERT(callback);
    4874:	4b3d      	ldr	r3, [pc, #244]	; (496c <_ext_irq_handler+0x118>)
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	2b00      	cmp	r3, #0
    487a:	bf14      	ite	ne
    487c:	2301      	movne	r3, #1
    487e:	2300      	moveq	r3, #0
    4880:	b2db      	uxtb	r3, r3
    4882:	f44f 7284 	mov.w	r2, #264	; 0x108
    4886:	493a      	ldr	r1, [pc, #232]	; (4970 <_ext_irq_handler+0x11c>)
    4888:	4618      	mov	r0, r3
    488a:	4b3a      	ldr	r3, [pc, #232]	; (4974 <_ext_irq_handler+0x120>)
    488c:	4798      	blx	r3

	while (flags) {
    488e:	e060      	b.n	4952 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4890:	683b      	ldr	r3, [r7, #0]
    4892:	4618      	mov	r0, r3
    4894:	4b38      	ldr	r3, [pc, #224]	; (4978 <_ext_irq_handler+0x124>)
    4896:	4798      	blx	r3
    4898:	4603      	mov	r3, r0
    489a:	b2db      	uxtb	r3, r3
    489c:	3b01      	subs	r3, #1
    489e:	b2db      	uxtb	r3, r3
    48a0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    48a2:	e047      	b.n	4934 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    48a4:	2300      	movs	r3, #0
    48a6:	71fb      	strb	r3, [r7, #7]
    48a8:	2309      	movs	r3, #9
    48aa:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    48ac:	e024      	b.n	48f8 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    48ae:	79ba      	ldrb	r2, [r7, #6]
    48b0:	79fb      	ldrb	r3, [r7, #7]
    48b2:	4413      	add	r3, r2
    48b4:	105b      	asrs	r3, r3, #1
    48b6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    48b8:	797b      	ldrb	r3, [r7, #5]
    48ba:	4a30      	ldr	r2, [pc, #192]	; (497c <_ext_irq_handler+0x128>)
    48bc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    48c0:	461a      	mov	r2, r3
    48c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    48c6:	429a      	cmp	r2, r3
    48c8:	d106      	bne.n	48d8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    48ca:	797b      	ldrb	r3, [r7, #5]
    48cc:	4a2b      	ldr	r2, [pc, #172]	; (497c <_ext_irq_handler+0x128>)
    48ce:	00db      	lsls	r3, r3, #3
    48d0:	4413      	add	r3, r2
    48d2:	685b      	ldr	r3, [r3, #4]
    48d4:	60bb      	str	r3, [r7, #8]
					break;
    48d6:	e013      	b.n	4900 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    48d8:	797b      	ldrb	r3, [r7, #5]
    48da:	4a28      	ldr	r2, [pc, #160]	; (497c <_ext_irq_handler+0x128>)
    48dc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    48e0:	461a      	mov	r2, r3
    48e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    48e6:	429a      	cmp	r2, r3
    48e8:	da03      	bge.n	48f2 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    48ea:	797b      	ldrb	r3, [r7, #5]
    48ec:	3301      	adds	r3, #1
    48ee:	71fb      	strb	r3, [r7, #7]
    48f0:	e002      	b.n	48f8 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    48f2:	797b      	ldrb	r3, [r7, #5]
    48f4:	3b01      	subs	r3, #1
    48f6:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    48f8:	79ba      	ldrb	r2, [r7, #6]
    48fa:	79fb      	ldrb	r3, [r7, #7]
    48fc:	429a      	cmp	r2, r3
    48fe:	d2d6      	bcs.n	48ae <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4900:	68bb      	ldr	r3, [r7, #8]
    4902:	f1b3 3fff 	cmp.w	r3, #4294967295
    4906:	d003      	beq.n	4910 <_ext_irq_handler+0xbc>
				callback(pin);
    4908:	4b18      	ldr	r3, [pc, #96]	; (496c <_ext_irq_handler+0x118>)
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	68b8      	ldr	r0, [r7, #8]
    490e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4910:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4914:	2201      	movs	r2, #1
    4916:	fa02 f303 	lsl.w	r3, r2, r3
    491a:	43da      	mvns	r2, r3
    491c:	683b      	ldr	r3, [r7, #0]
    491e:	4013      	ands	r3, r2
    4920:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4922:	683b      	ldr	r3, [r7, #0]
    4924:	4618      	mov	r0, r3
    4926:	4b14      	ldr	r3, [pc, #80]	; (4978 <_ext_irq_handler+0x124>)
    4928:	4798      	blx	r3
    492a:	4603      	mov	r3, r0
    492c:	b2db      	uxtb	r3, r3
    492e:	3b01      	subs	r3, #1
    4930:	b2db      	uxtb	r3, r3
    4932:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4934:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4938:	f1b3 3fff 	cmp.w	r3, #4294967295
    493c:	d1b2      	bne.n	48a4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    493e:	4808      	ldr	r0, [pc, #32]	; (4960 <_ext_irq_handler+0x10c>)
    4940:	4b08      	ldr	r3, [pc, #32]	; (4964 <_ext_irq_handler+0x110>)
    4942:	4798      	blx	r3
    4944:	4603      	mov	r3, r0
    4946:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4948:	683b      	ldr	r3, [r7, #0]
    494a:	4619      	mov	r1, r3
    494c:	4804      	ldr	r0, [pc, #16]	; (4960 <_ext_irq_handler+0x10c>)
    494e:	4b06      	ldr	r3, [pc, #24]	; (4968 <_ext_irq_handler+0x114>)
    4950:	4798      	blx	r3
	while (flags) {
    4952:	683b      	ldr	r3, [r7, #0]
    4954:	2b00      	cmp	r3, #0
    4956:	d19b      	bne.n	4890 <_ext_irq_handler+0x3c>
	}
}
    4958:	bf00      	nop
    495a:	3710      	adds	r7, #16
    495c:	46bd      	mov	sp, r7
    495e:	bd80      	pop	{r7, pc}
    4960:	40002800 	.word	0x40002800
    4964:	00004409 	.word	0x00004409
    4968:	00004421 	.word	0x00004421
    496c:	20000bb4 	.word	0x20000bb4
    4970:	000121b4 	.word	0x000121b4
    4974:	00003681 	.word	0x00003681
    4978:	00011bb1 	.word	0x00011bb1
    497c:	0001216c 	.word	0x0001216c

00004980 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4980:	b580      	push	{r7, lr}
    4982:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4984:	4b01      	ldr	r3, [pc, #4]	; (498c <EIC_0_Handler+0xc>)
    4986:	4798      	blx	r3
} /**
    4988:	bf00      	nop
    498a:	bd80      	pop	{r7, pc}
    498c:	00004855 	.word	0x00004855

00004990 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4990:	b580      	push	{r7, lr}
    4992:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4994:	4b01      	ldr	r3, [pc, #4]	; (499c <EIC_1_Handler+0xc>)
    4996:	4798      	blx	r3
} /**
    4998:	bf00      	nop
    499a:	bd80      	pop	{r7, pc}
    499c:	00004855 	.word	0x00004855

000049a0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    49a4:	4b01      	ldr	r3, [pc, #4]	; (49ac <EIC_3_Handler+0xc>)
    49a6:	4798      	blx	r3
} /**
    49a8:	bf00      	nop
    49aa:	bd80      	pop	{r7, pc}
    49ac:	00004855 	.word	0x00004855

000049b0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    49b0:	b580      	push	{r7, lr}
    49b2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    49b4:	4b01      	ldr	r3, [pc, #4]	; (49bc <EIC_4_Handler+0xc>)
    49b6:	4798      	blx	r3
} /**
    49b8:	bf00      	nop
    49ba:	bd80      	pop	{r7, pc}
    49bc:	00004855 	.word	0x00004855

000049c0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    49c0:	b580      	push	{r7, lr}
    49c2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    49c4:	4b01      	ldr	r3, [pc, #4]	; (49cc <EIC_5_Handler+0xc>)
    49c6:	4798      	blx	r3
} /**
    49c8:	bf00      	nop
    49ca:	bd80      	pop	{r7, pc}
    49cc:	00004855 	.word	0x00004855

000049d0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    49d0:	b580      	push	{r7, lr}
    49d2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    49d4:	4b01      	ldr	r3, [pc, #4]	; (49dc <EIC_6_Handler+0xc>)
    49d6:	4798      	blx	r3
} /**
    49d8:	bf00      	nop
    49da:	bd80      	pop	{r7, pc}
    49dc:	00004855 	.word	0x00004855

000049e0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    49e0:	b580      	push	{r7, lr}
    49e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    49e4:	4b01      	ldr	r3, [pc, #4]	; (49ec <EIC_7_Handler+0xc>)
    49e6:	4798      	blx	r3
} /**
    49e8:	bf00      	nop
    49ea:	bd80      	pop	{r7, pc}
    49ec:	00004855 	.word	0x00004855

000049f0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    49f0:	b580      	push	{r7, lr}
    49f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    49f4:	4b01      	ldr	r3, [pc, #4]	; (49fc <EIC_8_Handler+0xc>)
    49f6:	4798      	blx	r3
} /**
    49f8:	bf00      	nop
    49fa:	bd80      	pop	{r7, pc}
    49fc:	00004855 	.word	0x00004855

00004a00 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a04:	4b01      	ldr	r3, [pc, #4]	; (4a0c <EIC_9_Handler+0xc>)
    4a06:	4798      	blx	r3
}
    4a08:	bf00      	nop
    4a0a:	bd80      	pop	{r7, pc}
    4a0c:	00004855 	.word	0x00004855

00004a10 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4a10:	b480      	push	{r7}
    4a12:	b085      	sub	sp, #20
    4a14:	af00      	add	r7, sp, #0
    4a16:	60f8      	str	r0, [r7, #12]
    4a18:	460b      	mov	r3, r1
    4a1a:	607a      	str	r2, [r7, #4]
    4a1c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4a1e:	7afa      	ldrb	r2, [r7, #11]
    4a20:	68fb      	ldr	r3, [r7, #12]
    4a22:	3248      	adds	r2, #72	; 0x48
    4a24:	6879      	ldr	r1, [r7, #4]
    4a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4a2a:	bf00      	nop
    4a2c:	3714      	adds	r7, #20
    4a2e:	46bd      	mov	sp, r7
    4a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a34:	4770      	bx	lr

00004a36 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4a36:	b480      	push	{r7}
    4a38:	b083      	sub	sp, #12
    4a3a:	af00      	add	r7, sp, #0
    4a3c:	6078      	str	r0, [r7, #4]
    4a3e:	460b      	mov	r3, r1
    4a40:	70fb      	strb	r3, [r7, #3]
    4a42:	4613      	mov	r3, r2
    4a44:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4a46:	78fb      	ldrb	r3, [r7, #3]
    4a48:	687a      	ldr	r2, [r7, #4]
    4a4a:	3304      	adds	r3, #4
    4a4c:	00db      	lsls	r3, r3, #3
    4a4e:	4413      	add	r3, r2
    4a50:	78ba      	ldrb	r2, [r7, #2]
    4a52:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4a54:	78fb      	ldrb	r3, [r7, #3]
    4a56:	78ba      	ldrb	r2, [r7, #2]
    4a58:	43d2      	mvns	r2, r2
    4a5a:	b2d1      	uxtb	r1, r2
    4a5c:	687a      	ldr	r2, [r7, #4]
    4a5e:	3304      	adds	r3, #4
    4a60:	00db      	lsls	r3, r3, #3
    4a62:	4413      	add	r3, r2
    4a64:	460a      	mov	r2, r1
    4a66:	711a      	strb	r2, [r3, #4]
}
    4a68:	bf00      	nop
    4a6a:	370c      	adds	r7, #12
    4a6c:	46bd      	mov	sp, r7
    4a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a72:	4770      	bx	lr

00004a74 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	460b      	mov	r3, r1
    4a7e:	607a      	str	r2, [r7, #4]
    4a80:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4a82:	7afa      	ldrb	r2, [r7, #11]
    4a84:	68fb      	ldr	r3, [r7, #12]
    4a86:	3204      	adds	r2, #4
    4a88:	6879      	ldr	r1, [r7, #4]
    4a8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4a8e:	bf00      	nop
    4a90:	3714      	adds	r7, #20
    4a92:	46bd      	mov	sp, r7
    4a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a98:	4770      	bx	lr
	...

00004a9c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b082      	sub	sp, #8
    4aa0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4aa2:	2300      	movs	r3, #0
    4aa4:	71fb      	strb	r3, [r7, #7]
    4aa6:	e00b      	b.n	4ac0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4aa8:	79fb      	ldrb	r3, [r7, #7]
    4aaa:	4a18      	ldr	r2, [pc, #96]	; (4b0c <_event_system_init+0x70>)
    4aac:	5cd3      	ldrb	r3, [r2, r3]
    4aae:	461a      	mov	r2, r3
    4ab0:	79fb      	ldrb	r3, [r7, #7]
    4ab2:	4619      	mov	r1, r3
    4ab4:	4816      	ldr	r0, [pc, #88]	; (4b10 <_event_system_init+0x74>)
    4ab6:	4b17      	ldr	r3, [pc, #92]	; (4b14 <_event_system_init+0x78>)
    4ab8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4aba:	79fb      	ldrb	r3, [r7, #7]
    4abc:	3301      	adds	r3, #1
    4abe:	71fb      	strb	r3, [r7, #7]
    4ac0:	79fb      	ldrb	r3, [r7, #7]
    4ac2:	2b42      	cmp	r3, #66	; 0x42
    4ac4:	d9f0      	bls.n	4aa8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4ac6:	2300      	movs	r3, #0
    4ac8:	71fb      	strb	r3, [r7, #7]
    4aca:	e016      	b.n	4afa <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4acc:	79fb      	ldrb	r3, [r7, #7]
    4ace:	4a12      	ldr	r2, [pc, #72]	; (4b18 <_event_system_init+0x7c>)
    4ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4ad4:	461a      	mov	r2, r3
    4ad6:	79fb      	ldrb	r3, [r7, #7]
    4ad8:	4619      	mov	r1, r3
    4ada:	480d      	ldr	r0, [pc, #52]	; (4b10 <_event_system_init+0x74>)
    4adc:	4b0f      	ldr	r3, [pc, #60]	; (4b1c <_event_system_init+0x80>)
    4ade:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4ae0:	79fb      	ldrb	r3, [r7, #7]
    4ae2:	4a0f      	ldr	r2, [pc, #60]	; (4b20 <_event_system_init+0x84>)
    4ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ae8:	b2da      	uxtb	r2, r3
    4aea:	79fb      	ldrb	r3, [r7, #7]
    4aec:	4619      	mov	r1, r3
    4aee:	4808      	ldr	r0, [pc, #32]	; (4b10 <_event_system_init+0x74>)
    4af0:	4b0c      	ldr	r3, [pc, #48]	; (4b24 <_event_system_init+0x88>)
    4af2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4af4:	79fb      	ldrb	r3, [r7, #7]
    4af6:	3301      	adds	r3, #1
    4af8:	71fb      	strb	r3, [r7, #7]
    4afa:	79fb      	ldrb	r3, [r7, #7]
    4afc:	2b1f      	cmp	r3, #31
    4afe:	d9e5      	bls.n	4acc <_event_system_init+0x30>
	}

	return ERR_NONE;
    4b00:	2300      	movs	r3, #0
}
    4b02:	4618      	mov	r0, r3
    4b04:	3708      	adds	r7, #8
    4b06:	46bd      	mov	sp, r7
    4b08:	bd80      	pop	{r7, pc}
    4b0a:	bf00      	nop
    4b0c:	000121cc 	.word	0x000121cc
    4b10:	4100e000 	.word	0x4100e000
    4b14:	00004a11 	.word	0x00004a11
    4b18:	00012210 	.word	0x00012210
    4b1c:	00004a75 	.word	0x00004a75
    4b20:	00012250 	.word	0x00012250
    4b24:	00004a37 	.word	0x00004a37

00004b28 <hri_gclk_wait_for_sync>:
{
    4b28:	b480      	push	{r7}
    4b2a:	b083      	sub	sp, #12
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4b32:	bf00      	nop
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	685a      	ldr	r2, [r3, #4]
    4b38:	683b      	ldr	r3, [r7, #0]
    4b3a:	4013      	ands	r3, r2
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d1f9      	bne.n	4b34 <hri_gclk_wait_for_sync+0xc>
}
    4b40:	bf00      	nop
    4b42:	370c      	adds	r7, #12
    4b44:	46bd      	mov	sp, r7
    4b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b4a:	4770      	bx	lr

00004b4c <hri_gclk_write_GENCTRL_reg>:
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b084      	sub	sp, #16
    4b50:	af00      	add	r7, sp, #0
    4b52:	60f8      	str	r0, [r7, #12]
    4b54:	460b      	mov	r3, r1
    4b56:	607a      	str	r2, [r7, #4]
    4b58:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4b5a:	7afa      	ldrb	r2, [r7, #11]
    4b5c:	68fb      	ldr	r3, [r7, #12]
    4b5e:	3208      	adds	r2, #8
    4b60:	6879      	ldr	r1, [r7, #4]
    4b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4b66:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4b6a:	68f8      	ldr	r0, [r7, #12]
    4b6c:	4b02      	ldr	r3, [pc, #8]	; (4b78 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4b6e:	4798      	blx	r3
}
    4b70:	bf00      	nop
    4b72:	3710      	adds	r7, #16
    4b74:	46bd      	mov	sp, r7
    4b76:	bd80      	pop	{r7, pc}
    4b78:	00004b29 	.word	0x00004b29

00004b7c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b082      	sub	sp, #8
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	f003 0301 	and.w	r3, r3, #1
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d004      	beq.n	4b98 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4b8e:	4a3b      	ldr	r2, [pc, #236]	; (4c7c <_gclk_init_generators_by_fref+0x100>)
    4b90:	2100      	movs	r1, #0
    4b92:	483b      	ldr	r0, [pc, #236]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4b94:	4b3b      	ldr	r3, [pc, #236]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4b96:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	f003 0302 	and.w	r3, r3, #2
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d004      	beq.n	4bac <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4ba2:	4a39      	ldr	r2, [pc, #228]	; (4c88 <_gclk_init_generators_by_fref+0x10c>)
    4ba4:	2101      	movs	r1, #1
    4ba6:	4836      	ldr	r0, [pc, #216]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4ba8:	4b36      	ldr	r3, [pc, #216]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4baa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	f003 0304 	and.w	r3, r3, #4
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d004      	beq.n	4bc0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4bb6:	4a35      	ldr	r2, [pc, #212]	; (4c8c <_gclk_init_generators_by_fref+0x110>)
    4bb8:	2102      	movs	r1, #2
    4bba:	4831      	ldr	r0, [pc, #196]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4bbc:	4b31      	ldr	r3, [pc, #196]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4bbe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	f003 0308 	and.w	r3, r3, #8
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d004      	beq.n	4bd4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4bca:	4a31      	ldr	r2, [pc, #196]	; (4c90 <_gclk_init_generators_by_fref+0x114>)
    4bcc:	2103      	movs	r1, #3
    4bce:	482c      	ldr	r0, [pc, #176]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4bd0:	4b2c      	ldr	r3, [pc, #176]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4bd2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	f003 0310 	and.w	r3, r3, #16
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d004      	beq.n	4be8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4bde:	4a2d      	ldr	r2, [pc, #180]	; (4c94 <_gclk_init_generators_by_fref+0x118>)
    4be0:	2104      	movs	r1, #4
    4be2:	4827      	ldr	r0, [pc, #156]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4be4:	4b27      	ldr	r3, [pc, #156]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4be6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	f003 0320 	and.w	r3, r3, #32
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d004      	beq.n	4bfc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4bf2:	4a29      	ldr	r2, [pc, #164]	; (4c98 <_gclk_init_generators_by_fref+0x11c>)
    4bf4:	2105      	movs	r1, #5
    4bf6:	4822      	ldr	r0, [pc, #136]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4bf8:	4b22      	ldr	r3, [pc, #136]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4bfa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4c02:	2b00      	cmp	r3, #0
    4c04:	d004      	beq.n	4c10 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4c06:	4a25      	ldr	r2, [pc, #148]	; (4c9c <_gclk_init_generators_by_fref+0x120>)
    4c08:	2106      	movs	r1, #6
    4c0a:	481d      	ldr	r0, [pc, #116]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4c0c:	4b1d      	ldr	r3, [pc, #116]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4c0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4c16:	2b00      	cmp	r3, #0
    4c18:	d004      	beq.n	4c24 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4c1a:	4a21      	ldr	r2, [pc, #132]	; (4ca0 <_gclk_init_generators_by_fref+0x124>)
    4c1c:	2107      	movs	r1, #7
    4c1e:	4818      	ldr	r0, [pc, #96]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4c20:	4b18      	ldr	r3, [pc, #96]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4c22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4c24:	687b      	ldr	r3, [r7, #4]
    4c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d004      	beq.n	4c38 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4c2e:	4a1d      	ldr	r2, [pc, #116]	; (4ca4 <_gclk_init_generators_by_fref+0x128>)
    4c30:	2108      	movs	r1, #8
    4c32:	4813      	ldr	r0, [pc, #76]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4c34:	4b13      	ldr	r3, [pc, #76]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4c36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d004      	beq.n	4c4c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4c42:	4a19      	ldr	r2, [pc, #100]	; (4ca8 <_gclk_init_generators_by_fref+0x12c>)
    4c44:	2109      	movs	r1, #9
    4c46:	480e      	ldr	r0, [pc, #56]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4c48:	4b0e      	ldr	r3, [pc, #56]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4c4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4c52:	2b00      	cmp	r3, #0
    4c54:	d004      	beq.n	4c60 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4c56:	4a15      	ldr	r2, [pc, #84]	; (4cac <_gclk_init_generators_by_fref+0x130>)
    4c58:	210a      	movs	r1, #10
    4c5a:	4809      	ldr	r0, [pc, #36]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4c5c:	4b09      	ldr	r3, [pc, #36]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4c5e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4c66:	2b00      	cmp	r3, #0
    4c68:	d004      	beq.n	4c74 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4c6a:	4a11      	ldr	r2, [pc, #68]	; (4cb0 <_gclk_init_generators_by_fref+0x134>)
    4c6c:	210b      	movs	r1, #11
    4c6e:	4804      	ldr	r0, [pc, #16]	; (4c80 <_gclk_init_generators_by_fref+0x104>)
    4c70:	4b04      	ldr	r3, [pc, #16]	; (4c84 <_gclk_init_generators_by_fref+0x108>)
    4c72:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4c74:	bf00      	nop
    4c76:	3708      	adds	r7, #8
    4c78:	46bd      	mov	sp, r7
    4c7a:	bd80      	pop	{r7, pc}
    4c7c:	00010107 	.word	0x00010107
    4c80:	40001c00 	.word	0x40001c00
    4c84:	00004b4d 	.word	0x00004b4d
    4c88:	00010907 	.word	0x00010907
    4c8c:	00010906 	.word	0x00010906
    4c90:	00020908 	.word	0x00020908
    4c94:	00010901 	.word	0x00010901
    4c98:	00062901 	.word	0x00062901
    4c9c:	000c2901 	.word	0x000c2901
    4ca0:	00082908 	.word	0x00082908
    4ca4:	00032901 	.word	0x00032901
    4ca8:	00011908 	.word	0x00011908
    4cac:	00010905 	.word	0x00010905
    4cb0:	00041905 	.word	0x00041905

00004cb4 <hri_mclk_write_CPUDIV_reg>:
{
    4cb4:	b480      	push	{r7}
    4cb6:	b083      	sub	sp, #12
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
    4cbc:	460b      	mov	r3, r1
    4cbe:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	78fa      	ldrb	r2, [r7, #3]
    4cc4:	715a      	strb	r2, [r3, #5]
}
    4cc6:	bf00      	nop
    4cc8:	370c      	adds	r7, #12
    4cca:	46bd      	mov	sp, r7
    4ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cd0:	4770      	bx	lr
	...

00004cd4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4cda:	4b05      	ldr	r3, [pc, #20]	; (4cf0 <_mclk_init+0x1c>)
    4cdc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4cde:	2101      	movs	r1, #1
    4ce0:	6878      	ldr	r0, [r7, #4]
    4ce2:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <_mclk_init+0x20>)
    4ce4:	4798      	blx	r3
}
    4ce6:	bf00      	nop
    4ce8:	3708      	adds	r7, #8
    4cea:	46bd      	mov	sp, r7
    4cec:	bd80      	pop	{r7, pc}
    4cee:	bf00      	nop
    4cf0:	40000800 	.word	0x40000800
    4cf4:	00004cb5 	.word	0x00004cb5

00004cf8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4cf8:	b480      	push	{r7}
    4cfa:	b083      	sub	sp, #12
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	78fa      	ldrb	r2, [r7, #3]
    4d08:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4d0a:	bf00      	nop
    4d0c:	370c      	adds	r7, #12
    4d0e:	46bd      	mov	sp, r7
    4d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d14:	4770      	bx	lr

00004d16 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4d16:	b480      	push	{r7}
    4d18:	b083      	sub	sp, #12
    4d1a:	af00      	add	r7, sp, #0
    4d1c:	6078      	str	r0, [r7, #4]
    4d1e:	460b      	mov	r3, r1
    4d20:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	887a      	ldrh	r2, [r7, #2]
    4d26:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4d28:	bf00      	nop
    4d2a:	370c      	adds	r7, #12
    4d2c:	46bd      	mov	sp, r7
    4d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d32:	4770      	bx	lr

00004d34 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4d34:	b480      	push	{r7}
    4d36:	b083      	sub	sp, #12
    4d38:	af00      	add	r7, sp, #0
    4d3a:	6078      	str	r0, [r7, #4]
    4d3c:	460b      	mov	r3, r1
    4d3e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4d40:	687b      	ldr	r3, [r7, #4]
    4d42:	78fa      	ldrb	r2, [r7, #3]
    4d44:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4d46:	bf00      	nop
    4d48:	370c      	adds	r7, #12
    4d4a:	46bd      	mov	sp, r7
    4d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d50:	4770      	bx	lr

00004d52 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4d52:	b480      	push	{r7}
    4d54:	b083      	sub	sp, #12
    4d56:	af00      	add	r7, sp, #0
    4d58:	6078      	str	r0, [r7, #4]
    4d5a:	460b      	mov	r3, r1
    4d5c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	78fa      	ldrb	r2, [r7, #3]
    4d62:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4d64:	bf00      	nop
    4d66:	370c      	adds	r7, #12
    4d68:	46bd      	mov	sp, r7
    4d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6e:	4770      	bx	lr

00004d70 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4d70:	b480      	push	{r7}
    4d72:	b085      	sub	sp, #20
    4d74:	af00      	add	r7, sp, #0
    4d76:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	69db      	ldr	r3, [r3, #28]
    4d7c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4d7e:	68fb      	ldr	r3, [r7, #12]
    4d80:	0a1b      	lsrs	r3, r3, #8
    4d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d86:	60fb      	str	r3, [r7, #12]
	return tmp;
    4d88:	68fb      	ldr	r3, [r7, #12]
}
    4d8a:	4618      	mov	r0, r3
    4d8c:	3714      	adds	r7, #20
    4d8e:	46bd      	mov	sp, r7
    4d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d94:	4770      	bx	lr

00004d96 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4d96:	b480      	push	{r7}
    4d98:	b083      	sub	sp, #12
    4d9a:	af00      	add	r7, sp, #0
    4d9c:	6078      	str	r0, [r7, #4]
    4d9e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	683a      	ldr	r2, [r7, #0]
    4da4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4da6:	bf00      	nop
    4da8:	370c      	adds	r7, #12
    4daa:	46bd      	mov	sp, r7
    4dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db0:	4770      	bx	lr
	...

00004db4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4db4:	b580      	push	{r7, lr}
    4db6:	b082      	sub	sp, #8
    4db8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4dba:	4b13      	ldr	r3, [pc, #76]	; (4e08 <_osc32kctrl_init_sources+0x54>)
    4dbc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4dbe:	2300      	movs	r3, #0
    4dc0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4dc2:	f242 018e 	movw	r1, #8334	; 0x208e
    4dc6:	6878      	ldr	r0, [r7, #4]
    4dc8:	4b10      	ldr	r3, [pc, #64]	; (4e0c <_osc32kctrl_init_sources+0x58>)
    4dca:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4dcc:	2100      	movs	r1, #0
    4dce:	6878      	ldr	r0, [r7, #4]
    4dd0:	4b0f      	ldr	r3, [pc, #60]	; (4e10 <_osc32kctrl_init_sources+0x5c>)
    4dd2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4dd4:	2100      	movs	r1, #0
    4dd6:	6878      	ldr	r0, [r7, #4]
    4dd8:	4b0e      	ldr	r3, [pc, #56]	; (4e14 <_osc32kctrl_init_sources+0x60>)
    4dda:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4ddc:	6878      	ldr	r0, [r7, #4]
    4dde:	4b0e      	ldr	r3, [pc, #56]	; (4e18 <_osc32kctrl_init_sources+0x64>)
    4de0:	4798      	blx	r3
    4de2:	4603      	mov	r3, r0
    4de4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4de6:	887b      	ldrh	r3, [r7, #2]
    4de8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4dea:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4dee:	4619      	mov	r1, r3
    4df0:	6878      	ldr	r0, [r7, #4]
    4df2:	4b0a      	ldr	r3, [pc, #40]	; (4e1c <_osc32kctrl_init_sources+0x68>)
    4df4:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4df6:	2100      	movs	r1, #0
    4df8:	6878      	ldr	r0, [r7, #4]
    4dfa:	4b09      	ldr	r3, [pc, #36]	; (4e20 <_osc32kctrl_init_sources+0x6c>)
    4dfc:	4798      	blx	r3
	(void)calib;
}
    4dfe:	bf00      	nop
    4e00:	3708      	adds	r7, #8
    4e02:	46bd      	mov	sp, r7
    4e04:	bd80      	pop	{r7, pc}
    4e06:	bf00      	nop
    4e08:	40001400 	.word	0x40001400
    4e0c:	00004d17 	.word	0x00004d17
    4e10:	00004d35 	.word	0x00004d35
    4e14:	00004d53 	.word	0x00004d53
    4e18:	00004d71 	.word	0x00004d71
    4e1c:	00004d97 	.word	0x00004d97
    4e20:	00004cf9 	.word	0x00004cf9

00004e24 <hri_gclk_wait_for_sync>:
{
    4e24:	b480      	push	{r7}
    4e26:	b083      	sub	sp, #12
    4e28:	af00      	add	r7, sp, #0
    4e2a:	6078      	str	r0, [r7, #4]
    4e2c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e2e:	bf00      	nop
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	685a      	ldr	r2, [r3, #4]
    4e34:	683b      	ldr	r3, [r7, #0]
    4e36:	4013      	ands	r3, r2
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d1f9      	bne.n	4e30 <hri_gclk_wait_for_sync+0xc>
}
    4e3c:	bf00      	nop
    4e3e:	370c      	adds	r7, #12
    4e40:	46bd      	mov	sp, r7
    4e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e46:	4770      	bx	lr

00004e48 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4e48:	b480      	push	{r7}
    4e4a:	b083      	sub	sp, #12
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	685b      	ldr	r3, [r3, #4]
    4e54:	089b      	lsrs	r3, r3, #2
    4e56:	f003 0301 	and.w	r3, r3, #1
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	bf14      	ite	ne
    4e5e:	2301      	movne	r3, #1
    4e60:	2300      	moveq	r3, #0
    4e62:	b2db      	uxtb	r3, r3
}
    4e64:	4618      	mov	r0, r3
    4e66:	370c      	adds	r7, #12
    4e68:	46bd      	mov	sp, r7
    4e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e6e:	4770      	bx	lr

00004e70 <hri_gclk_read_SYNCBUSY_reg>:
{
    4e70:	b480      	push	{r7}
    4e72:	b083      	sub	sp, #12
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4e78:	687b      	ldr	r3, [r7, #4]
    4e7a:	685b      	ldr	r3, [r3, #4]
}
    4e7c:	4618      	mov	r0, r3
    4e7e:	370c      	adds	r7, #12
    4e80:	46bd      	mov	sp, r7
    4e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e86:	4770      	bx	lr

00004e88 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b086      	sub	sp, #24
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	60f8      	str	r0, [r7, #12]
    4e90:	460b      	mov	r3, r1
    4e92:	607a      	str	r2, [r7, #4]
    4e94:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4e96:	7afa      	ldrb	r2, [r7, #11]
    4e98:	68fb      	ldr	r3, [r7, #12]
    4e9a:	3208      	adds	r2, #8
    4e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4ea0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4ea2:	697b      	ldr	r3, [r7, #20]
    4ea4:	f023 030f 	bic.w	r3, r3, #15
    4ea8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	f003 030f 	and.w	r3, r3, #15
    4eb0:	697a      	ldr	r2, [r7, #20]
    4eb2:	4313      	orrs	r3, r2
    4eb4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4eb6:	7afa      	ldrb	r2, [r7, #11]
    4eb8:	68fb      	ldr	r3, [r7, #12]
    4eba:	3208      	adds	r2, #8
    4ebc:	6979      	ldr	r1, [r7, #20]
    4ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4ec2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4ec6:	68f8      	ldr	r0, [r7, #12]
    4ec8:	4b02      	ldr	r3, [pc, #8]	; (4ed4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4eca:	4798      	blx	r3
}
    4ecc:	bf00      	nop
    4ece:	3718      	adds	r7, #24
    4ed0:	46bd      	mov	sp, r7
    4ed2:	bd80      	pop	{r7, pc}
    4ed4:	00004e25 	.word	0x00004e25

00004ed8 <hri_gclk_write_PCHCTRL_reg>:
{
    4ed8:	b480      	push	{r7}
    4eda:	b085      	sub	sp, #20
    4edc:	af00      	add	r7, sp, #0
    4ede:	60f8      	str	r0, [r7, #12]
    4ee0:	460b      	mov	r3, r1
    4ee2:	607a      	str	r2, [r7, #4]
    4ee4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4ee6:	7afa      	ldrb	r2, [r7, #11]
    4ee8:	68fb      	ldr	r3, [r7, #12]
    4eea:	3220      	adds	r2, #32
    4eec:	6879      	ldr	r1, [r7, #4]
    4eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4ef2:	bf00      	nop
    4ef4:	3714      	adds	r7, #20
    4ef6:	46bd      	mov	sp, r7
    4ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4efc:	4770      	bx	lr

00004efe <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4efe:	b480      	push	{r7}
    4f00:	b085      	sub	sp, #20
    4f02:	af00      	add	r7, sp, #0
    4f04:	60f8      	str	r0, [r7, #12]
    4f06:	460b      	mov	r3, r1
    4f08:	607a      	str	r2, [r7, #4]
    4f0a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4f0c:	bf00      	nop
    4f0e:	7afa      	ldrb	r2, [r7, #11]
    4f10:	68f9      	ldr	r1, [r7, #12]
    4f12:	4613      	mov	r3, r2
    4f14:	009b      	lsls	r3, r3, #2
    4f16:	4413      	add	r3, r2
    4f18:	009b      	lsls	r3, r3, #2
    4f1a:	440b      	add	r3, r1
    4f1c:	333c      	adds	r3, #60	; 0x3c
    4f1e:	681a      	ldr	r2, [r3, #0]
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	4013      	ands	r3, r2
    4f24:	2b00      	cmp	r3, #0
    4f26:	d1f2      	bne.n	4f0e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4f28:	bf00      	nop
    4f2a:	3714      	adds	r7, #20
    4f2c:	46bd      	mov	sp, r7
    4f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f32:	4770      	bx	lr

00004f34 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4f34:	b480      	push	{r7}
    4f36:	b083      	sub	sp, #12
    4f38:	af00      	add	r7, sp, #0
    4f3a:	6078      	str	r0, [r7, #4]
    4f3c:	460b      	mov	r3, r1
    4f3e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4f40:	78fa      	ldrb	r2, [r7, #3]
    4f42:	6879      	ldr	r1, [r7, #4]
    4f44:	4613      	mov	r3, r2
    4f46:	009b      	lsls	r3, r3, #2
    4f48:	4413      	add	r3, r2
    4f4a:	009b      	lsls	r3, r3, #2
    4f4c:	440b      	add	r3, r1
    4f4e:	3340      	adds	r3, #64	; 0x40
    4f50:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4f52:	f003 0301 	and.w	r3, r3, #1
    4f56:	2b00      	cmp	r3, #0
    4f58:	bf14      	ite	ne
    4f5a:	2301      	movne	r3, #1
    4f5c:	2300      	moveq	r3, #0
    4f5e:	b2db      	uxtb	r3, r3
}
    4f60:	4618      	mov	r0, r3
    4f62:	370c      	adds	r7, #12
    4f64:	46bd      	mov	sp, r7
    4f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f6a:	4770      	bx	lr

00004f6c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4f6c:	b480      	push	{r7}
    4f6e:	b083      	sub	sp, #12
    4f70:	af00      	add	r7, sp, #0
    4f72:	6078      	str	r0, [r7, #4]
    4f74:	460b      	mov	r3, r1
    4f76:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4f78:	78fa      	ldrb	r2, [r7, #3]
    4f7a:	6879      	ldr	r1, [r7, #4]
    4f7c:	4613      	mov	r3, r2
    4f7e:	009b      	lsls	r3, r3, #2
    4f80:	4413      	add	r3, r2
    4f82:	009b      	lsls	r3, r3, #2
    4f84:	440b      	add	r3, r1
    4f86:	3340      	adds	r3, #64	; 0x40
    4f88:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4f8a:	085b      	lsrs	r3, r3, #1
    4f8c:	f003 0301 	and.w	r3, r3, #1
    4f90:	2b00      	cmp	r3, #0
    4f92:	bf14      	ite	ne
    4f94:	2301      	movne	r3, #1
    4f96:	2300      	moveq	r3, #0
    4f98:	b2db      	uxtb	r3, r3
}
    4f9a:	4618      	mov	r0, r3
    4f9c:	370c      	adds	r7, #12
    4f9e:	46bd      	mov	sp, r7
    4fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa4:	4770      	bx	lr
	...

00004fa8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4fa8:	b580      	push	{r7, lr}
    4faa:	b082      	sub	sp, #8
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
    4fb0:	460b      	mov	r3, r1
    4fb2:	70fb      	strb	r3, [r7, #3]
    4fb4:	4613      	mov	r3, r2
    4fb6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4fb8:	78fa      	ldrb	r2, [r7, #3]
    4fba:	6879      	ldr	r1, [r7, #4]
    4fbc:	4613      	mov	r3, r2
    4fbe:	009b      	lsls	r3, r3, #2
    4fc0:	4413      	add	r3, r2
    4fc2:	009b      	lsls	r3, r3, #2
    4fc4:	440b      	add	r3, r1
    4fc6:	3330      	adds	r3, #48	; 0x30
    4fc8:	78ba      	ldrb	r2, [r7, #2]
    4fca:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4fcc:	78fb      	ldrb	r3, [r7, #3]
    4fce:	2202      	movs	r2, #2
    4fd0:	4619      	mov	r1, r3
    4fd2:	6878      	ldr	r0, [r7, #4]
    4fd4:	4b02      	ldr	r3, [pc, #8]	; (4fe0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4fd6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4fd8:	bf00      	nop
    4fda:	3708      	adds	r7, #8
    4fdc:	46bd      	mov	sp, r7
    4fde:	bd80      	pop	{r7, pc}
    4fe0:	00004eff 	.word	0x00004eff

00004fe4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b084      	sub	sp, #16
    4fe8:	af00      	add	r7, sp, #0
    4fea:	60f8      	str	r0, [r7, #12]
    4fec:	460b      	mov	r3, r1
    4fee:	607a      	str	r2, [r7, #4]
    4ff0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4ff2:	7afa      	ldrb	r2, [r7, #11]
    4ff4:	68f9      	ldr	r1, [r7, #12]
    4ff6:	4613      	mov	r3, r2
    4ff8:	009b      	lsls	r3, r3, #2
    4ffa:	4413      	add	r3, r2
    4ffc:	009b      	lsls	r3, r3, #2
    4ffe:	440b      	add	r3, r1
    5000:	3334      	adds	r3, #52	; 0x34
    5002:	687a      	ldr	r2, [r7, #4]
    5004:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5006:	7afb      	ldrb	r3, [r7, #11]
    5008:	2206      	movs	r2, #6
    500a:	4619      	mov	r1, r3
    500c:	68f8      	ldr	r0, [r7, #12]
    500e:	4b03      	ldr	r3, [pc, #12]	; (501c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5010:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5012:	bf00      	nop
    5014:	3710      	adds	r7, #16
    5016:	46bd      	mov	sp, r7
    5018:	bd80      	pop	{r7, pc}
    501a:	bf00      	nop
    501c:	00004eff 	.word	0x00004eff

00005020 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5020:	b480      	push	{r7}
    5022:	b085      	sub	sp, #20
    5024:	af00      	add	r7, sp, #0
    5026:	60f8      	str	r0, [r7, #12]
    5028:	460b      	mov	r3, r1
    502a:	607a      	str	r2, [r7, #4]
    502c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    502e:	7afa      	ldrb	r2, [r7, #11]
    5030:	68f9      	ldr	r1, [r7, #12]
    5032:	4613      	mov	r3, r2
    5034:	009b      	lsls	r3, r3, #2
    5036:	4413      	add	r3, r2
    5038:	009b      	lsls	r3, r3, #2
    503a:	440b      	add	r3, r1
    503c:	3338      	adds	r3, #56	; 0x38
    503e:	687a      	ldr	r2, [r7, #4]
    5040:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5042:	bf00      	nop
    5044:	3714      	adds	r7, #20
    5046:	46bd      	mov	sp, r7
    5048:	f85d 7b04 	ldr.w	r7, [sp], #4
    504c:	4770      	bx	lr

0000504e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    504e:	b480      	push	{r7}
    5050:	b083      	sub	sp, #12
    5052:	af00      	add	r7, sp, #0
    5054:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	691b      	ldr	r3, [r3, #16]
    505a:	085b      	lsrs	r3, r3, #1
    505c:	f003 0301 	and.w	r3, r3, #1
    5060:	2b00      	cmp	r3, #0
    5062:	bf14      	ite	ne
    5064:	2301      	movne	r3, #1
    5066:	2300      	moveq	r3, #0
    5068:	b2db      	uxtb	r3, r3
}
    506a:	4618      	mov	r0, r3
    506c:	370c      	adds	r7, #12
    506e:	46bd      	mov	sp, r7
    5070:	f85d 7b04 	ldr.w	r7, [sp], #4
    5074:	4770      	bx	lr

00005076 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5076:	b480      	push	{r7}
    5078:	b083      	sub	sp, #12
    507a:	af00      	add	r7, sp, #0
    507c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    507e:	687b      	ldr	r3, [r7, #4]
    5080:	691b      	ldr	r3, [r3, #16]
    5082:	0a1b      	lsrs	r3, r3, #8
    5084:	f003 0301 	and.w	r3, r3, #1
    5088:	2b00      	cmp	r3, #0
    508a:	bf14      	ite	ne
    508c:	2301      	movne	r3, #1
    508e:	2300      	moveq	r3, #0
    5090:	b2db      	uxtb	r3, r3
}
    5092:	4618      	mov	r0, r3
    5094:	370c      	adds	r7, #12
    5096:	46bd      	mov	sp, r7
    5098:	f85d 7b04 	ldr.w	r7, [sp], #4
    509c:	4770      	bx	lr

0000509e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    509e:	b480      	push	{r7}
    50a0:	b085      	sub	sp, #20
    50a2:	af00      	add	r7, sp, #0
    50a4:	6078      	str	r0, [r7, #4]
    50a6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	691b      	ldr	r3, [r3, #16]
    50ac:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    50ae:	68fa      	ldr	r2, [r7, #12]
    50b0:	683b      	ldr	r3, [r7, #0]
    50b2:	4013      	ands	r3, r2
    50b4:	60fb      	str	r3, [r7, #12]
	return tmp;
    50b6:	68fb      	ldr	r3, [r7, #12]
}
    50b8:	4618      	mov	r0, r3
    50ba:	3714      	adds	r7, #20
    50bc:	46bd      	mov	sp, r7
    50be:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c2:	4770      	bx	lr

000050c4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    50c4:	b480      	push	{r7}
    50c6:	b085      	sub	sp, #20
    50c8:	af00      	add	r7, sp, #0
    50ca:	60f8      	str	r0, [r7, #12]
    50cc:	460b      	mov	r3, r1
    50ce:	607a      	str	r2, [r7, #4]
    50d0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    50d2:	7afb      	ldrb	r3, [r7, #11]
    50d4:	68fa      	ldr	r2, [r7, #12]
    50d6:	3304      	adds	r3, #4
    50d8:	009b      	lsls	r3, r3, #2
    50da:	4413      	add	r3, r2
    50dc:	687a      	ldr	r2, [r7, #4]
    50de:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50e0:	bf00      	nop
    50e2:	3714      	adds	r7, #20
    50e4:	46bd      	mov	sp, r7
    50e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ea:	4770      	bx	lr

000050ec <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    50ec:	b480      	push	{r7}
    50ee:	b083      	sub	sp, #12
    50f0:	af00      	add	r7, sp, #0
    50f2:	6078      	str	r0, [r7, #4]
    50f4:	460b      	mov	r3, r1
    50f6:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	78fa      	ldrb	r2, [r7, #3]
    50fc:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50fe:	bf00      	nop
    5100:	370c      	adds	r7, #12
    5102:	46bd      	mov	sp, r7
    5104:	f85d 7b04 	ldr.w	r7, [sp], #4
    5108:	4770      	bx	lr

0000510a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    510a:	b480      	push	{r7}
    510c:	b085      	sub	sp, #20
    510e:	af00      	add	r7, sp, #0
    5110:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5112:	687b      	ldr	r3, [r7, #4]
    5114:	f893 3020 	ldrb.w	r3, [r3, #32]
    5118:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    511a:	7bfb      	ldrb	r3, [r7, #15]
    511c:	f003 0301 	and.w	r3, r3, #1
    5120:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5122:	7bfb      	ldrb	r3, [r7, #15]
    5124:	2b00      	cmp	r3, #0
    5126:	bf14      	ite	ne
    5128:	2301      	movne	r3, #1
    512a:	2300      	moveq	r3, #0
    512c:	b2db      	uxtb	r3, r3
}
    512e:	4618      	mov	r0, r3
    5130:	3714      	adds	r7, #20
    5132:	46bd      	mov	sp, r7
    5134:	f85d 7b04 	ldr.w	r7, [sp], #4
    5138:	4770      	bx	lr

0000513a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    513a:	b480      	push	{r7}
    513c:	b083      	sub	sp, #12
    513e:	af00      	add	r7, sp, #0
    5140:	6078      	str	r0, [r7, #4]
    5142:	460b      	mov	r3, r1
    5144:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5146:	687b      	ldr	r3, [r7, #4]
    5148:	78fa      	ldrb	r2, [r7, #3]
    514a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    514e:	bf00      	nop
    5150:	370c      	adds	r7, #12
    5152:	46bd      	mov	sp, r7
    5154:	f85d 7b04 	ldr.w	r7, [sp], #4
    5158:	4770      	bx	lr

0000515a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    515a:	b480      	push	{r7}
    515c:	b083      	sub	sp, #12
    515e:	af00      	add	r7, sp, #0
    5160:	6078      	str	r0, [r7, #4]
    5162:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5164:	687b      	ldr	r3, [r7, #4]
    5166:	683a      	ldr	r2, [r7, #0]
    5168:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    516a:	bf00      	nop
    516c:	370c      	adds	r7, #12
    516e:	46bd      	mov	sp, r7
    5170:	f85d 7b04 	ldr.w	r7, [sp], #4
    5174:	4770      	bx	lr

00005176 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5176:	b480      	push	{r7}
    5178:	b083      	sub	sp, #12
    517a:	af00      	add	r7, sp, #0
    517c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5182:	4618      	mov	r0, r3
    5184:	370c      	adds	r7, #12
    5186:	46bd      	mov	sp, r7
    5188:	f85d 7b04 	ldr.w	r7, [sp], #4
    518c:	4770      	bx	lr

0000518e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    518e:	b480      	push	{r7}
    5190:	b083      	sub	sp, #12
    5192:	af00      	add	r7, sp, #0
    5194:	6078      	str	r0, [r7, #4]
    5196:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	683a      	ldr	r2, [r7, #0]
    519c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    519e:	bf00      	nop
    51a0:	370c      	adds	r7, #12
    51a2:	46bd      	mov	sp, r7
    51a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a8:	4770      	bx	lr

000051aa <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    51aa:	b480      	push	{r7}
    51ac:	b085      	sub	sp, #20
    51ae:	af00      	add	r7, sp, #0
    51b0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    51b8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    51ba:	7bfb      	ldrb	r3, [r7, #15]
    51bc:	085b      	lsrs	r3, r3, #1
    51be:	b2db      	uxtb	r3, r3
    51c0:	f003 0301 	and.w	r3, r3, #1
    51c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    51c6:	7bfb      	ldrb	r3, [r7, #15]
    51c8:	2b00      	cmp	r3, #0
    51ca:	bf14      	ite	ne
    51cc:	2301      	movne	r3, #1
    51ce:	2300      	moveq	r3, #0
    51d0:	b2db      	uxtb	r3, r3
}
    51d2:	4618      	mov	r0, r3
    51d4:	3714      	adds	r7, #20
    51d6:	46bd      	mov	sp, r7
    51d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51dc:	4770      	bx	lr

000051de <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    51de:	b480      	push	{r7}
    51e0:	b085      	sub	sp, #20
    51e2:	af00      	add	r7, sp, #0
    51e4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    51e6:	687b      	ldr	r3, [r7, #4]
    51e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    51ec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    51ee:	7bfb      	ldrb	r3, [r7, #15]
    51f0:	089b      	lsrs	r3, r3, #2
    51f2:	b2db      	uxtb	r3, r3
    51f4:	f003 0301 	and.w	r3, r3, #1
    51f8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    51fa:	7bfb      	ldrb	r3, [r7, #15]
    51fc:	2b00      	cmp	r3, #0
    51fe:	bf14      	ite	ne
    5200:	2301      	movne	r3, #1
    5202:	2300      	moveq	r3, #0
    5204:	b2db      	uxtb	r3, r3
}
    5206:	4618      	mov	r0, r3
    5208:	3714      	adds	r7, #20
    520a:	46bd      	mov	sp, r7
    520c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5210:	4770      	bx	lr

00005212 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5212:	b480      	push	{r7}
    5214:	b085      	sub	sp, #20
    5216:	af00      	add	r7, sp, #0
    5218:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5220:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5222:	7bfb      	ldrb	r3, [r7, #15]
    5224:	08db      	lsrs	r3, r3, #3
    5226:	b2db      	uxtb	r3, r3
    5228:	f003 0301 	and.w	r3, r3, #1
    522c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    522e:	7bfb      	ldrb	r3, [r7, #15]
    5230:	2b00      	cmp	r3, #0
    5232:	bf14      	ite	ne
    5234:	2301      	movne	r3, #1
    5236:	2300      	moveq	r3, #0
    5238:	b2db      	uxtb	r3, r3
}
    523a:	4618      	mov	r0, r3
    523c:	3714      	adds	r7, #20
    523e:	46bd      	mov	sp, r7
    5240:	f85d 7b04 	ldr.w	r7, [sp], #4
    5244:	4770      	bx	lr

00005246 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5246:	b480      	push	{r7}
    5248:	b085      	sub	sp, #20
    524a:	af00      	add	r7, sp, #0
    524c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5254:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5256:	7bfb      	ldrb	r3, [r7, #15]
    5258:	091b      	lsrs	r3, r3, #4
    525a:	b2db      	uxtb	r3, r3
    525c:	f003 0301 	and.w	r3, r3, #1
    5260:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5262:	7bfb      	ldrb	r3, [r7, #15]
    5264:	2b00      	cmp	r3, #0
    5266:	bf14      	ite	ne
    5268:	2301      	movne	r3, #1
    526a:	2300      	moveq	r3, #0
    526c:	b2db      	uxtb	r3, r3
}
    526e:	4618      	mov	r0, r3
    5270:	3714      	adds	r7, #20
    5272:	46bd      	mov	sp, r7
    5274:	f85d 7b04 	ldr.w	r7, [sp], #4
    5278:	4770      	bx	lr
	...

0000527c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    527c:	b580      	push	{r7, lr}
    527e:	b082      	sub	sp, #8
    5280:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5282:	4b0a      	ldr	r3, [pc, #40]	; (52ac <_oscctrl_init_sources+0x30>)
    5284:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5286:	4a0a      	ldr	r2, [pc, #40]	; (52b0 <_oscctrl_init_sources+0x34>)
    5288:	2101      	movs	r1, #1
    528a:	6878      	ldr	r0, [r7, #4]
    528c:	4b09      	ldr	r3, [pc, #36]	; (52b4 <_oscctrl_init_sources+0x38>)
    528e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5290:	bf00      	nop
    5292:	6878      	ldr	r0, [r7, #4]
    5294:	4b08      	ldr	r3, [pc, #32]	; (52b8 <_oscctrl_init_sources+0x3c>)
    5296:	4798      	blx	r3
    5298:	4603      	mov	r3, r0
    529a:	f083 0301 	eor.w	r3, r3, #1
    529e:	b2db      	uxtb	r3, r3
    52a0:	2b00      	cmp	r3, #0
    52a2:	d1f6      	bne.n	5292 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    52a4:	bf00      	nop
    52a6:	3708      	adds	r7, #8
    52a8:	46bd      	mov	sp, r7
    52aa:	bd80      	pop	{r7, pc}
    52ac:	40001000 	.word	0x40001000
    52b0:	03002646 	.word	0x03002646
    52b4:	000050c5 	.word	0x000050c5
    52b8:	0000504f 	.word	0x0000504f

000052bc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    52bc:	b580      	push	{r7, lr}
    52be:	b084      	sub	sp, #16
    52c0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    52c2:	4b6b      	ldr	r3, [pc, #428]	; (5470 <_oscctrl_init_referenced_generators+0x1b4>)
    52c4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    52c6:	2204      	movs	r2, #4
    52c8:	2100      	movs	r1, #0
    52ca:	486a      	ldr	r0, [pc, #424]	; (5474 <_oscctrl_init_referenced_generators+0x1b8>)
    52cc:	4b6a      	ldr	r3, [pc, #424]	; (5478 <_oscctrl_init_referenced_generators+0x1bc>)
    52ce:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    52d0:	bf00      	nop
    52d2:	4868      	ldr	r0, [pc, #416]	; (5474 <_oscctrl_init_referenced_generators+0x1b8>)
    52d4:	4b69      	ldr	r3, [pc, #420]	; (547c <_oscctrl_init_referenced_generators+0x1c0>)
    52d6:	4798      	blx	r3
    52d8:	4603      	mov	r3, r0
    52da:	2b00      	cmp	r3, #0
    52dc:	d1f9      	bne.n	52d2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    52de:	2100      	movs	r1, #0
    52e0:	68f8      	ldr	r0, [r7, #12]
    52e2:	4b67      	ldr	r3, [pc, #412]	; (5480 <_oscctrl_init_referenced_generators+0x1c4>)
    52e4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    52e6:	4967      	ldr	r1, [pc, #412]	; (5484 <_oscctrl_init_referenced_generators+0x1c8>)
    52e8:	68f8      	ldr	r0, [r7, #12]
    52ea:	4b67      	ldr	r3, [pc, #412]	; (5488 <_oscctrl_init_referenced_generators+0x1cc>)
    52ec:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    52ee:	bf00      	nop
    52f0:	68f8      	ldr	r0, [r7, #12]
    52f2:	4b66      	ldr	r3, [pc, #408]	; (548c <_oscctrl_init_referenced_generators+0x1d0>)
    52f4:	4798      	blx	r3
    52f6:	4603      	mov	r3, r0
    52f8:	2b00      	cmp	r3, #0
    52fa:	d1f9      	bne.n	52f0 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    52fc:	2100      	movs	r1, #0
    52fe:	68f8      	ldr	r0, [r7, #12]
    5300:	4b63      	ldr	r3, [pc, #396]	; (5490 <_oscctrl_init_referenced_generators+0x1d4>)
    5302:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5304:	bf00      	nop
    5306:	68f8      	ldr	r0, [r7, #12]
    5308:	4b62      	ldr	r3, [pc, #392]	; (5494 <_oscctrl_init_referenced_generators+0x1d8>)
    530a:	4798      	blx	r3
    530c:	4603      	mov	r3, r0
    530e:	2b00      	cmp	r3, #0
    5310:	d1f9      	bne.n	5306 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5312:	2302      	movs	r3, #2
    5314:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5316:	7afb      	ldrb	r3, [r7, #11]
    5318:	4619      	mov	r1, r3
    531a:	68f8      	ldr	r0, [r7, #12]
    531c:	4b58      	ldr	r3, [pc, #352]	; (5480 <_oscctrl_init_referenced_generators+0x1c4>)
    531e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5320:	bf00      	nop
    5322:	68f8      	ldr	r0, [r7, #12]
    5324:	4b5c      	ldr	r3, [pc, #368]	; (5498 <_oscctrl_init_referenced_generators+0x1dc>)
    5326:	4798      	blx	r3
    5328:	4603      	mov	r3, r0
    532a:	2b00      	cmp	r3, #0
    532c:	d1f9      	bne.n	5322 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    532e:	68f8      	ldr	r0, [r7, #12]
    5330:	4b5a      	ldr	r3, [pc, #360]	; (549c <_oscctrl_init_referenced_generators+0x1e0>)
    5332:	4798      	blx	r3
    5334:	4603      	mov	r3, r0
    5336:	4619      	mov	r1, r3
    5338:	68f8      	ldr	r0, [r7, #12]
    533a:	4b59      	ldr	r3, [pc, #356]	; (54a0 <_oscctrl_init_referenced_generators+0x1e4>)
    533c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    533e:	bf00      	nop
    5340:	68f8      	ldr	r0, [r7, #12]
    5342:	4b58      	ldr	r3, [pc, #352]	; (54a4 <_oscctrl_init_referenced_generators+0x1e8>)
    5344:	4798      	blx	r3
    5346:	4603      	mov	r3, r0
    5348:	2b00      	cmp	r3, #0
    534a:	d1f9      	bne.n	5340 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    534c:	2319      	movs	r3, #25
    534e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5350:	7afb      	ldrb	r3, [r7, #11]
    5352:	4619      	mov	r1, r3
    5354:	68f8      	ldr	r0, [r7, #12]
    5356:	4b4e      	ldr	r3, [pc, #312]	; (5490 <_oscctrl_init_referenced_generators+0x1d4>)
    5358:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    535a:	bf00      	nop
    535c:	68f8      	ldr	r0, [r7, #12]
    535e:	4b4d      	ldr	r3, [pc, #308]	; (5494 <_oscctrl_init_referenced_generators+0x1d8>)
    5360:	4798      	blx	r3
    5362:	4603      	mov	r3, r0
    5364:	2b00      	cmp	r3, #0
    5366:	d1f9      	bne.n	535c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5368:	2245      	movs	r2, #69	; 0x45
    536a:	2101      	movs	r1, #1
    536c:	4841      	ldr	r0, [pc, #260]	; (5474 <_oscctrl_init_referenced_generators+0x1b8>)
    536e:	4b4e      	ldr	r3, [pc, #312]	; (54a8 <_oscctrl_init_referenced_generators+0x1ec>)
    5370:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5372:	223b      	movs	r2, #59	; 0x3b
    5374:	2100      	movs	r1, #0
    5376:	68f8      	ldr	r0, [r7, #12]
    5378:	4b4c      	ldr	r3, [pc, #304]	; (54ac <_oscctrl_init_referenced_generators+0x1f0>)
    537a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    537c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5380:	2100      	movs	r1, #0
    5382:	68f8      	ldr	r0, [r7, #12]
    5384:	4b4a      	ldr	r3, [pc, #296]	; (54b0 <_oscctrl_init_referenced_generators+0x1f4>)
    5386:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5388:	2242      	movs	r2, #66	; 0x42
    538a:	2100      	movs	r1, #0
    538c:	68f8      	ldr	r0, [r7, #12]
    538e:	4b49      	ldr	r3, [pc, #292]	; (54b4 <_oscctrl_init_referenced_generators+0x1f8>)
    5390:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5392:	4a49      	ldr	r2, [pc, #292]	; (54b8 <_oscctrl_init_referenced_generators+0x1fc>)
    5394:	2101      	movs	r1, #1
    5396:	68f8      	ldr	r0, [r7, #12]
    5398:	4b44      	ldr	r3, [pc, #272]	; (54ac <_oscctrl_init_referenced_generators+0x1f0>)
    539a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    539c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    53a0:	2101      	movs	r1, #1
    53a2:	68f8      	ldr	r0, [r7, #12]
    53a4:	4b42      	ldr	r3, [pc, #264]	; (54b0 <_oscctrl_init_referenced_generators+0x1f4>)
    53a6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    53a8:	2202      	movs	r2, #2
    53aa:	2101      	movs	r1, #1
    53ac:	68f8      	ldr	r0, [r7, #12]
    53ae:	4b41      	ldr	r3, [pc, #260]	; (54b4 <_oscctrl_init_referenced_generators+0x1f8>)
    53b0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    53b2:	68f8      	ldr	r0, [r7, #12]
    53b4:	4b41      	ldr	r3, [pc, #260]	; (54bc <_oscctrl_init_referenced_generators+0x200>)
    53b6:	4798      	blx	r3
    53b8:	4603      	mov	r3, r0
    53ba:	2b00      	cmp	r3, #0
    53bc:	d00c      	beq.n	53d8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    53be:	f44f 6310 	mov.w	r3, #2304	; 0x900
    53c2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    53c4:	bf00      	nop
    53c6:	6879      	ldr	r1, [r7, #4]
    53c8:	68f8      	ldr	r0, [r7, #12]
    53ca:	4b3d      	ldr	r3, [pc, #244]	; (54c0 <_oscctrl_init_referenced_generators+0x204>)
    53cc:	4798      	blx	r3
    53ce:	4602      	mov	r2, r0
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	429a      	cmp	r2, r3
    53d4:	d1f7      	bne.n	53c6 <_oscctrl_init_referenced_generators+0x10a>
    53d6:	e009      	b.n	53ec <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    53d8:	bf00      	nop
    53da:	68f8      	ldr	r0, [r7, #12]
    53dc:	4b39      	ldr	r3, [pc, #228]	; (54c4 <_oscctrl_init_referenced_generators+0x208>)
    53de:	4798      	blx	r3
    53e0:	4603      	mov	r3, r0
    53e2:	f083 0301 	eor.w	r3, r3, #1
    53e6:	b2db      	uxtb	r3, r3
    53e8:	2b00      	cmp	r3, #0
    53ea:	d1f6      	bne.n	53da <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    53ec:	bf00      	nop
    53ee:	2100      	movs	r1, #0
    53f0:	68f8      	ldr	r0, [r7, #12]
    53f2:	4b35      	ldr	r3, [pc, #212]	; (54c8 <_oscctrl_init_referenced_generators+0x20c>)
    53f4:	4798      	blx	r3
    53f6:	4603      	mov	r3, r0
    53f8:	f083 0301 	eor.w	r3, r3, #1
    53fc:	b2db      	uxtb	r3, r3
    53fe:	2b00      	cmp	r3, #0
    5400:	d009      	beq.n	5416 <_oscctrl_init_referenced_generators+0x15a>
    5402:	2100      	movs	r1, #0
    5404:	68f8      	ldr	r0, [r7, #12]
    5406:	4b31      	ldr	r3, [pc, #196]	; (54cc <_oscctrl_init_referenced_generators+0x210>)
    5408:	4798      	blx	r3
    540a:	4603      	mov	r3, r0
    540c:	f083 0301 	eor.w	r3, r3, #1
    5410:	b2db      	uxtb	r3, r3
    5412:	2b00      	cmp	r3, #0
    5414:	d1eb      	bne.n	53ee <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5416:	bf00      	nop
    5418:	2101      	movs	r1, #1
    541a:	68f8      	ldr	r0, [r7, #12]
    541c:	4b2a      	ldr	r3, [pc, #168]	; (54c8 <_oscctrl_init_referenced_generators+0x20c>)
    541e:	4798      	blx	r3
    5420:	4603      	mov	r3, r0
    5422:	f083 0301 	eor.w	r3, r3, #1
    5426:	b2db      	uxtb	r3, r3
    5428:	2b00      	cmp	r3, #0
    542a:	d009      	beq.n	5440 <_oscctrl_init_referenced_generators+0x184>
    542c:	2101      	movs	r1, #1
    542e:	68f8      	ldr	r0, [r7, #12]
    5430:	4b26      	ldr	r3, [pc, #152]	; (54cc <_oscctrl_init_referenced_generators+0x210>)
    5432:	4798      	blx	r3
    5434:	4603      	mov	r3, r0
    5436:	f083 0301 	eor.w	r3, r3, #1
    543a:	b2db      	uxtb	r3, r3
    543c:	2b00      	cmp	r3, #0
    543e:	d1eb      	bne.n	5418 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5440:	bf00      	nop
    5442:	480c      	ldr	r0, [pc, #48]	; (5474 <_oscctrl_init_referenced_generators+0x1b8>)
    5444:	4b22      	ldr	r3, [pc, #136]	; (54d0 <_oscctrl_init_referenced_generators+0x214>)
    5446:	4798      	blx	r3
    5448:	4603      	mov	r3, r0
    544a:	2b00      	cmp	r3, #0
    544c:	d1f9      	bne.n	5442 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    544e:	2207      	movs	r2, #7
    5450:	2100      	movs	r1, #0
    5452:	4808      	ldr	r0, [pc, #32]	; (5474 <_oscctrl_init_referenced_generators+0x1b8>)
    5454:	4b08      	ldr	r3, [pc, #32]	; (5478 <_oscctrl_init_referenced_generators+0x1bc>)
    5456:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5458:	bf00      	nop
    545a:	4806      	ldr	r0, [pc, #24]	; (5474 <_oscctrl_init_referenced_generators+0x1b8>)
    545c:	4b07      	ldr	r3, [pc, #28]	; (547c <_oscctrl_init_referenced_generators+0x1c0>)
    545e:	4798      	blx	r3
    5460:	4603      	mov	r3, r0
    5462:	2b00      	cmp	r3, #0
    5464:	d1f9      	bne.n	545a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5466:	bf00      	nop
    5468:	3710      	adds	r7, #16
    546a:	46bd      	mov	sp, r7
    546c:	bd80      	pop	{r7, pc}
    546e:	bf00      	nop
    5470:	40001000 	.word	0x40001000
    5474:	40001c00 	.word	0x40001c00
    5478:	00004e89 	.word	0x00004e89
    547c:	00004e49 	.word	0x00004e49
    5480:	000050ed 	.word	0x000050ed
    5484:	0401bb80 	.word	0x0401bb80
    5488:	0000518f 	.word	0x0000518f
    548c:	00005247 	.word	0x00005247
    5490:	0000513b 	.word	0x0000513b
    5494:	000051df 	.word	0x000051df
    5498:	000051ab 	.word	0x000051ab
    549c:	00005177 	.word	0x00005177
    54a0:	0000515b 	.word	0x0000515b
    54a4:	00005213 	.word	0x00005213
    54a8:	00004ed9 	.word	0x00004ed9
    54ac:	00004fe5 	.word	0x00004fe5
    54b0:	00005021 	.word	0x00005021
    54b4:	00004fa9 	.word	0x00004fa9
    54b8:	000407a0 	.word	0x000407a0
    54bc:	0000510b 	.word	0x0000510b
    54c0:	0000509f 	.word	0x0000509f
    54c4:	00005077 	.word	0x00005077
    54c8:	00004f35 	.word	0x00004f35
    54cc:	00004f6d 	.word	0x00004f6d
    54d0:	00004e71 	.word	0x00004e71

000054d4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    54d4:	b480      	push	{r7}
    54d6:	b083      	sub	sp, #12
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	69db      	ldr	r3, [r3, #28]
    54e0:	0a9b      	lsrs	r3, r3, #10
    54e2:	f003 0301 	and.w	r3, r3, #1
    54e6:	2b00      	cmp	r3, #0
    54e8:	bf14      	ite	ne
    54ea:	2301      	movne	r3, #1
    54ec:	2300      	moveq	r3, #0
    54ee:	b2db      	uxtb	r3, r3
}
    54f0:	4618      	mov	r0, r3
    54f2:	370c      	adds	r7, #12
    54f4:	46bd      	mov	sp, r7
    54f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54fa:	4770      	bx	lr

000054fc <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    54fc:	b480      	push	{r7}
    54fe:	b083      	sub	sp, #12
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	f44f 6280 	mov.w	r2, #1024	; 0x400
    550a:	61da      	str	r2, [r3, #28]
}
    550c:	bf00      	nop
    550e:	370c      	adds	r7, #12
    5510:	46bd      	mov	sp, r7
    5512:	f85d 7b04 	ldr.w	r7, [sp], #4
    5516:	4770      	bx	lr

00005518 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5518:	b480      	push	{r7}
    551a:	b083      	sub	sp, #12
    551c:	af00      	add	r7, sp, #0
    551e:	6078      	str	r0, [r7, #4]
    5520:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	683a      	ldr	r2, [r7, #0]
    5526:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5528:	bf00      	nop
    552a:	370c      	adds	r7, #12
    552c:	46bd      	mov	sp, r7
    552e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5532:	4770      	bx	lr

00005534 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5534:	b480      	push	{r7}
    5536:	b083      	sub	sp, #12
    5538:	af00      	add	r7, sp, #0
    553a:	6078      	str	r0, [r7, #4]
    553c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	683a      	ldr	r2, [r7, #0]
    5542:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5544:	bf00      	nop
    5546:	370c      	adds	r7, #12
    5548:	46bd      	mov	sp, r7
    554a:	f85d 7b04 	ldr.w	r7, [sp], #4
    554e:	4770      	bx	lr

00005550 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5550:	b480      	push	{r7}
    5552:	b083      	sub	sp, #12
    5554:	af00      	add	r7, sp, #0
    5556:	6078      	str	r0, [r7, #4]
    5558:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    555a:	687b      	ldr	r3, [r7, #4]
    555c:	683a      	ldr	r2, [r7, #0]
    555e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5560:	bf00      	nop
    5562:	370c      	adds	r7, #12
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    556c:	b480      	push	{r7}
    556e:	b083      	sub	sp, #12
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
    5574:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	683a      	ldr	r2, [r7, #0]
    557a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    557c:	bf00      	nop
    557e:	370c      	adds	r7, #12
    5580:	46bd      	mov	sp, r7
    5582:	f85d 7b04 	ldr.w	r7, [sp], #4
    5586:	4770      	bx	lr

00005588 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5588:	b480      	push	{r7}
    558a:	b085      	sub	sp, #20
    558c:	af00      	add	r7, sp, #0
    558e:	6078      	str	r0, [r7, #4]
    5590:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5592:	687b      	ldr	r3, [r7, #4]
    5594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5596:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5598:	68fb      	ldr	r3, [r7, #12]
    559a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    559e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    55a0:	683b      	ldr	r3, [r7, #0]
    55a2:	b2db      	uxtb	r3, r3
    55a4:	68fa      	ldr	r2, [r7, #12]
    55a6:	4313      	orrs	r3, r2
    55a8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    55aa:	687b      	ldr	r3, [r7, #4]
    55ac:	68fa      	ldr	r2, [r7, #12]
    55ae:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55b0:	bf00      	nop
    55b2:	3714      	adds	r7, #20
    55b4:	46bd      	mov	sp, r7
    55b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ba:	4770      	bx	lr

000055bc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    55bc:	b480      	push	{r7}
    55be:	b085      	sub	sp, #20
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
    55c4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    55ca:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    55cc:	68fb      	ldr	r3, [r7, #12]
    55ce:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    55d2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    55d4:	683b      	ldr	r3, [r7, #0]
    55d6:	041b      	lsls	r3, r3, #16
    55d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    55dc:	68fa      	ldr	r2, [r7, #12]
    55de:	4313      	orrs	r3, r2
    55e0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    55e2:	687b      	ldr	r3, [r7, #4]
    55e4:	68fa      	ldr	r2, [r7, #12]
    55e6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55e8:	bf00      	nop
    55ea:	3714      	adds	r7, #20
    55ec:	46bd      	mov	sp, r7
    55ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f2:	4770      	bx	lr

000055f4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    55f4:	b480      	push	{r7}
    55f6:	b083      	sub	sp, #12
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
    55fc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    55fe:	687b      	ldr	r3, [r7, #4]
    5600:	683a      	ldr	r2, [r7, #0]
    5602:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5604:	bf00      	nop
    5606:	370c      	adds	r7, #12
    5608:	46bd      	mov	sp, r7
    560a:	f85d 7b04 	ldr.w	r7, [sp], #4
    560e:	4770      	bx	lr

00005610 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5610:	b480      	push	{r7}
    5612:	b083      	sub	sp, #12
    5614:	af00      	add	r7, sp, #0
    5616:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    561c:	4618      	mov	r0, r3
    561e:	370c      	adds	r7, #12
    5620:	46bd      	mov	sp, r7
    5622:	f85d 7b04 	ldr.w	r7, [sp], #4
    5626:	4770      	bx	lr

00005628 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5628:	b480      	push	{r7}
    562a:	b085      	sub	sp, #20
    562c:	af00      	add	r7, sp, #0
    562e:	60f8      	str	r0, [r7, #12]
    5630:	60b9      	str	r1, [r7, #8]
    5632:	607a      	str	r2, [r7, #4]
	while (count--) {
    5634:	e007      	b.n	5646 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5636:	68fb      	ldr	r3, [r7, #12]
    5638:	1c5a      	adds	r2, r3, #1
    563a:	60fa      	str	r2, [r7, #12]
    563c:	68ba      	ldr	r2, [r7, #8]
    563e:	1c51      	adds	r1, r2, #1
    5640:	60b9      	str	r1, [r7, #8]
    5642:	7812      	ldrb	r2, [r2, #0]
    5644:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	1e5a      	subs	r2, r3, #1
    564a:	607a      	str	r2, [r7, #4]
    564c:	2b00      	cmp	r3, #0
    564e:	d1f2      	bne.n	5636 <_qspi_memcpy+0xe>
	}
}
    5650:	bf00      	nop
    5652:	3714      	adds	r7, #20
    5654:	46bd      	mov	sp, r7
    5656:	f85d 7b04 	ldr.w	r7, [sp], #4
    565a:	4770      	bx	lr

0000565c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    565c:	b580      	push	{r7, lr}
    565e:	b082      	sub	sp, #8
    5660:	af00      	add	r7, sp, #0
    5662:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5664:	4903      	ldr	r1, [pc, #12]	; (5674 <_qspi_end_transfer+0x18>)
    5666:	6878      	ldr	r0, [r7, #4]
    5668:	4b03      	ldr	r3, [pc, #12]	; (5678 <_qspi_end_transfer+0x1c>)
    566a:	4798      	blx	r3
}
    566c:	bf00      	nop
    566e:	3708      	adds	r7, #8
    5670:	46bd      	mov	sp, r7
    5672:	bd80      	pop	{r7, pc}
    5674:	01000002 	.word	0x01000002
    5678:	00005519 	.word	0x00005519

0000567c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    567c:	b580      	push	{r7, lr}
    567e:	b082      	sub	sp, #8
    5680:	af00      	add	r7, sp, #0
    5682:	6078      	str	r0, [r7, #4]
    5684:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	2b00      	cmp	r3, #0
    568a:	d004      	beq.n	5696 <_qspi_sync_init+0x1a>
    568c:	683b      	ldr	r3, [r7, #0]
    568e:	2b00      	cmp	r3, #0
    5690:	d001      	beq.n	5696 <_qspi_sync_init+0x1a>
    5692:	2301      	movs	r3, #1
    5694:	e000      	b.n	5698 <_qspi_sync_init+0x1c>
    5696:	2300      	movs	r3, #0
    5698:	f003 0301 	and.w	r3, r3, #1
    569c:	b2db      	uxtb	r3, r3
    569e:	2240      	movs	r2, #64	; 0x40
    56a0:	490c      	ldr	r1, [pc, #48]	; (56d4 <_qspi_sync_init+0x58>)
    56a2:	4618      	mov	r0, r3
    56a4:	4b0c      	ldr	r3, [pc, #48]	; (56d8 <_qspi_sync_init+0x5c>)
    56a6:	4798      	blx	r3
	dev->prvt = hw;
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	683a      	ldr	r2, [r7, #0]
    56ac:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    56ae:	687b      	ldr	r3, [r7, #4]
    56b0:	681b      	ldr	r3, [r3, #0]
    56b2:	2101      	movs	r1, #1
    56b4:	4618      	mov	r0, r3
    56b6:	4b09      	ldr	r3, [pc, #36]	; (56dc <_qspi_sync_init+0x60>)
    56b8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    56ba:	4909      	ldr	r1, [pc, #36]	; (56e0 <_qspi_sync_init+0x64>)
    56bc:	6838      	ldr	r0, [r7, #0]
    56be:	4b09      	ldr	r3, [pc, #36]	; (56e4 <_qspi_sync_init+0x68>)
    56c0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    56c2:	4909      	ldr	r1, [pc, #36]	; (56e8 <_qspi_sync_init+0x6c>)
    56c4:	6838      	ldr	r0, [r7, #0]
    56c6:	4b09      	ldr	r3, [pc, #36]	; (56ec <_qspi_sync_init+0x70>)
    56c8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    56ca:	2300      	movs	r3, #0
}
    56cc:	4618      	mov	r0, r3
    56ce:	3708      	adds	r7, #8
    56d0:	46bd      	mov	sp, r7
    56d2:	bd80      	pop	{r7, pc}
    56d4:	000122d0 	.word	0x000122d0
    56d8:	00003681 	.word	0x00003681
    56dc:	00005519 	.word	0x00005519
    56e0:	06000011 	.word	0x06000011
    56e4:	00005535 	.word	0x00005535
    56e8:	00241300 	.word	0x00241300
    56ec:	00005551 	.word	0x00005551

000056f0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    56f0:	b580      	push	{r7, lr}
    56f2:	b082      	sub	sp, #8
    56f4:	af00      	add	r7, sp, #0
    56f6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	2102      	movs	r1, #2
    56fe:	4618      	mov	r0, r3
    5700:	4b03      	ldr	r3, [pc, #12]	; (5710 <_qspi_sync_enable+0x20>)
    5702:	4798      	blx	r3
	return ERR_NONE;
    5704:	2300      	movs	r3, #0
}
    5706:	4618      	mov	r0, r3
    5708:	3708      	adds	r7, #8
    570a:	46bd      	mov	sp, r7
    570c:	bd80      	pop	{r7, pc}
    570e:	bf00      	nop
    5710:	00005519 	.word	0x00005519

00005714 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5714:	b580      	push	{r7, lr}
    5716:	b082      	sub	sp, #8
    5718:	af00      	add	r7, sp, #0
    571a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    571c:	687b      	ldr	r3, [r7, #4]
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	2100      	movs	r1, #0
    5722:	4618      	mov	r0, r3
    5724:	4b03      	ldr	r3, [pc, #12]	; (5734 <_qspi_sync_disable+0x20>)
    5726:	4798      	blx	r3
	return ERR_NONE;
    5728:	2300      	movs	r3, #0
}
    572a:	4618      	mov	r0, r3
    572c:	3708      	adds	r7, #8
    572e:	46bd      	mov	sp, r7
    5730:	bd80      	pop	{r7, pc}
    5732:	bf00      	nop
    5734:	00005519 	.word	0x00005519

00005738 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5738:	b580      	push	{r7, lr}
    573a:	b084      	sub	sp, #16
    573c:	af00      	add	r7, sp, #0
    573e:	6078      	str	r0, [r7, #4]
    5740:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5742:	687b      	ldr	r3, [r7, #4]
    5744:	681b      	ldr	r3, [r3, #0]
    5746:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5748:	683b      	ldr	r3, [r7, #0]
    574a:	781b      	ldrb	r3, [r3, #0]
    574c:	f003 0320 	and.w	r3, r3, #32
    5750:	b2db      	uxtb	r3, r3
    5752:	2b00      	cmp	r3, #0
    5754:	d005      	beq.n	5762 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5756:	683b      	ldr	r3, [r7, #0]
    5758:	689b      	ldr	r3, [r3, #8]
    575a:	4619      	mov	r1, r3
    575c:	68f8      	ldr	r0, [r7, #12]
    575e:	4b13      	ldr	r3, [pc, #76]	; (57ac <_qspi_sync_command_set_ifr+0x74>)
    5760:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5762:	683b      	ldr	r3, [r7, #0]
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	f003 0310 	and.w	r3, r3, #16
    576a:	b2db      	uxtb	r3, r3
    576c:	2b00      	cmp	r3, #0
    576e:	d005      	beq.n	577c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5770:	683b      	ldr	r3, [r7, #0]
    5772:	791b      	ldrb	r3, [r3, #4]
    5774:	4619      	mov	r1, r3
    5776:	68f8      	ldr	r0, [r7, #12]
    5778:	4b0d      	ldr	r3, [pc, #52]	; (57b0 <_qspi_sync_command_set_ifr+0x78>)
    577a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    577c:	683b      	ldr	r3, [r7, #0]
    577e:	781b      	ldrb	r3, [r3, #0]
    5780:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5784:	b2db      	uxtb	r3, r3
    5786:	2b00      	cmp	r3, #0
    5788:	d005      	beq.n	5796 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    578a:	683b      	ldr	r3, [r7, #0]
    578c:	795b      	ldrb	r3, [r3, #5]
    578e:	4619      	mov	r1, r3
    5790:	68f8      	ldr	r0, [r7, #12]
    5792:	4b08      	ldr	r3, [pc, #32]	; (57b4 <_qspi_sync_command_set_ifr+0x7c>)
    5794:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5796:	683b      	ldr	r3, [r7, #0]
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	4619      	mov	r1, r3
    579c:	68f8      	ldr	r0, [r7, #12]
    579e:	4b06      	ldr	r3, [pc, #24]	; (57b8 <_qspi_sync_command_set_ifr+0x80>)
    57a0:	4798      	blx	r3
}
    57a2:	bf00      	nop
    57a4:	3710      	adds	r7, #16
    57a6:	46bd      	mov	sp, r7
    57a8:	bd80      	pop	{r7, pc}
    57aa:	bf00      	nop
    57ac:	0000556d 	.word	0x0000556d
    57b0:	00005589 	.word	0x00005589
    57b4:	000055bd 	.word	0x000055bd
    57b8:	000055f5 	.word	0x000055f5

000057bc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    57bc:	b580      	push	{r7, lr}
    57be:	b084      	sub	sp, #16
    57c0:	af00      	add	r7, sp, #0
    57c2:	6078      	str	r0, [r7, #4]
    57c4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    57c6:	687b      	ldr	r3, [r7, #4]
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    57cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    57d0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    57d2:	683b      	ldr	r3, [r7, #0]
    57d4:	781b      	ldrb	r3, [r3, #0]
    57d6:	f003 0320 	and.w	r3, r3, #32
    57da:	b2db      	uxtb	r3, r3
    57dc:	2b00      	cmp	r3, #0
    57de:	d004      	beq.n	57ea <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    57e0:	683b      	ldr	r3, [r7, #0]
    57e2:	689b      	ldr	r3, [r3, #8]
    57e4:	68fa      	ldr	r2, [r7, #12]
    57e6:	4413      	add	r3, r2
    57e8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    57ea:	68b8      	ldr	r0, [r7, #8]
    57ec:	4b18      	ldr	r3, [pc, #96]	; (5850 <_qspi_sync_run_transfer+0x94>)
    57ee:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    57f0:	683b      	ldr	r3, [r7, #0]
    57f2:	691b      	ldr	r3, [r3, #16]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d103      	bne.n	5800 <_qspi_sync_run_transfer+0x44>
    57f8:	683b      	ldr	r3, [r7, #0]
    57fa:	695b      	ldr	r3, [r3, #20]
    57fc:	2b00      	cmp	r3, #0
    57fe:	d001      	beq.n	5804 <_qspi_sync_run_transfer+0x48>
    5800:	2301      	movs	r3, #1
    5802:	e000      	b.n	5806 <_qspi_sync_run_transfer+0x4a>
    5804:	2300      	movs	r3, #0
    5806:	f003 0301 	and.w	r3, r3, #1
    580a:	b2db      	uxtb	r3, r3
    580c:	2282      	movs	r2, #130	; 0x82
    580e:	4911      	ldr	r1, [pc, #68]	; (5854 <_qspi_sync_run_transfer+0x98>)
    5810:	4618      	mov	r0, r3
    5812:	4b11      	ldr	r3, [pc, #68]	; (5858 <_qspi_sync_run_transfer+0x9c>)
    5814:	4798      	blx	r3

	if (cmd->tx_buf) {
    5816:	683b      	ldr	r3, [r7, #0]
    5818:	691b      	ldr	r3, [r3, #16]
    581a:	2b00      	cmp	r3, #0
    581c:	d008      	beq.n	5830 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    581e:	683b      	ldr	r3, [r7, #0]
    5820:	6919      	ldr	r1, [r3, #16]
    5822:	683b      	ldr	r3, [r7, #0]
    5824:	68db      	ldr	r3, [r3, #12]
    5826:	461a      	mov	r2, r3
    5828:	68f8      	ldr	r0, [r7, #12]
    582a:	4b0c      	ldr	r3, [pc, #48]	; (585c <_qspi_sync_run_transfer+0xa0>)
    582c:	4798      	blx	r3
    582e:	e007      	b.n	5840 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5830:	683b      	ldr	r3, [r7, #0]
    5832:	6958      	ldr	r0, [r3, #20]
    5834:	683b      	ldr	r3, [r7, #0]
    5836:	68db      	ldr	r3, [r3, #12]
    5838:	461a      	mov	r2, r3
    583a:	68f9      	ldr	r1, [r7, #12]
    583c:	4b07      	ldr	r3, [pc, #28]	; (585c <_qspi_sync_run_transfer+0xa0>)
    583e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5840:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5844:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5848:	bf00      	nop
    584a:	3710      	adds	r7, #16
    584c:	46bd      	mov	sp, r7
    584e:	bd80      	pop	{r7, pc}
    5850:	00005611 	.word	0x00005611
    5854:	000122d0 	.word	0x000122d0
    5858:	00003681 	.word	0x00003681
    585c:	00005629 	.word	0x00005629

00005860 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
    5868:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    586a:	6839      	ldr	r1, [r7, #0]
    586c:	6878      	ldr	r0, [r7, #4]
    586e:	4b14      	ldr	r3, [pc, #80]	; (58c0 <_qspi_sync_serial_run_command+0x60>)
    5870:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5872:	683b      	ldr	r3, [r7, #0]
    5874:	781b      	ldrb	r3, [r3, #0]
    5876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    587a:	b2db      	uxtb	r3, r3
    587c:	2b00      	cmp	r3, #0
    587e:	d003      	beq.n	5888 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5880:	6839      	ldr	r1, [r7, #0]
    5882:	6878      	ldr	r0, [r7, #4]
    5884:	4b0f      	ldr	r3, [pc, #60]	; (58c4 <_qspi_sync_serial_run_command+0x64>)
    5886:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	681b      	ldr	r3, [r3, #0]
    588c:	4618      	mov	r0, r3
    588e:	4b0e      	ldr	r3, [pc, #56]	; (58c8 <_qspi_sync_serial_run_command+0x68>)
    5890:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5892:	bf00      	nop
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	4618      	mov	r0, r3
    589a:	4b0c      	ldr	r3, [pc, #48]	; (58cc <_qspi_sync_serial_run_command+0x6c>)
    589c:	4798      	blx	r3
    589e:	4603      	mov	r3, r0
    58a0:	f083 0301 	eor.w	r3, r3, #1
    58a4:	b2db      	uxtb	r3, r3
    58a6:	2b00      	cmp	r3, #0
    58a8:	d1f4      	bne.n	5894 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    58aa:	687b      	ldr	r3, [r7, #4]
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	4618      	mov	r0, r3
    58b0:	4b07      	ldr	r3, [pc, #28]	; (58d0 <_qspi_sync_serial_run_command+0x70>)
    58b2:	4798      	blx	r3
	return ERR_NONE;
    58b4:	2300      	movs	r3, #0
}
    58b6:	4618      	mov	r0, r3
    58b8:	3708      	adds	r7, #8
    58ba:	46bd      	mov	sp, r7
    58bc:	bd80      	pop	{r7, pc}
    58be:	bf00      	nop
    58c0:	00005739 	.word	0x00005739
    58c4:	000057bd 	.word	0x000057bd
    58c8:	0000565d 	.word	0x0000565d
    58cc:	000054d5 	.word	0x000054d5
    58d0:	000054fd 	.word	0x000054fd

000058d4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    58d4:	b480      	push	{r7}
    58d6:	b083      	sub	sp, #12
    58d8:	af00      	add	r7, sp, #0
    58da:	6078      	str	r0, [r7, #4]
    58dc:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    58de:	bf00      	nop
    58e0:	687b      	ldr	r3, [r7, #4]
    58e2:	691a      	ldr	r2, [r3, #16]
    58e4:	683b      	ldr	r3, [r7, #0]
    58e6:	4013      	ands	r3, r2
    58e8:	2b00      	cmp	r3, #0
    58ea:	d1f9      	bne.n	58e0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    58ec:	bf00      	nop
    58ee:	370c      	adds	r7, #12
    58f0:	46bd      	mov	sp, r7
    58f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f6:	4770      	bx	lr

000058f8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    58f8:	b480      	push	{r7}
    58fa:	b083      	sub	sp, #12
    58fc:	af00      	add	r7, sp, #0
    58fe:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	f44f 7280 	mov.w	r2, #256	; 0x100
    5906:	819a      	strh	r2, [r3, #12]
}
    5908:	bf00      	nop
    590a:	370c      	adds	r7, #12
    590c:	46bd      	mov	sp, r7
    590e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5912:	4770      	bx	lr

00005914 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5914:	b480      	push	{r7}
    5916:	b083      	sub	sp, #12
    5918:	af00      	add	r7, sp, #0
    591a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5922:	819a      	strh	r2, [r3, #12]
}
    5924:	bf00      	nop
    5926:	370c      	adds	r7, #12
    5928:	46bd      	mov	sp, r7
    592a:	f85d 7b04 	ldr.w	r7, [sp], #4
    592e:	4770      	bx	lr

00005930 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5930:	b480      	push	{r7}
    5932:	b083      	sub	sp, #12
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	899b      	ldrh	r3, [r3, #12]
    593c:	b29b      	uxth	r3, r3
}
    593e:	4618      	mov	r0, r3
    5940:	370c      	adds	r7, #12
    5942:	46bd      	mov	sp, r7
    5944:	f85d 7b04 	ldr.w	r7, [sp], #4
    5948:	4770      	bx	lr

0000594a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    594a:	b480      	push	{r7}
    594c:	b083      	sub	sp, #12
    594e:	af00      	add	r7, sp, #0
    5950:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	895b      	ldrh	r3, [r3, #10]
    5956:	b29b      	uxth	r3, r3
}
    5958:	4618      	mov	r0, r3
    595a:	370c      	adds	r7, #12
    595c:	46bd      	mov	sp, r7
    595e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5962:	4770      	bx	lr

00005964 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5964:	b580      	push	{r7, lr}
    5966:	b082      	sub	sp, #8
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	881b      	ldrh	r3, [r3, #0]
    5970:	b29b      	uxth	r3, r3
    5972:	f043 0301 	orr.w	r3, r3, #1
    5976:	b29a      	uxth	r2, r3
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    597c:	2101      	movs	r1, #1
    597e:	6878      	ldr	r0, [r7, #4]
    5980:	4b02      	ldr	r3, [pc, #8]	; (598c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5982:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5984:	bf00      	nop
    5986:	3708      	adds	r7, #8
    5988:	46bd      	mov	sp, r7
    598a:	bd80      	pop	{r7, pc}
    598c:	000058d5 	.word	0x000058d5

00005990 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5990:	b580      	push	{r7, lr}
    5992:	b084      	sub	sp, #16
    5994:	af00      	add	r7, sp, #0
    5996:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5998:	f248 0103 	movw	r1, #32771	; 0x8003
    599c:	6878      	ldr	r0, [r7, #4]
    599e:	4b0a      	ldr	r3, [pc, #40]	; (59c8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    59a0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	881b      	ldrh	r3, [r3, #0]
    59a6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    59a8:	89fb      	ldrh	r3, [r7, #14]
    59aa:	085b      	lsrs	r3, r3, #1
    59ac:	b29b      	uxth	r3, r3
    59ae:	f003 0301 	and.w	r3, r3, #1
    59b2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    59b4:	89fb      	ldrh	r3, [r7, #14]
    59b6:	2b00      	cmp	r3, #0
    59b8:	bf14      	ite	ne
    59ba:	2301      	movne	r3, #1
    59bc:	2300      	moveq	r3, #0
    59be:	b2db      	uxtb	r3, r3
}
    59c0:	4618      	mov	r0, r3
    59c2:	3710      	adds	r7, #16
    59c4:	46bd      	mov	sp, r7
    59c6:	bd80      	pop	{r7, pc}
    59c8:	000058d5 	.word	0x000058d5

000059cc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    59cc:	b580      	push	{r7, lr}
    59ce:	b082      	sub	sp, #8
    59d0:	af00      	add	r7, sp, #0
    59d2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	881b      	ldrh	r3, [r3, #0]
    59d8:	b29b      	uxth	r3, r3
    59da:	f023 0302 	bic.w	r3, r3, #2
    59de:	b29a      	uxth	r2, r3
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    59e4:	f248 0103 	movw	r1, #32771	; 0x8003
    59e8:	6878      	ldr	r0, [r7, #4]
    59ea:	4b03      	ldr	r3, [pc, #12]	; (59f8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    59ec:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    59ee:	bf00      	nop
    59f0:	3708      	adds	r7, #8
    59f2:	46bd      	mov	sp, r7
    59f4:	bd80      	pop	{r7, pc}
    59f6:	bf00      	nop
    59f8:	000058d5 	.word	0x000058d5

000059fc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    59fc:	b580      	push	{r7, lr}
    59fe:	b082      	sub	sp, #8
    5a00:	af00      	add	r7, sp, #0
    5a02:	6078      	str	r0, [r7, #4]
    5a04:	460b      	mov	r3, r1
    5a06:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	887a      	ldrh	r2, [r7, #2]
    5a0c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a0e:	f248 0103 	movw	r1, #32771	; 0x8003
    5a12:	6878      	ldr	r0, [r7, #4]
    5a14:	4b02      	ldr	r3, [pc, #8]	; (5a20 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5a16:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a18:	bf00      	nop
    5a1a:	3708      	adds	r7, #8
    5a1c:	46bd      	mov	sp, r7
    5a1e:	bd80      	pop	{r7, pc}
    5a20:	000058d5 	.word	0x000058d5

00005a24 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    5a24:	b580      	push	{r7, lr}
    5a26:	b082      	sub	sp, #8
    5a28:	af00      	add	r7, sp, #0
    5a2a:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    5a2c:	2108      	movs	r1, #8
    5a2e:	6878      	ldr	r0, [r7, #4]
    5a30:	4b03      	ldr	r3, [pc, #12]	; (5a40 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    5a32:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	699b      	ldr	r3, [r3, #24]
}
    5a38:	4618      	mov	r0, r3
    5a3a:	3708      	adds	r7, #8
    5a3c:	46bd      	mov	sp, r7
    5a3e:	bd80      	pop	{r7, pc}
    5a40:	000058d5 	.word	0x000058d5

00005a44 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5a44:	b480      	push	{r7}
    5a46:	b083      	sub	sp, #12
    5a48:	af00      	add	r7, sp, #0
    5a4a:	6078      	str	r0, [r7, #4]
    5a4c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	683a      	ldr	r2, [r7, #0]
    5a52:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a54:	bf00      	nop
    5a56:	370c      	adds	r7, #12
    5a58:	46bd      	mov	sp, r7
    5a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5e:	4770      	bx	lr

00005a60 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b082      	sub	sp, #8
    5a64:	af00      	add	r7, sp, #0
    5a66:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5a68:	687b      	ldr	r3, [r7, #4]
    5a6a:	2b00      	cmp	r3, #0
    5a6c:	d005      	beq.n	5a7a <_calendar_init+0x1a>
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d001      	beq.n	5a7a <_calendar_init+0x1a>
    5a76:	2301      	movs	r3, #1
    5a78:	e000      	b.n	5a7c <_calendar_init+0x1c>
    5a7a:	2300      	movs	r3, #0
    5a7c:	f003 0301 	and.w	r3, r3, #1
    5a80:	b2db      	uxtb	r3, r3
    5a82:	222f      	movs	r2, #47	; 0x2f
    5a84:	491b      	ldr	r1, [pc, #108]	; (5af4 <_calendar_init+0x94>)
    5a86:	4618      	mov	r0, r3
    5a88:	4b1b      	ldr	r3, [pc, #108]	; (5af8 <_calendar_init+0x98>)
    5a8a:	4798      	blx	r3

	_rtc_dev = dev;
    5a8c:	4a1b      	ldr	r2, [pc, #108]	; (5afc <_calendar_init+0x9c>)
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	4618      	mov	r0, r3
    5a98:	4b19      	ldr	r3, [pc, #100]	; (5b00 <_calendar_init+0xa0>)
    5a9a:	4798      	blx	r3
    5a9c:	4603      	mov	r3, r0
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d00a      	beq.n	5ab8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	4618      	mov	r0, r3
    5aa8:	4b16      	ldr	r3, [pc, #88]	; (5b04 <_calendar_init+0xa4>)
    5aaa:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	681b      	ldr	r3, [r3, #0]
    5ab0:	2102      	movs	r1, #2
    5ab2:	4618      	mov	r0, r3
    5ab4:	4b14      	ldr	r3, [pc, #80]	; (5b08 <_calendar_init+0xa8>)
    5ab6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	681b      	ldr	r3, [r3, #0]
    5abc:	4618      	mov	r0, r3
    5abe:	4b13      	ldr	r3, [pc, #76]	; (5b0c <_calendar_init+0xac>)
    5ac0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	2101      	movs	r1, #1
    5ac8:	4618      	mov	r0, r3
    5aca:	4b0f      	ldr	r3, [pc, #60]	; (5b08 <_calendar_init+0xa8>)
    5acc:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5ad6:	4618      	mov	r0, r3
    5ad8:	4b0d      	ldr	r3, [pc, #52]	; (5b10 <_calendar_init+0xb0>)
    5ada:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5ae0:	2100      	movs	r1, #0
    5ae2:	4618      	mov	r0, r3
    5ae4:	4b0b      	ldr	r3, [pc, #44]	; (5b14 <_calendar_init+0xb4>)
    5ae6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5ae8:	2300      	movs	r3, #0
}
    5aea:	4618      	mov	r0, r3
    5aec:	3708      	adds	r7, #8
    5aee:	46bd      	mov	sp, r7
    5af0:	bd80      	pop	{r7, pc}
    5af2:	bf00      	nop
    5af4:	000122e8 	.word	0x000122e8
    5af8:	00003681 	.word	0x00003681
    5afc:	20000bb8 	.word	0x20000bb8
    5b00:	00005991 	.word	0x00005991
    5b04:	000059cd 	.word	0x000059cd
    5b08:	000058d5 	.word	0x000058d5
    5b0c:	00005965 	.word	0x00005965
    5b10:	000059fd 	.word	0x000059fd
    5b14:	00005a45 	.word	0x00005a45

00005b18 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    5b18:	b580      	push	{r7, lr}
    5b1a:	b082      	sub	sp, #8
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	2b00      	cmp	r3, #0
    5b24:	d005      	beq.n	5b32 <_calendar_get_counter+0x1a>
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d001      	beq.n	5b32 <_calendar_get_counter+0x1a>
    5b2e:	2301      	movs	r3, #1
    5b30:	e000      	b.n	5b34 <_calendar_get_counter+0x1c>
    5b32:	2300      	movs	r3, #0
    5b34:	f003 0301 	and.w	r3, r3, #1
    5b38:	b2db      	uxtb	r3, r3
    5b3a:	2299      	movs	r2, #153	; 0x99
    5b3c:	4906      	ldr	r1, [pc, #24]	; (5b58 <_calendar_get_counter+0x40>)
    5b3e:	4618      	mov	r0, r3
    5b40:	4b06      	ldr	r3, [pc, #24]	; (5b5c <_calendar_get_counter+0x44>)
    5b42:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	4618      	mov	r0, r3
    5b4a:	4b05      	ldr	r3, [pc, #20]	; (5b60 <_calendar_get_counter+0x48>)
    5b4c:	4798      	blx	r3
    5b4e:	4603      	mov	r3, r0
}
    5b50:	4618      	mov	r0, r3
    5b52:	3708      	adds	r7, #8
    5b54:	46bd      	mov	sp, r7
    5b56:	bd80      	pop	{r7, pc}
    5b58:	000122e8 	.word	0x000122e8
    5b5c:	00003681 	.word	0x00003681
    5b60:	00005a25 	.word	0x00005a25

00005b64 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5b64:	b580      	push	{r7, lr}
    5b66:	b084      	sub	sp, #16
    5b68:	af00      	add	r7, sp, #0
    5b6a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	681b      	ldr	r3, [r3, #0]
    5b70:	4618      	mov	r0, r3
    5b72:	4b19      	ldr	r3, [pc, #100]	; (5bd8 <_rtc_interrupt_handler+0x74>)
    5b74:	4798      	blx	r3
    5b76:	4603      	mov	r3, r0
    5b78:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	4618      	mov	r0, r3
    5b80:	4b16      	ldr	r3, [pc, #88]	; (5bdc <_rtc_interrupt_handler+0x78>)
    5b82:	4798      	blx	r3
    5b84:	4603      	mov	r3, r0
    5b86:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5b88:	89fa      	ldrh	r2, [r7, #14]
    5b8a:	89bb      	ldrh	r3, [r7, #12]
    5b8c:	4013      	ands	r3, r2
    5b8e:	b29b      	uxth	r3, r3
    5b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5b94:	2b00      	cmp	r3, #0
    5b96:	d009      	beq.n	5bac <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	685b      	ldr	r3, [r3, #4]
    5b9c:	6878      	ldr	r0, [r7, #4]
    5b9e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	681b      	ldr	r3, [r3, #0]
    5ba4:	4618      	mov	r0, r3
    5ba6:	4b0e      	ldr	r3, [pc, #56]	; (5be0 <_rtc_interrupt_handler+0x7c>)
    5ba8:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5baa:	e010      	b.n	5bce <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5bac:	89fa      	ldrh	r2, [r7, #14]
    5bae:	89bb      	ldrh	r3, [r7, #12]
    5bb0:	4013      	ands	r3, r2
    5bb2:	b29b      	uxth	r3, r3
    5bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5bb8:	2b00      	cmp	r3, #0
    5bba:	d008      	beq.n	5bce <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	689b      	ldr	r3, [r3, #8]
    5bc0:	6878      	ldr	r0, [r7, #4]
    5bc2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	4618      	mov	r0, r3
    5bca:	4b06      	ldr	r3, [pc, #24]	; (5be4 <_rtc_interrupt_handler+0x80>)
    5bcc:	4798      	blx	r3
}
    5bce:	bf00      	nop
    5bd0:	3710      	adds	r7, #16
    5bd2:	46bd      	mov	sp, r7
    5bd4:	bd80      	pop	{r7, pc}
    5bd6:	bf00      	nop
    5bd8:	00005931 	.word	0x00005931
    5bdc:	0000594b 	.word	0x0000594b
    5be0:	000058f9 	.word	0x000058f9
    5be4:	00005915 	.word	0x00005915

00005be8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5bec:	4b03      	ldr	r3, [pc, #12]	; (5bfc <RTC_Handler+0x14>)
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	4618      	mov	r0, r3
    5bf2:	4b03      	ldr	r3, [pc, #12]	; (5c00 <RTC_Handler+0x18>)
    5bf4:	4798      	blx	r3
}
    5bf6:	bf00      	nop
    5bf8:	bd80      	pop	{r7, pc}
    5bfa:	bf00      	nop
    5bfc:	20000bb8 	.word	0x20000bb8
    5c00:	00005b65 	.word	0x00005b65

00005c04 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5c04:	b480      	push	{r7}
    5c06:	b083      	sub	sp, #12
    5c08:	af00      	add	r7, sp, #0
    5c0a:	6078      	str	r0, [r7, #4]
    5c0c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5c0e:	bf00      	nop
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	69da      	ldr	r2, [r3, #28]
    5c14:	683b      	ldr	r3, [r7, #0]
    5c16:	4013      	ands	r3, r2
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d1f9      	bne.n	5c10 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5c1c:	bf00      	nop
    5c1e:	370c      	adds	r7, #12
    5c20:	46bd      	mov	sp, r7
    5c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c26:	4770      	bx	lr

00005c28 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5c28:	b480      	push	{r7}
    5c2a:	b083      	sub	sp, #12
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
    5c30:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	69da      	ldr	r2, [r3, #28]
    5c36:	683b      	ldr	r3, [r7, #0]
    5c38:	4013      	ands	r3, r2
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	bf14      	ite	ne
    5c3e:	2301      	movne	r3, #1
    5c40:	2300      	moveq	r3, #0
    5c42:	b2db      	uxtb	r3, r3
}
    5c44:	4618      	mov	r0, r3
    5c46:	370c      	adds	r7, #12
    5c48:	46bd      	mov	sp, r7
    5c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4e:	4770      	bx	lr

00005c50 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5c50:	b480      	push	{r7}
    5c52:	b083      	sub	sp, #12
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
    5c58:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5c5a:	bf00      	nop
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	69da      	ldr	r2, [r3, #28]
    5c60:	683b      	ldr	r3, [r7, #0]
    5c62:	4013      	ands	r3, r2
    5c64:	2b00      	cmp	r3, #0
    5c66:	d1f9      	bne.n	5c5c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5c68:	bf00      	nop
    5c6a:	370c      	adds	r7, #12
    5c6c:	46bd      	mov	sp, r7
    5c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c72:	4770      	bx	lr

00005c74 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5c74:	b480      	push	{r7}
    5c76:	b083      	sub	sp, #12
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
    5c7c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	69da      	ldr	r2, [r3, #28]
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	4013      	ands	r3, r2
    5c86:	2b00      	cmp	r3, #0
    5c88:	bf14      	ite	ne
    5c8a:	2301      	movne	r3, #1
    5c8c:	2300      	moveq	r3, #0
    5c8e:	b2db      	uxtb	r3, r3
}
    5c90:	4618      	mov	r0, r3
    5c92:	370c      	adds	r7, #12
    5c94:	46bd      	mov	sp, r7
    5c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9a:	4770      	bx	lr

00005c9c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5c9c:	b480      	push	{r7}
    5c9e:	b083      	sub	sp, #12
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	2201      	movs	r2, #1
    5ca8:	761a      	strb	r2, [r3, #24]
}
    5caa:	bf00      	nop
    5cac:	370c      	adds	r7, #12
    5cae:	46bd      	mov	sp, r7
    5cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb4:	4770      	bx	lr

00005cb6 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5cb6:	b480      	push	{r7}
    5cb8:	b083      	sub	sp, #12
    5cba:	af00      	add	r7, sp, #0
    5cbc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5cbe:	687b      	ldr	r3, [r7, #4]
    5cc0:	2202      	movs	r2, #2
    5cc2:	761a      	strb	r2, [r3, #24]
}
    5cc4:	bf00      	nop
    5cc6:	370c      	adds	r7, #12
    5cc8:	46bd      	mov	sp, r7
    5cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cce:	4770      	bx	lr

00005cd0 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5cd0:	b480      	push	{r7}
    5cd2:	b083      	sub	sp, #12
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	7e1b      	ldrb	r3, [r3, #24]
    5cdc:	b2db      	uxtb	r3, r3
}
    5cde:	4618      	mov	r0, r3
    5ce0:	370c      	adds	r7, #12
    5ce2:	46bd      	mov	sp, r7
    5ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce8:	4770      	bx	lr

00005cea <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5cea:	b480      	push	{r7}
    5cec:	b085      	sub	sp, #20
    5cee:	af00      	add	r7, sp, #0
    5cf0:	6078      	str	r0, [r7, #4]
    5cf2:	460b      	mov	r3, r1
    5cf4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	7e1b      	ldrb	r3, [r3, #24]
    5cfa:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5cfc:	7bfa      	ldrb	r2, [r7, #15]
    5cfe:	78fb      	ldrb	r3, [r7, #3]
    5d00:	4013      	ands	r3, r2
    5d02:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5d04:	7bfb      	ldrb	r3, [r7, #15]
}
    5d06:	4618      	mov	r0, r3
    5d08:	3714      	adds	r7, #20
    5d0a:	46bd      	mov	sp, r7
    5d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d10:	4770      	bx	lr

00005d12 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5d12:	b480      	push	{r7}
    5d14:	b083      	sub	sp, #12
    5d16:	af00      	add	r7, sp, #0
    5d18:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	7e1b      	ldrb	r3, [r3, #24]
    5d1e:	b2db      	uxtb	r3, r3
}
    5d20:	4618      	mov	r0, r3
    5d22:	370c      	adds	r7, #12
    5d24:	46bd      	mov	sp, r7
    5d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d2a:	4770      	bx	lr

00005d2c <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5d2c:	b480      	push	{r7}
    5d2e:	b083      	sub	sp, #12
    5d30:	af00      	add	r7, sp, #0
    5d32:	6078      	str	r0, [r7, #4]
    5d34:	460b      	mov	r3, r1
    5d36:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	78fa      	ldrb	r2, [r7, #3]
    5d3c:	761a      	strb	r2, [r3, #24]
}
    5d3e:	bf00      	nop
    5d40:	370c      	adds	r7, #12
    5d42:	46bd      	mov	sp, r7
    5d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d48:	4770      	bx	lr
	...

00005d4c <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	b082      	sub	sp, #8
    5d50:	af00      	add	r7, sp, #0
    5d52:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	681b      	ldr	r3, [r3, #0]
    5d58:	f043 0202 	orr.w	r2, r3, #2
    5d5c:	687b      	ldr	r3, [r7, #4]
    5d5e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5d60:	2103      	movs	r1, #3
    5d62:	6878      	ldr	r0, [r7, #4]
    5d64:	4b02      	ldr	r3, [pc, #8]	; (5d70 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5d66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d68:	bf00      	nop
    5d6a:	3708      	adds	r7, #8
    5d6c:	46bd      	mov	sp, r7
    5d6e:	bd80      	pop	{r7, pc}
    5d70:	00005c05 	.word	0x00005c05

00005d74 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b082      	sub	sp, #8
    5d78:	af00      	add	r7, sp, #0
    5d7a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	681b      	ldr	r3, [r3, #0]
    5d80:	f023 0202 	bic.w	r2, r3, #2
    5d84:	687b      	ldr	r3, [r7, #4]
    5d86:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5d88:	2103      	movs	r1, #3
    5d8a:	6878      	ldr	r0, [r7, #4]
    5d8c:	4b02      	ldr	r3, [pc, #8]	; (5d98 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5d8e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d90:	bf00      	nop
    5d92:	3708      	adds	r7, #8
    5d94:	46bd      	mov	sp, r7
    5d96:	bd80      	pop	{r7, pc}
    5d98:	00005c05 	.word	0x00005c05

00005d9c <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5d9c:	b480      	push	{r7}
    5d9e:	b085      	sub	sp, #20
    5da0:	af00      	add	r7, sp, #0
    5da2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	681b      	ldr	r3, [r3, #0]
    5da8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5daa:	68fb      	ldr	r3, [r7, #12]
    5dac:	0edb      	lsrs	r3, r3, #27
    5dae:	f003 0301 	and.w	r3, r3, #1
    5db2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5db4:	68fb      	ldr	r3, [r7, #12]
    5db6:	2b00      	cmp	r3, #0
    5db8:	bf14      	ite	ne
    5dba:	2301      	movne	r3, #1
    5dbc:	2300      	moveq	r3, #0
    5dbe:	b2db      	uxtb	r3, r3
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	3714      	adds	r7, #20
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b084      	sub	sp, #16
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5dd6:	2103      	movs	r1, #3
    5dd8:	6878      	ldr	r0, [r7, #4]
    5dda:	4b07      	ldr	r3, [pc, #28]	; (5df8 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5ddc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	681b      	ldr	r3, [r3, #0]
    5de2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5de4:	68fa      	ldr	r2, [r7, #12]
    5de6:	683b      	ldr	r3, [r7, #0]
    5de8:	4013      	ands	r3, r2
    5dea:	60fb      	str	r3, [r7, #12]
	return tmp;
    5dec:	68fb      	ldr	r3, [r7, #12]
}
    5dee:	4618      	mov	r0, r3
    5df0:	3710      	adds	r7, #16
    5df2:	46bd      	mov	sp, r7
    5df4:	bd80      	pop	{r7, pc}
    5df6:	bf00      	nop
    5df8:	00005c05 	.word	0x00005c05

00005dfc <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5dfc:	b580      	push	{r7, lr}
    5dfe:	b082      	sub	sp, #8
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
    5e04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5e06:	687b      	ldr	r3, [r7, #4]
    5e08:	683a      	ldr	r2, [r7, #0]
    5e0a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5e0c:	2103      	movs	r1, #3
    5e0e:	6878      	ldr	r0, [r7, #4]
    5e10:	4b02      	ldr	r3, [pc, #8]	; (5e1c <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5e12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e14:	bf00      	nop
    5e16:	3708      	adds	r7, #8
    5e18:	46bd      	mov	sp, r7
    5e1a:	bd80      	pop	{r7, pc}
    5e1c:	00005c05 	.word	0x00005c05

00005e20 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5e20:	b580      	push	{r7, lr}
    5e22:	b084      	sub	sp, #16
    5e24:	af00      	add	r7, sp, #0
    5e26:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5e28:	2103      	movs	r1, #3
    5e2a:	6878      	ldr	r0, [r7, #4]
    5e2c:	4b09      	ldr	r3, [pc, #36]	; (5e54 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5e2e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	681b      	ldr	r3, [r3, #0]
    5e34:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5e36:	68fb      	ldr	r3, [r7, #12]
    5e38:	085b      	lsrs	r3, r3, #1
    5e3a:	f003 0301 	and.w	r3, r3, #1
    5e3e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5e40:	68fb      	ldr	r3, [r7, #12]
    5e42:	2b00      	cmp	r3, #0
    5e44:	bf14      	ite	ne
    5e46:	2301      	movne	r3, #1
    5e48:	2300      	moveq	r3, #0
    5e4a:	b2db      	uxtb	r3, r3
}
    5e4c:	4618      	mov	r0, r3
    5e4e:	3710      	adds	r7, #16
    5e50:	46bd      	mov	sp, r7
    5e52:	bd80      	pop	{r7, pc}
    5e54:	00005c51 	.word	0x00005c51

00005e58 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b082      	sub	sp, #8
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	681b      	ldr	r3, [r3, #0]
    5e64:	f023 0202 	bic.w	r2, r3, #2
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5e6c:	2103      	movs	r1, #3
    5e6e:	6878      	ldr	r0, [r7, #4]
    5e70:	4b02      	ldr	r3, [pc, #8]	; (5e7c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5e72:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e74:	bf00      	nop
    5e76:	3708      	adds	r7, #8
    5e78:	46bd      	mov	sp, r7
    5e7a:	bd80      	pop	{r7, pc}
    5e7c:	00005c51 	.word	0x00005c51

00005e80 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b084      	sub	sp, #16
    5e84:	af00      	add	r7, sp, #0
    5e86:	6078      	str	r0, [r7, #4]
    5e88:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5e8a:	2103      	movs	r1, #3
    5e8c:	6878      	ldr	r0, [r7, #4]
    5e8e:	4b07      	ldr	r3, [pc, #28]	; (5eac <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5e90:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5e92:	687b      	ldr	r3, [r7, #4]
    5e94:	681b      	ldr	r3, [r3, #0]
    5e96:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5e98:	68fa      	ldr	r2, [r7, #12]
    5e9a:	683b      	ldr	r3, [r7, #0]
    5e9c:	4013      	ands	r3, r2
    5e9e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ea0:	68fb      	ldr	r3, [r7, #12]
}
    5ea2:	4618      	mov	r0, r3
    5ea4:	3710      	adds	r7, #16
    5ea6:	46bd      	mov	sp, r7
    5ea8:	bd80      	pop	{r7, pc}
    5eaa:	bf00      	nop
    5eac:	00005c51 	.word	0x00005c51

00005eb0 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5eb0:	b580      	push	{r7, lr}
    5eb2:	b082      	sub	sp, #8
    5eb4:	af00      	add	r7, sp, #0
    5eb6:	6078      	str	r0, [r7, #4]
    5eb8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	683a      	ldr	r2, [r7, #0]
    5ebe:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ec0:	2103      	movs	r1, #3
    5ec2:	6878      	ldr	r0, [r7, #4]
    5ec4:	4b02      	ldr	r3, [pc, #8]	; (5ed0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5ec6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ec8:	bf00      	nop
    5eca:	3708      	adds	r7, #8
    5ecc:	46bd      	mov	sp, r7
    5ece:	bd80      	pop	{r7, pc}
    5ed0:	00005c51 	.word	0x00005c51

00005ed4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b082      	sub	sp, #8
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	685b      	ldr	r3, [r3, #4]
    5ee0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ee8:	2104      	movs	r1, #4
    5eea:	6878      	ldr	r0, [r7, #4]
    5eec:	4b02      	ldr	r3, [pc, #8]	; (5ef8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5eee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ef0:	bf00      	nop
    5ef2:	3708      	adds	r7, #8
    5ef4:	46bd      	mov	sp, r7
    5ef6:	bd80      	pop	{r7, pc}
    5ef8:	00005c05 	.word	0x00005c05

00005efc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5efc:	b580      	push	{r7, lr}
    5efe:	b082      	sub	sp, #8
    5f00:	af00      	add	r7, sp, #0
    5f02:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5f04:	687b      	ldr	r3, [r7, #4]
    5f06:	685b      	ldr	r3, [r3, #4]
    5f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f10:	2104      	movs	r1, #4
    5f12:	6878      	ldr	r0, [r7, #4]
    5f14:	4b02      	ldr	r3, [pc, #8]	; (5f20 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5f16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f18:	bf00      	nop
    5f1a:	3708      	adds	r7, #8
    5f1c:	46bd      	mov	sp, r7
    5f1e:	bd80      	pop	{r7, pc}
    5f20:	00005c05 	.word	0x00005c05

00005f24 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b082      	sub	sp, #8
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	685b      	ldr	r3, [r3, #4]
    5f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f38:	2104      	movs	r1, #4
    5f3a:	6878      	ldr	r0, [r7, #4]
    5f3c:	4b02      	ldr	r3, [pc, #8]	; (5f48 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5f3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f40:	bf00      	nop
    5f42:	3708      	adds	r7, #8
    5f44:	46bd      	mov	sp, r7
    5f46:	bd80      	pop	{r7, pc}
    5f48:	00005c05 	.word	0x00005c05

00005f4c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5f4c:	b580      	push	{r7, lr}
    5f4e:	b082      	sub	sp, #8
    5f50:	af00      	add	r7, sp, #0
    5f52:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	685b      	ldr	r3, [r3, #4]
    5f58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f60:	2104      	movs	r1, #4
    5f62:	6878      	ldr	r0, [r7, #4]
    5f64:	4b02      	ldr	r3, [pc, #8]	; (5f70 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5f66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f68:	bf00      	nop
    5f6a:	3708      	adds	r7, #8
    5f6c:	46bd      	mov	sp, r7
    5f6e:	bd80      	pop	{r7, pc}
    5f70:	00005c05 	.word	0x00005c05

00005f74 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5f74:	b580      	push	{r7, lr}
    5f76:	b082      	sub	sp, #8
    5f78:	af00      	add	r7, sp, #0
    5f7a:	6078      	str	r0, [r7, #4]
    5f7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5f7e:	687b      	ldr	r3, [r7, #4]
    5f80:	685a      	ldr	r2, [r3, #4]
    5f82:	683b      	ldr	r3, [r7, #0]
    5f84:	041b      	lsls	r3, r3, #16
    5f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5f8a:	431a      	orrs	r2, r3
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f90:	2104      	movs	r1, #4
    5f92:	6878      	ldr	r0, [r7, #4]
    5f94:	4b02      	ldr	r3, [pc, #8]	; (5fa0 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5f96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f98:	bf00      	nop
    5f9a:	3708      	adds	r7, #8
    5f9c:	46bd      	mov	sp, r7
    5f9e:	bd80      	pop	{r7, pc}
    5fa0:	00005c05 	.word	0x00005c05

00005fa4 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b082      	sub	sp, #8
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
    5fac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	683a      	ldr	r2, [r7, #0]
    5fb2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fb4:	2104      	movs	r1, #4
    5fb6:	6878      	ldr	r0, [r7, #4]
    5fb8:	4b02      	ldr	r3, [pc, #8]	; (5fc4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5fba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fbc:	bf00      	nop
    5fbe:	3708      	adds	r7, #8
    5fc0:	46bd      	mov	sp, r7
    5fc2:	bd80      	pop	{r7, pc}
    5fc4:	00005c05 	.word	0x00005c05

00005fc8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
    5fd0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	683a      	ldr	r2, [r7, #0]
    5fd6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5fd8:	2117      	movs	r1, #23
    5fda:	6878      	ldr	r0, [r7, #4]
    5fdc:	4b02      	ldr	r3, [pc, #8]	; (5fe8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5fde:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe0:	bf00      	nop
    5fe2:	3708      	adds	r7, #8
    5fe4:	46bd      	mov	sp, r7
    5fe6:	bd80      	pop	{r7, pc}
    5fe8:	00005c51 	.word	0x00005c51

00005fec <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5fec:	b480      	push	{r7}
    5fee:	b083      	sub	sp, #12
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
    5ff4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	683a      	ldr	r2, [r7, #0]
    5ffa:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ffc:	bf00      	nop
    5ffe:	370c      	adds	r7, #12
    6000:	46bd      	mov	sp, r7
    6002:	f85d 7b04 	ldr.w	r7, [sp], #4
    6006:	4770      	bx	lr

00006008 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6008:	b480      	push	{r7}
    600a:	b083      	sub	sp, #12
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
    6010:	460b      	mov	r3, r1
    6012:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	78fa      	ldrb	r2, [r7, #3]
    6018:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    601a:	bf00      	nop
    601c:	370c      	adds	r7, #12
    601e:	46bd      	mov	sp, r7
    6020:	f85d 7b04 	ldr.w	r7, [sp], #4
    6024:	4770      	bx	lr
	...

00006028 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6028:	b580      	push	{r7, lr}
    602a:	b084      	sub	sp, #16
    602c:	af00      	add	r7, sp, #0
    602e:	6078      	str	r0, [r7, #4]
    6030:	460b      	mov	r3, r1
    6032:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6038:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    603a:	68fb      	ldr	r3, [r7, #12]
    603c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6040:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6042:	78fb      	ldrb	r3, [r7, #3]
    6044:	039b      	lsls	r3, r3, #14
    6046:	461a      	mov	r2, r3
    6048:	68fb      	ldr	r3, [r7, #12]
    604a:	4313      	orrs	r3, r2
    604c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    604e:	687b      	ldr	r3, [r7, #4]
    6050:	68fa      	ldr	r2, [r7, #12]
    6052:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6054:	2104      	movs	r1, #4
    6056:	6878      	ldr	r0, [r7, #4]
    6058:	4b02      	ldr	r3, [pc, #8]	; (6064 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    605a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    605c:	bf00      	nop
    605e:	3710      	adds	r7, #16
    6060:	46bd      	mov	sp, r7
    6062:	bd80      	pop	{r7, pc}
    6064:	00005c05 	.word	0x00005c05

00006068 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6068:	b580      	push	{r7, lr}
    606a:	b082      	sub	sp, #8
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
    6070:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	683a      	ldr	r2, [r7, #0]
    6076:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6078:	2104      	movs	r1, #4
    607a:	6878      	ldr	r0, [r7, #4]
    607c:	4b02      	ldr	r3, [pc, #8]	; (6088 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    607e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6080:	bf00      	nop
    6082:	3708      	adds	r7, #8
    6084:	46bd      	mov	sp, r7
    6086:	bd80      	pop	{r7, pc}
    6088:	00005c05 	.word	0x00005c05

0000608c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    608c:	b580      	push	{r7, lr}
    608e:	b082      	sub	sp, #8
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6094:	2104      	movs	r1, #4
    6096:	6878      	ldr	r0, [r7, #4]
    6098:	4b03      	ldr	r3, [pc, #12]	; (60a8 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    609a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    60a0:	4618      	mov	r0, r3
    60a2:	3708      	adds	r7, #8
    60a4:	46bd      	mov	sp, r7
    60a6:	bd80      	pop	{r7, pc}
    60a8:	00005c05 	.word	0x00005c05

000060ac <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    60ac:	b480      	push	{r7}
    60ae:	b083      	sub	sp, #12
    60b0:	af00      	add	r7, sp, #0
    60b2:	6078      	str	r0, [r7, #4]
    60b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    60b6:	687b      	ldr	r3, [r7, #4]
    60b8:	683a      	ldr	r2, [r7, #0]
    60ba:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60bc:	bf00      	nop
    60be:	370c      	adds	r7, #12
    60c0:	46bd      	mov	sp, r7
    60c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c6:	4770      	bx	lr

000060c8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    60c8:	b580      	push	{r7, lr}
    60ca:	b082      	sub	sp, #8
    60cc:	af00      	add	r7, sp, #0
    60ce:	6078      	str	r0, [r7, #4]
    60d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	683a      	ldr	r2, [r7, #0]
    60d6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60d8:	2104      	movs	r1, #4
    60da:	6878      	ldr	r0, [r7, #4]
    60dc:	4b02      	ldr	r3, [pc, #8]	; (60e8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    60de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60e0:	bf00      	nop
    60e2:	3708      	adds	r7, #8
    60e4:	46bd      	mov	sp, r7
    60e6:	bd80      	pop	{r7, pc}
    60e8:	00005c05 	.word	0x00005c05

000060ec <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b082      	sub	sp, #8
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60f4:	2104      	movs	r1, #4
    60f6:	6878      	ldr	r0, [r7, #4]
    60f8:	4b03      	ldr	r3, [pc, #12]	; (6108 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    60fa:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6100:	4618      	mov	r0, r3
    6102:	3708      	adds	r7, #8
    6104:	46bd      	mov	sp, r7
    6106:	bd80      	pop	{r7, pc}
    6108:	00005c05 	.word	0x00005c05

0000610c <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    610c:	b480      	push	{r7}
    610e:	b083      	sub	sp, #12
    6110:	af00      	add	r7, sp, #0
    6112:	6078      	str	r0, [r7, #4]
    6114:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	683a      	ldr	r2, [r7, #0]
    611a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    611c:	bf00      	nop
    611e:	370c      	adds	r7, #12
    6120:	46bd      	mov	sp, r7
    6122:	f85d 7b04 	ldr.w	r7, [sp], #4
    6126:	4770      	bx	lr

00006128 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6128:	b480      	push	{r7}
    612a:	b083      	sub	sp, #12
    612c:	af00      	add	r7, sp, #0
    612e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6134:	4618      	mov	r0, r3
    6136:	370c      	adds	r7, #12
    6138:	46bd      	mov	sp, r7
    613a:	f85d 7b04 	ldr.w	r7, [sp], #4
    613e:	4770      	bx	lr

00006140 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6140:	b480      	push	{r7}
    6142:	b083      	sub	sp, #12
    6144:	af00      	add	r7, sp, #0
    6146:	6078      	str	r0, [r7, #4]
    6148:	460b      	mov	r3, r1
    614a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	78fa      	ldrb	r2, [r7, #3]
    6150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6154:	bf00      	nop
    6156:	370c      	adds	r7, #12
    6158:	46bd      	mov	sp, r7
    615a:	f85d 7b04 	ldr.w	r7, [sp], #4
    615e:	4770      	bx	lr

00006160 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6160:	b480      	push	{r7}
    6162:	b083      	sub	sp, #12
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
    6168:	460b      	mov	r3, r1
    616a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	887a      	ldrh	r2, [r7, #2]
    6170:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6172:	bf00      	nop
    6174:	370c      	adds	r7, #12
    6176:	46bd      	mov	sp, r7
    6178:	f85d 7b04 	ldr.w	r7, [sp], #4
    617c:	4770      	bx	lr
	...

00006180 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6180:	b580      	push	{r7, lr}
    6182:	b082      	sub	sp, #8
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6188:	2104      	movs	r1, #4
    618a:	6878      	ldr	r0, [r7, #4]
    618c:	4b06      	ldr	r3, [pc, #24]	; (61a8 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    618e:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	8b5b      	ldrh	r3, [r3, #26]
    6194:	b29b      	uxth	r3, r3
    6196:	091b      	lsrs	r3, r3, #4
    6198:	b29b      	uxth	r3, r3
    619a:	f003 0303 	and.w	r3, r3, #3
    619e:	b29b      	uxth	r3, r3
}
    61a0:	4618      	mov	r0, r3
    61a2:	3708      	adds	r7, #8
    61a4:	46bd      	mov	sp, r7
    61a6:	bd80      	pop	{r7, pc}
    61a8:	00005c05 	.word	0x00005c05

000061ac <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b082      	sub	sp, #8
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61b4:	2104      	movs	r1, #4
    61b6:	6878      	ldr	r0, [r7, #4]
    61b8:	4b04      	ldr	r3, [pc, #16]	; (61cc <hri_sercomi2cm_read_STATUS_reg+0x20>)
    61ba:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    61bc:	687b      	ldr	r3, [r7, #4]
    61be:	8b5b      	ldrh	r3, [r3, #26]
    61c0:	b29b      	uxth	r3, r3
}
    61c2:	4618      	mov	r0, r3
    61c4:	3708      	adds	r7, #8
    61c6:	46bd      	mov	sp, r7
    61c8:	bd80      	pop	{r7, pc}
    61ca:	bf00      	nop
    61cc:	00005c05 	.word	0x00005c05

000061d0 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b082      	sub	sp, #8
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
    61d8:	460b      	mov	r3, r1
    61da:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	887a      	ldrh	r2, [r7, #2]
    61e0:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61e2:	2104      	movs	r1, #4
    61e4:	6878      	ldr	r0, [r7, #4]
    61e6:	4b03      	ldr	r3, [pc, #12]	; (61f4 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    61e8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61ea:	bf00      	nop
    61ec:	3708      	adds	r7, #8
    61ee:	46bd      	mov	sp, r7
    61f0:	bd80      	pop	{r7, pc}
    61f2:	bf00      	nop
    61f4:	00005c05 	.word	0x00005c05

000061f8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    61f8:	b4b0      	push	{r4, r5, r7}
    61fa:	b08d      	sub	sp, #52	; 0x34
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6200:	4b13      	ldr	r3, [pc, #76]	; (6250 <_sercom_get_hardware_index+0x58>)
    6202:	f107 040c 	add.w	r4, r7, #12
    6206:	461d      	mov	r5, r3
    6208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    620a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    620c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6214:	2300      	movs	r3, #0
    6216:	62fb      	str	r3, [r7, #44]	; 0x2c
    6218:	e010      	b.n	623c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    621c:	009b      	lsls	r3, r3, #2
    621e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6222:	4413      	add	r3, r2
    6224:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6228:	461a      	mov	r2, r3
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	429a      	cmp	r2, r3
    622e:	d102      	bne.n	6236 <_sercom_get_hardware_index+0x3e>
			return i;
    6230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6232:	b2db      	uxtb	r3, r3
    6234:	e006      	b.n	6244 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6238:	3301      	adds	r3, #1
    623a:	62fb      	str	r3, [r7, #44]	; 0x2c
    623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    623e:	2b07      	cmp	r3, #7
    6240:	d9eb      	bls.n	621a <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6242:	2300      	movs	r3, #0
}
    6244:	4618      	mov	r0, r3
    6246:	3734      	adds	r7, #52	; 0x34
    6248:	46bd      	mov	sp, r7
    624a:	bcb0      	pop	{r4, r5, r7}
    624c:	4770      	bx	lr
    624e:	bf00      	nop
    6250:	0001231c 	.word	0x0001231c

00006254 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6254:	b580      	push	{r7, lr}
    6256:	b084      	sub	sp, #16
    6258:	af00      	add	r7, sp, #0
    625a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    625c:	6878      	ldr	r0, [r7, #4]
    625e:	4b13      	ldr	r3, [pc, #76]	; (62ac <_get_i2cm_index+0x58>)
    6260:	4798      	blx	r3
    6262:	4603      	mov	r3, r0
    6264:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6266:	2300      	movs	r3, #0
    6268:	73fb      	strb	r3, [r7, #15]
    626a:	e010      	b.n	628e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    626c:	7bfa      	ldrb	r2, [r7, #15]
    626e:	4910      	ldr	r1, [pc, #64]	; (62b0 <_get_i2cm_index+0x5c>)
    6270:	4613      	mov	r3, r2
    6272:	005b      	lsls	r3, r3, #1
    6274:	4413      	add	r3, r2
    6276:	00db      	lsls	r3, r3, #3
    6278:	440b      	add	r3, r1
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	7bba      	ldrb	r2, [r7, #14]
    627e:	429a      	cmp	r2, r3
    6280:	d102      	bne.n	6288 <_get_i2cm_index+0x34>
			return i;
    6282:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6286:	e00d      	b.n	62a4 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6288:	7bfb      	ldrb	r3, [r7, #15]
    628a:	3301      	adds	r3, #1
    628c:	73fb      	strb	r3, [r7, #15]
    628e:	7bfb      	ldrb	r3, [r7, #15]
    6290:	2b02      	cmp	r3, #2
    6292:	d9eb      	bls.n	626c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6294:	f240 32a6 	movw	r2, #934	; 0x3a6
    6298:	4906      	ldr	r1, [pc, #24]	; (62b4 <_get_i2cm_index+0x60>)
    629a:	2000      	movs	r0, #0
    629c:	4b06      	ldr	r3, [pc, #24]	; (62b8 <_get_i2cm_index+0x64>)
    629e:	4798      	blx	r3
	return -1;
    62a0:	f04f 33ff 	mov.w	r3, #4294967295
}
    62a4:	4618      	mov	r0, r3
    62a6:	3710      	adds	r7, #16
    62a8:	46bd      	mov	sp, r7
    62aa:	bd80      	pop	{r7, pc}
    62ac:	000061f9 	.word	0x000061f9
    62b0:	20000018 	.word	0x20000018
    62b4:	00012300 	.word	0x00012300
    62b8:	00003681 	.word	0x00003681

000062bc <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b082      	sub	sp, #8
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    62c4:	2103      	movs	r1, #3
    62c6:	6878      	ldr	r0, [r7, #4]
    62c8:	4b02      	ldr	r3, [pc, #8]	; (62d4 <_sercom_i2c_send_stop+0x18>)
    62ca:	4798      	blx	r3
}
    62cc:	bf00      	nop
    62ce:	3708      	adds	r7, #8
    62d0:	46bd      	mov	sp, r7
    62d2:	bd80      	pop	{r7, pc}
    62d4:	00005f75 	.word	0x00005f75

000062d8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    62d8:	b590      	push	{r4, r7, lr}
    62da:	b087      	sub	sp, #28
    62dc:	af00      	add	r7, sp, #0
    62de:	60f8      	str	r0, [r7, #12]
    62e0:	60b9      	str	r1, [r7, #8]
    62e2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    62e4:	68f8      	ldr	r0, [r7, #12]
    62e6:	4b7d      	ldr	r3, [pc, #500]	; (64dc <_sercom_i2c_sync_analyse_flags+0x204>)
    62e8:	4798      	blx	r3
    62ea:	4603      	mov	r3, r0
    62ec:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    62ee:	68f8      	ldr	r0, [r7, #12]
    62f0:	4b7b      	ldr	r3, [pc, #492]	; (64e0 <_sercom_i2c_sync_analyse_flags+0x208>)
    62f2:	4798      	blx	r3
    62f4:	4603      	mov	r3, r0
    62f6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    62f8:	68bb      	ldr	r3, [r7, #8]
    62fa:	f003 0301 	and.w	r3, r3, #1
    62fe:	2b00      	cmp	r3, #0
    6300:	f000 8095 	beq.w	642e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6304:	8a7b      	ldrh	r3, [r7, #18]
    6306:	f003 0302 	and.w	r3, r3, #2
    630a:	2b00      	cmp	r3, #0
    630c:	d01d      	beq.n	634a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    630e:	68f8      	ldr	r0, [r7, #12]
    6310:	4b74      	ldr	r3, [pc, #464]	; (64e4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6312:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	885b      	ldrh	r3, [r3, #2]
    6318:	b29b      	uxth	r3, r3
    631a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    631e:	b29a      	uxth	r2, r3
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	885b      	ldrh	r3, [r3, #2]
    6328:	b29b      	uxth	r3, r3
    632a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    632e:	b29a      	uxth	r2, r3
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6334:	8a7b      	ldrh	r3, [r7, #18]
    6336:	f003 0301 	and.w	r3, r3, #1
    633a:	2b00      	cmp	r3, #0
    633c:	d002      	beq.n	6344 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    633e:	f06f 0304 	mvn.w	r3, #4
    6342:	e0c6      	b.n	64d2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6344:	f06f 0303 	mvn.w	r3, #3
    6348:	e0c3      	b.n	64d2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    634a:	8a7b      	ldrh	r3, [r7, #18]
    634c:	f003 0304 	and.w	r3, r3, #4
    6350:	2b00      	cmp	r3, #0
    6352:	d01f      	beq.n	6394 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	685b      	ldr	r3, [r3, #4]
    6358:	2b00      	cmp	r3, #0
    635a:	dd07      	ble.n	636c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	885b      	ldrh	r3, [r3, #2]
    6360:	b29b      	uxth	r3, r3
    6362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6366:	b29a      	uxth	r2, r3
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	885b      	ldrh	r3, [r3, #2]
    6370:	b29b      	uxth	r3, r3
    6372:	b21b      	sxth	r3, r3
    6374:	2b00      	cmp	r3, #0
    6376:	da02      	bge.n	637e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6378:	68f8      	ldr	r0, [r7, #12]
    637a:	4b5b      	ldr	r3, [pc, #364]	; (64e8 <_sercom_i2c_sync_analyse_flags+0x210>)
    637c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	885b      	ldrh	r3, [r3, #2]
    6382:	b29b      	uxth	r3, r3
    6384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6388:	b29a      	uxth	r2, r3
    638a:	687b      	ldr	r3, [r7, #4]
    638c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    638e:	f06f 0301 	mvn.w	r3, #1
    6392:	e09e      	b.n	64d2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6394:	687b      	ldr	r3, [r7, #4]
    6396:	885b      	ldrh	r3, [r3, #2]
    6398:	b29b      	uxth	r3, r3
    639a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    639e:	2b00      	cmp	r3, #0
    63a0:	d01c      	beq.n	63dc <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	881b      	ldrh	r3, [r3, #0]
    63a6:	121b      	asrs	r3, r3, #8
    63a8:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    63aa:	f003 0406 	and.w	r4, r3, #6
    63ae:	68f8      	ldr	r0, [r7, #12]
    63b0:	4b4e      	ldr	r3, [pc, #312]	; (64ec <_sercom_i2c_sync_analyse_flags+0x214>)
    63b2:	4798      	blx	r3
    63b4:	4603      	mov	r3, r0
    63b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    63ba:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    63bc:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    63c0:	4619      	mov	r1, r3
    63c2:	68f8      	ldr	r0, [r7, #12]
    63c4:	4b4a      	ldr	r3, [pc, #296]	; (64f0 <_sercom_i2c_sync_analyse_flags+0x218>)
    63c6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	885b      	ldrh	r3, [r3, #2]
    63cc:	b29b      	uxth	r3, r3
    63ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    63d2:	b29a      	uxth	r2, r3
    63d4:	687b      	ldr	r3, [r7, #4]
    63d6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    63d8:	2300      	movs	r3, #0
    63da:	e07a      	b.n	64d2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	685b      	ldr	r3, [r3, #4]
    63e0:	2b00      	cmp	r3, #0
    63e2:	d111      	bne.n	6408 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    63e4:	687b      	ldr	r3, [r7, #4]
    63e6:	885b      	ldrh	r3, [r3, #2]
    63e8:	b29b      	uxth	r3, r3
    63ea:	b21b      	sxth	r3, r3
    63ec:	2b00      	cmp	r3, #0
    63ee:	da02      	bge.n	63f6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    63f0:	68f8      	ldr	r0, [r7, #12]
    63f2:	4b3d      	ldr	r3, [pc, #244]	; (64e8 <_sercom_i2c_sync_analyse_flags+0x210>)
    63f4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	885b      	ldrh	r3, [r3, #2]
    63fa:	b29b      	uxth	r3, r3
    63fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6400:	b29a      	uxth	r2, r3
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	805a      	strh	r2, [r3, #2]
    6406:	e010      	b.n	642a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	689b      	ldr	r3, [r3, #8]
    640c:	781b      	ldrb	r3, [r3, #0]
    640e:	4619      	mov	r1, r3
    6410:	68f8      	ldr	r0, [r7, #12]
    6412:	4b38      	ldr	r3, [pc, #224]	; (64f4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6414:	4798      	blx	r3
				msg->buffer++;
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	689b      	ldr	r3, [r3, #8]
    641a:	1c5a      	adds	r2, r3, #1
    641c:	687b      	ldr	r3, [r7, #4]
    641e:	609a      	str	r2, [r3, #8]
				msg->len--;
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	685b      	ldr	r3, [r3, #4]
    6424:	1e5a      	subs	r2, r3, #1
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    642a:	2300      	movs	r3, #0
    642c:	e051      	b.n	64d2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    642e:	68bb      	ldr	r3, [r7, #8]
    6430:	f003 0302 	and.w	r3, r3, #2
    6434:	2b00      	cmp	r3, #0
    6436:	d04b      	beq.n	64d0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	685b      	ldr	r3, [r3, #4]
    643c:	2b00      	cmp	r3, #0
    643e:	d041      	beq.n	64c4 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6440:	8a7b      	ldrh	r3, [r7, #18]
    6442:	f003 0304 	and.w	r3, r3, #4
    6446:	2b00      	cmp	r3, #0
    6448:	d13c      	bne.n	64c4 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    644a:	687b      	ldr	r3, [r7, #4]
    644c:	685b      	ldr	r3, [r3, #4]
    644e:	1e5a      	subs	r2, r3, #1
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	685b      	ldr	r3, [r3, #4]
    6458:	2b00      	cmp	r3, #0
    645a:	d102      	bne.n	6462 <_sercom_i2c_sync_analyse_flags+0x18a>
    645c:	697b      	ldr	r3, [r7, #20]
    645e:	2b00      	cmp	r3, #0
    6460:	d006      	beq.n	6470 <_sercom_i2c_sync_analyse_flags+0x198>
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	685b      	ldr	r3, [r3, #4]
    6466:	2b01      	cmp	r3, #1
    6468:	d105      	bne.n	6476 <_sercom_i2c_sync_analyse_flags+0x19e>
    646a:	697b      	ldr	r3, [r7, #20]
    646c:	2b00      	cmp	r3, #0
    646e:	d002      	beq.n	6476 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6470:	68f8      	ldr	r0, [r7, #12]
    6472:	4b21      	ldr	r3, [pc, #132]	; (64f8 <_sercom_i2c_sync_analyse_flags+0x220>)
    6474:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	685b      	ldr	r3, [r3, #4]
    647a:	2b00      	cmp	r3, #0
    647c:	d113      	bne.n	64a6 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	885b      	ldrh	r3, [r3, #2]
    6482:	b29b      	uxth	r3, r3
    6484:	b21b      	sxth	r3, r3
    6486:	2b00      	cmp	r3, #0
    6488:	da05      	bge.n	6496 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    648a:	68f8      	ldr	r0, [r7, #12]
    648c:	4b1b      	ldr	r3, [pc, #108]	; (64fc <_sercom_i2c_sync_analyse_flags+0x224>)
    648e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6490:	68f8      	ldr	r0, [r7, #12]
    6492:	4b15      	ldr	r3, [pc, #84]	; (64e8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6494:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	885b      	ldrh	r3, [r3, #2]
    649a:	b29b      	uxth	r3, r3
    649c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64a0:	b29a      	uxth	r2, r3
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	689c      	ldr	r4, [r3, #8]
    64aa:	1c62      	adds	r2, r4, #1
    64ac:	687b      	ldr	r3, [r7, #4]
    64ae:	609a      	str	r2, [r3, #8]
    64b0:	68f8      	ldr	r0, [r7, #12]
    64b2:	4b13      	ldr	r3, [pc, #76]	; (6500 <_sercom_i2c_sync_analyse_flags+0x228>)
    64b4:	4798      	blx	r3
    64b6:	4603      	mov	r3, r0
    64b8:	b2db      	uxtb	r3, r3
    64ba:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    64bc:	68f8      	ldr	r0, [r7, #12]
    64be:	4b11      	ldr	r3, [pc, #68]	; (6504 <_sercom_i2c_sync_analyse_flags+0x22c>)
    64c0:	4798      	blx	r3
    64c2:	e005      	b.n	64d0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    64c4:	68f8      	ldr	r0, [r7, #12]
    64c6:	4b0f      	ldr	r3, [pc, #60]	; (6504 <_sercom_i2c_sync_analyse_flags+0x22c>)
    64c8:	4798      	blx	r3
			return I2C_NACK;
    64ca:	f06f 0301 	mvn.w	r3, #1
    64ce:	e000      	b.n	64d2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    64d0:	2300      	movs	r3, #0
}
    64d2:	4618      	mov	r0, r3
    64d4:	371c      	adds	r7, #28
    64d6:	46bd      	mov	sp, r7
    64d8:	bd90      	pop	{r4, r7, pc}
    64da:	bf00      	nop
    64dc:	00005d9d 	.word	0x00005d9d
    64e0:	000061ad 	.word	0x000061ad
    64e4:	00005c9d 	.word	0x00005c9d
    64e8:	000062bd 	.word	0x000062bd
    64ec:	0000608d 	.word	0x0000608d
    64f0:	00006069 	.word	0x00006069
    64f4:	000060c9 	.word	0x000060c9
    64f8:	00005f25 	.word	0x00005f25
    64fc:	00005efd 	.word	0x00005efd
    6500:	000060ed 	.word	0x000060ed
    6504:	00005cb7 	.word	0x00005cb7

00006508 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6508:	b580      	push	{r7, lr}
    650a:	b082      	sub	sp, #8
    650c:	af00      	add	r7, sp, #0
    650e:	6078      	str	r0, [r7, #4]
    6510:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	2b00      	cmp	r3, #0
    6516:	bf14      	ite	ne
    6518:	2301      	movne	r3, #1
    651a:	2300      	moveq	r3, #0
    651c:	b2db      	uxtb	r3, r3
    651e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6522:	4908      	ldr	r1, [pc, #32]	; (6544 <_i2c_m_sync_init+0x3c>)
    6524:	4618      	mov	r0, r3
    6526:	4b08      	ldr	r3, [pc, #32]	; (6548 <_i2c_m_sync_init+0x40>)
    6528:	4798      	blx	r3

	i2c_dev->hw = hw;
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	683a      	ldr	r2, [r7, #0]
    652e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	6839      	ldr	r1, [r7, #0]
    6534:	4618      	mov	r0, r3
    6536:	4b05      	ldr	r3, [pc, #20]	; (654c <_i2c_m_sync_init+0x44>)
    6538:	4798      	blx	r3
    653a:	4603      	mov	r3, r0
}
    653c:	4618      	mov	r0, r3
    653e:	3708      	adds	r7, #8
    6540:	46bd      	mov	sp, r7
    6542:	bd80      	pop	{r7, pc}
    6544:	00012300 	.word	0x00012300
    6548:	00003681 	.word	0x00003681
    654c:	00006921 	.word	0x00006921

00006550 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6550:	b580      	push	{r7, lr}
    6552:	b082      	sub	sp, #8
    6554:	af00      	add	r7, sp, #0
    6556:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	2b00      	cmp	r3, #0
    655c:	bf14      	ite	ne
    655e:	2301      	movne	r3, #1
    6560:	2300      	moveq	r3, #0
    6562:	b2db      	uxtb	r3, r3
    6564:	f240 5235 	movw	r2, #1333	; 0x535
    6568:	4906      	ldr	r1, [pc, #24]	; (6584 <_i2c_m_sync_enable+0x34>)
    656a:	4618      	mov	r0, r3
    656c:	4b06      	ldr	r3, [pc, #24]	; (6588 <_i2c_m_sync_enable+0x38>)
    656e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	691b      	ldr	r3, [r3, #16]
    6574:	4618      	mov	r0, r3
    6576:	4b05      	ldr	r3, [pc, #20]	; (658c <_i2c_m_sync_enable+0x3c>)
    6578:	4798      	blx	r3
    657a:	4603      	mov	r3, r0
}
    657c:	4618      	mov	r0, r3
    657e:	3708      	adds	r7, #8
    6580:	46bd      	mov	sp, r7
    6582:	bd80      	pop	{r7, pc}
    6584:	00012300 	.word	0x00012300
    6588:	00003681 	.word	0x00003681
    658c:	00006895 	.word	0x00006895

00006590 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    6590:	b580      	push	{r7, lr}
    6592:	b084      	sub	sp, #16
    6594:	af00      	add	r7, sp, #0
    6596:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    6598:	687b      	ldr	r3, [r7, #4]
    659a:	691b      	ldr	r3, [r3, #16]
    659c:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	2b00      	cmp	r3, #0
    65a2:	bf14      	ite	ne
    65a4:	2301      	movne	r3, #1
    65a6:	2300      	moveq	r3, #0
    65a8:	b2db      	uxtb	r3, r3
    65aa:	f240 5243 	movw	r2, #1347	; 0x543
    65ae:	490c      	ldr	r1, [pc, #48]	; (65e0 <_i2c_m_sync_disable+0x50>)
    65b0:	4618      	mov	r0, r3
    65b2:	4b0c      	ldr	r3, [pc, #48]	; (65e4 <_i2c_m_sync_disable+0x54>)
    65b4:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    65b6:	687b      	ldr	r3, [r7, #4]
    65b8:	691b      	ldr	r3, [r3, #16]
    65ba:	2b00      	cmp	r3, #0
    65bc:	bf14      	ite	ne
    65be:	2301      	movne	r3, #1
    65c0:	2300      	moveq	r3, #0
    65c2:	b2db      	uxtb	r3, r3
    65c4:	f240 5244 	movw	r2, #1348	; 0x544
    65c8:	4905      	ldr	r1, [pc, #20]	; (65e0 <_i2c_m_sync_disable+0x50>)
    65ca:	4618      	mov	r0, r3
    65cc:	4b05      	ldr	r3, [pc, #20]	; (65e4 <_i2c_m_sync_disable+0x54>)
    65ce:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    65d0:	68f8      	ldr	r0, [r7, #12]
    65d2:	4b05      	ldr	r3, [pc, #20]	; (65e8 <_i2c_m_sync_disable+0x58>)
    65d4:	4798      	blx	r3

	return ERR_NONE;
    65d6:	2300      	movs	r3, #0
}
    65d8:	4618      	mov	r0, r3
    65da:	3710      	adds	r7, #16
    65dc:	46bd      	mov	sp, r7
    65de:	bd80      	pop	{r7, pc}
    65e0:	00012300 	.word	0x00012300
    65e4:	00003681 	.word	0x00003681
    65e8:	00005d75 	.word	0x00005d75

000065ec <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    65ec:	b580      	push	{r7, lr}
    65ee:	b084      	sub	sp, #16
    65f0:	af00      	add	r7, sp, #0
    65f2:	6078      	str	r0, [r7, #4]
    65f4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    65f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    65fa:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	691b      	ldr	r3, [r3, #16]
    6600:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6602:	68b8      	ldr	r0, [r7, #8]
    6604:	4b0f      	ldr	r3, [pc, #60]	; (6644 <_sercom_i2c_sync_wait_bus+0x58>)
    6606:	4798      	blx	r3
    6608:	4603      	mov	r3, r0
    660a:	461a      	mov	r2, r3
    660c:	683b      	ldr	r3, [r7, #0]
    660e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6610:	68fb      	ldr	r3, [r7, #12]
    6612:	1e5a      	subs	r2, r3, #1
    6614:	60fa      	str	r2, [r7, #12]
    6616:	2b00      	cmp	r3, #0
    6618:	d102      	bne.n	6620 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    661a:	f06f 0304 	mvn.w	r3, #4
    661e:	e00c      	b.n	663a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6620:	683b      	ldr	r3, [r7, #0]
    6622:	681b      	ldr	r3, [r3, #0]
    6624:	f003 0301 	and.w	r3, r3, #1
    6628:	2b00      	cmp	r3, #0
    662a:	d105      	bne.n	6638 <_sercom_i2c_sync_wait_bus+0x4c>
    662c:	683b      	ldr	r3, [r7, #0]
    662e:	681b      	ldr	r3, [r3, #0]
    6630:	f003 0302 	and.w	r3, r3, #2
    6634:	2b00      	cmp	r3, #0
    6636:	d0e4      	beq.n	6602 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6638:	2300      	movs	r3, #0
}
    663a:	4618      	mov	r0, r3
    663c:	3710      	adds	r7, #16
    663e:	46bd      	mov	sp, r7
    6640:	bd80      	pop	{r7, pc}
    6642:	bf00      	nop
    6644:	00005cd1 	.word	0x00005cd1

00006648 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6648:	b590      	push	{r4, r7, lr}
    664a:	b087      	sub	sp, #28
    664c:	af00      	add	r7, sp, #0
    664e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	691b      	ldr	r3, [r3, #16]
    6654:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6656:	687b      	ldr	r3, [r7, #4]
    6658:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    665a:	6978      	ldr	r0, [r7, #20]
    665c:	4b39      	ldr	r3, [pc, #228]	; (6744 <_sercom_i2c_sync_send_address+0xfc>)
    665e:	4798      	blx	r3
    6660:	4603      	mov	r3, r0
    6662:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	2b00      	cmp	r3, #0
    6668:	bf14      	ite	ne
    666a:	2301      	movne	r3, #1
    666c:	2300      	moveq	r3, #0
    666e:	b2db      	uxtb	r3, r3
    6670:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6674:	4934      	ldr	r1, [pc, #208]	; (6748 <_sercom_i2c_sync_send_address+0x100>)
    6676:	4618      	mov	r0, r3
    6678:	4b34      	ldr	r3, [pc, #208]	; (674c <_sercom_i2c_sync_send_address+0x104>)
    667a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    667c:	693b      	ldr	r3, [r7, #16]
    667e:	685b      	ldr	r3, [r3, #4]
    6680:	2b01      	cmp	r3, #1
    6682:	d106      	bne.n	6692 <_sercom_i2c_sync_send_address+0x4a>
    6684:	68fb      	ldr	r3, [r7, #12]
    6686:	2b00      	cmp	r3, #0
    6688:	d003      	beq.n	6692 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    668a:	6978      	ldr	r0, [r7, #20]
    668c:	4b30      	ldr	r3, [pc, #192]	; (6750 <_sercom_i2c_sync_send_address+0x108>)
    668e:	4798      	blx	r3
    6690:	e002      	b.n	6698 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6692:	6978      	ldr	r0, [r7, #20]
    6694:	4b2f      	ldr	r3, [pc, #188]	; (6754 <_sercom_i2c_sync_send_address+0x10c>)
    6696:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6698:	693b      	ldr	r3, [r7, #16]
    669a:	881b      	ldrh	r3, [r3, #0]
    669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    66a0:	2b00      	cmp	r3, #0
    66a2:	d022      	beq.n	66ea <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    66a4:	693b      	ldr	r3, [r7, #16]
    66a6:	885b      	ldrh	r3, [r3, #2]
    66a8:	b29b      	uxth	r3, r3
    66aa:	f003 0301 	and.w	r3, r3, #1
    66ae:	2b00      	cmp	r3, #0
    66b0:	d007      	beq.n	66c2 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    66b2:	693b      	ldr	r3, [r7, #16]
    66b4:	885b      	ldrh	r3, [r3, #2]
    66b6:	b29b      	uxth	r3, r3
    66b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    66bc:	b29a      	uxth	r2, r3
    66be:	693b      	ldr	r3, [r7, #16]
    66c0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    66c2:	693b      	ldr	r3, [r7, #16]
    66c4:	881b      	ldrh	r3, [r3, #0]
    66c6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    66c8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    66cc:	401c      	ands	r4, r3
    66ce:	6978      	ldr	r0, [r7, #20]
    66d0:	4b21      	ldr	r3, [pc, #132]	; (6758 <_sercom_i2c_sync_send_address+0x110>)
    66d2:	4798      	blx	r3
    66d4:	4603      	mov	r3, r0
    66d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    66da:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    66dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    66e0:	4619      	mov	r1, r3
    66e2:	6978      	ldr	r0, [r7, #20]
    66e4:	4b1d      	ldr	r3, [pc, #116]	; (675c <_sercom_i2c_sync_send_address+0x114>)
    66e6:	4798      	blx	r3
    66e8:	e01a      	b.n	6720 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    66ea:	693b      	ldr	r3, [r7, #16]
    66ec:	881b      	ldrh	r3, [r3, #0]
    66ee:	005b      	lsls	r3, r3, #1
    66f0:	b2db      	uxtb	r3, r3
    66f2:	693a      	ldr	r2, [r7, #16]
    66f4:	8852      	ldrh	r2, [r2, #2]
    66f6:	b292      	uxth	r2, r2
    66f8:	f002 0201 	and.w	r2, r2, #1
    66fc:	2a00      	cmp	r2, #0
    66fe:	bf14      	ite	ne
    6700:	2201      	movne	r2, #1
    6702:	2200      	moveq	r2, #0
    6704:	b2d2      	uxtb	r2, r2
    6706:	4313      	orrs	r3, r2
    6708:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    670a:	6978      	ldr	r0, [r7, #20]
    670c:	4b12      	ldr	r3, [pc, #72]	; (6758 <_sercom_i2c_sync_send_address+0x110>)
    670e:	4798      	blx	r3
    6710:	4603      	mov	r3, r0
    6712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6716:	4323      	orrs	r3, r4
    6718:	4619      	mov	r1, r3
    671a:	6978      	ldr	r0, [r7, #20]
    671c:	4b0f      	ldr	r3, [pc, #60]	; (675c <_sercom_i2c_sync_send_address+0x114>)
    671e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6720:	f107 0308 	add.w	r3, r7, #8
    6724:	4619      	mov	r1, r3
    6726:	6878      	ldr	r0, [r7, #4]
    6728:	4b0d      	ldr	r3, [pc, #52]	; (6760 <_sercom_i2c_sync_send_address+0x118>)
    672a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    672c:	68bb      	ldr	r3, [r7, #8]
    672e:	693a      	ldr	r2, [r7, #16]
    6730:	4619      	mov	r1, r3
    6732:	6978      	ldr	r0, [r7, #20]
    6734:	4b0b      	ldr	r3, [pc, #44]	; (6764 <_sercom_i2c_sync_send_address+0x11c>)
    6736:	4798      	blx	r3
    6738:	4603      	mov	r3, r0
}
    673a:	4618      	mov	r0, r3
    673c:	371c      	adds	r7, #28
    673e:	46bd      	mov	sp, r7
    6740:	bd90      	pop	{r4, r7, pc}
    6742:	bf00      	nop
    6744:	00005d9d 	.word	0x00005d9d
    6748:	00012300 	.word	0x00012300
    674c:	00003681 	.word	0x00003681
    6750:	00005f25 	.word	0x00005f25
    6754:	00005f4d 	.word	0x00005f4d
    6758:	0000608d 	.word	0x0000608d
    675c:	00006069 	.word	0x00006069
    6760:	000065ed 	.word	0x000065ed
    6764:	000062d9 	.word	0x000062d9

00006768 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6768:	b580      	push	{r7, lr}
    676a:	b086      	sub	sp, #24
    676c:	af00      	add	r7, sp, #0
    676e:	6078      	str	r0, [r7, #4]
    6770:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	691b      	ldr	r3, [r3, #16]
    6776:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	2b00      	cmp	r3, #0
    677c:	bf14      	ite	ne
    677e:	2301      	movne	r3, #1
    6780:	2300      	moveq	r3, #0
    6782:	b2db      	uxtb	r3, r3
    6784:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6788:	493b      	ldr	r1, [pc, #236]	; (6878 <_i2c_m_sync_transfer+0x110>)
    678a:	4618      	mov	r0, r3
    678c:	4b3b      	ldr	r3, [pc, #236]	; (687c <_i2c_m_sync_transfer+0x114>)
    678e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	691b      	ldr	r3, [r3, #16]
    6794:	2b00      	cmp	r3, #0
    6796:	bf14      	ite	ne
    6798:	2301      	movne	r3, #1
    679a:	2300      	moveq	r3, #0
    679c:	b2db      	uxtb	r3, r3
    679e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    67a2:	4935      	ldr	r1, [pc, #212]	; (6878 <_i2c_m_sync_transfer+0x110>)
    67a4:	4618      	mov	r0, r3
    67a6:	4b35      	ldr	r3, [pc, #212]	; (687c <_i2c_m_sync_transfer+0x114>)
    67a8:	4798      	blx	r3
	ASSERT(msg);
    67aa:	683b      	ldr	r3, [r7, #0]
    67ac:	2b00      	cmp	r3, #0
    67ae:	bf14      	ite	ne
    67b0:	2301      	movne	r3, #1
    67b2:	2300      	moveq	r3, #0
    67b4:	b2db      	uxtb	r3, r3
    67b6:	f240 52d2 	movw	r2, #1490	; 0x5d2
    67ba:	492f      	ldr	r1, [pc, #188]	; (6878 <_i2c_m_sync_transfer+0x110>)
    67bc:	4618      	mov	r0, r3
    67be:	4b2f      	ldr	r3, [pc, #188]	; (687c <_i2c_m_sync_transfer+0x114>)
    67c0:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	885b      	ldrh	r3, [r3, #2]
    67c6:	b29b      	uxth	r3, r3
    67c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    67cc:	2b00      	cmp	r3, #0
    67ce:	d002      	beq.n	67d6 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    67d0:	f06f 0305 	mvn.w	r3, #5
    67d4:	e04c      	b.n	6870 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    67d6:	683b      	ldr	r3, [r7, #0]
    67d8:	885b      	ldrh	r3, [r3, #2]
    67da:	b29b      	uxth	r3, r3
    67dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    67e0:	b29a      	uxth	r2, r3
    67e2:	683b      	ldr	r3, [r7, #0]
    67e4:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    67e6:	687b      	ldr	r3, [r7, #4]
    67e8:	683a      	ldr	r2, [r7, #0]
    67ea:	ca07      	ldmia	r2, {r0, r1, r2}
    67ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    67f0:	6938      	ldr	r0, [r7, #16]
    67f2:	4b23      	ldr	r3, [pc, #140]	; (6880 <_i2c_m_sync_transfer+0x118>)
    67f4:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    67f6:	6878      	ldr	r0, [r7, #4]
    67f8:	4b22      	ldr	r3, [pc, #136]	; (6884 <_i2c_m_sync_transfer+0x11c>)
    67fa:	4798      	blx	r3
    67fc:	6178      	str	r0, [r7, #20]

	if (ret) {
    67fe:	697b      	ldr	r3, [r7, #20]
    6800:	2b00      	cmp	r3, #0
    6802:	d02d      	beq.n	6860 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	885b      	ldrh	r3, [r3, #2]
    6808:	b29b      	uxth	r3, r3
    680a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    680e:	b29a      	uxth	r2, r3
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	805a      	strh	r2, [r3, #2]

		return ret;
    6814:	697b      	ldr	r3, [r7, #20]
    6816:	e02b      	b.n	6870 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6818:	f107 030c 	add.w	r3, r7, #12
    681c:	4619      	mov	r1, r3
    681e:	6878      	ldr	r0, [r7, #4]
    6820:	4b19      	ldr	r3, [pc, #100]	; (6888 <_i2c_m_sync_transfer+0x120>)
    6822:	4798      	blx	r3
    6824:	6178      	str	r0, [r7, #20]

		if (ret) {
    6826:	697b      	ldr	r3, [r7, #20]
    6828:	2b00      	cmp	r3, #0
    682a:	d012      	beq.n	6852 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    682c:	683b      	ldr	r3, [r7, #0]
    682e:	885b      	ldrh	r3, [r3, #2]
    6830:	b29b      	uxth	r3, r3
    6832:	b21b      	sxth	r3, r3
    6834:	2b00      	cmp	r3, #0
    6836:	da02      	bge.n	683e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6838:	6938      	ldr	r0, [r7, #16]
    683a:	4b14      	ldr	r3, [pc, #80]	; (688c <_i2c_m_sync_transfer+0x124>)
    683c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	885b      	ldrh	r3, [r3, #2]
    6842:	b29b      	uxth	r3, r3
    6844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6848:	b29a      	uxth	r2, r3
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	805a      	strh	r2, [r3, #2]

			return ret;
    684e:	697b      	ldr	r3, [r7, #20]
    6850:	e00e      	b.n	6870 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6852:	68fb      	ldr	r3, [r7, #12]
    6854:	687a      	ldr	r2, [r7, #4]
    6856:	4619      	mov	r1, r3
    6858:	6938      	ldr	r0, [r7, #16]
    685a:	4b0d      	ldr	r3, [pc, #52]	; (6890 <_i2c_m_sync_transfer+0x128>)
    685c:	4798      	blx	r3
    685e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	885b      	ldrh	r3, [r3, #2]
    6864:	b29b      	uxth	r3, r3
    6866:	f403 7380 	and.w	r3, r3, #256	; 0x100
    686a:	2b00      	cmp	r3, #0
    686c:	d1d4      	bne.n	6818 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    686e:	697b      	ldr	r3, [r7, #20]
}
    6870:	4618      	mov	r0, r3
    6872:	3718      	adds	r7, #24
    6874:	46bd      	mov	sp, r7
    6876:	bd80      	pop	{r7, pc}
    6878:	00012300 	.word	0x00012300
    687c:	00003681 	.word	0x00003681
    6880:	00005ed5 	.word	0x00005ed5
    6884:	00006649 	.word	0x00006649
    6888:	000065ed 	.word	0x000065ed
    688c:	000062bd 	.word	0x000062bd
    6890:	000062d9 	.word	0x000062d9

00006894 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6894:	b580      	push	{r7, lr}
    6896:	b084      	sub	sp, #16
    6898:	af00      	add	r7, sp, #0
    689a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    689c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    68a0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    68a2:	2304      	movs	r3, #4
    68a4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	2b00      	cmp	r3, #0
    68aa:	bf14      	ite	ne
    68ac:	2301      	movne	r3, #1
    68ae:	2300      	moveq	r3, #0
    68b0:	b2db      	uxtb	r3, r3
    68b2:	f240 6205 	movw	r2, #1541	; 0x605
    68b6:	4915      	ldr	r1, [pc, #84]	; (690c <_i2c_m_enable_implementation+0x78>)
    68b8:	4618      	mov	r0, r3
    68ba:	4b15      	ldr	r3, [pc, #84]	; (6910 <_i2c_m_enable_implementation+0x7c>)
    68bc:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    68be:	6878      	ldr	r0, [r7, #4]
    68c0:	4b14      	ldr	r3, [pc, #80]	; (6914 <_i2c_m_enable_implementation+0x80>)
    68c2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    68c4:	e016      	b.n	68f4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    68c6:	68fb      	ldr	r3, [r7, #12]
    68c8:	3b01      	subs	r3, #1
    68ca:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    68cc:	68fb      	ldr	r3, [r7, #12]
    68ce:	2b00      	cmp	r3, #0
    68d0:	dc10      	bgt.n	68f4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    68d2:	68bb      	ldr	r3, [r7, #8]
    68d4:	3b01      	subs	r3, #1
    68d6:	60bb      	str	r3, [r7, #8]
    68d8:	68bb      	ldr	r3, [r7, #8]
    68da:	2b00      	cmp	r3, #0
    68dc:	d007      	beq.n	68ee <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    68de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    68e2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    68e4:	2110      	movs	r1, #16
    68e6:	6878      	ldr	r0, [r7, #4]
    68e8:	4b0b      	ldr	r3, [pc, #44]	; (6918 <_i2c_m_enable_implementation+0x84>)
    68ea:	4798      	blx	r3
    68ec:	e002      	b.n	68f4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    68ee:	f06f 0305 	mvn.w	r3, #5
    68f2:	e006      	b.n	6902 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    68f4:	6878      	ldr	r0, [r7, #4]
    68f6:	4b09      	ldr	r3, [pc, #36]	; (691c <_i2c_m_enable_implementation+0x88>)
    68f8:	4798      	blx	r3
    68fa:	4603      	mov	r3, r0
    68fc:	2b01      	cmp	r3, #1
    68fe:	d1e2      	bne.n	68c6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6900:	2300      	movs	r3, #0
}
    6902:	4618      	mov	r0, r3
    6904:	3710      	adds	r7, #16
    6906:	46bd      	mov	sp, r7
    6908:	bd80      	pop	{r7, pc}
    690a:	bf00      	nop
    690c:	00012300 	.word	0x00012300
    6910:	00003681 	.word	0x00003681
    6914:	00005d4d 	.word	0x00005d4d
    6918:	000061d1 	.word	0x000061d1
    691c:	00006181 	.word	0x00006181

00006920 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6920:	b580      	push	{r7, lr}
    6922:	b084      	sub	sp, #16
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
    6928:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    692a:	6838      	ldr	r0, [r7, #0]
    692c:	4b42      	ldr	r3, [pc, #264]	; (6a38 <_i2c_m_sync_init_impl+0x118>)
    692e:	4798      	blx	r3
    6930:	4603      	mov	r3, r0
    6932:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6934:	2101      	movs	r1, #1
    6936:	6838      	ldr	r0, [r7, #0]
    6938:	4b40      	ldr	r3, [pc, #256]	; (6a3c <_i2c_m_sync_init_impl+0x11c>)
    693a:	4798      	blx	r3
    693c:	4603      	mov	r3, r0
    693e:	f083 0301 	eor.w	r3, r3, #1
    6942:	b2db      	uxtb	r3, r3
    6944:	2b00      	cmp	r3, #0
    6946:	d020      	beq.n	698a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6948:	7bfa      	ldrb	r2, [r7, #15]
    694a:	493d      	ldr	r1, [pc, #244]	; (6a40 <_i2c_m_sync_init_impl+0x120>)
    694c:	4613      	mov	r3, r2
    694e:	005b      	lsls	r3, r3, #1
    6950:	4413      	add	r3, r2
    6952:	00db      	lsls	r3, r3, #3
    6954:	440b      	add	r3, r1
    6956:	3304      	adds	r3, #4
    6958:	681b      	ldr	r3, [r3, #0]
    695a:	f003 031c 	and.w	r3, r3, #28
    695e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6960:	2102      	movs	r1, #2
    6962:	6838      	ldr	r0, [r7, #0]
    6964:	4b37      	ldr	r3, [pc, #220]	; (6a44 <_i2c_m_sync_init_impl+0x124>)
    6966:	4798      	blx	r3
    6968:	4603      	mov	r3, r0
    696a:	2b00      	cmp	r3, #0
    696c:	d006      	beq.n	697c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    696e:	6838      	ldr	r0, [r7, #0]
    6970:	4b35      	ldr	r3, [pc, #212]	; (6a48 <_i2c_m_sync_init_impl+0x128>)
    6972:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6974:	2102      	movs	r1, #2
    6976:	6838      	ldr	r0, [r7, #0]
    6978:	4b34      	ldr	r3, [pc, #208]	; (6a4c <_i2c_m_sync_init_impl+0x12c>)
    697a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    697c:	68bb      	ldr	r3, [r7, #8]
    697e:	f043 0301 	orr.w	r3, r3, #1
    6982:	4619      	mov	r1, r3
    6984:	6838      	ldr	r0, [r7, #0]
    6986:	4b32      	ldr	r3, [pc, #200]	; (6a50 <_i2c_m_sync_init_impl+0x130>)
    6988:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    698a:	2101      	movs	r1, #1
    698c:	6838      	ldr	r0, [r7, #0]
    698e:	4b2f      	ldr	r3, [pc, #188]	; (6a4c <_i2c_m_sync_init_impl+0x12c>)
    6990:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6992:	7bfa      	ldrb	r2, [r7, #15]
    6994:	492a      	ldr	r1, [pc, #168]	; (6a40 <_i2c_m_sync_init_impl+0x120>)
    6996:	4613      	mov	r3, r2
    6998:	005b      	lsls	r3, r3, #1
    699a:	4413      	add	r3, r2
    699c:	00db      	lsls	r3, r3, #3
    699e:	440b      	add	r3, r1
    69a0:	3304      	adds	r3, #4
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	4619      	mov	r1, r3
    69a6:	6838      	ldr	r0, [r7, #0]
    69a8:	4b29      	ldr	r3, [pc, #164]	; (6a50 <_i2c_m_sync_init_impl+0x130>)
    69aa:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    69ac:	7bfa      	ldrb	r2, [r7, #15]
    69ae:	4924      	ldr	r1, [pc, #144]	; (6a40 <_i2c_m_sync_init_impl+0x120>)
    69b0:	4613      	mov	r3, r2
    69b2:	005b      	lsls	r3, r3, #1
    69b4:	4413      	add	r3, r2
    69b6:	00db      	lsls	r3, r3, #3
    69b8:	440b      	add	r3, r1
    69ba:	3308      	adds	r3, #8
    69bc:	681b      	ldr	r3, [r3, #0]
    69be:	4619      	mov	r1, r3
    69c0:	6838      	ldr	r0, [r7, #0]
    69c2:	4b24      	ldr	r3, [pc, #144]	; (6a54 <_i2c_m_sync_init_impl+0x134>)
    69c4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    69c6:	7bfa      	ldrb	r2, [r7, #15]
    69c8:	491d      	ldr	r1, [pc, #116]	; (6a40 <_i2c_m_sync_init_impl+0x120>)
    69ca:	4613      	mov	r3, r2
    69cc:	005b      	lsls	r3, r3, #1
    69ce:	4413      	add	r3, r2
    69d0:	00db      	lsls	r3, r3, #3
    69d2:	440b      	add	r3, r1
    69d4:	330c      	adds	r3, #12
    69d6:	681b      	ldr	r3, [r3, #0]
    69d8:	4619      	mov	r1, r3
    69da:	6838      	ldr	r0, [r7, #0]
    69dc:	4b1e      	ldr	r3, [pc, #120]	; (6a58 <_i2c_m_sync_init_impl+0x138>)
    69de:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    69e0:	7bfa      	ldrb	r2, [r7, #15]
    69e2:	4917      	ldr	r1, [pc, #92]	; (6a40 <_i2c_m_sync_init_impl+0x120>)
    69e4:	4613      	mov	r3, r2
    69e6:	005b      	lsls	r3, r3, #1
    69e8:	4413      	add	r3, r2
    69ea:	00db      	lsls	r3, r3, #3
    69ec:	440b      	add	r3, r1
    69ee:	3304      	adds	r3, #4
    69f0:	681b      	ldr	r3, [r3, #0]
    69f2:	0e1b      	lsrs	r3, r3, #24
    69f4:	b29b      	uxth	r3, r3
    69f6:	f003 0303 	and.w	r3, r3, #3
    69fa:	b29a      	uxth	r2, r3
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	899b      	ldrh	r3, [r3, #12]
    6a04:	2b01      	cmp	r3, #1
    6a06:	bf8c      	ite	hi
    6a08:	2301      	movhi	r3, #1
    6a0a:	2300      	movls	r3, #0
    6a0c:	b2db      	uxtb	r3, r3
    6a0e:	4619      	mov	r1, r3
    6a10:	6838      	ldr	r0, [r7, #0]
    6a12:	4b12      	ldr	r3, [pc, #72]	; (6a5c <_i2c_m_sync_init_impl+0x13c>)
    6a14:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6a16:	7bfa      	ldrb	r2, [r7, #15]
    6a18:	4909      	ldr	r1, [pc, #36]	; (6a40 <_i2c_m_sync_init_impl+0x120>)
    6a1a:	4613      	mov	r3, r2
    6a1c:	005b      	lsls	r3, r3, #1
    6a1e:	4413      	add	r3, r2
    6a20:	00db      	lsls	r3, r3, #3
    6a22:	440b      	add	r3, r1
    6a24:	3312      	adds	r3, #18
    6a26:	881a      	ldrh	r2, [r3, #0]
    6a28:	687b      	ldr	r3, [r7, #4]
    6a2a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6a2c:	2300      	movs	r3, #0
}
    6a2e:	4618      	mov	r0, r3
    6a30:	3710      	adds	r7, #16
    6a32:	46bd      	mov	sp, r7
    6a34:	bd80      	pop	{r7, pc}
    6a36:	bf00      	nop
    6a38:	00006255 	.word	0x00006255
    6a3c:	00005c29 	.word	0x00005c29
    6a40:	20000018 	.word	0x20000018
    6a44:	00005dcd 	.word	0x00005dcd
    6a48:	00005d75 	.word	0x00005d75
    6a4c:	00005c05 	.word	0x00005c05
    6a50:	00005dfd 	.word	0x00005dfd
    6a54:	00005fa5 	.word	0x00005fa5
    6a58:	00005fed 	.word	0x00005fed
    6a5c:	00006029 	.word	0x00006029

00006a60 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b082      	sub	sp, #8
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
    6a68:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d004      	beq.n	6a7a <_spi_load_regs_master+0x1a>
    6a70:	683b      	ldr	r3, [r7, #0]
    6a72:	2b00      	cmp	r3, #0
    6a74:	d001      	beq.n	6a7a <_spi_load_regs_master+0x1a>
    6a76:	2301      	movs	r3, #1
    6a78:	e000      	b.n	6a7c <_spi_load_regs_master+0x1c>
    6a7a:	2300      	movs	r3, #0
    6a7c:	f003 0301 	and.w	r3, r3, #1
    6a80:	b2db      	uxtb	r3, r3
    6a82:	f640 1209 	movw	r2, #2313	; 0x909
    6a86:	4915      	ldr	r1, [pc, #84]	; (6adc <_spi_load_regs_master+0x7c>)
    6a88:	4618      	mov	r0, r3
    6a8a:	4b15      	ldr	r3, [pc, #84]	; (6ae0 <_spi_load_regs_master+0x80>)
    6a8c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6a8e:	683b      	ldr	r3, [r7, #0]
    6a90:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6a92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6a96:	f023 0301 	bic.w	r3, r3, #1
    6a9a:	4619      	mov	r1, r3
    6a9c:	6878      	ldr	r0, [r7, #4]
    6a9e:	4b11      	ldr	r3, [pc, #68]	; (6ae4 <_spi_load_regs_master+0x84>)
    6aa0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6aa2:	683b      	ldr	r3, [r7, #0]
    6aa4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6aa6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6aaa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6ab2:	4619      	mov	r1, r3
    6ab4:	6878      	ldr	r0, [r7, #4]
    6ab6:	4b0c      	ldr	r3, [pc, #48]	; (6ae8 <_spi_load_regs_master+0x88>)
    6ab8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6aba:	683b      	ldr	r3, [r7, #0]
    6abc:	7b1b      	ldrb	r3, [r3, #12]
    6abe:	4619      	mov	r1, r3
    6ac0:	6878      	ldr	r0, [r7, #4]
    6ac2:	4b0a      	ldr	r3, [pc, #40]	; (6aec <_spi_load_regs_master+0x8c>)
    6ac4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6ac6:	683b      	ldr	r3, [r7, #0]
    6ac8:	7b5b      	ldrb	r3, [r3, #13]
    6aca:	4619      	mov	r1, r3
    6acc:	6878      	ldr	r0, [r7, #4]
    6ace:	4b08      	ldr	r3, [pc, #32]	; (6af0 <_spi_load_regs_master+0x90>)
    6ad0:	4798      	blx	r3
}
    6ad2:	bf00      	nop
    6ad4:	3708      	adds	r7, #8
    6ad6:	46bd      	mov	sp, r7
    6ad8:	bd80      	pop	{r7, pc}
    6ada:	bf00      	nop
    6adc:	00012300 	.word	0x00012300
    6ae0:	00003681 	.word	0x00003681
    6ae4:	00005eb1 	.word	0x00005eb1
    6ae8:	00005fc9 	.word	0x00005fc9
    6aec:	00006009 	.word	0x00006009
    6af0:	00006141 	.word	0x00006141

00006af4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6af4:	b580      	push	{r7, lr}
    6af6:	b082      	sub	sp, #8
    6af8:	af00      	add	r7, sp, #0
    6afa:	6078      	str	r0, [r7, #4]
    6afc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	2b00      	cmp	r3, #0
    6b02:	d004      	beq.n	6b0e <_spi_load_regs_slave+0x1a>
    6b04:	683b      	ldr	r3, [r7, #0]
    6b06:	2b00      	cmp	r3, #0
    6b08:	d001      	beq.n	6b0e <_spi_load_regs_slave+0x1a>
    6b0a:	2301      	movs	r3, #1
    6b0c:	e000      	b.n	6b10 <_spi_load_regs_slave+0x1c>
    6b0e:	2300      	movs	r3, #0
    6b10:	f003 0301 	and.w	r3, r3, #1
    6b14:	b2db      	uxtb	r3, r3
    6b16:	f640 121d 	movw	r2, #2333	; 0x91d
    6b1a:	491a      	ldr	r1, [pc, #104]	; (6b84 <_spi_load_regs_slave+0x90>)
    6b1c:	4618      	mov	r0, r3
    6b1e:	4b1a      	ldr	r3, [pc, #104]	; (6b88 <_spi_load_regs_slave+0x94>)
    6b20:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6b22:	683b      	ldr	r3, [r7, #0]
    6b24:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6b26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6b2a:	f023 0301 	bic.w	r3, r3, #1
    6b2e:	4619      	mov	r1, r3
    6b30:	6878      	ldr	r0, [r7, #4]
    6b32:	4b16      	ldr	r3, [pc, #88]	; (6b8c <_spi_load_regs_slave+0x98>)
    6b34:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6b36:	683b      	ldr	r3, [r7, #0]
    6b38:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6b3a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6b3e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6b46:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6b4a:	4619      	mov	r1, r3
    6b4c:	6878      	ldr	r0, [r7, #4]
    6b4e:	4b10      	ldr	r3, [pc, #64]	; (6b90 <_spi_load_regs_slave+0x9c>)
    6b50:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6b52:	683b      	ldr	r3, [r7, #0]
    6b54:	689b      	ldr	r3, [r3, #8]
    6b56:	4619      	mov	r1, r3
    6b58:	6878      	ldr	r0, [r7, #4]
    6b5a:	4b0e      	ldr	r3, [pc, #56]	; (6b94 <_spi_load_regs_slave+0xa0>)
    6b5c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6b5e:	683b      	ldr	r3, [r7, #0]
    6b60:	7b5b      	ldrb	r3, [r3, #13]
    6b62:	4619      	mov	r1, r3
    6b64:	6878      	ldr	r0, [r7, #4]
    6b66:	4b0c      	ldr	r3, [pc, #48]	; (6b98 <_spi_load_regs_slave+0xa4>)
    6b68:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6b6a:	bf00      	nop
    6b6c:	f04f 31ff 	mov.w	r1, #4294967295
    6b70:	6878      	ldr	r0, [r7, #4]
    6b72:	4b0a      	ldr	r3, [pc, #40]	; (6b9c <_spi_load_regs_slave+0xa8>)
    6b74:	4798      	blx	r3
    6b76:	4603      	mov	r3, r0
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d1f7      	bne.n	6b6c <_spi_load_regs_slave+0x78>
		;
}
    6b7c:	bf00      	nop
    6b7e:	3708      	adds	r7, #8
    6b80:	46bd      	mov	sp, r7
    6b82:	bd80      	pop	{r7, pc}
    6b84:	00012300 	.word	0x00012300
    6b88:	00003681 	.word	0x00003681
    6b8c:	00005eb1 	.word	0x00005eb1
    6b90:	00005fc9 	.word	0x00005fc9
    6b94:	000060ad 	.word	0x000060ad
    6b98:	00006141 	.word	0x00006141
    6b9c:	00005c75 	.word	0x00005c75

00006ba0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6ba0:	b580      	push	{r7, lr}
    6ba2:	b084      	sub	sp, #16
    6ba4:	af00      	add	r7, sp, #0
    6ba6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	4618      	mov	r0, r3
    6bac:	4b11      	ldr	r3, [pc, #68]	; (6bf4 <_spi_get_regs+0x54>)
    6bae:	4798      	blx	r3
    6bb0:	4603      	mov	r3, r0
    6bb2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6bb4:	2300      	movs	r3, #0
    6bb6:	73fb      	strb	r3, [r7, #15]
    6bb8:	e014      	b.n	6be4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6bba:	7bfa      	ldrb	r2, [r7, #15]
    6bbc:	490e      	ldr	r1, [pc, #56]	; (6bf8 <_spi_get_regs+0x58>)
    6bbe:	4613      	mov	r3, r2
    6bc0:	011b      	lsls	r3, r3, #4
    6bc2:	4413      	add	r3, r2
    6bc4:	440b      	add	r3, r1
    6bc6:	3310      	adds	r3, #16
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	7bba      	ldrb	r2, [r7, #14]
    6bcc:	429a      	cmp	r2, r3
    6bce:	d106      	bne.n	6bde <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6bd0:	7bfa      	ldrb	r2, [r7, #15]
    6bd2:	4613      	mov	r3, r2
    6bd4:	011b      	lsls	r3, r3, #4
    6bd6:	4413      	add	r3, r2
    6bd8:	4a07      	ldr	r2, [pc, #28]	; (6bf8 <_spi_get_regs+0x58>)
    6bda:	4413      	add	r3, r2
    6bdc:	e006      	b.n	6bec <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6bde:	7bfb      	ldrb	r3, [r7, #15]
    6be0:	3301      	adds	r3, #1
    6be2:	73fb      	strb	r3, [r7, #15]
    6be4:	7bfb      	ldrb	r3, [r7, #15]
    6be6:	2b01      	cmp	r3, #1
    6be8:	d9e7      	bls.n	6bba <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6bea:	2300      	movs	r3, #0
}
    6bec:	4618      	mov	r0, r3
    6bee:	3710      	adds	r7, #16
    6bf0:	46bd      	mov	sp, r7
    6bf2:	bd80      	pop	{r7, pc}
    6bf4:	000061f9 	.word	0x000061f9
    6bf8:	0001233c 	.word	0x0001233c

00006bfc <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6bfc:	b580      	push	{r7, lr}
    6bfe:	b084      	sub	sp, #16
    6c00:	af00      	add	r7, sp, #0
    6c02:	6078      	str	r0, [r7, #4]
    6c04:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6c06:	683b      	ldr	r3, [r7, #0]
    6c08:	4618      	mov	r0, r3
    6c0a:	4b35      	ldr	r3, [pc, #212]	; (6ce0 <_spi_m_sync_init+0xe4>)
    6c0c:	4798      	blx	r3
    6c0e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d004      	beq.n	6c20 <_spi_m_sync_init+0x24>
    6c16:	683b      	ldr	r3, [r7, #0]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d001      	beq.n	6c20 <_spi_m_sync_init+0x24>
    6c1c:	2301      	movs	r3, #1
    6c1e:	e000      	b.n	6c22 <_spi_m_sync_init+0x26>
    6c20:	2300      	movs	r3, #0
    6c22:	f003 0301 	and.w	r3, r3, #1
    6c26:	b2db      	uxtb	r3, r3
    6c28:	f640 123f 	movw	r2, #2367	; 0x93f
    6c2c:	492d      	ldr	r1, [pc, #180]	; (6ce4 <_spi_m_sync_init+0xe8>)
    6c2e:	4618      	mov	r0, r3
    6c30:	4b2d      	ldr	r3, [pc, #180]	; (6ce8 <_spi_m_sync_init+0xec>)
    6c32:	4798      	blx	r3

	if (regs == NULL) {
    6c34:	68fb      	ldr	r3, [r7, #12]
    6c36:	2b00      	cmp	r3, #0
    6c38:	d102      	bne.n	6c40 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6c3a:	f06f 030c 	mvn.w	r3, #12
    6c3e:	e04a      	b.n	6cd6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c40:	2101      	movs	r1, #1
    6c42:	6838      	ldr	r0, [r7, #0]
    6c44:	4b29      	ldr	r3, [pc, #164]	; (6cec <_spi_m_sync_init+0xf0>)
    6c46:	4798      	blx	r3
    6c48:	4603      	mov	r3, r0
    6c4a:	f083 0301 	eor.w	r3, r3, #1
    6c4e:	b2db      	uxtb	r3, r3
    6c50:	2b00      	cmp	r3, #0
    6c52:	d019      	beq.n	6c88 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6c54:	68fb      	ldr	r3, [r7, #12]
    6c56:	681b      	ldr	r3, [r3, #0]
    6c58:	f003 031c 	and.w	r3, r3, #28
    6c5c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6c5e:	2102      	movs	r1, #2
    6c60:	6838      	ldr	r0, [r7, #0]
    6c62:	4b23      	ldr	r3, [pc, #140]	; (6cf0 <_spi_m_sync_init+0xf4>)
    6c64:	4798      	blx	r3
    6c66:	4603      	mov	r3, r0
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d006      	beq.n	6c7a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6c6c:	6838      	ldr	r0, [r7, #0]
    6c6e:	4b21      	ldr	r3, [pc, #132]	; (6cf4 <_spi_m_sync_init+0xf8>)
    6c70:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6c72:	2102      	movs	r1, #2
    6c74:	6838      	ldr	r0, [r7, #0]
    6c76:	4b20      	ldr	r3, [pc, #128]	; (6cf8 <_spi_m_sync_init+0xfc>)
    6c78:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6c7a:	68bb      	ldr	r3, [r7, #8]
    6c7c:	f043 0301 	orr.w	r3, r3, #1
    6c80:	4619      	mov	r1, r3
    6c82:	6838      	ldr	r0, [r7, #0]
    6c84:	4b1d      	ldr	r3, [pc, #116]	; (6cfc <_spi_m_sync_init+0x100>)
    6c86:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6c88:	2101      	movs	r1, #1
    6c8a:	6838      	ldr	r0, [r7, #0]
    6c8c:	4b1a      	ldr	r3, [pc, #104]	; (6cf8 <_spi_m_sync_init+0xfc>)
    6c8e:	4798      	blx	r3

	dev->prvt = hw;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	683a      	ldr	r2, [r7, #0]
    6c94:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6c96:	68fb      	ldr	r3, [r7, #12]
    6c98:	681b      	ldr	r3, [r3, #0]
    6c9a:	f003 031c 	and.w	r3, r3, #28
    6c9e:	2b08      	cmp	r3, #8
    6ca0:	d104      	bne.n	6cac <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6ca2:	68f9      	ldr	r1, [r7, #12]
    6ca4:	6838      	ldr	r0, [r7, #0]
    6ca6:	4b16      	ldr	r3, [pc, #88]	; (6d00 <_spi_m_sync_init+0x104>)
    6ca8:	4798      	blx	r3
    6caa:	e003      	b.n	6cb4 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6cac:	68f9      	ldr	r1, [r7, #12]
    6cae:	6838      	ldr	r0, [r7, #0]
    6cb0:	4b14      	ldr	r3, [pc, #80]	; (6d04 <_spi_m_sync_init+0x108>)
    6cb2:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6cb4:	68fb      	ldr	r3, [r7, #12]
    6cb6:	685b      	ldr	r3, [r3, #4]
    6cb8:	f003 0307 	and.w	r3, r3, #7
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	d101      	bne.n	6cc4 <_spi_m_sync_init+0xc8>
    6cc0:	2201      	movs	r2, #1
    6cc2:	e000      	b.n	6cc6 <_spi_m_sync_init+0xca>
    6cc4:	2202      	movs	r2, #2
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6cca:	68fb      	ldr	r3, [r7, #12]
    6ccc:	89db      	ldrh	r3, [r3, #14]
    6cce:	b29a      	uxth	r2, r3
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6cd4:	2300      	movs	r3, #0
}
    6cd6:	4618      	mov	r0, r3
    6cd8:	3710      	adds	r7, #16
    6cda:	46bd      	mov	sp, r7
    6cdc:	bd80      	pop	{r7, pc}
    6cde:	bf00      	nop
    6ce0:	00006ba1 	.word	0x00006ba1
    6ce4:	00012300 	.word	0x00012300
    6ce8:	00003681 	.word	0x00003681
    6cec:	00005c75 	.word	0x00005c75
    6cf0:	00005e81 	.word	0x00005e81
    6cf4:	00005e59 	.word	0x00005e59
    6cf8:	00005c51 	.word	0x00005c51
    6cfc:	00005eb1 	.word	0x00005eb1
    6d00:	00006af5 	.word	0x00006af5
    6d04:	00006a61 	.word	0x00006a61

00006d08 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b082      	sub	sp, #8
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6d10:	bf00      	nop
    6d12:	2103      	movs	r1, #3
    6d14:	6878      	ldr	r0, [r7, #4]
    6d16:	4b06      	ldr	r3, [pc, #24]	; (6d30 <_spi_wait_bus_idle+0x28>)
    6d18:	4798      	blx	r3
    6d1a:	4603      	mov	r3, r0
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d0f8      	beq.n	6d12 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6d20:	2103      	movs	r1, #3
    6d22:	6878      	ldr	r0, [r7, #4]
    6d24:	4b03      	ldr	r3, [pc, #12]	; (6d34 <_spi_wait_bus_idle+0x2c>)
    6d26:	4798      	blx	r3
}
    6d28:	bf00      	nop
    6d2a:	3708      	adds	r7, #8
    6d2c:	46bd      	mov	sp, r7
    6d2e:	bd80      	pop	{r7, pc}
    6d30:	00005ceb 	.word	0x00005ceb
    6d34:	00005d2d 	.word	0x00005d2d

00006d38 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6d38:	b580      	push	{r7, lr}
    6d3a:	b086      	sub	sp, #24
    6d3c:	af00      	add	r7, sp, #0
    6d3e:	60f8      	str	r0, [r7, #12]
    6d40:	60b9      	str	r1, [r7, #8]
    6d42:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6d44:	68bb      	ldr	r3, [r7, #8]
    6d46:	f003 0304 	and.w	r3, r3, #4
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d101      	bne.n	6d52 <_spi_rx_check_and_receive+0x1a>
		return false;
    6d4e:	2300      	movs	r3, #0
    6d50:	e022      	b.n	6d98 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6d52:	68f8      	ldr	r0, [r7, #12]
    6d54:	4b12      	ldr	r3, [pc, #72]	; (6da0 <_spi_rx_check_and_receive+0x68>)
    6d56:	4798      	blx	r3
    6d58:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	685b      	ldr	r3, [r3, #4]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d014      	beq.n	6d8c <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	685b      	ldr	r3, [r3, #4]
    6d66:	1c59      	adds	r1, r3, #1
    6d68:	687a      	ldr	r2, [r7, #4]
    6d6a:	6051      	str	r1, [r2, #4]
    6d6c:	697a      	ldr	r2, [r7, #20]
    6d6e:	b2d2      	uxtb	r2, r2
    6d70:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	7c1b      	ldrb	r3, [r3, #16]
    6d76:	2b01      	cmp	r3, #1
    6d78:	d908      	bls.n	6d8c <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	685b      	ldr	r3, [r3, #4]
    6d7e:	1c59      	adds	r1, r3, #1
    6d80:	687a      	ldr	r2, [r7, #4]
    6d82:	6051      	str	r1, [r2, #4]
    6d84:	697a      	ldr	r2, [r7, #20]
    6d86:	0a12      	lsrs	r2, r2, #8
    6d88:	b2d2      	uxtb	r2, r2
    6d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	68db      	ldr	r3, [r3, #12]
    6d90:	1c5a      	adds	r2, r3, #1
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	60da      	str	r2, [r3, #12]

	return true;
    6d96:	2301      	movs	r3, #1
}
    6d98:	4618      	mov	r0, r3
    6d9a:	3718      	adds	r7, #24
    6d9c:	46bd      	mov	sp, r7
    6d9e:	bd80      	pop	{r7, pc}
    6da0:	00006129 	.word	0x00006129

00006da4 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6da4:	b580      	push	{r7, lr}
    6da6:	b086      	sub	sp, #24
    6da8:	af00      	add	r7, sp, #0
    6daa:	60f8      	str	r0, [r7, #12]
    6dac:	60b9      	str	r1, [r7, #8]
    6dae:	607a      	str	r2, [r7, #4]
    6db0:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6db2:	68bb      	ldr	r3, [r7, #8]
    6db4:	f003 0301 	and.w	r3, r3, #1
    6db8:	2b00      	cmp	r3, #0
    6dba:	d028      	beq.n	6e0e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d018      	beq.n	6df6 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	681b      	ldr	r3, [r3, #0]
    6dc8:	1c59      	adds	r1, r3, #1
    6dca:	687a      	ldr	r2, [r7, #4]
    6dcc:	6011      	str	r1, [r2, #0]
    6dce:	781b      	ldrb	r3, [r3, #0]
    6dd0:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	7c1b      	ldrb	r3, [r3, #16]
    6dd6:	2b01      	cmp	r3, #1
    6dd8:	d90f      	bls.n	6dfa <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	681b      	ldr	r3, [r3, #0]
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	021b      	lsls	r3, r3, #8
    6de2:	461a      	mov	r2, r3
    6de4:	697b      	ldr	r3, [r7, #20]
    6de6:	4313      	orrs	r3, r2
    6de8:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	1c5a      	adds	r2, r3, #1
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	601a      	str	r2, [r3, #0]
    6df4:	e001      	b.n	6dfa <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6df6:	887b      	ldrh	r3, [r7, #2]
    6df8:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	689b      	ldr	r3, [r3, #8]
    6dfe:	1c5a      	adds	r2, r3, #1
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6e04:	6979      	ldr	r1, [r7, #20]
    6e06:	68f8      	ldr	r0, [r7, #12]
    6e08:	4b03      	ldr	r3, [pc, #12]	; (6e18 <_spi_tx_check_and_send+0x74>)
    6e0a:	4798      	blx	r3
    6e0c:	e000      	b.n	6e10 <_spi_tx_check_and_send+0x6c>
		return;
    6e0e:	bf00      	nop
}
    6e10:	3718      	adds	r7, #24
    6e12:	46bd      	mov	sp, r7
    6e14:	bd80      	pop	{r7, pc}
    6e16:	bf00      	nop
    6e18:	0000610d 	.word	0x0000610d

00006e1c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b082      	sub	sp, #8
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
    6e24:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d00b      	beq.n	6e48 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e34:	6838      	ldr	r0, [r7, #0]
    6e36:	4b07      	ldr	r3, [pc, #28]	; (6e54 <_spi_err_check+0x38>)
    6e38:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6e3a:	2180      	movs	r1, #128	; 0x80
    6e3c:	6838      	ldr	r0, [r7, #0]
    6e3e:	4b06      	ldr	r3, [pc, #24]	; (6e58 <_spi_err_check+0x3c>)
    6e40:	4798      	blx	r3
		return ERR_OVERFLOW;
    6e42:	f06f 0312 	mvn.w	r3, #18
    6e46:	e000      	b.n	6e4a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6e48:	2300      	movs	r3, #0
}
    6e4a:	4618      	mov	r0, r3
    6e4c:	3708      	adds	r7, #8
    6e4e:	46bd      	mov	sp, r7
    6e50:	bd80      	pop	{r7, pc}
    6e52:	bf00      	nop
    6e54:	00006161 	.word	0x00006161
    6e58:	00005d2d 	.word	0x00005d2d

00006e5c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6e5c:	b590      	push	{r4, r7, lr}
    6e5e:	b08b      	sub	sp, #44	; 0x2c
    6e60:	af00      	add	r7, sp, #0
    6e62:	6078      	str	r0, [r7, #4]
    6e64:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	681b      	ldr	r3, [r3, #0]
    6e6a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6e6c:	2300      	movs	r3, #0
    6e6e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6e70:	683b      	ldr	r3, [r7, #0]
    6e72:	681b      	ldr	r3, [r3, #0]
    6e74:	60bb      	str	r3, [r7, #8]
    6e76:	683b      	ldr	r3, [r7, #0]
    6e78:	685b      	ldr	r3, [r3, #4]
    6e7a:	60fb      	str	r3, [r7, #12]
    6e7c:	2300      	movs	r3, #0
    6e7e:	613b      	str	r3, [r7, #16]
    6e80:	2300      	movs	r3, #0
    6e82:	617b      	str	r3, [r7, #20]
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	791b      	ldrb	r3, [r3, #4]
    6e88:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d004      	beq.n	6e9a <_spi_m_sync_trans+0x3e>
    6e90:	6a3b      	ldr	r3, [r7, #32]
    6e92:	2b00      	cmp	r3, #0
    6e94:	d001      	beq.n	6e9a <_spi_m_sync_trans+0x3e>
    6e96:	2301      	movs	r3, #1
    6e98:	e000      	b.n	6e9c <_spi_m_sync_trans+0x40>
    6e9a:	2300      	movs	r3, #0
    6e9c:	f003 0301 	and.w	r3, r3, #1
    6ea0:	b2db      	uxtb	r3, r3
    6ea2:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6ea6:	492b      	ldr	r1, [pc, #172]	; (6f54 <_spi_m_sync_trans+0xf8>)
    6ea8:	4618      	mov	r0, r3
    6eaa:	4b2b      	ldr	r3, [pc, #172]	; (6f58 <_spi_m_sync_trans+0xfc>)
    6eac:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6eae:	2107      	movs	r1, #7
    6eb0:	6a38      	ldr	r0, [r7, #32]
    6eb2:	4b2a      	ldr	r3, [pc, #168]	; (6f5c <_spi_m_sync_trans+0x100>)
    6eb4:	4798      	blx	r3
    6eb6:	4603      	mov	r3, r0
    6eb8:	2b00      	cmp	r3, #0
    6eba:	d002      	beq.n	6ec2 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6ebc:	f06f 0303 	mvn.w	r3, #3
    6ec0:	e043      	b.n	6f4a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6ec2:	6a38      	ldr	r0, [r7, #32]
    6ec4:	4b26      	ldr	r3, [pc, #152]	; (6f60 <_spi_m_sync_trans+0x104>)
    6ec6:	4798      	blx	r3
    6ec8:	4603      	mov	r3, r0
    6eca:	f083 0301 	eor.w	r3, r3, #1
    6ece:	b2db      	uxtb	r3, r3
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d002      	beq.n	6eda <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6ed4:	f06f 0313 	mvn.w	r3, #19
    6ed8:	e037      	b.n	6f4a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6eda:	6a38      	ldr	r0, [r7, #32]
    6edc:	4b21      	ldr	r3, [pc, #132]	; (6f64 <_spi_m_sync_trans+0x108>)
    6ede:	4798      	blx	r3
    6ee0:	4603      	mov	r3, r0
    6ee2:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6ee4:	f107 0308 	add.w	r3, r7, #8
    6ee8:	461a      	mov	r2, r3
    6eea:	69f9      	ldr	r1, [r7, #28]
    6eec:	6a38      	ldr	r0, [r7, #32]
    6eee:	4b1e      	ldr	r3, [pc, #120]	; (6f68 <_spi_m_sync_trans+0x10c>)
    6ef0:	4798      	blx	r3
    6ef2:	4603      	mov	r3, r0
    6ef4:	f083 0301 	eor.w	r3, r3, #1
    6ef8:	b2db      	uxtb	r3, r3
    6efa:	2b00      	cmp	r3, #0
    6efc:	d00b      	beq.n	6f16 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6efe:	697a      	ldr	r2, [r7, #20]
    6f00:	693b      	ldr	r3, [r7, #16]
    6f02:	429a      	cmp	r2, r3
    6f04:	d307      	bcc.n	6f16 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6f06:	687b      	ldr	r3, [r7, #4]
    6f08:	88db      	ldrh	r3, [r3, #6]
    6f0a:	f107 0208 	add.w	r2, r7, #8
    6f0e:	69f9      	ldr	r1, [r7, #28]
    6f10:	6a38      	ldr	r0, [r7, #32]
    6f12:	4c16      	ldr	r4, [pc, #88]	; (6f6c <_spi_m_sync_trans+0x110>)
    6f14:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6f16:	6a39      	ldr	r1, [r7, #32]
    6f18:	69f8      	ldr	r0, [r7, #28]
    6f1a:	4b15      	ldr	r3, [pc, #84]	; (6f70 <_spi_m_sync_trans+0x114>)
    6f1c:	4798      	blx	r3
    6f1e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f22:	2b00      	cmp	r3, #0
    6f24:	db0c      	blt.n	6f40 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6f26:	693a      	ldr	r2, [r7, #16]
    6f28:	683b      	ldr	r3, [r7, #0]
    6f2a:	689b      	ldr	r3, [r3, #8]
    6f2c:	429a      	cmp	r2, r3
    6f2e:	d3d4      	bcc.n	6eda <_spi_m_sync_trans+0x7e>
    6f30:	697a      	ldr	r2, [r7, #20]
    6f32:	683b      	ldr	r3, [r7, #0]
    6f34:	689b      	ldr	r3, [r3, #8]
    6f36:	429a      	cmp	r2, r3
    6f38:	d3cf      	bcc.n	6eda <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6f3a:	693b      	ldr	r3, [r7, #16]
    6f3c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6f3e:	e000      	b.n	6f42 <_spi_m_sync_trans+0xe6>
			break;
    6f40:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6f42:	6a38      	ldr	r0, [r7, #32]
    6f44:	4b0b      	ldr	r3, [pc, #44]	; (6f74 <_spi_m_sync_trans+0x118>)
    6f46:	4798      	blx	r3

	return rc;
    6f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6f4a:	4618      	mov	r0, r3
    6f4c:	372c      	adds	r7, #44	; 0x2c
    6f4e:	46bd      	mov	sp, r7
    6f50:	bd90      	pop	{r4, r7, pc}
    6f52:	bf00      	nop
    6f54:	00012300 	.word	0x00012300
    6f58:	00003681 	.word	0x00003681
    6f5c:	00005c75 	.word	0x00005c75
    6f60:	00005e21 	.word	0x00005e21
    6f64:	00005d13 	.word	0x00005d13
    6f68:	00006d39 	.word	0x00006d39
    6f6c:	00006da5 	.word	0x00006da5
    6f70:	00006e1d 	.word	0x00006e1d
    6f74:	00006d09 	.word	0x00006d09

00006f78 <__NVIC_EnableIRQ>:
{
    6f78:	b480      	push	{r7}
    6f7a:	b083      	sub	sp, #12
    6f7c:	af00      	add	r7, sp, #0
    6f7e:	4603      	mov	r3, r0
    6f80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f86:	2b00      	cmp	r3, #0
    6f88:	db0b      	blt.n	6fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f8a:	4909      	ldr	r1, [pc, #36]	; (6fb0 <__NVIC_EnableIRQ+0x38>)
    6f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f90:	095b      	lsrs	r3, r3, #5
    6f92:	88fa      	ldrh	r2, [r7, #6]
    6f94:	f002 021f 	and.w	r2, r2, #31
    6f98:	2001      	movs	r0, #1
    6f9a:	fa00 f202 	lsl.w	r2, r0, r2
    6f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fa2:	bf00      	nop
    6fa4:	370c      	adds	r7, #12
    6fa6:	46bd      	mov	sp, r7
    6fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fac:	4770      	bx	lr
    6fae:	bf00      	nop
    6fb0:	e000e100 	.word	0xe000e100

00006fb4 <__NVIC_DisableIRQ>:
{
    6fb4:	b480      	push	{r7}
    6fb6:	b083      	sub	sp, #12
    6fb8:	af00      	add	r7, sp, #0
    6fba:	4603      	mov	r3, r0
    6fbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	db10      	blt.n	6fe8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6fc6:	490b      	ldr	r1, [pc, #44]	; (6ff4 <__NVIC_DisableIRQ+0x40>)
    6fc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fcc:	095b      	lsrs	r3, r3, #5
    6fce:	88fa      	ldrh	r2, [r7, #6]
    6fd0:	f002 021f 	and.w	r2, r2, #31
    6fd4:	2001      	movs	r0, #1
    6fd6:	fa00 f202 	lsl.w	r2, r0, r2
    6fda:	3320      	adds	r3, #32
    6fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6fe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6fe4:	f3bf 8f6f 	isb	sy
}
    6fe8:	bf00      	nop
    6fea:	370c      	adds	r7, #12
    6fec:	46bd      	mov	sp, r7
    6fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ff2:	4770      	bx	lr
    6ff4:	e000e100 	.word	0xe000e100

00006ff8 <__NVIC_ClearPendingIRQ>:
{
    6ff8:	b480      	push	{r7}
    6ffa:	b083      	sub	sp, #12
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	4603      	mov	r3, r0
    7000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7006:	2b00      	cmp	r3, #0
    7008:	db0c      	blt.n	7024 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    700a:	4909      	ldr	r1, [pc, #36]	; (7030 <__NVIC_ClearPendingIRQ+0x38>)
    700c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7010:	095b      	lsrs	r3, r3, #5
    7012:	88fa      	ldrh	r2, [r7, #6]
    7014:	f002 021f 	and.w	r2, r2, #31
    7018:	2001      	movs	r0, #1
    701a:	fa00 f202 	lsl.w	r2, r0, r2
    701e:	3360      	adds	r3, #96	; 0x60
    7020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7024:	bf00      	nop
    7026:	370c      	adds	r7, #12
    7028:	46bd      	mov	sp, r7
    702a:	f85d 7b04 	ldr.w	r7, [sp], #4
    702e:	4770      	bx	lr
    7030:	e000e100 	.word	0xe000e100

00007034 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7034:	b480      	push	{r7}
    7036:	b083      	sub	sp, #12
    7038:	af00      	add	r7, sp, #0
    703a:	6078      	str	r0, [r7, #4]
    703c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    703e:	bf00      	nop
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	689a      	ldr	r2, [r3, #8]
    7044:	683b      	ldr	r3, [r7, #0]
    7046:	4013      	ands	r3, r2
    7048:	2b00      	cmp	r3, #0
    704a:	d1f9      	bne.n	7040 <hri_tcc_wait_for_sync+0xc>
	};
}
    704c:	bf00      	nop
    704e:	370c      	adds	r7, #12
    7050:	46bd      	mov	sp, r7
    7052:	f85d 7b04 	ldr.w	r7, [sp], #4
    7056:	4770      	bx	lr

00007058 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7058:	b480      	push	{r7}
    705a:	b083      	sub	sp, #12
    705c:	af00      	add	r7, sp, #0
    705e:	6078      	str	r0, [r7, #4]
    7060:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	689a      	ldr	r2, [r3, #8]
    7066:	683b      	ldr	r3, [r7, #0]
    7068:	4013      	ands	r3, r2
    706a:	2b00      	cmp	r3, #0
    706c:	bf14      	ite	ne
    706e:	2301      	movne	r3, #1
    7070:	2300      	moveq	r3, #0
    7072:	b2db      	uxtb	r3, r3
}
    7074:	4618      	mov	r0, r3
    7076:	370c      	adds	r7, #12
    7078:	46bd      	mov	sp, r7
    707a:	f85d 7b04 	ldr.w	r7, [sp], #4
    707e:	4770      	bx	lr

00007080 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7080:	b480      	push	{r7}
    7082:	b083      	sub	sp, #12
    7084:	af00      	add	r7, sp, #0
    7086:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    708c:	f003 0301 	and.w	r3, r3, #1
    7090:	2b00      	cmp	r3, #0
    7092:	bf14      	ite	ne
    7094:	2301      	movne	r3, #1
    7096:	2300      	moveq	r3, #0
    7098:	b2db      	uxtb	r3, r3
}
    709a:	4618      	mov	r0, r3
    709c:	370c      	adds	r7, #12
    709e:	46bd      	mov	sp, r7
    70a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    70a4:	4770      	bx	lr

000070a6 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    70a6:	b480      	push	{r7}
    70a8:	b083      	sub	sp, #12
    70aa:	af00      	add	r7, sp, #0
    70ac:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	2201      	movs	r2, #1
    70b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
    70b4:	bf00      	nop
    70b6:	370c      	adds	r7, #12
    70b8:	46bd      	mov	sp, r7
    70ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    70be:	4770      	bx	lr

000070c0 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    70c0:	b480      	push	{r7}
    70c2:	b083      	sub	sp, #12
    70c4:	af00      	add	r7, sp, #0
    70c6:	6078      	str	r0, [r7, #4]
    70c8:	460b      	mov	r3, r1
    70ca:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	78fa      	ldrb	r2, [r7, #3]
    70d0:	715a      	strb	r2, [r3, #5]
}
    70d2:	bf00      	nop
    70d4:	370c      	adds	r7, #12
    70d6:	46bd      	mov	sp, r7
    70d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    70dc:	4770      	bx	lr

000070de <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    70de:	b480      	push	{r7}
    70e0:	b083      	sub	sp, #12
    70e2:	af00      	add	r7, sp, #0
    70e4:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	2201      	movs	r2, #1
    70ea:	629a      	str	r2, [r3, #40]	; 0x28
}
    70ec:	bf00      	nop
    70ee:	370c      	adds	r7, #12
    70f0:	46bd      	mov	sp, r7
    70f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    70f6:	4770      	bx	lr

000070f8 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b082      	sub	sp, #8
    70fc:	af00      	add	r7, sp, #0
    70fe:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	681b      	ldr	r3, [r3, #0]
    7104:	f043 0201 	orr.w	r2, r3, #1
    7108:	687b      	ldr	r3, [r7, #4]
    710a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    710c:	2101      	movs	r1, #1
    710e:	6878      	ldr	r0, [r7, #4]
    7110:	4b02      	ldr	r3, [pc, #8]	; (711c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7112:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7114:	bf00      	nop
    7116:	3708      	adds	r7, #8
    7118:	46bd      	mov	sp, r7
    711a:	bd80      	pop	{r7, pc}
    711c:	00007035 	.word	0x00007035

00007120 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7120:	b580      	push	{r7, lr}
    7122:	b082      	sub	sp, #8
    7124:	af00      	add	r7, sp, #0
    7126:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7128:	687b      	ldr	r3, [r7, #4]
    712a:	681b      	ldr	r3, [r3, #0]
    712c:	f043 0202 	orr.w	r2, r3, #2
    7130:	687b      	ldr	r3, [r7, #4]
    7132:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7134:	2103      	movs	r1, #3
    7136:	6878      	ldr	r0, [r7, #4]
    7138:	4b02      	ldr	r3, [pc, #8]	; (7144 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    713a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    713c:	bf00      	nop
    713e:	3708      	adds	r7, #8
    7140:	46bd      	mov	sp, r7
    7142:	bd80      	pop	{r7, pc}
    7144:	00007035 	.word	0x00007035

00007148 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7148:	b580      	push	{r7, lr}
    714a:	b084      	sub	sp, #16
    714c:	af00      	add	r7, sp, #0
    714e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7150:	2103      	movs	r1, #3
    7152:	6878      	ldr	r0, [r7, #4]
    7154:	4b09      	ldr	r3, [pc, #36]	; (717c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7156:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	681b      	ldr	r3, [r3, #0]
    715c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    715e:	68fb      	ldr	r3, [r7, #12]
    7160:	085b      	lsrs	r3, r3, #1
    7162:	f003 0301 	and.w	r3, r3, #1
    7166:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7168:	68fb      	ldr	r3, [r7, #12]
    716a:	2b00      	cmp	r3, #0
    716c:	bf14      	ite	ne
    716e:	2301      	movne	r3, #1
    7170:	2300      	moveq	r3, #0
    7172:	b2db      	uxtb	r3, r3
}
    7174:	4618      	mov	r0, r3
    7176:	3710      	adds	r7, #16
    7178:	46bd      	mov	sp, r7
    717a:	bd80      	pop	{r7, pc}
    717c:	00007035 	.word	0x00007035

00007180 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7180:	b580      	push	{r7, lr}
    7182:	b082      	sub	sp, #8
    7184:	af00      	add	r7, sp, #0
    7186:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7188:	687b      	ldr	r3, [r7, #4]
    718a:	681b      	ldr	r3, [r3, #0]
    718c:	f023 0202 	bic.w	r2, r3, #2
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7194:	2103      	movs	r1, #3
    7196:	6878      	ldr	r0, [r7, #4]
    7198:	4b02      	ldr	r3, [pc, #8]	; (71a4 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    719a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    719c:	bf00      	nop
    719e:	3708      	adds	r7, #8
    71a0:	46bd      	mov	sp, r7
    71a2:	bd80      	pop	{r7, pc}
    71a4:	00007035 	.word	0x00007035

000071a8 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    71a8:	b580      	push	{r7, lr}
    71aa:	b084      	sub	sp, #16
    71ac:	af00      	add	r7, sp, #0
    71ae:	6078      	str	r0, [r7, #4]
    71b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    71b2:	2103      	movs	r1, #3
    71b4:	6878      	ldr	r0, [r7, #4]
    71b6:	4b07      	ldr	r3, [pc, #28]	; (71d4 <hri_tcc_get_CTRLA_reg+0x2c>)
    71b8:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    71c0:	68fa      	ldr	r2, [r7, #12]
    71c2:	683b      	ldr	r3, [r7, #0]
    71c4:	4013      	ands	r3, r2
    71c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    71c8:	68fb      	ldr	r3, [r7, #12]
}
    71ca:	4618      	mov	r0, r3
    71cc:	3710      	adds	r7, #16
    71ce:	46bd      	mov	sp, r7
    71d0:	bd80      	pop	{r7, pc}
    71d2:	bf00      	nop
    71d4:	00007035 	.word	0x00007035

000071d8 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    71d8:	b580      	push	{r7, lr}
    71da:	b082      	sub	sp, #8
    71dc:	af00      	add	r7, sp, #0
    71de:	6078      	str	r0, [r7, #4]
    71e0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	683a      	ldr	r2, [r7, #0]
    71e6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    71e8:	2103      	movs	r1, #3
    71ea:	6878      	ldr	r0, [r7, #4]
    71ec:	4b02      	ldr	r3, [pc, #8]	; (71f8 <hri_tcc_write_CTRLA_reg+0x20>)
    71ee:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    71f0:	bf00      	nop
    71f2:	3708      	adds	r7, #8
    71f4:	46bd      	mov	sp, r7
    71f6:	bd80      	pop	{r7, pc}
    71f8:	00007035 	.word	0x00007035

000071fc <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    71fc:	b480      	push	{r7}
    71fe:	b083      	sub	sp, #12
    7200:	af00      	add	r7, sp, #0
    7202:	6078      	str	r0, [r7, #4]
    7204:	460b      	mov	r3, r1
    7206:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7208:	687b      	ldr	r3, [r7, #4]
    720a:	78fa      	ldrb	r2, [r7, #3]
    720c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    720e:	bf00      	nop
    7210:	370c      	adds	r7, #12
    7212:	46bd      	mov	sp, r7
    7214:	f85d 7b04 	ldr.w	r7, [sp], #4
    7218:	4770      	bx	lr

0000721a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    721a:	b480      	push	{r7}
    721c:	b083      	sub	sp, #12
    721e:	af00      	add	r7, sp, #0
    7220:	6078      	str	r0, [r7, #4]
    7222:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	683a      	ldr	r2, [r7, #0]
    7228:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    722a:	bf00      	nop
    722c:	370c      	adds	r7, #12
    722e:	46bd      	mov	sp, r7
    7230:	f85d 7b04 	ldr.w	r7, [sp], #4
    7234:	4770      	bx	lr
	...

00007238 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7238:	b580      	push	{r7, lr}
    723a:	b082      	sub	sp, #8
    723c:	af00      	add	r7, sp, #0
    723e:	6078      	str	r0, [r7, #4]
    7240:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	683a      	ldr	r2, [r7, #0]
    7246:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7248:	2180      	movs	r1, #128	; 0x80
    724a:	6878      	ldr	r0, [r7, #4]
    724c:	4b02      	ldr	r3, [pc, #8]	; (7258 <hri_tcc_write_PER_reg+0x20>)
    724e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7250:	bf00      	nop
    7252:	3708      	adds	r7, #8
    7254:	46bd      	mov	sp, r7
    7256:	bd80      	pop	{r7, pc}
    7258:	00007035 	.word	0x00007035

0000725c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    725c:	b580      	push	{r7, lr}
    725e:	b082      	sub	sp, #8
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7264:	2180      	movs	r1, #128	; 0x80
    7266:	6878      	ldr	r0, [r7, #4]
    7268:	4b03      	ldr	r3, [pc, #12]	; (7278 <hri_tcc_read_PER_reg+0x1c>)
    726a:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7270:	4618      	mov	r0, r3
    7272:	3708      	adds	r7, #8
    7274:	46bd      	mov	sp, r7
    7276:	bd80      	pop	{r7, pc}
    7278:	00007035 	.word	0x00007035

0000727c <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    727c:	b480      	push	{r7}
    727e:	b083      	sub	sp, #12
    7280:	af00      	add	r7, sp, #0
    7282:	6078      	str	r0, [r7, #4]
    7284:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	4a0c      	ldr	r2, [pc, #48]	; (72bc <_tcc_init_irq_param+0x40>)
    728a:	4293      	cmp	r3, r2
    728c:	d102      	bne.n	7294 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    728e:	4a0c      	ldr	r2, [pc, #48]	; (72c0 <_tcc_init_irq_param+0x44>)
    7290:	683b      	ldr	r3, [r7, #0]
    7292:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	4a0b      	ldr	r2, [pc, #44]	; (72c4 <_tcc_init_irq_param+0x48>)
    7298:	4293      	cmp	r3, r2
    729a:	d102      	bne.n	72a2 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    729c:	4a0a      	ldr	r2, [pc, #40]	; (72c8 <_tcc_init_irq_param+0x4c>)
    729e:	683b      	ldr	r3, [r7, #0]
    72a0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    72a2:	687b      	ldr	r3, [r7, #4]
    72a4:	4a09      	ldr	r2, [pc, #36]	; (72cc <_tcc_init_irq_param+0x50>)
    72a6:	4293      	cmp	r3, r2
    72a8:	d102      	bne.n	72b0 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    72aa:	4a09      	ldr	r2, [pc, #36]	; (72d0 <_tcc_init_irq_param+0x54>)
    72ac:	683b      	ldr	r3, [r7, #0]
    72ae:	6013      	str	r3, [r2, #0]
	}
}
    72b0:	bf00      	nop
    72b2:	370c      	adds	r7, #12
    72b4:	46bd      	mov	sp, r7
    72b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ba:	4770      	bx	lr
    72bc:	41016000 	.word	0x41016000
    72c0:	20000bbc 	.word	0x20000bbc
    72c4:	41018000 	.word	0x41018000
    72c8:	20000bc0 	.word	0x20000bc0
    72cc:	42000c00 	.word	0x42000c00
    72d0:	20000bc4 	.word	0x20000bc4

000072d4 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    72d4:	b580      	push	{r7, lr}
    72d6:	b084      	sub	sp, #16
    72d8:	af00      	add	r7, sp, #0
    72da:	6078      	str	r0, [r7, #4]
    72dc:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    72de:	6838      	ldr	r0, [r7, #0]
    72e0:	4b33      	ldr	r3, [pc, #204]	; (73b0 <_tcc_timer_init+0xdc>)
    72e2:	4798      	blx	r3
    72e4:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	2b00      	cmp	r3, #0
    72ea:	d102      	bne.n	72f2 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    72ec:	f06f 0309 	mvn.w	r3, #9
    72f0:	e05a      	b.n	73a8 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    72f2:	687b      	ldr	r3, [r7, #4]
    72f4:	683a      	ldr	r2, [r7, #0]
    72f6:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    72f8:	2101      	movs	r1, #1
    72fa:	6838      	ldr	r0, [r7, #0]
    72fc:	4b2d      	ldr	r3, [pc, #180]	; (73b4 <_tcc_timer_init+0xe0>)
    72fe:	4798      	blx	r3
    7300:	4603      	mov	r3, r0
    7302:	f083 0301 	eor.w	r3, r3, #1
    7306:	b2db      	uxtb	r3, r3
    7308:	2b00      	cmp	r3, #0
    730a:	d011      	beq.n	7330 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    730c:	2102      	movs	r1, #2
    730e:	6838      	ldr	r0, [r7, #0]
    7310:	4b29      	ldr	r3, [pc, #164]	; (73b8 <_tcc_timer_init+0xe4>)
    7312:	4798      	blx	r3
    7314:	4603      	mov	r3, r0
    7316:	2b00      	cmp	r3, #0
    7318:	d006      	beq.n	7328 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    731a:	6838      	ldr	r0, [r7, #0]
    731c:	4b27      	ldr	r3, [pc, #156]	; (73bc <_tcc_timer_init+0xe8>)
    731e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7320:	2102      	movs	r1, #2
    7322:	6838      	ldr	r0, [r7, #0]
    7324:	4b26      	ldr	r3, [pc, #152]	; (73c0 <_tcc_timer_init+0xec>)
    7326:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7328:	2101      	movs	r1, #1
    732a:	6838      	ldr	r0, [r7, #0]
    732c:	4b25      	ldr	r3, [pc, #148]	; (73c4 <_tcc_timer_init+0xf0>)
    732e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7330:	2101      	movs	r1, #1
    7332:	6838      	ldr	r0, [r7, #0]
    7334:	4b22      	ldr	r3, [pc, #136]	; (73c0 <_tcc_timer_init+0xec>)
    7336:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7338:	68fb      	ldr	r3, [r7, #12]
    733a:	689b      	ldr	r3, [r3, #8]
    733c:	4619      	mov	r1, r3
    733e:	6838      	ldr	r0, [r7, #0]
    7340:	4b20      	ldr	r3, [pc, #128]	; (73c4 <_tcc_timer_init+0xf0>)
    7342:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7344:	68fb      	ldr	r3, [r7, #12]
    7346:	7b1b      	ldrb	r3, [r3, #12]
    7348:	4619      	mov	r1, r3
    734a:	6838      	ldr	r0, [r7, #0]
    734c:	4b1e      	ldr	r3, [pc, #120]	; (73c8 <_tcc_timer_init+0xf4>)
    734e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7350:	68fb      	ldr	r3, [r7, #12]
    7352:	7b5b      	ldrb	r3, [r3, #13]
    7354:	4619      	mov	r1, r3
    7356:	6838      	ldr	r0, [r7, #0]
    7358:	4b1c      	ldr	r3, [pc, #112]	; (73cc <_tcc_timer_init+0xf8>)
    735a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    735c:	68fb      	ldr	r3, [r7, #12]
    735e:	691b      	ldr	r3, [r3, #16]
    7360:	4619      	mov	r1, r3
    7362:	6838      	ldr	r0, [r7, #0]
    7364:	4b1a      	ldr	r3, [pc, #104]	; (73d0 <_tcc_timer_init+0xfc>)
    7366:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7368:	68fb      	ldr	r3, [r7, #12]
    736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    736c:	4619      	mov	r1, r3
    736e:	6838      	ldr	r0, [r7, #0]
    7370:	4b18      	ldr	r3, [pc, #96]	; (73d4 <_tcc_timer_init+0x100>)
    7372:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7374:	6838      	ldr	r0, [r7, #0]
    7376:	4b18      	ldr	r3, [pc, #96]	; (73d8 <_tcc_timer_init+0x104>)
    7378:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    737a:	6879      	ldr	r1, [r7, #4]
    737c:	6838      	ldr	r0, [r7, #0]
    737e:	4b17      	ldr	r3, [pc, #92]	; (73dc <_tcc_timer_init+0x108>)
    7380:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7382:	68fb      	ldr	r3, [r7, #12]
    7384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7388:	4618      	mov	r0, r3
    738a:	4b15      	ldr	r3, [pc, #84]	; (73e0 <_tcc_timer_init+0x10c>)
    738c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    738e:	68fb      	ldr	r3, [r7, #12]
    7390:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7394:	4618      	mov	r0, r3
    7396:	4b13      	ldr	r3, [pc, #76]	; (73e4 <_tcc_timer_init+0x110>)
    7398:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    739a:	68fb      	ldr	r3, [r7, #12]
    739c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    73a0:	4618      	mov	r0, r3
    73a2:	4b11      	ldr	r3, [pc, #68]	; (73e8 <_tcc_timer_init+0x114>)
    73a4:	4798      	blx	r3

	return ERR_NONE;
    73a6:	2300      	movs	r3, #0
}
    73a8:	4618      	mov	r0, r3
    73aa:	3710      	adds	r7, #16
    73ac:	46bd      	mov	sp, r7
    73ae:	bd80      	pop	{r7, pc}
    73b0:	000075b9 	.word	0x000075b9
    73b4:	00007059 	.word	0x00007059
    73b8:	000071a9 	.word	0x000071a9
    73bc:	00007181 	.word	0x00007181
    73c0:	00007035 	.word	0x00007035
    73c4:	000071d9 	.word	0x000071d9
    73c8:	000070c1 	.word	0x000070c1
    73cc:	000071fd 	.word	0x000071fd
    73d0:	0000721b 	.word	0x0000721b
    73d4:	00007239 	.word	0x00007239
    73d8:	000070df 	.word	0x000070df
    73dc:	0000727d 	.word	0x0000727d
    73e0:	00006fb5 	.word	0x00006fb5
    73e4:	00006ff9 	.word	0x00006ff9
    73e8:	00006f79 	.word	0x00006f79

000073ec <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b084      	sub	sp, #16
    73f0:	af00      	add	r7, sp, #0
    73f2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	68db      	ldr	r3, [r3, #12]
    73f8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    73fa:	68f8      	ldr	r0, [r7, #12]
    73fc:	4b0a      	ldr	r3, [pc, #40]	; (7428 <_tcc_timer_deinit+0x3c>)
    73fe:	4798      	blx	r3
    7400:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7402:	68bb      	ldr	r3, [r7, #8]
    7404:	2b00      	cmp	r3, #0
    7406:	d00b      	beq.n	7420 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7408:	68bb      	ldr	r3, [r7, #8]
    740a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    740e:	4618      	mov	r0, r3
    7410:	4b06      	ldr	r3, [pc, #24]	; (742c <_tcc_timer_deinit+0x40>)
    7412:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7414:	68f8      	ldr	r0, [r7, #12]
    7416:	4b06      	ldr	r3, [pc, #24]	; (7430 <_tcc_timer_deinit+0x44>)
    7418:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    741a:	68f8      	ldr	r0, [r7, #12]
    741c:	4b05      	ldr	r3, [pc, #20]	; (7434 <_tcc_timer_deinit+0x48>)
    741e:	4798      	blx	r3
	}
}
    7420:	bf00      	nop
    7422:	3710      	adds	r7, #16
    7424:	46bd      	mov	sp, r7
    7426:	bd80      	pop	{r7, pc}
    7428:	000075b9 	.word	0x000075b9
    742c:	00006fb5 	.word	0x00006fb5
    7430:	00007181 	.word	0x00007181
    7434:	000070f9 	.word	0x000070f9

00007438 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7438:	b580      	push	{r7, lr}
    743a:	b082      	sub	sp, #8
    743c:	af00      	add	r7, sp, #0
    743e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	68db      	ldr	r3, [r3, #12]
    7444:	4618      	mov	r0, r3
    7446:	4b03      	ldr	r3, [pc, #12]	; (7454 <_tcc_timer_start+0x1c>)
    7448:	4798      	blx	r3
}
    744a:	bf00      	nop
    744c:	3708      	adds	r7, #8
    744e:	46bd      	mov	sp, r7
    7450:	bd80      	pop	{r7, pc}
    7452:	bf00      	nop
    7454:	00007121 	.word	0x00007121

00007458 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7458:	b580      	push	{r7, lr}
    745a:	b082      	sub	sp, #8
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	68db      	ldr	r3, [r3, #12]
    7464:	4618      	mov	r0, r3
    7466:	4b03      	ldr	r3, [pc, #12]	; (7474 <_tcc_timer_stop+0x1c>)
    7468:	4798      	blx	r3
}
    746a:	bf00      	nop
    746c:	3708      	adds	r7, #8
    746e:	46bd      	mov	sp, r7
    7470:	bd80      	pop	{r7, pc}
    7472:	bf00      	nop
    7474:	00007181 	.word	0x00007181

00007478 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7478:	b580      	push	{r7, lr}
    747a:	b082      	sub	sp, #8
    747c:	af00      	add	r7, sp, #0
    747e:	6078      	str	r0, [r7, #4]
    7480:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	68db      	ldr	r3, [r3, #12]
    7486:	6839      	ldr	r1, [r7, #0]
    7488:	4618      	mov	r0, r3
    748a:	4b03      	ldr	r3, [pc, #12]	; (7498 <_tcc_timer_set_period+0x20>)
    748c:	4798      	blx	r3
}
    748e:	bf00      	nop
    7490:	3708      	adds	r7, #8
    7492:	46bd      	mov	sp, r7
    7494:	bd80      	pop	{r7, pc}
    7496:	bf00      	nop
    7498:	00007239 	.word	0x00007239

0000749c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    749c:	b580      	push	{r7, lr}
    749e:	b082      	sub	sp, #8
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    74a4:	687b      	ldr	r3, [r7, #4]
    74a6:	68db      	ldr	r3, [r3, #12]
    74a8:	4618      	mov	r0, r3
    74aa:	4b03      	ldr	r3, [pc, #12]	; (74b8 <_tcc_timer_get_period+0x1c>)
    74ac:	4798      	blx	r3
    74ae:	4603      	mov	r3, r0
}
    74b0:	4618      	mov	r0, r3
    74b2:	3708      	adds	r7, #8
    74b4:	46bd      	mov	sp, r7
    74b6:	bd80      	pop	{r7, pc}
    74b8:	0000725d 	.word	0x0000725d

000074bc <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    74bc:	b580      	push	{r7, lr}
    74be:	b082      	sub	sp, #8
    74c0:	af00      	add	r7, sp, #0
    74c2:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	68db      	ldr	r3, [r3, #12]
    74c8:	4618      	mov	r0, r3
    74ca:	4b03      	ldr	r3, [pc, #12]	; (74d8 <_tcc_timer_is_started+0x1c>)
    74cc:	4798      	blx	r3
    74ce:	4603      	mov	r3, r0
}
    74d0:	4618      	mov	r0, r3
    74d2:	3708      	adds	r7, #8
    74d4:	46bd      	mov	sp, r7
    74d6:	bd80      	pop	{r7, pc}
    74d8:	00007149 	.word	0x00007149

000074dc <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    74dc:	b480      	push	{r7}
    74de:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    74e0:	4b02      	ldr	r3, [pc, #8]	; (74ec <_tcc_get_timer+0x10>)
}
    74e2:	4618      	mov	r0, r3
    74e4:	46bd      	mov	sp, r7
    74e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ea:	4770      	bx	lr
    74ec:	200000f0 	.word	0x200000f0

000074f0 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    74f0:	b580      	push	{r7, lr}
    74f2:	b084      	sub	sp, #16
    74f4:	af00      	add	r7, sp, #0
    74f6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	68db      	ldr	r3, [r3, #12]
    74fc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    74fe:	68f8      	ldr	r0, [r7, #12]
    7500:	4b08      	ldr	r3, [pc, #32]	; (7524 <_tcc_timer_set_irq+0x34>)
    7502:	4798      	blx	r3
    7504:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7506:	68bb      	ldr	r3, [r7, #8]
    7508:	2b00      	cmp	r3, #0
    750a:	d006      	beq.n	751a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    750c:	68bb      	ldr	r3, [r7, #8]
    750e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7512:	b2db      	uxtb	r3, r3
    7514:	4618      	mov	r0, r3
    7516:	4b04      	ldr	r3, [pc, #16]	; (7528 <_tcc_timer_set_irq+0x38>)
    7518:	4798      	blx	r3
	}
}
    751a:	bf00      	nop
    751c:	3710      	adds	r7, #16
    751e:	46bd      	mov	sp, r7
    7520:	bd80      	pop	{r7, pc}
    7522:	bf00      	nop
    7524:	000075b9 	.word	0x000075b9
    7528:	00003ec9 	.word	0x00003ec9

0000752c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    752c:	b580      	push	{r7, lr}
    752e:	b084      	sub	sp, #16
    7530:	af00      	add	r7, sp, #0
    7532:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7534:	687b      	ldr	r3, [r7, #4]
    7536:	68db      	ldr	r3, [r3, #12]
    7538:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    753a:	68f8      	ldr	r0, [r7, #12]
    753c:	4b07      	ldr	r3, [pc, #28]	; (755c <tcc_interrupt_handler+0x30>)
    753e:	4798      	blx	r3
    7540:	4603      	mov	r3, r0
    7542:	2b00      	cmp	r3, #0
    7544:	d006      	beq.n	7554 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7546:	68f8      	ldr	r0, [r7, #12]
    7548:	4b05      	ldr	r3, [pc, #20]	; (7560 <tcc_interrupt_handler+0x34>)
    754a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	681b      	ldr	r3, [r3, #0]
    7550:	6878      	ldr	r0, [r7, #4]
    7552:	4798      	blx	r3
	}
}
    7554:	bf00      	nop
    7556:	3710      	adds	r7, #16
    7558:	46bd      	mov	sp, r7
    755a:	bd80      	pop	{r7, pc}
    755c:	00007081 	.word	0x00007081
    7560:	000070a7 	.word	0x000070a7

00007564 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7564:	b580      	push	{r7, lr}
    7566:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7568:	4b03      	ldr	r3, [pc, #12]	; (7578 <TCC0_0_Handler+0x14>)
    756a:	681b      	ldr	r3, [r3, #0]
    756c:	4618      	mov	r0, r3
    756e:	4b03      	ldr	r3, [pc, #12]	; (757c <TCC0_0_Handler+0x18>)
    7570:	4798      	blx	r3
}
    7572:	bf00      	nop
    7574:	bd80      	pop	{r7, pc}
    7576:	bf00      	nop
    7578:	20000bbc 	.word	0x20000bbc
    757c:	0000752d 	.word	0x0000752d

00007580 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7580:	b580      	push	{r7, lr}
    7582:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7584:	4b03      	ldr	r3, [pc, #12]	; (7594 <TCC1_0_Handler+0x14>)
    7586:	681b      	ldr	r3, [r3, #0]
    7588:	4618      	mov	r0, r3
    758a:	4b03      	ldr	r3, [pc, #12]	; (7598 <TCC1_0_Handler+0x18>)
    758c:	4798      	blx	r3
}
    758e:	bf00      	nop
    7590:	bd80      	pop	{r7, pc}
    7592:	bf00      	nop
    7594:	20000bc0 	.word	0x20000bc0
    7598:	0000752d 	.word	0x0000752d

0000759c <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    759c:	b580      	push	{r7, lr}
    759e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    75a0:	4b03      	ldr	r3, [pc, #12]	; (75b0 <TCC2_0_Handler+0x14>)
    75a2:	681b      	ldr	r3, [r3, #0]
    75a4:	4618      	mov	r0, r3
    75a6:	4b03      	ldr	r3, [pc, #12]	; (75b4 <TCC2_0_Handler+0x18>)
    75a8:	4798      	blx	r3
}
    75aa:	bf00      	nop
    75ac:	bd80      	pop	{r7, pc}
    75ae:	bf00      	nop
    75b0:	20000bc4 	.word	0x20000bc4
    75b4:	0000752d 	.word	0x0000752d

000075b8 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    75b8:	b480      	push	{r7}
    75ba:	b085      	sub	sp, #20
    75bc:	af00      	add	r7, sp, #0
    75be:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    75c0:	2300      	movs	r3, #0
    75c2:	73fb      	strb	r3, [r7, #15]
    75c4:	e015      	b.n	75f2 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    75c6:	7bfa      	ldrb	r2, [r7, #15]
    75c8:	490f      	ldr	r1, [pc, #60]	; (7608 <_get_tcc_cfg+0x50>)
    75ca:	4613      	mov	r3, r2
    75cc:	005b      	lsls	r3, r3, #1
    75ce:	4413      	add	r3, r2
    75d0:	011b      	lsls	r3, r3, #4
    75d2:	440b      	add	r3, r1
    75d4:	681a      	ldr	r2, [r3, #0]
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	429a      	cmp	r2, r3
    75da:	d107      	bne.n	75ec <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    75dc:	7bfa      	ldrb	r2, [r7, #15]
    75de:	4613      	mov	r3, r2
    75e0:	005b      	lsls	r3, r3, #1
    75e2:	4413      	add	r3, r2
    75e4:	011b      	lsls	r3, r3, #4
    75e6:	4a08      	ldr	r2, [pc, #32]	; (7608 <_get_tcc_cfg+0x50>)
    75e8:	4413      	add	r3, r2
    75ea:	e006      	b.n	75fa <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    75ec:	7bfb      	ldrb	r3, [r7, #15]
    75ee:	3301      	adds	r3, #1
    75f0:	73fb      	strb	r3, [r7, #15]
    75f2:	7bfb      	ldrb	r3, [r7, #15]
    75f4:	2b02      	cmp	r3, #2
    75f6:	d9e6      	bls.n	75c6 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    75f8:	2300      	movs	r3, #0
}
    75fa:	4618      	mov	r0, r3
    75fc:	3714      	adds	r7, #20
    75fe:	46bd      	mov	sp, r7
    7600:	f85d 7b04 	ldr.w	r7, [sp], #4
    7604:	4770      	bx	lr
    7606:	bf00      	nop
    7608:	20000060 	.word	0x20000060

0000760c <__NVIC_EnableIRQ>:
{
    760c:	b480      	push	{r7}
    760e:	b083      	sub	sp, #12
    7610:	af00      	add	r7, sp, #0
    7612:	4603      	mov	r3, r0
    7614:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    761a:	2b00      	cmp	r3, #0
    761c:	db0b      	blt.n	7636 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    761e:	4909      	ldr	r1, [pc, #36]	; (7644 <__NVIC_EnableIRQ+0x38>)
    7620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7624:	095b      	lsrs	r3, r3, #5
    7626:	88fa      	ldrh	r2, [r7, #6]
    7628:	f002 021f 	and.w	r2, r2, #31
    762c:	2001      	movs	r0, #1
    762e:	fa00 f202 	lsl.w	r2, r0, r2
    7632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7636:	bf00      	nop
    7638:	370c      	adds	r7, #12
    763a:	46bd      	mov	sp, r7
    763c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7640:	4770      	bx	lr
    7642:	bf00      	nop
    7644:	e000e100 	.word	0xe000e100

00007648 <__NVIC_DisableIRQ>:
{
    7648:	b480      	push	{r7}
    764a:	b083      	sub	sp, #12
    764c:	af00      	add	r7, sp, #0
    764e:	4603      	mov	r3, r0
    7650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7656:	2b00      	cmp	r3, #0
    7658:	db10      	blt.n	767c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    765a:	490b      	ldr	r1, [pc, #44]	; (7688 <__NVIC_DisableIRQ+0x40>)
    765c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7660:	095b      	lsrs	r3, r3, #5
    7662:	88fa      	ldrh	r2, [r7, #6]
    7664:	f002 021f 	and.w	r2, r2, #31
    7668:	2001      	movs	r0, #1
    766a:	fa00 f202 	lsl.w	r2, r0, r2
    766e:	3320      	adds	r3, #32
    7670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7678:	f3bf 8f6f 	isb	sy
}
    767c:	bf00      	nop
    767e:	370c      	adds	r7, #12
    7680:	46bd      	mov	sp, r7
    7682:	f85d 7b04 	ldr.w	r7, [sp], #4
    7686:	4770      	bx	lr
    7688:	e000e100 	.word	0xe000e100

0000768c <__NVIC_ClearPendingIRQ>:
{
    768c:	b480      	push	{r7}
    768e:	b083      	sub	sp, #12
    7690:	af00      	add	r7, sp, #0
    7692:	4603      	mov	r3, r0
    7694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    769a:	2b00      	cmp	r3, #0
    769c:	db0c      	blt.n	76b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    769e:	4909      	ldr	r1, [pc, #36]	; (76c4 <__NVIC_ClearPendingIRQ+0x38>)
    76a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    76a4:	095b      	lsrs	r3, r3, #5
    76a6:	88fa      	ldrh	r2, [r7, #6]
    76a8:	f002 021f 	and.w	r2, r2, #31
    76ac:	2001      	movs	r0, #1
    76ae:	fa00 f202 	lsl.w	r2, r0, r2
    76b2:	3360      	adds	r3, #96	; 0x60
    76b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76b8:	bf00      	nop
    76ba:	370c      	adds	r7, #12
    76bc:	46bd      	mov	sp, r7
    76be:	f85d 7b04 	ldr.w	r7, [sp], #4
    76c2:	4770      	bx	lr
    76c4:	e000e100 	.word	0xe000e100

000076c8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    76c8:	b480      	push	{r7}
    76ca:	b083      	sub	sp, #12
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
    76d0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76d2:	bf00      	nop
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	691a      	ldr	r2, [r3, #16]
    76d8:	683b      	ldr	r3, [r7, #0]
    76da:	4013      	ands	r3, r2
    76dc:	2b00      	cmp	r3, #0
    76de:	d1f9      	bne.n	76d4 <hri_tc_wait_for_sync+0xc>
	};
}
    76e0:	bf00      	nop
    76e2:	370c      	adds	r7, #12
    76e4:	46bd      	mov	sp, r7
    76e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ea:	4770      	bx	lr

000076ec <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    76ec:	b480      	push	{r7}
    76ee:	b083      	sub	sp, #12
    76f0:	af00      	add	r7, sp, #0
    76f2:	6078      	str	r0, [r7, #4]
    76f4:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	691a      	ldr	r2, [r3, #16]
    76fa:	683b      	ldr	r3, [r7, #0]
    76fc:	4013      	ands	r3, r2
    76fe:	2b00      	cmp	r3, #0
    7700:	bf14      	ite	ne
    7702:	2301      	movne	r3, #1
    7704:	2300      	moveq	r3, #0
    7706:	b2db      	uxtb	r3, r3
}
    7708:	4618      	mov	r0, r3
    770a:	370c      	adds	r7, #12
    770c:	46bd      	mov	sp, r7
    770e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7712:	4770      	bx	lr

00007714 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7714:	b480      	push	{r7}
    7716:	b083      	sub	sp, #12
    7718:	af00      	add	r7, sp, #0
    771a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    771c:	687b      	ldr	r3, [r7, #4]
    771e:	7a9b      	ldrb	r3, [r3, #10]
    7720:	b2db      	uxtb	r3, r3
    7722:	f003 0301 	and.w	r3, r3, #1
    7726:	2b00      	cmp	r3, #0
    7728:	bf14      	ite	ne
    772a:	2301      	movne	r3, #1
    772c:	2300      	moveq	r3, #0
    772e:	b2db      	uxtb	r3, r3
}
    7730:	4618      	mov	r0, r3
    7732:	370c      	adds	r7, #12
    7734:	46bd      	mov	sp, r7
    7736:	f85d 7b04 	ldr.w	r7, [sp], #4
    773a:	4770      	bx	lr

0000773c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    773c:	b480      	push	{r7}
    773e:	b083      	sub	sp, #12
    7740:	af00      	add	r7, sp, #0
    7742:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	2201      	movs	r2, #1
    7748:	729a      	strb	r2, [r3, #10]
}
    774a:	bf00      	nop
    774c:	370c      	adds	r7, #12
    774e:	46bd      	mov	sp, r7
    7750:	f85d 7b04 	ldr.w	r7, [sp], #4
    7754:	4770      	bx	lr

00007756 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7756:	b480      	push	{r7}
    7758:	b083      	sub	sp, #12
    775a:	af00      	add	r7, sp, #0
    775c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    775e:	687b      	ldr	r3, [r7, #4]
    7760:	2202      	movs	r2, #2
    7762:	729a      	strb	r2, [r3, #10]
}
    7764:	bf00      	nop
    7766:	370c      	adds	r7, #12
    7768:	46bd      	mov	sp, r7
    776a:	f85d 7b04 	ldr.w	r7, [sp], #4
    776e:	4770      	bx	lr

00007770 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7770:	b480      	push	{r7}
    7772:	b083      	sub	sp, #12
    7774:	af00      	add	r7, sp, #0
    7776:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7778:	687b      	ldr	r3, [r7, #4]
    777a:	2201      	movs	r2, #1
    777c:	725a      	strb	r2, [r3, #9]
}
    777e:	bf00      	nop
    7780:	370c      	adds	r7, #12
    7782:	46bd      	mov	sp, r7
    7784:	f85d 7b04 	ldr.w	r7, [sp], #4
    7788:	4770      	bx	lr

0000778a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    778a:	b480      	push	{r7}
    778c:	b083      	sub	sp, #12
    778e:	af00      	add	r7, sp, #0
    7790:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	7a5b      	ldrb	r3, [r3, #9]
    7796:	b2db      	uxtb	r3, r3
    7798:	085b      	lsrs	r3, r3, #1
    779a:	f003 0301 	and.w	r3, r3, #1
    779e:	2b00      	cmp	r3, #0
    77a0:	bf14      	ite	ne
    77a2:	2301      	movne	r3, #1
    77a4:	2300      	moveq	r3, #0
    77a6:	b2db      	uxtb	r3, r3
}
    77a8:	4618      	mov	r0, r3
    77aa:	370c      	adds	r7, #12
    77ac:	46bd      	mov	sp, r7
    77ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    77b2:	4770      	bx	lr

000077b4 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    77b4:	b580      	push	{r7, lr}
    77b6:	b082      	sub	sp, #8
    77b8:	af00      	add	r7, sp, #0
    77ba:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	681b      	ldr	r3, [r3, #0]
    77c0:	f043 0201 	orr.w	r2, r3, #1
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    77c8:	2101      	movs	r1, #1
    77ca:	6878      	ldr	r0, [r7, #4]
    77cc:	4b02      	ldr	r3, [pc, #8]	; (77d8 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    77ce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    77d0:	bf00      	nop
    77d2:	3708      	adds	r7, #8
    77d4:	46bd      	mov	sp, r7
    77d6:	bd80      	pop	{r7, pc}
    77d8:	000076c9 	.word	0x000076c9

000077dc <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    77dc:	b580      	push	{r7, lr}
    77de:	b082      	sub	sp, #8
    77e0:	af00      	add	r7, sp, #0
    77e2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	f043 0202 	orr.w	r2, r3, #2
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    77f0:	2103      	movs	r1, #3
    77f2:	6878      	ldr	r0, [r7, #4]
    77f4:	4b02      	ldr	r3, [pc, #8]	; (7800 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    77f6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    77f8:	bf00      	nop
    77fa:	3708      	adds	r7, #8
    77fc:	46bd      	mov	sp, r7
    77fe:	bd80      	pop	{r7, pc}
    7800:	000076c9 	.word	0x000076c9

00007804 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7804:	b580      	push	{r7, lr}
    7806:	b084      	sub	sp, #16
    7808:	af00      	add	r7, sp, #0
    780a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    780c:	2103      	movs	r1, #3
    780e:	6878      	ldr	r0, [r7, #4]
    7810:	4b09      	ldr	r3, [pc, #36]	; (7838 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7812:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	681b      	ldr	r3, [r3, #0]
    7818:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    781a:	68fb      	ldr	r3, [r7, #12]
    781c:	085b      	lsrs	r3, r3, #1
    781e:	f003 0301 	and.w	r3, r3, #1
    7822:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7824:	68fb      	ldr	r3, [r7, #12]
    7826:	2b00      	cmp	r3, #0
    7828:	bf14      	ite	ne
    782a:	2301      	movne	r3, #1
    782c:	2300      	moveq	r3, #0
    782e:	b2db      	uxtb	r3, r3
}
    7830:	4618      	mov	r0, r3
    7832:	3710      	adds	r7, #16
    7834:	46bd      	mov	sp, r7
    7836:	bd80      	pop	{r7, pc}
    7838:	000076c9 	.word	0x000076c9

0000783c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    783c:	b580      	push	{r7, lr}
    783e:	b082      	sub	sp, #8
    7840:	af00      	add	r7, sp, #0
    7842:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	f023 0202 	bic.w	r2, r3, #2
    784c:	687b      	ldr	r3, [r7, #4]
    784e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7850:	2103      	movs	r1, #3
    7852:	6878      	ldr	r0, [r7, #4]
    7854:	4b02      	ldr	r3, [pc, #8]	; (7860 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7856:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7858:	bf00      	nop
    785a:	3708      	adds	r7, #8
    785c:	46bd      	mov	sp, r7
    785e:	bd80      	pop	{r7, pc}
    7860:	000076c9 	.word	0x000076c9

00007864 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7864:	b480      	push	{r7}
    7866:	b085      	sub	sp, #20
    7868:	af00      	add	r7, sp, #0
    786a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    786c:	687b      	ldr	r3, [r7, #4]
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7872:	68fb      	ldr	r3, [r7, #12]
    7874:	089b      	lsrs	r3, r3, #2
    7876:	f003 0303 	and.w	r3, r3, #3
    787a:	60fb      	str	r3, [r7, #12]
	return tmp;
    787c:	68fb      	ldr	r3, [r7, #12]
}
    787e:	4618      	mov	r0, r3
    7880:	3714      	adds	r7, #20
    7882:	46bd      	mov	sp, r7
    7884:	f85d 7b04 	ldr.w	r7, [sp], #4
    7888:	4770      	bx	lr
	...

0000788c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    788c:	b580      	push	{r7, lr}
    788e:	b084      	sub	sp, #16
    7890:	af00      	add	r7, sp, #0
    7892:	6078      	str	r0, [r7, #4]
    7894:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7896:	2103      	movs	r1, #3
    7898:	6878      	ldr	r0, [r7, #4]
    789a:	4b07      	ldr	r3, [pc, #28]	; (78b8 <hri_tc_get_CTRLA_reg+0x2c>)
    789c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	681b      	ldr	r3, [r3, #0]
    78a2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    78a4:	68fa      	ldr	r2, [r7, #12]
    78a6:	683b      	ldr	r3, [r7, #0]
    78a8:	4013      	ands	r3, r2
    78aa:	60fb      	str	r3, [r7, #12]
	return tmp;
    78ac:	68fb      	ldr	r3, [r7, #12]
}
    78ae:	4618      	mov	r0, r3
    78b0:	3710      	adds	r7, #16
    78b2:	46bd      	mov	sp, r7
    78b4:	bd80      	pop	{r7, pc}
    78b6:	bf00      	nop
    78b8:	000076c9 	.word	0x000076c9

000078bc <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    78bc:	b580      	push	{r7, lr}
    78be:	b082      	sub	sp, #8
    78c0:	af00      	add	r7, sp, #0
    78c2:	6078      	str	r0, [r7, #4]
    78c4:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	683a      	ldr	r2, [r7, #0]
    78ca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    78cc:	2103      	movs	r1, #3
    78ce:	6878      	ldr	r0, [r7, #4]
    78d0:	4b02      	ldr	r3, [pc, #8]	; (78dc <hri_tc_write_CTRLA_reg+0x20>)
    78d2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78d4:	bf00      	nop
    78d6:	3708      	adds	r7, #8
    78d8:	46bd      	mov	sp, r7
    78da:	bd80      	pop	{r7, pc}
    78dc:	000076c9 	.word	0x000076c9

000078e0 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    78e0:	b480      	push	{r7}
    78e2:	b083      	sub	sp, #12
    78e4:	af00      	add	r7, sp, #0
    78e6:	6078      	str	r0, [r7, #4]
    78e8:	460b      	mov	r3, r1
    78ea:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	887a      	ldrh	r2, [r7, #2]
    78f0:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    78f2:	bf00      	nop
    78f4:	370c      	adds	r7, #12
    78f6:	46bd      	mov	sp, r7
    78f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78fc:	4770      	bx	lr

000078fe <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    78fe:	b480      	push	{r7}
    7900:	b083      	sub	sp, #12
    7902:	af00      	add	r7, sp, #0
    7904:	6078      	str	r0, [r7, #4]
    7906:	460b      	mov	r3, r1
    7908:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	78fa      	ldrb	r2, [r7, #3]
    790e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7910:	bf00      	nop
    7912:	370c      	adds	r7, #12
    7914:	46bd      	mov	sp, r7
    7916:	f85d 7b04 	ldr.w	r7, [sp], #4
    791a:	4770      	bx	lr

0000791c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    791c:	b480      	push	{r7}
    791e:	b083      	sub	sp, #12
    7920:	af00      	add	r7, sp, #0
    7922:	6078      	str	r0, [r7, #4]
    7924:	460b      	mov	r3, r1
    7926:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	78fa      	ldrb	r2, [r7, #3]
    792c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    792e:	bf00      	nop
    7930:	370c      	adds	r7, #12
    7932:	46bd      	mov	sp, r7
    7934:	f85d 7b04 	ldr.w	r7, [sp], #4
    7938:	4770      	bx	lr
	...

0000793c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    793c:	b580      	push	{r7, lr}
    793e:	b082      	sub	sp, #8
    7940:	af00      	add	r7, sp, #0
    7942:	6078      	str	r0, [r7, #4]
    7944:	460b      	mov	r3, r1
    7946:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	78fa      	ldrb	r2, [r7, #3]
    794c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    794e:	2120      	movs	r1, #32
    7950:	6878      	ldr	r0, [r7, #4]
    7952:	4b03      	ldr	r3, [pc, #12]	; (7960 <hri_tccount8_write_PER_reg+0x24>)
    7954:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7956:	bf00      	nop
    7958:	3708      	adds	r7, #8
    795a:	46bd      	mov	sp, r7
    795c:	bd80      	pop	{r7, pc}
    795e:	bf00      	nop
    7960:	000076c9 	.word	0x000076c9

00007964 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7964:	b580      	push	{r7, lr}
    7966:	b082      	sub	sp, #8
    7968:	af00      	add	r7, sp, #0
    796a:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    796c:	2120      	movs	r1, #32
    796e:	6878      	ldr	r0, [r7, #4]
    7970:	4b04      	ldr	r3, [pc, #16]	; (7984 <hri_tccount8_read_PER_reg+0x20>)
    7972:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7974:	687b      	ldr	r3, [r7, #4]
    7976:	7edb      	ldrb	r3, [r3, #27]
    7978:	b2db      	uxtb	r3, r3
}
    797a:	4618      	mov	r0, r3
    797c:	3708      	adds	r7, #8
    797e:	46bd      	mov	sp, r7
    7980:	bd80      	pop	{r7, pc}
    7982:	bf00      	nop
    7984:	000076c9 	.word	0x000076c9

00007988 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7988:	b580      	push	{r7, lr}
    798a:	b082      	sub	sp, #8
    798c:	af00      	add	r7, sp, #0
    798e:	6078      	str	r0, [r7, #4]
    7990:	460b      	mov	r3, r1
    7992:	70fb      	strb	r3, [r7, #3]
    7994:	4613      	mov	r3, r2
    7996:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7998:	78fb      	ldrb	r3, [r7, #3]
    799a:	687a      	ldr	r2, [r7, #4]
    799c:	4413      	add	r3, r2
    799e:	78ba      	ldrb	r2, [r7, #2]
    79a0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    79a2:	21c0      	movs	r1, #192	; 0xc0
    79a4:	6878      	ldr	r0, [r7, #4]
    79a6:	4b03      	ldr	r3, [pc, #12]	; (79b4 <hri_tccount8_write_CC_reg+0x2c>)
    79a8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79aa:	bf00      	nop
    79ac:	3708      	adds	r7, #8
    79ae:	46bd      	mov	sp, r7
    79b0:	bd80      	pop	{r7, pc}
    79b2:	bf00      	nop
    79b4:	000076c9 	.word	0x000076c9

000079b8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    79b8:	b580      	push	{r7, lr}
    79ba:	b082      	sub	sp, #8
    79bc:	af00      	add	r7, sp, #0
    79be:	6078      	str	r0, [r7, #4]
    79c0:	460b      	mov	r3, r1
    79c2:	70fb      	strb	r3, [r7, #3]
    79c4:	4613      	mov	r3, r2
    79c6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    79c8:	78fb      	ldrb	r3, [r7, #3]
    79ca:	687a      	ldr	r2, [r7, #4]
    79cc:	330c      	adds	r3, #12
    79ce:	005b      	lsls	r3, r3, #1
    79d0:	4413      	add	r3, r2
    79d2:	883a      	ldrh	r2, [r7, #0]
    79d4:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    79d6:	21c0      	movs	r1, #192	; 0xc0
    79d8:	6878      	ldr	r0, [r7, #4]
    79da:	4b03      	ldr	r3, [pc, #12]	; (79e8 <hri_tccount16_write_CC_reg+0x30>)
    79dc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79de:	bf00      	nop
    79e0:	3708      	adds	r7, #8
    79e2:	46bd      	mov	sp, r7
    79e4:	bd80      	pop	{r7, pc}
    79e6:	bf00      	nop
    79e8:	000076c9 	.word	0x000076c9

000079ec <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    79ec:	b580      	push	{r7, lr}
    79ee:	b082      	sub	sp, #8
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
    79f4:	460b      	mov	r3, r1
    79f6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    79f8:	21c0      	movs	r1, #192	; 0xc0
    79fa:	6878      	ldr	r0, [r7, #4]
    79fc:	4b06      	ldr	r3, [pc, #24]	; (7a18 <hri_tccount16_read_CC_reg+0x2c>)
    79fe:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7a00:	78fb      	ldrb	r3, [r7, #3]
    7a02:	687a      	ldr	r2, [r7, #4]
    7a04:	330c      	adds	r3, #12
    7a06:	005b      	lsls	r3, r3, #1
    7a08:	4413      	add	r3, r2
    7a0a:	889b      	ldrh	r3, [r3, #4]
    7a0c:	b29b      	uxth	r3, r3
}
    7a0e:	4618      	mov	r0, r3
    7a10:	3708      	adds	r7, #8
    7a12:	46bd      	mov	sp, r7
    7a14:	bd80      	pop	{r7, pc}
    7a16:	bf00      	nop
    7a18:	000076c9 	.word	0x000076c9

00007a1c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7a1c:	b580      	push	{r7, lr}
    7a1e:	b084      	sub	sp, #16
    7a20:	af00      	add	r7, sp, #0
    7a22:	60f8      	str	r0, [r7, #12]
    7a24:	460b      	mov	r3, r1
    7a26:	607a      	str	r2, [r7, #4]
    7a28:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7a2a:	7afb      	ldrb	r3, [r7, #11]
    7a2c:	68fa      	ldr	r2, [r7, #12]
    7a2e:	3306      	adds	r3, #6
    7a30:	009b      	lsls	r3, r3, #2
    7a32:	4413      	add	r3, r2
    7a34:	687a      	ldr	r2, [r7, #4]
    7a36:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a38:	21c0      	movs	r1, #192	; 0xc0
    7a3a:	68f8      	ldr	r0, [r7, #12]
    7a3c:	4b02      	ldr	r3, [pc, #8]	; (7a48 <hri_tccount32_write_CC_reg+0x2c>)
    7a3e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a40:	bf00      	nop
    7a42:	3710      	adds	r7, #16
    7a44:	46bd      	mov	sp, r7
    7a46:	bd80      	pop	{r7, pc}
    7a48:	000076c9 	.word	0x000076c9

00007a4c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	b082      	sub	sp, #8
    7a50:	af00      	add	r7, sp, #0
    7a52:	6078      	str	r0, [r7, #4]
    7a54:	460b      	mov	r3, r1
    7a56:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a58:	21c0      	movs	r1, #192	; 0xc0
    7a5a:	6878      	ldr	r0, [r7, #4]
    7a5c:	4b05      	ldr	r3, [pc, #20]	; (7a74 <hri_tccount32_read_CC_reg+0x28>)
    7a5e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7a60:	78fb      	ldrb	r3, [r7, #3]
    7a62:	687a      	ldr	r2, [r7, #4]
    7a64:	3306      	adds	r3, #6
    7a66:	009b      	lsls	r3, r3, #2
    7a68:	4413      	add	r3, r2
    7a6a:	685b      	ldr	r3, [r3, #4]
}
    7a6c:	4618      	mov	r0, r3
    7a6e:	3708      	adds	r7, #8
    7a70:	46bd      	mov	sp, r7
    7a72:	bd80      	pop	{r7, pc}
    7a74:	000076c9 	.word	0x000076c9

00007a78 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7a78:	b580      	push	{r7, lr}
    7a7a:	b084      	sub	sp, #16
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	6078      	str	r0, [r7, #4]
    7a80:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7a82:	6838      	ldr	r0, [r7, #0]
    7a84:	4b93      	ldr	r3, [pc, #588]	; (7cd4 <_tc_timer_init+0x25c>)
    7a86:	4798      	blx	r3
    7a88:	4603      	mov	r3, r0
    7a8a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7a8c:	687b      	ldr	r3, [r7, #4]
    7a8e:	683a      	ldr	r2, [r7, #0]
    7a90:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7a92:	22a4      	movs	r2, #164	; 0xa4
    7a94:	4990      	ldr	r1, [pc, #576]	; (7cd8 <_tc_timer_init+0x260>)
    7a96:	2001      	movs	r0, #1
    7a98:	4b90      	ldr	r3, [pc, #576]	; (7cdc <_tc_timer_init+0x264>)
    7a9a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7a9c:	2101      	movs	r1, #1
    7a9e:	6838      	ldr	r0, [r7, #0]
    7aa0:	4b8f      	ldr	r3, [pc, #572]	; (7ce0 <_tc_timer_init+0x268>)
    7aa2:	4798      	blx	r3
    7aa4:	4603      	mov	r3, r0
    7aa6:	f083 0301 	eor.w	r3, r3, #1
    7aaa:	b2db      	uxtb	r3, r3
    7aac:	2b00      	cmp	r3, #0
    7aae:	d011      	beq.n	7ad4 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7ab0:	2102      	movs	r1, #2
    7ab2:	6838      	ldr	r0, [r7, #0]
    7ab4:	4b8b      	ldr	r3, [pc, #556]	; (7ce4 <_tc_timer_init+0x26c>)
    7ab6:	4798      	blx	r3
    7ab8:	4603      	mov	r3, r0
    7aba:	2b00      	cmp	r3, #0
    7abc:	d006      	beq.n	7acc <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7abe:	6838      	ldr	r0, [r7, #0]
    7ac0:	4b89      	ldr	r3, [pc, #548]	; (7ce8 <_tc_timer_init+0x270>)
    7ac2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7ac4:	2102      	movs	r1, #2
    7ac6:	6838      	ldr	r0, [r7, #0]
    7ac8:	4b88      	ldr	r3, [pc, #544]	; (7cec <_tc_timer_init+0x274>)
    7aca:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7acc:	2101      	movs	r1, #1
    7ace:	6838      	ldr	r0, [r7, #0]
    7ad0:	4b87      	ldr	r3, [pc, #540]	; (7cf0 <_tc_timer_init+0x278>)
    7ad2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7ad4:	2101      	movs	r1, #1
    7ad6:	6838      	ldr	r0, [r7, #0]
    7ad8:	4b84      	ldr	r3, [pc, #528]	; (7cec <_tc_timer_init+0x274>)
    7ada:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7adc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ae0:	4984      	ldr	r1, [pc, #528]	; (7cf4 <_tc_timer_init+0x27c>)
    7ae2:	4613      	mov	r3, r2
    7ae4:	009b      	lsls	r3, r3, #2
    7ae6:	4413      	add	r3, r2
    7ae8:	009b      	lsls	r3, r3, #2
    7aea:	440b      	add	r3, r1
    7aec:	3304      	adds	r3, #4
    7aee:	681b      	ldr	r3, [r3, #0]
    7af0:	4619      	mov	r1, r3
    7af2:	6838      	ldr	r0, [r7, #0]
    7af4:	4b7e      	ldr	r3, [pc, #504]	; (7cf0 <_tc_timer_init+0x278>)
    7af6:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7af8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7afc:	497d      	ldr	r1, [pc, #500]	; (7cf4 <_tc_timer_init+0x27c>)
    7afe:	4613      	mov	r3, r2
    7b00:	009b      	lsls	r3, r3, #2
    7b02:	4413      	add	r3, r2
    7b04:	009b      	lsls	r3, r3, #2
    7b06:	440b      	add	r3, r1
    7b08:	330a      	adds	r3, #10
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	4619      	mov	r1, r3
    7b0e:	6838      	ldr	r0, [r7, #0]
    7b10:	4b79      	ldr	r3, [pc, #484]	; (7cf8 <_tc_timer_init+0x280>)
    7b12:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7b14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b18:	4976      	ldr	r1, [pc, #472]	; (7cf4 <_tc_timer_init+0x27c>)
    7b1a:	4613      	mov	r3, r2
    7b1c:	009b      	lsls	r3, r3, #2
    7b1e:	4413      	add	r3, r2
    7b20:	009b      	lsls	r3, r3, #2
    7b22:	440b      	add	r3, r1
    7b24:	3308      	adds	r3, #8
    7b26:	881b      	ldrh	r3, [r3, #0]
    7b28:	4619      	mov	r1, r3
    7b2a:	6838      	ldr	r0, [r7, #0]
    7b2c:	4b73      	ldr	r3, [pc, #460]	; (7cfc <_tc_timer_init+0x284>)
    7b2e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7b30:	2101      	movs	r1, #1
    7b32:	6838      	ldr	r0, [r7, #0]
    7b34:	4b72      	ldr	r3, [pc, #456]	; (7d00 <_tc_timer_init+0x288>)
    7b36:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7b38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b3c:	496d      	ldr	r1, [pc, #436]	; (7cf4 <_tc_timer_init+0x27c>)
    7b3e:	4613      	mov	r3, r2
    7b40:	009b      	lsls	r3, r3, #2
    7b42:	4413      	add	r3, r2
    7b44:	009b      	lsls	r3, r3, #2
    7b46:	440b      	add	r3, r1
    7b48:	3304      	adds	r3, #4
    7b4a:	681b      	ldr	r3, [r3, #0]
    7b4c:	f003 030c 	and.w	r3, r3, #12
    7b50:	2b08      	cmp	r3, #8
    7b52:	d11e      	bne.n	7b92 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7b54:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b58:	4966      	ldr	r1, [pc, #408]	; (7cf4 <_tc_timer_init+0x27c>)
    7b5a:	4613      	mov	r3, r2
    7b5c:	009b      	lsls	r3, r3, #2
    7b5e:	4413      	add	r3, r2
    7b60:	009b      	lsls	r3, r3, #2
    7b62:	440b      	add	r3, r1
    7b64:	330c      	adds	r3, #12
    7b66:	681b      	ldr	r3, [r3, #0]
    7b68:	461a      	mov	r2, r3
    7b6a:	2100      	movs	r1, #0
    7b6c:	6838      	ldr	r0, [r7, #0]
    7b6e:	4b65      	ldr	r3, [pc, #404]	; (7d04 <_tc_timer_init+0x28c>)
    7b70:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7b72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b76:	495f      	ldr	r1, [pc, #380]	; (7cf4 <_tc_timer_init+0x27c>)
    7b78:	4613      	mov	r3, r2
    7b7a:	009b      	lsls	r3, r3, #2
    7b7c:	4413      	add	r3, r2
    7b7e:	009b      	lsls	r3, r3, #2
    7b80:	440b      	add	r3, r1
    7b82:	3310      	adds	r3, #16
    7b84:	681b      	ldr	r3, [r3, #0]
    7b86:	461a      	mov	r2, r3
    7b88:	2101      	movs	r1, #1
    7b8a:	6838      	ldr	r0, [r7, #0]
    7b8c:	4b5d      	ldr	r3, [pc, #372]	; (7d04 <_tc_timer_init+0x28c>)
    7b8e:	4798      	blx	r3
    7b90:	e06a      	b.n	7c68 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7b92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b96:	4957      	ldr	r1, [pc, #348]	; (7cf4 <_tc_timer_init+0x27c>)
    7b98:	4613      	mov	r3, r2
    7b9a:	009b      	lsls	r3, r3, #2
    7b9c:	4413      	add	r3, r2
    7b9e:	009b      	lsls	r3, r3, #2
    7ba0:	440b      	add	r3, r1
    7ba2:	3304      	adds	r3, #4
    7ba4:	681b      	ldr	r3, [r3, #0]
    7ba6:	f003 030c 	and.w	r3, r3, #12
    7baa:	2b00      	cmp	r3, #0
    7bac:	d120      	bne.n	7bf0 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7bae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bb2:	4950      	ldr	r1, [pc, #320]	; (7cf4 <_tc_timer_init+0x27c>)
    7bb4:	4613      	mov	r3, r2
    7bb6:	009b      	lsls	r3, r3, #2
    7bb8:	4413      	add	r3, r2
    7bba:	009b      	lsls	r3, r3, #2
    7bbc:	440b      	add	r3, r1
    7bbe:	330c      	adds	r3, #12
    7bc0:	681b      	ldr	r3, [r3, #0]
    7bc2:	b29b      	uxth	r3, r3
    7bc4:	461a      	mov	r2, r3
    7bc6:	2100      	movs	r1, #0
    7bc8:	6838      	ldr	r0, [r7, #0]
    7bca:	4b4f      	ldr	r3, [pc, #316]	; (7d08 <_tc_timer_init+0x290>)
    7bcc:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7bce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bd2:	4948      	ldr	r1, [pc, #288]	; (7cf4 <_tc_timer_init+0x27c>)
    7bd4:	4613      	mov	r3, r2
    7bd6:	009b      	lsls	r3, r3, #2
    7bd8:	4413      	add	r3, r2
    7bda:	009b      	lsls	r3, r3, #2
    7bdc:	440b      	add	r3, r1
    7bde:	3310      	adds	r3, #16
    7be0:	681b      	ldr	r3, [r3, #0]
    7be2:	b29b      	uxth	r3, r3
    7be4:	461a      	mov	r2, r3
    7be6:	2101      	movs	r1, #1
    7be8:	6838      	ldr	r0, [r7, #0]
    7bea:	4b47      	ldr	r3, [pc, #284]	; (7d08 <_tc_timer_init+0x290>)
    7bec:	4798      	blx	r3
    7bee:	e03b      	b.n	7c68 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7bf0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bf4:	493f      	ldr	r1, [pc, #252]	; (7cf4 <_tc_timer_init+0x27c>)
    7bf6:	4613      	mov	r3, r2
    7bf8:	009b      	lsls	r3, r3, #2
    7bfa:	4413      	add	r3, r2
    7bfc:	009b      	lsls	r3, r3, #2
    7bfe:	440b      	add	r3, r1
    7c00:	3304      	adds	r3, #4
    7c02:	681b      	ldr	r3, [r3, #0]
    7c04:	f003 030c 	and.w	r3, r3, #12
    7c08:	2b04      	cmp	r3, #4
    7c0a:	d12d      	bne.n	7c68 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7c0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c10:	4938      	ldr	r1, [pc, #224]	; (7cf4 <_tc_timer_init+0x27c>)
    7c12:	4613      	mov	r3, r2
    7c14:	009b      	lsls	r3, r3, #2
    7c16:	4413      	add	r3, r2
    7c18:	009b      	lsls	r3, r3, #2
    7c1a:	440b      	add	r3, r1
    7c1c:	330c      	adds	r3, #12
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	b2db      	uxtb	r3, r3
    7c22:	461a      	mov	r2, r3
    7c24:	2100      	movs	r1, #0
    7c26:	6838      	ldr	r0, [r7, #0]
    7c28:	4b38      	ldr	r3, [pc, #224]	; (7d0c <_tc_timer_init+0x294>)
    7c2a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7c2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c30:	4930      	ldr	r1, [pc, #192]	; (7cf4 <_tc_timer_init+0x27c>)
    7c32:	4613      	mov	r3, r2
    7c34:	009b      	lsls	r3, r3, #2
    7c36:	4413      	add	r3, r2
    7c38:	009b      	lsls	r3, r3, #2
    7c3a:	440b      	add	r3, r1
    7c3c:	3310      	adds	r3, #16
    7c3e:	681b      	ldr	r3, [r3, #0]
    7c40:	b2db      	uxtb	r3, r3
    7c42:	461a      	mov	r2, r3
    7c44:	2101      	movs	r1, #1
    7c46:	6838      	ldr	r0, [r7, #0]
    7c48:	4b30      	ldr	r3, [pc, #192]	; (7d0c <_tc_timer_init+0x294>)
    7c4a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7c4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c50:	4928      	ldr	r1, [pc, #160]	; (7cf4 <_tc_timer_init+0x27c>)
    7c52:	4613      	mov	r3, r2
    7c54:	009b      	lsls	r3, r3, #2
    7c56:	4413      	add	r3, r2
    7c58:	009b      	lsls	r3, r3, #2
    7c5a:	440b      	add	r3, r1
    7c5c:	330b      	adds	r3, #11
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	4619      	mov	r1, r3
    7c62:	6838      	ldr	r0, [r7, #0]
    7c64:	4b2a      	ldr	r3, [pc, #168]	; (7d10 <_tc_timer_init+0x298>)
    7c66:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7c68:	6838      	ldr	r0, [r7, #0]
    7c6a:	4b2a      	ldr	r3, [pc, #168]	; (7d14 <_tc_timer_init+0x29c>)
    7c6c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7c6e:	6879      	ldr	r1, [r7, #4]
    7c70:	6838      	ldr	r0, [r7, #0]
    7c72:	4b29      	ldr	r3, [pc, #164]	; (7d18 <_tc_timer_init+0x2a0>)
    7c74:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7c76:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c7a:	491e      	ldr	r1, [pc, #120]	; (7cf4 <_tc_timer_init+0x27c>)
    7c7c:	4613      	mov	r3, r2
    7c7e:	009b      	lsls	r3, r3, #2
    7c80:	4413      	add	r3, r2
    7c82:	009b      	lsls	r3, r3, #2
    7c84:	440b      	add	r3, r1
    7c86:	3302      	adds	r3, #2
    7c88:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c8c:	4618      	mov	r0, r3
    7c8e:	4b23      	ldr	r3, [pc, #140]	; (7d1c <_tc_timer_init+0x2a4>)
    7c90:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7c92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c96:	4917      	ldr	r1, [pc, #92]	; (7cf4 <_tc_timer_init+0x27c>)
    7c98:	4613      	mov	r3, r2
    7c9a:	009b      	lsls	r3, r3, #2
    7c9c:	4413      	add	r3, r2
    7c9e:	009b      	lsls	r3, r3, #2
    7ca0:	440b      	add	r3, r1
    7ca2:	3302      	adds	r3, #2
    7ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ca8:	4618      	mov	r0, r3
    7caa:	4b1d      	ldr	r3, [pc, #116]	; (7d20 <_tc_timer_init+0x2a8>)
    7cac:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7cae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cb2:	4910      	ldr	r1, [pc, #64]	; (7cf4 <_tc_timer_init+0x27c>)
    7cb4:	4613      	mov	r3, r2
    7cb6:	009b      	lsls	r3, r3, #2
    7cb8:	4413      	add	r3, r2
    7cba:	009b      	lsls	r3, r3, #2
    7cbc:	440b      	add	r3, r1
    7cbe:	3302      	adds	r3, #2
    7cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
    7cc4:	4618      	mov	r0, r3
    7cc6:	4b17      	ldr	r3, [pc, #92]	; (7d24 <_tc_timer_init+0x2ac>)
    7cc8:	4798      	blx	r3

	return ERR_NONE;
    7cca:	2300      	movs	r3, #0
}
    7ccc:	4618      	mov	r0, r3
    7cce:	3710      	adds	r7, #16
    7cd0:	46bd      	mov	sp, r7
    7cd2:	bd80      	pop	{r7, pc}
    7cd4:	000082c9 	.word	0x000082c9
    7cd8:	00012360 	.word	0x00012360
    7cdc:	00003681 	.word	0x00003681
    7ce0:	000076ed 	.word	0x000076ed
    7ce4:	0000788d 	.word	0x0000788d
    7ce8:	0000783d 	.word	0x0000783d
    7cec:	000076c9 	.word	0x000076c9
    7cf0:	000078bd 	.word	0x000078bd
    7cf4:	20000110 	.word	0x20000110
    7cf8:	0000791d 	.word	0x0000791d
    7cfc:	000078e1 	.word	0x000078e1
    7d00:	000078ff 	.word	0x000078ff
    7d04:	00007a1d 	.word	0x00007a1d
    7d08:	000079b9 	.word	0x000079b9
    7d0c:	00007989 	.word	0x00007989
    7d10:	0000793d 	.word	0x0000793d
    7d14:	00007771 	.word	0x00007771
    7d18:	00008331 	.word	0x00008331
    7d1c:	00007649 	.word	0x00007649
    7d20:	0000768d 	.word	0x0000768d
    7d24:	0000760d 	.word	0x0000760d

00007d28 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7d28:	b580      	push	{r7, lr}
    7d2a:	b084      	sub	sp, #16
    7d2c:	af00      	add	r7, sp, #0
    7d2e:	6078      	str	r0, [r7, #4]
    7d30:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7d32:	6838      	ldr	r0, [r7, #0]
    7d34:	4b73      	ldr	r3, [pc, #460]	; (7f04 <_pwm_init+0x1dc>)
    7d36:	4798      	blx	r3
    7d38:	4603      	mov	r3, r0
    7d3a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	683a      	ldr	r2, [r7, #0]
    7d40:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d42:	2101      	movs	r1, #1
    7d44:	6838      	ldr	r0, [r7, #0]
    7d46:	4b70      	ldr	r3, [pc, #448]	; (7f08 <_pwm_init+0x1e0>)
    7d48:	4798      	blx	r3
    7d4a:	4603      	mov	r3, r0
    7d4c:	f083 0301 	eor.w	r3, r3, #1
    7d50:	b2db      	uxtb	r3, r3
    7d52:	2b00      	cmp	r3, #0
    7d54:	d011      	beq.n	7d7a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d56:	2102      	movs	r1, #2
    7d58:	6838      	ldr	r0, [r7, #0]
    7d5a:	4b6c      	ldr	r3, [pc, #432]	; (7f0c <_pwm_init+0x1e4>)
    7d5c:	4798      	blx	r3
    7d5e:	4603      	mov	r3, r0
    7d60:	2b00      	cmp	r3, #0
    7d62:	d006      	beq.n	7d72 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d64:	6838      	ldr	r0, [r7, #0]
    7d66:	4b6a      	ldr	r3, [pc, #424]	; (7f10 <_pwm_init+0x1e8>)
    7d68:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d6a:	2102      	movs	r1, #2
    7d6c:	6838      	ldr	r0, [r7, #0]
    7d6e:	4b69      	ldr	r3, [pc, #420]	; (7f14 <_pwm_init+0x1ec>)
    7d70:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d72:	2101      	movs	r1, #1
    7d74:	6838      	ldr	r0, [r7, #0]
    7d76:	4b68      	ldr	r3, [pc, #416]	; (7f18 <_pwm_init+0x1f0>)
    7d78:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d7a:	2101      	movs	r1, #1
    7d7c:	6838      	ldr	r0, [r7, #0]
    7d7e:	4b65      	ldr	r3, [pc, #404]	; (7f14 <_pwm_init+0x1ec>)
    7d80:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d86:	4965      	ldr	r1, [pc, #404]	; (7f1c <_pwm_init+0x1f4>)
    7d88:	4613      	mov	r3, r2
    7d8a:	009b      	lsls	r3, r3, #2
    7d8c:	4413      	add	r3, r2
    7d8e:	009b      	lsls	r3, r3, #2
    7d90:	440b      	add	r3, r1
    7d92:	3304      	adds	r3, #4
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	4619      	mov	r1, r3
    7d98:	6838      	ldr	r0, [r7, #0]
    7d9a:	4b5f      	ldr	r3, [pc, #380]	; (7f18 <_pwm_init+0x1f0>)
    7d9c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7d9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7da2:	495e      	ldr	r1, [pc, #376]	; (7f1c <_pwm_init+0x1f4>)
    7da4:	4613      	mov	r3, r2
    7da6:	009b      	lsls	r3, r3, #2
    7da8:	4413      	add	r3, r2
    7daa:	009b      	lsls	r3, r3, #2
    7dac:	440b      	add	r3, r1
    7dae:	330a      	adds	r3, #10
    7db0:	781b      	ldrb	r3, [r3, #0]
    7db2:	4619      	mov	r1, r3
    7db4:	6838      	ldr	r0, [r7, #0]
    7db6:	4b5a      	ldr	r3, [pc, #360]	; (7f20 <_pwm_init+0x1f8>)
    7db8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7dba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dbe:	4957      	ldr	r1, [pc, #348]	; (7f1c <_pwm_init+0x1f4>)
    7dc0:	4613      	mov	r3, r2
    7dc2:	009b      	lsls	r3, r3, #2
    7dc4:	4413      	add	r3, r2
    7dc6:	009b      	lsls	r3, r3, #2
    7dc8:	440b      	add	r3, r1
    7dca:	3308      	adds	r3, #8
    7dcc:	881b      	ldrh	r3, [r3, #0]
    7dce:	4619      	mov	r1, r3
    7dd0:	6838      	ldr	r0, [r7, #0]
    7dd2:	4b54      	ldr	r3, [pc, #336]	; (7f24 <_pwm_init+0x1fc>)
    7dd4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7dd6:	2103      	movs	r1, #3
    7dd8:	6838      	ldr	r0, [r7, #0]
    7dda:	4b53      	ldr	r3, [pc, #332]	; (7f28 <_pwm_init+0x200>)
    7ddc:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7dde:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7de2:	494e      	ldr	r1, [pc, #312]	; (7f1c <_pwm_init+0x1f4>)
    7de4:	4613      	mov	r3, r2
    7de6:	009b      	lsls	r3, r3, #2
    7de8:	4413      	add	r3, r2
    7dea:	009b      	lsls	r3, r3, #2
    7dec:	440b      	add	r3, r1
    7dee:	3304      	adds	r3, #4
    7df0:	681b      	ldr	r3, [r3, #0]
    7df2:	f003 030c 	and.w	r3, r3, #12
    7df6:	2b08      	cmp	r3, #8
    7df8:	d11e      	bne.n	7e38 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7dfa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dfe:	4947      	ldr	r1, [pc, #284]	; (7f1c <_pwm_init+0x1f4>)
    7e00:	4613      	mov	r3, r2
    7e02:	009b      	lsls	r3, r3, #2
    7e04:	4413      	add	r3, r2
    7e06:	009b      	lsls	r3, r3, #2
    7e08:	440b      	add	r3, r1
    7e0a:	330c      	adds	r3, #12
    7e0c:	681b      	ldr	r3, [r3, #0]
    7e0e:	461a      	mov	r2, r3
    7e10:	2100      	movs	r1, #0
    7e12:	6838      	ldr	r0, [r7, #0]
    7e14:	4b45      	ldr	r3, [pc, #276]	; (7f2c <_pwm_init+0x204>)
    7e16:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7e18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e1c:	493f      	ldr	r1, [pc, #252]	; (7f1c <_pwm_init+0x1f4>)
    7e1e:	4613      	mov	r3, r2
    7e20:	009b      	lsls	r3, r3, #2
    7e22:	4413      	add	r3, r2
    7e24:	009b      	lsls	r3, r3, #2
    7e26:	440b      	add	r3, r1
    7e28:	3310      	adds	r3, #16
    7e2a:	681b      	ldr	r3, [r3, #0]
    7e2c:	461a      	mov	r2, r3
    7e2e:	2101      	movs	r1, #1
    7e30:	6838      	ldr	r0, [r7, #0]
    7e32:	4b3e      	ldr	r3, [pc, #248]	; (7f2c <_pwm_init+0x204>)
    7e34:	4798      	blx	r3
    7e36:	e031      	b.n	7e9c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7e38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e3c:	4937      	ldr	r1, [pc, #220]	; (7f1c <_pwm_init+0x1f4>)
    7e3e:	4613      	mov	r3, r2
    7e40:	009b      	lsls	r3, r3, #2
    7e42:	4413      	add	r3, r2
    7e44:	009b      	lsls	r3, r3, #2
    7e46:	440b      	add	r3, r1
    7e48:	3304      	adds	r3, #4
    7e4a:	681b      	ldr	r3, [r3, #0]
    7e4c:	f003 030c 	and.w	r3, r3, #12
    7e50:	2b00      	cmp	r3, #0
    7e52:	d120      	bne.n	7e96 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7e54:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e58:	4930      	ldr	r1, [pc, #192]	; (7f1c <_pwm_init+0x1f4>)
    7e5a:	4613      	mov	r3, r2
    7e5c:	009b      	lsls	r3, r3, #2
    7e5e:	4413      	add	r3, r2
    7e60:	009b      	lsls	r3, r3, #2
    7e62:	440b      	add	r3, r1
    7e64:	330c      	adds	r3, #12
    7e66:	681b      	ldr	r3, [r3, #0]
    7e68:	b29b      	uxth	r3, r3
    7e6a:	461a      	mov	r2, r3
    7e6c:	2100      	movs	r1, #0
    7e6e:	6838      	ldr	r0, [r7, #0]
    7e70:	4b2f      	ldr	r3, [pc, #188]	; (7f30 <_pwm_init+0x208>)
    7e72:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e78:	4928      	ldr	r1, [pc, #160]	; (7f1c <_pwm_init+0x1f4>)
    7e7a:	4613      	mov	r3, r2
    7e7c:	009b      	lsls	r3, r3, #2
    7e7e:	4413      	add	r3, r2
    7e80:	009b      	lsls	r3, r3, #2
    7e82:	440b      	add	r3, r1
    7e84:	3310      	adds	r3, #16
    7e86:	681b      	ldr	r3, [r3, #0]
    7e88:	b29b      	uxth	r3, r3
    7e8a:	461a      	mov	r2, r3
    7e8c:	2101      	movs	r1, #1
    7e8e:	6838      	ldr	r0, [r7, #0]
    7e90:	4b27      	ldr	r3, [pc, #156]	; (7f30 <_pwm_init+0x208>)
    7e92:	4798      	blx	r3
    7e94:	e002      	b.n	7e9c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7e96:	f04f 33ff 	mov.w	r3, #4294967295
    7e9a:	e02e      	b.n	7efa <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7e9c:	6879      	ldr	r1, [r7, #4]
    7e9e:	6838      	ldr	r0, [r7, #0]
    7ea0:	4b24      	ldr	r3, [pc, #144]	; (7f34 <_pwm_init+0x20c>)
    7ea2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7ea4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ea8:	491c      	ldr	r1, [pc, #112]	; (7f1c <_pwm_init+0x1f4>)
    7eaa:	4613      	mov	r3, r2
    7eac:	009b      	lsls	r3, r3, #2
    7eae:	4413      	add	r3, r2
    7eb0:	009b      	lsls	r3, r3, #2
    7eb2:	440b      	add	r3, r1
    7eb4:	3302      	adds	r3, #2
    7eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
    7eba:	4618      	mov	r0, r3
    7ebc:	4b1e      	ldr	r3, [pc, #120]	; (7f38 <_pwm_init+0x210>)
    7ebe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7ec0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ec4:	4915      	ldr	r1, [pc, #84]	; (7f1c <_pwm_init+0x1f4>)
    7ec6:	4613      	mov	r3, r2
    7ec8:	009b      	lsls	r3, r3, #2
    7eca:	4413      	add	r3, r2
    7ecc:	009b      	lsls	r3, r3, #2
    7ece:	440b      	add	r3, r1
    7ed0:	3302      	adds	r3, #2
    7ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ed6:	4618      	mov	r0, r3
    7ed8:	4b18      	ldr	r3, [pc, #96]	; (7f3c <_pwm_init+0x214>)
    7eda:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7edc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ee0:	490e      	ldr	r1, [pc, #56]	; (7f1c <_pwm_init+0x1f4>)
    7ee2:	4613      	mov	r3, r2
    7ee4:	009b      	lsls	r3, r3, #2
    7ee6:	4413      	add	r3, r2
    7ee8:	009b      	lsls	r3, r3, #2
    7eea:	440b      	add	r3, r1
    7eec:	3302      	adds	r3, #2
    7eee:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ef2:	4618      	mov	r0, r3
    7ef4:	4b12      	ldr	r3, [pc, #72]	; (7f40 <_pwm_init+0x218>)
    7ef6:	4798      	blx	r3

	return 0;
    7ef8:	2300      	movs	r3, #0
}
    7efa:	4618      	mov	r0, r3
    7efc:	3710      	adds	r7, #16
    7efe:	46bd      	mov	sp, r7
    7f00:	bd80      	pop	{r7, pc}
    7f02:	bf00      	nop
    7f04:	000082c9 	.word	0x000082c9
    7f08:	000076ed 	.word	0x000076ed
    7f0c:	0000788d 	.word	0x0000788d
    7f10:	0000783d 	.word	0x0000783d
    7f14:	000076c9 	.word	0x000076c9
    7f18:	000078bd 	.word	0x000078bd
    7f1c:	20000110 	.word	0x20000110
    7f20:	0000791d 	.word	0x0000791d
    7f24:	000078e1 	.word	0x000078e1
    7f28:	000078ff 	.word	0x000078ff
    7f2c:	00007a1d 	.word	0x00007a1d
    7f30:	000079b9 	.word	0x000079b9
    7f34:	00008331 	.word	0x00008331
    7f38:	00007649 	.word	0x00007649
    7f3c:	0000768d 	.word	0x0000768d
    7f40:	0000760d 	.word	0x0000760d

00007f44 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7f44:	b580      	push	{r7, lr}
    7f46:	b084      	sub	sp, #16
    7f48:	af00      	add	r7, sp, #0
    7f4a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	68db      	ldr	r3, [r3, #12]
    7f50:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7f52:	68f8      	ldr	r0, [r7, #12]
    7f54:	4b10      	ldr	r3, [pc, #64]	; (7f98 <_tc_timer_deinit+0x54>)
    7f56:	4798      	blx	r3
    7f58:	4603      	mov	r3, r0
    7f5a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7f5c:	22f9      	movs	r2, #249	; 0xf9
    7f5e:	490f      	ldr	r1, [pc, #60]	; (7f9c <_tc_timer_deinit+0x58>)
    7f60:	2001      	movs	r0, #1
    7f62:	4b0f      	ldr	r3, [pc, #60]	; (7fa0 <_tc_timer_deinit+0x5c>)
    7f64:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7f66:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7f6a:	490e      	ldr	r1, [pc, #56]	; (7fa4 <_tc_timer_deinit+0x60>)
    7f6c:	4613      	mov	r3, r2
    7f6e:	009b      	lsls	r3, r3, #2
    7f70:	4413      	add	r3, r2
    7f72:	009b      	lsls	r3, r3, #2
    7f74:	440b      	add	r3, r1
    7f76:	3302      	adds	r3, #2
    7f78:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f7c:	4618      	mov	r0, r3
    7f7e:	4b0a      	ldr	r3, [pc, #40]	; (7fa8 <_tc_timer_deinit+0x64>)
    7f80:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7f82:	68f8      	ldr	r0, [r7, #12]
    7f84:	4b09      	ldr	r3, [pc, #36]	; (7fac <_tc_timer_deinit+0x68>)
    7f86:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7f88:	68f8      	ldr	r0, [r7, #12]
    7f8a:	4b09      	ldr	r3, [pc, #36]	; (7fb0 <_tc_timer_deinit+0x6c>)
    7f8c:	4798      	blx	r3
}
    7f8e:	bf00      	nop
    7f90:	3710      	adds	r7, #16
    7f92:	46bd      	mov	sp, r7
    7f94:	bd80      	pop	{r7, pc}
    7f96:	bf00      	nop
    7f98:	000082c9 	.word	0x000082c9
    7f9c:	00012360 	.word	0x00012360
    7fa0:	00003681 	.word	0x00003681
    7fa4:	20000110 	.word	0x20000110
    7fa8:	00007649 	.word	0x00007649
    7fac:	0000783d 	.word	0x0000783d
    7fb0:	000077b5 	.word	0x000077b5

00007fb4 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b082      	sub	sp, #8
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	68db      	ldr	r3, [r3, #12]
    7fc0:	4618      	mov	r0, r3
    7fc2:	4b03      	ldr	r3, [pc, #12]	; (7fd0 <_tc_timer_start+0x1c>)
    7fc4:	4798      	blx	r3
}
    7fc6:	bf00      	nop
    7fc8:	3708      	adds	r7, #8
    7fca:	46bd      	mov	sp, r7
    7fcc:	bd80      	pop	{r7, pc}
    7fce:	bf00      	nop
    7fd0:	000077dd 	.word	0x000077dd

00007fd4 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7fd4:	b580      	push	{r7, lr}
    7fd6:	b082      	sub	sp, #8
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	68db      	ldr	r3, [r3, #12]
    7fe0:	4618      	mov	r0, r3
    7fe2:	4b03      	ldr	r3, [pc, #12]	; (7ff0 <_tc_timer_stop+0x1c>)
    7fe4:	4798      	blx	r3
}
    7fe6:	bf00      	nop
    7fe8:	3708      	adds	r7, #8
    7fea:	46bd      	mov	sp, r7
    7fec:	bd80      	pop	{r7, pc}
    7fee:	bf00      	nop
    7ff0:	0000783d 	.word	0x0000783d

00007ff4 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	b084      	sub	sp, #16
    7ff8:	af00      	add	r7, sp, #0
    7ffa:	6078      	str	r0, [r7, #4]
    7ffc:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7ffe:	687b      	ldr	r3, [r7, #4]
    8000:	68db      	ldr	r3, [r3, #12]
    8002:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8004:	68f8      	ldr	r0, [r7, #12]
    8006:	4b14      	ldr	r3, [pc, #80]	; (8058 <_tc_timer_set_period+0x64>)
    8008:	4798      	blx	r3
    800a:	4603      	mov	r3, r0
    800c:	2b02      	cmp	r3, #2
    800e:	d105      	bne.n	801c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8010:	683a      	ldr	r2, [r7, #0]
    8012:	2100      	movs	r1, #0
    8014:	68f8      	ldr	r0, [r7, #12]
    8016:	4b11      	ldr	r3, [pc, #68]	; (805c <_tc_timer_set_period+0x68>)
    8018:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    801a:	e019      	b.n	8050 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    801c:	68f8      	ldr	r0, [r7, #12]
    801e:	4b0e      	ldr	r3, [pc, #56]	; (8058 <_tc_timer_set_period+0x64>)
    8020:	4798      	blx	r3
    8022:	4603      	mov	r3, r0
    8024:	2b00      	cmp	r3, #0
    8026:	d107      	bne.n	8038 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8028:	683b      	ldr	r3, [r7, #0]
    802a:	b29b      	uxth	r3, r3
    802c:	461a      	mov	r2, r3
    802e:	2100      	movs	r1, #0
    8030:	68f8      	ldr	r0, [r7, #12]
    8032:	4b0b      	ldr	r3, [pc, #44]	; (8060 <_tc_timer_set_period+0x6c>)
    8034:	4798      	blx	r3
}
    8036:	e00b      	b.n	8050 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8038:	68f8      	ldr	r0, [r7, #12]
    803a:	4b07      	ldr	r3, [pc, #28]	; (8058 <_tc_timer_set_period+0x64>)
    803c:	4798      	blx	r3
    803e:	4603      	mov	r3, r0
    8040:	2b01      	cmp	r3, #1
    8042:	d105      	bne.n	8050 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	b2db      	uxtb	r3, r3
    8048:	4619      	mov	r1, r3
    804a:	68f8      	ldr	r0, [r7, #12]
    804c:	4b05      	ldr	r3, [pc, #20]	; (8064 <_tc_timer_set_period+0x70>)
    804e:	4798      	blx	r3
}
    8050:	bf00      	nop
    8052:	3710      	adds	r7, #16
    8054:	46bd      	mov	sp, r7
    8056:	bd80      	pop	{r7, pc}
    8058:	00007865 	.word	0x00007865
    805c:	00007a1d 	.word	0x00007a1d
    8060:	000079b9 	.word	0x000079b9
    8064:	0000793d 	.word	0x0000793d

00008068 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8068:	b580      	push	{r7, lr}
    806a:	b084      	sub	sp, #16
    806c:	af00      	add	r7, sp, #0
    806e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8070:	687b      	ldr	r3, [r7, #4]
    8072:	68db      	ldr	r3, [r3, #12]
    8074:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8076:	68f8      	ldr	r0, [r7, #12]
    8078:	4b13      	ldr	r3, [pc, #76]	; (80c8 <_tc_timer_get_period+0x60>)
    807a:	4798      	blx	r3
    807c:	4603      	mov	r3, r0
    807e:	2b02      	cmp	r3, #2
    8080:	d105      	bne.n	808e <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8082:	2100      	movs	r1, #0
    8084:	68f8      	ldr	r0, [r7, #12]
    8086:	4b11      	ldr	r3, [pc, #68]	; (80cc <_tc_timer_get_period+0x64>)
    8088:	4798      	blx	r3
    808a:	4603      	mov	r3, r0
    808c:	e017      	b.n	80be <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    808e:	68f8      	ldr	r0, [r7, #12]
    8090:	4b0d      	ldr	r3, [pc, #52]	; (80c8 <_tc_timer_get_period+0x60>)
    8092:	4798      	blx	r3
    8094:	4603      	mov	r3, r0
    8096:	2b00      	cmp	r3, #0
    8098:	d105      	bne.n	80a6 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    809a:	2100      	movs	r1, #0
    809c:	68f8      	ldr	r0, [r7, #12]
    809e:	4b0c      	ldr	r3, [pc, #48]	; (80d0 <_tc_timer_get_period+0x68>)
    80a0:	4798      	blx	r3
    80a2:	4603      	mov	r3, r0
    80a4:	e00b      	b.n	80be <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    80a6:	68f8      	ldr	r0, [r7, #12]
    80a8:	4b07      	ldr	r3, [pc, #28]	; (80c8 <_tc_timer_get_period+0x60>)
    80aa:	4798      	blx	r3
    80ac:	4603      	mov	r3, r0
    80ae:	2b01      	cmp	r3, #1
    80b0:	d104      	bne.n	80bc <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    80b2:	68f8      	ldr	r0, [r7, #12]
    80b4:	4b07      	ldr	r3, [pc, #28]	; (80d4 <_tc_timer_get_period+0x6c>)
    80b6:	4798      	blx	r3
    80b8:	4603      	mov	r3, r0
    80ba:	e000      	b.n	80be <_tc_timer_get_period+0x56>
	}

	return 0;
    80bc:	2300      	movs	r3, #0
}
    80be:	4618      	mov	r0, r3
    80c0:	3710      	adds	r7, #16
    80c2:	46bd      	mov	sp, r7
    80c4:	bd80      	pop	{r7, pc}
    80c6:	bf00      	nop
    80c8:	00007865 	.word	0x00007865
    80cc:	00007a4d 	.word	0x00007a4d
    80d0:	000079ed 	.word	0x000079ed
    80d4:	00007965 	.word	0x00007965

000080d8 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    80d8:	b580      	push	{r7, lr}
    80da:	b082      	sub	sp, #8
    80dc:	af00      	add	r7, sp, #0
    80de:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    80e0:	687b      	ldr	r3, [r7, #4]
    80e2:	68db      	ldr	r3, [r3, #12]
    80e4:	4618      	mov	r0, r3
    80e6:	4b03      	ldr	r3, [pc, #12]	; (80f4 <_tc_timer_is_started+0x1c>)
    80e8:	4798      	blx	r3
    80ea:	4603      	mov	r3, r0
}
    80ec:	4618      	mov	r0, r3
    80ee:	3708      	adds	r7, #8
    80f0:	46bd      	mov	sp, r7
    80f2:	bd80      	pop	{r7, pc}
    80f4:	00007805 	.word	0x00007805

000080f8 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    80f8:	b480      	push	{r7}
    80fa:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    80fc:	4b02      	ldr	r3, [pc, #8]	; (8108 <_tc_get_timer+0x10>)
}
    80fe:	4618      	mov	r0, r3
    8100:	46bd      	mov	sp, r7
    8102:	f85d 7b04 	ldr.w	r7, [sp], #4
    8106:	4770      	bx	lr
    8108:	20000188 	.word	0x20000188

0000810c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    810c:	b480      	push	{r7}
    810e:	af00      	add	r7, sp, #0
	return NULL;
    8110:	2300      	movs	r3, #0
}
    8112:	4618      	mov	r0, r3
    8114:	46bd      	mov	sp, r7
    8116:	f85d 7b04 	ldr.w	r7, [sp], #4
    811a:	4770      	bx	lr

0000811c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    811c:	b580      	push	{r7, lr}
    811e:	b084      	sub	sp, #16
    8120:	af00      	add	r7, sp, #0
    8122:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	68db      	ldr	r3, [r3, #12]
    8128:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    812a:	68f8      	ldr	r0, [r7, #12]
    812c:	4b0e      	ldr	r3, [pc, #56]	; (8168 <_tc_timer_set_irq+0x4c>)
    812e:	4798      	blx	r3
    8130:	4603      	mov	r3, r0
    8132:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8134:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8138:	490c      	ldr	r1, [pc, #48]	; (816c <_tc_timer_set_irq+0x50>)
    813a:	2001      	movs	r0, #1
    813c:	4b0c      	ldr	r3, [pc, #48]	; (8170 <_tc_timer_set_irq+0x54>)
    813e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8140:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8144:	490b      	ldr	r1, [pc, #44]	; (8174 <_tc_timer_set_irq+0x58>)
    8146:	4613      	mov	r3, r2
    8148:	009b      	lsls	r3, r3, #2
    814a:	4413      	add	r3, r2
    814c:	009b      	lsls	r3, r3, #2
    814e:	440b      	add	r3, r1
    8150:	3302      	adds	r3, #2
    8152:	f9b3 3000 	ldrsh.w	r3, [r3]
    8156:	b2db      	uxtb	r3, r3
    8158:	4618      	mov	r0, r3
    815a:	4b07      	ldr	r3, [pc, #28]	; (8178 <_tc_timer_set_irq+0x5c>)
    815c:	4798      	blx	r3
}
    815e:	bf00      	nop
    8160:	3710      	adds	r7, #16
    8162:	46bd      	mov	sp, r7
    8164:	bd80      	pop	{r7, pc}
    8166:	bf00      	nop
    8168:	000082c9 	.word	0x000082c9
    816c:	00012360 	.word	0x00012360
    8170:	00003681 	.word	0x00003681
    8174:	20000110 	.word	0x20000110
    8178:	00003ec9 	.word	0x00003ec9

0000817c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    817c:	b580      	push	{r7, lr}
    817e:	b084      	sub	sp, #16
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	68db      	ldr	r3, [r3, #12]
    8188:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    818a:	68f8      	ldr	r0, [r7, #12]
    818c:	4b07      	ldr	r3, [pc, #28]	; (81ac <tc_interrupt_handler+0x30>)
    818e:	4798      	blx	r3
    8190:	4603      	mov	r3, r0
    8192:	2b00      	cmp	r3, #0
    8194:	d006      	beq.n	81a4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8196:	68f8      	ldr	r0, [r7, #12]
    8198:	4b05      	ldr	r3, [pc, #20]	; (81b0 <tc_interrupt_handler+0x34>)
    819a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	681b      	ldr	r3, [r3, #0]
    81a0:	6878      	ldr	r0, [r7, #4]
    81a2:	4798      	blx	r3
	}
}
    81a4:	bf00      	nop
    81a6:	3710      	adds	r7, #16
    81a8:	46bd      	mov	sp, r7
    81aa:	bd80      	pop	{r7, pc}
    81ac:	00007715 	.word	0x00007715
    81b0:	0000773d 	.word	0x0000773d

000081b4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    81b4:	b580      	push	{r7, lr}
    81b6:	b084      	sub	sp, #16
    81b8:	af00      	add	r7, sp, #0
    81ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	691b      	ldr	r3, [r3, #16]
    81c0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    81c2:	68f8      	ldr	r0, [r7, #12]
    81c4:	4b12      	ldr	r3, [pc, #72]	; (8210 <tc_pwm_interrupt_handler+0x5c>)
    81c6:	4798      	blx	r3
    81c8:	4603      	mov	r3, r0
    81ca:	2b00      	cmp	r3, #0
    81cc:	d00a      	beq.n	81e4 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    81ce:	68f8      	ldr	r0, [r7, #12]
    81d0:	4b10      	ldr	r3, [pc, #64]	; (8214 <tc_pwm_interrupt_handler+0x60>)
    81d2:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    81d4:	687b      	ldr	r3, [r7, #4]
    81d6:	681b      	ldr	r3, [r3, #0]
    81d8:	2b00      	cmp	r3, #0
    81da:	d003      	beq.n	81e4 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	681b      	ldr	r3, [r3, #0]
    81e0:	6878      	ldr	r0, [r7, #4]
    81e2:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    81e4:	68f8      	ldr	r0, [r7, #12]
    81e6:	4b0c      	ldr	r3, [pc, #48]	; (8218 <tc_pwm_interrupt_handler+0x64>)
    81e8:	4798      	blx	r3
    81ea:	4603      	mov	r3, r0
    81ec:	2b00      	cmp	r3, #0
    81ee:	d00a      	beq.n	8206 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    81f0:	68f8      	ldr	r0, [r7, #12]
    81f2:	4b0a      	ldr	r3, [pc, #40]	; (821c <tc_pwm_interrupt_handler+0x68>)
    81f4:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    81f6:	687b      	ldr	r3, [r7, #4]
    81f8:	685b      	ldr	r3, [r3, #4]
    81fa:	2b00      	cmp	r3, #0
    81fc:	d003      	beq.n	8206 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    81fe:	687b      	ldr	r3, [r7, #4]
    8200:	685b      	ldr	r3, [r3, #4]
    8202:	6878      	ldr	r0, [r7, #4]
    8204:	4798      	blx	r3
		}
	}
}
    8206:	bf00      	nop
    8208:	3710      	adds	r7, #16
    820a:	46bd      	mov	sp, r7
    820c:	bd80      	pop	{r7, pc}
    820e:	bf00      	nop
    8210:	00007715 	.word	0x00007715
    8214:	0000773d 	.word	0x0000773d
    8218:	0000778b 	.word	0x0000778b
    821c:	00007757 	.word	0x00007757

00008220 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8220:	b580      	push	{r7, lr}
    8222:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8224:	4b03      	ldr	r3, [pc, #12]	; (8234 <TC0_Handler+0x14>)
    8226:	681b      	ldr	r3, [r3, #0]
    8228:	4618      	mov	r0, r3
    822a:	4b03      	ldr	r3, [pc, #12]	; (8238 <TC0_Handler+0x18>)
    822c:	4798      	blx	r3
}
    822e:	bf00      	nop
    8230:	bd80      	pop	{r7, pc}
    8232:	bf00      	nop
    8234:	20000bc8 	.word	0x20000bc8
    8238:	0000817d 	.word	0x0000817d

0000823c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    823c:	b580      	push	{r7, lr}
    823e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8240:	4b03      	ldr	r3, [pc, #12]	; (8250 <TC2_Handler+0x14>)
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	4618      	mov	r0, r3
    8246:	4b03      	ldr	r3, [pc, #12]	; (8254 <TC2_Handler+0x18>)
    8248:	4798      	blx	r3
}
    824a:	bf00      	nop
    824c:	bd80      	pop	{r7, pc}
    824e:	bf00      	nop
    8250:	20000bcc 	.word	0x20000bcc
    8254:	0000817d 	.word	0x0000817d

00008258 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8258:	b580      	push	{r7, lr}
    825a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    825c:	4b03      	ldr	r3, [pc, #12]	; (826c <TC4_Handler+0x14>)
    825e:	681b      	ldr	r3, [r3, #0]
    8260:	4618      	mov	r0, r3
    8262:	4b03      	ldr	r3, [pc, #12]	; (8270 <TC4_Handler+0x18>)
    8264:	4798      	blx	r3
}
    8266:	bf00      	nop
    8268:	bd80      	pop	{r7, pc}
    826a:	bf00      	nop
    826c:	20000bd0 	.word	0x20000bd0
    8270:	0000817d 	.word	0x0000817d

00008274 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8274:	b580      	push	{r7, lr}
    8276:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8278:	4b03      	ldr	r3, [pc, #12]	; (8288 <TC5_Handler+0x14>)
    827a:	681b      	ldr	r3, [r3, #0]
    827c:	4618      	mov	r0, r3
    827e:	4b03      	ldr	r3, [pc, #12]	; (828c <TC5_Handler+0x18>)
    8280:	4798      	blx	r3
}
    8282:	bf00      	nop
    8284:	bd80      	pop	{r7, pc}
    8286:	bf00      	nop
    8288:	20000bd4 	.word	0x20000bd4
    828c:	0000817d 	.word	0x0000817d

00008290 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8290:	b580      	push	{r7, lr}
    8292:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8294:	4b03      	ldr	r3, [pc, #12]	; (82a4 <TC6_Handler+0x14>)
    8296:	681b      	ldr	r3, [r3, #0]
    8298:	4618      	mov	r0, r3
    829a:	4b03      	ldr	r3, [pc, #12]	; (82a8 <TC6_Handler+0x18>)
    829c:	4798      	blx	r3
}
    829e:	bf00      	nop
    82a0:	bd80      	pop	{r7, pc}
    82a2:	bf00      	nop
    82a4:	20000bd8 	.word	0x20000bd8
    82a8:	0000817d 	.word	0x0000817d

000082ac <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    82b0:	4b03      	ldr	r3, [pc, #12]	; (82c0 <TC7_Handler+0x14>)
    82b2:	681b      	ldr	r3, [r3, #0]
    82b4:	4618      	mov	r0, r3
    82b6:	4b03      	ldr	r3, [pc, #12]	; (82c4 <TC7_Handler+0x18>)
    82b8:	4798      	blx	r3
}
    82ba:	bf00      	nop
    82bc:	bd80      	pop	{r7, pc}
    82be:	bf00      	nop
    82c0:	20000bdc 	.word	0x20000bdc
    82c4:	000081b5 	.word	0x000081b5

000082c8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    82c8:	b580      	push	{r7, lr}
    82ca:	b084      	sub	sp, #16
    82cc:	af00      	add	r7, sp, #0
    82ce:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    82d0:	6878      	ldr	r0, [r7, #4]
    82d2:	4b13      	ldr	r3, [pc, #76]	; (8320 <get_tc_index+0x58>)
    82d4:	4798      	blx	r3
    82d6:	4603      	mov	r3, r0
    82d8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82da:	2300      	movs	r3, #0
    82dc:	73fb      	strb	r3, [r7, #15]
    82de:	e010      	b.n	8302 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    82e0:	7bfa      	ldrb	r2, [r7, #15]
    82e2:	4910      	ldr	r1, [pc, #64]	; (8324 <get_tc_index+0x5c>)
    82e4:	4613      	mov	r3, r2
    82e6:	009b      	lsls	r3, r3, #2
    82e8:	4413      	add	r3, r2
    82ea:	009b      	lsls	r3, r3, #2
    82ec:	440b      	add	r3, r1
    82ee:	781b      	ldrb	r3, [r3, #0]
    82f0:	7bba      	ldrb	r2, [r7, #14]
    82f2:	429a      	cmp	r2, r3
    82f4:	d102      	bne.n	82fc <get_tc_index+0x34>
			return i;
    82f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    82fa:	e00d      	b.n	8318 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82fc:	7bfb      	ldrb	r3, [r7, #15]
    82fe:	3301      	adds	r3, #1
    8300:	73fb      	strb	r3, [r7, #15]
    8302:	7bfb      	ldrb	r3, [r7, #15]
    8304:	2b05      	cmp	r3, #5
    8306:	d9eb      	bls.n	82e0 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8308:	f240 221d 	movw	r2, #541	; 0x21d
    830c:	4906      	ldr	r1, [pc, #24]	; (8328 <get_tc_index+0x60>)
    830e:	2000      	movs	r0, #0
    8310:	4b06      	ldr	r3, [pc, #24]	; (832c <get_tc_index+0x64>)
    8312:	4798      	blx	r3
	return -1;
    8314:	f04f 33ff 	mov.w	r3, #4294967295
}
    8318:	4618      	mov	r0, r3
    831a:	3710      	adds	r7, #16
    831c:	46bd      	mov	sp, r7
    831e:	bd80      	pop	{r7, pc}
    8320:	000083cd 	.word	0x000083cd
    8324:	20000110 	.word	0x20000110
    8328:	00012360 	.word	0x00012360
    832c:	00003681 	.word	0x00003681

00008330 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8330:	b480      	push	{r7}
    8332:	b083      	sub	sp, #12
    8334:	af00      	add	r7, sp, #0
    8336:	6078      	str	r0, [r7, #4]
    8338:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	4a17      	ldr	r2, [pc, #92]	; (839c <_tc_init_irq_param+0x6c>)
    833e:	4293      	cmp	r3, r2
    8340:	d102      	bne.n	8348 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8342:	4a17      	ldr	r2, [pc, #92]	; (83a0 <_tc_init_irq_param+0x70>)
    8344:	683b      	ldr	r3, [r7, #0]
    8346:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8348:	687b      	ldr	r3, [r7, #4]
    834a:	4a16      	ldr	r2, [pc, #88]	; (83a4 <_tc_init_irq_param+0x74>)
    834c:	4293      	cmp	r3, r2
    834e:	d102      	bne.n	8356 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8350:	4a15      	ldr	r2, [pc, #84]	; (83a8 <_tc_init_irq_param+0x78>)
    8352:	683b      	ldr	r3, [r7, #0]
    8354:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8356:	687b      	ldr	r3, [r7, #4]
    8358:	4a14      	ldr	r2, [pc, #80]	; (83ac <_tc_init_irq_param+0x7c>)
    835a:	4293      	cmp	r3, r2
    835c:	d102      	bne.n	8364 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    835e:	4a14      	ldr	r2, [pc, #80]	; (83b0 <_tc_init_irq_param+0x80>)
    8360:	683b      	ldr	r3, [r7, #0]
    8362:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8364:	687b      	ldr	r3, [r7, #4]
    8366:	4a13      	ldr	r2, [pc, #76]	; (83b4 <_tc_init_irq_param+0x84>)
    8368:	4293      	cmp	r3, r2
    836a:	d102      	bne.n	8372 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    836c:	4a12      	ldr	r2, [pc, #72]	; (83b8 <_tc_init_irq_param+0x88>)
    836e:	683b      	ldr	r3, [r7, #0]
    8370:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8372:	687b      	ldr	r3, [r7, #4]
    8374:	4a11      	ldr	r2, [pc, #68]	; (83bc <_tc_init_irq_param+0x8c>)
    8376:	4293      	cmp	r3, r2
    8378:	d102      	bne.n	8380 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    837a:	4a11      	ldr	r2, [pc, #68]	; (83c0 <_tc_init_irq_param+0x90>)
    837c:	683b      	ldr	r3, [r7, #0]
    837e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8380:	687b      	ldr	r3, [r7, #4]
    8382:	4a10      	ldr	r2, [pc, #64]	; (83c4 <_tc_init_irq_param+0x94>)
    8384:	4293      	cmp	r3, r2
    8386:	d102      	bne.n	838e <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8388:	4a0f      	ldr	r2, [pc, #60]	; (83c8 <_tc_init_irq_param+0x98>)
    838a:	683b      	ldr	r3, [r7, #0]
    838c:	6013      	str	r3, [r2, #0]
	}
}
    838e:	bf00      	nop
    8390:	370c      	adds	r7, #12
    8392:	46bd      	mov	sp, r7
    8394:	f85d 7b04 	ldr.w	r7, [sp], #4
    8398:	4770      	bx	lr
    839a:	bf00      	nop
    839c:	40003800 	.word	0x40003800
    83a0:	20000bc8 	.word	0x20000bc8
    83a4:	4101a000 	.word	0x4101a000
    83a8:	20000bcc 	.word	0x20000bcc
    83ac:	42001400 	.word	0x42001400
    83b0:	20000bd0 	.word	0x20000bd0
    83b4:	42001800 	.word	0x42001800
    83b8:	20000bd4 	.word	0x20000bd4
    83bc:	43001400 	.word	0x43001400
    83c0:	20000bd8 	.word	0x20000bd8
    83c4:	43001800 	.word	0x43001800
    83c8:	20000bdc 	.word	0x20000bdc

000083cc <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    83cc:	b4b0      	push	{r4, r5, r7}
    83ce:	b08d      	sub	sp, #52	; 0x34
    83d0:	af00      	add	r7, sp, #0
    83d2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    83d4:	4b13      	ldr	r3, [pc, #76]	; (8424 <_get_hardware_offset+0x58>)
    83d6:	f107 040c 	add.w	r4, r7, #12
    83da:	461d      	mov	r5, r3
    83dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    83de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    83e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    83e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    83e8:	2300      	movs	r3, #0
    83ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    83ec:	e010      	b.n	8410 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    83ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83f0:	009b      	lsls	r3, r3, #2
    83f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    83f6:	4413      	add	r3, r2
    83f8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    83fc:	461a      	mov	r2, r3
    83fe:	687b      	ldr	r3, [r7, #4]
    8400:	429a      	cmp	r2, r3
    8402:	d102      	bne.n	840a <_get_hardware_offset+0x3e>
			return i;
    8404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8406:	b2db      	uxtb	r3, r3
    8408:	e006      	b.n	8418 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    840c:	3301      	adds	r3, #1
    840e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8412:	2b07      	cmp	r3, #7
    8414:	d9eb      	bls.n	83ee <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8416:	2300      	movs	r3, #0
}
    8418:	4618      	mov	r0, r3
    841a:	3734      	adds	r7, #52	; 0x34
    841c:	46bd      	mov	sp, r7
    841e:	bcb0      	pop	{r4, r5, r7}
    8420:	4770      	bx	lr
    8422:	bf00      	nop
    8424:	00012374 	.word	0x00012374

00008428 <__NVIC_EnableIRQ>:
{
    8428:	b480      	push	{r7}
    842a:	b083      	sub	sp, #12
    842c:	af00      	add	r7, sp, #0
    842e:	4603      	mov	r3, r0
    8430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8436:	2b00      	cmp	r3, #0
    8438:	db0b      	blt.n	8452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    843a:	4909      	ldr	r1, [pc, #36]	; (8460 <__NVIC_EnableIRQ+0x38>)
    843c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8440:	095b      	lsrs	r3, r3, #5
    8442:	88fa      	ldrh	r2, [r7, #6]
    8444:	f002 021f 	and.w	r2, r2, #31
    8448:	2001      	movs	r0, #1
    844a:	fa00 f202 	lsl.w	r2, r0, r2
    844e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8452:	bf00      	nop
    8454:	370c      	adds	r7, #12
    8456:	46bd      	mov	sp, r7
    8458:	f85d 7b04 	ldr.w	r7, [sp], #4
    845c:	4770      	bx	lr
    845e:	bf00      	nop
    8460:	e000e100 	.word	0xe000e100

00008464 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8464:	b480      	push	{r7}
    8466:	b087      	sub	sp, #28
    8468:	af00      	add	r7, sp, #0
    846a:	60f8      	str	r0, [r7, #12]
    846c:	460b      	mov	r3, r1
    846e:	607a      	str	r2, [r7, #4]
    8470:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8472:	7afa      	ldrb	r2, [r7, #11]
    8474:	68f9      	ldr	r1, [r7, #12]
    8476:	4613      	mov	r3, r2
    8478:	009b      	lsls	r3, r3, #2
    847a:	4413      	add	r3, r2
    847c:	009b      	lsls	r3, r3, #2
    847e:	440b      	add	r3, r1
    8480:	3340      	adds	r3, #64	; 0x40
    8482:	681b      	ldr	r3, [r3, #0]
    8484:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8486:	697a      	ldr	r2, [r7, #20]
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	4013      	ands	r3, r2
    848c:	617b      	str	r3, [r7, #20]
	return tmp;
    848e:	697b      	ldr	r3, [r7, #20]
}
    8490:	4618      	mov	r0, r3
    8492:	371c      	adds	r7, #28
    8494:	46bd      	mov	sp, r7
    8496:	f85d 7b04 	ldr.w	r7, [sp], #4
    849a:	4770      	bx	lr

0000849c <hri_oscctrl_get_STATUS_reg>:
{
    849c:	b480      	push	{r7}
    849e:	b085      	sub	sp, #20
    84a0:	af00      	add	r7, sp, #0
    84a2:	6078      	str	r0, [r7, #4]
    84a4:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    84a6:	687b      	ldr	r3, [r7, #4]
    84a8:	691b      	ldr	r3, [r3, #16]
    84aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    84ac:	68fa      	ldr	r2, [r7, #12]
    84ae:	683b      	ldr	r3, [r7, #0]
    84b0:	4013      	ands	r3, r2
    84b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    84b4:	68fb      	ldr	r3, [r7, #12]
}
    84b6:	4618      	mov	r0, r3
    84b8:	3714      	adds	r7, #20
    84ba:	46bd      	mov	sp, r7
    84bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c0:	4770      	bx	lr

000084c2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    84c2:	b480      	push	{r7}
    84c4:	b085      	sub	sp, #20
    84c6:	af00      	add	r7, sp, #0
    84c8:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    84ca:	687b      	ldr	r3, [r7, #4]
    84cc:	f893 3020 	ldrb.w	r3, [r3, #32]
    84d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    84d2:	7bfb      	ldrb	r3, [r7, #15]
    84d4:	f003 0301 	and.w	r3, r3, #1
    84d8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    84da:	7bfb      	ldrb	r3, [r7, #15]
    84dc:	2b00      	cmp	r3, #0
    84de:	bf14      	ite	ne
    84e0:	2301      	movne	r3, #1
    84e2:	2300      	moveq	r3, #0
    84e4:	b2db      	uxtb	r3, r3
}
    84e6:	4618      	mov	r0, r3
    84e8:	3714      	adds	r7, #20
    84ea:	46bd      	mov	sp, r7
    84ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    84f0:	4770      	bx	lr

000084f2 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    84f2:	b480      	push	{r7}
    84f4:	b083      	sub	sp, #12
    84f6:	af00      	add	r7, sp, #0
    84f8:	6078      	str	r0, [r7, #4]
    84fa:	460b      	mov	r3, r1
    84fc:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    84fe:	bf00      	nop
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	789b      	ldrb	r3, [r3, #2]
    8504:	b2da      	uxtb	r2, r3
    8506:	78fb      	ldrb	r3, [r7, #3]
    8508:	4013      	ands	r3, r2
    850a:	b2db      	uxtb	r3, r3
    850c:	2b00      	cmp	r3, #0
    850e:	d1f7      	bne.n	8500 <hri_usb_wait_for_sync+0xe>
	};
}
    8510:	bf00      	nop
    8512:	370c      	adds	r7, #12
    8514:	46bd      	mov	sp, r7
    8516:	f85d 7b04 	ldr.w	r7, [sp], #4
    851a:	4770      	bx	lr

0000851c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    851c:	b480      	push	{r7}
    851e:	b083      	sub	sp, #12
    8520:	af00      	add	r7, sp, #0
    8522:	6078      	str	r0, [r7, #4]
    8524:	460b      	mov	r3, r1
    8526:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8528:	687b      	ldr	r3, [r7, #4]
    852a:	789b      	ldrb	r3, [r3, #2]
    852c:	b2da      	uxtb	r2, r3
    852e:	78fb      	ldrb	r3, [r7, #3]
    8530:	4013      	ands	r3, r2
    8532:	b2db      	uxtb	r3, r3
    8534:	2b00      	cmp	r3, #0
    8536:	bf14      	ite	ne
    8538:	2301      	movne	r3, #1
    853a:	2300      	moveq	r3, #0
    853c:	b2db      	uxtb	r3, r3
}
    853e:	4618      	mov	r0, r3
    8540:	370c      	adds	r7, #12
    8542:	46bd      	mov	sp, r7
    8544:	f85d 7b04 	ldr.w	r7, [sp], #4
    8548:	4770      	bx	lr

0000854a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    854a:	b480      	push	{r7}
    854c:	b085      	sub	sp, #20
    854e:	af00      	add	r7, sp, #0
    8550:	6078      	str	r0, [r7, #4]
    8552:	460b      	mov	r3, r1
    8554:	70fb      	strb	r3, [r7, #3]
    8556:	4613      	mov	r3, r2
    8558:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    855a:	78fb      	ldrb	r3, [r7, #3]
    855c:	687a      	ldr	r2, [r7, #4]
    855e:	3308      	adds	r3, #8
    8560:	015b      	lsls	r3, r3, #5
    8562:	4413      	add	r3, r2
    8564:	3307      	adds	r3, #7
    8566:	781b      	ldrb	r3, [r3, #0]
    8568:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    856a:	7bfa      	ldrb	r2, [r7, #15]
    856c:	78bb      	ldrb	r3, [r7, #2]
    856e:	4013      	ands	r3, r2
    8570:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8572:	7bfb      	ldrb	r3, [r7, #15]
}
    8574:	4618      	mov	r0, r3
    8576:	3714      	adds	r7, #20
    8578:	46bd      	mov	sp, r7
    857a:	f85d 7b04 	ldr.w	r7, [sp], #4
    857e:	4770      	bx	lr

00008580 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8580:	b480      	push	{r7}
    8582:	b083      	sub	sp, #12
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
    8588:	460b      	mov	r3, r1
    858a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    858c:	78fb      	ldrb	r3, [r7, #3]
    858e:	687a      	ldr	r2, [r7, #4]
    8590:	3308      	adds	r3, #8
    8592:	015b      	lsls	r3, r3, #5
    8594:	4413      	add	r3, r2
    8596:	3307      	adds	r3, #7
    8598:	781b      	ldrb	r3, [r3, #0]
    859a:	b2db      	uxtb	r3, r3
}
    859c:	4618      	mov	r0, r3
    859e:	370c      	adds	r7, #12
    85a0:	46bd      	mov	sp, r7
    85a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85a6:	4770      	bx	lr

000085a8 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    85a8:	b480      	push	{r7}
    85aa:	b083      	sub	sp, #12
    85ac:	af00      	add	r7, sp, #0
    85ae:	6078      	str	r0, [r7, #4]
    85b0:	460b      	mov	r3, r1
    85b2:	70fb      	strb	r3, [r7, #3]
    85b4:	4613      	mov	r3, r2
    85b6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    85b8:	78fb      	ldrb	r3, [r7, #3]
    85ba:	687a      	ldr	r2, [r7, #4]
    85bc:	3308      	adds	r3, #8
    85be:	015b      	lsls	r3, r3, #5
    85c0:	4413      	add	r3, r2
    85c2:	3307      	adds	r3, #7
    85c4:	78ba      	ldrb	r2, [r7, #2]
    85c6:	701a      	strb	r2, [r3, #0]
}
    85c8:	bf00      	nop
    85ca:	370c      	adds	r7, #12
    85cc:	46bd      	mov	sp, r7
    85ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d2:	4770      	bx	lr

000085d4 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    85d4:	b480      	push	{r7}
    85d6:	b083      	sub	sp, #12
    85d8:	af00      	add	r7, sp, #0
    85da:	6078      	str	r0, [r7, #4]
    85dc:	460b      	mov	r3, r1
    85de:	70fb      	strb	r3, [r7, #3]
    85e0:	4613      	mov	r3, r2
    85e2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    85e4:	78fb      	ldrb	r3, [r7, #3]
    85e6:	687a      	ldr	r2, [r7, #4]
    85e8:	3308      	adds	r3, #8
    85ea:	015b      	lsls	r3, r3, #5
    85ec:	4413      	add	r3, r2
    85ee:	3305      	adds	r3, #5
    85f0:	78ba      	ldrb	r2, [r7, #2]
    85f2:	701a      	strb	r2, [r3, #0]
}
    85f4:	bf00      	nop
    85f6:	370c      	adds	r7, #12
    85f8:	46bd      	mov	sp, r7
    85fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    85fe:	4770      	bx	lr

00008600 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8600:	b480      	push	{r7}
    8602:	b083      	sub	sp, #12
    8604:	af00      	add	r7, sp, #0
    8606:	6078      	str	r0, [r7, #4]
    8608:	460b      	mov	r3, r1
    860a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    860c:	78fb      	ldrb	r3, [r7, #3]
    860e:	687a      	ldr	r2, [r7, #4]
    8610:	3308      	adds	r3, #8
    8612:	015b      	lsls	r3, r3, #5
    8614:	4413      	add	r3, r2
    8616:	3306      	adds	r3, #6
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	b2db      	uxtb	r3, r3
}
    861c:	4618      	mov	r0, r3
    861e:	370c      	adds	r7, #12
    8620:	46bd      	mov	sp, r7
    8622:	f85d 7b04 	ldr.w	r7, [sp], #4
    8626:	4770      	bx	lr

00008628 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8628:	b480      	push	{r7}
    862a:	b083      	sub	sp, #12
    862c:	af00      	add	r7, sp, #0
    862e:	6078      	str	r0, [r7, #4]
    8630:	460b      	mov	r3, r1
    8632:	70fb      	strb	r3, [r7, #3]
    8634:	4613      	mov	r3, r2
    8636:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8638:	78fb      	ldrb	r3, [r7, #3]
    863a:	687a      	ldr	r2, [r7, #4]
    863c:	3308      	adds	r3, #8
    863e:	015b      	lsls	r3, r3, #5
    8640:	4413      	add	r3, r2
    8642:	3304      	adds	r3, #4
    8644:	78ba      	ldrb	r2, [r7, #2]
    8646:	701a      	strb	r2, [r3, #0]
}
    8648:	bf00      	nop
    864a:	370c      	adds	r7, #12
    864c:	46bd      	mov	sp, r7
    864e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8652:	4770      	bx	lr

00008654 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8654:	b480      	push	{r7}
    8656:	b083      	sub	sp, #12
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
    865c:	460b      	mov	r3, r1
    865e:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8660:	78fb      	ldrb	r3, [r7, #3]
    8662:	687a      	ldr	r2, [r7, #4]
    8664:	015b      	lsls	r3, r3, #5
    8666:	4413      	add	r3, r2
    8668:	f503 7384 	add.w	r3, r3, #264	; 0x108
    866c:	2210      	movs	r2, #16
    866e:	701a      	strb	r2, [r3, #0]
}
    8670:	bf00      	nop
    8672:	370c      	adds	r7, #12
    8674:	46bd      	mov	sp, r7
    8676:	f85d 7b04 	ldr.w	r7, [sp], #4
    867a:	4770      	bx	lr

0000867c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    867c:	b480      	push	{r7}
    867e:	b083      	sub	sp, #12
    8680:	af00      	add	r7, sp, #0
    8682:	6078      	str	r0, [r7, #4]
    8684:	460b      	mov	r3, r1
    8686:	70fb      	strb	r3, [r7, #3]
    8688:	4613      	mov	r3, r2
    868a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    868c:	78fb      	ldrb	r3, [r7, #3]
    868e:	687a      	ldr	r2, [r7, #4]
    8690:	015b      	lsls	r3, r3, #5
    8692:	4413      	add	r3, r2
    8694:	f203 1309 	addw	r3, r3, #265	; 0x109
    8698:	78ba      	ldrb	r2, [r7, #2]
    869a:	701a      	strb	r2, [r3, #0]
}
    869c:	bf00      	nop
    869e:	370c      	adds	r7, #12
    86a0:	46bd      	mov	sp, r7
    86a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a6:	4770      	bx	lr

000086a8 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    86a8:	b480      	push	{r7}
    86aa:	b083      	sub	sp, #12
    86ac:	af00      	add	r7, sp, #0
    86ae:	6078      	str	r0, [r7, #4]
    86b0:	460b      	mov	r3, r1
    86b2:	70fb      	strb	r3, [r7, #3]
    86b4:	4613      	mov	r3, r2
    86b6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    86b8:	78fb      	ldrb	r3, [r7, #3]
    86ba:	687a      	ldr	r2, [r7, #4]
    86bc:	015b      	lsls	r3, r3, #5
    86be:	4413      	add	r3, r2
    86c0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    86c4:	78ba      	ldrb	r2, [r7, #2]
    86c6:	701a      	strb	r2, [r3, #0]
}
    86c8:	bf00      	nop
    86ca:	370c      	adds	r7, #12
    86cc:	46bd      	mov	sp, r7
    86ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d2:	4770      	bx	lr

000086d4 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    86d4:	b480      	push	{r7}
    86d6:	b085      	sub	sp, #20
    86d8:	af00      	add	r7, sp, #0
    86da:	6078      	str	r0, [r7, #4]
    86dc:	460b      	mov	r3, r1
    86de:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    86e0:	78fb      	ldrb	r3, [r7, #3]
    86e2:	687a      	ldr	r2, [r7, #4]
    86e4:	3308      	adds	r3, #8
    86e6:	015b      	lsls	r3, r3, #5
    86e8:	4413      	add	r3, r2
    86ea:	781b      	ldrb	r3, [r3, #0]
    86ec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    86ee:	7bfb      	ldrb	r3, [r7, #15]
    86f0:	f003 0307 	and.w	r3, r3, #7
    86f4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    86f6:	7bfb      	ldrb	r3, [r7, #15]
}
    86f8:	4618      	mov	r0, r3
    86fa:	3714      	adds	r7, #20
    86fc:	46bd      	mov	sp, r7
    86fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8702:	4770      	bx	lr

00008704 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8704:	b480      	push	{r7}
    8706:	b085      	sub	sp, #20
    8708:	af00      	add	r7, sp, #0
    870a:	6078      	str	r0, [r7, #4]
    870c:	460b      	mov	r3, r1
    870e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8710:	78fb      	ldrb	r3, [r7, #3]
    8712:	687a      	ldr	r2, [r7, #4]
    8714:	3308      	adds	r3, #8
    8716:	015b      	lsls	r3, r3, #5
    8718:	4413      	add	r3, r2
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    871e:	7bfb      	ldrb	r3, [r7, #15]
    8720:	091b      	lsrs	r3, r3, #4
    8722:	b2db      	uxtb	r3, r3
    8724:	f003 0307 	and.w	r3, r3, #7
    8728:	73fb      	strb	r3, [r7, #15]
	return tmp;
    872a:	7bfb      	ldrb	r3, [r7, #15]
}
    872c:	4618      	mov	r0, r3
    872e:	3714      	adds	r7, #20
    8730:	46bd      	mov	sp, r7
    8732:	f85d 7b04 	ldr.w	r7, [sp], #4
    8736:	4770      	bx	lr

00008738 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8738:	b480      	push	{r7}
    873a:	b083      	sub	sp, #12
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
    8740:	460b      	mov	r3, r1
    8742:	70fb      	strb	r3, [r7, #3]
    8744:	4613      	mov	r3, r2
    8746:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8748:	78fb      	ldrb	r3, [r7, #3]
    874a:	687a      	ldr	r2, [r7, #4]
    874c:	3308      	adds	r3, #8
    874e:	015b      	lsls	r3, r3, #5
    8750:	4413      	add	r3, r2
    8752:	78ba      	ldrb	r2, [r7, #2]
    8754:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8756:	bf00      	nop
    8758:	370c      	adds	r7, #12
    875a:	46bd      	mov	sp, r7
    875c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8760:	4770      	bx	lr

00008762 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8762:	b480      	push	{r7}
    8764:	b083      	sub	sp, #12
    8766:	af00      	add	r7, sp, #0
    8768:	6078      	str	r0, [r7, #4]
    876a:	460b      	mov	r3, r1
    876c:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    876e:	78fb      	ldrb	r3, [r7, #3]
    8770:	687a      	ldr	r2, [r7, #4]
    8772:	3308      	adds	r3, #8
    8774:	015b      	lsls	r3, r3, #5
    8776:	4413      	add	r3, r2
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	b2db      	uxtb	r3, r3
}
    877c:	4618      	mov	r0, r3
    877e:	370c      	adds	r7, #12
    8780:	46bd      	mov	sp, r7
    8782:	f85d 7b04 	ldr.w	r7, [sp], #4
    8786:	4770      	bx	lr

00008788 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8788:	b480      	push	{r7}
    878a:	b083      	sub	sp, #12
    878c:	af00      	add	r7, sp, #0
    878e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	8b9b      	ldrh	r3, [r3, #28]
    8794:	b29b      	uxth	r3, r3
}
    8796:	4618      	mov	r0, r3
    8798:	370c      	adds	r7, #12
    879a:	46bd      	mov	sp, r7
    879c:	f85d 7b04 	ldr.w	r7, [sp], #4
    87a0:	4770      	bx	lr

000087a2 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    87a2:	b480      	push	{r7}
    87a4:	b083      	sub	sp, #12
    87a6:	af00      	add	r7, sp, #0
    87a8:	6078      	str	r0, [r7, #4]
    87aa:	460b      	mov	r3, r1
    87ac:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	887a      	ldrh	r2, [r7, #2]
    87b2:	839a      	strh	r2, [r3, #28]
}
    87b4:	bf00      	nop
    87b6:	370c      	adds	r7, #12
    87b8:	46bd      	mov	sp, r7
    87ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    87be:	4770      	bx	lr

000087c0 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    87c0:	b480      	push	{r7}
    87c2:	b083      	sub	sp, #12
    87c4:	af00      	add	r7, sp, #0
    87c6:	6078      	str	r0, [r7, #4]
    87c8:	460b      	mov	r3, r1
    87ca:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	887a      	ldrh	r2, [r7, #2]
    87d0:	831a      	strh	r2, [r3, #24]
}
    87d2:	bf00      	nop
    87d4:	370c      	adds	r7, #12
    87d6:	46bd      	mov	sp, r7
    87d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87dc:	4770      	bx	lr

000087de <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    87de:	b480      	push	{r7}
    87e0:	b083      	sub	sp, #12
    87e2:	af00      	add	r7, sp, #0
    87e4:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	8b1b      	ldrh	r3, [r3, #24]
    87ea:	b29b      	uxth	r3, r3
}
    87ec:	4618      	mov	r0, r3
    87ee:	370c      	adds	r7, #12
    87f0:	46bd      	mov	sp, r7
    87f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f6:	4770      	bx	lr

000087f8 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    87f8:	b480      	push	{r7}
    87fa:	b083      	sub	sp, #12
    87fc:	af00      	add	r7, sp, #0
    87fe:	6078      	str	r0, [r7, #4]
    8800:	460b      	mov	r3, r1
    8802:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	887a      	ldrh	r2, [r7, #2]
    8808:	829a      	strh	r2, [r3, #20]
}
    880a:	bf00      	nop
    880c:	370c      	adds	r7, #12
    880e:	46bd      	mov	sp, r7
    8810:	f85d 7b04 	ldr.w	r7, [sp], #4
    8814:	4770      	bx	lr

00008816 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8816:	b480      	push	{r7}
    8818:	b085      	sub	sp, #20
    881a:	af00      	add	r7, sp, #0
    881c:	6078      	str	r0, [r7, #4]
    881e:	460b      	mov	r3, r1
    8820:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	789b      	ldrb	r3, [r3, #2]
    8826:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8828:	7bfa      	ldrb	r2, [r7, #15]
    882a:	78fb      	ldrb	r3, [r7, #3]
    882c:	4013      	ands	r3, r2
    882e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8830:	7bfb      	ldrb	r3, [r7, #15]
}
    8832:	4618      	mov	r0, r3
    8834:	3714      	adds	r7, #20
    8836:	46bd      	mov	sp, r7
    8838:	f85d 7b04 	ldr.w	r7, [sp], #4
    883c:	4770      	bx	lr
	...

00008840 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8840:	b580      	push	{r7, lr}
    8842:	b082      	sub	sp, #8
    8844:	af00      	add	r7, sp, #0
    8846:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8848:	687b      	ldr	r3, [r7, #4]
    884a:	781b      	ldrb	r3, [r3, #0]
    884c:	b2db      	uxtb	r3, r3
    884e:	f023 0302 	bic.w	r3, r3, #2
    8852:	b2da      	uxtb	r2, r3
    8854:	687b      	ldr	r3, [r7, #4]
    8856:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8858:	2103      	movs	r1, #3
    885a:	6878      	ldr	r0, [r7, #4]
    885c:	4b02      	ldr	r3, [pc, #8]	; (8868 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    885e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8860:	bf00      	nop
    8862:	3708      	adds	r7, #8
    8864:	46bd      	mov	sp, r7
    8866:	bd80      	pop	{r7, pc}
    8868:	000084f3 	.word	0x000084f3

0000886c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    886c:	b580      	push	{r7, lr}
    886e:	b084      	sub	sp, #16
    8870:	af00      	add	r7, sp, #0
    8872:	6078      	str	r0, [r7, #4]
    8874:	460b      	mov	r3, r1
    8876:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8878:	2103      	movs	r1, #3
    887a:	6878      	ldr	r0, [r7, #4]
    887c:	4b06      	ldr	r3, [pc, #24]	; (8898 <hri_usb_get_CTRLA_reg+0x2c>)
    887e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8880:	687b      	ldr	r3, [r7, #4]
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8886:	7bfa      	ldrb	r2, [r7, #15]
    8888:	78fb      	ldrb	r3, [r7, #3]
    888a:	4013      	ands	r3, r2
    888c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    888e:	7bfb      	ldrb	r3, [r7, #15]
}
    8890:	4618      	mov	r0, r3
    8892:	3710      	adds	r7, #16
    8894:	46bd      	mov	sp, r7
    8896:	bd80      	pop	{r7, pc}
    8898:	000084f3 	.word	0x000084f3

0000889c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    889c:	b580      	push	{r7, lr}
    889e:	b082      	sub	sp, #8
    88a0:	af00      	add	r7, sp, #0
    88a2:	6078      	str	r0, [r7, #4]
    88a4:	460b      	mov	r3, r1
    88a6:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    88a8:	687b      	ldr	r3, [r7, #4]
    88aa:	78fa      	ldrb	r2, [r7, #3]
    88ac:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    88ae:	2103      	movs	r1, #3
    88b0:	6878      	ldr	r0, [r7, #4]
    88b2:	4b03      	ldr	r3, [pc, #12]	; (88c0 <hri_usb_write_CTRLA_reg+0x24>)
    88b4:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    88b6:	bf00      	nop
    88b8:	3708      	adds	r7, #8
    88ba:	46bd      	mov	sp, r7
    88bc:	bd80      	pop	{r7, pc}
    88be:	bf00      	nop
    88c0:	000084f3 	.word	0x000084f3

000088c4 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    88c4:	b580      	push	{r7, lr}
    88c6:	b082      	sub	sp, #8
    88c8:	af00      	add	r7, sp, #0
    88ca:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    88cc:	2103      	movs	r1, #3
    88ce:	6878      	ldr	r0, [r7, #4]
    88d0:	4b04      	ldr	r3, [pc, #16]	; (88e4 <hri_usb_read_CTRLA_reg+0x20>)
    88d2:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    88d4:	687b      	ldr	r3, [r7, #4]
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	b2db      	uxtb	r3, r3
}
    88da:	4618      	mov	r0, r3
    88dc:	3708      	adds	r7, #8
    88de:	46bd      	mov	sp, r7
    88e0:	bd80      	pop	{r7, pc}
    88e2:	bf00      	nop
    88e4:	000084f3 	.word	0x000084f3

000088e8 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    88e8:	b480      	push	{r7}
    88ea:	b083      	sub	sp, #12
    88ec:	af00      	add	r7, sp, #0
    88ee:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	891b      	ldrh	r3, [r3, #8]
    88f4:	b29b      	uxth	r3, r3
    88f6:	f023 0301 	bic.w	r3, r3, #1
    88fa:	b29a      	uxth	r2, r3
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8900:	bf00      	nop
    8902:	370c      	adds	r7, #12
    8904:	46bd      	mov	sp, r7
    8906:	f85d 7b04 	ldr.w	r7, [sp], #4
    890a:	4770      	bx	lr

0000890c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    890c:	b480      	push	{r7}
    890e:	b083      	sub	sp, #12
    8910:	af00      	add	r7, sp, #0
    8912:	6078      	str	r0, [r7, #4]
    8914:	460b      	mov	r3, r1
    8916:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	887a      	ldrh	r2, [r7, #2]
    891c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    891e:	bf00      	nop
    8920:	370c      	adds	r7, #12
    8922:	46bd      	mov	sp, r7
    8924:	f85d 7b04 	ldr.w	r7, [sp], #4
    8928:	4770      	bx	lr

0000892a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    892a:	b480      	push	{r7}
    892c:	b083      	sub	sp, #12
    892e:	af00      	add	r7, sp, #0
    8930:	6078      	str	r0, [r7, #4]
    8932:	460b      	mov	r3, r1
    8934:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	78fa      	ldrb	r2, [r7, #3]
    893a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    893c:	bf00      	nop
    893e:	370c      	adds	r7, #12
    8940:	46bd      	mov	sp, r7
    8942:	f85d 7b04 	ldr.w	r7, [sp], #4
    8946:	4770      	bx	lr

00008948 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8948:	b480      	push	{r7}
    894a:	b083      	sub	sp, #12
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
    8950:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8952:	687b      	ldr	r3, [r7, #4]
    8954:	683a      	ldr	r2, [r7, #0]
    8956:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8958:	bf00      	nop
    895a:	370c      	adds	r7, #12
    895c:	46bd      	mov	sp, r7
    895e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8962:	4770      	bx	lr

00008964 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8964:	b480      	push	{r7}
    8966:	b083      	sub	sp, #12
    8968:	af00      	add	r7, sp, #0
    896a:	6078      	str	r0, [r7, #4]
    896c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    896e:	2300      	movs	r3, #0
}
    8970:	4618      	mov	r0, r3
    8972:	370c      	adds	r7, #12
    8974:	46bd      	mov	sp, r7
    8976:	f85d 7b04 	ldr.w	r7, [sp], #4
    897a:	4770      	bx	lr

0000897c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    897c:	b480      	push	{r7}
    897e:	b085      	sub	sp, #20
    8980:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8982:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8986:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8988:	4b28      	ldr	r3, [pc, #160]	; (8a2c <_usb_load_calib+0xb0>)
    898a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    898c:	f003 031f 	and.w	r3, r3, #31
    8990:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8992:	4b26      	ldr	r3, [pc, #152]	; (8a2c <_usb_load_calib+0xb0>)
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8998:	f003 031f 	and.w	r3, r3, #31
    899c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    899e:	4b23      	ldr	r3, [pc, #140]	; (8a2c <_usb_load_calib+0xb0>)
    89a0:	681b      	ldr	r3, [r3, #0]
    89a2:	0a9b      	lsrs	r3, r3, #10
    89a4:	f003 0307 	and.w	r3, r3, #7
    89a8:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    89aa:	68fb      	ldr	r3, [r7, #12]
    89ac:	2b00      	cmp	r3, #0
    89ae:	d002      	beq.n	89b6 <_usb_load_calib+0x3a>
    89b0:	68fb      	ldr	r3, [r7, #12]
    89b2:	2b1f      	cmp	r3, #31
    89b4:	d101      	bne.n	89ba <_usb_load_calib+0x3e>
		pad_transn = 9;
    89b6:	2309      	movs	r3, #9
    89b8:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    89ba:	68bb      	ldr	r3, [r7, #8]
    89bc:	2b00      	cmp	r3, #0
    89be:	d002      	beq.n	89c6 <_usb_load_calib+0x4a>
    89c0:	68bb      	ldr	r3, [r7, #8]
    89c2:	2b1f      	cmp	r3, #31
    89c4:	d101      	bne.n	89ca <_usb_load_calib+0x4e>
		pad_transp = 25;
    89c6:	2319      	movs	r3, #25
    89c8:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	2b00      	cmp	r3, #0
    89ce:	d002      	beq.n	89d6 <_usb_load_calib+0x5a>
    89d0:	687b      	ldr	r3, [r7, #4]
    89d2:	2b07      	cmp	r3, #7
    89d4:	d101      	bne.n	89da <_usb_load_calib+0x5e>
		pad_trim = 6;
    89d6:	2306      	movs	r3, #6
    89d8:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    89da:	68fb      	ldr	r3, [r7, #12]
    89dc:	b29b      	uxth	r3, r3
    89de:	019b      	lsls	r3, r3, #6
    89e0:	b29b      	uxth	r3, r3
    89e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    89e6:	b29a      	uxth	r2, r3
    89e8:	68bb      	ldr	r3, [r7, #8]
    89ea:	b29b      	uxth	r3, r3
    89ec:	f003 031f 	and.w	r3, r3, #31
    89f0:	b29b      	uxth	r3, r3
    89f2:	4313      	orrs	r3, r2
    89f4:	b29a      	uxth	r2, r3
    89f6:	687b      	ldr	r3, [r7, #4]
    89f8:	b29b      	uxth	r3, r3
    89fa:	031b      	lsls	r3, r3, #12
    89fc:	b29b      	uxth	r3, r3
    89fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8a02:	b29b      	uxth	r3, r3
    8a04:	4313      	orrs	r3, r2
    8a06:	b29a      	uxth	r2, r3
    8a08:	683b      	ldr	r3, [r7, #0]
    8a0a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8a0c:	683a      	ldr	r2, [r7, #0]
    8a0e:	78d3      	ldrb	r3, [r2, #3]
    8a10:	f043 0303 	orr.w	r3, r3, #3
    8a14:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8a16:	683a      	ldr	r2, [r7, #0]
    8a18:	78d3      	ldrb	r3, [r2, #3]
    8a1a:	f043 030c 	orr.w	r3, r3, #12
    8a1e:	70d3      	strb	r3, [r2, #3]
}
    8a20:	bf00      	nop
    8a22:	3714      	adds	r7, #20
    8a24:	46bd      	mov	sp, r7
    8a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a2a:	4770      	bx	lr
    8a2c:	00800084 	.word	0x00800084

00008a30 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8a30:	b580      	push	{r7, lr}
    8a32:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8a34:	bf00      	nop
    8a36:	2203      	movs	r2, #3
    8a38:	2100      	movs	r1, #0
    8a3a:	4804      	ldr	r0, [pc, #16]	; (8a4c <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8a3c:	4b04      	ldr	r3, [pc, #16]	; (8a50 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8a3e:	4798      	blx	r3
    8a40:	4603      	mov	r3, r0
    8a42:	2b03      	cmp	r3, #3
    8a44:	d1f7      	bne.n	8a36 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8a46:	bf00      	nop
    8a48:	bd80      	pop	{r7, pc}
    8a4a:	bf00      	nop
    8a4c:	40001000 	.word	0x40001000
    8a50:	00008465 	.word	0x00008465

00008a54 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8a54:	b580      	push	{r7, lr}
    8a56:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8a58:	480e      	ldr	r0, [pc, #56]	; (8a94 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a5a:	4b0f      	ldr	r3, [pc, #60]	; (8a98 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8a5c:	4798      	blx	r3
    8a5e:	4603      	mov	r3, r0
    8a60:	2b00      	cmp	r3, #0
    8a62:	d00a      	beq.n	8a7a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8a64:	bf00      	nop
    8a66:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8a6a:	480a      	ldr	r0, [pc, #40]	; (8a94 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a6c:	4b0b      	ldr	r3, [pc, #44]	; (8a9c <_usb_d_dev_wait_dfll_rdy+0x48>)
    8a6e:	4798      	blx	r3
    8a70:	4603      	mov	r3, r0
    8a72:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8a76:	d1f6      	bne.n	8a66 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8a78:	e009      	b.n	8a8e <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8a7a:	bf00      	nop
    8a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
    8a80:	4804      	ldr	r0, [pc, #16]	; (8a94 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a82:	4b06      	ldr	r3, [pc, #24]	; (8a9c <_usb_d_dev_wait_dfll_rdy+0x48>)
    8a84:	4798      	blx	r3
    8a86:	4603      	mov	r3, r0
    8a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8a8c:	d1f6      	bne.n	8a7c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8a8e:	bf00      	nop
    8a90:	bd80      	pop	{r7, pc}
    8a92:	bf00      	nop
    8a94:	40001000 	.word	0x40001000
    8a98:	000084c3 	.word	0x000084c3
    8a9c:	0000849d 	.word	0x0000849d

00008aa0 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8aa0:	b580      	push	{r7, lr}
    8aa2:	b082      	sub	sp, #8
    8aa4:	af00      	add	r7, sp, #0
    8aa6:	4603      	mov	r3, r0
    8aa8:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8aaa:	79fb      	ldrb	r3, [r7, #7]
    8aac:	2b00      	cmp	r3, #0
    8aae:	d102      	bne.n	8ab6 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8ab0:	4b05      	ldr	r3, [pc, #20]	; (8ac8 <_usb_d_dev_wait_clk_rdy+0x28>)
    8ab2:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8ab4:	e004      	b.n	8ac0 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8ab6:	79fb      	ldrb	r3, [r7, #7]
    8ab8:	2b01      	cmp	r3, #1
    8aba:	d101      	bne.n	8ac0 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8abc:	4b03      	ldr	r3, [pc, #12]	; (8acc <_usb_d_dev_wait_clk_rdy+0x2c>)
    8abe:	4798      	blx	r3
}
    8ac0:	bf00      	nop
    8ac2:	3708      	adds	r7, #8
    8ac4:	46bd      	mov	sp, r7
    8ac6:	bd80      	pop	{r7, pc}
    8ac8:	00008a55 	.word	0x00008a55
    8acc:	00008a31 	.word	0x00008a31

00008ad0 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b082      	sub	sp, #8
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	4603      	mov	r3, r0
    8ad8:	6039      	str	r1, [r7, #0]
    8ada:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8adc:	683b      	ldr	r3, [r7, #0]
    8ade:	b2da      	uxtb	r2, r3
    8ae0:	79fb      	ldrb	r3, [r7, #7]
    8ae2:	4619      	mov	r1, r3
    8ae4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ae8:	4b02      	ldr	r3, [pc, #8]	; (8af4 <_usbd_ep_int_ack+0x24>)
    8aea:	4798      	blx	r3
}
    8aec:	bf00      	nop
    8aee:	3708      	adds	r7, #8
    8af0:	46bd      	mov	sp, r7
    8af2:	bd80      	pop	{r7, pc}
    8af4:	000085a9 	.word	0x000085a9

00008af8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8af8:	b580      	push	{r7, lr}
    8afa:	b082      	sub	sp, #8
    8afc:	af00      	add	r7, sp, #0
    8afe:	4603      	mov	r3, r0
    8b00:	6039      	str	r1, [r7, #0]
    8b02:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8b04:	683b      	ldr	r3, [r7, #0]
    8b06:	b2da      	uxtb	r2, r3
    8b08:	79fb      	ldrb	r3, [r7, #7]
    8b0a:	4619      	mov	r1, r3
    8b0c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b10:	4b02      	ldr	r3, [pc, #8]	; (8b1c <_usbd_ep_int_en+0x24>)
    8b12:	4798      	blx	r3
}
    8b14:	bf00      	nop
    8b16:	3708      	adds	r7, #8
    8b18:	46bd      	mov	sp, r7
    8b1a:	bd80      	pop	{r7, pc}
    8b1c:	0000867d 	.word	0x0000867d

00008b20 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	b082      	sub	sp, #8
    8b24:	af00      	add	r7, sp, #0
    8b26:	4603      	mov	r3, r0
    8b28:	6039      	str	r1, [r7, #0]
    8b2a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8b2c:	683b      	ldr	r3, [r7, #0]
    8b2e:	b2da      	uxtb	r2, r3
    8b30:	79fb      	ldrb	r3, [r7, #7]
    8b32:	4619      	mov	r1, r3
    8b34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b38:	4b02      	ldr	r3, [pc, #8]	; (8b44 <_usbd_ep_int_dis+0x24>)
    8b3a:	4798      	blx	r3
}
    8b3c:	bf00      	nop
    8b3e:	3708      	adds	r7, #8
    8b40:	46bd      	mov	sp, r7
    8b42:	bd80      	pop	{r7, pc}
    8b44:	000086a9 	.word	0x000086a9

00008b48 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	af00      	add	r7, sp, #0
    8b4e:	4603      	mov	r3, r0
    8b50:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8b52:	79fb      	ldrb	r3, [r7, #7]
    8b54:	4619      	mov	r1, r3
    8b56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b5a:	4b06      	ldr	r3, [pc, #24]	; (8b74 <_usbd_ep_is_ctrl+0x2c>)
    8b5c:	4798      	blx	r3
    8b5e:	4603      	mov	r3, r0
    8b60:	2b11      	cmp	r3, #17
    8b62:	bf0c      	ite	eq
    8b64:	2301      	moveq	r3, #1
    8b66:	2300      	movne	r3, #0
    8b68:	b2db      	uxtb	r3, r3
}
    8b6a:	4618      	mov	r0, r3
    8b6c:	3708      	adds	r7, #8
    8b6e:	46bd      	mov	sp, r7
    8b70:	bd80      	pop	{r7, pc}
    8b72:	bf00      	nop
    8b74:	00008763 	.word	0x00008763

00008b78 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8b78:	b580      	push	{r7, lr}
    8b7a:	b082      	sub	sp, #8
    8b7c:	af00      	add	r7, sp, #0
    8b7e:	4603      	mov	r3, r0
    8b80:	71fb      	strb	r3, [r7, #7]
    8b82:	460b      	mov	r3, r1
    8b84:	71bb      	strb	r3, [r7, #6]
    8b86:	4613      	mov	r3, r2
    8b88:	717b      	strb	r3, [r7, #5]
	if (st) {
    8b8a:	797b      	ldrb	r3, [r7, #5]
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d00b      	beq.n	8ba8 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b90:	79bb      	ldrb	r3, [r7, #6]
    8b92:	2210      	movs	r2, #16
    8b94:	fa02 f303 	lsl.w	r3, r2, r3
    8b98:	b2da      	uxtb	r2, r3
    8b9a:	79fb      	ldrb	r3, [r7, #7]
    8b9c:	4619      	mov	r1, r3
    8b9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ba2:	4b09      	ldr	r3, [pc, #36]	; (8bc8 <_usbd_ep_set_stall+0x50>)
    8ba4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8ba6:	e00a      	b.n	8bbe <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8ba8:	79bb      	ldrb	r3, [r7, #6]
    8baa:	2210      	movs	r2, #16
    8bac:	fa02 f303 	lsl.w	r3, r2, r3
    8bb0:	b2da      	uxtb	r2, r3
    8bb2:	79fb      	ldrb	r3, [r7, #7]
    8bb4:	4619      	mov	r1, r3
    8bb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bba:	4b04      	ldr	r3, [pc, #16]	; (8bcc <_usbd_ep_set_stall+0x54>)
    8bbc:	4798      	blx	r3
}
    8bbe:	bf00      	nop
    8bc0:	3708      	adds	r7, #8
    8bc2:	46bd      	mov	sp, r7
    8bc4:	bd80      	pop	{r7, pc}
    8bc6:	bf00      	nop
    8bc8:	000085d5 	.word	0x000085d5
    8bcc:	00008629 	.word	0x00008629

00008bd0 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8bd0:	b580      	push	{r7, lr}
    8bd2:	b084      	sub	sp, #16
    8bd4:	af00      	add	r7, sp, #0
    8bd6:	4603      	mov	r3, r0
    8bd8:	460a      	mov	r2, r1
    8bda:	71fb      	strb	r3, [r7, #7]
    8bdc:	4613      	mov	r3, r2
    8bde:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8be0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8be4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8be6:	79fb      	ldrb	r3, [r7, #7]
    8be8:	4619      	mov	r1, r3
    8bea:	68f8      	ldr	r0, [r7, #12]
    8bec:	4b08      	ldr	r3, [pc, #32]	; (8c10 <_usbd_ep_is_stalled+0x40>)
    8bee:	4798      	blx	r3
    8bf0:	4603      	mov	r3, r0
    8bf2:	4619      	mov	r1, r3
    8bf4:	79bb      	ldrb	r3, [r7, #6]
    8bf6:	2210      	movs	r2, #16
    8bf8:	fa02 f303 	lsl.w	r3, r2, r3
    8bfc:	400b      	ands	r3, r1
    8bfe:	2b00      	cmp	r3, #0
    8c00:	bf14      	ite	ne
    8c02:	2301      	movne	r3, #1
    8c04:	2300      	moveq	r3, #0
    8c06:	b2db      	uxtb	r3, r3
}
    8c08:	4618      	mov	r0, r3
    8c0a:	3710      	adds	r7, #16
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	00008601 	.word	0x00008601

00008c14 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8c14:	b580      	push	{r7, lr}
    8c16:	b084      	sub	sp, #16
    8c18:	af00      	add	r7, sp, #0
    8c1a:	4603      	mov	r3, r0
    8c1c:	460a      	mov	r2, r1
    8c1e:	71fb      	strb	r3, [r7, #7]
    8c20:	4613      	mov	r3, r2
    8c22:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8c24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c28:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8c2a:	79fb      	ldrb	r3, [r7, #7]
    8c2c:	4619      	mov	r1, r3
    8c2e:	68f8      	ldr	r0, [r7, #12]
    8c30:	4b08      	ldr	r3, [pc, #32]	; (8c54 <_usbd_ep_is_stall_sent+0x40>)
    8c32:	4798      	blx	r3
    8c34:	4603      	mov	r3, r0
    8c36:	4619      	mov	r1, r3
    8c38:	79bb      	ldrb	r3, [r7, #6]
    8c3a:	2220      	movs	r2, #32
    8c3c:	fa02 f303 	lsl.w	r3, r2, r3
    8c40:	400b      	ands	r3, r1
    8c42:	2b00      	cmp	r3, #0
    8c44:	bf14      	ite	ne
    8c46:	2301      	movne	r3, #1
    8c48:	2300      	moveq	r3, #0
    8c4a:	b2db      	uxtb	r3, r3
}
    8c4c:	4618      	mov	r0, r3
    8c4e:	3710      	adds	r7, #16
    8c50:	46bd      	mov	sp, r7
    8c52:	bd80      	pop	{r7, pc}
    8c54:	00008581 	.word	0x00008581

00008c58 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	b082      	sub	sp, #8
    8c5c:	af00      	add	r7, sp, #0
    8c5e:	4603      	mov	r3, r0
    8c60:	460a      	mov	r2, r1
    8c62:	71fb      	strb	r3, [r7, #7]
    8c64:	4613      	mov	r3, r2
    8c66:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8c68:	79bb      	ldrb	r3, [r7, #6]
    8c6a:	2220      	movs	r2, #32
    8c6c:	409a      	lsls	r2, r3
    8c6e:	79fb      	ldrb	r3, [r7, #7]
    8c70:	4611      	mov	r1, r2
    8c72:	4618      	mov	r0, r3
    8c74:	4b02      	ldr	r3, [pc, #8]	; (8c80 <_usbd_ep_ack_stall+0x28>)
    8c76:	4798      	blx	r3
}
    8c78:	bf00      	nop
    8c7a:	3708      	adds	r7, #8
    8c7c:	46bd      	mov	sp, r7
    8c7e:	bd80      	pop	{r7, pc}
    8c80:	00008ad1 	.word	0x00008ad1

00008c84 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8c84:	b580      	push	{r7, lr}
    8c86:	b082      	sub	sp, #8
    8c88:	af00      	add	r7, sp, #0
    8c8a:	4603      	mov	r3, r0
    8c8c:	71fb      	strb	r3, [r7, #7]
    8c8e:	460b      	mov	r3, r1
    8c90:	71bb      	strb	r3, [r7, #6]
    8c92:	4613      	mov	r3, r2
    8c94:	717b      	strb	r3, [r7, #5]
	if (en) {
    8c96:	797b      	ldrb	r3, [r7, #5]
    8c98:	2b00      	cmp	r3, #0
    8c9a:	d008      	beq.n	8cae <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c9c:	79bb      	ldrb	r3, [r7, #6]
    8c9e:	2220      	movs	r2, #32
    8ca0:	409a      	lsls	r2, r3
    8ca2:	79fb      	ldrb	r3, [r7, #7]
    8ca4:	4611      	mov	r1, r2
    8ca6:	4618      	mov	r0, r3
    8ca8:	4b07      	ldr	r3, [pc, #28]	; (8cc8 <_usbd_ep_int_stall_en+0x44>)
    8caa:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8cac:	e007      	b.n	8cbe <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8cae:	79bb      	ldrb	r3, [r7, #6]
    8cb0:	2220      	movs	r2, #32
    8cb2:	409a      	lsls	r2, r3
    8cb4:	79fb      	ldrb	r3, [r7, #7]
    8cb6:	4611      	mov	r1, r2
    8cb8:	4618      	mov	r0, r3
    8cba:	4b04      	ldr	r3, [pc, #16]	; (8ccc <_usbd_ep_int_stall_en+0x48>)
    8cbc:	4798      	blx	r3
}
    8cbe:	bf00      	nop
    8cc0:	3708      	adds	r7, #8
    8cc2:	46bd      	mov	sp, r7
    8cc4:	bd80      	pop	{r7, pc}
    8cc6:	bf00      	nop
    8cc8:	00008af9 	.word	0x00008af9
    8ccc:	00008b21 	.word	0x00008b21

00008cd0 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8cd0:	b580      	push	{r7, lr}
    8cd2:	b082      	sub	sp, #8
    8cd4:	af00      	add	r7, sp, #0
    8cd6:	4603      	mov	r3, r0
    8cd8:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8cda:	79fb      	ldrb	r3, [r7, #7]
    8cdc:	4619      	mov	r1, r3
    8cde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ce2:	4b03      	ldr	r3, [pc, #12]	; (8cf0 <_usbd_ep_stop_setup+0x20>)
    8ce4:	4798      	blx	r3
}
    8ce6:	bf00      	nop
    8ce8:	3708      	adds	r7, #8
    8cea:	46bd      	mov	sp, r7
    8cec:	bd80      	pop	{r7, pc}
    8cee:	bf00      	nop
    8cf0:	00008655 	.word	0x00008655

00008cf4 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b082      	sub	sp, #8
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	4603      	mov	r3, r0
    8cfc:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8cfe:	79fb      	ldrb	r3, [r7, #7]
    8d00:	2210      	movs	r2, #16
    8d02:	4619      	mov	r1, r3
    8d04:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d08:	4b05      	ldr	r3, [pc, #20]	; (8d20 <_usbd_ep_is_setup+0x2c>)
    8d0a:	4798      	blx	r3
    8d0c:	4603      	mov	r3, r0
    8d0e:	2b00      	cmp	r3, #0
    8d10:	bf14      	ite	ne
    8d12:	2301      	movne	r3, #1
    8d14:	2300      	moveq	r3, #0
    8d16:	b2db      	uxtb	r3, r3
}
    8d18:	4618      	mov	r0, r3
    8d1a:	3708      	adds	r7, #8
    8d1c:	46bd      	mov	sp, r7
    8d1e:	bd80      	pop	{r7, pc}
    8d20:	0000854b 	.word	0x0000854b

00008d24 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	b082      	sub	sp, #8
    8d28:	af00      	add	r7, sp, #0
    8d2a:	4603      	mov	r3, r0
    8d2c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8d2e:	79fb      	ldrb	r3, [r7, #7]
    8d30:	2110      	movs	r1, #16
    8d32:	4618      	mov	r0, r3
    8d34:	4b02      	ldr	r3, [pc, #8]	; (8d40 <_usbd_ep_ack_setup+0x1c>)
    8d36:	4798      	blx	r3
}
    8d38:	bf00      	nop
    8d3a:	3708      	adds	r7, #8
    8d3c:	46bd      	mov	sp, r7
    8d3e:	bd80      	pop	{r7, pc}
    8d40:	00008ad1 	.word	0x00008ad1

00008d44 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8d44:	b580      	push	{r7, lr}
    8d46:	b082      	sub	sp, #8
    8d48:	af00      	add	r7, sp, #0
    8d4a:	4603      	mov	r3, r0
    8d4c:	71fb      	strb	r3, [r7, #7]
    8d4e:	460b      	mov	r3, r1
    8d50:	71bb      	strb	r3, [r7, #6]
    8d52:	4613      	mov	r3, r2
    8d54:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8d56:	797b      	ldrb	r3, [r7, #5]
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d00b      	beq.n	8d74 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8d5c:	79bb      	ldrb	r3, [r7, #6]
    8d5e:	2201      	movs	r2, #1
    8d60:	fa02 f303 	lsl.w	r3, r2, r3
    8d64:	b2da      	uxtb	r2, r3
    8d66:	79fb      	ldrb	r3, [r7, #7]
    8d68:	4619      	mov	r1, r3
    8d6a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d6e:	4b09      	ldr	r3, [pc, #36]	; (8d94 <_usbd_ep_set_toggle+0x50>)
    8d70:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8d72:	e00a      	b.n	8d8a <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8d74:	79bb      	ldrb	r3, [r7, #6]
    8d76:	2201      	movs	r2, #1
    8d78:	fa02 f303 	lsl.w	r3, r2, r3
    8d7c:	b2da      	uxtb	r2, r3
    8d7e:	79fb      	ldrb	r3, [r7, #7]
    8d80:	4619      	mov	r1, r3
    8d82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d86:	4b04      	ldr	r3, [pc, #16]	; (8d98 <_usbd_ep_set_toggle+0x54>)
    8d88:	4798      	blx	r3
}
    8d8a:	bf00      	nop
    8d8c:	3708      	adds	r7, #8
    8d8e:	46bd      	mov	sp, r7
    8d90:	bd80      	pop	{r7, pc}
    8d92:	bf00      	nop
    8d94:	000085d5 	.word	0x000085d5
    8d98:	00008629 	.word	0x00008629

00008d9c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8d9c:	b580      	push	{r7, lr}
    8d9e:	b082      	sub	sp, #8
    8da0:	af00      	add	r7, sp, #0
    8da2:	4603      	mov	r3, r0
    8da4:	460a      	mov	r2, r1
    8da6:	71fb      	strb	r3, [r7, #7]
    8da8:	4613      	mov	r3, r2
    8daa:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8dac:	79bb      	ldrb	r3, [r7, #6]
    8dae:	2201      	movs	r2, #1
    8db0:	409a      	lsls	r2, r3
    8db2:	79fb      	ldrb	r3, [r7, #7]
    8db4:	4611      	mov	r1, r2
    8db6:	4618      	mov	r0, r3
    8db8:	4b02      	ldr	r3, [pc, #8]	; (8dc4 <_usbd_ep_ack_io_cpt+0x28>)
    8dba:	4798      	blx	r3
}
    8dbc:	bf00      	nop
    8dbe:	3708      	adds	r7, #8
    8dc0:	46bd      	mov	sp, r7
    8dc2:	bd80      	pop	{r7, pc}
    8dc4:	00008ad1 	.word	0x00008ad1

00008dc8 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8dc8:	b480      	push	{r7}
    8dca:	b085      	sub	sp, #20
    8dcc:	af00      	add	r7, sp, #0
    8dce:	4603      	mov	r3, r0
    8dd0:	603a      	str	r2, [r7, #0]
    8dd2:	71fb      	strb	r3, [r7, #7]
    8dd4:	460b      	mov	r3, r1
    8dd6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8dd8:	79fa      	ldrb	r2, [r7, #7]
    8dda:	79bb      	ldrb	r3, [r7, #6]
    8ddc:	0052      	lsls	r2, r2, #1
    8dde:	4413      	add	r3, r2
    8de0:	011b      	lsls	r3, r3, #4
    8de2:	4a06      	ldr	r2, [pc, #24]	; (8dfc <_usbd_ep_set_buf+0x34>)
    8de4:	4413      	add	r3, r2
    8de6:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8de8:	68fb      	ldr	r3, [r7, #12]
    8dea:	683a      	ldr	r2, [r7, #0]
    8dec:	601a      	str	r2, [r3, #0]
}
    8dee:	bf00      	nop
    8df0:	3714      	adds	r7, #20
    8df2:	46bd      	mov	sp, r7
    8df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df8:	4770      	bx	lr
    8dfa:	bf00      	nop
    8dfc:	20000ee8 	.word	0x20000ee8

00008e00 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8e00:	b480      	push	{r7}
    8e02:	b085      	sub	sp, #20
    8e04:	af00      	add	r7, sp, #0
    8e06:	4603      	mov	r3, r0
    8e08:	71fb      	strb	r3, [r7, #7]
    8e0a:	460b      	mov	r3, r1
    8e0c:	71bb      	strb	r3, [r7, #6]
    8e0e:	4613      	mov	r3, r2
    8e10:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e12:	79fa      	ldrb	r2, [r7, #7]
    8e14:	79bb      	ldrb	r3, [r7, #6]
    8e16:	0052      	lsls	r2, r2, #1
    8e18:	4413      	add	r3, r2
    8e1a:	011b      	lsls	r3, r3, #4
    8e1c:	4a08      	ldr	r2, [pc, #32]	; (8e40 <_usbd_ep_set_in_count+0x40>)
    8e1e:	4413      	add	r3, r2
    8e20:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8e22:	88bb      	ldrh	r3, [r7, #4]
    8e24:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e28:	b299      	uxth	r1, r3
    8e2a:	68fa      	ldr	r2, [r7, #12]
    8e2c:	6853      	ldr	r3, [r2, #4]
    8e2e:	f361 339b 	bfi	r3, r1, #14, #14
    8e32:	6053      	str	r3, [r2, #4]
}
    8e34:	bf00      	nop
    8e36:	3714      	adds	r7, #20
    8e38:	46bd      	mov	sp, r7
    8e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e3e:	4770      	bx	lr
    8e40:	20000ee8 	.word	0x20000ee8

00008e44 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8e44:	b480      	push	{r7}
    8e46:	b085      	sub	sp, #20
    8e48:	af00      	add	r7, sp, #0
    8e4a:	4603      	mov	r3, r0
    8e4c:	71fb      	strb	r3, [r7, #7]
    8e4e:	460b      	mov	r3, r1
    8e50:	71bb      	strb	r3, [r7, #6]
    8e52:	4613      	mov	r3, r2
    8e54:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e56:	79fa      	ldrb	r2, [r7, #7]
    8e58:	79bb      	ldrb	r3, [r7, #6]
    8e5a:	0052      	lsls	r2, r2, #1
    8e5c:	4413      	add	r3, r2
    8e5e:	011b      	lsls	r3, r3, #4
    8e60:	4a08      	ldr	r2, [pc, #32]	; (8e84 <_usbd_ep_set_in_size+0x40>)
    8e62:	4413      	add	r3, r2
    8e64:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8e66:	88bb      	ldrh	r3, [r7, #4]
    8e68:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e6c:	b299      	uxth	r1, r3
    8e6e:	68fa      	ldr	r2, [r7, #12]
    8e70:	6853      	ldr	r3, [r2, #4]
    8e72:	f361 030d 	bfi	r3, r1, #0, #14
    8e76:	6053      	str	r3, [r2, #4]
}
    8e78:	bf00      	nop
    8e7a:	3714      	adds	r7, #20
    8e7c:	46bd      	mov	sp, r7
    8e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e82:	4770      	bx	lr
    8e84:	20000ee8 	.word	0x20000ee8

00008e88 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8e88:	b480      	push	{r7}
    8e8a:	b085      	sub	sp, #20
    8e8c:	af00      	add	r7, sp, #0
    8e8e:	4603      	mov	r3, r0
    8e90:	71fb      	strb	r3, [r7, #7]
    8e92:	460b      	mov	r3, r1
    8e94:	71bb      	strb	r3, [r7, #6]
    8e96:	4613      	mov	r3, r2
    8e98:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e9a:	79fa      	ldrb	r2, [r7, #7]
    8e9c:	79bb      	ldrb	r3, [r7, #6]
    8e9e:	0052      	lsls	r2, r2, #1
    8ea0:	4413      	add	r3, r2
    8ea2:	011b      	lsls	r3, r3, #4
    8ea4:	4a08      	ldr	r2, [pc, #32]	; (8ec8 <_usbd_ep_set_out_count+0x40>)
    8ea6:	4413      	add	r3, r2
    8ea8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8eaa:	88bb      	ldrh	r3, [r7, #4]
    8eac:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8eb0:	b299      	uxth	r1, r3
    8eb2:	68fa      	ldr	r2, [r7, #12]
    8eb4:	6853      	ldr	r3, [r2, #4]
    8eb6:	f361 030d 	bfi	r3, r1, #0, #14
    8eba:	6053      	str	r3, [r2, #4]
}
    8ebc:	bf00      	nop
    8ebe:	3714      	adds	r7, #20
    8ec0:	46bd      	mov	sp, r7
    8ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ec6:	4770      	bx	lr
    8ec8:	20000ee8 	.word	0x20000ee8

00008ecc <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8ecc:	b480      	push	{r7}
    8ece:	b085      	sub	sp, #20
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	4603      	mov	r3, r0
    8ed4:	71fb      	strb	r3, [r7, #7]
    8ed6:	460b      	mov	r3, r1
    8ed8:	71bb      	strb	r3, [r7, #6]
    8eda:	4613      	mov	r3, r2
    8edc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ede:	79fa      	ldrb	r2, [r7, #7]
    8ee0:	79bb      	ldrb	r3, [r7, #6]
    8ee2:	0052      	lsls	r2, r2, #1
    8ee4:	4413      	add	r3, r2
    8ee6:	011b      	lsls	r3, r3, #4
    8ee8:	4a08      	ldr	r2, [pc, #32]	; (8f0c <_usbd_ep_set_out_size+0x40>)
    8eea:	4413      	add	r3, r2
    8eec:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8eee:	88bb      	ldrh	r3, [r7, #4]
    8ef0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8ef4:	b299      	uxth	r1, r3
    8ef6:	68fa      	ldr	r2, [r7, #12]
    8ef8:	6853      	ldr	r3, [r2, #4]
    8efa:	f361 339b 	bfi	r3, r1, #14, #14
    8efe:	6053      	str	r3, [r2, #4]
}
    8f00:	bf00      	nop
    8f02:	3714      	adds	r7, #20
    8f04:	46bd      	mov	sp, r7
    8f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f0a:	4770      	bx	lr
    8f0c:	20000ee8 	.word	0x20000ee8

00008f10 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8f10:	b580      	push	{r7, lr}
    8f12:	b084      	sub	sp, #16
    8f14:	af00      	add	r7, sp, #0
    8f16:	60ba      	str	r2, [r7, #8]
    8f18:	607b      	str	r3, [r7, #4]
    8f1a:	4603      	mov	r3, r0
    8f1c:	73fb      	strb	r3, [r7, #15]
    8f1e:	460b      	mov	r3, r1
    8f20:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8f22:	68bb      	ldr	r3, [r7, #8]
    8f24:	b29a      	uxth	r2, r3
    8f26:	7bb9      	ldrb	r1, [r7, #14]
    8f28:	7bfb      	ldrb	r3, [r7, #15]
    8f2a:	4618      	mov	r0, r3
    8f2c:	4b06      	ldr	r3, [pc, #24]	; (8f48 <_usbd_ep_set_in_trans+0x38>)
    8f2e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	b29a      	uxth	r2, r3
    8f34:	7bb9      	ldrb	r1, [r7, #14]
    8f36:	7bfb      	ldrb	r3, [r7, #15]
    8f38:	4618      	mov	r0, r3
    8f3a:	4b04      	ldr	r3, [pc, #16]	; (8f4c <_usbd_ep_set_in_trans+0x3c>)
    8f3c:	4798      	blx	r3
}
    8f3e:	bf00      	nop
    8f40:	3710      	adds	r7, #16
    8f42:	46bd      	mov	sp, r7
    8f44:	bd80      	pop	{r7, pc}
    8f46:	bf00      	nop
    8f48:	00008e45 	.word	0x00008e45
    8f4c:	00008e01 	.word	0x00008e01

00008f50 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8f50:	b580      	push	{r7, lr}
    8f52:	b084      	sub	sp, #16
    8f54:	af00      	add	r7, sp, #0
    8f56:	60ba      	str	r2, [r7, #8]
    8f58:	607b      	str	r3, [r7, #4]
    8f5a:	4603      	mov	r3, r0
    8f5c:	73fb      	strb	r3, [r7, #15]
    8f5e:	460b      	mov	r3, r1
    8f60:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8f62:	68bb      	ldr	r3, [r7, #8]
    8f64:	b29a      	uxth	r2, r3
    8f66:	7bb9      	ldrb	r1, [r7, #14]
    8f68:	7bfb      	ldrb	r3, [r7, #15]
    8f6a:	4618      	mov	r0, r3
    8f6c:	4b06      	ldr	r3, [pc, #24]	; (8f88 <_usbd_ep_set_out_trans+0x38>)
    8f6e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8f70:	687b      	ldr	r3, [r7, #4]
    8f72:	b29a      	uxth	r2, r3
    8f74:	7bb9      	ldrb	r1, [r7, #14]
    8f76:	7bfb      	ldrb	r3, [r7, #15]
    8f78:	4618      	mov	r0, r3
    8f7a:	4b04      	ldr	r3, [pc, #16]	; (8f8c <_usbd_ep_set_out_trans+0x3c>)
    8f7c:	4798      	blx	r3
}
    8f7e:	bf00      	nop
    8f80:	3710      	adds	r7, #16
    8f82:	46bd      	mov	sp, r7
    8f84:	bd80      	pop	{r7, pc}
    8f86:	bf00      	nop
    8f88:	00008ecd 	.word	0x00008ecd
    8f8c:	00008e89 	.word	0x00008e89

00008f90 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8f90:	b480      	push	{r7}
    8f92:	b085      	sub	sp, #20
    8f94:	af00      	add	r7, sp, #0
    8f96:	4603      	mov	r3, r0
    8f98:	460a      	mov	r2, r1
    8f9a:	71fb      	strb	r3, [r7, #7]
    8f9c:	4613      	mov	r3, r2
    8f9e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8fa0:	79fa      	ldrb	r2, [r7, #7]
    8fa2:	79bb      	ldrb	r3, [r7, #6]
    8fa4:	0052      	lsls	r2, r2, #1
    8fa6:	4413      	add	r3, r2
    8fa8:	011b      	lsls	r3, r3, #4
    8faa:	4a06      	ldr	r2, [pc, #24]	; (8fc4 <_usbd_ep_clear_bank_status+0x34>)
    8fac:	4413      	add	r3, r2
    8fae:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8fb0:	68fb      	ldr	r3, [r7, #12]
    8fb2:	2200      	movs	r2, #0
    8fb4:	729a      	strb	r2, [r3, #10]
}
    8fb6:	bf00      	nop
    8fb8:	3714      	adds	r7, #20
    8fba:	46bd      	mov	sp, r7
    8fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fc0:	4770      	bx	lr
    8fc2:	bf00      	nop
    8fc4:	20000ee8 	.word	0x20000ee8

00008fc8 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8fc8:	b580      	push	{r7, lr}
    8fca:	b082      	sub	sp, #8
    8fcc:	af00      	add	r7, sp, #0
    8fce:	4603      	mov	r3, r0
    8fd0:	71fb      	strb	r3, [r7, #7]
    8fd2:	460b      	mov	r3, r1
    8fd4:	71bb      	strb	r3, [r7, #6]
    8fd6:	4613      	mov	r3, r2
    8fd8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8fda:	797b      	ldrb	r3, [r7, #5]
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d00b      	beq.n	8ff8 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fe0:	79bb      	ldrb	r3, [r7, #6]
    8fe2:	2240      	movs	r2, #64	; 0x40
    8fe4:	fa02 f303 	lsl.w	r3, r2, r3
    8fe8:	b2da      	uxtb	r2, r3
    8fea:	79fb      	ldrb	r3, [r7, #7]
    8fec:	4619      	mov	r1, r3
    8fee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ff2:	4b09      	ldr	r3, [pc, #36]	; (9018 <_usbd_ep_set_in_rdy+0x50>)
    8ff4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8ff6:	e00a      	b.n	900e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8ff8:	79bb      	ldrb	r3, [r7, #6]
    8ffa:	2240      	movs	r2, #64	; 0x40
    8ffc:	fa02 f303 	lsl.w	r3, r2, r3
    9000:	b2da      	uxtb	r2, r3
    9002:	79fb      	ldrb	r3, [r7, #7]
    9004:	4619      	mov	r1, r3
    9006:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    900a:	4b04      	ldr	r3, [pc, #16]	; (901c <_usbd_ep_set_in_rdy+0x54>)
    900c:	4798      	blx	r3
}
    900e:	bf00      	nop
    9010:	3708      	adds	r7, #8
    9012:	46bd      	mov	sp, r7
    9014:	bd80      	pop	{r7, pc}
    9016:	bf00      	nop
    9018:	000085d5 	.word	0x000085d5
    901c:	00008629 	.word	0x00008629

00009020 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9020:	b580      	push	{r7, lr}
    9022:	b082      	sub	sp, #8
    9024:	af00      	add	r7, sp, #0
    9026:	4603      	mov	r3, r0
    9028:	71fb      	strb	r3, [r7, #7]
    902a:	460b      	mov	r3, r1
    902c:	71bb      	strb	r3, [r7, #6]
    902e:	4613      	mov	r3, r2
    9030:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9032:	797b      	ldrb	r3, [r7, #5]
    9034:	2b00      	cmp	r3, #0
    9036:	d00b      	beq.n	9050 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9038:	79bb      	ldrb	r3, [r7, #6]
    903a:	2240      	movs	r2, #64	; 0x40
    903c:	fa02 f303 	lsl.w	r3, r2, r3
    9040:	b2da      	uxtb	r2, r3
    9042:	79fb      	ldrb	r3, [r7, #7]
    9044:	4619      	mov	r1, r3
    9046:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    904a:	4b09      	ldr	r3, [pc, #36]	; (9070 <_usbd_ep_set_out_rdy+0x50>)
    904c:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    904e:	e00a      	b.n	9066 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9050:	79bb      	ldrb	r3, [r7, #6]
    9052:	2240      	movs	r2, #64	; 0x40
    9054:	fa02 f303 	lsl.w	r3, r2, r3
    9058:	b2da      	uxtb	r2, r3
    905a:	79fb      	ldrb	r3, [r7, #7]
    905c:	4619      	mov	r1, r3
    905e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9062:	4b04      	ldr	r3, [pc, #16]	; (9074 <_usbd_ep_set_out_rdy+0x54>)
    9064:	4798      	blx	r3
}
    9066:	bf00      	nop
    9068:	3708      	adds	r7, #8
    906a:	46bd      	mov	sp, r7
    906c:	bd80      	pop	{r7, pc}
    906e:	bf00      	nop
    9070:	00008629 	.word	0x00008629
    9074:	000085d5 	.word	0x000085d5

00009078 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9078:	b480      	push	{r7}
    907a:	b083      	sub	sp, #12
    907c:	af00      	add	r7, sp, #0
    907e:	4603      	mov	r3, r0
    9080:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9082:	88fb      	ldrh	r3, [r7, #6]
    9084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9088:	d820      	bhi.n	90cc <_usbd_ep_pcksize_size+0x54>
    908a:	88fb      	ldrh	r3, [r7, #6]
    908c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9090:	d81a      	bhi.n	90c8 <_usbd_ep_pcksize_size+0x50>
    9092:	88fb      	ldrh	r3, [r7, #6]
    9094:	2b80      	cmp	r3, #128	; 0x80
    9096:	d815      	bhi.n	90c4 <_usbd_ep_pcksize_size+0x4c>
    9098:	88fb      	ldrh	r3, [r7, #6]
    909a:	2b40      	cmp	r3, #64	; 0x40
    909c:	d810      	bhi.n	90c0 <_usbd_ep_pcksize_size+0x48>
    909e:	88fb      	ldrh	r3, [r7, #6]
    90a0:	2b20      	cmp	r3, #32
    90a2:	d80b      	bhi.n	90bc <_usbd_ep_pcksize_size+0x44>
    90a4:	88fb      	ldrh	r3, [r7, #6]
    90a6:	2b10      	cmp	r3, #16
    90a8:	d806      	bhi.n	90b8 <_usbd_ep_pcksize_size+0x40>
    90aa:	88fb      	ldrh	r3, [r7, #6]
    90ac:	2b08      	cmp	r3, #8
    90ae:	bf8c      	ite	hi
    90b0:	2301      	movhi	r3, #1
    90b2:	2300      	movls	r3, #0
    90b4:	b2db      	uxtb	r3, r3
    90b6:	e00a      	b.n	90ce <_usbd_ep_pcksize_size+0x56>
    90b8:	2302      	movs	r3, #2
    90ba:	e008      	b.n	90ce <_usbd_ep_pcksize_size+0x56>
    90bc:	2303      	movs	r3, #3
    90be:	e006      	b.n	90ce <_usbd_ep_pcksize_size+0x56>
    90c0:	2304      	movs	r3, #4
    90c2:	e004      	b.n	90ce <_usbd_ep_pcksize_size+0x56>
    90c4:	2305      	movs	r3, #5
    90c6:	e002      	b.n	90ce <_usbd_ep_pcksize_size+0x56>
    90c8:	2306      	movs	r3, #6
    90ca:	e000      	b.n	90ce <_usbd_ep_pcksize_size+0x56>
    90cc:	2307      	movs	r3, #7
}
    90ce:	4618      	mov	r0, r3
    90d0:	370c      	adds	r7, #12
    90d2:	46bd      	mov	sp, r7
    90d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d8:	4770      	bx	lr
	...

000090dc <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    90dc:	b480      	push	{r7}
    90de:	b085      	sub	sp, #20
    90e0:	af00      	add	r7, sp, #0
    90e2:	4603      	mov	r3, r0
    90e4:	460a      	mov	r2, r1
    90e6:	71fb      	strb	r3, [r7, #7]
    90e8:	4613      	mov	r3, r2
    90ea:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    90ec:	79fb      	ldrb	r3, [r7, #7]
    90ee:	2b00      	cmp	r3, #0
    90f0:	d008      	beq.n	9104 <_usb_d_dev_ept+0x28>
    90f2:	79bb      	ldrb	r3, [r7, #6]
    90f4:	2b00      	cmp	r3, #0
    90f6:	d003      	beq.n	9100 <_usb_d_dev_ept+0x24>
    90f8:	79fb      	ldrb	r3, [r7, #7]
    90fa:	3304      	adds	r3, #4
    90fc:	b2db      	uxtb	r3, r3
    90fe:	e002      	b.n	9106 <_usb_d_dev_ept+0x2a>
    9100:	79fb      	ldrb	r3, [r7, #7]
    9102:	e000      	b.n	9106 <_usb_d_dev_ept+0x2a>
    9104:	2300      	movs	r3, #0
    9106:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9108:	7bfa      	ldrb	r2, [r7, #15]
    910a:	4613      	mov	r3, r2
    910c:	009b      	lsls	r3, r3, #2
    910e:	4413      	add	r3, r2
    9110:	009b      	lsls	r3, r3, #2
    9112:	3310      	adds	r3, #16
    9114:	4a04      	ldr	r2, [pc, #16]	; (9128 <_usb_d_dev_ept+0x4c>)
    9116:	4413      	add	r3, r2
    9118:	3304      	adds	r3, #4
}
    911a:	4618      	mov	r0, r3
    911c:	3714      	adds	r7, #20
    911e:	46bd      	mov	sp, r7
    9120:	f85d 7b04 	ldr.w	r7, [sp], #4
    9124:	4770      	bx	lr
    9126:	bf00      	nop
    9128:	20000e20 	.word	0x20000e20

0000912c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    912c:	b580      	push	{r7, lr}
    912e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9130:	2104      	movs	r1, #4
    9132:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9136:	4b03      	ldr	r3, [pc, #12]	; (9144 <_usb_d_dev_sof+0x18>)
    9138:	4798      	blx	r3
	dev_inst.callbacks.sof();
    913a:	4b03      	ldr	r3, [pc, #12]	; (9148 <_usb_d_dev_sof+0x1c>)
    913c:	681b      	ldr	r3, [r3, #0]
    913e:	4798      	blx	r3
}
    9140:	bf00      	nop
    9142:	bd80      	pop	{r7, pc}
    9144:	000087a3 	.word	0x000087a3
    9148:	20000e20 	.word	0x20000e20

0000914c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    914c:	b580      	push	{r7, lr}
    914e:	b084      	sub	sp, #16
    9150:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9152:	2300      	movs	r3, #0
    9154:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9156:	f240 2101 	movw	r1, #513	; 0x201
    915a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    915e:	4b1a      	ldr	r3, [pc, #104]	; (91c8 <_usb_d_dev_lpmsusp+0x7c>)
    9160:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9162:	f240 2101 	movw	r1, #513	; 0x201
    9166:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    916a:	4b18      	ldr	r3, [pc, #96]	; (91cc <_usb_d_dev_lpmsusp+0x80>)
    916c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    916e:	2170      	movs	r1, #112	; 0x70
    9170:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9174:	4b16      	ldr	r3, [pc, #88]	; (91d0 <_usb_d_dev_lpmsusp+0x84>)
    9176:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9178:	2300      	movs	r3, #0
    917a:	73fb      	strb	r3, [r7, #15]
    917c:	e018      	b.n	91b0 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    917e:	7bfb      	ldrb	r3, [r7, #15]
    9180:	015b      	lsls	r3, r3, #5
    9182:	4a14      	ldr	r2, [pc, #80]	; (91d4 <_usb_d_dev_lpmsusp+0x88>)
    9184:	4413      	add	r3, r2
    9186:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9188:	687b      	ldr	r3, [r7, #4]
    918a:	891b      	ldrh	r3, [r3, #8]
    918c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9190:	b2db      	uxtb	r3, r3
    9192:	2b03      	cmp	r3, #3
    9194:	d109      	bne.n	91aa <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	891b      	ldrh	r3, [r3, #8]
    919a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    919e:	b29b      	uxth	r3, r3
    91a0:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	2200      	movs	r2, #0
    91a6:	811a      	strh	r2, [r3, #8]
			break;
    91a8:	e005      	b.n	91b6 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    91aa:	7bfb      	ldrb	r3, [r7, #15]
    91ac:	3301      	adds	r3, #1
    91ae:	73fb      	strb	r3, [r7, #15]
    91b0:	7bfb      	ldrb	r3, [r7, #15]
    91b2:	2b03      	cmp	r3, #3
    91b4:	d9e3      	bls.n	917e <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    91b6:	4b08      	ldr	r3, [pc, #32]	; (91d8 <_usb_d_dev_lpmsusp+0x8c>)
    91b8:	685b      	ldr	r3, [r3, #4]
    91ba:	68b9      	ldr	r1, [r7, #8]
    91bc:	2003      	movs	r0, #3
    91be:	4798      	blx	r3
}
    91c0:	bf00      	nop
    91c2:	3710      	adds	r7, #16
    91c4:	46bd      	mov	sp, r7
    91c6:	bd80      	pop	{r7, pc}
    91c8:	000087a3 	.word	0x000087a3
    91cc:	000087f9 	.word	0x000087f9
    91d0:	000087c1 	.word	0x000087c1
    91d4:	20000ee8 	.word	0x20000ee8
    91d8:	20000e20 	.word	0x20000e20

000091dc <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    91dc:	b580      	push	{r7, lr}
    91de:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    91e0:	2180      	movs	r1, #128	; 0x80
    91e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91e6:	4b04      	ldr	r3, [pc, #16]	; (91f8 <_usb_d_dev_ramerr+0x1c>)
    91e8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    91ea:	4b04      	ldr	r3, [pc, #16]	; (91fc <_usb_d_dev_ramerr+0x20>)
    91ec:	685b      	ldr	r3, [r3, #4]
    91ee:	2100      	movs	r1, #0
    91f0:	2005      	movs	r0, #5
    91f2:	4798      	blx	r3
}
    91f4:	bf00      	nop
    91f6:	bd80      	pop	{r7, pc}
    91f8:	000087a3 	.word	0x000087a3
    91fc:	20000e20 	.word	0x20000e20

00009200 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9200:	b580      	push	{r7, lr}
    9202:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9204:	2170      	movs	r1, #112	; 0x70
    9206:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    920a:	4b0b      	ldr	r3, [pc, #44]	; (9238 <_usb_d_dev_wakeup+0x38>)
    920c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    920e:	2170      	movs	r1, #112	; 0x70
    9210:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9214:	4b09      	ldr	r3, [pc, #36]	; (923c <_usb_d_dev_wakeup+0x3c>)
    9216:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9218:	f240 2101 	movw	r1, #513	; 0x201
    921c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9220:	4b07      	ldr	r3, [pc, #28]	; (9240 <_usb_d_dev_wakeup+0x40>)
    9222:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9224:	2000      	movs	r0, #0
    9226:	4b07      	ldr	r3, [pc, #28]	; (9244 <_usb_d_dev_wakeup+0x44>)
    9228:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    922a:	4b07      	ldr	r3, [pc, #28]	; (9248 <_usb_d_dev_wakeup+0x48>)
    922c:	685b      	ldr	r3, [r3, #4]
    922e:	2100      	movs	r1, #0
    9230:	2002      	movs	r0, #2
    9232:	4798      	blx	r3
}
    9234:	bf00      	nop
    9236:	bd80      	pop	{r7, pc}
    9238:	000087a3 	.word	0x000087a3
    923c:	000087f9 	.word	0x000087f9
    9240:	000087c1 	.word	0x000087c1
    9244:	00008aa1 	.word	0x00008aa1
    9248:	20000e20 	.word	0x20000e20

0000924c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    924c:	b580      	push	{r7, lr}
    924e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9250:	2200      	movs	r2, #0
    9252:	2100      	movs	r1, #0
    9254:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9258:	4b0d      	ldr	r3, [pc, #52]	; (9290 <_usb_d_dev_reset+0x44>)
    925a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    925c:	2108      	movs	r1, #8
    925e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9262:	4b0c      	ldr	r3, [pc, #48]	; (9294 <_usb_d_dev_reset+0x48>)
    9264:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9266:	2170      	movs	r1, #112	; 0x70
    9268:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    926c:	4b0a      	ldr	r3, [pc, #40]	; (9298 <_usb_d_dev_reset+0x4c>)
    926e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9270:	f240 2101 	movw	r1, #513	; 0x201
    9274:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9278:	4b08      	ldr	r3, [pc, #32]	; (929c <_usb_d_dev_reset+0x50>)
    927a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    927c:	4b08      	ldr	r3, [pc, #32]	; (92a0 <_usb_d_dev_reset+0x54>)
    927e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9280:	4b08      	ldr	r3, [pc, #32]	; (92a4 <_usb_d_dev_reset+0x58>)
    9282:	685b      	ldr	r3, [r3, #4]
    9284:	2100      	movs	r1, #0
    9286:	2001      	movs	r0, #1
    9288:	4798      	blx	r3
}
    928a:	bf00      	nop
    928c:	bd80      	pop	{r7, pc}
    928e:	bf00      	nop
    9290:	00008739 	.word	0x00008739
    9294:	000087a3 	.word	0x000087a3
    9298:	000087f9 	.word	0x000087f9
    929c:	000087c1 	.word	0x000087c1
    92a0:	00009e09 	.word	0x00009e09
    92a4:	20000e20 	.word	0x20000e20

000092a8 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    92a8:	b580      	push	{r7, lr}
    92aa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    92ac:	f240 2101 	movw	r1, #513	; 0x201
    92b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92b4:	4b09      	ldr	r3, [pc, #36]	; (92dc <_usb_d_dev_suspend+0x34>)
    92b6:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    92b8:	f240 2101 	movw	r1, #513	; 0x201
    92bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92c0:	4b07      	ldr	r3, [pc, #28]	; (92e0 <_usb_d_dev_suspend+0x38>)
    92c2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    92c4:	2170      	movs	r1, #112	; 0x70
    92c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92ca:	4b06      	ldr	r3, [pc, #24]	; (92e4 <_usb_d_dev_suspend+0x3c>)
    92cc:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    92ce:	4b06      	ldr	r3, [pc, #24]	; (92e8 <_usb_d_dev_suspend+0x40>)
    92d0:	685b      	ldr	r3, [r3, #4]
    92d2:	2100      	movs	r1, #0
    92d4:	2004      	movs	r0, #4
    92d6:	4798      	blx	r3
}
    92d8:	bf00      	nop
    92da:	bd80      	pop	{r7, pc}
    92dc:	000087a3 	.word	0x000087a3
    92e0:	000087f9 	.word	0x000087f9
    92e4:	000087c1 	.word	0x000087c1
    92e8:	20000e20 	.word	0x20000e20

000092ec <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    92ec:	b580      	push	{r7, lr}
    92ee:	b082      	sub	sp, #8
    92f0:	af00      	add	r7, sp, #0
	bool     rc    = true;
    92f2:	2301      	movs	r3, #1
    92f4:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    92f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92fa:	4b22      	ldr	r3, [pc, #136]	; (9384 <_usb_d_dev_handle_nep+0x98>)
    92fc:	4798      	blx	r3
    92fe:	4603      	mov	r3, r0
    9300:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9302:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9306:	4b20      	ldr	r3, [pc, #128]	; (9388 <_usb_d_dev_handle_nep+0x9c>)
    9308:	4798      	blx	r3
    930a:	4603      	mov	r3, r0
    930c:	461a      	mov	r2, r3
    930e:	88bb      	ldrh	r3, [r7, #4]
    9310:	4013      	ands	r3, r2
    9312:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9314:	88bb      	ldrh	r3, [r7, #4]
    9316:	f003 0304 	and.w	r3, r3, #4
    931a:	2b00      	cmp	r3, #0
    931c:	d003      	beq.n	9326 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    931e:	4b1b      	ldr	r3, [pc, #108]	; (938c <_usb_d_dev_handle_nep+0xa0>)
    9320:	4798      	blx	r3
		return true;
    9322:	2301      	movs	r3, #1
    9324:	e02a      	b.n	937c <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9326:	88bb      	ldrh	r3, [r7, #4]
    9328:	f403 7300 	and.w	r3, r3, #512	; 0x200
    932c:	2b00      	cmp	r3, #0
    932e:	d002      	beq.n	9336 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9330:	4b17      	ldr	r3, [pc, #92]	; (9390 <_usb_d_dev_handle_nep+0xa4>)
    9332:	4798      	blx	r3
    9334:	e021      	b.n	937a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9336:	88bb      	ldrh	r3, [r7, #4]
    9338:	f003 0380 	and.w	r3, r3, #128	; 0x80
    933c:	2b00      	cmp	r3, #0
    933e:	d002      	beq.n	9346 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9340:	4b14      	ldr	r3, [pc, #80]	; (9394 <_usb_d_dev_handle_nep+0xa8>)
    9342:	4798      	blx	r3
    9344:	e019      	b.n	937a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9346:	88bb      	ldrh	r3, [r7, #4]
    9348:	f003 0370 	and.w	r3, r3, #112	; 0x70
    934c:	2b00      	cmp	r3, #0
    934e:	d002      	beq.n	9356 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9350:	4b11      	ldr	r3, [pc, #68]	; (9398 <_usb_d_dev_handle_nep+0xac>)
    9352:	4798      	blx	r3
    9354:	e011      	b.n	937a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9356:	88bb      	ldrh	r3, [r7, #4]
    9358:	f003 0308 	and.w	r3, r3, #8
    935c:	2b00      	cmp	r3, #0
    935e:	d002      	beq.n	9366 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9360:	4b0e      	ldr	r3, [pc, #56]	; (939c <_usb_d_dev_handle_nep+0xb0>)
    9362:	4798      	blx	r3
    9364:	e009      	b.n	937a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9366:	88bb      	ldrh	r3, [r7, #4]
    9368:	f003 0301 	and.w	r3, r3, #1
    936c:	2b00      	cmp	r3, #0
    936e:	d002      	beq.n	9376 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9370:	4b0b      	ldr	r3, [pc, #44]	; (93a0 <_usb_d_dev_handle_nep+0xb4>)
    9372:	4798      	blx	r3
    9374:	e001      	b.n	937a <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9376:	2300      	movs	r3, #0
    9378:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    937a:	79fb      	ldrb	r3, [r7, #7]
}
    937c:	4618      	mov	r0, r3
    937e:	3708      	adds	r7, #8
    9380:	46bd      	mov	sp, r7
    9382:	bd80      	pop	{r7, pc}
    9384:	00008789 	.word	0x00008789
    9388:	000087df 	.word	0x000087df
    938c:	0000912d 	.word	0x0000912d
    9390:	0000914d 	.word	0x0000914d
    9394:	000091dd 	.word	0x000091dd
    9398:	00009201 	.word	0x00009201
    939c:	0000924d 	.word	0x0000924d
    93a0:	000092a9 	.word	0x000092a9

000093a4 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    93a4:	b590      	push	{r4, r7, lr}
    93a6:	b089      	sub	sp, #36	; 0x24
    93a8:	af00      	add	r7, sp, #0
    93aa:	6078      	str	r0, [r7, #4]
    93ac:	460b      	mov	r3, r1
    93ae:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    93b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93b4:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    93b6:	687b      	ldr	r3, [r7, #4]
    93b8:	7c9b      	ldrb	r3, [r3, #18]
    93ba:	f003 030f 	and.w	r3, r3, #15
    93be:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    93c0:	7dfb      	ldrb	r3, [r7, #23]
    93c2:	015b      	lsls	r3, r3, #5
    93c4:	4a73      	ldr	r2, [pc, #460]	; (9594 <_usb_d_dev_in_next+0x1f0>)
    93c6:	4413      	add	r3, r2
    93c8:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    93ca:	78fb      	ldrb	r3, [r7, #3]
    93cc:	2b00      	cmp	r3, #0
    93ce:	d006      	beq.n	93de <_usb_d_dev_in_next+0x3a>
    93d0:	693b      	ldr	r3, [r7, #16]
    93d2:	3310      	adds	r3, #16
    93d4:	685b      	ldr	r3, [r3, #4]
    93d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    93da:	b29b      	uxth	r3, r3
    93dc:	e000      	b.n	93e0 <_usb_d_dev_in_next+0x3c>
    93de:	2300      	movs	r3, #0
    93e0:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	8a1b      	ldrh	r3, [r3, #16]
    93e6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    93ea:	4293      	cmp	r3, r2
    93ec:	d103      	bne.n	93f6 <_usb_d_dev_in_next+0x52>
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	8a1b      	ldrh	r3, [r3, #16]
    93f2:	b21b      	sxth	r3, r3
    93f4:	e004      	b.n	9400 <_usb_d_dev_in_next+0x5c>
    93f6:	687b      	ldr	r3, [r7, #4]
    93f8:	8a1b      	ldrh	r3, [r3, #16]
    93fa:	3b01      	subs	r3, #1
    93fc:	b29b      	uxth	r3, r3
    93fe:	b21b      	sxth	r3, r3
    9400:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9404:	4013      	ands	r3, r2
    9406:	b21b      	sxth	r3, r3
    9408:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    940a:	2300      	movs	r3, #0
    940c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    940e:	687b      	ldr	r3, [r7, #4]
    9410:	7cdb      	ldrb	r3, [r3, #19]
    9412:	f003 0307 	and.w	r3, r3, #7
    9416:	b2db      	uxtb	r3, r3
    9418:	2b01      	cmp	r3, #1
    941a:	bf0c      	ite	eq
    941c:	2301      	moveq	r3, #1
    941e:	2300      	movne	r3, #0
    9420:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9422:	78fb      	ldrb	r3, [r7, #3]
    9424:	2b00      	cmp	r3, #0
    9426:	d004      	beq.n	9432 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9428:	7dfb      	ldrb	r3, [r7, #23]
    942a:	2101      	movs	r1, #1
    942c:	4618      	mov	r0, r3
    942e:	4b5a      	ldr	r3, [pc, #360]	; (9598 <_usb_d_dev_in_next+0x1f4>)
    9430:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	689a      	ldr	r2, [r3, #8]
    9436:	89fb      	ldrh	r3, [r7, #14]
    9438:	441a      	add	r2, r3
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    943e:	687b      	ldr	r3, [r7, #4]
    9440:	689a      	ldr	r2, [r3, #8]
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	685b      	ldr	r3, [r3, #4]
    9446:	429a      	cmp	r2, r3
    9448:	d243      	bcs.n	94d2 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	685b      	ldr	r3, [r3, #4]
    944e:	b29a      	uxth	r2, r3
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	689b      	ldr	r3, [r3, #8]
    9454:	b29b      	uxth	r3, r3
    9456:	1ad3      	subs	r3, r2, r3
    9458:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	7cdb      	ldrb	r3, [r3, #19]
    945e:	f003 0320 	and.w	r3, r3, #32
    9462:	b2db      	uxtb	r3, r3
    9464:	2b00      	cmp	r3, #0
    9466:	d01b      	beq.n	94a0 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9468:	687b      	ldr	r3, [r7, #4]
    946a:	8a1b      	ldrh	r3, [r3, #16]
    946c:	8bfa      	ldrh	r2, [r7, #30]
    946e:	429a      	cmp	r2, r3
    9470:	d902      	bls.n	9478 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	8a1b      	ldrh	r3, [r3, #16]
    9476:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9478:	687b      	ldr	r3, [r7, #4]
    947a:	68d8      	ldr	r0, [r3, #12]
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	681a      	ldr	r2, [r3, #0]
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	689b      	ldr	r3, [r3, #8]
    9484:	4413      	add	r3, r2
    9486:	8bfa      	ldrh	r2, [r7, #30]
    9488:	4619      	mov	r1, r3
    948a:	4b44      	ldr	r3, [pc, #272]	; (959c <_usb_d_dev_in_next+0x1f8>)
    948c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    948e:	687b      	ldr	r3, [r7, #4]
    9490:	68db      	ldr	r3, [r3, #12]
    9492:	461a      	mov	r2, r3
    9494:	7dfb      	ldrb	r3, [r7, #23]
    9496:	2101      	movs	r1, #1
    9498:	4618      	mov	r0, r3
    949a:	4b41      	ldr	r3, [pc, #260]	; (95a0 <_usb_d_dev_in_next+0x1fc>)
    949c:	4798      	blx	r3
    949e:	e011      	b.n	94c4 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    94a0:	8bfb      	ldrh	r3, [r7, #30]
    94a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    94a6:	d902      	bls.n	94ae <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    94a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    94ac:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    94ae:	687b      	ldr	r3, [r7, #4]
    94b0:	681a      	ldr	r2, [r3, #0]
    94b2:	687b      	ldr	r3, [r7, #4]
    94b4:	689b      	ldr	r3, [r3, #8]
    94b6:	4413      	add	r3, r2
    94b8:	461a      	mov	r2, r3
    94ba:	7dfb      	ldrb	r3, [r7, #23]
    94bc:	2101      	movs	r1, #1
    94be:	4618      	mov	r0, r3
    94c0:	4b37      	ldr	r3, [pc, #220]	; (95a0 <_usb_d_dev_in_next+0x1fc>)
    94c2:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    94c4:	8bfa      	ldrh	r2, [r7, #30]
    94c6:	7df8      	ldrb	r0, [r7, #23]
    94c8:	2300      	movs	r3, #0
    94ca:	2101      	movs	r1, #1
    94cc:	4c35      	ldr	r4, [pc, #212]	; (95a4 <_usb_d_dev_in_next+0x200>)
    94ce:	47a0      	blx	r4
		goto _in_tx_exec;
    94d0:	e041      	b.n	9556 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    94d2:	687b      	ldr	r3, [r7, #4]
    94d4:	7cdb      	ldrb	r3, [r3, #19]
    94d6:	f003 0310 	and.w	r3, r3, #16
    94da:	b2db      	uxtb	r3, r3
    94dc:	2b00      	cmp	r3, #0
    94de:	d00b      	beq.n	94f8 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    94e0:	687a      	ldr	r2, [r7, #4]
    94e2:	7cd3      	ldrb	r3, [r2, #19]
    94e4:	f36f 1304 	bfc	r3, #4, #1
    94e8:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    94ea:	7df8      	ldrb	r0, [r7, #23]
    94ec:	2300      	movs	r3, #0
    94ee:	2200      	movs	r2, #0
    94f0:	2101      	movs	r1, #1
    94f2:	4c2c      	ldr	r4, [pc, #176]	; (95a4 <_usb_d_dev_in_next+0x200>)
    94f4:	47a0      	blx	r4
		goto _in_tx_exec;
    94f6:	e02e      	b.n	9556 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    94f8:	7afb      	ldrb	r3, [r7, #11]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d006      	beq.n	950c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    94fe:	7dfb      	ldrb	r3, [r7, #23]
    9500:	224b      	movs	r2, #75	; 0x4b
    9502:	4619      	mov	r1, r3
    9504:	69b8      	ldr	r0, [r7, #24]
    9506:	4b28      	ldr	r3, [pc, #160]	; (95a8 <_usb_d_dev_in_next+0x204>)
    9508:	4798      	blx	r3
    950a:	e005      	b.n	9518 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    950c:	7dfb      	ldrb	r3, [r7, #23]
    950e:	224a      	movs	r2, #74	; 0x4a
    9510:	4619      	mov	r1, r3
    9512:	69b8      	ldr	r0, [r7, #24]
    9514:	4b24      	ldr	r3, [pc, #144]	; (95a8 <_usb_d_dev_in_next+0x204>)
    9516:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	8a1b      	ldrh	r3, [r3, #16]
    951c:	89ba      	ldrh	r2, [r7, #12]
    951e:	429a      	cmp	r2, r3
    9520:	d114      	bne.n	954c <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9522:	687a      	ldr	r2, [r7, #4]
    9524:	7cd3      	ldrb	r3, [r2, #19]
    9526:	f36f 1386 	bfc	r3, #6, #1
    952a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    952c:	4b1f      	ldr	r3, [pc, #124]	; (95ac <_usb_d_dev_in_next+0x208>)
    952e:	68db      	ldr	r3, [r3, #12]
    9530:	687a      	ldr	r2, [r7, #4]
    9532:	7c90      	ldrb	r0, [r2, #18]
    9534:	687a      	ldr	r2, [r7, #4]
    9536:	6892      	ldr	r2, [r2, #8]
    9538:	4611      	mov	r1, r2
    953a:	4798      	blx	r3
    953c:	4603      	mov	r3, r0
    953e:	2b00      	cmp	r3, #0
    9540:	d124      	bne.n	958c <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9542:	687a      	ldr	r2, [r7, #4]
    9544:	7cd3      	ldrb	r3, [r2, #19]
    9546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    954a:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    954c:	2100      	movs	r1, #0
    954e:	6878      	ldr	r0, [r7, #4]
    9550:	4b17      	ldr	r3, [pc, #92]	; (95b0 <_usb_d_dev_in_next+0x20c>)
    9552:	4798      	blx	r3
	return;
    9554:	e01b      	b.n	958e <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9556:	78fb      	ldrb	r3, [r7, #3]
    9558:	f083 0301 	eor.w	r3, r3, #1
    955c:	b2db      	uxtb	r3, r3
    955e:	2b00      	cmp	r3, #0
    9560:	d00d      	beq.n	957e <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9562:	7afb      	ldrb	r3, [r7, #11]
    9564:	2b00      	cmp	r3, #0
    9566:	d002      	beq.n	956e <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9568:	234e      	movs	r3, #78	; 0x4e
    956a:	777b      	strb	r3, [r7, #29]
    956c:	e001      	b.n	9572 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    956e:	234a      	movs	r3, #74	; 0x4a
    9570:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9572:	7f7a      	ldrb	r2, [r7, #29]
    9574:	7dfb      	ldrb	r3, [r7, #23]
    9576:	4619      	mov	r1, r3
    9578:	69b8      	ldr	r0, [r7, #24]
    957a:	4b0e      	ldr	r3, [pc, #56]	; (95b4 <_usb_d_dev_in_next+0x210>)
    957c:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    957e:	7dfb      	ldrb	r3, [r7, #23]
    9580:	2201      	movs	r2, #1
    9582:	2101      	movs	r1, #1
    9584:	4618      	mov	r0, r3
    9586:	4b0c      	ldr	r3, [pc, #48]	; (95b8 <_usb_d_dev_in_next+0x214>)
    9588:	4798      	blx	r3
    958a:	e000      	b.n	958e <_usb_d_dev_in_next+0x1ea>
			return;
    958c:	bf00      	nop
}
    958e:	3724      	adds	r7, #36	; 0x24
    9590:	46bd      	mov	sp, r7
    9592:	bd90      	pop	{r4, r7, pc}
    9594:	20000ee8 	.word	0x20000ee8
    9598:	00008d9d 	.word	0x00008d9d
    959c:	00011c1d 	.word	0x00011c1d
    95a0:	00008dc9 	.word	0x00008dc9
    95a4:	00008f11 	.word	0x00008f11
    95a8:	000086a9 	.word	0x000086a9
    95ac:	20000e20 	.word	0x20000e20
    95b0:	0000a6cd 	.word	0x0000a6cd
    95b4:	0000867d 	.word	0x0000867d
    95b8:	00008fc9 	.word	0x00008fc9

000095bc <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    95bc:	b590      	push	{r4, r7, lr}
    95be:	b08b      	sub	sp, #44	; 0x2c
    95c0:	af00      	add	r7, sp, #0
    95c2:	6078      	str	r0, [r7, #4]
    95c4:	460b      	mov	r3, r1
    95c6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    95c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95cc:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    95ce:	687b      	ldr	r3, [r7, #4]
    95d0:	7c9b      	ldrb	r3, [r3, #18]
    95d2:	f003 030f 	and.w	r3, r3, #15
    95d6:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    95d8:	7ffb      	ldrb	r3, [r7, #31]
    95da:	015b      	lsls	r3, r3, #5
    95dc:	4a94      	ldr	r2, [pc, #592]	; (9830 <_usb_d_dev_out_next+0x274>)
    95de:	4413      	add	r3, r2
    95e0:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    95e2:	78fb      	ldrb	r3, [r7, #3]
    95e4:	2b00      	cmp	r3, #0
    95e6:	d005      	beq.n	95f4 <_usb_d_dev_out_next+0x38>
    95e8:	69bb      	ldr	r3, [r7, #24]
    95ea:	685b      	ldr	r3, [r3, #4]
    95ec:	f3c3 338d 	ubfx	r3, r3, #14, #14
    95f0:	b29b      	uxth	r3, r3
    95f2:	e000      	b.n	95f6 <_usb_d_dev_out_next+0x3a>
    95f4:	2300      	movs	r3, #0
    95f6:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    95f8:	78fb      	ldrb	r3, [r7, #3]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d005      	beq.n	960a <_usb_d_dev_out_next+0x4e>
    95fe:	69bb      	ldr	r3, [r7, #24]
    9600:	685b      	ldr	r3, [r3, #4]
    9602:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9606:	b29b      	uxth	r3, r3
    9608:	e000      	b.n	960c <_usb_d_dev_out_next+0x50>
    960a:	2300      	movs	r3, #0
    960c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    960e:	687b      	ldr	r3, [r7, #4]
    9610:	8a1b      	ldrh	r3, [r3, #16]
    9612:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9616:	4293      	cmp	r3, r2
    9618:	d004      	beq.n	9624 <_usb_d_dev_out_next+0x68>
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	8a1b      	ldrh	r3, [r3, #16]
    961e:	3b01      	subs	r3, #1
    9620:	b29b      	uxth	r3, r3
    9622:	e001      	b.n	9628 <_usb_d_dev_out_next+0x6c>
    9624:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9628:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    962a:	8aba      	ldrh	r2, [r7, #20]
    962c:	8a7b      	ldrh	r3, [r7, #18]
    962e:	4013      	ands	r3, r2
    9630:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	7cdb      	ldrb	r3, [r3, #19]
    9636:	f003 0307 	and.w	r3, r3, #7
    963a:	b2db      	uxtb	r3, r3
    963c:	2b01      	cmp	r3, #1
    963e:	bf0c      	ite	eq
    9640:	2301      	moveq	r3, #1
    9642:	2300      	movne	r3, #0
    9644:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9646:	78fb      	ldrb	r3, [r7, #3]
    9648:	2b00      	cmp	r3, #0
    964a:	d004      	beq.n	9656 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    964c:	7ffb      	ldrb	r3, [r7, #31]
    964e:	2100      	movs	r1, #0
    9650:	4618      	mov	r0, r3
    9652:	4b78      	ldr	r3, [pc, #480]	; (9834 <_usb_d_dev_out_next+0x278>)
    9654:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9656:	687b      	ldr	r3, [r7, #4]
    9658:	7cdb      	ldrb	r3, [r3, #19]
    965a:	f003 0320 	and.w	r3, r3, #32
    965e:	b2db      	uxtb	r3, r3
    9660:	2b00      	cmp	r3, #0
    9662:	d01c      	beq.n	969e <_usb_d_dev_out_next+0xe2>
    9664:	687b      	ldr	r3, [r7, #4]
    9666:	685b      	ldr	r3, [r3, #4]
    9668:	2b00      	cmp	r3, #0
    966a:	d018      	beq.n	969e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    966c:	687b      	ldr	r3, [r7, #4]
    966e:	685b      	ldr	r3, [r3, #4]
    9670:	b29a      	uxth	r2, r3
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	689b      	ldr	r3, [r3, #8]
    9676:	b29b      	uxth	r3, r3
    9678:	1ad3      	subs	r3, r2, r3
    967a:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    967c:	687b      	ldr	r3, [r7, #4]
    967e:	681a      	ldr	r2, [r3, #0]
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	689b      	ldr	r3, [r3, #8]
    9684:	18d0      	adds	r0, r2, r3
    9686:	687b      	ldr	r3, [r7, #4]
    9688:	68d9      	ldr	r1, [r3, #12]
    968a:	89ba      	ldrh	r2, [r7, #12]
    968c:	8a3b      	ldrh	r3, [r7, #16]
    968e:	429a      	cmp	r2, r3
    9690:	d901      	bls.n	9696 <_usb_d_dev_out_next+0xda>
    9692:	8a3b      	ldrh	r3, [r7, #16]
    9694:	e000      	b.n	9698 <_usb_d_dev_out_next+0xdc>
    9696:	89bb      	ldrh	r3, [r7, #12]
    9698:	461a      	mov	r2, r3
    969a:	4b67      	ldr	r3, [pc, #412]	; (9838 <_usb_d_dev_out_next+0x27c>)
    969c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	685b      	ldr	r3, [r3, #4]
    96a2:	2b00      	cmp	r3, #0
    96a4:	d121      	bne.n	96ea <_usb_d_dev_out_next+0x12e>
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	7cdb      	ldrb	r3, [r3, #19]
    96aa:	f003 0310 	and.w	r3, r3, #16
    96ae:	b2db      	uxtb	r3, r3
    96b0:	2b00      	cmp	r3, #0
    96b2:	d01a      	beq.n	96ea <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    96b4:	687a      	ldr	r2, [r7, #4]
    96b6:	7cd3      	ldrb	r3, [r2, #19]
    96b8:	f36f 1304 	bfc	r3, #4, #1
    96bc:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    96be:	687a      	ldr	r2, [r7, #4]
    96c0:	7cd3      	ldrb	r3, [r2, #19]
    96c2:	f043 0320 	orr.w	r3, r3, #32
    96c6:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	68db      	ldr	r3, [r3, #12]
    96cc:	461a      	mov	r2, r3
    96ce:	7ffb      	ldrb	r3, [r7, #31]
    96d0:	2100      	movs	r1, #0
    96d2:	4618      	mov	r0, r3
    96d4:	4b59      	ldr	r3, [pc, #356]	; (983c <_usb_d_dev_out_next+0x280>)
    96d6:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	8a1b      	ldrh	r3, [r3, #16]
    96dc:	461a      	mov	r2, r3
    96de:	7ff8      	ldrb	r0, [r7, #31]
    96e0:	2300      	movs	r3, #0
    96e2:	2100      	movs	r1, #0
    96e4:	4c56      	ldr	r4, [pc, #344]	; (9840 <_usb_d_dev_out_next+0x284>)
    96e6:	47a0      	blx	r4
		goto _out_rx_exec;
    96e8:	e090      	b.n	980c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    96ea:	78fb      	ldrb	r3, [r7, #3]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d010      	beq.n	9712 <_usb_d_dev_out_next+0x156>
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	8a1b      	ldrh	r3, [r3, #16]
    96f4:	8a3a      	ldrh	r2, [r7, #16]
    96f6:	429a      	cmp	r2, r3
    96f8:	d20b      	bcs.n	9712 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    96fa:	687a      	ldr	r2, [r7, #4]
    96fc:	7cd3      	ldrb	r3, [r2, #19]
    96fe:	f36f 1304 	bfc	r3, #4, #1
    9702:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9704:	687b      	ldr	r3, [r7, #4]
    9706:	689a      	ldr	r2, [r3, #8]
    9708:	8abb      	ldrh	r3, [r7, #20]
    970a:	441a      	add	r2, r3
    970c:	687b      	ldr	r3, [r7, #4]
    970e:	609a      	str	r2, [r3, #8]
    9710:	e05c      	b.n	97cc <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9712:	687b      	ldr	r3, [r7, #4]
    9714:	689a      	ldr	r2, [r3, #8]
    9716:	8afb      	ldrh	r3, [r7, #22]
    9718:	441a      	add	r2, r3
    971a:	687b      	ldr	r3, [r7, #4]
    971c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    971e:	687b      	ldr	r3, [r7, #4]
    9720:	689a      	ldr	r2, [r3, #8]
    9722:	687b      	ldr	r3, [r7, #4]
    9724:	685b      	ldr	r3, [r3, #4]
    9726:	429a      	cmp	r2, r3
    9728:	d250      	bcs.n	97cc <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    972a:	687b      	ldr	r3, [r7, #4]
    972c:	685b      	ldr	r3, [r3, #4]
    972e:	b29a      	uxth	r2, r3
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	689b      	ldr	r3, [r3, #8]
    9734:	b29b      	uxth	r3, r3
    9736:	1ad3      	subs	r3, r2, r3
    9738:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    973a:	687b      	ldr	r3, [r7, #4]
    973c:	7cdb      	ldrb	r3, [r3, #19]
    973e:	f003 0320 	and.w	r3, r3, #32
    9742:	b2db      	uxtb	r3, r3
    9744:	2b00      	cmp	r3, #0
    9746:	d010      	beq.n	976a <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9748:	687b      	ldr	r3, [r7, #4]
    974a:	8a1b      	ldrh	r3, [r3, #16]
    974c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    974e:	429a      	cmp	r2, r3
    9750:	d902      	bls.n	9758 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9752:	687b      	ldr	r3, [r7, #4]
    9754:	8a1b      	ldrh	r3, [r3, #16]
    9756:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9758:	687b      	ldr	r3, [r7, #4]
    975a:	68db      	ldr	r3, [r3, #12]
    975c:	461a      	mov	r2, r3
    975e:	7ffb      	ldrb	r3, [r7, #31]
    9760:	2100      	movs	r1, #0
    9762:	4618      	mov	r0, r3
    9764:	4b35      	ldr	r3, [pc, #212]	; (983c <_usb_d_dev_out_next+0x280>)
    9766:	4798      	blx	r3
    9768:	e029      	b.n	97be <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    976a:	687b      	ldr	r3, [r7, #4]
    976c:	8a1b      	ldrh	r3, [r3, #16]
    976e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9770:	429a      	cmp	r2, r3
    9772:	d90f      	bls.n	9794 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    977a:	d903      	bls.n	9784 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    977c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9780:	84fb      	strh	r3, [r7, #38]	; 0x26
    9782:	e011      	b.n	97a8 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9784:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9786:	8a7b      	ldrh	r3, [r7, #18]
    9788:	4013      	ands	r3, r2
    978a:	b29b      	uxth	r3, r3
    978c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    978e:	1ad3      	subs	r3, r2, r3
    9790:	84fb      	strh	r3, [r7, #38]	; 0x26
    9792:	e009      	b.n	97a8 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9794:	687b      	ldr	r3, [r7, #4]
    9796:	8a1b      	ldrh	r3, [r3, #16]
    9798:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    979a:	429a      	cmp	r2, r3
    979c:	d204      	bcs.n	97a8 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    979e:	687a      	ldr	r2, [r7, #4]
    97a0:	7cd3      	ldrb	r3, [r2, #19]
    97a2:	f043 0320 	orr.w	r3, r3, #32
    97a6:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    97a8:	687b      	ldr	r3, [r7, #4]
    97aa:	681a      	ldr	r2, [r3, #0]
    97ac:	687b      	ldr	r3, [r7, #4]
    97ae:	689b      	ldr	r3, [r3, #8]
    97b0:	4413      	add	r3, r2
    97b2:	461a      	mov	r2, r3
    97b4:	7ffb      	ldrb	r3, [r7, #31]
    97b6:	2100      	movs	r1, #0
    97b8:	4618      	mov	r0, r3
    97ba:	4b20      	ldr	r3, [pc, #128]	; (983c <_usb_d_dev_out_next+0x280>)
    97bc:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    97be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    97c0:	7ff8      	ldrb	r0, [r7, #31]
    97c2:	2300      	movs	r3, #0
    97c4:	2100      	movs	r1, #0
    97c6:	4c1e      	ldr	r4, [pc, #120]	; (9840 <_usb_d_dev_out_next+0x284>)
    97c8:	47a0      	blx	r4
			goto _out_rx_exec;
    97ca:	e01f      	b.n	980c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    97cc:	7bfb      	ldrb	r3, [r7, #15]
    97ce:	2b00      	cmp	r3, #0
    97d0:	d006      	beq.n	97e0 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    97d2:	7ffb      	ldrb	r3, [r7, #31]
    97d4:	222d      	movs	r2, #45	; 0x2d
    97d6:	4619      	mov	r1, r3
    97d8:	6a38      	ldr	r0, [r7, #32]
    97da:	4b1a      	ldr	r3, [pc, #104]	; (9844 <_usb_d_dev_out_next+0x288>)
    97dc:	4798      	blx	r3
    97de:	e005      	b.n	97ec <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    97e0:	7ffb      	ldrb	r3, [r7, #31]
    97e2:	2225      	movs	r2, #37	; 0x25
    97e4:	4619      	mov	r1, r3
    97e6:	6a38      	ldr	r0, [r7, #32]
    97e8:	4b16      	ldr	r3, [pc, #88]	; (9844 <_usb_d_dev_out_next+0x288>)
    97ea:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    97ec:	7ffb      	ldrb	r3, [r7, #31]
    97ee:	2b00      	cmp	r3, #0
    97f0:	d107      	bne.n	9802 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    97f2:	687b      	ldr	r3, [r7, #4]
    97f4:	68db      	ldr	r3, [r3, #12]
    97f6:	461a      	mov	r2, r3
    97f8:	7ffb      	ldrb	r3, [r7, #31]
    97fa:	2100      	movs	r1, #0
    97fc:	4618      	mov	r0, r3
    97fe:	4b0f      	ldr	r3, [pc, #60]	; (983c <_usb_d_dev_out_next+0x280>)
    9800:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9802:	2100      	movs	r1, #0
    9804:	6878      	ldr	r0, [r7, #4]
    9806:	4b10      	ldr	r3, [pc, #64]	; (9848 <_usb_d_dev_out_next+0x28c>)
    9808:	4798      	blx	r3
	return;
    980a:	e031      	b.n	9870 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    980c:	78fb      	ldrb	r3, [r7, #3]
    980e:	f083 0301 	eor.w	r3, r3, #1
    9812:	b2db      	uxtb	r3, r3
    9814:	2b00      	cmp	r3, #0
    9816:	d025      	beq.n	9864 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9818:	7bfb      	ldrb	r3, [r7, #15]
    981a:	2b00      	cmp	r3, #0
    981c:	d018      	beq.n	9850 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    981e:	7ffb      	ldrb	r3, [r7, #31]
    9820:	2101      	movs	r1, #1
    9822:	4618      	mov	r0, r3
    9824:	4b09      	ldr	r3, [pc, #36]	; (984c <_usb_d_dev_out_next+0x290>)
    9826:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9828:	232d      	movs	r3, #45	; 0x2d
    982a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    982e:	e012      	b.n	9856 <_usb_d_dev_out_next+0x29a>
    9830:	20000ee8 	.word	0x20000ee8
    9834:	00008d9d 	.word	0x00008d9d
    9838:	00011c1d 	.word	0x00011c1d
    983c:	00008dc9 	.word	0x00008dc9
    9840:	00008f51 	.word	0x00008f51
    9844:	000086a9 	.word	0x000086a9
    9848:	0000a6cd 	.word	0x0000a6cd
    984c:	00008f91 	.word	0x00008f91
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9850:	2325      	movs	r3, #37	; 0x25
    9852:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9856:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    985a:	7ffb      	ldrb	r3, [r7, #31]
    985c:	4619      	mov	r1, r3
    985e:	6a38      	ldr	r0, [r7, #32]
    9860:	4b05      	ldr	r3, [pc, #20]	; (9878 <_usb_d_dev_out_next+0x2bc>)
    9862:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9864:	7ffb      	ldrb	r3, [r7, #31]
    9866:	2201      	movs	r2, #1
    9868:	2100      	movs	r1, #0
    986a:	4618      	mov	r0, r3
    986c:	4b03      	ldr	r3, [pc, #12]	; (987c <_usb_d_dev_out_next+0x2c0>)
    986e:	4798      	blx	r3
}
    9870:	372c      	adds	r7, #44	; 0x2c
    9872:	46bd      	mov	sp, r7
    9874:	bd90      	pop	{r4, r7, pc}
    9876:	bf00      	nop
    9878:	0000867d 	.word	0x0000867d
    987c:	00009021 	.word	0x00009021

00009880 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9880:	b580      	push	{r7, lr}
    9882:	b084      	sub	sp, #16
    9884:	af00      	add	r7, sp, #0
    9886:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9888:	687b      	ldr	r3, [r7, #4]
    988a:	7c9b      	ldrb	r3, [r3, #18]
    988c:	f003 030f 	and.w	r3, r3, #15
    9890:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9892:	687b      	ldr	r3, [r7, #4]
    9894:	7cdb      	ldrb	r3, [r3, #19]
    9896:	f003 0307 	and.w	r3, r3, #7
    989a:	b2db      	uxtb	r3, r3
    989c:	2b01      	cmp	r3, #1
    989e:	bf0c      	ite	eq
    98a0:	2301      	moveq	r3, #1
    98a2:	2300      	movne	r3, #0
    98a4:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    98a6:	7bbb      	ldrb	r3, [r7, #14]
    98a8:	f083 0301 	eor.w	r3, r3, #1
    98ac:	b2db      	uxtb	r3, r3
    98ae:	2b00      	cmp	r3, #0
    98b0:	d008      	beq.n	98c4 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    98b2:	7bfb      	ldrb	r3, [r7, #15]
    98b4:	4618      	mov	r0, r3
    98b6:	4b20      	ldr	r3, [pc, #128]	; (9938 <_usb_d_dev_handle_setup+0xb8>)
    98b8:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    98ba:	7bfb      	ldrb	r3, [r7, #15]
    98bc:	4618      	mov	r0, r3
    98be:	4b1f      	ldr	r3, [pc, #124]	; (993c <_usb_d_dev_handle_setup+0xbc>)
    98c0:	4798      	blx	r3
		return;
    98c2:	e036      	b.n	9932 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	7cdb      	ldrb	r3, [r3, #19]
    98c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98cc:	b2db      	uxtb	r3, r3
    98ce:	2b00      	cmp	r3, #0
    98d0:	d010      	beq.n	98f4 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    98d2:	687a      	ldr	r2, [r7, #4]
    98d4:	7cd3      	ldrb	r3, [r2, #19]
    98d6:	f36f 1386 	bfc	r3, #6, #1
    98da:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    98dc:	7bfb      	ldrb	r3, [r7, #15]
    98de:	2200      	movs	r2, #0
    98e0:	2101      	movs	r1, #1
    98e2:	4618      	mov	r0, r3
    98e4:	4b16      	ldr	r3, [pc, #88]	; (9940 <_usb_d_dev_handle_setup+0xc0>)
    98e6:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    98e8:	7bfb      	ldrb	r3, [r7, #15]
    98ea:	2200      	movs	r2, #0
    98ec:	2100      	movs	r1, #0
    98ee:	4618      	mov	r0, r3
    98f0:	4b14      	ldr	r3, [pc, #80]	; (9944 <_usb_d_dev_handle_setup+0xc4>)
    98f2:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    98f4:	687a      	ldr	r2, [r7, #4]
    98f6:	7cd3      	ldrb	r3, [r2, #19]
    98f8:	f36f 03c3 	bfc	r3, #3, #1
    98fc:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    98fe:	7bfb      	ldrb	r3, [r7, #15]
    9900:	2100      	movs	r1, #0
    9902:	4618      	mov	r0, r3
    9904:	4b10      	ldr	r3, [pc, #64]	; (9948 <_usb_d_dev_handle_setup+0xc8>)
    9906:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9908:	7bfb      	ldrb	r3, [r7, #15]
    990a:	2101      	movs	r1, #1
    990c:	4618      	mov	r0, r3
    990e:	4b0e      	ldr	r3, [pc, #56]	; (9948 <_usb_d_dev_handle_setup+0xc8>)
    9910:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9912:	7bfb      	ldrb	r3, [r7, #15]
    9914:	216f      	movs	r1, #111	; 0x6f
    9916:	4618      	mov	r0, r3
    9918:	4b0c      	ldr	r3, [pc, #48]	; (994c <_usb_d_dev_handle_setup+0xcc>)
    991a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    991c:	7bfb      	ldrb	r3, [r7, #15]
    991e:	216f      	movs	r1, #111	; 0x6f
    9920:	4618      	mov	r0, r3
    9922:	4b0b      	ldr	r3, [pc, #44]	; (9950 <_usb_d_dev_handle_setup+0xd0>)
    9924:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9926:	4b0b      	ldr	r3, [pc, #44]	; (9954 <_usb_d_dev_handle_setup+0xd4>)
    9928:	689b      	ldr	r3, [r3, #8]
    992a:	687a      	ldr	r2, [r7, #4]
    992c:	7c92      	ldrb	r2, [r2, #18]
    992e:	4610      	mov	r0, r2
    9930:	4798      	blx	r3
}
    9932:	3710      	adds	r7, #16
    9934:	46bd      	mov	sp, r7
    9936:	bd80      	pop	{r7, pc}
    9938:	00008d25 	.word	0x00008d25
    993c:	00008cd1 	.word	0x00008cd1
    9940:	00008fc9 	.word	0x00008fc9
    9944:	00009021 	.word	0x00009021
    9948:	00008f91 	.word	0x00008f91
    994c:	00008ad1 	.word	0x00008ad1
    9950:	00008b21 	.word	0x00008b21
    9954:	20000e20 	.word	0x20000e20

00009958 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9958:	b580      	push	{r7, lr}
    995a:	b084      	sub	sp, #16
    995c:	af00      	add	r7, sp, #0
    995e:	6078      	str	r0, [r7, #4]
    9960:	460b      	mov	r3, r1
    9962:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9964:	687b      	ldr	r3, [r7, #4]
    9966:	7c9b      	ldrb	r3, [r3, #18]
    9968:	f003 030f 	and.w	r3, r3, #15
    996c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    996e:	78f9      	ldrb	r1, [r7, #3]
    9970:	7bfb      	ldrb	r3, [r7, #15]
    9972:	2200      	movs	r2, #0
    9974:	4618      	mov	r0, r3
    9976:	4b07      	ldr	r3, [pc, #28]	; (9994 <_usb_d_dev_handle_stall+0x3c>)
    9978:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    997a:	4b07      	ldr	r3, [pc, #28]	; (9998 <_usb_d_dev_handle_stall+0x40>)
    997c:	691b      	ldr	r3, [r3, #16]
    997e:	687a      	ldr	r2, [r7, #4]
    9980:	7c90      	ldrb	r0, [r2, #18]
    9982:	687a      	ldr	r2, [r7, #4]
    9984:	6892      	ldr	r2, [r2, #8]
    9986:	2101      	movs	r1, #1
    9988:	4798      	blx	r3
}
    998a:	bf00      	nop
    998c:	3710      	adds	r7, #16
    998e:	46bd      	mov	sp, r7
    9990:	bd80      	pop	{r7, pc}
    9992:	bf00      	nop
    9994:	00008c85 	.word	0x00008c85
    9998:	20000e20 	.word	0x20000e20

0000999c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    999c:	b580      	push	{r7, lr}
    999e:	b088      	sub	sp, #32
    99a0:	af00      	add	r7, sp, #0
    99a2:	6078      	str	r0, [r7, #4]
    99a4:	460b      	mov	r3, r1
    99a6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    99a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99ac:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    99ae:	687b      	ldr	r3, [r7, #4]
    99b0:	7c9b      	ldrb	r3, [r3, #18]
    99b2:	f003 030f 	and.w	r3, r3, #15
    99b6:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    99b8:	4b61      	ldr	r3, [pc, #388]	; (9b40 <_usb_d_dev_handle_trfail+0x1a4>)
    99ba:	881b      	ldrh	r3, [r3, #0]
    99bc:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    99be:	7efb      	ldrb	r3, [r7, #27]
    99c0:	015b      	lsls	r3, r3, #5
    99c2:	4a60      	ldr	r2, [pc, #384]	; (9b44 <_usb_d_dev_handle_trfail+0x1a8>)
    99c4:	4413      	add	r3, r2
    99c6:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    99c8:	78fb      	ldrb	r3, [r7, #3]
    99ca:	2b00      	cmp	r3, #0
    99cc:	d006      	beq.n	99dc <_usb_d_dev_handle_trfail+0x40>
    99ce:	7efb      	ldrb	r3, [r7, #27]
    99d0:	4619      	mov	r1, r3
    99d2:	69f8      	ldr	r0, [r7, #28]
    99d4:	4b5c      	ldr	r3, [pc, #368]	; (9b48 <_usb_d_dev_handle_trfail+0x1ac>)
    99d6:	4798      	blx	r3
    99d8:	4603      	mov	r3, r0
    99da:	e005      	b.n	99e8 <_usb_d_dev_handle_trfail+0x4c>
    99dc:	7efb      	ldrb	r3, [r7, #27]
    99de:	4619      	mov	r1, r3
    99e0:	69f8      	ldr	r0, [r7, #28]
    99e2:	4b5a      	ldr	r3, [pc, #360]	; (9b4c <_usb_d_dev_handle_trfail+0x1b0>)
    99e4:	4798      	blx	r3
    99e6:	4603      	mov	r3, r0
    99e8:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    99ea:	687b      	ldr	r3, [r7, #4]
    99ec:	7cdb      	ldrb	r3, [r3, #19]
    99ee:	f003 0307 	and.w	r3, r3, #7
    99f2:	b2db      	uxtb	r3, r3
    99f4:	2b01      	cmp	r3, #1
    99f6:	bf0c      	ite	eq
    99f8:	2301      	moveq	r3, #1
    99fa:	2300      	movne	r3, #0
    99fc:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    99fe:	78fb      	ldrb	r3, [r7, #3]
    9a00:	011b      	lsls	r3, r3, #4
    9a02:	697a      	ldr	r2, [r7, #20]
    9a04:	4413      	add	r3, r2
    9a06:	7a9b      	ldrb	r3, [r3, #10]
    9a08:	b2db      	uxtb	r3, r3
    9a0a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9a0c:	7cfb      	ldrb	r3, [r7, #19]
    9a0e:	2b02      	cmp	r3, #2
    9a10:	d12f      	bne.n	9a72 <_usb_d_dev_handle_trfail+0xd6>
    9a12:	7b3b      	ldrb	r3, [r7, #12]
    9a14:	f003 0301 	and.w	r3, r3, #1
    9a18:	b2db      	uxtb	r3, r3
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d029      	beq.n	9a72 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9a1e:	78fb      	ldrb	r3, [r7, #3]
    9a20:	011b      	lsls	r3, r3, #4
    9a22:	697a      	ldr	r2, [r7, #20]
    9a24:	441a      	add	r2, r3
    9a26:	7a93      	ldrb	r3, [r2, #10]
    9a28:	f36f 0300 	bfc	r3, #0, #1
    9a2c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a2e:	78fb      	ldrb	r3, [r7, #3]
    9a30:	f107 0220 	add.w	r2, r7, #32
    9a34:	4413      	add	r3, r2
    9a36:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a3a:	7efb      	ldrb	r3, [r7, #27]
    9a3c:	4619      	mov	r1, r3
    9a3e:	69f8      	ldr	r0, [r7, #28]
    9a40:	4b43      	ldr	r3, [pc, #268]	; (9b50 <_usb_d_dev_handle_trfail+0x1b4>)
    9a42:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a44:	78fb      	ldrb	r3, [r7, #3]
    9a46:	f107 0220 	add.w	r2, r7, #32
    9a4a:	4413      	add	r3, r2
    9a4c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a50:	7efb      	ldrb	r3, [r7, #27]
    9a52:	4619      	mov	r1, r3
    9a54:	69f8      	ldr	r0, [r7, #28]
    9a56:	4b3f      	ldr	r3, [pc, #252]	; (9b54 <_usb_d_dev_handle_trfail+0x1b8>)
    9a58:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9a5a:	78fb      	ldrb	r3, [r7, #3]
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	bf14      	ite	ne
    9a60:	2301      	movne	r3, #1
    9a62:	2300      	moveq	r3, #0
    9a64:	b2db      	uxtb	r3, r3
    9a66:	2204      	movs	r2, #4
    9a68:	4619      	mov	r1, r3
    9a6a:	6878      	ldr	r0, [r7, #4]
    9a6c:	4b3a      	ldr	r3, [pc, #232]	; (9b58 <_usb_d_dev_handle_trfail+0x1bc>)
    9a6e:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9a70:	e062      	b.n	9b38 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9a72:	7b3b      	ldrb	r3, [r7, #12]
    9a74:	f003 0302 	and.w	r3, r3, #2
    9a78:	b2db      	uxtb	r3, r3
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d040      	beq.n	9b00 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9a7e:	78fb      	ldrb	r3, [r7, #3]
    9a80:	011b      	lsls	r3, r3, #4
    9a82:	697a      	ldr	r2, [r7, #20]
    9a84:	441a      	add	r2, r3
    9a86:	7a93      	ldrb	r3, [r2, #10]
    9a88:	f36f 0341 	bfc	r3, #1, #1
    9a8c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a8e:	78fb      	ldrb	r3, [r7, #3]
    9a90:	f107 0220 	add.w	r2, r7, #32
    9a94:	4413      	add	r3, r2
    9a96:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a9a:	7efb      	ldrb	r3, [r7, #27]
    9a9c:	4619      	mov	r1, r3
    9a9e:	69f8      	ldr	r0, [r7, #28]
    9aa0:	4b2b      	ldr	r3, [pc, #172]	; (9b50 <_usb_d_dev_handle_trfail+0x1b4>)
    9aa2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9aa4:	78fb      	ldrb	r3, [r7, #3]
    9aa6:	f107 0220 	add.w	r2, r7, #32
    9aaa:	4413      	add	r3, r2
    9aac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9ab0:	7efb      	ldrb	r3, [r7, #27]
    9ab2:	4619      	mov	r1, r3
    9ab4:	69f8      	ldr	r0, [r7, #28]
    9ab6:	4b27      	ldr	r3, [pc, #156]	; (9b54 <_usb_d_dev_handle_trfail+0x1b8>)
    9ab8:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9aba:	7cbb      	ldrb	r3, [r7, #18]
    9abc:	2b00      	cmp	r3, #0
    9abe:	d03b      	beq.n	9b38 <_usb_d_dev_handle_trfail+0x19c>
    9ac0:	687b      	ldr	r3, [r7, #4]
    9ac2:	7cdb      	ldrb	r3, [r3, #19]
    9ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ac8:	b2db      	uxtb	r3, r3
    9aca:	2b00      	cmp	r3, #0
    9acc:	d034      	beq.n	9b38 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9ace:	687b      	ldr	r3, [r7, #4]
    9ad0:	7cdb      	ldrb	r3, [r3, #19]
    9ad2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9ad6:	b2db      	uxtb	r3, r3
    9ad8:	461a      	mov	r2, r3
    9ada:	78fb      	ldrb	r3, [r7, #3]
    9adc:	4293      	cmp	r3, r2
    9ade:	d02b      	beq.n	9b38 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	7cdb      	ldrb	r3, [r3, #19]
    9ae4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9ae8:	b2db      	uxtb	r3, r3
    9aea:	2b00      	cmp	r3, #0
    9aec:	bf14      	ite	ne
    9aee:	2301      	movne	r3, #1
    9af0:	2300      	moveq	r3, #0
    9af2:	b2db      	uxtb	r3, r3
    9af4:	2200      	movs	r2, #0
    9af6:	4619      	mov	r1, r3
    9af8:	6878      	ldr	r0, [r7, #4]
    9afa:	4b17      	ldr	r3, [pc, #92]	; (9b58 <_usb_d_dev_handle_trfail+0x1bc>)
    9afc:	4798      	blx	r3
}
    9afe:	e01b      	b.n	9b38 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9b00:	78fa      	ldrb	r2, [r7, #3]
    9b02:	7efb      	ldrb	r3, [r7, #27]
    9b04:	4611      	mov	r1, r2
    9b06:	4618      	mov	r0, r3
    9b08:	4b14      	ldr	r3, [pc, #80]	; (9b5c <_usb_d_dev_handle_trfail+0x1c0>)
    9b0a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9b0c:	78fb      	ldrb	r3, [r7, #3]
    9b0e:	f107 0220 	add.w	r2, r7, #32
    9b12:	4413      	add	r3, r2
    9b14:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b18:	7efb      	ldrb	r3, [r7, #27]
    9b1a:	4619      	mov	r1, r3
    9b1c:	69f8      	ldr	r0, [r7, #28]
    9b1e:	4b0c      	ldr	r3, [pc, #48]	; (9b50 <_usb_d_dev_handle_trfail+0x1b4>)
    9b20:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9b22:	78fb      	ldrb	r3, [r7, #3]
    9b24:	f107 0220 	add.w	r2, r7, #32
    9b28:	4413      	add	r3, r2
    9b2a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b2e:	7efb      	ldrb	r3, [r7, #27]
    9b30:	4619      	mov	r1, r3
    9b32:	69f8      	ldr	r0, [r7, #28]
    9b34:	4b07      	ldr	r3, [pc, #28]	; (9b54 <_usb_d_dev_handle_trfail+0x1b8>)
    9b36:	4798      	blx	r3
}
    9b38:	bf00      	nop
    9b3a:	3720      	adds	r7, #32
    9b3c:	46bd      	mov	sp, r7
    9b3e:	bd80      	pop	{r7, pc}
    9b40:	000123d0 	.word	0x000123d0
    9b44:	20000ee8 	.word	0x20000ee8
    9b48:	00008705 	.word	0x00008705
    9b4c:	000086d5 	.word	0x000086d5
    9b50:	000085a9 	.word	0x000085a9
    9b54:	000086a9 	.word	0x000086a9
    9b58:	0000a715 	.word	0x0000a715
    9b5c:	00008f91 	.word	0x00008f91

00009b60 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9b60:	b580      	push	{r7, lr}
    9b62:	b082      	sub	sp, #8
    9b64:	af00      	add	r7, sp, #0
    9b66:	6078      	str	r0, [r7, #4]
    9b68:	460b      	mov	r3, r1
    9b6a:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b6c:	78fb      	ldrb	r3, [r7, #3]
    9b6e:	f003 0310 	and.w	r3, r3, #16
    9b72:	2b00      	cmp	r3, #0
    9b74:	d003      	beq.n	9b7e <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9b76:	6878      	ldr	r0, [r7, #4]
    9b78:	4b0c      	ldr	r3, [pc, #48]	; (9bac <_usb_d_dev_trans_setup_isr+0x4c>)
    9b7a:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9b7c:	e012      	b.n	9ba4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9b7e:	78fb      	ldrb	r3, [r7, #3]
    9b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b84:	2b00      	cmp	r3, #0
    9b86:	d004      	beq.n	9b92 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9b88:	2101      	movs	r1, #1
    9b8a:	6878      	ldr	r0, [r7, #4]
    9b8c:	4b08      	ldr	r3, [pc, #32]	; (9bb0 <_usb_d_dev_trans_setup_isr+0x50>)
    9b8e:	4798      	blx	r3
}
    9b90:	e008      	b.n	9ba4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9b92:	78fb      	ldrb	r3, [r7, #3]
    9b94:	f003 0320 	and.w	r3, r3, #32
    9b98:	2b00      	cmp	r3, #0
    9b9a:	d003      	beq.n	9ba4 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9b9c:	2100      	movs	r1, #0
    9b9e:	6878      	ldr	r0, [r7, #4]
    9ba0:	4b03      	ldr	r3, [pc, #12]	; (9bb0 <_usb_d_dev_trans_setup_isr+0x50>)
    9ba2:	4798      	blx	r3
}
    9ba4:	bf00      	nop
    9ba6:	3708      	adds	r7, #8
    9ba8:	46bd      	mov	sp, r7
    9baa:	bd80      	pop	{r7, pc}
    9bac:	00009881 	.word	0x00009881
    9bb0:	00009959 	.word	0x00009959

00009bb4 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b082      	sub	sp, #8
    9bb8:	af00      	add	r7, sp, #0
    9bba:	6078      	str	r0, [r7, #4]
    9bbc:	460b      	mov	r3, r1
    9bbe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9bc0:	78fb      	ldrb	r3, [r7, #3]
    9bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d004      	beq.n	9bd4 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9bca:	2101      	movs	r1, #1
    9bcc:	6878      	ldr	r0, [r7, #4]
    9bce:	4b1a      	ldr	r3, [pc, #104]	; (9c38 <_usb_d_dev_trans_in_isr+0x84>)
    9bd0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9bd2:	e02c      	b.n	9c2e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9bd4:	78fb      	ldrb	r3, [r7, #3]
    9bd6:	f003 0308 	and.w	r3, r3, #8
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d004      	beq.n	9be8 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9bde:	2101      	movs	r1, #1
    9be0:	6878      	ldr	r0, [r7, #4]
    9be2:	4b16      	ldr	r3, [pc, #88]	; (9c3c <_usb_d_dev_trans_in_isr+0x88>)
    9be4:	4798      	blx	r3
}
    9be6:	e022      	b.n	9c2e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9be8:	78fb      	ldrb	r3, [r7, #3]
    9bea:	f003 0302 	and.w	r3, r3, #2
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d004      	beq.n	9bfc <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9bf2:	2101      	movs	r1, #1
    9bf4:	6878      	ldr	r0, [r7, #4]
    9bf6:	4b12      	ldr	r3, [pc, #72]	; (9c40 <_usb_d_dev_trans_in_isr+0x8c>)
    9bf8:	4798      	blx	r3
}
    9bfa:	e018      	b.n	9c2e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9bfc:	687b      	ldr	r3, [r7, #4]
    9bfe:	7cdb      	ldrb	r3, [r3, #19]
    9c00:	f003 0307 	and.w	r3, r3, #7
    9c04:	b2db      	uxtb	r3, r3
    9c06:	2b01      	cmp	r3, #1
    9c08:	d111      	bne.n	9c2e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9c0a:	78fb      	ldrb	r3, [r7, #3]
    9c0c:	f003 0304 	and.w	r3, r3, #4
    9c10:	2b00      	cmp	r3, #0
    9c12:	d004      	beq.n	9c1e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9c14:	2100      	movs	r1, #0
    9c16:	6878      	ldr	r0, [r7, #4]
    9c18:	4b08      	ldr	r3, [pc, #32]	; (9c3c <_usb_d_dev_trans_in_isr+0x88>)
    9c1a:	4798      	blx	r3
}
    9c1c:	e007      	b.n	9c2e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9c1e:	78fb      	ldrb	r3, [r7, #3]
    9c20:	f003 0310 	and.w	r3, r3, #16
    9c24:	2b00      	cmp	r3, #0
    9c26:	d002      	beq.n	9c2e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9c28:	6878      	ldr	r0, [r7, #4]
    9c2a:	4b06      	ldr	r3, [pc, #24]	; (9c44 <_usb_d_dev_trans_in_isr+0x90>)
    9c2c:	4798      	blx	r3
}
    9c2e:	bf00      	nop
    9c30:	3708      	adds	r7, #8
    9c32:	46bd      	mov	sp, r7
    9c34:	bd80      	pop	{r7, pc}
    9c36:	bf00      	nop
    9c38:	00009959 	.word	0x00009959
    9c3c:	0000999d 	.word	0x0000999d
    9c40:	000093a5 	.word	0x000093a5
    9c44:	00009881 	.word	0x00009881

00009c48 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9c48:	b580      	push	{r7, lr}
    9c4a:	b082      	sub	sp, #8
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	6078      	str	r0, [r7, #4]
    9c50:	460b      	mov	r3, r1
    9c52:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9c54:	78fb      	ldrb	r3, [r7, #3]
    9c56:	f003 0320 	and.w	r3, r3, #32
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d004      	beq.n	9c68 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9c5e:	2100      	movs	r1, #0
    9c60:	6878      	ldr	r0, [r7, #4]
    9c62:	4b1a      	ldr	r3, [pc, #104]	; (9ccc <_usb_d_dev_trans_out_isr+0x84>)
    9c64:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9c66:	e02c      	b.n	9cc2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9c68:	78fb      	ldrb	r3, [r7, #3]
    9c6a:	f003 0304 	and.w	r3, r3, #4
    9c6e:	2b00      	cmp	r3, #0
    9c70:	d004      	beq.n	9c7c <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9c72:	2100      	movs	r1, #0
    9c74:	6878      	ldr	r0, [r7, #4]
    9c76:	4b16      	ldr	r3, [pc, #88]	; (9cd0 <_usb_d_dev_trans_out_isr+0x88>)
    9c78:	4798      	blx	r3
}
    9c7a:	e022      	b.n	9cc2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9c7c:	78fb      	ldrb	r3, [r7, #3]
    9c7e:	f003 0301 	and.w	r3, r3, #1
    9c82:	2b00      	cmp	r3, #0
    9c84:	d004      	beq.n	9c90 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9c86:	2101      	movs	r1, #1
    9c88:	6878      	ldr	r0, [r7, #4]
    9c8a:	4b12      	ldr	r3, [pc, #72]	; (9cd4 <_usb_d_dev_trans_out_isr+0x8c>)
    9c8c:	4798      	blx	r3
}
    9c8e:	e018      	b.n	9cc2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9c90:	687b      	ldr	r3, [r7, #4]
    9c92:	7cdb      	ldrb	r3, [r3, #19]
    9c94:	f003 0307 	and.w	r3, r3, #7
    9c98:	b2db      	uxtb	r3, r3
    9c9a:	2b01      	cmp	r3, #1
    9c9c:	d111      	bne.n	9cc2 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9c9e:	78fb      	ldrb	r3, [r7, #3]
    9ca0:	f003 0308 	and.w	r3, r3, #8
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	d004      	beq.n	9cb2 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9ca8:	2101      	movs	r1, #1
    9caa:	6878      	ldr	r0, [r7, #4]
    9cac:	4b08      	ldr	r3, [pc, #32]	; (9cd0 <_usb_d_dev_trans_out_isr+0x88>)
    9cae:	4798      	blx	r3
}
    9cb0:	e007      	b.n	9cc2 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9cb2:	78fb      	ldrb	r3, [r7, #3]
    9cb4:	f003 0310 	and.w	r3, r3, #16
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d002      	beq.n	9cc2 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9cbc:	6878      	ldr	r0, [r7, #4]
    9cbe:	4b06      	ldr	r3, [pc, #24]	; (9cd8 <_usb_d_dev_trans_out_isr+0x90>)
    9cc0:	4798      	blx	r3
}
    9cc2:	bf00      	nop
    9cc4:	3708      	adds	r7, #8
    9cc6:	46bd      	mov	sp, r7
    9cc8:	bd80      	pop	{r7, pc}
    9cca:	bf00      	nop
    9ccc:	00009959 	.word	0x00009959
    9cd0:	0000999d 	.word	0x0000999d
    9cd4:	000095bd 	.word	0x000095bd
    9cd8:	00009881 	.word	0x00009881

00009cdc <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b084      	sub	sp, #16
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
    9ce4:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9ce6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9cea:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cec:	683b      	ldr	r3, [r7, #0]
    9cee:	7c9b      	ldrb	r3, [r3, #18]
    9cf0:	f003 030f 	and.w	r3, r3, #15
    9cf4:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9cf6:	7afb      	ldrb	r3, [r7, #11]
    9cf8:	2201      	movs	r2, #1
    9cfa:	409a      	lsls	r2, r3
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	4013      	ands	r3, r2
    9d00:	2b00      	cmp	r3, #0
    9d02:	d03d      	beq.n	9d80 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9d04:	7afb      	ldrb	r3, [r7, #11]
    9d06:	68fa      	ldr	r2, [r7, #12]
    9d08:	3308      	adds	r3, #8
    9d0a:	015b      	lsls	r3, r3, #5
    9d0c:	4413      	add	r3, r2
    9d0e:	3307      	adds	r3, #7
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9d14:	7afb      	ldrb	r3, [r7, #11]
    9d16:	68fa      	ldr	r2, [r7, #12]
    9d18:	015b      	lsls	r3, r3, #5
    9d1a:	4413      	add	r3, r2
    9d1c:	f203 1309 	addw	r3, r3, #265	; 0x109
    9d20:	781b      	ldrb	r3, [r3, #0]
    9d22:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9d24:	7aba      	ldrb	r2, [r7, #10]
    9d26:	7a7b      	ldrb	r3, [r7, #9]
    9d28:	4013      	ands	r3, r2
    9d2a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9d2c:	7abb      	ldrb	r3, [r7, #10]
    9d2e:	2b00      	cmp	r3, #0
    9d30:	d027      	beq.n	9d82 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9d32:	683b      	ldr	r3, [r7, #0]
    9d34:	7cdb      	ldrb	r3, [r3, #19]
    9d36:	f003 0307 	and.w	r3, r3, #7
    9d3a:	b2db      	uxtb	r3, r3
    9d3c:	2b01      	cmp	r3, #1
    9d3e:	d10c      	bne.n	9d5a <_usb_d_dev_handle_eps+0x7e>
    9d40:	683b      	ldr	r3, [r7, #0]
    9d42:	7cdb      	ldrb	r3, [r3, #19]
    9d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d48:	b2db      	uxtb	r3, r3
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d105      	bne.n	9d5a <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9d4e:	7abb      	ldrb	r3, [r7, #10]
    9d50:	4619      	mov	r1, r3
    9d52:	6838      	ldr	r0, [r7, #0]
    9d54:	4b0c      	ldr	r3, [pc, #48]	; (9d88 <_usb_d_dev_handle_eps+0xac>)
    9d56:	4798      	blx	r3
    9d58:	e013      	b.n	9d82 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9d5a:	683b      	ldr	r3, [r7, #0]
    9d5c:	7cdb      	ldrb	r3, [r3, #19]
    9d5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9d62:	b2db      	uxtb	r3, r3
    9d64:	2b00      	cmp	r3, #0
    9d66:	d005      	beq.n	9d74 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9d68:	7abb      	ldrb	r3, [r7, #10]
    9d6a:	4619      	mov	r1, r3
    9d6c:	6838      	ldr	r0, [r7, #0]
    9d6e:	4b07      	ldr	r3, [pc, #28]	; (9d8c <_usb_d_dev_handle_eps+0xb0>)
    9d70:	4798      	blx	r3
    9d72:	e006      	b.n	9d82 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9d74:	7abb      	ldrb	r3, [r7, #10]
    9d76:	4619      	mov	r1, r3
    9d78:	6838      	ldr	r0, [r7, #0]
    9d7a:	4b05      	ldr	r3, [pc, #20]	; (9d90 <_usb_d_dev_handle_eps+0xb4>)
    9d7c:	4798      	blx	r3
    9d7e:	e000      	b.n	9d82 <_usb_d_dev_handle_eps+0xa6>
		return;
    9d80:	bf00      	nop
		}
	}
}
    9d82:	3710      	adds	r7, #16
    9d84:	46bd      	mov	sp, r7
    9d86:	bd80      	pop	{r7, pc}
    9d88:	00009b61 	.word	0x00009b61
    9d8c:	00009bb5 	.word	0x00009bb5
    9d90:	00009c49 	.word	0x00009c49

00009d94 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9d94:	b580      	push	{r7, lr}
    9d96:	b084      	sub	sp, #16
    9d98:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9d9a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d9e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9da0:	68bb      	ldr	r3, [r7, #8]
    9da2:	8c1b      	ldrh	r3, [r3, #32]
    9da4:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9da6:	88fb      	ldrh	r3, [r7, #6]
    9da8:	2b00      	cmp	r3, #0
    9daa:	d104      	bne.n	9db6 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9dac:	4b13      	ldr	r3, [pc, #76]	; (9dfc <_usb_d_dev_handler+0x68>)
    9dae:	4798      	blx	r3
    9db0:	4603      	mov	r3, r0
    9db2:	2b00      	cmp	r3, #0
    9db4:	d11e      	bne.n	9df4 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9db6:	2300      	movs	r3, #0
    9db8:	73fb      	strb	r3, [r7, #15]
    9dba:	e017      	b.n	9dec <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9dbc:	7bfa      	ldrb	r2, [r7, #15]
    9dbe:	4613      	mov	r3, r2
    9dc0:	009b      	lsls	r3, r3, #2
    9dc2:	4413      	add	r3, r2
    9dc4:	009b      	lsls	r3, r3, #2
    9dc6:	3310      	adds	r3, #16
    9dc8:	4a0d      	ldr	r2, [pc, #52]	; (9e00 <_usb_d_dev_handler+0x6c>)
    9dca:	4413      	add	r3, r2
    9dcc:	3304      	adds	r3, #4
    9dce:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9dd0:	683b      	ldr	r3, [r7, #0]
    9dd2:	7c9b      	ldrb	r3, [r3, #18]
    9dd4:	2bff      	cmp	r3, #255	; 0xff
    9dd6:	d005      	beq.n	9de4 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9dd8:	88fb      	ldrh	r3, [r7, #6]
    9dda:	6839      	ldr	r1, [r7, #0]
    9ddc:	4618      	mov	r0, r3
    9dde:	4b09      	ldr	r3, [pc, #36]	; (9e04 <_usb_d_dev_handler+0x70>)
    9de0:	4798      	blx	r3
    9de2:	e000      	b.n	9de6 <_usb_d_dev_handler+0x52>
			continue;
    9de4:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9de6:	7bfb      	ldrb	r3, [r7, #15]
    9de8:	3301      	adds	r3, #1
    9dea:	73fb      	strb	r3, [r7, #15]
    9dec:	7bfb      	ldrb	r3, [r7, #15]
    9dee:	2b08      	cmp	r3, #8
    9df0:	d9e4      	bls.n	9dbc <_usb_d_dev_handler+0x28>
    9df2:	e000      	b.n	9df6 <_usb_d_dev_handler+0x62>
			return;
    9df4:	bf00      	nop
	}
}
    9df6:	3710      	adds	r7, #16
    9df8:	46bd      	mov	sp, r7
    9dfa:	bd80      	pop	{r7, pc}
    9dfc:	000092ed 	.word	0x000092ed
    9e00:	20000e20 	.word	0x20000e20
    9e04:	00009cdd 	.word	0x00009cdd

00009e08 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9e08:	b580      	push	{r7, lr}
    9e0a:	b082      	sub	sp, #8
    9e0c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9e0e:	2300      	movs	r3, #0
    9e10:	71fb      	strb	r3, [r7, #7]
    9e12:	e023      	b.n	9e5c <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9e14:	79fa      	ldrb	r2, [r7, #7]
    9e16:	4613      	mov	r3, r2
    9e18:	009b      	lsls	r3, r3, #2
    9e1a:	4413      	add	r3, r2
    9e1c:	009b      	lsls	r3, r3, #2
    9e1e:	3310      	adds	r3, #16
    9e20:	4a14      	ldr	r2, [pc, #80]	; (9e74 <_usb_d_dev_reset_epts+0x6c>)
    9e22:	4413      	add	r3, r2
    9e24:	3304      	adds	r3, #4
    9e26:	2103      	movs	r1, #3
    9e28:	4618      	mov	r0, r3
    9e2a:	4b13      	ldr	r3, [pc, #76]	; (9e78 <_usb_d_dev_reset_epts+0x70>)
    9e2c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9e2e:	79fa      	ldrb	r2, [r7, #7]
    9e30:	4910      	ldr	r1, [pc, #64]	; (9e74 <_usb_d_dev_reset_epts+0x6c>)
    9e32:	4613      	mov	r3, r2
    9e34:	009b      	lsls	r3, r3, #2
    9e36:	4413      	add	r3, r2
    9e38:	009b      	lsls	r3, r3, #2
    9e3a:	440b      	add	r3, r1
    9e3c:	3326      	adds	r3, #38	; 0x26
    9e3e:	22ff      	movs	r2, #255	; 0xff
    9e40:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9e42:	79fa      	ldrb	r2, [r7, #7]
    9e44:	490b      	ldr	r1, [pc, #44]	; (9e74 <_usb_d_dev_reset_epts+0x6c>)
    9e46:	4613      	mov	r3, r2
    9e48:	009b      	lsls	r3, r3, #2
    9e4a:	4413      	add	r3, r2
    9e4c:	009b      	lsls	r3, r3, #2
    9e4e:	440b      	add	r3, r1
    9e50:	3327      	adds	r3, #39	; 0x27
    9e52:	2200      	movs	r2, #0
    9e54:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9e56:	79fb      	ldrb	r3, [r7, #7]
    9e58:	3301      	adds	r3, #1
    9e5a:	71fb      	strb	r3, [r7, #7]
    9e5c:	79fb      	ldrb	r3, [r7, #7]
    9e5e:	2b08      	cmp	r3, #8
    9e60:	d9d8      	bls.n	9e14 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9e62:	22a0      	movs	r2, #160	; 0xa0
    9e64:	2100      	movs	r1, #0
    9e66:	4805      	ldr	r0, [pc, #20]	; (9e7c <_usb_d_dev_reset_epts+0x74>)
    9e68:	4b05      	ldr	r3, [pc, #20]	; (9e80 <_usb_d_dev_reset_epts+0x78>)
    9e6a:	4798      	blx	r3
}
    9e6c:	bf00      	nop
    9e6e:	3708      	adds	r7, #8
    9e70:	46bd      	mov	sp, r7
    9e72:	bd80      	pop	{r7, pc}
    9e74:	20000e20 	.word	0x20000e20
    9e78:	0000a6cd 	.word	0x0000a6cd
    9e7c:	20000ee8 	.word	0x20000ee8
    9e80:	00011d51 	.word	0x00011d51

00009e84 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9e84:	b580      	push	{r7, lr}
    9e86:	b084      	sub	sp, #16
    9e88:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9e8a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e8e:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9e90:	2301      	movs	r3, #1
    9e92:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9e94:	2304      	movs	r3, #4
    9e96:	713b      	strb	r3, [r7, #4]
    9e98:	2300      	movs	r3, #0
    9e9a:	717b      	strb	r3, [r7, #5]
    9e9c:	2300      	movs	r3, #0
    9e9e:	71bb      	strb	r3, [r7, #6]
    9ea0:	2300      	movs	r3, #0
    9ea2:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9ea4:	2101      	movs	r1, #1
    9ea6:	68f8      	ldr	r0, [r7, #12]
    9ea8:	4b26      	ldr	r3, [pc, #152]	; (9f44 <_usb_d_dev_init+0xc0>)
    9eaa:	4798      	blx	r3
    9eac:	4603      	mov	r3, r0
    9eae:	f083 0301 	eor.w	r3, r3, #1
    9eb2:	b2db      	uxtb	r3, r3
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d011      	beq.n	9edc <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9eb8:	2102      	movs	r1, #2
    9eba:	68f8      	ldr	r0, [r7, #12]
    9ebc:	4b22      	ldr	r3, [pc, #136]	; (9f48 <_usb_d_dev_init+0xc4>)
    9ebe:	4798      	blx	r3
    9ec0:	4603      	mov	r3, r0
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d006      	beq.n	9ed4 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9ec6:	68f8      	ldr	r0, [r7, #12]
    9ec8:	4b20      	ldr	r3, [pc, #128]	; (9f4c <_usb_d_dev_init+0xc8>)
    9eca:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9ecc:	2102      	movs	r1, #2
    9ece:	68f8      	ldr	r0, [r7, #12]
    9ed0:	4b1f      	ldr	r3, [pc, #124]	; (9f50 <_usb_d_dev_init+0xcc>)
    9ed2:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9ed4:	2101      	movs	r1, #1
    9ed6:	68f8      	ldr	r0, [r7, #12]
    9ed8:	4b1e      	ldr	r3, [pc, #120]	; (9f54 <_usb_d_dev_init+0xd0>)
    9eda:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9edc:	2101      	movs	r1, #1
    9ede:	68f8      	ldr	r0, [r7, #12]
    9ee0:	4b1b      	ldr	r3, [pc, #108]	; (9f50 <_usb_d_dev_init+0xcc>)
    9ee2:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9ee4:	4b1c      	ldr	r3, [pc, #112]	; (9f58 <_usb_d_dev_init+0xd4>)
    9ee6:	4a1d      	ldr	r2, [pc, #116]	; (9f5c <_usb_d_dev_init+0xd8>)
    9ee8:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9eea:	4b1b      	ldr	r3, [pc, #108]	; (9f58 <_usb_d_dev_init+0xd4>)
    9eec:	4a1b      	ldr	r2, [pc, #108]	; (9f5c <_usb_d_dev_init+0xd8>)
    9eee:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9ef0:	4b19      	ldr	r3, [pc, #100]	; (9f58 <_usb_d_dev_init+0xd4>)
    9ef2:	4a1a      	ldr	r2, [pc, #104]	; (9f5c <_usb_d_dev_init+0xd8>)
    9ef4:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9ef6:	4b18      	ldr	r3, [pc, #96]	; (9f58 <_usb_d_dev_init+0xd4>)
    9ef8:	4a18      	ldr	r2, [pc, #96]	; (9f5c <_usb_d_dev_init+0xd8>)
    9efa:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9efc:	4b16      	ldr	r3, [pc, #88]	; (9f58 <_usb_d_dev_init+0xd4>)
    9efe:	4a17      	ldr	r2, [pc, #92]	; (9f5c <_usb_d_dev_init+0xd8>)
    9f00:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9f02:	4b17      	ldr	r3, [pc, #92]	; (9f60 <_usb_d_dev_init+0xdc>)
    9f04:	4798      	blx	r3

	_usb_load_calib();
    9f06:	4b17      	ldr	r3, [pc, #92]	; (9f64 <_usb_d_dev_init+0xe0>)
    9f08:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9f0a:	2104      	movs	r1, #4
    9f0c:	68f8      	ldr	r0, [r7, #12]
    9f0e:	4b11      	ldr	r3, [pc, #68]	; (9f54 <_usb_d_dev_init+0xd0>)
    9f10:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9f12:	4b15      	ldr	r3, [pc, #84]	; (9f68 <_usb_d_dev_init+0xe4>)
    9f14:	4619      	mov	r1, r3
    9f16:	68f8      	ldr	r0, [r7, #12]
    9f18:	4b14      	ldr	r3, [pc, #80]	; (9f6c <_usb_d_dev_init+0xe8>)
    9f1a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9f1c:	7afb      	ldrb	r3, [r7, #11]
    9f1e:	f107 0210 	add.w	r2, r7, #16
    9f22:	4413      	add	r3, r2
    9f24:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9f28:	f043 0301 	orr.w	r3, r3, #1
    9f2c:	b2db      	uxtb	r3, r3
    9f2e:	b29b      	uxth	r3, r3
    9f30:	4619      	mov	r1, r3
    9f32:	68f8      	ldr	r0, [r7, #12]
    9f34:	4b0e      	ldr	r3, [pc, #56]	; (9f70 <_usb_d_dev_init+0xec>)
    9f36:	4798      	blx	r3

	return ERR_NONE;
    9f38:	2300      	movs	r3, #0
}
    9f3a:	4618      	mov	r0, r3
    9f3c:	3710      	adds	r7, #16
    9f3e:	46bd      	mov	sp, r7
    9f40:	bd80      	pop	{r7, pc}
    9f42:	bf00      	nop
    9f44:	0000851d 	.word	0x0000851d
    9f48:	0000886d 	.word	0x0000886d
    9f4c:	00008841 	.word	0x00008841
    9f50:	000084f3 	.word	0x000084f3
    9f54:	0000889d 	.word	0x0000889d
    9f58:	20000e20 	.word	0x20000e20
    9f5c:	00008965 	.word	0x00008965
    9f60:	00009e09 	.word	0x00009e09
    9f64:	0000897d 	.word	0x0000897d
    9f68:	20000ee8 	.word	0x20000ee8
    9f6c:	00008949 	.word	0x00008949
    9f70:	0000890d 	.word	0x0000890d

00009f74 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9f74:	b580      	push	{r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9f7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f7e:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9f80:	2103      	movs	r1, #3
    9f82:	6878      	ldr	r0, [r7, #4]
    9f84:	4b17      	ldr	r3, [pc, #92]	; (9fe4 <_usb_d_dev_enable+0x70>)
    9f86:	4798      	blx	r3
    9f88:	4603      	mov	r3, r0
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	d002      	beq.n	9f94 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9f8e:	f06f 0310 	mvn.w	r3, #16
    9f92:	e023      	b.n	9fdc <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9f94:	6878      	ldr	r0, [r7, #4]
    9f96:	4b14      	ldr	r3, [pc, #80]	; (9fe8 <_usb_d_dev_enable+0x74>)
    9f98:	4798      	blx	r3
    9f9a:	4603      	mov	r3, r0
    9f9c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9f9e:	78fb      	ldrb	r3, [r7, #3]
    9fa0:	f003 0302 	and.w	r3, r3, #2
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d107      	bne.n	9fb8 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9fa8:	78fb      	ldrb	r3, [r7, #3]
    9faa:	f043 0302 	orr.w	r3, r3, #2
    9fae:	b2db      	uxtb	r3, r3
    9fb0:	4619      	mov	r1, r3
    9fb2:	6878      	ldr	r0, [r7, #4]
    9fb4:	4b0d      	ldr	r3, [pc, #52]	; (9fec <_usb_d_dev_enable+0x78>)
    9fb6:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9fb8:	2050      	movs	r0, #80	; 0x50
    9fba:	4b0d      	ldr	r3, [pc, #52]	; (9ff0 <_usb_d_dev_enable+0x7c>)
    9fbc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9fbe:	2051      	movs	r0, #81	; 0x51
    9fc0:	4b0b      	ldr	r3, [pc, #44]	; (9ff0 <_usb_d_dev_enable+0x7c>)
    9fc2:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9fc4:	2052      	movs	r0, #82	; 0x52
    9fc6:	4b0a      	ldr	r3, [pc, #40]	; (9ff0 <_usb_d_dev_enable+0x7c>)
    9fc8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9fca:	2053      	movs	r0, #83	; 0x53
    9fcc:	4b08      	ldr	r3, [pc, #32]	; (9ff0 <_usb_d_dev_enable+0x7c>)
    9fce:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9fd0:	f240 218d 	movw	r1, #653	; 0x28d
    9fd4:	6878      	ldr	r0, [r7, #4]
    9fd6:	4b07      	ldr	r3, [pc, #28]	; (9ff4 <_usb_d_dev_enable+0x80>)
    9fd8:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9fda:	2300      	movs	r3, #0
}
    9fdc:	4618      	mov	r0, r3
    9fde:	3708      	adds	r7, #8
    9fe0:	46bd      	mov	sp, r7
    9fe2:	bd80      	pop	{r7, pc}
    9fe4:	00008817 	.word	0x00008817
    9fe8:	000088c5 	.word	0x000088c5
    9fec:	0000889d 	.word	0x0000889d
    9ff0:	00008429 	.word	0x00008429
    9ff4:	000087c1 	.word	0x000087c1

00009ff8 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9ff8:	b580      	push	{r7, lr}
    9ffa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9ffc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a000:	4b01      	ldr	r3, [pc, #4]	; (a008 <_usb_d_dev_attach+0x10>)
    a002:	4798      	blx	r3
}
    a004:	bf00      	nop
    a006:	bd80      	pop	{r7, pc}
    a008:	000088e9 	.word	0x000088e9

0000a00c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a00c:	b580      	push	{r7, lr}
    a00e:	b082      	sub	sp, #8
    a010:	af00      	add	r7, sp, #0
    a012:	4603      	mov	r3, r0
    a014:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a016:	79fb      	ldrb	r3, [r7, #7]
    a018:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a01c:	b2db      	uxtb	r3, r3
    a01e:	4619      	mov	r1, r3
    a020:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a024:	4b02      	ldr	r3, [pc, #8]	; (a030 <_usb_d_dev_set_address+0x24>)
    a026:	4798      	blx	r3
}
    a028:	bf00      	nop
    a02a:	3708      	adds	r7, #8
    a02c:	46bd      	mov	sp, r7
    a02e:	bd80      	pop	{r7, pc}
    a030:	0000892b 	.word	0x0000892b

0000a034 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a034:	b590      	push	{r4, r7, lr}
    a036:	b085      	sub	sp, #20
    a038:	af00      	add	r7, sp, #0
    a03a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a03c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a040:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	7c9b      	ldrb	r3, [r3, #18]
    a046:	f003 030f 	and.w	r3, r3, #15
    a04a:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	68db      	ldr	r3, [r3, #12]
    a050:	461a      	mov	r2, r3
    a052:	7afb      	ldrb	r3, [r7, #11]
    a054:	2100      	movs	r1, #0
    a056:	4618      	mov	r0, r3
    a058:	4b0f      	ldr	r3, [pc, #60]	; (a098 <_usb_d_dev_trans_setup+0x64>)
    a05a:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	8a1b      	ldrh	r3, [r3, #16]
    a060:	461a      	mov	r2, r3
    a062:	7af8      	ldrb	r0, [r7, #11]
    a064:	2300      	movs	r3, #0
    a066:	2100      	movs	r1, #0
    a068:	4c0c      	ldr	r4, [pc, #48]	; (a09c <_usb_d_dev_trans_setup+0x68>)
    a06a:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a06c:	7afb      	ldrb	r3, [r7, #11]
    a06e:	22b0      	movs	r2, #176	; 0xb0
    a070:	4619      	mov	r1, r3
    a072:	68f8      	ldr	r0, [r7, #12]
    a074:	4b0a      	ldr	r3, [pc, #40]	; (a0a0 <_usb_d_dev_trans_setup+0x6c>)
    a076:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a078:	7afb      	ldrb	r3, [r7, #11]
    a07a:	2200      	movs	r2, #0
    a07c:	2100      	movs	r1, #0
    a07e:	4618      	mov	r0, r3
    a080:	4b08      	ldr	r3, [pc, #32]	; (a0a4 <_usb_d_dev_trans_setup+0x70>)
    a082:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a084:	7afb      	ldrb	r3, [r7, #11]
    a086:	2210      	movs	r2, #16
    a088:	4619      	mov	r1, r3
    a08a:	68f8      	ldr	r0, [r7, #12]
    a08c:	4b06      	ldr	r3, [pc, #24]	; (a0a8 <_usb_d_dev_trans_setup+0x74>)
    a08e:	4798      	blx	r3
}
    a090:	bf00      	nop
    a092:	3714      	adds	r7, #20
    a094:	46bd      	mov	sp, r7
    a096:	bd90      	pop	{r4, r7, pc}
    a098:	00008dc9 	.word	0x00008dc9
    a09c:	00008f51 	.word	0x00008f51
    a0a0:	00008629 	.word	0x00008629
    a0a4:	00009021 	.word	0x00009021
    a0a8:	0000867d 	.word	0x0000867d

0000a0ac <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a0ac:	b580      	push	{r7, lr}
    a0ae:	b088      	sub	sp, #32
    a0b0:	af00      	add	r7, sp, #0
    a0b2:	4603      	mov	r3, r0
    a0b4:	71fb      	strb	r3, [r7, #7]
    a0b6:	460b      	mov	r3, r1
    a0b8:	71bb      	strb	r3, [r7, #6]
    a0ba:	4613      	mov	r3, r2
    a0bc:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a0be:	79fb      	ldrb	r3, [r7, #7]
    a0c0:	f003 030f 	and.w	r3, r3, #15
    a0c4:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a0c6:	79fb      	ldrb	r3, [r7, #7]
    a0c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	bf14      	ite	ne
    a0d0:	2301      	movne	r3, #1
    a0d2:	2300      	moveq	r3, #0
    a0d4:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a0d6:	7fba      	ldrb	r2, [r7, #30]
    a0d8:	7ffb      	ldrb	r3, [r7, #31]
    a0da:	4611      	mov	r1, r2
    a0dc:	4618      	mov	r0, r3
    a0de:	4b3e      	ldr	r3, [pc, #248]	; (a1d8 <_usb_d_dev_ep_init+0x12c>)
    a0e0:	4798      	blx	r3
    a0e2:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a0e4:	79bb      	ldrb	r3, [r7, #6]
    a0e6:	f003 0303 	and.w	r3, r3, #3
    a0ea:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a0ec:	7ffa      	ldrb	r2, [r7, #31]
    a0ee:	4613      	mov	r3, r2
    a0f0:	005b      	lsls	r3, r3, #1
    a0f2:	4413      	add	r3, r2
    a0f4:	009b      	lsls	r3, r3, #2
    a0f6:	4a39      	ldr	r2, [pc, #228]	; (a1dc <_usb_d_dev_ep_init+0x130>)
    a0f8:	4413      	add	r3, r2
    a0fa:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a0fc:	7ffb      	ldrb	r3, [r7, #31]
    a0fe:	2b04      	cmp	r3, #4
    a100:	d902      	bls.n	a108 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a102:	f06f 0311 	mvn.w	r3, #17
    a106:	e063      	b.n	a1d0 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a108:	69bb      	ldr	r3, [r7, #24]
    a10a:	7c9b      	ldrb	r3, [r3, #18]
    a10c:	2bff      	cmp	r3, #255	; 0xff
    a10e:	d002      	beq.n	a116 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a110:	f06f 0313 	mvn.w	r3, #19
    a114:	e05c      	b.n	a1d0 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a116:	7dfb      	ldrb	r3, [r7, #23]
    a118:	2b00      	cmp	r3, #0
    a11a:	d11f      	bne.n	a15c <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a11c:	7fbb      	ldrb	r3, [r7, #30]
    a11e:	2b00      	cmp	r3, #0
    a120:	bf14      	ite	ne
    a122:	2301      	movne	r3, #1
    a124:	2300      	moveq	r3, #0
    a126:	b2db      	uxtb	r3, r3
    a128:	f083 0301 	eor.w	r3, r3, #1
    a12c:	b2db      	uxtb	r3, r3
    a12e:	f003 0301 	and.w	r3, r3, #1
    a132:	b2da      	uxtb	r2, r3
    a134:	7ffb      	ldrb	r3, [r7, #31]
    a136:	4611      	mov	r1, r2
    a138:	4618      	mov	r0, r3
    a13a:	4b27      	ldr	r3, [pc, #156]	; (a1d8 <_usb_d_dev_ep_init+0x12c>)
    a13c:	4798      	blx	r3
    a13e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a140:	68fb      	ldr	r3, [r7, #12]
    a142:	7c9b      	ldrb	r3, [r3, #18]
    a144:	2bff      	cmp	r3, #255	; 0xff
    a146:	d002      	beq.n	a14e <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a148:	f06f 0313 	mvn.w	r3, #19
    a14c:	e040      	b.n	a1d0 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a14e:	693b      	ldr	r3, [r7, #16]
    a150:	681b      	ldr	r3, [r3, #0]
    a152:	2b00      	cmp	r3, #0
    a154:	d102      	bne.n	a15c <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a156:	f06f 0312 	mvn.w	r3, #18
    a15a:	e039      	b.n	a1d0 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a15c:	7fbb      	ldrb	r3, [r7, #30]
    a15e:	2b00      	cmp	r3, #0
    a160:	d007      	beq.n	a172 <_usb_d_dev_ep_init+0xc6>
    a162:	693b      	ldr	r3, [r7, #16]
    a164:	685b      	ldr	r3, [r3, #4]
    a166:	2b00      	cmp	r3, #0
    a168:	bf14      	ite	ne
    a16a:	2301      	movne	r3, #1
    a16c:	2300      	moveq	r3, #0
    a16e:	b2db      	uxtb	r3, r3
    a170:	e006      	b.n	a180 <_usb_d_dev_ep_init+0xd4>
    a172:	693b      	ldr	r3, [r7, #16]
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	2b00      	cmp	r3, #0
    a178:	bf14      	ite	ne
    a17a:	2301      	movne	r3, #1
    a17c:	2300      	moveq	r3, #0
    a17e:	b2db      	uxtb	r3, r3
    a180:	2b00      	cmp	r3, #0
    a182:	d00f      	beq.n	a1a4 <_usb_d_dev_ep_init+0xf8>
    a184:	7fbb      	ldrb	r3, [r7, #30]
    a186:	2b00      	cmp	r3, #0
    a188:	d003      	beq.n	a192 <_usb_d_dev_ep_init+0xe6>
    a18a:	693b      	ldr	r3, [r7, #16]
    a18c:	895b      	ldrh	r3, [r3, #10]
    a18e:	461a      	mov	r2, r3
    a190:	e002      	b.n	a198 <_usb_d_dev_ep_init+0xec>
    a192:	693b      	ldr	r3, [r7, #16]
    a194:	891b      	ldrh	r3, [r3, #8]
    a196:	461a      	mov	r2, r3
    a198:	88bb      	ldrh	r3, [r7, #4]
    a19a:	429a      	cmp	r2, r3
    a19c:	da02      	bge.n	a1a4 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a19e:	f06f 0312 	mvn.w	r3, #18
    a1a2:	e015      	b.n	a1d0 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a1a4:	7fbb      	ldrb	r3, [r7, #30]
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	d002      	beq.n	a1b0 <_usb_d_dev_ep_init+0x104>
    a1aa:	693b      	ldr	r3, [r7, #16]
    a1ac:	685b      	ldr	r3, [r3, #4]
    a1ae:	e001      	b.n	a1b4 <_usb_d_dev_ep_init+0x108>
    a1b0:	693b      	ldr	r3, [r7, #16]
    a1b2:	681b      	ldr	r3, [r3, #0]
    a1b4:	69ba      	ldr	r2, [r7, #24]
    a1b6:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a1b8:	69bb      	ldr	r3, [r7, #24]
    a1ba:	88ba      	ldrh	r2, [r7, #4]
    a1bc:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a1be:	7dfb      	ldrb	r3, [r7, #23]
    a1c0:	3301      	adds	r3, #1
    a1c2:	b2da      	uxtb	r2, r3
    a1c4:	69bb      	ldr	r3, [r7, #24]
    a1c6:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a1c8:	69bb      	ldr	r3, [r7, #24]
    a1ca:	79fa      	ldrb	r2, [r7, #7]
    a1cc:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a1ce:	2300      	movs	r3, #0
}
    a1d0:	4618      	mov	r0, r3
    a1d2:	3720      	adds	r7, #32
    a1d4:	46bd      	mov	sp, r7
    a1d6:	bd80      	pop	{r7, pc}
    a1d8:	000090dd 	.word	0x000090dd
    a1dc:	00012394 	.word	0x00012394

0000a1e0 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	b086      	sub	sp, #24
    a1e4:	af00      	add	r7, sp, #0
    a1e6:	4603      	mov	r3, r0
    a1e8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a1ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a1ee:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a1f0:	79fb      	ldrb	r3, [r7, #7]
    a1f2:	f003 030f 	and.w	r3, r3, #15
    a1f6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a1f8:	79fb      	ldrb	r3, [r7, #7]
    a1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a1fe:	2b00      	cmp	r3, #0
    a200:	bf14      	ite	ne
    a202:	2301      	movne	r3, #1
    a204:	2300      	moveq	r3, #0
    a206:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a208:	7cba      	ldrb	r2, [r7, #18]
    a20a:	7cfb      	ldrb	r3, [r7, #19]
    a20c:	4611      	mov	r1, r2
    a20e:	4618      	mov	r0, r3
    a210:	4b2a      	ldr	r3, [pc, #168]	; (a2bc <_usb_d_dev_ep_deinit+0xdc>)
    a212:	4798      	blx	r3
    a214:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a216:	7cfb      	ldrb	r3, [r7, #19]
    a218:	2b04      	cmp	r3, #4
    a21a:	d84a      	bhi.n	a2b2 <_usb_d_dev_ep_deinit+0xd2>
    a21c:	68fb      	ldr	r3, [r7, #12]
    a21e:	7c9b      	ldrb	r3, [r3, #18]
    a220:	2bff      	cmp	r3, #255	; 0xff
    a222:	d046      	beq.n	a2b2 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a224:	7cbb      	ldrb	r3, [r7, #18]
    a226:	2203      	movs	r2, #3
    a228:	4619      	mov	r1, r3
    a22a:	68f8      	ldr	r0, [r7, #12]
    a22c:	4b24      	ldr	r3, [pc, #144]	; (a2c0 <_usb_d_dev_ep_deinit+0xe0>)
    a22e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a230:	68fb      	ldr	r3, [r7, #12]
    a232:	7cdb      	ldrb	r3, [r3, #19]
    a234:	f003 0307 	and.w	r3, r3, #7
    a238:	b2db      	uxtb	r3, r3
    a23a:	2b01      	cmp	r3, #1
    a23c:	d107      	bne.n	a24e <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a23e:	79fb      	ldrb	r3, [r7, #7]
    a240:	697a      	ldr	r2, [r7, #20]
    a242:	3308      	adds	r3, #8
    a244:	015b      	lsls	r3, r3, #5
    a246:	4413      	add	r3, r2
    a248:	2200      	movs	r2, #0
    a24a:	701a      	strb	r2, [r3, #0]
    a24c:	e02a      	b.n	a2a4 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a24e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a252:	2b00      	cmp	r3, #0
    a254:	da15      	bge.n	a282 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a256:	79fb      	ldrb	r3, [r7, #7]
    a258:	f003 030f 	and.w	r3, r3, #15
    a25c:	79fa      	ldrb	r2, [r7, #7]
    a25e:	f002 020f 	and.w	r2, r2, #15
    a262:	6979      	ldr	r1, [r7, #20]
    a264:	3208      	adds	r2, #8
    a266:	0152      	lsls	r2, r2, #5
    a268:	440a      	add	r2, r1
    a26a:	7812      	ldrb	r2, [r2, #0]
    a26c:	b2d2      	uxtb	r2, r2
    a26e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a272:	b2d1      	uxtb	r1, r2
    a274:	697a      	ldr	r2, [r7, #20]
    a276:	3308      	adds	r3, #8
    a278:	015b      	lsls	r3, r3, #5
    a27a:	4413      	add	r3, r2
    a27c:	460a      	mov	r2, r1
    a27e:	701a      	strb	r2, [r3, #0]
    a280:	e010      	b.n	a2a4 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a282:	79fb      	ldrb	r3, [r7, #7]
    a284:	79fa      	ldrb	r2, [r7, #7]
    a286:	6979      	ldr	r1, [r7, #20]
    a288:	3208      	adds	r2, #8
    a28a:	0152      	lsls	r2, r2, #5
    a28c:	440a      	add	r2, r1
    a28e:	7812      	ldrb	r2, [r2, #0]
    a290:	b2d2      	uxtb	r2, r2
    a292:	f022 0207 	bic.w	r2, r2, #7
    a296:	b2d1      	uxtb	r1, r2
    a298:	697a      	ldr	r2, [r7, #20]
    a29a:	3308      	adds	r3, #8
    a29c:	015b      	lsls	r3, r3, #5
    a29e:	4413      	add	r3, r2
    a2a0:	460a      	mov	r2, r1
    a2a2:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a2a4:	68fb      	ldr	r3, [r7, #12]
    a2a6:	2200      	movs	r2, #0
    a2a8:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a2aa:	68fb      	ldr	r3, [r7, #12]
    a2ac:	22ff      	movs	r2, #255	; 0xff
    a2ae:	749a      	strb	r2, [r3, #18]
    a2b0:	e000      	b.n	a2b4 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a2b2:	bf00      	nop
}
    a2b4:	3718      	adds	r7, #24
    a2b6:	46bd      	mov	sp, r7
    a2b8:	bd80      	pop	{r7, pc}
    a2ba:	bf00      	nop
    a2bc:	000090dd 	.word	0x000090dd
    a2c0:	0000a715 	.word	0x0000a715

0000a2c4 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a2c4:	b5b0      	push	{r4, r5, r7, lr}
    a2c6:	b088      	sub	sp, #32
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	4603      	mov	r3, r0
    a2cc:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a2ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2d2:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a2d4:	79fb      	ldrb	r3, [r7, #7]
    a2d6:	f003 030f 	and.w	r3, r3, #15
    a2da:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a2dc:	79fb      	ldrb	r3, [r7, #7]
    a2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a2e2:	2b00      	cmp	r3, #0
    a2e4:	bf14      	ite	ne
    a2e6:	2301      	movne	r3, #1
    a2e8:	2300      	moveq	r3, #0
    a2ea:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a2ec:	7eba      	ldrb	r2, [r7, #26]
    a2ee:	7efb      	ldrb	r3, [r7, #27]
    a2f0:	4611      	mov	r1, r2
    a2f2:	4618      	mov	r0, r3
    a2f4:	4b70      	ldr	r3, [pc, #448]	; (a4b8 <_usb_d_dev_ep_enable+0x1f4>)
    a2f6:	4798      	blx	r3
    a2f8:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a2fa:	7efb      	ldrb	r3, [r7, #27]
    a2fc:	4619      	mov	r1, r3
    a2fe:	69f8      	ldr	r0, [r7, #28]
    a300:	4b6e      	ldr	r3, [pc, #440]	; (a4bc <_usb_d_dev_ep_enable+0x1f8>)
    a302:	4798      	blx	r3
    a304:	4603      	mov	r3, r0
    a306:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a308:	7efb      	ldrb	r3, [r7, #27]
    a30a:	2b04      	cmp	r3, #4
    a30c:	d803      	bhi.n	a316 <_usb_d_dev_ep_enable+0x52>
    a30e:	697b      	ldr	r3, [r7, #20]
    a310:	7c9b      	ldrb	r3, [r3, #18]
    a312:	2bff      	cmp	r3, #255	; 0xff
    a314:	d102      	bne.n	a31c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a316:	f06f 0311 	mvn.w	r3, #17
    a31a:	e0c8      	b.n	a4ae <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a31c:	7efb      	ldrb	r3, [r7, #27]
    a31e:	015b      	lsls	r3, r3, #5
    a320:	4a67      	ldr	r2, [pc, #412]	; (a4c0 <_usb_d_dev_ep_enable+0x1fc>)
    a322:	4413      	add	r3, r2
    a324:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a326:	697b      	ldr	r3, [r7, #20]
    a328:	7cdb      	ldrb	r3, [r3, #19]
    a32a:	f003 0307 	and.w	r3, r3, #7
    a32e:	b2db      	uxtb	r3, r3
    a330:	2b01      	cmp	r3, #1
    a332:	d14b      	bne.n	a3cc <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a334:	7cfb      	ldrb	r3, [r7, #19]
    a336:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a33a:	2b00      	cmp	r3, #0
    a33c:	d002      	beq.n	a344 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a33e:	f06f 0313 	mvn.w	r3, #19
    a342:	e0b4      	b.n	a4ae <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a344:	7efb      	ldrb	r3, [r7, #27]
    a346:	2211      	movs	r2, #17
    a348:	4619      	mov	r1, r3
    a34a:	69f8      	ldr	r0, [r7, #28]
    a34c:	4b5d      	ldr	r3, [pc, #372]	; (a4c4 <_usb_d_dev_ep_enable+0x200>)
    a34e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a350:	697b      	ldr	r3, [r7, #20]
    a352:	8a1b      	ldrh	r3, [r3, #16]
    a354:	039b      	lsls	r3, r3, #14
    a356:	4c5c      	ldr	r4, [pc, #368]	; (a4c8 <_usb_d_dev_ep_enable+0x204>)
    a358:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a35a:	697b      	ldr	r3, [r7, #20]
    a35c:	8a1b      	ldrh	r3, [r3, #16]
    a35e:	4618      	mov	r0, r3
    a360:	4b5a      	ldr	r3, [pc, #360]	; (a4cc <_usb_d_dev_ep_enable+0x208>)
    a362:	4798      	blx	r3
    a364:	4603      	mov	r3, r0
    a366:	071b      	lsls	r3, r3, #28
    a368:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a36c:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a370:	68fb      	ldr	r3, [r7, #12]
    a372:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a37a:	697b      	ldr	r3, [r7, #20]
    a37c:	8a1b      	ldrh	r3, [r3, #16]
    a37e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a382:	697b      	ldr	r3, [r7, #20]
    a384:	8a1b      	ldrh	r3, [r3, #16]
    a386:	4618      	mov	r0, r3
    a388:	4b50      	ldr	r3, [pc, #320]	; (a4cc <_usb_d_dev_ep_enable+0x208>)
    a38a:	4798      	blx	r3
    a38c:	4603      	mov	r3, r0
    a38e:	071b      	lsls	r3, r3, #28
    a390:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a394:	432b      	orrs	r3, r5
    a396:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a398:	7efb      	ldrb	r3, [r7, #27]
    a39a:	2200      	movs	r2, #0
    a39c:	2100      	movs	r1, #0
    a39e:	4618      	mov	r0, r3
    a3a0:	4b4b      	ldr	r3, [pc, #300]	; (a4d0 <_usb_d_dev_ep_enable+0x20c>)
    a3a2:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a3a4:	7efb      	ldrb	r3, [r7, #27]
    a3a6:	2200      	movs	r2, #0
    a3a8:	2101      	movs	r1, #1
    a3aa:	4618      	mov	r0, r3
    a3ac:	4b49      	ldr	r3, [pc, #292]	; (a4d4 <_usb_d_dev_ep_enable+0x210>)
    a3ae:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a3b0:	7efb      	ldrb	r3, [r7, #27]
    a3b2:	2100      	movs	r1, #0
    a3b4:	4618      	mov	r0, r3
    a3b6:	4b48      	ldr	r3, [pc, #288]	; (a4d8 <_usb_d_dev_ep_enable+0x214>)
    a3b8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a3ba:	7efb      	ldrb	r3, [r7, #27]
    a3bc:	2101      	movs	r1, #1
    a3be:	4618      	mov	r0, r3
    a3c0:	4b45      	ldr	r3, [pc, #276]	; (a4d8 <_usb_d_dev_ep_enable+0x214>)
    a3c2:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a3c4:	6978      	ldr	r0, [r7, #20]
    a3c6:	4b45      	ldr	r3, [pc, #276]	; (a4dc <_usb_d_dev_ep_enable+0x218>)
    a3c8:	4798      	blx	r3
    a3ca:	e06f      	b.n	a4ac <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a3cc:	7ebb      	ldrb	r3, [r7, #26]
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d038      	beq.n	a444 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a3d2:	7cfb      	ldrb	r3, [r7, #19]
    a3d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d002      	beq.n	a3e2 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a3dc:	f06f 0313 	mvn.w	r3, #19
    a3e0:	e065      	b.n	a4ae <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a3e2:	697b      	ldr	r3, [r7, #20]
    a3e4:	7cdb      	ldrb	r3, [r3, #19]
    a3e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a3ea:	b2db      	uxtb	r3, r3
    a3ec:	011b      	lsls	r3, r3, #4
    a3ee:	b2db      	uxtb	r3, r3
    a3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a3f4:	b2da      	uxtb	r2, r3
    a3f6:	7cfb      	ldrb	r3, [r7, #19]
    a3f8:	4313      	orrs	r3, r2
    a3fa:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a3fc:	7cfa      	ldrb	r2, [r7, #19]
    a3fe:	7efb      	ldrb	r3, [r7, #27]
    a400:	4619      	mov	r1, r3
    a402:	69f8      	ldr	r0, [r7, #28]
    a404:	4b2f      	ldr	r3, [pc, #188]	; (a4c4 <_usb_d_dev_ep_enable+0x200>)
    a406:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a408:	68fb      	ldr	r3, [r7, #12]
    a40a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a40e:	697b      	ldr	r3, [r7, #20]
    a410:	8a1b      	ldrh	r3, [r3, #16]
    a412:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a416:	697b      	ldr	r3, [r7, #20]
    a418:	8a1b      	ldrh	r3, [r3, #16]
    a41a:	4618      	mov	r0, r3
    a41c:	4b2b      	ldr	r3, [pc, #172]	; (a4cc <_usb_d_dev_ep_enable+0x208>)
    a41e:	4798      	blx	r3
    a420:	4603      	mov	r3, r0
    a422:	071b      	lsls	r3, r3, #28
    a424:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a428:	432b      	orrs	r3, r5
    a42a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a42c:	7efb      	ldrb	r3, [r7, #27]
    a42e:	2200      	movs	r2, #0
    a430:	2101      	movs	r1, #1
    a432:	4618      	mov	r0, r3
    a434:	4b27      	ldr	r3, [pc, #156]	; (a4d4 <_usb_d_dev_ep_enable+0x210>)
    a436:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a438:	7efb      	ldrb	r3, [r7, #27]
    a43a:	2101      	movs	r1, #1
    a43c:	4618      	mov	r0, r3
    a43e:	4b26      	ldr	r3, [pc, #152]	; (a4d8 <_usb_d_dev_ep_enable+0x214>)
    a440:	4798      	blx	r3
    a442:	e033      	b.n	a4ac <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a444:	7cfb      	ldrb	r3, [r7, #19]
    a446:	f003 0307 	and.w	r3, r3, #7
    a44a:	2b00      	cmp	r3, #0
    a44c:	d002      	beq.n	a454 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a44e:	f06f 0313 	mvn.w	r3, #19
    a452:	e02c      	b.n	a4ae <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a454:	697b      	ldr	r3, [r7, #20]
    a456:	7cdb      	ldrb	r3, [r3, #19]
    a458:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a45c:	b2db      	uxtb	r3, r3
    a45e:	461a      	mov	r2, r3
    a460:	7cfb      	ldrb	r3, [r7, #19]
    a462:	4313      	orrs	r3, r2
    a464:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a466:	7cfa      	ldrb	r2, [r7, #19]
    a468:	7efb      	ldrb	r3, [r7, #27]
    a46a:	4619      	mov	r1, r3
    a46c:	69f8      	ldr	r0, [r7, #28]
    a46e:	4b15      	ldr	r3, [pc, #84]	; (a4c4 <_usb_d_dev_ep_enable+0x200>)
    a470:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a472:	697b      	ldr	r3, [r7, #20]
    a474:	8a1b      	ldrh	r3, [r3, #16]
    a476:	039b      	lsls	r3, r3, #14
    a478:	4c13      	ldr	r4, [pc, #76]	; (a4c8 <_usb_d_dev_ep_enable+0x204>)
    a47a:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a47c:	697b      	ldr	r3, [r7, #20]
    a47e:	8a1b      	ldrh	r3, [r3, #16]
    a480:	4618      	mov	r0, r3
    a482:	4b12      	ldr	r3, [pc, #72]	; (a4cc <_usb_d_dev_ep_enable+0x208>)
    a484:	4798      	blx	r3
    a486:	4603      	mov	r3, r0
    a488:	071b      	lsls	r3, r3, #28
    a48a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a48e:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a492:	68fb      	ldr	r3, [r7, #12]
    a494:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a496:	7efb      	ldrb	r3, [r7, #27]
    a498:	2200      	movs	r2, #0
    a49a:	2100      	movs	r1, #0
    a49c:	4618      	mov	r0, r3
    a49e:	4b0c      	ldr	r3, [pc, #48]	; (a4d0 <_usb_d_dev_ep_enable+0x20c>)
    a4a0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a4a2:	7efb      	ldrb	r3, [r7, #27]
    a4a4:	2100      	movs	r1, #0
    a4a6:	4618      	mov	r0, r3
    a4a8:	4b0b      	ldr	r3, [pc, #44]	; (a4d8 <_usb_d_dev_ep_enable+0x214>)
    a4aa:	4798      	blx	r3
	}

	return USB_OK;
    a4ac:	2300      	movs	r3, #0
}
    a4ae:	4618      	mov	r0, r3
    a4b0:	3720      	adds	r7, #32
    a4b2:	46bd      	mov	sp, r7
    a4b4:	bdb0      	pop	{r4, r5, r7, pc}
    a4b6:	bf00      	nop
    a4b8:	000090dd 	.word	0x000090dd
    a4bc:	00008763 	.word	0x00008763
    a4c0:	20000ee8 	.word	0x20000ee8
    a4c4:	00008739 	.word	0x00008739
    a4c8:	0fffc000 	.word	0x0fffc000
    a4cc:	00009079 	.word	0x00009079
    a4d0:	00009021 	.word	0x00009021
    a4d4:	00008fc9 	.word	0x00008fc9
    a4d8:	00008f91 	.word	0x00008f91
    a4dc:	0000a035 	.word	0x0000a035

0000a4e0 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a4e0:	b580      	push	{r7, lr}
    a4e2:	b084      	sub	sp, #16
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	6078      	str	r0, [r7, #4]
    a4e8:	460b      	mov	r3, r1
    a4ea:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a4ec:	687b      	ldr	r3, [r7, #4]
    a4ee:	7c9b      	ldrb	r3, [r3, #18]
    a4f0:	f003 030f 	and.w	r3, r3, #15
    a4f4:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a4f6:	78fa      	ldrb	r2, [r7, #3]
    a4f8:	7bfb      	ldrb	r3, [r7, #15]
    a4fa:	4611      	mov	r1, r2
    a4fc:	4618      	mov	r0, r3
    a4fe:	4b03      	ldr	r3, [pc, #12]	; (a50c <_usb_d_dev_ep_stall_get+0x2c>)
    a500:	4798      	blx	r3
    a502:	4603      	mov	r3, r0
}
    a504:	4618      	mov	r0, r3
    a506:	3710      	adds	r7, #16
    a508:	46bd      	mov	sp, r7
    a50a:	bd80      	pop	{r7, pc}
    a50c:	00008bd1 	.word	0x00008bd1

0000a510 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a510:	b580      	push	{r7, lr}
    a512:	b084      	sub	sp, #16
    a514:	af00      	add	r7, sp, #0
    a516:	6078      	str	r0, [r7, #4]
    a518:	460b      	mov	r3, r1
    a51a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a51c:	687b      	ldr	r3, [r7, #4]
    a51e:	7c9b      	ldrb	r3, [r3, #18]
    a520:	f003 030f 	and.w	r3, r3, #15
    a524:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a526:	78f9      	ldrb	r1, [r7, #3]
    a528:	7bfb      	ldrb	r3, [r7, #15]
    a52a:	2201      	movs	r2, #1
    a52c:	4618      	mov	r0, r3
    a52e:	4b0a      	ldr	r3, [pc, #40]	; (a558 <_usb_d_dev_ep_stall_set+0x48>)
    a530:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a532:	78fb      	ldrb	r3, [r7, #3]
    a534:	2220      	movs	r2, #32
    a536:	409a      	lsls	r2, r3
    a538:	7bfb      	ldrb	r3, [r7, #15]
    a53a:	4611      	mov	r1, r2
    a53c:	4618      	mov	r0, r3
    a53e:	4b07      	ldr	r3, [pc, #28]	; (a55c <_usb_d_dev_ep_stall_set+0x4c>)
    a540:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a542:	687a      	ldr	r2, [r7, #4]
    a544:	7cd3      	ldrb	r3, [r2, #19]
    a546:	f043 0308 	orr.w	r3, r3, #8
    a54a:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a54c:	2300      	movs	r3, #0
}
    a54e:	4618      	mov	r0, r3
    a550:	3710      	adds	r7, #16
    a552:	46bd      	mov	sp, r7
    a554:	bd80      	pop	{r7, pc}
    a556:	bf00      	nop
    a558:	00008b79 	.word	0x00008b79
    a55c:	00008af9 	.word	0x00008af9

0000a560 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a560:	b580      	push	{r7, lr}
    a562:	b084      	sub	sp, #16
    a564:	af00      	add	r7, sp, #0
    a566:	6078      	str	r0, [r7, #4]
    a568:	460b      	mov	r3, r1
    a56a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a56c:	687b      	ldr	r3, [r7, #4]
    a56e:	7c9b      	ldrb	r3, [r3, #18]
    a570:	f003 030f 	and.w	r3, r3, #15
    a574:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a576:	78fa      	ldrb	r2, [r7, #3]
    a578:	7bfb      	ldrb	r3, [r7, #15]
    a57a:	4611      	mov	r1, r2
    a57c:	4618      	mov	r0, r3
    a57e:	4b28      	ldr	r3, [pc, #160]	; (a620 <_usb_d_dev_ep_stall_clr+0xc0>)
    a580:	4798      	blx	r3
    a582:	4603      	mov	r3, r0
    a584:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a586:	7bbb      	ldrb	r3, [r7, #14]
    a588:	f083 0301 	eor.w	r3, r3, #1
    a58c:	b2db      	uxtb	r3, r3
    a58e:	2b00      	cmp	r3, #0
    a590:	d001      	beq.n	a596 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a592:	2300      	movs	r3, #0
    a594:	e040      	b.n	a618 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a596:	78f9      	ldrb	r1, [r7, #3]
    a598:	7bfb      	ldrb	r3, [r7, #15]
    a59a:	2200      	movs	r2, #0
    a59c:	4618      	mov	r0, r3
    a59e:	4b21      	ldr	r3, [pc, #132]	; (a624 <_usb_d_dev_ep_stall_clr+0xc4>)
    a5a0:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a5a2:	78fb      	ldrb	r3, [r7, #3]
    a5a4:	2220      	movs	r2, #32
    a5a6:	409a      	lsls	r2, r3
    a5a8:	7bfb      	ldrb	r3, [r7, #15]
    a5aa:	4611      	mov	r1, r2
    a5ac:	4618      	mov	r0, r3
    a5ae:	4b1e      	ldr	r3, [pc, #120]	; (a628 <_usb_d_dev_ep_stall_clr+0xc8>)
    a5b0:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a5b2:	78fa      	ldrb	r2, [r7, #3]
    a5b4:	7bfb      	ldrb	r3, [r7, #15]
    a5b6:	4611      	mov	r1, r2
    a5b8:	4618      	mov	r0, r3
    a5ba:	4b1c      	ldr	r3, [pc, #112]	; (a62c <_usb_d_dev_ep_stall_clr+0xcc>)
    a5bc:	4798      	blx	r3
    a5be:	4603      	mov	r3, r0
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d00b      	beq.n	a5dc <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a5c4:	78fa      	ldrb	r2, [r7, #3]
    a5c6:	7bfb      	ldrb	r3, [r7, #15]
    a5c8:	4611      	mov	r1, r2
    a5ca:	4618      	mov	r0, r3
    a5cc:	4b18      	ldr	r3, [pc, #96]	; (a630 <_usb_d_dev_ep_stall_clr+0xd0>)
    a5ce:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a5d0:	78f9      	ldrb	r1, [r7, #3]
    a5d2:	7bfb      	ldrb	r3, [r7, #15]
    a5d4:	2200      	movs	r2, #0
    a5d6:	4618      	mov	r0, r3
    a5d8:	4b16      	ldr	r3, [pc, #88]	; (a634 <_usb_d_dev_ep_stall_clr+0xd4>)
    a5da:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a5dc:	687b      	ldr	r3, [r7, #4]
    a5de:	7cdb      	ldrb	r3, [r3, #19]
    a5e0:	f003 0307 	and.w	r3, r3, #7
    a5e4:	b2db      	uxtb	r3, r3
    a5e6:	2b01      	cmp	r3, #1
    a5e8:	d110      	bne.n	a60c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a5ea:	7bfb      	ldrb	r3, [r7, #15]
    a5ec:	4619      	mov	r1, r3
    a5ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5f2:	4b11      	ldr	r3, [pc, #68]	; (a638 <_usb_d_dev_ep_stall_clr+0xd8>)
    a5f4:	4798      	blx	r3
    a5f6:	4603      	mov	r3, r0
    a5f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d10a      	bne.n	a616 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a600:	687a      	ldr	r2, [r7, #4]
    a602:	7cd3      	ldrb	r3, [r2, #19]
    a604:	f36f 03c3 	bfc	r3, #3, #1
    a608:	74d3      	strb	r3, [r2, #19]
    a60a:	e004      	b.n	a616 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a60c:	687a      	ldr	r2, [r7, #4]
    a60e:	7cd3      	ldrb	r3, [r2, #19]
    a610:	f36f 03c3 	bfc	r3, #3, #1
    a614:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a616:	2300      	movs	r3, #0
}
    a618:	4618      	mov	r0, r3
    a61a:	3710      	adds	r7, #16
    a61c:	46bd      	mov	sp, r7
    a61e:	bd80      	pop	{r7, pc}
    a620:	00008bd1 	.word	0x00008bd1
    a624:	00008b79 	.word	0x00008b79
    a628:	00008b21 	.word	0x00008b21
    a62c:	00008c15 	.word	0x00008c15
    a630:	00008c59 	.word	0x00008c59
    a634:	00008d45 	.word	0x00008d45
    a638:	00008601 	.word	0x00008601

0000a63c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a63c:	b580      	push	{r7, lr}
    a63e:	b086      	sub	sp, #24
    a640:	af00      	add	r7, sp, #0
    a642:	4603      	mov	r3, r0
    a644:	460a      	mov	r2, r1
    a646:	71fb      	strb	r3, [r7, #7]
    a648:	4613      	mov	r3, r2
    a64a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a64c:	79fb      	ldrb	r3, [r7, #7]
    a64e:	f003 030f 	and.w	r3, r3, #15
    a652:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a654:	79fb      	ldrb	r3, [r7, #7]
    a656:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a65a:	2b00      	cmp	r3, #0
    a65c:	bf14      	ite	ne
    a65e:	2301      	movne	r3, #1
    a660:	2300      	moveq	r3, #0
    a662:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a664:	7cba      	ldrb	r2, [r7, #18]
    a666:	7cfb      	ldrb	r3, [r7, #19]
    a668:	4611      	mov	r1, r2
    a66a:	4618      	mov	r0, r3
    a66c:	4b13      	ldr	r3, [pc, #76]	; (a6bc <_usb_d_dev_ep_stall+0x80>)
    a66e:	4798      	blx	r3
    a670:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a672:	7cfb      	ldrb	r3, [r7, #19]
    a674:	2b04      	cmp	r3, #4
    a676:	d902      	bls.n	a67e <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a678:	f06f 0311 	mvn.w	r3, #17
    a67c:	e01a      	b.n	a6b4 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a67e:	79bb      	ldrb	r3, [r7, #6]
    a680:	2b01      	cmp	r3, #1
    a682:	d106      	bne.n	a692 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a684:	7cbb      	ldrb	r3, [r7, #18]
    a686:	4619      	mov	r1, r3
    a688:	68f8      	ldr	r0, [r7, #12]
    a68a:	4b0d      	ldr	r3, [pc, #52]	; (a6c0 <_usb_d_dev_ep_stall+0x84>)
    a68c:	4798      	blx	r3
    a68e:	6178      	str	r0, [r7, #20]
    a690:	e00f      	b.n	a6b2 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a692:	79bb      	ldrb	r3, [r7, #6]
    a694:	2b00      	cmp	r3, #0
    a696:	d106      	bne.n	a6a6 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a698:	7cbb      	ldrb	r3, [r7, #18]
    a69a:	4619      	mov	r1, r3
    a69c:	68f8      	ldr	r0, [r7, #12]
    a69e:	4b09      	ldr	r3, [pc, #36]	; (a6c4 <_usb_d_dev_ep_stall+0x88>)
    a6a0:	4798      	blx	r3
    a6a2:	6178      	str	r0, [r7, #20]
    a6a4:	e005      	b.n	a6b2 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a6a6:	7cbb      	ldrb	r3, [r7, #18]
    a6a8:	4619      	mov	r1, r3
    a6aa:	68f8      	ldr	r0, [r7, #12]
    a6ac:	4b06      	ldr	r3, [pc, #24]	; (a6c8 <_usb_d_dev_ep_stall+0x8c>)
    a6ae:	4798      	blx	r3
    a6b0:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a6b2:	697b      	ldr	r3, [r7, #20]
}
    a6b4:	4618      	mov	r0, r3
    a6b6:	3718      	adds	r7, #24
    a6b8:	46bd      	mov	sp, r7
    a6ba:	bd80      	pop	{r7, pc}
    a6bc:	000090dd 	.word	0x000090dd
    a6c0:	0000a511 	.word	0x0000a511
    a6c4:	0000a561 	.word	0x0000a561
    a6c8:	0000a4e1 	.word	0x0000a4e1

0000a6cc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b082      	sub	sp, #8
    a6d0:	af00      	add	r7, sp, #0
    a6d2:	6078      	str	r0, [r7, #4]
    a6d4:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	7c9b      	ldrb	r3, [r3, #18]
    a6da:	2bff      	cmp	r3, #255	; 0xff
    a6dc:	d014      	beq.n	a708 <_usb_d_dev_trans_done+0x3c>
    a6de:	687b      	ldr	r3, [r7, #4]
    a6e0:	7cdb      	ldrb	r3, [r3, #19]
    a6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6e6:	b2db      	uxtb	r3, r3
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d00d      	beq.n	a708 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a6ec:	687a      	ldr	r2, [r7, #4]
    a6ee:	7cd3      	ldrb	r3, [r2, #19]
    a6f0:	f36f 1386 	bfc	r3, #6, #1
    a6f4:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a6f6:	4b06      	ldr	r3, [pc, #24]	; (a710 <_usb_d_dev_trans_done+0x44>)
    a6f8:	691b      	ldr	r3, [r3, #16]
    a6fa:	687a      	ldr	r2, [r7, #4]
    a6fc:	7c90      	ldrb	r0, [r2, #18]
    a6fe:	687a      	ldr	r2, [r7, #4]
    a700:	6892      	ldr	r2, [r2, #8]
    a702:	6839      	ldr	r1, [r7, #0]
    a704:	4798      	blx	r3
    a706:	e000      	b.n	a70a <_usb_d_dev_trans_done+0x3e>
		return;
    a708:	bf00      	nop
}
    a70a:	3708      	adds	r7, #8
    a70c:	46bd      	mov	sp, r7
    a70e:	bd80      	pop	{r7, pc}
    a710:	20000e20 	.word	0x20000e20

0000a714 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a714:	b580      	push	{r7, lr}
    a716:	b086      	sub	sp, #24
    a718:	af00      	add	r7, sp, #0
    a71a:	60f8      	str	r0, [r7, #12]
    a71c:	460b      	mov	r3, r1
    a71e:	607a      	str	r2, [r7, #4]
    a720:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a722:	68fb      	ldr	r3, [r7, #12]
    a724:	7c9b      	ldrb	r3, [r3, #18]
    a726:	f003 030f 	and.w	r3, r3, #15
    a72a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a72c:	4b1f      	ldr	r3, [pc, #124]	; (a7ac <_usb_d_dev_trans_stop+0x98>)
    a72e:	881b      	ldrh	r3, [r3, #0]
    a730:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a732:	68fb      	ldr	r3, [r7, #12]
    a734:	7c9b      	ldrb	r3, [r3, #18]
    a736:	2bff      	cmp	r3, #255	; 0xff
    a738:	d033      	beq.n	a7a2 <_usb_d_dev_trans_stop+0x8e>
    a73a:	68fb      	ldr	r3, [r7, #12]
    a73c:	7cdb      	ldrb	r3, [r3, #19]
    a73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a742:	b2db      	uxtb	r3, r3
    a744:	2b00      	cmp	r3, #0
    a746:	d02c      	beq.n	a7a2 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a748:	7afb      	ldrb	r3, [r7, #11]
    a74a:	2b00      	cmp	r3, #0
    a74c:	d006      	beq.n	a75c <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a74e:	7dfb      	ldrb	r3, [r7, #23]
    a750:	2200      	movs	r2, #0
    a752:	2101      	movs	r1, #1
    a754:	4618      	mov	r0, r3
    a756:	4b16      	ldr	r3, [pc, #88]	; (a7b0 <_usb_d_dev_trans_stop+0x9c>)
    a758:	4798      	blx	r3
    a75a:	e005      	b.n	a768 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a75c:	7dfb      	ldrb	r3, [r7, #23]
    a75e:	2200      	movs	r2, #0
    a760:	2100      	movs	r1, #0
    a762:	4618      	mov	r0, r3
    a764:	4b13      	ldr	r3, [pc, #76]	; (a7b4 <_usb_d_dev_trans_stop+0xa0>)
    a766:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a768:	7afb      	ldrb	r3, [r7, #11]
    a76a:	f107 0218 	add.w	r2, r7, #24
    a76e:	4413      	add	r3, r2
    a770:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a774:	461a      	mov	r2, r3
    a776:	7dfb      	ldrb	r3, [r7, #23]
    a778:	4611      	mov	r1, r2
    a77a:	4618      	mov	r0, r3
    a77c:	4b0e      	ldr	r3, [pc, #56]	; (a7b8 <_usb_d_dev_trans_stop+0xa4>)
    a77e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a780:	7afb      	ldrb	r3, [r7, #11]
    a782:	f107 0218 	add.w	r2, r7, #24
    a786:	4413      	add	r3, r2
    a788:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a78c:	461a      	mov	r2, r3
    a78e:	7dfb      	ldrb	r3, [r7, #23]
    a790:	4611      	mov	r1, r2
    a792:	4618      	mov	r0, r3
    a794:	4b09      	ldr	r3, [pc, #36]	; (a7bc <_usb_d_dev_trans_stop+0xa8>)
    a796:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a798:	6879      	ldr	r1, [r7, #4]
    a79a:	68f8      	ldr	r0, [r7, #12]
    a79c:	4b08      	ldr	r3, [pc, #32]	; (a7c0 <_usb_d_dev_trans_stop+0xac>)
    a79e:	4798      	blx	r3
    a7a0:	e000      	b.n	a7a4 <_usb_d_dev_trans_stop+0x90>
		return;
    a7a2:	bf00      	nop
}
    a7a4:	3718      	adds	r7, #24
    a7a6:	46bd      	mov	sp, r7
    a7a8:	bd80      	pop	{r7, pc}
    a7aa:	bf00      	nop
    a7ac:	000123d4 	.word	0x000123d4
    a7b0:	00008fc9 	.word	0x00008fc9
    a7b4:	00009021 	.word	0x00009021
    a7b8:	00008ad1 	.word	0x00008ad1
    a7bc:	00008b21 	.word	0x00008b21
    a7c0:	0000a6cd 	.word	0x0000a6cd

0000a7c4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a7c4:	b580      	push	{r7, lr}
    a7c6:	b086      	sub	sp, #24
    a7c8:	af00      	add	r7, sp, #0
    a7ca:	4603      	mov	r3, r0
    a7cc:	6039      	str	r1, [r7, #0]
    a7ce:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a7d0:	79fb      	ldrb	r3, [r7, #7]
    a7d2:	f003 030f 	and.w	r3, r3, #15
    a7d6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a7d8:	7dfb      	ldrb	r3, [r7, #23]
    a7da:	015b      	lsls	r3, r3, #5
    a7dc:	4a1e      	ldr	r2, [pc, #120]	; (a858 <_usb_d_dev_ep_read_req+0x94>)
    a7de:	4413      	add	r3, r2
    a7e0:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a7e2:	693b      	ldr	r3, [r7, #16]
    a7e4:	681b      	ldr	r3, [r3, #0]
    a7e6:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a7e8:	693b      	ldr	r3, [r7, #16]
    a7ea:	685b      	ldr	r3, [r3, #4]
    a7ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a7f0:	b29b      	uxth	r3, r3
    a7f2:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a7f4:	7dfb      	ldrb	r3, [r7, #23]
    a7f6:	2b04      	cmp	r3, #4
    a7f8:	d802      	bhi.n	a800 <_usb_d_dev_ep_read_req+0x3c>
    a7fa:	683b      	ldr	r3, [r7, #0]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d102      	bne.n	a806 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a800:	f06f 0311 	mvn.w	r3, #17
    a804:	e023      	b.n	a84e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a806:	7dfb      	ldrb	r3, [r7, #23]
    a808:	4618      	mov	r0, r3
    a80a:	4b14      	ldr	r3, [pc, #80]	; (a85c <_usb_d_dev_ep_read_req+0x98>)
    a80c:	4798      	blx	r3
    a80e:	4603      	mov	r3, r0
    a810:	f083 0301 	eor.w	r3, r3, #1
    a814:	b2db      	uxtb	r3, r3
    a816:	2b00      	cmp	r3, #0
    a818:	d002      	beq.n	a820 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a81a:	f06f 0312 	mvn.w	r3, #18
    a81e:	e016      	b.n	a84e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a820:	7dfb      	ldrb	r3, [r7, #23]
    a822:	4618      	mov	r0, r3
    a824:	4b0e      	ldr	r3, [pc, #56]	; (a860 <_usb_d_dev_ep_read_req+0x9c>)
    a826:	4798      	blx	r3
    a828:	4603      	mov	r3, r0
    a82a:	f083 0301 	eor.w	r3, r3, #1
    a82e:	b2db      	uxtb	r3, r3
    a830:	2b00      	cmp	r3, #0
    a832:	d001      	beq.n	a838 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a834:	2300      	movs	r3, #0
    a836:	e00a      	b.n	a84e <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a838:	68fb      	ldr	r3, [r7, #12]
    a83a:	2208      	movs	r2, #8
    a83c:	4619      	mov	r1, r3
    a83e:	6838      	ldr	r0, [r7, #0]
    a840:	4b08      	ldr	r3, [pc, #32]	; (a864 <_usb_d_dev_ep_read_req+0xa0>)
    a842:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a844:	7dfb      	ldrb	r3, [r7, #23]
    a846:	4618      	mov	r0, r3
    a848:	4b07      	ldr	r3, [pc, #28]	; (a868 <_usb_d_dev_ep_read_req+0xa4>)
    a84a:	4798      	blx	r3

	return bytes;
    a84c:	897b      	ldrh	r3, [r7, #10]
}
    a84e:	4618      	mov	r0, r3
    a850:	3718      	adds	r7, #24
    a852:	46bd      	mov	sp, r7
    a854:	bd80      	pop	{r7, pc}
    a856:	bf00      	nop
    a858:	20000ee8 	.word	0x20000ee8
    a85c:	00008b49 	.word	0x00008b49
    a860:	00008cf5 	.word	0x00008cf5
    a864:	00011c1d 	.word	0x00011c1d
    a868:	00008d25 	.word	0x00008d25

0000a86c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a86c:	b580      	push	{r7, lr}
    a86e:	b086      	sub	sp, #24
    a870:	af00      	add	r7, sp, #0
    a872:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	7a1b      	ldrb	r3, [r3, #8]
    a878:	f003 030f 	and.w	r3, r3, #15
    a87c:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	7a1b      	ldrb	r3, [r3, #8]
    a882:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a886:	2b00      	cmp	r3, #0
    a888:	bf14      	ite	ne
    a88a:	2301      	movne	r3, #1
    a88c:	2300      	moveq	r3, #0
    a88e:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a890:	7d7a      	ldrb	r2, [r7, #21]
    a892:	7dbb      	ldrb	r3, [r7, #22]
    a894:	4611      	mov	r1, r2
    a896:	4618      	mov	r0, r3
    a898:	4b5f      	ldr	r3, [pc, #380]	; (aa18 <_usb_d_dev_ep_trans+0x1ac>)
    a89a:	4798      	blx	r3
    a89c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a89e:	693b      	ldr	r3, [r7, #16]
    a8a0:	8a1b      	ldrh	r3, [r3, #16]
    a8a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a8a6:	4293      	cmp	r3, r2
    a8a8:	d004      	beq.n	a8b4 <_usb_d_dev_ep_trans+0x48>
    a8aa:	693b      	ldr	r3, [r7, #16]
    a8ac:	8a1b      	ldrh	r3, [r3, #16]
    a8ae:	3b01      	subs	r3, #1
    a8b0:	b29b      	uxth	r3, r3
    a8b2:	e001      	b.n	a8b8 <_usb_d_dev_ep_trans+0x4c>
    a8b4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a8b8:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a8ba:	687b      	ldr	r3, [r7, #4]
    a8bc:	685a      	ldr	r2, [r3, #4]
    a8be:	89fb      	ldrh	r3, [r7, #14]
    a8c0:	4013      	ands	r3, r2
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	bf14      	ite	ne
    a8c6:	2301      	movne	r3, #1
    a8c8:	2300      	moveq	r3, #0
    a8ca:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a8cc:	2300      	movs	r3, #0
    a8ce:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a8d0:	7dbb      	ldrb	r3, [r7, #22]
    a8d2:	2b04      	cmp	r3, #4
    a8d4:	d902      	bls.n	a8dc <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a8d6:	f06f 0311 	mvn.w	r3, #17
    a8da:	e098      	b.n	aa0e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a8dc:	687b      	ldr	r3, [r7, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a8e4:	d31a      	bcc.n	a91c <_usb_d_dev_ep_trans+0xb0>
    a8e6:	687b      	ldr	r3, [r7, #4]
    a8e8:	681b      	ldr	r3, [r3, #0]
    a8ea:	461a      	mov	r2, r3
    a8ec:	687b      	ldr	r3, [r7, #4]
    a8ee:	685b      	ldr	r3, [r3, #4]
    a8f0:	4413      	add	r3, r2
    a8f2:	4a4a      	ldr	r2, [pc, #296]	; (aa1c <_usb_d_dev_ep_trans+0x1b0>)
    a8f4:	4293      	cmp	r3, r2
    a8f6:	d811      	bhi.n	a91c <_usb_d_dev_ep_trans+0xb0>
    a8f8:	687b      	ldr	r3, [r7, #4]
    a8fa:	681b      	ldr	r3, [r3, #0]
    a8fc:	f003 0303 	and.w	r3, r3, #3
    a900:	2b00      	cmp	r3, #0
    a902:	d10b      	bne.n	a91c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a904:	7d7b      	ldrb	r3, [r7, #21]
    a906:	f083 0301 	eor.w	r3, r3, #1
    a90a:	b2db      	uxtb	r3, r3
    a90c:	2b00      	cmp	r3, #0
    a90e:	d00e      	beq.n	a92e <_usb_d_dev_ep_trans+0xc2>
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	685b      	ldr	r3, [r3, #4]
    a914:	693a      	ldr	r2, [r7, #16]
    a916:	8a12      	ldrh	r2, [r2, #16]
    a918:	4293      	cmp	r3, r2
    a91a:	d208      	bcs.n	a92e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a91c:	693b      	ldr	r3, [r7, #16]
    a91e:	68db      	ldr	r3, [r3, #12]
    a920:	2b00      	cmp	r3, #0
    a922:	d102      	bne.n	a92a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a924:	f06f 0312 	mvn.w	r3, #18
    a928:	e071      	b.n	aa0e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a92a:	2301      	movs	r3, #1
    a92c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a92e:	7d7b      	ldrb	r3, [r7, #21]
    a930:	f083 0301 	eor.w	r3, r3, #1
    a934:	b2db      	uxtb	r3, r3
    a936:	2b00      	cmp	r3, #0
    a938:	d009      	beq.n	a94e <_usb_d_dev_ep_trans+0xe2>
    a93a:	7b7b      	ldrb	r3, [r7, #13]
    a93c:	2b00      	cmp	r3, #0
    a93e:	d006      	beq.n	a94e <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a940:	693b      	ldr	r3, [r7, #16]
    a942:	68db      	ldr	r3, [r3, #12]
    a944:	2b00      	cmp	r3, #0
    a946:	d102      	bne.n	a94e <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a948:	f06f 0311 	mvn.w	r3, #17
    a94c:	e05f      	b.n	aa0e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a94e:	693b      	ldr	r3, [r7, #16]
    a950:	7cdb      	ldrb	r3, [r3, #19]
    a952:	f003 0308 	and.w	r3, r3, #8
    a956:	b2db      	uxtb	r3, r3
    a958:	2b00      	cmp	r3, #0
    a95a:	d001      	beq.n	a960 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a95c:	2302      	movs	r3, #2
    a95e:	e056      	b.n	aa0e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a960:	f107 0308 	add.w	r3, r7, #8
    a964:	4618      	mov	r0, r3
    a966:	4b2e      	ldr	r3, [pc, #184]	; (aa20 <_usb_d_dev_ep_trans+0x1b4>)
    a968:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a96a:	693b      	ldr	r3, [r7, #16]
    a96c:	7cdb      	ldrb	r3, [r3, #19]
    a96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a972:	b2db      	uxtb	r3, r3
    a974:	2b00      	cmp	r3, #0
    a976:	d006      	beq.n	a986 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a978:	f107 0308 	add.w	r3, r7, #8
    a97c:	4618      	mov	r0, r3
    a97e:	4b29      	ldr	r3, [pc, #164]	; (aa24 <_usb_d_dev_ep_trans+0x1b8>)
    a980:	4798      	blx	r3
		return USB_BUSY;
    a982:	2301      	movs	r3, #1
    a984:	e043      	b.n	aa0e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a986:	693a      	ldr	r2, [r7, #16]
    a988:	7cd3      	ldrb	r3, [r2, #19]
    a98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a98e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a990:	f107 0308 	add.w	r3, r7, #8
    a994:	4618      	mov	r0, r3
    a996:	4b23      	ldr	r3, [pc, #140]	; (aa24 <_usb_d_dev_ep_trans+0x1b8>)
    a998:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a99a:	687b      	ldr	r3, [r7, #4]
    a99c:	681a      	ldr	r2, [r3, #0]
    a99e:	693b      	ldr	r3, [r7, #16]
    a9a0:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	685a      	ldr	r2, [r3, #4]
    a9a6:	693b      	ldr	r3, [r7, #16]
    a9a8:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a9aa:	693b      	ldr	r3, [r7, #16]
    a9ac:	2200      	movs	r2, #0
    a9ae:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a9b0:	693a      	ldr	r2, [r7, #16]
    a9b2:	7cd3      	ldrb	r3, [r2, #19]
    a9b4:	7d79      	ldrb	r1, [r7, #21]
    a9b6:	f361 13c7 	bfi	r3, r1, #7, #1
    a9ba:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a9bc:	693a      	ldr	r2, [r7, #16]
    a9be:	7cd3      	ldrb	r3, [r2, #19]
    a9c0:	7df9      	ldrb	r1, [r7, #23]
    a9c2:	f361 1345 	bfi	r3, r1, #5, #1
    a9c6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a9c8:	687b      	ldr	r3, [r7, #4]
    a9ca:	7a5b      	ldrb	r3, [r3, #9]
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	d007      	beq.n	a9e0 <_usb_d_dev_ep_trans+0x174>
    a9d0:	7b7b      	ldrb	r3, [r7, #13]
    a9d2:	f083 0301 	eor.w	r3, r3, #1
    a9d6:	b2db      	uxtb	r3, r3
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d001      	beq.n	a9e0 <_usb_d_dev_ep_trans+0x174>
    a9dc:	2301      	movs	r3, #1
    a9de:	e000      	b.n	a9e2 <_usb_d_dev_ep_trans+0x176>
    a9e0:	2300      	movs	r3, #0
    a9e2:	b2db      	uxtb	r3, r3
    a9e4:	f003 0301 	and.w	r3, r3, #1
    a9e8:	b2d9      	uxtb	r1, r3
    a9ea:	693a      	ldr	r2, [r7, #16]
    a9ec:	7cd3      	ldrb	r3, [r2, #19]
    a9ee:	f361 1304 	bfi	r3, r1, #4, #1
    a9f2:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a9f4:	7d7b      	ldrb	r3, [r7, #21]
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d004      	beq.n	aa04 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a9fa:	2100      	movs	r1, #0
    a9fc:	6938      	ldr	r0, [r7, #16]
    a9fe:	4b0a      	ldr	r3, [pc, #40]	; (aa28 <_usb_d_dev_ep_trans+0x1bc>)
    aa00:	4798      	blx	r3
    aa02:	e003      	b.n	aa0c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    aa04:	2100      	movs	r1, #0
    aa06:	6938      	ldr	r0, [r7, #16]
    aa08:	4b08      	ldr	r3, [pc, #32]	; (aa2c <_usb_d_dev_ep_trans+0x1c0>)
    aa0a:	4798      	blx	r3
	}

	return ERR_NONE;
    aa0c:	2300      	movs	r3, #0
}
    aa0e:	4618      	mov	r0, r3
    aa10:	3718      	adds	r7, #24
    aa12:	46bd      	mov	sp, r7
    aa14:	bd80      	pop	{r7, pc}
    aa16:	bf00      	nop
    aa18:	000090dd 	.word	0x000090dd
    aa1c:	20041fff 	.word	0x20041fff
    aa20:	0000b239 	.word	0x0000b239
    aa24:	0000b25f 	.word	0x0000b25f
    aa28:	000093a5 	.word	0x000093a5
    aa2c:	000095bd 	.word	0x000095bd

0000aa30 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    aa30:	b580      	push	{r7, lr}
    aa32:	b084      	sub	sp, #16
    aa34:	af00      	add	r7, sp, #0
    aa36:	4603      	mov	r3, r0
    aa38:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    aa3a:	79fb      	ldrb	r3, [r7, #7]
    aa3c:	f003 030f 	and.w	r3, r3, #15
    aa40:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    aa42:	79fb      	ldrb	r3, [r7, #7]
    aa44:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa48:	2b00      	cmp	r3, #0
    aa4a:	bf14      	ite	ne
    aa4c:	2301      	movne	r3, #1
    aa4e:	2300      	moveq	r3, #0
    aa50:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aa52:	7bba      	ldrb	r2, [r7, #14]
    aa54:	7bfb      	ldrb	r3, [r7, #15]
    aa56:	4611      	mov	r1, r2
    aa58:	4618      	mov	r0, r3
    aa5a:	4b08      	ldr	r3, [pc, #32]	; (aa7c <_usb_d_dev_ep_abort+0x4c>)
    aa5c:	4798      	blx	r3
    aa5e:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    aa60:	7bfb      	ldrb	r3, [r7, #15]
    aa62:	2b04      	cmp	r3, #4
    aa64:	d806      	bhi.n	aa74 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    aa66:	7bbb      	ldrb	r3, [r7, #14]
    aa68:	2202      	movs	r2, #2
    aa6a:	4619      	mov	r1, r3
    aa6c:	68b8      	ldr	r0, [r7, #8]
    aa6e:	4b04      	ldr	r3, [pc, #16]	; (aa80 <_usb_d_dev_ep_abort+0x50>)
    aa70:	4798      	blx	r3
    aa72:	e000      	b.n	aa76 <_usb_d_dev_ep_abort+0x46>
		return;
    aa74:	bf00      	nop
}
    aa76:	3710      	adds	r7, #16
    aa78:	46bd      	mov	sp, r7
    aa7a:	bd80      	pop	{r7, pc}
    aa7c:	000090dd 	.word	0x000090dd
    aa80:	0000a715 	.word	0x0000a715

0000aa84 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    aa84:	b480      	push	{r7}
    aa86:	b085      	sub	sp, #20
    aa88:	af00      	add	r7, sp, #0
    aa8a:	4603      	mov	r3, r0
    aa8c:	6039      	str	r1, [r7, #0]
    aa8e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aa90:	683b      	ldr	r3, [r7, #0]
    aa92:	2b00      	cmp	r3, #0
    aa94:	d001      	beq.n	aa9a <_usb_d_dev_register_callback+0x16>
    aa96:	683b      	ldr	r3, [r7, #0]
    aa98:	e000      	b.n	aa9c <_usb_d_dev_register_callback+0x18>
    aa9a:	4b0a      	ldr	r3, [pc, #40]	; (aac4 <_usb_d_dev_register_callback+0x40>)
    aa9c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    aa9e:	79fb      	ldrb	r3, [r7, #7]
    aaa0:	2b01      	cmp	r3, #1
    aaa2:	d103      	bne.n	aaac <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    aaa4:	4a08      	ldr	r2, [pc, #32]	; (aac8 <_usb_d_dev_register_callback+0x44>)
    aaa6:	68fb      	ldr	r3, [r7, #12]
    aaa8:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    aaaa:	e005      	b.n	aab8 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    aaac:	79fb      	ldrb	r3, [r7, #7]
    aaae:	2b00      	cmp	r3, #0
    aab0:	d102      	bne.n	aab8 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    aab2:	4a05      	ldr	r2, [pc, #20]	; (aac8 <_usb_d_dev_register_callback+0x44>)
    aab4:	68fb      	ldr	r3, [r7, #12]
    aab6:	6013      	str	r3, [r2, #0]
}
    aab8:	bf00      	nop
    aaba:	3714      	adds	r7, #20
    aabc:	46bd      	mov	sp, r7
    aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
    aac2:	4770      	bx	lr
    aac4:	00008965 	.word	0x00008965
    aac8:	20000e20 	.word	0x20000e20

0000aacc <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    aacc:	b480      	push	{r7}
    aace:	b085      	sub	sp, #20
    aad0:	af00      	add	r7, sp, #0
    aad2:	4603      	mov	r3, r0
    aad4:	6039      	str	r1, [r7, #0]
    aad6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aad8:	683b      	ldr	r3, [r7, #0]
    aada:	2b00      	cmp	r3, #0
    aadc:	d001      	beq.n	aae2 <_usb_d_dev_register_ep_callback+0x16>
    aade:	683b      	ldr	r3, [r7, #0]
    aae0:	e000      	b.n	aae4 <_usb_d_dev_register_ep_callback+0x18>
    aae2:	4b0e      	ldr	r3, [pc, #56]	; (ab1c <_usb_d_dev_register_ep_callback+0x50>)
    aae4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    aae6:	79fb      	ldrb	r3, [r7, #7]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d103      	bne.n	aaf4 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    aaec:	4a0c      	ldr	r2, [pc, #48]	; (ab20 <_usb_d_dev_register_ep_callback+0x54>)
    aaee:	68fb      	ldr	r3, [r7, #12]
    aaf0:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    aaf2:	e00c      	b.n	ab0e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    aaf4:	79fb      	ldrb	r3, [r7, #7]
    aaf6:	2b01      	cmp	r3, #1
    aaf8:	d103      	bne.n	ab02 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    aafa:	4a09      	ldr	r2, [pc, #36]	; (ab20 <_usb_d_dev_register_ep_callback+0x54>)
    aafc:	68fb      	ldr	r3, [r7, #12]
    aafe:	60d3      	str	r3, [r2, #12]
}
    ab00:	e005      	b.n	ab0e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ab02:	79fb      	ldrb	r3, [r7, #7]
    ab04:	2b02      	cmp	r3, #2
    ab06:	d102      	bne.n	ab0e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ab08:	4a05      	ldr	r2, [pc, #20]	; (ab20 <_usb_d_dev_register_ep_callback+0x54>)
    ab0a:	68fb      	ldr	r3, [r7, #12]
    ab0c:	6113      	str	r3, [r2, #16]
}
    ab0e:	bf00      	nop
    ab10:	3714      	adds	r7, #20
    ab12:	46bd      	mov	sp, r7
    ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab18:	4770      	bx	lr
    ab1a:	bf00      	nop
    ab1c:	00008965 	.word	0x00008965
    ab20:	20000e20 	.word	0x20000e20

0000ab24 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ab24:	b580      	push	{r7, lr}
    ab26:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab28:	4b01      	ldr	r3, [pc, #4]	; (ab30 <USB_0_Handler+0xc>)
    ab2a:	4798      	blx	r3
}
    ab2c:	bf00      	nop
    ab2e:	bd80      	pop	{r7, pc}
    ab30:	00009d95 	.word	0x00009d95

0000ab34 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ab34:	b580      	push	{r7, lr}
    ab36:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab38:	4b01      	ldr	r3, [pc, #4]	; (ab40 <USB_1_Handler+0xc>)
    ab3a:	4798      	blx	r3
}
    ab3c:	bf00      	nop
    ab3e:	bd80      	pop	{r7, pc}
    ab40:	00009d95 	.word	0x00009d95

0000ab44 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ab44:	b580      	push	{r7, lr}
    ab46:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab48:	4b01      	ldr	r3, [pc, #4]	; (ab50 <USB_2_Handler+0xc>)
    ab4a:	4798      	blx	r3
}
    ab4c:	bf00      	nop
    ab4e:	bd80      	pop	{r7, pc}
    ab50:	00009d95 	.word	0x00009d95

0000ab54 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ab54:	b580      	push	{r7, lr}
    ab56:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab58:	4b01      	ldr	r3, [pc, #4]	; (ab60 <USB_3_Handler+0xc>)
    ab5a:	4798      	blx	r3
}
    ab5c:	bf00      	nop
    ab5e:	bd80      	pop	{r7, pc}
    ab60:	00009d95 	.word	0x00009d95

0000ab64 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ab64:	b480      	push	{r7}
    ab66:	b083      	sub	sp, #12
    ab68:	af00      	add	r7, sp, #0
    ab6a:	6078      	str	r0, [r7, #4]
    ab6c:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ab6e:	bf00      	nop
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	689a      	ldr	r2, [r3, #8]
    ab74:	683b      	ldr	r3, [r7, #0]
    ab76:	4013      	ands	r3, r2
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d1f9      	bne.n	ab70 <hri_wdt_wait_for_sync+0xc>
	};
}
    ab7c:	bf00      	nop
    ab7e:	370c      	adds	r7, #12
    ab80:	46bd      	mov	sp, r7
    ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab86:	4770      	bx	lr

0000ab88 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ab88:	b580      	push	{r7, lr}
    ab8a:	b084      	sub	sp, #16
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab90:	210e      	movs	r1, #14
    ab92:	6878      	ldr	r0, [r7, #4]
    ab94:	4b0a      	ldr	r3, [pc, #40]	; (abc0 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ab96:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab98:	687b      	ldr	r3, [r7, #4]
    ab9a:	781b      	ldrb	r3, [r3, #0]
    ab9c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ab9e:	7bfb      	ldrb	r3, [r7, #15]
    aba0:	085b      	lsrs	r3, r3, #1
    aba2:	b2db      	uxtb	r3, r3
    aba4:	f003 0301 	and.w	r3, r3, #1
    aba8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    abaa:	7bfb      	ldrb	r3, [r7, #15]
    abac:	2b00      	cmp	r3, #0
    abae:	bf14      	ite	ne
    abb0:	2301      	movne	r3, #1
    abb2:	2300      	moveq	r3, #0
    abb4:	b2db      	uxtb	r3, r3
}
    abb6:	4618      	mov	r0, r3
    abb8:	3710      	adds	r7, #16
    abba:	46bd      	mov	sp, r7
    abbc:	bd80      	pop	{r7, pc}
    abbe:	bf00      	nop
    abc0:	0000ab65 	.word	0x0000ab65

0000abc4 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    abc4:	b580      	push	{r7, lr}
    abc6:	b082      	sub	sp, #8
    abc8:	af00      	add	r7, sp, #0
    abca:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	781b      	ldrb	r3, [r3, #0]
    abd0:	b2db      	uxtb	r3, r3
    abd2:	f023 0304 	bic.w	r3, r3, #4
    abd6:	b2da      	uxtb	r2, r3
    abd8:	687b      	ldr	r3, [r7, #4]
    abda:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    abdc:	210e      	movs	r1, #14
    abde:	6878      	ldr	r0, [r7, #4]
    abe0:	4b02      	ldr	r3, [pc, #8]	; (abec <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    abe2:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    abe4:	bf00      	nop
    abe6:	3708      	adds	r7, #8
    abe8:	46bd      	mov	sp, r7
    abea:	bd80      	pop	{r7, pc}
    abec:	0000ab65 	.word	0x0000ab65

0000abf0 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    abf0:	b580      	push	{r7, lr}
    abf2:	b084      	sub	sp, #16
    abf4:	af00      	add	r7, sp, #0
    abf6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    abf8:	210e      	movs	r1, #14
    abfa:	6878      	ldr	r0, [r7, #4]
    abfc:	4b08      	ldr	r3, [pc, #32]	; (ac20 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    abfe:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	781b      	ldrb	r3, [r3, #0]
    ac04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ac06:	7bfb      	ldrb	r3, [r7, #15]
    ac08:	09db      	lsrs	r3, r3, #7
    ac0a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ac0c:	7bfb      	ldrb	r3, [r7, #15]
    ac0e:	2b00      	cmp	r3, #0
    ac10:	bf14      	ite	ne
    ac12:	2301      	movne	r3, #1
    ac14:	2300      	moveq	r3, #0
    ac16:	b2db      	uxtb	r3, r3
}
    ac18:	4618      	mov	r0, r3
    ac1a:	3710      	adds	r7, #16
    ac1c:	46bd      	mov	sp, r7
    ac1e:	bd80      	pop	{r7, pc}
    ac20:	0000ab65 	.word	0x0000ab65

0000ac24 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ac24:	b480      	push	{r7}
    ac26:	b085      	sub	sp, #20
    ac28:	af00      	add	r7, sp, #0
    ac2a:	6078      	str	r0, [r7, #4]
    ac2c:	460b      	mov	r3, r1
    ac2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ac30:	687b      	ldr	r3, [r7, #4]
    ac32:	785b      	ldrb	r3, [r3, #1]
    ac34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ac36:	7bfb      	ldrb	r3, [r7, #15]
    ac38:	f023 030f 	bic.w	r3, r3, #15
    ac3c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ac3e:	78fb      	ldrb	r3, [r7, #3]
    ac40:	f003 030f 	and.w	r3, r3, #15
    ac44:	b2da      	uxtb	r2, r3
    ac46:	7bfb      	ldrb	r3, [r7, #15]
    ac48:	4313      	orrs	r3, r2
    ac4a:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ac4c:	687b      	ldr	r3, [r7, #4]
    ac4e:	7bfa      	ldrb	r2, [r7, #15]
    ac50:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ac52:	bf00      	nop
    ac54:	3714      	adds	r7, #20
    ac56:	46bd      	mov	sp, r7
    ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac5c:	4770      	bx	lr
	...

0000ac60 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ac60:	b580      	push	{r7, lr}
    ac62:	b082      	sub	sp, #8
    ac64:	af00      	add	r7, sp, #0
    ac66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d005      	beq.n	ac7a <_wdt_init+0x1a>
    ac6e:	687b      	ldr	r3, [r7, #4]
    ac70:	681b      	ldr	r3, [r3, #0]
    ac72:	2b00      	cmp	r3, #0
    ac74:	d001      	beq.n	ac7a <_wdt_init+0x1a>
    ac76:	2301      	movs	r3, #1
    ac78:	e000      	b.n	ac7c <_wdt_init+0x1c>
    ac7a:	2300      	movs	r3, #0
    ac7c:	f003 0301 	and.w	r3, r3, #1
    ac80:	b2db      	uxtb	r3, r3
    ac82:	2250      	movs	r2, #80	; 0x50
    ac84:	4913      	ldr	r1, [pc, #76]	; (acd4 <_wdt_init+0x74>)
    ac86:	4618      	mov	r0, r3
    ac88:	4b13      	ldr	r3, [pc, #76]	; (acd8 <_wdt_init+0x78>)
    ac8a:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	681b      	ldr	r3, [r3, #0]
    ac90:	4618      	mov	r0, r3
    ac92:	4b12      	ldr	r3, [pc, #72]	; (acdc <_wdt_init+0x7c>)
    ac94:	4798      	blx	r3
    ac96:	4603      	mov	r3, r0
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d107      	bne.n	acac <_wdt_init+0x4c>
    ac9c:	687b      	ldr	r3, [r7, #4]
    ac9e:	681b      	ldr	r3, [r3, #0]
    aca0:	4618      	mov	r0, r3
    aca2:	4b0f      	ldr	r3, [pc, #60]	; (ace0 <_wdt_init+0x80>)
    aca4:	4798      	blx	r3
    aca6:	4603      	mov	r3, r0
    aca8:	2b00      	cmp	r3, #0
    acaa:	d002      	beq.n	acb2 <_wdt_init+0x52>
		return ERR_DENIED;
    acac:	f06f 0310 	mvn.w	r3, #16
    acb0:	e00b      	b.n	acca <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    acb2:	687b      	ldr	r3, [r7, #4]
    acb4:	681b      	ldr	r3, [r3, #0]
    acb6:	4618      	mov	r0, r3
    acb8:	4b0a      	ldr	r3, [pc, #40]	; (ace4 <_wdt_init+0x84>)
    acba:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	681b      	ldr	r3, [r3, #0]
    acc0:	210b      	movs	r1, #11
    acc2:	4618      	mov	r0, r3
    acc4:	4b08      	ldr	r3, [pc, #32]	; (ace8 <_wdt_init+0x88>)
    acc6:	4798      	blx	r3
	}

	return ERR_NONE;
    acc8:	2300      	movs	r3, #0
}
    acca:	4618      	mov	r0, r3
    accc:	3708      	adds	r7, #8
    acce:	46bd      	mov	sp, r7
    acd0:	bd80      	pop	{r7, pc}
    acd2:	bf00      	nop
    acd4:	000123d8 	.word	0x000123d8
    acd8:	00003681 	.word	0x00003681
    acdc:	0000abf1 	.word	0x0000abf1
    ace0:	0000ab89 	.word	0x0000ab89
    ace4:	0000abc5 	.word	0x0000abc5
    ace8:	0000ac25 	.word	0x0000ac25

0000acec <hri_port_set_DIR_reg>:
{
    acec:	b480      	push	{r7}
    acee:	b085      	sub	sp, #20
    acf0:	af00      	add	r7, sp, #0
    acf2:	60f8      	str	r0, [r7, #12]
    acf4:	460b      	mov	r3, r1
    acf6:	607a      	str	r2, [r7, #4]
    acf8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    acfa:	7afb      	ldrb	r3, [r7, #11]
    acfc:	68fa      	ldr	r2, [r7, #12]
    acfe:	01db      	lsls	r3, r3, #7
    ad00:	4413      	add	r3, r2
    ad02:	3308      	adds	r3, #8
    ad04:	687a      	ldr	r2, [r7, #4]
    ad06:	601a      	str	r2, [r3, #0]
}
    ad08:	bf00      	nop
    ad0a:	3714      	adds	r7, #20
    ad0c:	46bd      	mov	sp, r7
    ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad12:	4770      	bx	lr

0000ad14 <hri_port_clear_DIR_reg>:
{
    ad14:	b480      	push	{r7}
    ad16:	b085      	sub	sp, #20
    ad18:	af00      	add	r7, sp, #0
    ad1a:	60f8      	str	r0, [r7, #12]
    ad1c:	460b      	mov	r3, r1
    ad1e:	607a      	str	r2, [r7, #4]
    ad20:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ad22:	7afb      	ldrb	r3, [r7, #11]
    ad24:	68fa      	ldr	r2, [r7, #12]
    ad26:	01db      	lsls	r3, r3, #7
    ad28:	4413      	add	r3, r2
    ad2a:	3304      	adds	r3, #4
    ad2c:	687a      	ldr	r2, [r7, #4]
    ad2e:	601a      	str	r2, [r3, #0]
}
    ad30:	bf00      	nop
    ad32:	3714      	adds	r7, #20
    ad34:	46bd      	mov	sp, r7
    ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad3a:	4770      	bx	lr

0000ad3c <hri_port_set_OUT_reg>:
{
    ad3c:	b480      	push	{r7}
    ad3e:	b085      	sub	sp, #20
    ad40:	af00      	add	r7, sp, #0
    ad42:	60f8      	str	r0, [r7, #12]
    ad44:	460b      	mov	r3, r1
    ad46:	607a      	str	r2, [r7, #4]
    ad48:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ad4a:	7afb      	ldrb	r3, [r7, #11]
    ad4c:	68fa      	ldr	r2, [r7, #12]
    ad4e:	01db      	lsls	r3, r3, #7
    ad50:	4413      	add	r3, r2
    ad52:	3318      	adds	r3, #24
    ad54:	687a      	ldr	r2, [r7, #4]
    ad56:	601a      	str	r2, [r3, #0]
}
    ad58:	bf00      	nop
    ad5a:	3714      	adds	r7, #20
    ad5c:	46bd      	mov	sp, r7
    ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad62:	4770      	bx	lr

0000ad64 <hri_port_clear_OUT_reg>:
{
    ad64:	b480      	push	{r7}
    ad66:	b085      	sub	sp, #20
    ad68:	af00      	add	r7, sp, #0
    ad6a:	60f8      	str	r0, [r7, #12]
    ad6c:	460b      	mov	r3, r1
    ad6e:	607a      	str	r2, [r7, #4]
    ad70:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ad72:	7afb      	ldrb	r3, [r7, #11]
    ad74:	68fa      	ldr	r2, [r7, #12]
    ad76:	01db      	lsls	r3, r3, #7
    ad78:	4413      	add	r3, r2
    ad7a:	3314      	adds	r3, #20
    ad7c:	687a      	ldr	r2, [r7, #4]
    ad7e:	601a      	str	r2, [r3, #0]
}
    ad80:	bf00      	nop
    ad82:	3714      	adds	r7, #20
    ad84:	46bd      	mov	sp, r7
    ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad8a:	4770      	bx	lr

0000ad8c <hri_port_write_PMUX_PMUXE_bf>:
{
    ad8c:	b480      	push	{r7}
    ad8e:	b085      	sub	sp, #20
    ad90:	af00      	add	r7, sp, #0
    ad92:	6078      	str	r0, [r7, #4]
    ad94:	4608      	mov	r0, r1
    ad96:	4611      	mov	r1, r2
    ad98:	461a      	mov	r2, r3
    ad9a:	4603      	mov	r3, r0
    ad9c:	70fb      	strb	r3, [r7, #3]
    ad9e:	460b      	mov	r3, r1
    ada0:	70bb      	strb	r3, [r7, #2]
    ada2:	4613      	mov	r3, r2
    ada4:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ada6:	78fa      	ldrb	r2, [r7, #3]
    ada8:	78bb      	ldrb	r3, [r7, #2]
    adaa:	6879      	ldr	r1, [r7, #4]
    adac:	01d2      	lsls	r2, r2, #7
    adae:	440a      	add	r2, r1
    adb0:	4413      	add	r3, r2
    adb2:	3330      	adds	r3, #48	; 0x30
    adb4:	781b      	ldrb	r3, [r3, #0]
    adb6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    adb8:	7bfb      	ldrb	r3, [r7, #15]
    adba:	f023 030f 	bic.w	r3, r3, #15
    adbe:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    adc0:	787b      	ldrb	r3, [r7, #1]
    adc2:	f003 030f 	and.w	r3, r3, #15
    adc6:	b2da      	uxtb	r2, r3
    adc8:	7bfb      	ldrb	r3, [r7, #15]
    adca:	4313      	orrs	r3, r2
    adcc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    adce:	78fa      	ldrb	r2, [r7, #3]
    add0:	78bb      	ldrb	r3, [r7, #2]
    add2:	6879      	ldr	r1, [r7, #4]
    add4:	01d2      	lsls	r2, r2, #7
    add6:	440a      	add	r2, r1
    add8:	4413      	add	r3, r2
    adda:	3330      	adds	r3, #48	; 0x30
    addc:	7bfa      	ldrb	r2, [r7, #15]
    adde:	701a      	strb	r2, [r3, #0]
}
    ade0:	bf00      	nop
    ade2:	3714      	adds	r7, #20
    ade4:	46bd      	mov	sp, r7
    ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
    adea:	4770      	bx	lr

0000adec <hri_port_write_PMUX_PMUXO_bf>:
{
    adec:	b480      	push	{r7}
    adee:	b085      	sub	sp, #20
    adf0:	af00      	add	r7, sp, #0
    adf2:	6078      	str	r0, [r7, #4]
    adf4:	4608      	mov	r0, r1
    adf6:	4611      	mov	r1, r2
    adf8:	461a      	mov	r2, r3
    adfa:	4603      	mov	r3, r0
    adfc:	70fb      	strb	r3, [r7, #3]
    adfe:	460b      	mov	r3, r1
    ae00:	70bb      	strb	r3, [r7, #2]
    ae02:	4613      	mov	r3, r2
    ae04:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ae06:	78fa      	ldrb	r2, [r7, #3]
    ae08:	78bb      	ldrb	r3, [r7, #2]
    ae0a:	6879      	ldr	r1, [r7, #4]
    ae0c:	01d2      	lsls	r2, r2, #7
    ae0e:	440a      	add	r2, r1
    ae10:	4413      	add	r3, r2
    ae12:	3330      	adds	r3, #48	; 0x30
    ae14:	781b      	ldrb	r3, [r3, #0]
    ae16:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ae18:	7bfb      	ldrb	r3, [r7, #15]
    ae1a:	f003 030f 	and.w	r3, r3, #15
    ae1e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ae20:	787b      	ldrb	r3, [r7, #1]
    ae22:	011b      	lsls	r3, r3, #4
    ae24:	b2da      	uxtb	r2, r3
    ae26:	7bfb      	ldrb	r3, [r7, #15]
    ae28:	4313      	orrs	r3, r2
    ae2a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ae2c:	78fa      	ldrb	r2, [r7, #3]
    ae2e:	78bb      	ldrb	r3, [r7, #2]
    ae30:	6879      	ldr	r1, [r7, #4]
    ae32:	01d2      	lsls	r2, r2, #7
    ae34:	440a      	add	r2, r1
    ae36:	4413      	add	r3, r2
    ae38:	3330      	adds	r3, #48	; 0x30
    ae3a:	7bfa      	ldrb	r2, [r7, #15]
    ae3c:	701a      	strb	r2, [r3, #0]
}
    ae3e:	bf00      	nop
    ae40:	3714      	adds	r7, #20
    ae42:	46bd      	mov	sp, r7
    ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae48:	4770      	bx	lr

0000ae4a <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ae4a:	b480      	push	{r7}
    ae4c:	b085      	sub	sp, #20
    ae4e:	af00      	add	r7, sp, #0
    ae50:	6078      	str	r0, [r7, #4]
    ae52:	4608      	mov	r0, r1
    ae54:	4611      	mov	r1, r2
    ae56:	461a      	mov	r2, r3
    ae58:	4603      	mov	r3, r0
    ae5a:	70fb      	strb	r3, [r7, #3]
    ae5c:	460b      	mov	r3, r1
    ae5e:	70bb      	strb	r3, [r7, #2]
    ae60:	4613      	mov	r3, r2
    ae62:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ae64:	78fa      	ldrb	r2, [r7, #3]
    ae66:	78bb      	ldrb	r3, [r7, #2]
    ae68:	6879      	ldr	r1, [r7, #4]
    ae6a:	01d2      	lsls	r2, r2, #7
    ae6c:	440a      	add	r2, r1
    ae6e:	4413      	add	r3, r2
    ae70:	3340      	adds	r3, #64	; 0x40
    ae72:	781b      	ldrb	r3, [r3, #0]
    ae74:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ae76:	7bfb      	ldrb	r3, [r7, #15]
    ae78:	f023 0301 	bic.w	r3, r3, #1
    ae7c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ae7e:	787a      	ldrb	r2, [r7, #1]
    ae80:	7bfb      	ldrb	r3, [r7, #15]
    ae82:	4313      	orrs	r3, r2
    ae84:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ae86:	78fa      	ldrb	r2, [r7, #3]
    ae88:	78bb      	ldrb	r3, [r7, #2]
    ae8a:	6879      	ldr	r1, [r7, #4]
    ae8c:	01d2      	lsls	r2, r2, #7
    ae8e:	440a      	add	r2, r1
    ae90:	4413      	add	r3, r2
    ae92:	3340      	adds	r3, #64	; 0x40
    ae94:	7bfa      	ldrb	r2, [r7, #15]
    ae96:	701a      	strb	r2, [r3, #0]
}
    ae98:	bf00      	nop
    ae9a:	3714      	adds	r7, #20
    ae9c:	46bd      	mov	sp, r7
    ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aea2:	4770      	bx	lr

0000aea4 <hri_port_write_WRCONFIG_reg>:
{
    aea4:	b480      	push	{r7}
    aea6:	b085      	sub	sp, #20
    aea8:	af00      	add	r7, sp, #0
    aeaa:	60f8      	str	r0, [r7, #12]
    aeac:	460b      	mov	r3, r1
    aeae:	607a      	str	r2, [r7, #4]
    aeb0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    aeb2:	7afb      	ldrb	r3, [r7, #11]
    aeb4:	68fa      	ldr	r2, [r7, #12]
    aeb6:	01db      	lsls	r3, r3, #7
    aeb8:	4413      	add	r3, r2
    aeba:	3328      	adds	r3, #40	; 0x28
    aebc:	687a      	ldr	r2, [r7, #4]
    aebe:	601a      	str	r2, [r3, #0]
}
    aec0:	bf00      	nop
    aec2:	3714      	adds	r7, #20
    aec4:	46bd      	mov	sp, r7
    aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeca:	4770      	bx	lr

0000aecc <_gpio_set_direction>:
{
    aecc:	b580      	push	{r7, lr}
    aece:	b082      	sub	sp, #8
    aed0:	af00      	add	r7, sp, #0
    aed2:	4603      	mov	r3, r0
    aed4:	6039      	str	r1, [r7, #0]
    aed6:	71fb      	strb	r3, [r7, #7]
    aed8:	4613      	mov	r3, r2
    aeda:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    aedc:	79bb      	ldrb	r3, [r7, #6]
    aede:	2b01      	cmp	r3, #1
    aee0:	d01c      	beq.n	af1c <_gpio_set_direction+0x50>
    aee2:	2b02      	cmp	r3, #2
    aee4:	d037      	beq.n	af56 <_gpio_set_direction+0x8a>
    aee6:	2b00      	cmp	r3, #0
    aee8:	d14e      	bne.n	af88 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    aeea:	79fb      	ldrb	r3, [r7, #7]
    aeec:	683a      	ldr	r2, [r7, #0]
    aeee:	4619      	mov	r1, r3
    aef0:	482a      	ldr	r0, [pc, #168]	; (af9c <_gpio_set_direction+0xd0>)
    aef2:	4b2b      	ldr	r3, [pc, #172]	; (afa0 <_gpio_set_direction+0xd4>)
    aef4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    aef6:	683b      	ldr	r3, [r7, #0]
    aef8:	b29b      	uxth	r3, r3
    aefa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    aefe:	79fb      	ldrb	r3, [r7, #7]
    af00:	4619      	mov	r1, r3
    af02:	4826      	ldr	r0, [pc, #152]	; (af9c <_gpio_set_direction+0xd0>)
    af04:	4b27      	ldr	r3, [pc, #156]	; (afa4 <_gpio_set_direction+0xd8>)
    af06:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    af08:	683b      	ldr	r3, [r7, #0]
    af0a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    af0c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    af10:	79fb      	ldrb	r3, [r7, #7]
    af12:	4619      	mov	r1, r3
    af14:	4821      	ldr	r0, [pc, #132]	; (af9c <_gpio_set_direction+0xd0>)
    af16:	4b23      	ldr	r3, [pc, #140]	; (afa4 <_gpio_set_direction+0xd8>)
    af18:	4798      	blx	r3
		break;
    af1a:	e03a      	b.n	af92 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    af1c:	79fb      	ldrb	r3, [r7, #7]
    af1e:	683a      	ldr	r2, [r7, #0]
    af20:	4619      	mov	r1, r3
    af22:	481e      	ldr	r0, [pc, #120]	; (af9c <_gpio_set_direction+0xd0>)
    af24:	4b1e      	ldr	r3, [pc, #120]	; (afa0 <_gpio_set_direction+0xd4>)
    af26:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    af28:	683b      	ldr	r3, [r7, #0]
    af2a:	b29b      	uxth	r3, r3
    af2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    af30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    af34:	79f9      	ldrb	r1, [r7, #7]
    af36:	461a      	mov	r2, r3
    af38:	4818      	ldr	r0, [pc, #96]	; (af9c <_gpio_set_direction+0xd0>)
    af3a:	4b1a      	ldr	r3, [pc, #104]	; (afa4 <_gpio_set_direction+0xd8>)
    af3c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    af3e:	683b      	ldr	r3, [r7, #0]
    af40:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    af42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    af46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    af4a:	79f9      	ldrb	r1, [r7, #7]
    af4c:	461a      	mov	r2, r3
    af4e:	4813      	ldr	r0, [pc, #76]	; (af9c <_gpio_set_direction+0xd0>)
    af50:	4b14      	ldr	r3, [pc, #80]	; (afa4 <_gpio_set_direction+0xd8>)
    af52:	4798      	blx	r3
		break;
    af54:	e01d      	b.n	af92 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    af56:	79fb      	ldrb	r3, [r7, #7]
    af58:	683a      	ldr	r2, [r7, #0]
    af5a:	4619      	mov	r1, r3
    af5c:	480f      	ldr	r0, [pc, #60]	; (af9c <_gpio_set_direction+0xd0>)
    af5e:	4b12      	ldr	r3, [pc, #72]	; (afa8 <_gpio_set_direction+0xdc>)
    af60:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    af62:	683b      	ldr	r3, [r7, #0]
    af64:	b29b      	uxth	r3, r3
    af66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    af6a:	79fb      	ldrb	r3, [r7, #7]
    af6c:	4619      	mov	r1, r3
    af6e:	480b      	ldr	r0, [pc, #44]	; (af9c <_gpio_set_direction+0xd0>)
    af70:	4b0c      	ldr	r3, [pc, #48]	; (afa4 <_gpio_set_direction+0xd8>)
    af72:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    af74:	683b      	ldr	r3, [r7, #0]
    af76:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    af78:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    af7c:	79fb      	ldrb	r3, [r7, #7]
    af7e:	4619      	mov	r1, r3
    af80:	4806      	ldr	r0, [pc, #24]	; (af9c <_gpio_set_direction+0xd0>)
    af82:	4b08      	ldr	r3, [pc, #32]	; (afa4 <_gpio_set_direction+0xd8>)
    af84:	4798      	blx	r3
		break;
    af86:	e004      	b.n	af92 <_gpio_set_direction+0xc6>
		ASSERT(false);
    af88:	2246      	movs	r2, #70	; 0x46
    af8a:	4908      	ldr	r1, [pc, #32]	; (afac <_gpio_set_direction+0xe0>)
    af8c:	2000      	movs	r0, #0
    af8e:	4b08      	ldr	r3, [pc, #32]	; (afb0 <_gpio_set_direction+0xe4>)
    af90:	4798      	blx	r3
}
    af92:	bf00      	nop
    af94:	3708      	adds	r7, #8
    af96:	46bd      	mov	sp, r7
    af98:	bd80      	pop	{r7, pc}
    af9a:	bf00      	nop
    af9c:	41008000 	.word	0x41008000
    afa0:	0000ad15 	.word	0x0000ad15
    afa4:	0000aea5 	.word	0x0000aea5
    afa8:	0000aced 	.word	0x0000aced
    afac:	000123f0 	.word	0x000123f0
    afb0:	00003681 	.word	0x00003681

0000afb4 <_gpio_set_level>:
{
    afb4:	b580      	push	{r7, lr}
    afb6:	b082      	sub	sp, #8
    afb8:	af00      	add	r7, sp, #0
    afba:	4603      	mov	r3, r0
    afbc:	6039      	str	r1, [r7, #0]
    afbe:	71fb      	strb	r3, [r7, #7]
    afc0:	4613      	mov	r3, r2
    afc2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    afc4:	79bb      	ldrb	r3, [r7, #6]
    afc6:	2b00      	cmp	r3, #0
    afc8:	d006      	beq.n	afd8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    afca:	79fb      	ldrb	r3, [r7, #7]
    afcc:	683a      	ldr	r2, [r7, #0]
    afce:	4619      	mov	r1, r3
    afd0:	4806      	ldr	r0, [pc, #24]	; (afec <_gpio_set_level+0x38>)
    afd2:	4b07      	ldr	r3, [pc, #28]	; (aff0 <_gpio_set_level+0x3c>)
    afd4:	4798      	blx	r3
}
    afd6:	e005      	b.n	afe4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    afd8:	79fb      	ldrb	r3, [r7, #7]
    afda:	683a      	ldr	r2, [r7, #0]
    afdc:	4619      	mov	r1, r3
    afde:	4803      	ldr	r0, [pc, #12]	; (afec <_gpio_set_level+0x38>)
    afe0:	4b04      	ldr	r3, [pc, #16]	; (aff4 <_gpio_set_level+0x40>)
    afe2:	4798      	blx	r3
}
    afe4:	bf00      	nop
    afe6:	3708      	adds	r7, #8
    afe8:	46bd      	mov	sp, r7
    afea:	bd80      	pop	{r7, pc}
    afec:	41008000 	.word	0x41008000
    aff0:	0000ad3d 	.word	0x0000ad3d
    aff4:	0000ad65 	.word	0x0000ad65

0000aff8 <_gpio_set_pin_function>:
{
    aff8:	b590      	push	{r4, r7, lr}
    affa:	b085      	sub	sp, #20
    affc:	af00      	add	r7, sp, #0
    affe:	6078      	str	r0, [r7, #4]
    b000:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b002:	687b      	ldr	r3, [r7, #4]
    b004:	095b      	lsrs	r3, r3, #5
    b006:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b008:	687b      	ldr	r3, [r7, #4]
    b00a:	b2db      	uxtb	r3, r3
    b00c:	f003 031f 	and.w	r3, r3, #31
    b010:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b012:	683b      	ldr	r3, [r7, #0]
    b014:	f1b3 3fff 	cmp.w	r3, #4294967295
    b018:	d106      	bne.n	b028 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b01a:	7bba      	ldrb	r2, [r7, #14]
    b01c:	7bf9      	ldrb	r1, [r7, #15]
    b01e:	2300      	movs	r3, #0
    b020:	4812      	ldr	r0, [pc, #72]	; (b06c <_gpio_set_pin_function+0x74>)
    b022:	4c13      	ldr	r4, [pc, #76]	; (b070 <_gpio_set_pin_function+0x78>)
    b024:	47a0      	blx	r4
}
    b026:	e01d      	b.n	b064 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b028:	7bba      	ldrb	r2, [r7, #14]
    b02a:	7bf9      	ldrb	r1, [r7, #15]
    b02c:	2301      	movs	r3, #1
    b02e:	480f      	ldr	r0, [pc, #60]	; (b06c <_gpio_set_pin_function+0x74>)
    b030:	4c0f      	ldr	r4, [pc, #60]	; (b070 <_gpio_set_pin_function+0x78>)
    b032:	47a0      	blx	r4
		if (pin & 1) {
    b034:	7bbb      	ldrb	r3, [r7, #14]
    b036:	f003 0301 	and.w	r3, r3, #1
    b03a:	2b00      	cmp	r3, #0
    b03c:	d009      	beq.n	b052 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b03e:	7bbb      	ldrb	r3, [r7, #14]
    b040:	085b      	lsrs	r3, r3, #1
    b042:	b2da      	uxtb	r2, r3
    b044:	683b      	ldr	r3, [r7, #0]
    b046:	b2db      	uxtb	r3, r3
    b048:	7bf9      	ldrb	r1, [r7, #15]
    b04a:	4808      	ldr	r0, [pc, #32]	; (b06c <_gpio_set_pin_function+0x74>)
    b04c:	4c09      	ldr	r4, [pc, #36]	; (b074 <_gpio_set_pin_function+0x7c>)
    b04e:	47a0      	blx	r4
}
    b050:	e008      	b.n	b064 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b052:	7bbb      	ldrb	r3, [r7, #14]
    b054:	085b      	lsrs	r3, r3, #1
    b056:	b2da      	uxtb	r2, r3
    b058:	683b      	ldr	r3, [r7, #0]
    b05a:	b2db      	uxtb	r3, r3
    b05c:	7bf9      	ldrb	r1, [r7, #15]
    b05e:	4803      	ldr	r0, [pc, #12]	; (b06c <_gpio_set_pin_function+0x74>)
    b060:	4c05      	ldr	r4, [pc, #20]	; (b078 <_gpio_set_pin_function+0x80>)
    b062:	47a0      	blx	r4
}
    b064:	bf00      	nop
    b066:	3714      	adds	r7, #20
    b068:	46bd      	mov	sp, r7
    b06a:	bd90      	pop	{r4, r7, pc}
    b06c:	41008000 	.word	0x41008000
    b070:	0000ae4b 	.word	0x0000ae4b
    b074:	0000aded 	.word	0x0000aded
    b078:	0000ad8d 	.word	0x0000ad8d

0000b07c <gpio_set_pin_function>:
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b082      	sub	sp, #8
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
    b084:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b086:	6839      	ldr	r1, [r7, #0]
    b088:	6878      	ldr	r0, [r7, #4]
    b08a:	4b03      	ldr	r3, [pc, #12]	; (b098 <gpio_set_pin_function+0x1c>)
    b08c:	4798      	blx	r3
}
    b08e:	bf00      	nop
    b090:	3708      	adds	r7, #8
    b092:	46bd      	mov	sp, r7
    b094:	bd80      	pop	{r7, pc}
    b096:	bf00      	nop
    b098:	0000aff9 	.word	0x0000aff9

0000b09c <gpio_set_pin_direction>:
{
    b09c:	b580      	push	{r7, lr}
    b09e:	b082      	sub	sp, #8
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	4603      	mov	r3, r0
    b0a4:	460a      	mov	r2, r1
    b0a6:	71fb      	strb	r3, [r7, #7]
    b0a8:	4613      	mov	r3, r2
    b0aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b0ac:	79fb      	ldrb	r3, [r7, #7]
    b0ae:	095b      	lsrs	r3, r3, #5
    b0b0:	b2d8      	uxtb	r0, r3
    b0b2:	79fb      	ldrb	r3, [r7, #7]
    b0b4:	f003 031f 	and.w	r3, r3, #31
    b0b8:	2201      	movs	r2, #1
    b0ba:	fa02 f303 	lsl.w	r3, r2, r3
    b0be:	79ba      	ldrb	r2, [r7, #6]
    b0c0:	4619      	mov	r1, r3
    b0c2:	4b03      	ldr	r3, [pc, #12]	; (b0d0 <gpio_set_pin_direction+0x34>)
    b0c4:	4798      	blx	r3
}
    b0c6:	bf00      	nop
    b0c8:	3708      	adds	r7, #8
    b0ca:	46bd      	mov	sp, r7
    b0cc:	bd80      	pop	{r7, pc}
    b0ce:	bf00      	nop
    b0d0:	0000aecd 	.word	0x0000aecd

0000b0d4 <gpio_set_pin_level>:
{
    b0d4:	b580      	push	{r7, lr}
    b0d6:	b082      	sub	sp, #8
    b0d8:	af00      	add	r7, sp, #0
    b0da:	4603      	mov	r3, r0
    b0dc:	460a      	mov	r2, r1
    b0de:	71fb      	strb	r3, [r7, #7]
    b0e0:	4613      	mov	r3, r2
    b0e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b0e4:	79fb      	ldrb	r3, [r7, #7]
    b0e6:	095b      	lsrs	r3, r3, #5
    b0e8:	b2d8      	uxtb	r0, r3
    b0ea:	79fb      	ldrb	r3, [r7, #7]
    b0ec:	f003 031f 	and.w	r3, r3, #31
    b0f0:	2201      	movs	r2, #1
    b0f2:	fa02 f303 	lsl.w	r3, r2, r3
    b0f6:	79ba      	ldrb	r2, [r7, #6]
    b0f8:	4619      	mov	r1, r3
    b0fa:	4b03      	ldr	r3, [pc, #12]	; (b108 <gpio_set_pin_level+0x34>)
    b0fc:	4798      	blx	r3
}
    b0fe:	bf00      	nop
    b100:	3708      	adds	r7, #8
    b102:	46bd      	mov	sp, r7
    b104:	bd80      	pop	{r7, pc}
    b106:	bf00      	nop
    b108:	0000afb5 	.word	0x0000afb5

0000b10c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b10c:	b580      	push	{r7, lr}
    b10e:	b082      	sub	sp, #8
    b110:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b112:	2100      	movs	r1, #0
    b114:	2008      	movs	r0, #8
    b116:	4b24      	ldr	r3, [pc, #144]	; (b1a8 <QSPI_N25Q256_exit_xip+0x9c>)
    b118:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b11a:	2100      	movs	r1, #0
    b11c:	202b      	movs	r0, #43	; 0x2b
    b11e:	4b22      	ldr	r3, [pc, #136]	; (b1a8 <QSPI_N25Q256_exit_xip+0x9c>)
    b120:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b122:	2100      	movs	r1, #0
    b124:	202a      	movs	r0, #42	; 0x2a
    b126:	4b20      	ldr	r3, [pc, #128]	; (b1a8 <QSPI_N25Q256_exit_xip+0x9c>)
    b128:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b12a:	2102      	movs	r1, #2
    b12c:	2008      	movs	r0, #8
    b12e:	4b1f      	ldr	r3, [pc, #124]	; (b1ac <QSPI_N25Q256_exit_xip+0xa0>)
    b130:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b132:	2102      	movs	r1, #2
    b134:	202b      	movs	r0, #43	; 0x2b
    b136:	4b1d      	ldr	r3, [pc, #116]	; (b1ac <QSPI_N25Q256_exit_xip+0xa0>)
    b138:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b13a:	2102      	movs	r1, #2
    b13c:	202a      	movs	r0, #42	; 0x2a
    b13e:	4b1b      	ldr	r3, [pc, #108]	; (b1ac <QSPI_N25Q256_exit_xip+0xa0>)
    b140:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b142:	2101      	movs	r1, #1
    b144:	2008      	movs	r0, #8
    b146:	4b1a      	ldr	r3, [pc, #104]	; (b1b0 <QSPI_N25Q256_exit_xip+0xa4>)
    b148:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b14a:	2100      	movs	r1, #0
    b14c:	202b      	movs	r0, #43	; 0x2b
    b14e:	4b18      	ldr	r3, [pc, #96]	; (b1b0 <QSPI_N25Q256_exit_xip+0xa4>)
    b150:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b152:	2100      	movs	r1, #0
    b154:	202a      	movs	r0, #42	; 0x2a
    b156:	4b16      	ldr	r3, [pc, #88]	; (b1b0 <QSPI_N25Q256_exit_xip+0xa4>)
    b158:	4798      	blx	r3

	delay_us(1);
    b15a:	2001      	movs	r0, #1
    b15c:	4b15      	ldr	r3, [pc, #84]	; (b1b4 <QSPI_N25Q256_exit_xip+0xa8>)
    b15e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b160:	2300      	movs	r3, #0
    b162:	607b      	str	r3, [r7, #4]
    b164:	e010      	b.n	b188 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b166:	2101      	movs	r1, #1
    b168:	202a      	movs	r0, #42	; 0x2a
    b16a:	4b11      	ldr	r3, [pc, #68]	; (b1b0 <QSPI_N25Q256_exit_xip+0xa4>)
    b16c:	4798      	blx	r3
		delay_us(1);
    b16e:	2001      	movs	r0, #1
    b170:	4b10      	ldr	r3, [pc, #64]	; (b1b4 <QSPI_N25Q256_exit_xip+0xa8>)
    b172:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b174:	2100      	movs	r1, #0
    b176:	202a      	movs	r0, #42	; 0x2a
    b178:	4b0d      	ldr	r3, [pc, #52]	; (b1b0 <QSPI_N25Q256_exit_xip+0xa4>)
    b17a:	4798      	blx	r3
		delay_us(1);
    b17c:	2001      	movs	r0, #1
    b17e:	4b0d      	ldr	r3, [pc, #52]	; (b1b4 <QSPI_N25Q256_exit_xip+0xa8>)
    b180:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	3301      	adds	r3, #1
    b186:	607b      	str	r3, [r7, #4]
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	2b06      	cmp	r3, #6
    b18c:	ddeb      	ble.n	b166 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b18e:	2101      	movs	r1, #1
    b190:	202b      	movs	r0, #43	; 0x2b
    b192:	4b07      	ldr	r3, [pc, #28]	; (b1b0 <QSPI_N25Q256_exit_xip+0xa4>)
    b194:	4798      	blx	r3
	delay_us(1);
    b196:	2001      	movs	r0, #1
    b198:	4b06      	ldr	r3, [pc, #24]	; (b1b4 <QSPI_N25Q256_exit_xip+0xa8>)
    b19a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b19c:	4b06      	ldr	r3, [pc, #24]	; (b1b8 <QSPI_N25Q256_exit_xip+0xac>)
    b19e:	4798      	blx	r3
}
    b1a0:	bf00      	nop
    b1a2:	3708      	adds	r7, #8
    b1a4:	46bd      	mov	sp, r7
    b1a6:	bd80      	pop	{r7, pc}
    b1a8:	0000b07d 	.word	0x0000b07d
    b1ac:	0000b09d 	.word	0x0000b09d
    b1b0:	0000b0d5 	.word	0x0000b0d5
    b1b4:	000020b1 	.word	0x000020b1
    b1b8:	000011a1 	.word	0x000011a1

0000b1bc <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b1bc:	b598      	push	{r3, r4, r7, lr}
    b1be:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b1c0:	4806      	ldr	r0, [pc, #24]	; (b1dc <spi_nor_flash_init+0x20>)
    b1c2:	4b07      	ldr	r3, [pc, #28]	; (b1e0 <spi_nor_flash_init+0x24>)
    b1c4:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b1c6:	2300      	movs	r3, #0
    b1c8:	4a06      	ldr	r2, [pc, #24]	; (b1e4 <spi_nor_flash_init+0x28>)
    b1ca:	4904      	ldr	r1, [pc, #16]	; (b1dc <spi_nor_flash_init+0x20>)
    b1cc:	4806      	ldr	r0, [pc, #24]	; (b1e8 <spi_nor_flash_init+0x2c>)
    b1ce:	4c07      	ldr	r4, [pc, #28]	; (b1ec <spi_nor_flash_init+0x30>)
    b1d0:	47a0      	blx	r4
    b1d2:	4602      	mov	r2, r0
    b1d4:	4b06      	ldr	r3, [pc, #24]	; (b1f0 <spi_nor_flash_init+0x34>)
    b1d6:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b1d8:	bf00      	nop
    b1da:	bd98      	pop	{r3, r4, r7, pc}
    b1dc:	2000ad88 	.word	0x2000ad88
    b1e0:	000025e9 	.word	0x000025e9
    b1e4:	0000b10d 	.word	0x0000b10d
    b1e8:	20000f88 	.word	0x20000f88
    b1ec:	0000b629 	.word	0x0000b629
    b1f0:	2000af88 	.word	0x2000af88

0000b1f4 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b1f4:	b580      	push	{r7, lr}
    b1f6:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b1f8:	4805      	ldr	r0, [pc, #20]	; (b210 <cdc_device_acm_init+0x1c>)
    b1fa:	4b06      	ldr	r3, [pc, #24]	; (b214 <cdc_device_acm_init+0x20>)
    b1fc:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b1fe:	4b06      	ldr	r3, [pc, #24]	; (b218 <cdc_device_acm_init+0x24>)
    b200:	4798      	blx	r3

	usbdc_start(single_desc);
    b202:	4806      	ldr	r0, [pc, #24]	; (b21c <cdc_device_acm_init+0x28>)
    b204:	4b06      	ldr	r3, [pc, #24]	; (b220 <cdc_device_acm_init+0x2c>)
    b206:	4798      	blx	r3
	usbdc_attach();
    b208:	4b06      	ldr	r3, [pc, #24]	; (b224 <cdc_device_acm_init+0x30>)
    b20a:	4798      	blx	r3
}
    b20c:	bf00      	nop
    b20e:	bd80      	pop	{r7, pc}
    b210:	20000fd8 	.word	0x20000fd8
    b214:	0000cd51 	.word	0x0000cd51
    b218:	0000bfc9 	.word	0x0000bfc9
    b21c:	20000200 	.word	0x20000200
    b220:	0000cded 	.word	0x0000cded
    b224:	0000ce3d 	.word	0x0000ce3d

0000b228 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b228:	b580      	push	{r7, lr}
    b22a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b22c:	4b01      	ldr	r3, [pc, #4]	; (b234 <usb_init+0xc>)
    b22e:	4798      	blx	r3
}
    b230:	bf00      	nop
    b232:	bd80      	pop	{r7, pc}
    b234:	0000b1f5 	.word	0x0000b1f5

0000b238 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b238:	b480      	push	{r7}
    b23a:	b085      	sub	sp, #20
    b23c:	af00      	add	r7, sp, #0
    b23e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b240:	f3ef 8310 	mrs	r3, PRIMASK
    b244:	60fb      	str	r3, [r7, #12]
  return(result);
    b246:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b248:	687b      	ldr	r3, [r7, #4]
    b24a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b24c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b24e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b252:	bf00      	nop
    b254:	3714      	adds	r7, #20
    b256:	46bd      	mov	sp, r7
    b258:	f85d 7b04 	ldr.w	r7, [sp], #4
    b25c:	4770      	bx	lr

0000b25e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b25e:	b480      	push	{r7}
    b260:	b085      	sub	sp, #20
    b262:	af00      	add	r7, sp, #0
    b264:	6078      	str	r0, [r7, #4]
    b266:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	681b      	ldr	r3, [r3, #0]
    b26e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b270:	68fb      	ldr	r3, [r7, #12]
    b272:	f383 8810 	msr	PRIMASK, r3
}
    b276:	bf00      	nop
    b278:	3714      	adds	r7, #20
    b27a:	46bd      	mov	sp, r7
    b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b280:	4770      	bx	lr
	...

0000b284 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b284:	b580      	push	{r7, lr}
    b286:	b08c      	sub	sp, #48	; 0x30
    b288:	af00      	add	r7, sp, #0
    b28a:	6078      	str	r0, [r7, #4]
    b28c:	460b      	mov	r3, r1
    b28e:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	681b      	ldr	r3, [r3, #0]
    b298:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b29a:	f107 030c 	add.w	r3, r7, #12
    b29e:	2200      	movs	r2, #0
    b2a0:	601a      	str	r2, [r3, #0]
    b2a2:	605a      	str	r2, [r3, #4]
    b2a4:	609a      	str	r2, [r3, #8]
    b2a6:	60da      	str	r2, [r3, #12]
    b2a8:	611a      	str	r2, [r3, #16]
    b2aa:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2ae:	7b1b      	ldrb	r3, [r3, #12]
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d001      	beq.n	b2b8 <n25q256a_xip_confirm+0x34>
    b2b4:	2206      	movs	r2, #6
    b2b6:	e000      	b.n	b2ba <n25q256a_xip_confirm+0x36>
    b2b8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b2ba:	7b3b      	ldrb	r3, [r7, #12]
    b2bc:	f362 0302 	bfi	r3, r2, #0, #3
    b2c0:	733b      	strb	r3, [r7, #12]
    b2c2:	7b3b      	ldrb	r3, [r7, #12]
    b2c4:	f043 0310 	orr.w	r3, r3, #16
    b2c8:	733b      	strb	r3, [r7, #12]
    b2ca:	7b3b      	ldrb	r3, [r7, #12]
    b2cc:	f043 0320 	orr.w	r3, r3, #32
    b2d0:	733b      	strb	r3, [r7, #12]
    b2d2:	7b3b      	ldrb	r3, [r7, #12]
    b2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b2d8:	733b      	strb	r3, [r7, #12]
    b2da:	7b3b      	ldrb	r3, [r7, #12]
    b2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2e0:	733b      	strb	r3, [r7, #12]
    b2e2:	7b7b      	ldrb	r3, [r7, #13]
    b2e4:	f043 0303 	orr.w	r3, r3, #3
    b2e8:	737b      	strb	r3, [r7, #13]
    b2ea:	7b7b      	ldrb	r3, [r7, #13]
    b2ec:	2201      	movs	r2, #1
    b2ee:	f362 1305 	bfi	r3, r2, #4, #2
    b2f2:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2f6:	7b1b      	ldrb	r3, [r3, #12]
    b2f8:	2b00      	cmp	r3, #0
    b2fa:	d001      	beq.n	b300 <n25q256a_xip_confirm+0x7c>
    b2fc:	2208      	movs	r2, #8
    b2fe:	e000      	b.n	b302 <n25q256a_xip_confirm+0x7e>
    b300:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b302:	7bbb      	ldrb	r3, [r7, #14]
    b304:	f362 0304 	bfi	r3, r2, #0, #5
    b308:	73bb      	strb	r3, [r7, #14]
    b30a:	230b      	movs	r3, #11
    b30c:	743b      	strb	r3, [r7, #16]
    b30e:	78fb      	ldrb	r3, [r7, #3]
    b310:	2b00      	cmp	r3, #0
    b312:	d001      	beq.n	b318 <n25q256a_xip_confirm+0x94>
    b314:	2300      	movs	r3, #0
    b316:	e000      	b.n	b31a <n25q256a_xip_confirm+0x96>
    b318:	23ff      	movs	r3, #255	; 0xff
    b31a:	747b      	strb	r3, [r7, #17]
    b31c:	2301      	movs	r3, #1
    b31e:	61bb      	str	r3, [r7, #24]
    b320:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b324:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b326:	f107 030c 	add.w	r3, r7, #12
    b32a:	4619      	mov	r1, r3
    b32c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b32e:	4b07      	ldr	r3, [pc, #28]	; (b34c <n25q256a_xip_confirm+0xc8>)
    b330:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b332:	78fb      	ldrb	r3, [r7, #3]
    b334:	2b00      	cmp	r3, #0
    b336:	d001      	beq.n	b33c <n25q256a_xip_confirm+0xb8>
    b338:	2202      	movs	r2, #2
    b33a:	e000      	b.n	b33e <n25q256a_xip_confirm+0xba>
    b33c:	2201      	movs	r2, #1
    b33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b340:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b342:	2300      	movs	r3, #0
}
    b344:	4618      	mov	r0, r3
    b346:	3730      	adds	r7, #48	; 0x30
    b348:	46bd      	mov	sp, r7
    b34a:	bd80      	pop	{r7, pc}
    b34c:	00002661 	.word	0x00002661

0000b350 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b350:	b580      	push	{r7, lr}
    b352:	b08c      	sub	sp, #48	; 0x30
    b354:	af00      	add	r7, sp, #0
    b356:	6078      	str	r0, [r7, #4]
    b358:	460b      	mov	r3, r1
    b35a:	70fb      	strb	r3, [r7, #3]
    b35c:	4613      	mov	r3, r2
    b35e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b360:	2300      	movs	r3, #0
    b362:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b368:	687b      	ldr	r3, [r7, #4]
    b36a:	681b      	ldr	r3, [r3, #0]
    b36c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b36e:	f107 030c 	add.w	r3, r7, #12
    b372:	2200      	movs	r2, #0
    b374:	601a      	str	r2, [r3, #0]
    b376:	605a      	str	r2, [r3, #4]
    b378:	609a      	str	r2, [r3, #8]
    b37a:	60da      	str	r2, [r3, #12]
    b37c:	611a      	str	r2, [r3, #16]
    b37e:	615a      	str	r2, [r3, #20]
    b380:	78fb      	ldrb	r3, [r7, #3]
    b382:	f003 0307 	and.w	r3, r3, #7
    b386:	b2da      	uxtb	r2, r3
    b388:	7b3b      	ldrb	r3, [r7, #12]
    b38a:	f362 0302 	bfi	r3, r2, #0, #3
    b38e:	733b      	strb	r3, [r7, #12]
    b390:	7b3b      	ldrb	r3, [r7, #12]
    b392:	f043 0310 	orr.w	r3, r3, #16
    b396:	733b      	strb	r3, [r7, #12]
    b398:	7b3b      	ldrb	r3, [r7, #12]
    b39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b39e:	733b      	strb	r3, [r7, #12]
    b3a0:	78bb      	ldrb	r3, [r7, #2]
    b3a2:	743b      	strb	r3, [r7, #16]
    b3a4:	2301      	movs	r3, #1
    b3a6:	61bb      	str	r3, [r7, #24]
    b3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b3ac:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3b0:	7b5b      	ldrb	r3, [r3, #13]
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	d003      	beq.n	b3be <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b3b6:	2100      	movs	r1, #0
    b3b8:	6878      	ldr	r0, [r7, #4]
    b3ba:	4b0a      	ldr	r3, [pc, #40]	; (b3e4 <n25q256a_read_reg+0x94>)
    b3bc:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b3be:	f107 030c 	add.w	r3, r7, #12
    b3c2:	4619      	mov	r1, r3
    b3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b3c6:	4b08      	ldr	r3, [pc, #32]	; (b3e8 <n25q256a_read_reg+0x98>)
    b3c8:	4798      	blx	r3
	if (n25q->xip_mode) {
    b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3cc:	7b5b      	ldrb	r3, [r3, #13]
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d003      	beq.n	b3da <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b3d2:	2101      	movs	r1, #1
    b3d4:	6878      	ldr	r0, [r7, #4]
    b3d6:	4b03      	ldr	r3, [pc, #12]	; (b3e4 <n25q256a_read_reg+0x94>)
    b3d8:	4798      	blx	r3
	}
	return status;
    b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b3dc:	4618      	mov	r0, r3
    b3de:	3730      	adds	r7, #48	; 0x30
    b3e0:	46bd      	mov	sp, r7
    b3e2:	bd80      	pop	{r7, pc}
    b3e4:	0000b285 	.word	0x0000b285
    b3e8:	00002661 	.word	0x00002661

0000b3ec <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b3ec:	b580      	push	{r7, lr}
    b3ee:	b08c      	sub	sp, #48	; 0x30
    b3f0:	af00      	add	r7, sp, #0
    b3f2:	60f8      	str	r0, [r7, #12]
    b3f4:	607b      	str	r3, [r7, #4]
    b3f6:	460b      	mov	r3, r1
    b3f8:	72fb      	strb	r3, [r7, #11]
    b3fa:	4613      	mov	r3, r2
    b3fc:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b3fe:	68fb      	ldr	r3, [r7, #12]
    b400:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b402:	68fb      	ldr	r3, [r7, #12]
    b404:	681b      	ldr	r3, [r3, #0]
    b406:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b408:	f107 0310 	add.w	r3, r7, #16
    b40c:	2200      	movs	r2, #0
    b40e:	601a      	str	r2, [r3, #0]
    b410:	605a      	str	r2, [r3, #4]
    b412:	609a      	str	r2, [r3, #8]
    b414:	60da      	str	r2, [r3, #12]
    b416:	611a      	str	r2, [r3, #16]
    b418:	615a      	str	r2, [r3, #20]
    b41a:	7afb      	ldrb	r3, [r7, #11]
    b41c:	f003 0307 	and.w	r3, r3, #7
    b420:	b2da      	uxtb	r2, r3
    b422:	7c3b      	ldrb	r3, [r7, #16]
    b424:	f362 0302 	bfi	r3, r2, #0, #3
    b428:	743b      	strb	r3, [r7, #16]
    b42a:	7c3b      	ldrb	r3, [r7, #16]
    b42c:	f043 0310 	orr.w	r3, r3, #16
    b430:	743b      	strb	r3, [r7, #16]
    b432:	7c3b      	ldrb	r3, [r7, #16]
    b434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b438:	743b      	strb	r3, [r7, #16]
    b43a:	7c7b      	ldrb	r3, [r7, #17]
    b43c:	2202      	movs	r2, #2
    b43e:	f362 1305 	bfi	r3, r2, #4, #2
    b442:	747b      	strb	r3, [r7, #17]
    b444:	7abb      	ldrb	r3, [r7, #10]
    b446:	753b      	strb	r3, [r7, #20]
    b448:	2301      	movs	r3, #1
    b44a:	61fb      	str	r3, [r7, #28]
    b44c:	1d3b      	adds	r3, r7, #4
    b44e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b452:	7b5b      	ldrb	r3, [r3, #13]
    b454:	2b00      	cmp	r3, #0
    b456:	d003      	beq.n	b460 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b458:	2100      	movs	r1, #0
    b45a:	68f8      	ldr	r0, [r7, #12]
    b45c:	4b09      	ldr	r3, [pc, #36]	; (b484 <n25q256a_write_reg+0x98>)
    b45e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b460:	f107 0310 	add.w	r3, r7, #16
    b464:	4619      	mov	r1, r3
    b466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b468:	4b07      	ldr	r3, [pc, #28]	; (b488 <n25q256a_write_reg+0x9c>)
    b46a:	4798      	blx	r3
	if (n25q->xip_mode) {
    b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b46e:	7b5b      	ldrb	r3, [r3, #13]
    b470:	2b00      	cmp	r3, #0
    b472:	d003      	beq.n	b47c <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b474:	2101      	movs	r1, #1
    b476:	68f8      	ldr	r0, [r7, #12]
    b478:	4b02      	ldr	r3, [pc, #8]	; (b484 <n25q256a_write_reg+0x98>)
    b47a:	4798      	blx	r3
	}
}
    b47c:	bf00      	nop
    b47e:	3730      	adds	r7, #48	; 0x30
    b480:	46bd      	mov	sp, r7
    b482:	bd80      	pop	{r7, pc}
    b484:	0000b285 	.word	0x0000b285
    b488:	00002661 	.word	0x00002661

0000b48c <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b48c:	b580      	push	{r7, lr}
    b48e:	b090      	sub	sp, #64	; 0x40
    b490:	af00      	add	r7, sp, #0
    b492:	6078      	str	r0, [r7, #4]
    b494:	460b      	mov	r3, r1
    b496:	70fb      	strb	r3, [r7, #3]
    b498:	4613      	mov	r3, r2
    b49a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b49c:	687b      	ldr	r3, [r7, #4]
    b49e:	681b      	ldr	r3, [r3, #0]
    b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b4a2:	78bb      	ldrb	r3, [r7, #2]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d001      	beq.n	b4ac <n25q256a_write_enable+0x20>
    b4a8:	2306      	movs	r3, #6
    b4aa:	e000      	b.n	b4ae <n25q256a_write_enable+0x22>
    b4ac:	2304      	movs	r3, #4
    b4ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b4b2:	f107 0320 	add.w	r3, r7, #32
    b4b6:	2200      	movs	r2, #0
    b4b8:	601a      	str	r2, [r3, #0]
    b4ba:	605a      	str	r2, [r3, #4]
    b4bc:	609a      	str	r2, [r3, #8]
    b4be:	60da      	str	r2, [r3, #12]
    b4c0:	611a      	str	r2, [r3, #16]
    b4c2:	615a      	str	r2, [r3, #20]
    b4c4:	78fb      	ldrb	r3, [r7, #3]
    b4c6:	f003 0307 	and.w	r3, r3, #7
    b4ca:	b2da      	uxtb	r2, r3
    b4cc:	f897 3020 	ldrb.w	r3, [r7, #32]
    b4d0:	f362 0302 	bfi	r3, r2, #0, #3
    b4d4:	f887 3020 	strb.w	r3, [r7, #32]
    b4d8:	f897 3020 	ldrb.w	r3, [r7, #32]
    b4dc:	f043 0310 	orr.w	r3, r3, #16
    b4e0:	f887 3020 	strb.w	r3, [r7, #32]
    b4e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b4e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b4ec:	f107 0308 	add.w	r3, r7, #8
    b4f0:	2200      	movs	r2, #0
    b4f2:	601a      	str	r2, [r3, #0]
    b4f4:	605a      	str	r2, [r3, #4]
    b4f6:	609a      	str	r2, [r3, #8]
    b4f8:	60da      	str	r2, [r3, #12]
    b4fa:	611a      	str	r2, [r3, #16]
    b4fc:	615a      	str	r2, [r3, #20]
    b4fe:	78fb      	ldrb	r3, [r7, #3]
    b500:	f003 0307 	and.w	r3, r3, #7
    b504:	b2da      	uxtb	r2, r3
    b506:	7a3b      	ldrb	r3, [r7, #8]
    b508:	f362 0302 	bfi	r3, r2, #0, #3
    b50c:	723b      	strb	r3, [r7, #8]
    b50e:	7a3b      	ldrb	r3, [r7, #8]
    b510:	f043 0310 	orr.w	r3, r3, #16
    b514:	723b      	strb	r3, [r7, #8]
    b516:	7a3b      	ldrb	r3, [r7, #8]
    b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b51c:	723b      	strb	r3, [r7, #8]
    b51e:	2305      	movs	r3, #5
    b520:	733b      	strb	r3, [r7, #12]
    b522:	2301      	movs	r3, #1
    b524:	617b      	str	r3, [r7, #20]
    b526:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b52a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b52c:	f107 0320 	add.w	r3, r7, #32
    b530:	4619      	mov	r1, r3
    b532:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b534:	4b08      	ldr	r3, [pc, #32]	; (b558 <n25q256a_write_enable+0xcc>)
    b536:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b538:	f107 0308 	add.w	r3, r7, #8
    b53c:	4619      	mov	r1, r3
    b53e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b540:	4b05      	ldr	r3, [pc, #20]	; (b558 <n25q256a_write_enable+0xcc>)
    b542:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b544:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b548:	f003 0302 	and.w	r3, r3, #2
    b54c:	2b00      	cmp	r3, #0
    b54e:	d0ed      	beq.n	b52c <n25q256a_write_enable+0xa0>
}
    b550:	bf00      	nop
    b552:	3740      	adds	r7, #64	; 0x40
    b554:	46bd      	mov	sp, r7
    b556:	bd80      	pop	{r7, pc}
    b558:	00002661 	.word	0x00002661

0000b55c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b55c:	b590      	push	{r4, r7, lr}
    b55e:	b087      	sub	sp, #28
    b560:	af00      	add	r7, sp, #0
    b562:	6078      	str	r0, [r7, #4]
    b564:	460b      	mov	r3, r1
    b566:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b56c:	68fb      	ldr	r3, [r7, #12]
    b56e:	7b1b      	ldrb	r3, [r3, #12]
    b570:	2b00      	cmp	r3, #0
    b572:	d001      	beq.n	b578 <n25q256a_switch_mode+0x1c>
    b574:	2306      	movs	r3, #6
    b576:	e000      	b.n	b57a <n25q256a_switch_mode+0x1e>
    b578:	2300      	movs	r3, #0
    b57a:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b57c:	7afb      	ldrb	r3, [r7, #11]
    b57e:	2265      	movs	r2, #101	; 0x65
    b580:	4619      	mov	r1, r3
    b582:	6878      	ldr	r0, [r7, #4]
    b584:	4b25      	ldr	r3, [pc, #148]	; (b61c <n25q256a_switch_mode+0xc0>)
    b586:	4798      	blx	r3
    b588:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b58a:	2300      	movs	r3, #0
    b58c:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b58e:	68fb      	ldr	r3, [r7, #12]
    b590:	7b1b      	ldrb	r3, [r3, #12]
    b592:	78fa      	ldrb	r2, [r7, #3]
    b594:	429a      	cmp	r2, r3
    b596:	d03d      	beq.n	b614 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b598:	78fb      	ldrb	r3, [r7, #3]
    b59a:	2b00      	cmp	r3, #0
    b59c:	d00b      	beq.n	b5b6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b59e:	697b      	ldr	r3, [r7, #20]
    b5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	d011      	beq.n	b5cc <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b5a8:	697b      	ldr	r3, [r7, #20]
    b5aa:	f003 031f 	and.w	r3, r3, #31
    b5ae:	617b      	str	r3, [r7, #20]
			modify = 1;
    b5b0:	2301      	movs	r3, #1
    b5b2:	74fb      	strb	r3, [r7, #19]
    b5b4:	e00a      	b.n	b5cc <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b5b6:	697b      	ldr	r3, [r7, #20]
    b5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d105      	bne.n	b5cc <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b5c0:	697b      	ldr	r3, [r7, #20]
    b5c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b5c6:	617b      	str	r3, [r7, #20]
			modify = 1;
    b5c8:	2301      	movs	r3, #1
    b5ca:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b5cc:	7cfb      	ldrb	r3, [r7, #19]
    b5ce:	2b00      	cmp	r3, #0
    b5d0:	d021      	beq.n	b616 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b5d2:	68fb      	ldr	r3, [r7, #12]
    b5d4:	78fa      	ldrb	r2, [r7, #3]
    b5d6:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b5d8:	7afb      	ldrb	r3, [r7, #11]
    b5da:	2201      	movs	r2, #1
    b5dc:	4619      	mov	r1, r3
    b5de:	6878      	ldr	r0, [r7, #4]
    b5e0:	4b0f      	ldr	r3, [pc, #60]	; (b620 <n25q256a_switch_mode+0xc4>)
    b5e2:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b5e4:	7af9      	ldrb	r1, [r7, #11]
    b5e6:	697b      	ldr	r3, [r7, #20]
    b5e8:	2261      	movs	r2, #97	; 0x61
    b5ea:	6878      	ldr	r0, [r7, #4]
    b5ec:	4c0d      	ldr	r4, [pc, #52]	; (b624 <n25q256a_switch_mode+0xc8>)
    b5ee:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b5f0:	78fb      	ldrb	r3, [r7, #3]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	d001      	beq.n	b5fa <n25q256a_switch_mode+0x9e>
    b5f6:	2306      	movs	r3, #6
    b5f8:	e000      	b.n	b5fc <n25q256a_switch_mode+0xa0>
    b5fa:	2300      	movs	r3, #0
    b5fc:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b5fe:	7afb      	ldrb	r3, [r7, #11]
    b600:	2265      	movs	r2, #101	; 0x65
    b602:	4619      	mov	r1, r3
    b604:	6878      	ldr	r0, [r7, #4]
    b606:	4b05      	ldr	r3, [pc, #20]	; (b61c <n25q256a_switch_mode+0xc0>)
    b608:	4798      	blx	r3
    b60a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b60c:	68fb      	ldr	r3, [r7, #12]
    b60e:	78fa      	ldrb	r2, [r7, #3]
    b610:	731a      	strb	r2, [r3, #12]
    b612:	e000      	b.n	b616 <n25q256a_switch_mode+0xba>
		return;
    b614:	bf00      	nop
	}
}
    b616:	371c      	adds	r7, #28
    b618:	46bd      	mov	sp, r7
    b61a:	bd90      	pop	{r4, r7, pc}
    b61c:	0000b351 	.word	0x0000b351
    b620:	0000b48d 	.word	0x0000b48d
    b624:	0000b3ed 	.word	0x0000b3ed

0000b628 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b628:	b580      	push	{r7, lr}
    b62a:	b086      	sub	sp, #24
    b62c:	af00      	add	r7, sp, #0
    b62e:	60f8      	str	r0, [r7, #12]
    b630:	60b9      	str	r1, [r7, #8]
    b632:	607a      	str	r2, [r7, #4]
    b634:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b636:	68fb      	ldr	r3, [r7, #12]
    b638:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b63a:	4a0c      	ldr	r2, [pc, #48]	; (b66c <n25q256a_construct+0x44>)
    b63c:	68b9      	ldr	r1, [r7, #8]
    b63e:	68f8      	ldr	r0, [r7, #12]
    b640:	4b0b      	ldr	r3, [pc, #44]	; (b670 <n25q256a_construct+0x48>)
    b642:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b644:	697b      	ldr	r3, [r7, #20]
    b646:	2200      	movs	r2, #0
    b648:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b64a:	697b      	ldr	r3, [r7, #20]
    b64c:	2200      	movs	r2, #0
    b64e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b650:	697b      	ldr	r3, [r7, #20]
    b652:	687a      	ldr	r2, [r7, #4]
    b654:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b656:	78fb      	ldrb	r3, [r7, #3]
    b658:	4619      	mov	r1, r3
    b65a:	68f8      	ldr	r0, [r7, #12]
    b65c:	4b05      	ldr	r3, [pc, #20]	; (b674 <n25q256a_construct+0x4c>)
    b65e:	4798      	blx	r3
	return me;
    b660:	68fb      	ldr	r3, [r7, #12]
}
    b662:	4618      	mov	r0, r3
    b664:	3718      	adds	r7, #24
    b666:	46bd      	mov	sp, r7
    b668:	bd80      	pop	{r7, pc}
    b66a:	bf00      	nop
    b66c:	0001240c 	.word	0x0001240c
    b670:	0000bb05 	.word	0x0000bb05
    b674:	0000b55d 	.word	0x0000b55d

0000b678 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b678:	b580      	push	{r7, lr}
    b67a:	b08c      	sub	sp, #48	; 0x30
    b67c:	af00      	add	r7, sp, #0
    b67e:	60f8      	str	r0, [r7, #12]
    b680:	60b9      	str	r1, [r7, #8]
    b682:	607a      	str	r2, [r7, #4]
    b684:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b686:	68fb      	ldr	r3, [r7, #12]
    b688:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b68a:	68fb      	ldr	r3, [r7, #12]
    b68c:	681b      	ldr	r3, [r3, #0]
    b68e:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b690:	f107 0310 	add.w	r3, r7, #16
    b694:	2200      	movs	r2, #0
    b696:	601a      	str	r2, [r3, #0]
    b698:	605a      	str	r2, [r3, #4]
    b69a:	609a      	str	r2, [r3, #8]
    b69c:	60da      	str	r2, [r3, #12]
    b69e:	611a      	str	r2, [r3, #16]
    b6a0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6a4:	7b1b      	ldrb	r3, [r3, #12]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d001      	beq.n	b6ae <n25q256a_read+0x36>
    b6aa:	2206      	movs	r2, #6
    b6ac:	e000      	b.n	b6b0 <n25q256a_read+0x38>
    b6ae:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b6b0:	7c3b      	ldrb	r3, [r7, #16]
    b6b2:	f362 0302 	bfi	r3, r2, #0, #3
    b6b6:	743b      	strb	r3, [r7, #16]
    b6b8:	7c3b      	ldrb	r3, [r7, #16]
    b6ba:	f043 0310 	orr.w	r3, r3, #16
    b6be:	743b      	strb	r3, [r7, #16]
    b6c0:	7c3b      	ldrb	r3, [r7, #16]
    b6c2:	f043 0320 	orr.w	r3, r3, #32
    b6c6:	743b      	strb	r3, [r7, #16]
    b6c8:	7c3b      	ldrb	r3, [r7, #16]
    b6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6ce:	743b      	strb	r3, [r7, #16]
    b6d0:	7c7b      	ldrb	r3, [r7, #17]
    b6d2:	2201      	movs	r2, #1
    b6d4:	f362 1305 	bfi	r3, r2, #4, #2
    b6d8:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6dc:	7b1b      	ldrb	r3, [r3, #12]
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d001      	beq.n	b6e6 <n25q256a_read+0x6e>
    b6e2:	220a      	movs	r2, #10
    b6e4:	e000      	b.n	b6e8 <n25q256a_read+0x70>
    b6e6:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b6e8:	7cbb      	ldrb	r3, [r7, #18]
    b6ea:	f362 0304 	bfi	r3, r2, #0, #5
    b6ee:	74bb      	strb	r3, [r7, #18]
    b6f0:	230b      	movs	r3, #11
    b6f2:	753b      	strb	r3, [r7, #20]
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	61bb      	str	r3, [r7, #24]
    b6f8:	683b      	ldr	r3, [r7, #0]
    b6fa:	61fb      	str	r3, [r7, #28]
    b6fc:	68bb      	ldr	r3, [r7, #8]
    b6fe:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b700:	f107 0310 	add.w	r3, r7, #16
    b704:	4619      	mov	r1, r3
    b706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b708:	4b03      	ldr	r3, [pc, #12]	; (b718 <n25q256a_read+0xa0>)
    b70a:	4798      	blx	r3
	return ERR_NONE;
    b70c:	2300      	movs	r3, #0
}
    b70e:	4618      	mov	r0, r3
    b710:	3730      	adds	r7, #48	; 0x30
    b712:	46bd      	mov	sp, r7
    b714:	bd80      	pop	{r7, pc}
    b716:	bf00      	nop
    b718:	00002661 	.word	0x00002661

0000b71c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b71c:	b580      	push	{r7, lr}
    b71e:	b08c      	sub	sp, #48	; 0x30
    b720:	af00      	add	r7, sp, #0
    b722:	60f8      	str	r0, [r7, #12]
    b724:	60b9      	str	r1, [r7, #8]
    b726:	607a      	str	r2, [r7, #4]
    b728:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b72a:	68fb      	ldr	r3, [r7, #12]
    b72c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b72e:	68fb      	ldr	r3, [r7, #12]
    b730:	681b      	ldr	r3, [r3, #0]
    b732:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b734:	f107 0310 	add.w	r3, r7, #16
    b738:	2200      	movs	r2, #0
    b73a:	601a      	str	r2, [r3, #0]
    b73c:	605a      	str	r2, [r3, #4]
    b73e:	609a      	str	r2, [r3, #8]
    b740:	60da      	str	r2, [r3, #12]
    b742:	611a      	str	r2, [r3, #16]
    b744:	615a      	str	r2, [r3, #20]
    b746:	7c3b      	ldrb	r3, [r7, #16]
    b748:	f043 0310 	orr.w	r3, r3, #16
    b74c:	743b      	strb	r3, [r7, #16]
    b74e:	7c3b      	ldrb	r3, [r7, #16]
    b750:	f043 0320 	orr.w	r3, r3, #32
    b754:	743b      	strb	r3, [r7, #16]
    b756:	7c3b      	ldrb	r3, [r7, #16]
    b758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b75c:	743b      	strb	r3, [r7, #16]
    b75e:	7c7b      	ldrb	r3, [r7, #17]
    b760:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b764:	747b      	strb	r3, [r7, #17]
    b766:	2302      	movs	r3, #2
    b768:	753b      	strb	r3, [r7, #20]
    b76a:	687b      	ldr	r3, [r7, #4]
    b76c:	61bb      	str	r3, [r7, #24]
    b76e:	683b      	ldr	r3, [r7, #0]
    b770:	61fb      	str	r3, [r7, #28]
    b772:	68bb      	ldr	r3, [r7, #8]
    b774:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b778:	7b1b      	ldrb	r3, [r3, #12]
    b77a:	2b00      	cmp	r3, #0
    b77c:	d001      	beq.n	b782 <n25q256a_write+0x66>
    b77e:	2206      	movs	r2, #6
    b780:	e000      	b.n	b784 <n25q256a_write+0x68>
    b782:	2200      	movs	r2, #0
    b784:	7c3b      	ldrb	r3, [r7, #16]
    b786:	f362 0302 	bfi	r3, r2, #0, #3
    b78a:	743b      	strb	r3, [r7, #16]
	while (length) {
    b78c:	e035      	b.n	b7fa <n25q256a_write+0xde>
		cmd.address = address;
    b78e:	687b      	ldr	r3, [r7, #4]
    b790:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b792:	683b      	ldr	r3, [r7, #0]
    b794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b798:	d802      	bhi.n	b7a0 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b79a:	683b      	ldr	r3, [r7, #0]
    b79c:	61fb      	str	r3, [r7, #28]
    b79e:	e002      	b.n	b7a6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b7a0:	f44f 7380 	mov.w	r3, #256	; 0x100
    b7a4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b7a6:	7c3b      	ldrb	r3, [r7, #16]
    b7a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7ac:	b2db      	uxtb	r3, r3
    b7ae:	2201      	movs	r2, #1
    b7b0:	4619      	mov	r1, r3
    b7b2:	68f8      	ldr	r0, [r7, #12]
    b7b4:	4b19      	ldr	r3, [pc, #100]	; (b81c <n25q256a_write+0x100>)
    b7b6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b7b8:	f107 0310 	add.w	r3, r7, #16
    b7bc:	4619      	mov	r1, r3
    b7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b7c0:	4b17      	ldr	r3, [pc, #92]	; (b820 <n25q256a_write+0x104>)
    b7c2:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b7c4:	bf00      	nop
    b7c6:	7c3b      	ldrb	r3, [r7, #16]
    b7c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7cc:	b2db      	uxtb	r3, r3
    b7ce:	2270      	movs	r2, #112	; 0x70
    b7d0:	4619      	mov	r1, r3
    b7d2:	68f8      	ldr	r0, [r7, #12]
    b7d4:	4b13      	ldr	r3, [pc, #76]	; (b824 <n25q256a_write+0x108>)
    b7d6:	4798      	blx	r3
    b7d8:	4603      	mov	r3, r0
    b7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7de:	2b00      	cmp	r3, #0
    b7e0:	d0f1      	beq.n	b7c6 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b7e2:	6a3a      	ldr	r2, [r7, #32]
    b7e4:	69fb      	ldr	r3, [r7, #28]
    b7e6:	4413      	add	r3, r2
    b7e8:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b7ea:	69fb      	ldr	r3, [r7, #28]
    b7ec:	683a      	ldr	r2, [r7, #0]
    b7ee:	1ad3      	subs	r3, r2, r3
    b7f0:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b7f2:	69fb      	ldr	r3, [r7, #28]
    b7f4:	687a      	ldr	r2, [r7, #4]
    b7f6:	4413      	add	r3, r2
    b7f8:	607b      	str	r3, [r7, #4]
	while (length) {
    b7fa:	683b      	ldr	r3, [r7, #0]
    b7fc:	2b00      	cmp	r3, #0
    b7fe:	d1c6      	bne.n	b78e <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b802:	7b5b      	ldrb	r3, [r3, #13]
    b804:	2b00      	cmp	r3, #0
    b806:	d003      	beq.n	b810 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b808:	2101      	movs	r1, #1
    b80a:	68f8      	ldr	r0, [r7, #12]
    b80c:	4b06      	ldr	r3, [pc, #24]	; (b828 <n25q256a_write+0x10c>)
    b80e:	4798      	blx	r3
	}
	return ERR_NONE;
    b810:	2300      	movs	r3, #0
}
    b812:	4618      	mov	r0, r3
    b814:	3730      	adds	r7, #48	; 0x30
    b816:	46bd      	mov	sp, r7
    b818:	bd80      	pop	{r7, pc}
    b81a:	bf00      	nop
    b81c:	0000b48d 	.word	0x0000b48d
    b820:	00002661 	.word	0x00002661
    b824:	0000b351 	.word	0x0000b351
    b828:	0000b285 	.word	0x0000b285

0000b82c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b82c:	b580      	push	{r7, lr}
    b82e:	b090      	sub	sp, #64	; 0x40
    b830:	af00      	add	r7, sp, #0
    b832:	60f8      	str	r0, [r7, #12]
    b834:	60b9      	str	r1, [r7, #8]
    b836:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b838:	68fb      	ldr	r3, [r7, #12]
    b83a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b83c:	68fb      	ldr	r3, [r7, #12]
    b83e:	681b      	ldr	r3, [r3, #0]
    b840:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b842:	f107 0314 	add.w	r3, r7, #20
    b846:	2200      	movs	r2, #0
    b848:	601a      	str	r2, [r3, #0]
    b84a:	605a      	str	r2, [r3, #4]
    b84c:	609a      	str	r2, [r3, #8]
    b84e:	60da      	str	r2, [r3, #12]
    b850:	611a      	str	r2, [r3, #16]
    b852:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b856:	7b1b      	ldrb	r3, [r3, #12]
    b858:	2b00      	cmp	r3, #0
    b85a:	d001      	beq.n	b860 <n25q256a_erase+0x34>
    b85c:	2206      	movs	r2, #6
    b85e:	e000      	b.n	b862 <n25q256a_erase+0x36>
    b860:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b862:	7d3b      	ldrb	r3, [r7, #20]
    b864:	f362 0302 	bfi	r3, r2, #0, #3
    b868:	753b      	strb	r3, [r7, #20]
    b86a:	7d3b      	ldrb	r3, [r7, #20]
    b86c:	f043 0310 	orr.w	r3, r3, #16
    b870:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b872:	687b      	ldr	r3, [r7, #4]
    b874:	4a56      	ldr	r2, [pc, #344]	; (b9d0 <n25q256a_erase+0x1a4>)
    b876:	4293      	cmp	r3, r2
    b878:	bf94      	ite	ls
    b87a:	2301      	movls	r3, #1
    b87c:	2300      	movhi	r3, #0
    b87e:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b880:	7d3b      	ldrb	r3, [r7, #20]
    b882:	f362 1345 	bfi	r3, r2, #5, #1
    b886:	753b      	strb	r3, [r7, #20]
    b888:	7d7b      	ldrb	r3, [r7, #21]
    b88a:	2202      	movs	r2, #2
    b88c:	f362 1305 	bfi	r3, r2, #4, #2
    b890:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b892:	68bb      	ldr	r3, [r7, #8]
    b894:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b896:	687b      	ldr	r3, [r7, #4]
    b898:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b89a:	2300      	movs	r3, #0
    b89c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b89e:	687b      	ldr	r3, [r7, #4]
    b8a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d104      	bne.n	b8b2 <n25q256a_erase+0x86>
    b8a8:	68bb      	ldr	r3, [r7, #8]
    b8aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b8ae:	2b00      	cmp	r3, #0
    b8b0:	d002      	beq.n	b8b8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b8b2:	f06f 030c 	mvn.w	r3, #12
    b8b6:	e087      	b.n	b9c8 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b8b8:	687b      	ldr	r3, [r7, #4]
    b8ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b8be:	d368      	bcc.n	b992 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b8c0:	23c7      	movs	r3, #199	; 0xc7
    b8c2:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b8c4:	7d3b      	ldrb	r3, [r7, #20]
    b8c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8ca:	b2db      	uxtb	r3, r3
    b8cc:	2201      	movs	r2, #1
    b8ce:	4619      	mov	r1, r3
    b8d0:	68f8      	ldr	r0, [r7, #12]
    b8d2:	4b40      	ldr	r3, [pc, #256]	; (b9d4 <n25q256a_erase+0x1a8>)
    b8d4:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b8d6:	f107 0314 	add.w	r3, r7, #20
    b8da:	4619      	mov	r1, r3
    b8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b8de:	4b3e      	ldr	r3, [pc, #248]	; (b9d8 <n25q256a_erase+0x1ac>)
    b8e0:	4798      	blx	r3
    b8e2:	e059      	b.n	b998 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8e6:	b29b      	uxth	r3, r3
    b8e8:	2b00      	cmp	r3, #0
    b8ea:	d11f      	bne.n	b92c <n25q256a_erase+0x100>
    b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b8f2:	d31b      	bcc.n	b92c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8f6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b8f8:	23d8      	movs	r3, #216	; 0xd8
    b8fa:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b8fc:	7d3b      	ldrb	r3, [r7, #20]
    b8fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b902:	b2db      	uxtb	r3, r3
    b904:	2201      	movs	r2, #1
    b906:	4619      	mov	r1, r3
    b908:	68f8      	ldr	r0, [r7, #12]
    b90a:	4b32      	ldr	r3, [pc, #200]	; (b9d4 <n25q256a_erase+0x1a8>)
    b90c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b90e:	f107 0314 	add.w	r3, r7, #20
    b912:	4619      	mov	r1, r3
    b914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b916:	4b30      	ldr	r3, [pc, #192]	; (b9d8 <n25q256a_erase+0x1ac>)
    b918:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b91c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b920:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b924:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b928:	63bb      	str	r3, [r7, #56]	; 0x38
    b92a:	e023      	b.n	b974 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b92e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b932:	d31b      	bcc.n	b96c <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b936:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b938:	2320      	movs	r3, #32
    b93a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b93c:	7d3b      	ldrb	r3, [r7, #20]
    b93e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b942:	b2db      	uxtb	r3, r3
    b944:	2201      	movs	r2, #1
    b946:	4619      	mov	r1, r3
    b948:	68f8      	ldr	r0, [r7, #12]
    b94a:	4b22      	ldr	r3, [pc, #136]	; (b9d4 <n25q256a_erase+0x1a8>)
    b94c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b94e:	f107 0314 	add.w	r3, r7, #20
    b952:	4619      	mov	r1, r3
    b954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b956:	4b20      	ldr	r3, [pc, #128]	; (b9d8 <n25q256a_erase+0x1ac>)
    b958:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b960:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b964:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b968:	63bb      	str	r3, [r7, #56]	; 0x38
    b96a:	e003      	b.n	b974 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b96c:	f06f 030c 	mvn.w	r3, #12
    b970:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b972:	e011      	b.n	b998 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b974:	bf00      	nop
    b976:	7d3b      	ldrb	r3, [r7, #20]
    b978:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b97c:	b2db      	uxtb	r3, r3
    b97e:	2270      	movs	r2, #112	; 0x70
    b980:	4619      	mov	r1, r3
    b982:	68f8      	ldr	r0, [r7, #12]
    b984:	4b15      	ldr	r3, [pc, #84]	; (b9dc <n25q256a_erase+0x1b0>)
    b986:	4798      	blx	r3
    b988:	4603      	mov	r3, r0
    b98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b98e:	2b00      	cmp	r3, #0
    b990:	d0f1      	beq.n	b976 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b994:	2b00      	cmp	r3, #0
    b996:	d1a5      	bne.n	b8e4 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b998:	bf00      	nop
    b99a:	7d3b      	ldrb	r3, [r7, #20]
    b99c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b9a0:	b2db      	uxtb	r3, r3
    b9a2:	2270      	movs	r2, #112	; 0x70
    b9a4:	4619      	mov	r1, r3
    b9a6:	68f8      	ldr	r0, [r7, #12]
    b9a8:	4b0c      	ldr	r3, [pc, #48]	; (b9dc <n25q256a_erase+0x1b0>)
    b9aa:	4798      	blx	r3
    b9ac:	4603      	mov	r3, r0
    b9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d0f1      	beq.n	b99a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b9b8:	7b5b      	ldrb	r3, [r3, #13]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d003      	beq.n	b9c6 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b9be:	2101      	movs	r1, #1
    b9c0:	68f8      	ldr	r0, [r7, #12]
    b9c2:	4b07      	ldr	r3, [pc, #28]	; (b9e0 <n25q256a_erase+0x1b4>)
    b9c4:	4798      	blx	r3
	}
	return rc;
    b9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b9c8:	4618      	mov	r0, r3
    b9ca:	3740      	adds	r7, #64	; 0x40
    b9cc:	46bd      	mov	sp, r7
    b9ce:	bd80      	pop	{r7, pc}
    b9d0:	001fffff 	.word	0x001fffff
    b9d4:	0000b48d 	.word	0x0000b48d
    b9d8:	00002661 	.word	0x00002661
    b9dc:	0000b351 	.word	0x0000b351
    b9e0:	0000b285 	.word	0x0000b285

0000b9e4 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b9e4:	b590      	push	{r4, r7, lr}
    b9e6:	b085      	sub	sp, #20
    b9e8:	af00      	add	r7, sp, #0
    b9ea:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b9ec:	687b      	ldr	r3, [r7, #4]
    b9ee:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b9f0:	68fb      	ldr	r3, [r7, #12]
    b9f2:	7b1b      	ldrb	r3, [r3, #12]
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d001      	beq.n	b9fc <n25q256a_enable_xip+0x18>
    b9f8:	2306      	movs	r3, #6
    b9fa:	e000      	b.n	b9fe <n25q256a_enable_xip+0x1a>
    b9fc:	2300      	movs	r3, #0
    b9fe:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ba00:	68fb      	ldr	r3, [r7, #12]
    ba02:	7b5b      	ldrb	r3, [r3, #13]
    ba04:	2b00      	cmp	r3, #0
    ba06:	d129      	bne.n	ba5c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ba08:	7afb      	ldrb	r3, [r7, #11]
    ba0a:	2285      	movs	r2, #133	; 0x85
    ba0c:	4619      	mov	r1, r3
    ba0e:	6878      	ldr	r0, [r7, #4]
    ba10:	4b15      	ldr	r3, [pc, #84]	; (ba68 <n25q256a_enable_xip+0x84>)
    ba12:	4798      	blx	r3
    ba14:	4603      	mov	r3, r0
    ba16:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    ba18:	7abb      	ldrb	r3, [r7, #10]
    ba1a:	f003 0308 	and.w	r3, r3, #8
    ba1e:	2b00      	cmp	r3, #0
    ba20:	d015      	beq.n	ba4e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    ba22:	7abb      	ldrb	r3, [r7, #10]
    ba24:	f023 0308 	bic.w	r3, r3, #8
    ba28:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    ba2a:	7abb      	ldrb	r3, [r7, #10]
    ba2c:	7af9      	ldrb	r1, [r7, #11]
    ba2e:	2281      	movs	r2, #129	; 0x81
    ba30:	6878      	ldr	r0, [r7, #4]
    ba32:	4c0e      	ldr	r4, [pc, #56]	; (ba6c <n25q256a_enable_xip+0x88>)
    ba34:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba36:	bf00      	nop
    ba38:	7afb      	ldrb	r3, [r7, #11]
    ba3a:	2270      	movs	r2, #112	; 0x70
    ba3c:	4619      	mov	r1, r3
    ba3e:	6878      	ldr	r0, [r7, #4]
    ba40:	4b09      	ldr	r3, [pc, #36]	; (ba68 <n25q256a_enable_xip+0x84>)
    ba42:	4798      	blx	r3
    ba44:	4603      	mov	r3, r0
    ba46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d0f4      	beq.n	ba38 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    ba4e:	68fb      	ldr	r3, [r7, #12]
    ba50:	2201      	movs	r2, #1
    ba52:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    ba54:	2101      	movs	r1, #1
    ba56:	6878      	ldr	r0, [r7, #4]
    ba58:	4b05      	ldr	r3, [pc, #20]	; (ba70 <n25q256a_enable_xip+0x8c>)
    ba5a:	4798      	blx	r3
	}
	return ERR_NONE;
    ba5c:	2300      	movs	r3, #0
}
    ba5e:	4618      	mov	r0, r3
    ba60:	3714      	adds	r7, #20
    ba62:	46bd      	mov	sp, r7
    ba64:	bd90      	pop	{r4, r7, pc}
    ba66:	bf00      	nop
    ba68:	0000b351 	.word	0x0000b351
    ba6c:	0000b3ed 	.word	0x0000b3ed
    ba70:	0000b285 	.word	0x0000b285

0000ba74 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    ba74:	b580      	push	{r7, lr}
    ba76:	b086      	sub	sp, #24
    ba78:	af00      	add	r7, sp, #0
    ba7a:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba7c:	687b      	ldr	r3, [r7, #4]
    ba7e:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba80:	687b      	ldr	r3, [r7, #4]
    ba82:	681b      	ldr	r3, [r3, #0]
    ba84:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba86:	697b      	ldr	r3, [r7, #20]
    ba88:	7b1b      	ldrb	r3, [r3, #12]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d001      	beq.n	ba92 <n25q256a_disable_xip+0x1e>
    ba8e:	2306      	movs	r3, #6
    ba90:	e000      	b.n	ba94 <n25q256a_disable_xip+0x20>
    ba92:	2300      	movs	r3, #0
    ba94:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ba96:	2100      	movs	r1, #0
    ba98:	6878      	ldr	r0, [r7, #4]
    ba9a:	4b15      	ldr	r3, [pc, #84]	; (baf0 <n25q256a_disable_xip+0x7c>)
    ba9c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ba9e:	7bfb      	ldrb	r3, [r7, #15]
    baa0:	2285      	movs	r2, #133	; 0x85
    baa2:	4619      	mov	r1, r3
    baa4:	6878      	ldr	r0, [r7, #4]
    baa6:	4b13      	ldr	r3, [pc, #76]	; (baf4 <n25q256a_disable_xip+0x80>)
    baa8:	4798      	blx	r3
    baaa:	4603      	mov	r3, r0
    baac:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    baae:	7bbb      	ldrb	r3, [r7, #14]
    bab0:	f003 0308 	and.w	r3, r3, #8
    bab4:	2b00      	cmp	r3, #0
    bab6:	d113      	bne.n	bae0 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bab8:	697b      	ldr	r3, [r7, #20]
    baba:	689b      	ldr	r3, [r3, #8]
    babc:	2b00      	cmp	r3, #0
    babe:	d00f      	beq.n	bae0 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bac0:	693b      	ldr	r3, [r7, #16]
    bac2:	681b      	ldr	r3, [r3, #0]
    bac4:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bac6:	6938      	ldr	r0, [r7, #16]
    bac8:	4b0b      	ldr	r3, [pc, #44]	; (baf8 <n25q256a_disable_xip+0x84>)
    baca:	4798      	blx	r3
			n25q->pin_exit_xip();
    bacc:	697b      	ldr	r3, [r7, #20]
    bace:	689b      	ldr	r3, [r3, #8]
    bad0:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bad2:	68b9      	ldr	r1, [r7, #8]
    bad4:	6938      	ldr	r0, [r7, #16]
    bad6:	4b09      	ldr	r3, [pc, #36]	; (bafc <n25q256a_disable_xip+0x88>)
    bad8:	4798      	blx	r3
			qspi_sync_enable(descr);
    bada:	6938      	ldr	r0, [r7, #16]
    badc:	4b08      	ldr	r3, [pc, #32]	; (bb00 <n25q256a_disable_xip+0x8c>)
    bade:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bae0:	697b      	ldr	r3, [r7, #20]
    bae2:	2200      	movs	r2, #0
    bae4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bae6:	2300      	movs	r3, #0
}
    bae8:	4618      	mov	r0, r3
    baea:	3718      	adds	r7, #24
    baec:	46bd      	mov	sp, r7
    baee:	bd80      	pop	{r7, pc}
    baf0:	0000b285 	.word	0x0000b285
    baf4:	0000b351 	.word	0x0000b351
    baf8:	00002625 	.word	0x00002625
    bafc:	0000259d 	.word	0x0000259d
    bb00:	000025e9 	.word	0x000025e9

0000bb04 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bb04:	b480      	push	{r7}
    bb06:	b085      	sub	sp, #20
    bb08:	af00      	add	r7, sp, #0
    bb0a:	60f8      	str	r0, [r7, #12]
    bb0c:	60b9      	str	r1, [r7, #8]
    bb0e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bb10:	68fb      	ldr	r3, [r7, #12]
    bb12:	68ba      	ldr	r2, [r7, #8]
    bb14:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bb16:	68fb      	ldr	r3, [r7, #12]
    bb18:	687a      	ldr	r2, [r7, #4]
    bb1a:	605a      	str	r2, [r3, #4]

	return me;
    bb1c:	68fb      	ldr	r3, [r7, #12]
}
    bb1e:	4618      	mov	r0, r3
    bb20:	3714      	adds	r7, #20
    bb22:	46bd      	mov	sp, r7
    bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb28:	4770      	bx	lr

0000bb2a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bb2a:	b480      	push	{r7}
    bb2c:	b083      	sub	sp, #12
    bb2e:	af00      	add	r7, sp, #0
    bb30:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bb32:	687b      	ldr	r3, [r7, #4]
    bb34:	781b      	ldrb	r3, [r3, #0]
    bb36:	b29a      	uxth	r2, r3
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	3301      	adds	r3, #1
    bb3c:	781b      	ldrb	r3, [r3, #0]
    bb3e:	b29b      	uxth	r3, r3
    bb40:	021b      	lsls	r3, r3, #8
    bb42:	b29b      	uxth	r3, r3
    bb44:	4413      	add	r3, r2
    bb46:	b29b      	uxth	r3, r3
}
    bb48:	4618      	mov	r0, r3
    bb4a:	370c      	adds	r7, #12
    bb4c:	46bd      	mov	sp, r7
    bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb52:	4770      	bx	lr

0000bb54 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bb54:	b480      	push	{r7}
    bb56:	b083      	sub	sp, #12
    bb58:	af00      	add	r7, sp, #0
    bb5a:	6078      	str	r0, [r7, #4]
	return desc[0];
    bb5c:	687b      	ldr	r3, [r7, #4]
    bb5e:	781b      	ldrb	r3, [r3, #0]
}
    bb60:	4618      	mov	r0, r3
    bb62:	370c      	adds	r7, #12
    bb64:	46bd      	mov	sp, r7
    bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb6a:	4770      	bx	lr

0000bb6c <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bb6c:	b580      	push	{r7, lr}
    bb6e:	b082      	sub	sp, #8
    bb70:	af00      	add	r7, sp, #0
    bb72:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bb74:	6878      	ldr	r0, [r7, #4]
    bb76:	4b05      	ldr	r3, [pc, #20]	; (bb8c <usb_desc_next+0x20>)
    bb78:	4798      	blx	r3
    bb7a:	4603      	mov	r3, r0
    bb7c:	461a      	mov	r2, r3
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	4413      	add	r3, r2
}
    bb82:	4618      	mov	r0, r3
    bb84:	3708      	adds	r7, #8
    bb86:	46bd      	mov	sp, r7
    bb88:	bd80      	pop	{r7, pc}
    bb8a:	bf00      	nop
    bb8c:	0000bb55 	.word	0x0000bb55

0000bb90 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bb90:	b580      	push	{r7, lr}
    bb92:	b08c      	sub	sp, #48	; 0x30
    bb94:	af00      	add	r7, sp, #0
    bb96:	6078      	str	r0, [r7, #4]
    bb98:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bb9a:	687b      	ldr	r3, [r7, #4]
    bb9c:	689b      	ldr	r3, [r3, #8]
    bb9e:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bba0:	683b      	ldr	r3, [r7, #0]
    bba2:	681b      	ldr	r3, [r3, #0]
    bba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bba6:	2300      	movs	r3, #0
    bba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bbac:	e08f      	b.n	bcce <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bbb0:	2b00      	cmp	r3, #0
    bbb2:	d102      	bne.n	bbba <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bbb4:	f06f 0309 	mvn.w	r3, #9
    bbb8:	e092      	b.n	bce0 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bbbc:	789b      	ldrb	r3, [r3, #2]
    bbbe:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bbc2:	795b      	ldrb	r3, [r3, #5]
    bbc4:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bbc6:	7c7b      	ldrb	r3, [r7, #17]
    bbc8:	2b02      	cmp	r3, #2
    bbca:	d002      	beq.n	bbd2 <cdcdf_acm_enable+0x42>
    bbcc:	7c7b      	ldrb	r3, [r7, #17]
    bbce:	2b0a      	cmp	r3, #10
    bbd0:	d121      	bne.n	bc16 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbd6:	6a3a      	ldr	r2, [r7, #32]
    bbd8:	5cd2      	ldrb	r2, [r2, r3]
    bbda:	7bbb      	ldrb	r3, [r7, #14]
    bbdc:	429a      	cmp	r2, r3
    bbde:	d102      	bne.n	bbe6 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bbe0:	f06f 0311 	mvn.w	r3, #17
    bbe4:	e07c      	b.n	bce0 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbea:	6a3a      	ldr	r2, [r7, #32]
    bbec:	5cd3      	ldrb	r3, [r2, r3]
    bbee:	2bff      	cmp	r3, #255	; 0xff
    bbf0:	d002      	beq.n	bbf8 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bbf2:	f06f 031b 	mvn.w	r3, #27
    bbf6:	e073      	b.n	bce0 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbfc:	7bb9      	ldrb	r1, [r7, #14]
    bbfe:	6a3a      	ldr	r2, [r7, #32]
    bc00:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bc02:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bc04:	683b      	ldr	r3, [r7, #0]
    bc06:	685b      	ldr	r3, [r3, #4]
    bc08:	2205      	movs	r2, #5
    bc0a:	4619      	mov	r1, r3
    bc0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bc0e:	4b36      	ldr	r3, [pc, #216]	; (bce8 <cdcdf_acm_enable+0x158>)
    bc10:	4798      	blx	r3
    bc12:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bc14:	e047      	b.n	bca6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bc16:	f06f 0309 	mvn.w	r3, #9
    bc1a:	e061      	b.n	bce0 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc1e:	789b      	ldrb	r3, [r3, #2]
    bc20:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc24:	78db      	ldrb	r3, [r3, #3]
    bc26:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc2a:	3304      	adds	r3, #4
    bc2c:	4618      	mov	r0, r3
    bc2e:	4b2f      	ldr	r3, [pc, #188]	; (bcec <cdcdf_acm_enable+0x15c>)
    bc30:	4798      	blx	r3
    bc32:	4603      	mov	r3, r0
    bc34:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bc36:	7ebb      	ldrb	r3, [r7, #26]
    bc38:	7ef9      	ldrb	r1, [r7, #27]
    bc3a:	8bba      	ldrh	r2, [r7, #28]
    bc3c:	4618      	mov	r0, r3
    bc3e:	4b2c      	ldr	r3, [pc, #176]	; (bcf0 <cdcdf_acm_enable+0x160>)
    bc40:	4798      	blx	r3
    bc42:	4603      	mov	r3, r0
    bc44:	2b00      	cmp	r3, #0
    bc46:	d002      	beq.n	bc4e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bc48:	f06f 0313 	mvn.w	r3, #19
    bc4c:	e048      	b.n	bce0 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bc4e:	7ebb      	ldrb	r3, [r7, #26]
    bc50:	b25b      	sxtb	r3, r3
    bc52:	2b00      	cmp	r3, #0
    bc54:	da0f      	bge.n	bc76 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bc56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc5a:	7eb9      	ldrb	r1, [r7, #26]
    bc5c:	6a3a      	ldr	r2, [r7, #32]
    bc5e:	4413      	add	r3, r2
    bc60:	460a      	mov	r2, r1
    bc62:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc68:	6a3a      	ldr	r2, [r7, #32]
    bc6a:	4413      	add	r3, r2
    bc6c:	789b      	ldrb	r3, [r3, #2]
    bc6e:	4618      	mov	r0, r3
    bc70:	4b20      	ldr	r3, [pc, #128]	; (bcf4 <cdcdf_acm_enable+0x164>)
    bc72:	4798      	blx	r3
    bc74:	e007      	b.n	bc86 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bc76:	7eba      	ldrb	r2, [r7, #26]
    bc78:	6a3b      	ldr	r3, [r7, #32]
    bc7a:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bc7c:	6a3b      	ldr	r3, [r7, #32]
    bc7e:	791b      	ldrb	r3, [r3, #4]
    bc80:	4618      	mov	r0, r3
    bc82:	4b1c      	ldr	r3, [pc, #112]	; (bcf4 <cdcdf_acm_enable+0x164>)
    bc84:	4798      	blx	r3
			}
			desc->sod = ep;
    bc86:	683b      	ldr	r3, [r7, #0]
    bc88:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc8a:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bc8c:	683b      	ldr	r3, [r7, #0]
    bc8e:	681b      	ldr	r3, [r3, #0]
    bc90:	4618      	mov	r0, r3
    bc92:	4b19      	ldr	r3, [pc, #100]	; (bcf8 <cdcdf_acm_enable+0x168>)
    bc94:	4798      	blx	r3
    bc96:	4602      	mov	r2, r0
    bc98:	683b      	ldr	r3, [r7, #0]
    bc9a:	685b      	ldr	r3, [r3, #4]
    bc9c:	4619      	mov	r1, r3
    bc9e:	4610      	mov	r0, r2
    bca0:	4b16      	ldr	r3, [pc, #88]	; (bcfc <cdcdf_acm_enable+0x16c>)
    bca2:	4798      	blx	r3
    bca4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bca8:	2b00      	cmp	r3, #0
    bcaa:	d1b7      	bne.n	bc1c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bcac:	683b      	ldr	r3, [r7, #0]
    bcae:	681b      	ldr	r3, [r3, #0]
    bcb0:	4618      	mov	r0, r3
    bcb2:	4b11      	ldr	r3, [pc, #68]	; (bcf8 <cdcdf_acm_enable+0x168>)
    bcb4:	4798      	blx	r3
    bcb6:	683b      	ldr	r3, [r7, #0]
    bcb8:	685b      	ldr	r3, [r3, #4]
    bcba:	2204      	movs	r2, #4
    bcbc:	4619      	mov	r1, r3
    bcbe:	4b0a      	ldr	r3, [pc, #40]	; (bce8 <cdcdf_acm_enable+0x158>)
    bcc0:	4798      	blx	r3
    bcc2:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bcc8:	3301      	adds	r3, #1
    bcca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bcd2:	2b01      	cmp	r3, #1
    bcd4:	f67f af6b 	bls.w	bbae <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bcd8:	4b09      	ldr	r3, [pc, #36]	; (bd00 <cdcdf_acm_enable+0x170>)
    bcda:	2201      	movs	r2, #1
    bcdc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bcde:	2300      	movs	r3, #0
}
    bce0:	4618      	mov	r0, r3
    bce2:	3730      	adds	r7, #48	; 0x30
    bce4:	46bd      	mov	sp, r7
    bce6:	bd80      	pop	{r7, pc}
    bce8:	0000cf51 	.word	0x0000cf51
    bcec:	0000bb2b 	.word	0x0000bb2b
    bcf0:	00003215 	.word	0x00003215
    bcf4:	00003301 	.word	0x00003301
    bcf8:	0000bb6d 	.word	0x0000bb6d
    bcfc:	0000cfad 	.word	0x0000cfad
    bd00:	20001024 	.word	0x20001024

0000bd04 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bd04:	b580      	push	{r7, lr}
    bd06:	b088      	sub	sp, #32
    bd08:	af00      	add	r7, sp, #0
    bd0a:	6078      	str	r0, [r7, #4]
    bd0c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bd0e:	687b      	ldr	r3, [r7, #4]
    bd10:	689b      	ldr	r3, [r3, #8]
    bd12:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bd14:	683b      	ldr	r3, [r7, #0]
    bd16:	2b00      	cmp	r3, #0
    bd18:	d00c      	beq.n	bd34 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bd1a:	683b      	ldr	r3, [r7, #0]
    bd1c:	681b      	ldr	r3, [r3, #0]
    bd1e:	795b      	ldrb	r3, [r3, #5]
    bd20:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bd22:	7c7b      	ldrb	r3, [r7, #17]
    bd24:	2b02      	cmp	r3, #2
    bd26:	d005      	beq.n	bd34 <cdcdf_acm_disable+0x30>
    bd28:	7c7b      	ldrb	r3, [r7, #17]
    bd2a:	2b0a      	cmp	r3, #10
    bd2c:	d002      	beq.n	bd34 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bd2e:	f06f 0309 	mvn.w	r3, #9
    bd32:	e035      	b.n	bda0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bd34:	2300      	movs	r3, #0
    bd36:	77fb      	strb	r3, [r7, #31]
    bd38:	e01f      	b.n	bd7a <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bd3a:	7ffb      	ldrb	r3, [r7, #31]
    bd3c:	69ba      	ldr	r2, [r7, #24]
    bd3e:	5cd3      	ldrb	r3, [r2, r3]
    bd40:	2bff      	cmp	r3, #255	; 0xff
    bd42:	d016      	beq.n	bd72 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bd44:	7ffb      	ldrb	r3, [r7, #31]
    bd46:	69ba      	ldr	r2, [r7, #24]
    bd48:	21ff      	movs	r1, #255	; 0xff
    bd4a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bd4c:	7ffb      	ldrb	r3, [r7, #31]
    bd4e:	69ba      	ldr	r2, [r7, #24]
    bd50:	4413      	add	r3, r2
    bd52:	789b      	ldrb	r3, [r3, #2]
    bd54:	2bff      	cmp	r3, #255	; 0xff
    bd56:	d00d      	beq.n	bd74 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bd58:	7ffb      	ldrb	r3, [r7, #31]
    bd5a:	69ba      	ldr	r2, [r7, #24]
    bd5c:	4413      	add	r3, r2
    bd5e:	789b      	ldrb	r3, [r3, #2]
    bd60:	4618      	mov	r0, r3
    bd62:	4b11      	ldr	r3, [pc, #68]	; (bda8 <cdcdf_acm_disable+0xa4>)
    bd64:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bd66:	7ffb      	ldrb	r3, [r7, #31]
    bd68:	69ba      	ldr	r2, [r7, #24]
    bd6a:	4413      	add	r3, r2
    bd6c:	22ff      	movs	r2, #255	; 0xff
    bd6e:	709a      	strb	r2, [r3, #2]
    bd70:	e000      	b.n	bd74 <cdcdf_acm_disable+0x70>
			continue;
    bd72:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bd74:	7ffb      	ldrb	r3, [r7, #31]
    bd76:	3301      	adds	r3, #1
    bd78:	77fb      	strb	r3, [r7, #31]
    bd7a:	7ffb      	ldrb	r3, [r7, #31]
    bd7c:	2b01      	cmp	r3, #1
    bd7e:	d9dc      	bls.n	bd3a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bd80:	69bb      	ldr	r3, [r7, #24]
    bd82:	791b      	ldrb	r3, [r3, #4]
    bd84:	2bff      	cmp	r3, #255	; 0xff
    bd86:	d007      	beq.n	bd98 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bd88:	69bb      	ldr	r3, [r7, #24]
    bd8a:	791b      	ldrb	r3, [r3, #4]
    bd8c:	4618      	mov	r0, r3
    bd8e:	4b06      	ldr	r3, [pc, #24]	; (bda8 <cdcdf_acm_disable+0xa4>)
    bd90:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bd92:	69bb      	ldr	r3, [r7, #24]
    bd94:	22ff      	movs	r2, #255	; 0xff
    bd96:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bd98:	4b04      	ldr	r3, [pc, #16]	; (bdac <cdcdf_acm_disable+0xa8>)
    bd9a:	2200      	movs	r2, #0
    bd9c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bd9e:	2300      	movs	r3, #0
}
    bda0:	4618      	mov	r0, r3
    bda2:	3720      	adds	r7, #32
    bda4:	46bd      	mov	sp, r7
    bda6:	bd80      	pop	{r7, pc}
    bda8:	000032b1 	.word	0x000032b1
    bdac:	20001024 	.word	0x20001024

0000bdb0 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bdb0:	b580      	push	{r7, lr}
    bdb2:	b084      	sub	sp, #16
    bdb4:	af00      	add	r7, sp, #0
    bdb6:	60f8      	str	r0, [r7, #12]
    bdb8:	460b      	mov	r3, r1
    bdba:	607a      	str	r2, [r7, #4]
    bdbc:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bdbe:	7afb      	ldrb	r3, [r7, #11]
    bdc0:	2b01      	cmp	r3, #1
    bdc2:	d009      	beq.n	bdd8 <cdcdf_acm_ctrl+0x28>
    bdc4:	2b02      	cmp	r3, #2
    bdc6:	d00d      	beq.n	bde4 <cdcdf_acm_ctrl+0x34>
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d10e      	bne.n	bdea <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bdcc:	6879      	ldr	r1, [r7, #4]
    bdce:	68f8      	ldr	r0, [r7, #12]
    bdd0:	4b09      	ldr	r3, [pc, #36]	; (bdf8 <cdcdf_acm_ctrl+0x48>)
    bdd2:	4798      	blx	r3
    bdd4:	4603      	mov	r3, r0
    bdd6:	e00a      	b.n	bdee <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bdd8:	6879      	ldr	r1, [r7, #4]
    bdda:	68f8      	ldr	r0, [r7, #12]
    bddc:	4b07      	ldr	r3, [pc, #28]	; (bdfc <cdcdf_acm_ctrl+0x4c>)
    bdde:	4798      	blx	r3
    bde0:	4603      	mov	r3, r0
    bde2:	e004      	b.n	bdee <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bde4:	f06f 031a 	mvn.w	r3, #26
    bde8:	e001      	b.n	bdee <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bdea:	f06f 030c 	mvn.w	r3, #12
	}
}
    bdee:	4618      	mov	r0, r3
    bdf0:	3710      	adds	r7, #16
    bdf2:	46bd      	mov	sp, r7
    bdf4:	bd80      	pop	{r7, pc}
    bdf6:	bf00      	nop
    bdf8:	0000bb91 	.word	0x0000bb91
    bdfc:	0000bd05 	.word	0x0000bd05

0000be00 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be00:	b590      	push	{r4, r7, lr}
    be02:	b087      	sub	sp, #28
    be04:	af00      	add	r7, sp, #0
    be06:	4603      	mov	r3, r0
    be08:	6039      	str	r1, [r7, #0]
    be0a:	71fb      	strb	r3, [r7, #7]
    be0c:	4613      	mov	r3, r2
    be0e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    be10:	683b      	ldr	r3, [r7, #0]
    be12:	799a      	ldrb	r2, [r3, #6]
    be14:	79db      	ldrb	r3, [r3, #7]
    be16:	021b      	lsls	r3, r3, #8
    be18:	4313      	orrs	r3, r2
    be1a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    be1c:	4b2b      	ldr	r3, [pc, #172]	; (becc <cdcdf_acm_set_req+0xcc>)
    be1e:	4798      	blx	r3
    be20:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    be22:	683b      	ldr	r3, [r7, #0]
    be24:	785b      	ldrb	r3, [r3, #1]
    be26:	2b20      	cmp	r3, #32
    be28:	d002      	beq.n	be30 <cdcdf_acm_set_req+0x30>
    be2a:	2b22      	cmp	r3, #34	; 0x22
    be2c:	d034      	beq.n	be98 <cdcdf_acm_set_req+0x98>
    be2e:	e046      	b.n	bebe <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    be30:	8afb      	ldrh	r3, [r7, #22]
    be32:	2b07      	cmp	r3, #7
    be34:	d002      	beq.n	be3c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    be36:	f04f 33ff 	mov.w	r3, #4294967295
    be3a:	e042      	b.n	bec2 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    be3c:	79bb      	ldrb	r3, [r7, #6]
    be3e:	2b00      	cmp	r3, #0
    be40:	d107      	bne.n	be52 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    be42:	8afa      	ldrh	r2, [r7, #22]
    be44:	79f8      	ldrb	r0, [r7, #7]
    be46:	2300      	movs	r3, #0
    be48:	6939      	ldr	r1, [r7, #16]
    be4a:	4c21      	ldr	r4, [pc, #132]	; (bed0 <cdcdf_acm_set_req+0xd0>)
    be4c:	47a0      	blx	r4
    be4e:	4603      	mov	r3, r0
    be50:	e037      	b.n	bec2 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    be52:	693a      	ldr	r2, [r7, #16]
    be54:	f107 0308 	add.w	r3, r7, #8
    be58:	6810      	ldr	r0, [r2, #0]
    be5a:	6018      	str	r0, [r3, #0]
    be5c:	8891      	ldrh	r1, [r2, #4]
    be5e:	7992      	ldrb	r2, [r2, #6]
    be60:	8099      	strh	r1, [r3, #4]
    be62:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    be64:	4b1b      	ldr	r3, [pc, #108]	; (bed4 <cdcdf_acm_set_req+0xd4>)
    be66:	681b      	ldr	r3, [r3, #0]
    be68:	2b00      	cmp	r3, #0
    be6a:	d008      	beq.n	be7e <cdcdf_acm_set_req+0x7e>
    be6c:	4b19      	ldr	r3, [pc, #100]	; (bed4 <cdcdf_acm_set_req+0xd4>)
    be6e:	681b      	ldr	r3, [r3, #0]
    be70:	f107 0208 	add.w	r2, r7, #8
    be74:	4610      	mov	r0, r2
    be76:	4798      	blx	r3
    be78:	4603      	mov	r3, r0
    be7a:	2b00      	cmp	r3, #0
    be7c:	d00a      	beq.n	be94 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    be7e:	4b16      	ldr	r3, [pc, #88]	; (bed8 <cdcdf_acm_set_req+0xd8>)
    be80:	f107 0208 	add.w	r2, r7, #8
    be84:	e892 0003 	ldmia.w	r2, {r0, r1}
    be88:	6018      	str	r0, [r3, #0]
    be8a:	3304      	adds	r3, #4
    be8c:	8019      	strh	r1, [r3, #0]
    be8e:	3302      	adds	r3, #2
    be90:	0c0a      	lsrs	r2, r1, #16
    be92:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    be94:	2300      	movs	r3, #0
    be96:	e014      	b.n	bec2 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    be98:	2300      	movs	r3, #0
    be9a:	2200      	movs	r2, #0
    be9c:	2100      	movs	r1, #0
    be9e:	2000      	movs	r0, #0
    bea0:	4c0b      	ldr	r4, [pc, #44]	; (bed0 <cdcdf_acm_set_req+0xd0>)
    bea2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bea4:	4b0d      	ldr	r3, [pc, #52]	; (bedc <cdcdf_acm_set_req+0xdc>)
    bea6:	681b      	ldr	r3, [r3, #0]
    bea8:	2b00      	cmp	r3, #0
    beaa:	d006      	beq.n	beba <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    beac:	4b0b      	ldr	r3, [pc, #44]	; (bedc <cdcdf_acm_set_req+0xdc>)
    beae:	681b      	ldr	r3, [r3, #0]
    beb0:	683a      	ldr	r2, [r7, #0]
    beb2:	8852      	ldrh	r2, [r2, #2]
    beb4:	b292      	uxth	r2, r2
    beb6:	4610      	mov	r0, r2
    beb8:	4798      	blx	r3
		}
		return ERR_NONE;
    beba:	2300      	movs	r3, #0
    bebc:	e001      	b.n	bec2 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    bebe:	f06f 030c 	mvn.w	r3, #12
	}
}
    bec2:	4618      	mov	r0, r3
    bec4:	371c      	adds	r7, #28
    bec6:	46bd      	mov	sp, r7
    bec8:	bd90      	pop	{r4, r7, pc}
    beca:	bf00      	nop
    becc:	0000ce4d 	.word	0x0000ce4d
    bed0:	0000ccc1 	.word	0x0000ccc1
    bed4:	20001038 	.word	0x20001038
    bed8:	2000102c 	.word	0x2000102c
    bedc:	20001034 	.word	0x20001034

0000bee0 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bee0:	b590      	push	{r4, r7, lr}
    bee2:	b085      	sub	sp, #20
    bee4:	af00      	add	r7, sp, #0
    bee6:	4603      	mov	r3, r0
    bee8:	6039      	str	r1, [r7, #0]
    beea:	71fb      	strb	r3, [r7, #7]
    beec:	4613      	mov	r3, r2
    beee:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bef0:	683b      	ldr	r3, [r7, #0]
    bef2:	799a      	ldrb	r2, [r3, #6]
    bef4:	79db      	ldrb	r3, [r3, #7]
    bef6:	021b      	lsls	r3, r3, #8
    bef8:	4313      	orrs	r3, r2
    befa:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    befc:	79bb      	ldrb	r3, [r7, #6]
    befe:	2b01      	cmp	r3, #1
    bf00:	d101      	bne.n	bf06 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    bf02:	2300      	movs	r3, #0
    bf04:	e013      	b.n	bf2e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bf06:	683b      	ldr	r3, [r7, #0]
    bf08:	785b      	ldrb	r3, [r3, #1]
    bf0a:	2b21      	cmp	r3, #33	; 0x21
    bf0c:	d10d      	bne.n	bf2a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bf0e:	89fb      	ldrh	r3, [r7, #14]
    bf10:	2b07      	cmp	r3, #7
    bf12:	d002      	beq.n	bf1a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bf14:	f04f 33ff 	mov.w	r3, #4294967295
    bf18:	e009      	b.n	bf2e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bf1a:	89fa      	ldrh	r2, [r7, #14]
    bf1c:	79f8      	ldrb	r0, [r7, #7]
    bf1e:	2300      	movs	r3, #0
    bf20:	4905      	ldr	r1, [pc, #20]	; (bf38 <cdcdf_acm_get_req+0x58>)
    bf22:	4c06      	ldr	r4, [pc, #24]	; (bf3c <cdcdf_acm_get_req+0x5c>)
    bf24:	47a0      	blx	r4
    bf26:	4603      	mov	r3, r0
    bf28:	e001      	b.n	bf2e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bf2a:	f06f 030c 	mvn.w	r3, #12
	}
}
    bf2e:	4618      	mov	r0, r3
    bf30:	3714      	adds	r7, #20
    bf32:	46bd      	mov	sp, r7
    bf34:	bd90      	pop	{r4, r7, pc}
    bf36:	bf00      	nop
    bf38:	2000102c 	.word	0x2000102c
    bf3c:	0000ccc1 	.word	0x0000ccc1

0000bf40 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf40:	b580      	push	{r7, lr}
    bf42:	b082      	sub	sp, #8
    bf44:	af00      	add	r7, sp, #0
    bf46:	4603      	mov	r3, r0
    bf48:	6039      	str	r1, [r7, #0]
    bf4a:	71fb      	strb	r3, [r7, #7]
    bf4c:	4613      	mov	r3, r2
    bf4e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bf50:	683b      	ldr	r3, [r7, #0]
    bf52:	781b      	ldrb	r3, [r3, #0]
    bf54:	095b      	lsrs	r3, r3, #5
    bf56:	b2db      	uxtb	r3, r3
    bf58:	f003 0303 	and.w	r3, r3, #3
    bf5c:	2b01      	cmp	r3, #1
    bf5e:	d002      	beq.n	bf66 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bf60:	f06f 0309 	mvn.w	r3, #9
    bf64:	e026      	b.n	bfb4 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bf66:	683b      	ldr	r3, [r7, #0]
    bf68:	889b      	ldrh	r3, [r3, #4]
    bf6a:	b29a      	uxth	r2, r3
    bf6c:	4b13      	ldr	r3, [pc, #76]	; (bfbc <cdcdf_acm_req+0x7c>)
    bf6e:	781b      	ldrb	r3, [r3, #0]
    bf70:	b29b      	uxth	r3, r3
    bf72:	429a      	cmp	r2, r3
    bf74:	d007      	beq.n	bf86 <cdcdf_acm_req+0x46>
    bf76:	683b      	ldr	r3, [r7, #0]
    bf78:	889b      	ldrh	r3, [r3, #4]
    bf7a:	b29a      	uxth	r2, r3
    bf7c:	4b0f      	ldr	r3, [pc, #60]	; (bfbc <cdcdf_acm_req+0x7c>)
    bf7e:	785b      	ldrb	r3, [r3, #1]
    bf80:	b29b      	uxth	r3, r3
    bf82:	429a      	cmp	r2, r3
    bf84:	d114      	bne.n	bfb0 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bf86:	683b      	ldr	r3, [r7, #0]
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	b25b      	sxtb	r3, r3
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	da07      	bge.n	bfa0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bf90:	79ba      	ldrb	r2, [r7, #6]
    bf92:	79fb      	ldrb	r3, [r7, #7]
    bf94:	6839      	ldr	r1, [r7, #0]
    bf96:	4618      	mov	r0, r3
    bf98:	4b09      	ldr	r3, [pc, #36]	; (bfc0 <cdcdf_acm_req+0x80>)
    bf9a:	4798      	blx	r3
    bf9c:	4603      	mov	r3, r0
    bf9e:	e009      	b.n	bfb4 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bfa0:	79ba      	ldrb	r2, [r7, #6]
    bfa2:	79fb      	ldrb	r3, [r7, #7]
    bfa4:	6839      	ldr	r1, [r7, #0]
    bfa6:	4618      	mov	r0, r3
    bfa8:	4b06      	ldr	r3, [pc, #24]	; (bfc4 <cdcdf_acm_req+0x84>)
    bfaa:	4798      	blx	r3
    bfac:	4603      	mov	r3, r0
    bfae:	e001      	b.n	bfb4 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bfb0:	f06f 0309 	mvn.w	r3, #9
	}
}
    bfb4:	4618      	mov	r0, r3
    bfb6:	3708      	adds	r7, #8
    bfb8:	46bd      	mov	sp, r7
    bfba:	bd80      	pop	{r7, pc}
    bfbc:	20001024 	.word	0x20001024
    bfc0:	0000bee1 	.word	0x0000bee1
    bfc4:	0000be01 	.word	0x0000be01

0000bfc8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bfc8:	b580      	push	{r7, lr}
    bfca:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bfcc:	4b0b      	ldr	r3, [pc, #44]	; (bffc <cdcdf_acm_init+0x34>)
    bfce:	4798      	blx	r3
    bfd0:	4603      	mov	r3, r0
    bfd2:	2b01      	cmp	r3, #1
    bfd4:	d902      	bls.n	bfdc <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bfd6:	f06f 0310 	mvn.w	r3, #16
    bfda:	e00d      	b.n	bff8 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bfdc:	4b08      	ldr	r3, [pc, #32]	; (c000 <cdcdf_acm_init+0x38>)
    bfde:	4a09      	ldr	r2, [pc, #36]	; (c004 <cdcdf_acm_init+0x3c>)
    bfe0:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bfe2:	4b07      	ldr	r3, [pc, #28]	; (c000 <cdcdf_acm_init+0x38>)
    bfe4:	4a08      	ldr	r2, [pc, #32]	; (c008 <cdcdf_acm_init+0x40>)
    bfe6:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bfe8:	4805      	ldr	r0, [pc, #20]	; (c000 <cdcdf_acm_init+0x38>)
    bfea:	4b08      	ldr	r3, [pc, #32]	; (c00c <cdcdf_acm_init+0x44>)
    bfec:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bfee:	4908      	ldr	r1, [pc, #32]	; (c010 <cdcdf_acm_init+0x48>)
    bff0:	2001      	movs	r0, #1
    bff2:	4b08      	ldr	r3, [pc, #32]	; (c014 <cdcdf_acm_init+0x4c>)
    bff4:	4798      	blx	r3
	return ERR_NONE;
    bff6:	2300      	movs	r3, #0
}
    bff8:	4618      	mov	r0, r3
    bffa:	bd80      	pop	{r7, pc}
    bffc:	0000ce65 	.word	0x0000ce65
    c000:	20001018 	.word	0x20001018
    c004:	0000bdb1 	.word	0x0000bdb1
    c008:	20001024 	.word	0x20001024
    c00c:	0000cdcd 	.word	0x0000cdcd
    c010:	20000208 	.word	0x20000208
    c014:	0000ccfd 	.word	0x0000ccfd

0000c018 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c018:	b590      	push	{r4, r7, lr}
    c01a:	b083      	sub	sp, #12
    c01c:	af00      	add	r7, sp, #0
    c01e:	6078      	str	r0, [r7, #4]
    c020:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c022:	4b0b      	ldr	r3, [pc, #44]	; (c050 <cdcdf_acm_read+0x38>)
    c024:	4798      	blx	r3
    c026:	4603      	mov	r3, r0
    c028:	f083 0301 	eor.w	r3, r3, #1
    c02c:	b2db      	uxtb	r3, r3
    c02e:	2b00      	cmp	r3, #0
    c030:	d002      	beq.n	c038 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c032:	f06f 0310 	mvn.w	r3, #16
    c036:	e007      	b.n	c048 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c038:	4b06      	ldr	r3, [pc, #24]	; (c054 <cdcdf_acm_read+0x3c>)
    c03a:	7918      	ldrb	r0, [r3, #4]
    c03c:	2300      	movs	r3, #0
    c03e:	683a      	ldr	r2, [r7, #0]
    c040:	6879      	ldr	r1, [r7, #4]
    c042:	4c05      	ldr	r4, [pc, #20]	; (c058 <cdcdf_acm_read+0x40>)
    c044:	47a0      	blx	r4
    c046:	4603      	mov	r3, r0
}
    c048:	4618      	mov	r0, r3
    c04a:	370c      	adds	r7, #12
    c04c:	46bd      	mov	sp, r7
    c04e:	bd90      	pop	{r4, r7, pc}
    c050:	0000c13d 	.word	0x0000c13d
    c054:	20001024 	.word	0x20001024
    c058:	0000ccc1 	.word	0x0000ccc1

0000c05c <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c05c:	b590      	push	{r4, r7, lr}
    c05e:	b083      	sub	sp, #12
    c060:	af00      	add	r7, sp, #0
    c062:	6078      	str	r0, [r7, #4]
    c064:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c066:	4b0b      	ldr	r3, [pc, #44]	; (c094 <cdcdf_acm_write+0x38>)
    c068:	4798      	blx	r3
    c06a:	4603      	mov	r3, r0
    c06c:	f083 0301 	eor.w	r3, r3, #1
    c070:	b2db      	uxtb	r3, r3
    c072:	2b00      	cmp	r3, #0
    c074:	d002      	beq.n	c07c <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c076:	f06f 0310 	mvn.w	r3, #16
    c07a:	e007      	b.n	c08c <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c07c:	4b06      	ldr	r3, [pc, #24]	; (c098 <cdcdf_acm_write+0x3c>)
    c07e:	78d8      	ldrb	r0, [r3, #3]
    c080:	2301      	movs	r3, #1
    c082:	683a      	ldr	r2, [r7, #0]
    c084:	6879      	ldr	r1, [r7, #4]
    c086:	4c05      	ldr	r4, [pc, #20]	; (c09c <cdcdf_acm_write+0x40>)
    c088:	47a0      	blx	r4
    c08a:	4603      	mov	r3, r0
}
    c08c:	4618      	mov	r0, r3
    c08e:	370c      	adds	r7, #12
    c090:	46bd      	mov	sp, r7
    c092:	bd90      	pop	{r4, r7, pc}
    c094:	0000c13d 	.word	0x0000c13d
    c098:	20001024 	.word	0x20001024
    c09c:	0000ccc1 	.word	0x0000ccc1

0000c0a0 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c0a0:	b580      	push	{r7, lr}
    c0a2:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c0a4:	4b05      	ldr	r3, [pc, #20]	; (c0bc <cdcdf_acm_stop_xfer+0x1c>)
    c0a6:	78db      	ldrb	r3, [r3, #3]
    c0a8:	4618      	mov	r0, r3
    c0aa:	4b05      	ldr	r3, [pc, #20]	; (c0c0 <cdcdf_acm_stop_xfer+0x20>)
    c0ac:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c0ae:	4b03      	ldr	r3, [pc, #12]	; (c0bc <cdcdf_acm_stop_xfer+0x1c>)
    c0b0:	791b      	ldrb	r3, [r3, #4]
    c0b2:	4618      	mov	r0, r3
    c0b4:	4b02      	ldr	r3, [pc, #8]	; (c0c0 <cdcdf_acm_stop_xfer+0x20>)
    c0b6:	4798      	blx	r3
}
    c0b8:	bf00      	nop
    c0ba:	bd80      	pop	{r7, pc}
    c0bc:	20001024 	.word	0x20001024
    c0c0:	000034d9 	.word	0x000034d9

0000c0c4 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c0c4:	b580      	push	{r7, lr}
    c0c6:	b082      	sub	sp, #8
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	4603      	mov	r3, r0
    c0cc:	6039      	str	r1, [r7, #0]
    c0ce:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c0d0:	79fb      	ldrb	r3, [r7, #7]
    c0d2:	2b03      	cmp	r3, #3
    c0d4:	d822      	bhi.n	c11c <cdcdf_acm_register_callback+0x58>
    c0d6:	a201      	add	r2, pc, #4	; (adr r2, c0dc <cdcdf_acm_register_callback+0x18>)
    c0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c0dc:	0000c0ed 	.word	0x0000c0ed
    c0e0:	0000c0fd 	.word	0x0000c0fd
    c0e4:	0000c10d 	.word	0x0000c10d
    c0e8:	0000c115 	.word	0x0000c115
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c0ec:	4b0f      	ldr	r3, [pc, #60]	; (c12c <cdcdf_acm_register_callback+0x68>)
    c0ee:	791b      	ldrb	r3, [r3, #4]
    c0f0:	683a      	ldr	r2, [r7, #0]
    c0f2:	2102      	movs	r1, #2
    c0f4:	4618      	mov	r0, r3
    c0f6:	4b0e      	ldr	r3, [pc, #56]	; (c130 <cdcdf_acm_register_callback+0x6c>)
    c0f8:	4798      	blx	r3
		break;
    c0fa:	e012      	b.n	c122 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c0fc:	4b0b      	ldr	r3, [pc, #44]	; (c12c <cdcdf_acm_register_callback+0x68>)
    c0fe:	78db      	ldrb	r3, [r3, #3]
    c100:	683a      	ldr	r2, [r7, #0]
    c102:	2102      	movs	r1, #2
    c104:	4618      	mov	r0, r3
    c106:	4b0a      	ldr	r3, [pc, #40]	; (c130 <cdcdf_acm_register_callback+0x6c>)
    c108:	4798      	blx	r3
		break;
    c10a:	e00a      	b.n	c122 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c10c:	4a09      	ldr	r2, [pc, #36]	; (c134 <cdcdf_acm_register_callback+0x70>)
    c10e:	683b      	ldr	r3, [r7, #0]
    c110:	6013      	str	r3, [r2, #0]
		break;
    c112:	e006      	b.n	c122 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c114:	4a08      	ldr	r2, [pc, #32]	; (c138 <cdcdf_acm_register_callback+0x74>)
    c116:	683b      	ldr	r3, [r7, #0]
    c118:	6013      	str	r3, [r2, #0]
		break;
    c11a:	e002      	b.n	c122 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c11c:	f06f 030c 	mvn.w	r3, #12
    c120:	e000      	b.n	c124 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c122:	2300      	movs	r3, #0
}
    c124:	4618      	mov	r0, r3
    c126:	3708      	adds	r7, #8
    c128:	46bd      	mov	sp, r7
    c12a:	bd80      	pop	{r7, pc}
    c12c:	20001024 	.word	0x20001024
    c130:	00003605 	.word	0x00003605
    c134:	20001038 	.word	0x20001038
    c138:	20001034 	.word	0x20001034

0000c13c <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c13c:	b480      	push	{r7}
    c13e:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c140:	4b03      	ldr	r3, [pc, #12]	; (c150 <cdcdf_acm_is_enabled+0x14>)
    c142:	795b      	ldrb	r3, [r3, #5]
}
    c144:	4618      	mov	r0, r3
    c146:	46bd      	mov	sp, r7
    c148:	f85d 7b04 	ldr.w	r7, [sp], #4
    c14c:	4770      	bx	lr
    c14e:	bf00      	nop
    c150:	20001024 	.word	0x20001024

0000c154 <usb_get_u16>:
{
    c154:	b480      	push	{r7}
    c156:	b083      	sub	sp, #12
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c15c:	687b      	ldr	r3, [r7, #4]
    c15e:	781b      	ldrb	r3, [r3, #0]
    c160:	b29a      	uxth	r2, r3
    c162:	687b      	ldr	r3, [r7, #4]
    c164:	3301      	adds	r3, #1
    c166:	781b      	ldrb	r3, [r3, #0]
    c168:	b29b      	uxth	r3, r3
    c16a:	021b      	lsls	r3, r3, #8
    c16c:	b29b      	uxth	r3, r3
    c16e:	4413      	add	r3, r2
    c170:	b29b      	uxth	r3, r3
}
    c172:	4618      	mov	r0, r3
    c174:	370c      	adds	r7, #12
    c176:	46bd      	mov	sp, r7
    c178:	f85d 7b04 	ldr.w	r7, [sp], #4
    c17c:	4770      	bx	lr

0000c17e <usb_desc_len>:
{
    c17e:	b480      	push	{r7}
    c180:	b083      	sub	sp, #12
    c182:	af00      	add	r7, sp, #0
    c184:	6078      	str	r0, [r7, #4]
	return desc[0];
    c186:	687b      	ldr	r3, [r7, #4]
    c188:	781b      	ldrb	r3, [r3, #0]
}
    c18a:	4618      	mov	r0, r3
    c18c:	370c      	adds	r7, #12
    c18e:	46bd      	mov	sp, r7
    c190:	f85d 7b04 	ldr.w	r7, [sp], #4
    c194:	4770      	bx	lr
	...

0000c198 <usb_desc_next>:
{
    c198:	b580      	push	{r7, lr}
    c19a:	b082      	sub	sp, #8
    c19c:	af00      	add	r7, sp, #0
    c19e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c1a0:	6878      	ldr	r0, [r7, #4]
    c1a2:	4b05      	ldr	r3, [pc, #20]	; (c1b8 <usb_desc_next+0x20>)
    c1a4:	4798      	blx	r3
    c1a6:	4603      	mov	r3, r0
    c1a8:	461a      	mov	r2, r3
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	4413      	add	r3, r2
}
    c1ae:	4618      	mov	r0, r3
    c1b0:	3708      	adds	r7, #8
    c1b2:	46bd      	mov	sp, r7
    c1b4:	bd80      	pop	{r7, pc}
    c1b6:	bf00      	nop
    c1b8:	0000c17f 	.word	0x0000c17f

0000c1bc <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c1bc:	b580      	push	{r7, lr}
    c1be:	b082      	sub	sp, #8
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c1c4:	687b      	ldr	r3, [r7, #4]
    c1c6:	3302      	adds	r3, #2
    c1c8:	4618      	mov	r0, r3
    c1ca:	4b03      	ldr	r3, [pc, #12]	; (c1d8 <usb_cfg_desc_total_len+0x1c>)
    c1cc:	4798      	blx	r3
    c1ce:	4603      	mov	r3, r0
}
    c1d0:	4618      	mov	r0, r3
    c1d2:	3708      	adds	r7, #8
    c1d4:	46bd      	mov	sp, r7
    c1d6:	bd80      	pop	{r7, pc}
    c1d8:	0000c155 	.word	0x0000c155

0000c1dc <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c1dc:	b590      	push	{r4, r7, lr}
    c1de:	b085      	sub	sp, #20
    c1e0:	af00      	add	r7, sp, #0
    c1e2:	4603      	mov	r3, r0
    c1e4:	6039      	str	r1, [r7, #0]
    c1e6:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c1e8:	2300      	movs	r3, #0
    c1ea:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c1ec:	683b      	ldr	r3, [r7, #0]
    c1ee:	799a      	ldrb	r2, [r3, #6]
    c1f0:	79db      	ldrb	r3, [r3, #7]
    c1f2:	021b      	lsls	r3, r3, #8
    c1f4:	4313      	orrs	r3, r2
    c1f6:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c1f8:	897b      	ldrh	r3, [r7, #10]
    c1fa:	2b12      	cmp	r3, #18
    c1fc:	d901      	bls.n	c202 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c1fe:	2312      	movs	r3, #18
    c200:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c202:	68fb      	ldr	r3, [r7, #12]
    c204:	2b00      	cmp	r3, #0
    c206:	d10a      	bne.n	c21e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c208:	4b0f      	ldr	r3, [pc, #60]	; (c248 <usbdc_get_dev_desc+0x6c>)
    c20a:	681b      	ldr	r3, [r3, #0]
    c20c:	6818      	ldr	r0, [r3, #0]
    c20e:	4b0e      	ldr	r3, [pc, #56]	; (c248 <usbdc_get_dev_desc+0x6c>)
    c210:	681b      	ldr	r3, [r3, #0]
    c212:	685b      	ldr	r3, [r3, #4]
    c214:	2201      	movs	r2, #1
    c216:	4619      	mov	r1, r3
    c218:	4b0c      	ldr	r3, [pc, #48]	; (c24c <usbdc_get_dev_desc+0x70>)
    c21a:	4798      	blx	r3
    c21c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c21e:	68fb      	ldr	r3, [r7, #12]
    c220:	2b00      	cmp	r3, #0
    c222:	d101      	bne.n	c228 <usbdc_get_dev_desc+0x4c>
		return false;
    c224:	2300      	movs	r3, #0
    c226:	e00b      	b.n	c240 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c228:	897a      	ldrh	r2, [r7, #10]
    c22a:	79f8      	ldrb	r0, [r7, #7]
    c22c:	2300      	movs	r3, #0
    c22e:	68f9      	ldr	r1, [r7, #12]
    c230:	4c07      	ldr	r4, [pc, #28]	; (c250 <usbdc_get_dev_desc+0x74>)
    c232:	47a0      	blx	r4
    c234:	4603      	mov	r3, r0
    c236:	2b00      	cmp	r3, #0
    c238:	d001      	beq.n	c23e <usbdc_get_dev_desc+0x62>
		return false;
    c23a:	2300      	movs	r3, #0
    c23c:	e000      	b.n	c240 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c23e:	2301      	movs	r3, #1
}
    c240:	4618      	mov	r0, r3
    c242:	3714      	adds	r7, #20
    c244:	46bd      	mov	sp, r7
    c246:	bd90      	pop	{r4, r7, pc}
    c248:	2000103c 	.word	0x2000103c
    c24c:	0000cf51 	.word	0x0000cf51
    c250:	0000ccc1 	.word	0x0000ccc1

0000c254 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c254:	b590      	push	{r4, r7, lr}
    c256:	b087      	sub	sp, #28
    c258:	af00      	add	r7, sp, #0
    c25a:	4603      	mov	r3, r0
    c25c:	6039      	str	r1, [r7, #0]
    c25e:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c260:	2300      	movs	r3, #0
    c262:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c264:	683b      	ldr	r3, [r7, #0]
    c266:	799a      	ldrb	r2, [r3, #6]
    c268:	79db      	ldrb	r3, [r3, #7]
    c26a:	021b      	lsls	r3, r3, #8
    c26c:	4313      	orrs	r3, r2
    c26e:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c270:	683b      	ldr	r3, [r7, #0]
    c272:	885b      	ldrh	r3, [r3, #2]
    c274:	b29b      	uxth	r3, r3
    c276:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c278:	8a7a      	ldrh	r2, [r7, #18]
    c27a:	4b1e      	ldr	r3, [pc, #120]	; (c2f4 <usbdc_get_cfg_desc+0xa0>)
    c27c:	7f1b      	ldrb	r3, [r3, #28]
    c27e:	3b01      	subs	r3, #1
    c280:	4013      	ands	r3, r2
    c282:	2b00      	cmp	r3, #0
    c284:	bf0c      	ite	eq
    c286:	2301      	moveq	r3, #1
    c288:	2300      	movne	r3, #0
    c28a:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c28c:	697b      	ldr	r3, [r7, #20]
    c28e:	2b00      	cmp	r3, #0
    c290:	d10c      	bne.n	c2ac <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c292:	4b18      	ldr	r3, [pc, #96]	; (c2f4 <usbdc_get_cfg_desc+0xa0>)
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	6818      	ldr	r0, [r3, #0]
    c298:	4b16      	ldr	r3, [pc, #88]	; (c2f4 <usbdc_get_cfg_desc+0xa0>)
    c29a:	681b      	ldr	r3, [r3, #0]
    c29c:	6859      	ldr	r1, [r3, #4]
    c29e:	7c3b      	ldrb	r3, [r7, #16]
    c2a0:	3301      	adds	r3, #1
    c2a2:	b2db      	uxtb	r3, r3
    c2a4:	461a      	mov	r2, r3
    c2a6:	4b14      	ldr	r3, [pc, #80]	; (c2f8 <usbdc_get_cfg_desc+0xa4>)
    c2a8:	4798      	blx	r3
    c2aa:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c2ac:	697b      	ldr	r3, [r7, #20]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d101      	bne.n	c2b6 <usbdc_get_cfg_desc+0x62>
		return false;
    c2b2:	2300      	movs	r3, #0
    c2b4:	e019      	b.n	c2ea <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c2b6:	6978      	ldr	r0, [r7, #20]
    c2b8:	4b10      	ldr	r3, [pc, #64]	; (c2fc <usbdc_get_cfg_desc+0xa8>)
    c2ba:	4798      	blx	r3
    c2bc:	4603      	mov	r3, r0
    c2be:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c2c0:	8a7a      	ldrh	r2, [r7, #18]
    c2c2:	89fb      	ldrh	r3, [r7, #14]
    c2c4:	429a      	cmp	r2, r3
    c2c6:	d802      	bhi.n	c2ce <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c2c8:	2300      	movs	r3, #0
    c2ca:	747b      	strb	r3, [r7, #17]
    c2cc:	e001      	b.n	c2d2 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c2ce:	89fb      	ldrh	r3, [r7, #14]
    c2d0:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c2d2:	8a7a      	ldrh	r2, [r7, #18]
    c2d4:	7c7b      	ldrb	r3, [r7, #17]
    c2d6:	79f8      	ldrb	r0, [r7, #7]
    c2d8:	6979      	ldr	r1, [r7, #20]
    c2da:	4c09      	ldr	r4, [pc, #36]	; (c300 <usbdc_get_cfg_desc+0xac>)
    c2dc:	47a0      	blx	r4
    c2de:	4603      	mov	r3, r0
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d001      	beq.n	c2e8 <usbdc_get_cfg_desc+0x94>
		return false;
    c2e4:	2300      	movs	r3, #0
    c2e6:	e000      	b.n	c2ea <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c2e8:	2301      	movs	r3, #1
}
    c2ea:	4618      	mov	r0, r3
    c2ec:	371c      	adds	r7, #28
    c2ee:	46bd      	mov	sp, r7
    c2f0:	bd90      	pop	{r4, r7, pc}
    c2f2:	bf00      	nop
    c2f4:	2000103c 	.word	0x2000103c
    c2f8:	0000d011 	.word	0x0000d011
    c2fc:	0000c1bd 	.word	0x0000c1bd
    c300:	0000ccc1 	.word	0x0000ccc1

0000c304 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c304:	b590      	push	{r4, r7, lr}
    c306:	b085      	sub	sp, #20
    c308:	af00      	add	r7, sp, #0
    c30a:	4603      	mov	r3, r0
    c30c:	6039      	str	r1, [r7, #0]
    c30e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c310:	683b      	ldr	r3, [r7, #0]
    c312:	799a      	ldrb	r2, [r3, #6]
    c314:	79db      	ldrb	r3, [r3, #7]
    c316:	021b      	lsls	r3, r3, #8
    c318:	4313      	orrs	r3, r2
    c31a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c31c:	683b      	ldr	r3, [r7, #0]
    c31e:	885b      	ldrh	r3, [r3, #2]
    c320:	b29b      	uxth	r3, r3
    c322:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c324:	89fa      	ldrh	r2, [r7, #14]
    c326:	4b1a      	ldr	r3, [pc, #104]	; (c390 <usbdc_get_str_desc+0x8c>)
    c328:	7f1b      	ldrb	r3, [r3, #28]
    c32a:	3b01      	subs	r3, #1
    c32c:	4013      	ands	r3, r2
    c32e:	2b00      	cmp	r3, #0
    c330:	bf0c      	ite	eq
    c332:	2301      	moveq	r3, #1
    c334:	2300      	movne	r3, #0
    c336:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c338:	4b15      	ldr	r3, [pc, #84]	; (c390 <usbdc_get_str_desc+0x8c>)
    c33a:	681b      	ldr	r3, [r3, #0]
    c33c:	6818      	ldr	r0, [r3, #0]
    c33e:	4b14      	ldr	r3, [pc, #80]	; (c390 <usbdc_get_str_desc+0x8c>)
    c340:	681b      	ldr	r3, [r3, #0]
    c342:	685b      	ldr	r3, [r3, #4]
    c344:	7b3a      	ldrb	r2, [r7, #12]
    c346:	4619      	mov	r1, r3
    c348:	4b12      	ldr	r3, [pc, #72]	; (c394 <usbdc_get_str_desc+0x90>)
    c34a:	4798      	blx	r3
    c34c:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c34e:	68bb      	ldr	r3, [r7, #8]
    c350:	2b00      	cmp	r3, #0
    c352:	d101      	bne.n	c358 <usbdc_get_str_desc+0x54>
		return false;
    c354:	2300      	movs	r3, #0
    c356:	e017      	b.n	c388 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c358:	68bb      	ldr	r3, [r7, #8]
    c35a:	781b      	ldrb	r3, [r3, #0]
    c35c:	b29b      	uxth	r3, r3
    c35e:	89fa      	ldrh	r2, [r7, #14]
    c360:	429a      	cmp	r2, r3
    c362:	d802      	bhi.n	c36a <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c364:	2300      	movs	r3, #0
    c366:	737b      	strb	r3, [r7, #13]
    c368:	e002      	b.n	c370 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c36a:	68bb      	ldr	r3, [r7, #8]
    c36c:	781b      	ldrb	r3, [r3, #0]
    c36e:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c370:	89fa      	ldrh	r2, [r7, #14]
    c372:	7b7b      	ldrb	r3, [r7, #13]
    c374:	79f8      	ldrb	r0, [r7, #7]
    c376:	68b9      	ldr	r1, [r7, #8]
    c378:	4c07      	ldr	r4, [pc, #28]	; (c398 <usbdc_get_str_desc+0x94>)
    c37a:	47a0      	blx	r4
    c37c:	4603      	mov	r3, r0
    c37e:	2b00      	cmp	r3, #0
    c380:	d001      	beq.n	c386 <usbdc_get_str_desc+0x82>
		return false;
    c382:	2300      	movs	r3, #0
    c384:	e000      	b.n	c388 <usbdc_get_str_desc+0x84>
	}
	return true;
    c386:	2301      	movs	r3, #1
}
    c388:	4618      	mov	r0, r3
    c38a:	3714      	adds	r7, #20
    c38c:	46bd      	mov	sp, r7
    c38e:	bd90      	pop	{r4, r7, pc}
    c390:	2000103c 	.word	0x2000103c
    c394:	0000d089 	.word	0x0000d089
    c398:	0000ccc1 	.word	0x0000ccc1

0000c39c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c39c:	b580      	push	{r7, lr}
    c39e:	b084      	sub	sp, #16
    c3a0:	af00      	add	r7, sp, #0
    c3a2:	4603      	mov	r3, r0
    c3a4:	6039      	str	r1, [r7, #0]
    c3a6:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c3a8:	683b      	ldr	r3, [r7, #0]
    c3aa:	885b      	ldrh	r3, [r3, #2]
    c3ac:	b29b      	uxth	r3, r3
    c3ae:	0a1b      	lsrs	r3, r3, #8
    c3b0:	b29b      	uxth	r3, r3
    c3b2:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c3b4:	7bfb      	ldrb	r3, [r7, #15]
    c3b6:	2b02      	cmp	r3, #2
    c3b8:	d00d      	beq.n	c3d6 <usbdc_get_desc_req+0x3a>
    c3ba:	2b03      	cmp	r3, #3
    c3bc:	d012      	beq.n	c3e4 <usbdc_get_desc_req+0x48>
    c3be:	2b01      	cmp	r3, #1
    c3c0:	d002      	beq.n	c3c8 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c3c2:	bf00      	nop
	}
	return false;
    c3c4:	2300      	movs	r3, #0
    c3c6:	e013      	b.n	c3f0 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c3c8:	79fb      	ldrb	r3, [r7, #7]
    c3ca:	6839      	ldr	r1, [r7, #0]
    c3cc:	4618      	mov	r0, r3
    c3ce:	4b0a      	ldr	r3, [pc, #40]	; (c3f8 <usbdc_get_desc_req+0x5c>)
    c3d0:	4798      	blx	r3
    c3d2:	4603      	mov	r3, r0
    c3d4:	e00c      	b.n	c3f0 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c3d6:	79fb      	ldrb	r3, [r7, #7]
    c3d8:	6839      	ldr	r1, [r7, #0]
    c3da:	4618      	mov	r0, r3
    c3dc:	4b07      	ldr	r3, [pc, #28]	; (c3fc <usbdc_get_desc_req+0x60>)
    c3de:	4798      	blx	r3
    c3e0:	4603      	mov	r3, r0
    c3e2:	e005      	b.n	c3f0 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c3e4:	79fb      	ldrb	r3, [r7, #7]
    c3e6:	6839      	ldr	r1, [r7, #0]
    c3e8:	4618      	mov	r0, r3
    c3ea:	4b05      	ldr	r3, [pc, #20]	; (c400 <usbdc_get_desc_req+0x64>)
    c3ec:	4798      	blx	r3
    c3ee:	4603      	mov	r3, r0
}
    c3f0:	4618      	mov	r0, r3
    c3f2:	3710      	adds	r7, #16
    c3f4:	46bd      	mov	sp, r7
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	0000c1dd 	.word	0x0000c1dd
    c3fc:	0000c255 	.word	0x0000c255
    c400:	0000c305 	.word	0x0000c305

0000c404 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c404:	b590      	push	{r4, r7, lr}
    c406:	b085      	sub	sp, #20
    c408:	af00      	add	r7, sp, #0
    c40a:	4603      	mov	r3, r0
    c40c:	6039      	str	r1, [r7, #0]
    c40e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c410:	683b      	ldr	r3, [r7, #0]
    c412:	781b      	ldrb	r3, [r3, #0]
    c414:	f003 031f 	and.w	r3, r3, #31
    c418:	2b00      	cmp	r3, #0
    c41a:	db1b      	blt.n	c454 <usbdc_get_status_req+0x50>
    c41c:	2b01      	cmp	r3, #1
    c41e:	dd02      	ble.n	c426 <usbdc_get_status_req+0x22>
    c420:	2b02      	cmp	r3, #2
    c422:	d003      	beq.n	c42c <usbdc_get_status_req+0x28>
    c424:	e016      	b.n	c454 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c426:	2300      	movs	r3, #0
    c428:	60fb      	str	r3, [r7, #12]
		break;
    c42a:	e015      	b.n	c458 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c42c:	683b      	ldr	r3, [r7, #0]
    c42e:	889b      	ldrh	r3, [r3, #4]
    c430:	b29b      	uxth	r3, r3
    c432:	b2db      	uxtb	r3, r3
    c434:	2102      	movs	r1, #2
    c436:	4618      	mov	r0, r3
    c438:	4b0f      	ldr	r3, [pc, #60]	; (c478 <usbdc_get_status_req+0x74>)
    c43a:	4798      	blx	r3
    c43c:	4603      	mov	r3, r0
    c43e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c440:	68fb      	ldr	r3, [r7, #12]
    c442:	2b00      	cmp	r3, #0
    c444:	da01      	bge.n	c44a <usbdc_get_status_req+0x46>
			return false;
    c446:	2300      	movs	r3, #0
    c448:	e012      	b.n	c470 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c44a:	68fb      	ldr	r3, [r7, #12]
    c44c:	f003 0301 	and.w	r3, r3, #1
    c450:	60fb      	str	r3, [r7, #12]
		break;
    c452:	e001      	b.n	c458 <usbdc_get_status_req+0x54>
	default:
		return false;
    c454:	2300      	movs	r3, #0
    c456:	e00b      	b.n	c470 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c458:	4b08      	ldr	r3, [pc, #32]	; (c47c <usbdc_get_status_req+0x78>)
    c45a:	695b      	ldr	r3, [r3, #20]
    c45c:	89ba      	ldrh	r2, [r7, #12]
    c45e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c460:	4b06      	ldr	r3, [pc, #24]	; (c47c <usbdc_get_status_req+0x78>)
    c462:	6959      	ldr	r1, [r3, #20]
    c464:	79f8      	ldrb	r0, [r7, #7]
    c466:	2300      	movs	r3, #0
    c468:	2202      	movs	r2, #2
    c46a:	4c05      	ldr	r4, [pc, #20]	; (c480 <usbdc_get_status_req+0x7c>)
    c46c:	47a0      	blx	r4
	return true;
    c46e:	2301      	movs	r3, #1
}
    c470:	4618      	mov	r0, r3
    c472:	3714      	adds	r7, #20
    c474:	46bd      	mov	sp, r7
    c476:	bd90      	pop	{r4, r7, pc}
    c478:	000035b1 	.word	0x000035b1
    c47c:	2000103c 	.word	0x2000103c
    c480:	0000ccc1 	.word	0x0000ccc1

0000c484 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c484:	b590      	push	{r4, r7, lr}
    c486:	b085      	sub	sp, #20
    c488:	af00      	add	r7, sp, #0
    c48a:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c48c:	4b1f      	ldr	r3, [pc, #124]	; (c50c <usbdc_get_interface+0x88>)
    c48e:	691b      	ldr	r3, [r3, #16]
    c490:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c492:	4b1e      	ldr	r3, [pc, #120]	; (c50c <usbdc_get_interface+0x88>)
    c494:	7f5b      	ldrb	r3, [r3, #29]
    c496:	461a      	mov	r2, r3
    c498:	687b      	ldr	r3, [r7, #4]
    c49a:	889b      	ldrh	r3, [r3, #4]
    c49c:	b29b      	uxth	r3, r3
    c49e:	fa42 f303 	asr.w	r3, r2, r3
    c4a2:	f003 0301 	and.w	r3, r3, #1
    c4a6:	2b00      	cmp	r3, #0
    c4a8:	d128      	bne.n	c4fc <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c4aa:	4b18      	ldr	r3, [pc, #96]	; (c50c <usbdc_get_interface+0x88>)
    c4ac:	695b      	ldr	r3, [r3, #20]
    c4ae:	2200      	movs	r2, #0
    c4b0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c4b2:	4b16      	ldr	r3, [pc, #88]	; (c50c <usbdc_get_interface+0x88>)
    c4b4:	6959      	ldr	r1, [r3, #20]
    c4b6:	2300      	movs	r3, #0
    c4b8:	2201      	movs	r2, #1
    c4ba:	2000      	movs	r0, #0
    c4bc:	4c14      	ldr	r4, [pc, #80]	; (c510 <usbdc_get_interface+0x8c>)
    c4be:	47a0      	blx	r4
		return true;
    c4c0:	2301      	movs	r3, #1
    c4c2:	e01f      	b.n	c504 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c4c4:	68fb      	ldr	r3, [r7, #12]
    c4c6:	685b      	ldr	r3, [r3, #4]
    c4c8:	687a      	ldr	r2, [r7, #4]
    c4ca:	2102      	movs	r1, #2
    c4cc:	68f8      	ldr	r0, [r7, #12]
    c4ce:	4798      	blx	r3
    c4d0:	60b8      	str	r0, [r7, #8]
    c4d2:	68bb      	ldr	r3, [r7, #8]
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	da03      	bge.n	c4e0 <usbdc_get_interface+0x5c>
			func = func->next;
    c4d8:	68fb      	ldr	r3, [r7, #12]
    c4da:	681b      	ldr	r3, [r3, #0]
    c4dc:	60fb      	str	r3, [r7, #12]
    c4de:	e00d      	b.n	c4fc <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c4e0:	4b0a      	ldr	r3, [pc, #40]	; (c50c <usbdc_get_interface+0x88>)
    c4e2:	695b      	ldr	r3, [r3, #20]
    c4e4:	68ba      	ldr	r2, [r7, #8]
    c4e6:	b2d2      	uxtb	r2, r2
    c4e8:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c4ea:	4b08      	ldr	r3, [pc, #32]	; (c50c <usbdc_get_interface+0x88>)
    c4ec:	6959      	ldr	r1, [r3, #20]
    c4ee:	2300      	movs	r3, #0
    c4f0:	2201      	movs	r2, #1
    c4f2:	2000      	movs	r0, #0
    c4f4:	4c06      	ldr	r4, [pc, #24]	; (c510 <usbdc_get_interface+0x8c>)
    c4f6:	47a0      	blx	r4
			return true;
    c4f8:	2301      	movs	r3, #1
    c4fa:	e003      	b.n	c504 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c4fc:	68fb      	ldr	r3, [r7, #12]
    c4fe:	2b00      	cmp	r3, #0
    c500:	d1e0      	bne.n	c4c4 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c502:	2300      	movs	r3, #0
}
    c504:	4618      	mov	r0, r3
    c506:	3714      	adds	r7, #20
    c508:	46bd      	mov	sp, r7
    c50a:	bd90      	pop	{r4, r7, pc}
    c50c:	2000103c 	.word	0x2000103c
    c510:	0000ccc1 	.word	0x0000ccc1

0000c514 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c514:	b590      	push	{r4, r7, lr}
    c516:	b083      	sub	sp, #12
    c518:	af00      	add	r7, sp, #0
    c51a:	4603      	mov	r3, r0
    c51c:	6039      	str	r1, [r7, #0]
    c51e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c520:	683b      	ldr	r3, [r7, #0]
    c522:	785b      	ldrb	r3, [r3, #1]
    c524:	2b0a      	cmp	r3, #10
    c526:	d83a      	bhi.n	c59e <usbdc_get_req+0x8a>
    c528:	a201      	add	r2, pc, #4	; (adr r2, c530 <usbdc_get_req+0x1c>)
    c52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c52e:	bf00      	nop
    c530:	0000c587 	.word	0x0000c587
    c534:	0000c59f 	.word	0x0000c59f
    c538:	0000c59f 	.word	0x0000c59f
    c53c:	0000c59f 	.word	0x0000c59f
    c540:	0000c59f 	.word	0x0000c59f
    c544:	0000c59f 	.word	0x0000c59f
    c548:	0000c55d 	.word	0x0000c55d
    c54c:	0000c59f 	.word	0x0000c59f
    c550:	0000c56b 	.word	0x0000c56b
    c554:	0000c59f 	.word	0x0000c59f
    c558:	0000c595 	.word	0x0000c595
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c55c:	79fb      	ldrb	r3, [r7, #7]
    c55e:	6839      	ldr	r1, [r7, #0]
    c560:	4618      	mov	r0, r3
    c562:	4b11      	ldr	r3, [pc, #68]	; (c5a8 <usbdc_get_req+0x94>)
    c564:	4798      	blx	r3
    c566:	4603      	mov	r3, r0
    c568:	e01a      	b.n	c5a0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c56a:	4b10      	ldr	r3, [pc, #64]	; (c5ac <usbdc_get_req+0x98>)
    c56c:	695b      	ldr	r3, [r3, #20]
    c56e:	4a0f      	ldr	r2, [pc, #60]	; (c5ac <usbdc_get_req+0x98>)
    c570:	7ed2      	ldrb	r2, [r2, #27]
    c572:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c574:	4b0d      	ldr	r3, [pc, #52]	; (c5ac <usbdc_get_req+0x98>)
    c576:	6959      	ldr	r1, [r3, #20]
    c578:	79f8      	ldrb	r0, [r7, #7]
    c57a:	2300      	movs	r3, #0
    c57c:	2201      	movs	r2, #1
    c57e:	4c0c      	ldr	r4, [pc, #48]	; (c5b0 <usbdc_get_req+0x9c>)
    c580:	47a0      	blx	r4
		return true;
    c582:	2301      	movs	r3, #1
    c584:	e00c      	b.n	c5a0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c586:	79fb      	ldrb	r3, [r7, #7]
    c588:	6839      	ldr	r1, [r7, #0]
    c58a:	4618      	mov	r0, r3
    c58c:	4b09      	ldr	r3, [pc, #36]	; (c5b4 <usbdc_get_req+0xa0>)
    c58e:	4798      	blx	r3
    c590:	4603      	mov	r3, r0
    c592:	e005      	b.n	c5a0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c594:	6838      	ldr	r0, [r7, #0]
    c596:	4b08      	ldr	r3, [pc, #32]	; (c5b8 <usbdc_get_req+0xa4>)
    c598:	4798      	blx	r3
    c59a:	4603      	mov	r3, r0
    c59c:	e000      	b.n	c5a0 <usbdc_get_req+0x8c>
	default:
		return false;
    c59e:	2300      	movs	r3, #0
	}
}
    c5a0:	4618      	mov	r0, r3
    c5a2:	370c      	adds	r7, #12
    c5a4:	46bd      	mov	sp, r7
    c5a6:	bd90      	pop	{r4, r7, pc}
    c5a8:	0000c39d 	.word	0x0000c39d
    c5ac:	2000103c 	.word	0x2000103c
    c5b0:	0000ccc1 	.word	0x0000ccc1
    c5b4:	0000c405 	.word	0x0000c405
    c5b8:	0000c485 	.word	0x0000c485

0000c5bc <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c5bc:	b590      	push	{r4, r7, lr}
    c5be:	b083      	sub	sp, #12
    c5c0:	af00      	add	r7, sp, #0
    c5c2:	4603      	mov	r3, r0
    c5c4:	6039      	str	r1, [r7, #0]
    c5c6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c5c8:	683b      	ldr	r3, [r7, #0]
    c5ca:	781b      	ldrb	r3, [r3, #0]
    c5cc:	f003 031f 	and.w	r3, r3, #31
    c5d0:	2b02      	cmp	r3, #2
    c5d2:	d116      	bne.n	c602 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c5d4:	683b      	ldr	r3, [r7, #0]
    c5d6:	88db      	ldrh	r3, [r3, #6]
    c5d8:	b29b      	uxth	r3, r3
    c5da:	2b00      	cmp	r3, #0
    c5dc:	d001      	beq.n	c5e2 <usbdc_clear_ftr_req+0x26>
			return false;
    c5de:	2300      	movs	r3, #0
    c5e0:	e010      	b.n	c604 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c5e2:	683b      	ldr	r3, [r7, #0]
    c5e4:	889b      	ldrh	r3, [r3, #4]
    c5e6:	b29b      	uxth	r3, r3
    c5e8:	b2db      	uxtb	r3, r3
    c5ea:	2100      	movs	r1, #0
    c5ec:	4618      	mov	r0, r3
    c5ee:	4b07      	ldr	r3, [pc, #28]	; (c60c <usbdc_clear_ftr_req+0x50>)
    c5f0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c5f2:	79f8      	ldrb	r0, [r7, #7]
    c5f4:	2301      	movs	r3, #1
    c5f6:	2200      	movs	r2, #0
    c5f8:	2100      	movs	r1, #0
    c5fa:	4c05      	ldr	r4, [pc, #20]	; (c610 <usbdc_clear_ftr_req+0x54>)
    c5fc:	47a0      	blx	r4
		return true;
    c5fe:	2301      	movs	r3, #1
    c600:	e000      	b.n	c604 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c602:	2300      	movs	r3, #0
	}
}
    c604:	4618      	mov	r0, r3
    c606:	370c      	adds	r7, #12
    c608:	46bd      	mov	sp, r7
    c60a:	bd90      	pop	{r4, r7, pc}
    c60c:	000035b1 	.word	0x000035b1
    c610:	0000ccc1 	.word	0x0000ccc1

0000c614 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c614:	b590      	push	{r4, r7, lr}
    c616:	b083      	sub	sp, #12
    c618:	af00      	add	r7, sp, #0
    c61a:	4603      	mov	r3, r0
    c61c:	6039      	str	r1, [r7, #0]
    c61e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c620:	683b      	ldr	r3, [r7, #0]
    c622:	781b      	ldrb	r3, [r3, #0]
    c624:	f003 031f 	and.w	r3, r3, #31
    c628:	2b02      	cmp	r3, #2
    c62a:	d116      	bne.n	c65a <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c62c:	683b      	ldr	r3, [r7, #0]
    c62e:	88db      	ldrh	r3, [r3, #6]
    c630:	b29b      	uxth	r3, r3
    c632:	2b00      	cmp	r3, #0
    c634:	d001      	beq.n	c63a <usbdc_set_ftr_req+0x26>
			return false;
    c636:	2300      	movs	r3, #0
    c638:	e010      	b.n	c65c <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c63a:	683b      	ldr	r3, [r7, #0]
    c63c:	889b      	ldrh	r3, [r3, #4]
    c63e:	b29b      	uxth	r3, r3
    c640:	b2db      	uxtb	r3, r3
    c642:	2101      	movs	r1, #1
    c644:	4618      	mov	r0, r3
    c646:	4b07      	ldr	r3, [pc, #28]	; (c664 <usbdc_set_ftr_req+0x50>)
    c648:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c64a:	79f8      	ldrb	r0, [r7, #7]
    c64c:	2301      	movs	r3, #1
    c64e:	2200      	movs	r2, #0
    c650:	2100      	movs	r1, #0
    c652:	4c05      	ldr	r4, [pc, #20]	; (c668 <usbdc_set_ftr_req+0x54>)
    c654:	47a0      	blx	r4
		return true;
    c656:	2301      	movs	r3, #1
    c658:	e000      	b.n	c65c <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c65a:	2300      	movs	r3, #0
	}
}
    c65c:	4618      	mov	r0, r3
    c65e:	370c      	adds	r7, #12
    c660:	46bd      	mov	sp, r7
    c662:	bd90      	pop	{r4, r7, pc}
    c664:	000035b1 	.word	0x000035b1
    c668:	0000ccc1 	.word	0x0000ccc1

0000c66c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c66c:	b580      	push	{r7, lr}
    c66e:	b082      	sub	sp, #8
    c670:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c672:	4b0a      	ldr	r3, [pc, #40]	; (c69c <usbdc_unconfig+0x30>)
    c674:	691b      	ldr	r3, [r3, #16]
    c676:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c678:	e008      	b.n	c68c <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c67a:	687b      	ldr	r3, [r7, #4]
    c67c:	685b      	ldr	r3, [r3, #4]
    c67e:	2200      	movs	r2, #0
    c680:	2101      	movs	r1, #1
    c682:	6878      	ldr	r0, [r7, #4]
    c684:	4798      	blx	r3
		func = func->next;
    c686:	687b      	ldr	r3, [r7, #4]
    c688:	681b      	ldr	r3, [r3, #0]
    c68a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c68c:	687b      	ldr	r3, [r7, #4]
    c68e:	2b00      	cmp	r3, #0
    c690:	d1f3      	bne.n	c67a <usbdc_unconfig+0xe>
	}
}
    c692:	bf00      	nop
    c694:	3708      	adds	r7, #8
    c696:	46bd      	mov	sp, r7
    c698:	bd80      	pop	{r7, pc}
    c69a:	bf00      	nop
    c69c:	2000103c 	.word	0x2000103c

0000c6a0 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c6a0:	b580      	push	{r7, lr}
    c6a2:	b088      	sub	sp, #32
    c6a4:	af00      	add	r7, sp, #0
    c6a6:	4603      	mov	r3, r0
    c6a8:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c6aa:	2300      	movs	r3, #0
    c6ac:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c6ae:	23ff      	movs	r3, #255	; 0xff
    c6b0:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c6b2:	79fb      	ldrb	r3, [r7, #7]
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d103      	bne.n	c6c0 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c6b8:	4b2e      	ldr	r3, [pc, #184]	; (c774 <usbdc_set_config+0xd4>)
    c6ba:	4798      	blx	r3
		return true;
    c6bc:	2301      	movs	r3, #1
    c6be:	e055      	b.n	c76c <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c6c0:	69bb      	ldr	r3, [r7, #24]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d10a      	bne.n	c6dc <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c6c6:	4b2c      	ldr	r3, [pc, #176]	; (c778 <usbdc_set_config+0xd8>)
    c6c8:	681b      	ldr	r3, [r3, #0]
    c6ca:	6818      	ldr	r0, [r3, #0]
    c6cc:	4b2a      	ldr	r3, [pc, #168]	; (c778 <usbdc_set_config+0xd8>)
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	685b      	ldr	r3, [r3, #4]
    c6d2:	79fa      	ldrb	r2, [r7, #7]
    c6d4:	4619      	mov	r1, r3
    c6d6:	4b29      	ldr	r3, [pc, #164]	; (c77c <usbdc_set_config+0xdc>)
    c6d8:	4798      	blx	r3
    c6da:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c6dc:	69bb      	ldr	r3, [r7, #24]
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d101      	bne.n	c6e6 <usbdc_set_config+0x46>
		return false;
    c6e2:	2300      	movs	r3, #0
    c6e4:	e042      	b.n	c76c <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c6e6:	69b8      	ldr	r0, [r7, #24]
    c6e8:	4b25      	ldr	r3, [pc, #148]	; (c780 <usbdc_set_config+0xe0>)
    c6ea:	4798      	blx	r3
    c6ec:	4603      	mov	r3, r0
    c6ee:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c6f0:	8abb      	ldrh	r3, [r7, #20]
    c6f2:	69ba      	ldr	r2, [r7, #24]
    c6f4:	4413      	add	r3, r2
    c6f6:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c6f8:	693b      	ldr	r3, [r7, #16]
    c6fa:	2204      	movs	r2, #4
    c6fc:	4619      	mov	r1, r3
    c6fe:	69b8      	ldr	r0, [r7, #24]
    c700:	4b20      	ldr	r3, [pc, #128]	; (c784 <usbdc_set_config+0xe4>)
    c702:	4798      	blx	r3
    c704:	4603      	mov	r3, r0
    c706:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c708:	e02c      	b.n	c764 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c70a:	68fb      	ldr	r3, [r7, #12]
    c70c:	3302      	adds	r3, #2
    c70e:	781b      	ldrb	r3, [r3, #0]
    c710:	7dfa      	ldrb	r2, [r7, #23]
    c712:	429a      	cmp	r2, r3
    c714:	d018      	beq.n	c748 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c716:	68fb      	ldr	r3, [r7, #12]
    c718:	789b      	ldrb	r3, [r3, #2]
    c71a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c71c:	4b16      	ldr	r3, [pc, #88]	; (c778 <usbdc_set_config+0xd8>)
    c71e:	691b      	ldr	r3, [r3, #16]
    c720:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c722:	e00c      	b.n	c73e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c724:	69fb      	ldr	r3, [r7, #28]
    c726:	685b      	ldr	r3, [r3, #4]
    c728:	f107 020c 	add.w	r2, r7, #12
    c72c:	2100      	movs	r1, #0
    c72e:	69f8      	ldr	r0, [r7, #28]
    c730:	4798      	blx	r3
    c732:	4603      	mov	r3, r0
    c734:	2b00      	cmp	r3, #0
    c736:	d006      	beq.n	c746 <usbdc_set_config+0xa6>
					func = func->next;
    c738:	69fb      	ldr	r3, [r7, #28]
    c73a:	681b      	ldr	r3, [r3, #0]
    c73c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c73e:	69fb      	ldr	r3, [r7, #28]
    c740:	2b00      	cmp	r3, #0
    c742:	d1ef      	bne.n	c724 <usbdc_set_config+0x84>
    c744:	e000      	b.n	c748 <usbdc_set_config+0xa8>
				} else {
					break;
    c746:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c748:	68fb      	ldr	r3, [r7, #12]
    c74a:	4618      	mov	r0, r3
    c74c:	4b0e      	ldr	r3, [pc, #56]	; (c788 <usbdc_set_config+0xe8>)
    c74e:	4798      	blx	r3
    c750:	4603      	mov	r3, r0
    c752:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c754:	68fb      	ldr	r3, [r7, #12]
    c756:	6939      	ldr	r1, [r7, #16]
    c758:	2204      	movs	r2, #4
    c75a:	4618      	mov	r0, r3
    c75c:	4b09      	ldr	r3, [pc, #36]	; (c784 <usbdc_set_config+0xe4>)
    c75e:	4798      	blx	r3
    c760:	4603      	mov	r3, r0
    c762:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c764:	68fb      	ldr	r3, [r7, #12]
    c766:	2b00      	cmp	r3, #0
    c768:	d1cf      	bne.n	c70a <usbdc_set_config+0x6a>
	}
	return true;
    c76a:	2301      	movs	r3, #1
}
    c76c:	4618      	mov	r0, r3
    c76e:	3720      	adds	r7, #32
    c770:	46bd      	mov	sp, r7
    c772:	bd80      	pop	{r7, pc}
    c774:	0000c66d 	.word	0x0000c66d
    c778:	2000103c 	.word	0x2000103c
    c77c:	0000d011 	.word	0x0000d011
    c780:	0000c1bd 	.word	0x0000c1bd
    c784:	0000cf51 	.word	0x0000cf51
    c788:	0000c199 	.word	0x0000c199

0000c78c <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c78c:	b580      	push	{r7, lr}
    c78e:	b082      	sub	sp, #8
    c790:	af00      	add	r7, sp, #0
    c792:	4603      	mov	r3, r0
    c794:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c796:	79fb      	ldrb	r3, [r7, #7]
    c798:	4618      	mov	r0, r3
    c79a:	4b03      	ldr	r3, [pc, #12]	; (c7a8 <usbdc_set_address+0x1c>)
    c79c:	4798      	blx	r3
}
    c79e:	bf00      	nop
    c7a0:	3708      	adds	r7, #8
    c7a2:	46bd      	mov	sp, r7
    c7a4:	bd80      	pop	{r7, pc}
    c7a6:	bf00      	nop
    c7a8:	000031cd 	.word	0x000031cd

0000c7ac <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c7ac:	b590      	push	{r4, r7, lr}
    c7ae:	b087      	sub	sp, #28
    c7b0:	af00      	add	r7, sp, #0
    c7b2:	4603      	mov	r3, r0
    c7b4:	460a      	mov	r2, r1
    c7b6:	80fb      	strh	r3, [r7, #6]
    c7b8:	4613      	mov	r3, r2
    c7ba:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c7bc:	2300      	movs	r3, #0
    c7be:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c7c0:	693b      	ldr	r3, [r7, #16]
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	d10b      	bne.n	c7de <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c7c6:	4b43      	ldr	r3, [pc, #268]	; (c8d4 <usbdc_set_interface+0x128>)
    c7c8:	681b      	ldr	r3, [r3, #0]
    c7ca:	6818      	ldr	r0, [r3, #0]
    c7cc:	4b41      	ldr	r3, [pc, #260]	; (c8d4 <usbdc_set_interface+0x128>)
    c7ce:	681b      	ldr	r3, [r3, #0]
    c7d0:	6859      	ldr	r1, [r3, #4]
    c7d2:	4b40      	ldr	r3, [pc, #256]	; (c8d4 <usbdc_set_interface+0x128>)
    c7d4:	7edb      	ldrb	r3, [r3, #27]
    c7d6:	461a      	mov	r2, r3
    c7d8:	4b3f      	ldr	r3, [pc, #252]	; (c8d8 <usbdc_set_interface+0x12c>)
    c7da:	4798      	blx	r3
    c7dc:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c7de:	693b      	ldr	r3, [r7, #16]
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d101      	bne.n	c7e8 <usbdc_set_interface+0x3c>
		return false;
    c7e4:	2300      	movs	r3, #0
    c7e6:	e071      	b.n	c8cc <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c7e8:	693b      	ldr	r3, [r7, #16]
    c7ea:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c7ec:	6938      	ldr	r0, [r7, #16]
    c7ee:	4b3b      	ldr	r3, [pc, #236]	; (c8dc <usbdc_set_interface+0x130>)
    c7f0:	4798      	blx	r3
    c7f2:	4603      	mov	r3, r0
    c7f4:	461a      	mov	r2, r3
    c7f6:	693b      	ldr	r3, [r7, #16]
    c7f8:	4413      	add	r3, r2
    c7fa:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c7fc:	68bb      	ldr	r3, [r7, #8]
    c7fe:	68f9      	ldr	r1, [r7, #12]
    c800:	2204      	movs	r2, #4
    c802:	4618      	mov	r0, r3
    c804:	4b36      	ldr	r3, [pc, #216]	; (c8e0 <usbdc_set_interface+0x134>)
    c806:	4798      	blx	r3
    c808:	6138      	str	r0, [r7, #16]
    c80a:	693b      	ldr	r3, [r7, #16]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d113      	bne.n	c838 <usbdc_set_interface+0x8c>
		return false;
    c810:	2300      	movs	r3, #0
    c812:	e05b      	b.n	c8cc <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c814:	68bb      	ldr	r3, [r7, #8]
    c816:	4618      	mov	r0, r3
    c818:	4b32      	ldr	r3, [pc, #200]	; (c8e4 <usbdc_set_interface+0x138>)
    c81a:	4798      	blx	r3
    c81c:	4603      	mov	r3, r0
    c81e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c820:	68bb      	ldr	r3, [r7, #8]
    c822:	68f9      	ldr	r1, [r7, #12]
    c824:	2204      	movs	r2, #4
    c826:	4618      	mov	r0, r3
    c828:	4b2d      	ldr	r3, [pc, #180]	; (c8e0 <usbdc_set_interface+0x134>)
    c82a:	4798      	blx	r3
    c82c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c82e:	693b      	ldr	r3, [r7, #16]
    c830:	2b00      	cmp	r3, #0
    c832:	d101      	bne.n	c838 <usbdc_set_interface+0x8c>
			return false;
    c834:	2300      	movs	r3, #0
    c836:	e049      	b.n	c8cc <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c838:	693b      	ldr	r3, [r7, #16]
    c83a:	3302      	adds	r3, #2
    c83c:	781b      	ldrb	r3, [r3, #0]
    c83e:	b29b      	uxth	r3, r3
    c840:	88ba      	ldrh	r2, [r7, #4]
    c842:	429a      	cmp	r2, r3
    c844:	d1e6      	bne.n	c814 <usbdc_set_interface+0x68>
    c846:	693b      	ldr	r3, [r7, #16]
    c848:	3303      	adds	r3, #3
    c84a:	781b      	ldrb	r3, [r3, #0]
    c84c:	b29b      	uxth	r3, r3
    c84e:	88fa      	ldrh	r2, [r7, #6]
    c850:	429a      	cmp	r2, r3
    c852:	d1df      	bne.n	c814 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c854:	693b      	ldr	r3, [r7, #16]
    c856:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c858:	4b1e      	ldr	r3, [pc, #120]	; (c8d4 <usbdc_set_interface+0x128>)
    c85a:	691b      	ldr	r3, [r3, #16]
    c85c:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c85e:	e031      	b.n	c8c4 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c860:	697b      	ldr	r3, [r7, #20]
    c862:	685b      	ldr	r3, [r3, #4]
    c864:	f107 0208 	add.w	r2, r7, #8
    c868:	2101      	movs	r1, #1
    c86a:	6978      	ldr	r0, [r7, #20]
    c86c:	4798      	blx	r3
    c86e:	4603      	mov	r3, r0
    c870:	2b00      	cmp	r3, #0
    c872:	d003      	beq.n	c87c <usbdc_set_interface+0xd0>
			func = func->next;
    c874:	697b      	ldr	r3, [r7, #20]
    c876:	681b      	ldr	r3, [r3, #0]
    c878:	617b      	str	r3, [r7, #20]
    c87a:	e023      	b.n	c8c4 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c87c:	697b      	ldr	r3, [r7, #20]
    c87e:	685b      	ldr	r3, [r3, #4]
    c880:	f107 0208 	add.w	r2, r7, #8
    c884:	2100      	movs	r1, #0
    c886:	6978      	ldr	r0, [r7, #20]
    c888:	4798      	blx	r3
    c88a:	4603      	mov	r3, r0
    c88c:	2b00      	cmp	r3, #0
    c88e:	d117      	bne.n	c8c0 <usbdc_set_interface+0x114>
			if (alt_set) {
    c890:	88fb      	ldrh	r3, [r7, #6]
    c892:	2b00      	cmp	r3, #0
    c894:	d00c      	beq.n	c8b0 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c896:	4b0f      	ldr	r3, [pc, #60]	; (c8d4 <usbdc_set_interface+0x128>)
    c898:	7f5b      	ldrb	r3, [r3, #29]
    c89a:	b25a      	sxtb	r2, r3
    c89c:	88bb      	ldrh	r3, [r7, #4]
    c89e:	2101      	movs	r1, #1
    c8a0:	fa01 f303 	lsl.w	r3, r1, r3
    c8a4:	b25b      	sxtb	r3, r3
    c8a6:	4313      	orrs	r3, r2
    c8a8:	b25b      	sxtb	r3, r3
    c8aa:	b2da      	uxtb	r2, r3
    c8ac:	4b09      	ldr	r3, [pc, #36]	; (c8d4 <usbdc_set_interface+0x128>)
    c8ae:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c8b0:	2300      	movs	r3, #0
    c8b2:	2200      	movs	r2, #0
    c8b4:	2100      	movs	r1, #0
    c8b6:	2000      	movs	r0, #0
    c8b8:	4c0b      	ldr	r4, [pc, #44]	; (c8e8 <usbdc_set_interface+0x13c>)
    c8ba:	47a0      	blx	r4
			return true;
    c8bc:	2301      	movs	r3, #1
    c8be:	e005      	b.n	c8cc <usbdc_set_interface+0x120>
		} else {
			return false;
    c8c0:	2300      	movs	r3, #0
    c8c2:	e003      	b.n	c8cc <usbdc_set_interface+0x120>
	while (NULL != func) {
    c8c4:	697b      	ldr	r3, [r7, #20]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d1ca      	bne.n	c860 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c8ca:	2300      	movs	r3, #0
}
    c8cc:	4618      	mov	r0, r3
    c8ce:	371c      	adds	r7, #28
    c8d0:	46bd      	mov	sp, r7
    c8d2:	bd90      	pop	{r4, r7, pc}
    c8d4:	2000103c 	.word	0x2000103c
    c8d8:	0000d011 	.word	0x0000d011
    c8dc:	0000c1bd 	.word	0x0000c1bd
    c8e0:	0000cf51 	.word	0x0000cf51
    c8e4:	0000c199 	.word	0x0000c199
    c8e8:	0000ccc1 	.word	0x0000ccc1

0000c8ec <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c8ec:	b590      	push	{r4, r7, lr}
    c8ee:	b083      	sub	sp, #12
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	4603      	mov	r3, r0
    c8f4:	6039      	str	r1, [r7, #0]
    c8f6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c8f8:	683b      	ldr	r3, [r7, #0]
    c8fa:	785b      	ldrb	r3, [r3, #1]
    c8fc:	3b01      	subs	r3, #1
    c8fe:	2b0a      	cmp	r3, #10
    c900:	d85b      	bhi.n	c9ba <usbdc_set_req+0xce>
    c902:	a201      	add	r2, pc, #4	; (adr r2, c908 <usbdc_set_req+0x1c>)
    c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c908:	0000c987 	.word	0x0000c987
    c90c:	0000c9bb 	.word	0x0000c9bb
    c910:	0000c995 	.word	0x0000c995
    c914:	0000c9bb 	.word	0x0000c9bb
    c918:	0000c935 	.word	0x0000c935
    c91c:	0000c9bb 	.word	0x0000c9bb
    c920:	0000c9bb 	.word	0x0000c9bb
    c924:	0000c9bb 	.word	0x0000c9bb
    c928:	0000c94f 	.word	0x0000c94f
    c92c:	0000c9bb 	.word	0x0000c9bb
    c930:	0000c9a3 	.word	0x0000c9a3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c934:	79f8      	ldrb	r0, [r7, #7]
    c936:	2301      	movs	r3, #1
    c938:	2200      	movs	r2, #0
    c93a:	2100      	movs	r1, #0
    c93c:	4c21      	ldr	r4, [pc, #132]	; (c9c4 <usbdc_set_req+0xd8>)
    c93e:	47a0      	blx	r4
    c940:	4603      	mov	r3, r0
    c942:	2b00      	cmp	r3, #0
    c944:	bf0c      	ite	eq
    c946:	2301      	moveq	r3, #1
    c948:	2300      	movne	r3, #0
    c94a:	b2db      	uxtb	r3, r3
    c94c:	e036      	b.n	c9bc <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c94e:	683b      	ldr	r3, [r7, #0]
    c950:	885b      	ldrh	r3, [r3, #2]
    c952:	b29b      	uxth	r3, r3
    c954:	b2db      	uxtb	r3, r3
    c956:	4618      	mov	r0, r3
    c958:	4b1b      	ldr	r3, [pc, #108]	; (c9c8 <usbdc_set_req+0xdc>)
    c95a:	4798      	blx	r3
    c95c:	4603      	mov	r3, r0
    c95e:	f083 0301 	eor.w	r3, r3, #1
    c962:	b2db      	uxtb	r3, r3
    c964:	2b00      	cmp	r3, #0
    c966:	d001      	beq.n	c96c <usbdc_set_req+0x80>
			return false;
    c968:	2300      	movs	r3, #0
    c96a:	e027      	b.n	c9bc <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c96c:	79f8      	ldrb	r0, [r7, #7]
    c96e:	2301      	movs	r3, #1
    c970:	2200      	movs	r2, #0
    c972:	2100      	movs	r1, #0
    c974:	4c13      	ldr	r4, [pc, #76]	; (c9c4 <usbdc_set_req+0xd8>)
    c976:	47a0      	blx	r4
    c978:	4603      	mov	r3, r0
    c97a:	2b00      	cmp	r3, #0
    c97c:	bf0c      	ite	eq
    c97e:	2301      	moveq	r3, #1
    c980:	2300      	movne	r3, #0
    c982:	b2db      	uxtb	r3, r3
    c984:	e01a      	b.n	c9bc <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c986:	79fb      	ldrb	r3, [r7, #7]
    c988:	6839      	ldr	r1, [r7, #0]
    c98a:	4618      	mov	r0, r3
    c98c:	4b0f      	ldr	r3, [pc, #60]	; (c9cc <usbdc_set_req+0xe0>)
    c98e:	4798      	blx	r3
    c990:	4603      	mov	r3, r0
    c992:	e013      	b.n	c9bc <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c994:	79fb      	ldrb	r3, [r7, #7]
    c996:	6839      	ldr	r1, [r7, #0]
    c998:	4618      	mov	r0, r3
    c99a:	4b0d      	ldr	r3, [pc, #52]	; (c9d0 <usbdc_set_req+0xe4>)
    c99c:	4798      	blx	r3
    c99e:	4603      	mov	r3, r0
    c9a0:	e00c      	b.n	c9bc <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c9a2:	683b      	ldr	r3, [r7, #0]
    c9a4:	885b      	ldrh	r3, [r3, #2]
    c9a6:	b29a      	uxth	r2, r3
    c9a8:	683b      	ldr	r3, [r7, #0]
    c9aa:	889b      	ldrh	r3, [r3, #4]
    c9ac:	b29b      	uxth	r3, r3
    c9ae:	4619      	mov	r1, r3
    c9b0:	4610      	mov	r0, r2
    c9b2:	4b08      	ldr	r3, [pc, #32]	; (c9d4 <usbdc_set_req+0xe8>)
    c9b4:	4798      	blx	r3
    c9b6:	4603      	mov	r3, r0
    c9b8:	e000      	b.n	c9bc <usbdc_set_req+0xd0>
	default:
		return false;
    c9ba:	2300      	movs	r3, #0
	}
}
    c9bc:	4618      	mov	r0, r3
    c9be:	370c      	adds	r7, #12
    c9c0:	46bd      	mov	sp, r7
    c9c2:	bd90      	pop	{r4, r7, pc}
    c9c4:	0000ccc1 	.word	0x0000ccc1
    c9c8:	0000c6a1 	.word	0x0000c6a1
    c9cc:	0000c5bd 	.word	0x0000c5bd
    c9d0:	0000c615 	.word	0x0000c615
    c9d4:	0000c7ad 	.word	0x0000c7ad

0000c9d8 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c9d8:	b580      	push	{r7, lr}
    c9da:	b082      	sub	sp, #8
    c9dc:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c9de:	4b0a      	ldr	r3, [pc, #40]	; (ca08 <usbdc_sof_notify+0x30>)
    c9e0:	685b      	ldr	r3, [r3, #4]
    c9e2:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c9e4:	e009      	b.n	c9fa <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c9e6:	687b      	ldr	r3, [r7, #4]
    c9e8:	685b      	ldr	r3, [r3, #4]
    c9ea:	2b00      	cmp	r3, #0
    c9ec:	d002      	beq.n	c9f4 <usbdc_sof_notify+0x1c>
			sof->cb();
    c9ee:	687b      	ldr	r3, [r7, #4]
    c9f0:	685b      	ldr	r3, [r3, #4]
    c9f2:	4798      	blx	r3
		}
		sof = sof->next;
    c9f4:	687b      	ldr	r3, [r7, #4]
    c9f6:	681b      	ldr	r3, [r3, #0]
    c9f8:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c9fa:	687b      	ldr	r3, [r7, #4]
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d1f2      	bne.n	c9e6 <usbdc_sof_notify+0xe>
	}
}
    ca00:	bf00      	nop
    ca02:	3708      	adds	r7, #8
    ca04:	46bd      	mov	sp, r7
    ca06:	bd80      	pop	{r7, pc}
    ca08:	2000103c 	.word	0x2000103c

0000ca0c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ca0c:	b580      	push	{r7, lr}
    ca0e:	b084      	sub	sp, #16
    ca10:	af00      	add	r7, sp, #0
    ca12:	4603      	mov	r3, r0
    ca14:	6039      	str	r1, [r7, #0]
    ca16:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ca18:	4b0b      	ldr	r3, [pc, #44]	; (ca48 <usbdc_change_notify+0x3c>)
    ca1a:	68db      	ldr	r3, [r3, #12]
    ca1c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    ca1e:	e00c      	b.n	ca3a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    ca20:	68fb      	ldr	r3, [r7, #12]
    ca22:	685b      	ldr	r3, [r3, #4]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d005      	beq.n	ca34 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    ca28:	68fb      	ldr	r3, [r7, #12]
    ca2a:	685b      	ldr	r3, [r3, #4]
    ca2c:	79fa      	ldrb	r2, [r7, #7]
    ca2e:	6839      	ldr	r1, [r7, #0]
    ca30:	4610      	mov	r0, r2
    ca32:	4798      	blx	r3
		}
		cg = cg->next;
    ca34:	68fb      	ldr	r3, [r7, #12]
    ca36:	681b      	ldr	r3, [r3, #0]
    ca38:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    ca3a:	68fb      	ldr	r3, [r7, #12]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d1ef      	bne.n	ca20 <usbdc_change_notify+0x14>
	}
}
    ca40:	bf00      	nop
    ca42:	3710      	adds	r7, #16
    ca44:	46bd      	mov	sp, r7
    ca46:	bd80      	pop	{r7, pc}
    ca48:	2000103c 	.word	0x2000103c

0000ca4c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca4c:	b580      	push	{r7, lr}
    ca4e:	b084      	sub	sp, #16
    ca50:	af00      	add	r7, sp, #0
    ca52:	4603      	mov	r3, r0
    ca54:	6039      	str	r1, [r7, #0]
    ca56:	71fb      	strb	r3, [r7, #7]
    ca58:	4613      	mov	r3, r2
    ca5a:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ca5c:	4b12      	ldr	r3, [pc, #72]	; (caa8 <usbdc_request_handler+0x5c>)
    ca5e:	689b      	ldr	r3, [r3, #8]
    ca60:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    ca62:	e019      	b.n	ca98 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    ca64:	68fb      	ldr	r3, [r7, #12]
    ca66:	685b      	ldr	r3, [r3, #4]
    ca68:	2b00      	cmp	r3, #0
    ca6a:	d012      	beq.n	ca92 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    ca6c:	68fb      	ldr	r3, [r7, #12]
    ca6e:	685b      	ldr	r3, [r3, #4]
    ca70:	79ba      	ldrb	r2, [r7, #6]
    ca72:	79f8      	ldrb	r0, [r7, #7]
    ca74:	6839      	ldr	r1, [r7, #0]
    ca76:	4798      	blx	r3
    ca78:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    ca7a:	68bb      	ldr	r3, [r7, #8]
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d101      	bne.n	ca84 <usbdc_request_handler+0x38>
				return true;
    ca80:	2301      	movs	r3, #1
    ca82:	e00d      	b.n	caa0 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    ca84:	68bb      	ldr	r3, [r7, #8]
    ca86:	f113 0f0a 	cmn.w	r3, #10
    ca8a:	d002      	beq.n	ca92 <usbdc_request_handler+0x46>
				return -1;
    ca8c:	f04f 33ff 	mov.w	r3, #4294967295
    ca90:	e006      	b.n	caa0 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    ca92:	68fb      	ldr	r3, [r7, #12]
    ca94:	681b      	ldr	r3, [r3, #0]
    ca96:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ca98:	68fb      	ldr	r3, [r7, #12]
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d1e2      	bne.n	ca64 <usbdc_request_handler+0x18>
	}
	return false;
    ca9e:	2300      	movs	r3, #0
}
    caa0:	4618      	mov	r0, r3
    caa2:	3710      	adds	r7, #16
    caa4:	46bd      	mov	sp, r7
    caa6:	bd80      	pop	{r7, pc}
    caa8:	2000103c 	.word	0x2000103c

0000caac <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    caac:	b580      	push	{r7, lr}
    caae:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cab0:	4b01      	ldr	r3, [pc, #4]	; (cab8 <usbd_sof_cb+0xc>)
    cab2:	4798      	blx	r3
}
    cab4:	bf00      	nop
    cab6:	bd80      	pop	{r7, pc}
    cab8:	0000c9d9 	.word	0x0000c9d9

0000cabc <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cabc:	b580      	push	{r7, lr}
    cabe:	b082      	sub	sp, #8
    cac0:	af00      	add	r7, sp, #0
    cac2:	4603      	mov	r3, r0
    cac4:	6039      	str	r1, [r7, #0]
    cac6:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cac8:	79fb      	ldrb	r3, [r7, #7]
    caca:	2200      	movs	r2, #0
    cacc:	6839      	ldr	r1, [r7, #0]
    cace:	4618      	mov	r0, r3
    cad0:	4b14      	ldr	r3, [pc, #80]	; (cb24 <usbdc_cb_ctl_req+0x68>)
    cad2:	4798      	blx	r3
    cad4:	4603      	mov	r3, r0
    cad6:	f1b3 3fff 	cmp.w	r3, #4294967295
    cada:	d00b      	beq.n	caf4 <usbdc_cb_ctl_req+0x38>
    cadc:	2b01      	cmp	r3, #1
    cade:	d007      	beq.n	caf0 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cae0:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cae2:	683b      	ldr	r3, [r7, #0]
    cae4:	781b      	ldrb	r3, [r3, #0]
    cae6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    caea:	2b00      	cmp	r3, #0
    caec:	d007      	beq.n	cafe <usbdc_cb_ctl_req+0x42>
    caee:	e003      	b.n	caf8 <usbdc_cb_ctl_req+0x3c>
		return true;
    caf0:	2301      	movs	r3, #1
    caf2:	e013      	b.n	cb1c <usbdc_cb_ctl_req+0x60>
		return false;
    caf4:	2300      	movs	r3, #0
    caf6:	e011      	b.n	cb1c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    caf8:	2b80      	cmp	r3, #128	; 0x80
    cafa:	d007      	beq.n	cb0c <usbdc_cb_ctl_req+0x50>
    cafc:	e00d      	b.n	cb1a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cafe:	79fb      	ldrb	r3, [r7, #7]
    cb00:	6839      	ldr	r1, [r7, #0]
    cb02:	4618      	mov	r0, r3
    cb04:	4b08      	ldr	r3, [pc, #32]	; (cb28 <usbdc_cb_ctl_req+0x6c>)
    cb06:	4798      	blx	r3
    cb08:	4603      	mov	r3, r0
    cb0a:	e007      	b.n	cb1c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cb0c:	79fb      	ldrb	r3, [r7, #7]
    cb0e:	6839      	ldr	r1, [r7, #0]
    cb10:	4618      	mov	r0, r3
    cb12:	4b06      	ldr	r3, [pc, #24]	; (cb2c <usbdc_cb_ctl_req+0x70>)
    cb14:	4798      	blx	r3
    cb16:	4603      	mov	r3, r0
    cb18:	e000      	b.n	cb1c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cb1a:	2300      	movs	r3, #0
	}
}
    cb1c:	4618      	mov	r0, r3
    cb1e:	3708      	adds	r7, #8
    cb20:	46bd      	mov	sp, r7
    cb22:	bd80      	pop	{r7, pc}
    cb24:	0000ca4d 	.word	0x0000ca4d
    cb28:	0000c8ed 	.word	0x0000c8ed
    cb2c:	0000c515 	.word	0x0000c515

0000cb30 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cb30:	b580      	push	{r7, lr}
    cb32:	b082      	sub	sp, #8
    cb34:	af00      	add	r7, sp, #0
    cb36:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cb38:	687b      	ldr	r3, [r7, #4]
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d135      	bne.n	cbac <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cb40:	687b      	ldr	r3, [r7, #4]
    cb42:	785b      	ldrb	r3, [r3, #1]
    cb44:	2b05      	cmp	r3, #5
    cb46:	d019      	beq.n	cb7c <usbdc_ctrl_status_end+0x4c>
    cb48:	2b09      	cmp	r3, #9
    cb4a:	d000      	beq.n	cb4e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cb4c:	e02f      	b.n	cbae <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cb4e:	687b      	ldr	r3, [r7, #4]
    cb50:	885b      	ldrh	r3, [r3, #2]
    cb52:	b29b      	uxth	r3, r3
    cb54:	b2da      	uxtb	r2, r3
    cb56:	4b17      	ldr	r3, [pc, #92]	; (cbb4 <usbdc_ctrl_status_end+0x84>)
    cb58:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	885b      	ldrh	r3, [r3, #2]
    cb5e:	b29b      	uxth	r3, r3
    cb60:	2b00      	cmp	r3, #0
    cb62:	d001      	beq.n	cb68 <usbdc_ctrl_status_end+0x38>
    cb64:	2204      	movs	r2, #4
    cb66:	e000      	b.n	cb6a <usbdc_ctrl_status_end+0x3a>
    cb68:	2203      	movs	r2, #3
    cb6a:	4b12      	ldr	r3, [pc, #72]	; (cbb4 <usbdc_ctrl_status_end+0x84>)
    cb6c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb6e:	4b11      	ldr	r3, [pc, #68]	; (cbb4 <usbdc_ctrl_status_end+0x84>)
    cb70:	7e9b      	ldrb	r3, [r3, #26]
    cb72:	4619      	mov	r1, r3
    cb74:	2001      	movs	r0, #1
    cb76:	4b10      	ldr	r3, [pc, #64]	; (cbb8 <usbdc_ctrl_status_end+0x88>)
    cb78:	4798      	blx	r3
		break;
    cb7a:	e018      	b.n	cbae <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	885b      	ldrh	r3, [r3, #2]
    cb80:	b29b      	uxth	r3, r3
    cb82:	b2db      	uxtb	r3, r3
    cb84:	4618      	mov	r0, r3
    cb86:	4b0d      	ldr	r3, [pc, #52]	; (cbbc <usbdc_ctrl_status_end+0x8c>)
    cb88:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cb8a:	687b      	ldr	r3, [r7, #4]
    cb8c:	885b      	ldrh	r3, [r3, #2]
    cb8e:	b29b      	uxth	r3, r3
    cb90:	2b00      	cmp	r3, #0
    cb92:	d001      	beq.n	cb98 <usbdc_ctrl_status_end+0x68>
    cb94:	2203      	movs	r2, #3
    cb96:	e000      	b.n	cb9a <usbdc_ctrl_status_end+0x6a>
    cb98:	2202      	movs	r2, #2
    cb9a:	4b06      	ldr	r3, [pc, #24]	; (cbb4 <usbdc_ctrl_status_end+0x84>)
    cb9c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb9e:	4b05      	ldr	r3, [pc, #20]	; (cbb4 <usbdc_ctrl_status_end+0x84>)
    cba0:	7e9b      	ldrb	r3, [r3, #26]
    cba2:	4619      	mov	r1, r3
    cba4:	2001      	movs	r0, #1
    cba6:	4b04      	ldr	r3, [pc, #16]	; (cbb8 <usbdc_ctrl_status_end+0x88>)
    cba8:	4798      	blx	r3
		break;
    cbaa:	e000      	b.n	cbae <usbdc_ctrl_status_end+0x7e>
		return;
    cbac:	bf00      	nop
	}
}
    cbae:	3708      	adds	r7, #8
    cbb0:	46bd      	mov	sp, r7
    cbb2:	bd80      	pop	{r7, pc}
    cbb4:	2000103c 	.word	0x2000103c
    cbb8:	0000ca0d 	.word	0x0000ca0d
    cbbc:	0000c78d 	.word	0x0000c78d

0000cbc0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b082      	sub	sp, #8
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cbc8:	2201      	movs	r2, #1
    cbca:	6879      	ldr	r1, [r7, #4]
    cbcc:	2000      	movs	r0, #0
    cbce:	4b03      	ldr	r3, [pc, #12]	; (cbdc <usbdc_ctrl_data_end+0x1c>)
    cbd0:	4798      	blx	r3
	return false;
    cbd2:	2300      	movs	r3, #0
}
    cbd4:	4618      	mov	r0, r3
    cbd6:	3708      	adds	r7, #8
    cbd8:	46bd      	mov	sp, r7
    cbda:	bd80      	pop	{r7, pc}
    cbdc:	0000ca4d 	.word	0x0000ca4d

0000cbe0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cbe0:	b580      	push	{r7, lr}
    cbe2:	b082      	sub	sp, #8
    cbe4:	af00      	add	r7, sp, #0
    cbe6:	4603      	mov	r3, r0
    cbe8:	603a      	str	r2, [r7, #0]
    cbea:	71fb      	strb	r3, [r7, #7]
    cbec:	460b      	mov	r3, r1
    cbee:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cbf0:	79bb      	ldrb	r3, [r7, #6]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d002      	beq.n	cbfc <usbdc_cb_ctl_done+0x1c>
    cbf6:	2b01      	cmp	r3, #1
    cbf8:	d004      	beq.n	cc04 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cbfa:	e008      	b.n	cc0e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cbfc:	6838      	ldr	r0, [r7, #0]
    cbfe:	4b06      	ldr	r3, [pc, #24]	; (cc18 <usbdc_cb_ctl_done+0x38>)
    cc00:	4798      	blx	r3
		break;
    cc02:	e004      	b.n	cc0e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cc04:	6838      	ldr	r0, [r7, #0]
    cc06:	4b05      	ldr	r3, [pc, #20]	; (cc1c <usbdc_cb_ctl_done+0x3c>)
    cc08:	4798      	blx	r3
    cc0a:	4603      	mov	r3, r0
    cc0c:	e000      	b.n	cc10 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cc0e:	2300      	movs	r3, #0
}
    cc10:	4618      	mov	r0, r3
    cc12:	3708      	adds	r7, #8
    cc14:	46bd      	mov	sp, r7
    cc16:	bd80      	pop	{r7, pc}
    cc18:	0000cb31 	.word	0x0000cb31
    cc1c:	0000cbc1 	.word	0x0000cbc1

0000cc20 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cc20:	b580      	push	{r7, lr}
    cc22:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cc24:	4b10      	ldr	r3, [pc, #64]	; (cc68 <usbdc_reset+0x48>)
    cc26:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cc28:	4b10      	ldr	r3, [pc, #64]	; (cc6c <usbdc_reset+0x4c>)
    cc2a:	2202      	movs	r2, #2
    cc2c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cc2e:	4b0f      	ldr	r3, [pc, #60]	; (cc6c <usbdc_reset+0x4c>)
    cc30:	2200      	movs	r2, #0
    cc32:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cc34:	4b0d      	ldr	r3, [pc, #52]	; (cc6c <usbdc_reset+0x4c>)
    cc36:	2200      	movs	r2, #0
    cc38:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cc3a:	2000      	movs	r0, #0
    cc3c:	4b0c      	ldr	r3, [pc, #48]	; (cc70 <usbdc_reset+0x50>)
    cc3e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cc40:	4b0a      	ldr	r3, [pc, #40]	; (cc6c <usbdc_reset+0x4c>)
    cc42:	7f1b      	ldrb	r3, [r3, #28]
    cc44:	4618      	mov	r0, r3
    cc46:	4b0b      	ldr	r3, [pc, #44]	; (cc74 <usbdc_reset+0x54>)
    cc48:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cc4a:	4a0b      	ldr	r2, [pc, #44]	; (cc78 <usbdc_reset+0x58>)
    cc4c:	2100      	movs	r1, #0
    cc4e:	2000      	movs	r0, #0
    cc50:	4b0a      	ldr	r3, [pc, #40]	; (cc7c <usbdc_reset+0x5c>)
    cc52:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cc54:	4a0a      	ldr	r2, [pc, #40]	; (cc80 <usbdc_reset+0x60>)
    cc56:	2102      	movs	r1, #2
    cc58:	2000      	movs	r0, #0
    cc5a:	4b08      	ldr	r3, [pc, #32]	; (cc7c <usbdc_reset+0x5c>)
    cc5c:	4798      	blx	r3
	usb_d_ep_enable(0);
    cc5e:	2000      	movs	r0, #0
    cc60:	4b08      	ldr	r3, [pc, #32]	; (cc84 <usbdc_reset+0x64>)
    cc62:	4798      	blx	r3
}
    cc64:	bf00      	nop
    cc66:	bd80      	pop	{r7, pc}
    cc68:	0000c66d 	.word	0x0000c66d
    cc6c:	2000103c 	.word	0x2000103c
    cc70:	000032b1 	.word	0x000032b1
    cc74:	000031ed 	.word	0x000031ed
    cc78:	0000cabd 	.word	0x0000cabd
    cc7c:	00003605 	.word	0x00003605
    cc80:	0000cbe1 	.word	0x0000cbe1
    cc84:	00003301 	.word	0x00003301

0000cc88 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cc88:	b580      	push	{r7, lr}
    cc8a:	b082      	sub	sp, #8
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	4603      	mov	r3, r0
    cc90:	6039      	str	r1, [r7, #0]
    cc92:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cc94:	79fb      	ldrb	r3, [r7, #7]
    cc96:	2b00      	cmp	r3, #0
    cc98:	d002      	beq.n	cca0 <usbd_event_cb+0x18>
    cc9a:	2b01      	cmp	r3, #1
    cc9c:	d005      	beq.n	ccaa <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cc9e:	e007      	b.n	ccb0 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cca0:	6839      	ldr	r1, [r7, #0]
    cca2:	2000      	movs	r0, #0
    cca4:	4b04      	ldr	r3, [pc, #16]	; (ccb8 <usbd_event_cb+0x30>)
    cca6:	4798      	blx	r3
		break;
    cca8:	e002      	b.n	ccb0 <usbd_event_cb+0x28>
		usbdc_reset();
    ccaa:	4b04      	ldr	r3, [pc, #16]	; (ccbc <usbd_event_cb+0x34>)
    ccac:	4798      	blx	r3
		break;
    ccae:	bf00      	nop
	}
}
    ccb0:	bf00      	nop
    ccb2:	3708      	adds	r7, #8
    ccb4:	46bd      	mov	sp, r7
    ccb6:	bd80      	pop	{r7, pc}
    ccb8:	0000ca0d 	.word	0x0000ca0d
    ccbc:	0000cc21 	.word	0x0000cc21

0000ccc0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	b088      	sub	sp, #32
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	60b9      	str	r1, [r7, #8]
    ccc8:	607a      	str	r2, [r7, #4]
    ccca:	461a      	mov	r2, r3
    cccc:	4603      	mov	r3, r0
    ccce:	73fb      	strb	r3, [r7, #15]
    ccd0:	4613      	mov	r3, r2
    ccd2:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ccd4:	68bb      	ldr	r3, [r7, #8]
    ccd6:	617b      	str	r3, [r7, #20]
    ccd8:	687b      	ldr	r3, [r7, #4]
    ccda:	61bb      	str	r3, [r7, #24]
    ccdc:	7bfb      	ldrb	r3, [r7, #15]
    ccde:	773b      	strb	r3, [r7, #28]
    cce0:	7bbb      	ldrb	r3, [r7, #14]
    cce2:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cce4:	f107 0314 	add.w	r3, r7, #20
    cce8:	4618      	mov	r0, r3
    ccea:	4b03      	ldr	r3, [pc, #12]	; (ccf8 <usbdc_xfer+0x38>)
    ccec:	4798      	blx	r3
    ccee:	4603      	mov	r3, r0
}
    ccf0:	4618      	mov	r0, r3
    ccf2:	3720      	adds	r7, #32
    ccf4:	46bd      	mov	sp, r7
    ccf6:	bd80      	pop	{r7, pc}
    ccf8:	00003371 	.word	0x00003371

0000ccfc <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ccfc:	b580      	push	{r7, lr}
    ccfe:	b082      	sub	sp, #8
    cd00:	af00      	add	r7, sp, #0
    cd02:	4603      	mov	r3, r0
    cd04:	6039      	str	r1, [r7, #0]
    cd06:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cd08:	79fb      	ldrb	r3, [r7, #7]
    cd0a:	2b01      	cmp	r3, #1
    cd0c:	d009      	beq.n	cd22 <usbdc_register_handler+0x26>
    cd0e:	2b02      	cmp	r3, #2
    cd10:	d00c      	beq.n	cd2c <usbdc_register_handler+0x30>
    cd12:	2b00      	cmp	r3, #0
    cd14:	d000      	beq.n	cd18 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cd16:	e00e      	b.n	cd36 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cd18:	6839      	ldr	r1, [r7, #0]
    cd1a:	4809      	ldr	r0, [pc, #36]	; (cd40 <usbdc_register_handler+0x44>)
    cd1c:	4b09      	ldr	r3, [pc, #36]	; (cd44 <usbdc_register_handler+0x48>)
    cd1e:	4798      	blx	r3
		break;
    cd20:	e009      	b.n	cd36 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cd22:	6839      	ldr	r1, [r7, #0]
    cd24:	4808      	ldr	r0, [pc, #32]	; (cd48 <usbdc_register_handler+0x4c>)
    cd26:	4b07      	ldr	r3, [pc, #28]	; (cd44 <usbdc_register_handler+0x48>)
    cd28:	4798      	blx	r3
		break;
    cd2a:	e004      	b.n	cd36 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cd2c:	6839      	ldr	r1, [r7, #0]
    cd2e:	4807      	ldr	r0, [pc, #28]	; (cd4c <usbdc_register_handler+0x50>)
    cd30:	4b04      	ldr	r3, [pc, #16]	; (cd44 <usbdc_register_handler+0x48>)
    cd32:	4798      	blx	r3
		break;
    cd34:	bf00      	nop
	}
}
    cd36:	bf00      	nop
    cd38:	3708      	adds	r7, #8
    cd3a:	46bd      	mov	sp, r7
    cd3c:	bd80      	pop	{r7, pc}
    cd3e:	bf00      	nop
    cd40:	20001040 	.word	0x20001040
    cd44:	0000375d 	.word	0x0000375d
    cd48:	20001044 	.word	0x20001044
    cd4c:	20001048 	.word	0x20001048

0000cd50 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cd50:	b580      	push	{r7, lr}
    cd52:	b084      	sub	sp, #16
    cd54:	af00      	add	r7, sp, #0
    cd56:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cd58:	687b      	ldr	r3, [r7, #4]
    cd5a:	2b00      	cmp	r3, #0
    cd5c:	bf14      	ite	ne
    cd5e:	2301      	movne	r3, #1
    cd60:	2300      	moveq	r3, #0
    cd62:	b2db      	uxtb	r3, r3
    cd64:	f240 3255 	movw	r2, #853	; 0x355
    cd68:	4910      	ldr	r1, [pc, #64]	; (cdac <usbdc_init+0x5c>)
    cd6a:	4618      	mov	r0, r3
    cd6c:	4b10      	ldr	r3, [pc, #64]	; (cdb0 <usbdc_init+0x60>)
    cd6e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cd70:	4b10      	ldr	r3, [pc, #64]	; (cdb4 <usbdc_init+0x64>)
    cd72:	4798      	blx	r3
    cd74:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cd76:	68fb      	ldr	r3, [r7, #12]
    cd78:	2b00      	cmp	r3, #0
    cd7a:	da01      	bge.n	cd80 <usbdc_init+0x30>
		return rc;
    cd7c:	68fb      	ldr	r3, [r7, #12]
    cd7e:	e010      	b.n	cda2 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cd80:	2220      	movs	r2, #32
    cd82:	2100      	movs	r1, #0
    cd84:	480c      	ldr	r0, [pc, #48]	; (cdb8 <usbdc_init+0x68>)
    cd86:	4b0d      	ldr	r3, [pc, #52]	; (cdbc <usbdc_init+0x6c>)
    cd88:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cd8a:	4a0b      	ldr	r2, [pc, #44]	; (cdb8 <usbdc_init+0x68>)
    cd8c:	687b      	ldr	r3, [r7, #4]
    cd8e:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cd90:	490b      	ldr	r1, [pc, #44]	; (cdc0 <usbdc_init+0x70>)
    cd92:	2000      	movs	r0, #0
    cd94:	4b0b      	ldr	r3, [pc, #44]	; (cdc4 <usbdc_init+0x74>)
    cd96:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cd98:	490b      	ldr	r1, [pc, #44]	; (cdc8 <usbdc_init+0x78>)
    cd9a:	2001      	movs	r0, #1
    cd9c:	4b09      	ldr	r3, [pc, #36]	; (cdc4 <usbdc_init+0x74>)
    cd9e:	4798      	blx	r3

	return 0;
    cda0:	2300      	movs	r3, #0
}
    cda2:	4618      	mov	r0, r3
    cda4:	3710      	adds	r7, #16
    cda6:	46bd      	mov	sp, r7
    cda8:	bd80      	pop	{r7, pc}
    cdaa:	bf00      	nop
    cdac:	00012420 	.word	0x00012420
    cdb0:	00003681 	.word	0x00003681
    cdb4:	000030d9 	.word	0x000030d9
    cdb8:	2000103c 	.word	0x2000103c
    cdbc:	00011d51 	.word	0x00011d51
    cdc0:	0000caad 	.word	0x0000caad
    cdc4:	00003185 	.word	0x00003185
    cdc8:	0000cc89 	.word	0x0000cc89

0000cdcc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cdcc:	b580      	push	{r7, lr}
    cdce:	b082      	sub	sp, #8
    cdd0:	af00      	add	r7, sp, #0
    cdd2:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cdd4:	6879      	ldr	r1, [r7, #4]
    cdd6:	4803      	ldr	r0, [pc, #12]	; (cde4 <usbdc_register_function+0x18>)
    cdd8:	4b03      	ldr	r3, [pc, #12]	; (cde8 <usbdc_register_function+0x1c>)
    cdda:	4798      	blx	r3
}
    cddc:	bf00      	nop
    cdde:	3708      	adds	r7, #8
    cde0:	46bd      	mov	sp, r7
    cde2:	bd80      	pop	{r7, pc}
    cde4:	2000104c 	.word	0x2000104c
    cde8:	0000375d 	.word	0x0000375d

0000cdec <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cdec:	b580      	push	{r7, lr}
    cdee:	b082      	sub	sp, #8
    cdf0:	af00      	add	r7, sp, #0
    cdf2:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cdf4:	4b0f      	ldr	r3, [pc, #60]	; (ce34 <usbdc_start+0x48>)
    cdf6:	7e9b      	ldrb	r3, [r3, #26]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d002      	beq.n	ce02 <usbdc_start+0x16>
		return ERR_BUSY;
    cdfc:	f06f 0303 	mvn.w	r3, #3
    ce00:	e013      	b.n	ce2a <usbdc_start+0x3e>
	}

	if (desces) {
    ce02:	687b      	ldr	r3, [r7, #4]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d00e      	beq.n	ce26 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ce08:	4a0a      	ldr	r2, [pc, #40]	; (ce34 <usbdc_start+0x48>)
    ce0a:	687b      	ldr	r3, [r7, #4]
    ce0c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ce0e:	687b      	ldr	r3, [r7, #4]
    ce10:	681b      	ldr	r3, [r3, #0]
    ce12:	79da      	ldrb	r2, [r3, #7]
    ce14:	4b07      	ldr	r3, [pc, #28]	; (ce34 <usbdc_start+0x48>)
    ce16:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ce18:	4b06      	ldr	r3, [pc, #24]	; (ce34 <usbdc_start+0x48>)
    ce1a:	2201      	movs	r2, #1
    ce1c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ce1e:	4b06      	ldr	r3, [pc, #24]	; (ce38 <usbdc_start+0x4c>)
    ce20:	4798      	blx	r3
	return ERR_NONE;
    ce22:	2300      	movs	r3, #0
    ce24:	e001      	b.n	ce2a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ce26:	f06f 0308 	mvn.w	r3, #8
}
    ce2a:	4618      	mov	r0, r3
    ce2c:	3708      	adds	r7, #8
    ce2e:	46bd      	mov	sp, r7
    ce30:	bd80      	pop	{r7, pc}
    ce32:	bf00      	nop
    ce34:	2000103c 	.word	0x2000103c
    ce38:	000031a9 	.word	0x000031a9

0000ce3c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ce3c:	b580      	push	{r7, lr}
    ce3e:	af00      	add	r7, sp, #0
	usb_d_attach();
    ce40:	4b01      	ldr	r3, [pc, #4]	; (ce48 <usbdc_attach+0xc>)
    ce42:	4798      	blx	r3
}
    ce44:	bf00      	nop
    ce46:	bd80      	pop	{r7, pc}
    ce48:	000031bd 	.word	0x000031bd

0000ce4c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ce4c:	b480      	push	{r7}
    ce4e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ce50:	4b03      	ldr	r3, [pc, #12]	; (ce60 <usbdc_get_ctrl_buffer+0x14>)
    ce52:	695b      	ldr	r3, [r3, #20]
}
    ce54:	4618      	mov	r0, r3
    ce56:	46bd      	mov	sp, r7
    ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce5c:	4770      	bx	lr
    ce5e:	bf00      	nop
    ce60:	2000103c 	.word	0x2000103c

0000ce64 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ce64:	b480      	push	{r7}
    ce66:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ce68:	4b07      	ldr	r3, [pc, #28]	; (ce88 <usbdc_get_state+0x24>)
    ce6a:	7e9b      	ldrb	r3, [r3, #26]
    ce6c:	f003 0310 	and.w	r3, r3, #16
    ce70:	2b00      	cmp	r3, #0
    ce72:	d001      	beq.n	ce78 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ce74:	2310      	movs	r3, #16
    ce76:	e001      	b.n	ce7c <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ce78:	4b03      	ldr	r3, [pc, #12]	; (ce88 <usbdc_get_state+0x24>)
    ce7a:	7e9b      	ldrb	r3, [r3, #26]
}
    ce7c:	4618      	mov	r0, r3
    ce7e:	46bd      	mov	sp, r7
    ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop
    ce88:	2000103c 	.word	0x2000103c

0000ce8c <usb_get_u16>:
{
    ce8c:	b480      	push	{r7}
    ce8e:	b083      	sub	sp, #12
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ce94:	687b      	ldr	r3, [r7, #4]
    ce96:	781b      	ldrb	r3, [r3, #0]
    ce98:	b29a      	uxth	r2, r3
    ce9a:	687b      	ldr	r3, [r7, #4]
    ce9c:	3301      	adds	r3, #1
    ce9e:	781b      	ldrb	r3, [r3, #0]
    cea0:	b29b      	uxth	r3, r3
    cea2:	021b      	lsls	r3, r3, #8
    cea4:	b29b      	uxth	r3, r3
    cea6:	4413      	add	r3, r2
    cea8:	b29b      	uxth	r3, r3
}
    ceaa:	4618      	mov	r0, r3
    ceac:	370c      	adds	r7, #12
    ceae:	46bd      	mov	sp, r7
    ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ceb4:	4770      	bx	lr

0000ceb6 <usb_desc_len>:
{
    ceb6:	b480      	push	{r7}
    ceb8:	b083      	sub	sp, #12
    ceba:	af00      	add	r7, sp, #0
    cebc:	6078      	str	r0, [r7, #4]
	return desc[0];
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	781b      	ldrb	r3, [r3, #0]
}
    cec2:	4618      	mov	r0, r3
    cec4:	370c      	adds	r7, #12
    cec6:	46bd      	mov	sp, r7
    cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cecc:	4770      	bx	lr

0000cece <usb_desc_type>:
{
    cece:	b480      	push	{r7}
    ced0:	b083      	sub	sp, #12
    ced2:	af00      	add	r7, sp, #0
    ced4:	6078      	str	r0, [r7, #4]
	return desc[1];
    ced6:	687b      	ldr	r3, [r7, #4]
    ced8:	3301      	adds	r3, #1
    ceda:	781b      	ldrb	r3, [r3, #0]
}
    cedc:	4618      	mov	r0, r3
    cede:	370c      	adds	r7, #12
    cee0:	46bd      	mov	sp, r7
    cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cee6:	4770      	bx	lr

0000cee8 <usb_desc_next>:
{
    cee8:	b580      	push	{r7, lr}
    ceea:	b082      	sub	sp, #8
    ceec:	af00      	add	r7, sp, #0
    ceee:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cef0:	6878      	ldr	r0, [r7, #4]
    cef2:	4b05      	ldr	r3, [pc, #20]	; (cf08 <usb_desc_next+0x20>)
    cef4:	4798      	blx	r3
    cef6:	4603      	mov	r3, r0
    cef8:	461a      	mov	r2, r3
    cefa:	687b      	ldr	r3, [r7, #4]
    cefc:	4413      	add	r3, r2
}
    cefe:	4618      	mov	r0, r3
    cf00:	3708      	adds	r7, #8
    cf02:	46bd      	mov	sp, r7
    cf04:	bd80      	pop	{r7, pc}
    cf06:	bf00      	nop
    cf08:	0000ceb7 	.word	0x0000ceb7

0000cf0c <usb_cfg_desc_total_len>:
{
    cf0c:	b580      	push	{r7, lr}
    cf0e:	b082      	sub	sp, #8
    cf10:	af00      	add	r7, sp, #0
    cf12:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cf14:	687b      	ldr	r3, [r7, #4]
    cf16:	3302      	adds	r3, #2
    cf18:	4618      	mov	r0, r3
    cf1a:	4b03      	ldr	r3, [pc, #12]	; (cf28 <usb_cfg_desc_total_len+0x1c>)
    cf1c:	4798      	blx	r3
    cf1e:	4603      	mov	r3, r0
}
    cf20:	4618      	mov	r0, r3
    cf22:	3708      	adds	r7, #8
    cf24:	46bd      	mov	sp, r7
    cf26:	bd80      	pop	{r7, pc}
    cf28:	0000ce8d 	.word	0x0000ce8d

0000cf2c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cf2c:	b580      	push	{r7, lr}
    cf2e:	b082      	sub	sp, #8
    cf30:	af00      	add	r7, sp, #0
    cf32:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cf34:	6878      	ldr	r0, [r7, #4]
    cf36:	4b05      	ldr	r3, [pc, #20]	; (cf4c <usb_cfg_desc_next+0x20>)
    cf38:	4798      	blx	r3
    cf3a:	4603      	mov	r3, r0
    cf3c:	461a      	mov	r2, r3
    cf3e:	687b      	ldr	r3, [r7, #4]
    cf40:	4413      	add	r3, r2
}
    cf42:	4618      	mov	r0, r3
    cf44:	3708      	adds	r7, #8
    cf46:	46bd      	mov	sp, r7
    cf48:	bd80      	pop	{r7, pc}
    cf4a:	bf00      	nop
    cf4c:	0000cf0d 	.word	0x0000cf0d

0000cf50 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cf50:	b580      	push	{r7, lr}
    cf52:	b084      	sub	sp, #16
    cf54:	af00      	add	r7, sp, #0
    cf56:	60f8      	str	r0, [r7, #12]
    cf58:	60b9      	str	r1, [r7, #8]
    cf5a:	4613      	mov	r3, r2
    cf5c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cf5e:	e015      	b.n	cf8c <usb_find_desc+0x3c>
		_desc_len_check();
    cf60:	68f8      	ldr	r0, [r7, #12]
    cf62:	4b0f      	ldr	r3, [pc, #60]	; (cfa0 <usb_find_desc+0x50>)
    cf64:	4798      	blx	r3
    cf66:	4603      	mov	r3, r0
    cf68:	2b01      	cmp	r3, #1
    cf6a:	d801      	bhi.n	cf70 <usb_find_desc+0x20>
    cf6c:	2300      	movs	r3, #0
    cf6e:	e012      	b.n	cf96 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cf70:	68f8      	ldr	r0, [r7, #12]
    cf72:	4b0c      	ldr	r3, [pc, #48]	; (cfa4 <usb_find_desc+0x54>)
    cf74:	4798      	blx	r3
    cf76:	4603      	mov	r3, r0
    cf78:	461a      	mov	r2, r3
    cf7a:	79fb      	ldrb	r3, [r7, #7]
    cf7c:	4293      	cmp	r3, r2
    cf7e:	d101      	bne.n	cf84 <usb_find_desc+0x34>
			return desc;
    cf80:	68fb      	ldr	r3, [r7, #12]
    cf82:	e008      	b.n	cf96 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    cf84:	68f8      	ldr	r0, [r7, #12]
    cf86:	4b08      	ldr	r3, [pc, #32]	; (cfa8 <usb_find_desc+0x58>)
    cf88:	4798      	blx	r3
    cf8a:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cf8c:	68fa      	ldr	r2, [r7, #12]
    cf8e:	68bb      	ldr	r3, [r7, #8]
    cf90:	429a      	cmp	r2, r3
    cf92:	d3e5      	bcc.n	cf60 <usb_find_desc+0x10>
	}
	return NULL;
    cf94:	2300      	movs	r3, #0
}
    cf96:	4618      	mov	r0, r3
    cf98:	3710      	adds	r7, #16
    cf9a:	46bd      	mov	sp, r7
    cf9c:	bd80      	pop	{r7, pc}
    cf9e:	bf00      	nop
    cfa0:	0000ceb7 	.word	0x0000ceb7
    cfa4:	0000cecf 	.word	0x0000cecf
    cfa8:	0000cee9 	.word	0x0000cee9

0000cfac <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    cfac:	b580      	push	{r7, lr}
    cfae:	b082      	sub	sp, #8
    cfb0:	af00      	add	r7, sp, #0
    cfb2:	6078      	str	r0, [r7, #4]
    cfb4:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cfb6:	e019      	b.n	cfec <usb_find_ep_desc+0x40>
		_desc_len_check();
    cfb8:	6878      	ldr	r0, [r7, #4]
    cfba:	4b12      	ldr	r3, [pc, #72]	; (d004 <usb_find_ep_desc+0x58>)
    cfbc:	4798      	blx	r3
    cfbe:	4603      	mov	r3, r0
    cfc0:	2b01      	cmp	r3, #1
    cfc2:	d801      	bhi.n	cfc8 <usb_find_ep_desc+0x1c>
    cfc4:	2300      	movs	r3, #0
    cfc6:	e018      	b.n	cffa <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cfc8:	6878      	ldr	r0, [r7, #4]
    cfca:	4b0f      	ldr	r3, [pc, #60]	; (d008 <usb_find_ep_desc+0x5c>)
    cfcc:	4798      	blx	r3
    cfce:	4603      	mov	r3, r0
    cfd0:	2b04      	cmp	r3, #4
    cfd2:	d010      	beq.n	cff6 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cfd4:	6878      	ldr	r0, [r7, #4]
    cfd6:	4b0c      	ldr	r3, [pc, #48]	; (d008 <usb_find_ep_desc+0x5c>)
    cfd8:	4798      	blx	r3
    cfda:	4603      	mov	r3, r0
    cfdc:	2b05      	cmp	r3, #5
    cfde:	d101      	bne.n	cfe4 <usb_find_ep_desc+0x38>
			return desc;
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	e00a      	b.n	cffa <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cfe4:	6878      	ldr	r0, [r7, #4]
    cfe6:	4b09      	ldr	r3, [pc, #36]	; (d00c <usb_find_ep_desc+0x60>)
    cfe8:	4798      	blx	r3
    cfea:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cfec:	687a      	ldr	r2, [r7, #4]
    cfee:	683b      	ldr	r3, [r7, #0]
    cff0:	429a      	cmp	r2, r3
    cff2:	d3e1      	bcc.n	cfb8 <usb_find_ep_desc+0xc>
    cff4:	e000      	b.n	cff8 <usb_find_ep_desc+0x4c>
			break;
    cff6:	bf00      	nop
	}
	return NULL;
    cff8:	2300      	movs	r3, #0
}
    cffa:	4618      	mov	r0, r3
    cffc:	3708      	adds	r7, #8
    cffe:	46bd      	mov	sp, r7
    d000:	bd80      	pop	{r7, pc}
    d002:	bf00      	nop
    d004:	0000ceb7 	.word	0x0000ceb7
    d008:	0000cecf 	.word	0x0000cecf
    d00c:	0000cee9 	.word	0x0000cee9

0000d010 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d010:	b580      	push	{r7, lr}
    d012:	b084      	sub	sp, #16
    d014:	af00      	add	r7, sp, #0
    d016:	60f8      	str	r0, [r7, #12]
    d018:	60b9      	str	r1, [r7, #8]
    d01a:	4613      	mov	r3, r2
    d01c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d01e:	2202      	movs	r2, #2
    d020:	68b9      	ldr	r1, [r7, #8]
    d022:	68f8      	ldr	r0, [r7, #12]
    d024:	4b15      	ldr	r3, [pc, #84]	; (d07c <usb_find_cfg_desc+0x6c>)
    d026:	4798      	blx	r3
    d028:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d02a:	68fb      	ldr	r3, [r7, #12]
    d02c:	2b00      	cmp	r3, #0
    d02e:	d11a      	bne.n	d066 <usb_find_cfg_desc+0x56>
		return NULL;
    d030:	2300      	movs	r3, #0
    d032:	e01f      	b.n	d074 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d034:	68f8      	ldr	r0, [r7, #12]
    d036:	4b12      	ldr	r3, [pc, #72]	; (d080 <usb_find_cfg_desc+0x70>)
    d038:	4798      	blx	r3
    d03a:	4603      	mov	r3, r0
    d03c:	2b01      	cmp	r3, #1
    d03e:	d801      	bhi.n	d044 <usb_find_cfg_desc+0x34>
    d040:	2300      	movs	r3, #0
    d042:	e017      	b.n	d074 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d044:	68fb      	ldr	r3, [r7, #12]
    d046:	3301      	adds	r3, #1
    d048:	781b      	ldrb	r3, [r3, #0]
    d04a:	2b02      	cmp	r3, #2
    d04c:	d110      	bne.n	d070 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d04e:	68fb      	ldr	r3, [r7, #12]
    d050:	3305      	adds	r3, #5
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	79fa      	ldrb	r2, [r7, #7]
    d056:	429a      	cmp	r2, r3
    d058:	d101      	bne.n	d05e <usb_find_cfg_desc+0x4e>
			return desc;
    d05a:	68fb      	ldr	r3, [r7, #12]
    d05c:	e00a      	b.n	d074 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d05e:	68f8      	ldr	r0, [r7, #12]
    d060:	4b08      	ldr	r3, [pc, #32]	; (d084 <usb_find_cfg_desc+0x74>)
    d062:	4798      	blx	r3
    d064:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d066:	68fa      	ldr	r2, [r7, #12]
    d068:	68bb      	ldr	r3, [r7, #8]
    d06a:	429a      	cmp	r2, r3
    d06c:	d3e2      	bcc.n	d034 <usb_find_cfg_desc+0x24>
    d06e:	e000      	b.n	d072 <usb_find_cfg_desc+0x62>
			break;
    d070:	bf00      	nop
	}
	return NULL;
    d072:	2300      	movs	r3, #0
}
    d074:	4618      	mov	r0, r3
    d076:	3710      	adds	r7, #16
    d078:	46bd      	mov	sp, r7
    d07a:	bd80      	pop	{r7, pc}
    d07c:	0000cf51 	.word	0x0000cf51
    d080:	0000ceb7 	.word	0x0000ceb7
    d084:	0000cf2d 	.word	0x0000cf2d

0000d088 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d088:	b580      	push	{r7, lr}
    d08a:	b086      	sub	sp, #24
    d08c:	af00      	add	r7, sp, #0
    d08e:	60f8      	str	r0, [r7, #12]
    d090:	60b9      	str	r1, [r7, #8]
    d092:	4613      	mov	r3, r2
    d094:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d096:	2300      	movs	r3, #0
    d098:	75fb      	strb	r3, [r7, #23]
    d09a:	e020      	b.n	d0de <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d09c:	2203      	movs	r2, #3
    d09e:	68b9      	ldr	r1, [r7, #8]
    d0a0:	68f8      	ldr	r0, [r7, #12]
    d0a2:	4b13      	ldr	r3, [pc, #76]	; (d0f0 <usb_find_str_desc+0x68>)
    d0a4:	4798      	blx	r3
    d0a6:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d0a8:	68fb      	ldr	r3, [r7, #12]
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d015      	beq.n	d0da <usb_find_str_desc+0x52>
			_desc_len_check();
    d0ae:	68f8      	ldr	r0, [r7, #12]
    d0b0:	4b10      	ldr	r3, [pc, #64]	; (d0f4 <usb_find_str_desc+0x6c>)
    d0b2:	4798      	blx	r3
    d0b4:	4603      	mov	r3, r0
    d0b6:	2b01      	cmp	r3, #1
    d0b8:	d801      	bhi.n	d0be <usb_find_str_desc+0x36>
    d0ba:	2300      	movs	r3, #0
    d0bc:	e014      	b.n	d0e8 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d0be:	7dfa      	ldrb	r2, [r7, #23]
    d0c0:	79fb      	ldrb	r3, [r7, #7]
    d0c2:	429a      	cmp	r2, r3
    d0c4:	d101      	bne.n	d0ca <usb_find_str_desc+0x42>
				return desc;
    d0c6:	68fb      	ldr	r3, [r7, #12]
    d0c8:	e00e      	b.n	d0e8 <usb_find_str_desc+0x60>
			}
			i++;
    d0ca:	7dfb      	ldrb	r3, [r7, #23]
    d0cc:	3301      	adds	r3, #1
    d0ce:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d0d0:	68f8      	ldr	r0, [r7, #12]
    d0d2:	4b09      	ldr	r3, [pc, #36]	; (d0f8 <usb_find_str_desc+0x70>)
    d0d4:	4798      	blx	r3
    d0d6:	60f8      	str	r0, [r7, #12]
    d0d8:	e001      	b.n	d0de <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d0da:	2300      	movs	r3, #0
    d0dc:	e004      	b.n	d0e8 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d0de:	68fa      	ldr	r2, [r7, #12]
    d0e0:	68bb      	ldr	r3, [r7, #8]
    d0e2:	429a      	cmp	r2, r3
    d0e4:	d3da      	bcc.n	d09c <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d0e6:	2300      	movs	r3, #0
}
    d0e8:	4618      	mov	r0, r3
    d0ea:	3718      	adds	r7, #24
    d0ec:	46bd      	mov	sp, r7
    d0ee:	bd80      	pop	{r7, pc}
    d0f0:	0000cf51 	.word	0x0000cf51
    d0f4:	0000ceb7 	.word	0x0000ceb7
    d0f8:	0000cee9 	.word	0x0000cee9

0000d0fc <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d0fc:	b480      	push	{r7}
    d0fe:	b083      	sub	sp, #12
    d100:	af00      	add	r7, sp, #0
    d102:	6078      	str	r0, [r7, #4]
    d104:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	683a      	ldr	r2, [r7, #0]
    d10a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	4618      	mov	r0, r3
    d110:	370c      	adds	r7, #12
    d112:	46bd      	mov	sp, r7
    d114:	bc80      	pop	{r7}
    d116:	4770      	bx	lr

0000d118 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d118:	b480      	push	{r7}
    d11a:	b083      	sub	sp, #12
    d11c:	af00      	add	r7, sp, #0
    d11e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d120:	687b      	ldr	r3, [r7, #4]
    d122:	4618      	mov	r0, r3
    d124:	370c      	adds	r7, #12
    d126:	46bd      	mov	sp, r7
    d128:	bc80      	pop	{r7}
    d12a:	4770      	bx	lr

0000d12c <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d12c:	b580      	push	{r7, lr}
    d12e:	b082      	sub	sp, #8
    d130:	af00      	add	r7, sp, #0
    d132:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d134:	687b      	ldr	r3, [r7, #4]
    d136:	4a23      	ldr	r2, [pc, #140]	; (d1c4 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d138:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d13a:	687b      	ldr	r3, [r7, #4]
    d13c:	4a21      	ldr	r2, [pc, #132]	; (d1c4 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d13e:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d140:	687b      	ldr	r3, [r7, #4]
    d142:	691a      	ldr	r2, [r3, #16]
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	330c      	adds	r3, #12
    d148:	4619      	mov	r1, r3
    d14a:	4610      	mov	r0, r2
    d14c:	4b1e      	ldr	r3, [pc, #120]	; (d1c8 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    d14e:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	691b      	ldr	r3, [r3, #16]
    d154:	4618      	mov	r0, r3
    d156:	4b1d      	ldr	r3, [pc, #116]	; (d1cc <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d158:	4798      	blx	r3
    d15a:	4603      	mov	r3, r0
    d15c:	b2da      	uxtb	r2, r3
    d15e:	687b      	ldr	r3, [r7, #4]
    d160:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    d162:	687b      	ldr	r3, [r7, #4]
    d164:	7d1b      	ldrb	r3, [r3, #20]
    d166:	2b00      	cmp	r3, #0
    d168:	bf0c      	ite	eq
    d16a:	2301      	moveq	r3, #1
    d16c:	2300      	movne	r3, #0
    d16e:	b2da      	uxtb	r2, r3
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	725a      	strb	r2, [r3, #9]
	if (isOK)
    d174:	687b      	ldr	r3, [r7, #4]
    d176:	7a5b      	ldrb	r3, [r3, #9]
    d178:	b2db      	uxtb	r3, r3
    d17a:	2b00      	cmp	r3, #0
    d17c:	d116      	bne.n	d1ac <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    d17e:	687b      	ldr	r3, [r7, #4]
    d180:	691b      	ldr	r3, [r3, #16]
    d182:	4618      	mov	r0, r3
    d184:	4b12      	ldr	r3, [pc, #72]	; (d1d0 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    d186:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d188:	687b      	ldr	r3, [r7, #4]
    d18a:	691b      	ldr	r3, [r3, #16]
    d18c:	4618      	mov	r0, r3
    d18e:	4b0f      	ldr	r3, [pc, #60]	; (d1cc <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d190:	4798      	blx	r3
    d192:	4603      	mov	r3, r0
    d194:	b2da      	uxtb	r2, r3
    d196:	687b      	ldr	r3, [r7, #4]
    d198:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    d19a:	687b      	ldr	r3, [r7, #4]
    d19c:	7d1b      	ldrb	r3, [r3, #20]
    d19e:	2b00      	cmp	r3, #0
    d1a0:	bf0c      	ite	eq
    d1a2:	2301      	moveq	r3, #1
    d1a4:	2300      	movne	r3, #0
    d1a6:	b2da      	uxtb	r2, r3
    d1a8:	687b      	ldr	r3, [r7, #4]
    d1aa:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    d1ac:	687b      	ldr	r3, [r7, #4]
    d1ae:	7a5b      	ldrb	r3, [r3, #9]
    d1b0:	b2da      	uxtb	r2, r3
    d1b2:	687b      	ldr	r3, [r7, #4]
    d1b4:	721a      	strb	r2, [r3, #8]
	return isOK;
    d1b6:	687b      	ldr	r3, [r7, #4]
    d1b8:	7a5b      	ldrb	r3, [r3, #9]
    d1ba:	b2db      	uxtb	r3, r3
	
}
    d1bc:	4618      	mov	r0, r3
    d1be:	3708      	adds	r7, #8
    d1c0:	46bd      	mov	sp, r7
    d1c2:	bd80      	pop	{r7, pc}
    d1c4:	20001074 	.word	0x20001074
    d1c8:	000024cf 	.word	0x000024cf
    d1cc:	00002455 	.word	0x00002455
    d1d0:	00002475 	.word	0x00002475

0000d1d4 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d1d4:	b580      	push	{r7, lr}
    d1d6:	b082      	sub	sp, #8
    d1d8:	af00      	add	r7, sp, #0
    d1da:	6078      	str	r0, [r7, #4]
    d1dc:	460b      	mov	r3, r1
    d1de:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d1e0:	687b      	ldr	r3, [r7, #4]
    d1e2:	691b      	ldr	r3, [r3, #16]
    d1e4:	78fa      	ldrb	r2, [r7, #3]
    d1e6:	b211      	sxth	r1, r2
    d1e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d1ec:	4618      	mov	r0, r3
    d1ee:	4b03      	ldr	r3, [pc, #12]	; (d1fc <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d1f0:	4798      	blx	r3
    d1f2:	4603      	mov	r3, r0
}
    d1f4:	4618      	mov	r0, r3
    d1f6:	3708      	adds	r7, #8
    d1f8:	46bd      	mov	sp, r7
    d1fa:	bd80      	pop	{r7, pc}
    d1fc:	00002495 	.word	0x00002495

0000d200 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d200:	b580      	push	{r7, lr}
    d202:	b086      	sub	sp, #24
    d204:	af00      	add	r7, sp, #0
    d206:	60f8      	str	r0, [r7, #12]
    d208:	60b9      	str	r1, [r7, #8]
    d20a:	4613      	mov	r3, r2
    d20c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d20e:	68fb      	ldr	r3, [r7, #12]
    d210:	68db      	ldr	r3, [r3, #12]
    d212:	88fa      	ldrh	r2, [r7, #6]
    d214:	68b9      	ldr	r1, [r7, #8]
    d216:	4618      	mov	r0, r3
    d218:	4b03      	ldr	r3, [pc, #12]	; (d228 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d21a:	4798      	blx	r3
    d21c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d21e:	697b      	ldr	r3, [r7, #20]
}
    d220:	4618      	mov	r0, r3
    d222:	3718      	adds	r7, #24
    d224:	46bd      	mov	sp, r7
    d226:	bd80      	pop	{r7, pc}
    d228:	00010205 	.word	0x00010205

0000d22c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d22c:	b580      	push	{r7, lr}
    d22e:	b086      	sub	sp, #24
    d230:	af00      	add	r7, sp, #0
    d232:	60f8      	str	r0, [r7, #12]
    d234:	60b9      	str	r1, [r7, #8]
    d236:	4613      	mov	r3, r2
    d238:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d23a:	68fb      	ldr	r3, [r7, #12]
    d23c:	68db      	ldr	r3, [r3, #12]
    d23e:	88fa      	ldrh	r2, [r7, #6]
    d240:	68b9      	ldr	r1, [r7, #8]
    d242:	4618      	mov	r0, r3
    d244:	4b03      	ldr	r3, [pc, #12]	; (d254 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d246:	4798      	blx	r3
    d248:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d24a:	697b      	ldr	r3, [r7, #20]
}
    d24c:	4618      	mov	r0, r3
    d24e:	3718      	adds	r7, #24
    d250:	46bd      	mov	sp, r7
    d252:	bd80      	pop	{r7, pc}
    d254:	00010255 	.word	0x00010255

0000d258 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    d258:	b580      	push	{r7, lr}
    d25a:	b082      	sub	sp, #8
    d25c:	af00      	add	r7, sp, #0
    d25e:	6078      	str	r0, [r7, #4]
    d260:	6039      	str	r1, [r7, #0]
    d262:	687b      	ldr	r3, [r7, #4]
    d264:	2b01      	cmp	r3, #1
    d266:	d10d      	bne.n	d284 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d268:	683b      	ldr	r3, [r7, #0]
    d26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d26e:	4293      	cmp	r3, r2
    d270:	d108      	bne.n	d284 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    d272:	4906      	ldr	r1, [pc, #24]	; (d28c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d274:	4806      	ldr	r0, [pc, #24]	; (d290 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d276:	4b07      	ldr	r3, [pc, #28]	; (d294 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d278:	4798      	blx	r3
    d27a:	4a07      	ldr	r2, [pc, #28]	; (d298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d27c:	4907      	ldr	r1, [pc, #28]	; (d29c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d27e:	4804      	ldr	r0, [pc, #16]	; (d290 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d280:	4b07      	ldr	r3, [pc, #28]	; (d2a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d282:	4798      	blx	r3
    d284:	bf00      	nop
    d286:	3708      	adds	r7, #8
    d288:	46bd      	mov	sp, r7
    d28a:	bd80      	pop	{r7, pc}
    d28c:	2000ae28 	.word	0x2000ae28
    d290:	2000105c 	.word	0x2000105c
    d294:	0000d0fd 	.word	0x0000d0fd
    d298:	20000000 	.word	0x20000000
    d29c:	0000d119 	.word	0x0000d119
    d2a0:	0001193d 	.word	0x0001193d

0000d2a4 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    d2a4:	b580      	push	{r7, lr}
    d2a6:	af00      	add	r7, sp, #0
    d2a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d2ac:	2001      	movs	r0, #1
    d2ae:	4b01      	ldr	r3, [pc, #4]	; (d2b4 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    d2b0:	4798      	blx	r3
    d2b2:	bd80      	pop	{r7, pc}
    d2b4:	0000d259 	.word	0x0000d259

0000d2b8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d2b8:	b480      	push	{r7}
    d2ba:	b083      	sub	sp, #12
    d2bc:	af00      	add	r7, sp, #0
    d2be:	6078      	str	r0, [r7, #4]
    d2c0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d2c2:	687b      	ldr	r3, [r7, #4]
    d2c4:	683a      	ldr	r2, [r7, #0]
    d2c6:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    d2c8:	687b      	ldr	r3, [r7, #4]
    d2ca:	68db      	ldr	r3, [r3, #12]
    d2cc:	2200      	movs	r2, #0
    d2ce:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    d2d0:	4a06      	ldr	r2, [pc, #24]	; (d2ec <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    d2d2:	687b      	ldr	r3, [r7, #4]
    d2d4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d2d6:	687b      	ldr	r3, [r7, #4]
    d2d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d2dc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d2de:	687b      	ldr	r3, [r7, #4]
    d2e0:	4618      	mov	r0, r3
    d2e2:	370c      	adds	r7, #12
    d2e4:	46bd      	mov	sp, r7
    d2e6:	bc80      	pop	{r7}
    d2e8:	4770      	bx	lr
    d2ea:	bf00      	nop
    d2ec:	200011f4 	.word	0x200011f4

0000d2f0 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d2f0:	b480      	push	{r7}
    d2f2:	b083      	sub	sp, #12
    d2f4:	af00      	add	r7, sp, #0
    d2f6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d2f8:	687b      	ldr	r3, [r7, #4]
    d2fa:	2200      	movs	r2, #0
    d2fc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d2fe:	687b      	ldr	r3, [r7, #4]
    d300:	4618      	mov	r0, r3
    d302:	370c      	adds	r7, #12
    d304:	46bd      	mov	sp, r7
    d306:	bc80      	pop	{r7}
    d308:	4770      	bx	lr
	...

0000d30c <_ZL9InitArrayv>:


static void InitArray(){
    d30c:	b480      	push	{r7}
    d30e:	b083      	sub	sp, #12
    d310:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d312:	2301      	movs	r3, #1
    d314:	607b      	str	r3, [r7, #4]
    d316:	687b      	ldr	r3, [r7, #4]
    d318:	2b1f      	cmp	r3, #31
    d31a:	dc34      	bgt.n	d386 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d31c:	491e      	ldr	r1, [pc, #120]	; (d398 <_ZL9InitArrayv+0x8c>)
    d31e:	687a      	ldr	r2, [r7, #4]
    d320:	4613      	mov	r3, r2
    d322:	009b      	lsls	r3, r3, #2
    d324:	4413      	add	r3, r2
    d326:	009b      	lsls	r3, r3, #2
    d328:	440b      	add	r3, r1
    d32a:	2200      	movs	r2, #0
    d32c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d32e:	491a      	ldr	r1, [pc, #104]	; (d398 <_ZL9InitArrayv+0x8c>)
    d330:	687a      	ldr	r2, [r7, #4]
    d332:	4613      	mov	r3, r2
    d334:	009b      	lsls	r3, r3, #2
    d336:	4413      	add	r3, r2
    d338:	009b      	lsls	r3, r3, #2
    d33a:	440b      	add	r3, r1
    d33c:	330c      	adds	r3, #12
    d33e:	2200      	movs	r2, #0
    d340:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d342:	687b      	ldr	r3, [r7, #4]
    d344:	1e5a      	subs	r2, r3, #1
    d346:	6879      	ldr	r1, [r7, #4]
    d348:	460b      	mov	r3, r1
    d34a:	009b      	lsls	r3, r3, #2
    d34c:	440b      	add	r3, r1
    d34e:	009b      	lsls	r3, r3, #2
    d350:	4911      	ldr	r1, [pc, #68]	; (d398 <_ZL9InitArrayv+0x8c>)
    d352:	4419      	add	r1, r3
    d354:	4810      	ldr	r0, [pc, #64]	; (d398 <_ZL9InitArrayv+0x8c>)
    d356:	4613      	mov	r3, r2
    d358:	009b      	lsls	r3, r3, #2
    d35a:	4413      	add	r3, r2
    d35c:	009b      	lsls	r3, r3, #2
    d35e:	4403      	add	r3, r0
    d360:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    d362:	4a0e      	ldr	r2, [pc, #56]	; (d39c <_ZL9InitArrayv+0x90>)
    d364:	687b      	ldr	r3, [r7, #4]
    d366:	2100      	movs	r1, #0
    d368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    d36c:	687b      	ldr	r3, [r7, #4]
    d36e:	3b01      	subs	r3, #1
    d370:	687a      	ldr	r2, [r7, #4]
    d372:	0092      	lsls	r2, r2, #2
    d374:	4909      	ldr	r1, [pc, #36]	; (d39c <_ZL9InitArrayv+0x90>)
    d376:	440a      	add	r2, r1
    d378:	4908      	ldr	r1, [pc, #32]	; (d39c <_ZL9InitArrayv+0x90>)
    d37a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    d37e:	687b      	ldr	r3, [r7, #4]
    d380:	3301      	adds	r3, #1
    d382:	607b      	str	r3, [r7, #4]
    d384:	e7c7      	b.n	d316 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    d386:	4b06      	ldr	r3, [pc, #24]	; (d3a0 <_ZL9InitArrayv+0x94>)
    d388:	2201      	movs	r2, #1
    d38a:	701a      	strb	r2, [r3, #0]
		
}
    d38c:	bf00      	nop
    d38e:	370c      	adds	r7, #12
    d390:	46bd      	mov	sp, r7
    d392:	bc80      	pop	{r7}
    d394:	4770      	bx	lr
    d396:	bf00      	nop
    d398:	200011f8 	.word	0x200011f8
    d39c:	20001478 	.word	0x20001478
    d3a0:	200014f8 	.word	0x200014f8

0000d3a4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d3a4:	b580      	push	{r7, lr}
    d3a6:	b082      	sub	sp, #8
    d3a8:	af00      	add	r7, sp, #0
    d3aa:	6078      	str	r0, [r7, #4]
	ticks=0;
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	2200      	movs	r2, #0
    d3b0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d3b2:	4b0d      	ldr	r3, [pc, #52]	; (d3e8 <_ZN11Timer_Class4InitEv+0x44>)
    d3b4:	781b      	ldrb	r3, [r3, #0]
    d3b6:	f083 0301 	eor.w	r3, r3, #1
    d3ba:	b2db      	uxtb	r3, r3
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d001      	beq.n	d3c4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d3c0:	4b0a      	ldr	r3, [pc, #40]	; (d3ec <_ZN11Timer_Class4InitEv+0x48>)
    d3c2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    d3c4:	6878      	ldr	r0, [r7, #4]
    d3c6:	4b0a      	ldr	r3, [pc, #40]	; (d3f0 <_ZN11Timer_Class4InitEv+0x4c>)
    d3c8:	4798      	blx	r3
    d3ca:	4603      	mov	r3, r0
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	bf0c      	ite	eq
    d3d0:	2301      	moveq	r3, #1
    d3d2:	2300      	movne	r3, #0
    d3d4:	b2da      	uxtb	r2, r3
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	709a      	strb	r2, [r3, #2]
	return isOK;
    d3da:	687b      	ldr	r3, [r7, #4]
    d3dc:	789b      	ldrb	r3, [r3, #2]
    d3de:	b2db      	uxtb	r3, r3
}
    d3e0:	4618      	mov	r0, r3
    d3e2:	3708      	adds	r7, #8
    d3e4:	46bd      	mov	sp, r7
    d3e6:	bd80      	pop	{r7, pc}
    d3e8:	200014f8 	.word	0x200014f8
    d3ec:	0000d30d 	.word	0x0000d30d
    d3f0:	0000d3f5 	.word	0x0000d3f5

0000d3f4 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    d3f4:	b580      	push	{r7, lr}
    d3f6:	b084      	sub	sp, #16
    d3f8:	af00      	add	r7, sp, #0
    d3fa:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d3fc:	687b      	ldr	r3, [r7, #4]
    d3fe:	68db      	ldr	r3, [r3, #12]
    d400:	4618      	mov	r0, r3
    d402:	4b04      	ldr	r3, [pc, #16]	; (d414 <_ZN11Timer_Class5StartEv+0x20>)
    d404:	4798      	blx	r3
    d406:	60f8      	str	r0, [r7, #12]
	return status;
    d408:	68fb      	ldr	r3, [r7, #12]
	
}
    d40a:	4618      	mov	r0, r3
    d40c:	3710      	adds	r7, #16
    d40e:	46bd      	mov	sp, r7
    d410:	bd80      	pop	{r7, pc}
    d412:	bf00      	nop
    d414:	000028e9 	.word	0x000028e9

0000d418 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    d418:	b580      	push	{r7, lr}
    d41a:	b084      	sub	sp, #16
    d41c:	af00      	add	r7, sp, #0
    d41e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    d420:	687b      	ldr	r3, [r7, #4]
    d422:	68db      	ldr	r3, [r3, #12]
    d424:	4618      	mov	r0, r3
    d426:	4b05      	ldr	r3, [pc, #20]	; (d43c <_ZN11Timer_Class4StopEv+0x24>)
    d428:	4798      	blx	r3
    d42a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	2200      	movs	r2, #0
    d430:	705a      	strb	r2, [r3, #1]
	return status;
    d432:	68fb      	ldr	r3, [r7, #12]
}
    d434:	4618      	mov	r0, r3
    d436:	3710      	adds	r7, #16
    d438:	46bd      	mov	sp, r7
    d43a:	bd80      	pop	{r7, pc}
    d43c:	00002951 	.word	0x00002951

0000d440 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d440:	b580      	push	{r7, lr}
    d442:	b086      	sub	sp, #24
    d444:	af00      	add	r7, sp, #0
    d446:	60f8      	str	r0, [r7, #12]
    d448:	60b9      	str	r1, [r7, #8]
    d44a:	607a      	str	r2, [r7, #4]
    d44c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    d44e:	68b9      	ldr	r1, [r7, #8]
    d450:	68f8      	ldr	r0, [r7, #12]
    d452:	4b0e      	ldr	r3, [pc, #56]	; (d48c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d454:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    d456:	68fb      	ldr	r3, [r7, #12]
    d458:	699b      	ldr	r3, [r3, #24]
    d45a:	687a      	ldr	r2, [r7, #4]
    d45c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d45e:	68fb      	ldr	r3, [r7, #12]
    d460:	699b      	ldr	r3, [r3, #24]
    d462:	68ba      	ldr	r2, [r7, #8]
    d464:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d466:	68fb      	ldr	r3, [r7, #12]
    d468:	699b      	ldr	r3, [r3, #24]
    d46a:	78fa      	ldrb	r2, [r7, #3]
    d46c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d46e:	68fb      	ldr	r3, [r7, #12]
    d470:	68da      	ldr	r2, [r3, #12]
    d472:	68fb      	ldr	r3, [r7, #12]
    d474:	699b      	ldr	r3, [r3, #24]
    d476:	4619      	mov	r1, r3
    d478:	4610      	mov	r0, r2
    d47a:	4b05      	ldr	r3, [pc, #20]	; (d490 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    d47c:	4798      	blx	r3
    d47e:	6178      	str	r0, [r7, #20]
	
	return status;
    d480:	697b      	ldr	r3, [r7, #20]
}
    d482:	4618      	mov	r0, r3
    d484:	3718      	adds	r7, #24
    d486:	46bd      	mov	sp, r7
    d488:	bd80      	pop	{r7, pc}
    d48a:	bf00      	nop
    d48c:	0000d5a9 	.word	0x0000d5a9
    d490:	000029bd 	.word	0x000029bd

0000d494 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    d494:	b580      	push	{r7, lr}
    d496:	b082      	sub	sp, #8
    d498:	af00      	add	r7, sp, #0
    d49a:	6078      	str	r0, [r7, #4]
    d49c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    d49e:	6839      	ldr	r1, [r7, #0]
    d4a0:	6878      	ldr	r0, [r7, #4]
    d4a2:	4b0f      	ldr	r3, [pc, #60]	; (d4e0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    d4a4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    d4a6:	687b      	ldr	r3, [r7, #4]
    d4a8:	68db      	ldr	r3, [r3, #12]
    d4aa:	f103 0218 	add.w	r2, r3, #24
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	699b      	ldr	r3, [r3, #24]
    d4b2:	4619      	mov	r1, r3
    d4b4:	4610      	mov	r0, r2
    d4b6:	4b0b      	ldr	r3, [pc, #44]	; (d4e4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    d4b8:	4798      	blx	r3
    d4ba:	4603      	mov	r3, r0
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d007      	beq.n	d4d0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	68da      	ldr	r2, [r3, #12]
    d4c4:	687b      	ldr	r3, [r7, #4]
    d4c6:	699b      	ldr	r3, [r3, #24]
    d4c8:	4619      	mov	r1, r3
    d4ca:	4610      	mov	r0, r2
    d4cc:	4b06      	ldr	r3, [pc, #24]	; (d4e8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    d4ce:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	699b      	ldr	r3, [r3, #24]
    d4d4:	2200      	movs	r2, #0
    d4d6:	60da      	str	r2, [r3, #12]
}
    d4d8:	bf00      	nop
    d4da:	3708      	adds	r7, #8
    d4dc:	46bd      	mov	sp, r7
    d4de:	bd80      	pop	{r7, pc}
    d4e0:	0000d629 	.word	0x0000d629
    d4e4:	000036a9 	.word	0x000036a9
    d4e8:	00002ac1 	.word	0x00002ac1

0000d4ec <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    d4ec:	b590      	push	{r4, r7, lr}
    d4ee:	b087      	sub	sp, #28
    d4f0:	af00      	add	r7, sp, #0
    d4f2:	60f8      	str	r0, [r7, #12]
    d4f4:	60b9      	str	r1, [r7, #8]
    d4f6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    d4f8:	2300      	movs	r3, #0
    d4fa:	687a      	ldr	r2, [r7, #4]
    d4fc:	68b9      	ldr	r1, [r7, #8]
    d4fe:	68f8      	ldr	r0, [r7, #12]
    d500:	4c0c      	ldr	r4, [pc, #48]	; (d534 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    d502:	47a0      	blx	r4
    d504:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d506:	68fb      	ldr	r3, [r7, #12]
    d508:	68db      	ldr	r3, [r3, #12]
    d50a:	681b      	ldr	r3, [r3, #0]
    d50c:	699b      	ldr	r3, [r3, #24]
    d50e:	68fa      	ldr	r2, [r7, #12]
    d510:	68d2      	ldr	r2, [r2, #12]
    d512:	3204      	adds	r2, #4
    d514:	4610      	mov	r0, r2
    d516:	4798      	blx	r3
    d518:	4603      	mov	r3, r0
    d51a:	2b00      	cmp	r3, #0
    d51c:	d105      	bne.n	d52a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    d51e:	68fb      	ldr	r3, [r7, #12]
    d520:	68db      	ldr	r3, [r3, #12]
    d522:	4618      	mov	r0, r3
    d524:	4b04      	ldr	r3, [pc, #16]	; (d538 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    d526:	4798      	blx	r3
    d528:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    d52a:	697b      	ldr	r3, [r7, #20]
}
    d52c:	4618      	mov	r0, r3
    d52e:	371c      	adds	r7, #28
    d530:	46bd      	mov	sp, r7
    d532:	bd90      	pop	{r4, r7, pc}
    d534:	0000d441 	.word	0x0000d441
    d538:	000028e9 	.word	0x000028e9

0000d53c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    d53c:	b480      	push	{r7}
    d53e:	b085      	sub	sp, #20
    d540:	af00      	add	r7, sp, #0
    d542:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d544:	2300      	movs	r3, #0
    d546:	73fb      	strb	r3, [r7, #15]
    d548:	7bfb      	ldrb	r3, [r7, #15]
    d54a:	2b1f      	cmp	r3, #31
    d54c:	dc23      	bgt.n	d596 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d54e:	687b      	ldr	r3, [r7, #4]
    d550:	7f1a      	ldrb	r2, [r3, #28]
    d552:	7bfb      	ldrb	r3, [r7, #15]
    d554:	4413      	add	r3, r2
    d556:	b2db      	uxtb	r3, r3
    d558:	f003 031f 	and.w	r3, r3, #31
    d55c:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d55e:	7bba      	ldrb	r2, [r7, #14]
    d560:	4910      	ldr	r1, [pc, #64]	; (d5a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d562:	4613      	mov	r3, r2
    d564:	009b      	lsls	r3, r3, #2
    d566:	4413      	add	r3, r2
    d568:	009b      	lsls	r3, r3, #2
    d56a:	440b      	add	r3, r1
    d56c:	330c      	adds	r3, #12
    d56e:	681b      	ldr	r3, [r3, #0]
    d570:	2b00      	cmp	r3, #0
    d572:	d10c      	bne.n	d58e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    d574:	7bba      	ldrb	r2, [r7, #14]
    d576:	4613      	mov	r3, r2
    d578:	009b      	lsls	r3, r3, #2
    d57a:	4413      	add	r3, r2
    d57c:	009b      	lsls	r3, r3, #2
    d57e:	4a09      	ldr	r2, [pc, #36]	; (d5a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d580:	441a      	add	r2, r3
    d582:	687b      	ldr	r3, [r7, #4]
    d584:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d586:	687b      	ldr	r3, [r7, #4]
    d588:	7bba      	ldrb	r2, [r7, #14]
    d58a:	771a      	strb	r2, [r3, #28]
			return;
    d58c:	e006      	b.n	d59c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d58e:	7bfb      	ldrb	r3, [r7, #15]
    d590:	3301      	adds	r3, #1
    d592:	73fb      	strb	r3, [r7, #15]
    d594:	e7d8      	b.n	d548 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	4a02      	ldr	r2, [pc, #8]	; (d5a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d59a:	619a      	str	r2, [r3, #24]

}
    d59c:	3714      	adds	r7, #20
    d59e:	46bd      	mov	sp, r7
    d5a0:	bc80      	pop	{r7}
    d5a2:	4770      	bx	lr
    d5a4:	200011f8 	.word	0x200011f8

0000d5a8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    d5a8:	b580      	push	{r7, lr}
    d5aa:	b084      	sub	sp, #16
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	6078      	str	r0, [r7, #4]
    d5b0:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d5b2:	2300      	movs	r3, #0
    d5b4:	73fb      	strb	r3, [r7, #15]
    d5b6:	7bfb      	ldrb	r3, [r7, #15]
    d5b8:	2b1f      	cmp	r3, #31
    d5ba:	dc28      	bgt.n	d60e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	7f1a      	ldrb	r2, [r3, #28]
    d5c0:	7bfb      	ldrb	r3, [r7, #15]
    d5c2:	4413      	add	r3, r2
    d5c4:	b2db      	uxtb	r3, r3
    d5c6:	f003 031f 	and.w	r3, r3, #31
    d5ca:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    d5cc:	7bba      	ldrb	r2, [r7, #14]
    d5ce:	4913      	ldr	r1, [pc, #76]	; (d61c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d5d0:	4613      	mov	r3, r2
    d5d2:	009b      	lsls	r3, r3, #2
    d5d4:	4413      	add	r3, r2
    d5d6:	009b      	lsls	r3, r3, #2
    d5d8:	440b      	add	r3, r1
    d5da:	330c      	adds	r3, #12
    d5dc:	681a      	ldr	r2, [r3, #0]
    d5de:	683b      	ldr	r3, [r7, #0]
    d5e0:	429a      	cmp	r2, r3
    d5e2:	d110      	bne.n	d606 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    d5e4:	6839      	ldr	r1, [r7, #0]
    d5e6:	6878      	ldr	r0, [r7, #4]
    d5e8:	4b0d      	ldr	r3, [pc, #52]	; (d620 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    d5ea:	4798      	blx	r3
			task=&taskArray[j];
    d5ec:	7bba      	ldrb	r2, [r7, #14]
    d5ee:	4613      	mov	r3, r2
    d5f0:	009b      	lsls	r3, r3, #2
    d5f2:	4413      	add	r3, r2
    d5f4:	009b      	lsls	r3, r3, #2
    d5f6:	4a09      	ldr	r2, [pc, #36]	; (d61c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d5f8:	441a      	add	r2, r3
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d5fe:	687b      	ldr	r3, [r7, #4]
    d600:	7bba      	ldrb	r2, [r7, #14]
    d602:	771a      	strb	r2, [r3, #28]
			return;
    d604:	e006      	b.n	d614 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d606:	7bfb      	ldrb	r3, [r7, #15]
    d608:	3301      	adds	r3, #1
    d60a:	73fb      	strb	r3, [r7, #15]
    d60c:	e7d3      	b.n	d5b6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    d60e:	6878      	ldr	r0, [r7, #4]
    d610:	4b04      	ldr	r3, [pc, #16]	; (d624 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    d612:	4798      	blx	r3
	//task=&taskArray[0];

}
    d614:	3710      	adds	r7, #16
    d616:	46bd      	mov	sp, r7
    d618:	bd80      	pop	{r7, pc}
    d61a:	bf00      	nop
    d61c:	200011f8 	.word	0x200011f8
    d620:	0000d495 	.word	0x0000d495
    d624:	0000d53d 	.word	0x0000d53d

0000d628 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    d628:	b480      	push	{r7}
    d62a:	b085      	sub	sp, #20
    d62c:	af00      	add	r7, sp, #0
    d62e:	6078      	str	r0, [r7, #4]
    d630:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d632:	2300      	movs	r3, #0
    d634:	73fb      	strb	r3, [r7, #15]
    d636:	7bfb      	ldrb	r3, [r7, #15]
    d638:	2b1f      	cmp	r3, #31
    d63a:	dc19      	bgt.n	d670 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    d63c:	7bfa      	ldrb	r2, [r7, #15]
    d63e:	490f      	ldr	r1, [pc, #60]	; (d67c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d640:	4613      	mov	r3, r2
    d642:	009b      	lsls	r3, r3, #2
    d644:	4413      	add	r3, r2
    d646:	009b      	lsls	r3, r3, #2
    d648:	440b      	add	r3, r1
    d64a:	330c      	adds	r3, #12
    d64c:	681a      	ldr	r2, [r3, #0]
    d64e:	683b      	ldr	r3, [r7, #0]
    d650:	429a      	cmp	r2, r3
    d652:	d109      	bne.n	d668 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    d654:	7bfa      	ldrb	r2, [r7, #15]
    d656:	4613      	mov	r3, r2
    d658:	009b      	lsls	r3, r3, #2
    d65a:	4413      	add	r3, r2
    d65c:	009b      	lsls	r3, r3, #2
    d65e:	4a07      	ldr	r2, [pc, #28]	; (d67c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d660:	441a      	add	r2, r3
    d662:	687b      	ldr	r3, [r7, #4]
    d664:	619a      	str	r2, [r3, #24]
			return;
    d666:	e004      	b.n	d672 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d668:	7bfb      	ldrb	r3, [r7, #15]
    d66a:	3301      	adds	r3, #1
    d66c:	73fb      	strb	r3, [r7, #15]
    d66e:	e7e2      	b.n	d636 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    d670:	bf00      	nop
}
    d672:	3714      	adds	r7, #20
    d674:	46bd      	mov	sp, r7
    d676:	bc80      	pop	{r7}
    d678:	4770      	bx	lr
    d67a:	bf00      	nop
    d67c:	200011f8 	.word	0x200011f8

0000d680 <_Z41__static_initialization_and_destruction_0ii>:
    d680:	b580      	push	{r7, lr}
    d682:	b082      	sub	sp, #8
    d684:	af00      	add	r7, sp, #0
    d686:	6078      	str	r0, [r7, #4]
    d688:	6039      	str	r1, [r7, #0]
    d68a:	687b      	ldr	r3, [r7, #4]
    d68c:	2b01      	cmp	r3, #1
    d68e:	d14c      	bne.n	d72a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    d690:	683b      	ldr	r3, [r7, #0]
    d692:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d696:	4293      	cmp	r3, r2
    d698:	d147      	bne.n	d72a <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d69a:	4926      	ldr	r1, [pc, #152]	; (d734 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    d69c:	4826      	ldr	r0, [pc, #152]	; (d738 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d69e:	4b27      	ldr	r3, [pc, #156]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d6a0:	4798      	blx	r3
    d6a2:	4a27      	ldr	r2, [pc, #156]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d6a4:	4927      	ldr	r1, [pc, #156]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d6a6:	4824      	ldr	r0, [pc, #144]	; (d738 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d6a8:	4b27      	ldr	r3, [pc, #156]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d6aa:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d6ac:	4927      	ldr	r1, [pc, #156]	; (d74c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d6ae:	4828      	ldr	r0, [pc, #160]	; (d750 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d6b0:	4b22      	ldr	r3, [pc, #136]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d6b2:	4798      	blx	r3
    d6b4:	4a22      	ldr	r2, [pc, #136]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d6b6:	4923      	ldr	r1, [pc, #140]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d6b8:	4825      	ldr	r0, [pc, #148]	; (d750 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d6ba:	4b23      	ldr	r3, [pc, #140]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d6bc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d6be:	4925      	ldr	r1, [pc, #148]	; (d754 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d6c0:	4825      	ldr	r0, [pc, #148]	; (d758 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d6c2:	4b1e      	ldr	r3, [pc, #120]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d6c4:	4798      	blx	r3
    d6c6:	4a1e      	ldr	r2, [pc, #120]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d6c8:	491e      	ldr	r1, [pc, #120]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d6ca:	4823      	ldr	r0, [pc, #140]	; (d758 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d6cc:	4b1e      	ldr	r3, [pc, #120]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d6ce:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d6d0:	4922      	ldr	r1, [pc, #136]	; (d75c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d6d2:	4823      	ldr	r0, [pc, #140]	; (d760 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d6d4:	4b19      	ldr	r3, [pc, #100]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d6d6:	4798      	blx	r3
    d6d8:	4a19      	ldr	r2, [pc, #100]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d6da:	491a      	ldr	r1, [pc, #104]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d6dc:	4820      	ldr	r0, [pc, #128]	; (d760 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d6de:	4b1a      	ldr	r3, [pc, #104]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d6e0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d6e2:	4920      	ldr	r1, [pc, #128]	; (d764 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d6e4:	4820      	ldr	r0, [pc, #128]	; (d768 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d6e6:	4b15      	ldr	r3, [pc, #84]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d6e8:	4798      	blx	r3
    d6ea:	4a15      	ldr	r2, [pc, #84]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d6ec:	4915      	ldr	r1, [pc, #84]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d6ee:	481e      	ldr	r0, [pc, #120]	; (d768 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d6f0:	4b15      	ldr	r3, [pc, #84]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d6f2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d6f4:	491d      	ldr	r1, [pc, #116]	; (d76c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d6f6:	481e      	ldr	r0, [pc, #120]	; (d770 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d6f8:	4b10      	ldr	r3, [pc, #64]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d6fa:	4798      	blx	r3
    d6fc:	4a10      	ldr	r2, [pc, #64]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d6fe:	4911      	ldr	r1, [pc, #68]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d700:	481b      	ldr	r0, [pc, #108]	; (d770 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d702:	4b11      	ldr	r3, [pc, #68]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d704:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d706:	491b      	ldr	r1, [pc, #108]	; (d774 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d708:	481b      	ldr	r0, [pc, #108]	; (d778 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d70a:	4b0c      	ldr	r3, [pc, #48]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d70c:	4798      	blx	r3
    d70e:	4a0c      	ldr	r2, [pc, #48]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d710:	490c      	ldr	r1, [pc, #48]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d712:	4819      	ldr	r0, [pc, #100]	; (d778 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d714:	4b0c      	ldr	r3, [pc, #48]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d716:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    d718:	4918      	ldr	r1, [pc, #96]	; (d77c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    d71a:	4819      	ldr	r0, [pc, #100]	; (d780 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d71c:	4b07      	ldr	r3, [pc, #28]	; (d73c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d71e:	4798      	blx	r3
    d720:	4a07      	ldr	r2, [pc, #28]	; (d740 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d722:	4908      	ldr	r1, [pc, #32]	; (d744 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d724:	4816      	ldr	r0, [pc, #88]	; (d780 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d726:	4b08      	ldr	r3, [pc, #32]	; (d748 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d728:	4798      	blx	r3
    d72a:	bf00      	nop
    d72c:	3708      	adds	r7, #8
    d72e:	46bd      	mov	sp, r7
    d730:	bd80      	pop	{r7, pc}
    d732:	bf00      	nop
    d734:	2000acf8 	.word	0x2000acf8
    d738:	200010f4 	.word	0x200010f4
    d73c:	0000d2b9 	.word	0x0000d2b9
    d740:	20000000 	.word	0x20000000
    d744:	0000d2f1 	.word	0x0000d2f1
    d748:	0001193d 	.word	0x0001193d
    d74c:	2000ad8c 	.word	0x2000ad8c
    d750:	20001114 	.word	0x20001114
    d754:	2000aeb0 	.word	0x2000aeb0
    d758:	20001134 	.word	0x20001134
    d75c:	2000adac 	.word	0x2000adac
    d760:	20001154 	.word	0x20001154
    d764:	2000ae70 	.word	0x2000ae70
    d768:	20001174 	.word	0x20001174
    d76c:	2000ae90 	.word	0x2000ae90
    d770:	20001194 	.word	0x20001194
    d774:	2000ad68 	.word	0x2000ad68
    d778:	200011b4 	.word	0x200011b4
    d77c:	2000ae08 	.word	0x2000ae08
    d780:	200011d4 	.word	0x200011d4

0000d784 <_GLOBAL__sub_I_ptrTimerClass>:
    d784:	b580      	push	{r7, lr}
    d786:	af00      	add	r7, sp, #0
    d788:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d78c:	2001      	movs	r0, #1
    d78e:	4b01      	ldr	r3, [pc, #4]	; (d794 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    d790:	4798      	blx	r3
    d792:	bd80      	pop	{r7, pc}
    d794:	0000d681 	.word	0x0000d681

0000d798 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d798:	b480      	push	{r7}
    d79a:	b083      	sub	sp, #12
    d79c:	af00      	add	r7, sp, #0
    d79e:	6078      	str	r0, [r7, #4]
    d7a0:	4a05      	ldr	r2, [pc, #20]	; (d7b8 <_ZN5PrintC1Ev+0x20>)
    d7a2:	687b      	ldr	r3, [r7, #4]
    d7a4:	601a      	str	r2, [r3, #0]
    d7a6:	687b      	ldr	r3, [r7, #4]
    d7a8:	2200      	movs	r2, #0
    d7aa:	605a      	str	r2, [r3, #4]
    d7ac:	687b      	ldr	r3, [r7, #4]
    d7ae:	4618      	mov	r0, r3
    d7b0:	370c      	adds	r7, #12
    d7b2:	46bd      	mov	sp, r7
    d7b4:	bc80      	pop	{r7}
    d7b6:	4770      	bx	lr
    d7b8:	000124ac 	.word	0x000124ac

0000d7bc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d7bc:	b480      	push	{r7}
    d7be:	b083      	sub	sp, #12
    d7c0:	af00      	add	r7, sp, #0
    d7c2:	6078      	str	r0, [r7, #4]
    d7c4:	2300      	movs	r3, #0
    d7c6:	4618      	mov	r0, r3
    d7c8:	370c      	adds	r7, #12
    d7ca:	46bd      	mov	sp, r7
    d7cc:	bc80      	pop	{r7}
    d7ce:	4770      	bx	lr

0000d7d0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d7d0:	b480      	push	{r7}
    d7d2:	b083      	sub	sp, #12
    d7d4:	af00      	add	r7, sp, #0
    d7d6:	6078      	str	r0, [r7, #4]
    d7d8:	bf00      	nop
    d7da:	370c      	adds	r7, #12
    d7dc:	46bd      	mov	sp, r7
    d7de:	bc80      	pop	{r7}
    d7e0:	4770      	bx	lr
	...

0000d7e4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b082      	sub	sp, #8
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	6078      	str	r0, [r7, #4]
    d7ec:	687b      	ldr	r3, [r7, #4]
    d7ee:	4618      	mov	r0, r3
    d7f0:	4b06      	ldr	r3, [pc, #24]	; (d80c <_ZN6StreamC1Ev+0x28>)
    d7f2:	4798      	blx	r3
    d7f4:	4a06      	ldr	r2, [pc, #24]	; (d810 <_ZN6StreamC1Ev+0x2c>)
    d7f6:	687b      	ldr	r3, [r7, #4]
    d7f8:	601a      	str	r2, [r3, #0]
    d7fa:	687b      	ldr	r3, [r7, #4]
    d7fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d800:	609a      	str	r2, [r3, #8]
    d802:	687b      	ldr	r3, [r7, #4]
    d804:	4618      	mov	r0, r3
    d806:	3708      	adds	r7, #8
    d808:	46bd      	mov	sp, r7
    d80a:	bd80      	pop	{r7, pc}
    d80c:	0000d799 	.word	0x0000d799
    d810:	00012470 	.word	0x00012470

0000d814 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    d814:	b480      	push	{r7}
    d816:	b083      	sub	sp, #12
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    d81c:	4b06      	ldr	r3, [pc, #24]	; (d838 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d81e:	681b      	ldr	r3, [r3, #0]
    d820:	2201      	movs	r2, #1
    d822:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    d824:	4b04      	ldr	r3, [pc, #16]	; (d838 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d826:	681b      	ldr	r3, [r3, #0]
    d828:	2200      	movs	r2, #0
    d82a:	741a      	strb	r2, [r3, #16]
	
}
    d82c:	bf00      	nop
    d82e:	370c      	adds	r7, #12
    d830:	46bd      	mov	sp, r7
    d832:	bc80      	pop	{r7}
    d834:	4770      	bx	lr
    d836:	bf00      	nop
    d838:	200015fc 	.word	0x200015fc

0000d83c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d83c:	b480      	push	{r7}
    d83e:	b083      	sub	sp, #12
    d840:	af00      	add	r7, sp, #0
    d842:	4603      	mov	r3, r0
    d844:	603a      	str	r2, [r7, #0]
    d846:	71fb      	strb	r3, [r7, #7]
    d848:	460b      	mov	r3, r1
    d84a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d84c:	4b08      	ldr	r3, [pc, #32]	; (d870 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d84e:	681b      	ldr	r3, [r3, #0]
    d850:	2201      	movs	r2, #1
    d852:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    d854:	4b06      	ldr	r3, [pc, #24]	; (d870 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d856:	681b      	ldr	r3, [r3, #0]
    d858:	2201      	movs	r2, #1
    d85a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d85c:	4b04      	ldr	r3, [pc, #16]	; (d870 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d85e:	681b      	ldr	r3, [r3, #0]
    d860:	2201      	movs	r2, #1
    d862:	741a      	strb	r2, [r3, #16]


	return false;
    d864:	2300      	movs	r3, #0
}
    d866:	4618      	mov	r0, r3
    d868:	370c      	adds	r7, #12
    d86a:	46bd      	mov	sp, r7
    d86c:	bc80      	pop	{r7}
    d86e:	4770      	bx	lr
    d870:	200015fc 	.word	0x200015fc

0000d874 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d874:	b480      	push	{r7}
    d876:	b083      	sub	sp, #12
    d878:	af00      	add	r7, sp, #0
    d87a:	4603      	mov	r3, r0
    d87c:	603a      	str	r2, [r7, #0]
    d87e:	71fb      	strb	r3, [r7, #7]
    d880:	460b      	mov	r3, r1
    d882:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d884:	4b08      	ldr	r3, [pc, #32]	; (d8a8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d886:	681b      	ldr	r3, [r3, #0]
    d888:	2201      	movs	r2, #1
    d88a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    d88c:	4b06      	ldr	r3, [pc, #24]	; (d8a8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d88e:	681b      	ldr	r3, [r3, #0]
    d890:	2201      	movs	r2, #1
    d892:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d894:	4b04      	ldr	r3, [pc, #16]	; (d8a8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d896:	681b      	ldr	r3, [r3, #0]
    d898:	2201      	movs	r2, #1
    d89a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d89c:	2300      	movs	r3, #0
}
    d89e:	4618      	mov	r0, r3
    d8a0:	370c      	adds	r7, #12
    d8a2:	46bd      	mov	sp, r7
    d8a4:	bc80      	pop	{r7}
    d8a6:	4770      	bx	lr
    d8a8:	200015fc 	.word	0x200015fc

0000d8ac <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d8ac:	b580      	push	{r7, lr}
    d8ae:	b082      	sub	sp, #8
    d8b0:	af00      	add	r7, sp, #0
    d8b2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d8b4:	793b      	ldrb	r3, [r7, #4]
    d8b6:	f003 0301 	and.w	r3, r3, #1
    d8ba:	b2db      	uxtb	r3, r3
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d013      	beq.n	d8e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d8c0:	490c      	ldr	r1, [pc, #48]	; (d8f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d8c2:	2000      	movs	r0, #0
    d8c4:	4b0c      	ldr	r3, [pc, #48]	; (d8f8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d8c6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d8c8:	490c      	ldr	r1, [pc, #48]	; (d8fc <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d8ca:	2001      	movs	r0, #1
    d8cc:	4b0a      	ldr	r3, [pc, #40]	; (d8f8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d8ce:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d8d0:	4b0b      	ldr	r3, [pc, #44]	; (d900 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d8d2:	681b      	ldr	r3, [r3, #0]
    d8d4:	2201      	movs	r2, #1
    d8d6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d8d8:	4b09      	ldr	r3, [pc, #36]	; (d900 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d8da:	681b      	ldr	r3, [r3, #0]
    d8dc:	2201      	movs	r2, #1
    d8de:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    d8e0:	4b07      	ldr	r3, [pc, #28]	; (d900 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d8e2:	681b      	ldr	r3, [r3, #0]
    d8e4:	2201      	movs	r2, #1
    d8e6:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d8e8:	2300      	movs	r3, #0
}
    d8ea:	4618      	mov	r0, r3
    d8ec:	3708      	adds	r7, #8
    d8ee:	46bd      	mov	sp, r7
    d8f0:	bd80      	pop	{r7, pc}
    d8f2:	bf00      	nop
    d8f4:	0000d83d 	.word	0x0000d83d
    d8f8:	0000c0c5 	.word	0x0000c0c5
    d8fc:	0000d875 	.word	0x0000d875
    d900:	200015fc 	.word	0x200015fc

0000d904 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d904:	b580      	push	{r7, lr}
    d906:	b082      	sub	sp, #8
    d908:	af00      	add	r7, sp, #0
    d90a:	6078      	str	r0, [r7, #4]
    d90c:	687b      	ldr	r3, [r7, #4]
    d90e:	4618      	mov	r0, r3
    d910:	4b0a      	ldr	r3, [pc, #40]	; (d93c <_ZN9CDC_ClassC1Ev+0x38>)
    d912:	4798      	blx	r3
    d914:	687b      	ldr	r3, [r7, #4]
    d916:	3310      	adds	r3, #16
    d918:	4618      	mov	r0, r3
    d91a:	4b09      	ldr	r3, [pc, #36]	; (d940 <_ZN9CDC_ClassC1Ev+0x3c>)
    d91c:	4798      	blx	r3
    d91e:	4a09      	ldr	r2, [pc, #36]	; (d944 <_ZN9CDC_ClassC1Ev+0x40>)
    d920:	687b      	ldr	r3, [r7, #4]
    d922:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d924:	687b      	ldr	r3, [r7, #4]
    d926:	f04f 32ff 	mov.w	r2, #4294967295
    d92a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d92c:	4a06      	ldr	r2, [pc, #24]	; (d948 <_ZN9CDC_ClassC1Ev+0x44>)
    d92e:	687b      	ldr	r3, [r7, #4]
    d930:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d932:	687b      	ldr	r3, [r7, #4]
    d934:	4618      	mov	r0, r3
    d936:	3708      	adds	r7, #8
    d938:	46bd      	mov	sp, r7
    d93a:	bd80      	pop	{r7, pc}
    d93c:	0000d7e5 	.word	0x0000d7e5
    d940:	0000dff1 	.word	0x0000dff1
    d944:	00012440 	.word	0x00012440
    d948:	200015fc 	.word	0x200015fc

0000d94c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d94c:	b580      	push	{r7, lr}
    d94e:	b082      	sub	sp, #8
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
    d954:	4a06      	ldr	r2, [pc, #24]	; (d970 <_ZN9CDC_ClassD1Ev+0x24>)
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	601a      	str	r2, [r3, #0]
    d95a:	687b      	ldr	r3, [r7, #4]
    d95c:	3310      	adds	r3, #16
    d95e:	4618      	mov	r0, r3
    d960:	4b04      	ldr	r3, [pc, #16]	; (d974 <_ZN9CDC_ClassD1Ev+0x28>)
    d962:	4798      	blx	r3
{
} //~CDC_Class
    d964:	687b      	ldr	r3, [r7, #4]
    d966:	4618      	mov	r0, r3
    d968:	3708      	adds	r7, #8
    d96a:	46bd      	mov	sp, r7
    d96c:	bd80      	pop	{r7, pc}
    d96e:	bf00      	nop
    d970:	00012440 	.word	0x00012440
    d974:	0000e011 	.word	0x0000e011

0000d978 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    d978:	b580      	push	{r7, lr}
    d97a:	b082      	sub	sp, #8
    d97c:	af00      	add	r7, sp, #0
    d97e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    d980:	687b      	ldr	r3, [r7, #4]
    d982:	3310      	adds	r3, #16
    d984:	4618      	mov	r0, r3
    d986:	4b09      	ldr	r3, [pc, #36]	; (d9ac <_ZN9CDC_Class4InitEv+0x34>)
    d988:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    d98a:	4909      	ldr	r1, [pc, #36]	; (d9b0 <_ZN9CDC_Class4InitEv+0x38>)
    d98c:	2003      	movs	r0, #3
    d98e:	4b09      	ldr	r3, [pc, #36]	; (d9b4 <_ZN9CDC_Class4InitEv+0x3c>)
    d990:	4798      	blx	r3
	delay_ms(100);
    d992:	2064      	movs	r0, #100	; 0x64
    d994:	4b08      	ldr	r3, [pc, #32]	; (d9b8 <_ZN9CDC_Class4InitEv+0x40>)
    d996:	4798      	blx	r3
		
	if (connected)
    d998:	687b      	ldr	r3, [r7, #4]
    d99a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    d99c:	2064      	movs	r0, #100	; 0x64
    d99e:	4b06      	ldr	r3, [pc, #24]	; (d9b8 <_ZN9CDC_Class4InitEv+0x40>)
    d9a0:	4798      	blx	r3

	

}
    d9a2:	bf00      	nop
    d9a4:	3708      	adds	r7, #8
    d9a6:	46bd      	mov	sp, r7
    d9a8:	bd80      	pop	{r7, pc}
    d9aa:	bf00      	nop
    d9ac:	0000e025 	.word	0x0000e025
    d9b0:	0000d8ad 	.word	0x0000d8ad
    d9b4:	0000c0c5 	.word	0x0000c0c5
    d9b8:	000020e5 	.word	0x000020e5

0000d9bc <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    d9bc:	b580      	push	{r7, lr}
    d9be:	b082      	sub	sp, #8
    d9c0:	af00      	add	r7, sp, #0
    d9c2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    d9c4:	4b03      	ldr	r3, [pc, #12]	; (d9d4 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    d9c6:	4798      	blx	r3
    d9c8:	4603      	mov	r3, r0
	
}
    d9ca:	4618      	mov	r0, r3
    d9cc:	3708      	adds	r7, #8
    d9ce:	46bd      	mov	sp, r7
    d9d0:	bd80      	pop	{r7, pc}
    d9d2:	bf00      	nop
    d9d4:	0000c13d 	.word	0x0000c13d

0000d9d8 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    d9d8:	b580      	push	{r7, lr}
    d9da:	b084      	sub	sp, #16
    d9dc:	af00      	add	r7, sp, #0
    d9de:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    d9e0:	687b      	ldr	r3, [r7, #4]
    d9e2:	699b      	ldr	r3, [r3, #24]
    d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    d9e8:	bf14      	ite	ne
    d9ea:	2301      	movne	r3, #1
    d9ec:	2300      	moveq	r3, #0
    d9ee:	b2db      	uxtb	r3, r3
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d002      	beq.n	d9fa <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    d9f4:	687b      	ldr	r3, [r7, #4]
    d9f6:	699b      	ldr	r3, [r3, #24]
    d9f8:	e011      	b.n	da1e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    d9fa:	687b      	ldr	r3, [r7, #4]
    d9fc:	681b      	ldr	r3, [r3, #0]
    d9fe:	331c      	adds	r3, #28
    da00:	681b      	ldr	r3, [r3, #0]
    da02:	f107 010f 	add.w	r1, r7, #15
    da06:	2201      	movs	r2, #1
    da08:	6878      	ldr	r0, [r7, #4]
    da0a:	4798      	blx	r3
    da0c:	4602      	mov	r2, r0
    da0e:	687b      	ldr	r3, [r7, #4]
    da10:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    da12:	7bfb      	ldrb	r3, [r7, #15]
    da14:	461a      	mov	r2, r3
    da16:	687b      	ldr	r3, [r7, #4]
    da18:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    da1a:	687b      	ldr	r3, [r7, #4]
    da1c:	699b      	ldr	r3, [r3, #24]
}
    da1e:	4618      	mov	r0, r3
    da20:	3710      	adds	r7, #16
    da22:	46bd      	mov	sp, r7
    da24:	bd80      	pop	{r7, pc}
	...

0000da28 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    da28:	b580      	push	{r7, lr}
    da2a:	b086      	sub	sp, #24
    da2c:	af00      	add	r7, sp, #0
    da2e:	60f8      	str	r0, [r7, #12]
    da30:	60b9      	str	r1, [r7, #8]
    da32:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    da34:	68fb      	ldr	r3, [r7, #12]
    da36:	7c1b      	ldrb	r3, [r3, #16]
    da38:	b2db      	uxtb	r3, r3
    da3a:	2b00      	cmp	r3, #0
    da3c:	d02e      	beq.n	da9c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    da3e:	687a      	ldr	r2, [r7, #4]
    da40:	4613      	mov	r3, r2
    da42:	009b      	lsls	r3, r3, #2
    da44:	4413      	add	r3, r2
    da46:	005b      	lsls	r3, r3, #1
    da48:	461a      	mov	r2, r3
    da4a:	4918      	ldr	r1, [pc, #96]	; (daac <_ZN9CDC_Class8readDataEPvl+0x84>)
    da4c:	4818      	ldr	r0, [pc, #96]	; (dab0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    da4e:	4b19      	ldr	r3, [pc, #100]	; (dab4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    da50:	4798      	blx	r3
		rxReady=false;
    da52:	68fb      	ldr	r3, [r7, #12]
    da54:	2200      	movs	r2, #0
    da56:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    da58:	687b      	ldr	r3, [r7, #4]
    da5a:	4619      	mov	r1, r3
    da5c:	68b8      	ldr	r0, [r7, #8]
    da5e:	4b16      	ldr	r3, [pc, #88]	; (dab8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    da60:	4798      	blx	r3
    da62:	4603      	mov	r3, r0
    da64:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    da66:	68fb      	ldr	r3, [r7, #12]
    da68:	7d5b      	ldrb	r3, [r3, #21]
    da6a:	b2db      	uxtb	r3, r3
    da6c:	f083 0301 	eor.w	r3, r3, #1
    da70:	b2db      	uxtb	r3, r3
    da72:	2b00      	cmp	r3, #0
    da74:	d006      	beq.n	da84 <_ZN9CDC_Class8readDataEPvl+0x5c>
    da76:	68fb      	ldr	r3, [r7, #12]
    da78:	7c1b      	ldrb	r3, [r3, #16]
    da7a:	b2db      	uxtb	r3, r3
    da7c:	2b00      	cmp	r3, #0
    da7e:	d001      	beq.n	da84 <_ZN9CDC_Class8readDataEPvl+0x5c>
    da80:	2301      	movs	r3, #1
    da82:	e000      	b.n	da86 <_ZN9CDC_Class8readDataEPvl+0x5e>
    da84:	2300      	movs	r3, #0
    da86:	2b00      	cmp	r3, #0
    da88:	d000      	beq.n	da8c <_ZN9CDC_Class8readDataEPvl+0x64>
    da8a:	e7ec      	b.n	da66 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    da8c:	4808      	ldr	r0, [pc, #32]	; (dab0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    da8e:	4b0b      	ldr	r3, [pc, #44]	; (dabc <_ZN9CDC_Class8readDataEPvl+0x94>)
    da90:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    da92:	4906      	ldr	r1, [pc, #24]	; (daac <_ZN9CDC_Class8readDataEPvl+0x84>)
    da94:	4806      	ldr	r0, [pc, #24]	; (dab0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    da96:	4b0a      	ldr	r3, [pc, #40]	; (dac0 <_ZN9CDC_Class8readDataEPvl+0x98>)
    da98:	4798      	blx	r3
    da9a:	e001      	b.n	daa0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    da9c:	2300      	movs	r3, #0
    da9e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    daa0:	7dfb      	ldrb	r3, [r7, #23]
}
    daa2:	4618      	mov	r0, r3
    daa4:	3718      	adds	r7, #24
    daa6:	46bd      	mov	sp, r7
    daa8:	bd80      	pop	{r7, pc}
    daaa:	bf00      	nop
    daac:	0000d815 	.word	0x0000d815
    dab0:	2000159c 	.word	0x2000159c
    dab4:	0000d4ed 	.word	0x0000d4ed
    dab8:	0000c019 	.word	0x0000c019
    dabc:	0000d419 	.word	0x0000d419
    dac0:	0000d495 	.word	0x0000d495

0000dac4 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    dac4:	b580      	push	{r7, lr}
    dac6:	b084      	sub	sp, #16
    dac8:	af00      	add	r7, sp, #0
    daca:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	2200      	movs	r2, #0
    dad0:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dad2:	f107 030f 	add.w	r3, r7, #15
    dad6:	2101      	movs	r1, #1
    dad8:	4618      	mov	r0, r3
    dada:	4b08      	ldr	r3, [pc, #32]	; (dafc <_ZN9CDC_Class4readEv+0x38>)
    dadc:	4798      	blx	r3
	while(!rxReady);
    dade:	687b      	ldr	r3, [r7, #4]
    dae0:	7d5b      	ldrb	r3, [r3, #21]
    dae2:	b2db      	uxtb	r3, r3
    dae4:	f083 0301 	eor.w	r3, r3, #1
    dae8:	b2db      	uxtb	r3, r3
    daea:	2b00      	cmp	r3, #0
    daec:	d000      	beq.n	daf0 <_ZN9CDC_Class4readEv+0x2c>
    daee:	e7f6      	b.n	dade <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    daf0:	7bfb      	ldrb	r3, [r7, #15]
}
    daf2:	4618      	mov	r0, r3
    daf4:	3710      	adds	r7, #16
    daf6:	46bd      	mov	sp, r7
    daf8:	bd80      	pop	{r7, pc}
    dafa:	bf00      	nop
    dafc:	0000c019 	.word	0x0000c019

0000db00 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    db00:	b580      	push	{r7, lr}
    db02:	b082      	sub	sp, #8
    db04:	af00      	add	r7, sp, #0
    db06:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    db08:	687b      	ldr	r3, [r7, #4]
    db0a:	331c      	adds	r3, #28
    db0c:	2140      	movs	r1, #64	; 0x40
    db0e:	4618      	mov	r0, r3
    db10:	4b02      	ldr	r3, [pc, #8]	; (db1c <_ZN9CDC_Class5flushEv+0x1c>)
    db12:	4798      	blx	r3
}
    db14:	bf00      	nop
    db16:	3708      	adds	r7, #8
    db18:	46bd      	mov	sp, r7
    db1a:	bd80      	pop	{r7, pc}
    db1c:	0000c05d 	.word	0x0000c05d

0000db20 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    db20:	b580      	push	{r7, lr}
    db22:	b082      	sub	sp, #8
    db24:	af00      	add	r7, sp, #0
    db26:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    db28:	4b02      	ldr	r3, [pc, #8]	; (db34 <_ZN9CDC_Class5clearEv+0x14>)
    db2a:	4798      	blx	r3
}
    db2c:	bf00      	nop
    db2e:	3708      	adds	r7, #8
    db30:	46bd      	mov	sp, r7
    db32:	bd80      	pop	{r7, pc}
    db34:	0000c0a1 	.word	0x0000c0a1

0000db38 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    db38:	b580      	push	{r7, lr}
    db3a:	b082      	sub	sp, #8
    db3c:	af00      	add	r7, sp, #0
    db3e:	6078      	str	r0, [r7, #4]
    db40:	460b      	mov	r3, r1
    db42:	70fb      	strb	r3, [r7, #3]
	if (connected){
    db44:	687b      	ldr	r3, [r7, #4]
    db46:	7c1b      	ldrb	r3, [r3, #16]
    db48:	b2db      	uxtb	r3, r3
    db4a:	2b00      	cmp	r3, #0
    db4c:	d012      	beq.n	db74 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	7d1b      	ldrb	r3, [r3, #20]
    db52:	b2db      	uxtb	r3, r3
    db54:	f083 0301 	eor.w	r3, r3, #1
    db58:	b2db      	uxtb	r3, r3
    db5a:	2b00      	cmp	r3, #0
    db5c:	d000      	beq.n	db60 <_ZN9CDC_Class5writeEh+0x28>
    db5e:	e7f6      	b.n	db4e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    db60:	687b      	ldr	r3, [r7, #4]
    db62:	681b      	ldr	r3, [r3, #0]
    db64:	3324      	adds	r3, #36	; 0x24
    db66:	681b      	ldr	r3, [r3, #0]
    db68:	1cf9      	adds	r1, r7, #3
    db6a:	2201      	movs	r2, #1
    db6c:	6878      	ldr	r0, [r7, #4]
    db6e:	4798      	blx	r3
    db70:	4603      	mov	r3, r0
    db72:	e000      	b.n	db76 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    db74:	2300      	movs	r3, #0
	}
		
}
    db76:	4618      	mov	r0, r3
    db78:	3708      	adds	r7, #8
    db7a:	46bd      	mov	sp, r7
    db7c:	bd80      	pop	{r7, pc}
	...

0000db80 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    db80:	b580      	push	{r7, lr}
    db82:	b086      	sub	sp, #24
    db84:	af00      	add	r7, sp, #0
    db86:	60f8      	str	r0, [r7, #12]
    db88:	60b9      	str	r1, [r7, #8]
    db8a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    db8c:	68fb      	ldr	r3, [r7, #12]
    db8e:	7c1b      	ldrb	r3, [r3, #16]
    db90:	b2db      	uxtb	r3, r3
    db92:	2b00      	cmp	r3, #0
    db94:	d02f      	beq.n	dbf6 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    db96:	687a      	ldr	r2, [r7, #4]
    db98:	4613      	mov	r3, r2
    db9a:	009b      	lsls	r3, r3, #2
    db9c:	4413      	add	r3, r2
    db9e:	005b      	lsls	r3, r3, #1
    dba0:	461a      	mov	r2, r3
    dba2:	4917      	ldr	r1, [pc, #92]	; (dc00 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dba4:	4817      	ldr	r0, [pc, #92]	; (dc04 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dba6:	4b18      	ldr	r3, [pc, #96]	; (dc08 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    dba8:	4798      	blx	r3
		txReady=false;
    dbaa:	68fb      	ldr	r3, [r7, #12]
    dbac:	2200      	movs	r2, #0
    dbae:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	4619      	mov	r1, r3
    dbb4:	68b8      	ldr	r0, [r7, #8]
    dbb6:	4b15      	ldr	r3, [pc, #84]	; (dc0c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    dbb8:	4798      	blx	r3
    dbba:	4603      	mov	r3, r0
    dbbc:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    dbbe:	68fb      	ldr	r3, [r7, #12]
    dbc0:	7d1b      	ldrb	r3, [r3, #20]
    dbc2:	b2db      	uxtb	r3, r3
    dbc4:	f083 0301 	eor.w	r3, r3, #1
    dbc8:	b2db      	uxtb	r3, r3
    dbca:	2b00      	cmp	r3, #0
    dbcc:	d006      	beq.n	dbdc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dbce:	68fb      	ldr	r3, [r7, #12]
    dbd0:	7c1b      	ldrb	r3, [r3, #16]
    dbd2:	b2db      	uxtb	r3, r3
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	d001      	beq.n	dbdc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dbd8:	2301      	movs	r3, #1
    dbda:	e000      	b.n	dbde <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    dbdc:	2300      	movs	r3, #0
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d000      	beq.n	dbe4 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    dbe2:	e7ec      	b.n	dbbe <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    dbe4:	4807      	ldr	r0, [pc, #28]	; (dc04 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dbe6:	4b0a      	ldr	r3, [pc, #40]	; (dc10 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    dbe8:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dbea:	4905      	ldr	r1, [pc, #20]	; (dc00 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dbec:	4805      	ldr	r0, [pc, #20]	; (dc04 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dbee:	4b09      	ldr	r3, [pc, #36]	; (dc14 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    dbf0:	4798      	blx	r3
		return r;
    dbf2:	697b      	ldr	r3, [r7, #20]
    dbf4:	e000      	b.n	dbf8 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    dbf6:	2300      	movs	r3, #0
	}
	

}
    dbf8:	4618      	mov	r0, r3
    dbfa:	3718      	adds	r7, #24
    dbfc:	46bd      	mov	sp, r7
    dbfe:	bd80      	pop	{r7, pc}
    dc00:	0000d815 	.word	0x0000d815
    dc04:	2000159c 	.word	0x2000159c
    dc08:	0000d4ed 	.word	0x0000d4ed
    dc0c:	0000c05d 	.word	0x0000c05d
    dc10:	0000d419 	.word	0x0000d419
    dc14:	0000d495 	.word	0x0000d495

0000dc18 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    dc18:	b580      	push	{r7, lr}
    dc1a:	b086      	sub	sp, #24
    dc1c:	af00      	add	r7, sp, #0
    dc1e:	60f8      	str	r0, [r7, #12]
    dc20:	60b9      	str	r1, [r7, #8]
    dc22:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dc24:	68fb      	ldr	r3, [r7, #12]
    dc26:	2200      	movs	r2, #0
    dc28:	751a      	strb	r2, [r3, #20]

 	if (connected){
    dc2a:	68fb      	ldr	r3, [r7, #12]
    dc2c:	7c1b      	ldrb	r3, [r3, #16]
    dc2e:	b2db      	uxtb	r3, r3
    dc30:	2b00      	cmp	r3, #0
    dc32:	d02a      	beq.n	dc8a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dc34:	687a      	ldr	r2, [r7, #4]
    dc36:	4613      	mov	r3, r2
    dc38:	009b      	lsls	r3, r3, #2
    dc3a:	4413      	add	r3, r2
    dc3c:	005b      	lsls	r3, r3, #1
    dc3e:	461a      	mov	r2, r3
    dc40:	4915      	ldr	r1, [pc, #84]	; (dc98 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dc42:	4816      	ldr	r0, [pc, #88]	; (dc9c <_ZN9CDC_Class5writeEPKhj+0x84>)
    dc44:	4b16      	ldr	r3, [pc, #88]	; (dca0 <_ZN9CDC_Class5writeEPKhj+0x88>)
    dc46:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dc48:	6879      	ldr	r1, [r7, #4]
    dc4a:	68b8      	ldr	r0, [r7, #8]
    dc4c:	4b15      	ldr	r3, [pc, #84]	; (dca4 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    dc4e:	4798      	blx	r3
    dc50:	4603      	mov	r3, r0
    dc52:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    dc54:	68fb      	ldr	r3, [r7, #12]
    dc56:	7d1b      	ldrb	r3, [r3, #20]
    dc58:	b2db      	uxtb	r3, r3
    dc5a:	f083 0301 	eor.w	r3, r3, #1
    dc5e:	b2db      	uxtb	r3, r3
    dc60:	2b00      	cmp	r3, #0
    dc62:	d006      	beq.n	dc72 <_ZN9CDC_Class5writeEPKhj+0x5a>
    dc64:	68fb      	ldr	r3, [r7, #12]
    dc66:	7c1b      	ldrb	r3, [r3, #16]
    dc68:	b2db      	uxtb	r3, r3
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	d001      	beq.n	dc72 <_ZN9CDC_Class5writeEPKhj+0x5a>
    dc6e:	2301      	movs	r3, #1
    dc70:	e000      	b.n	dc74 <_ZN9CDC_Class5writeEPKhj+0x5c>
    dc72:	2300      	movs	r3, #0
    dc74:	2b00      	cmp	r3, #0
    dc76:	d000      	beq.n	dc7a <_ZN9CDC_Class5writeEPKhj+0x62>
    dc78:	e7ec      	b.n	dc54 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    dc7a:	4808      	ldr	r0, [pc, #32]	; (dc9c <_ZN9CDC_Class5writeEPKhj+0x84>)
    dc7c:	4b0a      	ldr	r3, [pc, #40]	; (dca8 <_ZN9CDC_Class5writeEPKhj+0x90>)
    dc7e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dc80:	4905      	ldr	r1, [pc, #20]	; (dc98 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dc82:	4806      	ldr	r0, [pc, #24]	; (dc9c <_ZN9CDC_Class5writeEPKhj+0x84>)
    dc84:	4b09      	ldr	r3, [pc, #36]	; (dcac <_ZN9CDC_Class5writeEPKhj+0x94>)
    dc86:	4798      	blx	r3
    dc88:	e001      	b.n	dc8e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    dc8a:	2300      	movs	r3, #0
    dc8c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    dc8e:	697b      	ldr	r3, [r7, #20]
}
    dc90:	4618      	mov	r0, r3
    dc92:	3718      	adds	r7, #24
    dc94:	46bd      	mov	sp, r7
    dc96:	bd80      	pop	{r7, pc}
    dc98:	0000d815 	.word	0x0000d815
    dc9c:	2000159c 	.word	0x2000159c
    dca0:	0000d4ed 	.word	0x0000d4ed
    dca4:	0000c05d 	.word	0x0000c05d
    dca8:	0000d419 	.word	0x0000d419
    dcac:	0000d495 	.word	0x0000d495

0000dcb0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    dcb0:	b480      	push	{r7}
    dcb2:	b083      	sub	sp, #12
    dcb4:	af00      	add	r7, sp, #0
    dcb6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    dcb8:	687b      	ldr	r3, [r7, #4]
    dcba:	7d5b      	ldrb	r3, [r3, #21]
    dcbc:	b2db      	uxtb	r3, r3
    dcbe:	2b00      	cmp	r3, #0
    dcc0:	d006      	beq.n	dcd0 <_ZN9CDC_Class9availableEv+0x20>
    dcc2:	687b      	ldr	r3, [r7, #4]
    dcc4:	7d1b      	ldrb	r3, [r3, #20]
    dcc6:	b2db      	uxtb	r3, r3
    dcc8:	2b00      	cmp	r3, #0
    dcca:	d001      	beq.n	dcd0 <_ZN9CDC_Class9availableEv+0x20>
    dccc:	2301      	movs	r3, #1
    dcce:	e000      	b.n	dcd2 <_ZN9CDC_Class9availableEv+0x22>
    dcd0:	2300      	movs	r3, #0
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d001      	beq.n	dcda <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    dcd6:	2301      	movs	r3, #1
    dcd8:	e000      	b.n	dcdc <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    dcda:	2300      	movs	r3, #0
	}
	
}
    dcdc:	4618      	mov	r0, r3
    dcde:	370c      	adds	r7, #12
    dce0:	46bd      	mov	sp, r7
    dce2:	bc80      	pop	{r7}
    dce4:	4770      	bx	lr
	...

0000dce8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    dce8:	b580      	push	{r7, lr}
    dcea:	b082      	sub	sp, #8
    dcec:	af00      	add	r7, sp, #0
    dcee:	6078      	str	r0, [r7, #4]
    dcf0:	6039      	str	r1, [r7, #0]
    dcf2:	687b      	ldr	r3, [r7, #4]
    dcf4:	2b01      	cmp	r3, #1
    dcf6:	d154      	bne.n	dda2 <_Z41__static_initialization_and_destruction_0ii+0xba>
    dcf8:	683b      	ldr	r3, [r7, #0]
    dcfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dcfe:	4293      	cmp	r3, r2
    dd00:	d14f      	bne.n	dda2 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dd02:	492a      	ldr	r1, [pc, #168]	; (ddac <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd04:	482a      	ldr	r0, [pc, #168]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd06:	4b2b      	ldr	r3, [pc, #172]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd08:	4798      	blx	r3
    dd0a:	4a2b      	ldr	r2, [pc, #172]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd0c:	492b      	ldr	r1, [pc, #172]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd0e:	4828      	ldr	r0, [pc, #160]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd10:	4b2b      	ldr	r3, [pc, #172]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd12:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    dd14:	492b      	ldr	r1, [pc, #172]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    dd16:	482c      	ldr	r0, [pc, #176]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd18:	4b26      	ldr	r3, [pc, #152]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd1a:	4798      	blx	r3
    dd1c:	4a26      	ldr	r2, [pc, #152]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd1e:	4927      	ldr	r1, [pc, #156]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd20:	4829      	ldr	r0, [pc, #164]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd22:	4b27      	ldr	r3, [pc, #156]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd24:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    dd26:	4929      	ldr	r1, [pc, #164]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    dd28:	4829      	ldr	r0, [pc, #164]	; (ddd0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd2a:	4b22      	ldr	r3, [pc, #136]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd2c:	4798      	blx	r3
    dd2e:	4a22      	ldr	r2, [pc, #136]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd30:	4922      	ldr	r1, [pc, #136]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd32:	4827      	ldr	r0, [pc, #156]	; (ddd0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd34:	4b22      	ldr	r3, [pc, #136]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd36:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    dd38:	4926      	ldr	r1, [pc, #152]	; (ddd4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    dd3a:	4827      	ldr	r0, [pc, #156]	; (ddd8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dd3c:	4b1d      	ldr	r3, [pc, #116]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd3e:	4798      	blx	r3
    dd40:	4a1d      	ldr	r2, [pc, #116]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd42:	491e      	ldr	r1, [pc, #120]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd44:	4824      	ldr	r0, [pc, #144]	; (ddd8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dd46:	4b1e      	ldr	r3, [pc, #120]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd48:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    dd4a:	4924      	ldr	r1, [pc, #144]	; (dddc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    dd4c:	4824      	ldr	r0, [pc, #144]	; (dde0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dd4e:	4b19      	ldr	r3, [pc, #100]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd50:	4798      	blx	r3
    dd52:	4a19      	ldr	r2, [pc, #100]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd54:	4919      	ldr	r1, [pc, #100]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd56:	4822      	ldr	r0, [pc, #136]	; (dde0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dd58:	4b19      	ldr	r3, [pc, #100]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd5a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    dd5c:	4921      	ldr	r1, [pc, #132]	; (dde4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    dd5e:	4822      	ldr	r0, [pc, #136]	; (dde8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dd60:	4b14      	ldr	r3, [pc, #80]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd62:	4798      	blx	r3
    dd64:	4a14      	ldr	r2, [pc, #80]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd66:	4915      	ldr	r1, [pc, #84]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd68:	481f      	ldr	r0, [pc, #124]	; (dde8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dd6a:	4b15      	ldr	r3, [pc, #84]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd6c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    dd6e:	491f      	ldr	r1, [pc, #124]	; (ddec <_Z41__static_initialization_and_destruction_0ii+0x104>)
    dd70:	481f      	ldr	r0, [pc, #124]	; (ddf0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    dd72:	4b10      	ldr	r3, [pc, #64]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd74:	4798      	blx	r3
    dd76:	4a10      	ldr	r2, [pc, #64]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd78:	4910      	ldr	r1, [pc, #64]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd7a:	481d      	ldr	r0, [pc, #116]	; (ddf0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    dd7c:	4b10      	ldr	r3, [pc, #64]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd7e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    dd80:	491c      	ldr	r1, [pc, #112]	; (ddf4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    dd82:	481d      	ldr	r0, [pc, #116]	; (ddf8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    dd84:	4b0b      	ldr	r3, [pc, #44]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd86:	4798      	blx	r3
    dd88:	4a0b      	ldr	r2, [pc, #44]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd8a:	490c      	ldr	r1, [pc, #48]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd8c:	481a      	ldr	r0, [pc, #104]	; (ddf8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    dd8e:	4b0c      	ldr	r3, [pc, #48]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd90:	4798      	blx	r3
    dd92:	481a      	ldr	r0, [pc, #104]	; (ddfc <_Z41__static_initialization_and_destruction_0ii+0x114>)
    dd94:	4b1a      	ldr	r3, [pc, #104]	; (de00 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    dd96:	4798      	blx	r3
    dd98:	4a07      	ldr	r2, [pc, #28]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd9a:	491a      	ldr	r1, [pc, #104]	; (de04 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    dd9c:	4817      	ldr	r0, [pc, #92]	; (ddfc <_Z41__static_initialization_and_destruction_0ii+0x114>)
    dd9e:	4b08      	ldr	r3, [pc, #32]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dda0:	4798      	blx	r3
    dda2:	bf00      	nop
    dda4:	3708      	adds	r7, #8
    dda6:	46bd      	mov	sp, r7
    dda8:	bd80      	pop	{r7, pc}
    ddaa:	bf00      	nop
    ddac:	2000acf8 	.word	0x2000acf8
    ddb0:	200014fc 	.word	0x200014fc
    ddb4:	0000d2b9 	.word	0x0000d2b9
    ddb8:	20000000 	.word	0x20000000
    ddbc:	0000d2f1 	.word	0x0000d2f1
    ddc0:	0001193d 	.word	0x0001193d
    ddc4:	2000ad8c 	.word	0x2000ad8c
    ddc8:	2000151c 	.word	0x2000151c
    ddcc:	2000aeb0 	.word	0x2000aeb0
    ddd0:	2000153c 	.word	0x2000153c
    ddd4:	2000adac 	.word	0x2000adac
    ddd8:	2000155c 	.word	0x2000155c
    dddc:	2000ae70 	.word	0x2000ae70
    dde0:	2000157c 	.word	0x2000157c
    dde4:	2000ae90 	.word	0x2000ae90
    dde8:	2000159c 	.word	0x2000159c
    ddec:	2000ad68 	.word	0x2000ad68
    ddf0:	200015bc 	.word	0x200015bc
    ddf4:	2000ae08 	.word	0x2000ae08
    ddf8:	200015dc 	.word	0x200015dc
    ddfc:	20001600 	.word	0x20001600
    de00:	0000d905 	.word	0x0000d905
    de04:	0000d94d 	.word	0x0000d94d

0000de08 <_GLOBAL__sub_I_ptrCDCClass>:
    de08:	b580      	push	{r7, lr}
    de0a:	af00      	add	r7, sp, #0
    de0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de10:	2001      	movs	r0, #1
    de12:	4b01      	ldr	r3, [pc, #4]	; (de18 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    de14:	4798      	blx	r3
    de16:	bd80      	pop	{r7, pc}
    de18:	0000dce9 	.word	0x0000dce9

0000de1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    de1c:	b580      	push	{r7, lr}
    de1e:	b086      	sub	sp, #24
    de20:	af00      	add	r7, sp, #0
    de22:	60f8      	str	r0, [r7, #12]
    de24:	60b9      	str	r1, [r7, #8]
    de26:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    de28:	2300      	movs	r3, #0
    de2a:	617b      	str	r3, [r7, #20]
  while (size--) {
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	1e5a      	subs	r2, r3, #1
    de30:	607a      	str	r2, [r7, #4]
    de32:	2b00      	cmp	r3, #0
    de34:	bf14      	ite	ne
    de36:	2301      	movne	r3, #1
    de38:	2300      	moveq	r3, #0
    de3a:	b2db      	uxtb	r3, r3
    de3c:	2b00      	cmp	r3, #0
    de3e:	d016      	beq.n	de6e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    de40:	68fb      	ldr	r3, [r7, #12]
    de42:	681b      	ldr	r3, [r3, #0]
    de44:	681a      	ldr	r2, [r3, #0]
    de46:	68bb      	ldr	r3, [r7, #8]
    de48:	1c59      	adds	r1, r3, #1
    de4a:	60b9      	str	r1, [r7, #8]
    de4c:	781b      	ldrb	r3, [r3, #0]
    de4e:	4619      	mov	r1, r3
    de50:	68f8      	ldr	r0, [r7, #12]
    de52:	4790      	blx	r2
    de54:	4603      	mov	r3, r0
    de56:	2b00      	cmp	r3, #0
    de58:	bf14      	ite	ne
    de5a:	2301      	movne	r3, #1
    de5c:	2300      	moveq	r3, #0
    de5e:	b2db      	uxtb	r3, r3
    de60:	2b00      	cmp	r3, #0
    de62:	d003      	beq.n	de6c <_ZN5Print5writeEPKhj+0x50>
    de64:	697b      	ldr	r3, [r7, #20]
    de66:	3301      	adds	r3, #1
    de68:	617b      	str	r3, [r7, #20]
  while (size--) {
    de6a:	e7df      	b.n	de2c <_ZN5Print5writeEPKhj+0x10>
    else break;
    de6c:	bf00      	nop
  }
  return n;
    de6e:	697b      	ldr	r3, [r7, #20]
}
    de70:	4618      	mov	r0, r3
    de72:	3718      	adds	r7, #24
    de74:	46bd      	mov	sp, r7
    de76:	bd80      	pop	{r7, pc}

0000de78 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    de78:	b480      	push	{r7}
    de7a:	b083      	sub	sp, #12
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]
    de80:	460b      	mov	r3, r1
    de82:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    de84:	78fb      	ldrb	r3, [r7, #3]
    de86:	687a      	ldr	r2, [r7, #4]
    de88:	01db      	lsls	r3, r3, #7
    de8a:	4413      	add	r3, r2
    de8c:	681b      	ldr	r3, [r3, #0]
}
    de8e:	4618      	mov	r0, r3
    de90:	370c      	adds	r7, #12
    de92:	46bd      	mov	sp, r7
    de94:	bc80      	pop	{r7}
    de96:	4770      	bx	lr

0000de98 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    de98:	b480      	push	{r7}
    de9a:	b083      	sub	sp, #12
    de9c:	af00      	add	r7, sp, #0
    de9e:	6078      	str	r0, [r7, #4]
    dea0:	460b      	mov	r3, r1
    dea2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    dea4:	78fb      	ldrb	r3, [r7, #3]
    dea6:	687a      	ldr	r2, [r7, #4]
    dea8:	01db      	lsls	r3, r3, #7
    deaa:	4413      	add	r3, r2
    deac:	3310      	adds	r3, #16
    deae:	681b      	ldr	r3, [r3, #0]
}
    deb0:	4618      	mov	r0, r3
    deb2:	370c      	adds	r7, #12
    deb4:	46bd      	mov	sp, r7
    deb6:	bc80      	pop	{r7}
    deb8:	4770      	bx	lr

0000deba <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    deba:	b480      	push	{r7}
    debc:	b083      	sub	sp, #12
    debe:	af00      	add	r7, sp, #0
    dec0:	6078      	str	r0, [r7, #4]
    dec2:	460b      	mov	r3, r1
    dec4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    dec6:	78fb      	ldrb	r3, [r7, #3]
    dec8:	687a      	ldr	r2, [r7, #4]
    deca:	01db      	lsls	r3, r3, #7
    decc:	4413      	add	r3, r2
    dece:	3320      	adds	r3, #32
    ded0:	681b      	ldr	r3, [r3, #0]
}
    ded2:	4618      	mov	r0, r3
    ded4:	370c      	adds	r7, #12
    ded6:	46bd      	mov	sp, r7
    ded8:	bc80      	pop	{r7}
    deda:	4770      	bx	lr

0000dedc <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    dedc:	b580      	push	{r7, lr}
    dede:	b086      	sub	sp, #24
    dee0:	af00      	add	r7, sp, #0
    dee2:	4603      	mov	r3, r0
    dee4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    dee6:	f107 030c 	add.w	r3, r7, #12
    deea:	4618      	mov	r0, r3
    deec:	4b13      	ldr	r3, [pc, #76]	; (df3c <_gpio_get_level+0x60>)
    deee:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    def0:	79fb      	ldrb	r3, [r7, #7]
    def2:	4619      	mov	r1, r3
    def4:	4812      	ldr	r0, [pc, #72]	; (df40 <_gpio_get_level+0x64>)
    def6:	4b13      	ldr	r3, [pc, #76]	; (df44 <_gpio_get_level+0x68>)
    def8:	4798      	blx	r3
    defa:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    defc:	79fb      	ldrb	r3, [r7, #7]
    defe:	4619      	mov	r1, r3
    df00:	480f      	ldr	r0, [pc, #60]	; (df40 <_gpio_get_level+0x64>)
    df02:	4b11      	ldr	r3, [pc, #68]	; (df48 <_gpio_get_level+0x6c>)
    df04:	4798      	blx	r3
    df06:	4602      	mov	r2, r0
    df08:	697b      	ldr	r3, [r7, #20]
    df0a:	43db      	mvns	r3, r3
    df0c:	4013      	ands	r3, r2
    df0e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    df10:	79fb      	ldrb	r3, [r7, #7]
    df12:	4619      	mov	r1, r3
    df14:	480a      	ldr	r0, [pc, #40]	; (df40 <_gpio_get_level+0x64>)
    df16:	4b0d      	ldr	r3, [pc, #52]	; (df4c <_gpio_get_level+0x70>)
    df18:	4798      	blx	r3
    df1a:	4602      	mov	r2, r0
    df1c:	697b      	ldr	r3, [r7, #20]
    df1e:	4013      	ands	r3, r2
    df20:	693a      	ldr	r2, [r7, #16]
    df22:	4313      	orrs	r3, r2
    df24:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    df26:	f107 030c 	add.w	r3, r7, #12
    df2a:	4618      	mov	r0, r3
    df2c:	4b08      	ldr	r3, [pc, #32]	; (df50 <_gpio_get_level+0x74>)
    df2e:	4798      	blx	r3

	return tmp;
    df30:	693b      	ldr	r3, [r7, #16]
}
    df32:	4618      	mov	r0, r3
    df34:	3718      	adds	r7, #24
    df36:	46bd      	mov	sp, r7
    df38:	bd80      	pop	{r7, pc}
    df3a:	bf00      	nop
    df3c:	0000b239 	.word	0x0000b239
    df40:	41008000 	.word	0x41008000
    df44:	0000de79 	.word	0x0000de79
    df48:	0000debb 	.word	0x0000debb
    df4c:	0000de99 	.word	0x0000de99
    df50:	0000b25f 	.word	0x0000b25f

0000df54 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    df54:	b580      	push	{r7, lr}
    df56:	b082      	sub	sp, #8
    df58:	af00      	add	r7, sp, #0
    df5a:	4603      	mov	r3, r0
    df5c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    df5e:	79fb      	ldrb	r3, [r7, #7]
    df60:	115b      	asrs	r3, r3, #5
    df62:	b2db      	uxtb	r3, r3
    df64:	4618      	mov	r0, r3
    df66:	4b09      	ldr	r3, [pc, #36]	; (df8c <gpio_get_pin_level+0x38>)
    df68:	4798      	blx	r3
    df6a:	4601      	mov	r1, r0
    df6c:	79fb      	ldrb	r3, [r7, #7]
    df6e:	f003 031f 	and.w	r3, r3, #31
    df72:	2201      	movs	r2, #1
    df74:	fa02 f303 	lsl.w	r3, r2, r3
    df78:	400b      	ands	r3, r1
    df7a:	2b00      	cmp	r3, #0
    df7c:	bf14      	ite	ne
    df7e:	2301      	movne	r3, #1
    df80:	2300      	moveq	r3, #0
    df82:	b2db      	uxtb	r3, r3
}
    df84:	4618      	mov	r0, r3
    df86:	3708      	adds	r7, #8
    df88:	46bd      	mov	sp, r7
    df8a:	bd80      	pop	{r7, pc}
    df8c:	0000dedd 	.word	0x0000dedd

0000df90 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    df90:	b480      	push	{r7}
    df92:	b083      	sub	sp, #12
    df94:	af00      	add	r7, sp, #0
    df96:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    df98:	4b06      	ldr	r3, [pc, #24]	; (dfb4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    df9a:	681b      	ldr	r3, [r3, #0]
    df9c:	2201      	movs	r2, #1
    df9e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    dfa0:	4b04      	ldr	r3, [pc, #16]	; (dfb4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    dfa2:	681b      	ldr	r3, [r3, #0]
    dfa4:	2200      	movs	r2, #0
    dfa6:	705a      	strb	r2, [r3, #1]
}
    dfa8:	bf00      	nop
    dfaa:	370c      	adds	r7, #12
    dfac:	46bd      	mov	sp, r7
    dfae:	bc80      	pop	{r7}
    dfb0:	4770      	bx	lr
    dfb2:	bf00      	nop
    dfb4:	20001760 	.word	0x20001760

0000dfb8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    dfb8:	b580      	push	{r7, lr}
    dfba:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    dfbc:	2040      	movs	r0, #64	; 0x40
    dfbe:	4b0a      	ldr	r3, [pc, #40]	; (dfe8 <_ZL10USBPluggedv+0x30>)
    dfc0:	4798      	blx	r3
    dfc2:	4603      	mov	r3, r0
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d004      	beq.n	dfd2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    dfc8:	4b08      	ldr	r3, [pc, #32]	; (dfec <_ZL10USBPluggedv+0x34>)
    dfca:	681b      	ldr	r3, [r3, #0]
    dfcc:	2201      	movs	r2, #1
    dfce:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    dfd0:	e007      	b.n	dfe2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    dfd2:	4b06      	ldr	r3, [pc, #24]	; (dfec <_ZL10USBPluggedv+0x34>)
    dfd4:	681b      	ldr	r3, [r3, #0]
    dfd6:	2200      	movs	r2, #0
    dfd8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    dfda:	4b04      	ldr	r3, [pc, #16]	; (dfec <_ZL10USBPluggedv+0x34>)
    dfdc:	681b      	ldr	r3, [r3, #0]
    dfde:	2200      	movs	r2, #0
    dfe0:	701a      	strb	r2, [r3, #0]
}
    dfe2:	bf00      	nop
    dfe4:	bd80      	pop	{r7, pc}
    dfe6:	bf00      	nop
    dfe8:	0000df55 	.word	0x0000df55
    dfec:	20001760 	.word	0x20001760

0000dff0 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    dff0:	b480      	push	{r7}
    dff2:	b083      	sub	sp, #12
    dff4:	af00      	add	r7, sp, #0
    dff6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    dff8:	4a04      	ldr	r2, [pc, #16]	; (e00c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    dffa:	687b      	ldr	r3, [r7, #4]
    dffc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    dffe:	687b      	ldr	r3, [r7, #4]
    e000:	4618      	mov	r0, r3
    e002:	370c      	adds	r7, #12
    e004:	46bd      	mov	sp, r7
    e006:	bc80      	pop	{r7}
    e008:	4770      	bx	lr
    e00a:	bf00      	nop
    e00c:	20001760 	.word	0x20001760

0000e010 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e010:	b480      	push	{r7}
    e012:	b083      	sub	sp, #12
    e014:	af00      	add	r7, sp, #0
    e016:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e018:	687b      	ldr	r3, [r7, #4]
    e01a:	4618      	mov	r0, r3
    e01c:	370c      	adds	r7, #12
    e01e:	46bd      	mov	sp, r7
    e020:	bc80      	pop	{r7}
    e022:	4770      	bx	lr

0000e024 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e024:	b580      	push	{r7, lr}
    e026:	b082      	sub	sp, #8
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e02c:	491e      	ldr	r1, [pc, #120]	; (e0a8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e02e:	2040      	movs	r0, #64	; 0x40
    e030:	4b1e      	ldr	r3, [pc, #120]	; (e0ac <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e032:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e034:	481e      	ldr	r0, [pc, #120]	; (e0b0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e036:	4b1f      	ldr	r3, [pc, #124]	; (e0b4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e038:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e03a:	2040      	movs	r0, #64	; 0x40
    e03c:	4b1e      	ldr	r3, [pc, #120]	; (e0b8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e03e:	4798      	blx	r3
    e040:	4603      	mov	r3, r0
    e042:	461a      	mov	r2, r3
    e044:	687b      	ldr	r3, [r7, #4]
    e046:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e048:	687b      	ldr	r3, [r7, #4]
    e04a:	78db      	ldrb	r3, [r3, #3]
    e04c:	2b00      	cmp	r3, #0
    e04e:	d021      	beq.n	e094 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	2200      	movs	r2, #0
    e054:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e056:	687b      	ldr	r3, [r7, #4]
    e058:	2201      	movs	r2, #1
    e05a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e05c:	f44f 7216 	mov.w	r2, #600	; 0x258
    e060:	4916      	ldr	r1, [pc, #88]	; (e0bc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e062:	4813      	ldr	r0, [pc, #76]	; (e0b0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e064:	4b16      	ldr	r3, [pc, #88]	; (e0c0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e066:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e068:	4816      	ldr	r0, [pc, #88]	; (e0c4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e06a:	4b17      	ldr	r3, [pc, #92]	; (e0c8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e06c:	4798      	blx	r3
    e06e:	4603      	mov	r3, r0
    e070:	f083 0301 	eor.w	r3, r3, #1
    e074:	b2db      	uxtb	r3, r3
    e076:	2b00      	cmp	r3, #0
    e078:	d008      	beq.n	e08c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    e07a:	687b      	ldr	r3, [r7, #4]
    e07c:	789b      	ldrb	r3, [r3, #2]
    e07e:	b2db      	uxtb	r3, r3
    e080:	2b00      	cmp	r3, #0
    e082:	d0f1      	beq.n	e068 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	2200      	movs	r2, #0
    e088:	701a      	strb	r2, [r3, #0]
					return;
    e08a:	e009      	b.n	e0a0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e08c:	4808      	ldr	r0, [pc, #32]	; (e0b0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e08e:	4b0f      	ldr	r3, [pc, #60]	; (e0cc <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e090:	4798      	blx	r3
    e092:	e005      	b.n	e0a0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	2200      	movs	r2, #0
    e098:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e09a:	687b      	ldr	r3, [r7, #4]
    e09c:	2200      	movs	r2, #0
    e09e:	705a      	strb	r2, [r3, #1]
		}
		
}
    e0a0:	3708      	adds	r7, #8
    e0a2:	46bd      	mov	sp, r7
    e0a4:	bd80      	pop	{r7, pc}
    e0a6:	bf00      	nop
    e0a8:	0000dfb9 	.word	0x0000dfb9
    e0ac:	00002179 	.word	0x00002179
    e0b0:	20001700 	.word	0x20001700
    e0b4:	0000d3a5 	.word	0x0000d3a5
    e0b8:	0000df55 	.word	0x0000df55
    e0bc:	0000df91 	.word	0x0000df91
    e0c0:	0000d4ed 	.word	0x0000d4ed
    e0c4:	20001600 	.word	0x20001600
    e0c8:	0000d9bd 	.word	0x0000d9bd
    e0cc:	0000d419 	.word	0x0000d419

0000e0d0 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    e0d0:	b580      	push	{r7, lr}
    e0d2:	b082      	sub	sp, #8
    e0d4:	af00      	add	r7, sp, #0
    e0d6:	6078      	str	r0, [r7, #4]
    e0d8:	6039      	str	r1, [r7, #0]
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	2b01      	cmp	r3, #1
    e0de:	d14c      	bne.n	e17a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e0e0:	683b      	ldr	r3, [r7, #0]
    e0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e0e6:	4293      	cmp	r3, r2
    e0e8:	d147      	bne.n	e17a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e0ea:	4926      	ldr	r1, [pc, #152]	; (e184 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e0ec:	4826      	ldr	r0, [pc, #152]	; (e188 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e0ee:	4b27      	ldr	r3, [pc, #156]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0f0:	4798      	blx	r3
    e0f2:	4a27      	ldr	r2, [pc, #156]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e0f4:	4927      	ldr	r1, [pc, #156]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e0f6:	4824      	ldr	r0, [pc, #144]	; (e188 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e0f8:	4b27      	ldr	r3, [pc, #156]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e0fa:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e0fc:	4927      	ldr	r1, [pc, #156]	; (e19c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e0fe:	4828      	ldr	r0, [pc, #160]	; (e1a0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e100:	4b22      	ldr	r3, [pc, #136]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e102:	4798      	blx	r3
    e104:	4a22      	ldr	r2, [pc, #136]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e106:	4923      	ldr	r1, [pc, #140]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e108:	4825      	ldr	r0, [pc, #148]	; (e1a0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e10a:	4b23      	ldr	r3, [pc, #140]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e10c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e10e:	4925      	ldr	r1, [pc, #148]	; (e1a4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e110:	4825      	ldr	r0, [pc, #148]	; (e1a8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e112:	4b1e      	ldr	r3, [pc, #120]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e114:	4798      	blx	r3
    e116:	4a1e      	ldr	r2, [pc, #120]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e118:	491e      	ldr	r1, [pc, #120]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e11a:	4823      	ldr	r0, [pc, #140]	; (e1a8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e11c:	4b1e      	ldr	r3, [pc, #120]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e11e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e120:	4922      	ldr	r1, [pc, #136]	; (e1ac <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e122:	4823      	ldr	r0, [pc, #140]	; (e1b0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e124:	4b19      	ldr	r3, [pc, #100]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e126:	4798      	blx	r3
    e128:	4a19      	ldr	r2, [pc, #100]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e12a:	491a      	ldr	r1, [pc, #104]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e12c:	4820      	ldr	r0, [pc, #128]	; (e1b0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e12e:	4b1a      	ldr	r3, [pc, #104]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e130:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e132:	4920      	ldr	r1, [pc, #128]	; (e1b4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e134:	4820      	ldr	r0, [pc, #128]	; (e1b8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e136:	4b15      	ldr	r3, [pc, #84]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e138:	4798      	blx	r3
    e13a:	4a15      	ldr	r2, [pc, #84]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e13c:	4915      	ldr	r1, [pc, #84]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e13e:	481e      	ldr	r0, [pc, #120]	; (e1b8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e140:	4b15      	ldr	r3, [pc, #84]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e142:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e144:	491d      	ldr	r1, [pc, #116]	; (e1bc <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e146:	481e      	ldr	r0, [pc, #120]	; (e1c0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e148:	4b10      	ldr	r3, [pc, #64]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e14a:	4798      	blx	r3
    e14c:	4a10      	ldr	r2, [pc, #64]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e14e:	4911      	ldr	r1, [pc, #68]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e150:	481b      	ldr	r0, [pc, #108]	; (e1c0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e152:	4b11      	ldr	r3, [pc, #68]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e154:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e156:	491b      	ldr	r1, [pc, #108]	; (e1c4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e158:	481b      	ldr	r0, [pc, #108]	; (e1c8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e15a:	4b0c      	ldr	r3, [pc, #48]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e15c:	4798      	blx	r3
    e15e:	4a0c      	ldr	r2, [pc, #48]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e160:	490c      	ldr	r1, [pc, #48]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e162:	4819      	ldr	r0, [pc, #100]	; (e1c8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e164:	4b0c      	ldr	r3, [pc, #48]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e166:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e168:	4918      	ldr	r1, [pc, #96]	; (e1cc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e16a:	4819      	ldr	r0, [pc, #100]	; (e1d0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e16c:	4b07      	ldr	r3, [pc, #28]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e16e:	4798      	blx	r3
    e170:	4a07      	ldr	r2, [pc, #28]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e172:	4908      	ldr	r1, [pc, #32]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e174:	4816      	ldr	r0, [pc, #88]	; (e1d0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e176:	4b08      	ldr	r3, [pc, #32]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e178:	4798      	blx	r3
    e17a:	bf00      	nop
    e17c:	3708      	adds	r7, #8
    e17e:	46bd      	mov	sp, r7
    e180:	bd80      	pop	{r7, pc}
    e182:	bf00      	nop
    e184:	2000acf8 	.word	0x2000acf8
    e188:	20001660 	.word	0x20001660
    e18c:	0000d2b9 	.word	0x0000d2b9
    e190:	20000000 	.word	0x20000000
    e194:	0000d2f1 	.word	0x0000d2f1
    e198:	0001193d 	.word	0x0001193d
    e19c:	2000ad8c 	.word	0x2000ad8c
    e1a0:	20001680 	.word	0x20001680
    e1a4:	2000aeb0 	.word	0x2000aeb0
    e1a8:	200016a0 	.word	0x200016a0
    e1ac:	2000adac 	.word	0x2000adac
    e1b0:	200016c0 	.word	0x200016c0
    e1b4:	2000ae70 	.word	0x2000ae70
    e1b8:	200016e0 	.word	0x200016e0
    e1bc:	2000ae90 	.word	0x2000ae90
    e1c0:	20001700 	.word	0x20001700
    e1c4:	2000ad68 	.word	0x2000ad68
    e1c8:	20001720 	.word	0x20001720
    e1cc:	2000ae08 	.word	0x2000ae08
    e1d0:	20001740 	.word	0x20001740

0000e1d4 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    e1d4:	b580      	push	{r7, lr}
    e1d6:	af00      	add	r7, sp, #0
    e1d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e1dc:	2001      	movs	r0, #1
    e1de:	4b01      	ldr	r3, [pc, #4]	; (e1e4 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    e1e0:	4798      	blx	r3
    e1e2:	bd80      	pop	{r7, pc}
    e1e4:	0000e0d1 	.word	0x0000e0d1

0000e1e8 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e1e8:	b480      	push	{r7}
    e1ea:	b083      	sub	sp, #12
    e1ec:	af00      	add	r7, sp, #0
    e1ee:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e1f0:	2300      	movs	r3, #0
	}
    e1f2:	4618      	mov	r0, r3
    e1f4:	370c      	adds	r7, #12
    e1f6:	46bd      	mov	sp, r7
    e1f8:	bc80      	pop	{r7}
    e1fa:	4770      	bx	lr

0000e1fc <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e1fc:	b480      	push	{r7}
    e1fe:	af00      	add	r7, sp, #0
		}
    e200:	bf00      	nop
    e202:	46bd      	mov	sp, r7
    e204:	bc80      	pop	{r7}
    e206:	4770      	bx	lr

0000e208 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    e208:	4770      	bx	lr

0000e20a <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    e20a:	4770      	bx	lr

0000e20c <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
    e20c:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
    e20e:	2302      	movs	r3, #2
    e210:	4801      	ldr	r0, [pc, #4]	; (e218 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
    e212:	4c02      	ldr	r4, [pc, #8]	; (e21c <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
    e214:	47a0      	blx	r4
	return	r;
}
    e216:	bd10      	pop	{r4, pc}
    e218:	200090d0 	.word	0x200090d0
    e21c:	00010e39 	.word	0x00010e39

0000e220 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
    e220:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
    e222:	4b03      	ldr	r3, [pc, #12]	; (e230 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
    e224:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
    e226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    e22a:	4b02      	ldr	r3, [pc, #8]	; (e234 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
    e22c:	4798      	blx	r3
}
    e22e:	bd08      	pop	{r3, pc}
    e230:	20001764 	.word	0x20001764
    e234:	0000e20d 	.word	0x0000e20d

0000e238 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    e238:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    e23a:	2302      	movs	r3, #2
    e23c:	4801      	ldr	r0, [pc, #4]	; (e244 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    e23e:	4c02      	ldr	r4, [pc, #8]	; (e248 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    e240:	47a0      	blx	r4
	return	w;
}
    e242:	bd10      	pop	{r4, pc}
    e244:	200090d0 	.word	0x200090d0
    e248:	00010e05 	.word	0x00010e05

0000e24c <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    e24c:	b500      	push	{lr}
    e24e:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    e250:	4b07      	ldr	r3, [pc, #28]	; (e270 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    e252:	881b      	ldrh	r3, [r3, #0]
    e254:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    e258:	4b06      	ldr	r3, [pc, #24]	; (e274 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    e25a:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    e25c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    e260:	3202      	adds	r2, #2
    e262:	a901      	add	r1, sp, #4
    e264:	4b04      	ldr	r3, [pc, #16]	; (e278 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    e266:	4798      	blx	r3
	return	w;
}
    e268:	b003      	add	sp, #12
    e26a:	f85d fb04 	ldr.w	pc, [sp], #4
    e26e:	bf00      	nop
    e270:	00012548 	.word	0x00012548
    e274:	20001764 	.word	0x20001764
    e278:	0000e239 	.word	0x0000e239

0000e27c <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    e27c:	b510      	push	{r4, lr}
    e27e:	4604      	mov	r4, r0
    e280:	30c0      	adds	r0, #192	; 0xc0
    e282:	4b03      	ldr	r3, [pc, #12]	; (e290 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    e284:	4798      	blx	r3
    e286:	4620      	mov	r0, r4
    e288:	4b02      	ldr	r3, [pc, #8]	; (e294 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    e28a:	4798      	blx	r3
{
} //~MemoryManagment_Class
    e28c:	4620      	mov	r0, r4
    e28e:	bd10      	pop	{r4, pc}
    e290:	0000e4bf 	.word	0x0000e4bf
    e294:	0000e20b 	.word	0x0000e20b

0000e298 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    e298:	b538      	push	{r3, r4, r5, lr}
    e29a:	4604      	mov	r4, r0
    e29c:	4b14      	ldr	r3, [pc, #80]	; (e2f0 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    e29e:	4798      	blx	r3
    e2a0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e2a4:	4b13      	ldr	r3, [pc, #76]	; (e2f4 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    e2a6:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    e2a8:	f44f 7500 	mov.w	r5, #512	; 0x200
    e2ac:	462a      	mov	r2, r5
    e2ae:	2100      	movs	r1, #0
    e2b0:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    e2b4:	4b10      	ldr	r3, [pc, #64]	; (e2f8 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    e2b6:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    e2b8:	2300      	movs	r3, #0
    e2ba:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
    e2be:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
    e2c2:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
    e2c6:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
    e2ca:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
    e2ce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
    e2d2:	490a      	ldr	r1, [pc, #40]	; (e2fc <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    e2d4:	f246 3214 	movw	r2, #25364	; 0x6314
    e2d8:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    e2da:	4a09      	ldr	r2, [pc, #36]	; (e300 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    e2dc:	6812      	ldr	r2, [r2, #0]
    e2de:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
    e2e2:	f246 3118 	movw	r1, #25368	; 0x6318
    e2e6:	5062      	str	r2, [r4, r1]
	initiated=false;
    e2e8:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
    e2ec:	4620      	mov	r0, r4
    e2ee:	bd38      	pop	{r3, r4, r5, pc}
    e2f0:	0000e209 	.word	0x0000e209
    e2f4:	0000e4bd 	.word	0x0000e4bd
    e2f8:	00011d51 	.word	0x00011d51
    e2fc:	20001768 	.word	0x20001768
    e300:	20001764 	.word	0x20001764

0000e304 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    e304:	b510      	push	{r4, lr}
    e306:	4604      	mov	r4, r0
		if (qspiFlash.Init())
    e308:	480a      	ldr	r0, [pc, #40]	; (e334 <_ZN17MemoryFlash_Class4InitEm+0x30>)
    e30a:	4b0b      	ldr	r3, [pc, #44]	; (e338 <_ZN17MemoryFlash_Class4InitEm+0x34>)
    e30c:	4798      	blx	r3
    e30e:	b948      	cbnz	r0, e324 <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
    e310:	490a      	ldr	r1, [pc, #40]	; (e33c <_ZN17MemoryFlash_Class4InitEm+0x38>)
    e312:	480b      	ldr	r0, [pc, #44]	; (e340 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    e314:	4b0b      	ldr	r3, [pc, #44]	; (e344 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    e316:	4798      	blx	r3
			initiated=false;
    e318:	2300      	movs	r3, #0
    e31a:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
    e31e:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    e322:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
    e324:	4908      	ldr	r1, [pc, #32]	; (e348 <_ZN17MemoryFlash_Class4InitEm+0x44>)
    e326:	4806      	ldr	r0, [pc, #24]	; (e340 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    e328:	4b06      	ldr	r3, [pc, #24]	; (e344 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    e32a:	4798      	blx	r3
			initiated=true;
    e32c:	2301      	movs	r3, #1
    e32e:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
    e332:	e7f4      	b.n	e31e <_ZN17MemoryFlash_Class4InitEm+0x1a>
    e334:	200090d0 	.word	0x200090d0
    e338:	00010d69 	.word	0x00010d69
    e33c:	000124dc 	.word	0x000124dc
    e340:	20009518 	.word	0x20009518
    e344:	00011309 	.word	0x00011309
    e348:	000124bc 	.word	0x000124bc

0000e34c <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
		  return	w;
	  }

	  return	r;
  }
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e350:	4604      	mov	r4, r0
    e352:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    e354:	f246 3318 	movw	r3, #25368	; 0x6318
    e358:	58c3      	ldr	r3, [r0, r3]
    e35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e35e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    e362:	d906      	bls.n	e372 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    e364:	4b14      	ldr	r3, [pc, #80]	; (e3b8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    e366:	681b      	ldr	r3, [r3, #0]
    e368:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
    e36c:	f246 3218 	movw	r2, #25368	; 0x6318
    e370:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    e372:	f246 3618 	movw	r6, #25368	; 0x6318
    e376:	59a1      	ldr	r1, [r4, r6]
    e378:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    e37c:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
    e37e:	4d0f      	ldr	r5, [pc, #60]	; (e3bc <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
    e380:	4628      	mov	r0, r5
    e382:	4b0f      	ldr	r3, [pc, #60]	; (e3c0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
    e384:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
    e386:	4628      	mov	r0, r5
    e388:	4f0e      	ldr	r7, [pc, #56]	; (e3c4 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
    e38a:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    e38c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e390:	59a2      	ldr	r2, [r4, r6]
    e392:	4641      	mov	r1, r8
    e394:	4628      	mov	r0, r5
    e396:	4e0c      	ldr	r6, [pc, #48]	; (e3c8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
    e398:	47b0      	blx	r6
    e39a:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
    e39c:	4628      	mov	r0, r5
    e39e:	47b8      	blx	r7
		   if (w==0)
    e3a0:	b12e      	cbz	r6, e3ae <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
    e3a2:	4b05      	ldr	r3, [pc, #20]	; (e3b8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    e3a4:	6818      	ldr	r0, [r3, #0]
    e3a6:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
    e3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
    e3ae:	f246 3318 	movw	r3, #25368	; 0x6318
    e3b2:	58e0      	ldr	r0, [r4, r3]
    e3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3b8:	20001764 	.word	0x20001764
    e3bc:	200090d0 	.word	0x200090d0
    e3c0:	00010dd5 	.word	0x00010dd5
    e3c4:	00010ee9 	.word	0x00010ee9
    e3c8:	00010e05 	.word	0x00010e05

0000e3cc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    e3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e3d0:	4c2b      	ldr	r4, [pc, #172]	; (e480 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    e3d2:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    e3d6:	492b      	ldr	r1, [pc, #172]	; (e484 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    e3d8:	4628      	mov	r0, r5
    e3da:	4f2b      	ldr	r7, [pc, #172]	; (e488 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    e3dc:	47b8      	blx	r7
    e3de:	4e2b      	ldr	r6, [pc, #172]	; (e48c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    e3e0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; e4b8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    e3e4:	4632      	mov	r2, r6
    e3e6:	4641      	mov	r1, r8
    e3e8:	4628      	mov	r0, r5
    e3ea:	4d29      	ldr	r5, [pc, #164]	; (e490 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    e3ec:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    e3ee:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    e3f2:	4928      	ldr	r1, [pc, #160]	; (e494 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    e3f4:	4648      	mov	r0, r9
    e3f6:	47b8      	blx	r7
    e3f8:	4632      	mov	r2, r6
    e3fa:	4641      	mov	r1, r8
    e3fc:	4648      	mov	r0, r9
    e3fe:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    e400:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    e404:	4924      	ldr	r1, [pc, #144]	; (e498 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    e406:	4648      	mov	r0, r9
    e408:	47b8      	blx	r7
    e40a:	4632      	mov	r2, r6
    e40c:	4641      	mov	r1, r8
    e40e:	4648      	mov	r0, r9
    e410:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e412:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    e416:	4921      	ldr	r1, [pc, #132]	; (e49c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    e418:	4648      	mov	r0, r9
    e41a:	47b8      	blx	r7
    e41c:	4632      	mov	r2, r6
    e41e:	4641      	mov	r1, r8
    e420:	4648      	mov	r0, r9
    e422:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    e424:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    e428:	491d      	ldr	r1, [pc, #116]	; (e4a0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    e42a:	4648      	mov	r0, r9
    e42c:	47b8      	blx	r7
    e42e:	4632      	mov	r2, r6
    e430:	4641      	mov	r1, r8
    e432:	4648      	mov	r0, r9
    e434:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e436:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    e43a:	491a      	ldr	r1, [pc, #104]	; (e4a4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    e43c:	4648      	mov	r0, r9
    e43e:	47b8      	blx	r7
    e440:	4632      	mov	r2, r6
    e442:	4641      	mov	r1, r8
    e444:	4648      	mov	r0, r9
    e446:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e448:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    e44c:	4916      	ldr	r1, [pc, #88]	; (e4a8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    e44e:	4648      	mov	r0, r9
    e450:	47b8      	blx	r7
    e452:	4632      	mov	r2, r6
    e454:	4641      	mov	r1, r8
    e456:	4648      	mov	r0, r9
    e458:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    e45a:	f1a4 0918 	sub.w	r9, r4, #24
    e45e:	4913      	ldr	r1, [pc, #76]	; (e4ac <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    e460:	4648      	mov	r0, r9
    e462:	47b8      	blx	r7
    e464:	4632      	mov	r2, r6
    e466:	4641      	mov	r1, r8
    e468:	4648      	mov	r0, r9
    e46a:	47a8      	blx	r5
    e46c:	3408      	adds	r4, #8
    e46e:	4620      	mov	r0, r4
    e470:	4b0f      	ldr	r3, [pc, #60]	; (e4b0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    e472:	4798      	blx	r3
    e474:	4632      	mov	r2, r6
    e476:	490f      	ldr	r1, [pc, #60]	; (e4b4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    e478:	4620      	mov	r0, r4
    e47a:	47a8      	blx	r5
    e47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e480:	20002860 	.word	0x20002860
    e484:	2000acf8 	.word	0x2000acf8
    e488:	0000d2b9 	.word	0x0000d2b9
    e48c:	20000000 	.word	0x20000000
    e490:	0001193d 	.word	0x0001193d
    e494:	2000ad8c 	.word	0x2000ad8c
    e498:	2000aeb0 	.word	0x2000aeb0
    e49c:	2000adac 	.word	0x2000adac
    e4a0:	2000ae70 	.word	0x2000ae70
    e4a4:	2000ae90 	.word	0x2000ae90
    e4a8:	2000ad68 	.word	0x2000ad68
    e4ac:	2000ae08 	.word	0x2000ae08
    e4b0:	0000e299 	.word	0x0000e299
    e4b4:	0000e27d 	.word	0x0000e27d
    e4b8:	0000d2f1 	.word	0x0000d2f1

0000e4bc <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    e4bc:	4770      	bx	lr

0000e4be <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    e4be:	4770      	bx	lr

0000e4c0 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e4c0:	b480      	push	{r7}
    e4c2:	b083      	sub	sp, #12
    e4c4:	af00      	add	r7, sp, #0
    e4c6:	6078      	str	r0, [r7, #4]
    e4c8:	460b      	mov	r3, r1
    e4ca:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e4cc:	78fb      	ldrb	r3, [r7, #3]
    e4ce:	687a      	ldr	r2, [r7, #4]
    e4d0:	01db      	lsls	r3, r3, #7
    e4d2:	4413      	add	r3, r2
    e4d4:	681b      	ldr	r3, [r3, #0]
}
    e4d6:	4618      	mov	r0, r3
    e4d8:	370c      	adds	r7, #12
    e4da:	46bd      	mov	sp, r7
    e4dc:	bc80      	pop	{r7}
    e4de:	4770      	bx	lr

0000e4e0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e4e0:	b480      	push	{r7}
    e4e2:	b085      	sub	sp, #20
    e4e4:	af00      	add	r7, sp, #0
    e4e6:	60f8      	str	r0, [r7, #12]
    e4e8:	460b      	mov	r3, r1
    e4ea:	607a      	str	r2, [r7, #4]
    e4ec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e4ee:	7afb      	ldrb	r3, [r7, #11]
    e4f0:	68fa      	ldr	r2, [r7, #12]
    e4f2:	01db      	lsls	r3, r3, #7
    e4f4:	4413      	add	r3, r2
    e4f6:	3318      	adds	r3, #24
    e4f8:	687a      	ldr	r2, [r7, #4]
    e4fa:	601a      	str	r2, [r3, #0]
}
    e4fc:	bf00      	nop
    e4fe:	3714      	adds	r7, #20
    e500:	46bd      	mov	sp, r7
    e502:	bc80      	pop	{r7}
    e504:	4770      	bx	lr

0000e506 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e506:	b480      	push	{r7}
    e508:	b083      	sub	sp, #12
    e50a:	af00      	add	r7, sp, #0
    e50c:	6078      	str	r0, [r7, #4]
    e50e:	460b      	mov	r3, r1
    e510:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e512:	78fb      	ldrb	r3, [r7, #3]
    e514:	687a      	ldr	r2, [r7, #4]
    e516:	01db      	lsls	r3, r3, #7
    e518:	4413      	add	r3, r2
    e51a:	3310      	adds	r3, #16
    e51c:	681b      	ldr	r3, [r3, #0]
}
    e51e:	4618      	mov	r0, r3
    e520:	370c      	adds	r7, #12
    e522:	46bd      	mov	sp, r7
    e524:	bc80      	pop	{r7}
    e526:	4770      	bx	lr

0000e528 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e528:	b480      	push	{r7}
    e52a:	b085      	sub	sp, #20
    e52c:	af00      	add	r7, sp, #0
    e52e:	60f8      	str	r0, [r7, #12]
    e530:	460b      	mov	r3, r1
    e532:	607a      	str	r2, [r7, #4]
    e534:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e536:	7afb      	ldrb	r3, [r7, #11]
    e538:	68fa      	ldr	r2, [r7, #12]
    e53a:	01db      	lsls	r3, r3, #7
    e53c:	4413      	add	r3, r2
    e53e:	3314      	adds	r3, #20
    e540:	687a      	ldr	r2, [r7, #4]
    e542:	601a      	str	r2, [r3, #0]
}
    e544:	bf00      	nop
    e546:	3714      	adds	r7, #20
    e548:	46bd      	mov	sp, r7
    e54a:	bc80      	pop	{r7}
    e54c:	4770      	bx	lr

0000e54e <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e54e:	b480      	push	{r7}
    e550:	b085      	sub	sp, #20
    e552:	af00      	add	r7, sp, #0
    e554:	60f8      	str	r0, [r7, #12]
    e556:	460b      	mov	r3, r1
    e558:	607a      	str	r2, [r7, #4]
    e55a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    e55c:	7afb      	ldrb	r3, [r7, #11]
    e55e:	68fa      	ldr	r2, [r7, #12]
    e560:	01db      	lsls	r3, r3, #7
    e562:	4413      	add	r3, r2
    e564:	331c      	adds	r3, #28
    e566:	687a      	ldr	r2, [r7, #4]
    e568:	601a      	str	r2, [r3, #0]
}
    e56a:	bf00      	nop
    e56c:	3714      	adds	r7, #20
    e56e:	46bd      	mov	sp, r7
    e570:	bc80      	pop	{r7}
    e572:	4770      	bx	lr

0000e574 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e574:	b480      	push	{r7}
    e576:	b083      	sub	sp, #12
    e578:	af00      	add	r7, sp, #0
    e57a:	6078      	str	r0, [r7, #4]
    e57c:	460b      	mov	r3, r1
    e57e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e580:	78fb      	ldrb	r3, [r7, #3]
    e582:	687a      	ldr	r2, [r7, #4]
    e584:	01db      	lsls	r3, r3, #7
    e586:	4413      	add	r3, r2
    e588:	3320      	adds	r3, #32
    e58a:	681b      	ldr	r3, [r3, #0]
}
    e58c:	4618      	mov	r0, r3
    e58e:	370c      	adds	r7, #12
    e590:	46bd      	mov	sp, r7
    e592:	bc80      	pop	{r7}
    e594:	4770      	bx	lr
	...

0000e598 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    e598:	b580      	push	{r7, lr}
    e59a:	b082      	sub	sp, #8
    e59c:	af00      	add	r7, sp, #0
    e59e:	4603      	mov	r3, r0
    e5a0:	6039      	str	r1, [r7, #0]
    e5a2:	71fb      	strb	r3, [r7, #7]
    e5a4:	4613      	mov	r3, r2
    e5a6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e5a8:	79bb      	ldrb	r3, [r7, #6]
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	d006      	beq.n	e5bc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e5ae:	79fb      	ldrb	r3, [r7, #7]
    e5b0:	683a      	ldr	r2, [r7, #0]
    e5b2:	4619      	mov	r1, r3
    e5b4:	4806      	ldr	r0, [pc, #24]	; (e5d0 <_gpio_set_level+0x38>)
    e5b6:	4b07      	ldr	r3, [pc, #28]	; (e5d4 <_gpio_set_level+0x3c>)
    e5b8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e5ba:	e005      	b.n	e5c8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e5bc:	79fb      	ldrb	r3, [r7, #7]
    e5be:	683a      	ldr	r2, [r7, #0]
    e5c0:	4619      	mov	r1, r3
    e5c2:	4803      	ldr	r0, [pc, #12]	; (e5d0 <_gpio_set_level+0x38>)
    e5c4:	4b04      	ldr	r3, [pc, #16]	; (e5d8 <_gpio_set_level+0x40>)
    e5c6:	4798      	blx	r3
}
    e5c8:	bf00      	nop
    e5ca:	3708      	adds	r7, #8
    e5cc:	46bd      	mov	sp, r7
    e5ce:	bd80      	pop	{r7, pc}
    e5d0:	41008000 	.word	0x41008000
    e5d4:	0000e4e1 	.word	0x0000e4e1
    e5d8:	0000e529 	.word	0x0000e529

0000e5dc <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    e5dc:	b580      	push	{r7, lr}
    e5de:	b082      	sub	sp, #8
    e5e0:	af00      	add	r7, sp, #0
    e5e2:	4603      	mov	r3, r0
    e5e4:	6039      	str	r1, [r7, #0]
    e5e6:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    e5e8:	79fb      	ldrb	r3, [r7, #7]
    e5ea:	683a      	ldr	r2, [r7, #0]
    e5ec:	4619      	mov	r1, r3
    e5ee:	4803      	ldr	r0, [pc, #12]	; (e5fc <_gpio_toggle_level+0x20>)
    e5f0:	4b03      	ldr	r3, [pc, #12]	; (e600 <_gpio_toggle_level+0x24>)
    e5f2:	4798      	blx	r3
}
    e5f4:	bf00      	nop
    e5f6:	3708      	adds	r7, #8
    e5f8:	46bd      	mov	sp, r7
    e5fa:	bd80      	pop	{r7, pc}
    e5fc:	41008000 	.word	0x41008000
    e600:	0000e54f 	.word	0x0000e54f

0000e604 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e604:	b580      	push	{r7, lr}
    e606:	b086      	sub	sp, #24
    e608:	af00      	add	r7, sp, #0
    e60a:	4603      	mov	r3, r0
    e60c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e60e:	f107 030c 	add.w	r3, r7, #12
    e612:	4618      	mov	r0, r3
    e614:	4b13      	ldr	r3, [pc, #76]	; (e664 <_gpio_get_level+0x60>)
    e616:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e618:	79fb      	ldrb	r3, [r7, #7]
    e61a:	4619      	mov	r1, r3
    e61c:	4812      	ldr	r0, [pc, #72]	; (e668 <_gpio_get_level+0x64>)
    e61e:	4b13      	ldr	r3, [pc, #76]	; (e66c <_gpio_get_level+0x68>)
    e620:	4798      	blx	r3
    e622:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e624:	79fb      	ldrb	r3, [r7, #7]
    e626:	4619      	mov	r1, r3
    e628:	480f      	ldr	r0, [pc, #60]	; (e668 <_gpio_get_level+0x64>)
    e62a:	4b11      	ldr	r3, [pc, #68]	; (e670 <_gpio_get_level+0x6c>)
    e62c:	4798      	blx	r3
    e62e:	4602      	mov	r2, r0
    e630:	697b      	ldr	r3, [r7, #20]
    e632:	43db      	mvns	r3, r3
    e634:	4013      	ands	r3, r2
    e636:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e638:	79fb      	ldrb	r3, [r7, #7]
    e63a:	4619      	mov	r1, r3
    e63c:	480a      	ldr	r0, [pc, #40]	; (e668 <_gpio_get_level+0x64>)
    e63e:	4b0d      	ldr	r3, [pc, #52]	; (e674 <_gpio_get_level+0x70>)
    e640:	4798      	blx	r3
    e642:	4602      	mov	r2, r0
    e644:	697b      	ldr	r3, [r7, #20]
    e646:	4013      	ands	r3, r2
    e648:	693a      	ldr	r2, [r7, #16]
    e64a:	4313      	orrs	r3, r2
    e64c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e64e:	f107 030c 	add.w	r3, r7, #12
    e652:	4618      	mov	r0, r3
    e654:	4b08      	ldr	r3, [pc, #32]	; (e678 <_gpio_get_level+0x74>)
    e656:	4798      	blx	r3

	return tmp;
    e658:	693b      	ldr	r3, [r7, #16]
}
    e65a:	4618      	mov	r0, r3
    e65c:	3718      	adds	r7, #24
    e65e:	46bd      	mov	sp, r7
    e660:	bd80      	pop	{r7, pc}
    e662:	bf00      	nop
    e664:	0000b239 	.word	0x0000b239
    e668:	41008000 	.word	0x41008000
    e66c:	0000e4c1 	.word	0x0000e4c1
    e670:	0000e575 	.word	0x0000e575
    e674:	0000e507 	.word	0x0000e507
    e678:	0000b25f 	.word	0x0000b25f

0000e67c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e67c:	b580      	push	{r7, lr}
    e67e:	b082      	sub	sp, #8
    e680:	af00      	add	r7, sp, #0
    e682:	4603      	mov	r3, r0
    e684:	460a      	mov	r2, r1
    e686:	71fb      	strb	r3, [r7, #7]
    e688:	4613      	mov	r3, r2
    e68a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e68c:	79fb      	ldrb	r3, [r7, #7]
    e68e:	115b      	asrs	r3, r3, #5
    e690:	b2d8      	uxtb	r0, r3
    e692:	79fb      	ldrb	r3, [r7, #7]
    e694:	f003 031f 	and.w	r3, r3, #31
    e698:	2201      	movs	r2, #1
    e69a:	fa02 f303 	lsl.w	r3, r2, r3
    e69e:	79ba      	ldrb	r2, [r7, #6]
    e6a0:	4619      	mov	r1, r3
    e6a2:	4b03      	ldr	r3, [pc, #12]	; (e6b0 <gpio_set_pin_level+0x34>)
    e6a4:	4798      	blx	r3
}
    e6a6:	bf00      	nop
    e6a8:	3708      	adds	r7, #8
    e6aa:	46bd      	mov	sp, r7
    e6ac:	bd80      	pop	{r7, pc}
    e6ae:	bf00      	nop
    e6b0:	0000e599 	.word	0x0000e599

0000e6b4 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    e6b4:	b580      	push	{r7, lr}
    e6b6:	b082      	sub	sp, #8
    e6b8:	af00      	add	r7, sp, #0
    e6ba:	4603      	mov	r3, r0
    e6bc:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    e6be:	79fb      	ldrb	r3, [r7, #7]
    e6c0:	115b      	asrs	r3, r3, #5
    e6c2:	b2d8      	uxtb	r0, r3
    e6c4:	79fb      	ldrb	r3, [r7, #7]
    e6c6:	f003 031f 	and.w	r3, r3, #31
    e6ca:	2201      	movs	r2, #1
    e6cc:	fa02 f303 	lsl.w	r3, r2, r3
    e6d0:	4619      	mov	r1, r3
    e6d2:	4b03      	ldr	r3, [pc, #12]	; (e6e0 <gpio_toggle_pin_level+0x2c>)
    e6d4:	4798      	blx	r3
}
    e6d6:	bf00      	nop
    e6d8:	3708      	adds	r7, #8
    e6da:	46bd      	mov	sp, r7
    e6dc:	bd80      	pop	{r7, pc}
    e6de:	bf00      	nop
    e6e0:	0000e5dd 	.word	0x0000e5dd

0000e6e4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e6e4:	b580      	push	{r7, lr}
    e6e6:	b082      	sub	sp, #8
    e6e8:	af00      	add	r7, sp, #0
    e6ea:	4603      	mov	r3, r0
    e6ec:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e6ee:	79fb      	ldrb	r3, [r7, #7]
    e6f0:	115b      	asrs	r3, r3, #5
    e6f2:	b2db      	uxtb	r3, r3
    e6f4:	4618      	mov	r0, r3
    e6f6:	4b09      	ldr	r3, [pc, #36]	; (e71c <gpio_get_pin_level+0x38>)
    e6f8:	4798      	blx	r3
    e6fa:	4601      	mov	r1, r0
    e6fc:	79fb      	ldrb	r3, [r7, #7]
    e6fe:	f003 031f 	and.w	r3, r3, #31
    e702:	2201      	movs	r2, #1
    e704:	fa02 f303 	lsl.w	r3, r2, r3
    e708:	400b      	ands	r3, r1
    e70a:	2b00      	cmp	r3, #0
    e70c:	bf14      	ite	ne
    e70e:	2301      	movne	r3, #1
    e710:	2300      	moveq	r3, #0
    e712:	b2db      	uxtb	r3, r3
}
    e714:	4618      	mov	r0, r3
    e716:	3708      	adds	r7, #8
    e718:	46bd      	mov	sp, r7
    e71a:	bd80      	pop	{r7, pc}
    e71c:	0000e605 	.word	0x0000e605

0000e720 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
    e720:	b480      	push	{r7}
    e722:	b083      	sub	sp, #12
    e724:	af00      	add	r7, sp, #0
    e726:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
    e728:	4b07      	ldr	r3, [pc, #28]	; (e748 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    e72a:	681b      	ldr	r3, [r3, #0]
    e72c:	2201      	movs	r2, #1
    e72e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
    e732:	4b05      	ldr	r3, [pc, #20]	; (e748 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    e734:	681b      	ldr	r3, [r3, #0]
    e736:	2201      	movs	r2, #1
    e738:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
    e73c:	bf00      	nop
    e73e:	370c      	adds	r7, #12
    e740:	46bd      	mov	sp, r7
    e742:	bc80      	pop	{r7}
    e744:	4770      	bx	lr
    e746:	bf00      	nop
    e748:	20008cbc 	.word	0x20008cbc

0000e74c <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
    e74c:	b480      	push	{r7}
    e74e:	b083      	sub	sp, #12
    e750:	af00      	add	r7, sp, #0
    e752:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
    e754:	4b07      	ldr	r3, [pc, #28]	; (e774 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    e756:	685b      	ldr	r3, [r3, #4]
    e758:	2201      	movs	r2, #1
    e75a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
    e75e:	4b05      	ldr	r3, [pc, #20]	; (e774 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    e760:	685b      	ldr	r3, [r3, #4]
    e762:	2201      	movs	r2, #1
    e764:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
    e768:	bf00      	nop
    e76a:	370c      	adds	r7, #12
    e76c:	46bd      	mov	sp, r7
    e76e:	bc80      	pop	{r7}
    e770:	4770      	bx	lr
    e772:	bf00      	nop
    e774:	20008cbc 	.word	0x20008cbc

0000e778 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
    e778:	b480      	push	{r7}
    e77a:	b083      	sub	sp, #12
    e77c:	af00      	add	r7, sp, #0
    e77e:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
    e780:	4b04      	ldr	r3, [pc, #16]	; (e794 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
    e782:	681b      	ldr	r3, [r3, #0]
    e784:	2201      	movs	r2, #1
    e786:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
    e78a:	bf00      	nop
    e78c:	370c      	adds	r7, #12
    e78e:	46bd      	mov	sp, r7
    e790:	bc80      	pop	{r7}
    e792:	4770      	bx	lr
    e794:	20008cbc 	.word	0x20008cbc

0000e798 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
    e798:	b480      	push	{r7}
    e79a:	b083      	sub	sp, #12
    e79c:	af00      	add	r7, sp, #0
    e79e:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
    e7a0:	4b04      	ldr	r3, [pc, #16]	; (e7b4 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
    e7a2:	685b      	ldr	r3, [r3, #4]
    e7a4:	2201      	movs	r2, #1
    e7a6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
    e7aa:	bf00      	nop
    e7ac:	370c      	adds	r7, #12
    e7ae:	46bd      	mov	sp, r7
    e7b0:	bc80      	pop	{r7}
    e7b2:	4770      	bx	lr
    e7b4:	20008cbc 	.word	0x20008cbc

0000e7b8 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
    e7b8:	b480      	push	{r7}
    e7ba:	b083      	sub	sp, #12
    e7bc:	af00      	add	r7, sp, #0
    e7be:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
    e7c0:	4b04      	ldr	r3, [pc, #16]	; (e7d4 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
    e7c2:	681b      	ldr	r3, [r3, #0]
    e7c4:	2201      	movs	r2, #1
    e7c6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
    e7ca:	bf00      	nop
    e7cc:	370c      	adds	r7, #12
    e7ce:	46bd      	mov	sp, r7
    e7d0:	bc80      	pop	{r7}
    e7d2:	4770      	bx	lr
    e7d4:	20008cbc 	.word	0x20008cbc

0000e7d8 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
    e7d8:	b480      	push	{r7}
    e7da:	b083      	sub	sp, #12
    e7dc:	af00      	add	r7, sp, #0
    e7de:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
    e7e0:	4b04      	ldr	r3, [pc, #16]	; (e7f4 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
    e7e2:	685b      	ldr	r3, [r3, #4]
    e7e4:	2201      	movs	r2, #1
    e7e6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
    e7ea:	bf00      	nop
    e7ec:	370c      	adds	r7, #12
    e7ee:	46bd      	mov	sp, r7
    e7f0:	bc80      	pop	{r7}
    e7f2:	4770      	bx	lr
    e7f4:	20008cbc 	.word	0x20008cbc

0000e7f8 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    e7f8:	b580      	push	{r7, lr}
    e7fa:	b082      	sub	sp, #8
    e7fc:	af00      	add	r7, sp, #0
    e7fe:	6078      	str	r0, [r7, #4]
    e800:	687b      	ldr	r3, [r7, #4]
    e802:	4618      	mov	r0, r3
    e804:	4b1d      	ldr	r3, [pc, #116]	; (e87c <_ZN22FlapperValveControllerC1Ev+0x84>)
    e806:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
    e808:	687b      	ldr	r3, [r7, #4]
    e80a:	4a1d      	ldr	r2, [pc, #116]	; (e880 <_ZN22FlapperValveControllerC1Ev+0x88>)
    e80c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
    e810:	687b      	ldr	r3, [r7, #4]
    e812:	2200      	movs	r2, #0
    e814:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
    e818:	687b      	ldr	r3, [r7, #4]
    e81a:	2200      	movs	r2, #0
    e81c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
    e820:	687b      	ldr	r3, [r7, #4]
    e822:	2200      	movs	r2, #0
    e824:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
    e828:	687b      	ldr	r3, [r7, #4]
    e82a:	2200      	movs	r2, #0
    e82c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
    e830:	687b      	ldr	r3, [r7, #4]
    e832:	2200      	movs	r2, #0
    e834:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    e838:	687b      	ldr	r3, [r7, #4]
    e83a:	22da      	movs	r2, #218	; 0xda
    e83c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
    e840:	687b      	ldr	r3, [r7, #4]
    e842:	2200      	movs	r2, #0
    e844:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	2200      	movs	r2, #0
    e84c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
    e850:	687b      	ldr	r3, [r7, #4]
    e852:	2200      	movs	r2, #0
    e854:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
    e858:	687b      	ldr	r3, [r7, #4]
    e85a:	2200      	movs	r2, #0
    e85c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	2200      	movs	r2, #0
    e864:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	2200      	movs	r2, #0
    e86c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	
} //FlapperValveController
    e870:	687b      	ldr	r3, [r7, #4]
    e872:	4618      	mov	r0, r3
    e874:	3708      	adds	r7, #8
    e876:	46bd      	mov	sp, r7
    e878:	bd80      	pop	{r7, pc}
    e87a:	bf00      	nop
    e87c:	0000fb45 	.word	0x0000fb45
    e880:	20008cc4 	.word	0x20008cc4

0000e884 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    e884:	b580      	push	{r7, lr}
    e886:	b082      	sub	sp, #8
    e888:	af00      	add	r7, sp, #0
    e88a:	6078      	str	r0, [r7, #4]
    e88c:	687b      	ldr	r3, [r7, #4]
    e88e:	4618      	mov	r0, r3
    e890:	4b03      	ldr	r3, [pc, #12]	; (e8a0 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    e892:	4798      	blx	r3
{
} //~FlapperValveController
    e894:	687b      	ldr	r3, [r7, #4]
    e896:	4618      	mov	r0, r3
    e898:	3708      	adds	r7, #8
    e89a:	46bd      	mov	sp, r7
    e89c:	bd80      	pop	{r7, pc}
    e89e:	bf00      	nop
    e8a0:	0000fb91 	.word	0x0000fb91

0000e8a4 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
    e8a4:	b580      	push	{r7, lr}
    e8a6:	b082      	sub	sp, #8
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	6078      	str	r0, [r7, #4]
    e8ac:	460b      	mov	r3, r1
    e8ae:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
    e8b0:	78fb      	ldrb	r3, [r7, #3]
    e8b2:	491b      	ldr	r1, [pc, #108]	; (e920 <_ZN22FlapperValveController14InitControllerEh+0x7c>)
    e8b4:	687a      	ldr	r2, [r7, #4]
    e8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
    e8ba:	687b      	ldr	r3, [r7, #4]
    e8bc:	78fa      	ldrb	r2, [r7, #3]
    e8be:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
    e8c2:	78fa      	ldrb	r2, [r7, #3]
    e8c4:	4613      	mov	r3, r2
    e8c6:	011b      	lsls	r3, r3, #4
    e8c8:	1a9b      	subs	r3, r3, r2
    e8ca:	00db      	lsls	r3, r3, #3
    e8cc:	4a15      	ldr	r2, [pc, #84]	; (e924 <_ZN22FlapperValveController14InitControllerEh+0x80>)
    e8ce:	441a      	add	r2, r3
    e8d0:	687b      	ldr	r3, [r7, #4]
    e8d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
    e8d6:	78fb      	ldrb	r3, [r7, #3]
    e8d8:	78fa      	ldrb	r2, [r7, #3]
    e8da:	0112      	lsls	r2, r2, #4
    e8dc:	4912      	ldr	r1, [pc, #72]	; (e928 <_ZN22FlapperValveController14InitControllerEh+0x84>)
    e8de:	440a      	add	r2, r1
    e8e0:	6879      	ldr	r1, [r7, #4]
    e8e2:	3332      	adds	r3, #50	; 0x32
    e8e4:	009b      	lsls	r3, r3, #2
    e8e6:	440b      	add	r3, r1
    e8e8:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
    e8ea:	687b      	ldr	r3, [r7, #4]
    e8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e8f0:	78fa      	ldrb	r2, [r7, #3]
    e8f2:	4611      	mov	r1, r2
    e8f4:	4618      	mov	r0, r3
    e8f6:	4b0d      	ldr	r3, [pc, #52]	; (e92c <_ZN22FlapperValveController14InitControllerEh+0x88>)
    e8f8:	4798      	blx	r3
    e8fa:	4603      	mov	r3, r0
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d007      	beq.n	e910 <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
    e900:	6878      	ldr	r0, [r7, #4]
    e902:	4b0b      	ldr	r3, [pc, #44]	; (e930 <_ZN22FlapperValveController14InitControllerEh+0x8c>)
    e904:	4798      	blx	r3
    e906:	4603      	mov	r3, r0
    e908:	461a      	mov	r2, r3
    e90a:	687b      	ldr	r3, [r7, #4]
    e90c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
    e910:	687b      	ldr	r3, [r7, #4]
    e912:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    e916:	b2db      	uxtb	r3, r3
}
    e918:	4618      	mov	r0, r3
    e91a:	3708      	adds	r7, #8
    e91c:	46bd      	mov	sp, r7
    e91e:	bd80      	pop	{r7, pc}
    e920:	20008cbc 	.word	0x20008cbc
    e924:	20008cc4 	.word	0x20008cc4
    e928:	20008c9c 	.word	0x20008c9c
    e92c:	0000fc45 	.word	0x0000fc45
    e930:	0000f7b1 	.word	0x0000f7b1

0000e934 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    e934:	b480      	push	{r7}
    e936:	b083      	sub	sp, #12
    e938:	af00      	add	r7, sp, #0
    e93a:	6078      	str	r0, [r7, #4]
    e93c:	460b      	mov	r3, r1
    e93e:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    e940:	687b      	ldr	r3, [r7, #4]
    e942:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
    e946:	687b      	ldr	r3, [r7, #4]
    e948:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
    e94c:	687b      	ldr	r3, [r7, #4]
    e94e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    e952:	461a      	mov	r2, r3
    e954:	78fb      	ldrb	r3, [r7, #3]
    e956:	429a      	cmp	r2, r3
    e958:	bfcc      	ite	gt
    e95a:	2301      	movgt	r3, #1
    e95c:	2300      	movle	r3, #0
    e95e:	b2da      	uxtb	r2, r3
    e960:	687b      	ldr	r3, [r7, #4]
    e962:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
    e966:	687b      	ldr	r3, [r7, #4]
    e968:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
    e96c:	4618      	mov	r0, r3
    e96e:	370c      	adds	r7, #12
    e970:	46bd      	mov	sp, r7
    e972:	bc80      	pop	{r7}
    e974:	4770      	bx	lr
	...

0000e978 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    e978:	b580      	push	{r7, lr}
    e97a:	b082      	sub	sp, #8
    e97c:	af00      	add	r7, sp, #0
    e97e:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    e980:	687b      	ldr	r3, [r7, #4]
    e982:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    e986:	4619      	mov	r1, r3
    e988:	6878      	ldr	r0, [r7, #4]
    e98a:	4b03      	ldr	r3, [pc, #12]	; (e998 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    e98c:	4798      	blx	r3
    e98e:	4603      	mov	r3, r0
	
}
    e990:	4618      	mov	r0, r3
    e992:	3708      	adds	r7, #8
    e994:	46bd      	mov	sp, r7
    e996:	bd80      	pop	{r7, pc}
    e998:	0000e935 	.word	0x0000e935

0000e99c <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    e99c:	b590      	push	{r4, r7, lr}
    e99e:	b083      	sub	sp, #12
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
    e9aa:	687b      	ldr	r3, [r7, #4]
    e9ac:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e9b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    e9ba:	2b00      	cmp	r3, #0
    e9bc:	d009      	beq.n	e9d2 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
    e9be:	687b      	ldr	r3, [r7, #4]
    e9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e9c4:	2100      	movs	r1, #0
    e9c6:	4618      	mov	r0, r3
    e9c8:	4b0b      	ldr	r3, [pc, #44]	; (e9f8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    e9ca:	4798      	blx	r3
		delay_ms(10);
    e9cc:	200a      	movs	r0, #10
    e9ce:	4b0b      	ldr	r3, [pc, #44]	; (e9fc <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    e9d0:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
    e9d2:	687b      	ldr	r3, [r7, #4]
    e9d4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    e9d8:	6878      	ldr	r0, [r7, #4]
    e9da:	4b09      	ldr	r3, [pc, #36]	; (ea00 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    e9dc:	4798      	blx	r3
    e9de:	4603      	mov	r3, r0
    e9e0:	4619      	mov	r1, r3
    e9e2:	4620      	mov	r0, r4
    e9e4:	4b07      	ldr	r3, [pc, #28]	; (ea04 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    e9e6:	4798      	blx	r3
	StartMotor();
    e9e8:	6878      	ldr	r0, [r7, #4]
    e9ea:	4b07      	ldr	r3, [pc, #28]	; (ea08 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
    e9ec:	4798      	blx	r3
	return 0;
    e9ee:	2300      	movs	r3, #0
}
    e9f0:	4618      	mov	r0, r3
    e9f2:	370c      	adds	r7, #12
    e9f4:	46bd      	mov	sp, r7
    e9f6:	bd90      	pop	{r4, r7, pc}
    e9f8:	0000fda5 	.word	0x0000fda5
    e9fc:	000020e5 	.word	0x000020e5
    ea00:	0000e979 	.word	0x0000e979
    ea04:	0000fe25 	.word	0x0000fe25
    ea08:	0000f3d5 	.word	0x0000f3d5

0000ea0c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    ea0c:	b580      	push	{r7, lr}
    ea0e:	b082      	sub	sp, #8
    ea10:	af00      	add	r7, sp, #0
    ea12:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    ea14:	6878      	ldr	r0, [r7, #4]
    ea16:	4b13      	ldr	r3, [pc, #76]	; (ea64 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    ea18:	4798      	blx	r3
    ea1a:	4603      	mov	r3, r0
    ea1c:	2b00      	cmp	r3, #0
    ea1e:	d003      	beq.n	ea28 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    ea20:	6878      	ldr	r0, [r7, #4]
    ea22:	4b11      	ldr	r3, [pc, #68]	; (ea68 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    ea24:	4798      	blx	r3
    ea26:	e013      	b.n	ea50 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    ea28:	687b      	ldr	r3, [r7, #4]
    ea2a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    ea2e:	2b00      	cmp	r3, #0
    ea30:	d00b      	beq.n	ea4a <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    ea38:	4619      	mov	r1, r3
    ea3a:	6878      	ldr	r0, [r7, #4]
    ea3c:	4b0b      	ldr	r3, [pc, #44]	; (ea6c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    ea3e:	4798      	blx	r3
			NBC_Activated=false;
    ea40:	687b      	ldr	r3, [r7, #4]
    ea42:	2200      	movs	r2, #0
    ea44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    ea48:	e002      	b.n	ea50 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    ea4a:	6878      	ldr	r0, [r7, #4]
    ea4c:	4b08      	ldr	r3, [pc, #32]	; (ea70 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    ea4e:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    ea50:	687b      	ldr	r3, [r7, #4]
    ea52:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    ea56:	f083 0301 	eor.w	r3, r3, #1
    ea5a:	b2db      	uxtb	r3, r3
}
    ea5c:	4618      	mov	r0, r3
    ea5e:	3708      	adds	r7, #8
    ea60:	46bd      	mov	sp, r7
    ea62:	bd80      	pop	{r7, pc}
    ea64:	0000f16d 	.word	0x0000f16d
    ea68:	0000f10d 	.word	0x0000f10d
    ea6c:	0000f46d 	.word	0x0000f46d
    ea70:	0000ed75 	.word	0x0000ed75

0000ea74 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    ea74:	b590      	push	{r4, r7, lr}
    ea76:	b085      	sub	sp, #20
    ea78:	af00      	add	r7, sp, #0
    ea7a:	6078      	str	r0, [r7, #4]
	bool result=false;
    ea7c:	2300      	movs	r3, #0
    ea7e:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    ea80:	687b      	ldr	r3, [r7, #4]
    ea82:	33c7      	adds	r3, #199	; 0xc7
    ea84:	4619      	mov	r1, r3
    ea86:	4817      	ldr	r0, [pc, #92]	; (eae4 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    ea88:	4b17      	ldr	r3, [pc, #92]	; (eae8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    ea8a:	4798      	blx	r3
	UpdateFlapperValveData();
    ea8c:	6878      	ldr	r0, [r7, #4]
    ea8e:	4b17      	ldr	r3, [pc, #92]	; (eaec <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    ea90:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    ea92:	687b      	ldr	r3, [r7, #4]
    ea94:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    ea98:	f083 0301 	eor.w	r3, r3, #1
    ea9c:	b2db      	uxtb	r3, r3
    ea9e:	461c      	mov	r4, r3
    eaa0:	6878      	ldr	r0, [r7, #4]
    eaa2:	4b13      	ldr	r3, [pc, #76]	; (eaf0 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    eaa4:	4798      	blx	r3
    eaa6:	4603      	mov	r3, r0
    eaa8:	f083 0301 	eor.w	r3, r3, #1
    eaac:	b2db      	uxtb	r3, r3
    eaae:	4023      	ands	r3, r4
    eab0:	2b00      	cmp	r3, #0
    eab2:	bf14      	ite	ne
    eab4:	2301      	movne	r3, #1
    eab6:	2300      	moveq	r3, #0
    eab8:	b2db      	uxtb	r3, r3
    eaba:	2b00      	cmp	r3, #0
    eabc:	d00d      	beq.n	eada <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    eabe:	687b      	ldr	r3, [r7, #4]
    eac0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    eac4:	461a      	mov	r2, r3
    eac6:	687b      	ldr	r3, [r7, #4]
    eac8:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
    eacc:	429a      	cmp	r2, r3
    eace:	dd02      	ble.n	ead6 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    ead0:	2301      	movs	r3, #1
    ead2:	73fb      	strb	r3, [r7, #15]
    ead4:	e001      	b.n	eada <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    ead6:	2300      	movs	r3, #0
    ead8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    eada:	7bfb      	ldrb	r3, [r7, #15]
}
    eadc:	4618      	mov	r0, r3
    eade:	3714      	adds	r7, #20
    eae0:	46bd      	mov	sp, r7
    eae2:	bd90      	pop	{r4, r7, pc}
    eae4:	20002868 	.word	0x20002868
    eae8:	0000e221 	.word	0x0000e221
    eaec:	0000f645 	.word	0x0000f645
    eaf0:	0000f16d 	.word	0x0000f16d

0000eaf4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    eaf4:	b580      	push	{r7, lr}
    eaf6:	b082      	sub	sp, #8
    eaf8:	af00      	add	r7, sp, #0
    eafa:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    eafc:	6878      	ldr	r0, [r7, #4]
    eafe:	4b1c      	ldr	r3, [pc, #112]	; (eb70 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
    eb00:	4798      	blx	r3
    eb02:	4603      	mov	r3, r0
    eb04:	461a      	mov	r2, r3
    eb06:	687b      	ldr	r3, [r7, #4]
    eb08:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    eb0c:	b2db      	uxtb	r3, r3
    eb0e:	f083 0301 	eor.w	r3, r3, #1
    eb12:	b2db      	uxtb	r3, r3
    eb14:	4013      	ands	r3, r2
    eb16:	2b00      	cmp	r3, #0
    eb18:	bf14      	ite	ne
    eb1a:	2301      	movne	r3, #1
    eb1c:	2300      	moveq	r3, #0
    eb1e:	b2db      	uxtb	r3, r3
    eb20:	2b00      	cmp	r3, #0
    eb22:	d003      	beq.n	eb2c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    eb24:	6878      	ldr	r0, [r7, #4]
    eb26:	4b13      	ldr	r3, [pc, #76]	; (eb74 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
    eb28:	4798      	blx	r3
    eb2a:	e019      	b.n	eb60 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
    eb2c:	687b      	ldr	r3, [r7, #4]
    eb2e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    eb32:	2b00      	cmp	r3, #0
    eb34:	d011      	beq.n	eb5a <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
    eb36:	687b      	ldr	r3, [r7, #4]
    eb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    eb3c:	2100      	movs	r1, #0
    eb3e:	4618      	mov	r0, r3
    eb40:	4b0d      	ldr	r3, [pc, #52]	; (eb78 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
    eb42:	4798      	blx	r3
			delay_us(10);
    eb44:	200a      	movs	r0, #10
    eb46:	4b0d      	ldr	r3, [pc, #52]	; (eb7c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
    eb48:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
    eb4a:	687b      	ldr	r3, [r7, #4]
    eb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    eb50:	2101      	movs	r1, #1
    eb52:	4618      	mov	r0, r3
    eb54:	4b08      	ldr	r3, [pc, #32]	; (eb78 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
    eb56:	4798      	blx	r3
    eb58:	e002      	b.n	eb60 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
    eb5a:	6878      	ldr	r0, [r7, #4]
    eb5c:	4b08      	ldr	r3, [pc, #32]	; (eb80 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
    eb5e:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
    eb60:	687b      	ldr	r3, [r7, #4]
    eb62:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    eb66:	b2db      	uxtb	r3, r3
}
    eb68:	4618      	mov	r0, r3
    eb6a:	3708      	adds	r7, #8
    eb6c:	46bd      	mov	sp, r7
    eb6e:	bd80      	pop	{r7, pc}
    eb70:	0000ea75 	.word	0x0000ea75
    eb74:	0000ef45 	.word	0x0000ef45
    eb78:	0000fe9d 	.word	0x0000fe9d
    eb7c:	000020b1 	.word	0x000020b1
    eb80:	0000eb85 	.word	0x0000eb85

0000eb84 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    eb84:	b580      	push	{r7, lr}
    eb86:	b082      	sub	sp, #8
    eb88:	af00      	add	r7, sp, #0
    eb8a:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    eb8c:	6878      	ldr	r0, [r7, #4]
    eb8e:	4b29      	ldr	r3, [pc, #164]	; (ec34 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    eb90:	4798      	blx	r3
    eb92:	4603      	mov	r3, r0
    eb94:	2b00      	cmp	r3, #0
    eb96:	d031      	beq.n	ebfc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    eb98:	687b      	ldr	r3, [r7, #4]
    eb9a:	2201      	movs	r2, #1
    eb9c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
    eba0:	687b      	ldr	r3, [r7, #4]
    eba2:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    eba6:	2b00      	cmp	r3, #0
    eba8:	d003      	beq.n	ebb2 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    ebaa:	6878      	ldr	r0, [r7, #4]
    ebac:	4b22      	ldr	r3, [pc, #136]	; (ec38 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    ebae:	4798      	blx	r3
    ebb0:	e038      	b.n	ec24 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    ebb2:	687b      	ldr	r3, [r7, #4]
    ebb4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    ebb8:	461a      	mov	r2, r3
    ebba:	687b      	ldr	r3, [r7, #4]
    ebbc:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    ebc0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    ebc4:	429a      	cmp	r2, r3
    ebc6:	dd0c      	ble.n	ebe2 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    ebc8:	687b      	ldr	r3, [r7, #4]
    ebca:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    ebce:	43db      	mvns	r3, r3
    ebd0:	b2db      	uxtb	r3, r3
    ebd2:	4619      	mov	r1, r3
    ebd4:	6878      	ldr	r0, [r7, #4]
    ebd6:	4b19      	ldr	r3, [pc, #100]	; (ec3c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    ebd8:	4798      	blx	r3
					standAloneReturning=true;
    ebda:	687b      	ldr	r3, [r7, #4]
    ebdc:	2201      	movs	r2, #1
    ebde:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    ebe2:	687b      	ldr	r3, [r7, #4]
    ebe4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    ebe8:	43db      	mvns	r3, r3
    ebea:	b2da      	uxtb	r2, r3
    ebec:	687b      	ldr	r3, [r7, #4]
    ebee:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
    ebf2:	687b      	ldr	r3, [r7, #4]
    ebf4:	2201      	movs	r2, #1
    ebf6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    ebfa:	e013      	b.n	ec24 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    ebfc:	687b      	ldr	r3, [r7, #4]
    ebfe:	2200      	movs	r2, #0
    ec00:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
    ec04:	687b      	ldr	r3, [r7, #4]
    ec06:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d007      	beq.n	ec1e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    ec0e:	687b      	ldr	r3, [r7, #4]
    ec10:	2200      	movs	r2, #0
    ec12:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	2200      	movs	r2, #0
    ec1a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    ec1e:	6878      	ldr	r0, [r7, #4]
    ec20:	4b05      	ldr	r3, [pc, #20]	; (ec38 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    ec22:	4798      	blx	r3
		
	}
	return standAloneMode;
    ec24:	687b      	ldr	r3, [r7, #4]
    ec26:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
    ec2a:	4618      	mov	r0, r3
    ec2c:	3708      	adds	r7, #8
    ec2e:	46bd      	mov	sp, r7
    ec30:	bd80      	pop	{r7, pc}
    ec32:	bf00      	nop
    ec34:	0000ec41 	.word	0x0000ec41
    ec38:	0000ea0d 	.word	0x0000ea0d
    ec3c:	0000f46d 	.word	0x0000f46d

0000ec40 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    ec40:	b480      	push	{r7}
    ec42:	b085      	sub	sp, #20
    ec44:	af00      	add	r7, sp, #0
    ec46:	6078      	str	r0, [r7, #4]
	
	bool result=false;
    ec48:	2300      	movs	r3, #0
    ec4a:	73fb      	strb	r3, [r7, #15]
	if (partner->isOK)
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    ec52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    ec56:	b2db      	uxtb	r3, r3
    ec58:	2b00      	cmp	r3, #0
    ec5a:	d006      	beq.n	ec6a <_ZN22FlapperValveController16IsStandAloneModeEv+0x2a>
	{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
    ec5c:	687b      	ldr	r3, [r7, #4]
    ec5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    ec62:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
    ec66:	73fb      	strb	r3, [r7, #15]
    ec68:	e001      	b.n	ec6e <_ZN22FlapperValveController16IsStandAloneModeEv+0x2e>
	} 
	else
	{
		result=true;
    ec6a:	2301      	movs	r3, #1
    ec6c:	73fb      	strb	r3, [r7, #15]
	}


	return result;
    ec6e:	7bfb      	ldrb	r3, [r7, #15]
}
    ec70:	4618      	mov	r0, r3
    ec72:	3714      	adds	r7, #20
    ec74:	46bd      	mov	sp, r7
    ec76:	bc80      	pop	{r7}
    ec78:	4770      	bx	lr

0000ec7a <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
    ec7a:	b480      	push	{r7}
    ec7c:	b083      	sub	sp, #12
    ec7e:	af00      	add	r7, sp, #0
    ec80:	6078      	str	r0, [r7, #4]
    ec82:	6039      	str	r1, [r7, #0]
	partner=part;
    ec84:	687b      	ldr	r3, [r7, #4]
    ec86:	683a      	ldr	r2, [r7, #0]
    ec88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
    ec8c:	bf00      	nop
    ec8e:	370c      	adds	r7, #12
    ec90:	46bd      	mov	sp, r7
    ec92:	bc80      	pop	{r7}
    ec94:	4770      	bx	lr
	...

0000ec98 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
    ec98:	b580      	push	{r7, lr}
    ec9a:	b082      	sub	sp, #8
    ec9c:	af00      	add	r7, sp, #0
    ec9e:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    eca0:	687b      	ldr	r3, [r7, #4]
    eca2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    eca6:	2b05      	cmp	r3, #5
    eca8:	bfd4      	ite	le
    ecaa:	2301      	movle	r3, #1
    ecac:	2300      	movgt	r3, #0
    ecae:	b2da      	uxtb	r2, r3
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    ecb6:	2b05      	cmp	r3, #5
    ecb8:	bfd4      	ite	le
    ecba:	2301      	movle	r3, #1
    ecbc:	2300      	movgt	r3, #0
    ecbe:	b2db      	uxtb	r3, r3
    ecc0:	4013      	ands	r3, r2
    ecc2:	b2da      	uxtb	r2, r3
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    ecca:	2bfa      	cmp	r3, #250	; 0xfa
    eccc:	bfcc      	ite	gt
    ecce:	2301      	movgt	r3, #1
    ecd0:	2300      	movle	r3, #0
    ecd2:	b2d9      	uxtb	r1, r3
    ecd4:	687b      	ldr	r3, [r7, #4]
    ecd6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    ecda:	2bf5      	cmp	r3, #245	; 0xf5
    ecdc:	bfcc      	ite	gt
    ecde:	2301      	movgt	r3, #1
    ece0:	2300      	movle	r3, #0
    ece2:	b2db      	uxtb	r3, r3
    ece4:	400b      	ands	r3, r1
    ece6:	b2db      	uxtb	r3, r3
    ece8:	4313      	orrs	r3, r2
    ecea:	b2db      	uxtb	r3, r3
    ecec:	461a      	mov	r2, r3
    ecee:	687b      	ldr	r3, [r7, #4]
    ecf0:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    ecf4:	f083 0301 	eor.w	r3, r3, #1
    ecf8:	b2db      	uxtb	r3, r3
    ecfa:	4619      	mov	r1, r3
    ecfc:	687b      	ldr	r3, [r7, #4]
    ecfe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    ed02:	b2db      	uxtb	r3, r3
    ed04:	400b      	ands	r3, r1
    ed06:	4013      	ands	r3, r2
    ed08:	2b00      	cmp	r3, #0
    ed0a:	bf14      	ite	ne
    ed0c:	2301      	movne	r3, #1
    ed0e:	2300      	moveq	r3, #0
    ed10:	b2db      	uxtb	r3, r3
    ed12:	2b00      	cmp	r3, #0
    ed14:	d01f      	beq.n	ed56 <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d105      	bne.n	ed2c <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    ed20:	22c8      	movs	r2, #200	; 0xc8
    ed22:	4910      	ldr	r1, [pc, #64]	; (ed64 <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
    ed24:	4810      	ldr	r0, [pc, #64]	; (ed68 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    ed26:	4b11      	ldr	r3, [pc, #68]	; (ed6c <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    ed28:	4798      	blx	r3
    ed2a:	e004      	b.n	ed36 <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    ed2c:	22c8      	movs	r2, #200	; 0xc8
    ed2e:	4910      	ldr	r1, [pc, #64]	; (ed70 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
    ed30:	480d      	ldr	r0, [pc, #52]	; (ed68 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    ed32:	4b0e      	ldr	r3, [pc, #56]	; (ed6c <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    ed34:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
    ed36:	687b      	ldr	r3, [r7, #4]
    ed38:	2200      	movs	r2, #0
    ed3a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
    ed3e:	687b      	ldr	r3, [r7, #4]
    ed40:	2200      	movs	r2, #0
    ed42:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
    ed46:	687b      	ldr	r3, [r7, #4]
    ed48:	2201      	movs	r2, #1
    ed4a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
    ed4e:	687b      	ldr	r3, [r7, #4]
    ed50:	2201      	movs	r2, #1
    ed52:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
    ed56:	687b      	ldr	r3, [r7, #4]
    ed58:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
    ed5c:	4618      	mov	r0, r3
    ed5e:	3708      	adds	r7, #8
    ed60:	46bd      	mov	sp, r7
    ed62:	bd80      	pop	{r7, pc}
    ed64:	0000e779 	.word	0x0000e779
    ed68:	20008bdc 	.word	0x20008bdc
    ed6c:	0000d4ed 	.word	0x0000d4ed
    ed70:	0000e799 	.word	0x0000e799

0000ed74 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    ed74:	b590      	push	{r4, r7, lr}
    ed76:	b083      	sub	sp, #12
    ed78:	af00      	add	r7, sp, #0
    ed7a:	6078      	str	r0, [r7, #4]
	if (isControlling)
    ed7c:	687b      	ldr	r3, [r7, #4]
    ed7e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    ed82:	2b00      	cmp	r3, #0
    ed84:	f000 80c9 	beq.w	ef1a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    ed88:	687b      	ldr	r3, [r7, #4]
    ed8a:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    ed8e:	687b      	ldr	r3, [r7, #4]
    ed90:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    ed94:	4313      	orrs	r3, r2
    ed96:	b2db      	uxtb	r3, r3
    ed98:	461a      	mov	r2, r3
    ed9a:	687b      	ldr	r3, [r7, #4]
    ed9c:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    eda0:	4013      	ands	r3, r2
    eda2:	687a      	ldr	r2, [r7, #4]
    eda4:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
    eda8:	b2d2      	uxtb	r2, r2
    edaa:	4013      	ands	r3, r2
    edac:	2b00      	cmp	r3, #0
    edae:	bf14      	ite	ne
    edb0:	2301      	movne	r3, #1
    edb2:	2300      	moveq	r3, #0
    edb4:	b2db      	uxtb	r3, r3
    edb6:	2b00      	cmp	r3, #0
    edb8:	d003      	beq.n	edc2 <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    edba:	6878      	ldr	r0, [r7, #4]
    edbc:	4b59      	ldr	r3, [pc, #356]	; (ef24 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    edbe:	4798      	blx	r3
    edc0:	e0ab      	b.n	ef1a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
    edc2:	6878      	ldr	r0, [r7, #4]
    edc4:	4b58      	ldr	r3, [pc, #352]	; (ef28 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
    edc6:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    edc8:	687b      	ldr	r3, [r7, #4]
    edca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    edce:	461a      	mov	r2, r3
    edd0:	687b      	ldr	r3, [r7, #4]
    edd2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    edd6:	1ad3      	subs	r3, r2, r3
    edd8:	2b00      	cmp	r3, #0
    edda:	bfb8      	it	lt
    eddc:	425b      	neglt	r3, r3
    edde:	687a      	ldr	r2, [r7, #4]
    ede0:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
    ede4:	4293      	cmp	r3, r2
    ede6:	bfcc      	ite	gt
    ede8:	2301      	movgt	r3, #1
    edea:	2300      	movle	r3, #0
    edec:	b2db      	uxtb	r3, r3
    edee:	461a      	mov	r2, r3
    edf0:	687b      	ldr	r3, [r7, #4]
    edf2:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    edf6:	4313      	orrs	r3, r2
    edf8:	2b00      	cmp	r3, #0
    edfa:	d078      	beq.n	eeee <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
    edfc:	6878      	ldr	r0, [r7, #4]
    edfe:	4b4b      	ldr	r3, [pc, #300]	; (ef2c <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
    ee00:	4798      	blx	r3
    ee02:	4603      	mov	r3, r0
    ee04:	2b00      	cmp	r3, #0
    ee06:	d04a      	beq.n	ee9e <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
    ee08:	687b      	ldr	r3, [r7, #4]
    ee0a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    ee0e:	2b00      	cmp	r3, #0
    ee10:	d00e      	beq.n	ee30 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    ee18:	2b00      	cmp	r3, #0
    ee1a:	d053      	beq.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
    ee1c:	687b      	ldr	r3, [r7, #4]
    ee1e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    ee22:	b2db      	uxtb	r3, r3
    ee24:	2b00      	cmp	r3, #0
    ee26:	d04d      	beq.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
    ee28:	6878      	ldr	r0, [r7, #4]
    ee2a:	4b3e      	ldr	r3, [pc, #248]	; (ef24 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    ee2c:	4798      	blx	r3
    ee2e:	e049      	b.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    ee30:	687b      	ldr	r3, [r7, #4]
    ee32:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
    ee36:	6878      	ldr	r0, [r7, #4]
    ee38:	4b3d      	ldr	r3, [pc, #244]	; (ef30 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    ee3a:	4798      	blx	r3
    ee3c:	4603      	mov	r3, r0
    ee3e:	429c      	cmp	r4, r3
    ee40:	bf14      	ite	ne
    ee42:	2301      	movne	r3, #1
    ee44:	2300      	moveq	r3, #0
    ee46:	b2db      	uxtb	r3, r3
    ee48:	2b00      	cmp	r3, #0
    ee4a:	d00a      	beq.n	ee62 <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
    ee4c:	6878      	ldr	r0, [r7, #4]
    ee4e:	4b39      	ldr	r3, [pc, #228]	; (ef34 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    ee50:	4798      	blx	r3
							RemoveTimeoutTask();
    ee52:	6878      	ldr	r0, [r7, #4]
    ee54:	4b38      	ldr	r3, [pc, #224]	; (ef38 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
    ee56:	4798      	blx	r3
							keepControlling=true;
    ee58:	687b      	ldr	r3, [r7, #4]
    ee5a:	2201      	movs	r2, #1
    ee5c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    ee60:	e030      	b.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
    ee62:	687b      	ldr	r3, [r7, #4]
    ee64:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    ee68:	b2db      	uxtb	r3, r3
    ee6a:	2b00      	cmp	r3, #0
    ee6c:	d003      	beq.n	ee76 <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
    ee6e:	6878      	ldr	r0, [r7, #4]
    ee70:	4b30      	ldr	r3, [pc, #192]	; (ef34 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    ee72:	4798      	blx	r3
    ee74:	e026      	b.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
    ee76:	687b      	ldr	r3, [r7, #4]
    ee78:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	d021      	beq.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
    ee80:	687b      	ldr	r3, [r7, #4]
    ee82:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    ee86:	b2db      	uxtb	r3, r3
    ee88:	2b00      	cmp	r3, #0
    ee8a:	d003      	beq.n	ee94 <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
    ee8c:	6878      	ldr	r0, [r7, #4]
    ee8e:	4b29      	ldr	r3, [pc, #164]	; (ef34 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    ee90:	4798      	blx	r3
    ee92:	e017      	b.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
    ee94:	2100      	movs	r1, #0
    ee96:	6878      	ldr	r0, [r7, #4]
    ee98:	4b28      	ldr	r3, [pc, #160]	; (ef3c <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    ee9a:	4798      	blx	r3
    ee9c:	e012      	b.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
    ee9e:	687b      	ldr	r3, [r7, #4]
    eea0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    eea4:	2b00      	cmp	r3, #0
    eea6:	d00d      	beq.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
    eea8:	687b      	ldr	r3, [r7, #4]
    eeaa:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    eeae:	b2db      	uxtb	r3, r3
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d003      	beq.n	eebc <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
    eeb4:	6878      	ldr	r0, [r7, #4]
    eeb6:	4b22      	ldr	r3, [pc, #136]	; (ef40 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    eeb8:	4798      	blx	r3
    eeba:	e003      	b.n	eec4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
    eebc:	2100      	movs	r1, #0
    eebe:	6878      	ldr	r0, [r7, #4]
    eec0:	4b1e      	ldr	r3, [pc, #120]	; (ef3c <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    eec2:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    eec4:	687b      	ldr	r3, [r7, #4]
    eec6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    eeca:	461a      	mov	r2, r3
    eecc:	687b      	ldr	r3, [r7, #4]
    eece:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    eed2:	1ad3      	subs	r3, r2, r3
    eed4:	2b00      	cmp	r3, #0
    eed6:	bfb8      	it	lt
    eed8:	425b      	neglt	r3, r3
    eeda:	687a      	ldr	r2, [r7, #4]
    eedc:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
    eee0:	4293      	cmp	r3, r2
    eee2:	dd1a      	ble.n	ef1a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
    eee4:	687b      	ldr	r3, [r7, #4]
    eee6:	2200      	movs	r2, #0
    eee8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
    eeec:	e015      	b.n	ef1a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
    eeee:	687b      	ldr	r3, [r7, #4]
    eef0:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    eef4:	2b00      	cmp	r3, #0
    eef6:	d009      	beq.n	ef0c <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
    eef8:	687b      	ldr	r3, [r7, #4]
    eefa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    eefe:	b2db      	uxtb	r3, r3
    ef00:	2b00      	cmp	r3, #0
    ef02:	d00a      	beq.n	ef1a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
    ef04:	6878      	ldr	r0, [r7, #4]
    ef06:	4b07      	ldr	r3, [pc, #28]	; (ef24 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    ef08:	4798      	blx	r3
    ef0a:	e006      	b.n	ef1a <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    ef0c:	6878      	ldr	r0, [r7, #4]
    ef0e:	4b0c      	ldr	r3, [pc, #48]	; (ef40 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    ef10:	4798      	blx	r3
					gotSetpoint=true;
    ef12:	687b      	ldr	r3, [r7, #4]
    ef14:	2201      	movs	r2, #1
    ef16:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
    ef1a:	2300      	movs	r3, #0
	
}
    ef1c:	4618      	mov	r0, r3
    ef1e:	370c      	adds	r7, #12
    ef20:	46bd      	mov	sp, r7
    ef22:	bd90      	pop	{r4, r7, pc}
    ef24:	0000f289 	.word	0x0000f289
    ef28:	0000ec99 	.word	0x0000ec99
    ef2c:	0000f1e1 	.word	0x0000f1e1
    ef30:	0000e979 	.word	0x0000e979
    ef34:	0000f1b5 	.word	0x0000f1b5
    ef38:	0000f95d 	.word	0x0000f95d
    ef3c:	0000f60d 	.word	0x0000f60d
    ef40:	0000f321 	.word	0x0000f321

0000ef44 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    ef44:	b580      	push	{r7, lr}
    ef46:	b084      	sub	sp, #16
    ef48:	af00      	add	r7, sp, #0
    ef4a:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    ef4c:	2052      	movs	r0, #82	; 0x52
    ef4e:	4b60      	ldr	r3, [pc, #384]	; (f0d0 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    ef50:	4798      	blx	r3
    ef52:	4603      	mov	r3, r0
    ef54:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    ef56:	6878      	ldr	r0, [r7, #4]
    ef58:	4b5e      	ldr	r3, [pc, #376]	; (f0d4 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    ef5a:	4798      	blx	r3
    ef5c:	4603      	mov	r3, r0
    ef5e:	2b00      	cmp	r3, #0
    ef60:	f000 80b2 	beq.w	f0c8 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
    ef64:	687b      	ldr	r3, [r7, #4]
    ef66:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
    ef6a:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
    ef6c:	687b      	ldr	r3, [r7, #4]
    ef6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ef72:	2100      	movs	r1, #0
    ef74:	4618      	mov	r0, r3
    ef76:	4b58      	ldr	r3, [pc, #352]	; (f0d8 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    ef78:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
    ef7a:	687b      	ldr	r3, [r7, #4]
    ef7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ef80:	2100      	movs	r1, #0
    ef82:	4618      	mov	r0, r3
    ef84:	4b55      	ldr	r3, [pc, #340]	; (f0dc <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    ef86:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
    ef88:	687b      	ldr	r3, [r7, #4]
    ef8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ef8e:	2100      	movs	r1, #0
    ef90:	4618      	mov	r0, r3
    ef92:	4b53      	ldr	r3, [pc, #332]	; (f0e0 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    ef94:	4798      	blx	r3
		delay_ms(100);
    ef96:	2064      	movs	r0, #100	; 0x64
    ef98:	4b52      	ldr	r3, [pc, #328]	; (f0e4 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    ef9a:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    efa2:	4618      	mov	r0, r3
    efa4:	4b50      	ldr	r3, [pc, #320]	; (f0e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
    efa6:	4798      	blx	r3
    efa8:	4603      	mov	r3, r0
    efaa:	461a      	mov	r2, r3
    efac:	7bbb      	ldrb	r3, [r7, #14]
    efae:	429a      	cmp	r2, r3
    efb0:	bfcc      	ite	gt
    efb2:	2301      	movgt	r3, #1
    efb4:	2300      	movle	r3, #0
    efb6:	b2db      	uxtb	r3, r3
    efb8:	2b00      	cmp	r3, #0
    efba:	d007      	beq.n	efcc <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
    efbc:	687b      	ldr	r3, [r7, #4]
    efbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    efc2:	2101      	movs	r1, #1
    efc4:	4618      	mov	r0, r3
    efc6:	4b49      	ldr	r3, [pc, #292]	; (f0ec <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
    efc8:	4798      	blx	r3
    efca:	e006      	b.n	efda <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
    efcc:	687b      	ldr	r3, [r7, #4]
    efce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    efd2:	2100      	movs	r1, #0
    efd4:	4618      	mov	r0, r3
    efd6:	4b45      	ldr	r3, [pc, #276]	; (f0ec <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
    efd8:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    efe0:	2101      	movs	r1, #1
    efe2:	4618      	mov	r0, r3
    efe4:	4b3d      	ldr	r3, [pc, #244]	; (f0dc <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    efe6:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
    efe8:	687b      	ldr	r3, [r7, #4]
    efea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    efee:	2101      	movs	r1, #1
    eff0:	4618      	mov	r0, r3
    eff2:	4b3b      	ldr	r3, [pc, #236]	; (f0e0 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    eff4:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
    eff6:	687b      	ldr	r3, [r7, #4]
    eff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    effc:	7bba      	ldrb	r2, [r7, #14]
    effe:	4611      	mov	r1, r2
    f000:	4618      	mov	r0, r3
    f002:	4b3b      	ldr	r3, [pc, #236]	; (f0f0 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
    f004:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
    f006:	687b      	ldr	r3, [r7, #4]
    f008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f00c:	4618      	mov	r0, r3
    f00e:	4b36      	ldr	r3, [pc, #216]	; (f0e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
    f010:	4798      	blx	r3
    f012:	4603      	mov	r3, r0
    f014:	461a      	mov	r2, r3
    f016:	687b      	ldr	r3, [r7, #4]
    f018:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
    f01c:	687b      	ldr	r3, [r7, #4]
    f01e:	2200      	movs	r2, #0
    f020:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
    f024:	687b      	ldr	r3, [r7, #4]
    f026:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f02a:	2b00      	cmp	r3, #0
    f02c:	d106      	bne.n	f03c <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
    f02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f032:	4930      	ldr	r1, [pc, #192]	; (f0f4 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
    f034:	4830      	ldr	r0, [pc, #192]	; (f0f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
    f036:	4b31      	ldr	r3, [pc, #196]	; (f0fc <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
    f038:	4798      	blx	r3
    f03a:	e005      	b.n	f048 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
    f03c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f040:	492f      	ldr	r1, [pc, #188]	; (f100 <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
    f042:	482d      	ldr	r0, [pc, #180]	; (f0f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
    f044:	4b2d      	ldr	r3, [pc, #180]	; (f0fc <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
    f046:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
    f048:	687b      	ldr	r3, [r7, #4]
    f04a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f04e:	2101      	movs	r1, #1
    f050:	4618      	mov	r0, r3
    f052:	4b21      	ldr	r3, [pc, #132]	; (f0d8 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    f054:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    f056:	687b      	ldr	r3, [r7, #4]
    f058:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    f05c:	461a      	mov	r2, r3
    f05e:	7bbb      	ldrb	r3, [r7, #14]
    f060:	1ad3      	subs	r3, r2, r3
    f062:	2b00      	cmp	r3, #0
    f064:	bfb8      	it	lt
    f066:	425b      	neglt	r3, r3
    f068:	2b06      	cmp	r3, #6
    f06a:	bfcc      	ite	gt
    f06c:	2301      	movgt	r3, #1
    f06e:	2300      	movle	r3, #0
    f070:	b2db      	uxtb	r3, r3
    f072:	461a      	mov	r2, r3
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
    f07a:	b2db      	uxtb	r3, r3
    f07c:	f083 0301 	eor.w	r3, r3, #1
    f080:	b2db      	uxtb	r3, r3
    f082:	4013      	ands	r3, r2
    f084:	2b00      	cmp	r3, #0
    f086:	bf14      	ite	ne
    f088:	2301      	movne	r3, #1
    f08a:	2300      	moveq	r3, #0
    f08c:	b2db      	uxtb	r3, r3
    f08e:	2b00      	cmp	r3, #0
    f090:	d00e      	beq.n	f0b0 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
    f092:	2052      	movs	r0, #82	; 0x52
    f094:	4b1b      	ldr	r3, [pc, #108]	; (f104 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
    f096:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
    f098:	687b      	ldr	r3, [r7, #4]
    f09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f09e:	4618      	mov	r0, r3
    f0a0:	4b11      	ldr	r3, [pc, #68]	; (f0e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
    f0a2:	4798      	blx	r3
    f0a4:	4603      	mov	r3, r0
    f0a6:	461a      	mov	r2, r3
    f0a8:	687b      	ldr	r3, [r7, #4]
    f0aa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    f0ae:	e7d2      	b.n	f056 <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
    f0b0:	687b      	ldr	r3, [r7, #4]
    f0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f0b6:	2100      	movs	r1, #0
    f0b8:	4618      	mov	r0, r3
    f0ba:	4b07      	ldr	r3, [pc, #28]	; (f0d8 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    f0bc:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    f0be:	7bfb      	ldrb	r3, [r7, #15]
    f0c0:	4619      	mov	r1, r3
    f0c2:	2052      	movs	r0, #82	; 0x52
    f0c4:	4b10      	ldr	r3, [pc, #64]	; (f108 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
    f0c6:	4798      	blx	r3
	} 
	else
	{
	}
}
    f0c8:	bf00      	nop
    f0ca:	3710      	adds	r7, #16
    f0cc:	46bd      	mov	sp, r7
    f0ce:	bd80      	pop	{r7, pc}
    f0d0:	0000e6e5 	.word	0x0000e6e5
    f0d4:	0000ea75 	.word	0x0000ea75
    f0d8:	0000fda5 	.word	0x0000fda5
    f0dc:	0000ff15 	.word	0x0000ff15
    f0e0:	0000fe9d 	.word	0x0000fe9d
    f0e4:	000020e5 	.word	0x000020e5
    f0e8:	0000ffc5 	.word	0x0000ffc5
    f0ec:	0000fe25 	.word	0x0000fe25
    f0f0:	0000ff8d 	.word	0x0000ff8d
    f0f4:	0000e7b9 	.word	0x0000e7b9
    f0f8:	20008bdc 	.word	0x20008bdc
    f0fc:	0000d4ed 	.word	0x0000d4ed
    f100:	0000e7d9 	.word	0x0000e7d9
    f104:	0000e6b5 	.word	0x0000e6b5
    f108:	0000e67d 	.word	0x0000e67d

0000f10c <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
    f10c:	b580      	push	{r7, lr}
    f10e:	b082      	sub	sp, #8
    f110:	af00      	add	r7, sp, #0
    f112:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    f114:	687b      	ldr	r3, [r7, #4]
    f116:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    f11a:	2b00      	cmp	r3, #0
    f11c:	d014      	beq.n	f148 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    f11e:	687b      	ldr	r3, [r7, #4]
    f120:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    f124:	2b00      	cmp	r3, #0
    f126:	d003      	beq.n	f130 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    f128:	6878      	ldr	r0, [r7, #4]
    f12a:	4b0e      	ldr	r3, [pc, #56]	; (f164 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    f12c:	4798      	blx	r3
    f12e:	e013      	b.n	f158 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f130:	687b      	ldr	r3, [r7, #4]
    f132:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    f136:	4619      	mov	r1, r3
    f138:	6878      	ldr	r0, [r7, #4]
    f13a:	4b0b      	ldr	r3, [pc, #44]	; (f168 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f13c:	4798      	blx	r3
			NBC_Activated=false;
    f13e:	687b      	ldr	r3, [r7, #4]
    f140:	2200      	movs	r2, #0
    f142:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    f146:	e007      	b.n	f158 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    f148:	21ff      	movs	r1, #255	; 0xff
    f14a:	6878      	ldr	r0, [r7, #4]
    f14c:	4b06      	ldr	r3, [pc, #24]	; (f168 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f14e:	4798      	blx	r3
			NBC_Activated=true;
    f150:	687b      	ldr	r3, [r7, #4]
    f152:	2201      	movs	r2, #1
    f154:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
    f158:	2300      	movs	r3, #0
	
}
    f15a:	4618      	mov	r0, r3
    f15c:	3708      	adds	r7, #8
    f15e:	46bd      	mov	sp, r7
    f160:	bd80      	pop	{r7, pc}
    f162:	bf00      	nop
    f164:	0000ed75 	.word	0x0000ed75
    f168:	0000f46d 	.word	0x0000f46d

0000f16c <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    f16c:	b480      	push	{r7}
    f16e:	b083      	sub	sp, #12
    f170:	af00      	add	r7, sp, #0
    f172:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
    f174:	687b      	ldr	r3, [r7, #4]
    f176:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    f17a:	461a      	mov	r2, r3
    f17c:	687b      	ldr	r3, [r7, #4]
    f17e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
    f182:	4013      	ands	r3, r2
    f184:	687a      	ldr	r2, [r7, #4]
    f186:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
    f18a:	4313      	orrs	r3, r2
    f18c:	2b00      	cmp	r3, #0
    f18e:	bf14      	ite	ne
    f190:	2301      	movne	r3, #1
    f192:	2300      	moveq	r3, #0
    f194:	b2da      	uxtb	r2, r3
    f196:	687b      	ldr	r3, [r7, #4]
    f198:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
    f19c:	687b      	ldr	r3, [r7, #4]
    f19e:	22ff      	movs	r2, #255	; 0xff
    f1a0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
    f1a4:	687b      	ldr	r3, [r7, #4]
    f1a6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
    f1aa:	4618      	mov	r0, r3
    f1ac:	370c      	adds	r7, #12
    f1ae:	46bd      	mov	sp, r7
    f1b0:	bc80      	pop	{r7}
    f1b2:	4770      	bx	lr

0000f1b4 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
    f1b4:	b580      	push	{r7, lr}
    f1b6:	b082      	sub	sp, #8
    f1b8:	af00      	add	r7, sp, #0
    f1ba:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
    f1bc:	687b      	ldr	r3, [r7, #4]
    f1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f1c2:	2100      	movs	r1, #0
    f1c4:	4618      	mov	r0, r3
    f1c6:	4b05      	ldr	r3, [pc, #20]	; (f1dc <_ZN22FlapperValveController9StopMotorEv+0x28>)
    f1c8:	4798      	blx	r3
	flapperValveIsMoving=false;
    f1ca:	687b      	ldr	r3, [r7, #4]
    f1cc:	2200      	movs	r2, #0
    f1ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
    f1d2:	2300      	movs	r3, #0
}
    f1d4:	4618      	mov	r0, r3
    f1d6:	3708      	adds	r7, #8
    f1d8:	46bd      	mov	sp, r7
    f1da:	bd80      	pop	{r7, pc}
    f1dc:	0000fda5 	.word	0x0000fda5

0000f1e0 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
    f1e0:	b480      	push	{r7}
    f1e2:	b085      	sub	sp, #20
    f1e4:	af00      	add	r7, sp, #0
    f1e6:	6078      	str	r0, [r7, #4]
	bool_result=true;
    f1e8:	687b      	ldr	r3, [r7, #4]
    f1ea:	2201      	movs	r2, #1
    f1ec:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
    f1f0:	687b      	ldr	r3, [r7, #4]
    f1f2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f1f6:	b2db      	uxtb	r3, r3
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d03c      	beq.n	f276 <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    f1fc:	2300      	movs	r3, #0
    f1fe:	73fb      	strb	r3, [r7, #15]
    f200:	7bfb      	ldrb	r3, [r7, #15]
    f202:	2b0e      	cmp	r3, #14
    f204:	dc26      	bgt.n	f254 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
    f206:	687b      	ldr	r3, [r7, #4]
    f208:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f20c:	687a      	ldr	r2, [r7, #4]
    f20e:	3332      	adds	r3, #50	; 0x32
    f210:	009b      	lsls	r3, r3, #2
    f212:	4413      	add	r3, r2
    f214:	685a      	ldr	r2, [r3, #4]
    f216:	7bfb      	ldrb	r3, [r7, #15]
    f218:	4413      	add	r3, r2
    f21a:	781a      	ldrb	r2, [r3, #0]
    f21c:	687b      	ldr	r3, [r7, #4]
    f21e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f222:	6879      	ldr	r1, [r7, #4]
    f224:	3332      	adds	r3, #50	; 0x32
    f226:	009b      	lsls	r3, r3, #2
    f228:	440b      	add	r3, r1
    f22a:	6859      	ldr	r1, [r3, #4]
    f22c:	7bfb      	ldrb	r3, [r7, #15]
    f22e:	3301      	adds	r3, #1
    f230:	440b      	add	r3, r1
    f232:	781b      	ldrb	r3, [r3, #0]
    f234:	429a      	cmp	r2, r3
    f236:	d104      	bne.n	f242 <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	2200      	movs	r2, #0
    f23c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    f240:	e004      	b.n	f24c <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
    f242:	687b      	ldr	r3, [r7, #4]
    f244:	2201      	movs	r2, #1
    f246:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
    f24a:	e003      	b.n	f254 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    f24c:	7bfb      	ldrb	r3, [r7, #15]
    f24e:	3301      	adds	r3, #1
    f250:	73fb      	strb	r3, [r7, #15]
    f252:	e7d5      	b.n	f200 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
    f254:	687b      	ldr	r3, [r7, #4]
    f256:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f25a:	b2db      	uxtb	r3, r3
    f25c:	461a      	mov	r2, r3
    f25e:	687b      	ldr	r3, [r7, #4]
    f260:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    f264:	4013      	ands	r3, r2
    f266:	2b00      	cmp	r3, #0
    f268:	bf14      	ite	ne
    f26a:	2301      	movne	r3, #1
    f26c:	2300      	moveq	r3, #0
    f26e:	b2da      	uxtb	r2, r3
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
    f276:	687b      	ldr	r3, [r7, #4]
    f278:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f27c:	b2db      	uxtb	r3, r3
	
}
    f27e:	4618      	mov	r0, r3
    f280:	3714      	adds	r7, #20
    f282:	46bd      	mov	sp, r7
    f284:	bc80      	pop	{r7}
    f286:	4770      	bx	lr

0000f288 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
    f288:	b580      	push	{r7, lr}
    f28a:	b082      	sub	sp, #8
    f28c:	af00      	add	r7, sp, #0
    f28e:	6078      	str	r0, [r7, #4]
		if (closing)
    f290:	687b      	ldr	r3, [r7, #4]
    f292:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
    f296:	2b00      	cmp	r3, #0
    f298:	d003      	beq.n	f2a2 <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    f29a:	687b      	ldr	r3, [r7, #4]
    f29c:	2200      	movs	r2, #0
    f29e:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
    f2a2:	6878      	ldr	r0, [r7, #4]
    f2a4:	4b17      	ldr	r3, [pc, #92]	; (f304 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
    f2a6:	4798      	blx	r3
		if (valve_ID==0)
    f2a8:	687b      	ldr	r3, [r7, #4]
    f2aa:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f2ae:	2b00      	cmp	r3, #0
    f2b0:	d108      	bne.n	f2c4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    f2b2:	4915      	ldr	r1, [pc, #84]	; (f308 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
    f2b4:	4815      	ldr	r0, [pc, #84]	; (f30c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    f2b6:	4b16      	ldr	r3, [pc, #88]	; (f310 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    f2b8:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
    f2ba:	4916      	ldr	r1, [pc, #88]	; (f314 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
    f2bc:	4813      	ldr	r0, [pc, #76]	; (f30c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    f2be:	4b14      	ldr	r3, [pc, #80]	; (f310 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    f2c0:	4798      	blx	r3
    f2c2:	e007      	b.n	f2d4 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    f2c4:	4914      	ldr	r1, [pc, #80]	; (f318 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
    f2c6:	4811      	ldr	r0, [pc, #68]	; (f30c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    f2c8:	4b11      	ldr	r3, [pc, #68]	; (f310 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    f2ca:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
    f2cc:	4913      	ldr	r1, [pc, #76]	; (f31c <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
    f2ce:	480f      	ldr	r0, [pc, #60]	; (f30c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    f2d0:	4b0f      	ldr	r3, [pc, #60]	; (f310 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    f2d2:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
    f2d4:	687b      	ldr	r3, [r7, #4]
    f2d6:	2200      	movs	r2, #0
    f2d8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
    f2dc:	687b      	ldr	r3, [r7, #4]
    f2de:	2200      	movs	r2, #0
    f2e0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
    f2e4:	687b      	ldr	r3, [r7, #4]
    f2e6:	2200      	movs	r2, #0
    f2e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
    f2ec:	687b      	ldr	r3, [r7, #4]
    f2ee:	2200      	movs	r2, #0
    f2f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
    f2f4:	687b      	ldr	r3, [r7, #4]
    f2f6:	2200      	movs	r2, #0
    f2f8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
    f2fc:	bf00      	nop
    f2fe:	3708      	adds	r7, #8
    f300:	46bd      	mov	sp, r7
    f302:	bd80      	pop	{r7, pc}
    f304:	0000f1b5 	.word	0x0000f1b5
    f308:	0000e721 	.word	0x0000e721
    f30c:	20008bdc 	.word	0x20008bdc
    f310:	0000d495 	.word	0x0000d495
    f314:	0000e779 	.word	0x0000e779
    f318:	0000e74d 	.word	0x0000e74d
    f31c:	0000e799 	.word	0x0000e799

0000f320 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    f320:	b580      	push	{r7, lr}
    f322:	b082      	sub	sp, #8
    f324:	af00      	add	r7, sp, #0
    f326:	6078      	str	r0, [r7, #4]
		StopMotor();
    f328:	6878      	ldr	r0, [r7, #4]
    f32a:	4b0c      	ldr	r3, [pc, #48]	; (f35c <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
    f32c:	4798      	blx	r3
		RemoveTimeoutTask();
    f32e:	6878      	ldr	r0, [r7, #4]
    f330:	4b0b      	ldr	r3, [pc, #44]	; (f360 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    f332:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f334:	687b      	ldr	r3, [r7, #4]
    f336:	2200      	movs	r2, #0
    f338:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
    f33c:	687b      	ldr	r3, [r7, #4]
    f33e:	2200      	movs	r2, #0
    f340:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
    f344:	687b      	ldr	r3, [r7, #4]
    f346:	2200      	movs	r2, #0
    f348:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
    f34c:	687b      	ldr	r3, [r7, #4]
    f34e:	2201      	movs	r2, #1
    f350:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
    f354:	bf00      	nop
    f356:	3708      	adds	r7, #8
    f358:	46bd      	mov	sp, r7
    f35a:	bd80      	pop	{r7, pc}
    f35c:	0000f1b5 	.word	0x0000f1b5
    f360:	0000f95d 	.word	0x0000f95d

0000f364 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    f364:	b580      	push	{r7, lr}
    f366:	b084      	sub	sp, #16
    f368:	af00      	add	r7, sp, #0
    f36a:	6078      	str	r0, [r7, #4]
    f36c:	460b      	mov	r3, r1
    f36e:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    f370:	78fb      	ldrb	r3, [r7, #3]
    f372:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    f376:	2b00      	cmp	r3, #0
    f378:	dd0c      	ble.n	f394 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
    f37a:	78fb      	ldrb	r3, [r7, #3]
    f37c:	43db      	mvns	r3, r3
    f37e:	009b      	lsls	r3, r3, #2
    f380:	2b00      	cmp	r3, #0
    f382:	da00      	bge.n	f386 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
    f384:	33ff      	adds	r3, #255	; 0xff
    f386:	121b      	asrs	r3, r3, #8
    f388:	461a      	mov	r2, r3
    f38a:	4b10      	ldr	r3, [pc, #64]	; (f3cc <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    f38c:	4610      	mov	r0, r2
    f38e:	4798      	blx	r3
    f390:	4603      	mov	r3, r0
    f392:	e00b      	b.n	f3ac <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
    f394:	78fb      	ldrb	r3, [r7, #3]
    f396:	3bff      	subs	r3, #255	; 0xff
    f398:	009b      	lsls	r3, r3, #2
    f39a:	2b00      	cmp	r3, #0
    f39c:	da00      	bge.n	f3a0 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    f39e:	33ff      	adds	r3, #255	; 0xff
    f3a0:	121b      	asrs	r3, r3, #8
    f3a2:	461a      	mov	r2, r3
    f3a4:	4b09      	ldr	r3, [pc, #36]	; (f3cc <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    f3a6:	4610      	mov	r0, r2
    f3a8:	4798      	blx	r3
    f3aa:	4603      	mov	r3, r0
    f3ac:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    f3ae:	4b08      	ldr	r3, [pc, #32]	; (f3d0 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
    f3b0:	68f8      	ldr	r0, [r7, #12]
    f3b2:	4798      	blx	r3
    f3b4:	4603      	mov	r3, r0
    f3b6:	b2da      	uxtb	r2, r3
    f3b8:	687b      	ldr	r3, [r7, #4]
    f3ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return tolerance;
    f3be:	687b      	ldr	r3, [r7, #4]
    f3c0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
    f3c4:	4618      	mov	r0, r3
    f3c6:	3710      	adds	r7, #16
    f3c8:	46bd      	mov	sp, r7
    f3ca:	bd80      	pop	{r7, pc}
    f3cc:	00011abd 	.word	0x00011abd
    f3d0:	00011b65 	.word	0x00011b65

0000f3d4 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    f3d4:	b580      	push	{r7, lr}
    f3d6:	b082      	sub	sp, #8
    f3d8:	af00      	add	r7, sp, #0
    f3da:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    f3dc:	687b      	ldr	r3, [r7, #4]
    f3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f3e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    f3e6:	2b00      	cmp	r3, #0
    f3e8:	d009      	beq.n	f3fe <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
    f3ea:	687b      	ldr	r3, [r7, #4]
    f3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f3f0:	2100      	movs	r1, #0
    f3f2:	4618      	mov	r0, r3
    f3f4:	4b0a      	ldr	r3, [pc, #40]	; (f420 <_ZN22FlapperValveController10StartMotorEv+0x4c>)
    f3f6:	4798      	blx	r3
		delay_ms(10);
    f3f8:	200a      	movs	r0, #10
    f3fa:	4b0a      	ldr	r3, [pc, #40]	; (f424 <_ZN22FlapperValveController10StartMotorEv+0x50>)
    f3fc:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
    f3fe:	687b      	ldr	r3, [r7, #4]
    f400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f404:	2101      	movs	r1, #1
    f406:	4618      	mov	r0, r3
    f408:	4b05      	ldr	r3, [pc, #20]	; (f420 <_ZN22FlapperValveController10StartMotorEv+0x4c>)
    f40a:	4798      	blx	r3
	flapperValveIsMoving=true;
    f40c:	687b      	ldr	r3, [r7, #4]
    f40e:	2201      	movs	r2, #1
    f410:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
    f414:	2300      	movs	r3, #0
}
    f416:	4618      	mov	r0, r3
    f418:	3708      	adds	r7, #8
    f41a:	46bd      	mov	sp, r7
    f41c:	bd80      	pop	{r7, pc}
    f41e:	bf00      	nop
    f420:	0000fda5 	.word	0x0000fda5
    f424:	000020e5 	.word	0x000020e5

0000f428 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    f428:	b580      	push	{r7, lr}
    f42a:	b082      	sub	sp, #8
    f42c:	af00      	add	r7, sp, #0
    f42e:	6078      	str	r0, [r7, #4]
	StopMotor();
    f430:	6878      	ldr	r0, [r7, #4]
    f432:	4b0d      	ldr	r3, [pc, #52]	; (f468 <_ZN22FlapperValveController15StopControllingEv+0x40>)
    f434:	4798      	blx	r3
	timeoutKeepControlling=false;
    f436:	687b      	ldr	r3, [r7, #4]
    f438:	2200      	movs	r2, #0
    f43a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	timeoutFlapperValveController=false;
    f43e:	687b      	ldr	r3, [r7, #4]
    f440:	2200      	movs	r2, #0
    f442:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	isControlling=false;
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	2200      	movs	r2, #0
    f44a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	keepControlling=false;
    f44e:	687b      	ldr	r3, [r7, #4]
    f450:	2200      	movs	r2, #0
    f452:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	controllerEnabled=false;
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	2200      	movs	r2, #0
    f45a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	return 0;
    f45e:	2300      	movs	r3, #0
}
    f460:	4618      	mov	r0, r3
    f462:	3708      	adds	r7, #8
    f464:	46bd      	mov	sp, r7
    f466:	bd80      	pop	{r7, pc}
    f468:	0000f1b5 	.word	0x0000f1b5

0000f46c <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    f46c:	b580      	push	{r7, lr}
    f46e:	b082      	sub	sp, #8
    f470:	af00      	add	r7, sp, #0
    f472:	6078      	str	r0, [r7, #4]
    f474:	460b      	mov	r3, r1
    f476:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    f478:	78fb      	ldrb	r3, [r7, #3]
    f47a:	4619      	mov	r1, r3
    f47c:	6878      	ldr	r0, [r7, #4]
    f47e:	4b2b      	ldr	r3, [pc, #172]	; (f52c <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    f480:	4798      	blx	r3
    f482:	4603      	mov	r3, r0
    f484:	461a      	mov	r2, r3
    f486:	687b      	ldr	r3, [r7, #4]
    f488:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
    f48c:	687b      	ldr	r3, [r7, #4]
    f48e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
    f492:	4619      	mov	r1, r3
    f494:	6878      	ldr	r0, [r7, #4]
    f496:	4b26      	ldr	r3, [pc, #152]	; (f530 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    f498:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    f49a:	687b      	ldr	r3, [r7, #4]
    f49c:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
    f4a0:	4b24      	ldr	r3, [pc, #144]	; (f534 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
    f4a2:	4610      	mov	r0, r2
    f4a4:	4798      	blx	r3
    f4a6:	4602      	mov	r2, r0
    f4a8:	687b      	ldr	r3, [r7, #4]
    f4aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
    f4ae:	687b      	ldr	r3, [r7, #4]
    f4b0:	2200      	movs	r2, #0
    f4b2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
    f4b6:	687b      	ldr	r3, [r7, #4]
    f4b8:	2200      	movs	r2, #0
    f4ba:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
    f4be:	687b      	ldr	r3, [r7, #4]
    f4c0:	2200      	movs	r2, #0
    f4c2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
    f4c6:	687b      	ldr	r3, [r7, #4]
    f4c8:	2201      	movs	r2, #1
    f4ca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
    f4ce:	687b      	ldr	r3, [r7, #4]
    f4d0:	2200      	movs	r2, #0
    f4d2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
    f4d6:	687b      	ldr	r3, [r7, #4]
    f4d8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f4dc:	2b00      	cmp	r3, #0
    f4de:	d106      	bne.n	f4ee <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    f4e0:	f242 7210 	movw	r2, #10000	; 0x2710
    f4e4:	4914      	ldr	r1, [pc, #80]	; (f538 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
    f4e6:	4815      	ldr	r0, [pc, #84]	; (f53c <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    f4e8:	4b15      	ldr	r3, [pc, #84]	; (f540 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    f4ea:	4798      	blx	r3
    f4ec:	e005      	b.n	f4fa <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    f4ee:	f242 7210 	movw	r2, #10000	; 0x2710
    f4f2:	4914      	ldr	r1, [pc, #80]	; (f544 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
    f4f4:	4811      	ldr	r0, [pc, #68]	; (f53c <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    f4f6:	4b12      	ldr	r3, [pc, #72]	; (f540 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    f4f8:	4798      	blx	r3
		}
		
		isControlling=true;
    f4fa:	687b      	ldr	r3, [r7, #4]
    f4fc:	2201      	movs	r2, #1
    f4fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
    f502:	6878      	ldr	r0, [r7, #4]
    f504:	4b10      	ldr	r3, [pc, #64]	; (f548 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
    f506:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    f508:	6878      	ldr	r0, [r7, #4]
    f50a:	4b10      	ldr	r3, [pc, #64]	; (f54c <_ZN22FlapperValveController16StartControllingEh+0xe0>)
    f50c:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    f50e:	687b      	ldr	r3, [r7, #4]
    f510:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    f514:	b2db      	uxtb	r3, r3
    f516:	2b00      	cmp	r3, #0
    f518:	d003      	beq.n	f522 <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
    f51a:	687b      	ldr	r3, [r7, #4]
    f51c:	2201      	movs	r2, #1
    f51e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
    f522:	2300      	movs	r3, #0
	
}
    f524:	4618      	mov	r0, r3
    f526:	3708      	adds	r7, #8
    f528:	46bd      	mov	sp, r7
    f52a:	bd80      	pop	{r7, pc}
    f52c:	0000f551 	.word	0x0000f551
    f530:	0000f365 	.word	0x0000f365
    f534:	00011ab5 	.word	0x00011ab5
    f538:	0000e721 	.word	0x0000e721
    f53c:	20008bdc 	.word	0x20008bdc
    f540:	0000d4ed 	.word	0x0000d4ed
    f544:	0000e74d 	.word	0x0000e74d
    f548:	0000e99d 	.word	0x0000e99d
    f54c:	0000ed75 	.word	0x0000ed75

0000f550 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    f550:	b580      	push	{r7, lr}
    f552:	b082      	sub	sp, #8
    f554:	af00      	add	r7, sp, #0
    f556:	6078      	str	r0, [r7, #4]
    f558:	460b      	mov	r3, r1
    f55a:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    f55c:	6878      	ldr	r0, [r7, #4]
    f55e:	4b2a      	ldr	r3, [pc, #168]	; (f608 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
    f560:	4798      	blx	r3
    f562:	4603      	mov	r3, r0
    f564:	2b00      	cmp	r3, #0
    f566:	d004      	beq.n	f572 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    f568:	687b      	ldr	r3, [r7, #4]
    f56a:	78fa      	ldrb	r2, [r7, #3]
    f56c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
    f570:	e043      	b.n	f5fa <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
    f572:	687b      	ldr	r3, [r7, #4]
    f574:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    f578:	2b00      	cmp	r3, #0
    f57a:	d01f      	beq.n	f5bc <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    f57c:	687b      	ldr	r3, [r7, #4]
    f57e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    f582:	43db      	mvns	r3, r3
    f584:	b2da      	uxtb	r2, r3
    f586:	687b      	ldr	r3, [r7, #4]
    f588:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
    f58c:	78fb      	ldrb	r3, [r7, #3]
    f58e:	687a      	ldr	r2, [r7, #4]
    f590:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
    f594:	4293      	cmp	r3, r2
    f596:	dd0c      	ble.n	f5b2 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    f598:	687b      	ldr	r3, [r7, #4]
    f59a:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
    f59e:	687b      	ldr	r3, [r7, #4]
    f5a0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
    f5a4:	687b      	ldr	r3, [r7, #4]
    f5a6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
    f5aa:	687b      	ldr	r3, [r7, #4]
    f5ac:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    f5b0:	e023      	b.n	f5fa <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    f5b2:	687b      	ldr	r3, [r7, #4]
    f5b4:	78fa      	ldrb	r2, [r7, #3]
    f5b6:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
    f5ba:	e01e      	b.n	f5fa <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    f5bc:	687b      	ldr	r3, [r7, #4]
    f5be:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    f5c2:	43db      	mvns	r3, r3
    f5c4:	b2da      	uxtb	r2, r3
    f5c6:	687b      	ldr	r3, [r7, #4]
    f5c8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
    f5cc:	78fb      	ldrb	r3, [r7, #3]
    f5ce:	687a      	ldr	r2, [r7, #4]
    f5d0:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
    f5d4:	4293      	cmp	r3, r2
    f5d6:	dd0c      	ble.n	f5f2 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
    f5de:	687b      	ldr	r3, [r7, #4]
    f5e0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
    f5e4:	687b      	ldr	r3, [r7, #4]
    f5e6:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
    f5ea:	687b      	ldr	r3, [r7, #4]
    f5ec:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    f5f0:	e003      	b.n	f5fa <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    f5f2:	687b      	ldr	r3, [r7, #4]
    f5f4:	78fa      	ldrb	r2, [r7, #3]
    f5f6:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
    f5fa:	687b      	ldr	r3, [r7, #4]
    f5fc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
    f600:	4618      	mov	r0, r3
    f602:	3708      	adds	r7, #8
    f604:	46bd      	mov	sp, r7
    f606:	bd80      	pop	{r7, pc}
    f608:	0000f16d 	.word	0x0000f16d

0000f60c <_ZN22FlapperValveController15KeepControllingEh>:
	
uint8_t	FlapperValveController::StartControlling(void){
	return	StartControlling(currentPosition);
	
}
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    f60c:	b580      	push	{r7, lr}
    f60e:	b082      	sub	sp, #8
    f610:	af00      	add	r7, sp, #0
    f612:	6078      	str	r0, [r7, #4]
    f614:	460b      	mov	r3, r1
    f616:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    f618:	687b      	ldr	r3, [r7, #4]
    f61a:	2200      	movs	r2, #0
    f61c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    f620:	687b      	ldr	r3, [r7, #4]
    f622:	2201      	movs	r2, #1
    f624:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
    f628:	6878      	ldr	r0, [r7, #4]
    f62a:	4b05      	ldr	r3, [pc, #20]	; (f640 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    f62c:	4798      	blx	r3
		keepControlling=false;
    f62e:	687b      	ldr	r3, [r7, #4]
    f630:	2200      	movs	r2, #0
    f632:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
    f636:	2300      	movs	r3, #0
	
}
    f638:	4618      	mov	r0, r3
    f63a:	3708      	adds	r7, #8
    f63c:	46bd      	mov	sp, r7
    f63e:	bd80      	pop	{r7, pc}
    f640:	0000e99d 	.word	0x0000e99d

0000f644 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    f644:	b590      	push	{r4, r7, lr}
    f646:	b085      	sub	sp, #20
    f648:	af00      	add	r7, sp, #0
    f64a:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
    f64c:	68fb      	ldr	r3, [r7, #12]
    f64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f652:	4618      	mov	r0, r3
    f654:	4b36      	ldr	r3, [pc, #216]	; (f730 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
    f656:	4798      	blx	r3
    f658:	4603      	mov	r3, r0
    f65a:	461a      	mov	r2, r3
    f65c:	68fb      	ldr	r3, [r7, #12]
    f65e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
    f662:	68fb      	ldr	r3, [r7, #12]
    f664:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
    f668:	68fb      	ldr	r3, [r7, #12]
    f66a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
    f66e:	68fb      	ldr	r3, [r7, #12]
    f670:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
    f674:	68fb      	ldr	r3, [r7, #12]
    f676:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
    f67a:	68fb      	ldr	r3, [r7, #12]
    f67c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    f680:	68fc      	ldr	r4, [r7, #12]
    f682:	463b      	mov	r3, r7
    f684:	4611      	mov	r1, r2
    f686:	4618      	mov	r0, r3
    f688:	4b2a      	ldr	r3, [pc, #168]	; (f734 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
    f68a:	4798      	blx	r3
    f68c:	f104 0384 	add.w	r3, r4, #132	; 0x84
    f690:	463a      	mov	r2, r7
    f692:	6810      	ldr	r0, [r2, #0]
    f694:	6018      	str	r0, [r3, #0]
    f696:	8892      	ldrh	r2, [r2, #4]
    f698:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
    f69a:	68fb      	ldr	r3, [r7, #12]
    f69c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    f6a0:	68fc      	ldr	r4, [r7, #12]
    f6a2:	463b      	mov	r3, r7
    f6a4:	4611      	mov	r1, r2
    f6a6:	4618      	mov	r0, r3
    f6a8:	4b23      	ldr	r3, [pc, #140]	; (f738 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
    f6aa:	4798      	blx	r3
    f6ac:	f104 038a 	add.w	r3, r4, #138	; 0x8a
    f6b0:	463a      	mov	r2, r7
    f6b2:	6811      	ldr	r1, [r2, #0]
    f6b4:	6852      	ldr	r2, [r2, #4]
    f6b6:	6019      	str	r1, [r3, #0]
    f6b8:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
    f6ba:	68fb      	ldr	r3, [r7, #12]
    f6bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f6c0:	b2da      	uxtb	r2, r3
    f6c2:	68fb      	ldr	r3, [r7, #12]
    f6c4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
    f6c8:	68fb      	ldr	r3, [r7, #12]
    f6ca:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
    f6ce:	68fb      	ldr	r3, [r7, #12]
    f6d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    f6da:	68fb      	ldr	r3, [r7, #12]
    f6dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
    f6e0:	68fb      	ldr	r3, [r7, #12]
    f6e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f6e6:	b2da      	uxtb	r2, r3
    f6e8:	68fb      	ldr	r3, [r7, #12]
    f6ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
    f6ee:	68fb      	ldr	r3, [r7, #12]
    f6f0:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    f6f4:	2b00      	cmp	r3, #0
    f6f6:	d008      	beq.n	f70a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    f6f8:	68fb      	ldr	r3, [r7, #12]
    f6fa:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
    f6fe:	43db      	mvns	r3, r3
    f700:	b2da      	uxtb	r2, r3
    f702:	68fb      	ldr	r3, [r7, #12]
    f704:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    f708:	e007      	b.n	f71a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
    f70a:	68fb      	ldr	r3, [r7, #12]
    f70c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    f710:	43db      	mvns	r3, r3
    f712:	b2da      	uxtb	r2, r3
    f714:	68fb      	ldr	r3, [r7, #12]
    f716:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
    f71a:	68fb      	ldr	r3, [r7, #12]
    f71c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
    f720:	4619      	mov	r1, r3
    f722:	68f8      	ldr	r0, [r7, #12]
    f724:	4b05      	ldr	r3, [pc, #20]	; (f73c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
    f726:	4798      	blx	r3
}
    f728:	bf00      	nop
    f72a:	3714      	adds	r7, #20
    f72c:	46bd      	mov	sp, r7
    f72e:	bd90      	pop	{r4, r7, pc}
    f730:	0000ffc5 	.word	0x0000ffc5
    f734:	0000fd49 	.word	0x0000fd49
    f738:	0000fcf1 	.word	0x0000fcf1
    f73c:	0000f741 	.word	0x0000f741

0000f740 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
    f740:	b480      	push	{r7}
    f742:	b085      	sub	sp, #20
    f744:	af00      	add	r7, sp, #0
    f746:	6078      	str	r0, [r7, #4]
    f748:	460b      	mov	r3, r1
    f74a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    f74c:	2300      	movs	r3, #0
    f74e:	73fb      	strb	r3, [r7, #15]
    f750:	7bfb      	ldrb	r3, [r7, #15]
    f752:	2b0e      	cmp	r3, #14
    f754:	dc1d      	bgt.n	f792 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
    f756:	687b      	ldr	r3, [r7, #4]
    f758:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f75c:	687a      	ldr	r2, [r7, #4]
    f75e:	3332      	adds	r3, #50	; 0x32
    f760:	009b      	lsls	r3, r3, #2
    f762:	4413      	add	r3, r2
    f764:	685b      	ldr	r3, [r3, #4]
    f766:	7bfa      	ldrb	r2, [r7, #15]
    f768:	f1c2 020f 	rsb	r2, r2, #15
    f76c:	441a      	add	r2, r3
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f774:	6879      	ldr	r1, [r7, #4]
    f776:	3332      	adds	r3, #50	; 0x32
    f778:	009b      	lsls	r3, r3, #2
    f77a:	440b      	add	r3, r1
    f77c:	685b      	ldr	r3, [r3, #4]
    f77e:	7bf9      	ldrb	r1, [r7, #15]
    f780:	f1c1 010e 	rsb	r1, r1, #14
    f784:	440b      	add	r3, r1
    f786:	781b      	ldrb	r3, [r3, #0]
    f788:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    f78a:	7bfb      	ldrb	r3, [r7, #15]
    f78c:	3301      	adds	r3, #1
    f78e:	73fb      	strb	r3, [r7, #15]
    f790:	e7de      	b.n	f750 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
    f792:	687b      	ldr	r3, [r7, #4]
    f794:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f798:	687a      	ldr	r2, [r7, #4]
    f79a:	3332      	adds	r3, #50	; 0x32
    f79c:	009b      	lsls	r3, r3, #2
    f79e:	4413      	add	r3, r2
    f7a0:	685b      	ldr	r3, [r3, #4]
    f7a2:	78fa      	ldrb	r2, [r7, #3]
    f7a4:	701a      	strb	r2, [r3, #0]
}
    f7a6:	bf00      	nop
    f7a8:	3714      	adds	r7, #20
    f7aa:	46bd      	mov	sp, r7
    f7ac:	bc80      	pop	{r7}
    f7ae:	4770      	bx	lr

0000f7b0 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
    f7b0:	b580      	push	{r7, lr}
    f7b2:	b084      	sub	sp, #16
    f7b4:	af00      	add	r7, sp, #0
    f7b6:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
    f7b8:	23b4      	movs	r3, #180	; 0xb4
    f7ba:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	4a59      	ldr	r2, [pc, #356]	; (f924 <_ZN22FlapperValveController8SelftestEv+0x174>)
    f7c0:	33c7      	adds	r3, #199	; 0xc7
    f7c2:	8812      	ldrh	r2, [r2, #0]
    f7c4:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
    f7c6:	6878      	ldr	r0, [r7, #4]
    f7c8:	4b57      	ldr	r3, [pc, #348]	; (f928 <_ZN22FlapperValveController8SelftestEv+0x178>)
    f7ca:	4798      	blx	r3
	singlefv->SetEnable(false);
    f7cc:	687b      	ldr	r3, [r7, #4]
    f7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f7d2:	2100      	movs	r1, #0
    f7d4:	4618      	mov	r0, r3
    f7d6:	4b55      	ldr	r3, [pc, #340]	; (f92c <_ZN22FlapperValveController8SelftestEv+0x17c>)
    f7d8:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
    f7da:	687b      	ldr	r3, [r7, #4]
    f7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f7e0:	2100      	movs	r1, #0
    f7e2:	4618      	mov	r0, r3
    f7e4:	4b52      	ldr	r3, [pc, #328]	; (f930 <_ZN22FlapperValveController8SelftestEv+0x180>)
    f7e6:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
    f7e8:	687b      	ldr	r3, [r7, #4]
    f7ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f7ee:	2100      	movs	r1, #0
    f7f0:	4618      	mov	r0, r3
    f7f2:	4b50      	ldr	r3, [pc, #320]	; (f934 <_ZN22FlapperValveController8SelftestEv+0x184>)
    f7f4:	4798      	blx	r3
	delay_ms(10);
    f7f6:	200a      	movs	r0, #10
    f7f8:	4b4f      	ldr	r3, [pc, #316]	; (f938 <_ZN22FlapperValveController8SelftestEv+0x188>)
    f7fa:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
    f7fc:	687b      	ldr	r3, [r7, #4]
    f7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f802:	2101      	movs	r1, #1
    f804:	4618      	mov	r0, r3
    f806:	4b4b      	ldr	r3, [pc, #300]	; (f934 <_ZN22FlapperValveController8SelftestEv+0x184>)
    f808:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
    f80a:	687b      	ldr	r3, [r7, #4]
    f80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f810:	7bba      	ldrb	r2, [r7, #14]
    f812:	4611      	mov	r1, r2
    f814:	4618      	mov	r0, r3
    f816:	4b49      	ldr	r3, [pc, #292]	; (f93c <_ZN22FlapperValveController8SelftestEv+0x18c>)
    f818:	4798      	blx	r3
	singlefv->SetDirection(false);
    f81a:	687b      	ldr	r3, [r7, #4]
    f81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f820:	2100      	movs	r1, #0
    f822:	4618      	mov	r0, r3
    f824:	4b46      	ldr	r3, [pc, #280]	; (f940 <_ZN22FlapperValveController8SelftestEv+0x190>)
    f826:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f82e:	4618      	mov	r0, r3
    f830:	4b44      	ldr	r3, [pc, #272]	; (f944 <_ZN22FlapperValveController8SelftestEv+0x194>)
    f832:	4798      	blx	r3
    f834:	4603      	mov	r3, r0
    f836:	461a      	mov	r2, r3
    f838:	7bbb      	ldrb	r3, [r7, #14]
    f83a:	429a      	cmp	r2, r3
    f83c:	bfcc      	ite	gt
    f83e:	2301      	movgt	r3, #1
    f840:	2300      	movle	r3, #0
    f842:	b2db      	uxtb	r3, r3
    f844:	2b00      	cmp	r3, #0
    f846:	d007      	beq.n	f858 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f84e:	2101      	movs	r1, #1
    f850:	4618      	mov	r0, r3
    f852:	4b3b      	ldr	r3, [pc, #236]	; (f940 <_ZN22FlapperValveController8SelftestEv+0x190>)
    f854:	4798      	blx	r3
    f856:	e006      	b.n	f866 <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
    f858:	687b      	ldr	r3, [r7, #4]
    f85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f85e:	2100      	movs	r1, #0
    f860:	4618      	mov	r0, r3
    f862:	4b37      	ldr	r3, [pc, #220]	; (f940 <_ZN22FlapperValveController8SelftestEv+0x190>)
    f864:	4798      	blx	r3
	}
	
		if (valve_ID==0)
    f866:	687b      	ldr	r3, [r7, #4]
    f868:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f86c:	2b00      	cmp	r3, #0
    f86e:	d106      	bne.n	f87e <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    f870:	f242 7210 	movw	r2, #10000	; 0x2710
    f874:	4934      	ldr	r1, [pc, #208]	; (f948 <_ZN22FlapperValveController8SelftestEv+0x198>)
    f876:	4835      	ldr	r0, [pc, #212]	; (f94c <_ZN22FlapperValveController8SelftestEv+0x19c>)
    f878:	4b35      	ldr	r3, [pc, #212]	; (f950 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
    f87a:	4798      	blx	r3
    f87c:	e005      	b.n	f88a <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    f87e:	f242 7210 	movw	r2, #10000	; 0x2710
    f882:	4934      	ldr	r1, [pc, #208]	; (f954 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
    f884:	4831      	ldr	r0, [pc, #196]	; (f94c <_ZN22FlapperValveController8SelftestEv+0x19c>)
    f886:	4b32      	ldr	r3, [pc, #200]	; (f950 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
    f888:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
    f88a:	687b      	ldr	r3, [r7, #4]
    f88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f890:	2101      	movs	r1, #1
    f892:	4618      	mov	r0, r3
    f894:	4b25      	ldr	r3, [pc, #148]	; (f92c <_ZN22FlapperValveController8SelftestEv+0x17c>)
    f896:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f89e:	4618      	mov	r0, r3
    f8a0:	4b28      	ldr	r3, [pc, #160]	; (f944 <_ZN22FlapperValveController8SelftestEv+0x194>)
    f8a2:	4798      	blx	r3
    f8a4:	4603      	mov	r3, r0
    f8a6:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
    f8a8:	687b      	ldr	r3, [r7, #4]
    f8aa:	2200      	movs	r2, #0
    f8ac:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
    f8b0:	7bfa      	ldrb	r2, [r7, #15]
    f8b2:	7bbb      	ldrb	r3, [r7, #14]
    f8b4:	1ad3      	subs	r3, r2, r3
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	bfb8      	it	lt
    f8ba:	425b      	neglt	r3, r3
    f8bc:	2b0c      	cmp	r3, #12
    f8be:	bfcc      	ite	gt
    f8c0:	2301      	movgt	r3, #1
    f8c2:	2300      	movle	r3, #0
    f8c4:	b2db      	uxtb	r3, r3
    f8c6:	461a      	mov	r2, r3
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f8ce:	b2db      	uxtb	r3, r3
    f8d0:	f083 0301 	eor.w	r3, r3, #1
    f8d4:	b2db      	uxtb	r3, r3
    f8d6:	4013      	ands	r3, r2
    f8d8:	2b00      	cmp	r3, #0
    f8da:	bf14      	ite	ne
    f8dc:	2301      	movne	r3, #1
    f8de:	2300      	moveq	r3, #0
    f8e0:	b2db      	uxtb	r3, r3
    f8e2:	2b00      	cmp	r3, #0
    f8e4:	d008      	beq.n	f8f8 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
    f8e6:	687b      	ldr	r3, [r7, #4]
    f8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f8ec:	4618      	mov	r0, r3
    f8ee:	4b15      	ldr	r3, [pc, #84]	; (f944 <_ZN22FlapperValveController8SelftestEv+0x194>)
    f8f0:	4798      	blx	r3
    f8f2:	4603      	mov	r3, r0
    f8f4:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
    f8f6:	e7db      	b.n	f8b0 <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
    f8f8:	6878      	ldr	r0, [r7, #4]
    f8fa:	4b17      	ldr	r3, [pc, #92]	; (f958 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
    f8fc:	4798      	blx	r3

	singlefv->SetEnable(false);
    f8fe:	687b      	ldr	r3, [r7, #4]
    f900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f904:	2100      	movs	r1, #0
    f906:	4618      	mov	r0, r3
    f908:	4b08      	ldr	r3, [pc, #32]	; (f92c <_ZN22FlapperValveController8SelftestEv+0x17c>)
    f90a:	4798      	blx	r3
	return !timeoutFlapperValveController;
    f90c:	687b      	ldr	r3, [r7, #4]
    f90e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f912:	b2db      	uxtb	r3, r3
    f914:	f083 0301 	eor.w	r3, r3, #1
    f918:	b2db      	uxtb	r3, r3
}
    f91a:	4618      	mov	r0, r3
    f91c:	3710      	adds	r7, #16
    f91e:	46bd      	mov	sp, r7
    f920:	bd80      	pop	{r7, pc}
    f922:	bf00      	nop
    f924:	00012548 	.word	0x00012548
    f928:	0000f645 	.word	0x0000f645
    f92c:	0000fda5 	.word	0x0000fda5
    f930:	0000ff15 	.word	0x0000ff15
    f934:	0000fe9d 	.word	0x0000fe9d
    f938:	000020e5 	.word	0x000020e5
    f93c:	0000ff8d 	.word	0x0000ff8d
    f940:	0000fe25 	.word	0x0000fe25
    f944:	0000ffc5 	.word	0x0000ffc5
    f948:	0000e721 	.word	0x0000e721
    f94c:	20008bdc 	.word	0x20008bdc
    f950:	0000d4ed 	.word	0x0000d4ed
    f954:	0000e74d 	.word	0x0000e74d
    f958:	0000f95d 	.word	0x0000f95d

0000f95c <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
    f95c:	b580      	push	{r7, lr}
    f95e:	b082      	sub	sp, #8
    f960:	af00      	add	r7, sp, #0
    f962:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
    f964:	687b      	ldr	r3, [r7, #4]
    f966:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
    f96a:	2b00      	cmp	r3, #0
    f96c:	d104      	bne.n	f978 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    f96e:	4906      	ldr	r1, [pc, #24]	; (f988 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
    f970:	4806      	ldr	r0, [pc, #24]	; (f98c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
    f972:	4b07      	ldr	r3, [pc, #28]	; (f990 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
    f974:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
    f976:	e003      	b.n	f980 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    f978:	4906      	ldr	r1, [pc, #24]	; (f994 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
    f97a:	4804      	ldr	r0, [pc, #16]	; (f98c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
    f97c:	4b04      	ldr	r3, [pc, #16]	; (f990 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
    f97e:	4798      	blx	r3
}
    f980:	bf00      	nop
    f982:	3708      	adds	r7, #8
    f984:	46bd      	mov	sp, r7
    f986:	bd80      	pop	{r7, pc}
    f988:	0000e721 	.word	0x0000e721
    f98c:	20008bdc 	.word	0x20008bdc
    f990:	0000d495 	.word	0x0000d495
    f994:	0000e74d 	.word	0x0000e74d

0000f998 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
    f998:	b590      	push	{r4, r7, lr}
    f99a:	b083      	sub	sp, #12
    f99c:	af00      	add	r7, sp, #0
    f99e:	6078      	str	r0, [r7, #4]
    f9a0:	4c05      	ldr	r4, [pc, #20]	; (f9b8 <__tcf_0+0x20>)
    f9a2:	4b06      	ldr	r3, [pc, #24]	; (f9bc <__tcf_0+0x24>)
    f9a4:	429c      	cmp	r4, r3
    f9a6:	d004      	beq.n	f9b2 <__tcf_0+0x1a>
    f9a8:	3c78      	subs	r4, #120	; 0x78
    f9aa:	4620      	mov	r0, r4
    f9ac:	4b04      	ldr	r3, [pc, #16]	; (f9c0 <__tcf_0+0x28>)
    f9ae:	4798      	blx	r3
    f9b0:	e7f7      	b.n	f9a2 <__tcf_0+0xa>
    f9b2:	370c      	adds	r7, #12
    f9b4:	46bd      	mov	sp, r7
    f9b6:	bd90      	pop	{r4, r7, pc}
    f9b8:	20008db4 	.word	0x20008db4
    f9bc:	20008cc4 	.word	0x20008cc4
    f9c0:	0000fb91 	.word	0x0000fb91

0000f9c4 <_Z41__static_initialization_and_destruction_0ii>:

    f9c4:	b5b0      	push	{r4, r5, r7, lr}
    f9c6:	b082      	sub	sp, #8
    f9c8:	af00      	add	r7, sp, #0
    f9ca:	6078      	str	r0, [r7, #4]
    f9cc:	6039      	str	r1, [r7, #0]
    f9ce:	687b      	ldr	r3, [r7, #4]
    f9d0:	2b01      	cmp	r3, #1
    f9d2:	d16d      	bne.n	fab0 <_Z41__static_initialization_and_destruction_0ii+0xec>
    f9d4:	683b      	ldr	r3, [r7, #0]
    f9d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f9da:	4293      	cmp	r3, r2
    f9dc:	d168      	bne.n	fab0 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f9de:	4936      	ldr	r1, [pc, #216]	; (fab8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f9e0:	4836      	ldr	r0, [pc, #216]	; (fabc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9e2:	4b37      	ldr	r3, [pc, #220]	; (fac0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9e4:	4798      	blx	r3
    f9e6:	4a37      	ldr	r2, [pc, #220]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f9e8:	4937      	ldr	r1, [pc, #220]	; (fac8 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f9ea:	4834      	ldr	r0, [pc, #208]	; (fabc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9ec:	4b37      	ldr	r3, [pc, #220]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f9ee:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f9f0:	4937      	ldr	r1, [pc, #220]	; (fad0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f9f2:	4838      	ldr	r0, [pc, #224]	; (fad4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f9f4:	4b38      	ldr	r3, [pc, #224]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f9f6:	4798      	blx	r3
    f9f8:	4a32      	ldr	r2, [pc, #200]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f9fa:	4938      	ldr	r1, [pc, #224]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f9fc:	4835      	ldr	r0, [pc, #212]	; (fad4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f9fe:	4b33      	ldr	r3, [pc, #204]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa00:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    fa02:	4937      	ldr	r1, [pc, #220]	; (fae0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    fa04:	4837      	ldr	r0, [pc, #220]	; (fae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    fa06:	4b34      	ldr	r3, [pc, #208]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa08:	4798      	blx	r3
    fa0a:	4a2e      	ldr	r2, [pc, #184]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa0c:	4933      	ldr	r1, [pc, #204]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa0e:	4835      	ldr	r0, [pc, #212]	; (fae4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    fa10:	4b2e      	ldr	r3, [pc, #184]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa12:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    fa14:	4934      	ldr	r1, [pc, #208]	; (fae8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    fa16:	4835      	ldr	r0, [pc, #212]	; (faec <_Z41__static_initialization_and_destruction_0ii+0x128>)
    fa18:	4b2f      	ldr	r3, [pc, #188]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa1a:	4798      	blx	r3
    fa1c:	4a29      	ldr	r2, [pc, #164]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa1e:	492f      	ldr	r1, [pc, #188]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa20:	4832      	ldr	r0, [pc, #200]	; (faec <_Z41__static_initialization_and_destruction_0ii+0x128>)
    fa22:	4b2a      	ldr	r3, [pc, #168]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa24:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    fa26:	4932      	ldr	r1, [pc, #200]	; (faf0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    fa28:	4832      	ldr	r0, [pc, #200]	; (faf4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    fa2a:	4b2b      	ldr	r3, [pc, #172]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa2c:	4798      	blx	r3
    fa2e:	4a25      	ldr	r2, [pc, #148]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa30:	492a      	ldr	r1, [pc, #168]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa32:	4830      	ldr	r0, [pc, #192]	; (faf4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    fa34:	4b25      	ldr	r3, [pc, #148]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa36:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    fa38:	492f      	ldr	r1, [pc, #188]	; (faf8 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    fa3a:	4830      	ldr	r0, [pc, #192]	; (fafc <_Z41__static_initialization_and_destruction_0ii+0x138>)
    fa3c:	4b26      	ldr	r3, [pc, #152]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa3e:	4798      	blx	r3
    fa40:	4a20      	ldr	r2, [pc, #128]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa42:	4926      	ldr	r1, [pc, #152]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa44:	482d      	ldr	r0, [pc, #180]	; (fafc <_Z41__static_initialization_and_destruction_0ii+0x138>)
    fa46:	4b21      	ldr	r3, [pc, #132]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa48:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    fa4a:	492d      	ldr	r1, [pc, #180]	; (fb00 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    fa4c:	482d      	ldr	r0, [pc, #180]	; (fb04 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    fa4e:	4b22      	ldr	r3, [pc, #136]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa50:	4798      	blx	r3
    fa52:	4a1c      	ldr	r2, [pc, #112]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa54:	4921      	ldr	r1, [pc, #132]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa56:	482b      	ldr	r0, [pc, #172]	; (fb04 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    fa58:	4b1c      	ldr	r3, [pc, #112]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa5a:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    fa5c:	492a      	ldr	r1, [pc, #168]	; (fb08 <_Z41__static_initialization_and_destruction_0ii+0x144>)
    fa5e:	482b      	ldr	r0, [pc, #172]	; (fb0c <_Z41__static_initialization_and_destruction_0ii+0x148>)
    fa60:	4b1d      	ldr	r3, [pc, #116]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa62:	4798      	blx	r3
    fa64:	4a17      	ldr	r2, [pc, #92]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa66:	491d      	ldr	r1, [pc, #116]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa68:	4828      	ldr	r0, [pc, #160]	; (fb0c <_Z41__static_initialization_and_destruction_0ii+0x148>)
    fa6a:	4b18      	ldr	r3, [pc, #96]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa6c:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    fa6e:	4928      	ldr	r1, [pc, #160]	; (fb10 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
    fa70:	4828      	ldr	r0, [pc, #160]	; (fb14 <_Z41__static_initialization_and_destruction_0ii+0x150>)
    fa72:	4b19      	ldr	r3, [pc, #100]	; (fad8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    fa74:	4798      	blx	r3
    fa76:	4a13      	ldr	r2, [pc, #76]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa78:	4918      	ldr	r1, [pc, #96]	; (fadc <_Z41__static_initialization_and_destruction_0ii+0x118>)
    fa7a:	4826      	ldr	r0, [pc, #152]	; (fb14 <_Z41__static_initialization_and_destruction_0ii+0x150>)
    fa7c:	4b13      	ldr	r3, [pc, #76]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa7e:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
    fa80:	4b25      	ldr	r3, [pc, #148]	; (fb18 <_Z41__static_initialization_and_destruction_0ii+0x154>)
    fa82:	2401      	movs	r4, #1
    fa84:	461d      	mov	r5, r3
    fa86:	2c00      	cmp	r4, #0
    fa88:	db05      	blt.n	fa96 <_Z41__static_initialization_and_destruction_0ii+0xd2>
    fa8a:	4628      	mov	r0, r5
    fa8c:	4b23      	ldr	r3, [pc, #140]	; (fb1c <_Z41__static_initialization_and_destruction_0ii+0x158>)
    fa8e:	4798      	blx	r3
    fa90:	3578      	adds	r5, #120	; 0x78
    fa92:	3c01      	subs	r4, #1
    fa94:	e7f7      	b.n	fa86 <_Z41__static_initialization_and_destruction_0ii+0xc2>
    fa96:	4a0b      	ldr	r2, [pc, #44]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    fa98:	4921      	ldr	r1, [pc, #132]	; (fb20 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
    fa9a:	2000      	movs	r0, #0
    fa9c:	4b0b      	ldr	r3, [pc, #44]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    fa9e:	4798      	blx	r3
    faa0:	4820      	ldr	r0, [pc, #128]	; (fb24 <_Z41__static_initialization_and_destruction_0ii+0x160>)
    faa2:	4b21      	ldr	r3, [pc, #132]	; (fb28 <_Z41__static_initialization_and_destruction_0ii+0x164>)
    faa4:	4798      	blx	r3
    faa6:	4a07      	ldr	r2, [pc, #28]	; (fac4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    faa8:	4920      	ldr	r1, [pc, #128]	; (fb2c <_Z41__static_initialization_and_destruction_0ii+0x168>)
    faaa:	481e      	ldr	r0, [pc, #120]	; (fb24 <_Z41__static_initialization_and_destruction_0ii+0x160>)
    faac:	4b07      	ldr	r3, [pc, #28]	; (facc <_Z41__static_initialization_and_destruction_0ii+0x108>)
    faae:	4798      	blx	r3
    fab0:	bf00      	nop
    fab2:	3708      	adds	r7, #8
    fab4:	46bd      	mov	sp, r7
    fab6:	bdb0      	pop	{r4, r5, r7, pc}
    fab8:	2000ae28 	.word	0x2000ae28
    fabc:	20008b84 	.word	0x20008b84
    fac0:	0000d0fd 	.word	0x0000d0fd
    fac4:	20000000 	.word	0x20000000
    fac8:	0000d119 	.word	0x0000d119
    facc:	0001193d 	.word	0x0001193d
    fad0:	2000acf8 	.word	0x2000acf8
    fad4:	20008b9c 	.word	0x20008b9c
    fad8:	0000d2b9 	.word	0x0000d2b9
    fadc:	0000d2f1 	.word	0x0000d2f1
    fae0:	2000ad8c 	.word	0x2000ad8c
    fae4:	20008bbc 	.word	0x20008bbc
    fae8:	2000aeb0 	.word	0x2000aeb0
    faec:	20008bdc 	.word	0x20008bdc
    faf0:	2000adac 	.word	0x2000adac
    faf4:	20008bfc 	.word	0x20008bfc
    faf8:	2000ae70 	.word	0x2000ae70
    fafc:	20008c1c 	.word	0x20008c1c
    fb00:	2000ae90 	.word	0x2000ae90
    fb04:	20008c3c 	.word	0x20008c3c
    fb08:	2000ad68 	.word	0x2000ad68
    fb0c:	20008c5c 	.word	0x20008c5c
    fb10:	2000ae08 	.word	0x2000ae08
    fb14:	20008c7c 	.word	0x20008c7c
    fb18:	20008cc4 	.word	0x20008cc4
    fb1c:	0000fb45 	.word	0x0000fb45
    fb20:	0000f999 	.word	0x0000f999
    fb24:	20008db4 	.word	0x20008db4
    fb28:	0000e7f9 	.word	0x0000e7f9
    fb2c:	0000e885 	.word	0x0000e885

0000fb30 <_GLOBAL__sub_I_ptrFlapperValveController>:
    fb30:	b580      	push	{r7, lr}
    fb32:	af00      	add	r7, sp, #0
    fb34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fb38:	2001      	movs	r0, #1
    fb3a:	4b01      	ldr	r3, [pc, #4]	; (fb40 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    fb3c:	4798      	blx	r3
    fb3e:	bd80      	pop	{r7, pc}
    fb40:	0000f9c5 	.word	0x0000f9c5

0000fb44 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    fb44:	b580      	push	{r7, lr}
    fb46:	b082      	sub	sp, #8
    fb48:	af00      	add	r7, sp, #0
    fb4a:	6078      	str	r0, [r7, #4]
    fb4c:	687b      	ldr	r3, [r7, #4]
    fb4e:	4618      	mov	r0, r3
    fb50:	4b0c      	ldr	r3, [pc, #48]	; (fb84 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
    fb52:	4798      	blx	r3
{
	valveID=0;
    fb54:	687b      	ldr	r3, [r7, #4]
    fb56:	2200      	movs	r2, #0
    fb58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
    fb5c:	687b      	ldr	r3, [r7, #4]
    fb5e:	4a0a      	ldr	r2, [pc, #40]	; (fb88 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
    fb60:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
    fb62:	687b      	ldr	r3, [r7, #4]
    fb64:	2200      	movs	r2, #0
    fb66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
    fb6a:	4a08      	ldr	r2, [pc, #32]	; (fb8c <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
    fb6c:	687b      	ldr	r3, [r7, #4]
    fb6e:	6013      	str	r3, [r2, #0]
	isOK=false;
    fb70:	687b      	ldr	r3, [r7, #4]
    fb72:	2200      	movs	r2, #0
    fb74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
    fb78:	687b      	ldr	r3, [r7, #4]
    fb7a:	4618      	mov	r0, r3
    fb7c:	3708      	adds	r7, #8
    fb7e:	46bd      	mov	sp, r7
    fb80:	bd80      	pop	{r7, pc}
    fb82:	bf00      	nop
    fb84:	000102a5 	.word	0x000102a5
    fb88:	20008fac 	.word	0x20008fac
    fb8c:	20008fa8 	.word	0x20008fa8

0000fb90 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
    fb90:	b580      	push	{r7, lr}
    fb92:	b082      	sub	sp, #8
    fb94:	af00      	add	r7, sp, #0
    fb96:	6078      	str	r0, [r7, #4]
    fb98:	687b      	ldr	r3, [r7, #4]
    fb9a:	4618      	mov	r0, r3
    fb9c:	4b03      	ldr	r3, [pc, #12]	; (fbac <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
    fb9e:	4798      	blx	r3
{
} //~FlapperValve_Class
    fba0:	687b      	ldr	r3, [r7, #4]
    fba2:	4618      	mov	r0, r3
    fba4:	3708      	adds	r7, #8
    fba6:	46bd      	mov	sp, r7
    fba8:	bd80      	pop	{r7, pc}
    fbaa:	bf00      	nop
    fbac:	000102b9 	.word	0x000102b9

0000fbb0 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
    fbb0:	b580      	push	{r7, lr}
    fbb2:	b082      	sub	sp, #8
    fbb4:	af00      	add	r7, sp, #0
    fbb6:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
    fbb8:	687b      	ldr	r3, [r7, #4]
    fbba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fbbc:	7a1b      	ldrb	r3, [r3, #8]
    fbbe:	b2db      	uxtb	r3, r3
    fbc0:	2b00      	cmp	r3, #0
    fbc2:	d104      	bne.n	fbce <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
    fbc4:	687b      	ldr	r3, [r7, #4]
    fbc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fbc8:	4618      	mov	r0, r3
    fbca:	4b19      	ldr	r3, [pc, #100]	; (fc30 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
    fbcc:	4798      	blx	r3
	}
		

		if (i2c->isOK)
    fbce:	687b      	ldr	r3, [r7, #4]
    fbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fbd2:	7a5b      	ldrb	r3, [r3, #9]
    fbd4:	b2db      	uxtb	r3, r3
    fbd6:	2b00      	cmp	r3, #0
    fbd8:	d01b      	beq.n	fc12 <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
    fbda:	687b      	ldr	r3, [r7, #4]
    fbdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    fbe0:	4619      	mov	r1, r3
    fbe2:	6878      	ldr	r0, [r7, #4]
    fbe4:	4b13      	ldr	r3, [pc, #76]	; (fc34 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
    fbe6:	4798      	blx	r3
			expanders[0]->SetPortInput();
    fbe8:	687b      	ldr	r3, [r7, #4]
    fbea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fbec:	4618      	mov	r0, r3
    fbee:	4b12      	ldr	r3, [pc, #72]	; (fc38 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
    fbf0:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
    fbf2:	687b      	ldr	r3, [r7, #4]
    fbf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    fbf6:	2182      	movs	r1, #130	; 0x82
    fbf8:	4618      	mov	r0, r3
    fbfa:	4b10      	ldr	r3, [pc, #64]	; (fc3c <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
    fbfc:	4798      	blx	r3
			expanders[2]->SetPortOutput();
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    fc02:	4618      	mov	r0, r3
    fc04:	4b0e      	ldr	r3, [pc, #56]	; (fc40 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
    fc06:	4798      	blx	r3
			expanders[3]->SetPortInput();
    fc08:	687b      	ldr	r3, [r7, #4]
    fc0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fc0c:	4618      	mov	r0, r3
    fc0e:	4b0a      	ldr	r3, [pc, #40]	; (fc38 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
    fc10:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
    fc12:	687b      	ldr	r3, [r7, #4]
    fc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fc16:	7a5b      	ldrb	r3, [r3, #9]
    fc18:	b2da      	uxtb	r2, r3
    fc1a:	687b      	ldr	r3, [r7, #4]
    fc1c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
    fc20:	687b      	ldr	r3, [r7, #4]
    fc22:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fc26:	b2db      	uxtb	r3, r3


}
    fc28:	4618      	mov	r0, r3
    fc2a:	3708      	adds	r7, #8
    fc2c:	46bd      	mov	sp, r7
    fc2e:	bd80      	pop	{r7, pc}
    fc30:	0000d12d 	.word	0x0000d12d
    fc34:	0000fc6d 	.word	0x0000fc6d
    fc38:	0001061d 	.word	0x0001061d
    fc3c:	00010661 	.word	0x00010661
    fc40:	000106d5 	.word	0x000106d5

0000fc44 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
    fc44:	b580      	push	{r7, lr}
    fc46:	b082      	sub	sp, #8
    fc48:	af00      	add	r7, sp, #0
    fc4a:	6078      	str	r0, [r7, #4]
    fc4c:	460b      	mov	r3, r1
    fc4e:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
    fc50:	687b      	ldr	r3, [r7, #4]
    fc52:	78fa      	ldrb	r2, [r7, #3]
    fc54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
    fc58:	6878      	ldr	r0, [r7, #4]
    fc5a:	4b03      	ldr	r3, [pc, #12]	; (fc68 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
    fc5c:	4798      	blx	r3
    fc5e:	4603      	mov	r3, r0
}
    fc60:	4618      	mov	r0, r3
    fc62:	3708      	adds	r7, #8
    fc64:	46bd      	mov	sp, r7
    fc66:	bd80      	pop	{r7, pc}
    fc68:	0000fbb1 	.word	0x0000fbb1

0000fc6c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
    fc6c:	b580      	push	{r7, lr}
    fc6e:	b084      	sub	sp, #16
    fc70:	af00      	add	r7, sp, #0
    fc72:	6078      	str	r0, [r7, #4]
    fc74:	460b      	mov	r3, r1
    fc76:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    fc78:	2300      	movs	r3, #0
    fc7a:	60fb      	str	r3, [r7, #12]
    fc7c:	68fb      	ldr	r3, [r7, #12]
    fc7e:	2b03      	cmp	r3, #3
    fc80:	dc2d      	bgt.n	fcde <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
    fc82:	687b      	ldr	r3, [r7, #4]
    fc84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    fc88:	4619      	mov	r1, r3
    fc8a:	68fb      	ldr	r3, [r7, #12]
    fc8c:	461a      	mov	r2, r3
    fc8e:	00d2      	lsls	r2, r2, #3
    fc90:	1ad2      	subs	r2, r2, r3
    fc92:	0093      	lsls	r3, r2, #2
    fc94:	461a      	mov	r2, r3
    fc96:	460b      	mov	r3, r1
    fc98:	00db      	lsls	r3, r3, #3
    fc9a:	1a5b      	subs	r3, r3, r1
    fc9c:	011b      	lsls	r3, r3, #4
    fc9e:	4413      	add	r3, r2
    fca0:	4a11      	ldr	r2, [pc, #68]	; (fce8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
    fca2:	441a      	add	r2, r3
    fca4:	687b      	ldr	r3, [r7, #4]
    fca6:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	6e98      	ldr	r0, [r3, #104]	; 0x68
    fcac:	68fb      	ldr	r3, [r7, #12]
    fcae:	b2da      	uxtb	r2, r3
    fcb0:	78fb      	ldrb	r3, [r7, #3]
    fcb2:	009b      	lsls	r3, r3, #2
    fcb4:	b2db      	uxtb	r3, r3
    fcb6:	4413      	add	r3, r2
    fcb8:	b2db      	uxtb	r3, r3
    fcba:	3320      	adds	r3, #32
    fcbc:	b2d9      	uxtb	r1, r3
    fcbe:	687b      	ldr	r3, [r7, #4]
    fcc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fcc2:	461a      	mov	r2, r3
    fcc4:	4b09      	ldr	r3, [pc, #36]	; (fcec <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
    fcc6:	4798      	blx	r3
		expanders[i]=currentExpander;
    fcc8:	687b      	ldr	r3, [r7, #4]
    fcca:	6e99      	ldr	r1, [r3, #104]	; 0x68
    fccc:	687b      	ldr	r3, [r7, #4]
    fcce:	68fa      	ldr	r2, [r7, #12]
    fcd0:	3216      	adds	r2, #22
    fcd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    fcd6:	68fb      	ldr	r3, [r7, #12]
    fcd8:	3301      	adds	r3, #1
    fcda:	60fb      	str	r3, [r7, #12]
    fcdc:	e7ce      	b.n	fc7c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
    fcde:	2300      	movs	r3, #0
}
    fce0:	4618      	mov	r0, r3
    fce2:	3710      	adds	r7, #16
    fce4:	46bd      	mov	sp, r7
    fce6:	bd80      	pop	{r7, pc}
    fce8:	20008fc4 	.word	0x20008fc4
    fcec:	000104a9 	.word	0x000104a9

0000fcf0 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
    fcf0:	b590      	push	{r4, r7, lr}
    fcf2:	b085      	sub	sp, #20
    fcf4:	af00      	add	r7, sp, #0
    fcf6:	60f8      	str	r0, [r7, #12]
    fcf8:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
    fcfa:	68bb      	ldr	r3, [r7, #8]
    fcfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    fcfe:	4618      	mov	r0, r3
    fd00:	4b0f      	ldr	r3, [pc, #60]	; (fd40 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
    fd02:	4798      	blx	r3
    fd04:	4603      	mov	r3, r0
    fd06:	461a      	mov	r2, r3
    fd08:	68bb      	ldr	r3, [r7, #8]
    fd0a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
    fd0e:	68b9      	ldr	r1, [r7, #8]
    fd10:	68bb      	ldr	r3, [r7, #8]
    fd12:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
    fd16:	68bc      	ldr	r4, [r7, #8]
    fd18:	463b      	mov	r3, r7
    fd1a:	4618      	mov	r0, r3
    fd1c:	4b09      	ldr	r3, [pc, #36]	; (fd44 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
    fd1e:	4798      	blx	r3
    fd20:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    fd24:	463a      	mov	r2, r7
    fd26:	6810      	ldr	r0, [r2, #0]
    fd28:	6851      	ldr	r1, [r2, #4]
    fd2a:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
    fd2c:	68fa      	ldr	r2, [r7, #12]
    fd2e:	68bb      	ldr	r3, [r7, #8]
    fd30:	333c      	adds	r3, #60	; 0x3c
    fd32:	cb03      	ldmia	r3!, {r0, r1}
    fd34:	6010      	str	r0, [r2, #0]
    fd36:	6051      	str	r1, [r2, #4]
}
    fd38:	68f8      	ldr	r0, [r7, #12]
    fd3a:	3714      	adds	r7, #20
    fd3c:	46bd      	mov	sp, r7
    fd3e:	bd90      	pop	{r4, r7, pc}
    fd40:	0001055d 	.word	0x0001055d
    fd44:	000103b5 	.word	0x000103b5

0000fd48 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
    fd48:	b590      	push	{r4, r7, lr}
    fd4a:	b085      	sub	sp, #20
    fd4c:	af00      	add	r7, sp, #0
    fd4e:	60f8      	str	r0, [r7, #12]
    fd50:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
    fd52:	68bb      	ldr	r3, [r7, #8]
    fd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fd56:	4618      	mov	r0, r3
    fd58:	4b10      	ldr	r3, [pc, #64]	; (fd9c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
    fd5a:	4798      	blx	r3
    fd5c:	4603      	mov	r3, r0
    fd5e:	461a      	mov	r2, r3
    fd60:	68bb      	ldr	r3, [r7, #8]
    fd62:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
    fd66:	68b9      	ldr	r1, [r7, #8]
    fd68:	68bb      	ldr	r3, [r7, #8]
    fd6a:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
    fd6e:	68bc      	ldr	r4, [r7, #8]
    fd70:	463b      	mov	r3, r7
    fd72:	4618      	mov	r0, r3
    fd74:	4b0a      	ldr	r3, [pc, #40]	; (fda0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
    fd76:	4798      	blx	r3
    fd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
    fd7c:	463a      	mov	r2, r7
    fd7e:	6810      	ldr	r0, [r2, #0]
    fd80:	6018      	str	r0, [r3, #0]
    fd82:	8892      	ldrh	r2, [r2, #4]
    fd84:	809a      	strh	r2, [r3, #4]
	return statusInputs;
    fd86:	68fa      	ldr	r2, [r7, #12]
    fd88:	68bb      	ldr	r3, [r7, #8]
    fd8a:	3344      	adds	r3, #68	; 0x44
    fd8c:	6818      	ldr	r0, [r3, #0]
    fd8e:	6010      	str	r0, [r2, #0]
    fd90:	889b      	ldrh	r3, [r3, #4]
    fd92:	8093      	strh	r3, [r2, #4]
}
    fd94:	68f8      	ldr	r0, [r7, #12]
    fd96:	3714      	adds	r7, #20
    fd98:	46bd      	mov	sp, r7
    fd9a:	bd90      	pop	{r4, r7, pc}
    fd9c:	0001055d 	.word	0x0001055d
    fda0:	00010361 	.word	0x00010361

0000fda4 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
    fda4:	b580      	push	{r7, lr}
    fda6:	b082      	sub	sp, #8
    fda8:	af00      	add	r7, sp, #0
    fdaa:	6078      	str	r0, [r7, #4]
    fdac:	460b      	mov	r3, r1
    fdae:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    fdb0:	687b      	ldr	r3, [r7, #4]
    fdb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    fdb4:	4618      	mov	r0, r3
    fdb6:	4b19      	ldr	r3, [pc, #100]	; (fe1c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
    fdb8:	4798      	blx	r3
    fdba:	4603      	mov	r3, r0
    fdbc:	461a      	mov	r2, r3
    fdbe:	687b      	ldr	r3, [r7, #4]
    fdc0:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
    fdc4:	78fb      	ldrb	r3, [r7, #3]
    fdc6:	2b00      	cmp	r3, #0
    fdc8:	d006      	beq.n	fdd8 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
    fdca:	687b      	ldr	r3, [r7, #4]
    fdcc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fdd0:	f043 0301 	orr.w	r3, r3, #1
    fdd4:	b2db      	uxtb	r3, r3
    fdd6:	e005      	b.n	fde4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
    fdd8:	687b      	ldr	r3, [r7, #4]
    fdda:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fdde:	f023 0301 	bic.w	r3, r3, #1
    fde2:	b2db      	uxtb	r3, r3
    fde4:	687a      	ldr	r2, [r7, #4]
    fde6:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
    fdea:	687b      	ldr	r3, [r7, #4]
    fdec:	78fa      	ldrb	r2, [r7, #3]
    fdee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
    fdf2:	687b      	ldr	r3, [r7, #4]
    fdf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    fdf6:	687b      	ldr	r3, [r7, #4]
    fdf8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fdfc:	4619      	mov	r1, r3
    fdfe:	4610      	mov	r0, r2
    fe00:	4b07      	ldr	r3, [pc, #28]	; (fe20 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
    fe02:	4798      	blx	r3
    fe04:	4603      	mov	r3, r0
    fe06:	461a      	mov	r2, r3
    fe08:	687b      	ldr	r3, [r7, #4]
    fe0a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    fe0e:	687b      	ldr	r3, [r7, #4]
    fe10:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    fe14:	4618      	mov	r0, r3
    fe16:	3708      	adds	r7, #8
    fe18:	46bd      	mov	sp, r7
    fe1a:	bd80      	pop	{r7, pc}
    fe1c:	0001055d 	.word	0x0001055d
    fe20:	000105e1 	.word	0x000105e1

0000fe24 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
    fe24:	b580      	push	{r7, lr}
    fe26:	b082      	sub	sp, #8
    fe28:	af00      	add	r7, sp, #0
    fe2a:	6078      	str	r0, [r7, #4]
    fe2c:	460b      	mov	r3, r1
    fe2e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    fe30:	687b      	ldr	r3, [r7, #4]
    fe32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    fe34:	4618      	mov	r0, r3
    fe36:	4b17      	ldr	r3, [pc, #92]	; (fe94 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
    fe38:	4798      	blx	r3
    fe3a:	4603      	mov	r3, r0
    fe3c:	461a      	mov	r2, r3
    fe3e:	687b      	ldr	r3, [r7, #4]
    fe40:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
    fe44:	78fb      	ldrb	r3, [r7, #3]
    fe46:	2b00      	cmp	r3, #0
    fe48:	d006      	beq.n	fe58 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
    fe4a:	687b      	ldr	r3, [r7, #4]
    fe4c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fe50:	f043 0320 	orr.w	r3, r3, #32
    fe54:	b2db      	uxtb	r3, r3
    fe56:	e005      	b.n	fe64 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
    fe58:	687b      	ldr	r3, [r7, #4]
    fe5a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fe5e:	f023 0320 	bic.w	r3, r3, #32
    fe62:	b2db      	uxtb	r3, r3
    fe64:	687a      	ldr	r2, [r7, #4]
    fe66:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
    fe6a:	687b      	ldr	r3, [r7, #4]
    fe6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    fe6e:	687b      	ldr	r3, [r7, #4]
    fe70:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fe74:	4619      	mov	r1, r3
    fe76:	4610      	mov	r0, r2
    fe78:	4b07      	ldr	r3, [pc, #28]	; (fe98 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
    fe7a:	4798      	blx	r3
    fe7c:	4603      	mov	r3, r0
    fe7e:	461a      	mov	r2, r3
    fe80:	687b      	ldr	r3, [r7, #4]
    fe82:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    fe86:	687b      	ldr	r3, [r7, #4]
    fe88:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    fe8c:	4618      	mov	r0, r3
    fe8e:	3708      	adds	r7, #8
    fe90:	46bd      	mov	sp, r7
    fe92:	bd80      	pop	{r7, pc}
    fe94:	0001055d 	.word	0x0001055d
    fe98:	000105e1 	.word	0x000105e1

0000fe9c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
    fe9c:	b580      	push	{r7, lr}
    fe9e:	b082      	sub	sp, #8
    fea0:	af00      	add	r7, sp, #0
    fea2:	6078      	str	r0, [r7, #4]
    fea4:	460b      	mov	r3, r1
    fea6:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    fea8:	687b      	ldr	r3, [r7, #4]
    feaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    feac:	4618      	mov	r0, r3
    feae:	4b17      	ldr	r3, [pc, #92]	; (ff0c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
    feb0:	4798      	blx	r3
    feb2:	4603      	mov	r3, r0
    feb4:	461a      	mov	r2, r3
    feb6:	687b      	ldr	r3, [r7, #4]
    feb8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
    febc:	78fb      	ldrb	r3, [r7, #3]
    febe:	2b00      	cmp	r3, #0
    fec0:	d006      	beq.n	fed0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
    fec2:	687b      	ldr	r3, [r7, #4]
    fec4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fecc:	b2db      	uxtb	r3, r3
    fece:	e005      	b.n	fedc <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
    fed0:	687b      	ldr	r3, [r7, #4]
    fed2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    feda:	b2db      	uxtb	r3, r3
    fedc:	687a      	ldr	r2, [r7, #4]
    fede:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
    fee2:	687b      	ldr	r3, [r7, #4]
    fee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    fee6:	687b      	ldr	r3, [r7, #4]
    fee8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    feec:	4619      	mov	r1, r3
    feee:	4610      	mov	r0, r2
    fef0:	4b07      	ldr	r3, [pc, #28]	; (ff10 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
    fef2:	4798      	blx	r3
    fef4:	4603      	mov	r3, r0
    fef6:	461a      	mov	r2, r3
    fef8:	687b      	ldr	r3, [r7, #4]
    fefa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    fefe:	687b      	ldr	r3, [r7, #4]
    ff00:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    ff04:	4618      	mov	r0, r3
    ff06:	3708      	adds	r7, #8
    ff08:	46bd      	mov	sp, r7
    ff0a:	bd80      	pop	{r7, pc}
    ff0c:	0001055d 	.word	0x0001055d
    ff10:	000105e1 	.word	0x000105e1

0000ff14 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
    ff14:	b580      	push	{r7, lr}
    ff16:	b082      	sub	sp, #8
    ff18:	af00      	add	r7, sp, #0
    ff1a:	6078      	str	r0, [r7, #4]
    ff1c:	460b      	mov	r3, r1
    ff1e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    ff20:	687b      	ldr	r3, [r7, #4]
    ff22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    ff24:	4618      	mov	r0, r3
    ff26:	4b17      	ldr	r3, [pc, #92]	; (ff84 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
    ff28:	4798      	blx	r3
    ff2a:	4603      	mov	r3, r0
    ff2c:	461a      	mov	r2, r3
    ff2e:	687b      	ldr	r3, [r7, #4]
    ff30:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
    ff34:	78fb      	ldrb	r3, [r7, #3]
    ff36:	2b00      	cmp	r3, #0
    ff38:	d006      	beq.n	ff48 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
    ff3a:	687b      	ldr	r3, [r7, #4]
    ff3c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    ff40:	f043 0304 	orr.w	r3, r3, #4
    ff44:	b2db      	uxtb	r3, r3
    ff46:	e005      	b.n	ff54 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
    ff48:	687b      	ldr	r3, [r7, #4]
    ff4a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    ff4e:	f023 0304 	bic.w	r3, r3, #4
    ff52:	b2db      	uxtb	r3, r3
    ff54:	687a      	ldr	r2, [r7, #4]
    ff56:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
    ff5a:	687b      	ldr	r3, [r7, #4]
    ff5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    ff5e:	687b      	ldr	r3, [r7, #4]
    ff60:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    ff64:	4619      	mov	r1, r3
    ff66:	4610      	mov	r0, r2
    ff68:	4b07      	ldr	r3, [pc, #28]	; (ff88 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
    ff6a:	4798      	blx	r3
    ff6c:	4603      	mov	r3, r0
    ff6e:	461a      	mov	r2, r3
    ff70:	687b      	ldr	r3, [r7, #4]
    ff72:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
    ff76:	687b      	ldr	r3, [r7, #4]
    ff78:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
    ff7c:	4618      	mov	r0, r3
    ff7e:	3708      	adds	r7, #8
    ff80:	46bd      	mov	sp, r7
    ff82:	bd80      	pop	{r7, pc}
    ff84:	0001055d 	.word	0x0001055d
    ff88:	000105e1 	.word	0x000105e1

0000ff8c <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
    ff8c:	b580      	push	{r7, lr}
    ff8e:	b082      	sub	sp, #8
    ff90:	af00      	add	r7, sp, #0
    ff92:	6078      	str	r0, [r7, #4]
    ff94:	460b      	mov	r3, r1
    ff96:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
    ff98:	687b      	ldr	r3, [r7, #4]
    ff9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ff9c:	78fa      	ldrb	r2, [r7, #3]
    ff9e:	4611      	mov	r1, r2
    ffa0:	4618      	mov	r0, r3
    ffa2:	4b07      	ldr	r3, [pc, #28]	; (ffc0 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
    ffa4:	4798      	blx	r3
    ffa6:	4603      	mov	r3, r0
    ffa8:	461a      	mov	r2, r3
    ffaa:	687b      	ldr	r3, [r7, #4]
    ffac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
    ffb0:	687b      	ldr	r3, [r7, #4]
    ffb2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
    ffb6:	4618      	mov	r0, r3
    ffb8:	3708      	adds	r7, #8
    ffba:	46bd      	mov	sp, r7
    ffbc:	bd80      	pop	{r7, pc}
    ffbe:	bf00      	nop
    ffc0:	000105e1 	.word	0x000105e1

0000ffc4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
    ffc4:	b580      	push	{r7, lr}
    ffc6:	b082      	sub	sp, #8
    ffc8:	af00      	add	r7, sp, #0
    ffca:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
    ffcc:	687b      	ldr	r3, [r7, #4]
    ffce:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    ffd2:	687b      	ldr	r3, [r7, #4]
    ffd4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
    ffd8:	687b      	ldr	r3, [r7, #4]
    ffda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ffdc:	4618      	mov	r0, r3
    ffde:	4b18      	ldr	r3, [pc, #96]	; (10040 <STACK_SIZE+0x40>)
    ffe0:	4798      	blx	r3
    ffe2:	4603      	mov	r3, r0
    ffe4:	461a      	mov	r2, r3
    ffe6:	687b      	ldr	r3, [r7, #4]
    ffe8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
    ffec:	687b      	ldr	r3, [r7, #4]
    ffee:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    fff2:	2bda      	cmp	r3, #218	; 0xda
    fff4:	dd04      	ble.n	10000 <STACK_SIZE>
	{
		statusFlapperValve=NBC_MODE;
    fff6:	687b      	ldr	r3, [r7, #4]
    fff8:	2203      	movs	r2, #3
    fffa:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    fffe:	e017      	b.n	10030 <STACK_SIZE+0x30>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   10000:	687b      	ldr	r3, [r7, #4]
   10002:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   10006:	2b6d      	cmp	r3, #109	; 0x6d
   10008:	dd04      	ble.n	10014 <STACK_SIZE+0x14>
	{
		statusFlapperValve=RECYCLE_MODE;
   1000a:	687b      	ldr	r3, [r7, #4]
   1000c:	2202      	movs	r2, #2
   1000e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   10012:	e00d      	b.n	10030 <STACK_SIZE+0x30>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   10014:	687b      	ldr	r3, [r7, #4]
   10016:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1001a:	2b36      	cmp	r3, #54	; 0x36
   1001c:	dd04      	ble.n	10028 <STACK_SIZE+0x28>
	{
		statusFlapperValve=INTERM_MODE;
   1001e:	687b      	ldr	r3, [r7, #4]
   10020:	2201      	movs	r2, #1
   10022:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   10026:	e003      	b.n	10030 <STACK_SIZE+0x30>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	2200      	movs	r2, #0
   1002c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
   10030:	687b      	ldr	r3, [r7, #4]
   10032:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
   10036:	4618      	mov	r0, r3
   10038:	3708      	adds	r7, #8
   1003a:	46bd      	mov	sp, r7
   1003c:	bd80      	pop	{r7, pc}
   1003e:	bf00      	nop
   10040:	0001055d 	.word	0x0001055d

00010044 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10044:	b590      	push	{r4, r7, lr}
   10046:	b083      	sub	sp, #12
   10048:	af00      	add	r7, sp, #0
   1004a:	6078      	str	r0, [r7, #4]
   1004c:	4c05      	ldr	r4, [pc, #20]	; (10064 <__tcf_0+0x20>)
   1004e:	4b06      	ldr	r3, [pc, #24]	; (10068 <__tcf_0+0x24>)
   10050:	429c      	cmp	r4, r3
   10052:	d004      	beq.n	1005e <__tcf_0+0x1a>
   10054:	3c1c      	subs	r4, #28
   10056:	4620      	mov	r0, r4
   10058:	4b04      	ldr	r3, [pc, #16]	; (1006c <__tcf_0+0x28>)
   1005a:	4798      	blx	r3
   1005c:	e7f7      	b.n	1004e <__tcf_0+0xa>
   1005e:	370c      	adds	r7, #12
   10060:	46bd      	mov	sp, r7
   10062:	bd90      	pop	{r4, r7, pc}
   10064:	200090a4 	.word	0x200090a4
   10068:	20008fc4 	.word	0x20008fc4
   1006c:	00010495 	.word	0x00010495

00010070 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   10070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10074:	b082      	sub	sp, #8
   10076:	af00      	add	r7, sp, #0
   10078:	6078      	str	r0, [r7, #4]
   1007a:	6039      	str	r1, [r7, #0]
   1007c:	687b      	ldr	r3, [r7, #4]
   1007e:	2b01      	cmp	r3, #1
   10080:	d177      	bne.n	10172 <_Z41__static_initialization_and_destruction_0ii+0x102>
   10082:	683b      	ldr	r3, [r7, #0]
   10084:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10088:	4293      	cmp	r3, r2
   1008a:	d172      	bne.n	10172 <_Z41__static_initialization_and_destruction_0ii+0x102>
   1008c:	493b      	ldr	r1, [pc, #236]	; (1017c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   1008e:	483c      	ldr	r0, [pc, #240]	; (10180 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10090:	4b3c      	ldr	r3, [pc, #240]	; (10184 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10092:	4798      	blx	r3
   10094:	4a3c      	ldr	r2, [pc, #240]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10096:	493d      	ldr	r1, [pc, #244]	; (1018c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10098:	4839      	ldr	r0, [pc, #228]	; (10180 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1009a:	4b3d      	ldr	r3, [pc, #244]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1009c:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1009e:	493d      	ldr	r1, [pc, #244]	; (10194 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   100a0:	483d      	ldr	r0, [pc, #244]	; (10198 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   100a2:	4b3e      	ldr	r3, [pc, #248]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   100a4:	4798      	blx	r3
   100a6:	4a38      	ldr	r2, [pc, #224]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   100a8:	493d      	ldr	r1, [pc, #244]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   100aa:	483b      	ldr	r0, [pc, #236]	; (10198 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   100ac:	4b38      	ldr	r3, [pc, #224]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   100ae:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   100b0:	493c      	ldr	r1, [pc, #240]	; (101a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   100b2:	483d      	ldr	r0, [pc, #244]	; (101a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   100b4:	4b39      	ldr	r3, [pc, #228]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   100b6:	4798      	blx	r3
   100b8:	4a33      	ldr	r2, [pc, #204]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   100ba:	4939      	ldr	r1, [pc, #228]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   100bc:	483a      	ldr	r0, [pc, #232]	; (101a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   100be:	4b34      	ldr	r3, [pc, #208]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   100c0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   100c2:	493a      	ldr	r1, [pc, #232]	; (101ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   100c4:	483a      	ldr	r0, [pc, #232]	; (101b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   100c6:	4b35      	ldr	r3, [pc, #212]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   100c8:	4798      	blx	r3
   100ca:	4a2f      	ldr	r2, [pc, #188]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   100cc:	4934      	ldr	r1, [pc, #208]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   100ce:	4838      	ldr	r0, [pc, #224]	; (101b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   100d0:	4b2f      	ldr	r3, [pc, #188]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   100d2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   100d4:	4937      	ldr	r1, [pc, #220]	; (101b4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   100d6:	4838      	ldr	r0, [pc, #224]	; (101b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   100d8:	4b30      	ldr	r3, [pc, #192]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   100da:	4798      	blx	r3
   100dc:	4a2a      	ldr	r2, [pc, #168]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   100de:	4930      	ldr	r1, [pc, #192]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   100e0:	4835      	ldr	r0, [pc, #212]	; (101b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   100e2:	4b2b      	ldr	r3, [pc, #172]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   100e4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   100e6:	4935      	ldr	r1, [pc, #212]	; (101bc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   100e8:	4835      	ldr	r0, [pc, #212]	; (101c0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   100ea:	4b2c      	ldr	r3, [pc, #176]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   100ec:	4798      	blx	r3
   100ee:	4a26      	ldr	r2, [pc, #152]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   100f0:	492b      	ldr	r1, [pc, #172]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   100f2:	4833      	ldr	r0, [pc, #204]	; (101c0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   100f4:	4b26      	ldr	r3, [pc, #152]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   100f6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   100f8:	4932      	ldr	r1, [pc, #200]	; (101c4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   100fa:	4833      	ldr	r0, [pc, #204]	; (101c8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   100fc:	4b27      	ldr	r3, [pc, #156]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   100fe:	4798      	blx	r3
   10100:	4a21      	ldr	r2, [pc, #132]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10102:	4927      	ldr	r1, [pc, #156]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10104:	4830      	ldr	r0, [pc, #192]	; (101c8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   10106:	4b22      	ldr	r3, [pc, #136]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10108:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1010a:	4930      	ldr	r1, [pc, #192]	; (101cc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   1010c:	4830      	ldr	r0, [pc, #192]	; (101d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   1010e:	4b23      	ldr	r3, [pc, #140]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   10110:	4798      	blx	r3
   10112:	4a1d      	ldr	r2, [pc, #116]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10114:	4922      	ldr	r1, [pc, #136]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10116:	482e      	ldr	r0, [pc, #184]	; (101d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   10118:	4b1d      	ldr	r3, [pc, #116]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1011a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   1011c:	492d      	ldr	r1, [pc, #180]	; (101d4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   1011e:	482e      	ldr	r0, [pc, #184]	; (101d8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   10120:	4b1e      	ldr	r3, [pc, #120]	; (1019c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   10122:	4798      	blx	r3
   10124:	4a18      	ldr	r2, [pc, #96]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10126:	491e      	ldr	r1, [pc, #120]	; (101a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10128:	482b      	ldr	r0, [pc, #172]	; (101d8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   1012a:	4b19      	ldr	r3, [pc, #100]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1012c:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   1012e:	492b      	ldr	r1, [pc, #172]	; (101dc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
   10130:	482b      	ldr	r0, [pc, #172]	; (101e0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   10132:	4b14      	ldr	r3, [pc, #80]	; (10184 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10134:	4798      	blx	r3
   10136:	4a14      	ldr	r2, [pc, #80]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10138:	4914      	ldr	r1, [pc, #80]	; (1018c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   1013a:	4829      	ldr	r0, [pc, #164]	; (101e0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   1013c:	4b14      	ldr	r3, [pc, #80]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   1013e:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10140:	4b28      	ldr	r3, [pc, #160]	; (101e4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
   10142:	2401      	movs	r4, #1
   10144:	461e      	mov	r6, r3
   10146:	2c00      	cmp	r4, #0
   10148:	db0e      	blt.n	10168 <_Z41__static_initialization_and_destruction_0ii+0xf8>
   1014a:	4633      	mov	r3, r6
   1014c:	2503      	movs	r5, #3
   1014e:	4698      	mov	r8, r3
   10150:	2d00      	cmp	r5, #0
   10152:	db06      	blt.n	10162 <_Z41__static_initialization_and_destruction_0ii+0xf2>
   10154:	4640      	mov	r0, r8
   10156:	4b24      	ldr	r3, [pc, #144]	; (101e8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
   10158:	4798      	blx	r3
   1015a:	f108 081c 	add.w	r8, r8, #28
   1015e:	3d01      	subs	r5, #1
   10160:	e7f6      	b.n	10150 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   10162:	3670      	adds	r6, #112	; 0x70
   10164:	3c01      	subs	r4, #1
   10166:	e7ee      	b.n	10146 <_Z41__static_initialization_and_destruction_0ii+0xd6>
   10168:	4a07      	ldr	r2, [pc, #28]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1016a:	4920      	ldr	r1, [pc, #128]	; (101ec <_Z41__static_initialization_and_destruction_0ii+0x17c>)
   1016c:	2000      	movs	r0, #0
   1016e:	4b08      	ldr	r3, [pc, #32]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10170:	4798      	blx	r3
}
   10172:	bf00      	nop
   10174:	3708      	adds	r7, #8
   10176:	46bd      	mov	sp, r7
   10178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1017c:	2000ae28 	.word	0x2000ae28
   10180:	20008e90 	.word	0x20008e90
   10184:	0000d0fd 	.word	0x0000d0fd
   10188:	20000000 	.word	0x20000000
   1018c:	0000d119 	.word	0x0000d119
   10190:	0001193d 	.word	0x0001193d
   10194:	2000acf8 	.word	0x2000acf8
   10198:	20008ea8 	.word	0x20008ea8
   1019c:	0000d2b9 	.word	0x0000d2b9
   101a0:	0000d2f1 	.word	0x0000d2f1
   101a4:	2000ad8c 	.word	0x2000ad8c
   101a8:	20008ec8 	.word	0x20008ec8
   101ac:	2000aeb0 	.word	0x2000aeb0
   101b0:	20008ee8 	.word	0x20008ee8
   101b4:	2000adac 	.word	0x2000adac
   101b8:	20008f08 	.word	0x20008f08
   101bc:	2000ae70 	.word	0x2000ae70
   101c0:	20008f28 	.word	0x20008f28
   101c4:	2000ae90 	.word	0x2000ae90
   101c8:	20008f48 	.word	0x20008f48
   101cc:	2000ad68 	.word	0x2000ad68
   101d0:	20008f68 	.word	0x20008f68
   101d4:	2000ae08 	.word	0x2000ae08
   101d8:	20008f88 	.word	0x20008f88
   101dc:	2000adcc 	.word	0x2000adcc
   101e0:	20008fac 	.word	0x20008fac
   101e4:	20008fc4 	.word	0x20008fc4
   101e8:	00010481 	.word	0x00010481
   101ec:	00010045 	.word	0x00010045

000101f0 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   101f0:	b580      	push	{r7, lr}
   101f2:	af00      	add	r7, sp, #0
   101f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   101f8:	2001      	movs	r0, #1
   101fa:	4b01      	ldr	r3, [pc, #4]	; (10200 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   101fc:	4798      	blx	r3
   101fe:	bd80      	pop	{r7, pc}
   10200:	00010071 	.word	0x00010071

00010204 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   10204:	b580      	push	{r7, lr}
   10206:	b084      	sub	sp, #16
   10208:	af00      	add	r7, sp, #0
   1020a:	60f8      	str	r0, [r7, #12]
   1020c:	60b9      	str	r1, [r7, #8]
   1020e:	4613      	mov	r3, r2
   10210:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   10212:	68fb      	ldr	r3, [r7, #12]
   10214:	2b00      	cmp	r3, #0
   10216:	d004      	beq.n	10222 <io_write+0x1e>
   10218:	68bb      	ldr	r3, [r7, #8]
   1021a:	2b00      	cmp	r3, #0
   1021c:	d001      	beq.n	10222 <io_write+0x1e>
   1021e:	2301      	movs	r3, #1
   10220:	e000      	b.n	10224 <io_write+0x20>
   10222:	2300      	movs	r3, #0
   10224:	f003 0301 	and.w	r3, r3, #1
   10228:	b2db      	uxtb	r3, r3
   1022a:	2234      	movs	r2, #52	; 0x34
   1022c:	4907      	ldr	r1, [pc, #28]	; (1024c <io_write+0x48>)
   1022e:	4618      	mov	r0, r3
   10230:	4b07      	ldr	r3, [pc, #28]	; (10250 <io_write+0x4c>)
   10232:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   10234:	68fb      	ldr	r3, [r7, #12]
   10236:	681b      	ldr	r3, [r3, #0]
   10238:	88fa      	ldrh	r2, [r7, #6]
   1023a:	68b9      	ldr	r1, [r7, #8]
   1023c:	68f8      	ldr	r0, [r7, #12]
   1023e:	4798      	blx	r3
   10240:	4603      	mov	r3, r0
}
   10242:	4618      	mov	r0, r3
   10244:	3710      	adds	r7, #16
   10246:	46bd      	mov	sp, r7
   10248:	bd80      	pop	{r7, pc}
   1024a:	bf00      	nop
   1024c:	000124fc 	.word	0x000124fc
   10250:	00003681 	.word	0x00003681

00010254 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   10254:	b580      	push	{r7, lr}
   10256:	b084      	sub	sp, #16
   10258:	af00      	add	r7, sp, #0
   1025a:	60f8      	str	r0, [r7, #12]
   1025c:	60b9      	str	r1, [r7, #8]
   1025e:	4613      	mov	r3, r2
   10260:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   10262:	68fb      	ldr	r3, [r7, #12]
   10264:	2b00      	cmp	r3, #0
   10266:	d004      	beq.n	10272 <io_read+0x1e>
   10268:	68bb      	ldr	r3, [r7, #8]
   1026a:	2b00      	cmp	r3, #0
   1026c:	d001      	beq.n	10272 <io_read+0x1e>
   1026e:	2301      	movs	r3, #1
   10270:	e000      	b.n	10274 <io_read+0x20>
   10272:	2300      	movs	r3, #0
   10274:	f003 0301 	and.w	r3, r3, #1
   10278:	b2db      	uxtb	r3, r3
   1027a:	223d      	movs	r2, #61	; 0x3d
   1027c:	4907      	ldr	r1, [pc, #28]	; (1029c <io_read+0x48>)
   1027e:	4618      	mov	r0, r3
   10280:	4b07      	ldr	r3, [pc, #28]	; (102a0 <io_read+0x4c>)
   10282:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   10284:	68fb      	ldr	r3, [r7, #12]
   10286:	685b      	ldr	r3, [r3, #4]
   10288:	88fa      	ldrh	r2, [r7, #6]
   1028a:	68b9      	ldr	r1, [r7, #8]
   1028c:	68f8      	ldr	r0, [r7, #12]
   1028e:	4798      	blx	r3
   10290:	4603      	mov	r3, r0
}
   10292:	4618      	mov	r0, r3
   10294:	3710      	adds	r7, #16
   10296:	46bd      	mov	sp, r7
   10298:	bd80      	pop	{r7, pc}
   1029a:	bf00      	nop
   1029c:	000124fc 	.word	0x000124fc
   102a0:	00003681 	.word	0x00003681

000102a4 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   102a4:	b480      	push	{r7}
   102a6:	b083      	sub	sp, #12
   102a8:	af00      	add	r7, sp, #0
   102aa:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   102ac:	687b      	ldr	r3, [r7, #4]
   102ae:	4618      	mov	r0, r3
   102b0:	370c      	adds	r7, #12
   102b2:	46bd      	mov	sp, r7
   102b4:	bc80      	pop	{r7}
   102b6:	4770      	bx	lr

000102b8 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   102b8:	b480      	push	{r7}
   102ba:	b083      	sub	sp, #12
   102bc:	af00      	add	r7, sp, #0
   102be:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   102c0:	687b      	ldr	r3, [r7, #4]
   102c2:	4618      	mov	r0, r3
   102c4:	370c      	adds	r7, #12
   102c6:	46bd      	mov	sp, r7
   102c8:	bc80      	pop	{r7}
   102ca:	4770      	bx	lr

000102cc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   102cc:	b480      	push	{r7}
   102ce:	b085      	sub	sp, #20
   102d0:	af00      	add	r7, sp, #0
   102d2:	6078      	str	r0, [r7, #4]
   102d4:	460b      	mov	r3, r1
   102d6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   102d8:	2300      	movs	r3, #0
   102da:	73fb      	strb	r3, [r7, #15]
   102dc:	7bfb      	ldrb	r3, [r7, #15]
   102de:	2b01      	cmp	r3, #1
   102e0:	dc13      	bgt.n	1030a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   102e2:	7bfb      	ldrb	r3, [r7, #15]
   102e4:	78f9      	ldrb	r1, [r7, #3]
   102e6:	7bfa      	ldrb	r2, [r7, #15]
   102e8:	2080      	movs	r0, #128	; 0x80
   102ea:	fa40 f202 	asr.w	r2, r0, r2
   102ee:	400a      	ands	r2, r1
   102f0:	2a00      	cmp	r2, #0
   102f2:	bfcc      	ite	gt
   102f4:	2201      	movgt	r2, #1
   102f6:	2200      	movle	r2, #0
   102f8:	b2d1      	uxtb	r1, r2
   102fa:	687a      	ldr	r2, [r7, #4]
   102fc:	4413      	add	r3, r2
   102fe:	460a      	mov	r2, r1
   10300:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
   10302:	7bfb      	ldrb	r3, [r7, #15]
   10304:	3301      	adds	r3, #1
   10306:	73fb      	strb	r3, [r7, #15]
   10308:	e7e8      	b.n	102dc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   1030a:	bf00      	nop
   1030c:	3714      	adds	r7, #20
   1030e:	46bd      	mov	sp, r7
   10310:	bc80      	pop	{r7}
   10312:	4770      	bx	lr

00010314 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   10314:	b480      	push	{r7}
   10316:	b085      	sub	sp, #20
   10318:	af00      	add	r7, sp, #0
   1031a:	6078      	str	r0, [r7, #4]
   1031c:	460b      	mov	r3, r1
   1031e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   10320:	2300      	movs	r3, #0
   10322:	73fb      	strb	r3, [r7, #15]
   10324:	7bfb      	ldrb	r3, [r7, #15]
   10326:	2b02      	cmp	r3, #2
   10328:	dc15      	bgt.n	10356 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1032a:	7bfb      	ldrb	r3, [r7, #15]
   1032c:	f1c3 0302 	rsb	r3, r3, #2
   10330:	78f9      	ldrb	r1, [r7, #3]
   10332:	7bfa      	ldrb	r2, [r7, #15]
   10334:	2020      	movs	r0, #32
   10336:	fa40 f202 	asr.w	r2, r0, r2
   1033a:	400a      	ands	r2, r1
   1033c:	2a00      	cmp	r2, #0
   1033e:	bfcc      	ite	gt
   10340:	2201      	movgt	r2, #1
   10342:	2200      	movle	r2, #0
   10344:	b2d1      	uxtb	r1, r2
   10346:	687a      	ldr	r2, [r7, #4]
   10348:	4413      	add	r3, r2
   1034a:	460a      	mov	r2, r1
   1034c:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
   1034e:	7bfb      	ldrb	r3, [r7, #15]
   10350:	3301      	adds	r3, #1
   10352:	73fb      	strb	r3, [r7, #15]
   10354:	e7e6      	b.n	10324 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   10356:	bf00      	nop
   10358:	3714      	adds	r7, #20
   1035a:	46bd      	mov	sp, r7
   1035c:	bc80      	pop	{r7}
   1035e:	4770      	bx	lr

00010360 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   10360:	b580      	push	{r7, lr}
   10362:	b084      	sub	sp, #16
   10364:	af00      	add	r7, sp, #0
   10366:	60f8      	str	r0, [r7, #12]
   10368:	60b9      	str	r1, [r7, #8]
   1036a:	4613      	mov	r3, r2
   1036c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   1036e:	79fb      	ldrb	r3, [r7, #7]
   10370:	4619      	mov	r1, r3
   10372:	68b8      	ldr	r0, [r7, #8]
   10374:	4b0d      	ldr	r3, [pc, #52]	; (103ac <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   10376:	4798      	blx	r3
	FillLimitSwitch(v);
   10378:	79fb      	ldrb	r3, [r7, #7]
   1037a:	4619      	mov	r1, r3
   1037c:	68b8      	ldr	r0, [r7, #8]
   1037e:	4b0c      	ldr	r3, [pc, #48]	; (103b0 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   10380:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   10382:	79fb      	ldrb	r3, [r7, #7]
   10384:	f003 0301 	and.w	r3, r3, #1
   10388:	2b00      	cmp	r3, #0
   1038a:	bfcc      	ite	gt
   1038c:	2301      	movgt	r3, #1
   1038e:	2300      	movle	r3, #0
   10390:	b2da      	uxtb	r2, r3
   10392:	68bb      	ldr	r3, [r7, #8]
   10394:	769a      	strb	r2, [r3, #26]
	return controlStatus;
   10396:	68fa      	ldr	r2, [r7, #12]
   10398:	68bb      	ldr	r3, [r7, #8]
   1039a:	3315      	adds	r3, #21
   1039c:	6819      	ldr	r1, [r3, #0]
   1039e:	6011      	str	r1, [r2, #0]
   103a0:	889b      	ldrh	r3, [r3, #4]
   103a2:	8093      	strh	r3, [r2, #4]
}
   103a4:	68f8      	ldr	r0, [r7, #12]
   103a6:	3710      	adds	r7, #16
   103a8:	46bd      	mov	sp, r7
   103aa:	bd80      	pop	{r7, pc}
   103ac:	000102cd 	.word	0x000102cd
   103b0:	00010315 	.word	0x00010315

000103b4 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   103b4:	b480      	push	{r7}
   103b6:	b085      	sub	sp, #20
   103b8:	af00      	add	r7, sp, #0
   103ba:	60f8      	str	r0, [r7, #12]
   103bc:	60b9      	str	r1, [r7, #8]
   103be:	4613      	mov	r3, r2
   103c0:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   103c2:	79fb      	ldrb	r3, [r7, #7]
   103c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   103c8:	2b00      	cmp	r3, #0
   103ca:	bfcc      	ite	gt
   103cc:	2301      	movgt	r3, #1
   103ce:	2300      	movle	r3, #0
   103d0:	b2da      	uxtb	r2, r3
   103d2:	68bb      	ldr	r3, [r7, #8]
   103d4:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   103d6:	79fb      	ldrb	r3, [r7, #7]
   103d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   103dc:	2b00      	cmp	r3, #0
   103de:	bfcc      	ite	gt
   103e0:	2301      	movgt	r3, #1
   103e2:	2300      	movle	r3, #0
   103e4:	b2da      	uxtb	r2, r3
   103e6:	68bb      	ldr	r3, [r7, #8]
   103e8:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   103ea:	79fb      	ldrb	r3, [r7, #7]
   103ec:	f003 0320 	and.w	r3, r3, #32
   103f0:	2b00      	cmp	r3, #0
   103f2:	bfcc      	ite	gt
   103f4:	2301      	movgt	r3, #1
   103f6:	2300      	movle	r3, #0
   103f8:	b2da      	uxtb	r2, r3
   103fa:	68bb      	ldr	r3, [r7, #8]
   103fc:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   103fe:	79fb      	ldrb	r3, [r7, #7]
   10400:	f003 0310 	and.w	r3, r3, #16
   10404:	2b00      	cmp	r3, #0
   10406:	bfcc      	ite	gt
   10408:	2301      	movgt	r3, #1
   1040a:	2300      	movle	r3, #0
   1040c:	b2da      	uxtb	r2, r3
   1040e:	68bb      	ldr	r3, [r7, #8]
   10410:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   10412:	79fb      	ldrb	r3, [r7, #7]
   10414:	f003 0308 	and.w	r3, r3, #8
   10418:	2b00      	cmp	r3, #0
   1041a:	bfcc      	ite	gt
   1041c:	2301      	movgt	r3, #1
   1041e:	2300      	movle	r3, #0
   10420:	b2da      	uxtb	r2, r3
   10422:	68bb      	ldr	r3, [r7, #8]
   10424:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   10426:	79fb      	ldrb	r3, [r7, #7]
   10428:	f003 0304 	and.w	r3, r3, #4
   1042c:	2b00      	cmp	r3, #0
   1042e:	bfcc      	ite	gt
   10430:	2301      	movgt	r3, #1
   10432:	2300      	movle	r3, #0
   10434:	b2da      	uxtb	r2, r3
   10436:	68bb      	ldr	r3, [r7, #8]
   10438:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   1043c:	79fb      	ldrb	r3, [r7, #7]
   1043e:	f003 0302 	and.w	r3, r3, #2
   10442:	2b00      	cmp	r3, #0
   10444:	bfcc      	ite	gt
   10446:	2301      	movgt	r3, #1
   10448:	2300      	movle	r3, #0
   1044a:	b2da      	uxtb	r2, r3
   1044c:	68bb      	ldr	r3, [r7, #8]
   1044e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   10452:	79fb      	ldrb	r3, [r7, #7]
   10454:	f003 0301 	and.w	r3, r3, #1
   10458:	2b00      	cmp	r3, #0
   1045a:	bfcc      	ite	gt
   1045c:	2301      	movgt	r3, #1
   1045e:	2300      	movle	r3, #0
   10460:	b2da      	uxtb	r2, r3
   10462:	68bb      	ldr	r3, [r7, #8]
   10464:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
   10468:	68fa      	ldr	r2, [r7, #12]
   1046a:	68bb      	ldr	r3, [r7, #8]
   1046c:	331b      	adds	r3, #27
   1046e:	6819      	ldr	r1, [r3, #0]
   10470:	685b      	ldr	r3, [r3, #4]
   10472:	6011      	str	r1, [r2, #0]
   10474:	6053      	str	r3, [r2, #4]
   10476:	68f8      	ldr	r0, [r7, #12]
   10478:	3714      	adds	r7, #20
   1047a:	46bd      	mov	sp, r7
   1047c:	bc80      	pop	{r7}
   1047e:	4770      	bx	lr

00010480 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   10480:	b480      	push	{r7}
   10482:	b083      	sub	sp, #12
   10484:	af00      	add	r7, sp, #0
   10486:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   10488:	687b      	ldr	r3, [r7, #4]
   1048a:	4618      	mov	r0, r3
   1048c:	370c      	adds	r7, #12
   1048e:	46bd      	mov	sp, r7
   10490:	bc80      	pop	{r7}
   10492:	4770      	bx	lr

00010494 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   10494:	b480      	push	{r7}
   10496:	b083      	sub	sp, #12
   10498:	af00      	add	r7, sp, #0
   1049a:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   1049c:	687b      	ldr	r3, [r7, #4]
   1049e:	4618      	mov	r0, r3
   104a0:	370c      	adds	r7, #12
   104a2:	46bd      	mov	sp, r7
   104a4:	bc80      	pop	{r7}
   104a6:	4770      	bx	lr

000104a8 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   104a8:	b480      	push	{r7}
   104aa:	b085      	sub	sp, #20
   104ac:	af00      	add	r7, sp, #0
   104ae:	60f8      	str	r0, [r7, #12]
   104b0:	460b      	mov	r3, r1
   104b2:	607a      	str	r2, [r7, #4]
   104b4:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   104b6:	687b      	ldr	r3, [r7, #4]
   104b8:	681a      	ldr	r2, [r3, #0]
   104ba:	68fb      	ldr	r3, [r7, #12]
   104bc:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   104be:	687b      	ldr	r3, [r7, #4]
   104c0:	685a      	ldr	r2, [r3, #4]
   104c2:	68fb      	ldr	r3, [r7, #12]
   104c4:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   104c6:	68fb      	ldr	r3, [r7, #12]
   104c8:	7afa      	ldrb	r2, [r7, #11]
   104ca:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   104cc:	68fb      	ldr	r3, [r7, #12]
   104ce:	687a      	ldr	r2, [r7, #4]
   104d0:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   104d2:	68fb      	ldr	r3, [r7, #12]
   104d4:	68db      	ldr	r3, [r3, #12]
   104d6:	7a5b      	ldrb	r3, [r3, #9]
   104d8:	b2da      	uxtb	r2, r3
   104da:	68fb      	ldr	r3, [r7, #12]
   104dc:	719a      	strb	r2, [r3, #6]
	return isOK;
   104de:	68fb      	ldr	r3, [r7, #12]
   104e0:	799b      	ldrb	r3, [r3, #6]
   104e2:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   104e4:	4618      	mov	r0, r3
   104e6:	3714      	adds	r7, #20
   104e8:	46bd      	mov	sp, r7
   104ea:	bc80      	pop	{r7}
   104ec:	4770      	bx	lr

000104ee <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   104ee:	b480      	push	{r7}
   104f0:	b083      	sub	sp, #12
   104f2:	af00      	add	r7, sp, #0
   104f4:	6078      	str	r0, [r7, #4]
   104f6:	460b      	mov	r3, r1
   104f8:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   104fa:	78fb      	ldrb	r3, [r7, #3]
   104fc:	f003 0307 	and.w	r3, r3, #7
   10500:	b2db      	uxtb	r3, r3
}
   10502:	4618      	mov	r0, r3
   10504:	370c      	adds	r7, #12
   10506:	46bd      	mov	sp, r7
   10508:	bc80      	pop	{r7}
   1050a:	4770      	bx	lr

0001050c <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   1050c:	b580      	push	{r7, lr}
   1050e:	b082      	sub	sp, #8
   10510:	af00      	add	r7, sp, #0
   10512:	6078      	str	r0, [r7, #4]
   10514:	460b      	mov	r3, r1
   10516:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   10518:	687b      	ldr	r3, [r7, #4]
   1051a:	68da      	ldr	r2, [r3, #12]
   1051c:	687b      	ldr	r3, [r7, #4]
   1051e:	7a1b      	ldrb	r3, [r3, #8]
   10520:	4619      	mov	r1, r3
   10522:	4610      	mov	r0, r2
   10524:	4b0a      	ldr	r3, [pc, #40]	; (10550 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   10526:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   10528:	687b      	ldr	r3, [r7, #4]
   1052a:	68db      	ldr	r3, [r3, #12]
   1052c:	1cf9      	adds	r1, r7, #3
   1052e:	2201      	movs	r2, #1
   10530:	4618      	mov	r0, r3
   10532:	4b08      	ldr	r3, [pc, #32]	; (10554 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   10534:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   10536:	687b      	ldr	r3, [r7, #4]
   10538:	68db      	ldr	r3, [r3, #12]
   1053a:	6879      	ldr	r1, [r7, #4]
   1053c:	2201      	movs	r2, #1
   1053e:	4618      	mov	r0, r3
   10540:	4b05      	ldr	r3, [pc, #20]	; (10558 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   10542:	4798      	blx	r3

	return registerValue;
   10544:	687b      	ldr	r3, [r7, #4]
   10546:	781b      	ldrb	r3, [r3, #0]
}
   10548:	4618      	mov	r0, r3
   1054a:	3708      	adds	r7, #8
   1054c:	46bd      	mov	sp, r7
   1054e:	bd80      	pop	{r7, pc}
   10550:	0000d1d5 	.word	0x0000d1d5
   10554:	0000d201 	.word	0x0000d201
   10558:	0000d22d 	.word	0x0000d22d

0001055c <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   1055c:	b580      	push	{r7, lr}
   1055e:	b084      	sub	sp, #16
   10560:	af00      	add	r7, sp, #0
   10562:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   10564:	687b      	ldr	r3, [r7, #4]
   10566:	68da      	ldr	r2, [r3, #12]
   10568:	687b      	ldr	r3, [r7, #4]
   1056a:	7a1b      	ldrb	r3, [r3, #8]
   1056c:	4619      	mov	r1, r3
   1056e:	4610      	mov	r0, r2
   10570:	4b06      	ldr	r3, [pc, #24]	; (1058c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   10572:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   10574:	2109      	movs	r1, #9
   10576:	6878      	ldr	r0, [r7, #4]
   10578:	4b05      	ldr	r3, [pc, #20]	; (10590 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   1057a:	4798      	blx	r3
   1057c:	4603      	mov	r3, r0
   1057e:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   10580:	7bfb      	ldrb	r3, [r7, #15]
}
   10582:	4618      	mov	r0, r3
   10584:	3710      	adds	r7, #16
   10586:	46bd      	mov	sp, r7
   10588:	bd80      	pop	{r7, pc}
   1058a:	bf00      	nop
   1058c:	0000d1d5 	.word	0x0000d1d5
   10590:	0001050d 	.word	0x0001050d

00010594 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   10594:	b580      	push	{r7, lr}
   10596:	b084      	sub	sp, #16
   10598:	af00      	add	r7, sp, #0
   1059a:	6078      	str	r0, [r7, #4]
   1059c:	460b      	mov	r3, r1
   1059e:	70fb      	strb	r3, [r7, #3]
   105a0:	4613      	mov	r3, r2
   105a2:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   105a4:	687b      	ldr	r3, [r7, #4]
   105a6:	68da      	ldr	r2, [r3, #12]
   105a8:	687b      	ldr	r3, [r7, #4]
   105aa:	7a1b      	ldrb	r3, [r3, #8]
   105ac:	4619      	mov	r1, r3
   105ae:	4610      	mov	r0, r2
   105b0:	4b09      	ldr	r3, [pc, #36]	; (105d8 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   105b2:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   105b4:	78fb      	ldrb	r3, [r7, #3]
   105b6:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   105b8:	78bb      	ldrb	r3, [r7, #2]
   105ba:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   105bc:	687b      	ldr	r3, [r7, #4]
   105be:	68db      	ldr	r3, [r3, #12]
   105c0:	f107 010c 	add.w	r1, r7, #12
   105c4:	2202      	movs	r2, #2
   105c6:	4618      	mov	r0, r3
   105c8:	4b04      	ldr	r3, [pc, #16]	; (105dc <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   105ca:	4798      	blx	r3
   105cc:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   105ce:	4618      	mov	r0, r3
   105d0:	3710      	adds	r7, #16
   105d2:	46bd      	mov	sp, r7
   105d4:	bd80      	pop	{r7, pc}
   105d6:	bf00      	nop
   105d8:	0000d1d5 	.word	0x0000d1d5
   105dc:	0000d201 	.word	0x0000d201

000105e0 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   105e0:	b580      	push	{r7, lr}
   105e2:	b082      	sub	sp, #8
   105e4:	af00      	add	r7, sp, #0
   105e6:	6078      	str	r0, [r7, #4]
   105e8:	460b      	mov	r3, r1
   105ea:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   105ec:	687b      	ldr	r3, [r7, #4]
   105ee:	68da      	ldr	r2, [r3, #12]
   105f0:	687b      	ldr	r3, [r7, #4]
   105f2:	7a1b      	ldrb	r3, [r3, #8]
   105f4:	4619      	mov	r1, r3
   105f6:	4610      	mov	r0, r2
   105f8:	4b06      	ldr	r3, [pc, #24]	; (10614 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   105fa:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   105fc:	78fb      	ldrb	r3, [r7, #3]
   105fe:	461a      	mov	r2, r3
   10600:	2109      	movs	r1, #9
   10602:	6878      	ldr	r0, [r7, #4]
   10604:	4b04      	ldr	r3, [pc, #16]	; (10618 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   10606:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   10608:	78fb      	ldrb	r3, [r7, #3]
}
   1060a:	4618      	mov	r0, r3
   1060c:	3708      	adds	r7, #8
   1060e:	46bd      	mov	sp, r7
   10610:	bd80      	pop	{r7, pc}
   10612:	bf00      	nop
   10614:	0000d1d5 	.word	0x0000d1d5
   10618:	00010595 	.word	0x00010595

0001061c <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   1061c:	b580      	push	{r7, lr}
   1061e:	b084      	sub	sp, #16
   10620:	af00      	add	r7, sp, #0
   10622:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   10624:	2300      	movs	r3, #0
   10626:	73fb      	strb	r3, [r7, #15]
   10628:	7bfb      	ldrb	r3, [r7, #15]
   1062a:	2b07      	cmp	r3, #7
   1062c:	dc0f      	bgt.n	1064e <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   1062e:	7bfb      	ldrb	r3, [r7, #15]
   10630:	2201      	movs	r2, #1
   10632:	4619      	mov	r1, r3
   10634:	6878      	ldr	r0, [r7, #4]
   10636:	4b08      	ldr	r3, [pc, #32]	; (10658 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   10638:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   1063a:	7bfb      	ldrb	r3, [r7, #15]
   1063c:	2201      	movs	r2, #1
   1063e:	4619      	mov	r1, r3
   10640:	6878      	ldr	r0, [r7, #4]
   10642:	4b06      	ldr	r3, [pc, #24]	; (1065c <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   10644:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   10646:	7bfb      	ldrb	r3, [r7, #15]
   10648:	3301      	adds	r3, #1
   1064a:	73fb      	strb	r3, [r7, #15]
   1064c:	e7ec      	b.n	10628 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   1064e:	bf00      	nop
   10650:	3710      	adds	r7, #16
   10652:	46bd      	mov	sp, r7
   10654:	bd80      	pop	{r7, pc}
   10656:	bf00      	nop
   10658:	00010795 	.word	0x00010795
   1065c:	000107cd 	.word	0x000107cd

00010660 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   10660:	b580      	push	{r7, lr}
   10662:	b084      	sub	sp, #16
   10664:	af00      	add	r7, sp, #0
   10666:	6078      	str	r0, [r7, #4]
   10668:	460b      	mov	r3, r1
   1066a:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   1066c:	78fb      	ldrb	r3, [r7, #3]
   1066e:	2b00      	cmp	r3, #0
   10670:	dd23      	ble.n	106ba <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   10672:	2300      	movs	r3, #0
   10674:	73fb      	strb	r3, [r7, #15]
   10676:	7bfb      	ldrb	r3, [r7, #15]
   10678:	2b07      	cmp	r3, #7
   1067a:	dc21      	bgt.n	106c0 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   1067c:	78fa      	ldrb	r2, [r7, #3]
   1067e:	7bfb      	ldrb	r3, [r7, #15]
   10680:	fa42 f303 	asr.w	r3, r2, r3
   10684:	f003 0301 	and.w	r3, r3, #1
   10688:	2b00      	cmp	r3, #0
   1068a:	d00c      	beq.n	106a6 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   1068c:	7bfb      	ldrb	r3, [r7, #15]
   1068e:	2201      	movs	r2, #1
   10690:	4619      	mov	r1, r3
   10692:	6878      	ldr	r0, [r7, #4]
   10694:	4b0c      	ldr	r3, [pc, #48]	; (106c8 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   10696:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   10698:	7bfb      	ldrb	r3, [r7, #15]
   1069a:	2201      	movs	r2, #1
   1069c:	4619      	mov	r1, r3
   1069e:	6878      	ldr	r0, [r7, #4]
   106a0:	4b0a      	ldr	r3, [pc, #40]	; (106cc <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   106a2:	4798      	blx	r3
   106a4:	e005      	b.n	106b2 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   106a6:	7bfb      	ldrb	r3, [r7, #15]
   106a8:	2200      	movs	r2, #0
   106aa:	4619      	mov	r1, r3
   106ac:	6878      	ldr	r0, [r7, #4]
   106ae:	4b06      	ldr	r3, [pc, #24]	; (106c8 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   106b0:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   106b2:	7bfb      	ldrb	r3, [r7, #15]
   106b4:	3301      	adds	r3, #1
   106b6:	73fb      	strb	r3, [r7, #15]
   106b8:	e7dd      	b.n	10676 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   106ba:	6878      	ldr	r0, [r7, #4]
   106bc:	4b04      	ldr	r3, [pc, #16]	; (106d0 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   106be:	4798      	blx	r3
	}
	
}
   106c0:	bf00      	nop
   106c2:	3710      	adds	r7, #16
   106c4:	46bd      	mov	sp, r7
   106c6:	bd80      	pop	{r7, pc}
   106c8:	00010795 	.word	0x00010795
   106cc:	000107cd 	.word	0x000107cd
   106d0:	000106d5 	.word	0x000106d5

000106d4 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   106d4:	b580      	push	{r7, lr}
   106d6:	b084      	sub	sp, #16
   106d8:	af00      	add	r7, sp, #0
   106da:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   106dc:	2300      	movs	r3, #0
   106de:	73fb      	strb	r3, [r7, #15]
   106e0:	7bfb      	ldrb	r3, [r7, #15]
   106e2:	2b07      	cmp	r3, #7
   106e4:	dc09      	bgt.n	106fa <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   106e6:	7bfb      	ldrb	r3, [r7, #15]
   106e8:	2200      	movs	r2, #0
   106ea:	4619      	mov	r1, r3
   106ec:	6878      	ldr	r0, [r7, #4]
   106ee:	4b05      	ldr	r3, [pc, #20]	; (10704 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   106f0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   106f2:	7bfb      	ldrb	r3, [r7, #15]
   106f4:	3301      	adds	r3, #1
   106f6:	73fb      	strb	r3, [r7, #15]
   106f8:	e7f2      	b.n	106e0 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   106fa:	bf00      	nop
   106fc:	3710      	adds	r7, #16
   106fe:	46bd      	mov	sp, r7
   10700:	bd80      	pop	{r7, pc}
   10702:	bf00      	nop
   10704:	00010795 	.word	0x00010795

00010708 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   10708:	b580      	push	{r7, lr}
   1070a:	b084      	sub	sp, #16
   1070c:	af00      	add	r7, sp, #0
   1070e:	6078      	str	r0, [r7, #4]
   10710:	4608      	mov	r0, r1
   10712:	4611      	mov	r1, r2
   10714:	461a      	mov	r2, r3
   10716:	4603      	mov	r3, r0
   10718:	70fb      	strb	r3, [r7, #3]
   1071a:	460b      	mov	r3, r1
   1071c:	70bb      	strb	r3, [r7, #2]
   1071e:	4613      	mov	r3, r2
   10720:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   10722:	787b      	ldrb	r3, [r7, #1]
   10724:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   10726:	78fb      	ldrb	r3, [r7, #3]
   10728:	4619      	mov	r1, r3
   1072a:	6878      	ldr	r0, [r7, #4]
   1072c:	4b16      	ldr	r3, [pc, #88]	; (10788 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   1072e:	4798      	blx	r3
   10730:	4603      	mov	r3, r0
   10732:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   10734:	7bfb      	ldrb	r3, [r7, #15]
   10736:	4619      	mov	r1, r3
   10738:	6878      	ldr	r0, [r7, #4]
   1073a:	4b14      	ldr	r3, [pc, #80]	; (1078c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   1073c:	4798      	blx	r3
   1073e:	4603      	mov	r3, r0
   10740:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   10742:	78bb      	ldrb	r3, [r7, #2]
   10744:	2b00      	cmp	r3, #0
   10746:	d009      	beq.n	1075c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   10748:	7bba      	ldrb	r2, [r7, #14]
   1074a:	7b7b      	ldrb	r3, [r7, #13]
   1074c:	4619      	mov	r1, r3
   1074e:	2301      	movs	r3, #1
   10750:	408b      	lsls	r3, r1
   10752:	b2db      	uxtb	r3, r3
   10754:	4313      	orrs	r3, r2
   10756:	b2db      	uxtb	r3, r3
   10758:	73bb      	strb	r3, [r7, #14]
   1075a:	e00a      	b.n	10772 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   1075c:	7bba      	ldrb	r2, [r7, #14]
   1075e:	7b7b      	ldrb	r3, [r7, #13]
   10760:	4619      	mov	r1, r3
   10762:	2301      	movs	r3, #1
   10764:	408b      	lsls	r3, r1
   10766:	b2db      	uxtb	r3, r3
   10768:	43db      	mvns	r3, r3
   1076a:	b2db      	uxtb	r3, r3
   1076c:	4013      	ands	r3, r2
   1076e:	b2db      	uxtb	r3, r3
   10770:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   10772:	7bba      	ldrb	r2, [r7, #14]
   10774:	7bfb      	ldrb	r3, [r7, #15]
   10776:	4619      	mov	r1, r3
   10778:	6878      	ldr	r0, [r7, #4]
   1077a:	4b05      	ldr	r3, [pc, #20]	; (10790 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   1077c:	4798      	blx	r3
}
   1077e:	bf00      	nop
   10780:	3710      	adds	r7, #16
   10782:	46bd      	mov	sp, r7
   10784:	bd80      	pop	{r7, pc}
   10786:	bf00      	nop
   10788:	000104ef 	.word	0x000104ef
   1078c:	0001050d 	.word	0x0001050d
   10790:	00010595 	.word	0x00010595

00010794 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   10794:	b590      	push	{r4, r7, lr}
   10796:	b085      	sub	sp, #20
   10798:	af02      	add	r7, sp, #8
   1079a:	6078      	str	r0, [r7, #4]
   1079c:	460b      	mov	r3, r1
   1079e:	70fb      	strb	r3, [r7, #3]
   107a0:	4613      	mov	r3, r2
   107a2:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   107a4:	78bb      	ldrb	r3, [r7, #2]
   107a6:	2b01      	cmp	r3, #1
   107a8:	bf0c      	ite	eq
   107aa:	2301      	moveq	r3, #1
   107ac:	2300      	movne	r3, #0
   107ae:	b2db      	uxtb	r3, r3
   107b0:	461a      	mov	r2, r3
   107b2:	78f9      	ldrb	r1, [r7, #3]
   107b4:	2300      	movs	r3, #0
   107b6:	9300      	str	r3, [sp, #0]
   107b8:	2300      	movs	r3, #0
   107ba:	6878      	ldr	r0, [r7, #4]
   107bc:	4c02      	ldr	r4, [pc, #8]	; (107c8 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   107be:	47a0      	blx	r4
}
   107c0:	bf00      	nop
   107c2:	370c      	adds	r7, #12
   107c4:	46bd      	mov	sp, r7
   107c6:	bd90      	pop	{r4, r7, pc}
   107c8:	00010709 	.word	0x00010709

000107cc <_ZN14MCP23008_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	return	writeRegister(regAddr,gpio)==0;
}

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   107cc:	b590      	push	{r4, r7, lr}
   107ce:	b085      	sub	sp, #20
   107d0:	af02      	add	r7, sp, #8
   107d2:	6078      	str	r0, [r7, #4]
   107d4:	460b      	mov	r3, r1
   107d6:	70fb      	strb	r3, [r7, #3]
   107d8:	4613      	mov	r3, r2
   107da:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   107dc:	78ba      	ldrb	r2, [r7, #2]
   107de:	78f9      	ldrb	r1, [r7, #3]
   107e0:	2306      	movs	r3, #6
   107e2:	9300      	str	r3, [sp, #0]
   107e4:	2306      	movs	r3, #6
   107e6:	6878      	ldr	r0, [r7, #4]
   107e8:	4c02      	ldr	r4, [pc, #8]	; (107f4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   107ea:	47a0      	blx	r4
}
   107ec:	bf00      	nop
   107ee:	370c      	adds	r7, #12
   107f0:	46bd      	mov	sp, r7
   107f2:	bd90      	pop	{r4, r7, pc}
   107f4:	00010709 	.word	0x00010709

000107f8 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   107f8:	b580      	push	{r7, lr}
   107fa:	b082      	sub	sp, #8
   107fc:	af00      	add	r7, sp, #0
   107fe:	6078      	str	r0, [r7, #4]
   10800:	6039      	str	r1, [r7, #0]
   10802:	687b      	ldr	r3, [r7, #4]
   10804:	2b01      	cmp	r3, #1
   10806:	d10d      	bne.n	10824 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10808:	683b      	ldr	r3, [r7, #0]
   1080a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1080e:	4293      	cmp	r3, r2
   10810:	d108      	bne.n	10824 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10812:	4906      	ldr	r1, [pc, #24]	; (1082c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10814:	4806      	ldr	r0, [pc, #24]	; (10830 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10816:	4b07      	ldr	r3, [pc, #28]	; (10834 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10818:	4798      	blx	r3
   1081a:	4a07      	ldr	r2, [pc, #28]	; (10838 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1081c:	4907      	ldr	r1, [pc, #28]	; (1083c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1081e:	4804      	ldr	r0, [pc, #16]	; (10830 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10820:	4b07      	ldr	r3, [pc, #28]	; (10840 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   10822:	4798      	blx	r3
   10824:	bf00      	nop
   10826:	3708      	adds	r7, #8
   10828:	46bd      	mov	sp, r7
   1082a:	bd80      	pop	{r7, pc}
   1082c:	2000ae28 	.word	0x2000ae28
   10830:	200090a4 	.word	0x200090a4
   10834:	0000d0fd 	.word	0x0000d0fd
   10838:	20000000 	.word	0x20000000
   1083c:	0000d119 	.word	0x0000d119
   10840:	0001193d 	.word	0x0001193d

00010844 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   10844:	b580      	push	{r7, lr}
   10846:	af00      	add	r7, sp, #0
   10848:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1084c:	2001      	movs	r0, #1
   1084e:	4b01      	ldr	r3, [pc, #4]	; (10854 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   10850:	4798      	blx	r3
   10852:	bd80      	pop	{r7, pc}
   10854:	000107f9 	.word	0x000107f9

00010858 <hri_port_set_DIR_reg>:
{
   10858:	b480      	push	{r7}
   1085a:	b085      	sub	sp, #20
   1085c:	af00      	add	r7, sp, #0
   1085e:	60f8      	str	r0, [r7, #12]
   10860:	460b      	mov	r3, r1
   10862:	607a      	str	r2, [r7, #4]
   10864:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   10866:	7afb      	ldrb	r3, [r7, #11]
   10868:	68fa      	ldr	r2, [r7, #12]
   1086a:	01db      	lsls	r3, r3, #7
   1086c:	4413      	add	r3, r2
   1086e:	3308      	adds	r3, #8
   10870:	687a      	ldr	r2, [r7, #4]
   10872:	601a      	str	r2, [r3, #0]
}
   10874:	bf00      	nop
   10876:	3714      	adds	r7, #20
   10878:	46bd      	mov	sp, r7
   1087a:	bc80      	pop	{r7}
   1087c:	4770      	bx	lr

0001087e <hri_port_clear_DIR_reg>:
{
   1087e:	b480      	push	{r7}
   10880:	b085      	sub	sp, #20
   10882:	af00      	add	r7, sp, #0
   10884:	60f8      	str	r0, [r7, #12]
   10886:	460b      	mov	r3, r1
   10888:	607a      	str	r2, [r7, #4]
   1088a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   1088c:	7afb      	ldrb	r3, [r7, #11]
   1088e:	68fa      	ldr	r2, [r7, #12]
   10890:	01db      	lsls	r3, r3, #7
   10892:	4413      	add	r3, r2
   10894:	3304      	adds	r3, #4
   10896:	687a      	ldr	r2, [r7, #4]
   10898:	601a      	str	r2, [r3, #0]
}
   1089a:	bf00      	nop
   1089c:	3714      	adds	r7, #20
   1089e:	46bd      	mov	sp, r7
   108a0:	bc80      	pop	{r7}
   108a2:	4770      	bx	lr

000108a4 <hri_port_set_OUT_reg>:
{
   108a4:	b480      	push	{r7}
   108a6:	b085      	sub	sp, #20
   108a8:	af00      	add	r7, sp, #0
   108aa:	60f8      	str	r0, [r7, #12]
   108ac:	460b      	mov	r3, r1
   108ae:	607a      	str	r2, [r7, #4]
   108b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   108b2:	7afb      	ldrb	r3, [r7, #11]
   108b4:	68fa      	ldr	r2, [r7, #12]
   108b6:	01db      	lsls	r3, r3, #7
   108b8:	4413      	add	r3, r2
   108ba:	3318      	adds	r3, #24
   108bc:	687a      	ldr	r2, [r7, #4]
   108be:	601a      	str	r2, [r3, #0]
}
   108c0:	bf00      	nop
   108c2:	3714      	adds	r7, #20
   108c4:	46bd      	mov	sp, r7
   108c6:	bc80      	pop	{r7}
   108c8:	4770      	bx	lr

000108ca <hri_port_clear_OUT_reg>:
{
   108ca:	b480      	push	{r7}
   108cc:	b085      	sub	sp, #20
   108ce:	af00      	add	r7, sp, #0
   108d0:	60f8      	str	r0, [r7, #12]
   108d2:	460b      	mov	r3, r1
   108d4:	607a      	str	r2, [r7, #4]
   108d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   108d8:	7afb      	ldrb	r3, [r7, #11]
   108da:	68fa      	ldr	r2, [r7, #12]
   108dc:	01db      	lsls	r3, r3, #7
   108de:	4413      	add	r3, r2
   108e0:	3314      	adds	r3, #20
   108e2:	687a      	ldr	r2, [r7, #4]
   108e4:	601a      	str	r2, [r3, #0]
}
   108e6:	bf00      	nop
   108e8:	3714      	adds	r7, #20
   108ea:	46bd      	mov	sp, r7
   108ec:	bc80      	pop	{r7}
   108ee:	4770      	bx	lr

000108f0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   108f0:	b480      	push	{r7}
   108f2:	b085      	sub	sp, #20
   108f4:	af00      	add	r7, sp, #0
   108f6:	6078      	str	r0, [r7, #4]
   108f8:	4608      	mov	r0, r1
   108fa:	4611      	mov	r1, r2
   108fc:	461a      	mov	r2, r3
   108fe:	4603      	mov	r3, r0
   10900:	70fb      	strb	r3, [r7, #3]
   10902:	460b      	mov	r3, r1
   10904:	70bb      	strb	r3, [r7, #2]
   10906:	4613      	mov	r3, r2
   10908:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1090a:	78fa      	ldrb	r2, [r7, #3]
   1090c:	78bb      	ldrb	r3, [r7, #2]
   1090e:	6879      	ldr	r1, [r7, #4]
   10910:	01d2      	lsls	r2, r2, #7
   10912:	440a      	add	r2, r1
   10914:	4413      	add	r3, r2
   10916:	3330      	adds	r3, #48	; 0x30
   10918:	781b      	ldrb	r3, [r3, #0]
   1091a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   1091c:	7bfb      	ldrb	r3, [r7, #15]
   1091e:	f023 030f 	bic.w	r3, r3, #15
   10922:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10924:	787b      	ldrb	r3, [r7, #1]
   10926:	f003 030f 	and.w	r3, r3, #15
   1092a:	b2da      	uxtb	r2, r3
   1092c:	7bfb      	ldrb	r3, [r7, #15]
   1092e:	4313      	orrs	r3, r2
   10930:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10932:	78fa      	ldrb	r2, [r7, #3]
   10934:	78bb      	ldrb	r3, [r7, #2]
   10936:	6879      	ldr	r1, [r7, #4]
   10938:	01d2      	lsls	r2, r2, #7
   1093a:	440a      	add	r2, r1
   1093c:	4413      	add	r3, r2
   1093e:	3330      	adds	r3, #48	; 0x30
   10940:	7bfa      	ldrb	r2, [r7, #15]
   10942:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10944:	bf00      	nop
   10946:	3714      	adds	r7, #20
   10948:	46bd      	mov	sp, r7
   1094a:	bc80      	pop	{r7}
   1094c:	4770      	bx	lr

0001094e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1094e:	b480      	push	{r7}
   10950:	b085      	sub	sp, #20
   10952:	af00      	add	r7, sp, #0
   10954:	6078      	str	r0, [r7, #4]
   10956:	4608      	mov	r0, r1
   10958:	4611      	mov	r1, r2
   1095a:	461a      	mov	r2, r3
   1095c:	4603      	mov	r3, r0
   1095e:	70fb      	strb	r3, [r7, #3]
   10960:	460b      	mov	r3, r1
   10962:	70bb      	strb	r3, [r7, #2]
   10964:	4613      	mov	r3, r2
   10966:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10968:	78fa      	ldrb	r2, [r7, #3]
   1096a:	78bb      	ldrb	r3, [r7, #2]
   1096c:	6879      	ldr	r1, [r7, #4]
   1096e:	01d2      	lsls	r2, r2, #7
   10970:	440a      	add	r2, r1
   10972:	4413      	add	r3, r2
   10974:	3330      	adds	r3, #48	; 0x30
   10976:	781b      	ldrb	r3, [r3, #0]
   10978:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1097a:	7bfb      	ldrb	r3, [r7, #15]
   1097c:	f003 030f 	and.w	r3, r3, #15
   10980:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10982:	787b      	ldrb	r3, [r7, #1]
   10984:	011b      	lsls	r3, r3, #4
   10986:	b2da      	uxtb	r2, r3
   10988:	7bfb      	ldrb	r3, [r7, #15]
   1098a:	4313      	orrs	r3, r2
   1098c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1098e:	78fa      	ldrb	r2, [r7, #3]
   10990:	78bb      	ldrb	r3, [r7, #2]
   10992:	6879      	ldr	r1, [r7, #4]
   10994:	01d2      	lsls	r2, r2, #7
   10996:	440a      	add	r2, r1
   10998:	4413      	add	r3, r2
   1099a:	3330      	adds	r3, #48	; 0x30
   1099c:	7bfa      	ldrb	r2, [r7, #15]
   1099e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   109a0:	bf00      	nop
   109a2:	3714      	adds	r7, #20
   109a4:	46bd      	mov	sp, r7
   109a6:	bc80      	pop	{r7}
   109a8:	4770      	bx	lr

000109aa <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   109aa:	b480      	push	{r7}
   109ac:	b085      	sub	sp, #20
   109ae:	af00      	add	r7, sp, #0
   109b0:	6078      	str	r0, [r7, #4]
   109b2:	4608      	mov	r0, r1
   109b4:	4611      	mov	r1, r2
   109b6:	461a      	mov	r2, r3
   109b8:	4603      	mov	r3, r0
   109ba:	70fb      	strb	r3, [r7, #3]
   109bc:	460b      	mov	r3, r1
   109be:	70bb      	strb	r3, [r7, #2]
   109c0:	4613      	mov	r3, r2
   109c2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   109c4:	78fa      	ldrb	r2, [r7, #3]
   109c6:	78bb      	ldrb	r3, [r7, #2]
   109c8:	6879      	ldr	r1, [r7, #4]
   109ca:	01d2      	lsls	r2, r2, #7
   109cc:	440a      	add	r2, r1
   109ce:	4413      	add	r3, r2
   109d0:	3340      	adds	r3, #64	; 0x40
   109d2:	781b      	ldrb	r3, [r3, #0]
   109d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   109d6:	7bfb      	ldrb	r3, [r7, #15]
   109d8:	f023 0301 	bic.w	r3, r3, #1
   109dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   109de:	787a      	ldrb	r2, [r7, #1]
   109e0:	7bfb      	ldrb	r3, [r7, #15]
   109e2:	4313      	orrs	r3, r2
   109e4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   109e6:	78fa      	ldrb	r2, [r7, #3]
   109e8:	78bb      	ldrb	r3, [r7, #2]
   109ea:	6879      	ldr	r1, [r7, #4]
   109ec:	01d2      	lsls	r2, r2, #7
   109ee:	440a      	add	r2, r1
   109f0:	4413      	add	r3, r2
   109f2:	3340      	adds	r3, #64	; 0x40
   109f4:	7bfa      	ldrb	r2, [r7, #15]
   109f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   109f8:	bf00      	nop
   109fa:	3714      	adds	r7, #20
   109fc:	46bd      	mov	sp, r7
   109fe:	bc80      	pop	{r7}
   10a00:	4770      	bx	lr

00010a02 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   10a02:	b480      	push	{r7}
   10a04:	b085      	sub	sp, #20
   10a06:	af00      	add	r7, sp, #0
   10a08:	60f8      	str	r0, [r7, #12]
   10a0a:	460b      	mov	r3, r1
   10a0c:	607a      	str	r2, [r7, #4]
   10a0e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   10a10:	7afb      	ldrb	r3, [r7, #11]
   10a12:	68fa      	ldr	r2, [r7, #12]
   10a14:	01db      	lsls	r3, r3, #7
   10a16:	4413      	add	r3, r2
   10a18:	3328      	adds	r3, #40	; 0x28
   10a1a:	687a      	ldr	r2, [r7, #4]
   10a1c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10a1e:	bf00      	nop
   10a20:	3714      	adds	r7, #20
   10a22:	46bd      	mov	sp, r7
   10a24:	bc80      	pop	{r7}
   10a26:	4770      	bx	lr

00010a28 <_gpio_set_direction>:
{
   10a28:	b580      	push	{r7, lr}
   10a2a:	b082      	sub	sp, #8
   10a2c:	af00      	add	r7, sp, #0
   10a2e:	4603      	mov	r3, r0
   10a30:	6039      	str	r1, [r7, #0]
   10a32:	71fb      	strb	r3, [r7, #7]
   10a34:	4613      	mov	r3, r2
   10a36:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10a38:	79bb      	ldrb	r3, [r7, #6]
   10a3a:	2b01      	cmp	r3, #1
   10a3c:	d01c      	beq.n	10a78 <_gpio_set_direction+0x50>
   10a3e:	2b02      	cmp	r3, #2
   10a40:	d037      	beq.n	10ab2 <_gpio_set_direction+0x8a>
   10a42:	2b00      	cmp	r3, #0
   10a44:	d14e      	bne.n	10ae4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10a46:	79fb      	ldrb	r3, [r7, #7]
   10a48:	683a      	ldr	r2, [r7, #0]
   10a4a:	4619      	mov	r1, r3
   10a4c:	482a      	ldr	r0, [pc, #168]	; (10af8 <_gpio_set_direction+0xd0>)
   10a4e:	4b2b      	ldr	r3, [pc, #172]	; (10afc <_gpio_set_direction+0xd4>)
   10a50:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10a52:	683b      	ldr	r3, [r7, #0]
   10a54:	b29b      	uxth	r3, r3
   10a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10a5a:	79fb      	ldrb	r3, [r7, #7]
   10a5c:	4619      	mov	r1, r3
   10a5e:	4826      	ldr	r0, [pc, #152]	; (10af8 <_gpio_set_direction+0xd0>)
   10a60:	4b27      	ldr	r3, [pc, #156]	; (10b00 <_gpio_set_direction+0xd8>)
   10a62:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10a64:	683b      	ldr	r3, [r7, #0]
   10a66:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10a68:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10a6c:	79fb      	ldrb	r3, [r7, #7]
   10a6e:	4619      	mov	r1, r3
   10a70:	4821      	ldr	r0, [pc, #132]	; (10af8 <_gpio_set_direction+0xd0>)
   10a72:	4b23      	ldr	r3, [pc, #140]	; (10b00 <_gpio_set_direction+0xd8>)
   10a74:	4798      	blx	r3
		break;
   10a76:	e03a      	b.n	10aee <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10a78:	79fb      	ldrb	r3, [r7, #7]
   10a7a:	683a      	ldr	r2, [r7, #0]
   10a7c:	4619      	mov	r1, r3
   10a7e:	481e      	ldr	r0, [pc, #120]	; (10af8 <_gpio_set_direction+0xd0>)
   10a80:	4b1e      	ldr	r3, [pc, #120]	; (10afc <_gpio_set_direction+0xd4>)
   10a82:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   10a84:	683b      	ldr	r3, [r7, #0]
   10a86:	b29b      	uxth	r3, r3
   10a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10a90:	79f9      	ldrb	r1, [r7, #7]
   10a92:	461a      	mov	r2, r3
   10a94:	4818      	ldr	r0, [pc, #96]	; (10af8 <_gpio_set_direction+0xd0>)
   10a96:	4b1a      	ldr	r3, [pc, #104]	; (10b00 <_gpio_set_direction+0xd8>)
   10a98:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   10a9a:	683b      	ldr	r3, [r7, #0]
   10a9c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   10a9e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   10aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   10aa6:	79f9      	ldrb	r1, [r7, #7]
   10aa8:	461a      	mov	r2, r3
   10aaa:	4813      	ldr	r0, [pc, #76]	; (10af8 <_gpio_set_direction+0xd0>)
   10aac:	4b14      	ldr	r3, [pc, #80]	; (10b00 <_gpio_set_direction+0xd8>)
   10aae:	4798      	blx	r3
		break;
   10ab0:	e01d      	b.n	10aee <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   10ab2:	79fb      	ldrb	r3, [r7, #7]
   10ab4:	683a      	ldr	r2, [r7, #0]
   10ab6:	4619      	mov	r1, r3
   10ab8:	480f      	ldr	r0, [pc, #60]	; (10af8 <_gpio_set_direction+0xd0>)
   10aba:	4b12      	ldr	r3, [pc, #72]	; (10b04 <_gpio_set_direction+0xdc>)
   10abc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10abe:	683b      	ldr	r3, [r7, #0]
   10ac0:	b29b      	uxth	r3, r3
   10ac2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10ac6:	79fb      	ldrb	r3, [r7, #7]
   10ac8:	4619      	mov	r1, r3
   10aca:	480b      	ldr	r0, [pc, #44]	; (10af8 <_gpio_set_direction+0xd0>)
   10acc:	4b0c      	ldr	r3, [pc, #48]	; (10b00 <_gpio_set_direction+0xd8>)
   10ace:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10ad0:	683b      	ldr	r3, [r7, #0]
   10ad2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10ad4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10ad8:	79fb      	ldrb	r3, [r7, #7]
   10ada:	4619      	mov	r1, r3
   10adc:	4806      	ldr	r0, [pc, #24]	; (10af8 <_gpio_set_direction+0xd0>)
   10ade:	4b08      	ldr	r3, [pc, #32]	; (10b00 <_gpio_set_direction+0xd8>)
   10ae0:	4798      	blx	r3
		break;
   10ae2:	e004      	b.n	10aee <_gpio_set_direction+0xc6>
		ASSERT(false);
   10ae4:	2246      	movs	r2, #70	; 0x46
   10ae6:	4908      	ldr	r1, [pc, #32]	; (10b08 <_gpio_set_direction+0xe0>)
   10ae8:	2000      	movs	r0, #0
   10aea:	4b08      	ldr	r3, [pc, #32]	; (10b0c <_gpio_set_direction+0xe4>)
   10aec:	4798      	blx	r3
}
   10aee:	bf00      	nop
   10af0:	3708      	adds	r7, #8
   10af2:	46bd      	mov	sp, r7
   10af4:	bd80      	pop	{r7, pc}
   10af6:	bf00      	nop
   10af8:	41008000 	.word	0x41008000
   10afc:	0001087f 	.word	0x0001087f
   10b00:	00010a03 	.word	0x00010a03
   10b04:	00010859 	.word	0x00010859
   10b08:	00012510 	.word	0x00012510
   10b0c:	00003681 	.word	0x00003681

00010b10 <_gpio_set_level>:
{
   10b10:	b580      	push	{r7, lr}
   10b12:	b082      	sub	sp, #8
   10b14:	af00      	add	r7, sp, #0
   10b16:	4603      	mov	r3, r0
   10b18:	6039      	str	r1, [r7, #0]
   10b1a:	71fb      	strb	r3, [r7, #7]
   10b1c:	4613      	mov	r3, r2
   10b1e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10b20:	79bb      	ldrb	r3, [r7, #6]
   10b22:	2b00      	cmp	r3, #0
   10b24:	d006      	beq.n	10b34 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10b26:	79fb      	ldrb	r3, [r7, #7]
   10b28:	683a      	ldr	r2, [r7, #0]
   10b2a:	4619      	mov	r1, r3
   10b2c:	4806      	ldr	r0, [pc, #24]	; (10b48 <_gpio_set_level+0x38>)
   10b2e:	4b07      	ldr	r3, [pc, #28]	; (10b4c <_gpio_set_level+0x3c>)
   10b30:	4798      	blx	r3
}
   10b32:	e005      	b.n	10b40 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10b34:	79fb      	ldrb	r3, [r7, #7]
   10b36:	683a      	ldr	r2, [r7, #0]
   10b38:	4619      	mov	r1, r3
   10b3a:	4803      	ldr	r0, [pc, #12]	; (10b48 <_gpio_set_level+0x38>)
   10b3c:	4b04      	ldr	r3, [pc, #16]	; (10b50 <_gpio_set_level+0x40>)
   10b3e:	4798      	blx	r3
}
   10b40:	bf00      	nop
   10b42:	3708      	adds	r7, #8
   10b44:	46bd      	mov	sp, r7
   10b46:	bd80      	pop	{r7, pc}
   10b48:	41008000 	.word	0x41008000
   10b4c:	000108a5 	.word	0x000108a5
   10b50:	000108cb 	.word	0x000108cb

00010b54 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   10b54:	b590      	push	{r4, r7, lr}
   10b56:	b085      	sub	sp, #20
   10b58:	af00      	add	r7, sp, #0
   10b5a:	6078      	str	r0, [r7, #4]
   10b5c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10b5e:	687b      	ldr	r3, [r7, #4]
   10b60:	095b      	lsrs	r3, r3, #5
   10b62:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10b64:	687b      	ldr	r3, [r7, #4]
   10b66:	b2db      	uxtb	r3, r3
   10b68:	f003 031f 	and.w	r3, r3, #31
   10b6c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   10b6e:	683b      	ldr	r3, [r7, #0]
   10b70:	f1b3 3fff 	cmp.w	r3, #4294967295
   10b74:	d106      	bne.n	10b84 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10b76:	7bba      	ldrb	r2, [r7, #14]
   10b78:	7bf9      	ldrb	r1, [r7, #15]
   10b7a:	2300      	movs	r3, #0
   10b7c:	4812      	ldr	r0, [pc, #72]	; (10bc8 <_gpio_set_pin_function+0x74>)
   10b7e:	4c13      	ldr	r4, [pc, #76]	; (10bcc <_gpio_set_pin_function+0x78>)
   10b80:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   10b82:	e01d      	b.n	10bc0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10b84:	7bba      	ldrb	r2, [r7, #14]
   10b86:	7bf9      	ldrb	r1, [r7, #15]
   10b88:	2301      	movs	r3, #1
   10b8a:	480f      	ldr	r0, [pc, #60]	; (10bc8 <_gpio_set_pin_function+0x74>)
   10b8c:	4c0f      	ldr	r4, [pc, #60]	; (10bcc <_gpio_set_pin_function+0x78>)
   10b8e:	47a0      	blx	r4
		if (pin & 1) {
   10b90:	7bbb      	ldrb	r3, [r7, #14]
   10b92:	f003 0301 	and.w	r3, r3, #1
   10b96:	2b00      	cmp	r3, #0
   10b98:	d009      	beq.n	10bae <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10b9a:	7bbb      	ldrb	r3, [r7, #14]
   10b9c:	105b      	asrs	r3, r3, #1
   10b9e:	b2da      	uxtb	r2, r3
   10ba0:	683b      	ldr	r3, [r7, #0]
   10ba2:	b2db      	uxtb	r3, r3
   10ba4:	7bf9      	ldrb	r1, [r7, #15]
   10ba6:	4808      	ldr	r0, [pc, #32]	; (10bc8 <_gpio_set_pin_function+0x74>)
   10ba8:	4c09      	ldr	r4, [pc, #36]	; (10bd0 <_gpio_set_pin_function+0x7c>)
   10baa:	47a0      	blx	r4
}
   10bac:	e008      	b.n	10bc0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   10bae:	7bbb      	ldrb	r3, [r7, #14]
   10bb0:	105b      	asrs	r3, r3, #1
   10bb2:	b2da      	uxtb	r2, r3
   10bb4:	683b      	ldr	r3, [r7, #0]
   10bb6:	b2db      	uxtb	r3, r3
   10bb8:	7bf9      	ldrb	r1, [r7, #15]
   10bba:	4803      	ldr	r0, [pc, #12]	; (10bc8 <_gpio_set_pin_function+0x74>)
   10bbc:	4c05      	ldr	r4, [pc, #20]	; (10bd4 <_gpio_set_pin_function+0x80>)
   10bbe:	47a0      	blx	r4
}
   10bc0:	bf00      	nop
   10bc2:	3714      	adds	r7, #20
   10bc4:	46bd      	mov	sp, r7
   10bc6:	bd90      	pop	{r4, r7, pc}
   10bc8:	41008000 	.word	0x41008000
   10bcc:	000109ab 	.word	0x000109ab
   10bd0:	0001094f 	.word	0x0001094f
   10bd4:	000108f1 	.word	0x000108f1

00010bd8 <gpio_set_pin_function>:
{
   10bd8:	b580      	push	{r7, lr}
   10bda:	b082      	sub	sp, #8
   10bdc:	af00      	add	r7, sp, #0
   10bde:	6078      	str	r0, [r7, #4]
   10be0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10be2:	6839      	ldr	r1, [r7, #0]
   10be4:	6878      	ldr	r0, [r7, #4]
   10be6:	4b03      	ldr	r3, [pc, #12]	; (10bf4 <gpio_set_pin_function+0x1c>)
   10be8:	4798      	blx	r3
}
   10bea:	bf00      	nop
   10bec:	3708      	adds	r7, #8
   10bee:	46bd      	mov	sp, r7
   10bf0:	bd80      	pop	{r7, pc}
   10bf2:	bf00      	nop
   10bf4:	00010b55 	.word	0x00010b55

00010bf8 <gpio_set_pin_direction>:
{
   10bf8:	b580      	push	{r7, lr}
   10bfa:	b082      	sub	sp, #8
   10bfc:	af00      	add	r7, sp, #0
   10bfe:	4603      	mov	r3, r0
   10c00:	460a      	mov	r2, r1
   10c02:	71fb      	strb	r3, [r7, #7]
   10c04:	4613      	mov	r3, r2
   10c06:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10c08:	79fb      	ldrb	r3, [r7, #7]
   10c0a:	115b      	asrs	r3, r3, #5
   10c0c:	b2d8      	uxtb	r0, r3
   10c0e:	79fb      	ldrb	r3, [r7, #7]
   10c10:	f003 031f 	and.w	r3, r3, #31
   10c14:	2201      	movs	r2, #1
   10c16:	fa02 f303 	lsl.w	r3, r2, r3
   10c1a:	79ba      	ldrb	r2, [r7, #6]
   10c1c:	4619      	mov	r1, r3
   10c1e:	4b03      	ldr	r3, [pc, #12]	; (10c2c <gpio_set_pin_direction+0x34>)
   10c20:	4798      	blx	r3
}
   10c22:	bf00      	nop
   10c24:	3708      	adds	r7, #8
   10c26:	46bd      	mov	sp, r7
   10c28:	bd80      	pop	{r7, pc}
   10c2a:	bf00      	nop
   10c2c:	00010a29 	.word	0x00010a29

00010c30 <gpio_set_pin_level>:
{
   10c30:	b580      	push	{r7, lr}
   10c32:	b082      	sub	sp, #8
   10c34:	af00      	add	r7, sp, #0
   10c36:	4603      	mov	r3, r0
   10c38:	460a      	mov	r2, r1
   10c3a:	71fb      	strb	r3, [r7, #7]
   10c3c:	4613      	mov	r3, r2
   10c3e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10c40:	79fb      	ldrb	r3, [r7, #7]
   10c42:	115b      	asrs	r3, r3, #5
   10c44:	b2d8      	uxtb	r0, r3
   10c46:	79fb      	ldrb	r3, [r7, #7]
   10c48:	f003 031f 	and.w	r3, r3, #31
   10c4c:	2201      	movs	r2, #1
   10c4e:	fa02 f303 	lsl.w	r3, r2, r3
   10c52:	79ba      	ldrb	r2, [r7, #6]
   10c54:	4619      	mov	r1, r3
   10c56:	4b03      	ldr	r3, [pc, #12]	; (10c64 <gpio_set_pin_level+0x34>)
   10c58:	4798      	blx	r3
}
   10c5a:	bf00      	nop
   10c5c:	3708      	adds	r7, #8
   10c5e:	46bd      	mov	sp, r7
   10c60:	bd80      	pop	{r7, pc}
   10c62:	bf00      	nop
   10c64:	00010b11 	.word	0x00010b11

00010c68 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   10c68:	b580      	push	{r7, lr}
   10c6a:	b082      	sub	sp, #8
   10c6c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10c6e:	2100      	movs	r1, #0
   10c70:	2008      	movs	r0, #8
   10c72:	4b24      	ldr	r3, [pc, #144]	; (10d04 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10c74:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10c76:	2100      	movs	r1, #0
   10c78:	202b      	movs	r0, #43	; 0x2b
   10c7a:	4b22      	ldr	r3, [pc, #136]	; (10d04 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10c7c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10c7e:	2100      	movs	r1, #0
   10c80:	202a      	movs	r0, #42	; 0x2a
   10c82:	4b20      	ldr	r3, [pc, #128]	; (10d04 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   10c84:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10c86:	2102      	movs	r1, #2
   10c88:	2008      	movs	r0, #8
   10c8a:	4b1f      	ldr	r3, [pc, #124]	; (10d08 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10c8c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10c8e:	2102      	movs	r1, #2
   10c90:	202b      	movs	r0, #43	; 0x2b
   10c92:	4b1d      	ldr	r3, [pc, #116]	; (10d08 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10c94:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10c96:	2102      	movs	r1, #2
   10c98:	202a      	movs	r0, #42	; 0x2a
   10c9a:	4b1b      	ldr	r3, [pc, #108]	; (10d08 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10c9c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   10c9e:	2101      	movs	r1, #1
   10ca0:	2008      	movs	r0, #8
   10ca2:	4b1a      	ldr	r3, [pc, #104]	; (10d0c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10ca4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10ca6:	2100      	movs	r1, #0
   10ca8:	202b      	movs	r0, #43	; 0x2b
   10caa:	4b18      	ldr	r3, [pc, #96]	; (10d0c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10cac:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   10cae:	2100      	movs	r1, #0
   10cb0:	202a      	movs	r0, #42	; 0x2a
   10cb2:	4b16      	ldr	r3, [pc, #88]	; (10d0c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10cb4:	4798      	blx	r3

	delay_us(1);
   10cb6:	2001      	movs	r0, #1
   10cb8:	4b15      	ldr	r3, [pc, #84]	; (10d10 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10cba:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10cbc:	2300      	movs	r3, #0
   10cbe:	607b      	str	r3, [r7, #4]
   10cc0:	687b      	ldr	r3, [r7, #4]
   10cc2:	2b06      	cmp	r3, #6
   10cc4:	dc11      	bgt.n	10cea <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   10cc6:	2101      	movs	r1, #1
   10cc8:	202a      	movs	r0, #42	; 0x2a
   10cca:	4b10      	ldr	r3, [pc, #64]	; (10d0c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10ccc:	4798      	blx	r3
		delay_us(1);
   10cce:	2001      	movs	r0, #1
   10cd0:	4b0f      	ldr	r3, [pc, #60]	; (10d10 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10cd2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10cd4:	2100      	movs	r1, #0
   10cd6:	202a      	movs	r0, #42	; 0x2a
   10cd8:	4b0c      	ldr	r3, [pc, #48]	; (10d0c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10cda:	4798      	blx	r3
		delay_us(1);
   10cdc:	2001      	movs	r0, #1
   10cde:	4b0c      	ldr	r3, [pc, #48]	; (10d10 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10ce0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   10ce2:	687b      	ldr	r3, [r7, #4]
   10ce4:	3301      	adds	r3, #1
   10ce6:	607b      	str	r3, [r7, #4]
   10ce8:	e7ea      	b.n	10cc0 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10cea:	2101      	movs	r1, #1
   10cec:	202b      	movs	r0, #43	; 0x2b
   10cee:	4b07      	ldr	r3, [pc, #28]	; (10d0c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10cf0:	4798      	blx	r3
	delay_us(1);
   10cf2:	2001      	movs	r0, #1
   10cf4:	4b06      	ldr	r3, [pc, #24]	; (10d10 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10cf6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10cf8:	4b06      	ldr	r3, [pc, #24]	; (10d14 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   10cfa:	4798      	blx	r3
}
   10cfc:	bf00      	nop
   10cfe:	3708      	adds	r7, #8
   10d00:	46bd      	mov	sp, r7
   10d02:	bd80      	pop	{r7, pc}
   10d04:	00010bd9 	.word	0x00010bd9
   10d08:	00010bf9 	.word	0x00010bf9
   10d0c:	00010c31 	.word	0x00010c31
   10d10:	000020b1 	.word	0x000020b1
   10d14:	000011a1 	.word	0x000011a1

00010d18 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   10d18:	b480      	push	{r7}
   10d1a:	b083      	sub	sp, #12
   10d1c:	af00      	add	r7, sp, #0
   10d1e:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   10d20:	687b      	ldr	r3, [r7, #4]
   10d22:	4618      	mov	r0, r3
   10d24:	370c      	adds	r7, #12
   10d26:	46bd      	mov	sp, r7
   10d28:	bc80      	pop	{r7}
   10d2a:	4770      	bx	lr

00010d2c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   10d2c:	b480      	push	{r7}
   10d2e:	b083      	sub	sp, #12
   10d30:	af00      	add	r7, sp, #0
   10d32:	6078      	str	r0, [r7, #4]
   10d34:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	683a      	ldr	r2, [r7, #0]
   10d3a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   10d3c:	687b      	ldr	r3, [r7, #4]
   10d3e:	4a04      	ldr	r2, [pc, #16]	; (10d50 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   10d40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   10d44:	687b      	ldr	r3, [r7, #4]
   10d46:	4618      	mov	r0, r3
   10d48:	370c      	adds	r7, #12
   10d4a:	46bd      	mov	sp, r7
   10d4c:	bc80      	pop	{r7}
   10d4e:	4770      	bx	lr
   10d50:	001fff00 	.word	0x001fff00

00010d54 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   10d54:	b480      	push	{r7}
   10d56:	b083      	sub	sp, #12
   10d58:	af00      	add	r7, sp, #0
   10d5a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   10d5c:	687b      	ldr	r3, [r7, #4]
   10d5e:	4618      	mov	r0, r3
   10d60:	370c      	adds	r7, #12
   10d62:	46bd      	mov	sp, r7
   10d64:	bc80      	pop	{r7}
   10d66:	4770      	bx	lr

00010d68 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   10d68:	b580      	push	{r7, lr}
   10d6a:	b082      	sub	sp, #8
   10d6c:	af00      	add	r7, sp, #0
   10d6e:	6078      	str	r0, [r7, #4]
	xferDone=false;
   10d70:	687b      	ldr	r3, [r7, #4]
   10d72:	2200      	movs	r2, #0
   10d74:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   10d76:	6878      	ldr	r0, [r7, #4]
   10d78:	4b04      	ldr	r3, [pc, #16]	; (10d8c <_ZN13N25Q256_Class4InitEv+0x24>)
   10d7a:	4798      	blx	r3
	return SelfTest();
   10d7c:	6878      	ldr	r0, [r7, #4]
   10d7e:	4b04      	ldr	r3, [pc, #16]	; (10d90 <_ZN13N25Q256_Class4InitEv+0x28>)
   10d80:	4798      	blx	r3
   10d82:	4603      	mov	r3, r0
}
   10d84:	4618      	mov	r0, r3
   10d86:	3708      	adds	r7, #8
   10d88:	46bd      	mov	sp, r7
   10d8a:	bd80      	pop	{r7, pc}
   10d8c:	00010d95 	.word	0x00010d95
   10d90:	00010f31 	.word	0x00010f31

00010d94 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   10d94:	b590      	push	{r4, r7, lr}
   10d96:	b083      	sub	sp, #12
   10d98:	af00      	add	r7, sp, #0
   10d9a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   10d9c:	687b      	ldr	r3, [r7, #4]
   10d9e:	685b      	ldr	r3, [r3, #4]
   10da0:	4618      	mov	r0, r3
   10da2:	4b08      	ldr	r3, [pc, #32]	; (10dc4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   10da4:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   10da6:	687b      	ldr	r3, [r7, #4]
   10da8:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   10daa:	2300      	movs	r3, #0
   10dac:	4a06      	ldr	r2, [pc, #24]	; (10dc8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   10dae:	4807      	ldr	r0, [pc, #28]	; (10dcc <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   10db0:	4c07      	ldr	r4, [pc, #28]	; (10dd0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   10db2:	47a0      	blx	r4
   10db4:	4602      	mov	r2, r0
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   10dbc:	bf00      	nop
   10dbe:	370c      	adds	r7, #12
   10dc0:	46bd      	mov	sp, r7
   10dc2:	bd90      	pop	{r4, r7, pc}
   10dc4:	000025e9 	.word	0x000025e9
   10dc8:	00010c69 	.word	0x00010c69
   10dcc:	200090c0 	.word	0x200090c0
   10dd0:	0000b629 	.word	0x0000b629

00010dd4 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   10dd4:	b580      	push	{r7, lr}
   10dd6:	b084      	sub	sp, #16
   10dd8:	af00      	add	r7, sp, #0
   10dda:	6078      	str	r0, [r7, #4]
   10ddc:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   10dde:	687b      	ldr	r3, [r7, #4]
   10de0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   10de4:	685b      	ldr	r3, [r3, #4]
   10de6:	689b      	ldr	r3, [r3, #8]
   10de8:	687a      	ldr	r2, [r7, #4]
   10dea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   10dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10df2:	6839      	ldr	r1, [r7, #0]
   10df4:	4798      	blx	r3
   10df6:	4603      	mov	r3, r0
   10df8:	60fb      	str	r3, [r7, #12]
	return	e;
   10dfa:	68fb      	ldr	r3, [r7, #12]
}
   10dfc:	4618      	mov	r0, r3
   10dfe:	3710      	adds	r7, #16
   10e00:	46bd      	mov	sp, r7
   10e02:	bd80      	pop	{r7, pc}

00010e04 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   10e04:	b590      	push	{r4, r7, lr}
   10e06:	b087      	sub	sp, #28
   10e08:	af00      	add	r7, sp, #0
   10e0a:	60f8      	str	r0, [r7, #12]
   10e0c:	60b9      	str	r1, [r7, #8]
   10e0e:	607a      	str	r2, [r7, #4]
   10e10:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   10e12:	68fb      	ldr	r3, [r7, #12]
   10e14:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   10e18:	685b      	ldr	r3, [r3, #4]
   10e1a:	685c      	ldr	r4, [r3, #4]
   10e1c:	68fb      	ldr	r3, [r7, #12]
   10e1e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   10e22:	683b      	ldr	r3, [r7, #0]
   10e24:	687a      	ldr	r2, [r7, #4]
   10e26:	68b9      	ldr	r1, [r7, #8]
   10e28:	47a0      	blx	r4
   10e2a:	4603      	mov	r3, r0
   10e2c:	617b      	str	r3, [r7, #20]
	return	w;
   10e2e:	697b      	ldr	r3, [r7, #20]
}
   10e30:	4618      	mov	r0, r3
   10e32:	371c      	adds	r7, #28
   10e34:	46bd      	mov	sp, r7
   10e36:	bd90      	pop	{r4, r7, pc}

00010e38 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   10e38:	b590      	push	{r4, r7, lr}
   10e3a:	b087      	sub	sp, #28
   10e3c:	af00      	add	r7, sp, #0
   10e3e:	60f8      	str	r0, [r7, #12]
   10e40:	60b9      	str	r1, [r7, #8]
   10e42:	607a      	str	r2, [r7, #4]
   10e44:	603b      	str	r3, [r7, #0]
	xferDone=false;
   10e46:	68fb      	ldr	r3, [r7, #12]
   10e48:	2200      	movs	r2, #0
   10e4a:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   10e4c:	68fb      	ldr	r3, [r7, #12]
   10e4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   10e52:	685b      	ldr	r3, [r3, #4]
   10e54:	681c      	ldr	r4, [r3, #0]
   10e56:	68fb      	ldr	r3, [r7, #12]
   10e58:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   10e5c:	683b      	ldr	r3, [r7, #0]
   10e5e:	687a      	ldr	r2, [r7, #4]
   10e60:	68b9      	ldr	r1, [r7, #8]
   10e62:	47a0      	blx	r4
   10e64:	4603      	mov	r3, r0
   10e66:	617b      	str	r3, [r7, #20]
	return	r;
   10e68:	697b      	ldr	r3, [r7, #20]
}
   10e6a:	4618      	mov	r0, r3
   10e6c:	371c      	adds	r7, #28
   10e6e:	46bd      	mov	sp, r7
   10e70:	bd90      	pop	{r4, r7, pc}
	...

00010e74 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   10e74:	b580      	push	{r7, lr}
   10e76:	b082      	sub	sp, #8
   10e78:	af00      	add	r7, sp, #0
   10e7a:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   10e7c:	687a      	ldr	r2, [r7, #4]
   10e7e:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   10e82:	f043 0310 	orr.w	r3, r3, #16
   10e86:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   10e8a:	687a      	ldr	r2, [r7, #4]
   10e8c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   10e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e94:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   10e98:	687a      	ldr	r2, [r7, #4]
   10e9a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   10e9e:	f36f 1305 	bfc	r3, #4, #2
   10ea2:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   10ea6:	687b      	ldr	r3, [r7, #4]
   10ea8:	2205      	movs	r2, #5
   10eaa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   10eae:	687b      	ldr	r3, [r7, #4]
   10eb0:	2201      	movs	r2, #1
   10eb2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   10eb6:	687b      	ldr	r3, [r7, #4]
   10eb8:	f203 2212 	addw	r2, r3, #530	; 0x212
   10ebc:	687b      	ldr	r3, [r7, #4]
   10ebe:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   10ec2:	687b      	ldr	r3, [r7, #4]
   10ec4:	685a      	ldr	r2, [r3, #4]
   10ec6:	687b      	ldr	r3, [r7, #4]
   10ec8:	f503 7305 	add.w	r3, r3, #532	; 0x214
   10ecc:	4619      	mov	r1, r3
   10ece:	4610      	mov	r0, r2
   10ed0:	4b04      	ldr	r3, [pc, #16]	; (10ee4 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   10ed2:	4798      	blx	r3
		return status;
   10ed4:	687b      	ldr	r3, [r7, #4]
   10ed6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   10eda:	4618      	mov	r0, r3
   10edc:	3708      	adds	r7, #8
   10ede:	46bd      	mov	sp, r7
   10ee0:	bd80      	pop	{r7, pc}
   10ee2:	bf00      	nop
   10ee4:	00002661 	.word	0x00002661

00010ee8 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   10ee8:	b580      	push	{r7, lr}
   10eea:	b082      	sub	sp, #8
   10eec:	af00      	add	r7, sp, #0
   10eee:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   10ef0:	6878      	ldr	r0, [r7, #4]
   10ef2:	4b0e      	ldr	r3, [pc, #56]	; (10f2c <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   10ef4:	4798      	blx	r3
   10ef6:	4603      	mov	r3, r0
   10ef8:	461a      	mov	r2, r3
   10efa:	687b      	ldr	r3, [r7, #4]
   10efc:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   10f00:	687b      	ldr	r3, [r7, #4]
   10f02:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   10f06:	f003 0301 	and.w	r3, r3, #1
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d000      	beq.n	10f10 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   10f0e:	e7ef      	b.n	10ef0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   10f16:	f003 0301 	and.w	r3, r3, #1
   10f1a:	2b00      	cmp	r3, #0
   10f1c:	bf0c      	ite	eq
   10f1e:	2301      	moveq	r3, #1
   10f20:	2300      	movne	r3, #0
   10f22:	b2db      	uxtb	r3, r3
}
   10f24:	4618      	mov	r0, r3
   10f26:	3708      	adds	r7, #8
   10f28:	46bd      	mov	sp, r7
   10f2a:	bd80      	pop	{r7, pc}
   10f2c:	00010e75 	.word	0x00010e75

00010f30 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   10f30:	b590      	push	{r4, r7, lr}
   10f32:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   10f36:	b085      	sub	sp, #20
   10f38:	af00      	add	r7, sp, #0
   10f3a:	f107 0310 	add.w	r3, r7, #16
   10f3e:	3b0c      	subs	r3, #12
   10f40:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   10f42:	f107 0310 	add.w	r3, r7, #16
   10f46:	3b0c      	subs	r3, #12
   10f48:	681b      	ldr	r3, [r3, #0]
   10f4a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   10f4e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   10f52:	2300      	movs	r3, #0
   10f54:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10f58:	f102 020c 	add.w	r2, r2, #12
   10f5c:	6013      	str	r3, [r2, #0]
   10f5e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10f62:	f103 030c 	add.w	r3, r3, #12
   10f66:	681b      	ldr	r3, [r3, #0]
   10f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10f6c:	d22f      	bcs.n	10fce <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   10f6e:	4b60      	ldr	r3, [pc, #384]	; (110f0 <_ZN13N25Q256_Class8SelfTestEv+0x1c0>)
   10f70:	4798      	blx	r3
   10f72:	4603      	mov	r3, r0
   10f74:	b2d9      	uxtb	r1, r3
   10f76:	f107 0310 	add.w	r3, r7, #16
   10f7a:	3b08      	subs	r3, #8
   10f7c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10f80:	f102 020c 	add.w	r2, r2, #12
   10f84:	6812      	ldr	r2, [r2, #0]
   10f86:	4413      	add	r3, r2
   10f88:	460a      	mov	r2, r1
   10f8a:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   10f8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10f90:	f103 030c 	add.w	r3, r3, #12
   10f94:	681b      	ldr	r3, [r3, #0]
   10f96:	b2db      	uxtb	r3, r3
   10f98:	425b      	negs	r3, r3
   10f9a:	b2d9      	uxtb	r1, r3
   10f9c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   10fa0:	f103 0310 	add.w	r3, r3, #16
   10fa4:	3b08      	subs	r3, #8
   10fa6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10faa:	f102 020c 	add.w	r2, r2, #12
   10fae:	6812      	ldr	r2, [r2, #0]
   10fb0:	4413      	add	r3, r2
   10fb2:	460a      	mov	r2, r1
   10fb4:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   10fb6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   10fba:	f103 030c 	add.w	r3, r3, #12
   10fbe:	681b      	ldr	r3, [r3, #0]
   10fc0:	3301      	adds	r3, #1
   10fc2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10fc6:	f102 020c 	add.w	r2, r2, #12
   10fca:	6013      	str	r3, [r2, #0]
   10fcc:	e7c7      	b.n	10f5e <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   10fce:	f107 0310 	add.w	r3, r7, #16
   10fd2:	3b0c      	subs	r3, #12
   10fd4:	681b      	ldr	r3, [r3, #0]
   10fd6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10fda:	f107 0310 	add.w	r3, r7, #16
   10fde:	3b0c      	subs	r3, #12
   10fe0:	4611      	mov	r1, r2
   10fe2:	6818      	ldr	r0, [r3, #0]
   10fe4:	4b43      	ldr	r3, [pc, #268]	; (110f4 <_ZN13N25Q256_Class8SelfTestEv+0x1c4>)
   10fe6:	4798      	blx	r3
	WaitOnBusy();
   10fe8:	f107 0310 	add.w	r3, r7, #16
   10fec:	3b0c      	subs	r3, #12
   10fee:	6818      	ldr	r0, [r3, #0]
   10ff0:	4b41      	ldr	r3, [pc, #260]	; (110f8 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   10ff2:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   10ff4:	f107 0310 	add.w	r3, r7, #16
   10ff8:	3b0c      	subs	r3, #12
   10ffa:	681b      	ldr	r3, [r3, #0]
   10ffc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   11000:	f107 0110 	add.w	r1, r7, #16
   11004:	3908      	subs	r1, #8
   11006:	f107 0010 	add.w	r0, r7, #16
   1100a:	380c      	subs	r0, #12
   1100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11010:	6800      	ldr	r0, [r0, #0]
   11012:	4c3a      	ldr	r4, [pc, #232]	; (110fc <_ZN13N25Q256_Class8SelfTestEv+0x1cc>)
   11014:	47a0      	blx	r4
	WaitOnBusy();
   11016:	f107 0310 	add.w	r3, r7, #16
   1101a:	3b0c      	subs	r3, #12
   1101c:	6818      	ldr	r0, [r3, #0]
   1101e:	4b36      	ldr	r3, [pc, #216]	; (110f8 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   11020:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   11022:	f107 0310 	add.w	r3, r7, #16
   11026:	3b0c      	subs	r3, #12
   11028:	681b      	ldr	r3, [r3, #0]
   1102a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1102e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   11032:	f101 0110 	add.w	r1, r1, #16
   11036:	3908      	subs	r1, #8
   11038:	f107 0010 	add.w	r0, r7, #16
   1103c:	380c      	subs	r0, #12
   1103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   11042:	6800      	ldr	r0, [r0, #0]
   11044:	4c2e      	ldr	r4, [pc, #184]	; (11100 <_ZN13N25Q256_Class8SelfTestEv+0x1d0>)
   11046:	47a0      	blx	r4
	WaitOnBusy();
   11048:	f107 0310 	add.w	r3, r7, #16
   1104c:	3b0c      	subs	r3, #12
   1104e:	6818      	ldr	r0, [r3, #0]
   11050:	4b29      	ldr	r3, [pc, #164]	; (110f8 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   11052:	4798      	blx	r3
	isOK	 = true;
   11054:	f107 0310 	add.w	r3, r7, #16
   11058:	3b0c      	subs	r3, #12
   1105a:	681b      	ldr	r3, [r3, #0]
   1105c:	2201      	movs	r2, #1
   1105e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   11062:	2300      	movs	r3, #0
   11064:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   11068:	f102 0208 	add.w	r2, r2, #8
   1106c:	6013      	str	r3, [r2, #0]
   1106e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   11072:	f103 0308 	add.w	r3, r3, #8
   11076:	681b      	ldr	r3, [r3, #0]
   11078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1107c:	da2b      	bge.n	110d6 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1107e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   11082:	f103 0310 	add.w	r3, r3, #16
   11086:	3b08      	subs	r3, #8
   11088:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1108c:	f102 0208 	add.w	r2, r2, #8
   11090:	6812      	ldr	r2, [r2, #0]
   11092:	4413      	add	r3, r2
   11094:	781a      	ldrb	r2, [r3, #0]
   11096:	f107 0310 	add.w	r3, r7, #16
   1109a:	3b08      	subs	r3, #8
   1109c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   110a0:	f101 0108 	add.w	r1, r1, #8
   110a4:	6809      	ldr	r1, [r1, #0]
   110a6:	440b      	add	r3, r1
   110a8:	781b      	ldrb	r3, [r3, #0]
   110aa:	429a      	cmp	r2, r3
   110ac:	d007      	beq.n	110be <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   110ae:	f107 0310 	add.w	r3, r7, #16
   110b2:	3b0c      	subs	r3, #12
   110b4:	681b      	ldr	r3, [r3, #0]
   110b6:	2200      	movs	r2, #0
   110b8:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   110bc:	e00b      	b.n	110d6 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   110be:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   110c2:	f103 0308 	add.w	r3, r3, #8
   110c6:	681b      	ldr	r3, [r3, #0]
   110c8:	3301      	adds	r3, #1
   110ca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   110ce:	f102 0208 	add.w	r2, r2, #8
   110d2:	6013      	str	r3, [r2, #0]
   110d4:	e7cb      	b.n	1106e <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   110d6:	f107 0310 	add.w	r3, r7, #16
   110da:	3b0c      	subs	r3, #12
   110dc:	681b      	ldr	r3, [r3, #0]
   110de:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   110e2:	4618      	mov	r0, r3
   110e4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   110e8:	3714      	adds	r7, #20
   110ea:	46bd      	mov	sp, r7
   110ec:	bd90      	pop	{r4, r7, pc}
   110ee:	bf00      	nop
   110f0:	00011ded 	.word	0x00011ded
   110f4:	00010dd5 	.word	0x00010dd5
   110f8:	00010ee9 	.word	0x00010ee9
   110fc:	00010e05 	.word	0x00010e05
   11100:	00010e39 	.word	0x00010e39

00011104 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   11104:	b580      	push	{r7, lr}
   11106:	b082      	sub	sp, #8
   11108:	af00      	add	r7, sp, #0
   1110a:	6078      	str	r0, [r7, #4]
   1110c:	6039      	str	r1, [r7, #0]
   1110e:	687b      	ldr	r3, [r7, #4]
   11110:	2b01      	cmp	r3, #1
   11112:	d10d      	bne.n	11130 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11114:	683b      	ldr	r3, [r7, #0]
   11116:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1111a:	4293      	cmp	r3, r2
   1111c:	d108      	bne.n	11130 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1111e:	4906      	ldr	r1, [pc, #24]	; (11138 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11120:	4806      	ldr	r0, [pc, #24]	; (1113c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11122:	4b07      	ldr	r3, [pc, #28]	; (11140 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11124:	4798      	blx	r3
   11126:	4a07      	ldr	r2, [pc, #28]	; (11144 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11128:	4907      	ldr	r1, [pc, #28]	; (11148 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1112a:	4804      	ldr	r0, [pc, #16]	; (1113c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1112c:	4b07      	ldr	r3, [pc, #28]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1112e:	4798      	blx	r3
   11130:	bf00      	nop
   11132:	3708      	adds	r7, #8
   11134:	46bd      	mov	sp, r7
   11136:	bd80      	pop	{r7, pc}
   11138:	2000ad88 	.word	0x2000ad88
   1113c:	200090d0 	.word	0x200090d0
   11140:	00010d2d 	.word	0x00010d2d
   11144:	20000000 	.word	0x20000000
   11148:	00010d55 	.word	0x00010d55
   1114c:	0001193d 	.word	0x0001193d

00011150 <_GLOBAL__sub_I_ptrN25Q256Class>:
   11150:	b580      	push	{r7, lr}
   11152:	af00      	add	r7, sp, #0
   11154:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11158:	2001      	movs	r0, #1
   1115a:	4b01      	ldr	r3, [pc, #4]	; (11160 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   1115c:	4798      	blx	r3
   1115e:	bd80      	pop	{r7, pc}
   11160:	00011105 	.word	0x00011105

00011164 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   11164:	b510      	push	{r4, lr}
   11166:	4604      	mov	r4, r0
   11168:	4b06      	ldr	r3, [pc, #24]	; (11184 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   1116a:	f840 3bb4 	str.w	r3, [r0], #180
   1116e:	4b06      	ldr	r3, [pc, #24]	; (11188 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   11170:	4798      	blx	r3
   11172:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11176:	4b05      	ldr	r3, [pc, #20]	; (1118c <_ZN18Event_Logger_ClassD1Ev+0x28>)
   11178:	4798      	blx	r3
   1117a:	4620      	mov	r0, r4
   1117c:	4b04      	ldr	r3, [pc, #16]	; (11190 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   1117e:	4798      	blx	r3
{
} //~Event_Logger_Class
   11180:	4620      	mov	r0, r4
   11182:	bd10      	pop	{r4, pc}
   11184:	0001255c 	.word	0x0001255c
   11188:	000114b9 	.word	0x000114b9
   1118c:	00011427 	.word	0x00011427
   11190:	00011625 	.word	0x00011625

00011194 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   11194:	b510      	push	{r4, lr}
   11196:	4604      	mov	r4, r0
   11198:	4b11      	ldr	r3, [pc, #68]	; (111e0 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   1119a:	4798      	blx	r3
   1119c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   111a0:	4b10      	ldr	r3, [pc, #64]	; (111e4 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   111a2:	4798      	blx	r3
   111a4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   111a8:	4b0f      	ldr	r3, [pc, #60]	; (111e8 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   111aa:	4798      	blx	r3
   111ac:	4b0f      	ldr	r3, [pc, #60]	; (111ec <_ZN18Event_Logger_ClassC1Ev+0x58>)
   111ae:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   111b0:	230a      	movs	r3, #10
   111b2:	f884 36f7 	strb.w	r3, [r4, #1783]	; 0x6f7
	cal=&staticClock;
   111b6:	4b0e      	ldr	r3, [pc, #56]	; (111f0 <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   111b8:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
   111bc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   111c0:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
   111c4:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   111c8:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
   111cc:	f503 7388 	add.w	r3, r3, #272	; 0x110
   111d0:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
   111d4:	4b07      	ldr	r3, [pc, #28]	; (111f4 <_ZN18Event_Logger_ClassC1Ev+0x60>)
   111d6:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
   111da:	4620      	mov	r0, r4
   111dc:	bd10      	pop	{r4, pc}
   111de:	bf00      	nop
   111e0:	000115b5 	.word	0x000115b5
   111e4:	00011425 	.word	0x00011425
   111e8:	00011469 	.word	0x00011469
   111ec:	0001255c 	.word	0x0001255c
   111f0:	20009300 	.word	0x20009300
   111f4:	20000210 	.word	0x20000210

000111f8 <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   111f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111fc:	4604      	mov	r4, r0
   111fe:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   11200:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
   11204:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
   11208:	6803      	ldr	r3, [r0, #0]
   1120a:	681b      	ldr	r3, [r3, #0]
   1120c:	4631      	mov	r1, r6
   1120e:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11210:	f204 67bc 	addw	r7, r4, #1724	; 0x6bc
   11214:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
   11218:	681a      	ldr	r2, [r3, #0]
   1121a:	685b      	ldr	r3, [r3, #4]
   1121c:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   11220:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   11222:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   11226:	4629      	mov	r1, r5
   11228:	4640      	mov	r0, r8
   1122a:	4b32      	ldr	r3, [pc, #200]	; (112f4 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   1122c:	4798      	blx	r3
   1122e:	f884 06f8 	strb.w	r0, [r4, #1784]	; 0x6f8
	if (semiColonPosition>0)
   11232:	b130      	cbz	r0, 11242 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   11234:	2807      	cmp	r0, #7
   11236:	dc2d      	bgt.n	11294 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   11238:	4602      	mov	r2, r0
   1123a:	4629      	mov	r1, r5
   1123c:	4638      	mov	r0, r7
   1123e:	4b2e      	ldr	r3, [pc, #184]	; (112f8 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11240:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   11242:	4628      	mov	r0, r5
   11244:	4b2d      	ldr	r3, [pc, #180]	; (112fc <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   11246:	4798      	blx	r3
   11248:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
   1124c:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   1124e:	2a33      	cmp	r2, #51	; 0x33
   11250:	dd26      	ble.n	112a0 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   11252:	4629      	mov	r1, r5
   11254:	4640      	mov	r0, r8
   11256:	4b2a      	ldr	r3, [pc, #168]	; (11300 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   11258:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   1125a:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   1125e:	4429      	add	r1, r5
   11260:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
   11264:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11268:	f8d1 e000 	ldr.w	lr, [r1]
   1126c:	684f      	ldr	r7, [r1, #4]
   1126e:	688d      	ldr	r5, [r1, #8]
   11270:	68c8      	ldr	r0, [r1, #12]
   11272:	f8c3 e000 	str.w	lr, [r3]
   11276:	605f      	str	r7, [r3, #4]
   11278:	609d      	str	r5, [r3, #8]
   1127a:	60d8      	str	r0, [r3, #12]
   1127c:	3110      	adds	r1, #16
   1127e:	3310      	adds	r3, #16
   11280:	4291      	cmp	r1, r2
   11282:	d1f1      	bne.n	11268 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   11284:	8808      	ldrh	r0, [r1, #0]
   11286:	788a      	ldrb	r2, [r1, #2]
   11288:	8018      	strh	r0, [r3, #0]
   1128a:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   1128c:	2333      	movs	r3, #51	; 0x33
   1128e:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
   11292:	e012      	b.n	112ba <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   11294:	682a      	ldr	r2, [r5, #0]
   11296:	686b      	ldr	r3, [r5, #4]
   11298:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
   1129c:	607b      	str	r3, [r7, #4]
   1129e:	e7d0      	b.n	11242 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   112a0:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
   112a4:	4429      	add	r1, r5
   112a6:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
   112aa:	4b13      	ldr	r3, [pc, #76]	; (112f8 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   112ac:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   112ae:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
   112b2:	4423      	add	r3, r4
   112b4:	220a      	movs	r2, #10
   112b6:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   112ba:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
   112be:	6803      	ldr	r3, [r0, #0]
   112c0:	685b      	ldr	r3, [r3, #4]
   112c2:	4631      	mov	r1, r6
   112c4:	4798      	blx	r3
   112c6:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
   112ca:	b978      	cbnz	r0, 112ec <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   112cc:	f04f 33ff 	mov.w	r3, #4294967295
   112d0:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,text_length+1);
   112d4:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
   112d8:	3201      	adds	r2, #1
   112da:	b2d2      	uxtb	r2, r2
   112dc:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
   112e0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   112e4:	4b07      	ldr	r3, [pc, #28]	; (11304 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   112e6:	4798      	blx	r3
   112e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   112ec:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
   112f0:	e7f0      	b.n	112d4 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   112f2:	bf00      	nop
   112f4:	00011449 	.word	0x00011449
   112f8:	00011c1d 	.word	0x00011c1d
   112fc:	00011e41 	.word	0x00011e41
   11300:	00011429 	.word	0x00011429
   11304:	000114dd 	.word	0x000114dd

00011308 <_ZN18Event_Logger_Class9SaveEventEPKc>:
	}
	SaveEvent(logger_module);
	
}

void Event_Logger_Class::SaveEvent(char const * text){
   11308:	b508      	push	{r3, lr}
	
	SaveEvent((uint8_t*)text);
   1130a:	4b01      	ldr	r3, [pc, #4]	; (11310 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   1130c:	4798      	blx	r3
   1130e:	bd08      	pop	{r3, pc}
   11310:	000111f9 	.word	0x000111f9

00011314 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   11314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11318:	4c30      	ldr	r4, [pc, #192]	; (113dc <_GLOBAL__sub_I_local_info_text+0xc8>)
   1131a:	f504 758c 	add.w	r5, r4, #280	; 0x118
   1131e:	4930      	ldr	r1, [pc, #192]	; (113e0 <_GLOBAL__sub_I_local_info_text+0xcc>)
   11320:	4628      	mov	r0, r5
   11322:	4f30      	ldr	r7, [pc, #192]	; (113e4 <_GLOBAL__sub_I_local_info_text+0xd0>)
   11324:	47b8      	blx	r7
   11326:	4e30      	ldr	r6, [pc, #192]	; (113e8 <_GLOBAL__sub_I_local_info_text+0xd4>)
   11328:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11420 <_GLOBAL__sub_I_local_info_text+0x10c>
   1132c:	4632      	mov	r2, r6
   1132e:	4641      	mov	r1, r8
   11330:	4628      	mov	r0, r5
   11332:	4d2e      	ldr	r5, [pc, #184]	; (113ec <_GLOBAL__sub_I_local_info_text+0xd8>)
   11334:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11336:	f504 799c 	add.w	r9, r4, #312	; 0x138
   1133a:	492d      	ldr	r1, [pc, #180]	; (113f0 <_GLOBAL__sub_I_local_info_text+0xdc>)
   1133c:	4648      	mov	r0, r9
   1133e:	47b8      	blx	r7
   11340:	4632      	mov	r2, r6
   11342:	4641      	mov	r1, r8
   11344:	4648      	mov	r0, r9
   11346:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11348:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   1134c:	4929      	ldr	r1, [pc, #164]	; (113f4 <_GLOBAL__sub_I_local_info_text+0xe0>)
   1134e:	4648      	mov	r0, r9
   11350:	47b8      	blx	r7
   11352:	4632      	mov	r2, r6
   11354:	4641      	mov	r1, r8
   11356:	4648      	mov	r0, r9
   11358:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1135a:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   1135e:	4926      	ldr	r1, [pc, #152]	; (113f8 <_GLOBAL__sub_I_local_info_text+0xe4>)
   11360:	4648      	mov	r0, r9
   11362:	47b8      	blx	r7
   11364:	4632      	mov	r2, r6
   11366:	4641      	mov	r1, r8
   11368:	4648      	mov	r0, r9
   1136a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   1136c:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   11370:	4922      	ldr	r1, [pc, #136]	; (113fc <_GLOBAL__sub_I_local_info_text+0xe8>)
   11372:	4648      	mov	r0, r9
   11374:	47b8      	blx	r7
   11376:	4632      	mov	r2, r6
   11378:	4641      	mov	r1, r8
   1137a:	4648      	mov	r0, r9
   1137c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1137e:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   11382:	491f      	ldr	r1, [pc, #124]	; (11400 <_GLOBAL__sub_I_local_info_text+0xec>)
   11384:	4648      	mov	r0, r9
   11386:	47b8      	blx	r7
   11388:	4632      	mov	r2, r6
   1138a:	4641      	mov	r1, r8
   1138c:	4648      	mov	r0, r9
   1138e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11390:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   11394:	491b      	ldr	r1, [pc, #108]	; (11404 <_GLOBAL__sub_I_local_info_text+0xf0>)
   11396:	4648      	mov	r0, r9
   11398:	47b8      	blx	r7
   1139a:	4632      	mov	r2, r6
   1139c:	4641      	mov	r1, r8
   1139e:	4648      	mov	r0, r9
   113a0:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   113a2:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   113a6:	4918      	ldr	r1, [pc, #96]	; (11408 <_GLOBAL__sub_I_local_info_text+0xf4>)
   113a8:	4648      	mov	r0, r9
   113aa:	47b8      	blx	r7
   113ac:	4632      	mov	r2, r6
   113ae:	4641      	mov	r1, r8
   113b0:	4648      	mov	r0, r9
   113b2:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   113b4:	4915      	ldr	r1, [pc, #84]	; (1140c <_GLOBAL__sub_I_local_info_text+0xf8>)
   113b6:	4620      	mov	r0, r4
   113b8:	4b15      	ldr	r3, [pc, #84]	; (11410 <_GLOBAL__sub_I_local_info_text+0xfc>)
   113ba:	4798      	blx	r3
   113bc:	4632      	mov	r2, r6
   113be:	4915      	ldr	r1, [pc, #84]	; (11414 <_GLOBAL__sub_I_local_info_text+0x100>)
   113c0:	4620      	mov	r0, r4
   113c2:	47a8      	blx	r5
 Event_Logger_Class	logger;
   113c4:	f504 7406 	add.w	r4, r4, #536	; 0x218
   113c8:	4620      	mov	r0, r4
   113ca:	4b13      	ldr	r3, [pc, #76]	; (11418 <_GLOBAL__sub_I_local_info_text+0x104>)
   113cc:	4798      	blx	r3
   113ce:	4632      	mov	r2, r6
   113d0:	4912      	ldr	r1, [pc, #72]	; (1141c <_GLOBAL__sub_I_local_info_text+0x108>)
   113d2:	4620      	mov	r0, r4
   113d4:	47a8      	blx	r5
   113d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   113da:	bf00      	nop
   113dc:	20009300 	.word	0x20009300
   113e0:	2000acf8 	.word	0x2000acf8
   113e4:	0000d2b9 	.word	0x0000d2b9
   113e8:	20000000 	.word	0x20000000
   113ec:	0001193d 	.word	0x0001193d
   113f0:	2000ad8c 	.word	0x2000ad8c
   113f4:	2000aeb0 	.word	0x2000aeb0
   113f8:	2000adac 	.word	0x2000adac
   113fc:	2000ae70 	.word	0x2000ae70
   11400:	2000ae90 	.word	0x2000ae90
   11404:	2000ad68 	.word	0x2000ad68
   11408:	2000ae08 	.word	0x2000ae08
   1140c:	2000aed0 	.word	0x2000aed0
   11410:	000115e9 	.word	0x000115e9
   11414:	00011625 	.word	0x00011625
   11418:	00011195 	.word	0x00011195
   1141c:	00011165 	.word	0x00011165
   11420:	0000d2f1 	.word	0x0000d2f1

00011424 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   11424:	4770      	bx	lr

00011426 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   11426:	4770      	bx	lr

00011428 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   11428:	b538      	push	{r3, r4, r5, lr}
   1142a:	4605      	mov	r5, r0
   1142c:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   1142e:	4608      	mov	r0, r1
   11430:	4b04      	ldr	r3, [pc, #16]	; (11444 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   11432:	4798      	blx	r3
   11434:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   11436:	b2c0      	uxtb	r0, r0
   11438:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   1143a:	bfc4      	itt	gt
   1143c:	230a      	movgt	r3, #10
   1143e:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   11442:	bd38      	pop	{r3, r4, r5, pc}
   11444:	00011e41 	.word	0x00011e41

00011448 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   11448:	7808      	ldrb	r0, [r1, #0]
   1144a:	b148      	cbz	r0, 11460 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   1144c:	283a      	cmp	r0, #58	; 0x3a
   1144e:	d009      	beq.n	11464 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   11450:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   11452:	3301      	adds	r3, #1
   11454:	b2db      	uxtb	r3, r3
   11456:	5cc8      	ldrb	r0, [r1, r3]
   11458:	b118      	cbz	r0, 11462 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   1145a:	283a      	cmp	r0, #58	; 0x3a
   1145c:	d1f9      	bne.n	11452 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   1145e:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   11460:	4770      	bx	lr
   11462:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   11464:	2000      	movs	r0, #0
   11466:	4770      	bx	lr

00011468 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   11468:	b510      	push	{r4, lr}
   1146a:	4604      	mov	r4, r0
   1146c:	4b0d      	ldr	r3, [pc, #52]	; (114a4 <_ZN15DataLoger_ClassC1Ev+0x3c>)
   1146e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   11470:	f44f 7200 	mov.w	r2, #512	; 0x200
   11474:	2100      	movs	r1, #0
   11476:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   1147a:	4b0b      	ldr	r3, [pc, #44]	; (114a8 <_ZN15DataLoger_ClassC1Ev+0x40>)
   1147c:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   1147e:	2300      	movs	r3, #0
   11480:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   11484:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   11488:	230a      	movs	r3, #10
   1148a:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   1148e:	4a07      	ldr	r2, [pc, #28]	; (114ac <_ZN15DataLoger_ClassC1Ev+0x44>)
   11490:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   11494:	4b06      	ldr	r3, [pc, #24]	; (114b0 <_ZN15DataLoger_ClassC1Ev+0x48>)
   11496:	4907      	ldr	r1, [pc, #28]	; (114b4 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   11498:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   1149c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
   114a0:	4620      	mov	r0, r4
   114a2:	bd10      	pop	{r4, pc}
   114a4:	00010d19 	.word	0x00010d19
   114a8:	00011d51 	.word	0x00011d51
   114ac:	20009c38 	.word	0x20009c38
   114b0:	20009518 	.word	0x20009518
   114b4:	2000ac38 	.word	0x2000ac38

000114b8 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   114b8:	b510      	push	{r4, lr}
   114ba:	4604      	mov	r4, r0
   114bc:	4b01      	ldr	r3, [pc, #4]	; (114c4 <_ZN15DataLoger_ClassD1Ev+0xc>)
   114be:	4798      	blx	r3
{
} //~DataLoger_Class
   114c0:	4620      	mov	r0, r4
   114c2:	bd10      	pop	{r4, pc}
   114c4:	00010d55 	.word	0x00010d55

000114c8 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   114c8:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   114cc:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   114ce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   114d2:	bf94      	ite	ls
   114d4:	2000      	movls	r0, #0
   114d6:	2001      	movhi	r0, #1
   114d8:	4770      	bx	lr
	...

000114dc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   114dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   114de:	b087      	sub	sp, #28
   114e0:	4604      	mov	r4, r0
   114e2:	460e      	mov	r6, r1
	if (len==0xff)
   114e4:	2aff      	cmp	r2, #255	; 0xff
   114e6:	d018      	beq.n	1151a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   114e8:	4615      	mov	r5, r2
		if (IsStackFull())
   114ea:	4b29      	ldr	r3, [pc, #164]	; (11590 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   114ec:	4798      	blx	r3
   114ee:	2800      	cmp	r0, #0
   114f0:	d13b      	bne.n	1156a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   114f2:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   114f6:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   114fa:	f105 020c 	add.w	r2, r5, #12
   114fe:	4631      	mov	r1, r6
   11500:	4418      	add	r0, r3
   11502:	4b24      	ldr	r3, [pc, #144]	; (11594 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   11504:	4798      	blx	r3
		stackValue+=12+len;
   11506:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   1150a:	320c      	adds	r2, #12
   1150c:	442a      	add	r2, r5
   1150e:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   11512:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   11516:	b007      	add	sp, #28
   11518:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   1151a:	466d      	mov	r5, sp
   1151c:	4f1e      	ldr	r7, [pc, #120]	; (11598 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   1151e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11522:	e897 0003 	ldmia.w	r7, {r0, r1}
   11526:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   1152a:	4668      	mov	r0, sp
   1152c:	4b1b      	ldr	r3, [pc, #108]	; (1159c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   1152e:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   11530:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   11534:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   11538:	b2c2      	uxtb	r2, r0
   1153a:	320d      	adds	r2, #13
   1153c:	4631      	mov	r1, r6
   1153e:	18e8      	adds	r0, r5, r3
   11540:	4b14      	ldr	r3, [pc, #80]	; (11594 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   11542:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   11544:	4d16      	ldr	r5, [pc, #88]	; (115a0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   11546:	4629      	mov	r1, r5
   11548:	4816      	ldr	r0, [pc, #88]	; (115a4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   1154a:	4b17      	ldr	r3, [pc, #92]	; (115a8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   1154c:	4798      	blx	r3
   1154e:	4b17      	ldr	r3, [pc, #92]	; (115ac <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   11550:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   11554:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   11558:	2100      	movs	r1, #0
   1155a:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   1155e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11562:	4628      	mov	r0, r5
   11564:	4b12      	ldr	r3, [pc, #72]	; (115b0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   11566:	4798      	blx	r3
   11568:	e7d3      	b.n	11512 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   1156a:	4f0d      	ldr	r7, [pc, #52]	; (115a0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   1156c:	4639      	mov	r1, r7
   1156e:	480d      	ldr	r0, [pc, #52]	; (115a4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   11570:	4b0d      	ldr	r3, [pc, #52]	; (115a8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   11572:	4798      	blx	r3
   11574:	4b0d      	ldr	r3, [pc, #52]	; (115ac <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   11576:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   1157a:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   1157e:	2100      	movs	r1, #0
   11580:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   11584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11588:	4638      	mov	r0, r7
   1158a:	4b09      	ldr	r3, [pc, #36]	; (115b0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   1158c:	4798      	blx	r3
   1158e:	e7b0      	b.n	114f2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   11590:	000114c9 	.word	0x000114c9
   11594:	00011c1d 	.word	0x00011c1d
   11598:	00012564 	.word	0x00012564
   1159c:	00011e41 	.word	0x00011e41
   115a0:	20009c38 	.word	0x20009c38
   115a4:	20002868 	.word	0x20002868
   115a8:	0000e34d 	.word	0x0000e34d
   115ac:	2000ad30 	.word	0x2000ad30
   115b0:	00011d51 	.word	0x00011d51

000115b4 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   115b4:	b580      	push	{r7, lr}
   115b6:	b082      	sub	sp, #8
   115b8:	af00      	add	r7, sp, #0
   115ba:	6078      	str	r0, [r7, #4]
   115bc:	687b      	ldr	r3, [r7, #4]
   115be:	4618      	mov	r0, r3
   115c0:	4b06      	ldr	r3, [pc, #24]	; (115dc <_ZN14Calendar_ClassC1Ev+0x28>)
   115c2:	4798      	blx	r3
   115c4:	4a06      	ldr	r2, [pc, #24]	; (115e0 <_ZN14Calendar_ClassC1Ev+0x2c>)
   115c6:	687b      	ldr	r3, [r7, #4]
   115c8:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   115ca:	4a06      	ldr	r2, [pc, #24]	; (115e4 <_ZN14Calendar_ClassC1Ev+0x30>)
   115cc:	687b      	ldr	r3, [r7, #4]
   115ce:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   115d0:	687b      	ldr	r3, [r7, #4]
   115d2:	4618      	mov	r0, r3
   115d4:	3708      	adds	r7, #8
   115d6:	46bd      	mov	sp, r7
   115d8:	bd80      	pop	{r7, pc}
   115da:	bf00      	nop
   115dc:	000118fd 	.word	0x000118fd
   115e0:	00012590 	.word	0x00012590
   115e4:	2000ac40 	.word	0x2000ac40

000115e8 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   115e8:	b580      	push	{r7, lr}
   115ea:	b082      	sub	sp, #8
   115ec:	af00      	add	r7, sp, #0
   115ee:	6078      	str	r0, [r7, #4]
   115f0:	6039      	str	r1, [r7, #0]
   115f2:	687b      	ldr	r3, [r7, #4]
   115f4:	4618      	mov	r0, r3
   115f6:	4b08      	ldr	r3, [pc, #32]	; (11618 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   115f8:	4798      	blx	r3
   115fa:	4a08      	ldr	r2, [pc, #32]	; (1161c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   115fc:	687b      	ldr	r3, [r7, #4]
   115fe:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   11600:	687b      	ldr	r3, [r7, #4]
   11602:	683a      	ldr	r2, [r7, #0]
   11604:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   11608:	4a05      	ldr	r2, [pc, #20]	; (11620 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   1160a:	687b      	ldr	r3, [r7, #4]
   1160c:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1160e:	687b      	ldr	r3, [r7, #4]
   11610:	4618      	mov	r0, r3
   11612:	3708      	adds	r7, #8
   11614:	46bd      	mov	sp, r7
   11616:	bd80      	pop	{r7, pc}
   11618:	000118fd 	.word	0x000118fd
   1161c:	00012590 	.word	0x00012590
   11620:	2000ac40 	.word	0x2000ac40

00011624 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   11624:	b580      	push	{r7, lr}
   11626:	b082      	sub	sp, #8
   11628:	af00      	add	r7, sp, #0
   1162a:	6078      	str	r0, [r7, #4]
   1162c:	4a05      	ldr	r2, [pc, #20]	; (11644 <_ZN14Calendar_ClassD1Ev+0x20>)
   1162e:	687b      	ldr	r3, [r7, #4]
   11630:	601a      	str	r2, [r3, #0]
   11632:	687b      	ldr	r3, [r7, #4]
   11634:	4618      	mov	r0, r3
   11636:	4b04      	ldr	r3, [pc, #16]	; (11648 <_ZN14Calendar_ClassD1Ev+0x24>)
   11638:	4798      	blx	r3
{
} //~Calendar_Class
   1163a:	687b      	ldr	r3, [r7, #4]
   1163c:	4618      	mov	r0, r3
   1163e:	3708      	adds	r7, #8
   11640:	46bd      	mov	sp, r7
   11642:	bd80      	pop	{r7, pc}
   11644:	00012590 	.word	0x00012590
   11648:	0001191d 	.word	0x0001191d

0001164c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1164c:	b580      	push	{r7, lr}
   1164e:	b082      	sub	sp, #8
   11650:	af00      	add	r7, sp, #0
   11652:	6078      	str	r0, [r7, #4]
   11654:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   11656:	687b      	ldr	r3, [r7, #4]
   11658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1165c:	6839      	ldr	r1, [r7, #0]
   1165e:	4618      	mov	r0, r3
   11660:	4b03      	ldr	r3, [pc, #12]	; (11670 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   11662:	4798      	blx	r3
   11664:	4603      	mov	r3, r0
}
   11666:	4618      	mov	r0, r3
   11668:	3708      	adds	r7, #8
   1166a:	46bd      	mov	sp, r7
   1166c:	bd80      	pop	{r7, pc}
   1166e:	bf00      	nop
   11670:	00001f29 	.word	0x00001f29

00011674 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   11674:	b480      	push	{r7}
   11676:	b083      	sub	sp, #12
   11678:	af00      	add	r7, sp, #0
   1167a:	6078      	str	r0, [r7, #4]
   1167c:	460b      	mov	r3, r1
   1167e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   11680:	887b      	ldrh	r3, [r7, #2]
   11682:	f003 0303 	and.w	r3, r3, #3
   11686:	2b00      	cmp	r3, #0
   11688:	d001      	beq.n	1168e <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1168a:	2300      	movs	r3, #0
   1168c:	e000      	b.n	11690 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   1168e:	2301      	movs	r3, #1
	}
}
   11690:	4618      	mov	r0, r3
   11692:	370c      	adds	r7, #12
   11694:	46bd      	mov	sp, r7
   11696:	bc80      	pop	{r7}
   11698:	4770      	bx	lr
	...

0001169c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1169c:	b580      	push	{r7, lr}
   1169e:	b086      	sub	sp, #24
   116a0:	af00      	add	r7, sp, #0
   116a2:	6078      	str	r0, [r7, #4]
   116a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   116a6:	2300      	movs	r3, #0
   116a8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   116aa:	2300      	movs	r3, #0
   116ac:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   116ae:	683b      	ldr	r3, [r7, #0]
   116b0:	88db      	ldrh	r3, [r3, #6]
   116b2:	b2da      	uxtb	r2, r3
   116b4:	687b      	ldr	r3, [r7, #4]
   116b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   116ba:	699b      	ldr	r3, [r3, #24]
   116bc:	b2db      	uxtb	r3, r3
   116be:	1ad3      	subs	r3, r2, r3
   116c0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   116c2:	683b      	ldr	r3, [r7, #0]
   116c4:	795b      	ldrb	r3, [r3, #5]
   116c6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   116c8:	683b      	ldr	r3, [r7, #0]
   116ca:	791b      	ldrb	r3, [r3, #4]
   116cc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   116ce:	683b      	ldr	r3, [r7, #0]
   116d0:	789b      	ldrb	r3, [r3, #2]
   116d2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   116d4:	683b      	ldr	r3, [r7, #0]
   116d6:	785b      	ldrb	r3, [r3, #1]
   116d8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   116da:	683b      	ldr	r3, [r7, #0]
   116dc:	781b      	ldrb	r3, [r3, #0]
   116de:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   116e0:	2300      	movs	r3, #0
   116e2:	613b      	str	r3, [r7, #16]
   116e4:	7bfa      	ldrb	r2, [r7, #15]
   116e6:	693b      	ldr	r3, [r7, #16]
   116e8:	429a      	cmp	r2, r3
   116ea:	d91e      	bls.n	1172a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   116ec:	687b      	ldr	r3, [r7, #4]
   116ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   116f2:	699b      	ldr	r3, [r3, #24]
   116f4:	b29a      	uxth	r2, r3
   116f6:	693b      	ldr	r3, [r7, #16]
   116f8:	b29b      	uxth	r3, r3
   116fa:	4413      	add	r3, r2
   116fc:	b29b      	uxth	r3, r3
   116fe:	4619      	mov	r1, r3
   11700:	6878      	ldr	r0, [r7, #4]
   11702:	4b27      	ldr	r3, [pc, #156]	; (117a0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   11704:	4798      	blx	r3
   11706:	4603      	mov	r3, r0
   11708:	2b00      	cmp	r3, #0
   1170a:	d006      	beq.n	1171a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   1170c:	697b      	ldr	r3, [r7, #20]
   1170e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   11712:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   11716:	617b      	str	r3, [r7, #20]
   11718:	e003      	b.n	11722 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   1171a:	697a      	ldr	r2, [r7, #20]
   1171c:	4b21      	ldr	r3, [pc, #132]	; (117a4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   1171e:	4413      	add	r3, r2
   11720:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   11722:	693b      	ldr	r3, [r7, #16]
   11724:	3301      	adds	r3, #1
   11726:	613b      	str	r3, [r7, #16]
   11728:	e7dc      	b.n	116e4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   1172a:	2301      	movs	r3, #1
   1172c:	613b      	str	r3, [r7, #16]
   1172e:	7bba      	ldrb	r2, [r7, #14]
   11730:	693b      	ldr	r3, [r7, #16]
   11732:	429a      	cmp	r2, r3
   11734:	d910      	bls.n	11758 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   11736:	683b      	ldr	r3, [r7, #0]
   11738:	88db      	ldrh	r3, [r3, #6]
   1173a:	4619      	mov	r1, r3
   1173c:	693b      	ldr	r3, [r7, #16]
   1173e:	b2db      	uxtb	r3, r3
   11740:	461a      	mov	r2, r3
   11742:	6878      	ldr	r0, [r7, #4]
   11744:	4b18      	ldr	r3, [pc, #96]	; (117a8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   11746:	4798      	blx	r3
   11748:	4602      	mov	r2, r0
   1174a:	697b      	ldr	r3, [r7, #20]
   1174c:	4413      	add	r3, r2
   1174e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   11750:	693b      	ldr	r3, [r7, #16]
   11752:	3301      	adds	r3, #1
   11754:	613b      	str	r3, [r7, #16]
   11756:	e7ea      	b.n	1172e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   11758:	7b7b      	ldrb	r3, [r7, #13]
   1175a:	3b01      	subs	r3, #1
   1175c:	4a13      	ldr	r2, [pc, #76]	; (117ac <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1175e:	fb02 f303 	mul.w	r3, r2, r3
   11762:	461a      	mov	r2, r3
   11764:	697b      	ldr	r3, [r7, #20]
   11766:	4413      	add	r3, r2
   11768:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1176a:	7b3b      	ldrb	r3, [r7, #12]
   1176c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   11770:	fb02 f303 	mul.w	r3, r2, r3
   11774:	461a      	mov	r2, r3
   11776:	697b      	ldr	r3, [r7, #20]
   11778:	4413      	add	r3, r2
   1177a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1177c:	7afa      	ldrb	r2, [r7, #11]
   1177e:	4613      	mov	r3, r2
   11780:	011b      	lsls	r3, r3, #4
   11782:	1a9b      	subs	r3, r3, r2
   11784:	009b      	lsls	r3, r3, #2
   11786:	461a      	mov	r2, r3
   11788:	697b      	ldr	r3, [r7, #20]
   1178a:	4413      	add	r3, r2
   1178c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1178e:	7abb      	ldrb	r3, [r7, #10]
   11790:	697a      	ldr	r2, [r7, #20]
   11792:	4413      	add	r3, r2
   11794:	617b      	str	r3, [r7, #20]

	return tmp;
   11796:	697b      	ldr	r3, [r7, #20]
}
   11798:	4618      	mov	r0, r3
   1179a:	3718      	adds	r7, #24
   1179c:	46bd      	mov	sp, r7
   1179e:	bd80      	pop	{r7, pc}
   117a0:	00011675 	.word	0x00011675
   117a4:	01e13380 	.word	0x01e13380
   117a8:	000117b1 	.word	0x000117b1
   117ac:	00015180 	.word	0x00015180

000117b0 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   117b0:	b580      	push	{r7, lr}
   117b2:	b086      	sub	sp, #24
   117b4:	af00      	add	r7, sp, #0
   117b6:	60f8      	str	r0, [r7, #12]
   117b8:	60b9      	str	r1, [r7, #8]
   117ba:	4613      	mov	r3, r2
   117bc:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   117be:	2300      	movs	r3, #0
   117c0:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   117c2:	68bb      	ldr	r3, [r7, #8]
   117c4:	b29b      	uxth	r3, r3
   117c6:	4619      	mov	r1, r3
   117c8:	68f8      	ldr	r0, [r7, #12]
   117ca:	4b2f      	ldr	r3, [pc, #188]	; (11888 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   117cc:	4798      	blx	r3
   117ce:	4603      	mov	r3, r0
   117d0:	2b00      	cmp	r3, #0
   117d2:	d028      	beq.n	11826 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   117d4:	79fb      	ldrb	r3, [r7, #7]
   117d6:	3b01      	subs	r3, #1
   117d8:	2b0b      	cmp	r3, #11
   117da:	d84c      	bhi.n	11876 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   117dc:	a201      	add	r2, pc, #4	; (adr r2, 117e4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   117de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   117e2:	bf00      	nop
   117e4:	00011815 	.word	0x00011815
   117e8:	0001181b 	.word	0x0001181b
   117ec:	00011815 	.word	0x00011815
   117f0:	00011821 	.word	0x00011821
   117f4:	00011815 	.word	0x00011815
   117f8:	00011821 	.word	0x00011821
   117fc:	00011815 	.word	0x00011815
   11800:	00011815 	.word	0x00011815
   11804:	00011821 	.word	0x00011821
   11808:	00011815 	.word	0x00011815
   1180c:	00011821 	.word	0x00011821
   11810:	00011815 	.word	0x00011815
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   11814:	4b1d      	ldr	r3, [pc, #116]	; (1188c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   11816:	617b      	str	r3, [r7, #20]
			break;
   11818:	e030      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   1181a:	4b1d      	ldr	r3, [pc, #116]	; (11890 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   1181c:	617b      	str	r3, [r7, #20]
			break;
   1181e:	e02d      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   11820:	4b1c      	ldr	r3, [pc, #112]	; (11894 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   11822:	617b      	str	r3, [r7, #20]
			break;
   11824:	e02a      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   11826:	79fb      	ldrb	r3, [r7, #7]
   11828:	3b01      	subs	r3, #1
   1182a:	2b0b      	cmp	r3, #11
   1182c:	d825      	bhi.n	1187a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   1182e:	a201      	add	r2, pc, #4	; (adr r2, 11834 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   11830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11834:	00011865 	.word	0x00011865
   11838:	0001186b 	.word	0x0001186b
   1183c:	00011865 	.word	0x00011865
   11840:	00011871 	.word	0x00011871
   11844:	00011865 	.word	0x00011865
   11848:	00011871 	.word	0x00011871
   1184c:	00011865 	.word	0x00011865
   11850:	00011865 	.word	0x00011865
   11854:	00011871 	.word	0x00011871
   11858:	00011865 	.word	0x00011865
   1185c:	00011871 	.word	0x00011871
   11860:	00011865 	.word	0x00011865
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   11864:	4b09      	ldr	r3, [pc, #36]	; (1188c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   11866:	617b      	str	r3, [r7, #20]
			break;
   11868:	e008      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1186a:	4b0b      	ldr	r3, [pc, #44]	; (11898 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1186c:	617b      	str	r3, [r7, #20]
			break;
   1186e:	e005      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   11870:	4b08      	ldr	r3, [pc, #32]	; (11894 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   11872:	617b      	str	r3, [r7, #20]
			break;
   11874:	e002      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   11876:	bf00      	nop
   11878:	e000      	b.n	1187c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1187a:	bf00      	nop
		}
	}

	return sec_in_month;
   1187c:	697b      	ldr	r3, [r7, #20]
}
   1187e:	4618      	mov	r0, r3
   11880:	3718      	adds	r7, #24
   11882:	46bd      	mov	sp, r7
   11884:	bd80      	pop	{r7, pc}
   11886:	bf00      	nop
   11888:	00011675 	.word	0x00011675
   1188c:	0028de80 	.word	0x0028de80
   11890:	00263b80 	.word	0x00263b80
   11894:	00278d00 	.word	0x00278d00
   11898:	0024ea00 	.word	0x0024ea00

0001189c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1189c:	b580      	push	{r7, lr}
   1189e:	b082      	sub	sp, #8
   118a0:	af00      	add	r7, sp, #0
   118a2:	6078      	str	r0, [r7, #4]
   118a4:	6039      	str	r1, [r7, #0]
   118a6:	687b      	ldr	r3, [r7, #4]
   118a8:	2b01      	cmp	r3, #1
   118aa:	d10d      	bne.n	118c8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   118ac:	683b      	ldr	r3, [r7, #0]
   118ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   118b2:	4293      	cmp	r3, r2
   118b4:	d108      	bne.n	118c8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   118b6:	4906      	ldr	r1, [pc, #24]	; (118d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   118b8:	4806      	ldr	r0, [pc, #24]	; (118d4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   118ba:	4b07      	ldr	r3, [pc, #28]	; (118d8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   118bc:	4798      	blx	r3
   118be:	4a07      	ldr	r2, [pc, #28]	; (118dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   118c0:	4907      	ldr	r1, [pc, #28]	; (118e0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   118c2:	4804      	ldr	r0, [pc, #16]	; (118d4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   118c4:	4b07      	ldr	r3, [pc, #28]	; (118e4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   118c6:	4798      	blx	r3
   118c8:	bf00      	nop
   118ca:	3708      	adds	r7, #8
   118cc:	46bd      	mov	sp, r7
   118ce:	bd80      	pop	{r7, pc}
   118d0:	2000aed0 	.word	0x2000aed0
   118d4:	2000ac48 	.word	0x2000ac48
   118d8:	000115e9 	.word	0x000115e9
   118dc:	20000000 	.word	0x20000000
   118e0:	00011625 	.word	0x00011625
   118e4:	0001193d 	.word	0x0001193d

000118e8 <_GLOBAL__sub_I_ptrCalendarClass>:
   118e8:	b580      	push	{r7, lr}
   118ea:	af00      	add	r7, sp, #0
   118ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   118f0:	2001      	movs	r0, #1
   118f2:	4b01      	ldr	r3, [pc, #4]	; (118f8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   118f4:	4798      	blx	r3
   118f6:	bd80      	pop	{r7, pc}
   118f8:	0001189d 	.word	0x0001189d

000118fc <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   118fc:	b480      	push	{r7}
   118fe:	b083      	sub	sp, #12
   11900:	af00      	add	r7, sp, #0
   11902:	6078      	str	r0, [r7, #4]
   11904:	4a04      	ldr	r2, [pc, #16]	; (11918 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   11906:	687b      	ldr	r3, [r7, #4]
   11908:	601a      	str	r2, [r3, #0]
{
} //~D
   1190a:	687b      	ldr	r3, [r7, #4]
   1190c:	4618      	mov	r0, r3
   1190e:	370c      	adds	r7, #12
   11910:	46bd      	mov	sp, r7
   11912:	bc80      	pop	{r7}
   11914:	4770      	bx	lr
   11916:	bf00      	nop
   11918:	000125a0 	.word	0x000125a0

0001191c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   1191c:	b480      	push	{r7}
   1191e:	b083      	sub	sp, #12
   11920:	af00      	add	r7, sp, #0
   11922:	6078      	str	r0, [r7, #4]
   11924:	4a04      	ldr	r2, [pc, #16]	; (11938 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   11926:	687b      	ldr	r3, [r7, #4]
   11928:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1192a:	687b      	ldr	r3, [r7, #4]
   1192c:	4618      	mov	r0, r3
   1192e:	370c      	adds	r7, #12
   11930:	46bd      	mov	sp, r7
   11932:	bc80      	pop	{r7}
   11934:	4770      	bx	lr
   11936:	bf00      	nop
   11938:	000125a0 	.word	0x000125a0

0001193c <__aeabi_atexit>:
   1193c:	460b      	mov	r3, r1
   1193e:	4601      	mov	r1, r0
   11940:	4618      	mov	r0, r3
   11942:	f000 b92f 	b.w	11ba4 <__cxa_atexit>
   11946:	bf00      	nop

00011948 <__aeabi_frsub>:
   11948:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1194c:	e002      	b.n	11954 <__addsf3>
   1194e:	bf00      	nop

00011950 <__aeabi_fsub>:
   11950:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00011954 <__addsf3>:
   11954:	0042      	lsls	r2, r0, #1
   11956:	bf1f      	itttt	ne
   11958:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1195c:	ea92 0f03 	teqne	r2, r3
   11960:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   11964:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11968:	d06a      	beq.n	11a40 <__addsf3+0xec>
   1196a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1196e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   11972:	bfc1      	itttt	gt
   11974:	18d2      	addgt	r2, r2, r3
   11976:	4041      	eorgt	r1, r0
   11978:	4048      	eorgt	r0, r1
   1197a:	4041      	eorgt	r1, r0
   1197c:	bfb8      	it	lt
   1197e:	425b      	neglt	r3, r3
   11980:	2b19      	cmp	r3, #25
   11982:	bf88      	it	hi
   11984:	4770      	bxhi	lr
   11986:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1198a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1198e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11992:	bf18      	it	ne
   11994:	4240      	negne	r0, r0
   11996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1199a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1199e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   119a2:	bf18      	it	ne
   119a4:	4249      	negne	r1, r1
   119a6:	ea92 0f03 	teq	r2, r3
   119aa:	d03f      	beq.n	11a2c <__addsf3+0xd8>
   119ac:	f1a2 0201 	sub.w	r2, r2, #1
   119b0:	fa41 fc03 	asr.w	ip, r1, r3
   119b4:	eb10 000c 	adds.w	r0, r0, ip
   119b8:	f1c3 0320 	rsb	r3, r3, #32
   119bc:	fa01 f103 	lsl.w	r1, r1, r3
   119c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   119c4:	d502      	bpl.n	119cc <__addsf3+0x78>
   119c6:	4249      	negs	r1, r1
   119c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   119cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   119d0:	d313      	bcc.n	119fa <__addsf3+0xa6>
   119d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   119d6:	d306      	bcc.n	119e6 <__addsf3+0x92>
   119d8:	0840      	lsrs	r0, r0, #1
   119da:	ea4f 0131 	mov.w	r1, r1, rrx
   119de:	f102 0201 	add.w	r2, r2, #1
   119e2:	2afe      	cmp	r2, #254	; 0xfe
   119e4:	d251      	bcs.n	11a8a <__addsf3+0x136>
   119e6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   119ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   119ee:	bf08      	it	eq
   119f0:	f020 0001 	biceq.w	r0, r0, #1
   119f4:	ea40 0003 	orr.w	r0, r0, r3
   119f8:	4770      	bx	lr
   119fa:	0049      	lsls	r1, r1, #1
   119fc:	eb40 0000 	adc.w	r0, r0, r0
   11a00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   11a04:	f1a2 0201 	sub.w	r2, r2, #1
   11a08:	d1ed      	bne.n	119e6 <__addsf3+0x92>
   11a0a:	fab0 fc80 	clz	ip, r0
   11a0e:	f1ac 0c08 	sub.w	ip, ip, #8
   11a12:	ebb2 020c 	subs.w	r2, r2, ip
   11a16:	fa00 f00c 	lsl.w	r0, r0, ip
   11a1a:	bfaa      	itet	ge
   11a1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   11a20:	4252      	neglt	r2, r2
   11a22:	4318      	orrge	r0, r3
   11a24:	bfbc      	itt	lt
   11a26:	40d0      	lsrlt	r0, r2
   11a28:	4318      	orrlt	r0, r3
   11a2a:	4770      	bx	lr
   11a2c:	f092 0f00 	teq	r2, #0
   11a30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   11a34:	bf06      	itte	eq
   11a36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   11a3a:	3201      	addeq	r2, #1
   11a3c:	3b01      	subne	r3, #1
   11a3e:	e7b5      	b.n	119ac <__addsf3+0x58>
   11a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
   11a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   11a48:	bf18      	it	ne
   11a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11a4e:	d021      	beq.n	11a94 <__addsf3+0x140>
   11a50:	ea92 0f03 	teq	r2, r3
   11a54:	d004      	beq.n	11a60 <__addsf3+0x10c>
   11a56:	f092 0f00 	teq	r2, #0
   11a5a:	bf08      	it	eq
   11a5c:	4608      	moveq	r0, r1
   11a5e:	4770      	bx	lr
   11a60:	ea90 0f01 	teq	r0, r1
   11a64:	bf1c      	itt	ne
   11a66:	2000      	movne	r0, #0
   11a68:	4770      	bxne	lr
   11a6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   11a6e:	d104      	bne.n	11a7a <__addsf3+0x126>
   11a70:	0040      	lsls	r0, r0, #1
   11a72:	bf28      	it	cs
   11a74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   11a78:	4770      	bx	lr
   11a7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   11a7e:	bf3c      	itt	cc
   11a80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   11a84:	4770      	bxcc	lr
   11a86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11a8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   11a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11a92:	4770      	bx	lr
   11a94:	ea7f 6222 	mvns.w	r2, r2, asr #24
   11a98:	bf16      	itet	ne
   11a9a:	4608      	movne	r0, r1
   11a9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   11aa0:	4601      	movne	r1, r0
   11aa2:	0242      	lsls	r2, r0, #9
   11aa4:	bf06      	itte	eq
   11aa6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   11aaa:	ea90 0f01 	teqeq	r0, r1
   11aae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   11ab2:	4770      	bx	lr

00011ab4 <__aeabi_ui2f>:
   11ab4:	f04f 0300 	mov.w	r3, #0
   11ab8:	e004      	b.n	11ac4 <__aeabi_i2f+0x8>
   11aba:	bf00      	nop

00011abc <__aeabi_i2f>:
   11abc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   11ac0:	bf48      	it	mi
   11ac2:	4240      	negmi	r0, r0
   11ac4:	ea5f 0c00 	movs.w	ip, r0
   11ac8:	bf08      	it	eq
   11aca:	4770      	bxeq	lr
   11acc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   11ad0:	4601      	mov	r1, r0
   11ad2:	f04f 0000 	mov.w	r0, #0
   11ad6:	e01c      	b.n	11b12 <__aeabi_l2f+0x2a>

00011ad8 <__aeabi_ul2f>:
   11ad8:	ea50 0201 	orrs.w	r2, r0, r1
   11adc:	bf08      	it	eq
   11ade:	4770      	bxeq	lr
   11ae0:	f04f 0300 	mov.w	r3, #0
   11ae4:	e00a      	b.n	11afc <__aeabi_l2f+0x14>
   11ae6:	bf00      	nop

00011ae8 <__aeabi_l2f>:
   11ae8:	ea50 0201 	orrs.w	r2, r0, r1
   11aec:	bf08      	it	eq
   11aee:	4770      	bxeq	lr
   11af0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   11af4:	d502      	bpl.n	11afc <__aeabi_l2f+0x14>
   11af6:	4240      	negs	r0, r0
   11af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11afc:	ea5f 0c01 	movs.w	ip, r1
   11b00:	bf02      	ittt	eq
   11b02:	4684      	moveq	ip, r0
   11b04:	4601      	moveq	r1, r0
   11b06:	2000      	moveq	r0, #0
   11b08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   11b0c:	bf08      	it	eq
   11b0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   11b12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   11b16:	fabc f28c 	clz	r2, ip
   11b1a:	3a08      	subs	r2, #8
   11b1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   11b20:	db10      	blt.n	11b44 <__aeabi_l2f+0x5c>
   11b22:	fa01 fc02 	lsl.w	ip, r1, r2
   11b26:	4463      	add	r3, ip
   11b28:	fa00 fc02 	lsl.w	ip, r0, r2
   11b2c:	f1c2 0220 	rsb	r2, r2, #32
   11b30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11b34:	fa20 f202 	lsr.w	r2, r0, r2
   11b38:	eb43 0002 	adc.w	r0, r3, r2
   11b3c:	bf08      	it	eq
   11b3e:	f020 0001 	biceq.w	r0, r0, #1
   11b42:	4770      	bx	lr
   11b44:	f102 0220 	add.w	r2, r2, #32
   11b48:	fa01 fc02 	lsl.w	ip, r1, r2
   11b4c:	f1c2 0220 	rsb	r2, r2, #32
   11b50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   11b54:	fa21 f202 	lsr.w	r2, r1, r2
   11b58:	eb43 0002 	adc.w	r0, r3, r2
   11b5c:	bf08      	it	eq
   11b5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   11b62:	4770      	bx	lr

00011b64 <__aeabi_f2uiz>:
   11b64:	0042      	lsls	r2, r0, #1
   11b66:	d20e      	bcs.n	11b86 <__aeabi_f2uiz+0x22>
   11b68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   11b6c:	d30b      	bcc.n	11b86 <__aeabi_f2uiz+0x22>
   11b6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   11b72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   11b76:	d409      	bmi.n	11b8c <__aeabi_f2uiz+0x28>
   11b78:	ea4f 2300 	mov.w	r3, r0, lsl #8
   11b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11b80:	fa23 f002 	lsr.w	r0, r3, r2
   11b84:	4770      	bx	lr
   11b86:	f04f 0000 	mov.w	r0, #0
   11b8a:	4770      	bx	lr
   11b8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   11b90:	d101      	bne.n	11b96 <__aeabi_f2uiz+0x32>
   11b92:	0242      	lsls	r2, r0, #9
   11b94:	d102      	bne.n	11b9c <__aeabi_f2uiz+0x38>
   11b96:	f04f 30ff 	mov.w	r0, #4294967295
   11b9a:	4770      	bx	lr
   11b9c:	f04f 0000 	mov.w	r0, #0
   11ba0:	4770      	bx	lr
   11ba2:	bf00      	nop

00011ba4 <__cxa_atexit>:
   11ba4:	4613      	mov	r3, r2
   11ba6:	460a      	mov	r2, r1
   11ba8:	4601      	mov	r1, r0
   11baa:	2002      	movs	r0, #2
   11bac:	f000 b9b6 	b.w	11f1c <__register_exitproc>

00011bb0 <ffs>:
   11bb0:	b140      	cbz	r0, 11bc4 <ffs+0x14>
   11bb2:	2300      	movs	r3, #0
   11bb4:	fa40 f103 	asr.w	r1, r0, r3
   11bb8:	1c5a      	adds	r2, r3, #1
   11bba:	07c9      	lsls	r1, r1, #31
   11bbc:	4613      	mov	r3, r2
   11bbe:	d5f9      	bpl.n	11bb4 <ffs+0x4>
   11bc0:	4610      	mov	r0, r2
   11bc2:	4770      	bx	lr
   11bc4:	4602      	mov	r2, r0
   11bc6:	4610      	mov	r0, r2
   11bc8:	4770      	bx	lr
   11bca:	bf00      	nop

00011bcc <__libc_init_array>:
   11bcc:	b570      	push	{r4, r5, r6, lr}
   11bce:	4e0f      	ldr	r6, [pc, #60]	; (11c0c <__libc_init_array+0x40>)
   11bd0:	4d0f      	ldr	r5, [pc, #60]	; (11c10 <__libc_init_array+0x44>)
   11bd2:	1b76      	subs	r6, r6, r5
   11bd4:	10b6      	asrs	r6, r6, #2
   11bd6:	bf18      	it	ne
   11bd8:	2400      	movne	r4, #0
   11bda:	d005      	beq.n	11be8 <__libc_init_array+0x1c>
   11bdc:	3401      	adds	r4, #1
   11bde:	f855 3b04 	ldr.w	r3, [r5], #4
   11be2:	4798      	blx	r3
   11be4:	42a6      	cmp	r6, r4
   11be6:	d1f9      	bne.n	11bdc <__libc_init_array+0x10>
   11be8:	4e0a      	ldr	r6, [pc, #40]	; (11c14 <__libc_init_array+0x48>)
   11bea:	4d0b      	ldr	r5, [pc, #44]	; (11c18 <__libc_init_array+0x4c>)
   11bec:	1b76      	subs	r6, r6, r5
   11bee:	f000 fcdd 	bl	125ac <_init>
   11bf2:	10b6      	asrs	r6, r6, #2
   11bf4:	bf18      	it	ne
   11bf6:	2400      	movne	r4, #0
   11bf8:	d006      	beq.n	11c08 <__libc_init_array+0x3c>
   11bfa:	3401      	adds	r4, #1
   11bfc:	f855 3b04 	ldr.w	r3, [r5], #4
   11c00:	4798      	blx	r3
   11c02:	42a6      	cmp	r6, r4
   11c04:	d1f9      	bne.n	11bfa <__libc_init_array+0x2e>
   11c06:	bd70      	pop	{r4, r5, r6, pc}
   11c08:	bd70      	pop	{r4, r5, r6, pc}
   11c0a:	bf00      	nop
   11c0c:	000125b8 	.word	0x000125b8
   11c10:	000125b8 	.word	0x000125b8
   11c14:	000125f4 	.word	0x000125f4
   11c18:	000125b8 	.word	0x000125b8

00011c1c <memcpy>:
   11c1c:	4684      	mov	ip, r0
   11c1e:	ea41 0300 	orr.w	r3, r1, r0
   11c22:	f013 0303 	ands.w	r3, r3, #3
   11c26:	d16d      	bne.n	11d04 <memcpy+0xe8>
   11c28:	3a40      	subs	r2, #64	; 0x40
   11c2a:	d341      	bcc.n	11cb0 <memcpy+0x94>
   11c2c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c30:	f840 3b04 	str.w	r3, [r0], #4
   11c34:	f851 3b04 	ldr.w	r3, [r1], #4
   11c38:	f840 3b04 	str.w	r3, [r0], #4
   11c3c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c40:	f840 3b04 	str.w	r3, [r0], #4
   11c44:	f851 3b04 	ldr.w	r3, [r1], #4
   11c48:	f840 3b04 	str.w	r3, [r0], #4
   11c4c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c50:	f840 3b04 	str.w	r3, [r0], #4
   11c54:	f851 3b04 	ldr.w	r3, [r1], #4
   11c58:	f840 3b04 	str.w	r3, [r0], #4
   11c5c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c60:	f840 3b04 	str.w	r3, [r0], #4
   11c64:	f851 3b04 	ldr.w	r3, [r1], #4
   11c68:	f840 3b04 	str.w	r3, [r0], #4
   11c6c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c70:	f840 3b04 	str.w	r3, [r0], #4
   11c74:	f851 3b04 	ldr.w	r3, [r1], #4
   11c78:	f840 3b04 	str.w	r3, [r0], #4
   11c7c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c80:	f840 3b04 	str.w	r3, [r0], #4
   11c84:	f851 3b04 	ldr.w	r3, [r1], #4
   11c88:	f840 3b04 	str.w	r3, [r0], #4
   11c8c:	f851 3b04 	ldr.w	r3, [r1], #4
   11c90:	f840 3b04 	str.w	r3, [r0], #4
   11c94:	f851 3b04 	ldr.w	r3, [r1], #4
   11c98:	f840 3b04 	str.w	r3, [r0], #4
   11c9c:	f851 3b04 	ldr.w	r3, [r1], #4
   11ca0:	f840 3b04 	str.w	r3, [r0], #4
   11ca4:	f851 3b04 	ldr.w	r3, [r1], #4
   11ca8:	f840 3b04 	str.w	r3, [r0], #4
   11cac:	3a40      	subs	r2, #64	; 0x40
   11cae:	d2bd      	bcs.n	11c2c <memcpy+0x10>
   11cb0:	3230      	adds	r2, #48	; 0x30
   11cb2:	d311      	bcc.n	11cd8 <memcpy+0xbc>
   11cb4:	f851 3b04 	ldr.w	r3, [r1], #4
   11cb8:	f840 3b04 	str.w	r3, [r0], #4
   11cbc:	f851 3b04 	ldr.w	r3, [r1], #4
   11cc0:	f840 3b04 	str.w	r3, [r0], #4
   11cc4:	f851 3b04 	ldr.w	r3, [r1], #4
   11cc8:	f840 3b04 	str.w	r3, [r0], #4
   11ccc:	f851 3b04 	ldr.w	r3, [r1], #4
   11cd0:	f840 3b04 	str.w	r3, [r0], #4
   11cd4:	3a10      	subs	r2, #16
   11cd6:	d2ed      	bcs.n	11cb4 <memcpy+0x98>
   11cd8:	320c      	adds	r2, #12
   11cda:	d305      	bcc.n	11ce8 <memcpy+0xcc>
   11cdc:	f851 3b04 	ldr.w	r3, [r1], #4
   11ce0:	f840 3b04 	str.w	r3, [r0], #4
   11ce4:	3a04      	subs	r2, #4
   11ce6:	d2f9      	bcs.n	11cdc <memcpy+0xc0>
   11ce8:	3204      	adds	r2, #4
   11cea:	d008      	beq.n	11cfe <memcpy+0xe2>
   11cec:	07d2      	lsls	r2, r2, #31
   11cee:	bf1c      	itt	ne
   11cf0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11cf4:	f800 3b01 	strbne.w	r3, [r0], #1
   11cf8:	d301      	bcc.n	11cfe <memcpy+0xe2>
   11cfa:	880b      	ldrh	r3, [r1, #0]
   11cfc:	8003      	strh	r3, [r0, #0]
   11cfe:	4660      	mov	r0, ip
   11d00:	4770      	bx	lr
   11d02:	bf00      	nop
   11d04:	2a08      	cmp	r2, #8
   11d06:	d313      	bcc.n	11d30 <memcpy+0x114>
   11d08:	078b      	lsls	r3, r1, #30
   11d0a:	d08d      	beq.n	11c28 <memcpy+0xc>
   11d0c:	f010 0303 	ands.w	r3, r0, #3
   11d10:	d08a      	beq.n	11c28 <memcpy+0xc>
   11d12:	f1c3 0304 	rsb	r3, r3, #4
   11d16:	1ad2      	subs	r2, r2, r3
   11d18:	07db      	lsls	r3, r3, #31
   11d1a:	bf1c      	itt	ne
   11d1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11d20:	f800 3b01 	strbne.w	r3, [r0], #1
   11d24:	d380      	bcc.n	11c28 <memcpy+0xc>
   11d26:	f831 3b02 	ldrh.w	r3, [r1], #2
   11d2a:	f820 3b02 	strh.w	r3, [r0], #2
   11d2e:	e77b      	b.n	11c28 <memcpy+0xc>
   11d30:	3a04      	subs	r2, #4
   11d32:	d3d9      	bcc.n	11ce8 <memcpy+0xcc>
   11d34:	3a01      	subs	r2, #1
   11d36:	f811 3b01 	ldrb.w	r3, [r1], #1
   11d3a:	f800 3b01 	strb.w	r3, [r0], #1
   11d3e:	d2f9      	bcs.n	11d34 <memcpy+0x118>
   11d40:	780b      	ldrb	r3, [r1, #0]
   11d42:	7003      	strb	r3, [r0, #0]
   11d44:	784b      	ldrb	r3, [r1, #1]
   11d46:	7043      	strb	r3, [r0, #1]
   11d48:	788b      	ldrb	r3, [r1, #2]
   11d4a:	7083      	strb	r3, [r0, #2]
   11d4c:	4660      	mov	r0, ip
   11d4e:	4770      	bx	lr

00011d50 <memset>:
   11d50:	b470      	push	{r4, r5, r6}
   11d52:	0786      	lsls	r6, r0, #30
   11d54:	d046      	beq.n	11de4 <memset+0x94>
   11d56:	1e54      	subs	r4, r2, #1
   11d58:	2a00      	cmp	r2, #0
   11d5a:	d041      	beq.n	11de0 <memset+0x90>
   11d5c:	b2ca      	uxtb	r2, r1
   11d5e:	4603      	mov	r3, r0
   11d60:	e002      	b.n	11d68 <memset+0x18>
   11d62:	f114 34ff 	adds.w	r4, r4, #4294967295
   11d66:	d33b      	bcc.n	11de0 <memset+0x90>
   11d68:	f803 2b01 	strb.w	r2, [r3], #1
   11d6c:	079d      	lsls	r5, r3, #30
   11d6e:	d1f8      	bne.n	11d62 <memset+0x12>
   11d70:	2c03      	cmp	r4, #3
   11d72:	d92e      	bls.n	11dd2 <memset+0x82>
   11d74:	b2cd      	uxtb	r5, r1
   11d76:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11d7a:	2c0f      	cmp	r4, #15
   11d7c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11d80:	d919      	bls.n	11db6 <memset+0x66>
   11d82:	f103 0210 	add.w	r2, r3, #16
   11d86:	4626      	mov	r6, r4
   11d88:	3e10      	subs	r6, #16
   11d8a:	2e0f      	cmp	r6, #15
   11d8c:	f842 5c10 	str.w	r5, [r2, #-16]
   11d90:	f842 5c0c 	str.w	r5, [r2, #-12]
   11d94:	f842 5c08 	str.w	r5, [r2, #-8]
   11d98:	f842 5c04 	str.w	r5, [r2, #-4]
   11d9c:	f102 0210 	add.w	r2, r2, #16
   11da0:	d8f2      	bhi.n	11d88 <memset+0x38>
   11da2:	f1a4 0210 	sub.w	r2, r4, #16
   11da6:	f022 020f 	bic.w	r2, r2, #15
   11daa:	f004 040f 	and.w	r4, r4, #15
   11dae:	3210      	adds	r2, #16
   11db0:	2c03      	cmp	r4, #3
   11db2:	4413      	add	r3, r2
   11db4:	d90d      	bls.n	11dd2 <memset+0x82>
   11db6:	461e      	mov	r6, r3
   11db8:	4622      	mov	r2, r4
   11dba:	3a04      	subs	r2, #4
   11dbc:	2a03      	cmp	r2, #3
   11dbe:	f846 5b04 	str.w	r5, [r6], #4
   11dc2:	d8fa      	bhi.n	11dba <memset+0x6a>
   11dc4:	1f22      	subs	r2, r4, #4
   11dc6:	f022 0203 	bic.w	r2, r2, #3
   11dca:	3204      	adds	r2, #4
   11dcc:	4413      	add	r3, r2
   11dce:	f004 0403 	and.w	r4, r4, #3
   11dd2:	b12c      	cbz	r4, 11de0 <memset+0x90>
   11dd4:	b2c9      	uxtb	r1, r1
   11dd6:	441c      	add	r4, r3
   11dd8:	f803 1b01 	strb.w	r1, [r3], #1
   11ddc:	429c      	cmp	r4, r3
   11dde:	d1fb      	bne.n	11dd8 <memset+0x88>
   11de0:	bc70      	pop	{r4, r5, r6}
   11de2:	4770      	bx	lr
   11de4:	4614      	mov	r4, r2
   11de6:	4603      	mov	r3, r0
   11de8:	e7c2      	b.n	11d70 <memset+0x20>
   11dea:	bf00      	nop

00011dec <rand>:
   11dec:	b410      	push	{r4}
   11dee:	4b0c      	ldr	r3, [pc, #48]	; (11e20 <rand+0x34>)
   11df0:	480c      	ldr	r0, [pc, #48]	; (11e24 <rand+0x38>)
   11df2:	6819      	ldr	r1, [r3, #0]
   11df4:	4c0c      	ldr	r4, [pc, #48]	; (11e28 <rand+0x3c>)
   11df6:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   11dfa:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   11dfe:	fb00 f002 	mul.w	r0, r0, r2
   11e02:	fb04 0003 	mla	r0, r4, r3, r0
   11e06:	fba2 2304 	umull	r2, r3, r2, r4
   11e0a:	4403      	add	r3, r0
   11e0c:	3201      	adds	r2, #1
   11e0e:	f143 0300 	adc.w	r3, r3, #0
   11e12:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   11e16:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   11e1a:	bc10      	pop	{r4}
   11e1c:	4770      	bx	lr
   11e1e:	bf00      	nop
   11e20:	2000021c 	.word	0x2000021c
   11e24:	5851f42d 	.word	0x5851f42d
   11e28:	4c957f2d 	.word	0x4c957f2d
	...

00011e40 <strlen>:
   11e40:	f890 f000 	pld	[r0]
   11e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   11e48:	f020 0107 	bic.w	r1, r0, #7
   11e4c:	f06f 0c00 	mvn.w	ip, #0
   11e50:	f010 0407 	ands.w	r4, r0, #7
   11e54:	f891 f020 	pld	[r1, #32]
   11e58:	f040 8049 	bne.w	11eee <strlen+0xae>
   11e5c:	f04f 0400 	mov.w	r4, #0
   11e60:	f06f 0007 	mvn.w	r0, #7
   11e64:	e9d1 2300 	ldrd	r2, r3, [r1]
   11e68:	f891 f040 	pld	[r1, #64]	; 0x40
   11e6c:	f100 0008 	add.w	r0, r0, #8
   11e70:	fa82 f24c 	uadd8	r2, r2, ip
   11e74:	faa4 f28c 	sel	r2, r4, ip
   11e78:	fa83 f34c 	uadd8	r3, r3, ip
   11e7c:	faa2 f38c 	sel	r3, r2, ip
   11e80:	bb4b      	cbnz	r3, 11ed6 <strlen+0x96>
   11e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11e86:	fa82 f24c 	uadd8	r2, r2, ip
   11e8a:	f100 0008 	add.w	r0, r0, #8
   11e8e:	faa4 f28c 	sel	r2, r4, ip
   11e92:	fa83 f34c 	uadd8	r3, r3, ip
   11e96:	faa2 f38c 	sel	r3, r2, ip
   11e9a:	b9e3      	cbnz	r3, 11ed6 <strlen+0x96>
   11e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11ea0:	fa82 f24c 	uadd8	r2, r2, ip
   11ea4:	f100 0008 	add.w	r0, r0, #8
   11ea8:	faa4 f28c 	sel	r2, r4, ip
   11eac:	fa83 f34c 	uadd8	r3, r3, ip
   11eb0:	faa2 f38c 	sel	r3, r2, ip
   11eb4:	b97b      	cbnz	r3, 11ed6 <strlen+0x96>
   11eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   11eba:	f101 0120 	add.w	r1, r1, #32
   11ebe:	fa82 f24c 	uadd8	r2, r2, ip
   11ec2:	f100 0008 	add.w	r0, r0, #8
   11ec6:	faa4 f28c 	sel	r2, r4, ip
   11eca:	fa83 f34c 	uadd8	r3, r3, ip
   11ece:	faa2 f38c 	sel	r3, r2, ip
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d0c6      	beq.n	11e64 <strlen+0x24>
   11ed6:	2a00      	cmp	r2, #0
   11ed8:	bf04      	itt	eq
   11eda:	3004      	addeq	r0, #4
   11edc:	461a      	moveq	r2, r3
   11ede:	ba12      	rev	r2, r2
   11ee0:	fab2 f282 	clz	r2, r2
   11ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   11ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   11eec:	4770      	bx	lr
   11eee:	e9d1 2300 	ldrd	r2, r3, [r1]
   11ef2:	f004 0503 	and.w	r5, r4, #3
   11ef6:	f1c4 0000 	rsb	r0, r4, #0
   11efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   11efe:	f014 0f04 	tst.w	r4, #4
   11f02:	f891 f040 	pld	[r1, #64]	; 0x40
   11f06:	fa0c f505 	lsl.w	r5, ip, r5
   11f0a:	ea62 0205 	orn	r2, r2, r5
   11f0e:	bf1c      	itt	ne
   11f10:	ea63 0305 	ornne	r3, r3, r5
   11f14:	4662      	movne	r2, ip
   11f16:	f04f 0400 	mov.w	r4, #0
   11f1a:	e7a9      	b.n	11e70 <strlen+0x30>

00011f1c <__register_exitproc>:
   11f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f20:	4d2c      	ldr	r5, [pc, #176]	; (11fd4 <__register_exitproc+0xb8>)
   11f22:	4606      	mov	r6, r0
   11f24:	6828      	ldr	r0, [r5, #0]
   11f26:	4698      	mov	r8, r3
   11f28:	460f      	mov	r7, r1
   11f2a:	4691      	mov	r9, r2
   11f2c:	f000 f882 	bl	12034 <__retarget_lock_acquire_recursive>
   11f30:	4b29      	ldr	r3, [pc, #164]	; (11fd8 <__register_exitproc+0xbc>)
   11f32:	681c      	ldr	r4, [r3, #0]
   11f34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   11f38:	2b00      	cmp	r3, #0
   11f3a:	d03e      	beq.n	11fba <__register_exitproc+0x9e>
   11f3c:	685a      	ldr	r2, [r3, #4]
   11f3e:	2a1f      	cmp	r2, #31
   11f40:	dc1c      	bgt.n	11f7c <__register_exitproc+0x60>
   11f42:	f102 0e01 	add.w	lr, r2, #1
   11f46:	b176      	cbz	r6, 11f66 <__register_exitproc+0x4a>
   11f48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   11f4c:	2401      	movs	r4, #1
   11f4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11f52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   11f56:	4094      	lsls	r4, r2
   11f58:	4320      	orrs	r0, r4
   11f5a:	2e02      	cmp	r6, #2
   11f5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   11f60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11f64:	d023      	beq.n	11fae <__register_exitproc+0x92>
   11f66:	3202      	adds	r2, #2
   11f68:	f8c3 e004 	str.w	lr, [r3, #4]
   11f6c:	6828      	ldr	r0, [r5, #0]
   11f6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11f72:	f000 f861 	bl	12038 <__retarget_lock_release_recursive>
   11f76:	2000      	movs	r0, #0
   11f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11f7c:	4b17      	ldr	r3, [pc, #92]	; (11fdc <__register_exitproc+0xc0>)
   11f7e:	b30b      	cbz	r3, 11fc4 <__register_exitproc+0xa8>
   11f80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11f84:	f7fc f930 	bl	e1e8 <malloc>
   11f88:	4603      	mov	r3, r0
   11f8a:	b1d8      	cbz	r0, 11fc4 <__register_exitproc+0xa8>
   11f8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11f90:	6002      	str	r2, [r0, #0]
   11f92:	2100      	movs	r1, #0
   11f94:	6041      	str	r1, [r0, #4]
   11f96:	460a      	mov	r2, r1
   11f98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   11f9c:	f04f 0e01 	mov.w	lr, #1
   11fa0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11fa4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11fa8:	2e00      	cmp	r6, #0
   11faa:	d0dc      	beq.n	11f66 <__register_exitproc+0x4a>
   11fac:	e7cc      	b.n	11f48 <__register_exitproc+0x2c>
   11fae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11fb2:	430c      	orrs	r4, r1
   11fb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11fb8:	e7d5      	b.n	11f66 <__register_exitproc+0x4a>
   11fba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   11fbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11fc2:	e7bb      	b.n	11f3c <__register_exitproc+0x20>
   11fc4:	6828      	ldr	r0, [r5, #0]
   11fc6:	f000 f837 	bl	12038 <__retarget_lock_release_recursive>
   11fca:	f04f 30ff 	mov.w	r0, #4294967295
   11fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11fd2:	bf00      	nop
   11fd4:	20000648 	.word	0x20000648
   11fd8:	000125a8 	.word	0x000125a8
   11fdc:	0000e1e9 	.word	0x0000e1e9

00011fe0 <register_fini>:
   11fe0:	4b02      	ldr	r3, [pc, #8]	; (11fec <register_fini+0xc>)
   11fe2:	b113      	cbz	r3, 11fea <register_fini+0xa>
   11fe4:	4802      	ldr	r0, [pc, #8]	; (11ff0 <register_fini+0x10>)
   11fe6:	f000 b805 	b.w	11ff4 <atexit>
   11fea:	4770      	bx	lr
   11fec:	00000000 	.word	0x00000000
   11ff0:	00012001 	.word	0x00012001

00011ff4 <atexit>:
   11ff4:	2300      	movs	r3, #0
   11ff6:	4601      	mov	r1, r0
   11ff8:	461a      	mov	r2, r3
   11ffa:	4618      	mov	r0, r3
   11ffc:	f7ff bf8e 	b.w	11f1c <__register_exitproc>

00012000 <__libc_fini_array>:
   12000:	b538      	push	{r3, r4, r5, lr}
   12002:	4c0a      	ldr	r4, [pc, #40]	; (1202c <__libc_fini_array+0x2c>)
   12004:	4d0a      	ldr	r5, [pc, #40]	; (12030 <__libc_fini_array+0x30>)
   12006:	1b64      	subs	r4, r4, r5
   12008:	10a4      	asrs	r4, r4, #2
   1200a:	d00a      	beq.n	12022 <__libc_fini_array+0x22>
   1200c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   12010:	3b01      	subs	r3, #1
   12012:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12016:	3c01      	subs	r4, #1
   12018:	f855 3904 	ldr.w	r3, [r5], #-4
   1201c:	4798      	blx	r3
   1201e:	2c00      	cmp	r4, #0
   12020:	d1f9      	bne.n	12016 <__libc_fini_array+0x16>
   12022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12026:	f000 bae5 	b.w	125f4 <_fini>
   1202a:	bf00      	nop
   1202c:	00012604 	.word	0x00012604
   12030:	00012600 	.word	0x00012600

00012034 <__retarget_lock_acquire_recursive>:
   12034:	4770      	bx	lr
   12036:	bf00      	nop

00012038 <__retarget_lock_release_recursive>:
   12038:	4770      	bx	lr
   1203a:	bf00      	nop
   1203c:	682f2e2e 	.word	0x682f2e2e
   12040:	702f6c70 	.word	0x702f6c70
   12044:	2f74726f 	.word	0x2f74726f
   12048:	5f6c7068 	.word	0x5f6c7068
   1204c:	6f697067 	.word	0x6f697067
   12050:	7361625f 	.word	0x7361625f
   12054:	00682e65 	.word	0x00682e65
   12058:	682f2e2e 	.word	0x682f2e2e
   1205c:	692f6c61 	.word	0x692f6c61
   12060:	756c636e 	.word	0x756c636e
   12064:	682f6564 	.word	0x682f6564
   12068:	775f6c61 	.word	0x775f6c61
   1206c:	682e7464 	.word	0x682e7464
   12070:	00000000 	.word	0x00000000
   12074:	682f2e2e 	.word	0x682f2e2e
   12078:	732f6c61 	.word	0x732f6c61
   1207c:	682f6372 	.word	0x682f6372
   12080:	635f6c61 	.word	0x635f6c61
   12084:	6e656c61 	.word	0x6e656c61
   12088:	2e726164 	.word	0x2e726164
   1208c:	00000063 	.word	0x00000063
   12090:	682f2e2e 	.word	0x682f2e2e
   12094:	732f6c61 	.word	0x732f6c61
   12098:	682f6372 	.word	0x682f6372
   1209c:	635f6c61 	.word	0x635f6c61
   120a0:	615f6e61 	.word	0x615f6e61
   120a4:	636e7973 	.word	0x636e7973
   120a8:	0000632e 	.word	0x0000632e
   120ac:	682f2e2e 	.word	0x682f2e2e
   120b0:	732f6c61 	.word	0x732f6c61
   120b4:	682f6372 	.word	0x682f6372
   120b8:	635f6c61 	.word	0x635f6c61
   120bc:	735f6372 	.word	0x735f6372
   120c0:	2e636e79 	.word	0x2e636e79
   120c4:	00000063 	.word	0x00000063
   120c8:	682f2e2e 	.word	0x682f2e2e
   120cc:	732f6c61 	.word	0x732f6c61
   120d0:	682f6372 	.word	0x682f6372
   120d4:	695f6c61 	.word	0x695f6c61
   120d8:	6d5f6332 	.word	0x6d5f6332
   120dc:	6e79735f 	.word	0x6e79735f
   120e0:	00632e63 	.word	0x00632e63
   120e4:	682f2e2e 	.word	0x682f2e2e
   120e8:	732f6c61 	.word	0x732f6c61
   120ec:	682f6372 	.word	0x682f6372
   120f0:	705f6c61 	.word	0x705f6c61
   120f4:	632e6d77 	.word	0x632e6d77
   120f8:	00000000 	.word	0x00000000
   120fc:	682f2e2e 	.word	0x682f2e2e
   12100:	732f6c61 	.word	0x732f6c61
   12104:	682f6372 	.word	0x682f6372
   12108:	715f6c61 	.word	0x715f6c61
   1210c:	5f697073 	.word	0x5f697073
   12110:	636e7973 	.word	0x636e7973
   12114:	0000632e 	.word	0x0000632e
   12118:	682f2e2e 	.word	0x682f2e2e
   1211c:	732f6c61 	.word	0x732f6c61
   12120:	682f6372 	.word	0x682f6372
   12124:	735f6c61 	.word	0x735f6c61
   12128:	6d5f6970 	.word	0x6d5f6970
   1212c:	6e79735f 	.word	0x6e79735f
   12130:	00632e63 	.word	0x00632e63
   12134:	682f2e2e 	.word	0x682f2e2e
   12138:	732f6c61 	.word	0x732f6c61
   1213c:	682f6372 	.word	0x682f6372
   12140:	745f6c61 	.word	0x745f6c61
   12144:	72656d69 	.word	0x72656d69
   12148:	0000632e 	.word	0x0000632e
   1214c:	682f2e2e 	.word	0x682f2e2e
   12150:	752f6c61 	.word	0x752f6c61
   12154:	736c6974 	.word	0x736c6974
   12158:	6372732f 	.word	0x6372732f
   1215c:	6974752f 	.word	0x6974752f
   12160:	6c5f736c 	.word	0x6c5f736c
   12164:	2e747369 	.word	0x2e747369
   12168:	00000063 	.word	0x00000063

0001216c <_map>:
   1216c:	00000000 00000040 00000001 00000021     ....@.......!...
   1217c:	00000003 00000003 00000004 00000004     ................
   1218c:	00000005 00000005 00000006 00000056     ............V...
   1219c:	00000007 00000057 00000008 00000028     ....W.......(...
   121ac:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   121bc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000121cc <user_mux_confs>:
   121cc:	00020100 00000000 00000000 00000000     ................
	...

00012210 <channel_confs>:
   12210:	0660065f 00000000 00000000 00000000     _.`.............
	...

00012250 <interrupt_cfg>:
	...
   122d0:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   122e0:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   122f0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   12300:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   12310:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   12320:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   12330:	43000400 43000800 43000c00              ...C...C...C

0001233c <sercomspi_regs>:
   1233c:	0020000c 00020000 00000000 01ff0001     .. .............
   1234c:	30000c04 02000000 00000000 ff001700     ...0............
   1235c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1236c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1237c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1238c:	43001400 43001800                       ...C...C

00012394 <_usb_ep_cfgs>:
   12394:	20000be0 00000000 00000040 20000c20     ... ....@... .. 
   123a4:	20000c60 00400040 20000ca0 20000ce0     `.. @.@.... ... 
   123b4:	00400040 20000d20 20000d60 00400040     @.@. .. `.. @.@.
   123c4:	20000da0 20000de0 00400040 00000804     ... ... @.@.....
   123d4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   123e4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   123f4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   12404:	7361625f 00682e65                       _base.h.

0001240c <n25q256a_interface>:
   1240c:	0000b679 0000b71d 0000b82d 0000b9e5     y.......-.......
   1241c:	0000ba75 752f2e2e 642f6273 63697665     u...../usb/devic
   1242c:	73752f65 2e636462 00000063              e/usbdc.c...

00012438 <_ZTV9CDC_Class>:
	...
   12440:	0000db39 0000dc19 0000d7bd 0000db01     9...............
   12450:	0000dcb1 0000dac5 0000d9d9 0000da29     ............)...
   12460:	0000db21 0000db81                       !.......

00012468 <_ZTV6Stream>:
	...
   12470:	0000e1fd 0000de1d 0000d7bd 0000d7d1     ................
   12480:	0000e1fd 0000e1fd 0000e1fd 2e257830     ............0x%.
   12490:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   124a0:	0066766f                                ovf.

000124a4 <_ZTV5Print>:
	...
   124ac:	0000e1fd 0000de1d 0000d7bd 0000d7d1     ................
   124bc:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   124cc:	73655466 41502074 44455353 00000000     fTest PASSED....
   124dc:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   124ec:	73655466 41462074 44454c49 00000000     fTest FAILED....
   124fc:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   1250c:	00632e6f 2e2f2e2e 2e2e2f2e 554c412f     o.c.../../../ALU
   1251c:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   1252c:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   1253c:	6f697067 7361625f 00682e65              gpio_base.h.

00012548 <defaultParameters>:
   12548:	00004020                                 @..

0001254c <defaultPreferences>:
   1254c:	000000fa 00000032                       ....2...

00012554 <_ZTV18Event_Logger_Class>:
	...
   1255c:	0001164d 0001169d 74696e49 696c6169     M.......Initiali
   1256c:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   1257c:	343a3631 32313a34 00000000              16:44:12....

00012588 <_ZTV14Calendar_Class>:
	...
   12590:	0001164d 0001169d                       M.......

00012598 <_ZTV17DateTimeLog_Class>:
	...
   125a0:	0000e1fd 0000e1fd                       ........

000125a8 <_global_impure_ptr>:
   125a8:	20000220                                 .. 

000125ac <_init>:
   125ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125ae:	bf00      	nop
   125b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   125b2:	bc08      	pop	{r3}
   125b4:	469e      	mov	lr, r3
   125b6:	4770      	bx	lr

000125b8 <__init_array_start>:
   125b8:	00011fe1 	.word	0x00011fe1

000125bc <__frame_dummy_init_array_entry>:
   125bc:	00000289 000003f5 000005b9 0000d2a5     ................
   125cc:	0000d785 0000de09 0000e1d5 0000e3cd     ................
   125dc:	0000fb31 000101f1 00010845 00011151     1.......E...Q...
   125ec:	00011315 000118e9                       ........

000125f4 <_fini>:
   125f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125f6:	bf00      	nop
   125f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   125fa:	bc08      	pop	{r3}
   125fc:	469e      	mov	lr, r3
   125fe:	4770      	bx	lr

00012600 <__fini_array_start>:
   12600:	00000265 	.word	0x00000265
