
Dual_Flapper_Valve_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011624  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011624  00011624  00021624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0001162c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003063c  2**0
                  CONTENTS
  5 .bss          00008ee8  2000063c  00011c68  0003063c  2**2
                  ALLOC
  6 .stack        00010004  20009524  0001ab50  0003063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007ca97  00000000  00000000  000306c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a787  00000000  00000000  000ad15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d8c2  00000000  00000000  000b78e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033f0  00000000  00000000  000d51a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003070  00000000  00000000  000d8593  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00050667  00000000  00000000  000db603  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003da86  00000000  00000000  0012bc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013fa00  00000000  00000000  001696f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d8c0  00000000  00000000  002a90f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 95 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     (.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	75 58 00 00 79 46 00 00 89 46 00 00 d1 02 00 00     uX..yF...F......
      7c:	99 46 00 00 a9 46 00 00 b9 46 00 00 c9 46 00 00     .F...F...F...F..
      8c:	d9 46 00 00 e9 46 00 00 f9 46 00 00 d1 02 00 00     .F...F...F......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 c1 3a 00 00 55 a7 00 00     .........:..U...
     184:	65 a7 00 00 75 a7 00 00 85 a7 00 00 d1 02 00 00     e...u...........
     194:	95 71 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .q..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 b1 71 00 00     .............q..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	cd 71 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .q..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 51 7e 00 00 d1 02 00 00     ........Q~......
     1f4:	6d 7e 00 00 d1 02 00 00 89 7e 00 00 a5 7e 00 00     m~.......~...~..
     204:	c1 7e 00 00 dd 7e 00 00 d1 02 00 00 d1 02 00 00     .~...~..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0001162c 	.word	0x0001162c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001162c 	.word	0x0001162c
     2c4:	20000640 	.word	0x20000640
     2c8:	0001162c 	.word	0x0001162c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0001162c 	.word	0x0001162c
     33c:	2000063c 	.word	0x2000063c
     340:	20009524 	.word	0x20009524
     344:	2000063c 	.word	0x2000063c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00010c99 	.word	0x00010c99
     354:	00000409 	.word	0x00000409

00000358 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
     35c:	4b01      	ldr	r3, [pc, #4]	; (364 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
     35e:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
     360:	4620      	mov	r0, r4
     362:	bd10      	pop	{r4, pc}
     364:	0000e2d5 	.word	0x0000e2d5

00000368 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
     368:	b538      	push	{r3, r4, r5, lr}
     36a:	4d04      	ldr	r5, [pc, #16]	; (37c <__tcf_0+0x14>)
     36c:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
     370:	4c03      	ldr	r4, [pc, #12]	; (380 <__tcf_0+0x18>)
     372:	47a0      	blx	r4
     374:	4628      	mov	r0, r5
     376:	47a0      	blx	r4
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	20000658 	.word	0x20000658
     380:	0000e2d5 	.word	0x0000e2d5

00000384 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

void Dual_Flapper_Valve_Controller::Init(){
     384:	b570      	push	{r4, r5, r6, lr}
     386:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		sfv[i]=&staticFVController[i];
     388:	4d0a      	ldr	r5, [pc, #40]	; (3b4 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x30>)
     38a:	f8c0 50cc 	str.w	r5, [r0, #204]	; 0xcc
		sfv[i]->InitController(i);
     38e:	2100      	movs	r1, #0
     390:	4628      	mov	r0, r5
     392:	4e09      	ldr	r6, [pc, #36]	; (3b8 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x34>)
     394:	47b0      	blx	r6
		sfv[i]=&staticFVController[i];
     396:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
     39a:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
		sfv[i]->InitController(i);
     39e:	2101      	movs	r1, #1
     3a0:	47b0      	blx	r6
	}
	fv1=sfv[0]; 
     3a2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
     3a6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	fv2=sfv[1]; 
     3aa:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
     3ae:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
     3b2:	bd70      	pop	{r4, r5, r6, pc}
     3b4:	20000658 	.word	0x20000658
     3b8:	0000e2f5 	.word	0x0000e2f5

000003bc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:
	
}

Dual_Flapper_Valve_Controller fv;
     3bc:	b570      	push	{r4, r5, r6, lr}
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
     3be:	4c0b      	ldr	r4, [pc, #44]	; (3ec <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x30>)
     3c0:	4620      	mov	r0, r4
     3c2:	4d0b      	ldr	r5, [pc, #44]	; (3f0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x34>)
     3c4:	47a8      	blx	r5
     3c6:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
     3ca:	47a8      	blx	r5
     3cc:	4e09      	ldr	r6, [pc, #36]	; (3f4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x38>)
     3ce:	4632      	mov	r2, r6
     3d0:	4909      	ldr	r1, [pc, #36]	; (3f8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x3c>)
     3d2:	2000      	movs	r0, #0
     3d4:	4d09      	ldr	r5, [pc, #36]	; (3fc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x40>)
     3d6:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
     3d8:	f504 74c4 	add.w	r4, r4, #392	; 0x188
     3dc:	4620      	mov	r0, r4
     3de:	4b08      	ldr	r3, [pc, #32]	; (400 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
     3e0:	4798      	blx	r3
Dual_Flapper_Valve_Controller fv;
     3e2:	4632      	mov	r2, r6
     3e4:	4907      	ldr	r1, [pc, #28]	; (404 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
     3e6:	4620      	mov	r0, r4
     3e8:	47a8      	blx	r5
     3ea:	bd70      	pop	{r4, r5, r6, pc}
     3ec:	20000658 	.word	0x20000658
     3f0:	0000e24d 	.word	0x0000e24d
     3f4:	20000000 	.word	0x20000000
     3f8:	00000369 	.word	0x00000369
     3fc:	00010a09 	.word	0x00010a09
     400:	0000e24d 	.word	0x0000e24d
     404:	00000359 	.word	0x00000359

00000408 <main>:


#include "main.h"

int main(void)
{
     408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	atmel_start_init();
     40c:	4b48      	ldr	r3, [pc, #288]	; (530 <main+0x128>)
     40e:	4798      	blx	r3
	uint8_t position;

	usb.Init();
     410:	4848      	ldr	r0, [pc, #288]	; (534 <main+0x12c>)
     412:	4b49      	ldr	r3, [pc, #292]	; (538 <main+0x130>)
     414:	4798      	blx	r3
	delay_ms(100);
     416:	2064      	movs	r0, #100	; 0x64
     418:	4b48      	ldr	r3, [pc, #288]	; (53c <main+0x134>)
     41a:	4798      	blx	r3

	memory.Init();
     41c:	4c48      	ldr	r4, [pc, #288]	; (540 <main+0x138>)
     41e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     422:	4620      	mov	r0, r4
     424:	4b47      	ldr	r3, [pc, #284]	; (544 <main+0x13c>)
     426:	4798      	blx	r3
	memory.WriteDefaultParameters();
     428:	4620      	mov	r0, r4
     42a:	4b47      	ldr	r3, [pc, #284]	; (548 <main+0x140>)
     42c:	4798      	blx	r3
	fv.Init();
     42e:	4847      	ldr	r0, [pc, #284]	; (54c <main+0x144>)
     430:	4b47      	ldr	r3, [pc, #284]	; (550 <main+0x148>)
     432:	4798      	blx	r3
// 			
// 		}
		
		for (uint8_t i = 1; i < 8; i++)
		{
			fv.fv1->StartControlling(i*32);
     434:	4c45      	ldr	r4, [pc, #276]	; (54c <main+0x144>)
			fv.fv2->StartControlling(i*32);
			while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
			{
				fv.fv1->Control_NBC_StandAlone_Reset();
     436:	4d47      	ldr	r5, [pc, #284]	; (554 <main+0x14c>)
     438:	e076      	b.n	528 <main+0x120>
     43a:	47a8      	blx	r5
				fv.fv2->Control_NBC_StandAlone_Reset();
     43c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
     440:	47a8      	blx	r5
			while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     442:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     446:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     44a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
     44e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     452:	b2db      	uxtb	r3, r3
     454:	2a00      	cmp	r2, #0
     456:	d0f0      	beq.n	43a <main+0x32>
     458:	2b00      	cmp	r3, #0
     45a:	d0ee      	beq.n	43a <main+0x32>
			}
		
			delay_ms(100);
     45c:	2064      	movs	r0, #100	; 0x64
     45e:	4b37      	ldr	r3, [pc, #220]	; (53c <main+0x134>)
     460:	4798      	blx	r3
			fv.fv1->StopControlling();
     462:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     466:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 55c <main+0x154>
     46a:	47c0      	blx	r8
			fv.fv2->StopControlling();
     46c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
     470:	47c0      	blx	r8
     472:	3620      	adds	r6, #32
		for (uint8_t i = 1; i < 8; i++)
     474:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
     478:	d015      	beq.n	4a6 <main+0x9e>
			fv.fv1->StartControlling(i*32);
     47a:	4631      	mov	r1, r6
     47c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     480:	47b8      	blx	r7
			fv.fv2->StartControlling(i*32);
     482:	4631      	mov	r1, r6
     484:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
     488:	47b8      	blx	r7
			while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     48a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     48e:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     492:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
     496:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     49a:	b2db      	uxtb	r3, r3
     49c:	2a00      	cmp	r2, #0
     49e:	d0cc      	beq.n	43a <main+0x32>
     4a0:	2b00      	cmp	r3, #0
     4a2:	d0ca      	beq.n	43a <main+0x32>
     4a4:	e7da      	b.n	45c <main+0x54>
		}
		delay_ms(1000);
     4a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4aa:	4b24      	ldr	r3, [pc, #144]	; (53c <main+0x134>)
     4ac:	4798      	blx	r3
     4ae:	26df      	movs	r6, #223	; 0xdf
   		for (uint8_t i = 1; i < 8; i++)
		{
			fv.fv1->StartControlling(255-i*32);
     4b0:	4f29      	ldr	r7, [pc, #164]	; (558 <main+0x150>)
     4b2:	e01f      	b.n	4f4 <main+0xec>
			fv.fv2->StartControlling(255-i*32);
			while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
			{
				fv.fv1->Control_NBC_StandAlone_Reset();
     4b4:	47a8      	blx	r5
				fv.fv2->Control_NBC_StandAlone_Reset();
     4b6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
     4ba:	47a8      	blx	r5
			while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     4bc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     4c0:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     4c4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
     4c8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     4cc:	b2db      	uxtb	r3, r3
     4ce:	2a00      	cmp	r2, #0
     4d0:	d0f0      	beq.n	4b4 <main+0xac>
     4d2:	2b00      	cmp	r3, #0
     4d4:	d0ee      	beq.n	4b4 <main+0xac>
			}
			delay_ms(100);
     4d6:	2064      	movs	r0, #100	; 0x64
     4d8:	4b18      	ldr	r3, [pc, #96]	; (53c <main+0x134>)
     4da:	4798      	blx	r3
			fv.fv1->StopControlling();
     4dc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     4e0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 55c <main+0x154>
     4e4:	47c0      	blx	r8
			fv.fv2->StopControlling();
     4e6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
     4ea:	47c0      	blx	r8
     4ec:	3e20      	subs	r6, #32
     4ee:	b2f6      	uxtb	r6, r6
   		for (uint8_t i = 1; i < 8; i++)
     4f0:	2eff      	cmp	r6, #255	; 0xff
     4f2:	d015      	beq.n	520 <main+0x118>
			fv.fv1->StartControlling(255-i*32);
     4f4:	4631      	mov	r1, r6
     4f6:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     4fa:	47b8      	blx	r7
			fv.fv2->StartControlling(255-i*32);
     4fc:	4631      	mov	r1, r6
     4fe:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
     502:	47b8      	blx	r7
			while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     504:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
     508:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     50c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
     510:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     514:	b2db      	uxtb	r3, r3
     516:	2a00      	cmp	r2, #0
     518:	d0cc      	beq.n	4b4 <main+0xac>
     51a:	2b00      	cmp	r3, #0
     51c:	d0ca      	beq.n	4b4 <main+0xac>
     51e:	e7da      	b.n	4d6 <main+0xce>
		
		}
	delay_ms(1000);
     520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     524:	4b05      	ldr	r3, [pc, #20]	; (53c <main+0x134>)
     526:	4798      	blx	r3
{
     528:	2620      	movs	r6, #32
			fv.fv1->StartControlling(i*32);
     52a:	4f0b      	ldr	r7, [pc, #44]	; (558 <main+0x150>)
     52c:	e7a5      	b.n	47a <main+0x72>
     52e:	bf00      	nop
     530:	00000635 	.word	0x00000635
     534:	200014d8 	.word	0x200014d8
     538:	0000d3ed 	.word	0x0000d3ed
     53c:	00001e01 	.word	0x00001e01
     540:	20002740 	.word	0x20002740
     544:	0000ddd5 	.word	0x0000ddd5
     548:	0000dd1d 	.word	0x0000dd1d
     54c:	200007e0 	.word	0x200007e0
     550:	00000385 	.word	0x00000385
     554:	0000e525 	.word	0x0000e525
     558:	0000ed81 	.word	0x0000ed81
     55c:	0000ed3d 	.word	0x0000ed3d

00000560 <_GLOBAL__sub_I_main>:


	

	}
}
     560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     564:	4c26      	ldr	r4, [pc, #152]	; (600 <_GLOBAL__sub_I_main+0xa0>)
     566:	4927      	ldr	r1, [pc, #156]	; (604 <_GLOBAL__sub_I_main+0xa4>)
     568:	4620      	mov	r0, r4
     56a:	4e27      	ldr	r6, [pc, #156]	; (608 <_GLOBAL__sub_I_main+0xa8>)
     56c:	47b0      	blx	r6
     56e:	4f27      	ldr	r7, [pc, #156]	; (60c <_GLOBAL__sub_I_main+0xac>)
     570:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 630 <_GLOBAL__sub_I_main+0xd0>
     574:	463a      	mov	r2, r7
     576:	4641      	mov	r1, r8
     578:	4620      	mov	r0, r4
     57a:	4d25      	ldr	r5, [pc, #148]	; (610 <_GLOBAL__sub_I_main+0xb0>)
     57c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     57e:	f104 0920 	add.w	r9, r4, #32
     582:	4924      	ldr	r1, [pc, #144]	; (614 <_GLOBAL__sub_I_main+0xb4>)
     584:	4648      	mov	r0, r9
     586:	47b0      	blx	r6
     588:	463a      	mov	r2, r7
     58a:	4641      	mov	r1, r8
     58c:	4648      	mov	r0, r9
     58e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     590:	f104 0940 	add.w	r9, r4, #64	; 0x40
     594:	4920      	ldr	r1, [pc, #128]	; (618 <_GLOBAL__sub_I_main+0xb8>)
     596:	4648      	mov	r0, r9
     598:	47b0      	blx	r6
     59a:	463a      	mov	r2, r7
     59c:	4641      	mov	r1, r8
     59e:	4648      	mov	r0, r9
     5a0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     5a2:	f104 0960 	add.w	r9, r4, #96	; 0x60
     5a6:	491d      	ldr	r1, [pc, #116]	; (61c <_GLOBAL__sub_I_main+0xbc>)
     5a8:	4648      	mov	r0, r9
     5aa:	47b0      	blx	r6
     5ac:	463a      	mov	r2, r7
     5ae:	4641      	mov	r1, r8
     5b0:	4648      	mov	r0, r9
     5b2:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     5b4:	f104 0980 	add.w	r9, r4, #128	; 0x80
     5b8:	4919      	ldr	r1, [pc, #100]	; (620 <_GLOBAL__sub_I_main+0xc0>)
     5ba:	4648      	mov	r0, r9
     5bc:	47b0      	blx	r6
     5be:	463a      	mov	r2, r7
     5c0:	4641      	mov	r1, r8
     5c2:	4648      	mov	r0, r9
     5c4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     5c6:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     5ca:	4916      	ldr	r1, [pc, #88]	; (624 <_GLOBAL__sub_I_main+0xc4>)
     5cc:	4648      	mov	r0, r9
     5ce:	47b0      	blx	r6
     5d0:	463a      	mov	r2, r7
     5d2:	4641      	mov	r1, r8
     5d4:	4648      	mov	r0, r9
     5d6:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     5d8:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     5dc:	4912      	ldr	r1, [pc, #72]	; (628 <_GLOBAL__sub_I_main+0xc8>)
     5de:	4648      	mov	r0, r9
     5e0:	47b0      	blx	r6
     5e2:	463a      	mov	r2, r7
     5e4:	4641      	mov	r1, r8
     5e6:	4648      	mov	r0, r9
     5e8:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     5ea:	34e0      	adds	r4, #224	; 0xe0
     5ec:	490f      	ldr	r1, [pc, #60]	; (62c <_GLOBAL__sub_I_main+0xcc>)
     5ee:	4620      	mov	r0, r4
     5f0:	47b0      	blx	r6
     5f2:	463a      	mov	r2, r7
     5f4:	4641      	mov	r1, r8
     5f6:	4620      	mov	r0, r4
     5f8:	47a8      	blx	r5
     5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5fe:	bf00      	nop
     600:	200008b4 	.word	0x200008b4
     604:	2000926c 	.word	0x2000926c
     608:	0000cd2d 	.word	0x0000cd2d
     60c:	20000000 	.word	0x20000000
     610:	00010a09 	.word	0x00010a09
     614:	20009300 	.word	0x20009300
     618:	20009424 	.word	0x20009424
     61c:	20009320 	.word	0x20009320
     620:	200093e4 	.word	0x200093e4
     624:	20009404 	.word	0x20009404
     628:	200092dc 	.word	0x200092dc
     62c:	2000937c 	.word	0x2000937c
     630:	0000cd65 	.word	0x0000cd65

00000634 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     634:	b580      	push	{r7, lr}
     636:	af00      	add	r7, sp, #0
	system_init();
     638:	4b03      	ldr	r3, [pc, #12]	; (648 <atmel_start_init+0x14>)
     63a:	4798      	blx	r3
	usb_init();
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <atmel_start_init+0x18>)
     63e:	4798      	blx	r3
	spi_nor_flash_init();
     640:	4b03      	ldr	r3, [pc, #12]	; (650 <atmel_start_init+0x1c>)
     642:	4798      	blx	r3
}
     644:	bf00      	nop
     646:	bd80      	pop	{r7, pc}
     648:	00001a35 	.word	0x00001a35
     64c:	0000ae59 	.word	0x0000ae59
     650:	0000aded 	.word	0x0000aded

00000654 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     654:	b480      	push	{r7}
     656:	b085      	sub	sp, #20
     658:	af00      	add	r7, sp, #0
     65a:	60f8      	str	r0, [r7, #12]
     65c:	460b      	mov	r3, r1
     65e:	607a      	str	r2, [r7, #4]
     660:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     662:	7afa      	ldrb	r2, [r7, #11]
     664:	68fb      	ldr	r3, [r7, #12]
     666:	3220      	adds	r2, #32
     668:	6879      	ldr	r1, [r7, #4]
     66a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     66e:	bf00      	nop
     670:	3714      	adds	r7, #20
     672:	46bd      	mov	sp, r7
     674:	f85d 7b04 	ldr.w	r7, [sp], #4
     678:	4770      	bx	lr

0000067a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     67a:	b480      	push	{r7}
     67c:	b083      	sub	sp, #12
     67e:	af00      	add	r7, sp, #0
     680:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     682:	687b      	ldr	r3, [r7, #4]
     684:	691b      	ldr	r3, [r3, #16]
     686:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     68e:	bf00      	nop
     690:	370c      	adds	r7, #12
     692:	46bd      	mov	sp, r7
     694:	f85d 7b04 	ldr.w	r7, [sp], #4
     698:	4770      	bx	lr

0000069a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     69a:	b480      	push	{r7}
     69c:	b083      	sub	sp, #12
     69e:	af00      	add	r7, sp, #0
     6a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	691b      	ldr	r3, [r3, #16]
     6a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6ae:	bf00      	nop
     6b0:	370c      	adds	r7, #12
     6b2:	46bd      	mov	sp, r7
     6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6b8:	4770      	bx	lr

000006ba <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     6ba:	b480      	push	{r7}
     6bc:	b083      	sub	sp, #12
     6be:	af00      	add	r7, sp, #0
     6c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	691b      	ldr	r3, [r3, #16]
     6c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6ce:	bf00      	nop
     6d0:	370c      	adds	r7, #12
     6d2:	46bd      	mov	sp, r7
     6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6d8:	4770      	bx	lr

000006da <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     6da:	b480      	push	{r7}
     6dc:	b083      	sub	sp, #12
     6de:	af00      	add	r7, sp, #0
     6e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	691b      	ldr	r3, [r3, #16]
     6e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6ee:	bf00      	nop
     6f0:	370c      	adds	r7, #12
     6f2:	46bd      	mov	sp, r7
     6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f8:	4770      	bx	lr

000006fa <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     6fa:	b480      	push	{r7}
     6fc:	b083      	sub	sp, #12
     6fe:	af00      	add	r7, sp, #0
     700:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     702:	687b      	ldr	r3, [r7, #4]
     704:	695b      	ldr	r3, [r3, #20]
     706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     70e:	bf00      	nop
     710:	370c      	adds	r7, #12
     712:	46bd      	mov	sp, r7
     714:	f85d 7b04 	ldr.w	r7, [sp], #4
     718:	4770      	bx	lr

0000071a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     71a:	b480      	push	{r7}
     71c:	b083      	sub	sp, #12
     71e:	af00      	add	r7, sp, #0
     720:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     722:	687b      	ldr	r3, [r7, #4]
     724:	695b      	ldr	r3, [r3, #20]
     726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     72e:	bf00      	nop
     730:	370c      	adds	r7, #12
     732:	46bd      	mov	sp, r7
     734:	f85d 7b04 	ldr.w	r7, [sp], #4
     738:	4770      	bx	lr

0000073a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     73a:	b480      	push	{r7}
     73c:	b083      	sub	sp, #12
     73e:	af00      	add	r7, sp, #0
     740:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     742:	687b      	ldr	r3, [r7, #4]
     744:	695b      	ldr	r3, [r3, #20]
     746:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     74e:	bf00      	nop
     750:	370c      	adds	r7, #12
     752:	46bd      	mov	sp, r7
     754:	f85d 7b04 	ldr.w	r7, [sp], #4
     758:	4770      	bx	lr

0000075a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     75a:	b480      	push	{r7}
     75c:	b083      	sub	sp, #12
     75e:	af00      	add	r7, sp, #0
     760:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     762:	687b      	ldr	r3, [r7, #4]
     764:	695b      	ldr	r3, [r3, #20]
     766:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     76e:	bf00      	nop
     770:	370c      	adds	r7, #12
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr

0000077a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     77a:	b480      	push	{r7}
     77c:	b083      	sub	sp, #12
     77e:	af00      	add	r7, sp, #0
     780:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     782:	687b      	ldr	r3, [r7, #4]
     784:	695b      	ldr	r3, [r3, #20]
     786:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     78e:	bf00      	nop
     790:	370c      	adds	r7, #12
     792:	46bd      	mov	sp, r7
     794:	f85d 7b04 	ldr.w	r7, [sp], #4
     798:	4770      	bx	lr

0000079a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     79a:	b480      	push	{r7}
     79c:	b083      	sub	sp, #12
     79e:	af00      	add	r7, sp, #0
     7a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	699b      	ldr	r3, [r3, #24]
     7a6:	f043 0201 	orr.w	r2, r3, #1
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7ae:	bf00      	nop
     7b0:	370c      	adds	r7, #12
     7b2:	46bd      	mov	sp, r7
     7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b8:	4770      	bx	lr

000007ba <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     7ba:	b480      	push	{r7}
     7bc:	b083      	sub	sp, #12
     7be:	af00      	add	r7, sp, #0
     7c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	699b      	ldr	r3, [r3, #24]
     7c6:	f043 0202 	orr.w	r2, r3, #2
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7ce:	bf00      	nop
     7d0:	370c      	adds	r7, #12
     7d2:	46bd      	mov	sp, r7
     7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7d8:	4770      	bx	lr

000007da <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     7da:	b480      	push	{r7}
     7dc:	b083      	sub	sp, #12
     7de:	af00      	add	r7, sp, #0
     7e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	699b      	ldr	r3, [r3, #24]
     7e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7ee:	bf00      	nop
     7f0:	370c      	adds	r7, #12
     7f2:	46bd      	mov	sp, r7
     7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7f8:	4770      	bx	lr

000007fa <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     7fa:	b480      	push	{r7}
     7fc:	b083      	sub	sp, #12
     7fe:	af00      	add	r7, sp, #0
     800:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     802:	687b      	ldr	r3, [r7, #4]
     804:	699b      	ldr	r3, [r3, #24]
     806:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     80e:	bf00      	nop
     810:	370c      	adds	r7, #12
     812:	46bd      	mov	sp, r7
     814:	f85d 7b04 	ldr.w	r7, [sp], #4
     818:	4770      	bx	lr

0000081a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     81a:	b480      	push	{r7}
     81c:	b083      	sub	sp, #12
     81e:	af00      	add	r7, sp, #0
     820:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     822:	687b      	ldr	r3, [r7, #4]
     824:	699b      	ldr	r3, [r3, #24]
     826:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     82e:	bf00      	nop
     830:	370c      	adds	r7, #12
     832:	46bd      	mov	sp, r7
     834:	f85d 7b04 	ldr.w	r7, [sp], #4
     838:	4770      	bx	lr

0000083a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     83a:	b480      	push	{r7}
     83c:	b083      	sub	sp, #12
     83e:	af00      	add	r7, sp, #0
     840:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     842:	687b      	ldr	r3, [r7, #4]
     844:	699b      	ldr	r3, [r3, #24]
     846:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     84e:	bf00      	nop
     850:	370c      	adds	r7, #12
     852:	46bd      	mov	sp, r7
     854:	f85d 7b04 	ldr.w	r7, [sp], #4
     858:	4770      	bx	lr

0000085a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     85a:	b480      	push	{r7}
     85c:	b083      	sub	sp, #12
     85e:	af00      	add	r7, sp, #0
     860:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     862:	687b      	ldr	r3, [r7, #4]
     864:	69db      	ldr	r3, [r3, #28]
     866:	f043 0208 	orr.w	r2, r3, #8
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     86e:	bf00      	nop
     870:	370c      	adds	r7, #12
     872:	46bd      	mov	sp, r7
     874:	f85d 7b04 	ldr.w	r7, [sp], #4
     878:	4770      	bx	lr

0000087a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     87a:	b480      	push	{r7}
     87c:	b083      	sub	sp, #12
     87e:	af00      	add	r7, sp, #0
     880:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     882:	687b      	ldr	r3, [r7, #4]
     884:	69db      	ldr	r3, [r3, #28]
     886:	f043 0220 	orr.w	r2, r3, #32
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     88e:	bf00      	nop
     890:	370c      	adds	r7, #12
     892:	46bd      	mov	sp, r7
     894:	f85d 7b04 	ldr.w	r7, [sp], #4
     898:	4770      	bx	lr

0000089a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     89a:	b480      	push	{r7}
     89c:	b083      	sub	sp, #12
     89e:	af00      	add	r7, sp, #0
     8a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	69db      	ldr	r3, [r3, #28]
     8a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ae:	bf00      	nop
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b8:	4770      	bx	lr

000008ba <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     8ba:	b480      	push	{r7}
     8bc:	b083      	sub	sp, #12
     8be:	af00      	add	r7, sp, #0
     8c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	69db      	ldr	r3, [r3, #28]
     8c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ce:	bf00      	nop
     8d0:	370c      	adds	r7, #12
     8d2:	46bd      	mov	sp, r7
     8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8d8:	4770      	bx	lr

000008da <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     8da:	b480      	push	{r7}
     8dc:	b083      	sub	sp, #12
     8de:	af00      	add	r7, sp, #0
     8e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	6a1b      	ldr	r3, [r3, #32]
     8e6:	f043 0201 	orr.w	r2, r3, #1
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ee:	bf00      	nop
     8f0:	370c      	adds	r7, #12
     8f2:	46bd      	mov	sp, r7
     8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8f8:	4770      	bx	lr

000008fa <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     8fa:	b480      	push	{r7}
     8fc:	b083      	sub	sp, #12
     8fe:	af00      	add	r7, sp, #0
     900:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     902:	687b      	ldr	r3, [r7, #4]
     904:	6a1b      	ldr	r3, [r3, #32]
     906:	f043 0202 	orr.w	r2, r3, #2
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr

0000091a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     91a:	b480      	push	{r7}
     91c:	b083      	sub	sp, #12
     91e:	af00      	add	r7, sp, #0
     920:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     922:	687b      	ldr	r3, [r7, #4]
     924:	6a1b      	ldr	r3, [r3, #32]
     926:	f043 0204 	orr.w	r2, r3, #4
     92a:	687b      	ldr	r3, [r7, #4]
     92c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     92e:	bf00      	nop
     930:	370c      	adds	r7, #12
     932:	46bd      	mov	sp, r7
     934:	f85d 7b04 	ldr.w	r7, [sp], #4
     938:	4770      	bx	lr

0000093a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     93a:	b480      	push	{r7}
     93c:	b083      	sub	sp, #12
     93e:	af00      	add	r7, sp, #0
     940:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     942:	687b      	ldr	r3, [r7, #4]
     944:	6a1b      	ldr	r3, [r3, #32]
     946:	f043 0208 	orr.w	r2, r3, #8
     94a:	687b      	ldr	r3, [r7, #4]
     94c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     94e:	bf00      	nop
     950:	370c      	adds	r7, #12
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr

0000095a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     95a:	b480      	push	{r7}
     95c:	b083      	sub	sp, #12
     95e:	af00      	add	r7, sp, #0
     960:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     962:	687b      	ldr	r3, [r7, #4]
     964:	6a1b      	ldr	r3, [r3, #32]
     966:	f043 0220 	orr.w	r2, r3, #32
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     96e:	bf00      	nop
     970:	370c      	adds	r7, #12
     972:	46bd      	mov	sp, r7
     974:	f85d 7b04 	ldr.w	r7, [sp], #4
     978:	4770      	bx	lr

0000097a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     97a:	b480      	push	{r7}
     97c:	b083      	sub	sp, #12
     97e:	af00      	add	r7, sp, #0
     980:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     982:	687b      	ldr	r3, [r7, #4]
     984:	6a1b      	ldr	r3, [r3, #32]
     986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     98e:	bf00      	nop
     990:	370c      	adds	r7, #12
     992:	46bd      	mov	sp, r7
     994:	f85d 7b04 	ldr.w	r7, [sp], #4
     998:	4770      	bx	lr

0000099a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     99a:	b480      	push	{r7}
     99c:	b085      	sub	sp, #20
     99e:	af00      	add	r7, sp, #0
     9a0:	60f8      	str	r0, [r7, #12]
     9a2:	460b      	mov	r3, r1
     9a4:	607a      	str	r2, [r7, #4]
     9a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9a8:	7afb      	ldrb	r3, [r7, #11]
     9aa:	68fa      	ldr	r2, [r7, #12]
     9ac:	01db      	lsls	r3, r3, #7
     9ae:	4413      	add	r3, r2
     9b0:	3308      	adds	r3, #8
     9b2:	687a      	ldr	r2, [r7, #4]
     9b4:	601a      	str	r2, [r3, #0]
}
     9b6:	bf00      	nop
     9b8:	3714      	adds	r7, #20
     9ba:	46bd      	mov	sp, r7
     9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     9c0:	4770      	bx	lr

000009c2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     9c2:	b480      	push	{r7}
     9c4:	b085      	sub	sp, #20
     9c6:	af00      	add	r7, sp, #0
     9c8:	60f8      	str	r0, [r7, #12]
     9ca:	460b      	mov	r3, r1
     9cc:	607a      	str	r2, [r7, #4]
     9ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9d0:	7afb      	ldrb	r3, [r7, #11]
     9d2:	68fa      	ldr	r2, [r7, #12]
     9d4:	01db      	lsls	r3, r3, #7
     9d6:	4413      	add	r3, r2
     9d8:	3304      	adds	r3, #4
     9da:	687a      	ldr	r2, [r7, #4]
     9dc:	601a      	str	r2, [r3, #0]
}
     9de:	bf00      	nop
     9e0:	3714      	adds	r7, #20
     9e2:	46bd      	mov	sp, r7
     9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e8:	4770      	bx	lr

000009ea <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     9ea:	b480      	push	{r7}
     9ec:	b085      	sub	sp, #20
     9ee:	af00      	add	r7, sp, #0
     9f0:	60f8      	str	r0, [r7, #12]
     9f2:	460b      	mov	r3, r1
     9f4:	607a      	str	r2, [r7, #4]
     9f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9f8:	7afb      	ldrb	r3, [r7, #11]
     9fa:	68fa      	ldr	r2, [r7, #12]
     9fc:	01db      	lsls	r3, r3, #7
     9fe:	4413      	add	r3, r2
     a00:	3318      	adds	r3, #24
     a02:	687a      	ldr	r2, [r7, #4]
     a04:	601a      	str	r2, [r3, #0]
}
     a06:	bf00      	nop
     a08:	3714      	adds	r7, #20
     a0a:	46bd      	mov	sp, r7
     a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a10:	4770      	bx	lr

00000a12 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a12:	b480      	push	{r7}
     a14:	b085      	sub	sp, #20
     a16:	af00      	add	r7, sp, #0
     a18:	60f8      	str	r0, [r7, #12]
     a1a:	460b      	mov	r3, r1
     a1c:	607a      	str	r2, [r7, #4]
     a1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a20:	7afb      	ldrb	r3, [r7, #11]
     a22:	68fa      	ldr	r2, [r7, #12]
     a24:	01db      	lsls	r3, r3, #7
     a26:	4413      	add	r3, r2
     a28:	3314      	adds	r3, #20
     a2a:	687a      	ldr	r2, [r7, #4]
     a2c:	601a      	str	r2, [r3, #0]
}
     a2e:	bf00      	nop
     a30:	3714      	adds	r7, #20
     a32:	46bd      	mov	sp, r7
     a34:	f85d 7b04 	ldr.w	r7, [sp], #4
     a38:	4770      	bx	lr

00000a3a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a3a:	b480      	push	{r7}
     a3c:	b085      	sub	sp, #20
     a3e:	af00      	add	r7, sp, #0
     a40:	6078      	str	r0, [r7, #4]
     a42:	4608      	mov	r0, r1
     a44:	4611      	mov	r1, r2
     a46:	461a      	mov	r2, r3
     a48:	4603      	mov	r3, r0
     a4a:	70fb      	strb	r3, [r7, #3]
     a4c:	460b      	mov	r3, r1
     a4e:	70bb      	strb	r3, [r7, #2]
     a50:	4613      	mov	r3, r2
     a52:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a54:	78fa      	ldrb	r2, [r7, #3]
     a56:	78bb      	ldrb	r3, [r7, #2]
     a58:	6879      	ldr	r1, [r7, #4]
     a5a:	01d2      	lsls	r2, r2, #7
     a5c:	440a      	add	r2, r1
     a5e:	4413      	add	r3, r2
     a60:	3330      	adds	r3, #48	; 0x30
     a62:	781b      	ldrb	r3, [r3, #0]
     a64:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a66:	7bfb      	ldrb	r3, [r7, #15]
     a68:	f023 030f 	bic.w	r3, r3, #15
     a6c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     a6e:	787b      	ldrb	r3, [r7, #1]
     a70:	f003 030f 	and.w	r3, r3, #15
     a74:	b2da      	uxtb	r2, r3
     a76:	7bfb      	ldrb	r3, [r7, #15]
     a78:	4313      	orrs	r3, r2
     a7a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a7c:	78fa      	ldrb	r2, [r7, #3]
     a7e:	78bb      	ldrb	r3, [r7, #2]
     a80:	6879      	ldr	r1, [r7, #4]
     a82:	01d2      	lsls	r2, r2, #7
     a84:	440a      	add	r2, r1
     a86:	4413      	add	r3, r2
     a88:	3330      	adds	r3, #48	; 0x30
     a8a:	7bfa      	ldrb	r2, [r7, #15]
     a8c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a8e:	bf00      	nop
     a90:	3714      	adds	r7, #20
     a92:	46bd      	mov	sp, r7
     a94:	f85d 7b04 	ldr.w	r7, [sp], #4
     a98:	4770      	bx	lr

00000a9a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a9a:	b480      	push	{r7}
     a9c:	b085      	sub	sp, #20
     a9e:	af00      	add	r7, sp, #0
     aa0:	6078      	str	r0, [r7, #4]
     aa2:	4608      	mov	r0, r1
     aa4:	4611      	mov	r1, r2
     aa6:	461a      	mov	r2, r3
     aa8:	4603      	mov	r3, r0
     aaa:	70fb      	strb	r3, [r7, #3]
     aac:	460b      	mov	r3, r1
     aae:	70bb      	strb	r3, [r7, #2]
     ab0:	4613      	mov	r3, r2
     ab2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ab4:	78fa      	ldrb	r2, [r7, #3]
     ab6:	78bb      	ldrb	r3, [r7, #2]
     ab8:	6879      	ldr	r1, [r7, #4]
     aba:	01d2      	lsls	r2, r2, #7
     abc:	440a      	add	r2, r1
     abe:	4413      	add	r3, r2
     ac0:	3330      	adds	r3, #48	; 0x30
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ac6:	7bfb      	ldrb	r3, [r7, #15]
     ac8:	f003 030f 	and.w	r3, r3, #15
     acc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     ace:	787b      	ldrb	r3, [r7, #1]
     ad0:	011b      	lsls	r3, r3, #4
     ad2:	b2da      	uxtb	r2, r3
     ad4:	7bfb      	ldrb	r3, [r7, #15]
     ad6:	4313      	orrs	r3, r2
     ad8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	78fa      	ldrb	r2, [r7, #3]
     adc:	78bb      	ldrb	r3, [r7, #2]
     ade:	6879      	ldr	r1, [r7, #4]
     ae0:	01d2      	lsls	r2, r2, #7
     ae2:	440a      	add	r2, r1
     ae4:	4413      	add	r3, r2
     ae6:	3330      	adds	r3, #48	; 0x30
     ae8:	7bfa      	ldrb	r2, [r7, #15]
     aea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     aec:	bf00      	nop
     aee:	3714      	adds	r7, #20
     af0:	46bd      	mov	sp, r7
     af2:	f85d 7b04 	ldr.w	r7, [sp], #4
     af6:	4770      	bx	lr

00000af8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     af8:	b480      	push	{r7}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
     b00:	4608      	mov	r0, r1
     b02:	4611      	mov	r1, r2
     b04:	461a      	mov	r2, r3
     b06:	4603      	mov	r3, r0
     b08:	70fb      	strb	r3, [r7, #3]
     b0a:	460b      	mov	r3, r1
     b0c:	70bb      	strb	r3, [r7, #2]
     b0e:	4613      	mov	r3, r2
     b10:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b12:	78fa      	ldrb	r2, [r7, #3]
     b14:	78bb      	ldrb	r3, [r7, #2]
     b16:	6879      	ldr	r1, [r7, #4]
     b18:	01d2      	lsls	r2, r2, #7
     b1a:	440a      	add	r2, r1
     b1c:	4413      	add	r3, r2
     b1e:	3340      	adds	r3, #64	; 0x40
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b24:	7bfb      	ldrb	r3, [r7, #15]
     b26:	f023 0301 	bic.w	r3, r3, #1
     b2a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b2c:	787a      	ldrb	r2, [r7, #1]
     b2e:	7bfb      	ldrb	r3, [r7, #15]
     b30:	4313      	orrs	r3, r2
     b32:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b34:	78fa      	ldrb	r2, [r7, #3]
     b36:	78bb      	ldrb	r3, [r7, #2]
     b38:	6879      	ldr	r1, [r7, #4]
     b3a:	01d2      	lsls	r2, r2, #7
     b3c:	440a      	add	r2, r1
     b3e:	4413      	add	r3, r2
     b40:	3340      	adds	r3, #64	; 0x40
     b42:	7bfa      	ldrb	r2, [r7, #15]
     b44:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b46:	bf00      	nop
     b48:	3714      	adds	r7, #20
     b4a:	46bd      	mov	sp, r7
     b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b50:	4770      	bx	lr

00000b52 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b52:	b490      	push	{r4, r7}
     b54:	b082      	sub	sp, #8
     b56:	af00      	add	r7, sp, #0
     b58:	6078      	str	r0, [r7, #4]
     b5a:	460b      	mov	r3, r1
     b5c:	70fb      	strb	r3, [r7, #3]
     b5e:	4613      	mov	r3, r2
     b60:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     b62:	78fa      	ldrb	r2, [r7, #3]
     b64:	78bb      	ldrb	r3, [r7, #2]
     b66:	78f8      	ldrb	r0, [r7, #3]
     b68:	78b9      	ldrb	r1, [r7, #2]
     b6a:	687c      	ldr	r4, [r7, #4]
     b6c:	01c0      	lsls	r0, r0, #7
     b6e:	4420      	add	r0, r4
     b70:	4401      	add	r1, r0
     b72:	3140      	adds	r1, #64	; 0x40
     b74:	7809      	ldrb	r1, [r1, #0]
     b76:	b2c9      	uxtb	r1, r1
     b78:	f041 0104 	orr.w	r1, r1, #4
     b7c:	b2c8      	uxtb	r0, r1
     b7e:	6879      	ldr	r1, [r7, #4]
     b80:	01d2      	lsls	r2, r2, #7
     b82:	440a      	add	r2, r1
     b84:	4413      	add	r3, r2
     b86:	3340      	adds	r3, #64	; 0x40
     b88:	4602      	mov	r2, r0
     b8a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b8c:	bf00      	nop
     b8e:	3708      	adds	r7, #8
     b90:	46bd      	mov	sp, r7
     b92:	bc90      	pop	{r4, r7}
     b94:	4770      	bx	lr

00000b96 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b96:	b490      	push	{r4, r7}
     b98:	b082      	sub	sp, #8
     b9a:	af00      	add	r7, sp, #0
     b9c:	6078      	str	r0, [r7, #4]
     b9e:	460b      	mov	r3, r1
     ba0:	70fb      	strb	r3, [r7, #3]
     ba2:	4613      	mov	r3, r2
     ba4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ba6:	78fa      	ldrb	r2, [r7, #3]
     ba8:	78bb      	ldrb	r3, [r7, #2]
     baa:	78f8      	ldrb	r0, [r7, #3]
     bac:	78b9      	ldrb	r1, [r7, #2]
     bae:	687c      	ldr	r4, [r7, #4]
     bb0:	01c0      	lsls	r0, r0, #7
     bb2:	4420      	add	r0, r4
     bb4:	4401      	add	r1, r0
     bb6:	3140      	adds	r1, #64	; 0x40
     bb8:	7809      	ldrb	r1, [r1, #0]
     bba:	b2c9      	uxtb	r1, r1
     bbc:	f021 0104 	bic.w	r1, r1, #4
     bc0:	b2c8      	uxtb	r0, r1
     bc2:	6879      	ldr	r1, [r7, #4]
     bc4:	01d2      	lsls	r2, r2, #7
     bc6:	440a      	add	r2, r1
     bc8:	4413      	add	r3, r2
     bca:	3340      	adds	r3, #64	; 0x40
     bcc:	4602      	mov	r2, r0
     bce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bd0:	bf00      	nop
     bd2:	3708      	adds	r7, #8
     bd4:	46bd      	mov	sp, r7
     bd6:	bc90      	pop	{r4, r7}
     bd8:	4770      	bx	lr

00000bda <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     bda:	b480      	push	{r7}
     bdc:	b085      	sub	sp, #20
     bde:	af00      	add	r7, sp, #0
     be0:	60f8      	str	r0, [r7, #12]
     be2:	460b      	mov	r3, r1
     be4:	607a      	str	r2, [r7, #4]
     be6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     be8:	7afb      	ldrb	r3, [r7, #11]
     bea:	68fa      	ldr	r2, [r7, #12]
     bec:	01db      	lsls	r3, r3, #7
     bee:	4413      	add	r3, r2
     bf0:	3328      	adds	r3, #40	; 0x28
     bf2:	687a      	ldr	r2, [r7, #4]
     bf4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bf6:	bf00      	nop
     bf8:	3714      	adds	r7, #20
     bfa:	46bd      	mov	sp, r7
     bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
     c00:	4770      	bx	lr
	...

00000c04 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     c04:	b580      	push	{r7, lr}
     c06:	b082      	sub	sp, #8
     c08:	af00      	add	r7, sp, #0
     c0a:	4603      	mov	r3, r0
     c0c:	6039      	str	r1, [r7, #0]
     c0e:	71fb      	strb	r3, [r7, #7]
     c10:	4613      	mov	r3, r2
     c12:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     c14:	79bb      	ldrb	r3, [r7, #6]
     c16:	2b01      	cmp	r3, #1
     c18:	d01c      	beq.n	c54 <_gpio_set_direction+0x50>
     c1a:	2b02      	cmp	r3, #2
     c1c:	d037      	beq.n	c8e <_gpio_set_direction+0x8a>
     c1e:	2b00      	cmp	r3, #0
     c20:	d14e      	bne.n	cc0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c22:	79fb      	ldrb	r3, [r7, #7]
     c24:	683a      	ldr	r2, [r7, #0]
     c26:	4619      	mov	r1, r3
     c28:	482a      	ldr	r0, [pc, #168]	; (cd4 <_gpio_set_direction+0xd0>)
     c2a:	4b2b      	ldr	r3, [pc, #172]	; (cd8 <_gpio_set_direction+0xd4>)
     c2c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c2e:	683b      	ldr	r3, [r7, #0]
     c30:	b29b      	uxth	r3, r3
     c32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     c36:	79fb      	ldrb	r3, [r7, #7]
     c38:	4619      	mov	r1, r3
     c3a:	4826      	ldr	r0, [pc, #152]	; (cd4 <_gpio_set_direction+0xd0>)
     c3c:	4b27      	ldr	r3, [pc, #156]	; (cdc <_gpio_set_direction+0xd8>)
     c3e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     c40:	683b      	ldr	r3, [r7, #0]
     c42:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     c44:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     c48:	79fb      	ldrb	r3, [r7, #7]
     c4a:	4619      	mov	r1, r3
     c4c:	4821      	ldr	r0, [pc, #132]	; (cd4 <_gpio_set_direction+0xd0>)
     c4e:	4b23      	ldr	r3, [pc, #140]	; (cdc <_gpio_set_direction+0xd8>)
     c50:	4798      	blx	r3
		break;
     c52:	e03a      	b.n	cca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c54:	79fb      	ldrb	r3, [r7, #7]
     c56:	683a      	ldr	r2, [r7, #0]
     c58:	4619      	mov	r1, r3
     c5a:	481e      	ldr	r0, [pc, #120]	; (cd4 <_gpio_set_direction+0xd0>)
     c5c:	4b1e      	ldr	r3, [pc, #120]	; (cd8 <_gpio_set_direction+0xd4>)
     c5e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     c60:	683b      	ldr	r3, [r7, #0]
     c62:	b29b      	uxth	r3, r3
     c64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c6c:	79f9      	ldrb	r1, [r7, #7]
     c6e:	461a      	mov	r2, r3
     c70:	4818      	ldr	r0, [pc, #96]	; (cd4 <_gpio_set_direction+0xd0>)
     c72:	4b1a      	ldr	r3, [pc, #104]	; (cdc <_gpio_set_direction+0xd8>)
     c74:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     c76:	683b      	ldr	r3, [r7, #0]
     c78:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     c7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c82:	79f9      	ldrb	r1, [r7, #7]
     c84:	461a      	mov	r2, r3
     c86:	4813      	ldr	r0, [pc, #76]	; (cd4 <_gpio_set_direction+0xd0>)
     c88:	4b14      	ldr	r3, [pc, #80]	; (cdc <_gpio_set_direction+0xd8>)
     c8a:	4798      	blx	r3
		break;
     c8c:	e01d      	b.n	cca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     c8e:	79fb      	ldrb	r3, [r7, #7]
     c90:	683a      	ldr	r2, [r7, #0]
     c92:	4619      	mov	r1, r3
     c94:	480f      	ldr	r0, [pc, #60]	; (cd4 <_gpio_set_direction+0xd0>)
     c96:	4b12      	ldr	r3, [pc, #72]	; (ce0 <_gpio_set_direction+0xdc>)
     c98:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c9a:	683b      	ldr	r3, [r7, #0]
     c9c:	b29b      	uxth	r3, r3
     c9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     ca2:	79fb      	ldrb	r3, [r7, #7]
     ca4:	4619      	mov	r1, r3
     ca6:	480b      	ldr	r0, [pc, #44]	; (cd4 <_gpio_set_direction+0xd0>)
     ca8:	4b0c      	ldr	r3, [pc, #48]	; (cdc <_gpio_set_direction+0xd8>)
     caa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     cac:	683b      	ldr	r3, [r7, #0]
     cae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     cb0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     cb4:	79fb      	ldrb	r3, [r7, #7]
     cb6:	4619      	mov	r1, r3
     cb8:	4806      	ldr	r0, [pc, #24]	; (cd4 <_gpio_set_direction+0xd0>)
     cba:	4b08      	ldr	r3, [pc, #32]	; (cdc <_gpio_set_direction+0xd8>)
     cbc:	4798      	blx	r3
		break;
     cbe:	e004      	b.n	cca <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     cc0:	2246      	movs	r2, #70	; 0x46
     cc2:	4908      	ldr	r1, [pc, #32]	; (ce4 <_gpio_set_direction+0xe0>)
     cc4:	2000      	movs	r0, #0
     cc6:	4b08      	ldr	r3, [pc, #32]	; (ce8 <_gpio_set_direction+0xe4>)
     cc8:	4798      	blx	r3
	}
}
     cca:	bf00      	nop
     ccc:	3708      	adds	r7, #8
     cce:	46bd      	mov	sp, r7
     cd0:	bd80      	pop	{r7, pc}
     cd2:	bf00      	nop
     cd4:	41008000 	.word	0x41008000
     cd8:	000009c3 	.word	0x000009c3
     cdc:	00000bdb 	.word	0x00000bdb
     ce0:	0000099b 	.word	0x0000099b
     ce4:	000110bc 	.word	0x000110bc
     ce8:	0000337d 	.word	0x0000337d

00000cec <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     cec:	b580      	push	{r7, lr}
     cee:	b082      	sub	sp, #8
     cf0:	af00      	add	r7, sp, #0
     cf2:	4603      	mov	r3, r0
     cf4:	6039      	str	r1, [r7, #0]
     cf6:	71fb      	strb	r3, [r7, #7]
     cf8:	4613      	mov	r3, r2
     cfa:	71bb      	strb	r3, [r7, #6]
	if (level) {
     cfc:	79bb      	ldrb	r3, [r7, #6]
     cfe:	2b00      	cmp	r3, #0
     d00:	d006      	beq.n	d10 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     d02:	79fb      	ldrb	r3, [r7, #7]
     d04:	683a      	ldr	r2, [r7, #0]
     d06:	4619      	mov	r1, r3
     d08:	4806      	ldr	r0, [pc, #24]	; (d24 <_gpio_set_level+0x38>)
     d0a:	4b07      	ldr	r3, [pc, #28]	; (d28 <_gpio_set_level+0x3c>)
     d0c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     d0e:	e005      	b.n	d1c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     d10:	79fb      	ldrb	r3, [r7, #7]
     d12:	683a      	ldr	r2, [r7, #0]
     d14:	4619      	mov	r1, r3
     d16:	4803      	ldr	r0, [pc, #12]	; (d24 <_gpio_set_level+0x38>)
     d18:	4b04      	ldr	r3, [pc, #16]	; (d2c <_gpio_set_level+0x40>)
     d1a:	4798      	blx	r3
}
     d1c:	bf00      	nop
     d1e:	3708      	adds	r7, #8
     d20:	46bd      	mov	sp, r7
     d22:	bd80      	pop	{r7, pc}
     d24:	41008000 	.word	0x41008000
     d28:	000009eb 	.word	0x000009eb
     d2c:	00000a13 	.word	0x00000a13

00000d30 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	4603      	mov	r3, r0
     d38:	71fb      	strb	r3, [r7, #7]
     d3a:	460b      	mov	r3, r1
     d3c:	71bb      	strb	r3, [r7, #6]
     d3e:	4613      	mov	r3, r2
     d40:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     d42:	797b      	ldrb	r3, [r7, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d00a      	beq.n	d5e <_gpio_set_pin_pull_mode+0x2e>
     d48:	2b02      	cmp	r3, #2
     d4a:	d01f      	beq.n	d8c <_gpio_set_pin_pull_mode+0x5c>
     d4c:	2b00      	cmp	r3, #0
     d4e:	d134      	bne.n	dba <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     d50:	79ba      	ldrb	r2, [r7, #6]
     d52:	79fb      	ldrb	r3, [r7, #7]
     d54:	4619      	mov	r1, r3
     d56:	481e      	ldr	r0, [pc, #120]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     d58:	4b1e      	ldr	r3, [pc, #120]	; (dd4 <_gpio_set_pin_pull_mode+0xa4>)
     d5a:	4798      	blx	r3
		break;
     d5c:	e033      	b.n	dc6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     d5e:	79bb      	ldrb	r3, [r7, #6]
     d60:	2201      	movs	r2, #1
     d62:	409a      	lsls	r2, r3
     d64:	79fb      	ldrb	r3, [r7, #7]
     d66:	4619      	mov	r1, r3
     d68:	4819      	ldr	r0, [pc, #100]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     d6a:	4b1b      	ldr	r3, [pc, #108]	; (dd8 <_gpio_set_pin_pull_mode+0xa8>)
     d6c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     d6e:	79ba      	ldrb	r2, [r7, #6]
     d70:	79fb      	ldrb	r3, [r7, #7]
     d72:	4619      	mov	r1, r3
     d74:	4816      	ldr	r0, [pc, #88]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     d76:	4b19      	ldr	r3, [pc, #100]	; (ddc <_gpio_set_pin_pull_mode+0xac>)
     d78:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     d7a:	79bb      	ldrb	r3, [r7, #6]
     d7c:	2201      	movs	r2, #1
     d7e:	409a      	lsls	r2, r3
     d80:	79fb      	ldrb	r3, [r7, #7]
     d82:	4619      	mov	r1, r3
     d84:	4812      	ldr	r0, [pc, #72]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     d86:	4b16      	ldr	r3, [pc, #88]	; (de0 <_gpio_set_pin_pull_mode+0xb0>)
     d88:	4798      	blx	r3
		break;
     d8a:	e01c      	b.n	dc6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     d8c:	79bb      	ldrb	r3, [r7, #6]
     d8e:	2201      	movs	r2, #1
     d90:	409a      	lsls	r2, r3
     d92:	79fb      	ldrb	r3, [r7, #7]
     d94:	4619      	mov	r1, r3
     d96:	480e      	ldr	r0, [pc, #56]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     d98:	4b0f      	ldr	r3, [pc, #60]	; (dd8 <_gpio_set_pin_pull_mode+0xa8>)
     d9a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     d9c:	79ba      	ldrb	r2, [r7, #6]
     d9e:	79fb      	ldrb	r3, [r7, #7]
     da0:	4619      	mov	r1, r3
     da2:	480b      	ldr	r0, [pc, #44]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     da4:	4b0d      	ldr	r3, [pc, #52]	; (ddc <_gpio_set_pin_pull_mode+0xac>)
     da6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     da8:	79bb      	ldrb	r3, [r7, #6]
     daa:	2201      	movs	r2, #1
     dac:	409a      	lsls	r2, r3
     dae:	79fb      	ldrb	r3, [r7, #7]
     db0:	4619      	mov	r1, r3
     db2:	4807      	ldr	r0, [pc, #28]	; (dd0 <_gpio_set_pin_pull_mode+0xa0>)
     db4:	4b0b      	ldr	r3, [pc, #44]	; (de4 <_gpio_set_pin_pull_mode+0xb4>)
     db6:	4798      	blx	r3
		break;
     db8:	e005      	b.n	dc6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     dba:	2289      	movs	r2, #137	; 0x89
     dbc:	490a      	ldr	r1, [pc, #40]	; (de8 <_gpio_set_pin_pull_mode+0xb8>)
     dbe:	2000      	movs	r0, #0
     dc0:	4b0a      	ldr	r3, [pc, #40]	; (dec <_gpio_set_pin_pull_mode+0xbc>)
     dc2:	4798      	blx	r3
		break;
     dc4:	bf00      	nop
	}
}
     dc6:	bf00      	nop
     dc8:	3708      	adds	r7, #8
     dca:	46bd      	mov	sp, r7
     dcc:	bd80      	pop	{r7, pc}
     dce:	bf00      	nop
     dd0:	41008000 	.word	0x41008000
     dd4:	00000b97 	.word	0x00000b97
     dd8:	000009c3 	.word	0x000009c3
     ddc:	00000b53 	.word	0x00000b53
     de0:	000009eb 	.word	0x000009eb
     de4:	00000a13 	.word	0x00000a13
     de8:	000110bc 	.word	0x000110bc
     dec:	0000337d 	.word	0x0000337d

00000df0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     df0:	b590      	push	{r4, r7, lr}
     df2:	b085      	sub	sp, #20
     df4:	af00      	add	r7, sp, #0
     df6:	6078      	str	r0, [r7, #4]
     df8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	095b      	lsrs	r3, r3, #5
     dfe:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	b2db      	uxtb	r3, r3
     e04:	f003 031f 	and.w	r3, r3, #31
     e08:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     e0a:	683b      	ldr	r3, [r7, #0]
     e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
     e10:	d106      	bne.n	e20 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     e12:	7bba      	ldrb	r2, [r7, #14]
     e14:	7bf9      	ldrb	r1, [r7, #15]
     e16:	2300      	movs	r3, #0
     e18:	4812      	ldr	r0, [pc, #72]	; (e64 <_gpio_set_pin_function+0x74>)
     e1a:	4c13      	ldr	r4, [pc, #76]	; (e68 <_gpio_set_pin_function+0x78>)
     e1c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     e1e:	e01d      	b.n	e5c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     e20:	7bba      	ldrb	r2, [r7, #14]
     e22:	7bf9      	ldrb	r1, [r7, #15]
     e24:	2301      	movs	r3, #1
     e26:	480f      	ldr	r0, [pc, #60]	; (e64 <_gpio_set_pin_function+0x74>)
     e28:	4c0f      	ldr	r4, [pc, #60]	; (e68 <_gpio_set_pin_function+0x78>)
     e2a:	47a0      	blx	r4
		if (pin & 1) {
     e2c:	7bbb      	ldrb	r3, [r7, #14]
     e2e:	f003 0301 	and.w	r3, r3, #1
     e32:	2b00      	cmp	r3, #0
     e34:	d009      	beq.n	e4a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     e36:	7bbb      	ldrb	r3, [r7, #14]
     e38:	085b      	lsrs	r3, r3, #1
     e3a:	b2da      	uxtb	r2, r3
     e3c:	683b      	ldr	r3, [r7, #0]
     e3e:	b2db      	uxtb	r3, r3
     e40:	7bf9      	ldrb	r1, [r7, #15]
     e42:	4808      	ldr	r0, [pc, #32]	; (e64 <_gpio_set_pin_function+0x74>)
     e44:	4c09      	ldr	r4, [pc, #36]	; (e6c <_gpio_set_pin_function+0x7c>)
     e46:	47a0      	blx	r4
}
     e48:	e008      	b.n	e5c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     e4a:	7bbb      	ldrb	r3, [r7, #14]
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	b2da      	uxtb	r2, r3
     e50:	683b      	ldr	r3, [r7, #0]
     e52:	b2db      	uxtb	r3, r3
     e54:	7bf9      	ldrb	r1, [r7, #15]
     e56:	4803      	ldr	r0, [pc, #12]	; (e64 <_gpio_set_pin_function+0x74>)
     e58:	4c05      	ldr	r4, [pc, #20]	; (e70 <_gpio_set_pin_function+0x80>)
     e5a:	47a0      	blx	r4
}
     e5c:	bf00      	nop
     e5e:	3714      	adds	r7, #20
     e60:	46bd      	mov	sp, r7
     e62:	bd90      	pop	{r4, r7, pc}
     e64:	41008000 	.word	0x41008000
     e68:	00000af9 	.word	0x00000af9
     e6c:	00000a9b 	.word	0x00000a9b
     e70:	00000a3b 	.word	0x00000a3b

00000e74 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     e74:	b580      	push	{r7, lr}
     e76:	b082      	sub	sp, #8
     e78:	af00      	add	r7, sp, #0
     e7a:	4603      	mov	r3, r0
     e7c:	460a      	mov	r2, r1
     e7e:	71fb      	strb	r3, [r7, #7]
     e80:	4613      	mov	r3, r2
     e82:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     e84:	79fb      	ldrb	r3, [r7, #7]
     e86:	095b      	lsrs	r3, r3, #5
     e88:	b2d8      	uxtb	r0, r3
     e8a:	79fb      	ldrb	r3, [r7, #7]
     e8c:	f003 031f 	and.w	r3, r3, #31
     e90:	b2db      	uxtb	r3, r3
     e92:	79ba      	ldrb	r2, [r7, #6]
     e94:	4619      	mov	r1, r3
     e96:	4b03      	ldr	r3, [pc, #12]	; (ea4 <gpio_set_pin_pull_mode+0x30>)
     e98:	4798      	blx	r3
}
     e9a:	bf00      	nop
     e9c:	3708      	adds	r7, #8
     e9e:	46bd      	mov	sp, r7
     ea0:	bd80      	pop	{r7, pc}
     ea2:	bf00      	nop
     ea4:	00000d31 	.word	0x00000d31

00000ea8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     ea8:	b580      	push	{r7, lr}
     eaa:	b082      	sub	sp, #8
     eac:	af00      	add	r7, sp, #0
     eae:	6078      	str	r0, [r7, #4]
     eb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     eb2:	6839      	ldr	r1, [r7, #0]
     eb4:	6878      	ldr	r0, [r7, #4]
     eb6:	4b03      	ldr	r3, [pc, #12]	; (ec4 <gpio_set_pin_function+0x1c>)
     eb8:	4798      	blx	r3
}
     eba:	bf00      	nop
     ebc:	3708      	adds	r7, #8
     ebe:	46bd      	mov	sp, r7
     ec0:	bd80      	pop	{r7, pc}
     ec2:	bf00      	nop
     ec4:	00000df1 	.word	0x00000df1

00000ec8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     ec8:	b580      	push	{r7, lr}
     eca:	b082      	sub	sp, #8
     ecc:	af00      	add	r7, sp, #0
     ece:	4603      	mov	r3, r0
     ed0:	460a      	mov	r2, r1
     ed2:	71fb      	strb	r3, [r7, #7]
     ed4:	4613      	mov	r3, r2
     ed6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     ed8:	79fb      	ldrb	r3, [r7, #7]
     eda:	095b      	lsrs	r3, r3, #5
     edc:	b2d8      	uxtb	r0, r3
     ede:	79fb      	ldrb	r3, [r7, #7]
     ee0:	f003 031f 	and.w	r3, r3, #31
     ee4:	2201      	movs	r2, #1
     ee6:	fa02 f303 	lsl.w	r3, r2, r3
     eea:	79ba      	ldrb	r2, [r7, #6]
     eec:	4619      	mov	r1, r3
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <gpio_set_pin_direction+0x34>)
     ef0:	4798      	blx	r3
}
     ef2:	bf00      	nop
     ef4:	3708      	adds	r7, #8
     ef6:	46bd      	mov	sp, r7
     ef8:	bd80      	pop	{r7, pc}
     efa:	bf00      	nop
     efc:	00000c05 	.word	0x00000c05

00000f00 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     f00:	b580      	push	{r7, lr}
     f02:	b082      	sub	sp, #8
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	460a      	mov	r2, r1
     f0a:	71fb      	strb	r3, [r7, #7]
     f0c:	4613      	mov	r3, r2
     f0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     f10:	79fb      	ldrb	r3, [r7, #7]
     f12:	095b      	lsrs	r3, r3, #5
     f14:	b2d8      	uxtb	r0, r3
     f16:	79fb      	ldrb	r3, [r7, #7]
     f18:	f003 031f 	and.w	r3, r3, #31
     f1c:	2201      	movs	r2, #1
     f1e:	fa02 f303 	lsl.w	r3, r2, r3
     f22:	79ba      	ldrb	r2, [r7, #6]
     f24:	4619      	mov	r1, r3
     f26:	4b03      	ldr	r3, [pc, #12]	; (f34 <gpio_set_pin_level+0x34>)
     f28:	4798      	blx	r3
}
     f2a:	bf00      	nop
     f2c:	3708      	adds	r7, #8
     f2e:	46bd      	mov	sp, r7
     f30:	bd80      	pop	{r7, pc}
     f32:	bf00      	nop
     f34:	00000ced 	.word	0x00000ced

00000f38 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     f38:	b580      	push	{r7, lr}
     f3a:	af00      	add	r7, sp, #0
	_init_chip();
     f3c:	4b01      	ldr	r3, [pc, #4]	; (f44 <init_mcu+0xc>)
     f3e:	4798      	blx	r3
}
     f40:	bf00      	nop
     f42:	bd80      	pop	{r7, pc}
     f44:	00003f85 	.word	0x00003f85

00000f48 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
     f50:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	2b00      	cmp	r3, #0
     f56:	d004      	beq.n	f62 <wdt_init+0x1a>
     f58:	683b      	ldr	r3, [r7, #0]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d001      	beq.n	f62 <wdt_init+0x1a>
     f5e:	2301      	movs	r3, #1
     f60:	e000      	b.n	f64 <wdt_init+0x1c>
     f62:	2300      	movs	r3, #0
     f64:	f003 0301 	and.w	r3, r3, #1
     f68:	b2db      	uxtb	r3, r3
     f6a:	2248      	movs	r2, #72	; 0x48
     f6c:	4907      	ldr	r1, [pc, #28]	; (f8c <wdt_init+0x44>)
     f6e:	4618      	mov	r0, r3
     f70:	4b07      	ldr	r3, [pc, #28]	; (f90 <wdt_init+0x48>)
     f72:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	683a      	ldr	r2, [r7, #0]
     f78:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	4618      	mov	r0, r3
     f7e:	4b05      	ldr	r3, [pc, #20]	; (f94 <wdt_init+0x4c>)
     f80:	4798      	blx	r3
     f82:	4603      	mov	r3, r0
}
     f84:	4618      	mov	r0, r3
     f86:	3708      	adds	r7, #8
     f88:	46bd      	mov	sp, r7
     f8a:	bd80      	pop	{r7, pc}
     f8c:	000110d8 	.word	0x000110d8
     f90:	0000337d 	.word	0x0000337d
     f94:	0000a891 	.word	0x0000a891

00000f98 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     f98:	b580      	push	{r7, lr}
     f9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     f9c:	4804      	ldr	r0, [pc, #16]	; (fb0 <CRC_CALC_init+0x18>)
     f9e:	4b05      	ldr	r3, [pc, #20]	; (fb4 <CRC_CALC_init+0x1c>)
     fa0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     fa2:	4905      	ldr	r1, [pc, #20]	; (fb8 <CRC_CALC_init+0x20>)
     fa4:	4805      	ldr	r0, [pc, #20]	; (fbc <CRC_CALC_init+0x24>)
     fa6:	4b06      	ldr	r3, [pc, #24]	; (fc0 <CRC_CALC_init+0x28>)
     fa8:	4798      	blx	r3
}
     faa:	bf00      	nop
     fac:	bd80      	pop	{r7, pc}
     fae:	bf00      	nop
     fb0:	40000800 	.word	0x40000800
     fb4:	000007bb 	.word	0x000007bb
     fb8:	41002000 	.word	0x41002000
     fbc:	20009468 	.word	0x20009468
     fc0:	00001d81 	.word	0x00001d81

00000fc4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fc8:	2244      	movs	r2, #68	; 0x44
     fca:	2104      	movs	r1, #4
     fcc:	483f      	ldr	r0, [pc, #252]	; (10cc <EXTERNAL_IRQ_0_init+0x108>)
     fce:	4b40      	ldr	r3, [pc, #256]	; (10d0 <EXTERNAL_IRQ_0_init+0x10c>)
     fd0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     fd2:	4840      	ldr	r0, [pc, #256]	; (10d4 <EXTERNAL_IRQ_0_init+0x110>)
     fd4:	4b40      	ldr	r3, [pc, #256]	; (10d8 <EXTERNAL_IRQ_0_init+0x114>)
     fd6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     fd8:	2101      	movs	r1, #1
     fda:	2040      	movs	r0, #64	; 0x40
     fdc:	4b3f      	ldr	r3, [pc, #252]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
     fde:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     fe0:	2100      	movs	r1, #0
     fe2:	2040      	movs	r0, #64	; 0x40
     fe4:	4b3e      	ldr	r3, [pc, #248]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
     fe6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     fe8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     fec:	2040      	movs	r0, #64	; 0x40
     fee:	4b3d      	ldr	r3, [pc, #244]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
     ff0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
     ff2:	2101      	movs	r1, #1
     ff4:	2021      	movs	r0, #33	; 0x21
     ff6:	4b39      	ldr	r3, [pc, #228]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
     ff8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
     ffa:	2100      	movs	r1, #0
     ffc:	2021      	movs	r0, #33	; 0x21
     ffe:	4b38      	ldr	r3, [pc, #224]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    1000:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1002:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1006:	2021      	movs	r0, #33	; 0x21
    1008:	4b36      	ldr	r3, [pc, #216]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    100a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    100c:	2101      	movs	r1, #1
    100e:	2003      	movs	r0, #3
    1010:	4b32      	ldr	r3, [pc, #200]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    1012:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1014:	2102      	movs	r1, #2
    1016:	2003      	movs	r0, #3
    1018:	4b31      	ldr	r3, [pc, #196]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    101a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    101c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1020:	2003      	movs	r0, #3
    1022:	4b30      	ldr	r3, [pc, #192]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    1024:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1026:	2101      	movs	r1, #1
    1028:	2004      	movs	r0, #4
    102a:	4b2c      	ldr	r3, [pc, #176]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    102c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    102e:	2102      	movs	r1, #2
    1030:	2004      	movs	r0, #4
    1032:	4b2b      	ldr	r3, [pc, #172]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    1034:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1036:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    103a:	2004      	movs	r0, #4
    103c:	4b29      	ldr	r3, [pc, #164]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    103e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1040:	2101      	movs	r1, #1
    1042:	2005      	movs	r0, #5
    1044:	4b25      	ldr	r3, [pc, #148]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    1046:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1048:	2102      	movs	r1, #2
    104a:	2005      	movs	r0, #5
    104c:	4b24      	ldr	r3, [pc, #144]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    104e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1050:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1054:	2005      	movs	r0, #5
    1056:	4b23      	ldr	r3, [pc, #140]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    1058:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    105a:	2101      	movs	r1, #1
    105c:	2056      	movs	r0, #86	; 0x56
    105e:	4b1f      	ldr	r3, [pc, #124]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    1060:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1062:	2102      	movs	r1, #2
    1064:	2056      	movs	r0, #86	; 0x56
    1066:	4b1e      	ldr	r3, [pc, #120]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    1068:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    106a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    106e:	2056      	movs	r0, #86	; 0x56
    1070:	4b1c      	ldr	r3, [pc, #112]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    1072:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1074:	2101      	movs	r1, #1
    1076:	2057      	movs	r0, #87	; 0x57
    1078:	4b18      	ldr	r3, [pc, #96]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    107a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    107c:	2102      	movs	r1, #2
    107e:	2057      	movs	r0, #87	; 0x57
    1080:	4b17      	ldr	r3, [pc, #92]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    1082:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1084:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1088:	2057      	movs	r0, #87	; 0x57
    108a:	4b16      	ldr	r3, [pc, #88]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    108c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    108e:	2101      	movs	r1, #1
    1090:	2028      	movs	r0, #40	; 0x28
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    1094:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1096:	2100      	movs	r1, #0
    1098:	2028      	movs	r0, #40	; 0x28
    109a:	4b11      	ldr	r3, [pc, #68]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    109c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    109e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    10a2:	2028      	movs	r0, #40	; 0x28
    10a4:	4b0f      	ldr	r3, [pc, #60]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    10a6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    10a8:	2101      	movs	r1, #1
    10aa:	2029      	movs	r0, #41	; 0x29
    10ac:	4b0b      	ldr	r3, [pc, #44]	; (10dc <EXTERNAL_IRQ_0_init+0x118>)
    10ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    10b0:	2100      	movs	r1, #0
    10b2:	2029      	movs	r0, #41	; 0x29
    10b4:	4b0a      	ldr	r3, [pc, #40]	; (10e0 <EXTERNAL_IRQ_0_init+0x11c>)
    10b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    10b8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    10bc:	2029      	movs	r0, #41	; 0x29
    10be:	4b09      	ldr	r3, [pc, #36]	; (10e4 <EXTERNAL_IRQ_0_init+0x120>)
    10c0:	4798      	blx	r3

	ext_irq_init();
    10c2:	4b09      	ldr	r3, [pc, #36]	; (10e8 <EXTERNAL_IRQ_0_init+0x124>)
    10c4:	4798      	blx	r3
}
    10c6:	bf00      	nop
    10c8:	bd80      	pop	{r7, pc}
    10ca:	bf00      	nop
    10cc:	40001c00 	.word	0x40001c00
    10d0:	00000655 	.word	0x00000655
    10d4:	40000800 	.word	0x40000800
    10d8:	0000073b 	.word	0x0000073b
    10dc:	00000ec9 	.word	0x00000ec9
    10e0:	00000e75 	.word	0x00000e75
    10e4:	00000ea9 	.word	0x00000ea9
    10e8:	00001e49 	.word	0x00001e49

000010ec <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10f0:	2244      	movs	r2, #68	; 0x44
    10f2:	210b      	movs	r1, #11
    10f4:	4807      	ldr	r0, [pc, #28]	; (1114 <EVENT_SYSTEM_0_init+0x28>)
    10f6:	4b08      	ldr	r3, [pc, #32]	; (1118 <EVENT_SYSTEM_0_init+0x2c>)
    10f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10fa:	2244      	movs	r2, #68	; 0x44
    10fc:	210c      	movs	r1, #12
    10fe:	4805      	ldr	r0, [pc, #20]	; (1114 <EVENT_SYSTEM_0_init+0x28>)
    1100:	4b05      	ldr	r3, [pc, #20]	; (1118 <EVENT_SYSTEM_0_init+0x2c>)
    1102:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1104:	4805      	ldr	r0, [pc, #20]	; (111c <EVENT_SYSTEM_0_init+0x30>)
    1106:	4b06      	ldr	r3, [pc, #24]	; (1120 <EVENT_SYSTEM_0_init+0x34>)
    1108:	4798      	blx	r3

	event_system_init();
    110a:	4b06      	ldr	r3, [pc, #24]	; (1124 <EVENT_SYSTEM_0_init+0x38>)
    110c:	4798      	blx	r3
}
    110e:	bf00      	nop
    1110:	bd80      	pop	{r7, pc}
    1112:	bf00      	nop
    1114:	40001c00 	.word	0x40001c00
    1118:	00000655 	.word	0x00000655
    111c:	40000800 	.word	0x40000800
    1120:	000007db 	.word	0x000007db
    1124:	00001e35 	.word	0x00001e35

00001128 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1128:	b580      	push	{r7, lr}
    112a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    112c:	2101      	movs	r1, #1
    112e:	202b      	movs	r0, #43	; 0x2b
    1130:	4b2b      	ldr	r3, [pc, #172]	; (11e0 <QSPI_N25Q256_PORT_init+0xb8>)
    1132:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1134:	2100      	movs	r1, #0
    1136:	202b      	movs	r0, #43	; 0x2b
    1138:	4b2a      	ldr	r3, [pc, #168]	; (11e4 <QSPI_N25Q256_PORT_init+0xbc>)
    113a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    113c:	492a      	ldr	r1, [pc, #168]	; (11e8 <QSPI_N25Q256_PORT_init+0xc0>)
    113e:	202b      	movs	r0, #43	; 0x2b
    1140:	4b2a      	ldr	r3, [pc, #168]	; (11ec <QSPI_N25Q256_PORT_init+0xc4>)
    1142:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1144:	2102      	movs	r1, #2
    1146:	2008      	movs	r0, #8
    1148:	4b25      	ldr	r3, [pc, #148]	; (11e0 <QSPI_N25Q256_PORT_init+0xb8>)
    114a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    114c:	2100      	movs	r1, #0
    114e:	2008      	movs	r0, #8
    1150:	4b27      	ldr	r3, [pc, #156]	; (11f0 <QSPI_N25Q256_PORT_init+0xc8>)
    1152:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1154:	2100      	movs	r1, #0
    1156:	2008      	movs	r0, #8
    1158:	4b22      	ldr	r3, [pc, #136]	; (11e4 <QSPI_N25Q256_PORT_init+0xbc>)
    115a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    115c:	4925      	ldr	r1, [pc, #148]	; (11f4 <QSPI_N25Q256_PORT_init+0xcc>)
    115e:	2008      	movs	r0, #8
    1160:	4b22      	ldr	r3, [pc, #136]	; (11ec <QSPI_N25Q256_PORT_init+0xc4>)
    1162:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1164:	2102      	movs	r1, #2
    1166:	2009      	movs	r0, #9
    1168:	4b1d      	ldr	r3, [pc, #116]	; (11e0 <QSPI_N25Q256_PORT_init+0xb8>)
    116a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    116c:	2100      	movs	r1, #0
    116e:	2009      	movs	r0, #9
    1170:	4b1f      	ldr	r3, [pc, #124]	; (11f0 <QSPI_N25Q256_PORT_init+0xc8>)
    1172:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1174:	2100      	movs	r1, #0
    1176:	2009      	movs	r0, #9
    1178:	4b1a      	ldr	r3, [pc, #104]	; (11e4 <QSPI_N25Q256_PORT_init+0xbc>)
    117a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    117c:	491e      	ldr	r1, [pc, #120]	; (11f8 <QSPI_N25Q256_PORT_init+0xd0>)
    117e:	2009      	movs	r0, #9
    1180:	4b1a      	ldr	r3, [pc, #104]	; (11ec <QSPI_N25Q256_PORT_init+0xc4>)
    1182:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1184:	2102      	movs	r1, #2
    1186:	200a      	movs	r0, #10
    1188:	4b15      	ldr	r3, [pc, #84]	; (11e0 <QSPI_N25Q256_PORT_init+0xb8>)
    118a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    118c:	2100      	movs	r1, #0
    118e:	200a      	movs	r0, #10
    1190:	4b17      	ldr	r3, [pc, #92]	; (11f0 <QSPI_N25Q256_PORT_init+0xc8>)
    1192:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1194:	2100      	movs	r1, #0
    1196:	200a      	movs	r0, #10
    1198:	4b12      	ldr	r3, [pc, #72]	; (11e4 <QSPI_N25Q256_PORT_init+0xbc>)
    119a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    119c:	4917      	ldr	r1, [pc, #92]	; (11fc <QSPI_N25Q256_PORT_init+0xd4>)
    119e:	200a      	movs	r0, #10
    11a0:	4b12      	ldr	r3, [pc, #72]	; (11ec <QSPI_N25Q256_PORT_init+0xc4>)
    11a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    11a4:	2102      	movs	r1, #2
    11a6:	200b      	movs	r0, #11
    11a8:	4b0d      	ldr	r3, [pc, #52]	; (11e0 <QSPI_N25Q256_PORT_init+0xb8>)
    11aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    11ac:	2100      	movs	r1, #0
    11ae:	200b      	movs	r0, #11
    11b0:	4b0f      	ldr	r3, [pc, #60]	; (11f0 <QSPI_N25Q256_PORT_init+0xc8>)
    11b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    11b4:	2100      	movs	r1, #0
    11b6:	200b      	movs	r0, #11
    11b8:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <QSPI_N25Q256_PORT_init+0xbc>)
    11ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    11bc:	4910      	ldr	r1, [pc, #64]	; (1200 <QSPI_N25Q256_PORT_init+0xd8>)
    11be:	200b      	movs	r0, #11
    11c0:	4b0a      	ldr	r3, [pc, #40]	; (11ec <QSPI_N25Q256_PORT_init+0xc4>)
    11c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    11c4:	2101      	movs	r1, #1
    11c6:	202a      	movs	r0, #42	; 0x2a
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <QSPI_N25Q256_PORT_init+0xb8>)
    11ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    11cc:	2100      	movs	r1, #0
    11ce:	202a      	movs	r0, #42	; 0x2a
    11d0:	4b04      	ldr	r3, [pc, #16]	; (11e4 <QSPI_N25Q256_PORT_init+0xbc>)
    11d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    11d4:	490b      	ldr	r1, [pc, #44]	; (1204 <QSPI_N25Q256_PORT_init+0xdc>)
    11d6:	202a      	movs	r0, #42	; 0x2a
    11d8:	4b04      	ldr	r3, [pc, #16]	; (11ec <QSPI_N25Q256_PORT_init+0xc4>)
    11da:	4798      	blx	r3
}
    11dc:	bf00      	nop
    11de:	bd80      	pop	{r7, pc}
    11e0:	00000ec9 	.word	0x00000ec9
    11e4:	00000e75 	.word	0x00000e75
    11e8:	002b0007 	.word	0x002b0007
    11ec:	00000ea9 	.word	0x00000ea9
    11f0:	00000f01 	.word	0x00000f01
    11f4:	00080007 	.word	0x00080007
    11f8:	00090007 	.word	0x00090007
    11fc:	000a0007 	.word	0x000a0007
    1200:	000b0007 	.word	0x000b0007
    1204:	002a0007 	.word	0x002a0007

00001208 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1208:	b580      	push	{r7, lr}
    120a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    120c:	4805      	ldr	r0, [pc, #20]	; (1224 <QSPI_N25Q256_CLOCK_init+0x1c>)
    120e:	4b06      	ldr	r3, [pc, #24]	; (1228 <QSPI_N25Q256_CLOCK_init+0x20>)
    1210:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1212:	4804      	ldr	r0, [pc, #16]	; (1224 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1214:	4b05      	ldr	r3, [pc, #20]	; (122c <QSPI_N25Q256_CLOCK_init+0x24>)
    1216:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1218:	4802      	ldr	r0, [pc, #8]	; (1224 <QSPI_N25Q256_CLOCK_init+0x1c>)
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <QSPI_N25Q256_CLOCK_init+0x28>)
    121c:	4798      	blx	r3
}
    121e:	bf00      	nop
    1220:	bd80      	pop	{r7, pc}
    1222:	bf00      	nop
    1224:	40000800 	.word	0x40000800
    1228:	0000069b 	.word	0x0000069b
    122c:	000006db 	.word	0x000006db
    1230:	000008bb 	.word	0x000008bb

00001234 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1234:	b580      	push	{r7, lr}
    1236:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1238:	4b04      	ldr	r3, [pc, #16]	; (124c <QSPI_N25Q256_init+0x18>)
    123a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    123c:	4904      	ldr	r1, [pc, #16]	; (1250 <QSPI_N25Q256_init+0x1c>)
    123e:	4805      	ldr	r0, [pc, #20]	; (1254 <QSPI_N25Q256_init+0x20>)
    1240:	4b05      	ldr	r3, [pc, #20]	; (1258 <QSPI_N25Q256_init+0x24>)
    1242:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1244:	4b05      	ldr	r3, [pc, #20]	; (125c <QSPI_N25Q256_init+0x28>)
    1246:	4798      	blx	r3
}
    1248:	bf00      	nop
    124a:	bd80      	pop	{r7, pc}
    124c:	00001209 	.word	0x00001209
    1250:	42003400 	.word	0x42003400
    1254:	200092fc 	.word	0x200092fc
    1258:	00002299 	.word	0x00002299
    125c:	00001129 	.word	0x00001129

00001260 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1260:	b580      	push	{r7, lr}
    1262:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1264:	4802      	ldr	r0, [pc, #8]	; (1270 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1266:	4b03      	ldr	r3, [pc, #12]	; (1274 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1268:	4798      	blx	r3
}
    126a:	bf00      	nop
    126c:	bd80      	pop	{r7, pc}
    126e:	bf00      	nop
    1270:	40000800 	.word	0x40000800
    1274:	0000071b 	.word	0x0000071b

00001278 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1278:	b580      	push	{r7, lr}
    127a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    127c:	4b03      	ldr	r3, [pc, #12]	; (128c <DATETIME_CLOCK_init+0x14>)
    127e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1280:	4903      	ldr	r1, [pc, #12]	; (1290 <DATETIME_CLOCK_init+0x18>)
    1282:	4804      	ldr	r0, [pc, #16]	; (1294 <DATETIME_CLOCK_init+0x1c>)
    1284:	4b04      	ldr	r3, [pc, #16]	; (1298 <DATETIME_CLOCK_init+0x20>)
    1286:	4798      	blx	r3
}
    1288:	bf00      	nop
    128a:	bd80      	pop	{r7, pc}
    128c:	00001261 	.word	0x00001261
    1290:	40002400 	.word	0x40002400
    1294:	20009444 	.word	0x20009444
    1298:	00001c25 	.word	0x00001c25

0000129c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    129c:	b580      	push	{r7, lr}
    129e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    12a0:	2101      	movs	r1, #1
    12a2:	2010      	movs	r0, #16
    12a4:	4b07      	ldr	r3, [pc, #28]	; (12c4 <I2C_HEATERS_PORT_init+0x28>)
    12a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    12a8:	4907      	ldr	r1, [pc, #28]	; (12c8 <I2C_HEATERS_PORT_init+0x2c>)
    12aa:	2010      	movs	r0, #16
    12ac:	4b07      	ldr	r3, [pc, #28]	; (12cc <I2C_HEATERS_PORT_init+0x30>)
    12ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    12b0:	2101      	movs	r1, #1
    12b2:	2011      	movs	r0, #17
    12b4:	4b03      	ldr	r3, [pc, #12]	; (12c4 <I2C_HEATERS_PORT_init+0x28>)
    12b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    12b8:	4905      	ldr	r1, [pc, #20]	; (12d0 <I2C_HEATERS_PORT_init+0x34>)
    12ba:	2011      	movs	r0, #17
    12bc:	4b03      	ldr	r3, [pc, #12]	; (12cc <I2C_HEATERS_PORT_init+0x30>)
    12be:	4798      	blx	r3
}
    12c0:	bf00      	nop
    12c2:	bd80      	pop	{r7, pc}
    12c4:	00000e75 	.word	0x00000e75
    12c8:	00100002 	.word	0x00100002
    12cc:	00000ea9 	.word	0x00000ea9
    12d0:	00110002 	.word	0x00110002

000012d4 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    12d4:	b580      	push	{r7, lr}
    12d6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12d8:	2242      	movs	r2, #66	; 0x42
    12da:	2108      	movs	r1, #8
    12dc:	4806      	ldr	r0, [pc, #24]	; (12f8 <I2C_HEATERS_CLOCK_init+0x24>)
    12de:	4b07      	ldr	r3, [pc, #28]	; (12fc <I2C_HEATERS_CLOCK_init+0x28>)
    12e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12e2:	224a      	movs	r2, #74	; 0x4a
    12e4:	2103      	movs	r1, #3
    12e6:	4804      	ldr	r0, [pc, #16]	; (12f8 <I2C_HEATERS_CLOCK_init+0x24>)
    12e8:	4b04      	ldr	r3, [pc, #16]	; (12fc <I2C_HEATERS_CLOCK_init+0x28>)
    12ea:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <I2C_HEATERS_CLOCK_init+0x2c>)
    12ee:	4b05      	ldr	r3, [pc, #20]	; (1304 <I2C_HEATERS_CLOCK_init+0x30>)
    12f0:	4798      	blx	r3
}
    12f2:	bf00      	nop
    12f4:	bd80      	pop	{r7, pc}
    12f6:	bf00      	nop
    12f8:	40001c00 	.word	0x40001c00
    12fc:	00000655 	.word	0x00000655
    1300:	40000800 	.word	0x40000800
    1304:	0000075b 	.word	0x0000075b

00001308 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1308:	b580      	push	{r7, lr}
    130a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <I2C_HEATERS_init+0x18>)
    130e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1310:	4904      	ldr	r1, [pc, #16]	; (1324 <I2C_HEATERS_init+0x1c>)
    1312:	4805      	ldr	r0, [pc, #20]	; (1328 <I2C_HEATERS_init+0x20>)
    1314:	4b05      	ldr	r3, [pc, #20]	; (132c <I2C_HEATERS_init+0x24>)
    1316:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1318:	4b05      	ldr	r3, [pc, #20]	; (1330 <I2C_HEATERS_init+0x28>)
    131a:	4798      	blx	r3
}
    131c:	bf00      	nop
    131e:	bd80      	pop	{r7, pc}
    1320:	000012d5 	.word	0x000012d5
    1324:	40003400 	.word	0x40003400
    1328:	2000939c 	.word	0x2000939c
    132c:	00002111 	.word	0x00002111
    1330:	0000129d 	.word	0x0000129d

00001334 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1334:	b580      	push	{r7, lr}
    1336:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1338:	2100      	movs	r1, #0
    133a:	203b      	movs	r0, #59	; 0x3b
    133c:	4b11      	ldr	r3, [pc, #68]	; (1384 <SPI_TEMP_PORT_init+0x50>)
    133e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1340:	2102      	movs	r1, #2
    1342:	203b      	movs	r0, #59	; 0x3b
    1344:	4b10      	ldr	r3, [pc, #64]	; (1388 <SPI_TEMP_PORT_init+0x54>)
    1346:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1348:	4910      	ldr	r1, [pc, #64]	; (138c <SPI_TEMP_PORT_init+0x58>)
    134a:	203b      	movs	r0, #59	; 0x3b
    134c:	4b10      	ldr	r3, [pc, #64]	; (1390 <SPI_TEMP_PORT_init+0x5c>)
    134e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1350:	2100      	movs	r1, #0
    1352:	203a      	movs	r0, #58	; 0x3a
    1354:	4b0b      	ldr	r3, [pc, #44]	; (1384 <SPI_TEMP_PORT_init+0x50>)
    1356:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1358:	2102      	movs	r1, #2
    135a:	203a      	movs	r0, #58	; 0x3a
    135c:	4b0a      	ldr	r3, [pc, #40]	; (1388 <SPI_TEMP_PORT_init+0x54>)
    135e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1360:	490c      	ldr	r1, [pc, #48]	; (1394 <SPI_TEMP_PORT_init+0x60>)
    1362:	203a      	movs	r0, #58	; 0x3a
    1364:	4b0a      	ldr	r3, [pc, #40]	; (1390 <SPI_TEMP_PORT_init+0x5c>)
    1366:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1368:	2101      	movs	r1, #1
    136a:	203c      	movs	r0, #60	; 0x3c
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <SPI_TEMP_PORT_init+0x54>)
    136e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1370:	2100      	movs	r1, #0
    1372:	203c      	movs	r0, #60	; 0x3c
    1374:	4b08      	ldr	r3, [pc, #32]	; (1398 <SPI_TEMP_PORT_init+0x64>)
    1376:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1378:	4908      	ldr	r1, [pc, #32]	; (139c <SPI_TEMP_PORT_init+0x68>)
    137a:	203c      	movs	r0, #60	; 0x3c
    137c:	4b04      	ldr	r3, [pc, #16]	; (1390 <SPI_TEMP_PORT_init+0x5c>)
    137e:	4798      	blx	r3
}
    1380:	bf00      	nop
    1382:	bd80      	pop	{r7, pc}
    1384:	00000f01 	.word	0x00000f01
    1388:	00000ec9 	.word	0x00000ec9
    138c:	003b0003 	.word	0x003b0003
    1390:	00000ea9 	.word	0x00000ea9
    1394:	003a0003 	.word	0x003a0003
    1398:	00000e75 	.word	0x00000e75
    139c:	003c0003 	.word	0x003c0003

000013a0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    13a0:	b580      	push	{r7, lr}
    13a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13a4:	2245      	movs	r2, #69	; 0x45
    13a6:	2122      	movs	r1, #34	; 0x22
    13a8:	4806      	ldr	r0, [pc, #24]	; (13c4 <SPI_TEMP_CLOCK_init+0x24>)
    13aa:	4b07      	ldr	r3, [pc, #28]	; (13c8 <SPI_TEMP_CLOCK_init+0x28>)
    13ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13ae:	224a      	movs	r2, #74	; 0x4a
    13b0:	2103      	movs	r1, #3
    13b2:	4804      	ldr	r0, [pc, #16]	; (13c4 <SPI_TEMP_CLOCK_init+0x24>)
    13b4:	4b04      	ldr	r3, [pc, #16]	; (13c8 <SPI_TEMP_CLOCK_init+0x28>)
    13b6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    13b8:	4804      	ldr	r0, [pc, #16]	; (13cc <SPI_TEMP_CLOCK_init+0x2c>)
    13ba:	4b05      	ldr	r3, [pc, #20]	; (13d0 <SPI_TEMP_CLOCK_init+0x30>)
    13bc:	4798      	blx	r3
}
    13be:	bf00      	nop
    13c0:	bd80      	pop	{r7, pc}
    13c2:	bf00      	nop
    13c4:	40001c00 	.word	0x40001c00
    13c8:	00000655 	.word	0x00000655
    13cc:	40000800 	.word	0x40000800
    13d0:	000008db 	.word	0x000008db

000013d4 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    13d4:	b580      	push	{r7, lr}
    13d6:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    13d8:	4b05      	ldr	r3, [pc, #20]	; (13f0 <SPI_TEMP_init+0x1c>)
    13da:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    13dc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    13e0:	4804      	ldr	r0, [pc, #16]	; (13f4 <SPI_TEMP_init+0x20>)
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <SPI_TEMP_init+0x24>)
    13e4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    13e6:	4b05      	ldr	r3, [pc, #20]	; (13fc <SPI_TEMP_init+0x28>)
    13e8:	4798      	blx	r3
}
    13ea:	bf00      	nop
    13ec:	bd80      	pop	{r7, pc}
    13ee:	bf00      	nop
    13f0:	000013a1 	.word	0x000013a1
    13f4:	200092a4 	.word	0x200092a4
    13f8:	000023a9 	.word	0x000023a9
    13fc:	00001335 	.word	0x00001335

00001400 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1400:	b580      	push	{r7, lr}
    1402:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1404:	2100      	movs	r1, #0
    1406:	2017      	movs	r0, #23
    1408:	4b07      	ldr	r3, [pc, #28]	; (1428 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    140a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    140c:	4907      	ldr	r1, [pc, #28]	; (142c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    140e:	2017      	movs	r0, #23
    1410:	4b07      	ldr	r3, [pc, #28]	; (1430 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1412:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1414:	2100      	movs	r1, #0
    1416:	2016      	movs	r0, #22
    1418:	4b03      	ldr	r3, [pc, #12]	; (1428 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    141a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    141c:	4905      	ldr	r1, [pc, #20]	; (1434 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    141e:	2016      	movs	r0, #22
    1420:	4b03      	ldr	r3, [pc, #12]	; (1430 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1422:	4798      	blx	r3
}
    1424:	bf00      	nop
    1426:	bd80      	pop	{r7, pc}
    1428:	00000e75 	.word	0x00000e75
    142c:	00170003 	.word	0x00170003
    1430:	00000ea9 	.word	0x00000ea9
    1434:	00160003 	.word	0x00160003

00001438 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1438:	b580      	push	{r7, lr}
    143a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    143c:	2244      	movs	r2, #68	; 0x44
    143e:	2123      	movs	r1, #35	; 0x23
    1440:	4806      	ldr	r0, [pc, #24]	; (145c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1444:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1446:	224a      	movs	r2, #74	; 0x4a
    1448:	2103      	movs	r1, #3
    144a:	4804      	ldr	r0, [pc, #16]	; (145c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    144c:	4b04      	ldr	r3, [pc, #16]	; (1460 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    144e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1450:	4804      	ldr	r0, [pc, #16]	; (1464 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1454:	4798      	blx	r3
}
    1456:	bf00      	nop
    1458:	bd80      	pop	{r7, pc}
    145a:	bf00      	nop
    145c:	40001c00 	.word	0x40001c00
    1460:	00000655 	.word	0x00000655
    1464:	40000800 	.word	0x40000800
    1468:	000008fb 	.word	0x000008fb

0000146c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    146c:	b580      	push	{r7, lr}
    146e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1470:	4b04      	ldr	r3, [pc, #16]	; (1484 <I2C_FLAPPER_VALVE_init+0x18>)
    1472:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1474:	4904      	ldr	r1, [pc, #16]	; (1488 <I2C_FLAPPER_VALVE_init+0x1c>)
    1476:	4805      	ldr	r0, [pc, #20]	; (148c <I2C_FLAPPER_VALVE_init+0x20>)
    1478:	4b05      	ldr	r3, [pc, #20]	; (1490 <I2C_FLAPPER_VALVE_init+0x24>)
    147a:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    147c:	4b05      	ldr	r3, [pc, #20]	; (1494 <I2C_FLAPPER_VALVE_init+0x28>)
    147e:	4798      	blx	r3
}
    1480:	bf00      	nop
    1482:	bd80      	pop	{r7, pc}
    1484:	00001439 	.word	0x00001439
    1488:	43000400 	.word	0x43000400
    148c:	20009340 	.word	0x20009340
    1490:	00002111 	.word	0x00002111
    1494:	00001401 	.word	0x00001401

00001498 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1498:	b580      	push	{r7, lr}
    149a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    149c:	2100      	movs	r1, #0
    149e:	2044      	movs	r0, #68	; 0x44
    14a0:	4b11      	ldr	r3, [pc, #68]	; (14e8 <SPI_HI3593_PORT_init+0x50>)
    14a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    14a4:	2102      	movs	r1, #2
    14a6:	2044      	movs	r0, #68	; 0x44
    14a8:	4b10      	ldr	r3, [pc, #64]	; (14ec <SPI_HI3593_PORT_init+0x54>)
    14aa:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    14ac:	4910      	ldr	r1, [pc, #64]	; (14f0 <SPI_HI3593_PORT_init+0x58>)
    14ae:	2044      	movs	r0, #68	; 0x44
    14b0:	4b10      	ldr	r3, [pc, #64]	; (14f4 <SPI_HI3593_PORT_init+0x5c>)
    14b2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    14b4:	2100      	movs	r1, #0
    14b6:	2045      	movs	r0, #69	; 0x45
    14b8:	4b0b      	ldr	r3, [pc, #44]	; (14e8 <SPI_HI3593_PORT_init+0x50>)
    14ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    14bc:	2102      	movs	r1, #2
    14be:	2045      	movs	r0, #69	; 0x45
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <SPI_HI3593_PORT_init+0x54>)
    14c2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    14c4:	490c      	ldr	r1, [pc, #48]	; (14f8 <SPI_HI3593_PORT_init+0x60>)
    14c6:	2045      	movs	r0, #69	; 0x45
    14c8:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <SPI_HI3593_PORT_init+0x5c>)
    14ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    14cc:	2101      	movs	r1, #1
    14ce:	2047      	movs	r0, #71	; 0x47
    14d0:	4b06      	ldr	r3, [pc, #24]	; (14ec <SPI_HI3593_PORT_init+0x54>)
    14d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    14d4:	2100      	movs	r1, #0
    14d6:	2047      	movs	r0, #71	; 0x47
    14d8:	4b08      	ldr	r3, [pc, #32]	; (14fc <SPI_HI3593_PORT_init+0x64>)
    14da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    14dc:	4908      	ldr	r1, [pc, #32]	; (1500 <SPI_HI3593_PORT_init+0x68>)
    14de:	2047      	movs	r0, #71	; 0x47
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <SPI_HI3593_PORT_init+0x5c>)
    14e2:	4798      	blx	r3
}
    14e4:	bf00      	nop
    14e6:	bd80      	pop	{r7, pc}
    14e8:	00000f01 	.word	0x00000f01
    14ec:	00000ec9 	.word	0x00000ec9
    14f0:	00440002 	.word	0x00440002
    14f4:	00000ea9 	.word	0x00000ea9
    14f8:	00450002 	.word	0x00450002
    14fc:	00000e75 	.word	0x00000e75
    1500:	00470002 	.word	0x00470002

00001504 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1504:	b580      	push	{r7, lr}
    1506:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1508:	2242      	movs	r2, #66	; 0x42
    150a:	2124      	movs	r1, #36	; 0x24
    150c:	4806      	ldr	r0, [pc, #24]	; (1528 <SPI_HI3593_CLOCK_init+0x24>)
    150e:	4b07      	ldr	r3, [pc, #28]	; (152c <SPI_HI3593_CLOCK_init+0x28>)
    1510:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1512:	224a      	movs	r2, #74	; 0x4a
    1514:	2103      	movs	r1, #3
    1516:	4804      	ldr	r0, [pc, #16]	; (1528 <SPI_HI3593_CLOCK_init+0x24>)
    1518:	4b04      	ldr	r3, [pc, #16]	; (152c <SPI_HI3593_CLOCK_init+0x28>)
    151a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    151c:	4804      	ldr	r0, [pc, #16]	; (1530 <SPI_HI3593_CLOCK_init+0x2c>)
    151e:	4b05      	ldr	r3, [pc, #20]	; (1534 <SPI_HI3593_CLOCK_init+0x30>)
    1520:	4798      	blx	r3
}
    1522:	bf00      	nop
    1524:	bd80      	pop	{r7, pc}
    1526:	bf00      	nop
    1528:	40001c00 	.word	0x40001c00
    152c:	00000655 	.word	0x00000655
    1530:	40000800 	.word	0x40000800
    1534:	0000091b 	.word	0x0000091b

00001538 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1538:	b580      	push	{r7, lr}
    153a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <SPI_HI3593_init+0x18>)
    153e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1540:	4904      	ldr	r1, [pc, #16]	; (1554 <SPI_HI3593_init+0x1c>)
    1542:	4805      	ldr	r0, [pc, #20]	; (1558 <SPI_HI3593_init+0x20>)
    1544:	4b05      	ldr	r3, [pc, #20]	; (155c <SPI_HI3593_init+0x24>)
    1546:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1548:	4b05      	ldr	r3, [pc, #20]	; (1560 <SPI_HI3593_init+0x28>)
    154a:	4798      	blx	r3
}
    154c:	bf00      	nop
    154e:	bd80      	pop	{r7, pc}
    1550:	00001505 	.word	0x00001505
    1554:	43000800 	.word	0x43000800
    1558:	2000928c 	.word	0x2000928c
    155c:	000023a9 	.word	0x000023a9
    1560:	00001499 	.word	0x00001499

00001564 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1564:	b580      	push	{r7, lr}
    1566:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1568:	2100      	movs	r1, #0
    156a:	2068      	movs	r0, #104	; 0x68
    156c:	4b07      	ldr	r3, [pc, #28]	; (158c <I2C_FANS_PORT_init+0x28>)
    156e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1570:	4907      	ldr	r1, [pc, #28]	; (1590 <I2C_FANS_PORT_init+0x2c>)
    1572:	2068      	movs	r0, #104	; 0x68
    1574:	4b07      	ldr	r3, [pc, #28]	; (1594 <I2C_FANS_PORT_init+0x30>)
    1576:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1578:	2100      	movs	r1, #0
    157a:	2069      	movs	r0, #105	; 0x69
    157c:	4b03      	ldr	r3, [pc, #12]	; (158c <I2C_FANS_PORT_init+0x28>)
    157e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1580:	4905      	ldr	r1, [pc, #20]	; (1598 <I2C_FANS_PORT_init+0x34>)
    1582:	2069      	movs	r0, #105	; 0x69
    1584:	4b03      	ldr	r3, [pc, #12]	; (1594 <I2C_FANS_PORT_init+0x30>)
    1586:	4798      	blx	r3
}
    1588:	bf00      	nop
    158a:	bd80      	pop	{r7, pc}
    158c:	00000e75 	.word	0x00000e75
    1590:	00680002 	.word	0x00680002
    1594:	00000ea9 	.word	0x00000ea9
    1598:	00690002 	.word	0x00690002

0000159c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    159c:	b580      	push	{r7, lr}
    159e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15a0:	2244      	movs	r2, #68	; 0x44
    15a2:	2125      	movs	r1, #37	; 0x25
    15a4:	4806      	ldr	r0, [pc, #24]	; (15c0 <I2C_FANS_CLOCK_init+0x24>)
    15a6:	4b07      	ldr	r3, [pc, #28]	; (15c4 <I2C_FANS_CLOCK_init+0x28>)
    15a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15aa:	224a      	movs	r2, #74	; 0x4a
    15ac:	2103      	movs	r1, #3
    15ae:	4804      	ldr	r0, [pc, #16]	; (15c0 <I2C_FANS_CLOCK_init+0x24>)
    15b0:	4b04      	ldr	r3, [pc, #16]	; (15c4 <I2C_FANS_CLOCK_init+0x28>)
    15b2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    15b4:	4804      	ldr	r0, [pc, #16]	; (15c8 <I2C_FANS_CLOCK_init+0x2c>)
    15b6:	4b05      	ldr	r3, [pc, #20]	; (15cc <I2C_FANS_CLOCK_init+0x30>)
    15b8:	4798      	blx	r3
}
    15ba:	bf00      	nop
    15bc:	bd80      	pop	{r7, pc}
    15be:	bf00      	nop
    15c0:	40001c00 	.word	0x40001c00
    15c4:	00000655 	.word	0x00000655
    15c8:	40000800 	.word	0x40000800
    15cc:	0000093b 	.word	0x0000093b

000015d0 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    15d4:	4b04      	ldr	r3, [pc, #16]	; (15e8 <I2C_FANS_init+0x18>)
    15d6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    15d8:	4904      	ldr	r1, [pc, #16]	; (15ec <I2C_FANS_init+0x1c>)
    15da:	4805      	ldr	r0, [pc, #20]	; (15f0 <I2C_FANS_init+0x20>)
    15dc:	4b05      	ldr	r3, [pc, #20]	; (15f4 <I2C_FANS_init+0x24>)
    15de:	4798      	blx	r3
	I2C_FANS_PORT_init();
    15e0:	4b05      	ldr	r3, [pc, #20]	; (15f8 <I2C_FANS_init+0x28>)
    15e2:	4798      	blx	r3
}
    15e4:	bf00      	nop
    15e6:	bd80      	pop	{r7, pc}
    15e8:	0000159d 	.word	0x0000159d
    15ec:	43000c00 	.word	0x43000c00
    15f0:	200092bc 	.word	0x200092bc
    15f4:	00002111 	.word	0x00002111
    15f8:	00001565 	.word	0x00001565

000015fc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    15fc:	b580      	push	{r7, lr}
    15fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1600:	4808      	ldr	r0, [pc, #32]	; (1624 <TIMER_USB_init+0x28>)
    1602:	4b09      	ldr	r3, [pc, #36]	; (1628 <TIMER_USB_init+0x2c>)
    1604:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1606:	2243      	movs	r2, #67	; 0x43
    1608:	2109      	movs	r1, #9
    160a:	4808      	ldr	r0, [pc, #32]	; (162c <TIMER_USB_init+0x30>)
    160c:	4b08      	ldr	r3, [pc, #32]	; (1630 <TIMER_USB_init+0x34>)
    160e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <TIMER_USB_init+0x38>)
    1612:	4798      	blx	r3
    1614:	4603      	mov	r3, r0
    1616:	461a      	mov	r2, r3
    1618:	4907      	ldr	r1, [pc, #28]	; (1638 <TIMER_USB_init+0x3c>)
    161a:	4808      	ldr	r0, [pc, #32]	; (163c <TIMER_USB_init+0x40>)
    161c:	4b08      	ldr	r3, [pc, #32]	; (1640 <TIMER_USB_init+0x44>)
    161e:	4798      	blx	r3
}
    1620:	bf00      	nop
    1622:	bd80      	pop	{r7, pc}
    1624:	40000800 	.word	0x40000800
    1628:	0000077b 	.word	0x0000077b
    162c:	40001c00 	.word	0x40001c00
    1630:	00000655 	.word	0x00000655
    1634:	00007d29 	.word	0x00007d29
    1638:	40003800 	.word	0x40003800
    163c:	20009404 	.word	0x20009404
    1640:	00002579 	.word	0x00002579

00001644 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1644:	b580      	push	{r7, lr}
    1646:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1648:	4808      	ldr	r0, [pc, #32]	; (166c <TIMER_ARINC_init+0x28>)
    164a:	4b09      	ldr	r3, [pc, #36]	; (1670 <TIMER_ARINC_init+0x2c>)
    164c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    164e:	2244      	movs	r2, #68	; 0x44
    1650:	211a      	movs	r1, #26
    1652:	4808      	ldr	r0, [pc, #32]	; (1674 <TIMER_ARINC_init+0x30>)
    1654:	4b08      	ldr	r3, [pc, #32]	; (1678 <TIMER_ARINC_init+0x34>)
    1656:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1658:	4b08      	ldr	r3, [pc, #32]	; (167c <TIMER_ARINC_init+0x38>)
    165a:	4798      	blx	r3
    165c:	4603      	mov	r3, r0
    165e:	461a      	mov	r2, r3
    1660:	4907      	ldr	r1, [pc, #28]	; (1680 <TIMER_ARINC_init+0x3c>)
    1662:	4808      	ldr	r0, [pc, #32]	; (1684 <TIMER_ARINC_init+0x40>)
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <TIMER_ARINC_init+0x44>)
    1666:	4798      	blx	r3
}
    1668:	bf00      	nop
    166a:	bd80      	pop	{r7, pc}
    166c:	40000800 	.word	0x40000800
    1670:	0000083b 	.word	0x0000083b
    1674:	40001c00 	.word	0x40001c00
    1678:	00000655 	.word	0x00000655
    167c:	00007d29 	.word	0x00007d29
    1680:	4101a000 	.word	0x4101a000
    1684:	200093e4 	.word	0x200093e4
    1688:	00002579 	.word	0x00002579

0000168c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    168c:	b580      	push	{r7, lr}
    168e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1690:	4808      	ldr	r0, [pc, #32]	; (16b4 <TIMER_MAINTENANCE_init+0x28>)
    1692:	4b09      	ldr	r3, [pc, #36]	; (16b8 <TIMER_MAINTENANCE_init+0x2c>)
    1694:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1696:	2246      	movs	r2, #70	; 0x46
    1698:	211e      	movs	r1, #30
    169a:	4808      	ldr	r0, [pc, #32]	; (16bc <TIMER_MAINTENANCE_init+0x30>)
    169c:	4b08      	ldr	r3, [pc, #32]	; (16c0 <TIMER_MAINTENANCE_init+0x34>)
    169e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    16a0:	4b08      	ldr	r3, [pc, #32]	; (16c4 <TIMER_MAINTENANCE_init+0x38>)
    16a2:	4798      	blx	r3
    16a4:	4603      	mov	r3, r0
    16a6:	461a      	mov	r2, r3
    16a8:	4907      	ldr	r1, [pc, #28]	; (16c8 <TIMER_MAINTENANCE_init+0x3c>)
    16aa:	4808      	ldr	r0, [pc, #32]	; (16cc <TIMER_MAINTENANCE_init+0x40>)
    16ac:	4b08      	ldr	r3, [pc, #32]	; (16d0 <TIMER_MAINTENANCE_init+0x44>)
    16ae:	4798      	blx	r3
}
    16b0:	bf00      	nop
    16b2:	bd80      	pop	{r7, pc}
    16b4:	40000800 	.word	0x40000800
    16b8:	0000087b 	.word	0x0000087b
    16bc:	40001c00 	.word	0x40001c00
    16c0:	00000655 	.word	0x00000655
    16c4:	00007d29 	.word	0x00007d29
    16c8:	42001400 	.word	0x42001400
    16cc:	200092dc 	.word	0x200092dc
    16d0:	00002579 	.word	0x00002579

000016d4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    16d8:	4808      	ldr	r0, [pc, #32]	; (16fc <TIMER_INTERFACE_init+0x28>)
    16da:	4b09      	ldr	r3, [pc, #36]	; (1700 <TIMER_INTERFACE_init+0x2c>)
    16dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16de:	2246      	movs	r2, #70	; 0x46
    16e0:	211e      	movs	r1, #30
    16e2:	4808      	ldr	r0, [pc, #32]	; (1704 <TIMER_INTERFACE_init+0x30>)
    16e4:	4b08      	ldr	r3, [pc, #32]	; (1708 <TIMER_INTERFACE_init+0x34>)
    16e6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    16e8:	4b08      	ldr	r3, [pc, #32]	; (170c <TIMER_INTERFACE_init+0x38>)
    16ea:	4798      	blx	r3
    16ec:	4603      	mov	r3, r0
    16ee:	461a      	mov	r2, r3
    16f0:	4907      	ldr	r1, [pc, #28]	; (1710 <TIMER_INTERFACE_init+0x3c>)
    16f2:	4808      	ldr	r0, [pc, #32]	; (1714 <TIMER_INTERFACE_init+0x40>)
    16f4:	4b08      	ldr	r3, [pc, #32]	; (1718 <TIMER_INTERFACE_init+0x44>)
    16f6:	4798      	blx	r3
}
    16f8:	bf00      	nop
    16fa:	bd80      	pop	{r7, pc}
    16fc:	40000800 	.word	0x40000800
    1700:	0000089b 	.word	0x0000089b
    1704:	40001c00 	.word	0x40001c00
    1708:	00000655 	.word	0x00000655
    170c:	00007d29 	.word	0x00007d29
    1710:	42001800 	.word	0x42001800
    1714:	20009320 	.word	0x20009320
    1718:	00002579 	.word	0x00002579

0000171c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    171c:	b580      	push	{r7, lr}
    171e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1720:	4808      	ldr	r0, [pc, #32]	; (1744 <TIMER_EVENT_init+0x28>)
    1722:	4b09      	ldr	r3, [pc, #36]	; (1748 <TIMER_EVENT_init+0x2c>)
    1724:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1726:	2246      	movs	r2, #70	; 0x46
    1728:	2127      	movs	r1, #39	; 0x27
    172a:	4808      	ldr	r0, [pc, #32]	; (174c <TIMER_EVENT_init+0x30>)
    172c:	4b08      	ldr	r3, [pc, #32]	; (1750 <TIMER_EVENT_init+0x34>)
    172e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1730:	4b08      	ldr	r3, [pc, #32]	; (1754 <TIMER_EVENT_init+0x38>)
    1732:	4798      	blx	r3
    1734:	4603      	mov	r3, r0
    1736:	461a      	mov	r2, r3
    1738:	4907      	ldr	r1, [pc, #28]	; (1758 <TIMER_EVENT_init+0x3c>)
    173a:	4808      	ldr	r0, [pc, #32]	; (175c <TIMER_EVENT_init+0x40>)
    173c:	4b08      	ldr	r3, [pc, #32]	; (1760 <TIMER_EVENT_init+0x44>)
    173e:	4798      	blx	r3
}
    1740:	bf00      	nop
    1742:	bd80      	pop	{r7, pc}
    1744:	40000800 	.word	0x40000800
    1748:	0000095b 	.word	0x0000095b
    174c:	40001c00 	.word	0x40001c00
    1750:	00000655 	.word	0x00000655
    1754:	00007d29 	.word	0x00007d29
    1758:	43001400 	.word	0x43001400
    175c:	20009300 	.word	0x20009300
    1760:	00002579 	.word	0x00002579

00001764 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1764:	b480      	push	{r7}
    1766:	af00      	add	r7, sp, #0
}
    1768:	bf00      	nop
    176a:	46bd      	mov	sp, r7
    176c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1770:	4770      	bx	lr
	...

00001774 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1774:	b580      	push	{r7, lr}
    1776:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1778:	4804      	ldr	r0, [pc, #16]	; (178c <LIVE_PULSE_CLOCK_init+0x18>)
    177a:	4b05      	ldr	r3, [pc, #20]	; (1790 <LIVE_PULSE_CLOCK_init+0x1c>)
    177c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    177e:	2240      	movs	r2, #64	; 0x40
    1780:	2127      	movs	r1, #39	; 0x27
    1782:	4804      	ldr	r0, [pc, #16]	; (1794 <LIVE_PULSE_CLOCK_init+0x20>)
    1784:	4b04      	ldr	r3, [pc, #16]	; (1798 <LIVE_PULSE_CLOCK_init+0x24>)
    1786:	4798      	blx	r3
}
    1788:	bf00      	nop
    178a:	bd80      	pop	{r7, pc}
    178c:	40000800 	.word	0x40000800
    1790:	0000097b 	.word	0x0000097b
    1794:	40001c00 	.word	0x40001c00
    1798:	00000655 	.word	0x00000655

0000179c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    179c:	b580      	push	{r7, lr}
    179e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <LIVE_PULSE_init+0x20>)
    17a2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    17a4:	4b06      	ldr	r3, [pc, #24]	; (17c0 <LIVE_PULSE_init+0x24>)
    17a6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    17a8:	4b06      	ldr	r3, [pc, #24]	; (17c4 <LIVE_PULSE_init+0x28>)
    17aa:	4798      	blx	r3
    17ac:	4603      	mov	r3, r0
    17ae:	461a      	mov	r2, r3
    17b0:	4905      	ldr	r1, [pc, #20]	; (17c8 <LIVE_PULSE_init+0x2c>)
    17b2:	4806      	ldr	r0, [pc, #24]	; (17cc <LIVE_PULSE_init+0x30>)
    17b4:	4b06      	ldr	r3, [pc, #24]	; (17d0 <LIVE_PULSE_init+0x34>)
    17b6:	4798      	blx	r3
}
    17b8:	bf00      	nop
    17ba:	bd80      	pop	{r7, pc}
    17bc:	00001775 	.word	0x00001775
    17c0:	00001765 	.word	0x00001765
    17c4:	00007d3d 	.word	0x00007d3d
    17c8:	43001800 	.word	0x43001800
    17cc:	20009360 	.word	0x20009360
    17d0:	000021ed 	.word	0x000021ed

000017d4 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    17d4:	b580      	push	{r7, lr}
    17d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    17d8:	4804      	ldr	r0, [pc, #16]	; (17ec <TIMER_HVAC_CLOCK_init+0x18>)
    17da:	4b05      	ldr	r3, [pc, #20]	; (17f0 <TIMER_HVAC_CLOCK_init+0x1c>)
    17dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17de:	2244      	movs	r2, #68	; 0x44
    17e0:	2119      	movs	r1, #25
    17e2:	4804      	ldr	r0, [pc, #16]	; (17f4 <TIMER_HVAC_CLOCK_init+0x20>)
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <TIMER_HVAC_CLOCK_init+0x24>)
    17e6:	4798      	blx	r3
}
    17e8:	bf00      	nop
    17ea:	bd80      	pop	{r7, pc}
    17ec:	40000800 	.word	0x40000800
    17f0:	000007fb 	.word	0x000007fb
    17f4:	40001c00 	.word	0x40001c00
    17f8:	00000655 	.word	0x00000655

000017fc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1800:	4b05      	ldr	r3, [pc, #20]	; (1818 <TIMER_HVAC_init+0x1c>)
    1802:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1804:	4b05      	ldr	r3, [pc, #20]	; (181c <TIMER_HVAC_init+0x20>)
    1806:	4798      	blx	r3
    1808:	4603      	mov	r3, r0
    180a:	461a      	mov	r2, r3
    180c:	4904      	ldr	r1, [pc, #16]	; (1820 <TIMER_HVAC_init+0x24>)
    180e:	4805      	ldr	r0, [pc, #20]	; (1824 <TIMER_HVAC_init+0x28>)
    1810:	4b05      	ldr	r3, [pc, #20]	; (1828 <TIMER_HVAC_init+0x2c>)
    1812:	4798      	blx	r3
}
    1814:	bf00      	nop
    1816:	bd80      	pop	{r7, pc}
    1818:	000017d5 	.word	0x000017d5
    181c:	0000710d 	.word	0x0000710d
    1820:	41016000 	.word	0x41016000
    1824:	20009424 	.word	0x20009424
    1828:	00002579 	.word	0x00002579

0000182c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    182c:	b580      	push	{r7, lr}
    182e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1830:	4804      	ldr	r0, [pc, #16]	; (1844 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1834:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1836:	2244      	movs	r2, #68	; 0x44
    1838:	2119      	movs	r1, #25
    183a:	4804      	ldr	r0, [pc, #16]	; (184c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    183c:	4b04      	ldr	r3, [pc, #16]	; (1850 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    183e:	4798      	blx	r3
}
    1840:	bf00      	nop
    1842:	bd80      	pop	{r7, pc}
    1844:	40000800 	.word	0x40000800
    1848:	0000081b 	.word	0x0000081b
    184c:	40001c00 	.word	0x40001c00
    1850:	00000655 	.word	0x00000655

00001854 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1858:	4b05      	ldr	r3, [pc, #20]	; (1870 <TIMER_TEMPERATURES_init+0x1c>)
    185a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    185c:	4b05      	ldr	r3, [pc, #20]	; (1874 <TIMER_TEMPERATURES_init+0x20>)
    185e:	4798      	blx	r3
    1860:	4603      	mov	r3, r0
    1862:	461a      	mov	r2, r3
    1864:	4904      	ldr	r1, [pc, #16]	; (1878 <TIMER_TEMPERATURES_init+0x24>)
    1866:	4805      	ldr	r0, [pc, #20]	; (187c <TIMER_TEMPERATURES_init+0x28>)
    1868:	4b05      	ldr	r3, [pc, #20]	; (1880 <TIMER_TEMPERATURES_init+0x2c>)
    186a:	4798      	blx	r3
}
    186c:	bf00      	nop
    186e:	bd80      	pop	{r7, pc}
    1870:	0000182d 	.word	0x0000182d
    1874:	0000710d 	.word	0x0000710d
    1878:	41018000 	.word	0x41018000
    187c:	2000926c 	.word	0x2000926c
    1880:	00002579 	.word	0x00002579

00001884 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1884:	b580      	push	{r7, lr}
    1886:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1888:	4804      	ldr	r0, [pc, #16]	; (189c <TIMER_CCU_CLOCK_init+0x18>)
    188a:	4b05      	ldr	r3, [pc, #20]	; (18a0 <TIMER_CCU_CLOCK_init+0x1c>)
    188c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    188e:	2240      	movs	r2, #64	; 0x40
    1890:	211d      	movs	r1, #29
    1892:	4804      	ldr	r0, [pc, #16]	; (18a4 <TIMER_CCU_CLOCK_init+0x20>)
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <TIMER_CCU_CLOCK_init+0x24>)
    1896:	4798      	blx	r3
}
    1898:	bf00      	nop
    189a:	bd80      	pop	{r7, pc}
    189c:	40000800 	.word	0x40000800
    18a0:	0000085b 	.word	0x0000085b
    18a4:	40001c00 	.word	0x40001c00
    18a8:	00000655 	.word	0x00000655

000018ac <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    18b0:	4b05      	ldr	r3, [pc, #20]	; (18c8 <TIMER_CCU_init+0x1c>)
    18b2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    18b4:	4b05      	ldr	r3, [pc, #20]	; (18cc <TIMER_CCU_init+0x20>)
    18b6:	4798      	blx	r3
    18b8:	4603      	mov	r3, r0
    18ba:	461a      	mov	r2, r3
    18bc:	4904      	ldr	r1, [pc, #16]	; (18d0 <TIMER_CCU_init+0x24>)
    18be:	4805      	ldr	r0, [pc, #20]	; (18d4 <TIMER_CCU_init+0x28>)
    18c0:	4b05      	ldr	r3, [pc, #20]	; (18d8 <TIMER_CCU_init+0x2c>)
    18c2:	4798      	blx	r3
}
    18c4:	bf00      	nop
    18c6:	bd80      	pop	{r7, pc}
    18c8:	00001885 	.word	0x00001885
    18cc:	0000710d 	.word	0x0000710d
    18d0:	42000c00 	.word	0x42000c00
    18d4:	2000937c 	.word	0x2000937c
    18d8:	00002579 	.word	0x00002579

000018dc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    18dc:	b580      	push	{r7, lr}
    18de:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    18e0:	2102      	movs	r1, #2
    18e2:	2018      	movs	r0, #24
    18e4:	4b0f      	ldr	r3, [pc, #60]	; (1924 <CDCUSB_PORT_init+0x48>)
    18e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    18e8:	2100      	movs	r1, #0
    18ea:	2018      	movs	r0, #24
    18ec:	4b0e      	ldr	r3, [pc, #56]	; (1928 <CDCUSB_PORT_init+0x4c>)
    18ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    18f0:	2100      	movs	r1, #0
    18f2:	2018      	movs	r0, #24
    18f4:	4b0d      	ldr	r3, [pc, #52]	; (192c <CDCUSB_PORT_init+0x50>)
    18f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    18f8:	490d      	ldr	r1, [pc, #52]	; (1930 <CDCUSB_PORT_init+0x54>)
    18fa:	2018      	movs	r0, #24
    18fc:	4b0d      	ldr	r3, [pc, #52]	; (1934 <CDCUSB_PORT_init+0x58>)
    18fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1900:	2102      	movs	r1, #2
    1902:	2019      	movs	r0, #25
    1904:	4b07      	ldr	r3, [pc, #28]	; (1924 <CDCUSB_PORT_init+0x48>)
    1906:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1908:	2100      	movs	r1, #0
    190a:	2019      	movs	r0, #25
    190c:	4b06      	ldr	r3, [pc, #24]	; (1928 <CDCUSB_PORT_init+0x4c>)
    190e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1910:	2100      	movs	r1, #0
    1912:	2019      	movs	r0, #25
    1914:	4b05      	ldr	r3, [pc, #20]	; (192c <CDCUSB_PORT_init+0x50>)
    1916:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1918:	4907      	ldr	r1, [pc, #28]	; (1938 <CDCUSB_PORT_init+0x5c>)
    191a:	2019      	movs	r0, #25
    191c:	4b05      	ldr	r3, [pc, #20]	; (1934 <CDCUSB_PORT_init+0x58>)
    191e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1920:	bf00      	nop
    1922:	bd80      	pop	{r7, pc}
    1924:	00000ec9 	.word	0x00000ec9
    1928:	00000f01 	.word	0x00000f01
    192c:	00000e75 	.word	0x00000e75
    1930:	00180007 	.word	0x00180007
    1934:	00000ea9 	.word	0x00000ea9
    1938:	00190007 	.word	0x00190007

0000193c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    193c:	b580      	push	{r7, lr}
    193e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1940:	2242      	movs	r2, #66	; 0x42
    1942:	210a      	movs	r1, #10
    1944:	4805      	ldr	r0, [pc, #20]	; (195c <CDCUSB_CLOCK_init+0x20>)
    1946:	4b06      	ldr	r3, [pc, #24]	; (1960 <CDCUSB_CLOCK_init+0x24>)
    1948:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    194a:	4806      	ldr	r0, [pc, #24]	; (1964 <CDCUSB_CLOCK_init+0x28>)
    194c:	4b06      	ldr	r3, [pc, #24]	; (1968 <CDCUSB_CLOCK_init+0x2c>)
    194e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1950:	4804      	ldr	r0, [pc, #16]	; (1964 <CDCUSB_CLOCK_init+0x28>)
    1952:	4b06      	ldr	r3, [pc, #24]	; (196c <CDCUSB_CLOCK_init+0x30>)
    1954:	4798      	blx	r3
}
    1956:	bf00      	nop
    1958:	bd80      	pop	{r7, pc}
    195a:	bf00      	nop
    195c:	40001c00 	.word	0x40001c00
    1960:	00000655 	.word	0x00000655
    1964:	40000800 	.word	0x40000800
    1968:	0000067b 	.word	0x0000067b
    196c:	0000079b 	.word	0x0000079b

00001970 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1970:	b580      	push	{r7, lr}
    1972:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1974:	4b03      	ldr	r3, [pc, #12]	; (1984 <CDCUSB_init+0x14>)
    1976:	4798      	blx	r3
	usb_d_init();
    1978:	4b03      	ldr	r3, [pc, #12]	; (1988 <CDCUSB_init+0x18>)
    197a:	4798      	blx	r3
	CDCUSB_PORT_init();
    197c:	4b03      	ldr	r3, [pc, #12]	; (198c <CDCUSB_init+0x1c>)
    197e:	4798      	blx	r3
}
    1980:	bf00      	nop
    1982:	bd80      	pop	{r7, pc}
    1984:	0000193d 	.word	0x0000193d
    1988:	00002dd5 	.word	0x00002dd5
    198c:	000018dd 	.word	0x000018dd

00001990 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1994:	4802      	ldr	r0, [pc, #8]	; (19a0 <WATCHDOG_CLOCK_init+0x10>)
    1996:	4b03      	ldr	r3, [pc, #12]	; (19a4 <WATCHDOG_CLOCK_init+0x14>)
    1998:	4798      	blx	r3
}
    199a:	bf00      	nop
    199c:	bd80      	pop	{r7, pc}
    199e:	bf00      	nop
    19a0:	40000800 	.word	0x40000800
    19a4:	000006fb 	.word	0x000006fb

000019a8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    19ac:	4b03      	ldr	r3, [pc, #12]	; (19bc <WATCHDOG_init+0x14>)
    19ae:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    19b0:	4903      	ldr	r1, [pc, #12]	; (19c0 <WATCHDOG_init+0x18>)
    19b2:	4804      	ldr	r0, [pc, #16]	; (19c4 <WATCHDOG_init+0x1c>)
    19b4:	4b04      	ldr	r3, [pc, #16]	; (19c8 <WATCHDOG_init+0x20>)
    19b6:	4798      	blx	r3
}
    19b8:	bf00      	nop
    19ba:	bd80      	pop	{r7, pc}
    19bc:	00001991 	.word	0x00001991
    19c0:	40002000 	.word	0x40002000
    19c4:	20009464 	.word	0x20009464
    19c8:	00000f49 	.word	0x00000f49

000019cc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    19d0:	4904      	ldr	r1, [pc, #16]	; (19e4 <CAN_CCU_PORT_init+0x18>)
    19d2:	202d      	movs	r0, #45	; 0x2d
    19d4:	4b04      	ldr	r3, [pc, #16]	; (19e8 <CAN_CCU_PORT_init+0x1c>)
    19d6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    19d8:	4904      	ldr	r1, [pc, #16]	; (19ec <CAN_CCU_PORT_init+0x20>)
    19da:	202c      	movs	r0, #44	; 0x2c
    19dc:	4b02      	ldr	r3, [pc, #8]	; (19e8 <CAN_CCU_PORT_init+0x1c>)
    19de:	4798      	blx	r3
}
    19e0:	bf00      	nop
    19e2:	bd80      	pop	{r7, pc}
    19e4:	002d0007 	.word	0x002d0007
    19e8:	00000ea9 	.word	0x00000ea9
    19ec:	002c0007 	.word	0x002c0007

000019f0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    19f4:	4807      	ldr	r0, [pc, #28]	; (1a14 <CAN_CCU_init+0x24>)
    19f6:	4b08      	ldr	r3, [pc, #32]	; (1a18 <CAN_CCU_init+0x28>)
    19f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19fa:	2249      	movs	r2, #73	; 0x49
    19fc:	211c      	movs	r1, #28
    19fe:	4807      	ldr	r0, [pc, #28]	; (1a1c <CAN_CCU_init+0x2c>)
    1a00:	4b07      	ldr	r3, [pc, #28]	; (1a20 <CAN_CCU_init+0x30>)
    1a02:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1a04:	4907      	ldr	r1, [pc, #28]	; (1a24 <CAN_CCU_init+0x34>)
    1a06:	4808      	ldr	r0, [pc, #32]	; (1a28 <CAN_CCU_init+0x38>)
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <CAN_CCU_init+0x3c>)
    1a0a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1a0c:	4b08      	ldr	r3, [pc, #32]	; (1a30 <CAN_CCU_init+0x40>)
    1a0e:	4798      	blx	r3
}
    1a10:	bf00      	nop
    1a12:	bd80      	pop	{r7, pc}
    1a14:	40000800 	.word	0x40000800
    1a18:	000006bb 	.word	0x000006bb
    1a1c:	40001c00 	.word	0x40001c00
    1a20:	00000655 	.word	0x00000655
    1a24:	42000400 	.word	0x42000400
    1a28:	200093bc 	.word	0x200093bc
    1a2c:	00001c95 	.word	0x00001c95
    1a30:	000019cd 	.word	0x000019cd

00001a34 <system_init>:

void system_init(void)
{
    1a34:	b580      	push	{r7, lr}
    1a36:	af00      	add	r7, sp, #0
	init_mcu();
    1a38:	4b5f      	ldr	r3, [pc, #380]	; (1bb8 <system_init+0x184>)
    1a3a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1a3c:	2100      	movs	r1, #0
    1a3e:	2007      	movs	r0, #7
    1a40:	4b5e      	ldr	r3, [pc, #376]	; (1bbc <system_init+0x188>)
    1a42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1a44:	2102      	movs	r1, #2
    1a46:	2007      	movs	r0, #7
    1a48:	4b5d      	ldr	r3, [pc, #372]	; (1bc0 <system_init+0x18c>)
    1a4a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1a4c:	f04f 31ff 	mov.w	r1, #4294967295
    1a50:	2007      	movs	r0, #7
    1a52:	4b5c      	ldr	r3, [pc, #368]	; (1bc4 <system_init+0x190>)
    1a54:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1a56:	2101      	movs	r1, #1
    1a58:	200f      	movs	r0, #15
    1a5a:	4b58      	ldr	r3, [pc, #352]	; (1bbc <system_init+0x188>)
    1a5c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1a5e:	2102      	movs	r1, #2
    1a60:	200f      	movs	r0, #15
    1a62:	4b57      	ldr	r3, [pc, #348]	; (1bc0 <system_init+0x18c>)
    1a64:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1a66:	f04f 31ff 	mov.w	r1, #4294967295
    1a6a:	200f      	movs	r0, #15
    1a6c:	4b55      	ldr	r3, [pc, #340]	; (1bc4 <system_init+0x190>)
    1a6e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1a70:	2101      	movs	r1, #1
    1a72:	2013      	movs	r0, #19
    1a74:	4b51      	ldr	r3, [pc, #324]	; (1bbc <system_init+0x188>)
    1a76:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1a78:	2102      	movs	r1, #2
    1a7a:	2013      	movs	r0, #19
    1a7c:	4b50      	ldr	r3, [pc, #320]	; (1bc0 <system_init+0x18c>)
    1a7e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1a80:	f04f 31ff 	mov.w	r1, #4294967295
    1a84:	2013      	movs	r0, #19
    1a86:	4b4f      	ldr	r3, [pc, #316]	; (1bc4 <system_init+0x190>)
    1a88:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1a8a:	2101      	movs	r1, #1
    1a8c:	201b      	movs	r0, #27
    1a8e:	4b4b      	ldr	r3, [pc, #300]	; (1bbc <system_init+0x188>)
    1a90:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1a92:	2102      	movs	r1, #2
    1a94:	201b      	movs	r0, #27
    1a96:	4b4a      	ldr	r3, [pc, #296]	; (1bc0 <system_init+0x18c>)
    1a98:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1a9a:	f04f 31ff 	mov.w	r1, #4294967295
    1a9e:	201b      	movs	r0, #27
    1aa0:	4b48      	ldr	r3, [pc, #288]	; (1bc4 <system_init+0x190>)
    1aa2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1aa4:	2101      	movs	r1, #1
    1aa6:	2027      	movs	r0, #39	; 0x27
    1aa8:	4b44      	ldr	r3, [pc, #272]	; (1bbc <system_init+0x188>)
    1aaa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1aac:	2102      	movs	r1, #2
    1aae:	2027      	movs	r0, #39	; 0x27
    1ab0:	4b43      	ldr	r3, [pc, #268]	; (1bc0 <system_init+0x18c>)
    1ab2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1ab4:	f04f 31ff 	mov.w	r1, #4294967295
    1ab8:	2027      	movs	r0, #39	; 0x27
    1aba:	4b42      	ldr	r3, [pc, #264]	; (1bc4 <system_init+0x190>)
    1abc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1abe:	2101      	movs	r1, #1
    1ac0:	203d      	movs	r0, #61	; 0x3d
    1ac2:	4b3e      	ldr	r3, [pc, #248]	; (1bbc <system_init+0x188>)
    1ac4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1ac6:	2102      	movs	r1, #2
    1ac8:	203d      	movs	r0, #61	; 0x3d
    1aca:	4b3d      	ldr	r3, [pc, #244]	; (1bc0 <system_init+0x18c>)
    1acc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1ace:	f04f 31ff 	mov.w	r1, #4294967295
    1ad2:	203d      	movs	r0, #61	; 0x3d
    1ad4:	4b3b      	ldr	r3, [pc, #236]	; (1bc4 <system_init+0x190>)
    1ad6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1ad8:	2101      	movs	r1, #1
    1ada:	203f      	movs	r0, #63	; 0x3f
    1adc:	4b38      	ldr	r3, [pc, #224]	; (1bc0 <system_init+0x18c>)
    1ade:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1ae0:	2101      	movs	r1, #1
    1ae2:	203f      	movs	r0, #63	; 0x3f
    1ae4:	4b38      	ldr	r3, [pc, #224]	; (1bc8 <system_init+0x194>)
    1ae6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1ae8:	f04f 31ff 	mov.w	r1, #4294967295
    1aec:	203f      	movs	r0, #63	; 0x3f
    1aee:	4b35      	ldr	r3, [pc, #212]	; (1bc4 <system_init+0x190>)
    1af0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1af2:	2100      	movs	r1, #0
    1af4:	204d      	movs	r0, #77	; 0x4d
    1af6:	4b31      	ldr	r3, [pc, #196]	; (1bbc <system_init+0x188>)
    1af8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1afa:	2102      	movs	r1, #2
    1afc:	204d      	movs	r0, #77	; 0x4d
    1afe:	4b30      	ldr	r3, [pc, #192]	; (1bc0 <system_init+0x18c>)
    1b00:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1b02:	f04f 31ff 	mov.w	r1, #4294967295
    1b06:	204d      	movs	r0, #77	; 0x4d
    1b08:	4b2e      	ldr	r3, [pc, #184]	; (1bc4 <system_init+0x190>)
    1b0a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1b0c:	2101      	movs	r1, #1
    1b0e:	204e      	movs	r0, #78	; 0x4e
    1b10:	4b2a      	ldr	r3, [pc, #168]	; (1bbc <system_init+0x188>)
    1b12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1b14:	2102      	movs	r1, #2
    1b16:	204e      	movs	r0, #78	; 0x4e
    1b18:	4b29      	ldr	r3, [pc, #164]	; (1bc0 <system_init+0x18c>)
    1b1a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1b1c:	f04f 31ff 	mov.w	r1, #4294967295
    1b20:	204e      	movs	r0, #78	; 0x4e
    1b22:	4b28      	ldr	r3, [pc, #160]	; (1bc4 <system_init+0x190>)
    1b24:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1b26:	2100      	movs	r1, #0
    1b28:	204f      	movs	r0, #79	; 0x4f
    1b2a:	4b24      	ldr	r3, [pc, #144]	; (1bbc <system_init+0x188>)
    1b2c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1b2e:	2102      	movs	r1, #2
    1b30:	204f      	movs	r0, #79	; 0x4f
    1b32:	4b23      	ldr	r3, [pc, #140]	; (1bc0 <system_init+0x18c>)
    1b34:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1b36:	f04f 31ff 	mov.w	r1, #4294967295
    1b3a:	204f      	movs	r0, #79	; 0x4f
    1b3c:	4b21      	ldr	r3, [pc, #132]	; (1bc4 <system_init+0x190>)
    1b3e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1b40:	2100      	movs	r1, #0
    1b42:	2052      	movs	r0, #82	; 0x52
    1b44:	4b1d      	ldr	r3, [pc, #116]	; (1bbc <system_init+0x188>)
    1b46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1b48:	2102      	movs	r1, #2
    1b4a:	2052      	movs	r0, #82	; 0x52
    1b4c:	4b1c      	ldr	r3, [pc, #112]	; (1bc0 <system_init+0x18c>)
    1b4e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1b50:	f04f 31ff 	mov.w	r1, #4294967295
    1b54:	2052      	movs	r0, #82	; 0x52
    1b56:	4b1b      	ldr	r3, [pc, #108]	; (1bc4 <system_init+0x190>)
    1b58:	4798      	blx	r3

	CRC_CALC_init();
    1b5a:	4b1c      	ldr	r3, [pc, #112]	; (1bcc <system_init+0x198>)
    1b5c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1b5e:	4b1c      	ldr	r3, [pc, #112]	; (1bd0 <system_init+0x19c>)
    1b60:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1b62:	4b1c      	ldr	r3, [pc, #112]	; (1bd4 <system_init+0x1a0>)
    1b64:	4798      	blx	r3

	QSPI_N25Q256_init();
    1b66:	4b1c      	ldr	r3, [pc, #112]	; (1bd8 <system_init+0x1a4>)
    1b68:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1b6a:	4b1c      	ldr	r3, [pc, #112]	; (1bdc <system_init+0x1a8>)
    1b6c:	4798      	blx	r3

	I2C_HEATERS_init();
    1b6e:	4b1c      	ldr	r3, [pc, #112]	; (1be0 <system_init+0x1ac>)
    1b70:	4798      	blx	r3

	SPI_TEMP_init();
    1b72:	4b1c      	ldr	r3, [pc, #112]	; (1be4 <system_init+0x1b0>)
    1b74:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1b76:	4b1c      	ldr	r3, [pc, #112]	; (1be8 <system_init+0x1b4>)
    1b78:	4798      	blx	r3

	SPI_HI3593_init();
    1b7a:	4b1c      	ldr	r3, [pc, #112]	; (1bec <system_init+0x1b8>)
    1b7c:	4798      	blx	r3

	I2C_FANS_init();
    1b7e:	4b1c      	ldr	r3, [pc, #112]	; (1bf0 <system_init+0x1bc>)
    1b80:	4798      	blx	r3

	TIMER_USB_init();
    1b82:	4b1c      	ldr	r3, [pc, #112]	; (1bf4 <system_init+0x1c0>)
    1b84:	4798      	blx	r3
	TIMER_ARINC_init();
    1b86:	4b1c      	ldr	r3, [pc, #112]	; (1bf8 <system_init+0x1c4>)
    1b88:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1b8a:	4b1c      	ldr	r3, [pc, #112]	; (1bfc <system_init+0x1c8>)
    1b8c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1b8e:	4b1c      	ldr	r3, [pc, #112]	; (1c00 <system_init+0x1cc>)
    1b90:	4798      	blx	r3
	TIMER_EVENT_init();
    1b92:	4b1c      	ldr	r3, [pc, #112]	; (1c04 <system_init+0x1d0>)
    1b94:	4798      	blx	r3
	LIVE_PULSE_init();
    1b96:	4b1c      	ldr	r3, [pc, #112]	; (1c08 <system_init+0x1d4>)
    1b98:	4798      	blx	r3

	TIMER_HVAC_init();
    1b9a:	4b1c      	ldr	r3, [pc, #112]	; (1c0c <system_init+0x1d8>)
    1b9c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1b9e:	4b1c      	ldr	r3, [pc, #112]	; (1c10 <system_init+0x1dc>)
    1ba0:	4798      	blx	r3

	TIMER_CCU_init();
    1ba2:	4b1c      	ldr	r3, [pc, #112]	; (1c14 <system_init+0x1e0>)
    1ba4:	4798      	blx	r3

	CDCUSB_init();
    1ba6:	4b1c      	ldr	r3, [pc, #112]	; (1c18 <system_init+0x1e4>)
    1ba8:	4798      	blx	r3

	WATCHDOG_init();
    1baa:	4b1c      	ldr	r3, [pc, #112]	; (1c1c <system_init+0x1e8>)
    1bac:	4798      	blx	r3
	CAN_CCU_init();
    1bae:	4b1c      	ldr	r3, [pc, #112]	; (1c20 <system_init+0x1ec>)
    1bb0:	4798      	blx	r3
}
    1bb2:	bf00      	nop
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	bf00      	nop
    1bb8:	00000f39 	.word	0x00000f39
    1bbc:	00000f01 	.word	0x00000f01
    1bc0:	00000ec9 	.word	0x00000ec9
    1bc4:	00000ea9 	.word	0x00000ea9
    1bc8:	00000e75 	.word	0x00000e75
    1bcc:	00000f99 	.word	0x00000f99
    1bd0:	00000fc5 	.word	0x00000fc5
    1bd4:	000010ed 	.word	0x000010ed
    1bd8:	00001235 	.word	0x00001235
    1bdc:	00001279 	.word	0x00001279
    1be0:	00001309 	.word	0x00001309
    1be4:	000013d5 	.word	0x000013d5
    1be8:	0000146d 	.word	0x0000146d
    1bec:	00001539 	.word	0x00001539
    1bf0:	000015d1 	.word	0x000015d1
    1bf4:	000015fd 	.word	0x000015fd
    1bf8:	00001645 	.word	0x00001645
    1bfc:	0000168d 	.word	0x0000168d
    1c00:	000016d5 	.word	0x000016d5
    1c04:	0000171d 	.word	0x0000171d
    1c08:	0000179d 	.word	0x0000179d
    1c0c:	000017fd 	.word	0x000017fd
    1c10:	00001855 	.word	0x00001855
    1c14:	000018ad 	.word	0x000018ad
    1c18:	00001971 	.word	0x00001971
    1c1c:	000019a9 	.word	0x000019a9
    1c20:	000019f1 	.word	0x000019f1

00001c24 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b084      	sub	sp, #16
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1c2e:	2300      	movs	r3, #0
    1c30:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	2b00      	cmp	r3, #0
    1c36:	bf14      	ite	ne
    1c38:	2301      	movne	r3, #1
    1c3a:	2300      	moveq	r3, #0
    1c3c:	b2db      	uxtb	r3, r3
    1c3e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1c42:	4911      	ldr	r1, [pc, #68]	; (1c88 <calendar_init+0x64>)
    1c44:	4618      	mov	r0, r3
    1c46:	4b11      	ldr	r3, [pc, #68]	; (1c8c <calendar_init+0x68>)
    1c48:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	681a      	ldr	r2, [r3, #0]
    1c4e:	683b      	ldr	r3, [r7, #0]
    1c50:	429a      	cmp	r2, r3
    1c52:	d101      	bne.n	1c58 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1c54:	2300      	movs	r3, #0
    1c56:	e013      	b.n	1c80 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d002      	beq.n	1c66 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1c60:	f06f 0311 	mvn.w	r3, #17
    1c64:	e00c      	b.n	1c80 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	683a      	ldr	r2, [r7, #0]
    1c6a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	4618      	mov	r0, r3
    1c70:	4b07      	ldr	r3, [pc, #28]	; (1c90 <calendar_init+0x6c>)
    1c72:	4798      	blx	r3
    1c74:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1c7c:	619a      	str	r2, [r3, #24]

	return ret;
    1c7e:	68fb      	ldr	r3, [r7, #12]
}
    1c80:	4618      	mov	r0, r3
    1c82:	3710      	adds	r7, #16
    1c84:	46bd      	mov	sp, r7
    1c86:	bd80      	pop	{r7, pc}
    1c88:	000110f4 	.word	0x000110f4
    1c8c:	0000337d 	.word	0x0000337d
    1c90:	00005739 	.word	0x00005739

00001c94 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	b084      	sub	sp, #16
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
    1c9c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d004      	beq.n	1cae <can_async_init+0x1a>
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d001      	beq.n	1cae <can_async_init+0x1a>
    1caa:	2301      	movs	r3, #1
    1cac:	e000      	b.n	1cb0 <can_async_init+0x1c>
    1cae:	2300      	movs	r3, #0
    1cb0:	f003 0301 	and.w	r3, r3, #1
    1cb4:	b2db      	uxtb	r3, r3
    1cb6:	2241      	movs	r2, #65	; 0x41
    1cb8:	490e      	ldr	r1, [pc, #56]	; (1cf4 <can_async_init+0x60>)
    1cba:	4618      	mov	r0, r3
    1cbc:	4b0e      	ldr	r3, [pc, #56]	; (1cf8 <can_async_init+0x64>)
    1cbe:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	6839      	ldr	r1, [r7, #0]
    1cc4:	4618      	mov	r0, r3
    1cc6:	4b0d      	ldr	r3, [pc, #52]	; (1cfc <can_async_init+0x68>)
    1cc8:	4798      	blx	r3
    1cca:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1ccc:	68fb      	ldr	r3, [r7, #12]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d001      	beq.n	1cd6 <can_async_init+0x42>
		return rc;
    1cd2:	68fb      	ldr	r3, [r7, #12]
    1cd4:	e009      	b.n	1cea <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	4a09      	ldr	r2, [pc, #36]	; (1d00 <can_async_init+0x6c>)
    1cda:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1cdc:	687b      	ldr	r3, [r7, #4]
    1cde:	4a09      	ldr	r2, [pc, #36]	; (1d04 <can_async_init+0x70>)
    1ce0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	4a08      	ldr	r2, [pc, #32]	; (1d08 <can_async_init+0x74>)
    1ce6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1ce8:	2300      	movs	r3, #0
}
    1cea:	4618      	mov	r0, r3
    1cec:	3710      	adds	r7, #16
    1cee:	46bd      	mov	sp, r7
    1cf0:	bd80      	pop	{r7, pc}
    1cf2:	bf00      	nop
    1cf4:	00011110 	.word	0x00011110
    1cf8:	0000337d 	.word	0x0000337d
    1cfc:	000038d9 	.word	0x000038d9
    1d00:	00001d0d 	.word	0x00001d0d
    1d04:	00001d31 	.word	0x00001d31
    1d08:	00001d55 	.word	0x00001d55

00001d0c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b084      	sub	sp, #16
    1d10:	af00      	add	r7, sp, #0
    1d12:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1d18:	68fb      	ldr	r3, [r7, #12]
    1d1a:	69db      	ldr	r3, [r3, #28]
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d003      	beq.n	1d28 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1d20:	68fb      	ldr	r3, [r7, #12]
    1d22:	69db      	ldr	r3, [r3, #28]
    1d24:	68f8      	ldr	r0, [r7, #12]
    1d26:	4798      	blx	r3
	}
}
    1d28:	bf00      	nop
    1d2a:	3710      	adds	r7, #16
    1d2c:	46bd      	mov	sp, r7
    1d2e:	bd80      	pop	{r7, pc}

00001d30 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b084      	sub	sp, #16
    1d34:	af00      	add	r7, sp, #0
    1d36:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	6a1b      	ldr	r3, [r3, #32]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d003      	beq.n	1d4c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1d44:	68fb      	ldr	r3, [r7, #12]
    1d46:	6a1b      	ldr	r3, [r3, #32]
    1d48:	68f8      	ldr	r0, [r7, #12]
    1d4a:	4798      	blx	r3
	}
}
    1d4c:	bf00      	nop
    1d4e:	3710      	adds	r7, #16
    1d50:	46bd      	mov	sp, r7
    1d52:	bd80      	pop	{r7, pc}

00001d54 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1d54:	b580      	push	{r7, lr}
    1d56:	b084      	sub	sp, #16
    1d58:	af00      	add	r7, sp, #0
    1d5a:	6078      	str	r0, [r7, #4]
    1d5c:	460b      	mov	r3, r1
    1d5e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d60:	687b      	ldr	r3, [r7, #4]
    1d62:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1d64:	68fb      	ldr	r3, [r7, #12]
    1d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d005      	beq.n	1d78 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1d6c:	68fb      	ldr	r3, [r7, #12]
    1d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d70:	78fa      	ldrb	r2, [r7, #3]
    1d72:	4611      	mov	r1, r2
    1d74:	68f8      	ldr	r0, [r7, #12]
    1d76:	4798      	blx	r3
	}
}
    1d78:	bf00      	nop
    1d7a:	3710      	adds	r7, #16
    1d7c:	46bd      	mov	sp, r7
    1d7e:	bd80      	pop	{r7, pc}

00001d80 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1d80:	b580      	push	{r7, lr}
    1d82:	b082      	sub	sp, #8
    1d84:	af00      	add	r7, sp, #0
    1d86:	6078      	str	r0, [r7, #4]
    1d88:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d004      	beq.n	1d9a <crc_sync_init+0x1a>
    1d90:	683b      	ldr	r3, [r7, #0]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d001      	beq.n	1d9a <crc_sync_init+0x1a>
    1d96:	2301      	movs	r3, #1
    1d98:	e000      	b.n	1d9c <crc_sync_init+0x1c>
    1d9a:	2300      	movs	r3, #0
    1d9c:	f003 0301 	and.w	r3, r3, #1
    1da0:	b2db      	uxtb	r3, r3
    1da2:	222b      	movs	r2, #43	; 0x2b
    1da4:	4906      	ldr	r1, [pc, #24]	; (1dc0 <crc_sync_init+0x40>)
    1da6:	4618      	mov	r0, r3
    1da8:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <crc_sync_init+0x44>)
    1daa:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	6839      	ldr	r1, [r7, #0]
    1db0:	4618      	mov	r0, r3
    1db2:	4b05      	ldr	r3, [pc, #20]	; (1dc8 <crc_sync_init+0x48>)
    1db4:	4798      	blx	r3
    1db6:	4603      	mov	r3, r0
}
    1db8:	4618      	mov	r0, r3
    1dba:	3708      	adds	r7, #8
    1dbc:	46bd      	mov	sp, r7
    1dbe:	bd80      	pop	{r7, pc}
    1dc0:	0001112c 	.word	0x0001112c
    1dc4:	0000337d 	.word	0x0000337d
    1dc8:	00003fd9 	.word	0x00003fd9

00001dcc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1dcc:	b590      	push	{r4, r7, lr}
    1dce:	b083      	sub	sp, #12
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	4603      	mov	r3, r0
    1dd4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1dd6:	4b07      	ldr	r3, [pc, #28]	; (1df4 <delay_us+0x28>)
    1dd8:	681c      	ldr	r4, [r3, #0]
    1dda:	88fb      	ldrh	r3, [r7, #6]
    1ddc:	4618      	mov	r0, r3
    1dde:	4b06      	ldr	r3, [pc, #24]	; (1df8 <delay_us+0x2c>)
    1de0:	4798      	blx	r3
    1de2:	4603      	mov	r3, r0
    1de4:	4619      	mov	r1, r3
    1de6:	4620      	mov	r0, r4
    1de8:	4b04      	ldr	r3, [pc, #16]	; (1dfc <delay_us+0x30>)
    1dea:	4798      	blx	r3
}
    1dec:	bf00      	nop
    1dee:	370c      	adds	r7, #12
    1df0:	46bd      	mov	sp, r7
    1df2:	bd90      	pop	{r4, r7, pc}
    1df4:	200009b4 	.word	0x200009b4
    1df8:	00003d2d 	.word	0x00003d2d
    1dfc:	00003ec1 	.word	0x00003ec1

00001e00 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1e00:	b590      	push	{r4, r7, lr}
    1e02:	b083      	sub	sp, #12
    1e04:	af00      	add	r7, sp, #0
    1e06:	4603      	mov	r3, r0
    1e08:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1e0a:	4b07      	ldr	r3, [pc, #28]	; (1e28 <delay_ms+0x28>)
    1e0c:	681c      	ldr	r4, [r3, #0]
    1e0e:	88fb      	ldrh	r3, [r7, #6]
    1e10:	4618      	mov	r0, r3
    1e12:	4b06      	ldr	r3, [pc, #24]	; (1e2c <delay_ms+0x2c>)
    1e14:	4798      	blx	r3
    1e16:	4603      	mov	r3, r0
    1e18:	4619      	mov	r1, r3
    1e1a:	4620      	mov	r0, r4
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <delay_ms+0x30>)
    1e1e:	4798      	blx	r3
}
    1e20:	bf00      	nop
    1e22:	370c      	adds	r7, #12
    1e24:	46bd      	mov	sp, r7
    1e26:	bd90      	pop	{r4, r7, pc}
    1e28:	200009b4 	.word	0x200009b4
    1e2c:	00003e99 	.word	0x00003e99
    1e30:	00003ec1 	.word	0x00003ec1

00001e34 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1e34:	b580      	push	{r7, lr}
    1e36:	af00      	add	r7, sp, #0
	return _event_system_init();
    1e38:	4b02      	ldr	r3, [pc, #8]	; (1e44 <event_system_init+0x10>)
    1e3a:	4798      	blx	r3
    1e3c:	4603      	mov	r3, r0
}
    1e3e:	4618      	mov	r0, r3
    1e40:	bd80      	pop	{r7, pc}
    1e42:	bf00      	nop
    1e44:	00004795 	.word	0x00004795

00001e48 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	b082      	sub	sp, #8
    1e4c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e4e:	2300      	movs	r3, #0
    1e50:	80fb      	strh	r3, [r7, #6]
    1e52:	e00e      	b.n	1e72 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1e54:	88fb      	ldrh	r3, [r7, #6]
    1e56:	4a0c      	ldr	r2, [pc, #48]	; (1e88 <ext_irq_init+0x40>)
    1e58:	00db      	lsls	r3, r3, #3
    1e5a:	4413      	add	r3, r2
    1e5c:	f04f 32ff 	mov.w	r2, #4294967295
    1e60:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1e62:	88fb      	ldrh	r3, [r7, #6]
    1e64:	4a08      	ldr	r2, [pc, #32]	; (1e88 <ext_irq_init+0x40>)
    1e66:	2100      	movs	r1, #0
    1e68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e6c:	88fb      	ldrh	r3, [r7, #6]
    1e6e:	3301      	adds	r3, #1
    1e70:	80fb      	strh	r3, [r7, #6]
    1e72:	88fb      	ldrh	r3, [r7, #6]
    1e74:	2b08      	cmp	r3, #8
    1e76:	d9ed      	bls.n	1e54 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1e78:	4804      	ldr	r0, [pc, #16]	; (1e8c <ext_irq_init+0x44>)
    1e7a:	4b05      	ldr	r3, [pc, #20]	; (1e90 <ext_irq_init+0x48>)
    1e7c:	4798      	blx	r3
    1e7e:	4603      	mov	r3, r0
}
    1e80:	4618      	mov	r0, r3
    1e82:	3708      	adds	r7, #8
    1e84:	46bd      	mov	sp, r7
    1e86:	bd80      	pop	{r7, pc}
    1e88:	200009b8 	.word	0x200009b8
    1e8c:	00001fed 	.word	0x00001fed
    1e90:	00004319 	.word	0x00004319

00001e94 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b086      	sub	sp, #24
    1e98:	af00      	add	r7, sp, #0
    1e9a:	6078      	str	r0, [r7, #4]
    1e9c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    1e9e:	2300      	movs	r3, #0
    1ea0:	75fb      	strb	r3, [r7, #23]
    1ea2:	2300      	movs	r3, #0
    1ea4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    1ea6:	2300      	movs	r3, #0
    1ea8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    1eaa:	e012      	b.n	1ed2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    1eac:	7dfb      	ldrb	r3, [r7, #23]
    1eae:	4a4d      	ldr	r2, [pc, #308]	; (1fe4 <ext_irq_register+0x150>)
    1eb0:	00db      	lsls	r3, r3, #3
    1eb2:	4413      	add	r3, r2
    1eb4:	685a      	ldr	r2, [r3, #4]
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	429a      	cmp	r2, r3
    1eba:	d107      	bne.n	1ecc <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    1ebc:	7dfb      	ldrb	r3, [r7, #23]
    1ebe:	4949      	ldr	r1, [pc, #292]	; (1fe4 <ext_irq_register+0x150>)
    1ec0:	683a      	ldr	r2, [r7, #0]
    1ec2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    1ec6:	2301      	movs	r3, #1
    1ec8:	757b      	strb	r3, [r7, #21]
			break;
    1eca:	e005      	b.n	1ed8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1ecc:	7dfb      	ldrb	r3, [r7, #23]
    1ece:	3301      	adds	r3, #1
    1ed0:	75fb      	strb	r3, [r7, #23]
    1ed2:	7dfb      	ldrb	r3, [r7, #23]
    1ed4:	2b08      	cmp	r3, #8
    1ed6:	d9e9      	bls.n	1eac <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    1ed8:	683b      	ldr	r3, [r7, #0]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d10e      	bne.n	1efc <ext_irq_register+0x68>
		if (!found) {
    1ede:	7d7b      	ldrb	r3, [r7, #21]
    1ee0:	f083 0301 	eor.w	r3, r3, #1
    1ee4:	b2db      	uxtb	r3, r3
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d002      	beq.n	1ef0 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    1eea:	f06f 030c 	mvn.w	r3, #12
    1eee:	e074      	b.n	1fda <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    1ef0:	2100      	movs	r1, #0
    1ef2:	6878      	ldr	r0, [r7, #4]
    1ef4:	4b3c      	ldr	r3, [pc, #240]	; (1fe8 <ext_irq_register+0x154>)
    1ef6:	4798      	blx	r3
    1ef8:	4603      	mov	r3, r0
    1efa:	e06e      	b.n	1fda <ext_irq_register+0x146>
	}

	if (!found) {
    1efc:	7d7b      	ldrb	r3, [r7, #21]
    1efe:	f083 0301 	eor.w	r3, r3, #1
    1f02:	b2db      	uxtb	r3, r3
    1f04:	2b00      	cmp	r3, #0
    1f06:	d05a      	beq.n	1fbe <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1f08:	2300      	movs	r3, #0
    1f0a:	75fb      	strb	r3, [r7, #23]
    1f0c:	e016      	b.n	1f3c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    1f0e:	7dfb      	ldrb	r3, [r7, #23]
    1f10:	4a34      	ldr	r2, [pc, #208]	; (1fe4 <ext_irq_register+0x150>)
    1f12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d10d      	bne.n	1f36 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    1f1a:	7dfb      	ldrb	r3, [r7, #23]
    1f1c:	4931      	ldr	r1, [pc, #196]	; (1fe4 <ext_irq_register+0x150>)
    1f1e:	683a      	ldr	r2, [r7, #0]
    1f20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    1f24:	7dfb      	ldrb	r3, [r7, #23]
    1f26:	4a2f      	ldr	r2, [pc, #188]	; (1fe4 <ext_irq_register+0x150>)
    1f28:	00db      	lsls	r3, r3, #3
    1f2a:	4413      	add	r3, r2
    1f2c:	687a      	ldr	r2, [r7, #4]
    1f2e:	605a      	str	r2, [r3, #4]
				found           = true;
    1f30:	2301      	movs	r3, #1
    1f32:	757b      	strb	r3, [r7, #21]
				break;
    1f34:	e005      	b.n	1f42 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1f36:	7dfb      	ldrb	r3, [r7, #23]
    1f38:	3301      	adds	r3, #1
    1f3a:	75fb      	strb	r3, [r7, #23]
    1f3c:	7dfb      	ldrb	r3, [r7, #23]
    1f3e:	2b08      	cmp	r3, #8
    1f40:	d9e5      	bls.n	1f0e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1f42:	e036      	b.n	1fb2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1f44:	7dfb      	ldrb	r3, [r7, #23]
    1f46:	4a27      	ldr	r2, [pc, #156]	; (1fe4 <ext_irq_register+0x150>)
    1f48:	00db      	lsls	r3, r3, #3
    1f4a:	4413      	add	r3, r2
    1f4c:	685a      	ldr	r2, [r3, #4]
    1f4e:	7dbb      	ldrb	r3, [r7, #22]
    1f50:	4924      	ldr	r1, [pc, #144]	; (1fe4 <ext_irq_register+0x150>)
    1f52:	00db      	lsls	r3, r3, #3
    1f54:	440b      	add	r3, r1
    1f56:	685b      	ldr	r3, [r3, #4]
    1f58:	429a      	cmp	r2, r3
    1f5a:	d227      	bcs.n	1fac <ext_irq_register+0x118>
    1f5c:	7dbb      	ldrb	r3, [r7, #22]
    1f5e:	4a21      	ldr	r2, [pc, #132]	; (1fe4 <ext_irq_register+0x150>)
    1f60:	00db      	lsls	r3, r3, #3
    1f62:	4413      	add	r3, r2
    1f64:	685b      	ldr	r3, [r3, #4]
    1f66:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f6a:	d01f      	beq.n	1fac <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    1f6c:	7dbb      	ldrb	r3, [r7, #22]
    1f6e:	491d      	ldr	r1, [pc, #116]	; (1fe4 <ext_irq_register+0x150>)
    1f70:	f107 020c 	add.w	r2, r7, #12
    1f74:	00db      	lsls	r3, r3, #3
    1f76:	440b      	add	r3, r1
    1f78:	e893 0003 	ldmia.w	r3, {r0, r1}
    1f7c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1f80:	7dbb      	ldrb	r3, [r7, #22]
    1f82:	7dfa      	ldrb	r2, [r7, #23]
    1f84:	4817      	ldr	r0, [pc, #92]	; (1fe4 <ext_irq_register+0x150>)
    1f86:	4917      	ldr	r1, [pc, #92]	; (1fe4 <ext_irq_register+0x150>)
    1f88:	00db      	lsls	r3, r3, #3
    1f8a:	4403      	add	r3, r0
    1f8c:	00d2      	lsls	r2, r2, #3
    1f8e:	440a      	add	r2, r1
    1f90:	e892 0003 	ldmia.w	r2, {r0, r1}
    1f94:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    1f98:	7dfb      	ldrb	r3, [r7, #23]
    1f9a:	4a12      	ldr	r2, [pc, #72]	; (1fe4 <ext_irq_register+0x150>)
    1f9c:	00db      	lsls	r3, r3, #3
    1f9e:	4413      	add	r3, r2
    1fa0:	f107 020c 	add.w	r2, r7, #12
    1fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
    1fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1fac:	7dbb      	ldrb	r3, [r7, #22]
    1fae:	3301      	adds	r3, #1
    1fb0:	75bb      	strb	r3, [r7, #22]
    1fb2:	7dbb      	ldrb	r3, [r7, #22]
    1fb4:	2b08      	cmp	r3, #8
    1fb6:	d802      	bhi.n	1fbe <ext_irq_register+0x12a>
    1fb8:	7dfb      	ldrb	r3, [r7, #23]
    1fba:	2b08      	cmp	r3, #8
    1fbc:	d9c2      	bls.n	1f44 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    1fbe:	7d7b      	ldrb	r3, [r7, #21]
    1fc0:	f083 0301 	eor.w	r3, r3, #1
    1fc4:	b2db      	uxtb	r3, r3
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d002      	beq.n	1fd0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    1fca:	f06f 030c 	mvn.w	r3, #12
    1fce:	e004      	b.n	1fda <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    1fd0:	2101      	movs	r1, #1
    1fd2:	6878      	ldr	r0, [r7, #4]
    1fd4:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <ext_irq_register+0x154>)
    1fd6:	4798      	blx	r3
    1fd8:	4603      	mov	r3, r0
}
    1fda:	4618      	mov	r0, r3
    1fdc:	3718      	adds	r7, #24
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	bf00      	nop
    1fe4:	200009b8 	.word	0x200009b8
    1fe8:	000044ad 	.word	0x000044ad

00001fec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1ff4:	2300      	movs	r3, #0
    1ff6:	73fb      	strb	r3, [r7, #15]
    1ff8:	2309      	movs	r3, #9
    1ffa:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1ffc:	e02a      	b.n	2054 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1ffe:	7bba      	ldrb	r2, [r7, #14]
    2000:	7bfb      	ldrb	r3, [r7, #15]
    2002:	4413      	add	r3, r2
    2004:	105b      	asrs	r3, r3, #1
    2006:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2008:	7b7b      	ldrb	r3, [r7, #13]
    200a:	2b08      	cmp	r3, #8
    200c:	d827      	bhi.n	205e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    200e:	7b7b      	ldrb	r3, [r7, #13]
    2010:	4a16      	ldr	r2, [pc, #88]	; (206c <process_ext_irq+0x80>)
    2012:	00db      	lsls	r3, r3, #3
    2014:	4413      	add	r3, r2
    2016:	685a      	ldr	r2, [r3, #4]
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	429a      	cmp	r2, r3
    201c:	d10b      	bne.n	2036 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    201e:	7b7b      	ldrb	r3, [r7, #13]
    2020:	4a12      	ldr	r2, [pc, #72]	; (206c <process_ext_irq+0x80>)
    2022:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2026:	2b00      	cmp	r3, #0
    2028:	d01b      	beq.n	2062 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    202a:	7b7b      	ldrb	r3, [r7, #13]
    202c:	4a0f      	ldr	r2, [pc, #60]	; (206c <process_ext_irq+0x80>)
    202e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2032:	4798      	blx	r3
			}
			return;
    2034:	e015      	b.n	2062 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2036:	7b7b      	ldrb	r3, [r7, #13]
    2038:	4a0c      	ldr	r2, [pc, #48]	; (206c <process_ext_irq+0x80>)
    203a:	00db      	lsls	r3, r3, #3
    203c:	4413      	add	r3, r2
    203e:	685a      	ldr	r2, [r3, #4]
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	429a      	cmp	r2, r3
    2044:	d203      	bcs.n	204e <process_ext_irq+0x62>
			lower = middle + 1;
    2046:	7b7b      	ldrb	r3, [r7, #13]
    2048:	3301      	adds	r3, #1
    204a:	73fb      	strb	r3, [r7, #15]
    204c:	e002      	b.n	2054 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    204e:	7b7b      	ldrb	r3, [r7, #13]
    2050:	3b01      	subs	r3, #1
    2052:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2054:	7bba      	ldrb	r2, [r7, #14]
    2056:	7bfb      	ldrb	r3, [r7, #15]
    2058:	429a      	cmp	r2, r3
    205a:	d2d0      	bcs.n	1ffe <process_ext_irq+0x12>
    205c:	e002      	b.n	2064 <process_ext_irq+0x78>
			return;
    205e:	bf00      	nop
    2060:	e000      	b.n	2064 <process_ext_irq+0x78>
			return;
    2062:	bf00      	nop
		}
	}
}
    2064:	3710      	adds	r7, #16
    2066:	46bd      	mov	sp, r7
    2068:	bd80      	pop	{r7, pc}
    206a:	bf00      	nop
    206c:	200009b8 	.word	0x200009b8

00002070 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2070:	b580      	push	{r7, lr}
    2072:	b08a      	sub	sp, #40	; 0x28
    2074:	af00      	add	r7, sp, #0
    2076:	60f8      	str	r0, [r7, #12]
    2078:	60b9      	str	r1, [r7, #8]
    207a:	4613      	mov	r3, r2
    207c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    207e:	68fb      	ldr	r3, [r7, #12]
    2080:	3b14      	subs	r3, #20
    2082:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2086:	8b9b      	ldrh	r3, [r3, #28]
    2088:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    208a:	88fb      	ldrh	r3, [r7, #6]
    208c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    208e:	f248 0301 	movw	r3, #32769	; 0x8001
    2092:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2094:	68bb      	ldr	r3, [r7, #8]
    2096:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    209a:	f107 0214 	add.w	r2, r7, #20
    209e:	4611      	mov	r1, r2
    20a0:	4618      	mov	r0, r3
    20a2:	4b06      	ldr	r3, [pc, #24]	; (20bc <i2c_m_sync_read+0x4c>)
    20a4:	4798      	blx	r3
    20a6:	6238      	str	r0, [r7, #32]

	if (ret) {
    20a8:	6a3b      	ldr	r3, [r7, #32]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d001      	beq.n	20b2 <i2c_m_sync_read+0x42>
		return ret;
    20ae:	6a3b      	ldr	r3, [r7, #32]
    20b0:	e000      	b.n	20b4 <i2c_m_sync_read+0x44>
	}

	return n;
    20b2:	88fb      	ldrh	r3, [r7, #6]
}
    20b4:	4618      	mov	r0, r3
    20b6:	3728      	adds	r7, #40	; 0x28
    20b8:	46bd      	mov	sp, r7
    20ba:	bd80      	pop	{r7, pc}
    20bc:	00006399 	.word	0x00006399

000020c0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b08a      	sub	sp, #40	; 0x28
    20c4:	af00      	add	r7, sp, #0
    20c6:	60f8      	str	r0, [r7, #12]
    20c8:	60b9      	str	r1, [r7, #8]
    20ca:	4613      	mov	r3, r2
    20cc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    20ce:	68fb      	ldr	r3, [r7, #12]
    20d0:	3b14      	subs	r3, #20
    20d2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    20d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20d6:	8b9b      	ldrh	r3, [r3, #28]
    20d8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    20da:	88fb      	ldrh	r3, [r7, #6]
    20dc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    20de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    20e2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    20e4:	68bb      	ldr	r3, [r7, #8]
    20e6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    20e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20ea:	f107 0214 	add.w	r2, r7, #20
    20ee:	4611      	mov	r1, r2
    20f0:	4618      	mov	r0, r3
    20f2:	4b06      	ldr	r3, [pc, #24]	; (210c <i2c_m_sync_write+0x4c>)
    20f4:	4798      	blx	r3
    20f6:	6238      	str	r0, [r7, #32]

	if (ret) {
    20f8:	6a3b      	ldr	r3, [r7, #32]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d001      	beq.n	2102 <i2c_m_sync_write+0x42>
		return ret;
    20fe:	6a3b      	ldr	r3, [r7, #32]
    2100:	e000      	b.n	2104 <i2c_m_sync_write+0x44>
	}

	return n;
    2102:	88fb      	ldrh	r3, [r7, #6]
}
    2104:	4618      	mov	r0, r3
    2106:	3728      	adds	r7, #40	; 0x28
    2108:	46bd      	mov	sp, r7
    210a:	bd80      	pop	{r7, pc}
    210c:	00006399 	.word	0x00006399

00002110 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2110:	b580      	push	{r7, lr}
    2112:	b084      	sub	sp, #16
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
    2118:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	2b00      	cmp	r3, #0
    211e:	bf14      	ite	ne
    2120:	2301      	movne	r3, #1
    2122:	2300      	moveq	r3, #0
    2124:	b2db      	uxtb	r3, r3
    2126:	225e      	movs	r2, #94	; 0x5e
    2128:	490c      	ldr	r1, [pc, #48]	; (215c <i2c_m_sync_init+0x4c>)
    212a:	4618      	mov	r0, r3
    212c:	4b0c      	ldr	r3, [pc, #48]	; (2160 <i2c_m_sync_init+0x50>)
    212e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	6839      	ldr	r1, [r7, #0]
    2134:	4618      	mov	r0, r3
    2136:	4b0b      	ldr	r3, [pc, #44]	; (2164 <i2c_m_sync_init+0x54>)
    2138:	4798      	blx	r3
    213a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	2b00      	cmp	r3, #0
    2140:	d001      	beq.n	2146 <i2c_m_sync_init+0x36>
		return init_status;
    2142:	68fb      	ldr	r3, [r7, #12]
    2144:	e006      	b.n	2154 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	4a07      	ldr	r2, [pc, #28]	; (2168 <i2c_m_sync_init+0x58>)
    214a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	4a07      	ldr	r2, [pc, #28]	; (216c <i2c_m_sync_init+0x5c>)
    2150:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2152:	2300      	movs	r3, #0
}
    2154:	4618      	mov	r0, r3
    2156:	3710      	adds	r7, #16
    2158:	46bd      	mov	sp, r7
    215a:	bd80      	pop	{r7, pc}
    215c:	00011148 	.word	0x00011148
    2160:	0000337d 	.word	0x0000337d
    2164:	00006195 	.word	0x00006195
    2168:	00002071 	.word	0x00002071
    216c:	000020c1 	.word	0x000020c1

00002170 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2170:	b580      	push	{r7, lr}
    2172:	b082      	sub	sp, #8
    2174:	af00      	add	r7, sp, #0
    2176:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	4618      	mov	r0, r3
    217c:	4b03      	ldr	r3, [pc, #12]	; (218c <i2c_m_sync_enable+0x1c>)
    217e:	4798      	blx	r3
    2180:	4603      	mov	r3, r0
}
    2182:	4618      	mov	r0, r3
    2184:	3708      	adds	r7, #8
    2186:	46bd      	mov	sp, r7
    2188:	bd80      	pop	{r7, pc}
    218a:	bf00      	nop
    218c:	000061dd 	.word	0x000061dd

00002190 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2190:	b480      	push	{r7}
    2192:	b085      	sub	sp, #20
    2194:	af00      	add	r7, sp, #0
    2196:	60f8      	str	r0, [r7, #12]
    2198:	460b      	mov	r3, r1
    219a:	607a      	str	r2, [r7, #4]
    219c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    219e:	897b      	ldrh	r3, [r7, #10]
    21a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    21a4:	b21a      	sxth	r2, r3
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	b21b      	sxth	r3, r3
    21aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    21ae:	b21b      	sxth	r3, r3
    21b0:	4313      	orrs	r3, r2
    21b2:	b21b      	sxth	r3, r3
    21b4:	b29a      	uxth	r2, r3
    21b6:	68fb      	ldr	r3, [r7, #12]
    21b8:	839a      	strh	r2, [r3, #28]
    21ba:	68fb      	ldr	r3, [r7, #12]
    21bc:	8b9b      	ldrh	r3, [r3, #28]
}
    21be:	4618      	mov	r0, r3
    21c0:	3714      	adds	r7, #20
    21c2:	46bd      	mov	sp, r7
    21c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    21c8:	4770      	bx	lr

000021ca <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    21ca:	b480      	push	{r7}
    21cc:	b083      	sub	sp, #12
    21ce:	af00      	add	r7, sp, #0
    21d0:	6078      	str	r0, [r7, #4]
    21d2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	f103 0214 	add.w	r2, r3, #20
    21da:	683b      	ldr	r3, [r7, #0]
    21dc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    21de:	2300      	movs	r3, #0
}
    21e0:	4618      	mov	r0, r3
    21e2:	370c      	adds	r7, #12
    21e4:	46bd      	mov	sp, r7
    21e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ea:	4770      	bx	lr

000021ec <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	b084      	sub	sp, #16
    21f0:	af00      	add	r7, sp, #0
    21f2:	60f8      	str	r0, [r7, #12]
    21f4:	60b9      	str	r1, [r7, #8]
    21f6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    21f8:	68fb      	ldr	r3, [r7, #12]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d004      	beq.n	2208 <pwm_init+0x1c>
    21fe:	68bb      	ldr	r3, [r7, #8]
    2200:	2b00      	cmp	r3, #0
    2202:	d001      	beq.n	2208 <pwm_init+0x1c>
    2204:	2301      	movs	r3, #1
    2206:	e000      	b.n	220a <pwm_init+0x1e>
    2208:	2300      	movs	r3, #0
    220a:	f003 0301 	and.w	r3, r3, #1
    220e:	b2db      	uxtb	r3, r3
    2210:	2233      	movs	r2, #51	; 0x33
    2212:	490a      	ldr	r1, [pc, #40]	; (223c <pwm_init+0x50>)
    2214:	4618      	mov	r0, r3
    2216:	4b0a      	ldr	r3, [pc, #40]	; (2240 <pwm_init+0x54>)
    2218:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    221a:	68fb      	ldr	r3, [r7, #12]
    221c:	68b9      	ldr	r1, [r7, #8]
    221e:	4618      	mov	r0, r3
    2220:	4b08      	ldr	r3, [pc, #32]	; (2244 <pwm_init+0x58>)
    2222:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2224:	68fb      	ldr	r3, [r7, #12]
    2226:	4a08      	ldr	r2, [pc, #32]	; (2248 <pwm_init+0x5c>)
    2228:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    222a:	68fb      	ldr	r3, [r7, #12]
    222c:	4a07      	ldr	r2, [pc, #28]	; (224c <pwm_init+0x60>)
    222e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2230:	2300      	movs	r3, #0
}
    2232:	4618      	mov	r0, r3
    2234:	3710      	adds	r7, #16
    2236:	46bd      	mov	sp, r7
    2238:	bd80      	pop	{r7, pc}
    223a:	bf00      	nop
    223c:	00011164 	.word	0x00011164
    2240:	0000337d 	.word	0x0000337d
    2244:	00007959 	.word	0x00007959
    2248:	00002251 	.word	0x00002251
    224c:	00002275 	.word	0x00002275

00002250 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2250:	b580      	push	{r7, lr}
    2252:	b084      	sub	sp, #16
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    225c:	68fb      	ldr	r3, [r7, #12]
    225e:	695b      	ldr	r3, [r3, #20]
    2260:	2b00      	cmp	r3, #0
    2262:	d003      	beq.n	226c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2264:	68fb      	ldr	r3, [r7, #12]
    2266:	695b      	ldr	r3, [r3, #20]
    2268:	68f8      	ldr	r0, [r7, #12]
    226a:	4798      	blx	r3
	}
}
    226c:	bf00      	nop
    226e:	3710      	adds	r7, #16
    2270:	46bd      	mov	sp, r7
    2272:	bd80      	pop	{r7, pc}

00002274 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2274:	b580      	push	{r7, lr}
    2276:	b084      	sub	sp, #16
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2280:	68fb      	ldr	r3, [r7, #12]
    2282:	699b      	ldr	r3, [r3, #24]
    2284:	2b00      	cmp	r3, #0
    2286:	d003      	beq.n	2290 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2288:	68fb      	ldr	r3, [r7, #12]
    228a:	699b      	ldr	r3, [r3, #24]
    228c:	68f8      	ldr	r0, [r7, #12]
    228e:	4798      	blx	r3
	}
}
    2290:	bf00      	nop
    2292:	3710      	adds	r7, #16
    2294:	46bd      	mov	sp, r7
    2296:	bd80      	pop	{r7, pc}

00002298 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
    22a0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	2b00      	cmp	r3, #0
    22a6:	d004      	beq.n	22b2 <qspi_sync_init+0x1a>
    22a8:	683b      	ldr	r3, [r7, #0]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d001      	beq.n	22b2 <qspi_sync_init+0x1a>
    22ae:	2301      	movs	r3, #1
    22b0:	e000      	b.n	22b4 <qspi_sync_init+0x1c>
    22b2:	2300      	movs	r3, #0
    22b4:	f003 0301 	and.w	r3, r3, #1
    22b8:	b2db      	uxtb	r3, r3
    22ba:	2231      	movs	r2, #49	; 0x31
    22bc:	4906      	ldr	r1, [pc, #24]	; (22d8 <qspi_sync_init+0x40>)
    22be:	4618      	mov	r0, r3
    22c0:	4b06      	ldr	r3, [pc, #24]	; (22dc <qspi_sync_init+0x44>)
    22c2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	6839      	ldr	r1, [r7, #0]
    22c8:	4618      	mov	r0, r3
    22ca:	4b05      	ldr	r3, [pc, #20]	; (22e0 <qspi_sync_init+0x48>)
    22cc:	4798      	blx	r3
    22ce:	4603      	mov	r3, r0
}
    22d0:	4618      	mov	r0, r3
    22d2:	3708      	adds	r7, #8
    22d4:	46bd      	mov	sp, r7
    22d6:	bd80      	pop	{r7, pc}
    22d8:	0001117c 	.word	0x0001117c
    22dc:	0000337d 	.word	0x0000337d
    22e0:	00005375 	.word	0x00005375

000022e4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    22e4:	b580      	push	{r7, lr}
    22e6:	b082      	sub	sp, #8
    22e8:	af00      	add	r7, sp, #0
    22ea:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	2b00      	cmp	r3, #0
    22f0:	bf14      	ite	ne
    22f2:	2301      	movne	r3, #1
    22f4:	2300      	moveq	r3, #0
    22f6:	b2db      	uxtb	r3, r3
    22f8:	223f      	movs	r2, #63	; 0x3f
    22fa:	4906      	ldr	r1, [pc, #24]	; (2314 <qspi_sync_enable+0x30>)
    22fc:	4618      	mov	r0, r3
    22fe:	4b06      	ldr	r3, [pc, #24]	; (2318 <qspi_sync_enable+0x34>)
    2300:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2302:	687b      	ldr	r3, [r7, #4]
    2304:	4618      	mov	r0, r3
    2306:	4b05      	ldr	r3, [pc, #20]	; (231c <qspi_sync_enable+0x38>)
    2308:	4798      	blx	r3
    230a:	4603      	mov	r3, r0
}
    230c:	4618      	mov	r0, r3
    230e:	3708      	adds	r7, #8
    2310:	46bd      	mov	sp, r7
    2312:	bd80      	pop	{r7, pc}
    2314:	0001117c 	.word	0x0001117c
    2318:	0000337d 	.word	0x0000337d
    231c:	000053e9 	.word	0x000053e9

00002320 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2320:	b580      	push	{r7, lr}
    2322:	b082      	sub	sp, #8
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	2b00      	cmp	r3, #0
    232c:	bf14      	ite	ne
    232e:	2301      	movne	r3, #1
    2330:	2300      	moveq	r3, #0
    2332:	b2db      	uxtb	r3, r3
    2334:	2246      	movs	r2, #70	; 0x46
    2336:	4906      	ldr	r1, [pc, #24]	; (2350 <qspi_sync_disable+0x30>)
    2338:	4618      	mov	r0, r3
    233a:	4b06      	ldr	r3, [pc, #24]	; (2354 <qspi_sync_disable+0x34>)
    233c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	4618      	mov	r0, r3
    2342:	4b05      	ldr	r3, [pc, #20]	; (2358 <qspi_sync_disable+0x38>)
    2344:	4798      	blx	r3
    2346:	4603      	mov	r3, r0
}
    2348:	4618      	mov	r0, r3
    234a:	3708      	adds	r7, #8
    234c:	46bd      	mov	sp, r7
    234e:	bd80      	pop	{r7, pc}
    2350:	0001117c 	.word	0x0001117c
    2354:	0000337d 	.word	0x0000337d
    2358:	0000540d 	.word	0x0000540d

0000235c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    235c:	b580      	push	{r7, lr}
    235e:	b082      	sub	sp, #8
    2360:	af00      	add	r7, sp, #0
    2362:	6078      	str	r0, [r7, #4]
    2364:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	2b00      	cmp	r3, #0
    236a:	d004      	beq.n	2376 <qspi_sync_serial_run_command+0x1a>
    236c:	683b      	ldr	r3, [r7, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	d001      	beq.n	2376 <qspi_sync_serial_run_command+0x1a>
    2372:	2301      	movs	r3, #1
    2374:	e000      	b.n	2378 <qspi_sync_serial_run_command+0x1c>
    2376:	2300      	movs	r3, #0
    2378:	f003 0301 	and.w	r3, r3, #1
    237c:	b2db      	uxtb	r3, r3
    237e:	224d      	movs	r2, #77	; 0x4d
    2380:	4906      	ldr	r1, [pc, #24]	; (239c <qspi_sync_serial_run_command+0x40>)
    2382:	4618      	mov	r0, r3
    2384:	4b06      	ldr	r3, [pc, #24]	; (23a0 <qspi_sync_serial_run_command+0x44>)
    2386:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	6839      	ldr	r1, [r7, #0]
    238c:	4618      	mov	r0, r3
    238e:	4b05      	ldr	r3, [pc, #20]	; (23a4 <qspi_sync_serial_run_command+0x48>)
    2390:	4798      	blx	r3
    2392:	4603      	mov	r3, r0
}
    2394:	4618      	mov	r0, r3
    2396:	3708      	adds	r7, #8
    2398:	46bd      	mov	sp, r7
    239a:	bd80      	pop	{r7, pc}
    239c:	0001117c 	.word	0x0001117c
    23a0:	0000337d 	.word	0x0000337d
    23a4:	00005559 	.word	0x00005559

000023a8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    23a8:	b580      	push	{r7, lr}
    23aa:	b084      	sub	sp, #16
    23ac:	af00      	add	r7, sp, #0
    23ae:	6078      	str	r0, [r7, #4]
    23b0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    23b2:	2300      	movs	r3, #0
    23b4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d004      	beq.n	23c6 <spi_m_sync_init+0x1e>
    23bc:	683b      	ldr	r3, [r7, #0]
    23be:	2b00      	cmp	r3, #0
    23c0:	d001      	beq.n	23c6 <spi_m_sync_init+0x1e>
    23c2:	2301      	movs	r3, #1
    23c4:	e000      	b.n	23c8 <spi_m_sync_init+0x20>
    23c6:	2300      	movs	r3, #0
    23c8:	f003 0301 	and.w	r3, r3, #1
    23cc:	b2db      	uxtb	r3, r3
    23ce:	2240      	movs	r2, #64	; 0x40
    23d0:	4910      	ldr	r1, [pc, #64]	; (2414 <spi_m_sync_init+0x6c>)
    23d2:	4618      	mov	r0, r3
    23d4:	4b10      	ldr	r3, [pc, #64]	; (2418 <spi_m_sync_init+0x70>)
    23d6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	683a      	ldr	r2, [r7, #0]
    23dc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	3304      	adds	r3, #4
    23e2:	6839      	ldr	r1, [r7, #0]
    23e4:	4618      	mov	r0, r3
    23e6:	4b0d      	ldr	r3, [pc, #52]	; (241c <spi_m_sync_init+0x74>)
    23e8:	4798      	blx	r3
    23ea:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    23ec:	68fb      	ldr	r3, [r7, #12]
    23ee:	2b00      	cmp	r3, #0
    23f0:	da01      	bge.n	23f6 <spi_m_sync_init+0x4e>
		return rc;
    23f2:	68fb      	ldr	r3, [r7, #12]
    23f4:	e00a      	b.n	240c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    23fc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	4a07      	ldr	r2, [pc, #28]	; (2420 <spi_m_sync_init+0x78>)
    2402:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	4a07      	ldr	r2, [pc, #28]	; (2424 <spi_m_sync_init+0x7c>)
    2408:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    240a:	2300      	movs	r3, #0
}
    240c:	4618      	mov	r0, r3
    240e:	3710      	adds	r7, #16
    2410:	46bd      	mov	sp, r7
    2412:	bd80      	pop	{r7, pc}
    2414:	00011198 	.word	0x00011198
    2418:	0000337d 	.word	0x0000337d
    241c:	0000682d 	.word	0x0000682d
    2420:	00002429 	.word	0x00002429
    2424:	00002481 	.word	0x00002481

00002428 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2428:	b580      	push	{r7, lr}
    242a:	b088      	sub	sp, #32
    242c:	af00      	add	r7, sp, #0
    242e:	60f8      	str	r0, [r7, #12]
    2430:	60b9      	str	r1, [r7, #8]
    2432:	4613      	mov	r3, r2
    2434:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2436:	68fb      	ldr	r3, [r7, #12]
    2438:	2b00      	cmp	r3, #0
    243a:	bf14      	ite	ne
    243c:	2301      	movne	r3, #1
    243e:	2300      	moveq	r3, #0
    2440:	b2db      	uxtb	r3, r3
    2442:	2287      	movs	r2, #135	; 0x87
    2444:	490b      	ldr	r1, [pc, #44]	; (2474 <_spi_m_sync_io_read+0x4c>)
    2446:	4618      	mov	r0, r3
    2448:	4b0b      	ldr	r3, [pc, #44]	; (2478 <_spi_m_sync_io_read+0x50>)
    244a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    244c:	68fb      	ldr	r3, [r7, #12]
    244e:	3b0c      	subs	r3, #12
    2450:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2452:	68bb      	ldr	r3, [r7, #8]
    2454:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2456:	2300      	movs	r3, #0
    2458:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    245a:	88fb      	ldrh	r3, [r7, #6]
    245c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    245e:	f107 0310 	add.w	r3, r7, #16
    2462:	4619      	mov	r1, r3
    2464:	69f8      	ldr	r0, [r7, #28]
    2466:	4b05      	ldr	r3, [pc, #20]	; (247c <_spi_m_sync_io_read+0x54>)
    2468:	4798      	blx	r3
    246a:	4603      	mov	r3, r0
}
    246c:	4618      	mov	r0, r3
    246e:	3720      	adds	r7, #32
    2470:	46bd      	mov	sp, r7
    2472:	bd80      	pop	{r7, pc}
    2474:	00011198 	.word	0x00011198
    2478:	0000337d 	.word	0x0000337d
    247c:	000024d9 	.word	0x000024d9

00002480 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2480:	b580      	push	{r7, lr}
    2482:	b088      	sub	sp, #32
    2484:	af00      	add	r7, sp, #0
    2486:	60f8      	str	r0, [r7, #12]
    2488:	60b9      	str	r1, [r7, #8]
    248a:	4613      	mov	r3, r2
    248c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    248e:	68fb      	ldr	r3, [r7, #12]
    2490:	2b00      	cmp	r3, #0
    2492:	bf14      	ite	ne
    2494:	2301      	movne	r3, #1
    2496:	2300      	moveq	r3, #0
    2498:	b2db      	uxtb	r3, r3
    249a:	22a3      	movs	r2, #163	; 0xa3
    249c:	490b      	ldr	r1, [pc, #44]	; (24cc <_spi_m_sync_io_write+0x4c>)
    249e:	4618      	mov	r0, r3
    24a0:	4b0b      	ldr	r3, [pc, #44]	; (24d0 <_spi_m_sync_io_write+0x50>)
    24a2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	3b0c      	subs	r3, #12
    24a8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    24aa:	2300      	movs	r3, #0
    24ac:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    24ae:	68bb      	ldr	r3, [r7, #8]
    24b0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    24b2:	88fb      	ldrh	r3, [r7, #6]
    24b4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    24b6:	f107 0310 	add.w	r3, r7, #16
    24ba:	4619      	mov	r1, r3
    24bc:	69f8      	ldr	r0, [r7, #28]
    24be:	4b05      	ldr	r3, [pc, #20]	; (24d4 <_spi_m_sync_io_write+0x54>)
    24c0:	4798      	blx	r3
    24c2:	4603      	mov	r3, r0
}
    24c4:	4618      	mov	r0, r3
    24c6:	3720      	adds	r7, #32
    24c8:	46bd      	mov	sp, r7
    24ca:	bd80      	pop	{r7, pc}
    24cc:	00011198 	.word	0x00011198
    24d0:	0000337d 	.word	0x0000337d
    24d4:	000024d9 	.word	0x000024d9

000024d8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    24d8:	b580      	push	{r7, lr}
    24da:	b086      	sub	sp, #24
    24dc:	af00      	add	r7, sp, #0
    24de:	6078      	str	r0, [r7, #4]
    24e0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    24e2:	687b      	ldr	r3, [r7, #4]
    24e4:	2b00      	cmp	r3, #0
    24e6:	d004      	beq.n	24f2 <spi_m_sync_transfer+0x1a>
    24e8:	683b      	ldr	r3, [r7, #0]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d001      	beq.n	24f2 <spi_m_sync_transfer+0x1a>
    24ee:	2301      	movs	r3, #1
    24f0:	e000      	b.n	24f4 <spi_m_sync_transfer+0x1c>
    24f2:	2300      	movs	r3, #0
    24f4:	f003 0301 	and.w	r3, r3, #1
    24f8:	b2db      	uxtb	r3, r3
    24fa:	22b3      	movs	r2, #179	; 0xb3
    24fc:	490c      	ldr	r1, [pc, #48]	; (2530 <spi_m_sync_transfer+0x58>)
    24fe:	4618      	mov	r0, r3
    2500:	4b0c      	ldr	r3, [pc, #48]	; (2534 <spi_m_sync_transfer+0x5c>)
    2502:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2504:	683b      	ldr	r3, [r7, #0]
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    250a:	683b      	ldr	r3, [r7, #0]
    250c:	685b      	ldr	r3, [r3, #4]
    250e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2510:	683b      	ldr	r3, [r7, #0]
    2512:	689b      	ldr	r3, [r3, #8]
    2514:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	3304      	adds	r3, #4
    251a:	f107 020c 	add.w	r2, r7, #12
    251e:	4611      	mov	r1, r2
    2520:	4618      	mov	r0, r3
    2522:	4b05      	ldr	r3, [pc, #20]	; (2538 <spi_m_sync_transfer+0x60>)
    2524:	4798      	blx	r3
    2526:	4603      	mov	r3, r0
}
    2528:	4618      	mov	r0, r3
    252a:	3718      	adds	r7, #24
    252c:	46bd      	mov	sp, r7
    252e:	bd80      	pop	{r7, pc}
    2530:	00011198 	.word	0x00011198
    2534:	0000337d 	.word	0x0000337d
    2538:	00006a8d 	.word	0x00006a8d

0000253c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    253c:	b480      	push	{r7}
    253e:	b083      	sub	sp, #12
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	681b      	ldr	r3, [r3, #0]
}
    2548:	4618      	mov	r0, r3
    254a:	370c      	adds	r7, #12
    254c:	46bd      	mov	sp, r7
    254e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2552:	4770      	bx	lr

00002554 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2554:	b480      	push	{r7}
    2556:	b083      	sub	sp, #12
    2558:	af00      	add	r7, sp, #0
    255a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	2b00      	cmp	r3, #0
    2560:	d002      	beq.n	2568 <list_get_next_element+0x14>
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	681b      	ldr	r3, [r3, #0]
    2566:	e000      	b.n	256a <list_get_next_element+0x16>
    2568:	2300      	movs	r3, #0
}
    256a:	4618      	mov	r0, r3
    256c:	370c      	adds	r7, #12
    256e:	46bd      	mov	sp, r7
    2570:	f85d 7b04 	ldr.w	r7, [sp], #4
    2574:	4770      	bx	lr
	...

00002578 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2578:	b580      	push	{r7, lr}
    257a:	b084      	sub	sp, #16
    257c:	af00      	add	r7, sp, #0
    257e:	60f8      	str	r0, [r7, #12]
    2580:	60b9      	str	r1, [r7, #8]
    2582:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2584:	68fb      	ldr	r3, [r7, #12]
    2586:	2b00      	cmp	r3, #0
    2588:	d007      	beq.n	259a <timer_init+0x22>
    258a:	68bb      	ldr	r3, [r7, #8]
    258c:	2b00      	cmp	r3, #0
    258e:	d004      	beq.n	259a <timer_init+0x22>
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	2b00      	cmp	r3, #0
    2594:	d001      	beq.n	259a <timer_init+0x22>
    2596:	2301      	movs	r3, #1
    2598:	e000      	b.n	259c <timer_init+0x24>
    259a:	2300      	movs	r3, #0
    259c:	f003 0301 	and.w	r3, r3, #1
    25a0:	b2db      	uxtb	r3, r3
    25a2:	223b      	movs	r2, #59	; 0x3b
    25a4:	490c      	ldr	r1, [pc, #48]	; (25d8 <timer_init+0x60>)
    25a6:	4618      	mov	r0, r3
    25a8:	4b0c      	ldr	r3, [pc, #48]	; (25dc <timer_init+0x64>)
    25aa:	4798      	blx	r3
	descr->func = func;
    25ac:	68fb      	ldr	r3, [r7, #12]
    25ae:	687a      	ldr	r2, [r7, #4]
    25b0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    25b2:	68fb      	ldr	r3, [r7, #12]
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	68fa      	ldr	r2, [r7, #12]
    25ba:	3204      	adds	r2, #4
    25bc:	68b9      	ldr	r1, [r7, #8]
    25be:	4610      	mov	r0, r2
    25c0:	4798      	blx	r3
	descr->time                           = 0;
    25c2:	68fb      	ldr	r3, [r7, #12]
    25c4:	2200      	movs	r2, #0
    25c6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	4a05      	ldr	r2, [pc, #20]	; (25e0 <timer_init+0x68>)
    25cc:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    25ce:	2300      	movs	r3, #0
}
    25d0:	4618      	mov	r0, r3
    25d2:	3710      	adds	r7, #16
    25d4:	46bd      	mov	sp, r7
    25d6:	bd80      	pop	{r7, pc}
    25d8:	000111b4 	.word	0x000111b4
    25dc:	0000337d 	.word	0x0000337d
    25e0:	00002969 	.word	0x00002969

000025e4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d005      	beq.n	25fe <timer_start+0x1a>
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d001      	beq.n	25fe <timer_start+0x1a>
    25fa:	2301      	movs	r3, #1
    25fc:	e000      	b.n	2600 <timer_start+0x1c>
    25fe:	2300      	movs	r3, #0
    2600:	f003 0301 	and.w	r3, r3, #1
    2604:	b2db      	uxtb	r3, r3
    2606:	2254      	movs	r2, #84	; 0x54
    2608:	490e      	ldr	r1, [pc, #56]	; (2644 <timer_start+0x60>)
    260a:	4618      	mov	r0, r3
    260c:	4b0e      	ldr	r3, [pc, #56]	; (2648 <timer_start+0x64>)
    260e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	699b      	ldr	r3, [r3, #24]
    2616:	687a      	ldr	r2, [r7, #4]
    2618:	3204      	adds	r2, #4
    261a:	4610      	mov	r0, r2
    261c:	4798      	blx	r3
    261e:	4603      	mov	r3, r0
    2620:	2b00      	cmp	r3, #0
    2622:	d002      	beq.n	262a <timer_start+0x46>
		return ERR_DENIED;
    2624:	f06f 0310 	mvn.w	r3, #16
    2628:	e007      	b.n	263a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	689b      	ldr	r3, [r3, #8]
    2630:	687a      	ldr	r2, [r7, #4]
    2632:	3204      	adds	r2, #4
    2634:	4610      	mov	r0, r2
    2636:	4798      	blx	r3

	return ERR_NONE;
    2638:	2300      	movs	r3, #0
}
    263a:	4618      	mov	r0, r3
    263c:	3708      	adds	r7, #8
    263e:	46bd      	mov	sp, r7
    2640:	bd80      	pop	{r7, pc}
    2642:	bf00      	nop
    2644:	000111b4 	.word	0x000111b4
    2648:	0000337d 	.word	0x0000337d

0000264c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    264c:	b580      	push	{r7, lr}
    264e:	b082      	sub	sp, #8
    2650:	af00      	add	r7, sp, #0
    2652:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	2b00      	cmp	r3, #0
    2658:	d005      	beq.n	2666 <timer_stop+0x1a>
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	2b00      	cmp	r3, #0
    2660:	d001      	beq.n	2666 <timer_stop+0x1a>
    2662:	2301      	movs	r3, #1
    2664:	e000      	b.n	2668 <timer_stop+0x1c>
    2666:	2300      	movs	r3, #0
    2668:	f003 0301 	and.w	r3, r3, #1
    266c:	b2db      	uxtb	r3, r3
    266e:	2262      	movs	r2, #98	; 0x62
    2670:	490f      	ldr	r1, [pc, #60]	; (26b0 <timer_stop+0x64>)
    2672:	4618      	mov	r0, r3
    2674:	4b0f      	ldr	r3, [pc, #60]	; (26b4 <timer_stop+0x68>)
    2676:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	681b      	ldr	r3, [r3, #0]
    267c:	699b      	ldr	r3, [r3, #24]
    267e:	687a      	ldr	r2, [r7, #4]
    2680:	3204      	adds	r2, #4
    2682:	4610      	mov	r0, r2
    2684:	4798      	blx	r3
    2686:	4603      	mov	r3, r0
    2688:	f083 0301 	eor.w	r3, r3, #1
    268c:	b2db      	uxtb	r3, r3
    268e:	2b00      	cmp	r3, #0
    2690:	d002      	beq.n	2698 <timer_stop+0x4c>
		return ERR_DENIED;
    2692:	f06f 0310 	mvn.w	r3, #16
    2696:	e007      	b.n	26a8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	68db      	ldr	r3, [r3, #12]
    269e:	687a      	ldr	r2, [r7, #4]
    26a0:	3204      	adds	r2, #4
    26a2:	4610      	mov	r0, r2
    26a4:	4798      	blx	r3

	return ERR_NONE;
    26a6:	2300      	movs	r3, #0
}
    26a8:	4618      	mov	r0, r3
    26aa:	3708      	adds	r7, #8
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}
    26b0:	000111b4 	.word	0x000111b4
    26b4:	0000337d 	.word	0x0000337d

000026b8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    26b8:	b580      	push	{r7, lr}
    26ba:	b084      	sub	sp, #16
    26bc:	af00      	add	r7, sp, #0
    26be:	6078      	str	r0, [r7, #4]
    26c0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	2b00      	cmp	r3, #0
    26c6:	d008      	beq.n	26da <timer_add_task+0x22>
    26c8:	683b      	ldr	r3, [r7, #0]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d005      	beq.n	26da <timer_add_task+0x22>
    26ce:	687b      	ldr	r3, [r7, #4]
    26d0:	681b      	ldr	r3, [r3, #0]
    26d2:	2b00      	cmp	r3, #0
    26d4:	d001      	beq.n	26da <timer_add_task+0x22>
    26d6:	2301      	movs	r3, #1
    26d8:	e000      	b.n	26dc <timer_add_task+0x24>
    26da:	2300      	movs	r3, #0
    26dc:	f003 0301 	and.w	r3, r3, #1
    26e0:	b2db      	uxtb	r3, r3
    26e2:	227b      	movs	r2, #123	; 0x7b
    26e4:	492f      	ldr	r1, [pc, #188]	; (27a4 <timer_add_task+0xec>)
    26e6:	4618      	mov	r0, r3
    26e8:	4b2f      	ldr	r3, [pc, #188]	; (27a8 <timer_add_task+0xf0>)
    26ea:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	7f1b      	ldrb	r3, [r3, #28]
    26f0:	b2db      	uxtb	r3, r3
    26f2:	f043 0301 	orr.w	r3, r3, #1
    26f6:	b2da      	uxtb	r2, r3
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	3318      	adds	r3, #24
    2700:	6839      	ldr	r1, [r7, #0]
    2702:	4618      	mov	r0, r3
    2704:	4b29      	ldr	r3, [pc, #164]	; (27ac <timer_add_task+0xf4>)
    2706:	4798      	blx	r3
    2708:	4603      	mov	r3, r0
    270a:	2b00      	cmp	r3, #0
    270c:	d00f      	beq.n	272e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	7f1b      	ldrb	r3, [r3, #28]
    2712:	b2db      	uxtb	r3, r3
    2714:	f023 0301 	bic.w	r3, r3, #1
    2718:	b2da      	uxtb	r2, r3
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    271e:	2280      	movs	r2, #128	; 0x80
    2720:	4920      	ldr	r1, [pc, #128]	; (27a4 <timer_add_task+0xec>)
    2722:	2000      	movs	r0, #0
    2724:	4b20      	ldr	r3, [pc, #128]	; (27a8 <timer_add_task+0xf0>)
    2726:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2728:	f06f 0311 	mvn.w	r3, #17
    272c:	e035      	b.n	279a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	695a      	ldr	r2, [r3, #20]
    2732:	683b      	ldr	r3, [r7, #0]
    2734:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	f103 0018 	add.w	r0, r3, #24
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	695b      	ldr	r3, [r3, #20]
    2740:	461a      	mov	r2, r3
    2742:	6839      	ldr	r1, [r7, #0]
    2744:	4b1a      	ldr	r3, [pc, #104]	; (27b0 <timer_add_task+0xf8>)
    2746:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	7f1b      	ldrb	r3, [r3, #28]
    274c:	b2db      	uxtb	r3, r3
    274e:	f023 0301 	bic.w	r3, r3, #1
    2752:	b2da      	uxtb	r2, r3
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	7f1b      	ldrb	r3, [r3, #28]
    275c:	b2db      	uxtb	r3, r3
    275e:	f003 0302 	and.w	r3, r3, #2
    2762:	2b00      	cmp	r3, #0
    2764:	d018      	beq.n	2798 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2766:	f107 030c 	add.w	r3, r7, #12
    276a:	4618      	mov	r0, r3
    276c:	4b11      	ldr	r3, [pc, #68]	; (27b4 <timer_add_task+0xfc>)
    276e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	7f1b      	ldrb	r3, [r3, #28]
    2774:	b2db      	uxtb	r3, r3
    2776:	f023 0302 	bic.w	r3, r3, #2
    277a:	b2da      	uxtb	r2, r3
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	681b      	ldr	r3, [r3, #0]
    2784:	69db      	ldr	r3, [r3, #28]
    2786:	687a      	ldr	r2, [r7, #4]
    2788:	3204      	adds	r2, #4
    278a:	4610      	mov	r0, r2
    278c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    278e:	f107 030c 	add.w	r3, r7, #12
    2792:	4618      	mov	r0, r3
    2794:	4b08      	ldr	r3, [pc, #32]	; (27b8 <timer_add_task+0x100>)
    2796:	4798      	blx	r3
	}

	return ERR_NONE;
    2798:	2300      	movs	r3, #0
}
    279a:	4618      	mov	r0, r3
    279c:	3710      	adds	r7, #16
    279e:	46bd      	mov	sp, r7
    27a0:	bd80      	pop	{r7, pc}
    27a2:	bf00      	nop
    27a4:	000111b4 	.word	0x000111b4
    27a8:	0000337d 	.word	0x0000337d
    27ac:	000033a5 	.word	0x000033a5
    27b0:	000028b9 	.word	0x000028b9
    27b4:	0000ae69 	.word	0x0000ae69
    27b8:	0000ae8f 	.word	0x0000ae8f

000027bc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b084      	sub	sp, #16
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
    27c4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d008      	beq.n	27de <timer_remove_task+0x22>
    27cc:	683b      	ldr	r3, [r7, #0]
    27ce:	2b00      	cmp	r3, #0
    27d0:	d005      	beq.n	27de <timer_remove_task+0x22>
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d001      	beq.n	27de <timer_remove_task+0x22>
    27da:	2301      	movs	r3, #1
    27dc:	e000      	b.n	27e0 <timer_remove_task+0x24>
    27de:	2300      	movs	r3, #0
    27e0:	f003 0301 	and.w	r3, r3, #1
    27e4:	b2db      	uxtb	r3, r3
    27e6:	2296      	movs	r2, #150	; 0x96
    27e8:	492d      	ldr	r1, [pc, #180]	; (28a0 <timer_remove_task+0xe4>)
    27ea:	4618      	mov	r0, r3
    27ec:	4b2d      	ldr	r3, [pc, #180]	; (28a4 <timer_remove_task+0xe8>)
    27ee:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    27f0:	687b      	ldr	r3, [r7, #4]
    27f2:	7f1b      	ldrb	r3, [r3, #28]
    27f4:	b2db      	uxtb	r3, r3
    27f6:	f043 0301 	orr.w	r3, r3, #1
    27fa:	b2da      	uxtb	r2, r3
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	3318      	adds	r3, #24
    2804:	6839      	ldr	r1, [r7, #0]
    2806:	4618      	mov	r0, r3
    2808:	4b27      	ldr	r3, [pc, #156]	; (28a8 <timer_remove_task+0xec>)
    280a:	4798      	blx	r3
    280c:	4603      	mov	r3, r0
    280e:	f083 0301 	eor.w	r3, r3, #1
    2812:	b2db      	uxtb	r3, r3
    2814:	2b00      	cmp	r3, #0
    2816:	d00f      	beq.n	2838 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	7f1b      	ldrb	r3, [r3, #28]
    281c:	b2db      	uxtb	r3, r3
    281e:	f023 0301 	bic.w	r3, r3, #1
    2822:	b2da      	uxtb	r2, r3
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2828:	229b      	movs	r2, #155	; 0x9b
    282a:	491d      	ldr	r1, [pc, #116]	; (28a0 <timer_remove_task+0xe4>)
    282c:	2000      	movs	r0, #0
    282e:	4b1d      	ldr	r3, [pc, #116]	; (28a4 <timer_remove_task+0xe8>)
    2830:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2832:	f06f 0309 	mvn.w	r3, #9
    2836:	e02e      	b.n	2896 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	3318      	adds	r3, #24
    283c:	6839      	ldr	r1, [r7, #0]
    283e:	4618      	mov	r0, r3
    2840:	4b1a      	ldr	r3, [pc, #104]	; (28ac <timer_remove_task+0xf0>)
    2842:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	7f1b      	ldrb	r3, [r3, #28]
    2848:	b2db      	uxtb	r3, r3
    284a:	f023 0301 	bic.w	r3, r3, #1
    284e:	b2da      	uxtb	r2, r3
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	7f1b      	ldrb	r3, [r3, #28]
    2858:	b2db      	uxtb	r3, r3
    285a:	f003 0302 	and.w	r3, r3, #2
    285e:	2b00      	cmp	r3, #0
    2860:	d018      	beq.n	2894 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2862:	f107 030c 	add.w	r3, r7, #12
    2866:	4618      	mov	r0, r3
    2868:	4b11      	ldr	r3, [pc, #68]	; (28b0 <timer_remove_task+0xf4>)
    286a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	7f1b      	ldrb	r3, [r3, #28]
    2870:	b2db      	uxtb	r3, r3
    2872:	f023 0302 	bic.w	r3, r3, #2
    2876:	b2da      	uxtb	r2, r3
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	69db      	ldr	r3, [r3, #28]
    2882:	687a      	ldr	r2, [r7, #4]
    2884:	3204      	adds	r2, #4
    2886:	4610      	mov	r0, r2
    2888:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    288a:	f107 030c 	add.w	r3, r7, #12
    288e:	4618      	mov	r0, r3
    2890:	4b08      	ldr	r3, [pc, #32]	; (28b4 <timer_remove_task+0xf8>)
    2892:	4798      	blx	r3
	}

	return ERR_NONE;
    2894:	2300      	movs	r3, #0
}
    2896:	4618      	mov	r0, r3
    2898:	3710      	adds	r7, #16
    289a:	46bd      	mov	sp, r7
    289c:	bd80      	pop	{r7, pc}
    289e:	bf00      	nop
    28a0:	000111b4 	.word	0x000111b4
    28a4:	0000337d 	.word	0x0000337d
    28a8:	000033a5 	.word	0x000033a5
    28ac:	00003507 	.word	0x00003507
    28b0:	0000ae69 	.word	0x0000ae69
    28b4:	0000ae8f 	.word	0x0000ae8f

000028b8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    28b8:	b580      	push	{r7, lr}
    28ba:	b088      	sub	sp, #32
    28bc:	af00      	add	r7, sp, #0
    28be:	60f8      	str	r0, [r7, #12]
    28c0:	60b9      	str	r1, [r7, #8]
    28c2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    28c4:	2300      	movs	r3, #0
    28c6:	61bb      	str	r3, [r7, #24]
    28c8:	68f8      	ldr	r0, [r7, #12]
    28ca:	4b23      	ldr	r3, [pc, #140]	; (2958 <timer_add_timer_task+0xa0>)
    28cc:	4798      	blx	r3
    28ce:	6138      	str	r0, [r7, #16]

	if (!head) {
    28d0:	693b      	ldr	r3, [r7, #16]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d104      	bne.n	28e0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    28d6:	68b9      	ldr	r1, [r7, #8]
    28d8:	68f8      	ldr	r0, [r7, #12]
    28da:	4b20      	ldr	r3, [pc, #128]	; (295c <timer_add_timer_task+0xa4>)
    28dc:	4798      	blx	r3
		return;
    28de:	e037      	b.n	2950 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    28e0:	693b      	ldr	r3, [r7, #16]
    28e2:	61fb      	str	r3, [r7, #28]
    28e4:	e022      	b.n	292c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    28e6:	69fb      	ldr	r3, [r7, #28]
    28e8:	685a      	ldr	r2, [r3, #4]
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	429a      	cmp	r2, r3
    28ee:	d808      	bhi.n	2902 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    28f0:	69fb      	ldr	r3, [r7, #28]
    28f2:	689a      	ldr	r2, [r3, #8]
    28f4:	69fb      	ldr	r3, [r7, #28]
    28f6:	6859      	ldr	r1, [r3, #4]
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	1acb      	subs	r3, r1, r3
    28fc:	4413      	add	r3, r2
    28fe:	617b      	str	r3, [r7, #20]
    2900:	e009      	b.n	2916 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2902:	69fb      	ldr	r3, [r7, #28]
    2904:	689a      	ldr	r2, [r3, #8]
    2906:	69fb      	ldr	r3, [r7, #28]
    2908:	685b      	ldr	r3, [r3, #4]
    290a:	441a      	add	r2, r3
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	425b      	negs	r3, r3
    2910:	4413      	add	r3, r2
    2912:	3301      	adds	r3, #1
    2914:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	689a      	ldr	r2, [r3, #8]
    291a:	697b      	ldr	r3, [r7, #20]
    291c:	429a      	cmp	r2, r3
    291e:	d909      	bls.n	2934 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2920:	69fb      	ldr	r3, [r7, #28]
    2922:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2924:	69f8      	ldr	r0, [r7, #28]
    2926:	4b0e      	ldr	r3, [pc, #56]	; (2960 <timer_add_timer_task+0xa8>)
    2928:	4798      	blx	r3
    292a:	61f8      	str	r0, [r7, #28]
    292c:	69fb      	ldr	r3, [r7, #28]
    292e:	2b00      	cmp	r3, #0
    2930:	d1d9      	bne.n	28e6 <timer_add_timer_task+0x2e>
    2932:	e000      	b.n	2936 <timer_add_timer_task+0x7e>
			break;
    2934:	bf00      	nop
	}

	if (it == head) {
    2936:	69fa      	ldr	r2, [r7, #28]
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	429a      	cmp	r2, r3
    293c:	d104      	bne.n	2948 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    293e:	68b9      	ldr	r1, [r7, #8]
    2940:	68f8      	ldr	r0, [r7, #12]
    2942:	4b06      	ldr	r3, [pc, #24]	; (295c <timer_add_timer_task+0xa4>)
    2944:	4798      	blx	r3
    2946:	e003      	b.n	2950 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2948:	68b9      	ldr	r1, [r7, #8]
    294a:	69b8      	ldr	r0, [r7, #24]
    294c:	4b05      	ldr	r3, [pc, #20]	; (2964 <timer_add_timer_task+0xac>)
    294e:	4798      	blx	r3
	}
}
    2950:	3720      	adds	r7, #32
    2952:	46bd      	mov	sp, r7
    2954:	bd80      	pop	{r7, pc}
    2956:	bf00      	nop
    2958:	0000253d 	.word	0x0000253d
    295c:	000033dd 	.word	0x000033dd
    2960:	00002555 	.word	0x00002555
    2964:	00003435 	.word	0x00003435

00002968 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2968:	b580      	push	{r7, lr}
    296a:	b086      	sub	sp, #24
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	3b04      	subs	r3, #4
    2974:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2976:	693b      	ldr	r3, [r7, #16]
    2978:	3318      	adds	r3, #24
    297a:	4618      	mov	r0, r3
    297c:	4b27      	ldr	r3, [pc, #156]	; (2a1c <timer_process_counted+0xb4>)
    297e:	4798      	blx	r3
    2980:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2982:	693b      	ldr	r3, [r7, #16]
    2984:	695b      	ldr	r3, [r3, #20]
    2986:	1c5a      	adds	r2, r3, #1
    2988:	693b      	ldr	r3, [r7, #16]
    298a:	615a      	str	r2, [r3, #20]
    298c:	693b      	ldr	r3, [r7, #16]
    298e:	695b      	ldr	r3, [r3, #20]
    2990:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2992:	693b      	ldr	r3, [r7, #16]
    2994:	7f1b      	ldrb	r3, [r3, #28]
    2996:	b2db      	uxtb	r3, r3
    2998:	f003 0301 	and.w	r3, r3, #1
    299c:	2b00      	cmp	r3, #0
    299e:	d106      	bne.n	29ae <timer_process_counted+0x46>
    29a0:	693b      	ldr	r3, [r7, #16]
    29a2:	7f1b      	ldrb	r3, [r3, #28]
    29a4:	b2db      	uxtb	r3, r3
    29a6:	f003 0302 	and.w	r3, r3, #2
    29aa:	2b00      	cmp	r3, #0
    29ac:	d027      	beq.n	29fe <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	7f1b      	ldrb	r3, [r3, #28]
    29b2:	b2db      	uxtb	r3, r3
    29b4:	f043 0302 	orr.w	r3, r3, #2
    29b8:	b2da      	uxtb	r2, r3
    29ba:	693b      	ldr	r3, [r7, #16]
    29bc:	771a      	strb	r2, [r3, #28]
		return;
    29be:	e029      	b.n	2a14 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    29c0:	697b      	ldr	r3, [r7, #20]
    29c2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    29c4:	693b      	ldr	r3, [r7, #16]
    29c6:	3318      	adds	r3, #24
    29c8:	4618      	mov	r0, r3
    29ca:	4b15      	ldr	r3, [pc, #84]	; (2a20 <timer_process_counted+0xb8>)
    29cc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    29ce:	68bb      	ldr	r3, [r7, #8]
    29d0:	7c1b      	ldrb	r3, [r3, #16]
    29d2:	2b01      	cmp	r3, #1
    29d4:	d109      	bne.n	29ea <timer_process_counted+0x82>
			tmp->time_label = time;
    29d6:	68bb      	ldr	r3, [r7, #8]
    29d8:	68fa      	ldr	r2, [r7, #12]
    29da:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    29dc:	693b      	ldr	r3, [r7, #16]
    29de:	3318      	adds	r3, #24
    29e0:	68fa      	ldr	r2, [r7, #12]
    29e2:	68b9      	ldr	r1, [r7, #8]
    29e4:	4618      	mov	r0, r3
    29e6:	4b0f      	ldr	r3, [pc, #60]	; (2a24 <timer_process_counted+0xbc>)
    29e8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    29ea:	693b      	ldr	r3, [r7, #16]
    29ec:	3318      	adds	r3, #24
    29ee:	4618      	mov	r0, r3
    29f0:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <timer_process_counted+0xb4>)
    29f2:	4798      	blx	r3
    29f4:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    29f6:	68bb      	ldr	r3, [r7, #8]
    29f8:	68db      	ldr	r3, [r3, #12]
    29fa:	68b8      	ldr	r0, [r7, #8]
    29fc:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    29fe:	697b      	ldr	r3, [r7, #20]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d007      	beq.n	2a14 <timer_process_counted+0xac>
    2a04:	697b      	ldr	r3, [r7, #20]
    2a06:	685b      	ldr	r3, [r3, #4]
    2a08:	68fa      	ldr	r2, [r7, #12]
    2a0a:	1ad2      	subs	r2, r2, r3
    2a0c:	697b      	ldr	r3, [r7, #20]
    2a0e:	689b      	ldr	r3, [r3, #8]
    2a10:	429a      	cmp	r2, r3
    2a12:	d2d5      	bcs.n	29c0 <timer_process_counted+0x58>
	}
}
    2a14:	3718      	adds	r7, #24
    2a16:	46bd      	mov	sp, r7
    2a18:	bd80      	pop	{r7, pc}
    2a1a:	bf00      	nop
    2a1c:	0000253d 	.word	0x0000253d
    2a20:	000034d5 	.word	0x000034d5
    2a24:	000028b9 	.word	0x000028b9

00002a28 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2a28:	b480      	push	{r7}
    2a2a:	b085      	sub	sp, #20
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	4603      	mov	r3, r0
    2a30:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a32:	2300      	movs	r3, #0
    2a34:	73fb      	strb	r3, [r7, #15]
    2a36:	e029      	b.n	2a8c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a3c:	4a19      	ldr	r2, [pc, #100]	; (2aa4 <_usb_d_find_ep+0x7c>)
    2a3e:	015b      	lsls	r3, r3, #5
    2a40:	4413      	add	r3, r2
    2a42:	3301      	adds	r3, #1
    2a44:	781b      	ldrb	r3, [r3, #0]
    2a46:	79fa      	ldrb	r2, [r7, #7]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d102      	bne.n	2a52 <_usb_d_find_ep+0x2a>
			return i;
    2a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a50:	e022      	b.n	2a98 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a56:	4a13      	ldr	r2, [pc, #76]	; (2aa4 <_usb_d_find_ep+0x7c>)
    2a58:	015b      	lsls	r3, r3, #5
    2a5a:	4413      	add	r3, r2
    2a5c:	781b      	ldrb	r3, [r3, #0]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d10e      	bne.n	2a80 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2a62:	79fb      	ldrb	r3, [r7, #7]
    2a64:	f003 030f 	and.w	r3, r3, #15
    2a68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a6c:	490d      	ldr	r1, [pc, #52]	; (2aa4 <_usb_d_find_ep+0x7c>)
    2a6e:	0152      	lsls	r2, r2, #5
    2a70:	440a      	add	r2, r1
    2a72:	3201      	adds	r2, #1
    2a74:	7812      	ldrb	r2, [r2, #0]
    2a76:	4293      	cmp	r3, r2
    2a78:	d102      	bne.n	2a80 <_usb_d_find_ep+0x58>
			return i;
    2a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a7e:	e00b      	b.n	2a98 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a84:	b2db      	uxtb	r3, r3
    2a86:	3301      	adds	r3, #1
    2a88:	b2db      	uxtb	r3, r3
    2a8a:	73fb      	strb	r3, [r7, #15]
    2a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a90:	2b03      	cmp	r3, #3
    2a92:	ddd1      	ble.n	2a38 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2a94:	f04f 33ff 	mov.w	r3, #4294967295
}
    2a98:	4618      	mov	r0, r3
    2a9a:	3714      	adds	r7, #20
    2a9c:	46bd      	mov	sp, r7
    2a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aa2:	4770      	bx	lr
    2aa4:	20000a00 	.word	0x20000a00

00002aa8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2aa8:	b580      	push	{r7, lr}
    2aaa:	b088      	sub	sp, #32
    2aac:	af00      	add	r7, sp, #0
    2aae:	60ba      	str	r2, [r7, #8]
    2ab0:	607b      	str	r3, [r7, #4]
    2ab2:	4603      	mov	r3, r0
    2ab4:	73fb      	strb	r3, [r7, #15]
    2ab6:	460b      	mov	r3, r1
    2ab8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2aba:	68bb      	ldr	r3, [r7, #8]
    2abc:	617b      	str	r3, [r7, #20]
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	61bb      	str	r3, [r7, #24]
    2ac2:	7bbb      	ldrb	r3, [r7, #14]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d004      	beq.n	2ad2 <_usb_d_trans+0x2a>
    2ac8:	7bfb      	ldrb	r3, [r7, #15]
    2aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ace:	b2db      	uxtb	r3, r3
    2ad0:	e003      	b.n	2ada <_usb_d_trans+0x32>
    2ad2:	7bfb      	ldrb	r3, [r7, #15]
    2ad4:	f003 030f 	and.w	r3, r3, #15
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	773b      	strb	r3, [r7, #28]
    2adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2ae0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2ae2:	f107 0314 	add.w	r3, r7, #20
    2ae6:	4618      	mov	r0, r3
    2ae8:	4b03      	ldr	r3, [pc, #12]	; (2af8 <_usb_d_trans+0x50>)
    2aea:	4798      	blx	r3
    2aec:	4603      	mov	r3, r0
}
    2aee:	4618      	mov	r0, r3
    2af0:	3720      	adds	r7, #32
    2af2:	46bd      	mov	sp, r7
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop
    2af8:	0000a49d 	.word	0x0000a49d

00002afc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2afc:	b480      	push	{r7}
    2afe:	b085      	sub	sp, #20
    2b00:	af00      	add	r7, sp, #0
    2b02:	60f8      	str	r0, [r7, #12]
    2b04:	60b9      	str	r1, [r7, #8]
    2b06:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2b08:	2300      	movs	r3, #0
}
    2b0a:	4618      	mov	r0, r3
    2b0c:	3714      	adds	r7, #20
    2b0e:	46bd      	mov	sp, r7
    2b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b14:	4770      	bx	lr
	...

00002b18 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	b086      	sub	sp, #24
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	4603      	mov	r3, r0
    2b20:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b22:	79fb      	ldrb	r3, [r7, #7]
    2b24:	4618      	mov	r0, r3
    2b26:	4b2a      	ldr	r3, [pc, #168]	; (2bd0 <usb_d_cb_trans_setup+0xb8>)
    2b28:	4798      	blx	r3
    2b2a:	4603      	mov	r3, r0
    2b2c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b32:	015b      	lsls	r3, r3, #5
    2b34:	4a27      	ldr	r2, [pc, #156]	; (2bd4 <usb_d_cb_trans_setup+0xbc>)
    2b36:	4413      	add	r3, r2
    2b38:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2b3a:	693b      	ldr	r3, [r7, #16]
    2b3c:	330c      	adds	r3, #12
    2b3e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2b40:	79fb      	ldrb	r3, [r7, #7]
    2b42:	68f9      	ldr	r1, [r7, #12]
    2b44:	4618      	mov	r0, r3
    2b46:	4b24      	ldr	r3, [pc, #144]	; (2bd8 <usb_d_cb_trans_setup+0xc0>)
    2b48:	4798      	blx	r3
    2b4a:	4603      	mov	r3, r0
    2b4c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2b4e:	7afb      	ldrb	r3, [r7, #11]
    2b50:	2b08      	cmp	r3, #8
    2b52:	d00d      	beq.n	2b70 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2b54:	79fb      	ldrb	r3, [r7, #7]
    2b56:	2101      	movs	r1, #1
    2b58:	4618      	mov	r0, r3
    2b5a:	4b20      	ldr	r3, [pc, #128]	; (2bdc <usb_d_cb_trans_setup+0xc4>)
    2b5c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2b5e:	79fb      	ldrb	r3, [r7, #7]
    2b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2b64:	b2db      	uxtb	r3, r3
    2b66:	2101      	movs	r1, #1
    2b68:	4618      	mov	r0, r3
    2b6a:	4b1c      	ldr	r3, [pc, #112]	; (2bdc <usb_d_cb_trans_setup+0xc4>)
    2b6c:	4798      	blx	r3
		return;
    2b6e:	e02b      	b.n	2bc8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2b70:	79fb      	ldrb	r3, [r7, #7]
    2b72:	2100      	movs	r1, #0
    2b74:	4618      	mov	r0, r3
    2b76:	4b19      	ldr	r3, [pc, #100]	; (2bdc <usb_d_cb_trans_setup+0xc4>)
    2b78:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2b7a:	79fb      	ldrb	r3, [r7, #7]
    2b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2b80:	b2db      	uxtb	r3, r3
    2b82:	2100      	movs	r1, #0
    2b84:	4618      	mov	r0, r3
    2b86:	4b15      	ldr	r3, [pc, #84]	; (2bdc <usb_d_cb_trans_setup+0xc4>)
    2b88:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2b8a:	693b      	ldr	r3, [r7, #16]
    2b8c:	2201      	movs	r2, #1
    2b8e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2b90:	693b      	ldr	r3, [r7, #16]
    2b92:	695b      	ldr	r3, [r3, #20]
    2b94:	79fa      	ldrb	r2, [r7, #7]
    2b96:	68f9      	ldr	r1, [r7, #12]
    2b98:	4610      	mov	r0, r2
    2b9a:	4798      	blx	r3
    2b9c:	4603      	mov	r3, r0
    2b9e:	f083 0301 	eor.w	r3, r3, #1
    2ba2:	b2db      	uxtb	r3, r3
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d00f      	beq.n	2bc8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ba8:	693b      	ldr	r3, [r7, #16]
    2baa:	2205      	movs	r2, #5
    2bac:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2bae:	79fb      	ldrb	r3, [r7, #7]
    2bb0:	2101      	movs	r1, #1
    2bb2:	4618      	mov	r0, r3
    2bb4:	4b09      	ldr	r3, [pc, #36]	; (2bdc <usb_d_cb_trans_setup+0xc4>)
    2bb6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2bb8:	79fb      	ldrb	r3, [r7, #7]
    2bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bbe:	b2db      	uxtb	r3, r3
    2bc0:	2101      	movs	r1, #1
    2bc2:	4618      	mov	r0, r3
    2bc4:	4b05      	ldr	r3, [pc, #20]	; (2bdc <usb_d_cb_trans_setup+0xc4>)
    2bc6:	4798      	blx	r3
	}
}
    2bc8:	3718      	adds	r7, #24
    2bca:	46bd      	mov	sp, r7
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	bf00      	nop
    2bd0:	00002a29 	.word	0x00002a29
    2bd4:	20000a00 	.word	0x20000a00
    2bd8:	0000a3f5 	.word	0x0000a3f5
    2bdc:	0000a26d 	.word	0x0000a26d

00002be0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2be0:	b580      	push	{r7, lr}
    2be2:	b084      	sub	sp, #16
    2be4:	af00      	add	r7, sp, #0
    2be6:	4603      	mov	r3, r0
    2be8:	6039      	str	r1, [r7, #0]
    2bea:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2bec:	79fb      	ldrb	r3, [r7, #7]
    2bee:	4618      	mov	r0, r3
    2bf0:	4b0d      	ldr	r3, [pc, #52]	; (2c28 <usb_d_cb_trans_more+0x48>)
    2bf2:	4798      	blx	r3
    2bf4:	4603      	mov	r3, r0
    2bf6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bfc:	015b      	lsls	r3, r3, #5
    2bfe:	4a0b      	ldr	r2, [pc, #44]	; (2c2c <usb_d_cb_trans_more+0x4c>)
    2c00:	4413      	add	r3, r2
    2c02:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2c04:	68bb      	ldr	r3, [r7, #8]
    2c06:	789b      	ldrb	r3, [r3, #2]
    2c08:	2b03      	cmp	r3, #3
    2c0a:	d107      	bne.n	2c1c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2c0c:	68bb      	ldr	r3, [r7, #8]
    2c0e:	699b      	ldr	r3, [r3, #24]
    2c10:	79fa      	ldrb	r2, [r7, #7]
    2c12:	6839      	ldr	r1, [r7, #0]
    2c14:	4610      	mov	r0, r2
    2c16:	4798      	blx	r3
    2c18:	4603      	mov	r3, r0
    2c1a:	e000      	b.n	2c1e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2c1c:	2300      	movs	r3, #0
}
    2c1e:	4618      	mov	r0, r3
    2c20:	3710      	adds	r7, #16
    2c22:	46bd      	mov	sp, r7
    2c24:	bd80      	pop	{r7, pc}
    2c26:	bf00      	nop
    2c28:	00002a29 	.word	0x00002a29
    2c2c:	20000a00 	.word	0x20000a00

00002c30 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2c30:	b590      	push	{r4, r7, lr}
    2c32:	b087      	sub	sp, #28
    2c34:	af02      	add	r7, sp, #8
    2c36:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	789b      	ldrb	r3, [r3, #2]
    2c3c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	7b1b      	ldrb	r3, [r3, #12]
    2c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c46:	2b00      	cmp	r3, #0
    2c48:	bf14      	ite	ne
    2c4a:	2301      	movne	r3, #1
    2c4c:	2300      	moveq	r3, #0
    2c4e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2c50:	7bfb      	ldrb	r3, [r7, #15]
    2c52:	2b03      	cmp	r3, #3
    2c54:	d13a      	bne.n	2ccc <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	69db      	ldr	r3, [r3, #28]
    2c5a:	687a      	ldr	r2, [r7, #4]
    2c5c:	7850      	ldrb	r0, [r2, #1]
    2c5e:	687a      	ldr	r2, [r7, #4]
    2c60:	320c      	adds	r2, #12
    2c62:	2101      	movs	r1, #1
    2c64:	4798      	blx	r3
    2c66:	4603      	mov	r3, r0
    2c68:	737b      	strb	r3, [r7, #13]
		if (err) {
    2c6a:	7b7b      	ldrb	r3, [r7, #13]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d015      	beq.n	2c9c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	2205      	movs	r2, #5
    2c74:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	2202      	movs	r2, #2
    2c7a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2c7c:	7bbb      	ldrb	r3, [r7, #14]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d002      	beq.n	2c88 <usb_d_ctrl_trans_done+0x58>
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	785b      	ldrb	r3, [r3, #1]
    2c86:	e004      	b.n	2c92 <usb_d_ctrl_trans_done+0x62>
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	785b      	ldrb	r3, [r3, #1]
    2c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c90:	b2db      	uxtb	r3, r3
    2c92:	2101      	movs	r1, #1
    2c94:	4618      	mov	r0, r3
    2c96:	4b15      	ldr	r3, [pc, #84]	; (2cec <usb_d_ctrl_trans_done+0xbc>)
    2c98:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2c9a:	e022      	b.n	2ce2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	2204      	movs	r2, #4
    2ca0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	7858      	ldrb	r0, [r3, #1]
    2ca6:	7bbb      	ldrb	r3, [r7, #14]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	bf14      	ite	ne
    2cac:	2301      	movne	r3, #1
    2cae:	2300      	moveq	r3, #0
    2cb0:	b2db      	uxtb	r3, r3
    2cb2:	f083 0301 	eor.w	r3, r3, #1
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	f003 0301 	and.w	r3, r3, #1
    2cbc:	b2d9      	uxtb	r1, r3
    2cbe:	2301      	movs	r3, #1
    2cc0:	9300      	str	r3, [sp, #0]
    2cc2:	2300      	movs	r3, #0
    2cc4:	2200      	movs	r2, #0
    2cc6:	4c0a      	ldr	r4, [pc, #40]	; (2cf0 <usb_d_ctrl_trans_done+0xc0>)
    2cc8:	47a0      	blx	r4
}
    2cca:	e00a      	b.n	2ce2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	69db      	ldr	r3, [r3, #28]
    2cd0:	687a      	ldr	r2, [r7, #4]
    2cd2:	7850      	ldrb	r0, [r2, #1]
    2cd4:	687a      	ldr	r2, [r7, #4]
    2cd6:	320c      	adds	r2, #12
    2cd8:	2100      	movs	r1, #0
    2cda:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	2202      	movs	r2, #2
    2ce0:	709a      	strb	r2, [r3, #2]
}
    2ce2:	bf00      	nop
    2ce4:	3714      	adds	r7, #20
    2ce6:	46bd      	mov	sp, r7
    2ce8:	bd90      	pop	{r4, r7, pc}
    2cea:	bf00      	nop
    2cec:	0000a26d 	.word	0x0000a26d
    2cf0:	00002aa9 	.word	0x00002aa9

00002cf4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b086      	sub	sp, #24
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	4603      	mov	r3, r0
    2cfc:	60b9      	str	r1, [r7, #8]
    2cfe:	607a      	str	r2, [r7, #4]
    2d00:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d02:	7bfb      	ldrb	r3, [r7, #15]
    2d04:	4618      	mov	r0, r3
    2d06:	4b2f      	ldr	r3, [pc, #188]	; (2dc4 <_usb_d_cb_trans_done+0xd0>)
    2d08:	4798      	blx	r3
    2d0a:	4603      	mov	r3, r0
    2d0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d12:	015b      	lsls	r3, r3, #5
    2d14:	4a2c      	ldr	r2, [pc, #176]	; (2dc8 <_usb_d_cb_trans_done+0xd4>)
    2d16:	4413      	add	r3, r2
    2d18:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d10e      	bne.n	2d3e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2d20:	693b      	ldr	r3, [r7, #16]
    2d22:	2200      	movs	r2, #0
    2d24:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d26:	693b      	ldr	r3, [r7, #16]
    2d28:	781b      	ldrb	r3, [r3, #0]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d103      	bne.n	2d36 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2d2e:	6938      	ldr	r0, [r7, #16]
    2d30:	4b26      	ldr	r3, [pc, #152]	; (2dcc <_usb_d_cb_trans_done+0xd8>)
    2d32:	4798      	blx	r3
			return;
    2d34:	e043      	b.n	2dbe <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2d36:	693b      	ldr	r3, [r7, #16]
    2d38:	2201      	movs	r2, #1
    2d3a:	709a      	strb	r2, [r3, #2]
    2d3c:	e038      	b.n	2db0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2d3e:	68bb      	ldr	r3, [r7, #8]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d113      	bne.n	2d6c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2d44:	693b      	ldr	r3, [r7, #16]
    2d46:	2202      	movs	r2, #2
    2d48:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d4a:	693b      	ldr	r3, [r7, #16]
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d108      	bne.n	2d64 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d52:	693b      	ldr	r3, [r7, #16]
    2d54:	2202      	movs	r2, #2
    2d56:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2d58:	7bfb      	ldrb	r3, [r7, #15]
    2d5a:	2100      	movs	r1, #0
    2d5c:	4618      	mov	r0, r3
    2d5e:	4b1c      	ldr	r3, [pc, #112]	; (2dd0 <_usb_d_cb_trans_done+0xdc>)
    2d60:	4798      	blx	r3
    2d62:	e025      	b.n	2db0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2d64:	693b      	ldr	r3, [r7, #16]
    2d66:	2205      	movs	r2, #5
    2d68:	709a      	strb	r2, [r3, #2]
    2d6a:	e021      	b.n	2db0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2d6c:	68bb      	ldr	r3, [r7, #8]
    2d6e:	2b02      	cmp	r3, #2
    2d70:	d10e      	bne.n	2d90 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2d72:	693b      	ldr	r3, [r7, #16]
    2d74:	2204      	movs	r2, #4
    2d76:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d78:	693b      	ldr	r3, [r7, #16]
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d103      	bne.n	2d88 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d80:	693b      	ldr	r3, [r7, #16]
    2d82:	2202      	movs	r2, #2
    2d84:	709a      	strb	r2, [r3, #2]
			return;
    2d86:	e01a      	b.n	2dbe <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2d88:	693b      	ldr	r3, [r7, #16]
    2d8a:	2201      	movs	r2, #1
    2d8c:	709a      	strb	r2, [r3, #2]
    2d8e:	e00f      	b.n	2db0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2d90:	68bb      	ldr	r3, [r7, #8]
    2d92:	2b03      	cmp	r3, #3
    2d94:	d106      	bne.n	2da4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2d96:	693b      	ldr	r3, [r7, #16]
    2d98:	2200      	movs	r2, #0
    2d9a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2d9c:	693b      	ldr	r3, [r7, #16]
    2d9e:	2205      	movs	r2, #5
    2da0:	70da      	strb	r2, [r3, #3]
    2da2:	e005      	b.n	2db0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2da4:	693b      	ldr	r3, [r7, #16]
    2da6:	2206      	movs	r2, #6
    2da8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2daa:	693b      	ldr	r3, [r7, #16]
    2dac:	2206      	movs	r2, #6
    2dae:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2db0:	693b      	ldr	r3, [r7, #16]
    2db2:	69db      	ldr	r3, [r3, #28]
    2db4:	693a      	ldr	r2, [r7, #16]
    2db6:	78d1      	ldrb	r1, [r2, #3]
    2db8:	687a      	ldr	r2, [r7, #4]
    2dba:	7bf8      	ldrb	r0, [r7, #15]
    2dbc:	4798      	blx	r3
}
    2dbe:	3718      	adds	r7, #24
    2dc0:	46bd      	mov	sp, r7
    2dc2:	bd80      	pop	{r7, pc}
    2dc4:	00002a29 	.word	0x00002a29
    2dc8:	20000a00 	.word	0x20000a00
    2dcc:	00002c31 	.word	0x00002c31
    2dd0:	0000a26d 	.word	0x0000a26d

00002dd4 <usb_d_init>:

int32_t usb_d_init(void)
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b082      	sub	sp, #8
    2dd8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2dda:	4b21      	ldr	r3, [pc, #132]	; (2e60 <usb_d_init+0x8c>)
    2ddc:	4798      	blx	r3
    2dde:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2de0:	683b      	ldr	r3, [r7, #0]
    2de2:	2b00      	cmp	r3, #0
    2de4:	da01      	bge.n	2dea <usb_d_init+0x16>
		return rc;
    2de6:	683b      	ldr	r3, [r7, #0]
    2de8:	e036      	b.n	2e58 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2dea:	2280      	movs	r2, #128	; 0x80
    2dec:	2100      	movs	r1, #0
    2dee:	481d      	ldr	r0, [pc, #116]	; (2e64 <usb_d_init+0x90>)
    2df0:	4b1d      	ldr	r3, [pc, #116]	; (2e68 <usb_d_init+0x94>)
    2df2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2df4:	2300      	movs	r3, #0
    2df6:	71fb      	strb	r3, [r7, #7]
    2df8:	e01e      	b.n	2e38 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2dfa:	79fb      	ldrb	r3, [r7, #7]
    2dfc:	4a19      	ldr	r2, [pc, #100]	; (2e64 <usb_d_init+0x90>)
    2dfe:	015b      	lsls	r3, r3, #5
    2e00:	4413      	add	r3, r2
    2e02:	3301      	adds	r3, #1
    2e04:	22ff      	movs	r2, #255	; 0xff
    2e06:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2e08:	79fb      	ldrb	r3, [r7, #7]
    2e0a:	4a16      	ldr	r2, [pc, #88]	; (2e64 <usb_d_init+0x90>)
    2e0c:	015b      	lsls	r3, r3, #5
    2e0e:	4413      	add	r3, r2
    2e10:	3314      	adds	r3, #20
    2e12:	4a16      	ldr	r2, [pc, #88]	; (2e6c <usb_d_init+0x98>)
    2e14:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2e16:	79fb      	ldrb	r3, [r7, #7]
    2e18:	4a12      	ldr	r2, [pc, #72]	; (2e64 <usb_d_init+0x90>)
    2e1a:	015b      	lsls	r3, r3, #5
    2e1c:	4413      	add	r3, r2
    2e1e:	3318      	adds	r3, #24
    2e20:	4a12      	ldr	r2, [pc, #72]	; (2e6c <usb_d_init+0x98>)
    2e22:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2e24:	79fb      	ldrb	r3, [r7, #7]
    2e26:	4a0f      	ldr	r2, [pc, #60]	; (2e64 <usb_d_init+0x90>)
    2e28:	015b      	lsls	r3, r3, #5
    2e2a:	4413      	add	r3, r2
    2e2c:	331c      	adds	r3, #28
    2e2e:	4a0f      	ldr	r2, [pc, #60]	; (2e6c <usb_d_init+0x98>)
    2e30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e32:	79fb      	ldrb	r3, [r7, #7]
    2e34:	3301      	adds	r3, #1
    2e36:	71fb      	strb	r3, [r7, #7]
    2e38:	79fb      	ldrb	r3, [r7, #7]
    2e3a:	2b03      	cmp	r3, #3
    2e3c:	d9dd      	bls.n	2dfa <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2e3e:	490c      	ldr	r1, [pc, #48]	; (2e70 <usb_d_init+0x9c>)
    2e40:	2000      	movs	r0, #0
    2e42:	4b0c      	ldr	r3, [pc, #48]	; (2e74 <usb_d_init+0xa0>)
    2e44:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2e46:	490c      	ldr	r1, [pc, #48]	; (2e78 <usb_d_init+0xa4>)
    2e48:	2001      	movs	r0, #1
    2e4a:	4b0a      	ldr	r3, [pc, #40]	; (2e74 <usb_d_init+0xa0>)
    2e4c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2e4e:	490b      	ldr	r1, [pc, #44]	; (2e7c <usb_d_init+0xa8>)
    2e50:	2002      	movs	r0, #2
    2e52:	4b08      	ldr	r3, [pc, #32]	; (2e74 <usb_d_init+0xa0>)
    2e54:	4798      	blx	r3
	return ERR_NONE;
    2e56:	2300      	movs	r3, #0
}
    2e58:	4618      	mov	r0, r3
    2e5a:	3708      	adds	r7, #8
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}
    2e60:	00009ab5 	.word	0x00009ab5
    2e64:	20000a00 	.word	0x20000a00
    2e68:	00010e1d 	.word	0x00010e1d
    2e6c:	00002afd 	.word	0x00002afd
    2e70:	00002b19 	.word	0x00002b19
    2e74:	0000a6fd 	.word	0x0000a6fd
    2e78:	00002be1 	.word	0x00002be1
    2e7c:	00002cf5 	.word	0x00002cf5

00002e80 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2e80:	b580      	push	{r7, lr}
    2e82:	b082      	sub	sp, #8
    2e84:	af00      	add	r7, sp, #0
    2e86:	4603      	mov	r3, r0
    2e88:	6039      	str	r1, [r7, #0]
    2e8a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2e8c:	79fb      	ldrb	r3, [r7, #7]
    2e8e:	6839      	ldr	r1, [r7, #0]
    2e90:	4618      	mov	r0, r3
    2e92:	4b03      	ldr	r3, [pc, #12]	; (2ea0 <usb_d_register_callback+0x20>)
    2e94:	4798      	blx	r3
}
    2e96:	bf00      	nop
    2e98:	3708      	adds	r7, #8
    2e9a:	46bd      	mov	sp, r7
    2e9c:	bd80      	pop	{r7, pc}
    2e9e:	bf00      	nop
    2ea0:	0000a6b5 	.word	0x0000a6b5

00002ea4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2ea8:	4b02      	ldr	r3, [pc, #8]	; (2eb4 <usb_d_enable+0x10>)
    2eaa:	4798      	blx	r3
    2eac:	4603      	mov	r3, r0
}
    2eae:	4618      	mov	r0, r3
    2eb0:	bd80      	pop	{r7, pc}
    2eb2:	bf00      	nop
    2eb4:	00009ba5 	.word	0x00009ba5

00002eb8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2ebc:	4b01      	ldr	r3, [pc, #4]	; (2ec4 <usb_d_attach+0xc>)
    2ebe:	4798      	blx	r3
}
    2ec0:	bf00      	nop
    2ec2:	bd80      	pop	{r7, pc}
    2ec4:	00009c29 	.word	0x00009c29

00002ec8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b082      	sub	sp, #8
    2ecc:	af00      	add	r7, sp, #0
    2ece:	4603      	mov	r3, r0
    2ed0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2ed2:	79fb      	ldrb	r3, [r7, #7]
    2ed4:	4618      	mov	r0, r3
    2ed6:	4b03      	ldr	r3, [pc, #12]	; (2ee4 <usb_d_set_address+0x1c>)
    2ed8:	4798      	blx	r3
}
    2eda:	bf00      	nop
    2edc:	3708      	adds	r7, #8
    2ede:	46bd      	mov	sp, r7
    2ee0:	bd80      	pop	{r7, pc}
    2ee2:	bf00      	nop
    2ee4:	00009c3d 	.word	0x00009c3d

00002ee8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2ee8:	b580      	push	{r7, lr}
    2eea:	b082      	sub	sp, #8
    2eec:	af00      	add	r7, sp, #0
    2eee:	4603      	mov	r3, r0
    2ef0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2ef2:	79fb      	ldrb	r3, [r7, #7]
    2ef4:	b29b      	uxth	r3, r3
    2ef6:	461a      	mov	r2, r3
    2ef8:	2100      	movs	r1, #0
    2efa:	2000      	movs	r0, #0
    2efc:	4b03      	ldr	r3, [pc, #12]	; (2f0c <usb_d_ep0_init+0x24>)
    2efe:	4798      	blx	r3
    2f00:	4603      	mov	r3, r0
}
    2f02:	4618      	mov	r0, r3
    2f04:	3708      	adds	r7, #8
    2f06:	46bd      	mov	sp, r7
    2f08:	bd80      	pop	{r7, pc}
    2f0a:	bf00      	nop
    2f0c:	00002f11 	.word	0x00002f11

00002f10 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b086      	sub	sp, #24
    2f14:	af00      	add	r7, sp, #0
    2f16:	4603      	mov	r3, r0
    2f18:	71fb      	strb	r3, [r7, #7]
    2f1a:	460b      	mov	r3, r1
    2f1c:	71bb      	strb	r3, [r7, #6]
    2f1e:	4613      	mov	r3, r2
    2f20:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f22:	79fb      	ldrb	r3, [r7, #7]
    2f24:	4618      	mov	r0, r3
    2f26:	4b1e      	ldr	r3, [pc, #120]	; (2fa0 <usb_d_ep_init+0x90>)
    2f28:	4798      	blx	r3
    2f2a:	4603      	mov	r3, r0
    2f2c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f32:	015b      	lsls	r3, r3, #5
    2f34:	4a1b      	ldr	r2, [pc, #108]	; (2fa4 <usb_d_ep_init+0x94>)
    2f36:	4413      	add	r3, r2
    2f38:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	db02      	blt.n	2f48 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2f42:	f06f 0313 	mvn.w	r3, #19
    2f46:	e027      	b.n	2f98 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2f48:	20ff      	movs	r0, #255	; 0xff
    2f4a:	4b15      	ldr	r3, [pc, #84]	; (2fa0 <usb_d_ep_init+0x90>)
    2f4c:	4798      	blx	r3
    2f4e:	4603      	mov	r3, r0
    2f50:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f56:	2b00      	cmp	r3, #0
    2f58:	da02      	bge.n	2f60 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2f5a:	f06f 0314 	mvn.w	r3, #20
    2f5e:	e01b      	b.n	2f98 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f64:	015b      	lsls	r3, r3, #5
    2f66:	4a0f      	ldr	r2, [pc, #60]	; (2fa4 <usb_d_ep_init+0x94>)
    2f68:	4413      	add	r3, r2
    2f6a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2f6c:	88ba      	ldrh	r2, [r7, #4]
    2f6e:	79b9      	ldrb	r1, [r7, #6]
    2f70:	79fb      	ldrb	r3, [r7, #7]
    2f72:	4618      	mov	r0, r3
    2f74:	4b0c      	ldr	r3, [pc, #48]	; (2fa8 <usb_d_ep_init+0x98>)
    2f76:	4798      	blx	r3
    2f78:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2f7a:	68fb      	ldr	r3, [r7, #12]
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	da01      	bge.n	2f84 <usb_d_ep_init+0x74>
		return rc;
    2f80:	68fb      	ldr	r3, [r7, #12]
    2f82:	e009      	b.n	2f98 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2f84:	693b      	ldr	r3, [r7, #16]
    2f86:	79fa      	ldrb	r2, [r7, #7]
    2f88:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2f8a:	79bb      	ldrb	r3, [r7, #6]
    2f8c:	f003 0303 	and.w	r3, r3, #3
    2f90:	b2da      	uxtb	r2, r3
    2f92:	693b      	ldr	r3, [r7, #16]
    2f94:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2f96:	2300      	movs	r3, #0
}
    2f98:	4618      	mov	r0, r3
    2f9a:	3718      	adds	r7, #24
    2f9c:	46bd      	mov	sp, r7
    2f9e:	bd80      	pop	{r7, pc}
    2fa0:	00002a29 	.word	0x00002a29
    2fa4:	20000a00 	.word	0x20000a00
    2fa8:	00009cdd 	.word	0x00009cdd

00002fac <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	b084      	sub	sp, #16
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	4603      	mov	r3, r0
    2fb4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fb6:	79fb      	ldrb	r3, [r7, #7]
    2fb8:	4618      	mov	r0, r3
    2fba:	4b0d      	ldr	r3, [pc, #52]	; (2ff0 <usb_d_ep_deinit+0x44>)
    2fbc:	4798      	blx	r3
    2fbe:	4603      	mov	r3, r0
    2fc0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fc6:	015b      	lsls	r3, r3, #5
    2fc8:	4a0a      	ldr	r2, [pc, #40]	; (2ff4 <usb_d_ep_deinit+0x48>)
    2fca:	4413      	add	r3, r2
    2fcc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	db07      	blt.n	2fe6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2fd6:	79fb      	ldrb	r3, [r7, #7]
    2fd8:	4618      	mov	r0, r3
    2fda:	4b07      	ldr	r3, [pc, #28]	; (2ff8 <usb_d_ep_deinit+0x4c>)
    2fdc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2fde:	68bb      	ldr	r3, [r7, #8]
    2fe0:	22ff      	movs	r2, #255	; 0xff
    2fe2:	705a      	strb	r2, [r3, #1]
    2fe4:	e000      	b.n	2fe8 <usb_d_ep_deinit+0x3c>
		return;
    2fe6:	bf00      	nop
}
    2fe8:	3710      	adds	r7, #16
    2fea:	46bd      	mov	sp, r7
    2fec:	bd80      	pop	{r7, pc}
    2fee:	bf00      	nop
    2ff0:	00002a29 	.word	0x00002a29
    2ff4:	20000a00 	.word	0x20000a00
    2ff8:	00009e11 	.word	0x00009e11

00002ffc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	b086      	sub	sp, #24
    3000:	af00      	add	r7, sp, #0
    3002:	4603      	mov	r3, r0
    3004:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3006:	79fb      	ldrb	r3, [r7, #7]
    3008:	4618      	mov	r0, r3
    300a:	4b15      	ldr	r3, [pc, #84]	; (3060 <usb_d_ep_enable+0x64>)
    300c:	4798      	blx	r3
    300e:	4603      	mov	r3, r0
    3010:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3012:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3016:	015b      	lsls	r3, r3, #5
    3018:	4a12      	ldr	r2, [pc, #72]	; (3064 <usb_d_ep_enable+0x68>)
    301a:	4413      	add	r3, r2
    301c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    301e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3022:	2b00      	cmp	r3, #0
    3024:	da02      	bge.n	302c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3026:	f06f 0311 	mvn.w	r3, #17
    302a:	e014      	b.n	3056 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    302c:	693b      	ldr	r3, [r7, #16]
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	2b00      	cmp	r3, #0
    3032:	d101      	bne.n	3038 <usb_d_ep_enable+0x3c>
    3034:	2202      	movs	r2, #2
    3036:	e000      	b.n	303a <usb_d_ep_enable+0x3e>
    3038:	2201      	movs	r2, #1
    303a:	693b      	ldr	r3, [r7, #16]
    303c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    303e:	79fb      	ldrb	r3, [r7, #7]
    3040:	4618      	mov	r0, r3
    3042:	4b09      	ldr	r3, [pc, #36]	; (3068 <usb_d_ep_enable+0x6c>)
    3044:	4798      	blx	r3
    3046:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3048:	68fb      	ldr	r3, [r7, #12]
    304a:	2b00      	cmp	r3, #0
    304c:	da02      	bge.n	3054 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    304e:	693b      	ldr	r3, [r7, #16]
    3050:	2200      	movs	r2, #0
    3052:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3054:	68fb      	ldr	r3, [r7, #12]
}
    3056:	4618      	mov	r0, r3
    3058:	3718      	adds	r7, #24
    305a:	46bd      	mov	sp, r7
    305c:	bd80      	pop	{r7, pc}
    305e:	bf00      	nop
    3060:	00002a29 	.word	0x00002a29
    3064:	20000a00 	.word	0x20000a00
    3068:	00009ef5 	.word	0x00009ef5

0000306c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    306c:	b590      	push	{r4, r7, lr}
    306e:	b08d      	sub	sp, #52	; 0x34
    3070:	af02      	add	r7, sp, #8
    3072:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	7a1b      	ldrb	r3, [r3, #8]
    3078:	4618      	mov	r0, r3
    307a:	4b51      	ldr	r3, [pc, #324]	; (31c0 <usb_d_ep_transfer+0x154>)
    307c:	4798      	blx	r3
    307e:	4603      	mov	r3, r0
    3080:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3082:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3086:	015b      	lsls	r3, r3, #5
    3088:	4a4e      	ldr	r2, [pc, #312]	; (31c4 <usb_d_ep_transfer+0x158>)
    308a:	4413      	add	r3, r2
    308c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	7a1b      	ldrb	r3, [r3, #8]
    3092:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3096:	2b00      	cmp	r3, #0
    3098:	bf14      	ite	ne
    309a:	2301      	movne	r3, #1
    309c:	2300      	moveq	r3, #0
    309e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	7a5b      	ldrb	r3, [r3, #9]
    30a6:	2b00      	cmp	r3, #0
    30a8:	bf14      	ite	ne
    30aa:	2301      	movne	r3, #1
    30ac:	2300      	moveq	r3, #0
    30ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	685b      	ldr	r3, [r3, #4]
    30b6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    30b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    30bc:	2b00      	cmp	r3, #0
    30be:	da02      	bge.n	30c6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    30c0:	f06f 0311 	mvn.w	r3, #17
    30c4:	e077      	b.n	31b6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    30c6:	f107 0308 	add.w	r3, r7, #8
    30ca:	4618      	mov	r0, r3
    30cc:	4b3e      	ldr	r3, [pc, #248]	; (31c8 <usb_d_ep_transfer+0x15c>)
    30ce:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    30d0:	69bb      	ldr	r3, [r7, #24]
    30d2:	789b      	ldrb	r3, [r3, #2]
    30d4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    30d6:	7bfb      	ldrb	r3, [r7, #15]
    30d8:	b2db      	uxtb	r3, r3
    30da:	2b01      	cmp	r3, #1
    30dc:	d10c      	bne.n	30f8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    30de:	69bb      	ldr	r3, [r7, #24]
    30e0:	2203      	movs	r2, #3
    30e2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    30e4:	f107 0308 	add.w	r3, r7, #8
    30e8:	4618      	mov	r0, r3
    30ea:	4b38      	ldr	r3, [pc, #224]	; (31cc <usb_d_ep_transfer+0x160>)
    30ec:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    30ee:	69bb      	ldr	r3, [r7, #24]
    30f0:	781b      	ldrb	r3, [r3, #0]
    30f2:	2b00      	cmp	r3, #0
    30f4:	d151      	bne.n	319a <usb_d_ep_transfer+0x12e>
    30f6:	e017      	b.n	3128 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    30f8:	f107 0308 	add.w	r3, r7, #8
    30fc:	4618      	mov	r0, r3
    30fe:	4b33      	ldr	r3, [pc, #204]	; (31cc <usb_d_ep_transfer+0x160>)
    3100:	4798      	blx	r3
		switch (state) {
    3102:	7bfb      	ldrb	r3, [r7, #15]
    3104:	b2db      	uxtb	r3, r3
    3106:	2b05      	cmp	r3, #5
    3108:	d004      	beq.n	3114 <usb_d_ep_transfer+0xa8>
    310a:	2b06      	cmp	r3, #6
    310c:	d004      	beq.n	3118 <usb_d_ep_transfer+0xac>
    310e:	2b00      	cmp	r3, #0
    3110:	d005      	beq.n	311e <usb_d_ep_transfer+0xb2>
    3112:	e007      	b.n	3124 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3114:	2302      	movs	r3, #2
    3116:	e04e      	b.n	31b6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3118:	f06f 030f 	mvn.w	r3, #15
    311c:	e04b      	b.n	31b6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    311e:	f06f 0312 	mvn.w	r3, #18
    3122:	e048      	b.n	31b6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3124:	2301      	movs	r3, #1
    3126:	e046      	b.n	31b6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3128:	69bb      	ldr	r3, [r7, #24]
    312a:	7c9b      	ldrb	r3, [r3, #18]
    312c:	b29a      	uxth	r2, r3
    312e:	69bb      	ldr	r3, [r7, #24]
    3130:	7cdb      	ldrb	r3, [r3, #19]
    3132:	b29b      	uxth	r3, r3
    3134:	021b      	lsls	r3, r3, #8
    3136:	b29b      	uxth	r3, r3
    3138:	4413      	add	r3, r2
    313a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    313c:	8afb      	ldrh	r3, [r7, #22]
    313e:	2b00      	cmp	r3, #0
    3140:	d10b      	bne.n	315a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3142:	2301      	movs	r3, #1
    3144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3148:	2300      	movs	r3, #0
    314a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    314c:	2301      	movs	r3, #1
    314e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3152:	69bb      	ldr	r3, [r7, #24]
    3154:	2204      	movs	r2, #4
    3156:	709a      	strb	r2, [r3, #2]
    3158:	e01f      	b.n	319a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    315a:	69bb      	ldr	r3, [r7, #24]
    315c:	7b1b      	ldrb	r3, [r3, #12]
    315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3162:	2b00      	cmp	r3, #0
    3164:	bf14      	ite	ne
    3166:	2301      	movne	r3, #1
    3168:	2300      	moveq	r3, #0
    316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    316e:	8afa      	ldrh	r2, [r7, #22]
    3170:	6a3b      	ldr	r3, [r7, #32]
    3172:	429a      	cmp	r2, r3
    3174:	d201      	bcs.n	317a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3176:	8afb      	ldrh	r3, [r7, #22]
    3178:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    317a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    317e:	2b00      	cmp	r3, #0
    3180:	d008      	beq.n	3194 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3182:	8afa      	ldrh	r2, [r7, #22]
    3184:	6a3b      	ldr	r3, [r7, #32]
    3186:	429a      	cmp	r2, r3
    3188:	bf8c      	ite	hi
    318a:	2301      	movhi	r3, #1
    318c:	2300      	movls	r3, #0
    318e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3192:	e002      	b.n	319a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3194:	2300      	movs	r3, #0
    3196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    319a:	687b      	ldr	r3, [r7, #4]
    319c:	7a18      	ldrb	r0, [r3, #8]
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	681a      	ldr	r2, [r3, #0]
    31a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    31a6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    31aa:	9300      	str	r3, [sp, #0]
    31ac:	6a3b      	ldr	r3, [r7, #32]
    31ae:	4c08      	ldr	r4, [pc, #32]	; (31d0 <usb_d_ep_transfer+0x164>)
    31b0:	47a0      	blx	r4
    31b2:	6138      	str	r0, [r7, #16]
	return rc;
    31b4:	693b      	ldr	r3, [r7, #16]
}
    31b6:	4618      	mov	r0, r3
    31b8:	372c      	adds	r7, #44	; 0x2c
    31ba:	46bd      	mov	sp, r7
    31bc:	bd90      	pop	{r4, r7, pc}
    31be:	bf00      	nop
    31c0:	00002a29 	.word	0x00002a29
    31c4:	20000a00 	.word	0x20000a00
    31c8:	0000ae69 	.word	0x0000ae69
    31cc:	0000ae8f 	.word	0x0000ae8f
    31d0:	00002aa9 	.word	0x00002aa9

000031d4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b084      	sub	sp, #16
    31d8:	af00      	add	r7, sp, #0
    31da:	4603      	mov	r3, r0
    31dc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    31de:	79fb      	ldrb	r3, [r7, #7]
    31e0:	4618      	mov	r0, r3
    31e2:	4b0e      	ldr	r3, [pc, #56]	; (321c <usb_d_ep_abort+0x48>)
    31e4:	4798      	blx	r3
    31e6:	4603      	mov	r3, r0
    31e8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31ee:	015b      	lsls	r3, r3, #5
    31f0:	4a0b      	ldr	r2, [pc, #44]	; (3220 <usb_d_ep_abort+0x4c>)
    31f2:	4413      	add	r3, r2
    31f4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    31f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31fa:	2b00      	cmp	r3, #0
    31fc:	db0a      	blt.n	3214 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    31fe:	79fb      	ldrb	r3, [r7, #7]
    3200:	4618      	mov	r0, r3
    3202:	4b08      	ldr	r3, [pc, #32]	; (3224 <usb_d_ep_abort+0x50>)
    3204:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3206:	68bb      	ldr	r3, [r7, #8]
    3208:	2201      	movs	r2, #1
    320a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    320c:	68bb      	ldr	r3, [r7, #8]
    320e:	2204      	movs	r2, #4
    3210:	70da      	strb	r2, [r3, #3]
    3212:	e000      	b.n	3216 <usb_d_ep_abort+0x42>
		return;
    3214:	bf00      	nop
}
    3216:	3710      	adds	r7, #16
    3218:	46bd      	mov	sp, r7
    321a:	bd80      	pop	{r7, pc}
    321c:	00002a29 	.word	0x00002a29
    3220:	20000a00 	.word	0x20000a00
    3224:	0000a661 	.word	0x0000a661

00003228 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3228:	b580      	push	{r7, lr}
    322a:	b086      	sub	sp, #24
    322c:	af00      	add	r7, sp, #0
    322e:	4603      	mov	r3, r0
    3230:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3232:	79fb      	ldrb	r3, [r7, #7]
    3234:	4618      	mov	r0, r3
    3236:	4b1a      	ldr	r3, [pc, #104]	; (32a0 <_usb_d_ep_halt_clr+0x78>)
    3238:	4798      	blx	r3
    323a:	4603      	mov	r3, r0
    323c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    323e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3242:	015b      	lsls	r3, r3, #5
    3244:	4a17      	ldr	r2, [pc, #92]	; (32a4 <_usb_d_ep_halt_clr+0x7c>)
    3246:	4413      	add	r3, r2
    3248:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    324a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    324e:	2b00      	cmp	r3, #0
    3250:	da02      	bge.n	3258 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3252:	f06f 0311 	mvn.w	r3, #17
    3256:	e01f      	b.n	3298 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3258:	79fb      	ldrb	r3, [r7, #7]
    325a:	2102      	movs	r1, #2
    325c:	4618      	mov	r0, r3
    325e:	4b12      	ldr	r3, [pc, #72]	; (32a8 <_usb_d_ep_halt_clr+0x80>)
    3260:	4798      	blx	r3
    3262:	4603      	mov	r3, r0
    3264:	2b00      	cmp	r3, #0
    3266:	d016      	beq.n	3296 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3268:	79fb      	ldrb	r3, [r7, #7]
    326a:	2100      	movs	r1, #0
    326c:	4618      	mov	r0, r3
    326e:	4b0e      	ldr	r3, [pc, #56]	; (32a8 <_usb_d_ep_halt_clr+0x80>)
    3270:	4798      	blx	r3
    3272:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3274:	68fb      	ldr	r3, [r7, #12]
    3276:	2b00      	cmp	r3, #0
    3278:	da01      	bge.n	327e <_usb_d_ep_halt_clr+0x56>
			return rc;
    327a:	68fb      	ldr	r3, [r7, #12]
    327c:	e00c      	b.n	3298 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    327e:	693b      	ldr	r3, [r7, #16]
    3280:	2201      	movs	r2, #1
    3282:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3284:	693b      	ldr	r3, [r7, #16]
    3286:	2203      	movs	r2, #3
    3288:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    328a:	693b      	ldr	r3, [r7, #16]
    328c:	69db      	ldr	r3, [r3, #28]
    328e:	79f8      	ldrb	r0, [r7, #7]
    3290:	2200      	movs	r2, #0
    3292:	2103      	movs	r1, #3
    3294:	4798      	blx	r3
	}
	return ERR_NONE;
    3296:	2300      	movs	r3, #0
}
    3298:	4618      	mov	r0, r3
    329a:	3718      	adds	r7, #24
    329c:	46bd      	mov	sp, r7
    329e:	bd80      	pop	{r7, pc}
    32a0:	00002a29 	.word	0x00002a29
    32a4:	20000a00 	.word	0x20000a00
    32a8:	0000a26d 	.word	0x0000a26d

000032ac <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    32b2:	4603      	mov	r3, r0
    32b4:	460a      	mov	r2, r1
    32b6:	71fb      	strb	r3, [r7, #7]
    32b8:	4613      	mov	r3, r2
    32ba:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    32bc:	79bb      	ldrb	r3, [r7, #6]
    32be:	2b00      	cmp	r3, #0
    32c0:	d105      	bne.n	32ce <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    32c2:	79fb      	ldrb	r3, [r7, #7]
    32c4:	4618      	mov	r0, r3
    32c6:	4b0c      	ldr	r3, [pc, #48]	; (32f8 <usb_d_ep_halt+0x4c>)
    32c8:	4798      	blx	r3
    32ca:	4603      	mov	r3, r0
    32cc:	e00f      	b.n	32ee <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    32ce:	79bb      	ldrb	r3, [r7, #6]
    32d0:	2b01      	cmp	r3, #1
    32d2:	d106      	bne.n	32e2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    32d4:	79fb      	ldrb	r3, [r7, #7]
    32d6:	2101      	movs	r1, #1
    32d8:	4618      	mov	r0, r3
    32da:	4b08      	ldr	r3, [pc, #32]	; (32fc <usb_d_ep_halt+0x50>)
    32dc:	4798      	blx	r3
    32de:	4603      	mov	r3, r0
    32e0:	e005      	b.n	32ee <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    32e2:	79fb      	ldrb	r3, [r7, #7]
    32e4:	2102      	movs	r1, #2
    32e6:	4618      	mov	r0, r3
    32e8:	4b04      	ldr	r3, [pc, #16]	; (32fc <usb_d_ep_halt+0x50>)
    32ea:	4798      	blx	r3
    32ec:	4603      	mov	r3, r0
	}
}
    32ee:	4618      	mov	r0, r3
    32f0:	3708      	adds	r7, #8
    32f2:	46bd      	mov	sp, r7
    32f4:	bd80      	pop	{r7, pc}
    32f6:	bf00      	nop
    32f8:	00003229 	.word	0x00003229
    32fc:	0000a26d 	.word	0x0000a26d

00003300 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3300:	b580      	push	{r7, lr}
    3302:	b086      	sub	sp, #24
    3304:	af00      	add	r7, sp, #0
    3306:	4603      	mov	r3, r0
    3308:	603a      	str	r2, [r7, #0]
    330a:	71fb      	strb	r3, [r7, #7]
    330c:	460b      	mov	r3, r1
    330e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3310:	79fb      	ldrb	r3, [r7, #7]
    3312:	4618      	mov	r0, r3
    3314:	4b16      	ldr	r3, [pc, #88]	; (3370 <usb_d_ep_register_callback+0x70>)
    3316:	4798      	blx	r3
    3318:	4603      	mov	r3, r0
    331a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3320:	015b      	lsls	r3, r3, #5
    3322:	4a14      	ldr	r2, [pc, #80]	; (3374 <usb_d_ep_register_callback+0x74>)
    3324:	4413      	add	r3, r2
    3326:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3328:	683b      	ldr	r3, [r7, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d001      	beq.n	3332 <usb_d_ep_register_callback+0x32>
    332e:	683b      	ldr	r3, [r7, #0]
    3330:	e000      	b.n	3334 <usb_d_ep_register_callback+0x34>
    3332:	4b11      	ldr	r3, [pc, #68]	; (3378 <usb_d_ep_register_callback+0x78>)
    3334:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3336:	f997 3017 	ldrsb.w	r3, [r7, #23]
    333a:	2b00      	cmp	r3, #0
    333c:	db13      	blt.n	3366 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    333e:	79bb      	ldrb	r3, [r7, #6]
    3340:	2b01      	cmp	r3, #1
    3342:	d008      	beq.n	3356 <usb_d_ep_register_callback+0x56>
    3344:	2b02      	cmp	r3, #2
    3346:	d00a      	beq.n	335e <usb_d_ep_register_callback+0x5e>
    3348:	2b00      	cmp	r3, #0
    334a:	d000      	beq.n	334e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    334c:	e00c      	b.n	3368 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    334e:	693b      	ldr	r3, [r7, #16]
    3350:	68fa      	ldr	r2, [r7, #12]
    3352:	615a      	str	r2, [r3, #20]
		break;
    3354:	e008      	b.n	3368 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3356:	693b      	ldr	r3, [r7, #16]
    3358:	68fa      	ldr	r2, [r7, #12]
    335a:	619a      	str	r2, [r3, #24]
		break;
    335c:	e004      	b.n	3368 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    335e:	693b      	ldr	r3, [r7, #16]
    3360:	68fa      	ldr	r2, [r7, #12]
    3362:	61da      	str	r2, [r3, #28]
		break;
    3364:	e000      	b.n	3368 <usb_d_ep_register_callback+0x68>
		return;
    3366:	bf00      	nop
	}
}
    3368:	3718      	adds	r7, #24
    336a:	46bd      	mov	sp, r7
    336c:	bd80      	pop	{r7, pc}
    336e:	bf00      	nop
    3370:	00002a29 	.word	0x00002a29
    3374:	20000a00 	.word	0x20000a00
    3378:	00002afd 	.word	0x00002afd

0000337c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    337c:	b480      	push	{r7}
    337e:	b085      	sub	sp, #20
    3380:	af00      	add	r7, sp, #0
    3382:	4603      	mov	r3, r0
    3384:	60b9      	str	r1, [r7, #8]
    3386:	607a      	str	r2, [r7, #4]
    3388:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    338a:	7bfb      	ldrb	r3, [r7, #15]
    338c:	f083 0301 	eor.w	r3, r3, #1
    3390:	b2db      	uxtb	r3, r3
    3392:	2b00      	cmp	r3, #0
    3394:	d000      	beq.n	3398 <assert+0x1c>
		__asm("BKPT #0");
    3396:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3398:	bf00      	nop
    339a:	3714      	adds	r7, #20
    339c:	46bd      	mov	sp, r7
    339e:	f85d 7b04 	ldr.w	r7, [sp], #4
    33a2:	4770      	bx	lr

000033a4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    33a4:	b480      	push	{r7}
    33a6:	b085      	sub	sp, #20
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
    33ac:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	60fb      	str	r3, [r7, #12]
    33b4:	e008      	b.n	33c8 <is_list_element+0x24>
		if (it == element) {
    33b6:	68fa      	ldr	r2, [r7, #12]
    33b8:	683b      	ldr	r3, [r7, #0]
    33ba:	429a      	cmp	r2, r3
    33bc:	d101      	bne.n	33c2 <is_list_element+0x1e>
			return true;
    33be:	2301      	movs	r3, #1
    33c0:	e006      	b.n	33d0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    33c2:	68fb      	ldr	r3, [r7, #12]
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	60fb      	str	r3, [r7, #12]
    33c8:	68fb      	ldr	r3, [r7, #12]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d1f3      	bne.n	33b6 <is_list_element+0x12>
		}
	}

	return false;
    33ce:	2300      	movs	r3, #0
}
    33d0:	4618      	mov	r0, r3
    33d2:	3714      	adds	r7, #20
    33d4:	46bd      	mov	sp, r7
    33d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33da:	4770      	bx	lr

000033dc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    33dc:	b580      	push	{r7, lr}
    33de:	b082      	sub	sp, #8
    33e0:	af00      	add	r7, sp, #0
    33e2:	6078      	str	r0, [r7, #4]
    33e4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    33e6:	6839      	ldr	r1, [r7, #0]
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	4b0f      	ldr	r3, [pc, #60]	; (3428 <list_insert_as_head+0x4c>)
    33ec:	4798      	blx	r3
    33ee:	4603      	mov	r3, r0
    33f0:	2b00      	cmp	r3, #0
    33f2:	bf14      	ite	ne
    33f4:	2301      	movne	r3, #1
    33f6:	2300      	moveq	r3, #0
    33f8:	b2db      	uxtb	r3, r3
    33fa:	f083 0301 	eor.w	r3, r3, #1
    33fe:	b2db      	uxtb	r3, r3
    3400:	f003 0301 	and.w	r3, r3, #1
    3404:	b2db      	uxtb	r3, r3
    3406:	2239      	movs	r2, #57	; 0x39
    3408:	4908      	ldr	r1, [pc, #32]	; (342c <list_insert_as_head+0x50>)
    340a:	4618      	mov	r0, r3
    340c:	4b08      	ldr	r3, [pc, #32]	; (3430 <list_insert_as_head+0x54>)
    340e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	681a      	ldr	r2, [r3, #0]
    3414:	683b      	ldr	r3, [r7, #0]
    3416:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	683a      	ldr	r2, [r7, #0]
    341c:	601a      	str	r2, [r3, #0]
}
    341e:	bf00      	nop
    3420:	3708      	adds	r7, #8
    3422:	46bd      	mov	sp, r7
    3424:	bd80      	pop	{r7, pc}
    3426:	bf00      	nop
    3428:	000033a5 	.word	0x000033a5
    342c:	000111cc 	.word	0x000111cc
    3430:	0000337d 	.word	0x0000337d

00003434 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3434:	b480      	push	{r7}
    3436:	b083      	sub	sp, #12
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
    343c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	681a      	ldr	r2, [r3, #0]
    3442:	683b      	ldr	r3, [r7, #0]
    3444:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	683a      	ldr	r2, [r7, #0]
    344a:	601a      	str	r2, [r3, #0]
}
    344c:	bf00      	nop
    344e:	370c      	adds	r7, #12
    3450:	46bd      	mov	sp, r7
    3452:	f85d 7b04 	ldr.w	r7, [sp], #4
    3456:	4770      	bx	lr

00003458 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3458:	b580      	push	{r7, lr}
    345a:	b084      	sub	sp, #16
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
    3460:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3468:	6839      	ldr	r1, [r7, #0]
    346a:	6878      	ldr	r0, [r7, #4]
    346c:	4b16      	ldr	r3, [pc, #88]	; (34c8 <list_insert_at_end+0x70>)
    346e:	4798      	blx	r3
    3470:	4603      	mov	r3, r0
    3472:	2b00      	cmp	r3, #0
    3474:	bf14      	ite	ne
    3476:	2301      	movne	r3, #1
    3478:	2300      	moveq	r3, #0
    347a:	b2db      	uxtb	r3, r3
    347c:	f083 0301 	eor.w	r3, r3, #1
    3480:	b2db      	uxtb	r3, r3
    3482:	f003 0301 	and.w	r3, r3, #1
    3486:	b2db      	uxtb	r3, r3
    3488:	224f      	movs	r2, #79	; 0x4f
    348a:	4910      	ldr	r1, [pc, #64]	; (34cc <list_insert_at_end+0x74>)
    348c:	4618      	mov	r0, r3
    348e:	4b10      	ldr	r3, [pc, #64]	; (34d0 <list_insert_at_end+0x78>)
    3490:	4798      	blx	r3

	if (!list->head) {
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	2b00      	cmp	r3, #0
    3498:	d109      	bne.n	34ae <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	683a      	ldr	r2, [r7, #0]
    349e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    34a0:	683b      	ldr	r3, [r7, #0]
    34a2:	2200      	movs	r2, #0
    34a4:	601a      	str	r2, [r3, #0]
		return;
    34a6:	e00c      	b.n	34c2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    34a8:	68fb      	ldr	r3, [r7, #12]
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    34ae:	68fb      	ldr	r3, [r7, #12]
    34b0:	681b      	ldr	r3, [r3, #0]
    34b2:	2b00      	cmp	r3, #0
    34b4:	d1f8      	bne.n	34a8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    34b6:	68fb      	ldr	r3, [r7, #12]
    34b8:	683a      	ldr	r2, [r7, #0]
    34ba:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    34bc:	683b      	ldr	r3, [r7, #0]
    34be:	2200      	movs	r2, #0
    34c0:	601a      	str	r2, [r3, #0]
}
    34c2:	3710      	adds	r7, #16
    34c4:	46bd      	mov	sp, r7
    34c6:	bd80      	pop	{r7, pc}
    34c8:	000033a5 	.word	0x000033a5
    34cc:	000111cc 	.word	0x000111cc
    34d0:	0000337d 	.word	0x0000337d

000034d4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    34d4:	b480      	push	{r7}
    34d6:	b085      	sub	sp, #20
    34d8:	af00      	add	r7, sp, #0
    34da:	6078      	str	r0, [r7, #4]
	if (list->head) {
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d009      	beq.n	34f8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	681b      	ldr	r3, [r3, #0]
    34ee:	681a      	ldr	r2, [r3, #0]
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    34f4:	68fb      	ldr	r3, [r7, #12]
    34f6:	e000      	b.n	34fa <list_remove_head+0x26>
	}

	return NULL;
    34f8:	2300      	movs	r3, #0
}
    34fa:	4618      	mov	r0, r3
    34fc:	3714      	adds	r7, #20
    34fe:	46bd      	mov	sp, r7
    3500:	f85d 7b04 	ldr.w	r7, [sp], #4
    3504:	4770      	bx	lr

00003506 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3506:	b480      	push	{r7}
    3508:	b085      	sub	sp, #20
    350a:	af00      	add	r7, sp, #0
    350c:	6078      	str	r0, [r7, #4]
    350e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3510:	683b      	ldr	r3, [r7, #0]
    3512:	2b00      	cmp	r3, #0
    3514:	d101      	bne.n	351a <list_delete_element+0x14>
		return false;
    3516:	2300      	movs	r3, #0
    3518:	e024      	b.n	3564 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    351a:	687b      	ldr	r3, [r7, #4]
    351c:	681a      	ldr	r2, [r3, #0]
    351e:	683b      	ldr	r3, [r7, #0]
    3520:	429a      	cmp	r2, r3
    3522:	d106      	bne.n	3532 <list_delete_element+0x2c>
		list->head = list->head->next;
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	681b      	ldr	r3, [r3, #0]
    3528:	681a      	ldr	r2, [r3, #0]
    352a:	687b      	ldr	r3, [r7, #4]
    352c:	601a      	str	r2, [r3, #0]
		return true;
    352e:	2301      	movs	r3, #1
    3530:	e018      	b.n	3564 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3538:	e002      	b.n	3540 <list_delete_element+0x3a>
			it = it->next;
    353a:	68fb      	ldr	r3, [r7, #12]
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3540:	68fb      	ldr	r3, [r7, #12]
    3542:	2b00      	cmp	r3, #0
    3544:	d004      	beq.n	3550 <list_delete_element+0x4a>
    3546:	68fb      	ldr	r3, [r7, #12]
    3548:	681a      	ldr	r2, [r3, #0]
    354a:	683b      	ldr	r3, [r7, #0]
    354c:	429a      	cmp	r2, r3
    354e:	d1f4      	bne.n	353a <list_delete_element+0x34>
		}
		if (it) {
    3550:	68fb      	ldr	r3, [r7, #12]
    3552:	2b00      	cmp	r3, #0
    3554:	d005      	beq.n	3562 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3556:	683b      	ldr	r3, [r7, #0]
    3558:	681a      	ldr	r2, [r3, #0]
    355a:	68fb      	ldr	r3, [r7, #12]
    355c:	601a      	str	r2, [r3, #0]
			return true;
    355e:	2301      	movs	r3, #1
    3560:	e000      	b.n	3564 <list_delete_element+0x5e>
		}
	}

	return false;
    3562:	2300      	movs	r3, #0
}
    3564:	4618      	mov	r0, r3
    3566:	3714      	adds	r7, #20
    3568:	46bd      	mov	sp, r7
    356a:	f85d 7b04 	ldr.w	r7, [sp], #4
    356e:	4770      	bx	lr

00003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3570:	b480      	push	{r7}
    3572:	b083      	sub	sp, #12
    3574:	af00      	add	r7, sp, #0
    3576:	4603      	mov	r3, r0
    3578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    357e:	2b00      	cmp	r3, #0
    3580:	db0b      	blt.n	359a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3582:	4909      	ldr	r1, [pc, #36]	; (35a8 <__NVIC_EnableIRQ+0x38>)
    3584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3588:	095b      	lsrs	r3, r3, #5
    358a:	88fa      	ldrh	r2, [r7, #6]
    358c:	f002 021f 	and.w	r2, r2, #31
    3590:	2001      	movs	r0, #1
    3592:	fa00 f202 	lsl.w	r2, r0, r2
    3596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    359a:	bf00      	nop
    359c:	370c      	adds	r7, #12
    359e:	46bd      	mov	sp, r7
    35a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35a4:	4770      	bx	lr
    35a6:	bf00      	nop
    35a8:	e000e100 	.word	0xe000e100

000035ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    35ac:	b480      	push	{r7}
    35ae:	b083      	sub	sp, #12
    35b0:	af00      	add	r7, sp, #0
    35b2:	4603      	mov	r3, r0
    35b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    35b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35ba:	2b00      	cmp	r3, #0
    35bc:	db10      	blt.n	35e0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35be:	490b      	ldr	r1, [pc, #44]	; (35ec <__NVIC_DisableIRQ+0x40>)
    35c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35c4:	095b      	lsrs	r3, r3, #5
    35c6:	88fa      	ldrh	r2, [r7, #6]
    35c8:	f002 021f 	and.w	r2, r2, #31
    35cc:	2001      	movs	r0, #1
    35ce:	fa00 f202 	lsl.w	r2, r0, r2
    35d2:	3320      	adds	r3, #32
    35d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    35d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    35e0:	bf00      	nop
    35e2:	370c      	adds	r7, #12
    35e4:	46bd      	mov	sp, r7
    35e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35ea:	4770      	bx	lr
    35ec:	e000e100 	.word	0xe000e100

000035f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    35f0:	b480      	push	{r7}
    35f2:	b083      	sub	sp, #12
    35f4:	af00      	add	r7, sp, #0
    35f6:	4603      	mov	r3, r0
    35f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    35fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35fe:	2b00      	cmp	r3, #0
    3600:	db0c      	blt.n	361c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3602:	4909      	ldr	r1, [pc, #36]	; (3628 <__NVIC_ClearPendingIRQ+0x38>)
    3604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3608:	095b      	lsrs	r3, r3, #5
    360a:	88fa      	ldrh	r2, [r7, #6]
    360c:	f002 021f 	and.w	r2, r2, #31
    3610:	2001      	movs	r0, #1
    3612:	fa00 f202 	lsl.w	r2, r0, r2
    3616:	3360      	adds	r3, #96	; 0x60
    3618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    361c:	bf00      	nop
    361e:	370c      	adds	r7, #12
    3620:	46bd      	mov	sp, r7
    3622:	f85d 7b04 	ldr.w	r7, [sp], #4
    3626:	4770      	bx	lr
    3628:	e000e100 	.word	0xe000e100

0000362c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    362c:	b480      	push	{r7}
    362e:	b083      	sub	sp, #12
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3638:	095b      	lsrs	r3, r3, #5
    363a:	f003 0301 	and.w	r3, r3, #1
    363e:	2b00      	cmp	r3, #0
    3640:	bf14      	ite	ne
    3642:	2301      	movne	r3, #1
    3644:	2300      	moveq	r3, #0
    3646:	b2db      	uxtb	r3, r3
}
    3648:	4618      	mov	r0, r3
    364a:	370c      	adds	r7, #12
    364c:	46bd      	mov	sp, r7
    364e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3652:	4770      	bx	lr

00003654 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3654:	b480      	push	{r7}
    3656:	b083      	sub	sp, #12
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
    365c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	683a      	ldr	r2, [r7, #0]
    3662:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3664:	bf00      	nop
    3666:	370c      	adds	r7, #12
    3668:	46bd      	mov	sp, r7
    366a:	f85d 7b04 	ldr.w	r7, [sp], #4
    366e:	4770      	bx	lr

00003670 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3670:	b480      	push	{r7}
    3672:	b083      	sub	sp, #12
    3674:	af00      	add	r7, sp, #0
    3676:	6078      	str	r0, [r7, #4]
    3678:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	683a      	ldr	r2, [r7, #0]
    367e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3680:	bf00      	nop
    3682:	370c      	adds	r7, #12
    3684:	46bd      	mov	sp, r7
    3686:	f85d 7b04 	ldr.w	r7, [sp], #4
    368a:	4770      	bx	lr

0000368c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    368c:	b480      	push	{r7}
    368e:	b083      	sub	sp, #12
    3690:	af00      	add	r7, sp, #0
    3692:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	699b      	ldr	r3, [r3, #24]
    3698:	f043 0201 	orr.w	r2, r3, #1
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    36a0:	bf00      	nop
    36a2:	370c      	adds	r7, #12
    36a4:	46bd      	mov	sp, r7
    36a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    36aa:	4770      	bx	lr

000036ac <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    36ac:	b480      	push	{r7}
    36ae:	b085      	sub	sp, #20
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	699b      	ldr	r3, [r3, #24]
    36b8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	f003 0301 	and.w	r3, r3, #1
    36c0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    36c2:	68fb      	ldr	r3, [r7, #12]
    36c4:	2b00      	cmp	r3, #0
    36c6:	bf14      	ite	ne
    36c8:	2301      	movne	r3, #1
    36ca:	2300      	moveq	r3, #0
    36cc:	b2db      	uxtb	r3, r3
}
    36ce:	4618      	mov	r0, r3
    36d0:	3714      	adds	r7, #20
    36d2:	46bd      	mov	sp, r7
    36d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    36d8:	4770      	bx	lr

000036da <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    36da:	b480      	push	{r7}
    36dc:	b083      	sub	sp, #12
    36de:	af00      	add	r7, sp, #0
    36e0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    36e2:	687b      	ldr	r3, [r7, #4]
    36e4:	699b      	ldr	r3, [r3, #24]
    36e6:	f023 0201 	bic.w	r2, r3, #1
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    36ee:	bf00      	nop
    36f0:	370c      	adds	r7, #12
    36f2:	46bd      	mov	sp, r7
    36f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    36f8:	4770      	bx	lr

000036fa <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    36fa:	b480      	push	{r7}
    36fc:	b083      	sub	sp, #12
    36fe:	af00      	add	r7, sp, #0
    3700:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	699b      	ldr	r3, [r3, #24]
    3706:	f043 0202 	orr.w	r2, r3, #2
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    370e:	bf00      	nop
    3710:	370c      	adds	r7, #12
    3712:	46bd      	mov	sp, r7
    3714:	f85d 7b04 	ldr.w	r7, [sp], #4
    3718:	4770      	bx	lr

0000371a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    371a:	b480      	push	{r7}
    371c:	b083      	sub	sp, #12
    371e:	af00      	add	r7, sp, #0
    3720:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3722:	687b      	ldr	r3, [r7, #4]
    3724:	699b      	ldr	r3, [r3, #24]
    3726:	f023 0202 	bic.w	r2, r3, #2
    372a:	687b      	ldr	r3, [r7, #4]
    372c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    372e:	bf00      	nop
    3730:	370c      	adds	r7, #12
    3732:	46bd      	mov	sp, r7
    3734:	f85d 7b04 	ldr.w	r7, [sp], #4
    3738:	4770      	bx	lr

0000373a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    373a:	b480      	push	{r7}
    373c:	b083      	sub	sp, #12
    373e:	af00      	add	r7, sp, #0
    3740:	6078      	str	r0, [r7, #4]
    3742:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3744:	687b      	ldr	r3, [r7, #4]
    3746:	699a      	ldr	r2, [r3, #24]
    3748:	683b      	ldr	r3, [r7, #0]
    374a:	431a      	orrs	r2, r3
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3750:	bf00      	nop
    3752:	370c      	adds	r7, #12
    3754:	46bd      	mov	sp, r7
    3756:	f85d 7b04 	ldr.w	r7, [sp], #4
    375a:	4770      	bx	lr

0000375c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    375c:	b480      	push	{r7}
    375e:	b083      	sub	sp, #12
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
    3764:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	683a      	ldr	r2, [r7, #0]
    376a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    376c:	bf00      	nop
    376e:	370c      	adds	r7, #12
    3770:	46bd      	mov	sp, r7
    3772:	f85d 7b04 	ldr.w	r7, [sp], #4
    3776:	4770      	bx	lr

00003778 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3778:	b480      	push	{r7}
    377a:	b083      	sub	sp, #12
    377c:	af00      	add	r7, sp, #0
    377e:	6078      	str	r0, [r7, #4]
    3780:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	683a      	ldr	r2, [r7, #0]
    3786:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3788:	bf00      	nop
    378a:	370c      	adds	r7, #12
    378c:	46bd      	mov	sp, r7
    378e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3792:	4770      	bx	lr

00003794 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3794:	b480      	push	{r7}
    3796:	b083      	sub	sp, #12
    3798:	af00      	add	r7, sp, #0
    379a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    37a0:	4618      	mov	r0, r3
    37a2:	370c      	adds	r7, #12
    37a4:	46bd      	mov	sp, r7
    37a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37aa:	4770      	bx	lr

000037ac <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    37ac:	b480      	push	{r7}
    37ae:	b083      	sub	sp, #12
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
    37b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    37b6:	687b      	ldr	r3, [r7, #4]
    37b8:	683a      	ldr	r2, [r7, #0]
    37ba:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    37bc:	bf00      	nop
    37be:	370c      	adds	r7, #12
    37c0:	46bd      	mov	sp, r7
    37c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37c6:	4770      	bx	lr

000037c8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    37c8:	b480      	push	{r7}
    37ca:	b083      	sub	sp, #12
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
    37d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	683a      	ldr	r2, [r7, #0]
    37d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    37da:	bf00      	nop
    37dc:	370c      	adds	r7, #12
    37de:	46bd      	mov	sp, r7
    37e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e4:	4770      	bx	lr

000037e6 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    37e6:	b480      	push	{r7}
    37e8:	b083      	sub	sp, #12
    37ea:	af00      	add	r7, sp, #0
    37ec:	6078      	str	r0, [r7, #4]
    37ee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    37f0:	687b      	ldr	r3, [r7, #4]
    37f2:	683a      	ldr	r2, [r7, #0]
    37f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    37f8:	bf00      	nop
    37fa:	370c      	adds	r7, #12
    37fc:	46bd      	mov	sp, r7
    37fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3802:	4770      	bx	lr

00003804 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3804:	b480      	push	{r7}
    3806:	b083      	sub	sp, #12
    3808:	af00      	add	r7, sp, #0
    380a:	6078      	str	r0, [r7, #4]
    380c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	683a      	ldr	r2, [r7, #0]
    3812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3816:	bf00      	nop
    3818:	370c      	adds	r7, #12
    381a:	46bd      	mov	sp, r7
    381c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3820:	4770      	bx	lr

00003822 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3822:	b480      	push	{r7}
    3824:	b083      	sub	sp, #12
    3826:	af00      	add	r7, sp, #0
    3828:	6078      	str	r0, [r7, #4]
    382a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    382c:	687b      	ldr	r3, [r7, #4]
    382e:	683a      	ldr	r2, [r7, #0]
    3830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3834:	bf00      	nop
    3836:	370c      	adds	r7, #12
    3838:	46bd      	mov	sp, r7
    383a:	f85d 7b04 	ldr.w	r7, [sp], #4
    383e:	4770      	bx	lr

00003840 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3840:	b480      	push	{r7}
    3842:	b083      	sub	sp, #12
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
    3848:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    384a:	687b      	ldr	r3, [r7, #4]
    384c:	683a      	ldr	r2, [r7, #0]
    384e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3852:	bf00      	nop
    3854:	370c      	adds	r7, #12
    3856:	46bd      	mov	sp, r7
    3858:	f85d 7b04 	ldr.w	r7, [sp], #4
    385c:	4770      	bx	lr

0000385e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    385e:	b480      	push	{r7}
    3860:	b083      	sub	sp, #12
    3862:	af00      	add	r7, sp, #0
    3864:	6078      	str	r0, [r7, #4]
    3866:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3868:	687b      	ldr	r3, [r7, #4]
    386a:	683a      	ldr	r2, [r7, #0]
    386c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3870:	bf00      	nop
    3872:	370c      	adds	r7, #12
    3874:	46bd      	mov	sp, r7
    3876:	f85d 7b04 	ldr.w	r7, [sp], #4
    387a:	4770      	bx	lr

0000387c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    387c:	b480      	push	{r7}
    387e:	b083      	sub	sp, #12
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
    3884:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	683a      	ldr	r2, [r7, #0]
    388a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    388e:	bf00      	nop
    3890:	370c      	adds	r7, #12
    3892:	46bd      	mov	sp, r7
    3894:	f85d 7b04 	ldr.w	r7, [sp], #4
    3898:	4770      	bx	lr

0000389a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    389a:	b480      	push	{r7}
    389c:	b083      	sub	sp, #12
    389e:	af00      	add	r7, sp, #0
    38a0:	6078      	str	r0, [r7, #4]
    38a2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	683a      	ldr	r2, [r7, #0]
    38a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    38ac:	bf00      	nop
    38ae:	370c      	adds	r7, #12
    38b0:	46bd      	mov	sp, r7
    38b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b6:	4770      	bx	lr

000038b8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    38b8:	b480      	push	{r7}
    38ba:	b083      	sub	sp, #12
    38bc:	af00      	add	r7, sp, #0
    38be:	6078      	str	r0, [r7, #4]
    38c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    38c2:	687b      	ldr	r3, [r7, #4]
    38c4:	683a      	ldr	r2, [r7, #0]
    38c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    38ca:	bf00      	nop
    38cc:	370c      	adds	r7, #12
    38ce:	46bd      	mov	sp, r7
    38d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    38d4:	4770      	bx	lr
	...

000038d8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    38d8:	b580      	push	{r7, lr}
    38da:	b082      	sub	sp, #8
    38dc:	af00      	add	r7, sp, #0
    38de:	6078      	str	r0, [r7, #4]
    38e0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	683a      	ldr	r2, [r7, #0]
    38e6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	4618      	mov	r0, r3
    38ee:	4b56      	ldr	r3, [pc, #344]	; (3a48 <_can_async_init+0x170>)
    38f0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    38f2:	bf00      	nop
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	4618      	mov	r0, r3
    38fa:	4b54      	ldr	r3, [pc, #336]	; (3a4c <_can_async_init+0x174>)
    38fc:	4798      	blx	r3
    38fe:	4603      	mov	r3, r0
    3900:	f083 0301 	eor.w	r3, r3, #1
    3904:	b2db      	uxtb	r3, r3
    3906:	2b00      	cmp	r3, #0
    3908:	d1f4      	bne.n	38f4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    390a:	687b      	ldr	r3, [r7, #4]
    390c:	681b      	ldr	r3, [r3, #0]
    390e:	4618      	mov	r0, r3
    3910:	4b4f      	ldr	r3, [pc, #316]	; (3a50 <_can_async_init+0x178>)
    3912:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	4a4f      	ldr	r2, [pc, #316]	; (3a54 <_can_async_init+0x17c>)
    3918:	4293      	cmp	r3, r2
    391a:	d17c      	bne.n	3a16 <_can_async_init+0x13e>
		_can1_dev    = dev;
    391c:	4a4e      	ldr	r2, [pc, #312]	; (3a58 <_can_async_init+0x180>)
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	4a4d      	ldr	r2, [pc, #308]	; (3a5c <_can_async_init+0x184>)
    3926:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3928:	687b      	ldr	r3, [r7, #4]
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	f44f 7100 	mov.w	r1, #512	; 0x200
    3930:	4618      	mov	r0, r3
    3932:	4b4b      	ldr	r3, [pc, #300]	; (3a60 <_can_async_init+0x188>)
    3934:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	681b      	ldr	r3, [r3, #0]
    393a:	2102      	movs	r1, #2
    393c:	4618      	mov	r0, r3
    393e:	4b49      	ldr	r3, [pc, #292]	; (3a64 <_can_async_init+0x18c>)
    3940:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	f640 2103 	movw	r1, #2563	; 0xa03
    394a:	4618      	mov	r0, r3
    394c:	4b46      	ldr	r3, [pc, #280]	; (3a68 <_can_async_init+0x190>)
    394e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3958:	4618      	mov	r0, r3
    395a:	4b44      	ldr	r3, [pc, #272]	; (3a6c <_can_async_init+0x194>)
    395c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	681a      	ldr	r2, [r3, #0]
    3962:	4b43      	ldr	r3, [pc, #268]	; (3a70 <_can_async_init+0x198>)
    3964:	b29b      	uxth	r3, r3
    3966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    396a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    396e:	4619      	mov	r1, r3
    3970:	4610      	mov	r0, r2
    3972:	4b40      	ldr	r3, [pc, #256]	; (3a74 <_can_async_init+0x19c>)
    3974:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	2107      	movs	r1, #7
    397c:	4618      	mov	r0, r3
    397e:	4b3e      	ldr	r3, [pc, #248]	; (3a78 <_can_async_init+0x1a0>)
    3980:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	2107      	movs	r1, #7
    3988:	4618      	mov	r0, r3
    398a:	4b3c      	ldr	r3, [pc, #240]	; (3a7c <_can_async_init+0x1a4>)
    398c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	681a      	ldr	r2, [r3, #0]
    3992:	4b3b      	ldr	r3, [pc, #236]	; (3a80 <_can_async_init+0x1a8>)
    3994:	b29b      	uxth	r3, r3
    3996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    399a:	4619      	mov	r1, r3
    399c:	4610      	mov	r0, r2
    399e:	4b39      	ldr	r3, [pc, #228]	; (3a84 <_can_async_init+0x1ac>)
    39a0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	681a      	ldr	r2, [r3, #0]
    39a6:	4b38      	ldr	r3, [pc, #224]	; (3a88 <_can_async_init+0x1b0>)
    39a8:	b29b      	uxth	r3, r3
    39aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    39ae:	4619      	mov	r1, r3
    39b0:	4610      	mov	r0, r2
    39b2:	4b36      	ldr	r3, [pc, #216]	; (3a8c <_can_async_init+0x1b4>)
    39b4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	681b      	ldr	r3, [r3, #0]
    39ba:	2108      	movs	r1, #8
    39bc:	4618      	mov	r0, r3
    39be:	4b34      	ldr	r3, [pc, #208]	; (3a90 <_can_async_init+0x1b8>)
    39c0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	681a      	ldr	r2, [r3, #0]
    39c6:	4b33      	ldr	r3, [pc, #204]	; (3a94 <_can_async_init+0x1bc>)
    39c8:	b29b      	uxth	r3, r3
    39ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    39ce:	4619      	mov	r1, r3
    39d0:	4610      	mov	r0, r2
    39d2:	4b31      	ldr	r3, [pc, #196]	; (3a98 <_can_async_init+0x1c0>)
    39d4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	681a      	ldr	r2, [r3, #0]
    39da:	4b30      	ldr	r3, [pc, #192]	; (3a9c <_can_async_init+0x1c4>)
    39dc:	b29b      	uxth	r3, r3
    39de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    39e2:	4619      	mov	r1, r3
    39e4:	4610      	mov	r0, r2
    39e6:	4b2e      	ldr	r3, [pc, #184]	; (3aa0 <_can_async_init+0x1c8>)
    39e8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	681b      	ldr	r3, [r3, #0]
    39ee:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    39f2:	4618      	mov	r0, r3
    39f4:	4b2b      	ldr	r3, [pc, #172]	; (3aa4 <_can_async_init+0x1cc>)
    39f6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    39f8:	204f      	movs	r0, #79	; 0x4f
    39fa:	4b2b      	ldr	r3, [pc, #172]	; (3aa8 <_can_async_init+0x1d0>)
    39fc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    39fe:	204f      	movs	r0, #79	; 0x4f
    3a00:	4b2a      	ldr	r3, [pc, #168]	; (3aac <_can_async_init+0x1d4>)
    3a02:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3a04:	204f      	movs	r0, #79	; 0x4f
    3a06:	4b2a      	ldr	r3, [pc, #168]	; (3ab0 <_can_async_init+0x1d8>)
    3a08:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	2101      	movs	r1, #1
    3a10:	4618      	mov	r0, r3
    3a12:	4b28      	ldr	r3, [pc, #160]	; (3ab4 <_can_async_init+0x1dc>)
    3a14:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	4618      	mov	r0, r3
    3a1c:	4b26      	ldr	r3, [pc, #152]	; (3ab8 <_can_async_init+0x1e0>)
    3a1e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3a20:	687b      	ldr	r3, [r7, #4]
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	4618      	mov	r0, r3
    3a26:	4b25      	ldr	r3, [pc, #148]	; (3abc <_can_async_init+0x1e4>)
    3a28:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3a2a:	bf00      	nop
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	681b      	ldr	r3, [r3, #0]
    3a30:	4618      	mov	r0, r3
    3a32:	4b06      	ldr	r3, [pc, #24]	; (3a4c <_can_async_init+0x174>)
    3a34:	4798      	blx	r3
    3a36:	4603      	mov	r3, r0
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d1f7      	bne.n	3a2c <_can_async_init+0x154>
	};

	return ERR_NONE;
    3a3c:	2300      	movs	r3, #0
}
    3a3e:	4618      	mov	r0, r3
    3a40:	3708      	adds	r7, #8
    3a42:	46bd      	mov	sp, r7
    3a44:	bd80      	pop	{r7, pc}
    3a46:	bf00      	nop
    3a48:	0000368d 	.word	0x0000368d
    3a4c:	000036ad 	.word	0x000036ad
    3a50:	000036fb 	.word	0x000036fb
    3a54:	42000400 	.word	0x42000400
    3a58:	20000b20 	.word	0x20000b20
    3a5c:	20000004 	.word	0x20000004
    3a60:	0000373b 	.word	0x0000373b
    3a64:	00003655 	.word	0x00003655
    3a68:	0000375d 	.word	0x0000375d
    3a6c:	00003671 	.word	0x00003671
    3a70:	200094b4 	.word	0x200094b4
    3a74:	00003841 	.word	0x00003841
    3a78:	0000385f 	.word	0x0000385f
    3a7c:	0000389b 	.word	0x0000389b
    3a80:	2000946c 	.word	0x2000946c
    3a84:	0000387d 	.word	0x0000387d
    3a88:	20000a80 	.word	0x20000a80
    3a8c:	000038b9 	.word	0x000038b9
    3a90:	000037c9 	.word	0x000037c9
    3a94:	20000a90 	.word	0x20000a90
    3a98:	000037e7 	.word	0x000037e7
    3a9c:	20000b10 	.word	0x20000b10
    3aa0:	00003805 	.word	0x00003805
    3aa4:	00003823 	.word	0x00003823
    3aa8:	000035ad 	.word	0x000035ad
    3aac:	000035f1 	.word	0x000035f1
    3ab0:	00003571 	.word	0x00003571
    3ab4:	000037ad 	.word	0x000037ad
    3ab8:	0000371b 	.word	0x0000371b
    3abc:	000036db 	.word	0x000036db

00003ac0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3ac0:	b590      	push	{r4, r7, lr}
    3ac2:	b083      	sub	sp, #12
    3ac4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3ac6:	4b2c      	ldr	r3, [pc, #176]	; (3b78 <CAN1_Handler+0xb8>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	4618      	mov	r0, r3
    3ad2:	4b2a      	ldr	r3, [pc, #168]	; (3b7c <CAN1_Handler+0xbc>)
    3ad4:	4798      	blx	r3
    3ad6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3ad8:	683b      	ldr	r3, [r7, #0]
    3ada:	f003 0301 	and.w	r3, r3, #1
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d003      	beq.n	3aea <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	689b      	ldr	r3, [r3, #8]
    3ae6:	6878      	ldr	r0, [r7, #4]
    3ae8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3af0:	2b00      	cmp	r3, #0
    3af2:	d003      	beq.n	3afc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3af4:	687b      	ldr	r3, [r7, #4]
    3af6:	685b      	ldr	r3, [r3, #4]
    3af8:	6878      	ldr	r0, [r7, #4]
    3afa:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3afc:	683b      	ldr	r3, [r7, #0]
    3afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3b02:	2b00      	cmp	r3, #0
    3b04:	d004      	beq.n	3b10 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	68db      	ldr	r3, [r3, #12]
    3b0a:	2103      	movs	r1, #3
    3b0c:	6878      	ldr	r0, [r7, #4]
    3b0e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3b10:	683b      	ldr	r3, [r7, #0]
    3b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3b16:	2b00      	cmp	r3, #0
    3b18:	d004      	beq.n	3b24 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	68db      	ldr	r3, [r3, #12]
    3b1e:	2100      	movs	r1, #0
    3b20:	6878      	ldr	r0, [r7, #4]
    3b22:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3b24:	683b      	ldr	r3, [r7, #0]
    3b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d00f      	beq.n	3b4e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3b2e:	687b      	ldr	r3, [r7, #4]
    3b30:	68dc      	ldr	r4, [r3, #12]
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	4618      	mov	r0, r3
    3b38:	4b11      	ldr	r3, [pc, #68]	; (3b80 <CAN1_Handler+0xc0>)
    3b3a:	4798      	blx	r3
    3b3c:	4603      	mov	r3, r0
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d001      	beq.n	3b46 <CAN1_Handler+0x86>
    3b42:	2302      	movs	r3, #2
    3b44:	e000      	b.n	3b48 <CAN1_Handler+0x88>
    3b46:	2301      	movs	r3, #1
    3b48:	4619      	mov	r1, r3
    3b4a:	6878      	ldr	r0, [r7, #4]
    3b4c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3b4e:	683b      	ldr	r3, [r7, #0]
    3b50:	f003 0308 	and.w	r3, r3, #8
    3b54:	2b00      	cmp	r3, #0
    3b56:	d004      	beq.n	3b62 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	68db      	ldr	r3, [r3, #12]
    3b5c:	2104      	movs	r1, #4
    3b5e:	6878      	ldr	r0, [r7, #4]
    3b60:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	6839      	ldr	r1, [r7, #0]
    3b68:	4618      	mov	r0, r3
    3b6a:	4b06      	ldr	r3, [pc, #24]	; (3b84 <CAN1_Handler+0xc4>)
    3b6c:	4798      	blx	r3
}
    3b6e:	bf00      	nop
    3b70:	370c      	adds	r7, #12
    3b72:	46bd      	mov	sp, r7
    3b74:	bd90      	pop	{r4, r7, pc}
    3b76:	bf00      	nop
    3b78:	20000b20 	.word	0x20000b20
    3b7c:	00003795 	.word	0x00003795
    3b80:	0000362d 	.word	0x0000362d
    3b84:	00003779 	.word	0x00003779

00003b88 <__NVIC_SetPendingIRQ>:
{
    3b88:	b480      	push	{r7}
    3b8a:	b083      	sub	sp, #12
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	4603      	mov	r3, r0
    3b90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b96:	2b00      	cmp	r3, #0
    3b98:	db0c      	blt.n	3bb4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b9a:	4909      	ldr	r1, [pc, #36]	; (3bc0 <__NVIC_SetPendingIRQ+0x38>)
    3b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ba0:	095b      	lsrs	r3, r3, #5
    3ba2:	88fa      	ldrh	r2, [r7, #6]
    3ba4:	f002 021f 	and.w	r2, r2, #31
    3ba8:	2001      	movs	r0, #1
    3baa:	fa00 f202 	lsl.w	r2, r0, r2
    3bae:	3340      	adds	r3, #64	; 0x40
    3bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3bb4:	bf00      	nop
    3bb6:	370c      	adds	r7, #12
    3bb8:	46bd      	mov	sp, r7
    3bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bbe:	4770      	bx	lr
    3bc0:	e000e100 	.word	0xe000e100

00003bc4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3bc4:	b580      	push	{r7, lr}
    3bc6:	b082      	sub	sp, #8
    3bc8:	af00      	add	r7, sp, #0
    3bca:	4603      	mov	r3, r0
    3bcc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3bce:	79fb      	ldrb	r3, [r7, #7]
    3bd0:	b21b      	sxth	r3, r3
    3bd2:	4618      	mov	r0, r3
    3bd4:	4b02      	ldr	r3, [pc, #8]	; (3be0 <_irq_set+0x1c>)
    3bd6:	4798      	blx	r3
}
    3bd8:	bf00      	nop
    3bda:	3708      	adds	r7, #8
    3bdc:	46bd      	mov	sp, r7
    3bde:	bd80      	pop	{r7, pc}
    3be0:	00003b89 	.word	0x00003b89

00003be4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3be4:	b480      	push	{r7}
    3be6:	b083      	sub	sp, #12
    3be8:	af00      	add	r7, sp, #0
    3bea:	4603      	mov	r3, r0
    3bec:	6039      	str	r1, [r7, #0]
    3bee:	80fb      	strh	r3, [r7, #6]
    3bf0:	4613      	mov	r3, r2
    3bf2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3bf4:	797b      	ldrb	r3, [r7, #5]
    3bf6:	3b04      	subs	r3, #4
    3bf8:	2b05      	cmp	r3, #5
    3bfa:	d86b      	bhi.n	3cd4 <_get_cycles_for_us_internal+0xf0>
    3bfc:	a201      	add	r2, pc, #4	; (adr r2, 3c04 <_get_cycles_for_us_internal+0x20>)
    3bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c02:	bf00      	nop
    3c04:	00003cb3 	.word	0x00003cb3
    3c08:	00003c93 	.word	0x00003c93
    3c0c:	00003c75 	.word	0x00003c75
    3c10:	00003c57 	.word	0x00003c57
    3c14:	00003c39 	.word	0x00003c39
    3c18:	00003c1d 	.word	0x00003c1d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3c1c:	88fb      	ldrh	r3, [r7, #6]
    3c1e:	683a      	ldr	r2, [r7, #0]
    3c20:	4935      	ldr	r1, [pc, #212]	; (3cf8 <_get_cycles_for_us_internal+0x114>)
    3c22:	fba1 1202 	umull	r1, r2, r1, r2
    3c26:	0c92      	lsrs	r2, r2, #18
    3c28:	fb02 f303 	mul.w	r3, r2, r3
    3c2c:	3302      	adds	r3, #2
    3c2e:	4a33      	ldr	r2, [pc, #204]	; (3cfc <_get_cycles_for_us_internal+0x118>)
    3c30:	fba2 2303 	umull	r2, r3, r2, r3
    3c34:	085b      	lsrs	r3, r3, #1
    3c36:	e059      	b.n	3cec <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3c38:	88fb      	ldrh	r3, [r7, #6]
    3c3a:	683a      	ldr	r2, [r7, #0]
    3c3c:	0952      	lsrs	r2, r2, #5
    3c3e:	4930      	ldr	r1, [pc, #192]	; (3d00 <_get_cycles_for_us_internal+0x11c>)
    3c40:	fba1 1202 	umull	r1, r2, r1, r2
    3c44:	09d2      	lsrs	r2, r2, #7
    3c46:	fb02 f303 	mul.w	r3, r2, r3
    3c4a:	331d      	adds	r3, #29
    3c4c:	4a2d      	ldr	r2, [pc, #180]	; (3d04 <_get_cycles_for_us_internal+0x120>)
    3c4e:	fba2 2303 	umull	r2, r3, r2, r3
    3c52:	091b      	lsrs	r3, r3, #4
    3c54:	e04a      	b.n	3cec <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3c56:	88fb      	ldrh	r3, [r7, #6]
    3c58:	683a      	ldr	r2, [r7, #0]
    3c5a:	492b      	ldr	r1, [pc, #172]	; (3d08 <_get_cycles_for_us_internal+0x124>)
    3c5c:	fba1 1202 	umull	r1, r2, r1, r2
    3c60:	0b52      	lsrs	r2, r2, #13
    3c62:	fb02 f303 	mul.w	r3, r2, r3
    3c66:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3c6a:	4a28      	ldr	r2, [pc, #160]	; (3d0c <_get_cycles_for_us_internal+0x128>)
    3c6c:	fba2 2303 	umull	r2, r3, r2, r3
    3c70:	095b      	lsrs	r3, r3, #5
    3c72:	e03b      	b.n	3cec <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3c74:	88fb      	ldrh	r3, [r7, #6]
    3c76:	683a      	ldr	r2, [r7, #0]
    3c78:	4925      	ldr	r1, [pc, #148]	; (3d10 <_get_cycles_for_us_internal+0x12c>)
    3c7a:	fba1 1202 	umull	r1, r2, r1, r2
    3c7e:	0992      	lsrs	r2, r2, #6
    3c80:	fb02 f303 	mul.w	r3, r2, r3
    3c84:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3c88:	4a22      	ldr	r2, [pc, #136]	; (3d14 <_get_cycles_for_us_internal+0x130>)
    3c8a:	fba2 2303 	umull	r2, r3, r2, r3
    3c8e:	099b      	lsrs	r3, r3, #6
    3c90:	e02c      	b.n	3cec <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3c92:	88fb      	ldrh	r3, [r7, #6]
    3c94:	683a      	ldr	r2, [r7, #0]
    3c96:	4920      	ldr	r1, [pc, #128]	; (3d18 <_get_cycles_for_us_internal+0x134>)
    3c98:	fba1 1202 	umull	r1, r2, r1, r2
    3c9c:	0952      	lsrs	r2, r2, #5
    3c9e:	fb02 f303 	mul.w	r3, r2, r3
    3ca2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3ca6:	332f      	adds	r3, #47	; 0x2f
    3ca8:	4a1c      	ldr	r2, [pc, #112]	; (3d1c <_get_cycles_for_us_internal+0x138>)
    3caa:	fba2 2303 	umull	r2, r3, r2, r3
    3cae:	0b5b      	lsrs	r3, r3, #13
    3cb0:	e01c      	b.n	3cec <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3cb2:	88fb      	ldrh	r3, [r7, #6]
    3cb4:	683a      	ldr	r2, [r7, #0]
    3cb6:	491a      	ldr	r1, [pc, #104]	; (3d20 <_get_cycles_for_us_internal+0x13c>)
    3cb8:	fba1 1202 	umull	r1, r2, r1, r2
    3cbc:	08d2      	lsrs	r2, r2, #3
    3cbe:	fb02 f303 	mul.w	r3, r2, r3
    3cc2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3cc6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3cca:	4a16      	ldr	r2, [pc, #88]	; (3d24 <_get_cycles_for_us_internal+0x140>)
    3ccc:	fba2 2303 	umull	r2, r3, r2, r3
    3cd0:	0c5b      	lsrs	r3, r3, #17
    3cd2:	e00b      	b.n	3cec <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3cd4:	88fb      	ldrh	r3, [r7, #6]
    3cd6:	683a      	ldr	r2, [r7, #0]
    3cd8:	fb02 f303 	mul.w	r3, r2, r3
    3cdc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3ce0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3ce4:	4a10      	ldr	r2, [pc, #64]	; (3d28 <_get_cycles_for_us_internal+0x144>)
    3ce6:	fba2 2303 	umull	r2, r3, r2, r3
    3cea:	0c9b      	lsrs	r3, r3, #18
	}
}
    3cec:	4618      	mov	r0, r3
    3cee:	370c      	adds	r7, #12
    3cf0:	46bd      	mov	sp, r7
    3cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf6:	4770      	bx	lr
    3cf8:	431bde83 	.word	0x431bde83
    3cfc:	aaaaaaab 	.word	0xaaaaaaab
    3d00:	0a7c5ac5 	.word	0x0a7c5ac5
    3d04:	88888889 	.word	0x88888889
    3d08:	d1b71759 	.word	0xd1b71759
    3d0c:	1b4e81b5 	.word	0x1b4e81b5
    3d10:	10624dd3 	.word	0x10624dd3
    3d14:	057619f1 	.word	0x057619f1
    3d18:	51eb851f 	.word	0x51eb851f
    3d1c:	45e7b273 	.word	0x45e7b273
    3d20:	cccccccd 	.word	0xcccccccd
    3d24:	6fd91d85 	.word	0x6fd91d85
    3d28:	165e9f81 	.word	0x165e9f81

00003d2c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
    3d32:	4603      	mov	r3, r0
    3d34:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3d36:	88fb      	ldrh	r3, [r7, #6]
    3d38:	2209      	movs	r2, #9
    3d3a:	4904      	ldr	r1, [pc, #16]	; (3d4c <_get_cycles_for_us+0x20>)
    3d3c:	4618      	mov	r0, r3
    3d3e:	4b04      	ldr	r3, [pc, #16]	; (3d50 <_get_cycles_for_us+0x24>)
    3d40:	4798      	blx	r3
    3d42:	4603      	mov	r3, r0
}
    3d44:	4618      	mov	r0, r3
    3d46:	3708      	adds	r7, #8
    3d48:	46bd      	mov	sp, r7
    3d4a:	bd80      	pop	{r7, pc}
    3d4c:	07270e00 	.word	0x07270e00
    3d50:	00003be5 	.word	0x00003be5

00003d54 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3d54:	b480      	push	{r7}
    3d56:	b083      	sub	sp, #12
    3d58:	af00      	add	r7, sp, #0
    3d5a:	4603      	mov	r3, r0
    3d5c:	6039      	str	r1, [r7, #0]
    3d5e:	80fb      	strh	r3, [r7, #6]
    3d60:	4613      	mov	r3, r2
    3d62:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d64:	797b      	ldrb	r3, [r7, #5]
    3d66:	3b04      	subs	r3, #4
    3d68:	2b05      	cmp	r3, #5
    3d6a:	d870      	bhi.n	3e4e <_get_cycles_for_ms_internal+0xfa>
    3d6c:	a201      	add	r2, pc, #4	; (adr r2, 3d74 <_get_cycles_for_ms_internal+0x20>)
    3d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d72:	bf00      	nop
    3d74:	00003e31 	.word	0x00003e31
    3d78:	00003e15 	.word	0x00003e15
    3d7c:	00003df9 	.word	0x00003df9
    3d80:	00003dd5 	.word	0x00003dd5
    3d84:	00003db1 	.word	0x00003db1
    3d88:	00003d8d 	.word	0x00003d8d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3d8c:	88fb      	ldrh	r3, [r7, #6]
    3d8e:	683a      	ldr	r2, [r7, #0]
    3d90:	4937      	ldr	r1, [pc, #220]	; (3e70 <_get_cycles_for_ms_internal+0x11c>)
    3d92:	fba1 1202 	umull	r1, r2, r1, r2
    3d96:	0c92      	lsrs	r2, r2, #18
    3d98:	fb02 f303 	mul.w	r3, r2, r3
    3d9c:	3302      	adds	r3, #2
    3d9e:	4a35      	ldr	r2, [pc, #212]	; (3e74 <_get_cycles_for_ms_internal+0x120>)
    3da0:	fba2 2303 	umull	r2, r3, r2, r3
    3da4:	085b      	lsrs	r3, r3, #1
    3da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3daa:	fb02 f303 	mul.w	r3, r2, r3
    3dae:	e058      	b.n	3e62 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3db0:	88fb      	ldrh	r3, [r7, #6]
    3db2:	683a      	ldr	r2, [r7, #0]
    3db4:	0952      	lsrs	r2, r2, #5
    3db6:	4930      	ldr	r1, [pc, #192]	; (3e78 <_get_cycles_for_ms_internal+0x124>)
    3db8:	fba1 1202 	umull	r1, r2, r1, r2
    3dbc:	09d2      	lsrs	r2, r2, #7
    3dbe:	fb02 f303 	mul.w	r3, r2, r3
    3dc2:	3302      	adds	r3, #2
    3dc4:	4a2b      	ldr	r2, [pc, #172]	; (3e74 <_get_cycles_for_ms_internal+0x120>)
    3dc6:	fba2 2303 	umull	r2, r3, r2, r3
    3dca:	085b      	lsrs	r3, r3, #1
    3dcc:	2264      	movs	r2, #100	; 0x64
    3dce:	fb02 f303 	mul.w	r3, r2, r3
    3dd2:	e046      	b.n	3e62 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3dd4:	88fb      	ldrh	r3, [r7, #6]
    3dd6:	683a      	ldr	r2, [r7, #0]
    3dd8:	4928      	ldr	r1, [pc, #160]	; (3e7c <_get_cycles_for_ms_internal+0x128>)
    3dda:	fba1 1202 	umull	r1, r2, r1, r2
    3dde:	0b52      	lsrs	r2, r2, #13
    3de0:	fb02 f303 	mul.w	r3, r2, r3
    3de4:	3302      	adds	r3, #2
    3de6:	4a23      	ldr	r2, [pc, #140]	; (3e74 <_get_cycles_for_ms_internal+0x120>)
    3de8:	fba2 2303 	umull	r2, r3, r2, r3
    3dec:	085a      	lsrs	r2, r3, #1
    3dee:	4613      	mov	r3, r2
    3df0:	009b      	lsls	r3, r3, #2
    3df2:	4413      	add	r3, r2
    3df4:	005b      	lsls	r3, r3, #1
    3df6:	e034      	b.n	3e62 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3df8:	88fb      	ldrh	r3, [r7, #6]
    3dfa:	683a      	ldr	r2, [r7, #0]
    3dfc:	4920      	ldr	r1, [pc, #128]	; (3e80 <_get_cycles_for_ms_internal+0x12c>)
    3dfe:	fba1 1202 	umull	r1, r2, r1, r2
    3e02:	0992      	lsrs	r2, r2, #6
    3e04:	fb02 f303 	mul.w	r3, r2, r3
    3e08:	3302      	adds	r3, #2
    3e0a:	4a1a      	ldr	r2, [pc, #104]	; (3e74 <_get_cycles_for_ms_internal+0x120>)
    3e0c:	fba2 2303 	umull	r2, r3, r2, r3
    3e10:	085b      	lsrs	r3, r3, #1
    3e12:	e026      	b.n	3e62 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3e14:	88fb      	ldrh	r3, [r7, #6]
    3e16:	683a      	ldr	r2, [r7, #0]
    3e18:	491a      	ldr	r1, [pc, #104]	; (3e84 <_get_cycles_for_ms_internal+0x130>)
    3e1a:	fba1 1202 	umull	r1, r2, r1, r2
    3e1e:	0952      	lsrs	r2, r2, #5
    3e20:	fb02 f303 	mul.w	r3, r2, r3
    3e24:	331d      	adds	r3, #29
    3e26:	4a18      	ldr	r2, [pc, #96]	; (3e88 <_get_cycles_for_ms_internal+0x134>)
    3e28:	fba2 2303 	umull	r2, r3, r2, r3
    3e2c:	091b      	lsrs	r3, r3, #4
    3e2e:	e018      	b.n	3e62 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3e30:	88fb      	ldrh	r3, [r7, #6]
    3e32:	683a      	ldr	r2, [r7, #0]
    3e34:	4915      	ldr	r1, [pc, #84]	; (3e8c <_get_cycles_for_ms_internal+0x138>)
    3e36:	fba1 1202 	umull	r1, r2, r1, r2
    3e3a:	08d2      	lsrs	r2, r2, #3
    3e3c:	fb02 f303 	mul.w	r3, r2, r3
    3e40:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3e44:	4a12      	ldr	r2, [pc, #72]	; (3e90 <_get_cycles_for_ms_internal+0x13c>)
    3e46:	fba2 2303 	umull	r2, r3, r2, r3
    3e4a:	095b      	lsrs	r3, r3, #5
    3e4c:	e009      	b.n	3e62 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3e4e:	88fb      	ldrh	r3, [r7, #6]
    3e50:	683a      	ldr	r2, [r7, #0]
    3e52:	fb02 f303 	mul.w	r3, r2, r3
    3e56:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3e5a:	4a0e      	ldr	r2, [pc, #56]	; (3e94 <_get_cycles_for_ms_internal+0x140>)
    3e5c:	fba2 2303 	umull	r2, r3, r2, r3
    3e60:	099b      	lsrs	r3, r3, #6
	}
}
    3e62:	4618      	mov	r0, r3
    3e64:	370c      	adds	r7, #12
    3e66:	46bd      	mov	sp, r7
    3e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6c:	4770      	bx	lr
    3e6e:	bf00      	nop
    3e70:	431bde83 	.word	0x431bde83
    3e74:	aaaaaaab 	.word	0xaaaaaaab
    3e78:	0a7c5ac5 	.word	0x0a7c5ac5
    3e7c:	d1b71759 	.word	0xd1b71759
    3e80:	10624dd3 	.word	0x10624dd3
    3e84:	51eb851f 	.word	0x51eb851f
    3e88:	88888889 	.word	0x88888889
    3e8c:	cccccccd 	.word	0xcccccccd
    3e90:	1b4e81b5 	.word	0x1b4e81b5
    3e94:	057619f1 	.word	0x057619f1

00003e98 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3e98:	b580      	push	{r7, lr}
    3e9a:	b082      	sub	sp, #8
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	4603      	mov	r3, r0
    3ea0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3ea2:	88fb      	ldrh	r3, [r7, #6]
    3ea4:	2209      	movs	r2, #9
    3ea6:	4904      	ldr	r1, [pc, #16]	; (3eb8 <_get_cycles_for_ms+0x20>)
    3ea8:	4618      	mov	r0, r3
    3eaa:	4b04      	ldr	r3, [pc, #16]	; (3ebc <_get_cycles_for_ms+0x24>)
    3eac:	4798      	blx	r3
    3eae:	4603      	mov	r3, r0
}
    3eb0:	4618      	mov	r0, r3
    3eb2:	3708      	adds	r7, #8
    3eb4:	46bd      	mov	sp, r7
    3eb6:	bd80      	pop	{r7, pc}
    3eb8:	07270e00 	.word	0x07270e00
    3ebc:	00003d55 	.word	0x00003d55

00003ec0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3ec0:	b480      	push	{r7}
    3ec2:	b083      	sub	sp, #12
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
    3ec8:	6039      	str	r1, [r7, #0]
    3eca:	bf00      	nop
    3ecc:	f3af 8000 	nop.w

00003ed0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3ed0:	3901      	subs	r1, #1
    3ed2:	d8fd      	bhi.n	3ed0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3ed4:	bf00      	nop
    3ed6:	370c      	adds	r7, #12
    3ed8:	46bd      	mov	sp, r7
    3eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ede:	4770      	bx	lr

00003ee0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3ee0:	b480      	push	{r7}
    3ee2:	b083      	sub	sp, #12
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	460b      	mov	r3, r1
    3eea:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	881b      	ldrh	r3, [r3, #0]
    3ef0:	b29a      	uxth	r2, r3
    3ef2:	887b      	ldrh	r3, [r7, #2]
    3ef4:	021b      	lsls	r3, r3, #8
    3ef6:	b29b      	uxth	r3, r3
    3ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3efc:	b29b      	uxth	r3, r3
    3efe:	4313      	orrs	r3, r2
    3f00:	b29a      	uxth	r2, r3
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3f06:	bf00      	nop
    3f08:	370c      	adds	r7, #12
    3f0a:	46bd      	mov	sp, r7
    3f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f10:	4770      	bx	lr

00003f12 <hri_port_set_EVCTRL_reg>:
{
    3f12:	b480      	push	{r7}
    3f14:	b085      	sub	sp, #20
    3f16:	af00      	add	r7, sp, #0
    3f18:	60f8      	str	r0, [r7, #12]
    3f1a:	460b      	mov	r3, r1
    3f1c:	607a      	str	r2, [r7, #4]
    3f1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3f20:	7afb      	ldrb	r3, [r7, #11]
    3f22:	7afa      	ldrb	r2, [r7, #11]
    3f24:	68f9      	ldr	r1, [r7, #12]
    3f26:	01d2      	lsls	r2, r2, #7
    3f28:	440a      	add	r2, r1
    3f2a:	322c      	adds	r2, #44	; 0x2c
    3f2c:	6811      	ldr	r1, [r2, #0]
    3f2e:	687a      	ldr	r2, [r7, #4]
    3f30:	430a      	orrs	r2, r1
    3f32:	68f9      	ldr	r1, [r7, #12]
    3f34:	01db      	lsls	r3, r3, #7
    3f36:	440b      	add	r3, r1
    3f38:	332c      	adds	r3, #44	; 0x2c
    3f3a:	601a      	str	r2, [r3, #0]
}
    3f3c:	bf00      	nop
    3f3e:	3714      	adds	r7, #20
    3f40:	46bd      	mov	sp, r7
    3f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f46:	4770      	bx	lr

00003f48 <_port_event_init>:

static inline void _port_event_init()
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3f4c:	2200      	movs	r2, #0
    3f4e:	2100      	movs	r1, #0
    3f50:	480a      	ldr	r0, [pc, #40]	; (3f7c <_port_event_init+0x34>)
    3f52:	4b0b      	ldr	r3, [pc, #44]	; (3f80 <_port_event_init+0x38>)
    3f54:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3f56:	2200      	movs	r2, #0
    3f58:	2101      	movs	r1, #1
    3f5a:	4808      	ldr	r0, [pc, #32]	; (3f7c <_port_event_init+0x34>)
    3f5c:	4b08      	ldr	r3, [pc, #32]	; (3f80 <_port_event_init+0x38>)
    3f5e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3f60:	f64e 72ef 	movw	r2, #61423	; 0xefef
    3f64:	2102      	movs	r1, #2
    3f66:	4805      	ldr	r0, [pc, #20]	; (3f7c <_port_event_init+0x34>)
    3f68:	4b05      	ldr	r3, [pc, #20]	; (3f80 <_port_event_init+0x38>)
    3f6a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3f6c:	2200      	movs	r2, #0
    3f6e:	2103      	movs	r1, #3
    3f70:	4802      	ldr	r0, [pc, #8]	; (3f7c <_port_event_init+0x34>)
    3f72:	4b03      	ldr	r3, [pc, #12]	; (3f80 <_port_event_init+0x38>)
    3f74:	4798      	blx	r3
}
    3f76:	bf00      	nop
    3f78:	bd80      	pop	{r7, pc}
    3f7a:	bf00      	nop
    3f7c:	41008000 	.word	0x41008000
    3f80:	00003f13 	.word	0x00003f13

00003f84 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3f84:	b580      	push	{r7, lr}
    3f86:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3f88:	2104      	movs	r1, #4
    3f8a:	480b      	ldr	r0, [pc, #44]	; (3fb8 <_init_chip+0x34>)
    3f8c:	4b0b      	ldr	r3, [pc, #44]	; (3fbc <_init_chip+0x38>)
    3f8e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3f90:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <_init_chip+0x3c>)
    3f92:	4798      	blx	r3
	_oscctrl_init_sources();
    3f94:	4b0b      	ldr	r3, [pc, #44]	; (3fc4 <_init_chip+0x40>)
    3f96:	4798      	blx	r3
	_mclk_init();
    3f98:	4b0b      	ldr	r3, [pc, #44]	; (3fc8 <_init_chip+0x44>)
    3f9a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3f9c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3fa0:	4b0a      	ldr	r3, [pc, #40]	; (3fcc <_init_chip+0x48>)
    3fa2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3fa4:	4b0a      	ldr	r3, [pc, #40]	; (3fd0 <_init_chip+0x4c>)
    3fa6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3fa8:	f640 30df 	movw	r0, #3039	; 0xbdf
    3fac:	4b07      	ldr	r3, [pc, #28]	; (3fcc <_init_chip+0x48>)
    3fae:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3fb0:	4b08      	ldr	r3, [pc, #32]	; (3fd4 <_init_chip+0x50>)
    3fb2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3fb4:	bf00      	nop
    3fb6:	bd80      	pop	{r7, pc}
    3fb8:	41004000 	.word	0x41004000
    3fbc:	00003ee1 	.word	0x00003ee1
    3fc0:	00004aad 	.word	0x00004aad
    3fc4:	00004f75 	.word	0x00004f75
    3fc8:	000049cd 	.word	0x000049cd
    3fcc:	00004875 	.word	0x00004875
    3fd0:	00004fb5 	.word	0x00004fb5
    3fd4:	00003f49 	.word	0x00003f49

00003fd8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    3fd8:	b480      	push	{r7}
    3fda:	b083      	sub	sp, #12
    3fdc:	af00      	add	r7, sp, #0
    3fde:	6078      	str	r0, [r7, #4]
    3fe0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	683a      	ldr	r2, [r7, #0]
    3fe6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3fe8:	2300      	movs	r3, #0
}
    3fea:	4618      	mov	r0, r3
    3fec:	370c      	adds	r7, #12
    3fee:	46bd      	mov	sp, r7
    3ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff4:	4770      	bx	lr
	...

00003ff8 <__NVIC_EnableIRQ>:
{
    3ff8:	b480      	push	{r7}
    3ffa:	b083      	sub	sp, #12
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	4603      	mov	r3, r0
    4000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4006:	2b00      	cmp	r3, #0
    4008:	db0b      	blt.n	4022 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    400a:	4909      	ldr	r1, [pc, #36]	; (4030 <__NVIC_EnableIRQ+0x38>)
    400c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4010:	095b      	lsrs	r3, r3, #5
    4012:	88fa      	ldrh	r2, [r7, #6]
    4014:	f002 021f 	and.w	r2, r2, #31
    4018:	2001      	movs	r0, #1
    401a:	fa00 f202 	lsl.w	r2, r0, r2
    401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4022:	bf00      	nop
    4024:	370c      	adds	r7, #12
    4026:	46bd      	mov	sp, r7
    4028:	f85d 7b04 	ldr.w	r7, [sp], #4
    402c:	4770      	bx	lr
    402e:	bf00      	nop
    4030:	e000e100 	.word	0xe000e100

00004034 <__NVIC_DisableIRQ>:
{
    4034:	b480      	push	{r7}
    4036:	b083      	sub	sp, #12
    4038:	af00      	add	r7, sp, #0
    403a:	4603      	mov	r3, r0
    403c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    403e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4042:	2b00      	cmp	r3, #0
    4044:	db10      	blt.n	4068 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4046:	490b      	ldr	r1, [pc, #44]	; (4074 <__NVIC_DisableIRQ+0x40>)
    4048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    404c:	095b      	lsrs	r3, r3, #5
    404e:	88fa      	ldrh	r2, [r7, #6]
    4050:	f002 021f 	and.w	r2, r2, #31
    4054:	2001      	movs	r0, #1
    4056:	fa00 f202 	lsl.w	r2, r0, r2
    405a:	3320      	adds	r3, #32
    405c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4064:	f3bf 8f6f 	isb	sy
}
    4068:	bf00      	nop
    406a:	370c      	adds	r7, #12
    406c:	46bd      	mov	sp, r7
    406e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4072:	4770      	bx	lr
    4074:	e000e100 	.word	0xe000e100

00004078 <__NVIC_ClearPendingIRQ>:
{
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	4603      	mov	r3, r0
    4080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4086:	2b00      	cmp	r3, #0
    4088:	db0c      	blt.n	40a4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    408a:	4909      	ldr	r1, [pc, #36]	; (40b0 <__NVIC_ClearPendingIRQ+0x38>)
    408c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4090:	095b      	lsrs	r3, r3, #5
    4092:	88fa      	ldrh	r2, [r7, #6]
    4094:	f002 021f 	and.w	r2, r2, #31
    4098:	2001      	movs	r0, #1
    409a:	fa00 f202 	lsl.w	r2, r0, r2
    409e:	3360      	adds	r3, #96	; 0x60
    40a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40a4:	bf00      	nop
    40a6:	370c      	adds	r7, #12
    40a8:	46bd      	mov	sp, r7
    40aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ae:	4770      	bx	lr
    40b0:	e000e100 	.word	0xe000e100

000040b4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    40b4:	b480      	push	{r7}
    40b6:	b083      	sub	sp, #12
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
    40bc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    40be:	bf00      	nop
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	685a      	ldr	r2, [r3, #4]
    40c4:	683b      	ldr	r3, [r7, #0]
    40c6:	4013      	ands	r3, r2
    40c8:	2b00      	cmp	r3, #0
    40ca:	d1f9      	bne.n	40c0 <hri_eic_wait_for_sync+0xc>
	};
}
    40cc:	bf00      	nop
    40ce:	370c      	adds	r7, #12
    40d0:	46bd      	mov	sp, r7
    40d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d6:	4770      	bx	lr

000040d8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	685a      	ldr	r2, [r3, #4]
    40e6:	683b      	ldr	r3, [r7, #0]
    40e8:	4013      	ands	r3, r2
    40ea:	2b00      	cmp	r3, #0
    40ec:	bf14      	ite	ne
    40ee:	2301      	movne	r3, #1
    40f0:	2300      	moveq	r3, #0
    40f2:	b2db      	uxtb	r3, r3
}
    40f4:	4618      	mov	r0, r3
    40f6:	370c      	adds	r7, #12
    40f8:	46bd      	mov	sp, r7
    40fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    40fe:	4770      	bx	lr

00004100 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4100:	b480      	push	{r7}
    4102:	b083      	sub	sp, #12
    4104:	af00      	add	r7, sp, #0
    4106:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	695b      	ldr	r3, [r3, #20]
}
    410c:	4618      	mov	r0, r3
    410e:	370c      	adds	r7, #12
    4110:	46bd      	mov	sp, r7
    4112:	f85d 7b04 	ldr.w	r7, [sp], #4
    4116:	4770      	bx	lr

00004118 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4118:	b480      	push	{r7}
    411a:	b083      	sub	sp, #12
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
    4120:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	683a      	ldr	r2, [r7, #0]
    4126:	615a      	str	r2, [r3, #20]
}
    4128:	bf00      	nop
    412a:	370c      	adds	r7, #12
    412c:	46bd      	mov	sp, r7
    412e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4132:	4770      	bx	lr

00004134 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4134:	b480      	push	{r7}
    4136:	b083      	sub	sp, #12
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
    413c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	683a      	ldr	r2, [r7, #0]
    4142:	611a      	str	r2, [r3, #16]
}
    4144:	bf00      	nop
    4146:	370c      	adds	r7, #12
    4148:	46bd      	mov	sp, r7
    414a:	f85d 7b04 	ldr.w	r7, [sp], #4
    414e:	4770      	bx	lr

00004150 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4150:	b480      	push	{r7}
    4152:	b083      	sub	sp, #12
    4154:	af00      	add	r7, sp, #0
    4156:	6078      	str	r0, [r7, #4]
    4158:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	683a      	ldr	r2, [r7, #0]
    415e:	60da      	str	r2, [r3, #12]
}
    4160:	bf00      	nop
    4162:	370c      	adds	r7, #12
    4164:	46bd      	mov	sp, r7
    4166:	f85d 7b04 	ldr.w	r7, [sp], #4
    416a:	4770      	bx	lr

0000416c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	b2db      	uxtb	r3, r3
    417a:	f043 0302 	orr.w	r3, r3, #2
    417e:	b2da      	uxtb	r2, r3
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4184:	2103      	movs	r1, #3
    4186:	6878      	ldr	r0, [r7, #4]
    4188:	4b02      	ldr	r3, [pc, #8]	; (4194 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    418a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    418c:	bf00      	nop
    418e:	3708      	adds	r7, #8
    4190:	46bd      	mov	sp, r7
    4192:	bd80      	pop	{r7, pc}
    4194:	000040b5 	.word	0x000040b5

00004198 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4198:	b580      	push	{r7, lr}
    419a:	b082      	sub	sp, #8
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	781b      	ldrb	r3, [r3, #0]
    41a4:	b2db      	uxtb	r3, r3
    41a6:	f023 0302 	bic.w	r3, r3, #2
    41aa:	b2da      	uxtb	r2, r3
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    41b0:	2103      	movs	r1, #3
    41b2:	6878      	ldr	r0, [r7, #4]
    41b4:	4b02      	ldr	r3, [pc, #8]	; (41c0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    41b6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41b8:	bf00      	nop
    41ba:	3708      	adds	r7, #8
    41bc:	46bd      	mov	sp, r7
    41be:	bd80      	pop	{r7, pc}
    41c0:	000040b5 	.word	0x000040b5

000041c4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b084      	sub	sp, #16
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	460b      	mov	r3, r1
    41ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    41d6:	7bfb      	ldrb	r3, [r7, #15]
    41d8:	f023 0310 	bic.w	r3, r3, #16
    41dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    41de:	78fb      	ldrb	r3, [r7, #3]
    41e0:	011b      	lsls	r3, r3, #4
    41e2:	b25a      	sxtb	r2, r3
    41e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41e8:	4313      	orrs	r3, r2
    41ea:	b25b      	sxtb	r3, r3
    41ec:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	7bfa      	ldrb	r2, [r7, #15]
    41f2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    41f4:	2103      	movs	r1, #3
    41f6:	6878      	ldr	r0, [r7, #4]
    41f8:	4b02      	ldr	r3, [pc, #8]	; (4204 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    41fa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41fc:	bf00      	nop
    41fe:	3710      	adds	r7, #16
    4200:	46bd      	mov	sp, r7
    4202:	bd80      	pop	{r7, pc}
    4204:	000040b5 	.word	0x000040b5

00004208 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4208:	b580      	push	{r7, lr}
    420a:	b084      	sub	sp, #16
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    4210:	460b      	mov	r3, r1
    4212:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4214:	2103      	movs	r1, #3
    4216:	6878      	ldr	r0, [r7, #4]
    4218:	4b06      	ldr	r3, [pc, #24]	; (4234 <hri_eic_get_CTRLA_reg+0x2c>)
    421a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	781b      	ldrb	r3, [r3, #0]
    4220:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4222:	7bfa      	ldrb	r2, [r7, #15]
    4224:	78fb      	ldrb	r3, [r7, #3]
    4226:	4013      	ands	r3, r2
    4228:	73fb      	strb	r3, [r7, #15]
	return tmp;
    422a:	7bfb      	ldrb	r3, [r7, #15]
}
    422c:	4618      	mov	r0, r3
    422e:	3710      	adds	r7, #16
    4230:	46bd      	mov	sp, r7
    4232:	bd80      	pop	{r7, pc}
    4234:	000040b5 	.word	0x000040b5

00004238 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	460b      	mov	r3, r1
    4242:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	78fa      	ldrb	r2, [r7, #3]
    4248:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    424a:	2103      	movs	r1, #3
    424c:	6878      	ldr	r0, [r7, #4]
    424e:	4b03      	ldr	r3, [pc, #12]	; (425c <hri_eic_write_CTRLA_reg+0x24>)
    4250:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4252:	bf00      	nop
    4254:	3708      	adds	r7, #8
    4256:	46bd      	mov	sp, r7
    4258:	bd80      	pop	{r7, pc}
    425a:	bf00      	nop
    425c:	000040b5 	.word	0x000040b5

00004260 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4260:	b480      	push	{r7}
    4262:	b083      	sub	sp, #12
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
    4268:	460b      	mov	r3, r1
    426a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	78fa      	ldrb	r2, [r7, #3]
    4270:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4272:	bf00      	nop
    4274:	370c      	adds	r7, #12
    4276:	46bd      	mov	sp, r7
    4278:	f85d 7b04 	ldr.w	r7, [sp], #4
    427c:	4770      	bx	lr

0000427e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    427e:	b480      	push	{r7}
    4280:	b083      	sub	sp, #12
    4282:	af00      	add	r7, sp, #0
    4284:	6078      	str	r0, [r7, #4]
    4286:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	683a      	ldr	r2, [r7, #0]
    428c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    428e:	bf00      	nop
    4290:	370c      	adds	r7, #12
    4292:	46bd      	mov	sp, r7
    4294:	f85d 7b04 	ldr.w	r7, [sp], #4
    4298:	4770      	bx	lr

0000429a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    429a:	b480      	push	{r7}
    429c:	b083      	sub	sp, #12
    429e:	af00      	add	r7, sp, #0
    42a0:	6078      	str	r0, [r7, #4]
    42a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	683a      	ldr	r2, [r7, #0]
    42a8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42aa:	bf00      	nop
    42ac:	370c      	adds	r7, #12
    42ae:	46bd      	mov	sp, r7
    42b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b4:	4770      	bx	lr

000042b6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    42b6:	b480      	push	{r7}
    42b8:	b085      	sub	sp, #20
    42ba:	af00      	add	r7, sp, #0
    42bc:	60f8      	str	r0, [r7, #12]
    42be:	460b      	mov	r3, r1
    42c0:	607a      	str	r2, [r7, #4]
    42c2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    42c4:	7afb      	ldrb	r3, [r7, #11]
    42c6:	68fa      	ldr	r2, [r7, #12]
    42c8:	3306      	adds	r3, #6
    42ca:	009b      	lsls	r3, r3, #2
    42cc:	4413      	add	r3, r2
    42ce:	687a      	ldr	r2, [r7, #4]
    42d0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42d2:	bf00      	nop
    42d4:	3714      	adds	r7, #20
    42d6:	46bd      	mov	sp, r7
    42d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42dc:	4770      	bx	lr

000042de <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    42de:	b480      	push	{r7}
    42e0:	b083      	sub	sp, #12
    42e2:	af00      	add	r7, sp, #0
    42e4:	6078      	str	r0, [r7, #4]
    42e6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	683a      	ldr	r2, [r7, #0]
    42ec:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    42ee:	bf00      	nop
    42f0:	370c      	adds	r7, #12
    42f2:	46bd      	mov	sp, r7
    42f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f8:	4770      	bx	lr

000042fa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    42fa:	b480      	push	{r7}
    42fc:	b083      	sub	sp, #12
    42fe:	af00      	add	r7, sp, #0
    4300:	6078      	str	r0, [r7, #4]
    4302:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	683a      	ldr	r2, [r7, #0]
    4308:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    430a:	bf00      	nop
    430c:	370c      	adds	r7, #12
    430e:	46bd      	mov	sp, r7
    4310:	f85d 7b04 	ldr.w	r7, [sp], #4
    4314:	4770      	bx	lr
	...

00004318 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4318:	b580      	push	{r7, lr}
    431a:	b082      	sub	sp, #8
    431c:	af00      	add	r7, sp, #0
    431e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4320:	2101      	movs	r1, #1
    4322:	484f      	ldr	r0, [pc, #316]	; (4460 <_ext_irq_init+0x148>)
    4324:	4b4f      	ldr	r3, [pc, #316]	; (4464 <_ext_irq_init+0x14c>)
    4326:	4798      	blx	r3
    4328:	4603      	mov	r3, r0
    432a:	f083 0301 	eor.w	r3, r3, #1
    432e:	b2db      	uxtb	r3, r3
    4330:	2b00      	cmp	r3, #0
    4332:	d011      	beq.n	4358 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4334:	2102      	movs	r1, #2
    4336:	484a      	ldr	r0, [pc, #296]	; (4460 <_ext_irq_init+0x148>)
    4338:	4b4b      	ldr	r3, [pc, #300]	; (4468 <_ext_irq_init+0x150>)
    433a:	4798      	blx	r3
    433c:	4603      	mov	r3, r0
    433e:	2b00      	cmp	r3, #0
    4340:	d006      	beq.n	4350 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4342:	4847      	ldr	r0, [pc, #284]	; (4460 <_ext_irq_init+0x148>)
    4344:	4b49      	ldr	r3, [pc, #292]	; (446c <_ext_irq_init+0x154>)
    4346:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4348:	2102      	movs	r1, #2
    434a:	4845      	ldr	r0, [pc, #276]	; (4460 <_ext_irq_init+0x148>)
    434c:	4b48      	ldr	r3, [pc, #288]	; (4470 <_ext_irq_init+0x158>)
    434e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4350:	2101      	movs	r1, #1
    4352:	4843      	ldr	r0, [pc, #268]	; (4460 <_ext_irq_init+0x148>)
    4354:	4b47      	ldr	r3, [pc, #284]	; (4474 <_ext_irq_init+0x15c>)
    4356:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4358:	2101      	movs	r1, #1
    435a:	4841      	ldr	r0, [pc, #260]	; (4460 <_ext_irq_init+0x148>)
    435c:	4b44      	ldr	r3, [pc, #272]	; (4470 <_ext_irq_init+0x158>)
    435e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4360:	2100      	movs	r1, #0
    4362:	483f      	ldr	r0, [pc, #252]	; (4460 <_ext_irq_init+0x148>)
    4364:	4b44      	ldr	r3, [pc, #272]	; (4478 <_ext_irq_init+0x160>)
    4366:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4368:	2100      	movs	r1, #0
    436a:	483d      	ldr	r0, [pc, #244]	; (4460 <_ext_irq_init+0x148>)
    436c:	4b43      	ldr	r3, [pc, #268]	; (447c <_ext_irq_init+0x164>)
    436e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4370:	2100      	movs	r1, #0
    4372:	483b      	ldr	r0, [pc, #236]	; (4460 <_ext_irq_init+0x148>)
    4374:	4b42      	ldr	r3, [pc, #264]	; (4480 <_ext_irq_init+0x168>)
    4376:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4378:	f240 31bb 	movw	r1, #955	; 0x3bb
    437c:	4838      	ldr	r0, [pc, #224]	; (4460 <_ext_irq_init+0x148>)
    437e:	4b41      	ldr	r3, [pc, #260]	; (4484 <_ext_irq_init+0x16c>)
    4380:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4382:	f240 313b 	movw	r1, #827	; 0x33b
    4386:	4836      	ldr	r0, [pc, #216]	; (4460 <_ext_irq_init+0x148>)
    4388:	4b3f      	ldr	r3, [pc, #252]	; (4488 <_ext_irq_init+0x170>)
    438a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    438c:	2100      	movs	r1, #0
    438e:	4834      	ldr	r0, [pc, #208]	; (4460 <_ext_irq_init+0x148>)
    4390:	4b3e      	ldr	r3, [pc, #248]	; (448c <_ext_irq_init+0x174>)
    4392:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4394:	4a3e      	ldr	r2, [pc, #248]	; (4490 <_ext_irq_init+0x178>)
    4396:	2100      	movs	r1, #0
    4398:	4831      	ldr	r0, [pc, #196]	; (4460 <_ext_irq_init+0x148>)
    439a:	4b3e      	ldr	r3, [pc, #248]	; (4494 <_ext_irq_init+0x17c>)
    439c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    439e:	2211      	movs	r2, #17
    43a0:	2101      	movs	r1, #1
    43a2:	482f      	ldr	r0, [pc, #188]	; (4460 <_ext_irq_init+0x148>)
    43a4:	4b3b      	ldr	r3, [pc, #236]	; (4494 <_ext_irq_init+0x17c>)
    43a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    43a8:	482d      	ldr	r0, [pc, #180]	; (4460 <_ext_irq_init+0x148>)
    43aa:	4b3b      	ldr	r3, [pc, #236]	; (4498 <_ext_irq_init+0x180>)
    43ac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    43ae:	200c      	movs	r0, #12
    43b0:	4b3a      	ldr	r3, [pc, #232]	; (449c <_ext_irq_init+0x184>)
    43b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    43b4:	200c      	movs	r0, #12
    43b6:	4b3a      	ldr	r3, [pc, #232]	; (44a0 <_ext_irq_init+0x188>)
    43b8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    43ba:	200c      	movs	r0, #12
    43bc:	4b39      	ldr	r3, [pc, #228]	; (44a4 <_ext_irq_init+0x18c>)
    43be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    43c0:	200d      	movs	r0, #13
    43c2:	4b36      	ldr	r3, [pc, #216]	; (449c <_ext_irq_init+0x184>)
    43c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    43c6:	200d      	movs	r0, #13
    43c8:	4b35      	ldr	r3, [pc, #212]	; (44a0 <_ext_irq_init+0x188>)
    43ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    43cc:	200d      	movs	r0, #13
    43ce:	4b35      	ldr	r3, [pc, #212]	; (44a4 <_ext_irq_init+0x18c>)
    43d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    43d2:	200f      	movs	r0, #15
    43d4:	4b31      	ldr	r3, [pc, #196]	; (449c <_ext_irq_init+0x184>)
    43d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    43d8:	200f      	movs	r0, #15
    43da:	4b31      	ldr	r3, [pc, #196]	; (44a0 <_ext_irq_init+0x188>)
    43dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    43de:	200f      	movs	r0, #15
    43e0:	4b30      	ldr	r3, [pc, #192]	; (44a4 <_ext_irq_init+0x18c>)
    43e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    43e4:	2010      	movs	r0, #16
    43e6:	4b2d      	ldr	r3, [pc, #180]	; (449c <_ext_irq_init+0x184>)
    43e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    43ea:	2010      	movs	r0, #16
    43ec:	4b2c      	ldr	r3, [pc, #176]	; (44a0 <_ext_irq_init+0x188>)
    43ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    43f0:	2010      	movs	r0, #16
    43f2:	4b2c      	ldr	r3, [pc, #176]	; (44a4 <_ext_irq_init+0x18c>)
    43f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    43f6:	2011      	movs	r0, #17
    43f8:	4b28      	ldr	r3, [pc, #160]	; (449c <_ext_irq_init+0x184>)
    43fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    43fc:	2011      	movs	r0, #17
    43fe:	4b28      	ldr	r3, [pc, #160]	; (44a0 <_ext_irq_init+0x188>)
    4400:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4402:	2011      	movs	r0, #17
    4404:	4b27      	ldr	r3, [pc, #156]	; (44a4 <_ext_irq_init+0x18c>)
    4406:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4408:	2012      	movs	r0, #18
    440a:	4b24      	ldr	r3, [pc, #144]	; (449c <_ext_irq_init+0x184>)
    440c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    440e:	2012      	movs	r0, #18
    4410:	4b23      	ldr	r3, [pc, #140]	; (44a0 <_ext_irq_init+0x188>)
    4412:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4414:	2012      	movs	r0, #18
    4416:	4b23      	ldr	r3, [pc, #140]	; (44a4 <_ext_irq_init+0x18c>)
    4418:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    441a:	2013      	movs	r0, #19
    441c:	4b1f      	ldr	r3, [pc, #124]	; (449c <_ext_irq_init+0x184>)
    441e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4420:	2013      	movs	r0, #19
    4422:	4b1f      	ldr	r3, [pc, #124]	; (44a0 <_ext_irq_init+0x188>)
    4424:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4426:	2013      	movs	r0, #19
    4428:	4b1e      	ldr	r3, [pc, #120]	; (44a4 <_ext_irq_init+0x18c>)
    442a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    442c:	2014      	movs	r0, #20
    442e:	4b1b      	ldr	r3, [pc, #108]	; (449c <_ext_irq_init+0x184>)
    4430:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4432:	2014      	movs	r0, #20
    4434:	4b1a      	ldr	r3, [pc, #104]	; (44a0 <_ext_irq_init+0x188>)
    4436:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4438:	2014      	movs	r0, #20
    443a:	4b1a      	ldr	r3, [pc, #104]	; (44a4 <_ext_irq_init+0x18c>)
    443c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    443e:	2015      	movs	r0, #21
    4440:	4b16      	ldr	r3, [pc, #88]	; (449c <_ext_irq_init+0x184>)
    4442:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4444:	2015      	movs	r0, #21
    4446:	4b16      	ldr	r3, [pc, #88]	; (44a0 <_ext_irq_init+0x188>)
    4448:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    444a:	2015      	movs	r0, #21
    444c:	4b15      	ldr	r3, [pc, #84]	; (44a4 <_ext_irq_init+0x18c>)
    444e:	4798      	blx	r3

	callback = cb;
    4450:	4a15      	ldr	r2, [pc, #84]	; (44a8 <_ext_irq_init+0x190>)
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4456:	2300      	movs	r3, #0
}
    4458:	4618      	mov	r0, r3
    445a:	3708      	adds	r7, #8
    445c:	46bd      	mov	sp, r7
    445e:	bd80      	pop	{r7, pc}
    4460:	40002800 	.word	0x40002800
    4464:	000040d9 	.word	0x000040d9
    4468:	00004209 	.word	0x00004209
    446c:	00004199 	.word	0x00004199
    4470:	000040b5 	.word	0x000040b5
    4474:	00004239 	.word	0x00004239
    4478:	000041c5 	.word	0x000041c5
    447c:	00004261 	.word	0x00004261
    4480:	0000427f 	.word	0x0000427f
    4484:	0000429b 	.word	0x0000429b
    4488:	000042df 	.word	0x000042df
    448c:	000042fb 	.word	0x000042fb
    4490:	90999013 	.word	0x90999013
    4494:	000042b7 	.word	0x000042b7
    4498:	0000416d 	.word	0x0000416d
    449c:	00004035 	.word	0x00004035
    44a0:	00004079 	.word	0x00004079
    44a4:	00003ff9 	.word	0x00003ff9
    44a8:	20000b24 	.word	0x20000b24

000044ac <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b084      	sub	sp, #16
    44b0:	af00      	add	r7, sp, #0
    44b2:	6078      	str	r0, [r7, #4]
    44b4:	460b      	mov	r3, r1
    44b6:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    44b8:	23ff      	movs	r3, #255	; 0xff
    44ba:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    44bc:	2300      	movs	r3, #0
    44be:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    44c0:	e010      	b.n	44e4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    44c2:	7bbb      	ldrb	r3, [r7, #14]
    44c4:	4a1c      	ldr	r2, [pc, #112]	; (4538 <_ext_irq_enable+0x8c>)
    44c6:	00db      	lsls	r3, r3, #3
    44c8:	4413      	add	r3, r2
    44ca:	685a      	ldr	r2, [r3, #4]
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	429a      	cmp	r2, r3
    44d0:	d105      	bne.n	44de <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    44d2:	7bbb      	ldrb	r3, [r7, #14]
    44d4:	4a18      	ldr	r2, [pc, #96]	; (4538 <_ext_irq_enable+0x8c>)
    44d6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    44da:	73fb      	strb	r3, [r7, #15]
			break;
    44dc:	e005      	b.n	44ea <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    44de:	7bbb      	ldrb	r3, [r7, #14]
    44e0:	3301      	adds	r3, #1
    44e2:	73bb      	strb	r3, [r7, #14]
    44e4:	7bbb      	ldrb	r3, [r7, #14]
    44e6:	2b08      	cmp	r3, #8
    44e8:	d9eb      	bls.n	44c2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    44ea:	7bfb      	ldrb	r3, [r7, #15]
    44ec:	2bff      	cmp	r3, #255	; 0xff
    44ee:	d102      	bne.n	44f6 <_ext_irq_enable+0x4a>
		return -1;
    44f0:	f04f 33ff 	mov.w	r3, #4294967295
    44f4:	e01c      	b.n	4530 <_ext_irq_enable+0x84>
	}

	if (enable) {
    44f6:	78fb      	ldrb	r3, [r7, #3]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d008      	beq.n	450e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    44fc:	7bfb      	ldrb	r3, [r7, #15]
    44fe:	2201      	movs	r2, #1
    4500:	fa02 f303 	lsl.w	r3, r2, r3
    4504:	4619      	mov	r1, r3
    4506:	480d      	ldr	r0, [pc, #52]	; (453c <_ext_irq_enable+0x90>)
    4508:	4b0d      	ldr	r3, [pc, #52]	; (4540 <_ext_irq_enable+0x94>)
    450a:	4798      	blx	r3
    450c:	e00f      	b.n	452e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    450e:	7bfb      	ldrb	r3, [r7, #15]
    4510:	2201      	movs	r2, #1
    4512:	fa02 f303 	lsl.w	r3, r2, r3
    4516:	4619      	mov	r1, r3
    4518:	4808      	ldr	r0, [pc, #32]	; (453c <_ext_irq_enable+0x90>)
    451a:	4b0a      	ldr	r3, [pc, #40]	; (4544 <_ext_irq_enable+0x98>)
    451c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    451e:	7bfb      	ldrb	r3, [r7, #15]
    4520:	2201      	movs	r2, #1
    4522:	fa02 f303 	lsl.w	r3, r2, r3
    4526:	4619      	mov	r1, r3
    4528:	4804      	ldr	r0, [pc, #16]	; (453c <_ext_irq_enable+0x90>)
    452a:	4b07      	ldr	r3, [pc, #28]	; (4548 <_ext_irq_enable+0x9c>)
    452c:	4798      	blx	r3
	}

	return ERR_NONE;
    452e:	2300      	movs	r3, #0
}
    4530:	4618      	mov	r0, r3
    4532:	3710      	adds	r7, #16
    4534:	46bd      	mov	sp, r7
    4536:	bd80      	pop	{r7, pc}
    4538:	000111ec 	.word	0x000111ec
    453c:	40002800 	.word	0x40002800
    4540:	00004135 	.word	0x00004135
    4544:	00004151 	.word	0x00004151
    4548:	00004119 	.word	0x00004119

0000454c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    454c:	b580      	push	{r7, lr}
    454e:	b084      	sub	sp, #16
    4550:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4552:	4841      	ldr	r0, [pc, #260]	; (4658 <_ext_irq_handler+0x10c>)
    4554:	4b41      	ldr	r3, [pc, #260]	; (465c <_ext_irq_handler+0x110>)
    4556:	4798      	blx	r3
    4558:	4603      	mov	r3, r0
    455a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    455c:	f04f 33ff 	mov.w	r3, #4294967295
    4560:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4562:	683b      	ldr	r3, [r7, #0]
    4564:	4619      	mov	r1, r3
    4566:	483c      	ldr	r0, [pc, #240]	; (4658 <_ext_irq_handler+0x10c>)
    4568:	4b3d      	ldr	r3, [pc, #244]	; (4660 <_ext_irq_handler+0x114>)
    456a:	4798      	blx	r3

	ASSERT(callback);
    456c:	4b3d      	ldr	r3, [pc, #244]	; (4664 <_ext_irq_handler+0x118>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	2b00      	cmp	r3, #0
    4572:	bf14      	ite	ne
    4574:	2301      	movne	r3, #1
    4576:	2300      	moveq	r3, #0
    4578:	b2db      	uxtb	r3, r3
    457a:	f44f 7284 	mov.w	r2, #264	; 0x108
    457e:	493a      	ldr	r1, [pc, #232]	; (4668 <_ext_irq_handler+0x11c>)
    4580:	4618      	mov	r0, r3
    4582:	4b3a      	ldr	r3, [pc, #232]	; (466c <_ext_irq_handler+0x120>)
    4584:	4798      	blx	r3

	while (flags) {
    4586:	e060      	b.n	464a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4588:	683b      	ldr	r3, [r7, #0]
    458a:	4618      	mov	r0, r3
    458c:	4b38      	ldr	r3, [pc, #224]	; (4670 <_ext_irq_handler+0x124>)
    458e:	4798      	blx	r3
    4590:	4603      	mov	r3, r0
    4592:	b2db      	uxtb	r3, r3
    4594:	3b01      	subs	r3, #1
    4596:	b2db      	uxtb	r3, r3
    4598:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    459a:	e047      	b.n	462c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    459c:	2300      	movs	r3, #0
    459e:	71fb      	strb	r3, [r7, #7]
    45a0:	2309      	movs	r3, #9
    45a2:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    45a4:	e024      	b.n	45f0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    45a6:	79ba      	ldrb	r2, [r7, #6]
    45a8:	79fb      	ldrb	r3, [r7, #7]
    45aa:	4413      	add	r3, r2
    45ac:	105b      	asrs	r3, r3, #1
    45ae:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    45b0:	797b      	ldrb	r3, [r7, #5]
    45b2:	4a30      	ldr	r2, [pc, #192]	; (4674 <_ext_irq_handler+0x128>)
    45b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    45b8:	461a      	mov	r2, r3
    45ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45be:	429a      	cmp	r2, r3
    45c0:	d106      	bne.n	45d0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    45c2:	797b      	ldrb	r3, [r7, #5]
    45c4:	4a2b      	ldr	r2, [pc, #172]	; (4674 <_ext_irq_handler+0x128>)
    45c6:	00db      	lsls	r3, r3, #3
    45c8:	4413      	add	r3, r2
    45ca:	685b      	ldr	r3, [r3, #4]
    45cc:	60bb      	str	r3, [r7, #8]
					break;
    45ce:	e013      	b.n	45f8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    45d0:	797b      	ldrb	r3, [r7, #5]
    45d2:	4a28      	ldr	r2, [pc, #160]	; (4674 <_ext_irq_handler+0x128>)
    45d4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    45d8:	461a      	mov	r2, r3
    45da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45de:	429a      	cmp	r2, r3
    45e0:	da03      	bge.n	45ea <_ext_irq_handler+0x9e>
					lower = middle + 1;
    45e2:	797b      	ldrb	r3, [r7, #5]
    45e4:	3301      	adds	r3, #1
    45e6:	71fb      	strb	r3, [r7, #7]
    45e8:	e002      	b.n	45f0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    45ea:	797b      	ldrb	r3, [r7, #5]
    45ec:	3b01      	subs	r3, #1
    45ee:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    45f0:	79ba      	ldrb	r2, [r7, #6]
    45f2:	79fb      	ldrb	r3, [r7, #7]
    45f4:	429a      	cmp	r2, r3
    45f6:	d2d6      	bcs.n	45a6 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    45f8:	68bb      	ldr	r3, [r7, #8]
    45fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    45fe:	d003      	beq.n	4608 <_ext_irq_handler+0xbc>
				callback(pin);
    4600:	4b18      	ldr	r3, [pc, #96]	; (4664 <_ext_irq_handler+0x118>)
    4602:	681b      	ldr	r3, [r3, #0]
    4604:	68b8      	ldr	r0, [r7, #8]
    4606:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4608:	f997 300f 	ldrsb.w	r3, [r7, #15]
    460c:	2201      	movs	r2, #1
    460e:	fa02 f303 	lsl.w	r3, r2, r3
    4612:	43da      	mvns	r2, r3
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	4013      	ands	r3, r2
    4618:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    461a:	683b      	ldr	r3, [r7, #0]
    461c:	4618      	mov	r0, r3
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <_ext_irq_handler+0x124>)
    4620:	4798      	blx	r3
    4622:	4603      	mov	r3, r0
    4624:	b2db      	uxtb	r3, r3
    4626:	3b01      	subs	r3, #1
    4628:	b2db      	uxtb	r3, r3
    462a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    462c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4630:	f1b3 3fff 	cmp.w	r3, #4294967295
    4634:	d1b2      	bne.n	459c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4636:	4808      	ldr	r0, [pc, #32]	; (4658 <_ext_irq_handler+0x10c>)
    4638:	4b08      	ldr	r3, [pc, #32]	; (465c <_ext_irq_handler+0x110>)
    463a:	4798      	blx	r3
    463c:	4603      	mov	r3, r0
    463e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4640:	683b      	ldr	r3, [r7, #0]
    4642:	4619      	mov	r1, r3
    4644:	4804      	ldr	r0, [pc, #16]	; (4658 <_ext_irq_handler+0x10c>)
    4646:	4b06      	ldr	r3, [pc, #24]	; (4660 <_ext_irq_handler+0x114>)
    4648:	4798      	blx	r3
	while (flags) {
    464a:	683b      	ldr	r3, [r7, #0]
    464c:	2b00      	cmp	r3, #0
    464e:	d19b      	bne.n	4588 <_ext_irq_handler+0x3c>
	}
}
    4650:	bf00      	nop
    4652:	3710      	adds	r7, #16
    4654:	46bd      	mov	sp, r7
    4656:	bd80      	pop	{r7, pc}
    4658:	40002800 	.word	0x40002800
    465c:	00004101 	.word	0x00004101
    4660:	00004119 	.word	0x00004119
    4664:	20000b24 	.word	0x20000b24
    4668:	00011234 	.word	0x00011234
    466c:	0000337d 	.word	0x0000337d
    4670:	00010c7d 	.word	0x00010c7d
    4674:	000111ec 	.word	0x000111ec

00004678 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4678:	b580      	push	{r7, lr}
    467a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    467c:	4b01      	ldr	r3, [pc, #4]	; (4684 <EIC_0_Handler+0xc>)
    467e:	4798      	blx	r3
} /**
    4680:	bf00      	nop
    4682:	bd80      	pop	{r7, pc}
    4684:	0000454d 	.word	0x0000454d

00004688 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4688:	b580      	push	{r7, lr}
    468a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    468c:	4b01      	ldr	r3, [pc, #4]	; (4694 <EIC_1_Handler+0xc>)
    468e:	4798      	blx	r3
} /**
    4690:	bf00      	nop
    4692:	bd80      	pop	{r7, pc}
    4694:	0000454d 	.word	0x0000454d

00004698 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4698:	b580      	push	{r7, lr}
    469a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    469c:	4b01      	ldr	r3, [pc, #4]	; (46a4 <EIC_3_Handler+0xc>)
    469e:	4798      	blx	r3
} /**
    46a0:	bf00      	nop
    46a2:	bd80      	pop	{r7, pc}
    46a4:	0000454d 	.word	0x0000454d

000046a8 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46ac:	4b01      	ldr	r3, [pc, #4]	; (46b4 <EIC_4_Handler+0xc>)
    46ae:	4798      	blx	r3
} /**
    46b0:	bf00      	nop
    46b2:	bd80      	pop	{r7, pc}
    46b4:	0000454d 	.word	0x0000454d

000046b8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46bc:	4b01      	ldr	r3, [pc, #4]	; (46c4 <EIC_5_Handler+0xc>)
    46be:	4798      	blx	r3
} /**
    46c0:	bf00      	nop
    46c2:	bd80      	pop	{r7, pc}
    46c4:	0000454d 	.word	0x0000454d

000046c8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    46c8:	b580      	push	{r7, lr}
    46ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46cc:	4b01      	ldr	r3, [pc, #4]	; (46d4 <EIC_6_Handler+0xc>)
    46ce:	4798      	blx	r3
} /**
    46d0:	bf00      	nop
    46d2:	bd80      	pop	{r7, pc}
    46d4:	0000454d 	.word	0x0000454d

000046d8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    46d8:	b580      	push	{r7, lr}
    46da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46dc:	4b01      	ldr	r3, [pc, #4]	; (46e4 <EIC_7_Handler+0xc>)
    46de:	4798      	blx	r3
} /**
    46e0:	bf00      	nop
    46e2:	bd80      	pop	{r7, pc}
    46e4:	0000454d 	.word	0x0000454d

000046e8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    46e8:	b580      	push	{r7, lr}
    46ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46ec:	4b01      	ldr	r3, [pc, #4]	; (46f4 <EIC_8_Handler+0xc>)
    46ee:	4798      	blx	r3
} /**
    46f0:	bf00      	nop
    46f2:	bd80      	pop	{r7, pc}
    46f4:	0000454d 	.word	0x0000454d

000046f8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46fc:	4b01      	ldr	r3, [pc, #4]	; (4704 <EIC_9_Handler+0xc>)
    46fe:	4798      	blx	r3
}
    4700:	bf00      	nop
    4702:	bd80      	pop	{r7, pc}
    4704:	0000454d 	.word	0x0000454d

00004708 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4708:	b480      	push	{r7}
    470a:	b085      	sub	sp, #20
    470c:	af00      	add	r7, sp, #0
    470e:	60f8      	str	r0, [r7, #12]
    4710:	460b      	mov	r3, r1
    4712:	607a      	str	r2, [r7, #4]
    4714:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4716:	7afa      	ldrb	r2, [r7, #11]
    4718:	68fb      	ldr	r3, [r7, #12]
    471a:	3248      	adds	r2, #72	; 0x48
    471c:	6879      	ldr	r1, [r7, #4]
    471e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4722:	bf00      	nop
    4724:	3714      	adds	r7, #20
    4726:	46bd      	mov	sp, r7
    4728:	f85d 7b04 	ldr.w	r7, [sp], #4
    472c:	4770      	bx	lr

0000472e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    472e:	b480      	push	{r7}
    4730:	b083      	sub	sp, #12
    4732:	af00      	add	r7, sp, #0
    4734:	6078      	str	r0, [r7, #4]
    4736:	460b      	mov	r3, r1
    4738:	70fb      	strb	r3, [r7, #3]
    473a:	4613      	mov	r3, r2
    473c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    473e:	78fb      	ldrb	r3, [r7, #3]
    4740:	687a      	ldr	r2, [r7, #4]
    4742:	3304      	adds	r3, #4
    4744:	00db      	lsls	r3, r3, #3
    4746:	4413      	add	r3, r2
    4748:	78ba      	ldrb	r2, [r7, #2]
    474a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    474c:	78fb      	ldrb	r3, [r7, #3]
    474e:	78ba      	ldrb	r2, [r7, #2]
    4750:	43d2      	mvns	r2, r2
    4752:	b2d1      	uxtb	r1, r2
    4754:	687a      	ldr	r2, [r7, #4]
    4756:	3304      	adds	r3, #4
    4758:	00db      	lsls	r3, r3, #3
    475a:	4413      	add	r3, r2
    475c:	460a      	mov	r2, r1
    475e:	711a      	strb	r2, [r3, #4]
}
    4760:	bf00      	nop
    4762:	370c      	adds	r7, #12
    4764:	46bd      	mov	sp, r7
    4766:	f85d 7b04 	ldr.w	r7, [sp], #4
    476a:	4770      	bx	lr

0000476c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    476c:	b480      	push	{r7}
    476e:	b085      	sub	sp, #20
    4770:	af00      	add	r7, sp, #0
    4772:	60f8      	str	r0, [r7, #12]
    4774:	460b      	mov	r3, r1
    4776:	607a      	str	r2, [r7, #4]
    4778:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    477a:	7afa      	ldrb	r2, [r7, #11]
    477c:	68fb      	ldr	r3, [r7, #12]
    477e:	3204      	adds	r2, #4
    4780:	6879      	ldr	r1, [r7, #4]
    4782:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4786:	bf00      	nop
    4788:	3714      	adds	r7, #20
    478a:	46bd      	mov	sp, r7
    478c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4790:	4770      	bx	lr
	...

00004794 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4794:	b580      	push	{r7, lr}
    4796:	b082      	sub	sp, #8
    4798:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    479a:	2300      	movs	r3, #0
    479c:	71fb      	strb	r3, [r7, #7]
    479e:	e00b      	b.n	47b8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    47a0:	79fb      	ldrb	r3, [r7, #7]
    47a2:	4a18      	ldr	r2, [pc, #96]	; (4804 <_event_system_init+0x70>)
    47a4:	5cd3      	ldrb	r3, [r2, r3]
    47a6:	461a      	mov	r2, r3
    47a8:	79fb      	ldrb	r3, [r7, #7]
    47aa:	4619      	mov	r1, r3
    47ac:	4816      	ldr	r0, [pc, #88]	; (4808 <_event_system_init+0x74>)
    47ae:	4b17      	ldr	r3, [pc, #92]	; (480c <_event_system_init+0x78>)
    47b0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    47b2:	79fb      	ldrb	r3, [r7, #7]
    47b4:	3301      	adds	r3, #1
    47b6:	71fb      	strb	r3, [r7, #7]
    47b8:	79fb      	ldrb	r3, [r7, #7]
    47ba:	2b42      	cmp	r3, #66	; 0x42
    47bc:	d9f0      	bls.n	47a0 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    47be:	2300      	movs	r3, #0
    47c0:	71fb      	strb	r3, [r7, #7]
    47c2:	e016      	b.n	47f2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    47c4:	79fb      	ldrb	r3, [r7, #7]
    47c6:	4a12      	ldr	r2, [pc, #72]	; (4810 <_event_system_init+0x7c>)
    47c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    47cc:	461a      	mov	r2, r3
    47ce:	79fb      	ldrb	r3, [r7, #7]
    47d0:	4619      	mov	r1, r3
    47d2:	480d      	ldr	r0, [pc, #52]	; (4808 <_event_system_init+0x74>)
    47d4:	4b0f      	ldr	r3, [pc, #60]	; (4814 <_event_system_init+0x80>)
    47d6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    47d8:	79fb      	ldrb	r3, [r7, #7]
    47da:	4a0f      	ldr	r2, [pc, #60]	; (4818 <_event_system_init+0x84>)
    47dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47e0:	b2da      	uxtb	r2, r3
    47e2:	79fb      	ldrb	r3, [r7, #7]
    47e4:	4619      	mov	r1, r3
    47e6:	4808      	ldr	r0, [pc, #32]	; (4808 <_event_system_init+0x74>)
    47e8:	4b0c      	ldr	r3, [pc, #48]	; (481c <_event_system_init+0x88>)
    47ea:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    47ec:	79fb      	ldrb	r3, [r7, #7]
    47ee:	3301      	adds	r3, #1
    47f0:	71fb      	strb	r3, [r7, #7]
    47f2:	79fb      	ldrb	r3, [r7, #7]
    47f4:	2b1f      	cmp	r3, #31
    47f6:	d9e5      	bls.n	47c4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    47f8:	2300      	movs	r3, #0
}
    47fa:	4618      	mov	r0, r3
    47fc:	3708      	adds	r7, #8
    47fe:	46bd      	mov	sp, r7
    4800:	bd80      	pop	{r7, pc}
    4802:	bf00      	nop
    4804:	0001124c 	.word	0x0001124c
    4808:	4100e000 	.word	0x4100e000
    480c:	00004709 	.word	0x00004709
    4810:	00011290 	.word	0x00011290
    4814:	0000476d 	.word	0x0000476d
    4818:	000112d0 	.word	0x000112d0
    481c:	0000472f 	.word	0x0000472f

00004820 <hri_gclk_wait_for_sync>:
{
    4820:	b480      	push	{r7}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
    4828:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    482a:	bf00      	nop
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	685a      	ldr	r2, [r3, #4]
    4830:	683b      	ldr	r3, [r7, #0]
    4832:	4013      	ands	r3, r2
    4834:	2b00      	cmp	r3, #0
    4836:	d1f9      	bne.n	482c <hri_gclk_wait_for_sync+0xc>
}
    4838:	bf00      	nop
    483a:	370c      	adds	r7, #12
    483c:	46bd      	mov	sp, r7
    483e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4842:	4770      	bx	lr

00004844 <hri_gclk_write_GENCTRL_reg>:
{
    4844:	b580      	push	{r7, lr}
    4846:	b084      	sub	sp, #16
    4848:	af00      	add	r7, sp, #0
    484a:	60f8      	str	r0, [r7, #12]
    484c:	460b      	mov	r3, r1
    484e:	607a      	str	r2, [r7, #4]
    4850:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4852:	7afa      	ldrb	r2, [r7, #11]
    4854:	68fb      	ldr	r3, [r7, #12]
    4856:	3208      	adds	r2, #8
    4858:	6879      	ldr	r1, [r7, #4]
    485a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    485e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4862:	68f8      	ldr	r0, [r7, #12]
    4864:	4b02      	ldr	r3, [pc, #8]	; (4870 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4866:	4798      	blx	r3
}
    4868:	bf00      	nop
    486a:	3710      	adds	r7, #16
    486c:	46bd      	mov	sp, r7
    486e:	bd80      	pop	{r7, pc}
    4870:	00004821 	.word	0x00004821

00004874 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4874:	b580      	push	{r7, lr}
    4876:	b082      	sub	sp, #8
    4878:	af00      	add	r7, sp, #0
    487a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	f003 0301 	and.w	r3, r3, #1
    4882:	2b00      	cmp	r3, #0
    4884:	d004      	beq.n	4890 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4886:	4a3b      	ldr	r2, [pc, #236]	; (4974 <_gclk_init_generators_by_fref+0x100>)
    4888:	2100      	movs	r1, #0
    488a:	483b      	ldr	r0, [pc, #236]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    488c:	4b3b      	ldr	r3, [pc, #236]	; (497c <_gclk_init_generators_by_fref+0x108>)
    488e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	f003 0302 	and.w	r3, r3, #2
    4896:	2b00      	cmp	r3, #0
    4898:	d004      	beq.n	48a4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    489a:	4a39      	ldr	r2, [pc, #228]	; (4980 <_gclk_init_generators_by_fref+0x10c>)
    489c:	2101      	movs	r1, #1
    489e:	4836      	ldr	r0, [pc, #216]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    48a0:	4b36      	ldr	r3, [pc, #216]	; (497c <_gclk_init_generators_by_fref+0x108>)
    48a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	f003 0304 	and.w	r3, r3, #4
    48aa:	2b00      	cmp	r3, #0
    48ac:	d004      	beq.n	48b8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    48ae:	4a35      	ldr	r2, [pc, #212]	; (4984 <_gclk_init_generators_by_fref+0x110>)
    48b0:	2102      	movs	r1, #2
    48b2:	4831      	ldr	r0, [pc, #196]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    48b4:	4b31      	ldr	r3, [pc, #196]	; (497c <_gclk_init_generators_by_fref+0x108>)
    48b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	f003 0308 	and.w	r3, r3, #8
    48be:	2b00      	cmp	r3, #0
    48c0:	d004      	beq.n	48cc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    48c2:	4a31      	ldr	r2, [pc, #196]	; (4988 <_gclk_init_generators_by_fref+0x114>)
    48c4:	2103      	movs	r1, #3
    48c6:	482c      	ldr	r0, [pc, #176]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    48c8:	4b2c      	ldr	r3, [pc, #176]	; (497c <_gclk_init_generators_by_fref+0x108>)
    48ca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	f003 0310 	and.w	r3, r3, #16
    48d2:	2b00      	cmp	r3, #0
    48d4:	d004      	beq.n	48e0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    48d6:	4a2d      	ldr	r2, [pc, #180]	; (498c <_gclk_init_generators_by_fref+0x118>)
    48d8:	2104      	movs	r1, #4
    48da:	4827      	ldr	r0, [pc, #156]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    48dc:	4b27      	ldr	r3, [pc, #156]	; (497c <_gclk_init_generators_by_fref+0x108>)
    48de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	f003 0320 	and.w	r3, r3, #32
    48e6:	2b00      	cmp	r3, #0
    48e8:	d004      	beq.n	48f4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    48ea:	4a29      	ldr	r2, [pc, #164]	; (4990 <_gclk_init_generators_by_fref+0x11c>)
    48ec:	2105      	movs	r1, #5
    48ee:	4822      	ldr	r0, [pc, #136]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    48f0:	4b22      	ldr	r3, [pc, #136]	; (497c <_gclk_init_generators_by_fref+0x108>)
    48f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    48fa:	2b00      	cmp	r3, #0
    48fc:	d004      	beq.n	4908 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    48fe:	4a25      	ldr	r2, [pc, #148]	; (4994 <_gclk_init_generators_by_fref+0x120>)
    4900:	2106      	movs	r1, #6
    4902:	481d      	ldr	r0, [pc, #116]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    4904:	4b1d      	ldr	r3, [pc, #116]	; (497c <_gclk_init_generators_by_fref+0x108>)
    4906:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    490e:	2b00      	cmp	r3, #0
    4910:	d004      	beq.n	491c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4912:	4a21      	ldr	r2, [pc, #132]	; (4998 <_gclk_init_generators_by_fref+0x124>)
    4914:	2107      	movs	r1, #7
    4916:	4818      	ldr	r0, [pc, #96]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    4918:	4b18      	ldr	r3, [pc, #96]	; (497c <_gclk_init_generators_by_fref+0x108>)
    491a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4922:	2b00      	cmp	r3, #0
    4924:	d004      	beq.n	4930 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4926:	4a1d      	ldr	r2, [pc, #116]	; (499c <_gclk_init_generators_by_fref+0x128>)
    4928:	2108      	movs	r1, #8
    492a:	4813      	ldr	r0, [pc, #76]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    492c:	4b13      	ldr	r3, [pc, #76]	; (497c <_gclk_init_generators_by_fref+0x108>)
    492e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4936:	2b00      	cmp	r3, #0
    4938:	d004      	beq.n	4944 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    493a:	4a19      	ldr	r2, [pc, #100]	; (49a0 <_gclk_init_generators_by_fref+0x12c>)
    493c:	2109      	movs	r1, #9
    493e:	480e      	ldr	r0, [pc, #56]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    4940:	4b0e      	ldr	r3, [pc, #56]	; (497c <_gclk_init_generators_by_fref+0x108>)
    4942:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    494a:	2b00      	cmp	r3, #0
    494c:	d004      	beq.n	4958 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    494e:	4a15      	ldr	r2, [pc, #84]	; (49a4 <_gclk_init_generators_by_fref+0x130>)
    4950:	210a      	movs	r1, #10
    4952:	4809      	ldr	r0, [pc, #36]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    4954:	4b09      	ldr	r3, [pc, #36]	; (497c <_gclk_init_generators_by_fref+0x108>)
    4956:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    495e:	2b00      	cmp	r3, #0
    4960:	d004      	beq.n	496c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4962:	4a11      	ldr	r2, [pc, #68]	; (49a8 <_gclk_init_generators_by_fref+0x134>)
    4964:	210b      	movs	r1, #11
    4966:	4804      	ldr	r0, [pc, #16]	; (4978 <_gclk_init_generators_by_fref+0x104>)
    4968:	4b04      	ldr	r3, [pc, #16]	; (497c <_gclk_init_generators_by_fref+0x108>)
    496a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    496c:	bf00      	nop
    496e:	3708      	adds	r7, #8
    4970:	46bd      	mov	sp, r7
    4972:	bd80      	pop	{r7, pc}
    4974:	00010107 	.word	0x00010107
    4978:	40001c00 	.word	0x40001c00
    497c:	00004845 	.word	0x00004845
    4980:	00010907 	.word	0x00010907
    4984:	00010906 	.word	0x00010906
    4988:	00020908 	.word	0x00020908
    498c:	00010901 	.word	0x00010901
    4990:	00062901 	.word	0x00062901
    4994:	000c2901 	.word	0x000c2901
    4998:	00082908 	.word	0x00082908
    499c:	00032901 	.word	0x00032901
    49a0:	00011908 	.word	0x00011908
    49a4:	00010905 	.word	0x00010905
    49a8:	00041905 	.word	0x00041905

000049ac <hri_mclk_write_CPUDIV_reg>:
{
    49ac:	b480      	push	{r7}
    49ae:	b083      	sub	sp, #12
    49b0:	af00      	add	r7, sp, #0
    49b2:	6078      	str	r0, [r7, #4]
    49b4:	460b      	mov	r3, r1
    49b6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	78fa      	ldrb	r2, [r7, #3]
    49bc:	715a      	strb	r2, [r3, #5]
}
    49be:	bf00      	nop
    49c0:	370c      	adds	r7, #12
    49c2:	46bd      	mov	sp, r7
    49c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49c8:	4770      	bx	lr
	...

000049cc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b082      	sub	sp, #8
    49d0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    49d2:	4b05      	ldr	r3, [pc, #20]	; (49e8 <_mclk_init+0x1c>)
    49d4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    49d6:	2101      	movs	r1, #1
    49d8:	6878      	ldr	r0, [r7, #4]
    49da:	4b04      	ldr	r3, [pc, #16]	; (49ec <_mclk_init+0x20>)
    49dc:	4798      	blx	r3
}
    49de:	bf00      	nop
    49e0:	3708      	adds	r7, #8
    49e2:	46bd      	mov	sp, r7
    49e4:	bd80      	pop	{r7, pc}
    49e6:	bf00      	nop
    49e8:	40000800 	.word	0x40000800
    49ec:	000049ad 	.word	0x000049ad

000049f0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    49f0:	b480      	push	{r7}
    49f2:	b083      	sub	sp, #12
    49f4:	af00      	add	r7, sp, #0
    49f6:	6078      	str	r0, [r7, #4]
    49f8:	460b      	mov	r3, r1
    49fa:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	78fa      	ldrb	r2, [r7, #3]
    4a00:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a02:	bf00      	nop
    4a04:	370c      	adds	r7, #12
    4a06:	46bd      	mov	sp, r7
    4a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a0c:	4770      	bx	lr

00004a0e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4a0e:	b480      	push	{r7}
    4a10:	b083      	sub	sp, #12
    4a12:	af00      	add	r7, sp, #0
    4a14:	6078      	str	r0, [r7, #4]
    4a16:	460b      	mov	r3, r1
    4a18:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4a1a:	687b      	ldr	r3, [r7, #4]
    4a1c:	887a      	ldrh	r2, [r7, #2]
    4a1e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a20:	bf00      	nop
    4a22:	370c      	adds	r7, #12
    4a24:	46bd      	mov	sp, r7
    4a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a2a:	4770      	bx	lr

00004a2c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4a2c:	b480      	push	{r7}
    4a2e:	b083      	sub	sp, #12
    4a30:	af00      	add	r7, sp, #0
    4a32:	6078      	str	r0, [r7, #4]
    4a34:	460b      	mov	r3, r1
    4a36:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	78fa      	ldrb	r2, [r7, #3]
    4a3c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a3e:	bf00      	nop
    4a40:	370c      	adds	r7, #12
    4a42:	46bd      	mov	sp, r7
    4a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a48:	4770      	bx	lr

00004a4a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4a4a:	b480      	push	{r7}
    4a4c:	b083      	sub	sp, #12
    4a4e:	af00      	add	r7, sp, #0
    4a50:	6078      	str	r0, [r7, #4]
    4a52:	460b      	mov	r3, r1
    4a54:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	78fa      	ldrb	r2, [r7, #3]
    4a5a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a5c:	bf00      	nop
    4a5e:	370c      	adds	r7, #12
    4a60:	46bd      	mov	sp, r7
    4a62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a66:	4770      	bx	lr

00004a68 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4a68:	b480      	push	{r7}
    4a6a:	b085      	sub	sp, #20
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	69db      	ldr	r3, [r3, #28]
    4a74:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4a76:	68fb      	ldr	r3, [r7, #12]
    4a78:	0a1b      	lsrs	r3, r3, #8
    4a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4a7e:	60fb      	str	r3, [r7, #12]
	return tmp;
    4a80:	68fb      	ldr	r3, [r7, #12]
}
    4a82:	4618      	mov	r0, r3
    4a84:	3714      	adds	r7, #20
    4a86:	46bd      	mov	sp, r7
    4a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a8c:	4770      	bx	lr

00004a8e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4a8e:	b480      	push	{r7}
    4a90:	b083      	sub	sp, #12
    4a92:	af00      	add	r7, sp, #0
    4a94:	6078      	str	r0, [r7, #4]
    4a96:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	683a      	ldr	r2, [r7, #0]
    4a9c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a9e:	bf00      	nop
    4aa0:	370c      	adds	r7, #12
    4aa2:	46bd      	mov	sp, r7
    4aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aa8:	4770      	bx	lr
	...

00004aac <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b082      	sub	sp, #8
    4ab0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4ab2:	4b13      	ldr	r3, [pc, #76]	; (4b00 <_osc32kctrl_init_sources+0x54>)
    4ab4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4ab6:	2300      	movs	r3, #0
    4ab8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4aba:	f242 018e 	movw	r1, #8334	; 0x208e
    4abe:	6878      	ldr	r0, [r7, #4]
    4ac0:	4b10      	ldr	r3, [pc, #64]	; (4b04 <_osc32kctrl_init_sources+0x58>)
    4ac2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4ac4:	2100      	movs	r1, #0
    4ac6:	6878      	ldr	r0, [r7, #4]
    4ac8:	4b0f      	ldr	r3, [pc, #60]	; (4b08 <_osc32kctrl_init_sources+0x5c>)
    4aca:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4acc:	2100      	movs	r1, #0
    4ace:	6878      	ldr	r0, [r7, #4]
    4ad0:	4b0e      	ldr	r3, [pc, #56]	; (4b0c <_osc32kctrl_init_sources+0x60>)
    4ad2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4ad4:	6878      	ldr	r0, [r7, #4]
    4ad6:	4b0e      	ldr	r3, [pc, #56]	; (4b10 <_osc32kctrl_init_sources+0x64>)
    4ad8:	4798      	blx	r3
    4ada:	4603      	mov	r3, r0
    4adc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4ade:	887b      	ldrh	r3, [r7, #2]
    4ae0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4ae2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4ae6:	4619      	mov	r1, r3
    4ae8:	6878      	ldr	r0, [r7, #4]
    4aea:	4b0a      	ldr	r3, [pc, #40]	; (4b14 <_osc32kctrl_init_sources+0x68>)
    4aec:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4aee:	2100      	movs	r1, #0
    4af0:	6878      	ldr	r0, [r7, #4]
    4af2:	4b09      	ldr	r3, [pc, #36]	; (4b18 <_osc32kctrl_init_sources+0x6c>)
    4af4:	4798      	blx	r3
	(void)calib;
}
    4af6:	bf00      	nop
    4af8:	3708      	adds	r7, #8
    4afa:	46bd      	mov	sp, r7
    4afc:	bd80      	pop	{r7, pc}
    4afe:	bf00      	nop
    4b00:	40001400 	.word	0x40001400
    4b04:	00004a0f 	.word	0x00004a0f
    4b08:	00004a2d 	.word	0x00004a2d
    4b0c:	00004a4b 	.word	0x00004a4b
    4b10:	00004a69 	.word	0x00004a69
    4b14:	00004a8f 	.word	0x00004a8f
    4b18:	000049f1 	.word	0x000049f1

00004b1c <hri_gclk_wait_for_sync>:
{
    4b1c:	b480      	push	{r7}
    4b1e:	b083      	sub	sp, #12
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
    4b24:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4b26:	bf00      	nop
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	685a      	ldr	r2, [r3, #4]
    4b2c:	683b      	ldr	r3, [r7, #0]
    4b2e:	4013      	ands	r3, r2
    4b30:	2b00      	cmp	r3, #0
    4b32:	d1f9      	bne.n	4b28 <hri_gclk_wait_for_sync+0xc>
}
    4b34:	bf00      	nop
    4b36:	370c      	adds	r7, #12
    4b38:	46bd      	mov	sp, r7
    4b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b3e:	4770      	bx	lr

00004b40 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4b40:	b480      	push	{r7}
    4b42:	b083      	sub	sp, #12
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	685b      	ldr	r3, [r3, #4]
    4b4c:	089b      	lsrs	r3, r3, #2
    4b4e:	f003 0301 	and.w	r3, r3, #1
    4b52:	2b00      	cmp	r3, #0
    4b54:	bf14      	ite	ne
    4b56:	2301      	movne	r3, #1
    4b58:	2300      	moveq	r3, #0
    4b5a:	b2db      	uxtb	r3, r3
}
    4b5c:	4618      	mov	r0, r3
    4b5e:	370c      	adds	r7, #12
    4b60:	46bd      	mov	sp, r7
    4b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b66:	4770      	bx	lr

00004b68 <hri_gclk_read_SYNCBUSY_reg>:
{
    4b68:	b480      	push	{r7}
    4b6a:	b083      	sub	sp, #12
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	685b      	ldr	r3, [r3, #4]
}
    4b74:	4618      	mov	r0, r3
    4b76:	370c      	adds	r7, #12
    4b78:	46bd      	mov	sp, r7
    4b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7e:	4770      	bx	lr

00004b80 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4b80:	b580      	push	{r7, lr}
    4b82:	b086      	sub	sp, #24
    4b84:	af00      	add	r7, sp, #0
    4b86:	60f8      	str	r0, [r7, #12]
    4b88:	460b      	mov	r3, r1
    4b8a:	607a      	str	r2, [r7, #4]
    4b8c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4b8e:	7afa      	ldrb	r2, [r7, #11]
    4b90:	68fb      	ldr	r3, [r7, #12]
    4b92:	3208      	adds	r2, #8
    4b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4b98:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4b9a:	697b      	ldr	r3, [r7, #20]
    4b9c:	f023 030f 	bic.w	r3, r3, #15
    4ba0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	f003 030f 	and.w	r3, r3, #15
    4ba8:	697a      	ldr	r2, [r7, #20]
    4baa:	4313      	orrs	r3, r2
    4bac:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4bae:	7afa      	ldrb	r2, [r7, #11]
    4bb0:	68fb      	ldr	r3, [r7, #12]
    4bb2:	3208      	adds	r2, #8
    4bb4:	6979      	ldr	r1, [r7, #20]
    4bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4bba:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4bbe:	68f8      	ldr	r0, [r7, #12]
    4bc0:	4b02      	ldr	r3, [pc, #8]	; (4bcc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4bc2:	4798      	blx	r3
}
    4bc4:	bf00      	nop
    4bc6:	3718      	adds	r7, #24
    4bc8:	46bd      	mov	sp, r7
    4bca:	bd80      	pop	{r7, pc}
    4bcc:	00004b1d 	.word	0x00004b1d

00004bd0 <hri_gclk_write_PCHCTRL_reg>:
{
    4bd0:	b480      	push	{r7}
    4bd2:	b085      	sub	sp, #20
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	60f8      	str	r0, [r7, #12]
    4bd8:	460b      	mov	r3, r1
    4bda:	607a      	str	r2, [r7, #4]
    4bdc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4bde:	7afa      	ldrb	r2, [r7, #11]
    4be0:	68fb      	ldr	r3, [r7, #12]
    4be2:	3220      	adds	r2, #32
    4be4:	6879      	ldr	r1, [r7, #4]
    4be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4bea:	bf00      	nop
    4bec:	3714      	adds	r7, #20
    4bee:	46bd      	mov	sp, r7
    4bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf4:	4770      	bx	lr

00004bf6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4bf6:	b480      	push	{r7}
    4bf8:	b085      	sub	sp, #20
    4bfa:	af00      	add	r7, sp, #0
    4bfc:	60f8      	str	r0, [r7, #12]
    4bfe:	460b      	mov	r3, r1
    4c00:	607a      	str	r2, [r7, #4]
    4c02:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4c04:	bf00      	nop
    4c06:	7afa      	ldrb	r2, [r7, #11]
    4c08:	68f9      	ldr	r1, [r7, #12]
    4c0a:	4613      	mov	r3, r2
    4c0c:	009b      	lsls	r3, r3, #2
    4c0e:	4413      	add	r3, r2
    4c10:	009b      	lsls	r3, r3, #2
    4c12:	440b      	add	r3, r1
    4c14:	333c      	adds	r3, #60	; 0x3c
    4c16:	681a      	ldr	r2, [r3, #0]
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	4013      	ands	r3, r2
    4c1c:	2b00      	cmp	r3, #0
    4c1e:	d1f2      	bne.n	4c06 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4c20:	bf00      	nop
    4c22:	3714      	adds	r7, #20
    4c24:	46bd      	mov	sp, r7
    4c26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c2a:	4770      	bx	lr

00004c2c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4c2c:	b480      	push	{r7}
    4c2e:	b083      	sub	sp, #12
    4c30:	af00      	add	r7, sp, #0
    4c32:	6078      	str	r0, [r7, #4]
    4c34:	460b      	mov	r3, r1
    4c36:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4c38:	78fa      	ldrb	r2, [r7, #3]
    4c3a:	6879      	ldr	r1, [r7, #4]
    4c3c:	4613      	mov	r3, r2
    4c3e:	009b      	lsls	r3, r3, #2
    4c40:	4413      	add	r3, r2
    4c42:	009b      	lsls	r3, r3, #2
    4c44:	440b      	add	r3, r1
    4c46:	3340      	adds	r3, #64	; 0x40
    4c48:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4c4a:	f003 0301 	and.w	r3, r3, #1
    4c4e:	2b00      	cmp	r3, #0
    4c50:	bf14      	ite	ne
    4c52:	2301      	movne	r3, #1
    4c54:	2300      	moveq	r3, #0
    4c56:	b2db      	uxtb	r3, r3
}
    4c58:	4618      	mov	r0, r3
    4c5a:	370c      	adds	r7, #12
    4c5c:	46bd      	mov	sp, r7
    4c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c62:	4770      	bx	lr

00004c64 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4c64:	b480      	push	{r7}
    4c66:	b083      	sub	sp, #12
    4c68:	af00      	add	r7, sp, #0
    4c6a:	6078      	str	r0, [r7, #4]
    4c6c:	460b      	mov	r3, r1
    4c6e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4c70:	78fa      	ldrb	r2, [r7, #3]
    4c72:	6879      	ldr	r1, [r7, #4]
    4c74:	4613      	mov	r3, r2
    4c76:	009b      	lsls	r3, r3, #2
    4c78:	4413      	add	r3, r2
    4c7a:	009b      	lsls	r3, r3, #2
    4c7c:	440b      	add	r3, r1
    4c7e:	3340      	adds	r3, #64	; 0x40
    4c80:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4c82:	085b      	lsrs	r3, r3, #1
    4c84:	f003 0301 	and.w	r3, r3, #1
    4c88:	2b00      	cmp	r3, #0
    4c8a:	bf14      	ite	ne
    4c8c:	2301      	movne	r3, #1
    4c8e:	2300      	moveq	r3, #0
    4c90:	b2db      	uxtb	r3, r3
}
    4c92:	4618      	mov	r0, r3
    4c94:	370c      	adds	r7, #12
    4c96:	46bd      	mov	sp, r7
    4c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9c:	4770      	bx	lr
	...

00004ca0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b082      	sub	sp, #8
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
    4ca8:	460b      	mov	r3, r1
    4caa:	70fb      	strb	r3, [r7, #3]
    4cac:	4613      	mov	r3, r2
    4cae:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4cb0:	78fa      	ldrb	r2, [r7, #3]
    4cb2:	6879      	ldr	r1, [r7, #4]
    4cb4:	4613      	mov	r3, r2
    4cb6:	009b      	lsls	r3, r3, #2
    4cb8:	4413      	add	r3, r2
    4cba:	009b      	lsls	r3, r3, #2
    4cbc:	440b      	add	r3, r1
    4cbe:	3330      	adds	r3, #48	; 0x30
    4cc0:	78ba      	ldrb	r2, [r7, #2]
    4cc2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4cc4:	78fb      	ldrb	r3, [r7, #3]
    4cc6:	2202      	movs	r2, #2
    4cc8:	4619      	mov	r1, r3
    4cca:	6878      	ldr	r0, [r7, #4]
    4ccc:	4b02      	ldr	r3, [pc, #8]	; (4cd8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4cce:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cd0:	bf00      	nop
    4cd2:	3708      	adds	r7, #8
    4cd4:	46bd      	mov	sp, r7
    4cd6:	bd80      	pop	{r7, pc}
    4cd8:	00004bf7 	.word	0x00004bf7

00004cdc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4cdc:	b580      	push	{r7, lr}
    4cde:	b084      	sub	sp, #16
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	460b      	mov	r3, r1
    4ce6:	607a      	str	r2, [r7, #4]
    4ce8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4cea:	7afa      	ldrb	r2, [r7, #11]
    4cec:	68f9      	ldr	r1, [r7, #12]
    4cee:	4613      	mov	r3, r2
    4cf0:	009b      	lsls	r3, r3, #2
    4cf2:	4413      	add	r3, r2
    4cf4:	009b      	lsls	r3, r3, #2
    4cf6:	440b      	add	r3, r1
    4cf8:	3334      	adds	r3, #52	; 0x34
    4cfa:	687a      	ldr	r2, [r7, #4]
    4cfc:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4cfe:	7afb      	ldrb	r3, [r7, #11]
    4d00:	2206      	movs	r2, #6
    4d02:	4619      	mov	r1, r3
    4d04:	68f8      	ldr	r0, [r7, #12]
    4d06:	4b03      	ldr	r3, [pc, #12]	; (4d14 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4d08:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d0a:	bf00      	nop
    4d0c:	3710      	adds	r7, #16
    4d0e:	46bd      	mov	sp, r7
    4d10:	bd80      	pop	{r7, pc}
    4d12:	bf00      	nop
    4d14:	00004bf7 	.word	0x00004bf7

00004d18 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4d18:	b480      	push	{r7}
    4d1a:	b085      	sub	sp, #20
    4d1c:	af00      	add	r7, sp, #0
    4d1e:	60f8      	str	r0, [r7, #12]
    4d20:	460b      	mov	r3, r1
    4d22:	607a      	str	r2, [r7, #4]
    4d24:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4d26:	7afa      	ldrb	r2, [r7, #11]
    4d28:	68f9      	ldr	r1, [r7, #12]
    4d2a:	4613      	mov	r3, r2
    4d2c:	009b      	lsls	r3, r3, #2
    4d2e:	4413      	add	r3, r2
    4d30:	009b      	lsls	r3, r3, #2
    4d32:	440b      	add	r3, r1
    4d34:	3338      	adds	r3, #56	; 0x38
    4d36:	687a      	ldr	r2, [r7, #4]
    4d38:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d3a:	bf00      	nop
    4d3c:	3714      	adds	r7, #20
    4d3e:	46bd      	mov	sp, r7
    4d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d44:	4770      	bx	lr

00004d46 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4d46:	b480      	push	{r7}
    4d48:	b083      	sub	sp, #12
    4d4a:	af00      	add	r7, sp, #0
    4d4c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	691b      	ldr	r3, [r3, #16]
    4d52:	085b      	lsrs	r3, r3, #1
    4d54:	f003 0301 	and.w	r3, r3, #1
    4d58:	2b00      	cmp	r3, #0
    4d5a:	bf14      	ite	ne
    4d5c:	2301      	movne	r3, #1
    4d5e:	2300      	moveq	r3, #0
    4d60:	b2db      	uxtb	r3, r3
}
    4d62:	4618      	mov	r0, r3
    4d64:	370c      	adds	r7, #12
    4d66:	46bd      	mov	sp, r7
    4d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6c:	4770      	bx	lr

00004d6e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4d6e:	b480      	push	{r7}
    4d70:	b083      	sub	sp, #12
    4d72:	af00      	add	r7, sp, #0
    4d74:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	691b      	ldr	r3, [r3, #16]
    4d7a:	0a1b      	lsrs	r3, r3, #8
    4d7c:	f003 0301 	and.w	r3, r3, #1
    4d80:	2b00      	cmp	r3, #0
    4d82:	bf14      	ite	ne
    4d84:	2301      	movne	r3, #1
    4d86:	2300      	moveq	r3, #0
    4d88:	b2db      	uxtb	r3, r3
}
    4d8a:	4618      	mov	r0, r3
    4d8c:	370c      	adds	r7, #12
    4d8e:	46bd      	mov	sp, r7
    4d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d94:	4770      	bx	lr

00004d96 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4d96:	b480      	push	{r7}
    4d98:	b085      	sub	sp, #20
    4d9a:	af00      	add	r7, sp, #0
    4d9c:	6078      	str	r0, [r7, #4]
    4d9e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	691b      	ldr	r3, [r3, #16]
    4da4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4da6:	68fa      	ldr	r2, [r7, #12]
    4da8:	683b      	ldr	r3, [r7, #0]
    4daa:	4013      	ands	r3, r2
    4dac:	60fb      	str	r3, [r7, #12]
	return tmp;
    4dae:	68fb      	ldr	r3, [r7, #12]
}
    4db0:	4618      	mov	r0, r3
    4db2:	3714      	adds	r7, #20
    4db4:	46bd      	mov	sp, r7
    4db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dba:	4770      	bx	lr

00004dbc <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4dbc:	b480      	push	{r7}
    4dbe:	b085      	sub	sp, #20
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	60f8      	str	r0, [r7, #12]
    4dc4:	460b      	mov	r3, r1
    4dc6:	607a      	str	r2, [r7, #4]
    4dc8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4dca:	7afb      	ldrb	r3, [r7, #11]
    4dcc:	68fa      	ldr	r2, [r7, #12]
    4dce:	3304      	adds	r3, #4
    4dd0:	009b      	lsls	r3, r3, #2
    4dd2:	4413      	add	r3, r2
    4dd4:	687a      	ldr	r2, [r7, #4]
    4dd6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4dd8:	bf00      	nop
    4dda:	3714      	adds	r7, #20
    4ddc:	46bd      	mov	sp, r7
    4dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de2:	4770      	bx	lr

00004de4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4de4:	b480      	push	{r7}
    4de6:	b083      	sub	sp, #12
    4de8:	af00      	add	r7, sp, #0
    4dea:	6078      	str	r0, [r7, #4]
    4dec:	460b      	mov	r3, r1
    4dee:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	78fa      	ldrb	r2, [r7, #3]
    4df4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4df6:	bf00      	nop
    4df8:	370c      	adds	r7, #12
    4dfa:	46bd      	mov	sp, r7
    4dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e00:	4770      	bx	lr

00004e02 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4e02:	b480      	push	{r7}
    4e04:	b085      	sub	sp, #20
    4e06:	af00      	add	r7, sp, #0
    4e08:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
    4e10:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4e12:	7bfb      	ldrb	r3, [r7, #15]
    4e14:	f003 0301 	and.w	r3, r3, #1
    4e18:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e1a:	7bfb      	ldrb	r3, [r7, #15]
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	bf14      	ite	ne
    4e20:	2301      	movne	r3, #1
    4e22:	2300      	moveq	r3, #0
    4e24:	b2db      	uxtb	r3, r3
}
    4e26:	4618      	mov	r0, r3
    4e28:	3714      	adds	r7, #20
    4e2a:	46bd      	mov	sp, r7
    4e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e30:	4770      	bx	lr

00004e32 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4e32:	b480      	push	{r7}
    4e34:	b083      	sub	sp, #12
    4e36:	af00      	add	r7, sp, #0
    4e38:	6078      	str	r0, [r7, #4]
    4e3a:	460b      	mov	r3, r1
    4e3c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	78fa      	ldrb	r2, [r7, #3]
    4e42:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e46:	bf00      	nop
    4e48:	370c      	adds	r7, #12
    4e4a:	46bd      	mov	sp, r7
    4e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e50:	4770      	bx	lr

00004e52 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4e52:	b480      	push	{r7}
    4e54:	b083      	sub	sp, #12
    4e56:	af00      	add	r7, sp, #0
    4e58:	6078      	str	r0, [r7, #4]
    4e5a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	683a      	ldr	r2, [r7, #0]
    4e60:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e62:	bf00      	nop
    4e64:	370c      	adds	r7, #12
    4e66:	46bd      	mov	sp, r7
    4e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e6c:	4770      	bx	lr

00004e6e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4e6e:	b480      	push	{r7}
    4e70:	b083      	sub	sp, #12
    4e72:	af00      	add	r7, sp, #0
    4e74:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4e7a:	4618      	mov	r0, r3
    4e7c:	370c      	adds	r7, #12
    4e7e:	46bd      	mov	sp, r7
    4e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e84:	4770      	bx	lr

00004e86 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4e86:	b480      	push	{r7}
    4e88:	b083      	sub	sp, #12
    4e8a:	af00      	add	r7, sp, #0
    4e8c:	6078      	str	r0, [r7, #4]
    4e8e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	683a      	ldr	r2, [r7, #0]
    4e94:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e96:	bf00      	nop
    4e98:	370c      	adds	r7, #12
    4e9a:	46bd      	mov	sp, r7
    4e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea0:	4770      	bx	lr

00004ea2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4ea2:	b480      	push	{r7}
    4ea4:	b085      	sub	sp, #20
    4ea6:	af00      	add	r7, sp, #0
    4ea8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4eb0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4eb2:	7bfb      	ldrb	r3, [r7, #15]
    4eb4:	085b      	lsrs	r3, r3, #1
    4eb6:	b2db      	uxtb	r3, r3
    4eb8:	f003 0301 	and.w	r3, r3, #1
    4ebc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4ebe:	7bfb      	ldrb	r3, [r7, #15]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	bf14      	ite	ne
    4ec4:	2301      	movne	r3, #1
    4ec6:	2300      	moveq	r3, #0
    4ec8:	b2db      	uxtb	r3, r3
}
    4eca:	4618      	mov	r0, r3
    4ecc:	3714      	adds	r7, #20
    4ece:	46bd      	mov	sp, r7
    4ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed4:	4770      	bx	lr

00004ed6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4ed6:	b480      	push	{r7}
    4ed8:	b085      	sub	sp, #20
    4eda:	af00      	add	r7, sp, #0
    4edc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4ee4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4ee6:	7bfb      	ldrb	r3, [r7, #15]
    4ee8:	089b      	lsrs	r3, r3, #2
    4eea:	b2db      	uxtb	r3, r3
    4eec:	f003 0301 	and.w	r3, r3, #1
    4ef0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4ef2:	7bfb      	ldrb	r3, [r7, #15]
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	bf14      	ite	ne
    4ef8:	2301      	movne	r3, #1
    4efa:	2300      	moveq	r3, #0
    4efc:	b2db      	uxtb	r3, r3
}
    4efe:	4618      	mov	r0, r3
    4f00:	3714      	adds	r7, #20
    4f02:	46bd      	mov	sp, r7
    4f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f08:	4770      	bx	lr

00004f0a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4f0a:	b480      	push	{r7}
    4f0c:	b085      	sub	sp, #20
    4f0e:	af00      	add	r7, sp, #0
    4f10:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f18:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4f1a:	7bfb      	ldrb	r3, [r7, #15]
    4f1c:	08db      	lsrs	r3, r3, #3
    4f1e:	b2db      	uxtb	r3, r3
    4f20:	f003 0301 	and.w	r3, r3, #1
    4f24:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f26:	7bfb      	ldrb	r3, [r7, #15]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	bf14      	ite	ne
    4f2c:	2301      	movne	r3, #1
    4f2e:	2300      	moveq	r3, #0
    4f30:	b2db      	uxtb	r3, r3
}
    4f32:	4618      	mov	r0, r3
    4f34:	3714      	adds	r7, #20
    4f36:	46bd      	mov	sp, r7
    4f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f3c:	4770      	bx	lr

00004f3e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4f3e:	b480      	push	{r7}
    4f40:	b085      	sub	sp, #20
    4f42:	af00      	add	r7, sp, #0
    4f44:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f4c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4f4e:	7bfb      	ldrb	r3, [r7, #15]
    4f50:	091b      	lsrs	r3, r3, #4
    4f52:	b2db      	uxtb	r3, r3
    4f54:	f003 0301 	and.w	r3, r3, #1
    4f58:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f5a:	7bfb      	ldrb	r3, [r7, #15]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	bf14      	ite	ne
    4f60:	2301      	movne	r3, #1
    4f62:	2300      	moveq	r3, #0
    4f64:	b2db      	uxtb	r3, r3
}
    4f66:	4618      	mov	r0, r3
    4f68:	3714      	adds	r7, #20
    4f6a:	46bd      	mov	sp, r7
    4f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f70:	4770      	bx	lr
	...

00004f74 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4f74:	b580      	push	{r7, lr}
    4f76:	b082      	sub	sp, #8
    4f78:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4f7a:	4b0a      	ldr	r3, [pc, #40]	; (4fa4 <_oscctrl_init_sources+0x30>)
    4f7c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4f7e:	4a0a      	ldr	r2, [pc, #40]	; (4fa8 <_oscctrl_init_sources+0x34>)
    4f80:	2101      	movs	r1, #1
    4f82:	6878      	ldr	r0, [r7, #4]
    4f84:	4b09      	ldr	r3, [pc, #36]	; (4fac <_oscctrl_init_sources+0x38>)
    4f86:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4f88:	bf00      	nop
    4f8a:	6878      	ldr	r0, [r7, #4]
    4f8c:	4b08      	ldr	r3, [pc, #32]	; (4fb0 <_oscctrl_init_sources+0x3c>)
    4f8e:	4798      	blx	r3
    4f90:	4603      	mov	r3, r0
    4f92:	f083 0301 	eor.w	r3, r3, #1
    4f96:	b2db      	uxtb	r3, r3
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d1f6      	bne.n	4f8a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4f9c:	bf00      	nop
    4f9e:	3708      	adds	r7, #8
    4fa0:	46bd      	mov	sp, r7
    4fa2:	bd80      	pop	{r7, pc}
    4fa4:	40001000 	.word	0x40001000
    4fa8:	03002646 	.word	0x03002646
    4fac:	00004dbd 	.word	0x00004dbd
    4fb0:	00004d47 	.word	0x00004d47

00004fb4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b084      	sub	sp, #16
    4fb8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4fba:	4b6b      	ldr	r3, [pc, #428]	; (5168 <_oscctrl_init_referenced_generators+0x1b4>)
    4fbc:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4fbe:	2204      	movs	r2, #4
    4fc0:	2100      	movs	r1, #0
    4fc2:	486a      	ldr	r0, [pc, #424]	; (516c <_oscctrl_init_referenced_generators+0x1b8>)
    4fc4:	4b6a      	ldr	r3, [pc, #424]	; (5170 <_oscctrl_init_referenced_generators+0x1bc>)
    4fc6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4fc8:	bf00      	nop
    4fca:	4868      	ldr	r0, [pc, #416]	; (516c <_oscctrl_init_referenced_generators+0x1b8>)
    4fcc:	4b69      	ldr	r3, [pc, #420]	; (5174 <_oscctrl_init_referenced_generators+0x1c0>)
    4fce:	4798      	blx	r3
    4fd0:	4603      	mov	r3, r0
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d1f9      	bne.n	4fca <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4fd6:	2100      	movs	r1, #0
    4fd8:	68f8      	ldr	r0, [r7, #12]
    4fda:	4b67      	ldr	r3, [pc, #412]	; (5178 <_oscctrl_init_referenced_generators+0x1c4>)
    4fdc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4fde:	4967      	ldr	r1, [pc, #412]	; (517c <_oscctrl_init_referenced_generators+0x1c8>)
    4fe0:	68f8      	ldr	r0, [r7, #12]
    4fe2:	4b67      	ldr	r3, [pc, #412]	; (5180 <_oscctrl_init_referenced_generators+0x1cc>)
    4fe4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4fe6:	bf00      	nop
    4fe8:	68f8      	ldr	r0, [r7, #12]
    4fea:	4b66      	ldr	r3, [pc, #408]	; (5184 <_oscctrl_init_referenced_generators+0x1d0>)
    4fec:	4798      	blx	r3
    4fee:	4603      	mov	r3, r0
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d1f9      	bne.n	4fe8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4ff4:	2100      	movs	r1, #0
    4ff6:	68f8      	ldr	r0, [r7, #12]
    4ff8:	4b63      	ldr	r3, [pc, #396]	; (5188 <_oscctrl_init_referenced_generators+0x1d4>)
    4ffa:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4ffc:	bf00      	nop
    4ffe:	68f8      	ldr	r0, [r7, #12]
    5000:	4b62      	ldr	r3, [pc, #392]	; (518c <_oscctrl_init_referenced_generators+0x1d8>)
    5002:	4798      	blx	r3
    5004:	4603      	mov	r3, r0
    5006:	2b00      	cmp	r3, #0
    5008:	d1f9      	bne.n	4ffe <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    500a:	2302      	movs	r3, #2
    500c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    500e:	7afb      	ldrb	r3, [r7, #11]
    5010:	4619      	mov	r1, r3
    5012:	68f8      	ldr	r0, [r7, #12]
    5014:	4b58      	ldr	r3, [pc, #352]	; (5178 <_oscctrl_init_referenced_generators+0x1c4>)
    5016:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5018:	bf00      	nop
    501a:	68f8      	ldr	r0, [r7, #12]
    501c:	4b5c      	ldr	r3, [pc, #368]	; (5190 <_oscctrl_init_referenced_generators+0x1dc>)
    501e:	4798      	blx	r3
    5020:	4603      	mov	r3, r0
    5022:	2b00      	cmp	r3, #0
    5024:	d1f9      	bne.n	501a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5026:	68f8      	ldr	r0, [r7, #12]
    5028:	4b5a      	ldr	r3, [pc, #360]	; (5194 <_oscctrl_init_referenced_generators+0x1e0>)
    502a:	4798      	blx	r3
    502c:	4603      	mov	r3, r0
    502e:	4619      	mov	r1, r3
    5030:	68f8      	ldr	r0, [r7, #12]
    5032:	4b59      	ldr	r3, [pc, #356]	; (5198 <_oscctrl_init_referenced_generators+0x1e4>)
    5034:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5036:	bf00      	nop
    5038:	68f8      	ldr	r0, [r7, #12]
    503a:	4b58      	ldr	r3, [pc, #352]	; (519c <_oscctrl_init_referenced_generators+0x1e8>)
    503c:	4798      	blx	r3
    503e:	4603      	mov	r3, r0
    5040:	2b00      	cmp	r3, #0
    5042:	d1f9      	bne.n	5038 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5044:	2319      	movs	r3, #25
    5046:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5048:	7afb      	ldrb	r3, [r7, #11]
    504a:	4619      	mov	r1, r3
    504c:	68f8      	ldr	r0, [r7, #12]
    504e:	4b4e      	ldr	r3, [pc, #312]	; (5188 <_oscctrl_init_referenced_generators+0x1d4>)
    5050:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5052:	bf00      	nop
    5054:	68f8      	ldr	r0, [r7, #12]
    5056:	4b4d      	ldr	r3, [pc, #308]	; (518c <_oscctrl_init_referenced_generators+0x1d8>)
    5058:	4798      	blx	r3
    505a:	4603      	mov	r3, r0
    505c:	2b00      	cmp	r3, #0
    505e:	d1f9      	bne.n	5054 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5060:	2245      	movs	r2, #69	; 0x45
    5062:	2101      	movs	r1, #1
    5064:	4841      	ldr	r0, [pc, #260]	; (516c <_oscctrl_init_referenced_generators+0x1b8>)
    5066:	4b4e      	ldr	r3, [pc, #312]	; (51a0 <_oscctrl_init_referenced_generators+0x1ec>)
    5068:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    506a:	223b      	movs	r2, #59	; 0x3b
    506c:	2100      	movs	r1, #0
    506e:	68f8      	ldr	r0, [r7, #12]
    5070:	4b4c      	ldr	r3, [pc, #304]	; (51a4 <_oscctrl_init_referenced_generators+0x1f0>)
    5072:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5074:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5078:	2100      	movs	r1, #0
    507a:	68f8      	ldr	r0, [r7, #12]
    507c:	4b4a      	ldr	r3, [pc, #296]	; (51a8 <_oscctrl_init_referenced_generators+0x1f4>)
    507e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5080:	2242      	movs	r2, #66	; 0x42
    5082:	2100      	movs	r1, #0
    5084:	68f8      	ldr	r0, [r7, #12]
    5086:	4b49      	ldr	r3, [pc, #292]	; (51ac <_oscctrl_init_referenced_generators+0x1f8>)
    5088:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    508a:	4a49      	ldr	r2, [pc, #292]	; (51b0 <_oscctrl_init_referenced_generators+0x1fc>)
    508c:	2101      	movs	r1, #1
    508e:	68f8      	ldr	r0, [r7, #12]
    5090:	4b44      	ldr	r3, [pc, #272]	; (51a4 <_oscctrl_init_referenced_generators+0x1f0>)
    5092:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5094:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5098:	2101      	movs	r1, #1
    509a:	68f8      	ldr	r0, [r7, #12]
    509c:	4b42      	ldr	r3, [pc, #264]	; (51a8 <_oscctrl_init_referenced_generators+0x1f4>)
    509e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    50a0:	2202      	movs	r2, #2
    50a2:	2101      	movs	r1, #1
    50a4:	68f8      	ldr	r0, [r7, #12]
    50a6:	4b41      	ldr	r3, [pc, #260]	; (51ac <_oscctrl_init_referenced_generators+0x1f8>)
    50a8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    50aa:	68f8      	ldr	r0, [r7, #12]
    50ac:	4b41      	ldr	r3, [pc, #260]	; (51b4 <_oscctrl_init_referenced_generators+0x200>)
    50ae:	4798      	blx	r3
    50b0:	4603      	mov	r3, r0
    50b2:	2b00      	cmp	r3, #0
    50b4:	d00c      	beq.n	50d0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    50b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    50ba:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    50bc:	bf00      	nop
    50be:	6879      	ldr	r1, [r7, #4]
    50c0:	68f8      	ldr	r0, [r7, #12]
    50c2:	4b3d      	ldr	r3, [pc, #244]	; (51b8 <_oscctrl_init_referenced_generators+0x204>)
    50c4:	4798      	blx	r3
    50c6:	4602      	mov	r2, r0
    50c8:	687b      	ldr	r3, [r7, #4]
    50ca:	429a      	cmp	r2, r3
    50cc:	d1f7      	bne.n	50be <_oscctrl_init_referenced_generators+0x10a>
    50ce:	e009      	b.n	50e4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    50d0:	bf00      	nop
    50d2:	68f8      	ldr	r0, [r7, #12]
    50d4:	4b39      	ldr	r3, [pc, #228]	; (51bc <_oscctrl_init_referenced_generators+0x208>)
    50d6:	4798      	blx	r3
    50d8:	4603      	mov	r3, r0
    50da:	f083 0301 	eor.w	r3, r3, #1
    50de:	b2db      	uxtb	r3, r3
    50e0:	2b00      	cmp	r3, #0
    50e2:	d1f6      	bne.n	50d2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    50e4:	bf00      	nop
    50e6:	2100      	movs	r1, #0
    50e8:	68f8      	ldr	r0, [r7, #12]
    50ea:	4b35      	ldr	r3, [pc, #212]	; (51c0 <_oscctrl_init_referenced_generators+0x20c>)
    50ec:	4798      	blx	r3
    50ee:	4603      	mov	r3, r0
    50f0:	f083 0301 	eor.w	r3, r3, #1
    50f4:	b2db      	uxtb	r3, r3
    50f6:	2b00      	cmp	r3, #0
    50f8:	d009      	beq.n	510e <_oscctrl_init_referenced_generators+0x15a>
    50fa:	2100      	movs	r1, #0
    50fc:	68f8      	ldr	r0, [r7, #12]
    50fe:	4b31      	ldr	r3, [pc, #196]	; (51c4 <_oscctrl_init_referenced_generators+0x210>)
    5100:	4798      	blx	r3
    5102:	4603      	mov	r3, r0
    5104:	f083 0301 	eor.w	r3, r3, #1
    5108:	b2db      	uxtb	r3, r3
    510a:	2b00      	cmp	r3, #0
    510c:	d1eb      	bne.n	50e6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    510e:	bf00      	nop
    5110:	2101      	movs	r1, #1
    5112:	68f8      	ldr	r0, [r7, #12]
    5114:	4b2a      	ldr	r3, [pc, #168]	; (51c0 <_oscctrl_init_referenced_generators+0x20c>)
    5116:	4798      	blx	r3
    5118:	4603      	mov	r3, r0
    511a:	f083 0301 	eor.w	r3, r3, #1
    511e:	b2db      	uxtb	r3, r3
    5120:	2b00      	cmp	r3, #0
    5122:	d009      	beq.n	5138 <_oscctrl_init_referenced_generators+0x184>
    5124:	2101      	movs	r1, #1
    5126:	68f8      	ldr	r0, [r7, #12]
    5128:	4b26      	ldr	r3, [pc, #152]	; (51c4 <_oscctrl_init_referenced_generators+0x210>)
    512a:	4798      	blx	r3
    512c:	4603      	mov	r3, r0
    512e:	f083 0301 	eor.w	r3, r3, #1
    5132:	b2db      	uxtb	r3, r3
    5134:	2b00      	cmp	r3, #0
    5136:	d1eb      	bne.n	5110 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5138:	bf00      	nop
    513a:	480c      	ldr	r0, [pc, #48]	; (516c <_oscctrl_init_referenced_generators+0x1b8>)
    513c:	4b22      	ldr	r3, [pc, #136]	; (51c8 <_oscctrl_init_referenced_generators+0x214>)
    513e:	4798      	blx	r3
    5140:	4603      	mov	r3, r0
    5142:	2b00      	cmp	r3, #0
    5144:	d1f9      	bne.n	513a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5146:	2207      	movs	r2, #7
    5148:	2100      	movs	r1, #0
    514a:	4808      	ldr	r0, [pc, #32]	; (516c <_oscctrl_init_referenced_generators+0x1b8>)
    514c:	4b08      	ldr	r3, [pc, #32]	; (5170 <_oscctrl_init_referenced_generators+0x1bc>)
    514e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5150:	bf00      	nop
    5152:	4806      	ldr	r0, [pc, #24]	; (516c <_oscctrl_init_referenced_generators+0x1b8>)
    5154:	4b07      	ldr	r3, [pc, #28]	; (5174 <_oscctrl_init_referenced_generators+0x1c0>)
    5156:	4798      	blx	r3
    5158:	4603      	mov	r3, r0
    515a:	2b00      	cmp	r3, #0
    515c:	d1f9      	bne.n	5152 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    515e:	bf00      	nop
    5160:	3710      	adds	r7, #16
    5162:	46bd      	mov	sp, r7
    5164:	bd80      	pop	{r7, pc}
    5166:	bf00      	nop
    5168:	40001000 	.word	0x40001000
    516c:	40001c00 	.word	0x40001c00
    5170:	00004b81 	.word	0x00004b81
    5174:	00004b41 	.word	0x00004b41
    5178:	00004de5 	.word	0x00004de5
    517c:	0401bb80 	.word	0x0401bb80
    5180:	00004e87 	.word	0x00004e87
    5184:	00004f3f 	.word	0x00004f3f
    5188:	00004e33 	.word	0x00004e33
    518c:	00004ed7 	.word	0x00004ed7
    5190:	00004ea3 	.word	0x00004ea3
    5194:	00004e6f 	.word	0x00004e6f
    5198:	00004e53 	.word	0x00004e53
    519c:	00004f0b 	.word	0x00004f0b
    51a0:	00004bd1 	.word	0x00004bd1
    51a4:	00004cdd 	.word	0x00004cdd
    51a8:	00004d19 	.word	0x00004d19
    51ac:	00004ca1 	.word	0x00004ca1
    51b0:	000407a0 	.word	0x000407a0
    51b4:	00004e03 	.word	0x00004e03
    51b8:	00004d97 	.word	0x00004d97
    51bc:	00004d6f 	.word	0x00004d6f
    51c0:	00004c2d 	.word	0x00004c2d
    51c4:	00004c65 	.word	0x00004c65
    51c8:	00004b69 	.word	0x00004b69

000051cc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    51cc:	b480      	push	{r7}
    51ce:	b083      	sub	sp, #12
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	69db      	ldr	r3, [r3, #28]
    51d8:	0a9b      	lsrs	r3, r3, #10
    51da:	f003 0301 	and.w	r3, r3, #1
    51de:	2b00      	cmp	r3, #0
    51e0:	bf14      	ite	ne
    51e2:	2301      	movne	r3, #1
    51e4:	2300      	moveq	r3, #0
    51e6:	b2db      	uxtb	r3, r3
}
    51e8:	4618      	mov	r0, r3
    51ea:	370c      	adds	r7, #12
    51ec:	46bd      	mov	sp, r7
    51ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f2:	4770      	bx	lr

000051f4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    51f4:	b480      	push	{r7}
    51f6:	b083      	sub	sp, #12
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5202:	61da      	str	r2, [r3, #28]
}
    5204:	bf00      	nop
    5206:	370c      	adds	r7, #12
    5208:	46bd      	mov	sp, r7
    520a:	f85d 7b04 	ldr.w	r7, [sp], #4
    520e:	4770      	bx	lr

00005210 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5210:	b480      	push	{r7}
    5212:	b083      	sub	sp, #12
    5214:	af00      	add	r7, sp, #0
    5216:	6078      	str	r0, [r7, #4]
    5218:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	683a      	ldr	r2, [r7, #0]
    521e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5220:	bf00      	nop
    5222:	370c      	adds	r7, #12
    5224:	46bd      	mov	sp, r7
    5226:	f85d 7b04 	ldr.w	r7, [sp], #4
    522a:	4770      	bx	lr

0000522c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    522c:	b480      	push	{r7}
    522e:	b083      	sub	sp, #12
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
    5234:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	683a      	ldr	r2, [r7, #0]
    523a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    523c:	bf00      	nop
    523e:	370c      	adds	r7, #12
    5240:	46bd      	mov	sp, r7
    5242:	f85d 7b04 	ldr.w	r7, [sp], #4
    5246:	4770      	bx	lr

00005248 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5248:	b480      	push	{r7}
    524a:	b083      	sub	sp, #12
    524c:	af00      	add	r7, sp, #0
    524e:	6078      	str	r0, [r7, #4]
    5250:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5252:	687b      	ldr	r3, [r7, #4]
    5254:	683a      	ldr	r2, [r7, #0]
    5256:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5258:	bf00      	nop
    525a:	370c      	adds	r7, #12
    525c:	46bd      	mov	sp, r7
    525e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5262:	4770      	bx	lr

00005264 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5264:	b480      	push	{r7}
    5266:	b083      	sub	sp, #12
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
    526c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	683a      	ldr	r2, [r7, #0]
    5272:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5274:	bf00      	nop
    5276:	370c      	adds	r7, #12
    5278:	46bd      	mov	sp, r7
    527a:	f85d 7b04 	ldr.w	r7, [sp], #4
    527e:	4770      	bx	lr

00005280 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5280:	b480      	push	{r7}
    5282:	b085      	sub	sp, #20
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
    5288:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    528e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5296:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5298:	683b      	ldr	r3, [r7, #0]
    529a:	b2db      	uxtb	r3, r3
    529c:	68fa      	ldr	r2, [r7, #12]
    529e:	4313      	orrs	r3, r2
    52a0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	68fa      	ldr	r2, [r7, #12]
    52a6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52a8:	bf00      	nop
    52aa:	3714      	adds	r7, #20
    52ac:	46bd      	mov	sp, r7
    52ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    52b2:	4770      	bx	lr

000052b4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    52b4:	b480      	push	{r7}
    52b6:	b085      	sub	sp, #20
    52b8:	af00      	add	r7, sp, #0
    52ba:	6078      	str	r0, [r7, #4]
    52bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    52be:	687b      	ldr	r3, [r7, #4]
    52c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    52c2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    52c4:	68fb      	ldr	r3, [r7, #12]
    52c6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    52ca:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    52cc:	683b      	ldr	r3, [r7, #0]
    52ce:	041b      	lsls	r3, r3, #16
    52d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    52d4:	68fa      	ldr	r2, [r7, #12]
    52d6:	4313      	orrs	r3, r2
    52d8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    52da:	687b      	ldr	r3, [r7, #4]
    52dc:	68fa      	ldr	r2, [r7, #12]
    52de:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52e0:	bf00      	nop
    52e2:	3714      	adds	r7, #20
    52e4:	46bd      	mov	sp, r7
    52e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ea:	4770      	bx	lr

000052ec <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    52ec:	b480      	push	{r7}
    52ee:	b083      	sub	sp, #12
    52f0:	af00      	add	r7, sp, #0
    52f2:	6078      	str	r0, [r7, #4]
    52f4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	683a      	ldr	r2, [r7, #0]
    52fa:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52fc:	bf00      	nop
    52fe:	370c      	adds	r7, #12
    5300:	46bd      	mov	sp, r7
    5302:	f85d 7b04 	ldr.w	r7, [sp], #4
    5306:	4770      	bx	lr

00005308 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5308:	b480      	push	{r7}
    530a:	b083      	sub	sp, #12
    530c:	af00      	add	r7, sp, #0
    530e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5314:	4618      	mov	r0, r3
    5316:	370c      	adds	r7, #12
    5318:	46bd      	mov	sp, r7
    531a:	f85d 7b04 	ldr.w	r7, [sp], #4
    531e:	4770      	bx	lr

00005320 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5320:	b480      	push	{r7}
    5322:	b085      	sub	sp, #20
    5324:	af00      	add	r7, sp, #0
    5326:	60f8      	str	r0, [r7, #12]
    5328:	60b9      	str	r1, [r7, #8]
    532a:	607a      	str	r2, [r7, #4]
	while (count--) {
    532c:	e007      	b.n	533e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    532e:	68fb      	ldr	r3, [r7, #12]
    5330:	1c5a      	adds	r2, r3, #1
    5332:	60fa      	str	r2, [r7, #12]
    5334:	68ba      	ldr	r2, [r7, #8]
    5336:	1c51      	adds	r1, r2, #1
    5338:	60b9      	str	r1, [r7, #8]
    533a:	7812      	ldrb	r2, [r2, #0]
    533c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	1e5a      	subs	r2, r3, #1
    5342:	607a      	str	r2, [r7, #4]
    5344:	2b00      	cmp	r3, #0
    5346:	d1f2      	bne.n	532e <_qspi_memcpy+0xe>
	}
}
    5348:	bf00      	nop
    534a:	3714      	adds	r7, #20
    534c:	46bd      	mov	sp, r7
    534e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5352:	4770      	bx	lr

00005354 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5354:	b580      	push	{r7, lr}
    5356:	b082      	sub	sp, #8
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    535c:	4903      	ldr	r1, [pc, #12]	; (536c <_qspi_end_transfer+0x18>)
    535e:	6878      	ldr	r0, [r7, #4]
    5360:	4b03      	ldr	r3, [pc, #12]	; (5370 <_qspi_end_transfer+0x1c>)
    5362:	4798      	blx	r3
}
    5364:	bf00      	nop
    5366:	3708      	adds	r7, #8
    5368:	46bd      	mov	sp, r7
    536a:	bd80      	pop	{r7, pc}
    536c:	01000002 	.word	0x01000002
    5370:	00005211 	.word	0x00005211

00005374 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5374:	b580      	push	{r7, lr}
    5376:	b082      	sub	sp, #8
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
    537c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    537e:	687b      	ldr	r3, [r7, #4]
    5380:	2b00      	cmp	r3, #0
    5382:	d004      	beq.n	538e <_qspi_sync_init+0x1a>
    5384:	683b      	ldr	r3, [r7, #0]
    5386:	2b00      	cmp	r3, #0
    5388:	d001      	beq.n	538e <_qspi_sync_init+0x1a>
    538a:	2301      	movs	r3, #1
    538c:	e000      	b.n	5390 <_qspi_sync_init+0x1c>
    538e:	2300      	movs	r3, #0
    5390:	f003 0301 	and.w	r3, r3, #1
    5394:	b2db      	uxtb	r3, r3
    5396:	2240      	movs	r2, #64	; 0x40
    5398:	490c      	ldr	r1, [pc, #48]	; (53cc <_qspi_sync_init+0x58>)
    539a:	4618      	mov	r0, r3
    539c:	4b0c      	ldr	r3, [pc, #48]	; (53d0 <_qspi_sync_init+0x5c>)
    539e:	4798      	blx	r3
	dev->prvt = hw;
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	683a      	ldr	r2, [r7, #0]
    53a4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	681b      	ldr	r3, [r3, #0]
    53aa:	2101      	movs	r1, #1
    53ac:	4618      	mov	r0, r3
    53ae:	4b09      	ldr	r3, [pc, #36]	; (53d4 <_qspi_sync_init+0x60>)
    53b0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    53b2:	4909      	ldr	r1, [pc, #36]	; (53d8 <_qspi_sync_init+0x64>)
    53b4:	6838      	ldr	r0, [r7, #0]
    53b6:	4b09      	ldr	r3, [pc, #36]	; (53dc <_qspi_sync_init+0x68>)
    53b8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    53ba:	4909      	ldr	r1, [pc, #36]	; (53e0 <_qspi_sync_init+0x6c>)
    53bc:	6838      	ldr	r0, [r7, #0]
    53be:	4b09      	ldr	r3, [pc, #36]	; (53e4 <_qspi_sync_init+0x70>)
    53c0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    53c2:	2300      	movs	r3, #0
}
    53c4:	4618      	mov	r0, r3
    53c6:	3708      	adds	r7, #8
    53c8:	46bd      	mov	sp, r7
    53ca:	bd80      	pop	{r7, pc}
    53cc:	00011350 	.word	0x00011350
    53d0:	0000337d 	.word	0x0000337d
    53d4:	00005211 	.word	0x00005211
    53d8:	06000011 	.word	0x06000011
    53dc:	0000522d 	.word	0x0000522d
    53e0:	00241300 	.word	0x00241300
    53e4:	00005249 	.word	0x00005249

000053e8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    53e8:	b580      	push	{r7, lr}
    53ea:	b082      	sub	sp, #8
    53ec:	af00      	add	r7, sp, #0
    53ee:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	2102      	movs	r1, #2
    53f6:	4618      	mov	r0, r3
    53f8:	4b03      	ldr	r3, [pc, #12]	; (5408 <_qspi_sync_enable+0x20>)
    53fa:	4798      	blx	r3
	return ERR_NONE;
    53fc:	2300      	movs	r3, #0
}
    53fe:	4618      	mov	r0, r3
    5400:	3708      	adds	r7, #8
    5402:	46bd      	mov	sp, r7
    5404:	bd80      	pop	{r7, pc}
    5406:	bf00      	nop
    5408:	00005211 	.word	0x00005211

0000540c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    540c:	b580      	push	{r7, lr}
    540e:	b082      	sub	sp, #8
    5410:	af00      	add	r7, sp, #0
    5412:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	2100      	movs	r1, #0
    541a:	4618      	mov	r0, r3
    541c:	4b03      	ldr	r3, [pc, #12]	; (542c <_qspi_sync_disable+0x20>)
    541e:	4798      	blx	r3
	return ERR_NONE;
    5420:	2300      	movs	r3, #0
}
    5422:	4618      	mov	r0, r3
    5424:	3708      	adds	r7, #8
    5426:	46bd      	mov	sp, r7
    5428:	bd80      	pop	{r7, pc}
    542a:	bf00      	nop
    542c:	00005211 	.word	0x00005211

00005430 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5430:	b580      	push	{r7, lr}
    5432:	b084      	sub	sp, #16
    5434:	af00      	add	r7, sp, #0
    5436:	6078      	str	r0, [r7, #4]
    5438:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5440:	683b      	ldr	r3, [r7, #0]
    5442:	781b      	ldrb	r3, [r3, #0]
    5444:	f003 0320 	and.w	r3, r3, #32
    5448:	b2db      	uxtb	r3, r3
    544a:	2b00      	cmp	r3, #0
    544c:	d005      	beq.n	545a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    544e:	683b      	ldr	r3, [r7, #0]
    5450:	689b      	ldr	r3, [r3, #8]
    5452:	4619      	mov	r1, r3
    5454:	68f8      	ldr	r0, [r7, #12]
    5456:	4b13      	ldr	r3, [pc, #76]	; (54a4 <_qspi_sync_command_set_ifr+0x74>)
    5458:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    545a:	683b      	ldr	r3, [r7, #0]
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	f003 0310 	and.w	r3, r3, #16
    5462:	b2db      	uxtb	r3, r3
    5464:	2b00      	cmp	r3, #0
    5466:	d005      	beq.n	5474 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5468:	683b      	ldr	r3, [r7, #0]
    546a:	791b      	ldrb	r3, [r3, #4]
    546c:	4619      	mov	r1, r3
    546e:	68f8      	ldr	r0, [r7, #12]
    5470:	4b0d      	ldr	r3, [pc, #52]	; (54a8 <_qspi_sync_command_set_ifr+0x78>)
    5472:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5474:	683b      	ldr	r3, [r7, #0]
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	f003 0340 	and.w	r3, r3, #64	; 0x40
    547c:	b2db      	uxtb	r3, r3
    547e:	2b00      	cmp	r3, #0
    5480:	d005      	beq.n	548e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5482:	683b      	ldr	r3, [r7, #0]
    5484:	795b      	ldrb	r3, [r3, #5]
    5486:	4619      	mov	r1, r3
    5488:	68f8      	ldr	r0, [r7, #12]
    548a:	4b08      	ldr	r3, [pc, #32]	; (54ac <_qspi_sync_command_set_ifr+0x7c>)
    548c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    548e:	683b      	ldr	r3, [r7, #0]
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	4619      	mov	r1, r3
    5494:	68f8      	ldr	r0, [r7, #12]
    5496:	4b06      	ldr	r3, [pc, #24]	; (54b0 <_qspi_sync_command_set_ifr+0x80>)
    5498:	4798      	blx	r3
}
    549a:	bf00      	nop
    549c:	3710      	adds	r7, #16
    549e:	46bd      	mov	sp, r7
    54a0:	bd80      	pop	{r7, pc}
    54a2:	bf00      	nop
    54a4:	00005265 	.word	0x00005265
    54a8:	00005281 	.word	0x00005281
    54ac:	000052b5 	.word	0x000052b5
    54b0:	000052ed 	.word	0x000052ed

000054b4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    54b4:	b580      	push	{r7, lr}
    54b6:	b084      	sub	sp, #16
    54b8:	af00      	add	r7, sp, #0
    54ba:	6078      	str	r0, [r7, #4]
    54bc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    54c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    54c8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    54ca:	683b      	ldr	r3, [r7, #0]
    54cc:	781b      	ldrb	r3, [r3, #0]
    54ce:	f003 0320 	and.w	r3, r3, #32
    54d2:	b2db      	uxtb	r3, r3
    54d4:	2b00      	cmp	r3, #0
    54d6:	d004      	beq.n	54e2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    54d8:	683b      	ldr	r3, [r7, #0]
    54da:	689b      	ldr	r3, [r3, #8]
    54dc:	68fa      	ldr	r2, [r7, #12]
    54de:	4413      	add	r3, r2
    54e0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    54e2:	68b8      	ldr	r0, [r7, #8]
    54e4:	4b18      	ldr	r3, [pc, #96]	; (5548 <_qspi_sync_run_transfer+0x94>)
    54e6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    54e8:	683b      	ldr	r3, [r7, #0]
    54ea:	691b      	ldr	r3, [r3, #16]
    54ec:	2b00      	cmp	r3, #0
    54ee:	d103      	bne.n	54f8 <_qspi_sync_run_transfer+0x44>
    54f0:	683b      	ldr	r3, [r7, #0]
    54f2:	695b      	ldr	r3, [r3, #20]
    54f4:	2b00      	cmp	r3, #0
    54f6:	d001      	beq.n	54fc <_qspi_sync_run_transfer+0x48>
    54f8:	2301      	movs	r3, #1
    54fa:	e000      	b.n	54fe <_qspi_sync_run_transfer+0x4a>
    54fc:	2300      	movs	r3, #0
    54fe:	f003 0301 	and.w	r3, r3, #1
    5502:	b2db      	uxtb	r3, r3
    5504:	2282      	movs	r2, #130	; 0x82
    5506:	4911      	ldr	r1, [pc, #68]	; (554c <_qspi_sync_run_transfer+0x98>)
    5508:	4618      	mov	r0, r3
    550a:	4b11      	ldr	r3, [pc, #68]	; (5550 <_qspi_sync_run_transfer+0x9c>)
    550c:	4798      	blx	r3

	if (cmd->tx_buf) {
    550e:	683b      	ldr	r3, [r7, #0]
    5510:	691b      	ldr	r3, [r3, #16]
    5512:	2b00      	cmp	r3, #0
    5514:	d008      	beq.n	5528 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5516:	683b      	ldr	r3, [r7, #0]
    5518:	6919      	ldr	r1, [r3, #16]
    551a:	683b      	ldr	r3, [r7, #0]
    551c:	68db      	ldr	r3, [r3, #12]
    551e:	461a      	mov	r2, r3
    5520:	68f8      	ldr	r0, [r7, #12]
    5522:	4b0c      	ldr	r3, [pc, #48]	; (5554 <_qspi_sync_run_transfer+0xa0>)
    5524:	4798      	blx	r3
    5526:	e007      	b.n	5538 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5528:	683b      	ldr	r3, [r7, #0]
    552a:	6958      	ldr	r0, [r3, #20]
    552c:	683b      	ldr	r3, [r7, #0]
    552e:	68db      	ldr	r3, [r3, #12]
    5530:	461a      	mov	r2, r3
    5532:	68f9      	ldr	r1, [r7, #12]
    5534:	4b07      	ldr	r3, [pc, #28]	; (5554 <_qspi_sync_run_transfer+0xa0>)
    5536:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    553c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5540:	bf00      	nop
    5542:	3710      	adds	r7, #16
    5544:	46bd      	mov	sp, r7
    5546:	bd80      	pop	{r7, pc}
    5548:	00005309 	.word	0x00005309
    554c:	00011350 	.word	0x00011350
    5550:	0000337d 	.word	0x0000337d
    5554:	00005321 	.word	0x00005321

00005558 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5558:	b580      	push	{r7, lr}
    555a:	b082      	sub	sp, #8
    555c:	af00      	add	r7, sp, #0
    555e:	6078      	str	r0, [r7, #4]
    5560:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5562:	6839      	ldr	r1, [r7, #0]
    5564:	6878      	ldr	r0, [r7, #4]
    5566:	4b14      	ldr	r3, [pc, #80]	; (55b8 <_qspi_sync_serial_run_command+0x60>)
    5568:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    556a:	683b      	ldr	r3, [r7, #0]
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5572:	b2db      	uxtb	r3, r3
    5574:	2b00      	cmp	r3, #0
    5576:	d003      	beq.n	5580 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5578:	6839      	ldr	r1, [r7, #0]
    557a:	6878      	ldr	r0, [r7, #4]
    557c:	4b0f      	ldr	r3, [pc, #60]	; (55bc <_qspi_sync_serial_run_command+0x64>)
    557e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	681b      	ldr	r3, [r3, #0]
    5584:	4618      	mov	r0, r3
    5586:	4b0e      	ldr	r3, [pc, #56]	; (55c0 <_qspi_sync_serial_run_command+0x68>)
    5588:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    558a:	bf00      	nop
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	4618      	mov	r0, r3
    5592:	4b0c      	ldr	r3, [pc, #48]	; (55c4 <_qspi_sync_serial_run_command+0x6c>)
    5594:	4798      	blx	r3
    5596:	4603      	mov	r3, r0
    5598:	f083 0301 	eor.w	r3, r3, #1
    559c:	b2db      	uxtb	r3, r3
    559e:	2b00      	cmp	r3, #0
    55a0:	d1f4      	bne.n	558c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	4618      	mov	r0, r3
    55a8:	4b07      	ldr	r3, [pc, #28]	; (55c8 <_qspi_sync_serial_run_command+0x70>)
    55aa:	4798      	blx	r3
	return ERR_NONE;
    55ac:	2300      	movs	r3, #0
}
    55ae:	4618      	mov	r0, r3
    55b0:	3708      	adds	r7, #8
    55b2:	46bd      	mov	sp, r7
    55b4:	bd80      	pop	{r7, pc}
    55b6:	bf00      	nop
    55b8:	00005431 	.word	0x00005431
    55bc:	000054b5 	.word	0x000054b5
    55c0:	00005355 	.word	0x00005355
    55c4:	000051cd 	.word	0x000051cd
    55c8:	000051f5 	.word	0x000051f5

000055cc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    55cc:	b480      	push	{r7}
    55ce:	b083      	sub	sp, #12
    55d0:	af00      	add	r7, sp, #0
    55d2:	6078      	str	r0, [r7, #4]
    55d4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    55d6:	bf00      	nop
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	691a      	ldr	r2, [r3, #16]
    55dc:	683b      	ldr	r3, [r7, #0]
    55de:	4013      	ands	r3, r2
    55e0:	2b00      	cmp	r3, #0
    55e2:	d1f9      	bne.n	55d8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    55e4:	bf00      	nop
    55e6:	370c      	adds	r7, #12
    55e8:	46bd      	mov	sp, r7
    55ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ee:	4770      	bx	lr

000055f0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    55f0:	b480      	push	{r7}
    55f2:	b083      	sub	sp, #12
    55f4:	af00      	add	r7, sp, #0
    55f6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	f44f 7280 	mov.w	r2, #256	; 0x100
    55fe:	819a      	strh	r2, [r3, #12]
}
    5600:	bf00      	nop
    5602:	370c      	adds	r7, #12
    5604:	46bd      	mov	sp, r7
    5606:	f85d 7b04 	ldr.w	r7, [sp], #4
    560a:	4770      	bx	lr

0000560c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    560c:	b480      	push	{r7}
    560e:	b083      	sub	sp, #12
    5610:	af00      	add	r7, sp, #0
    5612:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5614:	687b      	ldr	r3, [r7, #4]
    5616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    561a:	819a      	strh	r2, [r3, #12]
}
    561c:	bf00      	nop
    561e:	370c      	adds	r7, #12
    5620:	46bd      	mov	sp, r7
    5622:	f85d 7b04 	ldr.w	r7, [sp], #4
    5626:	4770      	bx	lr

00005628 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5628:	b480      	push	{r7}
    562a:	b083      	sub	sp, #12
    562c:	af00      	add	r7, sp, #0
    562e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	899b      	ldrh	r3, [r3, #12]
    5634:	b29b      	uxth	r3, r3
}
    5636:	4618      	mov	r0, r3
    5638:	370c      	adds	r7, #12
    563a:	46bd      	mov	sp, r7
    563c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5640:	4770      	bx	lr

00005642 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5642:	b480      	push	{r7}
    5644:	b083      	sub	sp, #12
    5646:	af00      	add	r7, sp, #0
    5648:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	895b      	ldrh	r3, [r3, #10]
    564e:	b29b      	uxth	r3, r3
}
    5650:	4618      	mov	r0, r3
    5652:	370c      	adds	r7, #12
    5654:	46bd      	mov	sp, r7
    5656:	f85d 7b04 	ldr.w	r7, [sp], #4
    565a:	4770      	bx	lr

0000565c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    565c:	b580      	push	{r7, lr}
    565e:	b082      	sub	sp, #8
    5660:	af00      	add	r7, sp, #0
    5662:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	881b      	ldrh	r3, [r3, #0]
    5668:	b29b      	uxth	r3, r3
    566a:	f043 0301 	orr.w	r3, r3, #1
    566e:	b29a      	uxth	r2, r3
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5674:	2101      	movs	r1, #1
    5676:	6878      	ldr	r0, [r7, #4]
    5678:	4b02      	ldr	r3, [pc, #8]	; (5684 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    567a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    567c:	bf00      	nop
    567e:	3708      	adds	r7, #8
    5680:	46bd      	mov	sp, r7
    5682:	bd80      	pop	{r7, pc}
    5684:	000055cd 	.word	0x000055cd

00005688 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5688:	b580      	push	{r7, lr}
    568a:	b084      	sub	sp, #16
    568c:	af00      	add	r7, sp, #0
    568e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5690:	f248 0103 	movw	r1, #32771	; 0x8003
    5694:	6878      	ldr	r0, [r7, #4]
    5696:	4b0a      	ldr	r3, [pc, #40]	; (56c0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5698:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	881b      	ldrh	r3, [r3, #0]
    569e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    56a0:	89fb      	ldrh	r3, [r7, #14]
    56a2:	085b      	lsrs	r3, r3, #1
    56a4:	b29b      	uxth	r3, r3
    56a6:	f003 0301 	and.w	r3, r3, #1
    56aa:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    56ac:	89fb      	ldrh	r3, [r7, #14]
    56ae:	2b00      	cmp	r3, #0
    56b0:	bf14      	ite	ne
    56b2:	2301      	movne	r3, #1
    56b4:	2300      	moveq	r3, #0
    56b6:	b2db      	uxtb	r3, r3
}
    56b8:	4618      	mov	r0, r3
    56ba:	3710      	adds	r7, #16
    56bc:	46bd      	mov	sp, r7
    56be:	bd80      	pop	{r7, pc}
    56c0:	000055cd 	.word	0x000055cd

000056c4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    56c4:	b580      	push	{r7, lr}
    56c6:	b082      	sub	sp, #8
    56c8:	af00      	add	r7, sp, #0
    56ca:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    56cc:	687b      	ldr	r3, [r7, #4]
    56ce:	881b      	ldrh	r3, [r3, #0]
    56d0:	b29b      	uxth	r3, r3
    56d2:	f023 0302 	bic.w	r3, r3, #2
    56d6:	b29a      	uxth	r2, r3
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    56dc:	f248 0103 	movw	r1, #32771	; 0x8003
    56e0:	6878      	ldr	r0, [r7, #4]
    56e2:	4b03      	ldr	r3, [pc, #12]	; (56f0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    56e4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    56e6:	bf00      	nop
    56e8:	3708      	adds	r7, #8
    56ea:	46bd      	mov	sp, r7
    56ec:	bd80      	pop	{r7, pc}
    56ee:	bf00      	nop
    56f0:	000055cd 	.word	0x000055cd

000056f4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    56f4:	b580      	push	{r7, lr}
    56f6:	b082      	sub	sp, #8
    56f8:	af00      	add	r7, sp, #0
    56fa:	6078      	str	r0, [r7, #4]
    56fc:	460b      	mov	r3, r1
    56fe:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	887a      	ldrh	r2, [r7, #2]
    5704:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5706:	f248 0103 	movw	r1, #32771	; 0x8003
    570a:	6878      	ldr	r0, [r7, #4]
    570c:	4b02      	ldr	r3, [pc, #8]	; (5718 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    570e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5710:	bf00      	nop
    5712:	3708      	adds	r7, #8
    5714:	46bd      	mov	sp, r7
    5716:	bd80      	pop	{r7, pc}
    5718:	000055cd 	.word	0x000055cd

0000571c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    571c:	b480      	push	{r7}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
    5724:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	683a      	ldr	r2, [r7, #0]
    572a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    572c:	bf00      	nop
    572e:	370c      	adds	r7, #12
    5730:	46bd      	mov	sp, r7
    5732:	f85d 7b04 	ldr.w	r7, [sp], #4
    5736:	4770      	bx	lr

00005738 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5738:	b580      	push	{r7, lr}
    573a:	b082      	sub	sp, #8
    573c:	af00      	add	r7, sp, #0
    573e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5740:	687b      	ldr	r3, [r7, #4]
    5742:	2b00      	cmp	r3, #0
    5744:	d005      	beq.n	5752 <_calendar_init+0x1a>
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	681b      	ldr	r3, [r3, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d001      	beq.n	5752 <_calendar_init+0x1a>
    574e:	2301      	movs	r3, #1
    5750:	e000      	b.n	5754 <_calendar_init+0x1c>
    5752:	2300      	movs	r3, #0
    5754:	f003 0301 	and.w	r3, r3, #1
    5758:	b2db      	uxtb	r3, r3
    575a:	222f      	movs	r2, #47	; 0x2f
    575c:	491b      	ldr	r1, [pc, #108]	; (57cc <_calendar_init+0x94>)
    575e:	4618      	mov	r0, r3
    5760:	4b1b      	ldr	r3, [pc, #108]	; (57d0 <_calendar_init+0x98>)
    5762:	4798      	blx	r3

	_rtc_dev = dev;
    5764:	4a1b      	ldr	r2, [pc, #108]	; (57d4 <_calendar_init+0x9c>)
    5766:	687b      	ldr	r3, [r7, #4]
    5768:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    576a:	687b      	ldr	r3, [r7, #4]
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	4618      	mov	r0, r3
    5770:	4b19      	ldr	r3, [pc, #100]	; (57d8 <_calendar_init+0xa0>)
    5772:	4798      	blx	r3
    5774:	4603      	mov	r3, r0
    5776:	2b00      	cmp	r3, #0
    5778:	d00a      	beq.n	5790 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    577a:	687b      	ldr	r3, [r7, #4]
    577c:	681b      	ldr	r3, [r3, #0]
    577e:	4618      	mov	r0, r3
    5780:	4b16      	ldr	r3, [pc, #88]	; (57dc <_calendar_init+0xa4>)
    5782:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	681b      	ldr	r3, [r3, #0]
    5788:	2102      	movs	r1, #2
    578a:	4618      	mov	r0, r3
    578c:	4b14      	ldr	r3, [pc, #80]	; (57e0 <_calendar_init+0xa8>)
    578e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	4618      	mov	r0, r3
    5796:	4b13      	ldr	r3, [pc, #76]	; (57e4 <_calendar_init+0xac>)
    5798:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    579a:	687b      	ldr	r3, [r7, #4]
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	2101      	movs	r1, #1
    57a0:	4618      	mov	r0, r3
    57a2:	4b0f      	ldr	r3, [pc, #60]	; (57e0 <_calendar_init+0xa8>)
    57a4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    57ae:	4618      	mov	r0, r3
    57b0:	4b0d      	ldr	r3, [pc, #52]	; (57e8 <_calendar_init+0xb0>)
    57b2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    57b8:	2100      	movs	r1, #0
    57ba:	4618      	mov	r0, r3
    57bc:	4b0b      	ldr	r3, [pc, #44]	; (57ec <_calendar_init+0xb4>)
    57be:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    57c0:	2300      	movs	r3, #0
}
    57c2:	4618      	mov	r0, r3
    57c4:	3708      	adds	r7, #8
    57c6:	46bd      	mov	sp, r7
    57c8:	bd80      	pop	{r7, pc}
    57ca:	bf00      	nop
    57cc:	00011368 	.word	0x00011368
    57d0:	0000337d 	.word	0x0000337d
    57d4:	20000b28 	.word	0x20000b28
    57d8:	00005689 	.word	0x00005689
    57dc:	000056c5 	.word	0x000056c5
    57e0:	000055cd 	.word	0x000055cd
    57e4:	0000565d 	.word	0x0000565d
    57e8:	000056f5 	.word	0x000056f5
    57ec:	0000571d 	.word	0x0000571d

000057f0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    57f0:	b580      	push	{r7, lr}
    57f2:	b084      	sub	sp, #16
    57f4:	af00      	add	r7, sp, #0
    57f6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	681b      	ldr	r3, [r3, #0]
    57fc:	4618      	mov	r0, r3
    57fe:	4b19      	ldr	r3, [pc, #100]	; (5864 <_rtc_interrupt_handler+0x74>)
    5800:	4798      	blx	r3
    5802:	4603      	mov	r3, r0
    5804:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	4618      	mov	r0, r3
    580c:	4b16      	ldr	r3, [pc, #88]	; (5868 <_rtc_interrupt_handler+0x78>)
    580e:	4798      	blx	r3
    5810:	4603      	mov	r3, r0
    5812:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5814:	89fa      	ldrh	r2, [r7, #14]
    5816:	89bb      	ldrh	r3, [r7, #12]
    5818:	4013      	ands	r3, r2
    581a:	b29b      	uxth	r3, r3
    581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5820:	2b00      	cmp	r3, #0
    5822:	d009      	beq.n	5838 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	685b      	ldr	r3, [r3, #4]
    5828:	6878      	ldr	r0, [r7, #4]
    582a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    582c:	687b      	ldr	r3, [r7, #4]
    582e:	681b      	ldr	r3, [r3, #0]
    5830:	4618      	mov	r0, r3
    5832:	4b0e      	ldr	r3, [pc, #56]	; (586c <_rtc_interrupt_handler+0x7c>)
    5834:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5836:	e010      	b.n	585a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5838:	89fa      	ldrh	r2, [r7, #14]
    583a:	89bb      	ldrh	r3, [r7, #12]
    583c:	4013      	ands	r3, r2
    583e:	b29b      	uxth	r3, r3
    5840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5844:	2b00      	cmp	r3, #0
    5846:	d008      	beq.n	585a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	689b      	ldr	r3, [r3, #8]
    584c:	6878      	ldr	r0, [r7, #4]
    584e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	4618      	mov	r0, r3
    5856:	4b06      	ldr	r3, [pc, #24]	; (5870 <_rtc_interrupt_handler+0x80>)
    5858:	4798      	blx	r3
}
    585a:	bf00      	nop
    585c:	3710      	adds	r7, #16
    585e:	46bd      	mov	sp, r7
    5860:	bd80      	pop	{r7, pc}
    5862:	bf00      	nop
    5864:	00005629 	.word	0x00005629
    5868:	00005643 	.word	0x00005643
    586c:	000055f1 	.word	0x000055f1
    5870:	0000560d 	.word	0x0000560d

00005874 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5874:	b580      	push	{r7, lr}
    5876:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5878:	4b03      	ldr	r3, [pc, #12]	; (5888 <RTC_Handler+0x14>)
    587a:	681b      	ldr	r3, [r3, #0]
    587c:	4618      	mov	r0, r3
    587e:	4b03      	ldr	r3, [pc, #12]	; (588c <RTC_Handler+0x18>)
    5880:	4798      	blx	r3
}
    5882:	bf00      	nop
    5884:	bd80      	pop	{r7, pc}
    5886:	bf00      	nop
    5888:	20000b28 	.word	0x20000b28
    588c:	000057f1 	.word	0x000057f1

00005890 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5890:	b480      	push	{r7}
    5892:	b083      	sub	sp, #12
    5894:	af00      	add	r7, sp, #0
    5896:	6078      	str	r0, [r7, #4]
    5898:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    589a:	bf00      	nop
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	69da      	ldr	r2, [r3, #28]
    58a0:	683b      	ldr	r3, [r7, #0]
    58a2:	4013      	ands	r3, r2
    58a4:	2b00      	cmp	r3, #0
    58a6:	d1f9      	bne.n	589c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    58a8:	bf00      	nop
    58aa:	370c      	adds	r7, #12
    58ac:	46bd      	mov	sp, r7
    58ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b2:	4770      	bx	lr

000058b4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    58b4:	b480      	push	{r7}
    58b6:	b083      	sub	sp, #12
    58b8:	af00      	add	r7, sp, #0
    58ba:	6078      	str	r0, [r7, #4]
    58bc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    58be:	687b      	ldr	r3, [r7, #4]
    58c0:	69da      	ldr	r2, [r3, #28]
    58c2:	683b      	ldr	r3, [r7, #0]
    58c4:	4013      	ands	r3, r2
    58c6:	2b00      	cmp	r3, #0
    58c8:	bf14      	ite	ne
    58ca:	2301      	movne	r3, #1
    58cc:	2300      	moveq	r3, #0
    58ce:	b2db      	uxtb	r3, r3
}
    58d0:	4618      	mov	r0, r3
    58d2:	370c      	adds	r7, #12
    58d4:	46bd      	mov	sp, r7
    58d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58da:	4770      	bx	lr

000058dc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    58dc:	b480      	push	{r7}
    58de:	b083      	sub	sp, #12
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
    58e4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    58e6:	bf00      	nop
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	69da      	ldr	r2, [r3, #28]
    58ec:	683b      	ldr	r3, [r7, #0]
    58ee:	4013      	ands	r3, r2
    58f0:	2b00      	cmp	r3, #0
    58f2:	d1f9      	bne.n	58e8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    58f4:	bf00      	nop
    58f6:	370c      	adds	r7, #12
    58f8:	46bd      	mov	sp, r7
    58fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    58fe:	4770      	bx	lr

00005900 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5900:	b480      	push	{r7}
    5902:	b083      	sub	sp, #12
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
    5908:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	69da      	ldr	r2, [r3, #28]
    590e:	683b      	ldr	r3, [r7, #0]
    5910:	4013      	ands	r3, r2
    5912:	2b00      	cmp	r3, #0
    5914:	bf14      	ite	ne
    5916:	2301      	movne	r3, #1
    5918:	2300      	moveq	r3, #0
    591a:	b2db      	uxtb	r3, r3
}
    591c:	4618      	mov	r0, r3
    591e:	370c      	adds	r7, #12
    5920:	46bd      	mov	sp, r7
    5922:	f85d 7b04 	ldr.w	r7, [sp], #4
    5926:	4770      	bx	lr

00005928 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5928:	b480      	push	{r7}
    592a:	b083      	sub	sp, #12
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	2201      	movs	r2, #1
    5934:	761a      	strb	r2, [r3, #24]
}
    5936:	bf00      	nop
    5938:	370c      	adds	r7, #12
    593a:	46bd      	mov	sp, r7
    593c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5940:	4770      	bx	lr

00005942 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5942:	b480      	push	{r7}
    5944:	b083      	sub	sp, #12
    5946:	af00      	add	r7, sp, #0
    5948:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    594a:	687b      	ldr	r3, [r7, #4]
    594c:	2202      	movs	r2, #2
    594e:	761a      	strb	r2, [r3, #24]
}
    5950:	bf00      	nop
    5952:	370c      	adds	r7, #12
    5954:	46bd      	mov	sp, r7
    5956:	f85d 7b04 	ldr.w	r7, [sp], #4
    595a:	4770      	bx	lr

0000595c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    595c:	b480      	push	{r7}
    595e:	b083      	sub	sp, #12
    5960:	af00      	add	r7, sp, #0
    5962:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	7e1b      	ldrb	r3, [r3, #24]
    5968:	b2db      	uxtb	r3, r3
}
    596a:	4618      	mov	r0, r3
    596c:	370c      	adds	r7, #12
    596e:	46bd      	mov	sp, r7
    5970:	f85d 7b04 	ldr.w	r7, [sp], #4
    5974:	4770      	bx	lr

00005976 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5976:	b480      	push	{r7}
    5978:	b085      	sub	sp, #20
    597a:	af00      	add	r7, sp, #0
    597c:	6078      	str	r0, [r7, #4]
    597e:	460b      	mov	r3, r1
    5980:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	7e1b      	ldrb	r3, [r3, #24]
    5986:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5988:	7bfa      	ldrb	r2, [r7, #15]
    598a:	78fb      	ldrb	r3, [r7, #3]
    598c:	4013      	ands	r3, r2
    598e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5990:	7bfb      	ldrb	r3, [r7, #15]
}
    5992:	4618      	mov	r0, r3
    5994:	3714      	adds	r7, #20
    5996:	46bd      	mov	sp, r7
    5998:	f85d 7b04 	ldr.w	r7, [sp], #4
    599c:	4770      	bx	lr

0000599e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    599e:	b480      	push	{r7}
    59a0:	b083      	sub	sp, #12
    59a2:	af00      	add	r7, sp, #0
    59a4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	7e1b      	ldrb	r3, [r3, #24]
    59aa:	b2db      	uxtb	r3, r3
}
    59ac:	4618      	mov	r0, r3
    59ae:	370c      	adds	r7, #12
    59b0:	46bd      	mov	sp, r7
    59b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b6:	4770      	bx	lr

000059b8 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    59b8:	b480      	push	{r7}
    59ba:	b083      	sub	sp, #12
    59bc:	af00      	add	r7, sp, #0
    59be:	6078      	str	r0, [r7, #4]
    59c0:	460b      	mov	r3, r1
    59c2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	78fa      	ldrb	r2, [r7, #3]
    59c8:	761a      	strb	r2, [r3, #24]
}
    59ca:	bf00      	nop
    59cc:	370c      	adds	r7, #12
    59ce:	46bd      	mov	sp, r7
    59d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d4:	4770      	bx	lr
	...

000059d8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	681b      	ldr	r3, [r3, #0]
    59e4:	f043 0202 	orr.w	r2, r3, #2
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    59ec:	2103      	movs	r1, #3
    59ee:	6878      	ldr	r0, [r7, #4]
    59f0:	4b02      	ldr	r3, [pc, #8]	; (59fc <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    59f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59f4:	bf00      	nop
    59f6:	3708      	adds	r7, #8
    59f8:	46bd      	mov	sp, r7
    59fa:	bd80      	pop	{r7, pc}
    59fc:	00005891 	.word	0x00005891

00005a00 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	b082      	sub	sp, #8
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	681b      	ldr	r3, [r3, #0]
    5a0c:	f023 0202 	bic.w	r2, r3, #2
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a14:	2103      	movs	r1, #3
    5a16:	6878      	ldr	r0, [r7, #4]
    5a18:	4b02      	ldr	r3, [pc, #8]	; (5a24 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5a1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a1c:	bf00      	nop
    5a1e:	3708      	adds	r7, #8
    5a20:	46bd      	mov	sp, r7
    5a22:	bd80      	pop	{r7, pc}
    5a24:	00005891 	.word	0x00005891

00005a28 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5a28:	b480      	push	{r7}
    5a2a:	b085      	sub	sp, #20
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	0edb      	lsrs	r3, r3, #27
    5a3a:	f003 0301 	and.w	r3, r3, #1
    5a3e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	2b00      	cmp	r3, #0
    5a44:	bf14      	ite	ne
    5a46:	2301      	movne	r3, #1
    5a48:	2300      	moveq	r3, #0
    5a4a:	b2db      	uxtb	r3, r3
}
    5a4c:	4618      	mov	r0, r3
    5a4e:	3714      	adds	r7, #20
    5a50:	46bd      	mov	sp, r7
    5a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a56:	4770      	bx	lr

00005a58 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5a58:	b580      	push	{r7, lr}
    5a5a:	b084      	sub	sp, #16
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	6078      	str	r0, [r7, #4]
    5a60:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a62:	2103      	movs	r1, #3
    5a64:	6878      	ldr	r0, [r7, #4]
    5a66:	4b07      	ldr	r3, [pc, #28]	; (5a84 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5a68:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5a70:	68fa      	ldr	r2, [r7, #12]
    5a72:	683b      	ldr	r3, [r7, #0]
    5a74:	4013      	ands	r3, r2
    5a76:	60fb      	str	r3, [r7, #12]
	return tmp;
    5a78:	68fb      	ldr	r3, [r7, #12]
}
    5a7a:	4618      	mov	r0, r3
    5a7c:	3710      	adds	r7, #16
    5a7e:	46bd      	mov	sp, r7
    5a80:	bd80      	pop	{r7, pc}
    5a82:	bf00      	nop
    5a84:	00005891 	.word	0x00005891

00005a88 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5a88:	b580      	push	{r7, lr}
    5a8a:	b082      	sub	sp, #8
    5a8c:	af00      	add	r7, sp, #0
    5a8e:	6078      	str	r0, [r7, #4]
    5a90:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	683a      	ldr	r2, [r7, #0]
    5a96:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a98:	2103      	movs	r1, #3
    5a9a:	6878      	ldr	r0, [r7, #4]
    5a9c:	4b02      	ldr	r3, [pc, #8]	; (5aa8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5a9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5aa0:	bf00      	nop
    5aa2:	3708      	adds	r7, #8
    5aa4:	46bd      	mov	sp, r7
    5aa6:	bd80      	pop	{r7, pc}
    5aa8:	00005891 	.word	0x00005891

00005aac <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5aac:	b580      	push	{r7, lr}
    5aae:	b084      	sub	sp, #16
    5ab0:	af00      	add	r7, sp, #0
    5ab2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ab4:	2103      	movs	r1, #3
    5ab6:	6878      	ldr	r0, [r7, #4]
    5ab8:	4b09      	ldr	r3, [pc, #36]	; (5ae0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5aba:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	681b      	ldr	r3, [r3, #0]
    5ac0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5ac2:	68fb      	ldr	r3, [r7, #12]
    5ac4:	085b      	lsrs	r3, r3, #1
    5ac6:	f003 0301 	and.w	r3, r3, #1
    5aca:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	bf14      	ite	ne
    5ad2:	2301      	movne	r3, #1
    5ad4:	2300      	moveq	r3, #0
    5ad6:	b2db      	uxtb	r3, r3
}
    5ad8:	4618      	mov	r0, r3
    5ada:	3710      	adds	r7, #16
    5adc:	46bd      	mov	sp, r7
    5ade:	bd80      	pop	{r7, pc}
    5ae0:	000058dd 	.word	0x000058dd

00005ae4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ae4:	b580      	push	{r7, lr}
    5ae6:	b082      	sub	sp, #8
    5ae8:	af00      	add	r7, sp, #0
    5aea:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	f023 0202 	bic.w	r2, r3, #2
    5af4:	687b      	ldr	r3, [r7, #4]
    5af6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5af8:	2103      	movs	r1, #3
    5afa:	6878      	ldr	r0, [r7, #4]
    5afc:	4b02      	ldr	r3, [pc, #8]	; (5b08 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5afe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b00:	bf00      	nop
    5b02:	3708      	adds	r7, #8
    5b04:	46bd      	mov	sp, r7
    5b06:	bd80      	pop	{r7, pc}
    5b08:	000058dd 	.word	0x000058dd

00005b0c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5b0c:	b580      	push	{r7, lr}
    5b0e:	b084      	sub	sp, #16
    5b10:	af00      	add	r7, sp, #0
    5b12:	6078      	str	r0, [r7, #4]
    5b14:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b16:	2103      	movs	r1, #3
    5b18:	6878      	ldr	r0, [r7, #4]
    5b1a:	4b07      	ldr	r3, [pc, #28]	; (5b38 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5b1c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b24:	68fa      	ldr	r2, [r7, #12]
    5b26:	683b      	ldr	r3, [r7, #0]
    5b28:	4013      	ands	r3, r2
    5b2a:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b2c:	68fb      	ldr	r3, [r7, #12]
}
    5b2e:	4618      	mov	r0, r3
    5b30:	3710      	adds	r7, #16
    5b32:	46bd      	mov	sp, r7
    5b34:	bd80      	pop	{r7, pc}
    5b36:	bf00      	nop
    5b38:	000058dd 	.word	0x000058dd

00005b3c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5b3c:	b580      	push	{r7, lr}
    5b3e:	b082      	sub	sp, #8
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
    5b44:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5b46:	687b      	ldr	r3, [r7, #4]
    5b48:	683a      	ldr	r2, [r7, #0]
    5b4a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b4c:	2103      	movs	r1, #3
    5b4e:	6878      	ldr	r0, [r7, #4]
    5b50:	4b02      	ldr	r3, [pc, #8]	; (5b5c <hri_sercomspi_write_CTRLA_reg+0x20>)
    5b52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b54:	bf00      	nop
    5b56:	3708      	adds	r7, #8
    5b58:	46bd      	mov	sp, r7
    5b5a:	bd80      	pop	{r7, pc}
    5b5c:	000058dd 	.word	0x000058dd

00005b60 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5b60:	b580      	push	{r7, lr}
    5b62:	b082      	sub	sp, #8
    5b64:	af00      	add	r7, sp, #0
    5b66:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	685b      	ldr	r3, [r3, #4]
    5b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b74:	2104      	movs	r1, #4
    5b76:	6878      	ldr	r0, [r7, #4]
    5b78:	4b02      	ldr	r3, [pc, #8]	; (5b84 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5b7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b7c:	bf00      	nop
    5b7e:	3708      	adds	r7, #8
    5b80:	46bd      	mov	sp, r7
    5b82:	bd80      	pop	{r7, pc}
    5b84:	00005891 	.word	0x00005891

00005b88 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b082      	sub	sp, #8
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	685b      	ldr	r3, [r3, #4]
    5b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b9c:	2104      	movs	r1, #4
    5b9e:	6878      	ldr	r0, [r7, #4]
    5ba0:	4b02      	ldr	r3, [pc, #8]	; (5bac <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5ba2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ba4:	bf00      	nop
    5ba6:	3708      	adds	r7, #8
    5ba8:	46bd      	mov	sp, r7
    5baa:	bd80      	pop	{r7, pc}
    5bac:	00005891 	.word	0x00005891

00005bb0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5bb0:	b580      	push	{r7, lr}
    5bb2:	b082      	sub	sp, #8
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5bb8:	687b      	ldr	r3, [r7, #4]
    5bba:	685b      	ldr	r3, [r3, #4]
    5bbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5bc0:	687b      	ldr	r3, [r7, #4]
    5bc2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bc4:	2104      	movs	r1, #4
    5bc6:	6878      	ldr	r0, [r7, #4]
    5bc8:	4b02      	ldr	r3, [pc, #8]	; (5bd4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5bca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bcc:	bf00      	nop
    5bce:	3708      	adds	r7, #8
    5bd0:	46bd      	mov	sp, r7
    5bd2:	bd80      	pop	{r7, pc}
    5bd4:	00005891 	.word	0x00005891

00005bd8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5bd8:	b580      	push	{r7, lr}
    5bda:	b082      	sub	sp, #8
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	685b      	ldr	r3, [r3, #4]
    5be4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bec:	2104      	movs	r1, #4
    5bee:	6878      	ldr	r0, [r7, #4]
    5bf0:	4b02      	ldr	r3, [pc, #8]	; (5bfc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5bf2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bf4:	bf00      	nop
    5bf6:	3708      	adds	r7, #8
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bd80      	pop	{r7, pc}
    5bfc:	00005891 	.word	0x00005891

00005c00 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5c00:	b580      	push	{r7, lr}
    5c02:	b082      	sub	sp, #8
    5c04:	af00      	add	r7, sp, #0
    5c06:	6078      	str	r0, [r7, #4]
    5c08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	685a      	ldr	r2, [r3, #4]
    5c0e:	683b      	ldr	r3, [r7, #0]
    5c10:	041b      	lsls	r3, r3, #16
    5c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5c16:	431a      	orrs	r2, r3
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c1c:	2104      	movs	r1, #4
    5c1e:	6878      	ldr	r0, [r7, #4]
    5c20:	4b02      	ldr	r3, [pc, #8]	; (5c2c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5c22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c24:	bf00      	nop
    5c26:	3708      	adds	r7, #8
    5c28:	46bd      	mov	sp, r7
    5c2a:	bd80      	pop	{r7, pc}
    5c2c:	00005891 	.word	0x00005891

00005c30 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5c30:	b580      	push	{r7, lr}
    5c32:	b082      	sub	sp, #8
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
    5c38:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	683a      	ldr	r2, [r7, #0]
    5c3e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c40:	2104      	movs	r1, #4
    5c42:	6878      	ldr	r0, [r7, #4]
    5c44:	4b02      	ldr	r3, [pc, #8]	; (5c50 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5c46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c48:	bf00      	nop
    5c4a:	3708      	adds	r7, #8
    5c4c:	46bd      	mov	sp, r7
    5c4e:	bd80      	pop	{r7, pc}
    5c50:	00005891 	.word	0x00005891

00005c54 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5c54:	b580      	push	{r7, lr}
    5c56:	b082      	sub	sp, #8
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
    5c5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	683a      	ldr	r2, [r7, #0]
    5c62:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5c64:	2117      	movs	r1, #23
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	4b02      	ldr	r3, [pc, #8]	; (5c74 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5c6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c6c:	bf00      	nop
    5c6e:	3708      	adds	r7, #8
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	000058dd 	.word	0x000058dd

00005c78 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5c78:	b480      	push	{r7}
    5c7a:	b083      	sub	sp, #12
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
    5c80:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5c82:	687b      	ldr	r3, [r7, #4]
    5c84:	683a      	ldr	r2, [r7, #0]
    5c86:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c88:	bf00      	nop
    5c8a:	370c      	adds	r7, #12
    5c8c:	46bd      	mov	sp, r7
    5c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c92:	4770      	bx	lr

00005c94 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5c94:	b480      	push	{r7}
    5c96:	b083      	sub	sp, #12
    5c98:	af00      	add	r7, sp, #0
    5c9a:	6078      	str	r0, [r7, #4]
    5c9c:	460b      	mov	r3, r1
    5c9e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	78fa      	ldrb	r2, [r7, #3]
    5ca4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ca6:	bf00      	nop
    5ca8:	370c      	adds	r7, #12
    5caa:	46bd      	mov	sp, r7
    5cac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb0:	4770      	bx	lr
	...

00005cb4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5cb4:	b580      	push	{r7, lr}
    5cb6:	b084      	sub	sp, #16
    5cb8:	af00      	add	r7, sp, #0
    5cba:	6078      	str	r0, [r7, #4]
    5cbc:	460b      	mov	r3, r1
    5cbe:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5cc4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5cc6:	68fb      	ldr	r3, [r7, #12]
    5cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5ccc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5cce:	78fb      	ldrb	r3, [r7, #3]
    5cd0:	039b      	lsls	r3, r3, #14
    5cd2:	461a      	mov	r2, r3
    5cd4:	68fb      	ldr	r3, [r7, #12]
    5cd6:	4313      	orrs	r3, r2
    5cd8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	68fa      	ldr	r2, [r7, #12]
    5cde:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ce0:	2104      	movs	r1, #4
    5ce2:	6878      	ldr	r0, [r7, #4]
    5ce4:	4b02      	ldr	r3, [pc, #8]	; (5cf0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5ce6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ce8:	bf00      	nop
    5cea:	3710      	adds	r7, #16
    5cec:	46bd      	mov	sp, r7
    5cee:	bd80      	pop	{r7, pc}
    5cf0:	00005891 	.word	0x00005891

00005cf4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b082      	sub	sp, #8
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
    5cfc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5cfe:	687b      	ldr	r3, [r7, #4]
    5d00:	683a      	ldr	r2, [r7, #0]
    5d02:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d04:	2104      	movs	r1, #4
    5d06:	6878      	ldr	r0, [r7, #4]
    5d08:	4b02      	ldr	r3, [pc, #8]	; (5d14 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5d0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d0c:	bf00      	nop
    5d0e:	3708      	adds	r7, #8
    5d10:	46bd      	mov	sp, r7
    5d12:	bd80      	pop	{r7, pc}
    5d14:	00005891 	.word	0x00005891

00005d18 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5d18:	b580      	push	{r7, lr}
    5d1a:	b082      	sub	sp, #8
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d20:	2104      	movs	r1, #4
    5d22:	6878      	ldr	r0, [r7, #4]
    5d24:	4b03      	ldr	r3, [pc, #12]	; (5d34 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5d26:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5d28:	687b      	ldr	r3, [r7, #4]
    5d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5d2c:	4618      	mov	r0, r3
    5d2e:	3708      	adds	r7, #8
    5d30:	46bd      	mov	sp, r7
    5d32:	bd80      	pop	{r7, pc}
    5d34:	00005891 	.word	0x00005891

00005d38 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5d38:	b480      	push	{r7}
    5d3a:	b083      	sub	sp, #12
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	6078      	str	r0, [r7, #4]
    5d40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	683a      	ldr	r2, [r7, #0]
    5d46:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d48:	bf00      	nop
    5d4a:	370c      	adds	r7, #12
    5d4c:	46bd      	mov	sp, r7
    5d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d52:	4770      	bx	lr

00005d54 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	b082      	sub	sp, #8
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
    5d5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	683a      	ldr	r2, [r7, #0]
    5d62:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d64:	2104      	movs	r1, #4
    5d66:	6878      	ldr	r0, [r7, #4]
    5d68:	4b02      	ldr	r3, [pc, #8]	; (5d74 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5d6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d6c:	bf00      	nop
    5d6e:	3708      	adds	r7, #8
    5d70:	46bd      	mov	sp, r7
    5d72:	bd80      	pop	{r7, pc}
    5d74:	00005891 	.word	0x00005891

00005d78 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	b082      	sub	sp, #8
    5d7c:	af00      	add	r7, sp, #0
    5d7e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d80:	2104      	movs	r1, #4
    5d82:	6878      	ldr	r0, [r7, #4]
    5d84:	4b03      	ldr	r3, [pc, #12]	; (5d94 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5d86:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5d8c:	4618      	mov	r0, r3
    5d8e:	3708      	adds	r7, #8
    5d90:	46bd      	mov	sp, r7
    5d92:	bd80      	pop	{r7, pc}
    5d94:	00005891 	.word	0x00005891

00005d98 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5d98:	b480      	push	{r7}
    5d9a:	b083      	sub	sp, #12
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
    5da0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	683a      	ldr	r2, [r7, #0]
    5da6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5da8:	bf00      	nop
    5daa:	370c      	adds	r7, #12
    5dac:	46bd      	mov	sp, r7
    5dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5db2:	4770      	bx	lr

00005db4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5db4:	b480      	push	{r7}
    5db6:	b083      	sub	sp, #12
    5db8:	af00      	add	r7, sp, #0
    5dba:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	370c      	adds	r7, #12
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5dcc:	b480      	push	{r7}
    5dce:	b083      	sub	sp, #12
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	460b      	mov	r3, r1
    5dd6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	78fa      	ldrb	r2, [r7, #3]
    5ddc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5de0:	bf00      	nop
    5de2:	370c      	adds	r7, #12
    5de4:	46bd      	mov	sp, r7
    5de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dea:	4770      	bx	lr

00005dec <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5dec:	b480      	push	{r7}
    5dee:	b083      	sub	sp, #12
    5df0:	af00      	add	r7, sp, #0
    5df2:	6078      	str	r0, [r7, #4]
    5df4:	460b      	mov	r3, r1
    5df6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	887a      	ldrh	r2, [r7, #2]
    5dfc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dfe:	bf00      	nop
    5e00:	370c      	adds	r7, #12
    5e02:	46bd      	mov	sp, r7
    5e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e08:	4770      	bx	lr
	...

00005e0c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b082      	sub	sp, #8
    5e10:	af00      	add	r7, sp, #0
    5e12:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e14:	2104      	movs	r1, #4
    5e16:	6878      	ldr	r0, [r7, #4]
    5e18:	4b06      	ldr	r3, [pc, #24]	; (5e34 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5e1a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	8b5b      	ldrh	r3, [r3, #26]
    5e20:	b29b      	uxth	r3, r3
    5e22:	091b      	lsrs	r3, r3, #4
    5e24:	b29b      	uxth	r3, r3
    5e26:	f003 0303 	and.w	r3, r3, #3
    5e2a:	b29b      	uxth	r3, r3
}
    5e2c:	4618      	mov	r0, r3
    5e2e:	3708      	adds	r7, #8
    5e30:	46bd      	mov	sp, r7
    5e32:	bd80      	pop	{r7, pc}
    5e34:	00005891 	.word	0x00005891

00005e38 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b082      	sub	sp, #8
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e40:	2104      	movs	r1, #4
    5e42:	6878      	ldr	r0, [r7, #4]
    5e44:	4b04      	ldr	r3, [pc, #16]	; (5e58 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5e46:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	8b5b      	ldrh	r3, [r3, #26]
    5e4c:	b29b      	uxth	r3, r3
}
    5e4e:	4618      	mov	r0, r3
    5e50:	3708      	adds	r7, #8
    5e52:	46bd      	mov	sp, r7
    5e54:	bd80      	pop	{r7, pc}
    5e56:	bf00      	nop
    5e58:	00005891 	.word	0x00005891

00005e5c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b082      	sub	sp, #8
    5e60:	af00      	add	r7, sp, #0
    5e62:	6078      	str	r0, [r7, #4]
    5e64:	460b      	mov	r3, r1
    5e66:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	887a      	ldrh	r2, [r7, #2]
    5e6c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e6e:	2104      	movs	r1, #4
    5e70:	6878      	ldr	r0, [r7, #4]
    5e72:	4b03      	ldr	r3, [pc, #12]	; (5e80 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    5e74:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e76:	bf00      	nop
    5e78:	3708      	adds	r7, #8
    5e7a:	46bd      	mov	sp, r7
    5e7c:	bd80      	pop	{r7, pc}
    5e7e:	bf00      	nop
    5e80:	00005891 	.word	0x00005891

00005e84 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5e84:	b4b0      	push	{r4, r5, r7}
    5e86:	b08d      	sub	sp, #52	; 0x34
    5e88:	af00      	add	r7, sp, #0
    5e8a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5e8c:	4b13      	ldr	r3, [pc, #76]	; (5edc <_sercom_get_hardware_index+0x58>)
    5e8e:	f107 040c 	add.w	r4, r7, #12
    5e92:	461d      	mov	r5, r3
    5e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5e98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ea0:	2300      	movs	r3, #0
    5ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ea4:	e010      	b.n	5ec8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ea8:	009b      	lsls	r3, r3, #2
    5eaa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5eae:	4413      	add	r3, r2
    5eb0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5eb4:	461a      	mov	r2, r3
    5eb6:	687b      	ldr	r3, [r7, #4]
    5eb8:	429a      	cmp	r2, r3
    5eba:	d102      	bne.n	5ec2 <_sercom_get_hardware_index+0x3e>
			return i;
    5ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ebe:	b2db      	uxtb	r3, r3
    5ec0:	e006      	b.n	5ed0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ec4:	3301      	adds	r3, #1
    5ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5eca:	2b07      	cmp	r3, #7
    5ecc:	d9eb      	bls.n	5ea6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5ece:	2300      	movs	r3, #0
}
    5ed0:	4618      	mov	r0, r3
    5ed2:	3734      	adds	r7, #52	; 0x34
    5ed4:	46bd      	mov	sp, r7
    5ed6:	bcb0      	pop	{r4, r5, r7}
    5ed8:	4770      	bx	lr
    5eda:	bf00      	nop
    5edc:	0001139c 	.word	0x0001139c

00005ee0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b084      	sub	sp, #16
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5ee8:	6878      	ldr	r0, [r7, #4]
    5eea:	4b13      	ldr	r3, [pc, #76]	; (5f38 <_get_i2cm_index+0x58>)
    5eec:	4798      	blx	r3
    5eee:	4603      	mov	r3, r0
    5ef0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5ef2:	2300      	movs	r3, #0
    5ef4:	73fb      	strb	r3, [r7, #15]
    5ef6:	e010      	b.n	5f1a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5ef8:	7bfa      	ldrb	r2, [r7, #15]
    5efa:	4910      	ldr	r1, [pc, #64]	; (5f3c <_get_i2cm_index+0x5c>)
    5efc:	4613      	mov	r3, r2
    5efe:	005b      	lsls	r3, r3, #1
    5f00:	4413      	add	r3, r2
    5f02:	00db      	lsls	r3, r3, #3
    5f04:	440b      	add	r3, r1
    5f06:	781b      	ldrb	r3, [r3, #0]
    5f08:	7bba      	ldrb	r2, [r7, #14]
    5f0a:	429a      	cmp	r2, r3
    5f0c:	d102      	bne.n	5f14 <_get_i2cm_index+0x34>
			return i;
    5f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f12:	e00d      	b.n	5f30 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f14:	7bfb      	ldrb	r3, [r7, #15]
    5f16:	3301      	adds	r3, #1
    5f18:	73fb      	strb	r3, [r7, #15]
    5f1a:	7bfb      	ldrb	r3, [r7, #15]
    5f1c:	2b02      	cmp	r3, #2
    5f1e:	d9eb      	bls.n	5ef8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5f20:	f240 32a6 	movw	r2, #934	; 0x3a6
    5f24:	4906      	ldr	r1, [pc, #24]	; (5f40 <_get_i2cm_index+0x60>)
    5f26:	2000      	movs	r0, #0
    5f28:	4b06      	ldr	r3, [pc, #24]	; (5f44 <_get_i2cm_index+0x64>)
    5f2a:	4798      	blx	r3
	return -1;
    5f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5f30:	4618      	mov	r0, r3
    5f32:	3710      	adds	r7, #16
    5f34:	46bd      	mov	sp, r7
    5f36:	bd80      	pop	{r7, pc}
    5f38:	00005e85 	.word	0x00005e85
    5f3c:	20000018 	.word	0x20000018
    5f40:	00011380 	.word	0x00011380
    5f44:	0000337d 	.word	0x0000337d

00005f48 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	b082      	sub	sp, #8
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5f50:	2103      	movs	r1, #3
    5f52:	6878      	ldr	r0, [r7, #4]
    5f54:	4b02      	ldr	r3, [pc, #8]	; (5f60 <_sercom_i2c_send_stop+0x18>)
    5f56:	4798      	blx	r3
}
    5f58:	bf00      	nop
    5f5a:	3708      	adds	r7, #8
    5f5c:	46bd      	mov	sp, r7
    5f5e:	bd80      	pop	{r7, pc}
    5f60:	00005c01 	.word	0x00005c01

00005f64 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5f64:	b590      	push	{r4, r7, lr}
    5f66:	b087      	sub	sp, #28
    5f68:	af00      	add	r7, sp, #0
    5f6a:	60f8      	str	r0, [r7, #12]
    5f6c:	60b9      	str	r1, [r7, #8]
    5f6e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5f70:	68f8      	ldr	r0, [r7, #12]
    5f72:	4b7d      	ldr	r3, [pc, #500]	; (6168 <_sercom_i2c_sync_analyse_flags+0x204>)
    5f74:	4798      	blx	r3
    5f76:	4603      	mov	r3, r0
    5f78:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5f7a:	68f8      	ldr	r0, [r7, #12]
    5f7c:	4b7b      	ldr	r3, [pc, #492]	; (616c <_sercom_i2c_sync_analyse_flags+0x208>)
    5f7e:	4798      	blx	r3
    5f80:	4603      	mov	r3, r0
    5f82:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5f84:	68bb      	ldr	r3, [r7, #8]
    5f86:	f003 0301 	and.w	r3, r3, #1
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	f000 8095 	beq.w	60ba <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5f90:	8a7b      	ldrh	r3, [r7, #18]
    5f92:	f003 0302 	and.w	r3, r3, #2
    5f96:	2b00      	cmp	r3, #0
    5f98:	d01d      	beq.n	5fd6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5f9a:	68f8      	ldr	r0, [r7, #12]
    5f9c:	4b74      	ldr	r3, [pc, #464]	; (6170 <_sercom_i2c_sync_analyse_flags+0x20c>)
    5f9e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	885b      	ldrh	r3, [r3, #2]
    5fa4:	b29b      	uxth	r3, r3
    5fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5faa:	b29a      	uxth	r2, r3
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	885b      	ldrh	r3, [r3, #2]
    5fb4:	b29b      	uxth	r3, r3
    5fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5fba:	b29a      	uxth	r2, r3
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5fc0:	8a7b      	ldrh	r3, [r7, #18]
    5fc2:	f003 0301 	and.w	r3, r3, #1
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d002      	beq.n	5fd0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5fca:	f06f 0304 	mvn.w	r3, #4
    5fce:	e0c6      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5fd0:	f06f 0303 	mvn.w	r3, #3
    5fd4:	e0c3      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5fd6:	8a7b      	ldrh	r3, [r7, #18]
    5fd8:	f003 0304 	and.w	r3, r3, #4
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d01f      	beq.n	6020 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	685b      	ldr	r3, [r3, #4]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	dd07      	ble.n	5ff8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	885b      	ldrh	r3, [r3, #2]
    5fec:	b29b      	uxth	r3, r3
    5fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5ff2:	b29a      	uxth	r2, r3
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	885b      	ldrh	r3, [r3, #2]
    5ffc:	b29b      	uxth	r3, r3
    5ffe:	b21b      	sxth	r3, r3
    6000:	2b00      	cmp	r3, #0
    6002:	da02      	bge.n	600a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6004:	68f8      	ldr	r0, [r7, #12]
    6006:	4b5b      	ldr	r3, [pc, #364]	; (6174 <_sercom_i2c_sync_analyse_flags+0x210>)
    6008:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    600a:	687b      	ldr	r3, [r7, #4]
    600c:	885b      	ldrh	r3, [r3, #2]
    600e:	b29b      	uxth	r3, r3
    6010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6014:	b29a      	uxth	r2, r3
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    601a:	f06f 0301 	mvn.w	r3, #1
    601e:	e09e      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	885b      	ldrh	r3, [r3, #2]
    6024:	b29b      	uxth	r3, r3
    6026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    602a:	2b00      	cmp	r3, #0
    602c:	d01c      	beq.n	6068 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	881b      	ldrh	r3, [r3, #0]
    6032:	121b      	asrs	r3, r3, #8
    6034:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6036:	f003 0406 	and.w	r4, r3, #6
    603a:	68f8      	ldr	r0, [r7, #12]
    603c:	4b4e      	ldr	r3, [pc, #312]	; (6178 <_sercom_i2c_sync_analyse_flags+0x214>)
    603e:	4798      	blx	r3
    6040:	4603      	mov	r3, r0
    6042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6046:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6048:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    604c:	4619      	mov	r1, r3
    604e:	68f8      	ldr	r0, [r7, #12]
    6050:	4b4a      	ldr	r3, [pc, #296]	; (617c <_sercom_i2c_sync_analyse_flags+0x218>)
    6052:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	885b      	ldrh	r3, [r3, #2]
    6058:	b29b      	uxth	r3, r3
    605a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    605e:	b29a      	uxth	r2, r3
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6064:	2300      	movs	r3, #0
    6066:	e07a      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	685b      	ldr	r3, [r3, #4]
    606c:	2b00      	cmp	r3, #0
    606e:	d111      	bne.n	6094 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	885b      	ldrh	r3, [r3, #2]
    6074:	b29b      	uxth	r3, r3
    6076:	b21b      	sxth	r3, r3
    6078:	2b00      	cmp	r3, #0
    607a:	da02      	bge.n	6082 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    607c:	68f8      	ldr	r0, [r7, #12]
    607e:	4b3d      	ldr	r3, [pc, #244]	; (6174 <_sercom_i2c_sync_analyse_flags+0x210>)
    6080:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	885b      	ldrh	r3, [r3, #2]
    6086:	b29b      	uxth	r3, r3
    6088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    608c:	b29a      	uxth	r2, r3
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	805a      	strh	r2, [r3, #2]
    6092:	e010      	b.n	60b6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	689b      	ldr	r3, [r3, #8]
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	4619      	mov	r1, r3
    609c:	68f8      	ldr	r0, [r7, #12]
    609e:	4b38      	ldr	r3, [pc, #224]	; (6180 <_sercom_i2c_sync_analyse_flags+0x21c>)
    60a0:	4798      	blx	r3
				msg->buffer++;
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	689b      	ldr	r3, [r3, #8]
    60a6:	1c5a      	adds	r2, r3, #1
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	609a      	str	r2, [r3, #8]
				msg->len--;
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	685b      	ldr	r3, [r3, #4]
    60b0:	1e5a      	subs	r2, r3, #1
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    60b6:	2300      	movs	r3, #0
    60b8:	e051      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    60ba:	68bb      	ldr	r3, [r7, #8]
    60bc:	f003 0302 	and.w	r3, r3, #2
    60c0:	2b00      	cmp	r3, #0
    60c2:	d04b      	beq.n	615c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	685b      	ldr	r3, [r3, #4]
    60c8:	2b00      	cmp	r3, #0
    60ca:	d041      	beq.n	6150 <_sercom_i2c_sync_analyse_flags+0x1ec>
    60cc:	8a7b      	ldrh	r3, [r7, #18]
    60ce:	f003 0304 	and.w	r3, r3, #4
    60d2:	2b00      	cmp	r3, #0
    60d4:	d13c      	bne.n	6150 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	685b      	ldr	r3, [r3, #4]
    60da:	1e5a      	subs	r2, r3, #1
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	685b      	ldr	r3, [r3, #4]
    60e4:	2b00      	cmp	r3, #0
    60e6:	d102      	bne.n	60ee <_sercom_i2c_sync_analyse_flags+0x18a>
    60e8:	697b      	ldr	r3, [r7, #20]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d006      	beq.n	60fc <_sercom_i2c_sync_analyse_flags+0x198>
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	685b      	ldr	r3, [r3, #4]
    60f2:	2b01      	cmp	r3, #1
    60f4:	d105      	bne.n	6102 <_sercom_i2c_sync_analyse_flags+0x19e>
    60f6:	697b      	ldr	r3, [r7, #20]
    60f8:	2b00      	cmp	r3, #0
    60fa:	d002      	beq.n	6102 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    60fc:	68f8      	ldr	r0, [r7, #12]
    60fe:	4b21      	ldr	r3, [pc, #132]	; (6184 <_sercom_i2c_sync_analyse_flags+0x220>)
    6100:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	685b      	ldr	r3, [r3, #4]
    6106:	2b00      	cmp	r3, #0
    6108:	d113      	bne.n	6132 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    610a:	687b      	ldr	r3, [r7, #4]
    610c:	885b      	ldrh	r3, [r3, #2]
    610e:	b29b      	uxth	r3, r3
    6110:	b21b      	sxth	r3, r3
    6112:	2b00      	cmp	r3, #0
    6114:	da05      	bge.n	6122 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6116:	68f8      	ldr	r0, [r7, #12]
    6118:	4b1b      	ldr	r3, [pc, #108]	; (6188 <_sercom_i2c_sync_analyse_flags+0x224>)
    611a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    611c:	68f8      	ldr	r0, [r7, #12]
    611e:	4b15      	ldr	r3, [pc, #84]	; (6174 <_sercom_i2c_sync_analyse_flags+0x210>)
    6120:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	885b      	ldrh	r3, [r3, #2]
    6126:	b29b      	uxth	r3, r3
    6128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    612c:	b29a      	uxth	r2, r3
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6132:	687b      	ldr	r3, [r7, #4]
    6134:	689c      	ldr	r4, [r3, #8]
    6136:	1c62      	adds	r2, r4, #1
    6138:	687b      	ldr	r3, [r7, #4]
    613a:	609a      	str	r2, [r3, #8]
    613c:	68f8      	ldr	r0, [r7, #12]
    613e:	4b13      	ldr	r3, [pc, #76]	; (618c <_sercom_i2c_sync_analyse_flags+0x228>)
    6140:	4798      	blx	r3
    6142:	4603      	mov	r3, r0
    6144:	b2db      	uxtb	r3, r3
    6146:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6148:	68f8      	ldr	r0, [r7, #12]
    614a:	4b11      	ldr	r3, [pc, #68]	; (6190 <_sercom_i2c_sync_analyse_flags+0x22c>)
    614c:	4798      	blx	r3
    614e:	e005      	b.n	615c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6150:	68f8      	ldr	r0, [r7, #12]
    6152:	4b0f      	ldr	r3, [pc, #60]	; (6190 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6154:	4798      	blx	r3
			return I2C_NACK;
    6156:	f06f 0301 	mvn.w	r3, #1
    615a:	e000      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    615c:	2300      	movs	r3, #0
}
    615e:	4618      	mov	r0, r3
    6160:	371c      	adds	r7, #28
    6162:	46bd      	mov	sp, r7
    6164:	bd90      	pop	{r4, r7, pc}
    6166:	bf00      	nop
    6168:	00005a29 	.word	0x00005a29
    616c:	00005e39 	.word	0x00005e39
    6170:	00005929 	.word	0x00005929
    6174:	00005f49 	.word	0x00005f49
    6178:	00005d19 	.word	0x00005d19
    617c:	00005cf5 	.word	0x00005cf5
    6180:	00005d55 	.word	0x00005d55
    6184:	00005bb1 	.word	0x00005bb1
    6188:	00005b89 	.word	0x00005b89
    618c:	00005d79 	.word	0x00005d79
    6190:	00005943 	.word	0x00005943

00006194 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6194:	b580      	push	{r7, lr}
    6196:	b082      	sub	sp, #8
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	2b00      	cmp	r3, #0
    61a2:	bf14      	ite	ne
    61a4:	2301      	movne	r3, #1
    61a6:	2300      	moveq	r3, #0
    61a8:	b2db      	uxtb	r3, r3
    61aa:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    61ae:	4908      	ldr	r1, [pc, #32]	; (61d0 <_i2c_m_sync_init+0x3c>)
    61b0:	4618      	mov	r0, r3
    61b2:	4b08      	ldr	r3, [pc, #32]	; (61d4 <_i2c_m_sync_init+0x40>)
    61b4:	4798      	blx	r3

	i2c_dev->hw = hw;
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	683a      	ldr	r2, [r7, #0]
    61ba:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    61bc:	687b      	ldr	r3, [r7, #4]
    61be:	6839      	ldr	r1, [r7, #0]
    61c0:	4618      	mov	r0, r3
    61c2:	4b05      	ldr	r3, [pc, #20]	; (61d8 <_i2c_m_sync_init+0x44>)
    61c4:	4798      	blx	r3
    61c6:	4603      	mov	r3, r0
}
    61c8:	4618      	mov	r0, r3
    61ca:	3708      	adds	r7, #8
    61cc:	46bd      	mov	sp, r7
    61ce:	bd80      	pop	{r7, pc}
    61d0:	00011380 	.word	0x00011380
    61d4:	0000337d 	.word	0x0000337d
    61d8:	00006551 	.word	0x00006551

000061dc <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    61dc:	b580      	push	{r7, lr}
    61de:	b082      	sub	sp, #8
    61e0:	af00      	add	r7, sp, #0
    61e2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	2b00      	cmp	r3, #0
    61e8:	bf14      	ite	ne
    61ea:	2301      	movne	r3, #1
    61ec:	2300      	moveq	r3, #0
    61ee:	b2db      	uxtb	r3, r3
    61f0:	f240 5235 	movw	r2, #1333	; 0x535
    61f4:	4906      	ldr	r1, [pc, #24]	; (6210 <_i2c_m_sync_enable+0x34>)
    61f6:	4618      	mov	r0, r3
    61f8:	4b06      	ldr	r3, [pc, #24]	; (6214 <_i2c_m_sync_enable+0x38>)
    61fa:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	691b      	ldr	r3, [r3, #16]
    6200:	4618      	mov	r0, r3
    6202:	4b05      	ldr	r3, [pc, #20]	; (6218 <_i2c_m_sync_enable+0x3c>)
    6204:	4798      	blx	r3
    6206:	4603      	mov	r3, r0
}
    6208:	4618      	mov	r0, r3
    620a:	3708      	adds	r7, #8
    620c:	46bd      	mov	sp, r7
    620e:	bd80      	pop	{r7, pc}
    6210:	00011380 	.word	0x00011380
    6214:	0000337d 	.word	0x0000337d
    6218:	000064c5 	.word	0x000064c5

0000621c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    621c:	b580      	push	{r7, lr}
    621e:	b084      	sub	sp, #16
    6220:	af00      	add	r7, sp, #0
    6222:	6078      	str	r0, [r7, #4]
    6224:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6226:	f64f 73ff 	movw	r3, #65535	; 0xffff
    622a:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	691b      	ldr	r3, [r3, #16]
    6230:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6232:	68b8      	ldr	r0, [r7, #8]
    6234:	4b0f      	ldr	r3, [pc, #60]	; (6274 <_sercom_i2c_sync_wait_bus+0x58>)
    6236:	4798      	blx	r3
    6238:	4603      	mov	r3, r0
    623a:	461a      	mov	r2, r3
    623c:	683b      	ldr	r3, [r7, #0]
    623e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6240:	68fb      	ldr	r3, [r7, #12]
    6242:	1e5a      	subs	r2, r3, #1
    6244:	60fa      	str	r2, [r7, #12]
    6246:	2b00      	cmp	r3, #0
    6248:	d102      	bne.n	6250 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    624a:	f06f 0304 	mvn.w	r3, #4
    624e:	e00c      	b.n	626a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6250:	683b      	ldr	r3, [r7, #0]
    6252:	681b      	ldr	r3, [r3, #0]
    6254:	f003 0301 	and.w	r3, r3, #1
    6258:	2b00      	cmp	r3, #0
    625a:	d105      	bne.n	6268 <_sercom_i2c_sync_wait_bus+0x4c>
    625c:	683b      	ldr	r3, [r7, #0]
    625e:	681b      	ldr	r3, [r3, #0]
    6260:	f003 0302 	and.w	r3, r3, #2
    6264:	2b00      	cmp	r3, #0
    6266:	d0e4      	beq.n	6232 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6268:	2300      	movs	r3, #0
}
    626a:	4618      	mov	r0, r3
    626c:	3710      	adds	r7, #16
    626e:	46bd      	mov	sp, r7
    6270:	bd80      	pop	{r7, pc}
    6272:	bf00      	nop
    6274:	0000595d 	.word	0x0000595d

00006278 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6278:	b590      	push	{r4, r7, lr}
    627a:	b087      	sub	sp, #28
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6280:	687b      	ldr	r3, [r7, #4]
    6282:	691b      	ldr	r3, [r3, #16]
    6284:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    628a:	6978      	ldr	r0, [r7, #20]
    628c:	4b39      	ldr	r3, [pc, #228]	; (6374 <_sercom_i2c_sync_send_address+0xfc>)
    628e:	4798      	blx	r3
    6290:	4603      	mov	r3, r0
    6292:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	2b00      	cmp	r3, #0
    6298:	bf14      	ite	ne
    629a:	2301      	movne	r3, #1
    629c:	2300      	moveq	r3, #0
    629e:	b2db      	uxtb	r3, r3
    62a0:	f240 52a5 	movw	r2, #1445	; 0x5a5
    62a4:	4934      	ldr	r1, [pc, #208]	; (6378 <_sercom_i2c_sync_send_address+0x100>)
    62a6:	4618      	mov	r0, r3
    62a8:	4b34      	ldr	r3, [pc, #208]	; (637c <_sercom_i2c_sync_send_address+0x104>)
    62aa:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    62ac:	693b      	ldr	r3, [r7, #16]
    62ae:	685b      	ldr	r3, [r3, #4]
    62b0:	2b01      	cmp	r3, #1
    62b2:	d106      	bne.n	62c2 <_sercom_i2c_sync_send_address+0x4a>
    62b4:	68fb      	ldr	r3, [r7, #12]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d003      	beq.n	62c2 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    62ba:	6978      	ldr	r0, [r7, #20]
    62bc:	4b30      	ldr	r3, [pc, #192]	; (6380 <_sercom_i2c_sync_send_address+0x108>)
    62be:	4798      	blx	r3
    62c0:	e002      	b.n	62c8 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    62c2:	6978      	ldr	r0, [r7, #20]
    62c4:	4b2f      	ldr	r3, [pc, #188]	; (6384 <_sercom_i2c_sync_send_address+0x10c>)
    62c6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    62c8:	693b      	ldr	r3, [r7, #16]
    62ca:	881b      	ldrh	r3, [r3, #0]
    62cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    62d0:	2b00      	cmp	r3, #0
    62d2:	d022      	beq.n	631a <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    62d4:	693b      	ldr	r3, [r7, #16]
    62d6:	885b      	ldrh	r3, [r3, #2]
    62d8:	b29b      	uxth	r3, r3
    62da:	f003 0301 	and.w	r3, r3, #1
    62de:	2b00      	cmp	r3, #0
    62e0:	d007      	beq.n	62f2 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    62e2:	693b      	ldr	r3, [r7, #16]
    62e4:	885b      	ldrh	r3, [r3, #2]
    62e6:	b29b      	uxth	r3, r3
    62e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    62ec:	b29a      	uxth	r2, r3
    62ee:	693b      	ldr	r3, [r7, #16]
    62f0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    62f2:	693b      	ldr	r3, [r7, #16]
    62f4:	881b      	ldrh	r3, [r3, #0]
    62f6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    62f8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    62fc:	401c      	ands	r4, r3
    62fe:	6978      	ldr	r0, [r7, #20]
    6300:	4b21      	ldr	r3, [pc, #132]	; (6388 <_sercom_i2c_sync_send_address+0x110>)
    6302:	4798      	blx	r3
    6304:	4603      	mov	r3, r0
    6306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    630a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    630c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6310:	4619      	mov	r1, r3
    6312:	6978      	ldr	r0, [r7, #20]
    6314:	4b1d      	ldr	r3, [pc, #116]	; (638c <_sercom_i2c_sync_send_address+0x114>)
    6316:	4798      	blx	r3
    6318:	e01a      	b.n	6350 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    631a:	693b      	ldr	r3, [r7, #16]
    631c:	881b      	ldrh	r3, [r3, #0]
    631e:	005b      	lsls	r3, r3, #1
    6320:	b2db      	uxtb	r3, r3
    6322:	693a      	ldr	r2, [r7, #16]
    6324:	8852      	ldrh	r2, [r2, #2]
    6326:	b292      	uxth	r2, r2
    6328:	f002 0201 	and.w	r2, r2, #1
    632c:	2a00      	cmp	r2, #0
    632e:	bf14      	ite	ne
    6330:	2201      	movne	r2, #1
    6332:	2200      	moveq	r2, #0
    6334:	b2d2      	uxtb	r2, r2
    6336:	4313      	orrs	r3, r2
    6338:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    633a:	6978      	ldr	r0, [r7, #20]
    633c:	4b12      	ldr	r3, [pc, #72]	; (6388 <_sercom_i2c_sync_send_address+0x110>)
    633e:	4798      	blx	r3
    6340:	4603      	mov	r3, r0
    6342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6346:	4323      	orrs	r3, r4
    6348:	4619      	mov	r1, r3
    634a:	6978      	ldr	r0, [r7, #20]
    634c:	4b0f      	ldr	r3, [pc, #60]	; (638c <_sercom_i2c_sync_send_address+0x114>)
    634e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6350:	f107 0308 	add.w	r3, r7, #8
    6354:	4619      	mov	r1, r3
    6356:	6878      	ldr	r0, [r7, #4]
    6358:	4b0d      	ldr	r3, [pc, #52]	; (6390 <_sercom_i2c_sync_send_address+0x118>)
    635a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    635c:	68bb      	ldr	r3, [r7, #8]
    635e:	693a      	ldr	r2, [r7, #16]
    6360:	4619      	mov	r1, r3
    6362:	6978      	ldr	r0, [r7, #20]
    6364:	4b0b      	ldr	r3, [pc, #44]	; (6394 <_sercom_i2c_sync_send_address+0x11c>)
    6366:	4798      	blx	r3
    6368:	4603      	mov	r3, r0
}
    636a:	4618      	mov	r0, r3
    636c:	371c      	adds	r7, #28
    636e:	46bd      	mov	sp, r7
    6370:	bd90      	pop	{r4, r7, pc}
    6372:	bf00      	nop
    6374:	00005a29 	.word	0x00005a29
    6378:	00011380 	.word	0x00011380
    637c:	0000337d 	.word	0x0000337d
    6380:	00005bb1 	.word	0x00005bb1
    6384:	00005bd9 	.word	0x00005bd9
    6388:	00005d19 	.word	0x00005d19
    638c:	00005cf5 	.word	0x00005cf5
    6390:	0000621d 	.word	0x0000621d
    6394:	00005f65 	.word	0x00005f65

00006398 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6398:	b580      	push	{r7, lr}
    639a:	b086      	sub	sp, #24
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
    63a0:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	691b      	ldr	r3, [r3, #16]
    63a6:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	2b00      	cmp	r3, #0
    63ac:	bf14      	ite	ne
    63ae:	2301      	movne	r3, #1
    63b0:	2300      	moveq	r3, #0
    63b2:	b2db      	uxtb	r3, r3
    63b4:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    63b8:	493b      	ldr	r1, [pc, #236]	; (64a8 <_i2c_m_sync_transfer+0x110>)
    63ba:	4618      	mov	r0, r3
    63bc:	4b3b      	ldr	r3, [pc, #236]	; (64ac <_i2c_m_sync_transfer+0x114>)
    63be:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	691b      	ldr	r3, [r3, #16]
    63c4:	2b00      	cmp	r3, #0
    63c6:	bf14      	ite	ne
    63c8:	2301      	movne	r3, #1
    63ca:	2300      	moveq	r3, #0
    63cc:	b2db      	uxtb	r3, r3
    63ce:	f240 52d1 	movw	r2, #1489	; 0x5d1
    63d2:	4935      	ldr	r1, [pc, #212]	; (64a8 <_i2c_m_sync_transfer+0x110>)
    63d4:	4618      	mov	r0, r3
    63d6:	4b35      	ldr	r3, [pc, #212]	; (64ac <_i2c_m_sync_transfer+0x114>)
    63d8:	4798      	blx	r3
	ASSERT(msg);
    63da:	683b      	ldr	r3, [r7, #0]
    63dc:	2b00      	cmp	r3, #0
    63de:	bf14      	ite	ne
    63e0:	2301      	movne	r3, #1
    63e2:	2300      	moveq	r3, #0
    63e4:	b2db      	uxtb	r3, r3
    63e6:	f240 52d2 	movw	r2, #1490	; 0x5d2
    63ea:	492f      	ldr	r1, [pc, #188]	; (64a8 <_i2c_m_sync_transfer+0x110>)
    63ec:	4618      	mov	r0, r3
    63ee:	4b2f      	ldr	r3, [pc, #188]	; (64ac <_i2c_m_sync_transfer+0x114>)
    63f0:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	885b      	ldrh	r3, [r3, #2]
    63f6:	b29b      	uxth	r3, r3
    63f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    63fc:	2b00      	cmp	r3, #0
    63fe:	d002      	beq.n	6406 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6400:	f06f 0305 	mvn.w	r3, #5
    6404:	e04c      	b.n	64a0 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6406:	683b      	ldr	r3, [r7, #0]
    6408:	885b      	ldrh	r3, [r3, #2]
    640a:	b29b      	uxth	r3, r3
    640c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6410:	b29a      	uxth	r2, r3
    6412:	683b      	ldr	r3, [r7, #0]
    6414:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	683a      	ldr	r2, [r7, #0]
    641a:	ca07      	ldmia	r2, {r0, r1, r2}
    641c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6420:	6938      	ldr	r0, [r7, #16]
    6422:	4b23      	ldr	r3, [pc, #140]	; (64b0 <_i2c_m_sync_transfer+0x118>)
    6424:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6426:	6878      	ldr	r0, [r7, #4]
    6428:	4b22      	ldr	r3, [pc, #136]	; (64b4 <_i2c_m_sync_transfer+0x11c>)
    642a:	4798      	blx	r3
    642c:	6178      	str	r0, [r7, #20]

	if (ret) {
    642e:	697b      	ldr	r3, [r7, #20]
    6430:	2b00      	cmp	r3, #0
    6432:	d02d      	beq.n	6490 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	885b      	ldrh	r3, [r3, #2]
    6438:	b29b      	uxth	r3, r3
    643a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    643e:	b29a      	uxth	r2, r3
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	805a      	strh	r2, [r3, #2]

		return ret;
    6444:	697b      	ldr	r3, [r7, #20]
    6446:	e02b      	b.n	64a0 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6448:	f107 030c 	add.w	r3, r7, #12
    644c:	4619      	mov	r1, r3
    644e:	6878      	ldr	r0, [r7, #4]
    6450:	4b19      	ldr	r3, [pc, #100]	; (64b8 <_i2c_m_sync_transfer+0x120>)
    6452:	4798      	blx	r3
    6454:	6178      	str	r0, [r7, #20]

		if (ret) {
    6456:	697b      	ldr	r3, [r7, #20]
    6458:	2b00      	cmp	r3, #0
    645a:	d012      	beq.n	6482 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    645c:	683b      	ldr	r3, [r7, #0]
    645e:	885b      	ldrh	r3, [r3, #2]
    6460:	b29b      	uxth	r3, r3
    6462:	b21b      	sxth	r3, r3
    6464:	2b00      	cmp	r3, #0
    6466:	da02      	bge.n	646e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6468:	6938      	ldr	r0, [r7, #16]
    646a:	4b14      	ldr	r3, [pc, #80]	; (64bc <_i2c_m_sync_transfer+0x124>)
    646c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    646e:	687b      	ldr	r3, [r7, #4]
    6470:	885b      	ldrh	r3, [r3, #2]
    6472:	b29b      	uxth	r3, r3
    6474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6478:	b29a      	uxth	r2, r3
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	805a      	strh	r2, [r3, #2]

			return ret;
    647e:	697b      	ldr	r3, [r7, #20]
    6480:	e00e      	b.n	64a0 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	687a      	ldr	r2, [r7, #4]
    6486:	4619      	mov	r1, r3
    6488:	6938      	ldr	r0, [r7, #16]
    648a:	4b0d      	ldr	r3, [pc, #52]	; (64c0 <_i2c_m_sync_transfer+0x128>)
    648c:	4798      	blx	r3
    648e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	885b      	ldrh	r3, [r3, #2]
    6494:	b29b      	uxth	r3, r3
    6496:	f403 7380 	and.w	r3, r3, #256	; 0x100
    649a:	2b00      	cmp	r3, #0
    649c:	d1d4      	bne.n	6448 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    649e:	697b      	ldr	r3, [r7, #20]
}
    64a0:	4618      	mov	r0, r3
    64a2:	3718      	adds	r7, #24
    64a4:	46bd      	mov	sp, r7
    64a6:	bd80      	pop	{r7, pc}
    64a8:	00011380 	.word	0x00011380
    64ac:	0000337d 	.word	0x0000337d
    64b0:	00005b61 	.word	0x00005b61
    64b4:	00006279 	.word	0x00006279
    64b8:	0000621d 	.word	0x0000621d
    64bc:	00005f49 	.word	0x00005f49
    64c0:	00005f65 	.word	0x00005f65

000064c4 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    64c4:	b580      	push	{r7, lr}
    64c6:	b084      	sub	sp, #16
    64c8:	af00      	add	r7, sp, #0
    64ca:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    64cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    64d0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    64d2:	2304      	movs	r3, #4
    64d4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    64d6:	687b      	ldr	r3, [r7, #4]
    64d8:	2b00      	cmp	r3, #0
    64da:	bf14      	ite	ne
    64dc:	2301      	movne	r3, #1
    64de:	2300      	moveq	r3, #0
    64e0:	b2db      	uxtb	r3, r3
    64e2:	f240 6205 	movw	r2, #1541	; 0x605
    64e6:	4915      	ldr	r1, [pc, #84]	; (653c <_i2c_m_enable_implementation+0x78>)
    64e8:	4618      	mov	r0, r3
    64ea:	4b15      	ldr	r3, [pc, #84]	; (6540 <_i2c_m_enable_implementation+0x7c>)
    64ec:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    64ee:	6878      	ldr	r0, [r7, #4]
    64f0:	4b14      	ldr	r3, [pc, #80]	; (6544 <_i2c_m_enable_implementation+0x80>)
    64f2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    64f4:	e016      	b.n	6524 <_i2c_m_enable_implementation+0x60>
		timeout--;
    64f6:	68fb      	ldr	r3, [r7, #12]
    64f8:	3b01      	subs	r3, #1
    64fa:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    64fc:	68fb      	ldr	r3, [r7, #12]
    64fe:	2b00      	cmp	r3, #0
    6500:	dc10      	bgt.n	6524 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6502:	68bb      	ldr	r3, [r7, #8]
    6504:	3b01      	subs	r3, #1
    6506:	60bb      	str	r3, [r7, #8]
    6508:	68bb      	ldr	r3, [r7, #8]
    650a:	2b00      	cmp	r3, #0
    650c:	d007      	beq.n	651e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    650e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6512:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6514:	2110      	movs	r1, #16
    6516:	6878      	ldr	r0, [r7, #4]
    6518:	4b0b      	ldr	r3, [pc, #44]	; (6548 <_i2c_m_enable_implementation+0x84>)
    651a:	4798      	blx	r3
    651c:	e002      	b.n	6524 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    651e:	f06f 0305 	mvn.w	r3, #5
    6522:	e006      	b.n	6532 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6524:	6878      	ldr	r0, [r7, #4]
    6526:	4b09      	ldr	r3, [pc, #36]	; (654c <_i2c_m_enable_implementation+0x88>)
    6528:	4798      	blx	r3
    652a:	4603      	mov	r3, r0
    652c:	2b01      	cmp	r3, #1
    652e:	d1e2      	bne.n	64f6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6530:	2300      	movs	r3, #0
}
    6532:	4618      	mov	r0, r3
    6534:	3710      	adds	r7, #16
    6536:	46bd      	mov	sp, r7
    6538:	bd80      	pop	{r7, pc}
    653a:	bf00      	nop
    653c:	00011380 	.word	0x00011380
    6540:	0000337d 	.word	0x0000337d
    6544:	000059d9 	.word	0x000059d9
    6548:	00005e5d 	.word	0x00005e5d
    654c:	00005e0d 	.word	0x00005e0d

00006550 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6550:	b580      	push	{r7, lr}
    6552:	b084      	sub	sp, #16
    6554:	af00      	add	r7, sp, #0
    6556:	6078      	str	r0, [r7, #4]
    6558:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    655a:	6838      	ldr	r0, [r7, #0]
    655c:	4b42      	ldr	r3, [pc, #264]	; (6668 <_i2c_m_sync_init_impl+0x118>)
    655e:	4798      	blx	r3
    6560:	4603      	mov	r3, r0
    6562:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6564:	2101      	movs	r1, #1
    6566:	6838      	ldr	r0, [r7, #0]
    6568:	4b40      	ldr	r3, [pc, #256]	; (666c <_i2c_m_sync_init_impl+0x11c>)
    656a:	4798      	blx	r3
    656c:	4603      	mov	r3, r0
    656e:	f083 0301 	eor.w	r3, r3, #1
    6572:	b2db      	uxtb	r3, r3
    6574:	2b00      	cmp	r3, #0
    6576:	d020      	beq.n	65ba <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6578:	7bfa      	ldrb	r2, [r7, #15]
    657a:	493d      	ldr	r1, [pc, #244]	; (6670 <_i2c_m_sync_init_impl+0x120>)
    657c:	4613      	mov	r3, r2
    657e:	005b      	lsls	r3, r3, #1
    6580:	4413      	add	r3, r2
    6582:	00db      	lsls	r3, r3, #3
    6584:	440b      	add	r3, r1
    6586:	3304      	adds	r3, #4
    6588:	681b      	ldr	r3, [r3, #0]
    658a:	f003 031c 	and.w	r3, r3, #28
    658e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6590:	2102      	movs	r1, #2
    6592:	6838      	ldr	r0, [r7, #0]
    6594:	4b37      	ldr	r3, [pc, #220]	; (6674 <_i2c_m_sync_init_impl+0x124>)
    6596:	4798      	blx	r3
    6598:	4603      	mov	r3, r0
    659a:	2b00      	cmp	r3, #0
    659c:	d006      	beq.n	65ac <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    659e:	6838      	ldr	r0, [r7, #0]
    65a0:	4b35      	ldr	r3, [pc, #212]	; (6678 <_i2c_m_sync_init_impl+0x128>)
    65a2:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    65a4:	2102      	movs	r1, #2
    65a6:	6838      	ldr	r0, [r7, #0]
    65a8:	4b34      	ldr	r3, [pc, #208]	; (667c <_i2c_m_sync_init_impl+0x12c>)
    65aa:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    65ac:	68bb      	ldr	r3, [r7, #8]
    65ae:	f043 0301 	orr.w	r3, r3, #1
    65b2:	4619      	mov	r1, r3
    65b4:	6838      	ldr	r0, [r7, #0]
    65b6:	4b32      	ldr	r3, [pc, #200]	; (6680 <_i2c_m_sync_init_impl+0x130>)
    65b8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    65ba:	2101      	movs	r1, #1
    65bc:	6838      	ldr	r0, [r7, #0]
    65be:	4b2f      	ldr	r3, [pc, #188]	; (667c <_i2c_m_sync_init_impl+0x12c>)
    65c0:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    65c2:	7bfa      	ldrb	r2, [r7, #15]
    65c4:	492a      	ldr	r1, [pc, #168]	; (6670 <_i2c_m_sync_init_impl+0x120>)
    65c6:	4613      	mov	r3, r2
    65c8:	005b      	lsls	r3, r3, #1
    65ca:	4413      	add	r3, r2
    65cc:	00db      	lsls	r3, r3, #3
    65ce:	440b      	add	r3, r1
    65d0:	3304      	adds	r3, #4
    65d2:	681b      	ldr	r3, [r3, #0]
    65d4:	4619      	mov	r1, r3
    65d6:	6838      	ldr	r0, [r7, #0]
    65d8:	4b29      	ldr	r3, [pc, #164]	; (6680 <_i2c_m_sync_init_impl+0x130>)
    65da:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    65dc:	7bfa      	ldrb	r2, [r7, #15]
    65de:	4924      	ldr	r1, [pc, #144]	; (6670 <_i2c_m_sync_init_impl+0x120>)
    65e0:	4613      	mov	r3, r2
    65e2:	005b      	lsls	r3, r3, #1
    65e4:	4413      	add	r3, r2
    65e6:	00db      	lsls	r3, r3, #3
    65e8:	440b      	add	r3, r1
    65ea:	3308      	adds	r3, #8
    65ec:	681b      	ldr	r3, [r3, #0]
    65ee:	4619      	mov	r1, r3
    65f0:	6838      	ldr	r0, [r7, #0]
    65f2:	4b24      	ldr	r3, [pc, #144]	; (6684 <_i2c_m_sync_init_impl+0x134>)
    65f4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    65f6:	7bfa      	ldrb	r2, [r7, #15]
    65f8:	491d      	ldr	r1, [pc, #116]	; (6670 <_i2c_m_sync_init_impl+0x120>)
    65fa:	4613      	mov	r3, r2
    65fc:	005b      	lsls	r3, r3, #1
    65fe:	4413      	add	r3, r2
    6600:	00db      	lsls	r3, r3, #3
    6602:	440b      	add	r3, r1
    6604:	330c      	adds	r3, #12
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	4619      	mov	r1, r3
    660a:	6838      	ldr	r0, [r7, #0]
    660c:	4b1e      	ldr	r3, [pc, #120]	; (6688 <_i2c_m_sync_init_impl+0x138>)
    660e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6610:	7bfa      	ldrb	r2, [r7, #15]
    6612:	4917      	ldr	r1, [pc, #92]	; (6670 <_i2c_m_sync_init_impl+0x120>)
    6614:	4613      	mov	r3, r2
    6616:	005b      	lsls	r3, r3, #1
    6618:	4413      	add	r3, r2
    661a:	00db      	lsls	r3, r3, #3
    661c:	440b      	add	r3, r1
    661e:	3304      	adds	r3, #4
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	0e1b      	lsrs	r3, r3, #24
    6624:	b29b      	uxth	r3, r3
    6626:	f003 0303 	and.w	r3, r3, #3
    662a:	b29a      	uxth	r2, r3
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	899b      	ldrh	r3, [r3, #12]
    6634:	2b01      	cmp	r3, #1
    6636:	bf8c      	ite	hi
    6638:	2301      	movhi	r3, #1
    663a:	2300      	movls	r3, #0
    663c:	b2db      	uxtb	r3, r3
    663e:	4619      	mov	r1, r3
    6640:	6838      	ldr	r0, [r7, #0]
    6642:	4b12      	ldr	r3, [pc, #72]	; (668c <_i2c_m_sync_init_impl+0x13c>)
    6644:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6646:	7bfa      	ldrb	r2, [r7, #15]
    6648:	4909      	ldr	r1, [pc, #36]	; (6670 <_i2c_m_sync_init_impl+0x120>)
    664a:	4613      	mov	r3, r2
    664c:	005b      	lsls	r3, r3, #1
    664e:	4413      	add	r3, r2
    6650:	00db      	lsls	r3, r3, #3
    6652:	440b      	add	r3, r1
    6654:	3312      	adds	r3, #18
    6656:	881a      	ldrh	r2, [r3, #0]
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    665c:	2300      	movs	r3, #0
}
    665e:	4618      	mov	r0, r3
    6660:	3710      	adds	r7, #16
    6662:	46bd      	mov	sp, r7
    6664:	bd80      	pop	{r7, pc}
    6666:	bf00      	nop
    6668:	00005ee1 	.word	0x00005ee1
    666c:	000058b5 	.word	0x000058b5
    6670:	20000018 	.word	0x20000018
    6674:	00005a59 	.word	0x00005a59
    6678:	00005a01 	.word	0x00005a01
    667c:	00005891 	.word	0x00005891
    6680:	00005a89 	.word	0x00005a89
    6684:	00005c31 	.word	0x00005c31
    6688:	00005c79 	.word	0x00005c79
    668c:	00005cb5 	.word	0x00005cb5

00006690 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6690:	b580      	push	{r7, lr}
    6692:	b082      	sub	sp, #8
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
    6698:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    669a:	687b      	ldr	r3, [r7, #4]
    669c:	2b00      	cmp	r3, #0
    669e:	d004      	beq.n	66aa <_spi_load_regs_master+0x1a>
    66a0:	683b      	ldr	r3, [r7, #0]
    66a2:	2b00      	cmp	r3, #0
    66a4:	d001      	beq.n	66aa <_spi_load_regs_master+0x1a>
    66a6:	2301      	movs	r3, #1
    66a8:	e000      	b.n	66ac <_spi_load_regs_master+0x1c>
    66aa:	2300      	movs	r3, #0
    66ac:	f003 0301 	and.w	r3, r3, #1
    66b0:	b2db      	uxtb	r3, r3
    66b2:	f640 1209 	movw	r2, #2313	; 0x909
    66b6:	4915      	ldr	r1, [pc, #84]	; (670c <_spi_load_regs_master+0x7c>)
    66b8:	4618      	mov	r0, r3
    66ba:	4b15      	ldr	r3, [pc, #84]	; (6710 <_spi_load_regs_master+0x80>)
    66bc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    66be:	683b      	ldr	r3, [r7, #0]
    66c0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    66c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    66c6:	f023 0301 	bic.w	r3, r3, #1
    66ca:	4619      	mov	r1, r3
    66cc:	6878      	ldr	r0, [r7, #4]
    66ce:	4b11      	ldr	r3, [pc, #68]	; (6714 <_spi_load_regs_master+0x84>)
    66d0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    66d2:	683b      	ldr	r3, [r7, #0]
    66d4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    66d6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    66da:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    66de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    66e2:	4619      	mov	r1, r3
    66e4:	6878      	ldr	r0, [r7, #4]
    66e6:	4b0c      	ldr	r3, [pc, #48]	; (6718 <_spi_load_regs_master+0x88>)
    66e8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    66ea:	683b      	ldr	r3, [r7, #0]
    66ec:	7b1b      	ldrb	r3, [r3, #12]
    66ee:	4619      	mov	r1, r3
    66f0:	6878      	ldr	r0, [r7, #4]
    66f2:	4b0a      	ldr	r3, [pc, #40]	; (671c <_spi_load_regs_master+0x8c>)
    66f4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    66f6:	683b      	ldr	r3, [r7, #0]
    66f8:	7b5b      	ldrb	r3, [r3, #13]
    66fa:	4619      	mov	r1, r3
    66fc:	6878      	ldr	r0, [r7, #4]
    66fe:	4b08      	ldr	r3, [pc, #32]	; (6720 <_spi_load_regs_master+0x90>)
    6700:	4798      	blx	r3
}
    6702:	bf00      	nop
    6704:	3708      	adds	r7, #8
    6706:	46bd      	mov	sp, r7
    6708:	bd80      	pop	{r7, pc}
    670a:	bf00      	nop
    670c:	00011380 	.word	0x00011380
    6710:	0000337d 	.word	0x0000337d
    6714:	00005b3d 	.word	0x00005b3d
    6718:	00005c55 	.word	0x00005c55
    671c:	00005c95 	.word	0x00005c95
    6720:	00005dcd 	.word	0x00005dcd

00006724 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6724:	b580      	push	{r7, lr}
    6726:	b082      	sub	sp, #8
    6728:	af00      	add	r7, sp, #0
    672a:	6078      	str	r0, [r7, #4]
    672c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	2b00      	cmp	r3, #0
    6732:	d004      	beq.n	673e <_spi_load_regs_slave+0x1a>
    6734:	683b      	ldr	r3, [r7, #0]
    6736:	2b00      	cmp	r3, #0
    6738:	d001      	beq.n	673e <_spi_load_regs_slave+0x1a>
    673a:	2301      	movs	r3, #1
    673c:	e000      	b.n	6740 <_spi_load_regs_slave+0x1c>
    673e:	2300      	movs	r3, #0
    6740:	f003 0301 	and.w	r3, r3, #1
    6744:	b2db      	uxtb	r3, r3
    6746:	f640 121d 	movw	r2, #2333	; 0x91d
    674a:	491a      	ldr	r1, [pc, #104]	; (67b4 <_spi_load_regs_slave+0x90>)
    674c:	4618      	mov	r0, r3
    674e:	4b1a      	ldr	r3, [pc, #104]	; (67b8 <_spi_load_regs_slave+0x94>)
    6750:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6752:	683b      	ldr	r3, [r7, #0]
    6754:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6756:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    675a:	f023 0301 	bic.w	r3, r3, #1
    675e:	4619      	mov	r1, r3
    6760:	6878      	ldr	r0, [r7, #4]
    6762:	4b16      	ldr	r3, [pc, #88]	; (67bc <_spi_load_regs_slave+0x98>)
    6764:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6766:	683b      	ldr	r3, [r7, #0]
    6768:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    676a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    676e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6776:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    677a:	4619      	mov	r1, r3
    677c:	6878      	ldr	r0, [r7, #4]
    677e:	4b10      	ldr	r3, [pc, #64]	; (67c0 <_spi_load_regs_slave+0x9c>)
    6780:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6782:	683b      	ldr	r3, [r7, #0]
    6784:	689b      	ldr	r3, [r3, #8]
    6786:	4619      	mov	r1, r3
    6788:	6878      	ldr	r0, [r7, #4]
    678a:	4b0e      	ldr	r3, [pc, #56]	; (67c4 <_spi_load_regs_slave+0xa0>)
    678c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    678e:	683b      	ldr	r3, [r7, #0]
    6790:	7b5b      	ldrb	r3, [r3, #13]
    6792:	4619      	mov	r1, r3
    6794:	6878      	ldr	r0, [r7, #4]
    6796:	4b0c      	ldr	r3, [pc, #48]	; (67c8 <_spi_load_regs_slave+0xa4>)
    6798:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    679a:	bf00      	nop
    679c:	f04f 31ff 	mov.w	r1, #4294967295
    67a0:	6878      	ldr	r0, [r7, #4]
    67a2:	4b0a      	ldr	r3, [pc, #40]	; (67cc <_spi_load_regs_slave+0xa8>)
    67a4:	4798      	blx	r3
    67a6:	4603      	mov	r3, r0
    67a8:	2b00      	cmp	r3, #0
    67aa:	d1f7      	bne.n	679c <_spi_load_regs_slave+0x78>
		;
}
    67ac:	bf00      	nop
    67ae:	3708      	adds	r7, #8
    67b0:	46bd      	mov	sp, r7
    67b2:	bd80      	pop	{r7, pc}
    67b4:	00011380 	.word	0x00011380
    67b8:	0000337d 	.word	0x0000337d
    67bc:	00005b3d 	.word	0x00005b3d
    67c0:	00005c55 	.word	0x00005c55
    67c4:	00005d39 	.word	0x00005d39
    67c8:	00005dcd 	.word	0x00005dcd
    67cc:	00005901 	.word	0x00005901

000067d0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    67d0:	b580      	push	{r7, lr}
    67d2:	b084      	sub	sp, #16
    67d4:	af00      	add	r7, sp, #0
    67d6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	4618      	mov	r0, r3
    67dc:	4b11      	ldr	r3, [pc, #68]	; (6824 <_spi_get_regs+0x54>)
    67de:	4798      	blx	r3
    67e0:	4603      	mov	r3, r0
    67e2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    67e4:	2300      	movs	r3, #0
    67e6:	73fb      	strb	r3, [r7, #15]
    67e8:	e014      	b.n	6814 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    67ea:	7bfa      	ldrb	r2, [r7, #15]
    67ec:	490e      	ldr	r1, [pc, #56]	; (6828 <_spi_get_regs+0x58>)
    67ee:	4613      	mov	r3, r2
    67f0:	011b      	lsls	r3, r3, #4
    67f2:	4413      	add	r3, r2
    67f4:	440b      	add	r3, r1
    67f6:	3310      	adds	r3, #16
    67f8:	781b      	ldrb	r3, [r3, #0]
    67fa:	7bba      	ldrb	r2, [r7, #14]
    67fc:	429a      	cmp	r2, r3
    67fe:	d106      	bne.n	680e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6800:	7bfa      	ldrb	r2, [r7, #15]
    6802:	4613      	mov	r3, r2
    6804:	011b      	lsls	r3, r3, #4
    6806:	4413      	add	r3, r2
    6808:	4a07      	ldr	r2, [pc, #28]	; (6828 <_spi_get_regs+0x58>)
    680a:	4413      	add	r3, r2
    680c:	e006      	b.n	681c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    680e:	7bfb      	ldrb	r3, [r7, #15]
    6810:	3301      	adds	r3, #1
    6812:	73fb      	strb	r3, [r7, #15]
    6814:	7bfb      	ldrb	r3, [r7, #15]
    6816:	2b01      	cmp	r3, #1
    6818:	d9e7      	bls.n	67ea <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    681a:	2300      	movs	r3, #0
}
    681c:	4618      	mov	r0, r3
    681e:	3710      	adds	r7, #16
    6820:	46bd      	mov	sp, r7
    6822:	bd80      	pop	{r7, pc}
    6824:	00005e85 	.word	0x00005e85
    6828:	000113bc 	.word	0x000113bc

0000682c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    682c:	b580      	push	{r7, lr}
    682e:	b084      	sub	sp, #16
    6830:	af00      	add	r7, sp, #0
    6832:	6078      	str	r0, [r7, #4]
    6834:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6836:	683b      	ldr	r3, [r7, #0]
    6838:	4618      	mov	r0, r3
    683a:	4b35      	ldr	r3, [pc, #212]	; (6910 <_spi_m_sync_init+0xe4>)
    683c:	4798      	blx	r3
    683e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	2b00      	cmp	r3, #0
    6844:	d004      	beq.n	6850 <_spi_m_sync_init+0x24>
    6846:	683b      	ldr	r3, [r7, #0]
    6848:	2b00      	cmp	r3, #0
    684a:	d001      	beq.n	6850 <_spi_m_sync_init+0x24>
    684c:	2301      	movs	r3, #1
    684e:	e000      	b.n	6852 <_spi_m_sync_init+0x26>
    6850:	2300      	movs	r3, #0
    6852:	f003 0301 	and.w	r3, r3, #1
    6856:	b2db      	uxtb	r3, r3
    6858:	f640 123f 	movw	r2, #2367	; 0x93f
    685c:	492d      	ldr	r1, [pc, #180]	; (6914 <_spi_m_sync_init+0xe8>)
    685e:	4618      	mov	r0, r3
    6860:	4b2d      	ldr	r3, [pc, #180]	; (6918 <_spi_m_sync_init+0xec>)
    6862:	4798      	blx	r3

	if (regs == NULL) {
    6864:	68fb      	ldr	r3, [r7, #12]
    6866:	2b00      	cmp	r3, #0
    6868:	d102      	bne.n	6870 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    686a:	f06f 030c 	mvn.w	r3, #12
    686e:	e04a      	b.n	6906 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6870:	2101      	movs	r1, #1
    6872:	6838      	ldr	r0, [r7, #0]
    6874:	4b29      	ldr	r3, [pc, #164]	; (691c <_spi_m_sync_init+0xf0>)
    6876:	4798      	blx	r3
    6878:	4603      	mov	r3, r0
    687a:	f083 0301 	eor.w	r3, r3, #1
    687e:	b2db      	uxtb	r3, r3
    6880:	2b00      	cmp	r3, #0
    6882:	d019      	beq.n	68b8 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6884:	68fb      	ldr	r3, [r7, #12]
    6886:	681b      	ldr	r3, [r3, #0]
    6888:	f003 031c 	and.w	r3, r3, #28
    688c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    688e:	2102      	movs	r1, #2
    6890:	6838      	ldr	r0, [r7, #0]
    6892:	4b23      	ldr	r3, [pc, #140]	; (6920 <_spi_m_sync_init+0xf4>)
    6894:	4798      	blx	r3
    6896:	4603      	mov	r3, r0
    6898:	2b00      	cmp	r3, #0
    689a:	d006      	beq.n	68aa <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    689c:	6838      	ldr	r0, [r7, #0]
    689e:	4b21      	ldr	r3, [pc, #132]	; (6924 <_spi_m_sync_init+0xf8>)
    68a0:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    68a2:	2102      	movs	r1, #2
    68a4:	6838      	ldr	r0, [r7, #0]
    68a6:	4b20      	ldr	r3, [pc, #128]	; (6928 <_spi_m_sync_init+0xfc>)
    68a8:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    68aa:	68bb      	ldr	r3, [r7, #8]
    68ac:	f043 0301 	orr.w	r3, r3, #1
    68b0:	4619      	mov	r1, r3
    68b2:	6838      	ldr	r0, [r7, #0]
    68b4:	4b1d      	ldr	r3, [pc, #116]	; (692c <_spi_m_sync_init+0x100>)
    68b6:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    68b8:	2101      	movs	r1, #1
    68ba:	6838      	ldr	r0, [r7, #0]
    68bc:	4b1a      	ldr	r3, [pc, #104]	; (6928 <_spi_m_sync_init+0xfc>)
    68be:	4798      	blx	r3

	dev->prvt = hw;
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	683a      	ldr	r2, [r7, #0]
    68c4:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    68c6:	68fb      	ldr	r3, [r7, #12]
    68c8:	681b      	ldr	r3, [r3, #0]
    68ca:	f003 031c 	and.w	r3, r3, #28
    68ce:	2b08      	cmp	r3, #8
    68d0:	d104      	bne.n	68dc <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    68d2:	68f9      	ldr	r1, [r7, #12]
    68d4:	6838      	ldr	r0, [r7, #0]
    68d6:	4b16      	ldr	r3, [pc, #88]	; (6930 <_spi_m_sync_init+0x104>)
    68d8:	4798      	blx	r3
    68da:	e003      	b.n	68e4 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    68dc:	68f9      	ldr	r1, [r7, #12]
    68de:	6838      	ldr	r0, [r7, #0]
    68e0:	4b14      	ldr	r3, [pc, #80]	; (6934 <_spi_m_sync_init+0x108>)
    68e2:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    68e4:	68fb      	ldr	r3, [r7, #12]
    68e6:	685b      	ldr	r3, [r3, #4]
    68e8:	f003 0307 	and.w	r3, r3, #7
    68ec:	2b00      	cmp	r3, #0
    68ee:	d101      	bne.n	68f4 <_spi_m_sync_init+0xc8>
    68f0:	2201      	movs	r2, #1
    68f2:	e000      	b.n	68f6 <_spi_m_sync_init+0xca>
    68f4:	2202      	movs	r2, #2
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	89db      	ldrh	r3, [r3, #14]
    68fe:	b29a      	uxth	r2, r3
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6904:	2300      	movs	r3, #0
}
    6906:	4618      	mov	r0, r3
    6908:	3710      	adds	r7, #16
    690a:	46bd      	mov	sp, r7
    690c:	bd80      	pop	{r7, pc}
    690e:	bf00      	nop
    6910:	000067d1 	.word	0x000067d1
    6914:	00011380 	.word	0x00011380
    6918:	0000337d 	.word	0x0000337d
    691c:	00005901 	.word	0x00005901
    6920:	00005b0d 	.word	0x00005b0d
    6924:	00005ae5 	.word	0x00005ae5
    6928:	000058dd 	.word	0x000058dd
    692c:	00005b3d 	.word	0x00005b3d
    6930:	00006725 	.word	0x00006725
    6934:	00006691 	.word	0x00006691

00006938 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6938:	b580      	push	{r7, lr}
    693a:	b082      	sub	sp, #8
    693c:	af00      	add	r7, sp, #0
    693e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6940:	bf00      	nop
    6942:	2103      	movs	r1, #3
    6944:	6878      	ldr	r0, [r7, #4]
    6946:	4b06      	ldr	r3, [pc, #24]	; (6960 <_spi_wait_bus_idle+0x28>)
    6948:	4798      	blx	r3
    694a:	4603      	mov	r3, r0
    694c:	2b00      	cmp	r3, #0
    694e:	d0f8      	beq.n	6942 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6950:	2103      	movs	r1, #3
    6952:	6878      	ldr	r0, [r7, #4]
    6954:	4b03      	ldr	r3, [pc, #12]	; (6964 <_spi_wait_bus_idle+0x2c>)
    6956:	4798      	blx	r3
}
    6958:	bf00      	nop
    695a:	3708      	adds	r7, #8
    695c:	46bd      	mov	sp, r7
    695e:	bd80      	pop	{r7, pc}
    6960:	00005977 	.word	0x00005977
    6964:	000059b9 	.word	0x000059b9

00006968 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6968:	b580      	push	{r7, lr}
    696a:	b086      	sub	sp, #24
    696c:	af00      	add	r7, sp, #0
    696e:	60f8      	str	r0, [r7, #12]
    6970:	60b9      	str	r1, [r7, #8]
    6972:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6974:	68bb      	ldr	r3, [r7, #8]
    6976:	f003 0304 	and.w	r3, r3, #4
    697a:	2b00      	cmp	r3, #0
    697c:	d101      	bne.n	6982 <_spi_rx_check_and_receive+0x1a>
		return false;
    697e:	2300      	movs	r3, #0
    6980:	e022      	b.n	69c8 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6982:	68f8      	ldr	r0, [r7, #12]
    6984:	4b12      	ldr	r3, [pc, #72]	; (69d0 <_spi_rx_check_and_receive+0x68>)
    6986:	4798      	blx	r3
    6988:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	685b      	ldr	r3, [r3, #4]
    698e:	2b00      	cmp	r3, #0
    6990:	d014      	beq.n	69bc <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	685b      	ldr	r3, [r3, #4]
    6996:	1c59      	adds	r1, r3, #1
    6998:	687a      	ldr	r2, [r7, #4]
    699a:	6051      	str	r1, [r2, #4]
    699c:	697a      	ldr	r2, [r7, #20]
    699e:	b2d2      	uxtb	r2, r2
    69a0:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    69a2:	687b      	ldr	r3, [r7, #4]
    69a4:	7c1b      	ldrb	r3, [r3, #16]
    69a6:	2b01      	cmp	r3, #1
    69a8:	d908      	bls.n	69bc <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	685b      	ldr	r3, [r3, #4]
    69ae:	1c59      	adds	r1, r3, #1
    69b0:	687a      	ldr	r2, [r7, #4]
    69b2:	6051      	str	r1, [r2, #4]
    69b4:	697a      	ldr	r2, [r7, #20]
    69b6:	0a12      	lsrs	r2, r2, #8
    69b8:	b2d2      	uxtb	r2, r2
    69ba:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    69bc:	687b      	ldr	r3, [r7, #4]
    69be:	68db      	ldr	r3, [r3, #12]
    69c0:	1c5a      	adds	r2, r3, #1
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	60da      	str	r2, [r3, #12]

	return true;
    69c6:	2301      	movs	r3, #1
}
    69c8:	4618      	mov	r0, r3
    69ca:	3718      	adds	r7, #24
    69cc:	46bd      	mov	sp, r7
    69ce:	bd80      	pop	{r7, pc}
    69d0:	00005db5 	.word	0x00005db5

000069d4 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    69d4:	b580      	push	{r7, lr}
    69d6:	b086      	sub	sp, #24
    69d8:	af00      	add	r7, sp, #0
    69da:	60f8      	str	r0, [r7, #12]
    69dc:	60b9      	str	r1, [r7, #8]
    69de:	607a      	str	r2, [r7, #4]
    69e0:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    69e2:	68bb      	ldr	r3, [r7, #8]
    69e4:	f003 0301 	and.w	r3, r3, #1
    69e8:	2b00      	cmp	r3, #0
    69ea:	d028      	beq.n	6a3e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	2b00      	cmp	r3, #0
    69f2:	d018      	beq.n	6a26 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	681b      	ldr	r3, [r3, #0]
    69f8:	1c59      	adds	r1, r3, #1
    69fa:	687a      	ldr	r2, [r7, #4]
    69fc:	6011      	str	r1, [r2, #0]
    69fe:	781b      	ldrb	r3, [r3, #0]
    6a00:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6a02:	687b      	ldr	r3, [r7, #4]
    6a04:	7c1b      	ldrb	r3, [r3, #16]
    6a06:	2b01      	cmp	r3, #1
    6a08:	d90f      	bls.n	6a2a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6a0a:	687b      	ldr	r3, [r7, #4]
    6a0c:	681b      	ldr	r3, [r3, #0]
    6a0e:	781b      	ldrb	r3, [r3, #0]
    6a10:	021b      	lsls	r3, r3, #8
    6a12:	461a      	mov	r2, r3
    6a14:	697b      	ldr	r3, [r7, #20]
    6a16:	4313      	orrs	r3, r2
    6a18:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6a1a:	687b      	ldr	r3, [r7, #4]
    6a1c:	681b      	ldr	r3, [r3, #0]
    6a1e:	1c5a      	adds	r2, r3, #1
    6a20:	687b      	ldr	r3, [r7, #4]
    6a22:	601a      	str	r2, [r3, #0]
    6a24:	e001      	b.n	6a2a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6a26:	887b      	ldrh	r3, [r7, #2]
    6a28:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	689b      	ldr	r3, [r3, #8]
    6a2e:	1c5a      	adds	r2, r3, #1
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6a34:	6979      	ldr	r1, [r7, #20]
    6a36:	68f8      	ldr	r0, [r7, #12]
    6a38:	4b03      	ldr	r3, [pc, #12]	; (6a48 <_spi_tx_check_and_send+0x74>)
    6a3a:	4798      	blx	r3
    6a3c:	e000      	b.n	6a40 <_spi_tx_check_and_send+0x6c>
		return;
    6a3e:	bf00      	nop
}
    6a40:	3718      	adds	r7, #24
    6a42:	46bd      	mov	sp, r7
    6a44:	bd80      	pop	{r7, pc}
    6a46:	bf00      	nop
    6a48:	00005d99 	.word	0x00005d99

00006a4c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6a4c:	b580      	push	{r7, lr}
    6a4e:	b082      	sub	sp, #8
    6a50:	af00      	add	r7, sp, #0
    6a52:	6078      	str	r0, [r7, #4]
    6a54:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d00b      	beq.n	6a78 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6a60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6a64:	6838      	ldr	r0, [r7, #0]
    6a66:	4b07      	ldr	r3, [pc, #28]	; (6a84 <_spi_err_check+0x38>)
    6a68:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6a6a:	2180      	movs	r1, #128	; 0x80
    6a6c:	6838      	ldr	r0, [r7, #0]
    6a6e:	4b06      	ldr	r3, [pc, #24]	; (6a88 <_spi_err_check+0x3c>)
    6a70:	4798      	blx	r3
		return ERR_OVERFLOW;
    6a72:	f06f 0312 	mvn.w	r3, #18
    6a76:	e000      	b.n	6a7a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6a78:	2300      	movs	r3, #0
}
    6a7a:	4618      	mov	r0, r3
    6a7c:	3708      	adds	r7, #8
    6a7e:	46bd      	mov	sp, r7
    6a80:	bd80      	pop	{r7, pc}
    6a82:	bf00      	nop
    6a84:	00005ded 	.word	0x00005ded
    6a88:	000059b9 	.word	0x000059b9

00006a8c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6a8c:	b590      	push	{r4, r7, lr}
    6a8e:	b08b      	sub	sp, #44	; 0x2c
    6a90:	af00      	add	r7, sp, #0
    6a92:	6078      	str	r0, [r7, #4]
    6a94:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	681b      	ldr	r3, [r3, #0]
    6a9a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6a9c:	2300      	movs	r3, #0
    6a9e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6aa0:	683b      	ldr	r3, [r7, #0]
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	60bb      	str	r3, [r7, #8]
    6aa6:	683b      	ldr	r3, [r7, #0]
    6aa8:	685b      	ldr	r3, [r3, #4]
    6aaa:	60fb      	str	r3, [r7, #12]
    6aac:	2300      	movs	r3, #0
    6aae:	613b      	str	r3, [r7, #16]
    6ab0:	2300      	movs	r3, #0
    6ab2:	617b      	str	r3, [r7, #20]
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	791b      	ldrb	r3, [r3, #4]
    6ab8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d004      	beq.n	6aca <_spi_m_sync_trans+0x3e>
    6ac0:	6a3b      	ldr	r3, [r7, #32]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d001      	beq.n	6aca <_spi_m_sync_trans+0x3e>
    6ac6:	2301      	movs	r3, #1
    6ac8:	e000      	b.n	6acc <_spi_m_sync_trans+0x40>
    6aca:	2300      	movs	r3, #0
    6acc:	f003 0301 	and.w	r3, r3, #1
    6ad0:	b2db      	uxtb	r3, r3
    6ad2:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6ad6:	492b      	ldr	r1, [pc, #172]	; (6b84 <_spi_m_sync_trans+0xf8>)
    6ad8:	4618      	mov	r0, r3
    6ada:	4b2b      	ldr	r3, [pc, #172]	; (6b88 <_spi_m_sync_trans+0xfc>)
    6adc:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6ade:	2107      	movs	r1, #7
    6ae0:	6a38      	ldr	r0, [r7, #32]
    6ae2:	4b2a      	ldr	r3, [pc, #168]	; (6b8c <_spi_m_sync_trans+0x100>)
    6ae4:	4798      	blx	r3
    6ae6:	4603      	mov	r3, r0
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d002      	beq.n	6af2 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6aec:	f06f 0303 	mvn.w	r3, #3
    6af0:	e043      	b.n	6b7a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6af2:	6a38      	ldr	r0, [r7, #32]
    6af4:	4b26      	ldr	r3, [pc, #152]	; (6b90 <_spi_m_sync_trans+0x104>)
    6af6:	4798      	blx	r3
    6af8:	4603      	mov	r3, r0
    6afa:	f083 0301 	eor.w	r3, r3, #1
    6afe:	b2db      	uxtb	r3, r3
    6b00:	2b00      	cmp	r3, #0
    6b02:	d002      	beq.n	6b0a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6b04:	f06f 0313 	mvn.w	r3, #19
    6b08:	e037      	b.n	6b7a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6b0a:	6a38      	ldr	r0, [r7, #32]
    6b0c:	4b21      	ldr	r3, [pc, #132]	; (6b94 <_spi_m_sync_trans+0x108>)
    6b0e:	4798      	blx	r3
    6b10:	4603      	mov	r3, r0
    6b12:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6b14:	f107 0308 	add.w	r3, r7, #8
    6b18:	461a      	mov	r2, r3
    6b1a:	69f9      	ldr	r1, [r7, #28]
    6b1c:	6a38      	ldr	r0, [r7, #32]
    6b1e:	4b1e      	ldr	r3, [pc, #120]	; (6b98 <_spi_m_sync_trans+0x10c>)
    6b20:	4798      	blx	r3
    6b22:	4603      	mov	r3, r0
    6b24:	f083 0301 	eor.w	r3, r3, #1
    6b28:	b2db      	uxtb	r3, r3
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d00b      	beq.n	6b46 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6b2e:	697a      	ldr	r2, [r7, #20]
    6b30:	693b      	ldr	r3, [r7, #16]
    6b32:	429a      	cmp	r2, r3
    6b34:	d307      	bcc.n	6b46 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	88db      	ldrh	r3, [r3, #6]
    6b3a:	f107 0208 	add.w	r2, r7, #8
    6b3e:	69f9      	ldr	r1, [r7, #28]
    6b40:	6a38      	ldr	r0, [r7, #32]
    6b42:	4c16      	ldr	r4, [pc, #88]	; (6b9c <_spi_m_sync_trans+0x110>)
    6b44:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6b46:	6a39      	ldr	r1, [r7, #32]
    6b48:	69f8      	ldr	r0, [r7, #28]
    6b4a:	4b15      	ldr	r3, [pc, #84]	; (6ba0 <_spi_m_sync_trans+0x114>)
    6b4c:	4798      	blx	r3
    6b4e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b52:	2b00      	cmp	r3, #0
    6b54:	db0c      	blt.n	6b70 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6b56:	693a      	ldr	r2, [r7, #16]
    6b58:	683b      	ldr	r3, [r7, #0]
    6b5a:	689b      	ldr	r3, [r3, #8]
    6b5c:	429a      	cmp	r2, r3
    6b5e:	d3d4      	bcc.n	6b0a <_spi_m_sync_trans+0x7e>
    6b60:	697a      	ldr	r2, [r7, #20]
    6b62:	683b      	ldr	r3, [r7, #0]
    6b64:	689b      	ldr	r3, [r3, #8]
    6b66:	429a      	cmp	r2, r3
    6b68:	d3cf      	bcc.n	6b0a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6b6a:	693b      	ldr	r3, [r7, #16]
    6b6c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6b6e:	e000      	b.n	6b72 <_spi_m_sync_trans+0xe6>
			break;
    6b70:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6b72:	6a38      	ldr	r0, [r7, #32]
    6b74:	4b0b      	ldr	r3, [pc, #44]	; (6ba4 <_spi_m_sync_trans+0x118>)
    6b76:	4798      	blx	r3

	return rc;
    6b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6b7a:	4618      	mov	r0, r3
    6b7c:	372c      	adds	r7, #44	; 0x2c
    6b7e:	46bd      	mov	sp, r7
    6b80:	bd90      	pop	{r4, r7, pc}
    6b82:	bf00      	nop
    6b84:	00011380 	.word	0x00011380
    6b88:	0000337d 	.word	0x0000337d
    6b8c:	00005901 	.word	0x00005901
    6b90:	00005aad 	.word	0x00005aad
    6b94:	0000599f 	.word	0x0000599f
    6b98:	00006969 	.word	0x00006969
    6b9c:	000069d5 	.word	0x000069d5
    6ba0:	00006a4d 	.word	0x00006a4d
    6ba4:	00006939 	.word	0x00006939

00006ba8 <__NVIC_EnableIRQ>:
{
    6ba8:	b480      	push	{r7}
    6baa:	b083      	sub	sp, #12
    6bac:	af00      	add	r7, sp, #0
    6bae:	4603      	mov	r3, r0
    6bb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	db0b      	blt.n	6bd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bba:	4909      	ldr	r1, [pc, #36]	; (6be0 <__NVIC_EnableIRQ+0x38>)
    6bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bc0:	095b      	lsrs	r3, r3, #5
    6bc2:	88fa      	ldrh	r2, [r7, #6]
    6bc4:	f002 021f 	and.w	r2, r2, #31
    6bc8:	2001      	movs	r0, #1
    6bca:	fa00 f202 	lsl.w	r2, r0, r2
    6bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bd2:	bf00      	nop
    6bd4:	370c      	adds	r7, #12
    6bd6:	46bd      	mov	sp, r7
    6bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bdc:	4770      	bx	lr
    6bde:	bf00      	nop
    6be0:	e000e100 	.word	0xe000e100

00006be4 <__NVIC_DisableIRQ>:
{
    6be4:	b480      	push	{r7}
    6be6:	b083      	sub	sp, #12
    6be8:	af00      	add	r7, sp, #0
    6bea:	4603      	mov	r3, r0
    6bec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	db10      	blt.n	6c18 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bf6:	490b      	ldr	r1, [pc, #44]	; (6c24 <__NVIC_DisableIRQ+0x40>)
    6bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bfc:	095b      	lsrs	r3, r3, #5
    6bfe:	88fa      	ldrh	r2, [r7, #6]
    6c00:	f002 021f 	and.w	r2, r2, #31
    6c04:	2001      	movs	r0, #1
    6c06:	fa00 f202 	lsl.w	r2, r0, r2
    6c0a:	3320      	adds	r3, #32
    6c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c14:	f3bf 8f6f 	isb	sy
}
    6c18:	bf00      	nop
    6c1a:	370c      	adds	r7, #12
    6c1c:	46bd      	mov	sp, r7
    6c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c22:	4770      	bx	lr
    6c24:	e000e100 	.word	0xe000e100

00006c28 <__NVIC_ClearPendingIRQ>:
{
    6c28:	b480      	push	{r7}
    6c2a:	b083      	sub	sp, #12
    6c2c:	af00      	add	r7, sp, #0
    6c2e:	4603      	mov	r3, r0
    6c30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c36:	2b00      	cmp	r3, #0
    6c38:	db0c      	blt.n	6c54 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c3a:	4909      	ldr	r1, [pc, #36]	; (6c60 <__NVIC_ClearPendingIRQ+0x38>)
    6c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c40:	095b      	lsrs	r3, r3, #5
    6c42:	88fa      	ldrh	r2, [r7, #6]
    6c44:	f002 021f 	and.w	r2, r2, #31
    6c48:	2001      	movs	r0, #1
    6c4a:	fa00 f202 	lsl.w	r2, r0, r2
    6c4e:	3360      	adds	r3, #96	; 0x60
    6c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c54:	bf00      	nop
    6c56:	370c      	adds	r7, #12
    6c58:	46bd      	mov	sp, r7
    6c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c5e:	4770      	bx	lr
    6c60:	e000e100 	.word	0xe000e100

00006c64 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6c64:	b480      	push	{r7}
    6c66:	b083      	sub	sp, #12
    6c68:	af00      	add	r7, sp, #0
    6c6a:	6078      	str	r0, [r7, #4]
    6c6c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6c6e:	bf00      	nop
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	689a      	ldr	r2, [r3, #8]
    6c74:	683b      	ldr	r3, [r7, #0]
    6c76:	4013      	ands	r3, r2
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d1f9      	bne.n	6c70 <hri_tcc_wait_for_sync+0xc>
	};
}
    6c7c:	bf00      	nop
    6c7e:	370c      	adds	r7, #12
    6c80:	46bd      	mov	sp, r7
    6c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c86:	4770      	bx	lr

00006c88 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6c88:	b480      	push	{r7}
    6c8a:	b083      	sub	sp, #12
    6c8c:	af00      	add	r7, sp, #0
    6c8e:	6078      	str	r0, [r7, #4]
    6c90:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	689a      	ldr	r2, [r3, #8]
    6c96:	683b      	ldr	r3, [r7, #0]
    6c98:	4013      	ands	r3, r2
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	bf14      	ite	ne
    6c9e:	2301      	movne	r3, #1
    6ca0:	2300      	moveq	r3, #0
    6ca2:	b2db      	uxtb	r3, r3
}
    6ca4:	4618      	mov	r0, r3
    6ca6:	370c      	adds	r7, #12
    6ca8:	46bd      	mov	sp, r7
    6caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cae:	4770      	bx	lr

00006cb0 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6cb0:	b480      	push	{r7}
    6cb2:	b083      	sub	sp, #12
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6cbc:	f003 0301 	and.w	r3, r3, #1
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	bf14      	ite	ne
    6cc4:	2301      	movne	r3, #1
    6cc6:	2300      	moveq	r3, #0
    6cc8:	b2db      	uxtb	r3, r3
}
    6cca:	4618      	mov	r0, r3
    6ccc:	370c      	adds	r7, #12
    6cce:	46bd      	mov	sp, r7
    6cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cd4:	4770      	bx	lr

00006cd6 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6cd6:	b480      	push	{r7}
    6cd8:	b083      	sub	sp, #12
    6cda:	af00      	add	r7, sp, #0
    6cdc:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	2201      	movs	r2, #1
    6ce2:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6ce4:	bf00      	nop
    6ce6:	370c      	adds	r7, #12
    6ce8:	46bd      	mov	sp, r7
    6cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cee:	4770      	bx	lr

00006cf0 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6cf0:	b480      	push	{r7}
    6cf2:	b083      	sub	sp, #12
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	6078      	str	r0, [r7, #4]
    6cf8:	460b      	mov	r3, r1
    6cfa:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6cfc:	687b      	ldr	r3, [r7, #4]
    6cfe:	78fa      	ldrb	r2, [r7, #3]
    6d00:	715a      	strb	r2, [r3, #5]
}
    6d02:	bf00      	nop
    6d04:	370c      	adds	r7, #12
    6d06:	46bd      	mov	sp, r7
    6d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d0c:	4770      	bx	lr

00006d0e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6d0e:	b480      	push	{r7}
    6d10:	b083      	sub	sp, #12
    6d12:	af00      	add	r7, sp, #0
    6d14:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	2201      	movs	r2, #1
    6d1a:	629a      	str	r2, [r3, #40]	; 0x28
}
    6d1c:	bf00      	nop
    6d1e:	370c      	adds	r7, #12
    6d20:	46bd      	mov	sp, r7
    6d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d26:	4770      	bx	lr

00006d28 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6d28:	b580      	push	{r7, lr}
    6d2a:	b082      	sub	sp, #8
    6d2c:	af00      	add	r7, sp, #0
    6d2e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6d30:	687b      	ldr	r3, [r7, #4]
    6d32:	681b      	ldr	r3, [r3, #0]
    6d34:	f043 0201 	orr.w	r2, r3, #1
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6d3c:	2101      	movs	r1, #1
    6d3e:	6878      	ldr	r0, [r7, #4]
    6d40:	4b02      	ldr	r3, [pc, #8]	; (6d4c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6d42:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6d44:	bf00      	nop
    6d46:	3708      	adds	r7, #8
    6d48:	46bd      	mov	sp, r7
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	00006c65 	.word	0x00006c65

00006d50 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6d50:	b580      	push	{r7, lr}
    6d52:	b082      	sub	sp, #8
    6d54:	af00      	add	r7, sp, #0
    6d56:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	681b      	ldr	r3, [r3, #0]
    6d5c:	f043 0202 	orr.w	r2, r3, #2
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6d64:	2103      	movs	r1, #3
    6d66:	6878      	ldr	r0, [r7, #4]
    6d68:	4b02      	ldr	r3, [pc, #8]	; (6d74 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6d6a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6d6c:	bf00      	nop
    6d6e:	3708      	adds	r7, #8
    6d70:	46bd      	mov	sp, r7
    6d72:	bd80      	pop	{r7, pc}
    6d74:	00006c65 	.word	0x00006c65

00006d78 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b084      	sub	sp, #16
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6d80:	2103      	movs	r1, #3
    6d82:	6878      	ldr	r0, [r7, #4]
    6d84:	4b09      	ldr	r3, [pc, #36]	; (6dac <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6d86:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	681b      	ldr	r3, [r3, #0]
    6d8c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6d8e:	68fb      	ldr	r3, [r7, #12]
    6d90:	085b      	lsrs	r3, r3, #1
    6d92:	f003 0301 	and.w	r3, r3, #1
    6d96:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6d98:	68fb      	ldr	r3, [r7, #12]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	bf14      	ite	ne
    6d9e:	2301      	movne	r3, #1
    6da0:	2300      	moveq	r3, #0
    6da2:	b2db      	uxtb	r3, r3
}
    6da4:	4618      	mov	r0, r3
    6da6:	3710      	adds	r7, #16
    6da8:	46bd      	mov	sp, r7
    6daa:	bd80      	pop	{r7, pc}
    6dac:	00006c65 	.word	0x00006c65

00006db0 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6db0:	b580      	push	{r7, lr}
    6db2:	b082      	sub	sp, #8
    6db4:	af00      	add	r7, sp, #0
    6db6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	f023 0202 	bic.w	r2, r3, #2
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6dc4:	2103      	movs	r1, #3
    6dc6:	6878      	ldr	r0, [r7, #4]
    6dc8:	4b02      	ldr	r3, [pc, #8]	; (6dd4 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    6dca:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6dcc:	bf00      	nop
    6dce:	3708      	adds	r7, #8
    6dd0:	46bd      	mov	sp, r7
    6dd2:	bd80      	pop	{r7, pc}
    6dd4:	00006c65 	.word	0x00006c65

00006dd8 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	b084      	sub	sp, #16
    6ddc:	af00      	add	r7, sp, #0
    6dde:	6078      	str	r0, [r7, #4]
    6de0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6de2:	2103      	movs	r1, #3
    6de4:	6878      	ldr	r0, [r7, #4]
    6de6:	4b07      	ldr	r3, [pc, #28]	; (6e04 <hri_tcc_get_CTRLA_reg+0x2c>)
    6de8:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6df0:	68fa      	ldr	r2, [r7, #12]
    6df2:	683b      	ldr	r3, [r7, #0]
    6df4:	4013      	ands	r3, r2
    6df6:	60fb      	str	r3, [r7, #12]
	return tmp;
    6df8:	68fb      	ldr	r3, [r7, #12]
}
    6dfa:	4618      	mov	r0, r3
    6dfc:	3710      	adds	r7, #16
    6dfe:	46bd      	mov	sp, r7
    6e00:	bd80      	pop	{r7, pc}
    6e02:	bf00      	nop
    6e04:	00006c65 	.word	0x00006c65

00006e08 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	b082      	sub	sp, #8
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	6078      	str	r0, [r7, #4]
    6e10:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	683a      	ldr	r2, [r7, #0]
    6e16:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6e18:	2103      	movs	r1, #3
    6e1a:	6878      	ldr	r0, [r7, #4]
    6e1c:	4b02      	ldr	r3, [pc, #8]	; (6e28 <hri_tcc_write_CTRLA_reg+0x20>)
    6e1e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e20:	bf00      	nop
    6e22:	3708      	adds	r7, #8
    6e24:	46bd      	mov	sp, r7
    6e26:	bd80      	pop	{r7, pc}
    6e28:	00006c65 	.word	0x00006c65

00006e2c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6e2c:	b480      	push	{r7}
    6e2e:	b083      	sub	sp, #12
    6e30:	af00      	add	r7, sp, #0
    6e32:	6078      	str	r0, [r7, #4]
    6e34:	460b      	mov	r3, r1
    6e36:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	78fa      	ldrb	r2, [r7, #3]
    6e3c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e3e:	bf00      	nop
    6e40:	370c      	adds	r7, #12
    6e42:	46bd      	mov	sp, r7
    6e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e48:	4770      	bx	lr

00006e4a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    6e4a:	b480      	push	{r7}
    6e4c:	b083      	sub	sp, #12
    6e4e:	af00      	add	r7, sp, #0
    6e50:	6078      	str	r0, [r7, #4]
    6e52:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	683a      	ldr	r2, [r7, #0]
    6e58:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e5a:	bf00      	nop
    6e5c:	370c      	adds	r7, #12
    6e5e:	46bd      	mov	sp, r7
    6e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e64:	4770      	bx	lr
	...

00006e68 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    6e68:	b580      	push	{r7, lr}
    6e6a:	b082      	sub	sp, #8
    6e6c:	af00      	add	r7, sp, #0
    6e6e:	6078      	str	r0, [r7, #4]
    6e70:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	683a      	ldr	r2, [r7, #0]
    6e76:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6e78:	2180      	movs	r1, #128	; 0x80
    6e7a:	6878      	ldr	r0, [r7, #4]
    6e7c:	4b02      	ldr	r3, [pc, #8]	; (6e88 <hri_tcc_write_PER_reg+0x20>)
    6e7e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e80:	bf00      	nop
    6e82:	3708      	adds	r7, #8
    6e84:	46bd      	mov	sp, r7
    6e86:	bd80      	pop	{r7, pc}
    6e88:	00006c65 	.word	0x00006c65

00006e8c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6e8c:	b580      	push	{r7, lr}
    6e8e:	b082      	sub	sp, #8
    6e90:	af00      	add	r7, sp, #0
    6e92:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6e94:	2180      	movs	r1, #128	; 0x80
    6e96:	6878      	ldr	r0, [r7, #4]
    6e98:	4b03      	ldr	r3, [pc, #12]	; (6ea8 <hri_tcc_read_PER_reg+0x1c>)
    6e9a:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6e9c:	687b      	ldr	r3, [r7, #4]
    6e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6ea0:	4618      	mov	r0, r3
    6ea2:	3708      	adds	r7, #8
    6ea4:	46bd      	mov	sp, r7
    6ea6:	bd80      	pop	{r7, pc}
    6ea8:	00006c65 	.word	0x00006c65

00006eac <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6eac:	b480      	push	{r7}
    6eae:	b083      	sub	sp, #12
    6eb0:	af00      	add	r7, sp, #0
    6eb2:	6078      	str	r0, [r7, #4]
    6eb4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	4a0c      	ldr	r2, [pc, #48]	; (6eec <_tcc_init_irq_param+0x40>)
    6eba:	4293      	cmp	r3, r2
    6ebc:	d102      	bne.n	6ec4 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6ebe:	4a0c      	ldr	r2, [pc, #48]	; (6ef0 <_tcc_init_irq_param+0x44>)
    6ec0:	683b      	ldr	r3, [r7, #0]
    6ec2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	4a0b      	ldr	r2, [pc, #44]	; (6ef4 <_tcc_init_irq_param+0x48>)
    6ec8:	4293      	cmp	r3, r2
    6eca:	d102      	bne.n	6ed2 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6ecc:	4a0a      	ldr	r2, [pc, #40]	; (6ef8 <_tcc_init_irq_param+0x4c>)
    6ece:	683b      	ldr	r3, [r7, #0]
    6ed0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	4a09      	ldr	r2, [pc, #36]	; (6efc <_tcc_init_irq_param+0x50>)
    6ed6:	4293      	cmp	r3, r2
    6ed8:	d102      	bne.n	6ee0 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    6eda:	4a09      	ldr	r2, [pc, #36]	; (6f00 <_tcc_init_irq_param+0x54>)
    6edc:	683b      	ldr	r3, [r7, #0]
    6ede:	6013      	str	r3, [r2, #0]
	}
}
    6ee0:	bf00      	nop
    6ee2:	370c      	adds	r7, #12
    6ee4:	46bd      	mov	sp, r7
    6ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eea:	4770      	bx	lr
    6eec:	41016000 	.word	0x41016000
    6ef0:	20000b2c 	.word	0x20000b2c
    6ef4:	41018000 	.word	0x41018000
    6ef8:	20000b30 	.word	0x20000b30
    6efc:	42000c00 	.word	0x42000c00
    6f00:	20000b34 	.word	0x20000b34

00006f04 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    6f04:	b580      	push	{r7, lr}
    6f06:	b084      	sub	sp, #16
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
    6f0c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6f0e:	6838      	ldr	r0, [r7, #0]
    6f10:	4b33      	ldr	r3, [pc, #204]	; (6fe0 <_tcc_timer_init+0xdc>)
    6f12:	4798      	blx	r3
    6f14:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    6f16:	68fb      	ldr	r3, [r7, #12]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d102      	bne.n	6f22 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    6f1c:	f06f 0309 	mvn.w	r3, #9
    6f20:	e05a      	b.n	6fd8 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    6f22:	687b      	ldr	r3, [r7, #4]
    6f24:	683a      	ldr	r2, [r7, #0]
    6f26:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    6f28:	2101      	movs	r1, #1
    6f2a:	6838      	ldr	r0, [r7, #0]
    6f2c:	4b2d      	ldr	r3, [pc, #180]	; (6fe4 <_tcc_timer_init+0xe0>)
    6f2e:	4798      	blx	r3
    6f30:	4603      	mov	r3, r0
    6f32:	f083 0301 	eor.w	r3, r3, #1
    6f36:	b2db      	uxtb	r3, r3
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d011      	beq.n	6f60 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    6f3c:	2102      	movs	r1, #2
    6f3e:	6838      	ldr	r0, [r7, #0]
    6f40:	4b29      	ldr	r3, [pc, #164]	; (6fe8 <_tcc_timer_init+0xe4>)
    6f42:	4798      	blx	r3
    6f44:	4603      	mov	r3, r0
    6f46:	2b00      	cmp	r3, #0
    6f48:	d006      	beq.n	6f58 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6f4a:	6838      	ldr	r0, [r7, #0]
    6f4c:	4b27      	ldr	r3, [pc, #156]	; (6fec <_tcc_timer_init+0xe8>)
    6f4e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    6f50:	2102      	movs	r1, #2
    6f52:	6838      	ldr	r0, [r7, #0]
    6f54:	4b26      	ldr	r3, [pc, #152]	; (6ff0 <_tcc_timer_init+0xec>)
    6f56:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    6f58:	2101      	movs	r1, #1
    6f5a:	6838      	ldr	r0, [r7, #0]
    6f5c:	4b25      	ldr	r3, [pc, #148]	; (6ff4 <_tcc_timer_init+0xf0>)
    6f5e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6f60:	2101      	movs	r1, #1
    6f62:	6838      	ldr	r0, [r7, #0]
    6f64:	4b22      	ldr	r3, [pc, #136]	; (6ff0 <_tcc_timer_init+0xec>)
    6f66:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    6f68:	68fb      	ldr	r3, [r7, #12]
    6f6a:	689b      	ldr	r3, [r3, #8]
    6f6c:	4619      	mov	r1, r3
    6f6e:	6838      	ldr	r0, [r7, #0]
    6f70:	4b20      	ldr	r3, [pc, #128]	; (6ff4 <_tcc_timer_init+0xf0>)
    6f72:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    6f74:	68fb      	ldr	r3, [r7, #12]
    6f76:	7b1b      	ldrb	r3, [r3, #12]
    6f78:	4619      	mov	r1, r3
    6f7a:	6838      	ldr	r0, [r7, #0]
    6f7c:	4b1e      	ldr	r3, [pc, #120]	; (6ff8 <_tcc_timer_init+0xf4>)
    6f7e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    6f80:	68fb      	ldr	r3, [r7, #12]
    6f82:	7b5b      	ldrb	r3, [r3, #13]
    6f84:	4619      	mov	r1, r3
    6f86:	6838      	ldr	r0, [r7, #0]
    6f88:	4b1c      	ldr	r3, [pc, #112]	; (6ffc <_tcc_timer_init+0xf8>)
    6f8a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	691b      	ldr	r3, [r3, #16]
    6f90:	4619      	mov	r1, r3
    6f92:	6838      	ldr	r0, [r7, #0]
    6f94:	4b1a      	ldr	r3, [pc, #104]	; (7000 <_tcc_timer_init+0xfc>)
    6f96:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    6f98:	68fb      	ldr	r3, [r7, #12]
    6f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6f9c:	4619      	mov	r1, r3
    6f9e:	6838      	ldr	r0, [r7, #0]
    6fa0:	4b18      	ldr	r3, [pc, #96]	; (7004 <_tcc_timer_init+0x100>)
    6fa2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    6fa4:	6838      	ldr	r0, [r7, #0]
    6fa6:	4b18      	ldr	r3, [pc, #96]	; (7008 <_tcc_timer_init+0x104>)
    6fa8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    6faa:	6879      	ldr	r1, [r7, #4]
    6fac:	6838      	ldr	r0, [r7, #0]
    6fae:	4b17      	ldr	r3, [pc, #92]	; (700c <_tcc_timer_init+0x108>)
    6fb0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6fb2:	68fb      	ldr	r3, [r7, #12]
    6fb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6fb8:	4618      	mov	r0, r3
    6fba:	4b15      	ldr	r3, [pc, #84]	; (7010 <_tcc_timer_init+0x10c>)
    6fbc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    6fbe:	68fb      	ldr	r3, [r7, #12]
    6fc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6fc4:	4618      	mov	r0, r3
    6fc6:	4b13      	ldr	r3, [pc, #76]	; (7014 <_tcc_timer_init+0x110>)
    6fc8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    6fca:	68fb      	ldr	r3, [r7, #12]
    6fcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6fd0:	4618      	mov	r0, r3
    6fd2:	4b11      	ldr	r3, [pc, #68]	; (7018 <_tcc_timer_init+0x114>)
    6fd4:	4798      	blx	r3

	return ERR_NONE;
    6fd6:	2300      	movs	r3, #0
}
    6fd8:	4618      	mov	r0, r3
    6fda:	3710      	adds	r7, #16
    6fdc:	46bd      	mov	sp, r7
    6fde:	bd80      	pop	{r7, pc}
    6fe0:	000071e9 	.word	0x000071e9
    6fe4:	00006c89 	.word	0x00006c89
    6fe8:	00006dd9 	.word	0x00006dd9
    6fec:	00006db1 	.word	0x00006db1
    6ff0:	00006c65 	.word	0x00006c65
    6ff4:	00006e09 	.word	0x00006e09
    6ff8:	00006cf1 	.word	0x00006cf1
    6ffc:	00006e2d 	.word	0x00006e2d
    7000:	00006e4b 	.word	0x00006e4b
    7004:	00006e69 	.word	0x00006e69
    7008:	00006d0f 	.word	0x00006d0f
    700c:	00006ead 	.word	0x00006ead
    7010:	00006be5 	.word	0x00006be5
    7014:	00006c29 	.word	0x00006c29
    7018:	00006ba9 	.word	0x00006ba9

0000701c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    701c:	b580      	push	{r7, lr}
    701e:	b084      	sub	sp, #16
    7020:	af00      	add	r7, sp, #0
    7022:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	68db      	ldr	r3, [r3, #12]
    7028:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    702a:	68f8      	ldr	r0, [r7, #12]
    702c:	4b0a      	ldr	r3, [pc, #40]	; (7058 <_tcc_timer_deinit+0x3c>)
    702e:	4798      	blx	r3
    7030:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7032:	68bb      	ldr	r3, [r7, #8]
    7034:	2b00      	cmp	r3, #0
    7036:	d00b      	beq.n	7050 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7038:	68bb      	ldr	r3, [r7, #8]
    703a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    703e:	4618      	mov	r0, r3
    7040:	4b06      	ldr	r3, [pc, #24]	; (705c <_tcc_timer_deinit+0x40>)
    7042:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7044:	68f8      	ldr	r0, [r7, #12]
    7046:	4b06      	ldr	r3, [pc, #24]	; (7060 <_tcc_timer_deinit+0x44>)
    7048:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    704a:	68f8      	ldr	r0, [r7, #12]
    704c:	4b05      	ldr	r3, [pc, #20]	; (7064 <_tcc_timer_deinit+0x48>)
    704e:	4798      	blx	r3
	}
}
    7050:	bf00      	nop
    7052:	3710      	adds	r7, #16
    7054:	46bd      	mov	sp, r7
    7056:	bd80      	pop	{r7, pc}
    7058:	000071e9 	.word	0x000071e9
    705c:	00006be5 	.word	0x00006be5
    7060:	00006db1 	.word	0x00006db1
    7064:	00006d29 	.word	0x00006d29

00007068 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7068:	b580      	push	{r7, lr}
    706a:	b082      	sub	sp, #8
    706c:	af00      	add	r7, sp, #0
    706e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	68db      	ldr	r3, [r3, #12]
    7074:	4618      	mov	r0, r3
    7076:	4b03      	ldr	r3, [pc, #12]	; (7084 <_tcc_timer_start+0x1c>)
    7078:	4798      	blx	r3
}
    707a:	bf00      	nop
    707c:	3708      	adds	r7, #8
    707e:	46bd      	mov	sp, r7
    7080:	bd80      	pop	{r7, pc}
    7082:	bf00      	nop
    7084:	00006d51 	.word	0x00006d51

00007088 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7088:	b580      	push	{r7, lr}
    708a:	b082      	sub	sp, #8
    708c:	af00      	add	r7, sp, #0
    708e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	68db      	ldr	r3, [r3, #12]
    7094:	4618      	mov	r0, r3
    7096:	4b03      	ldr	r3, [pc, #12]	; (70a4 <_tcc_timer_stop+0x1c>)
    7098:	4798      	blx	r3
}
    709a:	bf00      	nop
    709c:	3708      	adds	r7, #8
    709e:	46bd      	mov	sp, r7
    70a0:	bd80      	pop	{r7, pc}
    70a2:	bf00      	nop
    70a4:	00006db1 	.word	0x00006db1

000070a8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    70a8:	b580      	push	{r7, lr}
    70aa:	b082      	sub	sp, #8
    70ac:	af00      	add	r7, sp, #0
    70ae:	6078      	str	r0, [r7, #4]
    70b0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    70b2:	687b      	ldr	r3, [r7, #4]
    70b4:	68db      	ldr	r3, [r3, #12]
    70b6:	6839      	ldr	r1, [r7, #0]
    70b8:	4618      	mov	r0, r3
    70ba:	4b03      	ldr	r3, [pc, #12]	; (70c8 <_tcc_timer_set_period+0x20>)
    70bc:	4798      	blx	r3
}
    70be:	bf00      	nop
    70c0:	3708      	adds	r7, #8
    70c2:	46bd      	mov	sp, r7
    70c4:	bd80      	pop	{r7, pc}
    70c6:	bf00      	nop
    70c8:	00006e69 	.word	0x00006e69

000070cc <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    70cc:	b580      	push	{r7, lr}
    70ce:	b082      	sub	sp, #8
    70d0:	af00      	add	r7, sp, #0
    70d2:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	68db      	ldr	r3, [r3, #12]
    70d8:	4618      	mov	r0, r3
    70da:	4b03      	ldr	r3, [pc, #12]	; (70e8 <_tcc_timer_get_period+0x1c>)
    70dc:	4798      	blx	r3
    70de:	4603      	mov	r3, r0
}
    70e0:	4618      	mov	r0, r3
    70e2:	3708      	adds	r7, #8
    70e4:	46bd      	mov	sp, r7
    70e6:	bd80      	pop	{r7, pc}
    70e8:	00006e8d 	.word	0x00006e8d

000070ec <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    70ec:	b580      	push	{r7, lr}
    70ee:	b082      	sub	sp, #8
    70f0:	af00      	add	r7, sp, #0
    70f2:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	68db      	ldr	r3, [r3, #12]
    70f8:	4618      	mov	r0, r3
    70fa:	4b03      	ldr	r3, [pc, #12]	; (7108 <_tcc_timer_is_started+0x1c>)
    70fc:	4798      	blx	r3
    70fe:	4603      	mov	r3, r0
}
    7100:	4618      	mov	r0, r3
    7102:	3708      	adds	r7, #8
    7104:	46bd      	mov	sp, r7
    7106:	bd80      	pop	{r7, pc}
    7108:	00006d79 	.word	0x00006d79

0000710c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    710c:	b480      	push	{r7}
    710e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7110:	4b02      	ldr	r3, [pc, #8]	; (711c <_tcc_get_timer+0x10>)
}
    7112:	4618      	mov	r0, r3
    7114:	46bd      	mov	sp, r7
    7116:	f85d 7b04 	ldr.w	r7, [sp], #4
    711a:	4770      	bx	lr
    711c:	200000f0 	.word	0x200000f0

00007120 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7120:	b580      	push	{r7, lr}
    7122:	b084      	sub	sp, #16
    7124:	af00      	add	r7, sp, #0
    7126:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7128:	687b      	ldr	r3, [r7, #4]
    712a:	68db      	ldr	r3, [r3, #12]
    712c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    712e:	68f8      	ldr	r0, [r7, #12]
    7130:	4b08      	ldr	r3, [pc, #32]	; (7154 <_tcc_timer_set_irq+0x34>)
    7132:	4798      	blx	r3
    7134:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7136:	68bb      	ldr	r3, [r7, #8]
    7138:	2b00      	cmp	r3, #0
    713a:	d006      	beq.n	714a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    713c:	68bb      	ldr	r3, [r7, #8]
    713e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7142:	b2db      	uxtb	r3, r3
    7144:	4618      	mov	r0, r3
    7146:	4b04      	ldr	r3, [pc, #16]	; (7158 <_tcc_timer_set_irq+0x38>)
    7148:	4798      	blx	r3
	}
}
    714a:	bf00      	nop
    714c:	3710      	adds	r7, #16
    714e:	46bd      	mov	sp, r7
    7150:	bd80      	pop	{r7, pc}
    7152:	bf00      	nop
    7154:	000071e9 	.word	0x000071e9
    7158:	00003bc5 	.word	0x00003bc5

0000715c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    715c:	b580      	push	{r7, lr}
    715e:	b084      	sub	sp, #16
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	68db      	ldr	r3, [r3, #12]
    7168:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    716a:	68f8      	ldr	r0, [r7, #12]
    716c:	4b07      	ldr	r3, [pc, #28]	; (718c <tcc_interrupt_handler+0x30>)
    716e:	4798      	blx	r3
    7170:	4603      	mov	r3, r0
    7172:	2b00      	cmp	r3, #0
    7174:	d006      	beq.n	7184 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7176:	68f8      	ldr	r0, [r7, #12]
    7178:	4b05      	ldr	r3, [pc, #20]	; (7190 <tcc_interrupt_handler+0x34>)
    717a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    717c:	687b      	ldr	r3, [r7, #4]
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	6878      	ldr	r0, [r7, #4]
    7182:	4798      	blx	r3
	}
}
    7184:	bf00      	nop
    7186:	3710      	adds	r7, #16
    7188:	46bd      	mov	sp, r7
    718a:	bd80      	pop	{r7, pc}
    718c:	00006cb1 	.word	0x00006cb1
    7190:	00006cd7 	.word	0x00006cd7

00007194 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7194:	b580      	push	{r7, lr}
    7196:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7198:	4b03      	ldr	r3, [pc, #12]	; (71a8 <TCC0_0_Handler+0x14>)
    719a:	681b      	ldr	r3, [r3, #0]
    719c:	4618      	mov	r0, r3
    719e:	4b03      	ldr	r3, [pc, #12]	; (71ac <TCC0_0_Handler+0x18>)
    71a0:	4798      	blx	r3
}
    71a2:	bf00      	nop
    71a4:	bd80      	pop	{r7, pc}
    71a6:	bf00      	nop
    71a8:	20000b2c 	.word	0x20000b2c
    71ac:	0000715d 	.word	0x0000715d

000071b0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    71b0:	b580      	push	{r7, lr}
    71b2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    71b4:	4b03      	ldr	r3, [pc, #12]	; (71c4 <TCC1_0_Handler+0x14>)
    71b6:	681b      	ldr	r3, [r3, #0]
    71b8:	4618      	mov	r0, r3
    71ba:	4b03      	ldr	r3, [pc, #12]	; (71c8 <TCC1_0_Handler+0x18>)
    71bc:	4798      	blx	r3
}
    71be:	bf00      	nop
    71c0:	bd80      	pop	{r7, pc}
    71c2:	bf00      	nop
    71c4:	20000b30 	.word	0x20000b30
    71c8:	0000715d 	.word	0x0000715d

000071cc <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    71cc:	b580      	push	{r7, lr}
    71ce:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    71d0:	4b03      	ldr	r3, [pc, #12]	; (71e0 <TCC2_0_Handler+0x14>)
    71d2:	681b      	ldr	r3, [r3, #0]
    71d4:	4618      	mov	r0, r3
    71d6:	4b03      	ldr	r3, [pc, #12]	; (71e4 <TCC2_0_Handler+0x18>)
    71d8:	4798      	blx	r3
}
    71da:	bf00      	nop
    71dc:	bd80      	pop	{r7, pc}
    71de:	bf00      	nop
    71e0:	20000b34 	.word	0x20000b34
    71e4:	0000715d 	.word	0x0000715d

000071e8 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    71e8:	b480      	push	{r7}
    71ea:	b085      	sub	sp, #20
    71ec:	af00      	add	r7, sp, #0
    71ee:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    71f0:	2300      	movs	r3, #0
    71f2:	73fb      	strb	r3, [r7, #15]
    71f4:	e015      	b.n	7222 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    71f6:	7bfa      	ldrb	r2, [r7, #15]
    71f8:	490f      	ldr	r1, [pc, #60]	; (7238 <_get_tcc_cfg+0x50>)
    71fa:	4613      	mov	r3, r2
    71fc:	005b      	lsls	r3, r3, #1
    71fe:	4413      	add	r3, r2
    7200:	011b      	lsls	r3, r3, #4
    7202:	440b      	add	r3, r1
    7204:	681a      	ldr	r2, [r3, #0]
    7206:	687b      	ldr	r3, [r7, #4]
    7208:	429a      	cmp	r2, r3
    720a:	d107      	bne.n	721c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    720c:	7bfa      	ldrb	r2, [r7, #15]
    720e:	4613      	mov	r3, r2
    7210:	005b      	lsls	r3, r3, #1
    7212:	4413      	add	r3, r2
    7214:	011b      	lsls	r3, r3, #4
    7216:	4a08      	ldr	r2, [pc, #32]	; (7238 <_get_tcc_cfg+0x50>)
    7218:	4413      	add	r3, r2
    721a:	e006      	b.n	722a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    721c:	7bfb      	ldrb	r3, [r7, #15]
    721e:	3301      	adds	r3, #1
    7220:	73fb      	strb	r3, [r7, #15]
    7222:	7bfb      	ldrb	r3, [r7, #15]
    7224:	2b02      	cmp	r3, #2
    7226:	d9e6      	bls.n	71f6 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7228:	2300      	movs	r3, #0
}
    722a:	4618      	mov	r0, r3
    722c:	3714      	adds	r7, #20
    722e:	46bd      	mov	sp, r7
    7230:	f85d 7b04 	ldr.w	r7, [sp], #4
    7234:	4770      	bx	lr
    7236:	bf00      	nop
    7238:	20000060 	.word	0x20000060

0000723c <__NVIC_EnableIRQ>:
{
    723c:	b480      	push	{r7}
    723e:	b083      	sub	sp, #12
    7240:	af00      	add	r7, sp, #0
    7242:	4603      	mov	r3, r0
    7244:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    724a:	2b00      	cmp	r3, #0
    724c:	db0b      	blt.n	7266 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    724e:	4909      	ldr	r1, [pc, #36]	; (7274 <__NVIC_EnableIRQ+0x38>)
    7250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7254:	095b      	lsrs	r3, r3, #5
    7256:	88fa      	ldrh	r2, [r7, #6]
    7258:	f002 021f 	and.w	r2, r2, #31
    725c:	2001      	movs	r0, #1
    725e:	fa00 f202 	lsl.w	r2, r0, r2
    7262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7266:	bf00      	nop
    7268:	370c      	adds	r7, #12
    726a:	46bd      	mov	sp, r7
    726c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7270:	4770      	bx	lr
    7272:	bf00      	nop
    7274:	e000e100 	.word	0xe000e100

00007278 <__NVIC_DisableIRQ>:
{
    7278:	b480      	push	{r7}
    727a:	b083      	sub	sp, #12
    727c:	af00      	add	r7, sp, #0
    727e:	4603      	mov	r3, r0
    7280:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7286:	2b00      	cmp	r3, #0
    7288:	db10      	blt.n	72ac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    728a:	490b      	ldr	r1, [pc, #44]	; (72b8 <__NVIC_DisableIRQ+0x40>)
    728c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7290:	095b      	lsrs	r3, r3, #5
    7292:	88fa      	ldrh	r2, [r7, #6]
    7294:	f002 021f 	and.w	r2, r2, #31
    7298:	2001      	movs	r0, #1
    729a:	fa00 f202 	lsl.w	r2, r0, r2
    729e:	3320      	adds	r3, #32
    72a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    72a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    72a8:	f3bf 8f6f 	isb	sy
}
    72ac:	bf00      	nop
    72ae:	370c      	adds	r7, #12
    72b0:	46bd      	mov	sp, r7
    72b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b6:	4770      	bx	lr
    72b8:	e000e100 	.word	0xe000e100

000072bc <__NVIC_ClearPendingIRQ>:
{
    72bc:	b480      	push	{r7}
    72be:	b083      	sub	sp, #12
    72c0:	af00      	add	r7, sp, #0
    72c2:	4603      	mov	r3, r0
    72c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    72c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72ca:	2b00      	cmp	r3, #0
    72cc:	db0c      	blt.n	72e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72ce:	4909      	ldr	r1, [pc, #36]	; (72f4 <__NVIC_ClearPendingIRQ+0x38>)
    72d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72d4:	095b      	lsrs	r3, r3, #5
    72d6:	88fa      	ldrh	r2, [r7, #6]
    72d8:	f002 021f 	and.w	r2, r2, #31
    72dc:	2001      	movs	r0, #1
    72de:	fa00 f202 	lsl.w	r2, r0, r2
    72e2:	3360      	adds	r3, #96	; 0x60
    72e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72e8:	bf00      	nop
    72ea:	370c      	adds	r7, #12
    72ec:	46bd      	mov	sp, r7
    72ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    72f2:	4770      	bx	lr
    72f4:	e000e100 	.word	0xe000e100

000072f8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    72f8:	b480      	push	{r7}
    72fa:	b083      	sub	sp, #12
    72fc:	af00      	add	r7, sp, #0
    72fe:	6078      	str	r0, [r7, #4]
    7300:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7302:	bf00      	nop
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	691a      	ldr	r2, [r3, #16]
    7308:	683b      	ldr	r3, [r7, #0]
    730a:	4013      	ands	r3, r2
    730c:	2b00      	cmp	r3, #0
    730e:	d1f9      	bne.n	7304 <hri_tc_wait_for_sync+0xc>
	};
}
    7310:	bf00      	nop
    7312:	370c      	adds	r7, #12
    7314:	46bd      	mov	sp, r7
    7316:	f85d 7b04 	ldr.w	r7, [sp], #4
    731a:	4770      	bx	lr

0000731c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    731c:	b480      	push	{r7}
    731e:	b083      	sub	sp, #12
    7320:	af00      	add	r7, sp, #0
    7322:	6078      	str	r0, [r7, #4]
    7324:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7326:	687b      	ldr	r3, [r7, #4]
    7328:	691a      	ldr	r2, [r3, #16]
    732a:	683b      	ldr	r3, [r7, #0]
    732c:	4013      	ands	r3, r2
    732e:	2b00      	cmp	r3, #0
    7330:	bf14      	ite	ne
    7332:	2301      	movne	r3, #1
    7334:	2300      	moveq	r3, #0
    7336:	b2db      	uxtb	r3, r3
}
    7338:	4618      	mov	r0, r3
    733a:	370c      	adds	r7, #12
    733c:	46bd      	mov	sp, r7
    733e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7342:	4770      	bx	lr

00007344 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7344:	b480      	push	{r7}
    7346:	b083      	sub	sp, #12
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	7a9b      	ldrb	r3, [r3, #10]
    7350:	b2db      	uxtb	r3, r3
    7352:	f003 0301 	and.w	r3, r3, #1
    7356:	2b00      	cmp	r3, #0
    7358:	bf14      	ite	ne
    735a:	2301      	movne	r3, #1
    735c:	2300      	moveq	r3, #0
    735e:	b2db      	uxtb	r3, r3
}
    7360:	4618      	mov	r0, r3
    7362:	370c      	adds	r7, #12
    7364:	46bd      	mov	sp, r7
    7366:	f85d 7b04 	ldr.w	r7, [sp], #4
    736a:	4770      	bx	lr

0000736c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    736c:	b480      	push	{r7}
    736e:	b083      	sub	sp, #12
    7370:	af00      	add	r7, sp, #0
    7372:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	2201      	movs	r2, #1
    7378:	729a      	strb	r2, [r3, #10]
}
    737a:	bf00      	nop
    737c:	370c      	adds	r7, #12
    737e:	46bd      	mov	sp, r7
    7380:	f85d 7b04 	ldr.w	r7, [sp], #4
    7384:	4770      	bx	lr

00007386 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7386:	b480      	push	{r7}
    7388:	b083      	sub	sp, #12
    738a:	af00      	add	r7, sp, #0
    738c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    738e:	687b      	ldr	r3, [r7, #4]
    7390:	2202      	movs	r2, #2
    7392:	729a      	strb	r2, [r3, #10]
}
    7394:	bf00      	nop
    7396:	370c      	adds	r7, #12
    7398:	46bd      	mov	sp, r7
    739a:	f85d 7b04 	ldr.w	r7, [sp], #4
    739e:	4770      	bx	lr

000073a0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    73a0:	b480      	push	{r7}
    73a2:	b083      	sub	sp, #12
    73a4:	af00      	add	r7, sp, #0
    73a6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	2201      	movs	r2, #1
    73ac:	725a      	strb	r2, [r3, #9]
}
    73ae:	bf00      	nop
    73b0:	370c      	adds	r7, #12
    73b2:	46bd      	mov	sp, r7
    73b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b8:	4770      	bx	lr

000073ba <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    73ba:	b480      	push	{r7}
    73bc:	b083      	sub	sp, #12
    73be:	af00      	add	r7, sp, #0
    73c0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    73c2:	687b      	ldr	r3, [r7, #4]
    73c4:	7a5b      	ldrb	r3, [r3, #9]
    73c6:	b2db      	uxtb	r3, r3
    73c8:	085b      	lsrs	r3, r3, #1
    73ca:	f003 0301 	and.w	r3, r3, #1
    73ce:	2b00      	cmp	r3, #0
    73d0:	bf14      	ite	ne
    73d2:	2301      	movne	r3, #1
    73d4:	2300      	moveq	r3, #0
    73d6:	b2db      	uxtb	r3, r3
}
    73d8:	4618      	mov	r0, r3
    73da:	370c      	adds	r7, #12
    73dc:	46bd      	mov	sp, r7
    73de:	f85d 7b04 	ldr.w	r7, [sp], #4
    73e2:	4770      	bx	lr

000073e4 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    73e4:	b580      	push	{r7, lr}
    73e6:	b082      	sub	sp, #8
    73e8:	af00      	add	r7, sp, #0
    73ea:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    73ec:	687b      	ldr	r3, [r7, #4]
    73ee:	681b      	ldr	r3, [r3, #0]
    73f0:	f043 0201 	orr.w	r2, r3, #1
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    73f8:	2101      	movs	r1, #1
    73fa:	6878      	ldr	r0, [r7, #4]
    73fc:	4b02      	ldr	r3, [pc, #8]	; (7408 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    73fe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7400:	bf00      	nop
    7402:	3708      	adds	r7, #8
    7404:	46bd      	mov	sp, r7
    7406:	bd80      	pop	{r7, pc}
    7408:	000072f9 	.word	0x000072f9

0000740c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    740c:	b580      	push	{r7, lr}
    740e:	b082      	sub	sp, #8
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	f043 0202 	orr.w	r2, r3, #2
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7420:	2103      	movs	r1, #3
    7422:	6878      	ldr	r0, [r7, #4]
    7424:	4b02      	ldr	r3, [pc, #8]	; (7430 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7426:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7428:	bf00      	nop
    742a:	3708      	adds	r7, #8
    742c:	46bd      	mov	sp, r7
    742e:	bd80      	pop	{r7, pc}
    7430:	000072f9 	.word	0x000072f9

00007434 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7434:	b580      	push	{r7, lr}
    7436:	b084      	sub	sp, #16
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    743c:	2103      	movs	r1, #3
    743e:	6878      	ldr	r0, [r7, #4]
    7440:	4b09      	ldr	r3, [pc, #36]	; (7468 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7442:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7444:	687b      	ldr	r3, [r7, #4]
    7446:	681b      	ldr	r3, [r3, #0]
    7448:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    744a:	68fb      	ldr	r3, [r7, #12]
    744c:	085b      	lsrs	r3, r3, #1
    744e:	f003 0301 	and.w	r3, r3, #1
    7452:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7454:	68fb      	ldr	r3, [r7, #12]
    7456:	2b00      	cmp	r3, #0
    7458:	bf14      	ite	ne
    745a:	2301      	movne	r3, #1
    745c:	2300      	moveq	r3, #0
    745e:	b2db      	uxtb	r3, r3
}
    7460:	4618      	mov	r0, r3
    7462:	3710      	adds	r7, #16
    7464:	46bd      	mov	sp, r7
    7466:	bd80      	pop	{r7, pc}
    7468:	000072f9 	.word	0x000072f9

0000746c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    746c:	b580      	push	{r7, lr}
    746e:	b082      	sub	sp, #8
    7470:	af00      	add	r7, sp, #0
    7472:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	681b      	ldr	r3, [r3, #0]
    7478:	f023 0202 	bic.w	r2, r3, #2
    747c:	687b      	ldr	r3, [r7, #4]
    747e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7480:	2103      	movs	r1, #3
    7482:	6878      	ldr	r0, [r7, #4]
    7484:	4b02      	ldr	r3, [pc, #8]	; (7490 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7486:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7488:	bf00      	nop
    748a:	3708      	adds	r7, #8
    748c:	46bd      	mov	sp, r7
    748e:	bd80      	pop	{r7, pc}
    7490:	000072f9 	.word	0x000072f9

00007494 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7494:	b480      	push	{r7}
    7496:	b085      	sub	sp, #20
    7498:	af00      	add	r7, sp, #0
    749a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    749c:	687b      	ldr	r3, [r7, #4]
    749e:	681b      	ldr	r3, [r3, #0]
    74a0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    74a2:	68fb      	ldr	r3, [r7, #12]
    74a4:	089b      	lsrs	r3, r3, #2
    74a6:	f003 0303 	and.w	r3, r3, #3
    74aa:	60fb      	str	r3, [r7, #12]
	return tmp;
    74ac:	68fb      	ldr	r3, [r7, #12]
}
    74ae:	4618      	mov	r0, r3
    74b0:	3714      	adds	r7, #20
    74b2:	46bd      	mov	sp, r7
    74b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b8:	4770      	bx	lr
	...

000074bc <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    74bc:	b580      	push	{r7, lr}
    74be:	b084      	sub	sp, #16
    74c0:	af00      	add	r7, sp, #0
    74c2:	6078      	str	r0, [r7, #4]
    74c4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    74c6:	2103      	movs	r1, #3
    74c8:	6878      	ldr	r0, [r7, #4]
    74ca:	4b07      	ldr	r3, [pc, #28]	; (74e8 <hri_tc_get_CTRLA_reg+0x2c>)
    74cc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	681b      	ldr	r3, [r3, #0]
    74d2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    74d4:	68fa      	ldr	r2, [r7, #12]
    74d6:	683b      	ldr	r3, [r7, #0]
    74d8:	4013      	ands	r3, r2
    74da:	60fb      	str	r3, [r7, #12]
	return tmp;
    74dc:	68fb      	ldr	r3, [r7, #12]
}
    74de:	4618      	mov	r0, r3
    74e0:	3710      	adds	r7, #16
    74e2:	46bd      	mov	sp, r7
    74e4:	bd80      	pop	{r7, pc}
    74e6:	bf00      	nop
    74e8:	000072f9 	.word	0x000072f9

000074ec <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    74ec:	b580      	push	{r7, lr}
    74ee:	b082      	sub	sp, #8
    74f0:	af00      	add	r7, sp, #0
    74f2:	6078      	str	r0, [r7, #4]
    74f4:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	683a      	ldr	r2, [r7, #0]
    74fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    74fc:	2103      	movs	r1, #3
    74fe:	6878      	ldr	r0, [r7, #4]
    7500:	4b02      	ldr	r3, [pc, #8]	; (750c <hri_tc_write_CTRLA_reg+0x20>)
    7502:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7504:	bf00      	nop
    7506:	3708      	adds	r7, #8
    7508:	46bd      	mov	sp, r7
    750a:	bd80      	pop	{r7, pc}
    750c:	000072f9 	.word	0x000072f9

00007510 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7510:	b480      	push	{r7}
    7512:	b083      	sub	sp, #12
    7514:	af00      	add	r7, sp, #0
    7516:	6078      	str	r0, [r7, #4]
    7518:	460b      	mov	r3, r1
    751a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    751c:	687b      	ldr	r3, [r7, #4]
    751e:	887a      	ldrh	r2, [r7, #2]
    7520:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7522:	bf00      	nop
    7524:	370c      	adds	r7, #12
    7526:	46bd      	mov	sp, r7
    7528:	f85d 7b04 	ldr.w	r7, [sp], #4
    752c:	4770      	bx	lr

0000752e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    752e:	b480      	push	{r7}
    7530:	b083      	sub	sp, #12
    7532:	af00      	add	r7, sp, #0
    7534:	6078      	str	r0, [r7, #4]
    7536:	460b      	mov	r3, r1
    7538:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	78fa      	ldrb	r2, [r7, #3]
    753e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7540:	bf00      	nop
    7542:	370c      	adds	r7, #12
    7544:	46bd      	mov	sp, r7
    7546:	f85d 7b04 	ldr.w	r7, [sp], #4
    754a:	4770      	bx	lr

0000754c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    754c:	b480      	push	{r7}
    754e:	b083      	sub	sp, #12
    7550:	af00      	add	r7, sp, #0
    7552:	6078      	str	r0, [r7, #4]
    7554:	460b      	mov	r3, r1
    7556:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	78fa      	ldrb	r2, [r7, #3]
    755c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    755e:	bf00      	nop
    7560:	370c      	adds	r7, #12
    7562:	46bd      	mov	sp, r7
    7564:	f85d 7b04 	ldr.w	r7, [sp], #4
    7568:	4770      	bx	lr
	...

0000756c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    756c:	b580      	push	{r7, lr}
    756e:	b082      	sub	sp, #8
    7570:	af00      	add	r7, sp, #0
    7572:	6078      	str	r0, [r7, #4]
    7574:	460b      	mov	r3, r1
    7576:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7578:	687b      	ldr	r3, [r7, #4]
    757a:	78fa      	ldrb	r2, [r7, #3]
    757c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    757e:	2120      	movs	r1, #32
    7580:	6878      	ldr	r0, [r7, #4]
    7582:	4b03      	ldr	r3, [pc, #12]	; (7590 <hri_tccount8_write_PER_reg+0x24>)
    7584:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7586:	bf00      	nop
    7588:	3708      	adds	r7, #8
    758a:	46bd      	mov	sp, r7
    758c:	bd80      	pop	{r7, pc}
    758e:	bf00      	nop
    7590:	000072f9 	.word	0x000072f9

00007594 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7594:	b580      	push	{r7, lr}
    7596:	b082      	sub	sp, #8
    7598:	af00      	add	r7, sp, #0
    759a:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    759c:	2120      	movs	r1, #32
    759e:	6878      	ldr	r0, [r7, #4]
    75a0:	4b04      	ldr	r3, [pc, #16]	; (75b4 <hri_tccount8_read_PER_reg+0x20>)
    75a2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	7edb      	ldrb	r3, [r3, #27]
    75a8:	b2db      	uxtb	r3, r3
}
    75aa:	4618      	mov	r0, r3
    75ac:	3708      	adds	r7, #8
    75ae:	46bd      	mov	sp, r7
    75b0:	bd80      	pop	{r7, pc}
    75b2:	bf00      	nop
    75b4:	000072f9 	.word	0x000072f9

000075b8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    75b8:	b580      	push	{r7, lr}
    75ba:	b082      	sub	sp, #8
    75bc:	af00      	add	r7, sp, #0
    75be:	6078      	str	r0, [r7, #4]
    75c0:	460b      	mov	r3, r1
    75c2:	70fb      	strb	r3, [r7, #3]
    75c4:	4613      	mov	r3, r2
    75c6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    75c8:	78fb      	ldrb	r3, [r7, #3]
    75ca:	687a      	ldr	r2, [r7, #4]
    75cc:	4413      	add	r3, r2
    75ce:	78ba      	ldrb	r2, [r7, #2]
    75d0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    75d2:	21c0      	movs	r1, #192	; 0xc0
    75d4:	6878      	ldr	r0, [r7, #4]
    75d6:	4b03      	ldr	r3, [pc, #12]	; (75e4 <hri_tccount8_write_CC_reg+0x2c>)
    75d8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    75da:	bf00      	nop
    75dc:	3708      	adds	r7, #8
    75de:	46bd      	mov	sp, r7
    75e0:	bd80      	pop	{r7, pc}
    75e2:	bf00      	nop
    75e4:	000072f9 	.word	0x000072f9

000075e8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    75e8:	b580      	push	{r7, lr}
    75ea:	b082      	sub	sp, #8
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
    75f0:	460b      	mov	r3, r1
    75f2:	70fb      	strb	r3, [r7, #3]
    75f4:	4613      	mov	r3, r2
    75f6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    75f8:	78fb      	ldrb	r3, [r7, #3]
    75fa:	687a      	ldr	r2, [r7, #4]
    75fc:	330c      	adds	r3, #12
    75fe:	005b      	lsls	r3, r3, #1
    7600:	4413      	add	r3, r2
    7602:	883a      	ldrh	r2, [r7, #0]
    7604:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7606:	21c0      	movs	r1, #192	; 0xc0
    7608:	6878      	ldr	r0, [r7, #4]
    760a:	4b03      	ldr	r3, [pc, #12]	; (7618 <hri_tccount16_write_CC_reg+0x30>)
    760c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    760e:	bf00      	nop
    7610:	3708      	adds	r7, #8
    7612:	46bd      	mov	sp, r7
    7614:	bd80      	pop	{r7, pc}
    7616:	bf00      	nop
    7618:	000072f9 	.word	0x000072f9

0000761c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    761c:	b580      	push	{r7, lr}
    761e:	b082      	sub	sp, #8
    7620:	af00      	add	r7, sp, #0
    7622:	6078      	str	r0, [r7, #4]
    7624:	460b      	mov	r3, r1
    7626:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7628:	21c0      	movs	r1, #192	; 0xc0
    762a:	6878      	ldr	r0, [r7, #4]
    762c:	4b06      	ldr	r3, [pc, #24]	; (7648 <hri_tccount16_read_CC_reg+0x2c>)
    762e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7630:	78fb      	ldrb	r3, [r7, #3]
    7632:	687a      	ldr	r2, [r7, #4]
    7634:	330c      	adds	r3, #12
    7636:	005b      	lsls	r3, r3, #1
    7638:	4413      	add	r3, r2
    763a:	889b      	ldrh	r3, [r3, #4]
    763c:	b29b      	uxth	r3, r3
}
    763e:	4618      	mov	r0, r3
    7640:	3708      	adds	r7, #8
    7642:	46bd      	mov	sp, r7
    7644:	bd80      	pop	{r7, pc}
    7646:	bf00      	nop
    7648:	000072f9 	.word	0x000072f9

0000764c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    764c:	b580      	push	{r7, lr}
    764e:	b084      	sub	sp, #16
    7650:	af00      	add	r7, sp, #0
    7652:	60f8      	str	r0, [r7, #12]
    7654:	460b      	mov	r3, r1
    7656:	607a      	str	r2, [r7, #4]
    7658:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    765a:	7afb      	ldrb	r3, [r7, #11]
    765c:	68fa      	ldr	r2, [r7, #12]
    765e:	3306      	adds	r3, #6
    7660:	009b      	lsls	r3, r3, #2
    7662:	4413      	add	r3, r2
    7664:	687a      	ldr	r2, [r7, #4]
    7666:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7668:	21c0      	movs	r1, #192	; 0xc0
    766a:	68f8      	ldr	r0, [r7, #12]
    766c:	4b02      	ldr	r3, [pc, #8]	; (7678 <hri_tccount32_write_CC_reg+0x2c>)
    766e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7670:	bf00      	nop
    7672:	3710      	adds	r7, #16
    7674:	46bd      	mov	sp, r7
    7676:	bd80      	pop	{r7, pc}
    7678:	000072f9 	.word	0x000072f9

0000767c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    767c:	b580      	push	{r7, lr}
    767e:	b082      	sub	sp, #8
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
    7684:	460b      	mov	r3, r1
    7686:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7688:	21c0      	movs	r1, #192	; 0xc0
    768a:	6878      	ldr	r0, [r7, #4]
    768c:	4b05      	ldr	r3, [pc, #20]	; (76a4 <hri_tccount32_read_CC_reg+0x28>)
    768e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7690:	78fb      	ldrb	r3, [r7, #3]
    7692:	687a      	ldr	r2, [r7, #4]
    7694:	3306      	adds	r3, #6
    7696:	009b      	lsls	r3, r3, #2
    7698:	4413      	add	r3, r2
    769a:	685b      	ldr	r3, [r3, #4]
}
    769c:	4618      	mov	r0, r3
    769e:	3708      	adds	r7, #8
    76a0:	46bd      	mov	sp, r7
    76a2:	bd80      	pop	{r7, pc}
    76a4:	000072f9 	.word	0x000072f9

000076a8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	b084      	sub	sp, #16
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
    76b0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    76b2:	6838      	ldr	r0, [r7, #0]
    76b4:	4b93      	ldr	r3, [pc, #588]	; (7904 <_tc_timer_init+0x25c>)
    76b6:	4798      	blx	r3
    76b8:	4603      	mov	r3, r0
    76ba:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	683a      	ldr	r2, [r7, #0]
    76c0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    76c2:	22a4      	movs	r2, #164	; 0xa4
    76c4:	4990      	ldr	r1, [pc, #576]	; (7908 <_tc_timer_init+0x260>)
    76c6:	2001      	movs	r0, #1
    76c8:	4b90      	ldr	r3, [pc, #576]	; (790c <_tc_timer_init+0x264>)
    76ca:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    76cc:	2101      	movs	r1, #1
    76ce:	6838      	ldr	r0, [r7, #0]
    76d0:	4b8f      	ldr	r3, [pc, #572]	; (7910 <_tc_timer_init+0x268>)
    76d2:	4798      	blx	r3
    76d4:	4603      	mov	r3, r0
    76d6:	f083 0301 	eor.w	r3, r3, #1
    76da:	b2db      	uxtb	r3, r3
    76dc:	2b00      	cmp	r3, #0
    76de:	d011      	beq.n	7704 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    76e0:	2102      	movs	r1, #2
    76e2:	6838      	ldr	r0, [r7, #0]
    76e4:	4b8b      	ldr	r3, [pc, #556]	; (7914 <_tc_timer_init+0x26c>)
    76e6:	4798      	blx	r3
    76e8:	4603      	mov	r3, r0
    76ea:	2b00      	cmp	r3, #0
    76ec:	d006      	beq.n	76fc <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    76ee:	6838      	ldr	r0, [r7, #0]
    76f0:	4b89      	ldr	r3, [pc, #548]	; (7918 <_tc_timer_init+0x270>)
    76f2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    76f4:	2102      	movs	r1, #2
    76f6:	6838      	ldr	r0, [r7, #0]
    76f8:	4b88      	ldr	r3, [pc, #544]	; (791c <_tc_timer_init+0x274>)
    76fa:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    76fc:	2101      	movs	r1, #1
    76fe:	6838      	ldr	r0, [r7, #0]
    7700:	4b87      	ldr	r3, [pc, #540]	; (7920 <_tc_timer_init+0x278>)
    7702:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7704:	2101      	movs	r1, #1
    7706:	6838      	ldr	r0, [r7, #0]
    7708:	4b84      	ldr	r3, [pc, #528]	; (791c <_tc_timer_init+0x274>)
    770a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    770c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7710:	4984      	ldr	r1, [pc, #528]	; (7924 <_tc_timer_init+0x27c>)
    7712:	4613      	mov	r3, r2
    7714:	009b      	lsls	r3, r3, #2
    7716:	4413      	add	r3, r2
    7718:	009b      	lsls	r3, r3, #2
    771a:	440b      	add	r3, r1
    771c:	3304      	adds	r3, #4
    771e:	681b      	ldr	r3, [r3, #0]
    7720:	4619      	mov	r1, r3
    7722:	6838      	ldr	r0, [r7, #0]
    7724:	4b7e      	ldr	r3, [pc, #504]	; (7920 <_tc_timer_init+0x278>)
    7726:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7728:	f997 200f 	ldrsb.w	r2, [r7, #15]
    772c:	497d      	ldr	r1, [pc, #500]	; (7924 <_tc_timer_init+0x27c>)
    772e:	4613      	mov	r3, r2
    7730:	009b      	lsls	r3, r3, #2
    7732:	4413      	add	r3, r2
    7734:	009b      	lsls	r3, r3, #2
    7736:	440b      	add	r3, r1
    7738:	330a      	adds	r3, #10
    773a:	781b      	ldrb	r3, [r3, #0]
    773c:	4619      	mov	r1, r3
    773e:	6838      	ldr	r0, [r7, #0]
    7740:	4b79      	ldr	r3, [pc, #484]	; (7928 <_tc_timer_init+0x280>)
    7742:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7744:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7748:	4976      	ldr	r1, [pc, #472]	; (7924 <_tc_timer_init+0x27c>)
    774a:	4613      	mov	r3, r2
    774c:	009b      	lsls	r3, r3, #2
    774e:	4413      	add	r3, r2
    7750:	009b      	lsls	r3, r3, #2
    7752:	440b      	add	r3, r1
    7754:	3308      	adds	r3, #8
    7756:	881b      	ldrh	r3, [r3, #0]
    7758:	4619      	mov	r1, r3
    775a:	6838      	ldr	r0, [r7, #0]
    775c:	4b73      	ldr	r3, [pc, #460]	; (792c <_tc_timer_init+0x284>)
    775e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7760:	2101      	movs	r1, #1
    7762:	6838      	ldr	r0, [r7, #0]
    7764:	4b72      	ldr	r3, [pc, #456]	; (7930 <_tc_timer_init+0x288>)
    7766:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7768:	f997 200f 	ldrsb.w	r2, [r7, #15]
    776c:	496d      	ldr	r1, [pc, #436]	; (7924 <_tc_timer_init+0x27c>)
    776e:	4613      	mov	r3, r2
    7770:	009b      	lsls	r3, r3, #2
    7772:	4413      	add	r3, r2
    7774:	009b      	lsls	r3, r3, #2
    7776:	440b      	add	r3, r1
    7778:	3304      	adds	r3, #4
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	f003 030c 	and.w	r3, r3, #12
    7780:	2b08      	cmp	r3, #8
    7782:	d11e      	bne.n	77c2 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7784:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7788:	4966      	ldr	r1, [pc, #408]	; (7924 <_tc_timer_init+0x27c>)
    778a:	4613      	mov	r3, r2
    778c:	009b      	lsls	r3, r3, #2
    778e:	4413      	add	r3, r2
    7790:	009b      	lsls	r3, r3, #2
    7792:	440b      	add	r3, r1
    7794:	330c      	adds	r3, #12
    7796:	681b      	ldr	r3, [r3, #0]
    7798:	461a      	mov	r2, r3
    779a:	2100      	movs	r1, #0
    779c:	6838      	ldr	r0, [r7, #0]
    779e:	4b65      	ldr	r3, [pc, #404]	; (7934 <_tc_timer_init+0x28c>)
    77a0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    77a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77a6:	495f      	ldr	r1, [pc, #380]	; (7924 <_tc_timer_init+0x27c>)
    77a8:	4613      	mov	r3, r2
    77aa:	009b      	lsls	r3, r3, #2
    77ac:	4413      	add	r3, r2
    77ae:	009b      	lsls	r3, r3, #2
    77b0:	440b      	add	r3, r1
    77b2:	3310      	adds	r3, #16
    77b4:	681b      	ldr	r3, [r3, #0]
    77b6:	461a      	mov	r2, r3
    77b8:	2101      	movs	r1, #1
    77ba:	6838      	ldr	r0, [r7, #0]
    77bc:	4b5d      	ldr	r3, [pc, #372]	; (7934 <_tc_timer_init+0x28c>)
    77be:	4798      	blx	r3
    77c0:	e06a      	b.n	7898 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    77c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77c6:	4957      	ldr	r1, [pc, #348]	; (7924 <_tc_timer_init+0x27c>)
    77c8:	4613      	mov	r3, r2
    77ca:	009b      	lsls	r3, r3, #2
    77cc:	4413      	add	r3, r2
    77ce:	009b      	lsls	r3, r3, #2
    77d0:	440b      	add	r3, r1
    77d2:	3304      	adds	r3, #4
    77d4:	681b      	ldr	r3, [r3, #0]
    77d6:	f003 030c 	and.w	r3, r3, #12
    77da:	2b00      	cmp	r3, #0
    77dc:	d120      	bne.n	7820 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    77de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77e2:	4950      	ldr	r1, [pc, #320]	; (7924 <_tc_timer_init+0x27c>)
    77e4:	4613      	mov	r3, r2
    77e6:	009b      	lsls	r3, r3, #2
    77e8:	4413      	add	r3, r2
    77ea:	009b      	lsls	r3, r3, #2
    77ec:	440b      	add	r3, r1
    77ee:	330c      	adds	r3, #12
    77f0:	681b      	ldr	r3, [r3, #0]
    77f2:	b29b      	uxth	r3, r3
    77f4:	461a      	mov	r2, r3
    77f6:	2100      	movs	r1, #0
    77f8:	6838      	ldr	r0, [r7, #0]
    77fa:	4b4f      	ldr	r3, [pc, #316]	; (7938 <_tc_timer_init+0x290>)
    77fc:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    77fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7802:	4948      	ldr	r1, [pc, #288]	; (7924 <_tc_timer_init+0x27c>)
    7804:	4613      	mov	r3, r2
    7806:	009b      	lsls	r3, r3, #2
    7808:	4413      	add	r3, r2
    780a:	009b      	lsls	r3, r3, #2
    780c:	440b      	add	r3, r1
    780e:	3310      	adds	r3, #16
    7810:	681b      	ldr	r3, [r3, #0]
    7812:	b29b      	uxth	r3, r3
    7814:	461a      	mov	r2, r3
    7816:	2101      	movs	r1, #1
    7818:	6838      	ldr	r0, [r7, #0]
    781a:	4b47      	ldr	r3, [pc, #284]	; (7938 <_tc_timer_init+0x290>)
    781c:	4798      	blx	r3
    781e:	e03b      	b.n	7898 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7820:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7824:	493f      	ldr	r1, [pc, #252]	; (7924 <_tc_timer_init+0x27c>)
    7826:	4613      	mov	r3, r2
    7828:	009b      	lsls	r3, r3, #2
    782a:	4413      	add	r3, r2
    782c:	009b      	lsls	r3, r3, #2
    782e:	440b      	add	r3, r1
    7830:	3304      	adds	r3, #4
    7832:	681b      	ldr	r3, [r3, #0]
    7834:	f003 030c 	and.w	r3, r3, #12
    7838:	2b04      	cmp	r3, #4
    783a:	d12d      	bne.n	7898 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    783c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7840:	4938      	ldr	r1, [pc, #224]	; (7924 <_tc_timer_init+0x27c>)
    7842:	4613      	mov	r3, r2
    7844:	009b      	lsls	r3, r3, #2
    7846:	4413      	add	r3, r2
    7848:	009b      	lsls	r3, r3, #2
    784a:	440b      	add	r3, r1
    784c:	330c      	adds	r3, #12
    784e:	681b      	ldr	r3, [r3, #0]
    7850:	b2db      	uxtb	r3, r3
    7852:	461a      	mov	r2, r3
    7854:	2100      	movs	r1, #0
    7856:	6838      	ldr	r0, [r7, #0]
    7858:	4b38      	ldr	r3, [pc, #224]	; (793c <_tc_timer_init+0x294>)
    785a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    785c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7860:	4930      	ldr	r1, [pc, #192]	; (7924 <_tc_timer_init+0x27c>)
    7862:	4613      	mov	r3, r2
    7864:	009b      	lsls	r3, r3, #2
    7866:	4413      	add	r3, r2
    7868:	009b      	lsls	r3, r3, #2
    786a:	440b      	add	r3, r1
    786c:	3310      	adds	r3, #16
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	b2db      	uxtb	r3, r3
    7872:	461a      	mov	r2, r3
    7874:	2101      	movs	r1, #1
    7876:	6838      	ldr	r0, [r7, #0]
    7878:	4b30      	ldr	r3, [pc, #192]	; (793c <_tc_timer_init+0x294>)
    787a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    787c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7880:	4928      	ldr	r1, [pc, #160]	; (7924 <_tc_timer_init+0x27c>)
    7882:	4613      	mov	r3, r2
    7884:	009b      	lsls	r3, r3, #2
    7886:	4413      	add	r3, r2
    7888:	009b      	lsls	r3, r3, #2
    788a:	440b      	add	r3, r1
    788c:	330b      	adds	r3, #11
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	4619      	mov	r1, r3
    7892:	6838      	ldr	r0, [r7, #0]
    7894:	4b2a      	ldr	r3, [pc, #168]	; (7940 <_tc_timer_init+0x298>)
    7896:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7898:	6838      	ldr	r0, [r7, #0]
    789a:	4b2a      	ldr	r3, [pc, #168]	; (7944 <_tc_timer_init+0x29c>)
    789c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    789e:	6879      	ldr	r1, [r7, #4]
    78a0:	6838      	ldr	r0, [r7, #0]
    78a2:	4b29      	ldr	r3, [pc, #164]	; (7948 <_tc_timer_init+0x2a0>)
    78a4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    78a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78aa:	491e      	ldr	r1, [pc, #120]	; (7924 <_tc_timer_init+0x27c>)
    78ac:	4613      	mov	r3, r2
    78ae:	009b      	lsls	r3, r3, #2
    78b0:	4413      	add	r3, r2
    78b2:	009b      	lsls	r3, r3, #2
    78b4:	440b      	add	r3, r1
    78b6:	3302      	adds	r3, #2
    78b8:	f9b3 3000 	ldrsh.w	r3, [r3]
    78bc:	4618      	mov	r0, r3
    78be:	4b23      	ldr	r3, [pc, #140]	; (794c <_tc_timer_init+0x2a4>)
    78c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    78c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78c6:	4917      	ldr	r1, [pc, #92]	; (7924 <_tc_timer_init+0x27c>)
    78c8:	4613      	mov	r3, r2
    78ca:	009b      	lsls	r3, r3, #2
    78cc:	4413      	add	r3, r2
    78ce:	009b      	lsls	r3, r3, #2
    78d0:	440b      	add	r3, r1
    78d2:	3302      	adds	r3, #2
    78d4:	f9b3 3000 	ldrsh.w	r3, [r3]
    78d8:	4618      	mov	r0, r3
    78da:	4b1d      	ldr	r3, [pc, #116]	; (7950 <_tc_timer_init+0x2a8>)
    78dc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    78de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78e2:	4910      	ldr	r1, [pc, #64]	; (7924 <_tc_timer_init+0x27c>)
    78e4:	4613      	mov	r3, r2
    78e6:	009b      	lsls	r3, r3, #2
    78e8:	4413      	add	r3, r2
    78ea:	009b      	lsls	r3, r3, #2
    78ec:	440b      	add	r3, r1
    78ee:	3302      	adds	r3, #2
    78f0:	f9b3 3000 	ldrsh.w	r3, [r3]
    78f4:	4618      	mov	r0, r3
    78f6:	4b17      	ldr	r3, [pc, #92]	; (7954 <_tc_timer_init+0x2ac>)
    78f8:	4798      	blx	r3

	return ERR_NONE;
    78fa:	2300      	movs	r3, #0
}
    78fc:	4618      	mov	r0, r3
    78fe:	3710      	adds	r7, #16
    7900:	46bd      	mov	sp, r7
    7902:	bd80      	pop	{r7, pc}
    7904:	00007ef9 	.word	0x00007ef9
    7908:	000113e0 	.word	0x000113e0
    790c:	0000337d 	.word	0x0000337d
    7910:	0000731d 	.word	0x0000731d
    7914:	000074bd 	.word	0x000074bd
    7918:	0000746d 	.word	0x0000746d
    791c:	000072f9 	.word	0x000072f9
    7920:	000074ed 	.word	0x000074ed
    7924:	20000110 	.word	0x20000110
    7928:	0000754d 	.word	0x0000754d
    792c:	00007511 	.word	0x00007511
    7930:	0000752f 	.word	0x0000752f
    7934:	0000764d 	.word	0x0000764d
    7938:	000075e9 	.word	0x000075e9
    793c:	000075b9 	.word	0x000075b9
    7940:	0000756d 	.word	0x0000756d
    7944:	000073a1 	.word	0x000073a1
    7948:	00007f61 	.word	0x00007f61
    794c:	00007279 	.word	0x00007279
    7950:	000072bd 	.word	0x000072bd
    7954:	0000723d 	.word	0x0000723d

00007958 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7958:	b580      	push	{r7, lr}
    795a:	b084      	sub	sp, #16
    795c:	af00      	add	r7, sp, #0
    795e:	6078      	str	r0, [r7, #4]
    7960:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7962:	6838      	ldr	r0, [r7, #0]
    7964:	4b73      	ldr	r3, [pc, #460]	; (7b34 <_pwm_init+0x1dc>)
    7966:	4798      	blx	r3
    7968:	4603      	mov	r3, r0
    796a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	683a      	ldr	r2, [r7, #0]
    7970:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7972:	2101      	movs	r1, #1
    7974:	6838      	ldr	r0, [r7, #0]
    7976:	4b70      	ldr	r3, [pc, #448]	; (7b38 <_pwm_init+0x1e0>)
    7978:	4798      	blx	r3
    797a:	4603      	mov	r3, r0
    797c:	f083 0301 	eor.w	r3, r3, #1
    7980:	b2db      	uxtb	r3, r3
    7982:	2b00      	cmp	r3, #0
    7984:	d011      	beq.n	79aa <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7986:	2102      	movs	r1, #2
    7988:	6838      	ldr	r0, [r7, #0]
    798a:	4b6c      	ldr	r3, [pc, #432]	; (7b3c <_pwm_init+0x1e4>)
    798c:	4798      	blx	r3
    798e:	4603      	mov	r3, r0
    7990:	2b00      	cmp	r3, #0
    7992:	d006      	beq.n	79a2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7994:	6838      	ldr	r0, [r7, #0]
    7996:	4b6a      	ldr	r3, [pc, #424]	; (7b40 <_pwm_init+0x1e8>)
    7998:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    799a:	2102      	movs	r1, #2
    799c:	6838      	ldr	r0, [r7, #0]
    799e:	4b69      	ldr	r3, [pc, #420]	; (7b44 <_pwm_init+0x1ec>)
    79a0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    79a2:	2101      	movs	r1, #1
    79a4:	6838      	ldr	r0, [r7, #0]
    79a6:	4b68      	ldr	r3, [pc, #416]	; (7b48 <_pwm_init+0x1f0>)
    79a8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    79aa:	2101      	movs	r1, #1
    79ac:	6838      	ldr	r0, [r7, #0]
    79ae:	4b65      	ldr	r3, [pc, #404]	; (7b44 <_pwm_init+0x1ec>)
    79b0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    79b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79b6:	4965      	ldr	r1, [pc, #404]	; (7b4c <_pwm_init+0x1f4>)
    79b8:	4613      	mov	r3, r2
    79ba:	009b      	lsls	r3, r3, #2
    79bc:	4413      	add	r3, r2
    79be:	009b      	lsls	r3, r3, #2
    79c0:	440b      	add	r3, r1
    79c2:	3304      	adds	r3, #4
    79c4:	681b      	ldr	r3, [r3, #0]
    79c6:	4619      	mov	r1, r3
    79c8:	6838      	ldr	r0, [r7, #0]
    79ca:	4b5f      	ldr	r3, [pc, #380]	; (7b48 <_pwm_init+0x1f0>)
    79cc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    79ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79d2:	495e      	ldr	r1, [pc, #376]	; (7b4c <_pwm_init+0x1f4>)
    79d4:	4613      	mov	r3, r2
    79d6:	009b      	lsls	r3, r3, #2
    79d8:	4413      	add	r3, r2
    79da:	009b      	lsls	r3, r3, #2
    79dc:	440b      	add	r3, r1
    79de:	330a      	adds	r3, #10
    79e0:	781b      	ldrb	r3, [r3, #0]
    79e2:	4619      	mov	r1, r3
    79e4:	6838      	ldr	r0, [r7, #0]
    79e6:	4b5a      	ldr	r3, [pc, #360]	; (7b50 <_pwm_init+0x1f8>)
    79e8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    79ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79ee:	4957      	ldr	r1, [pc, #348]	; (7b4c <_pwm_init+0x1f4>)
    79f0:	4613      	mov	r3, r2
    79f2:	009b      	lsls	r3, r3, #2
    79f4:	4413      	add	r3, r2
    79f6:	009b      	lsls	r3, r3, #2
    79f8:	440b      	add	r3, r1
    79fa:	3308      	adds	r3, #8
    79fc:	881b      	ldrh	r3, [r3, #0]
    79fe:	4619      	mov	r1, r3
    7a00:	6838      	ldr	r0, [r7, #0]
    7a02:	4b54      	ldr	r3, [pc, #336]	; (7b54 <_pwm_init+0x1fc>)
    7a04:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7a06:	2103      	movs	r1, #3
    7a08:	6838      	ldr	r0, [r7, #0]
    7a0a:	4b53      	ldr	r3, [pc, #332]	; (7b58 <_pwm_init+0x200>)
    7a0c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7a0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a12:	494e      	ldr	r1, [pc, #312]	; (7b4c <_pwm_init+0x1f4>)
    7a14:	4613      	mov	r3, r2
    7a16:	009b      	lsls	r3, r3, #2
    7a18:	4413      	add	r3, r2
    7a1a:	009b      	lsls	r3, r3, #2
    7a1c:	440b      	add	r3, r1
    7a1e:	3304      	adds	r3, #4
    7a20:	681b      	ldr	r3, [r3, #0]
    7a22:	f003 030c 	and.w	r3, r3, #12
    7a26:	2b08      	cmp	r3, #8
    7a28:	d11e      	bne.n	7a68 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7a2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a2e:	4947      	ldr	r1, [pc, #284]	; (7b4c <_pwm_init+0x1f4>)
    7a30:	4613      	mov	r3, r2
    7a32:	009b      	lsls	r3, r3, #2
    7a34:	4413      	add	r3, r2
    7a36:	009b      	lsls	r3, r3, #2
    7a38:	440b      	add	r3, r1
    7a3a:	330c      	adds	r3, #12
    7a3c:	681b      	ldr	r3, [r3, #0]
    7a3e:	461a      	mov	r2, r3
    7a40:	2100      	movs	r1, #0
    7a42:	6838      	ldr	r0, [r7, #0]
    7a44:	4b45      	ldr	r3, [pc, #276]	; (7b5c <_pwm_init+0x204>)
    7a46:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7a48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a4c:	493f      	ldr	r1, [pc, #252]	; (7b4c <_pwm_init+0x1f4>)
    7a4e:	4613      	mov	r3, r2
    7a50:	009b      	lsls	r3, r3, #2
    7a52:	4413      	add	r3, r2
    7a54:	009b      	lsls	r3, r3, #2
    7a56:	440b      	add	r3, r1
    7a58:	3310      	adds	r3, #16
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	461a      	mov	r2, r3
    7a5e:	2101      	movs	r1, #1
    7a60:	6838      	ldr	r0, [r7, #0]
    7a62:	4b3e      	ldr	r3, [pc, #248]	; (7b5c <_pwm_init+0x204>)
    7a64:	4798      	blx	r3
    7a66:	e031      	b.n	7acc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7a68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a6c:	4937      	ldr	r1, [pc, #220]	; (7b4c <_pwm_init+0x1f4>)
    7a6e:	4613      	mov	r3, r2
    7a70:	009b      	lsls	r3, r3, #2
    7a72:	4413      	add	r3, r2
    7a74:	009b      	lsls	r3, r3, #2
    7a76:	440b      	add	r3, r1
    7a78:	3304      	adds	r3, #4
    7a7a:	681b      	ldr	r3, [r3, #0]
    7a7c:	f003 030c 	and.w	r3, r3, #12
    7a80:	2b00      	cmp	r3, #0
    7a82:	d120      	bne.n	7ac6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7a84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a88:	4930      	ldr	r1, [pc, #192]	; (7b4c <_pwm_init+0x1f4>)
    7a8a:	4613      	mov	r3, r2
    7a8c:	009b      	lsls	r3, r3, #2
    7a8e:	4413      	add	r3, r2
    7a90:	009b      	lsls	r3, r3, #2
    7a92:	440b      	add	r3, r1
    7a94:	330c      	adds	r3, #12
    7a96:	681b      	ldr	r3, [r3, #0]
    7a98:	b29b      	uxth	r3, r3
    7a9a:	461a      	mov	r2, r3
    7a9c:	2100      	movs	r1, #0
    7a9e:	6838      	ldr	r0, [r7, #0]
    7aa0:	4b2f      	ldr	r3, [pc, #188]	; (7b60 <_pwm_init+0x208>)
    7aa2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7aa4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7aa8:	4928      	ldr	r1, [pc, #160]	; (7b4c <_pwm_init+0x1f4>)
    7aaa:	4613      	mov	r3, r2
    7aac:	009b      	lsls	r3, r3, #2
    7aae:	4413      	add	r3, r2
    7ab0:	009b      	lsls	r3, r3, #2
    7ab2:	440b      	add	r3, r1
    7ab4:	3310      	adds	r3, #16
    7ab6:	681b      	ldr	r3, [r3, #0]
    7ab8:	b29b      	uxth	r3, r3
    7aba:	461a      	mov	r2, r3
    7abc:	2101      	movs	r1, #1
    7abe:	6838      	ldr	r0, [r7, #0]
    7ac0:	4b27      	ldr	r3, [pc, #156]	; (7b60 <_pwm_init+0x208>)
    7ac2:	4798      	blx	r3
    7ac4:	e002      	b.n	7acc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7ac6:	f04f 33ff 	mov.w	r3, #4294967295
    7aca:	e02e      	b.n	7b2a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7acc:	6879      	ldr	r1, [r7, #4]
    7ace:	6838      	ldr	r0, [r7, #0]
    7ad0:	4b24      	ldr	r3, [pc, #144]	; (7b64 <_pwm_init+0x20c>)
    7ad2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7ad4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ad8:	491c      	ldr	r1, [pc, #112]	; (7b4c <_pwm_init+0x1f4>)
    7ada:	4613      	mov	r3, r2
    7adc:	009b      	lsls	r3, r3, #2
    7ade:	4413      	add	r3, r2
    7ae0:	009b      	lsls	r3, r3, #2
    7ae2:	440b      	add	r3, r1
    7ae4:	3302      	adds	r3, #2
    7ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
    7aea:	4618      	mov	r0, r3
    7aec:	4b1e      	ldr	r3, [pc, #120]	; (7b68 <_pwm_init+0x210>)
    7aee:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7af0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7af4:	4915      	ldr	r1, [pc, #84]	; (7b4c <_pwm_init+0x1f4>)
    7af6:	4613      	mov	r3, r2
    7af8:	009b      	lsls	r3, r3, #2
    7afa:	4413      	add	r3, r2
    7afc:	009b      	lsls	r3, r3, #2
    7afe:	440b      	add	r3, r1
    7b00:	3302      	adds	r3, #2
    7b02:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b06:	4618      	mov	r0, r3
    7b08:	4b18      	ldr	r3, [pc, #96]	; (7b6c <_pwm_init+0x214>)
    7b0a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7b0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b10:	490e      	ldr	r1, [pc, #56]	; (7b4c <_pwm_init+0x1f4>)
    7b12:	4613      	mov	r3, r2
    7b14:	009b      	lsls	r3, r3, #2
    7b16:	4413      	add	r3, r2
    7b18:	009b      	lsls	r3, r3, #2
    7b1a:	440b      	add	r3, r1
    7b1c:	3302      	adds	r3, #2
    7b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b22:	4618      	mov	r0, r3
    7b24:	4b12      	ldr	r3, [pc, #72]	; (7b70 <_pwm_init+0x218>)
    7b26:	4798      	blx	r3

	return 0;
    7b28:	2300      	movs	r3, #0
}
    7b2a:	4618      	mov	r0, r3
    7b2c:	3710      	adds	r7, #16
    7b2e:	46bd      	mov	sp, r7
    7b30:	bd80      	pop	{r7, pc}
    7b32:	bf00      	nop
    7b34:	00007ef9 	.word	0x00007ef9
    7b38:	0000731d 	.word	0x0000731d
    7b3c:	000074bd 	.word	0x000074bd
    7b40:	0000746d 	.word	0x0000746d
    7b44:	000072f9 	.word	0x000072f9
    7b48:	000074ed 	.word	0x000074ed
    7b4c:	20000110 	.word	0x20000110
    7b50:	0000754d 	.word	0x0000754d
    7b54:	00007511 	.word	0x00007511
    7b58:	0000752f 	.word	0x0000752f
    7b5c:	0000764d 	.word	0x0000764d
    7b60:	000075e9 	.word	0x000075e9
    7b64:	00007f61 	.word	0x00007f61
    7b68:	00007279 	.word	0x00007279
    7b6c:	000072bd 	.word	0x000072bd
    7b70:	0000723d 	.word	0x0000723d

00007b74 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7b74:	b580      	push	{r7, lr}
    7b76:	b084      	sub	sp, #16
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	68db      	ldr	r3, [r3, #12]
    7b80:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7b82:	68f8      	ldr	r0, [r7, #12]
    7b84:	4b10      	ldr	r3, [pc, #64]	; (7bc8 <_tc_timer_deinit+0x54>)
    7b86:	4798      	blx	r3
    7b88:	4603      	mov	r3, r0
    7b8a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7b8c:	22f9      	movs	r2, #249	; 0xf9
    7b8e:	490f      	ldr	r1, [pc, #60]	; (7bcc <_tc_timer_deinit+0x58>)
    7b90:	2001      	movs	r0, #1
    7b92:	4b0f      	ldr	r3, [pc, #60]	; (7bd0 <_tc_timer_deinit+0x5c>)
    7b94:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7b96:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7b9a:	490e      	ldr	r1, [pc, #56]	; (7bd4 <_tc_timer_deinit+0x60>)
    7b9c:	4613      	mov	r3, r2
    7b9e:	009b      	lsls	r3, r3, #2
    7ba0:	4413      	add	r3, r2
    7ba2:	009b      	lsls	r3, r3, #2
    7ba4:	440b      	add	r3, r1
    7ba6:	3302      	adds	r3, #2
    7ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
    7bac:	4618      	mov	r0, r3
    7bae:	4b0a      	ldr	r3, [pc, #40]	; (7bd8 <_tc_timer_deinit+0x64>)
    7bb0:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7bb2:	68f8      	ldr	r0, [r7, #12]
    7bb4:	4b09      	ldr	r3, [pc, #36]	; (7bdc <_tc_timer_deinit+0x68>)
    7bb6:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7bb8:	68f8      	ldr	r0, [r7, #12]
    7bba:	4b09      	ldr	r3, [pc, #36]	; (7be0 <_tc_timer_deinit+0x6c>)
    7bbc:	4798      	blx	r3
}
    7bbe:	bf00      	nop
    7bc0:	3710      	adds	r7, #16
    7bc2:	46bd      	mov	sp, r7
    7bc4:	bd80      	pop	{r7, pc}
    7bc6:	bf00      	nop
    7bc8:	00007ef9 	.word	0x00007ef9
    7bcc:	000113e0 	.word	0x000113e0
    7bd0:	0000337d 	.word	0x0000337d
    7bd4:	20000110 	.word	0x20000110
    7bd8:	00007279 	.word	0x00007279
    7bdc:	0000746d 	.word	0x0000746d
    7be0:	000073e5 	.word	0x000073e5

00007be4 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7be4:	b580      	push	{r7, lr}
    7be6:	b082      	sub	sp, #8
    7be8:	af00      	add	r7, sp, #0
    7bea:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	68db      	ldr	r3, [r3, #12]
    7bf0:	4618      	mov	r0, r3
    7bf2:	4b03      	ldr	r3, [pc, #12]	; (7c00 <_tc_timer_start+0x1c>)
    7bf4:	4798      	blx	r3
}
    7bf6:	bf00      	nop
    7bf8:	3708      	adds	r7, #8
    7bfa:	46bd      	mov	sp, r7
    7bfc:	bd80      	pop	{r7, pc}
    7bfe:	bf00      	nop
    7c00:	0000740d 	.word	0x0000740d

00007c04 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7c04:	b580      	push	{r7, lr}
    7c06:	b082      	sub	sp, #8
    7c08:	af00      	add	r7, sp, #0
    7c0a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	68db      	ldr	r3, [r3, #12]
    7c10:	4618      	mov	r0, r3
    7c12:	4b03      	ldr	r3, [pc, #12]	; (7c20 <_tc_timer_stop+0x1c>)
    7c14:	4798      	blx	r3
}
    7c16:	bf00      	nop
    7c18:	3708      	adds	r7, #8
    7c1a:	46bd      	mov	sp, r7
    7c1c:	bd80      	pop	{r7, pc}
    7c1e:	bf00      	nop
    7c20:	0000746d 	.word	0x0000746d

00007c24 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7c24:	b580      	push	{r7, lr}
    7c26:	b084      	sub	sp, #16
    7c28:	af00      	add	r7, sp, #0
    7c2a:	6078      	str	r0, [r7, #4]
    7c2c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7c2e:	687b      	ldr	r3, [r7, #4]
    7c30:	68db      	ldr	r3, [r3, #12]
    7c32:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c34:	68f8      	ldr	r0, [r7, #12]
    7c36:	4b14      	ldr	r3, [pc, #80]	; (7c88 <_tc_timer_set_period+0x64>)
    7c38:	4798      	blx	r3
    7c3a:	4603      	mov	r3, r0
    7c3c:	2b02      	cmp	r3, #2
    7c3e:	d105      	bne.n	7c4c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7c40:	683a      	ldr	r2, [r7, #0]
    7c42:	2100      	movs	r1, #0
    7c44:	68f8      	ldr	r0, [r7, #12]
    7c46:	4b11      	ldr	r3, [pc, #68]	; (7c8c <_tc_timer_set_period+0x68>)
    7c48:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7c4a:	e019      	b.n	7c80 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c4c:	68f8      	ldr	r0, [r7, #12]
    7c4e:	4b0e      	ldr	r3, [pc, #56]	; (7c88 <_tc_timer_set_period+0x64>)
    7c50:	4798      	blx	r3
    7c52:	4603      	mov	r3, r0
    7c54:	2b00      	cmp	r3, #0
    7c56:	d107      	bne.n	7c68 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7c58:	683b      	ldr	r3, [r7, #0]
    7c5a:	b29b      	uxth	r3, r3
    7c5c:	461a      	mov	r2, r3
    7c5e:	2100      	movs	r1, #0
    7c60:	68f8      	ldr	r0, [r7, #12]
    7c62:	4b0b      	ldr	r3, [pc, #44]	; (7c90 <_tc_timer_set_period+0x6c>)
    7c64:	4798      	blx	r3
}
    7c66:	e00b      	b.n	7c80 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c68:	68f8      	ldr	r0, [r7, #12]
    7c6a:	4b07      	ldr	r3, [pc, #28]	; (7c88 <_tc_timer_set_period+0x64>)
    7c6c:	4798      	blx	r3
    7c6e:	4603      	mov	r3, r0
    7c70:	2b01      	cmp	r3, #1
    7c72:	d105      	bne.n	7c80 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7c74:	683b      	ldr	r3, [r7, #0]
    7c76:	b2db      	uxtb	r3, r3
    7c78:	4619      	mov	r1, r3
    7c7a:	68f8      	ldr	r0, [r7, #12]
    7c7c:	4b05      	ldr	r3, [pc, #20]	; (7c94 <_tc_timer_set_period+0x70>)
    7c7e:	4798      	blx	r3
}
    7c80:	bf00      	nop
    7c82:	3710      	adds	r7, #16
    7c84:	46bd      	mov	sp, r7
    7c86:	bd80      	pop	{r7, pc}
    7c88:	00007495 	.word	0x00007495
    7c8c:	0000764d 	.word	0x0000764d
    7c90:	000075e9 	.word	0x000075e9
    7c94:	0000756d 	.word	0x0000756d

00007c98 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7c98:	b580      	push	{r7, lr}
    7c9a:	b084      	sub	sp, #16
    7c9c:	af00      	add	r7, sp, #0
    7c9e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ca0:	687b      	ldr	r3, [r7, #4]
    7ca2:	68db      	ldr	r3, [r3, #12]
    7ca4:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ca6:	68f8      	ldr	r0, [r7, #12]
    7ca8:	4b13      	ldr	r3, [pc, #76]	; (7cf8 <_tc_timer_get_period+0x60>)
    7caa:	4798      	blx	r3
    7cac:	4603      	mov	r3, r0
    7cae:	2b02      	cmp	r3, #2
    7cb0:	d105      	bne.n	7cbe <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7cb2:	2100      	movs	r1, #0
    7cb4:	68f8      	ldr	r0, [r7, #12]
    7cb6:	4b11      	ldr	r3, [pc, #68]	; (7cfc <_tc_timer_get_period+0x64>)
    7cb8:	4798      	blx	r3
    7cba:	4603      	mov	r3, r0
    7cbc:	e017      	b.n	7cee <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7cbe:	68f8      	ldr	r0, [r7, #12]
    7cc0:	4b0d      	ldr	r3, [pc, #52]	; (7cf8 <_tc_timer_get_period+0x60>)
    7cc2:	4798      	blx	r3
    7cc4:	4603      	mov	r3, r0
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d105      	bne.n	7cd6 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7cca:	2100      	movs	r1, #0
    7ccc:	68f8      	ldr	r0, [r7, #12]
    7cce:	4b0c      	ldr	r3, [pc, #48]	; (7d00 <_tc_timer_get_period+0x68>)
    7cd0:	4798      	blx	r3
    7cd2:	4603      	mov	r3, r0
    7cd4:	e00b      	b.n	7cee <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7cd6:	68f8      	ldr	r0, [r7, #12]
    7cd8:	4b07      	ldr	r3, [pc, #28]	; (7cf8 <_tc_timer_get_period+0x60>)
    7cda:	4798      	blx	r3
    7cdc:	4603      	mov	r3, r0
    7cde:	2b01      	cmp	r3, #1
    7ce0:	d104      	bne.n	7cec <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7ce2:	68f8      	ldr	r0, [r7, #12]
    7ce4:	4b07      	ldr	r3, [pc, #28]	; (7d04 <_tc_timer_get_period+0x6c>)
    7ce6:	4798      	blx	r3
    7ce8:	4603      	mov	r3, r0
    7cea:	e000      	b.n	7cee <_tc_timer_get_period+0x56>
	}

	return 0;
    7cec:	2300      	movs	r3, #0
}
    7cee:	4618      	mov	r0, r3
    7cf0:	3710      	adds	r7, #16
    7cf2:	46bd      	mov	sp, r7
    7cf4:	bd80      	pop	{r7, pc}
    7cf6:	bf00      	nop
    7cf8:	00007495 	.word	0x00007495
    7cfc:	0000767d 	.word	0x0000767d
    7d00:	0000761d 	.word	0x0000761d
    7d04:	00007595 	.word	0x00007595

00007d08 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7d08:	b580      	push	{r7, lr}
    7d0a:	b082      	sub	sp, #8
    7d0c:	af00      	add	r7, sp, #0
    7d0e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	68db      	ldr	r3, [r3, #12]
    7d14:	4618      	mov	r0, r3
    7d16:	4b03      	ldr	r3, [pc, #12]	; (7d24 <_tc_timer_is_started+0x1c>)
    7d18:	4798      	blx	r3
    7d1a:	4603      	mov	r3, r0
}
    7d1c:	4618      	mov	r0, r3
    7d1e:	3708      	adds	r7, #8
    7d20:	46bd      	mov	sp, r7
    7d22:	bd80      	pop	{r7, pc}
    7d24:	00007435 	.word	0x00007435

00007d28 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7d28:	b480      	push	{r7}
    7d2a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7d2c:	4b02      	ldr	r3, [pc, #8]	; (7d38 <_tc_get_timer+0x10>)
}
    7d2e:	4618      	mov	r0, r3
    7d30:	46bd      	mov	sp, r7
    7d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d36:	4770      	bx	lr
    7d38:	20000188 	.word	0x20000188

00007d3c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7d3c:	b480      	push	{r7}
    7d3e:	af00      	add	r7, sp, #0
	return NULL;
    7d40:	2300      	movs	r3, #0
}
    7d42:	4618      	mov	r0, r3
    7d44:	46bd      	mov	sp, r7
    7d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d4a:	4770      	bx	lr

00007d4c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7d4c:	b580      	push	{r7, lr}
    7d4e:	b084      	sub	sp, #16
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7d54:	687b      	ldr	r3, [r7, #4]
    7d56:	68db      	ldr	r3, [r3, #12]
    7d58:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7d5a:	68f8      	ldr	r0, [r7, #12]
    7d5c:	4b0e      	ldr	r3, [pc, #56]	; (7d98 <_tc_timer_set_irq+0x4c>)
    7d5e:	4798      	blx	r3
    7d60:	4603      	mov	r3, r0
    7d62:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7d64:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7d68:	490c      	ldr	r1, [pc, #48]	; (7d9c <_tc_timer_set_irq+0x50>)
    7d6a:	2001      	movs	r0, #1
    7d6c:	4b0c      	ldr	r3, [pc, #48]	; (7da0 <_tc_timer_set_irq+0x54>)
    7d6e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7d70:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7d74:	490b      	ldr	r1, [pc, #44]	; (7da4 <_tc_timer_set_irq+0x58>)
    7d76:	4613      	mov	r3, r2
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	4413      	add	r3, r2
    7d7c:	009b      	lsls	r3, r3, #2
    7d7e:	440b      	add	r3, r1
    7d80:	3302      	adds	r3, #2
    7d82:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d86:	b2db      	uxtb	r3, r3
    7d88:	4618      	mov	r0, r3
    7d8a:	4b07      	ldr	r3, [pc, #28]	; (7da8 <_tc_timer_set_irq+0x5c>)
    7d8c:	4798      	blx	r3
}
    7d8e:	bf00      	nop
    7d90:	3710      	adds	r7, #16
    7d92:	46bd      	mov	sp, r7
    7d94:	bd80      	pop	{r7, pc}
    7d96:	bf00      	nop
    7d98:	00007ef9 	.word	0x00007ef9
    7d9c:	000113e0 	.word	0x000113e0
    7da0:	0000337d 	.word	0x0000337d
    7da4:	20000110 	.word	0x20000110
    7da8:	00003bc5 	.word	0x00003bc5

00007dac <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7dac:	b580      	push	{r7, lr}
    7dae:	b084      	sub	sp, #16
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7db4:	687b      	ldr	r3, [r7, #4]
    7db6:	68db      	ldr	r3, [r3, #12]
    7db8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7dba:	68f8      	ldr	r0, [r7, #12]
    7dbc:	4b07      	ldr	r3, [pc, #28]	; (7ddc <tc_interrupt_handler+0x30>)
    7dbe:	4798      	blx	r3
    7dc0:	4603      	mov	r3, r0
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d006      	beq.n	7dd4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7dc6:	68f8      	ldr	r0, [r7, #12]
    7dc8:	4b05      	ldr	r3, [pc, #20]	; (7de0 <tc_interrupt_handler+0x34>)
    7dca:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	6878      	ldr	r0, [r7, #4]
    7dd2:	4798      	blx	r3
	}
}
    7dd4:	bf00      	nop
    7dd6:	3710      	adds	r7, #16
    7dd8:	46bd      	mov	sp, r7
    7dda:	bd80      	pop	{r7, pc}
    7ddc:	00007345 	.word	0x00007345
    7de0:	0000736d 	.word	0x0000736d

00007de4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7de4:	b580      	push	{r7, lr}
    7de6:	b084      	sub	sp, #16
    7de8:	af00      	add	r7, sp, #0
    7dea:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7dec:	687b      	ldr	r3, [r7, #4]
    7dee:	691b      	ldr	r3, [r3, #16]
    7df0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7df2:	68f8      	ldr	r0, [r7, #12]
    7df4:	4b12      	ldr	r3, [pc, #72]	; (7e40 <tc_pwm_interrupt_handler+0x5c>)
    7df6:	4798      	blx	r3
    7df8:	4603      	mov	r3, r0
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	d00a      	beq.n	7e14 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7dfe:	68f8      	ldr	r0, [r7, #12]
    7e00:	4b10      	ldr	r3, [pc, #64]	; (7e44 <tc_pwm_interrupt_handler+0x60>)
    7e02:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	681b      	ldr	r3, [r3, #0]
    7e08:	2b00      	cmp	r3, #0
    7e0a:	d003      	beq.n	7e14 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	681b      	ldr	r3, [r3, #0]
    7e10:	6878      	ldr	r0, [r7, #4]
    7e12:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7e14:	68f8      	ldr	r0, [r7, #12]
    7e16:	4b0c      	ldr	r3, [pc, #48]	; (7e48 <tc_pwm_interrupt_handler+0x64>)
    7e18:	4798      	blx	r3
    7e1a:	4603      	mov	r3, r0
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d00a      	beq.n	7e36 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7e20:	68f8      	ldr	r0, [r7, #12]
    7e22:	4b0a      	ldr	r3, [pc, #40]	; (7e4c <tc_pwm_interrupt_handler+0x68>)
    7e24:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7e26:	687b      	ldr	r3, [r7, #4]
    7e28:	685b      	ldr	r3, [r3, #4]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d003      	beq.n	7e36 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	685b      	ldr	r3, [r3, #4]
    7e32:	6878      	ldr	r0, [r7, #4]
    7e34:	4798      	blx	r3
		}
	}
}
    7e36:	bf00      	nop
    7e38:	3710      	adds	r7, #16
    7e3a:	46bd      	mov	sp, r7
    7e3c:	bd80      	pop	{r7, pc}
    7e3e:	bf00      	nop
    7e40:	00007345 	.word	0x00007345
    7e44:	0000736d 	.word	0x0000736d
    7e48:	000073bb 	.word	0x000073bb
    7e4c:	00007387 	.word	0x00007387

00007e50 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7e50:	b580      	push	{r7, lr}
    7e52:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7e54:	4b03      	ldr	r3, [pc, #12]	; (7e64 <TC0_Handler+0x14>)
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	4618      	mov	r0, r3
    7e5a:	4b03      	ldr	r3, [pc, #12]	; (7e68 <TC0_Handler+0x18>)
    7e5c:	4798      	blx	r3
}
    7e5e:	bf00      	nop
    7e60:	bd80      	pop	{r7, pc}
    7e62:	bf00      	nop
    7e64:	20000b38 	.word	0x20000b38
    7e68:	00007dad 	.word	0x00007dad

00007e6c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7e70:	4b03      	ldr	r3, [pc, #12]	; (7e80 <TC2_Handler+0x14>)
    7e72:	681b      	ldr	r3, [r3, #0]
    7e74:	4618      	mov	r0, r3
    7e76:	4b03      	ldr	r3, [pc, #12]	; (7e84 <TC2_Handler+0x18>)
    7e78:	4798      	blx	r3
}
    7e7a:	bf00      	nop
    7e7c:	bd80      	pop	{r7, pc}
    7e7e:	bf00      	nop
    7e80:	20000b3c 	.word	0x20000b3c
    7e84:	00007dad 	.word	0x00007dad

00007e88 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    7e88:	b580      	push	{r7, lr}
    7e8a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7e8c:	4b03      	ldr	r3, [pc, #12]	; (7e9c <TC4_Handler+0x14>)
    7e8e:	681b      	ldr	r3, [r3, #0]
    7e90:	4618      	mov	r0, r3
    7e92:	4b03      	ldr	r3, [pc, #12]	; (7ea0 <TC4_Handler+0x18>)
    7e94:	4798      	blx	r3
}
    7e96:	bf00      	nop
    7e98:	bd80      	pop	{r7, pc}
    7e9a:	bf00      	nop
    7e9c:	20000b40 	.word	0x20000b40
    7ea0:	00007dad 	.word	0x00007dad

00007ea4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    7ea8:	4b03      	ldr	r3, [pc, #12]	; (7eb8 <TC5_Handler+0x14>)
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	4618      	mov	r0, r3
    7eae:	4b03      	ldr	r3, [pc, #12]	; (7ebc <TC5_Handler+0x18>)
    7eb0:	4798      	blx	r3
}
    7eb2:	bf00      	nop
    7eb4:	bd80      	pop	{r7, pc}
    7eb6:	bf00      	nop
    7eb8:	20000b44 	.word	0x20000b44
    7ebc:	00007dad 	.word	0x00007dad

00007ec0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7ec0:	b580      	push	{r7, lr}
    7ec2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7ec4:	4b03      	ldr	r3, [pc, #12]	; (7ed4 <TC6_Handler+0x14>)
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	4618      	mov	r0, r3
    7eca:	4b03      	ldr	r3, [pc, #12]	; (7ed8 <TC6_Handler+0x18>)
    7ecc:	4798      	blx	r3
}
    7ece:	bf00      	nop
    7ed0:	bd80      	pop	{r7, pc}
    7ed2:	bf00      	nop
    7ed4:	20000b48 	.word	0x20000b48
    7ed8:	00007dad 	.word	0x00007dad

00007edc <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7edc:	b580      	push	{r7, lr}
    7ede:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7ee0:	4b03      	ldr	r3, [pc, #12]	; (7ef0 <TC7_Handler+0x14>)
    7ee2:	681b      	ldr	r3, [r3, #0]
    7ee4:	4618      	mov	r0, r3
    7ee6:	4b03      	ldr	r3, [pc, #12]	; (7ef4 <TC7_Handler+0x18>)
    7ee8:	4798      	blx	r3
}
    7eea:	bf00      	nop
    7eec:	bd80      	pop	{r7, pc}
    7eee:	bf00      	nop
    7ef0:	20000b4c 	.word	0x20000b4c
    7ef4:	00007de5 	.word	0x00007de5

00007ef8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b084      	sub	sp, #16
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7f00:	6878      	ldr	r0, [r7, #4]
    7f02:	4b13      	ldr	r3, [pc, #76]	; (7f50 <get_tc_index+0x58>)
    7f04:	4798      	blx	r3
    7f06:	4603      	mov	r3, r0
    7f08:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7f0a:	2300      	movs	r3, #0
    7f0c:	73fb      	strb	r3, [r7, #15]
    7f0e:	e010      	b.n	7f32 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7f10:	7bfa      	ldrb	r2, [r7, #15]
    7f12:	4910      	ldr	r1, [pc, #64]	; (7f54 <get_tc_index+0x5c>)
    7f14:	4613      	mov	r3, r2
    7f16:	009b      	lsls	r3, r3, #2
    7f18:	4413      	add	r3, r2
    7f1a:	009b      	lsls	r3, r3, #2
    7f1c:	440b      	add	r3, r1
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	7bba      	ldrb	r2, [r7, #14]
    7f22:	429a      	cmp	r2, r3
    7f24:	d102      	bne.n	7f2c <get_tc_index+0x34>
			return i;
    7f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7f2a:	e00d      	b.n	7f48 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7f2c:	7bfb      	ldrb	r3, [r7, #15]
    7f2e:	3301      	adds	r3, #1
    7f30:	73fb      	strb	r3, [r7, #15]
    7f32:	7bfb      	ldrb	r3, [r7, #15]
    7f34:	2b05      	cmp	r3, #5
    7f36:	d9eb      	bls.n	7f10 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7f38:	f240 221d 	movw	r2, #541	; 0x21d
    7f3c:	4906      	ldr	r1, [pc, #24]	; (7f58 <get_tc_index+0x60>)
    7f3e:	2000      	movs	r0, #0
    7f40:	4b06      	ldr	r3, [pc, #24]	; (7f5c <get_tc_index+0x64>)
    7f42:	4798      	blx	r3
	return -1;
    7f44:	f04f 33ff 	mov.w	r3, #4294967295
}
    7f48:	4618      	mov	r0, r3
    7f4a:	3710      	adds	r7, #16
    7f4c:	46bd      	mov	sp, r7
    7f4e:	bd80      	pop	{r7, pc}
    7f50:	00007ffd 	.word	0x00007ffd
    7f54:	20000110 	.word	0x20000110
    7f58:	000113e0 	.word	0x000113e0
    7f5c:	0000337d 	.word	0x0000337d

00007f60 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7f60:	b480      	push	{r7}
    7f62:	b083      	sub	sp, #12
    7f64:	af00      	add	r7, sp, #0
    7f66:	6078      	str	r0, [r7, #4]
    7f68:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7f6a:	687b      	ldr	r3, [r7, #4]
    7f6c:	4a17      	ldr	r2, [pc, #92]	; (7fcc <_tc_init_irq_param+0x6c>)
    7f6e:	4293      	cmp	r3, r2
    7f70:	d102      	bne.n	7f78 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7f72:	4a17      	ldr	r2, [pc, #92]	; (7fd0 <_tc_init_irq_param+0x70>)
    7f74:	683b      	ldr	r3, [r7, #0]
    7f76:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	4a16      	ldr	r2, [pc, #88]	; (7fd4 <_tc_init_irq_param+0x74>)
    7f7c:	4293      	cmp	r3, r2
    7f7e:	d102      	bne.n	7f86 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    7f80:	4a15      	ldr	r2, [pc, #84]	; (7fd8 <_tc_init_irq_param+0x78>)
    7f82:	683b      	ldr	r3, [r7, #0]
    7f84:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	4a14      	ldr	r2, [pc, #80]	; (7fdc <_tc_init_irq_param+0x7c>)
    7f8a:	4293      	cmp	r3, r2
    7f8c:	d102      	bne.n	7f94 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    7f8e:	4a14      	ldr	r2, [pc, #80]	; (7fe0 <_tc_init_irq_param+0x80>)
    7f90:	683b      	ldr	r3, [r7, #0]
    7f92:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	4a13      	ldr	r2, [pc, #76]	; (7fe4 <_tc_init_irq_param+0x84>)
    7f98:	4293      	cmp	r3, r2
    7f9a:	d102      	bne.n	7fa2 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    7f9c:	4a12      	ldr	r2, [pc, #72]	; (7fe8 <_tc_init_irq_param+0x88>)
    7f9e:	683b      	ldr	r3, [r7, #0]
    7fa0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	4a11      	ldr	r2, [pc, #68]	; (7fec <_tc_init_irq_param+0x8c>)
    7fa6:	4293      	cmp	r3, r2
    7fa8:	d102      	bne.n	7fb0 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    7faa:	4a11      	ldr	r2, [pc, #68]	; (7ff0 <_tc_init_irq_param+0x90>)
    7fac:	683b      	ldr	r3, [r7, #0]
    7fae:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	4a10      	ldr	r2, [pc, #64]	; (7ff4 <_tc_init_irq_param+0x94>)
    7fb4:	4293      	cmp	r3, r2
    7fb6:	d102      	bne.n	7fbe <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    7fb8:	4a0f      	ldr	r2, [pc, #60]	; (7ff8 <_tc_init_irq_param+0x98>)
    7fba:	683b      	ldr	r3, [r7, #0]
    7fbc:	6013      	str	r3, [r2, #0]
	}
}
    7fbe:	bf00      	nop
    7fc0:	370c      	adds	r7, #12
    7fc2:	46bd      	mov	sp, r7
    7fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc8:	4770      	bx	lr
    7fca:	bf00      	nop
    7fcc:	40003800 	.word	0x40003800
    7fd0:	20000b38 	.word	0x20000b38
    7fd4:	4101a000 	.word	0x4101a000
    7fd8:	20000b3c 	.word	0x20000b3c
    7fdc:	42001400 	.word	0x42001400
    7fe0:	20000b40 	.word	0x20000b40
    7fe4:	42001800 	.word	0x42001800
    7fe8:	20000b44 	.word	0x20000b44
    7fec:	43001400 	.word	0x43001400
    7ff0:	20000b48 	.word	0x20000b48
    7ff4:	43001800 	.word	0x43001800
    7ff8:	20000b4c 	.word	0x20000b4c

00007ffc <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7ffc:	b4b0      	push	{r4, r5, r7}
    7ffe:	b08d      	sub	sp, #52	; 0x34
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8004:	4b13      	ldr	r3, [pc, #76]	; (8054 <_get_hardware_offset+0x58>)
    8006:	f107 040c 	add.w	r4, r7, #12
    800a:	461d      	mov	r5, r3
    800c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    800e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8010:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8018:	2300      	movs	r3, #0
    801a:	62fb      	str	r3, [r7, #44]	; 0x2c
    801c:	e010      	b.n	8040 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8020:	009b      	lsls	r3, r3, #2
    8022:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8026:	4413      	add	r3, r2
    8028:	f853 3c24 	ldr.w	r3, [r3, #-36]
    802c:	461a      	mov	r2, r3
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	429a      	cmp	r2, r3
    8032:	d102      	bne.n	803a <_get_hardware_offset+0x3e>
			return i;
    8034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8036:	b2db      	uxtb	r3, r3
    8038:	e006      	b.n	8048 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    803c:	3301      	adds	r3, #1
    803e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8042:	2b07      	cmp	r3, #7
    8044:	d9eb      	bls.n	801e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8046:	2300      	movs	r3, #0
}
    8048:	4618      	mov	r0, r3
    804a:	3734      	adds	r7, #52	; 0x34
    804c:	46bd      	mov	sp, r7
    804e:	bcb0      	pop	{r4, r5, r7}
    8050:	4770      	bx	lr
    8052:	bf00      	nop
    8054:	000113f4 	.word	0x000113f4

00008058 <__NVIC_EnableIRQ>:
{
    8058:	b480      	push	{r7}
    805a:	b083      	sub	sp, #12
    805c:	af00      	add	r7, sp, #0
    805e:	4603      	mov	r3, r0
    8060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8066:	2b00      	cmp	r3, #0
    8068:	db0b      	blt.n	8082 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    806a:	4909      	ldr	r1, [pc, #36]	; (8090 <__NVIC_EnableIRQ+0x38>)
    806c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8070:	095b      	lsrs	r3, r3, #5
    8072:	88fa      	ldrh	r2, [r7, #6]
    8074:	f002 021f 	and.w	r2, r2, #31
    8078:	2001      	movs	r0, #1
    807a:	fa00 f202 	lsl.w	r2, r0, r2
    807e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8082:	bf00      	nop
    8084:	370c      	adds	r7, #12
    8086:	46bd      	mov	sp, r7
    8088:	f85d 7b04 	ldr.w	r7, [sp], #4
    808c:	4770      	bx	lr
    808e:	bf00      	nop
    8090:	e000e100 	.word	0xe000e100

00008094 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8094:	b480      	push	{r7}
    8096:	b087      	sub	sp, #28
    8098:	af00      	add	r7, sp, #0
    809a:	60f8      	str	r0, [r7, #12]
    809c:	460b      	mov	r3, r1
    809e:	607a      	str	r2, [r7, #4]
    80a0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    80a2:	7afa      	ldrb	r2, [r7, #11]
    80a4:	68f9      	ldr	r1, [r7, #12]
    80a6:	4613      	mov	r3, r2
    80a8:	009b      	lsls	r3, r3, #2
    80aa:	4413      	add	r3, r2
    80ac:	009b      	lsls	r3, r3, #2
    80ae:	440b      	add	r3, r1
    80b0:	3340      	adds	r3, #64	; 0x40
    80b2:	681b      	ldr	r3, [r3, #0]
    80b4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    80b6:	697a      	ldr	r2, [r7, #20]
    80b8:	687b      	ldr	r3, [r7, #4]
    80ba:	4013      	ands	r3, r2
    80bc:	617b      	str	r3, [r7, #20]
	return tmp;
    80be:	697b      	ldr	r3, [r7, #20]
}
    80c0:	4618      	mov	r0, r3
    80c2:	371c      	adds	r7, #28
    80c4:	46bd      	mov	sp, r7
    80c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ca:	4770      	bx	lr

000080cc <hri_oscctrl_get_STATUS_reg>:
{
    80cc:	b480      	push	{r7}
    80ce:	b085      	sub	sp, #20
    80d0:	af00      	add	r7, sp, #0
    80d2:	6078      	str	r0, [r7, #4]
    80d4:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    80d6:	687b      	ldr	r3, [r7, #4]
    80d8:	691b      	ldr	r3, [r3, #16]
    80da:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    80dc:	68fa      	ldr	r2, [r7, #12]
    80de:	683b      	ldr	r3, [r7, #0]
    80e0:	4013      	ands	r3, r2
    80e2:	60fb      	str	r3, [r7, #12]
	return tmp;
    80e4:	68fb      	ldr	r3, [r7, #12]
}
    80e6:	4618      	mov	r0, r3
    80e8:	3714      	adds	r7, #20
    80ea:	46bd      	mov	sp, r7
    80ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f0:	4770      	bx	lr

000080f2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    80f2:	b480      	push	{r7}
    80f4:	b085      	sub	sp, #20
    80f6:	af00      	add	r7, sp, #0
    80f8:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    80fa:	687b      	ldr	r3, [r7, #4]
    80fc:	f893 3020 	ldrb.w	r3, [r3, #32]
    8100:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8102:	7bfb      	ldrb	r3, [r7, #15]
    8104:	f003 0301 	and.w	r3, r3, #1
    8108:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    810a:	7bfb      	ldrb	r3, [r7, #15]
    810c:	2b00      	cmp	r3, #0
    810e:	bf14      	ite	ne
    8110:	2301      	movne	r3, #1
    8112:	2300      	moveq	r3, #0
    8114:	b2db      	uxtb	r3, r3
}
    8116:	4618      	mov	r0, r3
    8118:	3714      	adds	r7, #20
    811a:	46bd      	mov	sp, r7
    811c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8120:	4770      	bx	lr

00008122 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8122:	b480      	push	{r7}
    8124:	b083      	sub	sp, #12
    8126:	af00      	add	r7, sp, #0
    8128:	6078      	str	r0, [r7, #4]
    812a:	460b      	mov	r3, r1
    812c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    812e:	bf00      	nop
    8130:	687b      	ldr	r3, [r7, #4]
    8132:	789b      	ldrb	r3, [r3, #2]
    8134:	b2da      	uxtb	r2, r3
    8136:	78fb      	ldrb	r3, [r7, #3]
    8138:	4013      	ands	r3, r2
    813a:	b2db      	uxtb	r3, r3
    813c:	2b00      	cmp	r3, #0
    813e:	d1f7      	bne.n	8130 <hri_usb_wait_for_sync+0xe>
	};
}
    8140:	bf00      	nop
    8142:	370c      	adds	r7, #12
    8144:	46bd      	mov	sp, r7
    8146:	f85d 7b04 	ldr.w	r7, [sp], #4
    814a:	4770      	bx	lr

0000814c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    814c:	b480      	push	{r7}
    814e:	b083      	sub	sp, #12
    8150:	af00      	add	r7, sp, #0
    8152:	6078      	str	r0, [r7, #4]
    8154:	460b      	mov	r3, r1
    8156:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	789b      	ldrb	r3, [r3, #2]
    815c:	b2da      	uxtb	r2, r3
    815e:	78fb      	ldrb	r3, [r7, #3]
    8160:	4013      	ands	r3, r2
    8162:	b2db      	uxtb	r3, r3
    8164:	2b00      	cmp	r3, #0
    8166:	bf14      	ite	ne
    8168:	2301      	movne	r3, #1
    816a:	2300      	moveq	r3, #0
    816c:	b2db      	uxtb	r3, r3
}
    816e:	4618      	mov	r0, r3
    8170:	370c      	adds	r7, #12
    8172:	46bd      	mov	sp, r7
    8174:	f85d 7b04 	ldr.w	r7, [sp], #4
    8178:	4770      	bx	lr

0000817a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    817a:	b480      	push	{r7}
    817c:	b085      	sub	sp, #20
    817e:	af00      	add	r7, sp, #0
    8180:	6078      	str	r0, [r7, #4]
    8182:	460b      	mov	r3, r1
    8184:	70fb      	strb	r3, [r7, #3]
    8186:	4613      	mov	r3, r2
    8188:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    818a:	78fb      	ldrb	r3, [r7, #3]
    818c:	687a      	ldr	r2, [r7, #4]
    818e:	3308      	adds	r3, #8
    8190:	015b      	lsls	r3, r3, #5
    8192:	4413      	add	r3, r2
    8194:	3307      	adds	r3, #7
    8196:	781b      	ldrb	r3, [r3, #0]
    8198:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    819a:	7bfa      	ldrb	r2, [r7, #15]
    819c:	78bb      	ldrb	r3, [r7, #2]
    819e:	4013      	ands	r3, r2
    81a0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    81a2:	7bfb      	ldrb	r3, [r7, #15]
}
    81a4:	4618      	mov	r0, r3
    81a6:	3714      	adds	r7, #20
    81a8:	46bd      	mov	sp, r7
    81aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ae:	4770      	bx	lr

000081b0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    81b0:	b480      	push	{r7}
    81b2:	b083      	sub	sp, #12
    81b4:	af00      	add	r7, sp, #0
    81b6:	6078      	str	r0, [r7, #4]
    81b8:	460b      	mov	r3, r1
    81ba:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    81bc:	78fb      	ldrb	r3, [r7, #3]
    81be:	687a      	ldr	r2, [r7, #4]
    81c0:	3308      	adds	r3, #8
    81c2:	015b      	lsls	r3, r3, #5
    81c4:	4413      	add	r3, r2
    81c6:	3307      	adds	r3, #7
    81c8:	781b      	ldrb	r3, [r3, #0]
    81ca:	b2db      	uxtb	r3, r3
}
    81cc:	4618      	mov	r0, r3
    81ce:	370c      	adds	r7, #12
    81d0:	46bd      	mov	sp, r7
    81d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81d6:	4770      	bx	lr

000081d8 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    81d8:	b480      	push	{r7}
    81da:	b083      	sub	sp, #12
    81dc:	af00      	add	r7, sp, #0
    81de:	6078      	str	r0, [r7, #4]
    81e0:	460b      	mov	r3, r1
    81e2:	70fb      	strb	r3, [r7, #3]
    81e4:	4613      	mov	r3, r2
    81e6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    81e8:	78fb      	ldrb	r3, [r7, #3]
    81ea:	687a      	ldr	r2, [r7, #4]
    81ec:	3308      	adds	r3, #8
    81ee:	015b      	lsls	r3, r3, #5
    81f0:	4413      	add	r3, r2
    81f2:	3307      	adds	r3, #7
    81f4:	78ba      	ldrb	r2, [r7, #2]
    81f6:	701a      	strb	r2, [r3, #0]
}
    81f8:	bf00      	nop
    81fa:	370c      	adds	r7, #12
    81fc:	46bd      	mov	sp, r7
    81fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8202:	4770      	bx	lr

00008204 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8204:	b480      	push	{r7}
    8206:	b083      	sub	sp, #12
    8208:	af00      	add	r7, sp, #0
    820a:	6078      	str	r0, [r7, #4]
    820c:	460b      	mov	r3, r1
    820e:	70fb      	strb	r3, [r7, #3]
    8210:	4613      	mov	r3, r2
    8212:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8214:	78fb      	ldrb	r3, [r7, #3]
    8216:	687a      	ldr	r2, [r7, #4]
    8218:	3308      	adds	r3, #8
    821a:	015b      	lsls	r3, r3, #5
    821c:	4413      	add	r3, r2
    821e:	3305      	adds	r3, #5
    8220:	78ba      	ldrb	r2, [r7, #2]
    8222:	701a      	strb	r2, [r3, #0]
}
    8224:	bf00      	nop
    8226:	370c      	adds	r7, #12
    8228:	46bd      	mov	sp, r7
    822a:	f85d 7b04 	ldr.w	r7, [sp], #4
    822e:	4770      	bx	lr

00008230 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8230:	b480      	push	{r7}
    8232:	b083      	sub	sp, #12
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
    8238:	460b      	mov	r3, r1
    823a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    823c:	78fb      	ldrb	r3, [r7, #3]
    823e:	687a      	ldr	r2, [r7, #4]
    8240:	3308      	adds	r3, #8
    8242:	015b      	lsls	r3, r3, #5
    8244:	4413      	add	r3, r2
    8246:	3306      	adds	r3, #6
    8248:	781b      	ldrb	r3, [r3, #0]
    824a:	b2db      	uxtb	r3, r3
}
    824c:	4618      	mov	r0, r3
    824e:	370c      	adds	r7, #12
    8250:	46bd      	mov	sp, r7
    8252:	f85d 7b04 	ldr.w	r7, [sp], #4
    8256:	4770      	bx	lr

00008258 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8258:	b480      	push	{r7}
    825a:	b083      	sub	sp, #12
    825c:	af00      	add	r7, sp, #0
    825e:	6078      	str	r0, [r7, #4]
    8260:	460b      	mov	r3, r1
    8262:	70fb      	strb	r3, [r7, #3]
    8264:	4613      	mov	r3, r2
    8266:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8268:	78fb      	ldrb	r3, [r7, #3]
    826a:	687a      	ldr	r2, [r7, #4]
    826c:	3308      	adds	r3, #8
    826e:	015b      	lsls	r3, r3, #5
    8270:	4413      	add	r3, r2
    8272:	3304      	adds	r3, #4
    8274:	78ba      	ldrb	r2, [r7, #2]
    8276:	701a      	strb	r2, [r3, #0]
}
    8278:	bf00      	nop
    827a:	370c      	adds	r7, #12
    827c:	46bd      	mov	sp, r7
    827e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8282:	4770      	bx	lr

00008284 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8284:	b480      	push	{r7}
    8286:	b083      	sub	sp, #12
    8288:	af00      	add	r7, sp, #0
    828a:	6078      	str	r0, [r7, #4]
    828c:	460b      	mov	r3, r1
    828e:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8290:	78fb      	ldrb	r3, [r7, #3]
    8292:	687a      	ldr	r2, [r7, #4]
    8294:	015b      	lsls	r3, r3, #5
    8296:	4413      	add	r3, r2
    8298:	f503 7384 	add.w	r3, r3, #264	; 0x108
    829c:	2210      	movs	r2, #16
    829e:	701a      	strb	r2, [r3, #0]
}
    82a0:	bf00      	nop
    82a2:	370c      	adds	r7, #12
    82a4:	46bd      	mov	sp, r7
    82a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82aa:	4770      	bx	lr

000082ac <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    82ac:	b480      	push	{r7}
    82ae:	b083      	sub	sp, #12
    82b0:	af00      	add	r7, sp, #0
    82b2:	6078      	str	r0, [r7, #4]
    82b4:	460b      	mov	r3, r1
    82b6:	70fb      	strb	r3, [r7, #3]
    82b8:	4613      	mov	r3, r2
    82ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    82bc:	78fb      	ldrb	r3, [r7, #3]
    82be:	687a      	ldr	r2, [r7, #4]
    82c0:	015b      	lsls	r3, r3, #5
    82c2:	4413      	add	r3, r2
    82c4:	f203 1309 	addw	r3, r3, #265	; 0x109
    82c8:	78ba      	ldrb	r2, [r7, #2]
    82ca:	701a      	strb	r2, [r3, #0]
}
    82cc:	bf00      	nop
    82ce:	370c      	adds	r7, #12
    82d0:	46bd      	mov	sp, r7
    82d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    82d6:	4770      	bx	lr

000082d8 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    82d8:	b480      	push	{r7}
    82da:	b083      	sub	sp, #12
    82dc:	af00      	add	r7, sp, #0
    82de:	6078      	str	r0, [r7, #4]
    82e0:	460b      	mov	r3, r1
    82e2:	70fb      	strb	r3, [r7, #3]
    82e4:	4613      	mov	r3, r2
    82e6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    82e8:	78fb      	ldrb	r3, [r7, #3]
    82ea:	687a      	ldr	r2, [r7, #4]
    82ec:	015b      	lsls	r3, r3, #5
    82ee:	4413      	add	r3, r2
    82f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    82f4:	78ba      	ldrb	r2, [r7, #2]
    82f6:	701a      	strb	r2, [r3, #0]
}
    82f8:	bf00      	nop
    82fa:	370c      	adds	r7, #12
    82fc:	46bd      	mov	sp, r7
    82fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8302:	4770      	bx	lr

00008304 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8304:	b480      	push	{r7}
    8306:	b085      	sub	sp, #20
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
    830c:	460b      	mov	r3, r1
    830e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8310:	78fb      	ldrb	r3, [r7, #3]
    8312:	687a      	ldr	r2, [r7, #4]
    8314:	3308      	adds	r3, #8
    8316:	015b      	lsls	r3, r3, #5
    8318:	4413      	add	r3, r2
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    831e:	7bfb      	ldrb	r3, [r7, #15]
    8320:	f003 0307 	and.w	r3, r3, #7
    8324:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8326:	7bfb      	ldrb	r3, [r7, #15]
}
    8328:	4618      	mov	r0, r3
    832a:	3714      	adds	r7, #20
    832c:	46bd      	mov	sp, r7
    832e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8332:	4770      	bx	lr

00008334 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8334:	b480      	push	{r7}
    8336:	b085      	sub	sp, #20
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
    833c:	460b      	mov	r3, r1
    833e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8340:	78fb      	ldrb	r3, [r7, #3]
    8342:	687a      	ldr	r2, [r7, #4]
    8344:	3308      	adds	r3, #8
    8346:	015b      	lsls	r3, r3, #5
    8348:	4413      	add	r3, r2
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    834e:	7bfb      	ldrb	r3, [r7, #15]
    8350:	091b      	lsrs	r3, r3, #4
    8352:	b2db      	uxtb	r3, r3
    8354:	f003 0307 	and.w	r3, r3, #7
    8358:	73fb      	strb	r3, [r7, #15]
	return tmp;
    835a:	7bfb      	ldrb	r3, [r7, #15]
}
    835c:	4618      	mov	r0, r3
    835e:	3714      	adds	r7, #20
    8360:	46bd      	mov	sp, r7
    8362:	f85d 7b04 	ldr.w	r7, [sp], #4
    8366:	4770      	bx	lr

00008368 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8368:	b480      	push	{r7}
    836a:	b083      	sub	sp, #12
    836c:	af00      	add	r7, sp, #0
    836e:	6078      	str	r0, [r7, #4]
    8370:	460b      	mov	r3, r1
    8372:	70fb      	strb	r3, [r7, #3]
    8374:	4613      	mov	r3, r2
    8376:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8378:	78fb      	ldrb	r3, [r7, #3]
    837a:	687a      	ldr	r2, [r7, #4]
    837c:	3308      	adds	r3, #8
    837e:	015b      	lsls	r3, r3, #5
    8380:	4413      	add	r3, r2
    8382:	78ba      	ldrb	r2, [r7, #2]
    8384:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8386:	bf00      	nop
    8388:	370c      	adds	r7, #12
    838a:	46bd      	mov	sp, r7
    838c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8390:	4770      	bx	lr

00008392 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8392:	b480      	push	{r7}
    8394:	b083      	sub	sp, #12
    8396:	af00      	add	r7, sp, #0
    8398:	6078      	str	r0, [r7, #4]
    839a:	460b      	mov	r3, r1
    839c:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    839e:	78fb      	ldrb	r3, [r7, #3]
    83a0:	687a      	ldr	r2, [r7, #4]
    83a2:	3308      	adds	r3, #8
    83a4:	015b      	lsls	r3, r3, #5
    83a6:	4413      	add	r3, r2
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	b2db      	uxtb	r3, r3
}
    83ac:	4618      	mov	r0, r3
    83ae:	370c      	adds	r7, #12
    83b0:	46bd      	mov	sp, r7
    83b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83b6:	4770      	bx	lr

000083b8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    83b8:	b480      	push	{r7}
    83ba:	b083      	sub	sp, #12
    83bc:	af00      	add	r7, sp, #0
    83be:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    83c0:	687b      	ldr	r3, [r7, #4]
    83c2:	8b9b      	ldrh	r3, [r3, #28]
    83c4:	b29b      	uxth	r3, r3
}
    83c6:	4618      	mov	r0, r3
    83c8:	370c      	adds	r7, #12
    83ca:	46bd      	mov	sp, r7
    83cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d0:	4770      	bx	lr

000083d2 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    83d2:	b480      	push	{r7}
    83d4:	b083      	sub	sp, #12
    83d6:	af00      	add	r7, sp, #0
    83d8:	6078      	str	r0, [r7, #4]
    83da:	460b      	mov	r3, r1
    83dc:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	887a      	ldrh	r2, [r7, #2]
    83e2:	839a      	strh	r2, [r3, #28]
}
    83e4:	bf00      	nop
    83e6:	370c      	adds	r7, #12
    83e8:	46bd      	mov	sp, r7
    83ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ee:	4770      	bx	lr

000083f0 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    83f0:	b480      	push	{r7}
    83f2:	b083      	sub	sp, #12
    83f4:	af00      	add	r7, sp, #0
    83f6:	6078      	str	r0, [r7, #4]
    83f8:	460b      	mov	r3, r1
    83fa:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	887a      	ldrh	r2, [r7, #2]
    8400:	831a      	strh	r2, [r3, #24]
}
    8402:	bf00      	nop
    8404:	370c      	adds	r7, #12
    8406:	46bd      	mov	sp, r7
    8408:	f85d 7b04 	ldr.w	r7, [sp], #4
    840c:	4770      	bx	lr

0000840e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    840e:	b480      	push	{r7}
    8410:	b083      	sub	sp, #12
    8412:	af00      	add	r7, sp, #0
    8414:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8416:	687b      	ldr	r3, [r7, #4]
    8418:	8b1b      	ldrh	r3, [r3, #24]
    841a:	b29b      	uxth	r3, r3
}
    841c:	4618      	mov	r0, r3
    841e:	370c      	adds	r7, #12
    8420:	46bd      	mov	sp, r7
    8422:	f85d 7b04 	ldr.w	r7, [sp], #4
    8426:	4770      	bx	lr

00008428 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8428:	b480      	push	{r7}
    842a:	b083      	sub	sp, #12
    842c:	af00      	add	r7, sp, #0
    842e:	6078      	str	r0, [r7, #4]
    8430:	460b      	mov	r3, r1
    8432:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8434:	687b      	ldr	r3, [r7, #4]
    8436:	887a      	ldrh	r2, [r7, #2]
    8438:	829a      	strh	r2, [r3, #20]
}
    843a:	bf00      	nop
    843c:	370c      	adds	r7, #12
    843e:	46bd      	mov	sp, r7
    8440:	f85d 7b04 	ldr.w	r7, [sp], #4
    8444:	4770      	bx	lr

00008446 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8446:	b480      	push	{r7}
    8448:	b085      	sub	sp, #20
    844a:	af00      	add	r7, sp, #0
    844c:	6078      	str	r0, [r7, #4]
    844e:	460b      	mov	r3, r1
    8450:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	789b      	ldrb	r3, [r3, #2]
    8456:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8458:	7bfa      	ldrb	r2, [r7, #15]
    845a:	78fb      	ldrb	r3, [r7, #3]
    845c:	4013      	ands	r3, r2
    845e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8460:	7bfb      	ldrb	r3, [r7, #15]
}
    8462:	4618      	mov	r0, r3
    8464:	3714      	adds	r7, #20
    8466:	46bd      	mov	sp, r7
    8468:	f85d 7b04 	ldr.w	r7, [sp], #4
    846c:	4770      	bx	lr
	...

00008470 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8470:	b580      	push	{r7, lr}
    8472:	b082      	sub	sp, #8
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8478:	687b      	ldr	r3, [r7, #4]
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	b2db      	uxtb	r3, r3
    847e:	f023 0302 	bic.w	r3, r3, #2
    8482:	b2da      	uxtb	r2, r3
    8484:	687b      	ldr	r3, [r7, #4]
    8486:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8488:	2103      	movs	r1, #3
    848a:	6878      	ldr	r0, [r7, #4]
    848c:	4b02      	ldr	r3, [pc, #8]	; (8498 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    848e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8490:	bf00      	nop
    8492:	3708      	adds	r7, #8
    8494:	46bd      	mov	sp, r7
    8496:	bd80      	pop	{r7, pc}
    8498:	00008123 	.word	0x00008123

0000849c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    849c:	b580      	push	{r7, lr}
    849e:	b084      	sub	sp, #16
    84a0:	af00      	add	r7, sp, #0
    84a2:	6078      	str	r0, [r7, #4]
    84a4:	460b      	mov	r3, r1
    84a6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    84a8:	2103      	movs	r1, #3
    84aa:	6878      	ldr	r0, [r7, #4]
    84ac:	4b06      	ldr	r3, [pc, #24]	; (84c8 <hri_usb_get_CTRLA_reg+0x2c>)
    84ae:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    84b6:	7bfa      	ldrb	r2, [r7, #15]
    84b8:	78fb      	ldrb	r3, [r7, #3]
    84ba:	4013      	ands	r3, r2
    84bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    84be:	7bfb      	ldrb	r3, [r7, #15]
}
    84c0:	4618      	mov	r0, r3
    84c2:	3710      	adds	r7, #16
    84c4:	46bd      	mov	sp, r7
    84c6:	bd80      	pop	{r7, pc}
    84c8:	00008123 	.word	0x00008123

000084cc <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    84cc:	b580      	push	{r7, lr}
    84ce:	b082      	sub	sp, #8
    84d0:	af00      	add	r7, sp, #0
    84d2:	6078      	str	r0, [r7, #4]
    84d4:	460b      	mov	r3, r1
    84d6:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    84d8:	687b      	ldr	r3, [r7, #4]
    84da:	78fa      	ldrb	r2, [r7, #3]
    84dc:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    84de:	2103      	movs	r1, #3
    84e0:	6878      	ldr	r0, [r7, #4]
    84e2:	4b03      	ldr	r3, [pc, #12]	; (84f0 <hri_usb_write_CTRLA_reg+0x24>)
    84e4:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    84e6:	bf00      	nop
    84e8:	3708      	adds	r7, #8
    84ea:	46bd      	mov	sp, r7
    84ec:	bd80      	pop	{r7, pc}
    84ee:	bf00      	nop
    84f0:	00008123 	.word	0x00008123

000084f4 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    84f4:	b580      	push	{r7, lr}
    84f6:	b082      	sub	sp, #8
    84f8:	af00      	add	r7, sp, #0
    84fa:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    84fc:	2103      	movs	r1, #3
    84fe:	6878      	ldr	r0, [r7, #4]
    8500:	4b04      	ldr	r3, [pc, #16]	; (8514 <hri_usb_read_CTRLA_reg+0x20>)
    8502:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8504:	687b      	ldr	r3, [r7, #4]
    8506:	781b      	ldrb	r3, [r3, #0]
    8508:	b2db      	uxtb	r3, r3
}
    850a:	4618      	mov	r0, r3
    850c:	3708      	adds	r7, #8
    850e:	46bd      	mov	sp, r7
    8510:	bd80      	pop	{r7, pc}
    8512:	bf00      	nop
    8514:	00008123 	.word	0x00008123

00008518 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8518:	b480      	push	{r7}
    851a:	b083      	sub	sp, #12
    851c:	af00      	add	r7, sp, #0
    851e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8520:	687b      	ldr	r3, [r7, #4]
    8522:	891b      	ldrh	r3, [r3, #8]
    8524:	b29b      	uxth	r3, r3
    8526:	f023 0301 	bic.w	r3, r3, #1
    852a:	b29a      	uxth	r2, r3
    852c:	687b      	ldr	r3, [r7, #4]
    852e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8530:	bf00      	nop
    8532:	370c      	adds	r7, #12
    8534:	46bd      	mov	sp, r7
    8536:	f85d 7b04 	ldr.w	r7, [sp], #4
    853a:	4770      	bx	lr

0000853c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    853c:	b480      	push	{r7}
    853e:	b083      	sub	sp, #12
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
    8544:	460b      	mov	r3, r1
    8546:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8548:	687b      	ldr	r3, [r7, #4]
    854a:	887a      	ldrh	r2, [r7, #2]
    854c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    854e:	bf00      	nop
    8550:	370c      	adds	r7, #12
    8552:	46bd      	mov	sp, r7
    8554:	f85d 7b04 	ldr.w	r7, [sp], #4
    8558:	4770      	bx	lr

0000855a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    855a:	b480      	push	{r7}
    855c:	b083      	sub	sp, #12
    855e:	af00      	add	r7, sp, #0
    8560:	6078      	str	r0, [r7, #4]
    8562:	460b      	mov	r3, r1
    8564:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8566:	687b      	ldr	r3, [r7, #4]
    8568:	78fa      	ldrb	r2, [r7, #3]
    856a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    856c:	bf00      	nop
    856e:	370c      	adds	r7, #12
    8570:	46bd      	mov	sp, r7
    8572:	f85d 7b04 	ldr.w	r7, [sp], #4
    8576:	4770      	bx	lr

00008578 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8578:	b480      	push	{r7}
    857a:	b083      	sub	sp, #12
    857c:	af00      	add	r7, sp, #0
    857e:	6078      	str	r0, [r7, #4]
    8580:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8582:	687b      	ldr	r3, [r7, #4]
    8584:	683a      	ldr	r2, [r7, #0]
    8586:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8588:	bf00      	nop
    858a:	370c      	adds	r7, #12
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    859e:	2300      	movs	r3, #0
}
    85a0:	4618      	mov	r0, r3
    85a2:	370c      	adds	r7, #12
    85a4:	46bd      	mov	sp, r7
    85a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85aa:	4770      	bx	lr

000085ac <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    85ac:	b480      	push	{r7}
    85ae:	b085      	sub	sp, #20
    85b0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    85b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    85b6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    85b8:	4b28      	ldr	r3, [pc, #160]	; (865c <_usb_load_calib+0xb0>)
    85ba:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    85bc:	f003 031f 	and.w	r3, r3, #31
    85c0:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    85c2:	4b26      	ldr	r3, [pc, #152]	; (865c <_usb_load_calib+0xb0>)
    85c4:	681b      	ldr	r3, [r3, #0]
    85c6:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    85c8:	f003 031f 	and.w	r3, r3, #31
    85cc:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    85ce:	4b23      	ldr	r3, [pc, #140]	; (865c <_usb_load_calib+0xb0>)
    85d0:	681b      	ldr	r3, [r3, #0]
    85d2:	0a9b      	lsrs	r3, r3, #10
    85d4:	f003 0307 	and.w	r3, r3, #7
    85d8:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    85da:	68fb      	ldr	r3, [r7, #12]
    85dc:	2b00      	cmp	r3, #0
    85de:	d002      	beq.n	85e6 <_usb_load_calib+0x3a>
    85e0:	68fb      	ldr	r3, [r7, #12]
    85e2:	2b1f      	cmp	r3, #31
    85e4:	d101      	bne.n	85ea <_usb_load_calib+0x3e>
		pad_transn = 9;
    85e6:	2309      	movs	r3, #9
    85e8:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    85ea:	68bb      	ldr	r3, [r7, #8]
    85ec:	2b00      	cmp	r3, #0
    85ee:	d002      	beq.n	85f6 <_usb_load_calib+0x4a>
    85f0:	68bb      	ldr	r3, [r7, #8]
    85f2:	2b1f      	cmp	r3, #31
    85f4:	d101      	bne.n	85fa <_usb_load_calib+0x4e>
		pad_transp = 25;
    85f6:	2319      	movs	r3, #25
    85f8:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    85fa:	687b      	ldr	r3, [r7, #4]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d002      	beq.n	8606 <_usb_load_calib+0x5a>
    8600:	687b      	ldr	r3, [r7, #4]
    8602:	2b07      	cmp	r3, #7
    8604:	d101      	bne.n	860a <_usb_load_calib+0x5e>
		pad_trim = 6;
    8606:	2306      	movs	r3, #6
    8608:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    860a:	68fb      	ldr	r3, [r7, #12]
    860c:	b29b      	uxth	r3, r3
    860e:	019b      	lsls	r3, r3, #6
    8610:	b29b      	uxth	r3, r3
    8612:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8616:	b29a      	uxth	r2, r3
    8618:	68bb      	ldr	r3, [r7, #8]
    861a:	b29b      	uxth	r3, r3
    861c:	f003 031f 	and.w	r3, r3, #31
    8620:	b29b      	uxth	r3, r3
    8622:	4313      	orrs	r3, r2
    8624:	b29a      	uxth	r2, r3
    8626:	687b      	ldr	r3, [r7, #4]
    8628:	b29b      	uxth	r3, r3
    862a:	031b      	lsls	r3, r3, #12
    862c:	b29b      	uxth	r3, r3
    862e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8632:	b29b      	uxth	r3, r3
    8634:	4313      	orrs	r3, r2
    8636:	b29a      	uxth	r2, r3
    8638:	683b      	ldr	r3, [r7, #0]
    863a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    863c:	683a      	ldr	r2, [r7, #0]
    863e:	78d3      	ldrb	r3, [r2, #3]
    8640:	f043 0303 	orr.w	r3, r3, #3
    8644:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8646:	683a      	ldr	r2, [r7, #0]
    8648:	78d3      	ldrb	r3, [r2, #3]
    864a:	f043 030c 	orr.w	r3, r3, #12
    864e:	70d3      	strb	r3, [r2, #3]
}
    8650:	bf00      	nop
    8652:	3714      	adds	r7, #20
    8654:	46bd      	mov	sp, r7
    8656:	f85d 7b04 	ldr.w	r7, [sp], #4
    865a:	4770      	bx	lr
    865c:	00800084 	.word	0x00800084

00008660 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8660:	b580      	push	{r7, lr}
    8662:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8664:	bf00      	nop
    8666:	2203      	movs	r2, #3
    8668:	2100      	movs	r1, #0
    866a:	4804      	ldr	r0, [pc, #16]	; (867c <_usb_d_dev_wait_dpll_rdy+0x1c>)
    866c:	4b04      	ldr	r3, [pc, #16]	; (8680 <_usb_d_dev_wait_dpll_rdy+0x20>)
    866e:	4798      	blx	r3
    8670:	4603      	mov	r3, r0
    8672:	2b03      	cmp	r3, #3
    8674:	d1f7      	bne.n	8666 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8676:	bf00      	nop
    8678:	bd80      	pop	{r7, pc}
    867a:	bf00      	nop
    867c:	40001000 	.word	0x40001000
    8680:	00008095 	.word	0x00008095

00008684 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8684:	b580      	push	{r7, lr}
    8686:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8688:	480e      	ldr	r0, [pc, #56]	; (86c4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    868a:	4b0f      	ldr	r3, [pc, #60]	; (86c8 <_usb_d_dev_wait_dfll_rdy+0x44>)
    868c:	4798      	blx	r3
    868e:	4603      	mov	r3, r0
    8690:	2b00      	cmp	r3, #0
    8692:	d00a      	beq.n	86aa <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8694:	bf00      	nop
    8696:	f44f 6110 	mov.w	r1, #2304	; 0x900
    869a:	480a      	ldr	r0, [pc, #40]	; (86c4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    869c:	4b0b      	ldr	r3, [pc, #44]	; (86cc <_usb_d_dev_wait_dfll_rdy+0x48>)
    869e:	4798      	blx	r3
    86a0:	4603      	mov	r3, r0
    86a2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    86a6:	d1f6      	bne.n	8696 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    86a8:	e009      	b.n	86be <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    86aa:	bf00      	nop
    86ac:	f44f 7180 	mov.w	r1, #256	; 0x100
    86b0:	4804      	ldr	r0, [pc, #16]	; (86c4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    86b2:	4b06      	ldr	r3, [pc, #24]	; (86cc <_usb_d_dev_wait_dfll_rdy+0x48>)
    86b4:	4798      	blx	r3
    86b6:	4603      	mov	r3, r0
    86b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    86bc:	d1f6      	bne.n	86ac <_usb_d_dev_wait_dfll_rdy+0x28>
}
    86be:	bf00      	nop
    86c0:	bd80      	pop	{r7, pc}
    86c2:	bf00      	nop
    86c4:	40001000 	.word	0x40001000
    86c8:	000080f3 	.word	0x000080f3
    86cc:	000080cd 	.word	0x000080cd

000086d0 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    86d0:	b580      	push	{r7, lr}
    86d2:	b082      	sub	sp, #8
    86d4:	af00      	add	r7, sp, #0
    86d6:	4603      	mov	r3, r0
    86d8:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    86da:	79fb      	ldrb	r3, [r7, #7]
    86dc:	2b00      	cmp	r3, #0
    86de:	d102      	bne.n	86e6 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    86e0:	4b05      	ldr	r3, [pc, #20]	; (86f8 <_usb_d_dev_wait_clk_rdy+0x28>)
    86e2:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    86e4:	e004      	b.n	86f0 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    86e6:	79fb      	ldrb	r3, [r7, #7]
    86e8:	2b01      	cmp	r3, #1
    86ea:	d101      	bne.n	86f0 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    86ec:	4b03      	ldr	r3, [pc, #12]	; (86fc <_usb_d_dev_wait_clk_rdy+0x2c>)
    86ee:	4798      	blx	r3
}
    86f0:	bf00      	nop
    86f2:	3708      	adds	r7, #8
    86f4:	46bd      	mov	sp, r7
    86f6:	bd80      	pop	{r7, pc}
    86f8:	00008685 	.word	0x00008685
    86fc:	00008661 	.word	0x00008661

00008700 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8700:	b580      	push	{r7, lr}
    8702:	b082      	sub	sp, #8
    8704:	af00      	add	r7, sp, #0
    8706:	4603      	mov	r3, r0
    8708:	6039      	str	r1, [r7, #0]
    870a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    870c:	683b      	ldr	r3, [r7, #0]
    870e:	b2da      	uxtb	r2, r3
    8710:	79fb      	ldrb	r3, [r7, #7]
    8712:	4619      	mov	r1, r3
    8714:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8718:	4b02      	ldr	r3, [pc, #8]	; (8724 <_usbd_ep_int_ack+0x24>)
    871a:	4798      	blx	r3
}
    871c:	bf00      	nop
    871e:	3708      	adds	r7, #8
    8720:	46bd      	mov	sp, r7
    8722:	bd80      	pop	{r7, pc}
    8724:	000081d9 	.word	0x000081d9

00008728 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8728:	b580      	push	{r7, lr}
    872a:	b082      	sub	sp, #8
    872c:	af00      	add	r7, sp, #0
    872e:	4603      	mov	r3, r0
    8730:	6039      	str	r1, [r7, #0]
    8732:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8734:	683b      	ldr	r3, [r7, #0]
    8736:	b2da      	uxtb	r2, r3
    8738:	79fb      	ldrb	r3, [r7, #7]
    873a:	4619      	mov	r1, r3
    873c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8740:	4b02      	ldr	r3, [pc, #8]	; (874c <_usbd_ep_int_en+0x24>)
    8742:	4798      	blx	r3
}
    8744:	bf00      	nop
    8746:	3708      	adds	r7, #8
    8748:	46bd      	mov	sp, r7
    874a:	bd80      	pop	{r7, pc}
    874c:	000082ad 	.word	0x000082ad

00008750 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8750:	b580      	push	{r7, lr}
    8752:	b082      	sub	sp, #8
    8754:	af00      	add	r7, sp, #0
    8756:	4603      	mov	r3, r0
    8758:	6039      	str	r1, [r7, #0]
    875a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    875c:	683b      	ldr	r3, [r7, #0]
    875e:	b2da      	uxtb	r2, r3
    8760:	79fb      	ldrb	r3, [r7, #7]
    8762:	4619      	mov	r1, r3
    8764:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8768:	4b02      	ldr	r3, [pc, #8]	; (8774 <_usbd_ep_int_dis+0x24>)
    876a:	4798      	blx	r3
}
    876c:	bf00      	nop
    876e:	3708      	adds	r7, #8
    8770:	46bd      	mov	sp, r7
    8772:	bd80      	pop	{r7, pc}
    8774:	000082d9 	.word	0x000082d9

00008778 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8778:	b580      	push	{r7, lr}
    877a:	b082      	sub	sp, #8
    877c:	af00      	add	r7, sp, #0
    877e:	4603      	mov	r3, r0
    8780:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8782:	79fb      	ldrb	r3, [r7, #7]
    8784:	4619      	mov	r1, r3
    8786:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    878a:	4b06      	ldr	r3, [pc, #24]	; (87a4 <_usbd_ep_is_ctrl+0x2c>)
    878c:	4798      	blx	r3
    878e:	4603      	mov	r3, r0
    8790:	2b11      	cmp	r3, #17
    8792:	bf0c      	ite	eq
    8794:	2301      	moveq	r3, #1
    8796:	2300      	movne	r3, #0
    8798:	b2db      	uxtb	r3, r3
}
    879a:	4618      	mov	r0, r3
    879c:	3708      	adds	r7, #8
    879e:	46bd      	mov	sp, r7
    87a0:	bd80      	pop	{r7, pc}
    87a2:	bf00      	nop
    87a4:	00008393 	.word	0x00008393

000087a8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    87a8:	b580      	push	{r7, lr}
    87aa:	b082      	sub	sp, #8
    87ac:	af00      	add	r7, sp, #0
    87ae:	4603      	mov	r3, r0
    87b0:	71fb      	strb	r3, [r7, #7]
    87b2:	460b      	mov	r3, r1
    87b4:	71bb      	strb	r3, [r7, #6]
    87b6:	4613      	mov	r3, r2
    87b8:	717b      	strb	r3, [r7, #5]
	if (st) {
    87ba:	797b      	ldrb	r3, [r7, #5]
    87bc:	2b00      	cmp	r3, #0
    87be:	d00b      	beq.n	87d8 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87c0:	79bb      	ldrb	r3, [r7, #6]
    87c2:	2210      	movs	r2, #16
    87c4:	fa02 f303 	lsl.w	r3, r2, r3
    87c8:	b2da      	uxtb	r2, r3
    87ca:	79fb      	ldrb	r3, [r7, #7]
    87cc:	4619      	mov	r1, r3
    87ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87d2:	4b09      	ldr	r3, [pc, #36]	; (87f8 <_usbd_ep_set_stall+0x50>)
    87d4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    87d6:	e00a      	b.n	87ee <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87d8:	79bb      	ldrb	r3, [r7, #6]
    87da:	2210      	movs	r2, #16
    87dc:	fa02 f303 	lsl.w	r3, r2, r3
    87e0:	b2da      	uxtb	r2, r3
    87e2:	79fb      	ldrb	r3, [r7, #7]
    87e4:	4619      	mov	r1, r3
    87e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ea:	4b04      	ldr	r3, [pc, #16]	; (87fc <_usbd_ep_set_stall+0x54>)
    87ec:	4798      	blx	r3
}
    87ee:	bf00      	nop
    87f0:	3708      	adds	r7, #8
    87f2:	46bd      	mov	sp, r7
    87f4:	bd80      	pop	{r7, pc}
    87f6:	bf00      	nop
    87f8:	00008205 	.word	0x00008205
    87fc:	00008259 	.word	0x00008259

00008800 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8800:	b580      	push	{r7, lr}
    8802:	b084      	sub	sp, #16
    8804:	af00      	add	r7, sp, #0
    8806:	4603      	mov	r3, r0
    8808:	460a      	mov	r2, r1
    880a:	71fb      	strb	r3, [r7, #7]
    880c:	4613      	mov	r3, r2
    880e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8810:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8814:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8816:	79fb      	ldrb	r3, [r7, #7]
    8818:	4619      	mov	r1, r3
    881a:	68f8      	ldr	r0, [r7, #12]
    881c:	4b08      	ldr	r3, [pc, #32]	; (8840 <_usbd_ep_is_stalled+0x40>)
    881e:	4798      	blx	r3
    8820:	4603      	mov	r3, r0
    8822:	4619      	mov	r1, r3
    8824:	79bb      	ldrb	r3, [r7, #6]
    8826:	2210      	movs	r2, #16
    8828:	fa02 f303 	lsl.w	r3, r2, r3
    882c:	400b      	ands	r3, r1
    882e:	2b00      	cmp	r3, #0
    8830:	bf14      	ite	ne
    8832:	2301      	movne	r3, #1
    8834:	2300      	moveq	r3, #0
    8836:	b2db      	uxtb	r3, r3
}
    8838:	4618      	mov	r0, r3
    883a:	3710      	adds	r7, #16
    883c:	46bd      	mov	sp, r7
    883e:	bd80      	pop	{r7, pc}
    8840:	00008231 	.word	0x00008231

00008844 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8844:	b580      	push	{r7, lr}
    8846:	b084      	sub	sp, #16
    8848:	af00      	add	r7, sp, #0
    884a:	4603      	mov	r3, r0
    884c:	460a      	mov	r2, r1
    884e:	71fb      	strb	r3, [r7, #7]
    8850:	4613      	mov	r3, r2
    8852:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8854:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8858:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    885a:	79fb      	ldrb	r3, [r7, #7]
    885c:	4619      	mov	r1, r3
    885e:	68f8      	ldr	r0, [r7, #12]
    8860:	4b08      	ldr	r3, [pc, #32]	; (8884 <_usbd_ep_is_stall_sent+0x40>)
    8862:	4798      	blx	r3
    8864:	4603      	mov	r3, r0
    8866:	4619      	mov	r1, r3
    8868:	79bb      	ldrb	r3, [r7, #6]
    886a:	2220      	movs	r2, #32
    886c:	fa02 f303 	lsl.w	r3, r2, r3
    8870:	400b      	ands	r3, r1
    8872:	2b00      	cmp	r3, #0
    8874:	bf14      	ite	ne
    8876:	2301      	movne	r3, #1
    8878:	2300      	moveq	r3, #0
    887a:	b2db      	uxtb	r3, r3
}
    887c:	4618      	mov	r0, r3
    887e:	3710      	adds	r7, #16
    8880:	46bd      	mov	sp, r7
    8882:	bd80      	pop	{r7, pc}
    8884:	000081b1 	.word	0x000081b1

00008888 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8888:	b580      	push	{r7, lr}
    888a:	b082      	sub	sp, #8
    888c:	af00      	add	r7, sp, #0
    888e:	4603      	mov	r3, r0
    8890:	460a      	mov	r2, r1
    8892:	71fb      	strb	r3, [r7, #7]
    8894:	4613      	mov	r3, r2
    8896:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8898:	79bb      	ldrb	r3, [r7, #6]
    889a:	2220      	movs	r2, #32
    889c:	409a      	lsls	r2, r3
    889e:	79fb      	ldrb	r3, [r7, #7]
    88a0:	4611      	mov	r1, r2
    88a2:	4618      	mov	r0, r3
    88a4:	4b02      	ldr	r3, [pc, #8]	; (88b0 <_usbd_ep_ack_stall+0x28>)
    88a6:	4798      	blx	r3
}
    88a8:	bf00      	nop
    88aa:	3708      	adds	r7, #8
    88ac:	46bd      	mov	sp, r7
    88ae:	bd80      	pop	{r7, pc}
    88b0:	00008701 	.word	0x00008701

000088b4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    88b4:	b580      	push	{r7, lr}
    88b6:	b082      	sub	sp, #8
    88b8:	af00      	add	r7, sp, #0
    88ba:	4603      	mov	r3, r0
    88bc:	71fb      	strb	r3, [r7, #7]
    88be:	460b      	mov	r3, r1
    88c0:	71bb      	strb	r3, [r7, #6]
    88c2:	4613      	mov	r3, r2
    88c4:	717b      	strb	r3, [r7, #5]
	if (en) {
    88c6:	797b      	ldrb	r3, [r7, #5]
    88c8:	2b00      	cmp	r3, #0
    88ca:	d008      	beq.n	88de <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    88cc:	79bb      	ldrb	r3, [r7, #6]
    88ce:	2220      	movs	r2, #32
    88d0:	409a      	lsls	r2, r3
    88d2:	79fb      	ldrb	r3, [r7, #7]
    88d4:	4611      	mov	r1, r2
    88d6:	4618      	mov	r0, r3
    88d8:	4b07      	ldr	r3, [pc, #28]	; (88f8 <_usbd_ep_int_stall_en+0x44>)
    88da:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    88dc:	e007      	b.n	88ee <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    88de:	79bb      	ldrb	r3, [r7, #6]
    88e0:	2220      	movs	r2, #32
    88e2:	409a      	lsls	r2, r3
    88e4:	79fb      	ldrb	r3, [r7, #7]
    88e6:	4611      	mov	r1, r2
    88e8:	4618      	mov	r0, r3
    88ea:	4b04      	ldr	r3, [pc, #16]	; (88fc <_usbd_ep_int_stall_en+0x48>)
    88ec:	4798      	blx	r3
}
    88ee:	bf00      	nop
    88f0:	3708      	adds	r7, #8
    88f2:	46bd      	mov	sp, r7
    88f4:	bd80      	pop	{r7, pc}
    88f6:	bf00      	nop
    88f8:	00008729 	.word	0x00008729
    88fc:	00008751 	.word	0x00008751

00008900 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8900:	b580      	push	{r7, lr}
    8902:	b082      	sub	sp, #8
    8904:	af00      	add	r7, sp, #0
    8906:	4603      	mov	r3, r0
    8908:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    890a:	79fb      	ldrb	r3, [r7, #7]
    890c:	4619      	mov	r1, r3
    890e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8912:	4b03      	ldr	r3, [pc, #12]	; (8920 <_usbd_ep_stop_setup+0x20>)
    8914:	4798      	blx	r3
}
    8916:	bf00      	nop
    8918:	3708      	adds	r7, #8
    891a:	46bd      	mov	sp, r7
    891c:	bd80      	pop	{r7, pc}
    891e:	bf00      	nop
    8920:	00008285 	.word	0x00008285

00008924 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8924:	b580      	push	{r7, lr}
    8926:	b082      	sub	sp, #8
    8928:	af00      	add	r7, sp, #0
    892a:	4603      	mov	r3, r0
    892c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    892e:	79fb      	ldrb	r3, [r7, #7]
    8930:	2210      	movs	r2, #16
    8932:	4619      	mov	r1, r3
    8934:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8938:	4b05      	ldr	r3, [pc, #20]	; (8950 <_usbd_ep_is_setup+0x2c>)
    893a:	4798      	blx	r3
    893c:	4603      	mov	r3, r0
    893e:	2b00      	cmp	r3, #0
    8940:	bf14      	ite	ne
    8942:	2301      	movne	r3, #1
    8944:	2300      	moveq	r3, #0
    8946:	b2db      	uxtb	r3, r3
}
    8948:	4618      	mov	r0, r3
    894a:	3708      	adds	r7, #8
    894c:	46bd      	mov	sp, r7
    894e:	bd80      	pop	{r7, pc}
    8950:	0000817b 	.word	0x0000817b

00008954 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8954:	b580      	push	{r7, lr}
    8956:	b082      	sub	sp, #8
    8958:	af00      	add	r7, sp, #0
    895a:	4603      	mov	r3, r0
    895c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    895e:	79fb      	ldrb	r3, [r7, #7]
    8960:	2110      	movs	r1, #16
    8962:	4618      	mov	r0, r3
    8964:	4b02      	ldr	r3, [pc, #8]	; (8970 <_usbd_ep_ack_setup+0x1c>)
    8966:	4798      	blx	r3
}
    8968:	bf00      	nop
    896a:	3708      	adds	r7, #8
    896c:	46bd      	mov	sp, r7
    896e:	bd80      	pop	{r7, pc}
    8970:	00008701 	.word	0x00008701

00008974 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8974:	b580      	push	{r7, lr}
    8976:	b082      	sub	sp, #8
    8978:	af00      	add	r7, sp, #0
    897a:	4603      	mov	r3, r0
    897c:	71fb      	strb	r3, [r7, #7]
    897e:	460b      	mov	r3, r1
    8980:	71bb      	strb	r3, [r7, #6]
    8982:	4613      	mov	r3, r2
    8984:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8986:	797b      	ldrb	r3, [r7, #5]
    8988:	2b00      	cmp	r3, #0
    898a:	d00b      	beq.n	89a4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    898c:	79bb      	ldrb	r3, [r7, #6]
    898e:	2201      	movs	r2, #1
    8990:	fa02 f303 	lsl.w	r3, r2, r3
    8994:	b2da      	uxtb	r2, r3
    8996:	79fb      	ldrb	r3, [r7, #7]
    8998:	4619      	mov	r1, r3
    899a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    899e:	4b09      	ldr	r3, [pc, #36]	; (89c4 <_usbd_ep_set_toggle+0x50>)
    89a0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    89a2:	e00a      	b.n	89ba <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    89a4:	79bb      	ldrb	r3, [r7, #6]
    89a6:	2201      	movs	r2, #1
    89a8:	fa02 f303 	lsl.w	r3, r2, r3
    89ac:	b2da      	uxtb	r2, r3
    89ae:	79fb      	ldrb	r3, [r7, #7]
    89b0:	4619      	mov	r1, r3
    89b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89b6:	4b04      	ldr	r3, [pc, #16]	; (89c8 <_usbd_ep_set_toggle+0x54>)
    89b8:	4798      	blx	r3
}
    89ba:	bf00      	nop
    89bc:	3708      	adds	r7, #8
    89be:	46bd      	mov	sp, r7
    89c0:	bd80      	pop	{r7, pc}
    89c2:	bf00      	nop
    89c4:	00008205 	.word	0x00008205
    89c8:	00008259 	.word	0x00008259

000089cc <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
    89d2:	4603      	mov	r3, r0
    89d4:	460a      	mov	r2, r1
    89d6:	71fb      	strb	r3, [r7, #7]
    89d8:	4613      	mov	r3, r2
    89da:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    89dc:	79bb      	ldrb	r3, [r7, #6]
    89de:	2201      	movs	r2, #1
    89e0:	409a      	lsls	r2, r3
    89e2:	79fb      	ldrb	r3, [r7, #7]
    89e4:	4611      	mov	r1, r2
    89e6:	4618      	mov	r0, r3
    89e8:	4b02      	ldr	r3, [pc, #8]	; (89f4 <_usbd_ep_ack_io_cpt+0x28>)
    89ea:	4798      	blx	r3
}
    89ec:	bf00      	nop
    89ee:	3708      	adds	r7, #8
    89f0:	46bd      	mov	sp, r7
    89f2:	bd80      	pop	{r7, pc}
    89f4:	00008701 	.word	0x00008701

000089f8 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    89f8:	b480      	push	{r7}
    89fa:	b085      	sub	sp, #20
    89fc:	af00      	add	r7, sp, #0
    89fe:	4603      	mov	r3, r0
    8a00:	603a      	str	r2, [r7, #0]
    8a02:	71fb      	strb	r3, [r7, #7]
    8a04:	460b      	mov	r3, r1
    8a06:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8a08:	79fa      	ldrb	r2, [r7, #7]
    8a0a:	79bb      	ldrb	r3, [r7, #6]
    8a0c:	0052      	lsls	r2, r2, #1
    8a0e:	4413      	add	r3, r2
    8a10:	011b      	lsls	r3, r3, #4
    8a12:	4a06      	ldr	r2, [pc, #24]	; (8a2c <_usbd_ep_set_buf+0x34>)
    8a14:	4413      	add	r3, r2
    8a16:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8a18:	68fb      	ldr	r3, [r7, #12]
    8a1a:	683a      	ldr	r2, [r7, #0]
    8a1c:	601a      	str	r2, [r3, #0]
}
    8a1e:	bf00      	nop
    8a20:	3714      	adds	r7, #20
    8a22:	46bd      	mov	sp, r7
    8a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a28:	4770      	bx	lr
    8a2a:	bf00      	nop
    8a2c:	20000e58 	.word	0x20000e58

00008a30 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8a30:	b480      	push	{r7}
    8a32:	b085      	sub	sp, #20
    8a34:	af00      	add	r7, sp, #0
    8a36:	4603      	mov	r3, r0
    8a38:	71fb      	strb	r3, [r7, #7]
    8a3a:	460b      	mov	r3, r1
    8a3c:	71bb      	strb	r3, [r7, #6]
    8a3e:	4613      	mov	r3, r2
    8a40:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8a42:	79fa      	ldrb	r2, [r7, #7]
    8a44:	79bb      	ldrb	r3, [r7, #6]
    8a46:	0052      	lsls	r2, r2, #1
    8a48:	4413      	add	r3, r2
    8a4a:	011b      	lsls	r3, r3, #4
    8a4c:	4a08      	ldr	r2, [pc, #32]	; (8a70 <_usbd_ep_set_in_count+0x40>)
    8a4e:	4413      	add	r3, r2
    8a50:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8a52:	88bb      	ldrh	r3, [r7, #4]
    8a54:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8a58:	b299      	uxth	r1, r3
    8a5a:	68fa      	ldr	r2, [r7, #12]
    8a5c:	6853      	ldr	r3, [r2, #4]
    8a5e:	f361 339b 	bfi	r3, r1, #14, #14
    8a62:	6053      	str	r3, [r2, #4]
}
    8a64:	bf00      	nop
    8a66:	3714      	adds	r7, #20
    8a68:	46bd      	mov	sp, r7
    8a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a6e:	4770      	bx	lr
    8a70:	20000e58 	.word	0x20000e58

00008a74 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8a74:	b480      	push	{r7}
    8a76:	b085      	sub	sp, #20
    8a78:	af00      	add	r7, sp, #0
    8a7a:	4603      	mov	r3, r0
    8a7c:	71fb      	strb	r3, [r7, #7]
    8a7e:	460b      	mov	r3, r1
    8a80:	71bb      	strb	r3, [r7, #6]
    8a82:	4613      	mov	r3, r2
    8a84:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8a86:	79fa      	ldrb	r2, [r7, #7]
    8a88:	79bb      	ldrb	r3, [r7, #6]
    8a8a:	0052      	lsls	r2, r2, #1
    8a8c:	4413      	add	r3, r2
    8a8e:	011b      	lsls	r3, r3, #4
    8a90:	4a08      	ldr	r2, [pc, #32]	; (8ab4 <_usbd_ep_set_in_size+0x40>)
    8a92:	4413      	add	r3, r2
    8a94:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8a96:	88bb      	ldrh	r3, [r7, #4]
    8a98:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8a9c:	b299      	uxth	r1, r3
    8a9e:	68fa      	ldr	r2, [r7, #12]
    8aa0:	6853      	ldr	r3, [r2, #4]
    8aa2:	f361 030d 	bfi	r3, r1, #0, #14
    8aa6:	6053      	str	r3, [r2, #4]
}
    8aa8:	bf00      	nop
    8aaa:	3714      	adds	r7, #20
    8aac:	46bd      	mov	sp, r7
    8aae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ab2:	4770      	bx	lr
    8ab4:	20000e58 	.word	0x20000e58

00008ab8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8ab8:	b480      	push	{r7}
    8aba:	b085      	sub	sp, #20
    8abc:	af00      	add	r7, sp, #0
    8abe:	4603      	mov	r3, r0
    8ac0:	71fb      	strb	r3, [r7, #7]
    8ac2:	460b      	mov	r3, r1
    8ac4:	71bb      	strb	r3, [r7, #6]
    8ac6:	4613      	mov	r3, r2
    8ac8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8aca:	79fa      	ldrb	r2, [r7, #7]
    8acc:	79bb      	ldrb	r3, [r7, #6]
    8ace:	0052      	lsls	r2, r2, #1
    8ad0:	4413      	add	r3, r2
    8ad2:	011b      	lsls	r3, r3, #4
    8ad4:	4a08      	ldr	r2, [pc, #32]	; (8af8 <_usbd_ep_set_out_count+0x40>)
    8ad6:	4413      	add	r3, r2
    8ad8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ada:	88bb      	ldrh	r3, [r7, #4]
    8adc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8ae0:	b299      	uxth	r1, r3
    8ae2:	68fa      	ldr	r2, [r7, #12]
    8ae4:	6853      	ldr	r3, [r2, #4]
    8ae6:	f361 030d 	bfi	r3, r1, #0, #14
    8aea:	6053      	str	r3, [r2, #4]
}
    8aec:	bf00      	nop
    8aee:	3714      	adds	r7, #20
    8af0:	46bd      	mov	sp, r7
    8af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8af6:	4770      	bx	lr
    8af8:	20000e58 	.word	0x20000e58

00008afc <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8afc:	b480      	push	{r7}
    8afe:	b085      	sub	sp, #20
    8b00:	af00      	add	r7, sp, #0
    8b02:	4603      	mov	r3, r0
    8b04:	71fb      	strb	r3, [r7, #7]
    8b06:	460b      	mov	r3, r1
    8b08:	71bb      	strb	r3, [r7, #6]
    8b0a:	4613      	mov	r3, r2
    8b0c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8b0e:	79fa      	ldrb	r2, [r7, #7]
    8b10:	79bb      	ldrb	r3, [r7, #6]
    8b12:	0052      	lsls	r2, r2, #1
    8b14:	4413      	add	r3, r2
    8b16:	011b      	lsls	r3, r3, #4
    8b18:	4a08      	ldr	r2, [pc, #32]	; (8b3c <_usbd_ep_set_out_size+0x40>)
    8b1a:	4413      	add	r3, r2
    8b1c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8b1e:	88bb      	ldrh	r3, [r7, #4]
    8b20:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b24:	b299      	uxth	r1, r3
    8b26:	68fa      	ldr	r2, [r7, #12]
    8b28:	6853      	ldr	r3, [r2, #4]
    8b2a:	f361 339b 	bfi	r3, r1, #14, #14
    8b2e:	6053      	str	r3, [r2, #4]
}
    8b30:	bf00      	nop
    8b32:	3714      	adds	r7, #20
    8b34:	46bd      	mov	sp, r7
    8b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b3a:	4770      	bx	lr
    8b3c:	20000e58 	.word	0x20000e58

00008b40 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8b40:	b580      	push	{r7, lr}
    8b42:	b084      	sub	sp, #16
    8b44:	af00      	add	r7, sp, #0
    8b46:	60ba      	str	r2, [r7, #8]
    8b48:	607b      	str	r3, [r7, #4]
    8b4a:	4603      	mov	r3, r0
    8b4c:	73fb      	strb	r3, [r7, #15]
    8b4e:	460b      	mov	r3, r1
    8b50:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8b52:	68bb      	ldr	r3, [r7, #8]
    8b54:	b29a      	uxth	r2, r3
    8b56:	7bb9      	ldrb	r1, [r7, #14]
    8b58:	7bfb      	ldrb	r3, [r7, #15]
    8b5a:	4618      	mov	r0, r3
    8b5c:	4b06      	ldr	r3, [pc, #24]	; (8b78 <_usbd_ep_set_in_trans+0x38>)
    8b5e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8b60:	687b      	ldr	r3, [r7, #4]
    8b62:	b29a      	uxth	r2, r3
    8b64:	7bb9      	ldrb	r1, [r7, #14]
    8b66:	7bfb      	ldrb	r3, [r7, #15]
    8b68:	4618      	mov	r0, r3
    8b6a:	4b04      	ldr	r3, [pc, #16]	; (8b7c <_usbd_ep_set_in_trans+0x3c>)
    8b6c:	4798      	blx	r3
}
    8b6e:	bf00      	nop
    8b70:	3710      	adds	r7, #16
    8b72:	46bd      	mov	sp, r7
    8b74:	bd80      	pop	{r7, pc}
    8b76:	bf00      	nop
    8b78:	00008a75 	.word	0x00008a75
    8b7c:	00008a31 	.word	0x00008a31

00008b80 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b084      	sub	sp, #16
    8b84:	af00      	add	r7, sp, #0
    8b86:	60ba      	str	r2, [r7, #8]
    8b88:	607b      	str	r3, [r7, #4]
    8b8a:	4603      	mov	r3, r0
    8b8c:	73fb      	strb	r3, [r7, #15]
    8b8e:	460b      	mov	r3, r1
    8b90:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8b92:	68bb      	ldr	r3, [r7, #8]
    8b94:	b29a      	uxth	r2, r3
    8b96:	7bb9      	ldrb	r1, [r7, #14]
    8b98:	7bfb      	ldrb	r3, [r7, #15]
    8b9a:	4618      	mov	r0, r3
    8b9c:	4b06      	ldr	r3, [pc, #24]	; (8bb8 <_usbd_ep_set_out_trans+0x38>)
    8b9e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	b29a      	uxth	r2, r3
    8ba4:	7bb9      	ldrb	r1, [r7, #14]
    8ba6:	7bfb      	ldrb	r3, [r7, #15]
    8ba8:	4618      	mov	r0, r3
    8baa:	4b04      	ldr	r3, [pc, #16]	; (8bbc <_usbd_ep_set_out_trans+0x3c>)
    8bac:	4798      	blx	r3
}
    8bae:	bf00      	nop
    8bb0:	3710      	adds	r7, #16
    8bb2:	46bd      	mov	sp, r7
    8bb4:	bd80      	pop	{r7, pc}
    8bb6:	bf00      	nop
    8bb8:	00008afd 	.word	0x00008afd
    8bbc:	00008ab9 	.word	0x00008ab9

00008bc0 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8bc0:	b480      	push	{r7}
    8bc2:	b085      	sub	sp, #20
    8bc4:	af00      	add	r7, sp, #0
    8bc6:	4603      	mov	r3, r0
    8bc8:	460a      	mov	r2, r1
    8bca:	71fb      	strb	r3, [r7, #7]
    8bcc:	4613      	mov	r3, r2
    8bce:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8bd0:	79fa      	ldrb	r2, [r7, #7]
    8bd2:	79bb      	ldrb	r3, [r7, #6]
    8bd4:	0052      	lsls	r2, r2, #1
    8bd6:	4413      	add	r3, r2
    8bd8:	011b      	lsls	r3, r3, #4
    8bda:	4a06      	ldr	r2, [pc, #24]	; (8bf4 <_usbd_ep_clear_bank_status+0x34>)
    8bdc:	4413      	add	r3, r2
    8bde:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8be0:	68fb      	ldr	r3, [r7, #12]
    8be2:	2200      	movs	r2, #0
    8be4:	729a      	strb	r2, [r3, #10]
}
    8be6:	bf00      	nop
    8be8:	3714      	adds	r7, #20
    8bea:	46bd      	mov	sp, r7
    8bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf0:	4770      	bx	lr
    8bf2:	bf00      	nop
    8bf4:	20000e58 	.word	0x20000e58

00008bf8 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8bf8:	b580      	push	{r7, lr}
    8bfa:	b082      	sub	sp, #8
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	4603      	mov	r3, r0
    8c00:	71fb      	strb	r3, [r7, #7]
    8c02:	460b      	mov	r3, r1
    8c04:	71bb      	strb	r3, [r7, #6]
    8c06:	4613      	mov	r3, r2
    8c08:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8c0a:	797b      	ldrb	r3, [r7, #5]
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d00b      	beq.n	8c28 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c10:	79bb      	ldrb	r3, [r7, #6]
    8c12:	2240      	movs	r2, #64	; 0x40
    8c14:	fa02 f303 	lsl.w	r3, r2, r3
    8c18:	b2da      	uxtb	r2, r3
    8c1a:	79fb      	ldrb	r3, [r7, #7]
    8c1c:	4619      	mov	r1, r3
    8c1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c22:	4b09      	ldr	r3, [pc, #36]	; (8c48 <_usbd_ep_set_in_rdy+0x50>)
    8c24:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8c26:	e00a      	b.n	8c3e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c28:	79bb      	ldrb	r3, [r7, #6]
    8c2a:	2240      	movs	r2, #64	; 0x40
    8c2c:	fa02 f303 	lsl.w	r3, r2, r3
    8c30:	b2da      	uxtb	r2, r3
    8c32:	79fb      	ldrb	r3, [r7, #7]
    8c34:	4619      	mov	r1, r3
    8c36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c3a:	4b04      	ldr	r3, [pc, #16]	; (8c4c <_usbd_ep_set_in_rdy+0x54>)
    8c3c:	4798      	blx	r3
}
    8c3e:	bf00      	nop
    8c40:	3708      	adds	r7, #8
    8c42:	46bd      	mov	sp, r7
    8c44:	bd80      	pop	{r7, pc}
    8c46:	bf00      	nop
    8c48:	00008205 	.word	0x00008205
    8c4c:	00008259 	.word	0x00008259

00008c50 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	af00      	add	r7, sp, #0
    8c56:	4603      	mov	r3, r0
    8c58:	71fb      	strb	r3, [r7, #7]
    8c5a:	460b      	mov	r3, r1
    8c5c:	71bb      	strb	r3, [r7, #6]
    8c5e:	4613      	mov	r3, r2
    8c60:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8c62:	797b      	ldrb	r3, [r7, #5]
    8c64:	2b00      	cmp	r3, #0
    8c66:	d00b      	beq.n	8c80 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c68:	79bb      	ldrb	r3, [r7, #6]
    8c6a:	2240      	movs	r2, #64	; 0x40
    8c6c:	fa02 f303 	lsl.w	r3, r2, r3
    8c70:	b2da      	uxtb	r2, r3
    8c72:	79fb      	ldrb	r3, [r7, #7]
    8c74:	4619      	mov	r1, r3
    8c76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c7a:	4b09      	ldr	r3, [pc, #36]	; (8ca0 <_usbd_ep_set_out_rdy+0x50>)
    8c7c:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8c7e:	e00a      	b.n	8c96 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c80:	79bb      	ldrb	r3, [r7, #6]
    8c82:	2240      	movs	r2, #64	; 0x40
    8c84:	fa02 f303 	lsl.w	r3, r2, r3
    8c88:	b2da      	uxtb	r2, r3
    8c8a:	79fb      	ldrb	r3, [r7, #7]
    8c8c:	4619      	mov	r1, r3
    8c8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c92:	4b04      	ldr	r3, [pc, #16]	; (8ca4 <_usbd_ep_set_out_rdy+0x54>)
    8c94:	4798      	blx	r3
}
    8c96:	bf00      	nop
    8c98:	3708      	adds	r7, #8
    8c9a:	46bd      	mov	sp, r7
    8c9c:	bd80      	pop	{r7, pc}
    8c9e:	bf00      	nop
    8ca0:	00008259 	.word	0x00008259
    8ca4:	00008205 	.word	0x00008205

00008ca8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8ca8:	b480      	push	{r7}
    8caa:	b083      	sub	sp, #12
    8cac:	af00      	add	r7, sp, #0
    8cae:	4603      	mov	r3, r0
    8cb0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8cb2:	88fb      	ldrh	r3, [r7, #6]
    8cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8cb8:	d820      	bhi.n	8cfc <_usbd_ep_pcksize_size+0x54>
    8cba:	88fb      	ldrh	r3, [r7, #6]
    8cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8cc0:	d81a      	bhi.n	8cf8 <_usbd_ep_pcksize_size+0x50>
    8cc2:	88fb      	ldrh	r3, [r7, #6]
    8cc4:	2b80      	cmp	r3, #128	; 0x80
    8cc6:	d815      	bhi.n	8cf4 <_usbd_ep_pcksize_size+0x4c>
    8cc8:	88fb      	ldrh	r3, [r7, #6]
    8cca:	2b40      	cmp	r3, #64	; 0x40
    8ccc:	d810      	bhi.n	8cf0 <_usbd_ep_pcksize_size+0x48>
    8cce:	88fb      	ldrh	r3, [r7, #6]
    8cd0:	2b20      	cmp	r3, #32
    8cd2:	d80b      	bhi.n	8cec <_usbd_ep_pcksize_size+0x44>
    8cd4:	88fb      	ldrh	r3, [r7, #6]
    8cd6:	2b10      	cmp	r3, #16
    8cd8:	d806      	bhi.n	8ce8 <_usbd_ep_pcksize_size+0x40>
    8cda:	88fb      	ldrh	r3, [r7, #6]
    8cdc:	2b08      	cmp	r3, #8
    8cde:	bf8c      	ite	hi
    8ce0:	2301      	movhi	r3, #1
    8ce2:	2300      	movls	r3, #0
    8ce4:	b2db      	uxtb	r3, r3
    8ce6:	e00a      	b.n	8cfe <_usbd_ep_pcksize_size+0x56>
    8ce8:	2302      	movs	r3, #2
    8cea:	e008      	b.n	8cfe <_usbd_ep_pcksize_size+0x56>
    8cec:	2303      	movs	r3, #3
    8cee:	e006      	b.n	8cfe <_usbd_ep_pcksize_size+0x56>
    8cf0:	2304      	movs	r3, #4
    8cf2:	e004      	b.n	8cfe <_usbd_ep_pcksize_size+0x56>
    8cf4:	2305      	movs	r3, #5
    8cf6:	e002      	b.n	8cfe <_usbd_ep_pcksize_size+0x56>
    8cf8:	2306      	movs	r3, #6
    8cfa:	e000      	b.n	8cfe <_usbd_ep_pcksize_size+0x56>
    8cfc:	2307      	movs	r3, #7
}
    8cfe:	4618      	mov	r0, r3
    8d00:	370c      	adds	r7, #12
    8d02:	46bd      	mov	sp, r7
    8d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d08:	4770      	bx	lr
	...

00008d0c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8d0c:	b480      	push	{r7}
    8d0e:	b085      	sub	sp, #20
    8d10:	af00      	add	r7, sp, #0
    8d12:	4603      	mov	r3, r0
    8d14:	460a      	mov	r2, r1
    8d16:	71fb      	strb	r3, [r7, #7]
    8d18:	4613      	mov	r3, r2
    8d1a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8d1c:	79fb      	ldrb	r3, [r7, #7]
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d008      	beq.n	8d34 <_usb_d_dev_ept+0x28>
    8d22:	79bb      	ldrb	r3, [r7, #6]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d003      	beq.n	8d30 <_usb_d_dev_ept+0x24>
    8d28:	79fb      	ldrb	r3, [r7, #7]
    8d2a:	3304      	adds	r3, #4
    8d2c:	b2db      	uxtb	r3, r3
    8d2e:	e002      	b.n	8d36 <_usb_d_dev_ept+0x2a>
    8d30:	79fb      	ldrb	r3, [r7, #7]
    8d32:	e000      	b.n	8d36 <_usb_d_dev_ept+0x2a>
    8d34:	2300      	movs	r3, #0
    8d36:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8d38:	7bfa      	ldrb	r2, [r7, #15]
    8d3a:	4613      	mov	r3, r2
    8d3c:	009b      	lsls	r3, r3, #2
    8d3e:	4413      	add	r3, r2
    8d40:	009b      	lsls	r3, r3, #2
    8d42:	3310      	adds	r3, #16
    8d44:	4a04      	ldr	r2, [pc, #16]	; (8d58 <_usb_d_dev_ept+0x4c>)
    8d46:	4413      	add	r3, r2
    8d48:	3304      	adds	r3, #4
}
    8d4a:	4618      	mov	r0, r3
    8d4c:	3714      	adds	r7, #20
    8d4e:	46bd      	mov	sp, r7
    8d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d54:	4770      	bx	lr
    8d56:	bf00      	nop
    8d58:	20000d90 	.word	0x20000d90

00008d5c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8d5c:	b580      	push	{r7, lr}
    8d5e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8d60:	2104      	movs	r1, #4
    8d62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d66:	4b03      	ldr	r3, [pc, #12]	; (8d74 <_usb_d_dev_sof+0x18>)
    8d68:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8d6a:	4b03      	ldr	r3, [pc, #12]	; (8d78 <_usb_d_dev_sof+0x1c>)
    8d6c:	681b      	ldr	r3, [r3, #0]
    8d6e:	4798      	blx	r3
}
    8d70:	bf00      	nop
    8d72:	bd80      	pop	{r7, pc}
    8d74:	000083d3 	.word	0x000083d3
    8d78:	20000d90 	.word	0x20000d90

00008d7c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b084      	sub	sp, #16
    8d80:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8d82:	2300      	movs	r3, #0
    8d84:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8d86:	f240 2101 	movw	r1, #513	; 0x201
    8d8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d8e:	4b1a      	ldr	r3, [pc, #104]	; (8df8 <_usb_d_dev_lpmsusp+0x7c>)
    8d90:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8d92:	f240 2101 	movw	r1, #513	; 0x201
    8d96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d9a:	4b18      	ldr	r3, [pc, #96]	; (8dfc <_usb_d_dev_lpmsusp+0x80>)
    8d9c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8d9e:	2170      	movs	r1, #112	; 0x70
    8da0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8da4:	4b16      	ldr	r3, [pc, #88]	; (8e00 <_usb_d_dev_lpmsusp+0x84>)
    8da6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8da8:	2300      	movs	r3, #0
    8daa:	73fb      	strb	r3, [r7, #15]
    8dac:	e018      	b.n	8de0 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8dae:	7bfb      	ldrb	r3, [r7, #15]
    8db0:	015b      	lsls	r3, r3, #5
    8db2:	4a14      	ldr	r2, [pc, #80]	; (8e04 <_usb_d_dev_lpmsusp+0x88>)
    8db4:	4413      	add	r3, r2
    8db6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	891b      	ldrh	r3, [r3, #8]
    8dbc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8dc0:	b2db      	uxtb	r3, r3
    8dc2:	2b03      	cmp	r3, #3
    8dc4:	d109      	bne.n	8dda <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8dc6:	687b      	ldr	r3, [r7, #4]
    8dc8:	891b      	ldrh	r3, [r3, #8]
    8dca:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8dce:	b29b      	uxth	r3, r3
    8dd0:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	2200      	movs	r2, #0
    8dd6:	811a      	strh	r2, [r3, #8]
			break;
    8dd8:	e005      	b.n	8de6 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8dda:	7bfb      	ldrb	r3, [r7, #15]
    8ddc:	3301      	adds	r3, #1
    8dde:	73fb      	strb	r3, [r7, #15]
    8de0:	7bfb      	ldrb	r3, [r7, #15]
    8de2:	2b03      	cmp	r3, #3
    8de4:	d9e3      	bls.n	8dae <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8de6:	4b08      	ldr	r3, [pc, #32]	; (8e08 <_usb_d_dev_lpmsusp+0x8c>)
    8de8:	685b      	ldr	r3, [r3, #4]
    8dea:	68b9      	ldr	r1, [r7, #8]
    8dec:	2003      	movs	r0, #3
    8dee:	4798      	blx	r3
}
    8df0:	bf00      	nop
    8df2:	3710      	adds	r7, #16
    8df4:	46bd      	mov	sp, r7
    8df6:	bd80      	pop	{r7, pc}
    8df8:	000083d3 	.word	0x000083d3
    8dfc:	00008429 	.word	0x00008429
    8e00:	000083f1 	.word	0x000083f1
    8e04:	20000e58 	.word	0x20000e58
    8e08:	20000d90 	.word	0x20000d90

00008e0c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8e0c:	b580      	push	{r7, lr}
    8e0e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8e10:	2180      	movs	r1, #128	; 0x80
    8e12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e16:	4b04      	ldr	r3, [pc, #16]	; (8e28 <_usb_d_dev_ramerr+0x1c>)
    8e18:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8e1a:	4b04      	ldr	r3, [pc, #16]	; (8e2c <_usb_d_dev_ramerr+0x20>)
    8e1c:	685b      	ldr	r3, [r3, #4]
    8e1e:	2100      	movs	r1, #0
    8e20:	2005      	movs	r0, #5
    8e22:	4798      	blx	r3
}
    8e24:	bf00      	nop
    8e26:	bd80      	pop	{r7, pc}
    8e28:	000083d3 	.word	0x000083d3
    8e2c:	20000d90 	.word	0x20000d90

00008e30 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8e30:	b580      	push	{r7, lr}
    8e32:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8e34:	2170      	movs	r1, #112	; 0x70
    8e36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e3a:	4b0b      	ldr	r3, [pc, #44]	; (8e68 <_usb_d_dev_wakeup+0x38>)
    8e3c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8e3e:	2170      	movs	r1, #112	; 0x70
    8e40:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e44:	4b09      	ldr	r3, [pc, #36]	; (8e6c <_usb_d_dev_wakeup+0x3c>)
    8e46:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8e48:	f240 2101 	movw	r1, #513	; 0x201
    8e4c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e50:	4b07      	ldr	r3, [pc, #28]	; (8e70 <_usb_d_dev_wakeup+0x40>)
    8e52:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8e54:	2000      	movs	r0, #0
    8e56:	4b07      	ldr	r3, [pc, #28]	; (8e74 <_usb_d_dev_wakeup+0x44>)
    8e58:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8e5a:	4b07      	ldr	r3, [pc, #28]	; (8e78 <_usb_d_dev_wakeup+0x48>)
    8e5c:	685b      	ldr	r3, [r3, #4]
    8e5e:	2100      	movs	r1, #0
    8e60:	2002      	movs	r0, #2
    8e62:	4798      	blx	r3
}
    8e64:	bf00      	nop
    8e66:	bd80      	pop	{r7, pc}
    8e68:	000083d3 	.word	0x000083d3
    8e6c:	00008429 	.word	0x00008429
    8e70:	000083f1 	.word	0x000083f1
    8e74:	000086d1 	.word	0x000086d1
    8e78:	20000d90 	.word	0x20000d90

00008e7c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8e80:	2200      	movs	r2, #0
    8e82:	2100      	movs	r1, #0
    8e84:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e88:	4b0d      	ldr	r3, [pc, #52]	; (8ec0 <_usb_d_dev_reset+0x44>)
    8e8a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8e8c:	2108      	movs	r1, #8
    8e8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e92:	4b0c      	ldr	r3, [pc, #48]	; (8ec4 <_usb_d_dev_reset+0x48>)
    8e94:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8e96:	2170      	movs	r1, #112	; 0x70
    8e98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e9c:	4b0a      	ldr	r3, [pc, #40]	; (8ec8 <_usb_d_dev_reset+0x4c>)
    8e9e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8ea0:	f240 2101 	movw	r1, #513	; 0x201
    8ea4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ea8:	4b08      	ldr	r3, [pc, #32]	; (8ecc <_usb_d_dev_reset+0x50>)
    8eaa:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8eac:	4b08      	ldr	r3, [pc, #32]	; (8ed0 <_usb_d_dev_reset+0x54>)
    8eae:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8eb0:	4b08      	ldr	r3, [pc, #32]	; (8ed4 <_usb_d_dev_reset+0x58>)
    8eb2:	685b      	ldr	r3, [r3, #4]
    8eb4:	2100      	movs	r1, #0
    8eb6:	2001      	movs	r0, #1
    8eb8:	4798      	blx	r3
}
    8eba:	bf00      	nop
    8ebc:	bd80      	pop	{r7, pc}
    8ebe:	bf00      	nop
    8ec0:	00008369 	.word	0x00008369
    8ec4:	000083d3 	.word	0x000083d3
    8ec8:	00008429 	.word	0x00008429
    8ecc:	000083f1 	.word	0x000083f1
    8ed0:	00009a39 	.word	0x00009a39
    8ed4:	20000d90 	.word	0x20000d90

00008ed8 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8ed8:	b580      	push	{r7, lr}
    8eda:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8edc:	f240 2101 	movw	r1, #513	; 0x201
    8ee0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ee4:	4b09      	ldr	r3, [pc, #36]	; (8f0c <_usb_d_dev_suspend+0x34>)
    8ee6:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8ee8:	f240 2101 	movw	r1, #513	; 0x201
    8eec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ef0:	4b07      	ldr	r3, [pc, #28]	; (8f10 <_usb_d_dev_suspend+0x38>)
    8ef2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8ef4:	2170      	movs	r1, #112	; 0x70
    8ef6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8efa:	4b06      	ldr	r3, [pc, #24]	; (8f14 <_usb_d_dev_suspend+0x3c>)
    8efc:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8efe:	4b06      	ldr	r3, [pc, #24]	; (8f18 <_usb_d_dev_suspend+0x40>)
    8f00:	685b      	ldr	r3, [r3, #4]
    8f02:	2100      	movs	r1, #0
    8f04:	2004      	movs	r0, #4
    8f06:	4798      	blx	r3
}
    8f08:	bf00      	nop
    8f0a:	bd80      	pop	{r7, pc}
    8f0c:	000083d3 	.word	0x000083d3
    8f10:	00008429 	.word	0x00008429
    8f14:	000083f1 	.word	0x000083f1
    8f18:	20000d90 	.word	0x20000d90

00008f1c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8f1c:	b580      	push	{r7, lr}
    8f1e:	b082      	sub	sp, #8
    8f20:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8f22:	2301      	movs	r3, #1
    8f24:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8f26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f2a:	4b22      	ldr	r3, [pc, #136]	; (8fb4 <_usb_d_dev_handle_nep+0x98>)
    8f2c:	4798      	blx	r3
    8f2e:	4603      	mov	r3, r0
    8f30:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8f32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f36:	4b20      	ldr	r3, [pc, #128]	; (8fb8 <_usb_d_dev_handle_nep+0x9c>)
    8f38:	4798      	blx	r3
    8f3a:	4603      	mov	r3, r0
    8f3c:	461a      	mov	r2, r3
    8f3e:	88bb      	ldrh	r3, [r7, #4]
    8f40:	4013      	ands	r3, r2
    8f42:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8f44:	88bb      	ldrh	r3, [r7, #4]
    8f46:	f003 0304 	and.w	r3, r3, #4
    8f4a:	2b00      	cmp	r3, #0
    8f4c:	d003      	beq.n	8f56 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8f4e:	4b1b      	ldr	r3, [pc, #108]	; (8fbc <_usb_d_dev_handle_nep+0xa0>)
    8f50:	4798      	blx	r3
		return true;
    8f52:	2301      	movs	r3, #1
    8f54:	e02a      	b.n	8fac <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8f56:	88bb      	ldrh	r3, [r7, #4]
    8f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d002      	beq.n	8f66 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8f60:	4b17      	ldr	r3, [pc, #92]	; (8fc0 <_usb_d_dev_handle_nep+0xa4>)
    8f62:	4798      	blx	r3
    8f64:	e021      	b.n	8faa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8f66:	88bb      	ldrh	r3, [r7, #4]
    8f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d002      	beq.n	8f76 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8f70:	4b14      	ldr	r3, [pc, #80]	; (8fc4 <_usb_d_dev_handle_nep+0xa8>)
    8f72:	4798      	blx	r3
    8f74:	e019      	b.n	8faa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8f76:	88bb      	ldrh	r3, [r7, #4]
    8f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d002      	beq.n	8f86 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8f80:	4b11      	ldr	r3, [pc, #68]	; (8fc8 <_usb_d_dev_handle_nep+0xac>)
    8f82:	4798      	blx	r3
    8f84:	e011      	b.n	8faa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8f86:	88bb      	ldrh	r3, [r7, #4]
    8f88:	f003 0308 	and.w	r3, r3, #8
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d002      	beq.n	8f96 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8f90:	4b0e      	ldr	r3, [pc, #56]	; (8fcc <_usb_d_dev_handle_nep+0xb0>)
    8f92:	4798      	blx	r3
    8f94:	e009      	b.n	8faa <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8f96:	88bb      	ldrh	r3, [r7, #4]
    8f98:	f003 0301 	and.w	r3, r3, #1
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d002      	beq.n	8fa6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8fa0:	4b0b      	ldr	r3, [pc, #44]	; (8fd0 <_usb_d_dev_handle_nep+0xb4>)
    8fa2:	4798      	blx	r3
    8fa4:	e001      	b.n	8faa <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8fa6:	2300      	movs	r3, #0
    8fa8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8faa:	79fb      	ldrb	r3, [r7, #7]
}
    8fac:	4618      	mov	r0, r3
    8fae:	3708      	adds	r7, #8
    8fb0:	46bd      	mov	sp, r7
    8fb2:	bd80      	pop	{r7, pc}
    8fb4:	000083b9 	.word	0x000083b9
    8fb8:	0000840f 	.word	0x0000840f
    8fbc:	00008d5d 	.word	0x00008d5d
    8fc0:	00008d7d 	.word	0x00008d7d
    8fc4:	00008e0d 	.word	0x00008e0d
    8fc8:	00008e31 	.word	0x00008e31
    8fcc:	00008e7d 	.word	0x00008e7d
    8fd0:	00008ed9 	.word	0x00008ed9

00008fd4 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8fd4:	b590      	push	{r4, r7, lr}
    8fd6:	b089      	sub	sp, #36	; 0x24
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
    8fdc:	460b      	mov	r3, r1
    8fde:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8fe0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8fe4:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8fe6:	687b      	ldr	r3, [r7, #4]
    8fe8:	7c9b      	ldrb	r3, [r3, #18]
    8fea:	f003 030f 	and.w	r3, r3, #15
    8fee:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8ff0:	7dfb      	ldrb	r3, [r7, #23]
    8ff2:	015b      	lsls	r3, r3, #5
    8ff4:	4a73      	ldr	r2, [pc, #460]	; (91c4 <_usb_d_dev_in_next+0x1f0>)
    8ff6:	4413      	add	r3, r2
    8ff8:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8ffa:	78fb      	ldrb	r3, [r7, #3]
    8ffc:	2b00      	cmp	r3, #0
    8ffe:	d006      	beq.n	900e <_usb_d_dev_in_next+0x3a>
    9000:	693b      	ldr	r3, [r7, #16]
    9002:	3310      	adds	r3, #16
    9004:	685b      	ldr	r3, [r3, #4]
    9006:	f3c3 030d 	ubfx	r3, r3, #0, #14
    900a:	b29b      	uxth	r3, r3
    900c:	e000      	b.n	9010 <_usb_d_dev_in_next+0x3c>
    900e:	2300      	movs	r3, #0
    9010:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9012:	687b      	ldr	r3, [r7, #4]
    9014:	8a1b      	ldrh	r3, [r3, #16]
    9016:	f240 32ff 	movw	r2, #1023	; 0x3ff
    901a:	4293      	cmp	r3, r2
    901c:	d103      	bne.n	9026 <_usb_d_dev_in_next+0x52>
    901e:	687b      	ldr	r3, [r7, #4]
    9020:	8a1b      	ldrh	r3, [r3, #16]
    9022:	b21b      	sxth	r3, r3
    9024:	e004      	b.n	9030 <_usb_d_dev_in_next+0x5c>
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	8a1b      	ldrh	r3, [r3, #16]
    902a:	3b01      	subs	r3, #1
    902c:	b29b      	uxth	r3, r3
    902e:	b21b      	sxth	r3, r3
    9030:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9034:	4013      	ands	r3, r2
    9036:	b21b      	sxth	r3, r3
    9038:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    903a:	2300      	movs	r3, #0
    903c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    903e:	687b      	ldr	r3, [r7, #4]
    9040:	7cdb      	ldrb	r3, [r3, #19]
    9042:	f003 0307 	and.w	r3, r3, #7
    9046:	b2db      	uxtb	r3, r3
    9048:	2b01      	cmp	r3, #1
    904a:	bf0c      	ite	eq
    904c:	2301      	moveq	r3, #1
    904e:	2300      	movne	r3, #0
    9050:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9052:	78fb      	ldrb	r3, [r7, #3]
    9054:	2b00      	cmp	r3, #0
    9056:	d004      	beq.n	9062 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9058:	7dfb      	ldrb	r3, [r7, #23]
    905a:	2101      	movs	r1, #1
    905c:	4618      	mov	r0, r3
    905e:	4b5a      	ldr	r3, [pc, #360]	; (91c8 <_usb_d_dev_in_next+0x1f4>)
    9060:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9062:	687b      	ldr	r3, [r7, #4]
    9064:	689a      	ldr	r2, [r3, #8]
    9066:	89fb      	ldrh	r3, [r7, #14]
    9068:	441a      	add	r2, r3
    906a:	687b      	ldr	r3, [r7, #4]
    906c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	689a      	ldr	r2, [r3, #8]
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	685b      	ldr	r3, [r3, #4]
    9076:	429a      	cmp	r2, r3
    9078:	d243      	bcs.n	9102 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	685b      	ldr	r3, [r3, #4]
    907e:	b29a      	uxth	r2, r3
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	689b      	ldr	r3, [r3, #8]
    9084:	b29b      	uxth	r3, r3
    9086:	1ad3      	subs	r3, r2, r3
    9088:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    908a:	687b      	ldr	r3, [r7, #4]
    908c:	7cdb      	ldrb	r3, [r3, #19]
    908e:	f003 0320 	and.w	r3, r3, #32
    9092:	b2db      	uxtb	r3, r3
    9094:	2b00      	cmp	r3, #0
    9096:	d01b      	beq.n	90d0 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9098:	687b      	ldr	r3, [r7, #4]
    909a:	8a1b      	ldrh	r3, [r3, #16]
    909c:	8bfa      	ldrh	r2, [r7, #30]
    909e:	429a      	cmp	r2, r3
    90a0:	d902      	bls.n	90a8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    90a2:	687b      	ldr	r3, [r7, #4]
    90a4:	8a1b      	ldrh	r3, [r3, #16]
    90a6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    90a8:	687b      	ldr	r3, [r7, #4]
    90aa:	68d8      	ldr	r0, [r3, #12]
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	681a      	ldr	r2, [r3, #0]
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	689b      	ldr	r3, [r3, #8]
    90b4:	4413      	add	r3, r2
    90b6:	8bfa      	ldrh	r2, [r7, #30]
    90b8:	4619      	mov	r1, r3
    90ba:	4b44      	ldr	r3, [pc, #272]	; (91cc <_usb_d_dev_in_next+0x1f8>)
    90bc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    90be:	687b      	ldr	r3, [r7, #4]
    90c0:	68db      	ldr	r3, [r3, #12]
    90c2:	461a      	mov	r2, r3
    90c4:	7dfb      	ldrb	r3, [r7, #23]
    90c6:	2101      	movs	r1, #1
    90c8:	4618      	mov	r0, r3
    90ca:	4b41      	ldr	r3, [pc, #260]	; (91d0 <_usb_d_dev_in_next+0x1fc>)
    90cc:	4798      	blx	r3
    90ce:	e011      	b.n	90f4 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    90d0:	8bfb      	ldrh	r3, [r7, #30]
    90d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    90d6:	d902      	bls.n	90de <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    90d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    90dc:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    90de:	687b      	ldr	r3, [r7, #4]
    90e0:	681a      	ldr	r2, [r3, #0]
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	689b      	ldr	r3, [r3, #8]
    90e6:	4413      	add	r3, r2
    90e8:	461a      	mov	r2, r3
    90ea:	7dfb      	ldrb	r3, [r7, #23]
    90ec:	2101      	movs	r1, #1
    90ee:	4618      	mov	r0, r3
    90f0:	4b37      	ldr	r3, [pc, #220]	; (91d0 <_usb_d_dev_in_next+0x1fc>)
    90f2:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    90f4:	8bfa      	ldrh	r2, [r7, #30]
    90f6:	7df8      	ldrb	r0, [r7, #23]
    90f8:	2300      	movs	r3, #0
    90fa:	2101      	movs	r1, #1
    90fc:	4c35      	ldr	r4, [pc, #212]	; (91d4 <_usb_d_dev_in_next+0x200>)
    90fe:	47a0      	blx	r4
		goto _in_tx_exec;
    9100:	e041      	b.n	9186 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	7cdb      	ldrb	r3, [r3, #19]
    9106:	f003 0310 	and.w	r3, r3, #16
    910a:	b2db      	uxtb	r3, r3
    910c:	2b00      	cmp	r3, #0
    910e:	d00b      	beq.n	9128 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9110:	687a      	ldr	r2, [r7, #4]
    9112:	7cd3      	ldrb	r3, [r2, #19]
    9114:	f36f 1304 	bfc	r3, #4, #1
    9118:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    911a:	7df8      	ldrb	r0, [r7, #23]
    911c:	2300      	movs	r3, #0
    911e:	2200      	movs	r2, #0
    9120:	2101      	movs	r1, #1
    9122:	4c2c      	ldr	r4, [pc, #176]	; (91d4 <_usb_d_dev_in_next+0x200>)
    9124:	47a0      	blx	r4
		goto _in_tx_exec;
    9126:	e02e      	b.n	9186 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9128:	7afb      	ldrb	r3, [r7, #11]
    912a:	2b00      	cmp	r3, #0
    912c:	d006      	beq.n	913c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    912e:	7dfb      	ldrb	r3, [r7, #23]
    9130:	224b      	movs	r2, #75	; 0x4b
    9132:	4619      	mov	r1, r3
    9134:	69b8      	ldr	r0, [r7, #24]
    9136:	4b28      	ldr	r3, [pc, #160]	; (91d8 <_usb_d_dev_in_next+0x204>)
    9138:	4798      	blx	r3
    913a:	e005      	b.n	9148 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    913c:	7dfb      	ldrb	r3, [r7, #23]
    913e:	224a      	movs	r2, #74	; 0x4a
    9140:	4619      	mov	r1, r3
    9142:	69b8      	ldr	r0, [r7, #24]
    9144:	4b24      	ldr	r3, [pc, #144]	; (91d8 <_usb_d_dev_in_next+0x204>)
    9146:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	8a1b      	ldrh	r3, [r3, #16]
    914c:	89ba      	ldrh	r2, [r7, #12]
    914e:	429a      	cmp	r2, r3
    9150:	d114      	bne.n	917c <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9152:	687a      	ldr	r2, [r7, #4]
    9154:	7cd3      	ldrb	r3, [r2, #19]
    9156:	f36f 1386 	bfc	r3, #6, #1
    915a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    915c:	4b1f      	ldr	r3, [pc, #124]	; (91dc <_usb_d_dev_in_next+0x208>)
    915e:	68db      	ldr	r3, [r3, #12]
    9160:	687a      	ldr	r2, [r7, #4]
    9162:	7c90      	ldrb	r0, [r2, #18]
    9164:	687a      	ldr	r2, [r7, #4]
    9166:	6892      	ldr	r2, [r2, #8]
    9168:	4611      	mov	r1, r2
    916a:	4798      	blx	r3
    916c:	4603      	mov	r3, r0
    916e:	2b00      	cmp	r3, #0
    9170:	d124      	bne.n	91bc <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9172:	687a      	ldr	r2, [r7, #4]
    9174:	7cd3      	ldrb	r3, [r2, #19]
    9176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    917a:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    917c:	2100      	movs	r1, #0
    917e:	6878      	ldr	r0, [r7, #4]
    9180:	4b17      	ldr	r3, [pc, #92]	; (91e0 <_usb_d_dev_in_next+0x20c>)
    9182:	4798      	blx	r3
	return;
    9184:	e01b      	b.n	91be <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9186:	78fb      	ldrb	r3, [r7, #3]
    9188:	f083 0301 	eor.w	r3, r3, #1
    918c:	b2db      	uxtb	r3, r3
    918e:	2b00      	cmp	r3, #0
    9190:	d00d      	beq.n	91ae <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9192:	7afb      	ldrb	r3, [r7, #11]
    9194:	2b00      	cmp	r3, #0
    9196:	d002      	beq.n	919e <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9198:	234e      	movs	r3, #78	; 0x4e
    919a:	777b      	strb	r3, [r7, #29]
    919c:	e001      	b.n	91a2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    919e:	234a      	movs	r3, #74	; 0x4a
    91a0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    91a2:	7f7a      	ldrb	r2, [r7, #29]
    91a4:	7dfb      	ldrb	r3, [r7, #23]
    91a6:	4619      	mov	r1, r3
    91a8:	69b8      	ldr	r0, [r7, #24]
    91aa:	4b0e      	ldr	r3, [pc, #56]	; (91e4 <_usb_d_dev_in_next+0x210>)
    91ac:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    91ae:	7dfb      	ldrb	r3, [r7, #23]
    91b0:	2201      	movs	r2, #1
    91b2:	2101      	movs	r1, #1
    91b4:	4618      	mov	r0, r3
    91b6:	4b0c      	ldr	r3, [pc, #48]	; (91e8 <_usb_d_dev_in_next+0x214>)
    91b8:	4798      	blx	r3
    91ba:	e000      	b.n	91be <_usb_d_dev_in_next+0x1ea>
			return;
    91bc:	bf00      	nop
}
    91be:	3724      	adds	r7, #36	; 0x24
    91c0:	46bd      	mov	sp, r7
    91c2:	bd90      	pop	{r4, r7, pc}
    91c4:	20000e58 	.word	0x20000e58
    91c8:	000089cd 	.word	0x000089cd
    91cc:	00010ce9 	.word	0x00010ce9
    91d0:	000089f9 	.word	0x000089f9
    91d4:	00008b41 	.word	0x00008b41
    91d8:	000082d9 	.word	0x000082d9
    91dc:	20000d90 	.word	0x20000d90
    91e0:	0000a2fd 	.word	0x0000a2fd
    91e4:	000082ad 	.word	0x000082ad
    91e8:	00008bf9 	.word	0x00008bf9

000091ec <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    91ec:	b590      	push	{r4, r7, lr}
    91ee:	b08b      	sub	sp, #44	; 0x2c
    91f0:	af00      	add	r7, sp, #0
    91f2:	6078      	str	r0, [r7, #4]
    91f4:	460b      	mov	r3, r1
    91f6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    91f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91fc:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    91fe:	687b      	ldr	r3, [r7, #4]
    9200:	7c9b      	ldrb	r3, [r3, #18]
    9202:	f003 030f 	and.w	r3, r3, #15
    9206:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9208:	7ffb      	ldrb	r3, [r7, #31]
    920a:	015b      	lsls	r3, r3, #5
    920c:	4a94      	ldr	r2, [pc, #592]	; (9460 <_usb_d_dev_out_next+0x274>)
    920e:	4413      	add	r3, r2
    9210:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9212:	78fb      	ldrb	r3, [r7, #3]
    9214:	2b00      	cmp	r3, #0
    9216:	d005      	beq.n	9224 <_usb_d_dev_out_next+0x38>
    9218:	69bb      	ldr	r3, [r7, #24]
    921a:	685b      	ldr	r3, [r3, #4]
    921c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9220:	b29b      	uxth	r3, r3
    9222:	e000      	b.n	9226 <_usb_d_dev_out_next+0x3a>
    9224:	2300      	movs	r3, #0
    9226:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9228:	78fb      	ldrb	r3, [r7, #3]
    922a:	2b00      	cmp	r3, #0
    922c:	d005      	beq.n	923a <_usb_d_dev_out_next+0x4e>
    922e:	69bb      	ldr	r3, [r7, #24]
    9230:	685b      	ldr	r3, [r3, #4]
    9232:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9236:	b29b      	uxth	r3, r3
    9238:	e000      	b.n	923c <_usb_d_dev_out_next+0x50>
    923a:	2300      	movs	r3, #0
    923c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    923e:	687b      	ldr	r3, [r7, #4]
    9240:	8a1b      	ldrh	r3, [r3, #16]
    9242:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9246:	4293      	cmp	r3, r2
    9248:	d004      	beq.n	9254 <_usb_d_dev_out_next+0x68>
    924a:	687b      	ldr	r3, [r7, #4]
    924c:	8a1b      	ldrh	r3, [r3, #16]
    924e:	3b01      	subs	r3, #1
    9250:	b29b      	uxth	r3, r3
    9252:	e001      	b.n	9258 <_usb_d_dev_out_next+0x6c>
    9254:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9258:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    925a:	8aba      	ldrh	r2, [r7, #20]
    925c:	8a7b      	ldrh	r3, [r7, #18]
    925e:	4013      	ands	r3, r2
    9260:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	7cdb      	ldrb	r3, [r3, #19]
    9266:	f003 0307 	and.w	r3, r3, #7
    926a:	b2db      	uxtb	r3, r3
    926c:	2b01      	cmp	r3, #1
    926e:	bf0c      	ite	eq
    9270:	2301      	moveq	r3, #1
    9272:	2300      	movne	r3, #0
    9274:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9276:	78fb      	ldrb	r3, [r7, #3]
    9278:	2b00      	cmp	r3, #0
    927a:	d004      	beq.n	9286 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    927c:	7ffb      	ldrb	r3, [r7, #31]
    927e:	2100      	movs	r1, #0
    9280:	4618      	mov	r0, r3
    9282:	4b78      	ldr	r3, [pc, #480]	; (9464 <_usb_d_dev_out_next+0x278>)
    9284:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9286:	687b      	ldr	r3, [r7, #4]
    9288:	7cdb      	ldrb	r3, [r3, #19]
    928a:	f003 0320 	and.w	r3, r3, #32
    928e:	b2db      	uxtb	r3, r3
    9290:	2b00      	cmp	r3, #0
    9292:	d01c      	beq.n	92ce <_usb_d_dev_out_next+0xe2>
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	685b      	ldr	r3, [r3, #4]
    9298:	2b00      	cmp	r3, #0
    929a:	d018      	beq.n	92ce <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	685b      	ldr	r3, [r3, #4]
    92a0:	b29a      	uxth	r2, r3
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	689b      	ldr	r3, [r3, #8]
    92a6:	b29b      	uxth	r3, r3
    92a8:	1ad3      	subs	r3, r2, r3
    92aa:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	681a      	ldr	r2, [r3, #0]
    92b0:	687b      	ldr	r3, [r7, #4]
    92b2:	689b      	ldr	r3, [r3, #8]
    92b4:	18d0      	adds	r0, r2, r3
    92b6:	687b      	ldr	r3, [r7, #4]
    92b8:	68d9      	ldr	r1, [r3, #12]
    92ba:	89ba      	ldrh	r2, [r7, #12]
    92bc:	8a3b      	ldrh	r3, [r7, #16]
    92be:	429a      	cmp	r2, r3
    92c0:	d901      	bls.n	92c6 <_usb_d_dev_out_next+0xda>
    92c2:	8a3b      	ldrh	r3, [r7, #16]
    92c4:	e000      	b.n	92c8 <_usb_d_dev_out_next+0xdc>
    92c6:	89bb      	ldrh	r3, [r7, #12]
    92c8:	461a      	mov	r2, r3
    92ca:	4b67      	ldr	r3, [pc, #412]	; (9468 <_usb_d_dev_out_next+0x27c>)
    92cc:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	685b      	ldr	r3, [r3, #4]
    92d2:	2b00      	cmp	r3, #0
    92d4:	d121      	bne.n	931a <_usb_d_dev_out_next+0x12e>
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	7cdb      	ldrb	r3, [r3, #19]
    92da:	f003 0310 	and.w	r3, r3, #16
    92de:	b2db      	uxtb	r3, r3
    92e0:	2b00      	cmp	r3, #0
    92e2:	d01a      	beq.n	931a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    92e4:	687a      	ldr	r2, [r7, #4]
    92e6:	7cd3      	ldrb	r3, [r2, #19]
    92e8:	f36f 1304 	bfc	r3, #4, #1
    92ec:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    92ee:	687a      	ldr	r2, [r7, #4]
    92f0:	7cd3      	ldrb	r3, [r2, #19]
    92f2:	f043 0320 	orr.w	r3, r3, #32
    92f6:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	68db      	ldr	r3, [r3, #12]
    92fc:	461a      	mov	r2, r3
    92fe:	7ffb      	ldrb	r3, [r7, #31]
    9300:	2100      	movs	r1, #0
    9302:	4618      	mov	r0, r3
    9304:	4b59      	ldr	r3, [pc, #356]	; (946c <_usb_d_dev_out_next+0x280>)
    9306:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	8a1b      	ldrh	r3, [r3, #16]
    930c:	461a      	mov	r2, r3
    930e:	7ff8      	ldrb	r0, [r7, #31]
    9310:	2300      	movs	r3, #0
    9312:	2100      	movs	r1, #0
    9314:	4c56      	ldr	r4, [pc, #344]	; (9470 <_usb_d_dev_out_next+0x284>)
    9316:	47a0      	blx	r4
		goto _out_rx_exec;
    9318:	e090      	b.n	943c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    931a:	78fb      	ldrb	r3, [r7, #3]
    931c:	2b00      	cmp	r3, #0
    931e:	d010      	beq.n	9342 <_usb_d_dev_out_next+0x156>
    9320:	687b      	ldr	r3, [r7, #4]
    9322:	8a1b      	ldrh	r3, [r3, #16]
    9324:	8a3a      	ldrh	r2, [r7, #16]
    9326:	429a      	cmp	r2, r3
    9328:	d20b      	bcs.n	9342 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    932a:	687a      	ldr	r2, [r7, #4]
    932c:	7cd3      	ldrb	r3, [r2, #19]
    932e:	f36f 1304 	bfc	r3, #4, #1
    9332:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9334:	687b      	ldr	r3, [r7, #4]
    9336:	689a      	ldr	r2, [r3, #8]
    9338:	8abb      	ldrh	r3, [r7, #20]
    933a:	441a      	add	r2, r3
    933c:	687b      	ldr	r3, [r7, #4]
    933e:	609a      	str	r2, [r3, #8]
    9340:	e05c      	b.n	93fc <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9342:	687b      	ldr	r3, [r7, #4]
    9344:	689a      	ldr	r2, [r3, #8]
    9346:	8afb      	ldrh	r3, [r7, #22]
    9348:	441a      	add	r2, r3
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    934e:	687b      	ldr	r3, [r7, #4]
    9350:	689a      	ldr	r2, [r3, #8]
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	685b      	ldr	r3, [r3, #4]
    9356:	429a      	cmp	r2, r3
    9358:	d250      	bcs.n	93fc <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	685b      	ldr	r3, [r3, #4]
    935e:	b29a      	uxth	r2, r3
    9360:	687b      	ldr	r3, [r7, #4]
    9362:	689b      	ldr	r3, [r3, #8]
    9364:	b29b      	uxth	r3, r3
    9366:	1ad3      	subs	r3, r2, r3
    9368:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	7cdb      	ldrb	r3, [r3, #19]
    936e:	f003 0320 	and.w	r3, r3, #32
    9372:	b2db      	uxtb	r3, r3
    9374:	2b00      	cmp	r3, #0
    9376:	d010      	beq.n	939a <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9378:	687b      	ldr	r3, [r7, #4]
    937a:	8a1b      	ldrh	r3, [r3, #16]
    937c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    937e:	429a      	cmp	r2, r3
    9380:	d902      	bls.n	9388 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	8a1b      	ldrh	r3, [r3, #16]
    9386:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	68db      	ldr	r3, [r3, #12]
    938c:	461a      	mov	r2, r3
    938e:	7ffb      	ldrb	r3, [r7, #31]
    9390:	2100      	movs	r1, #0
    9392:	4618      	mov	r0, r3
    9394:	4b35      	ldr	r3, [pc, #212]	; (946c <_usb_d_dev_out_next+0x280>)
    9396:	4798      	blx	r3
    9398:	e029      	b.n	93ee <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	8a1b      	ldrh	r3, [r3, #16]
    939e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93a0:	429a      	cmp	r2, r3
    93a2:	d90f      	bls.n	93c4 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    93a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    93a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    93aa:	d903      	bls.n	93b4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    93ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    93b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    93b2:	e011      	b.n	93d8 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    93b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93b6:	8a7b      	ldrh	r3, [r7, #18]
    93b8:	4013      	ands	r3, r2
    93ba:	b29b      	uxth	r3, r3
    93bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93be:	1ad3      	subs	r3, r2, r3
    93c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    93c2:	e009      	b.n	93d8 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	8a1b      	ldrh	r3, [r3, #16]
    93c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93ca:	429a      	cmp	r2, r3
    93cc:	d204      	bcs.n	93d8 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    93ce:	687a      	ldr	r2, [r7, #4]
    93d0:	7cd3      	ldrb	r3, [r2, #19]
    93d2:	f043 0320 	orr.w	r3, r3, #32
    93d6:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    93d8:	687b      	ldr	r3, [r7, #4]
    93da:	681a      	ldr	r2, [r3, #0]
    93dc:	687b      	ldr	r3, [r7, #4]
    93de:	689b      	ldr	r3, [r3, #8]
    93e0:	4413      	add	r3, r2
    93e2:	461a      	mov	r2, r3
    93e4:	7ffb      	ldrb	r3, [r7, #31]
    93e6:	2100      	movs	r1, #0
    93e8:	4618      	mov	r0, r3
    93ea:	4b20      	ldr	r3, [pc, #128]	; (946c <_usb_d_dev_out_next+0x280>)
    93ec:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    93ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93f0:	7ff8      	ldrb	r0, [r7, #31]
    93f2:	2300      	movs	r3, #0
    93f4:	2100      	movs	r1, #0
    93f6:	4c1e      	ldr	r4, [pc, #120]	; (9470 <_usb_d_dev_out_next+0x284>)
    93f8:	47a0      	blx	r4
			goto _out_rx_exec;
    93fa:	e01f      	b.n	943c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    93fc:	7bfb      	ldrb	r3, [r7, #15]
    93fe:	2b00      	cmp	r3, #0
    9400:	d006      	beq.n	9410 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9402:	7ffb      	ldrb	r3, [r7, #31]
    9404:	222d      	movs	r2, #45	; 0x2d
    9406:	4619      	mov	r1, r3
    9408:	6a38      	ldr	r0, [r7, #32]
    940a:	4b1a      	ldr	r3, [pc, #104]	; (9474 <_usb_d_dev_out_next+0x288>)
    940c:	4798      	blx	r3
    940e:	e005      	b.n	941c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9410:	7ffb      	ldrb	r3, [r7, #31]
    9412:	2225      	movs	r2, #37	; 0x25
    9414:	4619      	mov	r1, r3
    9416:	6a38      	ldr	r0, [r7, #32]
    9418:	4b16      	ldr	r3, [pc, #88]	; (9474 <_usb_d_dev_out_next+0x288>)
    941a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    941c:	7ffb      	ldrb	r3, [r7, #31]
    941e:	2b00      	cmp	r3, #0
    9420:	d107      	bne.n	9432 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	68db      	ldr	r3, [r3, #12]
    9426:	461a      	mov	r2, r3
    9428:	7ffb      	ldrb	r3, [r7, #31]
    942a:	2100      	movs	r1, #0
    942c:	4618      	mov	r0, r3
    942e:	4b0f      	ldr	r3, [pc, #60]	; (946c <_usb_d_dev_out_next+0x280>)
    9430:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9432:	2100      	movs	r1, #0
    9434:	6878      	ldr	r0, [r7, #4]
    9436:	4b10      	ldr	r3, [pc, #64]	; (9478 <_usb_d_dev_out_next+0x28c>)
    9438:	4798      	blx	r3
	return;
    943a:	e031      	b.n	94a0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    943c:	78fb      	ldrb	r3, [r7, #3]
    943e:	f083 0301 	eor.w	r3, r3, #1
    9442:	b2db      	uxtb	r3, r3
    9444:	2b00      	cmp	r3, #0
    9446:	d025      	beq.n	9494 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9448:	7bfb      	ldrb	r3, [r7, #15]
    944a:	2b00      	cmp	r3, #0
    944c:	d018      	beq.n	9480 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    944e:	7ffb      	ldrb	r3, [r7, #31]
    9450:	2101      	movs	r1, #1
    9452:	4618      	mov	r0, r3
    9454:	4b09      	ldr	r3, [pc, #36]	; (947c <_usb_d_dev_out_next+0x290>)
    9456:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9458:	232d      	movs	r3, #45	; 0x2d
    945a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    945e:	e012      	b.n	9486 <_usb_d_dev_out_next+0x29a>
    9460:	20000e58 	.word	0x20000e58
    9464:	000089cd 	.word	0x000089cd
    9468:	00010ce9 	.word	0x00010ce9
    946c:	000089f9 	.word	0x000089f9
    9470:	00008b81 	.word	0x00008b81
    9474:	000082d9 	.word	0x000082d9
    9478:	0000a2fd 	.word	0x0000a2fd
    947c:	00008bc1 	.word	0x00008bc1
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9480:	2325      	movs	r3, #37	; 0x25
    9482:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9486:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    948a:	7ffb      	ldrb	r3, [r7, #31]
    948c:	4619      	mov	r1, r3
    948e:	6a38      	ldr	r0, [r7, #32]
    9490:	4b05      	ldr	r3, [pc, #20]	; (94a8 <_usb_d_dev_out_next+0x2bc>)
    9492:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9494:	7ffb      	ldrb	r3, [r7, #31]
    9496:	2201      	movs	r2, #1
    9498:	2100      	movs	r1, #0
    949a:	4618      	mov	r0, r3
    949c:	4b03      	ldr	r3, [pc, #12]	; (94ac <_usb_d_dev_out_next+0x2c0>)
    949e:	4798      	blx	r3
}
    94a0:	372c      	adds	r7, #44	; 0x2c
    94a2:	46bd      	mov	sp, r7
    94a4:	bd90      	pop	{r4, r7, pc}
    94a6:	bf00      	nop
    94a8:	000082ad 	.word	0x000082ad
    94ac:	00008c51 	.word	0x00008c51

000094b0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    94b0:	b580      	push	{r7, lr}
    94b2:	b084      	sub	sp, #16
    94b4:	af00      	add	r7, sp, #0
    94b6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    94b8:	687b      	ldr	r3, [r7, #4]
    94ba:	7c9b      	ldrb	r3, [r3, #18]
    94bc:	f003 030f 	and.w	r3, r3, #15
    94c0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    94c2:	687b      	ldr	r3, [r7, #4]
    94c4:	7cdb      	ldrb	r3, [r3, #19]
    94c6:	f003 0307 	and.w	r3, r3, #7
    94ca:	b2db      	uxtb	r3, r3
    94cc:	2b01      	cmp	r3, #1
    94ce:	bf0c      	ite	eq
    94d0:	2301      	moveq	r3, #1
    94d2:	2300      	movne	r3, #0
    94d4:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    94d6:	7bbb      	ldrb	r3, [r7, #14]
    94d8:	f083 0301 	eor.w	r3, r3, #1
    94dc:	b2db      	uxtb	r3, r3
    94de:	2b00      	cmp	r3, #0
    94e0:	d008      	beq.n	94f4 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    94e2:	7bfb      	ldrb	r3, [r7, #15]
    94e4:	4618      	mov	r0, r3
    94e6:	4b20      	ldr	r3, [pc, #128]	; (9568 <_usb_d_dev_handle_setup+0xb8>)
    94e8:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    94ea:	7bfb      	ldrb	r3, [r7, #15]
    94ec:	4618      	mov	r0, r3
    94ee:	4b1f      	ldr	r3, [pc, #124]	; (956c <_usb_d_dev_handle_setup+0xbc>)
    94f0:	4798      	blx	r3
		return;
    94f2:	e036      	b.n	9562 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	7cdb      	ldrb	r3, [r3, #19]
    94f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94fc:	b2db      	uxtb	r3, r3
    94fe:	2b00      	cmp	r3, #0
    9500:	d010      	beq.n	9524 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9502:	687a      	ldr	r2, [r7, #4]
    9504:	7cd3      	ldrb	r3, [r2, #19]
    9506:	f36f 1386 	bfc	r3, #6, #1
    950a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    950c:	7bfb      	ldrb	r3, [r7, #15]
    950e:	2200      	movs	r2, #0
    9510:	2101      	movs	r1, #1
    9512:	4618      	mov	r0, r3
    9514:	4b16      	ldr	r3, [pc, #88]	; (9570 <_usb_d_dev_handle_setup+0xc0>)
    9516:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9518:	7bfb      	ldrb	r3, [r7, #15]
    951a:	2200      	movs	r2, #0
    951c:	2100      	movs	r1, #0
    951e:	4618      	mov	r0, r3
    9520:	4b14      	ldr	r3, [pc, #80]	; (9574 <_usb_d_dev_handle_setup+0xc4>)
    9522:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9524:	687a      	ldr	r2, [r7, #4]
    9526:	7cd3      	ldrb	r3, [r2, #19]
    9528:	f36f 03c3 	bfc	r3, #3, #1
    952c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    952e:	7bfb      	ldrb	r3, [r7, #15]
    9530:	2100      	movs	r1, #0
    9532:	4618      	mov	r0, r3
    9534:	4b10      	ldr	r3, [pc, #64]	; (9578 <_usb_d_dev_handle_setup+0xc8>)
    9536:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9538:	7bfb      	ldrb	r3, [r7, #15]
    953a:	2101      	movs	r1, #1
    953c:	4618      	mov	r0, r3
    953e:	4b0e      	ldr	r3, [pc, #56]	; (9578 <_usb_d_dev_handle_setup+0xc8>)
    9540:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9542:	7bfb      	ldrb	r3, [r7, #15]
    9544:	216f      	movs	r1, #111	; 0x6f
    9546:	4618      	mov	r0, r3
    9548:	4b0c      	ldr	r3, [pc, #48]	; (957c <_usb_d_dev_handle_setup+0xcc>)
    954a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    954c:	7bfb      	ldrb	r3, [r7, #15]
    954e:	216f      	movs	r1, #111	; 0x6f
    9550:	4618      	mov	r0, r3
    9552:	4b0b      	ldr	r3, [pc, #44]	; (9580 <_usb_d_dev_handle_setup+0xd0>)
    9554:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9556:	4b0b      	ldr	r3, [pc, #44]	; (9584 <_usb_d_dev_handle_setup+0xd4>)
    9558:	689b      	ldr	r3, [r3, #8]
    955a:	687a      	ldr	r2, [r7, #4]
    955c:	7c92      	ldrb	r2, [r2, #18]
    955e:	4610      	mov	r0, r2
    9560:	4798      	blx	r3
}
    9562:	3710      	adds	r7, #16
    9564:	46bd      	mov	sp, r7
    9566:	bd80      	pop	{r7, pc}
    9568:	00008955 	.word	0x00008955
    956c:	00008901 	.word	0x00008901
    9570:	00008bf9 	.word	0x00008bf9
    9574:	00008c51 	.word	0x00008c51
    9578:	00008bc1 	.word	0x00008bc1
    957c:	00008701 	.word	0x00008701
    9580:	00008751 	.word	0x00008751
    9584:	20000d90 	.word	0x20000d90

00009588 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9588:	b580      	push	{r7, lr}
    958a:	b084      	sub	sp, #16
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
    9590:	460b      	mov	r3, r1
    9592:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	7c9b      	ldrb	r3, [r3, #18]
    9598:	f003 030f 	and.w	r3, r3, #15
    959c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    959e:	78f9      	ldrb	r1, [r7, #3]
    95a0:	7bfb      	ldrb	r3, [r7, #15]
    95a2:	2200      	movs	r2, #0
    95a4:	4618      	mov	r0, r3
    95a6:	4b07      	ldr	r3, [pc, #28]	; (95c4 <_usb_d_dev_handle_stall+0x3c>)
    95a8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    95aa:	4b07      	ldr	r3, [pc, #28]	; (95c8 <_usb_d_dev_handle_stall+0x40>)
    95ac:	691b      	ldr	r3, [r3, #16]
    95ae:	687a      	ldr	r2, [r7, #4]
    95b0:	7c90      	ldrb	r0, [r2, #18]
    95b2:	687a      	ldr	r2, [r7, #4]
    95b4:	6892      	ldr	r2, [r2, #8]
    95b6:	2101      	movs	r1, #1
    95b8:	4798      	blx	r3
}
    95ba:	bf00      	nop
    95bc:	3710      	adds	r7, #16
    95be:	46bd      	mov	sp, r7
    95c0:	bd80      	pop	{r7, pc}
    95c2:	bf00      	nop
    95c4:	000088b5 	.word	0x000088b5
    95c8:	20000d90 	.word	0x20000d90

000095cc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    95cc:	b580      	push	{r7, lr}
    95ce:	b088      	sub	sp, #32
    95d0:	af00      	add	r7, sp, #0
    95d2:	6078      	str	r0, [r7, #4]
    95d4:	460b      	mov	r3, r1
    95d6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    95d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95dc:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    95de:	687b      	ldr	r3, [r7, #4]
    95e0:	7c9b      	ldrb	r3, [r3, #18]
    95e2:	f003 030f 	and.w	r3, r3, #15
    95e6:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    95e8:	4b61      	ldr	r3, [pc, #388]	; (9770 <_usb_d_dev_handle_trfail+0x1a4>)
    95ea:	881b      	ldrh	r3, [r3, #0]
    95ec:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    95ee:	7efb      	ldrb	r3, [r7, #27]
    95f0:	015b      	lsls	r3, r3, #5
    95f2:	4a60      	ldr	r2, [pc, #384]	; (9774 <_usb_d_dev_handle_trfail+0x1a8>)
    95f4:	4413      	add	r3, r2
    95f6:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    95f8:	78fb      	ldrb	r3, [r7, #3]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d006      	beq.n	960c <_usb_d_dev_handle_trfail+0x40>
    95fe:	7efb      	ldrb	r3, [r7, #27]
    9600:	4619      	mov	r1, r3
    9602:	69f8      	ldr	r0, [r7, #28]
    9604:	4b5c      	ldr	r3, [pc, #368]	; (9778 <_usb_d_dev_handle_trfail+0x1ac>)
    9606:	4798      	blx	r3
    9608:	4603      	mov	r3, r0
    960a:	e005      	b.n	9618 <_usb_d_dev_handle_trfail+0x4c>
    960c:	7efb      	ldrb	r3, [r7, #27]
    960e:	4619      	mov	r1, r3
    9610:	69f8      	ldr	r0, [r7, #28]
    9612:	4b5a      	ldr	r3, [pc, #360]	; (977c <_usb_d_dev_handle_trfail+0x1b0>)
    9614:	4798      	blx	r3
    9616:	4603      	mov	r3, r0
    9618:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	7cdb      	ldrb	r3, [r3, #19]
    961e:	f003 0307 	and.w	r3, r3, #7
    9622:	b2db      	uxtb	r3, r3
    9624:	2b01      	cmp	r3, #1
    9626:	bf0c      	ite	eq
    9628:	2301      	moveq	r3, #1
    962a:	2300      	movne	r3, #0
    962c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    962e:	78fb      	ldrb	r3, [r7, #3]
    9630:	011b      	lsls	r3, r3, #4
    9632:	697a      	ldr	r2, [r7, #20]
    9634:	4413      	add	r3, r2
    9636:	7a9b      	ldrb	r3, [r3, #10]
    9638:	b2db      	uxtb	r3, r3
    963a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    963c:	7cfb      	ldrb	r3, [r7, #19]
    963e:	2b02      	cmp	r3, #2
    9640:	d12f      	bne.n	96a2 <_usb_d_dev_handle_trfail+0xd6>
    9642:	7b3b      	ldrb	r3, [r7, #12]
    9644:	f003 0301 	and.w	r3, r3, #1
    9648:	b2db      	uxtb	r3, r3
    964a:	2b00      	cmp	r3, #0
    964c:	d029      	beq.n	96a2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    964e:	78fb      	ldrb	r3, [r7, #3]
    9650:	011b      	lsls	r3, r3, #4
    9652:	697a      	ldr	r2, [r7, #20]
    9654:	441a      	add	r2, r3
    9656:	7a93      	ldrb	r3, [r2, #10]
    9658:	f36f 0300 	bfc	r3, #0, #1
    965c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    965e:	78fb      	ldrb	r3, [r7, #3]
    9660:	f107 0220 	add.w	r2, r7, #32
    9664:	4413      	add	r3, r2
    9666:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    966a:	7efb      	ldrb	r3, [r7, #27]
    966c:	4619      	mov	r1, r3
    966e:	69f8      	ldr	r0, [r7, #28]
    9670:	4b43      	ldr	r3, [pc, #268]	; (9780 <_usb_d_dev_handle_trfail+0x1b4>)
    9672:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9674:	78fb      	ldrb	r3, [r7, #3]
    9676:	f107 0220 	add.w	r2, r7, #32
    967a:	4413      	add	r3, r2
    967c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9680:	7efb      	ldrb	r3, [r7, #27]
    9682:	4619      	mov	r1, r3
    9684:	69f8      	ldr	r0, [r7, #28]
    9686:	4b3f      	ldr	r3, [pc, #252]	; (9784 <_usb_d_dev_handle_trfail+0x1b8>)
    9688:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    968a:	78fb      	ldrb	r3, [r7, #3]
    968c:	2b00      	cmp	r3, #0
    968e:	bf14      	ite	ne
    9690:	2301      	movne	r3, #1
    9692:	2300      	moveq	r3, #0
    9694:	b2db      	uxtb	r3, r3
    9696:	2204      	movs	r2, #4
    9698:	4619      	mov	r1, r3
    969a:	6878      	ldr	r0, [r7, #4]
    969c:	4b3a      	ldr	r3, [pc, #232]	; (9788 <_usb_d_dev_handle_trfail+0x1bc>)
    969e:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    96a0:	e062      	b.n	9768 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    96a2:	7b3b      	ldrb	r3, [r7, #12]
    96a4:	f003 0302 	and.w	r3, r3, #2
    96a8:	b2db      	uxtb	r3, r3
    96aa:	2b00      	cmp	r3, #0
    96ac:	d040      	beq.n	9730 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    96ae:	78fb      	ldrb	r3, [r7, #3]
    96b0:	011b      	lsls	r3, r3, #4
    96b2:	697a      	ldr	r2, [r7, #20]
    96b4:	441a      	add	r2, r3
    96b6:	7a93      	ldrb	r3, [r2, #10]
    96b8:	f36f 0341 	bfc	r3, #1, #1
    96bc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    96be:	78fb      	ldrb	r3, [r7, #3]
    96c0:	f107 0220 	add.w	r2, r7, #32
    96c4:	4413      	add	r3, r2
    96c6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    96ca:	7efb      	ldrb	r3, [r7, #27]
    96cc:	4619      	mov	r1, r3
    96ce:	69f8      	ldr	r0, [r7, #28]
    96d0:	4b2b      	ldr	r3, [pc, #172]	; (9780 <_usb_d_dev_handle_trfail+0x1b4>)
    96d2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    96d4:	78fb      	ldrb	r3, [r7, #3]
    96d6:	f107 0220 	add.w	r2, r7, #32
    96da:	4413      	add	r3, r2
    96dc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    96e0:	7efb      	ldrb	r3, [r7, #27]
    96e2:	4619      	mov	r1, r3
    96e4:	69f8      	ldr	r0, [r7, #28]
    96e6:	4b27      	ldr	r3, [pc, #156]	; (9784 <_usb_d_dev_handle_trfail+0x1b8>)
    96e8:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    96ea:	7cbb      	ldrb	r3, [r7, #18]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d03b      	beq.n	9768 <_usb_d_dev_handle_trfail+0x19c>
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	7cdb      	ldrb	r3, [r3, #19]
    96f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    96f8:	b2db      	uxtb	r3, r3
    96fa:	2b00      	cmp	r3, #0
    96fc:	d034      	beq.n	9768 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	7cdb      	ldrb	r3, [r3, #19]
    9702:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9706:	b2db      	uxtb	r3, r3
    9708:	461a      	mov	r2, r3
    970a:	78fb      	ldrb	r3, [r7, #3]
    970c:	4293      	cmp	r3, r2
    970e:	d02b      	beq.n	9768 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9710:	687b      	ldr	r3, [r7, #4]
    9712:	7cdb      	ldrb	r3, [r3, #19]
    9714:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9718:	b2db      	uxtb	r3, r3
    971a:	2b00      	cmp	r3, #0
    971c:	bf14      	ite	ne
    971e:	2301      	movne	r3, #1
    9720:	2300      	moveq	r3, #0
    9722:	b2db      	uxtb	r3, r3
    9724:	2200      	movs	r2, #0
    9726:	4619      	mov	r1, r3
    9728:	6878      	ldr	r0, [r7, #4]
    972a:	4b17      	ldr	r3, [pc, #92]	; (9788 <_usb_d_dev_handle_trfail+0x1bc>)
    972c:	4798      	blx	r3
}
    972e:	e01b      	b.n	9768 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9730:	78fa      	ldrb	r2, [r7, #3]
    9732:	7efb      	ldrb	r3, [r7, #27]
    9734:	4611      	mov	r1, r2
    9736:	4618      	mov	r0, r3
    9738:	4b14      	ldr	r3, [pc, #80]	; (978c <_usb_d_dev_handle_trfail+0x1c0>)
    973a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    973c:	78fb      	ldrb	r3, [r7, #3]
    973e:	f107 0220 	add.w	r2, r7, #32
    9742:	4413      	add	r3, r2
    9744:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9748:	7efb      	ldrb	r3, [r7, #27]
    974a:	4619      	mov	r1, r3
    974c:	69f8      	ldr	r0, [r7, #28]
    974e:	4b0c      	ldr	r3, [pc, #48]	; (9780 <_usb_d_dev_handle_trfail+0x1b4>)
    9750:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9752:	78fb      	ldrb	r3, [r7, #3]
    9754:	f107 0220 	add.w	r2, r7, #32
    9758:	4413      	add	r3, r2
    975a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    975e:	7efb      	ldrb	r3, [r7, #27]
    9760:	4619      	mov	r1, r3
    9762:	69f8      	ldr	r0, [r7, #28]
    9764:	4b07      	ldr	r3, [pc, #28]	; (9784 <_usb_d_dev_handle_trfail+0x1b8>)
    9766:	4798      	blx	r3
}
    9768:	bf00      	nop
    976a:	3720      	adds	r7, #32
    976c:	46bd      	mov	sp, r7
    976e:	bd80      	pop	{r7, pc}
    9770:	00011450 	.word	0x00011450
    9774:	20000e58 	.word	0x20000e58
    9778:	00008335 	.word	0x00008335
    977c:	00008305 	.word	0x00008305
    9780:	000081d9 	.word	0x000081d9
    9784:	000082d9 	.word	0x000082d9
    9788:	0000a345 	.word	0x0000a345
    978c:	00008bc1 	.word	0x00008bc1

00009790 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9790:	b580      	push	{r7, lr}
    9792:	b082      	sub	sp, #8
    9794:	af00      	add	r7, sp, #0
    9796:	6078      	str	r0, [r7, #4]
    9798:	460b      	mov	r3, r1
    979a:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    979c:	78fb      	ldrb	r3, [r7, #3]
    979e:	f003 0310 	and.w	r3, r3, #16
    97a2:	2b00      	cmp	r3, #0
    97a4:	d003      	beq.n	97ae <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    97a6:	6878      	ldr	r0, [r7, #4]
    97a8:	4b0c      	ldr	r3, [pc, #48]	; (97dc <_usb_d_dev_trans_setup_isr+0x4c>)
    97aa:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    97ac:	e012      	b.n	97d4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    97ae:	78fb      	ldrb	r3, [r7, #3]
    97b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    97b4:	2b00      	cmp	r3, #0
    97b6:	d004      	beq.n	97c2 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    97b8:	2101      	movs	r1, #1
    97ba:	6878      	ldr	r0, [r7, #4]
    97bc:	4b08      	ldr	r3, [pc, #32]	; (97e0 <_usb_d_dev_trans_setup_isr+0x50>)
    97be:	4798      	blx	r3
}
    97c0:	e008      	b.n	97d4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    97c2:	78fb      	ldrb	r3, [r7, #3]
    97c4:	f003 0320 	and.w	r3, r3, #32
    97c8:	2b00      	cmp	r3, #0
    97ca:	d003      	beq.n	97d4 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    97cc:	2100      	movs	r1, #0
    97ce:	6878      	ldr	r0, [r7, #4]
    97d0:	4b03      	ldr	r3, [pc, #12]	; (97e0 <_usb_d_dev_trans_setup_isr+0x50>)
    97d2:	4798      	blx	r3
}
    97d4:	bf00      	nop
    97d6:	3708      	adds	r7, #8
    97d8:	46bd      	mov	sp, r7
    97da:	bd80      	pop	{r7, pc}
    97dc:	000094b1 	.word	0x000094b1
    97e0:	00009589 	.word	0x00009589

000097e4 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    97e4:	b580      	push	{r7, lr}
    97e6:	b082      	sub	sp, #8
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
    97ec:	460b      	mov	r3, r1
    97ee:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    97f0:	78fb      	ldrb	r3, [r7, #3]
    97f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    97f6:	2b00      	cmp	r3, #0
    97f8:	d004      	beq.n	9804 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    97fa:	2101      	movs	r1, #1
    97fc:	6878      	ldr	r0, [r7, #4]
    97fe:	4b1a      	ldr	r3, [pc, #104]	; (9868 <_usb_d_dev_trans_in_isr+0x84>)
    9800:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9802:	e02c      	b.n	985e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9804:	78fb      	ldrb	r3, [r7, #3]
    9806:	f003 0308 	and.w	r3, r3, #8
    980a:	2b00      	cmp	r3, #0
    980c:	d004      	beq.n	9818 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    980e:	2101      	movs	r1, #1
    9810:	6878      	ldr	r0, [r7, #4]
    9812:	4b16      	ldr	r3, [pc, #88]	; (986c <_usb_d_dev_trans_in_isr+0x88>)
    9814:	4798      	blx	r3
}
    9816:	e022      	b.n	985e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9818:	78fb      	ldrb	r3, [r7, #3]
    981a:	f003 0302 	and.w	r3, r3, #2
    981e:	2b00      	cmp	r3, #0
    9820:	d004      	beq.n	982c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9822:	2101      	movs	r1, #1
    9824:	6878      	ldr	r0, [r7, #4]
    9826:	4b12      	ldr	r3, [pc, #72]	; (9870 <_usb_d_dev_trans_in_isr+0x8c>)
    9828:	4798      	blx	r3
}
    982a:	e018      	b.n	985e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	7cdb      	ldrb	r3, [r3, #19]
    9830:	f003 0307 	and.w	r3, r3, #7
    9834:	b2db      	uxtb	r3, r3
    9836:	2b01      	cmp	r3, #1
    9838:	d111      	bne.n	985e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    983a:	78fb      	ldrb	r3, [r7, #3]
    983c:	f003 0304 	and.w	r3, r3, #4
    9840:	2b00      	cmp	r3, #0
    9842:	d004      	beq.n	984e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9844:	2100      	movs	r1, #0
    9846:	6878      	ldr	r0, [r7, #4]
    9848:	4b08      	ldr	r3, [pc, #32]	; (986c <_usb_d_dev_trans_in_isr+0x88>)
    984a:	4798      	blx	r3
}
    984c:	e007      	b.n	985e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    984e:	78fb      	ldrb	r3, [r7, #3]
    9850:	f003 0310 	and.w	r3, r3, #16
    9854:	2b00      	cmp	r3, #0
    9856:	d002      	beq.n	985e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9858:	6878      	ldr	r0, [r7, #4]
    985a:	4b06      	ldr	r3, [pc, #24]	; (9874 <_usb_d_dev_trans_in_isr+0x90>)
    985c:	4798      	blx	r3
}
    985e:	bf00      	nop
    9860:	3708      	adds	r7, #8
    9862:	46bd      	mov	sp, r7
    9864:	bd80      	pop	{r7, pc}
    9866:	bf00      	nop
    9868:	00009589 	.word	0x00009589
    986c:	000095cd 	.word	0x000095cd
    9870:	00008fd5 	.word	0x00008fd5
    9874:	000094b1 	.word	0x000094b1

00009878 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9878:	b580      	push	{r7, lr}
    987a:	b082      	sub	sp, #8
    987c:	af00      	add	r7, sp, #0
    987e:	6078      	str	r0, [r7, #4]
    9880:	460b      	mov	r3, r1
    9882:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9884:	78fb      	ldrb	r3, [r7, #3]
    9886:	f003 0320 	and.w	r3, r3, #32
    988a:	2b00      	cmp	r3, #0
    988c:	d004      	beq.n	9898 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    988e:	2100      	movs	r1, #0
    9890:	6878      	ldr	r0, [r7, #4]
    9892:	4b1a      	ldr	r3, [pc, #104]	; (98fc <_usb_d_dev_trans_out_isr+0x84>)
    9894:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9896:	e02c      	b.n	98f2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9898:	78fb      	ldrb	r3, [r7, #3]
    989a:	f003 0304 	and.w	r3, r3, #4
    989e:	2b00      	cmp	r3, #0
    98a0:	d004      	beq.n	98ac <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    98a2:	2100      	movs	r1, #0
    98a4:	6878      	ldr	r0, [r7, #4]
    98a6:	4b16      	ldr	r3, [pc, #88]	; (9900 <_usb_d_dev_trans_out_isr+0x88>)
    98a8:	4798      	blx	r3
}
    98aa:	e022      	b.n	98f2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    98ac:	78fb      	ldrb	r3, [r7, #3]
    98ae:	f003 0301 	and.w	r3, r3, #1
    98b2:	2b00      	cmp	r3, #0
    98b4:	d004      	beq.n	98c0 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    98b6:	2101      	movs	r1, #1
    98b8:	6878      	ldr	r0, [r7, #4]
    98ba:	4b12      	ldr	r3, [pc, #72]	; (9904 <_usb_d_dev_trans_out_isr+0x8c>)
    98bc:	4798      	blx	r3
}
    98be:	e018      	b.n	98f2 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    98c0:	687b      	ldr	r3, [r7, #4]
    98c2:	7cdb      	ldrb	r3, [r3, #19]
    98c4:	f003 0307 	and.w	r3, r3, #7
    98c8:	b2db      	uxtb	r3, r3
    98ca:	2b01      	cmp	r3, #1
    98cc:	d111      	bne.n	98f2 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    98ce:	78fb      	ldrb	r3, [r7, #3]
    98d0:	f003 0308 	and.w	r3, r3, #8
    98d4:	2b00      	cmp	r3, #0
    98d6:	d004      	beq.n	98e2 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    98d8:	2101      	movs	r1, #1
    98da:	6878      	ldr	r0, [r7, #4]
    98dc:	4b08      	ldr	r3, [pc, #32]	; (9900 <_usb_d_dev_trans_out_isr+0x88>)
    98de:	4798      	blx	r3
}
    98e0:	e007      	b.n	98f2 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    98e2:	78fb      	ldrb	r3, [r7, #3]
    98e4:	f003 0310 	and.w	r3, r3, #16
    98e8:	2b00      	cmp	r3, #0
    98ea:	d002      	beq.n	98f2 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    98ec:	6878      	ldr	r0, [r7, #4]
    98ee:	4b06      	ldr	r3, [pc, #24]	; (9908 <_usb_d_dev_trans_out_isr+0x90>)
    98f0:	4798      	blx	r3
}
    98f2:	bf00      	nop
    98f4:	3708      	adds	r7, #8
    98f6:	46bd      	mov	sp, r7
    98f8:	bd80      	pop	{r7, pc}
    98fa:	bf00      	nop
    98fc:	00009589 	.word	0x00009589
    9900:	000095cd 	.word	0x000095cd
    9904:	000091ed 	.word	0x000091ed
    9908:	000094b1 	.word	0x000094b1

0000990c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    990c:	b580      	push	{r7, lr}
    990e:	b084      	sub	sp, #16
    9910:	af00      	add	r7, sp, #0
    9912:	6078      	str	r0, [r7, #4]
    9914:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9916:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    991a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    991c:	683b      	ldr	r3, [r7, #0]
    991e:	7c9b      	ldrb	r3, [r3, #18]
    9920:	f003 030f 	and.w	r3, r3, #15
    9924:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9926:	7afb      	ldrb	r3, [r7, #11]
    9928:	2201      	movs	r2, #1
    992a:	409a      	lsls	r2, r3
    992c:	687b      	ldr	r3, [r7, #4]
    992e:	4013      	ands	r3, r2
    9930:	2b00      	cmp	r3, #0
    9932:	d03d      	beq.n	99b0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9934:	7afb      	ldrb	r3, [r7, #11]
    9936:	68fa      	ldr	r2, [r7, #12]
    9938:	3308      	adds	r3, #8
    993a:	015b      	lsls	r3, r3, #5
    993c:	4413      	add	r3, r2
    993e:	3307      	adds	r3, #7
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9944:	7afb      	ldrb	r3, [r7, #11]
    9946:	68fa      	ldr	r2, [r7, #12]
    9948:	015b      	lsls	r3, r3, #5
    994a:	4413      	add	r3, r2
    994c:	f203 1309 	addw	r3, r3, #265	; 0x109
    9950:	781b      	ldrb	r3, [r3, #0]
    9952:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9954:	7aba      	ldrb	r2, [r7, #10]
    9956:	7a7b      	ldrb	r3, [r7, #9]
    9958:	4013      	ands	r3, r2
    995a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    995c:	7abb      	ldrb	r3, [r7, #10]
    995e:	2b00      	cmp	r3, #0
    9960:	d027      	beq.n	99b2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9962:	683b      	ldr	r3, [r7, #0]
    9964:	7cdb      	ldrb	r3, [r3, #19]
    9966:	f003 0307 	and.w	r3, r3, #7
    996a:	b2db      	uxtb	r3, r3
    996c:	2b01      	cmp	r3, #1
    996e:	d10c      	bne.n	998a <_usb_d_dev_handle_eps+0x7e>
    9970:	683b      	ldr	r3, [r7, #0]
    9972:	7cdb      	ldrb	r3, [r3, #19]
    9974:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9978:	b2db      	uxtb	r3, r3
    997a:	2b00      	cmp	r3, #0
    997c:	d105      	bne.n	998a <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    997e:	7abb      	ldrb	r3, [r7, #10]
    9980:	4619      	mov	r1, r3
    9982:	6838      	ldr	r0, [r7, #0]
    9984:	4b0c      	ldr	r3, [pc, #48]	; (99b8 <_usb_d_dev_handle_eps+0xac>)
    9986:	4798      	blx	r3
    9988:	e013      	b.n	99b2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    998a:	683b      	ldr	r3, [r7, #0]
    998c:	7cdb      	ldrb	r3, [r3, #19]
    998e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9992:	b2db      	uxtb	r3, r3
    9994:	2b00      	cmp	r3, #0
    9996:	d005      	beq.n	99a4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9998:	7abb      	ldrb	r3, [r7, #10]
    999a:	4619      	mov	r1, r3
    999c:	6838      	ldr	r0, [r7, #0]
    999e:	4b07      	ldr	r3, [pc, #28]	; (99bc <_usb_d_dev_handle_eps+0xb0>)
    99a0:	4798      	blx	r3
    99a2:	e006      	b.n	99b2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    99a4:	7abb      	ldrb	r3, [r7, #10]
    99a6:	4619      	mov	r1, r3
    99a8:	6838      	ldr	r0, [r7, #0]
    99aa:	4b05      	ldr	r3, [pc, #20]	; (99c0 <_usb_d_dev_handle_eps+0xb4>)
    99ac:	4798      	blx	r3
    99ae:	e000      	b.n	99b2 <_usb_d_dev_handle_eps+0xa6>
		return;
    99b0:	bf00      	nop
		}
	}
}
    99b2:	3710      	adds	r7, #16
    99b4:	46bd      	mov	sp, r7
    99b6:	bd80      	pop	{r7, pc}
    99b8:	00009791 	.word	0x00009791
    99bc:	000097e5 	.word	0x000097e5
    99c0:	00009879 	.word	0x00009879

000099c4 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b084      	sub	sp, #16
    99c8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    99ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99ce:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    99d0:	68bb      	ldr	r3, [r7, #8]
    99d2:	8c1b      	ldrh	r3, [r3, #32]
    99d4:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    99d6:	88fb      	ldrh	r3, [r7, #6]
    99d8:	2b00      	cmp	r3, #0
    99da:	d104      	bne.n	99e6 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    99dc:	4b13      	ldr	r3, [pc, #76]	; (9a2c <_usb_d_dev_handler+0x68>)
    99de:	4798      	blx	r3
    99e0:	4603      	mov	r3, r0
    99e2:	2b00      	cmp	r3, #0
    99e4:	d11e      	bne.n	9a24 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    99e6:	2300      	movs	r3, #0
    99e8:	73fb      	strb	r3, [r7, #15]
    99ea:	e017      	b.n	9a1c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    99ec:	7bfa      	ldrb	r2, [r7, #15]
    99ee:	4613      	mov	r3, r2
    99f0:	009b      	lsls	r3, r3, #2
    99f2:	4413      	add	r3, r2
    99f4:	009b      	lsls	r3, r3, #2
    99f6:	3310      	adds	r3, #16
    99f8:	4a0d      	ldr	r2, [pc, #52]	; (9a30 <_usb_d_dev_handler+0x6c>)
    99fa:	4413      	add	r3, r2
    99fc:	3304      	adds	r3, #4
    99fe:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9a00:	683b      	ldr	r3, [r7, #0]
    9a02:	7c9b      	ldrb	r3, [r3, #18]
    9a04:	2bff      	cmp	r3, #255	; 0xff
    9a06:	d005      	beq.n	9a14 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9a08:	88fb      	ldrh	r3, [r7, #6]
    9a0a:	6839      	ldr	r1, [r7, #0]
    9a0c:	4618      	mov	r0, r3
    9a0e:	4b09      	ldr	r3, [pc, #36]	; (9a34 <_usb_d_dev_handler+0x70>)
    9a10:	4798      	blx	r3
    9a12:	e000      	b.n	9a16 <_usb_d_dev_handler+0x52>
			continue;
    9a14:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9a16:	7bfb      	ldrb	r3, [r7, #15]
    9a18:	3301      	adds	r3, #1
    9a1a:	73fb      	strb	r3, [r7, #15]
    9a1c:	7bfb      	ldrb	r3, [r7, #15]
    9a1e:	2b08      	cmp	r3, #8
    9a20:	d9e4      	bls.n	99ec <_usb_d_dev_handler+0x28>
    9a22:	e000      	b.n	9a26 <_usb_d_dev_handler+0x62>
			return;
    9a24:	bf00      	nop
	}
}
    9a26:	3710      	adds	r7, #16
    9a28:	46bd      	mov	sp, r7
    9a2a:	bd80      	pop	{r7, pc}
    9a2c:	00008f1d 	.word	0x00008f1d
    9a30:	20000d90 	.word	0x20000d90
    9a34:	0000990d 	.word	0x0000990d

00009a38 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9a38:	b580      	push	{r7, lr}
    9a3a:	b082      	sub	sp, #8
    9a3c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9a3e:	2300      	movs	r3, #0
    9a40:	71fb      	strb	r3, [r7, #7]
    9a42:	e023      	b.n	9a8c <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9a44:	79fa      	ldrb	r2, [r7, #7]
    9a46:	4613      	mov	r3, r2
    9a48:	009b      	lsls	r3, r3, #2
    9a4a:	4413      	add	r3, r2
    9a4c:	009b      	lsls	r3, r3, #2
    9a4e:	3310      	adds	r3, #16
    9a50:	4a14      	ldr	r2, [pc, #80]	; (9aa4 <_usb_d_dev_reset_epts+0x6c>)
    9a52:	4413      	add	r3, r2
    9a54:	3304      	adds	r3, #4
    9a56:	2103      	movs	r1, #3
    9a58:	4618      	mov	r0, r3
    9a5a:	4b13      	ldr	r3, [pc, #76]	; (9aa8 <_usb_d_dev_reset_epts+0x70>)
    9a5c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9a5e:	79fa      	ldrb	r2, [r7, #7]
    9a60:	4910      	ldr	r1, [pc, #64]	; (9aa4 <_usb_d_dev_reset_epts+0x6c>)
    9a62:	4613      	mov	r3, r2
    9a64:	009b      	lsls	r3, r3, #2
    9a66:	4413      	add	r3, r2
    9a68:	009b      	lsls	r3, r3, #2
    9a6a:	440b      	add	r3, r1
    9a6c:	3326      	adds	r3, #38	; 0x26
    9a6e:	22ff      	movs	r2, #255	; 0xff
    9a70:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9a72:	79fa      	ldrb	r2, [r7, #7]
    9a74:	490b      	ldr	r1, [pc, #44]	; (9aa4 <_usb_d_dev_reset_epts+0x6c>)
    9a76:	4613      	mov	r3, r2
    9a78:	009b      	lsls	r3, r3, #2
    9a7a:	4413      	add	r3, r2
    9a7c:	009b      	lsls	r3, r3, #2
    9a7e:	440b      	add	r3, r1
    9a80:	3327      	adds	r3, #39	; 0x27
    9a82:	2200      	movs	r2, #0
    9a84:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9a86:	79fb      	ldrb	r3, [r7, #7]
    9a88:	3301      	adds	r3, #1
    9a8a:	71fb      	strb	r3, [r7, #7]
    9a8c:	79fb      	ldrb	r3, [r7, #7]
    9a8e:	2b08      	cmp	r3, #8
    9a90:	d9d8      	bls.n	9a44 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9a92:	22a0      	movs	r2, #160	; 0xa0
    9a94:	2100      	movs	r1, #0
    9a96:	4805      	ldr	r0, [pc, #20]	; (9aac <_usb_d_dev_reset_epts+0x74>)
    9a98:	4b05      	ldr	r3, [pc, #20]	; (9ab0 <_usb_d_dev_reset_epts+0x78>)
    9a9a:	4798      	blx	r3
}
    9a9c:	bf00      	nop
    9a9e:	3708      	adds	r7, #8
    9aa0:	46bd      	mov	sp, r7
    9aa2:	bd80      	pop	{r7, pc}
    9aa4:	20000d90 	.word	0x20000d90
    9aa8:	0000a2fd 	.word	0x0000a2fd
    9aac:	20000e58 	.word	0x20000e58
    9ab0:	00010e1d 	.word	0x00010e1d

00009ab4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9ab4:	b580      	push	{r7, lr}
    9ab6:	b084      	sub	sp, #16
    9ab8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9aba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9abe:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9ac0:	2301      	movs	r3, #1
    9ac2:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9ac4:	2304      	movs	r3, #4
    9ac6:	713b      	strb	r3, [r7, #4]
    9ac8:	2300      	movs	r3, #0
    9aca:	717b      	strb	r3, [r7, #5]
    9acc:	2300      	movs	r3, #0
    9ace:	71bb      	strb	r3, [r7, #6]
    9ad0:	2300      	movs	r3, #0
    9ad2:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9ad4:	2101      	movs	r1, #1
    9ad6:	68f8      	ldr	r0, [r7, #12]
    9ad8:	4b26      	ldr	r3, [pc, #152]	; (9b74 <_usb_d_dev_init+0xc0>)
    9ada:	4798      	blx	r3
    9adc:	4603      	mov	r3, r0
    9ade:	f083 0301 	eor.w	r3, r3, #1
    9ae2:	b2db      	uxtb	r3, r3
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d011      	beq.n	9b0c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9ae8:	2102      	movs	r1, #2
    9aea:	68f8      	ldr	r0, [r7, #12]
    9aec:	4b22      	ldr	r3, [pc, #136]	; (9b78 <_usb_d_dev_init+0xc4>)
    9aee:	4798      	blx	r3
    9af0:	4603      	mov	r3, r0
    9af2:	2b00      	cmp	r3, #0
    9af4:	d006      	beq.n	9b04 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9af6:	68f8      	ldr	r0, [r7, #12]
    9af8:	4b20      	ldr	r3, [pc, #128]	; (9b7c <_usb_d_dev_init+0xc8>)
    9afa:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9afc:	2102      	movs	r1, #2
    9afe:	68f8      	ldr	r0, [r7, #12]
    9b00:	4b1f      	ldr	r3, [pc, #124]	; (9b80 <_usb_d_dev_init+0xcc>)
    9b02:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9b04:	2101      	movs	r1, #1
    9b06:	68f8      	ldr	r0, [r7, #12]
    9b08:	4b1e      	ldr	r3, [pc, #120]	; (9b84 <_usb_d_dev_init+0xd0>)
    9b0a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9b0c:	2101      	movs	r1, #1
    9b0e:	68f8      	ldr	r0, [r7, #12]
    9b10:	4b1b      	ldr	r3, [pc, #108]	; (9b80 <_usb_d_dev_init+0xcc>)
    9b12:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9b14:	4b1c      	ldr	r3, [pc, #112]	; (9b88 <_usb_d_dev_init+0xd4>)
    9b16:	4a1d      	ldr	r2, [pc, #116]	; (9b8c <_usb_d_dev_init+0xd8>)
    9b18:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9b1a:	4b1b      	ldr	r3, [pc, #108]	; (9b88 <_usb_d_dev_init+0xd4>)
    9b1c:	4a1b      	ldr	r2, [pc, #108]	; (9b8c <_usb_d_dev_init+0xd8>)
    9b1e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9b20:	4b19      	ldr	r3, [pc, #100]	; (9b88 <_usb_d_dev_init+0xd4>)
    9b22:	4a1a      	ldr	r2, [pc, #104]	; (9b8c <_usb_d_dev_init+0xd8>)
    9b24:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9b26:	4b18      	ldr	r3, [pc, #96]	; (9b88 <_usb_d_dev_init+0xd4>)
    9b28:	4a18      	ldr	r2, [pc, #96]	; (9b8c <_usb_d_dev_init+0xd8>)
    9b2a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9b2c:	4b16      	ldr	r3, [pc, #88]	; (9b88 <_usb_d_dev_init+0xd4>)
    9b2e:	4a17      	ldr	r2, [pc, #92]	; (9b8c <_usb_d_dev_init+0xd8>)
    9b30:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9b32:	4b17      	ldr	r3, [pc, #92]	; (9b90 <_usb_d_dev_init+0xdc>)
    9b34:	4798      	blx	r3

	_usb_load_calib();
    9b36:	4b17      	ldr	r3, [pc, #92]	; (9b94 <_usb_d_dev_init+0xe0>)
    9b38:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9b3a:	2104      	movs	r1, #4
    9b3c:	68f8      	ldr	r0, [r7, #12]
    9b3e:	4b11      	ldr	r3, [pc, #68]	; (9b84 <_usb_d_dev_init+0xd0>)
    9b40:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9b42:	4b15      	ldr	r3, [pc, #84]	; (9b98 <_usb_d_dev_init+0xe4>)
    9b44:	4619      	mov	r1, r3
    9b46:	68f8      	ldr	r0, [r7, #12]
    9b48:	4b14      	ldr	r3, [pc, #80]	; (9b9c <_usb_d_dev_init+0xe8>)
    9b4a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9b4c:	7afb      	ldrb	r3, [r7, #11]
    9b4e:	f107 0210 	add.w	r2, r7, #16
    9b52:	4413      	add	r3, r2
    9b54:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9b58:	f043 0301 	orr.w	r3, r3, #1
    9b5c:	b2db      	uxtb	r3, r3
    9b5e:	b29b      	uxth	r3, r3
    9b60:	4619      	mov	r1, r3
    9b62:	68f8      	ldr	r0, [r7, #12]
    9b64:	4b0e      	ldr	r3, [pc, #56]	; (9ba0 <_usb_d_dev_init+0xec>)
    9b66:	4798      	blx	r3

	return ERR_NONE;
    9b68:	2300      	movs	r3, #0
}
    9b6a:	4618      	mov	r0, r3
    9b6c:	3710      	adds	r7, #16
    9b6e:	46bd      	mov	sp, r7
    9b70:	bd80      	pop	{r7, pc}
    9b72:	bf00      	nop
    9b74:	0000814d 	.word	0x0000814d
    9b78:	0000849d 	.word	0x0000849d
    9b7c:	00008471 	.word	0x00008471
    9b80:	00008123 	.word	0x00008123
    9b84:	000084cd 	.word	0x000084cd
    9b88:	20000d90 	.word	0x20000d90
    9b8c:	00008595 	.word	0x00008595
    9b90:	00009a39 	.word	0x00009a39
    9b94:	000085ad 	.word	0x000085ad
    9b98:	20000e58 	.word	0x20000e58
    9b9c:	00008579 	.word	0x00008579
    9ba0:	0000853d 	.word	0x0000853d

00009ba4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9ba4:	b580      	push	{r7, lr}
    9ba6:	b082      	sub	sp, #8
    9ba8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9baa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9bae:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9bb0:	2103      	movs	r1, #3
    9bb2:	6878      	ldr	r0, [r7, #4]
    9bb4:	4b17      	ldr	r3, [pc, #92]	; (9c14 <_usb_d_dev_enable+0x70>)
    9bb6:	4798      	blx	r3
    9bb8:	4603      	mov	r3, r0
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d002      	beq.n	9bc4 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9bbe:	f06f 0310 	mvn.w	r3, #16
    9bc2:	e023      	b.n	9c0c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9bc4:	6878      	ldr	r0, [r7, #4]
    9bc6:	4b14      	ldr	r3, [pc, #80]	; (9c18 <_usb_d_dev_enable+0x74>)
    9bc8:	4798      	blx	r3
    9bca:	4603      	mov	r3, r0
    9bcc:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9bce:	78fb      	ldrb	r3, [r7, #3]
    9bd0:	f003 0302 	and.w	r3, r3, #2
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d107      	bne.n	9be8 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9bd8:	78fb      	ldrb	r3, [r7, #3]
    9bda:	f043 0302 	orr.w	r3, r3, #2
    9bde:	b2db      	uxtb	r3, r3
    9be0:	4619      	mov	r1, r3
    9be2:	6878      	ldr	r0, [r7, #4]
    9be4:	4b0d      	ldr	r3, [pc, #52]	; (9c1c <_usb_d_dev_enable+0x78>)
    9be6:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9be8:	2050      	movs	r0, #80	; 0x50
    9bea:	4b0d      	ldr	r3, [pc, #52]	; (9c20 <_usb_d_dev_enable+0x7c>)
    9bec:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9bee:	2051      	movs	r0, #81	; 0x51
    9bf0:	4b0b      	ldr	r3, [pc, #44]	; (9c20 <_usb_d_dev_enable+0x7c>)
    9bf2:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9bf4:	2052      	movs	r0, #82	; 0x52
    9bf6:	4b0a      	ldr	r3, [pc, #40]	; (9c20 <_usb_d_dev_enable+0x7c>)
    9bf8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9bfa:	2053      	movs	r0, #83	; 0x53
    9bfc:	4b08      	ldr	r3, [pc, #32]	; (9c20 <_usb_d_dev_enable+0x7c>)
    9bfe:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9c00:	f240 218d 	movw	r1, #653	; 0x28d
    9c04:	6878      	ldr	r0, [r7, #4]
    9c06:	4b07      	ldr	r3, [pc, #28]	; (9c24 <_usb_d_dev_enable+0x80>)
    9c08:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9c0a:	2300      	movs	r3, #0
}
    9c0c:	4618      	mov	r0, r3
    9c0e:	3708      	adds	r7, #8
    9c10:	46bd      	mov	sp, r7
    9c12:	bd80      	pop	{r7, pc}
    9c14:	00008447 	.word	0x00008447
    9c18:	000084f5 	.word	0x000084f5
    9c1c:	000084cd 	.word	0x000084cd
    9c20:	00008059 	.word	0x00008059
    9c24:	000083f1 	.word	0x000083f1

00009c28 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9c28:	b580      	push	{r7, lr}
    9c2a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9c2c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c30:	4b01      	ldr	r3, [pc, #4]	; (9c38 <_usb_d_dev_attach+0x10>)
    9c32:	4798      	blx	r3
}
    9c34:	bf00      	nop
    9c36:	bd80      	pop	{r7, pc}
    9c38:	00008519 	.word	0x00008519

00009c3c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9c3c:	b580      	push	{r7, lr}
    9c3e:	b082      	sub	sp, #8
    9c40:	af00      	add	r7, sp, #0
    9c42:	4603      	mov	r3, r0
    9c44:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9c46:	79fb      	ldrb	r3, [r7, #7]
    9c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9c4c:	b2db      	uxtb	r3, r3
    9c4e:	4619      	mov	r1, r3
    9c50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c54:	4b02      	ldr	r3, [pc, #8]	; (9c60 <_usb_d_dev_set_address+0x24>)
    9c56:	4798      	blx	r3
}
    9c58:	bf00      	nop
    9c5a:	3708      	adds	r7, #8
    9c5c:	46bd      	mov	sp, r7
    9c5e:	bd80      	pop	{r7, pc}
    9c60:	0000855b 	.word	0x0000855b

00009c64 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9c64:	b590      	push	{r4, r7, lr}
    9c66:	b085      	sub	sp, #20
    9c68:	af00      	add	r7, sp, #0
    9c6a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9c6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c70:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	7c9b      	ldrb	r3, [r3, #18]
    9c76:	f003 030f 	and.w	r3, r3, #15
    9c7a:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9c7c:	687b      	ldr	r3, [r7, #4]
    9c7e:	68db      	ldr	r3, [r3, #12]
    9c80:	461a      	mov	r2, r3
    9c82:	7afb      	ldrb	r3, [r7, #11]
    9c84:	2100      	movs	r1, #0
    9c86:	4618      	mov	r0, r3
    9c88:	4b0f      	ldr	r3, [pc, #60]	; (9cc8 <_usb_d_dev_trans_setup+0x64>)
    9c8a:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9c8c:	687b      	ldr	r3, [r7, #4]
    9c8e:	8a1b      	ldrh	r3, [r3, #16]
    9c90:	461a      	mov	r2, r3
    9c92:	7af8      	ldrb	r0, [r7, #11]
    9c94:	2300      	movs	r3, #0
    9c96:	2100      	movs	r1, #0
    9c98:	4c0c      	ldr	r4, [pc, #48]	; (9ccc <_usb_d_dev_trans_setup+0x68>)
    9c9a:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9c9c:	7afb      	ldrb	r3, [r7, #11]
    9c9e:	22b0      	movs	r2, #176	; 0xb0
    9ca0:	4619      	mov	r1, r3
    9ca2:	68f8      	ldr	r0, [r7, #12]
    9ca4:	4b0a      	ldr	r3, [pc, #40]	; (9cd0 <_usb_d_dev_trans_setup+0x6c>)
    9ca6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9ca8:	7afb      	ldrb	r3, [r7, #11]
    9caa:	2200      	movs	r2, #0
    9cac:	2100      	movs	r1, #0
    9cae:	4618      	mov	r0, r3
    9cb0:	4b08      	ldr	r3, [pc, #32]	; (9cd4 <_usb_d_dev_trans_setup+0x70>)
    9cb2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9cb4:	7afb      	ldrb	r3, [r7, #11]
    9cb6:	2210      	movs	r2, #16
    9cb8:	4619      	mov	r1, r3
    9cba:	68f8      	ldr	r0, [r7, #12]
    9cbc:	4b06      	ldr	r3, [pc, #24]	; (9cd8 <_usb_d_dev_trans_setup+0x74>)
    9cbe:	4798      	blx	r3
}
    9cc0:	bf00      	nop
    9cc2:	3714      	adds	r7, #20
    9cc4:	46bd      	mov	sp, r7
    9cc6:	bd90      	pop	{r4, r7, pc}
    9cc8:	000089f9 	.word	0x000089f9
    9ccc:	00008b81 	.word	0x00008b81
    9cd0:	00008259 	.word	0x00008259
    9cd4:	00008c51 	.word	0x00008c51
    9cd8:	000082ad 	.word	0x000082ad

00009cdc <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b088      	sub	sp, #32
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	4603      	mov	r3, r0
    9ce4:	71fb      	strb	r3, [r7, #7]
    9ce6:	460b      	mov	r3, r1
    9ce8:	71bb      	strb	r3, [r7, #6]
    9cea:	4613      	mov	r3, r2
    9cec:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9cee:	79fb      	ldrb	r3, [r7, #7]
    9cf0:	f003 030f 	and.w	r3, r3, #15
    9cf4:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9cf6:	79fb      	ldrb	r3, [r7, #7]
    9cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	bf14      	ite	ne
    9d00:	2301      	movne	r3, #1
    9d02:	2300      	moveq	r3, #0
    9d04:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9d06:	7fba      	ldrb	r2, [r7, #30]
    9d08:	7ffb      	ldrb	r3, [r7, #31]
    9d0a:	4611      	mov	r1, r2
    9d0c:	4618      	mov	r0, r3
    9d0e:	4b3e      	ldr	r3, [pc, #248]	; (9e08 <_usb_d_dev_ep_init+0x12c>)
    9d10:	4798      	blx	r3
    9d12:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9d14:	79bb      	ldrb	r3, [r7, #6]
    9d16:	f003 0303 	and.w	r3, r3, #3
    9d1a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9d1c:	7ffa      	ldrb	r2, [r7, #31]
    9d1e:	4613      	mov	r3, r2
    9d20:	005b      	lsls	r3, r3, #1
    9d22:	4413      	add	r3, r2
    9d24:	009b      	lsls	r3, r3, #2
    9d26:	4a39      	ldr	r2, [pc, #228]	; (9e0c <_usb_d_dev_ep_init+0x130>)
    9d28:	4413      	add	r3, r2
    9d2a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9d2c:	7ffb      	ldrb	r3, [r7, #31]
    9d2e:	2b04      	cmp	r3, #4
    9d30:	d902      	bls.n	9d38 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9d32:	f06f 0311 	mvn.w	r3, #17
    9d36:	e063      	b.n	9e00 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9d38:	69bb      	ldr	r3, [r7, #24]
    9d3a:	7c9b      	ldrb	r3, [r3, #18]
    9d3c:	2bff      	cmp	r3, #255	; 0xff
    9d3e:	d002      	beq.n	9d46 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9d40:	f06f 0313 	mvn.w	r3, #19
    9d44:	e05c      	b.n	9e00 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9d46:	7dfb      	ldrb	r3, [r7, #23]
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d11f      	bne.n	9d8c <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9d4c:	7fbb      	ldrb	r3, [r7, #30]
    9d4e:	2b00      	cmp	r3, #0
    9d50:	bf14      	ite	ne
    9d52:	2301      	movne	r3, #1
    9d54:	2300      	moveq	r3, #0
    9d56:	b2db      	uxtb	r3, r3
    9d58:	f083 0301 	eor.w	r3, r3, #1
    9d5c:	b2db      	uxtb	r3, r3
    9d5e:	f003 0301 	and.w	r3, r3, #1
    9d62:	b2da      	uxtb	r2, r3
    9d64:	7ffb      	ldrb	r3, [r7, #31]
    9d66:	4611      	mov	r1, r2
    9d68:	4618      	mov	r0, r3
    9d6a:	4b27      	ldr	r3, [pc, #156]	; (9e08 <_usb_d_dev_ep_init+0x12c>)
    9d6c:	4798      	blx	r3
    9d6e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9d70:	68fb      	ldr	r3, [r7, #12]
    9d72:	7c9b      	ldrb	r3, [r3, #18]
    9d74:	2bff      	cmp	r3, #255	; 0xff
    9d76:	d002      	beq.n	9d7e <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9d78:	f06f 0313 	mvn.w	r3, #19
    9d7c:	e040      	b.n	9e00 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9d7e:	693b      	ldr	r3, [r7, #16]
    9d80:	681b      	ldr	r3, [r3, #0]
    9d82:	2b00      	cmp	r3, #0
    9d84:	d102      	bne.n	9d8c <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9d86:	f06f 0312 	mvn.w	r3, #18
    9d8a:	e039      	b.n	9e00 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9d8c:	7fbb      	ldrb	r3, [r7, #30]
    9d8e:	2b00      	cmp	r3, #0
    9d90:	d007      	beq.n	9da2 <_usb_d_dev_ep_init+0xc6>
    9d92:	693b      	ldr	r3, [r7, #16]
    9d94:	685b      	ldr	r3, [r3, #4]
    9d96:	2b00      	cmp	r3, #0
    9d98:	bf14      	ite	ne
    9d9a:	2301      	movne	r3, #1
    9d9c:	2300      	moveq	r3, #0
    9d9e:	b2db      	uxtb	r3, r3
    9da0:	e006      	b.n	9db0 <_usb_d_dev_ep_init+0xd4>
    9da2:	693b      	ldr	r3, [r7, #16]
    9da4:	681b      	ldr	r3, [r3, #0]
    9da6:	2b00      	cmp	r3, #0
    9da8:	bf14      	ite	ne
    9daa:	2301      	movne	r3, #1
    9dac:	2300      	moveq	r3, #0
    9dae:	b2db      	uxtb	r3, r3
    9db0:	2b00      	cmp	r3, #0
    9db2:	d00f      	beq.n	9dd4 <_usb_d_dev_ep_init+0xf8>
    9db4:	7fbb      	ldrb	r3, [r7, #30]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d003      	beq.n	9dc2 <_usb_d_dev_ep_init+0xe6>
    9dba:	693b      	ldr	r3, [r7, #16]
    9dbc:	895b      	ldrh	r3, [r3, #10]
    9dbe:	461a      	mov	r2, r3
    9dc0:	e002      	b.n	9dc8 <_usb_d_dev_ep_init+0xec>
    9dc2:	693b      	ldr	r3, [r7, #16]
    9dc4:	891b      	ldrh	r3, [r3, #8]
    9dc6:	461a      	mov	r2, r3
    9dc8:	88bb      	ldrh	r3, [r7, #4]
    9dca:	429a      	cmp	r2, r3
    9dcc:	da02      	bge.n	9dd4 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9dce:	f06f 0312 	mvn.w	r3, #18
    9dd2:	e015      	b.n	9e00 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9dd4:	7fbb      	ldrb	r3, [r7, #30]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d002      	beq.n	9de0 <_usb_d_dev_ep_init+0x104>
    9dda:	693b      	ldr	r3, [r7, #16]
    9ddc:	685b      	ldr	r3, [r3, #4]
    9dde:	e001      	b.n	9de4 <_usb_d_dev_ep_init+0x108>
    9de0:	693b      	ldr	r3, [r7, #16]
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	69ba      	ldr	r2, [r7, #24]
    9de6:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9de8:	69bb      	ldr	r3, [r7, #24]
    9dea:	88ba      	ldrh	r2, [r7, #4]
    9dec:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9dee:	7dfb      	ldrb	r3, [r7, #23]
    9df0:	3301      	adds	r3, #1
    9df2:	b2da      	uxtb	r2, r3
    9df4:	69bb      	ldr	r3, [r7, #24]
    9df6:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9df8:	69bb      	ldr	r3, [r7, #24]
    9dfa:	79fa      	ldrb	r2, [r7, #7]
    9dfc:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9dfe:	2300      	movs	r3, #0
}
    9e00:	4618      	mov	r0, r3
    9e02:	3720      	adds	r7, #32
    9e04:	46bd      	mov	sp, r7
    9e06:	bd80      	pop	{r7, pc}
    9e08:	00008d0d 	.word	0x00008d0d
    9e0c:	00011414 	.word	0x00011414

00009e10 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9e10:	b580      	push	{r7, lr}
    9e12:	b086      	sub	sp, #24
    9e14:	af00      	add	r7, sp, #0
    9e16:	4603      	mov	r3, r0
    9e18:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9e1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e1e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9e20:	79fb      	ldrb	r3, [r7, #7]
    9e22:	f003 030f 	and.w	r3, r3, #15
    9e26:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9e28:	79fb      	ldrb	r3, [r7, #7]
    9e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e2e:	2b00      	cmp	r3, #0
    9e30:	bf14      	ite	ne
    9e32:	2301      	movne	r3, #1
    9e34:	2300      	moveq	r3, #0
    9e36:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e38:	7cba      	ldrb	r2, [r7, #18]
    9e3a:	7cfb      	ldrb	r3, [r7, #19]
    9e3c:	4611      	mov	r1, r2
    9e3e:	4618      	mov	r0, r3
    9e40:	4b2a      	ldr	r3, [pc, #168]	; (9eec <_usb_d_dev_ep_deinit+0xdc>)
    9e42:	4798      	blx	r3
    9e44:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9e46:	7cfb      	ldrb	r3, [r7, #19]
    9e48:	2b04      	cmp	r3, #4
    9e4a:	d84a      	bhi.n	9ee2 <_usb_d_dev_ep_deinit+0xd2>
    9e4c:	68fb      	ldr	r3, [r7, #12]
    9e4e:	7c9b      	ldrb	r3, [r3, #18]
    9e50:	2bff      	cmp	r3, #255	; 0xff
    9e52:	d046      	beq.n	9ee2 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9e54:	7cbb      	ldrb	r3, [r7, #18]
    9e56:	2203      	movs	r2, #3
    9e58:	4619      	mov	r1, r3
    9e5a:	68f8      	ldr	r0, [r7, #12]
    9e5c:	4b24      	ldr	r3, [pc, #144]	; (9ef0 <_usb_d_dev_ep_deinit+0xe0>)
    9e5e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9e60:	68fb      	ldr	r3, [r7, #12]
    9e62:	7cdb      	ldrb	r3, [r3, #19]
    9e64:	f003 0307 	and.w	r3, r3, #7
    9e68:	b2db      	uxtb	r3, r3
    9e6a:	2b01      	cmp	r3, #1
    9e6c:	d107      	bne.n	9e7e <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9e6e:	79fb      	ldrb	r3, [r7, #7]
    9e70:	697a      	ldr	r2, [r7, #20]
    9e72:	3308      	adds	r3, #8
    9e74:	015b      	lsls	r3, r3, #5
    9e76:	4413      	add	r3, r2
    9e78:	2200      	movs	r2, #0
    9e7a:	701a      	strb	r2, [r3, #0]
    9e7c:	e02a      	b.n	9ed4 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9e82:	2b00      	cmp	r3, #0
    9e84:	da15      	bge.n	9eb2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9e86:	79fb      	ldrb	r3, [r7, #7]
    9e88:	f003 030f 	and.w	r3, r3, #15
    9e8c:	79fa      	ldrb	r2, [r7, #7]
    9e8e:	f002 020f 	and.w	r2, r2, #15
    9e92:	6979      	ldr	r1, [r7, #20]
    9e94:	3208      	adds	r2, #8
    9e96:	0152      	lsls	r2, r2, #5
    9e98:	440a      	add	r2, r1
    9e9a:	7812      	ldrb	r2, [r2, #0]
    9e9c:	b2d2      	uxtb	r2, r2
    9e9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9ea2:	b2d1      	uxtb	r1, r2
    9ea4:	697a      	ldr	r2, [r7, #20]
    9ea6:	3308      	adds	r3, #8
    9ea8:	015b      	lsls	r3, r3, #5
    9eaa:	4413      	add	r3, r2
    9eac:	460a      	mov	r2, r1
    9eae:	701a      	strb	r2, [r3, #0]
    9eb0:	e010      	b.n	9ed4 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9eb2:	79fb      	ldrb	r3, [r7, #7]
    9eb4:	79fa      	ldrb	r2, [r7, #7]
    9eb6:	6979      	ldr	r1, [r7, #20]
    9eb8:	3208      	adds	r2, #8
    9eba:	0152      	lsls	r2, r2, #5
    9ebc:	440a      	add	r2, r1
    9ebe:	7812      	ldrb	r2, [r2, #0]
    9ec0:	b2d2      	uxtb	r2, r2
    9ec2:	f022 0207 	bic.w	r2, r2, #7
    9ec6:	b2d1      	uxtb	r1, r2
    9ec8:	697a      	ldr	r2, [r7, #20]
    9eca:	3308      	adds	r3, #8
    9ecc:	015b      	lsls	r3, r3, #5
    9ece:	4413      	add	r3, r2
    9ed0:	460a      	mov	r2, r1
    9ed2:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9ed4:	68fb      	ldr	r3, [r7, #12]
    9ed6:	2200      	movs	r2, #0
    9ed8:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9eda:	68fb      	ldr	r3, [r7, #12]
    9edc:	22ff      	movs	r2, #255	; 0xff
    9ede:	749a      	strb	r2, [r3, #18]
    9ee0:	e000      	b.n	9ee4 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9ee2:	bf00      	nop
}
    9ee4:	3718      	adds	r7, #24
    9ee6:	46bd      	mov	sp, r7
    9ee8:	bd80      	pop	{r7, pc}
    9eea:	bf00      	nop
    9eec:	00008d0d 	.word	0x00008d0d
    9ef0:	0000a345 	.word	0x0000a345

00009ef4 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9ef4:	b5b0      	push	{r4, r5, r7, lr}
    9ef6:	b088      	sub	sp, #32
    9ef8:	af00      	add	r7, sp, #0
    9efa:	4603      	mov	r3, r0
    9efc:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9efe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f02:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9f04:	79fb      	ldrb	r3, [r7, #7]
    9f06:	f003 030f 	and.w	r3, r3, #15
    9f0a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9f0c:	79fb      	ldrb	r3, [r7, #7]
    9f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f12:	2b00      	cmp	r3, #0
    9f14:	bf14      	ite	ne
    9f16:	2301      	movne	r3, #1
    9f18:	2300      	moveq	r3, #0
    9f1a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9f1c:	7eba      	ldrb	r2, [r7, #26]
    9f1e:	7efb      	ldrb	r3, [r7, #27]
    9f20:	4611      	mov	r1, r2
    9f22:	4618      	mov	r0, r3
    9f24:	4b70      	ldr	r3, [pc, #448]	; (a0e8 <_usb_d_dev_ep_enable+0x1f4>)
    9f26:	4798      	blx	r3
    9f28:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9f2a:	7efb      	ldrb	r3, [r7, #27]
    9f2c:	4619      	mov	r1, r3
    9f2e:	69f8      	ldr	r0, [r7, #28]
    9f30:	4b6e      	ldr	r3, [pc, #440]	; (a0ec <_usb_d_dev_ep_enable+0x1f8>)
    9f32:	4798      	blx	r3
    9f34:	4603      	mov	r3, r0
    9f36:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9f38:	7efb      	ldrb	r3, [r7, #27]
    9f3a:	2b04      	cmp	r3, #4
    9f3c:	d803      	bhi.n	9f46 <_usb_d_dev_ep_enable+0x52>
    9f3e:	697b      	ldr	r3, [r7, #20]
    9f40:	7c9b      	ldrb	r3, [r3, #18]
    9f42:	2bff      	cmp	r3, #255	; 0xff
    9f44:	d102      	bne.n	9f4c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9f46:	f06f 0311 	mvn.w	r3, #17
    9f4a:	e0c8      	b.n	a0de <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9f4c:	7efb      	ldrb	r3, [r7, #27]
    9f4e:	015b      	lsls	r3, r3, #5
    9f50:	4a67      	ldr	r2, [pc, #412]	; (a0f0 <_usb_d_dev_ep_enable+0x1fc>)
    9f52:	4413      	add	r3, r2
    9f54:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9f56:	697b      	ldr	r3, [r7, #20]
    9f58:	7cdb      	ldrb	r3, [r3, #19]
    9f5a:	f003 0307 	and.w	r3, r3, #7
    9f5e:	b2db      	uxtb	r3, r3
    9f60:	2b01      	cmp	r3, #1
    9f62:	d14b      	bne.n	9ffc <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9f64:	7cfb      	ldrb	r3, [r7, #19]
    9f66:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d002      	beq.n	9f74 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9f6e:	f06f 0313 	mvn.w	r3, #19
    9f72:	e0b4      	b.n	a0de <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9f74:	7efb      	ldrb	r3, [r7, #27]
    9f76:	2211      	movs	r2, #17
    9f78:	4619      	mov	r1, r3
    9f7a:	69f8      	ldr	r0, [r7, #28]
    9f7c:	4b5d      	ldr	r3, [pc, #372]	; (a0f4 <_usb_d_dev_ep_enable+0x200>)
    9f7e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9f80:	697b      	ldr	r3, [r7, #20]
    9f82:	8a1b      	ldrh	r3, [r3, #16]
    9f84:	039b      	lsls	r3, r3, #14
    9f86:	4c5c      	ldr	r4, [pc, #368]	; (a0f8 <_usb_d_dev_ep_enable+0x204>)
    9f88:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9f8a:	697b      	ldr	r3, [r7, #20]
    9f8c:	8a1b      	ldrh	r3, [r3, #16]
    9f8e:	4618      	mov	r0, r3
    9f90:	4b5a      	ldr	r3, [pc, #360]	; (a0fc <_usb_d_dev_ep_enable+0x208>)
    9f92:	4798      	blx	r3
    9f94:	4603      	mov	r3, r0
    9f96:	071b      	lsls	r3, r3, #28
    9f98:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9f9c:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9fa4:	68fb      	ldr	r3, [r7, #12]
    9fa6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9faa:	697b      	ldr	r3, [r7, #20]
    9fac:	8a1b      	ldrh	r3, [r3, #16]
    9fae:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9fb2:	697b      	ldr	r3, [r7, #20]
    9fb4:	8a1b      	ldrh	r3, [r3, #16]
    9fb6:	4618      	mov	r0, r3
    9fb8:	4b50      	ldr	r3, [pc, #320]	; (a0fc <_usb_d_dev_ep_enable+0x208>)
    9fba:	4798      	blx	r3
    9fbc:	4603      	mov	r3, r0
    9fbe:	071b      	lsls	r3, r3, #28
    9fc0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9fc4:	432b      	orrs	r3, r5
    9fc6:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9fc8:	7efb      	ldrb	r3, [r7, #27]
    9fca:	2200      	movs	r2, #0
    9fcc:	2100      	movs	r1, #0
    9fce:	4618      	mov	r0, r3
    9fd0:	4b4b      	ldr	r3, [pc, #300]	; (a100 <_usb_d_dev_ep_enable+0x20c>)
    9fd2:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9fd4:	7efb      	ldrb	r3, [r7, #27]
    9fd6:	2200      	movs	r2, #0
    9fd8:	2101      	movs	r1, #1
    9fda:	4618      	mov	r0, r3
    9fdc:	4b49      	ldr	r3, [pc, #292]	; (a104 <_usb_d_dev_ep_enable+0x210>)
    9fde:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9fe0:	7efb      	ldrb	r3, [r7, #27]
    9fe2:	2100      	movs	r1, #0
    9fe4:	4618      	mov	r0, r3
    9fe6:	4b48      	ldr	r3, [pc, #288]	; (a108 <_usb_d_dev_ep_enable+0x214>)
    9fe8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9fea:	7efb      	ldrb	r3, [r7, #27]
    9fec:	2101      	movs	r1, #1
    9fee:	4618      	mov	r0, r3
    9ff0:	4b45      	ldr	r3, [pc, #276]	; (a108 <_usb_d_dev_ep_enable+0x214>)
    9ff2:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9ff4:	6978      	ldr	r0, [r7, #20]
    9ff6:	4b45      	ldr	r3, [pc, #276]	; (a10c <_usb_d_dev_ep_enable+0x218>)
    9ff8:	4798      	blx	r3
    9ffa:	e06f      	b.n	a0dc <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9ffc:	7ebb      	ldrb	r3, [r7, #26]
    9ffe:	2b00      	cmp	r3, #0
    a000:	d038      	beq.n	a074 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a002:	7cfb      	ldrb	r3, [r7, #19]
    a004:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a008:	2b00      	cmp	r3, #0
    a00a:	d002      	beq.n	a012 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a00c:	f06f 0313 	mvn.w	r3, #19
    a010:	e065      	b.n	a0de <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a012:	697b      	ldr	r3, [r7, #20]
    a014:	7cdb      	ldrb	r3, [r3, #19]
    a016:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a01a:	b2db      	uxtb	r3, r3
    a01c:	011b      	lsls	r3, r3, #4
    a01e:	b2db      	uxtb	r3, r3
    a020:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a024:	b2da      	uxtb	r2, r3
    a026:	7cfb      	ldrb	r3, [r7, #19]
    a028:	4313      	orrs	r3, r2
    a02a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a02c:	7cfa      	ldrb	r2, [r7, #19]
    a02e:	7efb      	ldrb	r3, [r7, #27]
    a030:	4619      	mov	r1, r3
    a032:	69f8      	ldr	r0, [r7, #28]
    a034:	4b2f      	ldr	r3, [pc, #188]	; (a0f4 <_usb_d_dev_ep_enable+0x200>)
    a036:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a038:	68fb      	ldr	r3, [r7, #12]
    a03a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a03e:	697b      	ldr	r3, [r7, #20]
    a040:	8a1b      	ldrh	r3, [r3, #16]
    a042:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a046:	697b      	ldr	r3, [r7, #20]
    a048:	8a1b      	ldrh	r3, [r3, #16]
    a04a:	4618      	mov	r0, r3
    a04c:	4b2b      	ldr	r3, [pc, #172]	; (a0fc <_usb_d_dev_ep_enable+0x208>)
    a04e:	4798      	blx	r3
    a050:	4603      	mov	r3, r0
    a052:	071b      	lsls	r3, r3, #28
    a054:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a058:	432b      	orrs	r3, r5
    a05a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a05c:	7efb      	ldrb	r3, [r7, #27]
    a05e:	2200      	movs	r2, #0
    a060:	2101      	movs	r1, #1
    a062:	4618      	mov	r0, r3
    a064:	4b27      	ldr	r3, [pc, #156]	; (a104 <_usb_d_dev_ep_enable+0x210>)
    a066:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a068:	7efb      	ldrb	r3, [r7, #27]
    a06a:	2101      	movs	r1, #1
    a06c:	4618      	mov	r0, r3
    a06e:	4b26      	ldr	r3, [pc, #152]	; (a108 <_usb_d_dev_ep_enable+0x214>)
    a070:	4798      	blx	r3
    a072:	e033      	b.n	a0dc <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a074:	7cfb      	ldrb	r3, [r7, #19]
    a076:	f003 0307 	and.w	r3, r3, #7
    a07a:	2b00      	cmp	r3, #0
    a07c:	d002      	beq.n	a084 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a07e:	f06f 0313 	mvn.w	r3, #19
    a082:	e02c      	b.n	a0de <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a084:	697b      	ldr	r3, [r7, #20]
    a086:	7cdb      	ldrb	r3, [r3, #19]
    a088:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a08c:	b2db      	uxtb	r3, r3
    a08e:	461a      	mov	r2, r3
    a090:	7cfb      	ldrb	r3, [r7, #19]
    a092:	4313      	orrs	r3, r2
    a094:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a096:	7cfa      	ldrb	r2, [r7, #19]
    a098:	7efb      	ldrb	r3, [r7, #27]
    a09a:	4619      	mov	r1, r3
    a09c:	69f8      	ldr	r0, [r7, #28]
    a09e:	4b15      	ldr	r3, [pc, #84]	; (a0f4 <_usb_d_dev_ep_enable+0x200>)
    a0a0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a0a2:	697b      	ldr	r3, [r7, #20]
    a0a4:	8a1b      	ldrh	r3, [r3, #16]
    a0a6:	039b      	lsls	r3, r3, #14
    a0a8:	4c13      	ldr	r4, [pc, #76]	; (a0f8 <_usb_d_dev_ep_enable+0x204>)
    a0aa:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a0ac:	697b      	ldr	r3, [r7, #20]
    a0ae:	8a1b      	ldrh	r3, [r3, #16]
    a0b0:	4618      	mov	r0, r3
    a0b2:	4b12      	ldr	r3, [pc, #72]	; (a0fc <_usb_d_dev_ep_enable+0x208>)
    a0b4:	4798      	blx	r3
    a0b6:	4603      	mov	r3, r0
    a0b8:	071b      	lsls	r3, r3, #28
    a0ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a0be:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a0c2:	68fb      	ldr	r3, [r7, #12]
    a0c4:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a0c6:	7efb      	ldrb	r3, [r7, #27]
    a0c8:	2200      	movs	r2, #0
    a0ca:	2100      	movs	r1, #0
    a0cc:	4618      	mov	r0, r3
    a0ce:	4b0c      	ldr	r3, [pc, #48]	; (a100 <_usb_d_dev_ep_enable+0x20c>)
    a0d0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a0d2:	7efb      	ldrb	r3, [r7, #27]
    a0d4:	2100      	movs	r1, #0
    a0d6:	4618      	mov	r0, r3
    a0d8:	4b0b      	ldr	r3, [pc, #44]	; (a108 <_usb_d_dev_ep_enable+0x214>)
    a0da:	4798      	blx	r3
	}

	return USB_OK;
    a0dc:	2300      	movs	r3, #0
}
    a0de:	4618      	mov	r0, r3
    a0e0:	3720      	adds	r7, #32
    a0e2:	46bd      	mov	sp, r7
    a0e4:	bdb0      	pop	{r4, r5, r7, pc}
    a0e6:	bf00      	nop
    a0e8:	00008d0d 	.word	0x00008d0d
    a0ec:	00008393 	.word	0x00008393
    a0f0:	20000e58 	.word	0x20000e58
    a0f4:	00008369 	.word	0x00008369
    a0f8:	0fffc000 	.word	0x0fffc000
    a0fc:	00008ca9 	.word	0x00008ca9
    a100:	00008c51 	.word	0x00008c51
    a104:	00008bf9 	.word	0x00008bf9
    a108:	00008bc1 	.word	0x00008bc1
    a10c:	00009c65 	.word	0x00009c65

0000a110 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a110:	b580      	push	{r7, lr}
    a112:	b084      	sub	sp, #16
    a114:	af00      	add	r7, sp, #0
    a116:	6078      	str	r0, [r7, #4]
    a118:	460b      	mov	r3, r1
    a11a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	7c9b      	ldrb	r3, [r3, #18]
    a120:	f003 030f 	and.w	r3, r3, #15
    a124:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a126:	78fa      	ldrb	r2, [r7, #3]
    a128:	7bfb      	ldrb	r3, [r7, #15]
    a12a:	4611      	mov	r1, r2
    a12c:	4618      	mov	r0, r3
    a12e:	4b03      	ldr	r3, [pc, #12]	; (a13c <_usb_d_dev_ep_stall_get+0x2c>)
    a130:	4798      	blx	r3
    a132:	4603      	mov	r3, r0
}
    a134:	4618      	mov	r0, r3
    a136:	3710      	adds	r7, #16
    a138:	46bd      	mov	sp, r7
    a13a:	bd80      	pop	{r7, pc}
    a13c:	00008801 	.word	0x00008801

0000a140 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a140:	b580      	push	{r7, lr}
    a142:	b084      	sub	sp, #16
    a144:	af00      	add	r7, sp, #0
    a146:	6078      	str	r0, [r7, #4]
    a148:	460b      	mov	r3, r1
    a14a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	7c9b      	ldrb	r3, [r3, #18]
    a150:	f003 030f 	and.w	r3, r3, #15
    a154:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a156:	78f9      	ldrb	r1, [r7, #3]
    a158:	7bfb      	ldrb	r3, [r7, #15]
    a15a:	2201      	movs	r2, #1
    a15c:	4618      	mov	r0, r3
    a15e:	4b0a      	ldr	r3, [pc, #40]	; (a188 <_usb_d_dev_ep_stall_set+0x48>)
    a160:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a162:	78fb      	ldrb	r3, [r7, #3]
    a164:	2220      	movs	r2, #32
    a166:	409a      	lsls	r2, r3
    a168:	7bfb      	ldrb	r3, [r7, #15]
    a16a:	4611      	mov	r1, r2
    a16c:	4618      	mov	r0, r3
    a16e:	4b07      	ldr	r3, [pc, #28]	; (a18c <_usb_d_dev_ep_stall_set+0x4c>)
    a170:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a172:	687a      	ldr	r2, [r7, #4]
    a174:	7cd3      	ldrb	r3, [r2, #19]
    a176:	f043 0308 	orr.w	r3, r3, #8
    a17a:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a17c:	2300      	movs	r3, #0
}
    a17e:	4618      	mov	r0, r3
    a180:	3710      	adds	r7, #16
    a182:	46bd      	mov	sp, r7
    a184:	bd80      	pop	{r7, pc}
    a186:	bf00      	nop
    a188:	000087a9 	.word	0x000087a9
    a18c:	00008729 	.word	0x00008729

0000a190 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a190:	b580      	push	{r7, lr}
    a192:	b084      	sub	sp, #16
    a194:	af00      	add	r7, sp, #0
    a196:	6078      	str	r0, [r7, #4]
    a198:	460b      	mov	r3, r1
    a19a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	7c9b      	ldrb	r3, [r3, #18]
    a1a0:	f003 030f 	and.w	r3, r3, #15
    a1a4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a1a6:	78fa      	ldrb	r2, [r7, #3]
    a1a8:	7bfb      	ldrb	r3, [r7, #15]
    a1aa:	4611      	mov	r1, r2
    a1ac:	4618      	mov	r0, r3
    a1ae:	4b28      	ldr	r3, [pc, #160]	; (a250 <_usb_d_dev_ep_stall_clr+0xc0>)
    a1b0:	4798      	blx	r3
    a1b2:	4603      	mov	r3, r0
    a1b4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a1b6:	7bbb      	ldrb	r3, [r7, #14]
    a1b8:	f083 0301 	eor.w	r3, r3, #1
    a1bc:	b2db      	uxtb	r3, r3
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d001      	beq.n	a1c6 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a1c2:	2300      	movs	r3, #0
    a1c4:	e040      	b.n	a248 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a1c6:	78f9      	ldrb	r1, [r7, #3]
    a1c8:	7bfb      	ldrb	r3, [r7, #15]
    a1ca:	2200      	movs	r2, #0
    a1cc:	4618      	mov	r0, r3
    a1ce:	4b21      	ldr	r3, [pc, #132]	; (a254 <_usb_d_dev_ep_stall_clr+0xc4>)
    a1d0:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a1d2:	78fb      	ldrb	r3, [r7, #3]
    a1d4:	2220      	movs	r2, #32
    a1d6:	409a      	lsls	r2, r3
    a1d8:	7bfb      	ldrb	r3, [r7, #15]
    a1da:	4611      	mov	r1, r2
    a1dc:	4618      	mov	r0, r3
    a1de:	4b1e      	ldr	r3, [pc, #120]	; (a258 <_usb_d_dev_ep_stall_clr+0xc8>)
    a1e0:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a1e2:	78fa      	ldrb	r2, [r7, #3]
    a1e4:	7bfb      	ldrb	r3, [r7, #15]
    a1e6:	4611      	mov	r1, r2
    a1e8:	4618      	mov	r0, r3
    a1ea:	4b1c      	ldr	r3, [pc, #112]	; (a25c <_usb_d_dev_ep_stall_clr+0xcc>)
    a1ec:	4798      	blx	r3
    a1ee:	4603      	mov	r3, r0
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d00b      	beq.n	a20c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a1f4:	78fa      	ldrb	r2, [r7, #3]
    a1f6:	7bfb      	ldrb	r3, [r7, #15]
    a1f8:	4611      	mov	r1, r2
    a1fa:	4618      	mov	r0, r3
    a1fc:	4b18      	ldr	r3, [pc, #96]	; (a260 <_usb_d_dev_ep_stall_clr+0xd0>)
    a1fe:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a200:	78f9      	ldrb	r1, [r7, #3]
    a202:	7bfb      	ldrb	r3, [r7, #15]
    a204:	2200      	movs	r2, #0
    a206:	4618      	mov	r0, r3
    a208:	4b16      	ldr	r3, [pc, #88]	; (a264 <_usb_d_dev_ep_stall_clr+0xd4>)
    a20a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	7cdb      	ldrb	r3, [r3, #19]
    a210:	f003 0307 	and.w	r3, r3, #7
    a214:	b2db      	uxtb	r3, r3
    a216:	2b01      	cmp	r3, #1
    a218:	d110      	bne.n	a23c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a21a:	7bfb      	ldrb	r3, [r7, #15]
    a21c:	4619      	mov	r1, r3
    a21e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a222:	4b11      	ldr	r3, [pc, #68]	; (a268 <_usb_d_dev_ep_stall_clr+0xd8>)
    a224:	4798      	blx	r3
    a226:	4603      	mov	r3, r0
    a228:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a22c:	2b00      	cmp	r3, #0
    a22e:	d10a      	bne.n	a246 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a230:	687a      	ldr	r2, [r7, #4]
    a232:	7cd3      	ldrb	r3, [r2, #19]
    a234:	f36f 03c3 	bfc	r3, #3, #1
    a238:	74d3      	strb	r3, [r2, #19]
    a23a:	e004      	b.n	a246 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a23c:	687a      	ldr	r2, [r7, #4]
    a23e:	7cd3      	ldrb	r3, [r2, #19]
    a240:	f36f 03c3 	bfc	r3, #3, #1
    a244:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a246:	2300      	movs	r3, #0
}
    a248:	4618      	mov	r0, r3
    a24a:	3710      	adds	r7, #16
    a24c:	46bd      	mov	sp, r7
    a24e:	bd80      	pop	{r7, pc}
    a250:	00008801 	.word	0x00008801
    a254:	000087a9 	.word	0x000087a9
    a258:	00008751 	.word	0x00008751
    a25c:	00008845 	.word	0x00008845
    a260:	00008889 	.word	0x00008889
    a264:	00008975 	.word	0x00008975
    a268:	00008231 	.word	0x00008231

0000a26c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a26c:	b580      	push	{r7, lr}
    a26e:	b086      	sub	sp, #24
    a270:	af00      	add	r7, sp, #0
    a272:	4603      	mov	r3, r0
    a274:	460a      	mov	r2, r1
    a276:	71fb      	strb	r3, [r7, #7]
    a278:	4613      	mov	r3, r2
    a27a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a27c:	79fb      	ldrb	r3, [r7, #7]
    a27e:	f003 030f 	and.w	r3, r3, #15
    a282:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a284:	79fb      	ldrb	r3, [r7, #7]
    a286:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a28a:	2b00      	cmp	r3, #0
    a28c:	bf14      	ite	ne
    a28e:	2301      	movne	r3, #1
    a290:	2300      	moveq	r3, #0
    a292:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a294:	7cba      	ldrb	r2, [r7, #18]
    a296:	7cfb      	ldrb	r3, [r7, #19]
    a298:	4611      	mov	r1, r2
    a29a:	4618      	mov	r0, r3
    a29c:	4b13      	ldr	r3, [pc, #76]	; (a2ec <_usb_d_dev_ep_stall+0x80>)
    a29e:	4798      	blx	r3
    a2a0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a2a2:	7cfb      	ldrb	r3, [r7, #19]
    a2a4:	2b04      	cmp	r3, #4
    a2a6:	d902      	bls.n	a2ae <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a2a8:	f06f 0311 	mvn.w	r3, #17
    a2ac:	e01a      	b.n	a2e4 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a2ae:	79bb      	ldrb	r3, [r7, #6]
    a2b0:	2b01      	cmp	r3, #1
    a2b2:	d106      	bne.n	a2c2 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a2b4:	7cbb      	ldrb	r3, [r7, #18]
    a2b6:	4619      	mov	r1, r3
    a2b8:	68f8      	ldr	r0, [r7, #12]
    a2ba:	4b0d      	ldr	r3, [pc, #52]	; (a2f0 <_usb_d_dev_ep_stall+0x84>)
    a2bc:	4798      	blx	r3
    a2be:	6178      	str	r0, [r7, #20]
    a2c0:	e00f      	b.n	a2e2 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a2c2:	79bb      	ldrb	r3, [r7, #6]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d106      	bne.n	a2d6 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a2c8:	7cbb      	ldrb	r3, [r7, #18]
    a2ca:	4619      	mov	r1, r3
    a2cc:	68f8      	ldr	r0, [r7, #12]
    a2ce:	4b09      	ldr	r3, [pc, #36]	; (a2f4 <_usb_d_dev_ep_stall+0x88>)
    a2d0:	4798      	blx	r3
    a2d2:	6178      	str	r0, [r7, #20]
    a2d4:	e005      	b.n	a2e2 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a2d6:	7cbb      	ldrb	r3, [r7, #18]
    a2d8:	4619      	mov	r1, r3
    a2da:	68f8      	ldr	r0, [r7, #12]
    a2dc:	4b06      	ldr	r3, [pc, #24]	; (a2f8 <_usb_d_dev_ep_stall+0x8c>)
    a2de:	4798      	blx	r3
    a2e0:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a2e2:	697b      	ldr	r3, [r7, #20]
}
    a2e4:	4618      	mov	r0, r3
    a2e6:	3718      	adds	r7, #24
    a2e8:	46bd      	mov	sp, r7
    a2ea:	bd80      	pop	{r7, pc}
    a2ec:	00008d0d 	.word	0x00008d0d
    a2f0:	0000a141 	.word	0x0000a141
    a2f4:	0000a191 	.word	0x0000a191
    a2f8:	0000a111 	.word	0x0000a111

0000a2fc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	b082      	sub	sp, #8
    a300:	af00      	add	r7, sp, #0
    a302:	6078      	str	r0, [r7, #4]
    a304:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a306:	687b      	ldr	r3, [r7, #4]
    a308:	7c9b      	ldrb	r3, [r3, #18]
    a30a:	2bff      	cmp	r3, #255	; 0xff
    a30c:	d014      	beq.n	a338 <_usb_d_dev_trans_done+0x3c>
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	7cdb      	ldrb	r3, [r3, #19]
    a312:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a316:	b2db      	uxtb	r3, r3
    a318:	2b00      	cmp	r3, #0
    a31a:	d00d      	beq.n	a338 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a31c:	687a      	ldr	r2, [r7, #4]
    a31e:	7cd3      	ldrb	r3, [r2, #19]
    a320:	f36f 1386 	bfc	r3, #6, #1
    a324:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a326:	4b06      	ldr	r3, [pc, #24]	; (a340 <_usb_d_dev_trans_done+0x44>)
    a328:	691b      	ldr	r3, [r3, #16]
    a32a:	687a      	ldr	r2, [r7, #4]
    a32c:	7c90      	ldrb	r0, [r2, #18]
    a32e:	687a      	ldr	r2, [r7, #4]
    a330:	6892      	ldr	r2, [r2, #8]
    a332:	6839      	ldr	r1, [r7, #0]
    a334:	4798      	blx	r3
    a336:	e000      	b.n	a33a <_usb_d_dev_trans_done+0x3e>
		return;
    a338:	bf00      	nop
}
    a33a:	3708      	adds	r7, #8
    a33c:	46bd      	mov	sp, r7
    a33e:	bd80      	pop	{r7, pc}
    a340:	20000d90 	.word	0x20000d90

0000a344 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a344:	b580      	push	{r7, lr}
    a346:	b086      	sub	sp, #24
    a348:	af00      	add	r7, sp, #0
    a34a:	60f8      	str	r0, [r7, #12]
    a34c:	460b      	mov	r3, r1
    a34e:	607a      	str	r2, [r7, #4]
    a350:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a352:	68fb      	ldr	r3, [r7, #12]
    a354:	7c9b      	ldrb	r3, [r3, #18]
    a356:	f003 030f 	and.w	r3, r3, #15
    a35a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a35c:	4b1f      	ldr	r3, [pc, #124]	; (a3dc <_usb_d_dev_trans_stop+0x98>)
    a35e:	881b      	ldrh	r3, [r3, #0]
    a360:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a362:	68fb      	ldr	r3, [r7, #12]
    a364:	7c9b      	ldrb	r3, [r3, #18]
    a366:	2bff      	cmp	r3, #255	; 0xff
    a368:	d033      	beq.n	a3d2 <_usb_d_dev_trans_stop+0x8e>
    a36a:	68fb      	ldr	r3, [r7, #12]
    a36c:	7cdb      	ldrb	r3, [r3, #19]
    a36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a372:	b2db      	uxtb	r3, r3
    a374:	2b00      	cmp	r3, #0
    a376:	d02c      	beq.n	a3d2 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a378:	7afb      	ldrb	r3, [r7, #11]
    a37a:	2b00      	cmp	r3, #0
    a37c:	d006      	beq.n	a38c <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a37e:	7dfb      	ldrb	r3, [r7, #23]
    a380:	2200      	movs	r2, #0
    a382:	2101      	movs	r1, #1
    a384:	4618      	mov	r0, r3
    a386:	4b16      	ldr	r3, [pc, #88]	; (a3e0 <_usb_d_dev_trans_stop+0x9c>)
    a388:	4798      	blx	r3
    a38a:	e005      	b.n	a398 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a38c:	7dfb      	ldrb	r3, [r7, #23]
    a38e:	2200      	movs	r2, #0
    a390:	2100      	movs	r1, #0
    a392:	4618      	mov	r0, r3
    a394:	4b13      	ldr	r3, [pc, #76]	; (a3e4 <_usb_d_dev_trans_stop+0xa0>)
    a396:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a398:	7afb      	ldrb	r3, [r7, #11]
    a39a:	f107 0218 	add.w	r2, r7, #24
    a39e:	4413      	add	r3, r2
    a3a0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a3a4:	461a      	mov	r2, r3
    a3a6:	7dfb      	ldrb	r3, [r7, #23]
    a3a8:	4611      	mov	r1, r2
    a3aa:	4618      	mov	r0, r3
    a3ac:	4b0e      	ldr	r3, [pc, #56]	; (a3e8 <_usb_d_dev_trans_stop+0xa4>)
    a3ae:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a3b0:	7afb      	ldrb	r3, [r7, #11]
    a3b2:	f107 0218 	add.w	r2, r7, #24
    a3b6:	4413      	add	r3, r2
    a3b8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a3bc:	461a      	mov	r2, r3
    a3be:	7dfb      	ldrb	r3, [r7, #23]
    a3c0:	4611      	mov	r1, r2
    a3c2:	4618      	mov	r0, r3
    a3c4:	4b09      	ldr	r3, [pc, #36]	; (a3ec <_usb_d_dev_trans_stop+0xa8>)
    a3c6:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a3c8:	6879      	ldr	r1, [r7, #4]
    a3ca:	68f8      	ldr	r0, [r7, #12]
    a3cc:	4b08      	ldr	r3, [pc, #32]	; (a3f0 <_usb_d_dev_trans_stop+0xac>)
    a3ce:	4798      	blx	r3
    a3d0:	e000      	b.n	a3d4 <_usb_d_dev_trans_stop+0x90>
		return;
    a3d2:	bf00      	nop
}
    a3d4:	3718      	adds	r7, #24
    a3d6:	46bd      	mov	sp, r7
    a3d8:	bd80      	pop	{r7, pc}
    a3da:	bf00      	nop
    a3dc:	00011454 	.word	0x00011454
    a3e0:	00008bf9 	.word	0x00008bf9
    a3e4:	00008c51 	.word	0x00008c51
    a3e8:	00008701 	.word	0x00008701
    a3ec:	00008751 	.word	0x00008751
    a3f0:	0000a2fd 	.word	0x0000a2fd

0000a3f4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b086      	sub	sp, #24
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	4603      	mov	r3, r0
    a3fc:	6039      	str	r1, [r7, #0]
    a3fe:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a400:	79fb      	ldrb	r3, [r7, #7]
    a402:	f003 030f 	and.w	r3, r3, #15
    a406:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a408:	7dfb      	ldrb	r3, [r7, #23]
    a40a:	015b      	lsls	r3, r3, #5
    a40c:	4a1e      	ldr	r2, [pc, #120]	; (a488 <_usb_d_dev_ep_read_req+0x94>)
    a40e:	4413      	add	r3, r2
    a410:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a412:	693b      	ldr	r3, [r7, #16]
    a414:	681b      	ldr	r3, [r3, #0]
    a416:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a418:	693b      	ldr	r3, [r7, #16]
    a41a:	685b      	ldr	r3, [r3, #4]
    a41c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a420:	b29b      	uxth	r3, r3
    a422:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a424:	7dfb      	ldrb	r3, [r7, #23]
    a426:	2b04      	cmp	r3, #4
    a428:	d802      	bhi.n	a430 <_usb_d_dev_ep_read_req+0x3c>
    a42a:	683b      	ldr	r3, [r7, #0]
    a42c:	2b00      	cmp	r3, #0
    a42e:	d102      	bne.n	a436 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a430:	f06f 0311 	mvn.w	r3, #17
    a434:	e023      	b.n	a47e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a436:	7dfb      	ldrb	r3, [r7, #23]
    a438:	4618      	mov	r0, r3
    a43a:	4b14      	ldr	r3, [pc, #80]	; (a48c <_usb_d_dev_ep_read_req+0x98>)
    a43c:	4798      	blx	r3
    a43e:	4603      	mov	r3, r0
    a440:	f083 0301 	eor.w	r3, r3, #1
    a444:	b2db      	uxtb	r3, r3
    a446:	2b00      	cmp	r3, #0
    a448:	d002      	beq.n	a450 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a44a:	f06f 0312 	mvn.w	r3, #18
    a44e:	e016      	b.n	a47e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a450:	7dfb      	ldrb	r3, [r7, #23]
    a452:	4618      	mov	r0, r3
    a454:	4b0e      	ldr	r3, [pc, #56]	; (a490 <_usb_d_dev_ep_read_req+0x9c>)
    a456:	4798      	blx	r3
    a458:	4603      	mov	r3, r0
    a45a:	f083 0301 	eor.w	r3, r3, #1
    a45e:	b2db      	uxtb	r3, r3
    a460:	2b00      	cmp	r3, #0
    a462:	d001      	beq.n	a468 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a464:	2300      	movs	r3, #0
    a466:	e00a      	b.n	a47e <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a468:	68fb      	ldr	r3, [r7, #12]
    a46a:	2208      	movs	r2, #8
    a46c:	4619      	mov	r1, r3
    a46e:	6838      	ldr	r0, [r7, #0]
    a470:	4b08      	ldr	r3, [pc, #32]	; (a494 <_usb_d_dev_ep_read_req+0xa0>)
    a472:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a474:	7dfb      	ldrb	r3, [r7, #23]
    a476:	4618      	mov	r0, r3
    a478:	4b07      	ldr	r3, [pc, #28]	; (a498 <_usb_d_dev_ep_read_req+0xa4>)
    a47a:	4798      	blx	r3

	return bytes;
    a47c:	897b      	ldrh	r3, [r7, #10]
}
    a47e:	4618      	mov	r0, r3
    a480:	3718      	adds	r7, #24
    a482:	46bd      	mov	sp, r7
    a484:	bd80      	pop	{r7, pc}
    a486:	bf00      	nop
    a488:	20000e58 	.word	0x20000e58
    a48c:	00008779 	.word	0x00008779
    a490:	00008925 	.word	0x00008925
    a494:	00010ce9 	.word	0x00010ce9
    a498:	00008955 	.word	0x00008955

0000a49c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	b086      	sub	sp, #24
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a4a4:	687b      	ldr	r3, [r7, #4]
    a4a6:	7a1b      	ldrb	r3, [r3, #8]
    a4a8:	f003 030f 	and.w	r3, r3, #15
    a4ac:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a4ae:	687b      	ldr	r3, [r7, #4]
    a4b0:	7a1b      	ldrb	r3, [r3, #8]
    a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	bf14      	ite	ne
    a4ba:	2301      	movne	r3, #1
    a4bc:	2300      	moveq	r3, #0
    a4be:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a4c0:	7d7a      	ldrb	r2, [r7, #21]
    a4c2:	7dbb      	ldrb	r3, [r7, #22]
    a4c4:	4611      	mov	r1, r2
    a4c6:	4618      	mov	r0, r3
    a4c8:	4b5f      	ldr	r3, [pc, #380]	; (a648 <_usb_d_dev_ep_trans+0x1ac>)
    a4ca:	4798      	blx	r3
    a4cc:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a4ce:	693b      	ldr	r3, [r7, #16]
    a4d0:	8a1b      	ldrh	r3, [r3, #16]
    a4d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a4d6:	4293      	cmp	r3, r2
    a4d8:	d004      	beq.n	a4e4 <_usb_d_dev_ep_trans+0x48>
    a4da:	693b      	ldr	r3, [r7, #16]
    a4dc:	8a1b      	ldrh	r3, [r3, #16]
    a4de:	3b01      	subs	r3, #1
    a4e0:	b29b      	uxth	r3, r3
    a4e2:	e001      	b.n	a4e8 <_usb_d_dev_ep_trans+0x4c>
    a4e4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a4e8:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	685a      	ldr	r2, [r3, #4]
    a4ee:	89fb      	ldrh	r3, [r7, #14]
    a4f0:	4013      	ands	r3, r2
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	bf14      	ite	ne
    a4f6:	2301      	movne	r3, #1
    a4f8:	2300      	moveq	r3, #0
    a4fa:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a4fc:	2300      	movs	r3, #0
    a4fe:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a500:	7dbb      	ldrb	r3, [r7, #22]
    a502:	2b04      	cmp	r3, #4
    a504:	d902      	bls.n	a50c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a506:	f06f 0311 	mvn.w	r3, #17
    a50a:	e098      	b.n	a63e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	681b      	ldr	r3, [r3, #0]
    a510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a514:	d31a      	bcc.n	a54c <_usb_d_dev_ep_trans+0xb0>
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	681b      	ldr	r3, [r3, #0]
    a51a:	461a      	mov	r2, r3
    a51c:	687b      	ldr	r3, [r7, #4]
    a51e:	685b      	ldr	r3, [r3, #4]
    a520:	4413      	add	r3, r2
    a522:	4a4a      	ldr	r2, [pc, #296]	; (a64c <_usb_d_dev_ep_trans+0x1b0>)
    a524:	4293      	cmp	r3, r2
    a526:	d811      	bhi.n	a54c <_usb_d_dev_ep_trans+0xb0>
    a528:	687b      	ldr	r3, [r7, #4]
    a52a:	681b      	ldr	r3, [r3, #0]
    a52c:	f003 0303 	and.w	r3, r3, #3
    a530:	2b00      	cmp	r3, #0
    a532:	d10b      	bne.n	a54c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a534:	7d7b      	ldrb	r3, [r7, #21]
    a536:	f083 0301 	eor.w	r3, r3, #1
    a53a:	b2db      	uxtb	r3, r3
    a53c:	2b00      	cmp	r3, #0
    a53e:	d00e      	beq.n	a55e <_usb_d_dev_ep_trans+0xc2>
    a540:	687b      	ldr	r3, [r7, #4]
    a542:	685b      	ldr	r3, [r3, #4]
    a544:	693a      	ldr	r2, [r7, #16]
    a546:	8a12      	ldrh	r2, [r2, #16]
    a548:	4293      	cmp	r3, r2
    a54a:	d208      	bcs.n	a55e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a54c:	693b      	ldr	r3, [r7, #16]
    a54e:	68db      	ldr	r3, [r3, #12]
    a550:	2b00      	cmp	r3, #0
    a552:	d102      	bne.n	a55a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a554:	f06f 0312 	mvn.w	r3, #18
    a558:	e071      	b.n	a63e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a55a:	2301      	movs	r3, #1
    a55c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a55e:	7d7b      	ldrb	r3, [r7, #21]
    a560:	f083 0301 	eor.w	r3, r3, #1
    a564:	b2db      	uxtb	r3, r3
    a566:	2b00      	cmp	r3, #0
    a568:	d009      	beq.n	a57e <_usb_d_dev_ep_trans+0xe2>
    a56a:	7b7b      	ldrb	r3, [r7, #13]
    a56c:	2b00      	cmp	r3, #0
    a56e:	d006      	beq.n	a57e <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a570:	693b      	ldr	r3, [r7, #16]
    a572:	68db      	ldr	r3, [r3, #12]
    a574:	2b00      	cmp	r3, #0
    a576:	d102      	bne.n	a57e <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a578:	f06f 0311 	mvn.w	r3, #17
    a57c:	e05f      	b.n	a63e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a57e:	693b      	ldr	r3, [r7, #16]
    a580:	7cdb      	ldrb	r3, [r3, #19]
    a582:	f003 0308 	and.w	r3, r3, #8
    a586:	b2db      	uxtb	r3, r3
    a588:	2b00      	cmp	r3, #0
    a58a:	d001      	beq.n	a590 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a58c:	2302      	movs	r3, #2
    a58e:	e056      	b.n	a63e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a590:	f107 0308 	add.w	r3, r7, #8
    a594:	4618      	mov	r0, r3
    a596:	4b2e      	ldr	r3, [pc, #184]	; (a650 <_usb_d_dev_ep_trans+0x1b4>)
    a598:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a59a:	693b      	ldr	r3, [r7, #16]
    a59c:	7cdb      	ldrb	r3, [r3, #19]
    a59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5a2:	b2db      	uxtb	r3, r3
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d006      	beq.n	a5b6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a5a8:	f107 0308 	add.w	r3, r7, #8
    a5ac:	4618      	mov	r0, r3
    a5ae:	4b29      	ldr	r3, [pc, #164]	; (a654 <_usb_d_dev_ep_trans+0x1b8>)
    a5b0:	4798      	blx	r3
		return USB_BUSY;
    a5b2:	2301      	movs	r3, #1
    a5b4:	e043      	b.n	a63e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a5b6:	693a      	ldr	r2, [r7, #16]
    a5b8:	7cd3      	ldrb	r3, [r2, #19]
    a5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a5be:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a5c0:	f107 0308 	add.w	r3, r7, #8
    a5c4:	4618      	mov	r0, r3
    a5c6:	4b23      	ldr	r3, [pc, #140]	; (a654 <_usb_d_dev_ep_trans+0x1b8>)
    a5c8:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a5ca:	687b      	ldr	r3, [r7, #4]
    a5cc:	681a      	ldr	r2, [r3, #0]
    a5ce:	693b      	ldr	r3, [r7, #16]
    a5d0:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a5d2:	687b      	ldr	r3, [r7, #4]
    a5d4:	685a      	ldr	r2, [r3, #4]
    a5d6:	693b      	ldr	r3, [r7, #16]
    a5d8:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a5da:	693b      	ldr	r3, [r7, #16]
    a5dc:	2200      	movs	r2, #0
    a5de:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a5e0:	693a      	ldr	r2, [r7, #16]
    a5e2:	7cd3      	ldrb	r3, [r2, #19]
    a5e4:	7d79      	ldrb	r1, [r7, #21]
    a5e6:	f361 13c7 	bfi	r3, r1, #7, #1
    a5ea:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a5ec:	693a      	ldr	r2, [r7, #16]
    a5ee:	7cd3      	ldrb	r3, [r2, #19]
    a5f0:	7df9      	ldrb	r1, [r7, #23]
    a5f2:	f361 1345 	bfi	r3, r1, #5, #1
    a5f6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a5f8:	687b      	ldr	r3, [r7, #4]
    a5fa:	7a5b      	ldrb	r3, [r3, #9]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d007      	beq.n	a610 <_usb_d_dev_ep_trans+0x174>
    a600:	7b7b      	ldrb	r3, [r7, #13]
    a602:	f083 0301 	eor.w	r3, r3, #1
    a606:	b2db      	uxtb	r3, r3
    a608:	2b00      	cmp	r3, #0
    a60a:	d001      	beq.n	a610 <_usb_d_dev_ep_trans+0x174>
    a60c:	2301      	movs	r3, #1
    a60e:	e000      	b.n	a612 <_usb_d_dev_ep_trans+0x176>
    a610:	2300      	movs	r3, #0
    a612:	b2db      	uxtb	r3, r3
    a614:	f003 0301 	and.w	r3, r3, #1
    a618:	b2d9      	uxtb	r1, r3
    a61a:	693a      	ldr	r2, [r7, #16]
    a61c:	7cd3      	ldrb	r3, [r2, #19]
    a61e:	f361 1304 	bfi	r3, r1, #4, #1
    a622:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a624:	7d7b      	ldrb	r3, [r7, #21]
    a626:	2b00      	cmp	r3, #0
    a628:	d004      	beq.n	a634 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a62a:	2100      	movs	r1, #0
    a62c:	6938      	ldr	r0, [r7, #16]
    a62e:	4b0a      	ldr	r3, [pc, #40]	; (a658 <_usb_d_dev_ep_trans+0x1bc>)
    a630:	4798      	blx	r3
    a632:	e003      	b.n	a63c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a634:	2100      	movs	r1, #0
    a636:	6938      	ldr	r0, [r7, #16]
    a638:	4b08      	ldr	r3, [pc, #32]	; (a65c <_usb_d_dev_ep_trans+0x1c0>)
    a63a:	4798      	blx	r3
	}

	return ERR_NONE;
    a63c:	2300      	movs	r3, #0
}
    a63e:	4618      	mov	r0, r3
    a640:	3718      	adds	r7, #24
    a642:	46bd      	mov	sp, r7
    a644:	bd80      	pop	{r7, pc}
    a646:	bf00      	nop
    a648:	00008d0d 	.word	0x00008d0d
    a64c:	20041fff 	.word	0x20041fff
    a650:	0000ae69 	.word	0x0000ae69
    a654:	0000ae8f 	.word	0x0000ae8f
    a658:	00008fd5 	.word	0x00008fd5
    a65c:	000091ed 	.word	0x000091ed

0000a660 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a660:	b580      	push	{r7, lr}
    a662:	b084      	sub	sp, #16
    a664:	af00      	add	r7, sp, #0
    a666:	4603      	mov	r3, r0
    a668:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a66a:	79fb      	ldrb	r3, [r7, #7]
    a66c:	f003 030f 	and.w	r3, r3, #15
    a670:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a672:	79fb      	ldrb	r3, [r7, #7]
    a674:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a678:	2b00      	cmp	r3, #0
    a67a:	bf14      	ite	ne
    a67c:	2301      	movne	r3, #1
    a67e:	2300      	moveq	r3, #0
    a680:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a682:	7bba      	ldrb	r2, [r7, #14]
    a684:	7bfb      	ldrb	r3, [r7, #15]
    a686:	4611      	mov	r1, r2
    a688:	4618      	mov	r0, r3
    a68a:	4b08      	ldr	r3, [pc, #32]	; (a6ac <_usb_d_dev_ep_abort+0x4c>)
    a68c:	4798      	blx	r3
    a68e:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a690:	7bfb      	ldrb	r3, [r7, #15]
    a692:	2b04      	cmp	r3, #4
    a694:	d806      	bhi.n	a6a4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a696:	7bbb      	ldrb	r3, [r7, #14]
    a698:	2202      	movs	r2, #2
    a69a:	4619      	mov	r1, r3
    a69c:	68b8      	ldr	r0, [r7, #8]
    a69e:	4b04      	ldr	r3, [pc, #16]	; (a6b0 <_usb_d_dev_ep_abort+0x50>)
    a6a0:	4798      	blx	r3
    a6a2:	e000      	b.n	a6a6 <_usb_d_dev_ep_abort+0x46>
		return;
    a6a4:	bf00      	nop
}
    a6a6:	3710      	adds	r7, #16
    a6a8:	46bd      	mov	sp, r7
    a6aa:	bd80      	pop	{r7, pc}
    a6ac:	00008d0d 	.word	0x00008d0d
    a6b0:	0000a345 	.word	0x0000a345

0000a6b4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a6b4:	b480      	push	{r7}
    a6b6:	b085      	sub	sp, #20
    a6b8:	af00      	add	r7, sp, #0
    a6ba:	4603      	mov	r3, r0
    a6bc:	6039      	str	r1, [r7, #0]
    a6be:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a6c0:	683b      	ldr	r3, [r7, #0]
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d001      	beq.n	a6ca <_usb_d_dev_register_callback+0x16>
    a6c6:	683b      	ldr	r3, [r7, #0]
    a6c8:	e000      	b.n	a6cc <_usb_d_dev_register_callback+0x18>
    a6ca:	4b0a      	ldr	r3, [pc, #40]	; (a6f4 <_usb_d_dev_register_callback+0x40>)
    a6cc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a6ce:	79fb      	ldrb	r3, [r7, #7]
    a6d0:	2b01      	cmp	r3, #1
    a6d2:	d103      	bne.n	a6dc <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a6d4:	4a08      	ldr	r2, [pc, #32]	; (a6f8 <_usb_d_dev_register_callback+0x44>)
    a6d6:	68fb      	ldr	r3, [r7, #12]
    a6d8:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a6da:	e005      	b.n	a6e8 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a6dc:	79fb      	ldrb	r3, [r7, #7]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d102      	bne.n	a6e8 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a6e2:	4a05      	ldr	r2, [pc, #20]	; (a6f8 <_usb_d_dev_register_callback+0x44>)
    a6e4:	68fb      	ldr	r3, [r7, #12]
    a6e6:	6013      	str	r3, [r2, #0]
}
    a6e8:	bf00      	nop
    a6ea:	3714      	adds	r7, #20
    a6ec:	46bd      	mov	sp, r7
    a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6f2:	4770      	bx	lr
    a6f4:	00008595 	.word	0x00008595
    a6f8:	20000d90 	.word	0x20000d90

0000a6fc <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a6fc:	b480      	push	{r7}
    a6fe:	b085      	sub	sp, #20
    a700:	af00      	add	r7, sp, #0
    a702:	4603      	mov	r3, r0
    a704:	6039      	str	r1, [r7, #0]
    a706:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a708:	683b      	ldr	r3, [r7, #0]
    a70a:	2b00      	cmp	r3, #0
    a70c:	d001      	beq.n	a712 <_usb_d_dev_register_ep_callback+0x16>
    a70e:	683b      	ldr	r3, [r7, #0]
    a710:	e000      	b.n	a714 <_usb_d_dev_register_ep_callback+0x18>
    a712:	4b0e      	ldr	r3, [pc, #56]	; (a74c <_usb_d_dev_register_ep_callback+0x50>)
    a714:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a716:	79fb      	ldrb	r3, [r7, #7]
    a718:	2b00      	cmp	r3, #0
    a71a:	d103      	bne.n	a724 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a71c:	4a0c      	ldr	r2, [pc, #48]	; (a750 <_usb_d_dev_register_ep_callback+0x54>)
    a71e:	68fb      	ldr	r3, [r7, #12]
    a720:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a722:	e00c      	b.n	a73e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a724:	79fb      	ldrb	r3, [r7, #7]
    a726:	2b01      	cmp	r3, #1
    a728:	d103      	bne.n	a732 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a72a:	4a09      	ldr	r2, [pc, #36]	; (a750 <_usb_d_dev_register_ep_callback+0x54>)
    a72c:	68fb      	ldr	r3, [r7, #12]
    a72e:	60d3      	str	r3, [r2, #12]
}
    a730:	e005      	b.n	a73e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a732:	79fb      	ldrb	r3, [r7, #7]
    a734:	2b02      	cmp	r3, #2
    a736:	d102      	bne.n	a73e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a738:	4a05      	ldr	r2, [pc, #20]	; (a750 <_usb_d_dev_register_ep_callback+0x54>)
    a73a:	68fb      	ldr	r3, [r7, #12]
    a73c:	6113      	str	r3, [r2, #16]
}
    a73e:	bf00      	nop
    a740:	3714      	adds	r7, #20
    a742:	46bd      	mov	sp, r7
    a744:	f85d 7b04 	ldr.w	r7, [sp], #4
    a748:	4770      	bx	lr
    a74a:	bf00      	nop
    a74c:	00008595 	.word	0x00008595
    a750:	20000d90 	.word	0x20000d90

0000a754 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a754:	b580      	push	{r7, lr}
    a756:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a758:	4b01      	ldr	r3, [pc, #4]	; (a760 <USB_0_Handler+0xc>)
    a75a:	4798      	blx	r3
}
    a75c:	bf00      	nop
    a75e:	bd80      	pop	{r7, pc}
    a760:	000099c5 	.word	0x000099c5

0000a764 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a764:	b580      	push	{r7, lr}
    a766:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a768:	4b01      	ldr	r3, [pc, #4]	; (a770 <USB_1_Handler+0xc>)
    a76a:	4798      	blx	r3
}
    a76c:	bf00      	nop
    a76e:	bd80      	pop	{r7, pc}
    a770:	000099c5 	.word	0x000099c5

0000a774 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a774:	b580      	push	{r7, lr}
    a776:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a778:	4b01      	ldr	r3, [pc, #4]	; (a780 <USB_2_Handler+0xc>)
    a77a:	4798      	blx	r3
}
    a77c:	bf00      	nop
    a77e:	bd80      	pop	{r7, pc}
    a780:	000099c5 	.word	0x000099c5

0000a784 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a784:	b580      	push	{r7, lr}
    a786:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a788:	4b01      	ldr	r3, [pc, #4]	; (a790 <USB_3_Handler+0xc>)
    a78a:	4798      	blx	r3
}
    a78c:	bf00      	nop
    a78e:	bd80      	pop	{r7, pc}
    a790:	000099c5 	.word	0x000099c5

0000a794 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a794:	b480      	push	{r7}
    a796:	b083      	sub	sp, #12
    a798:	af00      	add	r7, sp, #0
    a79a:	6078      	str	r0, [r7, #4]
    a79c:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a79e:	bf00      	nop
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	689a      	ldr	r2, [r3, #8]
    a7a4:	683b      	ldr	r3, [r7, #0]
    a7a6:	4013      	ands	r3, r2
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d1f9      	bne.n	a7a0 <hri_wdt_wait_for_sync+0xc>
	};
}
    a7ac:	bf00      	nop
    a7ae:	370c      	adds	r7, #12
    a7b0:	46bd      	mov	sp, r7
    a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7b6:	4770      	bx	lr

0000a7b8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a7b8:	b580      	push	{r7, lr}
    a7ba:	b084      	sub	sp, #16
    a7bc:	af00      	add	r7, sp, #0
    a7be:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a7c0:	210e      	movs	r1, #14
    a7c2:	6878      	ldr	r0, [r7, #4]
    a7c4:	4b0a      	ldr	r3, [pc, #40]	; (a7f0 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a7c6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a7c8:	687b      	ldr	r3, [r7, #4]
    a7ca:	781b      	ldrb	r3, [r3, #0]
    a7cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a7ce:	7bfb      	ldrb	r3, [r7, #15]
    a7d0:	085b      	lsrs	r3, r3, #1
    a7d2:	b2db      	uxtb	r3, r3
    a7d4:	f003 0301 	and.w	r3, r3, #1
    a7d8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a7da:	7bfb      	ldrb	r3, [r7, #15]
    a7dc:	2b00      	cmp	r3, #0
    a7de:	bf14      	ite	ne
    a7e0:	2301      	movne	r3, #1
    a7e2:	2300      	moveq	r3, #0
    a7e4:	b2db      	uxtb	r3, r3
}
    a7e6:	4618      	mov	r0, r3
    a7e8:	3710      	adds	r7, #16
    a7ea:	46bd      	mov	sp, r7
    a7ec:	bd80      	pop	{r7, pc}
    a7ee:	bf00      	nop
    a7f0:	0000a795 	.word	0x0000a795

0000a7f4 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a7f4:	b580      	push	{r7, lr}
    a7f6:	b082      	sub	sp, #8
    a7f8:	af00      	add	r7, sp, #0
    a7fa:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a7fc:	687b      	ldr	r3, [r7, #4]
    a7fe:	781b      	ldrb	r3, [r3, #0]
    a800:	b2db      	uxtb	r3, r3
    a802:	f023 0304 	bic.w	r3, r3, #4
    a806:	b2da      	uxtb	r2, r3
    a808:	687b      	ldr	r3, [r7, #4]
    a80a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a80c:	210e      	movs	r1, #14
    a80e:	6878      	ldr	r0, [r7, #4]
    a810:	4b02      	ldr	r3, [pc, #8]	; (a81c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a812:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a814:	bf00      	nop
    a816:	3708      	adds	r7, #8
    a818:	46bd      	mov	sp, r7
    a81a:	bd80      	pop	{r7, pc}
    a81c:	0000a795 	.word	0x0000a795

0000a820 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a820:	b580      	push	{r7, lr}
    a822:	b084      	sub	sp, #16
    a824:	af00      	add	r7, sp, #0
    a826:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a828:	210e      	movs	r1, #14
    a82a:	6878      	ldr	r0, [r7, #4]
    a82c:	4b08      	ldr	r3, [pc, #32]	; (a850 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a82e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a830:	687b      	ldr	r3, [r7, #4]
    a832:	781b      	ldrb	r3, [r3, #0]
    a834:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a836:	7bfb      	ldrb	r3, [r7, #15]
    a838:	09db      	lsrs	r3, r3, #7
    a83a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a83c:	7bfb      	ldrb	r3, [r7, #15]
    a83e:	2b00      	cmp	r3, #0
    a840:	bf14      	ite	ne
    a842:	2301      	movne	r3, #1
    a844:	2300      	moveq	r3, #0
    a846:	b2db      	uxtb	r3, r3
}
    a848:	4618      	mov	r0, r3
    a84a:	3710      	adds	r7, #16
    a84c:	46bd      	mov	sp, r7
    a84e:	bd80      	pop	{r7, pc}
    a850:	0000a795 	.word	0x0000a795

0000a854 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a854:	b480      	push	{r7}
    a856:	b085      	sub	sp, #20
    a858:	af00      	add	r7, sp, #0
    a85a:	6078      	str	r0, [r7, #4]
    a85c:	460b      	mov	r3, r1
    a85e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	785b      	ldrb	r3, [r3, #1]
    a864:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a866:	7bfb      	ldrb	r3, [r7, #15]
    a868:	f023 030f 	bic.w	r3, r3, #15
    a86c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a86e:	78fb      	ldrb	r3, [r7, #3]
    a870:	f003 030f 	and.w	r3, r3, #15
    a874:	b2da      	uxtb	r2, r3
    a876:	7bfb      	ldrb	r3, [r7, #15]
    a878:	4313      	orrs	r3, r2
    a87a:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	7bfa      	ldrb	r2, [r7, #15]
    a880:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a882:	bf00      	nop
    a884:	3714      	adds	r7, #20
    a886:	46bd      	mov	sp, r7
    a888:	f85d 7b04 	ldr.w	r7, [sp], #4
    a88c:	4770      	bx	lr
	...

0000a890 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a890:	b580      	push	{r7, lr}
    a892:	b082      	sub	sp, #8
    a894:	af00      	add	r7, sp, #0
    a896:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a898:	687b      	ldr	r3, [r7, #4]
    a89a:	2b00      	cmp	r3, #0
    a89c:	d005      	beq.n	a8aa <_wdt_init+0x1a>
    a89e:	687b      	ldr	r3, [r7, #4]
    a8a0:	681b      	ldr	r3, [r3, #0]
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d001      	beq.n	a8aa <_wdt_init+0x1a>
    a8a6:	2301      	movs	r3, #1
    a8a8:	e000      	b.n	a8ac <_wdt_init+0x1c>
    a8aa:	2300      	movs	r3, #0
    a8ac:	f003 0301 	and.w	r3, r3, #1
    a8b0:	b2db      	uxtb	r3, r3
    a8b2:	2250      	movs	r2, #80	; 0x50
    a8b4:	4913      	ldr	r1, [pc, #76]	; (a904 <_wdt_init+0x74>)
    a8b6:	4618      	mov	r0, r3
    a8b8:	4b13      	ldr	r3, [pc, #76]	; (a908 <_wdt_init+0x78>)
    a8ba:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a8bc:	687b      	ldr	r3, [r7, #4]
    a8be:	681b      	ldr	r3, [r3, #0]
    a8c0:	4618      	mov	r0, r3
    a8c2:	4b12      	ldr	r3, [pc, #72]	; (a90c <_wdt_init+0x7c>)
    a8c4:	4798      	blx	r3
    a8c6:	4603      	mov	r3, r0
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d107      	bne.n	a8dc <_wdt_init+0x4c>
    a8cc:	687b      	ldr	r3, [r7, #4]
    a8ce:	681b      	ldr	r3, [r3, #0]
    a8d0:	4618      	mov	r0, r3
    a8d2:	4b0f      	ldr	r3, [pc, #60]	; (a910 <_wdt_init+0x80>)
    a8d4:	4798      	blx	r3
    a8d6:	4603      	mov	r3, r0
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d002      	beq.n	a8e2 <_wdt_init+0x52>
		return ERR_DENIED;
    a8dc:	f06f 0310 	mvn.w	r3, #16
    a8e0:	e00b      	b.n	a8fa <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	4618      	mov	r0, r3
    a8e8:	4b0a      	ldr	r3, [pc, #40]	; (a914 <_wdt_init+0x84>)
    a8ea:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a8ec:	687b      	ldr	r3, [r7, #4]
    a8ee:	681b      	ldr	r3, [r3, #0]
    a8f0:	210b      	movs	r1, #11
    a8f2:	4618      	mov	r0, r3
    a8f4:	4b08      	ldr	r3, [pc, #32]	; (a918 <_wdt_init+0x88>)
    a8f6:	4798      	blx	r3
	}

	return ERR_NONE;
    a8f8:	2300      	movs	r3, #0
}
    a8fa:	4618      	mov	r0, r3
    a8fc:	3708      	adds	r7, #8
    a8fe:	46bd      	mov	sp, r7
    a900:	bd80      	pop	{r7, pc}
    a902:	bf00      	nop
    a904:	00011458 	.word	0x00011458
    a908:	0000337d 	.word	0x0000337d
    a90c:	0000a821 	.word	0x0000a821
    a910:	0000a7b9 	.word	0x0000a7b9
    a914:	0000a7f5 	.word	0x0000a7f5
    a918:	0000a855 	.word	0x0000a855

0000a91c <hri_port_set_DIR_reg>:
{
    a91c:	b480      	push	{r7}
    a91e:	b085      	sub	sp, #20
    a920:	af00      	add	r7, sp, #0
    a922:	60f8      	str	r0, [r7, #12]
    a924:	460b      	mov	r3, r1
    a926:	607a      	str	r2, [r7, #4]
    a928:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a92a:	7afb      	ldrb	r3, [r7, #11]
    a92c:	68fa      	ldr	r2, [r7, #12]
    a92e:	01db      	lsls	r3, r3, #7
    a930:	4413      	add	r3, r2
    a932:	3308      	adds	r3, #8
    a934:	687a      	ldr	r2, [r7, #4]
    a936:	601a      	str	r2, [r3, #0]
}
    a938:	bf00      	nop
    a93a:	3714      	adds	r7, #20
    a93c:	46bd      	mov	sp, r7
    a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a942:	4770      	bx	lr

0000a944 <hri_port_clear_DIR_reg>:
{
    a944:	b480      	push	{r7}
    a946:	b085      	sub	sp, #20
    a948:	af00      	add	r7, sp, #0
    a94a:	60f8      	str	r0, [r7, #12]
    a94c:	460b      	mov	r3, r1
    a94e:	607a      	str	r2, [r7, #4]
    a950:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a952:	7afb      	ldrb	r3, [r7, #11]
    a954:	68fa      	ldr	r2, [r7, #12]
    a956:	01db      	lsls	r3, r3, #7
    a958:	4413      	add	r3, r2
    a95a:	3304      	adds	r3, #4
    a95c:	687a      	ldr	r2, [r7, #4]
    a95e:	601a      	str	r2, [r3, #0]
}
    a960:	bf00      	nop
    a962:	3714      	adds	r7, #20
    a964:	46bd      	mov	sp, r7
    a966:	f85d 7b04 	ldr.w	r7, [sp], #4
    a96a:	4770      	bx	lr

0000a96c <hri_port_set_OUT_reg>:
{
    a96c:	b480      	push	{r7}
    a96e:	b085      	sub	sp, #20
    a970:	af00      	add	r7, sp, #0
    a972:	60f8      	str	r0, [r7, #12]
    a974:	460b      	mov	r3, r1
    a976:	607a      	str	r2, [r7, #4]
    a978:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a97a:	7afb      	ldrb	r3, [r7, #11]
    a97c:	68fa      	ldr	r2, [r7, #12]
    a97e:	01db      	lsls	r3, r3, #7
    a980:	4413      	add	r3, r2
    a982:	3318      	adds	r3, #24
    a984:	687a      	ldr	r2, [r7, #4]
    a986:	601a      	str	r2, [r3, #0]
}
    a988:	bf00      	nop
    a98a:	3714      	adds	r7, #20
    a98c:	46bd      	mov	sp, r7
    a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a992:	4770      	bx	lr

0000a994 <hri_port_clear_OUT_reg>:
{
    a994:	b480      	push	{r7}
    a996:	b085      	sub	sp, #20
    a998:	af00      	add	r7, sp, #0
    a99a:	60f8      	str	r0, [r7, #12]
    a99c:	460b      	mov	r3, r1
    a99e:	607a      	str	r2, [r7, #4]
    a9a0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a9a2:	7afb      	ldrb	r3, [r7, #11]
    a9a4:	68fa      	ldr	r2, [r7, #12]
    a9a6:	01db      	lsls	r3, r3, #7
    a9a8:	4413      	add	r3, r2
    a9aa:	3314      	adds	r3, #20
    a9ac:	687a      	ldr	r2, [r7, #4]
    a9ae:	601a      	str	r2, [r3, #0]
}
    a9b0:	bf00      	nop
    a9b2:	3714      	adds	r7, #20
    a9b4:	46bd      	mov	sp, r7
    a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ba:	4770      	bx	lr

0000a9bc <hri_port_write_PMUX_PMUXE_bf>:
{
    a9bc:	b480      	push	{r7}
    a9be:	b085      	sub	sp, #20
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
    a9c4:	4608      	mov	r0, r1
    a9c6:	4611      	mov	r1, r2
    a9c8:	461a      	mov	r2, r3
    a9ca:	4603      	mov	r3, r0
    a9cc:	70fb      	strb	r3, [r7, #3]
    a9ce:	460b      	mov	r3, r1
    a9d0:	70bb      	strb	r3, [r7, #2]
    a9d2:	4613      	mov	r3, r2
    a9d4:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a9d6:	78fa      	ldrb	r2, [r7, #3]
    a9d8:	78bb      	ldrb	r3, [r7, #2]
    a9da:	6879      	ldr	r1, [r7, #4]
    a9dc:	01d2      	lsls	r2, r2, #7
    a9de:	440a      	add	r2, r1
    a9e0:	4413      	add	r3, r2
    a9e2:	3330      	adds	r3, #48	; 0x30
    a9e4:	781b      	ldrb	r3, [r3, #0]
    a9e6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a9e8:	7bfb      	ldrb	r3, [r7, #15]
    a9ea:	f023 030f 	bic.w	r3, r3, #15
    a9ee:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a9f0:	787b      	ldrb	r3, [r7, #1]
    a9f2:	f003 030f 	and.w	r3, r3, #15
    a9f6:	b2da      	uxtb	r2, r3
    a9f8:	7bfb      	ldrb	r3, [r7, #15]
    a9fa:	4313      	orrs	r3, r2
    a9fc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a9fe:	78fa      	ldrb	r2, [r7, #3]
    aa00:	78bb      	ldrb	r3, [r7, #2]
    aa02:	6879      	ldr	r1, [r7, #4]
    aa04:	01d2      	lsls	r2, r2, #7
    aa06:	440a      	add	r2, r1
    aa08:	4413      	add	r3, r2
    aa0a:	3330      	adds	r3, #48	; 0x30
    aa0c:	7bfa      	ldrb	r2, [r7, #15]
    aa0e:	701a      	strb	r2, [r3, #0]
}
    aa10:	bf00      	nop
    aa12:	3714      	adds	r7, #20
    aa14:	46bd      	mov	sp, r7
    aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa1a:	4770      	bx	lr

0000aa1c <hri_port_write_PMUX_PMUXO_bf>:
{
    aa1c:	b480      	push	{r7}
    aa1e:	b085      	sub	sp, #20
    aa20:	af00      	add	r7, sp, #0
    aa22:	6078      	str	r0, [r7, #4]
    aa24:	4608      	mov	r0, r1
    aa26:	4611      	mov	r1, r2
    aa28:	461a      	mov	r2, r3
    aa2a:	4603      	mov	r3, r0
    aa2c:	70fb      	strb	r3, [r7, #3]
    aa2e:	460b      	mov	r3, r1
    aa30:	70bb      	strb	r3, [r7, #2]
    aa32:	4613      	mov	r3, r2
    aa34:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    aa36:	78fa      	ldrb	r2, [r7, #3]
    aa38:	78bb      	ldrb	r3, [r7, #2]
    aa3a:	6879      	ldr	r1, [r7, #4]
    aa3c:	01d2      	lsls	r2, r2, #7
    aa3e:	440a      	add	r2, r1
    aa40:	4413      	add	r3, r2
    aa42:	3330      	adds	r3, #48	; 0x30
    aa44:	781b      	ldrb	r3, [r3, #0]
    aa46:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    aa48:	7bfb      	ldrb	r3, [r7, #15]
    aa4a:	f003 030f 	and.w	r3, r3, #15
    aa4e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    aa50:	787b      	ldrb	r3, [r7, #1]
    aa52:	011b      	lsls	r3, r3, #4
    aa54:	b2da      	uxtb	r2, r3
    aa56:	7bfb      	ldrb	r3, [r7, #15]
    aa58:	4313      	orrs	r3, r2
    aa5a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    aa5c:	78fa      	ldrb	r2, [r7, #3]
    aa5e:	78bb      	ldrb	r3, [r7, #2]
    aa60:	6879      	ldr	r1, [r7, #4]
    aa62:	01d2      	lsls	r2, r2, #7
    aa64:	440a      	add	r2, r1
    aa66:	4413      	add	r3, r2
    aa68:	3330      	adds	r3, #48	; 0x30
    aa6a:	7bfa      	ldrb	r2, [r7, #15]
    aa6c:	701a      	strb	r2, [r3, #0]
}
    aa6e:	bf00      	nop
    aa70:	3714      	adds	r7, #20
    aa72:	46bd      	mov	sp, r7
    aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa78:	4770      	bx	lr

0000aa7a <hri_port_write_PINCFG_PMUXEN_bit>:
{
    aa7a:	b480      	push	{r7}
    aa7c:	b085      	sub	sp, #20
    aa7e:	af00      	add	r7, sp, #0
    aa80:	6078      	str	r0, [r7, #4]
    aa82:	4608      	mov	r0, r1
    aa84:	4611      	mov	r1, r2
    aa86:	461a      	mov	r2, r3
    aa88:	4603      	mov	r3, r0
    aa8a:	70fb      	strb	r3, [r7, #3]
    aa8c:	460b      	mov	r3, r1
    aa8e:	70bb      	strb	r3, [r7, #2]
    aa90:	4613      	mov	r3, r2
    aa92:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    aa94:	78fa      	ldrb	r2, [r7, #3]
    aa96:	78bb      	ldrb	r3, [r7, #2]
    aa98:	6879      	ldr	r1, [r7, #4]
    aa9a:	01d2      	lsls	r2, r2, #7
    aa9c:	440a      	add	r2, r1
    aa9e:	4413      	add	r3, r2
    aaa0:	3340      	adds	r3, #64	; 0x40
    aaa2:	781b      	ldrb	r3, [r3, #0]
    aaa4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    aaa6:	7bfb      	ldrb	r3, [r7, #15]
    aaa8:	f023 0301 	bic.w	r3, r3, #1
    aaac:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    aaae:	787a      	ldrb	r2, [r7, #1]
    aab0:	7bfb      	ldrb	r3, [r7, #15]
    aab2:	4313      	orrs	r3, r2
    aab4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    aab6:	78fa      	ldrb	r2, [r7, #3]
    aab8:	78bb      	ldrb	r3, [r7, #2]
    aaba:	6879      	ldr	r1, [r7, #4]
    aabc:	01d2      	lsls	r2, r2, #7
    aabe:	440a      	add	r2, r1
    aac0:	4413      	add	r3, r2
    aac2:	3340      	adds	r3, #64	; 0x40
    aac4:	7bfa      	ldrb	r2, [r7, #15]
    aac6:	701a      	strb	r2, [r3, #0]
}
    aac8:	bf00      	nop
    aaca:	3714      	adds	r7, #20
    aacc:	46bd      	mov	sp, r7
    aace:	f85d 7b04 	ldr.w	r7, [sp], #4
    aad2:	4770      	bx	lr

0000aad4 <hri_port_write_WRCONFIG_reg>:
{
    aad4:	b480      	push	{r7}
    aad6:	b085      	sub	sp, #20
    aad8:	af00      	add	r7, sp, #0
    aada:	60f8      	str	r0, [r7, #12]
    aadc:	460b      	mov	r3, r1
    aade:	607a      	str	r2, [r7, #4]
    aae0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    aae2:	7afb      	ldrb	r3, [r7, #11]
    aae4:	68fa      	ldr	r2, [r7, #12]
    aae6:	01db      	lsls	r3, r3, #7
    aae8:	4413      	add	r3, r2
    aaea:	3328      	adds	r3, #40	; 0x28
    aaec:	687a      	ldr	r2, [r7, #4]
    aaee:	601a      	str	r2, [r3, #0]
}
    aaf0:	bf00      	nop
    aaf2:	3714      	adds	r7, #20
    aaf4:	46bd      	mov	sp, r7
    aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aafa:	4770      	bx	lr

0000aafc <_gpio_set_direction>:
{
    aafc:	b580      	push	{r7, lr}
    aafe:	b082      	sub	sp, #8
    ab00:	af00      	add	r7, sp, #0
    ab02:	4603      	mov	r3, r0
    ab04:	6039      	str	r1, [r7, #0]
    ab06:	71fb      	strb	r3, [r7, #7]
    ab08:	4613      	mov	r3, r2
    ab0a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ab0c:	79bb      	ldrb	r3, [r7, #6]
    ab0e:	2b01      	cmp	r3, #1
    ab10:	d01c      	beq.n	ab4c <_gpio_set_direction+0x50>
    ab12:	2b02      	cmp	r3, #2
    ab14:	d037      	beq.n	ab86 <_gpio_set_direction+0x8a>
    ab16:	2b00      	cmp	r3, #0
    ab18:	d14e      	bne.n	abb8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ab1a:	79fb      	ldrb	r3, [r7, #7]
    ab1c:	683a      	ldr	r2, [r7, #0]
    ab1e:	4619      	mov	r1, r3
    ab20:	482a      	ldr	r0, [pc, #168]	; (abcc <_gpio_set_direction+0xd0>)
    ab22:	4b2b      	ldr	r3, [pc, #172]	; (abd0 <_gpio_set_direction+0xd4>)
    ab24:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ab26:	683b      	ldr	r3, [r7, #0]
    ab28:	b29b      	uxth	r3, r3
    ab2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ab2e:	79fb      	ldrb	r3, [r7, #7]
    ab30:	4619      	mov	r1, r3
    ab32:	4826      	ldr	r0, [pc, #152]	; (abcc <_gpio_set_direction+0xd0>)
    ab34:	4b27      	ldr	r3, [pc, #156]	; (abd4 <_gpio_set_direction+0xd8>)
    ab36:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ab38:	683b      	ldr	r3, [r7, #0]
    ab3a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ab3c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ab40:	79fb      	ldrb	r3, [r7, #7]
    ab42:	4619      	mov	r1, r3
    ab44:	4821      	ldr	r0, [pc, #132]	; (abcc <_gpio_set_direction+0xd0>)
    ab46:	4b23      	ldr	r3, [pc, #140]	; (abd4 <_gpio_set_direction+0xd8>)
    ab48:	4798      	blx	r3
		break;
    ab4a:	e03a      	b.n	abc2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ab4c:	79fb      	ldrb	r3, [r7, #7]
    ab4e:	683a      	ldr	r2, [r7, #0]
    ab50:	4619      	mov	r1, r3
    ab52:	481e      	ldr	r0, [pc, #120]	; (abcc <_gpio_set_direction+0xd0>)
    ab54:	4b1e      	ldr	r3, [pc, #120]	; (abd0 <_gpio_set_direction+0xd4>)
    ab56:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ab58:	683b      	ldr	r3, [r7, #0]
    ab5a:	b29b      	uxth	r3, r3
    ab5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ab60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ab64:	79f9      	ldrb	r1, [r7, #7]
    ab66:	461a      	mov	r2, r3
    ab68:	4818      	ldr	r0, [pc, #96]	; (abcc <_gpio_set_direction+0xd0>)
    ab6a:	4b1a      	ldr	r3, [pc, #104]	; (abd4 <_gpio_set_direction+0xd8>)
    ab6c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ab6e:	683b      	ldr	r3, [r7, #0]
    ab70:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ab72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ab76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ab7a:	79f9      	ldrb	r1, [r7, #7]
    ab7c:	461a      	mov	r2, r3
    ab7e:	4813      	ldr	r0, [pc, #76]	; (abcc <_gpio_set_direction+0xd0>)
    ab80:	4b14      	ldr	r3, [pc, #80]	; (abd4 <_gpio_set_direction+0xd8>)
    ab82:	4798      	blx	r3
		break;
    ab84:	e01d      	b.n	abc2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ab86:	79fb      	ldrb	r3, [r7, #7]
    ab88:	683a      	ldr	r2, [r7, #0]
    ab8a:	4619      	mov	r1, r3
    ab8c:	480f      	ldr	r0, [pc, #60]	; (abcc <_gpio_set_direction+0xd0>)
    ab8e:	4b12      	ldr	r3, [pc, #72]	; (abd8 <_gpio_set_direction+0xdc>)
    ab90:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ab92:	683b      	ldr	r3, [r7, #0]
    ab94:	b29b      	uxth	r3, r3
    ab96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ab9a:	79fb      	ldrb	r3, [r7, #7]
    ab9c:	4619      	mov	r1, r3
    ab9e:	480b      	ldr	r0, [pc, #44]	; (abcc <_gpio_set_direction+0xd0>)
    aba0:	4b0c      	ldr	r3, [pc, #48]	; (abd4 <_gpio_set_direction+0xd8>)
    aba2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    aba4:	683b      	ldr	r3, [r7, #0]
    aba6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    aba8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    abac:	79fb      	ldrb	r3, [r7, #7]
    abae:	4619      	mov	r1, r3
    abb0:	4806      	ldr	r0, [pc, #24]	; (abcc <_gpio_set_direction+0xd0>)
    abb2:	4b08      	ldr	r3, [pc, #32]	; (abd4 <_gpio_set_direction+0xd8>)
    abb4:	4798      	blx	r3
		break;
    abb6:	e004      	b.n	abc2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    abb8:	2246      	movs	r2, #70	; 0x46
    abba:	4908      	ldr	r1, [pc, #32]	; (abdc <_gpio_set_direction+0xe0>)
    abbc:	2000      	movs	r0, #0
    abbe:	4b08      	ldr	r3, [pc, #32]	; (abe0 <_gpio_set_direction+0xe4>)
    abc0:	4798      	blx	r3
}
    abc2:	bf00      	nop
    abc4:	3708      	adds	r7, #8
    abc6:	46bd      	mov	sp, r7
    abc8:	bd80      	pop	{r7, pc}
    abca:	bf00      	nop
    abcc:	41008000 	.word	0x41008000
    abd0:	0000a945 	.word	0x0000a945
    abd4:	0000aad5 	.word	0x0000aad5
    abd8:	0000a91d 	.word	0x0000a91d
    abdc:	00011470 	.word	0x00011470
    abe0:	0000337d 	.word	0x0000337d

0000abe4 <_gpio_set_level>:
{
    abe4:	b580      	push	{r7, lr}
    abe6:	b082      	sub	sp, #8
    abe8:	af00      	add	r7, sp, #0
    abea:	4603      	mov	r3, r0
    abec:	6039      	str	r1, [r7, #0]
    abee:	71fb      	strb	r3, [r7, #7]
    abf0:	4613      	mov	r3, r2
    abf2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    abf4:	79bb      	ldrb	r3, [r7, #6]
    abf6:	2b00      	cmp	r3, #0
    abf8:	d006      	beq.n	ac08 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    abfa:	79fb      	ldrb	r3, [r7, #7]
    abfc:	683a      	ldr	r2, [r7, #0]
    abfe:	4619      	mov	r1, r3
    ac00:	4806      	ldr	r0, [pc, #24]	; (ac1c <_gpio_set_level+0x38>)
    ac02:	4b07      	ldr	r3, [pc, #28]	; (ac20 <_gpio_set_level+0x3c>)
    ac04:	4798      	blx	r3
}
    ac06:	e005      	b.n	ac14 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ac08:	79fb      	ldrb	r3, [r7, #7]
    ac0a:	683a      	ldr	r2, [r7, #0]
    ac0c:	4619      	mov	r1, r3
    ac0e:	4803      	ldr	r0, [pc, #12]	; (ac1c <_gpio_set_level+0x38>)
    ac10:	4b04      	ldr	r3, [pc, #16]	; (ac24 <_gpio_set_level+0x40>)
    ac12:	4798      	blx	r3
}
    ac14:	bf00      	nop
    ac16:	3708      	adds	r7, #8
    ac18:	46bd      	mov	sp, r7
    ac1a:	bd80      	pop	{r7, pc}
    ac1c:	41008000 	.word	0x41008000
    ac20:	0000a96d 	.word	0x0000a96d
    ac24:	0000a995 	.word	0x0000a995

0000ac28 <_gpio_set_pin_function>:
{
    ac28:	b590      	push	{r4, r7, lr}
    ac2a:	b085      	sub	sp, #20
    ac2c:	af00      	add	r7, sp, #0
    ac2e:	6078      	str	r0, [r7, #4]
    ac30:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ac32:	687b      	ldr	r3, [r7, #4]
    ac34:	095b      	lsrs	r3, r3, #5
    ac36:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ac38:	687b      	ldr	r3, [r7, #4]
    ac3a:	b2db      	uxtb	r3, r3
    ac3c:	f003 031f 	and.w	r3, r3, #31
    ac40:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ac42:	683b      	ldr	r3, [r7, #0]
    ac44:	f1b3 3fff 	cmp.w	r3, #4294967295
    ac48:	d106      	bne.n	ac58 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ac4a:	7bba      	ldrb	r2, [r7, #14]
    ac4c:	7bf9      	ldrb	r1, [r7, #15]
    ac4e:	2300      	movs	r3, #0
    ac50:	4812      	ldr	r0, [pc, #72]	; (ac9c <_gpio_set_pin_function+0x74>)
    ac52:	4c13      	ldr	r4, [pc, #76]	; (aca0 <_gpio_set_pin_function+0x78>)
    ac54:	47a0      	blx	r4
}
    ac56:	e01d      	b.n	ac94 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ac58:	7bba      	ldrb	r2, [r7, #14]
    ac5a:	7bf9      	ldrb	r1, [r7, #15]
    ac5c:	2301      	movs	r3, #1
    ac5e:	480f      	ldr	r0, [pc, #60]	; (ac9c <_gpio_set_pin_function+0x74>)
    ac60:	4c0f      	ldr	r4, [pc, #60]	; (aca0 <_gpio_set_pin_function+0x78>)
    ac62:	47a0      	blx	r4
		if (pin & 1) {
    ac64:	7bbb      	ldrb	r3, [r7, #14]
    ac66:	f003 0301 	and.w	r3, r3, #1
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d009      	beq.n	ac82 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ac6e:	7bbb      	ldrb	r3, [r7, #14]
    ac70:	085b      	lsrs	r3, r3, #1
    ac72:	b2da      	uxtb	r2, r3
    ac74:	683b      	ldr	r3, [r7, #0]
    ac76:	b2db      	uxtb	r3, r3
    ac78:	7bf9      	ldrb	r1, [r7, #15]
    ac7a:	4808      	ldr	r0, [pc, #32]	; (ac9c <_gpio_set_pin_function+0x74>)
    ac7c:	4c09      	ldr	r4, [pc, #36]	; (aca4 <_gpio_set_pin_function+0x7c>)
    ac7e:	47a0      	blx	r4
}
    ac80:	e008      	b.n	ac94 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ac82:	7bbb      	ldrb	r3, [r7, #14]
    ac84:	085b      	lsrs	r3, r3, #1
    ac86:	b2da      	uxtb	r2, r3
    ac88:	683b      	ldr	r3, [r7, #0]
    ac8a:	b2db      	uxtb	r3, r3
    ac8c:	7bf9      	ldrb	r1, [r7, #15]
    ac8e:	4803      	ldr	r0, [pc, #12]	; (ac9c <_gpio_set_pin_function+0x74>)
    ac90:	4c05      	ldr	r4, [pc, #20]	; (aca8 <_gpio_set_pin_function+0x80>)
    ac92:	47a0      	blx	r4
}
    ac94:	bf00      	nop
    ac96:	3714      	adds	r7, #20
    ac98:	46bd      	mov	sp, r7
    ac9a:	bd90      	pop	{r4, r7, pc}
    ac9c:	41008000 	.word	0x41008000
    aca0:	0000aa7b 	.word	0x0000aa7b
    aca4:	0000aa1d 	.word	0x0000aa1d
    aca8:	0000a9bd 	.word	0x0000a9bd

0000acac <gpio_set_pin_function>:
{
    acac:	b580      	push	{r7, lr}
    acae:	b082      	sub	sp, #8
    acb0:	af00      	add	r7, sp, #0
    acb2:	6078      	str	r0, [r7, #4]
    acb4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    acb6:	6839      	ldr	r1, [r7, #0]
    acb8:	6878      	ldr	r0, [r7, #4]
    acba:	4b03      	ldr	r3, [pc, #12]	; (acc8 <gpio_set_pin_function+0x1c>)
    acbc:	4798      	blx	r3
}
    acbe:	bf00      	nop
    acc0:	3708      	adds	r7, #8
    acc2:	46bd      	mov	sp, r7
    acc4:	bd80      	pop	{r7, pc}
    acc6:	bf00      	nop
    acc8:	0000ac29 	.word	0x0000ac29

0000accc <gpio_set_pin_direction>:
{
    accc:	b580      	push	{r7, lr}
    acce:	b082      	sub	sp, #8
    acd0:	af00      	add	r7, sp, #0
    acd2:	4603      	mov	r3, r0
    acd4:	460a      	mov	r2, r1
    acd6:	71fb      	strb	r3, [r7, #7]
    acd8:	4613      	mov	r3, r2
    acda:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    acdc:	79fb      	ldrb	r3, [r7, #7]
    acde:	095b      	lsrs	r3, r3, #5
    ace0:	b2d8      	uxtb	r0, r3
    ace2:	79fb      	ldrb	r3, [r7, #7]
    ace4:	f003 031f 	and.w	r3, r3, #31
    ace8:	2201      	movs	r2, #1
    acea:	fa02 f303 	lsl.w	r3, r2, r3
    acee:	79ba      	ldrb	r2, [r7, #6]
    acf0:	4619      	mov	r1, r3
    acf2:	4b03      	ldr	r3, [pc, #12]	; (ad00 <gpio_set_pin_direction+0x34>)
    acf4:	4798      	blx	r3
}
    acf6:	bf00      	nop
    acf8:	3708      	adds	r7, #8
    acfa:	46bd      	mov	sp, r7
    acfc:	bd80      	pop	{r7, pc}
    acfe:	bf00      	nop
    ad00:	0000aafd 	.word	0x0000aafd

0000ad04 <gpio_set_pin_level>:
{
    ad04:	b580      	push	{r7, lr}
    ad06:	b082      	sub	sp, #8
    ad08:	af00      	add	r7, sp, #0
    ad0a:	4603      	mov	r3, r0
    ad0c:	460a      	mov	r2, r1
    ad0e:	71fb      	strb	r3, [r7, #7]
    ad10:	4613      	mov	r3, r2
    ad12:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    ad14:	79fb      	ldrb	r3, [r7, #7]
    ad16:	095b      	lsrs	r3, r3, #5
    ad18:	b2d8      	uxtb	r0, r3
    ad1a:	79fb      	ldrb	r3, [r7, #7]
    ad1c:	f003 031f 	and.w	r3, r3, #31
    ad20:	2201      	movs	r2, #1
    ad22:	fa02 f303 	lsl.w	r3, r2, r3
    ad26:	79ba      	ldrb	r2, [r7, #6]
    ad28:	4619      	mov	r1, r3
    ad2a:	4b03      	ldr	r3, [pc, #12]	; (ad38 <gpio_set_pin_level+0x34>)
    ad2c:	4798      	blx	r3
}
    ad2e:	bf00      	nop
    ad30:	3708      	adds	r7, #8
    ad32:	46bd      	mov	sp, r7
    ad34:	bd80      	pop	{r7, pc}
    ad36:	bf00      	nop
    ad38:	0000abe5 	.word	0x0000abe5

0000ad3c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ad3c:	b580      	push	{r7, lr}
    ad3e:	b082      	sub	sp, #8
    ad40:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ad42:	2100      	movs	r1, #0
    ad44:	2008      	movs	r0, #8
    ad46:	4b24      	ldr	r3, [pc, #144]	; (add8 <QSPI_N25Q256_exit_xip+0x9c>)
    ad48:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    ad4a:	2100      	movs	r1, #0
    ad4c:	202b      	movs	r0, #43	; 0x2b
    ad4e:	4b22      	ldr	r3, [pc, #136]	; (add8 <QSPI_N25Q256_exit_xip+0x9c>)
    ad50:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ad52:	2100      	movs	r1, #0
    ad54:	202a      	movs	r0, #42	; 0x2a
    ad56:	4b20      	ldr	r3, [pc, #128]	; (add8 <QSPI_N25Q256_exit_xip+0x9c>)
    ad58:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ad5a:	2102      	movs	r1, #2
    ad5c:	2008      	movs	r0, #8
    ad5e:	4b1f      	ldr	r3, [pc, #124]	; (addc <QSPI_N25Q256_exit_xip+0xa0>)
    ad60:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ad62:	2102      	movs	r1, #2
    ad64:	202b      	movs	r0, #43	; 0x2b
    ad66:	4b1d      	ldr	r3, [pc, #116]	; (addc <QSPI_N25Q256_exit_xip+0xa0>)
    ad68:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ad6a:	2102      	movs	r1, #2
    ad6c:	202a      	movs	r0, #42	; 0x2a
    ad6e:	4b1b      	ldr	r3, [pc, #108]	; (addc <QSPI_N25Q256_exit_xip+0xa0>)
    ad70:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ad72:	2101      	movs	r1, #1
    ad74:	2008      	movs	r0, #8
    ad76:	4b1a      	ldr	r3, [pc, #104]	; (ade0 <QSPI_N25Q256_exit_xip+0xa4>)
    ad78:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    ad7a:	2100      	movs	r1, #0
    ad7c:	202b      	movs	r0, #43	; 0x2b
    ad7e:	4b18      	ldr	r3, [pc, #96]	; (ade0 <QSPI_N25Q256_exit_xip+0xa4>)
    ad80:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    ad82:	2100      	movs	r1, #0
    ad84:	202a      	movs	r0, #42	; 0x2a
    ad86:	4b16      	ldr	r3, [pc, #88]	; (ade0 <QSPI_N25Q256_exit_xip+0xa4>)
    ad88:	4798      	blx	r3

	delay_us(1);
    ad8a:	2001      	movs	r0, #1
    ad8c:	4b15      	ldr	r3, [pc, #84]	; (ade4 <QSPI_N25Q256_exit_xip+0xa8>)
    ad8e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    ad90:	2300      	movs	r3, #0
    ad92:	607b      	str	r3, [r7, #4]
    ad94:	e010      	b.n	adb8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    ad96:	2101      	movs	r1, #1
    ad98:	202a      	movs	r0, #42	; 0x2a
    ad9a:	4b11      	ldr	r3, [pc, #68]	; (ade0 <QSPI_N25Q256_exit_xip+0xa4>)
    ad9c:	4798      	blx	r3
		delay_us(1);
    ad9e:	2001      	movs	r0, #1
    ada0:	4b10      	ldr	r3, [pc, #64]	; (ade4 <QSPI_N25Q256_exit_xip+0xa8>)
    ada2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    ada4:	2100      	movs	r1, #0
    ada6:	202a      	movs	r0, #42	; 0x2a
    ada8:	4b0d      	ldr	r3, [pc, #52]	; (ade0 <QSPI_N25Q256_exit_xip+0xa4>)
    adaa:	4798      	blx	r3
		delay_us(1);
    adac:	2001      	movs	r0, #1
    adae:	4b0d      	ldr	r3, [pc, #52]	; (ade4 <QSPI_N25Q256_exit_xip+0xa8>)
    adb0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    adb2:	687b      	ldr	r3, [r7, #4]
    adb4:	3301      	adds	r3, #1
    adb6:	607b      	str	r3, [r7, #4]
    adb8:	687b      	ldr	r3, [r7, #4]
    adba:	2b06      	cmp	r3, #6
    adbc:	ddeb      	ble.n	ad96 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    adbe:	2101      	movs	r1, #1
    adc0:	202b      	movs	r0, #43	; 0x2b
    adc2:	4b07      	ldr	r3, [pc, #28]	; (ade0 <QSPI_N25Q256_exit_xip+0xa4>)
    adc4:	4798      	blx	r3
	delay_us(1);
    adc6:	2001      	movs	r0, #1
    adc8:	4b06      	ldr	r3, [pc, #24]	; (ade4 <QSPI_N25Q256_exit_xip+0xa8>)
    adca:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    adcc:	4b06      	ldr	r3, [pc, #24]	; (ade8 <QSPI_N25Q256_exit_xip+0xac>)
    adce:	4798      	blx	r3
}
    add0:	bf00      	nop
    add2:	3708      	adds	r7, #8
    add4:	46bd      	mov	sp, r7
    add6:	bd80      	pop	{r7, pc}
    add8:	0000acad 	.word	0x0000acad
    addc:	0000accd 	.word	0x0000accd
    ade0:	0000ad05 	.word	0x0000ad05
    ade4:	00001dcd 	.word	0x00001dcd
    ade8:	00001129 	.word	0x00001129

0000adec <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    adec:	b598      	push	{r3, r4, r7, lr}
    adee:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    adf0:	4806      	ldr	r0, [pc, #24]	; (ae0c <spi_nor_flash_init+0x20>)
    adf2:	4b07      	ldr	r3, [pc, #28]	; (ae10 <spi_nor_flash_init+0x24>)
    adf4:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    adf6:	2300      	movs	r3, #0
    adf8:	4a06      	ldr	r2, [pc, #24]	; (ae14 <spi_nor_flash_init+0x28>)
    adfa:	4904      	ldr	r1, [pc, #16]	; (ae0c <spi_nor_flash_init+0x20>)
    adfc:	4806      	ldr	r0, [pc, #24]	; (ae18 <spi_nor_flash_init+0x2c>)
    adfe:	4c07      	ldr	r4, [pc, #28]	; (ae1c <spi_nor_flash_init+0x30>)
    ae00:	47a0      	blx	r4
    ae02:	4602      	mov	r2, r0
    ae04:	4b06      	ldr	r3, [pc, #24]	; (ae20 <spi_nor_flash_init+0x34>)
    ae06:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    ae08:	bf00      	nop
    ae0a:	bd98      	pop	{r3, r4, r7, pc}
    ae0c:	200092fc 	.word	0x200092fc
    ae10:	000022e5 	.word	0x000022e5
    ae14:	0000ad3d 	.word	0x0000ad3d
    ae18:	20000ef8 	.word	0x20000ef8
    ae1c:	0000b259 	.word	0x0000b259
    ae20:	200094fc 	.word	0x200094fc

0000ae24 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ae24:	b580      	push	{r7, lr}
    ae26:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ae28:	4805      	ldr	r0, [pc, #20]	; (ae40 <cdc_device_acm_init+0x1c>)
    ae2a:	4b06      	ldr	r3, [pc, #24]	; (ae44 <cdc_device_acm_init+0x20>)
    ae2c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ae2e:	4b06      	ldr	r3, [pc, #24]	; (ae48 <cdc_device_acm_init+0x24>)
    ae30:	4798      	blx	r3

	usbdc_start(single_desc);
    ae32:	4806      	ldr	r0, [pc, #24]	; (ae4c <cdc_device_acm_init+0x28>)
    ae34:	4b06      	ldr	r3, [pc, #24]	; (ae50 <cdc_device_acm_init+0x2c>)
    ae36:	4798      	blx	r3
	usbdc_attach();
    ae38:	4b06      	ldr	r3, [pc, #24]	; (ae54 <cdc_device_acm_init+0x30>)
    ae3a:	4798      	blx	r3
}
    ae3c:	bf00      	nop
    ae3e:	bd80      	pop	{r7, pc}
    ae40:	20000f48 	.word	0x20000f48
    ae44:	0000c981 	.word	0x0000c981
    ae48:	0000bbf9 	.word	0x0000bbf9
    ae4c:	20000200 	.word	0x20000200
    ae50:	0000ca1d 	.word	0x0000ca1d
    ae54:	0000ca6d 	.word	0x0000ca6d

0000ae58 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ae5c:	4b01      	ldr	r3, [pc, #4]	; (ae64 <usb_init+0xc>)
    ae5e:	4798      	blx	r3
}
    ae60:	bf00      	nop
    ae62:	bd80      	pop	{r7, pc}
    ae64:	0000ae25 	.word	0x0000ae25

0000ae68 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    ae68:	b480      	push	{r7}
    ae6a:	b085      	sub	sp, #20
    ae6c:	af00      	add	r7, sp, #0
    ae6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ae70:	f3ef 8310 	mrs	r3, PRIMASK
    ae74:	60fb      	str	r3, [r7, #12]
  return(result);
    ae76:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    ae7c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    ae7e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    ae82:	bf00      	nop
    ae84:	3714      	adds	r7, #20
    ae86:	46bd      	mov	sp, r7
    ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae8c:	4770      	bx	lr

0000ae8e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    ae8e:	b480      	push	{r7}
    ae90:	b085      	sub	sp, #20
    ae92:	af00      	add	r7, sp, #0
    ae94:	6078      	str	r0, [r7, #4]
    ae96:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    ae9a:	687b      	ldr	r3, [r7, #4]
    ae9c:	681b      	ldr	r3, [r3, #0]
    ae9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    aea0:	68fb      	ldr	r3, [r7, #12]
    aea2:	f383 8810 	msr	PRIMASK, r3
}
    aea6:	bf00      	nop
    aea8:	3714      	adds	r7, #20
    aeaa:	46bd      	mov	sp, r7
    aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeb0:	4770      	bx	lr
	...

0000aeb4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    aeb4:	b580      	push	{r7, lr}
    aeb6:	b08c      	sub	sp, #48	; 0x30
    aeb8:	af00      	add	r7, sp, #0
    aeba:	6078      	str	r0, [r7, #4]
    aebc:	460b      	mov	r3, r1
    aebe:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    aec0:	687b      	ldr	r3, [r7, #4]
    aec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    aec4:	687b      	ldr	r3, [r7, #4]
    aec6:	681b      	ldr	r3, [r3, #0]
    aec8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    aeca:	f107 030c 	add.w	r3, r7, #12
    aece:	2200      	movs	r2, #0
    aed0:	601a      	str	r2, [r3, #0]
    aed2:	605a      	str	r2, [r3, #4]
    aed4:	609a      	str	r2, [r3, #8]
    aed6:	60da      	str	r2, [r3, #12]
    aed8:	611a      	str	r2, [r3, #16]
    aeda:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aede:	7b1b      	ldrb	r3, [r3, #12]
    aee0:	2b00      	cmp	r3, #0
    aee2:	d001      	beq.n	aee8 <n25q256a_xip_confirm+0x34>
    aee4:	2206      	movs	r2, #6
    aee6:	e000      	b.n	aeea <n25q256a_xip_confirm+0x36>
    aee8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aeea:	7b3b      	ldrb	r3, [r7, #12]
    aeec:	f362 0302 	bfi	r3, r2, #0, #3
    aef0:	733b      	strb	r3, [r7, #12]
    aef2:	7b3b      	ldrb	r3, [r7, #12]
    aef4:	f043 0310 	orr.w	r3, r3, #16
    aef8:	733b      	strb	r3, [r7, #12]
    aefa:	7b3b      	ldrb	r3, [r7, #12]
    aefc:	f043 0320 	orr.w	r3, r3, #32
    af00:	733b      	strb	r3, [r7, #12]
    af02:	7b3b      	ldrb	r3, [r7, #12]
    af04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    af08:	733b      	strb	r3, [r7, #12]
    af0a:	7b3b      	ldrb	r3, [r7, #12]
    af0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    af10:	733b      	strb	r3, [r7, #12]
    af12:	7b7b      	ldrb	r3, [r7, #13]
    af14:	f043 0303 	orr.w	r3, r3, #3
    af18:	737b      	strb	r3, [r7, #13]
    af1a:	7b7b      	ldrb	r3, [r7, #13]
    af1c:	2201      	movs	r2, #1
    af1e:	f362 1305 	bfi	r3, r2, #4, #2
    af22:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af26:	7b1b      	ldrb	r3, [r3, #12]
    af28:	2b00      	cmp	r3, #0
    af2a:	d001      	beq.n	af30 <n25q256a_xip_confirm+0x7c>
    af2c:	2208      	movs	r2, #8
    af2e:	e000      	b.n	af32 <n25q256a_xip_confirm+0x7e>
    af30:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    af32:	7bbb      	ldrb	r3, [r7, #14]
    af34:	f362 0304 	bfi	r3, r2, #0, #5
    af38:	73bb      	strb	r3, [r7, #14]
    af3a:	230b      	movs	r3, #11
    af3c:	743b      	strb	r3, [r7, #16]
    af3e:	78fb      	ldrb	r3, [r7, #3]
    af40:	2b00      	cmp	r3, #0
    af42:	d001      	beq.n	af48 <n25q256a_xip_confirm+0x94>
    af44:	2300      	movs	r3, #0
    af46:	e000      	b.n	af4a <n25q256a_xip_confirm+0x96>
    af48:	23ff      	movs	r3, #255	; 0xff
    af4a:	747b      	strb	r3, [r7, #17]
    af4c:	2301      	movs	r3, #1
    af4e:	61bb      	str	r3, [r7, #24]
    af50:	f107 0327 	add.w	r3, r7, #39	; 0x27
    af54:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    af56:	f107 030c 	add.w	r3, r7, #12
    af5a:	4619      	mov	r1, r3
    af5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    af5e:	4b07      	ldr	r3, [pc, #28]	; (af7c <n25q256a_xip_confirm+0xc8>)
    af60:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    af62:	78fb      	ldrb	r3, [r7, #3]
    af64:	2b00      	cmp	r3, #0
    af66:	d001      	beq.n	af6c <n25q256a_xip_confirm+0xb8>
    af68:	2202      	movs	r2, #2
    af6a:	e000      	b.n	af6e <n25q256a_xip_confirm+0xba>
    af6c:	2201      	movs	r2, #1
    af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af70:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    af72:	2300      	movs	r3, #0
}
    af74:	4618      	mov	r0, r3
    af76:	3730      	adds	r7, #48	; 0x30
    af78:	46bd      	mov	sp, r7
    af7a:	bd80      	pop	{r7, pc}
    af7c:	0000235d 	.word	0x0000235d

0000af80 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    af80:	b580      	push	{r7, lr}
    af82:	b08c      	sub	sp, #48	; 0x30
    af84:	af00      	add	r7, sp, #0
    af86:	6078      	str	r0, [r7, #4]
    af88:	460b      	mov	r3, r1
    af8a:	70fb      	strb	r3, [r7, #3]
    af8c:	4613      	mov	r3, r2
    af8e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    af90:	2300      	movs	r3, #0
    af92:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    af98:	687b      	ldr	r3, [r7, #4]
    af9a:	681b      	ldr	r3, [r3, #0]
    af9c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    af9e:	f107 030c 	add.w	r3, r7, #12
    afa2:	2200      	movs	r2, #0
    afa4:	601a      	str	r2, [r3, #0]
    afa6:	605a      	str	r2, [r3, #4]
    afa8:	609a      	str	r2, [r3, #8]
    afaa:	60da      	str	r2, [r3, #12]
    afac:	611a      	str	r2, [r3, #16]
    afae:	615a      	str	r2, [r3, #20]
    afb0:	78fb      	ldrb	r3, [r7, #3]
    afb2:	f003 0307 	and.w	r3, r3, #7
    afb6:	b2da      	uxtb	r2, r3
    afb8:	7b3b      	ldrb	r3, [r7, #12]
    afba:	f362 0302 	bfi	r3, r2, #0, #3
    afbe:	733b      	strb	r3, [r7, #12]
    afc0:	7b3b      	ldrb	r3, [r7, #12]
    afc2:	f043 0310 	orr.w	r3, r3, #16
    afc6:	733b      	strb	r3, [r7, #12]
    afc8:	7b3b      	ldrb	r3, [r7, #12]
    afca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    afce:	733b      	strb	r3, [r7, #12]
    afd0:	78bb      	ldrb	r3, [r7, #2]
    afd2:	743b      	strb	r3, [r7, #16]
    afd4:	2301      	movs	r3, #1
    afd6:	61bb      	str	r3, [r7, #24]
    afd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    afdc:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    afe0:	7b5b      	ldrb	r3, [r3, #13]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d003      	beq.n	afee <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    afe6:	2100      	movs	r1, #0
    afe8:	6878      	ldr	r0, [r7, #4]
    afea:	4b0a      	ldr	r3, [pc, #40]	; (b014 <n25q256a_read_reg+0x94>)
    afec:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    afee:	f107 030c 	add.w	r3, r7, #12
    aff2:	4619      	mov	r1, r3
    aff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aff6:	4b08      	ldr	r3, [pc, #32]	; (b018 <n25q256a_read_reg+0x98>)
    aff8:	4798      	blx	r3
	if (n25q->xip_mode) {
    affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    affc:	7b5b      	ldrb	r3, [r3, #13]
    affe:	2b00      	cmp	r3, #0
    b000:	d003      	beq.n	b00a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b002:	2101      	movs	r1, #1
    b004:	6878      	ldr	r0, [r7, #4]
    b006:	4b03      	ldr	r3, [pc, #12]	; (b014 <n25q256a_read_reg+0x94>)
    b008:	4798      	blx	r3
	}
	return status;
    b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b00c:	4618      	mov	r0, r3
    b00e:	3730      	adds	r7, #48	; 0x30
    b010:	46bd      	mov	sp, r7
    b012:	bd80      	pop	{r7, pc}
    b014:	0000aeb5 	.word	0x0000aeb5
    b018:	0000235d 	.word	0x0000235d

0000b01c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b01c:	b580      	push	{r7, lr}
    b01e:	b08c      	sub	sp, #48	; 0x30
    b020:	af00      	add	r7, sp, #0
    b022:	60f8      	str	r0, [r7, #12]
    b024:	607b      	str	r3, [r7, #4]
    b026:	460b      	mov	r3, r1
    b028:	72fb      	strb	r3, [r7, #11]
    b02a:	4613      	mov	r3, r2
    b02c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b02e:	68fb      	ldr	r3, [r7, #12]
    b030:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b032:	68fb      	ldr	r3, [r7, #12]
    b034:	681b      	ldr	r3, [r3, #0]
    b036:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b038:	f107 0310 	add.w	r3, r7, #16
    b03c:	2200      	movs	r2, #0
    b03e:	601a      	str	r2, [r3, #0]
    b040:	605a      	str	r2, [r3, #4]
    b042:	609a      	str	r2, [r3, #8]
    b044:	60da      	str	r2, [r3, #12]
    b046:	611a      	str	r2, [r3, #16]
    b048:	615a      	str	r2, [r3, #20]
    b04a:	7afb      	ldrb	r3, [r7, #11]
    b04c:	f003 0307 	and.w	r3, r3, #7
    b050:	b2da      	uxtb	r2, r3
    b052:	7c3b      	ldrb	r3, [r7, #16]
    b054:	f362 0302 	bfi	r3, r2, #0, #3
    b058:	743b      	strb	r3, [r7, #16]
    b05a:	7c3b      	ldrb	r3, [r7, #16]
    b05c:	f043 0310 	orr.w	r3, r3, #16
    b060:	743b      	strb	r3, [r7, #16]
    b062:	7c3b      	ldrb	r3, [r7, #16]
    b064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b068:	743b      	strb	r3, [r7, #16]
    b06a:	7c7b      	ldrb	r3, [r7, #17]
    b06c:	2202      	movs	r2, #2
    b06e:	f362 1305 	bfi	r3, r2, #4, #2
    b072:	747b      	strb	r3, [r7, #17]
    b074:	7abb      	ldrb	r3, [r7, #10]
    b076:	753b      	strb	r3, [r7, #20]
    b078:	2301      	movs	r3, #1
    b07a:	61fb      	str	r3, [r7, #28]
    b07c:	1d3b      	adds	r3, r7, #4
    b07e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b082:	7b5b      	ldrb	r3, [r3, #13]
    b084:	2b00      	cmp	r3, #0
    b086:	d003      	beq.n	b090 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b088:	2100      	movs	r1, #0
    b08a:	68f8      	ldr	r0, [r7, #12]
    b08c:	4b09      	ldr	r3, [pc, #36]	; (b0b4 <n25q256a_write_reg+0x98>)
    b08e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b090:	f107 0310 	add.w	r3, r7, #16
    b094:	4619      	mov	r1, r3
    b096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b098:	4b07      	ldr	r3, [pc, #28]	; (b0b8 <n25q256a_write_reg+0x9c>)
    b09a:	4798      	blx	r3
	if (n25q->xip_mode) {
    b09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b09e:	7b5b      	ldrb	r3, [r3, #13]
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d003      	beq.n	b0ac <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b0a4:	2101      	movs	r1, #1
    b0a6:	68f8      	ldr	r0, [r7, #12]
    b0a8:	4b02      	ldr	r3, [pc, #8]	; (b0b4 <n25q256a_write_reg+0x98>)
    b0aa:	4798      	blx	r3
	}
}
    b0ac:	bf00      	nop
    b0ae:	3730      	adds	r7, #48	; 0x30
    b0b0:	46bd      	mov	sp, r7
    b0b2:	bd80      	pop	{r7, pc}
    b0b4:	0000aeb5 	.word	0x0000aeb5
    b0b8:	0000235d 	.word	0x0000235d

0000b0bc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b0bc:	b580      	push	{r7, lr}
    b0be:	b090      	sub	sp, #64	; 0x40
    b0c0:	af00      	add	r7, sp, #0
    b0c2:	6078      	str	r0, [r7, #4]
    b0c4:	460b      	mov	r3, r1
    b0c6:	70fb      	strb	r3, [r7, #3]
    b0c8:	4613      	mov	r3, r2
    b0ca:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b0cc:	687b      	ldr	r3, [r7, #4]
    b0ce:	681b      	ldr	r3, [r3, #0]
    b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b0d2:	78bb      	ldrb	r3, [r7, #2]
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d001      	beq.n	b0dc <n25q256a_write_enable+0x20>
    b0d8:	2306      	movs	r3, #6
    b0da:	e000      	b.n	b0de <n25q256a_write_enable+0x22>
    b0dc:	2304      	movs	r3, #4
    b0de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b0e2:	f107 0320 	add.w	r3, r7, #32
    b0e6:	2200      	movs	r2, #0
    b0e8:	601a      	str	r2, [r3, #0]
    b0ea:	605a      	str	r2, [r3, #4]
    b0ec:	609a      	str	r2, [r3, #8]
    b0ee:	60da      	str	r2, [r3, #12]
    b0f0:	611a      	str	r2, [r3, #16]
    b0f2:	615a      	str	r2, [r3, #20]
    b0f4:	78fb      	ldrb	r3, [r7, #3]
    b0f6:	f003 0307 	and.w	r3, r3, #7
    b0fa:	b2da      	uxtb	r2, r3
    b0fc:	f897 3020 	ldrb.w	r3, [r7, #32]
    b100:	f362 0302 	bfi	r3, r2, #0, #3
    b104:	f887 3020 	strb.w	r3, [r7, #32]
    b108:	f897 3020 	ldrb.w	r3, [r7, #32]
    b10c:	f043 0310 	orr.w	r3, r3, #16
    b110:	f887 3020 	strb.w	r3, [r7, #32]
    b114:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b118:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b11c:	f107 0308 	add.w	r3, r7, #8
    b120:	2200      	movs	r2, #0
    b122:	601a      	str	r2, [r3, #0]
    b124:	605a      	str	r2, [r3, #4]
    b126:	609a      	str	r2, [r3, #8]
    b128:	60da      	str	r2, [r3, #12]
    b12a:	611a      	str	r2, [r3, #16]
    b12c:	615a      	str	r2, [r3, #20]
    b12e:	78fb      	ldrb	r3, [r7, #3]
    b130:	f003 0307 	and.w	r3, r3, #7
    b134:	b2da      	uxtb	r2, r3
    b136:	7a3b      	ldrb	r3, [r7, #8]
    b138:	f362 0302 	bfi	r3, r2, #0, #3
    b13c:	723b      	strb	r3, [r7, #8]
    b13e:	7a3b      	ldrb	r3, [r7, #8]
    b140:	f043 0310 	orr.w	r3, r3, #16
    b144:	723b      	strb	r3, [r7, #8]
    b146:	7a3b      	ldrb	r3, [r7, #8]
    b148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b14c:	723b      	strb	r3, [r7, #8]
    b14e:	2305      	movs	r3, #5
    b150:	733b      	strb	r3, [r7, #12]
    b152:	2301      	movs	r3, #1
    b154:	617b      	str	r3, [r7, #20]
    b156:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b15a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b15c:	f107 0320 	add.w	r3, r7, #32
    b160:	4619      	mov	r1, r3
    b162:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b164:	4b08      	ldr	r3, [pc, #32]	; (b188 <n25q256a_write_enable+0xcc>)
    b166:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b168:	f107 0308 	add.w	r3, r7, #8
    b16c:	4619      	mov	r1, r3
    b16e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b170:	4b05      	ldr	r3, [pc, #20]	; (b188 <n25q256a_write_enable+0xcc>)
    b172:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b174:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b178:	f003 0302 	and.w	r3, r3, #2
    b17c:	2b00      	cmp	r3, #0
    b17e:	d0ed      	beq.n	b15c <n25q256a_write_enable+0xa0>
}
    b180:	bf00      	nop
    b182:	3740      	adds	r7, #64	; 0x40
    b184:	46bd      	mov	sp, r7
    b186:	bd80      	pop	{r7, pc}
    b188:	0000235d 	.word	0x0000235d

0000b18c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b18c:	b590      	push	{r4, r7, lr}
    b18e:	b087      	sub	sp, #28
    b190:	af00      	add	r7, sp, #0
    b192:	6078      	str	r0, [r7, #4]
    b194:	460b      	mov	r3, r1
    b196:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b198:	687b      	ldr	r3, [r7, #4]
    b19a:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b19c:	68fb      	ldr	r3, [r7, #12]
    b19e:	7b1b      	ldrb	r3, [r3, #12]
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d001      	beq.n	b1a8 <n25q256a_switch_mode+0x1c>
    b1a4:	2306      	movs	r3, #6
    b1a6:	e000      	b.n	b1aa <n25q256a_switch_mode+0x1e>
    b1a8:	2300      	movs	r3, #0
    b1aa:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b1ac:	7afb      	ldrb	r3, [r7, #11]
    b1ae:	2265      	movs	r2, #101	; 0x65
    b1b0:	4619      	mov	r1, r3
    b1b2:	6878      	ldr	r0, [r7, #4]
    b1b4:	4b25      	ldr	r3, [pc, #148]	; (b24c <n25q256a_switch_mode+0xc0>)
    b1b6:	4798      	blx	r3
    b1b8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b1ba:	2300      	movs	r3, #0
    b1bc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b1be:	68fb      	ldr	r3, [r7, #12]
    b1c0:	7b1b      	ldrb	r3, [r3, #12]
    b1c2:	78fa      	ldrb	r2, [r7, #3]
    b1c4:	429a      	cmp	r2, r3
    b1c6:	d03d      	beq.n	b244 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b1c8:	78fb      	ldrb	r3, [r7, #3]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d00b      	beq.n	b1e6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b1ce:	697b      	ldr	r3, [r7, #20]
    b1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1d4:	2b00      	cmp	r3, #0
    b1d6:	d011      	beq.n	b1fc <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b1d8:	697b      	ldr	r3, [r7, #20]
    b1da:	f003 031f 	and.w	r3, r3, #31
    b1de:	617b      	str	r3, [r7, #20]
			modify = 1;
    b1e0:	2301      	movs	r3, #1
    b1e2:	74fb      	strb	r3, [r7, #19]
    b1e4:	e00a      	b.n	b1fc <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b1e6:	697b      	ldr	r3, [r7, #20]
    b1e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d105      	bne.n	b1fc <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b1f0:	697b      	ldr	r3, [r7, #20]
    b1f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b1f6:	617b      	str	r3, [r7, #20]
			modify = 1;
    b1f8:	2301      	movs	r3, #1
    b1fa:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b1fc:	7cfb      	ldrb	r3, [r7, #19]
    b1fe:	2b00      	cmp	r3, #0
    b200:	d021      	beq.n	b246 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b202:	68fb      	ldr	r3, [r7, #12]
    b204:	78fa      	ldrb	r2, [r7, #3]
    b206:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b208:	7afb      	ldrb	r3, [r7, #11]
    b20a:	2201      	movs	r2, #1
    b20c:	4619      	mov	r1, r3
    b20e:	6878      	ldr	r0, [r7, #4]
    b210:	4b0f      	ldr	r3, [pc, #60]	; (b250 <n25q256a_switch_mode+0xc4>)
    b212:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b214:	7af9      	ldrb	r1, [r7, #11]
    b216:	697b      	ldr	r3, [r7, #20]
    b218:	2261      	movs	r2, #97	; 0x61
    b21a:	6878      	ldr	r0, [r7, #4]
    b21c:	4c0d      	ldr	r4, [pc, #52]	; (b254 <n25q256a_switch_mode+0xc8>)
    b21e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b220:	78fb      	ldrb	r3, [r7, #3]
    b222:	2b00      	cmp	r3, #0
    b224:	d001      	beq.n	b22a <n25q256a_switch_mode+0x9e>
    b226:	2306      	movs	r3, #6
    b228:	e000      	b.n	b22c <n25q256a_switch_mode+0xa0>
    b22a:	2300      	movs	r3, #0
    b22c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b22e:	7afb      	ldrb	r3, [r7, #11]
    b230:	2265      	movs	r2, #101	; 0x65
    b232:	4619      	mov	r1, r3
    b234:	6878      	ldr	r0, [r7, #4]
    b236:	4b05      	ldr	r3, [pc, #20]	; (b24c <n25q256a_switch_mode+0xc0>)
    b238:	4798      	blx	r3
    b23a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b23c:	68fb      	ldr	r3, [r7, #12]
    b23e:	78fa      	ldrb	r2, [r7, #3]
    b240:	731a      	strb	r2, [r3, #12]
    b242:	e000      	b.n	b246 <n25q256a_switch_mode+0xba>
		return;
    b244:	bf00      	nop
	}
}
    b246:	371c      	adds	r7, #28
    b248:	46bd      	mov	sp, r7
    b24a:	bd90      	pop	{r4, r7, pc}
    b24c:	0000af81 	.word	0x0000af81
    b250:	0000b0bd 	.word	0x0000b0bd
    b254:	0000b01d 	.word	0x0000b01d

0000b258 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b086      	sub	sp, #24
    b25c:	af00      	add	r7, sp, #0
    b25e:	60f8      	str	r0, [r7, #12]
    b260:	60b9      	str	r1, [r7, #8]
    b262:	607a      	str	r2, [r7, #4]
    b264:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b266:	68fb      	ldr	r3, [r7, #12]
    b268:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b26a:	4a0c      	ldr	r2, [pc, #48]	; (b29c <n25q256a_construct+0x44>)
    b26c:	68b9      	ldr	r1, [r7, #8]
    b26e:	68f8      	ldr	r0, [r7, #12]
    b270:	4b0b      	ldr	r3, [pc, #44]	; (b2a0 <n25q256a_construct+0x48>)
    b272:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b274:	697b      	ldr	r3, [r7, #20]
    b276:	2200      	movs	r2, #0
    b278:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b27a:	697b      	ldr	r3, [r7, #20]
    b27c:	2200      	movs	r2, #0
    b27e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b280:	697b      	ldr	r3, [r7, #20]
    b282:	687a      	ldr	r2, [r7, #4]
    b284:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b286:	78fb      	ldrb	r3, [r7, #3]
    b288:	4619      	mov	r1, r3
    b28a:	68f8      	ldr	r0, [r7, #12]
    b28c:	4b05      	ldr	r3, [pc, #20]	; (b2a4 <n25q256a_construct+0x4c>)
    b28e:	4798      	blx	r3
	return me;
    b290:	68fb      	ldr	r3, [r7, #12]
}
    b292:	4618      	mov	r0, r3
    b294:	3718      	adds	r7, #24
    b296:	46bd      	mov	sp, r7
    b298:	bd80      	pop	{r7, pc}
    b29a:	bf00      	nop
    b29c:	0001148c 	.word	0x0001148c
    b2a0:	0000b735 	.word	0x0000b735
    b2a4:	0000b18d 	.word	0x0000b18d

0000b2a8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b2a8:	b580      	push	{r7, lr}
    b2aa:	b08c      	sub	sp, #48	; 0x30
    b2ac:	af00      	add	r7, sp, #0
    b2ae:	60f8      	str	r0, [r7, #12]
    b2b0:	60b9      	str	r1, [r7, #8]
    b2b2:	607a      	str	r2, [r7, #4]
    b2b4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b2b6:	68fb      	ldr	r3, [r7, #12]
    b2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b2ba:	68fb      	ldr	r3, [r7, #12]
    b2bc:	681b      	ldr	r3, [r3, #0]
    b2be:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b2c0:	f107 0310 	add.w	r3, r7, #16
    b2c4:	2200      	movs	r2, #0
    b2c6:	601a      	str	r2, [r3, #0]
    b2c8:	605a      	str	r2, [r3, #4]
    b2ca:	609a      	str	r2, [r3, #8]
    b2cc:	60da      	str	r2, [r3, #12]
    b2ce:	611a      	str	r2, [r3, #16]
    b2d0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2d4:	7b1b      	ldrb	r3, [r3, #12]
    b2d6:	2b00      	cmp	r3, #0
    b2d8:	d001      	beq.n	b2de <n25q256a_read+0x36>
    b2da:	2206      	movs	r2, #6
    b2dc:	e000      	b.n	b2e0 <n25q256a_read+0x38>
    b2de:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b2e0:	7c3b      	ldrb	r3, [r7, #16]
    b2e2:	f362 0302 	bfi	r3, r2, #0, #3
    b2e6:	743b      	strb	r3, [r7, #16]
    b2e8:	7c3b      	ldrb	r3, [r7, #16]
    b2ea:	f043 0310 	orr.w	r3, r3, #16
    b2ee:	743b      	strb	r3, [r7, #16]
    b2f0:	7c3b      	ldrb	r3, [r7, #16]
    b2f2:	f043 0320 	orr.w	r3, r3, #32
    b2f6:	743b      	strb	r3, [r7, #16]
    b2f8:	7c3b      	ldrb	r3, [r7, #16]
    b2fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2fe:	743b      	strb	r3, [r7, #16]
    b300:	7c7b      	ldrb	r3, [r7, #17]
    b302:	2201      	movs	r2, #1
    b304:	f362 1305 	bfi	r3, r2, #4, #2
    b308:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b30c:	7b1b      	ldrb	r3, [r3, #12]
    b30e:	2b00      	cmp	r3, #0
    b310:	d001      	beq.n	b316 <n25q256a_read+0x6e>
    b312:	220a      	movs	r2, #10
    b314:	e000      	b.n	b318 <n25q256a_read+0x70>
    b316:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b318:	7cbb      	ldrb	r3, [r7, #18]
    b31a:	f362 0304 	bfi	r3, r2, #0, #5
    b31e:	74bb      	strb	r3, [r7, #18]
    b320:	230b      	movs	r3, #11
    b322:	753b      	strb	r3, [r7, #20]
    b324:	687b      	ldr	r3, [r7, #4]
    b326:	61bb      	str	r3, [r7, #24]
    b328:	683b      	ldr	r3, [r7, #0]
    b32a:	61fb      	str	r3, [r7, #28]
    b32c:	68bb      	ldr	r3, [r7, #8]
    b32e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b330:	f107 0310 	add.w	r3, r7, #16
    b334:	4619      	mov	r1, r3
    b336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b338:	4b03      	ldr	r3, [pc, #12]	; (b348 <n25q256a_read+0xa0>)
    b33a:	4798      	blx	r3
	return ERR_NONE;
    b33c:	2300      	movs	r3, #0
}
    b33e:	4618      	mov	r0, r3
    b340:	3730      	adds	r7, #48	; 0x30
    b342:	46bd      	mov	sp, r7
    b344:	bd80      	pop	{r7, pc}
    b346:	bf00      	nop
    b348:	0000235d 	.word	0x0000235d

0000b34c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b34c:	b580      	push	{r7, lr}
    b34e:	b08c      	sub	sp, #48	; 0x30
    b350:	af00      	add	r7, sp, #0
    b352:	60f8      	str	r0, [r7, #12]
    b354:	60b9      	str	r1, [r7, #8]
    b356:	607a      	str	r2, [r7, #4]
    b358:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b35a:	68fb      	ldr	r3, [r7, #12]
    b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b35e:	68fb      	ldr	r3, [r7, #12]
    b360:	681b      	ldr	r3, [r3, #0]
    b362:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b364:	f107 0310 	add.w	r3, r7, #16
    b368:	2200      	movs	r2, #0
    b36a:	601a      	str	r2, [r3, #0]
    b36c:	605a      	str	r2, [r3, #4]
    b36e:	609a      	str	r2, [r3, #8]
    b370:	60da      	str	r2, [r3, #12]
    b372:	611a      	str	r2, [r3, #16]
    b374:	615a      	str	r2, [r3, #20]
    b376:	7c3b      	ldrb	r3, [r7, #16]
    b378:	f043 0310 	orr.w	r3, r3, #16
    b37c:	743b      	strb	r3, [r7, #16]
    b37e:	7c3b      	ldrb	r3, [r7, #16]
    b380:	f043 0320 	orr.w	r3, r3, #32
    b384:	743b      	strb	r3, [r7, #16]
    b386:	7c3b      	ldrb	r3, [r7, #16]
    b388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b38c:	743b      	strb	r3, [r7, #16]
    b38e:	7c7b      	ldrb	r3, [r7, #17]
    b390:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b394:	747b      	strb	r3, [r7, #17]
    b396:	2302      	movs	r3, #2
    b398:	753b      	strb	r3, [r7, #20]
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	61bb      	str	r3, [r7, #24]
    b39e:	683b      	ldr	r3, [r7, #0]
    b3a0:	61fb      	str	r3, [r7, #28]
    b3a2:	68bb      	ldr	r3, [r7, #8]
    b3a4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3a8:	7b1b      	ldrb	r3, [r3, #12]
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	d001      	beq.n	b3b2 <n25q256a_write+0x66>
    b3ae:	2206      	movs	r2, #6
    b3b0:	e000      	b.n	b3b4 <n25q256a_write+0x68>
    b3b2:	2200      	movs	r2, #0
    b3b4:	7c3b      	ldrb	r3, [r7, #16]
    b3b6:	f362 0302 	bfi	r3, r2, #0, #3
    b3ba:	743b      	strb	r3, [r7, #16]
	while (length) {
    b3bc:	e035      	b.n	b42a <n25q256a_write+0xde>
		cmd.address = address;
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b3c2:	683b      	ldr	r3, [r7, #0]
    b3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b3c8:	d802      	bhi.n	b3d0 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b3ca:	683b      	ldr	r3, [r7, #0]
    b3cc:	61fb      	str	r3, [r7, #28]
    b3ce:	e002      	b.n	b3d6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b3d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    b3d4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b3d6:	7c3b      	ldrb	r3, [r7, #16]
    b3d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b3dc:	b2db      	uxtb	r3, r3
    b3de:	2201      	movs	r2, #1
    b3e0:	4619      	mov	r1, r3
    b3e2:	68f8      	ldr	r0, [r7, #12]
    b3e4:	4b19      	ldr	r3, [pc, #100]	; (b44c <n25q256a_write+0x100>)
    b3e6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b3e8:	f107 0310 	add.w	r3, r7, #16
    b3ec:	4619      	mov	r1, r3
    b3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b3f0:	4b17      	ldr	r3, [pc, #92]	; (b450 <n25q256a_write+0x104>)
    b3f2:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b3f4:	bf00      	nop
    b3f6:	7c3b      	ldrb	r3, [r7, #16]
    b3f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b3fc:	b2db      	uxtb	r3, r3
    b3fe:	2270      	movs	r2, #112	; 0x70
    b400:	4619      	mov	r1, r3
    b402:	68f8      	ldr	r0, [r7, #12]
    b404:	4b13      	ldr	r3, [pc, #76]	; (b454 <n25q256a_write+0x108>)
    b406:	4798      	blx	r3
    b408:	4603      	mov	r3, r0
    b40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b40e:	2b00      	cmp	r3, #0
    b410:	d0f1      	beq.n	b3f6 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b412:	6a3a      	ldr	r2, [r7, #32]
    b414:	69fb      	ldr	r3, [r7, #28]
    b416:	4413      	add	r3, r2
    b418:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b41a:	69fb      	ldr	r3, [r7, #28]
    b41c:	683a      	ldr	r2, [r7, #0]
    b41e:	1ad3      	subs	r3, r2, r3
    b420:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b422:	69fb      	ldr	r3, [r7, #28]
    b424:	687a      	ldr	r2, [r7, #4]
    b426:	4413      	add	r3, r2
    b428:	607b      	str	r3, [r7, #4]
	while (length) {
    b42a:	683b      	ldr	r3, [r7, #0]
    b42c:	2b00      	cmp	r3, #0
    b42e:	d1c6      	bne.n	b3be <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b432:	7b5b      	ldrb	r3, [r3, #13]
    b434:	2b00      	cmp	r3, #0
    b436:	d003      	beq.n	b440 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b438:	2101      	movs	r1, #1
    b43a:	68f8      	ldr	r0, [r7, #12]
    b43c:	4b06      	ldr	r3, [pc, #24]	; (b458 <n25q256a_write+0x10c>)
    b43e:	4798      	blx	r3
	}
	return ERR_NONE;
    b440:	2300      	movs	r3, #0
}
    b442:	4618      	mov	r0, r3
    b444:	3730      	adds	r7, #48	; 0x30
    b446:	46bd      	mov	sp, r7
    b448:	bd80      	pop	{r7, pc}
    b44a:	bf00      	nop
    b44c:	0000b0bd 	.word	0x0000b0bd
    b450:	0000235d 	.word	0x0000235d
    b454:	0000af81 	.word	0x0000af81
    b458:	0000aeb5 	.word	0x0000aeb5

0000b45c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b45c:	b580      	push	{r7, lr}
    b45e:	b090      	sub	sp, #64	; 0x40
    b460:	af00      	add	r7, sp, #0
    b462:	60f8      	str	r0, [r7, #12]
    b464:	60b9      	str	r1, [r7, #8]
    b466:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b468:	68fb      	ldr	r3, [r7, #12]
    b46a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b46c:	68fb      	ldr	r3, [r7, #12]
    b46e:	681b      	ldr	r3, [r3, #0]
    b470:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b472:	f107 0314 	add.w	r3, r7, #20
    b476:	2200      	movs	r2, #0
    b478:	601a      	str	r2, [r3, #0]
    b47a:	605a      	str	r2, [r3, #4]
    b47c:	609a      	str	r2, [r3, #8]
    b47e:	60da      	str	r2, [r3, #12]
    b480:	611a      	str	r2, [r3, #16]
    b482:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b486:	7b1b      	ldrb	r3, [r3, #12]
    b488:	2b00      	cmp	r3, #0
    b48a:	d001      	beq.n	b490 <n25q256a_erase+0x34>
    b48c:	2206      	movs	r2, #6
    b48e:	e000      	b.n	b492 <n25q256a_erase+0x36>
    b490:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b492:	7d3b      	ldrb	r3, [r7, #20]
    b494:	f362 0302 	bfi	r3, r2, #0, #3
    b498:	753b      	strb	r3, [r7, #20]
    b49a:	7d3b      	ldrb	r3, [r7, #20]
    b49c:	f043 0310 	orr.w	r3, r3, #16
    b4a0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b4a2:	687b      	ldr	r3, [r7, #4]
    b4a4:	4a56      	ldr	r2, [pc, #344]	; (b600 <n25q256a_erase+0x1a4>)
    b4a6:	4293      	cmp	r3, r2
    b4a8:	bf94      	ite	ls
    b4aa:	2301      	movls	r3, #1
    b4ac:	2300      	movhi	r3, #0
    b4ae:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b4b0:	7d3b      	ldrb	r3, [r7, #20]
    b4b2:	f362 1345 	bfi	r3, r2, #5, #1
    b4b6:	753b      	strb	r3, [r7, #20]
    b4b8:	7d7b      	ldrb	r3, [r7, #21]
    b4ba:	2202      	movs	r2, #2
    b4bc:	f362 1305 	bfi	r3, r2, #4, #2
    b4c0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b4c2:	68bb      	ldr	r3, [r7, #8]
    b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b4ca:	2300      	movs	r3, #0
    b4cc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b4ce:	687b      	ldr	r3, [r7, #4]
    b4d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d104      	bne.n	b4e2 <n25q256a_erase+0x86>
    b4d8:	68bb      	ldr	r3, [r7, #8]
    b4da:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d002      	beq.n	b4e8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b4e2:	f06f 030c 	mvn.w	r3, #12
    b4e6:	e087      	b.n	b5f8 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b4e8:	687b      	ldr	r3, [r7, #4]
    b4ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b4ee:	d368      	bcc.n	b5c2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b4f0:	23c7      	movs	r3, #199	; 0xc7
    b4f2:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b4f4:	7d3b      	ldrb	r3, [r7, #20]
    b4f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b4fa:	b2db      	uxtb	r3, r3
    b4fc:	2201      	movs	r2, #1
    b4fe:	4619      	mov	r1, r3
    b500:	68f8      	ldr	r0, [r7, #12]
    b502:	4b40      	ldr	r3, [pc, #256]	; (b604 <n25q256a_erase+0x1a8>)
    b504:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b506:	f107 0314 	add.w	r3, r7, #20
    b50a:	4619      	mov	r1, r3
    b50c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b50e:	4b3e      	ldr	r3, [pc, #248]	; (b608 <n25q256a_erase+0x1ac>)
    b510:	4798      	blx	r3
    b512:	e059      	b.n	b5c8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b516:	b29b      	uxth	r3, r3
    b518:	2b00      	cmp	r3, #0
    b51a:	d11f      	bne.n	b55c <n25q256a_erase+0x100>
    b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b522:	d31b      	bcc.n	b55c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b526:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b528:	23d8      	movs	r3, #216	; 0xd8
    b52a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b52c:	7d3b      	ldrb	r3, [r7, #20]
    b52e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b532:	b2db      	uxtb	r3, r3
    b534:	2201      	movs	r2, #1
    b536:	4619      	mov	r1, r3
    b538:	68f8      	ldr	r0, [r7, #12]
    b53a:	4b32      	ldr	r3, [pc, #200]	; (b604 <n25q256a_erase+0x1a8>)
    b53c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b53e:	f107 0314 	add.w	r3, r7, #20
    b542:	4619      	mov	r1, r3
    b544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b546:	4b30      	ldr	r3, [pc, #192]	; (b608 <n25q256a_erase+0x1ac>)
    b548:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b54c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b550:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b554:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b558:	63bb      	str	r3, [r7, #56]	; 0x38
    b55a:	e023      	b.n	b5a4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b562:	d31b      	bcc.n	b59c <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b566:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b568:	2320      	movs	r3, #32
    b56a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b56c:	7d3b      	ldrb	r3, [r7, #20]
    b56e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b572:	b2db      	uxtb	r3, r3
    b574:	2201      	movs	r2, #1
    b576:	4619      	mov	r1, r3
    b578:	68f8      	ldr	r0, [r7, #12]
    b57a:	4b22      	ldr	r3, [pc, #136]	; (b604 <n25q256a_erase+0x1a8>)
    b57c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b57e:	f107 0314 	add.w	r3, r7, #20
    b582:	4619      	mov	r1, r3
    b584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b586:	4b20      	ldr	r3, [pc, #128]	; (b608 <n25q256a_erase+0x1ac>)
    b588:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b590:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b594:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b598:	63bb      	str	r3, [r7, #56]	; 0x38
    b59a:	e003      	b.n	b5a4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b59c:	f06f 030c 	mvn.w	r3, #12
    b5a0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b5a2:	e011      	b.n	b5c8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b5a4:	bf00      	nop
    b5a6:	7d3b      	ldrb	r3, [r7, #20]
    b5a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b5ac:	b2db      	uxtb	r3, r3
    b5ae:	2270      	movs	r2, #112	; 0x70
    b5b0:	4619      	mov	r1, r3
    b5b2:	68f8      	ldr	r0, [r7, #12]
    b5b4:	4b15      	ldr	r3, [pc, #84]	; (b60c <n25q256a_erase+0x1b0>)
    b5b6:	4798      	blx	r3
    b5b8:	4603      	mov	r3, r0
    b5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b5be:	2b00      	cmp	r3, #0
    b5c0:	d0f1      	beq.n	b5a6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d1a5      	bne.n	b514 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b5c8:	bf00      	nop
    b5ca:	7d3b      	ldrb	r3, [r7, #20]
    b5cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b5d0:	b2db      	uxtb	r3, r3
    b5d2:	2270      	movs	r2, #112	; 0x70
    b5d4:	4619      	mov	r1, r3
    b5d6:	68f8      	ldr	r0, [r7, #12]
    b5d8:	4b0c      	ldr	r3, [pc, #48]	; (b60c <n25q256a_erase+0x1b0>)
    b5da:	4798      	blx	r3
    b5dc:	4603      	mov	r3, r0
    b5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d0f1      	beq.n	b5ca <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5e8:	7b5b      	ldrb	r3, [r3, #13]
    b5ea:	2b00      	cmp	r3, #0
    b5ec:	d003      	beq.n	b5f6 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b5ee:	2101      	movs	r1, #1
    b5f0:	68f8      	ldr	r0, [r7, #12]
    b5f2:	4b07      	ldr	r3, [pc, #28]	; (b610 <n25q256a_erase+0x1b4>)
    b5f4:	4798      	blx	r3
	}
	return rc;
    b5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b5f8:	4618      	mov	r0, r3
    b5fa:	3740      	adds	r7, #64	; 0x40
    b5fc:	46bd      	mov	sp, r7
    b5fe:	bd80      	pop	{r7, pc}
    b600:	001fffff 	.word	0x001fffff
    b604:	0000b0bd 	.word	0x0000b0bd
    b608:	0000235d 	.word	0x0000235d
    b60c:	0000af81 	.word	0x0000af81
    b610:	0000aeb5 	.word	0x0000aeb5

0000b614 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b614:	b590      	push	{r4, r7, lr}
    b616:	b085      	sub	sp, #20
    b618:	af00      	add	r7, sp, #0
    b61a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b620:	68fb      	ldr	r3, [r7, #12]
    b622:	7b1b      	ldrb	r3, [r3, #12]
    b624:	2b00      	cmp	r3, #0
    b626:	d001      	beq.n	b62c <n25q256a_enable_xip+0x18>
    b628:	2306      	movs	r3, #6
    b62a:	e000      	b.n	b62e <n25q256a_enable_xip+0x1a>
    b62c:	2300      	movs	r3, #0
    b62e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b630:	68fb      	ldr	r3, [r7, #12]
    b632:	7b5b      	ldrb	r3, [r3, #13]
    b634:	2b00      	cmp	r3, #0
    b636:	d129      	bne.n	b68c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b638:	7afb      	ldrb	r3, [r7, #11]
    b63a:	2285      	movs	r2, #133	; 0x85
    b63c:	4619      	mov	r1, r3
    b63e:	6878      	ldr	r0, [r7, #4]
    b640:	4b15      	ldr	r3, [pc, #84]	; (b698 <n25q256a_enable_xip+0x84>)
    b642:	4798      	blx	r3
    b644:	4603      	mov	r3, r0
    b646:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b648:	7abb      	ldrb	r3, [r7, #10]
    b64a:	f003 0308 	and.w	r3, r3, #8
    b64e:	2b00      	cmp	r3, #0
    b650:	d015      	beq.n	b67e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b652:	7abb      	ldrb	r3, [r7, #10]
    b654:	f023 0308 	bic.w	r3, r3, #8
    b658:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b65a:	7abb      	ldrb	r3, [r7, #10]
    b65c:	7af9      	ldrb	r1, [r7, #11]
    b65e:	2281      	movs	r2, #129	; 0x81
    b660:	6878      	ldr	r0, [r7, #4]
    b662:	4c0e      	ldr	r4, [pc, #56]	; (b69c <n25q256a_enable_xip+0x88>)
    b664:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b666:	bf00      	nop
    b668:	7afb      	ldrb	r3, [r7, #11]
    b66a:	2270      	movs	r2, #112	; 0x70
    b66c:	4619      	mov	r1, r3
    b66e:	6878      	ldr	r0, [r7, #4]
    b670:	4b09      	ldr	r3, [pc, #36]	; (b698 <n25q256a_enable_xip+0x84>)
    b672:	4798      	blx	r3
    b674:	4603      	mov	r3, r0
    b676:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b67a:	2b00      	cmp	r3, #0
    b67c:	d0f4      	beq.n	b668 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b67e:	68fb      	ldr	r3, [r7, #12]
    b680:	2201      	movs	r2, #1
    b682:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b684:	2101      	movs	r1, #1
    b686:	6878      	ldr	r0, [r7, #4]
    b688:	4b05      	ldr	r3, [pc, #20]	; (b6a0 <n25q256a_enable_xip+0x8c>)
    b68a:	4798      	blx	r3
	}
	return ERR_NONE;
    b68c:	2300      	movs	r3, #0
}
    b68e:	4618      	mov	r0, r3
    b690:	3714      	adds	r7, #20
    b692:	46bd      	mov	sp, r7
    b694:	bd90      	pop	{r4, r7, pc}
    b696:	bf00      	nop
    b698:	0000af81 	.word	0x0000af81
    b69c:	0000b01d 	.word	0x0000b01d
    b6a0:	0000aeb5 	.word	0x0000aeb5

0000b6a4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b6a4:	b580      	push	{r7, lr}
    b6a6:	b086      	sub	sp, #24
    b6a8:	af00      	add	r7, sp, #0
    b6aa:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6ac:	687b      	ldr	r3, [r7, #4]
    b6ae:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6b0:	687b      	ldr	r3, [r7, #4]
    b6b2:	681b      	ldr	r3, [r3, #0]
    b6b4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b6b6:	697b      	ldr	r3, [r7, #20]
    b6b8:	7b1b      	ldrb	r3, [r3, #12]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d001      	beq.n	b6c2 <n25q256a_disable_xip+0x1e>
    b6be:	2306      	movs	r3, #6
    b6c0:	e000      	b.n	b6c4 <n25q256a_disable_xip+0x20>
    b6c2:	2300      	movs	r3, #0
    b6c4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b6c6:	2100      	movs	r1, #0
    b6c8:	6878      	ldr	r0, [r7, #4]
    b6ca:	4b15      	ldr	r3, [pc, #84]	; (b720 <n25q256a_disable_xip+0x7c>)
    b6cc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b6ce:	7bfb      	ldrb	r3, [r7, #15]
    b6d0:	2285      	movs	r2, #133	; 0x85
    b6d2:	4619      	mov	r1, r3
    b6d4:	6878      	ldr	r0, [r7, #4]
    b6d6:	4b13      	ldr	r3, [pc, #76]	; (b724 <n25q256a_disable_xip+0x80>)
    b6d8:	4798      	blx	r3
    b6da:	4603      	mov	r3, r0
    b6dc:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b6de:	7bbb      	ldrb	r3, [r7, #14]
    b6e0:	f003 0308 	and.w	r3, r3, #8
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d113      	bne.n	b710 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b6e8:	697b      	ldr	r3, [r7, #20]
    b6ea:	689b      	ldr	r3, [r3, #8]
    b6ec:	2b00      	cmp	r3, #0
    b6ee:	d00f      	beq.n	b710 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b6f0:	693b      	ldr	r3, [r7, #16]
    b6f2:	681b      	ldr	r3, [r3, #0]
    b6f4:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b6f6:	6938      	ldr	r0, [r7, #16]
    b6f8:	4b0b      	ldr	r3, [pc, #44]	; (b728 <n25q256a_disable_xip+0x84>)
    b6fa:	4798      	blx	r3
			n25q->pin_exit_xip();
    b6fc:	697b      	ldr	r3, [r7, #20]
    b6fe:	689b      	ldr	r3, [r3, #8]
    b700:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b702:	68b9      	ldr	r1, [r7, #8]
    b704:	6938      	ldr	r0, [r7, #16]
    b706:	4b09      	ldr	r3, [pc, #36]	; (b72c <n25q256a_disable_xip+0x88>)
    b708:	4798      	blx	r3
			qspi_sync_enable(descr);
    b70a:	6938      	ldr	r0, [r7, #16]
    b70c:	4b08      	ldr	r3, [pc, #32]	; (b730 <n25q256a_disable_xip+0x8c>)
    b70e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b710:	697b      	ldr	r3, [r7, #20]
    b712:	2200      	movs	r2, #0
    b714:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b716:	2300      	movs	r3, #0
}
    b718:	4618      	mov	r0, r3
    b71a:	3718      	adds	r7, #24
    b71c:	46bd      	mov	sp, r7
    b71e:	bd80      	pop	{r7, pc}
    b720:	0000aeb5 	.word	0x0000aeb5
    b724:	0000af81 	.word	0x0000af81
    b728:	00002321 	.word	0x00002321
    b72c:	00002299 	.word	0x00002299
    b730:	000022e5 	.word	0x000022e5

0000b734 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b734:	b480      	push	{r7}
    b736:	b085      	sub	sp, #20
    b738:	af00      	add	r7, sp, #0
    b73a:	60f8      	str	r0, [r7, #12]
    b73c:	60b9      	str	r1, [r7, #8]
    b73e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b740:	68fb      	ldr	r3, [r7, #12]
    b742:	68ba      	ldr	r2, [r7, #8]
    b744:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b746:	68fb      	ldr	r3, [r7, #12]
    b748:	687a      	ldr	r2, [r7, #4]
    b74a:	605a      	str	r2, [r3, #4]

	return me;
    b74c:	68fb      	ldr	r3, [r7, #12]
}
    b74e:	4618      	mov	r0, r3
    b750:	3714      	adds	r7, #20
    b752:	46bd      	mov	sp, r7
    b754:	f85d 7b04 	ldr.w	r7, [sp], #4
    b758:	4770      	bx	lr

0000b75a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b75a:	b480      	push	{r7}
    b75c:	b083      	sub	sp, #12
    b75e:	af00      	add	r7, sp, #0
    b760:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	781b      	ldrb	r3, [r3, #0]
    b766:	b29a      	uxth	r2, r3
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	3301      	adds	r3, #1
    b76c:	781b      	ldrb	r3, [r3, #0]
    b76e:	b29b      	uxth	r3, r3
    b770:	021b      	lsls	r3, r3, #8
    b772:	b29b      	uxth	r3, r3
    b774:	4413      	add	r3, r2
    b776:	b29b      	uxth	r3, r3
}
    b778:	4618      	mov	r0, r3
    b77a:	370c      	adds	r7, #12
    b77c:	46bd      	mov	sp, r7
    b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b782:	4770      	bx	lr

0000b784 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b784:	b480      	push	{r7}
    b786:	b083      	sub	sp, #12
    b788:	af00      	add	r7, sp, #0
    b78a:	6078      	str	r0, [r7, #4]
	return desc[0];
    b78c:	687b      	ldr	r3, [r7, #4]
    b78e:	781b      	ldrb	r3, [r3, #0]
}
    b790:	4618      	mov	r0, r3
    b792:	370c      	adds	r7, #12
    b794:	46bd      	mov	sp, r7
    b796:	f85d 7b04 	ldr.w	r7, [sp], #4
    b79a:	4770      	bx	lr

0000b79c <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b79c:	b580      	push	{r7, lr}
    b79e:	b082      	sub	sp, #8
    b7a0:	af00      	add	r7, sp, #0
    b7a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b7a4:	6878      	ldr	r0, [r7, #4]
    b7a6:	4b05      	ldr	r3, [pc, #20]	; (b7bc <usb_desc_next+0x20>)
    b7a8:	4798      	blx	r3
    b7aa:	4603      	mov	r3, r0
    b7ac:	461a      	mov	r2, r3
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	4413      	add	r3, r2
}
    b7b2:	4618      	mov	r0, r3
    b7b4:	3708      	adds	r7, #8
    b7b6:	46bd      	mov	sp, r7
    b7b8:	bd80      	pop	{r7, pc}
    b7ba:	bf00      	nop
    b7bc:	0000b785 	.word	0x0000b785

0000b7c0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b7c0:	b580      	push	{r7, lr}
    b7c2:	b08c      	sub	sp, #48	; 0x30
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	6078      	str	r0, [r7, #4]
    b7c8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b7ca:	687b      	ldr	r3, [r7, #4]
    b7cc:	689b      	ldr	r3, [r3, #8]
    b7ce:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b7d0:	683b      	ldr	r3, [r7, #0]
    b7d2:	681b      	ldr	r3, [r3, #0]
    b7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b7d6:	2300      	movs	r3, #0
    b7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b7dc:	e08f      	b.n	b8fe <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d102      	bne.n	b7ea <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b7e4:	f06f 0309 	mvn.w	r3, #9
    b7e8:	e092      	b.n	b910 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7ec:	789b      	ldrb	r3, [r3, #2]
    b7ee:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7f2:	795b      	ldrb	r3, [r3, #5]
    b7f4:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b7f6:	7c7b      	ldrb	r3, [r7, #17]
    b7f8:	2b02      	cmp	r3, #2
    b7fa:	d002      	beq.n	b802 <cdcdf_acm_enable+0x42>
    b7fc:	7c7b      	ldrb	r3, [r7, #17]
    b7fe:	2b0a      	cmp	r3, #10
    b800:	d121      	bne.n	b846 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b806:	6a3a      	ldr	r2, [r7, #32]
    b808:	5cd2      	ldrb	r2, [r2, r3]
    b80a:	7bbb      	ldrb	r3, [r7, #14]
    b80c:	429a      	cmp	r2, r3
    b80e:	d102      	bne.n	b816 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b810:	f06f 0311 	mvn.w	r3, #17
    b814:	e07c      	b.n	b910 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b81a:	6a3a      	ldr	r2, [r7, #32]
    b81c:	5cd3      	ldrb	r3, [r2, r3]
    b81e:	2bff      	cmp	r3, #255	; 0xff
    b820:	d002      	beq.n	b828 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b822:	f06f 031b 	mvn.w	r3, #27
    b826:	e073      	b.n	b910 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b82c:	7bb9      	ldrb	r1, [r7, #14]
    b82e:	6a3a      	ldr	r2, [r7, #32]
    b830:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b832:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b834:	683b      	ldr	r3, [r7, #0]
    b836:	685b      	ldr	r3, [r3, #4]
    b838:	2205      	movs	r2, #5
    b83a:	4619      	mov	r1, r3
    b83c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b83e:	4b36      	ldr	r3, [pc, #216]	; (b918 <cdcdf_acm_enable+0x158>)
    b840:	4798      	blx	r3
    b842:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b844:	e047      	b.n	b8d6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b846:	f06f 0309 	mvn.w	r3, #9
    b84a:	e061      	b.n	b910 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b84e:	789b      	ldrb	r3, [r3, #2]
    b850:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b854:	78db      	ldrb	r3, [r3, #3]
    b856:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b85a:	3304      	adds	r3, #4
    b85c:	4618      	mov	r0, r3
    b85e:	4b2f      	ldr	r3, [pc, #188]	; (b91c <cdcdf_acm_enable+0x15c>)
    b860:	4798      	blx	r3
    b862:	4603      	mov	r3, r0
    b864:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b866:	7ebb      	ldrb	r3, [r7, #26]
    b868:	7ef9      	ldrb	r1, [r7, #27]
    b86a:	8bba      	ldrh	r2, [r7, #28]
    b86c:	4618      	mov	r0, r3
    b86e:	4b2c      	ldr	r3, [pc, #176]	; (b920 <cdcdf_acm_enable+0x160>)
    b870:	4798      	blx	r3
    b872:	4603      	mov	r3, r0
    b874:	2b00      	cmp	r3, #0
    b876:	d002      	beq.n	b87e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b878:	f06f 0313 	mvn.w	r3, #19
    b87c:	e048      	b.n	b910 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b87e:	7ebb      	ldrb	r3, [r7, #26]
    b880:	b25b      	sxtb	r3, r3
    b882:	2b00      	cmp	r3, #0
    b884:	da0f      	bge.n	b8a6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b88a:	7eb9      	ldrb	r1, [r7, #26]
    b88c:	6a3a      	ldr	r2, [r7, #32]
    b88e:	4413      	add	r3, r2
    b890:	460a      	mov	r2, r1
    b892:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b898:	6a3a      	ldr	r2, [r7, #32]
    b89a:	4413      	add	r3, r2
    b89c:	789b      	ldrb	r3, [r3, #2]
    b89e:	4618      	mov	r0, r3
    b8a0:	4b20      	ldr	r3, [pc, #128]	; (b924 <cdcdf_acm_enable+0x164>)
    b8a2:	4798      	blx	r3
    b8a4:	e007      	b.n	b8b6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b8a6:	7eba      	ldrb	r2, [r7, #26]
    b8a8:	6a3b      	ldr	r3, [r7, #32]
    b8aa:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b8ac:	6a3b      	ldr	r3, [r7, #32]
    b8ae:	791b      	ldrb	r3, [r3, #4]
    b8b0:	4618      	mov	r0, r3
    b8b2:	4b1c      	ldr	r3, [pc, #112]	; (b924 <cdcdf_acm_enable+0x164>)
    b8b4:	4798      	blx	r3
			}
			desc->sod = ep;
    b8b6:	683b      	ldr	r3, [r7, #0]
    b8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b8ba:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b8bc:	683b      	ldr	r3, [r7, #0]
    b8be:	681b      	ldr	r3, [r3, #0]
    b8c0:	4618      	mov	r0, r3
    b8c2:	4b19      	ldr	r3, [pc, #100]	; (b928 <cdcdf_acm_enable+0x168>)
    b8c4:	4798      	blx	r3
    b8c6:	4602      	mov	r2, r0
    b8c8:	683b      	ldr	r3, [r7, #0]
    b8ca:	685b      	ldr	r3, [r3, #4]
    b8cc:	4619      	mov	r1, r3
    b8ce:	4610      	mov	r0, r2
    b8d0:	4b16      	ldr	r3, [pc, #88]	; (b92c <cdcdf_acm_enable+0x16c>)
    b8d2:	4798      	blx	r3
    b8d4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d1b7      	bne.n	b84c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b8dc:	683b      	ldr	r3, [r7, #0]
    b8de:	681b      	ldr	r3, [r3, #0]
    b8e0:	4618      	mov	r0, r3
    b8e2:	4b11      	ldr	r3, [pc, #68]	; (b928 <cdcdf_acm_enable+0x168>)
    b8e4:	4798      	blx	r3
    b8e6:	683b      	ldr	r3, [r7, #0]
    b8e8:	685b      	ldr	r3, [r3, #4]
    b8ea:	2204      	movs	r2, #4
    b8ec:	4619      	mov	r1, r3
    b8ee:	4b0a      	ldr	r3, [pc, #40]	; (b918 <cdcdf_acm_enable+0x158>)
    b8f0:	4798      	blx	r3
    b8f2:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b8f8:	3301      	adds	r3, #1
    b8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b8fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b902:	2b01      	cmp	r3, #1
    b904:	f67f af6b 	bls.w	b7de <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b908:	4b09      	ldr	r3, [pc, #36]	; (b930 <cdcdf_acm_enable+0x170>)
    b90a:	2201      	movs	r2, #1
    b90c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b90e:	2300      	movs	r3, #0
}
    b910:	4618      	mov	r0, r3
    b912:	3730      	adds	r7, #48	; 0x30
    b914:	46bd      	mov	sp, r7
    b916:	bd80      	pop	{r7, pc}
    b918:	0000cb81 	.word	0x0000cb81
    b91c:	0000b75b 	.word	0x0000b75b
    b920:	00002f11 	.word	0x00002f11
    b924:	00002ffd 	.word	0x00002ffd
    b928:	0000b79d 	.word	0x0000b79d
    b92c:	0000cbdd 	.word	0x0000cbdd
    b930:	20000f94 	.word	0x20000f94

0000b934 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b934:	b580      	push	{r7, lr}
    b936:	b088      	sub	sp, #32
    b938:	af00      	add	r7, sp, #0
    b93a:	6078      	str	r0, [r7, #4]
    b93c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b93e:	687b      	ldr	r3, [r7, #4]
    b940:	689b      	ldr	r3, [r3, #8]
    b942:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b944:	683b      	ldr	r3, [r7, #0]
    b946:	2b00      	cmp	r3, #0
    b948:	d00c      	beq.n	b964 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b94a:	683b      	ldr	r3, [r7, #0]
    b94c:	681b      	ldr	r3, [r3, #0]
    b94e:	795b      	ldrb	r3, [r3, #5]
    b950:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b952:	7c7b      	ldrb	r3, [r7, #17]
    b954:	2b02      	cmp	r3, #2
    b956:	d005      	beq.n	b964 <cdcdf_acm_disable+0x30>
    b958:	7c7b      	ldrb	r3, [r7, #17]
    b95a:	2b0a      	cmp	r3, #10
    b95c:	d002      	beq.n	b964 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b95e:	f06f 0309 	mvn.w	r3, #9
    b962:	e035      	b.n	b9d0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b964:	2300      	movs	r3, #0
    b966:	77fb      	strb	r3, [r7, #31]
    b968:	e01f      	b.n	b9aa <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b96a:	7ffb      	ldrb	r3, [r7, #31]
    b96c:	69ba      	ldr	r2, [r7, #24]
    b96e:	5cd3      	ldrb	r3, [r2, r3]
    b970:	2bff      	cmp	r3, #255	; 0xff
    b972:	d016      	beq.n	b9a2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b974:	7ffb      	ldrb	r3, [r7, #31]
    b976:	69ba      	ldr	r2, [r7, #24]
    b978:	21ff      	movs	r1, #255	; 0xff
    b97a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b97c:	7ffb      	ldrb	r3, [r7, #31]
    b97e:	69ba      	ldr	r2, [r7, #24]
    b980:	4413      	add	r3, r2
    b982:	789b      	ldrb	r3, [r3, #2]
    b984:	2bff      	cmp	r3, #255	; 0xff
    b986:	d00d      	beq.n	b9a4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b988:	7ffb      	ldrb	r3, [r7, #31]
    b98a:	69ba      	ldr	r2, [r7, #24]
    b98c:	4413      	add	r3, r2
    b98e:	789b      	ldrb	r3, [r3, #2]
    b990:	4618      	mov	r0, r3
    b992:	4b11      	ldr	r3, [pc, #68]	; (b9d8 <cdcdf_acm_disable+0xa4>)
    b994:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b996:	7ffb      	ldrb	r3, [r7, #31]
    b998:	69ba      	ldr	r2, [r7, #24]
    b99a:	4413      	add	r3, r2
    b99c:	22ff      	movs	r2, #255	; 0xff
    b99e:	709a      	strb	r2, [r3, #2]
    b9a0:	e000      	b.n	b9a4 <cdcdf_acm_disable+0x70>
			continue;
    b9a2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b9a4:	7ffb      	ldrb	r3, [r7, #31]
    b9a6:	3301      	adds	r3, #1
    b9a8:	77fb      	strb	r3, [r7, #31]
    b9aa:	7ffb      	ldrb	r3, [r7, #31]
    b9ac:	2b01      	cmp	r3, #1
    b9ae:	d9dc      	bls.n	b96a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b9b0:	69bb      	ldr	r3, [r7, #24]
    b9b2:	791b      	ldrb	r3, [r3, #4]
    b9b4:	2bff      	cmp	r3, #255	; 0xff
    b9b6:	d007      	beq.n	b9c8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b9b8:	69bb      	ldr	r3, [r7, #24]
    b9ba:	791b      	ldrb	r3, [r3, #4]
    b9bc:	4618      	mov	r0, r3
    b9be:	4b06      	ldr	r3, [pc, #24]	; (b9d8 <cdcdf_acm_disable+0xa4>)
    b9c0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b9c2:	69bb      	ldr	r3, [r7, #24]
    b9c4:	22ff      	movs	r2, #255	; 0xff
    b9c6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b9c8:	4b04      	ldr	r3, [pc, #16]	; (b9dc <cdcdf_acm_disable+0xa8>)
    b9ca:	2200      	movs	r2, #0
    b9cc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b9ce:	2300      	movs	r3, #0
}
    b9d0:	4618      	mov	r0, r3
    b9d2:	3720      	adds	r7, #32
    b9d4:	46bd      	mov	sp, r7
    b9d6:	bd80      	pop	{r7, pc}
    b9d8:	00002fad 	.word	0x00002fad
    b9dc:	20000f94 	.word	0x20000f94

0000b9e0 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b9e0:	b580      	push	{r7, lr}
    b9e2:	b084      	sub	sp, #16
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	60f8      	str	r0, [r7, #12]
    b9e8:	460b      	mov	r3, r1
    b9ea:	607a      	str	r2, [r7, #4]
    b9ec:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b9ee:	7afb      	ldrb	r3, [r7, #11]
    b9f0:	2b01      	cmp	r3, #1
    b9f2:	d009      	beq.n	ba08 <cdcdf_acm_ctrl+0x28>
    b9f4:	2b02      	cmp	r3, #2
    b9f6:	d00d      	beq.n	ba14 <cdcdf_acm_ctrl+0x34>
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d10e      	bne.n	ba1a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b9fc:	6879      	ldr	r1, [r7, #4]
    b9fe:	68f8      	ldr	r0, [r7, #12]
    ba00:	4b09      	ldr	r3, [pc, #36]	; (ba28 <cdcdf_acm_ctrl+0x48>)
    ba02:	4798      	blx	r3
    ba04:	4603      	mov	r3, r0
    ba06:	e00a      	b.n	ba1e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    ba08:	6879      	ldr	r1, [r7, #4]
    ba0a:	68f8      	ldr	r0, [r7, #12]
    ba0c:	4b07      	ldr	r3, [pc, #28]	; (ba2c <cdcdf_acm_ctrl+0x4c>)
    ba0e:	4798      	blx	r3
    ba10:	4603      	mov	r3, r0
    ba12:	e004      	b.n	ba1e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    ba14:	f06f 031a 	mvn.w	r3, #26
    ba18:	e001      	b.n	ba1e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    ba1a:	f06f 030c 	mvn.w	r3, #12
	}
}
    ba1e:	4618      	mov	r0, r3
    ba20:	3710      	adds	r7, #16
    ba22:	46bd      	mov	sp, r7
    ba24:	bd80      	pop	{r7, pc}
    ba26:	bf00      	nop
    ba28:	0000b7c1 	.word	0x0000b7c1
    ba2c:	0000b935 	.word	0x0000b935

0000ba30 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ba30:	b590      	push	{r4, r7, lr}
    ba32:	b087      	sub	sp, #28
    ba34:	af00      	add	r7, sp, #0
    ba36:	4603      	mov	r3, r0
    ba38:	6039      	str	r1, [r7, #0]
    ba3a:	71fb      	strb	r3, [r7, #7]
    ba3c:	4613      	mov	r3, r2
    ba3e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    ba40:	683b      	ldr	r3, [r7, #0]
    ba42:	799a      	ldrb	r2, [r3, #6]
    ba44:	79db      	ldrb	r3, [r3, #7]
    ba46:	021b      	lsls	r3, r3, #8
    ba48:	4313      	orrs	r3, r2
    ba4a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ba4c:	4b2b      	ldr	r3, [pc, #172]	; (bafc <cdcdf_acm_set_req+0xcc>)
    ba4e:	4798      	blx	r3
    ba50:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    ba52:	683b      	ldr	r3, [r7, #0]
    ba54:	785b      	ldrb	r3, [r3, #1]
    ba56:	2b20      	cmp	r3, #32
    ba58:	d002      	beq.n	ba60 <cdcdf_acm_set_req+0x30>
    ba5a:	2b22      	cmp	r3, #34	; 0x22
    ba5c:	d034      	beq.n	bac8 <cdcdf_acm_set_req+0x98>
    ba5e:	e046      	b.n	baee <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ba60:	8afb      	ldrh	r3, [r7, #22]
    ba62:	2b07      	cmp	r3, #7
    ba64:	d002      	beq.n	ba6c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    ba66:	f04f 33ff 	mov.w	r3, #4294967295
    ba6a:	e042      	b.n	baf2 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    ba6c:	79bb      	ldrb	r3, [r7, #6]
    ba6e:	2b00      	cmp	r3, #0
    ba70:	d107      	bne.n	ba82 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    ba72:	8afa      	ldrh	r2, [r7, #22]
    ba74:	79f8      	ldrb	r0, [r7, #7]
    ba76:	2300      	movs	r3, #0
    ba78:	6939      	ldr	r1, [r7, #16]
    ba7a:	4c21      	ldr	r4, [pc, #132]	; (bb00 <cdcdf_acm_set_req+0xd0>)
    ba7c:	47a0      	blx	r4
    ba7e:	4603      	mov	r3, r0
    ba80:	e037      	b.n	baf2 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ba82:	693a      	ldr	r2, [r7, #16]
    ba84:	f107 0308 	add.w	r3, r7, #8
    ba88:	6810      	ldr	r0, [r2, #0]
    ba8a:	6018      	str	r0, [r3, #0]
    ba8c:	8891      	ldrh	r1, [r2, #4]
    ba8e:	7992      	ldrb	r2, [r2, #6]
    ba90:	8099      	strh	r1, [r3, #4]
    ba92:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ba94:	4b1b      	ldr	r3, [pc, #108]	; (bb04 <cdcdf_acm_set_req+0xd4>)
    ba96:	681b      	ldr	r3, [r3, #0]
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d008      	beq.n	baae <cdcdf_acm_set_req+0x7e>
    ba9c:	4b19      	ldr	r3, [pc, #100]	; (bb04 <cdcdf_acm_set_req+0xd4>)
    ba9e:	681b      	ldr	r3, [r3, #0]
    baa0:	f107 0208 	add.w	r2, r7, #8
    baa4:	4610      	mov	r0, r2
    baa6:	4798      	blx	r3
    baa8:	4603      	mov	r3, r0
    baaa:	2b00      	cmp	r3, #0
    baac:	d00a      	beq.n	bac4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    baae:	4b16      	ldr	r3, [pc, #88]	; (bb08 <cdcdf_acm_set_req+0xd8>)
    bab0:	f107 0208 	add.w	r2, r7, #8
    bab4:	e892 0003 	ldmia.w	r2, {r0, r1}
    bab8:	6018      	str	r0, [r3, #0]
    baba:	3304      	adds	r3, #4
    babc:	8019      	strh	r1, [r3, #0]
    babe:	3302      	adds	r3, #2
    bac0:	0c0a      	lsrs	r2, r1, #16
    bac2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    bac4:	2300      	movs	r3, #0
    bac6:	e014      	b.n	baf2 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    bac8:	2300      	movs	r3, #0
    baca:	2200      	movs	r2, #0
    bacc:	2100      	movs	r1, #0
    bace:	2000      	movs	r0, #0
    bad0:	4c0b      	ldr	r4, [pc, #44]	; (bb00 <cdcdf_acm_set_req+0xd0>)
    bad2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bad4:	4b0d      	ldr	r3, [pc, #52]	; (bb0c <cdcdf_acm_set_req+0xdc>)
    bad6:	681b      	ldr	r3, [r3, #0]
    bad8:	2b00      	cmp	r3, #0
    bada:	d006      	beq.n	baea <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    badc:	4b0b      	ldr	r3, [pc, #44]	; (bb0c <cdcdf_acm_set_req+0xdc>)
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	683a      	ldr	r2, [r7, #0]
    bae2:	8852      	ldrh	r2, [r2, #2]
    bae4:	b292      	uxth	r2, r2
    bae6:	4610      	mov	r0, r2
    bae8:	4798      	blx	r3
		}
		return ERR_NONE;
    baea:	2300      	movs	r3, #0
    baec:	e001      	b.n	baf2 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    baee:	f06f 030c 	mvn.w	r3, #12
	}
}
    baf2:	4618      	mov	r0, r3
    baf4:	371c      	adds	r7, #28
    baf6:	46bd      	mov	sp, r7
    baf8:	bd90      	pop	{r4, r7, pc}
    bafa:	bf00      	nop
    bafc:	0000ca7d 	.word	0x0000ca7d
    bb00:	0000c8f1 	.word	0x0000c8f1
    bb04:	20000fa8 	.word	0x20000fa8
    bb08:	20000f9c 	.word	0x20000f9c
    bb0c:	20000fa4 	.word	0x20000fa4

0000bb10 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bb10:	b590      	push	{r4, r7, lr}
    bb12:	b085      	sub	sp, #20
    bb14:	af00      	add	r7, sp, #0
    bb16:	4603      	mov	r3, r0
    bb18:	6039      	str	r1, [r7, #0]
    bb1a:	71fb      	strb	r3, [r7, #7]
    bb1c:	4613      	mov	r3, r2
    bb1e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bb20:	683b      	ldr	r3, [r7, #0]
    bb22:	799a      	ldrb	r2, [r3, #6]
    bb24:	79db      	ldrb	r3, [r3, #7]
    bb26:	021b      	lsls	r3, r3, #8
    bb28:	4313      	orrs	r3, r2
    bb2a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    bb2c:	79bb      	ldrb	r3, [r7, #6]
    bb2e:	2b01      	cmp	r3, #1
    bb30:	d101      	bne.n	bb36 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    bb32:	2300      	movs	r3, #0
    bb34:	e013      	b.n	bb5e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bb36:	683b      	ldr	r3, [r7, #0]
    bb38:	785b      	ldrb	r3, [r3, #1]
    bb3a:	2b21      	cmp	r3, #33	; 0x21
    bb3c:	d10d      	bne.n	bb5a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bb3e:	89fb      	ldrh	r3, [r7, #14]
    bb40:	2b07      	cmp	r3, #7
    bb42:	d002      	beq.n	bb4a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bb44:	f04f 33ff 	mov.w	r3, #4294967295
    bb48:	e009      	b.n	bb5e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bb4a:	89fa      	ldrh	r2, [r7, #14]
    bb4c:	79f8      	ldrb	r0, [r7, #7]
    bb4e:	2300      	movs	r3, #0
    bb50:	4905      	ldr	r1, [pc, #20]	; (bb68 <cdcdf_acm_get_req+0x58>)
    bb52:	4c06      	ldr	r4, [pc, #24]	; (bb6c <cdcdf_acm_get_req+0x5c>)
    bb54:	47a0      	blx	r4
    bb56:	4603      	mov	r3, r0
    bb58:	e001      	b.n	bb5e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bb5a:	f06f 030c 	mvn.w	r3, #12
	}
}
    bb5e:	4618      	mov	r0, r3
    bb60:	3714      	adds	r7, #20
    bb62:	46bd      	mov	sp, r7
    bb64:	bd90      	pop	{r4, r7, pc}
    bb66:	bf00      	nop
    bb68:	20000f9c 	.word	0x20000f9c
    bb6c:	0000c8f1 	.word	0x0000c8f1

0000bb70 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b082      	sub	sp, #8
    bb74:	af00      	add	r7, sp, #0
    bb76:	4603      	mov	r3, r0
    bb78:	6039      	str	r1, [r7, #0]
    bb7a:	71fb      	strb	r3, [r7, #7]
    bb7c:	4613      	mov	r3, r2
    bb7e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bb80:	683b      	ldr	r3, [r7, #0]
    bb82:	781b      	ldrb	r3, [r3, #0]
    bb84:	095b      	lsrs	r3, r3, #5
    bb86:	b2db      	uxtb	r3, r3
    bb88:	f003 0303 	and.w	r3, r3, #3
    bb8c:	2b01      	cmp	r3, #1
    bb8e:	d002      	beq.n	bb96 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bb90:	f06f 0309 	mvn.w	r3, #9
    bb94:	e026      	b.n	bbe4 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bb96:	683b      	ldr	r3, [r7, #0]
    bb98:	889b      	ldrh	r3, [r3, #4]
    bb9a:	b29a      	uxth	r2, r3
    bb9c:	4b13      	ldr	r3, [pc, #76]	; (bbec <cdcdf_acm_req+0x7c>)
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	b29b      	uxth	r3, r3
    bba2:	429a      	cmp	r2, r3
    bba4:	d007      	beq.n	bbb6 <cdcdf_acm_req+0x46>
    bba6:	683b      	ldr	r3, [r7, #0]
    bba8:	889b      	ldrh	r3, [r3, #4]
    bbaa:	b29a      	uxth	r2, r3
    bbac:	4b0f      	ldr	r3, [pc, #60]	; (bbec <cdcdf_acm_req+0x7c>)
    bbae:	785b      	ldrb	r3, [r3, #1]
    bbb0:	b29b      	uxth	r3, r3
    bbb2:	429a      	cmp	r2, r3
    bbb4:	d114      	bne.n	bbe0 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bbb6:	683b      	ldr	r3, [r7, #0]
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	b25b      	sxtb	r3, r3
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	da07      	bge.n	bbd0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bbc0:	79ba      	ldrb	r2, [r7, #6]
    bbc2:	79fb      	ldrb	r3, [r7, #7]
    bbc4:	6839      	ldr	r1, [r7, #0]
    bbc6:	4618      	mov	r0, r3
    bbc8:	4b09      	ldr	r3, [pc, #36]	; (bbf0 <cdcdf_acm_req+0x80>)
    bbca:	4798      	blx	r3
    bbcc:	4603      	mov	r3, r0
    bbce:	e009      	b.n	bbe4 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bbd0:	79ba      	ldrb	r2, [r7, #6]
    bbd2:	79fb      	ldrb	r3, [r7, #7]
    bbd4:	6839      	ldr	r1, [r7, #0]
    bbd6:	4618      	mov	r0, r3
    bbd8:	4b06      	ldr	r3, [pc, #24]	; (bbf4 <cdcdf_acm_req+0x84>)
    bbda:	4798      	blx	r3
    bbdc:	4603      	mov	r3, r0
    bbde:	e001      	b.n	bbe4 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bbe0:	f06f 0309 	mvn.w	r3, #9
	}
}
    bbe4:	4618      	mov	r0, r3
    bbe6:	3708      	adds	r7, #8
    bbe8:	46bd      	mov	sp, r7
    bbea:	bd80      	pop	{r7, pc}
    bbec:	20000f94 	.word	0x20000f94
    bbf0:	0000bb11 	.word	0x0000bb11
    bbf4:	0000ba31 	.word	0x0000ba31

0000bbf8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bbf8:	b580      	push	{r7, lr}
    bbfa:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bbfc:	4b0b      	ldr	r3, [pc, #44]	; (bc2c <cdcdf_acm_init+0x34>)
    bbfe:	4798      	blx	r3
    bc00:	4603      	mov	r3, r0
    bc02:	2b01      	cmp	r3, #1
    bc04:	d902      	bls.n	bc0c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bc06:	f06f 0310 	mvn.w	r3, #16
    bc0a:	e00d      	b.n	bc28 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bc0c:	4b08      	ldr	r3, [pc, #32]	; (bc30 <cdcdf_acm_init+0x38>)
    bc0e:	4a09      	ldr	r2, [pc, #36]	; (bc34 <cdcdf_acm_init+0x3c>)
    bc10:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bc12:	4b07      	ldr	r3, [pc, #28]	; (bc30 <cdcdf_acm_init+0x38>)
    bc14:	4a08      	ldr	r2, [pc, #32]	; (bc38 <cdcdf_acm_init+0x40>)
    bc16:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bc18:	4805      	ldr	r0, [pc, #20]	; (bc30 <cdcdf_acm_init+0x38>)
    bc1a:	4b08      	ldr	r3, [pc, #32]	; (bc3c <cdcdf_acm_init+0x44>)
    bc1c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bc1e:	4908      	ldr	r1, [pc, #32]	; (bc40 <cdcdf_acm_init+0x48>)
    bc20:	2001      	movs	r0, #1
    bc22:	4b08      	ldr	r3, [pc, #32]	; (bc44 <cdcdf_acm_init+0x4c>)
    bc24:	4798      	blx	r3
	return ERR_NONE;
    bc26:	2300      	movs	r3, #0
}
    bc28:	4618      	mov	r0, r3
    bc2a:	bd80      	pop	{r7, pc}
    bc2c:	0000ca95 	.word	0x0000ca95
    bc30:	20000f88 	.word	0x20000f88
    bc34:	0000b9e1 	.word	0x0000b9e1
    bc38:	20000f94 	.word	0x20000f94
    bc3c:	0000c9fd 	.word	0x0000c9fd
    bc40:	20000208 	.word	0x20000208
    bc44:	0000c92d 	.word	0x0000c92d

0000bc48 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bc48:	b590      	push	{r4, r7, lr}
    bc4a:	b083      	sub	sp, #12
    bc4c:	af00      	add	r7, sp, #0
    bc4e:	6078      	str	r0, [r7, #4]
    bc50:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bc52:	4b0b      	ldr	r3, [pc, #44]	; (bc80 <cdcdf_acm_read+0x38>)
    bc54:	4798      	blx	r3
    bc56:	4603      	mov	r3, r0
    bc58:	f083 0301 	eor.w	r3, r3, #1
    bc5c:	b2db      	uxtb	r3, r3
    bc5e:	2b00      	cmp	r3, #0
    bc60:	d002      	beq.n	bc68 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bc62:	f06f 0310 	mvn.w	r3, #16
    bc66:	e007      	b.n	bc78 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bc68:	4b06      	ldr	r3, [pc, #24]	; (bc84 <cdcdf_acm_read+0x3c>)
    bc6a:	7918      	ldrb	r0, [r3, #4]
    bc6c:	2300      	movs	r3, #0
    bc6e:	683a      	ldr	r2, [r7, #0]
    bc70:	6879      	ldr	r1, [r7, #4]
    bc72:	4c05      	ldr	r4, [pc, #20]	; (bc88 <cdcdf_acm_read+0x40>)
    bc74:	47a0      	blx	r4
    bc76:	4603      	mov	r3, r0
}
    bc78:	4618      	mov	r0, r3
    bc7a:	370c      	adds	r7, #12
    bc7c:	46bd      	mov	sp, r7
    bc7e:	bd90      	pop	{r4, r7, pc}
    bc80:	0000bd6d 	.word	0x0000bd6d
    bc84:	20000f94 	.word	0x20000f94
    bc88:	0000c8f1 	.word	0x0000c8f1

0000bc8c <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bc8c:	b590      	push	{r4, r7, lr}
    bc8e:	b083      	sub	sp, #12
    bc90:	af00      	add	r7, sp, #0
    bc92:	6078      	str	r0, [r7, #4]
    bc94:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bc96:	4b0b      	ldr	r3, [pc, #44]	; (bcc4 <cdcdf_acm_write+0x38>)
    bc98:	4798      	blx	r3
    bc9a:	4603      	mov	r3, r0
    bc9c:	f083 0301 	eor.w	r3, r3, #1
    bca0:	b2db      	uxtb	r3, r3
    bca2:	2b00      	cmp	r3, #0
    bca4:	d002      	beq.n	bcac <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    bca6:	f06f 0310 	mvn.w	r3, #16
    bcaa:	e007      	b.n	bcbc <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bcac:	4b06      	ldr	r3, [pc, #24]	; (bcc8 <cdcdf_acm_write+0x3c>)
    bcae:	78d8      	ldrb	r0, [r3, #3]
    bcb0:	2301      	movs	r3, #1
    bcb2:	683a      	ldr	r2, [r7, #0]
    bcb4:	6879      	ldr	r1, [r7, #4]
    bcb6:	4c05      	ldr	r4, [pc, #20]	; (bccc <cdcdf_acm_write+0x40>)
    bcb8:	47a0      	blx	r4
    bcba:	4603      	mov	r3, r0
}
    bcbc:	4618      	mov	r0, r3
    bcbe:	370c      	adds	r7, #12
    bcc0:	46bd      	mov	sp, r7
    bcc2:	bd90      	pop	{r4, r7, pc}
    bcc4:	0000bd6d 	.word	0x0000bd6d
    bcc8:	20000f94 	.word	0x20000f94
    bccc:	0000c8f1 	.word	0x0000c8f1

0000bcd0 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    bcd0:	b580      	push	{r7, lr}
    bcd2:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bcd4:	4b05      	ldr	r3, [pc, #20]	; (bcec <cdcdf_acm_stop_xfer+0x1c>)
    bcd6:	78db      	ldrb	r3, [r3, #3]
    bcd8:	4618      	mov	r0, r3
    bcda:	4b05      	ldr	r3, [pc, #20]	; (bcf0 <cdcdf_acm_stop_xfer+0x20>)
    bcdc:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bcde:	4b03      	ldr	r3, [pc, #12]	; (bcec <cdcdf_acm_stop_xfer+0x1c>)
    bce0:	791b      	ldrb	r3, [r3, #4]
    bce2:	4618      	mov	r0, r3
    bce4:	4b02      	ldr	r3, [pc, #8]	; (bcf0 <cdcdf_acm_stop_xfer+0x20>)
    bce6:	4798      	blx	r3
}
    bce8:	bf00      	nop
    bcea:	bd80      	pop	{r7, pc}
    bcec:	20000f94 	.word	0x20000f94
    bcf0:	000031d5 	.word	0x000031d5

0000bcf4 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    bcf4:	b580      	push	{r7, lr}
    bcf6:	b082      	sub	sp, #8
    bcf8:	af00      	add	r7, sp, #0
    bcfa:	4603      	mov	r3, r0
    bcfc:	6039      	str	r1, [r7, #0]
    bcfe:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    bd00:	79fb      	ldrb	r3, [r7, #7]
    bd02:	2b03      	cmp	r3, #3
    bd04:	d822      	bhi.n	bd4c <cdcdf_acm_register_callback+0x58>
    bd06:	a201      	add	r2, pc, #4	; (adr r2, bd0c <cdcdf_acm_register_callback+0x18>)
    bd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd0c:	0000bd1d 	.word	0x0000bd1d
    bd10:	0000bd2d 	.word	0x0000bd2d
    bd14:	0000bd3d 	.word	0x0000bd3d
    bd18:	0000bd45 	.word	0x0000bd45
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bd1c:	4b0f      	ldr	r3, [pc, #60]	; (bd5c <cdcdf_acm_register_callback+0x68>)
    bd1e:	791b      	ldrb	r3, [r3, #4]
    bd20:	683a      	ldr	r2, [r7, #0]
    bd22:	2102      	movs	r1, #2
    bd24:	4618      	mov	r0, r3
    bd26:	4b0e      	ldr	r3, [pc, #56]	; (bd60 <cdcdf_acm_register_callback+0x6c>)
    bd28:	4798      	blx	r3
		break;
    bd2a:	e012      	b.n	bd52 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bd2c:	4b0b      	ldr	r3, [pc, #44]	; (bd5c <cdcdf_acm_register_callback+0x68>)
    bd2e:	78db      	ldrb	r3, [r3, #3]
    bd30:	683a      	ldr	r2, [r7, #0]
    bd32:	2102      	movs	r1, #2
    bd34:	4618      	mov	r0, r3
    bd36:	4b0a      	ldr	r3, [pc, #40]	; (bd60 <cdcdf_acm_register_callback+0x6c>)
    bd38:	4798      	blx	r3
		break;
    bd3a:	e00a      	b.n	bd52 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bd3c:	4a09      	ldr	r2, [pc, #36]	; (bd64 <cdcdf_acm_register_callback+0x70>)
    bd3e:	683b      	ldr	r3, [r7, #0]
    bd40:	6013      	str	r3, [r2, #0]
		break;
    bd42:	e006      	b.n	bd52 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bd44:	4a08      	ldr	r2, [pc, #32]	; (bd68 <cdcdf_acm_register_callback+0x74>)
    bd46:	683b      	ldr	r3, [r7, #0]
    bd48:	6013      	str	r3, [r2, #0]
		break;
    bd4a:	e002      	b.n	bd52 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    bd4c:	f06f 030c 	mvn.w	r3, #12
    bd50:	e000      	b.n	bd54 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    bd52:	2300      	movs	r3, #0
}
    bd54:	4618      	mov	r0, r3
    bd56:	3708      	adds	r7, #8
    bd58:	46bd      	mov	sp, r7
    bd5a:	bd80      	pop	{r7, pc}
    bd5c:	20000f94 	.word	0x20000f94
    bd60:	00003301 	.word	0x00003301
    bd64:	20000fa8 	.word	0x20000fa8
    bd68:	20000fa4 	.word	0x20000fa4

0000bd6c <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    bd6c:	b480      	push	{r7}
    bd6e:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    bd70:	4b03      	ldr	r3, [pc, #12]	; (bd80 <cdcdf_acm_is_enabled+0x14>)
    bd72:	795b      	ldrb	r3, [r3, #5]
}
    bd74:	4618      	mov	r0, r3
    bd76:	46bd      	mov	sp, r7
    bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd7c:	4770      	bx	lr
    bd7e:	bf00      	nop
    bd80:	20000f94 	.word	0x20000f94

0000bd84 <usb_get_u16>:
{
    bd84:	b480      	push	{r7}
    bd86:	b083      	sub	sp, #12
    bd88:	af00      	add	r7, sp, #0
    bd8a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bd8c:	687b      	ldr	r3, [r7, #4]
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	b29a      	uxth	r2, r3
    bd92:	687b      	ldr	r3, [r7, #4]
    bd94:	3301      	adds	r3, #1
    bd96:	781b      	ldrb	r3, [r3, #0]
    bd98:	b29b      	uxth	r3, r3
    bd9a:	021b      	lsls	r3, r3, #8
    bd9c:	b29b      	uxth	r3, r3
    bd9e:	4413      	add	r3, r2
    bda0:	b29b      	uxth	r3, r3
}
    bda2:	4618      	mov	r0, r3
    bda4:	370c      	adds	r7, #12
    bda6:	46bd      	mov	sp, r7
    bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdac:	4770      	bx	lr

0000bdae <usb_desc_len>:
{
    bdae:	b480      	push	{r7}
    bdb0:	b083      	sub	sp, #12
    bdb2:	af00      	add	r7, sp, #0
    bdb4:	6078      	str	r0, [r7, #4]
	return desc[0];
    bdb6:	687b      	ldr	r3, [r7, #4]
    bdb8:	781b      	ldrb	r3, [r3, #0]
}
    bdba:	4618      	mov	r0, r3
    bdbc:	370c      	adds	r7, #12
    bdbe:	46bd      	mov	sp, r7
    bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdc4:	4770      	bx	lr
	...

0000bdc8 <usb_desc_next>:
{
    bdc8:	b580      	push	{r7, lr}
    bdca:	b082      	sub	sp, #8
    bdcc:	af00      	add	r7, sp, #0
    bdce:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bdd0:	6878      	ldr	r0, [r7, #4]
    bdd2:	4b05      	ldr	r3, [pc, #20]	; (bde8 <usb_desc_next+0x20>)
    bdd4:	4798      	blx	r3
    bdd6:	4603      	mov	r3, r0
    bdd8:	461a      	mov	r2, r3
    bdda:	687b      	ldr	r3, [r7, #4]
    bddc:	4413      	add	r3, r2
}
    bdde:	4618      	mov	r0, r3
    bde0:	3708      	adds	r7, #8
    bde2:	46bd      	mov	sp, r7
    bde4:	bd80      	pop	{r7, pc}
    bde6:	bf00      	nop
    bde8:	0000bdaf 	.word	0x0000bdaf

0000bdec <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    bdec:	b580      	push	{r7, lr}
    bdee:	b082      	sub	sp, #8
    bdf0:	af00      	add	r7, sp, #0
    bdf2:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	3302      	adds	r3, #2
    bdf8:	4618      	mov	r0, r3
    bdfa:	4b03      	ldr	r3, [pc, #12]	; (be08 <usb_cfg_desc_total_len+0x1c>)
    bdfc:	4798      	blx	r3
    bdfe:	4603      	mov	r3, r0
}
    be00:	4618      	mov	r0, r3
    be02:	3708      	adds	r7, #8
    be04:	46bd      	mov	sp, r7
    be06:	bd80      	pop	{r7, pc}
    be08:	0000bd85 	.word	0x0000bd85

0000be0c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    be0c:	b590      	push	{r4, r7, lr}
    be0e:	b085      	sub	sp, #20
    be10:	af00      	add	r7, sp, #0
    be12:	4603      	mov	r3, r0
    be14:	6039      	str	r1, [r7, #0]
    be16:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    be18:	2300      	movs	r3, #0
    be1a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    be1c:	683b      	ldr	r3, [r7, #0]
    be1e:	799a      	ldrb	r2, [r3, #6]
    be20:	79db      	ldrb	r3, [r3, #7]
    be22:	021b      	lsls	r3, r3, #8
    be24:	4313      	orrs	r3, r2
    be26:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    be28:	897b      	ldrh	r3, [r7, #10]
    be2a:	2b12      	cmp	r3, #18
    be2c:	d901      	bls.n	be32 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    be2e:	2312      	movs	r3, #18
    be30:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    be32:	68fb      	ldr	r3, [r7, #12]
    be34:	2b00      	cmp	r3, #0
    be36:	d10a      	bne.n	be4e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    be38:	4b0f      	ldr	r3, [pc, #60]	; (be78 <usbdc_get_dev_desc+0x6c>)
    be3a:	681b      	ldr	r3, [r3, #0]
    be3c:	6818      	ldr	r0, [r3, #0]
    be3e:	4b0e      	ldr	r3, [pc, #56]	; (be78 <usbdc_get_dev_desc+0x6c>)
    be40:	681b      	ldr	r3, [r3, #0]
    be42:	685b      	ldr	r3, [r3, #4]
    be44:	2201      	movs	r2, #1
    be46:	4619      	mov	r1, r3
    be48:	4b0c      	ldr	r3, [pc, #48]	; (be7c <usbdc_get_dev_desc+0x70>)
    be4a:	4798      	blx	r3
    be4c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    be4e:	68fb      	ldr	r3, [r7, #12]
    be50:	2b00      	cmp	r3, #0
    be52:	d101      	bne.n	be58 <usbdc_get_dev_desc+0x4c>
		return false;
    be54:	2300      	movs	r3, #0
    be56:	e00b      	b.n	be70 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    be58:	897a      	ldrh	r2, [r7, #10]
    be5a:	79f8      	ldrb	r0, [r7, #7]
    be5c:	2300      	movs	r3, #0
    be5e:	68f9      	ldr	r1, [r7, #12]
    be60:	4c07      	ldr	r4, [pc, #28]	; (be80 <usbdc_get_dev_desc+0x74>)
    be62:	47a0      	blx	r4
    be64:	4603      	mov	r3, r0
    be66:	2b00      	cmp	r3, #0
    be68:	d001      	beq.n	be6e <usbdc_get_dev_desc+0x62>
		return false;
    be6a:	2300      	movs	r3, #0
    be6c:	e000      	b.n	be70 <usbdc_get_dev_desc+0x64>
	}
	return true;
    be6e:	2301      	movs	r3, #1
}
    be70:	4618      	mov	r0, r3
    be72:	3714      	adds	r7, #20
    be74:	46bd      	mov	sp, r7
    be76:	bd90      	pop	{r4, r7, pc}
    be78:	20000fac 	.word	0x20000fac
    be7c:	0000cb81 	.word	0x0000cb81
    be80:	0000c8f1 	.word	0x0000c8f1

0000be84 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    be84:	b590      	push	{r4, r7, lr}
    be86:	b087      	sub	sp, #28
    be88:	af00      	add	r7, sp, #0
    be8a:	4603      	mov	r3, r0
    be8c:	6039      	str	r1, [r7, #0]
    be8e:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    be90:	2300      	movs	r3, #0
    be92:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    be94:	683b      	ldr	r3, [r7, #0]
    be96:	799a      	ldrb	r2, [r3, #6]
    be98:	79db      	ldrb	r3, [r3, #7]
    be9a:	021b      	lsls	r3, r3, #8
    be9c:	4313      	orrs	r3, r2
    be9e:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    bea0:	683b      	ldr	r3, [r7, #0]
    bea2:	885b      	ldrh	r3, [r3, #2]
    bea4:	b29b      	uxth	r3, r3
    bea6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bea8:	8a7a      	ldrh	r2, [r7, #18]
    beaa:	4b1e      	ldr	r3, [pc, #120]	; (bf24 <usbdc_get_cfg_desc+0xa0>)
    beac:	7f1b      	ldrb	r3, [r3, #28]
    beae:	3b01      	subs	r3, #1
    beb0:	4013      	ands	r3, r2
    beb2:	2b00      	cmp	r3, #0
    beb4:	bf0c      	ite	eq
    beb6:	2301      	moveq	r3, #1
    beb8:	2300      	movne	r3, #0
    beba:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bebc:	697b      	ldr	r3, [r7, #20]
    bebe:	2b00      	cmp	r3, #0
    bec0:	d10c      	bne.n	bedc <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    bec2:	4b18      	ldr	r3, [pc, #96]	; (bf24 <usbdc_get_cfg_desc+0xa0>)
    bec4:	681b      	ldr	r3, [r3, #0]
    bec6:	6818      	ldr	r0, [r3, #0]
    bec8:	4b16      	ldr	r3, [pc, #88]	; (bf24 <usbdc_get_cfg_desc+0xa0>)
    beca:	681b      	ldr	r3, [r3, #0]
    becc:	6859      	ldr	r1, [r3, #4]
    bece:	7c3b      	ldrb	r3, [r7, #16]
    bed0:	3301      	adds	r3, #1
    bed2:	b2db      	uxtb	r3, r3
    bed4:	461a      	mov	r2, r3
    bed6:	4b14      	ldr	r3, [pc, #80]	; (bf28 <usbdc_get_cfg_desc+0xa4>)
    bed8:	4798      	blx	r3
    beda:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    bedc:	697b      	ldr	r3, [r7, #20]
    bede:	2b00      	cmp	r3, #0
    bee0:	d101      	bne.n	bee6 <usbdc_get_cfg_desc+0x62>
		return false;
    bee2:	2300      	movs	r3, #0
    bee4:	e019      	b.n	bf1a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    bee6:	6978      	ldr	r0, [r7, #20]
    bee8:	4b10      	ldr	r3, [pc, #64]	; (bf2c <usbdc_get_cfg_desc+0xa8>)
    beea:	4798      	blx	r3
    beec:	4603      	mov	r3, r0
    beee:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    bef0:	8a7a      	ldrh	r2, [r7, #18]
    bef2:	89fb      	ldrh	r3, [r7, #14]
    bef4:	429a      	cmp	r2, r3
    bef6:	d802      	bhi.n	befe <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    bef8:	2300      	movs	r3, #0
    befa:	747b      	strb	r3, [r7, #17]
    befc:	e001      	b.n	bf02 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    befe:	89fb      	ldrh	r3, [r7, #14]
    bf00:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    bf02:	8a7a      	ldrh	r2, [r7, #18]
    bf04:	7c7b      	ldrb	r3, [r7, #17]
    bf06:	79f8      	ldrb	r0, [r7, #7]
    bf08:	6979      	ldr	r1, [r7, #20]
    bf0a:	4c09      	ldr	r4, [pc, #36]	; (bf30 <usbdc_get_cfg_desc+0xac>)
    bf0c:	47a0      	blx	r4
    bf0e:	4603      	mov	r3, r0
    bf10:	2b00      	cmp	r3, #0
    bf12:	d001      	beq.n	bf18 <usbdc_get_cfg_desc+0x94>
		return false;
    bf14:	2300      	movs	r3, #0
    bf16:	e000      	b.n	bf1a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    bf18:	2301      	movs	r3, #1
}
    bf1a:	4618      	mov	r0, r3
    bf1c:	371c      	adds	r7, #28
    bf1e:	46bd      	mov	sp, r7
    bf20:	bd90      	pop	{r4, r7, pc}
    bf22:	bf00      	nop
    bf24:	20000fac 	.word	0x20000fac
    bf28:	0000cc41 	.word	0x0000cc41
    bf2c:	0000bded 	.word	0x0000bded
    bf30:	0000c8f1 	.word	0x0000c8f1

0000bf34 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    bf34:	b590      	push	{r4, r7, lr}
    bf36:	b085      	sub	sp, #20
    bf38:	af00      	add	r7, sp, #0
    bf3a:	4603      	mov	r3, r0
    bf3c:	6039      	str	r1, [r7, #0]
    bf3e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    bf40:	683b      	ldr	r3, [r7, #0]
    bf42:	799a      	ldrb	r2, [r3, #6]
    bf44:	79db      	ldrb	r3, [r3, #7]
    bf46:	021b      	lsls	r3, r3, #8
    bf48:	4313      	orrs	r3, r2
    bf4a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    bf4c:	683b      	ldr	r3, [r7, #0]
    bf4e:	885b      	ldrh	r3, [r3, #2]
    bf50:	b29b      	uxth	r3, r3
    bf52:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bf54:	89fa      	ldrh	r2, [r7, #14]
    bf56:	4b1a      	ldr	r3, [pc, #104]	; (bfc0 <usbdc_get_str_desc+0x8c>)
    bf58:	7f1b      	ldrb	r3, [r3, #28]
    bf5a:	3b01      	subs	r3, #1
    bf5c:	4013      	ands	r3, r2
    bf5e:	2b00      	cmp	r3, #0
    bf60:	bf0c      	ite	eq
    bf62:	2301      	moveq	r3, #1
    bf64:	2300      	movne	r3, #0
    bf66:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    bf68:	4b15      	ldr	r3, [pc, #84]	; (bfc0 <usbdc_get_str_desc+0x8c>)
    bf6a:	681b      	ldr	r3, [r3, #0]
    bf6c:	6818      	ldr	r0, [r3, #0]
    bf6e:	4b14      	ldr	r3, [pc, #80]	; (bfc0 <usbdc_get_str_desc+0x8c>)
    bf70:	681b      	ldr	r3, [r3, #0]
    bf72:	685b      	ldr	r3, [r3, #4]
    bf74:	7b3a      	ldrb	r2, [r7, #12]
    bf76:	4619      	mov	r1, r3
    bf78:	4b12      	ldr	r3, [pc, #72]	; (bfc4 <usbdc_get_str_desc+0x90>)
    bf7a:	4798      	blx	r3
    bf7c:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    bf7e:	68bb      	ldr	r3, [r7, #8]
    bf80:	2b00      	cmp	r3, #0
    bf82:	d101      	bne.n	bf88 <usbdc_get_str_desc+0x54>
		return false;
    bf84:	2300      	movs	r3, #0
    bf86:	e017      	b.n	bfb8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    bf88:	68bb      	ldr	r3, [r7, #8]
    bf8a:	781b      	ldrb	r3, [r3, #0]
    bf8c:	b29b      	uxth	r3, r3
    bf8e:	89fa      	ldrh	r2, [r7, #14]
    bf90:	429a      	cmp	r2, r3
    bf92:	d802      	bhi.n	bf9a <usbdc_get_str_desc+0x66>
		need_zlp = false;
    bf94:	2300      	movs	r3, #0
    bf96:	737b      	strb	r3, [r7, #13]
    bf98:	e002      	b.n	bfa0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    bf9a:	68bb      	ldr	r3, [r7, #8]
    bf9c:	781b      	ldrb	r3, [r3, #0]
    bf9e:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bfa0:	89fa      	ldrh	r2, [r7, #14]
    bfa2:	7b7b      	ldrb	r3, [r7, #13]
    bfa4:	79f8      	ldrb	r0, [r7, #7]
    bfa6:	68b9      	ldr	r1, [r7, #8]
    bfa8:	4c07      	ldr	r4, [pc, #28]	; (bfc8 <usbdc_get_str_desc+0x94>)
    bfaa:	47a0      	blx	r4
    bfac:	4603      	mov	r3, r0
    bfae:	2b00      	cmp	r3, #0
    bfb0:	d001      	beq.n	bfb6 <usbdc_get_str_desc+0x82>
		return false;
    bfb2:	2300      	movs	r3, #0
    bfb4:	e000      	b.n	bfb8 <usbdc_get_str_desc+0x84>
	}
	return true;
    bfb6:	2301      	movs	r3, #1
}
    bfb8:	4618      	mov	r0, r3
    bfba:	3714      	adds	r7, #20
    bfbc:	46bd      	mov	sp, r7
    bfbe:	bd90      	pop	{r4, r7, pc}
    bfc0:	20000fac 	.word	0x20000fac
    bfc4:	0000ccb9 	.word	0x0000ccb9
    bfc8:	0000c8f1 	.word	0x0000c8f1

0000bfcc <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    bfcc:	b580      	push	{r7, lr}
    bfce:	b084      	sub	sp, #16
    bfd0:	af00      	add	r7, sp, #0
    bfd2:	4603      	mov	r3, r0
    bfd4:	6039      	str	r1, [r7, #0]
    bfd6:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    bfd8:	683b      	ldr	r3, [r7, #0]
    bfda:	885b      	ldrh	r3, [r3, #2]
    bfdc:	b29b      	uxth	r3, r3
    bfde:	0a1b      	lsrs	r3, r3, #8
    bfe0:	b29b      	uxth	r3, r3
    bfe2:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    bfe4:	7bfb      	ldrb	r3, [r7, #15]
    bfe6:	2b02      	cmp	r3, #2
    bfe8:	d00d      	beq.n	c006 <usbdc_get_desc_req+0x3a>
    bfea:	2b03      	cmp	r3, #3
    bfec:	d012      	beq.n	c014 <usbdc_get_desc_req+0x48>
    bfee:	2b01      	cmp	r3, #1
    bff0:	d002      	beq.n	bff8 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    bff2:	bf00      	nop
	}
	return false;
    bff4:	2300      	movs	r3, #0
    bff6:	e013      	b.n	c020 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    bff8:	79fb      	ldrb	r3, [r7, #7]
    bffa:	6839      	ldr	r1, [r7, #0]
    bffc:	4618      	mov	r0, r3
    bffe:	4b0a      	ldr	r3, [pc, #40]	; (c028 <usbdc_get_desc_req+0x5c>)
    c000:	4798      	blx	r3
    c002:	4603      	mov	r3, r0
    c004:	e00c      	b.n	c020 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c006:	79fb      	ldrb	r3, [r7, #7]
    c008:	6839      	ldr	r1, [r7, #0]
    c00a:	4618      	mov	r0, r3
    c00c:	4b07      	ldr	r3, [pc, #28]	; (c02c <usbdc_get_desc_req+0x60>)
    c00e:	4798      	blx	r3
    c010:	4603      	mov	r3, r0
    c012:	e005      	b.n	c020 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c014:	79fb      	ldrb	r3, [r7, #7]
    c016:	6839      	ldr	r1, [r7, #0]
    c018:	4618      	mov	r0, r3
    c01a:	4b05      	ldr	r3, [pc, #20]	; (c030 <usbdc_get_desc_req+0x64>)
    c01c:	4798      	blx	r3
    c01e:	4603      	mov	r3, r0
}
    c020:	4618      	mov	r0, r3
    c022:	3710      	adds	r7, #16
    c024:	46bd      	mov	sp, r7
    c026:	bd80      	pop	{r7, pc}
    c028:	0000be0d 	.word	0x0000be0d
    c02c:	0000be85 	.word	0x0000be85
    c030:	0000bf35 	.word	0x0000bf35

0000c034 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c034:	b590      	push	{r4, r7, lr}
    c036:	b085      	sub	sp, #20
    c038:	af00      	add	r7, sp, #0
    c03a:	4603      	mov	r3, r0
    c03c:	6039      	str	r1, [r7, #0]
    c03e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c040:	683b      	ldr	r3, [r7, #0]
    c042:	781b      	ldrb	r3, [r3, #0]
    c044:	f003 031f 	and.w	r3, r3, #31
    c048:	2b00      	cmp	r3, #0
    c04a:	db1b      	blt.n	c084 <usbdc_get_status_req+0x50>
    c04c:	2b01      	cmp	r3, #1
    c04e:	dd02      	ble.n	c056 <usbdc_get_status_req+0x22>
    c050:	2b02      	cmp	r3, #2
    c052:	d003      	beq.n	c05c <usbdc_get_status_req+0x28>
    c054:	e016      	b.n	c084 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c056:	2300      	movs	r3, #0
    c058:	60fb      	str	r3, [r7, #12]
		break;
    c05a:	e015      	b.n	c088 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c05c:	683b      	ldr	r3, [r7, #0]
    c05e:	889b      	ldrh	r3, [r3, #4]
    c060:	b29b      	uxth	r3, r3
    c062:	b2db      	uxtb	r3, r3
    c064:	2102      	movs	r1, #2
    c066:	4618      	mov	r0, r3
    c068:	4b0f      	ldr	r3, [pc, #60]	; (c0a8 <usbdc_get_status_req+0x74>)
    c06a:	4798      	blx	r3
    c06c:	4603      	mov	r3, r0
    c06e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c070:	68fb      	ldr	r3, [r7, #12]
    c072:	2b00      	cmp	r3, #0
    c074:	da01      	bge.n	c07a <usbdc_get_status_req+0x46>
			return false;
    c076:	2300      	movs	r3, #0
    c078:	e012      	b.n	c0a0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c07a:	68fb      	ldr	r3, [r7, #12]
    c07c:	f003 0301 	and.w	r3, r3, #1
    c080:	60fb      	str	r3, [r7, #12]
		break;
    c082:	e001      	b.n	c088 <usbdc_get_status_req+0x54>
	default:
		return false;
    c084:	2300      	movs	r3, #0
    c086:	e00b      	b.n	c0a0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c088:	4b08      	ldr	r3, [pc, #32]	; (c0ac <usbdc_get_status_req+0x78>)
    c08a:	695b      	ldr	r3, [r3, #20]
    c08c:	89ba      	ldrh	r2, [r7, #12]
    c08e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c090:	4b06      	ldr	r3, [pc, #24]	; (c0ac <usbdc_get_status_req+0x78>)
    c092:	6959      	ldr	r1, [r3, #20]
    c094:	79f8      	ldrb	r0, [r7, #7]
    c096:	2300      	movs	r3, #0
    c098:	2202      	movs	r2, #2
    c09a:	4c05      	ldr	r4, [pc, #20]	; (c0b0 <usbdc_get_status_req+0x7c>)
    c09c:	47a0      	blx	r4
	return true;
    c09e:	2301      	movs	r3, #1
}
    c0a0:	4618      	mov	r0, r3
    c0a2:	3714      	adds	r7, #20
    c0a4:	46bd      	mov	sp, r7
    c0a6:	bd90      	pop	{r4, r7, pc}
    c0a8:	000032ad 	.word	0x000032ad
    c0ac:	20000fac 	.word	0x20000fac
    c0b0:	0000c8f1 	.word	0x0000c8f1

0000c0b4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c0b4:	b590      	push	{r4, r7, lr}
    c0b6:	b085      	sub	sp, #20
    c0b8:	af00      	add	r7, sp, #0
    c0ba:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c0bc:	4b1f      	ldr	r3, [pc, #124]	; (c13c <usbdc_get_interface+0x88>)
    c0be:	691b      	ldr	r3, [r3, #16]
    c0c0:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c0c2:	4b1e      	ldr	r3, [pc, #120]	; (c13c <usbdc_get_interface+0x88>)
    c0c4:	7f5b      	ldrb	r3, [r3, #29]
    c0c6:	461a      	mov	r2, r3
    c0c8:	687b      	ldr	r3, [r7, #4]
    c0ca:	889b      	ldrh	r3, [r3, #4]
    c0cc:	b29b      	uxth	r3, r3
    c0ce:	fa42 f303 	asr.w	r3, r2, r3
    c0d2:	f003 0301 	and.w	r3, r3, #1
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	d128      	bne.n	c12c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c0da:	4b18      	ldr	r3, [pc, #96]	; (c13c <usbdc_get_interface+0x88>)
    c0dc:	695b      	ldr	r3, [r3, #20]
    c0de:	2200      	movs	r2, #0
    c0e0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c0e2:	4b16      	ldr	r3, [pc, #88]	; (c13c <usbdc_get_interface+0x88>)
    c0e4:	6959      	ldr	r1, [r3, #20]
    c0e6:	2300      	movs	r3, #0
    c0e8:	2201      	movs	r2, #1
    c0ea:	2000      	movs	r0, #0
    c0ec:	4c14      	ldr	r4, [pc, #80]	; (c140 <usbdc_get_interface+0x8c>)
    c0ee:	47a0      	blx	r4
		return true;
    c0f0:	2301      	movs	r3, #1
    c0f2:	e01f      	b.n	c134 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c0f4:	68fb      	ldr	r3, [r7, #12]
    c0f6:	685b      	ldr	r3, [r3, #4]
    c0f8:	687a      	ldr	r2, [r7, #4]
    c0fa:	2102      	movs	r1, #2
    c0fc:	68f8      	ldr	r0, [r7, #12]
    c0fe:	4798      	blx	r3
    c100:	60b8      	str	r0, [r7, #8]
    c102:	68bb      	ldr	r3, [r7, #8]
    c104:	2b00      	cmp	r3, #0
    c106:	da03      	bge.n	c110 <usbdc_get_interface+0x5c>
			func = func->next;
    c108:	68fb      	ldr	r3, [r7, #12]
    c10a:	681b      	ldr	r3, [r3, #0]
    c10c:	60fb      	str	r3, [r7, #12]
    c10e:	e00d      	b.n	c12c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c110:	4b0a      	ldr	r3, [pc, #40]	; (c13c <usbdc_get_interface+0x88>)
    c112:	695b      	ldr	r3, [r3, #20]
    c114:	68ba      	ldr	r2, [r7, #8]
    c116:	b2d2      	uxtb	r2, r2
    c118:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c11a:	4b08      	ldr	r3, [pc, #32]	; (c13c <usbdc_get_interface+0x88>)
    c11c:	6959      	ldr	r1, [r3, #20]
    c11e:	2300      	movs	r3, #0
    c120:	2201      	movs	r2, #1
    c122:	2000      	movs	r0, #0
    c124:	4c06      	ldr	r4, [pc, #24]	; (c140 <usbdc_get_interface+0x8c>)
    c126:	47a0      	blx	r4
			return true;
    c128:	2301      	movs	r3, #1
    c12a:	e003      	b.n	c134 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c12c:	68fb      	ldr	r3, [r7, #12]
    c12e:	2b00      	cmp	r3, #0
    c130:	d1e0      	bne.n	c0f4 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c132:	2300      	movs	r3, #0
}
    c134:	4618      	mov	r0, r3
    c136:	3714      	adds	r7, #20
    c138:	46bd      	mov	sp, r7
    c13a:	bd90      	pop	{r4, r7, pc}
    c13c:	20000fac 	.word	0x20000fac
    c140:	0000c8f1 	.word	0x0000c8f1

0000c144 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c144:	b590      	push	{r4, r7, lr}
    c146:	b083      	sub	sp, #12
    c148:	af00      	add	r7, sp, #0
    c14a:	4603      	mov	r3, r0
    c14c:	6039      	str	r1, [r7, #0]
    c14e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c150:	683b      	ldr	r3, [r7, #0]
    c152:	785b      	ldrb	r3, [r3, #1]
    c154:	2b0a      	cmp	r3, #10
    c156:	d83a      	bhi.n	c1ce <usbdc_get_req+0x8a>
    c158:	a201      	add	r2, pc, #4	; (adr r2, c160 <usbdc_get_req+0x1c>)
    c15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c15e:	bf00      	nop
    c160:	0000c1b7 	.word	0x0000c1b7
    c164:	0000c1cf 	.word	0x0000c1cf
    c168:	0000c1cf 	.word	0x0000c1cf
    c16c:	0000c1cf 	.word	0x0000c1cf
    c170:	0000c1cf 	.word	0x0000c1cf
    c174:	0000c1cf 	.word	0x0000c1cf
    c178:	0000c18d 	.word	0x0000c18d
    c17c:	0000c1cf 	.word	0x0000c1cf
    c180:	0000c19b 	.word	0x0000c19b
    c184:	0000c1cf 	.word	0x0000c1cf
    c188:	0000c1c5 	.word	0x0000c1c5
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c18c:	79fb      	ldrb	r3, [r7, #7]
    c18e:	6839      	ldr	r1, [r7, #0]
    c190:	4618      	mov	r0, r3
    c192:	4b11      	ldr	r3, [pc, #68]	; (c1d8 <usbdc_get_req+0x94>)
    c194:	4798      	blx	r3
    c196:	4603      	mov	r3, r0
    c198:	e01a      	b.n	c1d0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c19a:	4b10      	ldr	r3, [pc, #64]	; (c1dc <usbdc_get_req+0x98>)
    c19c:	695b      	ldr	r3, [r3, #20]
    c19e:	4a0f      	ldr	r2, [pc, #60]	; (c1dc <usbdc_get_req+0x98>)
    c1a0:	7ed2      	ldrb	r2, [r2, #27]
    c1a2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c1a4:	4b0d      	ldr	r3, [pc, #52]	; (c1dc <usbdc_get_req+0x98>)
    c1a6:	6959      	ldr	r1, [r3, #20]
    c1a8:	79f8      	ldrb	r0, [r7, #7]
    c1aa:	2300      	movs	r3, #0
    c1ac:	2201      	movs	r2, #1
    c1ae:	4c0c      	ldr	r4, [pc, #48]	; (c1e0 <usbdc_get_req+0x9c>)
    c1b0:	47a0      	blx	r4
		return true;
    c1b2:	2301      	movs	r3, #1
    c1b4:	e00c      	b.n	c1d0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c1b6:	79fb      	ldrb	r3, [r7, #7]
    c1b8:	6839      	ldr	r1, [r7, #0]
    c1ba:	4618      	mov	r0, r3
    c1bc:	4b09      	ldr	r3, [pc, #36]	; (c1e4 <usbdc_get_req+0xa0>)
    c1be:	4798      	blx	r3
    c1c0:	4603      	mov	r3, r0
    c1c2:	e005      	b.n	c1d0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c1c4:	6838      	ldr	r0, [r7, #0]
    c1c6:	4b08      	ldr	r3, [pc, #32]	; (c1e8 <usbdc_get_req+0xa4>)
    c1c8:	4798      	blx	r3
    c1ca:	4603      	mov	r3, r0
    c1cc:	e000      	b.n	c1d0 <usbdc_get_req+0x8c>
	default:
		return false;
    c1ce:	2300      	movs	r3, #0
	}
}
    c1d0:	4618      	mov	r0, r3
    c1d2:	370c      	adds	r7, #12
    c1d4:	46bd      	mov	sp, r7
    c1d6:	bd90      	pop	{r4, r7, pc}
    c1d8:	0000bfcd 	.word	0x0000bfcd
    c1dc:	20000fac 	.word	0x20000fac
    c1e0:	0000c8f1 	.word	0x0000c8f1
    c1e4:	0000c035 	.word	0x0000c035
    c1e8:	0000c0b5 	.word	0x0000c0b5

0000c1ec <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c1ec:	b590      	push	{r4, r7, lr}
    c1ee:	b083      	sub	sp, #12
    c1f0:	af00      	add	r7, sp, #0
    c1f2:	4603      	mov	r3, r0
    c1f4:	6039      	str	r1, [r7, #0]
    c1f6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c1f8:	683b      	ldr	r3, [r7, #0]
    c1fa:	781b      	ldrb	r3, [r3, #0]
    c1fc:	f003 031f 	and.w	r3, r3, #31
    c200:	2b02      	cmp	r3, #2
    c202:	d116      	bne.n	c232 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c204:	683b      	ldr	r3, [r7, #0]
    c206:	88db      	ldrh	r3, [r3, #6]
    c208:	b29b      	uxth	r3, r3
    c20a:	2b00      	cmp	r3, #0
    c20c:	d001      	beq.n	c212 <usbdc_clear_ftr_req+0x26>
			return false;
    c20e:	2300      	movs	r3, #0
    c210:	e010      	b.n	c234 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c212:	683b      	ldr	r3, [r7, #0]
    c214:	889b      	ldrh	r3, [r3, #4]
    c216:	b29b      	uxth	r3, r3
    c218:	b2db      	uxtb	r3, r3
    c21a:	2100      	movs	r1, #0
    c21c:	4618      	mov	r0, r3
    c21e:	4b07      	ldr	r3, [pc, #28]	; (c23c <usbdc_clear_ftr_req+0x50>)
    c220:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c222:	79f8      	ldrb	r0, [r7, #7]
    c224:	2301      	movs	r3, #1
    c226:	2200      	movs	r2, #0
    c228:	2100      	movs	r1, #0
    c22a:	4c05      	ldr	r4, [pc, #20]	; (c240 <usbdc_clear_ftr_req+0x54>)
    c22c:	47a0      	blx	r4
		return true;
    c22e:	2301      	movs	r3, #1
    c230:	e000      	b.n	c234 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c232:	2300      	movs	r3, #0
	}
}
    c234:	4618      	mov	r0, r3
    c236:	370c      	adds	r7, #12
    c238:	46bd      	mov	sp, r7
    c23a:	bd90      	pop	{r4, r7, pc}
    c23c:	000032ad 	.word	0x000032ad
    c240:	0000c8f1 	.word	0x0000c8f1

0000c244 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c244:	b590      	push	{r4, r7, lr}
    c246:	b083      	sub	sp, #12
    c248:	af00      	add	r7, sp, #0
    c24a:	4603      	mov	r3, r0
    c24c:	6039      	str	r1, [r7, #0]
    c24e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c250:	683b      	ldr	r3, [r7, #0]
    c252:	781b      	ldrb	r3, [r3, #0]
    c254:	f003 031f 	and.w	r3, r3, #31
    c258:	2b02      	cmp	r3, #2
    c25a:	d116      	bne.n	c28a <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c25c:	683b      	ldr	r3, [r7, #0]
    c25e:	88db      	ldrh	r3, [r3, #6]
    c260:	b29b      	uxth	r3, r3
    c262:	2b00      	cmp	r3, #0
    c264:	d001      	beq.n	c26a <usbdc_set_ftr_req+0x26>
			return false;
    c266:	2300      	movs	r3, #0
    c268:	e010      	b.n	c28c <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c26a:	683b      	ldr	r3, [r7, #0]
    c26c:	889b      	ldrh	r3, [r3, #4]
    c26e:	b29b      	uxth	r3, r3
    c270:	b2db      	uxtb	r3, r3
    c272:	2101      	movs	r1, #1
    c274:	4618      	mov	r0, r3
    c276:	4b07      	ldr	r3, [pc, #28]	; (c294 <usbdc_set_ftr_req+0x50>)
    c278:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c27a:	79f8      	ldrb	r0, [r7, #7]
    c27c:	2301      	movs	r3, #1
    c27e:	2200      	movs	r2, #0
    c280:	2100      	movs	r1, #0
    c282:	4c05      	ldr	r4, [pc, #20]	; (c298 <usbdc_set_ftr_req+0x54>)
    c284:	47a0      	blx	r4
		return true;
    c286:	2301      	movs	r3, #1
    c288:	e000      	b.n	c28c <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c28a:	2300      	movs	r3, #0
	}
}
    c28c:	4618      	mov	r0, r3
    c28e:	370c      	adds	r7, #12
    c290:	46bd      	mov	sp, r7
    c292:	bd90      	pop	{r4, r7, pc}
    c294:	000032ad 	.word	0x000032ad
    c298:	0000c8f1 	.word	0x0000c8f1

0000c29c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c29c:	b580      	push	{r7, lr}
    c29e:	b082      	sub	sp, #8
    c2a0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c2a2:	4b0a      	ldr	r3, [pc, #40]	; (c2cc <usbdc_unconfig+0x30>)
    c2a4:	691b      	ldr	r3, [r3, #16]
    c2a6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c2a8:	e008      	b.n	c2bc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c2aa:	687b      	ldr	r3, [r7, #4]
    c2ac:	685b      	ldr	r3, [r3, #4]
    c2ae:	2200      	movs	r2, #0
    c2b0:	2101      	movs	r1, #1
    c2b2:	6878      	ldr	r0, [r7, #4]
    c2b4:	4798      	blx	r3
		func = func->next;
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	681b      	ldr	r3, [r3, #0]
    c2ba:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c2bc:	687b      	ldr	r3, [r7, #4]
    c2be:	2b00      	cmp	r3, #0
    c2c0:	d1f3      	bne.n	c2aa <usbdc_unconfig+0xe>
	}
}
    c2c2:	bf00      	nop
    c2c4:	3708      	adds	r7, #8
    c2c6:	46bd      	mov	sp, r7
    c2c8:	bd80      	pop	{r7, pc}
    c2ca:	bf00      	nop
    c2cc:	20000fac 	.word	0x20000fac

0000c2d0 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c2d0:	b580      	push	{r7, lr}
    c2d2:	b088      	sub	sp, #32
    c2d4:	af00      	add	r7, sp, #0
    c2d6:	4603      	mov	r3, r0
    c2d8:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c2da:	2300      	movs	r3, #0
    c2dc:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c2de:	23ff      	movs	r3, #255	; 0xff
    c2e0:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c2e2:	79fb      	ldrb	r3, [r7, #7]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d103      	bne.n	c2f0 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c2e8:	4b2e      	ldr	r3, [pc, #184]	; (c3a4 <usbdc_set_config+0xd4>)
    c2ea:	4798      	blx	r3
		return true;
    c2ec:	2301      	movs	r3, #1
    c2ee:	e055      	b.n	c39c <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c2f0:	69bb      	ldr	r3, [r7, #24]
    c2f2:	2b00      	cmp	r3, #0
    c2f4:	d10a      	bne.n	c30c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c2f6:	4b2c      	ldr	r3, [pc, #176]	; (c3a8 <usbdc_set_config+0xd8>)
    c2f8:	681b      	ldr	r3, [r3, #0]
    c2fa:	6818      	ldr	r0, [r3, #0]
    c2fc:	4b2a      	ldr	r3, [pc, #168]	; (c3a8 <usbdc_set_config+0xd8>)
    c2fe:	681b      	ldr	r3, [r3, #0]
    c300:	685b      	ldr	r3, [r3, #4]
    c302:	79fa      	ldrb	r2, [r7, #7]
    c304:	4619      	mov	r1, r3
    c306:	4b29      	ldr	r3, [pc, #164]	; (c3ac <usbdc_set_config+0xdc>)
    c308:	4798      	blx	r3
    c30a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c30c:	69bb      	ldr	r3, [r7, #24]
    c30e:	2b00      	cmp	r3, #0
    c310:	d101      	bne.n	c316 <usbdc_set_config+0x46>
		return false;
    c312:	2300      	movs	r3, #0
    c314:	e042      	b.n	c39c <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c316:	69b8      	ldr	r0, [r7, #24]
    c318:	4b25      	ldr	r3, [pc, #148]	; (c3b0 <usbdc_set_config+0xe0>)
    c31a:	4798      	blx	r3
    c31c:	4603      	mov	r3, r0
    c31e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c320:	8abb      	ldrh	r3, [r7, #20]
    c322:	69ba      	ldr	r2, [r7, #24]
    c324:	4413      	add	r3, r2
    c326:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c328:	693b      	ldr	r3, [r7, #16]
    c32a:	2204      	movs	r2, #4
    c32c:	4619      	mov	r1, r3
    c32e:	69b8      	ldr	r0, [r7, #24]
    c330:	4b20      	ldr	r3, [pc, #128]	; (c3b4 <usbdc_set_config+0xe4>)
    c332:	4798      	blx	r3
    c334:	4603      	mov	r3, r0
    c336:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c338:	e02c      	b.n	c394 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c33a:	68fb      	ldr	r3, [r7, #12]
    c33c:	3302      	adds	r3, #2
    c33e:	781b      	ldrb	r3, [r3, #0]
    c340:	7dfa      	ldrb	r2, [r7, #23]
    c342:	429a      	cmp	r2, r3
    c344:	d018      	beq.n	c378 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c346:	68fb      	ldr	r3, [r7, #12]
    c348:	789b      	ldrb	r3, [r3, #2]
    c34a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c34c:	4b16      	ldr	r3, [pc, #88]	; (c3a8 <usbdc_set_config+0xd8>)
    c34e:	691b      	ldr	r3, [r3, #16]
    c350:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c352:	e00c      	b.n	c36e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c354:	69fb      	ldr	r3, [r7, #28]
    c356:	685b      	ldr	r3, [r3, #4]
    c358:	f107 020c 	add.w	r2, r7, #12
    c35c:	2100      	movs	r1, #0
    c35e:	69f8      	ldr	r0, [r7, #28]
    c360:	4798      	blx	r3
    c362:	4603      	mov	r3, r0
    c364:	2b00      	cmp	r3, #0
    c366:	d006      	beq.n	c376 <usbdc_set_config+0xa6>
					func = func->next;
    c368:	69fb      	ldr	r3, [r7, #28]
    c36a:	681b      	ldr	r3, [r3, #0]
    c36c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c36e:	69fb      	ldr	r3, [r7, #28]
    c370:	2b00      	cmp	r3, #0
    c372:	d1ef      	bne.n	c354 <usbdc_set_config+0x84>
    c374:	e000      	b.n	c378 <usbdc_set_config+0xa8>
				} else {
					break;
    c376:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c378:	68fb      	ldr	r3, [r7, #12]
    c37a:	4618      	mov	r0, r3
    c37c:	4b0e      	ldr	r3, [pc, #56]	; (c3b8 <usbdc_set_config+0xe8>)
    c37e:	4798      	blx	r3
    c380:	4603      	mov	r3, r0
    c382:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c384:	68fb      	ldr	r3, [r7, #12]
    c386:	6939      	ldr	r1, [r7, #16]
    c388:	2204      	movs	r2, #4
    c38a:	4618      	mov	r0, r3
    c38c:	4b09      	ldr	r3, [pc, #36]	; (c3b4 <usbdc_set_config+0xe4>)
    c38e:	4798      	blx	r3
    c390:	4603      	mov	r3, r0
    c392:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c394:	68fb      	ldr	r3, [r7, #12]
    c396:	2b00      	cmp	r3, #0
    c398:	d1cf      	bne.n	c33a <usbdc_set_config+0x6a>
	}
	return true;
    c39a:	2301      	movs	r3, #1
}
    c39c:	4618      	mov	r0, r3
    c39e:	3720      	adds	r7, #32
    c3a0:	46bd      	mov	sp, r7
    c3a2:	bd80      	pop	{r7, pc}
    c3a4:	0000c29d 	.word	0x0000c29d
    c3a8:	20000fac 	.word	0x20000fac
    c3ac:	0000cc41 	.word	0x0000cc41
    c3b0:	0000bded 	.word	0x0000bded
    c3b4:	0000cb81 	.word	0x0000cb81
    c3b8:	0000bdc9 	.word	0x0000bdc9

0000c3bc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c3bc:	b580      	push	{r7, lr}
    c3be:	b082      	sub	sp, #8
    c3c0:	af00      	add	r7, sp, #0
    c3c2:	4603      	mov	r3, r0
    c3c4:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c3c6:	79fb      	ldrb	r3, [r7, #7]
    c3c8:	4618      	mov	r0, r3
    c3ca:	4b03      	ldr	r3, [pc, #12]	; (c3d8 <usbdc_set_address+0x1c>)
    c3cc:	4798      	blx	r3
}
    c3ce:	bf00      	nop
    c3d0:	3708      	adds	r7, #8
    c3d2:	46bd      	mov	sp, r7
    c3d4:	bd80      	pop	{r7, pc}
    c3d6:	bf00      	nop
    c3d8:	00002ec9 	.word	0x00002ec9

0000c3dc <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c3dc:	b590      	push	{r4, r7, lr}
    c3de:	b087      	sub	sp, #28
    c3e0:	af00      	add	r7, sp, #0
    c3e2:	4603      	mov	r3, r0
    c3e4:	460a      	mov	r2, r1
    c3e6:	80fb      	strh	r3, [r7, #6]
    c3e8:	4613      	mov	r3, r2
    c3ea:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c3ec:	2300      	movs	r3, #0
    c3ee:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c3f0:	693b      	ldr	r3, [r7, #16]
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d10b      	bne.n	c40e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c3f6:	4b43      	ldr	r3, [pc, #268]	; (c504 <usbdc_set_interface+0x128>)
    c3f8:	681b      	ldr	r3, [r3, #0]
    c3fa:	6818      	ldr	r0, [r3, #0]
    c3fc:	4b41      	ldr	r3, [pc, #260]	; (c504 <usbdc_set_interface+0x128>)
    c3fe:	681b      	ldr	r3, [r3, #0]
    c400:	6859      	ldr	r1, [r3, #4]
    c402:	4b40      	ldr	r3, [pc, #256]	; (c504 <usbdc_set_interface+0x128>)
    c404:	7edb      	ldrb	r3, [r3, #27]
    c406:	461a      	mov	r2, r3
    c408:	4b3f      	ldr	r3, [pc, #252]	; (c508 <usbdc_set_interface+0x12c>)
    c40a:	4798      	blx	r3
    c40c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c40e:	693b      	ldr	r3, [r7, #16]
    c410:	2b00      	cmp	r3, #0
    c412:	d101      	bne.n	c418 <usbdc_set_interface+0x3c>
		return false;
    c414:	2300      	movs	r3, #0
    c416:	e071      	b.n	c4fc <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c418:	693b      	ldr	r3, [r7, #16]
    c41a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c41c:	6938      	ldr	r0, [r7, #16]
    c41e:	4b3b      	ldr	r3, [pc, #236]	; (c50c <usbdc_set_interface+0x130>)
    c420:	4798      	blx	r3
    c422:	4603      	mov	r3, r0
    c424:	461a      	mov	r2, r3
    c426:	693b      	ldr	r3, [r7, #16]
    c428:	4413      	add	r3, r2
    c42a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c42c:	68bb      	ldr	r3, [r7, #8]
    c42e:	68f9      	ldr	r1, [r7, #12]
    c430:	2204      	movs	r2, #4
    c432:	4618      	mov	r0, r3
    c434:	4b36      	ldr	r3, [pc, #216]	; (c510 <usbdc_set_interface+0x134>)
    c436:	4798      	blx	r3
    c438:	6138      	str	r0, [r7, #16]
    c43a:	693b      	ldr	r3, [r7, #16]
    c43c:	2b00      	cmp	r3, #0
    c43e:	d113      	bne.n	c468 <usbdc_set_interface+0x8c>
		return false;
    c440:	2300      	movs	r3, #0
    c442:	e05b      	b.n	c4fc <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c444:	68bb      	ldr	r3, [r7, #8]
    c446:	4618      	mov	r0, r3
    c448:	4b32      	ldr	r3, [pc, #200]	; (c514 <usbdc_set_interface+0x138>)
    c44a:	4798      	blx	r3
    c44c:	4603      	mov	r3, r0
    c44e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c450:	68bb      	ldr	r3, [r7, #8]
    c452:	68f9      	ldr	r1, [r7, #12]
    c454:	2204      	movs	r2, #4
    c456:	4618      	mov	r0, r3
    c458:	4b2d      	ldr	r3, [pc, #180]	; (c510 <usbdc_set_interface+0x134>)
    c45a:	4798      	blx	r3
    c45c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c45e:	693b      	ldr	r3, [r7, #16]
    c460:	2b00      	cmp	r3, #0
    c462:	d101      	bne.n	c468 <usbdc_set_interface+0x8c>
			return false;
    c464:	2300      	movs	r3, #0
    c466:	e049      	b.n	c4fc <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c468:	693b      	ldr	r3, [r7, #16]
    c46a:	3302      	adds	r3, #2
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	b29b      	uxth	r3, r3
    c470:	88ba      	ldrh	r2, [r7, #4]
    c472:	429a      	cmp	r2, r3
    c474:	d1e6      	bne.n	c444 <usbdc_set_interface+0x68>
    c476:	693b      	ldr	r3, [r7, #16]
    c478:	3303      	adds	r3, #3
    c47a:	781b      	ldrb	r3, [r3, #0]
    c47c:	b29b      	uxth	r3, r3
    c47e:	88fa      	ldrh	r2, [r7, #6]
    c480:	429a      	cmp	r2, r3
    c482:	d1df      	bne.n	c444 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c484:	693b      	ldr	r3, [r7, #16]
    c486:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c488:	4b1e      	ldr	r3, [pc, #120]	; (c504 <usbdc_set_interface+0x128>)
    c48a:	691b      	ldr	r3, [r3, #16]
    c48c:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c48e:	e031      	b.n	c4f4 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c490:	697b      	ldr	r3, [r7, #20]
    c492:	685b      	ldr	r3, [r3, #4]
    c494:	f107 0208 	add.w	r2, r7, #8
    c498:	2101      	movs	r1, #1
    c49a:	6978      	ldr	r0, [r7, #20]
    c49c:	4798      	blx	r3
    c49e:	4603      	mov	r3, r0
    c4a0:	2b00      	cmp	r3, #0
    c4a2:	d003      	beq.n	c4ac <usbdc_set_interface+0xd0>
			func = func->next;
    c4a4:	697b      	ldr	r3, [r7, #20]
    c4a6:	681b      	ldr	r3, [r3, #0]
    c4a8:	617b      	str	r3, [r7, #20]
    c4aa:	e023      	b.n	c4f4 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c4ac:	697b      	ldr	r3, [r7, #20]
    c4ae:	685b      	ldr	r3, [r3, #4]
    c4b0:	f107 0208 	add.w	r2, r7, #8
    c4b4:	2100      	movs	r1, #0
    c4b6:	6978      	ldr	r0, [r7, #20]
    c4b8:	4798      	blx	r3
    c4ba:	4603      	mov	r3, r0
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d117      	bne.n	c4f0 <usbdc_set_interface+0x114>
			if (alt_set) {
    c4c0:	88fb      	ldrh	r3, [r7, #6]
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	d00c      	beq.n	c4e0 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c4c6:	4b0f      	ldr	r3, [pc, #60]	; (c504 <usbdc_set_interface+0x128>)
    c4c8:	7f5b      	ldrb	r3, [r3, #29]
    c4ca:	b25a      	sxtb	r2, r3
    c4cc:	88bb      	ldrh	r3, [r7, #4]
    c4ce:	2101      	movs	r1, #1
    c4d0:	fa01 f303 	lsl.w	r3, r1, r3
    c4d4:	b25b      	sxtb	r3, r3
    c4d6:	4313      	orrs	r3, r2
    c4d8:	b25b      	sxtb	r3, r3
    c4da:	b2da      	uxtb	r2, r3
    c4dc:	4b09      	ldr	r3, [pc, #36]	; (c504 <usbdc_set_interface+0x128>)
    c4de:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c4e0:	2300      	movs	r3, #0
    c4e2:	2200      	movs	r2, #0
    c4e4:	2100      	movs	r1, #0
    c4e6:	2000      	movs	r0, #0
    c4e8:	4c0b      	ldr	r4, [pc, #44]	; (c518 <usbdc_set_interface+0x13c>)
    c4ea:	47a0      	blx	r4
			return true;
    c4ec:	2301      	movs	r3, #1
    c4ee:	e005      	b.n	c4fc <usbdc_set_interface+0x120>
		} else {
			return false;
    c4f0:	2300      	movs	r3, #0
    c4f2:	e003      	b.n	c4fc <usbdc_set_interface+0x120>
	while (NULL != func) {
    c4f4:	697b      	ldr	r3, [r7, #20]
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	d1ca      	bne.n	c490 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c4fa:	2300      	movs	r3, #0
}
    c4fc:	4618      	mov	r0, r3
    c4fe:	371c      	adds	r7, #28
    c500:	46bd      	mov	sp, r7
    c502:	bd90      	pop	{r4, r7, pc}
    c504:	20000fac 	.word	0x20000fac
    c508:	0000cc41 	.word	0x0000cc41
    c50c:	0000bded 	.word	0x0000bded
    c510:	0000cb81 	.word	0x0000cb81
    c514:	0000bdc9 	.word	0x0000bdc9
    c518:	0000c8f1 	.word	0x0000c8f1

0000c51c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c51c:	b590      	push	{r4, r7, lr}
    c51e:	b083      	sub	sp, #12
    c520:	af00      	add	r7, sp, #0
    c522:	4603      	mov	r3, r0
    c524:	6039      	str	r1, [r7, #0]
    c526:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c528:	683b      	ldr	r3, [r7, #0]
    c52a:	785b      	ldrb	r3, [r3, #1]
    c52c:	3b01      	subs	r3, #1
    c52e:	2b0a      	cmp	r3, #10
    c530:	d85b      	bhi.n	c5ea <usbdc_set_req+0xce>
    c532:	a201      	add	r2, pc, #4	; (adr r2, c538 <usbdc_set_req+0x1c>)
    c534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c538:	0000c5b7 	.word	0x0000c5b7
    c53c:	0000c5eb 	.word	0x0000c5eb
    c540:	0000c5c5 	.word	0x0000c5c5
    c544:	0000c5eb 	.word	0x0000c5eb
    c548:	0000c565 	.word	0x0000c565
    c54c:	0000c5eb 	.word	0x0000c5eb
    c550:	0000c5eb 	.word	0x0000c5eb
    c554:	0000c5eb 	.word	0x0000c5eb
    c558:	0000c57f 	.word	0x0000c57f
    c55c:	0000c5eb 	.word	0x0000c5eb
    c560:	0000c5d3 	.word	0x0000c5d3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c564:	79f8      	ldrb	r0, [r7, #7]
    c566:	2301      	movs	r3, #1
    c568:	2200      	movs	r2, #0
    c56a:	2100      	movs	r1, #0
    c56c:	4c21      	ldr	r4, [pc, #132]	; (c5f4 <usbdc_set_req+0xd8>)
    c56e:	47a0      	blx	r4
    c570:	4603      	mov	r3, r0
    c572:	2b00      	cmp	r3, #0
    c574:	bf0c      	ite	eq
    c576:	2301      	moveq	r3, #1
    c578:	2300      	movne	r3, #0
    c57a:	b2db      	uxtb	r3, r3
    c57c:	e036      	b.n	c5ec <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c57e:	683b      	ldr	r3, [r7, #0]
    c580:	885b      	ldrh	r3, [r3, #2]
    c582:	b29b      	uxth	r3, r3
    c584:	b2db      	uxtb	r3, r3
    c586:	4618      	mov	r0, r3
    c588:	4b1b      	ldr	r3, [pc, #108]	; (c5f8 <usbdc_set_req+0xdc>)
    c58a:	4798      	blx	r3
    c58c:	4603      	mov	r3, r0
    c58e:	f083 0301 	eor.w	r3, r3, #1
    c592:	b2db      	uxtb	r3, r3
    c594:	2b00      	cmp	r3, #0
    c596:	d001      	beq.n	c59c <usbdc_set_req+0x80>
			return false;
    c598:	2300      	movs	r3, #0
    c59a:	e027      	b.n	c5ec <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c59c:	79f8      	ldrb	r0, [r7, #7]
    c59e:	2301      	movs	r3, #1
    c5a0:	2200      	movs	r2, #0
    c5a2:	2100      	movs	r1, #0
    c5a4:	4c13      	ldr	r4, [pc, #76]	; (c5f4 <usbdc_set_req+0xd8>)
    c5a6:	47a0      	blx	r4
    c5a8:	4603      	mov	r3, r0
    c5aa:	2b00      	cmp	r3, #0
    c5ac:	bf0c      	ite	eq
    c5ae:	2301      	moveq	r3, #1
    c5b0:	2300      	movne	r3, #0
    c5b2:	b2db      	uxtb	r3, r3
    c5b4:	e01a      	b.n	c5ec <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c5b6:	79fb      	ldrb	r3, [r7, #7]
    c5b8:	6839      	ldr	r1, [r7, #0]
    c5ba:	4618      	mov	r0, r3
    c5bc:	4b0f      	ldr	r3, [pc, #60]	; (c5fc <usbdc_set_req+0xe0>)
    c5be:	4798      	blx	r3
    c5c0:	4603      	mov	r3, r0
    c5c2:	e013      	b.n	c5ec <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c5c4:	79fb      	ldrb	r3, [r7, #7]
    c5c6:	6839      	ldr	r1, [r7, #0]
    c5c8:	4618      	mov	r0, r3
    c5ca:	4b0d      	ldr	r3, [pc, #52]	; (c600 <usbdc_set_req+0xe4>)
    c5cc:	4798      	blx	r3
    c5ce:	4603      	mov	r3, r0
    c5d0:	e00c      	b.n	c5ec <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c5d2:	683b      	ldr	r3, [r7, #0]
    c5d4:	885b      	ldrh	r3, [r3, #2]
    c5d6:	b29a      	uxth	r2, r3
    c5d8:	683b      	ldr	r3, [r7, #0]
    c5da:	889b      	ldrh	r3, [r3, #4]
    c5dc:	b29b      	uxth	r3, r3
    c5de:	4619      	mov	r1, r3
    c5e0:	4610      	mov	r0, r2
    c5e2:	4b08      	ldr	r3, [pc, #32]	; (c604 <usbdc_set_req+0xe8>)
    c5e4:	4798      	blx	r3
    c5e6:	4603      	mov	r3, r0
    c5e8:	e000      	b.n	c5ec <usbdc_set_req+0xd0>
	default:
		return false;
    c5ea:	2300      	movs	r3, #0
	}
}
    c5ec:	4618      	mov	r0, r3
    c5ee:	370c      	adds	r7, #12
    c5f0:	46bd      	mov	sp, r7
    c5f2:	bd90      	pop	{r4, r7, pc}
    c5f4:	0000c8f1 	.word	0x0000c8f1
    c5f8:	0000c2d1 	.word	0x0000c2d1
    c5fc:	0000c1ed 	.word	0x0000c1ed
    c600:	0000c245 	.word	0x0000c245
    c604:	0000c3dd 	.word	0x0000c3dd

0000c608 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c608:	b580      	push	{r7, lr}
    c60a:	b082      	sub	sp, #8
    c60c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c60e:	4b0a      	ldr	r3, [pc, #40]	; (c638 <usbdc_sof_notify+0x30>)
    c610:	685b      	ldr	r3, [r3, #4]
    c612:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c614:	e009      	b.n	c62a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c616:	687b      	ldr	r3, [r7, #4]
    c618:	685b      	ldr	r3, [r3, #4]
    c61a:	2b00      	cmp	r3, #0
    c61c:	d002      	beq.n	c624 <usbdc_sof_notify+0x1c>
			sof->cb();
    c61e:	687b      	ldr	r3, [r7, #4]
    c620:	685b      	ldr	r3, [r3, #4]
    c622:	4798      	blx	r3
		}
		sof = sof->next;
    c624:	687b      	ldr	r3, [r7, #4]
    c626:	681b      	ldr	r3, [r3, #0]
    c628:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	2b00      	cmp	r3, #0
    c62e:	d1f2      	bne.n	c616 <usbdc_sof_notify+0xe>
	}
}
    c630:	bf00      	nop
    c632:	3708      	adds	r7, #8
    c634:	46bd      	mov	sp, r7
    c636:	bd80      	pop	{r7, pc}
    c638:	20000fac 	.word	0x20000fac

0000c63c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c63c:	b580      	push	{r7, lr}
    c63e:	b084      	sub	sp, #16
    c640:	af00      	add	r7, sp, #0
    c642:	4603      	mov	r3, r0
    c644:	6039      	str	r1, [r7, #0]
    c646:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c648:	4b0b      	ldr	r3, [pc, #44]	; (c678 <usbdc_change_notify+0x3c>)
    c64a:	68db      	ldr	r3, [r3, #12]
    c64c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c64e:	e00c      	b.n	c66a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c650:	68fb      	ldr	r3, [r7, #12]
    c652:	685b      	ldr	r3, [r3, #4]
    c654:	2b00      	cmp	r3, #0
    c656:	d005      	beq.n	c664 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c658:	68fb      	ldr	r3, [r7, #12]
    c65a:	685b      	ldr	r3, [r3, #4]
    c65c:	79fa      	ldrb	r2, [r7, #7]
    c65e:	6839      	ldr	r1, [r7, #0]
    c660:	4610      	mov	r0, r2
    c662:	4798      	blx	r3
		}
		cg = cg->next;
    c664:	68fb      	ldr	r3, [r7, #12]
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c66a:	68fb      	ldr	r3, [r7, #12]
    c66c:	2b00      	cmp	r3, #0
    c66e:	d1ef      	bne.n	c650 <usbdc_change_notify+0x14>
	}
}
    c670:	bf00      	nop
    c672:	3710      	adds	r7, #16
    c674:	46bd      	mov	sp, r7
    c676:	bd80      	pop	{r7, pc}
    c678:	20000fac 	.word	0x20000fac

0000c67c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c67c:	b580      	push	{r7, lr}
    c67e:	b084      	sub	sp, #16
    c680:	af00      	add	r7, sp, #0
    c682:	4603      	mov	r3, r0
    c684:	6039      	str	r1, [r7, #0]
    c686:	71fb      	strb	r3, [r7, #7]
    c688:	4613      	mov	r3, r2
    c68a:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c68c:	4b12      	ldr	r3, [pc, #72]	; (c6d8 <usbdc_request_handler+0x5c>)
    c68e:	689b      	ldr	r3, [r3, #8]
    c690:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c692:	e019      	b.n	c6c8 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c694:	68fb      	ldr	r3, [r7, #12]
    c696:	685b      	ldr	r3, [r3, #4]
    c698:	2b00      	cmp	r3, #0
    c69a:	d012      	beq.n	c6c2 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c69c:	68fb      	ldr	r3, [r7, #12]
    c69e:	685b      	ldr	r3, [r3, #4]
    c6a0:	79ba      	ldrb	r2, [r7, #6]
    c6a2:	79f8      	ldrb	r0, [r7, #7]
    c6a4:	6839      	ldr	r1, [r7, #0]
    c6a6:	4798      	blx	r3
    c6a8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c6aa:	68bb      	ldr	r3, [r7, #8]
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d101      	bne.n	c6b4 <usbdc_request_handler+0x38>
				return true;
    c6b0:	2301      	movs	r3, #1
    c6b2:	e00d      	b.n	c6d0 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c6b4:	68bb      	ldr	r3, [r7, #8]
    c6b6:	f113 0f0a 	cmn.w	r3, #10
    c6ba:	d002      	beq.n	c6c2 <usbdc_request_handler+0x46>
				return -1;
    c6bc:	f04f 33ff 	mov.w	r3, #4294967295
    c6c0:	e006      	b.n	c6d0 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c6c2:	68fb      	ldr	r3, [r7, #12]
    c6c4:	681b      	ldr	r3, [r3, #0]
    c6c6:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c6c8:	68fb      	ldr	r3, [r7, #12]
    c6ca:	2b00      	cmp	r3, #0
    c6cc:	d1e2      	bne.n	c694 <usbdc_request_handler+0x18>
	}
	return false;
    c6ce:	2300      	movs	r3, #0
}
    c6d0:	4618      	mov	r0, r3
    c6d2:	3710      	adds	r7, #16
    c6d4:	46bd      	mov	sp, r7
    c6d6:	bd80      	pop	{r7, pc}
    c6d8:	20000fac 	.word	0x20000fac

0000c6dc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c6dc:	b580      	push	{r7, lr}
    c6de:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c6e0:	4b01      	ldr	r3, [pc, #4]	; (c6e8 <usbd_sof_cb+0xc>)
    c6e2:	4798      	blx	r3
}
    c6e4:	bf00      	nop
    c6e6:	bd80      	pop	{r7, pc}
    c6e8:	0000c609 	.word	0x0000c609

0000c6ec <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c6ec:	b580      	push	{r7, lr}
    c6ee:	b082      	sub	sp, #8
    c6f0:	af00      	add	r7, sp, #0
    c6f2:	4603      	mov	r3, r0
    c6f4:	6039      	str	r1, [r7, #0]
    c6f6:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c6f8:	79fb      	ldrb	r3, [r7, #7]
    c6fa:	2200      	movs	r2, #0
    c6fc:	6839      	ldr	r1, [r7, #0]
    c6fe:	4618      	mov	r0, r3
    c700:	4b14      	ldr	r3, [pc, #80]	; (c754 <usbdc_cb_ctl_req+0x68>)
    c702:	4798      	blx	r3
    c704:	4603      	mov	r3, r0
    c706:	f1b3 3fff 	cmp.w	r3, #4294967295
    c70a:	d00b      	beq.n	c724 <usbdc_cb_ctl_req+0x38>
    c70c:	2b01      	cmp	r3, #1
    c70e:	d007      	beq.n	c720 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c710:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c712:	683b      	ldr	r3, [r7, #0]
    c714:	781b      	ldrb	r3, [r3, #0]
    c716:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c71a:	2b00      	cmp	r3, #0
    c71c:	d007      	beq.n	c72e <usbdc_cb_ctl_req+0x42>
    c71e:	e003      	b.n	c728 <usbdc_cb_ctl_req+0x3c>
		return true;
    c720:	2301      	movs	r3, #1
    c722:	e013      	b.n	c74c <usbdc_cb_ctl_req+0x60>
		return false;
    c724:	2300      	movs	r3, #0
    c726:	e011      	b.n	c74c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c728:	2b80      	cmp	r3, #128	; 0x80
    c72a:	d007      	beq.n	c73c <usbdc_cb_ctl_req+0x50>
    c72c:	e00d      	b.n	c74a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c72e:	79fb      	ldrb	r3, [r7, #7]
    c730:	6839      	ldr	r1, [r7, #0]
    c732:	4618      	mov	r0, r3
    c734:	4b08      	ldr	r3, [pc, #32]	; (c758 <usbdc_cb_ctl_req+0x6c>)
    c736:	4798      	blx	r3
    c738:	4603      	mov	r3, r0
    c73a:	e007      	b.n	c74c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c73c:	79fb      	ldrb	r3, [r7, #7]
    c73e:	6839      	ldr	r1, [r7, #0]
    c740:	4618      	mov	r0, r3
    c742:	4b06      	ldr	r3, [pc, #24]	; (c75c <usbdc_cb_ctl_req+0x70>)
    c744:	4798      	blx	r3
    c746:	4603      	mov	r3, r0
    c748:	e000      	b.n	c74c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c74a:	2300      	movs	r3, #0
	}
}
    c74c:	4618      	mov	r0, r3
    c74e:	3708      	adds	r7, #8
    c750:	46bd      	mov	sp, r7
    c752:	bd80      	pop	{r7, pc}
    c754:	0000c67d 	.word	0x0000c67d
    c758:	0000c51d 	.word	0x0000c51d
    c75c:	0000c145 	.word	0x0000c145

0000c760 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c760:	b580      	push	{r7, lr}
    c762:	b082      	sub	sp, #8
    c764:	af00      	add	r7, sp, #0
    c766:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	781b      	ldrb	r3, [r3, #0]
    c76c:	2b00      	cmp	r3, #0
    c76e:	d135      	bne.n	c7dc <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c770:	687b      	ldr	r3, [r7, #4]
    c772:	785b      	ldrb	r3, [r3, #1]
    c774:	2b05      	cmp	r3, #5
    c776:	d019      	beq.n	c7ac <usbdc_ctrl_status_end+0x4c>
    c778:	2b09      	cmp	r3, #9
    c77a:	d000      	beq.n	c77e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c77c:	e02f      	b.n	c7de <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	885b      	ldrh	r3, [r3, #2]
    c782:	b29b      	uxth	r3, r3
    c784:	b2da      	uxtb	r2, r3
    c786:	4b17      	ldr	r3, [pc, #92]	; (c7e4 <usbdc_ctrl_status_end+0x84>)
    c788:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c78a:	687b      	ldr	r3, [r7, #4]
    c78c:	885b      	ldrh	r3, [r3, #2]
    c78e:	b29b      	uxth	r3, r3
    c790:	2b00      	cmp	r3, #0
    c792:	d001      	beq.n	c798 <usbdc_ctrl_status_end+0x38>
    c794:	2204      	movs	r2, #4
    c796:	e000      	b.n	c79a <usbdc_ctrl_status_end+0x3a>
    c798:	2203      	movs	r2, #3
    c79a:	4b12      	ldr	r3, [pc, #72]	; (c7e4 <usbdc_ctrl_status_end+0x84>)
    c79c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c79e:	4b11      	ldr	r3, [pc, #68]	; (c7e4 <usbdc_ctrl_status_end+0x84>)
    c7a0:	7e9b      	ldrb	r3, [r3, #26]
    c7a2:	4619      	mov	r1, r3
    c7a4:	2001      	movs	r0, #1
    c7a6:	4b10      	ldr	r3, [pc, #64]	; (c7e8 <usbdc_ctrl_status_end+0x88>)
    c7a8:	4798      	blx	r3
		break;
    c7aa:	e018      	b.n	c7de <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c7ac:	687b      	ldr	r3, [r7, #4]
    c7ae:	885b      	ldrh	r3, [r3, #2]
    c7b0:	b29b      	uxth	r3, r3
    c7b2:	b2db      	uxtb	r3, r3
    c7b4:	4618      	mov	r0, r3
    c7b6:	4b0d      	ldr	r3, [pc, #52]	; (c7ec <usbdc_ctrl_status_end+0x8c>)
    c7b8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	885b      	ldrh	r3, [r3, #2]
    c7be:	b29b      	uxth	r3, r3
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d001      	beq.n	c7c8 <usbdc_ctrl_status_end+0x68>
    c7c4:	2203      	movs	r2, #3
    c7c6:	e000      	b.n	c7ca <usbdc_ctrl_status_end+0x6a>
    c7c8:	2202      	movs	r2, #2
    c7ca:	4b06      	ldr	r3, [pc, #24]	; (c7e4 <usbdc_ctrl_status_end+0x84>)
    c7cc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c7ce:	4b05      	ldr	r3, [pc, #20]	; (c7e4 <usbdc_ctrl_status_end+0x84>)
    c7d0:	7e9b      	ldrb	r3, [r3, #26]
    c7d2:	4619      	mov	r1, r3
    c7d4:	2001      	movs	r0, #1
    c7d6:	4b04      	ldr	r3, [pc, #16]	; (c7e8 <usbdc_ctrl_status_end+0x88>)
    c7d8:	4798      	blx	r3
		break;
    c7da:	e000      	b.n	c7de <usbdc_ctrl_status_end+0x7e>
		return;
    c7dc:	bf00      	nop
	}
}
    c7de:	3708      	adds	r7, #8
    c7e0:	46bd      	mov	sp, r7
    c7e2:	bd80      	pop	{r7, pc}
    c7e4:	20000fac 	.word	0x20000fac
    c7e8:	0000c63d 	.word	0x0000c63d
    c7ec:	0000c3bd 	.word	0x0000c3bd

0000c7f0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b082      	sub	sp, #8
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c7f8:	2201      	movs	r2, #1
    c7fa:	6879      	ldr	r1, [r7, #4]
    c7fc:	2000      	movs	r0, #0
    c7fe:	4b03      	ldr	r3, [pc, #12]	; (c80c <usbdc_ctrl_data_end+0x1c>)
    c800:	4798      	blx	r3
	return false;
    c802:	2300      	movs	r3, #0
}
    c804:	4618      	mov	r0, r3
    c806:	3708      	adds	r7, #8
    c808:	46bd      	mov	sp, r7
    c80a:	bd80      	pop	{r7, pc}
    c80c:	0000c67d 	.word	0x0000c67d

0000c810 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c810:	b580      	push	{r7, lr}
    c812:	b082      	sub	sp, #8
    c814:	af00      	add	r7, sp, #0
    c816:	4603      	mov	r3, r0
    c818:	603a      	str	r2, [r7, #0]
    c81a:	71fb      	strb	r3, [r7, #7]
    c81c:	460b      	mov	r3, r1
    c81e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c820:	79bb      	ldrb	r3, [r7, #6]
    c822:	2b00      	cmp	r3, #0
    c824:	d002      	beq.n	c82c <usbdc_cb_ctl_done+0x1c>
    c826:	2b01      	cmp	r3, #1
    c828:	d004      	beq.n	c834 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c82a:	e008      	b.n	c83e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c82c:	6838      	ldr	r0, [r7, #0]
    c82e:	4b06      	ldr	r3, [pc, #24]	; (c848 <usbdc_cb_ctl_done+0x38>)
    c830:	4798      	blx	r3
		break;
    c832:	e004      	b.n	c83e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c834:	6838      	ldr	r0, [r7, #0]
    c836:	4b05      	ldr	r3, [pc, #20]	; (c84c <usbdc_cb_ctl_done+0x3c>)
    c838:	4798      	blx	r3
    c83a:	4603      	mov	r3, r0
    c83c:	e000      	b.n	c840 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c83e:	2300      	movs	r3, #0
}
    c840:	4618      	mov	r0, r3
    c842:	3708      	adds	r7, #8
    c844:	46bd      	mov	sp, r7
    c846:	bd80      	pop	{r7, pc}
    c848:	0000c761 	.word	0x0000c761
    c84c:	0000c7f1 	.word	0x0000c7f1

0000c850 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c850:	b580      	push	{r7, lr}
    c852:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c854:	4b10      	ldr	r3, [pc, #64]	; (c898 <usbdc_reset+0x48>)
    c856:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c858:	4b10      	ldr	r3, [pc, #64]	; (c89c <usbdc_reset+0x4c>)
    c85a:	2202      	movs	r2, #2
    c85c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c85e:	4b0f      	ldr	r3, [pc, #60]	; (c89c <usbdc_reset+0x4c>)
    c860:	2200      	movs	r2, #0
    c862:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c864:	4b0d      	ldr	r3, [pc, #52]	; (c89c <usbdc_reset+0x4c>)
    c866:	2200      	movs	r2, #0
    c868:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c86a:	2000      	movs	r0, #0
    c86c:	4b0c      	ldr	r3, [pc, #48]	; (c8a0 <usbdc_reset+0x50>)
    c86e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c870:	4b0a      	ldr	r3, [pc, #40]	; (c89c <usbdc_reset+0x4c>)
    c872:	7f1b      	ldrb	r3, [r3, #28]
    c874:	4618      	mov	r0, r3
    c876:	4b0b      	ldr	r3, [pc, #44]	; (c8a4 <usbdc_reset+0x54>)
    c878:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c87a:	4a0b      	ldr	r2, [pc, #44]	; (c8a8 <usbdc_reset+0x58>)
    c87c:	2100      	movs	r1, #0
    c87e:	2000      	movs	r0, #0
    c880:	4b0a      	ldr	r3, [pc, #40]	; (c8ac <usbdc_reset+0x5c>)
    c882:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c884:	4a0a      	ldr	r2, [pc, #40]	; (c8b0 <usbdc_reset+0x60>)
    c886:	2102      	movs	r1, #2
    c888:	2000      	movs	r0, #0
    c88a:	4b08      	ldr	r3, [pc, #32]	; (c8ac <usbdc_reset+0x5c>)
    c88c:	4798      	blx	r3
	usb_d_ep_enable(0);
    c88e:	2000      	movs	r0, #0
    c890:	4b08      	ldr	r3, [pc, #32]	; (c8b4 <usbdc_reset+0x64>)
    c892:	4798      	blx	r3
}
    c894:	bf00      	nop
    c896:	bd80      	pop	{r7, pc}
    c898:	0000c29d 	.word	0x0000c29d
    c89c:	20000fac 	.word	0x20000fac
    c8a0:	00002fad 	.word	0x00002fad
    c8a4:	00002ee9 	.word	0x00002ee9
    c8a8:	0000c6ed 	.word	0x0000c6ed
    c8ac:	00003301 	.word	0x00003301
    c8b0:	0000c811 	.word	0x0000c811
    c8b4:	00002ffd 	.word	0x00002ffd

0000c8b8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c8b8:	b580      	push	{r7, lr}
    c8ba:	b082      	sub	sp, #8
    c8bc:	af00      	add	r7, sp, #0
    c8be:	4603      	mov	r3, r0
    c8c0:	6039      	str	r1, [r7, #0]
    c8c2:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c8c4:	79fb      	ldrb	r3, [r7, #7]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d002      	beq.n	c8d0 <usbd_event_cb+0x18>
    c8ca:	2b01      	cmp	r3, #1
    c8cc:	d005      	beq.n	c8da <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c8ce:	e007      	b.n	c8e0 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c8d0:	6839      	ldr	r1, [r7, #0]
    c8d2:	2000      	movs	r0, #0
    c8d4:	4b04      	ldr	r3, [pc, #16]	; (c8e8 <usbd_event_cb+0x30>)
    c8d6:	4798      	blx	r3
		break;
    c8d8:	e002      	b.n	c8e0 <usbd_event_cb+0x28>
		usbdc_reset();
    c8da:	4b04      	ldr	r3, [pc, #16]	; (c8ec <usbd_event_cb+0x34>)
    c8dc:	4798      	blx	r3
		break;
    c8de:	bf00      	nop
	}
}
    c8e0:	bf00      	nop
    c8e2:	3708      	adds	r7, #8
    c8e4:	46bd      	mov	sp, r7
    c8e6:	bd80      	pop	{r7, pc}
    c8e8:	0000c63d 	.word	0x0000c63d
    c8ec:	0000c851 	.word	0x0000c851

0000c8f0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c8f0:	b580      	push	{r7, lr}
    c8f2:	b088      	sub	sp, #32
    c8f4:	af00      	add	r7, sp, #0
    c8f6:	60b9      	str	r1, [r7, #8]
    c8f8:	607a      	str	r2, [r7, #4]
    c8fa:	461a      	mov	r2, r3
    c8fc:	4603      	mov	r3, r0
    c8fe:	73fb      	strb	r3, [r7, #15]
    c900:	4613      	mov	r3, r2
    c902:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c904:	68bb      	ldr	r3, [r7, #8]
    c906:	617b      	str	r3, [r7, #20]
    c908:	687b      	ldr	r3, [r7, #4]
    c90a:	61bb      	str	r3, [r7, #24]
    c90c:	7bfb      	ldrb	r3, [r7, #15]
    c90e:	773b      	strb	r3, [r7, #28]
    c910:	7bbb      	ldrb	r3, [r7, #14]
    c912:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c914:	f107 0314 	add.w	r3, r7, #20
    c918:	4618      	mov	r0, r3
    c91a:	4b03      	ldr	r3, [pc, #12]	; (c928 <usbdc_xfer+0x38>)
    c91c:	4798      	blx	r3
    c91e:	4603      	mov	r3, r0
}
    c920:	4618      	mov	r0, r3
    c922:	3720      	adds	r7, #32
    c924:	46bd      	mov	sp, r7
    c926:	bd80      	pop	{r7, pc}
    c928:	0000306d 	.word	0x0000306d

0000c92c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c92c:	b580      	push	{r7, lr}
    c92e:	b082      	sub	sp, #8
    c930:	af00      	add	r7, sp, #0
    c932:	4603      	mov	r3, r0
    c934:	6039      	str	r1, [r7, #0]
    c936:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c938:	79fb      	ldrb	r3, [r7, #7]
    c93a:	2b01      	cmp	r3, #1
    c93c:	d009      	beq.n	c952 <usbdc_register_handler+0x26>
    c93e:	2b02      	cmp	r3, #2
    c940:	d00c      	beq.n	c95c <usbdc_register_handler+0x30>
    c942:	2b00      	cmp	r3, #0
    c944:	d000      	beq.n	c948 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c946:	e00e      	b.n	c966 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c948:	6839      	ldr	r1, [r7, #0]
    c94a:	4809      	ldr	r0, [pc, #36]	; (c970 <usbdc_register_handler+0x44>)
    c94c:	4b09      	ldr	r3, [pc, #36]	; (c974 <usbdc_register_handler+0x48>)
    c94e:	4798      	blx	r3
		break;
    c950:	e009      	b.n	c966 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c952:	6839      	ldr	r1, [r7, #0]
    c954:	4808      	ldr	r0, [pc, #32]	; (c978 <usbdc_register_handler+0x4c>)
    c956:	4b07      	ldr	r3, [pc, #28]	; (c974 <usbdc_register_handler+0x48>)
    c958:	4798      	blx	r3
		break;
    c95a:	e004      	b.n	c966 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c95c:	6839      	ldr	r1, [r7, #0]
    c95e:	4807      	ldr	r0, [pc, #28]	; (c97c <usbdc_register_handler+0x50>)
    c960:	4b04      	ldr	r3, [pc, #16]	; (c974 <usbdc_register_handler+0x48>)
    c962:	4798      	blx	r3
		break;
    c964:	bf00      	nop
	}
}
    c966:	bf00      	nop
    c968:	3708      	adds	r7, #8
    c96a:	46bd      	mov	sp, r7
    c96c:	bd80      	pop	{r7, pc}
    c96e:	bf00      	nop
    c970:	20000fb0 	.word	0x20000fb0
    c974:	00003459 	.word	0x00003459
    c978:	20000fb4 	.word	0x20000fb4
    c97c:	20000fb8 	.word	0x20000fb8

0000c980 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c980:	b580      	push	{r7, lr}
    c982:	b084      	sub	sp, #16
    c984:	af00      	add	r7, sp, #0
    c986:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	2b00      	cmp	r3, #0
    c98c:	bf14      	ite	ne
    c98e:	2301      	movne	r3, #1
    c990:	2300      	moveq	r3, #0
    c992:	b2db      	uxtb	r3, r3
    c994:	f240 3255 	movw	r2, #853	; 0x355
    c998:	4910      	ldr	r1, [pc, #64]	; (c9dc <usbdc_init+0x5c>)
    c99a:	4618      	mov	r0, r3
    c99c:	4b10      	ldr	r3, [pc, #64]	; (c9e0 <usbdc_init+0x60>)
    c99e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c9a0:	4b10      	ldr	r3, [pc, #64]	; (c9e4 <usbdc_init+0x64>)
    c9a2:	4798      	blx	r3
    c9a4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c9a6:	68fb      	ldr	r3, [r7, #12]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	da01      	bge.n	c9b0 <usbdc_init+0x30>
		return rc;
    c9ac:	68fb      	ldr	r3, [r7, #12]
    c9ae:	e010      	b.n	c9d2 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c9b0:	2220      	movs	r2, #32
    c9b2:	2100      	movs	r1, #0
    c9b4:	480c      	ldr	r0, [pc, #48]	; (c9e8 <usbdc_init+0x68>)
    c9b6:	4b0d      	ldr	r3, [pc, #52]	; (c9ec <usbdc_init+0x6c>)
    c9b8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c9ba:	4a0b      	ldr	r2, [pc, #44]	; (c9e8 <usbdc_init+0x68>)
    c9bc:	687b      	ldr	r3, [r7, #4]
    c9be:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c9c0:	490b      	ldr	r1, [pc, #44]	; (c9f0 <usbdc_init+0x70>)
    c9c2:	2000      	movs	r0, #0
    c9c4:	4b0b      	ldr	r3, [pc, #44]	; (c9f4 <usbdc_init+0x74>)
    c9c6:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c9c8:	490b      	ldr	r1, [pc, #44]	; (c9f8 <usbdc_init+0x78>)
    c9ca:	2001      	movs	r0, #1
    c9cc:	4b09      	ldr	r3, [pc, #36]	; (c9f4 <usbdc_init+0x74>)
    c9ce:	4798      	blx	r3

	return 0;
    c9d0:	2300      	movs	r3, #0
}
    c9d2:	4618      	mov	r0, r3
    c9d4:	3710      	adds	r7, #16
    c9d6:	46bd      	mov	sp, r7
    c9d8:	bd80      	pop	{r7, pc}
    c9da:	bf00      	nop
    c9dc:	000114a0 	.word	0x000114a0
    c9e0:	0000337d 	.word	0x0000337d
    c9e4:	00002dd5 	.word	0x00002dd5
    c9e8:	20000fac 	.word	0x20000fac
    c9ec:	00010e1d 	.word	0x00010e1d
    c9f0:	0000c6dd 	.word	0x0000c6dd
    c9f4:	00002e81 	.word	0x00002e81
    c9f8:	0000c8b9 	.word	0x0000c8b9

0000c9fc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c9fc:	b580      	push	{r7, lr}
    c9fe:	b082      	sub	sp, #8
    ca00:	af00      	add	r7, sp, #0
    ca02:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    ca04:	6879      	ldr	r1, [r7, #4]
    ca06:	4803      	ldr	r0, [pc, #12]	; (ca14 <usbdc_register_function+0x18>)
    ca08:	4b03      	ldr	r3, [pc, #12]	; (ca18 <usbdc_register_function+0x1c>)
    ca0a:	4798      	blx	r3
}
    ca0c:	bf00      	nop
    ca0e:	3708      	adds	r7, #8
    ca10:	46bd      	mov	sp, r7
    ca12:	bd80      	pop	{r7, pc}
    ca14:	20000fbc 	.word	0x20000fbc
    ca18:	00003459 	.word	0x00003459

0000ca1c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ca1c:	b580      	push	{r7, lr}
    ca1e:	b082      	sub	sp, #8
    ca20:	af00      	add	r7, sp, #0
    ca22:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    ca24:	4b0f      	ldr	r3, [pc, #60]	; (ca64 <usbdc_start+0x48>)
    ca26:	7e9b      	ldrb	r3, [r3, #26]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d002      	beq.n	ca32 <usbdc_start+0x16>
		return ERR_BUSY;
    ca2c:	f06f 0303 	mvn.w	r3, #3
    ca30:	e013      	b.n	ca5a <usbdc_start+0x3e>
	}

	if (desces) {
    ca32:	687b      	ldr	r3, [r7, #4]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d00e      	beq.n	ca56 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ca38:	4a0a      	ldr	r2, [pc, #40]	; (ca64 <usbdc_start+0x48>)
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ca3e:	687b      	ldr	r3, [r7, #4]
    ca40:	681b      	ldr	r3, [r3, #0]
    ca42:	79da      	ldrb	r2, [r3, #7]
    ca44:	4b07      	ldr	r3, [pc, #28]	; (ca64 <usbdc_start+0x48>)
    ca46:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ca48:	4b06      	ldr	r3, [pc, #24]	; (ca64 <usbdc_start+0x48>)
    ca4a:	2201      	movs	r2, #1
    ca4c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ca4e:	4b06      	ldr	r3, [pc, #24]	; (ca68 <usbdc_start+0x4c>)
    ca50:	4798      	blx	r3
	return ERR_NONE;
    ca52:	2300      	movs	r3, #0
    ca54:	e001      	b.n	ca5a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ca56:	f06f 0308 	mvn.w	r3, #8
}
    ca5a:	4618      	mov	r0, r3
    ca5c:	3708      	adds	r7, #8
    ca5e:	46bd      	mov	sp, r7
    ca60:	bd80      	pop	{r7, pc}
    ca62:	bf00      	nop
    ca64:	20000fac 	.word	0x20000fac
    ca68:	00002ea5 	.word	0x00002ea5

0000ca6c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ca6c:	b580      	push	{r7, lr}
    ca6e:	af00      	add	r7, sp, #0
	usb_d_attach();
    ca70:	4b01      	ldr	r3, [pc, #4]	; (ca78 <usbdc_attach+0xc>)
    ca72:	4798      	blx	r3
}
    ca74:	bf00      	nop
    ca76:	bd80      	pop	{r7, pc}
    ca78:	00002eb9 	.word	0x00002eb9

0000ca7c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ca7c:	b480      	push	{r7}
    ca7e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ca80:	4b03      	ldr	r3, [pc, #12]	; (ca90 <usbdc_get_ctrl_buffer+0x14>)
    ca82:	695b      	ldr	r3, [r3, #20]
}
    ca84:	4618      	mov	r0, r3
    ca86:	46bd      	mov	sp, r7
    ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca8c:	4770      	bx	lr
    ca8e:	bf00      	nop
    ca90:	20000fac 	.word	0x20000fac

0000ca94 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ca94:	b480      	push	{r7}
    ca96:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ca98:	4b07      	ldr	r3, [pc, #28]	; (cab8 <usbdc_get_state+0x24>)
    ca9a:	7e9b      	ldrb	r3, [r3, #26]
    ca9c:	f003 0310 	and.w	r3, r3, #16
    caa0:	2b00      	cmp	r3, #0
    caa2:	d001      	beq.n	caa8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    caa4:	2310      	movs	r3, #16
    caa6:	e001      	b.n	caac <usbdc_get_state+0x18>
	}
	return usbdc.state;
    caa8:	4b03      	ldr	r3, [pc, #12]	; (cab8 <usbdc_get_state+0x24>)
    caaa:	7e9b      	ldrb	r3, [r3, #26]
}
    caac:	4618      	mov	r0, r3
    caae:	46bd      	mov	sp, r7
    cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cab4:	4770      	bx	lr
    cab6:	bf00      	nop
    cab8:	20000fac 	.word	0x20000fac

0000cabc <usb_get_u16>:
{
    cabc:	b480      	push	{r7}
    cabe:	b083      	sub	sp, #12
    cac0:	af00      	add	r7, sp, #0
    cac2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cac4:	687b      	ldr	r3, [r7, #4]
    cac6:	781b      	ldrb	r3, [r3, #0]
    cac8:	b29a      	uxth	r2, r3
    caca:	687b      	ldr	r3, [r7, #4]
    cacc:	3301      	adds	r3, #1
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	b29b      	uxth	r3, r3
    cad2:	021b      	lsls	r3, r3, #8
    cad4:	b29b      	uxth	r3, r3
    cad6:	4413      	add	r3, r2
    cad8:	b29b      	uxth	r3, r3
}
    cada:	4618      	mov	r0, r3
    cadc:	370c      	adds	r7, #12
    cade:	46bd      	mov	sp, r7
    cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae4:	4770      	bx	lr

0000cae6 <usb_desc_len>:
{
    cae6:	b480      	push	{r7}
    cae8:	b083      	sub	sp, #12
    caea:	af00      	add	r7, sp, #0
    caec:	6078      	str	r0, [r7, #4]
	return desc[0];
    caee:	687b      	ldr	r3, [r7, #4]
    caf0:	781b      	ldrb	r3, [r3, #0]
}
    caf2:	4618      	mov	r0, r3
    caf4:	370c      	adds	r7, #12
    caf6:	46bd      	mov	sp, r7
    caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cafc:	4770      	bx	lr

0000cafe <usb_desc_type>:
{
    cafe:	b480      	push	{r7}
    cb00:	b083      	sub	sp, #12
    cb02:	af00      	add	r7, sp, #0
    cb04:	6078      	str	r0, [r7, #4]
	return desc[1];
    cb06:	687b      	ldr	r3, [r7, #4]
    cb08:	3301      	adds	r3, #1
    cb0a:	781b      	ldrb	r3, [r3, #0]
}
    cb0c:	4618      	mov	r0, r3
    cb0e:	370c      	adds	r7, #12
    cb10:	46bd      	mov	sp, r7
    cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb16:	4770      	bx	lr

0000cb18 <usb_desc_next>:
{
    cb18:	b580      	push	{r7, lr}
    cb1a:	b082      	sub	sp, #8
    cb1c:	af00      	add	r7, sp, #0
    cb1e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cb20:	6878      	ldr	r0, [r7, #4]
    cb22:	4b05      	ldr	r3, [pc, #20]	; (cb38 <usb_desc_next+0x20>)
    cb24:	4798      	blx	r3
    cb26:	4603      	mov	r3, r0
    cb28:	461a      	mov	r2, r3
    cb2a:	687b      	ldr	r3, [r7, #4]
    cb2c:	4413      	add	r3, r2
}
    cb2e:	4618      	mov	r0, r3
    cb30:	3708      	adds	r7, #8
    cb32:	46bd      	mov	sp, r7
    cb34:	bd80      	pop	{r7, pc}
    cb36:	bf00      	nop
    cb38:	0000cae7 	.word	0x0000cae7

0000cb3c <usb_cfg_desc_total_len>:
{
    cb3c:	b580      	push	{r7, lr}
    cb3e:	b082      	sub	sp, #8
    cb40:	af00      	add	r7, sp, #0
    cb42:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cb44:	687b      	ldr	r3, [r7, #4]
    cb46:	3302      	adds	r3, #2
    cb48:	4618      	mov	r0, r3
    cb4a:	4b03      	ldr	r3, [pc, #12]	; (cb58 <usb_cfg_desc_total_len+0x1c>)
    cb4c:	4798      	blx	r3
    cb4e:	4603      	mov	r3, r0
}
    cb50:	4618      	mov	r0, r3
    cb52:	3708      	adds	r7, #8
    cb54:	46bd      	mov	sp, r7
    cb56:	bd80      	pop	{r7, pc}
    cb58:	0000cabd 	.word	0x0000cabd

0000cb5c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cb5c:	b580      	push	{r7, lr}
    cb5e:	b082      	sub	sp, #8
    cb60:	af00      	add	r7, sp, #0
    cb62:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cb64:	6878      	ldr	r0, [r7, #4]
    cb66:	4b05      	ldr	r3, [pc, #20]	; (cb7c <usb_cfg_desc_next+0x20>)
    cb68:	4798      	blx	r3
    cb6a:	4603      	mov	r3, r0
    cb6c:	461a      	mov	r2, r3
    cb6e:	687b      	ldr	r3, [r7, #4]
    cb70:	4413      	add	r3, r2
}
    cb72:	4618      	mov	r0, r3
    cb74:	3708      	adds	r7, #8
    cb76:	46bd      	mov	sp, r7
    cb78:	bd80      	pop	{r7, pc}
    cb7a:	bf00      	nop
    cb7c:	0000cb3d 	.word	0x0000cb3d

0000cb80 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cb80:	b580      	push	{r7, lr}
    cb82:	b084      	sub	sp, #16
    cb84:	af00      	add	r7, sp, #0
    cb86:	60f8      	str	r0, [r7, #12]
    cb88:	60b9      	str	r1, [r7, #8]
    cb8a:	4613      	mov	r3, r2
    cb8c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cb8e:	e015      	b.n	cbbc <usb_find_desc+0x3c>
		_desc_len_check();
    cb90:	68f8      	ldr	r0, [r7, #12]
    cb92:	4b0f      	ldr	r3, [pc, #60]	; (cbd0 <usb_find_desc+0x50>)
    cb94:	4798      	blx	r3
    cb96:	4603      	mov	r3, r0
    cb98:	2b01      	cmp	r3, #1
    cb9a:	d801      	bhi.n	cba0 <usb_find_desc+0x20>
    cb9c:	2300      	movs	r3, #0
    cb9e:	e012      	b.n	cbc6 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cba0:	68f8      	ldr	r0, [r7, #12]
    cba2:	4b0c      	ldr	r3, [pc, #48]	; (cbd4 <usb_find_desc+0x54>)
    cba4:	4798      	blx	r3
    cba6:	4603      	mov	r3, r0
    cba8:	461a      	mov	r2, r3
    cbaa:	79fb      	ldrb	r3, [r7, #7]
    cbac:	4293      	cmp	r3, r2
    cbae:	d101      	bne.n	cbb4 <usb_find_desc+0x34>
			return desc;
    cbb0:	68fb      	ldr	r3, [r7, #12]
    cbb2:	e008      	b.n	cbc6 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    cbb4:	68f8      	ldr	r0, [r7, #12]
    cbb6:	4b08      	ldr	r3, [pc, #32]	; (cbd8 <usb_find_desc+0x58>)
    cbb8:	4798      	blx	r3
    cbba:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cbbc:	68fa      	ldr	r2, [r7, #12]
    cbbe:	68bb      	ldr	r3, [r7, #8]
    cbc0:	429a      	cmp	r2, r3
    cbc2:	d3e5      	bcc.n	cb90 <usb_find_desc+0x10>
	}
	return NULL;
    cbc4:	2300      	movs	r3, #0
}
    cbc6:	4618      	mov	r0, r3
    cbc8:	3710      	adds	r7, #16
    cbca:	46bd      	mov	sp, r7
    cbcc:	bd80      	pop	{r7, pc}
    cbce:	bf00      	nop
    cbd0:	0000cae7 	.word	0x0000cae7
    cbd4:	0000caff 	.word	0x0000caff
    cbd8:	0000cb19 	.word	0x0000cb19

0000cbdc <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	b082      	sub	sp, #8
    cbe0:	af00      	add	r7, sp, #0
    cbe2:	6078      	str	r0, [r7, #4]
    cbe4:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cbe6:	e019      	b.n	cc1c <usb_find_ep_desc+0x40>
		_desc_len_check();
    cbe8:	6878      	ldr	r0, [r7, #4]
    cbea:	4b12      	ldr	r3, [pc, #72]	; (cc34 <usb_find_ep_desc+0x58>)
    cbec:	4798      	blx	r3
    cbee:	4603      	mov	r3, r0
    cbf0:	2b01      	cmp	r3, #1
    cbf2:	d801      	bhi.n	cbf8 <usb_find_ep_desc+0x1c>
    cbf4:	2300      	movs	r3, #0
    cbf6:	e018      	b.n	cc2a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cbf8:	6878      	ldr	r0, [r7, #4]
    cbfa:	4b0f      	ldr	r3, [pc, #60]	; (cc38 <usb_find_ep_desc+0x5c>)
    cbfc:	4798      	blx	r3
    cbfe:	4603      	mov	r3, r0
    cc00:	2b04      	cmp	r3, #4
    cc02:	d010      	beq.n	cc26 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cc04:	6878      	ldr	r0, [r7, #4]
    cc06:	4b0c      	ldr	r3, [pc, #48]	; (cc38 <usb_find_ep_desc+0x5c>)
    cc08:	4798      	blx	r3
    cc0a:	4603      	mov	r3, r0
    cc0c:	2b05      	cmp	r3, #5
    cc0e:	d101      	bne.n	cc14 <usb_find_ep_desc+0x38>
			return desc;
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	e00a      	b.n	cc2a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cc14:	6878      	ldr	r0, [r7, #4]
    cc16:	4b09      	ldr	r3, [pc, #36]	; (cc3c <usb_find_ep_desc+0x60>)
    cc18:	4798      	blx	r3
    cc1a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cc1c:	687a      	ldr	r2, [r7, #4]
    cc1e:	683b      	ldr	r3, [r7, #0]
    cc20:	429a      	cmp	r2, r3
    cc22:	d3e1      	bcc.n	cbe8 <usb_find_ep_desc+0xc>
    cc24:	e000      	b.n	cc28 <usb_find_ep_desc+0x4c>
			break;
    cc26:	bf00      	nop
	}
	return NULL;
    cc28:	2300      	movs	r3, #0
}
    cc2a:	4618      	mov	r0, r3
    cc2c:	3708      	adds	r7, #8
    cc2e:	46bd      	mov	sp, r7
    cc30:	bd80      	pop	{r7, pc}
    cc32:	bf00      	nop
    cc34:	0000cae7 	.word	0x0000cae7
    cc38:	0000caff 	.word	0x0000caff
    cc3c:	0000cb19 	.word	0x0000cb19

0000cc40 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cc40:	b580      	push	{r7, lr}
    cc42:	b084      	sub	sp, #16
    cc44:	af00      	add	r7, sp, #0
    cc46:	60f8      	str	r0, [r7, #12]
    cc48:	60b9      	str	r1, [r7, #8]
    cc4a:	4613      	mov	r3, r2
    cc4c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cc4e:	2202      	movs	r2, #2
    cc50:	68b9      	ldr	r1, [r7, #8]
    cc52:	68f8      	ldr	r0, [r7, #12]
    cc54:	4b15      	ldr	r3, [pc, #84]	; (ccac <usb_find_cfg_desc+0x6c>)
    cc56:	4798      	blx	r3
    cc58:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    cc5a:	68fb      	ldr	r3, [r7, #12]
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d11a      	bne.n	cc96 <usb_find_cfg_desc+0x56>
		return NULL;
    cc60:	2300      	movs	r3, #0
    cc62:	e01f      	b.n	cca4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cc64:	68f8      	ldr	r0, [r7, #12]
    cc66:	4b12      	ldr	r3, [pc, #72]	; (ccb0 <usb_find_cfg_desc+0x70>)
    cc68:	4798      	blx	r3
    cc6a:	4603      	mov	r3, r0
    cc6c:	2b01      	cmp	r3, #1
    cc6e:	d801      	bhi.n	cc74 <usb_find_cfg_desc+0x34>
    cc70:	2300      	movs	r3, #0
    cc72:	e017      	b.n	cca4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	3301      	adds	r3, #1
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	2b02      	cmp	r3, #2
    cc7c:	d110      	bne.n	cca0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    cc7e:	68fb      	ldr	r3, [r7, #12]
    cc80:	3305      	adds	r3, #5
    cc82:	781b      	ldrb	r3, [r3, #0]
    cc84:	79fa      	ldrb	r2, [r7, #7]
    cc86:	429a      	cmp	r2, r3
    cc88:	d101      	bne.n	cc8e <usb_find_cfg_desc+0x4e>
			return desc;
    cc8a:	68fb      	ldr	r3, [r7, #12]
    cc8c:	e00a      	b.n	cca4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    cc8e:	68f8      	ldr	r0, [r7, #12]
    cc90:	4b08      	ldr	r3, [pc, #32]	; (ccb4 <usb_find_cfg_desc+0x74>)
    cc92:	4798      	blx	r3
    cc94:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cc96:	68fa      	ldr	r2, [r7, #12]
    cc98:	68bb      	ldr	r3, [r7, #8]
    cc9a:	429a      	cmp	r2, r3
    cc9c:	d3e2      	bcc.n	cc64 <usb_find_cfg_desc+0x24>
    cc9e:	e000      	b.n	cca2 <usb_find_cfg_desc+0x62>
			break;
    cca0:	bf00      	nop
	}
	return NULL;
    cca2:	2300      	movs	r3, #0
}
    cca4:	4618      	mov	r0, r3
    cca6:	3710      	adds	r7, #16
    cca8:	46bd      	mov	sp, r7
    ccaa:	bd80      	pop	{r7, pc}
    ccac:	0000cb81 	.word	0x0000cb81
    ccb0:	0000cae7 	.word	0x0000cae7
    ccb4:	0000cb5d 	.word	0x0000cb5d

0000ccb8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    ccb8:	b580      	push	{r7, lr}
    ccba:	b086      	sub	sp, #24
    ccbc:	af00      	add	r7, sp, #0
    ccbe:	60f8      	str	r0, [r7, #12]
    ccc0:	60b9      	str	r1, [r7, #8]
    ccc2:	4613      	mov	r3, r2
    ccc4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ccc6:	2300      	movs	r3, #0
    ccc8:	75fb      	strb	r3, [r7, #23]
    ccca:	e020      	b.n	cd0e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    cccc:	2203      	movs	r2, #3
    ccce:	68b9      	ldr	r1, [r7, #8]
    ccd0:	68f8      	ldr	r0, [r7, #12]
    ccd2:	4b13      	ldr	r3, [pc, #76]	; (cd20 <usb_find_str_desc+0x68>)
    ccd4:	4798      	blx	r3
    ccd6:	60f8      	str	r0, [r7, #12]
		if (desc) {
    ccd8:	68fb      	ldr	r3, [r7, #12]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d015      	beq.n	cd0a <usb_find_str_desc+0x52>
			_desc_len_check();
    ccde:	68f8      	ldr	r0, [r7, #12]
    cce0:	4b10      	ldr	r3, [pc, #64]	; (cd24 <usb_find_str_desc+0x6c>)
    cce2:	4798      	blx	r3
    cce4:	4603      	mov	r3, r0
    cce6:	2b01      	cmp	r3, #1
    cce8:	d801      	bhi.n	ccee <usb_find_str_desc+0x36>
    ccea:	2300      	movs	r3, #0
    ccec:	e014      	b.n	cd18 <usb_find_str_desc+0x60>
			if (i == str_index) {
    ccee:	7dfa      	ldrb	r2, [r7, #23]
    ccf0:	79fb      	ldrb	r3, [r7, #7]
    ccf2:	429a      	cmp	r2, r3
    ccf4:	d101      	bne.n	ccfa <usb_find_str_desc+0x42>
				return desc;
    ccf6:	68fb      	ldr	r3, [r7, #12]
    ccf8:	e00e      	b.n	cd18 <usb_find_str_desc+0x60>
			}
			i++;
    ccfa:	7dfb      	ldrb	r3, [r7, #23]
    ccfc:	3301      	adds	r3, #1
    ccfe:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    cd00:	68f8      	ldr	r0, [r7, #12]
    cd02:	4b09      	ldr	r3, [pc, #36]	; (cd28 <usb_find_str_desc+0x70>)
    cd04:	4798      	blx	r3
    cd06:	60f8      	str	r0, [r7, #12]
    cd08:	e001      	b.n	cd0e <usb_find_str_desc+0x56>
		} else {
			return NULL;
    cd0a:	2300      	movs	r3, #0
    cd0c:	e004      	b.n	cd18 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    cd0e:	68fa      	ldr	r2, [r7, #12]
    cd10:	68bb      	ldr	r3, [r7, #8]
    cd12:	429a      	cmp	r2, r3
    cd14:	d3da      	bcc.n	cccc <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    cd16:	2300      	movs	r3, #0
}
    cd18:	4618      	mov	r0, r3
    cd1a:	3718      	adds	r7, #24
    cd1c:	46bd      	mov	sp, r7
    cd1e:	bd80      	pop	{r7, pc}
    cd20:	0000cb81 	.word	0x0000cb81
    cd24:	0000cae7 	.word	0x0000cae7
    cd28:	0000cb19 	.word	0x0000cb19

0000cd2c <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    cd2c:	b480      	push	{r7}
    cd2e:	b083      	sub	sp, #12
    cd30:	af00      	add	r7, sp, #0
    cd32:	6078      	str	r0, [r7, #4]
    cd34:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    cd36:	687b      	ldr	r3, [r7, #4]
    cd38:	683a      	ldr	r2, [r7, #0]
    cd3a:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    cd3c:	687b      	ldr	r3, [r7, #4]
    cd3e:	68db      	ldr	r3, [r3, #12]
    cd40:	2200      	movs	r2, #0
    cd42:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    cd44:	4a06      	ldr	r2, [pc, #24]	; (cd60 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    cd46:	687b      	ldr	r3, [r7, #4]
    cd48:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    cd4a:	687b      	ldr	r3, [r7, #4]
    cd4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cd50:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	4618      	mov	r0, r3
    cd56:	370c      	adds	r7, #12
    cd58:	46bd      	mov	sp, r7
    cd5a:	bc80      	pop	{r7}
    cd5c:	4770      	bx	lr
    cd5e:	bf00      	nop
    cd60:	200010cc 	.word	0x200010cc

0000cd64 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    cd64:	b480      	push	{r7}
    cd66:	b083      	sub	sp, #12
    cd68:	af00      	add	r7, sp, #0
    cd6a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	2200      	movs	r2, #0
    cd70:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    cd72:	687b      	ldr	r3, [r7, #4]
    cd74:	4618      	mov	r0, r3
    cd76:	370c      	adds	r7, #12
    cd78:	46bd      	mov	sp, r7
    cd7a:	bc80      	pop	{r7}
    cd7c:	4770      	bx	lr
	...

0000cd80 <_ZL9InitArrayv>:


static void InitArray(){
    cd80:	b480      	push	{r7}
    cd82:	b083      	sub	sp, #12
    cd84:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    cd86:	2301      	movs	r3, #1
    cd88:	607b      	str	r3, [r7, #4]
    cd8a:	687b      	ldr	r3, [r7, #4]
    cd8c:	2b1f      	cmp	r3, #31
    cd8e:	dc34      	bgt.n	cdfa <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    cd90:	491e      	ldr	r1, [pc, #120]	; (ce0c <_ZL9InitArrayv+0x8c>)
    cd92:	687a      	ldr	r2, [r7, #4]
    cd94:	4613      	mov	r3, r2
    cd96:	009b      	lsls	r3, r3, #2
    cd98:	4413      	add	r3, r2
    cd9a:	009b      	lsls	r3, r3, #2
    cd9c:	440b      	add	r3, r1
    cd9e:	2200      	movs	r2, #0
    cda0:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    cda2:	491a      	ldr	r1, [pc, #104]	; (ce0c <_ZL9InitArrayv+0x8c>)
    cda4:	687a      	ldr	r2, [r7, #4]
    cda6:	4613      	mov	r3, r2
    cda8:	009b      	lsls	r3, r3, #2
    cdaa:	4413      	add	r3, r2
    cdac:	009b      	lsls	r3, r3, #2
    cdae:	440b      	add	r3, r1
    cdb0:	330c      	adds	r3, #12
    cdb2:	2200      	movs	r2, #0
    cdb4:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    cdb6:	687b      	ldr	r3, [r7, #4]
    cdb8:	1e5a      	subs	r2, r3, #1
    cdba:	6879      	ldr	r1, [r7, #4]
    cdbc:	460b      	mov	r3, r1
    cdbe:	009b      	lsls	r3, r3, #2
    cdc0:	440b      	add	r3, r1
    cdc2:	009b      	lsls	r3, r3, #2
    cdc4:	4911      	ldr	r1, [pc, #68]	; (ce0c <_ZL9InitArrayv+0x8c>)
    cdc6:	4419      	add	r1, r3
    cdc8:	4810      	ldr	r0, [pc, #64]	; (ce0c <_ZL9InitArrayv+0x8c>)
    cdca:	4613      	mov	r3, r2
    cdcc:	009b      	lsls	r3, r3, #2
    cdce:	4413      	add	r3, r2
    cdd0:	009b      	lsls	r3, r3, #2
    cdd2:	4403      	add	r3, r0
    cdd4:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    cdd6:	4a0e      	ldr	r2, [pc, #56]	; (ce10 <_ZL9InitArrayv+0x90>)
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	2100      	movs	r1, #0
    cddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	3b01      	subs	r3, #1
    cde4:	687a      	ldr	r2, [r7, #4]
    cde6:	0092      	lsls	r2, r2, #2
    cde8:	4909      	ldr	r1, [pc, #36]	; (ce10 <_ZL9InitArrayv+0x90>)
    cdea:	440a      	add	r2, r1
    cdec:	4908      	ldr	r1, [pc, #32]	; (ce10 <_ZL9InitArrayv+0x90>)
    cdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    cdf2:	687b      	ldr	r3, [r7, #4]
    cdf4:	3301      	adds	r3, #1
    cdf6:	607b      	str	r3, [r7, #4]
    cdf8:	e7c7      	b.n	cd8a <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    cdfa:	4b06      	ldr	r3, [pc, #24]	; (ce14 <_ZL9InitArrayv+0x94>)
    cdfc:	2201      	movs	r2, #1
    cdfe:	701a      	strb	r2, [r3, #0]
		
}
    ce00:	bf00      	nop
    ce02:	370c      	adds	r7, #12
    ce04:	46bd      	mov	sp, r7
    ce06:	bc80      	pop	{r7}
    ce08:	4770      	bx	lr
    ce0a:	bf00      	nop
    ce0c:	200010d0 	.word	0x200010d0
    ce10:	20001350 	.word	0x20001350
    ce14:	200013d0 	.word	0x200013d0

0000ce18 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    ce18:	b580      	push	{r7, lr}
    ce1a:	b082      	sub	sp, #8
    ce1c:	af00      	add	r7, sp, #0
    ce1e:	6078      	str	r0, [r7, #4]
	ticks=0;
    ce20:	687b      	ldr	r3, [r7, #4]
    ce22:	2200      	movs	r2, #0
    ce24:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    ce26:	4b0d      	ldr	r3, [pc, #52]	; (ce5c <_ZN11Timer_Class4InitEv+0x44>)
    ce28:	781b      	ldrb	r3, [r3, #0]
    ce2a:	f083 0301 	eor.w	r3, r3, #1
    ce2e:	b2db      	uxtb	r3, r3
    ce30:	2b00      	cmp	r3, #0
    ce32:	d001      	beq.n	ce38 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    ce34:	4b0a      	ldr	r3, [pc, #40]	; (ce60 <_ZN11Timer_Class4InitEv+0x48>)
    ce36:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    ce38:	6878      	ldr	r0, [r7, #4]
    ce3a:	4b0a      	ldr	r3, [pc, #40]	; (ce64 <_ZN11Timer_Class4InitEv+0x4c>)
    ce3c:	4798      	blx	r3
    ce3e:	4603      	mov	r3, r0
    ce40:	2b00      	cmp	r3, #0
    ce42:	bf0c      	ite	eq
    ce44:	2301      	moveq	r3, #1
    ce46:	2300      	movne	r3, #0
    ce48:	b2da      	uxtb	r2, r3
    ce4a:	687b      	ldr	r3, [r7, #4]
    ce4c:	709a      	strb	r2, [r3, #2]
	return isOK;
    ce4e:	687b      	ldr	r3, [r7, #4]
    ce50:	789b      	ldrb	r3, [r3, #2]
    ce52:	b2db      	uxtb	r3, r3
}
    ce54:	4618      	mov	r0, r3
    ce56:	3708      	adds	r7, #8
    ce58:	46bd      	mov	sp, r7
    ce5a:	bd80      	pop	{r7, pc}
    ce5c:	200013d0 	.word	0x200013d0
    ce60:	0000cd81 	.word	0x0000cd81
    ce64:	0000ce69 	.word	0x0000ce69

0000ce68 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    ce68:	b580      	push	{r7, lr}
    ce6a:	b084      	sub	sp, #16
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    ce70:	687b      	ldr	r3, [r7, #4]
    ce72:	68db      	ldr	r3, [r3, #12]
    ce74:	4618      	mov	r0, r3
    ce76:	4b04      	ldr	r3, [pc, #16]	; (ce88 <_ZN11Timer_Class5StartEv+0x20>)
    ce78:	4798      	blx	r3
    ce7a:	60f8      	str	r0, [r7, #12]
	return status;
    ce7c:	68fb      	ldr	r3, [r7, #12]
	
}
    ce7e:	4618      	mov	r0, r3
    ce80:	3710      	adds	r7, #16
    ce82:	46bd      	mov	sp, r7
    ce84:	bd80      	pop	{r7, pc}
    ce86:	bf00      	nop
    ce88:	000025e5 	.word	0x000025e5

0000ce8c <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    ce8c:	b580      	push	{r7, lr}
    ce8e:	b084      	sub	sp, #16
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    ce94:	687b      	ldr	r3, [r7, #4]
    ce96:	68db      	ldr	r3, [r3, #12]
    ce98:	4618      	mov	r0, r3
    ce9a:	4b05      	ldr	r3, [pc, #20]	; (ceb0 <_ZN11Timer_Class4StopEv+0x24>)
    ce9c:	4798      	blx	r3
    ce9e:	60f8      	str	r0, [r7, #12]
	timeout=0;
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	2200      	movs	r2, #0
    cea4:	705a      	strb	r2, [r3, #1]
	return status;
    cea6:	68fb      	ldr	r3, [r7, #12]
}
    cea8:	4618      	mov	r0, r3
    ceaa:	3710      	adds	r7, #16
    ceac:	46bd      	mov	sp, r7
    ceae:	bd80      	pop	{r7, pc}
    ceb0:	0000264d 	.word	0x0000264d

0000ceb4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    ceb4:	b580      	push	{r7, lr}
    ceb6:	b086      	sub	sp, #24
    ceb8:	af00      	add	r7, sp, #0
    ceba:	60f8      	str	r0, [r7, #12]
    cebc:	60b9      	str	r1, [r7, #8]
    cebe:	607a      	str	r2, [r7, #4]
    cec0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    cec2:	68b9      	ldr	r1, [r7, #8]
    cec4:	68f8      	ldr	r0, [r7, #12]
    cec6:	4b0e      	ldr	r3, [pc, #56]	; (cf00 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    cec8:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    ceca:	68fb      	ldr	r3, [r7, #12]
    cecc:	699b      	ldr	r3, [r3, #24]
    cece:	687a      	ldr	r2, [r7, #4]
    ced0:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ced2:	68fb      	ldr	r3, [r7, #12]
    ced4:	699b      	ldr	r3, [r3, #24]
    ced6:	68ba      	ldr	r2, [r7, #8]
    ced8:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ceda:	68fb      	ldr	r3, [r7, #12]
    cedc:	699b      	ldr	r3, [r3, #24]
    cede:	78fa      	ldrb	r2, [r7, #3]
    cee0:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    cee2:	68fb      	ldr	r3, [r7, #12]
    cee4:	68da      	ldr	r2, [r3, #12]
    cee6:	68fb      	ldr	r3, [r7, #12]
    cee8:	699b      	ldr	r3, [r3, #24]
    ceea:	4619      	mov	r1, r3
    ceec:	4610      	mov	r0, r2
    ceee:	4b05      	ldr	r3, [pc, #20]	; (cf04 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    cef0:	4798      	blx	r3
    cef2:	6178      	str	r0, [r7, #20]
	
	return status;
    cef4:	697b      	ldr	r3, [r7, #20]
}
    cef6:	4618      	mov	r0, r3
    cef8:	3718      	adds	r7, #24
    cefa:	46bd      	mov	sp, r7
    cefc:	bd80      	pop	{r7, pc}
    cefe:	bf00      	nop
    cf00:	0000d01d 	.word	0x0000d01d
    cf04:	000026b9 	.word	0x000026b9

0000cf08 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    cf08:	b580      	push	{r7, lr}
    cf0a:	b082      	sub	sp, #8
    cf0c:	af00      	add	r7, sp, #0
    cf0e:	6078      	str	r0, [r7, #4]
    cf10:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    cf12:	6839      	ldr	r1, [r7, #0]
    cf14:	6878      	ldr	r0, [r7, #4]
    cf16:	4b0f      	ldr	r3, [pc, #60]	; (cf54 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    cf18:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    cf1a:	687b      	ldr	r3, [r7, #4]
    cf1c:	68db      	ldr	r3, [r3, #12]
    cf1e:	f103 0218 	add.w	r2, r3, #24
    cf22:	687b      	ldr	r3, [r7, #4]
    cf24:	699b      	ldr	r3, [r3, #24]
    cf26:	4619      	mov	r1, r3
    cf28:	4610      	mov	r0, r2
    cf2a:	4b0b      	ldr	r3, [pc, #44]	; (cf58 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    cf2c:	4798      	blx	r3
    cf2e:	4603      	mov	r3, r0
    cf30:	2b00      	cmp	r3, #0
    cf32:	d007      	beq.n	cf44 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    cf34:	687b      	ldr	r3, [r7, #4]
    cf36:	68da      	ldr	r2, [r3, #12]
    cf38:	687b      	ldr	r3, [r7, #4]
    cf3a:	699b      	ldr	r3, [r3, #24]
    cf3c:	4619      	mov	r1, r3
    cf3e:	4610      	mov	r0, r2
    cf40:	4b06      	ldr	r3, [pc, #24]	; (cf5c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    cf42:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    cf44:	687b      	ldr	r3, [r7, #4]
    cf46:	699b      	ldr	r3, [r3, #24]
    cf48:	2200      	movs	r2, #0
    cf4a:	60da      	str	r2, [r3, #12]
}
    cf4c:	bf00      	nop
    cf4e:	3708      	adds	r7, #8
    cf50:	46bd      	mov	sp, r7
    cf52:	bd80      	pop	{r7, pc}
    cf54:	0000d09d 	.word	0x0000d09d
    cf58:	000033a5 	.word	0x000033a5
    cf5c:	000027bd 	.word	0x000027bd

0000cf60 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    cf60:	b590      	push	{r4, r7, lr}
    cf62:	b087      	sub	sp, #28
    cf64:	af00      	add	r7, sp, #0
    cf66:	60f8      	str	r0, [r7, #12]
    cf68:	60b9      	str	r1, [r7, #8]
    cf6a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    cf6c:	2300      	movs	r3, #0
    cf6e:	687a      	ldr	r2, [r7, #4]
    cf70:	68b9      	ldr	r1, [r7, #8]
    cf72:	68f8      	ldr	r0, [r7, #12]
    cf74:	4c0c      	ldr	r4, [pc, #48]	; (cfa8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    cf76:	47a0      	blx	r4
    cf78:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	68db      	ldr	r3, [r3, #12]
    cf7e:	681b      	ldr	r3, [r3, #0]
    cf80:	699b      	ldr	r3, [r3, #24]
    cf82:	68fa      	ldr	r2, [r7, #12]
    cf84:	68d2      	ldr	r2, [r2, #12]
    cf86:	3204      	adds	r2, #4
    cf88:	4610      	mov	r0, r2
    cf8a:	4798      	blx	r3
    cf8c:	4603      	mov	r3, r0
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d105      	bne.n	cf9e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    cf92:	68fb      	ldr	r3, [r7, #12]
    cf94:	68db      	ldr	r3, [r3, #12]
    cf96:	4618      	mov	r0, r3
    cf98:	4b04      	ldr	r3, [pc, #16]	; (cfac <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    cf9a:	4798      	blx	r3
    cf9c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    cf9e:	697b      	ldr	r3, [r7, #20]
}
    cfa0:	4618      	mov	r0, r3
    cfa2:	371c      	adds	r7, #28
    cfa4:	46bd      	mov	sp, r7
    cfa6:	bd90      	pop	{r4, r7, pc}
    cfa8:	0000ceb5 	.word	0x0000ceb5
    cfac:	000025e5 	.word	0x000025e5

0000cfb0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    cfb0:	b480      	push	{r7}
    cfb2:	b085      	sub	sp, #20
    cfb4:	af00      	add	r7, sp, #0
    cfb6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    cfb8:	2300      	movs	r3, #0
    cfba:	73fb      	strb	r3, [r7, #15]
    cfbc:	7bfb      	ldrb	r3, [r7, #15]
    cfbe:	2b1f      	cmp	r3, #31
    cfc0:	dc23      	bgt.n	d00a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    cfc2:	687b      	ldr	r3, [r7, #4]
    cfc4:	7f1a      	ldrb	r2, [r3, #28]
    cfc6:	7bfb      	ldrb	r3, [r7, #15]
    cfc8:	4413      	add	r3, r2
    cfca:	b2db      	uxtb	r3, r3
    cfcc:	f003 031f 	and.w	r3, r3, #31
    cfd0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    cfd2:	7bba      	ldrb	r2, [r7, #14]
    cfd4:	4910      	ldr	r1, [pc, #64]	; (d018 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    cfd6:	4613      	mov	r3, r2
    cfd8:	009b      	lsls	r3, r3, #2
    cfda:	4413      	add	r3, r2
    cfdc:	009b      	lsls	r3, r3, #2
    cfde:	440b      	add	r3, r1
    cfe0:	330c      	adds	r3, #12
    cfe2:	681b      	ldr	r3, [r3, #0]
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	d10c      	bne.n	d002 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    cfe8:	7bba      	ldrb	r2, [r7, #14]
    cfea:	4613      	mov	r3, r2
    cfec:	009b      	lsls	r3, r3, #2
    cfee:	4413      	add	r3, r2
    cff0:	009b      	lsls	r3, r3, #2
    cff2:	4a09      	ldr	r2, [pc, #36]	; (d018 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    cff4:	441a      	add	r2, r3
    cff6:	687b      	ldr	r3, [r7, #4]
    cff8:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    cffa:	687b      	ldr	r3, [r7, #4]
    cffc:	7bba      	ldrb	r2, [r7, #14]
    cffe:	771a      	strb	r2, [r3, #28]
			return;
    d000:	e006      	b.n	d010 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d002:	7bfb      	ldrb	r3, [r7, #15]
    d004:	3301      	adds	r3, #1
    d006:	73fb      	strb	r3, [r7, #15]
    d008:	e7d8      	b.n	cfbc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d00a:	687b      	ldr	r3, [r7, #4]
    d00c:	4a02      	ldr	r2, [pc, #8]	; (d018 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d00e:	619a      	str	r2, [r3, #24]

}
    d010:	3714      	adds	r7, #20
    d012:	46bd      	mov	sp, r7
    d014:	bc80      	pop	{r7}
    d016:	4770      	bx	lr
    d018:	200010d0 	.word	0x200010d0

0000d01c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    d01c:	b580      	push	{r7, lr}
    d01e:	b084      	sub	sp, #16
    d020:	af00      	add	r7, sp, #0
    d022:	6078      	str	r0, [r7, #4]
    d024:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d026:	2300      	movs	r3, #0
    d028:	73fb      	strb	r3, [r7, #15]
    d02a:	7bfb      	ldrb	r3, [r7, #15]
    d02c:	2b1f      	cmp	r3, #31
    d02e:	dc28      	bgt.n	d082 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d030:	687b      	ldr	r3, [r7, #4]
    d032:	7f1a      	ldrb	r2, [r3, #28]
    d034:	7bfb      	ldrb	r3, [r7, #15]
    d036:	4413      	add	r3, r2
    d038:	b2db      	uxtb	r3, r3
    d03a:	f003 031f 	and.w	r3, r3, #31
    d03e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    d040:	7bba      	ldrb	r2, [r7, #14]
    d042:	4913      	ldr	r1, [pc, #76]	; (d090 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d044:	4613      	mov	r3, r2
    d046:	009b      	lsls	r3, r3, #2
    d048:	4413      	add	r3, r2
    d04a:	009b      	lsls	r3, r3, #2
    d04c:	440b      	add	r3, r1
    d04e:	330c      	adds	r3, #12
    d050:	681a      	ldr	r2, [r3, #0]
    d052:	683b      	ldr	r3, [r7, #0]
    d054:	429a      	cmp	r2, r3
    d056:	d110      	bne.n	d07a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    d058:	6839      	ldr	r1, [r7, #0]
    d05a:	6878      	ldr	r0, [r7, #4]
    d05c:	4b0d      	ldr	r3, [pc, #52]	; (d094 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    d05e:	4798      	blx	r3
			task=&taskArray[j];
    d060:	7bba      	ldrb	r2, [r7, #14]
    d062:	4613      	mov	r3, r2
    d064:	009b      	lsls	r3, r3, #2
    d066:	4413      	add	r3, r2
    d068:	009b      	lsls	r3, r3, #2
    d06a:	4a09      	ldr	r2, [pc, #36]	; (d090 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d06c:	441a      	add	r2, r3
    d06e:	687b      	ldr	r3, [r7, #4]
    d070:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d072:	687b      	ldr	r3, [r7, #4]
    d074:	7bba      	ldrb	r2, [r7, #14]
    d076:	771a      	strb	r2, [r3, #28]
			return;
    d078:	e006      	b.n	d088 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d07a:	7bfb      	ldrb	r3, [r7, #15]
    d07c:	3301      	adds	r3, #1
    d07e:	73fb      	strb	r3, [r7, #15]
    d080:	e7d3      	b.n	d02a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    d082:	6878      	ldr	r0, [r7, #4]
    d084:	4b04      	ldr	r3, [pc, #16]	; (d098 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    d086:	4798      	blx	r3
	//task=&taskArray[0];

}
    d088:	3710      	adds	r7, #16
    d08a:	46bd      	mov	sp, r7
    d08c:	bd80      	pop	{r7, pc}
    d08e:	bf00      	nop
    d090:	200010d0 	.word	0x200010d0
    d094:	0000cf09 	.word	0x0000cf09
    d098:	0000cfb1 	.word	0x0000cfb1

0000d09c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    d09c:	b480      	push	{r7}
    d09e:	b085      	sub	sp, #20
    d0a0:	af00      	add	r7, sp, #0
    d0a2:	6078      	str	r0, [r7, #4]
    d0a4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d0a6:	2300      	movs	r3, #0
    d0a8:	73fb      	strb	r3, [r7, #15]
    d0aa:	7bfb      	ldrb	r3, [r7, #15]
    d0ac:	2b1f      	cmp	r3, #31
    d0ae:	dc19      	bgt.n	d0e4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    d0b0:	7bfa      	ldrb	r2, [r7, #15]
    d0b2:	490f      	ldr	r1, [pc, #60]	; (d0f0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d0b4:	4613      	mov	r3, r2
    d0b6:	009b      	lsls	r3, r3, #2
    d0b8:	4413      	add	r3, r2
    d0ba:	009b      	lsls	r3, r3, #2
    d0bc:	440b      	add	r3, r1
    d0be:	330c      	adds	r3, #12
    d0c0:	681a      	ldr	r2, [r3, #0]
    d0c2:	683b      	ldr	r3, [r7, #0]
    d0c4:	429a      	cmp	r2, r3
    d0c6:	d109      	bne.n	d0dc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    d0c8:	7bfa      	ldrb	r2, [r7, #15]
    d0ca:	4613      	mov	r3, r2
    d0cc:	009b      	lsls	r3, r3, #2
    d0ce:	4413      	add	r3, r2
    d0d0:	009b      	lsls	r3, r3, #2
    d0d2:	4a07      	ldr	r2, [pc, #28]	; (d0f0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d0d4:	441a      	add	r2, r3
    d0d6:	687b      	ldr	r3, [r7, #4]
    d0d8:	619a      	str	r2, [r3, #24]
			return;
    d0da:	e004      	b.n	d0e6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d0dc:	7bfb      	ldrb	r3, [r7, #15]
    d0de:	3301      	adds	r3, #1
    d0e0:	73fb      	strb	r3, [r7, #15]
    d0e2:	e7e2      	b.n	d0aa <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    d0e4:	bf00      	nop
}
    d0e6:	3714      	adds	r7, #20
    d0e8:	46bd      	mov	sp, r7
    d0ea:	bc80      	pop	{r7}
    d0ec:	4770      	bx	lr
    d0ee:	bf00      	nop
    d0f0:	200010d0 	.word	0x200010d0

0000d0f4 <_Z41__static_initialization_and_destruction_0ii>:
    d0f4:	b580      	push	{r7, lr}
    d0f6:	b082      	sub	sp, #8
    d0f8:	af00      	add	r7, sp, #0
    d0fa:	6078      	str	r0, [r7, #4]
    d0fc:	6039      	str	r1, [r7, #0]
    d0fe:	687b      	ldr	r3, [r7, #4]
    d100:	2b01      	cmp	r3, #1
    d102:	d14c      	bne.n	d19e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    d104:	683b      	ldr	r3, [r7, #0]
    d106:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d10a:	4293      	cmp	r3, r2
    d10c:	d147      	bne.n	d19e <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d10e:	4926      	ldr	r1, [pc, #152]	; (d1a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    d110:	4826      	ldr	r0, [pc, #152]	; (d1ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d112:	4b27      	ldr	r3, [pc, #156]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d114:	4798      	blx	r3
    d116:	4a27      	ldr	r2, [pc, #156]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d118:	4927      	ldr	r1, [pc, #156]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d11a:	4824      	ldr	r0, [pc, #144]	; (d1ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d11c:	4b27      	ldr	r3, [pc, #156]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d11e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d120:	4927      	ldr	r1, [pc, #156]	; (d1c0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d122:	4828      	ldr	r0, [pc, #160]	; (d1c4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d124:	4b22      	ldr	r3, [pc, #136]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d126:	4798      	blx	r3
    d128:	4a22      	ldr	r2, [pc, #136]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d12a:	4923      	ldr	r1, [pc, #140]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d12c:	4825      	ldr	r0, [pc, #148]	; (d1c4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d12e:	4b23      	ldr	r3, [pc, #140]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d130:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d132:	4925      	ldr	r1, [pc, #148]	; (d1c8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d134:	4825      	ldr	r0, [pc, #148]	; (d1cc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d136:	4b1e      	ldr	r3, [pc, #120]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d138:	4798      	blx	r3
    d13a:	4a1e      	ldr	r2, [pc, #120]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d13c:	491e      	ldr	r1, [pc, #120]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d13e:	4823      	ldr	r0, [pc, #140]	; (d1cc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d140:	4b1e      	ldr	r3, [pc, #120]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d142:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d144:	4922      	ldr	r1, [pc, #136]	; (d1d0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d146:	4823      	ldr	r0, [pc, #140]	; (d1d4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d148:	4b19      	ldr	r3, [pc, #100]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d14a:	4798      	blx	r3
    d14c:	4a19      	ldr	r2, [pc, #100]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d14e:	491a      	ldr	r1, [pc, #104]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d150:	4820      	ldr	r0, [pc, #128]	; (d1d4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d152:	4b1a      	ldr	r3, [pc, #104]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d154:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d156:	4920      	ldr	r1, [pc, #128]	; (d1d8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d158:	4820      	ldr	r0, [pc, #128]	; (d1dc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d15a:	4b15      	ldr	r3, [pc, #84]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d15c:	4798      	blx	r3
    d15e:	4a15      	ldr	r2, [pc, #84]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d160:	4915      	ldr	r1, [pc, #84]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d162:	481e      	ldr	r0, [pc, #120]	; (d1dc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d164:	4b15      	ldr	r3, [pc, #84]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d166:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d168:	491d      	ldr	r1, [pc, #116]	; (d1e0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d16a:	481e      	ldr	r0, [pc, #120]	; (d1e4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d16c:	4b10      	ldr	r3, [pc, #64]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d16e:	4798      	blx	r3
    d170:	4a10      	ldr	r2, [pc, #64]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d172:	4911      	ldr	r1, [pc, #68]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d174:	481b      	ldr	r0, [pc, #108]	; (d1e4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d176:	4b11      	ldr	r3, [pc, #68]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d178:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d17a:	491b      	ldr	r1, [pc, #108]	; (d1e8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d17c:	481b      	ldr	r0, [pc, #108]	; (d1ec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d17e:	4b0c      	ldr	r3, [pc, #48]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d180:	4798      	blx	r3
    d182:	4a0c      	ldr	r2, [pc, #48]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d184:	490c      	ldr	r1, [pc, #48]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d186:	4819      	ldr	r0, [pc, #100]	; (d1ec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d188:	4b0c      	ldr	r3, [pc, #48]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d18a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    d18c:	4918      	ldr	r1, [pc, #96]	; (d1f0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    d18e:	4819      	ldr	r0, [pc, #100]	; (d1f4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d190:	4b07      	ldr	r3, [pc, #28]	; (d1b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d192:	4798      	blx	r3
    d194:	4a07      	ldr	r2, [pc, #28]	; (d1b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d196:	4908      	ldr	r1, [pc, #32]	; (d1b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d198:	4816      	ldr	r0, [pc, #88]	; (d1f4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d19a:	4b08      	ldr	r3, [pc, #32]	; (d1bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d19c:	4798      	blx	r3
    d19e:	bf00      	nop
    d1a0:	3708      	adds	r7, #8
    d1a2:	46bd      	mov	sp, r7
    d1a4:	bd80      	pop	{r7, pc}
    d1a6:	bf00      	nop
    d1a8:	2000926c 	.word	0x2000926c
    d1ac:	20000fcc 	.word	0x20000fcc
    d1b0:	0000cd2d 	.word	0x0000cd2d
    d1b4:	20000000 	.word	0x20000000
    d1b8:	0000cd65 	.word	0x0000cd65
    d1bc:	00010a09 	.word	0x00010a09
    d1c0:	20009300 	.word	0x20009300
    d1c4:	20000fec 	.word	0x20000fec
    d1c8:	20009424 	.word	0x20009424
    d1cc:	2000100c 	.word	0x2000100c
    d1d0:	20009320 	.word	0x20009320
    d1d4:	2000102c 	.word	0x2000102c
    d1d8:	200093e4 	.word	0x200093e4
    d1dc:	2000104c 	.word	0x2000104c
    d1e0:	20009404 	.word	0x20009404
    d1e4:	2000106c 	.word	0x2000106c
    d1e8:	200092dc 	.word	0x200092dc
    d1ec:	2000108c 	.word	0x2000108c
    d1f0:	2000937c 	.word	0x2000937c
    d1f4:	200010ac 	.word	0x200010ac

0000d1f8 <_GLOBAL__sub_I_ptrTimerClass>:
    d1f8:	b580      	push	{r7, lr}
    d1fa:	af00      	add	r7, sp, #0
    d1fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d200:	2001      	movs	r0, #1
    d202:	4b01      	ldr	r3, [pc, #4]	; (d208 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    d204:	4798      	blx	r3
    d206:	bd80      	pop	{r7, pc}
    d208:	0000d0f5 	.word	0x0000d0f5

0000d20c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d20c:	b480      	push	{r7}
    d20e:	b083      	sub	sp, #12
    d210:	af00      	add	r7, sp, #0
    d212:	6078      	str	r0, [r7, #4]
    d214:	4a05      	ldr	r2, [pc, #20]	; (d22c <_ZN5PrintC1Ev+0x20>)
    d216:	687b      	ldr	r3, [r7, #4]
    d218:	601a      	str	r2, [r3, #0]
    d21a:	687b      	ldr	r3, [r7, #4]
    d21c:	2200      	movs	r2, #0
    d21e:	605a      	str	r2, [r3, #4]
    d220:	687b      	ldr	r3, [r7, #4]
    d222:	4618      	mov	r0, r3
    d224:	370c      	adds	r7, #12
    d226:	46bd      	mov	sp, r7
    d228:	bc80      	pop	{r7}
    d22a:	4770      	bx	lr
    d22c:	0001152c 	.word	0x0001152c

0000d230 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d230:	b480      	push	{r7}
    d232:	b083      	sub	sp, #12
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
    d238:	2300      	movs	r3, #0
    d23a:	4618      	mov	r0, r3
    d23c:	370c      	adds	r7, #12
    d23e:	46bd      	mov	sp, r7
    d240:	bc80      	pop	{r7}
    d242:	4770      	bx	lr

0000d244 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d244:	b480      	push	{r7}
    d246:	b083      	sub	sp, #12
    d248:	af00      	add	r7, sp, #0
    d24a:	6078      	str	r0, [r7, #4]
    d24c:	bf00      	nop
    d24e:	370c      	adds	r7, #12
    d250:	46bd      	mov	sp, r7
    d252:	bc80      	pop	{r7}
    d254:	4770      	bx	lr
	...

0000d258 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d258:	b580      	push	{r7, lr}
    d25a:	b082      	sub	sp, #8
    d25c:	af00      	add	r7, sp, #0
    d25e:	6078      	str	r0, [r7, #4]
    d260:	687b      	ldr	r3, [r7, #4]
    d262:	4618      	mov	r0, r3
    d264:	4b06      	ldr	r3, [pc, #24]	; (d280 <_ZN6StreamC1Ev+0x28>)
    d266:	4798      	blx	r3
    d268:	4a06      	ldr	r2, [pc, #24]	; (d284 <_ZN6StreamC1Ev+0x2c>)
    d26a:	687b      	ldr	r3, [r7, #4]
    d26c:	601a      	str	r2, [r3, #0]
    d26e:	687b      	ldr	r3, [r7, #4]
    d270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d274:	609a      	str	r2, [r3, #8]
    d276:	687b      	ldr	r3, [r7, #4]
    d278:	4618      	mov	r0, r3
    d27a:	3708      	adds	r7, #8
    d27c:	46bd      	mov	sp, r7
    d27e:	bd80      	pop	{r7, pc}
    d280:	0000d20d 	.word	0x0000d20d
    d284:	000114f0 	.word	0x000114f0

0000d288 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    d288:	b480      	push	{r7}
    d28a:	b083      	sub	sp, #12
    d28c:	af00      	add	r7, sp, #0
    d28e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    d290:	4b06      	ldr	r3, [pc, #24]	; (d2ac <_ZL10USBTimeoutPK10timer_task+0x24>)
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	2201      	movs	r2, #1
    d296:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    d298:	4b04      	ldr	r3, [pc, #16]	; (d2ac <_ZL10USBTimeoutPK10timer_task+0x24>)
    d29a:	681b      	ldr	r3, [r3, #0]
    d29c:	2200      	movs	r2, #0
    d29e:	741a      	strb	r2, [r3, #16]
	
}
    d2a0:	bf00      	nop
    d2a2:	370c      	adds	r7, #12
    d2a4:	46bd      	mov	sp, r7
    d2a6:	bc80      	pop	{r7}
    d2a8:	4770      	bx	lr
    d2aa:	bf00      	nop
    d2ac:	200014d4 	.word	0x200014d4

0000d2b0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d2b0:	b480      	push	{r7}
    d2b2:	b083      	sub	sp, #12
    d2b4:	af00      	add	r7, sp, #0
    d2b6:	4603      	mov	r3, r0
    d2b8:	603a      	str	r2, [r7, #0]
    d2ba:	71fb      	strb	r3, [r7, #7]
    d2bc:	460b      	mov	r3, r1
    d2be:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d2c0:	4b08      	ldr	r3, [pc, #32]	; (d2e4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d2c2:	681b      	ldr	r3, [r3, #0]
    d2c4:	2201      	movs	r2, #1
    d2c6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    d2c8:	4b06      	ldr	r3, [pc, #24]	; (d2e4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d2ca:	681b      	ldr	r3, [r3, #0]
    d2cc:	2201      	movs	r2, #1
    d2ce:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d2d0:	4b04      	ldr	r3, [pc, #16]	; (d2e4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d2d2:	681b      	ldr	r3, [r3, #0]
    d2d4:	2201      	movs	r2, #1
    d2d6:	741a      	strb	r2, [r3, #16]


	return false;
    d2d8:	2300      	movs	r3, #0
}
    d2da:	4618      	mov	r0, r3
    d2dc:	370c      	adds	r7, #12
    d2de:	46bd      	mov	sp, r7
    d2e0:	bc80      	pop	{r7}
    d2e2:	4770      	bx	lr
    d2e4:	200014d4 	.word	0x200014d4

0000d2e8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d2e8:	b480      	push	{r7}
    d2ea:	b083      	sub	sp, #12
    d2ec:	af00      	add	r7, sp, #0
    d2ee:	4603      	mov	r3, r0
    d2f0:	603a      	str	r2, [r7, #0]
    d2f2:	71fb      	strb	r3, [r7, #7]
    d2f4:	460b      	mov	r3, r1
    d2f6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d2f8:	4b08      	ldr	r3, [pc, #32]	; (d31c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d2fa:	681b      	ldr	r3, [r3, #0]
    d2fc:	2201      	movs	r2, #1
    d2fe:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    d300:	4b06      	ldr	r3, [pc, #24]	; (d31c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d302:	681b      	ldr	r3, [r3, #0]
    d304:	2201      	movs	r2, #1
    d306:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d308:	4b04      	ldr	r3, [pc, #16]	; (d31c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d30a:	681b      	ldr	r3, [r3, #0]
    d30c:	2201      	movs	r2, #1
    d30e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d310:	2300      	movs	r3, #0
}
    d312:	4618      	mov	r0, r3
    d314:	370c      	adds	r7, #12
    d316:	46bd      	mov	sp, r7
    d318:	bc80      	pop	{r7}
    d31a:	4770      	bx	lr
    d31c:	200014d4 	.word	0x200014d4

0000d320 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d320:	b580      	push	{r7, lr}
    d322:	b082      	sub	sp, #8
    d324:	af00      	add	r7, sp, #0
    d326:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d328:	793b      	ldrb	r3, [r7, #4]
    d32a:	f003 0301 	and.w	r3, r3, #1
    d32e:	b2db      	uxtb	r3, r3
    d330:	2b00      	cmp	r3, #0
    d332:	d013      	beq.n	d35c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d334:	490c      	ldr	r1, [pc, #48]	; (d368 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d336:	2000      	movs	r0, #0
    d338:	4b0c      	ldr	r3, [pc, #48]	; (d36c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d33a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d33c:	490c      	ldr	r1, [pc, #48]	; (d370 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d33e:	2001      	movs	r0, #1
    d340:	4b0a      	ldr	r3, [pc, #40]	; (d36c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d342:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d344:	4b0b      	ldr	r3, [pc, #44]	; (d374 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d346:	681b      	ldr	r3, [r3, #0]
    d348:	2201      	movs	r2, #1
    d34a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d34c:	4b09      	ldr	r3, [pc, #36]	; (d374 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d34e:	681b      	ldr	r3, [r3, #0]
    d350:	2201      	movs	r2, #1
    d352:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    d354:	4b07      	ldr	r3, [pc, #28]	; (d374 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d356:	681b      	ldr	r3, [r3, #0]
    d358:	2201      	movs	r2, #1
    d35a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d35c:	2300      	movs	r3, #0
}
    d35e:	4618      	mov	r0, r3
    d360:	3708      	adds	r7, #8
    d362:	46bd      	mov	sp, r7
    d364:	bd80      	pop	{r7, pc}
    d366:	bf00      	nop
    d368:	0000d2b1 	.word	0x0000d2b1
    d36c:	0000bcf5 	.word	0x0000bcf5
    d370:	0000d2e9 	.word	0x0000d2e9
    d374:	200014d4 	.word	0x200014d4

0000d378 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d378:	b580      	push	{r7, lr}
    d37a:	b082      	sub	sp, #8
    d37c:	af00      	add	r7, sp, #0
    d37e:	6078      	str	r0, [r7, #4]
    d380:	687b      	ldr	r3, [r7, #4]
    d382:	4618      	mov	r0, r3
    d384:	4b0a      	ldr	r3, [pc, #40]	; (d3b0 <_ZN9CDC_ClassC1Ev+0x38>)
    d386:	4798      	blx	r3
    d388:	687b      	ldr	r3, [r7, #4]
    d38a:	3310      	adds	r3, #16
    d38c:	4618      	mov	r0, r3
    d38e:	4b09      	ldr	r3, [pc, #36]	; (d3b4 <_ZN9CDC_ClassC1Ev+0x3c>)
    d390:	4798      	blx	r3
    d392:	4a09      	ldr	r2, [pc, #36]	; (d3b8 <_ZN9CDC_ClassC1Ev+0x40>)
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d398:	687b      	ldr	r3, [r7, #4]
    d39a:	f04f 32ff 	mov.w	r2, #4294967295
    d39e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d3a0:	4a06      	ldr	r2, [pc, #24]	; (d3bc <_ZN9CDC_ClassC1Ev+0x44>)
    d3a2:	687b      	ldr	r3, [r7, #4]
    d3a4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	4618      	mov	r0, r3
    d3aa:	3708      	adds	r7, #8
    d3ac:	46bd      	mov	sp, r7
    d3ae:	bd80      	pop	{r7, pc}
    d3b0:	0000d259 	.word	0x0000d259
    d3b4:	0000dac1 	.word	0x0000dac1
    d3b8:	000114c0 	.word	0x000114c0
    d3bc:	200014d4 	.word	0x200014d4

0000d3c0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b082      	sub	sp, #8
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	6078      	str	r0, [r7, #4]
    d3c8:	4a06      	ldr	r2, [pc, #24]	; (d3e4 <_ZN9CDC_ClassD1Ev+0x24>)
    d3ca:	687b      	ldr	r3, [r7, #4]
    d3cc:	601a      	str	r2, [r3, #0]
    d3ce:	687b      	ldr	r3, [r7, #4]
    d3d0:	3310      	adds	r3, #16
    d3d2:	4618      	mov	r0, r3
    d3d4:	4b04      	ldr	r3, [pc, #16]	; (d3e8 <_ZN9CDC_ClassD1Ev+0x28>)
    d3d6:	4798      	blx	r3
{
} //~CDC_Class
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	4618      	mov	r0, r3
    d3dc:	3708      	adds	r7, #8
    d3de:	46bd      	mov	sp, r7
    d3e0:	bd80      	pop	{r7, pc}
    d3e2:	bf00      	nop
    d3e4:	000114c0 	.word	0x000114c0
    d3e8:	0000dae1 	.word	0x0000dae1

0000d3ec <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    d3ec:	b580      	push	{r7, lr}
    d3ee:	b082      	sub	sp, #8
    d3f0:	af00      	add	r7, sp, #0
    d3f2:	6078      	str	r0, [r7, #4]
	
	OnInit();
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	3310      	adds	r3, #16
    d3f8:	4618      	mov	r0, r3
    d3fa:	4b09      	ldr	r3, [pc, #36]	; (d420 <_ZN9CDC_Class4InitEv+0x34>)
    d3fc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    d3fe:	4909      	ldr	r1, [pc, #36]	; (d424 <_ZN9CDC_Class4InitEv+0x38>)
    d400:	2003      	movs	r0, #3
    d402:	4b09      	ldr	r3, [pc, #36]	; (d428 <_ZN9CDC_Class4InitEv+0x3c>)
    d404:	4798      	blx	r3
	delay_ms(100);
    d406:	2064      	movs	r0, #100	; 0x64
    d408:	4b08      	ldr	r3, [pc, #32]	; (d42c <_ZN9CDC_Class4InitEv+0x40>)
    d40a:	4798      	blx	r3
		
	if (connected)
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    d410:	2064      	movs	r0, #100	; 0x64
    d412:	4b06      	ldr	r3, [pc, #24]	; (d42c <_ZN9CDC_Class4InitEv+0x40>)
    d414:	4798      	blx	r3

	

}
    d416:	bf00      	nop
    d418:	3708      	adds	r7, #8
    d41a:	46bd      	mov	sp, r7
    d41c:	bd80      	pop	{r7, pc}
    d41e:	bf00      	nop
    d420:	0000daf5 	.word	0x0000daf5
    d424:	0000d321 	.word	0x0000d321
    d428:	0000bcf5 	.word	0x0000bcf5
    d42c:	00001e01 	.word	0x00001e01

0000d430 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    d430:	b580      	push	{r7, lr}
    d432:	b082      	sub	sp, #8
    d434:	af00      	add	r7, sp, #0
    d436:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    d438:	4b03      	ldr	r3, [pc, #12]	; (d448 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    d43a:	4798      	blx	r3
    d43c:	4603      	mov	r3, r0
	
}
    d43e:	4618      	mov	r0, r3
    d440:	3708      	adds	r7, #8
    d442:	46bd      	mov	sp, r7
    d444:	bd80      	pop	{r7, pc}
    d446:	bf00      	nop
    d448:	0000bd6d 	.word	0x0000bd6d

0000d44c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    d44c:	b580      	push	{r7, lr}
    d44e:	b084      	sub	sp, #16
    d450:	af00      	add	r7, sp, #0
    d452:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	699b      	ldr	r3, [r3, #24]
    d458:	f1b3 3fff 	cmp.w	r3, #4294967295
    d45c:	bf14      	ite	ne
    d45e:	2301      	movne	r3, #1
    d460:	2300      	moveq	r3, #0
    d462:	b2db      	uxtb	r3, r3
    d464:	2b00      	cmp	r3, #0
    d466:	d002      	beq.n	d46e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	699b      	ldr	r3, [r3, #24]
    d46c:	e011      	b.n	d492 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    d46e:	687b      	ldr	r3, [r7, #4]
    d470:	681b      	ldr	r3, [r3, #0]
    d472:	331c      	adds	r3, #28
    d474:	681b      	ldr	r3, [r3, #0]
    d476:	f107 010f 	add.w	r1, r7, #15
    d47a:	2201      	movs	r2, #1
    d47c:	6878      	ldr	r0, [r7, #4]
    d47e:	4798      	blx	r3
    d480:	4602      	mov	r2, r0
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    d486:	7bfb      	ldrb	r3, [r7, #15]
    d488:	461a      	mov	r2, r3
    d48a:	687b      	ldr	r3, [r7, #4]
    d48c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    d48e:	687b      	ldr	r3, [r7, #4]
    d490:	699b      	ldr	r3, [r3, #24]
}
    d492:	4618      	mov	r0, r3
    d494:	3710      	adds	r7, #16
    d496:	46bd      	mov	sp, r7
    d498:	bd80      	pop	{r7, pc}
	...

0000d49c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    d49c:	b580      	push	{r7, lr}
    d49e:	b086      	sub	sp, #24
    d4a0:	af00      	add	r7, sp, #0
    d4a2:	60f8      	str	r0, [r7, #12]
    d4a4:	60b9      	str	r1, [r7, #8]
    d4a6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    d4a8:	68fb      	ldr	r3, [r7, #12]
    d4aa:	7c1b      	ldrb	r3, [r3, #16]
    d4ac:	b2db      	uxtb	r3, r3
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	d02e      	beq.n	d510 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    d4b2:	687a      	ldr	r2, [r7, #4]
    d4b4:	4613      	mov	r3, r2
    d4b6:	009b      	lsls	r3, r3, #2
    d4b8:	4413      	add	r3, r2
    d4ba:	005b      	lsls	r3, r3, #1
    d4bc:	461a      	mov	r2, r3
    d4be:	4918      	ldr	r1, [pc, #96]	; (d520 <_ZN9CDC_Class8readDataEPvl+0x84>)
    d4c0:	4818      	ldr	r0, [pc, #96]	; (d524 <_ZN9CDC_Class8readDataEPvl+0x88>)
    d4c2:	4b19      	ldr	r3, [pc, #100]	; (d528 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    d4c4:	4798      	blx	r3
		rxReady=false;
    d4c6:	68fb      	ldr	r3, [r7, #12]
    d4c8:	2200      	movs	r2, #0
    d4ca:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    d4cc:	687b      	ldr	r3, [r7, #4]
    d4ce:	4619      	mov	r1, r3
    d4d0:	68b8      	ldr	r0, [r7, #8]
    d4d2:	4b16      	ldr	r3, [pc, #88]	; (d52c <_ZN9CDC_Class8readDataEPvl+0x90>)
    d4d4:	4798      	blx	r3
    d4d6:	4603      	mov	r3, r0
    d4d8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    d4da:	68fb      	ldr	r3, [r7, #12]
    d4dc:	7d5b      	ldrb	r3, [r3, #21]
    d4de:	b2db      	uxtb	r3, r3
    d4e0:	f083 0301 	eor.w	r3, r3, #1
    d4e4:	b2db      	uxtb	r3, r3
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d006      	beq.n	d4f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    d4ea:	68fb      	ldr	r3, [r7, #12]
    d4ec:	7c1b      	ldrb	r3, [r3, #16]
    d4ee:	b2db      	uxtb	r3, r3
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d001      	beq.n	d4f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    d4f4:	2301      	movs	r3, #1
    d4f6:	e000      	b.n	d4fa <_ZN9CDC_Class8readDataEPvl+0x5e>
    d4f8:	2300      	movs	r3, #0
    d4fa:	2b00      	cmp	r3, #0
    d4fc:	d000      	beq.n	d500 <_ZN9CDC_Class8readDataEPvl+0x64>
    d4fe:	e7ec      	b.n	d4da <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    d500:	4808      	ldr	r0, [pc, #32]	; (d524 <_ZN9CDC_Class8readDataEPvl+0x88>)
    d502:	4b0b      	ldr	r3, [pc, #44]	; (d530 <_ZN9CDC_Class8readDataEPvl+0x94>)
    d504:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    d506:	4906      	ldr	r1, [pc, #24]	; (d520 <_ZN9CDC_Class8readDataEPvl+0x84>)
    d508:	4806      	ldr	r0, [pc, #24]	; (d524 <_ZN9CDC_Class8readDataEPvl+0x88>)
    d50a:	4b0a      	ldr	r3, [pc, #40]	; (d534 <_ZN9CDC_Class8readDataEPvl+0x98>)
    d50c:	4798      	blx	r3
    d50e:	e001      	b.n	d514 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    d510:	2300      	movs	r3, #0
    d512:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    d514:	7dfb      	ldrb	r3, [r7, #23]
}
    d516:	4618      	mov	r0, r3
    d518:	3718      	adds	r7, #24
    d51a:	46bd      	mov	sp, r7
    d51c:	bd80      	pop	{r7, pc}
    d51e:	bf00      	nop
    d520:	0000d289 	.word	0x0000d289
    d524:	20001474 	.word	0x20001474
    d528:	0000cf61 	.word	0x0000cf61
    d52c:	0000bc49 	.word	0x0000bc49
    d530:	0000ce8d 	.word	0x0000ce8d
    d534:	0000cf09 	.word	0x0000cf09

0000d538 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    d538:	b580      	push	{r7, lr}
    d53a:	b084      	sub	sp, #16
    d53c:	af00      	add	r7, sp, #0
    d53e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	2200      	movs	r2, #0
    d544:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    d546:	f107 030f 	add.w	r3, r7, #15
    d54a:	2101      	movs	r1, #1
    d54c:	4618      	mov	r0, r3
    d54e:	4b08      	ldr	r3, [pc, #32]	; (d570 <_ZN9CDC_Class4readEv+0x38>)
    d550:	4798      	blx	r3
	while(!rxReady);
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	7d5b      	ldrb	r3, [r3, #21]
    d556:	b2db      	uxtb	r3, r3
    d558:	f083 0301 	eor.w	r3, r3, #1
    d55c:	b2db      	uxtb	r3, r3
    d55e:	2b00      	cmp	r3, #0
    d560:	d000      	beq.n	d564 <_ZN9CDC_Class4readEv+0x2c>
    d562:	e7f6      	b.n	d552 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    d564:	7bfb      	ldrb	r3, [r7, #15]
}
    d566:	4618      	mov	r0, r3
    d568:	3710      	adds	r7, #16
    d56a:	46bd      	mov	sp, r7
    d56c:	bd80      	pop	{r7, pc}
    d56e:	bf00      	nop
    d570:	0000bc49 	.word	0x0000bc49

0000d574 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    d574:	b580      	push	{r7, lr}
    d576:	b082      	sub	sp, #8
    d578:	af00      	add	r7, sp, #0
    d57a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	331c      	adds	r3, #28
    d580:	2140      	movs	r1, #64	; 0x40
    d582:	4618      	mov	r0, r3
    d584:	4b02      	ldr	r3, [pc, #8]	; (d590 <_ZN9CDC_Class5flushEv+0x1c>)
    d586:	4798      	blx	r3
}
    d588:	bf00      	nop
    d58a:	3708      	adds	r7, #8
    d58c:	46bd      	mov	sp, r7
    d58e:	bd80      	pop	{r7, pc}
    d590:	0000bc8d 	.word	0x0000bc8d

0000d594 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    d594:	b580      	push	{r7, lr}
    d596:	b082      	sub	sp, #8
    d598:	af00      	add	r7, sp, #0
    d59a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    d59c:	4b02      	ldr	r3, [pc, #8]	; (d5a8 <_ZN9CDC_Class5clearEv+0x14>)
    d59e:	4798      	blx	r3
}
    d5a0:	bf00      	nop
    d5a2:	3708      	adds	r7, #8
    d5a4:	46bd      	mov	sp, r7
    d5a6:	bd80      	pop	{r7, pc}
    d5a8:	0000bcd1 	.word	0x0000bcd1

0000d5ac <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    d5ac:	b580      	push	{r7, lr}
    d5ae:	b082      	sub	sp, #8
    d5b0:	af00      	add	r7, sp, #0
    d5b2:	6078      	str	r0, [r7, #4]
    d5b4:	460b      	mov	r3, r1
    d5b6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    d5b8:	687b      	ldr	r3, [r7, #4]
    d5ba:	7c1b      	ldrb	r3, [r3, #16]
    d5bc:	b2db      	uxtb	r3, r3
    d5be:	2b00      	cmp	r3, #0
    d5c0:	d012      	beq.n	d5e8 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	7d1b      	ldrb	r3, [r3, #20]
    d5c6:	b2db      	uxtb	r3, r3
    d5c8:	f083 0301 	eor.w	r3, r3, #1
    d5cc:	b2db      	uxtb	r3, r3
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d000      	beq.n	d5d4 <_ZN9CDC_Class5writeEh+0x28>
    d5d2:	e7f6      	b.n	d5c2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    d5d4:	687b      	ldr	r3, [r7, #4]
    d5d6:	681b      	ldr	r3, [r3, #0]
    d5d8:	3324      	adds	r3, #36	; 0x24
    d5da:	681b      	ldr	r3, [r3, #0]
    d5dc:	1cf9      	adds	r1, r7, #3
    d5de:	2201      	movs	r2, #1
    d5e0:	6878      	ldr	r0, [r7, #4]
    d5e2:	4798      	blx	r3
    d5e4:	4603      	mov	r3, r0
    d5e6:	e000      	b.n	d5ea <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    d5e8:	2300      	movs	r3, #0
	}
		
}
    d5ea:	4618      	mov	r0, r3
    d5ec:	3708      	adds	r7, #8
    d5ee:	46bd      	mov	sp, r7
    d5f0:	bd80      	pop	{r7, pc}
	...

0000d5f4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    d5f4:	b580      	push	{r7, lr}
    d5f6:	b086      	sub	sp, #24
    d5f8:	af00      	add	r7, sp, #0
    d5fa:	60f8      	str	r0, [r7, #12]
    d5fc:	60b9      	str	r1, [r7, #8]
    d5fe:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    d600:	68fb      	ldr	r3, [r7, #12]
    d602:	7c1b      	ldrb	r3, [r3, #16]
    d604:	b2db      	uxtb	r3, r3
    d606:	2b00      	cmp	r3, #0
    d608:	d02f      	beq.n	d66a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    d60a:	687a      	ldr	r2, [r7, #4]
    d60c:	4613      	mov	r3, r2
    d60e:	009b      	lsls	r3, r3, #2
    d610:	4413      	add	r3, r2
    d612:	005b      	lsls	r3, r3, #1
    d614:	461a      	mov	r2, r3
    d616:	4917      	ldr	r1, [pc, #92]	; (d674 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    d618:	4817      	ldr	r0, [pc, #92]	; (d678 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    d61a:	4b18      	ldr	r3, [pc, #96]	; (d67c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    d61c:	4798      	blx	r3
		txReady=false;
    d61e:	68fb      	ldr	r3, [r7, #12]
    d620:	2200      	movs	r2, #0
    d622:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    d624:	687b      	ldr	r3, [r7, #4]
    d626:	4619      	mov	r1, r3
    d628:	68b8      	ldr	r0, [r7, #8]
    d62a:	4b15      	ldr	r3, [pc, #84]	; (d680 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    d62c:	4798      	blx	r3
    d62e:	4603      	mov	r3, r0
    d630:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    d632:	68fb      	ldr	r3, [r7, #12]
    d634:	7d1b      	ldrb	r3, [r3, #20]
    d636:	b2db      	uxtb	r3, r3
    d638:	f083 0301 	eor.w	r3, r3, #1
    d63c:	b2db      	uxtb	r3, r3
    d63e:	2b00      	cmp	r3, #0
    d640:	d006      	beq.n	d650 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    d642:	68fb      	ldr	r3, [r7, #12]
    d644:	7c1b      	ldrb	r3, [r3, #16]
    d646:	b2db      	uxtb	r3, r3
    d648:	2b00      	cmp	r3, #0
    d64a:	d001      	beq.n	d650 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    d64c:	2301      	movs	r3, #1
    d64e:	e000      	b.n	d652 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    d650:	2300      	movs	r3, #0
    d652:	2b00      	cmp	r3, #0
    d654:	d000      	beq.n	d658 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    d656:	e7ec      	b.n	d632 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    d658:	4807      	ldr	r0, [pc, #28]	; (d678 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    d65a:	4b0a      	ldr	r3, [pc, #40]	; (d684 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    d65c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    d65e:	4905      	ldr	r1, [pc, #20]	; (d674 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    d660:	4805      	ldr	r0, [pc, #20]	; (d678 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    d662:	4b09      	ldr	r3, [pc, #36]	; (d688 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    d664:	4798      	blx	r3
		return r;
    d666:	697b      	ldr	r3, [r7, #20]
    d668:	e000      	b.n	d66c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    d66a:	2300      	movs	r3, #0
	}
	

}
    d66c:	4618      	mov	r0, r3
    d66e:	3718      	adds	r7, #24
    d670:	46bd      	mov	sp, r7
    d672:	bd80      	pop	{r7, pc}
    d674:	0000d289 	.word	0x0000d289
    d678:	20001474 	.word	0x20001474
    d67c:	0000cf61 	.word	0x0000cf61
    d680:	0000bc8d 	.word	0x0000bc8d
    d684:	0000ce8d 	.word	0x0000ce8d
    d688:	0000cf09 	.word	0x0000cf09

0000d68c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    d68c:	b580      	push	{r7, lr}
    d68e:	b086      	sub	sp, #24
    d690:	af00      	add	r7, sp, #0
    d692:	60f8      	str	r0, [r7, #12]
    d694:	60b9      	str	r1, [r7, #8]
    d696:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    d698:	68fb      	ldr	r3, [r7, #12]
    d69a:	2200      	movs	r2, #0
    d69c:	751a      	strb	r2, [r3, #20]

 	if (connected){
    d69e:	68fb      	ldr	r3, [r7, #12]
    d6a0:	7c1b      	ldrb	r3, [r3, #16]
    d6a2:	b2db      	uxtb	r3, r3
    d6a4:	2b00      	cmp	r3, #0
    d6a6:	d02a      	beq.n	d6fe <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    d6a8:	687a      	ldr	r2, [r7, #4]
    d6aa:	4613      	mov	r3, r2
    d6ac:	009b      	lsls	r3, r3, #2
    d6ae:	4413      	add	r3, r2
    d6b0:	005b      	lsls	r3, r3, #1
    d6b2:	461a      	mov	r2, r3
    d6b4:	4915      	ldr	r1, [pc, #84]	; (d70c <_ZN9CDC_Class5writeEPKhj+0x80>)
    d6b6:	4816      	ldr	r0, [pc, #88]	; (d710 <_ZN9CDC_Class5writeEPKhj+0x84>)
    d6b8:	4b16      	ldr	r3, [pc, #88]	; (d714 <_ZN9CDC_Class5writeEPKhj+0x88>)
    d6ba:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    d6bc:	6879      	ldr	r1, [r7, #4]
    d6be:	68b8      	ldr	r0, [r7, #8]
    d6c0:	4b15      	ldr	r3, [pc, #84]	; (d718 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    d6c2:	4798      	blx	r3
    d6c4:	4603      	mov	r3, r0
    d6c6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    d6c8:	68fb      	ldr	r3, [r7, #12]
    d6ca:	7d1b      	ldrb	r3, [r3, #20]
    d6cc:	b2db      	uxtb	r3, r3
    d6ce:	f083 0301 	eor.w	r3, r3, #1
    d6d2:	b2db      	uxtb	r3, r3
    d6d4:	2b00      	cmp	r3, #0
    d6d6:	d006      	beq.n	d6e6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    d6d8:	68fb      	ldr	r3, [r7, #12]
    d6da:	7c1b      	ldrb	r3, [r3, #16]
    d6dc:	b2db      	uxtb	r3, r3
    d6de:	2b00      	cmp	r3, #0
    d6e0:	d001      	beq.n	d6e6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    d6e2:	2301      	movs	r3, #1
    d6e4:	e000      	b.n	d6e8 <_ZN9CDC_Class5writeEPKhj+0x5c>
    d6e6:	2300      	movs	r3, #0
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d000      	beq.n	d6ee <_ZN9CDC_Class5writeEPKhj+0x62>
    d6ec:	e7ec      	b.n	d6c8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    d6ee:	4808      	ldr	r0, [pc, #32]	; (d710 <_ZN9CDC_Class5writeEPKhj+0x84>)
    d6f0:	4b0a      	ldr	r3, [pc, #40]	; (d71c <_ZN9CDC_Class5writeEPKhj+0x90>)
    d6f2:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    d6f4:	4905      	ldr	r1, [pc, #20]	; (d70c <_ZN9CDC_Class5writeEPKhj+0x80>)
    d6f6:	4806      	ldr	r0, [pc, #24]	; (d710 <_ZN9CDC_Class5writeEPKhj+0x84>)
    d6f8:	4b09      	ldr	r3, [pc, #36]	; (d720 <_ZN9CDC_Class5writeEPKhj+0x94>)
    d6fa:	4798      	blx	r3
    d6fc:	e001      	b.n	d702 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    d6fe:	2300      	movs	r3, #0
    d700:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    d702:	697b      	ldr	r3, [r7, #20]
}
    d704:	4618      	mov	r0, r3
    d706:	3718      	adds	r7, #24
    d708:	46bd      	mov	sp, r7
    d70a:	bd80      	pop	{r7, pc}
    d70c:	0000d289 	.word	0x0000d289
    d710:	20001474 	.word	0x20001474
    d714:	0000cf61 	.word	0x0000cf61
    d718:	0000bc8d 	.word	0x0000bc8d
    d71c:	0000ce8d 	.word	0x0000ce8d
    d720:	0000cf09 	.word	0x0000cf09

0000d724 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    d724:	b480      	push	{r7}
    d726:	b083      	sub	sp, #12
    d728:	af00      	add	r7, sp, #0
    d72a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    d72c:	687b      	ldr	r3, [r7, #4]
    d72e:	7d5b      	ldrb	r3, [r3, #21]
    d730:	b2db      	uxtb	r3, r3
    d732:	2b00      	cmp	r3, #0
    d734:	d006      	beq.n	d744 <_ZN9CDC_Class9availableEv+0x20>
    d736:	687b      	ldr	r3, [r7, #4]
    d738:	7d1b      	ldrb	r3, [r3, #20]
    d73a:	b2db      	uxtb	r3, r3
    d73c:	2b00      	cmp	r3, #0
    d73e:	d001      	beq.n	d744 <_ZN9CDC_Class9availableEv+0x20>
    d740:	2301      	movs	r3, #1
    d742:	e000      	b.n	d746 <_ZN9CDC_Class9availableEv+0x22>
    d744:	2300      	movs	r3, #0
    d746:	2b00      	cmp	r3, #0
    d748:	d001      	beq.n	d74e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    d74a:	2301      	movs	r3, #1
    d74c:	e000      	b.n	d750 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    d74e:	2300      	movs	r3, #0
	}
	
}
    d750:	4618      	mov	r0, r3
    d752:	370c      	adds	r7, #12
    d754:	46bd      	mov	sp, r7
    d756:	bc80      	pop	{r7}
    d758:	4770      	bx	lr
	...

0000d75c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    d75c:	b580      	push	{r7, lr}
    d75e:	b082      	sub	sp, #8
    d760:	af00      	add	r7, sp, #0
    d762:	6078      	str	r0, [r7, #4]
    d764:	6039      	str	r1, [r7, #0]
    d766:	687b      	ldr	r3, [r7, #4]
    d768:	2b01      	cmp	r3, #1
    d76a:	d154      	bne.n	d816 <_Z41__static_initialization_and_destruction_0ii+0xba>
    d76c:	683b      	ldr	r3, [r7, #0]
    d76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d772:	4293      	cmp	r3, r2
    d774:	d14f      	bne.n	d816 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d776:	492a      	ldr	r1, [pc, #168]	; (d820 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d778:	482a      	ldr	r0, [pc, #168]	; (d824 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d77a:	4b2b      	ldr	r3, [pc, #172]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d77c:	4798      	blx	r3
    d77e:	4a2b      	ldr	r2, [pc, #172]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d780:	492b      	ldr	r1, [pc, #172]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d782:	4828      	ldr	r0, [pc, #160]	; (d824 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d784:	4b2b      	ldr	r3, [pc, #172]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d786:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d788:	492b      	ldr	r1, [pc, #172]	; (d838 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d78a:	482c      	ldr	r0, [pc, #176]	; (d83c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d78c:	4b26      	ldr	r3, [pc, #152]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d78e:	4798      	blx	r3
    d790:	4a26      	ldr	r2, [pc, #152]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d792:	4927      	ldr	r1, [pc, #156]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d794:	4829      	ldr	r0, [pc, #164]	; (d83c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d796:	4b27      	ldr	r3, [pc, #156]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d798:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d79a:	4929      	ldr	r1, [pc, #164]	; (d840 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d79c:	4829      	ldr	r0, [pc, #164]	; (d844 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d79e:	4b22      	ldr	r3, [pc, #136]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d7a0:	4798      	blx	r3
    d7a2:	4a22      	ldr	r2, [pc, #136]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d7a4:	4922      	ldr	r1, [pc, #136]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d7a6:	4827      	ldr	r0, [pc, #156]	; (d844 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d7a8:	4b22      	ldr	r3, [pc, #136]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d7aa:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d7ac:	4926      	ldr	r1, [pc, #152]	; (d848 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d7ae:	4827      	ldr	r0, [pc, #156]	; (d84c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d7b0:	4b1d      	ldr	r3, [pc, #116]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d7b2:	4798      	blx	r3
    d7b4:	4a1d      	ldr	r2, [pc, #116]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d7b6:	491e      	ldr	r1, [pc, #120]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d7b8:	4824      	ldr	r0, [pc, #144]	; (d84c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d7ba:	4b1e      	ldr	r3, [pc, #120]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d7bc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d7be:	4924      	ldr	r1, [pc, #144]	; (d850 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d7c0:	4824      	ldr	r0, [pc, #144]	; (d854 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d7c2:	4b19      	ldr	r3, [pc, #100]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d7c4:	4798      	blx	r3
    d7c6:	4a19      	ldr	r2, [pc, #100]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d7c8:	4919      	ldr	r1, [pc, #100]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d7ca:	4822      	ldr	r0, [pc, #136]	; (d854 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d7cc:	4b19      	ldr	r3, [pc, #100]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d7ce:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d7d0:	4921      	ldr	r1, [pc, #132]	; (d858 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    d7d2:	4822      	ldr	r0, [pc, #136]	; (d85c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d7d4:	4b14      	ldr	r3, [pc, #80]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d7d6:	4798      	blx	r3
    d7d8:	4a14      	ldr	r2, [pc, #80]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d7da:	4915      	ldr	r1, [pc, #84]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d7dc:	481f      	ldr	r0, [pc, #124]	; (d85c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d7de:	4b15      	ldr	r3, [pc, #84]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d7e0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d7e2:	491f      	ldr	r1, [pc, #124]	; (d860 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    d7e4:	481f      	ldr	r0, [pc, #124]	; (d864 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    d7e6:	4b10      	ldr	r3, [pc, #64]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d7e8:	4798      	blx	r3
    d7ea:	4a10      	ldr	r2, [pc, #64]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d7ec:	4910      	ldr	r1, [pc, #64]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d7ee:	481d      	ldr	r0, [pc, #116]	; (d864 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    d7f0:	4b10      	ldr	r3, [pc, #64]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d7f2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    d7f4:	491c      	ldr	r1, [pc, #112]	; (d868 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    d7f6:	481d      	ldr	r0, [pc, #116]	; (d86c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    d7f8:	4b0b      	ldr	r3, [pc, #44]	; (d828 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d7fa:	4798      	blx	r3
    d7fc:	4a0b      	ldr	r2, [pc, #44]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d7fe:	490c      	ldr	r1, [pc, #48]	; (d830 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d800:	481a      	ldr	r0, [pc, #104]	; (d86c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    d802:	4b0c      	ldr	r3, [pc, #48]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d804:	4798      	blx	r3
    d806:	481a      	ldr	r0, [pc, #104]	; (d870 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    d808:	4b1a      	ldr	r3, [pc, #104]	; (d874 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    d80a:	4798      	blx	r3
    d80c:	4a07      	ldr	r2, [pc, #28]	; (d82c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d80e:	491a      	ldr	r1, [pc, #104]	; (d878 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    d810:	4817      	ldr	r0, [pc, #92]	; (d870 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    d812:	4b08      	ldr	r3, [pc, #32]	; (d834 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d814:	4798      	blx	r3
    d816:	bf00      	nop
    d818:	3708      	adds	r7, #8
    d81a:	46bd      	mov	sp, r7
    d81c:	bd80      	pop	{r7, pc}
    d81e:	bf00      	nop
    d820:	2000926c 	.word	0x2000926c
    d824:	200013d4 	.word	0x200013d4
    d828:	0000cd2d 	.word	0x0000cd2d
    d82c:	20000000 	.word	0x20000000
    d830:	0000cd65 	.word	0x0000cd65
    d834:	00010a09 	.word	0x00010a09
    d838:	20009300 	.word	0x20009300
    d83c:	200013f4 	.word	0x200013f4
    d840:	20009424 	.word	0x20009424
    d844:	20001414 	.word	0x20001414
    d848:	20009320 	.word	0x20009320
    d84c:	20001434 	.word	0x20001434
    d850:	200093e4 	.word	0x200093e4
    d854:	20001454 	.word	0x20001454
    d858:	20009404 	.word	0x20009404
    d85c:	20001474 	.word	0x20001474
    d860:	200092dc 	.word	0x200092dc
    d864:	20001494 	.word	0x20001494
    d868:	2000937c 	.word	0x2000937c
    d86c:	200014b4 	.word	0x200014b4
    d870:	200014d8 	.word	0x200014d8
    d874:	0000d379 	.word	0x0000d379
    d878:	0000d3c1 	.word	0x0000d3c1

0000d87c <_GLOBAL__sub_I_ptrCDCClass>:
    d87c:	b580      	push	{r7, lr}
    d87e:	af00      	add	r7, sp, #0
    d880:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d884:	2001      	movs	r0, #1
    d886:	4b01      	ldr	r3, [pc, #4]	; (d88c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    d888:	4798      	blx	r3
    d88a:	bd80      	pop	{r7, pc}
    d88c:	0000d75d 	.word	0x0000d75d

0000d890 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    d890:	b590      	push	{r4, r7, lr}
    d892:	b083      	sub	sp, #12
    d894:	af00      	add	r7, sp, #0
    d896:	6078      	str	r0, [r7, #4]
    d898:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    d89a:	683b      	ldr	r3, [r7, #0]
    d89c:	2b00      	cmp	r3, #0
    d89e:	d101      	bne.n	d8a4 <_ZN5Print5writeEPKc+0x14>
    d8a0:	2300      	movs	r3, #0
    d8a2:	e00c      	b.n	d8be <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    d8a4:	687b      	ldr	r3, [r7, #4]
    d8a6:	681b      	ldr	r3, [r3, #0]
    d8a8:	3304      	adds	r3, #4
    d8aa:	681c      	ldr	r4, [r3, #0]
    d8ac:	6838      	ldr	r0, [r7, #0]
    d8ae:	4b06      	ldr	r3, [pc, #24]	; (d8c8 <_ZN5Print5writeEPKc+0x38>)
    d8b0:	4798      	blx	r3
    d8b2:	4603      	mov	r3, r0
    d8b4:	461a      	mov	r2, r3
    d8b6:	6839      	ldr	r1, [r7, #0]
    d8b8:	6878      	ldr	r0, [r7, #4]
    d8ba:	47a0      	blx	r4
    d8bc:	4603      	mov	r3, r0
    }
    d8be:	4618      	mov	r0, r3
    d8c0:	370c      	adds	r7, #12
    d8c2:	46bd      	mov	sp, r7
    d8c4:	bd90      	pop	{r4, r7, pc}
    d8c6:	bf00      	nop
    d8c8:	00010ec1 	.word	0x00010ec1

0000d8cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    d8cc:	b580      	push	{r7, lr}
    d8ce:	b086      	sub	sp, #24
    d8d0:	af00      	add	r7, sp, #0
    d8d2:	60f8      	str	r0, [r7, #12]
    d8d4:	60b9      	str	r1, [r7, #8]
    d8d6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    d8d8:	2300      	movs	r3, #0
    d8da:	617b      	str	r3, [r7, #20]
  while (size--) {
    d8dc:	687b      	ldr	r3, [r7, #4]
    d8de:	1e5a      	subs	r2, r3, #1
    d8e0:	607a      	str	r2, [r7, #4]
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	bf14      	ite	ne
    d8e6:	2301      	movne	r3, #1
    d8e8:	2300      	moveq	r3, #0
    d8ea:	b2db      	uxtb	r3, r3
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d016      	beq.n	d91e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    d8f0:	68fb      	ldr	r3, [r7, #12]
    d8f2:	681b      	ldr	r3, [r3, #0]
    d8f4:	681a      	ldr	r2, [r3, #0]
    d8f6:	68bb      	ldr	r3, [r7, #8]
    d8f8:	1c59      	adds	r1, r3, #1
    d8fa:	60b9      	str	r1, [r7, #8]
    d8fc:	781b      	ldrb	r3, [r3, #0]
    d8fe:	4619      	mov	r1, r3
    d900:	68f8      	ldr	r0, [r7, #12]
    d902:	4790      	blx	r2
    d904:	4603      	mov	r3, r0
    d906:	2b00      	cmp	r3, #0
    d908:	bf14      	ite	ne
    d90a:	2301      	movne	r3, #1
    d90c:	2300      	moveq	r3, #0
    d90e:	b2db      	uxtb	r3, r3
    d910:	2b00      	cmp	r3, #0
    d912:	d003      	beq.n	d91c <_ZN5Print5writeEPKhj+0x50>
    d914:	697b      	ldr	r3, [r7, #20]
    d916:	3301      	adds	r3, #1
    d918:	617b      	str	r3, [r7, #20]
  while (size--) {
    d91a:	e7df      	b.n	d8dc <_ZN5Print5writeEPKhj+0x10>
    else break;
    d91c:	bf00      	nop
  }
  return n;
    d91e:	697b      	ldr	r3, [r7, #20]
}
    d920:	4618      	mov	r0, r3
    d922:	3718      	adds	r7, #24
    d924:	46bd      	mov	sp, r7
    d926:	bd80      	pop	{r7, pc}

0000d928 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    d928:	b580      	push	{r7, lr}
    d92a:	b082      	sub	sp, #8
    d92c:	af00      	add	r7, sp, #0
    d92e:	6078      	str	r0, [r7, #4]
    d930:	6039      	str	r1, [r7, #0]
  return write(str);
    d932:	6839      	ldr	r1, [r7, #0]
    d934:	6878      	ldr	r0, [r7, #4]
    d936:	4b03      	ldr	r3, [pc, #12]	; (d944 <_ZN5Print5printEPKc+0x1c>)
    d938:	4798      	blx	r3
    d93a:	4603      	mov	r3, r0
}
    d93c:	4618      	mov	r0, r3
    d93e:	3708      	adds	r7, #8
    d940:	46bd      	mov	sp, r7
    d942:	bd80      	pop	{r7, pc}
    d944:	0000d891 	.word	0x0000d891

0000d948 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    d948:	b480      	push	{r7}
    d94a:	b083      	sub	sp, #12
    d94c:	af00      	add	r7, sp, #0
    d94e:	6078      	str	r0, [r7, #4]
    d950:	460b      	mov	r3, r1
    d952:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    d954:	78fb      	ldrb	r3, [r7, #3]
    d956:	687a      	ldr	r2, [r7, #4]
    d958:	01db      	lsls	r3, r3, #7
    d95a:	4413      	add	r3, r2
    d95c:	681b      	ldr	r3, [r3, #0]
}
    d95e:	4618      	mov	r0, r3
    d960:	370c      	adds	r7, #12
    d962:	46bd      	mov	sp, r7
    d964:	bc80      	pop	{r7}
    d966:	4770      	bx	lr

0000d968 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    d968:	b480      	push	{r7}
    d96a:	b083      	sub	sp, #12
    d96c:	af00      	add	r7, sp, #0
    d96e:	6078      	str	r0, [r7, #4]
    d970:	460b      	mov	r3, r1
    d972:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    d974:	78fb      	ldrb	r3, [r7, #3]
    d976:	687a      	ldr	r2, [r7, #4]
    d978:	01db      	lsls	r3, r3, #7
    d97a:	4413      	add	r3, r2
    d97c:	3310      	adds	r3, #16
    d97e:	681b      	ldr	r3, [r3, #0]
}
    d980:	4618      	mov	r0, r3
    d982:	370c      	adds	r7, #12
    d984:	46bd      	mov	sp, r7
    d986:	bc80      	pop	{r7}
    d988:	4770      	bx	lr

0000d98a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    d98a:	b480      	push	{r7}
    d98c:	b083      	sub	sp, #12
    d98e:	af00      	add	r7, sp, #0
    d990:	6078      	str	r0, [r7, #4]
    d992:	460b      	mov	r3, r1
    d994:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    d996:	78fb      	ldrb	r3, [r7, #3]
    d998:	687a      	ldr	r2, [r7, #4]
    d99a:	01db      	lsls	r3, r3, #7
    d99c:	4413      	add	r3, r2
    d99e:	3320      	adds	r3, #32
    d9a0:	681b      	ldr	r3, [r3, #0]
}
    d9a2:	4618      	mov	r0, r3
    d9a4:	370c      	adds	r7, #12
    d9a6:	46bd      	mov	sp, r7
    d9a8:	bc80      	pop	{r7}
    d9aa:	4770      	bx	lr

0000d9ac <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    d9ac:	b580      	push	{r7, lr}
    d9ae:	b086      	sub	sp, #24
    d9b0:	af00      	add	r7, sp, #0
    d9b2:	4603      	mov	r3, r0
    d9b4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    d9b6:	f107 030c 	add.w	r3, r7, #12
    d9ba:	4618      	mov	r0, r3
    d9bc:	4b13      	ldr	r3, [pc, #76]	; (da0c <_gpio_get_level+0x60>)
    d9be:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    d9c0:	79fb      	ldrb	r3, [r7, #7]
    d9c2:	4619      	mov	r1, r3
    d9c4:	4812      	ldr	r0, [pc, #72]	; (da10 <_gpio_get_level+0x64>)
    d9c6:	4b13      	ldr	r3, [pc, #76]	; (da14 <_gpio_get_level+0x68>)
    d9c8:	4798      	blx	r3
    d9ca:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    d9cc:	79fb      	ldrb	r3, [r7, #7]
    d9ce:	4619      	mov	r1, r3
    d9d0:	480f      	ldr	r0, [pc, #60]	; (da10 <_gpio_get_level+0x64>)
    d9d2:	4b11      	ldr	r3, [pc, #68]	; (da18 <_gpio_get_level+0x6c>)
    d9d4:	4798      	blx	r3
    d9d6:	4602      	mov	r2, r0
    d9d8:	697b      	ldr	r3, [r7, #20]
    d9da:	43db      	mvns	r3, r3
    d9dc:	4013      	ands	r3, r2
    d9de:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    d9e0:	79fb      	ldrb	r3, [r7, #7]
    d9e2:	4619      	mov	r1, r3
    d9e4:	480a      	ldr	r0, [pc, #40]	; (da10 <_gpio_get_level+0x64>)
    d9e6:	4b0d      	ldr	r3, [pc, #52]	; (da1c <_gpio_get_level+0x70>)
    d9e8:	4798      	blx	r3
    d9ea:	4602      	mov	r2, r0
    d9ec:	697b      	ldr	r3, [r7, #20]
    d9ee:	4013      	ands	r3, r2
    d9f0:	693a      	ldr	r2, [r7, #16]
    d9f2:	4313      	orrs	r3, r2
    d9f4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    d9f6:	f107 030c 	add.w	r3, r7, #12
    d9fa:	4618      	mov	r0, r3
    d9fc:	4b08      	ldr	r3, [pc, #32]	; (da20 <_gpio_get_level+0x74>)
    d9fe:	4798      	blx	r3

	return tmp;
    da00:	693b      	ldr	r3, [r7, #16]
}
    da02:	4618      	mov	r0, r3
    da04:	3718      	adds	r7, #24
    da06:	46bd      	mov	sp, r7
    da08:	bd80      	pop	{r7, pc}
    da0a:	bf00      	nop
    da0c:	0000ae69 	.word	0x0000ae69
    da10:	41008000 	.word	0x41008000
    da14:	0000d949 	.word	0x0000d949
    da18:	0000d98b 	.word	0x0000d98b
    da1c:	0000d969 	.word	0x0000d969
    da20:	0000ae8f 	.word	0x0000ae8f

0000da24 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    da24:	b580      	push	{r7, lr}
    da26:	b082      	sub	sp, #8
    da28:	af00      	add	r7, sp, #0
    da2a:	4603      	mov	r3, r0
    da2c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    da2e:	79fb      	ldrb	r3, [r7, #7]
    da30:	115b      	asrs	r3, r3, #5
    da32:	b2db      	uxtb	r3, r3
    da34:	4618      	mov	r0, r3
    da36:	4b09      	ldr	r3, [pc, #36]	; (da5c <gpio_get_pin_level+0x38>)
    da38:	4798      	blx	r3
    da3a:	4601      	mov	r1, r0
    da3c:	79fb      	ldrb	r3, [r7, #7]
    da3e:	f003 031f 	and.w	r3, r3, #31
    da42:	2201      	movs	r2, #1
    da44:	fa02 f303 	lsl.w	r3, r2, r3
    da48:	400b      	ands	r3, r1
    da4a:	2b00      	cmp	r3, #0
    da4c:	bf14      	ite	ne
    da4e:	2301      	movne	r3, #1
    da50:	2300      	moveq	r3, #0
    da52:	b2db      	uxtb	r3, r3
}
    da54:	4618      	mov	r0, r3
    da56:	3708      	adds	r7, #8
    da58:	46bd      	mov	sp, r7
    da5a:	bd80      	pop	{r7, pc}
    da5c:	0000d9ad 	.word	0x0000d9ad

0000da60 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    da60:	b480      	push	{r7}
    da62:	b083      	sub	sp, #12
    da64:	af00      	add	r7, sp, #0
    da66:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    da68:	4b06      	ldr	r3, [pc, #24]	; (da84 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    da6a:	681b      	ldr	r3, [r3, #0]
    da6c:	2201      	movs	r2, #1
    da6e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    da70:	4b04      	ldr	r3, [pc, #16]	; (da84 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    da72:	681b      	ldr	r3, [r3, #0]
    da74:	2200      	movs	r2, #0
    da76:	705a      	strb	r2, [r3, #1]
}
    da78:	bf00      	nop
    da7a:	370c      	adds	r7, #12
    da7c:	46bd      	mov	sp, r7
    da7e:	bc80      	pop	{r7}
    da80:	4770      	bx	lr
    da82:	bf00      	nop
    da84:	20001638 	.word	0x20001638

0000da88 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    da88:	b580      	push	{r7, lr}
    da8a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    da8c:	2040      	movs	r0, #64	; 0x40
    da8e:	4b0a      	ldr	r3, [pc, #40]	; (dab8 <_ZL10USBPluggedv+0x30>)
    da90:	4798      	blx	r3
    da92:	4603      	mov	r3, r0
    da94:	2b00      	cmp	r3, #0
    da96:	d004      	beq.n	daa2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    da98:	4b08      	ldr	r3, [pc, #32]	; (dabc <_ZL10USBPluggedv+0x34>)
    da9a:	681b      	ldr	r3, [r3, #0]
    da9c:	2201      	movs	r2, #1
    da9e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    daa0:	e007      	b.n	dab2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    daa2:	4b06      	ldr	r3, [pc, #24]	; (dabc <_ZL10USBPluggedv+0x34>)
    daa4:	681b      	ldr	r3, [r3, #0]
    daa6:	2200      	movs	r2, #0
    daa8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    daaa:	4b04      	ldr	r3, [pc, #16]	; (dabc <_ZL10USBPluggedv+0x34>)
    daac:	681b      	ldr	r3, [r3, #0]
    daae:	2200      	movs	r2, #0
    dab0:	701a      	strb	r2, [r3, #0]
}
    dab2:	bf00      	nop
    dab4:	bd80      	pop	{r7, pc}
    dab6:	bf00      	nop
    dab8:	0000da25 	.word	0x0000da25
    dabc:	20001638 	.word	0x20001638

0000dac0 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    dac0:	b480      	push	{r7}
    dac2:	b083      	sub	sp, #12
    dac4:	af00      	add	r7, sp, #0
    dac6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    dac8:	4a04      	ldr	r2, [pc, #16]	; (dadc <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    daca:	687b      	ldr	r3, [r7, #4]
    dacc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    dace:	687b      	ldr	r3, [r7, #4]
    dad0:	4618      	mov	r0, r3
    dad2:	370c      	adds	r7, #12
    dad4:	46bd      	mov	sp, r7
    dad6:	bc80      	pop	{r7}
    dad8:	4770      	bx	lr
    dada:	bf00      	nop
    dadc:	20001638 	.word	0x20001638

0000dae0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    dae0:	b480      	push	{r7}
    dae2:	b083      	sub	sp, #12
    dae4:	af00      	add	r7, sp, #0
    dae6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    dae8:	687b      	ldr	r3, [r7, #4]
    daea:	4618      	mov	r0, r3
    daec:	370c      	adds	r7, #12
    daee:	46bd      	mov	sp, r7
    daf0:	bc80      	pop	{r7}
    daf2:	4770      	bx	lr

0000daf4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    daf4:	b580      	push	{r7, lr}
    daf6:	b082      	sub	sp, #8
    daf8:	af00      	add	r7, sp, #0
    dafa:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    dafc:	491e      	ldr	r1, [pc, #120]	; (db78 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    dafe:	2040      	movs	r0, #64	; 0x40
    db00:	4b1e      	ldr	r3, [pc, #120]	; (db7c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    db02:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    db04:	481e      	ldr	r0, [pc, #120]	; (db80 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    db06:	4b1f      	ldr	r3, [pc, #124]	; (db84 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    db08:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    db0a:	2040      	movs	r0, #64	; 0x40
    db0c:	4b1e      	ldr	r3, [pc, #120]	; (db88 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    db0e:	4798      	blx	r3
    db10:	4603      	mov	r3, r0
    db12:	461a      	mov	r2, r3
    db14:	687b      	ldr	r3, [r7, #4]
    db16:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	78db      	ldrb	r3, [r3, #3]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d021      	beq.n	db64 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    db20:	687b      	ldr	r3, [r7, #4]
    db22:	2200      	movs	r2, #0
    db24:	709a      	strb	r2, [r3, #2]
			plugged=true;
    db26:	687b      	ldr	r3, [r7, #4]
    db28:	2201      	movs	r2, #1
    db2a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    db2c:	f44f 7216 	mov.w	r2, #600	; 0x258
    db30:	4916      	ldr	r1, [pc, #88]	; (db8c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    db32:	4813      	ldr	r0, [pc, #76]	; (db80 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    db34:	4b16      	ldr	r3, [pc, #88]	; (db90 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    db36:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    db38:	4816      	ldr	r0, [pc, #88]	; (db94 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    db3a:	4b17      	ldr	r3, [pc, #92]	; (db98 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    db3c:	4798      	blx	r3
    db3e:	4603      	mov	r3, r0
    db40:	f083 0301 	eor.w	r3, r3, #1
    db44:	b2db      	uxtb	r3, r3
    db46:	2b00      	cmp	r3, #0
    db48:	d008      	beq.n	db5c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    db4a:	687b      	ldr	r3, [r7, #4]
    db4c:	789b      	ldrb	r3, [r3, #2]
    db4e:	b2db      	uxtb	r3, r3
    db50:	2b00      	cmp	r3, #0
    db52:	d0f1      	beq.n	db38 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    db54:	687b      	ldr	r3, [r7, #4]
    db56:	2200      	movs	r2, #0
    db58:	701a      	strb	r2, [r3, #0]
					return;
    db5a:	e009      	b.n	db70 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    db5c:	4808      	ldr	r0, [pc, #32]	; (db80 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    db5e:	4b0f      	ldr	r3, [pc, #60]	; (db9c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    db60:	4798      	blx	r3
    db62:	e005      	b.n	db70 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    db64:	687b      	ldr	r3, [r7, #4]
    db66:	2200      	movs	r2, #0
    db68:	701a      	strb	r2, [r3, #0]
			plugged=false;
    db6a:	687b      	ldr	r3, [r7, #4]
    db6c:	2200      	movs	r2, #0
    db6e:	705a      	strb	r2, [r3, #1]
		}
		
}
    db70:	3708      	adds	r7, #8
    db72:	46bd      	mov	sp, r7
    db74:	bd80      	pop	{r7, pc}
    db76:	bf00      	nop
    db78:	0000da89 	.word	0x0000da89
    db7c:	00001e95 	.word	0x00001e95
    db80:	200015d8 	.word	0x200015d8
    db84:	0000ce19 	.word	0x0000ce19
    db88:	0000da25 	.word	0x0000da25
    db8c:	0000da61 	.word	0x0000da61
    db90:	0000cf61 	.word	0x0000cf61
    db94:	200014d8 	.word	0x200014d8
    db98:	0000d431 	.word	0x0000d431
    db9c:	0000ce8d 	.word	0x0000ce8d

0000dba0 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    dba0:	b580      	push	{r7, lr}
    dba2:	b082      	sub	sp, #8
    dba4:	af00      	add	r7, sp, #0
    dba6:	6078      	str	r0, [r7, #4]
    dba8:	6039      	str	r1, [r7, #0]
    dbaa:	687b      	ldr	r3, [r7, #4]
    dbac:	2b01      	cmp	r3, #1
    dbae:	d14c      	bne.n	dc4a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    dbb0:	683b      	ldr	r3, [r7, #0]
    dbb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dbb6:	4293      	cmp	r3, r2
    dbb8:	d147      	bne.n	dc4a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dbba:	4926      	ldr	r1, [pc, #152]	; (dc54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    dbbc:	4826      	ldr	r0, [pc, #152]	; (dc58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dbbe:	4b27      	ldr	r3, [pc, #156]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dbc0:	4798      	blx	r3
    dbc2:	4a27      	ldr	r2, [pc, #156]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dbc4:	4927      	ldr	r1, [pc, #156]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dbc6:	4824      	ldr	r0, [pc, #144]	; (dc58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dbc8:	4b27      	ldr	r3, [pc, #156]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dbca:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    dbcc:	4927      	ldr	r1, [pc, #156]	; (dc6c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dbce:	4828      	ldr	r0, [pc, #160]	; (dc70 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dbd0:	4b22      	ldr	r3, [pc, #136]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dbd2:	4798      	blx	r3
    dbd4:	4a22      	ldr	r2, [pc, #136]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dbd6:	4923      	ldr	r1, [pc, #140]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dbd8:	4825      	ldr	r0, [pc, #148]	; (dc70 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dbda:	4b23      	ldr	r3, [pc, #140]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dbdc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    dbde:	4925      	ldr	r1, [pc, #148]	; (dc74 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dbe0:	4825      	ldr	r0, [pc, #148]	; (dc78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dbe2:	4b1e      	ldr	r3, [pc, #120]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dbe4:	4798      	blx	r3
    dbe6:	4a1e      	ldr	r2, [pc, #120]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dbe8:	491e      	ldr	r1, [pc, #120]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dbea:	4823      	ldr	r0, [pc, #140]	; (dc78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dbec:	4b1e      	ldr	r3, [pc, #120]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dbee:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    dbf0:	4922      	ldr	r1, [pc, #136]	; (dc7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    dbf2:	4823      	ldr	r0, [pc, #140]	; (dc80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dbf4:	4b19      	ldr	r3, [pc, #100]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dbf6:	4798      	blx	r3
    dbf8:	4a19      	ldr	r2, [pc, #100]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dbfa:	491a      	ldr	r1, [pc, #104]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dbfc:	4820      	ldr	r0, [pc, #128]	; (dc80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dbfe:	4b1a      	ldr	r3, [pc, #104]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc00:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    dc02:	4920      	ldr	r1, [pc, #128]	; (dc84 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    dc04:	4820      	ldr	r0, [pc, #128]	; (dc88 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dc06:	4b15      	ldr	r3, [pc, #84]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc08:	4798      	blx	r3
    dc0a:	4a15      	ldr	r2, [pc, #84]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc0c:	4915      	ldr	r1, [pc, #84]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc0e:	481e      	ldr	r0, [pc, #120]	; (dc88 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dc10:	4b15      	ldr	r3, [pc, #84]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc12:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    dc14:	491d      	ldr	r1, [pc, #116]	; (dc8c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    dc16:	481e      	ldr	r0, [pc, #120]	; (dc90 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dc18:	4b10      	ldr	r3, [pc, #64]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc1a:	4798      	blx	r3
    dc1c:	4a10      	ldr	r2, [pc, #64]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc1e:	4911      	ldr	r1, [pc, #68]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc20:	481b      	ldr	r0, [pc, #108]	; (dc90 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dc22:	4b11      	ldr	r3, [pc, #68]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc24:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    dc26:	491b      	ldr	r1, [pc, #108]	; (dc94 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    dc28:	481b      	ldr	r0, [pc, #108]	; (dc98 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dc2a:	4b0c      	ldr	r3, [pc, #48]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc2c:	4798      	blx	r3
    dc2e:	4a0c      	ldr	r2, [pc, #48]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc30:	490c      	ldr	r1, [pc, #48]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc32:	4819      	ldr	r0, [pc, #100]	; (dc98 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dc34:	4b0c      	ldr	r3, [pc, #48]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc36:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    dc38:	4918      	ldr	r1, [pc, #96]	; (dc9c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    dc3a:	4819      	ldr	r0, [pc, #100]	; (dca0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dc3c:	4b07      	ldr	r3, [pc, #28]	; (dc5c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dc3e:	4798      	blx	r3
    dc40:	4a07      	ldr	r2, [pc, #28]	; (dc60 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dc42:	4908      	ldr	r1, [pc, #32]	; (dc64 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dc44:	4816      	ldr	r0, [pc, #88]	; (dca0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dc46:	4b08      	ldr	r3, [pc, #32]	; (dc68 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dc48:	4798      	blx	r3
    dc4a:	bf00      	nop
    dc4c:	3708      	adds	r7, #8
    dc4e:	46bd      	mov	sp, r7
    dc50:	bd80      	pop	{r7, pc}
    dc52:	bf00      	nop
    dc54:	2000926c 	.word	0x2000926c
    dc58:	20001538 	.word	0x20001538
    dc5c:	0000cd2d 	.word	0x0000cd2d
    dc60:	20000000 	.word	0x20000000
    dc64:	0000cd65 	.word	0x0000cd65
    dc68:	00010a09 	.word	0x00010a09
    dc6c:	20009300 	.word	0x20009300
    dc70:	20001558 	.word	0x20001558
    dc74:	20009424 	.word	0x20009424
    dc78:	20001578 	.word	0x20001578
    dc7c:	20009320 	.word	0x20009320
    dc80:	20001598 	.word	0x20001598
    dc84:	200093e4 	.word	0x200093e4
    dc88:	200015b8 	.word	0x200015b8
    dc8c:	20009404 	.word	0x20009404
    dc90:	200015d8 	.word	0x200015d8
    dc94:	200092dc 	.word	0x200092dc
    dc98:	200015f8 	.word	0x200015f8
    dc9c:	2000937c 	.word	0x2000937c
    dca0:	20001618 	.word	0x20001618

0000dca4 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    dca4:	b580      	push	{r7, lr}
    dca6:	af00      	add	r7, sp, #0
    dca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcac:	2001      	movs	r0, #1
    dcae:	4b01      	ldr	r3, [pc, #4]	; (dcb4 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    dcb0:	4798      	blx	r3
    dcb2:	bd80      	pop	{r7, pc}
    dcb4:	0000dba1 	.word	0x0000dba1

0000dcb8 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    dcb8:	b480      	push	{r7}
    dcba:	b083      	sub	sp, #12
    dcbc:	af00      	add	r7, sp, #0
    dcbe:	6078      	str	r0, [r7, #4]
    return (void *)0;
    dcc0:	2300      	movs	r3, #0
	}
    dcc2:	4618      	mov	r0, r3
    dcc4:	370c      	adds	r7, #12
    dcc6:	46bd      	mov	sp, r7
    dcc8:	bc80      	pop	{r7}
    dcca:	4770      	bx	lr

0000dccc <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    dccc:	b480      	push	{r7}
    dcce:	af00      	add	r7, sp, #0
		}
    dcd0:	bf00      	nop
    dcd2:	46bd      	mov	sp, r7
    dcd4:	bc80      	pop	{r7}
    dcd6:	4770      	bx	lr

0000dcd8 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    dcd8:	4770      	bx	lr

0000dcda <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    dcda:	4770      	bx	lr

0000dcdc <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
    dcdc:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
    dcde:	2302      	movs	r3, #2
    dce0:	4801      	ldr	r0, [pc, #4]	; (dce8 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
    dce2:	4c02      	ldr	r4, [pc, #8]	; (dcec <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
    dce4:	47a0      	blx	r4
	return	r;
}
    dce6:	bd10      	pop	{r4, pc}
    dce8:	2000903c 	.word	0x2000903c
    dcec:	00010691 	.word	0x00010691

0000dcf0 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
    dcf0:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
    dcf2:	4b03      	ldr	r3, [pc, #12]	; (dd00 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
    dcf4:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
    dcf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    dcfa:	4b02      	ldr	r3, [pc, #8]	; (dd04 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
    dcfc:	4798      	blx	r3
}
    dcfe:	bd08      	pop	{r3, pc}
    dd00:	2000163c 	.word	0x2000163c
    dd04:	0000dcdd 	.word	0x0000dcdd

0000dd08 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    dd08:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    dd0a:	2302      	movs	r3, #2
    dd0c:	4801      	ldr	r0, [pc, #4]	; (dd14 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    dd0e:	4c02      	ldr	r4, [pc, #8]	; (dd18 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    dd10:	47a0      	blx	r4
	return	w;
}
    dd12:	bd10      	pop	{r4, pc}
    dd14:	2000903c 	.word	0x2000903c
    dd18:	0001065d 	.word	0x0001065d

0000dd1c <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    dd1c:	b500      	push	{lr}
    dd1e:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    dd20:	4b07      	ldr	r3, [pc, #28]	; (dd40 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    dd22:	881b      	ldrh	r3, [r3, #0]
    dd24:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    dd28:	4b06      	ldr	r3, [pc, #24]	; (dd44 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    dd2a:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    dd2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    dd30:	3202      	adds	r2, #2
    dd32:	a901      	add	r1, sp, #4
    dd34:	4b04      	ldr	r3, [pc, #16]	; (dd48 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    dd36:	4798      	blx	r3
	return	w;
}
    dd38:	b003      	add	sp, #12
    dd3a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd3e:	bf00      	nop
    dd40:	000115b8 	.word	0x000115b8
    dd44:	2000163c 	.word	0x2000163c
    dd48:	0000dd09 	.word	0x0000dd09

0000dd4c <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    dd4c:	b510      	push	{r4, lr}
    dd4e:	4604      	mov	r4, r0
    dd50:	30b8      	adds	r0, #184	; 0xb8
    dd52:	4b03      	ldr	r3, [pc, #12]	; (dd60 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    dd54:	4798      	blx	r3
    dd56:	4620      	mov	r0, r4
    dd58:	4b02      	ldr	r3, [pc, #8]	; (dd64 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    dd5a:	4798      	blx	r3
{
} //~MemoryManagment_Class
    dd5c:	4620      	mov	r0, r4
    dd5e:	bd10      	pop	{r4, pc}
    dd60:	0000df13 	.word	0x0000df13
    dd64:	0000dcdb 	.word	0x0000dcdb

0000dd68 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    dd68:	b538      	push	{r3, r4, r5, lr}
    dd6a:	4604      	mov	r4, r0
    dd6c:	4b14      	ldr	r3, [pc, #80]	; (ddc0 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    dd6e:	4798      	blx	r3
    dd70:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    dd74:	4b13      	ldr	r3, [pc, #76]	; (ddc4 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    dd76:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    dd78:	f44f 7500 	mov.w	r5, #512	; 0x200
    dd7c:	462a      	mov	r2, r5
    dd7e:	2100      	movs	r1, #0
    dd80:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dd84:	4b10      	ldr	r3, [pc, #64]	; (ddc8 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    dd86:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    dd88:	2300      	movs	r3, #0
    dd8a:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
    dd8e:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
    dd92:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
    dd96:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
    dd9a:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
    dd9e:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
    dda2:	4a0a      	ldr	r2, [pc, #40]	; (ddcc <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    dda4:	f246 33b4 	movw	r3, #25524	; 0x63b4
    dda8:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    ddaa:	4b09      	ldr	r3, [pc, #36]	; (ddd0 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    ddac:	681b      	ldr	r3, [r3, #0]
    ddae:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
    ddb2:	332c      	adds	r3, #44	; 0x2c
    ddb4:	f246 32b8 	movw	r2, #25528	; 0x63b8
    ddb8:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
    ddba:	4620      	mov	r0, r4
    ddbc:	bd38      	pop	{r3, r4, r5, pc}
    ddbe:	bf00      	nop
    ddc0:	0000dcd9 	.word	0x0000dcd9
    ddc4:	0000df11 	.word	0x0000df11
    ddc8:	00010e1d 	.word	0x00010e1d
    ddcc:	20001640 	.word	0x20001640
    ddd0:	2000163c 	.word	0x2000163c

0000ddd4 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    ddd4:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
    ddd6:	480b      	ldr	r0, [pc, #44]	; (de04 <_ZN17MemoryFlash_Class4InitEm+0x30>)
    ddd8:	4b0b      	ldr	r3, [pc, #44]	; (de08 <_ZN17MemoryFlash_Class4InitEm+0x34>)
    ddda:	4798      	blx	r3
    dddc:	b948      	cbnz	r0, ddf2 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
    ddde:	4d0b      	ldr	r5, [pc, #44]	; (de0c <_ZN17MemoryFlash_Class4InitEm+0x38>)
    dde0:	490b      	ldr	r1, [pc, #44]	; (de10 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    dde2:	4628      	mov	r0, r5
    dde4:	4c0b      	ldr	r4, [pc, #44]	; (de14 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    dde6:	47a0      	blx	r4
    dde8:	490b      	ldr	r1, [pc, #44]	; (de18 <_ZN17MemoryFlash_Class4InitEm+0x44>)
    ddea:	4628      	mov	r0, r5
    ddec:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
    ddee:	2001      	movs	r0, #1
    ddf0:	bd38      	pop	{r3, r4, r5, pc}
    ddf2:	4d06      	ldr	r5, [pc, #24]	; (de0c <_ZN17MemoryFlash_Class4InitEm+0x38>)
    ddf4:	4909      	ldr	r1, [pc, #36]	; (de1c <_ZN17MemoryFlash_Class4InitEm+0x48>)
    ddf6:	4628      	mov	r0, r5
    ddf8:	4c06      	ldr	r4, [pc, #24]	; (de14 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    ddfa:	47a0      	blx	r4
    ddfc:	4906      	ldr	r1, [pc, #24]	; (de18 <_ZN17MemoryFlash_Class4InitEm+0x44>)
    ddfe:	4628      	mov	r0, r5
    de00:	47a0      	blx	r4
    de02:	e7f4      	b.n	ddee <_ZN17MemoryFlash_Class4InitEm+0x1a>
    de04:	2000903c 	.word	0x2000903c
    de08:	000105c1 	.word	0x000105c1
    de0c:	200014d8 	.word	0x200014d8
    de10:	00011560 	.word	0x00011560
    de14:	0000d929 	.word	0x0000d929
    de18:	0001155c 	.word	0x0001155c
    de1c:	0001153c 	.word	0x0001153c

0000de20 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    de20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    de24:	4c2b      	ldr	r4, [pc, #172]	; (ded4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    de26:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    de2a:	492b      	ldr	r1, [pc, #172]	; (ded8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    de2c:	4628      	mov	r0, r5
    de2e:	4f2b      	ldr	r7, [pc, #172]	; (dedc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    de30:	47b8      	blx	r7
    de32:	4e2b      	ldr	r6, [pc, #172]	; (dee0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    de34:	f8df 80d4 	ldr.w	r8, [pc, #212]	; df0c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    de38:	4632      	mov	r2, r6
    de3a:	4641      	mov	r1, r8
    de3c:	4628      	mov	r0, r5
    de3e:	4d29      	ldr	r5, [pc, #164]	; (dee4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    de40:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    de42:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    de46:	4928      	ldr	r1, [pc, #160]	; (dee8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    de48:	4648      	mov	r0, r9
    de4a:	47b8      	blx	r7
    de4c:	4632      	mov	r2, r6
    de4e:	4641      	mov	r1, r8
    de50:	4648      	mov	r0, r9
    de52:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    de54:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    de58:	4924      	ldr	r1, [pc, #144]	; (deec <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    de5a:	4648      	mov	r0, r9
    de5c:	47b8      	blx	r7
    de5e:	4632      	mov	r2, r6
    de60:	4641      	mov	r1, r8
    de62:	4648      	mov	r0, r9
    de64:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    de66:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    de6a:	4921      	ldr	r1, [pc, #132]	; (def0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    de6c:	4648      	mov	r0, r9
    de6e:	47b8      	blx	r7
    de70:	4632      	mov	r2, r6
    de72:	4641      	mov	r1, r8
    de74:	4648      	mov	r0, r9
    de76:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    de78:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    de7c:	491d      	ldr	r1, [pc, #116]	; (def4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    de7e:	4648      	mov	r0, r9
    de80:	47b8      	blx	r7
    de82:	4632      	mov	r2, r6
    de84:	4641      	mov	r1, r8
    de86:	4648      	mov	r0, r9
    de88:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    de8a:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    de8e:	491a      	ldr	r1, [pc, #104]	; (def8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    de90:	4648      	mov	r0, r9
    de92:	47b8      	blx	r7
    de94:	4632      	mov	r2, r6
    de96:	4641      	mov	r1, r8
    de98:	4648      	mov	r0, r9
    de9a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    de9c:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    dea0:	4916      	ldr	r1, [pc, #88]	; (defc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    dea2:	4648      	mov	r0, r9
    dea4:	47b8      	blx	r7
    dea6:	4632      	mov	r2, r6
    dea8:	4641      	mov	r1, r8
    deaa:	4648      	mov	r0, r9
    deac:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    deae:	f1a4 0918 	sub.w	r9, r4, #24
    deb2:	4913      	ldr	r1, [pc, #76]	; (df00 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    deb4:	4648      	mov	r0, r9
    deb6:	47b8      	blx	r7
    deb8:	4632      	mov	r2, r6
    deba:	4641      	mov	r1, r8
    debc:	4648      	mov	r0, r9
    debe:	47a8      	blx	r5
    dec0:	3408      	adds	r4, #8
    dec2:	4620      	mov	r0, r4
    dec4:	4b0f      	ldr	r3, [pc, #60]	; (df04 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    dec6:	4798      	blx	r3
    dec8:	4632      	mov	r2, r6
    deca:	490f      	ldr	r1, [pc, #60]	; (df08 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    decc:	4620      	mov	r0, r4
    dece:	47a8      	blx	r5
    ded0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ded4:	20002738 	.word	0x20002738
    ded8:	2000926c 	.word	0x2000926c
    dedc:	0000cd2d 	.word	0x0000cd2d
    dee0:	20000000 	.word	0x20000000
    dee4:	00010a09 	.word	0x00010a09
    dee8:	20009300 	.word	0x20009300
    deec:	20009424 	.word	0x20009424
    def0:	20009320 	.word	0x20009320
    def4:	200093e4 	.word	0x200093e4
    def8:	20009404 	.word	0x20009404
    defc:	200092dc 	.word	0x200092dc
    df00:	2000937c 	.word	0x2000937c
    df04:	0000dd69 	.word	0x0000dd69
    df08:	0000dd4d 	.word	0x0000dd4d
    df0c:	0000cd65 	.word	0x0000cd65

0000df10 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    df10:	4770      	bx	lr

0000df12 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    df12:	4770      	bx	lr

0000df14 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    df14:	b480      	push	{r7}
    df16:	b083      	sub	sp, #12
    df18:	af00      	add	r7, sp, #0
    df1a:	6078      	str	r0, [r7, #4]
    df1c:	460b      	mov	r3, r1
    df1e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    df20:	78fb      	ldrb	r3, [r7, #3]
    df22:	687a      	ldr	r2, [r7, #4]
    df24:	01db      	lsls	r3, r3, #7
    df26:	4413      	add	r3, r2
    df28:	681b      	ldr	r3, [r3, #0]
}
    df2a:	4618      	mov	r0, r3
    df2c:	370c      	adds	r7, #12
    df2e:	46bd      	mov	sp, r7
    df30:	bc80      	pop	{r7}
    df32:	4770      	bx	lr

0000df34 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    df34:	b480      	push	{r7}
    df36:	b085      	sub	sp, #20
    df38:	af00      	add	r7, sp, #0
    df3a:	60f8      	str	r0, [r7, #12]
    df3c:	460b      	mov	r3, r1
    df3e:	607a      	str	r2, [r7, #4]
    df40:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    df42:	7afb      	ldrb	r3, [r7, #11]
    df44:	68fa      	ldr	r2, [r7, #12]
    df46:	01db      	lsls	r3, r3, #7
    df48:	4413      	add	r3, r2
    df4a:	3318      	adds	r3, #24
    df4c:	687a      	ldr	r2, [r7, #4]
    df4e:	601a      	str	r2, [r3, #0]
}
    df50:	bf00      	nop
    df52:	3714      	adds	r7, #20
    df54:	46bd      	mov	sp, r7
    df56:	bc80      	pop	{r7}
    df58:	4770      	bx	lr

0000df5a <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    df5a:	b480      	push	{r7}
    df5c:	b083      	sub	sp, #12
    df5e:	af00      	add	r7, sp, #0
    df60:	6078      	str	r0, [r7, #4]
    df62:	460b      	mov	r3, r1
    df64:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    df66:	78fb      	ldrb	r3, [r7, #3]
    df68:	687a      	ldr	r2, [r7, #4]
    df6a:	01db      	lsls	r3, r3, #7
    df6c:	4413      	add	r3, r2
    df6e:	3310      	adds	r3, #16
    df70:	681b      	ldr	r3, [r3, #0]
}
    df72:	4618      	mov	r0, r3
    df74:	370c      	adds	r7, #12
    df76:	46bd      	mov	sp, r7
    df78:	bc80      	pop	{r7}
    df7a:	4770      	bx	lr

0000df7c <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    df7c:	b480      	push	{r7}
    df7e:	b085      	sub	sp, #20
    df80:	af00      	add	r7, sp, #0
    df82:	60f8      	str	r0, [r7, #12]
    df84:	460b      	mov	r3, r1
    df86:	607a      	str	r2, [r7, #4]
    df88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    df8a:	7afb      	ldrb	r3, [r7, #11]
    df8c:	68fa      	ldr	r2, [r7, #12]
    df8e:	01db      	lsls	r3, r3, #7
    df90:	4413      	add	r3, r2
    df92:	3314      	adds	r3, #20
    df94:	687a      	ldr	r2, [r7, #4]
    df96:	601a      	str	r2, [r3, #0]
}
    df98:	bf00      	nop
    df9a:	3714      	adds	r7, #20
    df9c:	46bd      	mov	sp, r7
    df9e:	bc80      	pop	{r7}
    dfa0:	4770      	bx	lr

0000dfa2 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    dfa2:	b480      	push	{r7}
    dfa4:	b085      	sub	sp, #20
    dfa6:	af00      	add	r7, sp, #0
    dfa8:	60f8      	str	r0, [r7, #12]
    dfaa:	460b      	mov	r3, r1
    dfac:	607a      	str	r2, [r7, #4]
    dfae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    dfb0:	7afb      	ldrb	r3, [r7, #11]
    dfb2:	68fa      	ldr	r2, [r7, #12]
    dfb4:	01db      	lsls	r3, r3, #7
    dfb6:	4413      	add	r3, r2
    dfb8:	331c      	adds	r3, #28
    dfba:	687a      	ldr	r2, [r7, #4]
    dfbc:	601a      	str	r2, [r3, #0]
}
    dfbe:	bf00      	nop
    dfc0:	3714      	adds	r7, #20
    dfc2:	46bd      	mov	sp, r7
    dfc4:	bc80      	pop	{r7}
    dfc6:	4770      	bx	lr

0000dfc8 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    dfc8:	b480      	push	{r7}
    dfca:	b083      	sub	sp, #12
    dfcc:	af00      	add	r7, sp, #0
    dfce:	6078      	str	r0, [r7, #4]
    dfd0:	460b      	mov	r3, r1
    dfd2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    dfd4:	78fb      	ldrb	r3, [r7, #3]
    dfd6:	687a      	ldr	r2, [r7, #4]
    dfd8:	01db      	lsls	r3, r3, #7
    dfda:	4413      	add	r3, r2
    dfdc:	3320      	adds	r3, #32
    dfde:	681b      	ldr	r3, [r3, #0]
}
    dfe0:	4618      	mov	r0, r3
    dfe2:	370c      	adds	r7, #12
    dfe4:	46bd      	mov	sp, r7
    dfe6:	bc80      	pop	{r7}
    dfe8:	4770      	bx	lr
	...

0000dfec <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    dfec:	b580      	push	{r7, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	af00      	add	r7, sp, #0
    dff2:	4603      	mov	r3, r0
    dff4:	6039      	str	r1, [r7, #0]
    dff6:	71fb      	strb	r3, [r7, #7]
    dff8:	4613      	mov	r3, r2
    dffa:	71bb      	strb	r3, [r7, #6]
	if (level) {
    dffc:	79bb      	ldrb	r3, [r7, #6]
    dffe:	2b00      	cmp	r3, #0
    e000:	d006      	beq.n	e010 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e002:	79fb      	ldrb	r3, [r7, #7]
    e004:	683a      	ldr	r2, [r7, #0]
    e006:	4619      	mov	r1, r3
    e008:	4806      	ldr	r0, [pc, #24]	; (e024 <_gpio_set_level+0x38>)
    e00a:	4b07      	ldr	r3, [pc, #28]	; (e028 <_gpio_set_level+0x3c>)
    e00c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e00e:	e005      	b.n	e01c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e010:	79fb      	ldrb	r3, [r7, #7]
    e012:	683a      	ldr	r2, [r7, #0]
    e014:	4619      	mov	r1, r3
    e016:	4803      	ldr	r0, [pc, #12]	; (e024 <_gpio_set_level+0x38>)
    e018:	4b04      	ldr	r3, [pc, #16]	; (e02c <_gpio_set_level+0x40>)
    e01a:	4798      	blx	r3
}
    e01c:	bf00      	nop
    e01e:	3708      	adds	r7, #8
    e020:	46bd      	mov	sp, r7
    e022:	bd80      	pop	{r7, pc}
    e024:	41008000 	.word	0x41008000
    e028:	0000df35 	.word	0x0000df35
    e02c:	0000df7d 	.word	0x0000df7d

0000e030 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    e030:	b580      	push	{r7, lr}
    e032:	b082      	sub	sp, #8
    e034:	af00      	add	r7, sp, #0
    e036:	4603      	mov	r3, r0
    e038:	6039      	str	r1, [r7, #0]
    e03a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    e03c:	79fb      	ldrb	r3, [r7, #7]
    e03e:	683a      	ldr	r2, [r7, #0]
    e040:	4619      	mov	r1, r3
    e042:	4803      	ldr	r0, [pc, #12]	; (e050 <_gpio_toggle_level+0x20>)
    e044:	4b03      	ldr	r3, [pc, #12]	; (e054 <_gpio_toggle_level+0x24>)
    e046:	4798      	blx	r3
}
    e048:	bf00      	nop
    e04a:	3708      	adds	r7, #8
    e04c:	46bd      	mov	sp, r7
    e04e:	bd80      	pop	{r7, pc}
    e050:	41008000 	.word	0x41008000
    e054:	0000dfa3 	.word	0x0000dfa3

0000e058 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e058:	b580      	push	{r7, lr}
    e05a:	b086      	sub	sp, #24
    e05c:	af00      	add	r7, sp, #0
    e05e:	4603      	mov	r3, r0
    e060:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e062:	f107 030c 	add.w	r3, r7, #12
    e066:	4618      	mov	r0, r3
    e068:	4b13      	ldr	r3, [pc, #76]	; (e0b8 <_gpio_get_level+0x60>)
    e06a:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e06c:	79fb      	ldrb	r3, [r7, #7]
    e06e:	4619      	mov	r1, r3
    e070:	4812      	ldr	r0, [pc, #72]	; (e0bc <_gpio_get_level+0x64>)
    e072:	4b13      	ldr	r3, [pc, #76]	; (e0c0 <_gpio_get_level+0x68>)
    e074:	4798      	blx	r3
    e076:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e078:	79fb      	ldrb	r3, [r7, #7]
    e07a:	4619      	mov	r1, r3
    e07c:	480f      	ldr	r0, [pc, #60]	; (e0bc <_gpio_get_level+0x64>)
    e07e:	4b11      	ldr	r3, [pc, #68]	; (e0c4 <_gpio_get_level+0x6c>)
    e080:	4798      	blx	r3
    e082:	4602      	mov	r2, r0
    e084:	697b      	ldr	r3, [r7, #20]
    e086:	43db      	mvns	r3, r3
    e088:	4013      	ands	r3, r2
    e08a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e08c:	79fb      	ldrb	r3, [r7, #7]
    e08e:	4619      	mov	r1, r3
    e090:	480a      	ldr	r0, [pc, #40]	; (e0bc <_gpio_get_level+0x64>)
    e092:	4b0d      	ldr	r3, [pc, #52]	; (e0c8 <_gpio_get_level+0x70>)
    e094:	4798      	blx	r3
    e096:	4602      	mov	r2, r0
    e098:	697b      	ldr	r3, [r7, #20]
    e09a:	4013      	ands	r3, r2
    e09c:	693a      	ldr	r2, [r7, #16]
    e09e:	4313      	orrs	r3, r2
    e0a0:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e0a2:	f107 030c 	add.w	r3, r7, #12
    e0a6:	4618      	mov	r0, r3
    e0a8:	4b08      	ldr	r3, [pc, #32]	; (e0cc <_gpio_get_level+0x74>)
    e0aa:	4798      	blx	r3

	return tmp;
    e0ac:	693b      	ldr	r3, [r7, #16]
}
    e0ae:	4618      	mov	r0, r3
    e0b0:	3718      	adds	r7, #24
    e0b2:	46bd      	mov	sp, r7
    e0b4:	bd80      	pop	{r7, pc}
    e0b6:	bf00      	nop
    e0b8:	0000ae69 	.word	0x0000ae69
    e0bc:	41008000 	.word	0x41008000
    e0c0:	0000df15 	.word	0x0000df15
    e0c4:	0000dfc9 	.word	0x0000dfc9
    e0c8:	0000df5b 	.word	0x0000df5b
    e0cc:	0000ae8f 	.word	0x0000ae8f

0000e0d0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e0d0:	b580      	push	{r7, lr}
    e0d2:	b082      	sub	sp, #8
    e0d4:	af00      	add	r7, sp, #0
    e0d6:	4603      	mov	r3, r0
    e0d8:	460a      	mov	r2, r1
    e0da:	71fb      	strb	r3, [r7, #7]
    e0dc:	4613      	mov	r3, r2
    e0de:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e0e0:	79fb      	ldrb	r3, [r7, #7]
    e0e2:	115b      	asrs	r3, r3, #5
    e0e4:	b2d8      	uxtb	r0, r3
    e0e6:	79fb      	ldrb	r3, [r7, #7]
    e0e8:	f003 031f 	and.w	r3, r3, #31
    e0ec:	2201      	movs	r2, #1
    e0ee:	fa02 f303 	lsl.w	r3, r2, r3
    e0f2:	79ba      	ldrb	r2, [r7, #6]
    e0f4:	4619      	mov	r1, r3
    e0f6:	4b03      	ldr	r3, [pc, #12]	; (e104 <gpio_set_pin_level+0x34>)
    e0f8:	4798      	blx	r3
}
    e0fa:	bf00      	nop
    e0fc:	3708      	adds	r7, #8
    e0fe:	46bd      	mov	sp, r7
    e100:	bd80      	pop	{r7, pc}
    e102:	bf00      	nop
    e104:	0000dfed 	.word	0x0000dfed

0000e108 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    e108:	b580      	push	{r7, lr}
    e10a:	b082      	sub	sp, #8
    e10c:	af00      	add	r7, sp, #0
    e10e:	4603      	mov	r3, r0
    e110:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    e112:	79fb      	ldrb	r3, [r7, #7]
    e114:	115b      	asrs	r3, r3, #5
    e116:	b2d8      	uxtb	r0, r3
    e118:	79fb      	ldrb	r3, [r7, #7]
    e11a:	f003 031f 	and.w	r3, r3, #31
    e11e:	2201      	movs	r2, #1
    e120:	fa02 f303 	lsl.w	r3, r2, r3
    e124:	4619      	mov	r1, r3
    e126:	4b03      	ldr	r3, [pc, #12]	; (e134 <gpio_toggle_pin_level+0x2c>)
    e128:	4798      	blx	r3
}
    e12a:	bf00      	nop
    e12c:	3708      	adds	r7, #8
    e12e:	46bd      	mov	sp, r7
    e130:	bd80      	pop	{r7, pc}
    e132:	bf00      	nop
    e134:	0000e031 	.word	0x0000e031

0000e138 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b082      	sub	sp, #8
    e13c:	af00      	add	r7, sp, #0
    e13e:	4603      	mov	r3, r0
    e140:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e142:	79fb      	ldrb	r3, [r7, #7]
    e144:	115b      	asrs	r3, r3, #5
    e146:	b2db      	uxtb	r3, r3
    e148:	4618      	mov	r0, r3
    e14a:	4b09      	ldr	r3, [pc, #36]	; (e170 <gpio_get_pin_level+0x38>)
    e14c:	4798      	blx	r3
    e14e:	4601      	mov	r1, r0
    e150:	79fb      	ldrb	r3, [r7, #7]
    e152:	f003 031f 	and.w	r3, r3, #31
    e156:	2201      	movs	r2, #1
    e158:	fa02 f303 	lsl.w	r3, r2, r3
    e15c:	400b      	ands	r3, r1
    e15e:	2b00      	cmp	r3, #0
    e160:	bf14      	ite	ne
    e162:	2301      	movne	r3, #1
    e164:	2300      	moveq	r3, #0
    e166:	b2db      	uxtb	r3, r3
}
    e168:	4618      	mov	r0, r3
    e16a:	3708      	adds	r7, #8
    e16c:	46bd      	mov	sp, r7
    e16e:	bd80      	pop	{r7, pc}
    e170:	0000e059 	.word	0x0000e059

0000e174 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
    e174:	b480      	push	{r7}
    e176:	b083      	sub	sp, #12
    e178:	af00      	add	r7, sp, #0
    e17a:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
    e17c:	4b07      	ldr	r3, [pc, #28]	; (e19c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    e17e:	681b      	ldr	r3, [r3, #0]
    e180:	2201      	movs	r2, #1
    e182:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
    e186:	4b05      	ldr	r3, [pc, #20]	; (e19c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    e188:	681b      	ldr	r3, [r3, #0]
    e18a:	2201      	movs	r2, #1
    e18c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    e190:	bf00      	nop
    e192:	370c      	adds	r7, #12
    e194:	46bd      	mov	sp, r7
    e196:	bc80      	pop	{r7}
    e198:	4770      	bx	lr
    e19a:	bf00      	nop
    e19c:	20008bfc 	.word	0x20008bfc

0000e1a0 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
    e1a0:	b480      	push	{r7}
    e1a2:	b083      	sub	sp, #12
    e1a4:	af00      	add	r7, sp, #0
    e1a6:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
    e1a8:	4b07      	ldr	r3, [pc, #28]	; (e1c8 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    e1aa:	685b      	ldr	r3, [r3, #4]
    e1ac:	2201      	movs	r2, #1
    e1ae:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
    e1b2:	4b05      	ldr	r3, [pc, #20]	; (e1c8 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    e1b4:	685b      	ldr	r3, [r3, #4]
    e1b6:	2201      	movs	r2, #1
    e1b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    e1bc:	bf00      	nop
    e1be:	370c      	adds	r7, #12
    e1c0:	46bd      	mov	sp, r7
    e1c2:	bc80      	pop	{r7}
    e1c4:	4770      	bx	lr
    e1c6:	bf00      	nop
    e1c8:	20008bfc 	.word	0x20008bfc

0000e1cc <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
    e1cc:	b480      	push	{r7}
    e1ce:	b083      	sub	sp, #12
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
    e1d4:	4b04      	ldr	r3, [pc, #16]	; (e1e8 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	2201      	movs	r2, #1
    e1da:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    e1de:	bf00      	nop
    e1e0:	370c      	adds	r7, #12
    e1e2:	46bd      	mov	sp, r7
    e1e4:	bc80      	pop	{r7}
    e1e6:	4770      	bx	lr
    e1e8:	20008bfc 	.word	0x20008bfc

0000e1ec <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
    e1ec:	b480      	push	{r7}
    e1ee:	b083      	sub	sp, #12
    e1f0:	af00      	add	r7, sp, #0
    e1f2:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
    e1f4:	4b04      	ldr	r3, [pc, #16]	; (e208 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
    e1f6:	685b      	ldr	r3, [r3, #4]
    e1f8:	2201      	movs	r2, #1
    e1fa:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    e1fe:	bf00      	nop
    e200:	370c      	adds	r7, #12
    e202:	46bd      	mov	sp, r7
    e204:	bc80      	pop	{r7}
    e206:	4770      	bx	lr
    e208:	20008bfc 	.word	0x20008bfc

0000e20c <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
    e20c:	b480      	push	{r7}
    e20e:	b083      	sub	sp, #12
    e210:	af00      	add	r7, sp, #0
    e212:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
    e214:	4b04      	ldr	r3, [pc, #16]	; (e228 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
    e216:	681b      	ldr	r3, [r3, #0]
    e218:	2201      	movs	r2, #1
    e21a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    e21e:	bf00      	nop
    e220:	370c      	adds	r7, #12
    e222:	46bd      	mov	sp, r7
    e224:	bc80      	pop	{r7}
    e226:	4770      	bx	lr
    e228:	20008bfc 	.word	0x20008bfc

0000e22c <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
    e22c:	b480      	push	{r7}
    e22e:	b083      	sub	sp, #12
    e230:	af00      	add	r7, sp, #0
    e232:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
    e234:	4b04      	ldr	r3, [pc, #16]	; (e248 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
    e236:	685b      	ldr	r3, [r3, #4]
    e238:	2201      	movs	r2, #1
    e23a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    e23e:	bf00      	nop
    e240:	370c      	adds	r7, #12
    e242:	46bd      	mov	sp, r7
    e244:	bc80      	pop	{r7}
    e246:	4770      	bx	lr
    e248:	20008bfc 	.word	0x20008bfc

0000e24c <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    e24c:	b580      	push	{r7, lr}
    e24e:	b082      	sub	sp, #8
    e250:	af00      	add	r7, sp, #0
    e252:	6078      	str	r0, [r7, #4]
    e254:	687b      	ldr	r3, [r7, #4]
    e256:	4618      	mov	r0, r3
    e258:	4b1c      	ldr	r3, [pc, #112]	; (e2cc <_ZN22FlapperValveControllerC1Ev+0x80>)
    e25a:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
    e25c:	687b      	ldr	r3, [r7, #4]
    e25e:	4a1c      	ldr	r2, [pc, #112]	; (e2d0 <_ZN22FlapperValveControllerC1Ev+0x84>)
    e260:	67da      	str	r2, [r3, #124]	; 0x7c
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
    e262:	687b      	ldr	r3, [r7, #4]
    e264:	2200      	movs	r2, #0
    e266:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
    e26a:	687b      	ldr	r3, [r7, #4]
    e26c:	2200      	movs	r2, #0
    e26e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
    e272:	687b      	ldr	r3, [r7, #4]
    e274:	2200      	movs	r2, #0
    e276:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
    e27a:	687b      	ldr	r3, [r7, #4]
    e27c:	2200      	movs	r2, #0
    e27e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
    e282:	687b      	ldr	r3, [r7, #4]
    e284:	2200      	movs	r2, #0
    e286:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    e28a:	687b      	ldr	r3, [r7, #4]
    e28c:	22da      	movs	r2, #218	; 0xda
    e28e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
    e292:	687b      	ldr	r3, [r7, #4]
    e294:	2200      	movs	r2, #0
    e296:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
    e29a:	687b      	ldr	r3, [r7, #4]
    e29c:	2200      	movs	r2, #0
    e29e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
    e2a2:	687b      	ldr	r3, [r7, #4]
    e2a4:	2200      	movs	r2, #0
    e2a6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
    e2aa:	687b      	ldr	r3, [r7, #4]
    e2ac:	2200      	movs	r2, #0
    e2ae:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
    e2b2:	687b      	ldr	r3, [r7, #4]
    e2b4:	2200      	movs	r2, #0
    e2b6:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
    e2ba:	687b      	ldr	r3, [r7, #4]
    e2bc:	2200      	movs	r2, #0
    e2be:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
	
} //FlapperValveController
    e2c2:	687b      	ldr	r3, [r7, #4]
    e2c4:	4618      	mov	r0, r3
    e2c6:	3708      	adds	r7, #8
    e2c8:	46bd      	mov	sp, r7
    e2ca:	bd80      	pop	{r7, pc}
    e2cc:	0000f389 	.word	0x0000f389
    e2d0:	20008c04 	.word	0x20008c04

0000e2d4 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    e2d4:	b580      	push	{r7, lr}
    e2d6:	b082      	sub	sp, #8
    e2d8:	af00      	add	r7, sp, #0
    e2da:	6078      	str	r0, [r7, #4]
    e2dc:	687b      	ldr	r3, [r7, #4]
    e2de:	4618      	mov	r0, r3
    e2e0:	4b03      	ldr	r3, [pc, #12]	; (e2f0 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    e2e2:	4798      	blx	r3
{
} //~FlapperValveController
    e2e4:	687b      	ldr	r3, [r7, #4]
    e2e6:	4618      	mov	r0, r3
    e2e8:	3708      	adds	r7, #8
    e2ea:	46bd      	mov	sp, r7
    e2ec:	bd80      	pop	{r7, pc}
    e2ee:	bf00      	nop
    e2f0:	0000f3d5 	.word	0x0000f3d5

0000e2f4 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
    e2f4:	b580      	push	{r7, lr}
    e2f6:	b082      	sub	sp, #8
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	6078      	str	r0, [r7, #4]
    e2fc:	460b      	mov	r3, r1
    e2fe:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
    e300:	78fb      	ldrb	r3, [r7, #3]
    e302:	4915      	ldr	r1, [pc, #84]	; (e358 <_ZN22FlapperValveController14InitControllerEh+0x64>)
    e304:	687a      	ldr	r2, [r7, #4]
    e306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	78fa      	ldrb	r2, [r7, #3]
    e30e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		singlefv=&fvStatic[valve_id];
    e312:	78fb      	ldrb	r3, [r7, #3]
    e314:	2274      	movs	r2, #116	; 0x74
    e316:	fb02 f303 	mul.w	r3, r2, r3
    e31a:	4a10      	ldr	r2, [pc, #64]	; (e35c <_ZN22FlapperValveController14InitControllerEh+0x68>)
    e31c:	441a      	add	r2, r3
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	67da      	str	r2, [r3, #124]	; 0x7c
		if (singlefv->Init(valve_id))
    e322:	687b      	ldr	r3, [r7, #4]
    e324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e326:	78fa      	ldrb	r2, [r7, #3]
    e328:	4611      	mov	r1, r2
    e32a:	4618      	mov	r0, r3
    e32c:	4b0c      	ldr	r3, [pc, #48]	; (e360 <_ZN22FlapperValveController14InitControllerEh+0x6c>)
    e32e:	4798      	blx	r3
    e330:	4603      	mov	r3, r0
    e332:	2b00      	cmp	r3, #0
    e334:	d007      	beq.n	e346 <_ZN22FlapperValveController14InitControllerEh+0x52>
		{
			isOK=Selftest();
    e336:	6878      	ldr	r0, [r7, #4]
    e338:	4b0a      	ldr	r3, [pc, #40]	; (e364 <_ZN22FlapperValveController14InitControllerEh+0x70>)
    e33a:	4798      	blx	r3
    e33c:	4603      	mov	r3, r0
    e33e:	461a      	mov	r2, r3
    e340:	687b      	ldr	r3, [r7, #4]
    e342:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		}
		return	isOK;
    e346:	687b      	ldr	r3, [r7, #4]
    e348:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    e34c:	b2db      	uxtb	r3, r3
}
    e34e:	4618      	mov	r0, r3
    e350:	3708      	adds	r7, #8
    e352:	46bd      	mov	sp, r7
    e354:	bd80      	pop	{r7, pc}
    e356:	bf00      	nop
    e358:	20008bfc 	.word	0x20008bfc
    e35c:	20008c04 	.word	0x20008c04
    e360:	0000f489 	.word	0x0000f489
    e364:	0000f031 	.word	0x0000f031

0000e368 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    e368:	b480      	push	{r7}
    e36a:	b083      	sub	sp, #12
    e36c:	af00      	add	r7, sp, #0
    e36e:	6078      	str	r0, [r7, #4]
    e370:	460b      	mov	r3, r1
    e372:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
    e37a:	687b      	ldr	r3, [r7, #4]
    e37c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e386:	461a      	mov	r2, r3
    e388:	78fb      	ldrb	r3, [r7, #3]
    e38a:	429a      	cmp	r2, r3
    e38c:	bfcc      	ite	gt
    e38e:	2301      	movgt	r3, #1
    e390:	2300      	movle	r3, #0
    e392:	b2da      	uxtb	r2, r3
    e394:	687b      	ldr	r3, [r7, #4]
    e396:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
    e39a:	687b      	ldr	r3, [r7, #4]
    e39c:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
    e3a0:	4618      	mov	r0, r3
    e3a2:	370c      	adds	r7, #12
    e3a4:	46bd      	mov	sp, r7
    e3a6:	bc80      	pop	{r7}
    e3a8:	4770      	bx	lr
	...

0000e3ac <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    e3ac:	b580      	push	{r7, lr}
    e3ae:	b082      	sub	sp, #8
    e3b0:	af00      	add	r7, sp, #0
    e3b2:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    e3b4:	687b      	ldr	r3, [r7, #4]
    e3b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    e3ba:	4619      	mov	r1, r3
    e3bc:	6878      	ldr	r0, [r7, #4]
    e3be:	4b03      	ldr	r3, [pc, #12]	; (e3cc <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    e3c0:	4798      	blx	r3
    e3c2:	4603      	mov	r3, r0
	
}
    e3c4:	4618      	mov	r0, r3
    e3c6:	3708      	adds	r7, #8
    e3c8:	46bd      	mov	sp, r7
    e3ca:	bd80      	pop	{r7, pc}
    e3cc:	0000e369 	.word	0x0000e369

0000e3d0 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    e3d0:	b590      	push	{r4, r7, lr}
    e3d2:	b083      	sub	sp, #12
    e3d4:	af00      	add	r7, sp, #0
    e3d6:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    e3de:	687b      	ldr	r3, [r7, #4]
    e3e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    e3e4:	687b      	ldr	r3, [r7, #4]
    e3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e3e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d008      	beq.n	e402 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		singlefv->SetEnable(false);
    e3f0:	687b      	ldr	r3, [r7, #4]
    e3f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e3f4:	2100      	movs	r1, #0
    e3f6:	4618      	mov	r0, r3
    e3f8:	4b0b      	ldr	r3, [pc, #44]	; (e428 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
    e3fa:	4798      	blx	r3
		delay_ms(10);
    e3fc:	200a      	movs	r0, #10
    e3fe:	4b0b      	ldr	r3, [pc, #44]	; (e42c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    e400:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
    e402:	687b      	ldr	r3, [r7, #4]
    e404:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    e406:	6878      	ldr	r0, [r7, #4]
    e408:	4b09      	ldr	r3, [pc, #36]	; (e430 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    e40a:	4798      	blx	r3
    e40c:	4603      	mov	r3, r0
    e40e:	4619      	mov	r1, r3
    e410:	4620      	mov	r0, r4
    e412:	4b08      	ldr	r3, [pc, #32]	; (e434 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    e414:	4798      	blx	r3
	StartMotor();
    e416:	6878      	ldr	r0, [r7, #4]
    e418:	4b07      	ldr	r3, [pc, #28]	; (e438 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    e41a:	4798      	blx	r3
	return 0;
    e41c:	2300      	movs	r3, #0
}
    e41e:	4618      	mov	r0, r3
    e420:	370c      	adds	r7, #12
    e422:	46bd      	mov	sp, r7
    e424:	bd90      	pop	{r4, r7, pc}
    e426:	bf00      	nop
    e428:	0000f5f1 	.word	0x0000f5f1
    e42c:	00001e01 	.word	0x00001e01
    e430:	0000e3ad 	.word	0x0000e3ad
    e434:	0000f671 	.word	0x0000f671
    e438:	0000ecf1 	.word	0x0000ecf1

0000e43c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    e43c:	b580      	push	{r7, lr}
    e43e:	b082      	sub	sp, #8
    e440:	af00      	add	r7, sp, #0
    e442:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    e444:	6878      	ldr	r0, [r7, #4]
    e446:	4b13      	ldr	r3, [pc, #76]	; (e494 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    e448:	4798      	blx	r3
    e44a:	4603      	mov	r3, r0
    e44c:	2b00      	cmp	r3, #0
    e44e:	d003      	beq.n	e458 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    e450:	6878      	ldr	r0, [r7, #4]
    e452:	4b11      	ldr	r3, [pc, #68]	; (e498 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    e454:	4798      	blx	r3
    e456:	e013      	b.n	e480 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    e45e:	2b00      	cmp	r3, #0
    e460:	d00b      	beq.n	e47a <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    e468:	4619      	mov	r1, r3
    e46a:	6878      	ldr	r0, [r7, #4]
    e46c:	4b0b      	ldr	r3, [pc, #44]	; (e49c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    e46e:	4798      	blx	r3
			NBC_Activated=false;
    e470:	687b      	ldr	r3, [r7, #4]
    e472:	2200      	movs	r2, #0
    e474:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    e478:	e002      	b.n	e480 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    e47a:	6878      	ldr	r0, [r7, #4]
    e47c:	4b08      	ldr	r3, [pc, #32]	; (e4a0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    e47e:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    e480:	687b      	ldr	r3, [r7, #4]
    e482:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    e486:	f083 0301 	eor.w	r3, r3, #1
    e48a:	b2db      	uxtb	r3, r3
}
    e48c:	4618      	mov	r0, r3
    e48e:	3708      	adds	r7, #8
    e490:	46bd      	mov	sp, r7
    e492:	bd80      	pop	{r7, pc}
    e494:	0000eb31 	.word	0x0000eb31
    e498:	0000ead1 	.word	0x0000ead1
    e49c:	0000ed81 	.word	0x0000ed81
    e4a0:	0000e755 	.word	0x0000e755

0000e4a4 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    e4a4:	b590      	push	{r4, r7, lr}
    e4a6:	b085      	sub	sp, #20
    e4a8:	af00      	add	r7, sp, #0
    e4aa:	6078      	str	r0, [r7, #4]
	bool result=false;
    e4ac:	2300      	movs	r3, #0
    e4ae:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    e4b0:	687b      	ldr	r3, [r7, #4]
    e4b2:	33bf      	adds	r3, #191	; 0xbf
    e4b4:	4619      	mov	r1, r3
    e4b6:	4817      	ldr	r0, [pc, #92]	; (e514 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    e4b8:	4b17      	ldr	r3, [pc, #92]	; (e518 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    e4ba:	4798      	blx	r3
	UpdateFlapperValveData();
    e4bc:	6878      	ldr	r0, [r7, #4]
    e4be:	4b17      	ldr	r3, [pc, #92]	; (e51c <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    e4c0:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    e4c2:	687b      	ldr	r3, [r7, #4]
    e4c4:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
    e4c8:	f083 0301 	eor.w	r3, r3, #1
    e4cc:	b2db      	uxtb	r3, r3
    e4ce:	461c      	mov	r4, r3
    e4d0:	6878      	ldr	r0, [r7, #4]
    e4d2:	4b13      	ldr	r3, [pc, #76]	; (e520 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    e4d4:	4798      	blx	r3
    e4d6:	4603      	mov	r3, r0
    e4d8:	f083 0301 	eor.w	r3, r3, #1
    e4dc:	b2db      	uxtb	r3, r3
    e4de:	4023      	ands	r3, r4
    e4e0:	2b00      	cmp	r3, #0
    e4e2:	bf14      	ite	ne
    e4e4:	2301      	movne	r3, #1
    e4e6:	2300      	moveq	r3, #0
    e4e8:	b2db      	uxtb	r3, r3
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d00d      	beq.n	e50a <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    e4ee:	687b      	ldr	r3, [r7, #4]
    e4f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e4f4:	461a      	mov	r2, r3
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    e4fc:	429a      	cmp	r2, r3
    e4fe:	dd02      	ble.n	e506 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    e500:	2301      	movs	r3, #1
    e502:	73fb      	strb	r3, [r7, #15]
    e504:	e001      	b.n	e50a <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    e506:	2300      	movs	r3, #0
    e508:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    e50a:	7bfb      	ldrb	r3, [r7, #15]
}
    e50c:	4618      	mov	r0, r3
    e50e:	3714      	adds	r7, #20
    e510:	46bd      	mov	sp, r7
    e512:	bd90      	pop	{r4, r7, pc}
    e514:	20002740 	.word	0x20002740
    e518:	0000dcf1 	.word	0x0000dcf1
    e51c:	0000ef59 	.word	0x0000ef59
    e520:	0000eb31 	.word	0x0000eb31

0000e524 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    e524:	b580      	push	{r7, lr}
    e526:	b082      	sub	sp, #8
    e528:	af00      	add	r7, sp, #0
    e52a:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    e52c:	6878      	ldr	r0, [r7, #4]
    e52e:	4b11      	ldr	r3, [pc, #68]	; (e574 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
    e530:	4798      	blx	r3
    e532:	4603      	mov	r3, r0
    e534:	461a      	mov	r2, r3
    e536:	687b      	ldr	r3, [r7, #4]
    e538:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    e53c:	b2db      	uxtb	r3, r3
    e53e:	f083 0301 	eor.w	r3, r3, #1
    e542:	b2db      	uxtb	r3, r3
    e544:	4013      	ands	r3, r2
    e546:	2b00      	cmp	r3, #0
    e548:	bf14      	ite	ne
    e54a:	2301      	movne	r3, #1
    e54c:	2300      	moveq	r3, #0
    e54e:	b2db      	uxtb	r3, r3
    e550:	2b00      	cmp	r3, #0
    e552:	d003      	beq.n	e55c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    e554:	6878      	ldr	r0, [r7, #4]
    e556:	4b08      	ldr	r3, [pc, #32]	; (e578 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
    e558:	4798      	blx	r3
    e55a:	e002      	b.n	e562 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
    e55c:	6878      	ldr	r0, [r7, #4]
    e55e:	4b07      	ldr	r3, [pc, #28]	; (e57c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
    e560:	4798      	blx	r3
	}
	return resetTimeout;
    e562:	687b      	ldr	r3, [r7, #4]
    e564:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    e568:	b2db      	uxtb	r3, r3
}
    e56a:	4618      	mov	r0, r3
    e56c:	3708      	adds	r7, #8
    e56e:	46bd      	mov	sp, r7
    e570:	bd80      	pop	{r7, pc}
    e572:	bf00      	nop
    e574:	0000e4a5 	.word	0x0000e4a5
    e578:	0000e921 	.word	0x0000e921
    e57c:	0000e581 	.word	0x0000e581

0000e580 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    e580:	b580      	push	{r7, lr}
    e582:	b082      	sub	sp, #8
    e584:	af00      	add	r7, sp, #0
    e586:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    e588:	6878      	ldr	r0, [r7, #4]
    e58a:	4b29      	ldr	r3, [pc, #164]	; (e630 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    e58c:	4798      	blx	r3
    e58e:	4603      	mov	r3, r0
    e590:	2b00      	cmp	r3, #0
    e592:	d031      	beq.n	e5f8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    e594:	687b      	ldr	r3, [r7, #4]
    e596:	2201      	movs	r2, #1
    e598:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
    e59c:	687b      	ldr	r3, [r7, #4]
    e59e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d003      	beq.n	e5ae <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    e5a6:	6878      	ldr	r0, [r7, #4]
    e5a8:	4b22      	ldr	r3, [pc, #136]	; (e634 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    e5aa:	4798      	blx	r3
    e5ac:	e038      	b.n	e620 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e5b4:	461a      	mov	r2, r3
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    e5bc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    e5c0:	429a      	cmp	r2, r3
    e5c2:	dd0c      	ble.n	e5de <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    e5c4:	687b      	ldr	r3, [r7, #4]
    e5c6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    e5ca:	43db      	mvns	r3, r3
    e5cc:	b2db      	uxtb	r3, r3
    e5ce:	4619      	mov	r1, r3
    e5d0:	6878      	ldr	r0, [r7, #4]
    e5d2:	4b19      	ldr	r3, [pc, #100]	; (e638 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    e5d4:	4798      	blx	r3
					standAloneReturning=true;
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	2201      	movs	r2, #1
    e5da:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    e5e4:	43db      	mvns	r3, r3
    e5e6:	b2da      	uxtb	r2, r3
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	2201      	movs	r2, #1
    e5f2:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    e5f6:	e013      	b.n	e620 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	2200      	movs	r2, #0
    e5fc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
    e600:	687b      	ldr	r3, [r7, #4]
    e602:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    e606:	2b00      	cmp	r3, #0
    e608:	d007      	beq.n	e61a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    e60a:	687b      	ldr	r3, [r7, #4]
    e60c:	2200      	movs	r2, #0
    e60e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
    e612:	687b      	ldr	r3, [r7, #4]
    e614:	2200      	movs	r2, #0
    e616:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    e61a:	6878      	ldr	r0, [r7, #4]
    e61c:	4b05      	ldr	r3, [pc, #20]	; (e634 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    e61e:	4798      	blx	r3
		
	}
	return standAloneMode;
    e620:	687b      	ldr	r3, [r7, #4]
    e622:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
}
    e626:	4618      	mov	r0, r3
    e628:	3708      	adds	r7, #8
    e62a:	46bd      	mov	sp, r7
    e62c:	bd80      	pop	{r7, pc}
    e62e:	bf00      	nop
    e630:	0000e63d 	.word	0x0000e63d
    e634:	0000e43d 	.word	0x0000e43d
    e638:	0000ed81 	.word	0x0000ed81

0000e63c <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    e63c:	b480      	push	{r7}
    e63e:	b085      	sub	sp, #20
    e640:	af00      	add	r7, sp, #0
    e642:	6078      	str	r0, [r7, #4]
	bool result=false;
    e644:	2300      	movs	r3, #0
    e646:	73fb      	strb	r3, [r7, #15]
	if ((dataStruct.controlOutputs.iAlcFvStandAloneOut)&(!dataStruct.inputStatus.cabin[1]))
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    e64e:	461a      	mov	r2, r3
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    e656:	f083 0301 	eor.w	r3, r3, #1
    e65a:	b2db      	uxtb	r3, r3
    e65c:	4013      	ands	r3, r2
    e65e:	2b00      	cmp	r3, #0
    e660:	d002      	beq.n	e668 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2c>
	{
		result=true;
    e662:	2301      	movs	r3, #1
    e664:	73fb      	strb	r3, [r7, #15]
    e666:	e001      	b.n	e66c <_ZN22FlapperValveController16IsStandAloneModeEv+0x30>
	} 
	else
	{
		result=false;
    e668:	2300      	movs	r3, #0
    e66a:	73fb      	strb	r3, [r7, #15]
	}
	return result;
    e66c:	7bfb      	ldrb	r3, [r7, #15]
}
    e66e:	4618      	mov	r0, r3
    e670:	3714      	adds	r7, #20
    e672:	46bd      	mov	sp, r7
    e674:	bc80      	pop	{r7}
    e676:	4770      	bx	lr

0000e678 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
    e678:	b580      	push	{r7, lr}
    e67a:	b082      	sub	sp, #8
    e67c:	af00      	add	r7, sp, #0
    e67e:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    e680:	687b      	ldr	r3, [r7, #4]
    e682:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    e686:	2b05      	cmp	r3, #5
    e688:	bfd4      	ite	le
    e68a:	2301      	movle	r3, #1
    e68c:	2300      	movgt	r3, #0
    e68e:	b2da      	uxtb	r2, r3
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e696:	2b05      	cmp	r3, #5
    e698:	bfd4      	ite	le
    e69a:	2301      	movle	r3, #1
    e69c:	2300      	movgt	r3, #0
    e69e:	b2db      	uxtb	r3, r3
    e6a0:	4013      	ands	r3, r2
    e6a2:	b2da      	uxtb	r2, r3
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    e6aa:	2bfa      	cmp	r3, #250	; 0xfa
    e6ac:	bfcc      	ite	gt
    e6ae:	2301      	movgt	r3, #1
    e6b0:	2300      	movle	r3, #0
    e6b2:	b2d9      	uxtb	r1, r3
    e6b4:	687b      	ldr	r3, [r7, #4]
    e6b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e6ba:	2bf5      	cmp	r3, #245	; 0xf5
    e6bc:	bfcc      	ite	gt
    e6be:	2301      	movgt	r3, #1
    e6c0:	2300      	movle	r3, #0
    e6c2:	b2db      	uxtb	r3, r3
    e6c4:	400b      	ands	r3, r1
    e6c6:	b2db      	uxtb	r3, r3
    e6c8:	4313      	orrs	r3, r2
    e6ca:	b2db      	uxtb	r3, r3
    e6cc:	461a      	mov	r2, r3
    e6ce:	687b      	ldr	r3, [r7, #4]
    e6d0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    e6d4:	f083 0301 	eor.w	r3, r3, #1
    e6d8:	b2db      	uxtb	r3, r3
    e6da:	4619      	mov	r1, r3
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    e6e2:	b2db      	uxtb	r3, r3
    e6e4:	400b      	ands	r3, r1
    e6e6:	4013      	ands	r3, r2
    e6e8:	2b00      	cmp	r3, #0
    e6ea:	bf14      	ite	ne
    e6ec:	2301      	movne	r3, #1
    e6ee:	2300      	moveq	r3, #0
    e6f0:	b2db      	uxtb	r3, r3
    e6f2:	2b00      	cmp	r3, #0
    e6f4:	d01f      	beq.n	e736 <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
    e6f6:	687b      	ldr	r3, [r7, #4]
    e6f8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d105      	bne.n	e70c <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    e700:	22c8      	movs	r2, #200	; 0xc8
    e702:	4910      	ldr	r1, [pc, #64]	; (e744 <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
    e704:	4810      	ldr	r0, [pc, #64]	; (e748 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    e706:	4b11      	ldr	r3, [pc, #68]	; (e74c <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    e708:	4798      	blx	r3
    e70a:	e004      	b.n	e716 <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    e70c:	22c8      	movs	r2, #200	; 0xc8
    e70e:	4910      	ldr	r1, [pc, #64]	; (e750 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
    e710:	480d      	ldr	r0, [pc, #52]	; (e748 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    e712:	4b0e      	ldr	r3, [pc, #56]	; (e74c <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    e714:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	2200      	movs	r2, #0
    e71a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
			gotSetpoint=false;
    e71e:	687b      	ldr	r3, [r7, #4]
    e720:	2200      	movs	r2, #0
    e722:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			closing=true;
    e726:	687b      	ldr	r3, [r7, #4]
    e728:	2201      	movs	r2, #1
    e72a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
			unLockTimeout=true;
    e72e:	687b      	ldr	r3, [r7, #4]
    e730:	2201      	movs	r2, #1
    e732:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		}
		return closing;
    e736:	687b      	ldr	r3, [r7, #4]
    e738:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
	
}
    e73c:	4618      	mov	r0, r3
    e73e:	3708      	adds	r7, #8
    e740:	46bd      	mov	sp, r7
    e742:	bd80      	pop	{r7, pc}
    e744:	0000e1cd 	.word	0x0000e1cd
    e748:	20008b3c 	.word	0x20008b3c
    e74c:	0000cf61 	.word	0x0000cf61
    e750:	0000e1ed 	.word	0x0000e1ed

0000e754 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    e754:	b590      	push	{r4, r7, lr}
    e756:	b083      	sub	sp, #12
    e758:	af00      	add	r7, sp, #0
    e75a:	6078      	str	r0, [r7, #4]
	if (isControlling)
    e75c:	687b      	ldr	r3, [r7, #4]
    e75e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
    e762:	2b00      	cmp	r3, #0
    e764:	f000 80c9 	beq.w	e8fa <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    e768:	687b      	ldr	r3, [r7, #4]
    e76a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
    e76e:	687b      	ldr	r3, [r7, #4]
    e770:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
    e774:	4313      	orrs	r3, r2
    e776:	b2db      	uxtb	r3, r3
    e778:	461a      	mov	r2, r3
    e77a:	687b      	ldr	r3, [r7, #4]
    e77c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    e780:	4013      	ands	r3, r2
    e782:	687a      	ldr	r2, [r7, #4]
    e784:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
    e788:	b2d2      	uxtb	r2, r2
    e78a:	4013      	ands	r3, r2
    e78c:	2b00      	cmp	r3, #0
    e78e:	bf14      	ite	ne
    e790:	2301      	movne	r3, #1
    e792:	2300      	moveq	r3, #0
    e794:	b2db      	uxtb	r3, r3
    e796:	2b00      	cmp	r3, #0
    e798:	d003      	beq.n	e7a2 <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    e79a:	6878      	ldr	r0, [r7, #4]
    e79c:	4b59      	ldr	r3, [pc, #356]	; (e904 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    e79e:	4798      	blx	r3
    e7a0:	e0ab      	b.n	e8fa <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
    e7a2:	6878      	ldr	r0, [r7, #4]
    e7a4:	4b58      	ldr	r3, [pc, #352]	; (e908 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
    e7a6:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    e7a8:	687b      	ldr	r3, [r7, #4]
    e7aa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e7ae:	461a      	mov	r2, r3
    e7b0:	687b      	ldr	r3, [r7, #4]
    e7b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    e7b6:	1ad3      	subs	r3, r2, r3
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	bfb8      	it	lt
    e7bc:	425b      	neglt	r3, r3
    e7be:	687a      	ldr	r2, [r7, #4]
    e7c0:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    e7c4:	4293      	cmp	r3, r2
    e7c6:	bfcc      	ite	gt
    e7c8:	2301      	movgt	r3, #1
    e7ca:	2300      	movle	r3, #0
    e7cc:	b2db      	uxtb	r3, r3
    e7ce:	461a      	mov	r2, r3
    e7d0:	687b      	ldr	r3, [r7, #4]
    e7d2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    e7d6:	4313      	orrs	r3, r2
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d078      	beq.n	e8ce <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (flapperValveIsMoving)
    e7dc:	687b      	ldr	r3, [r7, #4]
    e7de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    e7e2:	b2db      	uxtb	r3, r3
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	d04a      	beq.n	e87e <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
    e7e8:	687b      	ldr	r3, [r7, #4]
    e7ea:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d00e      	beq.n	e810 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
    e7f2:	687b      	ldr	r3, [r7, #4]
    e7f4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d053      	beq.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    e802:	b2db      	uxtb	r3, r3
    e804:	2b00      	cmp	r3, #0
    e806:	d04d      	beq.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
    e808:	6878      	ldr	r0, [r7, #4]
    e80a:	4b3e      	ldr	r3, [pc, #248]	; (e904 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    e80c:	4798      	blx	r3
    e80e:	e049      	b.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    e810:	687b      	ldr	r3, [r7, #4]
    e812:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
    e816:	6878      	ldr	r0, [r7, #4]
    e818:	4b3c      	ldr	r3, [pc, #240]	; (e90c <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
    e81a:	4798      	blx	r3
    e81c:	4603      	mov	r3, r0
    e81e:	429c      	cmp	r4, r3
    e820:	bf14      	ite	ne
    e822:	2301      	movne	r3, #1
    e824:	2300      	moveq	r3, #0
    e826:	b2db      	uxtb	r3, r3
    e828:	2b00      	cmp	r3, #0
    e82a:	d00a      	beq.n	e842 <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
    e82c:	6878      	ldr	r0, [r7, #4]
    e82e:	4b38      	ldr	r3, [pc, #224]	; (e910 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    e830:	4798      	blx	r3
							RemoveTimeoutTask();
    e832:	6878      	ldr	r0, [r7, #4]
    e834:	4b37      	ldr	r3, [pc, #220]	; (e914 <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    e836:	4798      	blx	r3
							keepControlling=true;
    e838:	687b      	ldr	r3, [r7, #4]
    e83a:	2201      	movs	r2, #1
    e83c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    e840:	e030      	b.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
    e842:	687b      	ldr	r3, [r7, #4]
    e844:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    e848:	b2db      	uxtb	r3, r3
    e84a:	2b00      	cmp	r3, #0
    e84c:	d003      	beq.n	e856 <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
    e84e:	6878      	ldr	r0, [r7, #4]
    e850:	4b2f      	ldr	r3, [pc, #188]	; (e910 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    e852:	4798      	blx	r3
    e854:	e026      	b.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    e85c:	2b00      	cmp	r3, #0
    e85e:	d021      	beq.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    e866:	b2db      	uxtb	r3, r3
    e868:	2b00      	cmp	r3, #0
    e86a:	d003      	beq.n	e874 <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
    e86c:	6878      	ldr	r0, [r7, #4]
    e86e:	4b28      	ldr	r3, [pc, #160]	; (e910 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    e870:	4798      	blx	r3
    e872:	e017      	b.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
    e874:	2100      	movs	r1, #0
    e876:	6878      	ldr	r0, [r7, #4]
    e878:	4b27      	ldr	r3, [pc, #156]	; (e918 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
    e87a:	4798      	blx	r3
    e87c:	e012      	b.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
    e87e:	687b      	ldr	r3, [r7, #4]
    e880:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    e884:	2b00      	cmp	r3, #0
    e886:	d00d      	beq.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
    e888:	687b      	ldr	r3, [r7, #4]
    e88a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    e88e:	b2db      	uxtb	r3, r3
    e890:	2b00      	cmp	r3, #0
    e892:	d003      	beq.n	e89c <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
    e894:	6878      	ldr	r0, [r7, #4]
    e896:	4b21      	ldr	r3, [pc, #132]	; (e91c <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    e898:	4798      	blx	r3
    e89a:	e003      	b.n	e8a4 <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
    e89c:	2100      	movs	r1, #0
    e89e:	6878      	ldr	r0, [r7, #4]
    e8a0:	4b1d      	ldr	r3, [pc, #116]	; (e918 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
    e8a2:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    e8a4:	687b      	ldr	r3, [r7, #4]
    e8a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    e8aa:	461a      	mov	r2, r3
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    e8b2:	1ad3      	subs	r3, r2, r3
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	bfb8      	it	lt
    e8b8:	425b      	neglt	r3, r3
    e8ba:	687a      	ldr	r2, [r7, #4]
    e8bc:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    e8c0:	4293      	cmp	r3, r2
    e8c2:	dd1a      	ble.n	e8fa <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
    e8c4:	687b      	ldr	r3, [r7, #4]
    e8c6:	2200      	movs	r2, #0
    e8c8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    e8cc:	e015      	b.n	e8fa <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d009      	beq.n	e8ec <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
    e8d8:	687b      	ldr	r3, [r7, #4]
    e8da:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    e8de:	b2db      	uxtb	r3, r3
    e8e0:	2b00      	cmp	r3, #0
    e8e2:	d00a      	beq.n	e8fa <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
    e8e4:	6878      	ldr	r0, [r7, #4]
    e8e6:	4b07      	ldr	r3, [pc, #28]	; (e904 <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    e8e8:	4798      	blx	r3
    e8ea:	e006      	b.n	e8fa <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    e8ec:	6878      	ldr	r0, [r7, #4]
    e8ee:	4b0b      	ldr	r3, [pc, #44]	; (e91c <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    e8f0:	4798      	blx	r3
					gotSetpoint=true;
    e8f2:	687b      	ldr	r3, [r7, #4]
    e8f4:	2201      	movs	r2, #1
    e8f6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
    e8fa:	2300      	movs	r3, #0
	
}
    e8fc:	4618      	mov	r0, r3
    e8fe:	370c      	adds	r7, #12
    e900:	46bd      	mov	sp, r7
    e902:	bd90      	pop	{r4, r7, pc}
    e904:	0000eba5 	.word	0x0000eba5
    e908:	0000e679 	.word	0x0000e679
    e90c:	0000e3ad 	.word	0x0000e3ad
    e910:	0000eb79 	.word	0x0000eb79
    e914:	0000f1c1 	.word	0x0000f1c1
    e918:	0000ef21 	.word	0x0000ef21
    e91c:	0000ec3d 	.word	0x0000ec3d

0000e920 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    e920:	b580      	push	{r7, lr}
    e922:	b084      	sub	sp, #16
    e924:	af00      	add	r7, sp, #0
    e926:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    e928:	2052      	movs	r0, #82	; 0x52
    e92a:	4b5a      	ldr	r3, [pc, #360]	; (ea94 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    e92c:	4798      	blx	r3
    e92e:	4603      	mov	r3, r0
    e930:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    e932:	6878      	ldr	r0, [r7, #4]
    e934:	4b58      	ldr	r3, [pc, #352]	; (ea98 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    e936:	4798      	blx	r3
    e938:	4603      	mov	r3, r0
    e93a:	2b00      	cmp	r3, #0
    e93c:	f000 80a5 	beq.w	ea8a <_ZN22FlapperValveController18ResetValvePositionEv+0x16a>
	{
		
		localSetpoint=currentMaximum;
    e940:	687b      	ldr	r3, [r7, #4]
    e942:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    e946:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
    e948:	687b      	ldr	r3, [r7, #4]
    e94a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e94c:	2100      	movs	r1, #0
    e94e:	4618      	mov	r0, r3
    e950:	4b52      	ldr	r3, [pc, #328]	; (ea9c <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    e952:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e958:	2100      	movs	r1, #0
    e95a:	4618      	mov	r0, r3
    e95c:	4b50      	ldr	r3, [pc, #320]	; (eaa0 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    e95e:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
    e960:	687b      	ldr	r3, [r7, #4]
    e962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e964:	2100      	movs	r1, #0
    e966:	4618      	mov	r0, r3
    e968:	4b4e      	ldr	r3, [pc, #312]	; (eaa4 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    e96a:	4798      	blx	r3
		delay_ms(100);
    e96c:	2064      	movs	r0, #100	; 0x64
    e96e:	4b4e      	ldr	r3, [pc, #312]	; (eaa8 <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
    e970:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
    e972:	687b      	ldr	r3, [r7, #4]
    e974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e976:	4618      	mov	r0, r3
    e978:	4b4c      	ldr	r3, [pc, #304]	; (eaac <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    e97a:	4798      	blx	r3
    e97c:	4603      	mov	r3, r0
    e97e:	461a      	mov	r2, r3
    e980:	7bbb      	ldrb	r3, [r7, #14]
    e982:	429a      	cmp	r2, r3
    e984:	bfcc      	ite	gt
    e986:	2301      	movgt	r3, #1
    e988:	2300      	movle	r3, #0
    e98a:	b2db      	uxtb	r3, r3
    e98c:	2b00      	cmp	r3, #0
    e98e:	d006      	beq.n	e99e <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			singlefv->SetDirection(true);
    e990:	687b      	ldr	r3, [r7, #4]
    e992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e994:	2101      	movs	r1, #1
    e996:	4618      	mov	r0, r3
    e998:	4b45      	ldr	r3, [pc, #276]	; (eab0 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    e99a:	4798      	blx	r3
    e99c:	e005      	b.n	e9aa <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			singlefv->SetDirection(false);
    e99e:	687b      	ldr	r3, [r7, #4]
    e9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e9a2:	2100      	movs	r1, #0
    e9a4:	4618      	mov	r0, r3
    e9a6:	4b42      	ldr	r3, [pc, #264]	; (eab0 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    e9a8:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
    e9aa:	687b      	ldr	r3, [r7, #4]
    e9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e9ae:	2101      	movs	r1, #1
    e9b0:	4618      	mov	r0, r3
    e9b2:	4b3b      	ldr	r3, [pc, #236]	; (eaa0 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    e9b4:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
    e9b6:	687b      	ldr	r3, [r7, #4]
    e9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e9ba:	2101      	movs	r1, #1
    e9bc:	4618      	mov	r0, r3
    e9be:	4b39      	ldr	r3, [pc, #228]	; (eaa4 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    e9c0:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
    e9c2:	687b      	ldr	r3, [r7, #4]
    e9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e9c6:	7bba      	ldrb	r2, [r7, #14]
    e9c8:	4611      	mov	r1, r2
    e9ca:	4618      	mov	r0, r3
    e9cc:	4b39      	ldr	r3, [pc, #228]	; (eab4 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    e9ce:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
    e9d0:	687b      	ldr	r3, [r7, #4]
    e9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e9d4:	4618      	mov	r0, r3
    e9d6:	4b35      	ldr	r3, [pc, #212]	; (eaac <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    e9d8:	4798      	blx	r3
    e9da:	4603      	mov	r3, r0
    e9dc:	461a      	mov	r2, r3
    e9de:	687b      	ldr	r3, [r7, #4]
    e9e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
    e9e4:	687b      	ldr	r3, [r7, #4]
    e9e6:	2200      	movs	r2, #0
    e9e8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		if (valve_ID==0)
    e9ec:	687b      	ldr	r3, [r7, #4]
    e9ee:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    e9f2:	2b00      	cmp	r3, #0
    e9f4:	d106      	bne.n	ea04 <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
    e9f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9fa:	492f      	ldr	r1, [pc, #188]	; (eab8 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    e9fc:	482f      	ldr	r0, [pc, #188]	; (eabc <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    e9fe:	4b30      	ldr	r3, [pc, #192]	; (eac0 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    ea00:	4798      	blx	r3
    ea02:	e005      	b.n	ea10 <_ZN22FlapperValveController18ResetValvePositionEv+0xf0>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
    ea04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ea08:	492e      	ldr	r1, [pc, #184]	; (eac4 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
    ea0a:	482c      	ldr	r0, [pc, #176]	; (eabc <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    ea0c:	4b2c      	ldr	r3, [pc, #176]	; (eac0 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    ea0e:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
    ea10:	687b      	ldr	r3, [r7, #4]
    ea12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ea14:	2101      	movs	r1, #1
    ea16:	4618      	mov	r0, r3
    ea18:	4b20      	ldr	r3, [pc, #128]	; (ea9c <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    ea1a:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    ea22:	461a      	mov	r2, r3
    ea24:	7bbb      	ldrb	r3, [r7, #14]
    ea26:	1ad3      	subs	r3, r2, r3
    ea28:	2b00      	cmp	r3, #0
    ea2a:	bfb8      	it	lt
    ea2c:	425b      	neglt	r3, r3
    ea2e:	2b06      	cmp	r3, #6
    ea30:	bfcc      	ite	gt
    ea32:	2301      	movgt	r3, #1
    ea34:	2300      	movle	r3, #0
    ea36:	b2db      	uxtb	r3, r3
    ea38:	461a      	mov	r2, r3
    ea3a:	687b      	ldr	r3, [r7, #4]
    ea3c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    ea40:	b2db      	uxtb	r3, r3
    ea42:	f083 0301 	eor.w	r3, r3, #1
    ea46:	b2db      	uxtb	r3, r3
    ea48:	4013      	ands	r3, r2
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	bf14      	ite	ne
    ea4e:	2301      	movne	r3, #1
    ea50:	2300      	moveq	r3, #0
    ea52:	b2db      	uxtb	r3, r3
    ea54:	2b00      	cmp	r3, #0
    ea56:	d00d      	beq.n	ea74 <_ZN22FlapperValveController18ResetValvePositionEv+0x154>

		{
			gpio_toggle_pin_level(LED0);
    ea58:	2052      	movs	r0, #82	; 0x52
    ea5a:	4b1b      	ldr	r3, [pc, #108]	; (eac8 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
    ea5c:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
    ea5e:	687b      	ldr	r3, [r7, #4]
    ea60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ea62:	4618      	mov	r0, r3
    ea64:	4b11      	ldr	r3, [pc, #68]	; (eaac <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    ea66:	4798      	blx	r3
    ea68:	4603      	mov	r3, r0
    ea6a:	461a      	mov	r2, r3
    ea6c:	687b      	ldr	r3, [r7, #4]
    ea6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    ea72:	e7d3      	b.n	ea1c <_ZN22FlapperValveController18ResetValvePositionEv+0xfc>

		}
		singlefv->SetEnable(false);
    ea74:	687b      	ldr	r3, [r7, #4]
    ea76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ea78:	2100      	movs	r1, #0
    ea7a:	4618      	mov	r0, r3
    ea7c:	4b07      	ldr	r3, [pc, #28]	; (ea9c <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    ea7e:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    ea80:	7bfb      	ldrb	r3, [r7, #15]
    ea82:	4619      	mov	r1, r3
    ea84:	2052      	movs	r0, #82	; 0x52
    ea86:	4b11      	ldr	r3, [pc, #68]	; (eacc <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
    ea88:	4798      	blx	r3
	} 
	else
	{
	}
}
    ea8a:	bf00      	nop
    ea8c:	3710      	adds	r7, #16
    ea8e:	46bd      	mov	sp, r7
    ea90:	bd80      	pop	{r7, pc}
    ea92:	bf00      	nop
    ea94:	0000e139 	.word	0x0000e139
    ea98:	0000e4a5 	.word	0x0000e4a5
    ea9c:	0000f5f1 	.word	0x0000f5f1
    eaa0:	0000f761 	.word	0x0000f761
    eaa4:	0000f6e9 	.word	0x0000f6e9
    eaa8:	00001e01 	.word	0x00001e01
    eaac:	0000f811 	.word	0x0000f811
    eab0:	0000f671 	.word	0x0000f671
    eab4:	0000f7d9 	.word	0x0000f7d9
    eab8:	0000e20d 	.word	0x0000e20d
    eabc:	20008b3c 	.word	0x20008b3c
    eac0:	0000cf61 	.word	0x0000cf61
    eac4:	0000e22d 	.word	0x0000e22d
    eac8:	0000e109 	.word	0x0000e109
    eacc:	0000e0d1 	.word	0x0000e0d1

0000ead0 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
    ead0:	b580      	push	{r7, lr}
    ead2:	b082      	sub	sp, #8
    ead4:	af00      	add	r7, sp, #0
    ead6:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    ead8:	687b      	ldr	r3, [r7, #4]
    eada:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    eade:	2b00      	cmp	r3, #0
    eae0:	d014      	beq.n	eb0c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    eae2:	687b      	ldr	r3, [r7, #4]
    eae4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    eae8:	2b00      	cmp	r3, #0
    eaea:	d003      	beq.n	eaf4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    eaec:	6878      	ldr	r0, [r7, #4]
    eaee:	4b0e      	ldr	r3, [pc, #56]	; (eb28 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    eaf0:	4798      	blx	r3
    eaf2:	e013      	b.n	eb1c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    eaf4:	687b      	ldr	r3, [r7, #4]
    eaf6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    eafa:	4619      	mov	r1, r3
    eafc:	6878      	ldr	r0, [r7, #4]
    eafe:	4b0b      	ldr	r3, [pc, #44]	; (eb2c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    eb00:	4798      	blx	r3
			NBC_Activated=false;
    eb02:	687b      	ldr	r3, [r7, #4]
    eb04:	2200      	movs	r2, #0
    eb06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    eb0a:	e007      	b.n	eb1c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    eb0c:	21ff      	movs	r1, #255	; 0xff
    eb0e:	6878      	ldr	r0, [r7, #4]
    eb10:	4b06      	ldr	r3, [pc, #24]	; (eb2c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    eb12:	4798      	blx	r3
			NBC_Activated=true;
    eb14:	687b      	ldr	r3, [r7, #4]
    eb16:	2201      	movs	r2, #1
    eb18:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
    eb1c:	2300      	movs	r3, #0
	
}
    eb1e:	4618      	mov	r0, r3
    eb20:	3708      	adds	r7, #8
    eb22:	46bd      	mov	sp, r7
    eb24:	bd80      	pop	{r7, pc}
    eb26:	bf00      	nop
    eb28:	0000e755 	.word	0x0000e755
    eb2c:	0000ed81 	.word	0x0000ed81

0000eb30 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    eb30:	b480      	push	{r7}
    eb32:	b083      	sub	sp, #12
    eb34:	af00      	add	r7, sp, #0
    eb36:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
    eb38:	687b      	ldr	r3, [r7, #4]
    eb3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    eb3e:	461a      	mov	r2, r3
    eb40:	687b      	ldr	r3, [r7, #4]
    eb42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    eb46:	4013      	ands	r3, r2
    eb48:	687a      	ldr	r2, [r7, #4]
    eb4a:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
    eb4e:	4313      	orrs	r3, r2
    eb50:	2b00      	cmp	r3, #0
    eb52:	bf14      	ite	ne
    eb54:	2301      	movne	r3, #1
    eb56:	2300      	moveq	r3, #0
    eb58:	b2da      	uxtb	r2, r3
    eb5a:	687b      	ldr	r3, [r7, #4]
    eb5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
    eb60:	687b      	ldr	r3, [r7, #4]
    eb62:	22ff      	movs	r2, #255	; 0xff
    eb64:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
    eb6e:	4618      	mov	r0, r3
    eb70:	370c      	adds	r7, #12
    eb72:	46bd      	mov	sp, r7
    eb74:	bc80      	pop	{r7}
    eb76:	4770      	bx	lr

0000eb78 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
    eb78:	b580      	push	{r7, lr}
    eb7a:	b082      	sub	sp, #8
    eb7c:	af00      	add	r7, sp, #0
    eb7e:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
    eb80:	687b      	ldr	r3, [r7, #4]
    eb82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    eb84:	2100      	movs	r1, #0
    eb86:	4618      	mov	r0, r3
    eb88:	4b05      	ldr	r3, [pc, #20]	; (eba0 <_ZN22FlapperValveController9StopMotorEv+0x28>)
    eb8a:	4798      	blx	r3
	flapperValveIsMoving=false;
    eb8c:	687b      	ldr	r3, [r7, #4]
    eb8e:	2200      	movs	r2, #0
    eb90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
    eb94:	2300      	movs	r3, #0
}
    eb96:	4618      	mov	r0, r3
    eb98:	3708      	adds	r7, #8
    eb9a:	46bd      	mov	sp, r7
    eb9c:	bd80      	pop	{r7, pc}
    eb9e:	bf00      	nop
    eba0:	0000f5f1 	.word	0x0000f5f1

0000eba4 <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
    eba4:	b580      	push	{r7, lr}
    eba6:	b082      	sub	sp, #8
    eba8:	af00      	add	r7, sp, #0
    ebaa:	6078      	str	r0, [r7, #4]
		if (closing)
    ebac:	687b      	ldr	r3, [r7, #4]
    ebae:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d003      	beq.n	ebbe <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    ebb6:	687b      	ldr	r3, [r7, #4]
    ebb8:	2200      	movs	r2, #0
    ebba:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
    ebbe:	6878      	ldr	r0, [r7, #4]
    ebc0:	4b17      	ldr	r3, [pc, #92]	; (ec20 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
    ebc2:	4798      	blx	r3
		if (valve_ID==0)
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d108      	bne.n	ebe0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    ebce:	4915      	ldr	r1, [pc, #84]	; (ec24 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
    ebd0:	4815      	ldr	r0, [pc, #84]	; (ec28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    ebd2:	4b16      	ldr	r3, [pc, #88]	; (ec2c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    ebd4:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
    ebd6:	4916      	ldr	r1, [pc, #88]	; (ec30 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
    ebd8:	4813      	ldr	r0, [pc, #76]	; (ec28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    ebda:	4b14      	ldr	r3, [pc, #80]	; (ec2c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    ebdc:	4798      	blx	r3
    ebde:	e007      	b.n	ebf0 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    ebe0:	4914      	ldr	r1, [pc, #80]	; (ec34 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
    ebe2:	4811      	ldr	r0, [pc, #68]	; (ec28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    ebe4:	4b11      	ldr	r3, [pc, #68]	; (ec2c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    ebe6:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
    ebe8:	4913      	ldr	r1, [pc, #76]	; (ec38 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
    ebea:	480f      	ldr	r0, [pc, #60]	; (ec28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    ebec:	4b0f      	ldr	r3, [pc, #60]	; (ec2c <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    ebee:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
    ebf0:	687b      	ldr	r3, [r7, #4]
    ebf2:	2200      	movs	r2, #0
    ebf4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    ebf8:	687b      	ldr	r3, [r7, #4]
    ebfa:	2200      	movs	r2, #0
    ebfc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
    ec00:	687b      	ldr	r3, [r7, #4]
    ec02:	2200      	movs	r2, #0
    ec04:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
    ec08:	687b      	ldr	r3, [r7, #4]
    ec0a:	2200      	movs	r2, #0
    ec0c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
    ec10:	687b      	ldr	r3, [r7, #4]
    ec12:	2200      	movs	r2, #0
    ec14:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
    ec18:	bf00      	nop
    ec1a:	3708      	adds	r7, #8
    ec1c:	46bd      	mov	sp, r7
    ec1e:	bd80      	pop	{r7, pc}
    ec20:	0000eb79 	.word	0x0000eb79
    ec24:	0000e175 	.word	0x0000e175
    ec28:	20008b3c 	.word	0x20008b3c
    ec2c:	0000cf09 	.word	0x0000cf09
    ec30:	0000e1cd 	.word	0x0000e1cd
    ec34:	0000e1a1 	.word	0x0000e1a1
    ec38:	0000e1ed 	.word	0x0000e1ed

0000ec3c <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    ec3c:	b580      	push	{r7, lr}
    ec3e:	b082      	sub	sp, #8
    ec40:	af00      	add	r7, sp, #0
    ec42:	6078      	str	r0, [r7, #4]
		StopMotor();
    ec44:	6878      	ldr	r0, [r7, #4]
    ec46:	4b0c      	ldr	r3, [pc, #48]	; (ec78 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
    ec48:	4798      	blx	r3
		RemoveTimeoutTask();
    ec4a:	6878      	ldr	r0, [r7, #4]
    ec4c:	4b0b      	ldr	r3, [pc, #44]	; (ec7c <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    ec4e:	4798      	blx	r3
		timeoutFlapperValveController=false;
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	2200      	movs	r2, #0
    ec54:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
    ec58:	687b      	ldr	r3, [r7, #4]
    ec5a:	2200      	movs	r2, #0
    ec5c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
    ec60:	687b      	ldr	r3, [r7, #4]
    ec62:	2200      	movs	r2, #0
    ec64:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
    ec68:	687b      	ldr	r3, [r7, #4]
    ec6a:	2201      	movs	r2, #1
    ec6c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
    ec70:	bf00      	nop
    ec72:	3708      	adds	r7, #8
    ec74:	46bd      	mov	sp, r7
    ec76:	bd80      	pop	{r7, pc}
    ec78:	0000eb79 	.word	0x0000eb79
    ec7c:	0000f1c1 	.word	0x0000f1c1

0000ec80 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    ec80:	b580      	push	{r7, lr}
    ec82:	b084      	sub	sp, #16
    ec84:	af00      	add	r7, sp, #0
    ec86:	6078      	str	r0, [r7, #4]
    ec88:	460b      	mov	r3, r1
    ec8a:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    ec8c:	78fb      	ldrb	r3, [r7, #3]
    ec8e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    ec92:	2b00      	cmp	r3, #0
    ec94:	dd0c      	ble.n	ecb0 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
    ec96:	78fb      	ldrb	r3, [r7, #3]
    ec98:	43db      	mvns	r3, r3
    ec9a:	009b      	lsls	r3, r3, #2
    ec9c:	2b00      	cmp	r3, #0
    ec9e:	da00      	bge.n	eca2 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
    eca0:	33ff      	adds	r3, #255	; 0xff
    eca2:	121b      	asrs	r3, r3, #8
    eca4:	461a      	mov	r2, r3
    eca6:	4b10      	ldr	r3, [pc, #64]	; (ece8 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    eca8:	4610      	mov	r0, r2
    ecaa:	4798      	blx	r3
    ecac:	4603      	mov	r3, r0
    ecae:	e00b      	b.n	ecc8 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
    ecb0:	78fb      	ldrb	r3, [r7, #3]
    ecb2:	3bff      	subs	r3, #255	; 0xff
    ecb4:	009b      	lsls	r3, r3, #2
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	da00      	bge.n	ecbc <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    ecba:	33ff      	adds	r3, #255	; 0xff
    ecbc:	121b      	asrs	r3, r3, #8
    ecbe:	461a      	mov	r2, r3
    ecc0:	4b09      	ldr	r3, [pc, #36]	; (ece8 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    ecc2:	4610      	mov	r0, r2
    ecc4:	4798      	blx	r3
    ecc6:	4603      	mov	r3, r0
    ecc8:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    ecca:	4b08      	ldr	r3, [pc, #32]	; (ecec <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
    eccc:	68f8      	ldr	r0, [r7, #12]
    ecce:	4798      	blx	r3
    ecd0:	4603      	mov	r3, r0
    ecd2:	b2da      	uxtb	r2, r3
    ecd4:	687b      	ldr	r3, [r7, #4]
    ecd6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
    ecda:	687b      	ldr	r3, [r7, #4]
    ecdc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
    ece0:	4618      	mov	r0, r3
    ece2:	3710      	adds	r7, #16
    ece4:	46bd      	mov	sp, r7
    ece6:	bd80      	pop	{r7, pc}
    ece8:	00010b89 	.word	0x00010b89
    ecec:	00010c31 	.word	0x00010c31

0000ecf0 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    ecf0:	b580      	push	{r7, lr}
    ecf2:	b082      	sub	sp, #8
    ecf4:	af00      	add	r7, sp, #0
    ecf6:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    ecf8:	687b      	ldr	r3, [r7, #4]
    ecfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ecfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    ed00:	2b00      	cmp	r3, #0
    ed02:	d008      	beq.n	ed16 <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		singlefv->SetEnable(false);
    ed04:	687b      	ldr	r3, [r7, #4]
    ed06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ed08:	2100      	movs	r1, #0
    ed0a:	4618      	mov	r0, r3
    ed0c:	4b09      	ldr	r3, [pc, #36]	; (ed34 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    ed0e:	4798      	blx	r3
		delay_ms(10);
    ed10:	200a      	movs	r0, #10
    ed12:	4b09      	ldr	r3, [pc, #36]	; (ed38 <_ZN22FlapperValveController10StartMotorEv+0x48>)
    ed14:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ed1a:	2101      	movs	r1, #1
    ed1c:	4618      	mov	r0, r3
    ed1e:	4b05      	ldr	r3, [pc, #20]	; (ed34 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    ed20:	4798      	blx	r3
	flapperValveIsMoving=true;
    ed22:	687b      	ldr	r3, [r7, #4]
    ed24:	2201      	movs	r2, #1
    ed26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
    ed2a:	2300      	movs	r3, #0
}
    ed2c:	4618      	mov	r0, r3
    ed2e:	3708      	adds	r7, #8
    ed30:	46bd      	mov	sp, r7
    ed32:	bd80      	pop	{r7, pc}
    ed34:	0000f5f1 	.word	0x0000f5f1
    ed38:	00001e01 	.word	0x00001e01

0000ed3c <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    ed3c:	b580      	push	{r7, lr}
    ed3e:	b082      	sub	sp, #8
    ed40:	af00      	add	r7, sp, #0
    ed42:	6078      	str	r0, [r7, #4]
	StopMotor();
    ed44:	6878      	ldr	r0, [r7, #4]
    ed46:	4b0d      	ldr	r3, [pc, #52]	; (ed7c <_ZN22FlapperValveController15StopControllingEv+0x40>)
    ed48:	4798      	blx	r3
	timeoutKeepControlling=false;
    ed4a:	687b      	ldr	r3, [r7, #4]
    ed4c:	2200      	movs	r2, #0
    ed4e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
    ed52:	687b      	ldr	r3, [r7, #4]
    ed54:	2200      	movs	r2, #0
    ed56:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	2200      	movs	r2, #0
    ed5e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
    ed62:	687b      	ldr	r3, [r7, #4]
    ed64:	2200      	movs	r2, #0
    ed66:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
    ed6a:	687b      	ldr	r3, [r7, #4]
    ed6c:	2200      	movs	r2, #0
    ed6e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
    ed72:	2300      	movs	r3, #0
}
    ed74:	4618      	mov	r0, r3
    ed76:	3708      	adds	r7, #8
    ed78:	46bd      	mov	sp, r7
    ed7a:	bd80      	pop	{r7, pc}
    ed7c:	0000eb79 	.word	0x0000eb79

0000ed80 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    ed80:	b580      	push	{r7, lr}
    ed82:	b082      	sub	sp, #8
    ed84:	af00      	add	r7, sp, #0
    ed86:	6078      	str	r0, [r7, #4]
    ed88:	460b      	mov	r3, r1
    ed8a:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    ed8c:	78fb      	ldrb	r3, [r7, #3]
    ed8e:	4619      	mov	r1, r3
    ed90:	6878      	ldr	r0, [r7, #4]
    ed92:	4b2b      	ldr	r3, [pc, #172]	; (ee40 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    ed94:	4798      	blx	r3
    ed96:	4603      	mov	r3, r0
    ed98:	461a      	mov	r2, r3
    ed9a:	687b      	ldr	r3, [r7, #4]
    ed9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
    eda0:	687b      	ldr	r3, [r7, #4]
    eda2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    eda6:	4619      	mov	r1, r3
    eda8:	6878      	ldr	r0, [r7, #4]
    edaa:	4b26      	ldr	r3, [pc, #152]	; (ee44 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    edac:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    edb4:	4b24      	ldr	r3, [pc, #144]	; (ee48 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
    edb6:	4610      	mov	r0, r2
    edb8:	4798      	blx	r3
    edba:	4602      	mov	r2, r0
    edbc:	687b      	ldr	r3, [r7, #4]
    edbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
    edc2:	687b      	ldr	r3, [r7, #4]
    edc4:	2200      	movs	r2, #0
    edc6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    edca:	687b      	ldr	r3, [r7, #4]
    edcc:	2200      	movs	r2, #0
    edce:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
    edd2:	687b      	ldr	r3, [r7, #4]
    edd4:	2200      	movs	r2, #0
    edd6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	2201      	movs	r2, #1
    edde:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
    ede2:	687b      	ldr	r3, [r7, #4]
    ede4:	2200      	movs	r2, #0
    ede6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		if (valve_ID==0)
    edea:	687b      	ldr	r3, [r7, #4]
    edec:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    edf0:	2b00      	cmp	r3, #0
    edf2:	d106      	bne.n	ee02 <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    edf4:	f242 7210 	movw	r2, #10000	; 0x2710
    edf8:	4914      	ldr	r1, [pc, #80]	; (ee4c <_ZN22FlapperValveController16StartControllingEh+0xcc>)
    edfa:	4815      	ldr	r0, [pc, #84]	; (ee50 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    edfc:	4b15      	ldr	r3, [pc, #84]	; (ee54 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    edfe:	4798      	blx	r3
    ee00:	e005      	b.n	ee0e <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    ee02:	f242 7210 	movw	r2, #10000	; 0x2710
    ee06:	4914      	ldr	r1, [pc, #80]	; (ee58 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
    ee08:	4811      	ldr	r0, [pc, #68]	; (ee50 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    ee0a:	4b12      	ldr	r3, [pc, #72]	; (ee54 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    ee0c:	4798      	blx	r3
		}
		
		isControlling=true;
    ee0e:	687b      	ldr	r3, [r7, #4]
    ee10:	2201      	movs	r2, #1
    ee12:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    ee16:	6878      	ldr	r0, [r7, #4]
    ee18:	4b10      	ldr	r3, [pc, #64]	; (ee5c <_ZN22FlapperValveController16StartControllingEh+0xdc>)
    ee1a:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    ee1c:	6878      	ldr	r0, [r7, #4]
    ee1e:	4b10      	ldr	r3, [pc, #64]	; (ee60 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
    ee20:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    ee22:	687b      	ldr	r3, [r7, #4]
    ee24:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    ee28:	b2db      	uxtb	r3, r3
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d003      	beq.n	ee36 <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	2201      	movs	r2, #1
    ee32:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
    ee36:	2300      	movs	r3, #0
	
}
    ee38:	4618      	mov	r0, r3
    ee3a:	3708      	adds	r7, #8
    ee3c:	46bd      	mov	sp, r7
    ee3e:	bd80      	pop	{r7, pc}
    ee40:	0000ee65 	.word	0x0000ee65
    ee44:	0000ec81 	.word	0x0000ec81
    ee48:	00010b81 	.word	0x00010b81
    ee4c:	0000e175 	.word	0x0000e175
    ee50:	20008b3c 	.word	0x20008b3c
    ee54:	0000cf61 	.word	0x0000cf61
    ee58:	0000e1a1 	.word	0x0000e1a1
    ee5c:	0000e3d1 	.word	0x0000e3d1
    ee60:	0000e755 	.word	0x0000e755

0000ee64 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    ee64:	b580      	push	{r7, lr}
    ee66:	b082      	sub	sp, #8
    ee68:	af00      	add	r7, sp, #0
    ee6a:	6078      	str	r0, [r7, #4]
    ee6c:	460b      	mov	r3, r1
    ee6e:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    ee70:	6878      	ldr	r0, [r7, #4]
    ee72:	4b2a      	ldr	r3, [pc, #168]	; (ef1c <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
    ee74:	4798      	blx	r3
    ee76:	4603      	mov	r3, r0
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d004      	beq.n	ee86 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    ee7c:	687b      	ldr	r3, [r7, #4]
    ee7e:	78fa      	ldrb	r2, [r7, #3]
    ee80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    ee84:	e043      	b.n	ef0e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
    ee86:	687b      	ldr	r3, [r7, #4]
    ee88:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    ee8c:	2b00      	cmp	r3, #0
    ee8e:	d01f      	beq.n	eed0 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    ee90:	687b      	ldr	r3, [r7, #4]
    ee92:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    ee96:	43db      	mvns	r3, r3
    ee98:	b2da      	uxtb	r2, r3
    ee9a:	687b      	ldr	r3, [r7, #4]
    ee9c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
    eea0:	78fb      	ldrb	r3, [r7, #3]
    eea2:	687a      	ldr	r2, [r7, #4]
    eea4:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
    eea8:	4293      	cmp	r3, r2
    eeaa:	dd0c      	ble.n	eec6 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    eeb2:	687b      	ldr	r3, [r7, #4]
    eeb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    eec4:	e023      	b.n	ef0e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    eec6:	687b      	ldr	r3, [r7, #4]
    eec8:	78fa      	ldrb	r2, [r7, #3]
    eeca:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    eece:	e01e      	b.n	ef0e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    eed0:	687b      	ldr	r3, [r7, #4]
    eed2:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    eed6:	43db      	mvns	r3, r3
    eed8:	b2da      	uxtb	r2, r3
    eeda:	687b      	ldr	r3, [r7, #4]
    eedc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
    eee0:	78fb      	ldrb	r3, [r7, #3]
    eee2:	687a      	ldr	r2, [r7, #4]
    eee4:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
    eee8:	4293      	cmp	r3, r2
    eeea:	dd0c      	ble.n	ef06 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
    eef8:	687b      	ldr	r3, [r7, #4]
    eefa:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
    eefe:	687b      	ldr	r3, [r7, #4]
    ef00:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    ef04:	e003      	b.n	ef0e <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    ef06:	687b      	ldr	r3, [r7, #4]
    ef08:	78fa      	ldrb	r2, [r7, #3]
    ef0a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
    ef0e:	687b      	ldr	r3, [r7, #4]
    ef10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
    ef14:	4618      	mov	r0, r3
    ef16:	3708      	adds	r7, #8
    ef18:	46bd      	mov	sp, r7
    ef1a:	bd80      	pop	{r7, pc}
    ef1c:	0000eb31 	.word	0x0000eb31

0000ef20 <_ZN22FlapperValveController15KeepControllingEh>:
	
uint8_t	FlapperValveController::StartControlling(void){
	return	StartControlling(currentPosition);
	
}
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    ef20:	b580      	push	{r7, lr}
    ef22:	b082      	sub	sp, #8
    ef24:	af00      	add	r7, sp, #0
    ef26:	6078      	str	r0, [r7, #4]
    ef28:	460b      	mov	r3, r1
    ef2a:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    ef2c:	687b      	ldr	r3, [r7, #4]
    ef2e:	2200      	movs	r2, #0
    ef30:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	2201      	movs	r2, #1
    ef38:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    ef3c:	6878      	ldr	r0, [r7, #4]
    ef3e:	4b05      	ldr	r3, [pc, #20]	; (ef54 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    ef40:	4798      	blx	r3
		keepControlling=false;
    ef42:	687b      	ldr	r3, [r7, #4]
    ef44:	2200      	movs	r2, #0
    ef46:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
    ef4a:	2300      	movs	r3, #0
	
}
    ef4c:	4618      	mov	r0, r3
    ef4e:	3708      	adds	r7, #8
    ef50:	46bd      	mov	sp, r7
    ef52:	bd80      	pop	{r7, pc}
    ef54:	0000e3d1 	.word	0x0000e3d1

0000ef58 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    ef58:	b590      	push	{r4, r7, lr}
    ef5a:	b085      	sub	sp, #20
    ef5c:	af00      	add	r7, sp, #0
    ef5e:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
    ef60:	68fb      	ldr	r3, [r7, #12]
    ef62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ef64:	4618      	mov	r0, r3
    ef66:	4b2f      	ldr	r3, [pc, #188]	; (f024 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xcc>)
    ef68:	4798      	blx	r3
    ef6a:	4603      	mov	r3, r0
    ef6c:	461a      	mov	r2, r3
    ef6e:	68fb      	ldr	r3, [r7, #12]
    ef70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.actualPosition=currentPosition;
    ef74:	68fb      	ldr	r3, [r7, #12]
    ef76:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    ef7a:	68fb      	ldr	r3, [r7, #12]
    ef7c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
    ef80:	68fb      	ldr	r3, [r7, #12]
    ef82:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    ef86:	68fb      	ldr	r3, [r7, #12]
    ef88:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
    ef8c:	68fb      	ldr	r3, [r7, #12]
    ef8e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    ef90:	68fc      	ldr	r4, [r7, #12]
    ef92:	463b      	mov	r3, r7
    ef94:	4611      	mov	r1, r2
    ef96:	4618      	mov	r0, r3
    ef98:	4b23      	ldr	r3, [pc, #140]	; (f028 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd0>)
    ef9a:	4798      	blx	r3
    ef9c:	f104 0380 	add.w	r3, r4, #128	; 0x80
    efa0:	463a      	mov	r2, r7
    efa2:	6810      	ldr	r0, [r2, #0]
    efa4:	6018      	str	r0, [r3, #0]
    efa6:	8892      	ldrh	r2, [r2, #4]
    efa8:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
    efaa:	68fb      	ldr	r3, [r7, #12]
    efac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    efae:	68fc      	ldr	r4, [r7, #12]
    efb0:	463b      	mov	r3, r7
    efb2:	4611      	mov	r1, r2
    efb4:	4618      	mov	r0, r3
    efb6:	4b1d      	ldr	r3, [pc, #116]	; (f02c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd4>)
    efb8:	4798      	blx	r3
    efba:	f104 0386 	add.w	r3, r4, #134	; 0x86
    efbe:	463a      	mov	r2, r7
    efc0:	6811      	ldr	r1, [r2, #0]
    efc2:	6852      	ldr	r2, [r2, #4]
    efc4:	6019      	str	r1, [r3, #0]
    efc6:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
    efc8:	68fb      	ldr	r3, [r7, #12]
    efca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    efce:	b2da      	uxtb	r2, r3
    efd0:	68fb      	ldr	r3, [r7, #12]
    efd2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
    efd6:	68fb      	ldr	r3, [r7, #12]
    efd8:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
    efdc:	68fb      	ldr	r3, [r7, #12]
    efde:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    efe2:	68fb      	ldr	r3, [r7, #12]
    efe4:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
    efe8:	68fb      	ldr	r3, [r7, #12]
    efea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	if (standAloneActivated)
    efee:	68fb      	ldr	r3, [r7, #12]
    eff0:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    eff4:	2b00      	cmp	r3, #0
    eff6:	d008      	beq.n	f00a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    eff8:	68fb      	ldr	r3, [r7, #12]
    effa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    effe:	43db      	mvns	r3, r3
    f000:	b2da      	uxtb	r2, r3
    f002:	68fb      	ldr	r3, [r7, #12]
    f004:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
	}
}
    f008:	e007      	b.n	f01a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
    f00a:	68fb      	ldr	r3, [r7, #12]
    f00c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    f010:	43db      	mvns	r3, r3
    f012:	b2da      	uxtb	r2, r3
    f014:	68fb      	ldr	r3, [r7, #12]
    f016:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
}
    f01a:	bf00      	nop
    f01c:	3714      	adds	r7, #20
    f01e:	46bd      	mov	sp, r7
    f020:	bd90      	pop	{r4, r7, pc}
    f022:	bf00      	nop
    f024:	0000f811 	.word	0x0000f811
    f028:	0000f595 	.word	0x0000f595
    f02c:	0000f539 	.word	0x0000f539

0000f030 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
    f030:	b580      	push	{r7, lr}
    f032:	b084      	sub	sp, #16
    f034:	af00      	add	r7, sp, #0
    f036:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
    f038:	23b4      	movs	r3, #180	; 0xb4
    f03a:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
    f03c:	687b      	ldr	r3, [r7, #4]
    f03e:	4a52      	ldr	r2, [pc, #328]	; (f188 <_ZN22FlapperValveController8SelftestEv+0x158>)
    f040:	33bf      	adds	r3, #191	; 0xbf
    f042:	8812      	ldrh	r2, [r2, #0]
    f044:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
    f046:	6878      	ldr	r0, [r7, #4]
    f048:	4b50      	ldr	r3, [pc, #320]	; (f18c <_ZN22FlapperValveController8SelftestEv+0x15c>)
    f04a:	4798      	blx	r3
	singlefv->SetEnable(false);
    f04c:	687b      	ldr	r3, [r7, #4]
    f04e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f050:	2100      	movs	r1, #0
    f052:	4618      	mov	r0, r3
    f054:	4b4e      	ldr	r3, [pc, #312]	; (f190 <_ZN22FlapperValveController8SelftestEv+0x160>)
    f056:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
    f058:	687b      	ldr	r3, [r7, #4]
    f05a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f05c:	2100      	movs	r1, #0
    f05e:	4618      	mov	r0, r3
    f060:	4b4c      	ldr	r3, [pc, #304]	; (f194 <_ZN22FlapperValveController8SelftestEv+0x164>)
    f062:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
    f064:	687b      	ldr	r3, [r7, #4]
    f066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f068:	2100      	movs	r1, #0
    f06a:	4618      	mov	r0, r3
    f06c:	4b4a      	ldr	r3, [pc, #296]	; (f198 <_ZN22FlapperValveController8SelftestEv+0x168>)
    f06e:	4798      	blx	r3
	delay_ms(10);
    f070:	200a      	movs	r0, #10
    f072:	4b4a      	ldr	r3, [pc, #296]	; (f19c <_ZN22FlapperValveController8SelftestEv+0x16c>)
    f074:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
    f076:	687b      	ldr	r3, [r7, #4]
    f078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f07a:	2101      	movs	r1, #1
    f07c:	4618      	mov	r0, r3
    f07e:	4b46      	ldr	r3, [pc, #280]	; (f198 <_ZN22FlapperValveController8SelftestEv+0x168>)
    f080:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f086:	7bba      	ldrb	r2, [r7, #14]
    f088:	4611      	mov	r1, r2
    f08a:	4618      	mov	r0, r3
    f08c:	4b44      	ldr	r3, [pc, #272]	; (f1a0 <_ZN22FlapperValveController8SelftestEv+0x170>)
    f08e:	4798      	blx	r3
	singlefv->SetDirection(false);
    f090:	687b      	ldr	r3, [r7, #4]
    f092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f094:	2100      	movs	r1, #0
    f096:	4618      	mov	r0, r3
    f098:	4b42      	ldr	r3, [pc, #264]	; (f1a4 <_ZN22FlapperValveController8SelftestEv+0x174>)
    f09a:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f0a0:	4618      	mov	r0, r3
    f0a2:	4b41      	ldr	r3, [pc, #260]	; (f1a8 <_ZN22FlapperValveController8SelftestEv+0x178>)
    f0a4:	4798      	blx	r3
    f0a6:	4603      	mov	r3, r0
    f0a8:	461a      	mov	r2, r3
    f0aa:	7bbb      	ldrb	r3, [r7, #14]
    f0ac:	429a      	cmp	r2, r3
    f0ae:	bfcc      	ite	gt
    f0b0:	2301      	movgt	r3, #1
    f0b2:	2300      	movle	r3, #0
    f0b4:	b2db      	uxtb	r3, r3
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d006      	beq.n	f0c8 <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		singlefv->SetDirection(true);
    f0ba:	687b      	ldr	r3, [r7, #4]
    f0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f0be:	2101      	movs	r1, #1
    f0c0:	4618      	mov	r0, r3
    f0c2:	4b38      	ldr	r3, [pc, #224]	; (f1a4 <_ZN22FlapperValveController8SelftestEv+0x174>)
    f0c4:	4798      	blx	r3
    f0c6:	e005      	b.n	f0d4 <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		singlefv->SetDirection(false);
    f0c8:	687b      	ldr	r3, [r7, #4]
    f0ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f0cc:	2100      	movs	r1, #0
    f0ce:	4618      	mov	r0, r3
    f0d0:	4b34      	ldr	r3, [pc, #208]	; (f1a4 <_ZN22FlapperValveController8SelftestEv+0x174>)
    f0d2:	4798      	blx	r3
	}
		if (valve_ID==0)
    f0d4:	687b      	ldr	r3, [r7, #4]
    f0d6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d106      	bne.n	f0ec <_ZN22FlapperValveController8SelftestEv+0xbc>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    f0de:	f242 7210 	movw	r2, #10000	; 0x2710
    f0e2:	4932      	ldr	r1, [pc, #200]	; (f1ac <_ZN22FlapperValveController8SelftestEv+0x17c>)
    f0e4:	4832      	ldr	r0, [pc, #200]	; (f1b0 <_ZN22FlapperValveController8SelftestEv+0x180>)
    f0e6:	4b33      	ldr	r3, [pc, #204]	; (f1b4 <_ZN22FlapperValveController8SelftestEv+0x184>)
    f0e8:	4798      	blx	r3
    f0ea:	e005      	b.n	f0f8 <_ZN22FlapperValveController8SelftestEv+0xc8>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    f0ec:	f242 7210 	movw	r2, #10000	; 0x2710
    f0f0:	4931      	ldr	r1, [pc, #196]	; (f1b8 <_ZN22FlapperValveController8SelftestEv+0x188>)
    f0f2:	482f      	ldr	r0, [pc, #188]	; (f1b0 <_ZN22FlapperValveController8SelftestEv+0x180>)
    f0f4:	4b2f      	ldr	r3, [pc, #188]	; (f1b4 <_ZN22FlapperValveController8SelftestEv+0x184>)
    f0f6:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
    f0f8:	687b      	ldr	r3, [r7, #4]
    f0fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f0fc:	2101      	movs	r1, #1
    f0fe:	4618      	mov	r0, r3
    f100:	4b23      	ldr	r3, [pc, #140]	; (f190 <_ZN22FlapperValveController8SelftestEv+0x160>)
    f102:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
    f104:	687b      	ldr	r3, [r7, #4]
    f106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f108:	4618      	mov	r0, r3
    f10a:	4b27      	ldr	r3, [pc, #156]	; (f1a8 <_ZN22FlapperValveController8SelftestEv+0x178>)
    f10c:	4798      	blx	r3
    f10e:	4603      	mov	r3, r0
    f110:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
    f112:	687b      	ldr	r3, [r7, #4]
    f114:	2200      	movs	r2, #0
    f116:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
    f11a:	7bfa      	ldrb	r2, [r7, #15]
    f11c:	7bbb      	ldrb	r3, [r7, #14]
    f11e:	1ad3      	subs	r3, r2, r3
    f120:	2b00      	cmp	r3, #0
    f122:	bfb8      	it	lt
    f124:	425b      	neglt	r3, r3
    f126:	2b0c      	cmp	r3, #12
    f128:	bfcc      	ite	gt
    f12a:	2301      	movgt	r3, #1
    f12c:	2300      	movle	r3, #0
    f12e:	b2db      	uxtb	r3, r3
    f130:	461a      	mov	r2, r3
    f132:	687b      	ldr	r3, [r7, #4]
    f134:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    f138:	b2db      	uxtb	r3, r3
    f13a:	f083 0301 	eor.w	r3, r3, #1
    f13e:	b2db      	uxtb	r3, r3
    f140:	4013      	ands	r3, r2
    f142:	2b00      	cmp	r3, #0
    f144:	bf14      	ite	ne
    f146:	2301      	movne	r3, #1
    f148:	2300      	moveq	r3, #0
    f14a:	b2db      	uxtb	r3, r3
    f14c:	2b00      	cmp	r3, #0
    f14e:	d007      	beq.n	f160 <_ZN22FlapperValveController8SelftestEv+0x130>

	{

		localPosition=singlefv->ReadActualPosition();
    f150:	687b      	ldr	r3, [r7, #4]
    f152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f154:	4618      	mov	r0, r3
    f156:	4b14      	ldr	r3, [pc, #80]	; (f1a8 <_ZN22FlapperValveController8SelftestEv+0x178>)
    f158:	4798      	blx	r3
    f15a:	4603      	mov	r3, r0
    f15c:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
    f15e:	e7dc      	b.n	f11a <_ZN22FlapperValveController8SelftestEv+0xea>

	}
	RemoveTimeoutTask();
    f160:	6878      	ldr	r0, [r7, #4]
    f162:	4b16      	ldr	r3, [pc, #88]	; (f1bc <_ZN22FlapperValveController8SelftestEv+0x18c>)
    f164:	4798      	blx	r3

	singlefv->SetEnable(false);
    f166:	687b      	ldr	r3, [r7, #4]
    f168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f16a:	2100      	movs	r1, #0
    f16c:	4618      	mov	r0, r3
    f16e:	4b08      	ldr	r3, [pc, #32]	; (f190 <_ZN22FlapperValveController8SelftestEv+0x160>)
    f170:	4798      	blx	r3
	return !timeoutFlapperValveController;
    f172:	687b      	ldr	r3, [r7, #4]
    f174:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    f178:	b2db      	uxtb	r3, r3
    f17a:	f083 0301 	eor.w	r3, r3, #1
    f17e:	b2db      	uxtb	r3, r3
}
    f180:	4618      	mov	r0, r3
    f182:	3710      	adds	r7, #16
    f184:	46bd      	mov	sp, r7
    f186:	bd80      	pop	{r7, pc}
    f188:	000115b8 	.word	0x000115b8
    f18c:	0000ef59 	.word	0x0000ef59
    f190:	0000f5f1 	.word	0x0000f5f1
    f194:	0000f761 	.word	0x0000f761
    f198:	0000f6e9 	.word	0x0000f6e9
    f19c:	00001e01 	.word	0x00001e01
    f1a0:	0000f7d9 	.word	0x0000f7d9
    f1a4:	0000f671 	.word	0x0000f671
    f1a8:	0000f811 	.word	0x0000f811
    f1ac:	0000e175 	.word	0x0000e175
    f1b0:	20008b3c 	.word	0x20008b3c
    f1b4:	0000cf61 	.word	0x0000cf61
    f1b8:	0000e1a1 	.word	0x0000e1a1
    f1bc:	0000f1c1 	.word	0x0000f1c1

0000f1c0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b082      	sub	sp, #8
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
    f1c8:	687b      	ldr	r3, [r7, #4]
    f1ca:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	d104      	bne.n	f1dc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    f1d2:	4906      	ldr	r1, [pc, #24]	; (f1ec <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
    f1d4:	4806      	ldr	r0, [pc, #24]	; (f1f0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
    f1d6:	4b07      	ldr	r3, [pc, #28]	; (f1f4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
    f1d8:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
    f1da:	e003      	b.n	f1e4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    f1dc:	4906      	ldr	r1, [pc, #24]	; (f1f8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
    f1de:	4804      	ldr	r0, [pc, #16]	; (f1f0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
    f1e0:	4b04      	ldr	r3, [pc, #16]	; (f1f4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
    f1e2:	4798      	blx	r3
}
    f1e4:	bf00      	nop
    f1e6:	3708      	adds	r7, #8
    f1e8:	46bd      	mov	sp, r7
    f1ea:	bd80      	pop	{r7, pc}
    f1ec:	0000e175 	.word	0x0000e175
    f1f0:	20008b3c 	.word	0x20008b3c
    f1f4:	0000cf09 	.word	0x0000cf09
    f1f8:	0000e1a1 	.word	0x0000e1a1

0000f1fc <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
    f1fc:	b590      	push	{r4, r7, lr}
    f1fe:	b083      	sub	sp, #12
    f200:	af00      	add	r7, sp, #0
    f202:	6078      	str	r0, [r7, #4]
    f204:	4c05      	ldr	r4, [pc, #20]	; (f21c <__tcf_0+0x20>)
    f206:	4b06      	ldr	r3, [pc, #24]	; (f220 <__tcf_0+0x24>)
    f208:	429c      	cmp	r4, r3
    f20a:	d004      	beq.n	f216 <__tcf_0+0x1a>
    f20c:	3c74      	subs	r4, #116	; 0x74
    f20e:	4620      	mov	r0, r4
    f210:	4b04      	ldr	r3, [pc, #16]	; (f224 <__tcf_0+0x28>)
    f212:	4798      	blx	r3
    f214:	e7f7      	b.n	f206 <__tcf_0+0xa>
    f216:	370c      	adds	r7, #12
    f218:	46bd      	mov	sp, r7
    f21a:	bd90      	pop	{r4, r7, pc}
    f21c:	20008cec 	.word	0x20008cec
    f220:	20008c04 	.word	0x20008c04
    f224:	0000f3d5 	.word	0x0000f3d5

0000f228 <_Z41__static_initialization_and_destruction_0ii>:

    f228:	b5b0      	push	{r4, r5, r7, lr}
    f22a:	b082      	sub	sp, #8
    f22c:	af00      	add	r7, sp, #0
    f22e:	6078      	str	r0, [r7, #4]
    f230:	6039      	str	r1, [r7, #0]
    f232:	687b      	ldr	r3, [r7, #4]
    f234:	2b01      	cmp	r3, #1
    f236:	d164      	bne.n	f302 <_Z41__static_initialization_and_destruction_0ii+0xda>
    f238:	683b      	ldr	r3, [r7, #0]
    f23a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f23e:	4293      	cmp	r3, r2
    f240:	d15f      	bne.n	f302 <_Z41__static_initialization_and_destruction_0ii+0xda>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f242:	4932      	ldr	r1, [pc, #200]	; (f30c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f244:	4832      	ldr	r0, [pc, #200]	; (f310 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f246:	4b33      	ldr	r3, [pc, #204]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f248:	4798      	blx	r3
    f24a:	4a33      	ldr	r2, [pc, #204]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f24c:	4933      	ldr	r1, [pc, #204]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f24e:	4830      	ldr	r0, [pc, #192]	; (f310 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f250:	4b33      	ldr	r3, [pc, #204]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f252:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f254:	4933      	ldr	r1, [pc, #204]	; (f324 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f256:	4834      	ldr	r0, [pc, #208]	; (f328 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f258:	4b2e      	ldr	r3, [pc, #184]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f25a:	4798      	blx	r3
    f25c:	4a2e      	ldr	r2, [pc, #184]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f25e:	492f      	ldr	r1, [pc, #188]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f260:	4831      	ldr	r0, [pc, #196]	; (f328 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f262:	4b2f      	ldr	r3, [pc, #188]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f264:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f266:	4931      	ldr	r1, [pc, #196]	; (f32c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f268:	4831      	ldr	r0, [pc, #196]	; (f330 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f26a:	4b2a      	ldr	r3, [pc, #168]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f26c:	4798      	blx	r3
    f26e:	4a2a      	ldr	r2, [pc, #168]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f270:	492a      	ldr	r1, [pc, #168]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f272:	482f      	ldr	r0, [pc, #188]	; (f330 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f274:	4b2a      	ldr	r3, [pc, #168]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f276:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f278:	492e      	ldr	r1, [pc, #184]	; (f334 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f27a:	482f      	ldr	r0, [pc, #188]	; (f338 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f27c:	4b25      	ldr	r3, [pc, #148]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f27e:	4798      	blx	r3
    f280:	4a25      	ldr	r2, [pc, #148]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f282:	4926      	ldr	r1, [pc, #152]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f284:	482c      	ldr	r0, [pc, #176]	; (f338 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f286:	4b26      	ldr	r3, [pc, #152]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f288:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f28a:	492c      	ldr	r1, [pc, #176]	; (f33c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f28c:	482c      	ldr	r0, [pc, #176]	; (f340 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f28e:	4b21      	ldr	r3, [pc, #132]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f290:	4798      	blx	r3
    f292:	4a21      	ldr	r2, [pc, #132]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f294:	4921      	ldr	r1, [pc, #132]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f296:	482a      	ldr	r0, [pc, #168]	; (f340 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f298:	4b21      	ldr	r3, [pc, #132]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f29a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f29c:	4929      	ldr	r1, [pc, #164]	; (f344 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f29e:	482a      	ldr	r0, [pc, #168]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f2a0:	4b1c      	ldr	r3, [pc, #112]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f2a2:	4798      	blx	r3
    f2a4:	4a1c      	ldr	r2, [pc, #112]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2a6:	491d      	ldr	r1, [pc, #116]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2a8:	4827      	ldr	r0, [pc, #156]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f2aa:	4b1d      	ldr	r3, [pc, #116]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2ac:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f2ae:	4927      	ldr	r1, [pc, #156]	; (f34c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f2b0:	4827      	ldr	r0, [pc, #156]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f2b2:	4b18      	ldr	r3, [pc, #96]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f2b4:	4798      	blx	r3
    f2b6:	4a18      	ldr	r2, [pc, #96]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2b8:	4918      	ldr	r1, [pc, #96]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2ba:	4825      	ldr	r0, [pc, #148]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f2bc:	4b18      	ldr	r3, [pc, #96]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2be:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f2c0:	4924      	ldr	r1, [pc, #144]	; (f354 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f2c2:	4825      	ldr	r0, [pc, #148]	; (f358 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f2c4:	4b13      	ldr	r3, [pc, #76]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f2c6:	4798      	blx	r3
    f2c8:	4a13      	ldr	r2, [pc, #76]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2ca:	4914      	ldr	r1, [pc, #80]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2cc:	4822      	ldr	r0, [pc, #136]	; (f358 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f2ce:	4b14      	ldr	r3, [pc, #80]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2d0:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
    f2d2:	4b22      	ldr	r3, [pc, #136]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f2d4:	2401      	movs	r4, #1
    f2d6:	461d      	mov	r5, r3
    f2d8:	2c00      	cmp	r4, #0
    f2da:	db05      	blt.n	f2e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
    f2dc:	4628      	mov	r0, r5
    f2de:	4b20      	ldr	r3, [pc, #128]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f2e0:	4798      	blx	r3
    f2e2:	3574      	adds	r5, #116	; 0x74
    f2e4:	3c01      	subs	r4, #1
    f2e6:	e7f7      	b.n	f2d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
    f2e8:	4a0b      	ldr	r2, [pc, #44]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2ea:	491e      	ldr	r1, [pc, #120]	; (f364 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f2ec:	2000      	movs	r0, #0
    f2ee:	4b0c      	ldr	r3, [pc, #48]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2f0:	4798      	blx	r3
    f2f2:	481d      	ldr	r0, [pc, #116]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f2f4:	4b1d      	ldr	r3, [pc, #116]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0x144>)
    f2f6:	4798      	blx	r3
    f2f8:	4a07      	ldr	r2, [pc, #28]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2fa:	491d      	ldr	r1, [pc, #116]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    f2fc:	481a      	ldr	r0, [pc, #104]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f2fe:	4b08      	ldr	r3, [pc, #32]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f300:	4798      	blx	r3
    f302:	bf00      	nop
    f304:	3708      	adds	r7, #8
    f306:	46bd      	mov	sp, r7
    f308:	bdb0      	pop	{r4, r5, r7, pc}
    f30a:	bf00      	nop
    f30c:	2000926c 	.word	0x2000926c
    f310:	20008afc 	.word	0x20008afc
    f314:	0000cd2d 	.word	0x0000cd2d
    f318:	20000000 	.word	0x20000000
    f31c:	0000cd65 	.word	0x0000cd65
    f320:	00010a09 	.word	0x00010a09
    f324:	20009300 	.word	0x20009300
    f328:	20008b1c 	.word	0x20008b1c
    f32c:	20009424 	.word	0x20009424
    f330:	20008b3c 	.word	0x20008b3c
    f334:	20009320 	.word	0x20009320
    f338:	20008b5c 	.word	0x20008b5c
    f33c:	200093e4 	.word	0x200093e4
    f340:	20008b7c 	.word	0x20008b7c
    f344:	20009404 	.word	0x20009404
    f348:	20008b9c 	.word	0x20008b9c
    f34c:	200092dc 	.word	0x200092dc
    f350:	20008bbc 	.word	0x20008bbc
    f354:	2000937c 	.word	0x2000937c
    f358:	20008bdc 	.word	0x20008bdc
    f35c:	20008c04 	.word	0x20008c04
    f360:	0000f389 	.word	0x0000f389
    f364:	0000f1fd 	.word	0x0000f1fd
    f368:	20008cec 	.word	0x20008cec
    f36c:	0000e24d 	.word	0x0000e24d
    f370:	0000e2d5 	.word	0x0000e2d5

0000f374 <_GLOBAL__sub_I_ptrFlapperValveController>:
    f374:	b580      	push	{r7, lr}
    f376:	af00      	add	r7, sp, #0
    f378:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f37c:	2001      	movs	r0, #1
    f37e:	4b01      	ldr	r3, [pc, #4]	; (f384 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    f380:	4798      	blx	r3
    f382:	bd80      	pop	{r7, pc}
    f384:	0000f229 	.word	0x0000f229

0000f388 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    f388:	b580      	push	{r7, lr}
    f38a:	b082      	sub	sp, #8
    f38c:	af00      	add	r7, sp, #0
    f38e:	6078      	str	r0, [r7, #4]
    f390:	687b      	ldr	r3, [r7, #4]
    f392:	4618      	mov	r0, r3
    f394:	4b0c      	ldr	r3, [pc, #48]	; (f3c8 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
    f396:	4798      	blx	r3
{
	valveID=0;
    f398:	687b      	ldr	r3, [r7, #4]
    f39a:	2200      	movs	r2, #0
    f39c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    f3a0:	687b      	ldr	r3, [r7, #4]
    f3a2:	4a0a      	ldr	r2, [pc, #40]	; (f3cc <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
    f3a4:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    f3a6:	687b      	ldr	r3, [r7, #4]
    f3a8:	2200      	movs	r2, #0
    f3aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    f3ae:	4a08      	ldr	r2, [pc, #32]	; (f3d0 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
    f3b0:	687b      	ldr	r3, [r7, #4]
    f3b2:	6013      	str	r3, [r2, #0]
	isOK=false;
    f3b4:	687b      	ldr	r3, [r7, #4]
    f3b6:	2200      	movs	r2, #0
    f3b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    f3bc:	687b      	ldr	r3, [r7, #4]
    f3be:	4618      	mov	r0, r3
    f3c0:	3708      	adds	r7, #8
    f3c2:	46bd      	mov	sp, r7
    f3c4:	bd80      	pop	{r7, pc}
    f3c6:	bf00      	nop
    f3c8:	0000fb55 	.word	0x0000fb55
    f3cc:	20008eb4 	.word	0x20008eb4
    f3d0:	20008eb0 	.word	0x20008eb0

0000f3d4 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
    f3d4:	b580      	push	{r7, lr}
    f3d6:	b082      	sub	sp, #8
    f3d8:	af00      	add	r7, sp, #0
    f3da:	6078      	str	r0, [r7, #4]
    f3dc:	687b      	ldr	r3, [r7, #4]
    f3de:	4618      	mov	r0, r3
    f3e0:	4b03      	ldr	r3, [pc, #12]	; (f3f0 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
    f3e2:	4798      	blx	r3
{
} //~FlapperValve_Class
    f3e4:	687b      	ldr	r3, [r7, #4]
    f3e6:	4618      	mov	r0, r3
    f3e8:	3708      	adds	r7, #8
    f3ea:	46bd      	mov	sp, r7
    f3ec:	bd80      	pop	{r7, pc}
    f3ee:	bf00      	nop
    f3f0:	0000fb69 	.word	0x0000fb69

0000f3f4 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
    f3f4:	b580      	push	{r7, lr}
    f3f6:	b082      	sub	sp, #8
    f3f8:	af00      	add	r7, sp, #0
    f3fa:	6078      	str	r0, [r7, #4]
	if (i2c->i2c_initiated)
    f3fc:	687b      	ldr	r3, [r7, #4]
    f3fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f400:	7a1b      	ldrb	r3, [r3, #8]
    f402:	b2db      	uxtb	r3, r3
    f404:	2b00      	cmp	r3, #0
    f406:	d104      	bne.n	f412 <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
    f408:	687b      	ldr	r3, [r7, #4]
    f40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f40c:	4618      	mov	r0, r3
    f40e:	4b19      	ldr	r3, [pc, #100]	; (f474 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
    f410:	4798      	blx	r3
	}
		

		if (i2c->isOK)
    f412:	687b      	ldr	r3, [r7, #4]
    f414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f416:	7a5b      	ldrb	r3, [r3, #9]
    f418:	b2db      	uxtb	r3, r3
    f41a:	2b00      	cmp	r3, #0
    f41c:	d01b      	beq.n	f456 <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
    f41e:	687b      	ldr	r3, [r7, #4]
    f420:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    f424:	4619      	mov	r1, r3
    f426:	6878      	ldr	r0, [r7, #4]
    f428:	4b13      	ldr	r3, [pc, #76]	; (f478 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
    f42a:	4798      	blx	r3
			expanders[0]->SetPortInput();
    f42c:	687b      	ldr	r3, [r7, #4]
    f42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f430:	4618      	mov	r0, r3
    f432:	4b12      	ldr	r3, [pc, #72]	; (f47c <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
    f434:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
    f436:	687b      	ldr	r3, [r7, #4]
    f438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f43a:	2180      	movs	r1, #128	; 0x80
    f43c:	4618      	mov	r0, r3
    f43e:	4b10      	ldr	r3, [pc, #64]	; (f480 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
    f440:	4798      	blx	r3
			expanders[2]->SetPortOutput();
    f442:	687b      	ldr	r3, [r7, #4]
    f444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f446:	4618      	mov	r0, r3
    f448:	4b0e      	ldr	r3, [pc, #56]	; (f484 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
    f44a:	4798      	blx	r3
			expanders[3]->SetPortInput();
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    f450:	4618      	mov	r0, r3
    f452:	4b0a      	ldr	r3, [pc, #40]	; (f47c <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
    f454:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f45a:	7a5b      	ldrb	r3, [r3, #9]
    f45c:	b2da      	uxtb	r2, r3
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
    f464:	687b      	ldr	r3, [r7, #4]
    f466:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f46a:	b2db      	uxtb	r3, r3


}
    f46c:	4618      	mov	r0, r3
    f46e:	3708      	adds	r7, #8
    f470:	46bd      	mov	sp, r7
    f472:	bd80      	pop	{r7, pc}
    f474:	0000fa69 	.word	0x0000fa69
    f478:	0000f4b1 	.word	0x0000f4b1
    f47c:	0000fee9 	.word	0x0000fee9
    f480:	0000ff2d 	.word	0x0000ff2d
    f484:	0000ffa1 	.word	0x0000ffa1

0000f488 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
    f488:	b580      	push	{r7, lr}
    f48a:	b082      	sub	sp, #8
    f48c:	af00      	add	r7, sp, #0
    f48e:	6078      	str	r0, [r7, #4]
    f490:	460b      	mov	r3, r1
    f492:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
    f494:	687b      	ldr	r3, [r7, #4]
    f496:	78fa      	ldrb	r2, [r7, #3]
    f498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return Init();
    f49c:	6878      	ldr	r0, [r7, #4]
    f49e:	4b03      	ldr	r3, [pc, #12]	; (f4ac <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
    f4a0:	4798      	blx	r3
    f4a2:	4603      	mov	r3, r0
}
    f4a4:	4618      	mov	r0, r3
    f4a6:	3708      	adds	r7, #8
    f4a8:	46bd      	mov	sp, r7
    f4aa:	bd80      	pop	{r7, pc}
    f4ac:	0000f3f5 	.word	0x0000f3f5

0000f4b0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
    f4b0:	b580      	push	{r7, lr}
    f4b2:	b084      	sub	sp, #16
    f4b4:	af00      	add	r7, sp, #0
    f4b6:	6078      	str	r0, [r7, #4]
    f4b8:	460b      	mov	r3, r1
    f4ba:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    f4bc:	2300      	movs	r3, #0
    f4be:	60fb      	str	r3, [r7, #12]
    f4c0:	68fb      	ldr	r3, [r7, #12]
    f4c2:	2b03      	cmp	r3, #3
    f4c4:	dc2e      	bgt.n	f524 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x74>
	{
		currentExpander=&(expandersStatic[valveID][i]);
    f4c6:	687b      	ldr	r3, [r7, #4]
    f4c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    f4cc:	4619      	mov	r1, r3
    f4ce:	68fb      	ldr	r3, [r7, #12]
    f4d0:	461a      	mov	r2, r3
    f4d2:	00d2      	lsls	r2, r2, #3
    f4d4:	1ad2      	subs	r2, r2, r3
    f4d6:	0093      	lsls	r3, r2, #2
    f4d8:	461a      	mov	r2, r3
    f4da:	460b      	mov	r3, r1
    f4dc:	00db      	lsls	r3, r3, #3
    f4de:	1a5b      	subs	r3, r3, r1
    f4e0:	011b      	lsls	r3, r3, #4
    f4e2:	4413      	add	r3, r2
    f4e4:	4a12      	ldr	r2, [pc, #72]	; (f530 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
    f4e6:	441a      	add	r2, r3
    f4e8:	687b      	ldr	r3, [r7, #4]
    f4ea:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
    f4ec:	687b      	ldr	r3, [r7, #4]
    f4ee:	6e58      	ldr	r0, [r3, #100]	; 0x64
    f4f0:	68fb      	ldr	r3, [r7, #12]
    f4f2:	b2da      	uxtb	r2, r3
    f4f4:	78fb      	ldrb	r3, [r7, #3]
    f4f6:	009b      	lsls	r3, r3, #2
    f4f8:	b2db      	uxtb	r3, r3
    f4fa:	4413      	add	r3, r2
    f4fc:	b2db      	uxtb	r3, r3
    f4fe:	3320      	adds	r3, #32
    f500:	b2d9      	uxtb	r1, r3
    f502:	687b      	ldr	r3, [r7, #4]
    f504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f506:	461a      	mov	r2, r3
    f508:	4b0a      	ldr	r3, [pc, #40]	; (f534 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x84>)
    f50a:	4798      	blx	r3
		expanders[i]=currentExpander;
    f50c:	687b      	ldr	r3, [r7, #4]
    f50e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    f510:	6879      	ldr	r1, [r7, #4]
    f512:	68fb      	ldr	r3, [r7, #12]
    f514:	3314      	adds	r3, #20
    f516:	009b      	lsls	r3, r3, #2
    f518:	440b      	add	r3, r1
    f51a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    f51c:	68fb      	ldr	r3, [r7, #12]
    f51e:	3301      	adds	r3, #1
    f520:	60fb      	str	r3, [r7, #12]
    f522:	e7cd      	b.n	f4c0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
    f524:	2300      	movs	r3, #0
}
    f526:	4618      	mov	r0, r3
    f528:	3710      	adds	r7, #16
    f52a:	46bd      	mov	sp, r7
    f52c:	bd80      	pop	{r7, pc}
    f52e:	bf00      	nop
    f530:	20008ec8 	.word	0x20008ec8
    f534:	0000fd73 	.word	0x0000fd73

0000f538 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
    f538:	b590      	push	{r4, r7, lr}
    f53a:	b085      	sub	sp, #20
    f53c:	af00      	add	r7, sp, #0
    f53e:	60f8      	str	r0, [r7, #12]
    f540:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
    f542:	68bb      	ldr	r3, [r7, #8]
    f544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f546:	4618      	mov	r0, r3
    f548:	4b10      	ldr	r3, [pc, #64]	; (f58c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
    f54a:	4798      	blx	r3
    f54c:	4603      	mov	r3, r0
    f54e:	461a      	mov	r2, r3
    f550:	68bb      	ldr	r3, [r7, #8]
    f552:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
    f556:	68b9      	ldr	r1, [r7, #8]
    f558:	68bb      	ldr	r3, [r7, #8]
    f55a:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    f55e:	68bc      	ldr	r4, [r7, #8]
    f560:	463b      	mov	r3, r7
    f562:	4618      	mov	r0, r3
    f564:	4b0a      	ldr	r3, [pc, #40]	; (f590 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
    f566:	4798      	blx	r3
    f568:	f104 033a 	add.w	r3, r4, #58	; 0x3a
    f56c:	463a      	mov	r2, r7
    f56e:	6811      	ldr	r1, [r2, #0]
    f570:	6852      	ldr	r2, [r2, #4]
    f572:	6019      	str	r1, [r3, #0]
    f574:	605a      	str	r2, [r3, #4]
	return controlOutputs;
    f576:	68fa      	ldr	r2, [r7, #12]
    f578:	68bb      	ldr	r3, [r7, #8]
    f57a:	333a      	adds	r3, #58	; 0x3a
    f57c:	6819      	ldr	r1, [r3, #0]
    f57e:	685b      	ldr	r3, [r3, #4]
    f580:	6011      	str	r1, [r2, #0]
    f582:	6053      	str	r3, [r2, #4]
}
    f584:	68f8      	ldr	r0, [r7, #12]
    f586:	3714      	adds	r7, #20
    f588:	46bd      	mov	sp, r7
    f58a:	bd90      	pop	{r4, r7, pc}
    f58c:	0000fe29 	.word	0x0000fe29
    f590:	0000fc65 	.word	0x0000fc65

0000f594 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
    f594:	b590      	push	{r4, r7, lr}
    f596:	b085      	sub	sp, #20
    f598:	af00      	add	r7, sp, #0
    f59a:	60f8      	str	r0, [r7, #12]
    f59c:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
    f59e:	68bb      	ldr	r3, [r7, #8]
    f5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f5a2:	4618      	mov	r0, r3
    f5a4:	4b10      	ldr	r3, [pc, #64]	; (f5e8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
    f5a6:	4798      	blx	r3
    f5a8:	4603      	mov	r3, r0
    f5aa:	461a      	mov	r2, r3
    f5ac:	68bb      	ldr	r3, [r7, #8]
    f5ae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
    f5b2:	68b9      	ldr	r1, [r7, #8]
    f5b4:	68bb      	ldr	r3, [r7, #8]
    f5b6:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    f5ba:	68bc      	ldr	r4, [r7, #8]
    f5bc:	463b      	mov	r3, r7
    f5be:	4618      	mov	r0, r3
    f5c0:	4b0a      	ldr	r3, [pc, #40]	; (f5ec <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
    f5c2:	4798      	blx	r3
    f5c4:	f104 0342 	add.w	r3, r4, #66	; 0x42
    f5c8:	463a      	mov	r2, r7
    f5ca:	6811      	ldr	r1, [r2, #0]
    f5cc:	6019      	str	r1, [r3, #0]
    f5ce:	8892      	ldrh	r2, [r2, #4]
    f5d0:	809a      	strh	r2, [r3, #4]
	return statusInputs;
    f5d2:	68fa      	ldr	r2, [r7, #12]
    f5d4:	68bb      	ldr	r3, [r7, #8]
    f5d6:	3342      	adds	r3, #66	; 0x42
    f5d8:	6819      	ldr	r1, [r3, #0]
    f5da:	6011      	str	r1, [r2, #0]
    f5dc:	889b      	ldrh	r3, [r3, #4]
    f5de:	8093      	strh	r3, [r2, #4]
}
    f5e0:	68f8      	ldr	r0, [r7, #12]
    f5e2:	3714      	adds	r7, #20
    f5e4:	46bd      	mov	sp, r7
    f5e6:	bd90      	pop	{r4, r7, pc}
    f5e8:	0000fe29 	.word	0x0000fe29
    f5ec:	0000fc11 	.word	0x0000fc11

0000f5f0 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
    f5f0:	b580      	push	{r7, lr}
    f5f2:	b082      	sub	sp, #8
    f5f4:	af00      	add	r7, sp, #0
    f5f6:	6078      	str	r0, [r7, #4]
    f5f8:	460b      	mov	r3, r1
    f5fa:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    f5fc:	687b      	ldr	r3, [r7, #4]
    f5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f600:	4618      	mov	r0, r3
    f602:	4b19      	ldr	r3, [pc, #100]	; (f668 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
    f604:	4798      	blx	r3
    f606:	4603      	mov	r3, r0
    f608:	461a      	mov	r2, r3
    f60a:	687b      	ldr	r3, [r7, #4]
    f60c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x01:value&0xfe;
    f610:	78fb      	ldrb	r3, [r7, #3]
    f612:	2b00      	cmp	r3, #0
    f614:	d006      	beq.n	f624 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
    f616:	687b      	ldr	r3, [r7, #4]
    f618:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f61c:	f043 0301 	orr.w	r3, r3, #1
    f620:	b2db      	uxtb	r3, r3
    f622:	e005      	b.n	f630 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
    f624:	687b      	ldr	r3, [r7, #4]
    f626:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f62a:	f023 0301 	bic.w	r3, r3, #1
    f62e:	b2db      	uxtb	r3, r3
    f630:	687a      	ldr	r2, [r7, #4]
    f632:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
    f636:	687b      	ldr	r3, [r7, #4]
    f638:	78fa      	ldrb	r2, [r7, #3]
    f63a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
    f63e:	687b      	ldr	r3, [r7, #4]
    f640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    f642:	687b      	ldr	r3, [r7, #4]
    f644:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f648:	4619      	mov	r1, r3
    f64a:	4610      	mov	r0, r2
    f64c:	4b07      	ldr	r3, [pc, #28]	; (f66c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
    f64e:	4798      	blx	r3
    f650:	4603      	mov	r3, r0
    f652:	461a      	mov	r2, r3
    f654:	687b      	ldr	r3, [r7, #4]
    f656:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    f65a:	687b      	ldr	r3, [r7, #4]
    f65c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    f660:	4618      	mov	r0, r3
    f662:	3708      	adds	r7, #8
    f664:	46bd      	mov	sp, r7
    f666:	bd80      	pop	{r7, pc}
    f668:	0000fe29 	.word	0x0000fe29
    f66c:	0000fead 	.word	0x0000fead

0000f670 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
    f670:	b580      	push	{r7, lr}
    f672:	b082      	sub	sp, #8
    f674:	af00      	add	r7, sp, #0
    f676:	6078      	str	r0, [r7, #4]
    f678:	460b      	mov	r3, r1
    f67a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    f67c:	687b      	ldr	r3, [r7, #4]
    f67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f680:	4618      	mov	r0, r3
    f682:	4b17      	ldr	r3, [pc, #92]	; (f6e0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
    f684:	4798      	blx	r3
    f686:	4603      	mov	r3, r0
    f688:	461a      	mov	r2, r3
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
    f690:	78fb      	ldrb	r3, [r7, #3]
    f692:	2b00      	cmp	r3, #0
    f694:	d006      	beq.n	f6a4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
    f696:	687b      	ldr	r3, [r7, #4]
    f698:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f69c:	f043 0320 	orr.w	r3, r3, #32
    f6a0:	b2db      	uxtb	r3, r3
    f6a2:	e005      	b.n	f6b0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
    f6a4:	687b      	ldr	r3, [r7, #4]
    f6a6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f6aa:	f023 0320 	bic.w	r3, r3, #32
    f6ae:	b2db      	uxtb	r3, r3
    f6b0:	687a      	ldr	r2, [r7, #4]
    f6b2:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    f6b6:	687b      	ldr	r3, [r7, #4]
    f6b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    f6ba:	687b      	ldr	r3, [r7, #4]
    f6bc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f6c0:	4619      	mov	r1, r3
    f6c2:	4610      	mov	r0, r2
    f6c4:	4b07      	ldr	r3, [pc, #28]	; (f6e4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
    f6c6:	4798      	blx	r3
    f6c8:	4603      	mov	r3, r0
    f6ca:	461a      	mov	r2, r3
    f6cc:	687b      	ldr	r3, [r7, #4]
    f6ce:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    f6d2:	687b      	ldr	r3, [r7, #4]
    f6d4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    f6d8:	4618      	mov	r0, r3
    f6da:	3708      	adds	r7, #8
    f6dc:	46bd      	mov	sp, r7
    f6de:	bd80      	pop	{r7, pc}
    f6e0:	0000fe29 	.word	0x0000fe29
    f6e4:	0000fead 	.word	0x0000fead

0000f6e8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
    f6e8:	b580      	push	{r7, lr}
    f6ea:	b082      	sub	sp, #8
    f6ec:	af00      	add	r7, sp, #0
    f6ee:	6078      	str	r0, [r7, #4]
    f6f0:	460b      	mov	r3, r1
    f6f2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    f6f4:	687b      	ldr	r3, [r7, #4]
    f6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f6f8:	4618      	mov	r0, r3
    f6fa:	4b17      	ldr	r3, [pc, #92]	; (f758 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
    f6fc:	4798      	blx	r3
    f6fe:	4603      	mov	r3, r0
    f700:	461a      	mov	r2, r3
    f702:	687b      	ldr	r3, [r7, #4]
    f704:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
    f708:	78fb      	ldrb	r3, [r7, #3]
    f70a:	2b00      	cmp	r3, #0
    f70c:	d006      	beq.n	f71c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
    f70e:	687b      	ldr	r3, [r7, #4]
    f710:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f718:	b2db      	uxtb	r3, r3
    f71a:	e005      	b.n	f728 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    f726:	b2db      	uxtb	r3, r3
    f728:	687a      	ldr	r2, [r7, #4]
    f72a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    f72e:	687b      	ldr	r3, [r7, #4]
    f730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    f732:	687b      	ldr	r3, [r7, #4]
    f734:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f738:	4619      	mov	r1, r3
    f73a:	4610      	mov	r0, r2
    f73c:	4b07      	ldr	r3, [pc, #28]	; (f75c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
    f73e:	4798      	blx	r3
    f740:	4603      	mov	r3, r0
    f742:	461a      	mov	r2, r3
    f744:	687b      	ldr	r3, [r7, #4]
    f746:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    f74a:	687b      	ldr	r3, [r7, #4]
    f74c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    f750:	4618      	mov	r0, r3
    f752:	3708      	adds	r7, #8
    f754:	46bd      	mov	sp, r7
    f756:	bd80      	pop	{r7, pc}
    f758:	0000fe29 	.word	0x0000fe29
    f75c:	0000fead 	.word	0x0000fead

0000f760 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
    f760:	b580      	push	{r7, lr}
    f762:	b082      	sub	sp, #8
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	460b      	mov	r3, r1
    f76a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    f76c:	687b      	ldr	r3, [r7, #4]
    f76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f770:	4618      	mov	r0, r3
    f772:	4b17      	ldr	r3, [pc, #92]	; (f7d0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
    f774:	4798      	blx	r3
    f776:	4603      	mov	r3, r0
    f778:	461a      	mov	r2, r3
    f77a:	687b      	ldr	r3, [r7, #4]
    f77c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
    f780:	78fb      	ldrb	r3, [r7, #3]
    f782:	2b00      	cmp	r3, #0
    f784:	d006      	beq.n	f794 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f78c:	f043 0304 	orr.w	r3, r3, #4
    f790:	b2db      	uxtb	r3, r3
    f792:	e005      	b.n	f7a0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
    f794:	687b      	ldr	r3, [r7, #4]
    f796:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f79a:	f023 0304 	bic.w	r3, r3, #4
    f79e:	b2db      	uxtb	r3, r3
    f7a0:	687a      	ldr	r2, [r7, #4]
    f7a2:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
    f7a6:	687b      	ldr	r3, [r7, #4]
    f7a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    f7aa:	687b      	ldr	r3, [r7, #4]
    f7ac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    f7b0:	4619      	mov	r1, r3
    f7b2:	4610      	mov	r0, r2
    f7b4:	4b07      	ldr	r3, [pc, #28]	; (f7d4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
    f7b6:	4798      	blx	r3
    f7b8:	4603      	mov	r3, r0
    f7ba:	461a      	mov	r2, r3
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    f7c2:	687b      	ldr	r3, [r7, #4]
    f7c4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    f7c8:	4618      	mov	r0, r3
    f7ca:	3708      	adds	r7, #8
    f7cc:	46bd      	mov	sp, r7
    f7ce:	bd80      	pop	{r7, pc}
    f7d0:	0000fe29 	.word	0x0000fe29
    f7d4:	0000fead 	.word	0x0000fead

0000f7d8 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
    f7d8:	b580      	push	{r7, lr}
    f7da:	b082      	sub	sp, #8
    f7dc:	af00      	add	r7, sp, #0
    f7de:	6078      	str	r0, [r7, #4]
    f7e0:	460b      	mov	r3, r1
    f7e2:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
    f7e4:	687b      	ldr	r3, [r7, #4]
    f7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f7e8:	78fa      	ldrb	r2, [r7, #3]
    f7ea:	4611      	mov	r1, r2
    f7ec:	4618      	mov	r0, r3
    f7ee:	4b07      	ldr	r3, [pc, #28]	; (f80c <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
    f7f0:	4798      	blx	r3
    f7f2:	4603      	mov	r3, r0
    f7f4:	461a      	mov	r2, r3
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
    f7fc:	687b      	ldr	r3, [r7, #4]
    f7fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
    f802:	4618      	mov	r0, r3
    f804:	3708      	adds	r7, #8
    f806:	46bd      	mov	sp, r7
    f808:	bd80      	pop	{r7, pc}
    f80a:	bf00      	nop
    f80c:	0000fead 	.word	0x0000fead

0000f810 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
    f810:	b580      	push	{r7, lr}
    f812:	b082      	sub	sp, #8
    f814:	af00      	add	r7, sp, #0
    f816:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
    f824:	687b      	ldr	r3, [r7, #4]
    f826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    f828:	4618      	mov	r0, r3
    f82a:	4b18      	ldr	r3, [pc, #96]	; (f88c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
    f82c:	4798      	blx	r3
    f82e:	4603      	mov	r3, r0
    f830:	461a      	mov	r2, r3
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
    f838:	687b      	ldr	r3, [r7, #4]
    f83a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    f83e:	2bda      	cmp	r3, #218	; 0xda
    f840:	dd04      	ble.n	f84c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	2203      	movs	r2, #3
    f846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    f84a:	e017      	b.n	f87c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
    f84c:	687b      	ldr	r3, [r7, #4]
    f84e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    f852:	2b6d      	cmp	r3, #109	; 0x6d
    f854:	dd04      	ble.n	f860 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
    f856:	687b      	ldr	r3, [r7, #4]
    f858:	2202      	movs	r2, #2
    f85a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    f85e:	e00d      	b.n	f87c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
    f860:	687b      	ldr	r3, [r7, #4]
    f862:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    f866:	2b36      	cmp	r3, #54	; 0x36
    f868:	dd04      	ble.n	f874 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
    f86a:	687b      	ldr	r3, [r7, #4]
    f86c:	2201      	movs	r2, #1
    f86e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    f872:	e003      	b.n	f87c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
    f874:	687b      	ldr	r3, [r7, #4]
    f876:	2200      	movs	r2, #0
    f878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
    f87c:	687b      	ldr	r3, [r7, #4]
    f87e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
    f882:	4618      	mov	r0, r3
    f884:	3708      	adds	r7, #8
    f886:	46bd      	mov	sp, r7
    f888:	bd80      	pop	{r7, pc}
    f88a:	bf00      	nop
    f88c:	0000fe29 	.word	0x0000fe29

0000f890 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
    f890:	b590      	push	{r4, r7, lr}
    f892:	b083      	sub	sp, #12
    f894:	af00      	add	r7, sp, #0
    f896:	6078      	str	r0, [r7, #4]
    f898:	4c05      	ldr	r4, [pc, #20]	; (f8b0 <__tcf_0+0x20>)
    f89a:	4b06      	ldr	r3, [pc, #24]	; (f8b4 <__tcf_0+0x24>)
    f89c:	429c      	cmp	r4, r3
    f89e:	d004      	beq.n	f8aa <__tcf_0+0x1a>
    f8a0:	3c1c      	subs	r4, #28
    f8a2:	4620      	mov	r0, r4
    f8a4:	4b04      	ldr	r3, [pc, #16]	; (f8b8 <__tcf_0+0x28>)
    f8a6:	4798      	blx	r3
    f8a8:	e7f7      	b.n	f89a <__tcf_0+0xa>
    f8aa:	370c      	adds	r7, #12
    f8ac:	46bd      	mov	sp, r7
    f8ae:	bd90      	pop	{r4, r7, pc}
    f8b0:	20008fa8 	.word	0x20008fa8
    f8b4:	20008ec8 	.word	0x20008ec8
    f8b8:	0000fd5f 	.word	0x0000fd5f

0000f8bc <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
    f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8c0:	b082      	sub	sp, #8
    f8c2:	af00      	add	r7, sp, #0
    f8c4:	6078      	str	r0, [r7, #4]
    f8c6:	6039      	str	r1, [r7, #0]
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	2b01      	cmp	r3, #1
    f8cc:	d16e      	bne.n	f9ac <_Z41__static_initialization_and_destruction_0ii+0xf0>
    f8ce:	683b      	ldr	r3, [r7, #0]
    f8d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f8d4:	4293      	cmp	r3, r2
    f8d6:	d169      	bne.n	f9ac <_Z41__static_initialization_and_destruction_0ii+0xf0>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f8d8:	4937      	ldr	r1, [pc, #220]	; (f9b8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f8da:	4838      	ldr	r0, [pc, #224]	; (f9bc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f8dc:	4b38      	ldr	r3, [pc, #224]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f8de:	4798      	blx	r3
    f8e0:	4a38      	ldr	r2, [pc, #224]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f8e2:	4939      	ldr	r1, [pc, #228]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f8e4:	4835      	ldr	r0, [pc, #212]	; (f9bc <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f8e6:	4b39      	ldr	r3, [pc, #228]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f8e8:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f8ea:	4939      	ldr	r1, [pc, #228]	; (f9d0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f8ec:	4839      	ldr	r0, [pc, #228]	; (f9d4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f8ee:	4b34      	ldr	r3, [pc, #208]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f8f0:	4798      	blx	r3
    f8f2:	4a34      	ldr	r2, [pc, #208]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f8f4:	4934      	ldr	r1, [pc, #208]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f8f6:	4837      	ldr	r0, [pc, #220]	; (f9d4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f8f8:	4b34      	ldr	r3, [pc, #208]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f8fa:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f8fc:	4936      	ldr	r1, [pc, #216]	; (f9d8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f8fe:	4837      	ldr	r0, [pc, #220]	; (f9dc <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f900:	4b2f      	ldr	r3, [pc, #188]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f902:	4798      	blx	r3
    f904:	4a2f      	ldr	r2, [pc, #188]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f906:	4930      	ldr	r1, [pc, #192]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f908:	4834      	ldr	r0, [pc, #208]	; (f9dc <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f90a:	4b30      	ldr	r3, [pc, #192]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f90c:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f90e:	4934      	ldr	r1, [pc, #208]	; (f9e0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f910:	4834      	ldr	r0, [pc, #208]	; (f9e4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f912:	4b2b      	ldr	r3, [pc, #172]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f914:	4798      	blx	r3
    f916:	4a2b      	ldr	r2, [pc, #172]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f918:	492b      	ldr	r1, [pc, #172]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f91a:	4832      	ldr	r0, [pc, #200]	; (f9e4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f91c:	4b2b      	ldr	r3, [pc, #172]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f91e:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f920:	4931      	ldr	r1, [pc, #196]	; (f9e8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f922:	4832      	ldr	r0, [pc, #200]	; (f9ec <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f924:	4b26      	ldr	r3, [pc, #152]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f926:	4798      	blx	r3
    f928:	4a26      	ldr	r2, [pc, #152]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f92a:	4927      	ldr	r1, [pc, #156]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f92c:	482f      	ldr	r0, [pc, #188]	; (f9ec <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f92e:	4b27      	ldr	r3, [pc, #156]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f930:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f932:	492f      	ldr	r1, [pc, #188]	; (f9f0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f934:	482f      	ldr	r0, [pc, #188]	; (f9f4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f936:	4b22      	ldr	r3, [pc, #136]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f938:	4798      	blx	r3
    f93a:	4a22      	ldr	r2, [pc, #136]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f93c:	4922      	ldr	r1, [pc, #136]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f93e:	482d      	ldr	r0, [pc, #180]	; (f9f4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f940:	4b22      	ldr	r3, [pc, #136]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f942:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f944:	492c      	ldr	r1, [pc, #176]	; (f9f8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f946:	482d      	ldr	r0, [pc, #180]	; (f9fc <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f948:	4b1d      	ldr	r3, [pc, #116]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f94a:	4798      	blx	r3
    f94c:	4a1d      	ldr	r2, [pc, #116]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f94e:	491e      	ldr	r1, [pc, #120]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f950:	482a      	ldr	r0, [pc, #168]	; (f9fc <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f952:	4b1e      	ldr	r3, [pc, #120]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f954:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f956:	492a      	ldr	r1, [pc, #168]	; (fa00 <_Z41__static_initialization_and_destruction_0ii+0x144>)
    f958:	482a      	ldr	r0, [pc, #168]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    f95a:	4b19      	ldr	r3, [pc, #100]	; (f9c0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f95c:	4798      	blx	r3
    f95e:	4a19      	ldr	r2, [pc, #100]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f960:	4919      	ldr	r1, [pc, #100]	; (f9c8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f962:	4828      	ldr	r0, [pc, #160]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0x148>)
    f964:	4b19      	ldr	r3, [pc, #100]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f966:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
    f968:	4927      	ldr	r1, [pc, #156]	; (fa08 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
    f96a:	4828      	ldr	r0, [pc, #160]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0x150>)
    f96c:	4b28      	ldr	r3, [pc, #160]	; (fa10 <_Z41__static_initialization_and_destruction_0ii+0x154>)
    f96e:	4798      	blx	r3
    f970:	4a14      	ldr	r2, [pc, #80]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f972:	4928      	ldr	r1, [pc, #160]	; (fa14 <_Z41__static_initialization_and_destruction_0ii+0x158>)
    f974:	4825      	ldr	r0, [pc, #148]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0x150>)
    f976:	4b15      	ldr	r3, [pc, #84]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f978:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
    f97a:	4b27      	ldr	r3, [pc, #156]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
    f97c:	2401      	movs	r4, #1
    f97e:	461e      	mov	r6, r3
    f980:	2c00      	cmp	r4, #0
    f982:	db0e      	blt.n	f9a2 <_Z41__static_initialization_and_destruction_0ii+0xe6>
    f984:	4633      	mov	r3, r6
    f986:	2503      	movs	r5, #3
    f988:	4698      	mov	r8, r3
    f98a:	2d00      	cmp	r5, #0
    f98c:	db06      	blt.n	f99c <_Z41__static_initialization_and_destruction_0ii+0xe0>
    f98e:	4640      	mov	r0, r8
    f990:	4b22      	ldr	r3, [pc, #136]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0x160>)
    f992:	4798      	blx	r3
    f994:	f108 081c 	add.w	r8, r8, #28
    f998:	3d01      	subs	r5, #1
    f99a:	e7f6      	b.n	f98a <_Z41__static_initialization_and_destruction_0ii+0xce>
    f99c:	3670      	adds	r6, #112	; 0x70
    f99e:	3c01      	subs	r4, #1
    f9a0:	e7ee      	b.n	f980 <_Z41__static_initialization_and_destruction_0ii+0xc4>
    f9a2:	4a08      	ldr	r2, [pc, #32]	; (f9c4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f9a4:	491e      	ldr	r1, [pc, #120]	; (fa20 <_Z41__static_initialization_and_destruction_0ii+0x164>)
    f9a6:	2000      	movs	r0, #0
    f9a8:	4b08      	ldr	r3, [pc, #32]	; (f9cc <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f9aa:	4798      	blx	r3
}
    f9ac:	bf00      	nop
    f9ae:	3708      	adds	r7, #8
    f9b0:	46bd      	mov	sp, r7
    f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9b6:	bf00      	nop
    f9b8:	2000926c 	.word	0x2000926c
    f9bc:	20008db0 	.word	0x20008db0
    f9c0:	0000cd2d 	.word	0x0000cd2d
    f9c4:	20000000 	.word	0x20000000
    f9c8:	0000cd65 	.word	0x0000cd65
    f9cc:	00010a09 	.word	0x00010a09
    f9d0:	20009300 	.word	0x20009300
    f9d4:	20008dd0 	.word	0x20008dd0
    f9d8:	20009424 	.word	0x20009424
    f9dc:	20008df0 	.word	0x20008df0
    f9e0:	20009320 	.word	0x20009320
    f9e4:	20008e10 	.word	0x20008e10
    f9e8:	200093e4 	.word	0x200093e4
    f9ec:	20008e30 	.word	0x20008e30
    f9f0:	20009404 	.word	0x20009404
    f9f4:	20008e50 	.word	0x20008e50
    f9f8:	200092dc 	.word	0x200092dc
    f9fc:	20008e70 	.word	0x20008e70
    fa00:	2000937c 	.word	0x2000937c
    fa04:	20008e90 	.word	0x20008e90
    fa08:	20009340 	.word	0x20009340
    fa0c:	20008eb4 	.word	0x20008eb4
    fa10:	0000fa39 	.word	0x0000fa39
    fa14:	0000fa55 	.word	0x0000fa55
    fa18:	20008ec8 	.word	0x20008ec8
    fa1c:	0000fd4b 	.word	0x0000fd4b
    fa20:	0000f891 	.word	0x0000f891

0000fa24 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
    fa24:	b580      	push	{r7, lr}
    fa26:	af00      	add	r7, sp, #0
    fa28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fa2c:	2001      	movs	r0, #1
    fa2e:	4b01      	ldr	r3, [pc, #4]	; (fa34 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
    fa30:	4798      	blx	r3
    fa32:	bd80      	pop	{r7, pc}
    fa34:	0000f8bd 	.word	0x0000f8bd

0000fa38 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    fa38:	b480      	push	{r7}
    fa3a:	b083      	sub	sp, #12
    fa3c:	af00      	add	r7, sp, #0
    fa3e:	6078      	str	r0, [r7, #4]
    fa40:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    fa42:	687b      	ldr	r3, [r7, #4]
    fa44:	683a      	ldr	r2, [r7, #0]
    fa46:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    fa48:	687b      	ldr	r3, [r7, #4]
    fa4a:	4618      	mov	r0, r3
    fa4c:	370c      	adds	r7, #12
    fa4e:	46bd      	mov	sp, r7
    fa50:	bc80      	pop	{r7}
    fa52:	4770      	bx	lr

0000fa54 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    fa54:	b480      	push	{r7}
    fa56:	b083      	sub	sp, #12
    fa58:	af00      	add	r7, sp, #0
    fa5a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    fa5c:	687b      	ldr	r3, [r7, #4]
    fa5e:	4618      	mov	r0, r3
    fa60:	370c      	adds	r7, #12
    fa62:	46bd      	mov	sp, r7
    fa64:	bc80      	pop	{r7}
    fa66:	4770      	bx	lr

0000fa68 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    fa68:	b580      	push	{r7, lr}
    fa6a:	b084      	sub	sp, #16
    fa6c:	af00      	add	r7, sp, #0
    fa6e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    fa70:	687b      	ldr	r3, [r7, #4]
    fa72:	4a14      	ldr	r2, [pc, #80]	; (fac4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    fa74:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    fa76:	687b      	ldr	r3, [r7, #4]
    fa78:	4a12      	ldr	r2, [pc, #72]	; (fac4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    fa7a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    fa7c:	687b      	ldr	r3, [r7, #4]
    fa7e:	691a      	ldr	r2, [r3, #16]
    fa80:	687b      	ldr	r3, [r7, #4]
    fa82:	330c      	adds	r3, #12
    fa84:	4619      	mov	r1, r3
    fa86:	4610      	mov	r0, r2
    fa88:	4b0f      	ldr	r3, [pc, #60]	; (fac8 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    fa8a:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fa8c:	687b      	ldr	r3, [r7, #4]
    fa8e:	691b      	ldr	r3, [r3, #16]
    fa90:	4618      	mov	r0, r3
    fa92:	4b0e      	ldr	r3, [pc, #56]	; (facc <_ZN14I2C_Sync_Class4InitEv+0x64>)
    fa94:	4798      	blx	r3
    fa96:	4603      	mov	r3, r0
    fa98:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    fa9a:	7bfb      	ldrb	r3, [r7, #15]
    fa9c:	2b00      	cmp	r3, #0
    fa9e:	bf0c      	ite	eq
    faa0:	2301      	moveq	r3, #1
    faa2:	2300      	movne	r3, #0
    faa4:	b2da      	uxtb	r2, r3
    faa6:	687b      	ldr	r3, [r7, #4]
    faa8:	725a      	strb	r2, [r3, #9]
	i2c_initiated=isOK;
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	7a5b      	ldrb	r3, [r3, #9]
    faae:	b2da      	uxtb	r2, r3
    fab0:	687b      	ldr	r3, [r7, #4]
    fab2:	721a      	strb	r2, [r3, #8]
	return isOK;
    fab4:	687b      	ldr	r3, [r7, #4]
    fab6:	7a5b      	ldrb	r3, [r3, #9]
    fab8:	b2db      	uxtb	r3, r3
	
}
    faba:	4618      	mov	r0, r3
    fabc:	3710      	adds	r7, #16
    fabe:	46bd      	mov	sp, r7
    fac0:	bd80      	pop	{r7, pc}
    fac2:	bf00      	nop
    fac4:	20008fa8 	.word	0x20008fa8
    fac8:	000021cb 	.word	0x000021cb
    facc:	00002171 	.word	0x00002171

0000fad0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    fad0:	b580      	push	{r7, lr}
    fad2:	b082      	sub	sp, #8
    fad4:	af00      	add	r7, sp, #0
    fad6:	6078      	str	r0, [r7, #4]
    fad8:	460b      	mov	r3, r1
    fada:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	691b      	ldr	r3, [r3, #16]
    fae0:	78fa      	ldrb	r2, [r7, #3]
    fae2:	b211      	sxth	r1, r2
    fae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fae8:	4618      	mov	r0, r3
    faea:	4b03      	ldr	r3, [pc, #12]	; (faf8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    faec:	4798      	blx	r3
    faee:	4603      	mov	r3, r0
}
    faf0:	4618      	mov	r0, r3
    faf2:	3708      	adds	r7, #8
    faf4:	46bd      	mov	sp, r7
    faf6:	bd80      	pop	{r7, pc}
    faf8:	00002191 	.word	0x00002191

0000fafc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    fafc:	b580      	push	{r7, lr}
    fafe:	b086      	sub	sp, #24
    fb00:	af00      	add	r7, sp, #0
    fb02:	60f8      	str	r0, [r7, #12]
    fb04:	60b9      	str	r1, [r7, #8]
    fb06:	4613      	mov	r3, r2
    fb08:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    fb0a:	68fb      	ldr	r3, [r7, #12]
    fb0c:	68db      	ldr	r3, [r3, #12]
    fb0e:	88fa      	ldrh	r2, [r7, #6]
    fb10:	68b9      	ldr	r1, [r7, #8]
    fb12:	4618      	mov	r0, r3
    fb14:	4b03      	ldr	r3, [pc, #12]	; (fb24 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    fb16:	4798      	blx	r3
    fb18:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    fb1a:	697b      	ldr	r3, [r7, #20]
}
    fb1c:	4618      	mov	r0, r3
    fb1e:	3718      	adds	r7, #24
    fb20:	46bd      	mov	sp, r7
    fb22:	bd80      	pop	{r7, pc}
    fb24:	00010969 	.word	0x00010969

0000fb28 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    fb28:	b580      	push	{r7, lr}
    fb2a:	b086      	sub	sp, #24
    fb2c:	af00      	add	r7, sp, #0
    fb2e:	60f8      	str	r0, [r7, #12]
    fb30:	60b9      	str	r1, [r7, #8]
    fb32:	4613      	mov	r3, r2
    fb34:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    fb36:	68fb      	ldr	r3, [r7, #12]
    fb38:	68db      	ldr	r3, [r3, #12]
    fb3a:	88fa      	ldrh	r2, [r7, #6]
    fb3c:	68b9      	ldr	r1, [r7, #8]
    fb3e:	4618      	mov	r0, r3
    fb40:	4b03      	ldr	r3, [pc, #12]	; (fb50 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    fb42:	4798      	blx	r3
    fb44:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    fb46:	697b      	ldr	r3, [r7, #20]
}
    fb48:	4618      	mov	r0, r3
    fb4a:	3718      	adds	r7, #24
    fb4c:	46bd      	mov	sp, r7
    fb4e:	bd80      	pop	{r7, pc}
    fb50:	000109b9 	.word	0x000109b9

0000fb54 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    fb54:	b480      	push	{r7}
    fb56:	b083      	sub	sp, #12
    fb58:	af00      	add	r7, sp, #0
    fb5a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    fb5c:	687b      	ldr	r3, [r7, #4]
    fb5e:	4618      	mov	r0, r3
    fb60:	370c      	adds	r7, #12
    fb62:	46bd      	mov	sp, r7
    fb64:	bc80      	pop	{r7}
    fb66:	4770      	bx	lr

0000fb68 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    fb68:	b480      	push	{r7}
    fb6a:	b083      	sub	sp, #12
    fb6c:	af00      	add	r7, sp, #0
    fb6e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    fb70:	687b      	ldr	r3, [r7, #4]
    fb72:	4618      	mov	r0, r3
    fb74:	370c      	adds	r7, #12
    fb76:	46bd      	mov	sp, r7
    fb78:	bc80      	pop	{r7}
    fb7a:	4770      	bx	lr

0000fb7c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
    fb7c:	b480      	push	{r7}
    fb7e:	b085      	sub	sp, #20
    fb80:	af00      	add	r7, sp, #0
    fb82:	6078      	str	r0, [r7, #4]
    fb84:	460b      	mov	r3, r1
    fb86:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
    fb88:	2300      	movs	r3, #0
    fb8a:	73fb      	strb	r3, [r7, #15]
    fb8c:	7bfb      	ldrb	r3, [r7, #15]
    fb8e:	2b01      	cmp	r3, #1
    fb90:	dc13      	bgt.n	fbba <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
    fb92:	7bfb      	ldrb	r3, [r7, #15]
    fb94:	78f9      	ldrb	r1, [r7, #3]
    fb96:	7bfa      	ldrb	r2, [r7, #15]
    fb98:	2080      	movs	r0, #128	; 0x80
    fb9a:	fa40 f202 	asr.w	r2, r0, r2
    fb9e:	400a      	ands	r2, r1
    fba0:	2a00      	cmp	r2, #0
    fba2:	bfcc      	ite	gt
    fba4:	2201      	movgt	r2, #1
    fba6:	2200      	movle	r2, #0
    fba8:	b2d1      	uxtb	r1, r2
    fbaa:	687a      	ldr	r2, [r7, #4]
    fbac:	4413      	add	r3, r2
    fbae:	460a      	mov	r2, r1
    fbb0:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
    fbb2:	7bfb      	ldrb	r3, [r7, #15]
    fbb4:	3301      	adds	r3, #1
    fbb6:	73fb      	strb	r3, [r7, #15]
    fbb8:	e7e8      	b.n	fb8c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
    fbba:	bf00      	nop
    fbbc:	3714      	adds	r7, #20
    fbbe:	46bd      	mov	sp, r7
    fbc0:	bc80      	pop	{r7}
    fbc2:	4770      	bx	lr

0000fbc4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
    fbc4:	b480      	push	{r7}
    fbc6:	b085      	sub	sp, #20
    fbc8:	af00      	add	r7, sp, #0
    fbca:	6078      	str	r0, [r7, #4]
    fbcc:	460b      	mov	r3, r1
    fbce:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
    fbd0:	2300      	movs	r3, #0
    fbd2:	73fb      	strb	r3, [r7, #15]
    fbd4:	7bfb      	ldrb	r3, [r7, #15]
    fbd6:	2b02      	cmp	r3, #2
    fbd8:	dc15      	bgt.n	fc06 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
    fbda:	7bfb      	ldrb	r3, [r7, #15]
    fbdc:	f1c3 0302 	rsb	r3, r3, #2
    fbe0:	78f9      	ldrb	r1, [r7, #3]
    fbe2:	7bfa      	ldrb	r2, [r7, #15]
    fbe4:	2020      	movs	r0, #32
    fbe6:	fa40 f202 	asr.w	r2, r0, r2
    fbea:	400a      	ands	r2, r1
    fbec:	2a00      	cmp	r2, #0
    fbee:	bfcc      	ite	gt
    fbf0:	2201      	movgt	r2, #1
    fbf2:	2200      	movle	r2, #0
    fbf4:	b2d1      	uxtb	r1, r2
    fbf6:	687a      	ldr	r2, [r7, #4]
    fbf8:	4413      	add	r3, r2
    fbfa:	460a      	mov	r2, r1
    fbfc:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
    fbfe:	7bfb      	ldrb	r3, [r7, #15]
    fc00:	3301      	adds	r3, #1
    fc02:	73fb      	strb	r3, [r7, #15]
    fc04:	e7e6      	b.n	fbd4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
    fc06:	bf00      	nop
    fc08:	3714      	adds	r7, #20
    fc0a:	46bd      	mov	sp, r7
    fc0c:	bc80      	pop	{r7}
    fc0e:	4770      	bx	lr

0000fc10 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
    fc10:	b580      	push	{r7, lr}
    fc12:	b084      	sub	sp, #16
    fc14:	af00      	add	r7, sp, #0
    fc16:	60f8      	str	r0, [r7, #12]
    fc18:	60b9      	str	r1, [r7, #8]
    fc1a:	4613      	mov	r3, r2
    fc1c:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
    fc1e:	79fb      	ldrb	r3, [r7, #7]
    fc20:	4619      	mov	r1, r3
    fc22:	68b8      	ldr	r0, [r7, #8]
    fc24:	4b0d      	ldr	r3, [pc, #52]	; (fc5c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
    fc26:	4798      	blx	r3
	FillLimitSwitch(v);
    fc28:	79fb      	ldrb	r3, [r7, #7]
    fc2a:	4619      	mov	r1, r3
    fc2c:	68b8      	ldr	r0, [r7, #8]
    fc2e:	4b0c      	ldr	r3, [pc, #48]	; (fc60 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
    fc30:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
    fc32:	79fb      	ldrb	r3, [r7, #7]
    fc34:	f003 0301 	and.w	r3, r3, #1
    fc38:	2b00      	cmp	r3, #0
    fc3a:	bfcc      	ite	gt
    fc3c:	2301      	movgt	r3, #1
    fc3e:	2300      	movle	r3, #0
    fc40:	b2da      	uxtb	r2, r3
    fc42:	68bb      	ldr	r3, [r7, #8]
    fc44:	765a      	strb	r2, [r3, #25]
	return controlStatus;
    fc46:	68fa      	ldr	r2, [r7, #12]
    fc48:	68bb      	ldr	r3, [r7, #8]
    fc4a:	3314      	adds	r3, #20
    fc4c:	6819      	ldr	r1, [r3, #0]
    fc4e:	6011      	str	r1, [r2, #0]
    fc50:	889b      	ldrh	r3, [r3, #4]
    fc52:	8093      	strh	r3, [r2, #4]
}
    fc54:	68f8      	ldr	r0, [r7, #12]
    fc56:	3710      	adds	r7, #16
    fc58:	46bd      	mov	sp, r7
    fc5a:	bd80      	pop	{r7, pc}
    fc5c:	0000fb7d 	.word	0x0000fb7d
    fc60:	0000fbc5 	.word	0x0000fbc5

0000fc64 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
    fc64:	b480      	push	{r7}
    fc66:	b085      	sub	sp, #20
    fc68:	af00      	add	r7, sp, #0
    fc6a:	60f8      	str	r0, [r7, #12]
    fc6c:	60b9      	str	r1, [r7, #8]
    fc6e:	4613      	mov	r3, r2
    fc70:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
    fc72:	68bb      	ldr	r3, [r7, #8]
    fc74:	7d5b      	ldrb	r3, [r3, #21]
    fc76:	f083 0301 	eor.w	r3, r3, #1
    fc7a:	b2db      	uxtb	r3, r3
    fc7c:	f003 0301 	and.w	r3, r3, #1
    fc80:	2b00      	cmp	r3, #0
    fc82:	d004      	beq.n	fc8e <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
    fc84:	68bb      	ldr	r3, [r7, #8]
    fc86:	7d1a      	ldrb	r2, [r3, #20]
    fc88:	68bb      	ldr	r3, [r7, #8]
    fc8a:	769a      	strb	r2, [r3, #26]
    fc8c:	e009      	b.n	fca2 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
    fc8e:	79fb      	ldrb	r3, [r7, #7]
    fc90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fc94:	2b00      	cmp	r3, #0
    fc96:	bfcc      	ite	gt
    fc98:	2301      	movgt	r3, #1
    fc9a:	2300      	movle	r3, #0
    fc9c:	b2da      	uxtb	r2, r3
    fc9e:	68bb      	ldr	r3, [r7, #8]
    fca0:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
    fca2:	79fb      	ldrb	r3, [r7, #7]
    fca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fca8:	2b00      	cmp	r3, #0
    fcaa:	bfcc      	ite	gt
    fcac:	2301      	movgt	r3, #1
    fcae:	2300      	movle	r3, #0
    fcb0:	b2da      	uxtb	r2, r3
    fcb2:	68bb      	ldr	r3, [r7, #8]
    fcb4:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
    fcb6:	79fb      	ldrb	r3, [r7, #7]
    fcb8:	f003 0320 	and.w	r3, r3, #32
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	bfcc      	ite	gt
    fcc0:	2301      	movgt	r3, #1
    fcc2:	2300      	movle	r3, #0
    fcc4:	b2da      	uxtb	r2, r3
    fcc6:	68bb      	ldr	r3, [r7, #8]
    fcc8:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
    fcca:	79fb      	ldrb	r3, [r7, #7]
    fccc:	f003 0310 	and.w	r3, r3, #16
    fcd0:	2b00      	cmp	r3, #0
    fcd2:	bfcc      	ite	gt
    fcd4:	2301      	movgt	r3, #1
    fcd6:	2300      	movle	r3, #0
    fcd8:	b2da      	uxtb	r2, r3
    fcda:	68bb      	ldr	r3, [r7, #8]
    fcdc:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
    fcde:	79fb      	ldrb	r3, [r7, #7]
    fce0:	f003 0308 	and.w	r3, r3, #8
    fce4:	2b00      	cmp	r3, #0
    fce6:	bfcc      	ite	gt
    fce8:	2301      	movgt	r3, #1
    fcea:	2300      	movle	r3, #0
    fcec:	b2da      	uxtb	r2, r3
    fcee:	68bb      	ldr	r3, [r7, #8]
    fcf0:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
    fcf2:	79fb      	ldrb	r3, [r7, #7]
    fcf4:	f003 0304 	and.w	r3, r3, #4
    fcf8:	2b00      	cmp	r3, #0
    fcfa:	bfcc      	ite	gt
    fcfc:	2301      	movgt	r3, #1
    fcfe:	2300      	movle	r3, #0
    fd00:	b2da      	uxtb	r2, r3
    fd02:	68bb      	ldr	r3, [r7, #8]
    fd04:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
    fd06:	79fb      	ldrb	r3, [r7, #7]
    fd08:	f003 0302 	and.w	r3, r3, #2
    fd0c:	2b00      	cmp	r3, #0
    fd0e:	bfcc      	ite	gt
    fd10:	2301      	movgt	r3, #1
    fd12:	2300      	movle	r3, #0
    fd14:	b2da      	uxtb	r2, r3
    fd16:	68bb      	ldr	r3, [r7, #8]
    fd18:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
    fd1c:	79fb      	ldrb	r3, [r7, #7]
    fd1e:	f003 0301 	and.w	r3, r3, #1
    fd22:	2b00      	cmp	r3, #0
    fd24:	bfcc      	ite	gt
    fd26:	2301      	movgt	r3, #1
    fd28:	2300      	movle	r3, #0
    fd2a:	b2da      	uxtb	r2, r3
    fd2c:	68bb      	ldr	r3, [r7, #8]
    fd2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
    fd32:	68fa      	ldr	r2, [r7, #12]
    fd34:	68bb      	ldr	r3, [r7, #8]
    fd36:	331a      	adds	r3, #26
    fd38:	6819      	ldr	r1, [r3, #0]
    fd3a:	685b      	ldr	r3, [r3, #4]
    fd3c:	6011      	str	r1, [r2, #0]
    fd3e:	6053      	str	r3, [r2, #4]
    fd40:	68f8      	ldr	r0, [r7, #12]
    fd42:	3714      	adds	r7, #20
    fd44:	46bd      	mov	sp, r7
    fd46:	bc80      	pop	{r7}
    fd48:	4770      	bx	lr

0000fd4a <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    fd4a:	b480      	push	{r7}
    fd4c:	b083      	sub	sp, #12
    fd4e:	af00      	add	r7, sp, #0
    fd50:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    fd52:	687b      	ldr	r3, [r7, #4]
    fd54:	4618      	mov	r0, r3
    fd56:	370c      	adds	r7, #12
    fd58:	46bd      	mov	sp, r7
    fd5a:	bc80      	pop	{r7}
    fd5c:	4770      	bx	lr

0000fd5e <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    fd5e:	b480      	push	{r7}
    fd60:	b083      	sub	sp, #12
    fd62:	af00      	add	r7, sp, #0
    fd64:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    fd66:	687b      	ldr	r3, [r7, #4]
    fd68:	4618      	mov	r0, r3
    fd6a:	370c      	adds	r7, #12
    fd6c:	46bd      	mov	sp, r7
    fd6e:	bc80      	pop	{r7}
    fd70:	4770      	bx	lr

0000fd72 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    fd72:	b480      	push	{r7}
    fd74:	b085      	sub	sp, #20
    fd76:	af00      	add	r7, sp, #0
    fd78:	60f8      	str	r0, [r7, #12]
    fd7a:	460b      	mov	r3, r1
    fd7c:	607a      	str	r2, [r7, #4]
    fd7e:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    fd80:	687b      	ldr	r3, [r7, #4]
    fd82:	681a      	ldr	r2, [r3, #0]
    fd84:	68fb      	ldr	r3, [r7, #12]
    fd86:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    fd88:	687b      	ldr	r3, [r7, #4]
    fd8a:	685a      	ldr	r2, [r3, #4]
    fd8c:	68fb      	ldr	r3, [r7, #12]
    fd8e:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    fd90:	68fb      	ldr	r3, [r7, #12]
    fd92:	7afa      	ldrb	r2, [r7, #11]
    fd94:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    fd96:	68fb      	ldr	r3, [r7, #12]
    fd98:	687a      	ldr	r2, [r7, #4]
    fd9a:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    fd9c:	68fb      	ldr	r3, [r7, #12]
    fd9e:	68db      	ldr	r3, [r3, #12]
    fda0:	7a5b      	ldrb	r3, [r3, #9]
    fda2:	b2da      	uxtb	r2, r3
    fda4:	68fb      	ldr	r3, [r7, #12]
    fda6:	719a      	strb	r2, [r3, #6]
	return isOK;
    fda8:	68fb      	ldr	r3, [r7, #12]
    fdaa:	799b      	ldrb	r3, [r3, #6]
    fdac:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    fdae:	4618      	mov	r0, r3
    fdb0:	3714      	adds	r7, #20
    fdb2:	46bd      	mov	sp, r7
    fdb4:	bc80      	pop	{r7}
    fdb6:	4770      	bx	lr

0000fdb8 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    fdb8:	b480      	push	{r7}
    fdba:	b083      	sub	sp, #12
    fdbc:	af00      	add	r7, sp, #0
    fdbe:	6078      	str	r0, [r7, #4]
    fdc0:	460b      	mov	r3, r1
    fdc2:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    fdc4:	78fb      	ldrb	r3, [r7, #3]
    fdc6:	f003 0307 	and.w	r3, r3, #7
    fdca:	b2db      	uxtb	r3, r3
}
    fdcc:	4618      	mov	r0, r3
    fdce:	370c      	adds	r7, #12
    fdd0:	46bd      	mov	sp, r7
    fdd2:	bc80      	pop	{r7}
    fdd4:	4770      	bx	lr
	...

0000fdd8 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    fdd8:	b580      	push	{r7, lr}
    fdda:	b082      	sub	sp, #8
    fddc:	af00      	add	r7, sp, #0
    fdde:	6078      	str	r0, [r7, #4]
    fde0:	460b      	mov	r3, r1
    fde2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	68da      	ldr	r2, [r3, #12]
    fde8:	687b      	ldr	r3, [r7, #4]
    fdea:	7a1b      	ldrb	r3, [r3, #8]
    fdec:	4619      	mov	r1, r3
    fdee:	4610      	mov	r0, r2
    fdf0:	4b0a      	ldr	r3, [pc, #40]	; (fe1c <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    fdf2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    fdf4:	687b      	ldr	r3, [r7, #4]
    fdf6:	68db      	ldr	r3, [r3, #12]
    fdf8:	1cf9      	adds	r1, r7, #3
    fdfa:	2201      	movs	r2, #1
    fdfc:	4618      	mov	r0, r3
    fdfe:	4b08      	ldr	r3, [pc, #32]	; (fe20 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    fe00:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    fe02:	687b      	ldr	r3, [r7, #4]
    fe04:	68db      	ldr	r3, [r3, #12]
    fe06:	6879      	ldr	r1, [r7, #4]
    fe08:	2201      	movs	r2, #1
    fe0a:	4618      	mov	r0, r3
    fe0c:	4b05      	ldr	r3, [pc, #20]	; (fe24 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    fe0e:	4798      	blx	r3

	return registerValue;
    fe10:	687b      	ldr	r3, [r7, #4]
    fe12:	781b      	ldrb	r3, [r3, #0]
}
    fe14:	4618      	mov	r0, r3
    fe16:	3708      	adds	r7, #8
    fe18:	46bd      	mov	sp, r7
    fe1a:	bd80      	pop	{r7, pc}
    fe1c:	0000fad1 	.word	0x0000fad1
    fe20:	0000fafd 	.word	0x0000fafd
    fe24:	0000fb29 	.word	0x0000fb29

0000fe28 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    fe28:	b580      	push	{r7, lr}
    fe2a:	b084      	sub	sp, #16
    fe2c:	af00      	add	r7, sp, #0
    fe2e:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    fe30:	687b      	ldr	r3, [r7, #4]
    fe32:	68da      	ldr	r2, [r3, #12]
    fe34:	687b      	ldr	r3, [r7, #4]
    fe36:	7a1b      	ldrb	r3, [r3, #8]
    fe38:	4619      	mov	r1, r3
    fe3a:	4610      	mov	r0, r2
    fe3c:	4b06      	ldr	r3, [pc, #24]	; (fe58 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    fe3e:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    fe40:	2109      	movs	r1, #9
    fe42:	6878      	ldr	r0, [r7, #4]
    fe44:	4b05      	ldr	r3, [pc, #20]	; (fe5c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    fe46:	4798      	blx	r3
    fe48:	4603      	mov	r3, r0
    fe4a:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    fe4c:	7bfb      	ldrb	r3, [r7, #15]
}
    fe4e:	4618      	mov	r0, r3
    fe50:	3710      	adds	r7, #16
    fe52:	46bd      	mov	sp, r7
    fe54:	bd80      	pop	{r7, pc}
    fe56:	bf00      	nop
    fe58:	0000fad1 	.word	0x0000fad1
    fe5c:	0000fdd9 	.word	0x0000fdd9

0000fe60 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    fe60:	b580      	push	{r7, lr}
    fe62:	b084      	sub	sp, #16
    fe64:	af00      	add	r7, sp, #0
    fe66:	6078      	str	r0, [r7, #4]
    fe68:	460b      	mov	r3, r1
    fe6a:	70fb      	strb	r3, [r7, #3]
    fe6c:	4613      	mov	r3, r2
    fe6e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    fe70:	687b      	ldr	r3, [r7, #4]
    fe72:	68da      	ldr	r2, [r3, #12]
    fe74:	687b      	ldr	r3, [r7, #4]
    fe76:	7a1b      	ldrb	r3, [r3, #8]
    fe78:	4619      	mov	r1, r3
    fe7a:	4610      	mov	r0, r2
    fe7c:	4b09      	ldr	r3, [pc, #36]	; (fea4 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    fe7e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    fe80:	78fb      	ldrb	r3, [r7, #3]
    fe82:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    fe84:	78bb      	ldrb	r3, [r7, #2]
    fe86:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    fe88:	687b      	ldr	r3, [r7, #4]
    fe8a:	68db      	ldr	r3, [r3, #12]
    fe8c:	f107 010c 	add.w	r1, r7, #12
    fe90:	2202      	movs	r2, #2
    fe92:	4618      	mov	r0, r3
    fe94:	4b04      	ldr	r3, [pc, #16]	; (fea8 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    fe96:	4798      	blx	r3
    fe98:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    fe9a:	4618      	mov	r0, r3
    fe9c:	3710      	adds	r7, #16
    fe9e:	46bd      	mov	sp, r7
    fea0:	bd80      	pop	{r7, pc}
    fea2:	bf00      	nop
    fea4:	0000fad1 	.word	0x0000fad1
    fea8:	0000fafd 	.word	0x0000fafd

0000feac <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    feac:	b580      	push	{r7, lr}
    feae:	b082      	sub	sp, #8
    feb0:	af00      	add	r7, sp, #0
    feb2:	6078      	str	r0, [r7, #4]
    feb4:	460b      	mov	r3, r1
    feb6:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    feb8:	687b      	ldr	r3, [r7, #4]
    feba:	68da      	ldr	r2, [r3, #12]
    febc:	687b      	ldr	r3, [r7, #4]
    febe:	7a1b      	ldrb	r3, [r3, #8]
    fec0:	4619      	mov	r1, r3
    fec2:	4610      	mov	r0, r2
    fec4:	4b06      	ldr	r3, [pc, #24]	; (fee0 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    fec6:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    fec8:	78fb      	ldrb	r3, [r7, #3]
    feca:	461a      	mov	r2, r3
    fecc:	2109      	movs	r1, #9
    fece:	6878      	ldr	r0, [r7, #4]
    fed0:	4b04      	ldr	r3, [pc, #16]	; (fee4 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    fed2:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    fed4:	78fb      	ldrb	r3, [r7, #3]
}
    fed6:	4618      	mov	r0, r3
    fed8:	3708      	adds	r7, #8
    feda:	46bd      	mov	sp, r7
    fedc:	bd80      	pop	{r7, pc}
    fede:	bf00      	nop
    fee0:	0000fad1 	.word	0x0000fad1
    fee4:	0000fe61 	.word	0x0000fe61

0000fee8 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    fee8:	b580      	push	{r7, lr}
    feea:	b084      	sub	sp, #16
    feec:	af00      	add	r7, sp, #0
    feee:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    fef0:	2300      	movs	r3, #0
    fef2:	73fb      	strb	r3, [r7, #15]
    fef4:	7bfb      	ldrb	r3, [r7, #15]
    fef6:	2b07      	cmp	r3, #7
    fef8:	dc0f      	bgt.n	ff1a <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    fefa:	7bfb      	ldrb	r3, [r7, #15]
    fefc:	2201      	movs	r2, #1
    fefe:	4619      	mov	r1, r3
    ff00:	6878      	ldr	r0, [r7, #4]
    ff02:	4b08      	ldr	r3, [pc, #32]	; (ff24 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    ff04:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    ff06:	7bfb      	ldrb	r3, [r7, #15]
    ff08:	2201      	movs	r2, #1
    ff0a:	4619      	mov	r1, r3
    ff0c:	6878      	ldr	r0, [r7, #4]
    ff0e:	4b06      	ldr	r3, [pc, #24]	; (ff28 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    ff10:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    ff12:	7bfb      	ldrb	r3, [r7, #15]
    ff14:	3301      	adds	r3, #1
    ff16:	73fb      	strb	r3, [r7, #15]
    ff18:	e7ec      	b.n	fef4 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    ff1a:	bf00      	nop
    ff1c:	3710      	adds	r7, #16
    ff1e:	46bd      	mov	sp, r7
    ff20:	bd80      	pop	{r7, pc}
    ff22:	bf00      	nop
    ff24:	00010061 	.word	0x00010061
    ff28:	00010099 	.word	0x00010099

0000ff2c <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    ff2c:	b580      	push	{r7, lr}
    ff2e:	b084      	sub	sp, #16
    ff30:	af00      	add	r7, sp, #0
    ff32:	6078      	str	r0, [r7, #4]
    ff34:	460b      	mov	r3, r1
    ff36:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    ff38:	78fb      	ldrb	r3, [r7, #3]
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	dd23      	ble.n	ff86 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    ff3e:	2300      	movs	r3, #0
    ff40:	73fb      	strb	r3, [r7, #15]
    ff42:	7bfb      	ldrb	r3, [r7, #15]
    ff44:	2b07      	cmp	r3, #7
    ff46:	dc21      	bgt.n	ff8c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    ff48:	78fa      	ldrb	r2, [r7, #3]
    ff4a:	7bfb      	ldrb	r3, [r7, #15]
    ff4c:	fa42 f303 	asr.w	r3, r2, r3
    ff50:	f003 0301 	and.w	r3, r3, #1
    ff54:	2b00      	cmp	r3, #0
    ff56:	d00c      	beq.n	ff72 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    ff58:	7bfb      	ldrb	r3, [r7, #15]
    ff5a:	2201      	movs	r2, #1
    ff5c:	4619      	mov	r1, r3
    ff5e:	6878      	ldr	r0, [r7, #4]
    ff60:	4b0c      	ldr	r3, [pc, #48]	; (ff94 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    ff62:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    ff64:	7bfb      	ldrb	r3, [r7, #15]
    ff66:	2201      	movs	r2, #1
    ff68:	4619      	mov	r1, r3
    ff6a:	6878      	ldr	r0, [r7, #4]
    ff6c:	4b0a      	ldr	r3, [pc, #40]	; (ff98 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    ff6e:	4798      	blx	r3
    ff70:	e005      	b.n	ff7e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    ff72:	7bfb      	ldrb	r3, [r7, #15]
    ff74:	2200      	movs	r2, #0
    ff76:	4619      	mov	r1, r3
    ff78:	6878      	ldr	r0, [r7, #4]
    ff7a:	4b06      	ldr	r3, [pc, #24]	; (ff94 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    ff7c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    ff7e:	7bfb      	ldrb	r3, [r7, #15]
    ff80:	3301      	adds	r3, #1
    ff82:	73fb      	strb	r3, [r7, #15]
    ff84:	e7dd      	b.n	ff42 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    ff86:	6878      	ldr	r0, [r7, #4]
    ff88:	4b04      	ldr	r3, [pc, #16]	; (ff9c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    ff8a:	4798      	blx	r3
	}
	
}
    ff8c:	bf00      	nop
    ff8e:	3710      	adds	r7, #16
    ff90:	46bd      	mov	sp, r7
    ff92:	bd80      	pop	{r7, pc}
    ff94:	00010061 	.word	0x00010061
    ff98:	00010099 	.word	0x00010099
    ff9c:	0000ffa1 	.word	0x0000ffa1

0000ffa0 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    ffa0:	b580      	push	{r7, lr}
    ffa2:	b084      	sub	sp, #16
    ffa4:	af00      	add	r7, sp, #0
    ffa6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    ffa8:	2300      	movs	r3, #0
    ffaa:	73fb      	strb	r3, [r7, #15]
    ffac:	7bfb      	ldrb	r3, [r7, #15]
    ffae:	2b07      	cmp	r3, #7
    ffb0:	dc09      	bgt.n	ffc6 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    ffb2:	7bfb      	ldrb	r3, [r7, #15]
    ffb4:	2200      	movs	r2, #0
    ffb6:	4619      	mov	r1, r3
    ffb8:	6878      	ldr	r0, [r7, #4]
    ffba:	4b05      	ldr	r3, [pc, #20]	; (ffd0 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    ffbc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    ffbe:	7bfb      	ldrb	r3, [r7, #15]
    ffc0:	3301      	adds	r3, #1
    ffc2:	73fb      	strb	r3, [r7, #15]
    ffc4:	e7f2      	b.n	ffac <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    ffc6:	bf00      	nop
    ffc8:	3710      	adds	r7, #16
    ffca:	46bd      	mov	sp, r7
    ffcc:	bd80      	pop	{r7, pc}
    ffce:	bf00      	nop
    ffd0:	00010061 	.word	0x00010061

0000ffd4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    ffd4:	b580      	push	{r7, lr}
    ffd6:	b084      	sub	sp, #16
    ffd8:	af00      	add	r7, sp, #0
    ffda:	6078      	str	r0, [r7, #4]
    ffdc:	4608      	mov	r0, r1
    ffde:	4611      	mov	r1, r2
    ffe0:	461a      	mov	r2, r3
    ffe2:	4603      	mov	r3, r0
    ffe4:	70fb      	strb	r3, [r7, #3]
    ffe6:	460b      	mov	r3, r1
    ffe8:	70bb      	strb	r3, [r7, #2]
    ffea:	4613      	mov	r3, r2
    ffec:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    ffee:	787b      	ldrb	r3, [r7, #1]
    fff0:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    fff2:	78fb      	ldrb	r3, [r7, #3]
    fff4:	4619      	mov	r1, r3
    fff6:	6878      	ldr	r0, [r7, #4]
    fff8:	4b16      	ldr	r3, [pc, #88]	; (10054 <STACK_SIZE+0x54>)
    fffa:	4798      	blx	r3
    fffc:	4603      	mov	r3, r0
    fffe:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   10000:	7bfb      	ldrb	r3, [r7, #15]
   10002:	4619      	mov	r1, r3
   10004:	6878      	ldr	r0, [r7, #4]
   10006:	4b14      	ldr	r3, [pc, #80]	; (10058 <STACK_SIZE+0x58>)
   10008:	4798      	blx	r3
   1000a:	4603      	mov	r3, r0
   1000c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   1000e:	78bb      	ldrb	r3, [r7, #2]
   10010:	2b00      	cmp	r3, #0
   10012:	d009      	beq.n	10028 <STACK_SIZE+0x28>
   10014:	7bba      	ldrb	r2, [r7, #14]
   10016:	7b7b      	ldrb	r3, [r7, #13]
   10018:	4619      	mov	r1, r3
   1001a:	2301      	movs	r3, #1
   1001c:	408b      	lsls	r3, r1
   1001e:	b2db      	uxtb	r3, r3
   10020:	4313      	orrs	r3, r2
   10022:	b2db      	uxtb	r3, r3
   10024:	73bb      	strb	r3, [r7, #14]
   10026:	e00a      	b.n	1003e <STACK_SIZE+0x3e>
   10028:	7bba      	ldrb	r2, [r7, #14]
   1002a:	7b7b      	ldrb	r3, [r7, #13]
   1002c:	4619      	mov	r1, r3
   1002e:	2301      	movs	r3, #1
   10030:	408b      	lsls	r3, r1
   10032:	b2db      	uxtb	r3, r3
   10034:	43db      	mvns	r3, r3
   10036:	b2db      	uxtb	r3, r3
   10038:	4013      	ands	r3, r2
   1003a:	b2db      	uxtb	r3, r3
   1003c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   1003e:	7bba      	ldrb	r2, [r7, #14]
   10040:	7bfb      	ldrb	r3, [r7, #15]
   10042:	4619      	mov	r1, r3
   10044:	6878      	ldr	r0, [r7, #4]
   10046:	4b05      	ldr	r3, [pc, #20]	; (1005c <STACK_SIZE+0x5c>)
   10048:	4798      	blx	r3
}
   1004a:	bf00      	nop
   1004c:	3710      	adds	r7, #16
   1004e:	46bd      	mov	sp, r7
   10050:	bd80      	pop	{r7, pc}
   10052:	bf00      	nop
   10054:	0000fdb9 	.word	0x0000fdb9
   10058:	0000fdd9 	.word	0x0000fdd9
   1005c:	0000fe61 	.word	0x0000fe61

00010060 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   10060:	b590      	push	{r4, r7, lr}
   10062:	b085      	sub	sp, #20
   10064:	af02      	add	r7, sp, #8
   10066:	6078      	str	r0, [r7, #4]
   10068:	460b      	mov	r3, r1
   1006a:	70fb      	strb	r3, [r7, #3]
   1006c:	4613      	mov	r3, r2
   1006e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   10070:	78bb      	ldrb	r3, [r7, #2]
   10072:	2b01      	cmp	r3, #1
   10074:	bf0c      	ite	eq
   10076:	2301      	moveq	r3, #1
   10078:	2300      	movne	r3, #0
   1007a:	b2db      	uxtb	r3, r3
   1007c:	461a      	mov	r2, r3
   1007e:	78f9      	ldrb	r1, [r7, #3]
   10080:	2300      	movs	r3, #0
   10082:	9300      	str	r3, [sp, #0]
   10084:	2300      	movs	r3, #0
   10086:	6878      	ldr	r0, [r7, #4]
   10088:	4c02      	ldr	r4, [pc, #8]	; (10094 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   1008a:	47a0      	blx	r4
}
   1008c:	bf00      	nop
   1008e:	370c      	adds	r7, #12
   10090:	46bd      	mov	sp, r7
   10092:	bd90      	pop	{r4, r7, pc}
   10094:	0000ffd5 	.word	0x0000ffd5

00010098 <_ZN14MCP23008_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	return	writeRegister(regAddr,gpio)==0;
}

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   10098:	b590      	push	{r4, r7, lr}
   1009a:	b085      	sub	sp, #20
   1009c:	af02      	add	r7, sp, #8
   1009e:	6078      	str	r0, [r7, #4]
   100a0:	460b      	mov	r3, r1
   100a2:	70fb      	strb	r3, [r7, #3]
   100a4:	4613      	mov	r3, r2
   100a6:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   100a8:	78ba      	ldrb	r2, [r7, #2]
   100aa:	78f9      	ldrb	r1, [r7, #3]
   100ac:	2306      	movs	r3, #6
   100ae:	9300      	str	r3, [sp, #0]
   100b0:	2306      	movs	r3, #6
   100b2:	6878      	ldr	r0, [r7, #4]
   100b4:	4c02      	ldr	r4, [pc, #8]	; (100c0 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   100b6:	47a0      	blx	r4
}
   100b8:	bf00      	nop
   100ba:	370c      	adds	r7, #12
   100bc:	46bd      	mov	sp, r7
   100be:	bd90      	pop	{r4, r7, pc}
   100c0:	0000ffd5 	.word	0x0000ffd5

000100c4 <hri_port_set_DIR_reg>:
{
   100c4:	b480      	push	{r7}
   100c6:	b085      	sub	sp, #20
   100c8:	af00      	add	r7, sp, #0
   100ca:	60f8      	str	r0, [r7, #12]
   100cc:	460b      	mov	r3, r1
   100ce:	607a      	str	r2, [r7, #4]
   100d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   100d2:	7afb      	ldrb	r3, [r7, #11]
   100d4:	68fa      	ldr	r2, [r7, #12]
   100d6:	01db      	lsls	r3, r3, #7
   100d8:	4413      	add	r3, r2
   100da:	3308      	adds	r3, #8
   100dc:	687a      	ldr	r2, [r7, #4]
   100de:	601a      	str	r2, [r3, #0]
}
   100e0:	bf00      	nop
   100e2:	3714      	adds	r7, #20
   100e4:	46bd      	mov	sp, r7
   100e6:	bc80      	pop	{r7}
   100e8:	4770      	bx	lr

000100ea <hri_port_clear_DIR_reg>:
{
   100ea:	b480      	push	{r7}
   100ec:	b085      	sub	sp, #20
   100ee:	af00      	add	r7, sp, #0
   100f0:	60f8      	str	r0, [r7, #12]
   100f2:	460b      	mov	r3, r1
   100f4:	607a      	str	r2, [r7, #4]
   100f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   100f8:	7afb      	ldrb	r3, [r7, #11]
   100fa:	68fa      	ldr	r2, [r7, #12]
   100fc:	01db      	lsls	r3, r3, #7
   100fe:	4413      	add	r3, r2
   10100:	3304      	adds	r3, #4
   10102:	687a      	ldr	r2, [r7, #4]
   10104:	601a      	str	r2, [r3, #0]
}
   10106:	bf00      	nop
   10108:	3714      	adds	r7, #20
   1010a:	46bd      	mov	sp, r7
   1010c:	bc80      	pop	{r7}
   1010e:	4770      	bx	lr

00010110 <hri_port_set_OUT_reg>:
{
   10110:	b480      	push	{r7}
   10112:	b085      	sub	sp, #20
   10114:	af00      	add	r7, sp, #0
   10116:	60f8      	str	r0, [r7, #12]
   10118:	460b      	mov	r3, r1
   1011a:	607a      	str	r2, [r7, #4]
   1011c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1011e:	7afb      	ldrb	r3, [r7, #11]
   10120:	68fa      	ldr	r2, [r7, #12]
   10122:	01db      	lsls	r3, r3, #7
   10124:	4413      	add	r3, r2
   10126:	3318      	adds	r3, #24
   10128:	687a      	ldr	r2, [r7, #4]
   1012a:	601a      	str	r2, [r3, #0]
}
   1012c:	bf00      	nop
   1012e:	3714      	adds	r7, #20
   10130:	46bd      	mov	sp, r7
   10132:	bc80      	pop	{r7}
   10134:	4770      	bx	lr

00010136 <hri_port_clear_OUT_reg>:
{
   10136:	b480      	push	{r7}
   10138:	b085      	sub	sp, #20
   1013a:	af00      	add	r7, sp, #0
   1013c:	60f8      	str	r0, [r7, #12]
   1013e:	460b      	mov	r3, r1
   10140:	607a      	str	r2, [r7, #4]
   10142:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   10144:	7afb      	ldrb	r3, [r7, #11]
   10146:	68fa      	ldr	r2, [r7, #12]
   10148:	01db      	lsls	r3, r3, #7
   1014a:	4413      	add	r3, r2
   1014c:	3314      	adds	r3, #20
   1014e:	687a      	ldr	r2, [r7, #4]
   10150:	601a      	str	r2, [r3, #0]
}
   10152:	bf00      	nop
   10154:	3714      	adds	r7, #20
   10156:	46bd      	mov	sp, r7
   10158:	bc80      	pop	{r7}
   1015a:	4770      	bx	lr

0001015c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1015c:	b480      	push	{r7}
   1015e:	b085      	sub	sp, #20
   10160:	af00      	add	r7, sp, #0
   10162:	6078      	str	r0, [r7, #4]
   10164:	4608      	mov	r0, r1
   10166:	4611      	mov	r1, r2
   10168:	461a      	mov	r2, r3
   1016a:	4603      	mov	r3, r0
   1016c:	70fb      	strb	r3, [r7, #3]
   1016e:	460b      	mov	r3, r1
   10170:	70bb      	strb	r3, [r7, #2]
   10172:	4613      	mov	r3, r2
   10174:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10176:	78fa      	ldrb	r2, [r7, #3]
   10178:	78bb      	ldrb	r3, [r7, #2]
   1017a:	6879      	ldr	r1, [r7, #4]
   1017c:	01d2      	lsls	r2, r2, #7
   1017e:	440a      	add	r2, r1
   10180:	4413      	add	r3, r2
   10182:	3330      	adds	r3, #48	; 0x30
   10184:	781b      	ldrb	r3, [r3, #0]
   10186:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   10188:	7bfb      	ldrb	r3, [r7, #15]
   1018a:	f023 030f 	bic.w	r3, r3, #15
   1018e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10190:	787b      	ldrb	r3, [r7, #1]
   10192:	f003 030f 	and.w	r3, r3, #15
   10196:	b2da      	uxtb	r2, r3
   10198:	7bfb      	ldrb	r3, [r7, #15]
   1019a:	4313      	orrs	r3, r2
   1019c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1019e:	78fa      	ldrb	r2, [r7, #3]
   101a0:	78bb      	ldrb	r3, [r7, #2]
   101a2:	6879      	ldr	r1, [r7, #4]
   101a4:	01d2      	lsls	r2, r2, #7
   101a6:	440a      	add	r2, r1
   101a8:	4413      	add	r3, r2
   101aa:	3330      	adds	r3, #48	; 0x30
   101ac:	7bfa      	ldrb	r2, [r7, #15]
   101ae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   101b0:	bf00      	nop
   101b2:	3714      	adds	r7, #20
   101b4:	46bd      	mov	sp, r7
   101b6:	bc80      	pop	{r7}
   101b8:	4770      	bx	lr

000101ba <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   101ba:	b480      	push	{r7}
   101bc:	b085      	sub	sp, #20
   101be:	af00      	add	r7, sp, #0
   101c0:	6078      	str	r0, [r7, #4]
   101c2:	4608      	mov	r0, r1
   101c4:	4611      	mov	r1, r2
   101c6:	461a      	mov	r2, r3
   101c8:	4603      	mov	r3, r0
   101ca:	70fb      	strb	r3, [r7, #3]
   101cc:	460b      	mov	r3, r1
   101ce:	70bb      	strb	r3, [r7, #2]
   101d0:	4613      	mov	r3, r2
   101d2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   101d4:	78fa      	ldrb	r2, [r7, #3]
   101d6:	78bb      	ldrb	r3, [r7, #2]
   101d8:	6879      	ldr	r1, [r7, #4]
   101da:	01d2      	lsls	r2, r2, #7
   101dc:	440a      	add	r2, r1
   101de:	4413      	add	r3, r2
   101e0:	3330      	adds	r3, #48	; 0x30
   101e2:	781b      	ldrb	r3, [r3, #0]
   101e4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   101e6:	7bfb      	ldrb	r3, [r7, #15]
   101e8:	f003 030f 	and.w	r3, r3, #15
   101ec:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   101ee:	787b      	ldrb	r3, [r7, #1]
   101f0:	011b      	lsls	r3, r3, #4
   101f2:	b2da      	uxtb	r2, r3
   101f4:	7bfb      	ldrb	r3, [r7, #15]
   101f6:	4313      	orrs	r3, r2
   101f8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   101fa:	78fa      	ldrb	r2, [r7, #3]
   101fc:	78bb      	ldrb	r3, [r7, #2]
   101fe:	6879      	ldr	r1, [r7, #4]
   10200:	01d2      	lsls	r2, r2, #7
   10202:	440a      	add	r2, r1
   10204:	4413      	add	r3, r2
   10206:	3330      	adds	r3, #48	; 0x30
   10208:	7bfa      	ldrb	r2, [r7, #15]
   1020a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1020c:	bf00      	nop
   1020e:	3714      	adds	r7, #20
   10210:	46bd      	mov	sp, r7
   10212:	bc80      	pop	{r7}
   10214:	4770      	bx	lr

00010216 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   10216:	b480      	push	{r7}
   10218:	b085      	sub	sp, #20
   1021a:	af00      	add	r7, sp, #0
   1021c:	6078      	str	r0, [r7, #4]
   1021e:	4608      	mov	r0, r1
   10220:	4611      	mov	r1, r2
   10222:	461a      	mov	r2, r3
   10224:	4603      	mov	r3, r0
   10226:	70fb      	strb	r3, [r7, #3]
   10228:	460b      	mov	r3, r1
   1022a:	70bb      	strb	r3, [r7, #2]
   1022c:	4613      	mov	r3, r2
   1022e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   10230:	78fa      	ldrb	r2, [r7, #3]
   10232:	78bb      	ldrb	r3, [r7, #2]
   10234:	6879      	ldr	r1, [r7, #4]
   10236:	01d2      	lsls	r2, r2, #7
   10238:	440a      	add	r2, r1
   1023a:	4413      	add	r3, r2
   1023c:	3340      	adds	r3, #64	; 0x40
   1023e:	781b      	ldrb	r3, [r3, #0]
   10240:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   10242:	7bfb      	ldrb	r3, [r7, #15]
   10244:	f023 0301 	bic.w	r3, r3, #1
   10248:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   1024a:	787a      	ldrb	r2, [r7, #1]
   1024c:	7bfb      	ldrb	r3, [r7, #15]
   1024e:	4313      	orrs	r3, r2
   10250:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   10252:	78fa      	ldrb	r2, [r7, #3]
   10254:	78bb      	ldrb	r3, [r7, #2]
   10256:	6879      	ldr	r1, [r7, #4]
   10258:	01d2      	lsls	r2, r2, #7
   1025a:	440a      	add	r2, r1
   1025c:	4413      	add	r3, r2
   1025e:	3340      	adds	r3, #64	; 0x40
   10260:	7bfa      	ldrb	r2, [r7, #15]
   10262:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   10264:	bf00      	nop
   10266:	3714      	adds	r7, #20
   10268:	46bd      	mov	sp, r7
   1026a:	bc80      	pop	{r7}
   1026c:	4770      	bx	lr

0001026e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1026e:	b480      	push	{r7}
   10270:	b085      	sub	sp, #20
   10272:	af00      	add	r7, sp, #0
   10274:	60f8      	str	r0, [r7, #12]
   10276:	460b      	mov	r3, r1
   10278:	607a      	str	r2, [r7, #4]
   1027a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1027c:	7afb      	ldrb	r3, [r7, #11]
   1027e:	68fa      	ldr	r2, [r7, #12]
   10280:	01db      	lsls	r3, r3, #7
   10282:	4413      	add	r3, r2
   10284:	3328      	adds	r3, #40	; 0x28
   10286:	687a      	ldr	r2, [r7, #4]
   10288:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1028a:	bf00      	nop
   1028c:	3714      	adds	r7, #20
   1028e:	46bd      	mov	sp, r7
   10290:	bc80      	pop	{r7}
   10292:	4770      	bx	lr

00010294 <_gpio_set_direction>:
{
   10294:	b580      	push	{r7, lr}
   10296:	b082      	sub	sp, #8
   10298:	af00      	add	r7, sp, #0
   1029a:	4603      	mov	r3, r0
   1029c:	6039      	str	r1, [r7, #0]
   1029e:	71fb      	strb	r3, [r7, #7]
   102a0:	4613      	mov	r3, r2
   102a2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   102a4:	79bb      	ldrb	r3, [r7, #6]
   102a6:	2b01      	cmp	r3, #1
   102a8:	d01c      	beq.n	102e4 <_gpio_set_direction+0x50>
   102aa:	2b02      	cmp	r3, #2
   102ac:	d037      	beq.n	1031e <_gpio_set_direction+0x8a>
   102ae:	2b00      	cmp	r3, #0
   102b0:	d14e      	bne.n	10350 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   102b2:	79fb      	ldrb	r3, [r7, #7]
   102b4:	683a      	ldr	r2, [r7, #0]
   102b6:	4619      	mov	r1, r3
   102b8:	482a      	ldr	r0, [pc, #168]	; (10364 <_gpio_set_direction+0xd0>)
   102ba:	4b2b      	ldr	r3, [pc, #172]	; (10368 <_gpio_set_direction+0xd4>)
   102bc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   102be:	683b      	ldr	r3, [r7, #0]
   102c0:	b29b      	uxth	r3, r3
   102c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   102c6:	79fb      	ldrb	r3, [r7, #7]
   102c8:	4619      	mov	r1, r3
   102ca:	4826      	ldr	r0, [pc, #152]	; (10364 <_gpio_set_direction+0xd0>)
   102cc:	4b27      	ldr	r3, [pc, #156]	; (1036c <_gpio_set_direction+0xd8>)
   102ce:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   102d0:	683b      	ldr	r3, [r7, #0]
   102d2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   102d4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   102d8:	79fb      	ldrb	r3, [r7, #7]
   102da:	4619      	mov	r1, r3
   102dc:	4821      	ldr	r0, [pc, #132]	; (10364 <_gpio_set_direction+0xd0>)
   102de:	4b23      	ldr	r3, [pc, #140]	; (1036c <_gpio_set_direction+0xd8>)
   102e0:	4798      	blx	r3
		break;
   102e2:	e03a      	b.n	1035a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   102e4:	79fb      	ldrb	r3, [r7, #7]
   102e6:	683a      	ldr	r2, [r7, #0]
   102e8:	4619      	mov	r1, r3
   102ea:	481e      	ldr	r0, [pc, #120]	; (10364 <_gpio_set_direction+0xd0>)
   102ec:	4b1e      	ldr	r3, [pc, #120]	; (10368 <_gpio_set_direction+0xd4>)
   102ee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   102f0:	683b      	ldr	r3, [r7, #0]
   102f2:	b29b      	uxth	r3, r3
   102f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   102f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   102fc:	79f9      	ldrb	r1, [r7, #7]
   102fe:	461a      	mov	r2, r3
   10300:	4818      	ldr	r0, [pc, #96]	; (10364 <_gpio_set_direction+0xd0>)
   10302:	4b1a      	ldr	r3, [pc, #104]	; (1036c <_gpio_set_direction+0xd8>)
   10304:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   10306:	683b      	ldr	r3, [r7, #0]
   10308:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   1030a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   10312:	79f9      	ldrb	r1, [r7, #7]
   10314:	461a      	mov	r2, r3
   10316:	4813      	ldr	r0, [pc, #76]	; (10364 <_gpio_set_direction+0xd0>)
   10318:	4b14      	ldr	r3, [pc, #80]	; (1036c <_gpio_set_direction+0xd8>)
   1031a:	4798      	blx	r3
		break;
   1031c:	e01d      	b.n	1035a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   1031e:	79fb      	ldrb	r3, [r7, #7]
   10320:	683a      	ldr	r2, [r7, #0]
   10322:	4619      	mov	r1, r3
   10324:	480f      	ldr	r0, [pc, #60]	; (10364 <_gpio_set_direction+0xd0>)
   10326:	4b12      	ldr	r3, [pc, #72]	; (10370 <_gpio_set_direction+0xdc>)
   10328:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1032a:	683b      	ldr	r3, [r7, #0]
   1032c:	b29b      	uxth	r3, r3
   1032e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10332:	79fb      	ldrb	r3, [r7, #7]
   10334:	4619      	mov	r1, r3
   10336:	480b      	ldr	r0, [pc, #44]	; (10364 <_gpio_set_direction+0xd0>)
   10338:	4b0c      	ldr	r3, [pc, #48]	; (1036c <_gpio_set_direction+0xd8>)
   1033a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1033c:	683b      	ldr	r3, [r7, #0]
   1033e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10340:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10344:	79fb      	ldrb	r3, [r7, #7]
   10346:	4619      	mov	r1, r3
   10348:	4806      	ldr	r0, [pc, #24]	; (10364 <_gpio_set_direction+0xd0>)
   1034a:	4b08      	ldr	r3, [pc, #32]	; (1036c <_gpio_set_direction+0xd8>)
   1034c:	4798      	blx	r3
		break;
   1034e:	e004      	b.n	1035a <_gpio_set_direction+0xc6>
		ASSERT(false);
   10350:	2246      	movs	r2, #70	; 0x46
   10352:	4908      	ldr	r1, [pc, #32]	; (10374 <_gpio_set_direction+0xe0>)
   10354:	2000      	movs	r0, #0
   10356:	4b08      	ldr	r3, [pc, #32]	; (10378 <_gpio_set_direction+0xe4>)
   10358:	4798      	blx	r3
}
   1035a:	bf00      	nop
   1035c:	3708      	adds	r7, #8
   1035e:	46bd      	mov	sp, r7
   10360:	bd80      	pop	{r7, pc}
   10362:	bf00      	nop
   10364:	41008000 	.word	0x41008000
   10368:	000100eb 	.word	0x000100eb
   1036c:	0001026f 	.word	0x0001026f
   10370:	000100c5 	.word	0x000100c5
   10374:	00011580 	.word	0x00011580
   10378:	0000337d 	.word	0x0000337d

0001037c <_gpio_set_level>:
{
   1037c:	b580      	push	{r7, lr}
   1037e:	b082      	sub	sp, #8
   10380:	af00      	add	r7, sp, #0
   10382:	4603      	mov	r3, r0
   10384:	6039      	str	r1, [r7, #0]
   10386:	71fb      	strb	r3, [r7, #7]
   10388:	4613      	mov	r3, r2
   1038a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1038c:	79bb      	ldrb	r3, [r7, #6]
   1038e:	2b00      	cmp	r3, #0
   10390:	d006      	beq.n	103a0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10392:	79fb      	ldrb	r3, [r7, #7]
   10394:	683a      	ldr	r2, [r7, #0]
   10396:	4619      	mov	r1, r3
   10398:	4806      	ldr	r0, [pc, #24]	; (103b4 <_gpio_set_level+0x38>)
   1039a:	4b07      	ldr	r3, [pc, #28]	; (103b8 <_gpio_set_level+0x3c>)
   1039c:	4798      	blx	r3
}
   1039e:	e005      	b.n	103ac <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   103a0:	79fb      	ldrb	r3, [r7, #7]
   103a2:	683a      	ldr	r2, [r7, #0]
   103a4:	4619      	mov	r1, r3
   103a6:	4803      	ldr	r0, [pc, #12]	; (103b4 <_gpio_set_level+0x38>)
   103a8:	4b04      	ldr	r3, [pc, #16]	; (103bc <_gpio_set_level+0x40>)
   103aa:	4798      	blx	r3
}
   103ac:	bf00      	nop
   103ae:	3708      	adds	r7, #8
   103b0:	46bd      	mov	sp, r7
   103b2:	bd80      	pop	{r7, pc}
   103b4:	41008000 	.word	0x41008000
   103b8:	00010111 	.word	0x00010111
   103bc:	00010137 	.word	0x00010137

000103c0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   103c0:	b590      	push	{r4, r7, lr}
   103c2:	b085      	sub	sp, #20
   103c4:	af00      	add	r7, sp, #0
   103c6:	6078      	str	r0, [r7, #4]
   103c8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   103ca:	687b      	ldr	r3, [r7, #4]
   103cc:	095b      	lsrs	r3, r3, #5
   103ce:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   103d0:	687b      	ldr	r3, [r7, #4]
   103d2:	b2db      	uxtb	r3, r3
   103d4:	f003 031f 	and.w	r3, r3, #31
   103d8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   103da:	683b      	ldr	r3, [r7, #0]
   103dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   103e0:	d106      	bne.n	103f0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   103e2:	7bba      	ldrb	r2, [r7, #14]
   103e4:	7bf9      	ldrb	r1, [r7, #15]
   103e6:	2300      	movs	r3, #0
   103e8:	4812      	ldr	r0, [pc, #72]	; (10434 <_gpio_set_pin_function+0x74>)
   103ea:	4c13      	ldr	r4, [pc, #76]	; (10438 <_gpio_set_pin_function+0x78>)
   103ec:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   103ee:	e01d      	b.n	1042c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   103f0:	7bba      	ldrb	r2, [r7, #14]
   103f2:	7bf9      	ldrb	r1, [r7, #15]
   103f4:	2301      	movs	r3, #1
   103f6:	480f      	ldr	r0, [pc, #60]	; (10434 <_gpio_set_pin_function+0x74>)
   103f8:	4c0f      	ldr	r4, [pc, #60]	; (10438 <_gpio_set_pin_function+0x78>)
   103fa:	47a0      	blx	r4
		if (pin & 1) {
   103fc:	7bbb      	ldrb	r3, [r7, #14]
   103fe:	f003 0301 	and.w	r3, r3, #1
   10402:	2b00      	cmp	r3, #0
   10404:	d009      	beq.n	1041a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10406:	7bbb      	ldrb	r3, [r7, #14]
   10408:	105b      	asrs	r3, r3, #1
   1040a:	b2da      	uxtb	r2, r3
   1040c:	683b      	ldr	r3, [r7, #0]
   1040e:	b2db      	uxtb	r3, r3
   10410:	7bf9      	ldrb	r1, [r7, #15]
   10412:	4808      	ldr	r0, [pc, #32]	; (10434 <_gpio_set_pin_function+0x74>)
   10414:	4c09      	ldr	r4, [pc, #36]	; (1043c <_gpio_set_pin_function+0x7c>)
   10416:	47a0      	blx	r4
}
   10418:	e008      	b.n	1042c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   1041a:	7bbb      	ldrb	r3, [r7, #14]
   1041c:	105b      	asrs	r3, r3, #1
   1041e:	b2da      	uxtb	r2, r3
   10420:	683b      	ldr	r3, [r7, #0]
   10422:	b2db      	uxtb	r3, r3
   10424:	7bf9      	ldrb	r1, [r7, #15]
   10426:	4803      	ldr	r0, [pc, #12]	; (10434 <_gpio_set_pin_function+0x74>)
   10428:	4c05      	ldr	r4, [pc, #20]	; (10440 <_gpio_set_pin_function+0x80>)
   1042a:	47a0      	blx	r4
}
   1042c:	bf00      	nop
   1042e:	3714      	adds	r7, #20
   10430:	46bd      	mov	sp, r7
   10432:	bd90      	pop	{r4, r7, pc}
   10434:	41008000 	.word	0x41008000
   10438:	00010217 	.word	0x00010217
   1043c:	000101bb 	.word	0x000101bb
   10440:	0001015d 	.word	0x0001015d

00010444 <gpio_set_pin_function>:
{
   10444:	b580      	push	{r7, lr}
   10446:	b082      	sub	sp, #8
   10448:	af00      	add	r7, sp, #0
   1044a:	6078      	str	r0, [r7, #4]
   1044c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   1044e:	6839      	ldr	r1, [r7, #0]
   10450:	6878      	ldr	r0, [r7, #4]
   10452:	4b03      	ldr	r3, [pc, #12]	; (10460 <gpio_set_pin_function+0x1c>)
   10454:	4798      	blx	r3
}
   10456:	bf00      	nop
   10458:	3708      	adds	r7, #8
   1045a:	46bd      	mov	sp, r7
   1045c:	bd80      	pop	{r7, pc}
   1045e:	bf00      	nop
   10460:	000103c1 	.word	0x000103c1

00010464 <gpio_set_pin_direction>:
{
   10464:	b580      	push	{r7, lr}
   10466:	b082      	sub	sp, #8
   10468:	af00      	add	r7, sp, #0
   1046a:	4603      	mov	r3, r0
   1046c:	460a      	mov	r2, r1
   1046e:	71fb      	strb	r3, [r7, #7]
   10470:	4613      	mov	r3, r2
   10472:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10474:	79fb      	ldrb	r3, [r7, #7]
   10476:	115b      	asrs	r3, r3, #5
   10478:	b2d8      	uxtb	r0, r3
   1047a:	79fb      	ldrb	r3, [r7, #7]
   1047c:	f003 031f 	and.w	r3, r3, #31
   10480:	2201      	movs	r2, #1
   10482:	fa02 f303 	lsl.w	r3, r2, r3
   10486:	79ba      	ldrb	r2, [r7, #6]
   10488:	4619      	mov	r1, r3
   1048a:	4b03      	ldr	r3, [pc, #12]	; (10498 <gpio_set_pin_direction+0x34>)
   1048c:	4798      	blx	r3
}
   1048e:	bf00      	nop
   10490:	3708      	adds	r7, #8
   10492:	46bd      	mov	sp, r7
   10494:	bd80      	pop	{r7, pc}
   10496:	bf00      	nop
   10498:	00010295 	.word	0x00010295

0001049c <gpio_set_pin_level>:
{
   1049c:	b580      	push	{r7, lr}
   1049e:	b082      	sub	sp, #8
   104a0:	af00      	add	r7, sp, #0
   104a2:	4603      	mov	r3, r0
   104a4:	460a      	mov	r2, r1
   104a6:	71fb      	strb	r3, [r7, #7]
   104a8:	4613      	mov	r3, r2
   104aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   104ac:	79fb      	ldrb	r3, [r7, #7]
   104ae:	115b      	asrs	r3, r3, #5
   104b0:	b2d8      	uxtb	r0, r3
   104b2:	79fb      	ldrb	r3, [r7, #7]
   104b4:	f003 031f 	and.w	r3, r3, #31
   104b8:	2201      	movs	r2, #1
   104ba:	fa02 f303 	lsl.w	r3, r2, r3
   104be:	79ba      	ldrb	r2, [r7, #6]
   104c0:	4619      	mov	r1, r3
   104c2:	4b03      	ldr	r3, [pc, #12]	; (104d0 <gpio_set_pin_level+0x34>)
   104c4:	4798      	blx	r3
}
   104c6:	bf00      	nop
   104c8:	3708      	adds	r7, #8
   104ca:	46bd      	mov	sp, r7
   104cc:	bd80      	pop	{r7, pc}
   104ce:	bf00      	nop
   104d0:	0001037d 	.word	0x0001037d

000104d4 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   104d4:	b580      	push	{r7, lr}
   104d6:	b082      	sub	sp, #8
   104d8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   104da:	2100      	movs	r1, #0
   104dc:	2008      	movs	r0, #8
   104de:	4b24      	ldr	r3, [pc, #144]	; (10570 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   104e0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   104e2:	2100      	movs	r1, #0
   104e4:	202b      	movs	r0, #43	; 0x2b
   104e6:	4b22      	ldr	r3, [pc, #136]	; (10570 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   104e8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   104ea:	2100      	movs	r1, #0
   104ec:	202a      	movs	r0, #42	; 0x2a
   104ee:	4b20      	ldr	r3, [pc, #128]	; (10570 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   104f0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   104f2:	2102      	movs	r1, #2
   104f4:	2008      	movs	r0, #8
   104f6:	4b1f      	ldr	r3, [pc, #124]	; (10574 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   104f8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   104fa:	2102      	movs	r1, #2
   104fc:	202b      	movs	r0, #43	; 0x2b
   104fe:	4b1d      	ldr	r3, [pc, #116]	; (10574 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10500:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10502:	2102      	movs	r1, #2
   10504:	202a      	movs	r0, #42	; 0x2a
   10506:	4b1b      	ldr	r3, [pc, #108]	; (10574 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   10508:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   1050a:	2101      	movs	r1, #1
   1050c:	2008      	movs	r0, #8
   1050e:	4b1a      	ldr	r3, [pc, #104]	; (10578 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10510:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10512:	2100      	movs	r1, #0
   10514:	202b      	movs	r0, #43	; 0x2b
   10516:	4b18      	ldr	r3, [pc, #96]	; (10578 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10518:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   1051a:	2100      	movs	r1, #0
   1051c:	202a      	movs	r0, #42	; 0x2a
   1051e:	4b16      	ldr	r3, [pc, #88]	; (10578 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10520:	4798      	blx	r3

	delay_us(1);
   10522:	2001      	movs	r0, #1
   10524:	4b15      	ldr	r3, [pc, #84]	; (1057c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10526:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10528:	2300      	movs	r3, #0
   1052a:	607b      	str	r3, [r7, #4]
   1052c:	687b      	ldr	r3, [r7, #4]
   1052e:	2b06      	cmp	r3, #6
   10530:	dc11      	bgt.n	10556 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   10532:	2101      	movs	r1, #1
   10534:	202a      	movs	r0, #42	; 0x2a
   10536:	4b10      	ldr	r3, [pc, #64]	; (10578 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10538:	4798      	blx	r3
		delay_us(1);
   1053a:	2001      	movs	r0, #1
   1053c:	4b0f      	ldr	r3, [pc, #60]	; (1057c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1053e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10540:	2100      	movs	r1, #0
   10542:	202a      	movs	r0, #42	; 0x2a
   10544:	4b0c      	ldr	r3, [pc, #48]	; (10578 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   10546:	4798      	blx	r3
		delay_us(1);
   10548:	2001      	movs	r0, #1
   1054a:	4b0c      	ldr	r3, [pc, #48]	; (1057c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1054c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1054e:	687b      	ldr	r3, [r7, #4]
   10550:	3301      	adds	r3, #1
   10552:	607b      	str	r3, [r7, #4]
   10554:	e7ea      	b.n	1052c <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10556:	2101      	movs	r1, #1
   10558:	202b      	movs	r0, #43	; 0x2b
   1055a:	4b07      	ldr	r3, [pc, #28]	; (10578 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1055c:	4798      	blx	r3
	delay_us(1);
   1055e:	2001      	movs	r0, #1
   10560:	4b06      	ldr	r3, [pc, #24]	; (1057c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   10562:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10564:	4b06      	ldr	r3, [pc, #24]	; (10580 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   10566:	4798      	blx	r3
}
   10568:	bf00      	nop
   1056a:	3708      	adds	r7, #8
   1056c:	46bd      	mov	sp, r7
   1056e:	bd80      	pop	{r7, pc}
   10570:	00010445 	.word	0x00010445
   10574:	00010465 	.word	0x00010465
   10578:	0001049d 	.word	0x0001049d
   1057c:	00001dcd 	.word	0x00001dcd
   10580:	00001129 	.word	0x00001129

00010584 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   10584:	b480      	push	{r7}
   10586:	b083      	sub	sp, #12
   10588:	af00      	add	r7, sp, #0
   1058a:	6078      	str	r0, [r7, #4]
   1058c:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1058e:	687b      	ldr	r3, [r7, #4]
   10590:	683a      	ldr	r2, [r7, #0]
   10592:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   10594:	687b      	ldr	r3, [r7, #4]
   10596:	4a04      	ldr	r2, [pc, #16]	; (105a8 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   10598:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   1059c:	687b      	ldr	r3, [r7, #4]
   1059e:	4618      	mov	r0, r3
   105a0:	370c      	adds	r7, #12
   105a2:	46bd      	mov	sp, r7
   105a4:	bc80      	pop	{r7}
   105a6:	4770      	bx	lr
   105a8:	001fff00 	.word	0x001fff00

000105ac <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   105ac:	b480      	push	{r7}
   105ae:	b083      	sub	sp, #12
   105b0:	af00      	add	r7, sp, #0
   105b2:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   105b4:	687b      	ldr	r3, [r7, #4]
   105b6:	4618      	mov	r0, r3
   105b8:	370c      	adds	r7, #12
   105ba:	46bd      	mov	sp, r7
   105bc:	bc80      	pop	{r7}
   105be:	4770      	bx	lr

000105c0 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   105c0:	b580      	push	{r7, lr}
   105c2:	b082      	sub	sp, #8
   105c4:	af00      	add	r7, sp, #0
   105c6:	6078      	str	r0, [r7, #4]
	xferDone=false;
   105c8:	687b      	ldr	r3, [r7, #4]
   105ca:	2200      	movs	r2, #0
   105cc:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   105ce:	6878      	ldr	r0, [r7, #4]
   105d0:	4b04      	ldr	r3, [pc, #16]	; (105e4 <_ZN13N25Q256_Class4InitEv+0x24>)
   105d2:	4798      	blx	r3
	return SelfTest();
   105d4:	6878      	ldr	r0, [r7, #4]
   105d6:	4b04      	ldr	r3, [pc, #16]	; (105e8 <_ZN13N25Q256_Class4InitEv+0x28>)
   105d8:	4798      	blx	r3
   105da:	4603      	mov	r3, r0
}
   105dc:	4618      	mov	r0, r3
   105de:	3708      	adds	r7, #8
   105e0:	46bd      	mov	sp, r7
   105e2:	bd80      	pop	{r7, pc}
   105e4:	000105ed 	.word	0x000105ed
   105e8:	00010789 	.word	0x00010789

000105ec <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   105ec:	b590      	push	{r4, r7, lr}
   105ee:	b083      	sub	sp, #12
   105f0:	af00      	add	r7, sp, #0
   105f2:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   105f4:	687b      	ldr	r3, [r7, #4]
   105f6:	685b      	ldr	r3, [r3, #4]
   105f8:	4618      	mov	r0, r3
   105fa:	4b08      	ldr	r3, [pc, #32]	; (1061c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   105fc:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   105fe:	687b      	ldr	r3, [r7, #4]
   10600:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   10602:	2300      	movs	r3, #0
   10604:	4a06      	ldr	r2, [pc, #24]	; (10620 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   10606:	4807      	ldr	r0, [pc, #28]	; (10624 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   10608:	4c07      	ldr	r4, [pc, #28]	; (10628 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   1060a:	47a0      	blx	r4
   1060c:	4602      	mov	r2, r0
   1060e:	687b      	ldr	r3, [r7, #4]
   10610:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   10614:	bf00      	nop
   10616:	370c      	adds	r7, #12
   10618:	46bd      	mov	sp, r7
   1061a:	bd90      	pop	{r4, r7, pc}
   1061c:	000022e5 	.word	0x000022e5
   10620:	000104d5 	.word	0x000104d5
   10624:	2000902c 	.word	0x2000902c
   10628:	0000b259 	.word	0x0000b259

0001062c <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   1062c:	b580      	push	{r7, lr}
   1062e:	b084      	sub	sp, #16
   10630:	af00      	add	r7, sp, #0
   10632:	6078      	str	r0, [r7, #4]
   10634:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   10636:	687b      	ldr	r3, [r7, #4]
   10638:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1063c:	685b      	ldr	r3, [r3, #4]
   1063e:	689b      	ldr	r3, [r3, #8]
   10640:	687a      	ldr	r2, [r7, #4]
   10642:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   10646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1064a:	6839      	ldr	r1, [r7, #0]
   1064c:	4798      	blx	r3
   1064e:	4603      	mov	r3, r0
   10650:	60fb      	str	r3, [r7, #12]
	return	e;
   10652:	68fb      	ldr	r3, [r7, #12]
}
   10654:	4618      	mov	r0, r3
   10656:	3710      	adds	r7, #16
   10658:	46bd      	mov	sp, r7
   1065a:	bd80      	pop	{r7, pc}

0001065c <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1065c:	b590      	push	{r4, r7, lr}
   1065e:	b087      	sub	sp, #28
   10660:	af00      	add	r7, sp, #0
   10662:	60f8      	str	r0, [r7, #12]
   10664:	60b9      	str	r1, [r7, #8]
   10666:	607a      	str	r2, [r7, #4]
   10668:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   1066a:	68fb      	ldr	r3, [r7, #12]
   1066c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   10670:	685b      	ldr	r3, [r3, #4]
   10672:	685c      	ldr	r4, [r3, #4]
   10674:	68fb      	ldr	r3, [r7, #12]
   10676:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1067a:	683b      	ldr	r3, [r7, #0]
   1067c:	687a      	ldr	r2, [r7, #4]
   1067e:	68b9      	ldr	r1, [r7, #8]
   10680:	47a0      	blx	r4
   10682:	4603      	mov	r3, r0
   10684:	617b      	str	r3, [r7, #20]
	return	w;
   10686:	697b      	ldr	r3, [r7, #20]
}
   10688:	4618      	mov	r0, r3
   1068a:	371c      	adds	r7, #28
   1068c:	46bd      	mov	sp, r7
   1068e:	bd90      	pop	{r4, r7, pc}

00010690 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   10690:	b590      	push	{r4, r7, lr}
   10692:	b087      	sub	sp, #28
   10694:	af00      	add	r7, sp, #0
   10696:	60f8      	str	r0, [r7, #12]
   10698:	60b9      	str	r1, [r7, #8]
   1069a:	607a      	str	r2, [r7, #4]
   1069c:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1069e:	68fb      	ldr	r3, [r7, #12]
   106a0:	2200      	movs	r2, #0
   106a2:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   106a4:	68fb      	ldr	r3, [r7, #12]
   106a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   106aa:	685b      	ldr	r3, [r3, #4]
   106ac:	681c      	ldr	r4, [r3, #0]
   106ae:	68fb      	ldr	r3, [r7, #12]
   106b0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   106b4:	683b      	ldr	r3, [r7, #0]
   106b6:	687a      	ldr	r2, [r7, #4]
   106b8:	68b9      	ldr	r1, [r7, #8]
   106ba:	47a0      	blx	r4
   106bc:	4603      	mov	r3, r0
   106be:	617b      	str	r3, [r7, #20]
	return	r;
   106c0:	697b      	ldr	r3, [r7, #20]
}
   106c2:	4618      	mov	r0, r3
   106c4:	371c      	adds	r7, #28
   106c6:	46bd      	mov	sp, r7
   106c8:	bd90      	pop	{r4, r7, pc}
	...

000106cc <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   106cc:	b580      	push	{r7, lr}
   106ce:	b082      	sub	sp, #8
   106d0:	af00      	add	r7, sp, #0
   106d2:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   106d4:	687a      	ldr	r2, [r7, #4]
   106d6:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   106da:	f043 0310 	orr.w	r3, r3, #16
   106de:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   106e2:	687a      	ldr	r2, [r7, #4]
   106e4:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   106e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   106ec:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   106f0:	687a      	ldr	r2, [r7, #4]
   106f2:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   106f6:	f36f 1305 	bfc	r3, #4, #2
   106fa:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   106fe:	687b      	ldr	r3, [r7, #4]
   10700:	2205      	movs	r2, #5
   10702:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   10706:	687b      	ldr	r3, [r7, #4]
   10708:	2201      	movs	r2, #1
   1070a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1070e:	687b      	ldr	r3, [r7, #4]
   10710:	f203 2212 	addw	r2, r3, #530	; 0x212
   10714:	687b      	ldr	r3, [r7, #4]
   10716:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1071a:	687b      	ldr	r3, [r7, #4]
   1071c:	685a      	ldr	r2, [r3, #4]
   1071e:	687b      	ldr	r3, [r7, #4]
   10720:	f503 7305 	add.w	r3, r3, #532	; 0x214
   10724:	4619      	mov	r1, r3
   10726:	4610      	mov	r0, r2
   10728:	4b04      	ldr	r3, [pc, #16]	; (1073c <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1072a:	4798      	blx	r3
		return status;
   1072c:	687b      	ldr	r3, [r7, #4]
   1072e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   10732:	4618      	mov	r0, r3
   10734:	3708      	adds	r7, #8
   10736:	46bd      	mov	sp, r7
   10738:	bd80      	pop	{r7, pc}
   1073a:	bf00      	nop
   1073c:	0000235d 	.word	0x0000235d

00010740 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   10740:	b580      	push	{r7, lr}
   10742:	b082      	sub	sp, #8
   10744:	af00      	add	r7, sp, #0
   10746:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   10748:	6878      	ldr	r0, [r7, #4]
   1074a:	4b0e      	ldr	r3, [pc, #56]	; (10784 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   1074c:	4798      	blx	r3
   1074e:	4603      	mov	r3, r0
   10750:	461a      	mov	r2, r3
   10752:	687b      	ldr	r3, [r7, #4]
   10754:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   10758:	687b      	ldr	r3, [r7, #4]
   1075a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1075e:	f003 0301 	and.w	r3, r3, #1
   10762:	2b00      	cmp	r3, #0
   10764:	d000      	beq.n	10768 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   10766:	e7ef      	b.n	10748 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   10768:	687b      	ldr	r3, [r7, #4]
   1076a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   1076e:	f003 0301 	and.w	r3, r3, #1
   10772:	2b00      	cmp	r3, #0
   10774:	bf0c      	ite	eq
   10776:	2301      	moveq	r3, #1
   10778:	2300      	movne	r3, #0
   1077a:	b2db      	uxtb	r3, r3
}
   1077c:	4618      	mov	r0, r3
   1077e:	3708      	adds	r7, #8
   10780:	46bd      	mov	sp, r7
   10782:	bd80      	pop	{r7, pc}
   10784:	000106cd 	.word	0x000106cd

00010788 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   10788:	b590      	push	{r4, r7, lr}
   1078a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   1078e:	b085      	sub	sp, #20
   10790:	af00      	add	r7, sp, #0
   10792:	f107 0310 	add.w	r3, r7, #16
   10796:	3b0c      	subs	r3, #12
   10798:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   1079a:	f107 0310 	add.w	r3, r7, #16
   1079e:	3b0c      	subs	r3, #12
   107a0:	681b      	ldr	r3, [r3, #0]
   107a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   107a6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   107aa:	f107 0310 	add.w	r3, r7, #16
   107ae:	3b0c      	subs	r3, #12
   107b0:	681b      	ldr	r3, [r3, #0]
   107b2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   107b6:	f107 0110 	add.w	r1, r7, #16
   107ba:	3904      	subs	r1, #4
   107bc:	f107 0010 	add.w	r0, r7, #16
   107c0:	380c      	subs	r0, #12
   107c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   107c6:	6800      	ldr	r0, [r0, #0]
   107c8:	4c4b      	ldr	r4, [pc, #300]	; (108f8 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   107ca:	47a0      	blx	r4
	WaitOnBusy();
   107cc:	f107 0310 	add.w	r3, r7, #16
   107d0:	3b0c      	subs	r3, #12
   107d2:	6818      	ldr	r0, [r3, #0]
   107d4:	4b49      	ldr	r3, [pc, #292]	; (108fc <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   107d6:	4798      	blx	r3
	Erase(currentAddress);
   107d8:	f107 0310 	add.w	r3, r7, #16
   107dc:	3b0c      	subs	r3, #12
   107de:	681b      	ldr	r3, [r3, #0]
   107e0:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   107e4:	f107 0310 	add.w	r3, r7, #16
   107e8:	3b0c      	subs	r3, #12
   107ea:	4611      	mov	r1, r2
   107ec:	6818      	ldr	r0, [r3, #0]
   107ee:	4b44      	ldr	r3, [pc, #272]	; (10900 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   107f0:	4798      	blx	r3
	WaitOnBusy();
   107f2:	f107 0310 	add.w	r3, r7, #16
   107f6:	3b0c      	subs	r3, #12
   107f8:	6818      	ldr	r0, [r3, #0]
   107fa:	4b40      	ldr	r3, [pc, #256]	; (108fc <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   107fc:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   107fe:	f107 0310 	add.w	r3, r7, #16
   10802:	3b0c      	subs	r3, #12
   10804:	681b      	ldr	r3, [r3, #0]
   10806:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1080a:	f107 0110 	add.w	r1, r7, #16
   1080e:	3904      	subs	r1, #4
   10810:	f107 0010 	add.w	r0, r7, #16
   10814:	380c      	subs	r0, #12
   10816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1081a:	6800      	ldr	r0, [r0, #0]
   1081c:	4c39      	ldr	r4, [pc, #228]	; (10904 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   1081e:	47a0      	blx	r4
	WaitOnBusy();
   10820:	f107 0310 	add.w	r3, r7, #16
   10824:	3b0c      	subs	r3, #12
   10826:	6818      	ldr	r0, [r3, #0]
   10828:	4b34      	ldr	r3, [pc, #208]	; (108fc <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1082a:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   1082c:	f107 0310 	add.w	r3, r7, #16
   10830:	3b0c      	subs	r3, #12
   10832:	681b      	ldr	r3, [r3, #0]
   10834:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   10838:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   1083c:	f101 0110 	add.w	r1, r1, #16
   10840:	3904      	subs	r1, #4
   10842:	f107 0010 	add.w	r0, r7, #16
   10846:	380c      	subs	r0, #12
   10848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1084c:	6800      	ldr	r0, [r0, #0]
   1084e:	4c2a      	ldr	r4, [pc, #168]	; (108f8 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   10850:	47a0      	blx	r4
	WaitOnBusy();
   10852:	f107 0310 	add.w	r3, r7, #16
   10856:	3b0c      	subs	r3, #12
   10858:	6818      	ldr	r0, [r3, #0]
   1085a:	4b28      	ldr	r3, [pc, #160]	; (108fc <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1085c:	4798      	blx	r3
	isOK	 = true;
   1085e:	f107 0310 	add.w	r3, r7, #16
   10862:	3b0c      	subs	r3, #12
   10864:	681b      	ldr	r3, [r3, #0]
   10866:	2201      	movs	r2, #1
   10868:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1086c:	2300      	movs	r3, #0
   1086e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10872:	f102 020c 	add.w	r2, r2, #12
   10876:	6013      	str	r3, [r2, #0]
   10878:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1087c:	f103 030c 	add.w	r3, r3, #12
   10880:	681b      	ldr	r3, [r3, #0]
   10882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10886:	da2b      	bge.n	108e0 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   10888:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   1088c:	f103 0310 	add.w	r3, r3, #16
   10890:	3b04      	subs	r3, #4
   10892:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   10896:	f102 020c 	add.w	r2, r2, #12
   1089a:	6812      	ldr	r2, [r2, #0]
   1089c:	4413      	add	r3, r2
   1089e:	781a      	ldrb	r2, [r3, #0]
   108a0:	f107 0310 	add.w	r3, r7, #16
   108a4:	3b04      	subs	r3, #4
   108a6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   108aa:	f101 010c 	add.w	r1, r1, #12
   108ae:	6809      	ldr	r1, [r1, #0]
   108b0:	440b      	add	r3, r1
   108b2:	781b      	ldrb	r3, [r3, #0]
   108b4:	429a      	cmp	r2, r3
   108b6:	d007      	beq.n	108c8 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   108b8:	f107 0310 	add.w	r3, r7, #16
   108bc:	3b0c      	subs	r3, #12
   108be:	681b      	ldr	r3, [r3, #0]
   108c0:	2200      	movs	r2, #0
   108c2:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   108c6:	e00b      	b.n	108e0 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   108c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   108cc:	f103 030c 	add.w	r3, r3, #12
   108d0:	681b      	ldr	r3, [r3, #0]
   108d2:	3301      	adds	r3, #1
   108d4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   108d8:	f102 020c 	add.w	r2, r2, #12
   108dc:	6013      	str	r3, [r2, #0]
   108de:	e7cb      	b.n	10878 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   108e0:	f107 0310 	add.w	r3, r7, #16
   108e4:	3b0c      	subs	r3, #12
   108e6:	681b      	ldr	r3, [r3, #0]
   108e8:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   108ec:	4618      	mov	r0, r3
   108ee:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   108f2:	3714      	adds	r7, #20
   108f4:	46bd      	mov	sp, r7
   108f6:	bd90      	pop	{r4, r7, pc}
   108f8:	00010691 	.word	0x00010691
   108fc:	00010741 	.word	0x00010741
   10900:	0001062d 	.word	0x0001062d
   10904:	0001065d 	.word	0x0001065d

00010908 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   10908:	b580      	push	{r7, lr}
   1090a:	b082      	sub	sp, #8
   1090c:	af00      	add	r7, sp, #0
   1090e:	6078      	str	r0, [r7, #4]
   10910:	6039      	str	r1, [r7, #0]
   10912:	687b      	ldr	r3, [r7, #4]
   10914:	2b01      	cmp	r3, #1
   10916:	d10d      	bne.n	10934 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10918:	683b      	ldr	r3, [r7, #0]
   1091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1091e:	4293      	cmp	r3, r2
   10920:	d108      	bne.n	10934 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10922:	4906      	ldr	r1, [pc, #24]	; (1093c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10924:	4806      	ldr	r0, [pc, #24]	; (10940 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10926:	4b07      	ldr	r3, [pc, #28]	; (10944 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10928:	4798      	blx	r3
   1092a:	4a07      	ldr	r2, [pc, #28]	; (10948 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1092c:	4907      	ldr	r1, [pc, #28]	; (1094c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1092e:	4804      	ldr	r0, [pc, #16]	; (10940 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10930:	4b07      	ldr	r3, [pc, #28]	; (10950 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   10932:	4798      	blx	r3
   10934:	bf00      	nop
   10936:	3708      	adds	r7, #8
   10938:	46bd      	mov	sp, r7
   1093a:	bd80      	pop	{r7, pc}
   1093c:	200092fc 	.word	0x200092fc
   10940:	2000903c 	.word	0x2000903c
   10944:	00010585 	.word	0x00010585
   10948:	20000000 	.word	0x20000000
   1094c:	000105ad 	.word	0x000105ad
   10950:	00010a09 	.word	0x00010a09

00010954 <_GLOBAL__sub_I_ptrN25Q256Class>:
   10954:	b580      	push	{r7, lr}
   10956:	af00      	add	r7, sp, #0
   10958:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1095c:	2001      	movs	r0, #1
   1095e:	4b01      	ldr	r3, [pc, #4]	; (10964 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   10960:	4798      	blx	r3
   10962:	bd80      	pop	{r7, pc}
   10964:	00010909 	.word	0x00010909

00010968 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   10968:	b580      	push	{r7, lr}
   1096a:	b084      	sub	sp, #16
   1096c:	af00      	add	r7, sp, #0
   1096e:	60f8      	str	r0, [r7, #12]
   10970:	60b9      	str	r1, [r7, #8]
   10972:	4613      	mov	r3, r2
   10974:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   10976:	68fb      	ldr	r3, [r7, #12]
   10978:	2b00      	cmp	r3, #0
   1097a:	d004      	beq.n	10986 <io_write+0x1e>
   1097c:	68bb      	ldr	r3, [r7, #8]
   1097e:	2b00      	cmp	r3, #0
   10980:	d001      	beq.n	10986 <io_write+0x1e>
   10982:	2301      	movs	r3, #1
   10984:	e000      	b.n	10988 <io_write+0x20>
   10986:	2300      	movs	r3, #0
   10988:	f003 0301 	and.w	r3, r3, #1
   1098c:	b2db      	uxtb	r3, r3
   1098e:	2234      	movs	r2, #52	; 0x34
   10990:	4907      	ldr	r1, [pc, #28]	; (109b0 <io_write+0x48>)
   10992:	4618      	mov	r0, r3
   10994:	4b07      	ldr	r3, [pc, #28]	; (109b4 <io_write+0x4c>)
   10996:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   10998:	68fb      	ldr	r3, [r7, #12]
   1099a:	681b      	ldr	r3, [r3, #0]
   1099c:	88fa      	ldrh	r2, [r7, #6]
   1099e:	68b9      	ldr	r1, [r7, #8]
   109a0:	68f8      	ldr	r0, [r7, #12]
   109a2:	4798      	blx	r3
   109a4:	4603      	mov	r3, r0
}
   109a6:	4618      	mov	r0, r3
   109a8:	3710      	adds	r7, #16
   109aa:	46bd      	mov	sp, r7
   109ac:	bd80      	pop	{r7, pc}
   109ae:	bf00      	nop
   109b0:	000115c4 	.word	0x000115c4
   109b4:	0000337d 	.word	0x0000337d

000109b8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   109b8:	b580      	push	{r7, lr}
   109ba:	b084      	sub	sp, #16
   109bc:	af00      	add	r7, sp, #0
   109be:	60f8      	str	r0, [r7, #12]
   109c0:	60b9      	str	r1, [r7, #8]
   109c2:	4613      	mov	r3, r2
   109c4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   109c6:	68fb      	ldr	r3, [r7, #12]
   109c8:	2b00      	cmp	r3, #0
   109ca:	d004      	beq.n	109d6 <io_read+0x1e>
   109cc:	68bb      	ldr	r3, [r7, #8]
   109ce:	2b00      	cmp	r3, #0
   109d0:	d001      	beq.n	109d6 <io_read+0x1e>
   109d2:	2301      	movs	r3, #1
   109d4:	e000      	b.n	109d8 <io_read+0x20>
   109d6:	2300      	movs	r3, #0
   109d8:	f003 0301 	and.w	r3, r3, #1
   109dc:	b2db      	uxtb	r3, r3
   109de:	223d      	movs	r2, #61	; 0x3d
   109e0:	4907      	ldr	r1, [pc, #28]	; (10a00 <io_read+0x48>)
   109e2:	4618      	mov	r0, r3
   109e4:	4b07      	ldr	r3, [pc, #28]	; (10a04 <io_read+0x4c>)
   109e6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   109e8:	68fb      	ldr	r3, [r7, #12]
   109ea:	685b      	ldr	r3, [r3, #4]
   109ec:	88fa      	ldrh	r2, [r7, #6]
   109ee:	68b9      	ldr	r1, [r7, #8]
   109f0:	68f8      	ldr	r0, [r7, #12]
   109f2:	4798      	blx	r3
   109f4:	4603      	mov	r3, r0
}
   109f6:	4618      	mov	r0, r3
   109f8:	3710      	adds	r7, #16
   109fa:	46bd      	mov	sp, r7
   109fc:	bd80      	pop	{r7, pc}
   109fe:	bf00      	nop
   10a00:	000115c4 	.word	0x000115c4
   10a04:	0000337d 	.word	0x0000337d

00010a08 <__aeabi_atexit>:
   10a08:	460b      	mov	r3, r1
   10a0a:	4601      	mov	r1, r0
   10a0c:	4618      	mov	r0, r3
   10a0e:	f000 b92f 	b.w	10c70 <__cxa_atexit>
   10a12:	bf00      	nop

00010a14 <__aeabi_frsub>:
   10a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10a18:	e002      	b.n	10a20 <__addsf3>
   10a1a:	bf00      	nop

00010a1c <__aeabi_fsub>:
   10a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010a20 <__addsf3>:
   10a20:	0042      	lsls	r2, r0, #1
   10a22:	bf1f      	itttt	ne
   10a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10a28:	ea92 0f03 	teqne	r2, r3
   10a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10a34:	d06a      	beq.n	10b0c <__addsf3+0xec>
   10a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10a3e:	bfc1      	itttt	gt
   10a40:	18d2      	addgt	r2, r2, r3
   10a42:	4041      	eorgt	r1, r0
   10a44:	4048      	eorgt	r0, r1
   10a46:	4041      	eorgt	r1, r0
   10a48:	bfb8      	it	lt
   10a4a:	425b      	neglt	r3, r3
   10a4c:	2b19      	cmp	r3, #25
   10a4e:	bf88      	it	hi
   10a50:	4770      	bxhi	lr
   10a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10a5e:	bf18      	it	ne
   10a60:	4240      	negne	r0, r0
   10a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10a6e:	bf18      	it	ne
   10a70:	4249      	negne	r1, r1
   10a72:	ea92 0f03 	teq	r2, r3
   10a76:	d03f      	beq.n	10af8 <__addsf3+0xd8>
   10a78:	f1a2 0201 	sub.w	r2, r2, #1
   10a7c:	fa41 fc03 	asr.w	ip, r1, r3
   10a80:	eb10 000c 	adds.w	r0, r0, ip
   10a84:	f1c3 0320 	rsb	r3, r3, #32
   10a88:	fa01 f103 	lsl.w	r1, r1, r3
   10a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10a90:	d502      	bpl.n	10a98 <__addsf3+0x78>
   10a92:	4249      	negs	r1, r1
   10a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10a9c:	d313      	bcc.n	10ac6 <__addsf3+0xa6>
   10a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10aa2:	d306      	bcc.n	10ab2 <__addsf3+0x92>
   10aa4:	0840      	lsrs	r0, r0, #1
   10aa6:	ea4f 0131 	mov.w	r1, r1, rrx
   10aaa:	f102 0201 	add.w	r2, r2, #1
   10aae:	2afe      	cmp	r2, #254	; 0xfe
   10ab0:	d251      	bcs.n	10b56 <__addsf3+0x136>
   10ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10aba:	bf08      	it	eq
   10abc:	f020 0001 	biceq.w	r0, r0, #1
   10ac0:	ea40 0003 	orr.w	r0, r0, r3
   10ac4:	4770      	bx	lr
   10ac6:	0049      	lsls	r1, r1, #1
   10ac8:	eb40 0000 	adc.w	r0, r0, r0
   10acc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   10ad0:	f1a2 0201 	sub.w	r2, r2, #1
   10ad4:	d1ed      	bne.n	10ab2 <__addsf3+0x92>
   10ad6:	fab0 fc80 	clz	ip, r0
   10ada:	f1ac 0c08 	sub.w	ip, ip, #8
   10ade:	ebb2 020c 	subs.w	r2, r2, ip
   10ae2:	fa00 f00c 	lsl.w	r0, r0, ip
   10ae6:	bfaa      	itet	ge
   10ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10aec:	4252      	neglt	r2, r2
   10aee:	4318      	orrge	r0, r3
   10af0:	bfbc      	itt	lt
   10af2:	40d0      	lsrlt	r0, r2
   10af4:	4318      	orrlt	r0, r3
   10af6:	4770      	bx	lr
   10af8:	f092 0f00 	teq	r2, #0
   10afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10b00:	bf06      	itte	eq
   10b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10b06:	3201      	addeq	r2, #1
   10b08:	3b01      	subne	r3, #1
   10b0a:	e7b5      	b.n	10a78 <__addsf3+0x58>
   10b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10b14:	bf18      	it	ne
   10b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10b1a:	d021      	beq.n	10b60 <__addsf3+0x140>
   10b1c:	ea92 0f03 	teq	r2, r3
   10b20:	d004      	beq.n	10b2c <__addsf3+0x10c>
   10b22:	f092 0f00 	teq	r2, #0
   10b26:	bf08      	it	eq
   10b28:	4608      	moveq	r0, r1
   10b2a:	4770      	bx	lr
   10b2c:	ea90 0f01 	teq	r0, r1
   10b30:	bf1c      	itt	ne
   10b32:	2000      	movne	r0, #0
   10b34:	4770      	bxne	lr
   10b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10b3a:	d104      	bne.n	10b46 <__addsf3+0x126>
   10b3c:	0040      	lsls	r0, r0, #1
   10b3e:	bf28      	it	cs
   10b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10b44:	4770      	bx	lr
   10b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10b4a:	bf3c      	itt	cc
   10b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10b50:	4770      	bxcc	lr
   10b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10b5e:	4770      	bx	lr
   10b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10b64:	bf16      	itet	ne
   10b66:	4608      	movne	r0, r1
   10b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10b6c:	4601      	movne	r1, r0
   10b6e:	0242      	lsls	r2, r0, #9
   10b70:	bf06      	itte	eq
   10b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10b76:	ea90 0f01 	teqeq	r0, r1
   10b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10b7e:	4770      	bx	lr

00010b80 <__aeabi_ui2f>:
   10b80:	f04f 0300 	mov.w	r3, #0
   10b84:	e004      	b.n	10b90 <__aeabi_i2f+0x8>
   10b86:	bf00      	nop

00010b88 <__aeabi_i2f>:
   10b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10b8c:	bf48      	it	mi
   10b8e:	4240      	negmi	r0, r0
   10b90:	ea5f 0c00 	movs.w	ip, r0
   10b94:	bf08      	it	eq
   10b96:	4770      	bxeq	lr
   10b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10b9c:	4601      	mov	r1, r0
   10b9e:	f04f 0000 	mov.w	r0, #0
   10ba2:	e01c      	b.n	10bde <__aeabi_l2f+0x2a>

00010ba4 <__aeabi_ul2f>:
   10ba4:	ea50 0201 	orrs.w	r2, r0, r1
   10ba8:	bf08      	it	eq
   10baa:	4770      	bxeq	lr
   10bac:	f04f 0300 	mov.w	r3, #0
   10bb0:	e00a      	b.n	10bc8 <__aeabi_l2f+0x14>
   10bb2:	bf00      	nop

00010bb4 <__aeabi_l2f>:
   10bb4:	ea50 0201 	orrs.w	r2, r0, r1
   10bb8:	bf08      	it	eq
   10bba:	4770      	bxeq	lr
   10bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10bc0:	d502      	bpl.n	10bc8 <__aeabi_l2f+0x14>
   10bc2:	4240      	negs	r0, r0
   10bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10bc8:	ea5f 0c01 	movs.w	ip, r1
   10bcc:	bf02      	ittt	eq
   10bce:	4684      	moveq	ip, r0
   10bd0:	4601      	moveq	r1, r0
   10bd2:	2000      	moveq	r0, #0
   10bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10bd8:	bf08      	it	eq
   10bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10be2:	fabc f28c 	clz	r2, ip
   10be6:	3a08      	subs	r2, #8
   10be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10bec:	db10      	blt.n	10c10 <__aeabi_l2f+0x5c>
   10bee:	fa01 fc02 	lsl.w	ip, r1, r2
   10bf2:	4463      	add	r3, ip
   10bf4:	fa00 fc02 	lsl.w	ip, r0, r2
   10bf8:	f1c2 0220 	rsb	r2, r2, #32
   10bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10c00:	fa20 f202 	lsr.w	r2, r0, r2
   10c04:	eb43 0002 	adc.w	r0, r3, r2
   10c08:	bf08      	it	eq
   10c0a:	f020 0001 	biceq.w	r0, r0, #1
   10c0e:	4770      	bx	lr
   10c10:	f102 0220 	add.w	r2, r2, #32
   10c14:	fa01 fc02 	lsl.w	ip, r1, r2
   10c18:	f1c2 0220 	rsb	r2, r2, #32
   10c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10c20:	fa21 f202 	lsr.w	r2, r1, r2
   10c24:	eb43 0002 	adc.w	r0, r3, r2
   10c28:	bf08      	it	eq
   10c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10c2e:	4770      	bx	lr

00010c30 <__aeabi_f2uiz>:
   10c30:	0042      	lsls	r2, r0, #1
   10c32:	d20e      	bcs.n	10c52 <__aeabi_f2uiz+0x22>
   10c34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   10c38:	d30b      	bcc.n	10c52 <__aeabi_f2uiz+0x22>
   10c3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   10c3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   10c42:	d409      	bmi.n	10c58 <__aeabi_f2uiz+0x28>
   10c44:	ea4f 2300 	mov.w	r3, r0, lsl #8
   10c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10c4c:	fa23 f002 	lsr.w	r0, r3, r2
   10c50:	4770      	bx	lr
   10c52:	f04f 0000 	mov.w	r0, #0
   10c56:	4770      	bx	lr
   10c58:	f112 0f61 	cmn.w	r2, #97	; 0x61
   10c5c:	d101      	bne.n	10c62 <__aeabi_f2uiz+0x32>
   10c5e:	0242      	lsls	r2, r0, #9
   10c60:	d102      	bne.n	10c68 <__aeabi_f2uiz+0x38>
   10c62:	f04f 30ff 	mov.w	r0, #4294967295
   10c66:	4770      	bx	lr
   10c68:	f04f 0000 	mov.w	r0, #0
   10c6c:	4770      	bx	lr
   10c6e:	bf00      	nop

00010c70 <__cxa_atexit>:
   10c70:	4613      	mov	r3, r2
   10c72:	460a      	mov	r2, r1
   10c74:	4601      	mov	r1, r0
   10c76:	2002      	movs	r0, #2
   10c78:	f000 b990 	b.w	10f9c <__register_exitproc>

00010c7c <ffs>:
   10c7c:	b140      	cbz	r0, 10c90 <ffs+0x14>
   10c7e:	2300      	movs	r3, #0
   10c80:	fa40 f103 	asr.w	r1, r0, r3
   10c84:	1c5a      	adds	r2, r3, #1
   10c86:	07c9      	lsls	r1, r1, #31
   10c88:	4613      	mov	r3, r2
   10c8a:	d5f9      	bpl.n	10c80 <ffs+0x4>
   10c8c:	4610      	mov	r0, r2
   10c8e:	4770      	bx	lr
   10c90:	4602      	mov	r2, r0
   10c92:	4610      	mov	r0, r2
   10c94:	4770      	bx	lr
   10c96:	bf00      	nop

00010c98 <__libc_init_array>:
   10c98:	b570      	push	{r4, r5, r6, lr}
   10c9a:	4e0f      	ldr	r6, [pc, #60]	; (10cd8 <__libc_init_array+0x40>)
   10c9c:	4d0f      	ldr	r5, [pc, #60]	; (10cdc <__libc_init_array+0x44>)
   10c9e:	1b76      	subs	r6, r6, r5
   10ca0:	10b6      	asrs	r6, r6, #2
   10ca2:	bf18      	it	ne
   10ca4:	2400      	movne	r4, #0
   10ca6:	d005      	beq.n	10cb4 <__libc_init_array+0x1c>
   10ca8:	3401      	adds	r4, #1
   10caa:	f855 3b04 	ldr.w	r3, [r5], #4
   10cae:	4798      	blx	r3
   10cb0:	42a6      	cmp	r6, r4
   10cb2:	d1f9      	bne.n	10ca8 <__libc_init_array+0x10>
   10cb4:	4e0a      	ldr	r6, [pc, #40]	; (10ce0 <__libc_init_array+0x48>)
   10cb6:	4d0b      	ldr	r5, [pc, #44]	; (10ce4 <__libc_init_array+0x4c>)
   10cb8:	1b76      	subs	r6, r6, r5
   10cba:	f000 fc8f 	bl	115dc <_init>
   10cbe:	10b6      	asrs	r6, r6, #2
   10cc0:	bf18      	it	ne
   10cc2:	2400      	movne	r4, #0
   10cc4:	d006      	beq.n	10cd4 <__libc_init_array+0x3c>
   10cc6:	3401      	adds	r4, #1
   10cc8:	f855 3b04 	ldr.w	r3, [r5], #4
   10ccc:	4798      	blx	r3
   10cce:	42a6      	cmp	r6, r4
   10cd0:	d1f9      	bne.n	10cc6 <__libc_init_array+0x2e>
   10cd2:	bd70      	pop	{r4, r5, r6, pc}
   10cd4:	bd70      	pop	{r4, r5, r6, pc}
   10cd6:	bf00      	nop
   10cd8:	000115e8 	.word	0x000115e8
   10cdc:	000115e8 	.word	0x000115e8
   10ce0:	00011614 	.word	0x00011614
   10ce4:	000115e8 	.word	0x000115e8

00010ce8 <memcpy>:
   10ce8:	4684      	mov	ip, r0
   10cea:	ea41 0300 	orr.w	r3, r1, r0
   10cee:	f013 0303 	ands.w	r3, r3, #3
   10cf2:	d16d      	bne.n	10dd0 <memcpy+0xe8>
   10cf4:	3a40      	subs	r2, #64	; 0x40
   10cf6:	d341      	bcc.n	10d7c <memcpy+0x94>
   10cf8:	f851 3b04 	ldr.w	r3, [r1], #4
   10cfc:	f840 3b04 	str.w	r3, [r0], #4
   10d00:	f851 3b04 	ldr.w	r3, [r1], #4
   10d04:	f840 3b04 	str.w	r3, [r0], #4
   10d08:	f851 3b04 	ldr.w	r3, [r1], #4
   10d0c:	f840 3b04 	str.w	r3, [r0], #4
   10d10:	f851 3b04 	ldr.w	r3, [r1], #4
   10d14:	f840 3b04 	str.w	r3, [r0], #4
   10d18:	f851 3b04 	ldr.w	r3, [r1], #4
   10d1c:	f840 3b04 	str.w	r3, [r0], #4
   10d20:	f851 3b04 	ldr.w	r3, [r1], #4
   10d24:	f840 3b04 	str.w	r3, [r0], #4
   10d28:	f851 3b04 	ldr.w	r3, [r1], #4
   10d2c:	f840 3b04 	str.w	r3, [r0], #4
   10d30:	f851 3b04 	ldr.w	r3, [r1], #4
   10d34:	f840 3b04 	str.w	r3, [r0], #4
   10d38:	f851 3b04 	ldr.w	r3, [r1], #4
   10d3c:	f840 3b04 	str.w	r3, [r0], #4
   10d40:	f851 3b04 	ldr.w	r3, [r1], #4
   10d44:	f840 3b04 	str.w	r3, [r0], #4
   10d48:	f851 3b04 	ldr.w	r3, [r1], #4
   10d4c:	f840 3b04 	str.w	r3, [r0], #4
   10d50:	f851 3b04 	ldr.w	r3, [r1], #4
   10d54:	f840 3b04 	str.w	r3, [r0], #4
   10d58:	f851 3b04 	ldr.w	r3, [r1], #4
   10d5c:	f840 3b04 	str.w	r3, [r0], #4
   10d60:	f851 3b04 	ldr.w	r3, [r1], #4
   10d64:	f840 3b04 	str.w	r3, [r0], #4
   10d68:	f851 3b04 	ldr.w	r3, [r1], #4
   10d6c:	f840 3b04 	str.w	r3, [r0], #4
   10d70:	f851 3b04 	ldr.w	r3, [r1], #4
   10d74:	f840 3b04 	str.w	r3, [r0], #4
   10d78:	3a40      	subs	r2, #64	; 0x40
   10d7a:	d2bd      	bcs.n	10cf8 <memcpy+0x10>
   10d7c:	3230      	adds	r2, #48	; 0x30
   10d7e:	d311      	bcc.n	10da4 <memcpy+0xbc>
   10d80:	f851 3b04 	ldr.w	r3, [r1], #4
   10d84:	f840 3b04 	str.w	r3, [r0], #4
   10d88:	f851 3b04 	ldr.w	r3, [r1], #4
   10d8c:	f840 3b04 	str.w	r3, [r0], #4
   10d90:	f851 3b04 	ldr.w	r3, [r1], #4
   10d94:	f840 3b04 	str.w	r3, [r0], #4
   10d98:	f851 3b04 	ldr.w	r3, [r1], #4
   10d9c:	f840 3b04 	str.w	r3, [r0], #4
   10da0:	3a10      	subs	r2, #16
   10da2:	d2ed      	bcs.n	10d80 <memcpy+0x98>
   10da4:	320c      	adds	r2, #12
   10da6:	d305      	bcc.n	10db4 <memcpy+0xcc>
   10da8:	f851 3b04 	ldr.w	r3, [r1], #4
   10dac:	f840 3b04 	str.w	r3, [r0], #4
   10db0:	3a04      	subs	r2, #4
   10db2:	d2f9      	bcs.n	10da8 <memcpy+0xc0>
   10db4:	3204      	adds	r2, #4
   10db6:	d008      	beq.n	10dca <memcpy+0xe2>
   10db8:	07d2      	lsls	r2, r2, #31
   10dba:	bf1c      	itt	ne
   10dbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10dc0:	f800 3b01 	strbne.w	r3, [r0], #1
   10dc4:	d301      	bcc.n	10dca <memcpy+0xe2>
   10dc6:	880b      	ldrh	r3, [r1, #0]
   10dc8:	8003      	strh	r3, [r0, #0]
   10dca:	4660      	mov	r0, ip
   10dcc:	4770      	bx	lr
   10dce:	bf00      	nop
   10dd0:	2a08      	cmp	r2, #8
   10dd2:	d313      	bcc.n	10dfc <memcpy+0x114>
   10dd4:	078b      	lsls	r3, r1, #30
   10dd6:	d08d      	beq.n	10cf4 <memcpy+0xc>
   10dd8:	f010 0303 	ands.w	r3, r0, #3
   10ddc:	d08a      	beq.n	10cf4 <memcpy+0xc>
   10dde:	f1c3 0304 	rsb	r3, r3, #4
   10de2:	1ad2      	subs	r2, r2, r3
   10de4:	07db      	lsls	r3, r3, #31
   10de6:	bf1c      	itt	ne
   10de8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10dec:	f800 3b01 	strbne.w	r3, [r0], #1
   10df0:	d380      	bcc.n	10cf4 <memcpy+0xc>
   10df2:	f831 3b02 	ldrh.w	r3, [r1], #2
   10df6:	f820 3b02 	strh.w	r3, [r0], #2
   10dfa:	e77b      	b.n	10cf4 <memcpy+0xc>
   10dfc:	3a04      	subs	r2, #4
   10dfe:	d3d9      	bcc.n	10db4 <memcpy+0xcc>
   10e00:	3a01      	subs	r2, #1
   10e02:	f811 3b01 	ldrb.w	r3, [r1], #1
   10e06:	f800 3b01 	strb.w	r3, [r0], #1
   10e0a:	d2f9      	bcs.n	10e00 <memcpy+0x118>
   10e0c:	780b      	ldrb	r3, [r1, #0]
   10e0e:	7003      	strb	r3, [r0, #0]
   10e10:	784b      	ldrb	r3, [r1, #1]
   10e12:	7043      	strb	r3, [r0, #1]
   10e14:	788b      	ldrb	r3, [r1, #2]
   10e16:	7083      	strb	r3, [r0, #2]
   10e18:	4660      	mov	r0, ip
   10e1a:	4770      	bx	lr

00010e1c <memset>:
   10e1c:	b470      	push	{r4, r5, r6}
   10e1e:	0786      	lsls	r6, r0, #30
   10e20:	d046      	beq.n	10eb0 <memset+0x94>
   10e22:	1e54      	subs	r4, r2, #1
   10e24:	2a00      	cmp	r2, #0
   10e26:	d041      	beq.n	10eac <memset+0x90>
   10e28:	b2ca      	uxtb	r2, r1
   10e2a:	4603      	mov	r3, r0
   10e2c:	e002      	b.n	10e34 <memset+0x18>
   10e2e:	f114 34ff 	adds.w	r4, r4, #4294967295
   10e32:	d33b      	bcc.n	10eac <memset+0x90>
   10e34:	f803 2b01 	strb.w	r2, [r3], #1
   10e38:	079d      	lsls	r5, r3, #30
   10e3a:	d1f8      	bne.n	10e2e <memset+0x12>
   10e3c:	2c03      	cmp	r4, #3
   10e3e:	d92e      	bls.n	10e9e <memset+0x82>
   10e40:	b2cd      	uxtb	r5, r1
   10e42:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10e46:	2c0f      	cmp	r4, #15
   10e48:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10e4c:	d919      	bls.n	10e82 <memset+0x66>
   10e4e:	f103 0210 	add.w	r2, r3, #16
   10e52:	4626      	mov	r6, r4
   10e54:	3e10      	subs	r6, #16
   10e56:	2e0f      	cmp	r6, #15
   10e58:	f842 5c10 	str.w	r5, [r2, #-16]
   10e5c:	f842 5c0c 	str.w	r5, [r2, #-12]
   10e60:	f842 5c08 	str.w	r5, [r2, #-8]
   10e64:	f842 5c04 	str.w	r5, [r2, #-4]
   10e68:	f102 0210 	add.w	r2, r2, #16
   10e6c:	d8f2      	bhi.n	10e54 <memset+0x38>
   10e6e:	f1a4 0210 	sub.w	r2, r4, #16
   10e72:	f022 020f 	bic.w	r2, r2, #15
   10e76:	f004 040f 	and.w	r4, r4, #15
   10e7a:	3210      	adds	r2, #16
   10e7c:	2c03      	cmp	r4, #3
   10e7e:	4413      	add	r3, r2
   10e80:	d90d      	bls.n	10e9e <memset+0x82>
   10e82:	461e      	mov	r6, r3
   10e84:	4622      	mov	r2, r4
   10e86:	3a04      	subs	r2, #4
   10e88:	2a03      	cmp	r2, #3
   10e8a:	f846 5b04 	str.w	r5, [r6], #4
   10e8e:	d8fa      	bhi.n	10e86 <memset+0x6a>
   10e90:	1f22      	subs	r2, r4, #4
   10e92:	f022 0203 	bic.w	r2, r2, #3
   10e96:	3204      	adds	r2, #4
   10e98:	4413      	add	r3, r2
   10e9a:	f004 0403 	and.w	r4, r4, #3
   10e9e:	b12c      	cbz	r4, 10eac <memset+0x90>
   10ea0:	b2c9      	uxtb	r1, r1
   10ea2:	441c      	add	r4, r3
   10ea4:	f803 1b01 	strb.w	r1, [r3], #1
   10ea8:	429c      	cmp	r4, r3
   10eaa:	d1fb      	bne.n	10ea4 <memset+0x88>
   10eac:	bc70      	pop	{r4, r5, r6}
   10eae:	4770      	bx	lr
   10eb0:	4614      	mov	r4, r2
   10eb2:	4603      	mov	r3, r0
   10eb4:	e7c2      	b.n	10e3c <memset+0x20>
   10eb6:	bf00      	nop
	...

00010ec0 <strlen>:
   10ec0:	f890 f000 	pld	[r0]
   10ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10ec8:	f020 0107 	bic.w	r1, r0, #7
   10ecc:	f06f 0c00 	mvn.w	ip, #0
   10ed0:	f010 0407 	ands.w	r4, r0, #7
   10ed4:	f891 f020 	pld	[r1, #32]
   10ed8:	f040 8049 	bne.w	10f6e <strlen+0xae>
   10edc:	f04f 0400 	mov.w	r4, #0
   10ee0:	f06f 0007 	mvn.w	r0, #7
   10ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
   10ee8:	f891 f040 	pld	[r1, #64]	; 0x40
   10eec:	f100 0008 	add.w	r0, r0, #8
   10ef0:	fa82 f24c 	uadd8	r2, r2, ip
   10ef4:	faa4 f28c 	sel	r2, r4, ip
   10ef8:	fa83 f34c 	uadd8	r3, r3, ip
   10efc:	faa2 f38c 	sel	r3, r2, ip
   10f00:	bb4b      	cbnz	r3, 10f56 <strlen+0x96>
   10f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10f06:	fa82 f24c 	uadd8	r2, r2, ip
   10f0a:	f100 0008 	add.w	r0, r0, #8
   10f0e:	faa4 f28c 	sel	r2, r4, ip
   10f12:	fa83 f34c 	uadd8	r3, r3, ip
   10f16:	faa2 f38c 	sel	r3, r2, ip
   10f1a:	b9e3      	cbnz	r3, 10f56 <strlen+0x96>
   10f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10f20:	fa82 f24c 	uadd8	r2, r2, ip
   10f24:	f100 0008 	add.w	r0, r0, #8
   10f28:	faa4 f28c 	sel	r2, r4, ip
   10f2c:	fa83 f34c 	uadd8	r3, r3, ip
   10f30:	faa2 f38c 	sel	r3, r2, ip
   10f34:	b97b      	cbnz	r3, 10f56 <strlen+0x96>
   10f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10f3a:	f101 0120 	add.w	r1, r1, #32
   10f3e:	fa82 f24c 	uadd8	r2, r2, ip
   10f42:	f100 0008 	add.w	r0, r0, #8
   10f46:	faa4 f28c 	sel	r2, r4, ip
   10f4a:	fa83 f34c 	uadd8	r3, r3, ip
   10f4e:	faa2 f38c 	sel	r3, r2, ip
   10f52:	2b00      	cmp	r3, #0
   10f54:	d0c6      	beq.n	10ee4 <strlen+0x24>
   10f56:	2a00      	cmp	r2, #0
   10f58:	bf04      	itt	eq
   10f5a:	3004      	addeq	r0, #4
   10f5c:	461a      	moveq	r2, r3
   10f5e:	ba12      	rev	r2, r2
   10f60:	fab2 f282 	clz	r2, r2
   10f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10f6c:	4770      	bx	lr
   10f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10f72:	f004 0503 	and.w	r5, r4, #3
   10f76:	f1c4 0000 	rsb	r0, r4, #0
   10f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10f7e:	f014 0f04 	tst.w	r4, #4
   10f82:	f891 f040 	pld	[r1, #64]	; 0x40
   10f86:	fa0c f505 	lsl.w	r5, ip, r5
   10f8a:	ea62 0205 	orn	r2, r2, r5
   10f8e:	bf1c      	itt	ne
   10f90:	ea63 0305 	ornne	r3, r3, r5
   10f94:	4662      	movne	r2, ip
   10f96:	f04f 0400 	mov.w	r4, #0
   10f9a:	e7a9      	b.n	10ef0 <strlen+0x30>

00010f9c <__register_exitproc>:
   10f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10fa0:	4d2c      	ldr	r5, [pc, #176]	; (11054 <__register_exitproc+0xb8>)
   10fa2:	4606      	mov	r6, r0
   10fa4:	6828      	ldr	r0, [r5, #0]
   10fa6:	4698      	mov	r8, r3
   10fa8:	460f      	mov	r7, r1
   10faa:	4691      	mov	r9, r2
   10fac:	f000 f882 	bl	110b4 <__retarget_lock_acquire_recursive>
   10fb0:	4b29      	ldr	r3, [pc, #164]	; (11058 <__register_exitproc+0xbc>)
   10fb2:	681c      	ldr	r4, [r3, #0]
   10fb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d03e      	beq.n	1103a <__register_exitproc+0x9e>
   10fbc:	685a      	ldr	r2, [r3, #4]
   10fbe:	2a1f      	cmp	r2, #31
   10fc0:	dc1c      	bgt.n	10ffc <__register_exitproc+0x60>
   10fc2:	f102 0e01 	add.w	lr, r2, #1
   10fc6:	b176      	cbz	r6, 10fe6 <__register_exitproc+0x4a>
   10fc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10fcc:	2401      	movs	r4, #1
   10fce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10fd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10fd6:	4094      	lsls	r4, r2
   10fd8:	4320      	orrs	r0, r4
   10fda:	2e02      	cmp	r6, #2
   10fdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10fe0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10fe4:	d023      	beq.n	1102e <__register_exitproc+0x92>
   10fe6:	3202      	adds	r2, #2
   10fe8:	f8c3 e004 	str.w	lr, [r3, #4]
   10fec:	6828      	ldr	r0, [r5, #0]
   10fee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10ff2:	f000 f861 	bl	110b8 <__retarget_lock_release_recursive>
   10ff6:	2000      	movs	r0, #0
   10ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10ffc:	4b17      	ldr	r3, [pc, #92]	; (1105c <__register_exitproc+0xc0>)
   10ffe:	b30b      	cbz	r3, 11044 <__register_exitproc+0xa8>
   11000:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11004:	f7fc fe58 	bl	dcb8 <malloc>
   11008:	4603      	mov	r3, r0
   1100a:	b1d8      	cbz	r0, 11044 <__register_exitproc+0xa8>
   1100c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11010:	6002      	str	r2, [r0, #0]
   11012:	2100      	movs	r1, #0
   11014:	6041      	str	r1, [r0, #4]
   11016:	460a      	mov	r2, r1
   11018:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1101c:	f04f 0e01 	mov.w	lr, #1
   11020:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11024:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11028:	2e00      	cmp	r6, #0
   1102a:	d0dc      	beq.n	10fe6 <__register_exitproc+0x4a>
   1102c:	e7cc      	b.n	10fc8 <__register_exitproc+0x2c>
   1102e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11032:	430c      	orrs	r4, r1
   11034:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11038:	e7d5      	b.n	10fe6 <__register_exitproc+0x4a>
   1103a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1103e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11042:	e7bb      	b.n	10fbc <__register_exitproc+0x20>
   11044:	6828      	ldr	r0, [r5, #0]
   11046:	f000 f837 	bl	110b8 <__retarget_lock_release_recursive>
   1104a:	f04f 30ff 	mov.w	r0, #4294967295
   1104e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11052:	bf00      	nop
   11054:	20000638 	.word	0x20000638
   11058:	000115d8 	.word	0x000115d8
   1105c:	0000dcb9 	.word	0x0000dcb9

00011060 <register_fini>:
   11060:	4b02      	ldr	r3, [pc, #8]	; (1106c <register_fini+0xc>)
   11062:	b113      	cbz	r3, 1106a <register_fini+0xa>
   11064:	4802      	ldr	r0, [pc, #8]	; (11070 <register_fini+0x10>)
   11066:	f000 b805 	b.w	11074 <atexit>
   1106a:	4770      	bx	lr
   1106c:	00000000 	.word	0x00000000
   11070:	00011081 	.word	0x00011081

00011074 <atexit>:
   11074:	2300      	movs	r3, #0
   11076:	4601      	mov	r1, r0
   11078:	461a      	mov	r2, r3
   1107a:	4618      	mov	r0, r3
   1107c:	f7ff bf8e 	b.w	10f9c <__register_exitproc>

00011080 <__libc_fini_array>:
   11080:	b538      	push	{r3, r4, r5, lr}
   11082:	4c0a      	ldr	r4, [pc, #40]	; (110ac <__libc_fini_array+0x2c>)
   11084:	4d0a      	ldr	r5, [pc, #40]	; (110b0 <__libc_fini_array+0x30>)
   11086:	1b64      	subs	r4, r4, r5
   11088:	10a4      	asrs	r4, r4, #2
   1108a:	d00a      	beq.n	110a2 <__libc_fini_array+0x22>
   1108c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11090:	3b01      	subs	r3, #1
   11092:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11096:	3c01      	subs	r4, #1
   11098:	f855 3904 	ldr.w	r3, [r5], #-4
   1109c:	4798      	blx	r3
   1109e:	2c00      	cmp	r4, #0
   110a0:	d1f9      	bne.n	11096 <__libc_fini_array+0x16>
   110a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   110a6:	f000 bab5 	b.w	11614 <_fini>
   110aa:	bf00      	nop
   110ac:	00011624 	.word	0x00011624
   110b0:	00011620 	.word	0x00011620

000110b4 <__retarget_lock_acquire_recursive>:
   110b4:	4770      	bx	lr
   110b6:	bf00      	nop

000110b8 <__retarget_lock_release_recursive>:
   110b8:	4770      	bx	lr
   110ba:	bf00      	nop
   110bc:	682f2e2e 	.word	0x682f2e2e
   110c0:	702f6c70 	.word	0x702f6c70
   110c4:	2f74726f 	.word	0x2f74726f
   110c8:	5f6c7068 	.word	0x5f6c7068
   110cc:	6f697067 	.word	0x6f697067
   110d0:	7361625f 	.word	0x7361625f
   110d4:	00682e65 	.word	0x00682e65
   110d8:	682f2e2e 	.word	0x682f2e2e
   110dc:	692f6c61 	.word	0x692f6c61
   110e0:	756c636e 	.word	0x756c636e
   110e4:	682f6564 	.word	0x682f6564
   110e8:	775f6c61 	.word	0x775f6c61
   110ec:	682e7464 	.word	0x682e7464
   110f0:	00000000 	.word	0x00000000
   110f4:	682f2e2e 	.word	0x682f2e2e
   110f8:	732f6c61 	.word	0x732f6c61
   110fc:	682f6372 	.word	0x682f6372
   11100:	635f6c61 	.word	0x635f6c61
   11104:	6e656c61 	.word	0x6e656c61
   11108:	2e726164 	.word	0x2e726164
   1110c:	00000063 	.word	0x00000063
   11110:	682f2e2e 	.word	0x682f2e2e
   11114:	732f6c61 	.word	0x732f6c61
   11118:	682f6372 	.word	0x682f6372
   1111c:	635f6c61 	.word	0x635f6c61
   11120:	615f6e61 	.word	0x615f6e61
   11124:	636e7973 	.word	0x636e7973
   11128:	0000632e 	.word	0x0000632e
   1112c:	682f2e2e 	.word	0x682f2e2e
   11130:	732f6c61 	.word	0x732f6c61
   11134:	682f6372 	.word	0x682f6372
   11138:	635f6c61 	.word	0x635f6c61
   1113c:	735f6372 	.word	0x735f6372
   11140:	2e636e79 	.word	0x2e636e79
   11144:	00000063 	.word	0x00000063
   11148:	682f2e2e 	.word	0x682f2e2e
   1114c:	732f6c61 	.word	0x732f6c61
   11150:	682f6372 	.word	0x682f6372
   11154:	695f6c61 	.word	0x695f6c61
   11158:	6d5f6332 	.word	0x6d5f6332
   1115c:	6e79735f 	.word	0x6e79735f
   11160:	00632e63 	.word	0x00632e63
   11164:	682f2e2e 	.word	0x682f2e2e
   11168:	732f6c61 	.word	0x732f6c61
   1116c:	682f6372 	.word	0x682f6372
   11170:	705f6c61 	.word	0x705f6c61
   11174:	632e6d77 	.word	0x632e6d77
   11178:	00000000 	.word	0x00000000
   1117c:	682f2e2e 	.word	0x682f2e2e
   11180:	732f6c61 	.word	0x732f6c61
   11184:	682f6372 	.word	0x682f6372
   11188:	715f6c61 	.word	0x715f6c61
   1118c:	5f697073 	.word	0x5f697073
   11190:	636e7973 	.word	0x636e7973
   11194:	0000632e 	.word	0x0000632e
   11198:	682f2e2e 	.word	0x682f2e2e
   1119c:	732f6c61 	.word	0x732f6c61
   111a0:	682f6372 	.word	0x682f6372
   111a4:	735f6c61 	.word	0x735f6c61
   111a8:	6d5f6970 	.word	0x6d5f6970
   111ac:	6e79735f 	.word	0x6e79735f
   111b0:	00632e63 	.word	0x00632e63
   111b4:	682f2e2e 	.word	0x682f2e2e
   111b8:	732f6c61 	.word	0x732f6c61
   111bc:	682f6372 	.word	0x682f6372
   111c0:	745f6c61 	.word	0x745f6c61
   111c4:	72656d69 	.word	0x72656d69
   111c8:	0000632e 	.word	0x0000632e
   111cc:	682f2e2e 	.word	0x682f2e2e
   111d0:	752f6c61 	.word	0x752f6c61
   111d4:	736c6974 	.word	0x736c6974
   111d8:	6372732f 	.word	0x6372732f
   111dc:	6974752f 	.word	0x6974752f
   111e0:	6c5f736c 	.word	0x6c5f736c
   111e4:	2e747369 	.word	0x2e747369
   111e8:	00000063 	.word	0x00000063

000111ec <_map>:
   111ec:	00000000 00000040 00000001 00000021     ....@.......!...
   111fc:	00000003 00000003 00000004 00000004     ................
   1120c:	00000005 00000005 00000006 00000056     ............V...
   1121c:	00000007 00000057 00000008 00000028     ....W.......(...
   1122c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1123c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001124c <user_mux_confs>:
   1124c:	00020100 00000000 00000000 00000000     ................
	...

00011290 <channel_confs>:
   11290:	0660065f 00000000 00000000 00000000     _.`.............
	...

000112d0 <interrupt_cfg>:
	...
   11350:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   11360:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   11370:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   11380:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   11390:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   113a0:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   113b0:	43000400 43000800 43000c00              ...C...C...C

000113bc <sercomspi_regs>:
   113bc:	0020000c 00020000 00000000 01ff0001     .. .............
   113cc:	30000c04 02000000 00000000 ff001700     ...0............
   113dc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   113ec:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   113fc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1140c:	43001400 43001800                       ...C...C

00011414 <_usb_ep_cfgs>:
   11414:	20000b50 00000000 00000040 20000b90     P.. ....@...... 
   11424:	20000bd0 00400040 20000c10 20000c50     ... @.@.... P.. 
   11434:	00400040 20000c90 20000cd0 00400040     @.@.... ... @.@.
   11444:	20000d10 20000d50 00400040 00000804     ... P.. @.@.....
   11454:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   11464:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   11474:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   11484:	7361625f 00682e65                       _base.h.

0001148c <n25q256a_interface>:
   1148c:	0000b2a9 0000b34d 0000b45d 0000b615     ....M...].......
   1149c:	0000b6a5 752f2e2e 642f6273 63697665     ....../usb/devic
   114ac:	73752f65 2e636462 00000063              e/usbdc.c...

000114b8 <_ZTV9CDC_Class>:
	...
   114c0:	0000d5ad 0000d68d 0000d231 0000d575     ........1...u...
   114d0:	0000d725 0000d539 0000d44d 0000d49d     %...9...M.......
   114e0:	0000d595 0000d5f5                       ........

000114e8 <_ZTV6Stream>:
	...
   114f0:	0000dccd 0000d8cd 0000d231 0000d245     ........1...E...
   11500:	0000dccd 0000dccd 0000dccd 2e257830     ............0x%.
   11510:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   11520:	0066766f                                ovf.

00011524 <_ZTV5Print>:
	...
   1152c:	0000dccd 0000d8cd 0000d231 0000d245     ........1...E...
   1153c:	73616c46 654d2068 79726f6d 6c655320     Flash Memory Sel
   1154c:	73655466 41502074 44455353 00000000     fTest PASSED....
   1155c:	00000a0d 73616c46 654d2068 79726f6d     ....Flash Memory
   1156c:	6c655320 73655466 41462074 44454c49      SelfTest FAILED
   1157c:	00000000 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   1158c:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   1159c:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   115ac:	6f697067 7361625f 00682e65              gpio_base.h.

000115b8 <defaultParameters>:
   115b8:	00004020                                 @..

000115bc <defaultPreferences>:
   115bc:	000000fa 00000032 682f2e2e 732f6c61     ....2...../hal/s
   115cc:	682f6372 695f6c61 00632e6f              rc/hal_io.c.

000115d8 <_global_impure_ptr>:
   115d8:	20000210                                ... 

000115dc <_init>:
   115dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115de:	bf00      	nop
   115e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   115e2:	bc08      	pop	{r3}
   115e4:	469e      	mov	lr, r3
   115e6:	4770      	bx	lr

000115e8 <__init_array_start>:
   115e8:	00011061 	.word	0x00011061

000115ec <__frame_dummy_init_array_entry>:
   115ec:	00000289 000003bd 00000561 0000d1f9     ........a.......
   115fc:	0000d87d 0000dca5 0000de21 0000f375     }.......!...u...
   1160c:	0000fa25 00010955                       %...U...

00011614 <_fini>:
   11614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11616:	bf00      	nop
   11618:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1161a:	bc08      	pop	{r3}
   1161c:	469e      	mov	lr, r3
   1161e:	4770      	bx	lr

00011620 <__fini_array_start>:
   11620:	00000265 	.word	0x00000265
