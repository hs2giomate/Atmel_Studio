
ALU_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ff8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00005ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200e0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200e0  2**0
                  CONTENTS
  4 .bss          000007a4  200000e0  000060d8  000200e0  2**2
                  ALLOC
  5 .stack        00010004  20000884  0000687c  000200e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002010e  2**0
                  CONTENTS, READONLY
  8 .debug_info   000575cd  00000000  00000000  00020167  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000757f  00000000  00000000  00077734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fdc4  00000000  00000000  0007ecb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001698  00000000  00000000  0009ea77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f38  00000000  00000000  000a010f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fba1  00000000  00000000  000a2047  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000290c3  00000000  00000000  000e1be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012f5df  00000000  00000000  0010acab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bac  00000000  00000000  0023a28c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 08 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	69 26 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     i&..............
      7c:	ed 02 00 00 39 21 00 00 45 21 00 00 51 21 00 00     ....9!..E!..Q!..
      8c:	5d 21 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ]!..............
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	85 25 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .%..............
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 a9 2c 00 00 bd 2c 00 00 d1 2c 00 00     .....,...,...,..
     144:	e5 2c 00 00 f9 2c 00 00 0d 2d 00 00 21 2d 00 00     .,...,...-..!-..
     154:	35 2d 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     5-..............
     164:	ed 02 00 00 49 2d 00 00 5d 2d 00 00 71 2d 00 00     ....I-..]-..q-..
     174:	85 2d 00 00 ed 02 00 00 45 1e 00 00 fd 48 00 00     .-......E....H..
     184:	09 49 00 00 15 49 00 00 21 49 00 00 ed 02 00 00     .I...I..!I......
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 cd 35 00 00 e1 35 00 00     .........5...5..
     1f4:	f5 35 00 00 09 36 00 00 ed 02 00 00 ed 02 00 00     .5...6..........
     204:	ed 02 00 00 1d 36 00 00 ed 02 00 00 ed 02 00 00     .....6..........
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000e0 	.word	0x200000e0
     280:	00000000 	.word	0x00000000
     284:	00005ff8 	.word	0x00005ff8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005ff8 	.word	0x00005ff8
     2c4:	200000e4 	.word	0x200000e4
     2c8:	00005ff8 	.word	0x00005ff8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	spi_nor_flash_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000cb1 	.word	0x00000cb1
     2e4:	00005b75 	.word	0x00005b75
     2e8:	00005061 	.word	0x00005061

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	00005ff8 	.word	0x00005ff8
     36c:	200000e0 	.word	0x200000e0
     370:	20000884 	.word	0x20000884
     374:	200000e0 	.word	0x200000e0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00005b81 	.word	0x00005b81
     384:	0000499d 	.word	0x0000499d

00000388 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     388:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     38a:	4a05      	ldr	r2, [pc, #20]	; (3a0 <CRC_CALC_init+0x18>)
     38c:	6993      	ldr	r3, [r2, #24]
     38e:	f043 0302 	orr.w	r3, r3, #2
     392:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_CALC, DSU);
     394:	4903      	ldr	r1, [pc, #12]	; (3a4 <CRC_CALC_init+0x1c>)
     396:	4804      	ldr	r0, [pc, #16]	; (3a8 <CRC_CALC_init+0x20>)
     398:	4b04      	ldr	r3, [pc, #16]	; (3ac <CRC_CALC_init+0x24>)
     39a:	4798      	blx	r3
     39c:	bd08      	pop	{r3, pc}
     39e:	bf00      	nop
     3a0:	40000800 	.word	0x40000800
     3a4:	41002000 	.word	0x41002000
     3a8:	2000082c 	.word	0x2000082c
     3ac:	00000fa9 	.word	0x00000fa9

000003b0 <EXTERNAL_IRQ_0_init>:
}

void EXTERNAL_IRQ_0_init(void)
{
     3b0:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3b2:	2244      	movs	r2, #68	; 0x44
     3b4:	4b43      	ldr	r3, [pc, #268]	; (4c4 <EXTERNAL_IRQ_0_init+0x114>)
     3b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     3ba:	4a43      	ldr	r2, [pc, #268]	; (4c8 <EXTERNAL_IRQ_0_init+0x118>)
     3bc:	6953      	ldr	r3, [r2, #20]
     3be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3c2:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c4:	4b41      	ldr	r3, [pc, #260]	; (4cc <EXTERNAL_IRQ_0_init+0x11c>)
     3c6:	2210      	movs	r2, #16
     3c8:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ca:	4941      	ldr	r1, [pc, #260]	; (4d0 <EXTERNAL_IRQ_0_init+0x120>)
     3cc:	6299      	str	r1, [r3, #40]	; 0x28
     3ce:	4841      	ldr	r0, [pc, #260]	; (4d4 <EXTERNAL_IRQ_0_init+0x124>)
     3d0:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3d2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3d4:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
     3d8:	f041 0104 	orr.w	r1, r1, #4
     3dc:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e0:	615a      	str	r2, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3fe:	2220      	movs	r2, #32
     400:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     402:	4935      	ldr	r1, [pc, #212]	; (4d8 <EXTERNAL_IRQ_0_init+0x128>)
     404:	6299      	str	r1, [r3, #40]	; 0x28
     406:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     408:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     40a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
     40e:	f041 0104 	orr.w	r1, r1, #4
     412:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     416:	615a      	str	r2, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     418:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     41c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     420:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     428:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     42c:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     430:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     438:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
     440:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     444:	4925      	ldr	r1, [pc, #148]	; (4dc <EXTERNAL_IRQ_0_init+0x12c>)
     446:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     44e:	f893 1156 	ldrb.w	r1, [r3, #342]	; 0x156
     452:	f041 0104 	orr.w	r1, r1, #4
     456:	f883 1156 	strb.w	r1, [r3, #342]	; 0x156
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     45a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45e:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
	tmp &= ~PORT_PINCFG_PMUXEN;
     462:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     466:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46a:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46e:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     472:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     47e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     482:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     486:	4916      	ldr	r1, [pc, #88]	; (4e0 <EXTERNAL_IRQ_0_init+0x130>)
     488:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     48c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     490:	f893 1157 	ldrb.w	r1, [r3, #343]	; 0x157
     494:	f041 0104 	orr.w	r1, r1, #4
     498:	f883 1157 	strb.w	r1, [r3, #343]	; 0x157
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     49c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a0:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ac:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b0:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);

	ext_irq_init();
     4bc:	4b09      	ldr	r3, [pc, #36]	; (4e4 <EXTERNAL_IRQ_0_init+0x134>)
     4be:	4798      	blx	r3
     4c0:	bd08      	pop	{r3, pc}
     4c2:	bf00      	nop
     4c4:	40001c00 	.word	0x40001c00
     4c8:	40000800 	.word	0x40000800
     4cc:	41008000 	.word	0x41008000
     4d0:	40020010 	.word	0x40020010
     4d4:	c0020000 	.word	0xc0020000
     4d8:	40020020 	.word	0x40020020
     4dc:	c0020040 	.word	0xc0020040
     4e0:	c0020080 	.word	0xc0020080
     4e4:	00001055 	.word	0x00001055

000004e8 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e8:	b508      	push	{r3, lr}
     4ea:	2244      	movs	r2, #68	; 0x44
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <EVENT_SYSTEM_0_init+0x1c>)
     4ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4f2:	4a05      	ldr	r2, [pc, #20]	; (508 <EVENT_SYSTEM_0_init+0x20>)
     4f4:	6993      	ldr	r3, [r2, #24]
     4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     4fa:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     4fc:	4b03      	ldr	r3, [pc, #12]	; (50c <EVENT_SYSTEM_0_init+0x24>)
     4fe:	4798      	blx	r3
     500:	bd08      	pop	{r3, pc}
     502:	bf00      	nop
     504:	40001c00 	.word	0x40001c00
     508:	40000800 	.word	0x40000800
     50c:	00000ff9 	.word	0x00000ff9

00000510 <QSPI_N25Q256_PORT_init>:
}

void QSPI_N25Q256_PORT_init(void)
{
     510:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     512:	4b5a      	ldr	r3, [pc, #360]	; (67c <QSPI_N25Q256_PORT_init+0x16c>)
     514:	f44f 6500 	mov.w	r5, #2048	; 0x800
     518:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51c:	4a58      	ldr	r2, [pc, #352]	; (680 <QSPI_N25Q256_PORT_init+0x170>)
     51e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     522:	4858      	ldr	r0, [pc, #352]	; (684 <QSPI_N25Q256_PORT_init+0x174>)
     524:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     528:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     52c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     530:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     534:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     53c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     540:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     544:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     548:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     54c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     550:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     554:	f44f 7280 	mov.w	r2, #256	; 0x100
     558:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55a:	494b      	ldr	r1, [pc, #300]	; (688 <QSPI_N25Q256_PORT_init+0x178>)
     55c:	6299      	str	r1, [r3, #40]	; 0x28
     55e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     562:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     564:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     566:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     56a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     56e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     592:	f44f 7200 	mov.w	r2, #512	; 0x200
     596:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     598:	f501 7180 	add.w	r1, r1, #256	; 0x100
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5a6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5c6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
     5d2:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d4:	4a2d      	ldr	r2, [pc, #180]	; (68c <QSPI_N25Q256_PORT_init+0x17c>)
     5d6:	629a      	str	r2, [r3, #40]	; 0x28
     5d8:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5da:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5dc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     5e0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e8:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     600:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     608:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     60a:	4a21      	ldr	r2, [pc, #132]	; (690 <QSPI_N25Q256_PORT_init+0x180>)
     60c:	629a      	str	r2, [r3, #40]	; 0x28
     60e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     610:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     612:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     616:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     61a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     622:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     626:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     62e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     632:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     636:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     63a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     63e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     642:	4a14      	ldr	r2, [pc, #80]	; (694 <QSPI_N25Q256_PORT_init+0x184>)
     644:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     648:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     64c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     650:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     654:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     658:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     65c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     660:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     664:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     668:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     66c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     670:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     674:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
}
     678:	bc30      	pop	{r4, r5}
     67a:	4770      	bx	lr
     67c:	41008000 	.word	0x41008000
     680:	40020800 	.word	0x40020800
     684:	c0020000 	.word	0xc0020000
     688:	40000100 	.word	0x40000100
     68c:	40000400 	.word	0x40000400
     690:	40000800 	.word	0x40000800
     694:	40020400 	.word	0x40020400

00000698 <QSPI_N25Q256_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     698:	4b06      	ldr	r3, [pc, #24]	; (6b4 <QSPI_N25Q256_CLOCK_init+0x1c>)
     69a:	691a      	ldr	r2, [r3, #16]
     69c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6a0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6a2:	691a      	ldr	r2, [r3, #16]
     6a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6a8:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6aa:	69da      	ldr	r2, [r3, #28]
     6ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6b0:	61da      	str	r2, [r3, #28]
     6b2:	4770      	bx	lr
     6b4:	40000800 	.word	0x40000800

000006b8 <QSPI_N25Q256_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_N25Q256_init(void)
{
     6b8:	b508      	push	{r3, lr}
	QSPI_N25Q256_CLOCK_init();
     6ba:	4b04      	ldr	r3, [pc, #16]	; (6cc <QSPI_N25Q256_init+0x14>)
     6bc:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     6be:	4904      	ldr	r1, [pc, #16]	; (6d0 <QSPI_N25Q256_init+0x18>)
     6c0:	4804      	ldr	r0, [pc, #16]	; (6d4 <QSPI_N25Q256_init+0x1c>)
     6c2:	4b05      	ldr	r3, [pc, #20]	; (6d8 <QSPI_N25Q256_init+0x20>)
     6c4:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     6c6:	4b05      	ldr	r3, [pc, #20]	; (6dc <QSPI_N25Q256_init+0x24>)
     6c8:	4798      	blx	r3
     6ca:	bd08      	pop	{r3, pc}
     6cc:	00000699 	.word	0x00000699
     6d0:	42003400 	.word	0x42003400
     6d4:	200006d0 	.word	0x200006d0
     6d8:	000011e1 	.word	0x000011e1
     6dc:	00000511 	.word	0x00000511

000006e0 <DATETIME_CLOCK_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     6e0:	4a02      	ldr	r2, [pc, #8]	; (6ec <DATETIME_CLOCK_CLOCK_init+0xc>)
     6e2:	6953      	ldr	r3, [r2, #20]
     6e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6e8:	6153      	str	r3, [r2, #20]
     6ea:	4770      	bx	lr
     6ec:	40000800 	.word	0x40000800

000006f0 <DATETIME_CLOCK_init>:
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}

void DATETIME_CLOCK_init(void)
{
     6f0:	b508      	push	{r3, lr}
	DATETIME_CLOCK_CLOCK_init();
     6f2:	4b03      	ldr	r3, [pc, #12]	; (700 <DATETIME_CLOCK_init+0x10>)
     6f4:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
     6f6:	4903      	ldr	r1, [pc, #12]	; (704 <DATETIME_CLOCK_init+0x14>)
     6f8:	4803      	ldr	r0, [pc, #12]	; (708 <DATETIME_CLOCK_init+0x18>)
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <DATETIME_CLOCK_init+0x1c>)
     6fc:	4798      	blx	r3
     6fe:	bd08      	pop	{r3, pc}
     700:	000006e1 	.word	0x000006e1
     704:	40002400 	.word	0x40002400
     708:	20000808 	.word	0x20000808
     70c:	00000ef5 	.word	0x00000ef5

00000710 <SPI_TEMP_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     710:	4b2c      	ldr	r3, [pc, #176]	; (7c4 <SPI_TEMP_PORT_init+0xb4>)
     712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     716:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     71e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     722:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     726:	4a28      	ldr	r2, [pc, #160]	; (7c8 <SPI_TEMP_PORT_init+0xb8>)
     728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     72c:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
	tmp &= ~PORT_PINCFG_PMUXEN;
     730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     734:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     738:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     73c:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     740:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     744:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     748:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     74c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     750:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     758:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     75c:	4a1b      	ldr	r2, [pc, #108]	; (7cc <SPI_TEMP_PORT_init+0xbc>)
     75e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     762:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
	tmp &= ~PORT_PINCFG_PMUXEN;
     766:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     76e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     772:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     776:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     77e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78a:	4a11      	ldr	r2, [pc, #68]	; (7d0 <SPI_TEMP_PORT_init+0xc0>)
     78c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     790:	4a10      	ldr	r2, [pc, #64]	; (7d4 <SPI_TEMP_PORT_init+0xc4>)
     792:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     796:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
     79a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     79e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7b2:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7ba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7be:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
     7c2:	4770      	bx	lr
     7c4:	41008000 	.word	0x41008000
     7c8:	c0000800 	.word	0xc0000800
     7cc:	c0000400 	.word	0xc0000400
     7d0:	40020000 	.word	0x40020000
     7d4:	c0021000 	.word	0xc0021000

000007d8 <SPI_TEMP_CLOCK_init>:
     7d8:	4b06      	ldr	r3, [pc, #24]	; (7f4 <SPI_TEMP_CLOCK_init+0x1c>)
     7da:	2243      	movs	r2, #67	; 0x43
     7dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     7e0:	224a      	movs	r2, #74	; 0x4a
     7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     7e6:	4a04      	ldr	r2, [pc, #16]	; (7f8 <SPI_TEMP_CLOCK_init+0x20>)
     7e8:	6a13      	ldr	r3, [r2, #32]
     7ea:	f043 0301 	orr.w	r3, r3, #1
     7ee:	6213      	str	r3, [r2, #32]
     7f0:	4770      	bx	lr
     7f2:	bf00      	nop
     7f4:	40001c00 	.word	0x40001c00
     7f8:	40000800 	.word	0x40000800

000007fc <SPI_TEMP_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_TEMP_init(void)
{
     7fc:	b508      	push	{r3, lr}
	SPI_TEMP_CLOCK_init();
     7fe:	4b05      	ldr	r3, [pc, #20]	; (814 <SPI_TEMP_init+0x18>)
     800:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
     802:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     806:	4804      	ldr	r0, [pc, #16]	; (818 <SPI_TEMP_init+0x1c>)
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <SPI_TEMP_init+0x20>)
     80a:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     80c:	4b04      	ldr	r3, [pc, #16]	; (820 <SPI_TEMP_init+0x24>)
     80e:	4798      	blx	r3
     810:	bd08      	pop	{r3, pc}
     812:	bf00      	nop
     814:	000007d9 	.word	0x000007d9
     818:	20000688 	.word	0x20000688
     81c:	00001451 	.word	0x00001451
     820:	00000711 	.word	0x00000711

00000824 <I2C_EXPANDER_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	4b16      	ldr	r3, [pc, #88]	; (880 <I2C_EXPANDER_PORT_init+0x5c>)
     826:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     82a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     82e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     832:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     836:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     83a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     842:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     846:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     84a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     852:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     856:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     85a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     862:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     866:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     86a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     86e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     872:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     876:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     87a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     87e:	4770      	bx	lr
     880:	41008000 	.word	0x41008000

00000884 <I2C_EXPANDER_CLOCK_init>:
     884:	4b06      	ldr	r3, [pc, #24]	; (8a0 <I2C_EXPANDER_CLOCK_init+0x1c>)
     886:	2244      	movs	r2, #68	; 0x44
     888:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     88c:	224a      	movs	r2, #74	; 0x4a
     88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     892:	4a04      	ldr	r2, [pc, #16]	; (8a4 <I2C_EXPANDER_CLOCK_init+0x20>)
     894:	6a13      	ldr	r3, [r2, #32]
     896:	f043 0302 	orr.w	r3, r3, #2
     89a:	6213      	str	r3, [r2, #32]
     89c:	4770      	bx	lr
     89e:	bf00      	nop
     8a0:	40001c00 	.word	0x40001c00
     8a4:	40000800 	.word	0x40000800

000008a8 <I2C_EXPANDER_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_EXPANDER_init(void)
{
     8a8:	b508      	push	{r3, lr}
	I2C_EXPANDER_CLOCK_init();
     8aa:	4b04      	ldr	r3, [pc, #16]	; (8bc <I2C_EXPANDER_init+0x14>)
     8ac:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
     8ae:	4904      	ldr	r1, [pc, #16]	; (8c0 <I2C_EXPANDER_init+0x18>)
     8b0:	4804      	ldr	r0, [pc, #16]	; (8c4 <I2C_EXPANDER_init+0x1c>)
     8b2:	4b05      	ldr	r3, [pc, #20]	; (8c8 <I2C_EXPANDER_init+0x20>)
     8b4:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
     8b6:	4b05      	ldr	r3, [pc, #20]	; (8cc <I2C_EXPANDER_init+0x24>)
     8b8:	4798      	blx	r3
     8ba:	bd08      	pop	{r3, pc}
     8bc:	00000885 	.word	0x00000885
     8c0:	43000400 	.word	0x43000400
     8c4:	2000076c 	.word	0x2000076c
     8c8:	0000111d 	.word	0x0000111d
     8cc:	00000825 	.word	0x00000825

000008d0 <SPI_HI3593_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d0:	4b2d      	ldr	r3, [pc, #180]	; (988 <SPI_HI3593_PORT_init+0xb8>)
     8d2:	2210      	movs	r2, #16
     8d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     8e0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     8e4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     8e8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8ec:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8f4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8f8:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8fc:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     900:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     904:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     908:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     90c:	2220      	movs	r2, #32
     90e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     912:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     916:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     91a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     91e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     922:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
     926:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     92a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     932:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     936:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     93a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     942:	2280      	movs	r2, #128	; 0x80
     944:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     94c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     950:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     954:	4a0d      	ldr	r2, [pc, #52]	; (98c <SPI_HI3593_PORT_init+0xbc>)
     956:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     95a:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
     95e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     962:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     966:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
	tmp &= ~PORT_PINCFG_PMUXEN;
     96a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     96e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     972:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     976:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     97a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     97e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     982:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
     986:	4770      	bx	lr
     988:	41008000 	.word	0x41008000
     98c:	c0020000 	.word	0xc0020000

00000990 <SPI_HI3593_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <SPI_HI3593_CLOCK_init+0x1c>)
     992:	2243      	movs	r2, #67	; 0x43
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	224a      	movs	r2, #74	; 0x4a
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <SPI_HI3593_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <SPI_HI3593_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_HI3593_init(void)
{
     9b4:	b508      	push	{r3, lr}
	SPI_HI3593_CLOCK_init();
     9b6:	4b04      	ldr	r3, [pc, #16]	; (9c8 <SPI_HI3593_init+0x14>)
     9b8:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
     9ba:	4904      	ldr	r1, [pc, #16]	; (9cc <SPI_HI3593_init+0x18>)
     9bc:	4804      	ldr	r0, [pc, #16]	; (9d0 <SPI_HI3593_init+0x1c>)
     9be:	4b05      	ldr	r3, [pc, #20]	; (9d4 <SPI_HI3593_init+0x20>)
     9c0:	4798      	blx	r3
	SPI_HI3593_PORT_init();
     9c2:	4b05      	ldr	r3, [pc, #20]	; (9d8 <SPI_HI3593_init+0x24>)
     9c4:	4798      	blx	r3
     9c6:	bd08      	pop	{r3, pc}
     9c8:	00000991 	.word	0x00000991
     9cc:	43000800 	.word	0x43000800
     9d0:	20000670 	.word	0x20000670
     9d4:	000014d5 	.word	0x000014d5
     9d8:	000008d1 	.word	0x000008d1

000009dc <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9dc:	4b16      	ldr	r3, [pc, #88]	; (a38 <I2C_EEPROM_PORT_init+0x5c>)
     9de:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     9e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9e6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ea:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9f6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9fa:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9fe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a02:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a06:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a0a:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     a0e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a12:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a1e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a22:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a26:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a2a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a2e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a32:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     a36:	4770      	bx	lr
     a38:	41008000 	.word	0x41008000

00000a3c <I2C_EEPROM_CLOCK_init>:
     a3c:	4b06      	ldr	r3, [pc, #24]	; (a58 <I2C_EEPROM_CLOCK_init+0x1c>)
     a3e:	2244      	movs	r2, #68	; 0x44
     a40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     a44:	224a      	movs	r2, #74	; 0x4a
     a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     a4a:	4a04      	ldr	r2, [pc, #16]	; (a5c <I2C_EEPROM_CLOCK_init+0x20>)
     a4c:	6a13      	ldr	r3, [r2, #32]
     a4e:	f043 0308 	orr.w	r3, r3, #8
     a52:	6213      	str	r3, [r2, #32]
     a54:	4770      	bx	lr
     a56:	bf00      	nop
     a58:	40001c00 	.word	0x40001c00
     a5c:	40000800 	.word	0x40000800

00000a60 <I2C_EEPROM_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     a60:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <I2C_EEPROM_init+0x14>)
     a64:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
     a66:	4904      	ldr	r1, [pc, #16]	; (a78 <I2C_EEPROM_init+0x18>)
     a68:	4804      	ldr	r0, [pc, #16]	; (a7c <I2C_EEPROM_init+0x1c>)
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <I2C_EEPROM_init+0x20>)
     a6c:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     a6e:	4b05      	ldr	r3, [pc, #20]	; (a84 <I2C_EEPROM_init+0x24>)
     a70:	4798      	blx	r3
     a72:	bd08      	pop	{r3, pc}
     a74:	00000a3d 	.word	0x00000a3d
     a78:	43000c00 	.word	0x43000c00
     a7c:	200007c8 	.word	0x200007c8
     a80:	0000111d 	.word	0x0000111d
     a84:	000009dd 	.word	0x000009dd

00000a88 <LIVE_PULSE_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a88:	4b10      	ldr	r3, [pc, #64]	; (acc <LIVE_PULSE_PORT_init+0x44>)
     a8a:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     a8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a92:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a96:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a9a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a9e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     aa2:	f042 0204 	orr.w	r2, r2, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     aa6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aaa:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     aae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ab2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aba:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     abe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ac6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     aca:	4770      	bx	lr
     acc:	41008000 	.word	0x41008000

00000ad0 <LIVE_PULSE_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     ad0:	4a04      	ldr	r2, [pc, #16]	; (ae4 <LIVE_PULSE_CLOCK_init+0x14>)
     ad2:	6a13      	ldr	r3, [r2, #32]
     ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ad8:	6213      	str	r3, [r2, #32]
     ada:	224b      	movs	r2, #75	; 0x4b
     adc:	4b02      	ldr	r3, [pc, #8]	; (ae8 <LIVE_PULSE_CLOCK_init+0x18>)
     ade:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     ae2:	4770      	bx	lr
     ae4:	40000800 	.word	0x40000800
     ae8:	40001c00 	.word	0x40001c00

00000aec <LIVE_PULSE_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void LIVE_PULSE_init(void)
{
     aec:	b508      	push	{r3, lr}
	LIVE_PULSE_CLOCK_init();
     aee:	4b06      	ldr	r3, [pc, #24]	; (b08 <LIVE_PULSE_init+0x1c>)
     af0:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
     af2:	4b06      	ldr	r3, [pc, #24]	; (b0c <LIVE_PULSE_init+0x20>)
     af4:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
     af6:	4b06      	ldr	r3, [pc, #24]	; (b10 <LIVE_PULSE_init+0x24>)
     af8:	4798      	blx	r3
     afa:	4602      	mov	r2, r0
     afc:	4905      	ldr	r1, [pc, #20]	; (b14 <LIVE_PULSE_init+0x28>)
     afe:	4806      	ldr	r0, [pc, #24]	; (b18 <LIVE_PULSE_init+0x2c>)
     b00:	4b06      	ldr	r3, [pc, #24]	; (b1c <LIVE_PULSE_init+0x30>)
     b02:	4798      	blx	r3
     b04:	bd08      	pop	{r3, pc}
     b06:	bf00      	nop
     b08:	00000ad1 	.word	0x00000ad1
     b0c:	00000a89 	.word	0x00000a89
     b10:	000035c9 	.word	0x000035c9
     b14:	43001800 	.word	0x43001800
     b18:	2000070c 	.word	0x2000070c
     b1c:	0000119d 	.word	0x0000119d

00000b20 <CDCUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b20:	4b1e      	ldr	r3, [pc, #120]	; (b9c <CDCUSB_PORT_init+0x7c>)
     b22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b26:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b2c:	6299      	str	r1, [r3, #40]	; 0x28
     b2e:	481c      	ldr	r0, [pc, #112]	; (ba0 <CDCUSB_PORT_init+0x80>)
     b30:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b32:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b34:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b38:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b40:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b48:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b50:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b54:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b58:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b64:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b66:	6299      	str	r1, [r3, #40]	; 0x28
     b68:	490e      	ldr	r1, [pc, #56]	; (ba4 <CDCUSB_PORT_init+0x84>)
     b6a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b6c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b6e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b72:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b8a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b8e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b92:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     b9a:	4770      	bx	lr
     b9c:	41008000 	.word	0x41008000
     ba0:	c0000100 	.word	0xc0000100
     ba4:	c0000200 	.word	0xc0000200

00000ba8 <CDCUSB_CLOCK_init>:
     ba8:	2242      	movs	r2, #66	; 0x42
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <CDCUSB_CLOCK_init+0x20>)
     bac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bb0:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     bb4:	691a      	ldr	r2, [r3, #16]
     bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     bba:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     bbc:	699a      	ldr	r2, [r3, #24]
     bbe:	f042 0201 	orr.w	r2, r2, #1
     bc2:	619a      	str	r2, [r3, #24]
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop
     bc8:	40001c00 	.word	0x40001c00

00000bcc <CDCUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void CDCUSB_init(void)
{
     bcc:	b508      	push	{r3, lr}
	CDCUSB_CLOCK_init();
     bce:	4b03      	ldr	r3, [pc, #12]	; (bdc <CDCUSB_init+0x10>)
     bd0:	4798      	blx	r3
	usb_d_init();
     bd2:	4b03      	ldr	r3, [pc, #12]	; (be0 <CDCUSB_init+0x14>)
     bd4:	4798      	blx	r3
	CDCUSB_PORT_init();
     bd6:	4b03      	ldr	r3, [pc, #12]	; (be4 <CDCUSB_init+0x18>)
     bd8:	4798      	blx	r3
     bda:	bd08      	pop	{r3, pc}
     bdc:	00000ba9 	.word	0x00000ba9
     be0:	00001945 	.word	0x00001945
     be4:	00000b21 	.word	0x00000b21

00000be8 <WATCHDOG_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     be8:	4a02      	ldr	r2, [pc, #8]	; (bf4 <WATCHDOG_CLOCK_init+0xc>)
     bea:	6953      	ldr	r3, [r2, #20]
     bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     bf0:	6153      	str	r3, [r2, #20]
     bf2:	4770      	bx	lr
     bf4:	40000800 	.word	0x40000800

00000bf8 <WATCHDOG_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WATCHDOG_init(void)
{
     bf8:	b508      	push	{r3, lr}
	WATCHDOG_CLOCK_init();
     bfa:	4b06      	ldr	r3, [pc, #24]	; (c14 <WATCHDOG_init+0x1c>)
     bfc:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     bfe:	2248      	movs	r2, #72	; 0x48
     c00:	4905      	ldr	r1, [pc, #20]	; (c18 <WATCHDOG_init+0x20>)
     c02:	2001      	movs	r0, #1
     c04:	4b05      	ldr	r3, [pc, #20]	; (c1c <WATCHDOG_init+0x24>)
     c06:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c08:	4805      	ldr	r0, [pc, #20]	; (c20 <WATCHDOG_init+0x28>)
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <WATCHDOG_init+0x2c>)
     c0c:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     c0e:	4b06      	ldr	r3, [pc, #24]	; (c28 <WATCHDOG_init+0x30>)
     c10:	4798      	blx	r3
     c12:	bd08      	pop	{r3, pc}
     c14:	00000be9 	.word	0x00000be9
     c18:	00005bf0 	.word	0x00005bf0
     c1c:	00001c91 	.word	0x00001c91
     c20:	20000828 	.word	0x20000828
     c24:	40002000 	.word	0x40002000
     c28:	0000492d 	.word	0x0000492d

00000c2c <CAN_CCU_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c2c:	4b10      	ldr	r3, [pc, #64]	; (c70 <CAN_CCU_PORT_init+0x44>)
     c2e:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     c32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c36:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c3e:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c42:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c46:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c66:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     c6e:	4770      	bx	lr
     c70:	41008000 	.word	0x41008000

00000c74 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
     c74:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     c76:	4a08      	ldr	r2, [pc, #32]	; (c98 <CAN_CCU_init+0x24>)
     c78:	6913      	ldr	r3, [r2, #16]
     c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     c7e:	6113      	str	r3, [r2, #16]
     c80:	2243      	movs	r2, #67	; 0x43
     c82:	4b06      	ldr	r3, [pc, #24]	; (c9c <CAN_CCU_init+0x28>)
     c84:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_CCU, CAN1);
     c88:	4905      	ldr	r1, [pc, #20]	; (ca0 <CAN_CCU_init+0x2c>)
     c8a:	4806      	ldr	r0, [pc, #24]	; (ca4 <CAN_CCU_init+0x30>)
     c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <CAN_CCU_init+0x34>)
     c8e:	4798      	blx	r3
	CAN_CCU_PORT_init();
     c90:	4b06      	ldr	r3, [pc, #24]	; (cac <CAN_CCU_init+0x38>)
     c92:	4798      	blx	r3
     c94:	bd08      	pop	{r3, pc}
     c96:	bf00      	nop
     c98:	40000800 	.word	0x40000800
     c9c:	40001c00 	.word	0x40001c00
     ca0:	42000400 	.word	0x42000400
     ca4:	20000728 	.word	0x20000728
     ca8:	00000f59 	.word	0x00000f59
     cac:	00000c2d 	.word	0x00000c2d

00000cb0 <system_init>:
}

void system_init(void)
{
     cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     cb4:	4b68      	ldr	r3, [pc, #416]	; (e58 <system_init+0x1a8>)
     cb6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cb8:	4b68      	ldr	r3, [pc, #416]	; (e5c <system_init+0x1ac>)
     cba:	2280      	movs	r2, #128	; 0x80
     cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc0:	4967      	ldr	r1, [pc, #412]	; (e60 <system_init+0x1b0>)
     cc2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     cc6:	4967      	ldr	r1, [pc, #412]	; (e64 <system_init+0x1b4>)
     cc8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cd0:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     cd4:	f041 0104 	orr.w	r1, r1, #4
     cd8:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ce0:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ce8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     cf0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cf8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     cfc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     d00:	4a59      	ldr	r2, [pc, #356]	; (e68 <system_init+0x1b8>)
     d02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d06:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
     d0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d1a:	4954      	ldr	r1, [pc, #336]	; (e6c <system_init+0x1bc>)
     d1c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     d20:	f101 2180 	add.w	r1, r1, #2147516416	; 0x80008000
     d24:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d2c:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
     d30:	f041 0104 	orr.w	r1, r1, #4
     d34:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d3c:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     d4c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d50:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     d58:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d5c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     d60:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d64:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d6c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     d74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     d80:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d84:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d88:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
     d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d90:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     da4:	4a32      	ldr	r2, [pc, #200]	; (e70 <system_init+0x1c0>)
     da6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     daa:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     db2:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	CRC_CALC_init();
     db6:	4b2f      	ldr	r3, [pc, #188]	; (e74 <system_init+0x1c4>)
     db8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     dba:	4b2f      	ldr	r3, [pc, #188]	; (e78 <system_init+0x1c8>)
     dbc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     dbe:	4b2f      	ldr	r3, [pc, #188]	; (e7c <system_init+0x1cc>)
     dc0:	4798      	blx	r3

	QSPI_N25Q256_init();
     dc2:	4b2f      	ldr	r3, [pc, #188]	; (e80 <system_init+0x1d0>)
     dc4:	4798      	blx	r3

	DATETIME_CLOCK_init();
     dc6:	4b2f      	ldr	r3, [pc, #188]	; (e84 <system_init+0x1d4>)
     dc8:	4798      	blx	r3

	SPI_TEMP_init();
     dca:	4b2f      	ldr	r3, [pc, #188]	; (e88 <system_init+0x1d8>)
     dcc:	4798      	blx	r3

	I2C_EXPANDER_init();
     dce:	4b2f      	ldr	r3, [pc, #188]	; (e8c <system_init+0x1dc>)
     dd0:	4798      	blx	r3

	SPI_HI3593_init();
     dd2:	4b2f      	ldr	r3, [pc, #188]	; (e90 <system_init+0x1e0>)
     dd4:	4798      	blx	r3

	I2C_EEPROM_init();
     dd6:	4b2f      	ldr	r3, [pc, #188]	; (e94 <system_init+0x1e4>)
     dd8:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     dda:	4c2f      	ldr	r4, [pc, #188]	; (e98 <system_init+0x1e8>)
     ddc:	6963      	ldr	r3, [r4, #20]
     dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     de2:	6163      	str	r3, [r4, #20]
     de4:	4f2d      	ldr	r7, [pc, #180]	; (e9c <system_init+0x1ec>)
     de6:	2343      	movs	r3, #67	; 0x43
     de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
     dec:	4e2c      	ldr	r6, [pc, #176]	; (ea0 <system_init+0x1f0>)
     dee:	47b0      	blx	r6
     df0:	4602      	mov	r2, r0
     df2:	492c      	ldr	r1, [pc, #176]	; (ea4 <system_init+0x1f4>)
     df4:	482c      	ldr	r0, [pc, #176]	; (ea8 <system_init+0x1f8>)
     df6:	4d2d      	ldr	r5, [pc, #180]	; (eac <system_init+0x1fc>)
     df8:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     dfa:	6963      	ldr	r3, [r4, #20]
     dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e00:	6163      	str	r3, [r4, #20]
     e02:	f04f 0845 	mov.w	r8, #69	; 0x45
     e06:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
     e0a:	47b0      	blx	r6
     e0c:	4602      	mov	r2, r0
     e0e:	4928      	ldr	r1, [pc, #160]	; (eb0 <system_init+0x200>)
     e10:	4828      	ldr	r0, [pc, #160]	; (eb4 <system_init+0x204>)
     e12:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e14:	69a3      	ldr	r3, [r4, #24]
     e16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e1a:	61a3      	str	r3, [r4, #24]
     e1c:	2344      	movs	r3, #68	; 0x44
     e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
     e22:	47b0      	blx	r6
     e24:	4602      	mov	r2, r0
     e26:	4924      	ldr	r1, [pc, #144]	; (eb8 <system_init+0x208>)
     e28:	4824      	ldr	r0, [pc, #144]	; (ebc <system_init+0x20c>)
     e2a:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e2c:	69a3      	ldr	r3, [r4, #24]
     e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e32:	61a3      	str	r3, [r4, #24]
     e34:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
     e38:	47b0      	blx	r6
     e3a:	4602      	mov	r2, r0
     e3c:	4920      	ldr	r1, [pc, #128]	; (ec0 <system_init+0x210>)
     e3e:	4821      	ldr	r0, [pc, #132]	; (ec4 <system_init+0x214>)
     e40:	47a8      	blx	r5

	TIMER_INTERFACE_init();
	TIMER_EVENT_init();
	TIMER_ARINC_init();
	TIMER_HVAC_init();
	LIVE_PULSE_init();
     e42:	4b21      	ldr	r3, [pc, #132]	; (ec8 <system_init+0x218>)
     e44:	4798      	blx	r3

	CDCUSB_init();
     e46:	4b21      	ldr	r3, [pc, #132]	; (ecc <system_init+0x21c>)
     e48:	4798      	blx	r3

	WATCHDOG_init();
     e4a:	4b21      	ldr	r3, [pc, #132]	; (ed0 <system_init+0x220>)
     e4c:	4798      	blx	r3
	CAN_CCU_init();
     e4e:	4b21      	ldr	r3, [pc, #132]	; (ed4 <system_init+0x224>)
     e50:	4798      	blx	r3
     e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e56:	bf00      	nop
     e58:	00001ee1 	.word	0x00001ee1
     e5c:	41008000 	.word	0x41008000
     e60:	40020080 	.word	0x40020080
     e64:	c0020000 	.word	0xc0020000
     e68:	c0002000 	.word	0xc0002000
     e6c:	40020000 	.word	0x40020000
     e70:	c0000004 	.word	0xc0000004
     e74:	00000389 	.word	0x00000389
     e78:	000003b1 	.word	0x000003b1
     e7c:	000004e9 	.word	0x000004e9
     e80:	000006b9 	.word	0x000006b9
     e84:	000006f1 	.word	0x000006f1
     e88:	000007fd 	.word	0x000007fd
     e8c:	000008a9 	.word	0x000008a9
     e90:	000009b5 	.word	0x000009b5
     e94:	00000a61 	.word	0x00000a61
     e98:	40000800 	.word	0x40000800
     e9c:	40001c00 	.word	0x40001c00
     ea0:	000035c5 	.word	0x000035c5
     ea4:	40003800 	.word	0x40003800
     ea8:	200006f0 	.word	0x200006f0
     eac:	000016b5 	.word	0x000016b5
     eb0:	40003c00 	.word	0x40003c00
     eb4:	200006d4 	.word	0x200006d4
     eb8:	4101a000 	.word	0x4101a000
     ebc:	20000750 	.word	0x20000750
     ec0:	4101c000 	.word	0x4101c000
     ec4:	200007ac 	.word	0x200007ac
     ec8:	00000aed 	.word	0x00000aed
     ecc:	00000bcd 	.word	0x00000bcd
     ed0:	00000bf9 	.word	0x00000bf9
     ed4:	00000c75 	.word	0x00000c75

00000ed8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ed8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     edc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     ede:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     ee0:	f3bf 8f5f 	dmb	sy
     ee4:	4770      	bx	lr

00000ee6 <atomic_leave_critical>:
     ee6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     eea:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     eec:	f383 8810 	msr	PRIMASK, r3
     ef0:	4770      	bx	lr
	...

00000ef4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     ef4:	b538      	push	{r3, r4, r5, lr}
     ef6:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     ef8:	4604      	mov	r4, r0
     efa:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
     efe:	490b      	ldr	r1, [pc, #44]	; (f2c <calendar_init+0x38>)
     f00:	3000      	adds	r0, #0
     f02:	bf18      	it	ne
     f04:	2001      	movne	r0, #1
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <calendar_init+0x3c>)
     f08:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     f0a:	6823      	ldr	r3, [r4, #0]
     f0c:	42ab      	cmp	r3, r5
     f0e:	d008      	beq.n	f22 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     f10:	b94b      	cbnz	r3, f26 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     f12:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     f14:	4620      	mov	r0, r4
     f16:	4b07      	ldr	r3, [pc, #28]	; (f34 <calendar_init+0x40>)
     f18:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     f1a:	f240 73b2 	movw	r3, #1970	; 0x7b2
     f1e:	61a3      	str	r3, [r4, #24]

	return ret;
     f20:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
     f22:	2000      	movs	r0, #0
     f24:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
     f26:	f06f 0011 	mvn.w	r0, #17
}
     f2a:	bd38      	pop	{r3, r4, r5, pc}
     f2c:	00005c0c 	.word	0x00005c0c
     f30:	00001c91 	.word	0x00001c91
     f34:	000025c9 	.word	0x000025c9

00000f38 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     f38:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     f3a:	69c3      	ldr	r3, [r0, #28]
     f3c:	b103      	cbz	r3, f40 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
     f3e:	4798      	blx	r3
     f40:	bd08      	pop	{r3, pc}

00000f42 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     f42:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     f44:	6a03      	ldr	r3, [r0, #32]
     f46:	b103      	cbz	r3, f4a <can_rx_done+0x8>
		descr->cb.rx_done(descr);
     f48:	4798      	blx	r3
     f4a:	bd08      	pop	{r3, pc}

00000f4c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     f4c:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f50:	b103      	cbz	r3, f54 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
     f52:	4798      	blx	r3
     f54:	bd08      	pop	{r3, pc}
	...

00000f58 <can_async_init>:
{
     f58:	b538      	push	{r3, r4, r5, lr}
     f5a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     f5c:	4604      	mov	r4, r0
     f5e:	b1a0      	cbz	r0, f8a <can_async_init+0x32>
     f60:	1c08      	adds	r0, r1, #0
     f62:	bf18      	it	ne
     f64:	2001      	movne	r0, #1
     f66:	2241      	movs	r2, #65	; 0x41
     f68:	4909      	ldr	r1, [pc, #36]	; (f90 <can_async_init+0x38>)
     f6a:	4b0a      	ldr	r3, [pc, #40]	; (f94 <can_async_init+0x3c>)
     f6c:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     f6e:	4629      	mov	r1, r5
     f70:	4620      	mov	r0, r4
     f72:	4b09      	ldr	r3, [pc, #36]	; (f98 <can_async_init+0x40>)
     f74:	4798      	blx	r3
	if (rc) {
     f76:	4603      	mov	r3, r0
     f78:	b928      	cbnz	r0, f86 <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
     f7a:	4a08      	ldr	r2, [pc, #32]	; (f9c <can_async_init+0x44>)
     f7c:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     f7e:	4a08      	ldr	r2, [pc, #32]	; (fa0 <can_async_init+0x48>)
     f80:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     f82:	4a08      	ldr	r2, [pc, #32]	; (fa4 <can_async_init+0x4c>)
     f84:	60e2      	str	r2, [r4, #12]
}
     f86:	4618      	mov	r0, r3
     f88:	bd38      	pop	{r3, r4, r5, pc}
     f8a:	2000      	movs	r0, #0
     f8c:	e7eb      	b.n	f66 <can_async_init+0xe>
     f8e:	bf00      	nop
     f90:	00005c28 	.word	0x00005c28
     f94:	00001c91 	.word	0x00001c91
     f98:	00001d39 	.word	0x00001d39
     f9c:	00000f39 	.word	0x00000f39
     fa0:	00000f43 	.word	0x00000f43
     fa4:	00000f4d 	.word	0x00000f4d

00000fa8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
     fa8:	b538      	push	{r3, r4, r5, lr}
     faa:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     fac:	4605      	mov	r5, r0
     fae:	b158      	cbz	r0, fc8 <crc_sync_init+0x20>
     fb0:	1c08      	adds	r0, r1, #0
     fb2:	bf18      	it	ne
     fb4:	2001      	movne	r0, #1
     fb6:	222b      	movs	r2, #43	; 0x2b
     fb8:	4904      	ldr	r1, [pc, #16]	; (fcc <crc_sync_init+0x24>)
     fba:	4b05      	ldr	r3, [pc, #20]	; (fd0 <crc_sync_init+0x28>)
     fbc:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
     fbe:	4621      	mov	r1, r4
     fc0:	4628      	mov	r0, r5
     fc2:	4b04      	ldr	r3, [pc, #16]	; (fd4 <crc_sync_init+0x2c>)
     fc4:	4798      	blx	r3
}
     fc6:	bd38      	pop	{r3, r4, r5, pc}
     fc8:	2000      	movs	r0, #0
     fca:	e7f4      	b.n	fb6 <crc_sync_init+0xe>
     fcc:	00005c44 	.word	0x00005c44
     fd0:	00001c91 	.word	0x00001c91
     fd4:	00001f4d 	.word	0x00001f4d

00000fd8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     fd8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     fda:	4b04      	ldr	r3, [pc, #16]	; (fec <delay_us+0x14>)
     fdc:	681c      	ldr	r4, [r3, #0]
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <delay_us+0x18>)
     fe0:	4798      	blx	r3
     fe2:	4601      	mov	r1, r0
     fe4:	4620      	mov	r0, r4
     fe6:	4b03      	ldr	r3, [pc, #12]	; (ff4 <delay_us+0x1c>)
     fe8:	4798      	blx	r3
     fea:	bd10      	pop	{r4, pc}
     fec:	200000fc 	.word	0x200000fc
     ff0:	00001ec1 	.word	0x00001ec1
     ff4:	00001ed9 	.word	0x00001ed9

00000ff8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     ff8:	b508      	push	{r3, lr}
	return _event_system_init();
     ffa:	4b01      	ldr	r3, [pc, #4]	; (1000 <event_system_init+0x8>)
     ffc:	4798      	blx	r3
}
     ffe:	bd08      	pop	{r3, pc}
    1000:	00002169 	.word	0x00002169

00001004 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1004:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1006:	4b12      	ldr	r3, [pc, #72]	; (1050 <process_ext_irq+0x4c>)
    1008:	6959      	ldr	r1, [r3, #20]
    100a:	4288      	cmp	r0, r1
    100c:	d01d      	beq.n	104a <process_ext_irq+0x46>
    100e:	2202      	movs	r2, #2
    1010:	2504      	movs	r5, #4
    1012:	2400      	movs	r4, #0
    1014:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
    1016:	4288      	cmp	r0, r1
			lower = middle + 1;
    1018:	bf87      	ittee	hi
    101a:	3201      	addhi	r2, #1
    101c:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
    101e:	f102 32ff 	addls.w	r2, r2, #4294967295
    1022:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
    1024:	42a5      	cmp	r5, r4
    1026:	d312      	bcc.n	104e <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
    1028:	192b      	adds	r3, r5, r4
    102a:	105b      	asrs	r3, r3, #1
    102c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    102e:	2a03      	cmp	r2, #3
    1030:	d80d      	bhi.n	104e <process_ext_irq+0x4a>
    1032:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
    1034:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
    1038:	6849      	ldr	r1, [r1, #4]
    103a:	4281      	cmp	r1, r0
    103c:	d1eb      	bne.n	1016 <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
    103e:	4a04      	ldr	r2, [pc, #16]	; (1050 <process_ext_irq+0x4c>)
    1040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1044:	b11b      	cbz	r3, 104e <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
    1046:	4798      	blx	r3
    1048:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
    104a:	2302      	movs	r3, #2
    104c:	e7f7      	b.n	103e <process_ext_irq+0x3a>
    104e:	bd70      	pop	{r4, r5, r6, pc}
    1050:	20000100 	.word	0x20000100

00001054 <ext_irq_init>:
{
    1054:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1056:	4b08      	ldr	r3, [pc, #32]	; (1078 <ext_irq_init+0x24>)
    1058:	f04f 31ff 	mov.w	r1, #4294967295
    105c:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
    105e:	2200      	movs	r2, #0
    1060:	601a      	str	r2, [r3, #0]
		ext_irqs[i].pin = 0xFFFFFFFF;
    1062:	60d9      	str	r1, [r3, #12]
		ext_irqs[i].cb  = NULL;
    1064:	609a      	str	r2, [r3, #8]
		ext_irqs[i].pin = 0xFFFFFFFF;
    1066:	6159      	str	r1, [r3, #20]
		ext_irqs[i].cb  = NULL;
    1068:	611a      	str	r2, [r3, #16]
		ext_irqs[i].pin = 0xFFFFFFFF;
    106a:	61d9      	str	r1, [r3, #28]
		ext_irqs[i].cb  = NULL;
    106c:	619a      	str	r2, [r3, #24]
	return _ext_irq_init(process_ext_irq);
    106e:	4803      	ldr	r0, [pc, #12]	; (107c <ext_irq_init+0x28>)
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <ext_irq_init+0x2c>)
    1072:	4798      	blx	r3
}
    1074:	bd08      	pop	{r3, pc}
    1076:	bf00      	nop
    1078:	20000100 	.word	0x20000100
    107c:	00001005 	.word	0x00001005
    1080:	00002039 	.word	0x00002039

00001084 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1084:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1086:	8843      	ldrh	r3, [r0, #2]
    1088:	f413 7f80 	tst.w	r3, #256	; 0x100
    108c:	d102      	bne.n	1094 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    108e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1090:	b103      	cbz	r3, 1094 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    1092:	4798      	blx	r3
    1094:	bd08      	pop	{r3, pc}

00001096 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1096:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1098:	8843      	ldrh	r3, [r0, #2]
    109a:	f413 7f80 	tst.w	r3, #256	; 0x100
    109e:	d102      	bne.n	10a6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    10a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    10a2:	b103      	cbz	r3, 10a6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    10a4:	4798      	blx	r3
    10a6:	bd08      	pop	{r3, pc}

000010a8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    10a8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    10aa:	8843      	ldrh	r3, [r0, #2]
    10ac:	f413 7f80 	tst.w	r3, #256	; 0x100
    10b0:	d102      	bne.n	10b8 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    10b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10b4:	b103      	cbz	r3, 10b8 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    10b6:	4798      	blx	r3
    10b8:	bd08      	pop	{r3, pc}
	...

000010bc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    10bc:	b510      	push	{r4, lr}
    10be:	b084      	sub	sp, #16
    10c0:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    10c2:	8a83      	ldrh	r3, [r0, #20]
    10c4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    10c8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    10ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    10ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    10d2:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    10d4:	a901      	add	r1, sp, #4
    10d6:	3828      	subs	r0, #40	; 0x28
    10d8:	4b03      	ldr	r3, [pc, #12]	; (10e8 <i2c_m_async_write+0x2c>)
    10da:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    10dc:	2800      	cmp	r0, #0
    10de:	bf08      	it	eq
    10e0:	4620      	moveq	r0, r4
    10e2:	b004      	add	sp, #16
    10e4:	bd10      	pop	{r4, pc}
    10e6:	bf00      	nop
    10e8:	00002b5d 	.word	0x00002b5d

000010ec <i2c_m_async_read>:
{
    10ec:	b510      	push	{r4, lr}
    10ee:	b084      	sub	sp, #16
    10f0:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    10f2:	8a83      	ldrh	r3, [r0, #20]
    10f4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    10f8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    10fa:	f248 0301 	movw	r3, #32769	; 0x8001
    10fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    1102:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1104:	a901      	add	r1, sp, #4
    1106:	3828      	subs	r0, #40	; 0x28
    1108:	4b03      	ldr	r3, [pc, #12]	; (1118 <i2c_m_async_read+0x2c>)
    110a:	4798      	blx	r3
}
    110c:	2800      	cmp	r0, #0
    110e:	bf08      	it	eq
    1110:	4620      	moveq	r0, r4
    1112:	b004      	add	sp, #16
    1114:	bd10      	pop	{r4, pc}
    1116:	bf00      	nop
    1118:	00002b5d 	.word	0x00002b5d

0000111c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    111c:	b570      	push	{r4, r5, r6, lr}
    111e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1120:	4604      	mov	r4, r0
    1122:	2289      	movs	r2, #137	; 0x89
    1124:	490f      	ldr	r1, [pc, #60]	; (1164 <i2c_m_async_init+0x48>)
    1126:	3000      	adds	r0, #0
    1128:	bf18      	it	ne
    112a:	2001      	movne	r0, #1
    112c:	4b0e      	ldr	r3, [pc, #56]	; (1168 <i2c_m_async_init+0x4c>)
    112e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1130:	4629      	mov	r1, r5
    1132:	4620      	mov	r0, r4
    1134:	4b0d      	ldr	r3, [pc, #52]	; (116c <i2c_m_async_init+0x50>)
    1136:	4798      	blx	r3
	if (init_status) {
    1138:	4605      	mov	r5, r0
    113a:	b108      	cbz	r0, 1140 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    113c:	4628      	mov	r0, r5
    113e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1140:	4b0b      	ldr	r3, [pc, #44]	; (1170 <i2c_m_async_init+0x54>)
    1142:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1144:	4b0b      	ldr	r3, [pc, #44]	; (1174 <i2c_m_async_init+0x58>)
    1146:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1148:	4a0b      	ldr	r2, [pc, #44]	; (1178 <i2c_m_async_init+0x5c>)
    114a:	2101      	movs	r1, #1
    114c:	4620      	mov	r0, r4
    114e:	4e0b      	ldr	r6, [pc, #44]	; (117c <i2c_m_async_init+0x60>)
    1150:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1152:	4a0b      	ldr	r2, [pc, #44]	; (1180 <i2c_m_async_init+0x64>)
    1154:	2102      	movs	r1, #2
    1156:	4620      	mov	r0, r4
    1158:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    115a:	4a0a      	ldr	r2, [pc, #40]	; (1184 <i2c_m_async_init+0x68>)
    115c:	2100      	movs	r1, #0
    115e:	4620      	mov	r0, r4
    1160:	47b0      	blx	r6
	return ERR_NONE;
    1162:	e7eb      	b.n	113c <i2c_m_async_init+0x20>
    1164:	00005c60 	.word	0x00005c60
    1168:	00001c91 	.word	0x00001c91
    116c:	00002add 	.word	0x00002add
    1170:	000010ed 	.word	0x000010ed
    1174:	000010bd 	.word	0x000010bd
    1178:	00001085 	.word	0x00001085
    117c:	00002c8d 	.word	0x00002c8d
    1180:	00001097 	.word	0x00001097
    1184:	000010a9 	.word	0x000010a9

00001188 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1188:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    118a:	6943      	ldr	r3, [r0, #20]
    118c:	b103      	cbz	r3, 1190 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    118e:	4798      	blx	r3
    1190:	bd08      	pop	{r3, pc}

00001192 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1192:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1194:	6983      	ldr	r3, [r0, #24]
    1196:	b103      	cbz	r3, 119a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1198:	4798      	blx	r3
    119a:	bd08      	pop	{r3, pc}

0000119c <pwm_init>:
{
    119c:	b538      	push	{r3, r4, r5, lr}
    119e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11a0:	4604      	mov	r4, r0
    11a2:	b180      	cbz	r0, 11c6 <pwm_init+0x2a>
    11a4:	1c08      	adds	r0, r1, #0
    11a6:	bf18      	it	ne
    11a8:	2001      	movne	r0, #1
    11aa:	2233      	movs	r2, #51	; 0x33
    11ac:	4907      	ldr	r1, [pc, #28]	; (11cc <pwm_init+0x30>)
    11ae:	4b08      	ldr	r3, [pc, #32]	; (11d0 <pwm_init+0x34>)
    11b0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    11b2:	4629      	mov	r1, r5
    11b4:	4620      	mov	r0, r4
    11b6:	4b07      	ldr	r3, [pc, #28]	; (11d4 <pwm_init+0x38>)
    11b8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    11ba:	4b07      	ldr	r3, [pc, #28]	; (11d8 <pwm_init+0x3c>)
    11bc:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    11be:	4b07      	ldr	r3, [pc, #28]	; (11dc <pwm_init+0x40>)
    11c0:	6063      	str	r3, [r4, #4]
}
    11c2:	2000      	movs	r0, #0
    11c4:	bd38      	pop	{r3, r4, r5, pc}
    11c6:	2000      	movs	r0, #0
    11c8:	e7ef      	b.n	11aa <pwm_init+0xe>
    11ca:	bf00      	nop
    11cc:	00005c80 	.word	0x00005c80
    11d0:	00001c91 	.word	0x00001c91
    11d4:	00003459 	.word	0x00003459
    11d8:	00001189 	.word	0x00001189
    11dc:	00001193 	.word	0x00001193

000011e0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    11e0:	b538      	push	{r3, r4, r5, lr}
    11e2:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    11e4:	4605      	mov	r5, r0
    11e6:	b158      	cbz	r0, 1200 <qspi_sync_init+0x20>
    11e8:	1c08      	adds	r0, r1, #0
    11ea:	bf18      	it	ne
    11ec:	2001      	movne	r0, #1
    11ee:	2231      	movs	r2, #49	; 0x31
    11f0:	4904      	ldr	r1, [pc, #16]	; (1204 <qspi_sync_init+0x24>)
    11f2:	4b05      	ldr	r3, [pc, #20]	; (1208 <qspi_sync_init+0x28>)
    11f4:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    11f6:	4621      	mov	r1, r4
    11f8:	4628      	mov	r0, r5
    11fa:	4b04      	ldr	r3, [pc, #16]	; (120c <qspi_sync_init+0x2c>)
    11fc:	4798      	blx	r3
}
    11fe:	bd38      	pop	{r3, r4, r5, pc}
    1200:	2000      	movs	r0, #0
    1202:	e7f4      	b.n	11ee <qspi_sync_init+0xe>
    1204:	00005c98 	.word	0x00005c98
    1208:	00001c91 	.word	0x00001c91
    120c:	0000245d 	.word	0x0000245d

00001210 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1210:	b510      	push	{r4, lr}
	ASSERT(qspi);
    1212:	4604      	mov	r4, r0
    1214:	223f      	movs	r2, #63	; 0x3f
    1216:	4905      	ldr	r1, [pc, #20]	; (122c <qspi_sync_enable+0x1c>)
    1218:	3000      	adds	r0, #0
    121a:	bf18      	it	ne
    121c:	2001      	movne	r0, #1
    121e:	4b04      	ldr	r3, [pc, #16]	; (1230 <qspi_sync_enable+0x20>)
    1220:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1222:	4620      	mov	r0, r4
    1224:	4b03      	ldr	r3, [pc, #12]	; (1234 <qspi_sync_enable+0x24>)
    1226:	4798      	blx	r3
}
    1228:	bd10      	pop	{r4, pc}
    122a:	bf00      	nop
    122c:	00005c98 	.word	0x00005c98
    1230:	00001c91 	.word	0x00001c91
    1234:	00002499 	.word	0x00002499

00001238 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    1238:	b510      	push	{r4, lr}
	ASSERT(qspi);
    123a:	4604      	mov	r4, r0
    123c:	2246      	movs	r2, #70	; 0x46
    123e:	4905      	ldr	r1, [pc, #20]	; (1254 <qspi_sync_disable+0x1c>)
    1240:	3000      	adds	r0, #0
    1242:	bf18      	it	ne
    1244:	2001      	movne	r0, #1
    1246:	4b04      	ldr	r3, [pc, #16]	; (1258 <qspi_sync_disable+0x20>)
    1248:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    124a:	4620      	mov	r0, r4
    124c:	4b03      	ldr	r3, [pc, #12]	; (125c <qspi_sync_disable+0x24>)
    124e:	4798      	blx	r3
}
    1250:	bd10      	pop	{r4, pc}
    1252:	bf00      	nop
    1254:	00005c98 	.word	0x00005c98
    1258:	00001c91 	.word	0x00001c91
    125c:	000024a3 	.word	0x000024a3

00001260 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1260:	b538      	push	{r3, r4, r5, lr}
    1262:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
    1264:	4605      	mov	r5, r0
    1266:	b158      	cbz	r0, 1280 <qspi_sync_serial_run_command+0x20>
    1268:	1c08      	adds	r0, r1, #0
    126a:	bf18      	it	ne
    126c:	2001      	movne	r0, #1
    126e:	224d      	movs	r2, #77	; 0x4d
    1270:	4904      	ldr	r1, [pc, #16]	; (1284 <qspi_sync_serial_run_command+0x24>)
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <qspi_sync_serial_run_command+0x28>)
    1274:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1276:	4621      	mov	r1, r4
    1278:	4628      	mov	r0, r5
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <qspi_sync_serial_run_command+0x2c>)
    127c:	4798      	blx	r3
}
    127e:	bd38      	pop	{r3, r4, r5, pc}
    1280:	2000      	movs	r0, #0
    1282:	e7f4      	b.n	126e <qspi_sync_serial_run_command+0xe>
    1284:	00005c98 	.word	0x00005c98
    1288:	00001c91 	.word	0x00001c91
    128c:	000024ad 	.word	0x000024ad

00001290 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1292:	460f      	mov	r7, r1
    1294:	4616      	mov	r6, r2
	ASSERT(io);
    1296:	4604      	mov	r4, r0
    1298:	f240 1227 	movw	r2, #295	; 0x127
    129c:	4909      	ldr	r1, [pc, #36]	; (12c4 <_spi_m_async_io_write+0x34>)
    129e:	3000      	adds	r0, #0
    12a0:	bf18      	it	ne
    12a2:	2001      	movne	r0, #1
    12a4:	4b08      	ldr	r3, [pc, #32]	; (12c8 <_spi_m_async_io_write+0x38>)
    12a6:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    12a8:	2500      	movs	r5, #0
    12aa:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    12ac:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    12ae:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    12b0:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    12b2:	2310      	movs	r3, #16
    12b4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    12b6:	2101      	movs	r1, #1
    12b8:	f1a4 0020 	sub.w	r0, r4, #32
    12bc:	4b03      	ldr	r3, [pc, #12]	; (12cc <_spi_m_async_io_write+0x3c>)
    12be:	4798      	blx	r3

	return ERR_NONE;
}
    12c0:	4628      	mov	r0, r5
    12c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12c4:	00005cb4 	.word	0x00005cb4
    12c8:	00001c91 	.word	0x00001c91
    12cc:	00003071 	.word	0x00003071

000012d0 <_spi_m_async_io_read>:
{
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	460d      	mov	r5, r1
    12d4:	4616      	mov	r6, r2
	ASSERT(io);
    12d6:	4604      	mov	r4, r0
    12d8:	f240 1205 	movw	r2, #261	; 0x105
    12dc:	490c      	ldr	r1, [pc, #48]	; (1310 <_spi_m_async_io_read+0x40>)
    12de:	3000      	adds	r0, #0
    12e0:	bf18      	it	ne
    12e2:	2001      	movne	r0, #1
    12e4:	4b0b      	ldr	r3, [pc, #44]	; (1314 <_spi_m_async_io_read+0x44>)
    12e6:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    12e8:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    12ea:	2500      	movs	r5, #0
    12ec:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    12ee:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    12f0:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    12f2:	2310      	movs	r3, #16
    12f4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    12f6:	3c20      	subs	r4, #32
    12f8:	2101      	movs	r1, #1
    12fa:	4620      	mov	r0, r4
    12fc:	4b06      	ldr	r3, [pc, #24]	; (1318 <_spi_m_async_io_read+0x48>)
    12fe:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    1300:	f240 11ff 	movw	r1, #511	; 0x1ff
    1304:	4620      	mov	r0, r4
    1306:	4b05      	ldr	r3, [pc, #20]	; (131c <_spi_m_async_io_read+0x4c>)
    1308:	4798      	blx	r3
}
    130a:	4628      	mov	r0, r5
    130c:	bd70      	pop	{r4, r5, r6, pc}
    130e:	bf00      	nop
    1310:	00005cb4 	.word	0x00005cb4
    1314:	00001c91 	.word	0x00001c91
    1318:	000030a5 	.word	0x000030a5
    131c:	00003121 	.word	0x00003121

00001320 <_spi_dev_error>:
{
    1320:	b570      	push	{r4, r5, r6, lr}
    1322:	4604      	mov	r4, r0
    1324:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1326:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    1328:	2100      	movs	r1, #0
    132a:	4b09      	ldr	r3, [pc, #36]	; (1350 <_spi_dev_error+0x30>)
    132c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    132e:	2100      	movs	r1, #0
    1330:	4620      	mov	r0, r4
    1332:	4b08      	ldr	r3, [pc, #32]	; (1354 <_spi_dev_error+0x34>)
    1334:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    1336:	2100      	movs	r1, #0
    1338:	4620      	mov	r0, r4
    133a:	4b07      	ldr	r3, [pc, #28]	; (1358 <_spi_dev_error+0x38>)
    133c:	4798      	blx	r3
	spi->stat = 0;
    133e:	2300      	movs	r3, #0
    1340:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    1344:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1346:	b113      	cbz	r3, 134e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    1348:	4631      	mov	r1, r6
    134a:	4628      	mov	r0, r5
    134c:	4798      	blx	r3
    134e:	bd70      	pop	{r4, r5, r6, pc}
    1350:	00003071 	.word	0x00003071
    1354:	000030a5 	.word	0x000030a5
    1358:	000030e5 	.word	0x000030e5

0000135c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    135c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    135e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1360:	429a      	cmp	r2, r3
    1362:	d200      	bcs.n	1366 <_spi_dev_complete+0xa>
    1364:	4770      	bx	lr
{
    1366:	b510      	push	{r4, lr}
    1368:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    136a:	2100      	movs	r1, #0
    136c:	4b04      	ldr	r3, [pc, #16]	; (1380 <_spi_dev_complete+0x24>)
    136e:	4798      	blx	r3
		spi->stat = 0;
    1370:	2300      	movs	r3, #0
    1372:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1378:	b10b      	cbz	r3, 137e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    137a:	1f20      	subs	r0, r4, #4
    137c:	4798      	blx	r3
    137e:	bd10      	pop	{r4, pc}
    1380:	000030e5 	.word	0x000030e5

00001384 <_spi_dev_tx>:
{
    1384:	b510      	push	{r4, lr}
    1386:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    1388:	7903      	ldrb	r3, [r0, #4]
    138a:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    138c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    138e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1390:	f103 0101 	add.w	r1, r3, #1
    1394:	6401      	str	r1, [r0, #64]	; 0x40
    1396:	bf94      	ite	ls
    1398:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    139a:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    139e:	4b08      	ldr	r3, [pc, #32]	; (13c0 <_spi_dev_tx+0x3c>)
    13a0:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    13a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    13a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13a6:	429a      	cmp	r2, r3
    13a8:	d000      	beq.n	13ac <_spi_dev_tx+0x28>
    13aa:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    13ac:	2100      	movs	r1, #0
    13ae:	4620      	mov	r0, r4
    13b0:	4b04      	ldr	r3, [pc, #16]	; (13c4 <_spi_dev_tx+0x40>)
    13b2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    13b4:	2101      	movs	r1, #1
    13b6:	4620      	mov	r0, r4
    13b8:	4b03      	ldr	r3, [pc, #12]	; (13c8 <_spi_dev_tx+0x44>)
    13ba:	4798      	blx	r3
}
    13bc:	e7f5      	b.n	13aa <_spi_dev_tx+0x26>
    13be:	bf00      	nop
    13c0:	00003121 	.word	0x00003121
    13c4:	00003071 	.word	0x00003071
    13c8:	000030e5 	.word	0x000030e5

000013cc <_spi_dev_rx>:
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    13d0:	6b85      	ldr	r5, [r0, #56]	; 0x38
    13d2:	b305      	cbz	r5, 1416 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    13d4:	7903      	ldrb	r3, [r0, #4]
    13d6:	2b01      	cmp	r3, #1
    13d8:	d916      	bls.n	1408 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    13da:	6c06      	ldr	r6, [r0, #64]	; 0x40
    13dc:	1c73      	adds	r3, r6, #1
    13de:	6403      	str	r3, [r0, #64]	; 0x40
    13e0:	4b18      	ldr	r3, [pc, #96]	; (1444 <_spi_dev_rx+0x78>)
    13e2:	4798      	blx	r3
    13e4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    13e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    13ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    13ec:	4293      	cmp	r3, r2
    13ee:	d21d      	bcs.n	142c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    13f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    13f2:	b1b2      	cbz	r2, 1422 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    13f4:	7921      	ldrb	r1, [r4, #4]
    13f6:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    13f8:	bf94      	ite	ls
    13fa:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    13fc:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1400:	4620      	mov	r0, r4
    1402:	4b11      	ldr	r3, [pc, #68]	; (1448 <_spi_dev_rx+0x7c>)
    1404:	4798      	blx	r3
    1406:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1408:	6c06      	ldr	r6, [r0, #64]	; 0x40
    140a:	1c73      	adds	r3, r6, #1
    140c:	6403      	str	r3, [r0, #64]	; 0x40
    140e:	4b0d      	ldr	r3, [pc, #52]	; (1444 <_spi_dev_rx+0x78>)
    1410:	4798      	blx	r3
    1412:	55a8      	strb	r0, [r5, r6]
    1414:	e7e8      	b.n	13e8 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    1416:	4b0b      	ldr	r3, [pc, #44]	; (1444 <_spi_dev_rx+0x78>)
    1418:	4798      	blx	r3
		spi->xfercnt++;
    141a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    141c:	3301      	adds	r3, #1
    141e:	6423      	str	r3, [r4, #64]	; 0x40
    1420:	e7e2      	b.n	13e8 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1422:	88e1      	ldrh	r1, [r4, #6]
    1424:	4620      	mov	r0, r4
    1426:	4b08      	ldr	r3, [pc, #32]	; (1448 <_spi_dev_rx+0x7c>)
    1428:	4798      	blx	r3
    142a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    142c:	2100      	movs	r1, #0
    142e:	4620      	mov	r0, r4
    1430:	4b06      	ldr	r3, [pc, #24]	; (144c <_spi_dev_rx+0x80>)
    1432:	4798      	blx	r3
		spi->stat = 0;
    1434:	2300      	movs	r3, #0
    1436:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    143a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    143c:	b10b      	cbz	r3, 1442 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    143e:	1f20      	subs	r0, r4, #4
    1440:	4798      	blx	r3
    1442:	bd70      	pop	{r4, r5, r6, pc}
    1444:	00003151 	.word	0x00003151
    1448:	00003121 	.word	0x00003121
    144c:	000030a5 	.word	0x000030a5

00001450 <spi_m_async_init>:
{
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    1454:	4606      	mov	r6, r0
    1456:	b330      	cbz	r0, 14a6 <spi_m_async_init+0x56>
    1458:	1c08      	adds	r0, r1, #0
    145a:	bf18      	it	ne
    145c:	2001      	movne	r0, #1
    145e:	22a5      	movs	r2, #165	; 0xa5
    1460:	4912      	ldr	r1, [pc, #72]	; (14ac <spi_m_async_init+0x5c>)
    1462:	4b13      	ldr	r3, [pc, #76]	; (14b0 <spi_m_async_init+0x60>)
    1464:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1466:	4634      	mov	r4, r6
    1468:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    146c:	4629      	mov	r1, r5
    146e:	4620      	mov	r0, r4
    1470:	4b10      	ldr	r3, [pc, #64]	; (14b4 <spi_m_async_init+0x64>)
    1472:	4798      	blx	r3
	if (rc >= 0) {
    1474:	2800      	cmp	r0, #0
    1476:	db15      	blt.n	14a4 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1478:	4a0f      	ldr	r2, [pc, #60]	; (14b8 <spi_m_async_init+0x68>)
    147a:	2100      	movs	r1, #0
    147c:	4620      	mov	r0, r4
    147e:	4d0f      	ldr	r5, [pc, #60]	; (14bc <spi_m_async_init+0x6c>)
    1480:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1482:	4a0f      	ldr	r2, [pc, #60]	; (14c0 <spi_m_async_init+0x70>)
    1484:	2101      	movs	r1, #1
    1486:	4620      	mov	r0, r4
    1488:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    148a:	4a0e      	ldr	r2, [pc, #56]	; (14c4 <spi_m_async_init+0x74>)
    148c:	2102      	movs	r1, #2
    148e:	4620      	mov	r0, r4
    1490:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1492:	4a0d      	ldr	r2, [pc, #52]	; (14c8 <spi_m_async_init+0x78>)
    1494:	2103      	movs	r1, #3
    1496:	4620      	mov	r0, r4
    1498:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    149a:	4b0c      	ldr	r3, [pc, #48]	; (14cc <spi_m_async_init+0x7c>)
    149c:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    149e:	4b0c      	ldr	r3, [pc, #48]	; (14d0 <spi_m_async_init+0x80>)
    14a0:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    14a2:	2000      	movs	r0, #0
}
    14a4:	bd70      	pop	{r4, r5, r6, pc}
    14a6:	2000      	movs	r0, #0
    14a8:	e7d9      	b.n	145e <spi_m_async_init+0xe>
    14aa:	bf00      	nop
    14ac:	00005cb4 	.word	0x00005cb4
    14b0:	00001c91 	.word	0x00001c91
    14b4:	00002f29 	.word	0x00002f29
    14b8:	00001385 	.word	0x00001385
    14bc:	0000317d 	.word	0x0000317d
    14c0:	000013cd 	.word	0x000013cd
    14c4:	0000135d 	.word	0x0000135d
    14c8:	00001321 	.word	0x00001321
    14cc:	000012d1 	.word	0x000012d1
    14d0:	00001291 	.word	0x00001291

000014d4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    14d4:	b538      	push	{r3, r4, r5, lr}
    14d6:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    14d8:	4604      	mov	r4, r0
    14da:	b1b8      	cbz	r0, 150c <spi_m_sync_init+0x38>
    14dc:	1c08      	adds	r0, r1, #0
    14de:	bf18      	it	ne
    14e0:	2001      	movne	r0, #1
    14e2:	2240      	movs	r2, #64	; 0x40
    14e4:	490a      	ldr	r1, [pc, #40]	; (1510 <spi_m_sync_init+0x3c>)
    14e6:	4b0b      	ldr	r3, [pc, #44]	; (1514 <spi_m_sync_init+0x40>)
    14e8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    14ea:	4620      	mov	r0, r4
    14ec:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    14f0:	4629      	mov	r1, r5
    14f2:	4b09      	ldr	r3, [pc, #36]	; (1518 <spi_m_sync_init+0x44>)
    14f4:	4798      	blx	r3

	if (rc < 0) {
    14f6:	2800      	cmp	r0, #0
    14f8:	db07      	blt.n	150a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    14fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    14fe:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1500:	4b06      	ldr	r3, [pc, #24]	; (151c <spi_m_sync_init+0x48>)
    1502:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1504:	4b06      	ldr	r3, [pc, #24]	; (1520 <spi_m_sync_init+0x4c>)
    1506:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1508:	2000      	movs	r0, #0
}
    150a:	bd38      	pop	{r3, r4, r5, pc}
    150c:	2000      	movs	r0, #0
    150e:	e7e8      	b.n	14e2 <spi_m_sync_init+0xe>
    1510:	00005cd4 	.word	0x00005cd4
    1514:	00001c91 	.word	0x00001c91
    1518:	00002d99 	.word	0x00002d99
    151c:	000015a1 	.word	0x000015a1
    1520:	00001565 	.word	0x00001565

00001524 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1524:	b530      	push	{r4, r5, lr}
    1526:	b085      	sub	sp, #20
    1528:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    152a:	4605      	mov	r5, r0
    152c:	b190      	cbz	r0, 1554 <spi_m_sync_transfer+0x30>
    152e:	1c08      	adds	r0, r1, #0
    1530:	bf18      	it	ne
    1532:	2001      	movne	r0, #1
    1534:	22b3      	movs	r2, #179	; 0xb3
    1536:	4908      	ldr	r1, [pc, #32]	; (1558 <spi_m_sync_transfer+0x34>)
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <spi_m_sync_transfer+0x38>)
    153a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    153c:	6823      	ldr	r3, [r4, #0]
    153e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1540:	6863      	ldr	r3, [r4, #4]
    1542:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1544:	68a3      	ldr	r3, [r4, #8]
    1546:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1548:	a901      	add	r1, sp, #4
    154a:	1d28      	adds	r0, r5, #4
    154c:	4b04      	ldr	r3, [pc, #16]	; (1560 <spi_m_sync_transfer+0x3c>)
    154e:	4798      	blx	r3
}
    1550:	b005      	add	sp, #20
    1552:	bd30      	pop	{r4, r5, pc}
    1554:	2000      	movs	r0, #0
    1556:	e7ed      	b.n	1534 <spi_m_sync_transfer+0x10>
    1558:	00005cd4 	.word	0x00005cd4
    155c:	00001c91 	.word	0x00001c91
    1560:	00002f91 	.word	0x00002f91

00001564 <_spi_m_sync_io_write>:
{
    1564:	b570      	push	{r4, r5, r6, lr}
    1566:	b084      	sub	sp, #16
    1568:	460e      	mov	r6, r1
    156a:	4615      	mov	r5, r2
	ASSERT(io);
    156c:	4604      	mov	r4, r0
    156e:	22a3      	movs	r2, #163	; 0xa3
    1570:	4908      	ldr	r1, [pc, #32]	; (1594 <_spi_m_sync_io_write+0x30>)
    1572:	3000      	adds	r0, #0
    1574:	bf18      	it	ne
    1576:	2001      	movne	r0, #1
    1578:	4b07      	ldr	r3, [pc, #28]	; (1598 <_spi_m_sync_io_write+0x34>)
    157a:	4798      	blx	r3
	xfer.rxbuf = 0;
    157c:	2300      	movs	r3, #0
    157e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1580:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1582:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1584:	a901      	add	r1, sp, #4
    1586:	f1a4 000c 	sub.w	r0, r4, #12
    158a:	4b04      	ldr	r3, [pc, #16]	; (159c <_spi_m_sync_io_write+0x38>)
    158c:	4798      	blx	r3
}
    158e:	b004      	add	sp, #16
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	bf00      	nop
    1594:	00005cd4 	.word	0x00005cd4
    1598:	00001c91 	.word	0x00001c91
    159c:	00001525 	.word	0x00001525

000015a0 <_spi_m_sync_io_read>:
{
    15a0:	b570      	push	{r4, r5, r6, lr}
    15a2:	b084      	sub	sp, #16
    15a4:	460e      	mov	r6, r1
    15a6:	4615      	mov	r5, r2
	ASSERT(io);
    15a8:	4604      	mov	r4, r0
    15aa:	2287      	movs	r2, #135	; 0x87
    15ac:	4908      	ldr	r1, [pc, #32]	; (15d0 <_spi_m_sync_io_read+0x30>)
    15ae:	3000      	adds	r0, #0
    15b0:	bf18      	it	ne
    15b2:	2001      	movne	r0, #1
    15b4:	4b07      	ldr	r3, [pc, #28]	; (15d4 <_spi_m_sync_io_read+0x34>)
    15b6:	4798      	blx	r3
	xfer.rxbuf = buf;
    15b8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    15ba:	2300      	movs	r3, #0
    15bc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    15be:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    15c0:	a901      	add	r1, sp, #4
    15c2:	f1a4 000c 	sub.w	r0, r4, #12
    15c6:	4b04      	ldr	r3, [pc, #16]	; (15d8 <_spi_m_sync_io_read+0x38>)
    15c8:	4798      	blx	r3
}
    15ca:	b004      	add	sp, #16
    15cc:	bd70      	pop	{r4, r5, r6, pc}
    15ce:	bf00      	nop
    15d0:	00005cd4 	.word	0x00005cd4
    15d4:	00001c91 	.word	0x00001c91
    15d8:	00001525 	.word	0x00001525

000015dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    15dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15de:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    15e0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    15e2:	b12f      	cbz	r7, 15f0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    15e4:	688d      	ldr	r5, [r1, #8]
    15e6:	463c      	mov	r4, r7
    15e8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    15ea:	f1c2 0e01 	rsb	lr, r2, #1
    15ee:	e00b      	b.n	1608 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    15f0:	4b0e      	ldr	r3, [pc, #56]	; (162c <timer_add_timer_task+0x50>)
    15f2:	4798      	blx	r3
		return;
    15f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    15f6:	4473      	add	r3, lr
    15f8:	68a0      	ldr	r0, [r4, #8]
    15fa:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    15fc:	42ab      	cmp	r3, r5
    15fe:	d20a      	bcs.n	1616 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1600:	6823      	ldr	r3, [r4, #0]
    1602:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1604:	b153      	cbz	r3, 161c <timer_add_timer_task+0x40>
    1606:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1608:	6863      	ldr	r3, [r4, #4]
    160a:	4293      	cmp	r3, r2
    160c:	d8f3      	bhi.n	15f6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    160e:	68a0      	ldr	r0, [r4, #8]
    1610:	4403      	add	r3, r0
    1612:	1a9b      	subs	r3, r3, r2
    1614:	e7f2      	b.n	15fc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1616:	42a7      	cmp	r7, r4
    1618:	d004      	beq.n	1624 <timer_add_timer_task+0x48>
    161a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    161c:	4620      	mov	r0, r4
    161e:	4b04      	ldr	r3, [pc, #16]	; (1630 <timer_add_timer_task+0x54>)
    1620:	4798      	blx	r3
    1622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1624:	4660      	mov	r0, ip
    1626:	4b01      	ldr	r3, [pc, #4]	; (162c <timer_add_timer_task+0x50>)
    1628:	4798      	blx	r3
    162a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    162c:	00001cb9 	.word	0x00001cb9
    1630:	00001ce5 	.word	0x00001ce5

00001634 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1638:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    163a:	6907      	ldr	r7, [r0, #16]
    163c:	3701      	adds	r7, #1
    163e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1640:	7e03      	ldrb	r3, [r0, #24]
    1642:	f013 0f01 	tst.w	r3, #1
    1646:	d113      	bne.n	1670 <timer_process_counted+0x3c>
    1648:	7e03      	ldrb	r3, [r0, #24]
    164a:	f013 0f02 	tst.w	r3, #2
    164e:	d10f      	bne.n	1670 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1650:	b354      	cbz	r4, 16a8 <timer_process_counted+0x74>
    1652:	6863      	ldr	r3, [r4, #4]
    1654:	1afb      	subs	r3, r7, r3
    1656:	68a2      	ldr	r2, [r4, #8]
    1658:	4293      	cmp	r3, r2
    165a:	d307      	bcc.n	166c <timer_process_counted+0x38>
    165c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    165e:	f100 0814 	add.w	r8, r0, #20
    1662:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16ac <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1666:	f8df a048 	ldr.w	sl, [pc, #72]	; 16b0 <timer_process_counted+0x7c>
    166a:	e012      	b.n	1692 <timer_process_counted+0x5e>
    166c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1670:	7e03      	ldrb	r3, [r0, #24]
    1672:	f043 0302 	orr.w	r3, r3, #2
    1676:	7603      	strb	r3, [r0, #24]
		return;
    1678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    167c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    167e:	68e3      	ldr	r3, [r4, #12]
    1680:	4620      	mov	r0, r4
    1682:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1684:	b185      	cbz	r5, 16a8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1686:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1688:	686b      	ldr	r3, [r5, #4]
    168a:	1afb      	subs	r3, r7, r3
    168c:	68aa      	ldr	r2, [r5, #8]
    168e:	4293      	cmp	r3, r2
    1690:	d30a      	bcc.n	16a8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1692:	4640      	mov	r0, r8
    1694:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1696:	7c23      	ldrb	r3, [r4, #16]
    1698:	2b01      	cmp	r3, #1
    169a:	d1ef      	bne.n	167c <timer_process_counted+0x48>
			tmp->time_label = time;
    169c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    169e:	463a      	mov	r2, r7
    16a0:	4621      	mov	r1, r4
    16a2:	4640      	mov	r0, r8
    16a4:	47d0      	blx	sl
    16a6:	e7e9      	b.n	167c <timer_process_counted+0x48>
    16a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16ac:	00001d2d 	.word	0x00001d2d
    16b0:	000015dd 	.word	0x000015dd

000016b4 <timer_init>:
{
    16b4:	b538      	push	{r3, r4, r5, lr}
    16b6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    16b8:	4604      	mov	r4, r0
    16ba:	b178      	cbz	r0, 16dc <timer_init+0x28>
    16bc:	1c08      	adds	r0, r1, #0
    16be:	bf18      	it	ne
    16c0:	2001      	movne	r0, #1
    16c2:	223b      	movs	r2, #59	; 0x3b
    16c4:	4906      	ldr	r1, [pc, #24]	; (16e0 <timer_init+0x2c>)
    16c6:	4b07      	ldr	r3, [pc, #28]	; (16e4 <timer_init+0x30>)
    16c8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    16ca:	4629      	mov	r1, r5
    16cc:	4620      	mov	r0, r4
    16ce:	4b06      	ldr	r3, [pc, #24]	; (16e8 <timer_init+0x34>)
    16d0:	4798      	blx	r3
	descr->time                           = 0;
    16d2:	2000      	movs	r0, #0
    16d4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    16d6:	4b05      	ldr	r3, [pc, #20]	; (16ec <timer_init+0x38>)
    16d8:	6023      	str	r3, [r4, #0]
}
    16da:	bd38      	pop	{r3, r4, r5, pc}
    16dc:	2000      	movs	r0, #0
    16de:	e7f0      	b.n	16c2 <timer_init+0xe>
    16e0:	00005cf0 	.word	0x00005cf0
    16e4:	00001c91 	.word	0x00001c91
    16e8:	0000329d 	.word	0x0000329d
    16ec:	00001635 	.word	0x00001635

000016f0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    16f0:	4b0f      	ldr	r3, [pc, #60]	; (1730 <_usb_d_find_ep+0x40>)
    16f2:	7859      	ldrb	r1, [r3, #1]
    16f4:	4288      	cmp	r0, r1
    16f6:	d018      	beq.n	172a <_usb_d_find_ep+0x3a>
{
    16f8:	b430      	push	{r4, r5}
    16fa:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    16fc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    16fe:	f000 050f 	and.w	r5, r0, #15
    1702:	e007      	b.n	1714 <_usb_d_find_ep+0x24>
    1704:	3301      	adds	r3, #1
    1706:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1708:	2b04      	cmp	r3, #4
    170a:	d009      	beq.n	1720 <_usb_d_find_ep+0x30>
    170c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    170e:	7851      	ldrb	r1, [r2, #1]
    1710:	4281      	cmp	r1, r0
    1712:	d007      	beq.n	1724 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1714:	7814      	ldrb	r4, [r2, #0]
    1716:	2c00      	cmp	r4, #0
    1718:	d1f4      	bne.n	1704 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    171a:	428d      	cmp	r5, r1
    171c:	d1f2      	bne.n	1704 <_usb_d_find_ep+0x14>
    171e:	e001      	b.n	1724 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1720:	f04f 33ff 	mov.w	r3, #4294967295
}
    1724:	4618      	mov	r0, r3
    1726:	bc30      	pop	{r4, r5}
    1728:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    172a:	2300      	movs	r3, #0
}
    172c:	4618      	mov	r0, r3
    172e:	4770      	bx	lr
    1730:	20000120 	.word	0x20000120

00001734 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1734:	2000      	movs	r0, #0
    1736:	4770      	bx	lr

00001738 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1738:	b538      	push	{r3, r4, r5, lr}
    173a:	4604      	mov	r4, r0
    173c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    173e:	4b09      	ldr	r3, [pc, #36]	; (1764 <usb_d_cb_trans_more+0x2c>)
    1740:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1742:	4b09      	ldr	r3, [pc, #36]	; (1768 <usb_d_cb_trans_more+0x30>)
    1744:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1748:	789b      	ldrb	r3, [r3, #2]
    174a:	2b03      	cmp	r3, #3
    174c:	d001      	beq.n	1752 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    174e:	2000      	movs	r0, #0
}
    1750:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1752:	4b05      	ldr	r3, [pc, #20]	; (1768 <usb_d_cb_trans_more+0x30>)
    1754:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1758:	6983      	ldr	r3, [r0, #24]
    175a:	4629      	mov	r1, r5
    175c:	4620      	mov	r0, r4
    175e:	4798      	blx	r3
    1760:	bd38      	pop	{r3, r4, r5, pc}
    1762:	bf00      	nop
    1764:	000016f1 	.word	0x000016f1
    1768:	20000120 	.word	0x20000120

0000176c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    176c:	b5f0      	push	{r4, r5, r6, r7, lr}
    176e:	b085      	sub	sp, #20
    1770:	4606      	mov	r6, r0
    1772:	460d      	mov	r5, r1
    1774:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1776:	4b4d      	ldr	r3, [pc, #308]	; (18ac <_usb_d_cb_trans_done+0x140>)
    1778:	4798      	blx	r3
    177a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    177c:	2d00      	cmp	r5, #0
    177e:	d15b      	bne.n	1838 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1780:	4a4b      	ldr	r2, [pc, #300]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    1782:	0143      	lsls	r3, r0, #5
    1784:	18d1      	adds	r1, r2, r3
    1786:	2000      	movs	r0, #0
    1788:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    178a:	5cd3      	ldrb	r3, [r2, r3]
    178c:	b173      	cbz	r3, 17ac <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    178e:	4b48      	ldr	r3, [pc, #288]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    1790:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1794:	2201      	movs	r2, #1
    1796:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1798:	4845      	ldr	r0, [pc, #276]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    179a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    179e:	69c3      	ldr	r3, [r0, #28]
    17a0:	463a      	mov	r2, r7
    17a2:	78c1      	ldrb	r1, [r0, #3]
    17a4:	4630      	mov	r0, r6
    17a6:	4798      	blx	r3
}
    17a8:	b005      	add	sp, #20
    17aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    17ac:	788b      	ldrb	r3, [r1, #2]
    17ae:	2b03      	cmp	r3, #3
    17b0:	d00b      	beq.n	17ca <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    17b2:	483f      	ldr	r0, [pc, #252]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    17b4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    17b8:	4614      	mov	r4, r2
    17ba:	69d3      	ldr	r3, [r2, #28]
    17bc:	320c      	adds	r2, #12
    17be:	2100      	movs	r1, #0
    17c0:	7860      	ldrb	r0, [r4, #1]
    17c2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    17c4:	2302      	movs	r3, #2
    17c6:	70a3      	strb	r3, [r4, #2]
    17c8:	e7ee      	b.n	17a8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    17ca:	460b      	mov	r3, r1
    17cc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    17d0:	460a      	mov	r2, r1
    17d2:	69ce      	ldr	r6, [r1, #28]
    17d4:	320c      	adds	r2, #12
    17d6:	2101      	movs	r1, #1
    17d8:	7858      	ldrb	r0, [r3, #1]
    17da:	47b0      	blx	r6
		if (err) {
    17dc:	b1a0      	cbz	r0, 1808 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    17de:	4b34      	ldr	r3, [pc, #208]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    17e0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    17e4:	2205      	movs	r2, #5
    17e6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    17e8:	2202      	movs	r2, #2
    17ea:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    17ec:	2d00      	cmp	r5, #0
    17ee:	db09      	blt.n	1804 <_usb_d_cb_trans_done+0x98>
    17f0:	482f      	ldr	r0, [pc, #188]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    17f2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    17f6:	7840      	ldrb	r0, [r0, #1]
    17f8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    17fc:	2101      	movs	r1, #1
    17fe:	4b2d      	ldr	r3, [pc, #180]	; (18b4 <_usb_d_cb_trans_done+0x148>)
    1800:	4798      	blx	r3
    1802:	e7d1      	b.n	17a8 <_usb_d_cb_trans_done+0x3c>
    1804:	7858      	ldrb	r0, [r3, #1]
    1806:	e7f9      	b.n	17fc <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1808:	4829      	ldr	r0, [pc, #164]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    180a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    180e:	2304      	movs	r3, #4
    1810:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1812:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1814:	2200      	movs	r2, #0
    1816:	9201      	str	r2, [sp, #4]
    1818:	9202      	str	r2, [sp, #8]
    181a:	4295      	cmp	r5, r2
    181c:	bfac      	ite	ge
    181e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1822:	f003 030f 	andlt.w	r3, r3, #15
    1826:	f88d 300c 	strb.w	r3, [sp, #12]
    182a:	2301      	movs	r3, #1
    182c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1830:	a801      	add	r0, sp, #4
    1832:	4b21      	ldr	r3, [pc, #132]	; (18b8 <_usb_d_cb_trans_done+0x14c>)
    1834:	4798      	blx	r3
    1836:	e7b7      	b.n	17a8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1838:	2d01      	cmp	r5, #1
    183a:	d00a      	beq.n	1852 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    183c:	2d02      	cmp	r5, #2
    183e:	d01c      	beq.n	187a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1840:	2d03      	cmp	r5, #3
    1842:	d02a      	beq.n	189a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1844:	4b1a      	ldr	r3, [pc, #104]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    1846:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    184a:	2206      	movs	r2, #6
    184c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    184e:	70da      	strb	r2, [r3, #3]
    1850:	e7a2      	b.n	1798 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1852:	4a17      	ldr	r2, [pc, #92]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    1854:	0143      	lsls	r3, r0, #5
    1856:	18d1      	adds	r1, r2, r3
    1858:	2002      	movs	r0, #2
    185a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    185c:	5cd3      	ldrb	r3, [r2, r3]
    185e:	b12b      	cbz	r3, 186c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1860:	4b13      	ldr	r3, [pc, #76]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    1862:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1866:	2205      	movs	r2, #5
    1868:	709a      	strb	r2, [r3, #2]
    186a:	e795      	b.n	1798 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    186c:	460b      	mov	r3, r1
    186e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1870:	2100      	movs	r1, #0
    1872:	4630      	mov	r0, r6
    1874:	4b0f      	ldr	r3, [pc, #60]	; (18b4 <_usb_d_cb_trans_done+0x148>)
    1876:	4798      	blx	r3
    1878:	e78e      	b.n	1798 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    187a:	4a0d      	ldr	r2, [pc, #52]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    187c:	0143      	lsls	r3, r0, #5
    187e:	18d1      	adds	r1, r2, r3
    1880:	2004      	movs	r0, #4
    1882:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1884:	5cd3      	ldrb	r3, [r2, r3]
    1886:	b12b      	cbz	r3, 1894 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1888:	4b09      	ldr	r3, [pc, #36]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    188a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    188e:	2201      	movs	r2, #1
    1890:	709a      	strb	r2, [r3, #2]
    1892:	e781      	b.n	1798 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1894:	2302      	movs	r3, #2
    1896:	708b      	strb	r3, [r1, #2]
			return;
    1898:	e786      	b.n	17a8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <_usb_d_cb_trans_done+0x144>)
    189c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    18a0:	2200      	movs	r2, #0
    18a2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    18a4:	2205      	movs	r2, #5
    18a6:	70da      	strb	r2, [r3, #3]
    18a8:	e776      	b.n	1798 <_usb_d_cb_trans_done+0x2c>
    18aa:	bf00      	nop
    18ac:	000016f1 	.word	0x000016f1
    18b0:	20000120 	.word	0x20000120
    18b4:	00004519 	.word	0x00004519
    18b8:	000046c1 	.word	0x000046c1

000018bc <usb_d_cb_trans_setup>:
{
    18bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18c0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    18c2:	4b1c      	ldr	r3, [pc, #112]	; (1934 <usb_d_cb_trans_setup+0x78>)
    18c4:	4798      	blx	r3
    18c6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    18c8:	4c1b      	ldr	r4, [pc, #108]	; (1938 <usb_d_cb_trans_setup+0x7c>)
    18ca:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    18ce:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    18d0:	4621      	mov	r1, r4
    18d2:	4628      	mov	r0, r5
    18d4:	4b19      	ldr	r3, [pc, #100]	; (193c <usb_d_cb_trans_setup+0x80>)
    18d6:	4798      	blx	r3
	if (n != 8) {
    18d8:	b2c0      	uxtb	r0, r0
    18da:	2808      	cmp	r0, #8
    18dc:	d009      	beq.n	18f2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    18de:	2101      	movs	r1, #1
    18e0:	4628      	mov	r0, r5
    18e2:	4c17      	ldr	r4, [pc, #92]	; (1940 <usb_d_cb_trans_setup+0x84>)
    18e4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    18e6:	2101      	movs	r1, #1
    18e8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    18ec:	47a0      	blx	r4
		return;
    18ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    18f2:	2100      	movs	r1, #0
    18f4:	4628      	mov	r0, r5
    18f6:	4f12      	ldr	r7, [pc, #72]	; (1940 <usb_d_cb_trans_setup+0x84>)
    18f8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    18fa:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    18fe:	2100      	movs	r1, #0
    1900:	4640      	mov	r0, r8
    1902:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1904:	4b0c      	ldr	r3, [pc, #48]	; (1938 <usb_d_cb_trans_setup+0x7c>)
    1906:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    190a:	2201      	movs	r2, #1
    190c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    190e:	695b      	ldr	r3, [r3, #20]
    1910:	4621      	mov	r1, r4
    1912:	4628      	mov	r0, r5
    1914:	4798      	blx	r3
    1916:	b108      	cbz	r0, 191c <usb_d_cb_trans_setup+0x60>
    1918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    191c:	4b06      	ldr	r3, [pc, #24]	; (1938 <usb_d_cb_trans_setup+0x7c>)
    191e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1922:	2305      	movs	r3, #5
    1924:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1926:	2101      	movs	r1, #1
    1928:	4628      	mov	r0, r5
    192a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    192c:	2101      	movs	r1, #1
    192e:	4640      	mov	r0, r8
    1930:	47b8      	blx	r7
    1932:	e7f1      	b.n	1918 <usb_d_cb_trans_setup+0x5c>
    1934:	000016f1 	.word	0x000016f1
    1938:	20000120 	.word	0x20000120
    193c:	00004661 	.word	0x00004661
    1940:	00004519 	.word	0x00004519

00001944 <usb_d_init>:

int32_t usb_d_init(void)
{
    1944:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1946:	4b11      	ldr	r3, [pc, #68]	; (198c <usb_d_init+0x48>)
    1948:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    194a:	2800      	cmp	r0, #0
    194c:	db1c      	blt.n	1988 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    194e:	4c10      	ldr	r4, [pc, #64]	; (1990 <usb_d_init+0x4c>)
    1950:	2280      	movs	r2, #128	; 0x80
    1952:	2100      	movs	r1, #0
    1954:	4620      	mov	r0, r4
    1956:	4b0f      	ldr	r3, [pc, #60]	; (1994 <usb_d_init+0x50>)
    1958:	4798      	blx	r3
    195a:	4623      	mov	r3, r4
    195c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1960:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1962:	4a0d      	ldr	r2, [pc, #52]	; (1998 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1964:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1966:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1968:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    196a:	61da      	str	r2, [r3, #28]
    196c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    196e:	4283      	cmp	r3, r0
    1970:	d1f8      	bne.n	1964 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1972:	490a      	ldr	r1, [pc, #40]	; (199c <usb_d_init+0x58>)
    1974:	2000      	movs	r0, #0
    1976:	4c0a      	ldr	r4, [pc, #40]	; (19a0 <usb_d_init+0x5c>)
    1978:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    197a:	490a      	ldr	r1, [pc, #40]	; (19a4 <usb_d_init+0x60>)
    197c:	2001      	movs	r0, #1
    197e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1980:	4909      	ldr	r1, [pc, #36]	; (19a8 <usb_d_init+0x64>)
    1982:	2002      	movs	r0, #2
    1984:	47a0      	blx	r4
	return ERR_NONE;
    1986:	2000      	movs	r0, #0
}
    1988:	bd10      	pop	{r4, pc}
    198a:	bf00      	nop
    198c:	00003f01 	.word	0x00003f01
    1990:	20000120 	.word	0x20000120
    1994:	00005bdf 	.word	0x00005bdf
    1998:	00001735 	.word	0x00001735
    199c:	000018bd 	.word	0x000018bd
    19a0:	000048c9 	.word	0x000048c9
    19a4:	00001739 	.word	0x00001739
    19a8:	0000176d 	.word	0x0000176d

000019ac <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    19ac:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    19ae:	4b01      	ldr	r3, [pc, #4]	; (19b4 <usb_d_register_callback+0x8>)
    19b0:	4798      	blx	r3
    19b2:	bd08      	pop	{r3, pc}
    19b4:	000048a1 	.word	0x000048a1

000019b8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    19b8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    19ba:	4b01      	ldr	r3, [pc, #4]	; (19c0 <usb_d_enable+0x8>)
    19bc:	4798      	blx	r3
}
    19be:	bd08      	pop	{r3, pc}
    19c0:	00004009 	.word	0x00004009

000019c4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    19c4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    19c6:	4b01      	ldr	r3, [pc, #4]	; (19cc <usb_d_attach+0x8>)
    19c8:	4798      	blx	r3
    19ca:	bd08      	pop	{r3, pc}
    19cc:	00004075 	.word	0x00004075

000019d0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    19d0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    19d2:	4b01      	ldr	r3, [pc, #4]	; (19d8 <usb_d_set_address+0x8>)
    19d4:	4798      	blx	r3
    19d6:	bd08      	pop	{r3, pc}
    19d8:	00004087 	.word	0x00004087

000019dc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    19dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19de:	4606      	mov	r6, r0
    19e0:	460c      	mov	r4, r1
    19e2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    19e4:	4b0f      	ldr	r3, [pc, #60]	; (1a24 <usb_d_ep_init+0x48>)
    19e6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    19e8:	2800      	cmp	r0, #0
    19ea:	da14      	bge.n	1a16 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    19ec:	20ff      	movs	r0, #255	; 0xff
    19ee:	4b0d      	ldr	r3, [pc, #52]	; (1a24 <usb_d_ep_init+0x48>)
    19f0:	4798      	blx	r3
		if (ep_index < 0) {
    19f2:	1e05      	subs	r5, r0, #0
    19f4:	db12      	blt.n	1a1c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    19f6:	463a      	mov	r2, r7
    19f8:	4621      	mov	r1, r4
    19fa:	4630      	mov	r0, r6
    19fc:	4b0a      	ldr	r3, [pc, #40]	; (1a28 <usb_d_ep_init+0x4c>)
    19fe:	4798      	blx	r3
	if (rc < 0) {
    1a00:	2800      	cmp	r0, #0
    1a02:	db0d      	blt.n	1a20 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1a04:	4b09      	ldr	r3, [pc, #36]	; (1a2c <usb_d_ep_init+0x50>)
    1a06:	0168      	lsls	r0, r5, #5
    1a08:	181a      	adds	r2, r3, r0
    1a0a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1a0c:	f004 0403 	and.w	r4, r4, #3
    1a10:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1a12:	2000      	movs	r0, #0
    1a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1a16:	f06f 0013 	mvn.w	r0, #19
    1a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1a1c:	f06f 0014 	mvn.w	r0, #20
}
    1a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a22:	bf00      	nop
    1a24:	000016f1 	.word	0x000016f1
    1a28:	00004095 	.word	0x00004095
    1a2c:	20000120 	.word	0x20000120

00001a30 <usb_d_ep0_init>:
{
    1a30:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1a32:	4602      	mov	r2, r0
    1a34:	2100      	movs	r1, #0
    1a36:	4608      	mov	r0, r1
    1a38:	4b01      	ldr	r3, [pc, #4]	; (1a40 <usb_d_ep0_init+0x10>)
    1a3a:	4798      	blx	r3
}
    1a3c:	bd08      	pop	{r3, pc}
    1a3e:	bf00      	nop
    1a40:	000019dd 	.word	0x000019dd

00001a44 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1a44:	b538      	push	{r3, r4, r5, lr}
    1a46:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <usb_d_ep_deinit+0x20>)
    1a4a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1a4c:	1e04      	subs	r4, r0, #0
    1a4e:	db07      	blt.n	1a60 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1a50:	4628      	mov	r0, r5
    1a52:	4b05      	ldr	r3, [pc, #20]	; (1a68 <usb_d_ep_deinit+0x24>)
    1a54:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1a56:	4805      	ldr	r0, [pc, #20]	; (1a6c <usb_d_ep_deinit+0x28>)
    1a58:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1a5c:	23ff      	movs	r3, #255	; 0xff
    1a5e:	7043      	strb	r3, [r0, #1]
    1a60:	bd38      	pop	{r3, r4, r5, pc}
    1a62:	bf00      	nop
    1a64:	000016f1 	.word	0x000016f1
    1a68:	000041ad 	.word	0x000041ad
    1a6c:	20000120 	.word	0x20000120

00001a70 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1a70:	b538      	push	{r3, r4, r5, lr}
    1a72:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a74:	4b0e      	ldr	r3, [pc, #56]	; (1ab0 <usb_d_ep_enable+0x40>)
    1a76:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1a78:	1e04      	subs	r4, r0, #0
    1a7a:	db16      	blt.n	1aaa <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1a7c:	0163      	lsls	r3, r4, #5
    1a7e:	4a0d      	ldr	r2, [pc, #52]	; (1ab4 <usb_d_ep_enable+0x44>)
    1a80:	5cd3      	ldrb	r3, [r2, r3]
    1a82:	2b00      	cmp	r3, #0
    1a84:	bf0c      	ite	eq
    1a86:	2202      	moveq	r2, #2
    1a88:	2201      	movne	r2, #1
    1a8a:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <usb_d_ep_enable+0x44>)
    1a8c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1a90:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1a92:	4628      	mov	r0, r5
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <usb_d_ep_enable+0x48>)
    1a96:	4798      	blx	r3
	if (rc < 0) {
    1a98:	2800      	cmp	r0, #0
    1a9a:	db00      	blt.n	1a9e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1a9c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1a9e:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <usb_d_ep_enable+0x44>)
    1aa0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1aa4:	2300      	movs	r3, #0
    1aa6:	70a3      	strb	r3, [r4, #2]
    1aa8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1aaa:	f06f 0011 	mvn.w	r0, #17
    1aae:	e7f5      	b.n	1a9c <usb_d_ep_enable+0x2c>
    1ab0:	000016f1 	.word	0x000016f1
    1ab4:	20000120 	.word	0x20000120
    1ab8:	00004271 	.word	0x00004271

00001abc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ac0:	b086      	sub	sp, #24
    1ac2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1ac4:	7a07      	ldrb	r7, [r0, #8]
    1ac6:	4638      	mov	r0, r7
    1ac8:	4b3f      	ldr	r3, [pc, #252]	; (1bc8 <usb_d_ep_transfer+0x10c>)
    1aca:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1acc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    1ace:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1ad2:	1e06      	subs	r6, r0, #0
    1ad4:	db72      	blt.n	1bbc <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1ad6:	a804      	add	r0, sp, #16
    1ad8:	4b3c      	ldr	r3, [pc, #240]	; (1bcc <usb_d_ep_transfer+0x110>)
    1ada:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1adc:	4b3c      	ldr	r3, [pc, #240]	; (1bd0 <usb_d_ep_transfer+0x114>)
    1ade:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1ae2:	789b      	ldrb	r3, [r3, #2]
    1ae4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1ae8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1aec:	b2db      	uxtb	r3, r3
    1aee:	2b01      	cmp	r3, #1
    1af0:	d011      	beq.n	1b16 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1af2:	a804      	add	r0, sp, #16
    1af4:	4b37      	ldr	r3, [pc, #220]	; (1bd4 <usb_d_ep_transfer+0x118>)
    1af6:	4798      	blx	r3
		switch (state) {
    1af8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1afc:	b2db      	uxtb	r3, r3
    1afe:	2b05      	cmp	r3, #5
    1b00:	d05f      	beq.n	1bc2 <usb_d_ep_transfer+0x106>
    1b02:	2b06      	cmp	r3, #6
    1b04:	d023      	beq.n	1b4e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1b06:	2b00      	cmp	r3, #0
    1b08:	bf0c      	ite	eq
    1b0a:	f06f 0012 	mvneq.w	r0, #18
    1b0e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1b10:	b006      	add	sp, #24
    1b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1b16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1bd0 <usb_d_ep_transfer+0x114>
    1b1a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1b1e:	eb0a 0309 	add.w	r3, sl, r9
    1b22:	2203      	movs	r2, #3
    1b24:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1b26:	a804      	add	r0, sp, #16
    1b28:	4b2a      	ldr	r3, [pc, #168]	; (1bd4 <usb_d_ep_transfer+0x118>)
    1b2a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b2c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1b30:	b183      	cbz	r3, 1b54 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b32:	7a22      	ldrb	r2, [r4, #8]
    1b34:	3500      	adds	r5, #0
    1b36:	bf18      	it	ne
    1b38:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1b3a:	6823      	ldr	r3, [r4, #0]
    1b3c:	9301      	str	r3, [sp, #4]
    1b3e:	f8cd 8008 	str.w	r8, [sp, #8]
    1b42:	f017 0f80 	tst.w	r7, #128	; 0x80
    1b46:	d119      	bne.n	1b7c <usb_d_ep_transfer+0xc0>
    1b48:	f002 030f 	and.w	r3, r2, #15
    1b4c:	e018      	b.n	1b80 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1b4e:	f06f 000f 	mvn.w	r0, #15
    1b52:	e7dd      	b.n	1b10 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1b54:	4b1e      	ldr	r3, [pc, #120]	; (1bd0 <usb_d_ep_transfer+0x114>)
    1b56:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1b5a:	7cda      	ldrb	r2, [r3, #19]
    1b5c:	7c9d      	ldrb	r5, [r3, #18]
    1b5e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1b62:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1b64:	b9a5      	cbnz	r5, 1b90 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1b66:	4b1a      	ldr	r3, [pc, #104]	; (1bd0 <usb_d_ep_transfer+0x114>)
    1b68:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1b6c:	2304      	movs	r3, #4
    1b6e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1b70:	2300      	movs	r3, #0
			zlp                 = true;
    1b72:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1b74:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1b76:	6821      	ldr	r1, [r4, #0]
    1b78:	9101      	str	r1, [sp, #4]
    1b7a:	9302      	str	r3, [sp, #8]
    1b7c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1b80:	f88d 300c 	strb.w	r3, [sp, #12]
    1b84:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1b88:	a801      	add	r0, sp, #4
    1b8a:	4b13      	ldr	r3, [pc, #76]	; (1bd8 <usb_d_ep_transfer+0x11c>)
    1b8c:	4798      	blx	r3
	return rc;
    1b8e:	e7bf      	b.n	1b10 <usb_d_ep_transfer+0x54>
    1b90:	4643      	mov	r3, r8
    1b92:	45a8      	cmp	r8, r5
    1b94:	bf28      	it	cs
    1b96:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1b98:	4a0d      	ldr	r2, [pc, #52]	; (1bd0 <usb_d_ep_transfer+0x114>)
    1b9a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1b9e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1ba2:	2a00      	cmp	r2, #0
    1ba4:	db05      	blt.n	1bb2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1ba6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1ba8:	6821      	ldr	r1, [r4, #0]
    1baa:	9101      	str	r1, [sp, #4]
    1bac:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1bae:	2500      	movs	r5, #0
    1bb0:	e7ca      	b.n	1b48 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1bb2:	429d      	cmp	r5, r3
    1bb4:	bf94      	ite	ls
    1bb6:	2500      	movls	r5, #0
    1bb8:	2501      	movhi	r5, #1
    1bba:	e7db      	b.n	1b74 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1bbc:	f06f 0011 	mvn.w	r0, #17
    1bc0:	e7a6      	b.n	1b10 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1bc2:	2002      	movs	r0, #2
    1bc4:	e7a4      	b.n	1b10 <usb_d_ep_transfer+0x54>
    1bc6:	bf00      	nop
    1bc8:	000016f1 	.word	0x000016f1
    1bcc:	00000ed9 	.word	0x00000ed9
    1bd0:	20000120 	.word	0x20000120
    1bd4:	00000ee7 	.word	0x00000ee7
    1bd8:	000046c1 	.word	0x000046c1

00001bdc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1bdc:	b538      	push	{r3, r4, r5, lr}
    1bde:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1be0:	b141      	cbz	r1, 1bf4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1be2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1be4:	bf0c      	ite	eq
    1be6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1be8:	2102      	movne	r1, #2
    1bea:	4b13      	ldr	r3, [pc, #76]	; (1c38 <usb_d_ep_halt+0x5c>)
    1bec:	4798      	blx	r3
    1bee:	4603      	mov	r3, r0
	}
}
    1bf0:	4618      	mov	r0, r3
    1bf2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1bf4:	4b11      	ldr	r3, [pc, #68]	; (1c3c <usb_d_ep_halt+0x60>)
    1bf6:	4798      	blx	r3
	if (ep_index < 0) {
    1bf8:	1e05      	subs	r5, r0, #0
    1bfa:	db19      	blt.n	1c30 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1bfc:	2102      	movs	r1, #2
    1bfe:	4620      	mov	r0, r4
    1c00:	4b0d      	ldr	r3, [pc, #52]	; (1c38 <usb_d_ep_halt+0x5c>)
    1c02:	4798      	blx	r3
    1c04:	4603      	mov	r3, r0
    1c06:	2800      	cmp	r0, #0
    1c08:	d0f2      	beq.n	1bf0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c0a:	2100      	movs	r1, #0
    1c0c:	4620      	mov	r0, r4
    1c0e:	4b0a      	ldr	r3, [pc, #40]	; (1c38 <usb_d_ep_halt+0x5c>)
    1c10:	4798      	blx	r3
		if (rc < 0) {
    1c12:	1e03      	subs	r3, r0, #0
    1c14:	dbec      	blt.n	1bf0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1c16:	4b0a      	ldr	r3, [pc, #40]	; (1c40 <usb_d_ep_halt+0x64>)
    1c18:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1c1c:	2201      	movs	r2, #1
    1c1e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1c20:	2103      	movs	r1, #3
    1c22:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1c24:	69db      	ldr	r3, [r3, #28]
    1c26:	2200      	movs	r2, #0
    1c28:	4620      	mov	r0, r4
    1c2a:	4798      	blx	r3
	return ERR_NONE;
    1c2c:	2300      	movs	r3, #0
    1c2e:	e7df      	b.n	1bf0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1c30:	f06f 0311 	mvn.w	r3, #17
    1c34:	e7dc      	b.n	1bf0 <usb_d_ep_halt+0x14>
    1c36:	bf00      	nop
    1c38:	00004519 	.word	0x00004519
    1c3c:	000016f1 	.word	0x000016f1
    1c40:	20000120 	.word	0x20000120

00001c44 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1c44:	b538      	push	{r3, r4, r5, lr}
    1c46:	460d      	mov	r5, r1
    1c48:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c4a:	4b0e      	ldr	r3, [pc, #56]	; (1c84 <usb_d_ep_register_callback+0x40>)
    1c4c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1c4e:	4b0e      	ldr	r3, [pc, #56]	; (1c88 <usb_d_ep_register_callback+0x44>)
    1c50:	2c00      	cmp	r4, #0
    1c52:	bf08      	it	eq
    1c54:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1c56:	2800      	cmp	r0, #0
    1c58:	db13      	blt.n	1c82 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1c5a:	2d01      	cmp	r5, #1
    1c5c:	d008      	beq.n	1c70 <usb_d_ep_register_callback+0x2c>
    1c5e:	b115      	cbz	r5, 1c66 <usb_d_ep_register_callback+0x22>
    1c60:	2d02      	cmp	r5, #2
    1c62:	d00a      	beq.n	1c7a <usb_d_ep_register_callback+0x36>
    1c64:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1c66:	4b09      	ldr	r3, [pc, #36]	; (1c8c <usb_d_ep_register_callback+0x48>)
    1c68:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1c6c:	6144      	str	r4, [r0, #20]
		break;
    1c6e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1c70:	4b06      	ldr	r3, [pc, #24]	; (1c8c <usb_d_ep_register_callback+0x48>)
    1c72:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1c76:	6184      	str	r4, [r0, #24]
		break;
    1c78:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1c7a:	4b04      	ldr	r3, [pc, #16]	; (1c8c <usb_d_ep_register_callback+0x48>)
    1c7c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1c80:	61c4      	str	r4, [r0, #28]
    1c82:	bd38      	pop	{r3, r4, r5, pc}
    1c84:	000016f1 	.word	0x000016f1
    1c88:	00001735 	.word	0x00001735
    1c8c:	20000120 	.word	0x20000120

00001c90 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1c90:	b900      	cbnz	r0, 1c94 <assert+0x4>
		__asm("BKPT #0");
    1c92:	be00      	bkpt	0x0000
    1c94:	4770      	bx	lr

00001c96 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1c96:	6803      	ldr	r3, [r0, #0]
    1c98:	b14b      	cbz	r3, 1cae <is_list_element+0x18>
		if (it == element) {
    1c9a:	428b      	cmp	r3, r1
    1c9c:	d009      	beq.n	1cb2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1c9e:	681b      	ldr	r3, [r3, #0]
    1ca0:	b11b      	cbz	r3, 1caa <is_list_element+0x14>
		if (it == element) {
    1ca2:	4299      	cmp	r1, r3
    1ca4:	d1fb      	bne.n	1c9e <is_list_element+0x8>
			return true;
    1ca6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1ca8:	4770      	bx	lr
	return false;
    1caa:	2000      	movs	r0, #0
    1cac:	4770      	bx	lr
    1cae:	2000      	movs	r0, #0
    1cb0:	4770      	bx	lr
			return true;
    1cb2:	2001      	movs	r0, #1
    1cb4:	4770      	bx	lr
	...

00001cb8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1cb8:	b538      	push	{r3, r4, r5, lr}
    1cba:	4604      	mov	r4, r0
    1cbc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1cbe:	4b06      	ldr	r3, [pc, #24]	; (1cd8 <list_insert_as_head+0x20>)
    1cc0:	4798      	blx	r3
    1cc2:	f080 0001 	eor.w	r0, r0, #1
    1cc6:	2239      	movs	r2, #57	; 0x39
    1cc8:	4904      	ldr	r1, [pc, #16]	; (1cdc <list_insert_as_head+0x24>)
    1cca:	b2c0      	uxtb	r0, r0
    1ccc:	4b04      	ldr	r3, [pc, #16]	; (1ce0 <list_insert_as_head+0x28>)
    1cce:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1cd0:	6823      	ldr	r3, [r4, #0]
    1cd2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1cd4:	6025      	str	r5, [r4, #0]
    1cd6:	bd38      	pop	{r3, r4, r5, pc}
    1cd8:	00001c97 	.word	0x00001c97
    1cdc:	00005d08 	.word	0x00005d08
    1ce0:	00001c91 	.word	0x00001c91

00001ce4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1ce4:	6803      	ldr	r3, [r0, #0]
    1ce6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1ce8:	6001      	str	r1, [r0, #0]
    1cea:	4770      	bx	lr

00001cec <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1cec:	b570      	push	{r4, r5, r6, lr}
    1cee:	4605      	mov	r5, r0
    1cf0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1cf2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1cf4:	4b0a      	ldr	r3, [pc, #40]	; (1d20 <list_insert_at_end+0x34>)
    1cf6:	4798      	blx	r3
    1cf8:	f080 0001 	eor.w	r0, r0, #1
    1cfc:	224f      	movs	r2, #79	; 0x4f
    1cfe:	4909      	ldr	r1, [pc, #36]	; (1d24 <list_insert_at_end+0x38>)
    1d00:	b2c0      	uxtb	r0, r0
    1d02:	4b09      	ldr	r3, [pc, #36]	; (1d28 <list_insert_at_end+0x3c>)
    1d04:	4798      	blx	r3

	if (!list->head) {
    1d06:	682b      	ldr	r3, [r5, #0]
    1d08:	b91b      	cbnz	r3, 1d12 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1d0a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1d0c:	6033      	str	r3, [r6, #0]
		return;
    1d0e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1d10:	461c      	mov	r4, r3
	while (it->next) {
    1d12:	6823      	ldr	r3, [r4, #0]
    1d14:	2b00      	cmp	r3, #0
    1d16:	d1fb      	bne.n	1d10 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1d18:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1d1a:	6033      	str	r3, [r6, #0]
    1d1c:	bd70      	pop	{r4, r5, r6, pc}
    1d1e:	bf00      	nop
    1d20:	00001c97 	.word	0x00001c97
    1d24:	00005d08 	.word	0x00005d08
    1d28:	00001c91 	.word	0x00001c91

00001d2c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1d2c:	6803      	ldr	r3, [r0, #0]
    1d2e:	b10b      	cbz	r3, 1d34 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1d30:	681a      	ldr	r2, [r3, #0]
    1d32:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1d34:	4618      	mov	r0, r3
    1d36:	4770      	bx	lr

00001d38 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1d38:	b430      	push	{r4, r5}
	dev->hw = hw;
    1d3a:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1d3c:	698b      	ldr	r3, [r1, #24]
    1d3e:	f043 0301 	orr.w	r3, r3, #1
    1d42:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1d44:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1d46:	6993      	ldr	r3, [r2, #24]
    1d48:	f013 0f01 	tst.w	r3, #1
    1d4c:	d0fb      	beq.n	1d46 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1d4e:	6993      	ldr	r3, [r2, #24]
    1d50:	f043 0302 	orr.w	r3, r3, #2
    1d54:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1d56:	4b34      	ldr	r3, [pc, #208]	; (1e28 <_can_async_init+0xf0>)
    1d58:	4299      	cmp	r1, r3
    1d5a:	d011      	beq.n	1d80 <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1d5c:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1d5e:	6993      	ldr	r3, [r2, #24]
    1d60:	f023 0302 	bic.w	r3, r3, #2
    1d64:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1d66:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1d68:	6993      	ldr	r3, [r2, #24]
    1d6a:	f023 0301 	bic.w	r3, r3, #1
    1d6e:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1d70:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1d72:	6993      	ldr	r3, [r2, #24]
    1d74:	f013 0f01 	tst.w	r3, #1
    1d78:	d1fb      	bne.n	1d72 <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1d7a:	2000      	movs	r0, #0
    1d7c:	bc30      	pop	{r4, r5}
    1d7e:	4770      	bx	lr
		_can1_dev    = dev;
    1d80:	4b2a      	ldr	r3, [pc, #168]	; (1e2c <_can_async_init+0xf4>)
    1d82:	461a      	mov	r2, r3
    1d84:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1d88:	4929      	ldr	r1, [pc, #164]	; (1e30 <_can_async_init+0xf8>)
    1d8a:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    1d8c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1d8e:	698c      	ldr	r4, [r1, #24]
    1d90:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    1d92:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1d94:	2400      	movs	r4, #0
    1d96:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1d98:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1d9a:	4d26      	ldr	r5, [pc, #152]	; (1e34 <_can_async_init+0xfc>)
    1d9c:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    1d9e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1da0:	f640 2533 	movw	r5, #2611	; 0xa33
    1da4:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    1da6:	6805      	ldr	r5, [r0, #0]
    1da8:	4923      	ldr	r1, [pc, #140]	; (1e38 <_can_async_init+0x100>)
    1daa:	b289      	uxth	r1, r1
    1dac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1db0:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    1db4:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    1db6:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    1dba:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1dbc:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    1dc0:	6805      	ldr	r5, [r0, #0]
    1dc2:	491e      	ldr	r1, [pc, #120]	; (1e3c <_can_async_init+0x104>)
    1dc4:	b289      	uxth	r1, r1
    1dc6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    1dca:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    1dce:	6801      	ldr	r1, [r0, #0]
    1dd0:	b292      	uxth	r2, r2
    1dd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    1dd6:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    1dda:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    1ddc:	2128      	movs	r1, #40	; 0x28
    1dde:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    1de2:	6801      	ldr	r1, [r0, #0]
    1de4:	f103 0214 	add.w	r2, r3, #20
    1de8:	b292      	uxth	r2, r2
    1dea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    1dee:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    1df2:	6802      	ldr	r2, [r0, #0]
    1df4:	331c      	adds	r3, #28
    1df6:	b29b      	uxth	r3, r3
    1df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    1dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    1e00:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    1e02:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e06:	4b0e      	ldr	r3, [pc, #56]	; (1e40 <_can_async_init+0x108>)
    1e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    1e10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e14:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e18:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e1c:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    1e1e:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1e20:	2201      	movs	r2, #1
    1e22:	65da      	str	r2, [r3, #92]	; 0x5c
    1e24:	e79a      	b.n	1d5c <_can_async_init+0x24>
    1e26:	bf00      	nop
    1e28:	42000400 	.word	0x42000400
    1e2c:	200001a0 	.word	0x200001a0
    1e30:	20000000 	.word	0x20000000
    1e34:	06020a07 	.word	0x06020a07
    1e38:	20000850 	.word	0x20000850
    1e3c:	20000830 	.word	0x20000830
    1e40:	e000e100 	.word	0xe000e100

00001e44 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1e44:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1e46:	4b1d      	ldr	r3, [pc, #116]	; (1ebc <CAN1_Handler+0x78>)
    1e48:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1e4a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1e4c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    1e4e:	f014 0f01 	tst.w	r4, #1
    1e52:	d11c      	bne.n	1e8e <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1e54:	f414 7f00 	tst.w	r4, #512	; 0x200
    1e58:	d11d      	bne.n	1e96 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1e5a:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    1e5e:	d11e      	bne.n	1e9e <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    1e60:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1e64:	d120      	bne.n	1ea8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1e66:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1e6a:	d00a      	beq.n	1e82 <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1e6c:	68ea      	ldr	r2, [r5, #12]
    1e6e:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e72:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1e76:	2b00      	cmp	r3, #0
    1e78:	bf14      	ite	ne
    1e7a:	2102      	movne	r1, #2
    1e7c:	2101      	moveq	r1, #1
    1e7e:	4628      	mov	r0, r5
    1e80:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    1e82:	f014 0f08 	tst.w	r4, #8
    1e86:	d114      	bne.n	1eb2 <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1e88:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1e8a:	651c      	str	r4, [r3, #80]	; 0x50
    1e8c:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    1e8e:	68ab      	ldr	r3, [r5, #8]
    1e90:	4628      	mov	r0, r5
    1e92:	4798      	blx	r3
    1e94:	e7de      	b.n	1e54 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    1e96:	686b      	ldr	r3, [r5, #4]
    1e98:	4628      	mov	r0, r5
    1e9a:	4798      	blx	r3
    1e9c:	e7dd      	b.n	1e5a <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    1e9e:	68eb      	ldr	r3, [r5, #12]
    1ea0:	2103      	movs	r1, #3
    1ea2:	4628      	mov	r0, r5
    1ea4:	4798      	blx	r3
    1ea6:	e7db      	b.n	1e60 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1ea8:	68eb      	ldr	r3, [r5, #12]
    1eaa:	2100      	movs	r1, #0
    1eac:	4628      	mov	r0, r5
    1eae:	4798      	blx	r3
    1eb0:	e7d9      	b.n	1e66 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1eb2:	68eb      	ldr	r3, [r5, #12]
    1eb4:	2104      	movs	r1, #4
    1eb6:	4628      	mov	r0, r5
    1eb8:	4798      	blx	r3
    1eba:	e7e5      	b.n	1e88 <CAN1_Handler+0x44>
    1ebc:	200001a0 	.word	0x200001a0

00001ec0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    1ec0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    1ec4:	00c0      	lsls	r0, r0, #3
    1ec6:	3002      	adds	r0, #2
    1ec8:	4b02      	ldr	r3, [pc, #8]	; (1ed4 <_get_cycles_for_us+0x14>)
    1eca:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1ece:	0840      	lsrs	r0, r0, #1
    1ed0:	4770      	bx	lr
    1ed2:	bf00      	nop
    1ed4:	aaaaaaab 	.word	0xaaaaaaab

00001ed8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1ed8:	3901      	subs	r1, #1
    1eda:	d8fd      	bhi.n	1ed8 <_delay_cycles>
    1edc:	4770      	bx	lr
    1ede:	bf00      	nop

00001ee0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1ee0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1ee2:	4a13      	ldr	r2, [pc, #76]	; (1f30 <_init_chip+0x50>)
    1ee4:	8813      	ldrh	r3, [r2, #0]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1eec:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1eee:	4b11      	ldr	r3, [pc, #68]	; (1f34 <_init_chip+0x54>)
    1ef0:	4798      	blx	r3
	_oscctrl_init_sources();
    1ef2:	4b11      	ldr	r3, [pc, #68]	; (1f38 <_init_chip+0x58>)
    1ef4:	4798      	blx	r3
	_mclk_init();
    1ef6:	4b11      	ldr	r3, [pc, #68]	; (1f3c <_init_chip+0x5c>)
    1ef8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1efa:	f44f 6084 	mov.w	r0, #1056	; 0x420
    1efe:	4c10      	ldr	r4, [pc, #64]	; (1f40 <_init_chip+0x60>)
    1f00:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1f02:	4b10      	ldr	r3, [pc, #64]	; (1f44 <_init_chip+0x64>)
    1f04:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1f06:	f640 30df 	movw	r0, #3039	; 0xbdf
    1f0a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1f0c:	4b0e      	ldr	r3, [pc, #56]	; (1f48 <_init_chip+0x68>)
    1f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f10:	62da      	str	r2, [r3, #44]	; 0x2c
    1f12:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1f16:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1f1a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1f1e:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1f22:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1f26:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1f2a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1f2e:	bd10      	pop	{r4, pc}
    1f30:	41004000 	.word	0x41004000
    1f34:	000022b9 	.word	0x000022b9
    1f38:	000022d9 	.word	0x000022d9
    1f3c:	000022ad 	.word	0x000022ad
    1f40:	000021c5 	.word	0x000021c5
    1f44:	000022f5 	.word	0x000022f5
    1f48:	41008000 	.word	0x41008000

00001f4c <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    1f4c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    1f4e:	2000      	movs	r0, #0
    1f50:	4770      	bx	lr
	...

00001f54 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f58:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1f5a:	4b32      	ldr	r3, [pc, #200]	; (2024 <_ext_irq_handler+0xd0>)
    1f5c:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1f5e:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1f60:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1f62:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1f64:	4b30      	ldr	r3, [pc, #192]	; (2028 <_ext_irq_handler+0xd4>)
    1f66:	6818      	ldr	r0, [r3, #0]
    1f68:	22f4      	movs	r2, #244	; 0xf4
    1f6a:	4930      	ldr	r1, [pc, #192]	; (202c <_ext_irq_handler+0xd8>)
    1f6c:	3000      	adds	r0, #0
    1f6e:	bf18      	it	ne
    1f70:	2001      	movne	r0, #1
    1f72:	4b2f      	ldr	r3, [pc, #188]	; (2030 <_ext_irq_handler+0xdc>)
    1f74:	4798      	blx	r3

	while (flags) {
    1f76:	9b01      	ldr	r3, [sp, #4]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d04f      	beq.n	201c <_ext_irq_handler+0xc8>
    1f7c:	f04f 36ff 	mov.w	r6, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1f80:	4d2c      	ldr	r5, [pc, #176]	; (2034 <_ext_irq_handler+0xe0>)
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    1f82:	4f29      	ldr	r7, [pc, #164]	; (2028 <_ext_irq_handler+0xd4>)
	return ((Eic *)hw)->INTFLAG.reg;
    1f84:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2024 <_ext_irq_handler+0xd0>
    1f88:	e03d      	b.n	2006 <_ext_irq_handler+0xb2>
				if (_map[middle].extint == pos) {
    1f8a:	f04f 0e02 	mov.w	lr, #2
					pin = _map[middle].pin;
    1f8e:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
    1f92:	f8de 6004 	ldr.w	r6, [lr, #4]
			if (INVALID_PIN_NUMBER != pin) {
    1f96:	f1b6 3fff 	cmp.w	r6, #4294967295
    1f9a:	d002      	beq.n	1fa2 <_ext_irq_handler+0x4e>
				callback(pin);
    1f9c:	4630      	mov	r0, r6
    1f9e:	683b      	ldr	r3, [r7, #0]
    1fa0:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1fa2:	9b01      	ldr	r3, [sp, #4]
    1fa4:	2201      	movs	r2, #1
    1fa6:	fa02 f404 	lsl.w	r4, r2, r4
    1faa:	ea23 0404 	bic.w	r4, r3, r4
    1fae:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1fb0:	9a01      	ldr	r2, [sp, #4]
    1fb2:	fa92 f3a2 	rbit	r3, r2
    1fb6:	fab3 f383 	clz	r3, r3
    1fba:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    1fbc:	bf08      	it	eq
    1fbe:	f04f 33ff 	moveq.w	r3, #4294967295
    1fc2:	d018      	beq.n	1ff6 <_ext_irq_handler+0xa2>
				if (_map[middle].extint == pos) {
    1fc4:	461c      	mov	r4, r3
    1fc6:	2b06      	cmp	r3, #6
    1fc8:	d0df      	beq.n	1f8a <_ext_irq_handler+0x36>
    1fca:	2206      	movs	r2, #6
    1fcc:	2302      	movs	r3, #2
    1fce:	2004      	movs	r0, #4
    1fd0:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
    1fd2:	4294      	cmp	r4, r2
					lower = middle + 1;
    1fd4:	bfc7      	ittee	gt
    1fd6:	3301      	addgt	r3, #1
    1fd8:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
    1fda:	f103 33ff 	addle.w	r3, r3, #4294967295
    1fde:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
    1fe0:	4281      	cmp	r1, r0
    1fe2:	d8d8      	bhi.n	1f96 <_ext_irq_handler+0x42>
				middle = (upper + lower) >> 1;
    1fe4:	1843      	adds	r3, r0, r1
    1fe6:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1fea:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
    1fec:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    1ff0:	42a2      	cmp	r2, r4
    1ff2:	d1ee      	bne.n	1fd2 <_ext_irq_handler+0x7e>
    1ff4:	e7cb      	b.n	1f8e <_ext_irq_handler+0x3a>
    1ff6:	f8d8 3014 	ldr.w	r3, [r8, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1ffa:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1ffc:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1ffe:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
    2002:	9b01      	ldr	r3, [sp, #4]
    2004:	b153      	cbz	r3, 201c <_ext_irq_handler+0xc8>
		pos = ffs(flags) - 1;
    2006:	9a01      	ldr	r2, [sp, #4]
    2008:	fa92 f3a2 	rbit	r3, r2
    200c:	fab3 f383 	clz	r3, r3
    2010:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    2012:	bf08      	it	eq
    2014:	f04f 33ff 	moveq.w	r3, #4294967295
    2018:	d1d4      	bne.n	1fc4 <_ext_irq_handler+0x70>
    201a:	e7ec      	b.n	1ff6 <_ext_irq_handler+0xa2>
	}
}
    201c:	b002      	add	sp, #8
    201e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2022:	bf00      	nop
    2024:	40002800 	.word	0x40002800
    2028:	200001cc 	.word	0x200001cc
    202c:	00005d48 	.word	0x00005d48
    2030:	00001c91 	.word	0x00001c91
    2034:	00005d28 	.word	0x00005d28

00002038 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    2038:	4b3c      	ldr	r3, [pc, #240]	; (212c <_ext_irq_init+0xf4>)
    203a:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    203c:	f013 0f01 	tst.w	r3, #1
    2040:	d11f      	bne.n	2082 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2042:	4a3a      	ldr	r2, [pc, #232]	; (212c <_ext_irq_init+0xf4>)
    2044:	6853      	ldr	r3, [r2, #4]
    2046:	f013 0f03 	tst.w	r3, #3
    204a:	d1fb      	bne.n	2044 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    204c:	4b37      	ldr	r3, [pc, #220]	; (212c <_ext_irq_init+0xf4>)
    204e:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    2050:	f013 0f02 	tst.w	r3, #2
    2054:	d00d      	beq.n	2072 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    2056:	4a35      	ldr	r2, [pc, #212]	; (212c <_ext_irq_init+0xf4>)
    2058:	7813      	ldrb	r3, [r2, #0]
    205a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    205e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2060:	6853      	ldr	r3, [r2, #4]
    2062:	f013 0f03 	tst.w	r3, #3
    2066:	d1fb      	bne.n	2060 <_ext_irq_init+0x28>
    2068:	4a30      	ldr	r2, [pc, #192]	; (212c <_ext_irq_init+0xf4>)
    206a:	6853      	ldr	r3, [r2, #4]
    206c:	f013 0f02 	tst.w	r3, #2
    2070:	d1fb      	bne.n	206a <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    2072:	2201      	movs	r2, #1
    2074:	4b2d      	ldr	r3, [pc, #180]	; (212c <_ext_irq_init+0xf4>)
    2076:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2078:	461a      	mov	r2, r3
    207a:	6853      	ldr	r3, [r2, #4]
    207c:	f013 0f03 	tst.w	r3, #3
    2080:	d1fb      	bne.n	207a <_ext_irq_init+0x42>
    2082:	4a2a      	ldr	r2, [pc, #168]	; (212c <_ext_irq_init+0xf4>)
    2084:	6853      	ldr	r3, [r2, #4]
    2086:	f013 0f01 	tst.w	r3, #1
    208a:	d1fb      	bne.n	2084 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    208c:	4a27      	ldr	r2, [pc, #156]	; (212c <_ext_irq_init+0xf4>)
    208e:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    2090:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    2094:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2096:	6853      	ldr	r3, [r2, #4]
    2098:	f013 0f03 	tst.w	r3, #3
    209c:	d1fb      	bne.n	2096 <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    209e:	4b23      	ldr	r3, [pc, #140]	; (212c <_ext_irq_init+0xf4>)
    20a0:	2200      	movs	r2, #0
    20a2:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    20a4:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    20a6:	2130      	movs	r1, #48	; 0x30
    20a8:	6199      	str	r1, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    20aa:	6319      	str	r1, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    20ac:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    20ae:	f44f 0119 	mov.w	r1, #10027008	; 0x990000
    20b2:	61d9      	str	r1, [r3, #28]
    20b4:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    20b6:	781a      	ldrb	r2, [r3, #0]
    20b8:	f042 0202 	orr.w	r2, r2, #2
    20bc:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    20be:	461a      	mov	r2, r3
    20c0:	6853      	ldr	r3, [r2, #4]
    20c2:	f013 0f03 	tst.w	r3, #3
    20c6:	d1fb      	bne.n	20c0 <_ext_irq_init+0x88>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20c8:	4b19      	ldr	r3, [pc, #100]	; (2130 <_ext_irq_init+0xf8>)
    20ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    20ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    20d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20d6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20de:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    20e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    20e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20ec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20f4:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    20fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    20fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2102:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2106:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    210a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    210c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2114:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2118:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    211c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2120:	601a      	str	r2, [r3, #0]
	callback = cb;
    2122:	4b04      	ldr	r3, [pc, #16]	; (2134 <_ext_irq_init+0xfc>)
    2124:	6018      	str	r0, [r3, #0]
}
    2126:	2000      	movs	r0, #0
    2128:	4770      	bx	lr
    212a:	bf00      	nop
    212c:	40002800 	.word	0x40002800
    2130:	e000e100 	.word	0xe000e100
    2134:	200001cc 	.word	0x200001cc

00002138 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    2138:	b508      	push	{r3, lr}
	_ext_irq_handler();
    213a:	4b01      	ldr	r3, [pc, #4]	; (2140 <EIC_4_Handler+0x8>)
    213c:	4798      	blx	r3
    213e:	bd08      	pop	{r3, pc}
    2140:	00001f55 	.word	0x00001f55

00002144 <EIC_5_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    2144:	b508      	push	{r3, lr}
	_ext_irq_handler();
    2146:	4b01      	ldr	r3, [pc, #4]	; (214c <EIC_5_Handler+0x8>)
    2148:	4798      	blx	r3
    214a:	bd08      	pop	{r3, pc}
    214c:	00001f55 	.word	0x00001f55

00002150 <EIC_6_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    2150:	b508      	push	{r3, lr}
	_ext_irq_handler();
    2152:	4b01      	ldr	r3, [pc, #4]	; (2158 <EIC_6_Handler+0x8>)
    2154:	4798      	blx	r3
    2156:	bd08      	pop	{r3, pc}
    2158:	00001f55 	.word	0x00001f55

0000215c <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    215c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    215e:	4b01      	ldr	r3, [pc, #4]	; (2164 <EIC_7_Handler+0x8>)
    2160:	4798      	blx	r3
    2162:	bd08      	pop	{r3, pc}
    2164:	00001f55 	.word	0x00001f55

00002168 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2168:	b430      	push	{r4, r5}
    216a:	4814      	ldr	r0, [pc, #80]	; (21bc <_event_system_init+0x54>)
    216c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2170:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2172:	4c13      	ldr	r4, [pc, #76]	; (21c0 <_event_system_init+0x58>)
    2174:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2176:	f813 1b01 	ldrb.w	r1, [r3], #1
    217a:	3248      	adds	r2, #72	; 0x48
    217c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2180:	42ab      	cmp	r3, r5
    2182:	d1f7      	bne.n	2174 <_event_system_init+0xc>
    2184:	480d      	ldr	r0, [pc, #52]	; (21bc <_event_system_init+0x54>)
    2186:	f100 0442 	add.w	r4, r0, #66	; 0x42
    218a:	3080      	adds	r0, #128	; 0x80
    218c:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    218e:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2192:	00ca      	lsls	r2, r1, #3
    2194:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2198:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    219c:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    219e:	f850 3f04 	ldr.w	r3, [r0, #4]!
    21a2:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    21a4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    21a8:	43db      	mvns	r3, r3
    21aa:	b2db      	uxtb	r3, r3
    21ac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    21b0:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    21b2:	2920      	cmp	r1, #32
    21b4:	d1eb      	bne.n	218e <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    21b6:	2000      	movs	r0, #0
    21b8:	bc30      	pop	{r4, r5}
    21ba:	4770      	bx	lr
    21bc:	00005d60 	.word	0x00005d60
    21c0:	4100e000 	.word	0x4100e000

000021c4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    21c4:	f010 0f01 	tst.w	r0, #1
    21c8:	d008      	beq.n	21dc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21ca:	4a2f      	ldr	r2, [pc, #188]	; (2288 <_gclk_init_generators_by_fref+0xc4>)
    21cc:	4b2f      	ldr	r3, [pc, #188]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    21ce:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21d0:	4619      	mov	r1, r3
    21d2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    21d6:	684b      	ldr	r3, [r1, #4]
    21d8:	4213      	tst	r3, r2
    21da:	d1fc      	bne.n	21d6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    21dc:	f010 0f02 	tst.w	r0, #2
    21e0:	d008      	beq.n	21f4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21e2:	4a2b      	ldr	r2, [pc, #172]	; (2290 <_gclk_init_generators_by_fref+0xcc>)
    21e4:	4b29      	ldr	r3, [pc, #164]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    21e6:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    21e8:	4619      	mov	r1, r3
    21ea:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    21ee:	684b      	ldr	r3, [r1, #4]
    21f0:	4213      	tst	r3, r2
    21f2:	d1fc      	bne.n	21ee <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    21f4:	f010 0f04 	tst.w	r0, #4
    21f8:	d008      	beq.n	220c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21fa:	4a26      	ldr	r2, [pc, #152]	; (2294 <_gclk_init_generators_by_fref+0xd0>)
    21fc:	4b23      	ldr	r3, [pc, #140]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    21fe:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2200:	4619      	mov	r1, r3
    2202:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2206:	684b      	ldr	r3, [r1, #4]
    2208:	4213      	tst	r3, r2
    220a:	d1fc      	bne.n	2206 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    220c:	f010 0f08 	tst.w	r0, #8
    2210:	d008      	beq.n	2224 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2212:	4a21      	ldr	r2, [pc, #132]	; (2298 <_gclk_init_generators_by_fref+0xd4>)
    2214:	4b1d      	ldr	r3, [pc, #116]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    2216:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2218:	4619      	mov	r1, r3
    221a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    221e:	684b      	ldr	r3, [r1, #4]
    2220:	4213      	tst	r3, r2
    2222:	d1fc      	bne.n	221e <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2224:	f010 0f10 	tst.w	r0, #16
    2228:	d008      	beq.n	223c <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    222a:	4a1c      	ldr	r2, [pc, #112]	; (229c <_gclk_init_generators_by_fref+0xd8>)
    222c:	4b17      	ldr	r3, [pc, #92]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    222e:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2230:	4619      	mov	r1, r3
    2232:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2236:	684b      	ldr	r3, [r1, #4]
    2238:	4213      	tst	r3, r2
    223a:	d1fc      	bne.n	2236 <_gclk_init_generators_by_fref+0x72>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    223c:	f010 0f20 	tst.w	r0, #32
    2240:	d008      	beq.n	2254 <_gclk_init_generators_by_fref+0x90>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2242:	4a17      	ldr	r2, [pc, #92]	; (22a0 <_gclk_init_generators_by_fref+0xdc>)
    2244:	4b11      	ldr	r3, [pc, #68]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    2246:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2248:	4619      	mov	r1, r3
    224a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    224e:	684b      	ldr	r3, [r1, #4]
    2250:	4213      	tst	r3, r2
    2252:	d1fc      	bne.n	224e <_gclk_init_generators_by_fref+0x8a>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    2254:	f410 6f80 	tst.w	r0, #1024	; 0x400
    2258:	d008      	beq.n	226c <_gclk_init_generators_by_fref+0xa8>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    225a:	4a12      	ldr	r2, [pc, #72]	; (22a4 <_gclk_init_generators_by_fref+0xe0>)
    225c:	4b0b      	ldr	r3, [pc, #44]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    225e:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2260:	4619      	mov	r1, r3
    2262:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2266:	684b      	ldr	r3, [r1, #4]
    2268:	4213      	tst	r3, r2
    226a:	d1fc      	bne.n	2266 <_gclk_init_generators_by_fref+0xa2>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    226c:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2270:	d008      	beq.n	2284 <_gclk_init_generators_by_fref+0xc0>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2272:	4a0d      	ldr	r2, [pc, #52]	; (22a8 <_gclk_init_generators_by_fref+0xe4>)
    2274:	4b05      	ldr	r3, [pc, #20]	; (228c <_gclk_init_generators_by_fref+0xc8>)
    2276:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2278:	4619      	mov	r1, r3
    227a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    227e:	684b      	ldr	r3, [r1, #4]
    2280:	4213      	tst	r3, r2
    2282:	d1fc      	bne.n	227e <_gclk_init_generators_by_fref+0xba>
    2284:	4770      	bx	lr
    2286:	bf00      	nop
    2288:	00010107 	.word	0x00010107
    228c:	40001c00 	.word	0x40001c00
    2290:	00010907 	.word	0x00010907
    2294:	00010906 	.word	0x00010906
    2298:	00011908 	.word	0x00011908
    229c:	00010901 	.word	0x00010901
    22a0:	00060901 	.word	0x00060901
    22a4:	00010905 	.word	0x00010905
    22a8:	00041905 	.word	0x00041905

000022ac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    22ac:	2201      	movs	r2, #1
    22ae:	4b01      	ldr	r3, [pc, #4]	; (22b4 <_mclk_init+0x8>)
    22b0:	715a      	strb	r2, [r3, #5]
    22b2:	4770      	bx	lr
    22b4:	40000800 	.word	0x40000800

000022b8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    22b8:	4b06      	ldr	r3, [pc, #24]	; (22d4 <_osc32kctrl_init_sources+0x1c>)
    22ba:	f242 028e 	movw	r2, #8334	; 0x208e
    22be:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    22c0:	2200      	movs	r2, #0
    22c2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    22c4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    22c6:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    22c8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    22cc:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    22ce:	741a      	strb	r2, [r3, #16]
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	40001400 	.word	0x40001400

000022d8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    22d8:	4a04      	ldr	r2, [pc, #16]	; (22ec <_oscctrl_init_sources+0x14>)
    22da:	4b05      	ldr	r3, [pc, #20]	; (22f0 <_oscctrl_init_sources+0x18>)
    22dc:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    22de:	461a      	mov	r2, r3
    22e0:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    22e2:	f013 0f02 	tst.w	r3, #2
    22e6:	d0fb      	beq.n	22e0 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    22e8:	4770      	bx	lr
    22ea:	bf00      	nop
    22ec:	03002606 	.word	0x03002606
    22f0:	40001000 	.word	0x40001000

000022f4 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    22f4:	4a55      	ldr	r2, [pc, #340]	; (244c <_oscctrl_init_referenced_generators+0x158>)
    22f6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    22f8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    22fc:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2300:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2302:	4611      	mov	r1, r2
    2304:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2308:	684b      	ldr	r3, [r1, #4]
    230a:	4213      	tst	r3, r2
    230c:	d1fc      	bne.n	2308 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    230e:	4a4f      	ldr	r2, [pc, #316]	; (244c <_oscctrl_init_referenced_generators+0x158>)
    2310:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2312:	f013 0f04 	tst.w	r3, #4
    2316:	d1fb      	bne.n	2310 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2318:	4b4d      	ldr	r3, [pc, #308]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    231a:	2200      	movs	r2, #0
    231c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    231e:	4a4d      	ldr	r2, [pc, #308]	; (2454 <_oscctrl_init_referenced_generators+0x160>)
    2320:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2322:	461a      	mov	r2, r3
    2324:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2328:	f013 0f10 	tst.w	r3, #16
    232c:	d1fa      	bne.n	2324 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    232e:	2200      	movs	r2, #0
    2330:	4b47      	ldr	r3, [pc, #284]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    2332:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2336:	461a      	mov	r2, r3
    2338:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    233c:	f013 0f04 	tst.w	r3, #4
    2340:	d1fa      	bne.n	2338 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2342:	2202      	movs	r2, #2
    2344:	4b42      	ldr	r3, [pc, #264]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    2346:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2348:	461a      	mov	r2, r3
    234a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    234e:	f013 0f02 	tst.w	r3, #2
    2352:	d1fa      	bne.n	234a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2354:	4b3e      	ldr	r3, [pc, #248]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    2356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2358:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    235a:	461a      	mov	r2, r3
    235c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2360:	f013 0f08 	tst.w	r3, #8
    2364:	d1fa      	bne.n	235c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2366:	2219      	movs	r2, #25
    2368:	4b39      	ldr	r3, [pc, #228]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    236a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    236e:	461a      	mov	r2, r3
    2370:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2374:	f013 0f04 	tst.w	r3, #4
    2378:	d1fa      	bne.n	2370 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    237a:	2245      	movs	r2, #69	; 0x45
    237c:	4b33      	ldr	r3, [pc, #204]	; (244c <_oscctrl_init_referenced_generators+0x158>)
    237e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2382:	223b      	movs	r2, #59	; 0x3b
    2384:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2388:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    238a:	461a      	mov	r2, r3
    238c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    238e:	f013 0f06 	tst.w	r3, #6
    2392:	d1fb      	bne.n	238c <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2394:	4b2e      	ldr	r3, [pc, #184]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    2396:	f44f 6201 	mov.w	r2, #2064	; 0x810
    239a:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    239c:	2202      	movs	r2, #2
    239e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    23a2:	461a      	mov	r2, r3
    23a4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    23a6:	f013 0f02 	tst.w	r3, #2
    23aa:	d1fb      	bne.n	23a4 <_oscctrl_init_referenced_generators+0xb0>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    23ac:	4a2a      	ldr	r2, [pc, #168]	; (2458 <_oscctrl_init_referenced_generators+0x164>)
    23ae:	4b28      	ldr	r3, [pc, #160]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    23b0:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    23b2:	461a      	mov	r2, r3
    23b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    23b6:	f013 0f06 	tst.w	r3, #6
    23ba:	d1fb      	bne.n	23b4 <_oscctrl_init_referenced_generators+0xc0>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    23bc:	4b24      	ldr	r3, [pc, #144]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    23be:	f44f 6203 	mov.w	r2, #2096	; 0x830
    23c2:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    23c4:	2202      	movs	r2, #2
    23c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    23ca:	461a      	mov	r2, r3
    23cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
    23ce:	f013 0f02 	tst.w	r3, #2
    23d2:	d1fb      	bne.n	23cc <_oscctrl_init_referenced_generators+0xd8>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    23d4:	4b1e      	ldr	r3, [pc, #120]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    23d6:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    23da:	f013 0f01 	tst.w	r3, #1
    23de:	d02f      	beq.n	2440 <_oscctrl_init_referenced_generators+0x14c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    23e0:	4a1b      	ldr	r2, [pc, #108]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    23e2:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    23e4:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    23e8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    23ec:	d1f9      	bne.n	23e2 <_oscctrl_init_referenced_generators+0xee>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    23ee:	4b18      	ldr	r3, [pc, #96]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    23f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    23f2:	f012 0f01 	tst.w	r2, #1
    23f6:	d103      	bne.n	2400 <_oscctrl_init_referenced_generators+0x10c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    23f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    23fa:	f012 0f02 	tst.w	r2, #2
    23fe:	d0f7      	beq.n	23f0 <_oscctrl_init_referenced_generators+0xfc>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2400:	4b13      	ldr	r3, [pc, #76]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    2402:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    2404:	f012 0f01 	tst.w	r2, #1
    2408:	d103      	bne.n	2412 <_oscctrl_init_referenced_generators+0x11e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    240a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    240c:	f012 0f02 	tst.w	r2, #2
    2410:	d0f7      	beq.n	2402 <_oscctrl_init_referenced_generators+0x10e>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2412:	4a0e      	ldr	r2, [pc, #56]	; (244c <_oscctrl_init_referenced_generators+0x158>)
    2414:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2416:	2b00      	cmp	r3, #0
    2418:	d1fc      	bne.n	2414 <_oscctrl_init_referenced_generators+0x120>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    241a:	4a0c      	ldr	r2, [pc, #48]	; (244c <_oscctrl_init_referenced_generators+0x158>)
    241c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    241e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2422:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2426:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2428:	4611      	mov	r1, r2
    242a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    242e:	684b      	ldr	r3, [r1, #4]
    2430:	4213      	tst	r3, r2
    2432:	d1fc      	bne.n	242e <_oscctrl_init_referenced_generators+0x13a>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2434:	4a05      	ldr	r2, [pc, #20]	; (244c <_oscctrl_init_referenced_generators+0x158>)
    2436:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2438:	f013 0f04 	tst.w	r3, #4
    243c:	d1fb      	bne.n	2436 <_oscctrl_init_referenced_generators+0x142>
		;
#endif
	(void)hw;
}
    243e:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2440:	4a03      	ldr	r2, [pc, #12]	; (2450 <_oscctrl_init_referenced_generators+0x15c>)
    2442:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2444:	f413 7f80 	tst.w	r3, #256	; 0x100
    2448:	d0fb      	beq.n	2442 <_oscctrl_init_referenced_generators+0x14e>
    244a:	e7d0      	b.n	23ee <_oscctrl_init_referenced_generators+0xfa>
    244c:	40001c00 	.word	0x40001c00
    2450:	40001000 	.word	0x40001000
    2454:	0401bb80 	.word	0x0401bb80
    2458:	000407a0 	.word	0x000407a0

0000245c <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    245c:	b538      	push	{r3, r4, r5, lr}
    245e:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    2460:	4605      	mov	r5, r0
    2462:	b178      	cbz	r0, 2484 <_qspi_sync_init+0x28>
    2464:	1c08      	adds	r0, r1, #0
    2466:	bf18      	it	ne
    2468:	2001      	movne	r0, #1
    246a:	2240      	movs	r2, #64	; 0x40
    246c:	4906      	ldr	r1, [pc, #24]	; (2488 <_qspi_sync_init+0x2c>)
    246e:	4b07      	ldr	r3, [pc, #28]	; (248c <_qspi_sync_init+0x30>)
    2470:	4798      	blx	r3
	dev->prvt = hw;
    2472:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    2474:	2301      	movs	r3, #1
    2476:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    2478:	4b05      	ldr	r3, [pc, #20]	; (2490 <_qspi_sync_init+0x34>)
    247a:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    247c:	4b05      	ldr	r3, [pc, #20]	; (2494 <_qspi_sync_init+0x38>)
    247e:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    2480:	2000      	movs	r0, #0
    2482:	bd38      	pop	{r3, r4, r5, pc}
    2484:	2000      	movs	r0, #0
    2486:	e7f0      	b.n	246a <_qspi_sync_init+0xe>
    2488:	00005e64 	.word	0x00005e64
    248c:	00001c91 	.word	0x00001c91
    2490:	06000011 	.word	0x06000011
    2494:	00241300 	.word	0x00241300

00002498 <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    2498:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    249a:	2202      	movs	r2, #2
    249c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    249e:	2000      	movs	r0, #0
    24a0:	4770      	bx	lr

000024a2 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    24a2:	6803      	ldr	r3, [r0, #0]
    24a4:	2000      	movs	r0, #0
    24a6:	6018      	str	r0, [r3, #0]
	return ERR_NONE;
}
    24a8:	4770      	bx	lr
	...

000024ac <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    24ac:	b570      	push	{r4, r5, r6, lr}
    24ae:	4605      	mov	r5, r0
    24b0:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    24b2:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    24b4:	780a      	ldrb	r2, [r1, #0]
    24b6:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    24ba:	bf1c      	itt	ne
    24bc:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    24be:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    24c0:	780a      	ldrb	r2, [r1, #0]
    24c2:	f012 0f10 	tst.w	r2, #16
    24c6:	d005      	beq.n	24d4 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    24c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    24ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    24ce:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    24d0:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    24d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    24d4:	7822      	ldrb	r2, [r4, #0]
    24d6:	f012 0f40 	tst.w	r2, #64	; 0x40
    24da:	d006      	beq.n	24ea <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    24dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    24de:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    24e2:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    24e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    24e8:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    24ea:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    24ec:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    24ee:	7823      	ldrb	r3, [r4, #0]
    24f0:	f013 0f80 	tst.w	r3, #128	; 0x80
    24f4:	d10c      	bne.n	2510 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    24f6:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    24f8:	4a1f      	ldr	r2, [pc, #124]	; (2578 <_qspi_sync_serial_run_command+0xcc>)
    24fa:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    24fc:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    24fe:	69d3      	ldr	r3, [r2, #28]
    2500:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2504:	d0fb      	beq.n	24fe <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    2506:	f44f 6380 	mov.w	r3, #1024	; 0x400
    250a:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    250c:	2000      	movs	r0, #0
    250e:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    2510:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    2512:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    2516:	bf1a      	itte	ne
    2518:	68a2      	ldrne	r2, [r4, #8]
    251a:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    251e:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    2522:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    2524:	6923      	ldr	r3, [r4, #16]
    2526:	b1ab      	cbz	r3, 2554 <_qspi_sync_serial_run_command+0xa8>
    2528:	2001      	movs	r0, #1
    252a:	2282      	movs	r2, #130	; 0x82
    252c:	4913      	ldr	r1, [pc, #76]	; (257c <_qspi_sync_serial_run_command+0xd0>)
    252e:	4b14      	ldr	r3, [pc, #80]	; (2580 <_qspi_sync_serial_run_command+0xd4>)
    2530:	4798      	blx	r3
	if (cmd->tx_buf) {
    2532:	6923      	ldr	r3, [r4, #16]
    2534:	b19b      	cbz	r3, 255e <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    2536:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    2538:	b138      	cbz	r0, 254a <_qspi_sync_serial_run_command+0x9e>
    253a:	1e72      	subs	r2, r6, #1
    253c:	4418      	add	r0, r3
		*dst++ = *src++;
    253e:	f813 1b01 	ldrb.w	r1, [r3], #1
    2542:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    2546:	4283      	cmp	r3, r0
    2548:	d1f9      	bne.n	253e <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    254a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    254e:	f3bf 8f6f 	isb	sy
    2552:	e7d0      	b.n	24f6 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    2554:	6960      	ldr	r0, [r4, #20]
    2556:	3000      	adds	r0, #0
    2558:	bf18      	it	ne
    255a:	2001      	movne	r0, #1
    255c:	e7e5      	b.n	252a <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    255e:	6963      	ldr	r3, [r4, #20]
    2560:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    2562:	2900      	cmp	r1, #0
    2564:	d0f1      	beq.n	254a <_qspi_sync_serial_run_command+0x9e>
    2566:	3b01      	subs	r3, #1
    2568:	4431      	add	r1, r6
		*dst++ = *src++;
    256a:	f816 2b01 	ldrb.w	r2, [r6], #1
    256e:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    2572:	42b1      	cmp	r1, r6
    2574:	d1f9      	bne.n	256a <_qspi_sync_serial_run_command+0xbe>
    2576:	e7e8      	b.n	254a <_qspi_sync_serial_run_command+0x9e>
    2578:	01000002 	.word	0x01000002
    257c:	00005e64 	.word	0x00005e64
    2580:	00001c91 	.word	0x00001c91

00002584 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2584:	b500      	push	{lr}
    2586:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2588:	4b0d      	ldr	r3, [pc, #52]	; (25c0 <RAMECC_Handler+0x3c>)
    258a:	789b      	ldrb	r3, [r3, #2]
    258c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    258e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2590:	9b01      	ldr	r3, [sp, #4]
    2592:	f013 0f02 	tst.w	r3, #2
    2596:	d006      	beq.n	25a6 <RAMECC_Handler+0x22>
    2598:	4b0a      	ldr	r3, [pc, #40]	; (25c4 <RAMECC_Handler+0x40>)
    259a:	681b      	ldr	r3, [r3, #0]
    259c:	b11b      	cbz	r3, 25a6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    259e:	4a08      	ldr	r2, [pc, #32]	; (25c0 <RAMECC_Handler+0x3c>)
    25a0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    25a2:	4798      	blx	r3
    25a4:	e009      	b.n	25ba <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	f013 0f01 	tst.w	r3, #1
    25ac:	d005      	beq.n	25ba <RAMECC_Handler+0x36>
    25ae:	4b05      	ldr	r3, [pc, #20]	; (25c4 <RAMECC_Handler+0x40>)
    25b0:	685b      	ldr	r3, [r3, #4]
    25b2:	b113      	cbz	r3, 25ba <RAMECC_Handler+0x36>
    25b4:	4a02      	ldr	r2, [pc, #8]	; (25c0 <RAMECC_Handler+0x3c>)
    25b6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    25b8:	4798      	blx	r3
	} else {
		return;
	}
}
    25ba:	b003      	add	sp, #12
    25bc:	f85d fb04 	ldr.w	pc, [sp], #4
    25c0:	41020000 	.word	0x41020000
    25c4:	20000870 	.word	0x20000870

000025c8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    25c8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    25ca:	4604      	mov	r4, r0
    25cc:	2800      	cmp	r0, #0
    25ce:	d042      	beq.n	2656 <_calendar_init+0x8e>
    25d0:	6800      	ldr	r0, [r0, #0]
    25d2:	3000      	adds	r0, #0
    25d4:	bf18      	it	ne
    25d6:	2001      	movne	r0, #1
    25d8:	222f      	movs	r2, #47	; 0x2f
    25da:	4920      	ldr	r1, [pc, #128]	; (265c <_calendar_init+0x94>)
    25dc:	4b20      	ldr	r3, [pc, #128]	; (2660 <_calendar_init+0x98>)
    25de:	4798      	blx	r3

	_rtc_dev = dev;
    25e0:	4b20      	ldr	r3, [pc, #128]	; (2664 <_calendar_init+0x9c>)
    25e2:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    25e4:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    25e6:	691a      	ldr	r2, [r3, #16]
    25e8:	f012 0f01 	tst.w	r2, #1
    25ec:	d1fb      	bne.n	25e6 <_calendar_init+0x1e>
    25ee:	f248 0103 	movw	r1, #32771	; 0x8003
    25f2:	691a      	ldr	r2, [r3, #16]
    25f4:	420a      	tst	r2, r1
    25f6:	d1fc      	bne.n	25f2 <_calendar_init+0x2a>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    25f8:	881a      	ldrh	r2, [r3, #0]
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    25fa:	f012 0f02 	tst.w	r2, #2
    25fe:	d00f      	beq.n	2620 <_calendar_init+0x58>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2600:	881a      	ldrh	r2, [r3, #0]
    2602:	f022 0202 	bic.w	r2, r2, #2
    2606:	0412      	lsls	r2, r2, #16
    2608:	0c12      	lsrs	r2, r2, #16
    260a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    260c:	f248 0103 	movw	r1, #32771	; 0x8003
    2610:	691a      	ldr	r2, [r3, #16]
    2612:	420a      	tst	r2, r1
    2614:	d1fc      	bne.n	2610 <_calendar_init+0x48>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    2616:	6822      	ldr	r2, [r4, #0]
    2618:	6913      	ldr	r3, [r2, #16]
    261a:	f013 0f02 	tst.w	r3, #2
    261e:	d1fb      	bne.n	2618 <_calendar_init+0x50>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2620:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2622:	8813      	ldrh	r3, [r2, #0]
    2624:	b29b      	uxth	r3, r3
    2626:	f043 0301 	orr.w	r3, r3, #1
    262a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    262c:	6913      	ldr	r3, [r2, #16]
    262e:	f013 0f01 	tst.w	r3, #1
    2632:	d1fb      	bne.n	262c <_calendar_init+0x64>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2634:	6823      	ldr	r3, [r4, #0]
    2636:	691a      	ldr	r2, [r3, #16]
    2638:	f012 0f01 	tst.w	r2, #1
    263c:	d1fb      	bne.n	2636 <_calendar_init+0x6e>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    263e:	f44f 420b 	mov.w	r2, #35584	; 0x8b00
    2642:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2644:	f248 0103 	movw	r1, #32771	; 0x8003
    2648:	691a      	ldr	r2, [r3, #16]
    264a:	420a      	tst	r2, r1
    264c:	d1fc      	bne.n	2648 <_calendar_init+0x80>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    264e:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    2650:	2000      	movs	r0, #0
    2652:	6618      	str	r0, [r3, #96]	; 0x60
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
}
    2654:	bd10      	pop	{r4, pc}
    2656:	2000      	movs	r0, #0
    2658:	e7be      	b.n	25d8 <_calendar_init+0x10>
    265a:	bf00      	nop
    265c:	00005e7c 	.word	0x00005e7c
    2660:	00001c91 	.word	0x00001c91
    2664:	200001d0 	.word	0x200001d0

00002668 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2668:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    266a:	4b0f      	ldr	r3, [pc, #60]	; (26a8 <RTC_Handler+0x40>)
    266c:	681c      	ldr	r4, [r3, #0]
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    266e:	6822      	ldr	r2, [r4, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2670:	8991      	ldrh	r1, [r2, #12]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    2672:	8953      	ldrh	r3, [r2, #10]
    2674:	b29b      	uxth	r3, r3
	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    2676:	400b      	ands	r3, r1
    2678:	f413 7f80 	tst.w	r3, #256	; 0x100
    267c:	d103      	bne.n	2686 <RTC_Handler+0x1e>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    267e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2682:	d108      	bne.n	2696 <RTC_Handler+0x2e>
    2684:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    2686:	6863      	ldr	r3, [r4, #4]
    2688:	4620      	mov	r0, r4
    268a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    268c:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    268e:	f44f 7280 	mov.w	r2, #256	; 0x100
    2692:	819a      	strh	r2, [r3, #12]
    2694:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    2696:	68a3      	ldr	r3, [r4, #8]
    2698:	4620      	mov	r0, r4
    269a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    269c:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    269e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    26a2:	819a      	strh	r2, [r3, #12]
}
    26a4:	e7ee      	b.n	2684 <RTC_Handler+0x1c>
    26a6:	bf00      	nop
    26a8:	200001d0 	.word	0x200001d0

000026ac <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    26ac:	b470      	push	{r4, r5, r6}
    26ae:	b089      	sub	sp, #36	; 0x24
    26b0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    26b2:	466c      	mov	r4, sp
    26b4:	4d0d      	ldr	r5, [pc, #52]	; (26ec <_sercom_get_hardware_index+0x40>)
    26b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    26b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    26ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    26be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    26c2:	9b00      	ldr	r3, [sp, #0]
    26c4:	42b3      	cmp	r3, r6
    26c6:	d00d      	beq.n	26e4 <_sercom_get_hardware_index+0x38>
    26c8:	4631      	mov	r1, r6
    26ca:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26cc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    26ce:	f853 2b04 	ldr.w	r2, [r3], #4
    26d2:	428a      	cmp	r2, r1
    26d4:	d007      	beq.n	26e6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26d6:	3001      	adds	r0, #1
    26d8:	2808      	cmp	r0, #8
    26da:	d1f8      	bne.n	26ce <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    26dc:	2000      	movs	r0, #0
}
    26de:	b009      	add	sp, #36	; 0x24
    26e0:	bc70      	pop	{r4, r5, r6}
    26e2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26e4:	2000      	movs	r0, #0
			return i;
    26e6:	b2c0      	uxtb	r0, r0
    26e8:	e7f9      	b.n	26de <_sercom_get_hardware_index+0x32>
    26ea:	bf00      	nop
    26ec:	00005e94 	.word	0x00005e94

000026f0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
    26f0:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    26f4:	d008      	beq.n	2708 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM5) {
    26f6:	4b07      	ldr	r3, [pc, #28]	; (2714 <_sercom_init_irq_param+0x24>)
    26f8:	4298      	cmp	r0, r3
    26fa:	d008      	beq.n	270e <_sercom_init_irq_param+0x1e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM7) {
    26fc:	4b06      	ldr	r3, [pc, #24]	; (2718 <_sercom_init_irq_param+0x28>)
    26fe:	4298      	cmp	r0, r3
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    2700:	bf04      	itt	eq
    2702:	4b06      	ldreq	r3, [pc, #24]	; (271c <_sercom_init_irq_param+0x2c>)
    2704:	6099      	streq	r1, [r3, #8]
    2706:	4770      	bx	lr
		_sercom4_dev = (struct _spi_async_dev *)dev;
    2708:	4b04      	ldr	r3, [pc, #16]	; (271c <_sercom_init_irq_param+0x2c>)
    270a:	6019      	str	r1, [r3, #0]
    270c:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    270e:	4b03      	ldr	r3, [pc, #12]	; (271c <_sercom_init_irq_param+0x2c>)
    2710:	6059      	str	r1, [r3, #4]
    2712:	4770      	bx	lr
    2714:	43000400 	.word	0x43000400
    2718:	43000c00 	.word	0x43000c00
    271c:	200001d4 	.word	0x200001d4

00002720 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2720:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2722:	4b03      	ldr	r3, [pc, #12]	; (2730 <_sercom_get_irq_num+0x10>)
    2724:	4798      	blx	r3
    2726:	0080      	lsls	r0, r0, #2
    2728:	302e      	adds	r0, #46	; 0x2e
}
    272a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    272e:	bd08      	pop	{r3, pc}
    2730:	000026ad 	.word	0x000026ad

00002734 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    2734:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    2736:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2738:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    273a:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    273c:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    273e:	f013 0f01 	tst.w	r3, #1
    2742:	d109      	bne.n	2758 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    2744:	f013 0f04 	tst.w	r3, #4
    2748:	d109      	bne.n	275e <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    274a:	f013 0f02 	tst.w	r3, #2
    274e:	d109      	bne.n	2764 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    2750:	f013 0f80 	tst.w	r3, #128	; 0x80
    2754:	d10b      	bne.n	276e <_spi_handler+0x3a>
    2756:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    2758:	6883      	ldr	r3, [r0, #8]
    275a:	4798      	blx	r3
    275c:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    275e:	68c3      	ldr	r3, [r0, #12]
    2760:	4798      	blx	r3
    2762:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2764:	2302      	movs	r3, #2
    2766:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    2768:	6903      	ldr	r3, [r0, #16]
    276a:	4798      	blx	r3
    276c:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    276e:	2304      	movs	r3, #4
    2770:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2772:	2380      	movs	r3, #128	; 0x80
    2774:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    2776:	6943      	ldr	r3, [r0, #20]
    2778:	f06f 0112 	mvn.w	r1, #18
    277c:	4798      	blx	r3
	}
}
    277e:	e7ea      	b.n	2756 <_spi_handler+0x22>

00002780 <_get_i2cm_index>:
{
    2780:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2782:	4b0a      	ldr	r3, [pc, #40]	; (27ac <_get_i2cm_index+0x2c>)
    2784:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    2786:	2805      	cmp	r0, #5
    2788:	d00c      	beq.n	27a4 <_get_i2cm_index+0x24>
    278a:	2807      	cmp	r0, #7
    278c:	bf08      	it	eq
    278e:	2001      	moveq	r0, #1
    2790:	d009      	beq.n	27a6 <_get_i2cm_index+0x26>
	ASSERT(false);
    2792:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    2796:	4906      	ldr	r1, [pc, #24]	; (27b0 <_get_i2cm_index+0x30>)
    2798:	2000      	movs	r0, #0
    279a:	4b06      	ldr	r3, [pc, #24]	; (27b4 <_get_i2cm_index+0x34>)
    279c:	4798      	blx	r3
	return -1;
    279e:	f04f 30ff 	mov.w	r0, #4294967295
}
    27a2:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    27a4:	2000      	movs	r0, #0
			return i;
    27a6:	b240      	sxtb	r0, r0
    27a8:	bd08      	pop	{r3, pc}
    27aa:	bf00      	nop
    27ac:	000026ad 	.word	0x000026ad
    27b0:	00005f08 	.word	0x00005f08
    27b4:	00001c91 	.word	0x00001c91

000027b8 <_i2c_m_sync_init_impl>:
{
    27b8:	b538      	push	{r3, r4, r5, lr}
    27ba:	4605      	mov	r5, r0
    27bc:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    27be:	4608      	mov	r0, r1
    27c0:	4b32      	ldr	r3, [pc, #200]	; (288c <_i2c_m_sync_init_impl+0xd4>)
    27c2:	4798      	blx	r3
    27c4:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    27c6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    27c8:	f013 0f01 	tst.w	r3, #1
    27cc:	d122      	bne.n	2814 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    27ce:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    27d2:	4a2f      	ldr	r2, [pc, #188]	; (2890 <_i2c_m_sync_init_impl+0xd8>)
    27d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    27d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    27da:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    27de:	69e3      	ldr	r3, [r4, #28]
    27e0:	f013 0f03 	tst.w	r3, #3
    27e4:	d1fb      	bne.n	27de <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    27e6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    27e8:	f013 0f02 	tst.w	r3, #2
    27ec:	d00b      	beq.n	2806 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    27ee:	6823      	ldr	r3, [r4, #0]
    27f0:	f023 0302 	bic.w	r3, r3, #2
    27f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    27f6:	69e3      	ldr	r3, [r4, #28]
    27f8:	f013 0f03 	tst.w	r3, #3
    27fc:	d1fb      	bne.n	27f6 <_i2c_m_sync_init_impl+0x3e>
    27fe:	69e3      	ldr	r3, [r4, #28]
    2800:	f013 0f02 	tst.w	r3, #2
    2804:	d1fb      	bne.n	27fe <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    2806:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    280a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    280c:	69e3      	ldr	r3, [r4, #28]
    280e:	f013 0f03 	tst.w	r3, #3
    2812:	d1fb      	bne.n	280c <_i2c_m_sync_init_impl+0x54>
    2814:	69e3      	ldr	r3, [r4, #28]
    2816:	f013 0f01 	tst.w	r3, #1
    281a:	d1fb      	bne.n	2814 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    281c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2820:	4a1b      	ldr	r2, [pc, #108]	; (2890 <_i2c_m_sync_init_impl+0xd8>)
    2822:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2828:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    282a:	69e3      	ldr	r3, [r4, #28]
    282c:	f013 0f03 	tst.w	r3, #3
    2830:	d1fb      	bne.n	282a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2832:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2836:	4916      	ldr	r1, [pc, #88]	; (2890 <_i2c_m_sync_init_impl+0xd8>)
    2838:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    283e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2840:	69e3      	ldr	r3, [r4, #28]
    2842:	f013 0f04 	tst.w	r3, #4
    2846:	d1fb      	bne.n	2840 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2848:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    284c:	4910      	ldr	r1, [pc, #64]	; (2890 <_i2c_m_sync_init_impl+0xd8>)
    284e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2854:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2856:	f3c2 6301 	ubfx	r3, r2, #24, #2
    285a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    285c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    285e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2862:	2b01      	cmp	r3, #1
    2864:	bf94      	ite	ls
    2866:	2300      	movls	r3, #0
    2868:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    286a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    286e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2870:	69e3      	ldr	r3, [r4, #28]
    2872:	f013 0f04 	tst.w	r3, #4
    2876:	d1fb      	bne.n	2870 <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    2878:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    287c:	4b04      	ldr	r3, [pc, #16]	; (2890 <_i2c_m_sync_init_impl+0xd8>)
    287e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2882:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    2884:	81eb      	strh	r3, [r5, #14]
}
    2886:	2000      	movs	r0, #0
    2888:	bd38      	pop	{r3, r4, r5, pc}
    288a:	bf00      	nop
    288c:	00002781 	.word	0x00002781
    2890:	00005e94 	.word	0x00005e94

00002894 <_sercom_i2c_m_irq_handler>:
{
    2894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2898:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    289a:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    289c:	7e26      	ldrb	r6, [r4, #24]
    289e:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    28a0:	f8df 8234 	ldr.w	r8, [pc, #564]	; 2ad8 <_sercom_i2c_m_irq_handler+0x244>
    28a4:	f240 422a 	movw	r2, #1066	; 0x42a
    28a8:	4641      	mov	r1, r8
    28aa:	3000      	adds	r0, #0
    28ac:	bf18      	it	ne
    28ae:	2001      	movne	r0, #1
    28b0:	4f88      	ldr	r7, [pc, #544]	; (2ad4 <_sercom_i2c_m_irq_handler+0x240>)
    28b2:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    28b4:	6928      	ldr	r0, [r5, #16]
    28b6:	f240 422b 	movw	r2, #1067	; 0x42b
    28ba:	4641      	mov	r1, r8
    28bc:	3000      	adds	r0, #0
    28be:	bf18      	it	ne
    28c0:	2001      	movne	r0, #1
    28c2:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    28c4:	f016 0f80 	tst.w	r6, #128	; 0x80
    28c8:	f040 80f6 	bne.w	2ab8 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    28cc:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    28ce:	69e3      	ldr	r3, [r4, #28]
    28d0:	f013 0f04 	tst.w	r3, #4
    28d4:	d1fb      	bne.n	28ce <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    28d6:	8b63      	ldrh	r3, [r4, #26]
    28d8:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    28da:	f016 0f01 	tst.w	r6, #1
    28de:	f000 8092 	beq.w	2a06 <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    28e2:	f013 0f02 	tst.w	r3, #2
    28e6:	d024      	beq.n	2932 <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    28e8:	2201      	movs	r2, #1
    28ea:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    28ec:	886a      	ldrh	r2, [r5, #2]
    28ee:	b292      	uxth	r2, r2
    28f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    28f4:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    28f6:	886a      	ldrh	r2, [r5, #2]
    28f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    28fc:	0412      	lsls	r2, r2, #16
    28fe:	0c12      	lsrs	r2, r2, #16
    2900:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2902:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    2906:	2b00      	cmp	r3, #0
    2908:	bf14      	ite	ne
    290a:	f06f 0104 	mvnne.w	r1, #4
    290e:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2912:	886b      	ldrh	r3, [r5, #2]
    2914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2918:	041b      	lsls	r3, r3, #16
    291a:	0c1b      	lsrs	r3, r3, #16
    291c:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    291e:	696b      	ldr	r3, [r5, #20]
    2920:	2b00      	cmp	r3, #0
    2922:	f000 80c7 	beq.w	2ab4 <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    2926:	4628      	mov	r0, r5
    2928:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    292a:	2380      	movs	r3, #128	; 0x80
    292c:	7623      	strb	r3, [r4, #24]
    292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2932:	f013 0f04 	tst.w	r3, #4
    2936:	d124      	bne.n	2982 <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    2938:	886b      	ldrh	r3, [r5, #2]
    293a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    293e:	d03e      	beq.n	29be <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2940:	882b      	ldrh	r3, [r5, #0]
    2942:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2944:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2948:	69e3      	ldr	r3, [r4, #28]
    294a:	f013 0f04 	tst.w	r3, #4
    294e:	d1fb      	bne.n	2948 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2950:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    2956:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    295a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    295c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    295e:	69e3      	ldr	r3, [r4, #28]
    2960:	f013 0f04 	tst.w	r3, #4
    2964:	d1fb      	bne.n	295e <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    2966:	886b      	ldrh	r3, [r5, #2]
    2968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    296c:	041b      	lsls	r3, r3, #16
    296e:	0c1b      	lsrs	r3, r3, #16
    2970:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    2972:	69ab      	ldr	r3, [r5, #24]
    2974:	2b00      	cmp	r3, #0
    2976:	f000 8088 	beq.w	2a8a <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    297a:	4628      	mov	r0, r5
    297c:	4798      	blx	r3
    297e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    2982:	686b      	ldr	r3, [r5, #4]
    2984:	2b00      	cmp	r3, #0
    2986:	dd04      	ble.n	2992 <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    2988:	886b      	ldrh	r3, [r5, #2]
    298a:	b29b      	uxth	r3, r3
    298c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2990:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    2992:	886b      	ldrh	r3, [r5, #2]
    2994:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2998:	d108      	bne.n	29ac <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    299a:	886b      	ldrh	r3, [r5, #2]
    299c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    29a0:	041b      	lsls	r3, r3, #16
    29a2:	0c1b      	lsrs	r3, r3, #16
    29a4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    29a6:	f06f 0101 	mvn.w	r1, #1
    29aa:	e7b2      	b.n	2912 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    29ac:	6863      	ldr	r3, [r4, #4]
    29ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    29b2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    29b4:	69e3      	ldr	r3, [r4, #28]
    29b6:	f013 0f04 	tst.w	r3, #4
    29ba:	d1fb      	bne.n	29b4 <_sercom_i2c_m_irq_handler+0x120>
    29bc:	e7ed      	b.n	299a <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    29be:	686b      	ldr	r3, [r5, #4]
    29c0:	b99b      	cbnz	r3, 29ea <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    29c2:	886b      	ldrh	r3, [r5, #2]
    29c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    29c8:	d106      	bne.n	29d8 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    29ca:	886b      	ldrh	r3, [r5, #2]
    29cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    29d0:	041b      	lsls	r3, r3, #16
    29d2:	0c1b      	lsrs	r3, r3, #16
    29d4:	806b      	strh	r3, [r5, #2]
    29d6:	e7cc      	b.n	2972 <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    29d8:	6863      	ldr	r3, [r4, #4]
    29da:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    29de:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    29e0:	69e3      	ldr	r3, [r4, #28]
    29e2:	f013 0f04 	tst.w	r3, #4
    29e6:	d1fb      	bne.n	29e0 <_sercom_i2c_m_irq_handler+0x14c>
    29e8:	e7ef      	b.n	29ca <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    29ea:	68ab      	ldr	r3, [r5, #8]
    29ec:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    29ee:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    29f0:	69e3      	ldr	r3, [r4, #28]
    29f2:	f013 0f04 	tst.w	r3, #4
    29f6:	d1fb      	bne.n	29f0 <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    29f8:	68ab      	ldr	r3, [r5, #8]
    29fa:	3301      	adds	r3, #1
    29fc:	60ab      	str	r3, [r5, #8]
				msg->len--;
    29fe:	686b      	ldr	r3, [r5, #4]
    2a00:	3b01      	subs	r3, #1
    2a02:	606b      	str	r3, [r5, #4]
    2a04:	e7b5      	b.n	2972 <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    2a06:	f016 0f02 	tst.w	r6, #2
    2a0a:	d041      	beq.n	2a90 <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2a0c:	686a      	ldr	r2, [r5, #4]
    2a0e:	2a00      	cmp	r2, #0
    2a10:	d036      	beq.n	2a80 <_sercom_i2c_m_irq_handler+0x1ec>
    2a12:	f013 0f04 	tst.w	r3, #4
    2a16:	d133      	bne.n	2a80 <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2a18:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2a1c:	3a01      	subs	r2, #1
    2a1e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2a20:	2a00      	cmp	r2, #0
    2a22:	d137      	bne.n	2a94 <_sercom_i2c_m_irq_handler+0x200>
    2a24:	2900      	cmp	r1, #0
    2a26:	d039      	beq.n	2a9c <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    2a28:	886b      	ldrh	r3, [r5, #2]
    2a2a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2a2e:	d116      	bne.n	2a5e <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    2a30:	886b      	ldrh	r3, [r5, #2]
    2a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2a36:	041b      	lsls	r3, r3, #16
    2a38:	0c1b      	lsrs	r3, r3, #16
    2a3a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2a3c:	68aa      	ldr	r2, [r5, #8]
    2a3e:	1c53      	adds	r3, r2, #1
    2a40:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a42:	69e3      	ldr	r3, [r4, #28]
    2a44:	f013 0f04 	tst.w	r3, #4
    2a48:	d1fb      	bne.n	2a42 <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a4c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2a4e:	2302      	movs	r3, #2
    2a50:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2a52:	69eb      	ldr	r3, [r5, #28]
    2a54:	b1e3      	cbz	r3, 2a90 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    2a56:	4628      	mov	r0, r5
    2a58:	4798      	blx	r3
    2a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2a5e:	6863      	ldr	r3, [r4, #4]
    2a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2a64:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a66:	69e3      	ldr	r3, [r4, #28]
    2a68:	f013 0f04 	tst.w	r3, #4
    2a6c:	d1fb      	bne.n	2a66 <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2a6e:	6863      	ldr	r3, [r4, #4]
    2a70:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2a74:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2a76:	69e3      	ldr	r3, [r4, #28]
    2a78:	f013 0f04 	tst.w	r3, #4
    2a7c:	d1fb      	bne.n	2a76 <_sercom_i2c_m_irq_handler+0x1e2>
    2a7e:	e7d7      	b.n	2a30 <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2a80:	2302      	movs	r3, #2
    2a82:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2a84:	f06f 0101 	mvn.w	r1, #1
    2a88:	e743      	b.n	2912 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2a8a:	f016 0f02 	tst.w	r6, #2
    2a8e:	d1e0      	bne.n	2a52 <_sercom_i2c_m_irq_handler+0x1be>
    2a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2a94:	2a01      	cmp	r2, #1
    2a96:	d1d1      	bne.n	2a3c <_sercom_i2c_m_irq_handler+0x1a8>
    2a98:	2900      	cmp	r1, #0
    2a9a:	d0cf      	beq.n	2a3c <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2a9c:	6863      	ldr	r3, [r4, #4]
    2a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2aa2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2aa4:	69e3      	ldr	r3, [r4, #28]
    2aa6:	f013 0f04 	tst.w	r3, #4
    2aaa:	d1fb      	bne.n	2aa4 <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    2aac:	686b      	ldr	r3, [r5, #4]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d0ba      	beq.n	2a28 <_sercom_i2c_m_irq_handler+0x194>
    2ab2:	e7c3      	b.n	2a3c <_sercom_i2c_m_irq_handler+0x1a8>
    2ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2ab8:	886b      	ldrh	r3, [r5, #2]
    2aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2abe:	041b      	lsls	r3, r3, #16
    2ac0:	0c1b      	lsrs	r3, r3, #16
    2ac2:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2ac4:	696b      	ldr	r3, [r5, #20]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d0e2      	beq.n	2a90 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    2aca:	f06f 0104 	mvn.w	r1, #4
    2ace:	4628      	mov	r0, r5
    2ad0:	4798      	blx	r3
    2ad2:	e72a      	b.n	292a <_sercom_i2c_m_irq_handler+0x96>
    2ad4:	00001c91 	.word	0x00001c91
    2ad8:	00005f08 	.word	0x00005f08

00002adc <_i2c_m_async_init>:
{
    2adc:	b570      	push	{r4, r5, r6, lr}
    2ade:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2ae0:	4606      	mov	r6, r0
    2ae2:	f240 429e 	movw	r2, #1182	; 0x49e
    2ae6:	4918      	ldr	r1, [pc, #96]	; (2b48 <_i2c_m_async_init+0x6c>)
    2ae8:	3000      	adds	r0, #0
    2aea:	bf18      	it	ne
    2aec:	2001      	movne	r0, #1
    2aee:	4b17      	ldr	r3, [pc, #92]	; (2b4c <_i2c_m_async_init+0x70>)
    2af0:	4798      	blx	r3
	i2c_dev->hw = hw;
    2af2:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2af4:	4629      	mov	r1, r5
    2af6:	4630      	mov	r0, r6
    2af8:	4b15      	ldr	r3, [pc, #84]	; (2b50 <_i2c_m_async_init+0x74>)
    2afa:	4798      	blx	r3
	if (init_status) {
    2afc:	4604      	mov	r4, r0
    2afe:	b108      	cbz	r0, 2b04 <_i2c_m_async_init+0x28>
}
    2b00:	4620      	mov	r0, r4
    2b02:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    2b04:	4631      	mov	r1, r6
    2b06:	4628      	mov	r0, r5
    2b08:	4b12      	ldr	r3, [pc, #72]	; (2b54 <_i2c_m_async_init+0x78>)
    2b0a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2b0c:	4628      	mov	r0, r5
    2b0e:	4b12      	ldr	r3, [pc, #72]	; (2b58 <_i2c_m_async_init+0x7c>)
    2b10:	4798      	blx	r3
    2b12:	1d01      	adds	r1, r0, #4
    2b14:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b16:	2501      	movs	r5, #1
    2b18:	f000 021f 	and.w	r2, r0, #31
    2b1c:	fa05 f202 	lsl.w	r2, r5, r2
    2b20:	0943      	lsrs	r3, r0, #5
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2b28:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2b30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b34:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b3c:	601a      	str	r2, [r3, #0]
		irq++;
    2b3e:	3001      	adds	r0, #1
    2b40:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2b42:	4281      	cmp	r1, r0
    2b44:	d1e8      	bne.n	2b18 <_i2c_m_async_init+0x3c>
    2b46:	e7db      	b.n	2b00 <_i2c_m_async_init+0x24>
    2b48:	00005f08 	.word	0x00005f08
    2b4c:	00001c91 	.word	0x00001c91
    2b50:	000027b9 	.word	0x000027b9
    2b54:	000026f1 	.word	0x000026f1
    2b58:	00002721 	.word	0x00002721

00002b5c <_i2c_m_async_transfer>:
{
    2b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b60:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    2b62:	4605      	mov	r5, r0
    2b64:	f110 0800 	adds.w	r8, r0, #0
    2b68:	bf18      	it	ne
    2b6a:	f04f 0801 	movne.w	r8, #1
    2b6e:	4f45      	ldr	r7, [pc, #276]	; (2c84 <_i2c_m_async_transfer+0x128>)
    2b70:	f240 42f4 	movw	r2, #1268	; 0x4f4
    2b74:	4639      	mov	r1, r7
    2b76:	4640      	mov	r0, r8
    2b78:	4e43      	ldr	r6, [pc, #268]	; (2c88 <_i2c_m_async_transfer+0x12c>)
    2b7a:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2b7c:	6928      	ldr	r0, [r5, #16]
    2b7e:	f240 42f5 	movw	r2, #1269	; 0x4f5
    2b82:	4639      	mov	r1, r7
    2b84:	3000      	adds	r0, #0
    2b86:	bf18      	it	ne
    2b88:	2001      	movne	r0, #1
    2b8a:	47b0      	blx	r6
	ASSERT(msg);
    2b8c:	f240 42f6 	movw	r2, #1270	; 0x4f6
    2b90:	4639      	mov	r1, r7
    2b92:	1c20      	adds	r0, r4, #0
    2b94:	bf18      	it	ne
    2b96:	2001      	movne	r0, #1
    2b98:	47b0      	blx	r6
	if (msg->len == 0) {
    2b9a:	6860      	ldr	r0, [r4, #4]
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d06f      	beq.n	2c80 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2ba0:	886b      	ldrh	r3, [r5, #2]
    2ba2:	f413 7f80 	tst.w	r3, #256	; 0x100
    2ba6:	d169      	bne.n	2c7c <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    2ba8:	8863      	ldrh	r3, [r4, #2]
    2baa:	b29b      	uxth	r3, r3
    2bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2bb0:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    2bb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2bb6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    2bba:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2bbc:	6853      	ldr	r3, [r2, #4]
    2bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2bc2:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2bc4:	69d3      	ldr	r3, [r2, #28]
    2bc6:	f013 0f04 	tst.w	r3, #4
    2bca:	d1fb      	bne.n	2bc4 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    2bcc:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2bce:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    2bd0:	f240 42cc 	movw	r2, #1228	; 0x4cc
    2bd4:	492b      	ldr	r1, [pc, #172]	; (2c84 <_i2c_m_async_transfer+0x128>)
    2bd6:	4640      	mov	r0, r8
    2bd8:	4b2b      	ldr	r3, [pc, #172]	; (2c88 <_i2c_m_async_transfer+0x12c>)
    2bda:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2bdc:	686b      	ldr	r3, [r5, #4]
    2bde:	2b01      	cmp	r3, #1
    2be0:	d02a      	beq.n	2c38 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2be2:	6863      	ldr	r3, [r4, #4]
    2be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2be8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2bea:	69e3      	ldr	r3, [r4, #28]
    2bec:	f013 0f04 	tst.w	r3, #4
    2bf0:	d1fb      	bne.n	2bea <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    2bf2:	882b      	ldrh	r3, [r5, #0]
    2bf4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2bf8:	d02a      	beq.n	2c50 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    2bfa:	886a      	ldrh	r2, [r5, #2]
    2bfc:	f012 0f01 	tst.w	r2, #1
    2c00:	d004      	beq.n	2c0c <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    2c02:	886a      	ldrh	r2, [r5, #2]
    2c04:	b292      	uxth	r2, r2
    2c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2c0a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2c0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2c10:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2c14:	69e3      	ldr	r3, [r4, #28]
    2c16:	f013 0f04 	tst.w	r3, #4
    2c1a:	d1fb      	bne.n	2c14 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2c26:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2c28:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2c2a:	69e3      	ldr	r3, [r4, #28]
    2c2c:	f013 0f04 	tst.w	r3, #4
    2c30:	d1fb      	bne.n	2c2a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    2c32:	2000      	movs	r0, #0
    2c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2c38:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2c3c:	d0d1      	beq.n	2be2 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2c3e:	6863      	ldr	r3, [r4, #4]
    2c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2c44:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2c46:	69e3      	ldr	r3, [r4, #28]
    2c48:	f013 0f04 	tst.w	r3, #4
    2c4c:	d1fb      	bne.n	2c46 <_i2c_m_async_transfer+0xea>
    2c4e:	e7d0      	b.n	2bf2 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2c50:	8869      	ldrh	r1, [r5, #2]
    2c52:	005a      	lsls	r2, r3, #1
    2c54:	b2d2      	uxtb	r2, r2
    2c56:	f001 0301 	and.w	r3, r1, #1
    2c5a:	431a      	orrs	r2, r3
    2c5c:	69e3      	ldr	r3, [r4, #28]
    2c5e:	f013 0f04 	tst.w	r3, #4
    2c62:	d1fb      	bne.n	2c5c <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2c6a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2c6c:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2c6e:	69e3      	ldr	r3, [r4, #28]
    2c70:	f013 0f04 	tst.w	r3, #4
    2c74:	d1fb      	bne.n	2c6e <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    2c76:	2000      	movs	r0, #0
    2c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    2c7c:	f06f 0003 	mvn.w	r0, #3
}
    2c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c84:	00005f08 	.word	0x00005f08
    2c88:	00001c91 	.word	0x00001c91

00002c8c <_i2c_m_async_register_callback>:
	switch (type) {
    2c8c:	2901      	cmp	r1, #1
    2c8e:	d006      	beq.n	2c9e <_i2c_m_async_register_callback+0x12>
    2c90:	b119      	cbz	r1, 2c9a <_i2c_m_async_register_callback+0xe>
    2c92:	2902      	cmp	r1, #2
    2c94:	d005      	beq.n	2ca2 <_i2c_m_async_register_callback+0x16>
}
    2c96:	2000      	movs	r0, #0
    2c98:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    2c9a:	6142      	str	r2, [r0, #20]
		break;
    2c9c:	e7fb      	b.n	2c96 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    2c9e:	6182      	str	r2, [r0, #24]
		break;
    2ca0:	e7f9      	b.n	2c96 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    2ca2:	61c2      	str	r2, [r0, #28]
		break;
    2ca4:	e7f7      	b.n	2c96 <_i2c_m_async_register_callback+0xa>
	...

00002ca8 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    2ca8:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    2caa:	4b02      	ldr	r3, [pc, #8]	; (2cb4 <SERCOM4_0_Handler+0xc>)
    2cac:	6818      	ldr	r0, [r3, #0]
    2cae:	4b02      	ldr	r3, [pc, #8]	; (2cb8 <SERCOM4_0_Handler+0x10>)
    2cb0:	4798      	blx	r3
    2cb2:	bd08      	pop	{r3, pc}
    2cb4:	200001d4 	.word	0x200001d4
    2cb8:	00002735 	.word	0x00002735

00002cbc <SERCOM4_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    2cbc:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    2cbe:	4b02      	ldr	r3, [pc, #8]	; (2cc8 <SERCOM4_1_Handler+0xc>)
    2cc0:	6818      	ldr	r0, [r3, #0]
    2cc2:	4b02      	ldr	r3, [pc, #8]	; (2ccc <SERCOM4_1_Handler+0x10>)
    2cc4:	4798      	blx	r3
    2cc6:	bd08      	pop	{r3, pc}
    2cc8:	200001d4 	.word	0x200001d4
    2ccc:	00002735 	.word	0x00002735

00002cd0 <SERCOM4_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    2cd0:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    2cd2:	4b02      	ldr	r3, [pc, #8]	; (2cdc <SERCOM4_2_Handler+0xc>)
    2cd4:	6818      	ldr	r0, [r3, #0]
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <SERCOM4_2_Handler+0x10>)
    2cd8:	4798      	blx	r3
    2cda:	bd08      	pop	{r3, pc}
    2cdc:	200001d4 	.word	0x200001d4
    2ce0:	00002735 	.word	0x00002735

00002ce4 <SERCOM4_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    2ce4:	b508      	push	{r3, lr}
	_spi_handler(_sercom4_dev);
    2ce6:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <SERCOM4_3_Handler+0xc>)
    2ce8:	6818      	ldr	r0, [r3, #0]
    2cea:	4b02      	ldr	r3, [pc, #8]	; (2cf4 <SERCOM4_3_Handler+0x10>)
    2cec:	4798      	blx	r3
    2cee:	bd08      	pop	{r3, pc}
    2cf0:	200001d4 	.word	0x200001d4
    2cf4:	00002735 	.word	0x00002735

00002cf8 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2cf8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2cfa:	4b02      	ldr	r3, [pc, #8]	; (2d04 <SERCOM5_0_Handler+0xc>)
    2cfc:	6858      	ldr	r0, [r3, #4]
    2cfe:	4b02      	ldr	r3, [pc, #8]	; (2d08 <SERCOM5_0_Handler+0x10>)
    2d00:	4798      	blx	r3
    2d02:	bd08      	pop	{r3, pc}
    2d04:	200001d4 	.word	0x200001d4
    2d08:	00002895 	.word	0x00002895

00002d0c <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2d0c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2d0e:	4b02      	ldr	r3, [pc, #8]	; (2d18 <SERCOM5_1_Handler+0xc>)
    2d10:	6858      	ldr	r0, [r3, #4]
    2d12:	4b02      	ldr	r3, [pc, #8]	; (2d1c <SERCOM5_1_Handler+0x10>)
    2d14:	4798      	blx	r3
    2d16:	bd08      	pop	{r3, pc}
    2d18:	200001d4 	.word	0x200001d4
    2d1c:	00002895 	.word	0x00002895

00002d20 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2d20:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2d22:	4b02      	ldr	r3, [pc, #8]	; (2d2c <SERCOM5_2_Handler+0xc>)
    2d24:	6858      	ldr	r0, [r3, #4]
    2d26:	4b02      	ldr	r3, [pc, #8]	; (2d30 <SERCOM5_2_Handler+0x10>)
    2d28:	4798      	blx	r3
    2d2a:	bd08      	pop	{r3, pc}
    2d2c:	200001d4 	.word	0x200001d4
    2d30:	00002895 	.word	0x00002895

00002d34 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2d34:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2d36:	4b02      	ldr	r3, [pc, #8]	; (2d40 <SERCOM5_3_Handler+0xc>)
    2d38:	6858      	ldr	r0, [r3, #4]
    2d3a:	4b02      	ldr	r3, [pc, #8]	; (2d44 <SERCOM5_3_Handler+0x10>)
    2d3c:	4798      	blx	r3
    2d3e:	bd08      	pop	{r3, pc}
    2d40:	200001d4 	.word	0x200001d4
    2d44:	00002895 	.word	0x00002895

00002d48 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    2d48:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    2d4a:	4b02      	ldr	r3, [pc, #8]	; (2d54 <SERCOM7_0_Handler+0xc>)
    2d4c:	6898      	ldr	r0, [r3, #8]
    2d4e:	4b02      	ldr	r3, [pc, #8]	; (2d58 <SERCOM7_0_Handler+0x10>)
    2d50:	4798      	blx	r3
    2d52:	bd08      	pop	{r3, pc}
    2d54:	200001d4 	.word	0x200001d4
    2d58:	00002895 	.word	0x00002895

00002d5c <SERCOM7_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    2d5c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <SERCOM7_1_Handler+0xc>)
    2d60:	6898      	ldr	r0, [r3, #8]
    2d62:	4b02      	ldr	r3, [pc, #8]	; (2d6c <SERCOM7_1_Handler+0x10>)
    2d64:	4798      	blx	r3
    2d66:	bd08      	pop	{r3, pc}
    2d68:	200001d4 	.word	0x200001d4
    2d6c:	00002895 	.word	0x00002895

00002d70 <SERCOM7_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    2d70:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    2d72:	4b02      	ldr	r3, [pc, #8]	; (2d7c <SERCOM7_2_Handler+0xc>)
    2d74:	6898      	ldr	r0, [r3, #8]
    2d76:	4b02      	ldr	r3, [pc, #8]	; (2d80 <SERCOM7_2_Handler+0x10>)
    2d78:	4798      	blx	r3
    2d7a:	bd08      	pop	{r3, pc}
    2d7c:	200001d4 	.word	0x200001d4
    2d80:	00002895 	.word	0x00002895

00002d84 <SERCOM7_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    2d84:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    2d86:	4b02      	ldr	r3, [pc, #8]	; (2d90 <SERCOM7_3_Handler+0xc>)
    2d88:	6898      	ldr	r0, [r3, #8]
    2d8a:	4b02      	ldr	r3, [pc, #8]	; (2d94 <SERCOM7_3_Handler+0x10>)
    2d8c:	4798      	blx	r3
    2d8e:	bd08      	pop	{r3, pc}
    2d90:	200001d4 	.word	0x200001d4
    2d94:	00002895 	.word	0x00002895

00002d98 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2d98:	b570      	push	{r4, r5, r6, lr}
    2d9a:	4606      	mov	r6, r0
    2d9c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2d9e:	4608      	mov	r0, r1
    2da0:	4b5d      	ldr	r3, [pc, #372]	; (2f18 <_spi_m_sync_init+0x180>)
    2da2:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2da4:	2804      	cmp	r0, #4
    2da6:	d00c      	beq.n	2dc2 <_spi_m_sync_init+0x2a>
    2da8:	2806      	cmp	r0, #6
    2daa:	bf08      	it	eq
    2dac:	2301      	moveq	r3, #1
    2dae:	d009      	beq.n	2dc4 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2db0:	2e00      	cmp	r6, #0
    2db2:	f000 809f 	beq.w	2ef4 <_spi_m_sync_init+0x15c>
    2db6:	2c00      	cmp	r4, #0
    2db8:	f040 80a5 	bne.w	2f06 <_spi_m_sync_init+0x16e>
	return NULL;
    2dbc:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    2dbe:	2000      	movs	r0, #0
    2dc0:	e009      	b.n	2dd6 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    2dc2:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    2dc4:	4d55      	ldr	r5, [pc, #340]	; (2f1c <_spi_m_sync_init+0x184>)
    2dc6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    2dca:	441d      	add	r5, r3
	ASSERT(dev && hw);
    2dcc:	2e00      	cmp	r6, #0
    2dce:	d0f6      	beq.n	2dbe <_spi_m_sync_init+0x26>
    2dd0:	2001      	movs	r0, #1
    2dd2:	2c00      	cmp	r4, #0
    2dd4:	d0f3      	beq.n	2dbe <_spi_m_sync_init+0x26>
    2dd6:	f640 12e9 	movw	r2, #2537	; 0x9e9
    2dda:	4951      	ldr	r1, [pc, #324]	; (2f20 <_spi_m_sync_init+0x188>)
    2ddc:	4b51      	ldr	r3, [pc, #324]	; (2f24 <_spi_m_sync_init+0x18c>)
    2dde:	4798      	blx	r3

	if (regs == NULL) {
    2de0:	2d00      	cmp	r5, #0
    2de2:	f000 8084 	beq.w	2eee <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2de6:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2de8:	f013 0f01 	tst.w	r3, #1
    2dec:	d11d      	bne.n	2e2a <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2dee:	682b      	ldr	r3, [r5, #0]
    2df0:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2df4:	69e3      	ldr	r3, [r4, #28]
    2df6:	f013 0f03 	tst.w	r3, #3
    2dfa:	d1fb      	bne.n	2df4 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2dfc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2dfe:	f013 0f02 	tst.w	r3, #2
    2e02:	d00b      	beq.n	2e1c <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2e04:	6823      	ldr	r3, [r4, #0]
    2e06:	f023 0302 	bic.w	r3, r3, #2
    2e0a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e0c:	69e3      	ldr	r3, [r4, #28]
    2e0e:	f013 0f03 	tst.w	r3, #3
    2e12:	d1fb      	bne.n	2e0c <_spi_m_sync_init+0x74>
    2e14:	69e3      	ldr	r3, [r4, #28]
    2e16:	f013 0f02 	tst.w	r3, #2
    2e1a:	d1fb      	bne.n	2e14 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2e1c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e20:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e22:	69e3      	ldr	r3, [r4, #28]
    2e24:	f013 0f03 	tst.w	r3, #3
    2e28:	d1fb      	bne.n	2e22 <_spi_m_sync_init+0x8a>
    2e2a:	69e3      	ldr	r3, [r4, #28]
    2e2c:	f013 0f01 	tst.w	r3, #1
    2e30:	d1fb      	bne.n	2e2a <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2e32:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2e34:	682b      	ldr	r3, [r5, #0]
    2e36:	f003 031c 	and.w	r3, r3, #28
    2e3a:	2b08      	cmp	r3, #8
    2e3c:	d02e      	beq.n	2e9c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    2e3e:	f640 1242 	movw	r2, #2370	; 0x942
    2e42:	4937      	ldr	r1, [pc, #220]	; (2f20 <_spi_m_sync_init+0x188>)
    2e44:	1c20      	adds	r0, r4, #0
    2e46:	bf18      	it	ne
    2e48:	2001      	movne	r0, #1
    2e4a:	4b36      	ldr	r3, [pc, #216]	; (2f24 <_spi_m_sync_init+0x18c>)
    2e4c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2e4e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2e50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2e54:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e58:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e5a:	69e3      	ldr	r3, [r4, #28]
    2e5c:	f013 0f03 	tst.w	r3, #3
    2e60:	d1fb      	bne.n	2e5a <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    2e62:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    2e64:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    2e68:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2e70:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e72:	69e3      	ldr	r3, [r4, #28]
    2e74:	f013 0f17 	tst.w	r3, #23
    2e78:	d1fb      	bne.n	2e72 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2e7a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2e7c:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2e7e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2e80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2e84:	686b      	ldr	r3, [r5, #4]
    2e86:	f003 0307 	and.w	r3, r3, #7
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	bf0c      	ite	eq
    2e8e:	2301      	moveq	r3, #1
    2e90:	2302      	movne	r3, #2
    2e92:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2e94:	89eb      	ldrh	r3, [r5, #14]
    2e96:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2e98:	2000      	movs	r0, #0
    2e9a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    2e9c:	f640 1256 	movw	r2, #2390	; 0x956
    2ea0:	491f      	ldr	r1, [pc, #124]	; (2f20 <_spi_m_sync_init+0x188>)
    2ea2:	1c20      	adds	r0, r4, #0
    2ea4:	bf18      	it	ne
    2ea6:	2001      	movne	r0, #1
    2ea8:	4b1e      	ldr	r3, [pc, #120]	; (2f24 <_spi_m_sync_init+0x18c>)
    2eaa:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2eac:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2eae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2eb2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2eb6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2eb8:	69e3      	ldr	r3, [r4, #28]
    2eba:	f013 0f03 	tst.w	r3, #3
    2ebe:	d1fb      	bne.n	2eb8 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2ec0:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2ec2:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    2ec6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    2eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2ece:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2ed2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ed4:	69e3      	ldr	r3, [r4, #28]
    2ed6:	f013 0f17 	tst.w	r3, #23
    2eda:	d1fb      	bne.n	2ed4 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2edc:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2ede:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2ee0:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2ee2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2ee6:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d1fc      	bne.n	2ee6 <_spi_m_sync_init+0x14e>
    2eec:	e7ca      	b.n	2e84 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    2eee:	f06f 000c 	mvn.w	r0, #12
    2ef2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2ef4:	f640 12e9 	movw	r2, #2537	; 0x9e9
    2ef8:	4909      	ldr	r1, [pc, #36]	; (2f20 <_spi_m_sync_init+0x188>)
    2efa:	2000      	movs	r0, #0
    2efc:	4b09      	ldr	r3, [pc, #36]	; (2f24 <_spi_m_sync_init+0x18c>)
    2efe:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2f00:	f06f 000c 	mvn.w	r0, #12
    2f04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2f06:	f640 12e9 	movw	r2, #2537	; 0x9e9
    2f0a:	4905      	ldr	r1, [pc, #20]	; (2f20 <_spi_m_sync_init+0x188>)
    2f0c:	2001      	movs	r0, #1
    2f0e:	4b05      	ldr	r3, [pc, #20]	; (2f24 <_spi_m_sync_init+0x18c>)
    2f10:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2f12:	f06f 000c 	mvn.w	r0, #12
    2f16:	bd70      	pop	{r4, r5, r6, pc}
    2f18:	000026ad 	.word	0x000026ad
    2f1c:	00005ee4 	.word	0x00005ee4
    2f20:	00005f08 	.word	0x00005f08
    2f24:	00001c91 	.word	0x00001c91

00002f28 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    2f28:	b538      	push	{r3, r4, r5, lr}
    2f2a:	4604      	mov	r4, r0
    2f2c:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    2f2e:	4b15      	ldr	r3, [pc, #84]	; (2f84 <_spi_m_async_init+0x5c>)
    2f30:	4798      	blx	r3

	if (rc < 0) {
    2f32:	2800      	cmp	r0, #0
    2f34:	db24      	blt.n	2f80 <_spi_m_async_init+0x58>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
    2f36:	4621      	mov	r1, r4
    2f38:	4628      	mov	r0, r5
    2f3a:	4b13      	ldr	r3, [pc, #76]	; (2f88 <_spi_m_async_init+0x60>)
    2f3c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    2f3e:	2300      	movs	r3, #0
    2f40:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    2f42:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    2f44:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    2f46:	4628      	mov	r0, r5
    2f48:	4b10      	ldr	r3, [pc, #64]	; (2f8c <_spi_m_async_init+0x64>)
    2f4a:	4798      	blx	r3
    2f4c:	1d01      	adds	r1, r0, #4
    2f4e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f50:	2401      	movs	r4, #1
    2f52:	f000 021f 	and.w	r2, r0, #31
    2f56:	fa04 f202 	lsl.w	r2, r4, r2
    2f5a:	0943      	lsrs	r3, r0, #5
    2f5c:	009b      	lsls	r3, r3, #2
    2f5e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2f62:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2f6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f6e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f72:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    2f76:	3001      	adds	r0, #1
    2f78:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2f7a:	4281      	cmp	r1, r0
    2f7c:	d1e9      	bne.n	2f52 <_spi_m_async_init+0x2a>
	}

	return ERR_NONE;
    2f7e:	2000      	movs	r0, #0
}
    2f80:	bd38      	pop	{r3, r4, r5, pc}
    2f82:	bf00      	nop
    2f84:	00002d99 	.word	0x00002d99
    2f88:	000026f1 	.word	0x000026f1
    2f8c:	00002721 	.word	0x00002721

00002f90 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f94:	4681      	mov	r9, r0
    2f96:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2f98:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2f9a:	f8d1 8000 	ldr.w	r8, [r1]
    2f9e:	684d      	ldr	r5, [r1, #4]
    2fa0:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    2fa2:	b1a8      	cbz	r0, 2fd0 <_spi_m_sync_trans+0x40>
    2fa4:	1c20      	adds	r0, r4, #0
    2fa6:	bf18      	it	ne
    2fa8:	2001      	movne	r0, #1
    2faa:	f640 324d 	movw	r2, #2893	; 0xb4d
    2fae:	492e      	ldr	r1, [pc, #184]	; (3068 <_spi_m_sync_trans+0xd8>)
    2fb0:	4b2e      	ldr	r3, [pc, #184]	; (306c <_spi_m_sync_trans+0xdc>)
    2fb2:	4798      	blx	r3
    2fb4:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2fb6:	f013 0f07 	tst.w	r3, #7
    2fba:	d134      	bne.n	3026 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2fbc:	69e0      	ldr	r0, [r4, #28]
    2fbe:	f010 0003 	ands.w	r0, r0, #3
    2fc2:	d1fb      	bne.n	2fbc <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2fc4:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2fc6:	f013 0f02 	tst.w	r3, #2
    2fca:	d030      	beq.n	302e <_spi_m_sync_trans+0x9e>
    2fcc:	4602      	mov	r2, r0
    2fce:	e008      	b.n	2fe2 <_spi_m_sync_trans+0x52>
    2fd0:	2000      	movs	r0, #0
    2fd2:	e7ea      	b.n	2faa <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2fd4:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2fd6:	f013 0f80 	tst.w	r3, #128	; 0x80
    2fda:	d112      	bne.n	3002 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2fdc:	68b3      	ldr	r3, [r6, #8]
    2fde:	4283      	cmp	r3, r0
    2fe0:	d91e      	bls.n	3020 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2fe2:	7e23      	ldrb	r3, [r4, #24]
    2fe4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2fe6:	f013 0f04 	tst.w	r3, #4
    2fea:	d024      	beq.n	3036 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2fec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2fee:	2d00      	cmp	r5, #0
    2ff0:	d0f0      	beq.n	2fd4 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    2ff2:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    2ff4:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    2ff6:	bf91      	iteee	ls
    2ff8:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2ffa:	0a09      	lsrhi	r1, r1, #8
    2ffc:	7069      	strbhi	r1, [r5, #1]
    2ffe:	3502      	addhi	r5, #2
    3000:	e7e8      	b.n	2fd4 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3002:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3006:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3008:	2380      	movs	r3, #128	; 0x80
    300a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    300c:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3010:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3012:	f013 0f03 	tst.w	r3, #3
    3016:	d0fb      	beq.n	3010 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3018:	2303      	movs	r3, #3
    301a:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    301c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3020:	4293      	cmp	r3, r2
    3022:	d8de      	bhi.n	2fe2 <_spi_m_sync_trans+0x52>
    3024:	e7f4      	b.n	3010 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    3026:	f06f 0003 	mvn.w	r0, #3
    302a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    302e:	f06f 0013 	mvn.w	r0, #19
    3032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3036:	4290      	cmp	r0, r2
    3038:	d8cd      	bhi.n	2fd6 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    303a:	f013 0f01 	tst.w	r3, #1
    303e:	d0ca      	beq.n	2fd6 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3040:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    3044:	f1b8 0f00 	cmp.w	r8, #0
    3048:	d00b      	beq.n	3062 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    304a:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    304e:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    3050:	bf91      	iteee	ls
    3052:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    3056:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    305a:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    305e:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    3062:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3064:	62a1      	str	r1, [r4, #40]	; 0x28
    3066:	e7b6      	b.n	2fd6 <_spi_m_sync_trans+0x46>
    3068:	00005f08 	.word	0x00005f08
    306c:	00001c91 	.word	0x00001c91

00003070 <_spi_m_async_enable_tx>:
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    3070:	b538      	push	{r3, r4, r5, lr}
    3072:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    3074:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    3076:	b160      	cbz	r0, 3092 <_spi_m_async_enable_tx+0x22>
    3078:	1c20      	adds	r0, r4, #0
    307a:	bf18      	it	ne
    307c:	2001      	movne	r0, #1
    307e:	f640 3279 	movw	r2, #2937	; 0xb79
    3082:	4906      	ldr	r1, [pc, #24]	; (309c <_spi_m_async_enable_tx+0x2c>)
    3084:	4b06      	ldr	r3, [pc, #24]	; (30a0 <_spi_m_async_enable_tx+0x30>)
    3086:	4798      	blx	r3

	if (state) {
    3088:	b92d      	cbnz	r5, 3096 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    308a:	2301      	movs	r3, #1
    308c:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    308e:	2000      	movs	r0, #0
    3090:	bd38      	pop	{r3, r4, r5, pc}
    3092:	2000      	movs	r0, #0
    3094:	e7f3      	b.n	307e <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    3096:	2301      	movs	r3, #1
    3098:	75a3      	strb	r3, [r4, #22]
    309a:	e7f8      	b.n	308e <_spi_m_async_enable_tx+0x1e>
    309c:	00005f08 	.word	0x00005f08
    30a0:	00001c91 	.word	0x00001c91

000030a4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    30a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30a6:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    30a8:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    30aa:	4e0c      	ldr	r6, [pc, #48]	; (30dc <_spi_m_async_enable_rx+0x38>)
    30ac:	f640 328d 	movw	r2, #2957	; 0xb8d
    30b0:	4631      	mov	r1, r6
    30b2:	3000      	adds	r0, #0
    30b4:	bf18      	it	ne
    30b6:	2001      	movne	r0, #1
    30b8:	4d09      	ldr	r5, [pc, #36]	; (30e0 <_spi_m_async_enable_rx+0x3c>)
    30ba:	47a8      	blx	r5
	ASSERT(hw);
    30bc:	f640 328e 	movw	r2, #2958	; 0xb8e
    30c0:	4631      	mov	r1, r6
    30c2:	1c20      	adds	r0, r4, #0
    30c4:	bf18      	it	ne
    30c6:	2001      	movne	r0, #1
    30c8:	47a8      	blx	r5

	if (state) {
    30ca:	b91f      	cbnz	r7, 30d4 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    30cc:	2304      	movs	r3, #4
    30ce:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    30d0:	2000      	movs	r0, #0
    30d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    30d4:	2304      	movs	r3, #4
    30d6:	75a3      	strb	r3, [r4, #22]
    30d8:	e7fa      	b.n	30d0 <_spi_m_async_enable_rx+0x2c>
    30da:	bf00      	nop
    30dc:	00005f08 	.word	0x00005f08
    30e0:	00001c91 	.word	0x00001c91

000030e4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    30e4:	b538      	push	{r3, r4, r5, lr}
    30e6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    30e8:	4604      	mov	r4, r0
    30ea:	b170      	cbz	r0, 310a <_spi_m_async_enable_tx_complete+0x26>
    30ec:	6800      	ldr	r0, [r0, #0]
    30ee:	3000      	adds	r0, #0
    30f0:	bf18      	it	ne
    30f2:	2001      	movne	r0, #1
    30f4:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    30f8:	4907      	ldr	r1, [pc, #28]	; (3118 <_spi_m_async_enable_tx_complete+0x34>)
    30fa:	4b08      	ldr	r3, [pc, #32]	; (311c <_spi_m_async_enable_tx_complete+0x38>)
    30fc:	4798      	blx	r3

	if (state) {
    30fe:	b935      	cbnz	r5, 310e <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    3100:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    3102:	2202      	movs	r2, #2
    3104:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    3106:	2000      	movs	r0, #0
    3108:	bd38      	pop	{r3, r4, r5, pc}
    310a:	2000      	movs	r0, #0
    310c:	e7f2      	b.n	30f4 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    310e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    3110:	2202      	movs	r2, #2
    3112:	759a      	strb	r2, [r3, #22]
    3114:	e7f7      	b.n	3106 <_spi_m_async_enable_tx_complete+0x22>
    3116:	bf00      	nop
    3118:	00005f08 	.word	0x00005f08
    311c:	00001c91 	.word	0x00001c91

00003120 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    3120:	b538      	push	{r3, r4, r5, lr}
    3122:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3124:	4604      	mov	r4, r0
    3126:	b160      	cbz	r0, 3142 <_spi_m_async_write_one+0x22>
    3128:	6800      	ldr	r0, [r0, #0]
    312a:	3000      	adds	r0, #0
    312c:	bf18      	it	ne
    312e:	2001      	movne	r0, #1
    3130:	f640 32b2 	movw	r2, #2994	; 0xbb2
    3134:	4904      	ldr	r1, [pc, #16]	; (3148 <_spi_m_async_write_one+0x28>)
    3136:	4b05      	ldr	r3, [pc, #20]	; (314c <_spi_m_async_write_one+0x2c>)
    3138:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    313a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    313c:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    313e:	2000      	movs	r0, #0
    3140:	bd38      	pop	{r3, r4, r5, pc}
    3142:	2000      	movs	r0, #0
    3144:	e7f4      	b.n	3130 <_spi_m_async_write_one+0x10>
    3146:	bf00      	nop
    3148:	00005f08 	.word	0x00005f08
    314c:	00001c91 	.word	0x00001c91

00003150 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    3150:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3152:	4604      	mov	r4, r0
    3154:	b160      	cbz	r0, 3170 <_spi_m_async_read_one+0x20>
    3156:	6800      	ldr	r0, [r0, #0]
    3158:	3000      	adds	r0, #0
    315a:	bf18      	it	ne
    315c:	2001      	movne	r0, #1
    315e:	f640 32cd 	movw	r2, #3021	; 0xbcd
    3162:	4904      	ldr	r1, [pc, #16]	; (3174 <_spi_m_async_read_one+0x24>)
    3164:	4b04      	ldr	r3, [pc, #16]	; (3178 <_spi_m_async_read_one+0x28>)
    3166:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    3168:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    316a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    316c:	b280      	uxth	r0, r0
    316e:	bd10      	pop	{r4, pc}
    3170:	2000      	movs	r0, #0
    3172:	e7f4      	b.n	315e <_spi_m_async_read_one+0xe>
    3174:	00005f08 	.word	0x00005f08
    3178:	00001c91 	.word	0x00001c91

0000317c <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    317c:	b570      	push	{r4, r5, r6, lr}
    317e:	460d      	mov	r5, r1
    3180:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    3182:	4604      	mov	r4, r0
    3184:	b168      	cbz	r0, 31a2 <_spi_m_async_register_callback+0x26>
    3186:	2903      	cmp	r1, #3
    3188:	bf8c      	ite	hi
    318a:	2000      	movhi	r0, #0
    318c:	2001      	movls	r0, #1
    318e:	f640 32e6 	movw	r2, #3046	; 0xbe6
    3192:	4905      	ldr	r1, [pc, #20]	; (31a8 <_spi_m_async_register_callback+0x2c>)
    3194:	4b05      	ldr	r3, [pc, #20]	; (31ac <_spi_m_async_register_callback+0x30>)
    3196:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    3198:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    319c:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    319e:	2000      	movs	r0, #0
    31a0:	bd70      	pop	{r4, r5, r6, pc}
    31a2:	2000      	movs	r0, #0
    31a4:	e7f3      	b.n	318e <_spi_m_async_register_callback+0x12>
    31a6:	bf00      	nop
    31a8:	00005f08 	.word	0x00005f08
    31ac:	00001c91 	.word	0x00001c91

000031b0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    31b0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    31b2:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    31b4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    31b6:	f012 0f01 	tst.w	r2, #1
    31ba:	d100      	bne.n	31be <tc_interrupt_handler+0xe>
    31bc:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    31be:	2201      	movs	r2, #1
    31c0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    31c2:	6803      	ldr	r3, [r0, #0]
    31c4:	4798      	blx	r3
	}
}
    31c6:	e7f9      	b.n	31bc <tc_interrupt_handler+0xc>

000031c8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    31c8:	4b0e      	ldr	r3, [pc, #56]	; (3204 <_tc_init_irq_param+0x3c>)
    31ca:	4298      	cmp	r0, r3
    31cc:	d00e      	beq.n	31ec <_tc_init_irq_param+0x24>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC1) {
    31ce:	4b0e      	ldr	r3, [pc, #56]	; (3208 <_tc_init_irq_param+0x40>)
    31d0:	4298      	cmp	r0, r3
    31d2:	d00e      	beq.n	31f2 <_tc_init_irq_param+0x2a>
		_tc1_dev = (struct _timer_device *)dev;
	}
	if (hw == TC2) {
    31d4:	4b0d      	ldr	r3, [pc, #52]	; (320c <_tc_init_irq_param+0x44>)
    31d6:	4298      	cmp	r0, r3
    31d8:	d00e      	beq.n	31f8 <_tc_init_irq_param+0x30>
		_tc2_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
    31da:	4b0d      	ldr	r3, [pc, #52]	; (3210 <_tc_init_irq_param+0x48>)
    31dc:	4298      	cmp	r0, r3
    31de:	d00e      	beq.n	31fe <_tc_init_irq_param+0x36>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC7) {
    31e0:	4b0c      	ldr	r3, [pc, #48]	; (3214 <_tc_init_irq_param+0x4c>)
    31e2:	4298      	cmp	r0, r3
		_tc7_dev = (struct _pwm_device *)dev;
    31e4:	bf04      	itt	eq
    31e6:	4b0c      	ldreq	r3, [pc, #48]	; (3218 <_tc_init_irq_param+0x50>)
    31e8:	6119      	streq	r1, [r3, #16]
    31ea:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    31ec:	4b0a      	ldr	r3, [pc, #40]	; (3218 <_tc_init_irq_param+0x50>)
    31ee:	6019      	str	r1, [r3, #0]
    31f0:	e7f3      	b.n	31da <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _timer_device *)dev;
    31f2:	4b09      	ldr	r3, [pc, #36]	; (3218 <_tc_init_irq_param+0x50>)
    31f4:	6059      	str	r1, [r3, #4]
    31f6:	e7f3      	b.n	31e0 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _timer_device *)dev;
    31f8:	4b07      	ldr	r3, [pc, #28]	; (3218 <_tc_init_irq_param+0x50>)
    31fa:	6099      	str	r1, [r3, #8]
    31fc:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    31fe:	4b06      	ldr	r3, [pc, #24]	; (3218 <_tc_init_irq_param+0x50>)
    3200:	60d9      	str	r1, [r3, #12]
    3202:	4770      	bx	lr
    3204:	40003800 	.word	0x40003800
    3208:	40003c00 	.word	0x40003c00
    320c:	4101a000 	.word	0x4101a000
    3210:	4101c000 	.word	0x4101c000
    3214:	43001800 	.word	0x43001800
    3218:	200001e0 	.word	0x200001e0

0000321c <get_tc_index>:
{
    321c:	b570      	push	{r4, r5, r6, lr}
    321e:	b088      	sub	sp, #32
    3220:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3222:	466c      	mov	r4, sp
    3224:	4d19      	ldr	r5, [pc, #100]	; (328c <get_tc_index+0x70>)
    3226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    322a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    322e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3232:	9b00      	ldr	r3, [sp, #0]
    3234:	42b3      	cmp	r3, r6
    3236:	d022      	beq.n	327e <get_tc_index+0x62>
    3238:	4630      	mov	r0, r6
    323a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    323c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    323e:	f852 1b04 	ldr.w	r1, [r2], #4
    3242:	4281      	cmp	r1, r0
    3244:	d01c      	beq.n	3280 <get_tc_index+0x64>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3246:	3301      	adds	r3, #1
    3248:	2b08      	cmp	r3, #8
    324a:	d1f8      	bne.n	323e <get_tc_index+0x22>
			return i;
		}
	}
	return 0;
    324c:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    324e:	4a10      	ldr	r2, [pc, #64]	; (3290 <get_tc_index+0x74>)
    3250:	7812      	ldrb	r2, [r2, #0]
    3252:	429a      	cmp	r2, r3
    3254:	d016      	beq.n	3284 <get_tc_index+0x68>
    3256:	4a0e      	ldr	r2, [pc, #56]	; (3290 <get_tc_index+0x74>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3258:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    325a:	7d11      	ldrb	r1, [r2, #20]
    325c:	4299      	cmp	r1, r3
    325e:	d012      	beq.n	3286 <get_tc_index+0x6a>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3260:	3001      	adds	r0, #1
    3262:	b2c0      	uxtb	r0, r0
    3264:	3214      	adds	r2, #20
    3266:	2805      	cmp	r0, #5
    3268:	d1f7      	bne.n	325a <get_tc_index+0x3e>
	ASSERT(false);
    326a:	f240 2206 	movw	r2, #518	; 0x206
    326e:	4909      	ldr	r1, [pc, #36]	; (3294 <get_tc_index+0x78>)
    3270:	2000      	movs	r0, #0
    3272:	4b09      	ldr	r3, [pc, #36]	; (3298 <get_tc_index+0x7c>)
    3274:	4798      	blx	r3
	return -1;
    3276:	f04f 30ff 	mov.w	r0, #4294967295
}
    327a:	b008      	add	sp, #32
    327c:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    327e:	2300      	movs	r3, #0
			return i;
    3280:	b2db      	uxtb	r3, r3
    3282:	e7e4      	b.n	324e <get_tc_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3284:	2000      	movs	r0, #0
			return i;
    3286:	b240      	sxtb	r0, r0
    3288:	e7f7      	b.n	327a <get_tc_index+0x5e>
    328a:	bf00      	nop
    328c:	00005f24 	.word	0x00005f24
    3290:	20000014 	.word	0x20000014
    3294:	00005f44 	.word	0x00005f44
    3298:	00001c91 	.word	0x00001c91

0000329c <_timer_init>:
{
    329c:	b570      	push	{r4, r5, r6, lr}
    329e:	4606      	mov	r6, r0
    32a0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    32a2:	4608      	mov	r0, r1
    32a4:	4b66      	ldr	r3, [pc, #408]	; (3440 <_timer_init+0x1a4>)
    32a6:	4798      	blx	r3
    32a8:	4605      	mov	r5, r0
	device->hw = hw;
    32aa:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    32ac:	2295      	movs	r2, #149	; 0x95
    32ae:	4965      	ldr	r1, [pc, #404]	; (3444 <_timer_init+0x1a8>)
    32b0:	2001      	movs	r0, #1
    32b2:	4b65      	ldr	r3, [pc, #404]	; (3448 <_timer_init+0x1ac>)
    32b4:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    32b6:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    32b8:	f013 0f01 	tst.w	r3, #1
    32bc:	d119      	bne.n	32f2 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32be:	6923      	ldr	r3, [r4, #16]
    32c0:	f013 0f03 	tst.w	r3, #3
    32c4:	d1fb      	bne.n	32be <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    32c6:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    32c8:	f013 0f02 	tst.w	r3, #2
    32cc:	d00b      	beq.n	32e6 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    32ce:	6823      	ldr	r3, [r4, #0]
    32d0:	f023 0302 	bic.w	r3, r3, #2
    32d4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32d6:	6923      	ldr	r3, [r4, #16]
    32d8:	f013 0f03 	tst.w	r3, #3
    32dc:	d1fb      	bne.n	32d6 <_timer_init+0x3a>
    32de:	6923      	ldr	r3, [r4, #16]
    32e0:	f013 0f02 	tst.w	r3, #2
    32e4:	d1fb      	bne.n	32de <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    32e6:	2301      	movs	r3, #1
    32e8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32ea:	6923      	ldr	r3, [r4, #16]
    32ec:	f013 0f03 	tst.w	r3, #3
    32f0:	d1fb      	bne.n	32ea <_timer_init+0x4e>
    32f2:	6923      	ldr	r3, [r4, #16]
    32f4:	f013 0f01 	tst.w	r3, #1
    32f8:	d1fb      	bne.n	32f2 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    32fa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    32fe:	4a53      	ldr	r2, [pc, #332]	; (344c <_timer_init+0x1b0>)
    3300:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3304:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3306:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3308:	6923      	ldr	r3, [r4, #16]
    330a:	f013 0f03 	tst.w	r3, #3
    330e:	d1fb      	bne.n	3308 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3310:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3314:	4a4d      	ldr	r2, [pc, #308]	; (344c <_timer_init+0x1b0>)
    3316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    331a:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    331c:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    331e:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3320:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3322:	2201      	movs	r2, #1
    3324:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3326:	685b      	ldr	r3, [r3, #4]
    3328:	f003 030c 	and.w	r3, r3, #12
    332c:	2b08      	cmp	r3, #8
    332e:	d04c      	beq.n	33ca <_timer_init+0x12e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3330:	2b00      	cmp	r3, #0
    3332:	d161      	bne.n	33f8 <_timer_init+0x15c>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3334:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3338:	4a44      	ldr	r2, [pc, #272]	; (344c <_timer_init+0x1b0>)
    333a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    333e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3340:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3342:	6923      	ldr	r3, [r4, #16]
    3344:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3348:	d1fb      	bne.n	3342 <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    334a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    334e:	4a3f      	ldr	r2, [pc, #252]	; (344c <_timer_init+0x1b0>)
    3350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3354:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3356:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3358:	6923      	ldr	r3, [r4, #16]
    335a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    335e:	d1fb      	bne.n	3358 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3360:	2301      	movs	r3, #1
    3362:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    3364:	4631      	mov	r1, r6
    3366:	4620      	mov	r0, r4
    3368:	4b39      	ldr	r3, [pc, #228]	; (3450 <_timer_init+0x1b4>)
    336a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    336c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3370:	4a36      	ldr	r2, [pc, #216]	; (344c <_timer_init+0x1b0>)
    3372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3376:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    337a:	2b00      	cmp	r3, #0
    337c:	db23      	blt.n	33c6 <_timer_init+0x12a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    337e:	095a      	lsrs	r2, r3, #5
    3380:	f003 031f 	and.w	r3, r3, #31
    3384:	2101      	movs	r1, #1
    3386:	fa01 f303 	lsl.w	r3, r1, r3
    338a:	3220      	adds	r2, #32
    338c:	4931      	ldr	r1, [pc, #196]	; (3454 <_timer_init+0x1b8>)
    338e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3396:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    339a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    339e:	4b2b      	ldr	r3, [pc, #172]	; (344c <_timer_init+0x1b0>)
    33a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    33a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    33a8:	2b00      	cmp	r3, #0
    33aa:	db0c      	blt.n	33c6 <_timer_init+0x12a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33ac:	0959      	lsrs	r1, r3, #5
    33ae:	f003 031f 	and.w	r3, r3, #31
    33b2:	2201      	movs	r2, #1
    33b4:	fa02 f303 	lsl.w	r3, r2, r3
    33b8:	4a26      	ldr	r2, [pc, #152]	; (3454 <_timer_init+0x1b8>)
    33ba:	f101 0060 	add.w	r0, r1, #96	; 0x60
    33be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    33c6:	2000      	movs	r0, #0
    33c8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    33ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    33ce:	4a1f      	ldr	r2, [pc, #124]	; (344c <_timer_init+0x1b0>)
    33d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33d4:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    33d6:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    33d8:	6923      	ldr	r3, [r4, #16]
    33da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    33de:	d1fb      	bne.n	33d8 <_timer_init+0x13c>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    33e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    33e4:	4a19      	ldr	r2, [pc, #100]	; (344c <_timer_init+0x1b0>)
    33e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33ea:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    33ec:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    33ee:	6923      	ldr	r3, [r4, #16]
    33f0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    33f4:	d1fb      	bne.n	33ee <_timer_init+0x152>
    33f6:	e7b3      	b.n	3360 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    33f8:	2b04      	cmp	r3, #4
    33fa:	d1b1      	bne.n	3360 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    33fc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3400:	4a12      	ldr	r2, [pc, #72]	; (344c <_timer_init+0x1b0>)
    3402:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3406:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3408:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    340a:	6923      	ldr	r3, [r4, #16]
    340c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3410:	d1fb      	bne.n	340a <_timer_init+0x16e>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    3412:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3416:	4a0d      	ldr	r2, [pc, #52]	; (344c <_timer_init+0x1b0>)
    3418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    341c:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    341e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3420:	6923      	ldr	r3, [r4, #16]
    3422:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3426:	d1fb      	bne.n	3420 <_timer_init+0x184>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    3428:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    342c:	4a07      	ldr	r2, [pc, #28]	; (344c <_timer_init+0x1b0>)
    342e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3432:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3434:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3436:	6923      	ldr	r3, [r4, #16]
    3438:	f013 0f20 	tst.w	r3, #32
    343c:	d1fb      	bne.n	3436 <_timer_init+0x19a>
    343e:	e78f      	b.n	3360 <_timer_init+0xc4>
    3440:	0000321d 	.word	0x0000321d
    3444:	00005f44 	.word	0x00005f44
    3448:	00001c91 	.word	0x00001c91
    344c:	20000014 	.word	0x20000014
    3450:	000031c9 	.word	0x000031c9
    3454:	e000e100 	.word	0xe000e100

00003458 <_pwm_init>:
{
    3458:	b570      	push	{r4, r5, r6, lr}
    345a:	4606      	mov	r6, r0
    345c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    345e:	4608      	mov	r0, r1
    3460:	4b54      	ldr	r3, [pc, #336]	; (35b4 <_pwm_init+0x15c>)
    3462:	4798      	blx	r3
    3464:	4605      	mov	r5, r0
	device->hw = hw;
    3466:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3468:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    346a:	f013 0f01 	tst.w	r3, #1
    346e:	d119      	bne.n	34a4 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3470:	6923      	ldr	r3, [r4, #16]
    3472:	f013 0f03 	tst.w	r3, #3
    3476:	d1fb      	bne.n	3470 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3478:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    347a:	f013 0f02 	tst.w	r3, #2
    347e:	d00b      	beq.n	3498 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3480:	6823      	ldr	r3, [r4, #0]
    3482:	f023 0302 	bic.w	r3, r3, #2
    3486:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3488:	6923      	ldr	r3, [r4, #16]
    348a:	f013 0f03 	tst.w	r3, #3
    348e:	d1fb      	bne.n	3488 <_pwm_init+0x30>
    3490:	6923      	ldr	r3, [r4, #16]
    3492:	f013 0f02 	tst.w	r3, #2
    3496:	d1fb      	bne.n	3490 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3498:	2301      	movs	r3, #1
    349a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    349c:	6923      	ldr	r3, [r4, #16]
    349e:	f013 0f03 	tst.w	r3, #3
    34a2:	d1fb      	bne.n	349c <_pwm_init+0x44>
    34a4:	6923      	ldr	r3, [r4, #16]
    34a6:	f013 0f01 	tst.w	r3, #1
    34aa:	d1fb      	bne.n	34a4 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    34ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    34b0:	4a41      	ldr	r2, [pc, #260]	; (35b8 <_pwm_init+0x160>)
    34b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34b6:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    34b8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    34ba:	6923      	ldr	r3, [r4, #16]
    34bc:	f013 0f03 	tst.w	r3, #3
    34c0:	d1fb      	bne.n	34ba <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    34c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    34c6:	4a3c      	ldr	r2, [pc, #240]	; (35b8 <_pwm_init+0x160>)
    34c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34cc:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    34ce:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    34d0:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    34d2:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    34d4:	2203      	movs	r2, #3
    34d6:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    34d8:	685b      	ldr	r3, [r3, #4]
    34da:	f003 030c 	and.w	r3, r3, #12
    34de:	2b08      	cmp	r3, #8
    34e0:	d04a      	beq.n	3578 <_pwm_init+0x120>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    34e2:	2b00      	cmp	r3, #0
    34e4:	d15f      	bne.n	35a6 <_pwm_init+0x14e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    34e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    34ea:	4a33      	ldr	r2, [pc, #204]	; (35b8 <_pwm_init+0x160>)
    34ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34f0:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    34f2:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    34f4:	6923      	ldr	r3, [r4, #16]
    34f6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    34fa:	d1fb      	bne.n	34f4 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    34fc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3500:	4a2d      	ldr	r2, [pc, #180]	; (35b8 <_pwm_init+0x160>)
    3502:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3506:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3508:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    350a:	6923      	ldr	r3, [r4, #16]
    350c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3510:	d1fb      	bne.n	350a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    3512:	4631      	mov	r1, r6
    3514:	4620      	mov	r0, r4
    3516:	4b29      	ldr	r3, [pc, #164]	; (35bc <_pwm_init+0x164>)
    3518:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    351a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    351e:	4a26      	ldr	r2, [pc, #152]	; (35b8 <_pwm_init+0x160>)
    3520:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3524:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3528:	2b00      	cmp	r3, #0
    352a:	db3f      	blt.n	35ac <_pwm_init+0x154>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    352c:	095a      	lsrs	r2, r3, #5
    352e:	f003 031f 	and.w	r3, r3, #31
    3532:	2101      	movs	r1, #1
    3534:	fa01 f303 	lsl.w	r3, r1, r3
    3538:	3220      	adds	r2, #32
    353a:	4921      	ldr	r1, [pc, #132]	; (35c0 <_pwm_init+0x168>)
    353c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3544:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3548:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    354c:	4b1a      	ldr	r3, [pc, #104]	; (35b8 <_pwm_init+0x160>)
    354e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3552:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3556:	2b00      	cmp	r3, #0
    3558:	db2a      	blt.n	35b0 <_pwm_init+0x158>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    355a:	0959      	lsrs	r1, r3, #5
    355c:	f003 031f 	and.w	r3, r3, #31
    3560:	2201      	movs	r2, #1
    3562:	fa02 f303 	lsl.w	r3, r2, r3
    3566:	4a16      	ldr	r2, [pc, #88]	; (35c0 <_pwm_init+0x168>)
    3568:	f101 0060 	add.w	r0, r1, #96	; 0x60
    356c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3570:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3574:	2000      	movs	r0, #0
    3576:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3578:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    357c:	4a0e      	ldr	r2, [pc, #56]	; (35b8 <_pwm_init+0x160>)
    357e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3582:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3584:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3586:	6923      	ldr	r3, [r4, #16]
    3588:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    358c:	d1fb      	bne.n	3586 <_pwm_init+0x12e>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    358e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3592:	4a09      	ldr	r2, [pc, #36]	; (35b8 <_pwm_init+0x160>)
    3594:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3598:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    359a:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    359c:	6923      	ldr	r3, [r4, #16]
    359e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    35a2:	d1fb      	bne.n	359c <_pwm_init+0x144>
    35a4:	e7b5      	b.n	3512 <_pwm_init+0xba>
		return -1;
    35a6:	f04f 30ff 	mov.w	r0, #4294967295
    35aa:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    35ac:	2000      	movs	r0, #0
    35ae:	bd70      	pop	{r4, r5, r6, pc}
    35b0:	2000      	movs	r0, #0
}
    35b2:	bd70      	pop	{r4, r5, r6, pc}
    35b4:	0000321d 	.word	0x0000321d
    35b8:	20000014 	.word	0x20000014
    35bc:	000031c9 	.word	0x000031c9
    35c0:	e000e100 	.word	0xe000e100

000035c4 <_tc_get_timer>:
}
    35c4:	2000      	movs	r0, #0
    35c6:	4770      	bx	lr

000035c8 <_tc_get_pwm>:
}
    35c8:	2000      	movs	r0, #0
    35ca:	4770      	bx	lr

000035cc <TC0_Handler>:
{
    35cc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    35ce:	4b02      	ldr	r3, [pc, #8]	; (35d8 <TC0_Handler+0xc>)
    35d0:	6818      	ldr	r0, [r3, #0]
    35d2:	4b02      	ldr	r3, [pc, #8]	; (35dc <TC0_Handler+0x10>)
    35d4:	4798      	blx	r3
    35d6:	bd08      	pop	{r3, pc}
    35d8:	200001e0 	.word	0x200001e0
    35dc:	000031b1 	.word	0x000031b1

000035e0 <TC1_Handler>:
{
    35e0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    35e2:	4b02      	ldr	r3, [pc, #8]	; (35ec <TC1_Handler+0xc>)
    35e4:	6858      	ldr	r0, [r3, #4]
    35e6:	4b02      	ldr	r3, [pc, #8]	; (35f0 <TC1_Handler+0x10>)
    35e8:	4798      	blx	r3
    35ea:	bd08      	pop	{r3, pc}
    35ec:	200001e0 	.word	0x200001e0
    35f0:	000031b1 	.word	0x000031b1

000035f4 <TC2_Handler>:
{
    35f4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    35f6:	4b02      	ldr	r3, [pc, #8]	; (3600 <TC2_Handler+0xc>)
    35f8:	6898      	ldr	r0, [r3, #8]
    35fa:	4b02      	ldr	r3, [pc, #8]	; (3604 <TC2_Handler+0x10>)
    35fc:	4798      	blx	r3
    35fe:	bd08      	pop	{r3, pc}
    3600:	200001e0 	.word	0x200001e0
    3604:	000031b1 	.word	0x000031b1

00003608 <TC3_Handler>:
{
    3608:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    360a:	4b02      	ldr	r3, [pc, #8]	; (3614 <TC3_Handler+0xc>)
    360c:	68d8      	ldr	r0, [r3, #12]
    360e:	4b02      	ldr	r3, [pc, #8]	; (3618 <TC3_Handler+0x10>)
    3610:	4798      	blx	r3
    3612:	bd08      	pop	{r3, pc}
    3614:	200001e0 	.word	0x200001e0
    3618:	000031b1 	.word	0x000031b1

0000361c <TC7_Handler>:
{
    361c:	b538      	push	{r3, r4, r5, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    361e:	4b0c      	ldr	r3, [pc, #48]	; (3650 <TC7_Handler+0x34>)
    3620:	691d      	ldr	r5, [r3, #16]
	void *const hw = device->hw;
    3622:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3624:	7aa3      	ldrb	r3, [r4, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3626:	f013 0f01 	tst.w	r3, #1
    362a:	d005      	beq.n	3638 <TC7_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    362c:	2301      	movs	r3, #1
    362e:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_period_cb) {
    3630:	682b      	ldr	r3, [r5, #0]
    3632:	b10b      	cbz	r3, 3638 <TC7_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    3634:	4628      	mov	r0, r5
    3636:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    3638:	7a63      	ldrb	r3, [r4, #9]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    363a:	f013 0f02 	tst.w	r3, #2
    363e:	d005      	beq.n	364c <TC7_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    3640:	2302      	movs	r3, #2
    3642:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_error_cb) {
    3644:	686b      	ldr	r3, [r5, #4]
    3646:	b10b      	cbz	r3, 364c <TC7_Handler+0x30>
			device->callback.pwm_error_cb(device);
    3648:	4628      	mov	r0, r5
    364a:	4798      	blx	r3
    364c:	bd38      	pop	{r3, r4, r5, pc}
    364e:	bf00      	nop
    3650:	200001e0 	.word	0x200001e0

00003654 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    3654:	2000      	movs	r0, #0
    3656:	4770      	bx	lr

00003658 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3658:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    365a:	7c83      	ldrb	r3, [r0, #18]
    365c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3660:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    3662:	f002 0107 	and.w	r1, r2, #7
    3666:	2901      	cmp	r1, #1
    3668:	d00b      	beq.n	3682 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    366a:	015a      	lsls	r2, r3, #5
    366c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3670:	2110      	movs	r1, #16
    3672:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3676:	015b      	lsls	r3, r3, #5
    3678:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    367c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    3680:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    3682:	f012 0f40 	tst.w	r2, #64	; 0x40
    3686:	d00c      	beq.n	36a2 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    3688:	7cc2      	ldrb	r2, [r0, #19]
    368a:	f36f 1286 	bfc	r2, #6, #1
    368e:	74c2      	strb	r2, [r0, #19]
    3690:	015a      	lsls	r2, r3, #5
    3692:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3696:	2180      	movs	r1, #128	; 0x80
    3698:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    369c:	2140      	movs	r1, #64	; 0x40
    369e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    36a2:	7cc2      	ldrb	r2, [r0, #19]
    36a4:	f36f 02c3 	bfc	r2, #3, #1
    36a8:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    36aa:	490a      	ldr	r1, [pc, #40]	; (36d4 <_usb_d_dev_handle_setup+0x7c>)
    36ac:	015a      	lsls	r2, r3, #5
    36ae:	188c      	adds	r4, r1, r2
    36b0:	2500      	movs	r5, #0
    36b2:	72a5      	strb	r5, [r4, #10]
    36b4:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    36b6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    36ba:	246f      	movs	r4, #111	; 0x6f
    36bc:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    36c0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    36c4:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    36c8:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    36cc:	7c80      	ldrb	r0, [r0, #18]
    36ce:	4798      	blx	r3
    36d0:	bd38      	pop	{r3, r4, r5, pc}
    36d2:	bf00      	nop
    36d4:	200001f4 	.word	0x200001f4

000036d8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    36d8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    36da:	2320      	movs	r3, #32
    36dc:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    36e0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    36e2:	7c83      	ldrb	r3, [r0, #18]
    36e4:	f003 030f 	and.w	r3, r3, #15
    36e8:	015b      	lsls	r3, r3, #5
    36ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36ee:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    36f2:	4b04      	ldr	r3, [pc, #16]	; (3704 <_usb_d_dev_handle_stall+0x2c>)
    36f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    36f8:	6882      	ldr	r2, [r0, #8]
    36fa:	2101      	movs	r1, #1
    36fc:	7c80      	ldrb	r0, [r0, #18]
    36fe:	4798      	blx	r3
    3700:	bd08      	pop	{r3, pc}
    3702:	bf00      	nop
    3704:	200001f4 	.word	0x200001f4

00003708 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3708:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    370a:	7c84      	ldrb	r4, [r0, #18]
    370c:	2cff      	cmp	r4, #255	; 0xff
    370e:	d003      	beq.n	3718 <_usb_d_dev_trans_done+0x10>
    3710:	7cc3      	ldrb	r3, [r0, #19]
    3712:	f013 0f40 	tst.w	r3, #64	; 0x40
    3716:	d100      	bne.n	371a <_usb_d_dev_trans_done+0x12>
    3718:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    371a:	7cc2      	ldrb	r2, [r0, #19]
    371c:	f36f 1286 	bfc	r2, #6, #1
    3720:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3722:	4a03      	ldr	r2, [pc, #12]	; (3730 <_usb_d_dev_trans_done+0x28>)
    3724:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
    3728:	6882      	ldr	r2, [r0, #8]
    372a:	4620      	mov	r0, r4
    372c:	47a8      	blx	r5
    372e:	e7f3      	b.n	3718 <_usb_d_dev_trans_done+0x10>
    3730:	200001f4 	.word	0x200001f4

00003734 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3734:	b530      	push	{r4, r5, lr}
    3736:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3738:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    373a:	2425      	movs	r4, #37	; 0x25
    373c:	f88d 4004 	strb.w	r4, [sp, #4]
    3740:	244a      	movs	r4, #74	; 0x4a
    3742:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3746:	2bff      	cmp	r3, #255	; 0xff
    3748:	d01e      	beq.n	3788 <_usb_d_dev_trans_stop+0x54>
    374a:	7cc4      	ldrb	r4, [r0, #19]
    374c:	f014 0f40 	tst.w	r4, #64	; 0x40
    3750:	d01a      	beq.n	3788 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3752:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    3756:	b1c9      	cbz	r1, 378c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3758:	0163      	lsls	r3, r4, #5
    375a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    375e:	2580      	movs	r5, #128	; 0x80
    3760:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    3764:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3766:	a902      	add	r1, sp, #8
    3768:	440b      	add	r3, r1
    376a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    376e:	0163      	lsls	r3, r4, #5
    3770:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3774:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3778:	0163      	lsls	r3, r4, #5
    377a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    377e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    3782:	4611      	mov	r1, r2
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <_usb_d_dev_trans_stop+0x68>)
    3786:	4798      	blx	r3
}
    3788:	b003      	add	sp, #12
    378a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    378c:	0163      	lsls	r3, r4, #5
    378e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3792:	2540      	movs	r5, #64	; 0x40
    3794:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    3798:	e7e4      	b.n	3764 <_usb_d_dev_trans_stop+0x30>
    379a:	bf00      	nop
    379c:	00003709 	.word	0x00003709

000037a0 <_usb_d_dev_handle_trfail>:
{
    37a0:	b530      	push	{r4, r5, lr}
    37a2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    37a4:	7c83      	ldrb	r3, [r0, #18]
    37a6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    37aa:	2204      	movs	r2, #4
    37ac:	f88d 2004 	strb.w	r2, [sp, #4]
    37b0:	2208      	movs	r2, #8
    37b2:	f88d 2005 	strb.w	r2, [sp, #5]
    37b6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    37b8:	460c      	mov	r4, r1
    37ba:	b391      	cbz	r1, 3822 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    37bc:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    37c0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    37c4:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    37c8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    37cc:	4a32      	ldr	r2, [pc, #200]	; (3898 <_usb_d_dev_handle_trfail+0xf8>)
    37ce:	440a      	add	r2, r1
    37d0:	7a91      	ldrb	r1, [r2, #10]
    37d2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    37d4:	2d02      	cmp	r5, #2
    37d6:	d02c      	beq.n	3832 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    37d8:	f011 0f02 	tst.w	r1, #2
    37dc:	d045      	beq.n	386a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    37de:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    37e0:	7a91      	ldrb	r1, [r2, #10]
    37e2:	f36f 0141 	bfc	r1, #1, #1
    37e6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    37e8:	aa02      	add	r2, sp, #8
    37ea:	4422      	add	r2, r4
    37ec:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    37f0:	015a      	lsls	r2, r3, #5
    37f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    37f6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    37fa:	015b      	lsls	r3, r3, #5
    37fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3800:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3804:	f005 0307 	and.w	r3, r5, #7
    3808:	2b01      	cmp	r3, #1
    380a:	d143      	bne.n	3894 <_usb_d_dev_handle_trfail+0xf4>
    380c:	7cc3      	ldrb	r3, [r0, #19]
    380e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3812:	d03f      	beq.n	3894 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3814:	09d9      	lsrs	r1, r3, #7
    3816:	428c      	cmp	r4, r1
    3818:	d03c      	beq.n	3894 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    381a:	2200      	movs	r2, #0
    381c:	4b1f      	ldr	r3, [pc, #124]	; (389c <_usb_d_dev_handle_trfail+0xfc>)
    381e:	4798      	blx	r3
    3820:	e038      	b.n	3894 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3822:	0159      	lsls	r1, r3, #5
    3824:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3828:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    382c:	f005 0507 	and.w	r5, r5, #7
    3830:	e7ca      	b.n	37c8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3832:	f011 0f01 	tst.w	r1, #1
    3836:	d0cf      	beq.n	37d8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3838:	7a91      	ldrb	r1, [r2, #10]
    383a:	f36f 0100 	bfc	r1, #0, #1
    383e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3840:	aa02      	add	r2, sp, #8
    3842:	4422      	add	r2, r4
    3844:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3848:	015a      	lsls	r2, r3, #5
    384a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    384e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3852:	015b      	lsls	r3, r3, #5
    3854:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3858:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    385c:	2204      	movs	r2, #4
    385e:	1c21      	adds	r1, r4, #0
    3860:	bf18      	it	ne
    3862:	2101      	movne	r1, #1
    3864:	4b0d      	ldr	r3, [pc, #52]	; (389c <_usb_d_dev_handle_trfail+0xfc>)
    3866:	4798      	blx	r3
    3868:	e014      	b.n	3894 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    386a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    386e:	4a0a      	ldr	r2, [pc, #40]	; (3898 <_usb_d_dev_handle_trfail+0xf8>)
    3870:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    3874:	2100      	movs	r1, #0
    3876:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3878:	aa02      	add	r2, sp, #8
    387a:	4414      	add	r4, r2
    387c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3880:	015a      	lsls	r2, r3, #5
    3882:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3886:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    388a:	015b      	lsls	r3, r3, #5
    388c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3890:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    3894:	b003      	add	sp, #12
    3896:	bd30      	pop	{r4, r5, pc}
    3898:	200001f4 	.word	0x200001f4
    389c:	00003735 	.word	0x00003735

000038a0 <_usb_d_dev_reset_epts>:
{
    38a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a4:	4d0c      	ldr	r5, [pc, #48]	; (38d8 <_usb_d_dev_reset_epts+0x38>)
    38a6:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
    38aa:	f505 75b4 	add.w	r5, r5, #360	; 0x168
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    38ae:	f04f 0803 	mov.w	r8, #3
    38b2:	4f0a      	ldr	r7, [pc, #40]	; (38dc <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    38b4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    38b6:	4641      	mov	r1, r8
    38b8:	4620      	mov	r0, r4
    38ba:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    38bc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    38be:	2300      	movs	r3, #0
    38c0:	74e3      	strb	r3, [r4, #19]
    38c2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    38c4:	42ac      	cmp	r4, r5
    38c6:	d1f6      	bne.n	38b6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    38c8:	22a0      	movs	r2, #160	; 0xa0
    38ca:	4619      	mov	r1, r3
    38cc:	4802      	ldr	r0, [pc, #8]	; (38d8 <_usb_d_dev_reset_epts+0x38>)
    38ce:	4b04      	ldr	r3, [pc, #16]	; (38e0 <_usb_d_dev_reset_epts+0x40>)
    38d0:	4798      	blx	r3
    38d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38d6:	bf00      	nop
    38d8:	200001f4 	.word	0x200001f4
    38dc:	00003709 	.word	0x00003709
    38e0:	00005bdf 	.word	0x00005bdf

000038e4 <_usb_d_dev_in_next>:
{
    38e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38e8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    38ea:	7c84      	ldrb	r4, [r0, #18]
    38ec:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    38f0:	4688      	mov	r8, r1
    38f2:	2900      	cmp	r1, #0
    38f4:	f000 80a0 	beq.w	3a38 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    38f8:	4b58      	ldr	r3, [pc, #352]	; (3a5c <_usb_d_dev_in_next+0x178>)
    38fa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    38fe:	6958      	ldr	r0, [r3, #20]
    3900:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3904:	8a2b      	ldrh	r3, [r5, #16]
    3906:	f240 32ff 	movw	r2, #1023	; 0x3ff
    390a:	4293      	cmp	r3, r2
    390c:	f000 808e 	beq.w	3a2c <_usb_d_dev_in_next+0x148>
    3910:	3b01      	subs	r3, #1
    3912:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3914:	7cef      	ldrb	r7, [r5, #19]
    3916:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    391a:	f1b8 0f00 	cmp.w	r8, #0
    391e:	d005      	beq.n	392c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3920:	0162      	lsls	r2, r4, #5
    3922:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3926:	2302      	movs	r3, #2
    3928:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    392c:	68a9      	ldr	r1, [r5, #8]
    392e:	eb0e 0301 	add.w	r3, lr, r1
    3932:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    3934:	686e      	ldr	r6, [r5, #4]
    3936:	42b3      	cmp	r3, r6
    3938:	d23f      	bcs.n	39ba <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    393a:	1af6      	subs	r6, r6, r3
    393c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    393e:	7cea      	ldrb	r2, [r5, #19]
    3940:	f012 0f20 	tst.w	r2, #32
    3944:	d02d      	beq.n	39a2 <_usb_d_dev_in_next+0xbe>
    3946:	8a2a      	ldrh	r2, [r5, #16]
    3948:	4296      	cmp	r6, r2
    394a:	bf28      	it	cs
    394c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    394e:	6829      	ldr	r1, [r5, #0]
    3950:	4632      	mov	r2, r6
    3952:	4419      	add	r1, r3
    3954:	68e8      	ldr	r0, [r5, #12]
    3956:	4b42      	ldr	r3, [pc, #264]	; (3a60 <_usb_d_dev_in_next+0x17c>)
    3958:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    395a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    395c:	4b3f      	ldr	r3, [pc, #252]	; (3a5c <_usb_d_dev_in_next+0x178>)
    395e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3962:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3964:	4b3d      	ldr	r3, [pc, #244]	; (3a5c <_usb_d_dev_in_next+0x178>)
    3966:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    396a:	695a      	ldr	r2, [r3, #20]
    396c:	f366 020d 	bfi	r2, r6, #0, #14
    3970:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3972:	695a      	ldr	r2, [r3, #20]
    3974:	f36f 329b 	bfc	r2, #14, #14
    3978:	615a      	str	r2, [r3, #20]
	if (!isr) {
    397a:	f1b8 0f00 	cmp.w	r8, #0
    397e:	d108      	bne.n	3992 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    3980:	2f01      	cmp	r7, #1
    3982:	bf0c      	ite	eq
    3984:	224e      	moveq	r2, #78	; 0x4e
    3986:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3988:	0163      	lsls	r3, r4, #5
    398a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    398e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3992:	0164      	lsls	r4, r4, #5
    3994:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3998:	2380      	movs	r3, #128	; 0x80
    399a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39a2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    39a6:	bf28      	it	cs
    39a8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    39ac:	6829      	ldr	r1, [r5, #0]
    39ae:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    39b0:	4a2a      	ldr	r2, [pc, #168]	; (3a5c <_usb_d_dev_in_next+0x178>)
    39b2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    39b6:	6113      	str	r3, [r2, #16]
    39b8:	e7d4      	b.n	3964 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    39ba:	7ceb      	ldrb	r3, [r5, #19]
    39bc:	f013 0f10 	tst.w	r3, #16
    39c0:	d00f      	beq.n	39e2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    39c2:	7ceb      	ldrb	r3, [r5, #19]
    39c4:	f36f 1304 	bfc	r3, #4, #1
    39c8:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    39ca:	4b24      	ldr	r3, [pc, #144]	; (3a5c <_usb_d_dev_in_next+0x178>)
    39cc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    39d0:	695a      	ldr	r2, [r3, #20]
    39d2:	f36f 020d 	bfc	r2, #0, #14
    39d6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    39d8:	695a      	ldr	r2, [r3, #20]
    39da:	f36f 329b 	bfc	r2, #14, #14
    39de:	615a      	str	r2, [r3, #20]
    39e0:	e7cb      	b.n	397a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    39e2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    39e4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    39e8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    39ec:	bf0c      	ite	eq
    39ee:	234b      	moveq	r3, #75	; 0x4b
    39f0:	234a      	movne	r3, #74	; 0x4a
    39f2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    39f6:	8a2a      	ldrh	r2, [r5, #16]
    39f8:	ea00 030e 	and.w	r3, r0, lr
    39fc:	429a      	cmp	r2, r3
    39fe:	d005      	beq.n	3a0c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3a00:	2100      	movs	r1, #0
    3a02:	4628      	mov	r0, r5
    3a04:	4b17      	ldr	r3, [pc, #92]	; (3a64 <_usb_d_dev_in_next+0x180>)
    3a06:	4798      	blx	r3
	return;
    3a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    3a0c:	7ceb      	ldrb	r3, [r5, #19]
    3a0e:	f36f 1386 	bfc	r3, #6, #1
    3a12:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    3a14:	4b11      	ldr	r3, [pc, #68]	; (3a5c <_usb_d_dev_in_next+0x178>)
    3a16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    3a1a:	68a9      	ldr	r1, [r5, #8]
    3a1c:	7ca8      	ldrb	r0, [r5, #18]
    3a1e:	4798      	blx	r3
    3a20:	b9d0      	cbnz	r0, 3a58 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    3a22:	7ceb      	ldrb	r3, [r5, #19]
    3a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3a28:	74eb      	strb	r3, [r5, #19]
    3a2a:	e7e9      	b.n	3a00 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3a2c:	7cef      	ldrb	r7, [r5, #19]
    3a2e:	f007 0707 	and.w	r7, r7, #7
    3a32:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3a36:	e773      	b.n	3920 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3a38:	8a03      	ldrh	r3, [r0, #16]
    3a3a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3a3e:	4293      	cmp	r3, r2
    3a40:	d107      	bne.n	3a52 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3a42:	7cef      	ldrb	r7, [r5, #19]
    3a44:	f007 0707 	and.w	r7, r7, #7
    3a48:	f04f 0e00 	mov.w	lr, #0
    3a4c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3a50:	e76c      	b.n	392c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3a52:	f04f 0e00 	mov.w	lr, #0
    3a56:	e75b      	b.n	3910 <_usb_d_dev_in_next+0x2c>
    3a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a5c:	200001f4 	.word	0x200001f4
    3a60:	00005bc9 	.word	0x00005bc9
    3a64:	00003709 	.word	0x00003709

00003a68 <_usb_d_dev_out_next>:
{
    3a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a6c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3a6e:	7c85      	ldrb	r5, [r0, #18]
    3a70:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3a74:	4689      	mov	r9, r1
    3a76:	2900      	cmp	r1, #0
    3a78:	d056      	beq.n	3b28 <_usb_d_dev_out_next+0xc0>
    3a7a:	4b74      	ldr	r3, [pc, #464]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3a7c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3a80:	685a      	ldr	r2, [r3, #4]
    3a82:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3a86:	685f      	ldr	r7, [r3, #4]
    3a88:	f3c7 070d 	ubfx	r7, r7, #0, #14
    3a8c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3a8e:	8a06      	ldrh	r6, [r0, #16]
    3a90:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3a94:	429e      	cmp	r6, r3
    3a96:	f000 80ba 	beq.w	3c0e <_usb_d_dev_out_next+0x1a6>
    3a9a:	3e01      	subs	r6, #1
    3a9c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    3a9e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3aa2:	f894 8013 	ldrb.w	r8, [r4, #19]
    3aa6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    3aaa:	f1b9 0f00 	cmp.w	r9, #0
    3aae:	d005      	beq.n	3abc <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3ab0:	016b      	lsls	r3, r5, #5
    3ab2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3ab6:	2201      	movs	r2, #1
    3ab8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3abc:	7ce3      	ldrb	r3, [r4, #19]
    3abe:	f013 0f20 	tst.w	r3, #32
    3ac2:	d00d      	beq.n	3ae0 <_usb_d_dev_out_next+0x78>
    3ac4:	6862      	ldr	r2, [r4, #4]
    3ac6:	2a00      	cmp	r2, #0
    3ac8:	d037      	beq.n	3b3a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    3aca:	68a0      	ldr	r0, [r4, #8]
    3acc:	1a12      	subs	r2, r2, r0
    3ace:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3ad0:	6823      	ldr	r3, [r4, #0]
    3ad2:	42ba      	cmp	r2, r7
    3ad4:	bf28      	it	cs
    3ad6:	463a      	movcs	r2, r7
    3ad8:	68e1      	ldr	r1, [r4, #12]
    3ada:	4418      	add	r0, r3
    3adc:	4b5c      	ldr	r3, [pc, #368]	; (3c50 <_usb_d_dev_out_next+0x1e8>)
    3ade:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3ae0:	6863      	ldr	r3, [r4, #4]
    3ae2:	b353      	cbz	r3, 3b3a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    3ae4:	f1b9 0f00 	cmp.w	r9, #0
    3ae8:	d040      	beq.n	3b6c <_usb_d_dev_out_next+0x104>
    3aea:	8a22      	ldrh	r2, [r4, #16]
    3aec:	42ba      	cmp	r2, r7
    3aee:	d93d      	bls.n	3b6c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    3af0:	7ce3      	ldrb	r3, [r4, #19]
    3af2:	f36f 1304 	bfc	r3, #4, #1
    3af6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3af8:	68a3      	ldr	r3, [r4, #8]
    3afa:	445b      	add	r3, fp
    3afc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    3afe:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3b02:	ea4f 1345 	mov.w	r3, r5, lsl #5
    3b06:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3b0a:	bf0c      	ite	eq
    3b0c:	222d      	moveq	r2, #45	; 0x2d
    3b0e:	2225      	movne	r2, #37	; 0x25
    3b10:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    3b14:	b915      	cbnz	r5, 3b1c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3b16:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3b18:	4b4c      	ldr	r3, [pc, #304]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3b1a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3b1c:	2100      	movs	r1, #0
    3b1e:	4620      	mov	r0, r4
    3b20:	4b4c      	ldr	r3, [pc, #304]	; (3c54 <_usb_d_dev_out_next+0x1ec>)
    3b22:	4798      	blx	r3
	return;
    3b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3b28:	8a06      	ldrh	r6, [r0, #16]
    3b2a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3b2e:	429e      	cmp	r6, r3
    3b30:	d07b      	beq.n	3c2a <_usb_d_dev_out_next+0x1c2>
    3b32:	f04f 0b00 	mov.w	fp, #0
    3b36:	46da      	mov	sl, fp
    3b38:	e7af      	b.n	3a9a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3b3a:	7ce3      	ldrb	r3, [r4, #19]
    3b3c:	f013 0f10 	tst.w	r3, #16
    3b40:	d06c      	beq.n	3c1c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    3b42:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    3b44:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3b48:	f043 0320 	orr.w	r3, r3, #32
    3b4c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3b4e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3b50:	493e      	ldr	r1, [pc, #248]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3b52:	016a      	lsls	r2, r5, #5
    3b54:	188b      	adds	r3, r1, r2
    3b56:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3b58:	8a21      	ldrh	r1, [r4, #16]
    3b5a:	685a      	ldr	r2, [r3, #4]
    3b5c:	f361 329b 	bfi	r2, r1, #14, #14
    3b60:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3b62:	685a      	ldr	r2, [r3, #4]
    3b64:	f36f 020d 	bfc	r2, #0, #14
    3b68:	605a      	str	r2, [r3, #4]
    3b6a:	e01d      	b.n	3ba8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    3b6c:	68a2      	ldr	r2, [r4, #8]
    3b6e:	4452      	add	r2, sl
    3b70:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3b72:	4293      	cmp	r3, r2
    3b74:	d9c3      	bls.n	3afe <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    3b76:	1a9b      	subs	r3, r3, r2
    3b78:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    3b7a:	7ce1      	ldrb	r1, [r4, #19]
    3b7c:	f011 0f20 	tst.w	r1, #32
    3b80:	d026      	beq.n	3bd0 <_usb_d_dev_out_next+0x168>
    3b82:	8a22      	ldrh	r2, [r4, #16]
    3b84:	4293      	cmp	r3, r2
    3b86:	bf28      	it	cs
    3b88:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3b8a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3b8c:	016a      	lsls	r2, r5, #5
    3b8e:	492f      	ldr	r1, [pc, #188]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3b90:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3b92:	4a2e      	ldr	r2, [pc, #184]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3b94:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    3b98:	6851      	ldr	r1, [r2, #4]
    3b9a:	f363 319b 	bfi	r1, r3, #14, #14
    3b9e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3ba0:	6853      	ldr	r3, [r2, #4]
    3ba2:	f36f 030d 	bfc	r3, #0, #14
    3ba6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    3ba8:	f1b9 0f00 	cmp.w	r9, #0
    3bac:	d108      	bne.n	3bc0 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    3bae:	f1b8 0f01 	cmp.w	r8, #1
    3bb2:	d025      	beq.n	3c00 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    3bb4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3bb6:	016b      	lsls	r3, r5, #5
    3bb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3bbc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3bc0:	016d      	lsls	r5, r5, #5
    3bc2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    3bc6:	2340      	movs	r3, #64	; 0x40
    3bc8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    3bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    3bd0:	8a21      	ldrh	r1, [r4, #16]
    3bd2:	428b      	cmp	r3, r1
    3bd4:	d90a      	bls.n	3bec <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3bda:	d80e      	bhi.n	3bfa <_usb_d_dev_out_next+0x192>
    3bdc:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3be0:	6821      	ldr	r1, [r4, #0]
    3be2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    3be4:	0169      	lsls	r1, r5, #5
    3be6:	4819      	ldr	r0, [pc, #100]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3be8:	5042      	str	r2, [r0, r1]
    3bea:	e7d2      	b.n	3b92 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    3bec:	428b      	cmp	r3, r1
    3bee:	d2f7      	bcs.n	3be0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    3bf0:	7ce1      	ldrb	r1, [r4, #19]
    3bf2:	f041 0120 	orr.w	r1, r1, #32
    3bf6:	74e1      	strb	r1, [r4, #19]
    3bf8:	e7f2      	b.n	3be0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    3bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3bfe:	e7ef      	b.n	3be0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    3c00:	4b12      	ldr	r3, [pc, #72]	; (3c4c <_usb_d_dev_out_next+0x1e4>)
    3c02:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3c06:	2200      	movs	r2, #0
    3c08:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3c0a:	222d      	movs	r2, #45	; 0x2d
    3c0c:	e7d3      	b.n	3bb6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    3c0e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3c12:	f890 8013 	ldrb.w	r8, [r0, #19]
    3c16:	f008 0807 	and.w	r8, r8, #7
    3c1a:	e749      	b.n	3ab0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    3c1c:	f1b9 0f00 	cmp.w	r9, #0
    3c20:	d10b      	bne.n	3c3a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    3c22:	68a3      	ldr	r3, [r4, #8]
    3c24:	4453      	add	r3, sl
    3c26:	60a3      	str	r3, [r4, #8]
    3c28:	e769      	b.n	3afe <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3c2a:	f890 8013 	ldrb.w	r8, [r0, #19]
    3c2e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    3c32:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3c34:	46bb      	mov	fp, r7
    3c36:	46ba      	mov	sl, r7
    3c38:	e740      	b.n	3abc <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    3c3a:	8a23      	ldrh	r3, [r4, #16]
    3c3c:	42bb      	cmp	r3, r7
    3c3e:	f63f af57 	bhi.w	3af0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    3c42:	68a3      	ldr	r3, [r4, #8]
    3c44:	4453      	add	r3, sl
    3c46:	60a3      	str	r3, [r4, #8]
    3c48:	e759      	b.n	3afe <_usb_d_dev_out_next+0x96>
    3c4a:	bf00      	nop
    3c4c:	200001f4 	.word	0x200001f4
    3c50:	00005bc9 	.word	0x00005bc9
    3c54:	00003709 	.word	0x00003709

00003c58 <_usb_d_dev_handler>:
{
    3c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3c5c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3c60:	8c1e      	ldrh	r6, [r3, #32]
    3c62:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3c64:	b146      	cbz	r6, 3c78 <_usb_d_dev_handler+0x20>
    3c66:	4d9d      	ldr	r5, [pc, #628]	; (3edc <_usb_d_dev_handler+0x284>)
	uint32_t lpm_variable = 0;
    3c68:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3c6a:	f1a5 07b4 	sub.w	r7, r5, #180	; 0xb4
			_usb_d_dev_handle_setup(ept);
    3c6e:	f8df 9288 	ldr.w	r9, [pc, #648]	; 3ef8 <_usb_d_dev_handler+0x2a0>
			_usb_d_dev_handle_trfail(ept, 1);
    3c72:	f8df 8288 	ldr.w	r8, [pc, #648]	; 3efc <_usb_d_dev_handler+0x2a4>
    3c76:	e0ec      	b.n	3e52 <_usb_d_dev_handler+0x1fa>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3c78:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3c7a:	8b1b      	ldrh	r3, [r3, #24]
    3c7c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3c7e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3c80:	f013 0f04 	tst.w	r3, #4
    3c84:	d11f      	bne.n	3cc6 <_usb_d_dev_handler+0x6e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3c86:	f413 7f00 	tst.w	r3, #512	; 0x200
    3c8a:	d126      	bne.n	3cda <_usb_d_dev_handler+0x82>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3c8c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3c90:	d15d      	bne.n	3d4e <_usb_d_dev_handler+0xf6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3c92:	f013 0f70 	tst.w	r3, #112	; 0x70
    3c96:	d166      	bne.n	3d66 <_usb_d_dev_handler+0x10e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3c98:	f013 0f08 	tst.w	r3, #8
    3c9c:	f040 8086 	bne.w	3dac <_usb_d_dev_handler+0x154>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3ca0:	f013 0f01 	tst.w	r3, #1
    3ca4:	d0df      	beq.n	3c66 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3ca6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3caa:	f240 2201 	movw	r2, #513	; 0x201
    3cae:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3cb0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3cb2:	2270      	movs	r2, #112	; 0x70
    3cb4:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3cb6:	4b8a      	ldr	r3, [pc, #552]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3cbc:	2100      	movs	r1, #0
    3cbe:	2004      	movs	r0, #4
    3cc0:	4798      	blx	r3
    3cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3cc6:	2204      	movs	r2, #4
    3cc8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3ccc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    3cce:	4b84      	ldr	r3, [pc, #528]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3cd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    3cd4:	4798      	blx	r3
    3cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3cda:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3cde:	f240 2201 	movw	r2, #513	; 0x201
    3ce2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3ce4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3ce6:	2270      	movs	r2, #112	; 0x70
    3ce8:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3cea:	4b7d      	ldr	r3, [pc, #500]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3cec:	891b      	ldrh	r3, [r3, #8]
    3cee:	f003 030f 	and.w	r3, r3, #15
    3cf2:	2b03      	cmp	r3, #3
    3cf4:	d029      	beq.n	3d4a <_usb_d_dev_handler+0xf2>
    3cf6:	4b7a      	ldr	r3, [pc, #488]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3cfa:	f003 030f 	and.w	r3, r3, #15
    3cfe:	2b03      	cmp	r3, #3
    3d00:	d017      	beq.n	3d32 <_usb_d_dev_handler+0xda>
    3d02:	4b77      	ldr	r3, [pc, #476]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3d04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    3d08:	f003 030f 	and.w	r3, r3, #15
    3d0c:	2b03      	cmp	r3, #3
    3d0e:	d01a      	beq.n	3d46 <_usb_d_dev_handler+0xee>
    3d10:	4b73      	ldr	r3, [pc, #460]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3d12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    3d16:	f003 030f 	and.w	r3, r3, #15
    3d1a:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3d1c:	bf08      	it	eq
    3d1e:	2203      	moveq	r2, #3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3d20:	d008      	beq.n	3d34 <_usb_d_dev_handler+0xdc>
	uint32_t lpm_variable = 0;
    3d22:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3d24:	4b6e      	ldr	r3, [pc, #440]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3d26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3d2a:	2003      	movs	r0, #3
    3d2c:	4798      	blx	r3
    3d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3d32:	2201      	movs	r2, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3d34:	4b6a      	ldr	r3, [pc, #424]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3d36:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    3d3a:	8919      	ldrh	r1, [r3, #8]
    3d3c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    3d40:	2200      	movs	r2, #0
    3d42:	811a      	strh	r2, [r3, #8]
    3d44:	e7ee      	b.n	3d24 <_usb_d_dev_handler+0xcc>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3d46:	2202      	movs	r2, #2
    3d48:	e7f4      	b.n	3d34 <_usb_d_dev_handler+0xdc>
    3d4a:	2200      	movs	r2, #0
    3d4c:	e7f2      	b.n	3d34 <_usb_d_dev_handler+0xdc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3d4e:	2280      	movs	r2, #128	; 0x80
    3d50:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3d54:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3d56:	4b62      	ldr	r3, [pc, #392]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3d5c:	2100      	movs	r1, #0
    3d5e:	2005      	movs	r0, #5
    3d60:	4798      	blx	r3
    3d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3d6a:	2270      	movs	r2, #112	; 0x70
    3d6c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3d6e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3d70:	f240 2201 	movw	r2, #513	; 0x201
    3d74:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3d76:	4b5b      	ldr	r3, [pc, #364]	; (3ee4 <_usb_d_dev_handler+0x28c>)
    3d78:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3d7c:	f013 0f01 	tst.w	r3, #1
    3d80:	d00e      	beq.n	3da0 <_usb_d_dev_handler+0x148>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3d82:	4a58      	ldr	r2, [pc, #352]	; (3ee4 <_usb_d_dev_handler+0x28c>)
    3d84:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3d86:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    3d8a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3d8e:	d1f9      	bne.n	3d84 <_usb_d_dev_handler+0x12c>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3d90:	4b53      	ldr	r3, [pc, #332]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3d96:	2100      	movs	r1, #0
    3d98:	2002      	movs	r0, #2
    3d9a:	4798      	blx	r3
    3d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3da0:	4a50      	ldr	r2, [pc, #320]	; (3ee4 <_usb_d_dev_handler+0x28c>)
    3da2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3da4:	f413 7f80 	tst.w	r3, #256	; 0x100
    3da8:	d0fb      	beq.n	3da2 <_usb_d_dev_handler+0x14a>
    3daa:	e7f1      	b.n	3d90 <_usb_d_dev_handler+0x138>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3dac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3db0:	2400      	movs	r4, #0
    3db2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3db6:	2208      	movs	r2, #8
    3db8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3dba:	2270      	movs	r2, #112	; 0x70
    3dbc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3dbe:	f240 2201 	movw	r2, #513	; 0x201
    3dc2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3dc4:	4b48      	ldr	r3, [pc, #288]	; (3ee8 <_usb_d_dev_handler+0x290>)
    3dc6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3dc8:	4b45      	ldr	r3, [pc, #276]	; (3ee0 <_usb_d_dev_handler+0x288>)
    3dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3dce:	4621      	mov	r1, r4
    3dd0:	2001      	movs	r0, #1
    3dd2:	4798      	blx	r3
    3dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3dd8:	f011 0f10 	tst.w	r1, #16
    3ddc:	d109      	bne.n	3df2 <_usb_d_dev_handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3dde:	f011 0f40 	tst.w	r1, #64	; 0x40
    3de2:	d108      	bne.n	3df6 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3de4:	f011 0f20 	tst.w	r1, #32
    3de8:	d02f      	beq.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 0);
    3dea:	2100      	movs	r1, #0
    3dec:	4b3f      	ldr	r3, [pc, #252]	; (3eec <_usb_d_dev_handler+0x294>)
    3dee:	4798      	blx	r3
    3df0:	e02b      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_setup(ept);
    3df2:	47c8      	blx	r9
    3df4:	e029      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 1);
    3df6:	2101      	movs	r1, #1
    3df8:	4b3c      	ldr	r3, [pc, #240]	; (3eec <_usb_d_dev_handler+0x294>)
    3dfa:	4798      	blx	r3
    3dfc:	e025      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3dfe:	f011 0f40 	tst.w	r1, #64	; 0x40
    3e02:	d111      	bne.n	3e28 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3e04:	f011 0f08 	tst.w	r1, #8
    3e08:	d112      	bne.n	3e30 <_usb_d_dev_handler+0x1d8>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3e0a:	f011 0f02 	tst.w	r1, #2
    3e0e:	d112      	bne.n	3e36 <_usb_d_dev_handler+0x1de>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3e10:	f003 0307 	and.w	r3, r3, #7
    3e14:	2b01      	cmp	r3, #1
    3e16:	d118      	bne.n	3e4a <_usb_d_dev_handler+0x1f2>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3e18:	f011 0f04 	tst.w	r1, #4
    3e1c:	d10f      	bne.n	3e3e <_usb_d_dev_handler+0x1e6>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3e1e:	f011 0f10 	tst.w	r1, #16
    3e22:	d012      	beq.n	3e4a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_setup(ept);
    3e24:	47c8      	blx	r9
    3e26:	e010      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 1);
    3e28:	2101      	movs	r1, #1
    3e2a:	4b30      	ldr	r3, [pc, #192]	; (3eec <_usb_d_dev_handler+0x294>)
    3e2c:	4798      	blx	r3
    3e2e:	e00c      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_trfail(ept, 1);
    3e30:	2101      	movs	r1, #1
    3e32:	47c0      	blx	r8
    3e34:	e009      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_in_next(ept, true);
    3e36:	2101      	movs	r1, #1
    3e38:	4b2d      	ldr	r3, [pc, #180]	; (3ef0 <_usb_d_dev_handler+0x298>)
    3e3a:	4798      	blx	r3
    3e3c:	e005      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_trfail(ept, 0);
    3e3e:	2100      	movs	r1, #0
    3e40:	47c0      	blx	r8
    3e42:	e002      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_stall(ept, 0);
    3e44:	2100      	movs	r1, #0
    3e46:	4b29      	ldr	r3, [pc, #164]	; (3eec <_usb_d_dev_handler+0x294>)
    3e48:	4798      	blx	r3
    3e4a:	3401      	adds	r4, #1
    3e4c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3e4e:	2c09      	cmp	r4, #9
    3e50:	d042      	beq.n	3ed8 <_usb_d_dev_handler+0x280>
    3e52:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    3e54:	7cab      	ldrb	r3, [r5, #18]
    3e56:	2bff      	cmp	r3, #255	; 0xff
    3e58:	d0f7      	beq.n	3e4a <_usb_d_dev_handler+0x1f2>
	if (!(epint & (1u << epn))) {
    3e5a:	f003 030f 	and.w	r3, r3, #15
    3e5e:	2101      	movs	r1, #1
    3e60:	4099      	lsls	r1, r3
    3e62:	4231      	tst	r1, r6
    3e64:	d0f1      	beq.n	3e4a <_usb_d_dev_handler+0x1f2>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3e66:	0159      	lsls	r1, r3, #5
    3e68:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3e6c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    3e70:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3e72:	015b      	lsls	r3, r3, #5
    3e74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3e78:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    3e7c:	4019      	ands	r1, r3
    3e7e:	d0e4      	beq.n	3e4a <_usb_d_dev_handler+0x1f2>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3e80:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    3e84:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3e88:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
    3e8c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    3e90:	2a01      	cmp	r2, #1
    3e92:	d0a1      	beq.n	3dd8 <_usb_d_dev_handler+0x180>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3e94:	f013 0f80 	tst.w	r3, #128	; 0x80
    3e98:	d1b1      	bne.n	3dfe <_usb_d_dev_handler+0x1a6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3e9a:	f011 0f20 	tst.w	r1, #32
    3e9e:	d1d1      	bne.n	3e44 <_usb_d_dev_handler+0x1ec>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3ea0:	f011 0f04 	tst.w	r1, #4
    3ea4:	d10e      	bne.n	3ec4 <_usb_d_dev_handler+0x26c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3ea6:	f011 0f01 	tst.w	r1, #1
    3eaa:	d10e      	bne.n	3eca <_usb_d_dev_handler+0x272>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3eac:	f003 0307 	and.w	r3, r3, #7
    3eb0:	2b01      	cmp	r3, #1
    3eb2:	d1ca      	bne.n	3e4a <_usb_d_dev_handler+0x1f2>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3eb4:	f011 0f08 	tst.w	r1, #8
    3eb8:	d10b      	bne.n	3ed2 <_usb_d_dev_handler+0x27a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3eba:	f011 0f10 	tst.w	r1, #16
    3ebe:	d0c4      	beq.n	3e4a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_setup(ept);
    3ec0:	47c8      	blx	r9
    3ec2:	e7c2      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_handle_trfail(ept, 0);
    3ec4:	2100      	movs	r1, #0
    3ec6:	47c0      	blx	r8
    3ec8:	e7bf      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
		_usb_d_dev_out_next(ept, true);
    3eca:	2101      	movs	r1, #1
    3ecc:	4b09      	ldr	r3, [pc, #36]	; (3ef4 <_usb_d_dev_handler+0x29c>)
    3ece:	4798      	blx	r3
    3ed0:	e7bb      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
			_usb_d_dev_handle_trfail(ept, 1);
    3ed2:	2101      	movs	r1, #1
    3ed4:	47c0      	blx	r8
    3ed6:	e7b8      	b.n	3e4a <_usb_d_dev_handler+0x1f2>
    3ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3edc:	200002a8 	.word	0x200002a8
    3ee0:	200001f4 	.word	0x200001f4
    3ee4:	40001000 	.word	0x40001000
    3ee8:	000038a1 	.word	0x000038a1
    3eec:	000036d9 	.word	0x000036d9
    3ef0:	000038e5 	.word	0x000038e5
    3ef4:	00003a69 	.word	0x00003a69
    3ef8:	00003659 	.word	0x00003659
    3efc:	000037a1 	.word	0x000037a1

00003f00 <_usb_d_dev_init>:
{
    3f00:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3f02:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3f06:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3f08:	f013 0f01 	tst.w	r3, #1
    3f0c:	d124      	bne.n	3f58 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3f0e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3f12:	7893      	ldrb	r3, [r2, #2]
    3f14:	f013 0f03 	tst.w	r3, #3
    3f18:	d1fb      	bne.n	3f12 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    3f1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3f1e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3f20:	f013 0f02 	tst.w	r3, #2
    3f24:	d00f      	beq.n	3f46 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3f26:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3f2a:	7813      	ldrb	r3, [r2, #0]
    3f2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3f30:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3f32:	7893      	ldrb	r3, [r2, #2]
    3f34:	f013 0f03 	tst.w	r3, #3
    3f38:	d1fb      	bne.n	3f32 <_usb_d_dev_init+0x32>
    3f3a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3f3e:	7893      	ldrb	r3, [r2, #2]
    3f40:	f013 0f02 	tst.w	r3, #2
    3f44:	d1fb      	bne.n	3f3e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3f46:	2201      	movs	r2, #1
    3f48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3f4c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3f4e:	461a      	mov	r2, r3
    3f50:	7893      	ldrb	r3, [r2, #2]
    3f52:	f013 0f03 	tst.w	r3, #3
    3f56:	d1fb      	bne.n	3f50 <_usb_d_dev_init+0x50>
    3f58:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3f5c:	7893      	ldrb	r3, [r2, #2]
    3f5e:	f013 0f01 	tst.w	r3, #1
    3f62:	d1fb      	bne.n	3f5c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3f64:	4b24      	ldr	r3, [pc, #144]	; (3ff8 <_usb_d_dev_init+0xf8>)
    3f66:	4a25      	ldr	r2, [pc, #148]	; (3ffc <_usb_d_dev_init+0xfc>)
    3f68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3f70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3f74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3f78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	_usb_d_dev_reset_epts();
    3f7c:	4b20      	ldr	r3, [pc, #128]	; (4000 <_usb_d_dev_init+0x100>)
    3f7e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3f80:	4b20      	ldr	r3, [pc, #128]	; (4004 <_usb_d_dev_init+0x104>)
    3f82:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3f84:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3f88:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3f8c:	f011 011f 	ands.w	r1, r1, #31
    3f90:	d02b      	beq.n	3fea <_usb_d_dev_init+0xea>
		pad_transn = 9;
    3f92:	291f      	cmp	r1, #31
    3f94:	bf08      	it	eq
    3f96:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3f98:	b34b      	cbz	r3, 3fee <_usb_d_dev_init+0xee>
		pad_transp = 25;
    3f9a:	2b1f      	cmp	r3, #31
    3f9c:	bf08      	it	eq
    3f9e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3fa0:	b33a      	cbz	r2, 3ff2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    3fa2:	2a07      	cmp	r2, #7
    3fa4:	bf08      	it	eq
    3fa6:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3fa8:	f003 031f 	and.w	r3, r3, #31
    3fac:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3fb0:	0312      	lsls	r2, r2, #12
    3fb2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3fb6:	4313      	orrs	r3, r2
    3fb8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3fbc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3fbe:	78d3      	ldrb	r3, [r2, #3]
    3fc0:	f043 0303 	orr.w	r3, r3, #3
    3fc4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3fc6:	78d3      	ldrb	r3, [r2, #3]
    3fc8:	f043 030c 	orr.w	r3, r3, #12
    3fcc:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3fce:	2304      	movs	r3, #4
    3fd0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3fd2:	7893      	ldrb	r3, [r2, #2]
    3fd4:	f013 0f03 	tst.w	r3, #3
    3fd8:	d1fb      	bne.n	3fd2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3fda:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3fde:	4a06      	ldr	r2, [pc, #24]	; (3ff8 <_usb_d_dev_init+0xf8>)
    3fe0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3fe2:	2201      	movs	r2, #1
    3fe4:	811a      	strh	r2, [r3, #8]
}
    3fe6:	2000      	movs	r0, #0
    3fe8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3fea:	2109      	movs	r1, #9
    3fec:	e7d4      	b.n	3f98 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    3fee:	2319      	movs	r3, #25
    3ff0:	e7d6      	b.n	3fa0 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    3ff2:	2206      	movs	r2, #6
    3ff4:	e7d8      	b.n	3fa8 <_usb_d_dev_init+0xa8>
    3ff6:	bf00      	nop
    3ff8:	200001f4 	.word	0x200001f4
    3ffc:	00003655 	.word	0x00003655
    4000:	000038a1 	.word	0x000038a1
    4004:	00800084 	.word	0x00800084

00004008 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4008:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    400c:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    400e:	f013 0f03 	tst.w	r3, #3
    4012:	d129      	bne.n	4068 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4014:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4018:	7893      	ldrb	r3, [r2, #2]
    401a:	f013 0f03 	tst.w	r3, #3
    401e:	d1fb      	bne.n	4018 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4020:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4024:	781b      	ldrb	r3, [r3, #0]
    4026:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4028:	f013 0f02 	tst.w	r3, #2
    402c:	d108      	bne.n	4040 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    402e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4032:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4036:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4038:	7893      	ldrb	r3, [r2, #2]
    403a:	f013 0f03 	tst.w	r3, #3
    403e:	d1fb      	bne.n	4038 <_usb_d_dev_enable+0x30>
    4040:	4b0b      	ldr	r3, [pc, #44]	; (4070 <_usb_d_dev_enable+0x68>)
    4042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4046:	609a      	str	r2, [r3, #8]
    4048:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    404c:	609a      	str	r2, [r3, #8]
    404e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4052:	609a      	str	r2, [r3, #8]
    4054:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4058:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    405a:	f240 228d 	movw	r2, #653	; 0x28d
    405e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4062:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4064:	2000      	movs	r0, #0
    4066:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4068:	f06f 0010 	mvn.w	r0, #16
}
    406c:	4770      	bx	lr
    406e:	bf00      	nop
    4070:	e000e100 	.word	0xe000e100

00004074 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4074:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4078:	8913      	ldrh	r3, [r2, #8]
    407a:	f023 0301 	bic.w	r3, r3, #1
    407e:	041b      	lsls	r3, r3, #16
    4080:	0c1b      	lsrs	r3, r3, #16
    4082:	8113      	strh	r3, [r2, #8]
    4084:	4770      	bx	lr

00004086 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4086:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    408a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    408e:	7298      	strb	r0, [r3, #10]
    4090:	4770      	bx	lr
	...

00004094 <_usb_d_dev_ep_init>:
{
    4094:	b5f0      	push	{r4, r5, r6, r7, lr}
    4096:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    409a:	f010 050f 	ands.w	r5, r0, #15
    409e:	d04d      	beq.n	413c <_usb_d_dev_ep_init+0xa8>
    40a0:	f1be 0f00 	cmp.w	lr, #0
    40a4:	bfb4      	ite	lt
    40a6:	1d2c      	addlt	r4, r5, #4
    40a8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    40aa:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    40ae:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    40b0:	2d04      	cmp	r5, #4
    40b2:	d947      	bls.n	4144 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    40b4:	f06f 0011 	mvn.w	r0, #17
    40b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    40ba:	f1be 0f00 	cmp.w	lr, #0
    40be:	db1b      	blt.n	40f8 <_usb_d_dev_ep_init+0x64>
    40c0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    40c4:	4e37      	ldr	r6, [pc, #220]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    40c6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    40ca:	2d00      	cmp	r5, #0
    40cc:	d15e      	bne.n	418c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    40ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40d2:	4d34      	ldr	r5, [pc, #208]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    40d4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    40d8:	4d33      	ldr	r5, [pc, #204]	; (41a8 <_usb_d_dev_ep_init+0x114>)
    40da:	00a6      	lsls	r6, r4, #2
    40dc:	1933      	adds	r3, r6, r4
    40de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    40e2:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0
	ept->size     = max_pkt_siz;
    40e6:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	ept->flags.u8 = (ep_type + 1);
    40ea:	3101      	adds	r1, #1
    40ec:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	ept->ep       = ep;
    40f0:	f883 00c6 	strb.w	r0, [r3, #198]	; 0xc6
	return USB_OK;
    40f4:	2000      	movs	r0, #0
    40f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    40f8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    40fc:	4e29      	ldr	r6, [pc, #164]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    40fe:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4102:	686d      	ldr	r5, [r5, #4]
    4104:	b935      	cbnz	r5, 4114 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    410a:	4d26      	ldr	r5, [pc, #152]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    410c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4110:	685f      	ldr	r7, [r3, #4]
    4112:	e7e1      	b.n	40d8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4114:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4118:	4e22      	ldr	r6, [pc, #136]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    411a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    411e:	896d      	ldrh	r5, [r5, #10]
    4120:	4295      	cmp	r5, r2
    4122:	daf0      	bge.n	4106 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    4124:	f06f 0012 	mvn.w	r0, #18
    4128:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    412a:	f06f 0013 	mvn.w	r0, #19
    412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4130:	f06f 0013 	mvn.w	r0, #19
    4134:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    4136:	f06f 0012 	mvn.w	r0, #18
    413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    413c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    4140:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4142:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    4144:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    4148:	4f17      	ldr	r7, [pc, #92]	; (41a8 <_usb_d_dev_ep_init+0x114>)
    414a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    414e:	f896 60c6 	ldrb.w	r6, [r6, #198]	; 0xc6
    4152:	2eff      	cmp	r6, #255	; 0xff
    4154:	d1e9      	bne.n	412a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4156:	2900      	cmp	r1, #0
    4158:	d1af      	bne.n	40ba <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    415a:	b125      	cbz	r5, 4166 <_usb_d_dev_ep_init+0xd2>
    415c:	f1be 0f00 	cmp.w	lr, #0
    4160:	bfa4      	itt	ge
    4162:	3504      	addge	r5, #4
    4164:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    4166:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    416a:	4e0f      	ldr	r6, [pc, #60]	; (41a8 <_usb_d_dev_ep_init+0x114>)
    416c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4170:	f895 50c6 	ldrb.w	r5, [r5, #198]	; 0xc6
    4174:	2dff      	cmp	r5, #255	; 0xff
    4176:	d1db      	bne.n	4130 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    4178:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    417c:	4e09      	ldr	r6, [pc, #36]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    417e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4182:	2d00      	cmp	r5, #0
    4184:	d0d7      	beq.n	4136 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4186:	f1be 0f00 	cmp.w	lr, #0
    418a:	dbb5      	blt.n	40f8 <_usb_d_dev_ep_init+0x64>
    418c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4190:	4e04      	ldr	r6, [pc, #16]	; (41a4 <_usb_d_dev_ep_init+0x110>)
    4192:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4196:	892d      	ldrh	r5, [r5, #8]
    4198:	4295      	cmp	r5, r2
    419a:	da98      	bge.n	40ce <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    419c:	f06f 0012 	mvn.w	r0, #18
    41a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41a2:	bf00      	nop
    41a4:	00005f58 	.word	0x00005f58
    41a8:	200001f4 	.word	0x200001f4

000041ac <_usb_d_dev_ep_deinit>:
{
    41ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ae:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    41b0:	f010 060f 	ands.w	r6, r0, #15
    41b4:	d00e      	beq.n	41d4 <_usb_d_dev_ep_deinit+0x28>
    41b6:	2f00      	cmp	r7, #0
    41b8:	bfb4      	ite	lt
    41ba:	1d33      	addlt	r3, r6, #4
    41bc:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    41be:	2e04      	cmp	r6, #4
    41c0:	d900      	bls.n	41c4 <_usb_d_dev_ep_deinit+0x18>
    41c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    41c4:	461d      	mov	r5, r3
    41c6:	3301      	adds	r3, #1
    41c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    41cc:	4a24      	ldr	r2, [pc, #144]	; (4260 <_usb_d_dev_ep_deinit+0xb4>)
    41ce:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    41d2:	e002      	b.n	41da <_usb_d_dev_ep_deinit+0x2e>
    41d4:	f8df e094 	ldr.w	lr, [pc, #148]	; 426c <_usb_d_dev_ep_deinit+0xc0>
    41d8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    41da:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    41de:	4a21      	ldr	r2, [pc, #132]	; (4264 <_usb_d_dev_ep_deinit+0xb8>)
    41e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    41e4:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
    41e8:	2aff      	cmp	r2, #255	; 0xff
    41ea:	d0ea      	beq.n	41c2 <_usb_d_dev_ep_deinit+0x16>
    41ec:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    41ee:	2203      	movs	r2, #3
    41f0:	0ff9      	lsrs	r1, r7, #31
    41f2:	4670      	mov	r0, lr
    41f4:	4b1c      	ldr	r3, [pc, #112]	; (4268 <_usb_d_dev_ep_deinit+0xbc>)
    41f6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    41f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    41fc:	4a19      	ldr	r2, [pc, #100]	; (4264 <_usb_d_dev_ep_deinit+0xb8>)
    41fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4202:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    4206:	f003 0307 	and.w	r3, r3, #7
    420a:	2b01      	cmp	r3, #1
    420c:	d016      	beq.n	423c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    420e:	2f00      	cmp	r7, #0
    4210:	db1b      	blt.n	424a <_usb_d_dev_ep_deinit+0x9e>
    4212:	0160      	lsls	r0, r4, #5
    4214:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4218:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    421c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4220:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    4224:	4b0f      	ldr	r3, [pc, #60]	; (4264 <_usb_d_dev_ep_deinit+0xb8>)
    4226:	00aa      	lsls	r2, r5, #2
    4228:	1951      	adds	r1, r2, r5
    422a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    422e:	2000      	movs	r0, #0
    4230:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
	ept->ep       = 0xFF;
    4234:	22ff      	movs	r2, #255	; 0xff
    4236:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    423a:	e7c2      	b.n	41c2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    423c:	0160      	lsls	r0, r4, #5
    423e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4242:	2300      	movs	r3, #0
    4244:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    4248:	e7ec      	b.n	4224 <_usb_d_dev_ep_deinit+0x78>
    424a:	0176      	lsls	r6, r6, #5
    424c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4250:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    4254:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    4258:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    425c:	e7e2      	b.n	4224 <_usb_d_dev_ep_deinit+0x78>
    425e:	bf00      	nop
    4260:	20000294 	.word	0x20000294
    4264:	200001f4 	.word	0x200001f4
    4268:	00003735 	.word	0x00003735
    426c:	200002a8 	.word	0x200002a8

00004270 <_usb_d_dev_ep_enable>:
{
    4270:	b5f0      	push	{r4, r5, r6, r7, lr}
    4272:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4274:	f010 000f 	ands.w	r0, r0, #15
    4278:	f000 80a6 	beq.w	43c8 <_usb_d_dev_ep_enable+0x158>
    427c:	2f00      	cmp	r7, #0
    427e:	bfb4      	ite	lt
    4280:	1d03      	addlt	r3, r0, #4
    4282:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4284:	4606      	mov	r6, r0
    4286:	0142      	lsls	r2, r0, #5
    4288:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    428c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    4290:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4292:	2804      	cmp	r0, #4
    4294:	f240 809f 	bls.w	43d6 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    4298:	f06f 0011 	mvn.w	r0, #17
    429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    429e:	f014 0f77 	tst.w	r4, #119	; 0x77
    42a2:	f040 8088 	bne.w	43b6 <_usb_d_dev_ep_enable+0x146>
    42a6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    42aa:	2111      	movs	r1, #17
    42ac:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    42b0:	4c97      	ldr	r4, [pc, #604]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    42b2:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    42b6:	f8b1 40c4 	ldrh.w	r4, [r1, #196]	; 0xc4
    42ba:	4996      	ldr	r1, [pc, #600]	; (4514 <_usb_d_dev_ep_enable+0x2a4>)
    42bc:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    42c0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    42c4:	f200 80cc 	bhi.w	4460 <_usb_d_dev_ep_enable+0x1f0>
    42c8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    42cc:	f200 810a 	bhi.w	44e4 <_usb_d_dev_ep_enable+0x274>
    42d0:	2c80      	cmp	r4, #128	; 0x80
    42d2:	f200 80f9 	bhi.w	44c8 <_usb_d_dev_ep_enable+0x258>
    42d6:	2c40      	cmp	r4, #64	; 0x40
    42d8:	f200 810b 	bhi.w	44f2 <_usb_d_dev_ep_enable+0x282>
    42dc:	2c20      	cmp	r4, #32
    42de:	f200 80fa 	bhi.w	44d6 <_usb_d_dev_ep_enable+0x266>
    42e2:	2c10      	cmp	r4, #16
    42e4:	f200 810c 	bhi.w	4500 <_usb_d_dev_ep_enable+0x290>
    42e8:	2c08      	cmp	r4, #8
    42ea:	bf94      	ite	ls
    42ec:	2700      	movls	r7, #0
    42ee:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    42f0:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    42f4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    42f6:	f3c4 010d 	ubfx	r1, r4, #0, #14
    42fa:	e0b7      	b.n	446c <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    42fc:	f014 0f70 	tst.w	r4, #112	; 0x70
    4300:	d15c      	bne.n	43bc <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4302:	4d83      	ldr	r5, [pc, #524]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    4304:	009f      	lsls	r7, r3, #2
    4306:	18f9      	adds	r1, r7, r3
    4308:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    430c:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
    4310:	0109      	lsls	r1, r1, #4
    4312:	f001 0170 	and.w	r1, r1, #112	; 0x70
    4316:	430c      	orrs	r4, r1
    4318:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    431c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4320:	443b      	add	r3, r7
    4322:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4326:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    432a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    432e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4332:	d80f      	bhi.n	4354 <_usb_d_dev_ep_enable+0xe4>
    4334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4338:	d819      	bhi.n	436e <_usb_d_dev_ep_enable+0xfe>
    433a:	2b80      	cmp	r3, #128	; 0x80
    433c:	d819      	bhi.n	4372 <_usb_d_dev_ep_enable+0x102>
    433e:	2b40      	cmp	r3, #64	; 0x40
    4340:	d819      	bhi.n	4376 <_usb_d_dev_ep_enable+0x106>
    4342:	2b20      	cmp	r3, #32
    4344:	d819      	bhi.n	437a <_usb_d_dev_ep_enable+0x10a>
    4346:	2b10      	cmp	r3, #16
    4348:	d819      	bhi.n	437e <_usb_d_dev_ep_enable+0x10e>
    434a:	2b08      	cmp	r3, #8
    434c:	bf94      	ite	ls
    434e:	2300      	movls	r3, #0
    4350:	2301      	movhi	r3, #1
    4352:	e000      	b.n	4356 <_usb_d_dev_ep_enable+0xe6>
    4354:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4356:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    435a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    435c:	2380      	movs	r3, #128	; 0x80
    435e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4362:	4b6b      	ldr	r3, [pc, #428]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    4364:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4368:	2000      	movs	r0, #0
    436a:	76b0      	strb	r0, [r6, #26]
    436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    436e:	2306      	movs	r3, #6
    4370:	e7f1      	b.n	4356 <_usb_d_dev_ep_enable+0xe6>
    4372:	2305      	movs	r3, #5
    4374:	e7ef      	b.n	4356 <_usb_d_dev_ep_enable+0xe6>
    4376:	2304      	movs	r3, #4
    4378:	e7ed      	b.n	4356 <_usb_d_dev_ep_enable+0xe6>
    437a:	2303      	movs	r3, #3
    437c:	e7eb      	b.n	4356 <_usb_d_dev_ep_enable+0xe6>
    437e:	2302      	movs	r3, #2
    4380:	e7e9      	b.n	4356 <_usb_d_dev_ep_enable+0xe6>
    4382:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4384:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4388:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    438a:	2340      	movs	r3, #64	; 0x40
    438c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    4390:	4b5f      	ldr	r3, [pc, #380]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    4392:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4396:	2000      	movs	r0, #0
    4398:	72b0      	strb	r0, [r6, #10]
    439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    439c:	2106      	movs	r1, #6
    439e:	e7f1      	b.n	4384 <_usb_d_dev_ep_enable+0x114>
    43a0:	2105      	movs	r1, #5
    43a2:	e7ef      	b.n	4384 <_usb_d_dev_ep_enable+0x114>
    43a4:	2104      	movs	r1, #4
    43a6:	e7ed      	b.n	4384 <_usb_d_dev_ep_enable+0x114>
    43a8:	2103      	movs	r1, #3
    43aa:	e7eb      	b.n	4384 <_usb_d_dev_ep_enable+0x114>
    43ac:	2102      	movs	r1, #2
    43ae:	e7e9      	b.n	4384 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    43b0:	f06f 0011 	mvn.w	r0, #17
    43b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    43b6:	f06f 0013 	mvn.w	r0, #19
    43ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    43bc:	f06f 0013 	mvn.w	r0, #19
    43c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    43c2:	f06f 0013 	mvn.w	r0, #19
    43c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    43c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    43cc:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    43d0:	b2e4      	uxtb	r4, r4
    43d2:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    43d4:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    43d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    43da:	494d      	ldr	r1, [pc, #308]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    43dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    43e0:	f892 50c6 	ldrb.w	r5, [r2, #198]	; 0xc6
    43e4:	2dff      	cmp	r5, #255	; 0xff
    43e6:	d0e3      	beq.n	43b0 <_usb_d_dev_ep_enable+0x140>
    43e8:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    43ea:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    43ec:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    43f0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    43f4:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
    43f8:	f001 0107 	and.w	r1, r1, #7
    43fc:	2901      	cmp	r1, #1
    43fe:	f43f af4e 	beq.w	429e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    4402:	2f00      	cmp	r7, #0
    4404:	f6ff af7a 	blt.w	42fc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    4408:	f014 0f07 	tst.w	r4, #7
    440c:	d1d9      	bne.n	43c2 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    440e:	4d40      	ldr	r5, [pc, #256]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    4410:	009f      	lsls	r7, r3, #2
    4412:	18f9      	adds	r1, r7, r3
    4414:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4418:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
    441c:	f001 0107 	and.w	r1, r1, #7
    4420:	430c      	orrs	r4, r1
    4422:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4426:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    442a:	443b      	add	r3, r7
    442c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4430:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    4434:	4b37      	ldr	r3, [pc, #220]	; (4514 <_usb_d_dev_ep_enable+0x2a4>)
    4436:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    443a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    443e:	d8a0      	bhi.n	4382 <_usb_d_dev_ep_enable+0x112>
    4440:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4444:	d8aa      	bhi.n	439c <_usb_d_dev_ep_enable+0x12c>
    4446:	2980      	cmp	r1, #128	; 0x80
    4448:	d8aa      	bhi.n	43a0 <_usb_d_dev_ep_enable+0x130>
    444a:	2940      	cmp	r1, #64	; 0x40
    444c:	d8aa      	bhi.n	43a4 <_usb_d_dev_ep_enable+0x134>
    444e:	2920      	cmp	r1, #32
    4450:	d8aa      	bhi.n	43a8 <_usb_d_dev_ep_enable+0x138>
    4452:	2910      	cmp	r1, #16
    4454:	d8aa      	bhi.n	43ac <_usb_d_dev_ep_enable+0x13c>
    4456:	2908      	cmp	r1, #8
    4458:	bf94      	ite	ls
    445a:	2100      	movls	r1, #0
    445c:	2101      	movhi	r1, #1
    445e:	e791      	b.n	4384 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4460:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4464:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4466:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    446a:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    446c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    4470:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4472:	2140      	movs	r1, #64	; 0x40
    4474:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4478:	2080      	movs	r0, #128	; 0x80
    447a:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    447e:	4a24      	ldr	r2, [pc, #144]	; (4510 <_usb_d_dev_ep_enable+0x2a0>)
    4480:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    4484:	2000      	movs	r0, #0
    4486:	72b0      	strb	r0, [r6, #10]
    4488:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    448a:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    448e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4496:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
	bank->ADDR.reg          = addr;
    449a:	016d      	lsls	r5, r5, #5
    449c:	1953      	adds	r3, r2, r5
    449e:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    44a0:	685a      	ldr	r2, [r3, #4]
    44a2:	f364 329b 	bfi	r2, r4, #14, #14
    44a6:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    44a8:	685a      	ldr	r2, [r3, #4]
    44aa:	f360 020d 	bfi	r2, r0, #0, #14
    44ae:	605a      	str	r2, [r3, #4]
    44b0:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    44b4:	22b0      	movs	r2, #176	; 0xb0
    44b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    44ba:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    44be:	461d      	mov	r5, r3
    44c0:	2310      	movs	r3, #16
    44c2:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    44c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44c8:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    44cc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44ce:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    44d2:	2705      	movs	r7, #5
    44d4:	e7ca      	b.n	446c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44d6:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    44da:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44dc:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    44e0:	2703      	movs	r7, #3
    44e2:	e7c3      	b.n	446c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44e4:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    44e8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44ea:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    44ee:	2706      	movs	r7, #6
    44f0:	e7bc      	b.n	446c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    44f6:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    44f8:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    44fc:	2704      	movs	r7, #4
    44fe:	e7b5      	b.n	446c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4500:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4504:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4506:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    450a:	2702      	movs	r7, #2
    450c:	e7ae      	b.n	446c <_usb_d_dev_ep_enable+0x1fc>
    450e:	bf00      	nop
    4510:	200001f4 	.word	0x200001f4
    4514:	0fffc000 	.word	0x0fffc000

00004518 <_usb_d_dev_ep_stall>:
{
    4518:	b470      	push	{r4, r5, r6}
    451a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    451c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    451e:	f010 000f 	ands.w	r0, r0, #15
    4522:	d008      	beq.n	4536 <_usb_d_dev_ep_stall+0x1e>
    4524:	2b00      	cmp	r3, #0
    4526:	bfb4      	ite	lt
    4528:	1d03      	addlt	r3, r0, #4
    452a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    452c:	2804      	cmp	r0, #4
    452e:	d903      	bls.n	4538 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4530:	f06f 0011 	mvn.w	r0, #17
    4534:	e018      	b.n	4568 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    4536:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    4538:	2901      	cmp	r1, #1
    453a:	d017      	beq.n	456c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    453c:	2900      	cmp	r1, #0
    453e:	d03a      	beq.n	45b6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4540:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4544:	4a45      	ldr	r2, [pc, #276]	; (465c <_usb_d_dev_ep_stall+0x144>)
    4546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    454a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    454e:	f003 030f 	and.w	r3, r3, #15
    4552:	015b      	lsls	r3, r3, #5
    4554:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4558:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    455c:	2310      	movs	r3, #16
    455e:	40a3      	lsls	r3, r4
    4560:	421a      	tst	r2, r3
    4562:	bf14      	ite	ne
    4564:	2001      	movne	r0, #1
    4566:	2000      	moveq	r0, #0
}
    4568:	bc70      	pop	{r4, r5, r6}
    456a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    456c:	2510      	movs	r5, #16
    456e:	40a5      	lsls	r5, r4
    4570:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4572:	493a      	ldr	r1, [pc, #232]	; (465c <_usb_d_dev_ep_stall+0x144>)
    4574:	009e      	lsls	r6, r3, #2
    4576:	18f2      	adds	r2, r6, r3
    4578:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    457c:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4580:	f002 020f 	and.w	r2, r2, #15
    4584:	0150      	lsls	r0, r2, #5
    4586:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    458a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    458e:	2020      	movs	r0, #32
    4590:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4594:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4596:	0152      	lsls	r2, r2, #5
    4598:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    459c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    45a0:	4433      	add	r3, r6
    45a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    45a6:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
    45aa:	f042 0208 	orr.w	r2, r2, #8
    45ae:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    45b2:	2000      	movs	r0, #0
    45b4:	e7d8      	b.n	4568 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    45b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    45ba:	4928      	ldr	r1, [pc, #160]	; (465c <_usb_d_dev_ep_stall+0x144>)
    45bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    45c0:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
    45c4:	f002 020f 	and.w	r2, r2, #15
    45c8:	0151      	lsls	r1, r2, #5
    45ca:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    45ce:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    45d2:	2010      	movs	r0, #16
    45d4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    45d6:	4205      	tst	r5, r0
    45d8:	d03c      	beq.n	4654 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    45da:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    45dc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    45e0:	2020      	movs	r0, #32
    45e2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    45e4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    45e6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    45ea:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    45ee:	4202      	tst	r2, r0
    45f0:	d007      	beq.n	4602 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    45f2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    45f6:	2201      	movs	r2, #1
    45f8:	fa02 f404 	lsl.w	r4, r2, r4
    45fc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    45fe:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4602:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4606:	4815      	ldr	r0, [pc, #84]	; (465c <_usb_d_dev_ep_stall+0x144>)
    4608:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    460c:	f892 20c7 	ldrb.w	r2, [r2, #199]	; 0xc7
    4610:	f002 0207 	and.w	r2, r2, #7
    4614:	2a01      	cmp	r2, #1
    4616:	d00c      	beq.n	4632 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    4618:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    461c:	4a0f      	ldr	r2, [pc, #60]	; (465c <_usb_d_dev_ep_stall+0x144>)
    461e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4622:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
    4626:	f36f 02c3 	bfc	r2, #3, #1
    462a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    462e:	2000      	movs	r0, #0
    4630:	e79a      	b.n	4568 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4632:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4636:	f012 0f30 	tst.w	r2, #48	; 0x30
    463a:	d10d      	bne.n	4658 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    463c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4640:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    4644:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
    4648:	f36f 02c3 	bfc	r2, #3, #1
    464c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4650:	2000      	movs	r0, #0
    4652:	e789      	b.n	4568 <_usb_d_dev_ep_stall+0x50>
    4654:	2000      	movs	r0, #0
    4656:	e787      	b.n	4568 <_usb_d_dev_ep_stall+0x50>
    4658:	2000      	movs	r0, #0
    465a:	e785      	b.n	4568 <_usb_d_dev_ep_stall+0x50>
    465c:	200001f4 	.word	0x200001f4

00004660 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4660:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    4662:	f000 040f 	and.w	r4, r0, #15
    4666:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4668:	4a14      	ldr	r2, [pc, #80]	; (46bc <_usb_d_dev_ep_read_req+0x5c>)
    466a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    466c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    466e:	6840      	ldr	r0, [r0, #4]
    4670:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4674:	2c04      	cmp	r4, #4
    4676:	d817      	bhi.n	46a8 <_usb_d_dev_ep_read_req+0x48>
    4678:	b1c9      	cbz	r1, 46ae <_usb_d_dev_ep_read_req+0x4e>
    467a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    467e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    4682:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4684:	2a11      	cmp	r2, #17
    4686:	d115      	bne.n	46b4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4688:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    468c:	f012 0f10 	tst.w	r2, #16
    4690:	d102      	bne.n	4698 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    4692:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4694:	bc30      	pop	{r4, r5}
    4696:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    4698:	682c      	ldr	r4, [r5, #0]
    469a:	686a      	ldr	r2, [r5, #4]
    469c:	600c      	str	r4, [r1, #0]
    469e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    46a0:	2210      	movs	r2, #16
    46a2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    46a6:	e7f5      	b.n	4694 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    46a8:	f06f 0011 	mvn.w	r0, #17
    46ac:	e7f2      	b.n	4694 <_usb_d_dev_ep_read_req+0x34>
    46ae:	f06f 0011 	mvn.w	r0, #17
    46b2:	e7ef      	b.n	4694 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    46b4:	f06f 0012 	mvn.w	r0, #18
    46b8:	e7ec      	b.n	4694 <_usb_d_dev_ep_read_req+0x34>
    46ba:	bf00      	nop
    46bc:	200001f4 	.word	0x200001f4

000046c0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    46c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46c4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    46c6:	7a03      	ldrb	r3, [r0, #8]
    46c8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    46ca:	f013 030f 	ands.w	r3, r3, #15
    46ce:	f000 80c2 	beq.w	4856 <_usb_d_dev_ep_trans+0x196>
    46d2:	2e00      	cmp	r6, #0
    46d4:	bfb4      	ite	lt
    46d6:	1d1a      	addlt	r2, r3, #4
    46d8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    46da:	4614      	mov	r4, r2
    46dc:	4969      	ldr	r1, [pc, #420]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    46de:	f101 07a0 	add.w	r7, r1, #160	; 0xa0
    46e2:	1c55      	adds	r5, r2, #1
    46e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    46e8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    46ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    46f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    46f4:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
    46f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    46fc:	428a      	cmp	r2, r1
    46fe:	d025      	beq.n	474c <_usb_d_dev_ep_trans+0x8c>
    4700:	1e55      	subs	r5, r2, #1
    4702:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    4704:	6841      	ldr	r1, [r0, #4]
    4706:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4708:	2b04      	cmp	r3, #4
    470a:	f200 8092 	bhi.w	4832 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    470e:	6803      	ldr	r3, [r0, #0]
    4710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4714:	d31c      	bcc.n	4750 <_usb_d_dev_ep_trans+0x90>
    4716:	eb03 0c01 	add.w	ip, r3, r1
    471a:	f8df e180 	ldr.w	lr, [pc, #384]	; 489c <_usb_d_dev_ep_trans+0x1dc>
    471e:	45f4      	cmp	ip, lr
    4720:	d816      	bhi.n	4750 <_usb_d_dev_ep_trans+0x90>
    4722:	f013 0f03 	tst.w	r3, #3
    4726:	d113      	bne.n	4750 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    4728:	2e00      	cmp	r6, #0
    472a:	db2a      	blt.n	4782 <_usb_d_dev_ep_trans+0xc2>
    472c:	428a      	cmp	r2, r1
    472e:	f200 809c 	bhi.w	486a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    4732:	b34d      	cbz	r5, 4788 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    4734:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4738:	4a52      	ldr	r2, [pc, #328]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    473a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    473e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    4742:	2b00      	cmp	r3, #0
    4744:	d07b      	beq.n	483e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    4746:	f04f 0800 	mov.w	r8, #0
    474a:	e00c      	b.n	4766 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    474c:	4615      	mov	r5, r2
    474e:	e7d9      	b.n	4704 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    4750:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4754:	4a4b      	ldr	r2, [pc, #300]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    4756:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    475a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    475e:	2b00      	cmp	r3, #0
    4760:	d06a      	beq.n	4838 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    4762:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    4766:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    476a:	4a46      	ldr	r2, [pc, #280]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    476c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4770:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    4774:	f013 0f08 	tst.w	r3, #8
    4778:	d009      	beq.n	478e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    477a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    477c:	b003      	add	sp, #12
    477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    4782:	f04f 0800 	mov.w	r8, #0
    4786:	e7ee      	b.n	4766 <_usb_d_dev_ep_trans+0xa6>
    4788:	f04f 0800 	mov.w	r8, #0
    478c:	e7eb      	b.n	4766 <_usb_d_dev_ep_trans+0xa6>
    478e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    4790:	a801      	add	r0, sp, #4
    4792:	4b3d      	ldr	r3, [pc, #244]	; (4888 <_usb_d_dev_ep_trans+0x1c8>)
    4794:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    4796:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    479a:	4a3a      	ldr	r2, [pc, #232]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    479c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47a0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
    47a4:	f013 0f40 	tst.w	r3, #64	; 0x40
    47a8:	d13c      	bne.n	4824 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    47aa:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    47ae:	4b35      	ldr	r3, [pc, #212]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    47b0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    47b4:	f899 30c7 	ldrb.w	r3, [r9, #199]	; 0xc7
    47b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    47bc:	f889 30c7 	strb.w	r3, [r9, #199]	; 0xc7
	atomic_leave_critical(&flags);
    47c0:	a801      	add	r0, sp, #4
    47c2:	4b32      	ldr	r3, [pc, #200]	; (488c <_usb_d_dev_ep_trans+0x1cc>)
    47c4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    47c6:	f8da 3000 	ldr.w	r3, [sl]
    47ca:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
	ept->trans_size  = trans->size;
    47ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    47d2:	f8c9 30b8 	str.w	r3, [r9, #184]	; 0xb8
	ept->trans_count = 0;
    47d6:	2300      	movs	r3, #0
    47d8:	f8c9 30bc 	str.w	r3, [r9, #188]	; 0xbc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    47dc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    47de:	f899 30c7 	ldrb.w	r3, [r9, #199]	; 0xc7
    47e2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    47e6:	f368 1345 	bfi	r3, r8, #5, #1
    47ea:	f889 30c7 	strb.w	r3, [r9, #199]	; 0xc7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    47ee:	f89a 3009 	ldrb.w	r3, [sl, #9]
    47f2:	b1e3      	cbz	r3, 482e <_usb_d_dev_ep_trans+0x16e>
    47f4:	fab5 f585 	clz	r5, r5
    47f8:	096d      	lsrs	r5, r5, #5
    47fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    47fe:	4b21      	ldr	r3, [pc, #132]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    4800:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4804:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
    4808:	f365 1304 	bfi	r3, r5, #4, #1
    480c:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	if (dir) {
    4810:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    4812:	f04f 0100 	mov.w	r1, #0
    4816:	4638      	mov	r0, r7
    4818:	bfb4      	ite	lt
    481a:	4b1d      	ldrlt	r3, [pc, #116]	; (4890 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    481c:	4b1d      	ldrge	r3, [pc, #116]	; (4894 <_usb_d_dev_ep_trans+0x1d4>)
    481e:	4798      	blx	r3
	return ERR_NONE;
    4820:	2000      	movs	r0, #0
    4822:	e7ab      	b.n	477c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    4824:	a801      	add	r0, sp, #4
    4826:	4b19      	ldr	r3, [pc, #100]	; (488c <_usb_d_dev_ep_trans+0x1cc>)
    4828:	4798      	blx	r3
		return USB_BUSY;
    482a:	2001      	movs	r0, #1
    482c:	e7a6      	b.n	477c <_usb_d_dev_ep_trans+0xbc>
    482e:	2500      	movs	r5, #0
    4830:	e7e3      	b.n	47fa <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    4832:	f06f 0011 	mvn.w	r0, #17
    4836:	e7a1      	b.n	477c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4838:	f06f 0012 	mvn.w	r0, #18
    483c:	e79e      	b.n	477c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    483e:	f06f 0011 	mvn.w	r0, #17
    4842:	e79b      	b.n	477c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    4844:	f06f 0012 	mvn.w	r0, #18
    4848:	e798      	b.n	477c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    484a:	6841      	ldr	r1, [r0, #4]
    484c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    4850:	4f11      	ldr	r7, [pc, #68]	; (4898 <_usb_d_dev_ep_trans+0x1d8>)
    4852:	2400      	movs	r4, #0
    4854:	e75b      	b.n	470e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4856:	4a0b      	ldr	r2, [pc, #44]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    4858:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
    485c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4860:	428a      	cmp	r2, r1
    4862:	d0f2      	beq.n	484a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    4864:	4f0c      	ldr	r7, [pc, #48]	; (4898 <_usb_d_dev_ep_trans+0x1d8>)
    4866:	2400      	movs	r4, #0
    4868:	e74a      	b.n	4700 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    486a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    486e:	4a05      	ldr	r2, [pc, #20]	; (4884 <_usb_d_dev_ep_trans+0x1c4>)
    4870:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4874:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    4878:	2b00      	cmp	r3, #0
    487a:	d0e3      	beq.n	4844 <_usb_d_dev_ep_trans+0x184>
    487c:	f04f 0801 	mov.w	r8, #1
    4880:	e771      	b.n	4766 <_usb_d_dev_ep_trans+0xa6>
    4882:	bf00      	nop
    4884:	200001f4 	.word	0x200001f4
    4888:	00000ed9 	.word	0x00000ed9
    488c:	00000ee7 	.word	0x00000ee7
    4890:	000038e5 	.word	0x000038e5
    4894:	00003a69 	.word	0x00003a69
    4898:	200002a8 	.word	0x200002a8
    489c:	20041fff 	.word	0x20041fff

000048a0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    48a0:	4b07      	ldr	r3, [pc, #28]	; (48c0 <_usb_d_dev_register_callback+0x20>)
    48a2:	2900      	cmp	r1, #0
    48a4:	bf08      	it	eq
    48a6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    48a8:	2801      	cmp	r0, #1
    48aa:	d004      	beq.n	48b6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    48ac:	b910      	cbnz	r0, 48b4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    48ae:	4b05      	ldr	r3, [pc, #20]	; (48c4 <_usb_d_dev_register_callback+0x24>)
    48b0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    48b4:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    48b6:	4b03      	ldr	r3, [pc, #12]	; (48c4 <_usb_d_dev_register_callback+0x24>)
    48b8:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
    48bc:	4770      	bx	lr
    48be:	bf00      	nop
    48c0:	00003655 	.word	0x00003655
    48c4:	200001f4 	.word	0x200001f4

000048c8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    48c8:	4b0a      	ldr	r3, [pc, #40]	; (48f4 <_usb_d_dev_register_ep_callback+0x2c>)
    48ca:	2900      	cmp	r1, #0
    48cc:	bf08      	it	eq
    48ce:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    48d0:	4603      	mov	r3, r0
    48d2:	b138      	cbz	r0, 48e4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    48d4:	2801      	cmp	r0, #1
    48d6:	d009      	beq.n	48ec <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    48d8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    48da:	bf04      	itt	eq
    48dc:	4b06      	ldreq	r3, [pc, #24]	; (48f8 <_usb_d_dev_register_ep_callback+0x30>)
    48de:	f8c3 10b0 	streq.w	r1, [r3, #176]	; 0xb0
    48e2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    48e4:	4b04      	ldr	r3, [pc, #16]	; (48f8 <_usb_d_dev_register_ep_callback+0x30>)
    48e6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    48ea:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    48ec:	4b02      	ldr	r3, [pc, #8]	; (48f8 <_usb_d_dev_register_ep_callback+0x30>)
    48ee:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    48f2:	4770      	bx	lr
    48f4:	00003655 	.word	0x00003655
    48f8:	200001f4 	.word	0x200001f4

000048fc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    48fc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    48fe:	4b01      	ldr	r3, [pc, #4]	; (4904 <USB_0_Handler+0x8>)
    4900:	4798      	blx	r3
    4902:	bd08      	pop	{r3, pc}
    4904:	00003c59 	.word	0x00003c59

00004908 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    4908:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    490a:	4b01      	ldr	r3, [pc, #4]	; (4910 <USB_1_Handler+0x8>)
    490c:	4798      	blx	r3
    490e:	bd08      	pop	{r3, pc}
    4910:	00003c59 	.word	0x00003c59

00004914 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    4914:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4916:	4b01      	ldr	r3, [pc, #4]	; (491c <USB_2_Handler+0x8>)
    4918:	4798      	blx	r3
    491a:	bd08      	pop	{r3, pc}
    491c:	00003c59 	.word	0x00003c59

00004920 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    4920:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    4922:	4b01      	ldr	r3, [pc, #4]	; (4928 <USB_3_Handler+0x8>)
    4924:	4798      	blx	r3
    4926:	bd08      	pop	{r3, pc}
    4928:	00003c59 	.word	0x00003c59

0000492c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    492c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    492e:	4604      	mov	r4, r0
    4930:	b340      	cbz	r0, 4984 <_wdt_init+0x58>
    4932:	6800      	ldr	r0, [r0, #0]
    4934:	3000      	adds	r0, #0
    4936:	bf18      	it	ne
    4938:	2001      	movne	r0, #1
    493a:	2250      	movs	r2, #80	; 0x50
    493c:	4915      	ldr	r1, [pc, #84]	; (4994 <_wdt_init+0x68>)
    493e:	4b16      	ldr	r3, [pc, #88]	; (4998 <_wdt_init+0x6c>)
    4940:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4942:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4944:	689a      	ldr	r2, [r3, #8]
    4946:	f012 0f0e 	tst.w	r2, #14
    494a:	d1fb      	bne.n	4944 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    494c:	781a      	ldrb	r2, [r3, #0]
    494e:	09d2      	lsrs	r2, r2, #7
    4950:	d11a      	bne.n	4988 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4952:	689a      	ldr	r2, [r3, #8]
    4954:	f012 0f0e 	tst.w	r2, #14
    4958:	d1fb      	bne.n	4952 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    495a:	781a      	ldrb	r2, [r3, #0]
    495c:	f012 0f02 	tst.w	r2, #2
    4960:	d115      	bne.n	498e <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    4962:	781a      	ldrb	r2, [r3, #0]
    4964:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4968:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    496a:	689a      	ldr	r2, [r3, #8]
    496c:	f012 0f0e 	tst.w	r2, #14
    4970:	d1fb      	bne.n	496a <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    4972:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4974:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    497a:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    497e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    4980:	2000      	movs	r0, #0
    4982:	bd10      	pop	{r4, pc}
    4984:	2000      	movs	r0, #0
    4986:	e7d8      	b.n	493a <_wdt_init+0xe>
		return ERR_DENIED;
    4988:	f06f 0010 	mvn.w	r0, #16
    498c:	bd10      	pop	{r4, pc}
    498e:	f06f 0010 	mvn.w	r0, #16
}
    4992:	bd10      	pop	{r4, pc}
    4994:	00005f94 	.word	0x00005f94
    4998:	00001c91 	.word	0x00001c91

0000499c <main>:
#include <atmel_start.h>

int main(void)
{
    499c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    499e:	4b01      	ldr	r3, [pc, #4]	; (49a4 <main+0x8>)
    49a0:	4798      	blx	r3
    49a2:	e7fe      	b.n	49a2 <main+0x6>
    49a4:	000002d1 	.word	0x000002d1

000049a8 <n25q256a_read>:
	n25q256a_switch_mode(me, quad_mode);
	return me;
}

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    49a8:	b570      	push	{r4, r5, r6, lr}
    49aa:	b086      	sub	sp, #24
	struct n25q256a *            n25q  = (struct n25q256a *)me;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    49ac:	6806      	ldr	r6, [r0, #0]

	struct _qspi_command cmd = {
    49ae:	2400      	movs	r4, #0
    49b0:	9400      	str	r4, [sp, #0]
    49b2:	9401      	str	r4, [sp, #4]
    49b4:	9404      	str	r4, [sp, #16]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    49b6:	7b00      	ldrb	r0, [r0, #12]
    49b8:	bb10      	cbnz	r0, 4a00 <n25q256a_read+0x58>
	struct _qspi_command cmd = {
    49ba:	f89d 4000 	ldrb.w	r4, [sp]
    49be:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
    49c2:	f044 04b0 	orr.w	r4, r4, #176	; 0xb0
    49c6:	f88d 4000 	strb.w	r4, [sp]
    49ca:	f89d 0001 	ldrb.w	r0, [sp, #1]
    49ce:	2401      	movs	r4, #1
    49d0:	f364 1005 	bfi	r0, r4, #4, #2
    49d4:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    49d8:	2508      	movs	r5, #8
	struct _qspi_command cmd = {
    49da:	f89d 4002 	ldrb.w	r4, [sp, #2]
    49de:	f365 0404 	bfi	r4, r5, #0, #5
    49e2:	f88d 4002 	strb.w	r4, [sp, #2]
    49e6:	200b      	movs	r0, #11
    49e8:	f88d 0004 	strb.w	r0, [sp, #4]
    49ec:	9202      	str	r2, [sp, #8]
    49ee:	9303      	str	r3, [sp, #12]
    49f0:	9105      	str	r1, [sp, #20]
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    49f2:	4669      	mov	r1, sp
    49f4:	4630      	mov	r0, r6
    49f6:	4b0b      	ldr	r3, [pc, #44]	; (4a24 <n25q256a_read+0x7c>)
    49f8:	4798      	blx	r3
	return ERR_NONE;
}
    49fa:	2000      	movs	r0, #0
    49fc:	b006      	add	sp, #24
    49fe:	bd70      	pop	{r4, r5, r6, pc}
	struct _qspi_command cmd = {
    4a00:	f89d 4000 	ldrb.w	r4, [sp]
    4a04:	2006      	movs	r0, #6
    4a06:	f360 0402 	bfi	r4, r0, #0, #3
    4a0a:	f064 044f 	orn	r4, r4, #79	; 0x4f
    4a0e:	f88d 4000 	strb.w	r4, [sp]
    4a12:	f89d 0001 	ldrb.w	r0, [sp, #1]
    4a16:	2401      	movs	r4, #1
    4a18:	f364 1005 	bfi	r0, r4, #4, #2
    4a1c:	f88d 0001 	strb.w	r0, [sp, #1]
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    4a20:	250a      	movs	r5, #10
    4a22:	e7da      	b.n	49da <n25q256a_read+0x32>
    4a24:	00001261 	.word	0x00001261

00004a28 <n25q256a_xip_confirm>:
{
    4a28:	b530      	push	{r4, r5, lr}
    4a2a:	b089      	sub	sp, #36	; 0x24
    4a2c:	4604      	mov	r4, r0
    4a2e:	460d      	mov	r5, r1
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    4a30:	6800      	ldr	r0, [r0, #0]
	struct _qspi_command         cmd
    4a32:	2300      	movs	r3, #0
    4a34:	9301      	str	r3, [sp, #4]
    4a36:	9302      	str	r3, [sp, #8]
    4a38:	9303      	str	r3, [sp, #12]
    4a3a:	9305      	str	r3, [sp, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    4a3c:	7b23      	ldrb	r3, [r4, #12]
    4a3e:	bb7b      	cbnz	r3, 4aa0 <n25q256a_xip_confirm+0x78>
	struct _qspi_command         cmd
    4a40:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4a44:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4a48:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    4a4c:	f88d 3004 	strb.w	r3, [sp, #4]
    4a50:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4a54:	f043 0303 	orr.w	r3, r3, #3
    4a58:	2201      	movs	r2, #1
    4a5a:	f362 1305 	bfi	r3, r2, #4, #2
    4a5e:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    4a62:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    4a64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    4a68:	f362 0304 	bfi	r3, r2, #0, #5
    4a6c:	f88d 3006 	strb.w	r3, [sp, #6]
    4a70:	230b      	movs	r3, #11
    4a72:	f88d 3008 	strb.w	r3, [sp, #8]
    4a76:	f085 0301 	eor.w	r3, r5, #1
    4a7a:	425b      	negs	r3, r3
    4a7c:	f88d 3009 	strb.w	r3, [sp, #9]
    4a80:	2301      	movs	r3, #1
    4a82:	9304      	str	r3, [sp, #16]
    4a84:	f10d 031f 	add.w	r3, sp, #31
    4a88:	9306      	str	r3, [sp, #24]
	qspi_sync_serial_run_command(descr, &cmd);
    4a8a:	a901      	add	r1, sp, #4
    4a8c:	4b0e      	ldr	r3, [pc, #56]	; (4ac8 <n25q256a_xip_confirm+0xa0>)
    4a8e:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    4a90:	2d00      	cmp	r5, #0
    4a92:	bf14      	ite	ne
    4a94:	2302      	movne	r3, #2
    4a96:	2301      	moveq	r3, #1
    4a98:	7363      	strb	r3, [r4, #13]
}
    4a9a:	2000      	movs	r0, #0
    4a9c:	b009      	add	sp, #36	; 0x24
    4a9e:	bd30      	pop	{r4, r5, pc}
	struct _qspi_command         cmd
    4aa0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4aa4:	2206      	movs	r2, #6
    4aa6:	f362 0302 	bfi	r3, r2, #0, #3
    4aaa:	f063 030f 	orn	r3, r3, #15
    4aae:	f88d 3004 	strb.w	r3, [sp, #4]
    4ab2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4ab6:	f043 0303 	orr.w	r3, r3, #3
    4aba:	2201      	movs	r2, #1
    4abc:	f362 1305 	bfi	r3, r2, #4, #2
    4ac0:	f88d 3005 	strb.w	r3, [sp, #5]
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    4ac4:	2208      	movs	r2, #8
    4ac6:	e7cd      	b.n	4a64 <n25q256a_xip_confirm+0x3c>
    4ac8:	00001261 	.word	0x00001261

00004acc <n25q256a_read_reg>:
{
    4acc:	b530      	push	{r4, r5, lr}
    4ace:	b089      	sub	sp, #36	; 0x24
    4ad0:	4604      	mov	r4, r0
	uint32_t                     status = 0;
    4ad2:	2300      	movs	r3, #0
    4ad4:	9307      	str	r3, [sp, #28]
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    4ad6:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    4ad8:	9301      	str	r3, [sp, #4]
    4ada:	9302      	str	r3, [sp, #8]
    4adc:	9303      	str	r3, [sp, #12]
    4ade:	9305      	str	r3, [sp, #20]
    4ae0:	f001 0107 	and.w	r1, r1, #7
    4ae4:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    4ae8:	f88d 1004 	strb.w	r1, [sp, #4]
    4aec:	f88d 2008 	strb.w	r2, [sp, #8]
    4af0:	2301      	movs	r3, #1
    4af2:	9304      	str	r3, [sp, #16]
    4af4:	ab07      	add	r3, sp, #28
    4af6:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
    4af8:	7b43      	ldrb	r3, [r0, #13]
    4afa:	b943      	cbnz	r3, 4b0e <n25q256a_read_reg+0x42>
	qspi_sync_serial_run_command(descr, &cmd);
    4afc:	a901      	add	r1, sp, #4
    4afe:	4628      	mov	r0, r5
    4b00:	4b07      	ldr	r3, [pc, #28]	; (4b20 <n25q256a_read_reg+0x54>)
    4b02:	4798      	blx	r3
	if (n25q->xip_mode) {
    4b04:	7b63      	ldrb	r3, [r4, #13]
    4b06:	b933      	cbnz	r3, 4b16 <n25q256a_read_reg+0x4a>
}
    4b08:	9807      	ldr	r0, [sp, #28]
    4b0a:	b009      	add	sp, #36	; 0x24
    4b0c:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
    4b0e:	2100      	movs	r1, #0
    4b10:	4b04      	ldr	r3, [pc, #16]	; (4b24 <n25q256a_read_reg+0x58>)
    4b12:	4798      	blx	r3
    4b14:	e7f2      	b.n	4afc <n25q256a_read_reg+0x30>
		n25q256a_xip_confirm(me, true);
    4b16:	2101      	movs	r1, #1
    4b18:	4620      	mov	r0, r4
    4b1a:	4b02      	ldr	r3, [pc, #8]	; (4b24 <n25q256a_read_reg+0x58>)
    4b1c:	4798      	blx	r3
    4b1e:	e7f3      	b.n	4b08 <n25q256a_read_reg+0x3c>
    4b20:	00001261 	.word	0x00001261
    4b24:	00004a29 	.word	0x00004a29

00004b28 <n25q256a_disable_xip>:
	}
	return ERR_NONE;
}

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    4b28:	b570      	push	{r4, r5, r6, lr}
    4b2a:	4604      	mov	r4, r0
	struct n25q256a *            n25q  = (struct n25q256a *)me;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    4b2c:	6806      	ldr	r6, [r0, #0]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    4b2e:	7b05      	ldrb	r5, [r0, #12]
    4b30:	2d00      	cmp	r5, #0
    4b32:	bf18      	it	ne
    4b34:	2506      	movne	r5, #6
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    4b36:	2100      	movs	r1, #0
    4b38:	4b0d      	ldr	r3, [pc, #52]	; (4b70 <n25q256a_disable_xip+0x48>)
    4b3a:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    4b3c:	2285      	movs	r2, #133	; 0x85
    4b3e:	4629      	mov	r1, r5
    4b40:	4620      	mov	r0, r4
    4b42:	4b0c      	ldr	r3, [pc, #48]	; (4b74 <n25q256a_disable_xip+0x4c>)
    4b44:	4798      	blx	r3
	if (!(vcfg & (1u << 3))) {
    4b46:	f010 0f08 	tst.w	r0, #8
    4b4a:	d10e      	bne.n	4b6a <n25q256a_disable_xip+0x42>
		if (n25q->pin_exit_xip) {
    4b4c:	68a3      	ldr	r3, [r4, #8]
    4b4e:	b163      	cbz	r3, 4b6a <n25q256a_disable_xip+0x42>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    4b50:	6835      	ldr	r5, [r6, #0]
			qspi_sync_disable(descr);
    4b52:	4630      	mov	r0, r6
    4b54:	4b08      	ldr	r3, [pc, #32]	; (4b78 <n25q256a_disable_xip+0x50>)
    4b56:	4798      	blx	r3
			n25q->pin_exit_xip();
    4b58:	68a3      	ldr	r3, [r4, #8]
    4b5a:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    4b5c:	4629      	mov	r1, r5
    4b5e:	4630      	mov	r0, r6
    4b60:	4b06      	ldr	r3, [pc, #24]	; (4b7c <n25q256a_disable_xip+0x54>)
    4b62:	4798      	blx	r3
			qspi_sync_enable(descr);
    4b64:	4630      	mov	r0, r6
    4b66:	4b06      	ldr	r3, [pc, #24]	; (4b80 <n25q256a_disable_xip+0x58>)
    4b68:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    4b6a:	2000      	movs	r0, #0
    4b6c:	7360      	strb	r0, [r4, #13]
	return ERR_NONE;
}
    4b6e:	bd70      	pop	{r4, r5, r6, pc}
    4b70:	00004a29 	.word	0x00004a29
    4b74:	00004acd 	.word	0x00004acd
    4b78:	00001239 	.word	0x00001239
    4b7c:	000011e1 	.word	0x000011e1
    4b80:	00001211 	.word	0x00001211

00004b84 <n25q256a_write_reg>:
{
    4b84:	b530      	push	{r4, r5, lr}
    4b86:	b089      	sub	sp, #36	; 0x24
    4b88:	4604      	mov	r4, r0
    4b8a:	9301      	str	r3, [sp, #4]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    4b8c:	6805      	ldr	r5, [r0, #0]
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    4b8e:	2300      	movs	r3, #0
    4b90:	9302      	str	r3, [sp, #8]
    4b92:	9303      	str	r3, [sp, #12]
    4b94:	9304      	str	r3, [sp, #16]
    4b96:	9307      	str	r3, [sp, #28]
    4b98:	f001 0107 	and.w	r1, r1, #7
    4b9c:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    4ba0:	f88d 1008 	strb.w	r1, [sp, #8]
    4ba4:	2102      	movs	r1, #2
    4ba6:	f361 1305 	bfi	r3, r1, #4, #2
    4baa:	f88d 3009 	strb.w	r3, [sp, #9]
    4bae:	f88d 200c 	strb.w	r2, [sp, #12]
    4bb2:	2301      	movs	r3, #1
    4bb4:	9305      	str	r3, [sp, #20]
    4bb6:	ab01      	add	r3, sp, #4
    4bb8:	9306      	str	r3, [sp, #24]
	if (n25q->xip_mode) {
    4bba:	7b43      	ldrb	r3, [r0, #13]
    4bbc:	b93b      	cbnz	r3, 4bce <n25q256a_write_reg+0x4a>
	qspi_sync_serial_run_command(descr, &cmd);
    4bbe:	a902      	add	r1, sp, #8
    4bc0:	4628      	mov	r0, r5
    4bc2:	4b07      	ldr	r3, [pc, #28]	; (4be0 <n25q256a_write_reg+0x5c>)
    4bc4:	4798      	blx	r3
	if (n25q->xip_mode) {
    4bc6:	7b63      	ldrb	r3, [r4, #13]
    4bc8:	b92b      	cbnz	r3, 4bd6 <n25q256a_write_reg+0x52>
}
    4bca:	b009      	add	sp, #36	; 0x24
    4bcc:	bd30      	pop	{r4, r5, pc}
		n25q256a_xip_confirm(me, false);
    4bce:	2100      	movs	r1, #0
    4bd0:	4b04      	ldr	r3, [pc, #16]	; (4be4 <n25q256a_write_reg+0x60>)
    4bd2:	4798      	blx	r3
    4bd4:	e7f3      	b.n	4bbe <n25q256a_write_reg+0x3a>
		n25q256a_xip_confirm(me, true);
    4bd6:	2101      	movs	r1, #1
    4bd8:	4620      	mov	r0, r4
    4bda:	4b02      	ldr	r3, [pc, #8]	; (4be4 <n25q256a_write_reg+0x60>)
    4bdc:	4798      	blx	r3
}
    4bde:	e7f4      	b.n	4bca <n25q256a_write_reg+0x46>
    4be0:	00001261 	.word	0x00001261
    4be4:	00004a29 	.word	0x00004a29

00004be8 <n25q256a_enable_xip>:
{
    4be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    4bea:	7b05      	ldrb	r5, [r0, #12]
    4bec:	2d00      	cmp	r5, #0
    4bee:	bf18      	it	ne
    4bf0:	2506      	movne	r5, #6
	if (!n25q->xip_mode) {
    4bf2:	7b43      	ldrb	r3, [r0, #13]
    4bf4:	b10b      	cbz	r3, 4bfa <n25q256a_enable_xip+0x12>
}
    4bf6:	2000      	movs	r0, #0
    4bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bfa:	4604      	mov	r4, r0
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    4bfc:	2285      	movs	r2, #133	; 0x85
    4bfe:	4629      	mov	r1, r5
    4c00:	4b0d      	ldr	r3, [pc, #52]	; (4c38 <n25q256a_enable_xip+0x50>)
    4c02:	4798      	blx	r3
		if (vcfg & (1u << 3)) {
    4c04:	f010 0f08 	tst.w	r0, #8
    4c08:	d105      	bne.n	4c16 <n25q256a_enable_xip+0x2e>
		n25q->xip_mode = 1;
    4c0a:	2101      	movs	r1, #1
    4c0c:	7361      	strb	r1, [r4, #13]
		n25q256a_xip_confirm(me, true);
    4c0e:	4620      	mov	r0, r4
    4c10:	4b0a      	ldr	r3, [pc, #40]	; (4c3c <n25q256a_enable_xip+0x54>)
    4c12:	4798      	blx	r3
    4c14:	e7ef      	b.n	4bf6 <n25q256a_enable_xip+0xe>
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    4c16:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
    4c1a:	2281      	movs	r2, #129	; 0x81
    4c1c:	4629      	mov	r1, r5
    4c1e:	4620      	mov	r0, r4
    4c20:	4e07      	ldr	r6, [pc, #28]	; (4c40 <n25q256a_enable_xip+0x58>)
    4c22:	47b0      	blx	r6
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    4c24:	2770      	movs	r7, #112	; 0x70
    4c26:	4e04      	ldr	r6, [pc, #16]	; (4c38 <n25q256a_enable_xip+0x50>)
    4c28:	463a      	mov	r2, r7
    4c2a:	4629      	mov	r1, r5
    4c2c:	4620      	mov	r0, r4
    4c2e:	47b0      	blx	r6
    4c30:	f010 0f80 	tst.w	r0, #128	; 0x80
    4c34:	d0f8      	beq.n	4c28 <n25q256a_enable_xip+0x40>
    4c36:	e7e8      	b.n	4c0a <n25q256a_enable_xip+0x22>
    4c38:	00004acd 	.word	0x00004acd
    4c3c:	00004a29 	.word	0x00004a29
    4c40:	00004b85 	.word	0x00004b85

00004c44 <n25q256a_write_enable>:
{
    4c44:	b530      	push	{r4, r5, lr}
    4c46:	b08f      	sub	sp, #60	; 0x3c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    4c48:	6805      	ldr	r5, [r0, #0]
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    4c4a:	2a00      	cmp	r2, #0
    4c4c:	bf14      	ite	ne
    4c4e:	2206      	movne	r2, #6
    4c50:	2204      	moveq	r2, #4
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    4c52:	2300      	movs	r3, #0
    4c54:	9307      	str	r3, [sp, #28]
    4c56:	9308      	str	r3, [sp, #32]
    4c58:	9309      	str	r3, [sp, #36]	; 0x24
    4c5a:	930a      	str	r3, [sp, #40]	; 0x28
    4c5c:	930b      	str	r3, [sp, #44]	; 0x2c
    4c5e:	930c      	str	r3, [sp, #48]	; 0x30
    4c60:	f001 0107 	and.w	r1, r1, #7
    4c64:	f041 0010 	orr.w	r0, r1, #16
    4c68:	f88d 001c 	strb.w	r0, [sp, #28]
    4c6c:	f88d 2020 	strb.w	r2, [sp, #32]
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    4c70:	9301      	str	r3, [sp, #4]
    4c72:	9302      	str	r3, [sp, #8]
    4c74:	9303      	str	r3, [sp, #12]
    4c76:	9305      	str	r3, [sp, #20]
    4c78:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    4c7c:	f88d 1004 	strb.w	r1, [sp, #4]
    4c80:	2305      	movs	r3, #5
    4c82:	f88d 3008 	strb.w	r3, [sp, #8]
    4c86:	2301      	movs	r3, #1
    4c88:	9304      	str	r3, [sp, #16]
    4c8a:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    4c8e:	9306      	str	r3, [sp, #24]
		qspi_sync_serial_run_command(descr, &cmd_en);
    4c90:	4c06      	ldr	r4, [pc, #24]	; (4cac <n25q256a_write_enable+0x68>)
    4c92:	a907      	add	r1, sp, #28
    4c94:	4628      	mov	r0, r5
    4c96:	47a0      	blx	r4
		qspi_sync_serial_run_command(descr, &cmd_st);
    4c98:	a901      	add	r1, sp, #4
    4c9a:	4628      	mov	r0, r5
    4c9c:	47a0      	blx	r4
	} while ((status & (1 << 1)) == 0);
    4c9e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    4ca2:	f013 0f02 	tst.w	r3, #2
    4ca6:	d0f4      	beq.n	4c92 <n25q256a_write_enable+0x4e>
}
    4ca8:	b00f      	add	sp, #60	; 0x3c
    4caa:	bd30      	pop	{r4, r5, pc}
    4cac:	00001261 	.word	0x00001261

00004cb0 <n25q256a_write>:
{
    4cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cb4:	b087      	sub	sp, #28
    4cb6:	4604      	mov	r4, r0
    4cb8:	4690      	mov	r8, r2
    4cba:	461f      	mov	r7, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    4cbc:	f8d0 b000 	ldr.w	fp, [r0]
	struct _qspi_command         cmd   = {
    4cc0:	2300      	movs	r3, #0
    4cc2:	9300      	str	r3, [sp, #0]
    4cc4:	9301      	str	r3, [sp, #4]
    4cc6:	9305      	str	r3, [sp, #20]
    4cc8:	2330      	movs	r3, #48	; 0x30
    4cca:	f88d 3001 	strb.w	r3, [sp, #1]
    4cce:	2302      	movs	r3, #2
    4cd0:	f88d 3004 	strb.w	r3, [sp, #4]
    4cd4:	9202      	str	r2, [sp, #8]
    4cd6:	9703      	str	r7, [sp, #12]
    4cd8:	9104      	str	r1, [sp, #16]
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    4cda:	7b03      	ldrb	r3, [r0, #12]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	bf14      	ite	ne
    4ce0:	2206      	movne	r2, #6
    4ce2:	2200      	moveq	r2, #0
    4ce4:	f06f 034f 	mvn.w	r3, #79	; 0x4f
    4ce8:	f362 0302 	bfi	r3, r2, #0, #3
    4cec:	f88d 3000 	strb.w	r3, [sp]
	while (length) {
    4cf0:	b357      	cbz	r7, 4d48 <n25q256a_write+0x98>
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    4cf2:	f8df a074 	ldr.w	sl, [pc, #116]	; 4d68 <n25q256a_write+0xb8>
		qspi_sync_serial_run_command(descr, &cmd);
    4cf6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4d6c <n25q256a_write+0xbc>
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    4cfa:	4e19      	ldr	r6, [pc, #100]	; (4d60 <n25q256a_write+0xb0>)
		cmd.address = address;
    4cfc:	f8cd 8008 	str.w	r8, [sp, #8]
		if (length <= N25Q_PAGE_SIZE) {
    4d00:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
			cmd.buf_len = length;
    4d04:	bf92      	itee	ls
    4d06:	9703      	strls	r7, [sp, #12]
			cmd.buf_len = N25Q_PAGE_SIZE;
    4d08:	f44f 7380 	movhi.w	r3, #256	; 0x100
    4d0c:	9303      	strhi	r3, [sp, #12]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    4d0e:	ad06      	add	r5, sp, #24
    4d10:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    4d14:	2201      	movs	r2, #1
    4d16:	f001 0107 	and.w	r1, r1, #7
    4d1a:	4620      	mov	r0, r4
    4d1c:	47d0      	blx	sl
		qspi_sync_serial_run_command(descr, &cmd);
    4d1e:	4629      	mov	r1, r5
    4d20:	4658      	mov	r0, fp
    4d22:	47c8      	blx	r9
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    4d24:	2570      	movs	r5, #112	; 0x70
    4d26:	f89d 1000 	ldrb.w	r1, [sp]
    4d2a:	462a      	mov	r2, r5
    4d2c:	f001 0107 	and.w	r1, r1, #7
    4d30:	4620      	mov	r0, r4
    4d32:	47b0      	blx	r6
    4d34:	f010 0f80 	tst.w	r0, #128	; 0x80
    4d38:	d0f5      	beq.n	4d26 <n25q256a_write+0x76>
		cmd.tx_buf += cmd.buf_len;
    4d3a:	9b03      	ldr	r3, [sp, #12]
    4d3c:	9a04      	ldr	r2, [sp, #16]
    4d3e:	441a      	add	r2, r3
    4d40:	9204      	str	r2, [sp, #16]
		address += cmd.buf_len;
    4d42:	4498      	add	r8, r3
	while (length) {
    4d44:	1aff      	subs	r7, r7, r3
    4d46:	d1d9      	bne.n	4cfc <n25q256a_write+0x4c>
	if (n25q->xip_mode) {
    4d48:	7b63      	ldrb	r3, [r4, #13]
    4d4a:	b91b      	cbnz	r3, 4d54 <n25q256a_write+0xa4>
}
    4d4c:	2000      	movs	r0, #0
    4d4e:	b007      	add	sp, #28
    4d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
    4d54:	2101      	movs	r1, #1
    4d56:	4620      	mov	r0, r4
    4d58:	4b02      	ldr	r3, [pc, #8]	; (4d64 <n25q256a_write+0xb4>)
    4d5a:	4798      	blx	r3
    4d5c:	e7f6      	b.n	4d4c <n25q256a_write+0x9c>
    4d5e:	bf00      	nop
    4d60:	00004acd 	.word	0x00004acd
    4d64:	00004a29 	.word	0x00004a29
    4d68:	00004c45 	.word	0x00004c45
    4d6c:	00001261 	.word	0x00001261

00004d70 <n25q256a_erase>:
{
    4d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d74:	b087      	sub	sp, #28
    4d76:	4688      	mov	r8, r1
    4d78:	4617      	mov	r7, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    4d7a:	f8d0 9000 	ldr.w	r9, [r0]
	struct _qspi_command         cmd   = {
    4d7e:	2300      	movs	r3, #0
    4d80:	9300      	str	r3, [sp, #0]
    4d82:	9301      	str	r3, [sp, #4]
    4d84:	9302      	str	r3, [sp, #8]
    4d86:	9303      	str	r3, [sp, #12]
    4d88:	9304      	str	r3, [sp, #16]
    4d8a:	9305      	str	r3, [sp, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    4d8c:	7b03      	ldrb	r3, [r0, #12]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	bf14      	ite	ne
    4d92:	2106      	movne	r1, #6
    4d94:	2100      	moveq	r1, #0
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    4d96:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    4d9a:	bf2c      	ite	cs
    4d9c:	2200      	movcs	r2, #0
    4d9e:	2201      	movcc	r2, #1
	struct _qspi_command         cmd   = {
    4da0:	f041 0310 	orr.w	r3, r1, #16
    4da4:	f362 1345 	bfi	r3, r2, #5, #1
    4da8:	f88d 3000 	strb.w	r3, [sp]
    4dac:	f04f 0300 	mov.w	r3, #0
    4db0:	2202      	movs	r2, #2
    4db2:	f362 1305 	bfi	r3, r2, #4, #2
    4db6:	f88d 3001 	strb.w	r3, [sp, #1]
	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    4dba:	ea47 0308 	orr.w	r3, r7, r8
    4dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d16f      	bne.n	4ea6 <n25q256a_erase+0x136>
    4dc6:	4604      	mov	r4, r0
	if (length >= N25Q_FLASH_SIZE) {
    4dc8:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
    4dcc:	d207      	bcs.n	4dde <n25q256a_erase+0x6e>
		while (temp_len > 0) {
    4dce:	2f00      	cmp	r7, #0
    4dd0:	d052      	beq.n	4e78 <n25q256a_erase+0x108>
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    4dd2:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 4eb0 <n25q256a_erase+0x140>
				qspi_sync_serial_run_command(descr, &cmd);
    4dd6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 4eb4 <n25q256a_erase+0x144>
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    4dda:	4e34      	ldr	r6, [pc, #208]	; (4eac <n25q256a_erase+0x13c>)
    4ddc:	e02e      	b.n	4e3c <n25q256a_erase+0xcc>
		cmd.instruction = N25Q_BULK_ERASE;
    4dde:	23c7      	movs	r3, #199	; 0xc7
    4de0:	f88d 3004 	strb.w	r3, [sp, #4]
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    4de4:	2201      	movs	r2, #1
    4de6:	4b32      	ldr	r3, [pc, #200]	; (4eb0 <n25q256a_erase+0x140>)
    4de8:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd);
    4dea:	4669      	mov	r1, sp
    4dec:	4648      	mov	r0, r9
    4dee:	4b31      	ldr	r3, [pc, #196]	; (4eb4 <n25q256a_erase+0x144>)
    4df0:	4798      	blx	r3
	int32_t  rc        = ERR_NONE;
    4df2:	2700      	movs	r7, #0
    4df4:	e040      	b.n	4e78 <n25q256a_erase+0x108>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    4df6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    4dfa:	d33b      	bcc.n	4e74 <n25q256a_erase+0x104>
				cmd.address     = temp_addr;
    4dfc:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    4e00:	2320      	movs	r3, #32
    4e02:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    4e06:	ad06      	add	r5, sp, #24
    4e08:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    4e0c:	2201      	movs	r2, #1
    4e0e:	f001 0107 	and.w	r1, r1, #7
    4e12:	4620      	mov	r0, r4
    4e14:	47d8      	blx	fp
				qspi_sync_serial_run_command(descr, &cmd);
    4e16:	4629      	mov	r1, r5
    4e18:	4648      	mov	r0, r9
    4e1a:	47d0      	blx	sl
				temp_addr += N25Q_SECTOR_SIZE;
    4e1c:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
				temp_len -= N25Q_SECTOR_SIZE;
    4e20:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    4e24:	2570      	movs	r5, #112	; 0x70
    4e26:	f89d 1000 	ldrb.w	r1, [sp]
    4e2a:	462a      	mov	r2, r5
    4e2c:	f001 0107 	and.w	r1, r1, #7
    4e30:	4620      	mov	r0, r4
    4e32:	47b0      	blx	r6
    4e34:	f010 0f80 	tst.w	r0, #128	; 0x80
    4e38:	d0f5      	beq.n	4e26 <n25q256a_erase+0xb6>
		while (temp_len > 0) {
    4e3a:	b1ef      	cbz	r7, 4e78 <n25q256a_erase+0x108>
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    4e3c:	fa1f f388 	uxth.w	r3, r8
    4e40:	2b00      	cmp	r3, #0
    4e42:	d1d8      	bne.n	4df6 <n25q256a_erase+0x86>
    4e44:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    4e48:	d3d5      	bcc.n	4df6 <n25q256a_erase+0x86>
				cmd.address     = temp_addr;
    4e4a:	f8cd 8008 	str.w	r8, [sp, #8]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    4e4e:	23d8      	movs	r3, #216	; 0xd8
    4e50:	f88d 3004 	strb.w	r3, [sp, #4]
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    4e54:	ad06      	add	r5, sp, #24
    4e56:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    4e5a:	2201      	movs	r2, #1
    4e5c:	f001 0107 	and.w	r1, r1, #7
    4e60:	4620      	mov	r0, r4
    4e62:	47d8      	blx	fp
				qspi_sync_serial_run_command(descr, &cmd);
    4e64:	4629      	mov	r1, r5
    4e66:	4648      	mov	r0, r9
    4e68:	47d0      	blx	sl
				temp_addr += N25Q_BLOCK_SIZE;
    4e6a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
				temp_len -= N25Q_BLOCK_SIZE;
    4e6e:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
    4e72:	e7d7      	b.n	4e24 <n25q256a_erase+0xb4>
				rc = ERR_INVALID_ARG;
    4e74:	f06f 070c 	mvn.w	r7, #12
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    4e78:	2670      	movs	r6, #112	; 0x70
    4e7a:	4d0c      	ldr	r5, [pc, #48]	; (4eac <n25q256a_erase+0x13c>)
    4e7c:	f89d 1000 	ldrb.w	r1, [sp]
    4e80:	4632      	mov	r2, r6
    4e82:	f001 0107 	and.w	r1, r1, #7
    4e86:	4620      	mov	r0, r4
    4e88:	47a8      	blx	r5
    4e8a:	f010 0f80 	tst.w	r0, #128	; 0x80
    4e8e:	d0f5      	beq.n	4e7c <n25q256a_erase+0x10c>
	if (n25q->xip_mode) {
    4e90:	7b63      	ldrb	r3, [r4, #13]
    4e92:	b91b      	cbnz	r3, 4e9c <n25q256a_erase+0x12c>
}
    4e94:	4638      	mov	r0, r7
    4e96:	b007      	add	sp, #28
    4e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n25q256a_xip_confirm(me, true);
    4e9c:	2101      	movs	r1, #1
    4e9e:	4620      	mov	r0, r4
    4ea0:	4b05      	ldr	r3, [pc, #20]	; (4eb8 <n25q256a_erase+0x148>)
    4ea2:	4798      	blx	r3
    4ea4:	e7f6      	b.n	4e94 <n25q256a_erase+0x124>
		return ERR_INVALID_ARG;
    4ea6:	f06f 070c 	mvn.w	r7, #12
    4eaa:	e7f3      	b.n	4e94 <n25q256a_erase+0x124>
    4eac:	00004acd 	.word	0x00004acd
    4eb0:	00004c45 	.word	0x00004c45
    4eb4:	00001261 	.word	0x00001261
    4eb8:	00004a29 	.word	0x00004a29

00004ebc <n25q256a_switch_mode>:
{
    4ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ebe:	4604      	mov	r4, r0
    4ec0:	460e      	mov	r6, r1
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    4ec2:	7b05      	ldrb	r5, [r0, #12]
    4ec4:	2d00      	cmp	r5, #0
    4ec6:	bf18      	it	ne
    4ec8:	2506      	movne	r5, #6
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    4eca:	2265      	movs	r2, #101	; 0x65
    4ecc:	4629      	mov	r1, r5
    4ece:	4b18      	ldr	r3, [pc, #96]	; (4f30 <n25q256a_switch_mode+0x74>)
    4ed0:	4798      	blx	r3
	if (n25q->quad_mode == mode) {
    4ed2:	7b23      	ldrb	r3, [r4, #12]
    4ed4:	42b3      	cmp	r3, r6
    4ed6:	d017      	beq.n	4f08 <n25q256a_switch_mode+0x4c>
    4ed8:	4607      	mov	r7, r0
	if (mode) {
    4eda:	b1b6      	cbz	r6, 4f0a <n25q256a_switch_mode+0x4e>
		if (evcfg & 0x80) {
    4edc:	f010 0f80 	tst.w	r0, #128	; 0x80
    4ee0:	d012      	beq.n	4f08 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
    4ee2:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
    4ee4:	2201      	movs	r2, #1
    4ee6:	4629      	mov	r1, r5
    4ee8:	4620      	mov	r0, r4
    4eea:	4b12      	ldr	r3, [pc, #72]	; (4f34 <n25q256a_switch_mode+0x78>)
    4eec:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    4eee:	f007 031f 	and.w	r3, r7, #31
    4ef2:	2261      	movs	r2, #97	; 0x61
    4ef4:	4629      	mov	r1, r5
    4ef6:	4620      	mov	r0, r4
    4ef8:	4d0f      	ldr	r5, [pc, #60]	; (4f38 <n25q256a_switch_mode+0x7c>)
    4efa:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    4efc:	2106      	movs	r1, #6
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    4efe:	2265      	movs	r2, #101	; 0x65
    4f00:	4620      	mov	r0, r4
    4f02:	4b0b      	ldr	r3, [pc, #44]	; (4f30 <n25q256a_switch_mode+0x74>)
    4f04:	4798      	blx	r3
		n25q->quad_mode = mode;
    4f06:	7326      	strb	r6, [r4, #12]
    4f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(evcfg & 0x80)) {
    4f0a:	f010 0f80 	tst.w	r0, #128	; 0x80
    4f0e:	d1fb      	bne.n	4f08 <n25q256a_switch_mode+0x4c>
		n25q->quad_mode = mode;
    4f10:	7326      	strb	r6, [r4, #12]
		n25q256a_write_enable(me, width, true);
    4f12:	2201      	movs	r2, #1
    4f14:	4629      	mov	r1, r5
    4f16:	4620      	mov	r0, r4
    4f18:	4b06      	ldr	r3, [pc, #24]	; (4f34 <n25q256a_switch_mode+0x78>)
    4f1a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    4f1c:	f047 03c0 	orr.w	r3, r7, #192	; 0xc0
    4f20:	2261      	movs	r2, #97	; 0x61
    4f22:	4629      	mov	r1, r5
    4f24:	4620      	mov	r0, r4
    4f26:	4d04      	ldr	r5, [pc, #16]	; (4f38 <n25q256a_switch_mode+0x7c>)
    4f28:	47a8      	blx	r5
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    4f2a:	4631      	mov	r1, r6
    4f2c:	e7e7      	b.n	4efe <n25q256a_switch_mode+0x42>
    4f2e:	bf00      	nop
    4f30:	00004acd 	.word	0x00004acd
    4f34:	00004c45 	.word	0x00004c45
    4f38:	00004b85 	.word	0x00004b85

00004f3c <n25q256a_construct>:
{
    4f3c:	b570      	push	{r4, r5, r6, lr}
    4f3e:	4604      	mov	r4, r0
    4f40:	4616      	mov	r6, r2
    4f42:	461d      	mov	r5, r3
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    4f44:	4a06      	ldr	r2, [pc, #24]	; (4f60 <n25q256a_construct+0x24>)
    4f46:	4b07      	ldr	r3, [pc, #28]	; (4f64 <n25q256a_construct+0x28>)
    4f48:	4798      	blx	r3
	n25q->quad_mode    = 0;
    4f4a:	2300      	movs	r3, #0
    4f4c:	7323      	strb	r3, [r4, #12]
	n25q->xip_mode     = false;
    4f4e:	7363      	strb	r3, [r4, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    4f50:	60a6      	str	r6, [r4, #8]
	n25q256a_switch_mode(me, quad_mode);
    4f52:	4629      	mov	r1, r5
    4f54:	4620      	mov	r0, r4
    4f56:	4b04      	ldr	r3, [pc, #16]	; (4f68 <n25q256a_construct+0x2c>)
    4f58:	4798      	blx	r3
}
    4f5a:	4620      	mov	r0, r4
    4f5c:	bd70      	pop	{r4, r5, r6, pc}
    4f5e:	bf00      	nop
    4f60:	00005fac 	.word	0x00005fac
    4f64:	00004f6d 	.word	0x00004f6d
    4f68:	00004ebd 	.word	0x00004ebd

00004f6c <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    4f6c:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    4f6e:	6042      	str	r2, [r0, #4]

	return me;
}
    4f70:	4770      	bx	lr
	...

00004f74 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    4f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f78:	4b33      	ldr	r3, [pc, #204]	; (5048 <QSPI_N25Q256_exit_xip+0xd4>)
    4f7a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4f82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4f8a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4f8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f96:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4f9e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fa2:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4fa6:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4faa:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4fae:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fb2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4fba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fbe:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4fc2:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4fc6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4fca:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fce:	f44f 7480 	mov.w	r4, #256	; 0x100
    4fd2:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fd4:	4a1d      	ldr	r2, [pc, #116]	; (504c <QSPI_N25Q256_exit_xip+0xd8>)
    4fd6:	629a      	str	r2, [r3, #40]	; 0x28
    4fd8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4fdc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fde:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4fe2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fe6:	491a      	ldr	r1, [pc, #104]	; (5050 <QSPI_N25Q256_exit_xip+0xdc>)
    4fe8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4fec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4ff4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ff8:	4d16      	ldr	r5, [pc, #88]	; (5054 <QSPI_N25Q256_exit_xip+0xe0>)
    4ffa:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
    4ffe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5002:	619c      	str	r4, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5004:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    5008:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94

	gpio_set_pin_level(FLASH_IO0, true);
	gpio_set_pin_level(FLASH_CS, false);
	gpio_set_pin_level(FLASH_CLK, false);

	delay_us(1);
    500c:	2001      	movs	r0, #1
    500e:	4b12      	ldr	r3, [pc, #72]	; (5058 <QSPI_N25Q256_exit_xip+0xe4>)
    5010:	4798      	blx	r3
    5012:	2407      	movs	r4, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5014:	4e0c      	ldr	r6, [pc, #48]	; (5048 <QSPI_N25Q256_exit_xip+0xd4>)
    5016:	f44f 6780 	mov.w	r7, #1024	; 0x400
    501a:	46b8      	mov	r8, r7
    501c:	f8c6 8098 	str.w	r8, [r6, #152]	; 0x98

	for (int i = 0; i < 7; i++) {
		gpio_set_pin_level(FLASH_CLK, true);
		delay_us(1);
    5020:	2001      	movs	r0, #1
    5022:	4d0d      	ldr	r5, [pc, #52]	; (5058 <QSPI_N25Q256_exit_xip+0xe4>)
    5024:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5026:	f8c6 7094 	str.w	r7, [r6, #148]	; 0x94
		gpio_set_pin_level(FLASH_CLK, false);
		delay_us(1);
    502a:	2001      	movs	r0, #1
    502c:	47a8      	blx	r5
	for (int i = 0; i < 7; i++) {
    502e:	3c01      	subs	r4, #1
    5030:	d1f4      	bne.n	501c <QSPI_N25Q256_exit_xip+0xa8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5032:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5036:	4b04      	ldr	r3, [pc, #16]	; (5048 <QSPI_N25Q256_exit_xip+0xd4>)
    5038:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	gpio_set_pin_level(FLASH_CS, true);
	delay_us(1);
    503c:	2001      	movs	r0, #1
    503e:	47a8      	blx	r5
	QSPI_N25Q256_PORT_init();
    5040:	4b06      	ldr	r3, [pc, #24]	; (505c <QSPI_N25Q256_exit_xip+0xe8>)
    5042:	4798      	blx	r3
    5044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5048:	41008000 	.word	0x41008000
    504c:	40000100 	.word	0x40000100
    5050:	40000800 	.word	0x40000800
    5054:	40000400 	.word	0x40000400
    5058:	00000fd9 	.word	0x00000fd9
    505c:	00000511 	.word	0x00000511

00005060 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    5060:	b510      	push	{r4, lr}

	qspi_sync_enable(&QSPI_N25Q256);
    5062:	4c06      	ldr	r4, [pc, #24]	; (507c <spi_nor_flash_init+0x1c>)
    5064:	4620      	mov	r0, r4
    5066:	4b06      	ldr	r3, [pc, #24]	; (5080 <spi_nor_flash_init+0x20>)
    5068:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    506a:	2300      	movs	r3, #0
    506c:	4a05      	ldr	r2, [pc, #20]	; (5084 <spi_nor_flash_init+0x24>)
    506e:	4621      	mov	r1, r4
    5070:	4805      	ldr	r0, [pc, #20]	; (5088 <spi_nor_flash_init+0x28>)
    5072:	4c06      	ldr	r4, [pc, #24]	; (508c <spi_nor_flash_init+0x2c>)
    5074:	47a0      	blx	r4
    5076:	4b06      	ldr	r3, [pc, #24]	; (5090 <spi_nor_flash_init+0x30>)
    5078:	6018      	str	r0, [r3, #0]
    507a:	bd10      	pop	{r4, pc}
    507c:	200006d0 	.word	0x200006d0
    5080:	00001211 	.word	0x00001211
    5084:	00004f75 	.word	0x00004f75
    5088:	2000059c 	.word	0x2000059c
    508c:	00004f3d 	.word	0x00004f3d
    5090:	20000880 	.word	0x20000880

00005094 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5094:	b5f0      	push	{r4, r5, r6, r7, lr}
    5096:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5098:	780b      	ldrb	r3, [r1, #0]
    509a:	f3c3 1441 	ubfx	r4, r3, #5, #2
    509e:	2c01      	cmp	r4, #1
    50a0:	d15e      	bne.n	5160 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    50a2:	888c      	ldrh	r4, [r1, #4]
    50a4:	4d35      	ldr	r5, [pc, #212]	; (517c <cdcdf_acm_req+0xe8>)
    50a6:	782d      	ldrb	r5, [r5, #0]
    50a8:	42a5      	cmp	r5, r4
    50aa:	d003      	beq.n	50b4 <cdcdf_acm_req+0x20>
    50ac:	4d33      	ldr	r5, [pc, #204]	; (517c <cdcdf_acm_req+0xe8>)
    50ae:	786d      	ldrb	r5, [r5, #1]
    50b0:	42a5      	cmp	r5, r4
    50b2:	d158      	bne.n	5166 <cdcdf_acm_req+0xd2>
    50b4:	4616      	mov	r6, r2
    50b6:	460c      	mov	r4, r1
    50b8:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    50ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    50be:	d10c      	bne.n	50da <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    50c0:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    50c2:	4b2f      	ldr	r3, [pc, #188]	; (5180 <cdcdf_acm_req+0xec>)
    50c4:	4798      	blx	r3
    50c6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    50c8:	7863      	ldrb	r3, [r4, #1]
    50ca:	2b20      	cmp	r3, #32
    50cc:	d013      	beq.n	50f6 <cdcdf_acm_req+0x62>
    50ce:	2b22      	cmp	r3, #34	; 0x22
    50d0:	d032      	beq.n	5138 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    50d2:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    50d6:	b003      	add	sp, #12
    50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    50da:	2a01      	cmp	r2, #1
    50dc:	d046      	beq.n	516c <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    50de:	784b      	ldrb	r3, [r1, #1]
    50e0:	2b21      	cmp	r3, #33	; 0x21
    50e2:	d145      	bne.n	5170 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    50e4:	88cb      	ldrh	r3, [r1, #6]
    50e6:	2b07      	cmp	r3, #7
    50e8:	d145      	bne.n	5176 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    50ea:	2300      	movs	r3, #0
    50ec:	2207      	movs	r2, #7
    50ee:	4925      	ldr	r1, [pc, #148]	; (5184 <cdcdf_acm_req+0xf0>)
    50f0:	4c25      	ldr	r4, [pc, #148]	; (5188 <cdcdf_acm_req+0xf4>)
    50f2:	47a0      	blx	r4
    50f4:	e7ef      	b.n	50d6 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    50f6:	2f07      	cmp	r7, #7
    50f8:	d12b      	bne.n	5152 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    50fa:	b1be      	cbz	r6, 512c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    50fc:	6800      	ldr	r0, [r0, #0]
    50fe:	9000      	str	r0, [sp, #0]
    5100:	888a      	ldrh	r2, [r1, #4]
    5102:	798b      	ldrb	r3, [r1, #6]
    5104:	f8ad 2004 	strh.w	r2, [sp, #4]
    5108:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    510c:	4b1b      	ldr	r3, [pc, #108]	; (517c <cdcdf_acm_req+0xe8>)
    510e:	691b      	ldr	r3, [r3, #16]
    5110:	b113      	cbz	r3, 5118 <cdcdf_acm_req+0x84>
    5112:	4668      	mov	r0, sp
    5114:	4798      	blx	r3
    5116:	b1f8      	cbz	r0, 5158 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    5118:	4b18      	ldr	r3, [pc, #96]	; (517c <cdcdf_acm_req+0xe8>)
    511a:	aa02      	add	r2, sp, #8
    511c:	e912 0003 	ldmdb	r2, {r0, r1}
    5120:	6098      	str	r0, [r3, #8]
    5122:	8199      	strh	r1, [r3, #12]
    5124:	0c09      	lsrs	r1, r1, #16
    5126:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    5128:	2000      	movs	r0, #0
    512a:	e7d4      	b.n	50d6 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    512c:	2300      	movs	r3, #0
    512e:	2207      	movs	r2, #7
    5130:	4628      	mov	r0, r5
    5132:	4c15      	ldr	r4, [pc, #84]	; (5188 <cdcdf_acm_req+0xf4>)
    5134:	47a0      	blx	r4
    5136:	e7ce      	b.n	50d6 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    5138:	2300      	movs	r3, #0
    513a:	461a      	mov	r2, r3
    513c:	4619      	mov	r1, r3
    513e:	4618      	mov	r0, r3
    5140:	4d11      	ldr	r5, [pc, #68]	; (5188 <cdcdf_acm_req+0xf4>)
    5142:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    5144:	4b0d      	ldr	r3, [pc, #52]	; (517c <cdcdf_acm_req+0xe8>)
    5146:	695b      	ldr	r3, [r3, #20]
    5148:	b143      	cbz	r3, 515c <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    514a:	8860      	ldrh	r0, [r4, #2]
    514c:	4798      	blx	r3
		return ERR_NONE;
    514e:	2000      	movs	r0, #0
    5150:	e7c1      	b.n	50d6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5152:	f04f 30ff 	mov.w	r0, #4294967295
    5156:	e7be      	b.n	50d6 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    5158:	2000      	movs	r0, #0
    515a:	e7bc      	b.n	50d6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    515c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    515e:	e7ba      	b.n	50d6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5160:	f06f 0009 	mvn.w	r0, #9
    5164:	e7b7      	b.n	50d6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5166:	f06f 0009 	mvn.w	r0, #9
    516a:	e7b4      	b.n	50d6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    516c:	2000      	movs	r0, #0
    516e:	e7b2      	b.n	50d6 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    5170:	f06f 000c 	mvn.w	r0, #12
    5174:	e7af      	b.n	50d6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5176:	f04f 30ff 	mov.w	r0, #4294967295
    517a:	e7ac      	b.n	50d6 <cdcdf_acm_req+0x42>
    517c:	200005ac 	.word	0x200005ac
    5180:	000059f5 	.word	0x000059f5
    5184:	200005b4 	.word	0x200005b4
    5188:	000054d1 	.word	0x000054d1

0000518c <cdcdf_acm_ctrl>:
{
    518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5190:	b083      	sub	sp, #12
    5192:	4616      	mov	r6, r2
	switch (ctrl) {
    5194:	2901      	cmp	r1, #1
    5196:	d066      	beq.n	5266 <cdcdf_acm_ctrl+0xda>
    5198:	b141      	cbz	r1, 51ac <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    519a:	2902      	cmp	r1, #2
    519c:	bf0c      	ite	eq
    519e:	f06f 001a 	mvneq.w	r0, #26
    51a2:	f06f 000c 	mvnne.w	r0, #12
}
    51a6:	b003      	add	sp, #12
    51a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    51ac:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    51b0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    51b2:	2800      	cmp	r0, #0
    51b4:	f000 8085 	beq.w	52c2 <cdcdf_acm_ctrl+0x136>
    51b8:	f10a 3bff 	add.w	fp, sl, #4294967295
    51bc:	f10a 0301 	add.w	r3, sl, #1
    51c0:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    51c2:	4f46      	ldr	r7, [pc, #280]	; (52dc <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    51c4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 52ec <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    51c8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 52f0 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    51cc:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    51ce:	7943      	ldrb	r3, [r0, #5]
    51d0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    51d4:	2b02      	cmp	r3, #2
    51d6:	d002      	beq.n	51de <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    51d8:	f06f 0009 	mvn.w	r0, #9
    51dc:	e7e3      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
    51de:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    51e2:	f89b 3000 	ldrb.w	r3, [fp]
    51e6:	429a      	cmp	r2, r3
    51e8:	d06e      	beq.n	52c8 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    51ea:	2bff      	cmp	r3, #255	; 0xff
    51ec:	d16f      	bne.n	52ce <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    51ee:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    51f2:	2205      	movs	r2, #5
    51f4:	6871      	ldr	r1, [r6, #4]
    51f6:	4b3a      	ldr	r3, [pc, #232]	; (52e0 <cdcdf_acm_ctrl+0x154>)
    51f8:	4798      	blx	r3
		while (NULL != ep) {
    51fa:	4604      	mov	r4, r0
    51fc:	b1f8      	cbz	r0, 523e <cdcdf_acm_ctrl+0xb2>
    51fe:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    5202:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    5204:	7963      	ldrb	r3, [r4, #5]
    5206:	7922      	ldrb	r2, [r4, #4]
    5208:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    520c:	b292      	uxth	r2, r2
    520e:	78e1      	ldrb	r1, [r4, #3]
    5210:	4628      	mov	r0, r5
    5212:	47b8      	blx	r7
    5214:	2800      	cmp	r0, #0
    5216:	d15d      	bne.n	52d4 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    5218:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    521c:	bf14      	ite	ne
    521e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    5222:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    5226:	4628      	mov	r0, r5
    5228:	47c8      	blx	r9
			desc->sod = ep;
    522a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    522c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    522e:	6871      	ldr	r1, [r6, #4]
    5230:	4420      	add	r0, r4
    5232:	47c0      	blx	r8
		while (NULL != ep) {
    5234:	4604      	mov	r4, r0
    5236:	2800      	cmp	r0, #0
    5238:	d1e3      	bne.n	5202 <cdcdf_acm_ctrl+0x76>
    523a:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    523e:	6833      	ldr	r3, [r6, #0]
    5240:	7818      	ldrb	r0, [r3, #0]
    5242:	2204      	movs	r2, #4
    5244:	6871      	ldr	r1, [r6, #4]
    5246:	4418      	add	r0, r3
    5248:	4b25      	ldr	r3, [pc, #148]	; (52e0 <cdcdf_acm_ctrl+0x154>)
    524a:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    524c:	9b00      	ldr	r3, [sp, #0]
    524e:	459b      	cmp	fp, r3
    5250:	d004      	beq.n	525c <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    5252:	2800      	cmp	r0, #0
    5254:	d1ba      	bne.n	51cc <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    5256:	f06f 0009 	mvn.w	r0, #9
    525a:	e7a4      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    525c:	2201      	movs	r2, #1
    525e:	4b21      	ldr	r3, [pc, #132]	; (52e4 <cdcdf_acm_ctrl+0x158>)
    5260:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    5262:	2000      	movs	r0, #0
    5264:	e79f      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5266:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    5268:	b142      	cbz	r2, 527c <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    526a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    526c:	795b      	ldrb	r3, [r3, #5]
    526e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    5272:	2b02      	cmp	r3, #2
    5274:	d002      	beq.n	527c <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    5276:	f06f 0009 	mvn.w	r0, #9
    527a:	e794      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    527c:	7823      	ldrb	r3, [r4, #0]
    527e:	2bff      	cmp	r3, #255	; 0xff
    5280:	d008      	beq.n	5294 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    5282:	23ff      	movs	r3, #255	; 0xff
    5284:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    5286:	78a0      	ldrb	r0, [r4, #2]
    5288:	4298      	cmp	r0, r3
    528a:	d003      	beq.n	5294 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    528c:	4b16      	ldr	r3, [pc, #88]	; (52e8 <cdcdf_acm_ctrl+0x15c>)
    528e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    5290:	23ff      	movs	r3, #255	; 0xff
    5292:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    5294:	7863      	ldrb	r3, [r4, #1]
    5296:	2bff      	cmp	r3, #255	; 0xff
    5298:	d008      	beq.n	52ac <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    529a:	23ff      	movs	r3, #255	; 0xff
    529c:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    529e:	78e0      	ldrb	r0, [r4, #3]
    52a0:	4298      	cmp	r0, r3
    52a2:	d003      	beq.n	52ac <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    52a4:	4b10      	ldr	r3, [pc, #64]	; (52e8 <cdcdf_acm_ctrl+0x15c>)
    52a6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    52a8:	23ff      	movs	r3, #255	; 0xff
    52aa:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    52ac:	7920      	ldrb	r0, [r4, #4]
    52ae:	28ff      	cmp	r0, #255	; 0xff
    52b0:	d003      	beq.n	52ba <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    52b2:	4b0d      	ldr	r3, [pc, #52]	; (52e8 <cdcdf_acm_ctrl+0x15c>)
    52b4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    52b6:	23ff      	movs	r3, #255	; 0xff
    52b8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    52ba:	2000      	movs	r0, #0
    52bc:	4b09      	ldr	r3, [pc, #36]	; (52e4 <cdcdf_acm_ctrl+0x158>)
    52be:	7158      	strb	r0, [r3, #5]
    52c0:	e771      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    52c2:	f06f 0009 	mvn.w	r0, #9
    52c6:	e76e      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    52c8:	f06f 0011 	mvn.w	r0, #17
    52cc:	e76b      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    52ce:	f06f 001b 	mvn.w	r0, #27
    52d2:	e768      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    52d4:	f06f 0013 	mvn.w	r0, #19
    52d8:	e765      	b.n	51a6 <cdcdf_acm_ctrl+0x1a>
    52da:	bf00      	nop
    52dc:	000019dd 	.word	0x000019dd
    52e0:	00005a15 	.word	0x00005a15
    52e4:	200005ac 	.word	0x200005ac
    52e8:	00001a45 	.word	0x00001a45
    52ec:	00001a71 	.word	0x00001a71
    52f0:	00005a4f 	.word	0x00005a4f

000052f4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    52f4:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    52f6:	4b0a      	ldr	r3, [pc, #40]	; (5320 <cdcdf_acm_init+0x2c>)
    52f8:	4798      	blx	r3
    52fa:	2801      	cmp	r0, #1
    52fc:	d80c      	bhi.n	5318 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    52fe:	4809      	ldr	r0, [pc, #36]	; (5324 <cdcdf_acm_init+0x30>)
    5300:	4b09      	ldr	r3, [pc, #36]	; (5328 <cdcdf_acm_init+0x34>)
    5302:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    5304:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    5306:	3018      	adds	r0, #24
    5308:	4b08      	ldr	r3, [pc, #32]	; (532c <cdcdf_acm_init+0x38>)
    530a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    530c:	4908      	ldr	r1, [pc, #32]	; (5330 <cdcdf_acm_init+0x3c>)
    530e:	2001      	movs	r0, #1
    5310:	4b08      	ldr	r3, [pc, #32]	; (5334 <cdcdf_acm_init+0x40>)
    5312:	4798      	blx	r3
	return ERR_NONE;
    5314:	2000      	movs	r0, #0
    5316:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    5318:	f06f 0010 	mvn.w	r0, #16
}
    531c:	bd08      	pop	{r3, pc}
    531e:	bf00      	nop
    5320:	00005a01 	.word	0x00005a01
    5324:	200005ac 	.word	0x200005ac
    5328:	0000518d 	.word	0x0000518d
    532c:	000059a1 	.word	0x000059a1
    5330:	20000078 	.word	0x20000078
    5334:	0000590d 	.word	0x0000590d

00005338 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    5338:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    533a:	4b07      	ldr	r3, [pc, #28]	; (5358 <usbdc_unconfig+0x20>)
    533c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    533e:	b14c      	cbz	r4, 5354 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    5340:	2600      	movs	r6, #0
    5342:	2501      	movs	r5, #1
    5344:	6863      	ldr	r3, [r4, #4]
    5346:	4632      	mov	r2, r6
    5348:	4629      	mov	r1, r5
    534a:	4620      	mov	r0, r4
    534c:	4798      	blx	r3
		func = func->next;
    534e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    5350:	2c00      	cmp	r4, #0
    5352:	d1f7      	bne.n	5344 <usbdc_unconfig+0xc>
    5354:	bd70      	pop	{r4, r5, r6, pc}
    5356:	bf00      	nop
    5358:	200005d0 	.word	0x200005d0

0000535c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	4606      	mov	r6, r0
    5360:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    5362:	4b07      	ldr	r3, [pc, #28]	; (5380 <usbdc_change_notify+0x24>)
    5364:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    5366:	b91c      	cbnz	r4, 5370 <usbdc_change_notify+0x14>
    5368:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    536a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    536c:	2c00      	cmp	r4, #0
    536e:	d0fb      	beq.n	5368 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    5370:	6863      	ldr	r3, [r4, #4]
    5372:	2b00      	cmp	r3, #0
    5374:	d0f9      	beq.n	536a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    5376:	4629      	mov	r1, r5
    5378:	4630      	mov	r0, r6
    537a:	4798      	blx	r3
    537c:	e7f5      	b.n	536a <usbdc_change_notify+0xe>
    537e:	bf00      	nop
    5380:	200005d0 	.word	0x200005d0

00005384 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5386:	4607      	mov	r7, r0
    5388:	460e      	mov	r6, r1
    538a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    538c:	4b0c      	ldr	r3, [pc, #48]	; (53c0 <usbdc_request_handler+0x3c>)
    538e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    5390:	b91c      	cbnz	r4, 539a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    5392:	2000      	movs	r0, #0
    5394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    5396:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    5398:	b16c      	cbz	r4, 53b6 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    539a:	6863      	ldr	r3, [r4, #4]
    539c:	2b00      	cmp	r3, #0
    539e:	d0fa      	beq.n	5396 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    53a0:	462a      	mov	r2, r5
    53a2:	4631      	mov	r1, r6
    53a4:	4638      	mov	r0, r7
    53a6:	4798      	blx	r3
			if (0 == rc) {
    53a8:	b138      	cbz	r0, 53ba <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    53aa:	f110 0f0a 	cmn.w	r0, #10
    53ae:	d0f2      	beq.n	5396 <usbdc_request_handler+0x12>
				return -1;
    53b0:	f04f 30ff 	mov.w	r0, #4294967295
}
    53b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    53b6:	2000      	movs	r0, #0
    53b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    53ba:	2001      	movs	r0, #1
    53bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53be:	bf00      	nop
    53c0:	200005d0 	.word	0x200005d0

000053c4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    53c4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    53c6:	4b06      	ldr	r3, [pc, #24]	; (53e0 <usbd_sof_cb+0x1c>)
    53c8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    53ca:	b91c      	cbnz	r4, 53d4 <usbd_sof_cb+0x10>
    53cc:	bd10      	pop	{r4, pc}
		sof = sof->next;
    53ce:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    53d0:	2c00      	cmp	r4, #0
    53d2:	d0fb      	beq.n	53cc <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    53d4:	6863      	ldr	r3, [r4, #4]
    53d6:	2b00      	cmp	r3, #0
    53d8:	d0f9      	beq.n	53ce <usbd_sof_cb+0xa>
			sof->cb();
    53da:	4798      	blx	r3
    53dc:	e7f7      	b.n	53ce <usbd_sof_cb+0xa>
    53de:	bf00      	nop
    53e0:	200005d0 	.word	0x200005d0

000053e4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    53e4:	b510      	push	{r4, lr}
    53e6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    53e8:	b119      	cbz	r1, 53f2 <usbdc_cb_ctl_done+0xe>
    53ea:	2901      	cmp	r1, #1
    53ec:	d026      	beq.n	543c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    53ee:	2000      	movs	r0, #0
    53f0:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    53f2:	7813      	ldrb	r3, [r2, #0]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d1fa      	bne.n	53ee <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    53f8:	7853      	ldrb	r3, [r2, #1]
    53fa:	2b05      	cmp	r3, #5
    53fc:	d00f      	beq.n	541e <usbdc_cb_ctl_done+0x3a>
    53fe:	2b09      	cmp	r3, #9
    5400:	d1f5      	bne.n	53ee <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    5402:	8852      	ldrh	r2, [r2, #2]
    5404:	4b10      	ldr	r3, [pc, #64]	; (5448 <usbdc_cb_ctl_done+0x64>)
    5406:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    5408:	8863      	ldrh	r3, [r4, #2]
    540a:	2b00      	cmp	r3, #0
    540c:	bf14      	ite	ne
    540e:	2104      	movne	r1, #4
    5410:	2103      	moveq	r1, #3
    5412:	4b0d      	ldr	r3, [pc, #52]	; (5448 <usbdc_cb_ctl_done+0x64>)
    5414:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5416:	2001      	movs	r0, #1
    5418:	4b0c      	ldr	r3, [pc, #48]	; (544c <usbdc_cb_ctl_done+0x68>)
    541a:	4798      	blx	r3
    541c:	e7e7      	b.n	53ee <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    541e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    5420:	b2c0      	uxtb	r0, r0
    5422:	4b0b      	ldr	r3, [pc, #44]	; (5450 <usbdc_cb_ctl_done+0x6c>)
    5424:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5426:	8863      	ldrh	r3, [r4, #2]
    5428:	2b00      	cmp	r3, #0
    542a:	bf14      	ite	ne
    542c:	2103      	movne	r1, #3
    542e:	2102      	moveq	r1, #2
    5430:	4b05      	ldr	r3, [pc, #20]	; (5448 <usbdc_cb_ctl_done+0x64>)
    5432:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5434:	2001      	movs	r0, #1
    5436:	4b05      	ldr	r3, [pc, #20]	; (544c <usbdc_cb_ctl_done+0x68>)
    5438:	4798      	blx	r3
    543a:	e7d8      	b.n	53ee <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    543c:	2201      	movs	r2, #1
    543e:	4621      	mov	r1, r4
    5440:	2000      	movs	r0, #0
    5442:	4b04      	ldr	r3, [pc, #16]	; (5454 <usbdc_cb_ctl_done+0x70>)
    5444:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    5446:	e7d2      	b.n	53ee <usbdc_cb_ctl_done+0xa>
    5448:	200005d0 	.word	0x200005d0
    544c:	0000535d 	.word	0x0000535d
    5450:	000019d1 	.word	0x000019d1
    5454:	00005385 	.word	0x00005385

00005458 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    5458:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    545a:	4b0d      	ldr	r3, [pc, #52]	; (5490 <usbdc_reset+0x38>)
    545c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    545e:	4d0d      	ldr	r5, [pc, #52]	; (5494 <usbdc_reset+0x3c>)
    5460:	2602      	movs	r6, #2
    5462:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    5464:	2400      	movs	r4, #0
    5466:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    5468:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    546a:	4620      	mov	r0, r4
    546c:	4b0a      	ldr	r3, [pc, #40]	; (5498 <usbdc_reset+0x40>)
    546e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5470:	7f28      	ldrb	r0, [r5, #28]
    5472:	4b0a      	ldr	r3, [pc, #40]	; (549c <usbdc_reset+0x44>)
    5474:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    5476:	4a0a      	ldr	r2, [pc, #40]	; (54a0 <usbdc_reset+0x48>)
    5478:	4621      	mov	r1, r4
    547a:	4620      	mov	r0, r4
    547c:	4d09      	ldr	r5, [pc, #36]	; (54a4 <usbdc_reset+0x4c>)
    547e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5480:	4a09      	ldr	r2, [pc, #36]	; (54a8 <usbdc_reset+0x50>)
    5482:	4631      	mov	r1, r6
    5484:	4620      	mov	r0, r4
    5486:	47a8      	blx	r5
	usb_d_ep_enable(0);
    5488:	4620      	mov	r0, r4
    548a:	4b08      	ldr	r3, [pc, #32]	; (54ac <usbdc_reset+0x54>)
    548c:	4798      	blx	r3
    548e:	bd70      	pop	{r4, r5, r6, pc}
    5490:	00005339 	.word	0x00005339
    5494:	200005d0 	.word	0x200005d0
    5498:	00001a45 	.word	0x00001a45
    549c:	00001a31 	.word	0x00001a31
    54a0:	000054f1 	.word	0x000054f1
    54a4:	00001c45 	.word	0x00001c45
    54a8:	000053e5 	.word	0x000053e5
    54ac:	00001a71 	.word	0x00001a71

000054b0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    54b0:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    54b2:	b110      	cbz	r0, 54ba <usbd_event_cb+0xa>
    54b4:	2801      	cmp	r0, #1
    54b6:	d004      	beq.n	54c2 <usbd_event_cb+0x12>
    54b8:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    54ba:	2000      	movs	r0, #0
    54bc:	4b02      	ldr	r3, [pc, #8]	; (54c8 <usbd_event_cb+0x18>)
    54be:	4798      	blx	r3
		break;
    54c0:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    54c2:	4b02      	ldr	r3, [pc, #8]	; (54cc <usbd_event_cb+0x1c>)
    54c4:	4798      	blx	r3
    54c6:	bd08      	pop	{r3, pc}
    54c8:	0000535d 	.word	0x0000535d
    54cc:	00005459 	.word	0x00005459

000054d0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    54d0:	b500      	push	{lr}
    54d2:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    54d4:	9101      	str	r1, [sp, #4]
    54d6:	9202      	str	r2, [sp, #8]
    54d8:	f88d 000c 	strb.w	r0, [sp, #12]
    54dc:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    54e0:	a801      	add	r0, sp, #4
    54e2:	4b02      	ldr	r3, [pc, #8]	; (54ec <usbdc_xfer+0x1c>)
    54e4:	4798      	blx	r3
}
    54e6:	b005      	add	sp, #20
    54e8:	f85d fb04 	ldr.w	pc, [sp], #4
    54ec:	00001abd 	.word	0x00001abd

000054f0 <usbdc_cb_ctl_req>:
{
    54f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54f4:	b083      	sub	sp, #12
    54f6:	4605      	mov	r5, r0
    54f8:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    54fa:	2200      	movs	r2, #0
    54fc:	4b9b      	ldr	r3, [pc, #620]	; (576c <usbdc_cb_ctl_req+0x27c>)
    54fe:	4798      	blx	r3
    5500:	f1b0 3fff 	cmp.w	r0, #4294967295
    5504:	d00b      	beq.n	551e <usbdc_cb_ctl_req+0x2e>
    5506:	2801      	cmp	r0, #1
    5508:	f000 81e3 	beq.w	58d2 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    550c:	7823      	ldrb	r3, [r4, #0]
    550e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    5512:	d008      	beq.n	5526 <usbdc_cb_ctl_req+0x36>
    5514:	2a80      	cmp	r2, #128	; 0x80
    5516:	f000 80f4 	beq.w	5702 <usbdc_cb_ctl_req+0x212>
		return false;
    551a:	2000      	movs	r0, #0
    551c:	e000      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    551e:	2000      	movs	r0, #0
}
    5520:	b003      	add	sp, #12
    5522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    5526:	7862      	ldrb	r2, [r4, #1]
    5528:	3a01      	subs	r2, #1
    552a:	2a0a      	cmp	r2, #10
    552c:	f200 81d3 	bhi.w	58d6 <usbdc_cb_ctl_req+0x3e6>
    5530:	e8df f012 	tbh	[pc, r2, lsl #1]
    5534:	01d10060 	.word	0x01d10060
    5538:	01d10076 	.word	0x01d10076
    553c:	01d1000b 	.word	0x01d1000b
    5540:	01d101d1 	.word	0x01d101d1
    5544:	01d10015 	.word	0x01d10015
    5548:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    554a:	2301      	movs	r3, #1
    554c:	2200      	movs	r2, #0
    554e:	4611      	mov	r1, r2
    5550:	4628      	mov	r0, r5
    5552:	4c87      	ldr	r4, [pc, #540]	; (5770 <usbdc_cb_ctl_req+0x280>)
    5554:	47a0      	blx	r4
    5556:	fab0 f080 	clz	r0, r0
    555a:	0940      	lsrs	r0, r0, #5
    555c:	e7e0      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    555e:	8862      	ldrh	r2, [r4, #2]
    5560:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    5562:	b1ca      	cbz	r2, 5598 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    5564:	4b83      	ldr	r3, [pc, #524]	; (5774 <usbdc_cb_ctl_req+0x284>)
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	6859      	ldr	r1, [r3, #4]
    556a:	6818      	ldr	r0, [r3, #0]
    556c:	4b82      	ldr	r3, [pc, #520]	; (5778 <usbdc_cb_ctl_req+0x288>)
    556e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5570:	2800      	cmp	r0, #0
    5572:	f000 81be 	beq.w	58f2 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    5576:	78c2      	ldrb	r2, [r0, #3]
    5578:	7881      	ldrb	r1, [r0, #2]
    557a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    557e:	fa10 f181 	uxtah	r1, r0, r1
    5582:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    5584:	2204      	movs	r2, #4
    5586:	4b7d      	ldr	r3, [pc, #500]	; (577c <usbdc_cb_ctl_req+0x28c>)
    5588:	4798      	blx	r3
    558a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    558c:	b130      	cbz	r0, 559c <usbdc_cb_ctl_req+0xac>
    558e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    5590:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 5774 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5594:	4f79      	ldr	r7, [pc, #484]	; (577c <usbdc_cb_ctl_req+0x28c>)
    5596:	e018      	b.n	55ca <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    5598:	4b79      	ldr	r3, [pc, #484]	; (5780 <usbdc_cb_ctl_req+0x290>)
    559a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    559c:	2301      	movs	r3, #1
    559e:	2200      	movs	r2, #0
    55a0:	4611      	mov	r1, r2
    55a2:	4628      	mov	r0, r5
    55a4:	4c72      	ldr	r4, [pc, #456]	; (5770 <usbdc_cb_ctl_req+0x280>)
    55a6:	47a0      	blx	r4
    55a8:	fab0 f080 	clz	r0, r0
    55ac:	0940      	lsrs	r0, r0, #5
    55ae:	e7b7      	b.n	5520 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    55b0:	464c      	mov	r4, r9
    55b2:	e000      	b.n	55b6 <usbdc_cb_ctl_req+0xc6>
    55b4:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    55b6:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    55b8:	7803      	ldrb	r3, [r0, #0]
    55ba:	4418      	add	r0, r3
    55bc:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    55be:	2204      	movs	r2, #4
    55c0:	9901      	ldr	r1, [sp, #4]
    55c2:	47b8      	blx	r7
    55c4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    55c6:	2800      	cmp	r0, #0
    55c8:	d0e8      	beq.n	559c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    55ca:	f890 9002 	ldrb.w	r9, [r0, #2]
    55ce:	45a1      	cmp	r9, r4
    55d0:	d0f1      	beq.n	55b6 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    55d2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    55d6:	2c00      	cmp	r4, #0
    55d8:	d0ea      	beq.n	55b0 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    55da:	2600      	movs	r6, #0
    55dc:	6863      	ldr	r3, [r4, #4]
    55de:	466a      	mov	r2, sp
    55e0:	4631      	mov	r1, r6
    55e2:	4620      	mov	r0, r4
    55e4:	4798      	blx	r3
    55e6:	2800      	cmp	r0, #0
    55e8:	d0e4      	beq.n	55b4 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    55ea:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    55ec:	2c00      	cmp	r4, #0
    55ee:	d1f5      	bne.n	55dc <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    55f0:	464c      	mov	r4, r9
    55f2:	e7e0      	b.n	55b6 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    55f4:	f003 031f 	and.w	r3, r3, #31
    55f8:	2b02      	cmp	r3, #2
    55fa:	f040 816e 	bne.w	58da <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    55fe:	88e3      	ldrh	r3, [r4, #6]
    5600:	b10b      	cbz	r3, 5606 <usbdc_cb_ctl_req+0x116>
			return false;
    5602:	2000      	movs	r0, #0
    5604:	e78c      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    5606:	88a0      	ldrh	r0, [r4, #4]
    5608:	2100      	movs	r1, #0
    560a:	b2c0      	uxtb	r0, r0
    560c:	4b5d      	ldr	r3, [pc, #372]	; (5784 <usbdc_cb_ctl_req+0x294>)
    560e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5610:	2301      	movs	r3, #1
    5612:	2200      	movs	r2, #0
    5614:	4611      	mov	r1, r2
    5616:	4628      	mov	r0, r5
    5618:	4c55      	ldr	r4, [pc, #340]	; (5770 <usbdc_cb_ctl_req+0x280>)
    561a:	47a0      	blx	r4
		return true;
    561c:	2001      	movs	r0, #1
    561e:	e77f      	b.n	5520 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5620:	f003 031f 	and.w	r3, r3, #31
    5624:	2b02      	cmp	r3, #2
    5626:	f040 815a 	bne.w	58de <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    562a:	88e3      	ldrh	r3, [r4, #6]
    562c:	b10b      	cbz	r3, 5632 <usbdc_cb_ctl_req+0x142>
			return false;
    562e:	2000      	movs	r0, #0
    5630:	e776      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    5632:	88a0      	ldrh	r0, [r4, #4]
    5634:	2101      	movs	r1, #1
    5636:	b2c0      	uxtb	r0, r0
    5638:	4b52      	ldr	r3, [pc, #328]	; (5784 <usbdc_cb_ctl_req+0x294>)
    563a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    563c:	2301      	movs	r3, #1
    563e:	2200      	movs	r2, #0
    5640:	4611      	mov	r1, r2
    5642:	4628      	mov	r0, r5
    5644:	4c4a      	ldr	r4, [pc, #296]	; (5770 <usbdc_cb_ctl_req+0x280>)
    5646:	47a0      	blx	r4
		return true;
    5648:	2001      	movs	r0, #1
    564a:	e769      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    564c:	8866      	ldrh	r6, [r4, #2]
    564e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5650:	4a48      	ldr	r2, [pc, #288]	; (5774 <usbdc_cb_ctl_req+0x284>)
    5652:	6813      	ldr	r3, [r2, #0]
    5654:	7ed2      	ldrb	r2, [r2, #27]
    5656:	6859      	ldr	r1, [r3, #4]
    5658:	6818      	ldr	r0, [r3, #0]
    565a:	4b47      	ldr	r3, [pc, #284]	; (5778 <usbdc_cb_ctl_req+0x288>)
    565c:	4798      	blx	r3
	if (NULL == ifc) {
    565e:	2800      	cmp	r0, #0
    5660:	d045      	beq.n	56ee <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    5662:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    5664:	78c2      	ldrb	r2, [r0, #3]
    5666:	7881      	ldrb	r1, [r0, #2]
    5668:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    566c:	fa10 f181 	uxtah	r1, r0, r1
    5670:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5672:	2204      	movs	r2, #4
    5674:	4b41      	ldr	r3, [pc, #260]	; (577c <usbdc_cb_ctl_req+0x28c>)
    5676:	4798      	blx	r3
    5678:	4603      	mov	r3, r0
    567a:	2800      	cmp	r0, #0
    567c:	d039      	beq.n	56f2 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    567e:	2704      	movs	r7, #4
    5680:	4d3e      	ldr	r5, [pc, #248]	; (577c <usbdc_cb_ctl_req+0x28c>)
    5682:	e008      	b.n	5696 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    5684:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    5686:	7803      	ldrb	r3, [r0, #0]
    5688:	4418      	add	r0, r3
    568a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    568c:	463a      	mov	r2, r7
    568e:	9901      	ldr	r1, [sp, #4]
    5690:	47a8      	blx	r5
		if (NULL == ifc) {
    5692:	4603      	mov	r3, r0
    5694:	b378      	cbz	r0, 56f6 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5696:	789a      	ldrb	r2, [r3, #2]
    5698:	42a2      	cmp	r2, r4
    569a:	d1f3      	bne.n	5684 <usbdc_cb_ctl_req+0x194>
    569c:	78da      	ldrb	r2, [r3, #3]
    569e:	42b2      	cmp	r2, r6
    56a0:	d1f0      	bne.n	5684 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    56a2:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    56a4:	4b33      	ldr	r3, [pc, #204]	; (5774 <usbdc_cb_ctl_req+0x284>)
    56a6:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    56a8:	b33d      	cbz	r5, 56fa <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    56aa:	2701      	movs	r7, #1
    56ac:	686b      	ldr	r3, [r5, #4]
    56ae:	466a      	mov	r2, sp
    56b0:	4639      	mov	r1, r7
    56b2:	4628      	mov	r0, r5
    56b4:	4798      	blx	r3
    56b6:	b120      	cbz	r0, 56c2 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    56b8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    56ba:	2d00      	cmp	r5, #0
    56bc:	d1f6      	bne.n	56ac <usbdc_cb_ctl_req+0x1bc>
	return false;
    56be:	2000      	movs	r0, #0
    56c0:	e72e      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    56c2:	686b      	ldr	r3, [r5, #4]
    56c4:	466a      	mov	r2, sp
    56c6:	2100      	movs	r1, #0
    56c8:	4628      	mov	r0, r5
    56ca:	4798      	blx	r3
    56cc:	b9b8      	cbnz	r0, 56fe <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    56ce:	b136      	cbz	r6, 56de <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    56d0:	4a28      	ldr	r2, [pc, #160]	; (5774 <usbdc_cb_ctl_req+0x284>)
    56d2:	2301      	movs	r3, #1
    56d4:	fa03 f404 	lsl.w	r4, r3, r4
    56d8:	7f53      	ldrb	r3, [r2, #29]
    56da:	4323      	orrs	r3, r4
    56dc:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    56de:	2300      	movs	r3, #0
    56e0:	461a      	mov	r2, r3
    56e2:	4619      	mov	r1, r3
    56e4:	4618      	mov	r0, r3
    56e6:	4c22      	ldr	r4, [pc, #136]	; (5770 <usbdc_cb_ctl_req+0x280>)
    56e8:	47a0      	blx	r4
			return true;
    56ea:	2001      	movs	r0, #1
    56ec:	e718      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    56ee:	2000      	movs	r0, #0
    56f0:	e716      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    56f2:	2000      	movs	r0, #0
    56f4:	e714      	b.n	5520 <usbdc_cb_ctl_req+0x30>
			return false;
    56f6:	2000      	movs	r0, #0
    56f8:	e712      	b.n	5520 <usbdc_cb_ctl_req+0x30>
	return false;
    56fa:	2000      	movs	r0, #0
    56fc:	e710      	b.n	5520 <usbdc_cb_ctl_req+0x30>
			return false;
    56fe:	2000      	movs	r0, #0
    5700:	e70e      	b.n	5520 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    5702:	7862      	ldrb	r2, [r4, #1]
    5704:	2a0a      	cmp	r2, #10
    5706:	f200 80ec 	bhi.w	58e2 <usbdc_cb_ctl_req+0x3f2>
    570a:	e8df f012 	tbh	[pc, r2, lsl #1]
    570e:	008e      	.short	0x008e
    5710:	00ea00ea 	.word	0x00ea00ea
    5714:	00ea00ea 	.word	0x00ea00ea
    5718:	000b00ea 	.word	0x000b00ea
    571c:	008200ea 	.word	0x008200ea
    5720:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    5724:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    5726:	0a13      	lsrs	r3, r2, #8
    5728:	2b02      	cmp	r3, #2
    572a:	d02d      	beq.n	5788 <usbdc_cb_ctl_req+0x298>
    572c:	2b03      	cmp	r3, #3
    572e:	d050      	beq.n	57d2 <usbdc_cb_ctl_req+0x2e2>
    5730:	2b01      	cmp	r3, #1
    5732:	d001      	beq.n	5738 <usbdc_cb_ctl_req+0x248>
	return false;
    5734:	2000      	movs	r0, #0
    5736:	e6f3      	b.n	5520 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    5738:	88e2      	ldrh	r2, [r4, #6]
    573a:	2a12      	cmp	r2, #18
    573c:	bf28      	it	cs
    573e:	2212      	movcs	r2, #18
    5740:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    5742:	4b0c      	ldr	r3, [pc, #48]	; (5774 <usbdc_cb_ctl_req+0x284>)
    5744:	681b      	ldr	r3, [r3, #0]
    5746:	2201      	movs	r2, #1
    5748:	6859      	ldr	r1, [r3, #4]
    574a:	6818      	ldr	r0, [r3, #0]
    574c:	4b0b      	ldr	r3, [pc, #44]	; (577c <usbdc_cb_ctl_req+0x28c>)
    574e:	4798      	blx	r3
	if (!dev_desc) {
    5750:	4601      	mov	r1, r0
    5752:	2800      	cmp	r0, #0
    5754:	f000 80c7 	beq.w	58e6 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    5758:	2300      	movs	r3, #0
    575a:	4622      	mov	r2, r4
    575c:	4628      	mov	r0, r5
    575e:	4c04      	ldr	r4, [pc, #16]	; (5770 <usbdc_cb_ctl_req+0x280>)
    5760:	47a0      	blx	r4
    5762:	fab0 f080 	clz	r0, r0
    5766:	0940      	lsrs	r0, r0, #5
    5768:	e6da      	b.n	5520 <usbdc_cb_ctl_req+0x30>
    576a:	bf00      	nop
    576c:	00005385 	.word	0x00005385
    5770:	000054d1 	.word	0x000054d1
    5774:	200005d0 	.word	0x200005d0
    5778:	00005a95 	.word	0x00005a95
    577c:	00005a15 	.word	0x00005a15
    5780:	00005339 	.word	0x00005339
    5784:	00001bdd 	.word	0x00001bdd
	uint16_t length   = req->wLength;
    5788:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    578a:	4b5b      	ldr	r3, [pc, #364]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    578c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	3201      	adds	r2, #1
    5792:	b2d2      	uxtb	r2, r2
    5794:	6859      	ldr	r1, [r3, #4]
    5796:	6818      	ldr	r0, [r3, #0]
    5798:	4b58      	ldr	r3, [pc, #352]	; (58fc <usbdc_cb_ctl_req+0x40c>)
    579a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    579c:	4601      	mov	r1, r0
    579e:	2800      	cmp	r0, #0
    57a0:	f000 80a3 	beq.w	58ea <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    57a4:	78c3      	ldrb	r3, [r0, #3]
    57a6:	7882      	ldrb	r2, [r0, #2]
    57a8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    57ac:	b292      	uxth	r2, r2
	if (length <= total_len) {
    57ae:	4294      	cmp	r4, r2
    57b0:	d90d      	bls.n	57ce <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    57b2:	3e01      	subs	r6, #1
    57b4:	4226      	tst	r6, r4
    57b6:	bf0c      	ite	eq
    57b8:	2301      	moveq	r3, #1
    57ba:	2300      	movne	r3, #0
		length = total_len;
    57bc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    57be:	4622      	mov	r2, r4
    57c0:	4628      	mov	r0, r5
    57c2:	4c4f      	ldr	r4, [pc, #316]	; (5900 <usbdc_cb_ctl_req+0x410>)
    57c4:	47a0      	blx	r4
    57c6:	fab0 f080 	clz	r0, r0
    57ca:	0940      	lsrs	r0, r0, #5
    57cc:	e6a8      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    57ce:	2300      	movs	r3, #0
    57d0:	e7f5      	b.n	57be <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    57d2:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    57d4:	4b48      	ldr	r3, [pc, #288]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    57d6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	b2d2      	uxtb	r2, r2
    57dc:	6859      	ldr	r1, [r3, #4]
    57de:	6818      	ldr	r0, [r3, #0]
    57e0:	4b48      	ldr	r3, [pc, #288]	; (5904 <usbdc_cb_ctl_req+0x414>)
    57e2:	4798      	blx	r3
	if (NULL == str_desc) {
    57e4:	4601      	mov	r1, r0
    57e6:	2800      	cmp	r0, #0
    57e8:	f000 8081 	beq.w	58ee <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    57ec:	7802      	ldrb	r2, [r0, #0]
    57ee:	4294      	cmp	r4, r2
    57f0:	d90d      	bls.n	580e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    57f2:	3e01      	subs	r6, #1
    57f4:	4226      	tst	r6, r4
    57f6:	bf0c      	ite	eq
    57f8:	2301      	moveq	r3, #1
    57fa:	2300      	movne	r3, #0
		length = str_desc[0];
    57fc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    57fe:	4622      	mov	r2, r4
    5800:	4628      	mov	r0, r5
    5802:	4c3f      	ldr	r4, [pc, #252]	; (5900 <usbdc_cb_ctl_req+0x410>)
    5804:	47a0      	blx	r4
    5806:	fab0 f080 	clz	r0, r0
    580a:	0940      	lsrs	r0, r0, #5
    580c:	e688      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    580e:	2300      	movs	r3, #0
    5810:	e7f5      	b.n	57fe <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    5812:	4939      	ldr	r1, [pc, #228]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    5814:	694b      	ldr	r3, [r1, #20]
    5816:	7eca      	ldrb	r2, [r1, #27]
    5818:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    581a:	2300      	movs	r3, #0
    581c:	2201      	movs	r2, #1
    581e:	6949      	ldr	r1, [r1, #20]
    5820:	4628      	mov	r0, r5
    5822:	4c37      	ldr	r4, [pc, #220]	; (5900 <usbdc_cb_ctl_req+0x410>)
    5824:	47a0      	blx	r4
		return true;
    5826:	2001      	movs	r0, #1
    5828:	e67a      	b.n	5520 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    582a:	f003 031f 	and.w	r3, r3, #31
    582e:	2b01      	cmp	r3, #1
    5830:	d903      	bls.n	583a <usbdc_cb_ctl_req+0x34a>
    5832:	2b02      	cmp	r3, #2
    5834:	d010      	beq.n	5858 <usbdc_cb_ctl_req+0x368>
		return false;
    5836:	2000      	movs	r0, #0
    5838:	e672      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		st = 0;
    583a:	2300      	movs	r3, #0
    583c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    583e:	492e      	ldr	r1, [pc, #184]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    5840:	694b      	ldr	r3, [r1, #20]
    5842:	f8bd 2000 	ldrh.w	r2, [sp]
    5846:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    5848:	2300      	movs	r3, #0
    584a:	2202      	movs	r2, #2
    584c:	6949      	ldr	r1, [r1, #20]
    584e:	4628      	mov	r0, r5
    5850:	4c2b      	ldr	r4, [pc, #172]	; (5900 <usbdc_cb_ctl_req+0x410>)
    5852:	47a0      	blx	r4
	return true;
    5854:	2001      	movs	r0, #1
    5856:	e663      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    5858:	88a0      	ldrh	r0, [r4, #4]
    585a:	2102      	movs	r1, #2
    585c:	b2c0      	uxtb	r0, r0
    585e:	4b2a      	ldr	r3, [pc, #168]	; (5908 <usbdc_cb_ctl_req+0x418>)
    5860:	4798      	blx	r3
		if (st < 0) {
    5862:	2800      	cmp	r0, #0
    5864:	db03      	blt.n	586e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    5866:	f000 0001 	and.w	r0, r0, #1
    586a:	9000      	str	r0, [sp, #0]
    586c:	e7e7      	b.n	583e <usbdc_cb_ctl_req+0x34e>
			return false;
    586e:	2000      	movs	r0, #0
    5870:	e656      	b.n	5520 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    5872:	4b21      	ldr	r3, [pc, #132]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    5874:	7f5b      	ldrb	r3, [r3, #29]
    5876:	88a2      	ldrh	r2, [r4, #4]
    5878:	4113      	asrs	r3, r2
    587a:	f013 0f01 	tst.w	r3, #1
    587e:	d012      	beq.n	58a6 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5880:	4b1d      	ldr	r3, [pc, #116]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    5882:	691d      	ldr	r5, [r3, #16]
	return false;
    5884:	2000      	movs	r0, #0
	while (NULL != func) {
    5886:	2d00      	cmp	r5, #0
    5888:	f43f ae4a 	beq.w	5520 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    588c:	2602      	movs	r6, #2
    588e:	686b      	ldr	r3, [r5, #4]
    5890:	4622      	mov	r2, r4
    5892:	4631      	mov	r1, r6
    5894:	4628      	mov	r0, r5
    5896:	4798      	blx	r3
    5898:	2800      	cmp	r0, #0
    589a:	da0f      	bge.n	58bc <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    589c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    589e:	2d00      	cmp	r5, #0
    58a0:	d1f5      	bne.n	588e <usbdc_cb_ctl_req+0x39e>
	return false;
    58a2:	2000      	movs	r0, #0
    58a4:	e63c      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    58a6:	4914      	ldr	r1, [pc, #80]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    58a8:	694b      	ldr	r3, [r1, #20]
    58aa:	2000      	movs	r0, #0
    58ac:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    58ae:	4603      	mov	r3, r0
    58b0:	2201      	movs	r2, #1
    58b2:	6949      	ldr	r1, [r1, #20]
    58b4:	4c12      	ldr	r4, [pc, #72]	; (5900 <usbdc_cb_ctl_req+0x410>)
    58b6:	47a0      	blx	r4
		return true;
    58b8:	2001      	movs	r0, #1
    58ba:	e631      	b.n	5520 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    58bc:	490e      	ldr	r1, [pc, #56]	; (58f8 <usbdc_cb_ctl_req+0x408>)
    58be:	694b      	ldr	r3, [r1, #20]
    58c0:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    58c2:	2300      	movs	r3, #0
    58c4:	2201      	movs	r2, #1
    58c6:	6949      	ldr	r1, [r1, #20]
    58c8:	4618      	mov	r0, r3
    58ca:	4c0d      	ldr	r4, [pc, #52]	; (5900 <usbdc_cb_ctl_req+0x410>)
    58cc:	47a0      	blx	r4
			return true;
    58ce:	2001      	movs	r0, #1
    58d0:	e626      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return true;
    58d2:	2001      	movs	r0, #1
    58d4:	e624      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58d6:	2000      	movs	r0, #0
    58d8:	e622      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58da:	2000      	movs	r0, #0
    58dc:	e620      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58de:	2000      	movs	r0, #0
    58e0:	e61e      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58e2:	2000      	movs	r0, #0
    58e4:	e61c      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58e6:	2000      	movs	r0, #0
    58e8:	e61a      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58ea:	2000      	movs	r0, #0
    58ec:	e618      	b.n	5520 <usbdc_cb_ctl_req+0x30>
		return false;
    58ee:	2000      	movs	r0, #0
    58f0:	e616      	b.n	5520 <usbdc_cb_ctl_req+0x30>
			return false;
    58f2:	2000      	movs	r0, #0
    58f4:	e614      	b.n	5520 <usbdc_cb_ctl_req+0x30>
    58f6:	bf00      	nop
    58f8:	200005d0 	.word	0x200005d0
    58fc:	00005a95 	.word	0x00005a95
    5900:	000054d1 	.word	0x000054d1
    5904:	00005afd 	.word	0x00005afd
    5908:	00001bdd 	.word	0x00001bdd

0000590c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    590c:	b508      	push	{r3, lr}
	switch (type) {
    590e:	2801      	cmp	r0, #1
    5910:	d007      	beq.n	5922 <usbdc_register_handler+0x16>
    5912:	b110      	cbz	r0, 591a <usbdc_register_handler+0xe>
    5914:	2802      	cmp	r0, #2
    5916:	d008      	beq.n	592a <usbdc_register_handler+0x1e>
    5918:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    591a:	4806      	ldr	r0, [pc, #24]	; (5934 <usbdc_register_handler+0x28>)
    591c:	4b06      	ldr	r3, [pc, #24]	; (5938 <usbdc_register_handler+0x2c>)
    591e:	4798      	blx	r3
		break;
    5920:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    5922:	4806      	ldr	r0, [pc, #24]	; (593c <usbdc_register_handler+0x30>)
    5924:	4b04      	ldr	r3, [pc, #16]	; (5938 <usbdc_register_handler+0x2c>)
    5926:	4798      	blx	r3
		break;
    5928:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    592a:	4805      	ldr	r0, [pc, #20]	; (5940 <usbdc_register_handler+0x34>)
    592c:	4b02      	ldr	r3, [pc, #8]	; (5938 <usbdc_register_handler+0x2c>)
    592e:	4798      	blx	r3
    5930:	bd08      	pop	{r3, pc}
    5932:	bf00      	nop
    5934:	200005d4 	.word	0x200005d4
    5938:	00001ced 	.word	0x00001ced
    593c:	200005d8 	.word	0x200005d8
    5940:	200005dc 	.word	0x200005dc

00005944 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    5944:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    5946:	4605      	mov	r5, r0
    5948:	f240 3255 	movw	r2, #853	; 0x355
    594c:	490c      	ldr	r1, [pc, #48]	; (5980 <usbdc_init+0x3c>)
    594e:	3000      	adds	r0, #0
    5950:	bf18      	it	ne
    5952:	2001      	movne	r0, #1
    5954:	4b0b      	ldr	r3, [pc, #44]	; (5984 <usbdc_init+0x40>)
    5956:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    5958:	4b0b      	ldr	r3, [pc, #44]	; (5988 <usbdc_init+0x44>)
    595a:	4798      	blx	r3
	if (rc < 0) {
    595c:	2800      	cmp	r0, #0
    595e:	db0e      	blt.n	597e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5960:	4c0a      	ldr	r4, [pc, #40]	; (598c <usbdc_init+0x48>)
    5962:	2220      	movs	r2, #32
    5964:	2100      	movs	r1, #0
    5966:	4620      	mov	r0, r4
    5968:	4b09      	ldr	r3, [pc, #36]	; (5990 <usbdc_init+0x4c>)
    596a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    596c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    596e:	4909      	ldr	r1, [pc, #36]	; (5994 <usbdc_init+0x50>)
    5970:	2000      	movs	r0, #0
    5972:	4c09      	ldr	r4, [pc, #36]	; (5998 <usbdc_init+0x54>)
    5974:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    5976:	4909      	ldr	r1, [pc, #36]	; (599c <usbdc_init+0x58>)
    5978:	2001      	movs	r0, #1
    597a:	47a0      	blx	r4

	return 0;
    597c:	2000      	movs	r0, #0
}
    597e:	bd38      	pop	{r3, r4, r5, pc}
    5980:	00005fc0 	.word	0x00005fc0
    5984:	00001c91 	.word	0x00001c91
    5988:	00001945 	.word	0x00001945
    598c:	200005d0 	.word	0x200005d0
    5990:	00005bdf 	.word	0x00005bdf
    5994:	000053c5 	.word	0x000053c5
    5998:	000019ad 	.word	0x000019ad
    599c:	000054b1 	.word	0x000054b1

000059a0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    59a0:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    59a2:	4601      	mov	r1, r0
    59a4:	4801      	ldr	r0, [pc, #4]	; (59ac <usbdc_register_function+0xc>)
    59a6:	4b02      	ldr	r3, [pc, #8]	; (59b0 <usbdc_register_function+0x10>)
    59a8:	4798      	blx	r3
    59aa:	bd08      	pop	{r3, pc}
    59ac:	200005e0 	.word	0x200005e0
    59b0:	00001ced 	.word	0x00001ced

000059b4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    59b4:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    59b6:	4b0a      	ldr	r3, [pc, #40]	; (59e0 <usbdc_start+0x2c>)
    59b8:	7e9b      	ldrb	r3, [r3, #26]
    59ba:	b95b      	cbnz	r3, 59d4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    59bc:	b168      	cbz	r0, 59da <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    59be:	4b08      	ldr	r3, [pc, #32]	; (59e0 <usbdc_start+0x2c>)
    59c0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    59c2:	6802      	ldr	r2, [r0, #0]
    59c4:	79d2      	ldrb	r2, [r2, #7]
    59c6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    59c8:	2201      	movs	r2, #1
    59ca:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    59cc:	4b05      	ldr	r3, [pc, #20]	; (59e4 <usbdc_start+0x30>)
    59ce:	4798      	blx	r3
	return ERR_NONE;
    59d0:	2000      	movs	r0, #0
    59d2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    59d4:	f06f 0003 	mvn.w	r0, #3
    59d8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    59da:	f06f 0008 	mvn.w	r0, #8
}
    59de:	bd08      	pop	{r3, pc}
    59e0:	200005d0 	.word	0x200005d0
    59e4:	000019b9 	.word	0x000019b9

000059e8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    59e8:	b508      	push	{r3, lr}
	usb_d_attach();
    59ea:	4b01      	ldr	r3, [pc, #4]	; (59f0 <usbdc_attach+0x8>)
    59ec:	4798      	blx	r3
    59ee:	bd08      	pop	{r3, pc}
    59f0:	000019c5 	.word	0x000019c5

000059f4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    59f4:	4b01      	ldr	r3, [pc, #4]	; (59fc <usbdc_get_ctrl_buffer+0x8>)
    59f6:	6958      	ldr	r0, [r3, #20]
    59f8:	4770      	bx	lr
    59fa:	bf00      	nop
    59fc:	200005d0 	.word	0x200005d0

00005a00 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    5a00:	4b03      	ldr	r3, [pc, #12]	; (5a10 <usbdc_get_state+0x10>)
    5a02:	7e98      	ldrb	r0, [r3, #26]
    5a04:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    5a08:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    5a0a:	bf18      	it	ne
    5a0c:	2010      	movne	r0, #16
    5a0e:	4770      	bx	lr
    5a10:	200005d0 	.word	0x200005d0

00005a14 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5a14:	4288      	cmp	r0, r1
    5a16:	d214      	bcs.n	5a42 <usb_find_desc+0x2e>
	return desc[0];
    5a18:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5a1a:	2b01      	cmp	r3, #1
    5a1c:	d913      	bls.n	5a46 <usb_find_desc+0x32>
{
    5a1e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    5a20:	7844      	ldrb	r4, [r0, #1]
    5a22:	4294      	cmp	r4, r2
    5a24:	d00a      	beq.n	5a3c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    5a26:	4418      	add	r0, r3
	while (desc < eof) {
    5a28:	4281      	cmp	r1, r0
    5a2a:	d906      	bls.n	5a3a <usb_find_desc+0x26>
	return desc[0];
    5a2c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5a2e:	2b01      	cmp	r3, #1
    5a30:	d90b      	bls.n	5a4a <usb_find_desc+0x36>
	return desc[1];
    5a32:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    5a34:	4294      	cmp	r4, r2
    5a36:	d1f6      	bne.n	5a26 <usb_find_desc+0x12>
    5a38:	e000      	b.n	5a3c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5a3a:	2000      	movs	r0, #0
}
    5a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a40:	4770      	bx	lr
	return NULL;
    5a42:	2000      	movs	r0, #0
    5a44:	4770      	bx	lr
		_desc_len_check();
    5a46:	2000      	movs	r0, #0
    5a48:	4770      	bx	lr
    5a4a:	2000      	movs	r0, #0
    5a4c:	e7f6      	b.n	5a3c <usb_find_desc+0x28>

00005a4e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5a4e:	4288      	cmp	r0, r1
    5a50:	d216      	bcs.n	5a80 <usb_find_ep_desc+0x32>
	return desc[0];
    5a52:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5a54:	2b01      	cmp	r3, #1
    5a56:	d915      	bls.n	5a84 <usb_find_ep_desc+0x36>
	return desc[1];
    5a58:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5a5a:	2a04      	cmp	r2, #4
    5a5c:	d014      	beq.n	5a88 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5a5e:	2a05      	cmp	r2, #5
    5a60:	d00b      	beq.n	5a7a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    5a62:	4418      	add	r0, r3
	while (desc < eof) {
    5a64:	4281      	cmp	r1, r0
    5a66:	d909      	bls.n	5a7c <usb_find_ep_desc+0x2e>
	return desc[0];
    5a68:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5a6a:	2b01      	cmp	r3, #1
    5a6c:	d90e      	bls.n	5a8c <usb_find_ep_desc+0x3e>
	return desc[1];
    5a6e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5a70:	2a04      	cmp	r2, #4
    5a72:	d00d      	beq.n	5a90 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5a74:	2a05      	cmp	r2, #5
    5a76:	d1f4      	bne.n	5a62 <usb_find_ep_desc+0x14>
    5a78:	e00b      	b.n	5a92 <usb_find_ep_desc+0x44>
    5a7a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5a7c:	2000      	movs	r0, #0
    5a7e:	4770      	bx	lr
    5a80:	2000      	movs	r0, #0
    5a82:	4770      	bx	lr
		_desc_len_check();
    5a84:	2000      	movs	r0, #0
    5a86:	4770      	bx	lr
	return NULL;
    5a88:	2000      	movs	r0, #0
    5a8a:	4770      	bx	lr
		_desc_len_check();
    5a8c:	2000      	movs	r0, #0
    5a8e:	4770      	bx	lr
	return NULL;
    5a90:	2000      	movs	r0, #0
}
    5a92:	4770      	bx	lr

00005a94 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    5a94:	b538      	push	{r3, r4, r5, lr}
    5a96:	460c      	mov	r4, r1
    5a98:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    5a9a:	2202      	movs	r2, #2
    5a9c:	4b16      	ldr	r3, [pc, #88]	; (5af8 <usb_find_cfg_desc+0x64>)
    5a9e:	4798      	blx	r3
	if (!desc) {
    5aa0:	4603      	mov	r3, r0
    5aa2:	b1e8      	cbz	r0, 5ae0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    5aa4:	4284      	cmp	r4, r0
    5aa6:	d91d      	bls.n	5ae4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    5aa8:	7802      	ldrb	r2, [r0, #0]
    5aaa:	2a01      	cmp	r2, #1
    5aac:	d91c      	bls.n	5ae8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    5aae:	7842      	ldrb	r2, [r0, #1]
    5ab0:	2a02      	cmp	r2, #2
    5ab2:	d11b      	bne.n	5aec <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    5ab4:	7942      	ldrb	r2, [r0, #5]
    5ab6:	42aa      	cmp	r2, r5
    5ab8:	d012      	beq.n	5ae0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    5aba:	78d9      	ldrb	r1, [r3, #3]
    5abc:	789a      	ldrb	r2, [r3, #2]
    5abe:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    5ac2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    5ac6:	429c      	cmp	r4, r3
    5ac8:	d909      	bls.n	5ade <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    5aca:	781a      	ldrb	r2, [r3, #0]
    5acc:	2a01      	cmp	r2, #1
    5ace:	d90f      	bls.n	5af0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    5ad0:	785a      	ldrb	r2, [r3, #1]
    5ad2:	2a02      	cmp	r2, #2
    5ad4:	d10e      	bne.n	5af4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    5ad6:	795a      	ldrb	r2, [r3, #5]
    5ad8:	42aa      	cmp	r2, r5
    5ada:	d1ee      	bne.n	5aba <usb_find_cfg_desc+0x26>
    5adc:	e000      	b.n	5ae0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    5ade:	2300      	movs	r3, #0
}
    5ae0:	4618      	mov	r0, r3
    5ae2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    5ae4:	2300      	movs	r3, #0
    5ae6:	e7fb      	b.n	5ae0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    5ae8:	2300      	movs	r3, #0
    5aea:	e7f9      	b.n	5ae0 <usb_find_cfg_desc+0x4c>
	return NULL;
    5aec:	2300      	movs	r3, #0
    5aee:	e7f7      	b.n	5ae0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    5af0:	2300      	movs	r3, #0
    5af2:	e7f5      	b.n	5ae0 <usb_find_cfg_desc+0x4c>
	return NULL;
    5af4:	2300      	movs	r3, #0
    5af6:	e7f3      	b.n	5ae0 <usb_find_cfg_desc+0x4c>
    5af8:	00005a15 	.word	0x00005a15

00005afc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    5afc:	4288      	cmp	r0, r1
    5afe:	d217      	bcs.n	5b30 <usb_find_str_desc+0x34>
{
    5b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b04:	460d      	mov	r5, r1
    5b06:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    5b08:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    5b0a:	f04f 0803 	mov.w	r8, #3
    5b0e:	4f0c      	ldr	r7, [pc, #48]	; (5b40 <usb_find_str_desc+0x44>)
    5b10:	4642      	mov	r2, r8
    5b12:	4629      	mov	r1, r5
    5b14:	47b8      	blx	r7
		if (desc) {
    5b16:	4603      	mov	r3, r0
    5b18:	b170      	cbz	r0, 5b38 <usb_find_str_desc+0x3c>
	return desc[0];
    5b1a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    5b1c:	2801      	cmp	r0, #1
    5b1e:	d90a      	bls.n	5b36 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    5b20:	42a6      	cmp	r6, r4
    5b22:	d009      	beq.n	5b38 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    5b24:	4418      	add	r0, r3
    5b26:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    5b28:	4285      	cmp	r5, r0
    5b2a:	d8f1      	bhi.n	5b10 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    5b2c:	2300      	movs	r3, #0
    5b2e:	e003      	b.n	5b38 <usb_find_str_desc+0x3c>
    5b30:	2300      	movs	r3, #0
}
    5b32:	4618      	mov	r0, r3
    5b34:	4770      	bx	lr
			_desc_len_check();
    5b36:	2300      	movs	r3, #0
}
    5b38:	4618      	mov	r0, r3
    5b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b3e:	bf00      	nop
    5b40:	00005a15 	.word	0x00005a15

00005b44 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    5b44:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    5b46:	4805      	ldr	r0, [pc, #20]	; (5b5c <cdc_device_acm_init+0x18>)
    5b48:	4b05      	ldr	r3, [pc, #20]	; (5b60 <cdc_device_acm_init+0x1c>)
    5b4a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    5b4c:	4b05      	ldr	r3, [pc, #20]	; (5b64 <cdc_device_acm_init+0x20>)
    5b4e:	4798      	blx	r3

	usbdc_start(single_desc);
    5b50:	4805      	ldr	r0, [pc, #20]	; (5b68 <cdc_device_acm_init+0x24>)
    5b52:	4b06      	ldr	r3, [pc, #24]	; (5b6c <cdc_device_acm_init+0x28>)
    5b54:	4798      	blx	r3
	usbdc_attach();
    5b56:	4b06      	ldr	r3, [pc, #24]	; (5b70 <cdc_device_acm_init+0x2c>)
    5b58:	4798      	blx	r3
    5b5a:	bd08      	pop	{r3, pc}
    5b5c:	20000630 	.word	0x20000630
    5b60:	00005945 	.word	0x00005945
    5b64:	000052f5 	.word	0x000052f5
    5b68:	20000080 	.word	0x20000080
    5b6c:	000059b5 	.word	0x000059b5
    5b70:	000059e9 	.word	0x000059e9

00005b74 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    5b74:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    5b76:	4b01      	ldr	r3, [pc, #4]	; (5b7c <usb_init+0x8>)
    5b78:	4798      	blx	r3
    5b7a:	bd08      	pop	{r3, pc}
    5b7c:	00005b45 	.word	0x00005b45

00005b80 <__libc_init_array>:
    5b80:	b570      	push	{r4, r5, r6, lr}
    5b82:	4e0d      	ldr	r6, [pc, #52]	; (5bb8 <__libc_init_array+0x38>)
    5b84:	4c0d      	ldr	r4, [pc, #52]	; (5bbc <__libc_init_array+0x3c>)
    5b86:	1ba4      	subs	r4, r4, r6
    5b88:	10a4      	asrs	r4, r4, #2
    5b8a:	2500      	movs	r5, #0
    5b8c:	42a5      	cmp	r5, r4
    5b8e:	d109      	bne.n	5ba4 <__libc_init_array+0x24>
    5b90:	4e0b      	ldr	r6, [pc, #44]	; (5bc0 <__libc_init_array+0x40>)
    5b92:	4c0c      	ldr	r4, [pc, #48]	; (5bc4 <__libc_init_array+0x44>)
    5b94:	f000 fa20 	bl	5fd8 <_init>
    5b98:	1ba4      	subs	r4, r4, r6
    5b9a:	10a4      	asrs	r4, r4, #2
    5b9c:	2500      	movs	r5, #0
    5b9e:	42a5      	cmp	r5, r4
    5ba0:	d105      	bne.n	5bae <__libc_init_array+0x2e>
    5ba2:	bd70      	pop	{r4, r5, r6, pc}
    5ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5ba8:	4798      	blx	r3
    5baa:	3501      	adds	r5, #1
    5bac:	e7ee      	b.n	5b8c <__libc_init_array+0xc>
    5bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5bb2:	4798      	blx	r3
    5bb4:	3501      	adds	r5, #1
    5bb6:	e7f2      	b.n	5b9e <__libc_init_array+0x1e>
    5bb8:	00005fe4 	.word	0x00005fe4
    5bbc:	00005fe4 	.word	0x00005fe4
    5bc0:	00005fe4 	.word	0x00005fe4
    5bc4:	00005fe8 	.word	0x00005fe8

00005bc8 <memcpy>:
    5bc8:	b510      	push	{r4, lr}
    5bca:	1e43      	subs	r3, r0, #1
    5bcc:	440a      	add	r2, r1
    5bce:	4291      	cmp	r1, r2
    5bd0:	d100      	bne.n	5bd4 <memcpy+0xc>
    5bd2:	bd10      	pop	{r4, pc}
    5bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
    5bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
    5bdc:	e7f7      	b.n	5bce <memcpy+0x6>

00005bde <memset>:
    5bde:	4402      	add	r2, r0
    5be0:	4603      	mov	r3, r0
    5be2:	4293      	cmp	r3, r2
    5be4:	d100      	bne.n	5be8 <memset+0xa>
    5be6:	4770      	bx	lr
    5be8:	f803 1b01 	strb.w	r1, [r3], #1
    5bec:	e7f9      	b.n	5be2 <memset+0x4>
    5bee:	0000      	movs	r0, r0
    5bf0:	682f2e2e 	.word	0x682f2e2e
    5bf4:	692f6c61 	.word	0x692f6c61
    5bf8:	756c636e 	.word	0x756c636e
    5bfc:	682f6564 	.word	0x682f6564
    5c00:	775f6c61 	.word	0x775f6c61
    5c04:	682e7464 	.word	0x682e7464
    5c08:	00000000 	.word	0x00000000
    5c0c:	682f2e2e 	.word	0x682f2e2e
    5c10:	732f6c61 	.word	0x732f6c61
    5c14:	682f6372 	.word	0x682f6372
    5c18:	635f6c61 	.word	0x635f6c61
    5c1c:	6e656c61 	.word	0x6e656c61
    5c20:	2e726164 	.word	0x2e726164
    5c24:	00000063 	.word	0x00000063
    5c28:	682f2e2e 	.word	0x682f2e2e
    5c2c:	732f6c61 	.word	0x732f6c61
    5c30:	682f6372 	.word	0x682f6372
    5c34:	635f6c61 	.word	0x635f6c61
    5c38:	615f6e61 	.word	0x615f6e61
    5c3c:	636e7973 	.word	0x636e7973
    5c40:	0000632e 	.word	0x0000632e
    5c44:	682f2e2e 	.word	0x682f2e2e
    5c48:	732f6c61 	.word	0x732f6c61
    5c4c:	682f6372 	.word	0x682f6372
    5c50:	635f6c61 	.word	0x635f6c61
    5c54:	735f6372 	.word	0x735f6372
    5c58:	2e636e79 	.word	0x2e636e79
    5c5c:	00000063 	.word	0x00000063
    5c60:	682f2e2e 	.word	0x682f2e2e
    5c64:	732f6c61 	.word	0x732f6c61
    5c68:	682f6372 	.word	0x682f6372
    5c6c:	695f6c61 	.word	0x695f6c61
    5c70:	6d5f6332 	.word	0x6d5f6332
    5c74:	7973615f 	.word	0x7973615f
    5c78:	632e636e 	.word	0x632e636e
    5c7c:	00000000 	.word	0x00000000
    5c80:	682f2e2e 	.word	0x682f2e2e
    5c84:	732f6c61 	.word	0x732f6c61
    5c88:	682f6372 	.word	0x682f6372
    5c8c:	705f6c61 	.word	0x705f6c61
    5c90:	632e6d77 	.word	0x632e6d77
    5c94:	00000000 	.word	0x00000000
    5c98:	682f2e2e 	.word	0x682f2e2e
    5c9c:	732f6c61 	.word	0x732f6c61
    5ca0:	682f6372 	.word	0x682f6372
    5ca4:	715f6c61 	.word	0x715f6c61
    5ca8:	5f697073 	.word	0x5f697073
    5cac:	636e7973 	.word	0x636e7973
    5cb0:	0000632e 	.word	0x0000632e
    5cb4:	682f2e2e 	.word	0x682f2e2e
    5cb8:	732f6c61 	.word	0x732f6c61
    5cbc:	682f6372 	.word	0x682f6372
    5cc0:	735f6c61 	.word	0x735f6c61
    5cc4:	6d5f6970 	.word	0x6d5f6970
    5cc8:	7973615f 	.word	0x7973615f
    5ccc:	632e636e 	.word	0x632e636e
    5cd0:	00000000 	.word	0x00000000
    5cd4:	682f2e2e 	.word	0x682f2e2e
    5cd8:	732f6c61 	.word	0x732f6c61
    5cdc:	682f6372 	.word	0x682f6372
    5ce0:	735f6c61 	.word	0x735f6c61
    5ce4:	6d5f6970 	.word	0x6d5f6970
    5ce8:	6e79735f 	.word	0x6e79735f
    5cec:	00632e63 	.word	0x00632e63
    5cf0:	682f2e2e 	.word	0x682f2e2e
    5cf4:	732f6c61 	.word	0x732f6c61
    5cf8:	682f6372 	.word	0x682f6372
    5cfc:	745f6c61 	.word	0x745f6c61
    5d00:	72656d69 	.word	0x72656d69
    5d04:	0000632e 	.word	0x0000632e
    5d08:	682f2e2e 	.word	0x682f2e2e
    5d0c:	752f6c61 	.word	0x752f6c61
    5d10:	736c6974 	.word	0x736c6974
    5d14:	6372732f 	.word	0x6372732f
    5d18:	6974752f 	.word	0x6974752f
    5d1c:	6c5f736c 	.word	0x6c5f736c
    5d20:	2e747369 	.word	0x2e747369
    5d24:	00000063 	.word	0x00000063

00005d28 <_map>:
    5d28:	00000004 00000004 00000005 00000005     ................
    5d38:	00000006 00000056 00000007 00000057     ....V.......W...
    5d48:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5d58:	632e6369 00000000                       ic.c....

00005d60 <user_mux_confs>:
    5d60:	00000100 00000000 00000000 00000000     ................
	...

00005da4 <channel_confs>:
    5da4:	0000065e 00000000 00000000 00000000     ^...............
	...

00005de4 <interrupt_cfg>:
	...
    5e64:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    5e74:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    5e84:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    5e94:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    5ea4:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00005eb4 <_i2cms>:
    5eb4:	00000005 00200014 00000100 00003635     ...... .....56..
    5ec4:	00d70000 00b71b00 00000007 00200014     .............. .
    5ed4:	00000100 00003635 00d70000 00b71b00     ....56..........

00005ee4 <sercomspi_regs>:
    5ee4:	0020000c 00020000 00000000 01ff004f     .. .........O...
    5ef4:	30000c04 02000000 00000000 ff004f00     ...0.........O..
    5f04:	00000601 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    5f14:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    5f24:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    5f34:	42001400 42001800 43001400 43001800     ...B...B...C...C
    5f44:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    5f54:	0000632e                                .c..

00005f58 <_usb_ep_cfgs>:
    5f58:	2000055c 00000000 00000040 2000051c     \.. ....@...... 
    5f68:	200004dc 00400040 2000049c 2000045c     ... @.@.... \.. 
    5f78:	00400040 2000041c 200003dc 00400040     @.@.... ... @.@.
    5f88:	2000039c 2000035c 00400040 682f2e2e     ... \.. @.@.../h
    5f98:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    5fa8:	00000000                                ....

00005fac <n25q256a_interface>:
    5fac:	000049a9 00004cb1 00004d71 00004be9     .I...L..qM...K..
    5fbc:	00004b29 752f2e2e 642f6273 63697665     )K..../usb/devic
    5fcc:	73752f65 2e636462 00000063              e/usbdc.c...

00005fd8 <_init>:
    5fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fda:	bf00      	nop
    5fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fde:	bc08      	pop	{r3}
    5fe0:	469e      	mov	lr, r3
    5fe2:	4770      	bx	lr

00005fe4 <__init_array_start>:
    5fe4:	00000289 	.word	0x00000289

00005fe8 <_fini>:
    5fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fea:	bf00      	nop
    5fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fee:	bc08      	pop	{r3}
    5ff0:	469e      	mov	lr, r3
    5ff2:	4770      	bx	lr

00005ff4 <__fini_array_start>:
    5ff4:	00000265 	.word	0x00000265
